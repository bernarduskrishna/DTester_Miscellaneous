{"/bernard/dataset_construction/prep/repos/jedis/src/main/java/redis/clients/jedis/Protocol.java":{"class_content":["package redis.clients.jedis;\n","\n","import java.io.IOException;\n","import java.nio.charset.Charset;\n","import java.nio.charset.StandardCharsets;\n","import java.util.ArrayList;\n","import java.util.List;\n","import java.util.Locale;\n","\n","import redis.clients.jedis.exceptions.*;\n","import redis.clients.jedis.args.Rawable;\n","import redis.clients.jedis.commands.ProtocolCommand;\n","import redis.clients.jedis.util.KeyValue;\n","import redis.clients.jedis.util.RedisInputStream;\n","import redis.clients.jedis.util.RedisOutputStream;\n","import redis.clients.jedis.util.SafeEncoder;\n","\n","public final class Protocol {\n","\n","  public static final String DEFAULT_HOST = \"127.0.0.1\";\n","  public static final int DEFAULT_PORT = 6379;\n","  public static final int DEFAULT_SENTINEL_PORT = 26379;\n","  public static final int DEFAULT_TIMEOUT = 2000;\n","  public static final int DEFAULT_DATABASE = 0;\n","  public static final int CLUSTER_HASHSLOTS = 16384;\n","\n","  public static final Charset CHARSET = StandardCharsets.UTF_8;\n","\n","  public static final byte ASTERISK_BYTE = '*';\n","  public static final byte COLON_BYTE = ':';\n","  public static final byte COMMA_BYTE = ',';\n","  public static final byte DOLLAR_BYTE = '$';\n","  public static final byte EQUAL_BYTE = '=';\n","  public static final byte GREATER_THAN_BYTE = '>';\n","  public static final byte HASH_BYTE = '#';\n","  public static final byte LEFT_BRACE_BYTE = '(';\n","  public static final byte MINUS_BYTE = '-';\n","  public static final byte PERCENT_BYTE = '%';\n","  public static final byte PLUS_BYTE = '+';\n","  public static final byte TILDE_BYTE = '~';\n","  public static final byte UNDERSCORE_BYTE = '_';\n","\n","  public static final byte[] BYTES_TRUE = toByteArray(1);\n","  public static final byte[] BYTES_FALSE = toByteArray(0);\n","  public static final byte[] BYTES_TILDE = SafeEncoder.encode(\"~\");\n","  public static final byte[] BYTES_EQUAL = SafeEncoder.encode(\"=\");\n","  public static final byte[] BYTES_ASTERISK = SafeEncoder.encode(\"*\");\n","\n","  public static final byte[] POSITIVE_INFINITY_BYTES = \"+inf\".getBytes();\n","  public static final byte[] NEGATIVE_INFINITY_BYTES = \"-inf\".getBytes();\n","\n","  private static final String ASK_PREFIX = \"ASK \";\n","  private static final String MOVED_PREFIX = \"MOVED \";\n","  private static final String CLUSTERDOWN_PREFIX = \"CLUSTERDOWN \";\n","  private static final String BUSY_PREFIX = \"BUSY \";\n","  private static final String NOSCRIPT_PREFIX = \"NOSCRIPT \";\n","  private static final String NOAUTH_PREFIX = \"NOAUTH\";\n","  private static final String WRONGPASS_PREFIX = \"WRONGPASS\";\n","  private static final String NOPERM_PREFIX = \"NOPERM\";\n","\n","  private Protocol() {\n","    throw new InstantiationError(\"Must not instantiate this class\");\n","  }\n","\n","  public static void sendCommand(final RedisOutputStream os, CommandArguments args) {\n","    try {\n","      os.write(ASTERISK_BYTE);\n","      os.writeIntCrLf(args.size());\n","      for (Rawable arg : args) {\n","        os.write(DOLLAR_BYTE);\n","        final byte[] bin = arg.getRaw();\n","        os.writeIntCrLf(bin.length);\n","        os.write(bin);\n","        os.writeCrLf();\n","      }\n","    } catch (IOException e) {\n","      throw new JedisConnectionException(e);\n","    }\n","  }\n","\n","  private static void processError(final RedisInputStream is) {\n","    String message = is.readLine();\n","    // TODO: I'm not sure if this is the best way to do this.\n","    // Maybe Read only first 5 bytes instead?\n","    if (message.startsWith(MOVED_PREFIX)) {\n","      String[] movedInfo = parseTargetHostAndSlot(message);\n","//      throw new JedisMovedDataException(message, new HostAndPort(movedInfo[1],\n","//          Integer.parseInt(movedInfo[2])), Integer.parseInt(movedInfo[0]));\n","      throw new JedisMovedDataException(message, HostAndPort.from(movedInfo[1]), Integer.parseInt(movedInfo[0]));\n","    } else if (message.startsWith(ASK_PREFIX)) {\n","      String[] askInfo = parseTargetHostAndSlot(message);\n","//      throw new JedisAskDataException(message, new HostAndPort(askInfo[1],\n","//          Integer.parseInt(askInfo[2])), Integer.parseInt(askInfo[0]));\n","      throw new JedisAskDataException(message, HostAndPort.from(askInfo[1]), Integer.parseInt(askInfo[0]));\n","    } else if (message.startsWith(CLUSTERDOWN_PREFIX)) {\n","      throw new JedisClusterException(message);\n","    } else if (message.startsWith(BUSY_PREFIX)) {\n","      throw new JedisBusyException(message);\n","    } else if (message.startsWith(NOSCRIPT_PREFIX)) {\n","      throw new JedisNoScriptException(message);\n","    } else if (message.startsWith(NOAUTH_PREFIX)\n","        || message.startsWith(WRONGPASS_PREFIX)\n","        || message.startsWith(NOPERM_PREFIX)) {\n","      throw new JedisAccessControlException(message);\n","    }\n","    throw new JedisDataException(message);\n","  }\n","\n","  public static String readErrorLineIfPossible(RedisInputStream is) {\n","    final byte b = is.readByte();\n","    // if buffer contains other type of response, just ignore.\n","    if (b != MINUS_BYTE) {\n","      return null;\n","    }\n","    return is.readLine();\n","  }\n","\n","//  private static String[] parseTargetHostAndSlot(String clusterRedirectResponse) {\n","//    String[] response = new String[3];\n","//    String[] messageInfo = clusterRedirectResponse.split(\" \");\n","//    String[] targetHostAndPort = HostAndPort.extractParts(messageInfo[2]);\n","//    response[0] = messageInfo[1];\n","//    response[1] = targetHostAndPort[0];\n","//    response[2] = targetHostAndPort[1];\n","//    return response;\n","//  }\n","  private static String[] parseTargetHostAndSlot(String clusterRedirectResponse) {\n","    String[] response = new String[2];\n","    String[] messageInfo = clusterRedirectResponse.split(\" \");\n","    response[0] = messageInfo[1];\n","    response[1] = messageInfo[2];\n","    return response;\n","  }\n","\n","  private static Object process(final RedisInputStream is) {\n","    final byte b = is.readByte();\n","    //System.out.println((char) b);\n","    switch (b) {\n","      case PLUS_BYTE:\n","        return is.readLineBytes();\n","      case DOLLAR_BYTE:\n","      case EQUAL_BYTE:\n","        return processBulkReply(is);\n","      case ASTERISK_BYTE:\n","        return processMultiBulkReply(is);\n","      case UNDERSCORE_BYTE:\n","        return is.readNullCrLf();\n","      case HASH_BYTE:\n","        return is.readBooleanCrLf();\n","      case COLON_BYTE:\n","        return is.readLongCrLf();\n","      case COMMA_BYTE:\n","        return is.readDoubleCrLf();\n","      case LEFT_BRACE_BYTE:\n","        return is.readBigIntegerCrLf();\n","      case PERCENT_BYTE: // TODO: currently just to start working with HELLO\n","        return processMapKeyValueReply(is);\n","      case TILDE_BYTE: // TODO:\n","        return processMultiBulkReply(is);\n","      case GREATER_THAN_BYTE:\n","        return processMultiBulkReply(is);\n","      case MINUS_BYTE:\n","        processError(is);\n","        return null;\n","      // TODO: Blob error '!'\n","      default:\n","        throw new JedisConnectionException(\"Unknown reply: \" + (char) b);\n","    }\n","  }\n","\n","  private static byte[] processBulkReply(final RedisInputStream is) {\n","    final int len = is.readIntCrLf();\n","    if (len == -1) {\n","      return null;\n","    }\n","\n","    final byte[] read = new byte[len];\n","    int offset = 0;\n","    while (offset < len) {\n","      final int size = is.read(read, offset, (len - offset));\n","      if (size == -1) {\n","        throw new JedisConnectionException(\"It seems like server has closed the connection.\");\n","      }\n","      offset += size;\n","    }\n","\n","    // read 2 more bytes for the command delimiter\n","    is.readByte();\n","    is.readByte();\n","\n","    return read;\n","  }\n","\n","  private static List<Object> processMultiBulkReply(final RedisInputStream is) {\n","  // private static List<Object> processMultiBulkReply(final int num, final RedisInputStream is) {\n","    final int num = is.readIntCrLf();\n","    if (num == -1) return null;\n","    final List<Object> ret = new ArrayList<>(num);\n","    for (int i = 0; i < num; i++) {\n","      try {\n","        ret.add(process(is));\n","      } catch (JedisDataException e) {\n","        ret.add(e);\n","      }\n","    }\n","    return ret;\n","  }\n","\n","  // private static List<Object> processMultiBulkReply(final RedisInputStream is) {\n","  // private static List<Object> processMultiBulkReply(final int num, final RedisInputStream is) {\n","  private static List<KeyValue> processMapKeyValueReply(final RedisInputStream is) {\n","    final int num = is.readIntCrLf();\n","    if (num == -1) return null;\n","    final List<KeyValue> ret = new ArrayList<>(num);\n","    for (int i = 0; i < num; i++) {\n","      ret.add(new KeyValue(process(is), process(is)));\n","    }\n","    return ret;\n","  }\n","\n","  public static Object read(final RedisInputStream is) {\n","    return process(is);\n","  }\n","\n","  public static final byte[] toByteArray(final boolean value) {\n","    return value ? BYTES_TRUE : BYTES_FALSE;\n","  }\n","\n","  public static final byte[] toByteArray(final int value) {\n","    return SafeEncoder.encode(String.valueOf(value));\n","  }\n","\n","  public static final byte[] toByteArray(final long value) {\n","    return SafeEncoder.encode(String.valueOf(value));\n","  }\n","\n","  public static final byte[] toByteArray(final double value) {\n","    if (value == Double.POSITIVE_INFINITY) {\n","      return POSITIVE_INFINITY_BYTES;\n","    } else if (value == Double.NEGATIVE_INFINITY) {\n","      return NEGATIVE_INFINITY_BYTES;\n","    } else {\n","      return SafeEncoder.encode(String.valueOf(value));\n","    }\n","  }\n","\n","  public static enum Command implements ProtocolCommand {\n","\n","    PING, AUTH, HELLO, SET, GET, GETDEL, GETEX, EXISTS, DEL, UNLINK, TYPE, FLUSHDB, FLUSHALL, MOVE,\n","    KEYS, RANDOMKEY, RENAME, RENAMENX, DUMP, RESTORE, DBSIZE, SELECT, SWAPDB, MIGRATE, ECHO, //\n","    EXPIRE, EXPIREAT, EXPIRETIME, PEXPIRE, PEXPIREAT, PEXPIRETIME, TTL, PTTL, // <-- key expiration\n","    MULTI, DISCARD, EXEC, WATCH, UNWATCH, SORT, SORT_RO, INFO, SHUTDOWN, MONITOR, CONFIG, LCS, //\n","    GETSET, MGET, SETNX, SETEX, PSETEX, MSET, MSETNX, DECR, DECRBY, INCR, INCRBY, INCRBYFLOAT,\n","    STRLEN, APPEND, SUBSTR, // <-- string\n","    SETBIT, GETBIT, BITPOS, SETRANGE, GETRANGE, BITCOUNT, BITOP, BITFIELD, BITFIELD_RO, // <-- bit (string)\n","    HSET, HGET, HSETNX, HMSET, HMGET, HINCRBY, HEXISTS, HDEL, HLEN, HKEYS, HVALS, HGETALL, HSTRLEN,\n","    HRANDFIELD, HINCRBYFLOAT, // <-- hash\n","    RPUSH, LPUSH, LLEN, LRANGE, LTRIM, LINDEX, LSET, LREM, LPOP, RPOP, BLPOP, BRPOP, LINSERT, LPOS,\n","    RPOPLPUSH, BRPOPLPUSH, BLMOVE, LMOVE, LMPOP, BLMPOP, LPUSHX, RPUSHX, // <-- list\n","    SADD, SMEMBERS, SREM, SPOP, SMOVE, SCARD, SRANDMEMBER, SINTER, SINTERSTORE, SUNION, SUNIONSTORE,\n","    SDIFF, SDIFFSTORE, SISMEMBER, SMISMEMBER, SINTERCARD, // <-- set\n","    ZADD, ZDIFF, ZDIFFSTORE, ZRANGE, ZREM, ZINCRBY, ZRANK, ZREVRANK, ZREVRANGE, ZRANDMEMBER, ZCARD,\n","    ZSCORE, ZPOPMAX, ZPOPMIN, ZCOUNT, ZUNION, ZUNIONSTORE, ZINTER, ZINTERSTORE, ZRANGEBYSCORE,\n","    ZREVRANGEBYSCORE, ZREMRANGEBYRANK, ZREMRANGEBYSCORE, ZLEXCOUNT, ZRANGEBYLEX, ZREVRANGEBYLEX,\n","    ZREMRANGEBYLEX, ZMSCORE, ZRANGESTORE, ZINTERCARD, ZMPOP, BZMPOP, BZPOPMIN, BZPOPMAX, // <-- zset\n","    GEOADD, GEODIST, GEOHASH, GEOPOS, GEORADIUS, GEORADIUS_RO, GEOSEARCH, GEOSEARCHSTORE,\n","    GEORADIUSBYMEMBER, GEORADIUSBYMEMBER_RO, // <-- geo\n","    PFADD, PFCOUNT, PFMERGE, // <-- hyper log log\n","    XADD, XLEN, XDEL, XTRIM, XRANGE, XREVRANGE, XREAD, XACK, XGROUP, XREADGROUP, XPENDING, XCLAIM,\n","    XAUTOCLAIM, XINFO, // <-- stream\n","    EVAL, EVALSHA, SCRIPT, EVAL_RO, EVALSHA_RO, FUNCTION, FCALL, FCALL_RO, // <-- program\n","    SUBSCRIBE, UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE, PUBLISH, PUBSUB,\n","    SSUBSCRIBE, SUNSUBSCRIBE, SPUBLISH, // <-- pub sub\n","    SAVE, BGSAVE, BGREWRITEAOF, LASTSAVE, PERSIST, ROLE, FAILOVER, SLOWLOG, OBJECT, CLIENT, TIME,\n","    SCAN, HSCAN, SSCAN, ZSCAN, WAIT, CLUSTER, ASKING, READONLY, READWRITE, SLAVEOF, REPLICAOF, COPY,\n","    SENTINEL, MODULE, ACL, TOUCH, MEMORY, LOLWUT, COMMAND, RESET, LATENCY, WAITAOF;\n","\n","    private final byte[] raw;\n","\n","    private Command() {\n","      raw = SafeEncoder.encode(name());\n","    }\n","\n","    @Override\n","    public byte[] getRaw() {\n","      return raw;\n","    }\n","  }\n","\n","  public static enum Keyword implements Rawable {\n","\n","    AGGREGATE, ALPHA, BY, GET, LIMIT, NO, NOSORT, ONE, SET, STORE, WEIGHTS, WITHSCORE, WITHSCORES,\n","    RESETSTAT, REWRITE, RESET, FLUSH, EXISTS, LOAD, LEN, HELP, SCHEDULE, MATCH, COUNT, TYPE, KEYS,\n","    REFCOUNT, ENCODING, IDLETIME, FREQ, REPLACE, GETNAME, SETNAME, SETINFO, LIST, ID, KILL, PERSIST,\n","    STREAMS, CREATE, MKSTREAM, SETID, DESTROY, DELCONSUMER, MAXLEN, GROUP, IDLE, TIME, BLOCK, NOACK,\n","    RETRYCOUNT, STREAM, GROUPS, CONSUMERS, JUSTID, WITHVALUES, NOMKSTREAM, MINID, CREATECONSUMER,\n","    SETUSER, GETUSER, DELUSER, WHOAMI, USERS, CAT, GENPASS, LOG, SAVE, DRYRUN, COPY, AUTH, AUTH2,\n","    NX, XX, EX, PX, EXAT, PXAT, ABSTTL, KEEPTTL, INCR, LT, GT, CH, INFO, PAUSE, UNPAUSE, UNBLOCK,\n","    REV, WITHCOORD, WITHDIST, WITHHASH, ANY, FROMMEMBER, FROMLONLAT, BYRADIUS, BYBOX, BYLEX, BYSCORE,\n","    STOREDIST, TO, FORCE, TIMEOUT, DB, UNLOAD, ABORT, IDX, MINMATCHLEN, WITHMATCHLEN, FULL,\n","    DELETE, LIBRARYNAME, WITHCODE, DESCRIPTION, GETKEYS, GETKEYSANDFLAGS, DOCS, FILTERBY, DUMP,\n","    MODULE, ACLCAT, PATTERN, DOCTOR, LATEST, HISTORY, USAGE, SAMPLES, PURGE, STATS, LOADEX, CONFIG, ARGS, RANK,\n","    NOW, VERSION, ADDR, SKIPME, USER, LADDR,\n","    CHANNELS, NUMPAT, NUMSUB, SHARDCHANNELS, SHARDNUMSUB, NOVALUES, MAXAGE;\n","\n","    private final byte[] raw;\n","\n","    private Keyword() {\n","      raw = SafeEncoder.encode(name());\n","    }\n","\n","    @Override\n","    public byte[] getRaw() {\n","      return raw;\n","    }\n","  }\n","\n","  public static enum SentinelKeyword implements Rawable {\n","\n","    MYID, MASTERS, MASTER, SENTINELS, SLAVES, REPLICAS, RESET, FAILOVER, REMOVE, SET, MONITOR,\n","    GET_MASTER_ADDR_BY_NAME(\"GET-MASTER-ADDR-BY-NAME\");\n","\n","    private final byte[] raw;\n","\n","    private SentinelKeyword() {\n","      raw = SafeEncoder.encode(name());\n","    }\n","\n","    private SentinelKeyword(String str) {\n","      raw = SafeEncoder.encode(str);\n","    }\n","\n","    @Override\n","    public byte[] getRaw() {\n","      return raw;\n","    }\n","  }\n","\n","  public static enum ResponseKeyword implements Rawable {\n","\n","    SUBSCRIBE, PSUBSCRIBE, UNSUBSCRIBE, PUNSUBSCRIBE, MESSAGE, PMESSAGE, PONG,\n","    SSUBSCRIBE, SUNSUBSCRIBE, SMESSAGE;\n","\n","    private final byte[] raw;\n","\n","    private ResponseKeyword() {\n","      raw = SafeEncoder.encode(name().toLowerCase(Locale.ENGLISH));\n","    }\n","\n","    @Override\n","    public byte[] getRaw() {\n","      return raw;\n","    }\n","  }\n","\n","  public static enum ClusterKeyword implements Rawable {\n","\n","    MEET, RESET, INFO, FAILOVER, SLOTS, NODES, REPLICAS, SLAVES, MYID, ADDSLOTS, DELSLOTS,\n","    GETKEYSINSLOT, SETSLOT, NODE, MIGRATING, IMPORTING, STABLE, FORGET, FLUSHSLOTS, KEYSLOT,\n","    COUNTKEYSINSLOT, SAVECONFIG, REPLICATE, LINKS, ADDSLOTSRANGE, DELSLOTSRANGE, BUMPEPOCH,\n","    MYSHARDID, SHARDS;\n","\n","    private final byte[] raw;\n","\n","    private ClusterKeyword() {\n","      raw = SafeEncoder.encode(name());\n","    }\n","\n","    @Override\n","    public byte[] getRaw() {\n","      return raw;\n","    }\n","  }\n","}\n"],"test_content":["package redis.clients.jedis;\n","\n","import redis.clients.jedis.util.FragmentedByteArrayInputStream;\n","import static org.junit.Assert.assertArrayEquals;\n","import static org.junit.Assert.assertEquals;\n","import static org.junit.Assert.assertNull;\n","import static org.junit.Assert.fail;\n","import static redis.clients.jedis.util.AssertUtil.assertByteArrayListEquals;\n","\n","import java.io.BufferedInputStream;\n","import java.io.ByteArrayInputStream;\n","import java.io.IOException;\n","import java.io.InputStream;\n","import java.io.OutputStream;\n","import java.io.PipedInputStream;\n","import java.io.PipedOutputStream;\n","import java.util.ArrayList;\n","import java.util.List;\n","\n","import org.junit.Test;\n","\n","import redis.clients.jedis.exceptions.JedisBusyException;\n","import redis.clients.jedis.util.RedisInputStream;\n","import redis.clients.jedis.util.RedisOutputStream;\n","import redis.clients.jedis.util.SafeEncoder;\n","\n","public class ProtocolTest {\n","  @Test\n","  public void buildACommand() throws IOException {\n","    PipedInputStream pis = new PipedInputStream();\n","    BufferedInputStream bis = new BufferedInputStream(pis);\n","    PipedOutputStream pos = new PipedOutputStream(pis);\n","    RedisOutputStream ros = new RedisOutputStream(pos);\n","\n","//    Protocol.sendCommand(ros, Protocol.Command.GET, \"SOMEKEY\".getBytes(Protocol.CHARSET));\n","    Protocol.sendCommand(ros, new CommandArguments(Protocol.Command.GET).add(\"SOMEKEY\"));\n","    ros.flush();\n","    pos.close();\n","    String expectedCommand = \"*2\\r\\n$3\\r\\nGET\\r\\n$7\\r\\nSOMEKEY\\r\\n\";\n","\n","    int b;\n","    StringBuilder sb = new StringBuilder();\n","    while ((b = bis.read()) != -1) {\n","      sb.append((char) b);\n","    }\n","\n","    assertEquals(expectedCommand, sb.toString());\n","  }\n","\n","  @Test(expected = IOException.class)\n","  public void writeOverflow() throws IOException {\n","    RedisOutputStream ros = new RedisOutputStream(new OutputStream() {\n","\n","      @Override\n","      public void write(int b) throws IOException {\n","        throw new IOException(\"thrown exception\");\n","\n","      }\n","    });\n","\n","    ros.write(new byte[8191]);\n","\n","    try {\n","      ros.write((byte) '*');\n","    } catch (IOException ioe) {\n","    }\n","\n","    ros.write((byte) '*');\n","\n","  }\n","\n","  @Test\n","  public void bulkReply() {\n","    InputStream is = new ByteArrayInputStream(\"$6\\r\\nfoobar\\r\\n\".getBytes());\n","    byte[] response = (byte[]) Protocol.read(new RedisInputStream(is));\n","    assertArrayEquals(SafeEncoder.encode(\"foobar\"), response);\n","  }\n","\n","  @Test\n","  public void fragmentedBulkReply() {\n","    FragmentedByteArrayInputStream fis = new FragmentedByteArrayInputStream(\n","        \"$30\\r\\n012345678901234567890123456789\\r\\n\".getBytes());\n","    byte[] response = (byte[]) Protocol.read(new RedisInputStream(fis));\n","    assertArrayEquals(SafeEncoder.encode(\"012345678901234567890123456789\"), response);\n","  }\n","\n","  @Test\n","  public void nullBulkReply() {\n","    InputStream is = new ByteArrayInputStream(\"$-1\\r\\n\".getBytes());\n","    String response = (String) Protocol.read(new RedisInputStream(is));\n","    assertNull(response);\n","  }\n","\n","  @Test\n","  public void singleLineReply() {\n","    InputStream is = new ByteArrayInputStream(\"+OK\\r\\n\".getBytes());\n","    byte[] response = (byte[]) Protocol.read(new RedisInputStream(is));\n","    assertArrayEquals(SafeEncoder.encode(\"OK\"), response);\n","  }\n","\n","  @Test\n","  public void integerReply() {\n","    InputStream is = new ByteArrayInputStream(\":123\\r\\n\".getBytes());\n","    long response = (Long) Protocol.read(new RedisInputStream(is));\n","    assertEquals(123, response);\n","  }\n","\n","  @SuppressWarnings(\"unchecked\")\n","  @Test\n","  public void multiBulkReply() {\n","    InputStream is = new ByteArrayInputStream(\n","        \"*4\\r\\n$3\\r\\nfoo\\r\\n$3\\r\\nbar\\r\\n$5\\r\\nHello\\r\\n$5\\r\\nWorld\\r\\n\".getBytes());\n","    List<byte[]> response = (List<byte[]>) Protocol.read(new RedisInputStream(is));\n","    List<byte[]> expected = new ArrayList<byte[]>();\n","    expected.add(SafeEncoder.encode(\"foo\"));\n","    expected.add(SafeEncoder.encode(\"bar\"));\n","    expected.add(SafeEncoder.encode(\"Hello\"));\n","    expected.add(SafeEncoder.encode(\"World\"));\n","    assertByteArrayListEquals(expected, response);\n","  }\n","\n","  @SuppressWarnings(\"unchecked\")\n","  @Test\n","  public void nullMultiBulkReply() {\n","    InputStream is = new ByteArrayInputStream(\"*-1\\r\\n\".getBytes());\n","    List<String> response = (List<String>) Protocol.read(new RedisInputStream(is));\n","    assertNull(response);\n","  }\n","\n","  @Test\n","  public void busyReply() {\n","    final String busyMessage = \"BUSY Redis is busy running a script.\";\n","    final InputStream is = new ByteArrayInputStream(('-' + busyMessage + \"\\r\\n\").getBytes());\n","    try {\n","      Protocol.read(new RedisInputStream(is));\n","    } catch (final JedisBusyException e) {\n","      assertEquals(busyMessage, e.getMessage());\n","      return;\n","    }\n","    fail(\"Expected a JedisBusyException to be thrown.\");\n","  }\n","}\n"],"method_lines_dic":{"Protocol::::sendCommand(redis.clients.jedis.util.RedisOutputStream,redis.clients.jedis.CommandArguments)":[65,79],"Protocol::::processError(redis.clients.jedis.util.RedisInputStream)":[81,107],"Protocol::::readErrorLineIfPossible(redis.clients.jedis.util.RedisInputStream)":[109,116],"Protocol::::parseTargetHostAndSlot(java.lang.String)":[127,133],"Protocol::::process(redis.clients.jedis.util.RedisInputStream)":[135,169],"Protocol::::processBulkReply(redis.clients.jedis.util.RedisInputStream)":[171,192],"Protocol::::processMultiBulkReply(redis.clients.jedis.util.RedisInputStream)":[194,207],"Protocol::::processMapKeyValueReply(redis.clients.jedis.util.RedisInputStream)":[211,219],"Protocol::::read(redis.clients.jedis.util.RedisInputStream)":[221,223],"Protocol::::toByteArray(boolean)":[225,227],"Protocol::::toByteArray(int)":[229,231],"Protocol::::toByteArray(long)":[233,235],"Protocol::::toByteArray(double)":[237,245],"Protocol.Command::::getRaw()":[284,287],"Protocol.Keyword::::getRaw()":[312,315],"Protocol.SentinelKeyword::::getRaw()":[333,336],"Protocol.ResponseKeyword::::getRaw()":[350,353],"Protocol.ClusterKeyword::::getRaw()":[369,372]},"test_method_lines_dic":{"ProtocolTest::::buildACommand()":[28,48],"ProtocolTest::::writeOverflow()":[50,70],"ProtocolTest::::bulkReply()":[72,77],"ProtocolTest::::fragmentedBulkReply()":[79,85],"ProtocolTest::::nullBulkReply()":[87,92],"ProtocolTest::::singleLineReply()":[94,99],"ProtocolTest::::integerReply()":[101,106],"ProtocolTest::::multiBulkReply()":[108,120],"ProtocolTest::::nullMultiBulkReply()":[122,128],"ProtocolTest::::busyReply()":[130,141]},"reverse_method_lines_dic":{"65":"Protocol::::sendCommand(redis.clients.jedis.util.RedisOutputStream,redis.clients.jedis.CommandArguments)","66":"Protocol::::sendCommand(redis.clients.jedis.util.RedisOutputStream,redis.clients.jedis.CommandArguments)","67":"Protocol::::sendCommand(redis.clients.jedis.util.RedisOutputStream,redis.clients.jedis.CommandArguments)","68":"Protocol::::sendCommand(redis.clients.jedis.util.RedisOutputStream,redis.clients.jedis.CommandArguments)","69":"Protocol::::sendCommand(redis.clients.jedis.util.RedisOutputStream,redis.clients.jedis.CommandArguments)","70":"Protocol::::sendCommand(redis.clients.jedis.util.RedisOutputStream,redis.clients.jedis.CommandArguments)","71":"Protocol::::sendCommand(redis.clients.jedis.util.RedisOutputStream,redis.clients.jedis.CommandArguments)","72":"Protocol::::sendCommand(redis.clients.jedis.util.RedisOutputStream,redis.clients.jedis.CommandArguments)","73":"Protocol::::sendCommand(redis.clients.jedis.util.RedisOutputStream,redis.clients.jedis.CommandArguments)","74":"Protocol::::sendCommand(redis.clients.jedis.util.RedisOutputStream,redis.clients.jedis.CommandArguments)","75":"Protocol::::sendCommand(redis.clients.jedis.util.RedisOutputStream,redis.clients.jedis.CommandArguments)","76":"Protocol::::sendCommand(redis.clients.jedis.util.RedisOutputStream,redis.clients.jedis.CommandArguments)","77":"Protocol::::sendCommand(redis.clients.jedis.util.RedisOutputStream,redis.clients.jedis.CommandArguments)","78":"Protocol::::sendCommand(redis.clients.jedis.util.RedisOutputStream,redis.clients.jedis.CommandArguments)","79":"Protocol::::sendCommand(redis.clients.jedis.util.RedisOutputStream,redis.clients.jedis.CommandArguments)","81":"Protocol::::processError(redis.clients.jedis.util.RedisInputStream)","82":"Protocol::::processError(redis.clients.jedis.util.RedisInputStream)","83":"Protocol::::processError(redis.clients.jedis.util.RedisInputStream)","84":"Protocol::::processError(redis.clients.jedis.util.RedisInputStream)","85":"Protocol::::processError(redis.clients.jedis.util.RedisInputStream)","86":"Protocol::::processError(redis.clients.jedis.util.RedisInputStream)","87":"Protocol::::processError(redis.clients.jedis.util.RedisInputStream)","88":"Protocol::::processError(redis.clients.jedis.util.RedisInputStream)","89":"Protocol::::processError(redis.clients.jedis.util.RedisInputStream)","90":"Protocol::::processError(redis.clients.jedis.util.RedisInputStream)","91":"Protocol::::processError(redis.clients.jedis.util.RedisInputStream)","92":"Protocol::::processError(redis.clients.jedis.util.RedisInputStream)","93":"Protocol::::processError(redis.clients.jedis.util.RedisInputStream)","94":"Protocol::::processError(redis.clients.jedis.util.RedisInputStream)","95":"Protocol::::processError(redis.clients.jedis.util.RedisInputStream)","96":"Protocol::::processError(redis.clients.jedis.util.RedisInputStream)","97":"Protocol::::processError(redis.clients.jedis.util.RedisInputStream)","98":"Protocol::::processError(redis.clients.jedis.util.RedisInputStream)","99":"Protocol::::processError(redis.clients.jedis.util.RedisInputStream)","100":"Protocol::::processError(redis.clients.jedis.util.RedisInputStream)","101":"Protocol::::processError(redis.clients.jedis.util.RedisInputStream)","102":"Protocol::::processError(redis.clients.jedis.util.RedisInputStream)","103":"Protocol::::processError(redis.clients.jedis.util.RedisInputStream)","104":"Protocol::::processError(redis.clients.jedis.util.RedisInputStream)","105":"Protocol::::processError(redis.clients.jedis.util.RedisInputStream)","106":"Protocol::::processError(redis.clients.jedis.util.RedisInputStream)","107":"Protocol::::processError(redis.clients.jedis.util.RedisInputStream)","109":"Protocol::::readErrorLineIfPossible(redis.clients.jedis.util.RedisInputStream)","110":"Protocol::::readErrorLineIfPossible(redis.clients.jedis.util.RedisInputStream)","111":"Protocol::::readErrorLineIfPossible(redis.clients.jedis.util.RedisInputStream)","112":"Protocol::::readErrorLineIfPossible(redis.clients.jedis.util.RedisInputStream)","113":"Protocol::::readErrorLineIfPossible(redis.clients.jedis.util.RedisInputStream)","114":"Protocol::::readErrorLineIfPossible(redis.clients.jedis.util.RedisInputStream)","115":"Protocol::::readErrorLineIfPossible(redis.clients.jedis.util.RedisInputStream)","116":"Protocol::::readErrorLineIfPossible(redis.clients.jedis.util.RedisInputStream)","127":"Protocol::::parseTargetHostAndSlot(java.lang.String)","128":"Protocol::::parseTargetHostAndSlot(java.lang.String)","129":"Protocol::::parseTargetHostAndSlot(java.lang.String)","130":"Protocol::::parseTargetHostAndSlot(java.lang.String)","131":"Protocol::::parseTargetHostAndSlot(java.lang.String)","132":"Protocol::::parseTargetHostAndSlot(java.lang.String)","133":"Protocol::::parseTargetHostAndSlot(java.lang.String)","135":"Protocol::::process(redis.clients.jedis.util.RedisInputStream)","136":"Protocol::::process(redis.clients.jedis.util.RedisInputStream)","137":"Protocol::::process(redis.clients.jedis.util.RedisInputStream)","138":"Protocol::::process(redis.clients.jedis.util.RedisInputStream)","139":"Protocol::::process(redis.clients.jedis.util.RedisInputStream)","140":"Protocol::::process(redis.clients.jedis.util.RedisInputStream)","141":"Protocol::::process(redis.clients.jedis.util.RedisInputStream)","142":"Protocol::::process(redis.clients.jedis.util.RedisInputStream)","143":"Protocol::::process(redis.clients.jedis.util.RedisInputStream)","144":"Protocol::::process(redis.clients.jedis.util.RedisInputStream)","145":"Protocol::::process(redis.clients.jedis.util.RedisInputStream)","146":"Protocol::::process(redis.clients.jedis.util.RedisInputStream)","147":"Protocol::::process(redis.clients.jedis.util.RedisInputStream)","148":"Protocol::::process(redis.clients.jedis.util.RedisInputStream)","149":"Protocol::::process(redis.clients.jedis.util.RedisInputStream)","150":"Protocol::::process(redis.clients.jedis.util.RedisInputStream)","151":"Protocol::::process(redis.clients.jedis.util.RedisInputStream)","152":"Protocol::::process(redis.clients.jedis.util.RedisInputStream)","153":"Protocol::::process(redis.clients.jedis.util.RedisInputStream)","154":"Protocol::::process(redis.clients.jedis.util.RedisInputStream)","155":"Protocol::::process(redis.clients.jedis.util.RedisInputStream)","156":"Protocol::::process(redis.clients.jedis.util.RedisInputStream)","157":"Protocol::::process(redis.clients.jedis.util.RedisInputStream)","158":"Protocol::::process(redis.clients.jedis.util.RedisInputStream)","159":"Protocol::::process(redis.clients.jedis.util.RedisInputStream)","160":"Protocol::::process(redis.clients.jedis.util.RedisInputStream)","161":"Protocol::::process(redis.clients.jedis.util.RedisInputStream)","162":"Protocol::::process(redis.clients.jedis.util.RedisInputStream)","163":"Protocol::::process(redis.clients.jedis.util.RedisInputStream)","164":"Protocol::::process(redis.clients.jedis.util.RedisInputStream)","165":"Protocol::::process(redis.clients.jedis.util.RedisInputStream)","166":"Protocol::::process(redis.clients.jedis.util.RedisInputStream)","167":"Protocol::::process(redis.clients.jedis.util.RedisInputStream)","168":"Protocol::::process(redis.clients.jedis.util.RedisInputStream)","169":"Protocol::::process(redis.clients.jedis.util.RedisInputStream)","171":"Protocol::::processBulkReply(redis.clients.jedis.util.RedisInputStream)","172":"Protocol::::processBulkReply(redis.clients.jedis.util.RedisInputStream)","173":"Protocol::::processBulkReply(redis.clients.jedis.util.RedisInputStream)","174":"Protocol::::processBulkReply(redis.clients.jedis.util.RedisInputStream)","175":"Protocol::::processBulkReply(redis.clients.jedis.util.RedisInputStream)","176":"Protocol::::processBulkReply(redis.clients.jedis.util.RedisInputStream)","177":"Protocol::::processBulkReply(redis.clients.jedis.util.RedisInputStream)","178":"Protocol::::processBulkReply(redis.clients.jedis.util.RedisInputStream)","179":"Protocol::::processBulkReply(redis.clients.jedis.util.RedisInputStream)","180":"Protocol::::processBulkReply(redis.clients.jedis.util.RedisInputStream)","181":"Protocol::::processBulkReply(redis.clients.jedis.util.RedisInputStream)","182":"Protocol::::processBulkReply(redis.clients.jedis.util.RedisInputStream)","183":"Protocol::::processBulkReply(redis.clients.jedis.util.RedisInputStream)","184":"Protocol::::processBulkReply(redis.clients.jedis.util.RedisInputStream)","185":"Protocol::::processBulkReply(redis.clients.jedis.util.RedisInputStream)","186":"Protocol::::processBulkReply(redis.clients.jedis.util.RedisInputStream)","187":"Protocol::::processBulkReply(redis.clients.jedis.util.RedisInputStream)","188":"Protocol::::processBulkReply(redis.clients.jedis.util.RedisInputStream)","189":"Protocol::::processBulkReply(redis.clients.jedis.util.RedisInputStream)","190":"Protocol::::processBulkReply(redis.clients.jedis.util.RedisInputStream)","191":"Protocol::::processBulkReply(redis.clients.jedis.util.RedisInputStream)","192":"Protocol::::processBulkReply(redis.clients.jedis.util.RedisInputStream)","194":"Protocol::::processMultiBulkReply(redis.clients.jedis.util.RedisInputStream)","195":"Protocol::::processMultiBulkReply(redis.clients.jedis.util.RedisInputStream)","196":"Protocol::::processMultiBulkReply(redis.clients.jedis.util.RedisInputStream)","197":"Protocol::::processMultiBulkReply(redis.clients.jedis.util.RedisInputStream)","198":"Protocol::::processMultiBulkReply(redis.clients.jedis.util.RedisInputStream)","199":"Protocol::::processMultiBulkReply(redis.clients.jedis.util.RedisInputStream)","200":"Protocol::::processMultiBulkReply(redis.clients.jedis.util.RedisInputStream)","201":"Protocol::::processMultiBulkReply(redis.clients.jedis.util.RedisInputStream)","202":"Protocol::::processMultiBulkReply(redis.clients.jedis.util.RedisInputStream)","203":"Protocol::::processMultiBulkReply(redis.clients.jedis.util.RedisInputStream)","204":"Protocol::::processMultiBulkReply(redis.clients.jedis.util.RedisInputStream)","205":"Protocol::::processMultiBulkReply(redis.clients.jedis.util.RedisInputStream)","206":"Protocol::::processMultiBulkReply(redis.clients.jedis.util.RedisInputStream)","207":"Protocol::::processMultiBulkReply(redis.clients.jedis.util.RedisInputStream)","211":"Protocol::::processMapKeyValueReply(redis.clients.jedis.util.RedisInputStream)","212":"Protocol::::processMapKeyValueReply(redis.clients.jedis.util.RedisInputStream)","213":"Protocol::::processMapKeyValueReply(redis.clients.jedis.util.RedisInputStream)","214":"Protocol::::processMapKeyValueReply(redis.clients.jedis.util.RedisInputStream)","215":"Protocol::::processMapKeyValueReply(redis.clients.jedis.util.RedisInputStream)","216":"Protocol::::processMapKeyValueReply(redis.clients.jedis.util.RedisInputStream)","217":"Protocol::::processMapKeyValueReply(redis.clients.jedis.util.RedisInputStream)","218":"Protocol::::processMapKeyValueReply(redis.clients.jedis.util.RedisInputStream)","219":"Protocol::::processMapKeyValueReply(redis.clients.jedis.util.RedisInputStream)","221":"Protocol::::read(redis.clients.jedis.util.RedisInputStream)","222":"Protocol::::read(redis.clients.jedis.util.RedisInputStream)","223":"Protocol::::read(redis.clients.jedis.util.RedisInputStream)","225":"Protocol::::toByteArray(boolean)","226":"Protocol::::toByteArray(boolean)","227":"Protocol::::toByteArray(boolean)","229":"Protocol::::toByteArray(int)","230":"Protocol::::toByteArray(int)","231":"Protocol::::toByteArray(int)","233":"Protocol::::toByteArray(long)","234":"Protocol::::toByteArray(long)","235":"Protocol::::toByteArray(long)","237":"Protocol::::toByteArray(double)","238":"Protocol::::toByteArray(double)","239":"Protocol::::toByteArray(double)","240":"Protocol::::toByteArray(double)","241":"Protocol::::toByteArray(double)","242":"Protocol::::toByteArray(double)","243":"Protocol::::toByteArray(double)","244":"Protocol::::toByteArray(double)","245":"Protocol::::toByteArray(double)","284":"Protocol.Command::::getRaw()","285":"Protocol.Command::::getRaw()","286":"Protocol.Command::::getRaw()","287":"Protocol.Command::::getRaw()","312":"Protocol.Keyword::::getRaw()","313":"Protocol.Keyword::::getRaw()","314":"Protocol.Keyword::::getRaw()","315":"Protocol.Keyword::::getRaw()","333":"Protocol.SentinelKeyword::::getRaw()","334":"Protocol.SentinelKeyword::::getRaw()","335":"Protocol.SentinelKeyword::::getRaw()","336":"Protocol.SentinelKeyword::::getRaw()","350":"Protocol.ResponseKeyword::::getRaw()","351":"Protocol.ResponseKeyword::::getRaw()","352":"Protocol.ResponseKeyword::::getRaw()","353":"Protocol.ResponseKeyword::::getRaw()","369":"Protocol.ClusterKeyword::::getRaw()","370":"Protocol.ClusterKeyword::::getRaw()","371":"Protocol.ClusterKeyword::::getRaw()","372":"Protocol.ClusterKeyword::::getRaw()"},"test_reverse_method_lines_dic":{"28":"ProtocolTest::::buildACommand()","29":"ProtocolTest::::buildACommand()","30":"ProtocolTest::::buildACommand()","31":"ProtocolTest::::buildACommand()","32":"ProtocolTest::::buildACommand()","33":"ProtocolTest::::buildACommand()","34":"ProtocolTest::::buildACommand()","35":"ProtocolTest::::buildACommand()","36":"ProtocolTest::::buildACommand()","37":"ProtocolTest::::buildACommand()","38":"ProtocolTest::::buildACommand()","39":"ProtocolTest::::buildACommand()","40":"ProtocolTest::::buildACommand()","41":"ProtocolTest::::buildACommand()","42":"ProtocolTest::::buildACommand()","43":"ProtocolTest::::buildACommand()","44":"ProtocolTest::::buildACommand()","45":"ProtocolTest::::buildACommand()","46":"ProtocolTest::::buildACommand()","47":"ProtocolTest::::buildACommand()","48":"ProtocolTest::::buildACommand()","50":"ProtocolTest::::writeOverflow()","51":"ProtocolTest::::writeOverflow()","52":"ProtocolTest::::writeOverflow()","53":"ProtocolTest::::writeOverflow()","54":"ProtocolTest::::writeOverflow()","55":"ProtocolTest::::writeOverflow()","56":"ProtocolTest::::writeOverflow()","57":"ProtocolTest::::writeOverflow()","58":"ProtocolTest::::writeOverflow()","59":"ProtocolTest::::writeOverflow()","60":"ProtocolTest::::writeOverflow()","61":"ProtocolTest::::writeOverflow()","62":"ProtocolTest::::writeOverflow()","63":"ProtocolTest::::writeOverflow()","64":"ProtocolTest::::writeOverflow()","65":"ProtocolTest::::writeOverflow()","66":"ProtocolTest::::writeOverflow()","67":"ProtocolTest::::writeOverflow()","68":"ProtocolTest::::writeOverflow()","69":"ProtocolTest::::writeOverflow()","70":"ProtocolTest::::writeOverflow()","72":"ProtocolTest::::bulkReply()","73":"ProtocolTest::::bulkReply()","74":"ProtocolTest::::bulkReply()","75":"ProtocolTest::::bulkReply()","76":"ProtocolTest::::bulkReply()","77":"ProtocolTest::::bulkReply()","79":"ProtocolTest::::fragmentedBulkReply()","80":"ProtocolTest::::fragmentedBulkReply()","81":"ProtocolTest::::fragmentedBulkReply()","82":"ProtocolTest::::fragmentedBulkReply()","83":"ProtocolTest::::fragmentedBulkReply()","84":"ProtocolTest::::fragmentedBulkReply()","85":"ProtocolTest::::fragmentedBulkReply()","87":"ProtocolTest::::nullBulkReply()","88":"ProtocolTest::::nullBulkReply()","89":"ProtocolTest::::nullBulkReply()","90":"ProtocolTest::::nullBulkReply()","91":"ProtocolTest::::nullBulkReply()","92":"ProtocolTest::::nullBulkReply()","94":"ProtocolTest::::singleLineReply()","95":"ProtocolTest::::singleLineReply()","96":"ProtocolTest::::singleLineReply()","97":"ProtocolTest::::singleLineReply()","98":"ProtocolTest::::singleLineReply()","99":"ProtocolTest::::singleLineReply()","101":"ProtocolTest::::integerReply()","102":"ProtocolTest::::integerReply()","103":"ProtocolTest::::integerReply()","104":"ProtocolTest::::integerReply()","105":"ProtocolTest::::integerReply()","106":"ProtocolTest::::integerReply()","108":"ProtocolTest::::multiBulkReply()","109":"ProtocolTest::::multiBulkReply()","110":"ProtocolTest::::multiBulkReply()","111":"ProtocolTest::::multiBulkReply()","112":"ProtocolTest::::multiBulkReply()","113":"ProtocolTest::::multiBulkReply()","114":"ProtocolTest::::multiBulkReply()","115":"ProtocolTest::::multiBulkReply()","116":"ProtocolTest::::multiBulkReply()","117":"ProtocolTest::::multiBulkReply()","118":"ProtocolTest::::multiBulkReply()","119":"ProtocolTest::::multiBulkReply()","120":"ProtocolTest::::multiBulkReply()","122":"ProtocolTest::::nullMultiBulkReply()","123":"ProtocolTest::::nullMultiBulkReply()","124":"ProtocolTest::::nullMultiBulkReply()","125":"ProtocolTest::::nullMultiBulkReply()","126":"ProtocolTest::::nullMultiBulkReply()","127":"ProtocolTest::::nullMultiBulkReply()","128":"ProtocolTest::::nullMultiBulkReply()","130":"ProtocolTest::::busyReply()","131":"ProtocolTest::::busyReply()","132":"ProtocolTest::::busyReply()","133":"ProtocolTest::::busyReply()","134":"ProtocolTest::::busyReply()","135":"ProtocolTest::::busyReply()","136":"ProtocolTest::::busyReply()","137":"ProtocolTest::::busyReply()","138":"ProtocolTest::::busyReply()","139":"ProtocolTest::::busyReply()","140":"ProtocolTest::::busyReply()","141":"ProtocolTest::::busyReply()"},"tests":[{"test_lines":[28,48],"covered_lines":[27,43,44,45,46,47,49,50,67,68,69,70,71,72,73,74,75,78,79,230,247,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,280,281,282,286],"label":"<<UNRECOGNISED_METHOD>>"},{"test_lines":[72,77],"covered_lines":[27,43,44,45,46,47,49,50,136,138,143,172,173,177,178,179,180,181,184,185,188,189,191,222,230],"label":"Protocol::::processBulkReply(redis.clients.jedis.util.RedisInputStream)"},{"test_lines":[79,85],"covered_lines":[27,43,44,45,46,47,49,50,136,138,143,172,173,177,178,179,180,181,184,185,188,189,191,222,230],"label":"Protocol::::processBulkReply(redis.clients.jedis.util.RedisInputStream)"},{"test_lines":[87,92],"covered_lines":[27,43,44,45,46,47,49,50,136,138,143,172,173,174,222,230],"label":"Protocol::::processBulkReply(redis.clients.jedis.util.RedisInputStream)"},{"test_lines":[94,99],"covered_lines":[27,43,44,45,46,47,49,50,136,138,140,222,230],"label":"Protocol::::process(redis.clients.jedis.util.RedisInputStream)"},{"test_lines":[101,106],"covered_lines":[27,43,44,45,46,47,49,50,136,138,151,222,230],"label":"Protocol::::process(redis.clients.jedis.util.RedisInputStream)"},{"test_lines":[108,120],"covered_lines":[27,43,44,45,46,47,49,50,136,138,143,145,172,173,177,178,179,180,181,184,185,188,189,191,196,197,198,199,201,204,206,222,230],"label":"Protocol::::processBulkReply(redis.clients.jedis.util.RedisInputStream)"},{"test_lines":[122,128],"covered_lines":[27,43,44,45,46,47,49,50,136,138,145,196,197,222,230],"label":"Protocol::::processMultiBulkReply(redis.clients.jedis.util.RedisInputStream)"},{"test_lines":[130,141],"covered_lines":[27,43,44,45,46,47,49,50,82,85,90,95,97,98,230],"label":"Protocol::::processError(redis.clients.jedis.util.RedisInputStream)"}]},"/bernard/dataset_construction/prep/repos/jedis/src/main/java/redis/clients/jedis/HostAndPort.java":{"class_content":["package redis.clients.jedis;\n","\n","import java.io.Serializable;\n","\n","public class HostAndPort implements Serializable {\n","\n","  private static final long serialVersionUID = -519876229978427751L;\n","\n","  private final String host;\n","  private final int port;\n","\n","  public HostAndPort(String host, int port) {\n","    this.host = host;\n","    this.port = port;\n","  }\n","\n","  public String getHost() {\n","    return host;\n","  }\n","\n","  public int getPort() {\n","    return port;\n","  }\n","\n","  @Override\n","  public boolean equals(Object obj) {\n","    if (obj == null) return false;\n","    if (obj == this) return true;\n","    if (!(obj instanceof HostAndPort)) return false;\n","    HostAndPort other = (HostAndPort) obj;\n","    return this.port == other.port && this.host.equals(other.host);\n","  }\n","\n","  @Override\n","  public int hashCode() {\n","    return 31 * host.hashCode() + port;\n","  }\n","\n","  @Override\n","  public String toString() {\n","    return host + \":\" + port;\n","  }\n","\n","  /**\n","   * Creates HostAndPort with <i>unconverted</i> host.\n","   * @param string String to parse. Must be in <b>\"host:port\"</b> format. Port is mandatory.\n","   * @return parsed HostAndPort\n","   */\n","  public static HostAndPort from(String string) {\n","    int lastColon = string.lastIndexOf(\":\");\n","    String host = string.substring(0, lastColon);\n","    int port = Integer.parseInt(string.substring(lastColon + 1));\n","    return new HostAndPort(host, port);\n","  }\n","}\n"],"test_content":["package redis.clients.jedis;\n","\n","import static org.junit.Assert.assertEquals;\n","\n","import org.junit.Test;\n","\n","public class HostAndPortTest {\n","\n","  @Test\n","  public void checkFrom() throws Exception {\n","    String host = \"2a11:1b1:0:111:e111:1f11:1111:1f1e:1999\";\n","    int port = 6379;\n","    HostAndPort hp = HostAndPort.from(host + \":\" + Integer.toString(port));\n","    assertEquals(host, hp.getHost());\n","    assertEquals(port, hp.getPort());\n","  }\n","\n","  @Test(expected = IllegalArgumentException.class)\n","  public void checkFromWithoutPort() throws Exception {\n","    String host = \"localhost\";\n","    HostAndPort.from(host + \":\");\n","  }\n","}"],"method_lines_dic":{"HostAndPort::::getHost()":[17,19],"HostAndPort::::getPort()":[21,23],"HostAndPort::::equals(java.lang.Object)":[25,32],"HostAndPort::::hashCode()":[34,37],"HostAndPort::::toString()":[39,42],"HostAndPort::::from(java.lang.String)":[49,54]},"test_method_lines_dic":{"HostAndPortTest::::checkFrom()":[9,16],"HostAndPortTest::::checkFromWithoutPort()":[18,22]},"reverse_method_lines_dic":{"17":"HostAndPort::::getHost()","18":"HostAndPort::::getHost()","19":"HostAndPort::::getHost()","21":"HostAndPort::::getPort()","22":"HostAndPort::::getPort()","23":"HostAndPort::::getPort()","25":"HostAndPort::::equals(java.lang.Object)","26":"HostAndPort::::equals(java.lang.Object)","27":"HostAndPort::::equals(java.lang.Object)","28":"HostAndPort::::equals(java.lang.Object)","29":"HostAndPort::::equals(java.lang.Object)","30":"HostAndPort::::equals(java.lang.Object)","31":"HostAndPort::::equals(java.lang.Object)","32":"HostAndPort::::equals(java.lang.Object)","34":"HostAndPort::::hashCode()","35":"HostAndPort::::hashCode()","36":"HostAndPort::::hashCode()","37":"HostAndPort::::hashCode()","39":"HostAndPort::::toString()","40":"HostAndPort::::toString()","41":"HostAndPort::::toString()","42":"HostAndPort::::toString()","49":"HostAndPort::::from(java.lang.String)","50":"HostAndPort::::from(java.lang.String)","51":"HostAndPort::::from(java.lang.String)","52":"HostAndPort::::from(java.lang.String)","53":"HostAndPort::::from(java.lang.String)","54":"HostAndPort::::from(java.lang.String)"},"test_reverse_method_lines_dic":{"9":"HostAndPortTest::::checkFrom()","10":"HostAndPortTest::::checkFrom()","11":"HostAndPortTest::::checkFrom()","12":"HostAndPortTest::::checkFrom()","13":"HostAndPortTest::::checkFrom()","14":"HostAndPortTest::::checkFrom()","15":"HostAndPortTest::::checkFrom()","16":"HostAndPortTest::::checkFrom()","18":"HostAndPortTest::::checkFromWithoutPort()","19":"HostAndPortTest::::checkFromWithoutPort()","20":"HostAndPortTest::::checkFromWithoutPort()","21":"HostAndPortTest::::checkFromWithoutPort()","22":"HostAndPortTest::::checkFromWithoutPort()"},"tests":[{"test_lines":[9,16],"covered_lines":[12,13,14,15,18,22,50,51,52,53],"label":"HostAndPort::::from(java.lang.String)"},{"test_lines":[18,22],"covered_lines":[50,51],"label":"HostAndPort::::from(java.lang.String)"}]},"/bernard/dataset_construction/prep/repos/jedis/src/main/java/redis/clients/jedis/JedisShardedPubSubBase.java":{"class_content":["package redis.clients.jedis;\n","\n","import static redis.clients.jedis.Protocol.ResponseKeyword.*;\n","\n","import java.util.Arrays;\n","import java.util.List;\n","\n","import redis.clients.jedis.Protocol.Command;\n","import redis.clients.jedis.exceptions.JedisException;\n","\n","public abstract class JedisShardedPubSubBase<T> {\n","\n","  private int subscribedChannels = 0;\n","  private volatile Connection client;\n","\n","  public void onSMessage(T channel, T message) {\n","  }\n","\n","  public void onSSubscribe(T channel, int subscribedChannels) {\n","  }\n","\n","  public void onSUnsubscribe(T channel, int subscribedChannels) {\n","  }\n","\n","  private void sendAndFlushCommand(Command command, T... args) {\n","    if (client == null) {\n","      throw new JedisException(getClass() + \" is not connected to a Connection.\");\n","    }\n","    CommandArguments cargs = new CommandArguments(command).addObjects(args);\n","    client.sendCommand(cargs);\n","    client.flush();\n","  }\n","\n","  public final void sunsubscribe() {\n","    sendAndFlushCommand(Command.SUNSUBSCRIBE);\n","  }\n","\n","  public final void sunsubscribe(T... channels) {\n","    sendAndFlushCommand(Command.SUNSUBSCRIBE, channels);\n","  }\n","\n","  public final void ssubscribe(T... channels) {\n","    sendAndFlushCommand(Command.SSUBSCRIBE, channels);\n","  }\n","\n","  public final boolean isSubscribed() {\n","    return subscribedChannels > 0;\n","  }\n","\n","  public final int getSubscribedChannels() {\n","    return subscribedChannels;\n","  }\n","\n","  public final void proceed(Connection client, T... channels) {\n","    this.client = client;\n","    this.client.setTimeoutInfinite();\n","    try {\n","      ssubscribe(channels);\n","      process();\n","    } finally {\n","      this.client.rollbackTimeout();\n","    }\n","  }\n","\n","  protected abstract T encode(byte[] raw);\n","\n","//  private void process(Client client) {\n","  private void process() {\n","\n","    do {\n","      Object reply = client.getUnflushedObject();\n","\n","      if (reply instanceof List) {\n","        List<Object> listReply = (List<Object>) reply;\n","        final Object firstObj = listReply.get(0);\n","        if (!(firstObj instanceof byte[])) {\n","          throw new JedisException(\"Unknown message type: \" + firstObj);\n","        }\n","        final byte[] resp = (byte[]) firstObj;\n","        if (Arrays.equals(SSUBSCRIBE.getRaw(), resp)) {\n","          subscribedChannels = ((Long) listReply.get(2)).intValue();\n","          final byte[] bchannel = (byte[]) listReply.get(1);\n","          final T enchannel = (bchannel == null) ? null : encode(bchannel);\n","          onSSubscribe(enchannel, subscribedChannels);\n","        } else if (Arrays.equals(SUNSUBSCRIBE.getRaw(), resp)) {\n","          subscribedChannels = ((Long) listReply.get(2)).intValue();\n","          final byte[] bchannel = (byte[]) listReply.get(1);\n","          final T enchannel = (bchannel == null) ? null : encode(bchannel);\n","          onSUnsubscribe(enchannel, subscribedChannels);\n","        } else if (Arrays.equals(SMESSAGE.getRaw(), resp)) {\n","          final byte[] bchannel = (byte[]) listReply.get(1);\n","          final byte[] bmesg = (byte[]) listReply.get(2);\n","          final T enchannel = (bchannel == null) ? null : encode(bchannel);\n","          final T enmesg = (bmesg == null) ? null : encode(bmesg);\n","          onSMessage(enchannel, enmesg);\n","        } else {\n","          throw new JedisException(\"Unknown message type: \" + firstObj);\n","        }\n","      } else {\n","        throw new JedisException(\"Unknown message type: \" + reply);\n","      }\n","    } while (!Thread.currentThread().isInterrupted() && isSubscribed());\n","\n","//    /* Invalidate instance since this thread is no longer listening */\n","//    this.client = null;\n","  }\n","}\n"],"test_content":["package redis.clients.jedis;\n","\n","import junit.framework.TestCase;\n","\n","import java.util.Arrays;\n","import java.util.List;\n","import java.util.concurrent.CountDownLatch;\n","import java.util.concurrent.TimeUnit;\n","\n","import static org.mockito.Mockito.mock;\n","import static org.mockito.Mockito.when;\n","import static redis.clients.jedis.Protocol.ResponseKeyword.SMESSAGE;\n","import static redis.clients.jedis.Protocol.ResponseKeyword.SSUBSCRIBE;\n","\n","public class JedisShardedPubSubBaseTest extends TestCase {\n","\n","    public void testProceed_givenThreadInterrupt_exitLoop() throws InterruptedException {\n","        // setup\n","        final JedisShardedPubSubBase<String> pubSub = new JedisShardedPubSubBase<String>() {\n","\n","            @Override\n","            public void onSMessage(String channel, String message) {\n","                fail(\"this should not happen when thread is interrupted\");\n","            }\n","\n","            @Override\n","            protected String encode(byte[] raw) {\n","                return new String(raw);\n","            }\n","\n","        };\n","\n","        final Connection mockConnection = mock(Connection.class);\n","        final List<Object> mockSubscribe = Arrays.asList(\n","                SSUBSCRIBE.getRaw(), \"channel\".getBytes(), 1L\n","        );\n","        final List<Object> mockResponse = Arrays.asList(\n","                SMESSAGE.getRaw(), \"channel\".getBytes(), \"message\".getBytes()\n","        );\n","        when(mockConnection.getUnflushedObject()).thenReturn(mockSubscribe, mockResponse);\n","\n","\n","        final CountDownLatch countDownLatch = new CountDownLatch(1);\n","        // action\n","        final Thread thread = new Thread(() -> {\n","            Thread.currentThread().interrupt();\n","            pubSub.proceed(mockConnection, \"channel\");\n","\n","            countDownLatch.countDown();\n","        });\n","        thread.start();\n","\n","        assertTrue(countDownLatch.await(20, TimeUnit.MILLISECONDS));\n","\n","    }\n","}"],"method_lines_dic":{"JedisShardedPubSubBase::::onSMessage(T,T)":[16,17],"JedisShardedPubSubBase::::onSSubscribe(T,int)":[19,20],"JedisShardedPubSubBase::::onSUnsubscribe(T,int)":[22,23],"JedisShardedPubSubBase::::sendAndFlushCommand(redis.clients.jedis.Protocol.Command,T[])":[25,32],"JedisShardedPubSubBase::::sunsubscribe()":[34,36],"JedisShardedPubSubBase::::sunsubscribe(T[])":[38,40],"JedisShardedPubSubBase::::ssubscribe(T[])":[42,44],"JedisShardedPubSubBase::::isSubscribed()":[46,48],"JedisShardedPubSubBase::::getSubscribedChannels()":[50,52],"JedisShardedPubSubBase::::proceed(redis.clients.jedis.Connection,T[])":[54,63],"JedisShardedPubSubBase::::encode(byte[])":[65,65],"JedisShardedPubSubBase::::process()":[68,106]},"test_method_lines_dic":{"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()":[17,55]},"reverse_method_lines_dic":{"16":"JedisShardedPubSubBase::::onSMessage(T,T)","17":"JedisShardedPubSubBase::::onSMessage(T,T)","19":"JedisShardedPubSubBase::::onSSubscribe(T,int)","20":"JedisShardedPubSubBase::::onSSubscribe(T,int)","22":"JedisShardedPubSubBase::::onSUnsubscribe(T,int)","23":"JedisShardedPubSubBase::::onSUnsubscribe(T,int)","25":"JedisShardedPubSubBase::::sendAndFlushCommand(redis.clients.jedis.Protocol.Command,T[])","26":"JedisShardedPubSubBase::::sendAndFlushCommand(redis.clients.jedis.Protocol.Command,T[])","27":"JedisShardedPubSubBase::::sendAndFlushCommand(redis.clients.jedis.Protocol.Command,T[])","28":"JedisShardedPubSubBase::::sendAndFlushCommand(redis.clients.jedis.Protocol.Command,T[])","29":"JedisShardedPubSubBase::::sendAndFlushCommand(redis.clients.jedis.Protocol.Command,T[])","30":"JedisShardedPubSubBase::::sendAndFlushCommand(redis.clients.jedis.Protocol.Command,T[])","31":"JedisShardedPubSubBase::::sendAndFlushCommand(redis.clients.jedis.Protocol.Command,T[])","32":"JedisShardedPubSubBase::::sendAndFlushCommand(redis.clients.jedis.Protocol.Command,T[])","34":"JedisShardedPubSubBase::::sunsubscribe()","35":"JedisShardedPubSubBase::::sunsubscribe()","36":"JedisShardedPubSubBase::::sunsubscribe()","38":"JedisShardedPubSubBase::::sunsubscribe(T[])","39":"JedisShardedPubSubBase::::sunsubscribe(T[])","40":"JedisShardedPubSubBase::::sunsubscribe(T[])","42":"JedisShardedPubSubBase::::ssubscribe(T[])","43":"JedisShardedPubSubBase::::ssubscribe(T[])","44":"JedisShardedPubSubBase::::ssubscribe(T[])","46":"JedisShardedPubSubBase::::isSubscribed()","47":"JedisShardedPubSubBase::::isSubscribed()","48":"JedisShardedPubSubBase::::isSubscribed()","50":"JedisShardedPubSubBase::::getSubscribedChannels()","51":"JedisShardedPubSubBase::::getSubscribedChannels()","52":"JedisShardedPubSubBase::::getSubscribedChannels()","54":"JedisShardedPubSubBase::::proceed(redis.clients.jedis.Connection,T[])","55":"JedisShardedPubSubBase::::proceed(redis.clients.jedis.Connection,T[])","56":"JedisShardedPubSubBase::::proceed(redis.clients.jedis.Connection,T[])","57":"JedisShardedPubSubBase::::proceed(redis.clients.jedis.Connection,T[])","58":"JedisShardedPubSubBase::::proceed(redis.clients.jedis.Connection,T[])","59":"JedisShardedPubSubBase::::proceed(redis.clients.jedis.Connection,T[])","60":"JedisShardedPubSubBase::::proceed(redis.clients.jedis.Connection,T[])","61":"JedisShardedPubSubBase::::proceed(redis.clients.jedis.Connection,T[])","62":"JedisShardedPubSubBase::::proceed(redis.clients.jedis.Connection,T[])","63":"JedisShardedPubSubBase::::proceed(redis.clients.jedis.Connection,T[])","65":"JedisShardedPubSubBase::::encode(byte[])","68":"JedisShardedPubSubBase::::process()","69":"JedisShardedPubSubBase::::process()","70":"JedisShardedPubSubBase::::process()","71":"JedisShardedPubSubBase::::process()","72":"JedisShardedPubSubBase::::process()","73":"JedisShardedPubSubBase::::process()","74":"JedisShardedPubSubBase::::process()","75":"JedisShardedPubSubBase::::process()","76":"JedisShardedPubSubBase::::process()","77":"JedisShardedPubSubBase::::process()","78":"JedisShardedPubSubBase::::process()","79":"JedisShardedPubSubBase::::process()","80":"JedisShardedPubSubBase::::process()","81":"JedisShardedPubSubBase::::process()","82":"JedisShardedPubSubBase::::process()","83":"JedisShardedPubSubBase::::process()","84":"JedisShardedPubSubBase::::process()","85":"JedisShardedPubSubBase::::process()","86":"JedisShardedPubSubBase::::process()","87":"JedisShardedPubSubBase::::process()","88":"JedisShardedPubSubBase::::process()","89":"JedisShardedPubSubBase::::process()","90":"JedisShardedPubSubBase::::process()","91":"JedisShardedPubSubBase::::process()","92":"JedisShardedPubSubBase::::process()","93":"JedisShardedPubSubBase::::process()","94":"JedisShardedPubSubBase::::process()","95":"JedisShardedPubSubBase::::process()","96":"JedisShardedPubSubBase::::process()","97":"JedisShardedPubSubBase::::process()","98":"JedisShardedPubSubBase::::process()","99":"JedisShardedPubSubBase::::process()","100":"JedisShardedPubSubBase::::process()","101":"JedisShardedPubSubBase::::process()","102":"JedisShardedPubSubBase::::process()","103":"JedisShardedPubSubBase::::process()","104":"JedisShardedPubSubBase::::process()","105":"JedisShardedPubSubBase::::process()","106":"JedisShardedPubSubBase::::process()"},"test_reverse_method_lines_dic":{"17":"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()","18":"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()","19":"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()","20":"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()","21":"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()","22":"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()","23":"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()","24":"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()","25":"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()","26":"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()","27":"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()","28":"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()","29":"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()","30":"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()","31":"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()","32":"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()","33":"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()","34":"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()","35":"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()","36":"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()","37":"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()","38":"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()","39":"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()","40":"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()","41":"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()","42":"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()","43":"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()","44":"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()","45":"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()","46":"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()","47":"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()","48":"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()","49":"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()","50":"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()","51":"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()","52":"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()","53":"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()","54":"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()","55":"JedisShardedPubSubBaseTest::::testProceed_givenThreadInterrupt_exitLoop()"},"tests":[{"test_lines":[17,55],"covered_lines":[11,13,20,26,29,30,31,32,43,44,55,56,58,59,61,62,63,71,73,74,75,76,79,80,81,82,83,84,85,99,102,106],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/jedis/src/main/java/redis/clients/jedis/JedisPooled.java":{"class_content":["package redis.clients.jedis;\n","\n","import java.net.URI;\n","import javax.net.ssl.HostnameVerifier;\n","import javax.net.ssl.SSLParameters;\n","import javax.net.ssl.SSLSocketFactory;\n","\n","import org.apache.commons.pool2.PooledObjectFactory;\n","import org.apache.commons.pool2.impl.GenericObjectPoolConfig;\n","\n","import redis.clients.jedis.providers.PooledConnectionProvider;\n","import redis.clients.jedis.util.JedisURIHelper;\n","import redis.clients.jedis.util.Pool;\n","\n","public class JedisPooled extends UnifiedJedis {\n","\n","  public JedisPooled() {\n","    this(Protocol.DEFAULT_HOST, Protocol.DEFAULT_PORT);\n","  }\n","\n","  /**\n","   * WARNING: This constructor only accepts a uri string as {@code url}. {@link JedisURIHelper#isValid(java.net.URI)}\n","   * can be used before this.\n","   * <p>\n","   * To use a host string, {@link #JedisPooled(java.lang.String, int)} can be used with {@link Protocol#DEFAULT_PORT}.\n","   *\n","   * @param url\n","   */\n","  public JedisPooled(final String url) {\n","    this(URI.create(url));\n","  }\n","\n","  /**\n","   * WARNING: This constructor only accepts a uri string as {@code url}. {@link JedisURIHelper#isValid(java.net.URI)}\n","   * can be used before this.\n","   * <p>\n","   * To use a host string, {@link #JedisPooled(java.lang.String, int, boolean, javax.net.ssl.SSLSocketFactory,\n","   * javax.net.ssl.SSLParameters, javax.net.ssl.HostnameVerifier)} can be used with {@link Protocol#DEFAULT_PORT} and\n","   * {@code ssl=true}.\n","   *\n","   * @param url\n","   * @param sslSocketFactory\n","   * @param sslParameters\n","   * @param hostnameVerifier\n","   */\n","  public JedisPooled(final String url, final SSLSocketFactory sslSocketFactory,\n","      final SSLParameters sslParameters, final HostnameVerifier hostnameVerifier) {\n","    this(URI.create(url), sslSocketFactory, sslParameters, hostnameVerifier);\n","  }\n","\n","  public JedisPooled(final String host, final int port) {\n","    this(new HostAndPort(host, port));\n","  }\n","\n","  public JedisPooled(final HostAndPort hostAndPort) {\n","    super(hostAndPort);\n","  }\n","\n","  public JedisPooled(final String host, final int port, final boolean ssl) {\n","    this(new HostAndPort(host, port), DefaultJedisClientConfig.builder().ssl(ssl).build());\n","  }\n","\n","  public JedisPooled(final String host, final int port, final boolean ssl,\n","      final SSLSocketFactory sslSocketFactory, final SSLParameters sslParameters,\n","      final HostnameVerifier hostnameVerifier) {\n","    this(new HostAndPort(host, port), DefaultJedisClientConfig.builder().ssl(ssl)\n","        .sslSocketFactory(sslSocketFactory).sslParameters(sslParameters)\n","        .hostnameVerifier(hostnameVerifier).build());\n","  }\n","\n","  public JedisPooled(final String host, final int port, final String user, final String password) {\n","    this(new HostAndPort(host, port), DefaultJedisClientConfig.builder().user(user).password(password).build());\n","  }\n","\n","  public JedisPooled(final HostAndPort hostAndPort, final JedisClientConfig clientConfig) {\n","    super(hostAndPort, clientConfig);\n","  }\n","\n","  public JedisPooled(PooledObjectFactory<Connection> factory) {\n","    this(new PooledConnectionProvider(factory));\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig) {\n","    this(poolConfig, Protocol.DEFAULT_HOST, Protocol.DEFAULT_PORT);\n","  }\n","\n","  /**\n","   * WARNING: This constructor only accepts a uri string as {@code url}. {@link JedisURIHelper#isValid(java.net.URI)}\n","   * can be used before this.\n","   * <p>\n","   * To use a host string,\n","   * {@link #JedisPooled(org.apache.commons.pool2.impl.GenericObjectPoolConfig, java.lang.String, int)} can be used with\n","   * {@link Protocol#DEFAULT_PORT}.\n","   *\n","   * @param poolConfig\n","   * @param url\n","   */\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final String url) {\n","    this(poolConfig, URI.create(url));\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final String host,\n","      final int port) {\n","    this(poolConfig, host, port, Protocol.DEFAULT_TIMEOUT);\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final String host,\n","      final int port, final boolean ssl) {\n","    this(poolConfig, host, port, Protocol.DEFAULT_TIMEOUT, ssl);\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final String host,\n","      final int port, final boolean ssl, final SSLSocketFactory sslSocketFactory,\n","      final SSLParameters sslParameters, final HostnameVerifier hostnameVerifier) {\n","    this(poolConfig, host, port, Protocol.DEFAULT_TIMEOUT, ssl, sslSocketFactory, sslParameters,\n","        hostnameVerifier);\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final String host,\n","      final int port, final String user, final String password) {\n","    this(poolConfig, host, port, Protocol.DEFAULT_TIMEOUT, user, password,\n","        Protocol.DEFAULT_DATABASE);\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final String host,\n","      final int port, final int timeout) {\n","    this(poolConfig, host, port, timeout, null);\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final String host,\n","      final int port, final int timeout, final boolean ssl) {\n","    this(poolConfig, host, port, timeout, null, ssl);\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final String host,\n","      final int port, final int timeout, final boolean ssl,\n","      final SSLSocketFactory sslSocketFactory, final SSLParameters sslParameters,\n","      final HostnameVerifier hostnameVerifier) {\n","    this(poolConfig, host, port, timeout, null, ssl, sslSocketFactory, sslParameters,\n","        hostnameVerifier);\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final String host, int port,\n","      int timeout, final String password) {\n","    this(poolConfig, host, port, timeout, password, Protocol.DEFAULT_DATABASE);\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final String host, int port,\n","      int timeout, final String password, final boolean ssl) {\n","    this(poolConfig, host, port, timeout, password, Protocol.DEFAULT_DATABASE, ssl);\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final String host, int port,\n","      int timeout, final String password, final boolean ssl, final SSLSocketFactory sslSocketFactory,\n","      final SSLParameters sslParameters, final HostnameVerifier hostnameVerifier) {\n","    this(poolConfig, host, port, timeout, password, Protocol.DEFAULT_DATABASE, ssl, sslSocketFactory,\n","        sslParameters, hostnameVerifier);\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final String host, int port,\n","      int timeout, final String user, final String password) {\n","    this(poolConfig, host, port, timeout, user, password, Protocol.DEFAULT_DATABASE);\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final String host, int port,\n","      int timeout, final String user, final String password, final boolean ssl) {\n","    this(poolConfig, host, port, timeout, user, password, Protocol.DEFAULT_DATABASE, ssl);\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final String host, int port,\n","      int timeout, final String password, final int database) {\n","    this(poolConfig, host, port, timeout, password, database, null);\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final String host, int port,\n","      int timeout, final String password, final int database, final boolean ssl) {\n","    this(poolConfig, host, port, timeout, password, database, null, ssl);\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final String host, int port,\n","      int timeout, final String password, final int database, final boolean ssl,\n","      final SSLSocketFactory sslSocketFactory, final SSLParameters sslParameters,\n","      final HostnameVerifier hostnameVerifier) {\n","    this(poolConfig, host, port, timeout, password, database, null, ssl, sslSocketFactory,\n","        sslParameters, hostnameVerifier);\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final String host, int port,\n","      int timeout, final String user, final String password, final int database) {\n","    this(poolConfig, host, port, timeout, user, password, database, null);\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final String host, int port,\n","      int timeout, final String user, final String password, final int database, final boolean ssl) {\n","    this(poolConfig, host, port, timeout, user, password, database, null, ssl);\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final String host, int port,\n","      int timeout, final String password, final int database, final String clientName) {\n","    this(poolConfig, host, port, timeout, timeout, password, database, clientName);\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final String host, int port,\n","      int timeout, final String password, final int database, final String clientName,\n","      final boolean ssl) {\n","    this(poolConfig, host, port, timeout, timeout, password, database, clientName, ssl);\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final String host, int port,\n","      int timeout, final String password, final int database, final String clientName,\n","      final boolean ssl, final SSLSocketFactory sslSocketFactory,\n","      final SSLParameters sslParameters, final HostnameVerifier hostnameVerifier) {\n","    this(poolConfig, host, port, timeout, timeout, password, database, clientName, ssl,\n","        sslSocketFactory, sslParameters, hostnameVerifier);\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final String host, int port,\n","      int timeout, final String user, final String password, final int database,\n","      final String clientName) {\n","    this(poolConfig, host, port, timeout, timeout, user, password, database, clientName);\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final String host, int port,\n","      int timeout, final String user, final String password, final int database,\n","      final String clientName, final boolean ssl) {\n","    this(poolConfig, host, port, timeout, timeout, user, password, database, clientName, ssl);\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final String host, int port,\n","      final int connectionTimeout, final int soTimeout, final String password, final int database,\n","      final String clientName) {\n","    this(poolConfig, host, port, connectionTimeout, soTimeout, null, password, database, clientName);\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final String host, int port,\n","      final int connectionTimeout, final int soTimeout, final String password, final int database,\n","      final String clientName, final boolean ssl) {\n","    this(poolConfig, host, port, connectionTimeout, soTimeout, password, database, clientName, ssl,\n","        null, null, null);\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final String host, int port,\n","      final int connectionTimeout, final int soTimeout, final String password, final int database,\n","      final String clientName, final boolean ssl, final SSLSocketFactory sslSocketFactory,\n","      final SSLParameters sslParameters, final HostnameVerifier hostnameVerifier) {\n","    this(poolConfig, host, port, connectionTimeout, soTimeout, null, password, database, clientName,\n","        ssl, sslSocketFactory, sslParameters, hostnameVerifier);\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final String host, int port,\n","      final int connectionTimeout, final int soTimeout, final String user, final String password,\n","      final int database, final String clientName) {\n","    this(poolConfig, host, port, connectionTimeout, soTimeout, 0, user, password, database, clientName);\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final String host, int port,\n","      final int connectionTimeout, final int soTimeout, final String user, final String password,\n","      final int database, final String clientName, final boolean ssl) {\n","    this(poolConfig, host, port, connectionTimeout, soTimeout, user, password, database, clientName,\n","        ssl, null, null, null);\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final String host, int port,\n","      final int connectionTimeout, final int soTimeout, final String user, final String password,\n","      final int database, final String clientName, final boolean ssl,\n","      final SSLSocketFactory sslSocketFactory, final SSLParameters sslParameters,\n","      final HostnameVerifier hostnameVerifier) {\n","    this(poolConfig, host, port, connectionTimeout, soTimeout, 0, user, password, database,\n","        clientName, ssl, sslSocketFactory, sslParameters, hostnameVerifier);\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final String host, int port,\n","      final int connectionTimeout, final int soTimeout, final int infiniteSoTimeout,\n","      final String password, final int database, final String clientName, final boolean ssl,\n","      final SSLSocketFactory sslSocketFactory, final SSLParameters sslParameters,\n","      final HostnameVerifier hostnameVerifier) {\n","    this(poolConfig, host, port, connectionTimeout, soTimeout, infiniteSoTimeout, null, password,\n","        database, clientName, ssl, sslSocketFactory, sslParameters, hostnameVerifier);\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final String host, int port,\n","      final int connectionTimeout, final int soTimeout, final int infiniteSoTimeout,\n","      final String user, final String password, final int database, final String clientName) {\n","    this(new HostAndPort(host, port), DefaultJedisClientConfig.create(connectionTimeout, soTimeout,\n","        infiniteSoTimeout, user, password, database, clientName, false, null, null, null, null),\n","        poolConfig);\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final String host, int port,\n","      final int connectionTimeout, final int soTimeout, final int infiniteSoTimeout, final String user,\n","      final String password, final int database, final String clientName, final boolean ssl,\n","      final SSLSocketFactory sslSocketFactory, final SSLParameters sslParameters,\n","      final HostnameVerifier hostnameVerifier) {\n","    this(new HostAndPort(host, port), DefaultJedisClientConfig.create(connectionTimeout, soTimeout,\n","        infiniteSoTimeout, user, password, database, clientName, ssl, sslSocketFactory, sslParameters,\n","        hostnameVerifier, null), poolConfig);\n","  }\n","\n","  public JedisPooled(final URI uri) {\n","    super(uri);\n","  }\n","\n","  public JedisPooled(final URI uri, final SSLSocketFactory sslSocketFactory,\n","      final SSLParameters sslParameters, final HostnameVerifier hostnameVerifier) {\n","    this(new GenericObjectPoolConfig<Connection>(), uri, sslSocketFactory, sslParameters,\n","        hostnameVerifier);\n","  }\n","\n","  public JedisPooled(final URI uri, final int timeout) {\n","    this(new GenericObjectPoolConfig<Connection>(), uri, timeout);\n","  }\n","\n","  public JedisPooled(final URI uri, final int timeout, final SSLSocketFactory sslSocketFactory,\n","      final SSLParameters sslParameters, final HostnameVerifier hostnameVerifier) {\n","    this(new GenericObjectPoolConfig<Connection>(), uri, timeout, sslSocketFactory, sslParameters,\n","        hostnameVerifier);\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final URI uri) {\n","    this(poolConfig, uri, Protocol.DEFAULT_TIMEOUT);\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final URI uri,\n","      final SSLSocketFactory sslSocketFactory, final SSLParameters sslParameters,\n","      final HostnameVerifier hostnameVerifier) {\n","    this(poolConfig, uri, Protocol.DEFAULT_TIMEOUT, sslSocketFactory, sslParameters,\n","        hostnameVerifier);\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final URI uri,\n","      final int timeout) {\n","    this(poolConfig, uri, timeout, timeout);\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final URI uri,\n","      final int timeout, final SSLSocketFactory sslSocketFactory,\n","      final SSLParameters sslParameters, final HostnameVerifier hostnameVerifier) {\n","    this(poolConfig, uri, timeout, timeout, sslSocketFactory, sslParameters, hostnameVerifier);\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final URI uri,\n","      final int connectionTimeout, final int soTimeout) {\n","    this(poolConfig, uri, connectionTimeout, soTimeout, null, null, null);\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final URI uri,\n","      final int connectionTimeout, final int soTimeout, final SSLSocketFactory sslSocketFactory,\n","      final SSLParameters sslParameters, final HostnameVerifier hostnameVerifier) {\n","    this(poolConfig, uri, connectionTimeout, soTimeout, 0, sslSocketFactory, sslParameters, hostnameVerifier);\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final URI uri,\n","      final int connectionTimeout, final int soTimeout, final int infiniteSoTimeout,\n","      final SSLSocketFactory sslSocketFactory, final SSLParameters sslParameters,\n","      final HostnameVerifier hostnameVerifier) {\n","    this(new HostAndPort(uri.getHost(), uri.getPort()), DefaultJedisClientConfig.builder()\n","        .connectionTimeoutMillis(connectionTimeout).socketTimeoutMillis(soTimeout)\n","        .blockingSocketTimeoutMillis(infiniteSoTimeout).user(JedisURIHelper.getUser(uri))\n","        .password(JedisURIHelper.getPassword(uri)).database(JedisURIHelper.getDBIndex(uri))\n","        .protocol(JedisURIHelper.getRedisProtocol(uri)).ssl(JedisURIHelper.isRedisSSLScheme(uri))\n","        .sslSocketFactory(sslSocketFactory).sslParameters(sslParameters)\n","        .hostnameVerifier(hostnameVerifier).build(), poolConfig);\n","  }\n","\n","  public JedisPooled(final HostAndPort hostAndPort, final GenericObjectPoolConfig<Connection> poolConfig) {\n","    this(hostAndPort, DefaultJedisClientConfig.builder().build(), poolConfig);\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final HostAndPort hostAndPort,\n","      final JedisClientConfig clientConfig) {\n","    this(hostAndPort, clientConfig, poolConfig);\n","  }\n","\n","  public JedisPooled(final HostAndPort hostAndPort, final JedisClientConfig clientConfig,\n","      final GenericObjectPoolConfig<Connection> poolConfig) {\n","    super(new PooledConnectionProvider(hostAndPort, clientConfig, poolConfig), clientConfig.getRedisProtocol());\n","  }\n","\n","  public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig,\n","      final JedisSocketFactory jedisSocketFactory, final JedisClientConfig clientConfig) {\n","    super(new PooledConnectionProvider(new ConnectionFactory(jedisSocketFactory, clientConfig), poolConfig),\n","        clientConfig.getRedisProtocol());\n","  }\n","\n","  public JedisPooled(GenericObjectPoolConfig<Connection> poolConfig, PooledObjectFactory<Connection> factory) {\n","    this(factory, poolConfig);\n","  }\n","\n","  public JedisPooled(PooledObjectFactory<Connection> factory, GenericObjectPoolConfig<Connection> poolConfig) {\n","    this(new PooledConnectionProvider(factory, poolConfig));\n","  }\n","\n","  public JedisPooled(PooledConnectionProvider provider) {\n","    super(provider);\n","  }\n","\n","  public final Pool<Connection> getPool() {\n","    return ((PooledConnectionProvider) provider).getPool();\n","  }\n","\n","  @Override\n","  public Pipeline pipelined() {\n","    return (Pipeline) super.pipelined();\n","  }\n","}\n"],"test_content":["package redis.clients.jedis;\n","\n","import static org.hamcrest.MatcherAssert.assertThat;\n","import static org.hamcrest.Matchers.anything;\n","import static org.hamcrest.Matchers.equalTo;\n","import static org.hamcrest.Matchers.greaterThanOrEqualTo;\n","import static org.junit.Assert.assertEquals;\n","import static org.junit.Assert.assertTrue;\n","import static org.junit.Assert.fail;\n","\n","import java.net.URI;\n","import java.net.URISyntaxException;\n","import java.util.concurrent.atomic.AtomicBoolean;\n","import java.util.concurrent.atomic.AtomicInteger;\n","import org.apache.commons.pool2.impl.GenericObjectPoolConfig;\n","import org.junit.Assert;\n","import org.junit.Test;\n","\n","import redis.clients.jedis.exceptions.JedisConnectionException;\n","import redis.clients.jedis.exceptions.JedisException;\n","\n","public class JedisPooledTest {\n","\n","  private static final HostAndPort hnp = HostAndPorts.getRedisServers().get(7);\n","  private static final HostAndPort pwp = HostAndPorts.getRedisServers().get(1); // password protected\n","\n","  @Test\n","  public void checkCloseableConnections() {\n","    JedisPooled pool = new JedisPooled(new ConnectionPoolConfig(), hnp.getHost(), hnp.getPort(), 2000);\n","    pool.set(\"foo\", \"bar\");\n","    assertEquals(\"bar\", pool.get(\"foo\"));\n","    pool.close();\n","    assertTrue(pool.getPool().isClosed());\n","  }\n","\n","  @Test\n","  public void checkResourceWithConfig() {\n","    try (JedisPooled pool = new JedisPooled(hnp,\n","        DefaultJedisClientConfig.builder().socketTimeoutMillis(5000).build())) {\n","\n","      try (Connection jedis = pool.getPool().getResource()) {\n","        assertTrue(jedis.ping());\n","        assertEquals(5000, jedis.getSoTimeout());\n","      }\n","    }\n","  }\n","\n","  @Test(expected = JedisException.class)\n","  public void checkPoolOverflow() {\n","    GenericObjectPoolConfig<Connection> config = new GenericObjectPoolConfig<>();\n","    config.setMaxTotal(1);\n","    config.setBlockWhenExhausted(false);\n","    try (JedisPooled pool = new JedisPooled(hnp, config);\n","        Connection jedis = pool.getPool().getResource()) {\n","\n","      try (Connection jedis2 = pool.getPool().getResource()) {\n","      }\n","    }\n","  }\n","\n","  @Test\n","  public void startWithUrlString() {\n","    try (Jedis j = new Jedis(\"localhost\", 6380)) {\n","      j.auth(\"foobared\");\n","      j.select(2);\n","      j.set(\"foo\", \"bar\");\n","    }\n","\n","    try (JedisPooled pool = new JedisPooled(\"redis://:foobared@localhost:6380/2\")) {\n","      assertEquals(\"bar\", pool.get(\"foo\"));\n","    }\n","  }\n","\n","  @Test\n","  public void startWithUrl() throws URISyntaxException {\n","    try (Jedis j = new Jedis(\"localhost\", 6380)) {\n","      j.auth(\"foobared\");\n","      j.select(2);\n","      j.set(\"foo\", \"bar\");\n","    }\n","\n","    try (JedisPooled pool = new JedisPooled(new URI(\"redis://:foobared@localhost:6380/2\"))) {\n","      assertEquals(\"bar\", pool.get(\"foo\"));\n","    }\n","  }\n","\n","  @Test(expected = Exception.class)\n","  public void shouldThrowExceptionForInvalidURI() throws URISyntaxException {\n","    new JedisPooled(new URI(\"localhost:6380\")).close();\n","  }\n","\n","  @Test\n","  public void allowUrlWithNoDBAndNoPassword() throws URISyntaxException {\n","    new JedisPooled(\"redis://localhost:6380\").close();\n","    new JedisPooled(new URI(\"redis://localhost:6380\")).close();\n","  }\n","\n","  @Test\n","  public void customClientName() {\n","    try (JedisPooled pool = new JedisPooled(hnp, DefaultJedisClientConfig.builder()\n","        .clientName(\"my_shiny_client_name\").build());\n","        Connection jedis = pool.getPool().getResource()) {\n","      assertEquals(\"my_shiny_client_name\", new Jedis(jedis).clientGetname());\n","    }\n","  }\n","\n","  @Test\n","  public void invalidClientName() {\n","    try (JedisPooled pool = new JedisPooled(hnp, DefaultJedisClientConfig.builder()\n","        .clientName(\"invalid client name\").build());\n","         Connection jedis = pool.getPool().getResource()) {\n","    } catch (Exception e) {\n","      if (!e.getMessage().startsWith(\"client info cannot contain space\")) {\n","        Assert.fail(\"invalid client name test fail\");\n","      }\n","    }\n","  }\n","\n","  @Test\n","  public void getNumActiveWhenPoolIsClosed() {\n","    JedisPooled pool = new JedisPooled(hnp);\n","\n","    try (Connection j = pool.getPool().getResource()) {\n","      j.ping();\n","    }\n","\n","    pool.close();\n","    assertEquals(0, pool.getPool().getNumActive());\n","  }\n","\n","  @Test\n","  public void getNumActiveReturnsTheCorrectNumber() {\n","    try (JedisPooled pool = new JedisPooled(new ConnectionPoolConfig(), hnp.getHost(), hnp.getPort(), 2000)) {\n","\n","      Connection jedis = pool.getPool().getResource();\n","      assertEquals(1, pool.getPool().getNumActive());\n","\n","      Connection jedis2 = pool.getPool().getResource();\n","      assertEquals(2, pool.getPool().getNumActive());\n","\n","      jedis.close();\n","      assertEquals(1, pool.getPool().getNumActive());\n","\n","      jedis2.close();\n","      assertEquals(0, pool.getPool().getNumActive());\n","    }\n","  }\n","\n","  @Test\n","  public void closeResourceTwice() {\n","    try (JedisPooled pool = new JedisPooled(new ConnectionPoolConfig(), hnp.getHost(), hnp.getPort(), 2000)) {\n","      Connection j = pool.getPool().getResource();\n","      j.ping();\n","      j.close();\n","      j.close();\n","    }\n","  }\n","\n","  @Test\n","  public void closeBrokenResourceTwice() {\n","    try (JedisPooled pool = new JedisPooled(new ConnectionPoolConfig(), hnp.getHost(), hnp.getPort(), 2000)) {\n","      Connection j = pool.getPool().getResource();\n","      try {\n","        // make connection broken\n","        j.getOne();\n","        fail();\n","      } catch (Exception e) {\n","        assertTrue(e instanceof JedisConnectionException);\n","      }\n","      assertTrue(j.isBroken());\n","      j.close();\n","      j.close();\n","    }\n","  }\n","\n","  @Test\n","  public void testResetValidCredentials() {\n","    DefaultRedisCredentialsProvider credentialsProvider = \n","        new DefaultRedisCredentialsProvider(new DefaultRedisCredentials(null, \"bad password\"));\n","\n","    try (JedisPooled pool = new JedisPooled(pwp, DefaultJedisClientConfig.builder()\n","        .credentialsProvider(credentialsProvider).build())) {\n","      try {\n","        pool.get(\"foo\");\n","        fail(\"Should not get resource from pool\");\n","      } catch (JedisException e) { }\n","      assertEquals(0, pool.getPool().getNumActive());\n","\n","      credentialsProvider.setCredentials(new DefaultRedisCredentials(null, \"foobared\"));\n","      assertThat(pool.get(\"foo\"), anything());\n","    }\n","  }\n","\n","  @Test\n","  public void testCredentialsProvider() {\n","    final AtomicInteger prepareCount = new AtomicInteger();\n","    final AtomicInteger cleanupCount = new AtomicInteger();\n","    final AtomicBoolean validPassword = new AtomicBoolean(false);\n","\n","    RedisCredentialsProvider credentialsProvider = new RedisCredentialsProvider() {\n","\n","      @Override\n","      public void prepare() {\n","        prepareCount.incrementAndGet();\n","      }\n","\n","      @Override\n","      public RedisCredentials get() {\n","        if (!validPassword.get()) {\n","          return new RedisCredentials() {\n","            @Override\n","            public char[] getPassword() {\n","              return \"invalidPass\".toCharArray();\n","            }\n","          };\n","        }\n","\n","        return new RedisCredentials() {\n","          @Override\n","          public String getUser() {\n","            return null;\n","          }\n","\n","          @Override\n","          public char[] getPassword() {\n","            return \"foobared\".toCharArray();\n","          }\n","        };\n","      }\n","\n","      @Override\n","      public void cleanUp() {\n","        cleanupCount.incrementAndGet();\n","      }\n","    };\n","\n","    // TODO: do it without the help of pool config; from Connection constructor? (configurable) force ping?\n","    GenericObjectPoolConfig<Connection> poolConfig = new GenericObjectPoolConfig<>();\n","    poolConfig.setMaxTotal(1);\n","    poolConfig.setTestOnBorrow(true);\n","    try (JedisPooled pool = new JedisPooled(pwp, DefaultJedisClientConfig.builder()\n","        .credentialsProvider(credentialsProvider).build(), poolConfig)) {\n","      try {\n","        pool.get(\"foo\");\n","        fail(\"Should not get resource from pool\");\n","      } catch (JedisException e) {\n","      }\n","      assertEquals(0, pool.getPool().getNumActive() + pool.getPool().getNumIdle() + pool.getPool().getNumWaiters());\n","      assertThat(prepareCount.getAndSet(0), greaterThanOrEqualTo(1));\n","      assertThat(cleanupCount.getAndSet(0), greaterThanOrEqualTo(1));\n","\n","      validPassword.set(true);\n","      assertThat(pool.get(\"foo\"), anything());\n","      assertThat(prepareCount.get(), equalTo(1));\n","      assertThat(cleanupCount.get(), equalTo(1));\n","    }\n","  }\n","}\n"],"method_lines_dic":{"JedisPooled::::getPool()":[397,399],"JedisPooled::::pipelined()":[401,404]},"test_method_lines_dic":{"JedisPooledTest::::checkCloseableConnections()":[27,34],"JedisPooledTest::::checkResourceWithConfig()":[36,46],"JedisPooledTest::::checkPoolOverflow()":[48,59],"JedisPooledTest::::startWithUrlString()":[61,72],"JedisPooledTest::::startWithUrl()":[74,85],"JedisPooledTest::::shouldThrowExceptionForInvalidURI()":[87,90],"JedisPooledTest::::allowUrlWithNoDBAndNoPassword()":[92,96],"JedisPooledTest::::customClientName()":[98,105],"JedisPooledTest::::invalidClientName()":[107,117],"JedisPooledTest::::getNumActiveWhenPoolIsClosed()":[119,129],"JedisPooledTest::::getNumActiveReturnsTheCorrectNumber()":[131,147],"JedisPooledTest::::closeResourceTwice()":[149,157],"JedisPooledTest::::closeBrokenResourceTwice()":[159,174],"JedisPooledTest::::testResetValidCredentials()":[176,192],"JedisPooledTest::::testCredentialsProvider()":[194,257]},"reverse_method_lines_dic":{"397":"JedisPooled::::getPool()","398":"JedisPooled::::getPool()","399":"JedisPooled::::getPool()","401":"JedisPooled::::pipelined()","402":"JedisPooled::::pipelined()","403":"JedisPooled::::pipelined()","404":"JedisPooled::::pipelined()"},"test_reverse_method_lines_dic":{"27":"JedisPooledTest::::checkCloseableConnections()","28":"JedisPooledTest::::checkCloseableConnections()","29":"JedisPooledTest::::checkCloseableConnections()","30":"JedisPooledTest::::checkCloseableConnections()","31":"JedisPooledTest::::checkCloseableConnections()","32":"JedisPooledTest::::checkCloseableConnections()","33":"JedisPooledTest::::checkCloseableConnections()","34":"JedisPooledTest::::checkCloseableConnections()","36":"JedisPooledTest::::checkResourceWithConfig()","37":"JedisPooledTest::::checkResourceWithConfig()","38":"JedisPooledTest::::checkResourceWithConfig()","39":"JedisPooledTest::::checkResourceWithConfig()","40":"JedisPooledTest::::checkResourceWithConfig()","41":"JedisPooledTest::::checkResourceWithConfig()","42":"JedisPooledTest::::checkResourceWithConfig()","43":"JedisPooledTest::::checkResourceWithConfig()","44":"JedisPooledTest::::checkResourceWithConfig()","45":"JedisPooledTest::::checkResourceWithConfig()","46":"JedisPooledTest::::checkResourceWithConfig()","48":"JedisPooledTest::::checkPoolOverflow()","49":"JedisPooledTest::::checkPoolOverflow()","50":"JedisPooledTest::::checkPoolOverflow()","51":"JedisPooledTest::::checkPoolOverflow()","52":"JedisPooledTest::::checkPoolOverflow()","53":"JedisPooledTest::::checkPoolOverflow()","54":"JedisPooledTest::::checkPoolOverflow()","55":"JedisPooledTest::::checkPoolOverflow()","56":"JedisPooledTest::::checkPoolOverflow()","57":"JedisPooledTest::::checkPoolOverflow()","58":"JedisPooledTest::::checkPoolOverflow()","59":"JedisPooledTest::::checkPoolOverflow()","61":"JedisPooledTest::::startWithUrlString()","62":"JedisPooledTest::::startWithUrlString()","63":"JedisPooledTest::::startWithUrlString()","64":"JedisPooledTest::::startWithUrlString()","65":"JedisPooledTest::::startWithUrlString()","66":"JedisPooledTest::::startWithUrlString()","67":"JedisPooledTest::::startWithUrlString()","68":"JedisPooledTest::::startWithUrlString()","69":"JedisPooledTest::::startWithUrlString()","70":"JedisPooledTest::::startWithUrlString()","71":"JedisPooledTest::::startWithUrlString()","72":"JedisPooledTest::::startWithUrlString()","74":"JedisPooledTest::::startWithUrl()","75":"JedisPooledTest::::startWithUrl()","76":"JedisPooledTest::::startWithUrl()","77":"JedisPooledTest::::startWithUrl()","78":"JedisPooledTest::::startWithUrl()","79":"JedisPooledTest::::startWithUrl()","80":"JedisPooledTest::::startWithUrl()","81":"JedisPooledTest::::startWithUrl()","82":"JedisPooledTest::::startWithUrl()","83":"JedisPooledTest::::startWithUrl()","84":"JedisPooledTest::::startWithUrl()","85":"JedisPooledTest::::startWithUrl()","87":"JedisPooledTest::::shouldThrowExceptionForInvalidURI()","88":"JedisPooledTest::::shouldThrowExceptionForInvalidURI()","89":"JedisPooledTest::::shouldThrowExceptionForInvalidURI()","90":"JedisPooledTest::::shouldThrowExceptionForInvalidURI()","92":"JedisPooledTest::::allowUrlWithNoDBAndNoPassword()","93":"JedisPooledTest::::allowUrlWithNoDBAndNoPassword()","94":"JedisPooledTest::::allowUrlWithNoDBAndNoPassword()","95":"JedisPooledTest::::allowUrlWithNoDBAndNoPassword()","96":"JedisPooledTest::::allowUrlWithNoDBAndNoPassword()","98":"JedisPooledTest::::customClientName()","99":"JedisPooledTest::::customClientName()","100":"JedisPooledTest::::customClientName()","101":"JedisPooledTest::::customClientName()","102":"JedisPooledTest::::customClientName()","103":"JedisPooledTest::::customClientName()","104":"JedisPooledTest::::customClientName()","105":"JedisPooledTest::::customClientName()","107":"JedisPooledTest::::invalidClientName()","108":"JedisPooledTest::::invalidClientName()","109":"JedisPooledTest::::invalidClientName()","110":"JedisPooledTest::::invalidClientName()","111":"JedisPooledTest::::invalidClientName()","112":"JedisPooledTest::::invalidClientName()","113":"JedisPooledTest::::invalidClientName()","114":"JedisPooledTest::::invalidClientName()","115":"JedisPooledTest::::invalidClientName()","116":"JedisPooledTest::::invalidClientName()","117":"JedisPooledTest::::invalidClientName()","119":"JedisPooledTest::::getNumActiveWhenPoolIsClosed()","120":"JedisPooledTest::::getNumActiveWhenPoolIsClosed()","121":"JedisPooledTest::::getNumActiveWhenPoolIsClosed()","122":"JedisPooledTest::::getNumActiveWhenPoolIsClosed()","123":"JedisPooledTest::::getNumActiveWhenPoolIsClosed()","124":"JedisPooledTest::::getNumActiveWhenPoolIsClosed()","125":"JedisPooledTest::::getNumActiveWhenPoolIsClosed()","126":"JedisPooledTest::::getNumActiveWhenPoolIsClosed()","127":"JedisPooledTest::::getNumActiveWhenPoolIsClosed()","128":"JedisPooledTest::::getNumActiveWhenPoolIsClosed()","129":"JedisPooledTest::::getNumActiveWhenPoolIsClosed()","131":"JedisPooledTest::::getNumActiveReturnsTheCorrectNumber()","132":"JedisPooledTest::::getNumActiveReturnsTheCorrectNumber()","133":"JedisPooledTest::::getNumActiveReturnsTheCorrectNumber()","134":"JedisPooledTest::::getNumActiveReturnsTheCorrectNumber()","135":"JedisPooledTest::::getNumActiveReturnsTheCorrectNumber()","136":"JedisPooledTest::::getNumActiveReturnsTheCorrectNumber()","137":"JedisPooledTest::::getNumActiveReturnsTheCorrectNumber()","138":"JedisPooledTest::::getNumActiveReturnsTheCorrectNumber()","139":"JedisPooledTest::::getNumActiveReturnsTheCorrectNumber()","140":"JedisPooledTest::::getNumActiveReturnsTheCorrectNumber()","141":"JedisPooledTest::::getNumActiveReturnsTheCorrectNumber()","142":"JedisPooledTest::::getNumActiveReturnsTheCorrectNumber()","143":"JedisPooledTest::::getNumActiveReturnsTheCorrectNumber()","144":"JedisPooledTest::::getNumActiveReturnsTheCorrectNumber()","145":"JedisPooledTest::::getNumActiveReturnsTheCorrectNumber()","146":"JedisPooledTest::::getNumActiveReturnsTheCorrectNumber()","147":"JedisPooledTest::::getNumActiveReturnsTheCorrectNumber()","149":"JedisPooledTest::::closeResourceTwice()","150":"JedisPooledTest::::closeResourceTwice()","151":"JedisPooledTest::::closeResourceTwice()","152":"JedisPooledTest::::closeResourceTwice()","153":"JedisPooledTest::::closeResourceTwice()","154":"JedisPooledTest::::closeResourceTwice()","155":"JedisPooledTest::::closeResourceTwice()","156":"JedisPooledTest::::closeResourceTwice()","157":"JedisPooledTest::::closeResourceTwice()","159":"JedisPooledTest::::closeBrokenResourceTwice()","160":"JedisPooledTest::::closeBrokenResourceTwice()","161":"JedisPooledTest::::closeBrokenResourceTwice()","162":"JedisPooledTest::::closeBrokenResourceTwice()","163":"JedisPooledTest::::closeBrokenResourceTwice()","164":"JedisPooledTest::::closeBrokenResourceTwice()","165":"JedisPooledTest::::closeBrokenResourceTwice()","166":"JedisPooledTest::::closeBrokenResourceTwice()","167":"JedisPooledTest::::closeBrokenResourceTwice()","168":"JedisPooledTest::::closeBrokenResourceTwice()","169":"JedisPooledTest::::closeBrokenResourceTwice()","170":"JedisPooledTest::::closeBrokenResourceTwice()","171":"JedisPooledTest::::closeBrokenResourceTwice()","172":"JedisPooledTest::::closeBrokenResourceTwice()","173":"JedisPooledTest::::closeBrokenResourceTwice()","174":"JedisPooledTest::::closeBrokenResourceTwice()","176":"JedisPooledTest::::testResetValidCredentials()","177":"JedisPooledTest::::testResetValidCredentials()","178":"JedisPooledTest::::testResetValidCredentials()","179":"JedisPooledTest::::testResetValidCredentials()","180":"JedisPooledTest::::testResetValidCredentials()","181":"JedisPooledTest::::testResetValidCredentials()","182":"JedisPooledTest::::testResetValidCredentials()","183":"JedisPooledTest::::testResetValidCredentials()","184":"JedisPooledTest::::testResetValidCredentials()","185":"JedisPooledTest::::testResetValidCredentials()","186":"JedisPooledTest::::testResetValidCredentials()","187":"JedisPooledTest::::testResetValidCredentials()","188":"JedisPooledTest::::testResetValidCredentials()","189":"JedisPooledTest::::testResetValidCredentials()","190":"JedisPooledTest::::testResetValidCredentials()","191":"JedisPooledTest::::testResetValidCredentials()","192":"JedisPooledTest::::testResetValidCredentials()","194":"JedisPooledTest::::testCredentialsProvider()","195":"JedisPooledTest::::testCredentialsProvider()","196":"JedisPooledTest::::testCredentialsProvider()","197":"JedisPooledTest::::testCredentialsProvider()","198":"JedisPooledTest::::testCredentialsProvider()","199":"JedisPooledTest::::testCredentialsProvider()","200":"JedisPooledTest::::testCredentialsProvider()","201":"JedisPooledTest::::testCredentialsProvider()","202":"JedisPooledTest::::testCredentialsProvider()","203":"JedisPooledTest::::testCredentialsProvider()","204":"JedisPooledTest::::testCredentialsProvider()","205":"JedisPooledTest::::testCredentialsProvider()","206":"JedisPooledTest::::testCredentialsProvider()","207":"JedisPooledTest::::testCredentialsProvider()","208":"JedisPooledTest::::testCredentialsProvider()","209":"JedisPooledTest::::testCredentialsProvider()","210":"JedisPooledTest::::testCredentialsProvider()","211":"JedisPooledTest::::testCredentialsProvider()","212":"JedisPooledTest::::testCredentialsProvider()","213":"JedisPooledTest::::testCredentialsProvider()","214":"JedisPooledTest::::testCredentialsProvider()","215":"JedisPooledTest::::testCredentialsProvider()","216":"JedisPooledTest::::testCredentialsProvider()","217":"JedisPooledTest::::testCredentialsProvider()","218":"JedisPooledTest::::testCredentialsProvider()","219":"JedisPooledTest::::testCredentialsProvider()","220":"JedisPooledTest::::testCredentialsProvider()","221":"JedisPooledTest::::testCredentialsProvider()","222":"JedisPooledTest::::testCredentialsProvider()","223":"JedisPooledTest::::testCredentialsProvider()","224":"JedisPooledTest::::testCredentialsProvider()","225":"JedisPooledTest::::testCredentialsProvider()","226":"JedisPooledTest::::testCredentialsProvider()","227":"JedisPooledTest::::testCredentialsProvider()","228":"JedisPooledTest::::testCredentialsProvider()","229":"JedisPooledTest::::testCredentialsProvider()","230":"JedisPooledTest::::testCredentialsProvider()","231":"JedisPooledTest::::testCredentialsProvider()","232":"JedisPooledTest::::testCredentialsProvider()","233":"JedisPooledTest::::testCredentialsProvider()","234":"JedisPooledTest::::testCredentialsProvider()","235":"JedisPooledTest::::testCredentialsProvider()","236":"JedisPooledTest::::testCredentialsProvider()","237":"JedisPooledTest::::testCredentialsProvider()","238":"JedisPooledTest::::testCredentialsProvider()","239":"JedisPooledTest::::testCredentialsProvider()","240":"JedisPooledTest::::testCredentialsProvider()","241":"JedisPooledTest::::testCredentialsProvider()","242":"JedisPooledTest::::testCredentialsProvider()","243":"JedisPooledTest::::testCredentialsProvider()","244":"JedisPooledTest::::testCredentialsProvider()","245":"JedisPooledTest::::testCredentialsProvider()","246":"JedisPooledTest::::testCredentialsProvider()","247":"JedisPooledTest::::testCredentialsProvider()","248":"JedisPooledTest::::testCredentialsProvider()","249":"JedisPooledTest::::testCredentialsProvider()","250":"JedisPooledTest::::testCredentialsProvider()","251":"JedisPooledTest::::testCredentialsProvider()","252":"JedisPooledTest::::testCredentialsProvider()","253":"JedisPooledTest::::testCredentialsProvider()","254":"JedisPooledTest::::testCredentialsProvider()","255":"JedisPooledTest::::testCredentialsProvider()","256":"JedisPooledTest::::testCredentialsProvider()","257":"JedisPooledTest::::testCredentialsProvider()"},"tests":[{"test_lines":[48,59],"covered_lines":[366,367,376,377,398],"label":"JedisPooled::::getPool()"},{"test_lines":[92,96],"covered_lines":[30,31,300,301],"label":"<<UNRECOGNISED_METHOD>>"}]},"/bernard/dataset_construction/prep/repos/jedis/src/main/java/redis/clients/jedis/JedisSentinelPool.java":{"class_content":["package redis.clients.jedis;\n","\n","import java.util.ArrayList;\n","import java.util.Arrays;\n","import java.util.Collection;\n","import java.util.List;\n","import java.util.Set;\n","import java.util.concurrent.atomic.AtomicBoolean;\n","import java.util.stream.Collectors;\n","\n","import org.apache.commons.pool2.impl.GenericObjectPoolConfig;\n","import org.slf4j.Logger;\n","import org.slf4j.LoggerFactory;\n","\n","import redis.clients.jedis.exceptions.JedisConnectionException;\n","import redis.clients.jedis.exceptions.JedisException;\n","import redis.clients.jedis.util.Pool;\n","\n","public class JedisSentinelPool extends Pool<Jedis> {\n","\n","  private static final Logger LOG = LoggerFactory.getLogger(JedisSentinelPool.class);\n","\n","  private final JedisFactory factory;\n","\n","  private final JedisClientConfig sentinelClientConfig;\n","\n","  protected final Collection<MasterListener> masterListeners = new ArrayList<>();\n","\n","  private volatile HostAndPort currentHostMaster;\n","  \n","  private final Object initPoolLock = new Object();\n","\n","  public JedisSentinelPool(String masterName, Set<HostAndPort> sentinels,\n","      final JedisClientConfig masterClientConfig, final JedisClientConfig sentinelClientConfig) {\n","    this(masterName, sentinels, new JedisFactory(masterClientConfig), sentinelClientConfig);\n","  }\n","\n","  public JedisSentinelPool(String masterName, Set<String> sentinels,\n","      final GenericObjectPoolConfig<Jedis> poolConfig) {\n","    this(masterName, sentinels, poolConfig, Protocol.DEFAULT_TIMEOUT, null,\n","        Protocol.DEFAULT_DATABASE);\n","  }\n","\n","  public JedisSentinelPool(String masterName, Set<String> sentinels) {\n","    this(masterName, sentinels, new GenericObjectPoolConfig<Jedis>(), Protocol.DEFAULT_TIMEOUT, null,\n","        Protocol.DEFAULT_DATABASE);\n","  }\n","\n","  public JedisSentinelPool(String masterName, Set<String> sentinels, String password) {\n","    this(masterName, sentinels, new GenericObjectPoolConfig<Jedis>(), Protocol.DEFAULT_TIMEOUT, password);\n","  }\n","\n","  public JedisSentinelPool(String masterName, Set<String> sentinels, String password, String sentinelPassword) {\n","    this(masterName, sentinels, new GenericObjectPoolConfig<Jedis>(), Protocol.DEFAULT_TIMEOUT, Protocol.DEFAULT_TIMEOUT,\n","        password, Protocol.DEFAULT_DATABASE, null, Protocol.DEFAULT_TIMEOUT, Protocol.DEFAULT_TIMEOUT, sentinelPassword, null);\n","  }\n","\n","  public JedisSentinelPool(String masterName, Set<String> sentinels,\n","      final GenericObjectPoolConfig<Jedis> poolConfig, int timeout, final String password) {\n","    this(masterName, sentinels, poolConfig, timeout, password, Protocol.DEFAULT_DATABASE);\n","  }\n","\n","  public JedisSentinelPool(String masterName, Set<String> sentinels,\n","      final GenericObjectPoolConfig<Jedis> poolConfig, final int timeout) {\n","    this(masterName, sentinels, poolConfig, timeout, null, Protocol.DEFAULT_DATABASE);\n","  }\n","\n","  public JedisSentinelPool(String masterName, Set<String> sentinels,\n","      final GenericObjectPoolConfig<Jedis> poolConfig, final String password) {\n","    this(masterName, sentinels, poolConfig, Protocol.DEFAULT_TIMEOUT, password);\n","  }\n","\n","  public JedisSentinelPool(String masterName, Set<String> sentinels,\n","      final GenericObjectPoolConfig<Jedis> poolConfig, int timeout, final String password,\n","      final int database) {\n","    this(masterName, sentinels, poolConfig, timeout, timeout, null, password, database);\n","  }\n","\n","  public JedisSentinelPool(String masterName, Set<String> sentinels,\n","      final GenericObjectPoolConfig<Jedis> poolConfig, int timeout, final String user,\n","      final String password, final int database) {\n","    this(masterName, sentinels, poolConfig, timeout, timeout, user, password, database);\n","  }\n","\n","  public JedisSentinelPool(String masterName, Set<String> sentinels,\n","      final GenericObjectPoolConfig<Jedis> poolConfig, int timeout, final String password,\n","      final int database, final String clientName) {\n","    this(masterName, sentinels, poolConfig, timeout, timeout, password, database, clientName);\n","  }\n","\n","  public JedisSentinelPool(String masterName, Set<String> sentinels,\n","      final GenericObjectPoolConfig<Jedis> poolConfig, int timeout, final String user,\n","      final String password, final int database, final String clientName) {\n","    this(masterName, sentinels, poolConfig, timeout, timeout, user, password, database, clientName);\n","  }\n","\n","  public JedisSentinelPool(String masterName, Set<String> sentinels,\n","      final GenericObjectPoolConfig<Jedis> poolConfig, final int connectionTimeout, final int soTimeout,\n","      final String password, final int database) {\n","    this(masterName, sentinels, poolConfig, connectionTimeout, soTimeout, null, password, database, null);\n","  }\n","\n","  public JedisSentinelPool(String masterName, Set<String> sentinels,\n","      final GenericObjectPoolConfig<Jedis> poolConfig, final int connectionTimeout, final int soTimeout,\n","      final String user, final String password, final int database) {\n","    this(masterName, sentinels, poolConfig, connectionTimeout, soTimeout, user, password, database, null);\n","  }\n","\n","  public JedisSentinelPool(String masterName, Set<String> sentinels,\n","      final GenericObjectPoolConfig<Jedis> poolConfig, final int connectionTimeout, final int soTimeout,\n","      final String password, final int database, final String clientName) {\n","    this(masterName, sentinels, poolConfig, connectionTimeout, soTimeout, null, password, database, clientName);\n","  }\n","\n","  public JedisSentinelPool(String masterName, Set<String> sentinels,\n","      final GenericObjectPoolConfig<Jedis> poolConfig, final int connectionTimeout, final int soTimeout,\n","      final String user, final String password, final int database, final String clientName) {\n","    this(masterName, sentinels, poolConfig, connectionTimeout, soTimeout, user, password, database, clientName,\n","        Protocol.DEFAULT_TIMEOUT, Protocol.DEFAULT_TIMEOUT, null, null, null);\n","  }\n","\n","  public JedisSentinelPool(String masterName, Set<String> sentinels,\n","      final GenericObjectPoolConfig<Jedis> poolConfig, final int connectionTimeout, final int soTimeout, final int infiniteSoTimeout,\n","      final String user, final String password, final int database, final String clientName) {\n","    this(masterName, sentinels, poolConfig, connectionTimeout, soTimeout, infiniteSoTimeout, user, password, database, clientName,\n","        Protocol.DEFAULT_TIMEOUT, Protocol.DEFAULT_TIMEOUT, null, null, null);\n","  }\n","\n","  public JedisSentinelPool(String masterName, Set<String> sentinels,\n","      final GenericObjectPoolConfig<Jedis> poolConfig, final int connectionTimeout, final int soTimeout,\n","      final String password, final int database, final String clientName,\n","      final int sentinelConnectionTimeout, final int sentinelSoTimeout, final String sentinelPassword,\n","      final String sentinelClientName) {\n","    this(masterName, sentinels, poolConfig, connectionTimeout, soTimeout, null, password, database, clientName,\n","        sentinelConnectionTimeout, sentinelSoTimeout, null, sentinelPassword, sentinelClientName);\n","  }\n","\n","  public JedisSentinelPool(String masterName, Set<String> sentinels,\n","      final GenericObjectPoolConfig<Jedis> poolConfig, final int connectionTimeout, final int soTimeout,\n","      final String user, final String password, final int database, final String clientName,\n","      final int sentinelConnectionTimeout, final int sentinelSoTimeout, final String sentinelUser,\n","      final String sentinelPassword, final String sentinelClientName) {\n","    this(masterName, sentinels, poolConfig, connectionTimeout, soTimeout, 0, user, password, database, clientName,\n","        sentinelConnectionTimeout, sentinelSoTimeout, sentinelUser, sentinelPassword, sentinelClientName);\n","  }\n","\n","  public JedisSentinelPool(String masterName, Set<String> sentinels,\n","      final GenericObjectPoolConfig<Jedis> poolConfig,\n","      final int connectionTimeout, final int soTimeout, final int infiniteSoTimeout,\n","      final String user, final String password, final int database, final String clientName,\n","      final int sentinelConnectionTimeout, final int sentinelSoTimeout, final String sentinelUser,\n","      final String sentinelPassword, final String sentinelClientName) {\n","    this(masterName, parseHostAndPorts(sentinels), poolConfig,\n","        DefaultJedisClientConfig.builder().connectionTimeoutMillis(connectionTimeout)\n","            .socketTimeoutMillis(soTimeout).blockingSocketTimeoutMillis(infiniteSoTimeout)\n","            .user(user).password(password).database(database).clientName(clientName).build(),\n","        DefaultJedisClientConfig.builder().connectionTimeoutMillis(sentinelConnectionTimeout)\n","            .socketTimeoutMillis(sentinelSoTimeout).user(sentinelUser).password(sentinelPassword)\n","            .clientName(sentinelClientName).build()\n","    );\n","  }\n","\n","  public JedisSentinelPool(String masterName, Set<String> sentinels,\n","      final GenericObjectPoolConfig<Jedis> poolConfig, final JedisFactory factory) {\n","    this(masterName, parseHostAndPorts(sentinels), poolConfig, factory,\n","        DefaultJedisClientConfig.builder().build());\n","  }\n","\n","  public JedisSentinelPool(String masterName, Set<HostAndPort> sentinels,\n","      final GenericObjectPoolConfig<Jedis> poolConfig, final JedisClientConfig masterClientConfig,\n","      final JedisClientConfig sentinelClientConfig) {\n","    this(masterName, sentinels, poolConfig, new JedisFactory(masterClientConfig), sentinelClientConfig);\n","  }\n","\n","  public JedisSentinelPool(String masterName, Set<HostAndPort> sentinels,\n","      final JedisFactory factory, final JedisClientConfig sentinelClientConfig) {\n","    super(factory);\n","\n","    this.factory = factory;\n","    this.sentinelClientConfig = sentinelClientConfig;\n","\n","    HostAndPort master = initSentinels(sentinels, masterName);\n","    initMaster(master);\n","  }\n","\n","  public JedisSentinelPool(String masterName, Set<HostAndPort> sentinels,\n","      final GenericObjectPoolConfig<Jedis> poolConfig, final JedisFactory factory,\n","      final JedisClientConfig sentinelClientConfig) {\n","    super(poolConfig, factory);\n","\n","    this.factory = factory;\n","    this.sentinelClientConfig = sentinelClientConfig;\n","\n","    HostAndPort master = initSentinels(sentinels, masterName);\n","    initMaster(master);\n","  }\n","\n","  private static Set<HostAndPort> parseHostAndPorts(Set<String> strings) {\n","    return strings.stream().map(HostAndPort::from).collect(Collectors.toSet());\n","  }\n","\n","  @Override\n","  public void destroy() {\n","    for (MasterListener m : masterListeners) {\n","      m.shutdown();\n","    }\n","\n","    super.destroy();\n","  }\n","\n","  public HostAndPort getCurrentHostMaster() {\n","    return currentHostMaster;\n","  }\n","\n","  private void initMaster(HostAndPort master) {\n","    synchronized (initPoolLock) {\n","      if (!master.equals(currentHostMaster)) {\n","        currentHostMaster = master;\n","        factory.setHostAndPort(currentHostMaster);\n","        // although we clear the pool, we still have to check the returned object in getResource,\n","        // this call only clears idle instances, not borrowed instances\n","        super.clear();\n","\n","        LOG.info(\"Created JedisSentinelPool to master at {}\", master);\n","      }\n","    }\n","  }\n","\n","  private HostAndPort initSentinels(Set<HostAndPort> sentinels, final String masterName) {\n","\n","    HostAndPort master = null;\n","    boolean sentinelAvailable = false;\n","\n","    LOG.info(\"Trying to find master from available Sentinels...\");\n","\n","    for (HostAndPort sentinel : sentinels) {\n","\n","      LOG.debug(\"Connecting to Sentinel {}\", sentinel);\n","\n","      try (Jedis jedis = new Jedis(sentinel, sentinelClientConfig)) {\n","\n","        List<String> masterAddr = jedis.sentinelGetMasterAddrByName(masterName);\n","\n","        // connected to sentinel...\n","        sentinelAvailable = true;\n","\n","        if (masterAddr == null || masterAddr.size() != 2) {\n","          LOG.warn(\"Can not get master addr, master name: {}. Sentinel: {}\", masterName, sentinel);\n","          continue;\n","        }\n","\n","        master = toHostAndPort(masterAddr);\n","        LOG.debug(\"Found Redis master at {}\", master);\n","        break;\n","      } catch (JedisException e) {\n","        // resolves #1036, it should handle JedisException there's another chance\n","        // of raising JedisDataException\n","        LOG.warn(\n","          \"Cannot get master address from sentinel running @ {}. Reason: {}. Trying next one.\", sentinel, e);\n","      }\n","    }\n","\n","    if (master == null) {\n","      if (sentinelAvailable) {\n","        // can connect to sentinel, but master name seems to not monitored\n","        throw new JedisException(\"Can connect to sentinel, but \" + masterName\n","            + \" seems to be not monitored...\");\n","      } else {\n","        throw new JedisConnectionException(\"All sentinels down, cannot determine where is \"\n","            + masterName + \" master is running...\");\n","      }\n","    }\n","\n","    LOG.info(\"Redis master running at {}, starting Sentinel listeners...\", master);\n","\n","    for (HostAndPort sentinel : sentinels) {\n","\n","      MasterListener masterListener = new MasterListener(masterName, sentinel.getHost(), sentinel.getPort());\n","      // whether MasterListener threads are alive or not, process can be stopped\n","      masterListener.setDaemon(true);\n","      masterListeners.add(masterListener);\n","      masterListener.start();\n","    }\n","\n","    return master;\n","  }\n","\n","  private HostAndPort toHostAndPort(List<String> getMasterAddrByNameResult) {\n","    String host = getMasterAddrByNameResult.get(0);\n","    int port = Integer.parseInt(getMasterAddrByNameResult.get(1));\n","\n","    return new HostAndPort(host, port);\n","  }\n","\n","  @Override\n","  public Jedis getResource() {\n","    while (true) {\n","      Jedis jedis = super.getResource();\n","      jedis.setDataSource(this);\n","\n","      // get a reference because it can change concurrently\n","      final HostAndPort master = currentHostMaster;\n","      final HostAndPort connection = jedis.getClient().getHostAndPort();\n","\n","      if (master.equals(connection)) {\n","        // connected to the correct master\n","        return jedis;\n","      } else {\n","        returnBrokenResource(jedis);\n","      }\n","    }\n","  }\n","\n","  @Override\n","  public void returnResource(final Jedis resource) {\n","    if (resource != null) {\n","      try {\n","        resource.resetState();\n","        super.returnResource(resource);\n","      } catch (RuntimeException e) {\n","        returnBrokenResource(resource);\n","        LOG.debug(\"Resource is returned to the pool as broken\", e);\n","      }\n","    }\n","  }\n","\n","  protected class MasterListener extends Thread {\n","\n","    protected String masterName;\n","    protected String host;\n","    protected int port;\n","    protected long subscribeRetryWaitTimeMillis = 5000;\n","    protected volatile Jedis j;\n","    protected AtomicBoolean running = new AtomicBoolean(false);\n","\n","    protected MasterListener() {\n","    }\n","\n","    public MasterListener(String masterName, String host, int port) {\n","      super(String.format(\"MasterListener-%s-[%s:%d]\", masterName, host, port));\n","      this.masterName = masterName;\n","      this.host = host;\n","      this.port = port;\n","    }\n","\n","    public MasterListener(String masterName, String host, int port,\n","        long subscribeRetryWaitTimeMillis) {\n","      this(masterName, host, port);\n","      this.subscribeRetryWaitTimeMillis = subscribeRetryWaitTimeMillis;\n","    }\n","\n","    @Override\n","    public void run() {\n","\n","      running.set(true);\n","\n","      while (running.get()) {\n","\n","        try {\n","          // double check that it is not being shutdown\n","          if (!running.get()) {\n","            break;\n","          }\n","          \n","          final HostAndPort hostPort = new HostAndPort(host, port);\n","          j = new Jedis(hostPort, sentinelClientConfig);\n","\n","          // code for active refresh\n","          List<String> masterAddr = j.sentinelGetMasterAddrByName(masterName);\n","          if (masterAddr == null || masterAddr.size() != 2) {\n","            LOG.warn(\"Can not get master addr, master name: {}. Sentinel: {}.\", masterName,\n","                hostPort);\n","          } else {\n","            initMaster(toHostAndPort(masterAddr));\n","          }\n","\n","          j.subscribe(new JedisPubSub() {\n","            @Override\n","            public void onMessage(String channel, String message) {\n","              LOG.debug(\"Sentinel {} published: {}.\", hostPort, message);\n","\n","              String[] switchMasterMsg = message.split(\" \");\n","\n","              if (switchMasterMsg.length > 3) {\n","\n","                if (masterName.equals(switchMasterMsg[0])) {\n","                  initMaster(toHostAndPort(Arrays.asList(switchMasterMsg[3], switchMasterMsg[4])));\n","                } else {\n","                  LOG.debug(\n","                    \"Ignoring message on +switch-master for master name {}, our master name is {}\",\n","                    switchMasterMsg[0], masterName);\n","                }\n","\n","              } else {\n","                LOG.error(\"Invalid message received on Sentinel {} on channel +switch-master: {}\",\n","                    hostPort, message);\n","              }\n","            }\n","          }, \"+switch-master\");\n","\n","        } catch (JedisException e) {\n","\n","          if (running.get()) {\n","            LOG.error(\"Lost connection to Sentinel at {}:{}. Sleeping 5000ms and retrying.\", host,\n","              port, e);\n","            try {\n","              Thread.sleep(subscribeRetryWaitTimeMillis);\n","            } catch (InterruptedException e1) {\n","              LOG.error(\"Sleep interrupted: \", e1);\n","            }\n","          } else {\n","            LOG.debug(\"Unsubscribing from Sentinel at {}:{}\", host, port);\n","          }\n","        } finally {\n","          if (j != null) {\n","            j.close();\n","          }\n","        }\n","      }\n","    }\n","\n","    public void shutdown() {\n","      try {\n","        LOG.debug(\"Shutting down listener on {}:{}\", host, port);\n","        running.set(false);\n","        // This isn't good, the Jedis object is not thread safe\n","        if (j != null) {\n","          j.close();\n","        }\n","      } catch (RuntimeException e) {\n","        LOG.error(\"Caught exception while shutting down: \", e);\n","      }\n","    }\n","  }\n","}\n"],"test_content":["package redis.clients.jedis;\n","\n","import static org.junit.Assert.assertEquals;\n","import static org.junit.Assert.assertTrue;\n","import static org.junit.Assert.assertSame;\n","\n","import java.util.HashSet;\n","import java.util.Set;\n","\n","import org.apache.commons.pool2.impl.GenericObjectPoolConfig;\n","import org.junit.Before;\n","import org.junit.Test;\n","\n","import redis.clients.jedis.exceptions.JedisConnectionException;\n","import redis.clients.jedis.exceptions.JedisException;\n","\n","public class JedisSentinelPoolTest {\n","\n","  private static final String MASTER_NAME = \"mymaster\";\n","\n","  //protected static HostAndPort master = HostAndPorts.getRedisServers().get(2);\n","  //protected static HostAndPort slave1 = HostAndPorts.getRedisServers().get(3);\n","\n","  protected static final HostAndPort sentinel1 = HostAndPorts.getSentinelServers().get(1);\n","  protected static final HostAndPort sentinel2 = HostAndPorts.getSentinelServers().get(3);\n","\n","  protected final Set<String> sentinels = new HashSet<>();\n","\n","  @Before\n","  public void setUp() throws Exception {\n","    sentinels.clear();\n","\n","    sentinels.add(sentinel1.toString());\n","    sentinels.add(sentinel2.toString());\n","  }\n","\n","  @Test\n","  public void repeatedSentinelPoolInitialization() {\n","\n","    for (int i = 0; i < 20; ++i) {\n","      GenericObjectPoolConfig<Jedis> config = new GenericObjectPoolConfig<>();\n","\n","      JedisSentinelPool pool = new JedisSentinelPool(MASTER_NAME, sentinels, config, 1000,\n","          \"foobared\", 2);\n","      pool.getResource().close();\n","      pool.destroy();\n","    }\n","  }\n","\n","  @Test(expected = JedisConnectionException.class)\n","  public void initializeWithNotAvailableSentinelsShouldThrowException() {\n","    Set<String> wrongSentinels = new HashSet<String>();\n","    wrongSentinels.add(new HostAndPort(\"localhost\", 65432).toString());\n","    wrongSentinels.add(new HostAndPort(\"localhost\", 65431).toString());\n","\n","    JedisSentinelPool pool = new JedisSentinelPool(MASTER_NAME, wrongSentinels);\n","    pool.destroy();\n","  }\n","\n","  @Test(expected = JedisException.class)\n","  public void initializeWithNotMonitoredMasterNameShouldThrowException() {\n","    final String wrongMasterName = \"wrongMasterName\";\n","    JedisSentinelPool pool = new JedisSentinelPool(wrongMasterName, sentinels);\n","    pool.destroy();\n","  }\n","\n","  @Test\n","  public void checkCloseableConnections() throws Exception {\n","    GenericObjectPoolConfig<Jedis> config = new GenericObjectPoolConfig<>();\n","\n","    JedisSentinelPool pool = new JedisSentinelPool(MASTER_NAME, sentinels, config, 1000,\n","        \"foobared\", 2);\n","    Jedis jedis = pool.getResource();\n","    jedis.auth(\"foobared\");\n","    jedis.set(\"foo\", \"bar\");\n","    assertEquals(\"bar\", jedis.get(\"foo\"));\n","    jedis.close();\n","    pool.close();\n","    assertTrue(pool.isClosed());\n","  }\n","\n","  @Test\n","  public void returnResourceShouldResetState() {\n","    GenericObjectPoolConfig<Jedis> config = new GenericObjectPoolConfig<>();\n","    config.setMaxTotal(1);\n","    config.setBlockWhenExhausted(false);\n","    try (JedisSentinelPool pool = new JedisSentinelPool(MASTER_NAME, sentinels, config, 1000,\n","        \"foobared\", 2)) {\n","\n","      Jedis jedis = null;\n","      try (Jedis jedis1 = pool.getResource()) {\n","        jedis = jedis1;\n","        jedis1.set(\"hello\", \"jedis\");\n","        Transaction t = jedis1.multi();\n","        t.set(\"hello\", \"world\");\n","      }\n","\n","      try (Jedis jedis2 = pool.getResource()) {\n","        assertSame(jedis, jedis2);\n","        assertEquals(\"jedis\", jedis2.get(\"hello\"));\n","      }\n","    }\n","  }\n","\n","  @Test\n","  public void checkResourceIsCloseable() {\n","    GenericObjectPoolConfig<Jedis> config = new GenericObjectPoolConfig<>();\n","    config.setMaxTotal(1);\n","    config.setBlockWhenExhausted(false);\n","    JedisSentinelPool pool = new JedisSentinelPool(MASTER_NAME, sentinels, config, 1000,\n","        \"foobared\", 2);\n","\n","    Jedis jedis = pool.getResource();\n","    try {\n","      jedis.set(\"hello\", \"jedis\");\n","    } finally {\n","      jedis.close();\n","    }\n","\n","    Jedis jedis2 = pool.getResource();\n","    try {\n","      assertEquals(jedis, jedis2);\n","    } finally {\n","      jedis2.close();\n","    }\n","  }\n","\n","  @Test\n","  public void customClientName() {\n","    GenericObjectPoolConfig<Jedis> config = new GenericObjectPoolConfig<>();\n","    config.setMaxTotal(1);\n","    config.setBlockWhenExhausted(false);\n","    JedisSentinelPool pool = new JedisSentinelPool(MASTER_NAME, sentinels, config, 1000,\n","        \"foobared\", 0, \"my_shiny_client_name\");\n","\n","    Jedis jedis = pool.getResource();\n","\n","    try {\n","      assertEquals(\"my_shiny_client_name\", jedis.clientGetname());\n","    } finally {\n","      jedis.close();\n","      pool.destroy();\n","    }\n","\n","    assertTrue(pool.isClosed());\n","  }\n","}\n"],"method_lines_dic":{"JedisSentinelPool::::parseHostAndPorts(java.util.Set<java.lang.String>)":[198,200],"JedisSentinelPool::::destroy()":[202,209],"JedisSentinelPool::::getCurrentHostMaster()":[211,213],"JedisSentinelPool::::initMaster(redis.clients.jedis.HostAndPort)":[215,227],"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)":[229,286],"JedisSentinelPool::::toHostAndPort(java.util.List<java.lang.String>)":[288,293],"JedisSentinelPool::::getResource()":[295,312],"JedisSentinelPool::::returnResource(redis.clients.jedis.Jedis)":[314,325],"JedisSentinelPool.MasterListener::::run()":[352,420],"JedisSentinelPool.MasterListener::::shutdown()":[422,433]},"test_method_lines_dic":{"JedisSentinelPoolTest::::setUp()":[29,35],"JedisSentinelPoolTest::::repeatedSentinelPoolInitialization()":[37,48],"JedisSentinelPoolTest::::initializeWithNotAvailableSentinelsShouldThrowException()":[50,58],"JedisSentinelPoolTest::::initializeWithNotMonitoredMasterNameShouldThrowException()":[60,65],"JedisSentinelPoolTest::::checkCloseableConnections()":[67,80],"JedisSentinelPoolTest::::returnResourceShouldResetState()":[82,103],"JedisSentinelPoolTest::::checkResourceIsCloseable()":[105,126],"JedisSentinelPoolTest::::customClientName()":[128,146]},"reverse_method_lines_dic":{"198":"JedisSentinelPool::::parseHostAndPorts(java.util.Set<java.lang.String>)","199":"JedisSentinelPool::::parseHostAndPorts(java.util.Set<java.lang.String>)","200":"JedisSentinelPool::::parseHostAndPorts(java.util.Set<java.lang.String>)","202":"JedisSentinelPool::::destroy()","203":"JedisSentinelPool::::destroy()","204":"JedisSentinelPool::::destroy()","205":"JedisSentinelPool::::destroy()","206":"JedisSentinelPool::::destroy()","207":"JedisSentinelPool::::destroy()","208":"JedisSentinelPool::::destroy()","209":"JedisSentinelPool::::destroy()","211":"JedisSentinelPool::::getCurrentHostMaster()","212":"JedisSentinelPool::::getCurrentHostMaster()","213":"JedisSentinelPool::::getCurrentHostMaster()","215":"JedisSentinelPool::::initMaster(redis.clients.jedis.HostAndPort)","216":"JedisSentinelPool::::initMaster(redis.clients.jedis.HostAndPort)","217":"JedisSentinelPool::::initMaster(redis.clients.jedis.HostAndPort)","218":"JedisSentinelPool::::initMaster(redis.clients.jedis.HostAndPort)","219":"JedisSentinelPool::::initMaster(redis.clients.jedis.HostAndPort)","220":"JedisSentinelPool::::initMaster(redis.clients.jedis.HostAndPort)","221":"JedisSentinelPool::::initMaster(redis.clients.jedis.HostAndPort)","222":"JedisSentinelPool::::initMaster(redis.clients.jedis.HostAndPort)","223":"JedisSentinelPool::::initMaster(redis.clients.jedis.HostAndPort)","224":"JedisSentinelPool::::initMaster(redis.clients.jedis.HostAndPort)","225":"JedisSentinelPool::::initMaster(redis.clients.jedis.HostAndPort)","226":"JedisSentinelPool::::initMaster(redis.clients.jedis.HostAndPort)","227":"JedisSentinelPool::::initMaster(redis.clients.jedis.HostAndPort)","229":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","230":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","231":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","232":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","233":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","234":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","235":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","236":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","237":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","238":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","239":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","240":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","241":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","242":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","243":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","244":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","245":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","246":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","247":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","248":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","249":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","250":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","251":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","252":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","253":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","254":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","255":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","256":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","257":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","258":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","259":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","260":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","261":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","262":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","263":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","264":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","265":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","266":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","267":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","268":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","269":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","270":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","271":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","272":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","273":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","274":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","275":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","276":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","277":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","278":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","279":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","280":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","281":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","282":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","283":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","284":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","285":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","286":"JedisSentinelPool::::initSentinels(java.util.Set<redis.clients.jedis.HostAndPort>,java.lang.String)","288":"JedisSentinelPool::::toHostAndPort(java.util.List<java.lang.String>)","289":"JedisSentinelPool::::toHostAndPort(java.util.List<java.lang.String>)","290":"JedisSentinelPool::::toHostAndPort(java.util.List<java.lang.String>)","291":"JedisSentinelPool::::toHostAndPort(java.util.List<java.lang.String>)","292":"JedisSentinelPool::::toHostAndPort(java.util.List<java.lang.String>)","293":"JedisSentinelPool::::toHostAndPort(java.util.List<java.lang.String>)","295":"JedisSentinelPool::::getResource()","296":"JedisSentinelPool::::getResource()","297":"JedisSentinelPool::::getResource()","298":"JedisSentinelPool::::getResource()","299":"JedisSentinelPool::::getResource()","300":"JedisSentinelPool::::getResource()","301":"JedisSentinelPool::::getResource()","302":"JedisSentinelPool::::getResource()","303":"JedisSentinelPool::::getResource()","304":"JedisSentinelPool::::getResource()","305":"JedisSentinelPool::::getResource()","306":"JedisSentinelPool::::getResource()","307":"JedisSentinelPool::::getResource()","308":"JedisSentinelPool::::getResource()","309":"JedisSentinelPool::::getResource()","310":"JedisSentinelPool::::getResource()","311":"JedisSentinelPool::::getResource()","312":"JedisSentinelPool::::getResource()","314":"JedisSentinelPool::::returnResource(redis.clients.jedis.Jedis)","315":"JedisSentinelPool::::returnResource(redis.clients.jedis.Jedis)","316":"JedisSentinelPool::::returnResource(redis.clients.jedis.Jedis)","317":"JedisSentinelPool::::returnResource(redis.clients.jedis.Jedis)","318":"JedisSentinelPool::::returnResource(redis.clients.jedis.Jedis)","319":"JedisSentinelPool::::returnResource(redis.clients.jedis.Jedis)","320":"JedisSentinelPool::::returnResource(redis.clients.jedis.Jedis)","321":"JedisSentinelPool::::returnResource(redis.clients.jedis.Jedis)","322":"JedisSentinelPool::::returnResource(redis.clients.jedis.Jedis)","323":"JedisSentinelPool::::returnResource(redis.clients.jedis.Jedis)","324":"JedisSentinelPool::::returnResource(redis.clients.jedis.Jedis)","325":"JedisSentinelPool::::returnResource(redis.clients.jedis.Jedis)","352":"JedisSentinelPool.MasterListener::::run()","353":"JedisSentinelPool.MasterListener::::run()","354":"JedisSentinelPool.MasterListener::::run()","355":"JedisSentinelPool.MasterListener::::run()","356":"JedisSentinelPool.MasterListener::::run()","357":"JedisSentinelPool.MasterListener::::run()","358":"JedisSentinelPool.MasterListener::::run()","359":"JedisSentinelPool.MasterListener::::run()","360":"JedisSentinelPool.MasterListener::::run()","361":"JedisSentinelPool.MasterListener::::run()","362":"JedisSentinelPool.MasterListener::::run()","363":"JedisSentinelPool.MasterListener::::run()","364":"JedisSentinelPool.MasterListener::::run()","365":"JedisSentinelPool.MasterListener::::run()","366":"JedisSentinelPool.MasterListener::::run()","367":"JedisSentinelPool.MasterListener::::run()","368":"JedisSentinelPool.MasterListener::::run()","369":"JedisSentinelPool.MasterListener::::run()","370":"JedisSentinelPool.MasterListener::::run()","371":"JedisSentinelPool.MasterListener::::run()","372":"JedisSentinelPool.MasterListener::::run()","373":"JedisSentinelPool.MasterListener::::run()","374":"JedisSentinelPool.MasterListener::::run()","375":"JedisSentinelPool.MasterListener::::run()","376":"JedisSentinelPool.MasterListener::::run()","377":"JedisSentinelPool.MasterListener::::run()","378":"JedisSentinelPool.MasterListener::::run()","379":"JedisSentinelPool.MasterListener::::run()","380":"JedisSentinelPool.MasterListener::::run()","381":"JedisSentinelPool.MasterListener::::run()","382":"JedisSentinelPool.MasterListener::::run()","383":"JedisSentinelPool.MasterListener::::run()","384":"JedisSentinelPool.MasterListener::::run()","385":"JedisSentinelPool.MasterListener::::run()","386":"JedisSentinelPool.MasterListener::::run()","387":"JedisSentinelPool.MasterListener::::run()","388":"JedisSentinelPool.MasterListener::::run()","389":"JedisSentinelPool.MasterListener::::run()","390":"JedisSentinelPool.MasterListener::::run()","391":"JedisSentinelPool.MasterListener::::run()","392":"JedisSentinelPool.MasterListener::::run()","393":"JedisSentinelPool.MasterListener::::run()","394":"JedisSentinelPool.MasterListener::::run()","395":"JedisSentinelPool.MasterListener::::run()","396":"JedisSentinelPool.MasterListener::::run()","397":"JedisSentinelPool.MasterListener::::run()","398":"JedisSentinelPool.MasterListener::::run()","399":"JedisSentinelPool.MasterListener::::run()","400":"JedisSentinelPool.MasterListener::::run()","401":"JedisSentinelPool.MasterListener::::run()","402":"JedisSentinelPool.MasterListener::::run()","403":"JedisSentinelPool.MasterListener::::run()","404":"JedisSentinelPool.MasterListener::::run()","405":"JedisSentinelPool.MasterListener::::run()","406":"JedisSentinelPool.MasterListener::::run()","407":"JedisSentinelPool.MasterListener::::run()","408":"JedisSentinelPool.MasterListener::::run()","409":"JedisSentinelPool.MasterListener::::run()","410":"JedisSentinelPool.MasterListener::::run()","411":"JedisSentinelPool.MasterListener::::run()","412":"JedisSentinelPool.MasterListener::::run()","413":"JedisSentinelPool.MasterListener::::run()","414":"JedisSentinelPool.MasterListener::::run()","415":"JedisSentinelPool.MasterListener::::run()","416":"JedisSentinelPool.MasterListener::::run()","417":"JedisSentinelPool.MasterListener::::run()","418":"JedisSentinelPool.MasterListener::::run()","419":"JedisSentinelPool.MasterListener::::run()","420":"JedisSentinelPool.MasterListener::::run()","422":"JedisSentinelPool.MasterListener::::shutdown()","423":"JedisSentinelPool.MasterListener::::shutdown()","424":"JedisSentinelPool.MasterListener::::shutdown()","425":"JedisSentinelPool.MasterListener::::shutdown()","426":"JedisSentinelPool.MasterListener::::shutdown()","427":"JedisSentinelPool.MasterListener::::shutdown()","428":"JedisSentinelPool.MasterListener::::shutdown()","429":"JedisSentinelPool.MasterListener::::shutdown()","430":"JedisSentinelPool.MasterListener::::shutdown()","431":"JedisSentinelPool.MasterListener::::shutdown()","432":"JedisSentinelPool.MasterListener::::shutdown()","433":"JedisSentinelPool.MasterListener::::shutdown()"},"test_reverse_method_lines_dic":{"29":"JedisSentinelPoolTest::::setUp()","30":"JedisSentinelPoolTest::::setUp()","31":"JedisSentinelPoolTest::::setUp()","32":"JedisSentinelPoolTest::::setUp()","33":"JedisSentinelPoolTest::::setUp()","34":"JedisSentinelPoolTest::::setUp()","35":"JedisSentinelPoolTest::::setUp()","37":"JedisSentinelPoolTest::::repeatedSentinelPoolInitialization()","38":"JedisSentinelPoolTest::::repeatedSentinelPoolInitialization()","39":"JedisSentinelPoolTest::::repeatedSentinelPoolInitialization()","40":"JedisSentinelPoolTest::::repeatedSentinelPoolInitialization()","41":"JedisSentinelPoolTest::::repeatedSentinelPoolInitialization()","42":"JedisSentinelPoolTest::::repeatedSentinelPoolInitialization()","43":"JedisSentinelPoolTest::::repeatedSentinelPoolInitialization()","44":"JedisSentinelPoolTest::::repeatedSentinelPoolInitialization()","45":"JedisSentinelPoolTest::::repeatedSentinelPoolInitialization()","46":"JedisSentinelPoolTest::::repeatedSentinelPoolInitialization()","47":"JedisSentinelPoolTest::::repeatedSentinelPoolInitialization()","48":"JedisSentinelPoolTest::::repeatedSentinelPoolInitialization()","50":"JedisSentinelPoolTest::::initializeWithNotAvailableSentinelsShouldThrowException()","51":"JedisSentinelPoolTest::::initializeWithNotAvailableSentinelsShouldThrowException()","52":"JedisSentinelPoolTest::::initializeWithNotAvailableSentinelsShouldThrowException()","53":"JedisSentinelPoolTest::::initializeWithNotAvailableSentinelsShouldThrowException()","54":"JedisSentinelPoolTest::::initializeWithNotAvailableSentinelsShouldThrowException()","55":"JedisSentinelPoolTest::::initializeWithNotAvailableSentinelsShouldThrowException()","56":"JedisSentinelPoolTest::::initializeWithNotAvailableSentinelsShouldThrowException()","57":"JedisSentinelPoolTest::::initializeWithNotAvailableSentinelsShouldThrowException()","58":"JedisSentinelPoolTest::::initializeWithNotAvailableSentinelsShouldThrowException()","60":"JedisSentinelPoolTest::::initializeWithNotMonitoredMasterNameShouldThrowException()","61":"JedisSentinelPoolTest::::initializeWithNotMonitoredMasterNameShouldThrowException()","62":"JedisSentinelPoolTest::::initializeWithNotMonitoredMasterNameShouldThrowException()","63":"JedisSentinelPoolTest::::initializeWithNotMonitoredMasterNameShouldThrowException()","64":"JedisSentinelPoolTest::::initializeWithNotMonitoredMasterNameShouldThrowException()","65":"JedisSentinelPoolTest::::initializeWithNotMonitoredMasterNameShouldThrowException()","67":"JedisSentinelPoolTest::::checkCloseableConnections()","68":"JedisSentinelPoolTest::::checkCloseableConnections()","69":"JedisSentinelPoolTest::::checkCloseableConnections()","70":"JedisSentinelPoolTest::::checkCloseableConnections()","71":"JedisSentinelPoolTest::::checkCloseableConnections()","72":"JedisSentinelPoolTest::::checkCloseableConnections()","73":"JedisSentinelPoolTest::::checkCloseableConnections()","74":"JedisSentinelPoolTest::::checkCloseableConnections()","75":"JedisSentinelPoolTest::::checkCloseableConnections()","76":"JedisSentinelPoolTest::::checkCloseableConnections()","77":"JedisSentinelPoolTest::::checkCloseableConnections()","78":"JedisSentinelPoolTest::::checkCloseableConnections()","79":"JedisSentinelPoolTest::::checkCloseableConnections()","80":"JedisSentinelPoolTest::::checkCloseableConnections()","82":"JedisSentinelPoolTest::::returnResourceShouldResetState()","83":"JedisSentinelPoolTest::::returnResourceShouldResetState()","84":"JedisSentinelPoolTest::::returnResourceShouldResetState()","85":"JedisSentinelPoolTest::::returnResourceShouldResetState()","86":"JedisSentinelPoolTest::::returnResourceShouldResetState()","87":"JedisSentinelPoolTest::::returnResourceShouldResetState()","88":"JedisSentinelPoolTest::::returnResourceShouldResetState()","89":"JedisSentinelPoolTest::::returnResourceShouldResetState()","90":"JedisSentinelPoolTest::::returnResourceShouldResetState()","91":"JedisSentinelPoolTest::::returnResourceShouldResetState()","92":"JedisSentinelPoolTest::::returnResourceShouldResetState()","93":"JedisSentinelPoolTest::::returnResourceShouldResetState()","94":"JedisSentinelPoolTest::::returnResourceShouldResetState()","95":"JedisSentinelPoolTest::::returnResourceShouldResetState()","96":"JedisSentinelPoolTest::::returnResourceShouldResetState()","97":"JedisSentinelPoolTest::::returnResourceShouldResetState()","98":"JedisSentinelPoolTest::::returnResourceShouldResetState()","99":"JedisSentinelPoolTest::::returnResourceShouldResetState()","100":"JedisSentinelPoolTest::::returnResourceShouldResetState()","101":"JedisSentinelPoolTest::::returnResourceShouldResetState()","102":"JedisSentinelPoolTest::::returnResourceShouldResetState()","103":"JedisSentinelPoolTest::::returnResourceShouldResetState()","105":"JedisSentinelPoolTest::::checkResourceIsCloseable()","106":"JedisSentinelPoolTest::::checkResourceIsCloseable()","107":"JedisSentinelPoolTest::::checkResourceIsCloseable()","108":"JedisSentinelPoolTest::::checkResourceIsCloseable()","109":"JedisSentinelPoolTest::::checkResourceIsCloseable()","110":"JedisSentinelPoolTest::::checkResourceIsCloseable()","111":"JedisSentinelPoolTest::::checkResourceIsCloseable()","112":"JedisSentinelPoolTest::::checkResourceIsCloseable()","113":"JedisSentinelPoolTest::::checkResourceIsCloseable()","114":"JedisSentinelPoolTest::::checkResourceIsCloseable()","115":"JedisSentinelPoolTest::::checkResourceIsCloseable()","116":"JedisSentinelPoolTest::::checkResourceIsCloseable()","117":"JedisSentinelPoolTest::::checkResourceIsCloseable()","118":"JedisSentinelPoolTest::::checkResourceIsCloseable()","119":"JedisSentinelPoolTest::::checkResourceIsCloseable()","120":"JedisSentinelPoolTest::::checkResourceIsCloseable()","121":"JedisSentinelPoolTest::::checkResourceIsCloseable()","122":"JedisSentinelPoolTest::::checkResourceIsCloseable()","123":"JedisSentinelPoolTest::::checkResourceIsCloseable()","124":"JedisSentinelPoolTest::::checkResourceIsCloseable()","125":"JedisSentinelPoolTest::::checkResourceIsCloseable()","126":"JedisSentinelPoolTest::::checkResourceIsCloseable()","128":"JedisSentinelPoolTest::::customClientName()","129":"JedisSentinelPoolTest::::customClientName()","130":"JedisSentinelPoolTest::::customClientName()","131":"JedisSentinelPoolTest::::customClientName()","132":"JedisSentinelPoolTest::::customClientName()","133":"JedisSentinelPoolTest::::customClientName()","134":"JedisSentinelPoolTest::::customClientName()","135":"JedisSentinelPoolTest::::customClientName()","136":"JedisSentinelPoolTest::::customClientName()","137":"JedisSentinelPoolTest::::customClientName()","138":"JedisSentinelPoolTest::::customClientName()","139":"JedisSentinelPoolTest::::customClientName()","140":"JedisSentinelPoolTest::::customClientName()","141":"JedisSentinelPoolTest::::customClientName()","142":"JedisSentinelPoolTest::::customClientName()","143":"JedisSentinelPoolTest::::customClientName()","144":"JedisSentinelPoolTest::::customClientName()","145":"JedisSentinelPoolTest::::customClientName()","146":"JedisSentinelPoolTest::::customClientName()"},"tests":[{"test_lines":[50,58],"covered_lines":[21,27,31,153,154,155,156,157,158,159,189,191,192,199,231,232,234,236,238,255,258,261,263,264,269],"label":"<<UNRECOGNISED_METHOD>>"},{"test_lines":[60,65],"covered_lines":[21,27,31,153,154,155,156,157,158,159,189,191,192,199,231,232,234,236,238,255,258,261,263,264,269],"label":"<<UNRECOGNISED_METHOD>>"}]},"/bernard/dataset_construction/prep/repos/jedis/src/main/java/redis/clients/jedis/Connection.java":{"class_content":["package redis.clients.jedis;\n","\n","import static redis.clients.jedis.util.SafeEncoder.encode;\n","\n","import java.io.Closeable;\n","import java.io.IOException;\n","import java.net.Socket;\n","import java.net.SocketException;\n","import java.nio.ByteBuffer;\n","import java.nio.CharBuffer;\n","import java.util.ArrayList;\n","import java.util.Arrays;\n","import java.util.List;\n","import java.util.function.Supplier;\n","\n","import redis.clients.jedis.Protocol.Command;\n","import redis.clients.jedis.Protocol.Keyword;\n","import redis.clients.jedis.args.ClientAttributeOption;\n","import redis.clients.jedis.args.Rawable;\n","import redis.clients.jedis.commands.ProtocolCommand;\n","import redis.clients.jedis.exceptions.JedisConnectionException;\n","import redis.clients.jedis.exceptions.JedisDataException;\n","import redis.clients.jedis.exceptions.JedisException;\n","import redis.clients.jedis.exceptions.JedisValidationException;\n","import redis.clients.jedis.util.IOUtils;\n","import redis.clients.jedis.util.RedisInputStream;\n","import redis.clients.jedis.util.RedisOutputStream;\n","\n","public class Connection implements Closeable {\n","\n","  private ConnectionPool memberOf;\n","  private RedisProtocol protocol;\n","  private final JedisSocketFactory socketFactory;\n","  private Socket socket;\n","  private RedisOutputStream outputStream;\n","  private RedisInputStream inputStream;\n","  private int soTimeout = 0;\n","  private int infiniteSoTimeout = 0;\n","  private boolean broken = false;\n","\n","  public Connection() {\n","    this(Protocol.DEFAULT_HOST, Protocol.DEFAULT_PORT);\n","  }\n","\n","  public Connection(final String host, final int port) {\n","    this(new HostAndPort(host, port));\n","  }\n","\n","  public Connection(final HostAndPort hostAndPort) {\n","    this(new DefaultJedisSocketFactory(hostAndPort));\n","  }\n","\n","  public Connection(final HostAndPort hostAndPort, final JedisClientConfig clientConfig) {\n","    this(new DefaultJedisSocketFactory(hostAndPort, clientConfig));\n","    this.infiniteSoTimeout = clientConfig.getBlockingSocketTimeoutMillis();\n","    initializeFromClientConfig(clientConfig);\n","  }\n","\n","  public Connection(final JedisSocketFactory socketFactory) {\n","    this.socketFactory = socketFactory;\n","  }\n","\n","  public Connection(final JedisSocketFactory socketFactory, JedisClientConfig clientConfig) {\n","    this.socketFactory = socketFactory;\n","    this.soTimeout = clientConfig.getSocketTimeoutMillis();\n","    this.infiniteSoTimeout = clientConfig.getBlockingSocketTimeoutMillis();\n","    initializeFromClientConfig(clientConfig);\n","  }\n","\n","  @Override\n","  public String toString() {\n","    return \"Connection{\" + socketFactory + \"}\";\n","  }\n","\n","  public final RedisProtocol getRedisProtocol() {\n","    return protocol;\n","  }\n","\n","  public final void setHandlingPool(final ConnectionPool pool) {\n","    this.memberOf = pool;\n","  }\n","\n","  final HostAndPort getHostAndPort() {\n","    return ((DefaultJedisSocketFactory) socketFactory).getHostAndPort();\n","  }\n","\n","  public int getSoTimeout() {\n","    return soTimeout;\n","  }\n","\n","  public void setSoTimeout(int soTimeout) {\n","    this.soTimeout = soTimeout;\n","    if (this.socket != null) {\n","      try {\n","        this.socket.setSoTimeout(soTimeout);\n","      } catch (SocketException ex) {\n","        broken = true;\n","        throw new JedisConnectionException(ex);\n","      }\n","    }\n","  }\n","\n","  public void setTimeoutInfinite() {\n","    try {\n","      if (!isConnected()) {\n","        connect();\n","      }\n","      socket.setSoTimeout(infiniteSoTimeout);\n","    } catch (SocketException ex) {\n","      broken = true;\n","      throw new JedisConnectionException(ex);\n","    }\n","  }\n","\n","  public void rollbackTimeout() {\n","    try {\n","      socket.setSoTimeout(this.soTimeout);\n","    } catch (SocketException ex) {\n","      broken = true;\n","      throw new JedisConnectionException(ex);\n","    }\n","  }\n","\n","  public Object executeCommand(final ProtocolCommand cmd) {\n","    return executeCommand(new CommandArguments(cmd));\n","  }\n","\n","  public Object executeCommand(final CommandArguments args) {\n","    sendCommand(args);\n","    return getOne();\n","  }\n","\n","  public <T> T executeCommand(final CommandObject<T> commandObject) {\n","    final CommandArguments args = commandObject.getArguments();\n","    sendCommand(args);\n","    if (!args.isBlocking()) {\n","      return commandObject.getBuilder().build(getOne());\n","    } else {\n","      try {\n","        setTimeoutInfinite();\n","        return commandObject.getBuilder().build(getOne());\n","      } finally {\n","        rollbackTimeout();\n","      }\n","    }\n","  }\n","\n","  public void sendCommand(final ProtocolCommand cmd) {\n","    sendCommand(new CommandArguments(cmd));\n","  }\n","\n","  public void sendCommand(final ProtocolCommand cmd, Rawable keyword) {\n","    sendCommand(new CommandArguments(cmd).add(keyword));\n","  }\n","\n","  public void sendCommand(final ProtocolCommand cmd, final String... args) {\n","    sendCommand(new CommandArguments(cmd).addObjects((Object[]) args));\n","  }\n","\n","  public void sendCommand(final ProtocolCommand cmd, final byte[]... args) {\n","    sendCommand(new CommandArguments(cmd).addObjects((Object[]) args));\n","  }\n","\n","  public void sendCommand(final CommandArguments args) {\n","    try {\n","      connect();\n","      Protocol.sendCommand(outputStream, args);\n","    } catch (JedisConnectionException ex) {\n","      /*\n","       * When client send request which formed by invalid protocol, Redis send back error message\n","       * before close connection. We try to read it to provide reason of failure.\n","       */\n","      try {\n","        String errorMessage = Protocol.readErrorLineIfPossible(inputStream);\n","        if (errorMessage != null && errorMessage.length() > 0) {\n","          ex = new JedisConnectionException(errorMessage, ex.getCause());\n","        }\n","      } catch (Exception e) {\n","        /*\n","         * Catch any IOException or JedisConnectionException occurred from InputStream#read and just\n","         * ignore. This approach is safe because reading error message is optional and connection\n","         * will eventually be closed.\n","         */\n","      }\n","      // Any other exceptions related to connection?\n","      broken = true;\n","      throw ex;\n","    }\n","  }\n","\n","  public void connect() throws JedisConnectionException {\n","    if (!isConnected()) {\n","      try {\n","        socket = socketFactory.createSocket();\n","        soTimeout = socket.getSoTimeout(); //?\n","\n","        outputStream = new RedisOutputStream(socket.getOutputStream());\n","        inputStream = new RedisInputStream(socket.getInputStream());\n","\n","        broken = false; // unset broken status when connection is (re)initialized\n","\n","      } catch (JedisConnectionException jce) {\n","\n","        setBroken();\n","        throw jce;\n","\n","      } catch (IOException ioe) {\n","\n","        setBroken();\n","        throw new JedisConnectionException(\"Failed to create input/output stream\", ioe);\n","\n","      } finally {\n","\n","        if (broken) {\n","          IOUtils.closeQuietly(socket);\n","        }\n","      }\n","    }\n","  }\n","\n","  @Override\n","  public void close() {\n","    if (this.memberOf != null) {\n","      ConnectionPool pool = this.memberOf;\n","      this.memberOf = null;\n","      if (isBroken()) {\n","        pool.returnBrokenResource(this);\n","      } else {\n","        pool.returnResource(this);\n","      }\n","    } else {\n","      disconnect();\n","    }\n","  }\n","\n","  /**\n","   * Close the socket and disconnect the server.\n","   */\n","  public void disconnect() {\n","    if (isConnected()) {\n","      try {\n","        outputStream.flush();\n","        socket.close();\n","      } catch (IOException ex) {\n","        throw new JedisConnectionException(ex);\n","      } finally {\n","        IOUtils.closeQuietly(socket);\n","        setBroken();\n","      }\n","    }\n","  }\n","\n","  public boolean isConnected() {\n","    return socket != null && socket.isBound() && !socket.isClosed() && socket.isConnected()\n","        && !socket.isInputShutdown() && !socket.isOutputShutdown();\n","  }\n","\n","  public boolean isBroken() {\n","    return broken;\n","  }\n","\n","  public void setBroken() {\n","    broken = true;\n","  }\n","\n","  public String getStatusCodeReply() {\n","    flush();\n","    final byte[] resp = (byte[]) readProtocolWithCheckingBroken();\n","    if (null == resp) {\n","      return null;\n","    } else {\n","      return encode(resp);\n","    }\n","  }\n","\n","  public String getBulkReply() {\n","    final byte[] result = getBinaryBulkReply();\n","    if (null != result) {\n","      return encode(result);\n","    } else {\n","      return null;\n","    }\n","  }\n","\n","  public byte[] getBinaryBulkReply() {\n","    flush();\n","    return (byte[]) readProtocolWithCheckingBroken();\n","  }\n","\n","  public Long getIntegerReply() {\n","    flush();\n","    return (Long) readProtocolWithCheckingBroken();\n","  }\n","\n","  public List<String> getMultiBulkReply() {\n","    return BuilderFactory.STRING_LIST.build(getBinaryMultiBulkReply());\n","  }\n","\n","  @SuppressWarnings(\"unchecked\")\n","  public List<byte[]> getBinaryMultiBulkReply() {\n","    flush();\n","    return (List<byte[]>) readProtocolWithCheckingBroken();\n","  }\n","\n","  /**\n","   * @deprecated Use {@link Connection#getUnflushedObject()}.\n","   */\n","  @Deprecated\n","  @SuppressWarnings(\"unchecked\")\n","  public List<Object> getUnflushedObjectMultiBulkReply() {\n","    return (List<Object>) readProtocolWithCheckingBroken();\n","  }\n","\n","  @SuppressWarnings(\"unchecked\")\n","  public Object getUnflushedObject() {\n","    return readProtocolWithCheckingBroken();\n","  }\n","\n","  public List<Object> getObjectMultiBulkReply() {\n","    flush();\n","    return (List<Object>) readProtocolWithCheckingBroken();\n","  }\n","\n","  @SuppressWarnings(\"unchecked\")\n","  public List<Long> getIntegerMultiBulkReply() {\n","    flush();\n","    return (List<Long>) readProtocolWithCheckingBroken();\n","  }\n","\n","  public Object getOne() {\n","    flush();\n","    return readProtocolWithCheckingBroken();\n","  }\n","\n","  protected void flush() {\n","    try {\n","      outputStream.flush();\n","    } catch (IOException ex) {\n","      broken = true;\n","      throw new JedisConnectionException(ex);\n","    }\n","  }\n","\n","  protected Object readProtocolWithCheckingBroken() {\n","    if (broken) {\n","      throw new JedisConnectionException(\"Attempting to read from a broken connection\");\n","    }\n","\n","    try {\n","      return Protocol.read(inputStream);\n","//      Object read = Protocol.read(inputStream);\n","//      System.out.println(SafeEncoder.encodeObject(read));\n","//      return read;\n","    } catch (JedisConnectionException exc) {\n","      broken = true;\n","      throw exc;\n","    }\n","  }\n","\n","  public List<Object> getMany(final int count) {\n","    flush();\n","    final List<Object> responses = new ArrayList<>(count);\n","    for (int i = 0; i < count; i++) {\n","      try {\n","        responses.add(readProtocolWithCheckingBroken());\n","      } catch (JedisDataException e) {\n","        responses.add(e);\n","      }\n","    }\n","    return responses;\n","  }\n","\n","  /**\n","   * Check if the client name libname, libver, characters are legal\n","   * @param info the name\n","   * @return Returns true if legal, false throws exception\n","   * @throws JedisException if characters illegal\n","   */\n","  private static boolean validateClientInfo(String info) {\n","    for (int i = 0; i < info.length(); i++) {\n","      char c = info.charAt(i);\n","      if (c < '!' || c > '~') {\n","        throw new JedisValidationException(\"client info cannot contain spaces, \"\n","            + \"newlines or special characters.\");\n","      }\n","    }\n","    return true;\n","  }\n","\n","  private void initializeFromClientConfig(final JedisClientConfig config) {\n","    try {\n","      connect();\n","\n","      protocol = config.getRedisProtocol();\n","\n","      final Supplier<RedisCredentials> credentialsProvider = config.getCredentialsProvider();\n","      if (credentialsProvider instanceof RedisCredentialsProvider) {\n","        final RedisCredentialsProvider redisCredentialsProvider = (RedisCredentialsProvider) credentialsProvider;\n","        try {\n","          redisCredentialsProvider.prepare();\n","          helloOrAuth(protocol, redisCredentialsProvider.get());\n","        } finally {\n","          redisCredentialsProvider.cleanUp();\n","        }\n","      } else {\n","        helloOrAuth(protocol, credentialsProvider != null ? credentialsProvider.get()\n","            : new DefaultRedisCredentials(config.getUser(), config.getPassword()));\n","      }\n","\n","      List<CommandArguments> fireAndForgetMsg = new ArrayList<>();\n","\n","      String clientName = config.getClientName();\n","      if (clientName != null && validateClientInfo(clientName)) {\n","        fireAndForgetMsg.add(new CommandArguments(Command.CLIENT).add(Keyword.SETNAME).add(clientName));\n","      }\n","\n","      ClientSetInfoConfig setInfoConfig = config.getClientSetInfoConfig();\n","      if (setInfoConfig == null) setInfoConfig = ClientSetInfoConfig.DEFAULT;\n","\n","      if (!setInfoConfig.isDisabled()) {\n","        String libName = JedisMetaInfo.getArtifactId();\n","        if (libName != null && validateClientInfo(libName)) {\n","          String libNameSuffix = setInfoConfig.getLibNameSuffix();\n","          if (libNameSuffix != null) { // validation is moved into ClientSetInfoConfig constructor\n","            libName = libName + '(' + libNameSuffix + ')';\n","          }\n","          fireAndForgetMsg.add(new CommandArguments(Command.CLIENT).add(Keyword.SETINFO)\n","              .add(ClientAttributeOption.LIB_NAME.getRaw()).add(libName));\n","        }\n","\n","        String libVersion = JedisMetaInfo.getVersion();\n","        if (libVersion != null && validateClientInfo(libVersion)) {\n","          fireAndForgetMsg.add(new CommandArguments(Command.CLIENT).add(Keyword.SETINFO)\n","              .add(ClientAttributeOption.LIB_VER.getRaw()).add(libVersion));\n","        }\n","      }\n","\n","      for (CommandArguments arg : fireAndForgetMsg) {\n","        sendCommand(arg);\n","      }\n","      getMany(fireAndForgetMsg.size());\n","\n","      int dbIndex = config.getDatabase();\n","      if (dbIndex > 0) {\n","        select(dbIndex);\n","      }\n","\n","    } catch (JedisException je) {\n","      try {\n","        disconnect();\n","      } catch (Exception e) {\n","        // the first exception 'je' will be thrown\n","      }\n","      throw je;\n","    }\n","  }\n","\n","  private void helloOrAuth(final RedisProtocol protocol, final RedisCredentials credentials) {\n","\n","    if (credentials == null || credentials.getPassword() == null) {\n","      if (protocol != null) {\n","        sendCommand(Command.HELLO, encode(protocol.version()));\n","        getOne();\n","      }\n","      return;\n","    }\n","\n","    // Source: https://stackoverflow.com/a/9670279/4021802\n","    ByteBuffer passBuf = Protocol.CHARSET.encode(CharBuffer.wrap(credentials.getPassword()));\n","    byte[] rawPass = Arrays.copyOfRange(passBuf.array(), passBuf.position(), passBuf.limit());\n","    Arrays.fill(passBuf.array(), (byte) 0); // clear sensitive data\n","\n","    try {\n","      /// actual HELLO or AUTH -->\n","      if (protocol != null) {\n","        if (credentials.getUser() != null) {\n","          sendCommand(Command.HELLO, encode(protocol.version()),\n","              Keyword.AUTH.getRaw(), encode(credentials.getUser()), rawPass);\n","          getOne(); // Map\n","        } else {\n","          sendCommand(Command.AUTH, rawPass);\n","          getStatusCodeReply(); // OK\n","          sendCommand(Command.HELLO, encode(protocol.version()));\n","          getOne(); // Map\n","        }\n","      } else { // protocol == null\n","        if (credentials.getUser() != null) {\n","          sendCommand(Command.AUTH, encode(credentials.getUser()), rawPass);\n","        } else {\n","          sendCommand(Command.AUTH, rawPass);\n","        }\n","        getStatusCodeReply(); // OK\n","      }\n","      /// <-- actual HELLO or AUTH\n","    } finally {\n","\n","      Arrays.fill(rawPass, (byte) 0); // clear sensitive data\n","    }\n","\n","    // clearing 'char[] credentials.getPassword()' should be\n","    // handled in RedisCredentialsProvider.cleanUp()\n","  }\n","\n","  public String select(final int index) {\n","    sendCommand(Command.SELECT, Protocol.toByteArray(index));\n","    return getStatusCodeReply();\n","  }\n","\n","  public boolean ping() {\n","    sendCommand(Command.PING);\n","    String status = getStatusCodeReply();\n","    if (!\"PONG\".equals(status)) {\n","      throw new JedisException(status);\n","    }\n","    return true;\n","  }\n","}\n"],"test_content":["package redis.clients.jedis;\n","\n","import org.junit.After;\n","import org.junit.Test;\n","\n","import redis.clients.jedis.exceptions.JedisConnectionException;\n","\n","public class ConnectionTest {\n","\n","  private Connection client;\n","\n","  @After\n","  public void tearDown() throws Exception {\n","    if (client != null) {\n","      client.close();\n","    }\n","  }\n","\n","  @Test(expected = JedisConnectionException.class)\n","  public void checkUnknownHost() {\n","    client = new Connection(\"someunknownhost\", Protocol.DEFAULT_PORT);\n","    client.connect();\n","  }\n","\n","  @Test(expected = JedisConnectionException.class)\n","  public void checkWrongPort() {\n","    client = new Connection(Protocol.DEFAULT_HOST, 55665);\n","    client.connect();\n","  }\n","\n","  @Test\n","  public void connectIfNotConnectedWhenSettingTimeoutInfinite() {\n","    client = new Connection(\"localhost\", 6379);\n","    client.setTimeoutInfinite();\n","  }\n","\n","  @Test\n","  public void checkCloseable() {\n","    client = new Connection(\"localhost\", 6379);\n","    client.connect();\n","    client.close();\n","  }\n","}\n"],"method_lines_dic":{"Connection::::toString()":[70,73],"Connection::::getRedisProtocol()":[75,77],"Connection::::setHandlingPool(redis.clients.jedis.ConnectionPool)":[79,81],"Connection::::getHostAndPort()":[83,85],"Connection::::getSoTimeout()":[87,89],"Connection::::setSoTimeout(int)":[91,101],"Connection::::setTimeoutInfinite()":[103,113],"Connection::::rollbackTimeout()":[115,122],"Connection::::executeCommand(redis.clients.jedis.commands.ProtocolCommand)":[124,126],"Connection::::executeCommand(redis.clients.jedis.CommandArguments)":[128,131],"Connection::::executeCommand(redis.clients.jedis.CommandObject<T>)":[133,146],"Connection::::sendCommand(redis.clients.jedis.commands.ProtocolCommand)":[148,150],"Connection::::sendCommand(redis.clients.jedis.commands.ProtocolCommand,redis.clients.jedis.args.Rawable)":[152,154],"Connection::::sendCommand(redis.clients.jedis.commands.ProtocolCommand,java.lang.String[])":[156,158],"Connection::::sendCommand(redis.clients.jedis.commands.ProtocolCommand,byte[][])":[160,162],"Connection::::sendCommand(redis.clients.jedis.CommandArguments)":[164,189],"Connection::::connect()":[191,219],"Connection::::close()":[221,234],"Connection::::disconnect()":[239,251],"Connection::::isConnected()":[253,256],"Connection::::isBroken()":[258,260],"Connection::::setBroken()":[262,264],"Connection::::getStatusCodeReply()":[266,274],"Connection::::getBulkReply()":[276,283],"Connection::::getBinaryBulkReply()":[285,288],"Connection::::getIntegerReply()":[290,293],"Connection::::getMultiBulkReply()":[295,297],"Connection::::getBinaryMultiBulkReply()":[299,303],"Connection::::getUnflushedObjectMultiBulkReply()":[308,312],"Connection::::getUnflushedObject()":[314,317],"Connection::::getObjectMultiBulkReply()":[319,322],"Connection::::getIntegerMultiBulkReply()":[324,328],"Connection::::getOne()":[330,333],"Connection::::flush()":[335,342],"Connection::::readProtocolWithCheckingBroken()":[344,358],"Connection::::getMany(int)":[360,371],"Connection::::validateClientInfo(java.lang.String)":[379,388],"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)":[390,456],"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)":[458,502],"Connection::::select(int)":[504,507],"Connection::::ping()":[509,516]},"test_method_lines_dic":{"ConnectionTest::::tearDown()":[12,17],"ConnectionTest::::checkUnknownHost()":[19,23],"ConnectionTest::::checkWrongPort()":[25,29],"ConnectionTest::::connectIfNotConnectedWhenSettingTimeoutInfinite()":[31,35],"ConnectionTest::::checkCloseable()":[37,42]},"reverse_method_lines_dic":{"70":"Connection::::toString()","71":"Connection::::toString()","72":"Connection::::toString()","73":"Connection::::toString()","75":"Connection::::getRedisProtocol()","76":"Connection::::getRedisProtocol()","77":"Connection::::getRedisProtocol()","79":"Connection::::setHandlingPool(redis.clients.jedis.ConnectionPool)","80":"Connection::::setHandlingPool(redis.clients.jedis.ConnectionPool)","81":"Connection::::setHandlingPool(redis.clients.jedis.ConnectionPool)","83":"Connection::::getHostAndPort()","84":"Connection::::getHostAndPort()","85":"Connection::::getHostAndPort()","87":"Connection::::getSoTimeout()","88":"Connection::::getSoTimeout()","89":"Connection::::getSoTimeout()","91":"Connection::::setSoTimeout(int)","92":"Connection::::setSoTimeout(int)","93":"Connection::::setSoTimeout(int)","94":"Connection::::setSoTimeout(int)","95":"Connection::::setSoTimeout(int)","96":"Connection::::setSoTimeout(int)","97":"Connection::::setSoTimeout(int)","98":"Connection::::setSoTimeout(int)","99":"Connection::::setSoTimeout(int)","100":"Connection::::setSoTimeout(int)","101":"Connection::::setSoTimeout(int)","103":"Connection::::setTimeoutInfinite()","104":"Connection::::setTimeoutInfinite()","105":"Connection::::setTimeoutInfinite()","106":"Connection::::setTimeoutInfinite()","107":"Connection::::setTimeoutInfinite()","108":"Connection::::setTimeoutInfinite()","109":"Connection::::setTimeoutInfinite()","110":"Connection::::setTimeoutInfinite()","111":"Connection::::setTimeoutInfinite()","112":"Connection::::setTimeoutInfinite()","113":"Connection::::setTimeoutInfinite()","115":"Connection::::rollbackTimeout()","116":"Connection::::rollbackTimeout()","117":"Connection::::rollbackTimeout()","118":"Connection::::rollbackTimeout()","119":"Connection::::rollbackTimeout()","120":"Connection::::rollbackTimeout()","121":"Connection::::rollbackTimeout()","122":"Connection::::rollbackTimeout()","124":"Connection::::executeCommand(redis.clients.jedis.commands.ProtocolCommand)","125":"Connection::::executeCommand(redis.clients.jedis.commands.ProtocolCommand)","126":"Connection::::executeCommand(redis.clients.jedis.commands.ProtocolCommand)","128":"Connection::::executeCommand(redis.clients.jedis.CommandArguments)","129":"Connection::::executeCommand(redis.clients.jedis.CommandArguments)","130":"Connection::::executeCommand(redis.clients.jedis.CommandArguments)","131":"Connection::::executeCommand(redis.clients.jedis.CommandArguments)","133":"Connection::::executeCommand(redis.clients.jedis.CommandObject<T>)","134":"Connection::::executeCommand(redis.clients.jedis.CommandObject<T>)","135":"Connection::::executeCommand(redis.clients.jedis.CommandObject<T>)","136":"Connection::::executeCommand(redis.clients.jedis.CommandObject<T>)","137":"Connection::::executeCommand(redis.clients.jedis.CommandObject<T>)","138":"Connection::::executeCommand(redis.clients.jedis.CommandObject<T>)","139":"Connection::::executeCommand(redis.clients.jedis.CommandObject<T>)","140":"Connection::::executeCommand(redis.clients.jedis.CommandObject<T>)","141":"Connection::::executeCommand(redis.clients.jedis.CommandObject<T>)","142":"Connection::::executeCommand(redis.clients.jedis.CommandObject<T>)","143":"Connection::::executeCommand(redis.clients.jedis.CommandObject<T>)","144":"Connection::::executeCommand(redis.clients.jedis.CommandObject<T>)","145":"Connection::::executeCommand(redis.clients.jedis.CommandObject<T>)","146":"Connection::::executeCommand(redis.clients.jedis.CommandObject<T>)","148":"Connection::::sendCommand(redis.clients.jedis.commands.ProtocolCommand)","149":"Connection::::sendCommand(redis.clients.jedis.commands.ProtocolCommand)","150":"Connection::::sendCommand(redis.clients.jedis.commands.ProtocolCommand)","152":"Connection::::sendCommand(redis.clients.jedis.commands.ProtocolCommand,redis.clients.jedis.args.Rawable)","153":"Connection::::sendCommand(redis.clients.jedis.commands.ProtocolCommand,redis.clients.jedis.args.Rawable)","154":"Connection::::sendCommand(redis.clients.jedis.commands.ProtocolCommand,redis.clients.jedis.args.Rawable)","156":"Connection::::sendCommand(redis.clients.jedis.commands.ProtocolCommand,java.lang.String[])","157":"Connection::::sendCommand(redis.clients.jedis.commands.ProtocolCommand,java.lang.String[])","158":"Connection::::sendCommand(redis.clients.jedis.commands.ProtocolCommand,java.lang.String[])","160":"Connection::::sendCommand(redis.clients.jedis.commands.ProtocolCommand,byte[][])","161":"Connection::::sendCommand(redis.clients.jedis.commands.ProtocolCommand,byte[][])","162":"Connection::::sendCommand(redis.clients.jedis.commands.ProtocolCommand,byte[][])","164":"Connection::::sendCommand(redis.clients.jedis.CommandArguments)","165":"Connection::::sendCommand(redis.clients.jedis.CommandArguments)","166":"Connection::::sendCommand(redis.clients.jedis.CommandArguments)","167":"Connection::::sendCommand(redis.clients.jedis.CommandArguments)","168":"Connection::::sendCommand(redis.clients.jedis.CommandArguments)","169":"Connection::::sendCommand(redis.clients.jedis.CommandArguments)","170":"Connection::::sendCommand(redis.clients.jedis.CommandArguments)","171":"Connection::::sendCommand(redis.clients.jedis.CommandArguments)","172":"Connection::::sendCommand(redis.clients.jedis.CommandArguments)","173":"Connection::::sendCommand(redis.clients.jedis.CommandArguments)","174":"Connection::::sendCommand(redis.clients.jedis.CommandArguments)","175":"Connection::::sendCommand(redis.clients.jedis.CommandArguments)","176":"Connection::::sendCommand(redis.clients.jedis.CommandArguments)","177":"Connection::::sendCommand(redis.clients.jedis.CommandArguments)","178":"Connection::::sendCommand(redis.clients.jedis.CommandArguments)","179":"Connection::::sendCommand(redis.clients.jedis.CommandArguments)","180":"Connection::::sendCommand(redis.clients.jedis.CommandArguments)","181":"Connection::::sendCommand(redis.clients.jedis.CommandArguments)","182":"Connection::::sendCommand(redis.clients.jedis.CommandArguments)","183":"Connection::::sendCommand(redis.clients.jedis.CommandArguments)","184":"Connection::::sendCommand(redis.clients.jedis.CommandArguments)","185":"Connection::::sendCommand(redis.clients.jedis.CommandArguments)","186":"Connection::::sendCommand(redis.clients.jedis.CommandArguments)","187":"Connection::::sendCommand(redis.clients.jedis.CommandArguments)","188":"Connection::::sendCommand(redis.clients.jedis.CommandArguments)","189":"Connection::::sendCommand(redis.clients.jedis.CommandArguments)","191":"Connection::::connect()","192":"Connection::::connect()","193":"Connection::::connect()","194":"Connection::::connect()","195":"Connection::::connect()","196":"Connection::::connect()","197":"Connection::::connect()","198":"Connection::::connect()","199":"Connection::::connect()","200":"Connection::::connect()","201":"Connection::::connect()","202":"Connection::::connect()","203":"Connection::::connect()","204":"Connection::::connect()","205":"Connection::::connect()","206":"Connection::::connect()","207":"Connection::::connect()","208":"Connection::::connect()","209":"Connection::::connect()","210":"Connection::::connect()","211":"Connection::::connect()","212":"Connection::::connect()","213":"Connection::::connect()","214":"Connection::::connect()","215":"Connection::::connect()","216":"Connection::::connect()","217":"Connection::::connect()","218":"Connection::::connect()","219":"Connection::::connect()","221":"Connection::::close()","222":"Connection::::close()","223":"Connection::::close()","224":"Connection::::close()","225":"Connection::::close()","226":"Connection::::close()","227":"Connection::::close()","228":"Connection::::close()","229":"Connection::::close()","230":"Connection::::close()","231":"Connection::::close()","232":"Connection::::close()","233":"Connection::::close()","234":"Connection::::close()","239":"Connection::::disconnect()","240":"Connection::::disconnect()","241":"Connection::::disconnect()","242":"Connection::::disconnect()","243":"Connection::::disconnect()","244":"Connection::::disconnect()","245":"Connection::::disconnect()","246":"Connection::::disconnect()","247":"Connection::::disconnect()","248":"Connection::::disconnect()","249":"Connection::::disconnect()","250":"Connection::::disconnect()","251":"Connection::::disconnect()","253":"Connection::::isConnected()","254":"Connection::::isConnected()","255":"Connection::::isConnected()","256":"Connection::::isConnected()","258":"Connection::::isBroken()","259":"Connection::::isBroken()","260":"Connection::::isBroken()","262":"Connection::::setBroken()","263":"Connection::::setBroken()","264":"Connection::::setBroken()","266":"Connection::::getStatusCodeReply()","267":"Connection::::getStatusCodeReply()","268":"Connection::::getStatusCodeReply()","269":"Connection::::getStatusCodeReply()","270":"Connection::::getStatusCodeReply()","271":"Connection::::getStatusCodeReply()","272":"Connection::::getStatusCodeReply()","273":"Connection::::getStatusCodeReply()","274":"Connection::::getStatusCodeReply()","276":"Connection::::getBulkReply()","277":"Connection::::getBulkReply()","278":"Connection::::getBulkReply()","279":"Connection::::getBulkReply()","280":"Connection::::getBulkReply()","281":"Connection::::getBulkReply()","282":"Connection::::getBulkReply()","283":"Connection::::getBulkReply()","285":"Connection::::getBinaryBulkReply()","286":"Connection::::getBinaryBulkReply()","287":"Connection::::getBinaryBulkReply()","288":"Connection::::getBinaryBulkReply()","290":"Connection::::getIntegerReply()","291":"Connection::::getIntegerReply()","292":"Connection::::getIntegerReply()","293":"Connection::::getIntegerReply()","295":"Connection::::getMultiBulkReply()","296":"Connection::::getMultiBulkReply()","297":"Connection::::getMultiBulkReply()","299":"Connection::::getBinaryMultiBulkReply()","300":"Connection::::getBinaryMultiBulkReply()","301":"Connection::::getBinaryMultiBulkReply()","302":"Connection::::getBinaryMultiBulkReply()","303":"Connection::::getBinaryMultiBulkReply()","308":"Connection::::getUnflushedObjectMultiBulkReply()","309":"Connection::::getUnflushedObjectMultiBulkReply()","310":"Connection::::getUnflushedObjectMultiBulkReply()","311":"Connection::::getUnflushedObjectMultiBulkReply()","312":"Connection::::getUnflushedObjectMultiBulkReply()","314":"Connection::::getUnflushedObject()","315":"Connection::::getUnflushedObject()","316":"Connection::::getUnflushedObject()","317":"Connection::::getUnflushedObject()","319":"Connection::::getObjectMultiBulkReply()","320":"Connection::::getObjectMultiBulkReply()","321":"Connection::::getObjectMultiBulkReply()","322":"Connection::::getObjectMultiBulkReply()","324":"Connection::::getIntegerMultiBulkReply()","325":"Connection::::getIntegerMultiBulkReply()","326":"Connection::::getIntegerMultiBulkReply()","327":"Connection::::getIntegerMultiBulkReply()","328":"Connection::::getIntegerMultiBulkReply()","330":"Connection::::getOne()","331":"Connection::::getOne()","332":"Connection::::getOne()","333":"Connection::::getOne()","335":"Connection::::flush()","336":"Connection::::flush()","337":"Connection::::flush()","338":"Connection::::flush()","339":"Connection::::flush()","340":"Connection::::flush()","341":"Connection::::flush()","342":"Connection::::flush()","344":"Connection::::readProtocolWithCheckingBroken()","345":"Connection::::readProtocolWithCheckingBroken()","346":"Connection::::readProtocolWithCheckingBroken()","347":"Connection::::readProtocolWithCheckingBroken()","348":"Connection::::readProtocolWithCheckingBroken()","349":"Connection::::readProtocolWithCheckingBroken()","350":"Connection::::readProtocolWithCheckingBroken()","351":"Connection::::readProtocolWithCheckingBroken()","352":"Connection::::readProtocolWithCheckingBroken()","353":"Connection::::readProtocolWithCheckingBroken()","354":"Connection::::readProtocolWithCheckingBroken()","355":"Connection::::readProtocolWithCheckingBroken()","356":"Connection::::readProtocolWithCheckingBroken()","357":"Connection::::readProtocolWithCheckingBroken()","358":"Connection::::readProtocolWithCheckingBroken()","360":"Connection::::getMany(int)","361":"Connection::::getMany(int)","362":"Connection::::getMany(int)","363":"Connection::::getMany(int)","364":"Connection::::getMany(int)","365":"Connection::::getMany(int)","366":"Connection::::getMany(int)","367":"Connection::::getMany(int)","368":"Connection::::getMany(int)","369":"Connection::::getMany(int)","370":"Connection::::getMany(int)","371":"Connection::::getMany(int)","379":"Connection::::validateClientInfo(java.lang.String)","380":"Connection::::validateClientInfo(java.lang.String)","381":"Connection::::validateClientInfo(java.lang.String)","382":"Connection::::validateClientInfo(java.lang.String)","383":"Connection::::validateClientInfo(java.lang.String)","384":"Connection::::validateClientInfo(java.lang.String)","385":"Connection::::validateClientInfo(java.lang.String)","386":"Connection::::validateClientInfo(java.lang.String)","387":"Connection::::validateClientInfo(java.lang.String)","388":"Connection::::validateClientInfo(java.lang.String)","390":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","391":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","392":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","393":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","394":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","395":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","396":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","397":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","398":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","399":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","400":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","401":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","402":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","403":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","404":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","405":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","406":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","407":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","408":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","409":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","410":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","411":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","412":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","413":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","414":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","415":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","416":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","417":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","418":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","419":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","420":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","421":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","422":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","423":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","424":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","425":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","426":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","427":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","428":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","429":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","430":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","431":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","432":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","433":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","434":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","435":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","436":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","437":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","438":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","439":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","440":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","441":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","442":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","443":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","444":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","445":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","446":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","447":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","448":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","449":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","450":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","451":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","452":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","453":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","454":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","455":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","456":"Connection::::initializeFromClientConfig(redis.clients.jedis.JedisClientConfig)","458":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","459":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","460":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","461":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","462":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","463":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","464":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","465":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","466":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","467":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","468":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","469":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","470":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","471":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","472":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","473":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","474":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","475":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","476":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","477":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","478":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","479":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","480":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","481":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","482":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","483":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","484":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","485":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","486":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","487":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","488":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","489":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","490":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","491":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","492":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","493":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","494":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","495":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","496":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","497":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","498":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","499":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","500":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","501":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","502":"Connection::::helloOrAuth(redis.clients.jedis.RedisProtocol,redis.clients.jedis.RedisCredentials)","504":"Connection::::select(int)","505":"Connection::::select(int)","506":"Connection::::select(int)","507":"Connection::::select(int)","509":"Connection::::ping()","510":"Connection::::ping()","511":"Connection::::ping()","512":"Connection::::ping()","513":"Connection::::ping()","514":"Connection::::ping()","515":"Connection::::ping()","516":"Connection::::ping()"},"test_reverse_method_lines_dic":{"12":"ConnectionTest::::tearDown()","13":"ConnectionTest::::tearDown()","14":"ConnectionTest::::tearDown()","15":"ConnectionTest::::tearDown()","16":"ConnectionTest::::tearDown()","17":"ConnectionTest::::tearDown()","19":"ConnectionTest::::checkUnknownHost()","20":"ConnectionTest::::checkUnknownHost()","21":"ConnectionTest::::checkUnknownHost()","22":"ConnectionTest::::checkUnknownHost()","23":"ConnectionTest::::checkUnknownHost()","25":"ConnectionTest::::checkWrongPort()","26":"ConnectionTest::::checkWrongPort()","27":"ConnectionTest::::checkWrongPort()","28":"ConnectionTest::::checkWrongPort()","29":"ConnectionTest::::checkWrongPort()","31":"ConnectionTest::::connectIfNotConnectedWhenSettingTimeoutInfinite()","32":"ConnectionTest::::connectIfNotConnectedWhenSettingTimeoutInfinite()","33":"ConnectionTest::::connectIfNotConnectedWhenSettingTimeoutInfinite()","34":"ConnectionTest::::connectIfNotConnectedWhenSettingTimeoutInfinite()","35":"ConnectionTest::::connectIfNotConnectedWhenSettingTimeoutInfinite()","37":"ConnectionTest::::checkCloseable()","38":"ConnectionTest::::checkCloseable()","39":"ConnectionTest::::checkCloseable()","40":"ConnectionTest::::checkCloseable()","41":"ConnectionTest::::checkCloseable()","42":"ConnectionTest::::checkCloseable()"},"tests":[{"test_lines":[19,23],"covered_lines":[37,38,39,46,47,50,51,59,60,61,192,202,204,205,214,215,217,223,232,234,240,251,254,255,263,264],"label":"Connection::::connect()"},{"test_lines":[25,29],"covered_lines":[37,38,39,46,47,50,51,59,60,61,192,202,204,205,214,215,217,223,232,234,240,251,254,255,263,264],"label":"Connection::::connect()"}]},"/bernard/dataset_construction/prep/repos/jedis/src/main/java/redis/clients/jedis/Builder.java":{"class_content":["package redis.clients.jedis;\n","\n","public abstract class Builder<T> {\n","\n","  public abstract T build(Object data);\n","}\n"],"test_content":["package redis.clients.jedis;\n","\n","import static org.junit.Assert.assertEquals;\n","\n","import org.junit.Assert;\n","import org.junit.Test;\n","\n","public class BuilderTest {\n","\n","  @Test\n","  public void buildDouble() {\n","    Double build = BuilderFactory.DOUBLE.build(\"1.0\".getBytes());\n","    assertEquals(Double.valueOf(1.0), build);\n","    build = BuilderFactory.DOUBLE.build(\"inf\".getBytes());\n","    assertEquals(Double.valueOf(Double.POSITIVE_INFINITY), build);\n","    build = BuilderFactory.DOUBLE.build(\"+inf\".getBytes());\n","    assertEquals(Double.valueOf(Double.POSITIVE_INFINITY), build);\n","    build = BuilderFactory.DOUBLE.build(\"-inf\".getBytes());\n","    assertEquals(Double.valueOf(Double.NEGATIVE_INFINITY), build);\n","\n","    try {\n","      BuilderFactory.DOUBLE.build(\"\".getBytes());\n","      Assert.fail(\"Empty String should throw NumberFormatException.\");\n","    } catch (NumberFormatException expected) {\n","      Assert.assertEquals(\"empty String\", expected.getMessage());\n","    }\n","  }\n","}\n"],"method_lines_dic":{"Builder::::build(java.lang.Object)":[5,5]},"test_method_lines_dic":{"BuilderTest::::buildDouble()":[10,27]},"reverse_method_lines_dic":{"5":"Builder::::build(java.lang.Object)"},"test_reverse_method_lines_dic":{"10":"BuilderTest::::buildDouble()","11":"BuilderTest::::buildDouble()","12":"BuilderTest::::buildDouble()","13":"BuilderTest::::buildDouble()","14":"BuilderTest::::buildDouble()","15":"BuilderTest::::buildDouble()","16":"BuilderTest::::buildDouble()","17":"BuilderTest::::buildDouble()","18":"BuilderTest::::buildDouble()","19":"BuilderTest::::buildDouble()","20":"BuilderTest::::buildDouble()","21":"BuilderTest::::buildDouble()","22":"BuilderTest::::buildDouble()","23":"BuilderTest::::buildDouble()","24":"BuilderTest::::buildDouble()","25":"BuilderTest::::buildDouble()","26":"BuilderTest::::buildDouble()","27":"BuilderTest::::buildDouble()"},"tests":[{"test_lines":[10,27],"covered_lines":[3],"label":"<<UNRECOGNISED_METHOD>>"}]},"/bernard/dataset_construction/prep/repos/jedis/src/main/java/redis/clients/jedis/params/SetParams.java":{"class_content":["package redis.clients.jedis.params;\n","\n","import redis.clients.jedis.CommandArguments;\n","import redis.clients.jedis.Protocol.Keyword;\n","\n","import java.util.Objects;\n","\n","public class SetParams implements IParams {\n","\n","  private Keyword existance;\n","  private Keyword expiration;\n","  private Long expirationValue;\n","\n","  public SetParams() {\n","  }\n","\n","  public static SetParams setParams() {\n","    return new SetParams();\n","  }\n","\n","  /**\n","   * Only set the key if it does not already exist.\n","   * @return SetParams\n","   */\n","  public SetParams nx() {\n","    this.existance = Keyword.NX;\n","    return this;\n","  }\n","\n","  /**\n","   * Only set the key if it already exist.\n","   * @return SetParams\n","   */\n","  public SetParams xx() {\n","    this.existance = Keyword.XX;\n","    return this;\n","  }\n","\n","  private SetParams expiration(Keyword type, Long value) {\n","    this.expiration = type;\n","    this.expirationValue = value;\n","    return this;\n","  }\n","\n","  /**\n","   * Set the specified expire time, in seconds.\n","   * @param remainingSeconds\n","   * @return SetParams\n","   */\n","  public SetParams ex(long remainingSeconds) {\n","    return expiration(Keyword.EX, remainingSeconds);\n","  }\n","\n","  /**\n","   * Set the specified expire time, in milliseconds.\n","   * @param remainingMilliseconds\n","   * @return SetParams\n","   */\n","  public SetParams px(long remainingMilliseconds) {\n","    return expiration(Keyword.PX, remainingMilliseconds);\n","  }\n","\n","  /**\n","   * Set the specified Unix time at which the key will expire, in seconds.\n","   * @param timestampSeconds\n","   * @return SetParams\n","   */\n","  public SetParams exAt(long timestampSeconds) {\n","    return expiration(Keyword.EXAT, timestampSeconds);\n","  }\n","\n","  /**\n","   * Set the specified Unix time at which the key will expire, in milliseconds.\n","   * @param timestampMilliseconds\n","   * @return SetParams\n","   */\n","  public SetParams pxAt(long timestampMilliseconds) {\n","    return expiration(Keyword.PXAT, timestampMilliseconds);\n","  }\n","\n","  /**\n","   * Retain the time to live associated with the key.\n","   * @return SetParams\n","   */\n","  // TODO: deprecate?\n","  public SetParams keepttl() {\n","    return keepTtl();\n","  }\n","\n","  /**\n","   * Retain the time to live associated with the key.\n","   * @return SetParams\n","   */\n","  public SetParams keepTtl() {\n","    return expiration(Keyword.KEEPTTL, null);\n","  }\n","\n","  @Override\n","  public void addParams(CommandArguments args) {\n","    if (existance != null) {\n","      args.add(existance);\n","    }\n","\n","    if (expiration != null) {\n","      args.add(expiration);\n","      if (expirationValue != null) {\n","        args.add(expirationValue);\n","      }\n","    }\n","  }\n","\n","  @Override\n","  public boolean equals(Object o) {\n","    if (this == o) return true;\n","    if (o == null || getClass() != o.getClass()) return false;\n","    SetParams setParams = (SetParams) o;\n","    return Objects.equals(existance, setParams.existance) && Objects.equals(expiration, setParams.expiration)\n","            && Objects.equals(expirationValue, setParams.expirationValue);\n","  }\n","\n","  @Override\n","  public int hashCode() {\n","    return Objects.hash(existance, expiration, expirationValue);\n","  }\n","}\n"],"test_content":["package redis.clients.jedis.params;\n","\n","import org.junit.Test;\n","\n","import static org.junit.Assert.*;\n","\n","public class SetParamsTest {\n","\n","    @Test\n","    public void checkEqualsIdenticalParams() {\n","        SetParams firstParam = getDefaultValue();\n","        SetParams secondParam = getDefaultValue();\n","        assertTrue(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeIdenticalParams() {\n","        SetParams firstParam = getDefaultValue();\n","        SetParams secondParam = getDefaultValue();\n","        assertEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsVariousParams() {\n","        SetParams firstParam = getDefaultValue();\n","        firstParam.nx();\n","        SetParams secondParam = getDefaultValue();\n","        secondParam.xx();\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeVariousParams() {\n","        SetParams firstParam = getDefaultValue();\n","        firstParam.nx();\n","        SetParams secondParam = getDefaultValue();\n","        secondParam.xx();\n","        assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsWithNull() {\n","        SetParams firstParam = getDefaultValue();\n","        SetParams secondParam = null;\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    private SetParams getDefaultValue() {\n","        return new SetParams();\n","    }\n","}\n"],"method_lines_dic":{"SetParams::::setParams()":[17,19],"SetParams::::nx()":[25,28],"SetParams::::xx()":[34,37],"SetParams::::expiration(redis.clients.jedis.Protocol.Keyword,java.lang.Long)":[39,43],"SetParams::::ex(long)":[50,52],"SetParams::::px(long)":[59,61],"SetParams::::exAt(long)":[68,70],"SetParams::::pxAt(long)":[77,79],"SetParams::::keepttl()":[86,88],"SetParams::::keepTtl()":[94,96],"SetParams::::addParams(redis.clients.jedis.CommandArguments)":[98,110],"SetParams::::equals(java.lang.Object)":[112,119],"SetParams::::hashCode()":[121,124]},"test_method_lines_dic":{"SetParamsTest::::checkEqualsIdenticalParams()":[9,14],"SetParamsTest::::checkHashCodeIdenticalParams()":[16,21],"SetParamsTest::::checkEqualsVariousParams()":[23,30],"SetParamsTest::::checkHashCodeVariousParams()":[32,39],"SetParamsTest::::checkEqualsWithNull()":[41,46],"SetParamsTest::::getDefaultValue()":[48,50]},"reverse_method_lines_dic":{"17":"SetParams::::setParams()","18":"SetParams::::setParams()","19":"SetParams::::setParams()","25":"SetParams::::nx()","26":"SetParams::::nx()","27":"SetParams::::nx()","28":"SetParams::::nx()","34":"SetParams::::xx()","35":"SetParams::::xx()","36":"SetParams::::xx()","37":"SetParams::::xx()","39":"SetParams::::expiration(redis.clients.jedis.Protocol.Keyword,java.lang.Long)","40":"SetParams::::expiration(redis.clients.jedis.Protocol.Keyword,java.lang.Long)","41":"SetParams::::expiration(redis.clients.jedis.Protocol.Keyword,java.lang.Long)","42":"SetParams::::expiration(redis.clients.jedis.Protocol.Keyword,java.lang.Long)","43":"SetParams::::expiration(redis.clients.jedis.Protocol.Keyword,java.lang.Long)","50":"SetParams::::ex(long)","51":"SetParams::::ex(long)","52":"SetParams::::ex(long)","59":"SetParams::::px(long)","60":"SetParams::::px(long)","61":"SetParams::::px(long)","68":"SetParams::::exAt(long)","69":"SetParams::::exAt(long)","70":"SetParams::::exAt(long)","77":"SetParams::::pxAt(long)","78":"SetParams::::pxAt(long)","79":"SetParams::::pxAt(long)","86":"SetParams::::keepttl()","87":"SetParams::::keepttl()","88":"SetParams::::keepttl()","94":"SetParams::::keepTtl()","95":"SetParams::::keepTtl()","96":"SetParams::::keepTtl()","98":"SetParams::::addParams(redis.clients.jedis.CommandArguments)","99":"SetParams::::addParams(redis.clients.jedis.CommandArguments)","100":"SetParams::::addParams(redis.clients.jedis.CommandArguments)","101":"SetParams::::addParams(redis.clients.jedis.CommandArguments)","102":"SetParams::::addParams(redis.clients.jedis.CommandArguments)","103":"SetParams::::addParams(redis.clients.jedis.CommandArguments)","104":"SetParams::::addParams(redis.clients.jedis.CommandArguments)","105":"SetParams::::addParams(redis.clients.jedis.CommandArguments)","106":"SetParams::::addParams(redis.clients.jedis.CommandArguments)","107":"SetParams::::addParams(redis.clients.jedis.CommandArguments)","108":"SetParams::::addParams(redis.clients.jedis.CommandArguments)","109":"SetParams::::addParams(redis.clients.jedis.CommandArguments)","110":"SetParams::::addParams(redis.clients.jedis.CommandArguments)","112":"SetParams::::equals(java.lang.Object)","113":"SetParams::::equals(java.lang.Object)","114":"SetParams::::equals(java.lang.Object)","115":"SetParams::::equals(java.lang.Object)","116":"SetParams::::equals(java.lang.Object)","117":"SetParams::::equals(java.lang.Object)","118":"SetParams::::equals(java.lang.Object)","119":"SetParams::::equals(java.lang.Object)","121":"SetParams::::hashCode()","122":"SetParams::::hashCode()","123":"SetParams::::hashCode()","124":"SetParams::::hashCode()"},"test_reverse_method_lines_dic":{"9":"SetParamsTest::::checkEqualsIdenticalParams()","10":"SetParamsTest::::checkEqualsIdenticalParams()","11":"SetParamsTest::::checkEqualsIdenticalParams()","12":"SetParamsTest::::checkEqualsIdenticalParams()","13":"SetParamsTest::::checkEqualsIdenticalParams()","14":"SetParamsTest::::checkEqualsIdenticalParams()","16":"SetParamsTest::::checkHashCodeIdenticalParams()","17":"SetParamsTest::::checkHashCodeIdenticalParams()","18":"SetParamsTest::::checkHashCodeIdenticalParams()","19":"SetParamsTest::::checkHashCodeIdenticalParams()","20":"SetParamsTest::::checkHashCodeIdenticalParams()","21":"SetParamsTest::::checkHashCodeIdenticalParams()","23":"SetParamsTest::::checkEqualsVariousParams()","24":"SetParamsTest::::checkEqualsVariousParams()","25":"SetParamsTest::::checkEqualsVariousParams()","26":"SetParamsTest::::checkEqualsVariousParams()","27":"SetParamsTest::::checkEqualsVariousParams()","28":"SetParamsTest::::checkEqualsVariousParams()","29":"SetParamsTest::::checkEqualsVariousParams()","30":"SetParamsTest::::checkEqualsVariousParams()","32":"SetParamsTest::::checkHashCodeVariousParams()","33":"SetParamsTest::::checkHashCodeVariousParams()","34":"SetParamsTest::::checkHashCodeVariousParams()","35":"SetParamsTest::::checkHashCodeVariousParams()","36":"SetParamsTest::::checkHashCodeVariousParams()","37":"SetParamsTest::::checkHashCodeVariousParams()","38":"SetParamsTest::::checkHashCodeVariousParams()","39":"SetParamsTest::::checkHashCodeVariousParams()","41":"SetParamsTest::::checkEqualsWithNull()","42":"SetParamsTest::::checkEqualsWithNull()","43":"SetParamsTest::::checkEqualsWithNull()","44":"SetParamsTest::::checkEqualsWithNull()","45":"SetParamsTest::::checkEqualsWithNull()","46":"SetParamsTest::::checkEqualsWithNull()","48":"SetParamsTest::::getDefaultValue()","49":"SetParamsTest::::getDefaultValue()","50":"SetParamsTest::::getDefaultValue()"},"tests":[{"test_lines":[9,14],"covered_lines":[14,15,114,115,116,117,118],"label":"SetParams::::equals(java.lang.Object)"},{"test_lines":[16,21],"covered_lines":[14,15,123],"label":"SetParams::::hashCode()"},{"test_lines":[23,30],"covered_lines":[14,15,26,27,35,36,114,115,116,117,118],"label":"SetParams::::equals(java.lang.Object)"},{"test_lines":[32,39],"covered_lines":[14,15,26,27,35,36,123],"label":"SetParams::::hashCode()"},{"test_lines":[41,46],"covered_lines":[14,15,114,115],"label":"SetParams::::equals(java.lang.Object)"}]},"/bernard/dataset_construction/prep/repos/jedis/src/main/java/redis/clients/jedis/params/ModuleLoadExParams.java":{"class_content":["package redis.clients.jedis.params;\n","\n","import java.util.ArrayList;\n","import java.util.List;\n","import java.util.Objects;\n","\n","import redis.clients.jedis.CommandArguments;\n","import redis.clients.jedis.Protocol.Keyword;\n","import redis.clients.jedis.util.KeyValue;\n","\n","public class ModuleLoadExParams implements IParams {\n","\n","  private final List<KeyValue<String, String>> configs = new ArrayList<>();\n","  private final List<String> args = new ArrayList<>();\n","\n","  public ModuleLoadExParams() {\n","  }\n","\n","  public ModuleLoadExParams moduleLoadexParams() {\n","    return new ModuleLoadExParams();\n","  }\n","\n","  public ModuleLoadExParams config(String name, String value) {\n","    this.configs.add(KeyValue.of(name, value));\n","    return this;\n","  }\n","\n","  public ModuleLoadExParams arg(String arg) {\n","    this.args.add(arg);\n","    return this;\n","  }\n","\n","  @Override\n","  public void addParams(CommandArguments args) {\n","\n","    this.configs.forEach(kv -> args.add(Keyword.CONFIG).add(kv.getKey()).add(kv.getValue()));\n","\n","    if (!this.args.isEmpty()) {\n","      args.add(Keyword.ARGS).addObjects(this.args);\n","    }\n","  }\n","\n","  @Override\n","  public boolean equals(Object o) {\n","    if (this == o) return true;\n","    if (o == null || getClass() != o.getClass()) return false;\n","    ModuleLoadExParams that = (ModuleLoadExParams) o;\n","    return Objects.equals(configs, that.configs) && Objects.equals(args, that.args);\n","  }\n","\n","  @Override\n","  public int hashCode() {\n","    return Objects.hash(configs, args);\n","  }\n","}\n"],"test_content":["package redis.clients.jedis.params;\n","\n","import org.junit.Test;\n","\n","import static org.junit.Assert.*;\n","\n","public class ModuleLoadExParamsTest {\n","\n","    @Test\n","    public void checkEqualsIdenticalParams() {\n","        ModuleLoadExParams firstParam = getDefaultValue();\n","        ModuleLoadExParams secondParam = getDefaultValue();\n","        assertTrue(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeIdenticalParams() {\n","        ModuleLoadExParams firstParam = getDefaultValue();\n","        ModuleLoadExParams secondParam = getDefaultValue();\n","        assertEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsVariousParams() {\n","        ModuleLoadExParams firstParam = getDefaultValue();\n","        firstParam.arg(\"123\");\n","        ModuleLoadExParams secondParam = getDefaultValue();\n","        secondParam.arg(\"234\");\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeVariousParams() {\n","        ModuleLoadExParams firstParam = getDefaultValue();\n","        firstParam.arg(\"123\");\n","        ModuleLoadExParams secondParam = getDefaultValue();\n","        secondParam.arg(\"234\");\n","        assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsWithNull() {\n","        ModuleLoadExParams firstParam = getDefaultValue();\n","        ModuleLoadExParams secondParam = null;\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    private ModuleLoadExParams getDefaultValue() {\n","        return new ModuleLoadExParams();\n","    }\n","}\n"],"method_lines_dic":{"ModuleLoadExParams::::moduleLoadexParams()":[19,21],"ModuleLoadExParams::::config(java.lang.String,java.lang.String)":[23,26],"ModuleLoadExParams::::arg(java.lang.String)":[28,31],"ModuleLoadExParams::::addParams(redis.clients.jedis.CommandArguments)":[33,41],"ModuleLoadExParams::::equals(java.lang.Object)":[43,49],"ModuleLoadExParams::::hashCode()":[51,54]},"test_method_lines_dic":{"ModuleLoadExParamsTest::::checkEqualsIdenticalParams()":[9,14],"ModuleLoadExParamsTest::::checkHashCodeIdenticalParams()":[16,21],"ModuleLoadExParamsTest::::checkEqualsVariousParams()":[23,30],"ModuleLoadExParamsTest::::checkHashCodeVariousParams()":[32,39],"ModuleLoadExParamsTest::::checkEqualsWithNull()":[41,46],"ModuleLoadExParamsTest::::getDefaultValue()":[48,50]},"reverse_method_lines_dic":{"19":"ModuleLoadExParams::::moduleLoadexParams()","20":"ModuleLoadExParams::::moduleLoadexParams()","21":"ModuleLoadExParams::::moduleLoadexParams()","23":"ModuleLoadExParams::::config(java.lang.String,java.lang.String)","24":"ModuleLoadExParams::::config(java.lang.String,java.lang.String)","25":"ModuleLoadExParams::::config(java.lang.String,java.lang.String)","26":"ModuleLoadExParams::::config(java.lang.String,java.lang.String)","28":"ModuleLoadExParams::::arg(java.lang.String)","29":"ModuleLoadExParams::::arg(java.lang.String)","30":"ModuleLoadExParams::::arg(java.lang.String)","31":"ModuleLoadExParams::::arg(java.lang.String)","33":"ModuleLoadExParams::::addParams(redis.clients.jedis.CommandArguments)","34":"ModuleLoadExParams::::addParams(redis.clients.jedis.CommandArguments)","35":"ModuleLoadExParams::::addParams(redis.clients.jedis.CommandArguments)","36":"ModuleLoadExParams::::addParams(redis.clients.jedis.CommandArguments)","37":"ModuleLoadExParams::::addParams(redis.clients.jedis.CommandArguments)","38":"ModuleLoadExParams::::addParams(redis.clients.jedis.CommandArguments)","39":"ModuleLoadExParams::::addParams(redis.clients.jedis.CommandArguments)","40":"ModuleLoadExParams::::addParams(redis.clients.jedis.CommandArguments)","41":"ModuleLoadExParams::::addParams(redis.clients.jedis.CommandArguments)","43":"ModuleLoadExParams::::equals(java.lang.Object)","44":"ModuleLoadExParams::::equals(java.lang.Object)","45":"ModuleLoadExParams::::equals(java.lang.Object)","46":"ModuleLoadExParams::::equals(java.lang.Object)","47":"ModuleLoadExParams::::equals(java.lang.Object)","48":"ModuleLoadExParams::::equals(java.lang.Object)","49":"ModuleLoadExParams::::equals(java.lang.Object)","51":"ModuleLoadExParams::::hashCode()","52":"ModuleLoadExParams::::hashCode()","53":"ModuleLoadExParams::::hashCode()","54":"ModuleLoadExParams::::hashCode()"},"test_reverse_method_lines_dic":{"9":"ModuleLoadExParamsTest::::checkEqualsIdenticalParams()","10":"ModuleLoadExParamsTest::::checkEqualsIdenticalParams()","11":"ModuleLoadExParamsTest::::checkEqualsIdenticalParams()","12":"ModuleLoadExParamsTest::::checkEqualsIdenticalParams()","13":"ModuleLoadExParamsTest::::checkEqualsIdenticalParams()","14":"ModuleLoadExParamsTest::::checkEqualsIdenticalParams()","16":"ModuleLoadExParamsTest::::checkHashCodeIdenticalParams()","17":"ModuleLoadExParamsTest::::checkHashCodeIdenticalParams()","18":"ModuleLoadExParamsTest::::checkHashCodeIdenticalParams()","19":"ModuleLoadExParamsTest::::checkHashCodeIdenticalParams()","20":"ModuleLoadExParamsTest::::checkHashCodeIdenticalParams()","21":"ModuleLoadExParamsTest::::checkHashCodeIdenticalParams()","23":"ModuleLoadExParamsTest::::checkEqualsVariousParams()","24":"ModuleLoadExParamsTest::::checkEqualsVariousParams()","25":"ModuleLoadExParamsTest::::checkEqualsVariousParams()","26":"ModuleLoadExParamsTest::::checkEqualsVariousParams()","27":"ModuleLoadExParamsTest::::checkEqualsVariousParams()","28":"ModuleLoadExParamsTest::::checkEqualsVariousParams()","29":"ModuleLoadExParamsTest::::checkEqualsVariousParams()","30":"ModuleLoadExParamsTest::::checkEqualsVariousParams()","32":"ModuleLoadExParamsTest::::checkHashCodeVariousParams()","33":"ModuleLoadExParamsTest::::checkHashCodeVariousParams()","34":"ModuleLoadExParamsTest::::checkHashCodeVariousParams()","35":"ModuleLoadExParamsTest::::checkHashCodeVariousParams()","36":"ModuleLoadExParamsTest::::checkHashCodeVariousParams()","37":"ModuleLoadExParamsTest::::checkHashCodeVariousParams()","38":"ModuleLoadExParamsTest::::checkHashCodeVariousParams()","39":"ModuleLoadExParamsTest::::checkHashCodeVariousParams()","41":"ModuleLoadExParamsTest::::checkEqualsWithNull()","42":"ModuleLoadExParamsTest::::checkEqualsWithNull()","43":"ModuleLoadExParamsTest::::checkEqualsWithNull()","44":"ModuleLoadExParamsTest::::checkEqualsWithNull()","45":"ModuleLoadExParamsTest::::checkEqualsWithNull()","46":"ModuleLoadExParamsTest::::checkEqualsWithNull()","48":"ModuleLoadExParamsTest::::getDefaultValue()","49":"ModuleLoadExParamsTest::::getDefaultValue()","50":"ModuleLoadExParamsTest::::getDefaultValue()"},"tests":[{"test_lines":[9,14],"covered_lines":[13,14,16,17,45,46,47,48],"label":"ModuleLoadExParams::::equals(java.lang.Object)"},{"test_lines":[16,21],"covered_lines":[13,14,16,17,53],"label":"ModuleLoadExParams::::hashCode()"},{"test_lines":[23,30],"covered_lines":[13,14,16,17,29,30,45,46,47,48],"label":"ModuleLoadExParams::::equals(java.lang.Object)"},{"test_lines":[32,39],"covered_lines":[13,14,16,17,29,30,53],"label":"ModuleLoadExParams::::hashCode()"},{"test_lines":[41,46],"covered_lines":[13,14,16,17,45,46],"label":"ModuleLoadExParams::::equals(java.lang.Object)"}]},"/bernard/dataset_construction/prep/repos/jedis/src/main/java/redis/clients/jedis/params/XReadParams.java":{"class_content":["package redis.clients.jedis.params;\n","\n","import redis.clients.jedis.CommandArguments;\n","import redis.clients.jedis.Protocol.Keyword;\n","\n","import java.util.Objects;\n","\n","public class XReadParams implements IParams {\n","\n","  private Integer count = null;\n","  private Integer block = null;\n","\n","  public static XReadParams xReadParams() {\n","    return new XReadParams();\n","  }\n","\n","  public XReadParams count(int count) {\n","    this.count = count;\n","    return this;\n","  }\n","\n","  public XReadParams block(int block) {\n","    this.block = block;\n","    return this;\n","  }\n","\n","  @Override\n","  public void addParams(CommandArguments args) {\n","    if (count != null) {\n","      args.add(Keyword.COUNT).add(count);\n","    }\n","    if (block != null) {\n","      args.add(Keyword.BLOCK).add(block).blocking();\n","    }\n","  }\n","\n","  @Override\n","  public boolean equals(Object o) {\n","    if (this == o) return true;\n","    if (o == null || getClass() != o.getClass()) return false;\n","    XReadParams that = (XReadParams) o;\n","    return Objects.equals(count, that.count) && Objects.equals(block, that.block);\n","  }\n","\n","  @Override\n","  public int hashCode() {\n","    return Objects.hash(count, block);\n","  }\n","}\n"],"test_content":["package redis.clients.jedis.params;\n","\n","import org.junit.Test;\n","\n","import static org.junit.Assert.*;\n","\n","public class XReadParamsTest {\n","\n","    @Test\n","    public void checkEqualsIdenticalParams() {\n","        XReadParams firstParam = getDefaultValue();\n","        XReadParams secondParam = getDefaultValue();\n","        assertTrue(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeIdenticalParams() {\n","        XReadParams firstParam = getDefaultValue();\n","        XReadParams secondParam = getDefaultValue();\n","        assertEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsVariousParams() {\n","        XReadParams firstParam = getDefaultValue();\n","        firstParam.block(14);\n","        XReadParams secondParam = getDefaultValue();\n","        secondParam.block(15);\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeVariousParams() {\n","        XReadParams firstParam = getDefaultValue();\n","        firstParam.block(14);\n","        XReadParams secondParam = getDefaultValue();\n","        secondParam.block(15);\n","        assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsWithNull() {\n","        XReadParams firstParam = getDefaultValue();\n","        XReadParams secondParam = null;\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    private XReadParams getDefaultValue() {\n","        return new XReadParams();\n","    }\n","}\n"],"method_lines_dic":{"XReadParams::::xReadParams()":[13,15],"XReadParams::::count(int)":[17,20],"XReadParams::::block(int)":[22,25],"XReadParams::::addParams(redis.clients.jedis.CommandArguments)":[27,35],"XReadParams::::equals(java.lang.Object)":[37,43],"XReadParams::::hashCode()":[45,48]},"test_method_lines_dic":{"XReadParamsTest::::checkEqualsIdenticalParams()":[9,14],"XReadParamsTest::::checkHashCodeIdenticalParams()":[16,21],"XReadParamsTest::::checkEqualsVariousParams()":[23,30],"XReadParamsTest::::checkHashCodeVariousParams()":[32,39],"XReadParamsTest::::checkEqualsWithNull()":[41,46],"XReadParamsTest::::getDefaultValue()":[48,50]},"reverse_method_lines_dic":{"13":"XReadParams::::xReadParams()","14":"XReadParams::::xReadParams()","15":"XReadParams::::xReadParams()","17":"XReadParams::::count(int)","18":"XReadParams::::count(int)","19":"XReadParams::::count(int)","20":"XReadParams::::count(int)","22":"XReadParams::::block(int)","23":"XReadParams::::block(int)","24":"XReadParams::::block(int)","25":"XReadParams::::block(int)","27":"XReadParams::::addParams(redis.clients.jedis.CommandArguments)","28":"XReadParams::::addParams(redis.clients.jedis.CommandArguments)","29":"XReadParams::::addParams(redis.clients.jedis.CommandArguments)","30":"XReadParams::::addParams(redis.clients.jedis.CommandArguments)","31":"XReadParams::::addParams(redis.clients.jedis.CommandArguments)","32":"XReadParams::::addParams(redis.clients.jedis.CommandArguments)","33":"XReadParams::::addParams(redis.clients.jedis.CommandArguments)","34":"XReadParams::::addParams(redis.clients.jedis.CommandArguments)","35":"XReadParams::::addParams(redis.clients.jedis.CommandArguments)","37":"XReadParams::::equals(java.lang.Object)","38":"XReadParams::::equals(java.lang.Object)","39":"XReadParams::::equals(java.lang.Object)","40":"XReadParams::::equals(java.lang.Object)","41":"XReadParams::::equals(java.lang.Object)","42":"XReadParams::::equals(java.lang.Object)","43":"XReadParams::::equals(java.lang.Object)","45":"XReadParams::::hashCode()","46":"XReadParams::::hashCode()","47":"XReadParams::::hashCode()","48":"XReadParams::::hashCode()"},"test_reverse_method_lines_dic":{"9":"XReadParamsTest::::checkEqualsIdenticalParams()","10":"XReadParamsTest::::checkEqualsIdenticalParams()","11":"XReadParamsTest::::checkEqualsIdenticalParams()","12":"XReadParamsTest::::checkEqualsIdenticalParams()","13":"XReadParamsTest::::checkEqualsIdenticalParams()","14":"XReadParamsTest::::checkEqualsIdenticalParams()","16":"XReadParamsTest::::checkHashCodeIdenticalParams()","17":"XReadParamsTest::::checkHashCodeIdenticalParams()","18":"XReadParamsTest::::checkHashCodeIdenticalParams()","19":"XReadParamsTest::::checkHashCodeIdenticalParams()","20":"XReadParamsTest::::checkHashCodeIdenticalParams()","21":"XReadParamsTest::::checkHashCodeIdenticalParams()","23":"XReadParamsTest::::checkEqualsVariousParams()","24":"XReadParamsTest::::checkEqualsVariousParams()","25":"XReadParamsTest::::checkEqualsVariousParams()","26":"XReadParamsTest::::checkEqualsVariousParams()","27":"XReadParamsTest::::checkEqualsVariousParams()","28":"XReadParamsTest::::checkEqualsVariousParams()","29":"XReadParamsTest::::checkEqualsVariousParams()","30":"XReadParamsTest::::checkEqualsVariousParams()","32":"XReadParamsTest::::checkHashCodeVariousParams()","33":"XReadParamsTest::::checkHashCodeVariousParams()","34":"XReadParamsTest::::checkHashCodeVariousParams()","35":"XReadParamsTest::::checkHashCodeVariousParams()","36":"XReadParamsTest::::checkHashCodeVariousParams()","37":"XReadParamsTest::::checkHashCodeVariousParams()","38":"XReadParamsTest::::checkHashCodeVariousParams()","39":"XReadParamsTest::::checkHashCodeVariousParams()","41":"XReadParamsTest::::checkEqualsWithNull()","42":"XReadParamsTest::::checkEqualsWithNull()","43":"XReadParamsTest::::checkEqualsWithNull()","44":"XReadParamsTest::::checkEqualsWithNull()","45":"XReadParamsTest::::checkEqualsWithNull()","46":"XReadParamsTest::::checkEqualsWithNull()","48":"XReadParamsTest::::getDefaultValue()","49":"XReadParamsTest::::getDefaultValue()","50":"XReadParamsTest::::getDefaultValue()"},"tests":[{"test_lines":[9,14],"covered_lines":[8,10,11,39,40,41,42],"label":"XReadParams::::equals(java.lang.Object)"},{"test_lines":[16,21],"covered_lines":[8,10,11,47],"label":"XReadParams::::hashCode()"},{"test_lines":[23,30],"covered_lines":[8,10,11,23,24,39,40,41,42],"label":"XReadParams::::equals(java.lang.Object)"},{"test_lines":[32,39],"covered_lines":[8,10,11,23,24,47],"label":"XReadParams::::hashCode()"},{"test_lines":[41,46],"covered_lines":[8,10,11,39,40],"label":"XReadParams::::equals(java.lang.Object)"}]},"/bernard/dataset_construction/prep/repos/jedis/src/main/java/redis/clients/jedis/params/GetExParams.java":{"class_content":["package redis.clients.jedis.params;\n","\n","import redis.clients.jedis.CommandArguments;\n","import redis.clients.jedis.Protocol.Keyword;\n","\n","import java.util.Objects;\n","\n","public class GetExParams implements IParams {\n","\n","  private Keyword expiration;\n","  private Long expirationValue;\n","\n","  private boolean persist;\n","\n","  public GetExParams() {\n","  }\n","\n","  public static GetExParams getExParams() {\n","    return new GetExParams();\n","  }\n","\n","  private GetExParams expiration(Keyword type, Long value) {\n","    this.expiration = type;\n","    this.expirationValue = value;\n","    return this;\n","  }\n","\n","  /**\n","   * Set the specified expire time, in seconds.\n","   * @return GetExParams\n","   */\n","  public GetExParams ex(long secondsToExpire) {\n","    return expiration(Keyword.EX, secondsToExpire);\n","  }\n","\n","  /**\n","   * Set the specified expire time, in milliseconds.\n","   * @return GetExParams\n","   */\n","  public GetExParams px(long millisecondsToExpire) {\n","    return expiration(Keyword.PX, millisecondsToExpire);\n","  }\n","\n","  /**\n","   * Set the specified Unix time at which the key will expire, in seconds.\n","   * @param seconds\n","   * @return GetExParams\n","   */\n","  public GetExParams exAt(long seconds) {\n","    return expiration(Keyword.EXAT, seconds);\n","  }\n","\n","  /**\n","   * Set the specified Unix time at which the key will expire, in milliseconds.\n","   * @param milliseconds\n","   * @return GetExParams\n","   */\n","  public GetExParams pxAt(long milliseconds) {\n","    return expiration(Keyword.PXAT, milliseconds);\n","  }\n","\n","  /**\n","   * Remove the time to live associated with the key.\n","   * @return GetExParams\n","   */\n","  public GetExParams persist() {\n","    return expiration(Keyword.PERSIST, null);\n","  }\n","\n","  @Override\n","  public void addParams(CommandArguments args) {\n","    if (expiration != null) {\n","      args.add(expiration);\n","      if (expirationValue != null) {\n","        args.add(expirationValue);\n","      }\n","    }\n","  }\n","\n","  @Override\n","  public boolean equals(Object o) {\n","    if (this == o) return true;\n","    if (o == null || getClass() != o.getClass()) return false;\n","    GetExParams that = (GetExParams) o;\n","    return persist == that.persist && expiration == that.expiration && Objects.equals(expirationValue, that.expirationValue);\n","  }\n","\n","  @Override\n","  public int hashCode() {\n","    return Objects.hash(expiration, expirationValue, persist);\n","  }\n","}\n"],"test_content":["package redis.clients.jedis.params;\n","\n","import org.junit.Test;\n","\n","import static org.junit.Assert.*;\n","\n","public class GetExParamsTest {\n","\n","    @Test\n","    public void checkEqualsIdenticalParams() {\n","        GetExParams firstParam = getDefaultValue();\n","        GetExParams secondParam = getDefaultValue();\n","        assertTrue(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeIdenticalParams() {\n","        GetExParams firstParam = getDefaultValue();\n","        GetExParams secondParam = getDefaultValue();\n","        assertEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsVariousParams() {\n","        GetExParams firstParam = getDefaultValue();\n","        firstParam.ex(15);\n","        GetExParams secondParam = getDefaultValue();\n","        secondParam.px(20);\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeVariousParams() {\n","        GetExParams firstParam = getDefaultValue();\n","        firstParam.ex(15);\n","        GetExParams secondParam = getDefaultValue();\n","        secondParam.px(20);\n","        assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsWithNull() {\n","        GetExParams firstParam = getDefaultValue();\n","        GetExParams secondParam = null;\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    private GetExParams getDefaultValue() {\n","        return new GetExParams();\n","    }\n","}\n"],"method_lines_dic":{"GetExParams::::getExParams()":[18,20],"GetExParams::::expiration(redis.clients.jedis.Protocol.Keyword,java.lang.Long)":[22,26],"GetExParams::::ex(long)":[32,34],"GetExParams::::px(long)":[40,42],"GetExParams::::exAt(long)":[49,51],"GetExParams::::pxAt(long)":[58,60],"GetExParams::::persist()":[66,68],"GetExParams::::addParams(redis.clients.jedis.CommandArguments)":[70,78],"GetExParams::::equals(java.lang.Object)":[80,86],"GetExParams::::hashCode()":[88,91]},"test_method_lines_dic":{"GetExParamsTest::::checkEqualsIdenticalParams()":[9,14],"GetExParamsTest::::checkHashCodeIdenticalParams()":[16,21],"GetExParamsTest::::checkEqualsVariousParams()":[23,30],"GetExParamsTest::::checkHashCodeVariousParams()":[32,39],"GetExParamsTest::::checkEqualsWithNull()":[41,46],"GetExParamsTest::::getDefaultValue()":[48,50]},"reverse_method_lines_dic":{"18":"GetExParams::::getExParams()","19":"GetExParams::::getExParams()","20":"GetExParams::::getExParams()","22":"GetExParams::::expiration(redis.clients.jedis.Protocol.Keyword,java.lang.Long)","23":"GetExParams::::expiration(redis.clients.jedis.Protocol.Keyword,java.lang.Long)","24":"GetExParams::::expiration(redis.clients.jedis.Protocol.Keyword,java.lang.Long)","25":"GetExParams::::expiration(redis.clients.jedis.Protocol.Keyword,java.lang.Long)","26":"GetExParams::::expiration(redis.clients.jedis.Protocol.Keyword,java.lang.Long)","32":"GetExParams::::ex(long)","33":"GetExParams::::ex(long)","34":"GetExParams::::ex(long)","40":"GetExParams::::px(long)","41":"GetExParams::::px(long)","42":"GetExParams::::px(long)","49":"GetExParams::::exAt(long)","50":"GetExParams::::exAt(long)","51":"GetExParams::::exAt(long)","58":"GetExParams::::pxAt(long)","59":"GetExParams::::pxAt(long)","60":"GetExParams::::pxAt(long)","66":"GetExParams::::persist()","67":"GetExParams::::persist()","68":"GetExParams::::persist()","70":"GetExParams::::addParams(redis.clients.jedis.CommandArguments)","71":"GetExParams::::addParams(redis.clients.jedis.CommandArguments)","72":"GetExParams::::addParams(redis.clients.jedis.CommandArguments)","73":"GetExParams::::addParams(redis.clients.jedis.CommandArguments)","74":"GetExParams::::addParams(redis.clients.jedis.CommandArguments)","75":"GetExParams::::addParams(redis.clients.jedis.CommandArguments)","76":"GetExParams::::addParams(redis.clients.jedis.CommandArguments)","77":"GetExParams::::addParams(redis.clients.jedis.CommandArguments)","78":"GetExParams::::addParams(redis.clients.jedis.CommandArguments)","80":"GetExParams::::equals(java.lang.Object)","81":"GetExParams::::equals(java.lang.Object)","82":"GetExParams::::equals(java.lang.Object)","83":"GetExParams::::equals(java.lang.Object)","84":"GetExParams::::equals(java.lang.Object)","85":"GetExParams::::equals(java.lang.Object)","86":"GetExParams::::equals(java.lang.Object)","88":"GetExParams::::hashCode()","89":"GetExParams::::hashCode()","90":"GetExParams::::hashCode()","91":"GetExParams::::hashCode()"},"test_reverse_method_lines_dic":{"9":"GetExParamsTest::::checkEqualsIdenticalParams()","10":"GetExParamsTest::::checkEqualsIdenticalParams()","11":"GetExParamsTest::::checkEqualsIdenticalParams()","12":"GetExParamsTest::::checkEqualsIdenticalParams()","13":"GetExParamsTest::::checkEqualsIdenticalParams()","14":"GetExParamsTest::::checkEqualsIdenticalParams()","16":"GetExParamsTest::::checkHashCodeIdenticalParams()","17":"GetExParamsTest::::checkHashCodeIdenticalParams()","18":"GetExParamsTest::::checkHashCodeIdenticalParams()","19":"GetExParamsTest::::checkHashCodeIdenticalParams()","20":"GetExParamsTest::::checkHashCodeIdenticalParams()","21":"GetExParamsTest::::checkHashCodeIdenticalParams()","23":"GetExParamsTest::::checkEqualsVariousParams()","24":"GetExParamsTest::::checkEqualsVariousParams()","25":"GetExParamsTest::::checkEqualsVariousParams()","26":"GetExParamsTest::::checkEqualsVariousParams()","27":"GetExParamsTest::::checkEqualsVariousParams()","28":"GetExParamsTest::::checkEqualsVariousParams()","29":"GetExParamsTest::::checkEqualsVariousParams()","30":"GetExParamsTest::::checkEqualsVariousParams()","32":"GetExParamsTest::::checkHashCodeVariousParams()","33":"GetExParamsTest::::checkHashCodeVariousParams()","34":"GetExParamsTest::::checkHashCodeVariousParams()","35":"GetExParamsTest::::checkHashCodeVariousParams()","36":"GetExParamsTest::::checkHashCodeVariousParams()","37":"GetExParamsTest::::checkHashCodeVariousParams()","38":"GetExParamsTest::::checkHashCodeVariousParams()","39":"GetExParamsTest::::checkHashCodeVariousParams()","41":"GetExParamsTest::::checkEqualsWithNull()","42":"GetExParamsTest::::checkEqualsWithNull()","43":"GetExParamsTest::::checkEqualsWithNull()","44":"GetExParamsTest::::checkEqualsWithNull()","45":"GetExParamsTest::::checkEqualsWithNull()","46":"GetExParamsTest::::checkEqualsWithNull()","48":"GetExParamsTest::::getDefaultValue()","49":"GetExParamsTest::::getDefaultValue()","50":"GetExParamsTest::::getDefaultValue()"},"tests":[{"test_lines":[9,14],"covered_lines":[15,16,82,83,84,85],"label":"GetExParams::::equals(java.lang.Object)"},{"test_lines":[16,21],"covered_lines":[15,16,90],"label":"GetExParams::::hashCode()"},{"test_lines":[23,30],"covered_lines":[15,16,23,24,25,33,41,82,83,84,85],"label":"GetExParams::::equals(java.lang.Object)"},{"test_lines":[32,39],"covered_lines":[15,16,23,24,25,33,41,90],"label":"GetExParams::::hashCode()"},{"test_lines":[41,46],"covered_lines":[15,16,82,83],"label":"GetExParams::::equals(java.lang.Object)"}]},"/bernard/dataset_construction/prep/repos/jedis/src/main/java/redis/clients/jedis/params/XPendingParams.java":{"class_content":["package redis.clients.jedis.params;\n","\n","import static redis.clients.jedis.args.RawableFactory.from;\n","\n","import redis.clients.jedis.CommandArguments;\n","import redis.clients.jedis.Protocol.Keyword;\n","import redis.clients.jedis.StreamEntryID;\n","import redis.clients.jedis.args.Rawable;\n","\n","import java.util.Objects;\n","\n","public class XPendingParams implements IParams {\n","\n","  private Long idle;\n","  private Rawable start;\n","  private Rawable end;\n","  private Integer count;\n","  private Rawable consumer;\n","\n","  public XPendingParams(StreamEntryID start, StreamEntryID end, int count) {\n","    this(start.toString(), end.toString(), count);\n","  }\n","\n","  public XPendingParams(String start, String end, int count) {\n","    this(from(start), from(end), count);\n","  }\n","\n","  public XPendingParams(byte[] start, byte[] end, int count) {\n","    this(from(start), from(end), count);\n","  }\n","\n","  private XPendingParams(Rawable start, Rawable end, Integer count) {\n","    this.start = start;\n","    this.end = end;\n","    this.count = count;\n","  }\n","\n","  public XPendingParams() {\n","    this.start = null;\n","    this.end = null;\n","    this.count = null;\n","  }\n","\n","  public static XPendingParams xPendingParams(StreamEntryID start, StreamEntryID end, int count) {\n","    return new XPendingParams(start, end, count);\n","  }\n","\n","  public static XPendingParams xPendingParams(String start, String end, int count) {\n","    return new XPendingParams(start, end, count);\n","  }\n","\n","  public static XPendingParams xPendingParams(byte[] start, byte[] end, int count) {\n","    return new XPendingParams(start, end, count);\n","  }\n","\n","  public static XPendingParams xPendingParams() {\n","    return new XPendingParams();\n","  }\n","\n","  public XPendingParams idle(long idle) {\n","    this.idle = idle;\n","    return this;\n","  }\n","\n","  public XPendingParams start(StreamEntryID start) {\n","    this.start = from(start.toString());\n","    return this;\n","  }\n","\n","  public XPendingParams end(StreamEntryID end) {\n","    this.end = from(end.toString());\n","    return this;\n","  }\n","\n","  public XPendingParams count(int count) {\n","    this.count = count;\n","    return this;\n","  }\n","\n","  public XPendingParams consumer(String consumer) {\n","    this.consumer = from(consumer);\n","    return this;\n","  }\n","\n","  public XPendingParams consumer(byte[] consumer) {\n","    this.consumer = from(consumer);\n","    return this;\n","  }\n","\n","  @Override\n","  public void addParams(CommandArguments args) {\n","    if (count == null) {\n","      throw new IllegalArgumentException(\"start, end and count must be set.\");\n","    }\n","    if (start == null) start = from(\"-\");\n","    if (end == null) end = from(\"+\");\n","\n","    if (idle != null) {\n","      args.add(Keyword.IDLE).add(idle);\n","    }\n","\n","    args.add(start).add(end).add(count);\n","\n","    if (consumer != null) {\n","      args.add(consumer);\n","    }\n","  }\n","\n","  @Override\n","  public boolean equals(Object o) {\n","    if (this == o) return true;\n","    if (o == null || getClass() != o.getClass()) return false;\n","    XPendingParams that = (XPendingParams) o;\n","    return Objects.equals(idle, that.idle) && Objects.equals(start, that.start) && Objects.equals(end, that.end) && Objects.equals(count, that.count) && Objects.equals(consumer, that.consumer);\n","  }\n","\n","  @Override\n","  public int hashCode() {\n","    return Objects.hash(idle, start, end, count, consumer);\n","  }\n","}\n"],"test_content":["package redis.clients.jedis.params;\n","\n","import org.junit.Test;\n","import redis.clients.jedis.StreamEntryID;\n","\n","import static org.junit.Assert.*;\n","\n","public class XPendingParamsTest {\n","\n","    @Test\n","    public void checkEqualsIdenticalParams() {\n","        XPendingParams firstParam = getDefaultValue();\n","        XPendingParams secondParam = getDefaultValue();\n","        assertTrue(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeIdenticalParams() {\n","        XPendingParams firstParam = getDefaultValue();\n","        XPendingParams secondParam = getDefaultValue();\n","        assertEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsVariousParams() {\n","        XPendingParams firstParam = getDefaultValue();\n","        firstParam.start(StreamEntryID.XGROUP_LAST_ENTRY);\n","        XPendingParams secondParam = getDefaultValue();\n","        secondParam.start(StreamEntryID.NEW_ENTRY);\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeVariousParams() {\n","        XPendingParams firstParam = getDefaultValue();\n","        firstParam.start(StreamEntryID.XGROUP_LAST_ENTRY);\n","        XPendingParams secondParam = getDefaultValue();\n","        secondParam.start(StreamEntryID.NEW_ENTRY);\n","        assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsWithNull() {\n","        XPendingParams firstParam = getDefaultValue();\n","        XPendingParams secondParam = null;\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    private XPendingParams getDefaultValue() {\n","        return new XPendingParams();\n","    }\n","}\n"],"method_lines_dic":{"XPendingParams::::xPendingParams(redis.clients.jedis.StreamEntryID,redis.clients.jedis.StreamEntryID,int)":[44,46],"XPendingParams::::xPendingParams(java.lang.String,java.lang.String,int)":[48,50],"XPendingParams::::xPendingParams(byte[],byte[],int)":[52,54],"XPendingParams::::xPendingParams()":[56,58],"XPendingParams::::idle(long)":[60,63],"XPendingParams::::start(redis.clients.jedis.StreamEntryID)":[65,68],"XPendingParams::::end(redis.clients.jedis.StreamEntryID)":[70,73],"XPendingParams::::count(int)":[75,78],"XPendingParams::::consumer(java.lang.String)":[80,83],"XPendingParams::::consumer(byte[])":[85,88],"XPendingParams::::addParams(redis.clients.jedis.CommandArguments)":[90,107],"XPendingParams::::equals(java.lang.Object)":[109,115],"XPendingParams::::hashCode()":[117,120]},"test_method_lines_dic":{"XPendingParamsTest::::checkEqualsIdenticalParams()":[10,15],"XPendingParamsTest::::checkHashCodeIdenticalParams()":[17,22],"XPendingParamsTest::::checkEqualsVariousParams()":[24,31],"XPendingParamsTest::::checkHashCodeVariousParams()":[33,40],"XPendingParamsTest::::checkEqualsWithNull()":[42,47],"XPendingParamsTest::::getDefaultValue()":[49,51]},"reverse_method_lines_dic":{"44":"XPendingParams::::xPendingParams(redis.clients.jedis.StreamEntryID,redis.clients.jedis.StreamEntryID,int)","45":"XPendingParams::::xPendingParams(redis.clients.jedis.StreamEntryID,redis.clients.jedis.StreamEntryID,int)","46":"XPendingParams::::xPendingParams(redis.clients.jedis.StreamEntryID,redis.clients.jedis.StreamEntryID,int)","48":"XPendingParams::::xPendingParams(java.lang.String,java.lang.String,int)","49":"XPendingParams::::xPendingParams(java.lang.String,java.lang.String,int)","50":"XPendingParams::::xPendingParams(java.lang.String,java.lang.String,int)","52":"XPendingParams::::xPendingParams(byte[],byte[],int)","53":"XPendingParams::::xPendingParams(byte[],byte[],int)","54":"XPendingParams::::xPendingParams(byte[],byte[],int)","56":"XPendingParams::::xPendingParams()","57":"XPendingParams::::xPendingParams()","58":"XPendingParams::::xPendingParams()","60":"XPendingParams::::idle(long)","61":"XPendingParams::::idle(long)","62":"XPendingParams::::idle(long)","63":"XPendingParams::::idle(long)","65":"XPendingParams::::start(redis.clients.jedis.StreamEntryID)","66":"XPendingParams::::start(redis.clients.jedis.StreamEntryID)","67":"XPendingParams::::start(redis.clients.jedis.StreamEntryID)","68":"XPendingParams::::start(redis.clients.jedis.StreamEntryID)","70":"XPendingParams::::end(redis.clients.jedis.StreamEntryID)","71":"XPendingParams::::end(redis.clients.jedis.StreamEntryID)","72":"XPendingParams::::end(redis.clients.jedis.StreamEntryID)","73":"XPendingParams::::end(redis.clients.jedis.StreamEntryID)","75":"XPendingParams::::count(int)","76":"XPendingParams::::count(int)","77":"XPendingParams::::count(int)","78":"XPendingParams::::count(int)","80":"XPendingParams::::consumer(java.lang.String)","81":"XPendingParams::::consumer(java.lang.String)","82":"XPendingParams::::consumer(java.lang.String)","83":"XPendingParams::::consumer(java.lang.String)","85":"XPendingParams::::consumer(byte[])","86":"XPendingParams::::consumer(byte[])","87":"XPendingParams::::consumer(byte[])","88":"XPendingParams::::consumer(byte[])","90":"XPendingParams::::addParams(redis.clients.jedis.CommandArguments)","91":"XPendingParams::::addParams(redis.clients.jedis.CommandArguments)","92":"XPendingParams::::addParams(redis.clients.jedis.CommandArguments)","93":"XPendingParams::::addParams(redis.clients.jedis.CommandArguments)","94":"XPendingParams::::addParams(redis.clients.jedis.CommandArguments)","95":"XPendingParams::::addParams(redis.clients.jedis.CommandArguments)","96":"XPendingParams::::addParams(redis.clients.jedis.CommandArguments)","97":"XPendingParams::::addParams(redis.clients.jedis.CommandArguments)","98":"XPendingParams::::addParams(redis.clients.jedis.CommandArguments)","99":"XPendingParams::::addParams(redis.clients.jedis.CommandArguments)","100":"XPendingParams::::addParams(redis.clients.jedis.CommandArguments)","101":"XPendingParams::::addParams(redis.clients.jedis.CommandArguments)","102":"XPendingParams::::addParams(redis.clients.jedis.CommandArguments)","103":"XPendingParams::::addParams(redis.clients.jedis.CommandArguments)","104":"XPendingParams::::addParams(redis.clients.jedis.CommandArguments)","105":"XPendingParams::::addParams(redis.clients.jedis.CommandArguments)","106":"XPendingParams::::addParams(redis.clients.jedis.CommandArguments)","107":"XPendingParams::::addParams(redis.clients.jedis.CommandArguments)","109":"XPendingParams::::equals(java.lang.Object)","110":"XPendingParams::::equals(java.lang.Object)","111":"XPendingParams::::equals(java.lang.Object)","112":"XPendingParams::::equals(java.lang.Object)","113":"XPendingParams::::equals(java.lang.Object)","114":"XPendingParams::::equals(java.lang.Object)","115":"XPendingParams::::equals(java.lang.Object)","117":"XPendingParams::::hashCode()","118":"XPendingParams::::hashCode()","119":"XPendingParams::::hashCode()","120":"XPendingParams::::hashCode()"},"test_reverse_method_lines_dic":{"10":"XPendingParamsTest::::checkEqualsIdenticalParams()","11":"XPendingParamsTest::::checkEqualsIdenticalParams()","12":"XPendingParamsTest::::checkEqualsIdenticalParams()","13":"XPendingParamsTest::::checkEqualsIdenticalParams()","14":"XPendingParamsTest::::checkEqualsIdenticalParams()","15":"XPendingParamsTest::::checkEqualsIdenticalParams()","17":"XPendingParamsTest::::checkHashCodeIdenticalParams()","18":"XPendingParamsTest::::checkHashCodeIdenticalParams()","19":"XPendingParamsTest::::checkHashCodeIdenticalParams()","20":"XPendingParamsTest::::checkHashCodeIdenticalParams()","21":"XPendingParamsTest::::checkHashCodeIdenticalParams()","22":"XPendingParamsTest::::checkHashCodeIdenticalParams()","24":"XPendingParamsTest::::checkEqualsVariousParams()","25":"XPendingParamsTest::::checkEqualsVariousParams()","26":"XPendingParamsTest::::checkEqualsVariousParams()","27":"XPendingParamsTest::::checkEqualsVariousParams()","28":"XPendingParamsTest::::checkEqualsVariousParams()","29":"XPendingParamsTest::::checkEqualsVariousParams()","30":"XPendingParamsTest::::checkEqualsVariousParams()","31":"XPendingParamsTest::::checkEqualsVariousParams()","33":"XPendingParamsTest::::checkHashCodeVariousParams()","34":"XPendingParamsTest::::checkHashCodeVariousParams()","35":"XPendingParamsTest::::checkHashCodeVariousParams()","36":"XPendingParamsTest::::checkHashCodeVariousParams()","37":"XPendingParamsTest::::checkHashCodeVariousParams()","38":"XPendingParamsTest::::checkHashCodeVariousParams()","39":"XPendingParamsTest::::checkHashCodeVariousParams()","40":"XPendingParamsTest::::checkHashCodeVariousParams()","42":"XPendingParamsTest::::checkEqualsWithNull()","43":"XPendingParamsTest::::checkEqualsWithNull()","44":"XPendingParamsTest::::checkEqualsWithNull()","45":"XPendingParamsTest::::checkEqualsWithNull()","46":"XPendingParamsTest::::checkEqualsWithNull()","47":"XPendingParamsTest::::checkEqualsWithNull()","49":"XPendingParamsTest::::getDefaultValue()","50":"XPendingParamsTest::::getDefaultValue()","51":"XPendingParamsTest::::getDefaultValue()"},"tests":[{"test_lines":[10,15],"covered_lines":[38,39,40,41,42,111,112,113,114],"label":"XPendingParams::::equals(java.lang.Object)"},{"test_lines":[17,22],"covered_lines":[38,39,40,41,42,119],"label":"XPendingParams::::hashCode()"},{"test_lines":[24,31],"covered_lines":[38,39,40,41,42,66,67,111,112,113,114],"label":"XPendingParams::::equals(java.lang.Object)"},{"test_lines":[33,40],"covered_lines":[38,39,40,41,42,66,67,119],"label":"XPendingParams::::hashCode()"},{"test_lines":[42,47],"covered_lines":[38,39,40,41,42,111,112],"label":"XPendingParams::::equals(java.lang.Object)"}]},"/bernard/dataset_construction/prep/repos/jedis/src/main/java/redis/clients/jedis/params/ZAddParams.java":{"class_content":["package redis.clients.jedis.params;\n","\n","import redis.clients.jedis.CommandArguments;\n","import redis.clients.jedis.Protocol.Keyword;\n","\n","import java.util.Objects;\n","\n","public class ZAddParams implements IParams {\n","\n","  private Keyword existence;\n","  private Keyword comparison;\n","  private boolean change;\n","\n","  public ZAddParams() {\n","  }\n","\n","  public static ZAddParams zAddParams() {\n","    return new ZAddParams();\n","  }\n","\n","  /**\n","   * Only set the key if it does not already exist.\n","   * @return ZAddParams\n","   */\n","  public ZAddParams nx() {\n","    this.existence = Keyword.NX;\n","    return this;\n","  }\n","\n","  /**\n","   * Only set the key if it already exists.\n","   * @return ZAddParams\n","   */\n","  public ZAddParams xx() {\n","    this.existence = Keyword.XX;\n","    return this;\n","  }\n","\n","  /**\n","   * Only update existing elements if the new score is greater than the current score.\n","   * @return ZAddParams\n","   */\n","  public ZAddParams gt() {\n","    this.comparison = Keyword.GT;\n","    return this;\n","  }\n","\n","  /**\n","   * Only update existing elements if the new score is less than the current score.\n","   * @return ZAddParams\n","   */\n","  public ZAddParams lt() {\n","    this.comparison = Keyword.LT;\n","    return this;\n","  }\n","\n","  /**\n","   * Modify the return value from the number of new elements added to the total number of elements\n","   * changed\n","   * @return ZAddParams\n","   */\n","  public ZAddParams ch() {\n","    this.change = true;\n","    return this;\n","  }\n","\n","  @Override\n","  public void addParams(CommandArguments args) {\n","    if (existence != null) {\n","      args.add(existence);\n","    }\n","    if (comparison != null) {\n","      args.add(comparison);\n","    }\n","    if (change) {\n","      args.add(Keyword.CH);\n","    }\n","  }\n","\n","  @Override\n","  public boolean equals(Object o) {\n","    if (this == o) return true;\n","    if (o == null || getClass() != o.getClass()) return false;\n","    ZAddParams that = (ZAddParams) o;\n","    return change == that.change && existence == that.existence && comparison == that.comparison;\n","  }\n","\n","  @Override\n","  public int hashCode() {\n","    return Objects.hash(existence, comparison, change);\n","  }\n","}\n"],"test_content":["package redis.clients.jedis.params;\n","\n","import org.junit.Test;\n","\n","import static org.junit.Assert.*;\n","\n","public class ZAddParamsTest {\n","\n","    @Test\n","    public void checkEqualsIdenticalParams() {\n","        ZAddParams firstParam = getDefaultValue();\n","        ZAddParams secondParam = getDefaultValue();\n","        assertTrue(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeIdenticalParams() {\n","        ZAddParams firstParam = getDefaultValue();\n","        ZAddParams secondParam = getDefaultValue();\n","        assertEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsVariousParams() {\n","        ZAddParams firstParam = getDefaultValue();\n","        firstParam.nx();\n","        ZAddParams secondParam = getDefaultValue();\n","        secondParam.xx();\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeVariousParams() {\n","        ZAddParams firstParam = getDefaultValue();\n","        firstParam.nx();\n","        ZAddParams secondParam = getDefaultValue();\n","        secondParam.xx();\n","        assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsWithNull() {\n","        ZAddParams firstParam = getDefaultValue();\n","        ZAddParams secondParam = null;\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    private ZAddParams getDefaultValue() {\n","        return new ZAddParams();\n","    }\n","}\n"],"method_lines_dic":{"ZAddParams::::zAddParams()":[17,19],"ZAddParams::::nx()":[25,28],"ZAddParams::::xx()":[34,37],"ZAddParams::::gt()":[43,46],"ZAddParams::::lt()":[52,55],"ZAddParams::::ch()":[62,65],"ZAddParams::::addParams(redis.clients.jedis.CommandArguments)":[67,78],"ZAddParams::::equals(java.lang.Object)":[80,86],"ZAddParams::::hashCode()":[88,91]},"test_method_lines_dic":{"ZAddParamsTest::::checkEqualsIdenticalParams()":[9,14],"ZAddParamsTest::::checkHashCodeIdenticalParams()":[16,21],"ZAddParamsTest::::checkEqualsVariousParams()":[23,30],"ZAddParamsTest::::checkHashCodeVariousParams()":[32,39],"ZAddParamsTest::::checkEqualsWithNull()":[41,46],"ZAddParamsTest::::getDefaultValue()":[48,50]},"reverse_method_lines_dic":{"17":"ZAddParams::::zAddParams()","18":"ZAddParams::::zAddParams()","19":"ZAddParams::::zAddParams()","25":"ZAddParams::::nx()","26":"ZAddParams::::nx()","27":"ZAddParams::::nx()","28":"ZAddParams::::nx()","34":"ZAddParams::::xx()","35":"ZAddParams::::xx()","36":"ZAddParams::::xx()","37":"ZAddParams::::xx()","43":"ZAddParams::::gt()","44":"ZAddParams::::gt()","45":"ZAddParams::::gt()","46":"ZAddParams::::gt()","52":"ZAddParams::::lt()","53":"ZAddParams::::lt()","54":"ZAddParams::::lt()","55":"ZAddParams::::lt()","62":"ZAddParams::::ch()","63":"ZAddParams::::ch()","64":"ZAddParams::::ch()","65":"ZAddParams::::ch()","67":"ZAddParams::::addParams(redis.clients.jedis.CommandArguments)","68":"ZAddParams::::addParams(redis.clients.jedis.CommandArguments)","69":"ZAddParams::::addParams(redis.clients.jedis.CommandArguments)","70":"ZAddParams::::addParams(redis.clients.jedis.CommandArguments)","71":"ZAddParams::::addParams(redis.clients.jedis.CommandArguments)","72":"ZAddParams::::addParams(redis.clients.jedis.CommandArguments)","73":"ZAddParams::::addParams(redis.clients.jedis.CommandArguments)","74":"ZAddParams::::addParams(redis.clients.jedis.CommandArguments)","75":"ZAddParams::::addParams(redis.clients.jedis.CommandArguments)","76":"ZAddParams::::addParams(redis.clients.jedis.CommandArguments)","77":"ZAddParams::::addParams(redis.clients.jedis.CommandArguments)","78":"ZAddParams::::addParams(redis.clients.jedis.CommandArguments)","80":"ZAddParams::::equals(java.lang.Object)","81":"ZAddParams::::equals(java.lang.Object)","82":"ZAddParams::::equals(java.lang.Object)","83":"ZAddParams::::equals(java.lang.Object)","84":"ZAddParams::::equals(java.lang.Object)","85":"ZAddParams::::equals(java.lang.Object)","86":"ZAddParams::::equals(java.lang.Object)","88":"ZAddParams::::hashCode()","89":"ZAddParams::::hashCode()","90":"ZAddParams::::hashCode()","91":"ZAddParams::::hashCode()"},"test_reverse_method_lines_dic":{"9":"ZAddParamsTest::::checkEqualsIdenticalParams()","10":"ZAddParamsTest::::checkEqualsIdenticalParams()","11":"ZAddParamsTest::::checkEqualsIdenticalParams()","12":"ZAddParamsTest::::checkEqualsIdenticalParams()","13":"ZAddParamsTest::::checkEqualsIdenticalParams()","14":"ZAddParamsTest::::checkEqualsIdenticalParams()","16":"ZAddParamsTest::::checkHashCodeIdenticalParams()","17":"ZAddParamsTest::::checkHashCodeIdenticalParams()","18":"ZAddParamsTest::::checkHashCodeIdenticalParams()","19":"ZAddParamsTest::::checkHashCodeIdenticalParams()","20":"ZAddParamsTest::::checkHashCodeIdenticalParams()","21":"ZAddParamsTest::::checkHashCodeIdenticalParams()","23":"ZAddParamsTest::::checkEqualsVariousParams()","24":"ZAddParamsTest::::checkEqualsVariousParams()","25":"ZAddParamsTest::::checkEqualsVariousParams()","26":"ZAddParamsTest::::checkEqualsVariousParams()","27":"ZAddParamsTest::::checkEqualsVariousParams()","28":"ZAddParamsTest::::checkEqualsVariousParams()","29":"ZAddParamsTest::::checkEqualsVariousParams()","30":"ZAddParamsTest::::checkEqualsVariousParams()","32":"ZAddParamsTest::::checkHashCodeVariousParams()","33":"ZAddParamsTest::::checkHashCodeVariousParams()","34":"ZAddParamsTest::::checkHashCodeVariousParams()","35":"ZAddParamsTest::::checkHashCodeVariousParams()","36":"ZAddParamsTest::::checkHashCodeVariousParams()","37":"ZAddParamsTest::::checkHashCodeVariousParams()","38":"ZAddParamsTest::::checkHashCodeVariousParams()","39":"ZAddParamsTest::::checkHashCodeVariousParams()","41":"ZAddParamsTest::::checkEqualsWithNull()","42":"ZAddParamsTest::::checkEqualsWithNull()","43":"ZAddParamsTest::::checkEqualsWithNull()","44":"ZAddParamsTest::::checkEqualsWithNull()","45":"ZAddParamsTest::::checkEqualsWithNull()","46":"ZAddParamsTest::::checkEqualsWithNull()","48":"ZAddParamsTest::::getDefaultValue()","49":"ZAddParamsTest::::getDefaultValue()","50":"ZAddParamsTest::::getDefaultValue()"},"tests":[{"test_lines":[9,14],"covered_lines":[14,15,82,83,84,85],"label":"ZAddParams::::equals(java.lang.Object)"},{"test_lines":[16,21],"covered_lines":[14,15,90],"label":"ZAddParams::::hashCode()"},{"test_lines":[23,30],"covered_lines":[14,15,26,27,35,36,82,83,84,85],"label":"ZAddParams::::equals(java.lang.Object)"},{"test_lines":[32,39],"covered_lines":[14,15,26,27,35,36,90],"label":"ZAddParams::::hashCode()"},{"test_lines":[41,46],"covered_lines":[14,15,82,83],"label":"ZAddParams::::equals(java.lang.Object)"}]},"/bernard/dataset_construction/prep/repos/jedis/src/main/java/redis/clients/jedis/params/ZParams.java":{"class_content":["package redis.clients.jedis.params;\n","\n","import java.util.ArrayList;\n","import java.util.List;\n","import java.util.Objects;\n","\n","import redis.clients.jedis.CommandArguments;\n","import redis.clients.jedis.Protocol.Keyword;\n","import redis.clients.jedis.args.Rawable;\n","import redis.clients.jedis.util.SafeEncoder;\n","\n","public class ZParams implements IParams {\n","\n","  public enum Aggregate implements Rawable {\n","\n","    SUM, MIN, MAX;\n","\n","    private final byte[] raw;\n","\n","    private Aggregate() {\n","      raw = SafeEncoder.encode(name());\n","    }\n","\n","    @Override\n","    public byte[] getRaw() {\n","      return raw;\n","    }\n","  }\n","\n","  private final List<Object> params = new ArrayList<>();\n","\n","  public ZParams weights(final double... weights) {\n","    params.add(Keyword.WEIGHTS);\n","    for (final double weight : weights) {\n","      params.add(weight);\n","    }\n","    return this;\n","  }\n","\n","  public ZParams aggregate(final Aggregate aggregate) {\n","    params.add(Keyword.AGGREGATE);\n","    params.add(aggregate);\n","    return this;\n","  }\n","\n","  @Override\n","  public void addParams(CommandArguments args) {\n","    args.addObjects(params);\n","  }\n","\n","  @Override\n","  public boolean equals(Object o) {\n","    if (this == o) return true;\n","    if (o == null || getClass() != o.getClass()) return false;\n","    ZParams zParams = (ZParams) o;\n","    return Objects.equals(params, zParams.params);\n","  }\n","\n","  @Override\n","  public int hashCode() {\n","    return Objects.hash(params);\n","  }\n","}\n"],"test_content":["package redis.clients.jedis.params;\n","\n","import org.junit.Test;\n","\n","import static org.junit.Assert.*;\n","\n","public class ZParamsTest {\n","\n","    @Test\n","    public void checkEqualsIdenticalParams() {\n","        ZParams firstParam = getDefaultValue();\n","        ZParams secondParam = getDefaultValue();\n","        assertTrue(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeIdenticalParams() {\n","        ZParams firstParam = getDefaultValue();\n","        ZParams secondParam = getDefaultValue();\n","        assertEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsVariousParams() {\n","        ZParams firstParam = getDefaultValue();\n","        firstParam.aggregate(ZParams.Aggregate.MIN);\n","        ZParams secondParam = getDefaultValue();\n","        secondParam.aggregate(ZParams.Aggregate.MAX);\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeVariousParams() {\n","        ZParams firstParam = getDefaultValue();\n","        firstParam.aggregate(ZParams.Aggregate.MIN);\n","        ZParams secondParam = getDefaultValue();\n","        secondParam.aggregate(ZParams.Aggregate.MAX);\n","        assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsWithNull() {\n","        ZParams firstParam = getDefaultValue();\n","        ZParams secondParam = null;\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    private ZParams getDefaultValue() {\n","        return new ZParams();\n","    }\n","}\n"],"method_lines_dic":{"ZParams.Aggregate::::getRaw()":[24,27],"ZParams::::weights(double[])":[32,38],"ZParams::::aggregate(redis.clients.jedis.params.ZParams.Aggregate)":[40,44],"ZParams::::addParams(redis.clients.jedis.CommandArguments)":[46,49],"ZParams::::equals(java.lang.Object)":[51,57],"ZParams::::hashCode()":[59,62]},"test_method_lines_dic":{"ZParamsTest::::checkEqualsIdenticalParams()":[9,14],"ZParamsTest::::checkHashCodeIdenticalParams()":[16,21],"ZParamsTest::::checkEqualsVariousParams()":[23,30],"ZParamsTest::::checkHashCodeVariousParams()":[32,39],"ZParamsTest::::checkEqualsWithNull()":[41,46],"ZParamsTest::::getDefaultValue()":[48,50]},"reverse_method_lines_dic":{"24":"ZParams.Aggregate::::getRaw()","25":"ZParams.Aggregate::::getRaw()","26":"ZParams.Aggregate::::getRaw()","27":"ZParams.Aggregate::::getRaw()","32":"ZParams::::weights(double[])","33":"ZParams::::weights(double[])","34":"ZParams::::weights(double[])","35":"ZParams::::weights(double[])","36":"ZParams::::weights(double[])","37":"ZParams::::weights(double[])","38":"ZParams::::weights(double[])","40":"ZParams::::aggregate(redis.clients.jedis.params.ZParams.Aggregate)","41":"ZParams::::aggregate(redis.clients.jedis.params.ZParams.Aggregate)","42":"ZParams::::aggregate(redis.clients.jedis.params.ZParams.Aggregate)","43":"ZParams::::aggregate(redis.clients.jedis.params.ZParams.Aggregate)","44":"ZParams::::aggregate(redis.clients.jedis.params.ZParams.Aggregate)","46":"ZParams::::addParams(redis.clients.jedis.CommandArguments)","47":"ZParams::::addParams(redis.clients.jedis.CommandArguments)","48":"ZParams::::addParams(redis.clients.jedis.CommandArguments)","49":"ZParams::::addParams(redis.clients.jedis.CommandArguments)","51":"ZParams::::equals(java.lang.Object)","52":"ZParams::::equals(java.lang.Object)","53":"ZParams::::equals(java.lang.Object)","54":"ZParams::::equals(java.lang.Object)","55":"ZParams::::equals(java.lang.Object)","56":"ZParams::::equals(java.lang.Object)","57":"ZParams::::equals(java.lang.Object)","59":"ZParams::::hashCode()","60":"ZParams::::hashCode()","61":"ZParams::::hashCode()","62":"ZParams::::hashCode()"},"test_reverse_method_lines_dic":{"9":"ZParamsTest::::checkEqualsIdenticalParams()","10":"ZParamsTest::::checkEqualsIdenticalParams()","11":"ZParamsTest::::checkEqualsIdenticalParams()","12":"ZParamsTest::::checkEqualsIdenticalParams()","13":"ZParamsTest::::checkEqualsIdenticalParams()","14":"ZParamsTest::::checkEqualsIdenticalParams()","16":"ZParamsTest::::checkHashCodeIdenticalParams()","17":"ZParamsTest::::checkHashCodeIdenticalParams()","18":"ZParamsTest::::checkHashCodeIdenticalParams()","19":"ZParamsTest::::checkHashCodeIdenticalParams()","20":"ZParamsTest::::checkHashCodeIdenticalParams()","21":"ZParamsTest::::checkHashCodeIdenticalParams()","23":"ZParamsTest::::checkEqualsVariousParams()","24":"ZParamsTest::::checkEqualsVariousParams()","25":"ZParamsTest::::checkEqualsVariousParams()","26":"ZParamsTest::::checkEqualsVariousParams()","27":"ZParamsTest::::checkEqualsVariousParams()","28":"ZParamsTest::::checkEqualsVariousParams()","29":"ZParamsTest::::checkEqualsVariousParams()","30":"ZParamsTest::::checkEqualsVariousParams()","32":"ZParamsTest::::checkHashCodeVariousParams()","33":"ZParamsTest::::checkHashCodeVariousParams()","34":"ZParamsTest::::checkHashCodeVariousParams()","35":"ZParamsTest::::checkHashCodeVariousParams()","36":"ZParamsTest::::checkHashCodeVariousParams()","37":"ZParamsTest::::checkHashCodeVariousParams()","38":"ZParamsTest::::checkHashCodeVariousParams()","39":"ZParamsTest::::checkHashCodeVariousParams()","41":"ZParamsTest::::checkEqualsWithNull()","42":"ZParamsTest::::checkEqualsWithNull()","43":"ZParamsTest::::checkEqualsWithNull()","44":"ZParamsTest::::checkEqualsWithNull()","45":"ZParamsTest::::checkEqualsWithNull()","46":"ZParamsTest::::checkEqualsWithNull()","48":"ZParamsTest::::getDefaultValue()","49":"ZParamsTest::::getDefaultValue()","50":"ZParamsTest::::getDefaultValue()"},"tests":[{"test_lines":[9,14],"covered_lines":[12,30,53,54,55,56],"label":"ZParams::::equals(java.lang.Object)"},{"test_lines":[16,21],"covered_lines":[12,30,61],"label":"ZParams::::hashCode()"},{"test_lines":[23,30],"covered_lines":[12,14,16,20,21,22,30,41,42,43,53,54,55,56],"label":"ZParams::::equals(java.lang.Object)"},{"test_lines":[32,39],"covered_lines":[12,14,16,20,21,22,30,41,42,43,61],"label":"ZParams::::hashCode()"},{"test_lines":[41,46],"covered_lines":[12,30,53,54],"label":"ZParams::::equals(java.lang.Object)"}]},"/bernard/dataset_construction/prep/repos/jedis/src/main/java/redis/clients/jedis/params/ShutdownParams.java":{"class_content":["package redis.clients.jedis.params;\n","\n","import redis.clients.jedis.CommandArguments;\n","import redis.clients.jedis.Protocol.Keyword;\n","import redis.clients.jedis.args.SaveMode;\n","\n","import java.util.Objects;\n","\n","public class ShutdownParams implements IParams {\n","\n","  private SaveMode saveMode;\n","  private boolean now;\n","  private boolean force;\n","\n","  public static ShutdownParams shutdownParams() {\n","    return new ShutdownParams();\n","  }\n","\n","  public ShutdownParams saveMode(SaveMode saveMode) {\n","    this.saveMode = saveMode;\n","    return this;\n","  }\n","\n","  public ShutdownParams nosave() {\n","    return this.saveMode(SaveMode.NOSAVE);\n","  }\n","\n","  public ShutdownParams save() {\n","    return this.saveMode(SaveMode.SAVE);\n","  }\n","\n","  public ShutdownParams now() {\n","    this.now = true;\n","    return this;\n","  }\n","\n","  public ShutdownParams force() {\n","    this.force = true;\n","    return this;\n","  }\n","\n","  @Override\n","  public void addParams(CommandArguments args) {\n","    if (this.saveMode != null) {\n","      args.add(saveMode);\n","    }\n","    if (this.now) {\n","      args.add(Keyword.NOW);\n","    }\n","    if (this.force) {\n","      args.add(Keyword.FORCE);\n","    }\n","  }\n","\n","  @Override\n","  public boolean equals(Object o) {\n","    if (this == o) return true;\n","    if (o == null || getClass() != o.getClass()) return false;\n","    ShutdownParams that = (ShutdownParams) o;\n","    return now == that.now && force == that.force && saveMode == that.saveMode;\n","  }\n","\n","  @Override\n","  public int hashCode() {\n","    return Objects.hash(saveMode, now, force);\n","  }\n","}\n"],"test_content":["package redis.clients.jedis.params;\n","\n","import org.junit.Test;\n","\n","import static org.junit.Assert.*;\n","\n","public class ShutdownParamsTest {\n","\n","    @Test\n","    public void checkEqualsIdenticalParams() {\n","        ShutdownParams firstParam = getDefaultValue();\n","        ShutdownParams secondParam = getDefaultValue();\n","        assertTrue(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeIdenticalParams() {\n","        ShutdownParams firstParam = getDefaultValue();\n","        ShutdownParams secondParam = getDefaultValue();\n","        assertEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsVariousParams() {\n","        ShutdownParams firstParam = getDefaultValue();\n","        firstParam.force();\n","        ShutdownParams secondParam = getDefaultValue();\n","        secondParam.nosave();\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeVariousParams() {\n","        ShutdownParams firstParam = getDefaultValue();\n","        firstParam.force();\n","        ShutdownParams secondParam = getDefaultValue();\n","        secondParam.nosave();\n","        assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsWithNull() {\n","        ShutdownParams firstParam = getDefaultValue();\n","        ShutdownParams secondParam = null;\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    private ShutdownParams getDefaultValue() {\n","        return new ShutdownParams();\n","    }\n","}\n"],"method_lines_dic":{"ShutdownParams::::shutdownParams()":[15,17],"ShutdownParams::::saveMode(redis.clients.jedis.args.SaveMode)":[19,22],"ShutdownParams::::nosave()":[24,26],"ShutdownParams::::save()":[28,30],"ShutdownParams::::now()":[32,35],"ShutdownParams::::force()":[37,40],"ShutdownParams::::addParams(redis.clients.jedis.CommandArguments)":[42,53],"ShutdownParams::::equals(java.lang.Object)":[55,61],"ShutdownParams::::hashCode()":[63,66]},"test_method_lines_dic":{"ShutdownParamsTest::::checkEqualsIdenticalParams()":[9,14],"ShutdownParamsTest::::checkHashCodeIdenticalParams()":[16,21],"ShutdownParamsTest::::checkEqualsVariousParams()":[23,30],"ShutdownParamsTest::::checkHashCodeVariousParams()":[32,39],"ShutdownParamsTest::::checkEqualsWithNull()":[41,46],"ShutdownParamsTest::::getDefaultValue()":[48,50]},"reverse_method_lines_dic":{"15":"ShutdownParams::::shutdownParams()","16":"ShutdownParams::::shutdownParams()","17":"ShutdownParams::::shutdownParams()","19":"ShutdownParams::::saveMode(redis.clients.jedis.args.SaveMode)","20":"ShutdownParams::::saveMode(redis.clients.jedis.args.SaveMode)","21":"ShutdownParams::::saveMode(redis.clients.jedis.args.SaveMode)","22":"ShutdownParams::::saveMode(redis.clients.jedis.args.SaveMode)","24":"ShutdownParams::::nosave()","25":"ShutdownParams::::nosave()","26":"ShutdownParams::::nosave()","28":"ShutdownParams::::save()","29":"ShutdownParams::::save()","30":"ShutdownParams::::save()","32":"ShutdownParams::::now()","33":"ShutdownParams::::now()","34":"ShutdownParams::::now()","35":"ShutdownParams::::now()","37":"ShutdownParams::::force()","38":"ShutdownParams::::force()","39":"ShutdownParams::::force()","40":"ShutdownParams::::force()","42":"ShutdownParams::::addParams(redis.clients.jedis.CommandArguments)","43":"ShutdownParams::::addParams(redis.clients.jedis.CommandArguments)","44":"ShutdownParams::::addParams(redis.clients.jedis.CommandArguments)","45":"ShutdownParams::::addParams(redis.clients.jedis.CommandArguments)","46":"ShutdownParams::::addParams(redis.clients.jedis.CommandArguments)","47":"ShutdownParams::::addParams(redis.clients.jedis.CommandArguments)","48":"ShutdownParams::::addParams(redis.clients.jedis.CommandArguments)","49":"ShutdownParams::::addParams(redis.clients.jedis.CommandArguments)","50":"ShutdownParams::::addParams(redis.clients.jedis.CommandArguments)","51":"ShutdownParams::::addParams(redis.clients.jedis.CommandArguments)","52":"ShutdownParams::::addParams(redis.clients.jedis.CommandArguments)","53":"ShutdownParams::::addParams(redis.clients.jedis.CommandArguments)","55":"ShutdownParams::::equals(java.lang.Object)","56":"ShutdownParams::::equals(java.lang.Object)","57":"ShutdownParams::::equals(java.lang.Object)","58":"ShutdownParams::::equals(java.lang.Object)","59":"ShutdownParams::::equals(java.lang.Object)","60":"ShutdownParams::::equals(java.lang.Object)","61":"ShutdownParams::::equals(java.lang.Object)","63":"ShutdownParams::::hashCode()","64":"ShutdownParams::::hashCode()","65":"ShutdownParams::::hashCode()","66":"ShutdownParams::::hashCode()"},"test_reverse_method_lines_dic":{"9":"ShutdownParamsTest::::checkEqualsIdenticalParams()","10":"ShutdownParamsTest::::checkEqualsIdenticalParams()","11":"ShutdownParamsTest::::checkEqualsIdenticalParams()","12":"ShutdownParamsTest::::checkEqualsIdenticalParams()","13":"ShutdownParamsTest::::checkEqualsIdenticalParams()","14":"ShutdownParamsTest::::checkEqualsIdenticalParams()","16":"ShutdownParamsTest::::checkHashCodeIdenticalParams()","17":"ShutdownParamsTest::::checkHashCodeIdenticalParams()","18":"ShutdownParamsTest::::checkHashCodeIdenticalParams()","19":"ShutdownParamsTest::::checkHashCodeIdenticalParams()","20":"ShutdownParamsTest::::checkHashCodeIdenticalParams()","21":"ShutdownParamsTest::::checkHashCodeIdenticalParams()","23":"ShutdownParamsTest::::checkEqualsVariousParams()","24":"ShutdownParamsTest::::checkEqualsVariousParams()","25":"ShutdownParamsTest::::checkEqualsVariousParams()","26":"ShutdownParamsTest::::checkEqualsVariousParams()","27":"ShutdownParamsTest::::checkEqualsVariousParams()","28":"ShutdownParamsTest::::checkEqualsVariousParams()","29":"ShutdownParamsTest::::checkEqualsVariousParams()","30":"ShutdownParamsTest::::checkEqualsVariousParams()","32":"ShutdownParamsTest::::checkHashCodeVariousParams()","33":"ShutdownParamsTest::::checkHashCodeVariousParams()","34":"ShutdownParamsTest::::checkHashCodeVariousParams()","35":"ShutdownParamsTest::::checkHashCodeVariousParams()","36":"ShutdownParamsTest::::checkHashCodeVariousParams()","37":"ShutdownParamsTest::::checkHashCodeVariousParams()","38":"ShutdownParamsTest::::checkHashCodeVariousParams()","39":"ShutdownParamsTest::::checkHashCodeVariousParams()","41":"ShutdownParamsTest::::checkEqualsWithNull()","42":"ShutdownParamsTest::::checkEqualsWithNull()","43":"ShutdownParamsTest::::checkEqualsWithNull()","44":"ShutdownParamsTest::::checkEqualsWithNull()","45":"ShutdownParamsTest::::checkEqualsWithNull()","46":"ShutdownParamsTest::::checkEqualsWithNull()","48":"ShutdownParamsTest::::getDefaultValue()","49":"ShutdownParamsTest::::getDefaultValue()","50":"ShutdownParamsTest::::getDefaultValue()"},"tests":[{"test_lines":[9,14],"covered_lines":[9,57,58,59,60],"label":"ShutdownParams::::equals(java.lang.Object)"},{"test_lines":[16,21],"covered_lines":[9,65],"label":"ShutdownParams::::hashCode()"},{"test_lines":[23,30],"covered_lines":[9,20,21,25,38,39,57,58,59,60],"label":"ShutdownParams::::equals(java.lang.Object)"},{"test_lines":[32,39],"covered_lines":[9,20,21,25,38,39,65],"label":"ShutdownParams::::hashCode()"},{"test_lines":[41,46],"covered_lines":[9,57,58],"label":"ShutdownParams::::equals(java.lang.Object)"}]},"/bernard/dataset_construction/prep/repos/jedis/src/main/java/redis/clients/jedis/params/ClientKillParams.java":{"class_content":["package redis.clients.jedis.params;\n","\n","import java.util.ArrayList;\n","import java.util.Objects;\n","\n","import redis.clients.jedis.CommandArguments;\n","import redis.clients.jedis.Protocol.Keyword;\n","import redis.clients.jedis.args.ClientType;\n","import redis.clients.jedis.util.KeyValue;\n","\n","public class ClientKillParams implements IParams {\n","\n","  public static enum SkipMe {\n","    YES, NO;\n","  }\n","\n","  private final ArrayList<KeyValue<Keyword, Object>> params = new ArrayList<>();\n","\n","  public ClientKillParams() {\n","  }\n","\n","  public static ClientKillParams clientKillParams() {\n","    return new ClientKillParams();\n","  }\n","\n","  private ClientKillParams addParam(Keyword key, Object value) {\n","    params.add(KeyValue.of(key, value));\n","    return this;\n","  }\n","\n","  public ClientKillParams id(String clientId) {\n","    return addParam(Keyword.ID, clientId);\n","  }\n","\n","  public ClientKillParams id(byte[] clientId) {\n","    return addParam(Keyword.ID, clientId);\n","  }\n","\n","  public ClientKillParams type(ClientType type) {\n","    return addParam(Keyword.TYPE, type);\n","  }\n","\n","  public ClientKillParams addr(String ipPort) {\n","    return addParam(Keyword.ADDR, ipPort);\n","  }\n","\n","  public ClientKillParams addr(byte[] ipPort) {\n","    return addParam(Keyword.ADDR, ipPort);\n","  }\n","\n","  public ClientKillParams addr(String ip, int port) {\n","    return addParam(Keyword.ADDR, ip + ':' + port);\n","  }\n","\n","  public ClientKillParams skipMe(SkipMe skipMe) {\n","    return addParam(Keyword.SKIPME, skipMe);\n","  }\n","\n","  public ClientKillParams user(String username) {\n","    return addParam(Keyword.USER, username);\n","  }\n","\n","  public ClientKillParams laddr(String ipPort) {\n","    return addParam(Keyword.LADDR, ipPort);\n","  }\n","\n","  public ClientKillParams laddr(String ip, int port) {\n","    return addParam(Keyword.LADDR, ip + ':' + port);\n","  }\n","\n","  /**\n","   * Kill clients older than {@code maxAge} seconds.\n","   *\n","   * @param maxAge Clients older than this number of seconds will be killed.\n","   * @return The {@code ClientKillParams} instance, for call chaining.\n","   */\n","  public ClientKillParams maxAge(long maxAge) {\n","    return addParam(Keyword.MAXAGE, maxAge);\n","  }\n","\n","  @Override\n","  public void addParams(CommandArguments args) {\n","    params.forEach(kv -> args.add(kv.getKey()).add(kv.getValue()));\n","  }\n","\n","  @Override\n","  public boolean equals(Object o) {\n","    if (this == o) return true;\n","    if (o == null || getClass() != o.getClass()) return false;\n","    ClientKillParams that = (ClientKillParams) o;\n","    return Objects.equals(params, that.params);\n","  }\n","\n","  @Override\n","  public int hashCode() {\n","    return Objects.hash(params);\n","  }\n","}\n"],"test_content":["package redis.clients.jedis.params;\n","\n","import org.junit.Test;\n","import redis.clients.jedis.args.ClientType;\n","\n","import static org.junit.Assert.*;\n","\n","public class ClientKillParamsTest {\n","\n","    @Test\n","    public void checkEqualsIdenticalParams() {\n","        ClientKillParams firstParam = getDefaultValue();\n","        ClientKillParams secondParam = getDefaultValue();\n","        assertTrue(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeIdenticalParams() {\n","        ClientKillParams firstParam = getDefaultValue();\n","        ClientKillParams secondParam = getDefaultValue();\n","        assertEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","    \n","    @Test\n","    public void checkEqualsVariousParams() {\n","        ClientKillParams firstParam = getDefaultValue();\n","        firstParam.type(ClientType.NORMAL);\n","        ClientKillParams secondParam = getDefaultValue();\n","        secondParam.skipMe(ClientKillParams.SkipMe.NO);\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeVariousParams() {\n","        ClientKillParams firstParam = getDefaultValue();\n","        firstParam.type(ClientType.NORMAL);\n","        ClientKillParams secondParam = getDefaultValue();\n","        secondParam.skipMe(ClientKillParams.SkipMe.NO);\n","        assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsWithNull() {\n","        ClientKillParams firstParam = getDefaultValue();\n","        ClientKillParams secondParam = null;\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    private ClientKillParams getDefaultValue() {\n","        return new ClientKillParams();\n","    }\n","}\n"],"method_lines_dic":{"ClientKillParams::::clientKillParams()":[22,24],"ClientKillParams::::addParam(redis.clients.jedis.Protocol.Keyword,java.lang.Object)":[26,29],"ClientKillParams::::id(java.lang.String)":[31,33],"ClientKillParams::::id(byte[])":[35,37],"ClientKillParams::::type(redis.clients.jedis.args.ClientType)":[39,41],"ClientKillParams::::addr(java.lang.String)":[43,45],"ClientKillParams::::addr(byte[])":[47,49],"ClientKillParams::::addr(java.lang.String,int)":[51,53],"ClientKillParams::::skipMe(redis.clients.jedis.params.ClientKillParams.SkipMe)":[55,57],"ClientKillParams::::user(java.lang.String)":[59,61],"ClientKillParams::::laddr(java.lang.String)":[63,65],"ClientKillParams::::laddr(java.lang.String,int)":[67,69],"ClientKillParams::::maxAge(long)":[77,79],"ClientKillParams::::addParams(redis.clients.jedis.CommandArguments)":[81,84],"ClientKillParams::::equals(java.lang.Object)":[86,92],"ClientKillParams::::hashCode()":[94,97]},"test_method_lines_dic":{"ClientKillParamsTest::::checkEqualsIdenticalParams()":[10,15],"ClientKillParamsTest::::checkHashCodeIdenticalParams()":[17,22],"ClientKillParamsTest::::checkEqualsVariousParams()":[24,31],"ClientKillParamsTest::::checkHashCodeVariousParams()":[33,40],"ClientKillParamsTest::::checkEqualsWithNull()":[42,47],"ClientKillParamsTest::::getDefaultValue()":[49,51]},"reverse_method_lines_dic":{"22":"ClientKillParams::::clientKillParams()","23":"ClientKillParams::::clientKillParams()","24":"ClientKillParams::::clientKillParams()","26":"ClientKillParams::::addParam(redis.clients.jedis.Protocol.Keyword,java.lang.Object)","27":"ClientKillParams::::addParam(redis.clients.jedis.Protocol.Keyword,java.lang.Object)","28":"ClientKillParams::::addParam(redis.clients.jedis.Protocol.Keyword,java.lang.Object)","29":"ClientKillParams::::addParam(redis.clients.jedis.Protocol.Keyword,java.lang.Object)","31":"ClientKillParams::::id(java.lang.String)","32":"ClientKillParams::::id(java.lang.String)","33":"ClientKillParams::::id(java.lang.String)","35":"ClientKillParams::::id(byte[])","36":"ClientKillParams::::id(byte[])","37":"ClientKillParams::::id(byte[])","39":"ClientKillParams::::type(redis.clients.jedis.args.ClientType)","40":"ClientKillParams::::type(redis.clients.jedis.args.ClientType)","41":"ClientKillParams::::type(redis.clients.jedis.args.ClientType)","43":"ClientKillParams::::addr(java.lang.String)","44":"ClientKillParams::::addr(java.lang.String)","45":"ClientKillParams::::addr(java.lang.String)","47":"ClientKillParams::::addr(byte[])","48":"ClientKillParams::::addr(byte[])","49":"ClientKillParams::::addr(byte[])","51":"ClientKillParams::::addr(java.lang.String,int)","52":"ClientKillParams::::addr(java.lang.String,int)","53":"ClientKillParams::::addr(java.lang.String,int)","55":"ClientKillParams::::skipMe(redis.clients.jedis.params.ClientKillParams.SkipMe)","56":"ClientKillParams::::skipMe(redis.clients.jedis.params.ClientKillParams.SkipMe)","57":"ClientKillParams::::skipMe(redis.clients.jedis.params.ClientKillParams.SkipMe)","59":"ClientKillParams::::user(java.lang.String)","60":"ClientKillParams::::user(java.lang.String)","61":"ClientKillParams::::user(java.lang.String)","63":"ClientKillParams::::laddr(java.lang.String)","64":"ClientKillParams::::laddr(java.lang.String)","65":"ClientKillParams::::laddr(java.lang.String)","67":"ClientKillParams::::laddr(java.lang.String,int)","68":"ClientKillParams::::laddr(java.lang.String,int)","69":"ClientKillParams::::laddr(java.lang.String,int)","77":"ClientKillParams::::maxAge(long)","78":"ClientKillParams::::maxAge(long)","79":"ClientKillParams::::maxAge(long)","81":"ClientKillParams::::addParams(redis.clients.jedis.CommandArguments)","82":"ClientKillParams::::addParams(redis.clients.jedis.CommandArguments)","83":"ClientKillParams::::addParams(redis.clients.jedis.CommandArguments)","84":"ClientKillParams::::addParams(redis.clients.jedis.CommandArguments)","86":"ClientKillParams::::equals(java.lang.Object)","87":"ClientKillParams::::equals(java.lang.Object)","88":"ClientKillParams::::equals(java.lang.Object)","89":"ClientKillParams::::equals(java.lang.Object)","90":"ClientKillParams::::equals(java.lang.Object)","91":"ClientKillParams::::equals(java.lang.Object)","92":"ClientKillParams::::equals(java.lang.Object)","94":"ClientKillParams::::hashCode()","95":"ClientKillParams::::hashCode()","96":"ClientKillParams::::hashCode()","97":"ClientKillParams::::hashCode()"},"test_reverse_method_lines_dic":{"10":"ClientKillParamsTest::::checkEqualsIdenticalParams()","11":"ClientKillParamsTest::::checkEqualsIdenticalParams()","12":"ClientKillParamsTest::::checkEqualsIdenticalParams()","13":"ClientKillParamsTest::::checkEqualsIdenticalParams()","14":"ClientKillParamsTest::::checkEqualsIdenticalParams()","15":"ClientKillParamsTest::::checkEqualsIdenticalParams()","17":"ClientKillParamsTest::::checkHashCodeIdenticalParams()","18":"ClientKillParamsTest::::checkHashCodeIdenticalParams()","19":"ClientKillParamsTest::::checkHashCodeIdenticalParams()","20":"ClientKillParamsTest::::checkHashCodeIdenticalParams()","21":"ClientKillParamsTest::::checkHashCodeIdenticalParams()","22":"ClientKillParamsTest::::checkHashCodeIdenticalParams()","24":"ClientKillParamsTest::::checkEqualsVariousParams()","25":"ClientKillParamsTest::::checkEqualsVariousParams()","26":"ClientKillParamsTest::::checkEqualsVariousParams()","27":"ClientKillParamsTest::::checkEqualsVariousParams()","28":"ClientKillParamsTest::::checkEqualsVariousParams()","29":"ClientKillParamsTest::::checkEqualsVariousParams()","30":"ClientKillParamsTest::::checkEqualsVariousParams()","31":"ClientKillParamsTest::::checkEqualsVariousParams()","33":"ClientKillParamsTest::::checkHashCodeVariousParams()","34":"ClientKillParamsTest::::checkHashCodeVariousParams()","35":"ClientKillParamsTest::::checkHashCodeVariousParams()","36":"ClientKillParamsTest::::checkHashCodeVariousParams()","37":"ClientKillParamsTest::::checkHashCodeVariousParams()","38":"ClientKillParamsTest::::checkHashCodeVariousParams()","39":"ClientKillParamsTest::::checkHashCodeVariousParams()","40":"ClientKillParamsTest::::checkHashCodeVariousParams()","42":"ClientKillParamsTest::::checkEqualsWithNull()","43":"ClientKillParamsTest::::checkEqualsWithNull()","44":"ClientKillParamsTest::::checkEqualsWithNull()","45":"ClientKillParamsTest::::checkEqualsWithNull()","46":"ClientKillParamsTest::::checkEqualsWithNull()","47":"ClientKillParamsTest::::checkEqualsWithNull()","49":"ClientKillParamsTest::::getDefaultValue()","50":"ClientKillParamsTest::::getDefaultValue()","51":"ClientKillParamsTest::::getDefaultValue()"},"tests":[{"test_lines":[10,15],"covered_lines":[17,19,20,88,89,90,91],"label":"ClientKillParams::::equals(java.lang.Object)"},{"test_lines":[17,22],"covered_lines":[17,19,20,96],"label":"ClientKillParams::::hashCode()"},{"test_lines":[24,31],"covered_lines":[13,14,17,19,20,27,28,40,56,88,89,90,91],"label":"ClientKillParams::::equals(java.lang.Object)"},{"test_lines":[33,40],"covered_lines":[13,14,17,19,20,27,28,40,56,96],"label":"ClientKillParams::::hashCode()"},{"test_lines":[42,47],"covered_lines":[17,19,20,88,89],"label":"ClientKillParams::::equals(java.lang.Object)"}]},"/bernard/dataset_construction/prep/repos/jedis/src/main/java/redis/clients/jedis/params/XAutoClaimParams.java":{"class_content":["package redis.clients.jedis.params;\n","\n","import redis.clients.jedis.CommandArguments;\n","import redis.clients.jedis.Protocol.Keyword;\n","\n","import java.util.Objects;\n","\n","public class XAutoClaimParams implements IParams {\n","\n","  private Integer count;\n","\n","  public XAutoClaimParams() {\n","  }\n","\n","  public static XAutoClaimParams xAutoClaimParams() {\n","    return new XAutoClaimParams();\n","  }\n","\n","  /**\n","   * Set the count of stream entries/ids to return as part of the command output.\n","   * @param count COUNT\n","   * @return XAutoClaimParams\n","   */\n","  public XAutoClaimParams count(int count) {\n","    this.count = count;\n","    return this;\n","  }\n","\n","  @Override\n","  public void addParams(CommandArguments args) {\n","    if (count != null) {\n","      args.add(Keyword.COUNT.getRaw()).add(count);\n","    }\n","  }\n","\n","  @Override\n","  public boolean equals(Object o) {\n","    if (this == o) return true;\n","    if (o == null || getClass() != o.getClass()) return false;\n","    XAutoClaimParams that = (XAutoClaimParams) o;\n","    return Objects.equals(count, that.count);\n","  }\n","\n","  @Override\n","  public int hashCode() {\n","    return Objects.hash(count);\n","  }\n","}\n"],"test_content":["package redis.clients.jedis.params;\n","\n","import org.junit.Test;\n","\n","import static org.junit.Assert.*;\n","\n","public class XAutoClaimParamsTest {\n","\n","    @Test\n","    public void checkEqualsIdenticalParams() {\n","        XAutoClaimParams firstParam = getDefaultValue();\n","        XAutoClaimParams secondParam = getDefaultValue();\n","        assertTrue(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeIdenticalParams() {\n","        XAutoClaimParams firstParam = getDefaultValue();\n","        XAutoClaimParams secondParam = getDefaultValue();\n","        assertEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsVariousParams() {\n","        XAutoClaimParams firstParam = getDefaultValue();\n","        firstParam.count(15);\n","        XAutoClaimParams secondParam = getDefaultValue();\n","        secondParam.count(20);\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeVariousParams() {\n","        XAutoClaimParams firstParam = getDefaultValue();\n","        firstParam.count(15);\n","        XAutoClaimParams secondParam = getDefaultValue();\n","        secondParam.count(20);\n","        assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsWithNull() {\n","        XAutoClaimParams firstParam = getDefaultValue();\n","        XAutoClaimParams secondParam = null;\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    private XAutoClaimParams getDefaultValue() {\n","        return new XAutoClaimParams();\n","    }\n","}\n"],"method_lines_dic":{"XAutoClaimParams::::xAutoClaimParams()":[15,17],"XAutoClaimParams::::count(int)":[24,27],"XAutoClaimParams::::addParams(redis.clients.jedis.CommandArguments)":[29,34],"XAutoClaimParams::::equals(java.lang.Object)":[36,42],"XAutoClaimParams::::hashCode()":[44,47]},"test_method_lines_dic":{"XAutoClaimParamsTest::::checkEqualsIdenticalParams()":[9,14],"XAutoClaimParamsTest::::checkHashCodeIdenticalParams()":[16,21],"XAutoClaimParamsTest::::checkEqualsVariousParams()":[23,30],"XAutoClaimParamsTest::::checkHashCodeVariousParams()":[32,39],"XAutoClaimParamsTest::::checkEqualsWithNull()":[41,46],"XAutoClaimParamsTest::::getDefaultValue()":[48,50]},"reverse_method_lines_dic":{"15":"XAutoClaimParams::::xAutoClaimParams()","16":"XAutoClaimParams::::xAutoClaimParams()","17":"XAutoClaimParams::::xAutoClaimParams()","24":"XAutoClaimParams::::count(int)","25":"XAutoClaimParams::::count(int)","26":"XAutoClaimParams::::count(int)","27":"XAutoClaimParams::::count(int)","29":"XAutoClaimParams::::addParams(redis.clients.jedis.CommandArguments)","30":"XAutoClaimParams::::addParams(redis.clients.jedis.CommandArguments)","31":"XAutoClaimParams::::addParams(redis.clients.jedis.CommandArguments)","32":"XAutoClaimParams::::addParams(redis.clients.jedis.CommandArguments)","33":"XAutoClaimParams::::addParams(redis.clients.jedis.CommandArguments)","34":"XAutoClaimParams::::addParams(redis.clients.jedis.CommandArguments)","36":"XAutoClaimParams::::equals(java.lang.Object)","37":"XAutoClaimParams::::equals(java.lang.Object)","38":"XAutoClaimParams::::equals(java.lang.Object)","39":"XAutoClaimParams::::equals(java.lang.Object)","40":"XAutoClaimParams::::equals(java.lang.Object)","41":"XAutoClaimParams::::equals(java.lang.Object)","42":"XAutoClaimParams::::equals(java.lang.Object)","44":"XAutoClaimParams::::hashCode()","45":"XAutoClaimParams::::hashCode()","46":"XAutoClaimParams::::hashCode()","47":"XAutoClaimParams::::hashCode()"},"test_reverse_method_lines_dic":{"9":"XAutoClaimParamsTest::::checkEqualsIdenticalParams()","10":"XAutoClaimParamsTest::::checkEqualsIdenticalParams()","11":"XAutoClaimParamsTest::::checkEqualsIdenticalParams()","12":"XAutoClaimParamsTest::::checkEqualsIdenticalParams()","13":"XAutoClaimParamsTest::::checkEqualsIdenticalParams()","14":"XAutoClaimParamsTest::::checkEqualsIdenticalParams()","16":"XAutoClaimParamsTest::::checkHashCodeIdenticalParams()","17":"XAutoClaimParamsTest::::checkHashCodeIdenticalParams()","18":"XAutoClaimParamsTest::::checkHashCodeIdenticalParams()","19":"XAutoClaimParamsTest::::checkHashCodeIdenticalParams()","20":"XAutoClaimParamsTest::::checkHashCodeIdenticalParams()","21":"XAutoClaimParamsTest::::checkHashCodeIdenticalParams()","23":"XAutoClaimParamsTest::::checkEqualsVariousParams()","24":"XAutoClaimParamsTest::::checkEqualsVariousParams()","25":"XAutoClaimParamsTest::::checkEqualsVariousParams()","26":"XAutoClaimParamsTest::::checkEqualsVariousParams()","27":"XAutoClaimParamsTest::::checkEqualsVariousParams()","28":"XAutoClaimParamsTest::::checkEqualsVariousParams()","29":"XAutoClaimParamsTest::::checkEqualsVariousParams()","30":"XAutoClaimParamsTest::::checkEqualsVariousParams()","32":"XAutoClaimParamsTest::::checkHashCodeVariousParams()","33":"XAutoClaimParamsTest::::checkHashCodeVariousParams()","34":"XAutoClaimParamsTest::::checkHashCodeVariousParams()","35":"XAutoClaimParamsTest::::checkHashCodeVariousParams()","36":"XAutoClaimParamsTest::::checkHashCodeVariousParams()","37":"XAutoClaimParamsTest::::checkHashCodeVariousParams()","38":"XAutoClaimParamsTest::::checkHashCodeVariousParams()","39":"XAutoClaimParamsTest::::checkHashCodeVariousParams()","41":"XAutoClaimParamsTest::::checkEqualsWithNull()","42":"XAutoClaimParamsTest::::checkEqualsWithNull()","43":"XAutoClaimParamsTest::::checkEqualsWithNull()","44":"XAutoClaimParamsTest::::checkEqualsWithNull()","45":"XAutoClaimParamsTest::::checkEqualsWithNull()","46":"XAutoClaimParamsTest::::checkEqualsWithNull()","48":"XAutoClaimParamsTest::::getDefaultValue()","49":"XAutoClaimParamsTest::::getDefaultValue()","50":"XAutoClaimParamsTest::::getDefaultValue()"},"tests":[{"test_lines":[9,14],"covered_lines":[12,13,38,39,40,41],"label":"XAutoClaimParams::::equals(java.lang.Object)"},{"test_lines":[16,21],"covered_lines":[12,13,46],"label":"XAutoClaimParams::::hashCode()"},{"test_lines":[23,30],"covered_lines":[12,13,25,26,38,39,40,41],"label":"XAutoClaimParams::::equals(java.lang.Object)"},{"test_lines":[32,39],"covered_lines":[12,13,25,26,46],"label":"XAutoClaimParams::::hashCode()"},{"test_lines":[41,46],"covered_lines":[12,13,38,39],"label":"XAutoClaimParams::::equals(java.lang.Object)"}]},"/bernard/dataset_construction/prep/repos/jedis/src/main/java/redis/clients/jedis/params/XClaimParams.java":{"class_content":["package redis.clients.jedis.params;\n","\n","import redis.clients.jedis.CommandArguments;\n","import redis.clients.jedis.Protocol.Keyword;\n","\n","import java.util.Objects;\n","\n","public class XClaimParams implements IParams {\n","\n","  private Long idleTime;\n","  private Long idleUnixTime;\n","  private Integer retryCount;\n","  private boolean force;\n","\n","  public XClaimParams() {\n","  }\n","\n","  public static XClaimParams xClaimParams() {\n","    return new XClaimParams();\n","  }\n","\n","  /**\n","   * Set the idle time (last time it was delivered) of the message.\n","   * @param idleTime\n","   * @return XClaimParams\n","   */\n","  public XClaimParams idle(long idleTime) {\n","    this.idleTime = idleTime;\n","    return this;\n","  }\n","\n","  /**\n","   * Set the idle time to a specific Unix time (in milliseconds).\n","   * @param idleUnixTime\n","   * @return XClaimParams\n","   */\n","  public XClaimParams time(long idleUnixTime) {\n","    this.idleUnixTime = idleUnixTime;\n","    return this;\n","  }\n","\n","  /**\n","   * Set the retry counter to the specified value.\n","   * @param count\n","   * @return XClaimParams\n","   */\n","  public XClaimParams retryCount(int count) {\n","    this.retryCount = count;\n","    return this;\n","  }\n","\n","  /**\n","   * Creates the pending message entry in the PEL even if certain specified IDs are not already in\n","   * the PEL assigned to a different client.\n","   * @return XClaimParams\n","   */\n","  public XClaimParams force() {\n","    this.force = true;\n","    return this;\n","  }\n","\n","  @Override\n","  public void addParams(CommandArguments args) {\n","    if (idleTime != null) {\n","      args.add(Keyword.IDLE).add(idleTime);\n","    }\n","    if (idleUnixTime != null) {\n","      args.add(Keyword.TIME).add(idleUnixTime);\n","    }\n","    if (retryCount != null) {\n","      args.add(Keyword.RETRYCOUNT).add(retryCount);\n","    }\n","    if (force) {\n","      args.add(Keyword.FORCE);\n","    }\n","  }\n","\n","  @Override\n","  public boolean equals(Object o) {\n","    if (this == o) return true;\n","    if (o == null || getClass() != o.getClass()) return false;\n","    XClaimParams that = (XClaimParams) o;\n","    return force == that.force && Objects.equals(idleTime, that.idleTime) && Objects.equals(idleUnixTime, that.idleUnixTime) && Objects.equals(retryCount, that.retryCount);\n","  }\n","\n","  @Override\n","  public int hashCode() {\n","    return Objects.hash(idleTime, idleUnixTime, retryCount, force);\n","  }\n","}\n"],"test_content":["package redis.clients.jedis.params;\n","\n","import org.junit.Test;\n","\n","import static org.junit.Assert.*;\n","\n","public class XClaimParamsTest {\n","\n","    @Test\n","    public void checkEqualsIdenticalParams() {\n","        XClaimParams firstParam = getDefaultValue();\n","        XClaimParams secondParam = getDefaultValue();\n","        assertTrue(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeIdenticalParams() {\n","        XClaimParams firstParam = getDefaultValue();\n","        XClaimParams secondParam = getDefaultValue();\n","        assertEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsVariousParams() {\n","        XClaimParams firstParam = getDefaultValue();\n","        firstParam.time(20);\n","        XClaimParams secondParam = getDefaultValue();\n","        secondParam.time(21);\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeVariousParams() {\n","        XClaimParams firstParam = getDefaultValue();\n","        firstParam.time(20);\n","        XClaimParams secondParam = getDefaultValue();\n","        secondParam.time(21);\n","        assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsWithNull() {\n","        XClaimParams firstParam = getDefaultValue();\n","        XClaimParams secondParam = null;\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    private XClaimParams getDefaultValue() {\n","        return new XClaimParams();\n","    }\n","}\n"],"method_lines_dic":{"XClaimParams::::xClaimParams()":[18,20],"XClaimParams::::idle(long)":[27,30],"XClaimParams::::time(long)":[37,40],"XClaimParams::::retryCount(int)":[47,50],"XClaimParams::::force()":[57,60],"XClaimParams::::addParams(redis.clients.jedis.CommandArguments)":[62,76],"XClaimParams::::equals(java.lang.Object)":[78,84],"XClaimParams::::hashCode()":[86,89]},"test_method_lines_dic":{"XClaimParamsTest::::checkEqualsIdenticalParams()":[9,14],"XClaimParamsTest::::checkHashCodeIdenticalParams()":[16,21],"XClaimParamsTest::::checkEqualsVariousParams()":[23,30],"XClaimParamsTest::::checkHashCodeVariousParams()":[32,39],"XClaimParamsTest::::checkEqualsWithNull()":[41,46],"XClaimParamsTest::::getDefaultValue()":[48,50]},"reverse_method_lines_dic":{"18":"XClaimParams::::xClaimParams()","19":"XClaimParams::::xClaimParams()","20":"XClaimParams::::xClaimParams()","27":"XClaimParams::::idle(long)","28":"XClaimParams::::idle(long)","29":"XClaimParams::::idle(long)","30":"XClaimParams::::idle(long)","37":"XClaimParams::::time(long)","38":"XClaimParams::::time(long)","39":"XClaimParams::::time(long)","40":"XClaimParams::::time(long)","47":"XClaimParams::::retryCount(int)","48":"XClaimParams::::retryCount(int)","49":"XClaimParams::::retryCount(int)","50":"XClaimParams::::retryCount(int)","57":"XClaimParams::::force()","58":"XClaimParams::::force()","59":"XClaimParams::::force()","60":"XClaimParams::::force()","62":"XClaimParams::::addParams(redis.clients.jedis.CommandArguments)","63":"XClaimParams::::addParams(redis.clients.jedis.CommandArguments)","64":"XClaimParams::::addParams(redis.clients.jedis.CommandArguments)","65":"XClaimParams::::addParams(redis.clients.jedis.CommandArguments)","66":"XClaimParams::::addParams(redis.clients.jedis.CommandArguments)","67":"XClaimParams::::addParams(redis.clients.jedis.CommandArguments)","68":"XClaimParams::::addParams(redis.clients.jedis.CommandArguments)","69":"XClaimParams::::addParams(redis.clients.jedis.CommandArguments)","70":"XClaimParams::::addParams(redis.clients.jedis.CommandArguments)","71":"XClaimParams::::addParams(redis.clients.jedis.CommandArguments)","72":"XClaimParams::::addParams(redis.clients.jedis.CommandArguments)","73":"XClaimParams::::addParams(redis.clients.jedis.CommandArguments)","74":"XClaimParams::::addParams(redis.clients.jedis.CommandArguments)","75":"XClaimParams::::addParams(redis.clients.jedis.CommandArguments)","76":"XClaimParams::::addParams(redis.clients.jedis.CommandArguments)","78":"XClaimParams::::equals(java.lang.Object)","79":"XClaimParams::::equals(java.lang.Object)","80":"XClaimParams::::equals(java.lang.Object)","81":"XClaimParams::::equals(java.lang.Object)","82":"XClaimParams::::equals(java.lang.Object)","83":"XClaimParams::::equals(java.lang.Object)","84":"XClaimParams::::equals(java.lang.Object)","86":"XClaimParams::::hashCode()","87":"XClaimParams::::hashCode()","88":"XClaimParams::::hashCode()","89":"XClaimParams::::hashCode()"},"test_reverse_method_lines_dic":{"9":"XClaimParamsTest::::checkEqualsIdenticalParams()","10":"XClaimParamsTest::::checkEqualsIdenticalParams()","11":"XClaimParamsTest::::checkEqualsIdenticalParams()","12":"XClaimParamsTest::::checkEqualsIdenticalParams()","13":"XClaimParamsTest::::checkEqualsIdenticalParams()","14":"XClaimParamsTest::::checkEqualsIdenticalParams()","16":"XClaimParamsTest::::checkHashCodeIdenticalParams()","17":"XClaimParamsTest::::checkHashCodeIdenticalParams()","18":"XClaimParamsTest::::checkHashCodeIdenticalParams()","19":"XClaimParamsTest::::checkHashCodeIdenticalParams()","20":"XClaimParamsTest::::checkHashCodeIdenticalParams()","21":"XClaimParamsTest::::checkHashCodeIdenticalParams()","23":"XClaimParamsTest::::checkEqualsVariousParams()","24":"XClaimParamsTest::::checkEqualsVariousParams()","25":"XClaimParamsTest::::checkEqualsVariousParams()","26":"XClaimParamsTest::::checkEqualsVariousParams()","27":"XClaimParamsTest::::checkEqualsVariousParams()","28":"XClaimParamsTest::::checkEqualsVariousParams()","29":"XClaimParamsTest::::checkEqualsVariousParams()","30":"XClaimParamsTest::::checkEqualsVariousParams()","32":"XClaimParamsTest::::checkHashCodeVariousParams()","33":"XClaimParamsTest::::checkHashCodeVariousParams()","34":"XClaimParamsTest::::checkHashCodeVariousParams()","35":"XClaimParamsTest::::checkHashCodeVariousParams()","36":"XClaimParamsTest::::checkHashCodeVariousParams()","37":"XClaimParamsTest::::checkHashCodeVariousParams()","38":"XClaimParamsTest::::checkHashCodeVariousParams()","39":"XClaimParamsTest::::checkHashCodeVariousParams()","41":"XClaimParamsTest::::checkEqualsWithNull()","42":"XClaimParamsTest::::checkEqualsWithNull()","43":"XClaimParamsTest::::checkEqualsWithNull()","44":"XClaimParamsTest::::checkEqualsWithNull()","45":"XClaimParamsTest::::checkEqualsWithNull()","46":"XClaimParamsTest::::checkEqualsWithNull()","48":"XClaimParamsTest::::getDefaultValue()","49":"XClaimParamsTest::::getDefaultValue()","50":"XClaimParamsTest::::getDefaultValue()"},"tests":[{"test_lines":[9,14],"covered_lines":[15,16,80,81,82,83],"label":"XClaimParams::::equals(java.lang.Object)"},{"test_lines":[16,21],"covered_lines":[15,16,88],"label":"XClaimParams::::hashCode()"},{"test_lines":[23,30],"covered_lines":[15,16,38,39,80,81,82,83],"label":"XClaimParams::::equals(java.lang.Object)"},{"test_lines":[32,39],"covered_lines":[15,16,38,39,88],"label":"XClaimParams::::hashCode()"},{"test_lines":[41,46],"covered_lines":[15,16,80,81]}]},"/bernard/dataset_construction/prep/repos/jedis/src/main/java/redis/clients/jedis/params/XReadGroupParams.java":{"class_content":["package redis.clients.jedis.params;\n","\n","import redis.clients.jedis.CommandArguments;\n","import redis.clients.jedis.Protocol.Keyword;\n","\n","import java.util.Objects;\n","\n","public class XReadGroupParams implements IParams {\n","\n","  private Integer count = null;\n","  private Integer block = null;\n","  private boolean noack = false;\n","\n","  public static XReadGroupParams xReadGroupParams() {\n","    return new XReadGroupParams();\n","  }\n","\n","  public XReadGroupParams count(int count) {\n","    this.count = count;\n","    return this;\n","  }\n","\n","  public XReadGroupParams block(int block) {\n","    this.block = block;\n","    return this;\n","  }\n","\n","  public XReadGroupParams noAck() {\n","    this.noack = true;\n","    return this;\n","  }\n","\n","  @Override\n","  public void addParams(CommandArguments args) {\n","    if (count != null) {\n","      args.add(Keyword.COUNT).add(count);\n","    }\n","    if (block != null) {\n","      args.add(Keyword.BLOCK).add(block).blocking();\n","    }\n","    if (noack) {\n","      args.add(Keyword.NOACK);\n","    }\n","  }\n","\n","  @Override\n","  public boolean equals(Object o) {\n","    if (this == o) return true;\n","    if (o == null || getClass() != o.getClass()) return false;\n","    XReadGroupParams that = (XReadGroupParams) o;\n","    return noack == that.noack && Objects.equals(count, that.count) && Objects.equals(block, that.block);\n","  }\n","\n","  @Override\n","  public int hashCode() {\n","    return Objects.hash(count, block, noack);\n","  }\n","}\n"],"test_content":["package redis.clients.jedis.params;\n","\n","import org.junit.Test;\n","\n","import static org.junit.Assert.*;\n","\n","public class XReadGroupParamsTest {\n","\n","    @Test\n","    public void checkEqualsIdenticalParams() {\n","        XReadGroupParams firstParam = getDefaultValue();\n","        XReadGroupParams secondParam = getDefaultValue();\n","        assertTrue(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeIdenticalParams() {\n","        XReadGroupParams firstParam = getDefaultValue();\n","        XReadGroupParams secondParam = getDefaultValue();\n","        assertEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsVariousParams() {\n","        XReadGroupParams firstParam = getDefaultValue();\n","        firstParam.block(14);\n","        XReadGroupParams secondParam = getDefaultValue();\n","        secondParam.block(15);\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeVariousParams() {\n","        XReadGroupParams firstParam = getDefaultValue();\n","        firstParam.block(14);\n","        XReadGroupParams secondParam = getDefaultValue();\n","        secondParam.block(15);\n","        assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsWithNull() {\n","        XReadGroupParams firstParam = getDefaultValue();\n","        XReadGroupParams secondParam = null;\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    private XReadGroupParams getDefaultValue() {\n","        return new XReadGroupParams();\n","    }\n","}\n"],"method_lines_dic":{"XReadGroupParams::::xReadGroupParams()":[14,16],"XReadGroupParams::::count(int)":[18,21],"XReadGroupParams::::block(int)":[23,26],"XReadGroupParams::::noAck()":[28,31],"XReadGroupParams::::addParams(redis.clients.jedis.CommandArguments)":[33,44],"XReadGroupParams::::equals(java.lang.Object)":[46,52],"XReadGroupParams::::hashCode()":[54,57]},"test_method_lines_dic":{"XReadGroupParamsTest::::checkEqualsIdenticalParams()":[9,14],"XReadGroupParamsTest::::checkHashCodeIdenticalParams()":[16,21],"XReadGroupParamsTest::::checkEqualsVariousParams()":[23,30],"XReadGroupParamsTest::::checkHashCodeVariousParams()":[32,39],"XReadGroupParamsTest::::checkEqualsWithNull()":[41,46],"XReadGroupParamsTest::::getDefaultValue()":[48,50]},"reverse_method_lines_dic":{"14":"XReadGroupParams::::xReadGroupParams()","15":"XReadGroupParams::::xReadGroupParams()","16":"XReadGroupParams::::xReadGroupParams()","18":"XReadGroupParams::::count(int)","19":"XReadGroupParams::::count(int)","20":"XReadGroupParams::::count(int)","21":"XReadGroupParams::::count(int)","23":"XReadGroupParams::::block(int)","24":"XReadGroupParams::::block(int)","25":"XReadGroupParams::::block(int)","26":"XReadGroupParams::::block(int)","28":"XReadGroupParams::::noAck()","29":"XReadGroupParams::::noAck()","30":"XReadGroupParams::::noAck()","31":"XReadGroupParams::::noAck()","33":"XReadGroupParams::::addParams(redis.clients.jedis.CommandArguments)","34":"XReadGroupParams::::addParams(redis.clients.jedis.CommandArguments)","35":"XReadGroupParams::::addParams(redis.clients.jedis.CommandArguments)","36":"XReadGroupParams::::addParams(redis.clients.jedis.CommandArguments)","37":"XReadGroupParams::::addParams(redis.clients.jedis.CommandArguments)","38":"XReadGroupParams::::addParams(redis.clients.jedis.CommandArguments)","39":"XReadGroupParams::::addParams(redis.clients.jedis.CommandArguments)","40":"XReadGroupParams::::addParams(redis.clients.jedis.CommandArguments)","41":"XReadGroupParams::::addParams(redis.clients.jedis.CommandArguments)","42":"XReadGroupParams::::addParams(redis.clients.jedis.CommandArguments)","43":"XReadGroupParams::::addParams(redis.clients.jedis.CommandArguments)","44":"XReadGroupParams::::addParams(redis.clients.jedis.CommandArguments)","46":"XReadGroupParams::::equals(java.lang.Object)","47":"XReadGroupParams::::equals(java.lang.Object)","48":"XReadGroupParams::::equals(java.lang.Object)","49":"XReadGroupParams::::equals(java.lang.Object)","50":"XReadGroupParams::::equals(java.lang.Object)","51":"XReadGroupParams::::equals(java.lang.Object)","52":"XReadGroupParams::::equals(java.lang.Object)","54":"XReadGroupParams::::hashCode()","55":"XReadGroupParams::::hashCode()","56":"XReadGroupParams::::hashCode()","57":"XReadGroupParams::::hashCode()"},"test_reverse_method_lines_dic":{"9":"XReadGroupParamsTest::::checkEqualsIdenticalParams()","10":"XReadGroupParamsTest::::checkEqualsIdenticalParams()","11":"XReadGroupParamsTest::::checkEqualsIdenticalParams()","12":"XReadGroupParamsTest::::checkEqualsIdenticalParams()","13":"XReadGroupParamsTest::::checkEqualsIdenticalParams()","14":"XReadGroupParamsTest::::checkEqualsIdenticalParams()","16":"XReadGroupParamsTest::::checkHashCodeIdenticalParams()","17":"XReadGroupParamsTest::::checkHashCodeIdenticalParams()","18":"XReadGroupParamsTest::::checkHashCodeIdenticalParams()","19":"XReadGroupParamsTest::::checkHashCodeIdenticalParams()","20":"XReadGroupParamsTest::::checkHashCodeIdenticalParams()","21":"XReadGroupParamsTest::::checkHashCodeIdenticalParams()","23":"XReadGroupParamsTest::::checkEqualsVariousParams()","24":"XReadGroupParamsTest::::checkEqualsVariousParams()","25":"XReadGroupParamsTest::::checkEqualsVariousParams()","26":"XReadGroupParamsTest::::checkEqualsVariousParams()","27":"XReadGroupParamsTest::::checkEqualsVariousParams()","28":"XReadGroupParamsTest::::checkEqualsVariousParams()","29":"XReadGroupParamsTest::::checkEqualsVariousParams()","30":"XReadGroupParamsTest::::checkEqualsVariousParams()","32":"XReadGroupParamsTest::::checkHashCodeVariousParams()","33":"XReadGroupParamsTest::::checkHashCodeVariousParams()","34":"XReadGroupParamsTest::::checkHashCodeVariousParams()","35":"XReadGroupParamsTest::::checkHashCodeVariousParams()","36":"XReadGroupParamsTest::::checkHashCodeVariousParams()","37":"XReadGroupParamsTest::::checkHashCodeVariousParams()","38":"XReadGroupParamsTest::::checkHashCodeVariousParams()","39":"XReadGroupParamsTest::::checkHashCodeVariousParams()","41":"XReadGroupParamsTest::::checkEqualsWithNull()","42":"XReadGroupParamsTest::::checkEqualsWithNull()","43":"XReadGroupParamsTest::::checkEqualsWithNull()","44":"XReadGroupParamsTest::::checkEqualsWithNull()","45":"XReadGroupParamsTest::::checkEqualsWithNull()","46":"XReadGroupParamsTest::::checkEqualsWithNull()","48":"XReadGroupParamsTest::::getDefaultValue()","49":"XReadGroupParamsTest::::getDefaultValue()","50":"XReadGroupParamsTest::::getDefaultValue()"},"tests":[{"test_lines":[9,14],"covered_lines":[8,10,11,12,48,49,50,51]},{"test_lines":[16,21],"covered_lines":[8,10,11,12,56]},{"test_lines":[23,30],"covered_lines":[8,10,11,12,24,25,48,49,50,51]},{"test_lines":[32,39],"covered_lines":[8,10,11,12,24,25,56]},{"test_lines":[41,46],"covered_lines":[8,10,11,12,48,49]}]},"/bernard/dataset_construction/prep/repos/jedis/src/main/java/redis/clients/jedis/params/FailoverParams.java":{"class_content":["package redis.clients.jedis.params;\n","\n","import redis.clients.jedis.CommandArguments;\n","import redis.clients.jedis.HostAndPort;\n","import redis.clients.jedis.Protocol.Keyword;\n","\n","import java.util.Objects;\n","\n","public class FailoverParams implements IParams {\n","\n","  private HostAndPort to;\n","\n","  private boolean force;\n","\n","  private Long timeout;\n","\n","  public static FailoverParams failoverParams() {\n","    return new FailoverParams();\n","  }\n","\n","  public FailoverParams to(String host, int port) {\n","    return to(new HostAndPort(host, port));\n","  }\n","\n","  public FailoverParams to(HostAndPort to) {\n","    this.to = to;\n","    return this;\n","  }\n","\n","  /**\n","   * Both TO ({@link FailoverParams#to(redis.clients.jedis.HostAndPort)} or\n","   * {@link FailoverParams#to(java.lang.String, int)}) and\n","   * {@link FailoverParams#timeout(long) TIMEOUT} must be set in order for FORCE option.\n","   */\n","  public FailoverParams force() {\n","    this.force = true;\n","    return this;\n","  }\n","\n","  public FailoverParams timeout(long timeout) {\n","    this.timeout = timeout;\n","    return this;\n","  }\n","\n","  @Override\n","  public void addParams(CommandArguments args) {\n","\n","    if (to != null) {\n","      args.add(Keyword.TO).add(to.getHost()).add(to.getPort());\n","    }\n","\n","    if (force) {\n","      if (to == null || timeout == null) {\n","        throw new IllegalArgumentException(\"FAILOVER with force option requires both a timeout and target HOST and IP.\");\n","      }\n","      args.add(Keyword.FORCE);\n","    }\n","\n","    if (timeout != null) {\n","      args.add(Keyword.TIMEOUT).add(timeout);\n","    }\n","\n","  }\n","\n","  @Override\n","  public boolean equals(Object o) {\n","    if (this == o) return true;\n","    if (o == null || getClass() != o.getClass()) return false;\n","    FailoverParams that = (FailoverParams) o;\n","    return force == that.force && Objects.equals(to, that.to) && Objects.equals(timeout, that.timeout);\n","  }\n","\n","  @Override\n","  public int hashCode() {\n","    return Objects.hash(to, force, timeout);\n","  }\n","}\n"],"test_content":["package redis.clients.jedis.params;\n","\n","import org.junit.Test;\n","\n","import static org.junit.Assert.*;\n","\n","public class FailoverParamsTest {\n","\n","    @Test\n","    public void checkEqualsIdenticalParams() {\n","        FailoverParams firstParam = getDefaultValue();\n","        FailoverParams secondParam = getDefaultValue();\n","        assertTrue(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeIdenticalParams() {\n","        FailoverParams firstParam = getDefaultValue();\n","        FailoverParams secondParam = getDefaultValue();\n","        assertEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsVariousParams() {\n","        FailoverParams firstParam = getDefaultValue();\n","        firstParam.timeout(15);\n","        FailoverParams secondParam = getDefaultValue();\n","        secondParam.timeout(20);\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeVariousParams() {\n","        FailoverParams firstParam = getDefaultValue();\n","        firstParam.timeout(15);\n","        FailoverParams secondParam = getDefaultValue();\n","        secondParam.timeout(20);\n","        assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsWithNull() {\n","        FailoverParams firstParam = getDefaultValue();\n","        FailoverParams secondParam = null;\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    private FailoverParams getDefaultValue() {\n","        return new FailoverParams();\n","    }\n","}\n"],"method_lines_dic":{"FailoverParams::::failoverParams()":[17,19],"FailoverParams::::to(java.lang.String,int)":[21,23],"FailoverParams::::to(redis.clients.jedis.HostAndPort)":[25,28],"FailoverParams::::force()":[35,38],"FailoverParams::::timeout(long)":[40,43],"FailoverParams::::addParams(redis.clients.jedis.CommandArguments)":[45,63],"FailoverParams::::equals(java.lang.Object)":[65,71],"FailoverParams::::hashCode()":[73,76]},"test_method_lines_dic":{"FailoverParamsTest::::checkEqualsIdenticalParams()":[9,14],"FailoverParamsTest::::checkHashCodeIdenticalParams()":[16,21],"FailoverParamsTest::::checkEqualsVariousParams()":[23,30],"FailoverParamsTest::::checkHashCodeVariousParams()":[32,39],"FailoverParamsTest::::checkEqualsWithNull()":[41,46],"FailoverParamsTest::::getDefaultValue()":[48,50]},"reverse_method_lines_dic":{"17":"FailoverParams::::failoverParams()","18":"FailoverParams::::failoverParams()","19":"FailoverParams::::failoverParams()","21":"FailoverParams::::to(java.lang.String,int)","22":"FailoverParams::::to(java.lang.String,int)","23":"FailoverParams::::to(java.lang.String,int)","25":"FailoverParams::::to(redis.clients.jedis.HostAndPort)","26":"FailoverParams::::to(redis.clients.jedis.HostAndPort)","27":"FailoverParams::::to(redis.clients.jedis.HostAndPort)","28":"FailoverParams::::to(redis.clients.jedis.HostAndPort)","35":"FailoverParams::::force()","36":"FailoverParams::::force()","37":"FailoverParams::::force()","38":"FailoverParams::::force()","40":"FailoverParams::::timeout(long)","41":"FailoverParams::::timeout(long)","42":"FailoverParams::::timeout(long)","43":"FailoverParams::::timeout(long)","45":"FailoverParams::::addParams(redis.clients.jedis.CommandArguments)","46":"FailoverParams::::addParams(redis.clients.jedis.CommandArguments)","47":"FailoverParams::::addParams(redis.clients.jedis.CommandArguments)","48":"FailoverParams::::addParams(redis.clients.jedis.CommandArguments)","49":"FailoverParams::::addParams(redis.clients.jedis.CommandArguments)","50":"FailoverParams::::addParams(redis.clients.jedis.CommandArguments)","51":"FailoverParams::::addParams(redis.clients.jedis.CommandArguments)","52":"FailoverParams::::addParams(redis.clients.jedis.CommandArguments)","53":"FailoverParams::::addParams(redis.clients.jedis.CommandArguments)","54":"FailoverParams::::addParams(redis.clients.jedis.CommandArguments)","55":"FailoverParams::::addParams(redis.clients.jedis.CommandArguments)","56":"FailoverParams::::addParams(redis.clients.jedis.CommandArguments)","57":"FailoverParams::::addParams(redis.clients.jedis.CommandArguments)","58":"FailoverParams::::addParams(redis.clients.jedis.CommandArguments)","59":"FailoverParams::::addParams(redis.clients.jedis.CommandArguments)","60":"FailoverParams::::addParams(redis.clients.jedis.CommandArguments)","61":"FailoverParams::::addParams(redis.clients.jedis.CommandArguments)","62":"FailoverParams::::addParams(redis.clients.jedis.CommandArguments)","63":"FailoverParams::::addParams(redis.clients.jedis.CommandArguments)","65":"FailoverParams::::equals(java.lang.Object)","66":"FailoverParams::::equals(java.lang.Object)","67":"FailoverParams::::equals(java.lang.Object)","68":"FailoverParams::::equals(java.lang.Object)","69":"FailoverParams::::equals(java.lang.Object)","70":"FailoverParams::::equals(java.lang.Object)","71":"FailoverParams::::equals(java.lang.Object)","73":"FailoverParams::::hashCode()","74":"FailoverParams::::hashCode()","75":"FailoverParams::::hashCode()","76":"FailoverParams::::hashCode()"},"test_reverse_method_lines_dic":{"9":"FailoverParamsTest::::checkEqualsIdenticalParams()","10":"FailoverParamsTest::::checkEqualsIdenticalParams()","11":"FailoverParamsTest::::checkEqualsIdenticalParams()","12":"FailoverParamsTest::::checkEqualsIdenticalParams()","13":"FailoverParamsTest::::checkEqualsIdenticalParams()","14":"FailoverParamsTest::::checkEqualsIdenticalParams()","16":"FailoverParamsTest::::checkHashCodeIdenticalParams()","17":"FailoverParamsTest::::checkHashCodeIdenticalParams()","18":"FailoverParamsTest::::checkHashCodeIdenticalParams()","19":"FailoverParamsTest::::checkHashCodeIdenticalParams()","20":"FailoverParamsTest::::checkHashCodeIdenticalParams()","21":"FailoverParamsTest::::checkHashCodeIdenticalParams()","23":"FailoverParamsTest::::checkEqualsVariousParams()","24":"FailoverParamsTest::::checkEqualsVariousParams()","25":"FailoverParamsTest::::checkEqualsVariousParams()","26":"FailoverParamsTest::::checkEqualsVariousParams()","27":"FailoverParamsTest::::checkEqualsVariousParams()","28":"FailoverParamsTest::::checkEqualsVariousParams()","29":"FailoverParamsTest::::checkEqualsVariousParams()","30":"FailoverParamsTest::::checkEqualsVariousParams()","32":"FailoverParamsTest::::checkHashCodeVariousParams()","33":"FailoverParamsTest::::checkHashCodeVariousParams()","34":"FailoverParamsTest::::checkHashCodeVariousParams()","35":"FailoverParamsTest::::checkHashCodeVariousParams()","36":"FailoverParamsTest::::checkHashCodeVariousParams()","37":"FailoverParamsTest::::checkHashCodeVariousParams()","38":"FailoverParamsTest::::checkHashCodeVariousParams()","39":"FailoverParamsTest::::checkHashCodeVariousParams()","41":"FailoverParamsTest::::checkEqualsWithNull()","42":"FailoverParamsTest::::checkEqualsWithNull()","43":"FailoverParamsTest::::checkEqualsWithNull()","44":"FailoverParamsTest::::checkEqualsWithNull()","45":"FailoverParamsTest::::checkEqualsWithNull()","46":"FailoverParamsTest::::checkEqualsWithNull()","48":"FailoverParamsTest::::getDefaultValue()","49":"FailoverParamsTest::::getDefaultValue()","50":"FailoverParamsTest::::getDefaultValue()"},"tests":[{"test_lines":[9,14],"covered_lines":[9,67,68,69,70]},{"test_lines":[16,21],"covered_lines":[9,75]},{"test_lines":[23,30],"covered_lines":[9,41,42,67,68,69,70]},{"test_lines":[32,39],"covered_lines":[9,41,42,75]},{"test_lines":[41,46],"covered_lines":[9,67,68]}]},"/bernard/dataset_construction/prep/repos/jedis/src/main/java/redis/clients/jedis/params/GeoAddParams.java":{"class_content":["package redis.clients.jedis.params;\n","\n","import redis.clients.jedis.CommandArguments;\n","import redis.clients.jedis.Protocol.Keyword;\n","\n","import java.util.Objects;\n","\n","public class GeoAddParams implements IParams {\n","\n","  private boolean nx = false;\n","  private boolean xx = false;\n","  private boolean ch = false;\n","\n","  public GeoAddParams() {\n","  }\n","\n","  public static GeoAddParams geoAddParams() {\n","    return new GeoAddParams();\n","  }\n","\n","  /**\n","   * Don't update already existing elements. Always add new elements.\n","   * @return GetExParams\n","   */\n","  public GeoAddParams nx() {\n","    this.nx = true;\n","    return this;\n","  }\n","\n","  /**\n","   * Only update elements that already exist. Never add elements.\n","   * @return GetExParams\n","   */\n","  public GeoAddParams xx() {\n","    this.xx = true;\n","    return this;\n","  }\n","\n","  /**\n","   * Modify the return value from the number of new elements added, to the total number of elements\n","   * changed\n","   * @return GetExParams\n","   */\n","  public GeoAddParams ch() {\n","    this.ch = true;\n","    return this;\n","  }\n","\n","  @Override\n","  public void addParams(CommandArguments args) {\n","    if (nx) {\n","      args.add(Keyword.NX);\n","    } else if (xx) {\n","      args.add(Keyword.XX);\n","    }\n","\n","    if (ch) {\n","      args.add(Keyword.CH);\n","    }\n","  }\n","\n","  @Override\n","  public boolean equals(Object o) {\n","    if (this == o) return true;\n","    if (o == null || getClass() != o.getClass()) return false;\n","    GeoAddParams that = (GeoAddParams) o;\n","    return nx == that.nx && xx == that.xx && ch == that.ch;\n","  }\n","\n","  @Override\n","  public int hashCode() {\n","    return Objects.hash(nx, xx, ch);\n","  }\n","}\n"],"test_content":["package redis.clients.jedis.params;\n","\n","import org.junit.Test;\n","\n","import static org.junit.Assert.*;\n","\n","public class GeoAddParamsTest {\n","\n","    @Test\n","    public void checkEqualsIdenticalParams() {\n","        GeoAddParams firstParam = getDefaultValue();\n","        GeoAddParams secondParam = getDefaultValue();\n","        assertTrue(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeIdenticalParams() {\n","        GeoAddParams firstParam = getDefaultValue();\n","        GeoAddParams secondParam = getDefaultValue();\n","        assertEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsVariousParams() {\n","        GeoAddParams firstParam = getDefaultValue();\n","        firstParam.nx();\n","        GeoAddParams secondParam = getDefaultValue();\n","        secondParam.xx();\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeVariousParams() {\n","        GeoAddParams firstParam = getDefaultValue();\n","        firstParam.nx();\n","        GeoAddParams secondParam = getDefaultValue();\n","        secondParam.xx();\n","        assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsWithNull() {\n","        GeoAddParams firstParam = getDefaultValue();\n","        GeoAddParams secondParam = null;\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    private GeoAddParams getDefaultValue() {\n","        return new GeoAddParams();\n","    }\n","}\n"],"method_lines_dic":{"GeoAddParams::::geoAddParams()":[17,19],"GeoAddParams::::nx()":[25,28],"GeoAddParams::::xx()":[34,37],"GeoAddParams::::ch()":[44,47],"GeoAddParams::::addParams(redis.clients.jedis.CommandArguments)":[49,60],"GeoAddParams::::equals(java.lang.Object)":[62,68],"GeoAddParams::::hashCode()":[70,73]},"test_method_lines_dic":{"GeoAddParamsTest::::checkEqualsIdenticalParams()":[9,14],"GeoAddParamsTest::::checkHashCodeIdenticalParams()":[16,21],"GeoAddParamsTest::::checkEqualsVariousParams()":[23,30],"GeoAddParamsTest::::checkHashCodeVariousParams()":[32,39],"GeoAddParamsTest::::checkEqualsWithNull()":[41,46],"GeoAddParamsTest::::getDefaultValue()":[48,50]},"reverse_method_lines_dic":{"17":"GeoAddParams::::geoAddParams()","18":"GeoAddParams::::geoAddParams()","19":"GeoAddParams::::geoAddParams()","25":"GeoAddParams::::nx()","26":"GeoAddParams::::nx()","27":"GeoAddParams::::nx()","28":"GeoAddParams::::nx()","34":"GeoAddParams::::xx()","35":"GeoAddParams::::xx()","36":"GeoAddParams::::xx()","37":"GeoAddParams::::xx()","44":"GeoAddParams::::ch()","45":"GeoAddParams::::ch()","46":"GeoAddParams::::ch()","47":"GeoAddParams::::ch()","49":"GeoAddParams::::addParams(redis.clients.jedis.CommandArguments)","50":"GeoAddParams::::addParams(redis.clients.jedis.CommandArguments)","51":"GeoAddParams::::addParams(redis.clients.jedis.CommandArguments)","52":"GeoAddParams::::addParams(redis.clients.jedis.CommandArguments)","53":"GeoAddParams::::addParams(redis.clients.jedis.CommandArguments)","54":"GeoAddParams::::addParams(redis.clients.jedis.CommandArguments)","55":"GeoAddParams::::addParams(redis.clients.jedis.CommandArguments)","56":"GeoAddParams::::addParams(redis.clients.jedis.CommandArguments)","57":"GeoAddParams::::addParams(redis.clients.jedis.CommandArguments)","58":"GeoAddParams::::addParams(redis.clients.jedis.CommandArguments)","59":"GeoAddParams::::addParams(redis.clients.jedis.CommandArguments)","60":"GeoAddParams::::addParams(redis.clients.jedis.CommandArguments)","62":"GeoAddParams::::equals(java.lang.Object)","63":"GeoAddParams::::equals(java.lang.Object)","64":"GeoAddParams::::equals(java.lang.Object)","65":"GeoAddParams::::equals(java.lang.Object)","66":"GeoAddParams::::equals(java.lang.Object)","67":"GeoAddParams::::equals(java.lang.Object)","68":"GeoAddParams::::equals(java.lang.Object)","70":"GeoAddParams::::hashCode()","71":"GeoAddParams::::hashCode()","72":"GeoAddParams::::hashCode()","73":"GeoAddParams::::hashCode()"},"test_reverse_method_lines_dic":{"9":"GeoAddParamsTest::::checkEqualsIdenticalParams()","10":"GeoAddParamsTest::::checkEqualsIdenticalParams()","11":"GeoAddParamsTest::::checkEqualsIdenticalParams()","12":"GeoAddParamsTest::::checkEqualsIdenticalParams()","13":"GeoAddParamsTest::::checkEqualsIdenticalParams()","14":"GeoAddParamsTest::::checkEqualsIdenticalParams()","16":"GeoAddParamsTest::::checkHashCodeIdenticalParams()","17":"GeoAddParamsTest::::checkHashCodeIdenticalParams()","18":"GeoAddParamsTest::::checkHashCodeIdenticalParams()","19":"GeoAddParamsTest::::checkHashCodeIdenticalParams()","20":"GeoAddParamsTest::::checkHashCodeIdenticalParams()","21":"GeoAddParamsTest::::checkHashCodeIdenticalParams()","23":"GeoAddParamsTest::::checkEqualsVariousParams()","24":"GeoAddParamsTest::::checkEqualsVariousParams()","25":"GeoAddParamsTest::::checkEqualsVariousParams()","26":"GeoAddParamsTest::::checkEqualsVariousParams()","27":"GeoAddParamsTest::::checkEqualsVariousParams()","28":"GeoAddParamsTest::::checkEqualsVariousParams()","29":"GeoAddParamsTest::::checkEqualsVariousParams()","30":"GeoAddParamsTest::::checkEqualsVariousParams()","32":"GeoAddParamsTest::::checkHashCodeVariousParams()","33":"GeoAddParamsTest::::checkHashCodeVariousParams()","34":"GeoAddParamsTest::::checkHashCodeVariousParams()","35":"GeoAddParamsTest::::checkHashCodeVariousParams()","36":"GeoAddParamsTest::::checkHashCodeVariousParams()","37":"GeoAddParamsTest::::checkHashCodeVariousParams()","38":"GeoAddParamsTest::::checkHashCodeVariousParams()","39":"GeoAddParamsTest::::checkHashCodeVariousParams()","41":"GeoAddParamsTest::::checkEqualsWithNull()","42":"GeoAddParamsTest::::checkEqualsWithNull()","43":"GeoAddParamsTest::::checkEqualsWithNull()","44":"GeoAddParamsTest::::checkEqualsWithNull()","45":"GeoAddParamsTest::::checkEqualsWithNull()","46":"GeoAddParamsTest::::checkEqualsWithNull()","48":"GeoAddParamsTest::::getDefaultValue()","49":"GeoAddParamsTest::::getDefaultValue()","50":"GeoAddParamsTest::::getDefaultValue()"},"tests":[{"test_lines":[9,14],"covered_lines":[10,11,12,14,15,64,65,66,67]},{"test_lines":[16,21],"covered_lines":[10,11,12,14,15,72]},{"test_lines":[23,30],"covered_lines":[10,11,12,14,15,26,27,35,36,64,65,66,67]},{"test_lines":[32,39],"covered_lines":[10,11,12,14,15,26,27,35,36,72]},{"test_lines":[41,46],"covered_lines":[10,11,12,14,15,64,65]}]},"/bernard/dataset_construction/prep/repos/jedis/src/main/java/redis/clients/jedis/params/XTrimParams.java":{"class_content":["package redis.clients.jedis.params;\n","\n","import redis.clients.jedis.CommandArguments;\n","import redis.clients.jedis.Protocol;\n","import redis.clients.jedis.Protocol.Keyword;\n","\n","import java.util.Objects;\n","\n","public class XTrimParams implements IParams {\n","\n","  private Long maxLen;\n","\n","  private boolean approximateTrimming;\n","\n","  private boolean exactTrimming;\n","\n","  private String minId;\n","\n","  private Long limit;\n","\n","  public static XTrimParams xTrimParams() {\n","    return new XTrimParams();\n","  }\n","\n","\n","  public XTrimParams maxLen(long maxLen) {\n","    this.maxLen = maxLen;\n","    return this;\n","  }\n","\n","  public XTrimParams minId(String minId) {\n","    this.minId = minId;\n","    return this;\n","  }\n","\n","  public XTrimParams approximateTrimming() {\n","    this.approximateTrimming = true;\n","    return this;\n","  }\n","\n","  public XTrimParams exactTrimming() {\n","    this.exactTrimming = true;\n","    return this;\n","  }\n","\n","  public XTrimParams limit(long limit) {\n","    this.limit = limit;\n","    return this;\n","  }\n","\n","  @Override\n","  public void addParams(CommandArguments args) {\n","    if (maxLen != null) {\n","      args.add(Keyword.MAXLEN);\n","\n","      if (approximateTrimming) {\n","        args.add(Protocol.BYTES_TILDE);\n","      } else if (exactTrimming) {\n","        args.add(Protocol.BYTES_EQUAL);\n","      }\n","\n","      args.add(Protocol.toByteArray(maxLen));\n","    } else if (minId != null) {\n","      args.add(Keyword.MINID);\n","\n","      if (approximateTrimming) {\n","        args.add(Protocol.BYTES_TILDE);\n","      } else if (exactTrimming) {\n","        args.add(Protocol.BYTES_EQUAL);\n","      }\n","\n","      args.add(minId);\n","    }\n","\n","    if (limit != null) {\n","      args.add(Keyword.LIMIT).add(limit);\n","    }\n","  }\n","\n","  @Override\n","  public boolean equals(Object o) {\n","    if (this == o) return true;\n","    if (o == null || getClass() != o.getClass()) return false;\n","    XTrimParams that = (XTrimParams) o;\n","    return approximateTrimming == that.approximateTrimming && exactTrimming == that.exactTrimming && Objects.equals(maxLen, that.maxLen) && Objects.equals(minId, that.minId) && Objects.equals(limit, that.limit);\n","  }\n","\n","  @Override\n","  public int hashCode() {\n","    return Objects.hash(maxLen, approximateTrimming, exactTrimming, minId, limit);\n","  }\n","}\n"],"test_content":["package redis.clients.jedis.params;\n","\n","import org.junit.Test;\n","\n","import static org.junit.Assert.*;\n","\n","public class XTrimParamsTest {\n","\n","    @Test\n","    public void checkEqualsIdenticalParams() {\n","        XTrimParams firstParam = getDefaultValue();\n","        XTrimParams secondParam = getDefaultValue();\n","        assertTrue(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeIdenticalParams() {\n","        XTrimParams firstParam = getDefaultValue();\n","        XTrimParams secondParam = getDefaultValue();\n","        assertEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsVariousParams() {\n","        XTrimParams firstParam = getDefaultValue();\n","        firstParam.maxLen(15);\n","        XTrimParams secondParam = getDefaultValue();\n","        secondParam.maxLen(16);\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeVariousParams() {\n","        XTrimParams firstParam = getDefaultValue();\n","        firstParam.maxLen(15);\n","        XTrimParams secondParam = getDefaultValue();\n","        secondParam.maxLen(16);\n","        assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsWithNull() {\n","        XTrimParams firstParam = getDefaultValue();\n","        XTrimParams secondParam = null;\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    private XTrimParams getDefaultValue() {\n","        return new XTrimParams();\n","    }\n","}\n"],"method_lines_dic":{"XTrimParams::::xTrimParams()":[21,23],"XTrimParams::::maxLen(long)":[26,29],"XTrimParams::::minId(java.lang.String)":[31,34],"XTrimParams::::approximateTrimming()":[36,39],"XTrimParams::::exactTrimming()":[41,44],"XTrimParams::::limit(long)":[46,49],"XTrimParams::::addParams(redis.clients.jedis.CommandArguments)":[51,78],"XTrimParams::::equals(java.lang.Object)":[80,86],"XTrimParams::::hashCode()":[88,91]},"test_method_lines_dic":{"XTrimParamsTest::::checkEqualsIdenticalParams()":[9,14],"XTrimParamsTest::::checkHashCodeIdenticalParams()":[16,21],"XTrimParamsTest::::checkEqualsVariousParams()":[23,30],"XTrimParamsTest::::checkHashCodeVariousParams()":[32,39],"XTrimParamsTest::::checkEqualsWithNull()":[41,46],"XTrimParamsTest::::getDefaultValue()":[48,50]},"reverse_method_lines_dic":{"21":"XTrimParams::::xTrimParams()","22":"XTrimParams::::xTrimParams()","23":"XTrimParams::::xTrimParams()","26":"XTrimParams::::maxLen(long)","27":"XTrimParams::::maxLen(long)","28":"XTrimParams::::maxLen(long)","29":"XTrimParams::::maxLen(long)","31":"XTrimParams::::minId(java.lang.String)","32":"XTrimParams::::minId(java.lang.String)","33":"XTrimParams::::minId(java.lang.String)","34":"XTrimParams::::minId(java.lang.String)","36":"XTrimParams::::approximateTrimming()","37":"XTrimParams::::approximateTrimming()","38":"XTrimParams::::approximateTrimming()","39":"XTrimParams::::approximateTrimming()","41":"XTrimParams::::exactTrimming()","42":"XTrimParams::::exactTrimming()","43":"XTrimParams::::exactTrimming()","44":"XTrimParams::::exactTrimming()","46":"XTrimParams::::limit(long)","47":"XTrimParams::::limit(long)","48":"XTrimParams::::limit(long)","49":"XTrimParams::::limit(long)","51":"XTrimParams::::addParams(redis.clients.jedis.CommandArguments)","52":"XTrimParams::::addParams(redis.clients.jedis.CommandArguments)","53":"XTrimParams::::addParams(redis.clients.jedis.CommandArguments)","54":"XTrimParams::::addParams(redis.clients.jedis.CommandArguments)","55":"XTrimParams::::addParams(redis.clients.jedis.CommandArguments)","56":"XTrimParams::::addParams(redis.clients.jedis.CommandArguments)","57":"XTrimParams::::addParams(redis.clients.jedis.CommandArguments)","58":"XTrimParams::::addParams(redis.clients.jedis.CommandArguments)","59":"XTrimParams::::addParams(redis.clients.jedis.CommandArguments)","60":"XTrimParams::::addParams(redis.clients.jedis.CommandArguments)","61":"XTrimParams::::addParams(redis.clients.jedis.CommandArguments)","62":"XTrimParams::::addParams(redis.clients.jedis.CommandArguments)","63":"XTrimParams::::addParams(redis.clients.jedis.CommandArguments)","64":"XTrimParams::::addParams(redis.clients.jedis.CommandArguments)","65":"XTrimParams::::addParams(redis.clients.jedis.CommandArguments)","66":"XTrimParams::::addParams(redis.clients.jedis.CommandArguments)","67":"XTrimParams::::addParams(redis.clients.jedis.CommandArguments)","68":"XTrimParams::::addParams(redis.clients.jedis.CommandArguments)","69":"XTrimParams::::addParams(redis.clients.jedis.CommandArguments)","70":"XTrimParams::::addParams(redis.clients.jedis.CommandArguments)","71":"XTrimParams::::addParams(redis.clients.jedis.CommandArguments)","72":"XTrimParams::::addParams(redis.clients.jedis.CommandArguments)","73":"XTrimParams::::addParams(redis.clients.jedis.CommandArguments)","74":"XTrimParams::::addParams(redis.clients.jedis.CommandArguments)","75":"XTrimParams::::addParams(redis.clients.jedis.CommandArguments)","76":"XTrimParams::::addParams(redis.clients.jedis.CommandArguments)","77":"XTrimParams::::addParams(redis.clients.jedis.CommandArguments)","78":"XTrimParams::::addParams(redis.clients.jedis.CommandArguments)","80":"XTrimParams::::equals(java.lang.Object)","81":"XTrimParams::::equals(java.lang.Object)","82":"XTrimParams::::equals(java.lang.Object)","83":"XTrimParams::::equals(java.lang.Object)","84":"XTrimParams::::equals(java.lang.Object)","85":"XTrimParams::::equals(java.lang.Object)","86":"XTrimParams::::equals(java.lang.Object)","88":"XTrimParams::::hashCode()","89":"XTrimParams::::hashCode()","90":"XTrimParams::::hashCode()","91":"XTrimParams::::hashCode()"},"test_reverse_method_lines_dic":{"9":"XTrimParamsTest::::checkEqualsIdenticalParams()","10":"XTrimParamsTest::::checkEqualsIdenticalParams()","11":"XTrimParamsTest::::checkEqualsIdenticalParams()","12":"XTrimParamsTest::::checkEqualsIdenticalParams()","13":"XTrimParamsTest::::checkEqualsIdenticalParams()","14":"XTrimParamsTest::::checkEqualsIdenticalParams()","16":"XTrimParamsTest::::checkHashCodeIdenticalParams()","17":"XTrimParamsTest::::checkHashCodeIdenticalParams()","18":"XTrimParamsTest::::checkHashCodeIdenticalParams()","19":"XTrimParamsTest::::checkHashCodeIdenticalParams()","20":"XTrimParamsTest::::checkHashCodeIdenticalParams()","21":"XTrimParamsTest::::checkHashCodeIdenticalParams()","23":"XTrimParamsTest::::checkEqualsVariousParams()","24":"XTrimParamsTest::::checkEqualsVariousParams()","25":"XTrimParamsTest::::checkEqualsVariousParams()","26":"XTrimParamsTest::::checkEqualsVariousParams()","27":"XTrimParamsTest::::checkEqualsVariousParams()","28":"XTrimParamsTest::::checkEqualsVariousParams()","29":"XTrimParamsTest::::checkEqualsVariousParams()","30":"XTrimParamsTest::::checkEqualsVariousParams()","32":"XTrimParamsTest::::checkHashCodeVariousParams()","33":"XTrimParamsTest::::checkHashCodeVariousParams()","34":"XTrimParamsTest::::checkHashCodeVariousParams()","35":"XTrimParamsTest::::checkHashCodeVariousParams()","36":"XTrimParamsTest::::checkHashCodeVariousParams()","37":"XTrimParamsTest::::checkHashCodeVariousParams()","38":"XTrimParamsTest::::checkHashCodeVariousParams()","39":"XTrimParamsTest::::checkHashCodeVariousParams()","41":"XTrimParamsTest::::checkEqualsWithNull()","42":"XTrimParamsTest::::checkEqualsWithNull()","43":"XTrimParamsTest::::checkEqualsWithNull()","44":"XTrimParamsTest::::checkEqualsWithNull()","45":"XTrimParamsTest::::checkEqualsWithNull()","46":"XTrimParamsTest::::checkEqualsWithNull()","48":"XTrimParamsTest::::getDefaultValue()","49":"XTrimParamsTest::::getDefaultValue()","50":"XTrimParamsTest::::getDefaultValue()"},"tests":[{"test_lines":[9,14],"covered_lines":[9,82,83,84,85]},{"test_lines":[16,21],"covered_lines":[9,90]},{"test_lines":[23,30],"covered_lines":[9,27,28,82,83,84,85]},{"test_lines":[32,39],"covered_lines":[9,27,28,90]},{"test_lines":[41,46],"covered_lines":[9,82,83]}]},"/bernard/dataset_construction/prep/repos/jedis/src/main/java/redis/clients/jedis/params/ScanParams.java":{"class_content":["package redis.clients.jedis.params;\n","\n","import static redis.clients.jedis.Protocol.Keyword.MATCH;\n","\n","import java.nio.ByteBuffer;\n","import java.util.EnumMap;\n","import java.util.Map;\n","import java.util.Objects;\n","\n","import redis.clients.jedis.CommandArguments;\n","import redis.clients.jedis.Protocol.Keyword;\n","import redis.clients.jedis.Protocol;\n","\n","import redis.clients.jedis.util.SafeEncoder;\n","\n","public class ScanParams implements IParams {\n","\n","  private final Map<Keyword, ByteBuffer> params = new EnumMap<>(Keyword.class);\n","\n","  public static final String SCAN_POINTER_START = String.valueOf(0);\n","  public static final byte[] SCAN_POINTER_START_BINARY = SafeEncoder.encode(SCAN_POINTER_START);\n","\n","  public ScanParams match(final byte[] pattern) {\n","    params.put(MATCH, ByteBuffer.wrap(pattern));\n","    return this;\n","  }\n","\n","  /**\n","   * @see <a href=\"https://redis.io/commands/scan#the-match-option\">MATCH option in Redis documentation</a>\n","   */\n","  public ScanParams match(final String pattern) {\n","    params.put(MATCH, ByteBuffer.wrap(SafeEncoder.encode(pattern)));\n","    return this;\n","  }\n","\n","  /**\n","   * @see <a href=\"https://redis.io/commands/scan#the-count-option\">COUNT option in Redis documentation</a>\n","   */\n","  public ScanParams count(final Integer count) {\n","    params.put(Keyword.COUNT, ByteBuffer.wrap(Protocol.toByteArray(count)));\n","    return this;\n","  }\n","\n","  @Override\n","  public void addParams(CommandArguments args) {\n","    for (Map.Entry<Keyword, ByteBuffer> param : params.entrySet()) {\n","      args.add(param.getKey());\n","      args.add(param.getValue().array());\n","    }\n","  }\n","\n","  public byte[] binaryMatch() {\n","    if (params.containsKey(MATCH)) {\n","      return params.get(MATCH).array();\n","    } else {\n","      return null;\n","    }\n","  }\n","\n","  public String match() {\n","    if (params.containsKey(MATCH)) {\n","      return new String(params.get(MATCH).array());\n","    } else {\n","      return null;\n","    }\n","  }\n","\n","  @Override\n","  public boolean equals(Object o) {\n","    if (this == o) return true;\n","    if (o == null || getClass() != o.getClass()) return false;\n","    ScanParams that = (ScanParams) o;\n","    return Objects.equals(params, that.params);\n","  }\n","\n","  @Override\n","  public int hashCode() {\n","    return Objects.hash(params);\n","  }\n","}\n"],"test_content":["package redis.clients.jedis.params;\n","\n","import org.junit.Test;\n","\n","import static org.junit.Assert.*;\n","\n","public class ScanParamsTest {\n","\n","    @Test\n","    public void checkEqualsIdenticalParams() {\n","        ScanParams firstParam = getDefaultValue();\n","        ScanParams secondParam = getDefaultValue();\n","        assertTrue(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeIdenticalParams() {\n","        ScanParams firstParam = getDefaultValue();\n","        ScanParams secondParam = getDefaultValue();\n","        assertEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsVariousParams() {\n","        ScanParams firstParam = getDefaultValue();\n","        firstParam.count(15);\n","        ScanParams secondParam = getDefaultValue();\n","        secondParam.count(16);\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeVariousParams() {\n","        ScanParams firstParam = getDefaultValue();\n","        firstParam.count(15);\n","        ScanParams secondParam = getDefaultValue();\n","        secondParam.count(16);\n","        assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsWithNull() {\n","        ScanParams firstParam = getDefaultValue();\n","        ScanParams secondParam = null;\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    private ScanParams getDefaultValue() {\n","        return new ScanParams();\n","    }\n","}\n"],"method_lines_dic":{"ScanParams::::match(byte[])":[23,26],"ScanParams::::match(java.lang.String)":[31,34],"ScanParams::::count(java.lang.Integer)":[39,42],"ScanParams::::addParams(redis.clients.jedis.CommandArguments)":[44,50],"ScanParams::::binaryMatch()":[52,58],"ScanParams::::match()":[60,66],"ScanParams::::equals(java.lang.Object)":[68,74],"ScanParams::::hashCode()":[76,79]},"test_method_lines_dic":{"ScanParamsTest::::checkEqualsIdenticalParams()":[9,14],"ScanParamsTest::::checkHashCodeIdenticalParams()":[16,21],"ScanParamsTest::::checkEqualsVariousParams()":[23,30],"ScanParamsTest::::checkHashCodeVariousParams()":[32,39],"ScanParamsTest::::checkEqualsWithNull()":[41,46],"ScanParamsTest::::getDefaultValue()":[48,50]},"reverse_method_lines_dic":{"23":"ScanParams::::match(byte[])","24":"ScanParams::::match(byte[])","25":"ScanParams::::match(byte[])","26":"ScanParams::::match(byte[])","31":"ScanParams::::match(java.lang.String)","32":"ScanParams::::match(java.lang.String)","33":"ScanParams::::match(java.lang.String)","34":"ScanParams::::match(java.lang.String)","39":"ScanParams::::count(java.lang.Integer)","40":"ScanParams::::count(java.lang.Integer)","41":"ScanParams::::count(java.lang.Integer)","42":"ScanParams::::count(java.lang.Integer)","44":"ScanParams::::addParams(redis.clients.jedis.CommandArguments)","45":"ScanParams::::addParams(redis.clients.jedis.CommandArguments)","46":"ScanParams::::addParams(redis.clients.jedis.CommandArguments)","47":"ScanParams::::addParams(redis.clients.jedis.CommandArguments)","48":"ScanParams::::addParams(redis.clients.jedis.CommandArguments)","49":"ScanParams::::addParams(redis.clients.jedis.CommandArguments)","50":"ScanParams::::addParams(redis.clients.jedis.CommandArguments)","52":"ScanParams::::binaryMatch()","53":"ScanParams::::binaryMatch()","54":"ScanParams::::binaryMatch()","55":"ScanParams::::binaryMatch()","56":"ScanParams::::binaryMatch()","57":"ScanParams::::binaryMatch()","58":"ScanParams::::binaryMatch()","60":"ScanParams::::match()","61":"ScanParams::::match()","62":"ScanParams::::match()","63":"ScanParams::::match()","64":"ScanParams::::match()","65":"ScanParams::::match()","66":"ScanParams::::match()","68":"ScanParams::::equals(java.lang.Object)","69":"ScanParams::::equals(java.lang.Object)","70":"ScanParams::::equals(java.lang.Object)","71":"ScanParams::::equals(java.lang.Object)","72":"ScanParams::::equals(java.lang.Object)","73":"ScanParams::::equals(java.lang.Object)","74":"ScanParams::::equals(java.lang.Object)","76":"ScanParams::::hashCode()","77":"ScanParams::::hashCode()","78":"ScanParams::::hashCode()","79":"ScanParams::::hashCode()"},"test_reverse_method_lines_dic":{"9":"ScanParamsTest::::checkEqualsIdenticalParams()","10":"ScanParamsTest::::checkEqualsIdenticalParams()","11":"ScanParamsTest::::checkEqualsIdenticalParams()","12":"ScanParamsTest::::checkEqualsIdenticalParams()","13":"ScanParamsTest::::checkEqualsIdenticalParams()","14":"ScanParamsTest::::checkEqualsIdenticalParams()","16":"ScanParamsTest::::checkHashCodeIdenticalParams()","17":"ScanParamsTest::::checkHashCodeIdenticalParams()","18":"ScanParamsTest::::checkHashCodeIdenticalParams()","19":"ScanParamsTest::::checkHashCodeIdenticalParams()","20":"ScanParamsTest::::checkHashCodeIdenticalParams()","21":"ScanParamsTest::::checkHashCodeIdenticalParams()","23":"ScanParamsTest::::checkEqualsVariousParams()","24":"ScanParamsTest::::checkEqualsVariousParams()","25":"ScanParamsTest::::checkEqualsVariousParams()","26":"ScanParamsTest::::checkEqualsVariousParams()","27":"ScanParamsTest::::checkEqualsVariousParams()","28":"ScanParamsTest::::checkEqualsVariousParams()","29":"ScanParamsTest::::checkEqualsVariousParams()","30":"ScanParamsTest::::checkEqualsVariousParams()","32":"ScanParamsTest::::checkHashCodeVariousParams()","33":"ScanParamsTest::::checkHashCodeVariousParams()","34":"ScanParamsTest::::checkHashCodeVariousParams()","35":"ScanParamsTest::::checkHashCodeVariousParams()","36":"ScanParamsTest::::checkHashCodeVariousParams()","37":"ScanParamsTest::::checkHashCodeVariousParams()","38":"ScanParamsTest::::checkHashCodeVariousParams()","39":"ScanParamsTest::::checkHashCodeVariousParams()","41":"ScanParamsTest::::checkEqualsWithNull()","42":"ScanParamsTest::::checkEqualsWithNull()","43":"ScanParamsTest::::checkEqualsWithNull()","44":"ScanParamsTest::::checkEqualsWithNull()","45":"ScanParamsTest::::checkEqualsWithNull()","46":"ScanParamsTest::::checkEqualsWithNull()","48":"ScanParamsTest::::getDefaultValue()","49":"ScanParamsTest::::getDefaultValue()","50":"ScanParamsTest::::getDefaultValue()"},"tests":[{"test_lines":[9,14],"covered_lines":[16,18,20,21,70,71,72,73]},{"test_lines":[16,21],"covered_lines":[16,18,20,21,78]},{"test_lines":[23,30],"covered_lines":[16,18,20,21,40,41,70,71,72,73]},{"test_lines":[32,39],"covered_lines":[16,18,20,21,40,41,78]},{"test_lines":[41,46],"covered_lines":[16,18,20,21,70,71]}]},"/bernard/dataset_construction/prep/repos/jedis/src/main/java/redis/clients/jedis/params/ZIncrByParams.java":{"class_content":["package redis.clients.jedis.params;\n","\n","import redis.clients.jedis.CommandArguments;\n","import redis.clients.jedis.Protocol.Keyword;\n","\n","import java.util.Objects;\n","\n","/**\n"," * Parameters for ZINCRBY commands. In fact, Redis doesn't have parameters for ZINCRBY. Instead\n"," * Redis has INCR parameter for ZADD.\n"," * <p>\n"," * When users call ZADD with INCR option, its restriction (only one member) and return type is same\n"," * to ZINCRBY. Document page for ZADD also describes INCR option to act like ZINCRBY. So we decided\n"," * to wrap \"ZADD with INCR option\" to ZINCRBY.\n"," * <p>\n"," * Works with Redis 3.0.2 and onwards.\n"," */\n","public class ZIncrByParams implements IParams {\n","\n","  private Keyword existance;\n","\n","  public ZIncrByParams() {\n","  }\n","\n","  public static ZIncrByParams zIncrByParams() {\n","    return new ZIncrByParams();\n","  }\n","\n","  /**\n","   * Only set the key if it does not already exist.\n","   * @return ZIncrByParams\n","   */\n","  public ZIncrByParams nx() {\n","    this.existance = Keyword.NX;\n","    return this;\n","  }\n","\n","  /**\n","   * Only set the key if it already exist.\n","   * @return ZIncrByParams\n","   */\n","  public ZIncrByParams xx() {\n","    this.existance = Keyword.XX;\n","    return this;\n","  }\n","\n","  @Override\n","  public void addParams(CommandArguments args) {\n","    if (existance != null) {\n","      args.add(existance);\n","    }\n","\n","    args.add(Keyword.INCR);\n","  }\n","\n","  @Override\n","  public boolean equals(Object o) {\n","    if (this == o) return true;\n","    if (o == null || getClass() != o.getClass()) return false;\n","    ZIncrByParams that = (ZIncrByParams) o;\n","    return existance == that.existance;\n","  }\n","\n","  @Override\n","  public int hashCode() {\n","    return Objects.hash(existance);\n","  }\n","}\n"],"test_content":["package redis.clients.jedis.params;\n","\n","import org.junit.Test;\n","\n","import static org.junit.Assert.*;\n","\n","public class ZIncrByParamsTest {\n","\n","    @Test\n","    public void checkEqualsIdenticalParams() {\n","        ZIncrByParams firstParam = getDefaultValue();\n","        ZIncrByParams secondParam = getDefaultValue();\n","        assertTrue(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeIdenticalParams() {\n","        ZIncrByParams firstParam = getDefaultValue();\n","        ZIncrByParams secondParam = getDefaultValue();\n","        assertEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsVariousParams() {\n","        ZIncrByParams firstParam = getDefaultValue();\n","        firstParam.nx();\n","        ZIncrByParams secondParam = getDefaultValue();\n","        secondParam.xx();\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeVariousParams() {\n","        ZIncrByParams firstParam = getDefaultValue();\n","        firstParam.nx();\n","        ZIncrByParams secondParam = getDefaultValue();\n","        secondParam.xx();\n","        assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsWithNull() {\n","        ZIncrByParams firstParam = getDefaultValue();\n","        ZIncrByParams secondParam = null;\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    private ZIncrByParams getDefaultValue() {\n","        return new ZIncrByParams();\n","    }\n","}\n"],"method_lines_dic":{"ZIncrByParams::::zIncrByParams()":[25,27],"ZIncrByParams::::nx()":[33,36],"ZIncrByParams::::xx()":[42,45],"ZIncrByParams::::addParams(redis.clients.jedis.CommandArguments)":[47,54],"ZIncrByParams::::equals(java.lang.Object)":[56,62],"ZIncrByParams::::hashCode()":[64,67]},"test_method_lines_dic":{"ZIncrByParamsTest::::checkEqualsIdenticalParams()":[9,14],"ZIncrByParamsTest::::checkHashCodeIdenticalParams()":[16,21],"ZIncrByParamsTest::::checkEqualsVariousParams()":[23,30],"ZIncrByParamsTest::::checkHashCodeVariousParams()":[32,39],"ZIncrByParamsTest::::checkEqualsWithNull()":[41,46],"ZIncrByParamsTest::::getDefaultValue()":[48,50]},"reverse_method_lines_dic":{"25":"ZIncrByParams::::zIncrByParams()","26":"ZIncrByParams::::zIncrByParams()","27":"ZIncrByParams::::zIncrByParams()","33":"ZIncrByParams::::nx()","34":"ZIncrByParams::::nx()","35":"ZIncrByParams::::nx()","36":"ZIncrByParams::::nx()","42":"ZIncrByParams::::xx()","43":"ZIncrByParams::::xx()","44":"ZIncrByParams::::xx()","45":"ZIncrByParams::::xx()","47":"ZIncrByParams::::addParams(redis.clients.jedis.CommandArguments)","48":"ZIncrByParams::::addParams(redis.clients.jedis.CommandArguments)","49":"ZIncrByParams::::addParams(redis.clients.jedis.CommandArguments)","50":"ZIncrByParams::::addParams(redis.clients.jedis.CommandArguments)","51":"ZIncrByParams::::addParams(redis.clients.jedis.CommandArguments)","52":"ZIncrByParams::::addParams(redis.clients.jedis.CommandArguments)","53":"ZIncrByParams::::addParams(redis.clients.jedis.CommandArguments)","54":"ZIncrByParams::::addParams(redis.clients.jedis.CommandArguments)","56":"ZIncrByParams::::equals(java.lang.Object)","57":"ZIncrByParams::::equals(java.lang.Object)","58":"ZIncrByParams::::equals(java.lang.Object)","59":"ZIncrByParams::::equals(java.lang.Object)","60":"ZIncrByParams::::equals(java.lang.Object)","61":"ZIncrByParams::::equals(java.lang.Object)","62":"ZIncrByParams::::equals(java.lang.Object)","64":"ZIncrByParams::::hashCode()","65":"ZIncrByParams::::hashCode()","66":"ZIncrByParams::::hashCode()","67":"ZIncrByParams::::hashCode()"},"test_reverse_method_lines_dic":{"9":"ZIncrByParamsTest::::checkEqualsIdenticalParams()","10":"ZIncrByParamsTest::::checkEqualsIdenticalParams()","11":"ZIncrByParamsTest::::checkEqualsIdenticalParams()","12":"ZIncrByParamsTest::::checkEqualsIdenticalParams()","13":"ZIncrByParamsTest::::checkEqualsIdenticalParams()","14":"ZIncrByParamsTest::::checkEqualsIdenticalParams()","16":"ZIncrByParamsTest::::checkHashCodeIdenticalParams()","17":"ZIncrByParamsTest::::checkHashCodeIdenticalParams()","18":"ZIncrByParamsTest::::checkHashCodeIdenticalParams()","19":"ZIncrByParamsTest::::checkHashCodeIdenticalParams()","20":"ZIncrByParamsTest::::checkHashCodeIdenticalParams()","21":"ZIncrByParamsTest::::checkHashCodeIdenticalParams()","23":"ZIncrByParamsTest::::checkEqualsVariousParams()","24":"ZIncrByParamsTest::::checkEqualsVariousParams()","25":"ZIncrByParamsTest::::checkEqualsVariousParams()","26":"ZIncrByParamsTest::::checkEqualsVariousParams()","27":"ZIncrByParamsTest::::checkEqualsVariousParams()","28":"ZIncrByParamsTest::::checkEqualsVariousParams()","29":"ZIncrByParamsTest::::checkEqualsVariousParams()","30":"ZIncrByParamsTest::::checkEqualsVariousParams()","32":"ZIncrByParamsTest::::checkHashCodeVariousParams()","33":"ZIncrByParamsTest::::checkHashCodeVariousParams()","34":"ZIncrByParamsTest::::checkHashCodeVariousParams()","35":"ZIncrByParamsTest::::checkHashCodeVariousParams()","36":"ZIncrByParamsTest::::checkHashCodeVariousParams()","37":"ZIncrByParamsTest::::checkHashCodeVariousParams()","38":"ZIncrByParamsTest::::checkHashCodeVariousParams()","39":"ZIncrByParamsTest::::checkHashCodeVariousParams()","41":"ZIncrByParamsTest::::checkEqualsWithNull()","42":"ZIncrByParamsTest::::checkEqualsWithNull()","43":"ZIncrByParamsTest::::checkEqualsWithNull()","44":"ZIncrByParamsTest::::checkEqualsWithNull()","45":"ZIncrByParamsTest::::checkEqualsWithNull()","46":"ZIncrByParamsTest::::checkEqualsWithNull()","48":"ZIncrByParamsTest::::getDefaultValue()","49":"ZIncrByParamsTest::::getDefaultValue()","50":"ZIncrByParamsTest::::getDefaultValue()"},"tests":[{"test_lines":[9,14],"covered_lines":[22,23,58,59,60,61]},{"test_lines":[16,21],"covered_lines":[22,23,66]},{"test_lines":[23,30],"covered_lines":[22,23,34,35,43,44,58,59,60,61]},{"test_lines":[32,39],"covered_lines":[22,23,34,35,43,44,66]},{"test_lines":[41,46],"covered_lines":[22,23,58,59]}]},"/bernard/dataset_construction/prep/repos/jedis/src/main/java/redis/clients/jedis/params/SortingParams.java":{"class_content":["package redis.clients.jedis.params;\n","\n","import java.util.*;\n","\n","import redis.clients.jedis.CommandArguments;\n","import redis.clients.jedis.Protocol;\n","import redis.clients.jedis.Protocol.Keyword;\n","import redis.clients.jedis.args.SortingOrder;\n","import redis.clients.jedis.util.SafeEncoder;\n","\n","/**\n"," * Builder Class for {@code SORT} command parameters.\n"," */\n","// TODO:\n","public class SortingParams implements IParams {\n","\n","  private final List<Object> params = new ArrayList<>();\n","\n","  /**\n","   * Sort by weight in keys.\n","   * <p>\n","   * Takes a pattern that is used in order to generate the key names of the weights used for\n","   * sorting. Weight key names are obtained substituting the first occurrence of * with the actual\n","   * value of the elements on the list.\n","   * <p>\n","   * The pattern for a normal key/value pair is \"field*\" and for a value in a hash\n","   * \"field*-&gt;fieldname\".\n","   * @param pattern\n","   * @return the SortingParams Object\n","   */\n","  public SortingParams by(final String pattern) {\n","    return by(SafeEncoder.encode(pattern));\n","  }\n","\n","  /**\n","   * Sort by weight in keys.\n","   * <p>\n","   * Takes a pattern that is used in order to generate the key names of the weights used for\n","   * sorting. Weight key names are obtained substituting the first occurrence of * with the actual\n","   * value of the elements on the list.\n","   * <p>\n","   * The pattern for a normal key/value pair is \"field*\" and for a value in a hash\n","   * \"field*-&gt;fieldname\".\n","   * @param pattern\n","   * @return the SortingParams Object\n","   */\n","  public SortingParams by(final byte[] pattern) {\n","    params.add(Keyword.BY);\n","    params.add(pattern);\n","    return this;\n","  }\n","\n","  /**\n","   * No sorting.\n","   * <p>\n","   * This is useful if you want to retrieve an external key (using {@link #get(String...) GET}) but\n","   * you don't want the sorting overhead.\n","   * @return the SortingParams Object\n","   */\n","  public SortingParams nosort() {\n","    params.add(Keyword.BY);\n","    params.add(Keyword.NOSORT);\n","    return this;\n","  }\n","\n","  /**\n","   * Get the Sorting in Descending Order.\n","   * @return the sortingParams Object\n","   */\n","  public SortingParams desc() {\n","    return sortingOrder(SortingOrder.DESC);\n","  }\n","\n","  /**\n","   * Get the Sorting in Ascending Order. This is the default order.\n","   * @return the SortingParams Object\n","   */\n","  public SortingParams asc() {\n","    return sortingOrder(SortingOrder.ASC);\n","  }\n","\n","  /**\n","   * Get by the Sorting Order.\n","   * @param order the Sorting order\n","   * @return the SortingParams object\n","   */\n","  public SortingParams sortingOrder(SortingOrder order) {\n","    params.add(order.getRaw());\n","    return this;\n","  }\n","\n","  /**\n","   * Limit the Numbers of returned Elements.\n","   * @param start is zero based\n","   * @param count\n","   * @return the SortingParams Object\n","   */\n","  public SortingParams limit(final int start, final int count) {\n","    params.add(Keyword.LIMIT);\n","    params.add(start);\n","    params.add(count);\n","    return this;\n","  }\n","\n","  /**\n","   * Sort lexicographicaly. Note that Redis is utf-8 aware assuming you set the right value for the\n","   * LC_COLLATE environment variable.\n","   * @return the SortingParams Object\n","   */\n","  public SortingParams alpha() {\n","    params.add(Keyword.ALPHA);\n","    return this;\n","  }\n","\n","  /**\n","   * Retrieving external keys from the result of the search.\n","   * <p>\n","   * Takes a pattern that is used in order to generate the key names of the result of sorting. The\n","   * key names are obtained substituting the first occurrence of * with the actual value of the\n","   * elements on the list.\n","   * <p>\n","   * The pattern for a normal key/value pair is \"field*\" and for a value in a hash\n","   * \"field*-&gt;fieldname\".\n","   * <p>\n","   * To get the list itself use the char # as pattern.\n","   * @param patterns\n","   * @return the SortingParams Object\n","   */\n","  public SortingParams get(String... patterns) {\n","    for (final String pattern : patterns) {\n","      params.add(Keyword.GET);\n","      params.add(pattern);\n","    }\n","    return this;\n","  }\n","\n","  /**\n","   * Retrieving external keys from the result of the search.\n","   * <p>\n","   * Takes a pattern that is used in order to generate the key names of the result of sorting. The\n","   * key names are obtained substituting the first occurrence of * with the actual value of the\n","   * elements on the list.\n","   * <p>\n","   * The pattern for a normal key/value pair is \"field*\" and for a value in a hash\n","   * \"field*-&gt;fieldname\".\n","   * <p>\n","   * To get the list itself use the char # as pattern.\n","   * @param patterns\n","   * @return the SortingParams Object\n","   */\n","  public SortingParams get(byte[]... patterns) {\n","    for (final byte[] pattern : patterns) {\n","      params.add(Keyword.GET);\n","      params.add(pattern);\n","    }\n","    return this;\n","  }\n","\n","  @Override\n","  public void addParams(CommandArguments args) {\n","    args.addObjects(params);\n","  }\n","\n","  @Override\n","  public boolean equals(Object o) {\n","    if (this == o) return true;\n","    if (o == null || getClass() != o.getClass()) return false;\n","    SortingParams that = (SortingParams) o;\n","    return Objects.equals(params, that.params);\n","  }\n","\n","  @Override\n","  public int hashCode() {\n","    return Objects.hash(params);\n","  }\n","}\n"],"test_content":["package redis.clients.jedis.params;\n","\n","import org.junit.Test;\n","\n","import static org.junit.Assert.*;\n","\n","public class SortingParamsTest {\n","\n","    @Test\n","    public void checkEqualsIdenticalParams() {\n","        SortingParams firstParam = getDefaultValue();\n","        SortingParams secondParam = getDefaultValue();\n","        assertTrue(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeIdenticalParams() {\n","        SortingParams firstParam = getDefaultValue();\n","        SortingParams secondParam = getDefaultValue();\n","        assertEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsVariousParams() {\n","        SortingParams firstParam = getDefaultValue();\n","        firstParam.limit(15, 20);\n","        SortingParams secondParam = getDefaultValue();\n","        secondParam.limit(10, 15);\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeVariousParams() {\n","        SortingParams firstParam = getDefaultValue();\n","        firstParam.limit(15, 20);\n","        SortingParams secondParam = getDefaultValue();\n","        secondParam.limit(10, 15);\n","        assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsWithNull() {\n","        SortingParams firstParam = getDefaultValue();\n","        SortingParams secondParam = null;\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    private SortingParams getDefaultValue() {\n","        return new SortingParams();\n","    }\n","}\n"],"method_lines_dic":{"SortingParams::::by(java.lang.String)":[31,33],"SortingParams::::by(byte[])":[47,51],"SortingParams::::nosort()":[60,64],"SortingParams::::desc()":[70,72],"SortingParams::::asc()":[78,80],"SortingParams::::sortingOrder(redis.clients.jedis.args.SortingOrder)":[87,90],"SortingParams::::limit(int,int)":[98,103],"SortingParams::::alpha()":[110,113],"SortingParams::::get(java.lang.String[])":[129,135],"SortingParams::::get(byte[][])":[151,157],"SortingParams::::addParams(redis.clients.jedis.CommandArguments)":[159,162],"SortingParams::::equals(java.lang.Object)":[164,170],"SortingParams::::hashCode()":[172,175]},"test_method_lines_dic":{"SortingParamsTest::::checkEqualsIdenticalParams()":[9,14],"SortingParamsTest::::checkHashCodeIdenticalParams()":[16,21],"SortingParamsTest::::checkEqualsVariousParams()":[23,30],"SortingParamsTest::::checkHashCodeVariousParams()":[32,39],"SortingParamsTest::::checkEqualsWithNull()":[41,46],"SortingParamsTest::::getDefaultValue()":[48,50]},"reverse_method_lines_dic":{"31":"SortingParams::::by(java.lang.String)","32":"SortingParams::::by(java.lang.String)","33":"SortingParams::::by(java.lang.String)","47":"SortingParams::::by(byte[])","48":"SortingParams::::by(byte[])","49":"SortingParams::::by(byte[])","50":"SortingParams::::by(byte[])","51":"SortingParams::::by(byte[])","60":"SortingParams::::nosort()","61":"SortingParams::::nosort()","62":"SortingParams::::nosort()","63":"SortingParams::::nosort()","64":"SortingParams::::nosort()","70":"SortingParams::::desc()","71":"SortingParams::::desc()","72":"SortingParams::::desc()","78":"SortingParams::::asc()","79":"SortingParams::::asc()","80":"SortingParams::::asc()","87":"SortingParams::::sortingOrder(redis.clients.jedis.args.SortingOrder)","88":"SortingParams::::sortingOrder(redis.clients.jedis.args.SortingOrder)","89":"SortingParams::::sortingOrder(redis.clients.jedis.args.SortingOrder)","90":"SortingParams::::sortingOrder(redis.clients.jedis.args.SortingOrder)","98":"SortingParams::::limit(int,int)","99":"SortingParams::::limit(int,int)","100":"SortingParams::::limit(int,int)","101":"SortingParams::::limit(int,int)","102":"SortingParams::::limit(int,int)","103":"SortingParams::::limit(int,int)","110":"SortingParams::::alpha()","111":"SortingParams::::alpha()","112":"SortingParams::::alpha()","113":"SortingParams::::alpha()","129":"SortingParams::::get(java.lang.String[])","130":"SortingParams::::get(java.lang.String[])","131":"SortingParams::::get(java.lang.String[])","132":"SortingParams::::get(java.lang.String[])","133":"SortingParams::::get(java.lang.String[])","134":"SortingParams::::get(java.lang.String[])","135":"SortingParams::::get(java.lang.String[])","151":"SortingParams::::get(byte[][])","152":"SortingParams::::get(byte[][])","153":"SortingParams::::get(byte[][])","154":"SortingParams::::get(byte[][])","155":"SortingParams::::get(byte[][])","156":"SortingParams::::get(byte[][])","157":"SortingParams::::get(byte[][])","159":"SortingParams::::addParams(redis.clients.jedis.CommandArguments)","160":"SortingParams::::addParams(redis.clients.jedis.CommandArguments)","161":"SortingParams::::addParams(redis.clients.jedis.CommandArguments)","162":"SortingParams::::addParams(redis.clients.jedis.CommandArguments)","164":"SortingParams::::equals(java.lang.Object)","165":"SortingParams::::equals(java.lang.Object)","166":"SortingParams::::equals(java.lang.Object)","167":"SortingParams::::equals(java.lang.Object)","168":"SortingParams::::equals(java.lang.Object)","169":"SortingParams::::equals(java.lang.Object)","170":"SortingParams::::equals(java.lang.Object)","172":"SortingParams::::hashCode()","173":"SortingParams::::hashCode()","174":"SortingParams::::hashCode()","175":"SortingParams::::hashCode()"},"test_reverse_method_lines_dic":{"9":"SortingParamsTest::::checkEqualsIdenticalParams()","10":"SortingParamsTest::::checkEqualsIdenticalParams()","11":"SortingParamsTest::::checkEqualsIdenticalParams()","12":"SortingParamsTest::::checkEqualsIdenticalParams()","13":"SortingParamsTest::::checkEqualsIdenticalParams()","14":"SortingParamsTest::::checkEqualsIdenticalParams()","16":"SortingParamsTest::::checkHashCodeIdenticalParams()","17":"SortingParamsTest::::checkHashCodeIdenticalParams()","18":"SortingParamsTest::::checkHashCodeIdenticalParams()","19":"SortingParamsTest::::checkHashCodeIdenticalParams()","20":"SortingParamsTest::::checkHashCodeIdenticalParams()","21":"SortingParamsTest::::checkHashCodeIdenticalParams()","23":"SortingParamsTest::::checkEqualsVariousParams()","24":"SortingParamsTest::::checkEqualsVariousParams()","25":"SortingParamsTest::::checkEqualsVariousParams()","26":"SortingParamsTest::::checkEqualsVariousParams()","27":"SortingParamsTest::::checkEqualsVariousParams()","28":"SortingParamsTest::::checkEqualsVariousParams()","29":"SortingParamsTest::::checkEqualsVariousParams()","30":"SortingParamsTest::::checkEqualsVariousParams()","32":"SortingParamsTest::::checkHashCodeVariousParams()","33":"SortingParamsTest::::checkHashCodeVariousParams()","34":"SortingParamsTest::::checkHashCodeVariousParams()","35":"SortingParamsTest::::checkHashCodeVariousParams()","36":"SortingParamsTest::::checkHashCodeVariousParams()","37":"SortingParamsTest::::checkHashCodeVariousParams()","38":"SortingParamsTest::::checkHashCodeVariousParams()","39":"SortingParamsTest::::checkHashCodeVariousParams()","41":"SortingParamsTest::::checkEqualsWithNull()","42":"SortingParamsTest::::checkEqualsWithNull()","43":"SortingParamsTest::::checkEqualsWithNull()","44":"SortingParamsTest::::checkEqualsWithNull()","45":"SortingParamsTest::::checkEqualsWithNull()","46":"SortingParamsTest::::checkEqualsWithNull()","48":"SortingParamsTest::::getDefaultValue()","49":"SortingParamsTest::::getDefaultValue()","50":"SortingParamsTest::::getDefaultValue()"},"tests":[{"test_lines":[9,14],"covered_lines":[15,17,166,167,168,169]},{"test_lines":[16,21],"covered_lines":[15,17,174]},{"test_lines":[23,30],"covered_lines":[15,17,99,100,101,102,166,167,168,169]},{"test_lines":[32,39],"covered_lines":[15,17,99,100,101,102,174]},{"test_lines":[41,46],"covered_lines":[15,17,166,167]}]},"/bernard/dataset_construction/prep/repos/jedis/src/main/java/redis/clients/jedis/params/RestoreParams.java":{"class_content":["package redis.clients.jedis.params;\n","\n","import redis.clients.jedis.CommandArguments;\n","import redis.clients.jedis.Protocol.Keyword;\n","\n","import java.util.Objects;\n","\n","public class RestoreParams implements IParams {\n","\n","  private boolean replace;\n","\n","  private boolean absTtl;\n","\n","  private Long idleTime;\n","\n","  private Long frequency;\n","\n","  public static RestoreParams restoreParams() {\n","    return new RestoreParams();\n","  }\n","\n","  public RestoreParams replace() {\n","    this.replace = true;\n","    return this;\n","  }\n","\n","  public RestoreParams absTtl() {\n","    this.absTtl = true;\n","    return this;\n","  }\n","\n","  public RestoreParams idleTime(long idleTime) {\n","    this.idleTime = idleTime;\n","    return this;\n","  }\n","\n","  public RestoreParams frequency(long frequency) {\n","    this.frequency = frequency;\n","    return this;\n","  }\n","\n","  @Override\n","  public void addParams(CommandArguments args) {\n","    if (replace) {\n","      args.add(Keyword.REPLACE);\n","    }\n","\n","    if (absTtl) {\n","      args.add(Keyword.ABSTTL);\n","    }\n","\n","    if (idleTime != null) {\n","      args.add(Keyword.IDLETIME).add(idleTime);\n","    }\n","\n","    if (frequency != null) {\n","      args.add(Keyword.FREQ).add(frequency);\n","    }\n","  }\n","\n","  @Override\n","  public boolean equals(Object o) {\n","    if (this == o) return true;\n","    if (o == null || getClass() != o.getClass()) return false;\n","    RestoreParams that = (RestoreParams) o;\n","    return replace == that.replace && absTtl == that.absTtl && Objects.equals(idleTime, that.idleTime) && Objects.equals(frequency, that.frequency);\n","  }\n","\n","  @Override\n","  public int hashCode() {\n","    return Objects.hash(replace, absTtl, idleTime, frequency);\n","  }\n","}\n"],"test_content":["package redis.clients.jedis.params;\n","\n","import org.junit.Test;\n","\n","import static org.junit.Assert.*;\n","\n","public class RestoreParamsTest {\n","\n","    @Test\n","    public void checkEqualsIdenticalParams() {\n","        RestoreParams firstParam = getDefaultValue();\n","        RestoreParams secondParam = getDefaultValue();\n","        assertTrue(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeIdenticalParams() {\n","        RestoreParams firstParam = getDefaultValue();\n","        RestoreParams secondParam = getDefaultValue();\n","        assertEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsVariousParams() {\n","        RestoreParams firstParam = getDefaultValue();\n","        firstParam.idleTime(14);\n","        RestoreParams secondParam = getDefaultValue();\n","        secondParam.idleTime(15);\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeVariousParams() {\n","        RestoreParams firstParam = getDefaultValue();\n","        firstParam.idleTime(14);\n","        RestoreParams secondParam = getDefaultValue();\n","        secondParam.idleTime(15);\n","        assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsWithNull() {\n","        RestoreParams firstParam = getDefaultValue();\n","        RestoreParams secondParam = null;\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    private RestoreParams getDefaultValue() {\n","        return new RestoreParams();\n","    }\n","}\n"],"method_lines_dic":{"RestoreParams::::restoreParams()":[18,20],"RestoreParams::::replace()":[22,25],"RestoreParams::::absTtl()":[27,30],"RestoreParams::::idleTime(long)":[32,35],"RestoreParams::::frequency(long)":[37,40],"RestoreParams::::addParams(redis.clients.jedis.CommandArguments)":[42,59],"RestoreParams::::equals(java.lang.Object)":[61,67],"RestoreParams::::hashCode()":[69,72]},"test_method_lines_dic":{"RestoreParamsTest::::checkEqualsIdenticalParams()":[9,14],"RestoreParamsTest::::checkHashCodeIdenticalParams()":[16,21],"RestoreParamsTest::::checkEqualsVariousParams()":[23,30],"RestoreParamsTest::::checkHashCodeVariousParams()":[32,39],"RestoreParamsTest::::checkEqualsWithNull()":[41,46],"RestoreParamsTest::::getDefaultValue()":[48,50]},"reverse_method_lines_dic":{"18":"RestoreParams::::restoreParams()","19":"RestoreParams::::restoreParams()","20":"RestoreParams::::restoreParams()","22":"RestoreParams::::replace()","23":"RestoreParams::::replace()","24":"RestoreParams::::replace()","25":"RestoreParams::::replace()","27":"RestoreParams::::absTtl()","28":"RestoreParams::::absTtl()","29":"RestoreParams::::absTtl()","30":"RestoreParams::::absTtl()","32":"RestoreParams::::idleTime(long)","33":"RestoreParams::::idleTime(long)","34":"RestoreParams::::idleTime(long)","35":"RestoreParams::::idleTime(long)","37":"RestoreParams::::frequency(long)","38":"RestoreParams::::frequency(long)","39":"RestoreParams::::frequency(long)","40":"RestoreParams::::frequency(long)","42":"RestoreParams::::addParams(redis.clients.jedis.CommandArguments)","43":"RestoreParams::::addParams(redis.clients.jedis.CommandArguments)","44":"RestoreParams::::addParams(redis.clients.jedis.CommandArguments)","45":"RestoreParams::::addParams(redis.clients.jedis.CommandArguments)","46":"RestoreParams::::addParams(redis.clients.jedis.CommandArguments)","47":"RestoreParams::::addParams(redis.clients.jedis.CommandArguments)","48":"RestoreParams::::addParams(redis.clients.jedis.CommandArguments)","49":"RestoreParams::::addParams(redis.clients.jedis.CommandArguments)","50":"RestoreParams::::addParams(redis.clients.jedis.CommandArguments)","51":"RestoreParams::::addParams(redis.clients.jedis.CommandArguments)","52":"RestoreParams::::addParams(redis.clients.jedis.CommandArguments)","53":"RestoreParams::::addParams(redis.clients.jedis.CommandArguments)","54":"RestoreParams::::addParams(redis.clients.jedis.CommandArguments)","55":"RestoreParams::::addParams(redis.clients.jedis.CommandArguments)","56":"RestoreParams::::addParams(redis.clients.jedis.CommandArguments)","57":"RestoreParams::::addParams(redis.clients.jedis.CommandArguments)","58":"RestoreParams::::addParams(redis.clients.jedis.CommandArguments)","59":"RestoreParams::::addParams(redis.clients.jedis.CommandArguments)","61":"RestoreParams::::equals(java.lang.Object)","62":"RestoreParams::::equals(java.lang.Object)","63":"RestoreParams::::equals(java.lang.Object)","64":"RestoreParams::::equals(java.lang.Object)","65":"RestoreParams::::equals(java.lang.Object)","66":"RestoreParams::::equals(java.lang.Object)","67":"RestoreParams::::equals(java.lang.Object)","69":"RestoreParams::::hashCode()","70":"RestoreParams::::hashCode()","71":"RestoreParams::::hashCode()","72":"RestoreParams::::hashCode()"},"test_reverse_method_lines_dic":{"9":"RestoreParamsTest::::checkEqualsIdenticalParams()","10":"RestoreParamsTest::::checkEqualsIdenticalParams()","11":"RestoreParamsTest::::checkEqualsIdenticalParams()","12":"RestoreParamsTest::::checkEqualsIdenticalParams()","13":"RestoreParamsTest::::checkEqualsIdenticalParams()","14":"RestoreParamsTest::::checkEqualsIdenticalParams()","16":"RestoreParamsTest::::checkHashCodeIdenticalParams()","17":"RestoreParamsTest::::checkHashCodeIdenticalParams()","18":"RestoreParamsTest::::checkHashCodeIdenticalParams()","19":"RestoreParamsTest::::checkHashCodeIdenticalParams()","20":"RestoreParamsTest::::checkHashCodeIdenticalParams()","21":"RestoreParamsTest::::checkHashCodeIdenticalParams()","23":"RestoreParamsTest::::checkEqualsVariousParams()","24":"RestoreParamsTest::::checkEqualsVariousParams()","25":"RestoreParamsTest::::checkEqualsVariousParams()","26":"RestoreParamsTest::::checkEqualsVariousParams()","27":"RestoreParamsTest::::checkEqualsVariousParams()","28":"RestoreParamsTest::::checkEqualsVariousParams()","29":"RestoreParamsTest::::checkEqualsVariousParams()","30":"RestoreParamsTest::::checkEqualsVariousParams()","32":"RestoreParamsTest::::checkHashCodeVariousParams()","33":"RestoreParamsTest::::checkHashCodeVariousParams()","34":"RestoreParamsTest::::checkHashCodeVariousParams()","35":"RestoreParamsTest::::checkHashCodeVariousParams()","36":"RestoreParamsTest::::checkHashCodeVariousParams()","37":"RestoreParamsTest::::checkHashCodeVariousParams()","38":"RestoreParamsTest::::checkHashCodeVariousParams()","39":"RestoreParamsTest::::checkHashCodeVariousParams()","41":"RestoreParamsTest::::checkEqualsWithNull()","42":"RestoreParamsTest::::checkEqualsWithNull()","43":"RestoreParamsTest::::checkEqualsWithNull()","44":"RestoreParamsTest::::checkEqualsWithNull()","45":"RestoreParamsTest::::checkEqualsWithNull()","46":"RestoreParamsTest::::checkEqualsWithNull()","48":"RestoreParamsTest::::getDefaultValue()","49":"RestoreParamsTest::::getDefaultValue()","50":"RestoreParamsTest::::getDefaultValue()"},"tests":[{"test_lines":[9,14],"covered_lines":[8,63,64,65,66]},{"test_lines":[16,21],"covered_lines":[8,71]},{"test_lines":[23,30],"covered_lines":[8,33,34,63,64,65,66]},{"test_lines":[32,39],"covered_lines":[8,33,34,71]},{"test_lines":[41,46],"covered_lines":[8,63,64]}]},"/bernard/dataset_construction/prep/repos/jedis/src/main/java/redis/clients/jedis/params/LolwutParams.java":{"class_content":["package redis.clients.jedis.params;\n","\n","import redis.clients.jedis.CommandArguments;\n","import redis.clients.jedis.Protocol.Keyword;\n","\n","import java.util.Arrays;\n","import java.util.Objects;\n","\n","public class LolwutParams implements IParams {\n","\n","  private Integer version;\n","  private String[] opargs;\n","\n","  public LolwutParams version(int version) {\n","    this.version = version;\n","    return this;\n","  }\n","\n","  @Deprecated\n","  public LolwutParams args(String... args) {\n","    return optionalArguments(args);\n","  }\n","\n","  public LolwutParams optionalArguments(String... args) {\n","    this.opargs = args;\n","    return this;\n","  }\n","\n","  @Override\n","  public void addParams(CommandArguments args) {\n","    if (version != null) {\n","      args.add(Keyword.VERSION).add(version);\n","\n","      if (opargs != null && opargs.length > 0) {\n","        args.addObjects((Object[]) opargs);\n","      }\n","    }\n","  }\n","\n","  @Override\n","  public boolean equals(Object o) {\n","    if (this == o) return true;\n","    if (o == null || getClass() != o.getClass()) return false;\n","    LolwutParams that = (LolwutParams) o;\n","    return Objects.equals(version, that.version) && Arrays.equals(opargs, that.opargs);\n","  }\n","\n","  @Override\n","  public int hashCode() {\n","    int result = Objects.hash(version);\n","    result = 31 * result + Arrays.hashCode(opargs);\n","    return result;\n","  }\n","}\n"],"test_content":["package redis.clients.jedis.params;\n","\n","import org.junit.Test;\n","\n","import static org.junit.Assert.*;\n","\n","public class LolwutParamsTest {\n","\n","    @Test\n","    public void checkEqualsIdenticalParams() {\n","        LolwutParams firstParam = getDefaultValue();\n","        LolwutParams secondParam = getDefaultValue();\n","        assertTrue(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeIdenticalParams() {\n","        LolwutParams firstParam = getDefaultValue();\n","        LolwutParams secondParam = getDefaultValue();\n","        assertEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsVariousParams() {\n","        LolwutParams firstParam = getDefaultValue();\n","        firstParam.version(1);\n","        LolwutParams secondParam = getDefaultValue();\n","        secondParam.version(2);\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeVariousParams() {\n","        LolwutParams firstParam = getDefaultValue();\n","        firstParam.version(1);\n","        LolwutParams secondParam = getDefaultValue();\n","        secondParam.version(2);\n","        assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsWithNull() {\n","        LolwutParams firstParam = getDefaultValue();\n","        LolwutParams secondParam = null;\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    private LolwutParams getDefaultValue() {\n","        return new LolwutParams();\n","    }\n","}\n"],"method_lines_dic":{"LolwutParams::::version(int)":[14,17],"LolwutParams::::args(java.lang.String[])":[19,22],"LolwutParams::::optionalArguments(java.lang.String[])":[24,27],"LolwutParams::::addParams(redis.clients.jedis.CommandArguments)":[29,38],"LolwutParams::::equals(java.lang.Object)":[40,46],"LolwutParams::::hashCode()":[48,53]},"test_method_lines_dic":{"LolwutParamsTest::::checkEqualsIdenticalParams()":[9,14],"LolwutParamsTest::::checkHashCodeIdenticalParams()":[16,21],"LolwutParamsTest::::checkEqualsVariousParams()":[23,30],"LolwutParamsTest::::checkHashCodeVariousParams()":[32,39],"LolwutParamsTest::::checkEqualsWithNull()":[41,46],"LolwutParamsTest::::getDefaultValue()":[48,50]},"reverse_method_lines_dic":{"14":"LolwutParams::::version(int)","15":"LolwutParams::::version(int)","16":"LolwutParams::::version(int)","17":"LolwutParams::::version(int)","19":"LolwutParams::::args(java.lang.String[])","20":"LolwutParams::::args(java.lang.String[])","21":"LolwutParams::::args(java.lang.String[])","22":"LolwutParams::::args(java.lang.String[])","24":"LolwutParams::::optionalArguments(java.lang.String[])","25":"LolwutParams::::optionalArguments(java.lang.String[])","26":"LolwutParams::::optionalArguments(java.lang.String[])","27":"LolwutParams::::optionalArguments(java.lang.String[])","29":"LolwutParams::::addParams(redis.clients.jedis.CommandArguments)","30":"LolwutParams::::addParams(redis.clients.jedis.CommandArguments)","31":"LolwutParams::::addParams(redis.clients.jedis.CommandArguments)","32":"LolwutParams::::addParams(redis.clients.jedis.CommandArguments)","33":"LolwutParams::::addParams(redis.clients.jedis.CommandArguments)","34":"LolwutParams::::addParams(redis.clients.jedis.CommandArguments)","35":"LolwutParams::::addParams(redis.clients.jedis.CommandArguments)","36":"LolwutParams::::addParams(redis.clients.jedis.CommandArguments)","37":"LolwutParams::::addParams(redis.clients.jedis.CommandArguments)","38":"LolwutParams::::addParams(redis.clients.jedis.CommandArguments)","40":"LolwutParams::::equals(java.lang.Object)","41":"LolwutParams::::equals(java.lang.Object)","42":"LolwutParams::::equals(java.lang.Object)","43":"LolwutParams::::equals(java.lang.Object)","44":"LolwutParams::::equals(java.lang.Object)","45":"LolwutParams::::equals(java.lang.Object)","46":"LolwutParams::::equals(java.lang.Object)","48":"LolwutParams::::hashCode()","49":"LolwutParams::::hashCode()","50":"LolwutParams::::hashCode()","51":"LolwutParams::::hashCode()","52":"LolwutParams::::hashCode()","53":"LolwutParams::::hashCode()"},"test_reverse_method_lines_dic":{"9":"LolwutParamsTest::::checkEqualsIdenticalParams()","10":"LolwutParamsTest::::checkEqualsIdenticalParams()","11":"LolwutParamsTest::::checkEqualsIdenticalParams()","12":"LolwutParamsTest::::checkEqualsIdenticalParams()","13":"LolwutParamsTest::::checkEqualsIdenticalParams()","14":"LolwutParamsTest::::checkEqualsIdenticalParams()","16":"LolwutParamsTest::::checkHashCodeIdenticalParams()","17":"LolwutParamsTest::::checkHashCodeIdenticalParams()","18":"LolwutParamsTest::::checkHashCodeIdenticalParams()","19":"LolwutParamsTest::::checkHashCodeIdenticalParams()","20":"LolwutParamsTest::::checkHashCodeIdenticalParams()","21":"LolwutParamsTest::::checkHashCodeIdenticalParams()","23":"LolwutParamsTest::::checkEqualsVariousParams()","24":"LolwutParamsTest::::checkEqualsVariousParams()","25":"LolwutParamsTest::::checkEqualsVariousParams()","26":"LolwutParamsTest::::checkEqualsVariousParams()","27":"LolwutParamsTest::::checkEqualsVariousParams()","28":"LolwutParamsTest::::checkEqualsVariousParams()","29":"LolwutParamsTest::::checkEqualsVariousParams()","30":"LolwutParamsTest::::checkEqualsVariousParams()","32":"LolwutParamsTest::::checkHashCodeVariousParams()","33":"LolwutParamsTest::::checkHashCodeVariousParams()","34":"LolwutParamsTest::::checkHashCodeVariousParams()","35":"LolwutParamsTest::::checkHashCodeVariousParams()","36":"LolwutParamsTest::::checkHashCodeVariousParams()","37":"LolwutParamsTest::::checkHashCodeVariousParams()","38":"LolwutParamsTest::::checkHashCodeVariousParams()","39":"LolwutParamsTest::::checkHashCodeVariousParams()","41":"LolwutParamsTest::::checkEqualsWithNull()","42":"LolwutParamsTest::::checkEqualsWithNull()","43":"LolwutParamsTest::::checkEqualsWithNull()","44":"LolwutParamsTest::::checkEqualsWithNull()","45":"LolwutParamsTest::::checkEqualsWithNull()","46":"LolwutParamsTest::::checkEqualsWithNull()","48":"LolwutParamsTest::::getDefaultValue()","49":"LolwutParamsTest::::getDefaultValue()","50":"LolwutParamsTest::::getDefaultValue()"},"tests":[{"test_lines":[9,14],"covered_lines":[9,42,43,44,45]},{"test_lines":[16,21],"covered_lines":[9,50,51,52]},{"test_lines":[23,30],"covered_lines":[9,15,16,42,43,44,45]},{"test_lines":[32,39],"covered_lines":[9,15,16,50,51,52]},{"test_lines":[41,46],"covered_lines":[9,42,43]}]},"/bernard/dataset_construction/prep/repos/jedis/src/main/java/redis/clients/jedis/params/CommandListFilterByParams.java":{"class_content":["package redis.clients.jedis.params;\n","\n","import redis.clients.jedis.CommandArguments;\n","import redis.clients.jedis.Protocol.Keyword;\n","\n","import java.util.Objects;\n","\n","public class CommandListFilterByParams implements IParams {\n","\n","  private String moduleName;\n","  private String category;\n","  private String pattern;\n","\n","  public static CommandListFilterByParams commandListFilterByParams() {\n","    return new CommandListFilterByParams();\n","  }\n","\n","  public CommandListFilterByParams filterByModule(String moduleName) {\n","    this.moduleName = moduleName;\n","    return this;\n","  }\n","\n","  public CommandListFilterByParams filterByAclCat(String category) {\n","    this.category = category;\n","    return this;\n","  }\n","\n","  public CommandListFilterByParams filterByPattern(String pattern) {\n","    this.pattern = pattern;\n","    return this;\n","  }\n","\n","  @Override\n","  public void addParams(CommandArguments args) {\n","    args.add(Keyword.FILTERBY);\n","\n","    if (moduleName != null && category == null && pattern == null) {\n","      args.add(Keyword.MODULE);\n","      args.add(moduleName);\n","    } else if (moduleName == null && category != null && pattern == null) {\n","      args.add(Keyword.ACLCAT);\n","      args.add(category);\n","    } else if (moduleName == null && category == null && pattern != null) {\n","      args.add(Keyword.PATTERN);\n","      args.add(pattern);\n","    } else {\n","      throw new IllegalArgumentException(\"Must choose exactly one filter in \"\n","          + getClass().getSimpleName());\n","    }\n","  }\n","\n","  @Override\n","  public boolean equals(Object o) {\n","    if (this == o) return true;\n","    if (o == null || getClass() != o.getClass()) return false;\n","    CommandListFilterByParams that = (CommandListFilterByParams) o;\n","    return Objects.equals(moduleName, that.moduleName) && Objects.equals(category, that.category) && Objects.equals(pattern, that.pattern);\n","  }\n","\n","  @Override\n","  public int hashCode() {\n","    return Objects.hash(moduleName, category, pattern);\n","  }\n","}\n"],"test_content":["package redis.clients.jedis.params;\n","\n","import org.junit.Test;\n","\n","import static org.junit.Assert.*;\n","\n","public class CommandListFilterByParamsTest {\n","\n","    @Test\n","    public void checkEqualsIdenticalParams() {\n","        CommandListFilterByParams firstParam = getDefaultValue();\n","        CommandListFilterByParams secondParam = getDefaultValue();\n","        assertTrue(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeIdenticalParams() {\n","        CommandListFilterByParams firstParam = getDefaultValue();\n","        CommandListFilterByParams secondParam = getDefaultValue();\n","        assertEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsVariousParams() {\n","        CommandListFilterByParams firstParam = getDefaultValue();\n","        firstParam.filterByAclCat(\"admin\");\n","        CommandListFilterByParams secondParam = getDefaultValue();\n","        secondParam.filterByModule(\"JSON\");\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeVariousParams() {\n","        CommandListFilterByParams firstParam = getDefaultValue();\n","        firstParam.filterByAclCat(\"admin\");\n","        CommandListFilterByParams secondParam = getDefaultValue();\n","        secondParam.filterByModule(\"JSON\");\n","        assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsWithNull() {\n","        CommandListFilterByParams firstParam = getDefaultValue();\n","        CommandListFilterByParams secondParam = null;\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    private CommandListFilterByParams getDefaultValue() {\n","        return new CommandListFilterByParams();\n","    }\n","}\n"],"method_lines_dic":{"CommandListFilterByParams::::commandListFilterByParams()":[14,16],"CommandListFilterByParams::::filterByModule(java.lang.String)":[18,21],"CommandListFilterByParams::::filterByAclCat(java.lang.String)":[23,26],"CommandListFilterByParams::::filterByPattern(java.lang.String)":[28,31],"CommandListFilterByParams::::addParams(redis.clients.jedis.CommandArguments)":[33,50],"CommandListFilterByParams::::equals(java.lang.Object)":[52,58],"CommandListFilterByParams::::hashCode()":[60,63]},"test_method_lines_dic":{"CommandListFilterByParamsTest::::checkEqualsIdenticalParams()":[9,14],"CommandListFilterByParamsTest::::checkHashCodeIdenticalParams()":[16,21],"CommandListFilterByParamsTest::::checkEqualsVariousParams()":[23,30],"CommandListFilterByParamsTest::::checkHashCodeVariousParams()":[32,39],"CommandListFilterByParamsTest::::checkEqualsWithNull()":[41,46],"CommandListFilterByParamsTest::::getDefaultValue()":[48,50]},"reverse_method_lines_dic":{"14":"CommandListFilterByParams::::commandListFilterByParams()","15":"CommandListFilterByParams::::commandListFilterByParams()","16":"CommandListFilterByParams::::commandListFilterByParams()","18":"CommandListFilterByParams::::filterByModule(java.lang.String)","19":"CommandListFilterByParams::::filterByModule(java.lang.String)","20":"CommandListFilterByParams::::filterByModule(java.lang.String)","21":"CommandListFilterByParams::::filterByModule(java.lang.String)","23":"CommandListFilterByParams::::filterByAclCat(java.lang.String)","24":"CommandListFilterByParams::::filterByAclCat(java.lang.String)","25":"CommandListFilterByParams::::filterByAclCat(java.lang.String)","26":"CommandListFilterByParams::::filterByAclCat(java.lang.String)","28":"CommandListFilterByParams::::filterByPattern(java.lang.String)","29":"CommandListFilterByParams::::filterByPattern(java.lang.String)","30":"CommandListFilterByParams::::filterByPattern(java.lang.String)","31":"CommandListFilterByParams::::filterByPattern(java.lang.String)","33":"CommandListFilterByParams::::addParams(redis.clients.jedis.CommandArguments)","34":"CommandListFilterByParams::::addParams(redis.clients.jedis.CommandArguments)","35":"CommandListFilterByParams::::addParams(redis.clients.jedis.CommandArguments)","36":"CommandListFilterByParams::::addParams(redis.clients.jedis.CommandArguments)","37":"CommandListFilterByParams::::addParams(redis.clients.jedis.CommandArguments)","38":"CommandListFilterByParams::::addParams(redis.clients.jedis.CommandArguments)","39":"CommandListFilterByParams::::addParams(redis.clients.jedis.CommandArguments)","40":"CommandListFilterByParams::::addParams(redis.clients.jedis.CommandArguments)","41":"CommandListFilterByParams::::addParams(redis.clients.jedis.CommandArguments)","42":"CommandListFilterByParams::::addParams(redis.clients.jedis.CommandArguments)","43":"CommandListFilterByParams::::addParams(redis.clients.jedis.CommandArguments)","44":"CommandListFilterByParams::::addParams(redis.clients.jedis.CommandArguments)","45":"CommandListFilterByParams::::addParams(redis.clients.jedis.CommandArguments)","46":"CommandListFilterByParams::::addParams(redis.clients.jedis.CommandArguments)","47":"CommandListFilterByParams::::addParams(redis.clients.jedis.CommandArguments)","48":"CommandListFilterByParams::::addParams(redis.clients.jedis.CommandArguments)","49":"CommandListFilterByParams::::addParams(redis.clients.jedis.CommandArguments)","50":"CommandListFilterByParams::::addParams(redis.clients.jedis.CommandArguments)","52":"CommandListFilterByParams::::equals(java.lang.Object)","53":"CommandListFilterByParams::::equals(java.lang.Object)","54":"CommandListFilterByParams::::equals(java.lang.Object)","55":"CommandListFilterByParams::::equals(java.lang.Object)","56":"CommandListFilterByParams::::equals(java.lang.Object)","57":"CommandListFilterByParams::::equals(java.lang.Object)","58":"CommandListFilterByParams::::equals(java.lang.Object)","60":"CommandListFilterByParams::::hashCode()","61":"CommandListFilterByParams::::hashCode()","62":"CommandListFilterByParams::::hashCode()","63":"CommandListFilterByParams::::hashCode()"},"test_reverse_method_lines_dic":{"9":"CommandListFilterByParamsTest::::checkEqualsIdenticalParams()","10":"CommandListFilterByParamsTest::::checkEqualsIdenticalParams()","11":"CommandListFilterByParamsTest::::checkEqualsIdenticalParams()","12":"CommandListFilterByParamsTest::::checkEqualsIdenticalParams()","13":"CommandListFilterByParamsTest::::checkEqualsIdenticalParams()","14":"CommandListFilterByParamsTest::::checkEqualsIdenticalParams()","16":"CommandListFilterByParamsTest::::checkHashCodeIdenticalParams()","17":"CommandListFilterByParamsTest::::checkHashCodeIdenticalParams()","18":"CommandListFilterByParamsTest::::checkHashCodeIdenticalParams()","19":"CommandListFilterByParamsTest::::checkHashCodeIdenticalParams()","20":"CommandListFilterByParamsTest::::checkHashCodeIdenticalParams()","21":"CommandListFilterByParamsTest::::checkHashCodeIdenticalParams()","23":"CommandListFilterByParamsTest::::checkEqualsVariousParams()","24":"CommandListFilterByParamsTest::::checkEqualsVariousParams()","25":"CommandListFilterByParamsTest::::checkEqualsVariousParams()","26":"CommandListFilterByParamsTest::::checkEqualsVariousParams()","27":"CommandListFilterByParamsTest::::checkEqualsVariousParams()","28":"CommandListFilterByParamsTest::::checkEqualsVariousParams()","29":"CommandListFilterByParamsTest::::checkEqualsVariousParams()","30":"CommandListFilterByParamsTest::::checkEqualsVariousParams()","32":"CommandListFilterByParamsTest::::checkHashCodeVariousParams()","33":"CommandListFilterByParamsTest::::checkHashCodeVariousParams()","34":"CommandListFilterByParamsTest::::checkHashCodeVariousParams()","35":"CommandListFilterByParamsTest::::checkHashCodeVariousParams()","36":"CommandListFilterByParamsTest::::checkHashCodeVariousParams()","37":"CommandListFilterByParamsTest::::checkHashCodeVariousParams()","38":"CommandListFilterByParamsTest::::checkHashCodeVariousParams()","39":"CommandListFilterByParamsTest::::checkHashCodeVariousParams()","41":"CommandListFilterByParamsTest::::checkEqualsWithNull()","42":"CommandListFilterByParamsTest::::checkEqualsWithNull()","43":"CommandListFilterByParamsTest::::checkEqualsWithNull()","44":"CommandListFilterByParamsTest::::checkEqualsWithNull()","45":"CommandListFilterByParamsTest::::checkEqualsWithNull()","46":"CommandListFilterByParamsTest::::checkEqualsWithNull()","48":"CommandListFilterByParamsTest::::getDefaultValue()","49":"CommandListFilterByParamsTest::::getDefaultValue()","50":"CommandListFilterByParamsTest::::getDefaultValue()"},"tests":[{"test_lines":[9,14],"covered_lines":[8,54,55,56,57]},{"test_lines":[16,21],"covered_lines":[8,62]},{"test_lines":[23,30],"covered_lines":[8,19,20,24,25,54,55,56,57]},{"test_lines":[32,39],"covered_lines":[8,19,20,24,25,62]},{"test_lines":[41,46],"covered_lines":[8,54,55]}]},"/bernard/dataset_construction/prep/repos/jedis/src/main/java/redis/clients/jedis/params/BitPosParams.java":{"class_content":["package redis.clients.jedis.params;\n","\n","import redis.clients.jedis.CommandArguments;\n","import redis.clients.jedis.args.BitCountOption;\n","\n","import java.util.Objects;\n","\n","public class BitPosParams implements IParams {\n","\n","  private Long start;\n","  private Long end;\n","  private BitCountOption modifier;\n","\n","  public BitPosParams() {\n","  }\n","\n","  // TODO: deprecate ??\n","  public BitPosParams(long start) {\n","    this.start = start;\n","  }\n","\n","  // TODO: deprecate ??\n","  public BitPosParams(long start, long end) {\n","    this(start);\n","\n","    this.end = end;\n","  }\n","\n","  public static BitPosParams bitPosParams() {\n","    return new BitPosParams();\n","  }\n","\n","  public BitPosParams start(long start) {\n","    this.start = start;\n","    return this;\n","  }\n","\n","  /**\n","   * {@link BitPosParams#start(long) START} must be set for END option.\n","   */\n","  public BitPosParams end(long end) {\n","    this.end = end;\n","    return this;\n","  }\n","\n","  /**\n","   * Both {@link BitPosParams#start(long) START} and {@link BitPosParams#end(long) END} both must be\n","   * set for MODIFIER option.\n","   */\n","  public BitPosParams modifier(BitCountOption modifier) {\n","    this.modifier = modifier;\n","    return this;\n","  }\n","\n","  @Override\n","  public void addParams(CommandArguments args) {\n","    if (start != null) {\n","      args.add(start);\n","      if (end != null) {\n","        args.add(end);\n","        if (modifier != null) {\n","          args.add(modifier);\n","        }\n","      }\n","    }\n","  }\n","\n","  @Override\n","  public boolean equals(Object o) {\n","    if (this == o) return true;\n","    if (o == null || getClass() != o.getClass()) return false;\n","    BitPosParams that = (BitPosParams) o;\n","    return Objects.equals(start, that.start) && Objects.equals(end, that.end) && Objects.equals(modifier, that.modifier);\n","  }\n","\n","  @Override\n","  public int hashCode() {\n","    return Objects.hash(start, end, modifier);\n","  }\n","}\n"],"test_content":["package redis.clients.jedis.params;\n","\n","import org.junit.Test;\n","\n","import static org.junit.Assert.*;\n","\n","public class BitPosParamsTest {\n","\n","    @Test\n","    public void checkEqualsIdenticalParams() {\n","        BitPosParams firstParam = getDefaultValue();\n","        BitPosParams secondParam = getDefaultValue();\n","        assertTrue(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeIdenticalParams() {\n","        BitPosParams firstParam = getDefaultValue();\n","        BitPosParams secondParam = getDefaultValue();\n","        assertEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsVariousParams() {\n","        BitPosParams firstParam = getDefaultValue();\n","        BitPosParams secondParam = getDefaultValue();\n","        secondParam.end(15);\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeVariousParams() {\n","        BitPosParams firstParam = getDefaultValue();\n","        BitPosParams secondParam = getDefaultValue();\n","        secondParam.start(15);\n","        assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsWithNull() {\n","        BitPosParams firstParam = getDefaultValue();\n","        BitPosParams secondParam = null;\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    private BitPosParams getDefaultValue() {\n","        return new BitPosParams();\n","    }\n","}\n"],"method_lines_dic":{"BitPosParams::::bitPosParams()":[29,31],"BitPosParams::::start(long)":[33,36],"BitPosParams::::end(long)":[41,44],"BitPosParams::::modifier(redis.clients.jedis.args.BitCountOption)":[50,53],"BitPosParams::::addParams(redis.clients.jedis.CommandArguments)":[55,66],"BitPosParams::::equals(java.lang.Object)":[68,74],"BitPosParams::::hashCode()":[76,79]},"test_method_lines_dic":{"BitPosParamsTest::::checkEqualsIdenticalParams()":[9,14],"BitPosParamsTest::::checkHashCodeIdenticalParams()":[16,21],"BitPosParamsTest::::checkEqualsVariousParams()":[23,29],"BitPosParamsTest::::checkHashCodeVariousParams()":[31,37],"BitPosParamsTest::::checkEqualsWithNull()":[39,44],"BitPosParamsTest::::getDefaultValue()":[46,48]},"reverse_method_lines_dic":{"29":"BitPosParams::::bitPosParams()","30":"BitPosParams::::bitPosParams()","31":"BitPosParams::::bitPosParams()","33":"BitPosParams::::start(long)","34":"BitPosParams::::start(long)","35":"BitPosParams::::start(long)","36":"BitPosParams::::start(long)","41":"BitPosParams::::end(long)","42":"BitPosParams::::end(long)","43":"BitPosParams::::end(long)","44":"BitPosParams::::end(long)","50":"BitPosParams::::modifier(redis.clients.jedis.args.BitCountOption)","51":"BitPosParams::::modifier(redis.clients.jedis.args.BitCountOption)","52":"BitPosParams::::modifier(redis.clients.jedis.args.BitCountOption)","53":"BitPosParams::::modifier(redis.clients.jedis.args.BitCountOption)","55":"BitPosParams::::addParams(redis.clients.jedis.CommandArguments)","56":"BitPosParams::::addParams(redis.clients.jedis.CommandArguments)","57":"BitPosParams::::addParams(redis.clients.jedis.CommandArguments)","58":"BitPosParams::::addParams(redis.clients.jedis.CommandArguments)","59":"BitPosParams::::addParams(redis.clients.jedis.CommandArguments)","60":"BitPosParams::::addParams(redis.clients.jedis.CommandArguments)","61":"BitPosParams::::addParams(redis.clients.jedis.CommandArguments)","62":"BitPosParams::::addParams(redis.clients.jedis.CommandArguments)","63":"BitPosParams::::addParams(redis.clients.jedis.CommandArguments)","64":"BitPosParams::::addParams(redis.clients.jedis.CommandArguments)","65":"BitPosParams::::addParams(redis.clients.jedis.CommandArguments)","66":"BitPosParams::::addParams(redis.clients.jedis.CommandArguments)","68":"BitPosParams::::equals(java.lang.Object)","69":"BitPosParams::::equals(java.lang.Object)","70":"BitPosParams::::equals(java.lang.Object)","71":"BitPosParams::::equals(java.lang.Object)","72":"BitPosParams::::equals(java.lang.Object)","73":"BitPosParams::::equals(java.lang.Object)","74":"BitPosParams::::equals(java.lang.Object)","76":"BitPosParams::::hashCode()","77":"BitPosParams::::hashCode()","78":"BitPosParams::::hashCode()","79":"BitPosParams::::hashCode()"},"test_reverse_method_lines_dic":{"9":"BitPosParamsTest::::checkEqualsIdenticalParams()","10":"BitPosParamsTest::::checkEqualsIdenticalParams()","11":"BitPosParamsTest::::checkEqualsIdenticalParams()","12":"BitPosParamsTest::::checkEqualsIdenticalParams()","13":"BitPosParamsTest::::checkEqualsIdenticalParams()","14":"BitPosParamsTest::::checkEqualsIdenticalParams()","16":"BitPosParamsTest::::checkHashCodeIdenticalParams()","17":"BitPosParamsTest::::checkHashCodeIdenticalParams()","18":"BitPosParamsTest::::checkHashCodeIdenticalParams()","19":"BitPosParamsTest::::checkHashCodeIdenticalParams()","20":"BitPosParamsTest::::checkHashCodeIdenticalParams()","21":"BitPosParamsTest::::checkHashCodeIdenticalParams()","23":"BitPosParamsTest::::checkEqualsVariousParams()","24":"BitPosParamsTest::::checkEqualsVariousParams()","25":"BitPosParamsTest::::checkEqualsVariousParams()","26":"BitPosParamsTest::::checkEqualsVariousParams()","27":"BitPosParamsTest::::checkEqualsVariousParams()","28":"BitPosParamsTest::::checkEqualsVariousParams()","29":"BitPosParamsTest::::checkEqualsVariousParams()","31":"BitPosParamsTest::::checkHashCodeVariousParams()","32":"BitPosParamsTest::::checkHashCodeVariousParams()","33":"BitPosParamsTest::::checkHashCodeVariousParams()","34":"BitPosParamsTest::::checkHashCodeVariousParams()","35":"BitPosParamsTest::::checkHashCodeVariousParams()","36":"BitPosParamsTest::::checkHashCodeVariousParams()","37":"BitPosParamsTest::::checkHashCodeVariousParams()","39":"BitPosParamsTest::::checkEqualsWithNull()","40":"BitPosParamsTest::::checkEqualsWithNull()","41":"BitPosParamsTest::::checkEqualsWithNull()","42":"BitPosParamsTest::::checkEqualsWithNull()","43":"BitPosParamsTest::::checkEqualsWithNull()","44":"BitPosParamsTest::::checkEqualsWithNull()","46":"BitPosParamsTest::::getDefaultValue()","47":"BitPosParamsTest::::getDefaultValue()","48":"BitPosParamsTest::::getDefaultValue()"},"tests":[{"test_lines":[9,14],"covered_lines":[14,15,70,71,72,73]},{"test_lines":[16,21],"covered_lines":[14,15,78]},{"test_lines":[23,29],"covered_lines":[14,15,42,43,70,71,72,73]},{"test_lines":[31,37],"covered_lines":[14,15,34,35,78]},{"test_lines":[39,44],"covered_lines":[14,15,70,71]}]},"/bernard/dataset_construction/prep/repos/jedis/src/main/java/redis/clients/jedis/params/LPosParams.java":{"class_content":["package redis.clients.jedis.params;\n","\n","import redis.clients.jedis.CommandArguments;\n","import redis.clients.jedis.Protocol.Keyword;\n","\n","import java.util.Objects;\n","\n","public class LPosParams implements IParams {\n","\n","  private Integer rank;\n","  private Integer maxlen;\n","  \n","  public static LPosParams lPosParams() {\n","    return new LPosParams();\n","  }\n","\n","  public LPosParams rank(int rank) {\n","    this.rank = rank;\n","    return this;\n","  }\n","\n","  public LPosParams maxlen(int maxLen) {\n","    this.maxlen = maxLen;\n","    return this;\n","  }\n","\n","  @Override\n","  public void addParams(CommandArguments args) {\n","    if (rank != null) {\n","      args.add(Keyword.RANK).add(rank);\n","    }\n","\n","    if (maxlen != null) {\n","      args.add(Keyword.MAXLEN).add(maxlen);\n","    }\n","  }\n","\n","  @Override\n","  public boolean equals(Object o) {\n","    if (this == o) return true;\n","    if (o == null || getClass() != o.getClass()) return false;\n","    LPosParams that = (LPosParams) o;\n","    return Objects.equals(rank, that.rank) && Objects.equals(maxlen, that.maxlen);\n","  }\n","\n","  @Override\n","  public int hashCode() {\n","    return Objects.hash(rank, maxlen);\n","  }\n","}\n"],"test_content":["package redis.clients.jedis.params;\n","\n","import org.junit.Test;\n","\n","import static org.junit.Assert.*;\n","\n","public class LPosParamsTest {\n","\n","    @Test\n","    public void checkEqualsIdenticalParams() {\n","        LPosParams firstParam = getDefaultValue();\n","        LPosParams secondParam = getDefaultValue();\n","        assertTrue(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeIdenticalParams() {\n","        LPosParams firstParam = getDefaultValue();\n","        LPosParams secondParam = getDefaultValue();\n","        assertEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsVariousParams() {\n","        LPosParams firstParam = getDefaultValue();\n","        firstParam.rank(1);\n","        LPosParams secondParam = getDefaultValue();\n","        secondParam.rank(2);\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeVariousParams() {\n","        LPosParams firstParam = getDefaultValue();\n","        firstParam.rank(1);\n","        LPosParams secondParam = getDefaultValue();\n","        secondParam.rank(2);\n","        assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsWithNull() {\n","        LPosParams firstParam = getDefaultValue();\n","        LPosParams secondParam = null;\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    private LPosParams getDefaultValue() {\n","        return new LPosParams();\n","    }\n","}\n"],"method_lines_dic":{"LPosParams::::lPosParams()":[13,15],"LPosParams::::rank(int)":[17,20],"LPosParams::::maxlen(int)":[22,25],"LPosParams::::addParams(redis.clients.jedis.CommandArguments)":[27,36],"LPosParams::::equals(java.lang.Object)":[38,44],"LPosParams::::hashCode()":[46,49]},"test_method_lines_dic":{"LPosParamsTest::::checkEqualsIdenticalParams()":[9,14],"LPosParamsTest::::checkHashCodeIdenticalParams()":[16,21],"LPosParamsTest::::checkEqualsVariousParams()":[23,30],"LPosParamsTest::::checkHashCodeVariousParams()":[32,39],"LPosParamsTest::::checkEqualsWithNull()":[41,46],"LPosParamsTest::::getDefaultValue()":[48,50]},"reverse_method_lines_dic":{"13":"LPosParams::::lPosParams()","14":"LPosParams::::lPosParams()","15":"LPosParams::::lPosParams()","17":"LPosParams::::rank(int)","18":"LPosParams::::rank(int)","19":"LPosParams::::rank(int)","20":"LPosParams::::rank(int)","22":"LPosParams::::maxlen(int)","23":"LPosParams::::maxlen(int)","24":"LPosParams::::maxlen(int)","25":"LPosParams::::maxlen(int)","27":"LPosParams::::addParams(redis.clients.jedis.CommandArguments)","28":"LPosParams::::addParams(redis.clients.jedis.CommandArguments)","29":"LPosParams::::addParams(redis.clients.jedis.CommandArguments)","30":"LPosParams::::addParams(redis.clients.jedis.CommandArguments)","31":"LPosParams::::addParams(redis.clients.jedis.CommandArguments)","32":"LPosParams::::addParams(redis.clients.jedis.CommandArguments)","33":"LPosParams::::addParams(redis.clients.jedis.CommandArguments)","34":"LPosParams::::addParams(redis.clients.jedis.CommandArguments)","35":"LPosParams::::addParams(redis.clients.jedis.CommandArguments)","36":"LPosParams::::addParams(redis.clients.jedis.CommandArguments)","38":"LPosParams::::equals(java.lang.Object)","39":"LPosParams::::equals(java.lang.Object)","40":"LPosParams::::equals(java.lang.Object)","41":"LPosParams::::equals(java.lang.Object)","42":"LPosParams::::equals(java.lang.Object)","43":"LPosParams::::equals(java.lang.Object)","44":"LPosParams::::equals(java.lang.Object)","46":"LPosParams::::hashCode()","47":"LPosParams::::hashCode()","48":"LPosParams::::hashCode()","49":"LPosParams::::hashCode()"},"test_reverse_method_lines_dic":{"9":"LPosParamsTest::::checkEqualsIdenticalParams()","10":"LPosParamsTest::::checkEqualsIdenticalParams()","11":"LPosParamsTest::::checkEqualsIdenticalParams()","12":"LPosParamsTest::::checkEqualsIdenticalParams()","13":"LPosParamsTest::::checkEqualsIdenticalParams()","14":"LPosParamsTest::::checkEqualsIdenticalParams()","16":"LPosParamsTest::::checkHashCodeIdenticalParams()","17":"LPosParamsTest::::checkHashCodeIdenticalParams()","18":"LPosParamsTest::::checkHashCodeIdenticalParams()","19":"LPosParamsTest::::checkHashCodeIdenticalParams()","20":"LPosParamsTest::::checkHashCodeIdenticalParams()","21":"LPosParamsTest::::checkHashCodeIdenticalParams()","23":"LPosParamsTest::::checkEqualsVariousParams()","24":"LPosParamsTest::::checkEqualsVariousParams()","25":"LPosParamsTest::::checkEqualsVariousParams()","26":"LPosParamsTest::::checkEqualsVariousParams()","27":"LPosParamsTest::::checkEqualsVariousParams()","28":"LPosParamsTest::::checkEqualsVariousParams()","29":"LPosParamsTest::::checkEqualsVariousParams()","30":"LPosParamsTest::::checkEqualsVariousParams()","32":"LPosParamsTest::::checkHashCodeVariousParams()","33":"LPosParamsTest::::checkHashCodeVariousParams()","34":"LPosParamsTest::::checkHashCodeVariousParams()","35":"LPosParamsTest::::checkHashCodeVariousParams()","36":"LPosParamsTest::::checkHashCodeVariousParams()","37":"LPosParamsTest::::checkHashCodeVariousParams()","38":"LPosParamsTest::::checkHashCodeVariousParams()","39":"LPosParamsTest::::checkHashCodeVariousParams()","41":"LPosParamsTest::::checkEqualsWithNull()","42":"LPosParamsTest::::checkEqualsWithNull()","43":"LPosParamsTest::::checkEqualsWithNull()","44":"LPosParamsTest::::checkEqualsWithNull()","45":"LPosParamsTest::::checkEqualsWithNull()","46":"LPosParamsTest::::checkEqualsWithNull()","48":"LPosParamsTest::::getDefaultValue()","49":"LPosParamsTest::::getDefaultValue()","50":"LPosParamsTest::::getDefaultValue()"},"tests":[{"test_lines":[9,14],"covered_lines":[8,40,41,42,43]},{"test_lines":[16,21],"covered_lines":[8,48]},{"test_lines":[23,30],"covered_lines":[8,18,19,40,41,42,43]},{"test_lines":[32,39],"covered_lines":[8,18,19,48]},{"test_lines":[41,46],"covered_lines":[8,40,41]}]},"/bernard/dataset_construction/prep/repos/jedis/src/main/java/redis/clients/jedis/params/MigrateParams.java":{"class_content":["package redis.clients.jedis.params;\n","\n","import redis.clients.jedis.CommandArguments;\n","import redis.clients.jedis.Protocol.Keyword;\n","\n","import java.util.Objects;\n","\n","public class MigrateParams implements IParams {\n","\n","  private boolean copy = false;\n","  private boolean replace = false;\n","  private String username = null;\n","  private String password = null;\n","\n","  public MigrateParams() {\n","  }\n","\n","  public static MigrateParams migrateParams() {\n","    return new MigrateParams();\n","  }\n","\n","  public MigrateParams copy() {\n","    this.copy = true;\n","    return this;\n","  }\n","\n","  public MigrateParams replace() {\n","    this.replace = true;\n","    return this;\n","  }\n","\n","  public MigrateParams auth(String password) {\n","    this.password = password;\n","    return this;\n","  }\n","\n","  public MigrateParams auth2(String username, String password) {\n","    this.username = username;\n","    this.password = password;\n","    return this;\n","  }\n","\n","  @Override\n","  public void addParams(CommandArguments args) {\n","    if (copy) {\n","      args.add(Keyword.COPY);\n","    }\n","    if (replace) {\n","      args.add(Keyword.REPLACE);\n","    }\n","    if (username != null) {\n","      args.add(Keyword.AUTH2).add(username).add(password);\n","    } else if (password != null) {\n","      args.add(Keyword.AUTH).add(password);\n","    }\n","  }\n","\n","  @Override\n","  public boolean equals(Object o) {\n","    if (this == o) return true;\n","    if (o == null || getClass() != o.getClass()) return false;\n","    MigrateParams that = (MigrateParams) o;\n","    return copy == that.copy && replace == that.replace && Objects.equals(username, that.username) && Objects.equals(password, that.password);\n","  }\n","\n","  @Override\n","  public int hashCode() {\n","    return Objects.hash(copy, replace, username, password);\n","  }\n","}\n"],"test_content":["package redis.clients.jedis.params;\n","\n","import org.junit.Test;\n","\n","import static org.junit.Assert.*;\n","\n","public class MigrateParamsTest {\n","\n","    @Test\n","    public void checkEqualsIdenticalParams() {\n","        MigrateParams firstParam = getDefaultValue();\n","        MigrateParams secondParam = getDefaultValue();\n","        assertTrue(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeIdenticalParams() {\n","        MigrateParams firstParam = getDefaultValue();\n","        MigrateParams secondParam = getDefaultValue();\n","        assertEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsVariousParams() {\n","        MigrateParams firstParam = getDefaultValue();\n","        firstParam.auth(\"123\");\n","        MigrateParams secondParam = getDefaultValue();\n","        secondParam.auth(\"234\");\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeVariousParams() {\n","        MigrateParams firstParam = getDefaultValue();\n","        firstParam.auth(\"123\");\n","        MigrateParams secondParam = getDefaultValue();\n","        secondParam.auth(\"234\");\n","        assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsWithNull() {\n","        MigrateParams firstParam = getDefaultValue();\n","        MigrateParams secondParam = null;\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    private MigrateParams getDefaultValue() {\n","        return new MigrateParams();\n","    }\n","}\n"],"method_lines_dic":{"MigrateParams::::migrateParams()":[18,20],"MigrateParams::::copy()":[22,25],"MigrateParams::::replace()":[27,30],"MigrateParams::::auth(java.lang.String)":[32,35],"MigrateParams::::auth2(java.lang.String,java.lang.String)":[37,41],"MigrateParams::::addParams(redis.clients.jedis.CommandArguments)":[43,56],"MigrateParams::::equals(java.lang.Object)":[58,64],"MigrateParams::::hashCode()":[66,69]},"test_method_lines_dic":{"MigrateParamsTest::::checkEqualsIdenticalParams()":[9,14],"MigrateParamsTest::::checkHashCodeIdenticalParams()":[16,21],"MigrateParamsTest::::checkEqualsVariousParams()":[23,30],"MigrateParamsTest::::checkHashCodeVariousParams()":[32,39],"MigrateParamsTest::::checkEqualsWithNull()":[41,46],"MigrateParamsTest::::getDefaultValue()":[48,50]},"reverse_method_lines_dic":{"18":"MigrateParams::::migrateParams()","19":"MigrateParams::::migrateParams()","20":"MigrateParams::::migrateParams()","22":"MigrateParams::::copy()","23":"MigrateParams::::copy()","24":"MigrateParams::::copy()","25":"MigrateParams::::copy()","27":"MigrateParams::::replace()","28":"MigrateParams::::replace()","29":"MigrateParams::::replace()","30":"MigrateParams::::replace()","32":"MigrateParams::::auth(java.lang.String)","33":"MigrateParams::::auth(java.lang.String)","34":"MigrateParams::::auth(java.lang.String)","35":"MigrateParams::::auth(java.lang.String)","37":"MigrateParams::::auth2(java.lang.String,java.lang.String)","38":"MigrateParams::::auth2(java.lang.String,java.lang.String)","39":"MigrateParams::::auth2(java.lang.String,java.lang.String)","40":"MigrateParams::::auth2(java.lang.String,java.lang.String)","41":"MigrateParams::::auth2(java.lang.String,java.lang.String)","43":"MigrateParams::::addParams(redis.clients.jedis.CommandArguments)","44":"MigrateParams::::addParams(redis.clients.jedis.CommandArguments)","45":"MigrateParams::::addParams(redis.clients.jedis.CommandArguments)","46":"MigrateParams::::addParams(redis.clients.jedis.CommandArguments)","47":"MigrateParams::::addParams(redis.clients.jedis.CommandArguments)","48":"MigrateParams::::addParams(redis.clients.jedis.CommandArguments)","49":"MigrateParams::::addParams(redis.clients.jedis.CommandArguments)","50":"MigrateParams::::addParams(redis.clients.jedis.CommandArguments)","51":"MigrateParams::::addParams(redis.clients.jedis.CommandArguments)","52":"MigrateParams::::addParams(redis.clients.jedis.CommandArguments)","53":"MigrateParams::::addParams(redis.clients.jedis.CommandArguments)","54":"MigrateParams::::addParams(redis.clients.jedis.CommandArguments)","55":"MigrateParams::::addParams(redis.clients.jedis.CommandArguments)","56":"MigrateParams::::addParams(redis.clients.jedis.CommandArguments)","58":"MigrateParams::::equals(java.lang.Object)","59":"MigrateParams::::equals(java.lang.Object)","60":"MigrateParams::::equals(java.lang.Object)","61":"MigrateParams::::equals(java.lang.Object)","62":"MigrateParams::::equals(java.lang.Object)","63":"MigrateParams::::equals(java.lang.Object)","64":"MigrateParams::::equals(java.lang.Object)","66":"MigrateParams::::hashCode()","67":"MigrateParams::::hashCode()","68":"MigrateParams::::hashCode()","69":"MigrateParams::::hashCode()"},"test_reverse_method_lines_dic":{"9":"MigrateParamsTest::::checkEqualsIdenticalParams()","10":"MigrateParamsTest::::checkEqualsIdenticalParams()","11":"MigrateParamsTest::::checkEqualsIdenticalParams()","12":"MigrateParamsTest::::checkEqualsIdenticalParams()","13":"MigrateParamsTest::::checkEqualsIdenticalParams()","14":"MigrateParamsTest::::checkEqualsIdenticalParams()","16":"MigrateParamsTest::::checkHashCodeIdenticalParams()","17":"MigrateParamsTest::::checkHashCodeIdenticalParams()","18":"MigrateParamsTest::::checkHashCodeIdenticalParams()","19":"MigrateParamsTest::::checkHashCodeIdenticalParams()","20":"MigrateParamsTest::::checkHashCodeIdenticalParams()","21":"MigrateParamsTest::::checkHashCodeIdenticalParams()","23":"MigrateParamsTest::::checkEqualsVariousParams()","24":"MigrateParamsTest::::checkEqualsVariousParams()","25":"MigrateParamsTest::::checkEqualsVariousParams()","26":"MigrateParamsTest::::checkEqualsVariousParams()","27":"MigrateParamsTest::::checkEqualsVariousParams()","28":"MigrateParamsTest::::checkEqualsVariousParams()","29":"MigrateParamsTest::::checkEqualsVariousParams()","30":"MigrateParamsTest::::checkEqualsVariousParams()","32":"MigrateParamsTest::::checkHashCodeVariousParams()","33":"MigrateParamsTest::::checkHashCodeVariousParams()","34":"MigrateParamsTest::::checkHashCodeVariousParams()","35":"MigrateParamsTest::::checkHashCodeVariousParams()","36":"MigrateParamsTest::::checkHashCodeVariousParams()","37":"MigrateParamsTest::::checkHashCodeVariousParams()","38":"MigrateParamsTest::::checkHashCodeVariousParams()","39":"MigrateParamsTest::::checkHashCodeVariousParams()","41":"MigrateParamsTest::::checkEqualsWithNull()","42":"MigrateParamsTest::::checkEqualsWithNull()","43":"MigrateParamsTest::::checkEqualsWithNull()","44":"MigrateParamsTest::::checkEqualsWithNull()","45":"MigrateParamsTest::::checkEqualsWithNull()","46":"MigrateParamsTest::::checkEqualsWithNull()","48":"MigrateParamsTest::::getDefaultValue()","49":"MigrateParamsTest::::getDefaultValue()","50":"MigrateParamsTest::::getDefaultValue()"},"tests":[{"test_lines":[9,14],"covered_lines":[10,11,12,13,15,16,60,61,62,63]},{"test_lines":[16,21],"covered_lines":[10,11,12,13,15,16,68]},{"test_lines":[23,30],"covered_lines":[10,11,12,13,15,16,33,34,60,61,62,63]},{"test_lines":[32,39],"covered_lines":[10,11,12,13,15,16,33,34,68]},{"test_lines":[41,46],"covered_lines":[10,11,12,13,15,16,60,61]}]},"/bernard/dataset_construction/prep/repos/jedis/src/main/java/redis/clients/jedis/params/LCSParams.java":{"class_content":["package redis.clients.jedis.params;\n","\n","import redis.clients.jedis.CommandArguments;\n","import redis.clients.jedis.Protocol.Keyword;\n","\n","import java.util.Objects;\n","\n","public class LCSParams implements IParams {\n","\n","  private boolean len = false;\n","  private boolean idx = false;\n","  private Long minMatchLen;\n","  private boolean withMatchLen = false;\n","\n","  public static LCSParams LCSParams() { return new LCSParams(); }\n","\n","  /**\n","   * When LEN is given the command returns the length of the longest common substring.\n","   * @return LCSParams\n","   */\n","  public LCSParams len() {\n","    this.len = true;\n","    return this;\n","  }\n","\n","  /**\n","   * When IDX is given the command returns an array with the LCS length\n","   * and all the ranges in both the strings, start and end offset for\n","   * each string, where there are matches.\n","   * @return LCSParams\n","   */\n","  public LCSParams idx() {\n","    this.idx = true;\n","    return this;\n","  }\n","\n","  /**\n","   * Specify the minimum match length.\n","   * @return LCSParams\n","   */\n","  public LCSParams minMatchLen(long minMatchLen) {\n","    this.minMatchLen = minMatchLen;\n","    return this;\n","  }\n","\n","  /**\n","   * When WITHMATCHLEN is given each array representing a match will also have the length of the match.\n","   * @return LCSParams\n","   */\n","  public LCSParams withMatchLen() {\n","    this.withMatchLen = true;\n","    return this;\n","  }\n","\n","  @Override\n","  public void addParams(CommandArguments args) {\n","    if (len) {\n","      args.add(Keyword.LEN);\n","    }\n","    if (idx) {\n","      args.add(Keyword.IDX);\n","    }\n","    if (minMatchLen != null) {\n","      args.add(Keyword.MINMATCHLEN).add(minMatchLen);\n","    }\n","    if (withMatchLen) {\n","      args.add(Keyword.WITHMATCHLEN);\n","    }\n","  }\n","\n","  @Override\n","  public boolean equals(Object o) {\n","    if (this == o) return true;\n","    if (o == null || getClass() != o.getClass()) return false;\n","    LCSParams lcsParams = (LCSParams) o;\n","    return len == lcsParams.len && idx == lcsParams.idx && withMatchLen == lcsParams.withMatchLen && Objects.equals(minMatchLen, lcsParams.minMatchLen);\n","  }\n","\n","  @Override\n","  public int hashCode() {\n","    return Objects.hash(len, idx, minMatchLen, withMatchLen);\n","  }\n","}\n"],"test_content":["package redis.clients.jedis.params;\n","\n","import org.junit.Test;\n","\n","import static org.junit.Assert.*;\n","\n","public class LCSParamsTest {\n","\n","    @Test\n","    public void checkEqualsIdenticalParams() {\n","        LCSParams firstParam = getDefaultValue();\n","        LCSParams secondParam = getDefaultValue();\n","        assertTrue(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeIdenticalParams() {\n","        LCSParams firstParam = getDefaultValue();\n","        LCSParams secondParam = getDefaultValue();\n","        assertEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsVariousParams() {\n","        LCSParams firstParam = getDefaultValue();\n","        firstParam.idx();\n","        LCSParams secondParam = getDefaultValue();\n","        secondParam.len();\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeVariousParams() {\n","        LCSParams firstParam = getDefaultValue();\n","        firstParam.idx();\n","        LCSParams secondParam = getDefaultValue();\n","        secondParam.len();\n","        assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsWithNull() {\n","        LCSParams firstParam = getDefaultValue();\n","        LCSParams secondParam = null;\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    private LCSParams getDefaultValue() {\n","        return new LCSParams();\n","    }\n","}\n"],"method_lines_dic":{"LCSParams::::LCSParams()":[15,15],"LCSParams::::len()":[21,24],"LCSParams::::idx()":[32,35],"LCSParams::::minMatchLen(long)":[41,44],"LCSParams::::withMatchLen()":[50,53],"LCSParams::::addParams(redis.clients.jedis.CommandArguments)":[55,69],"LCSParams::::equals(java.lang.Object)":[71,77],"LCSParams::::hashCode()":[79,82]},"test_method_lines_dic":{"LCSParamsTest::::checkEqualsIdenticalParams()":[9,14],"LCSParamsTest::::checkHashCodeIdenticalParams()":[16,21],"LCSParamsTest::::checkEqualsVariousParams()":[23,30],"LCSParamsTest::::checkHashCodeVariousParams()":[32,39],"LCSParamsTest::::checkEqualsWithNull()":[41,46],"LCSParamsTest::::getDefaultValue()":[48,50]},"reverse_method_lines_dic":{"15":"LCSParams::::LCSParams()","21":"LCSParams::::len()","22":"LCSParams::::len()","23":"LCSParams::::len()","24":"LCSParams::::len()","32":"LCSParams::::idx()","33":"LCSParams::::idx()","34":"LCSParams::::idx()","35":"LCSParams::::idx()","41":"LCSParams::::minMatchLen(long)","42":"LCSParams::::minMatchLen(long)","43":"LCSParams::::minMatchLen(long)","44":"LCSParams::::minMatchLen(long)","50":"LCSParams::::withMatchLen()","51":"LCSParams::::withMatchLen()","52":"LCSParams::::withMatchLen()","53":"LCSParams::::withMatchLen()","55":"LCSParams::::addParams(redis.clients.jedis.CommandArguments)","56":"LCSParams::::addParams(redis.clients.jedis.CommandArguments)","57":"LCSParams::::addParams(redis.clients.jedis.CommandArguments)","58":"LCSParams::::addParams(redis.clients.jedis.CommandArguments)","59":"LCSParams::::addParams(redis.clients.jedis.CommandArguments)","60":"LCSParams::::addParams(redis.clients.jedis.CommandArguments)","61":"LCSParams::::addParams(redis.clients.jedis.CommandArguments)","62":"LCSParams::::addParams(redis.clients.jedis.CommandArguments)","63":"LCSParams::::addParams(redis.clients.jedis.CommandArguments)","64":"LCSParams::::addParams(redis.clients.jedis.CommandArguments)","65":"LCSParams::::addParams(redis.clients.jedis.CommandArguments)","66":"LCSParams::::addParams(redis.clients.jedis.CommandArguments)","67":"LCSParams::::addParams(redis.clients.jedis.CommandArguments)","68":"LCSParams::::addParams(redis.clients.jedis.CommandArguments)","69":"LCSParams::::addParams(redis.clients.jedis.CommandArguments)","71":"LCSParams::::equals(java.lang.Object)","72":"LCSParams::::equals(java.lang.Object)","73":"LCSParams::::equals(java.lang.Object)","74":"LCSParams::::equals(java.lang.Object)","75":"LCSParams::::equals(java.lang.Object)","76":"LCSParams::::equals(java.lang.Object)","77":"LCSParams::::equals(java.lang.Object)","79":"LCSParams::::hashCode()","80":"LCSParams::::hashCode()","81":"LCSParams::::hashCode()","82":"LCSParams::::hashCode()"},"test_reverse_method_lines_dic":{"9":"LCSParamsTest::::checkEqualsIdenticalParams()","10":"LCSParamsTest::::checkEqualsIdenticalParams()","11":"LCSParamsTest::::checkEqualsIdenticalParams()","12":"LCSParamsTest::::checkEqualsIdenticalParams()","13":"LCSParamsTest::::checkEqualsIdenticalParams()","14":"LCSParamsTest::::checkEqualsIdenticalParams()","16":"LCSParamsTest::::checkHashCodeIdenticalParams()","17":"LCSParamsTest::::checkHashCodeIdenticalParams()","18":"LCSParamsTest::::checkHashCodeIdenticalParams()","19":"LCSParamsTest::::checkHashCodeIdenticalParams()","20":"LCSParamsTest::::checkHashCodeIdenticalParams()","21":"LCSParamsTest::::checkHashCodeIdenticalParams()","23":"LCSParamsTest::::checkEqualsVariousParams()","24":"LCSParamsTest::::checkEqualsVariousParams()","25":"LCSParamsTest::::checkEqualsVariousParams()","26":"LCSParamsTest::::checkEqualsVariousParams()","27":"LCSParamsTest::::checkEqualsVariousParams()","28":"LCSParamsTest::::checkEqualsVariousParams()","29":"LCSParamsTest::::checkEqualsVariousParams()","30":"LCSParamsTest::::checkEqualsVariousParams()","32":"LCSParamsTest::::checkHashCodeVariousParams()","33":"LCSParamsTest::::checkHashCodeVariousParams()","34":"LCSParamsTest::::checkHashCodeVariousParams()","35":"LCSParamsTest::::checkHashCodeVariousParams()","36":"LCSParamsTest::::checkHashCodeVariousParams()","37":"LCSParamsTest::::checkHashCodeVariousParams()","38":"LCSParamsTest::::checkHashCodeVariousParams()","39":"LCSParamsTest::::checkHashCodeVariousParams()","41":"LCSParamsTest::::checkEqualsWithNull()","42":"LCSParamsTest::::checkEqualsWithNull()","43":"LCSParamsTest::::checkEqualsWithNull()","44":"LCSParamsTest::::checkEqualsWithNull()","45":"LCSParamsTest::::checkEqualsWithNull()","46":"LCSParamsTest::::checkEqualsWithNull()","48":"LCSParamsTest::::getDefaultValue()","49":"LCSParamsTest::::getDefaultValue()","50":"LCSParamsTest::::getDefaultValue()"},"tests":[{"test_lines":[9,14],"covered_lines":[8,10,11,13,73,74,75,76]},{"test_lines":[16,21],"covered_lines":[8,10,11,13,81]},{"test_lines":[23,30],"covered_lines":[8,10,11,13,22,23,33,34,73,74,75,76]},{"test_lines":[32,39],"covered_lines":[8,10,11,13,22,23,33,34,81]},{"test_lines":[41,46],"covered_lines":[8,10,11,13,73,74]}]},"/bernard/dataset_construction/prep/repos/jedis/src/main/java/redis/clients/jedis/params/XAddParams.java":{"class_content":["package redis.clients.jedis.params;\n","\n","import redis.clients.jedis.CommandArguments;\n","import redis.clients.jedis.Protocol;\n","import redis.clients.jedis.Protocol.Keyword;\n","import redis.clients.jedis.StreamEntryID;\n","import redis.clients.jedis.args.Rawable;\n","import redis.clients.jedis.args.RawableFactory;\n","\n","import java.util.Objects;\n","\n","public class XAddParams implements IParams {\n","\n","  private Rawable id;\n","\n","  private Long maxLen;\n","\n","  private boolean approximateTrimming;\n","\n","  private boolean exactTrimming;\n","\n","  private boolean nomkstream;\n","\n","  private String minId;\n","\n","  private Long limit;\n","\n","  public static XAddParams xAddParams() {\n","    return new XAddParams();\n","  }\n","\n","  public XAddParams noMkStream() {\n","    this.nomkstream = true;\n","    return this;\n","  }\n","\n","  public XAddParams id(byte[] id) {\n","    this.id = RawableFactory.from(id);\n","    return this;\n","  }\n","\n","  public XAddParams id(String id) {\n","    this.id = RawableFactory.from(id);\n","    return this;\n","  }\n","\n","  public XAddParams id(StreamEntryID id) {\n","    return id(id.toString());\n","  }\n","\n","  public XAddParams id(long time, long sequence) {\n","    return id(time + \"-\" + sequence);\n","  }\n","\n","  public XAddParams id(long time) {\n","    return id(time + \"-*\");\n","  }\n","\n","  public XAddParams maxLen(long maxLen) {\n","    this.maxLen = maxLen;\n","    return this;\n","  }\n","\n","  public XAddParams minId(String minId) {\n","    this.minId = minId;\n","    return this;\n","  }\n","\n","  public XAddParams approximateTrimming() {\n","    this.approximateTrimming = true;\n","    return this;\n","  }\n","\n","  public XAddParams exactTrimming() {\n","    this.exactTrimming = true;\n","    return this;\n","  }\n","\n","  public XAddParams limit(long limit) {\n","    this.limit = limit;\n","    return this;\n","  }\n","\n","  @Override\n","  public void addParams(CommandArguments args) {\n","\n","    if (nomkstream) {\n","      args.add(Keyword.NOMKSTREAM);\n","    }\n","\n","    if (maxLen != null) {\n","      args.add(Keyword.MAXLEN);\n","\n","      if (approximateTrimming) {\n","        args.add(Protocol.BYTES_TILDE);\n","      } else if (exactTrimming) {\n","        args.add(Protocol.BYTES_EQUAL);\n","      }\n","\n","      args.add(maxLen);\n","    } else if (minId != null) {\n","      args.add(Keyword.MINID);\n","\n","      if (approximateTrimming) {\n","        args.add(Protocol.BYTES_TILDE);\n","      } else if (exactTrimming) {\n","        args.add(Protocol.BYTES_EQUAL);\n","      }\n","\n","      args.add(minId);\n","    }\n","\n","    if (limit != null) {\n","      args.add(Keyword.LIMIT).add(limit);\n","    }\n","\n","    args.add(id != null ? id : StreamEntryID.NEW_ENTRY);\n","  }\n","\n","  @Override\n","  public boolean equals(Object o) {\n","    if (this == o) return true;\n","    if (o == null || getClass() != o.getClass()) return false;\n","    XAddParams that = (XAddParams) o;\n","    return approximateTrimming == that.approximateTrimming && exactTrimming == that.exactTrimming && nomkstream == that.nomkstream && Objects.equals(id, that.id) && Objects.equals(maxLen, that.maxLen) && Objects.equals(minId, that.minId) && Objects.equals(limit, that.limit);\n","  }\n","\n","  @Override\n","  public int hashCode() {\n","    return Objects.hash(id, maxLen, approximateTrimming, exactTrimming, nomkstream, minId, limit);\n","  }\n","}\n"],"test_content":["package redis.clients.jedis.params;\n","\n","import org.junit.Test;\n","\n","import static org.junit.Assert.*;\n","\n","public class XAddParamsTest {\n","\n","    @Test\n","    public void checkEqualsIdenticalParams() {\n","        XAddParams firstParam = getDefaultValue();\n","        XAddParams secondParam = getDefaultValue();\n","        assertTrue(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeIdenticalParams() {\n","        XAddParams firstParam = getDefaultValue();\n","        XAddParams secondParam = getDefaultValue();\n","        assertEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsVariousParams() {\n","        XAddParams firstParam = getDefaultValue();\n","        firstParam.id(15);\n","        XAddParams secondParam = getDefaultValue();\n","        secondParam.id(20);\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeVariousParams() {\n","        XAddParams firstParam = getDefaultValue();\n","        firstParam.id(15);\n","        XAddParams secondParam = getDefaultValue();\n","        secondParam.id(20);\n","        assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsWithNull() {\n","        XAddParams firstParam = getDefaultValue();\n","        XAddParams secondParam = null;\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    private XAddParams getDefaultValue() {\n","        return new XAddParams();\n","    }\n","}\n"],"method_lines_dic":{"XAddParams::::xAddParams()":[28,30],"XAddParams::::noMkStream()":[32,35],"XAddParams::::id(byte[])":[37,40],"XAddParams::::id(java.lang.String)":[42,45],"XAddParams::::id(redis.clients.jedis.StreamEntryID)":[47,49],"XAddParams::::id(long,long)":[51,53],"XAddParams::::id(long)":[55,57],"XAddParams::::maxLen(long)":[59,62],"XAddParams::::minId(java.lang.String)":[64,67],"XAddParams::::approximateTrimming()":[69,72],"XAddParams::::exactTrimming()":[74,77],"XAddParams::::limit(long)":[79,82],"XAddParams::::addParams(redis.clients.jedis.CommandArguments)":[84,118],"XAddParams::::equals(java.lang.Object)":[120,126],"XAddParams::::hashCode()":[128,131]},"test_method_lines_dic":{"XAddParamsTest::::checkEqualsIdenticalParams()":[9,14],"XAddParamsTest::::checkHashCodeIdenticalParams()":[16,21],"XAddParamsTest::::checkEqualsVariousParams()":[23,30],"XAddParamsTest::::checkHashCodeVariousParams()":[32,39],"XAddParamsTest::::checkEqualsWithNull()":[41,46],"XAddParamsTest::::getDefaultValue()":[48,50]},"reverse_method_lines_dic":{"28":"XAddParams::::xAddParams()","29":"XAddParams::::xAddParams()","30":"XAddParams::::xAddParams()","32":"XAddParams::::noMkStream()","33":"XAddParams::::noMkStream()","34":"XAddParams::::noMkStream()","35":"XAddParams::::noMkStream()","37":"XAddParams::::id(byte[])","38":"XAddParams::::id(byte[])","39":"XAddParams::::id(byte[])","40":"XAddParams::::id(byte[])","42":"XAddParams::::id(java.lang.String)","43":"XAddParams::::id(java.lang.String)","44":"XAddParams::::id(java.lang.String)","45":"XAddParams::::id(java.lang.String)","47":"XAddParams::::id(redis.clients.jedis.StreamEntryID)","48":"XAddParams::::id(redis.clients.jedis.StreamEntryID)","49":"XAddParams::::id(redis.clients.jedis.StreamEntryID)","51":"XAddParams::::id(long,long)","52":"XAddParams::::id(long,long)","53":"XAddParams::::id(long,long)","55":"XAddParams::::id(long)","56":"XAddParams::::id(long)","57":"XAddParams::::id(long)","59":"XAddParams::::maxLen(long)","60":"XAddParams::::maxLen(long)","61":"XAddParams::::maxLen(long)","62":"XAddParams::::maxLen(long)","64":"XAddParams::::minId(java.lang.String)","65":"XAddParams::::minId(java.lang.String)","66":"XAddParams::::minId(java.lang.String)","67":"XAddParams::::minId(java.lang.String)","69":"XAddParams::::approximateTrimming()","70":"XAddParams::::approximateTrimming()","71":"XAddParams::::approximateTrimming()","72":"XAddParams::::approximateTrimming()","74":"XAddParams::::exactTrimming()","75":"XAddParams::::exactTrimming()","76":"XAddParams::::exactTrimming()","77":"XAddParams::::exactTrimming()","79":"XAddParams::::limit(long)","80":"XAddParams::::limit(long)","81":"XAddParams::::limit(long)","82":"XAddParams::::limit(long)","84":"XAddParams::::addParams(redis.clients.jedis.CommandArguments)","85":"XAddParams::::addParams(redis.clients.jedis.CommandArguments)","86":"XAddParams::::addParams(redis.clients.jedis.CommandArguments)","87":"XAddParams::::addParams(redis.clients.jedis.CommandArguments)","88":"XAddParams::::addParams(redis.clients.jedis.CommandArguments)","89":"XAddParams::::addParams(redis.clients.jedis.CommandArguments)","90":"XAddParams::::addParams(redis.clients.jedis.CommandArguments)","91":"XAddParams::::addParams(redis.clients.jedis.CommandArguments)","92":"XAddParams::::addParams(redis.clients.jedis.CommandArguments)","93":"XAddParams::::addParams(redis.clients.jedis.CommandArguments)","94":"XAddParams::::addParams(redis.clients.jedis.CommandArguments)","95":"XAddParams::::addParams(redis.clients.jedis.CommandArguments)","96":"XAddParams::::addParams(redis.clients.jedis.CommandArguments)","97":"XAddParams::::addParams(redis.clients.jedis.CommandArguments)","98":"XAddParams::::addParams(redis.clients.jedis.CommandArguments)","99":"XAddParams::::addParams(redis.clients.jedis.CommandArguments)","100":"XAddParams::::addParams(redis.clients.jedis.CommandArguments)","101":"XAddParams::::addParams(redis.clients.jedis.CommandArguments)","102":"XAddParams::::addParams(redis.clients.jedis.CommandArguments)","103":"XAddParams::::addParams(redis.clients.jedis.CommandArguments)","104":"XAddParams::::addParams(redis.clients.jedis.CommandArguments)","105":"XAddParams::::addParams(redis.clients.jedis.CommandArguments)","106":"XAddParams::::addParams(redis.clients.jedis.CommandArguments)","107":"XAddParams::::addParams(redis.clients.jedis.CommandArguments)","108":"XAddParams::::addParams(redis.clients.jedis.CommandArguments)","109":"XAddParams::::addParams(redis.clients.jedis.CommandArguments)","110":"XAddParams::::addParams(redis.clients.jedis.CommandArguments)","111":"XAddParams::::addParams(redis.clients.jedis.CommandArguments)","112":"XAddParams::::addParams(redis.clients.jedis.CommandArguments)","113":"XAddParams::::addParams(redis.clients.jedis.CommandArguments)","114":"XAddParams::::addParams(redis.clients.jedis.CommandArguments)","115":"XAddParams::::addParams(redis.clients.jedis.CommandArguments)","116":"XAddParams::::addParams(redis.clients.jedis.CommandArguments)","117":"XAddParams::::addParams(redis.clients.jedis.CommandArguments)","118":"XAddParams::::addParams(redis.clients.jedis.CommandArguments)","120":"XAddParams::::equals(java.lang.Object)","121":"XAddParams::::equals(java.lang.Object)","122":"XAddParams::::equals(java.lang.Object)","123":"XAddParams::::equals(java.lang.Object)","124":"XAddParams::::equals(java.lang.Object)","125":"XAddParams::::equals(java.lang.Object)","126":"XAddParams::::equals(java.lang.Object)","128":"XAddParams::::hashCode()","129":"XAddParams::::hashCode()","130":"XAddParams::::hashCode()","131":"XAddParams::::hashCode()"},"test_reverse_method_lines_dic":{"9":"XAddParamsTest::::checkEqualsIdenticalParams()","10":"XAddParamsTest::::checkEqualsIdenticalParams()","11":"XAddParamsTest::::checkEqualsIdenticalParams()","12":"XAddParamsTest::::checkEqualsIdenticalParams()","13":"XAddParamsTest::::checkEqualsIdenticalParams()","14":"XAddParamsTest::::checkEqualsIdenticalParams()","16":"XAddParamsTest::::checkHashCodeIdenticalParams()","17":"XAddParamsTest::::checkHashCodeIdenticalParams()","18":"XAddParamsTest::::checkHashCodeIdenticalParams()","19":"XAddParamsTest::::checkHashCodeIdenticalParams()","20":"XAddParamsTest::::checkHashCodeIdenticalParams()","21":"XAddParamsTest::::checkHashCodeIdenticalParams()","23":"XAddParamsTest::::checkEqualsVariousParams()","24":"XAddParamsTest::::checkEqualsVariousParams()","25":"XAddParamsTest::::checkEqualsVariousParams()","26":"XAddParamsTest::::checkEqualsVariousParams()","27":"XAddParamsTest::::checkEqualsVariousParams()","28":"XAddParamsTest::::checkEqualsVariousParams()","29":"XAddParamsTest::::checkEqualsVariousParams()","30":"XAddParamsTest::::checkEqualsVariousParams()","32":"XAddParamsTest::::checkHashCodeVariousParams()","33":"XAddParamsTest::::checkHashCodeVariousParams()","34":"XAddParamsTest::::checkHashCodeVariousParams()","35":"XAddParamsTest::::checkHashCodeVariousParams()","36":"XAddParamsTest::::checkHashCodeVariousParams()","37":"XAddParamsTest::::checkHashCodeVariousParams()","38":"XAddParamsTest::::checkHashCodeVariousParams()","39":"XAddParamsTest::::checkHashCodeVariousParams()","41":"XAddParamsTest::::checkEqualsWithNull()","42":"XAddParamsTest::::checkEqualsWithNull()","43":"XAddParamsTest::::checkEqualsWithNull()","44":"XAddParamsTest::::checkEqualsWithNull()","45":"XAddParamsTest::::checkEqualsWithNull()","46":"XAddParamsTest::::checkEqualsWithNull()","48":"XAddParamsTest::::getDefaultValue()","49":"XAddParamsTest::::getDefaultValue()","50":"XAddParamsTest::::getDefaultValue()"},"tests":[{"test_lines":[9,14],"covered_lines":[12,122,123,124,125]},{"test_lines":[16,21],"covered_lines":[12,130]},{"test_lines":[23,30],"covered_lines":[12,43,44,56,122,123,124,125]},{"test_lines":[32,39],"covered_lines":[12,43,44,56,130]},{"test_lines":[41,46],"covered_lines":[12,122,123]}]},"/bernard/dataset_construction/prep/repos/jedis/src/main/java/redis/clients/jedis/params/ZRangeParams.java":{"class_content":["package redis.clients.jedis.params;\n","\n","import static redis.clients.jedis.Protocol.Keyword.BYLEX;\n","import static redis.clients.jedis.Protocol.Keyword.BYSCORE;\n","import static redis.clients.jedis.args.RawableFactory.from;\n","\n","import redis.clients.jedis.CommandArguments;\n","import redis.clients.jedis.Protocol.Keyword;\n","import redis.clients.jedis.args.Rawable;\n","\n","import java.util.Objects;\n","\n","public class ZRangeParams implements IParams {\n","\n","  private final Keyword by;\n","  private final Rawable min;\n","  private final Rawable max;\n","  private boolean rev = false;\n","\n","  private boolean limit = false;\n","  private int offset;\n","  private int count;\n","\n","  private ZRangeParams() {\n","    throw new InstantiationError(\"Empty constructor must not be called.\");\n","  }\n","\n","  public ZRangeParams(int min, int max) {\n","    this.by = null;\n","    this.min = from(min);\n","    this.max = from(max);\n","  }\n","\n","  public static ZRangeParams zrangeParams(int min, int max) {\n","    return new ZRangeParams(min, max);\n","  }\n","\n","  public ZRangeParams(double min, double max) {\n","    this.by = BYSCORE;\n","    this.min = from(min);\n","    this.max = from(max);\n","  }\n","\n","  public static ZRangeParams zrangeByScoreParams(double min, double max) {\n","    return new ZRangeParams(min, max);\n","  }\n","\n","  private ZRangeParams(Keyword by, Rawable min, Rawable max) {\n","    if (by == null || by == BYSCORE || by == BYLEX) {\n","      // ok\n","    } else {\n","      throw new IllegalArgumentException(by.name() + \" is not a valid ZRANGE type argument.\");\n","    }\n","    this.by = by;\n","    this.min = min;\n","    this.max = max;\n","  }\n","\n","  public ZRangeParams(Keyword by, String min, String max) {\n","    this(by, from(min), from(max));\n","  }\n","\n","  public ZRangeParams(Keyword by, byte[] min, byte[] max) {\n","    this(by, from(min), from(max));\n","  }\n","\n","  public static ZRangeParams zrangeByLexParams(String min, String max) {\n","    return new ZRangeParams(BYLEX, min, max);\n","  }\n","\n","  public static ZRangeParams zrangeByLexParams(byte[] min, byte[] max) {\n","    return new ZRangeParams(BYLEX, min, max);\n","  }\n","\n","  public ZRangeParams rev() {\n","    this.rev = true;\n","    return this;\n","  }\n","\n","  public ZRangeParams limit(int offset, int count) {\n","    this.limit = true;\n","    this.offset = offset;\n","    this.count = count;\n","    return this;\n","  }\n","\n","  @Override\n","  public void addParams(CommandArguments args) {\n","\n","    args.add(min).add(max);\n","    if (by != null) {\n","      args.add(by);\n","    }\n","\n","    if (rev) {\n","      args.add(Keyword.REV);\n","    }\n","\n","    if (limit) {\n","      args.add(Keyword.LIMIT).add(offset).add(count);\n","    }\n","  }\n","\n","  @Override\n","  public boolean equals(Object o) {\n","    if (this == o) return true;\n","    if (o == null || getClass() != o.getClass()) return false;\n","    ZRangeParams that = (ZRangeParams) o;\n","    return rev == that.rev && limit == that.limit && offset == that.offset && count == that.count && by == that.by && Objects.equals(min, that.min) && Objects.equals(max, that.max);\n","  }\n","\n","  @Override\n","  public int hashCode() {\n","    return Objects.hash(by, min, max, rev, limit, offset, count);\n","  }\n","}\n"],"test_content":["package redis.clients.jedis.params;\n","\n","import org.junit.Test;\n","\n","import static org.junit.Assert.*;\n","\n","public class ZRangeParamsTest {\n","\n","    @Test\n","    public void checkEqualsIdenticalParams() {\n","        ZRangeParams firstParam = getDefaultValue();\n","        ZRangeParams secondParam = getDefaultValue();\n","        assertTrue(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeIdenticalParams() {\n","        ZRangeParams firstParam = getDefaultValue();\n","        ZRangeParams secondParam = getDefaultValue();\n","        assertEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsVariousParams() {\n","        ZRangeParams firstParam = getDefaultValue();\n","        firstParam.limit(15, 20);\n","        ZRangeParams secondParam = getDefaultValue();\n","        secondParam.limit(16, 21);\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    @Test\n","    public void checkHashCodeVariousParams() {\n","        ZRangeParams firstParam = getDefaultValue();\n","        firstParam.limit(15, 20);\n","        ZRangeParams secondParam = getDefaultValue();\n","        secondParam.limit(16, 21);\n","        assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n","    }\n","\n","    @Test\n","    public void checkEqualsWithNull() {\n","        ZRangeParams firstParam = getDefaultValue();\n","        ZRangeParams secondParam = null;\n","        assertFalse(firstParam.equals(secondParam));\n","    }\n","\n","    private ZRangeParams getDefaultValue() {\n","        return new ZRangeParams(0, 0);\n","    }\n","}\n"],"method_lines_dic":{"ZRangeParams::::zrangeParams(int,int)":[34,36],"ZRangeParams::::zrangeByScoreParams(double,double)":[44,46],"ZRangeParams::::zrangeByLexParams(java.lang.String,java.lang.String)":[67,69],"ZRangeParams::::zrangeByLexParams(byte[],byte[])":[71,73],"ZRangeParams::::rev()":[75,78],"ZRangeParams::::limit(int,int)":[80,85],"ZRangeParams::::addParams(redis.clients.jedis.CommandArguments)":[87,102],"ZRangeParams::::equals(java.lang.Object)":[104,110],"ZRangeParams::::hashCode()":[112,115]},"test_method_lines_dic":{"ZRangeParamsTest::::checkEqualsIdenticalParams()":[9,14],"ZRangeParamsTest::::checkHashCodeIdenticalParams()":[16,21],"ZRangeParamsTest::::checkEqualsVariousParams()":[23,30],"ZRangeParamsTest::::checkHashCodeVariousParams()":[32,39],"ZRangeParamsTest::::checkEqualsWithNull()":[41,46],"ZRangeParamsTest::::getDefaultValue()":[48,50]},"reverse_method_lines_dic":{"34":"ZRangeParams::::zrangeParams(int,int)","35":"ZRangeParams::::zrangeParams(int,int)","36":"ZRangeParams::::zrangeParams(int,int)","44":"ZRangeParams::::zrangeByScoreParams(double,double)","45":"ZRangeParams::::zrangeByScoreParams(double,double)","46":"ZRangeParams::::zrangeByScoreParams(double,double)","67":"ZRangeParams::::zrangeByLexParams(java.lang.String,java.lang.String)","68":"ZRangeParams::::zrangeByLexParams(java.lang.String,java.lang.String)","69":"ZRangeParams::::zrangeByLexParams(java.lang.String,java.lang.String)","71":"ZRangeParams::::zrangeByLexParams(byte[],byte[])","72":"ZRangeParams::::zrangeByLexParams(byte[],byte[])","73":"ZRangeParams::::zrangeByLexParams(byte[],byte[])","75":"ZRangeParams::::rev()","76":"ZRangeParams::::rev()","77":"ZRangeParams::::rev()","78":"ZRangeParams::::rev()","80":"ZRangeParams::::limit(int,int)","81":"ZRangeParams::::limit(int,int)","82":"ZRangeParams::::limit(int,int)","83":"ZRangeParams::::limit(int,int)","84":"ZRangeParams::::limit(int,int)","85":"ZRangeParams::::limit(int,int)","87":"ZRangeParams::::addParams(redis.clients.jedis.CommandArguments)","88":"ZRangeParams::::addParams(redis.clients.jedis.CommandArguments)","89":"ZRangeParams::::addParams(redis.clients.jedis.CommandArguments)","90":"ZRangeParams::::addParams(redis.clients.jedis.CommandArguments)","91":"ZRangeParams::::addParams(redis.clients.jedis.CommandArguments)","92":"ZRangeParams::::addParams(redis.clients.jedis.CommandArguments)","93":"ZRangeParams::::addParams(redis.clients.jedis.CommandArguments)","94":"ZRangeParams::::addParams(redis.clients.jedis.CommandArguments)","95":"ZRangeParams::::addParams(redis.clients.jedis.CommandArguments)","96":"ZRangeParams::::addParams(redis.clients.jedis.CommandArguments)","97":"ZRangeParams::::addParams(redis.clients.jedis.CommandArguments)","98":"ZRangeParams::::addParams(redis.clients.jedis.CommandArguments)","99":"ZRangeParams::::addParams(redis.clients.jedis.CommandArguments)","100":"ZRangeParams::::addParams(redis.clients.jedis.CommandArguments)","101":"ZRangeParams::::addParams(redis.clients.jedis.CommandArguments)","102":"ZRangeParams::::addParams(redis.clients.jedis.CommandArguments)","104":"ZRangeParams::::equals(java.lang.Object)","105":"ZRangeParams::::equals(java.lang.Object)","106":"ZRangeParams::::equals(java.lang.Object)","107":"ZRangeParams::::equals(java.lang.Object)","108":"ZRangeParams::::equals(java.lang.Object)","109":"ZRangeParams::::equals(java.lang.Object)","110":"ZRangeParams::::equals(java.lang.Object)","112":"ZRangeParams::::hashCode()","113":"ZRangeParams::::hashCode()","114":"ZRangeParams::::hashCode()","115":"ZRangeParams::::hashCode()"},"test_reverse_method_lines_dic":{"9":"ZRangeParamsTest::::checkEqualsIdenticalParams()","10":"ZRangeParamsTest::::checkEqualsIdenticalParams()","11":"ZRangeParamsTest::::checkEqualsIdenticalParams()","12":"ZRangeParamsTest::::checkEqualsIdenticalParams()","13":"ZRangeParamsTest::::checkEqualsIdenticalParams()","14":"ZRangeParamsTest::::checkEqualsIdenticalParams()","16":"ZRangeParamsTest::::checkHashCodeIdenticalParams()","17":"ZRangeParamsTest::::checkHashCodeIdenticalParams()","18":"ZRangeParamsTest::::checkHashCodeIdenticalParams()","19":"ZRangeParamsTest::::checkHashCodeIdenticalParams()","20":"ZRangeParamsTest::::checkHashCodeIdenticalParams()","21":"ZRangeParamsTest::::checkHashCodeIdenticalParams()","23":"ZRangeParamsTest::::checkEqualsVariousParams()","24":"ZRangeParamsTest::::checkEqualsVariousParams()","25":"ZRangeParamsTest::::checkEqualsVariousParams()","26":"ZRangeParamsTest::::checkEqualsVariousParams()","27":"ZRangeParamsTest::::checkEqualsVariousParams()","28":"ZRangeParamsTest::::checkEqualsVariousParams()","29":"ZRangeParamsTest::::checkEqualsVariousParams()","30":"ZRangeParamsTest::::checkEqualsVariousParams()","32":"ZRangeParamsTest::::checkHashCodeVariousParams()","33":"ZRangeParamsTest::::checkHashCodeVariousParams()","34":"ZRangeParamsTest::::checkHashCodeVariousParams()","35":"ZRangeParamsTest::::checkHashCodeVariousParams()","36":"ZRangeParamsTest::::checkHashCodeVariousParams()","37":"ZRangeParamsTest::::checkHashCodeVariousParams()","38":"ZRangeParamsTest::::checkHashCodeVariousParams()","39":"ZRangeParamsTest::::checkHashCodeVariousParams()","41":"ZRangeParamsTest::::checkEqualsWithNull()","42":"ZRangeParamsTest::::checkEqualsWithNull()","43":"ZRangeParamsTest::::checkEqualsWithNull()","44":"ZRangeParamsTest::::checkEqualsWithNull()","45":"ZRangeParamsTest::::checkEqualsWithNull()","46":"ZRangeParamsTest::::checkEqualsWithNull()","48":"ZRangeParamsTest::::getDefaultValue()","49":"ZRangeParamsTest::::getDefaultValue()","50":"ZRangeParamsTest::::getDefaultValue()"},"tests":[{"test_lines":[9,14],"covered_lines":[18,20,28,29,30,31,32,106,107,108,109]},{"test_lines":[16,21],"covered_lines":[18,20,28,29,30,31,32,114]},{"test_lines":[23,30],"covered_lines":[18,20,28,29,30,31,32,81,82,83,84,106,107,108,109]},{"test_lines":[32,39],"covered_lines":[18,20,28,29,30,31,32,81,82,83,84,114]},{"test_lines":[41,46],"covered_lines":[18,20,28,29,30,31,32,106,107]}]},"/bernard/dataset_construction/prep/repos/jedis/src/main/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProvider.java":{"class_content":["package redis.clients.jedis.providers;\n","\n","import io.github.resilience4j.circuitbreaker.CircuitBreaker;\n","import io.github.resilience4j.circuitbreaker.CircuitBreaker.State;\n","import io.github.resilience4j.circuitbreaker.CircuitBreakerConfig;\n","import io.github.resilience4j.circuitbreaker.CircuitBreakerRegistry;\n","import io.github.resilience4j.core.IntervalFunction;\n","import io.github.resilience4j.retry.Retry;\n","import io.github.resilience4j.retry.RetryConfig;\n","import io.github.resilience4j.retry.RetryRegistry;\n","\n","import java.util.Collections;\n","import java.util.List;\n","import java.util.Map;\n","import java.util.concurrent.ConcurrentHashMap;\n","import java.util.function.Consumer;\n","import org.slf4j.Logger;\n","import org.slf4j.LoggerFactory;\n","\n","import redis.clients.jedis.*;\n","import redis.clients.jedis.MultiClusterClientConfig.ClusterConfig;\n","import redis.clients.jedis.annots.Experimental;\n","import redis.clients.jedis.exceptions.JedisConnectionException;\n","import redis.clients.jedis.exceptions.JedisValidationException;\n","import redis.clients.jedis.util.Pool;\n","\n","\n","/**\n"," * @author Allen Terleto (aterleto)\n"," * <p>\n"," * ConnectionProvider which supports multiple cluster/database endpoints each with their own isolated connection pool.\n"," * With this ConnectionProvider users can seamlessly failover to Disaster Recovery (DR), Backup, and Active-Active cluster(s)\n"," * by using simple configuration which is passed through from Resilience4j - https://resilience4j.readme.io/docs\n"," * <p>\n"," * Support for manual failback is provided by way of {@link #setActiveMultiClusterIndex(int)}\n"," * <p>\n"," */\n","// TODO: move?\n","@Experimental\n","public class MultiClusterPooledConnectionProvider implements ConnectionProvider {\n","\n","    private final Logger log = LoggerFactory.getLogger(getClass());\n","\n","    /**\n","     * Ordered map of cluster/database endpoints which were provided at startup via the MultiClusterClientConfig.\n","     * Users can move down (failover) or (up) failback the map depending on their availability and order.\n","     */\n","    private final Map<Integer, Cluster> multiClusterMap = new ConcurrentHashMap<>();\n","\n","    /**\n","     * Indicates the actively used cluster/database endpoint (connection pool) amongst the pre-configured list which were\n","     * provided at startup via the MultiClusterClientConfig. All traffic will be routed according to this index.\n","     */\n","    private volatile Integer activeMultiClusterIndex = 1;\n","\n","    /**\n","     * Indicates the final cluster/database endpoint (connection pool), according to the pre-configured list\n","     * provided at startup via the MultiClusterClientConfig, is unavailable and therefore no further failover is possible.\n","     * Users can manually failback to an available cluster which would reset this flag via {@link #setActiveMultiClusterIndex(int)}\n","     */\n","    private volatile boolean lastClusterCircuitBreakerForcedOpen = false;\n","\n","    /**\n","     * Functional interface typically used for activeMultiClusterIndex persistence or custom logging after a successful\n","     * failover of a cluster/database endpoint (connection pool). Cluster/database endpoint info is passed as the sole parameter\n","     *\n","     * Example: cluster:2:redis-smart-cache.demo.com:12000\n","     */\n","    private Consumer<String> clusterFailoverPostProcessor;\n","\n","    private List<Class<? extends Throwable>> fallbackExceptionList;\n","\n","    public MultiClusterPooledConnectionProvider(MultiClusterClientConfig multiClusterClientConfig) {\n","\n","        if (multiClusterClientConfig == null)\n","            throw new JedisValidationException(\"MultiClusterClientConfig must not be NULL for MultiClusterPooledConnectionProvider\");\n","\n","        ////////////// Configure Retry ////////////////////\n","\n","        RetryConfig.Builder retryConfigBuilder = RetryConfig.custom();\n","        retryConfigBuilder.maxAttempts(multiClusterClientConfig.getRetryMaxAttempts());\n","        retryConfigBuilder.intervalFunction(IntervalFunction.ofExponentialBackoff(multiClusterClientConfig.getRetryWaitDuration(),\n","                multiClusterClientConfig.getRetryWaitDurationExponentialBackoffMultiplier()));\n","        retryConfigBuilder.failAfterMaxAttempts(false); // JedisConnectionException will be thrown\n","        retryConfigBuilder.retryExceptions(multiClusterClientConfig.getRetryIncludedExceptionList().stream().toArray(Class[]::new));\n","\n","        List<Class> retryIgnoreExceptionList = multiClusterClientConfig.getRetryIgnoreExceptionList();\n","        if (retryIgnoreExceptionList != null)\n","            retryConfigBuilder.ignoreExceptions(retryIgnoreExceptionList.stream().toArray(Class[]::new));\n","\n","        RetryConfig retryConfig = retryConfigBuilder.build();\n","\n","        ////////////// Configure Circuit Breaker ////////////////////\n","\n","        CircuitBreakerConfig.Builder circuitBreakerConfigBuilder = CircuitBreakerConfig.custom();\n","        circuitBreakerConfigBuilder.failureRateThreshold(multiClusterClientConfig.getCircuitBreakerFailureRateThreshold());\n","        circuitBreakerConfigBuilder.slowCallRateThreshold(multiClusterClientConfig.getCircuitBreakerSlowCallRateThreshold());\n","        circuitBreakerConfigBuilder.slowCallDurationThreshold(multiClusterClientConfig.getCircuitBreakerSlowCallDurationThreshold());\n","        circuitBreakerConfigBuilder.minimumNumberOfCalls(multiClusterClientConfig.getCircuitBreakerSlidingWindowMinCalls());\n","        circuitBreakerConfigBuilder.slidingWindowType(multiClusterClientConfig.getCircuitBreakerSlidingWindowType());\n","        circuitBreakerConfigBuilder.slidingWindowSize(multiClusterClientConfig.getCircuitBreakerSlidingWindowSize());\n","        circuitBreakerConfigBuilder.recordExceptions(multiClusterClientConfig.getCircuitBreakerIncludedExceptionList().stream().toArray(Class[]::new));\n","        circuitBreakerConfigBuilder.automaticTransitionFromOpenToHalfOpenEnabled(false); // State transitions are forced. No half open states are used\n","\n","        List<Class> circuitBreakerIgnoreExceptionList = multiClusterClientConfig.getCircuitBreakerIgnoreExceptionList();\n","        if (circuitBreakerIgnoreExceptionList != null)\n","            circuitBreakerConfigBuilder.ignoreExceptions(circuitBreakerIgnoreExceptionList.stream().toArray(Class[]::new));\n","\n","        CircuitBreakerConfig circuitBreakerConfig = circuitBreakerConfigBuilder.build();\n","\n","        ////////////// Configure Cluster Map ////////////////////\n","\n","        ClusterConfig[] clusterConfigs = multiClusterClientConfig.getClusterConfigs();\n","        for (ClusterConfig config : clusterConfigs) {\n","\n","            String clusterId = \"cluster:\" + config.getPriority() + \":\" + config.getHostAndPort();\n","\n","            Retry retry = RetryRegistry.of(retryConfig).retry(clusterId);\n","\n","            Retry.EventPublisher retryPublisher = retry.getEventPublisher();\n","            retryPublisher.onRetry(event -> log.warn(String.valueOf(event)));\n","            retryPublisher.onError(event -> log.error(String.valueOf(event)));\n","\n","            CircuitBreaker circuitBreaker = CircuitBreakerRegistry.of(circuitBreakerConfig).circuitBreaker(clusterId);\n","\n","            CircuitBreaker.EventPublisher circuitBreakerEventPublisher = circuitBreaker.getEventPublisher();\n","            circuitBreakerEventPublisher.onCallNotPermitted(event -> log.error(String.valueOf(event)));\n","            circuitBreakerEventPublisher.onError(event -> log.error(String.valueOf(event)));\n","            circuitBreakerEventPublisher.onFailureRateExceeded(event -> log.error(String.valueOf(event)));\n","            circuitBreakerEventPublisher.onSlowCallRateExceeded(event -> log.error(String.valueOf(event)));\n","            circuitBreakerEventPublisher.onStateTransition(event -> log.warn(String.valueOf(event)));\n","\n","            multiClusterMap.put(config.getPriority(),\n","                    new Cluster(new ConnectionPool(config.getHostAndPort(),\n","                            config.getJedisClientConfig()), retry, circuitBreaker));\n","        }\n","\n","        /// --- ///\n","\n","        this.fallbackExceptionList = multiClusterClientConfig.getFallbackExceptionList();\n","    }\n","\n","    /**\n","     * Increments the actively used cluster/database endpoint (connection pool) amongst the pre-configured list which were\n","     * provided at startup via the MultiClusterClientConfig. All traffic will be routed according to this index.\n","     *\n","     * Only indexes within the pre-configured range (static) are supported otherwise an exception will be thrown.\n","     *\n","     * In the event that the next prioritized connection has a forced open state,\n","     * the method will recursively increment the index in order to avoid a failed command.\n","     */\n","    public int incrementActiveMultiClusterIndex() {\n","\n","        // Field-level synchronization is used to avoid the edge case in which\n","        // setActiveMultiClusterIndex(int multiClusterIndex) is called at the same time\n","        synchronized (activeMultiClusterIndex) {\n","\n","            String originalClusterName = getClusterCircuitBreaker().getName();\n","\n","            // Only increment if it can pass this validation otherwise we will need to check for NULL in the data path\n","            if (activeMultiClusterIndex + 1 > multiClusterMap.size()) {\n","\n","                lastClusterCircuitBreakerForcedOpen = true;\n","\n","                throw new JedisConnectionException(\"Cluster/database endpoint could not failover since the MultiClusterClientConfig was not \" +\n","                                                   \"provided with an additional cluster/database endpoint according to its prioritized sequence. \" +\n","                                                   \"If applicable, consider failing back OR restarting with an available cluster/database endpoint\");\n","            }\n","            else activeMultiClusterIndex++;\n","\n","            CircuitBreaker circuitBreaker = getClusterCircuitBreaker();\n","\n","            // Handles edge-case in which the user resets the activeMultiClusterIndex to a higher priority prematurely\n","            // which forces a failover to the next prioritized cluster that has potentially not yet recovered\n","            if (CircuitBreaker.State.FORCED_OPEN.equals(circuitBreaker.getState()))\n","                incrementActiveMultiClusterIndex();\n","\n","            else log.warn(\"Cluster/database endpoint successfully updated from '{}' to '{}'\", originalClusterName, circuitBreaker.getName());\n","        }\n","\n","        return activeMultiClusterIndex;\n","    }\n","\n","    /**\n","     * Design decision was made to defer responsibility for cross-replication validation to the user.\n","     *\n","     * Alternatively there was discussion to handle cross-cluster replication validation by\n","     * setting a key/value pair per hashslot in the active connection (with a TTL) and\n","     * subsequently reading it from the target connection.\n","     */\n","    public void validateTargetConnection(int multiClusterIndex) {\n","\n","        CircuitBreaker circuitBreaker = getClusterCircuitBreaker(multiClusterIndex);\n","\n","        State originalState = circuitBreaker.getState();\n","        try {\n","            // Transitions the state machine to a CLOSED state, allowing state transition, metrics and event publishing\n","            // Safe since the activeMultiClusterIndex has not yet been changed and therefore no traffic will be routed yet\n","            circuitBreaker.transitionToClosedState();\n","\n","            try (Connection targetConnection = getConnection(multiClusterIndex)) {\n","                targetConnection.ping();\n","            }\n","        }\n","        catch (Exception e) {\n","\n","            // If the original state was FORCED_OPEN, then transition it back which stops state transition, metrics and event publishing\n","            if (CircuitBreaker.State.FORCED_OPEN.equals(originalState))\n","                circuitBreaker.transitionToForcedOpenState();\n","\n","            throw new JedisValidationException(circuitBreaker.getName() + \" failed to connect. Please check configuration and try again.\", e);\n","        }\n","    }\n","\n","    /**\n","     * Manually overrides the actively used cluster/database endpoint (connection pool) amongst the\n","     * pre-configured list which were provided at startup via the MultiClusterClientConfig.\n","     * All traffic will be routed according to the provided new index.\n","     *\n","     * Special care should be taken to confirm cluster/database availability AND\n","     * potentially cross-cluster replication BEFORE using this capability.\n","     */\n","    public synchronized void setActiveMultiClusterIndex(int multiClusterIndex) {\n","\n","        // Field-level synchronization is used to avoid the edge case in which\n","        // incrementActiveMultiClusterIndex() is called at the same time\n","        synchronized (activeMultiClusterIndex) {\n","\n","            // Allows an attempt to reset the current cluster from a FORCED_OPEN to CLOSED state in the event that no failover is possible\n","            if (activeMultiClusterIndex == multiClusterIndex &&\n","                !CircuitBreaker.State.FORCED_OPEN.equals(getClusterCircuitBreaker(multiClusterIndex).getState()))\n","                    return;\n","\n","            if (multiClusterIndex < 1 || multiClusterIndex > multiClusterMap.size())\n","                throw new JedisValidationException(\"MultiClusterIndex: \" + multiClusterIndex + \" is not within \" +\n","                          \"the configured range. Please choose an index between 1 and \" + multiClusterMap.size());\n","\n","            validateTargetConnection(multiClusterIndex);\n","\n","            String originalClusterName = getClusterCircuitBreaker().getName();\n","\n","            if (activeMultiClusterIndex == multiClusterIndex)\n","                log.warn(\"Cluster/database endpoint '{}' successfully closed its circuit breaker\", originalClusterName);\n","            else\n","                log.warn(\"Cluster/database endpoint successfully updated from '{}' to '{}'\",\n","                         originalClusterName, getClusterCircuitBreaker(multiClusterIndex).getName());\n","\n","            activeMultiClusterIndex = multiClusterIndex;\n","            lastClusterCircuitBreakerForcedOpen = false;\n","        }\n","    }\n","\n","    @Override\n","    public void close() {\n","        multiClusterMap.get(activeMultiClusterIndex).getConnectionPool().close();\n","    }\n","\n","    @Override\n","    public Connection getConnection() {\n","        return multiClusterMap.get(activeMultiClusterIndex).getConnection();\n","    }\n","\n","    public Connection getConnection(int multiClusterIndex) {\n","        return multiClusterMap.get(multiClusterIndex).getConnection();\n","    }\n","\n","    @Override\n","    public Connection getConnection(CommandArguments args) {\n","        return multiClusterMap.get(activeMultiClusterIndex).getConnection();\n","    }\n","\n","    @Override\n","    public Map<?, Pool<Connection>> getConnectionMap() {\n","        ConnectionPool connectionPool = multiClusterMap.get(activeMultiClusterIndex).getConnectionPool();\n","        return Collections.singletonMap(connectionPool.getFactory(), connectionPool);\n","    }\n","\n","    public Cluster getCluster() {\n","        return multiClusterMap.get(activeMultiClusterIndex);\n","    }\n","\n","    public CircuitBreaker getClusterCircuitBreaker() {\n","        return multiClusterMap.get(activeMultiClusterIndex).getCircuitBreaker();\n","    }\n","\n","    public CircuitBreaker getClusterCircuitBreaker(int multiClusterIndex) {\n","        return multiClusterMap.get(multiClusterIndex).getCircuitBreaker();\n","    }\n","\n","    public boolean isLastClusterCircuitBreakerForcedOpen() {\n","        return lastClusterCircuitBreakerForcedOpen;\n","    }\n","\n","    public void runClusterFailoverPostProcessor(Integer multiClusterIndex) {\n","        if (clusterFailoverPostProcessor != null)\n","            clusterFailoverPostProcessor.accept(getClusterCircuitBreaker(multiClusterIndex).getName());\n","    }\n","\n","    public void setClusterFailoverPostProcessor(Consumer<String> clusterFailoverPostProcessor) {\n","        this.clusterFailoverPostProcessor = clusterFailoverPostProcessor;\n","    }\n","\n","    public List<Class<? extends Throwable>> getFallbackExceptionList() {\n","        return fallbackExceptionList;\n","    }\n","\n","    public static class Cluster {\n","\n","        private final ConnectionPool connectionPool;\n","        private final Retry retry;\n","        private final CircuitBreaker circuitBreaker;\n","\n","        public Cluster(ConnectionPool connectionPool, Retry retry, CircuitBreaker circuitBreaker) {\n","            this.connectionPool = connectionPool;\n","            this.retry = retry;\n","            this.circuitBreaker = circuitBreaker;\n","        }\n","\n","        public Connection getConnection() {\n","            return connectionPool.getResource();\n","        }\n","\n","        public ConnectionPool getConnectionPool() {\n","            return connectionPool;\n","        }\n","\n","        public Retry getRetry() {\n","            return retry;\n","        }\n","\n","        public CircuitBreaker getCircuitBreaker() {\n","            return circuitBreaker;\n","        }\n","    }\n","\n","}"],"test_content":["package redis.clients.jedis.providers;\n","\n","import io.github.resilience4j.circuitbreaker.CircuitBreaker;\n","import org.junit.Before;\n","import org.junit.Test;\n","import redis.clients.jedis.*;\n","import redis.clients.jedis.MultiClusterClientConfig.ClusterConfig;\n","import redis.clients.jedis.exceptions.JedisConnectionException;\n","import redis.clients.jedis.exceptions.JedisValidationException;\n","\n","import java.util.concurrent.atomic.AtomicBoolean;\n","\n","import static org.junit.Assert.*;\n","\n","/**\n"," * @see MultiClusterPooledConnectionProvider\n"," */\n","public class MultiClusterPooledConnectionProviderTest {\n","\n","    private final HostAndPort hostAndPort1 = HostAndPorts.getRedisServers().get(0);\n","    private final HostAndPort hostAndPort2 = HostAndPorts.getRedisServers().get(1);\n","\n","    private MultiClusterPooledConnectionProvider provider;\n","\n","    @Before\n","    public void setUp() {\n","\n","        ClusterConfig[] clusterConfigs = new ClusterConfig[2];\n","        clusterConfigs[0] = new ClusterConfig(hostAndPort1, DefaultJedisClientConfig.builder().build());\n","        clusterConfigs[1] = new ClusterConfig(hostAndPort2, DefaultJedisClientConfig.builder().build());\n","\n","        provider = new MultiClusterPooledConnectionProvider(new MultiClusterClientConfig.Builder(clusterConfigs).build());\n","    }\n","\n","    @Test\n","    public void testCircuitBreakerForcedTransitions() {\n","\n","        CircuitBreaker circuitBreaker = provider.getClusterCircuitBreaker(1);\n","        circuitBreaker.getState();\n","\n","        if (CircuitBreaker.State.FORCED_OPEN.equals(circuitBreaker.getState()))\n","            circuitBreaker.transitionToClosedState();\n","\n","        circuitBreaker.transitionToForcedOpenState();\n","        assertEquals(CircuitBreaker.State.FORCED_OPEN, circuitBreaker.getState());\n","\n","        circuitBreaker.transitionToClosedState();\n","        assertEquals(CircuitBreaker.State.CLOSED, circuitBreaker.getState());\n","    }\n","\n","    @Test\n","    public void testIncrementActiveMultiClusterIndex() {\n","        int index = provider.incrementActiveMultiClusterIndex();\n","        assertEquals(2, index);\n","    }\n","\n","    @Test(expected = JedisConnectionException.class)\n","    public void testIncrementActiveMultiClusterIndexOutOfRange() {\n","        provider.setActiveMultiClusterIndex(1);\n","\n","        int index = provider.incrementActiveMultiClusterIndex();\n","        assertEquals(2, index);\n","\n","        provider.incrementActiveMultiClusterIndex(); // Should throw an exception\n","    }\n","\n","    @Test\n","    public void testIsLastClusterCircuitBreakerForcedOpen() {\n","        provider.setActiveMultiClusterIndex(1);\n","\n","        try {\n","            provider.incrementActiveMultiClusterIndex();\n","        } catch (Exception e) {}\n","\n","        // This should set the isLastClusterCircuitBreakerForcedOpen to true\n","        try {\n","            provider.incrementActiveMultiClusterIndex();\n","        } catch (Exception e) {}\n","\n","        assertEquals(true, provider.isLastClusterCircuitBreakerForcedOpen());\n","    }\n","\n","    @Test\n","    public void testRunClusterFailoverPostProcessor() {\n","        ClusterConfig[] clusterConfigs = new ClusterConfig[2];\n","        clusterConfigs[0] = new ClusterConfig(new HostAndPort(\"purposefully-incorrect\", 0000),\n","                                                                    DefaultJedisClientConfig.builder().build());\n","        clusterConfigs[1] = new ClusterConfig(new HostAndPort(\"purposefully-incorrect\", 0001),\n","                                                                    DefaultJedisClientConfig.builder().build());\n","\n","        MultiClusterClientConfig.Builder builder = new MultiClusterClientConfig.Builder(clusterConfigs);\n","\n","        // Configures a single failed command to trigger an open circuit on the next subsequent failure\n","        builder.circuitBreakerSlidingWindowSize(1);\n","        builder.circuitBreakerSlidingWindowMinCalls(1);\n","\n","        AtomicBoolean isValidTest = new AtomicBoolean(false);\n","\n","        MultiClusterPooledConnectionProvider localProvider = new MultiClusterPooledConnectionProvider(builder.build());\n","        localProvider.setClusterFailoverPostProcessor(a -> { isValidTest.set(true); });\n","\n","        try (UnifiedJedis jedis = new UnifiedJedis(localProvider)) {\n","\n","            // This should fail after 3 retries and meet the requirements to open the circuit on the next iteration\n","            try {\n","                jedis.get(\"foo\");\n","            } catch (Exception e) {}\n","\n","            // This should fail after 3 retries and open the circuit which will trigger the post processor\n","            try {\n","                jedis.get(\"foo\");\n","            } catch (Exception e) {}\n","\n","        }\n","\n","        assertEquals(true, isValidTest.get());\n","    }\n","\n","    @Test(expected = JedisValidationException.class)\n","    public void testSetActiveMultiClusterIndexEqualsZero() {\n","        provider.setActiveMultiClusterIndex(0); // Should throw an exception\n","    }\n","\n","    @Test(expected = JedisValidationException.class)\n","    public void testSetActiveMultiClusterIndexLessThanZero() {\n","        provider.setActiveMultiClusterIndex(-1); // Should throw an exception\n","    }\n","\n","    @Test(expected = JedisValidationException.class)\n","    public void testSetActiveMultiClusterIndexOutOfRange() {\n","        provider.setActiveMultiClusterIndex(3); // Should throw an exception\n","    }\n","\n","}"],"method_lines_dic":{"MultiClusterPooledConnectionProvider::::incrementActiveMultiClusterIndex()":[152,182],"MultiClusterPooledConnectionProvider::::validateTargetConnection(int)":[191,213],"MultiClusterPooledConnectionProvider::::setActiveMultiClusterIndex(int)":[223,251],"MultiClusterPooledConnectionProvider::::close()":[253,256],"MultiClusterPooledConnectionProvider::::getConnection()":[258,261],"MultiClusterPooledConnectionProvider::::getConnection(int)":[263,265],"MultiClusterPooledConnectionProvider::::getConnection(redis.clients.jedis.CommandArguments)":[267,270],"MultiClusterPooledConnectionProvider::::getConnectionMap()":[272,276],"MultiClusterPooledConnectionProvider::::getCluster()":[278,280],"MultiClusterPooledConnectionProvider::::getClusterCircuitBreaker()":[282,284],"MultiClusterPooledConnectionProvider::::getClusterCircuitBreaker(int)":[286,288],"MultiClusterPooledConnectionProvider::::isLastClusterCircuitBreakerForcedOpen()":[290,292],"MultiClusterPooledConnectionProvider::::runClusterFailoverPostProcessor(java.lang.Integer)":[294,297],"MultiClusterPooledConnectionProvider::::setClusterFailoverPostProcessor(java.util.function.Consumer<java.lang.String>)":[299,301],"MultiClusterPooledConnectionProvider::::getFallbackExceptionList()":[303,305],"MultiClusterPooledConnectionProvider.Cluster::::getConnection()":[319,321],"MultiClusterPooledConnectionProvider.Cluster::::getConnectionPool()":[323,325],"MultiClusterPooledConnectionProvider.Cluster::::getRetry()":[327,329],"MultiClusterPooledConnectionProvider.Cluster::::getCircuitBreaker()":[331,333]},"test_method_lines_dic":{"MultiClusterPooledConnectionProviderTest::::setUp()":[25,33],"MultiClusterPooledConnectionProviderTest::::testCircuitBreakerForcedTransitions()":[35,49],"MultiClusterPooledConnectionProviderTest::::testIncrementActiveMultiClusterIndex()":[51,55],"MultiClusterPooledConnectionProviderTest::::testIncrementActiveMultiClusterIndexOutOfRange()":[57,65],"MultiClusterPooledConnectionProviderTest::::testIsLastClusterCircuitBreakerForcedOpen()":[67,81],"MultiClusterPooledConnectionProviderTest::::testRunClusterFailoverPostProcessor()":[83,117],"MultiClusterPooledConnectionProviderTest::::testSetActiveMultiClusterIndexEqualsZero()":[119,122],"MultiClusterPooledConnectionProviderTest::::testSetActiveMultiClusterIndexLessThanZero()":[124,127],"MultiClusterPooledConnectionProviderTest::::testSetActiveMultiClusterIndexOutOfRange()":[129,132]},"reverse_method_lines_dic":{"152":"MultiClusterPooledConnectionProvider::::incrementActiveMultiClusterIndex()","153":"MultiClusterPooledConnectionProvider::::incrementActiveMultiClusterIndex()","154":"MultiClusterPooledConnectionProvider::::incrementActiveMultiClusterIndex()","155":"MultiClusterPooledConnectionProvider::::incrementActiveMultiClusterIndex()","156":"MultiClusterPooledConnectionProvider::::incrementActiveMultiClusterIndex()","157":"MultiClusterPooledConnectionProvider::::incrementActiveMultiClusterIndex()","158":"MultiClusterPooledConnectionProvider::::incrementActiveMultiClusterIndex()","159":"MultiClusterPooledConnectionProvider::::incrementActiveMultiClusterIndex()","160":"MultiClusterPooledConnectionProvider::::incrementActiveMultiClusterIndex()","161":"MultiClusterPooledConnectionProvider::::incrementActiveMultiClusterIndex()","162":"MultiClusterPooledConnectionProvider::::incrementActiveMultiClusterIndex()","163":"MultiClusterPooledConnectionProvider::::incrementActiveMultiClusterIndex()","164":"MultiClusterPooledConnectionProvider::::incrementActiveMultiClusterIndex()","165":"MultiClusterPooledConnectionProvider::::incrementActiveMultiClusterIndex()","166":"MultiClusterPooledConnectionProvider::::incrementActiveMultiClusterIndex()","167":"MultiClusterPooledConnectionProvider::::incrementActiveMultiClusterIndex()","168":"MultiClusterPooledConnectionProvider::::incrementActiveMultiClusterIndex()","169":"MultiClusterPooledConnectionProvider::::incrementActiveMultiClusterIndex()","170":"MultiClusterPooledConnectionProvider::::incrementActiveMultiClusterIndex()","171":"MultiClusterPooledConnectionProvider::::incrementActiveMultiClusterIndex()","172":"MultiClusterPooledConnectionProvider::::incrementActiveMultiClusterIndex()","173":"MultiClusterPooledConnectionProvider::::incrementActiveMultiClusterIndex()","174":"MultiClusterPooledConnectionProvider::::incrementActiveMultiClusterIndex()","175":"MultiClusterPooledConnectionProvider::::incrementActiveMultiClusterIndex()","176":"MultiClusterPooledConnectionProvider::::incrementActiveMultiClusterIndex()","177":"MultiClusterPooledConnectionProvider::::incrementActiveMultiClusterIndex()","178":"MultiClusterPooledConnectionProvider::::incrementActiveMultiClusterIndex()","179":"MultiClusterPooledConnectionProvider::::incrementActiveMultiClusterIndex()","180":"MultiClusterPooledConnectionProvider::::incrementActiveMultiClusterIndex()","181":"MultiClusterPooledConnectionProvider::::incrementActiveMultiClusterIndex()","182":"MultiClusterPooledConnectionProvider::::incrementActiveMultiClusterIndex()","191":"MultiClusterPooledConnectionProvider::::validateTargetConnection(int)","192":"MultiClusterPooledConnectionProvider::::validateTargetConnection(int)","193":"MultiClusterPooledConnectionProvider::::validateTargetConnection(int)","194":"MultiClusterPooledConnectionProvider::::validateTargetConnection(int)","195":"MultiClusterPooledConnectionProvider::::validateTargetConnection(int)","196":"MultiClusterPooledConnectionProvider::::validateTargetConnection(int)","197":"MultiClusterPooledConnectionProvider::::validateTargetConnection(int)","198":"MultiClusterPooledConnectionProvider::::validateTargetConnection(int)","199":"MultiClusterPooledConnectionProvider::::validateTargetConnection(int)","200":"MultiClusterPooledConnectionProvider::::validateTargetConnection(int)","201":"MultiClusterPooledConnectionProvider::::validateTargetConnection(int)","202":"MultiClusterPooledConnectionProvider::::validateTargetConnection(int)","203":"MultiClusterPooledConnectionProvider::::validateTargetConnection(int)","204":"MultiClusterPooledConnectionProvider::::validateTargetConnection(int)","205":"MultiClusterPooledConnectionProvider::::validateTargetConnection(int)","206":"MultiClusterPooledConnectionProvider::::validateTargetConnection(int)","207":"MultiClusterPooledConnectionProvider::::validateTargetConnection(int)","208":"MultiClusterPooledConnectionProvider::::validateTargetConnection(int)","209":"MultiClusterPooledConnectionProvider::::validateTargetConnection(int)","210":"MultiClusterPooledConnectionProvider::::validateTargetConnection(int)","211":"MultiClusterPooledConnectionProvider::::validateTargetConnection(int)","212":"MultiClusterPooledConnectionProvider::::validateTargetConnection(int)","213":"MultiClusterPooledConnectionProvider::::validateTargetConnection(int)","223":"MultiClusterPooledConnectionProvider::::setActiveMultiClusterIndex(int)","224":"MultiClusterPooledConnectionProvider::::setActiveMultiClusterIndex(int)","225":"MultiClusterPooledConnectionProvider::::setActiveMultiClusterIndex(int)","226":"MultiClusterPooledConnectionProvider::::setActiveMultiClusterIndex(int)","227":"MultiClusterPooledConnectionProvider::::setActiveMultiClusterIndex(int)","228":"MultiClusterPooledConnectionProvider::::setActiveMultiClusterIndex(int)","229":"MultiClusterPooledConnectionProvider::::setActiveMultiClusterIndex(int)","230":"MultiClusterPooledConnectionProvider::::setActiveMultiClusterIndex(int)","231":"MultiClusterPooledConnectionProvider::::setActiveMultiClusterIndex(int)","232":"MultiClusterPooledConnectionProvider::::setActiveMultiClusterIndex(int)","233":"MultiClusterPooledConnectionProvider::::setActiveMultiClusterIndex(int)","234":"MultiClusterPooledConnectionProvider::::setActiveMultiClusterIndex(int)","235":"MultiClusterPooledConnectionProvider::::setActiveMultiClusterIndex(int)","236":"MultiClusterPooledConnectionProvider::::setActiveMultiClusterIndex(int)","237":"MultiClusterPooledConnectionProvider::::setActiveMultiClusterIndex(int)","238":"MultiClusterPooledConnectionProvider::::setActiveMultiClusterIndex(int)","239":"MultiClusterPooledConnectionProvider::::setActiveMultiClusterIndex(int)","240":"MultiClusterPooledConnectionProvider::::setActiveMultiClusterIndex(int)","241":"MultiClusterPooledConnectionProvider::::setActiveMultiClusterIndex(int)","242":"MultiClusterPooledConnectionProvider::::setActiveMultiClusterIndex(int)","243":"MultiClusterPooledConnectionProvider::::setActiveMultiClusterIndex(int)","244":"MultiClusterPooledConnectionProvider::::setActiveMultiClusterIndex(int)","245":"MultiClusterPooledConnectionProvider::::setActiveMultiClusterIndex(int)","246":"MultiClusterPooledConnectionProvider::::setActiveMultiClusterIndex(int)","247":"MultiClusterPooledConnectionProvider::::setActiveMultiClusterIndex(int)","248":"MultiClusterPooledConnectionProvider::::setActiveMultiClusterIndex(int)","249":"MultiClusterPooledConnectionProvider::::setActiveMultiClusterIndex(int)","250":"MultiClusterPooledConnectionProvider::::setActiveMultiClusterIndex(int)","251":"MultiClusterPooledConnectionProvider::::setActiveMultiClusterIndex(int)","253":"MultiClusterPooledConnectionProvider::::close()","254":"MultiClusterPooledConnectionProvider::::close()","255":"MultiClusterPooledConnectionProvider::::close()","256":"MultiClusterPooledConnectionProvider::::close()","258":"MultiClusterPooledConnectionProvider::::getConnection()","259":"MultiClusterPooledConnectionProvider::::getConnection()","260":"MultiClusterPooledConnectionProvider::::getConnection()","261":"MultiClusterPooledConnectionProvider::::getConnection()","263":"MultiClusterPooledConnectionProvider::::getConnection(int)","264":"MultiClusterPooledConnectionProvider::::getConnection(int)","265":"MultiClusterPooledConnectionProvider::::getConnection(int)","267":"MultiClusterPooledConnectionProvider::::getConnection(redis.clients.jedis.CommandArguments)","268":"MultiClusterPooledConnectionProvider::::getConnection(redis.clients.jedis.CommandArguments)","269":"MultiClusterPooledConnectionProvider::::getConnection(redis.clients.jedis.CommandArguments)","270":"MultiClusterPooledConnectionProvider::::getConnection(redis.clients.jedis.CommandArguments)","272":"MultiClusterPooledConnectionProvider::::getConnectionMap()","273":"MultiClusterPooledConnectionProvider::::getConnectionMap()","274":"MultiClusterPooledConnectionProvider::::getConnectionMap()","275":"MultiClusterPooledConnectionProvider::::getConnectionMap()","276":"MultiClusterPooledConnectionProvider::::getConnectionMap()","278":"MultiClusterPooledConnectionProvider::::getCluster()","279":"MultiClusterPooledConnectionProvider::::getCluster()","280":"MultiClusterPooledConnectionProvider::::getCluster()","282":"MultiClusterPooledConnectionProvider::::getClusterCircuitBreaker()","283":"MultiClusterPooledConnectionProvider::::getClusterCircuitBreaker()","284":"MultiClusterPooledConnectionProvider::::getClusterCircuitBreaker()","286":"MultiClusterPooledConnectionProvider::::getClusterCircuitBreaker(int)","287":"MultiClusterPooledConnectionProvider::::getClusterCircuitBreaker(int)","288":"MultiClusterPooledConnectionProvider::::getClusterCircuitBreaker(int)","290":"MultiClusterPooledConnectionProvider::::isLastClusterCircuitBreakerForcedOpen()","291":"MultiClusterPooledConnectionProvider::::isLastClusterCircuitBreakerForcedOpen()","292":"MultiClusterPooledConnectionProvider::::isLastClusterCircuitBreakerForcedOpen()","294":"MultiClusterPooledConnectionProvider::::runClusterFailoverPostProcessor(java.lang.Integer)","295":"MultiClusterPooledConnectionProvider::::runClusterFailoverPostProcessor(java.lang.Integer)","296":"MultiClusterPooledConnectionProvider::::runClusterFailoverPostProcessor(java.lang.Integer)","297":"MultiClusterPooledConnectionProvider::::runClusterFailoverPostProcessor(java.lang.Integer)","299":"MultiClusterPooledConnectionProvider::::setClusterFailoverPostProcessor(java.util.function.Consumer<java.lang.String>)","300":"MultiClusterPooledConnectionProvider::::setClusterFailoverPostProcessor(java.util.function.Consumer<java.lang.String>)","301":"MultiClusterPooledConnectionProvider::::setClusterFailoverPostProcessor(java.util.function.Consumer<java.lang.String>)","303":"MultiClusterPooledConnectionProvider::::getFallbackExceptionList()","304":"MultiClusterPooledConnectionProvider::::getFallbackExceptionList()","305":"MultiClusterPooledConnectionProvider::::getFallbackExceptionList()","319":"MultiClusterPooledConnectionProvider.Cluster::::getConnection()","320":"MultiClusterPooledConnectionProvider.Cluster::::getConnection()","321":"MultiClusterPooledConnectionProvider.Cluster::::getConnection()","323":"MultiClusterPooledConnectionProvider.Cluster::::getConnectionPool()","324":"MultiClusterPooledConnectionProvider.Cluster::::getConnectionPool()","325":"MultiClusterPooledConnectionProvider.Cluster::::getConnectionPool()","327":"MultiClusterPooledConnectionProvider.Cluster::::getRetry()","328":"MultiClusterPooledConnectionProvider.Cluster::::getRetry()","329":"MultiClusterPooledConnectionProvider.Cluster::::getRetry()","331":"MultiClusterPooledConnectionProvider.Cluster::::getCircuitBreaker()","332":"MultiClusterPooledConnectionProvider.Cluster::::getCircuitBreaker()","333":"MultiClusterPooledConnectionProvider.Cluster::::getCircuitBreaker()"},"test_reverse_method_lines_dic":{"25":"MultiClusterPooledConnectionProviderTest::::setUp()","26":"MultiClusterPooledConnectionProviderTest::::setUp()","27":"MultiClusterPooledConnectionProviderTest::::setUp()","28":"MultiClusterPooledConnectionProviderTest::::setUp()","29":"MultiClusterPooledConnectionProviderTest::::setUp()","30":"MultiClusterPooledConnectionProviderTest::::setUp()","31":"MultiClusterPooledConnectionProviderTest::::setUp()","32":"MultiClusterPooledConnectionProviderTest::::setUp()","33":"MultiClusterPooledConnectionProviderTest::::setUp()","35":"MultiClusterPooledConnectionProviderTest::::testCircuitBreakerForcedTransitions()","36":"MultiClusterPooledConnectionProviderTest::::testCircuitBreakerForcedTransitions()","37":"MultiClusterPooledConnectionProviderTest::::testCircuitBreakerForcedTransitions()","38":"MultiClusterPooledConnectionProviderTest::::testCircuitBreakerForcedTransitions()","39":"MultiClusterPooledConnectionProviderTest::::testCircuitBreakerForcedTransitions()","40":"MultiClusterPooledConnectionProviderTest::::testCircuitBreakerForcedTransitions()","41":"MultiClusterPooledConnectionProviderTest::::testCircuitBreakerForcedTransitions()","42":"MultiClusterPooledConnectionProviderTest::::testCircuitBreakerForcedTransitions()","43":"MultiClusterPooledConnectionProviderTest::::testCircuitBreakerForcedTransitions()","44":"MultiClusterPooledConnectionProviderTest::::testCircuitBreakerForcedTransitions()","45":"MultiClusterPooledConnectionProviderTest::::testCircuitBreakerForcedTransitions()","46":"MultiClusterPooledConnectionProviderTest::::testCircuitBreakerForcedTransitions()","47":"MultiClusterPooledConnectionProviderTest::::testCircuitBreakerForcedTransitions()","48":"MultiClusterPooledConnectionProviderTest::::testCircuitBreakerForcedTransitions()","49":"MultiClusterPooledConnectionProviderTest::::testCircuitBreakerForcedTransitions()","51":"MultiClusterPooledConnectionProviderTest::::testIncrementActiveMultiClusterIndex()","52":"MultiClusterPooledConnectionProviderTest::::testIncrementActiveMultiClusterIndex()","53":"MultiClusterPooledConnectionProviderTest::::testIncrementActiveMultiClusterIndex()","54":"MultiClusterPooledConnectionProviderTest::::testIncrementActiveMultiClusterIndex()","55":"MultiClusterPooledConnectionProviderTest::::testIncrementActiveMultiClusterIndex()","57":"MultiClusterPooledConnectionProviderTest::::testIncrementActiveMultiClusterIndexOutOfRange()","58":"MultiClusterPooledConnectionProviderTest::::testIncrementActiveMultiClusterIndexOutOfRange()","59":"MultiClusterPooledConnectionProviderTest::::testIncrementActiveMultiClusterIndexOutOfRange()","60":"MultiClusterPooledConnectionProviderTest::::testIncrementActiveMultiClusterIndexOutOfRange()","61":"MultiClusterPooledConnectionProviderTest::::testIncrementActiveMultiClusterIndexOutOfRange()","62":"MultiClusterPooledConnectionProviderTest::::testIncrementActiveMultiClusterIndexOutOfRange()","63":"MultiClusterPooledConnectionProviderTest::::testIncrementActiveMultiClusterIndexOutOfRange()","64":"MultiClusterPooledConnectionProviderTest::::testIncrementActiveMultiClusterIndexOutOfRange()","65":"MultiClusterPooledConnectionProviderTest::::testIncrementActiveMultiClusterIndexOutOfRange()","67":"MultiClusterPooledConnectionProviderTest::::testIsLastClusterCircuitBreakerForcedOpen()","68":"MultiClusterPooledConnectionProviderTest::::testIsLastClusterCircuitBreakerForcedOpen()","69":"MultiClusterPooledConnectionProviderTest::::testIsLastClusterCircuitBreakerForcedOpen()","70":"MultiClusterPooledConnectionProviderTest::::testIsLastClusterCircuitBreakerForcedOpen()","71":"MultiClusterPooledConnectionProviderTest::::testIsLastClusterCircuitBreakerForcedOpen()","72":"MultiClusterPooledConnectionProviderTest::::testIsLastClusterCircuitBreakerForcedOpen()","73":"MultiClusterPooledConnectionProviderTest::::testIsLastClusterCircuitBreakerForcedOpen()","74":"MultiClusterPooledConnectionProviderTest::::testIsLastClusterCircuitBreakerForcedOpen()","75":"MultiClusterPooledConnectionProviderTest::::testIsLastClusterCircuitBreakerForcedOpen()","76":"MultiClusterPooledConnectionProviderTest::::testIsLastClusterCircuitBreakerForcedOpen()","77":"MultiClusterPooledConnectionProviderTest::::testIsLastClusterCircuitBreakerForcedOpen()","78":"MultiClusterPooledConnectionProviderTest::::testIsLastClusterCircuitBreakerForcedOpen()","79":"MultiClusterPooledConnectionProviderTest::::testIsLastClusterCircuitBreakerForcedOpen()","80":"MultiClusterPooledConnectionProviderTest::::testIsLastClusterCircuitBreakerForcedOpen()","81":"MultiClusterPooledConnectionProviderTest::::testIsLastClusterCircuitBreakerForcedOpen()","83":"MultiClusterPooledConnectionProviderTest::::testRunClusterFailoverPostProcessor()","84":"MultiClusterPooledConnectionProviderTest::::testRunClusterFailoverPostProcessor()","85":"MultiClusterPooledConnectionProviderTest::::testRunClusterFailoverPostProcessor()","86":"MultiClusterPooledConnectionProviderTest::::testRunClusterFailoverPostProcessor()","87":"MultiClusterPooledConnectionProviderTest::::testRunClusterFailoverPostProcessor()","88":"MultiClusterPooledConnectionProviderTest::::testRunClusterFailoverPostProcessor()","89":"MultiClusterPooledConnectionProviderTest::::testRunClusterFailoverPostProcessor()","90":"MultiClusterPooledConnectionProviderTest::::testRunClusterFailoverPostProcessor()","91":"MultiClusterPooledConnectionProviderTest::::testRunClusterFailoverPostProcessor()","92":"MultiClusterPooledConnectionProviderTest::::testRunClusterFailoverPostProcessor()","93":"MultiClusterPooledConnectionProviderTest::::testRunClusterFailoverPostProcessor()","94":"MultiClusterPooledConnectionProviderTest::::testRunClusterFailoverPostProcessor()","95":"MultiClusterPooledConnectionProviderTest::::testRunClusterFailoverPostProcessor()","96":"MultiClusterPooledConnectionProviderTest::::testRunClusterFailoverPostProcessor()","97":"MultiClusterPooledConnectionProviderTest::::testRunClusterFailoverPostProcessor()","98":"MultiClusterPooledConnectionProviderTest::::testRunClusterFailoverPostProcessor()","99":"MultiClusterPooledConnectionProviderTest::::testRunClusterFailoverPostProcessor()","100":"MultiClusterPooledConnectionProviderTest::::testRunClusterFailoverPostProcessor()","101":"MultiClusterPooledConnectionProviderTest::::testRunClusterFailoverPostProcessor()","102":"MultiClusterPooledConnectionProviderTest::::testRunClusterFailoverPostProcessor()","103":"MultiClusterPooledConnectionProviderTest::::testRunClusterFailoverPostProcessor()","104":"MultiClusterPooledConnectionProviderTest::::testRunClusterFailoverPostProcessor()","105":"MultiClusterPooledConnectionProviderTest::::testRunClusterFailoverPostProcessor()","106":"MultiClusterPooledConnectionProviderTest::::testRunClusterFailoverPostProcessor()","107":"MultiClusterPooledConnectionProviderTest::::testRunClusterFailoverPostProcessor()","108":"MultiClusterPooledConnectionProviderTest::::testRunClusterFailoverPostProcessor()","109":"MultiClusterPooledConnectionProviderTest::::testRunClusterFailoverPostProcessor()","110":"MultiClusterPooledConnectionProviderTest::::testRunClusterFailoverPostProcessor()","111":"MultiClusterPooledConnectionProviderTest::::testRunClusterFailoverPostProcessor()","112":"MultiClusterPooledConnectionProviderTest::::testRunClusterFailoverPostProcessor()","113":"MultiClusterPooledConnectionProviderTest::::testRunClusterFailoverPostProcessor()","114":"MultiClusterPooledConnectionProviderTest::::testRunClusterFailoverPostProcessor()","115":"MultiClusterPooledConnectionProviderTest::::testRunClusterFailoverPostProcessor()","116":"MultiClusterPooledConnectionProviderTest::::testRunClusterFailoverPostProcessor()","117":"MultiClusterPooledConnectionProviderTest::::testRunClusterFailoverPostProcessor()","119":"MultiClusterPooledConnectionProviderTest::::testSetActiveMultiClusterIndexEqualsZero()","120":"MultiClusterPooledConnectionProviderTest::::testSetActiveMultiClusterIndexEqualsZero()","121":"MultiClusterPooledConnectionProviderTest::::testSetActiveMultiClusterIndexEqualsZero()","122":"MultiClusterPooledConnectionProviderTest::::testSetActiveMultiClusterIndexEqualsZero()","124":"MultiClusterPooledConnectionProviderTest::::testSetActiveMultiClusterIndexLessThanZero()","125":"MultiClusterPooledConnectionProviderTest::::testSetActiveMultiClusterIndexLessThanZero()","126":"MultiClusterPooledConnectionProviderTest::::testSetActiveMultiClusterIndexLessThanZero()","127":"MultiClusterPooledConnectionProviderTest::::testSetActiveMultiClusterIndexLessThanZero()","129":"MultiClusterPooledConnectionProviderTest::::testSetActiveMultiClusterIndexOutOfRange()","130":"MultiClusterPooledConnectionProviderTest::::testSetActiveMultiClusterIndexOutOfRange()","131":"MultiClusterPooledConnectionProviderTest::::testSetActiveMultiClusterIndexOutOfRange()","132":"MultiClusterPooledConnectionProviderTest::::testSetActiveMultiClusterIndexOutOfRange()"},"tests":[{"test_lines":[35,49],"covered_lines":[42,48,54,61,73,75,80,81,82,83,84,85,87,88,91,95,96,97,98,99,100,101,102,103,105,106,109,113,114,116,118,120,121,122,124,126,127,128,129,130,131,133,134,135,140,141,287,313,314,315,316,317,332]},{"test_lines":[51,55],"covered_lines":[42,48,54,61,73,75,80,81,82,83,84,85,87,88,91,95,96,97,98,99,100,101,102,103,105,106,109,113,114,116,118,120,121,122,124,126,127,128,129,130,131,133,134,135,140,141,156,158,161,169,171,175,178,179,181,283,313,314,315,316,317,332]},{"test_lines":[57,65],"covered_lines":[42,48,54,61,73,75,80,81,82,83,84,85,87,88,91,95,96,97,98,99,100,101,102,103,105,106,109,113,114,116,118,120,121,122,124,126,127,128,129,130,131,133,134,135,140,141,156,158,161,163,165,169,171,175,178,179,181,227,230,231,232,283,287,313,314,315,316,317,332]},{"test_lines":[67,81],"covered_lines":[42,48,54,61,73,75,80,81,82,83,84,85,87,88,91,95,96,97,98,99,100,101,102,103,105,106,109,113,114,116,118,120,121,122,124,126,127,128,129,130,131,133,134,135,140,141,156,158,161,163,165,169,171,175,178,179,181,227,230,231,232,283,287,291,313,314,315,316,317,332]},{"test_lines":[83,117],"covered_lines":[42,48,54,61,73,75,80,81,82,83,84,85,87,88,91,95,96,97,98,99,100,101,102,103,105,106,109,113,114,116,118,120,121,122,124,126,127,128,129,130,131,133,134,135,140,141,156,158,161,169,171,175,178,179,181,255,256,279,283,287,295,296,297,300,301,304,313,314,315,316,317,324,328,332]},{"test_lines":[119,122],"covered_lines":[42,48,54,61,73,75,80,81,82,83,84,85,87,88,91,95,96,97,98,99,100,101,102,103,105,106,109,113,114,116,118,120,121,122,124,126,127,128,129,130,131,133,134,135,140,141,227,230,234,235,236,250,313,314,315,316,317]},{"test_lines":[124,127],"covered_lines":[42,48,54,61,73,75,80,81,82,83,84,85,87,88,91,95,96,97,98,99,100,101,102,103,105,106,109,113,114,116,118,120,121,122,124,126,127,128,129,130,131,133,134,135,140,141,227,230,234,235,236,250,313,314,315,316,317]},{"test_lines":[129,132],"covered_lines":[42,48,54,61,73,75,80,81,82,83,84,85,87,88,91,95,96,97,98,99,100,101,102,103,105,106,109,113,114,116,118,120,121,122,124,126,127,128,129,130,131,133,134,135,140,141,227,230,234,235,236,250,313,314,315,316,317]}]},"/bernard/dataset_construction/prep/repos/jedis/src/main/java/redis/clients/jedis/util/JedisClusterCRC16.java":{"class_content":["package redis.clients.jedis.util;\n","\n","/**\n"," * CRC16 Implementation according to CCITT standard Polynomial : 1021 (x^16 + x^12 + x^5 + 1) See <a\n"," * href=\"http://redis.io/topics/cluster-spec\">Appendix A. CRC16 reference implementation in ANSI\n"," * C</a>\n"," */\n","public final class JedisClusterCRC16 {\n","\n","  private static final int[] LOOKUP_TABLE = { 0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50A5,\n","      0x60C6, 0x70E7, 0x8108, 0x9129, 0xA14A, 0xB16B, 0xC18C, 0xD1AD, 0xE1CE, 0xF1EF, 0x1231,\n","      0x0210, 0x3273, 0x2252, 0x52B5, 0x4294, 0x72F7, 0x62D6, 0x9339, 0x8318, 0xB37B, 0xA35A,\n","      0xD3BD, 0xC39C, 0xF3FF, 0xE3DE, 0x2462, 0x3443, 0x0420, 0x1401, 0x64E6, 0x74C7, 0x44A4,\n","      0x5485, 0xA56A, 0xB54B, 0x8528, 0x9509, 0xE5EE, 0xF5CF, 0xC5AC, 0xD58D, 0x3653, 0x2672,\n","      0x1611, 0x0630, 0x76D7, 0x66F6, 0x5695, 0x46B4, 0xB75B, 0xA77A, 0x9719, 0x8738, 0xF7DF,\n","      0xE7FE, 0xD79D, 0xC7BC, 0x48C4, 0x58E5, 0x6886, 0x78A7, 0x0840, 0x1861, 0x2802, 0x3823,\n","      0xC9CC, 0xD9ED, 0xE98E, 0xF9AF, 0x8948, 0x9969, 0xA90A, 0xB92B, 0x5AF5, 0x4AD4, 0x7AB7,\n","      0x6A96, 0x1A71, 0x0A50, 0x3A33, 0x2A12, 0xDBFD, 0xCBDC, 0xFBBF, 0xEB9E, 0x9B79, 0x8B58,\n","      0xBB3B, 0xAB1A, 0x6CA6, 0x7C87, 0x4CE4, 0x5CC5, 0x2C22, 0x3C03, 0x0C60, 0x1C41, 0xEDAE,\n","      0xFD8F, 0xCDEC, 0xDDCD, 0xAD2A, 0xBD0B, 0x8D68, 0x9D49, 0x7E97, 0x6EB6, 0x5ED5, 0x4EF4,\n","      0x3E13, 0x2E32, 0x1E51, 0x0E70, 0xFF9F, 0xEFBE, 0xDFDD, 0xCFFC, 0xBF1B, 0xAF3A, 0x9F59,\n","      0x8F78, 0x9188, 0x81A9, 0xB1CA, 0xA1EB, 0xD10C, 0xC12D, 0xF14E, 0xE16F, 0x1080, 0x00A1,\n","      0x30C2, 0x20E3, 0x5004, 0x4025, 0x7046, 0x6067, 0x83B9, 0x9398, 0xA3FB, 0xB3DA, 0xC33D,\n","      0xD31C, 0xE37F, 0xF35E, 0x02B1, 0x1290, 0x22F3, 0x32D2, 0x4235, 0x5214, 0x6277, 0x7256,\n","      0xB5EA, 0xA5CB, 0x95A8, 0x8589, 0xF56E, 0xE54F, 0xD52C, 0xC50D, 0x34E2, 0x24C3, 0x14A0,\n","      0x0481, 0x7466, 0x6447, 0x5424, 0x4405, 0xA7DB, 0xB7FA, 0x8799, 0x97B8, 0xE75F, 0xF77E,\n","      0xC71D, 0xD73C, 0x26D3, 0x36F2, 0x0691, 0x16B0, 0x6657, 0x7676, 0x4615, 0x5634, 0xD94C,\n","      0xC96D, 0xF90E, 0xE92F, 0x99C8, 0x89E9, 0xB98A, 0xA9AB, 0x5844, 0x4865, 0x7806, 0x6827,\n","      0x18C0, 0x08E1, 0x3882, 0x28A3, 0xCB7D, 0xDB5C, 0xEB3F, 0xFB1E, 0x8BF9, 0x9BD8, 0xABBB,\n","      0xBB9A, 0x4A75, 0x5A54, 0x6A37, 0x7A16, 0x0AF1, 0x1AD0, 0x2AB3, 0x3A92, 0xFD2E, 0xED0F,\n","      0xDD6C, 0xCD4D, 0xBDAA, 0xAD8B, 0x9DE8, 0x8DC9, 0x7C26, 0x6C07, 0x5C64, 0x4C45, 0x3CA2,\n","      0x2C83, 0x1CE0, 0x0CC1, 0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,\n","      0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0, };\n","\n","  public static int getSlot(String key) {\n","    if (key == null) {\n","      throw new NullPointerException(\"Slot calculation of null is impossible\");\n","    }\n","\n","    key = JedisClusterHashTag.getHashTag(key);\n","    // optimization with modulo operator with power of 2 equivalent to getCRC16(key) % 16384\n","    return getCRC16(key) & (16384 - 1);\n","  }\n","\n","  public static int getSlot(byte[] key) {\n","    if (key == null) {\n","      throw new NullPointerException(\"Slot calculation of null is impossible\");\n","    }\n","\n","    int s = -1;\n","    int e = -1;\n","    boolean sFound = false;\n","    for (int i = 0; i < key.length; i++) {\n","      if (key[i] == '{' && !sFound) {\n","        s = i;\n","        sFound = true;\n","      }\n","      if (key[i] == '}' && sFound) {\n","        e = i;\n","        break;\n","      }\n","    }\n","    if (s > -1 && e > -1 && e != s + 1) {\n","      return getCRC16(key, s + 1, e) & (16384 - 1);\n","    }\n","    return getCRC16(key) & (16384 - 1);\n","  }\n","\n","  /**\n","   * Create a CRC16 checksum from the bytes. implementation is from mp911de/lettuce, modified with\n","   * some more optimizations\n","   * @param bytes\n","   * @param s\n","   * @param e\n","   * @return CRC16 as integer value See <a\n","   *         href=\"https://github.com/xetorthio/jedis/pull/733#issuecomment-55840331\">Issue 733</a>\n","   */\n","  public static int getCRC16(byte[] bytes, int s, int e) {\n","    int crc = 0x0000;\n","\n","    for (int i = s; i < e; i++) {\n","      crc = ((crc << 8) ^ LOOKUP_TABLE[((crc >>> 8) ^ (bytes[i] & 0xFF)) & 0xFF]);\n","    }\n","    return crc & 0xFFFF;\n","  }\n","\n","  public static int getCRC16(byte[] bytes) {\n","    return getCRC16(bytes, 0, bytes.length);\n","  }\n","\n","  public static int getCRC16(String key) {\n","    byte[] bytesKey = SafeEncoder.encode(key);\n","    return getCRC16(bytesKey, 0, bytesKey.length);\n","  }\n","\n","  private JedisClusterCRC16() {\n","    throw new InstantiationError(\"Must not instantiate this class\");\n","  }\n","}\n"],"test_content":["package redis.clients.jedis.util;\n","\n","import static org.junit.Assert.assertEquals;\n","import static org.junit.Assert.assertNotEquals;\n","\n","import java.util.HashMap;\n","import java.util.Map;\n","import java.util.Map.Entry;\n","import org.junit.Test;\n","\n","public class JedisClusterCRC16Test {\n","\n","  @Test\n","  public void testGetCRC16() throws Exception {\n","    Map<String, Integer> solutions = prepareSolutionSet();\n","\n","    for (Entry<String, Integer> entry : solutions.entrySet()) {\n","      // string version\n","      assertEquals(entry.getValue().intValue(), JedisClusterCRC16.getCRC16(entry.getKey()));\n","\n","      // byte array version\n","      assertEquals(entry.getValue().intValue(),\n","        JedisClusterCRC16.getCRC16(SafeEncoder.encode(entry.getKey())));\n","    }\n","  }\n","\n","  @Test\n","  public void testGetSlot() {\n","    assertEquals(7186, JedisClusterCRC16.getSlot(\"51\"));\n","  }\n","\n","  private Map<String, Integer> prepareSolutionSet() {\n","    Map<String, Integer> solutionMap = new HashMap<String, Integer>();\n","    solutionMap.put(\"\", 0x0);\n","    solutionMap.put(\"123456789\", 0x31C3);\n","    solutionMap.put(\"sfger132515\", 0xA45C);\n","    solutionMap.put(\"hae9Napahngaikeethievubaibogiech\", 0x58CE);\n","    solutionMap.put(\"AAAAAAAAAAAAAAAAAAAAAA\", 0x92cd);\n","    solutionMap.put(\"Hello, World!\", 0x4FD6);\n","    return solutionMap;\n","  }\n","\n","  @Test\n","  public void testRedisHashtagGetSlot() {\n","    assertEquals(JedisClusterCRC16.getSlot(\"{bar\"), JedisClusterCRC16.getSlot(\"foo{{bar}}zap\"));\n","    assertEquals(JedisClusterCRC16.getSlot(\"{user1000}.following\"),\n","      JedisClusterCRC16.getSlot(\"{user1000}.followers\"));\n","    assertNotEquals(JedisClusterCRC16.getSlot(\"foo{}{bar}\"), JedisClusterCRC16.getSlot(\"bar\"));\n","    assertEquals(JedisClusterCRC16.getSlot(\"foo{bar}{zap}\"), JedisClusterCRC16.getSlot(\"bar\"));\n","  }\n","\n","  @Test\n","  public void testBinaryHashtagGetSlot() {\n","    assertEquals(JedisClusterCRC16.getSlot(\"{bar\".getBytes()),\n","      JedisClusterCRC16.getSlot(\"{bar\".getBytes()));\n","    assertEquals(JedisClusterCRC16.getSlot(\"{user1000}.following\".getBytes()),\n","      JedisClusterCRC16.getSlot(\"{user1000}.followers\".getBytes()));\n","    assertNotEquals(JedisClusterCRC16.getSlot(\"foo{}{bar}\".getBytes()),\n","      JedisClusterCRC16.getSlot(\"bar\".getBytes()));\n","    assertEquals(JedisClusterCRC16.getSlot(\"foo{bar}{zap}\".getBytes()),\n","      JedisClusterCRC16.getSlot(\"bar\".getBytes()));\n","  }\n","\n","}\n"],"method_lines_dic":{"JedisClusterCRC16::::getSlot(java.lang.String)":[35,43],"JedisClusterCRC16::::getSlot(byte[])":[45,67],"JedisClusterCRC16::::getCRC16(byte[],int,int)":[78,85],"JedisClusterCRC16::::getCRC16(byte[])":[87,89],"JedisClusterCRC16::::getCRC16(java.lang.String)":[91,94]},"test_method_lines_dic":{"JedisClusterCRC16Test::::testGetCRC16()":[13,25],"JedisClusterCRC16Test::::testGetSlot()":[27,30],"JedisClusterCRC16Test::::prepareSolutionSet()":[32,41],"JedisClusterCRC16Test::::testRedisHashtagGetSlot()":[43,50],"JedisClusterCRC16Test::::testBinaryHashtagGetSlot()":[52,62]},"reverse_method_lines_dic":{"35":"JedisClusterCRC16::::getSlot(java.lang.String)","36":"JedisClusterCRC16::::getSlot(java.lang.String)","37":"JedisClusterCRC16::::getSlot(java.lang.String)","38":"JedisClusterCRC16::::getSlot(java.lang.String)","39":"JedisClusterCRC16::::getSlot(java.lang.String)","40":"JedisClusterCRC16::::getSlot(java.lang.String)","41":"JedisClusterCRC16::::getSlot(java.lang.String)","42":"JedisClusterCRC16::::getSlot(java.lang.String)","43":"JedisClusterCRC16::::getSlot(java.lang.String)","45":"JedisClusterCRC16::::getSlot(byte[])","46":"JedisClusterCRC16::::getSlot(byte[])","47":"JedisClusterCRC16::::getSlot(byte[])","48":"JedisClusterCRC16::::getSlot(byte[])","49":"JedisClusterCRC16::::getSlot(byte[])","50":"JedisClusterCRC16::::getSlot(byte[])","51":"JedisClusterCRC16::::getSlot(byte[])","52":"JedisClusterCRC16::::getSlot(byte[])","53":"JedisClusterCRC16::::getSlot(byte[])","54":"JedisClusterCRC16::::getSlot(byte[])","55":"JedisClusterCRC16::::getSlot(byte[])","56":"JedisClusterCRC16::::getSlot(byte[])","57":"JedisClusterCRC16::::getSlot(byte[])","58":"JedisClusterCRC16::::getSlot(byte[])","59":"JedisClusterCRC16::::getSlot(byte[])","60":"JedisClusterCRC16::::getSlot(byte[])","61":"JedisClusterCRC16::::getSlot(byte[])","62":"JedisClusterCRC16::::getSlot(byte[])","63":"JedisClusterCRC16::::getSlot(byte[])","64":"JedisClusterCRC16::::getSlot(byte[])","65":"JedisClusterCRC16::::getSlot(byte[])","66":"JedisClusterCRC16::::getSlot(byte[])","67":"JedisClusterCRC16::::getSlot(byte[])","78":"JedisClusterCRC16::::getCRC16(byte[],int,int)","79":"JedisClusterCRC16::::getCRC16(byte[],int,int)","80":"JedisClusterCRC16::::getCRC16(byte[],int,int)","81":"JedisClusterCRC16::::getCRC16(byte[],int,int)","82":"JedisClusterCRC16::::getCRC16(byte[],int,int)","83":"JedisClusterCRC16::::getCRC16(byte[],int,int)","84":"JedisClusterCRC16::::getCRC16(byte[],int,int)","85":"JedisClusterCRC16::::getCRC16(byte[],int,int)","87":"JedisClusterCRC16::::getCRC16(byte[])","88":"JedisClusterCRC16::::getCRC16(byte[])","89":"JedisClusterCRC16::::getCRC16(byte[])","91":"JedisClusterCRC16::::getCRC16(java.lang.String)","92":"JedisClusterCRC16::::getCRC16(java.lang.String)","93":"JedisClusterCRC16::::getCRC16(java.lang.String)","94":"JedisClusterCRC16::::getCRC16(java.lang.String)"},"test_reverse_method_lines_dic":{"13":"JedisClusterCRC16Test::::testGetCRC16()","14":"JedisClusterCRC16Test::::testGetCRC16()","15":"JedisClusterCRC16Test::::testGetCRC16()","16":"JedisClusterCRC16Test::::testGetCRC16()","17":"JedisClusterCRC16Test::::testGetCRC16()","18":"JedisClusterCRC16Test::::testGetCRC16()","19":"JedisClusterCRC16Test::::testGetCRC16()","20":"JedisClusterCRC16Test::::testGetCRC16()","21":"JedisClusterCRC16Test::::testGetCRC16()","22":"JedisClusterCRC16Test::::testGetCRC16()","23":"JedisClusterCRC16Test::::testGetCRC16()","24":"JedisClusterCRC16Test::::testGetCRC16()","25":"JedisClusterCRC16Test::::testGetCRC16()","27":"JedisClusterCRC16Test::::testGetSlot()","28":"JedisClusterCRC16Test::::testGetSlot()","29":"JedisClusterCRC16Test::::testGetSlot()","30":"JedisClusterCRC16Test::::testGetSlot()","32":"JedisClusterCRC16Test::::prepareSolutionSet()","33":"JedisClusterCRC16Test::::prepareSolutionSet()","34":"JedisClusterCRC16Test::::prepareSolutionSet()","35":"JedisClusterCRC16Test::::prepareSolutionSet()","36":"JedisClusterCRC16Test::::prepareSolutionSet()","37":"JedisClusterCRC16Test::::prepareSolutionSet()","38":"JedisClusterCRC16Test::::prepareSolutionSet()","39":"JedisClusterCRC16Test::::prepareSolutionSet()","40":"JedisClusterCRC16Test::::prepareSolutionSet()","41":"JedisClusterCRC16Test::::prepareSolutionSet()","43":"JedisClusterCRC16Test::::testRedisHashtagGetSlot()","44":"JedisClusterCRC16Test::::testRedisHashtagGetSlot()","45":"JedisClusterCRC16Test::::testRedisHashtagGetSlot()","46":"JedisClusterCRC16Test::::testRedisHashtagGetSlot()","47":"JedisClusterCRC16Test::::testRedisHashtagGetSlot()","48":"JedisClusterCRC16Test::::testRedisHashtagGetSlot()","49":"JedisClusterCRC16Test::::testRedisHashtagGetSlot()","50":"JedisClusterCRC16Test::::testRedisHashtagGetSlot()","52":"JedisClusterCRC16Test::::testBinaryHashtagGetSlot()","53":"JedisClusterCRC16Test::::testBinaryHashtagGetSlot()","54":"JedisClusterCRC16Test::::testBinaryHashtagGetSlot()","55":"JedisClusterCRC16Test::::testBinaryHashtagGetSlot()","56":"JedisClusterCRC16Test::::testBinaryHashtagGetSlot()","57":"JedisClusterCRC16Test::::testBinaryHashtagGetSlot()","58":"JedisClusterCRC16Test::::testBinaryHashtagGetSlot()","59":"JedisClusterCRC16Test::::testBinaryHashtagGetSlot()","60":"JedisClusterCRC16Test::::testBinaryHashtagGetSlot()","61":"JedisClusterCRC16Test::::testBinaryHashtagGetSlot()","62":"JedisClusterCRC16Test::::testBinaryHashtagGetSlot()"},"tests":[{"test_lines":[13,25],"covered_lines":[10,79,81,82,84,88,92,93]},{"test_lines":[27,30],"covered_lines":[10,36,40,42,79,81,82,84,92,93]},{"test_lines":[43,50],"covered_lines":[10,36,40,42,79,81,82,84,92,93]},{"test_lines":[52,62],"covered_lines":[10,46,50,51,52,53,54,55,56,58,59,60,63,64,66,79,81,82,84,88]}]},"/bernard/dataset_construction/prep/repos/jedis/src/main/java/redis/clients/jedis/util/JedisURIHelper.java":{"class_content":["package redis.clients.jedis.util;\n","\n","import java.net.URI;\n","import redis.clients.jedis.HostAndPort;\n","import redis.clients.jedis.Protocol;\n","import redis.clients.jedis.RedisProtocol;\n","\n","public final class JedisURIHelper {\n","\n","  private static final String REDIS = \"redis\";\n","  private static final String REDISS = \"rediss\";\n","\n","  private JedisURIHelper() {\n","    throw new InstantiationError(\"Must not instantiate this class\");\n","  }\n","\n","  public static HostAndPort getHostAndPort(URI uri) {\n","    return new HostAndPort(uri.getHost(), uri.getPort());\n","  }\n","\n","  public static String getUser(URI uri) {\n","    String userInfo = uri.getUserInfo();\n","    if (userInfo != null) {\n","      String user = userInfo.split(\":\", 2)[0];\n","      if (user.isEmpty()) {\n","        user = null; // return null user is not specified\n","      }\n","      return user;\n","    }\n","    return null;\n","  }\n","\n","  public static String getPassword(URI uri) {\n","    String userInfo = uri.getUserInfo();\n","    if (userInfo != null) {\n","      return userInfo.split(\":\", 2)[1];\n","    }\n","    return null;\n","  }\n","\n","  public static int getDBIndex(URI uri) {\n","    String[] pathSplit = uri.getPath().split(\"/\", 2);\n","    if (pathSplit.length > 1) {\n","      String dbIndexStr = pathSplit[1];\n","      if (dbIndexStr.isEmpty()) {\n","        return Protocol.DEFAULT_DATABASE;\n","      }\n","      return Integer.parseInt(dbIndexStr);\n","    } else {\n","      return Protocol.DEFAULT_DATABASE;\n","    }\n","  }\n","\n","  public static RedisProtocol getRedisProtocol(URI uri) {\n","    if (uri.getQuery() == null) return null;\n","\n","    String[] pairs = uri.getQuery().split(\"&\");\n","    for (String pair : pairs) {\n","      int idx = pair.indexOf(\"=\");\n","      if (\"protocol\".equals(pair.substring(0, idx))) {\n","        String ver = pair.substring(idx + 1);\n","        for (RedisProtocol proto : RedisProtocol.values()) {\n","          if (proto.version().equals(ver)) {\n","            return proto;\n","          }\n","        }\n","        throw new IllegalArgumentException(\"Unknown protocol \" + ver);\n","      }\n","    }\n","    return null; // null (default) when not defined\n","  }\n","\n","  public static boolean isValid(URI uri) {\n","    if (isEmpty(uri.getScheme()) || isEmpty(uri.getHost()) || uri.getPort() == -1) {\n","      return false;\n","    }\n","\n","    return true;\n","  }\n","\n","  private static boolean isEmpty(String value) {\n","    return value == null || value.trim().length() == 0;\n","  }\n","\n","  public static boolean isRedisScheme(URI uri) {\n","    return REDIS.equals(uri.getScheme());\n","  }\n","\n","  public static boolean isRedisSSLScheme(URI uri) {\n","    return REDISS.equals(uri.getScheme());\n","  }\n","\n","}\n"],"test_content":["package redis.clients.jedis.util;\n","\n","import static redis.clients.jedis.util.JedisURIHelper.*;\n","\n","import static org.junit.Assert.assertEquals;\n","import static org.junit.Assert.assertFalse;\n","import static org.junit.Assert.assertNull;\n","\n","import java.net.URI;\n","import java.net.URISyntaxException;\n","import org.junit.Test;\n","import redis.clients.jedis.RedisProtocol;\n","\n","public class JedisURIHelperTest {\n","\n","  @Test\n","  public void shouldGetUserAndPasswordFromURIWithCredentials() throws URISyntaxException {\n","    URI uri = new URI(\"redis://user:password@host:9000/0\");\n","    assertEquals(\"user\", JedisURIHelper.getUser(uri));\n","    assertEquals(\"password\", JedisURIHelper.getPassword(uri));\n","  }\n","\n","  @Test\n","  public void shouldGetNullUserFromURIWithCredentials() throws URISyntaxException {\n","    URI uri = new URI(\"redis://:password@host:9000/0\");\n","    assertNull(JedisURIHelper.getUser(uri));\n","    assertEquals(\"password\", JedisURIHelper.getPassword(uri));\n","  }\n","\n","  @Test\n","  public void shouldReturnNullIfURIDoesNotHaveCredentials() throws URISyntaxException {\n","    URI uri = new URI(\"redis://host:9000/0\");\n","    assertNull(JedisURIHelper.getUser(uri));\n","    assertNull(JedisURIHelper.getPassword(uri));\n","  }\n","\n","  @Test\n","  public void shouldGetDbFromURIWithCredentials() throws URISyntaxException {\n","    URI uri = new URI(\"redis://user:password@host:9000/3\");\n","    assertEquals(3, JedisURIHelper.getDBIndex(uri));\n","  }\n","\n","  @Test\n","  public void shouldGetDbFromURIWithoutCredentials() throws URISyntaxException {\n","    URI uri = new URI(\"redis://host:9000/4\");\n","    assertEquals(4, JedisURIHelper.getDBIndex(uri));\n","  }\n","\n","  @Test\n","  public void shouldGetDefaultDbFromURIIfNoDbWasSpecified() throws URISyntaxException {\n","    URI uri = new URI(\"redis://host:9000\");\n","    assertEquals(0, JedisURIHelper.getDBIndex(uri));\n","  }\n","\n","  @Test\n","  public void shouldValidateInvalidURIs() throws URISyntaxException {\n","    assertFalse(JedisURIHelper.isValid(new URI(\"host:9000\")));\n","    assertFalse(JedisURIHelper.isValid(new URI(\"user:password@host:9000/0\")));\n","    assertFalse(JedisURIHelper.isValid(new URI(\"host:9000/0\")));\n","    assertFalse(JedisURIHelper.isValid(new URI(\"redis://host/0\")));\n","  }\n","\n","  @Test\n","  public void shouldGetDefaultProtocolWhenNotDefined() {\n","    assertNull(getRedisProtocol(URI.create(\"redis://host:1234\")));\n","    assertNull(getRedisProtocol(URI.create(\"redis://host:1234/1\")));\n","  }\n","\n","  @Test\n","  public void shouldGetProtocolFromDefinition() {\n","    assertEquals(RedisProtocol.RESP3, getRedisProtocol(URI.create(\"redis://host:1234?protocol=3\")));\n","    assertEquals(RedisProtocol.RESP3, getRedisProtocol(URI.create(\"redis://host:1234/?protocol=3\")));\n","    assertEquals(RedisProtocol.RESP3, getRedisProtocol(URI.create(\"redis://host:1234/1?protocol=3\")));\n","    assertEquals(RedisProtocol.RESP3, getRedisProtocol(URI.create(\"redis://host:1234/1/?protocol=3\")));\n","  }\n","}\n"],"method_lines_dic":{"JedisURIHelper::::getHostAndPort(java.net.URI)":[17,19],"JedisURIHelper::::getUser(java.net.URI)":[21,31],"JedisURIHelper::::getPassword(java.net.URI)":[33,39],"JedisURIHelper::::getDBIndex(java.net.URI)":[41,52],"JedisURIHelper::::getRedisProtocol(java.net.URI)":[54,71],"JedisURIHelper::::isValid(java.net.URI)":[73,79],"JedisURIHelper::::isEmpty(java.lang.String)":[81,83],"JedisURIHelper::::isRedisScheme(java.net.URI)":[85,87],"JedisURIHelper::::isRedisSSLScheme(java.net.URI)":[89,91]},"test_method_lines_dic":{"JedisURIHelperTest::::shouldGetUserAndPasswordFromURIWithCredentials()":[16,21],"JedisURIHelperTest::::shouldGetNullUserFromURIWithCredentials()":[23,28],"JedisURIHelperTest::::shouldReturnNullIfURIDoesNotHaveCredentials()":[30,35],"JedisURIHelperTest::::shouldGetDbFromURIWithCredentials()":[37,41],"JedisURIHelperTest::::shouldGetDbFromURIWithoutCredentials()":[43,47],"JedisURIHelperTest::::shouldGetDefaultDbFromURIIfNoDbWasSpecified()":[49,53],"JedisURIHelperTest::::shouldValidateInvalidURIs()":[55,61],"JedisURIHelperTest::::shouldGetDefaultProtocolWhenNotDefined()":[63,67],"JedisURIHelperTest::::shouldGetProtocolFromDefinition()":[69,75]},"reverse_method_lines_dic":{"17":"JedisURIHelper::::getHostAndPort(java.net.URI)","18":"JedisURIHelper::::getHostAndPort(java.net.URI)","19":"JedisURIHelper::::getHostAndPort(java.net.URI)","21":"JedisURIHelper::::getUser(java.net.URI)","22":"JedisURIHelper::::getUser(java.net.URI)","23":"JedisURIHelper::::getUser(java.net.URI)","24":"JedisURIHelper::::getUser(java.net.URI)","25":"JedisURIHelper::::getUser(java.net.URI)","26":"JedisURIHelper::::getUser(java.net.URI)","27":"JedisURIHelper::::getUser(java.net.URI)","28":"JedisURIHelper::::getUser(java.net.URI)","29":"JedisURIHelper::::getUser(java.net.URI)","30":"JedisURIHelper::::getUser(java.net.URI)","31":"JedisURIHelper::::getUser(java.net.URI)","33":"JedisURIHelper::::getPassword(java.net.URI)","34":"JedisURIHelper::::getPassword(java.net.URI)","35":"JedisURIHelper::::getPassword(java.net.URI)","36":"JedisURIHelper::::getPassword(java.net.URI)","37":"JedisURIHelper::::getPassword(java.net.URI)","38":"JedisURIHelper::::getPassword(java.net.URI)","39":"JedisURIHelper::::getPassword(java.net.URI)","41":"JedisURIHelper::::getDBIndex(java.net.URI)","42":"JedisURIHelper::::getDBIndex(java.net.URI)","43":"JedisURIHelper::::getDBIndex(java.net.URI)","44":"JedisURIHelper::::getDBIndex(java.net.URI)","45":"JedisURIHelper::::getDBIndex(java.net.URI)","46":"JedisURIHelper::::getDBIndex(java.net.URI)","47":"JedisURIHelper::::getDBIndex(java.net.URI)","48":"JedisURIHelper::::getDBIndex(java.net.URI)","49":"JedisURIHelper::::getDBIndex(java.net.URI)","50":"JedisURIHelper::::getDBIndex(java.net.URI)","51":"JedisURIHelper::::getDBIndex(java.net.URI)","52":"JedisURIHelper::::getDBIndex(java.net.URI)","54":"JedisURIHelper::::getRedisProtocol(java.net.URI)","55":"JedisURIHelper::::getRedisProtocol(java.net.URI)","56":"JedisURIHelper::::getRedisProtocol(java.net.URI)","57":"JedisURIHelper::::getRedisProtocol(java.net.URI)","58":"JedisURIHelper::::getRedisProtocol(java.net.URI)","59":"JedisURIHelper::::getRedisProtocol(java.net.URI)","60":"JedisURIHelper::::getRedisProtocol(java.net.URI)","61":"JedisURIHelper::::getRedisProtocol(java.net.URI)","62":"JedisURIHelper::::getRedisProtocol(java.net.URI)","63":"JedisURIHelper::::getRedisProtocol(java.net.URI)","64":"JedisURIHelper::::getRedisProtocol(java.net.URI)","65":"JedisURIHelper::::getRedisProtocol(java.net.URI)","66":"JedisURIHelper::::getRedisProtocol(java.net.URI)","67":"JedisURIHelper::::getRedisProtocol(java.net.URI)","68":"JedisURIHelper::::getRedisProtocol(java.net.URI)","69":"JedisURIHelper::::getRedisProtocol(java.net.URI)","70":"JedisURIHelper::::getRedisProtocol(java.net.URI)","71":"JedisURIHelper::::getRedisProtocol(java.net.URI)","73":"JedisURIHelper::::isValid(java.net.URI)","74":"JedisURIHelper::::isValid(java.net.URI)","75":"JedisURIHelper::::isValid(java.net.URI)","76":"JedisURIHelper::::isValid(java.net.URI)","77":"JedisURIHelper::::isValid(java.net.URI)","78":"JedisURIHelper::::isValid(java.net.URI)","79":"JedisURIHelper::::isValid(java.net.URI)","81":"JedisURIHelper::::isEmpty(java.lang.String)","82":"JedisURIHelper::::isEmpty(java.lang.String)","83":"JedisURIHelper::::isEmpty(java.lang.String)","85":"JedisURIHelper::::isRedisScheme(java.net.URI)","86":"JedisURIHelper::::isRedisScheme(java.net.URI)","87":"JedisURIHelper::::isRedisScheme(java.net.URI)","89":"JedisURIHelper::::isRedisSSLScheme(java.net.URI)","90":"JedisURIHelper::::isRedisSSLScheme(java.net.URI)","91":"JedisURIHelper::::isRedisSSLScheme(java.net.URI)"},"test_reverse_method_lines_dic":{"16":"JedisURIHelperTest::::shouldGetUserAndPasswordFromURIWithCredentials()","17":"JedisURIHelperTest::::shouldGetUserAndPasswordFromURIWithCredentials()","18":"JedisURIHelperTest::::shouldGetUserAndPasswordFromURIWithCredentials()","19":"JedisURIHelperTest::::shouldGetUserAndPasswordFromURIWithCredentials()","20":"JedisURIHelperTest::::shouldGetUserAndPasswordFromURIWithCredentials()","21":"JedisURIHelperTest::::shouldGetUserAndPasswordFromURIWithCredentials()","23":"JedisURIHelperTest::::shouldGetNullUserFromURIWithCredentials()","24":"JedisURIHelperTest::::shouldGetNullUserFromURIWithCredentials()","25":"JedisURIHelperTest::::shouldGetNullUserFromURIWithCredentials()","26":"JedisURIHelperTest::::shouldGetNullUserFromURIWithCredentials()","27":"JedisURIHelperTest::::shouldGetNullUserFromURIWithCredentials()","28":"JedisURIHelperTest::::shouldGetNullUserFromURIWithCredentials()","30":"JedisURIHelperTest::::shouldReturnNullIfURIDoesNotHaveCredentials()","31":"JedisURIHelperTest::::shouldReturnNullIfURIDoesNotHaveCredentials()","32":"JedisURIHelperTest::::shouldReturnNullIfURIDoesNotHaveCredentials()","33":"JedisURIHelperTest::::shouldReturnNullIfURIDoesNotHaveCredentials()","34":"JedisURIHelperTest::::shouldReturnNullIfURIDoesNotHaveCredentials()","35":"JedisURIHelperTest::::shouldReturnNullIfURIDoesNotHaveCredentials()","37":"JedisURIHelperTest::::shouldGetDbFromURIWithCredentials()","38":"JedisURIHelperTest::::shouldGetDbFromURIWithCredentials()","39":"JedisURIHelperTest::::shouldGetDbFromURIWithCredentials()","40":"JedisURIHelperTest::::shouldGetDbFromURIWithCredentials()","41":"JedisURIHelperTest::::shouldGetDbFromURIWithCredentials()","43":"JedisURIHelperTest::::shouldGetDbFromURIWithoutCredentials()","44":"JedisURIHelperTest::::shouldGetDbFromURIWithoutCredentials()","45":"JedisURIHelperTest::::shouldGetDbFromURIWithoutCredentials()","46":"JedisURIHelperTest::::shouldGetDbFromURIWithoutCredentials()","47":"JedisURIHelperTest::::shouldGetDbFromURIWithoutCredentials()","49":"JedisURIHelperTest::::shouldGetDefaultDbFromURIIfNoDbWasSpecified()","50":"JedisURIHelperTest::::shouldGetDefaultDbFromURIIfNoDbWasSpecified()","51":"JedisURIHelperTest::::shouldGetDefaultDbFromURIIfNoDbWasSpecified()","52":"JedisURIHelperTest::::shouldGetDefaultDbFromURIIfNoDbWasSpecified()","53":"JedisURIHelperTest::::shouldGetDefaultDbFromURIIfNoDbWasSpecified()","55":"JedisURIHelperTest::::shouldValidateInvalidURIs()","56":"JedisURIHelperTest::::shouldValidateInvalidURIs()","57":"JedisURIHelperTest::::shouldValidateInvalidURIs()","58":"JedisURIHelperTest::::shouldValidateInvalidURIs()","59":"JedisURIHelperTest::::shouldValidateInvalidURIs()","60":"JedisURIHelperTest::::shouldValidateInvalidURIs()","61":"JedisURIHelperTest::::shouldValidateInvalidURIs()","63":"JedisURIHelperTest::::shouldGetDefaultProtocolWhenNotDefined()","64":"JedisURIHelperTest::::shouldGetDefaultProtocolWhenNotDefined()","65":"JedisURIHelperTest::::shouldGetDefaultProtocolWhenNotDefined()","66":"JedisURIHelperTest::::shouldGetDefaultProtocolWhenNotDefined()","67":"JedisURIHelperTest::::shouldGetDefaultProtocolWhenNotDefined()","69":"JedisURIHelperTest::::shouldGetProtocolFromDefinition()","70":"JedisURIHelperTest::::shouldGetProtocolFromDefinition()","71":"JedisURIHelperTest::::shouldGetProtocolFromDefinition()","72":"JedisURIHelperTest::::shouldGetProtocolFromDefinition()","73":"JedisURIHelperTest::::shouldGetProtocolFromDefinition()","74":"JedisURIHelperTest::::shouldGetProtocolFromDefinition()","75":"JedisURIHelperTest::::shouldGetProtocolFromDefinition()"},"tests":[{"test_lines":[16,21],"covered_lines":[22,23,24,25,28,34,35,36]},{"test_lines":[23,28],"covered_lines":[22,23,24,25,26,28,34,35,36]},{"test_lines":[30,35],"covered_lines":[22,23,30,34,35,38]},{"test_lines":[37,41],"covered_lines":[42,43,44,45,48]},{"test_lines":[43,47],"covered_lines":[42,43,44,45,48]},{"test_lines":[49,53],"covered_lines":[42,43,50]},{"test_lines":[55,61],"covered_lines":[74,75,82]},{"test_lines":[63,67],"covered_lines":[55]},{"test_lines":[69,75],"covered_lines":[55,57,58,59,60,61,62,63,64]}]},"/bernard/dataset_construction/prep/repos/jedis/src/main/java/redis/clients/jedis/util/ByteArrayComparator.java":{"class_content":["package redis.clients.jedis.util;\n","\n","public final class ByteArrayComparator {\n","  private ByteArrayComparator() {\n","    throw new InstantiationError(\"Must not instantiate this class\");\n","  }\n","\n","  public static int compare(final byte[] val1, final byte[] val2) {\n","    int len1 = val1.length;\n","    int len2 = val2.length;\n","    int lmin = Math.min(len1, len2);\n","\n","    for (int i = 0; i < lmin; i++) {\n","      byte b1 = val1[i];\n","      byte b2 = val2[i];\n","      if (b1 < b2) return -1;\n","      if (b1 > b2) return 1;\n","    }\n","\n","    if (len1 < len2) return -1;\n","    if (len1 > len2) return 1;\n","    return 0;\n","  }\n","}\n"],"test_content":["package redis.clients.jedis.util;\n","\n","import static org.junit.Assert.assertTrue;\n","\n","import org.junit.Test;\n","\n","public class ByteArrayComparatorTest {\n","\n","  @Test\n","  public void test() {\n","    byte[] foo = SafeEncoder.encode(\"foo\");\n","    byte[] foo2 = SafeEncoder.encode(\"foo\");\n","    byte[] bar = SafeEncoder.encode(\"bar\");\n","\n","    assertTrue(ByteArrayComparator.compare(foo, foo2) == 0);\n","    assertTrue(ByteArrayComparator.compare(foo, bar) > 0);\n","    assertTrue(ByteArrayComparator.compare(bar, foo) < 0);\n","  }\n","\n","  @Test\n","  public void testPrefix() {\n","    byte[] foo = SafeEncoder.encode(\"foo\");\n","    byte[] fooo = SafeEncoder.encode(\"fooo\");\n","    assertTrue(ByteArrayComparator.compare(foo, fooo) < 0);\n","    assertTrue(ByteArrayComparator.compare(fooo, foo) > 0);\n","  }\n","}\n"],"method_lines_dic":{"ByteArrayComparator::::compare(byte[],byte[])":[8,23]},"test_method_lines_dic":{"ByteArrayComparatorTest::::test()":[9,18],"ByteArrayComparatorTest::::testPrefix()":[20,26]},"reverse_method_lines_dic":{"8":"ByteArrayComparator::::compare(byte[],byte[])","9":"ByteArrayComparator::::compare(byte[],byte[])","10":"ByteArrayComparator::::compare(byte[],byte[])","11":"ByteArrayComparator::::compare(byte[],byte[])","12":"ByteArrayComparator::::compare(byte[],byte[])","13":"ByteArrayComparator::::compare(byte[],byte[])","14":"ByteArrayComparator::::compare(byte[],byte[])","15":"ByteArrayComparator::::compare(byte[],byte[])","16":"ByteArrayComparator::::compare(byte[],byte[])","17":"ByteArrayComparator::::compare(byte[],byte[])","18":"ByteArrayComparator::::compare(byte[],byte[])","19":"ByteArrayComparator::::compare(byte[],byte[])","20":"ByteArrayComparator::::compare(byte[],byte[])","21":"ByteArrayComparator::::compare(byte[],byte[])","22":"ByteArrayComparator::::compare(byte[],byte[])","23":"ByteArrayComparator::::compare(byte[],byte[])"},"test_reverse_method_lines_dic":{"9":"ByteArrayComparatorTest::::test()","10":"ByteArrayComparatorTest::::test()","11":"ByteArrayComparatorTest::::test()","12":"ByteArrayComparatorTest::::test()","13":"ByteArrayComparatorTest::::test()","14":"ByteArrayComparatorTest::::test()","15":"ByteArrayComparatorTest::::test()","16":"ByteArrayComparatorTest::::test()","17":"ByteArrayComparatorTest::::test()","18":"ByteArrayComparatorTest::::test()","20":"ByteArrayComparatorTest::::testPrefix()","21":"ByteArrayComparatorTest::::testPrefix()","22":"ByteArrayComparatorTest::::testPrefix()","23":"ByteArrayComparatorTest::::testPrefix()","24":"ByteArrayComparatorTest::::testPrefix()","25":"ByteArrayComparatorTest::::testPrefix()","26":"ByteArrayComparatorTest::::testPrefix()"},"tests":[{"test_lines":[9,18],"covered_lines":[9,10,11,13,14,15,16,17,20,21,22]},{"test_lines":[20,26],"covered_lines":[9,10,11,13,14,15,16,17,20,21]}]}}