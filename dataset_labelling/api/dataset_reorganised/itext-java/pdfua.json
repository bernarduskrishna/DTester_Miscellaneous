{
  "/bernard/dataset_construction/prep/repos/itext-java/pdfua/src/main/java/com/itextpdf/pdfua/checkers/utils/BCP47Validator.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.pdfua.checkers.utils;\n",
      "\n",
      "import java.util.regex.Pattern;\n",
      "\n",
      "/**\n",
      " * This class is a validator for IETF BCP 47 language tag (RFC 5646)\n",
      " */\n",
      "public class BCP47Validator {\n",
      "    private static String regular = \"(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang)\";\n",
      "    private static String irregular = \"(en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)\";\n",
      "    private static String grandfathered = \"(?<grandfathered>\" + irregular + \"|\" + regular + \")\";\n",
      "    private static String privateUse = \"(?<privateUse>x(-[A-Za-z0-9]{1,8})+)\";\n",
      "    private static String singleton = \"[0-9A-WY-Za-wy-z]\";\n",
      "    private static String extension = \"(?<extension>\" + singleton + \"(-[A-Za-z0-9]{2,8})+)\";\n",
      "    private static String variant = \"(?<variant>[A-Za-z0-9]{5,8}|[0-9][A-Za-z0-9]{3})\";\n",
      "    private static String region = \"(?<region>[A-Za-z]{2}|[0-9]{3})\";\n",
      "    private static String script = \"(?<script>[A-Za-z]{4})\";\n",
      "    private static String extlang = \"(?<extlang>[A-Za-z]{3}(-[A-Za-z]{3}){0,2})\";\n",
      "    private static String language = \"(?<language>([A-Za-z]{2,3}(-\" + extlang + \")?)|[A-Za-z]{4}|[A-Za-z]{5,8})\";\n",
      "    private static String langtag = \"(\" + language + \"(-\" + script + \")?\" + \"(-\" + region + \")?\" + \"(-\" + variant + \")*\" + \"(-\" + extension + \")*\" + \"(-\" + privateUse + \")?\" + \")\";\n",
      "    //Java regex polices doesn't allow duplicate named capture groups, so we have to change the 2nd use <privateUse> to ?<privateUse1>\n",
      "    private static Pattern languageTagPattern = Pattern.compile(\"^(\" + grandfathered + \"|\" + langtag + \"|\" + privateUse.replace(\"privateUse\", \"privateUse1\") + \")$\");\n",
      "\n",
      "    private BCP47Validator() {}\n",
      "\n",
      "    /**\n",
      "     * Validate language tag against RFC 5646.\n",
      "     *\n",
      "     * @param languageTag language tag string\n",
      "     *\n",
      "     * @return {@code true} if it is a valid tag, {@code false} otherwise\n",
      "     */\n",
      "    public static boolean validate(String languageTag) {\n",
      "        return languageTagPattern.matcher(languageTag).matches();\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.pdfua.checkers.utils;\n",
      "\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.type.UnitTest;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(UnitTest.class)\n",
      "public class BCP47ValidatorTest extends ExtendedITextTest {\n",
      "\n",
      "    @Test\n",
      "    public void simpleLanguageSubtagTest() {\n",
      "        Assert.assertTrue(BCP47Validator.validate(\"de\"));\n",
      "        Assert.assertTrue(BCP47Validator.validate(\"fr\"));\n",
      "        //example of a grandfathered tag\n",
      "        Assert.assertTrue(BCP47Validator.validate(\"i-enochian\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void languageSubtagAndScriptSubtagTest() {\n",
      "        //Chinese written using the Traditional Chinese script\n",
      "        Assert.assertTrue(BCP47Validator.validate(\"zh-Hant\"));\n",
      "        //Chinese written using the Simplified Chinese script\n",
      "        Assert.assertTrue(BCP47Validator.validate(\"zh-Hans\"));\n",
      "        //Serbian written using the Cyrillic script\n",
      "        Assert.assertTrue(BCP47Validator.validate(\"sr-Cyrl\"));\n",
      "        //Serbian written using the Latin script\n",
      "        Assert.assertTrue(BCP47Validator.validate(\"sr-Latn\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void extLangSubtagsAndPrimaryLangSubtagsTest() {\n",
      "        //Chinese, Mandarin, Simplified script, as used in China\n",
      "        Assert.assertTrue(BCP47Validator.validate(\"zh-cmn-Hans-CN\"));\n",
      "        //Mandarin Chinese, Simplified script, as used in China\n",
      "        Assert.assertTrue(BCP47Validator.validate(\"cmn-Hans-CN\"));\n",
      "        //Chinese, Cantonese, as used in Hong Kong SAR\n",
      "        Assert.assertTrue(BCP47Validator.validate(\"zh-yue-HK\"));\n",
      "        Assert.assertTrue(BCP47Validator.validate(\"sr-Latn\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void languageScriptRegionsTest() {\n",
      "        //Chinese written using the Simplified script as used in mainland China\n",
      "        Assert.assertTrue(BCP47Validator.validate(\"zh-Hans-CN\"));\n",
      "        //Serbian written using the Latin script as used in Serbia\n",
      "        Assert.assertTrue(BCP47Validator.validate(\"sr-Latn-RS\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void languageVariantTest() {\n",
      "        //Resian dialect of Slovenian\n",
      "        Assert.assertTrue(BCP47Validator.validate(\"sl-rozaj\"));\n",
      "        //San Giorgio dialect of Resian dialect of Slovenian\n",
      "        Assert.assertTrue(BCP47Validator.validate(\"sl-rozaj-biske\"));\n",
      "        //Nadiza dialect of Slovenian\n",
      "        Assert.assertTrue(BCP47Validator.validate(\"sl-nedis\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void languageRegionVariantTest() {\n",
      "        //German as used in Switzerland using the 1901 variant [orthography]\n",
      "        Assert.assertTrue(BCP47Validator.validate(\"de-CH-1901\"));\n",
      "        //Slovenian as used in Italy, Nadiza dialect\n",
      "        Assert.assertTrue(BCP47Validator.validate(\"sl-IT-nedis\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void languageScriptRegionVariantTest() {\n",
      "        //Eastern Armenian written in Latin script, as used in Italy\n",
      "        Assert.assertTrue(BCP47Validator.validate(\"hy-Latn-IT-arevela\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void languageRegionTest() {\n",
      "        //German for Germany\n",
      "        Assert.assertTrue(BCP47Validator.validate(\"de-DE\"));\n",
      "        //English as used in the United States\n",
      "        Assert.assertTrue(BCP47Validator.validate(\"en-US\"));\n",
      "        //Spanish appropriate for the Latin America and Caribbean region using the UN region code\n",
      "        Assert.assertTrue(BCP47Validator.validate(\"es-419\"));\n",
      "        //Invalid, two region tags\n",
      "        Assert.assertFalse(BCP47Validator.validate(\"de-419-DE\"));\n",
      "        //use of a single-character subtag in primary position; note\n",
      "        //that there are a few grandfathered tags that start with \"i-\" that\n",
      "        //are valid\n",
      "        Assert.assertFalse(BCP47Validator.validate(\"a-DE\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void privateUseSubtagsTest() {\n",
      "        Assert.assertTrue(BCP47Validator.validate(\"de-CH-x-phonebk\"));\n",
      "        Assert.assertTrue(BCP47Validator.validate(\"az-Arab-x-AZE-derbend\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void privateUseRegistryValuesTest() {\n",
      "        //private use using the singleton 'x'\n",
      "        Assert.assertTrue(BCP47Validator.validate(\"x-whatever\"));\n",
      "        //all private tags\n",
      "        Assert.assertTrue(BCP47Validator.validate(\"qaa-Qaaa-QM-x-southern\"));\n",
      "        //German, with a private script\n",
      "        Assert.assertTrue(BCP47Validator.validate(\"de-Qaaa\"));\n",
      "        //Serbian, Latin script, private region\n",
      "        Assert.assertTrue(BCP47Validator.validate(\"sr-Latn-QM\"));\n",
      "        //Serbian, private script, for Serbia\n",
      "        Assert.assertTrue(BCP47Validator.validate(\"sr-Qaaa-RS\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void tagsWithExtensions() {\n",
      "        Assert.assertTrue(BCP47Validator.validate(\"en-US-u-islamcal\"));\n",
      "        Assert.assertTrue(BCP47Validator.validate(\"zh-CN-a-myext-x-private\"));\n",
      "        Assert.assertTrue(BCP47Validator.validate(\"en-a-myext-b-another\"));\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "BCP47Validator::::validate(java.lang.String)": [
        55,
        57
      ]
    },
    "test_method_lines_dic": {
      "BCP47ValidatorTest::::simpleLanguageSubtagTest()": [
        34,
        40
      ],
      "BCP47ValidatorTest::::languageSubtagAndScriptSubtagTest()": [
        42,
        52
      ],
      "BCP47ValidatorTest::::extLangSubtagsAndPrimaryLangSubtagsTest()": [
        54,
        63
      ],
      "BCP47ValidatorTest::::languageScriptRegionsTest()": [
        65,
        71
      ],
      "BCP47ValidatorTest::::languageVariantTest()": [
        73,
        81
      ],
      "BCP47ValidatorTest::::languageRegionVariantTest()": [
        83,
        89
      ],
      "BCP47ValidatorTest::::languageScriptRegionVariantTest()": [
        91,
        95
      ],
      "BCP47ValidatorTest::::languageRegionTest()": [
        97,
        111
      ],
      "BCP47ValidatorTest::::privateUseSubtagsTest()": [
        113,
        117
      ],
      "BCP47ValidatorTest::::privateUseRegistryValuesTest()": [
        119,
        131
      ],
      "BCP47ValidatorTest::::tagsWithExtensions()": [
        133,
        138
      ]
    },
    "reverse_method_lines_dic": {
      "55": "BCP47Validator::::validate(java.lang.String)",
      "56": "BCP47Validator::::validate(java.lang.String)",
      "57": "BCP47Validator::::validate(java.lang.String)"
    },
    "test_reverse_method_lines_dic": {
      "34": "BCP47ValidatorTest::::simpleLanguageSubtagTest()",
      "35": "BCP47ValidatorTest::::simpleLanguageSubtagTest()",
      "36": "BCP47ValidatorTest::::simpleLanguageSubtagTest()",
      "37": "BCP47ValidatorTest::::simpleLanguageSubtagTest()",
      "38": "BCP47ValidatorTest::::simpleLanguageSubtagTest()",
      "39": "BCP47ValidatorTest::::simpleLanguageSubtagTest()",
      "40": "BCP47ValidatorTest::::simpleLanguageSubtagTest()",
      "42": "BCP47ValidatorTest::::languageSubtagAndScriptSubtagTest()",
      "43": "BCP47ValidatorTest::::languageSubtagAndScriptSubtagTest()",
      "44": "BCP47ValidatorTest::::languageSubtagAndScriptSubtagTest()",
      "45": "BCP47ValidatorTest::::languageSubtagAndScriptSubtagTest()",
      "46": "BCP47ValidatorTest::::languageSubtagAndScriptSubtagTest()",
      "47": "BCP47ValidatorTest::::languageSubtagAndScriptSubtagTest()",
      "48": "BCP47ValidatorTest::::languageSubtagAndScriptSubtagTest()",
      "49": "BCP47ValidatorTest::::languageSubtagAndScriptSubtagTest()",
      "50": "BCP47ValidatorTest::::languageSubtagAndScriptSubtagTest()",
      "51": "BCP47ValidatorTest::::languageSubtagAndScriptSubtagTest()",
      "52": "BCP47ValidatorTest::::languageSubtagAndScriptSubtagTest()",
      "54": "BCP47ValidatorTest::::extLangSubtagsAndPrimaryLangSubtagsTest()",
      "55": "BCP47ValidatorTest::::extLangSubtagsAndPrimaryLangSubtagsTest()",
      "56": "BCP47ValidatorTest::::extLangSubtagsAndPrimaryLangSubtagsTest()",
      "57": "BCP47ValidatorTest::::extLangSubtagsAndPrimaryLangSubtagsTest()",
      "58": "BCP47ValidatorTest::::extLangSubtagsAndPrimaryLangSubtagsTest()",
      "59": "BCP47ValidatorTest::::extLangSubtagsAndPrimaryLangSubtagsTest()",
      "60": "BCP47ValidatorTest::::extLangSubtagsAndPrimaryLangSubtagsTest()",
      "61": "BCP47ValidatorTest::::extLangSubtagsAndPrimaryLangSubtagsTest()",
      "62": "BCP47ValidatorTest::::extLangSubtagsAndPrimaryLangSubtagsTest()",
      "63": "BCP47ValidatorTest::::extLangSubtagsAndPrimaryLangSubtagsTest()",
      "65": "BCP47ValidatorTest::::languageScriptRegionsTest()",
      "66": "BCP47ValidatorTest::::languageScriptRegionsTest()",
      "67": "BCP47ValidatorTest::::languageScriptRegionsTest()",
      "68": "BCP47ValidatorTest::::languageScriptRegionsTest()",
      "69": "BCP47ValidatorTest::::languageScriptRegionsTest()",
      "70": "BCP47ValidatorTest::::languageScriptRegionsTest()",
      "71": "BCP47ValidatorTest::::languageScriptRegionsTest()",
      "73": "BCP47ValidatorTest::::languageVariantTest()",
      "74": "BCP47ValidatorTest::::languageVariantTest()",
      "75": "BCP47ValidatorTest::::languageVariantTest()",
      "76": "BCP47ValidatorTest::::languageVariantTest()",
      "77": "BCP47ValidatorTest::::languageVariantTest()",
      "78": "BCP47ValidatorTest::::languageVariantTest()",
      "79": "BCP47ValidatorTest::::languageVariantTest()",
      "80": "BCP47ValidatorTest::::languageVariantTest()",
      "81": "BCP47ValidatorTest::::languageVariantTest()",
      "83": "BCP47ValidatorTest::::languageRegionVariantTest()",
      "84": "BCP47ValidatorTest::::languageRegionVariantTest()",
      "85": "BCP47ValidatorTest::::languageRegionVariantTest()",
      "86": "BCP47ValidatorTest::::languageRegionVariantTest()",
      "87": "BCP47ValidatorTest::::languageRegionVariantTest()",
      "88": "BCP47ValidatorTest::::languageRegionVariantTest()",
      "89": "BCP47ValidatorTest::::languageRegionVariantTest()",
      "91": "BCP47ValidatorTest::::languageScriptRegionVariantTest()",
      "92": "BCP47ValidatorTest::::languageScriptRegionVariantTest()",
      "93": "BCP47ValidatorTest::::languageScriptRegionVariantTest()",
      "94": "BCP47ValidatorTest::::languageScriptRegionVariantTest()",
      "95": "BCP47ValidatorTest::::languageScriptRegionVariantTest()",
      "97": "BCP47ValidatorTest::::languageRegionTest()",
      "98": "BCP47ValidatorTest::::languageRegionTest()",
      "99": "BCP47ValidatorTest::::languageRegionTest()",
      "100": "BCP47ValidatorTest::::languageRegionTest()",
      "101": "BCP47ValidatorTest::::languageRegionTest()",
      "102": "BCP47ValidatorTest::::languageRegionTest()",
      "103": "BCP47ValidatorTest::::languageRegionTest()",
      "104": "BCP47ValidatorTest::::languageRegionTest()",
      "105": "BCP47ValidatorTest::::languageRegionTest()",
      "106": "BCP47ValidatorTest::::languageRegionTest()",
      "107": "BCP47ValidatorTest::::languageRegionTest()",
      "108": "BCP47ValidatorTest::::languageRegionTest()",
      "109": "BCP47ValidatorTest::::languageRegionTest()",
      "110": "BCP47ValidatorTest::::languageRegionTest()",
      "111": "BCP47ValidatorTest::::languageRegionTest()",
      "113": "BCP47ValidatorTest::::privateUseSubtagsTest()",
      "114": "BCP47ValidatorTest::::privateUseSubtagsTest()",
      "115": "BCP47ValidatorTest::::privateUseSubtagsTest()",
      "116": "BCP47ValidatorTest::::privateUseSubtagsTest()",
      "117": "BCP47ValidatorTest::::privateUseSubtagsTest()",
      "119": "BCP47ValidatorTest::::privateUseRegistryValuesTest()",
      "120": "BCP47ValidatorTest::::privateUseRegistryValuesTest()",
      "121": "BCP47ValidatorTest::::privateUseRegistryValuesTest()",
      "122": "BCP47ValidatorTest::::privateUseRegistryValuesTest()",
      "123": "BCP47ValidatorTest::::privateUseRegistryValuesTest()",
      "124": "BCP47ValidatorTest::::privateUseRegistryValuesTest()",
      "125": "BCP47ValidatorTest::::privateUseRegistryValuesTest()",
      "126": "BCP47ValidatorTest::::privateUseRegistryValuesTest()",
      "127": "BCP47ValidatorTest::::privateUseRegistryValuesTest()",
      "128": "BCP47ValidatorTest::::privateUseRegistryValuesTest()",
      "129": "BCP47ValidatorTest::::privateUseRegistryValuesTest()",
      "130": "BCP47ValidatorTest::::privateUseRegistryValuesTest()",
      "131": "BCP47ValidatorTest::::privateUseRegistryValuesTest()",
      "133": "BCP47ValidatorTest::::tagsWithExtensions()",
      "134": "BCP47ValidatorTest::::tagsWithExtensions()",
      "135": "BCP47ValidatorTest::::tagsWithExtensions()",
      "136": "BCP47ValidatorTest::::tagsWithExtensions()",
      "137": "BCP47ValidatorTest::::tagsWithExtensions()",
      "138": "BCP47ValidatorTest::::tagsWithExtensions()"
    },
    "tests": [
      {
        "test_lines": [
          34,
          40
        ],
        "covered_lines": [
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          44,
          56
        ]
      },
      {
        "test_lines": [
          42,
          52
        ],
        "covered_lines": [
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          44,
          56
        ]
      },
      {
        "test_lines": [
          54,
          63
        ],
        "covered_lines": [
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          44,
          56
        ]
      },
      {
        "test_lines": [
          65,
          71
        ],
        "covered_lines": [
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          44,
          56
        ]
      },
      {
        "test_lines": [
          73,
          81
        ],
        "covered_lines": [
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          44,
          56
        ]
      },
      {
        "test_lines": [
          83,
          89
        ],
        "covered_lines": [
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          44,
          56
        ]
      },
      {
        "test_lines": [
          91,
          95
        ],
        "covered_lines": [
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          44,
          56
        ]
      },
      {
        "test_lines": [
          97,
          111
        ],
        "covered_lines": [
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          44,
          56
        ]
      },
      {
        "test_lines": [
          113,
          117
        ],
        "covered_lines": [
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          44,
          56
        ]
      },
      {
        "test_lines": [
          119,
          131
        ],
        "covered_lines": [
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          44,
          56
        ]
      },
      {
        "test_lines": [
          133,
          138
        ],
        "covered_lines": [
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          44,
          56
        ]
      }
    ]
  }
}