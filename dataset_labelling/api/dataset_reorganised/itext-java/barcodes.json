{
  "/bernard/dataset_construction/prep/repos/itext-java/barcodes/src/main/java/com/itextpdf/barcodes/BarcodeDataMatrix.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.barcodes;\n",
      "\n",
      "import com.itextpdf.barcodes.dmcode.DmParams;\n",
      "import com.itextpdf.barcodes.dmcode.Placement;\n",
      "import com.itextpdf.barcodes.dmcode.ReedSolomon;\n",
      "import com.itextpdf.kernel.colors.Color;\n",
      "import com.itextpdf.kernel.geom.Rectangle;\n",
      "import com.itextpdf.kernel.pdf.PdfArray;\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "import com.itextpdf.kernel.pdf.canvas.PdfCanvas;\n",
      "import com.itextpdf.kernel.pdf.xobject.PdfFormXObject;\n",
      "\n",
      "import java.io.UnsupportedEncodingException;\n",
      "import java.util.Arrays;\n",
      "\n",
      "/**\n",
      " * A Data Matrix is a two-dimensional bar code consisting of black and white \"cells\" or dots arranged in either a square\n",
      " * or\n",
      " * rectangular pattern, also known as a matrix. The information to be encoded can be text or numeric data. Usual data\n",
      " * size is from a few bytes up to 1556 bytes. The length of the encoded data depends on the number of cells in the\n",
      " * matrix.\n",
      " */\n",
      "public class BarcodeDataMatrix extends Barcode2D {\n",
      "\n",
      "    /**\n",
      "     * No error.\n",
      "     */\n",
      "    public static final int DM_NO_ERROR = 0;\n",
      "    /**\n",
      "     * The text is too big for the symbology capabilities.\n",
      "     */\n",
      "    public static final int DM_ERROR_TEXT_TOO_BIG = 1;\n",
      "    /**\n",
      "     * The dimensions given for the symbol are illegal.\n",
      "     */\n",
      "    public static final int DM_ERROR_INVALID_SQUARE = 3;\n",
      "    /**\n",
      "     * An error while parsing an extension.\n",
      "     */\n",
      "    public static final int DM_ERROR_EXTENSION = 5;\n",
      "\n",
      "    /**\n",
      "     * The best encodation will be used.\n",
      "     */\n",
      "    public static final int DM_AUTO = 0;\n",
      "    /**\n",
      "     * ASCII encodation.\n",
      "     */\n",
      "    public static final int DM_ASCII = 1;\n",
      "    /**\n",
      "     * C40 encodation.\n",
      "     */\n",
      "    public static final int DM_C40 = 2;\n",
      "    /**\n",
      "     * TEXT encodation.\n",
      "     */\n",
      "    public static final int DM_TEXT = 3;\n",
      "    /**\n",
      "     * Binary encodation.\n",
      "     */\n",
      "    public static final int DM_B256 = 4;\n",
      "    /**\n",
      "     * X12 encodation.\n",
      "     */\n",
      "    public static final int DM_X12 = 5;\n",
      "    /**\n",
      "     * EDIFACT encodation.\n",
      "     */\n",
      "    public static final int DM_EDIFACT = 6;\n",
      "    /**\n",
      "     * No encodation needed. The bytes provided are already encoded.\n",
      "     */\n",
      "    public static final int DM_RAW = 7;\n",
      "\n",
      "    /**\n",
      "     * Allows extensions to be embedded at the start of the text.\n",
      "     */\n",
      "    public static final int DM_EXTENSION = 32;\n",
      "    /**\n",
      "     * Doesn't generate the image but returns all the other information.\n",
      "     */\n",
      "    public static final int DM_TEST = 64;\n",
      "\n",
      "    public static final String DEFAULT_DATA_MATRIX_ENCODING = \"iso-8859-1\";\n",
      "\n",
      "    private static final byte LATCH_B256 = (byte) 231;\n",
      "\n",
      "    private static final byte LATCH_EDIFACT = (byte) 240;\n",
      "\n",
      "    private static final byte LATCH_X12 = (byte) 238;\n",
      "\n",
      "    private static final byte LATCH_TEXT = (byte) 239;\n",
      "\n",
      "    private static final byte LATCH_C40 = (byte) 230;\n",
      "\n",
      "    private static final byte UNLATCH = (byte) 254;\n",
      "\n",
      "    private static final byte EXTENDED_ASCII = (byte) 235;\n",
      "\n",
      "    private static final byte PADDING = (byte) 129;\n",
      "\n",
      "    private String encoding;\n",
      "\n",
      "    private static final DmParams[] dmSizes = {\n",
      "            new DmParams(10, 10, 10, 10, 3, 3, 5),\n",
      "            new DmParams(12, 12, 12, 12, 5, 5, 7),\n",
      "            new DmParams(8, 18, 8, 18, 5, 5, 7),\n",
      "            new DmParams(14, 14, 14, 14, 8, 8, 10),\n",
      "            new DmParams(8, 32, 8, 16, 10, 10, 11),\n",
      "            new DmParams(16, 16, 16, 16, 12, 12, 12),\n",
      "            new DmParams(12, 26, 12, 26, 16, 16, 14),\n",
      "            new DmParams(18, 18, 18, 18, 18, 18, 14),\n",
      "            new DmParams(20, 20, 20, 20, 22, 22, 18),\n",
      "            new DmParams(12, 36, 12, 18, 22, 22, 18),\n",
      "            new DmParams(22, 22, 22, 22, 30, 30, 20),\n",
      "            new DmParams(16, 36, 16, 18, 32, 32, 24),\n",
      "            new DmParams(24, 24, 24, 24, 36, 36, 24),\n",
      "            new DmParams(26, 26, 26, 26, 44, 44, 28),\n",
      "            new DmParams(16, 48, 16, 24, 49, 49, 28),\n",
      "            new DmParams(32, 32, 16, 16, 62, 62, 36),\n",
      "            new DmParams(36, 36, 18, 18, 86, 86, 42),\n",
      "            new DmParams(40, 40, 20, 20, 114, 114, 48),\n",
      "            new DmParams(44, 44, 22, 22, 144, 144, 56),\n",
      "            new DmParams(48, 48, 24, 24, 174, 174, 68),\n",
      "            new DmParams(52, 52, 26, 26, 204, 102, 42),\n",
      "            new DmParams(64, 64, 16, 16, 280, 140, 56),\n",
      "            new DmParams(72, 72, 18, 18, 368, 92, 36),\n",
      "            new DmParams(80, 80, 20, 20, 456, 114, 48),\n",
      "            new DmParams(88, 88, 22, 22, 576, 144, 56),\n",
      "            new DmParams(96, 96, 24, 24, 696, 174, 68),\n",
      "            new DmParams(104, 104, 26, 26, 816, 136, 56),\n",
      "            new DmParams(120, 120, 20, 20, 1050, 175, 68),\n",
      "            new DmParams(132, 132, 22, 22, 1304, 163, 62),\n",
      "            new DmParams(144, 144, 24, 24, 1558, 156, 62)};\n",
      "\n",
      "    private static final String X12 = \"\\r*> 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n",
      "    private int extOut;\n",
      "    private short[] place;\n",
      "    private byte[] image;\n",
      "    private int height;\n",
      "    private int width;\n",
      "    private int ws;\n",
      "    private int options;\n",
      "    // value f[i][j] is the optimal amount of bytes required to encode substring(0, j)\n",
      "    private int[][] f;\n",
      "    // switchMode[i][j] = k means that when encoding j-th symbol with mode = i + 1,\n",
      "    // we have to encode the previous symbol with mode = k in order to get optimal f[i][j] value\n",
      "    private int[][] switchMode;\n",
      "\n",
      "    /**\n",
      "     * Creates an instance of this class.\n",
      "     */\n",
      "    public BarcodeDataMatrix() {\n",
      "        encoding = DEFAULT_DATA_MATRIX_ENCODING;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates an instance of {@link BarcodeDataMatrix}\n",
      "     *\n",
      "     * @param code the code to generate. It should be noted that all characters will be encoded using the default\n",
      "     *             encoding, ISO-8859-1\n",
      "     */\n",
      "    public BarcodeDataMatrix(String code) {\n",
      "        encoding = DEFAULT_DATA_MATRIX_ENCODING;\n",
      "        setCode(code);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates an instance of {@link BarcodeDataMatrix}\n",
      "     *\n",
      "     * @param code     the code to generate.\n",
      "     * @param encoding the encoding to use when generating the barcode\n",
      "     */\n",
      "    public BarcodeDataMatrix(String code, String encoding) {\n",
      "        this.encoding = encoding;\n",
      "        setCode(code);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * {@inheritDoc}\n",
      "     */\n",
      "    @Override\n",
      "    public Rectangle getBarcodeSize() {\n",
      "        return new Rectangle(0, 0, width + 2 * ws, height + 2 * ws);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * {@inheritDoc}\n",
      "     */\n",
      "    @Override\n",
      "    public Rectangle placeBarcode(PdfCanvas canvas, Color foreground) {\n",
      "        return placeBarcode(canvas, foreground, DEFAULT_MODULE_SIZE);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * {@inheritDoc}\n",
      "     */\n",
      "    @Override\n",
      "    public PdfFormXObject createFormXObject(Color foreground, PdfDocument document) {\n",
      "        return createFormXObject(foreground, DEFAULT_MODULE_SIZE, document);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates a PdfFormXObject with the barcode with given module width and module height.\n",
      "     *\n",
      "     * @param foreground The color of the pixels. It can be <CODE>null</CODE>\n",
      "     * @param moduleSide The side (width and height) of the pixels.\n",
      "     * @param document   The document\n",
      "     * @return the XObject.\n",
      "     */\n",
      "    public PdfFormXObject createFormXObject(Color foreground, float moduleSide, PdfDocument document) {\n",
      "        PdfFormXObject xObject = new PdfFormXObject((Rectangle) null);\n",
      "        Rectangle rect = placeBarcode(new PdfCanvas(xObject, document), foreground, moduleSide);\n",
      "        xObject.setBBox(new PdfArray(rect));\n",
      "\n",
      "        return xObject;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Places the barcode in a PdfCanvas\n",
      "     *\n",
      "     * @param canvas     the canvas to place the barcode on\n",
      "     * @param foreground The foreground color of the barcode\n",
      "     * @param moduleSide The side (width and height) of the pixels.\n",
      "     *\n",
      "     * @return the dimensions the barcode occupies\n",
      "     */\n",
      "    public Rectangle placeBarcode(PdfCanvas canvas, Color foreground, float moduleSide) {\n",
      "        if (image == null) {\n",
      "            return null;\n",
      "        }\n",
      "\n",
      "        if (foreground != null) {\n",
      "            canvas.setFillColor(foreground);\n",
      "        }\n",
      "\n",
      "        int w = width + 2 * ws;\n",
      "        int h = height + 2 * ws;\n",
      "        int stride = (w + 7) / 8;\n",
      "\n",
      "        for (int k = 0; k < h; ++k) {\n",
      "            int p = k * stride;\n",
      "            for (int j = 0; j < w; ++j) {\n",
      "                int b = image[p + j / 8] & 0xff;\n",
      "                b <<= j % 8;\n",
      "                if ((b & 0x80) != 0) {\n",
      "                    canvas.rectangle(j * moduleSide, (h - k - 1) * moduleSide, moduleSide, moduleSide);\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "        canvas.fill();\n",
      "\n",
      "        return getBarcodeSize();\n",
      "    }\n",
      "\n",
      "    // Android-Conversion-Skip-Block-Start (java.awt library isn't available on Android)\n",
      "    /**\n",
      "     * Creates a <CODE>java.awt.Image</CODE>. A successful call to the method <CODE>generate()</CODE>\n",
      "     * before calling this method is required.\n",
      "     *\n",
      "     * @param foreground the color of the bars\n",
      "     * @param background the color of the background\n",
      "     * @return the image\n",
      "     */\n",
      "    public java.awt.Image createAwtImage(java.awt.Color foreground, java.awt.Color background) {\n",
      "        if (image == null)\n",
      "            return null;\n",
      "        int f = foreground.getRGB();\n",
      "        int g = background.getRGB();\n",
      "        java.awt.Canvas canvas = new java.awt.Canvas();\n",
      "\n",
      "        int w = width + 2 * ws;\n",
      "        int h = height + 2 * ws;\n",
      "        int[] pix = new int[w * h];\n",
      "        int stride = (w + 7) / 8;\n",
      "        int ptr = 0;\n",
      "        for (int k = 0; k < h; ++k) {\n",
      "            int p = k * stride;\n",
      "            for (int j = 0; j < w; ++j) {\n",
      "                int b = image[p + j / 8] & 0xff;\n",
      "                b <<= j % 8;\n",
      "                pix[ptr++] = (b & 0x80) == 0 ? g : f;\n",
      "            }\n",
      "        }\n",
      "        java.awt.Image img = canvas.createImage(new java.awt.image.MemoryImageSource(w, h, pix, 0, w));\n",
      "        return img;\n",
      "    }\n",
      "    // Android-Conversion-Skip-Block-End\n",
      "\t\n",
      "    /**\n",
      "     * Gets the barcode size\n",
      "     * @param moduleHeight The height of the module\n",
      "     * @param moduleWidth  The width of the module\n",
      "     * @return The size of the barcode\n",
      "     */\n",
      "    public Rectangle getBarcodeSize(float moduleHeight, float moduleWidth) {\n",
      "        return new Rectangle(0, 0, (width + 2 * ws) * moduleHeight, (height + 2 * ws) * moduleWidth);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates a barcode. The <CODE>String</CODE> is interpreted with the ISO-8859-1 encoding\n",
      "     *\n",
      "     * @param text the text\n",
      "     * @return the status of the generation. It can be one of this values:\n",
      "     *\n",
      "     * <CODE>DM_NO_ERROR</CODE> - no error.<br>\n",
      "     * <CODE>DM_ERROR_TEXT_TOO_BIG</CODE> - the text is too big for the symbology capabilities.<br>\n",
      "     * <CODE>DM_ERROR_INVALID_SQUARE</CODE> - the dimensions given for the symbol are illegal.<br>\n",
      "     * <CODE>DM_ERROR_EXTENSION</CODE> - an error was while parsing an extension.\n",
      "     */\n",
      "    public int setCode(String text) {\n",
      "        byte[] t;\n",
      "        try {\n",
      "            t = text.getBytes(encoding);\n",
      "        } catch (UnsupportedEncodingException exc) {\n",
      "            throw new IllegalArgumentException(\"text has to be encoded in iso-8859-1\");\n",
      "        }\n",
      "        return setCode(t, 0, t.length);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates a barcode.\n",
      "     *\n",
      "     * @param text       the text\n",
      "     * @param textOffset the offset to the start of the text\n",
      "     * @param textSize   the text size\n",
      "     * @return the status of the generation. It can be one of this values:\n",
      "     *\n",
      "     * <CODE>DM_NO_ERROR</CODE> - no error.<br>\n",
      "     * <CODE>DM_ERROR_TEXT_TOO_BIG</CODE> - the text is too big for the symbology capabilities.<br>\n",
      "     * <CODE>DM_ERROR_INVALID_SQUARE</CODE> - the dimensions given for the symbol are illegal.<br>\n",
      "     * <CODE>DM_ERROR_EXTENSION</CODE> - an error was while parsing an extension.\n",
      "     */\n",
      "    public int setCode(byte[] text, int textOffset, int textSize) {\n",
      "        if (textOffset < 0) {\n",
      "            throw new IndexOutOfBoundsException(\"\" + textOffset);\n",
      "        }\n",
      "        if (textOffset + textSize > text.length || textSize < 0) {\n",
      "            throw new IndexOutOfBoundsException(\"\" + textSize);\n",
      "        }\n",
      "        int extCount, e, k, full;\n",
      "        DmParams dm, last;\n",
      "        byte[] data = new byte[2500];\n",
      "        extOut = 0;\n",
      "        extCount = processExtensions(text, textOffset, textSize, data);\n",
      "        if (extCount < 0) {\n",
      "            return DM_ERROR_EXTENSION;\n",
      "        }\n",
      "        e = -1;\n",
      "        f = new int[6][textSize - extOut];\n",
      "        switchMode = new int[6][textSize - extOut];\n",
      "        if (height == 0 || width == 0) {\n",
      "            last = dmSizes[dmSizes.length - 1];\n",
      "            e = getEncodation(text, textOffset + extOut, textSize - extOut, data, extCount, last.dataSize - extCount, options, false);\n",
      "            if (e < 0) {\n",
      "                return DM_ERROR_TEXT_TOO_BIG;\n",
      "            }\n",
      "            e += extCount;\n",
      "            for (k = 0; k < dmSizes.length; ++k) {\n",
      "                if (dmSizes[k].dataSize >= e)\n",
      "                    break;\n",
      "            }\n",
      "            dm = dmSizes[k];\n",
      "            height = dm.height;\n",
      "            width = dm.width;\n",
      "        } else {\n",
      "            for (k = 0; k < dmSizes.length; ++k) {\n",
      "                if (height == dmSizes[k].height && width == dmSizes[k].width)\n",
      "                    break;\n",
      "            }\n",
      "            if (k == dmSizes.length) {\n",
      "                return DM_ERROR_INVALID_SQUARE;\n",
      "            }\n",
      "            dm = dmSizes[k];\n",
      "            e = getEncodation(text, textOffset + extOut, textSize - extOut, data, extCount, dm.dataSize - extCount, options, true);\n",
      "            if (e < 0) {\n",
      "                return DM_ERROR_TEXT_TOO_BIG;\n",
      "            }\n",
      "            e += extCount;\n",
      "        }\n",
      "        if ((options & DM_TEST) != 0) {\n",
      "            return DM_NO_ERROR;\n",
      "        }\n",
      "        image = new byte[(dm.width + 2 * ws + 7) / 8 * (dm.height + 2 * ws)];\n",
      "        makePadding(data, e, dm.dataSize - e);\n",
      "        place = Placement.doPlacement(dm.height - dm.height / dm.heightSection * 2, dm.width - dm.width / dm.widthSection * 2);\n",
      "        full = dm.dataSize + (dm.dataSize + 2) / dm.dataBlock * dm.errorBlock;\n",
      "        ReedSolomon.generateECC(data, dm.dataSize, dm.dataBlock, dm.errorBlock);\n",
      "        draw(data, full, dm);\n",
      "        return DM_NO_ERROR;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets the height of the barcode. Will contain the real height used after a successful call\n",
      "     * to <CODE>generate()</CODE>. This height doesn't include the whitespace border, if any.\n",
      "     *\n",
      "     * @return the height of the barcode\n",
      "     */\n",
      "    public int getHeight() {\n",
      "        return height;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Sets the height of the barcode. If the height is zero it will be calculated.\n",
      "     * This height doesn't include the whitespace border, if any.\n",
      "     *\n",
      "     * The allowed dimensions are (width, height):<p>\n",
      "     * 10, 10<br>\n",
      "     * 12, 12<br>\n",
      "     * 18, 8<br>\n",
      "     * 14, 14<br>\n",
      "     * 32, 8<br>\n",
      "     * 16, 16<br>\n",
      "     * 26, 12<br>\n",
      "     * 18, 18<br>\n",
      "     * 20, 20<br>\n",
      "     * 36, 12<br>\n",
      "     * 22, 22<br>\n",
      "     * 36, 16<br>\n",
      "     * 24, 24<br>\n",
      "     * 26, 26<br>\n",
      "     * 48, 16<br>\n",
      "     * 32, 32<br>\n",
      "     * 36, 36<br>\n",
      "     * 40, 40<br>\n",
      "     * 44, 44<br>\n",
      "     * 48, 48<br>\n",
      "     * 52, 52<br>\n",
      "     * 64, 64<br>\n",
      "     * 72, 72<br>\n",
      "     * 80, 80<br>\n",
      "     * 88, 88<br>\n",
      "     * 96, 96<br>\n",
      "     * 104, 104<br>\n",
      "     * 120, 120<br>\n",
      "     * 132, 132<br>\n",
      "     * 144, 144<br>\n",
      "     *\n",
      "     * @param height the height of the barcode\n",
      "     */\n",
      "    public void setHeight(int height) {\n",
      "        this.height = height;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets the width of the barcode. Will contain the real width used after a successful call\n",
      "     * to <CODE>generate()</CODE>. This width doesn't include the whitespace border, if any.\n",
      "     *\n",
      "     * @return the width of the barcode\n",
      "     */\n",
      "    public int getWidth() {\n",
      "        return width;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Sets the width of the barcode. If the width is zero it will be calculated.\n",
      "     * This width doesn't include the whitespace border, if any.\n",
      "     *\n",
      "     * The allowed dimensions are (width, height):<p>\n",
      "     * 10, 10<br>\n",
      "     * 12, 12<br>\n",
      "     * 18, 8<br>\n",
      "     * 14, 14<br>\n",
      "     * 32, 8<br>\n",
      "     * 16, 16<br>\n",
      "     * 26, 12<br>\n",
      "     * 18, 18<br>\n",
      "     * 20, 20<br>\n",
      "     * 36, 12<br>\n",
      "     * 22, 22<br>\n",
      "     * 36, 16<br>\n",
      "     * 24, 24<br>\n",
      "     * 26, 26<br>\n",
      "     * 48, 16<br>\n",
      "     * 32, 32<br>\n",
      "     * 36, 36<br>\n",
      "     * 40, 40<br>\n",
      "     * 44, 44<br>\n",
      "     * 48, 48<br>\n",
      "     * 52, 52<br>\n",
      "     * 64, 64<br>\n",
      "     * 72, 72<br>\n",
      "     * 80, 80<br>\n",
      "     * 88, 88<br>\n",
      "     * 96, 96<br>\n",
      "     * 104, 104<br>\n",
      "     * 120, 120<br>\n",
      "     * 132, 132<br>\n",
      "     * 144, 144<br>\n",
      "     *\n",
      "     * @param width the width of the barcode\n",
      "     */\n",
      "    public void setWidth(int width) {\n",
      "        this.width = width;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets the whitespace border around the barcode.\n",
      "     *\n",
      "     * @return the whitespace border around the barcode\n",
      "     */\n",
      "    public int getWs() {\n",
      "        return ws;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Sets the whitespace border around the barcode.\n",
      "     *\n",
      "     * @param ws the whitespace border around the barcode\n",
      "     */\n",
      "    public void setWs(int ws) {\n",
      "        this.ws = ws;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets the barcode options.\n",
      "     *\n",
      "     * @return the barcode options\n",
      "     */\n",
      "    public int getOptions() {\n",
      "        return options;\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * Sets the options for the barcode generation. The options can be:<p>\n",
      "     * One of:<br>\n",
      "     * <CODE>DM_AUTO</CODE> - the best encodation will be used<br>\n",
      "     * <CODE>DM_ASCII</CODE> - ASCII encodation<br>\n",
      "     * <CODE>DM_C40</CODE> - C40 encodation<br>\n",
      "     * <CODE>DM_TEXT</CODE> - TEXT encodation<br>\n",
      "     * <CODE>DM_B256</CODE> - binary encodation<br>\n",
      "     * <CODE>DM_X12</CODE> - X12 encodation<br>\n",
      "     * <CODE>DM_EDIFACT</CODE> - EDIFACT encodation<br>\n",
      "     * <CODE>DM_RAW</CODE> - no encodation. The bytes provided are already encoded and will be added directly to the barcode, using padding if needed. It assumes that the encodation state is left at ASCII after the last byte.<br>\n",
      "     * <br>\n",
      "     * One of:<br>\n",
      "     * <CODE>DM_EXTENSION</CODE> - allows extensions to be embedded at the start of the text:<p>\n",
      "     * exxxxxx - ECI number xxxxxx<br>\n",
      "     * m5 - macro 5<br>\n",
      "     * m6 - macro 6<br>\n",
      "     * f - FNC1<br>\n",
      "     * saabbccccc - Structured Append, aa symbol position (1-16), bb total number of symbols (2-16), ccccc file identification (0-64515)<br>\n",
      "     * p - Reader programming<br>\n",
      "     * . - extension terminator<p>\n",
      "     * Example for a structured append, symbol 2 of 6, with FNC1 and ECI 000005. The actual text is \"Hello\".<p>\n",
      "     * s020600075fe000005.Hello<p>\n",
      "     * One of:<br>\n",
      "     * <CODE>DM_TEST</CODE> - doesn't generate the image but returns all the other information.\n",
      "     *\n",
      "     * @param options the barcode options\n",
      "     */\n",
      "    public void setOptions(int options) {\n",
      "        this.options = options;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * setting encoding for data matrix code ( default  encoding iso-8859-1)\n",
      "     *\n",
      "     * @param encoding encoding for data matrix code\n",
      "     */\n",
      "    public void setEncoding(String encoding) {\n",
      "        this.encoding = encoding;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * getting encoding for data matrix code\n",
      "     *\n",
      "     * @return encoding for data matrix code\n",
      "     */\n",
      "    public String getEncoding() {\n",
      "        return encoding;\n",
      "    }\n",
      "\n",
      "\n",
      "    private static void makePadding(byte[] data, int position, int count) {\n",
      "        //already in ascii mode\n",
      "        if (count <= 0)\n",
      "            return;\n",
      "        data[position++] = PADDING;\n",
      "        while (--count > 0) {\n",
      "            int t = 129 + (position + 1) * 149 % 253 + 1;\n",
      "            if (t > 254)\n",
      "                t -= 254;\n",
      "            data[position++] = (byte) t;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private static boolean isDigit(int c) {\n",
      "        return c >= '0' && c <= '9';\n",
      "    }\n",
      "\n",
      "    // when symbolIndex is non-negative, textLength should equal 1. All other encodations behave the same way.\n",
      "    private int asciiEncodation(byte[] text, int textOffset, int textLength, byte[] data, int dataOffset, int dataLength, int symbolIndex, int prevEnc, int origDataOffset) {\n",
      "        int ptrIn, ptrOut, c;\n",
      "        ptrIn = textOffset;\n",
      "        ptrOut = dataOffset;\n",
      "        textLength += textOffset;\n",
      "        dataLength += dataOffset;\n",
      "        while (ptrIn < textLength) {\n",
      "            c = text[ptrIn++] & 0xff;\n",
      "            if (isDigit(c) && symbolIndex > 0 && prevEnc == DM_ASCII && isDigit(text[ptrIn - 2] & 0xff)\n",
      "                    && data[dataOffset - 1] > 48 && data[dataOffset - 1] < 59) {\n",
      "                data[ptrOut - 1] = (byte) (((text[ptrIn - 2] & 0xff) - '0') * 10 + c - '0' + 130);\n",
      "                return ptrOut - origDataOffset;\n",
      "            }\n",
      "            if (ptrOut >= dataLength)\n",
      "                return -1;\n",
      "            if (isDigit(c) && symbolIndex < 0 && ptrIn < textLength && isDigit(text[ptrIn] & 0xff)) {\n",
      "                data[ptrOut++] = (byte) ((c - '0') * 10 + (text[ptrIn++] & 0xff) - '0' + 130);\n",
      "            } else if (c > 127) {\n",
      "                if (ptrOut + 1 >= dataLength)\n",
      "                    return -1;\n",
      "                data[ptrOut++] = EXTENDED_ASCII;\n",
      "                data[ptrOut++] = (byte) (c - 128 + 1);\n",
      "            } else {\n",
      "                data[ptrOut++] = (byte) (c + 1);\n",
      "            }\n",
      "        }\n",
      "        return ptrOut - origDataOffset;\n",
      "    }\n",
      "\n",
      "    private int b256Encodation(byte[] text, int textOffset, int textLength, byte[] data, int dataOffset, int dataLength, int symbolIndex, int prevEnc, int origDataOffset) {\n",
      "        int minRequiredDataIncrement;\n",
      "        if (textLength == 0)\n",
      "            return 0;\n",
      "        int simulatedDataOffset = dataOffset;\n",
      "        if (prevEnc != DM_B256) {\n",
      "            if (textLength < 250 && textLength + 2 > dataLength)\n",
      "                return -1;\n",
      "            if (textLength >= 250 && textLength + 3 > dataLength)\n",
      "                return -1;\n",
      "            data[dataOffset] = LATCH_B256;\n",
      "        } else {\n",
      "            int latestModeEntry = symbolIndex - 1;\n",
      "            while (latestModeEntry > 0 && switchMode[DM_B256 - 1][latestModeEntry] == DM_B256) {\n",
      "                latestModeEntry--;\n",
      "            }\n",
      "            textLength = symbolIndex - latestModeEntry + 1;\n",
      "            if (textLength != 250 && 1 > dataLength)\n",
      "                return -1;\n",
      "            if (textLength == 250 && 2 > dataLength)\n",
      "                return -1;\n",
      "            simulatedDataOffset -= (textLength - 1) + (textLength < 250 ? 2 : 3);\n",
      "        }\n",
      "        if (textLength < 250) {\n",
      "            data[simulatedDataOffset + 1] = (byte) textLength;\n",
      "            minRequiredDataIncrement = prevEnc != DM_B256 ? 2 : 0;\n",
      "        } else if (textLength == 250 && prevEnc == DM_B256) {\n",
      "            data[simulatedDataOffset + 1] = (byte) (textLength / 250 + 249);\n",
      "            for (int i = dataOffset + 1; i > simulatedDataOffset + 2; i--)\n",
      "                data[i] = data[i - 1];\n",
      "            data[simulatedDataOffset + 2] = (byte) (textLength % 250);\n",
      "            minRequiredDataIncrement = 1;\n",
      "        } else {\n",
      "            data[simulatedDataOffset + 1] = (byte) (textLength / 250 + 249);\n",
      "            data[simulatedDataOffset + 2] = (byte) (textLength % 250);\n",
      "            minRequiredDataIncrement = prevEnc != DM_B256 ? 3 : 0;\n",
      "        }\n",
      "        if (prevEnc == DM_B256)\n",
      "            textLength = 1;\n",
      "        System.arraycopy(text, textOffset, data, minRequiredDataIncrement + dataOffset, textLength);\n",
      "        for (int j = prevEnc != DM_B256 ? dataOffset + 1 : dataOffset; j < minRequiredDataIncrement + textLength + dataOffset; ++j) {\n",
      "            randomizationAlgorithm255(data, j);\n",
      "        }\n",
      "        if (prevEnc == DM_B256)\n",
      "            randomizationAlgorithm255(data, simulatedDataOffset + 1);\n",
      "        return textLength + dataOffset + minRequiredDataIncrement - origDataOffset;\n",
      "    }\n",
      "\n",
      "    private void randomizationAlgorithm255(byte[] data, int j) {\n",
      "        int c = data[j] & 0xff;\n",
      "        int prn = 149 * (j + 1) % 255 + 1;\n",
      "        int tv = c + prn;\n",
      "        if (tv > 255)\n",
      "            tv -= 256;\n",
      "        data[j] = (byte) tv;\n",
      "    }\n",
      "\n",
      "    private int X12Encodation(byte[] text, int textOffset, int textLength, byte[] data, int dataOffset, int dataLength, int symbolIndex, int prevEnc, int origDataOffset) {\n",
      "        int ptrIn, ptrOut, count, k, n, ci;\n",
      "        boolean latch = true;\n",
      "        byte c;\n",
      "        if (textLength == 0)\n",
      "            return 0;\n",
      "        ptrIn = 0;\n",
      "        ptrOut = 0;\n",
      "        byte[] x = new byte[textLength];\n",
      "        count = 0;\n",
      "        for (; ptrIn < textLength; ++ptrIn) {\n",
      "            int i = X12.indexOf((char) text[ptrIn + textOffset]);\n",
      "            if (i >= 0) {\n",
      "                x[ptrIn] = (byte) i;\n",
      "                ++count;\n",
      "            } else {\n",
      "                x[ptrIn] = 100;\n",
      "                if (count >= 6)\n",
      "                    count -= count / 3 * 3;\n",
      "                for (k = 0; k < count; ++k)\n",
      "                    x[ptrIn - k - 1] = 100;\n",
      "                count = 0;\n",
      "            }\n",
      "        }\n",
      "        if (count >= 6)\n",
      "            count -= count / 3 * 3;\n",
      "        for (k = 0; k < count; ++k)\n",
      "            x[ptrIn - k - 1] = 100;\n",
      "        ptrIn = 0;\n",
      "        c = 0;\n",
      "        for (; ptrIn < textLength; ++ptrIn) {\n",
      "            c = x[ptrIn];\n",
      "            if (ptrOut > dataLength)\n",
      "                break;\n",
      "            if (c < 40) {\n",
      "                if (ptrIn == 0 && latch || ptrIn > 0 && x[ptrIn - 1] > 40)\n",
      "                    data[dataOffset + ptrOut++] = LATCH_X12;\n",
      "                if (ptrOut + 2 > dataLength)\n",
      "                    break;\n",
      "                n = 1600 * x[ptrIn] + 40 * x[ptrIn + 1] + x[ptrIn + 2] + 1;\n",
      "                data[dataOffset + ptrOut++] = (byte) (n / 256);\n",
      "                data[dataOffset + ptrOut++] = (byte) n;\n",
      "                ptrIn += 2;\n",
      "            } else {\n",
      "                boolean enterASCII = true;\n",
      "                if (symbolIndex <= 0) {\n",
      "                    if (ptrIn > 0 && x[ptrIn - 1] < 40)\n",
      "                        data[dataOffset + ptrOut++] = UNLATCH;\n",
      "                } else if (symbolIndex > 4 && prevEnc == DM_X12 && X12.indexOf((char) text[textOffset]) >= 0 && X12.indexOf((char) text[textOffset - 1]) >= 0) {\n",
      "                    int latestModeEntry = symbolIndex - 1;\n",
      "                    while (latestModeEntry > 0 && switchMode[DM_X12 - 1][latestModeEntry] == DM_X12\n",
      "                            && (X12.indexOf((char) text[textOffset - (symbolIndex - latestModeEntry + 1)])) >= 0) {\n",
      "                        latestModeEntry--;\n",
      "                    }\n",
      "                    int unlatch = -1;\n",
      "                    if (symbolIndex - latestModeEntry >= 5) {\n",
      "                        for (int i = 1; i <= symbolIndex - latestModeEntry; i++) {\n",
      "                            if (data[dataOffset - i] == UNLATCH) {\n",
      "                                unlatch = dataOffset - i;\n",
      "                                break;\n",
      "                            }\n",
      "                        }\n",
      "                        int amountOfEncodedWithASCII = unlatch >= 0 ? dataOffset - unlatch - 1 : symbolIndex - latestModeEntry;\n",
      "                        if (amountOfEncodedWithASCII % 3 == 2) {\n",
      "                            enterASCII = false;\n",
      "                            textLength = amountOfEncodedWithASCII + 1;\n",
      "                            textOffset -= amountOfEncodedWithASCII;\n",
      "                            dataLength += unlatch < 0 ? amountOfEncodedWithASCII : amountOfEncodedWithASCII + 1;\n",
      "                            dataOffset -= unlatch < 0 ? amountOfEncodedWithASCII : amountOfEncodedWithASCII + 1;\n",
      "                            ptrIn = -1;\n",
      "                            latch = unlatch != dataOffset;\n",
      "                            x = new byte[amountOfEncodedWithASCII + 1];\n",
      "                            for (int i = 0; i <= amountOfEncodedWithASCII; i++) {\n",
      "                                x[i] = (byte) X12.indexOf((char) text[textOffset + i]);\n",
      "                            }\n",
      "                        } else {\n",
      "                            x = new byte[1];\n",
      "                            x[0] = 100;\n",
      "                        }\n",
      "                    }\n",
      "                }\n",
      "                if (enterASCII) {\n",
      "                    int i = asciiEncodation(text, textOffset + ptrIn, 1, data, dataOffset + ptrOut, dataLength, -1, -1, origDataOffset);\n",
      "                    if (i < 0)\n",
      "                        return -1;\n",
      "                    if (data[dataOffset + ptrOut] == EXTENDED_ASCII)\n",
      "                        ptrOut++;\n",
      "                    ptrOut++;\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "        c = 100;\n",
      "        if (textLength > 0)\n",
      "            c = x[textLength - 1];\n",
      "        if (ptrIn != textLength)\n",
      "            return -1;\n",
      "        if (c < 40)\n",
      "            data[dataOffset + ptrOut++] = UNLATCH;\n",
      "        if (ptrOut > dataLength)\n",
      "            return -1;\n",
      "        return ptrOut + dataOffset - origDataOffset;\n",
      "    }\n",
      "\n",
      "    private int EdifactEncodation(byte[] text, int textOffset, int textLength, byte[] data, int dataOffset, int dataLength, int symbolIndex, int prevEnc, int origDataOffset, boolean sizeFixed) {\n",
      "        int ptrIn, ptrOut, edi, pedi, c;\n",
      "        if (textLength == 0)\n",
      "            return 0;\n",
      "        ptrIn = 0;\n",
      "        ptrOut = 0;\n",
      "        edi = 0;\n",
      "        pedi = 18;\n",
      "        boolean ascii = true;\n",
      "        int latestModeEntryActual = -1, latestModeEntryC40orX12 = -1, prevMode = -1;\n",
      "        if (prevEnc == DM_EDIFACT && ((text[textOffset] & 0xff & 0xe0) == 0x40 || (text[textOffset] & 0xff & 0xe0) == 0x20) && (text[textOffset] & 0xff) != '_'\n",
      "                && ((text[textOffset - 1] & 0xff & 0xe0) == 0x40 || (text[textOffset - 1] & 0xff & 0xe0) == 0x20) && (text[textOffset - 1] & 0xff) != '_') {\n",
      "            latestModeEntryActual = symbolIndex - 1;\n",
      "            while (latestModeEntryActual > 0 && switchMode[DM_EDIFACT - 1][latestModeEntryActual] == DM_EDIFACT) {\n",
      "                c = text[textOffset - (symbolIndex - latestModeEntryActual + 1)] & 0xff;\n",
      "                if (((c & 0xe0) == 0x40 || (c & 0xe0) == 0x20) && c != '_') {\n",
      "                    latestModeEntryActual--;\n",
      "                } else\n",
      "                    break;\n",
      "            }\n",
      "            prevMode = switchMode[DM_EDIFACT - 1][latestModeEntryActual] == DM_C40\n",
      "                    || switchMode[DM_EDIFACT - 1][latestModeEntryActual] == DM_X12 ? switchMode[DM_EDIFACT - 1][latestModeEntryActual] : -1;\n",
      "            if (prevMode > 0)\n",
      "                latestModeEntryC40orX12 = latestModeEntryActual;\n",
      "            while (prevMode > 0 && latestModeEntryC40orX12 > 0 && switchMode[prevMode - 1][latestModeEntryC40orX12] == prevMode) {\n",
      "                c = text[textOffset - (symbolIndex - latestModeEntryC40orX12 + 1)] & 0xff;\n",
      "                if (((c & 0xe0) == 0x40 || (c & 0xe0) == 0x20) && c != '_') {\n",
      "                    latestModeEntryC40orX12--;\n",
      "                } else {\n",
      "                    latestModeEntryC40orX12 = -1;\n",
      "                    break;\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "        int dataSize = dataOffset + dataLength;\n",
      "        boolean asciiOneSymbol = false;\n",
      "        if (symbolIndex != -1)\n",
      "            asciiOneSymbol = true;\n",
      "        int dataTaken = 0, dataRequired = 0;\n",
      "        if (latestModeEntryC40orX12 >= 0 && symbolIndex - latestModeEntryC40orX12 + 1 > 9) {\n",
      "            textLength = symbolIndex - latestModeEntryC40orX12 + 1;\n",
      "            dataTaken = 0;\n",
      "            dataRequired = 0;\n",
      "            dataRequired += 1 + (textLength / 4 * 3);\n",
      "            if (!sizeFixed && (symbolIndex == text.length - 1 || symbolIndex < 0) && textLength % 4 < 3) {\n",
      "                dataSize = Integer.MAX_VALUE;\n",
      "                for (int i = 0; i < dmSizes.length; ++i) {\n",
      "                    if (dmSizes[i].dataSize >= dataRequired + textLength % 4) {\n",
      "                        dataSize = dmSizes[i].dataSize;\n",
      "                        break;\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "            if (dataSize - dataOffset - dataRequired <= 2 && textLength % 4 <= 2)\n",
      "                dataRequired += (textLength % 4);\n",
      "            else {\n",
      "                dataRequired += (textLength % 4) + 1;\n",
      "                if (textLength % 4 == 3)\n",
      "                    dataRequired--;\n",
      "            }\n",
      "            for (int i = dataOffset - 1; i >= 0; i--) {\n",
      "                dataTaken++;\n",
      "                if (data[i] == (prevMode == DM_C40 ? LATCH_C40 : LATCH_X12)) {\n",
      "                    break;\n",
      "                }\n",
      "            }\n",
      "            if (dataRequired <= dataTaken) {\n",
      "                asciiOneSymbol = false;\n",
      "                textOffset -= textLength - 1;\n",
      "                dataOffset -= dataTaken;\n",
      "                dataLength += dataTaken;\n",
      "            }\n",
      "        } else if (latestModeEntryActual >= 0 && symbolIndex - latestModeEntryActual + 1 > 9) {\n",
      "            textLength = symbolIndex - latestModeEntryActual + 1;\n",
      "            dataRequired += 1 + (textLength / 4 * 3);\n",
      "            if (dataSize - dataOffset - dataRequired <= 2 && textLength % 4 <= 2)\n",
      "                dataRequired += (textLength % 4);\n",
      "            else {\n",
      "                dataRequired += (textLength % 4) + 1;\n",
      "                if (textLength % 4 == 3)\n",
      "                    dataRequired--;\n",
      "            }\n",
      "            int dataNewOffset = 0;\n",
      "            int latchEdi = -1;\n",
      "            for (int i = origDataOffset; i < dataOffset; i++)\n",
      "                if (data[i] == LATCH_EDIFACT && dataOffset - i <= dataRequired) {\n",
      "                    latchEdi = i;\n",
      "                    break;\n",
      "                }\n",
      "            if (latchEdi != -1) {\n",
      "                dataTaken += dataOffset - latchEdi;\n",
      "                if ((text[textOffset] & 0xff) > 127)\n",
      "                    dataTaken += 2;\n",
      "                else {\n",
      "                    if (isDigit(text[textOffset] & 0xff) && isDigit(text[textOffset - 1] & 0xff) &&\n",
      "                            data[dataOffset - 1] >= 49 && data[dataOffset - 1] <= 58) {\n",
      "                        dataTaken--;\n",
      "                    }\n",
      "                    dataTaken++;\n",
      "                }\n",
      "                dataNewOffset = dataOffset - latchEdi;\n",
      "            } else {\n",
      "                for (int j = symbolIndex - latestModeEntryActual; j >= 0; j--) {\n",
      "                    if ((text[textOffset - j] & 0xff) > 127)\n",
      "                        dataTaken += 2;\n",
      "                    else {\n",
      "                        if (j > 0 && isDigit(text[textOffset - j] & 0xff) && isDigit(text[textOffset - j + 1] & 0xff)) {\n",
      "                            if (j == 1)\n",
      "                                dataNewOffset = dataTaken;\n",
      "                            j--;\n",
      "                        }\n",
      "                        dataTaken++;\n",
      "                    }\n",
      "                    if (j == 1)\n",
      "                        dataNewOffset = dataTaken;\n",
      "                }\n",
      "            }\n",
      "            if (dataRequired <= dataTaken) {\n",
      "                asciiOneSymbol = false;\n",
      "                textOffset -= textLength - 1;\n",
      "                dataOffset -= dataNewOffset;\n",
      "                dataLength += dataNewOffset;\n",
      "            }\n",
      "        }\n",
      "        if (asciiOneSymbol) {\n",
      "            c = text[textOffset] & 0xff;\n",
      "            if (isDigit(c) && textOffset + ptrIn > 0 && isDigit(text[textOffset - 1] & 0xff)\n",
      "                    && prevEnc == DM_EDIFACT && data[dataOffset - 1] >= 49 && data[dataOffset - 1] <= 58) {\n",
      "                data[dataOffset + ptrOut - 1] = (byte) (((text[textOffset - 1] & 0xff) - '0') * 10 + c - '0' + 130);\n",
      "                return dataOffset - origDataOffset;\n",
      "            } else {\n",
      "                return asciiEncodation(text, textOffset + ptrIn, 1, data, dataOffset + ptrOut, dataLength, -1, -1, origDataOffset);\n",
      "            }\n",
      "        }\n",
      "        for (; ptrIn < textLength; ++ptrIn) {\n",
      "            c = text[ptrIn + textOffset] & 0xff;\n",
      "            if (((c & 0xe0) == 0x40 || (c & 0xe0) == 0x20) && c != '_') {\n",
      "                if (ascii) {\n",
      "                    if (ptrOut + 1 > dataLength)\n",
      "                        break;\n",
      "                    data[dataOffset + ptrOut++] = LATCH_EDIFACT;\n",
      "                    ascii = false;\n",
      "                }\n",
      "                c &= 0x3f;\n",
      "                edi |= c << pedi;\n",
      "                if (pedi == 0) {\n",
      "                    if (ptrOut + 3 > dataLength)\n",
      "                        break;\n",
      "                    data[dataOffset + ptrOut++] = (byte) (edi >> 16);\n",
      "                    data[dataOffset + ptrOut++] = (byte) (edi >> 8);\n",
      "                    data[dataOffset + ptrOut++] = (byte) edi;\n",
      "                    edi = 0;\n",
      "                    pedi = 18;\n",
      "                } else\n",
      "                    pedi -= 6;\n",
      "            } else {\n",
      "                if (!ascii) {\n",
      "                    edi |= ('_' & 0x3f) << pedi;\n",
      "                    if (ptrOut + 3 - pedi / 8 > dataLength)\n",
      "                        break;\n",
      "                    data[dataOffset + ptrOut++] = (byte) (edi >> 16);\n",
      "                    if (pedi <= 12)\n",
      "                        data[dataOffset + ptrOut++] = (byte) (edi >> 8);\n",
      "                    if (pedi <= 6)\n",
      "                        data[dataOffset + ptrOut++] = (byte) edi;\n",
      "                    ascii = true;\n",
      "                    pedi = 18;\n",
      "                    edi = 0;\n",
      "                }\n",
      "                if (isDigit(c) && textOffset + ptrIn > 0 && isDigit(text[textOffset + ptrIn - 1] & 0xff) &&\n",
      "                        prevEnc == DM_EDIFACT && data[dataOffset - 1] >= 49 && data[dataOffset - 1] <= 58) {\n",
      "                    data[dataOffset + ptrOut - 1] = (byte) (((text[textOffset - 1] & 0xff) - '0') * 10 + c - '0' + 130);\n",
      "                    ptrOut--;\n",
      "                } else {\n",
      "                    int i = asciiEncodation(text, textOffset + ptrIn, 1, data, dataOffset + ptrOut, dataLength, -1, -1, origDataOffset);\n",
      "                    if (i < 0)\n",
      "                        return -1;\n",
      "                    if (data[dataOffset + ptrOut] == EXTENDED_ASCII)\n",
      "                        ptrOut++;\n",
      "                    ptrOut++;\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "        if (ptrIn != textLength)\n",
      "            return -1;\n",
      "        if (!sizeFixed && (symbolIndex == text.length - 1 || symbolIndex < 0)) {\n",
      "            dataSize = Integer.MAX_VALUE;\n",
      "            for (int i = 0; i < dmSizes.length; ++i) {\n",
      "                if (dmSizes[i].dataSize >= dataOffset + ptrOut + (3 - pedi / 6)) {\n",
      "                    dataSize = dmSizes[i].dataSize;\n",
      "                    break;\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "        if (dataSize - dataOffset - ptrOut <= 2 && pedi >= 6) {\n",
      "            if (pedi != 18 && ptrOut + 2 - pedi / 8 > dataLength)\n",
      "                return -1;\n",
      "            if (pedi <= 12) {\n",
      "                byte val = (byte) ((edi >> 18) & 0x3F);\n",
      "                if ((val & 0x20) == 0)\n",
      "                    val |= 0x40;\n",
      "                data[dataOffset + ptrOut++] = (byte) (val + 1);\n",
      "            }\n",
      "            if (pedi <= 6) {\n",
      "                byte val = (byte) ((edi >> 12) & 0x3F);\n",
      "                if ((val & 0x20) == 0)\n",
      "                    val |= 0x40;\n",
      "                data[dataOffset + ptrOut++] = (byte) (val + 1);\n",
      "            }\n",
      "        } else if (!ascii) {\n",
      "            edi |= ('_' & 0x3f) << pedi;\n",
      "            if (ptrOut + 3 - pedi / 8 > dataLength)\n",
      "                return -1;\n",
      "            data[dataOffset + ptrOut++] = (byte) (edi >> 16);\n",
      "            if (pedi <= 12)\n",
      "                data[dataOffset + ptrOut++] = (byte) (edi >> 8);\n",
      "            if (pedi <= 6)\n",
      "                data[dataOffset + ptrOut++] = (byte) edi;\n",
      "        }\n",
      "        return ptrOut + dataOffset - origDataOffset;\n",
      "    }\n",
      "\n",
      "    private int C40OrTextEncodation(byte[] text, int textOffset, int textLength, byte[] data, int dataOffset, int dataLength, boolean c40, int symbolIndex, int prevEnc, int origDataOffset) {\n",
      "        int ptrIn, ptrOut, encPtr, last0, last1, i, a, c;\n",
      "        String basic, shift2, shift3;\n",
      "        if (textLength == 0)\n",
      "            return 0;\n",
      "        ptrIn = 0;\n",
      "        ptrOut = 0;\n",
      "        shift2 = \"!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_\";\n",
      "        if (c40) {\n",
      "            basic = \" 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n",
      "            shift3 = \"`abcdefghijklmnopqrstuvwxyz{|}~\\177\";\n",
      "        } else {\n",
      "            basic = \" 0123456789abcdefghijklmnopqrstuvwxyz\";\n",
      "            shift3 = \"`ABCDEFGHIJKLMNOPQRSTUVWXYZ{|}~\\177\";\n",
      "        }\n",
      "        boolean addLatch = true, usingASCII = false;\n",
      "        int mode = c40 ? DM_C40 : DM_TEXT;\n",
      "        if (prevEnc == mode) {\n",
      "            usingASCII = true;\n",
      "            int latestModeEntry = symbolIndex - 1;\n",
      "            while (latestModeEntry > 0 && switchMode[mode - 1][latestModeEntry] == mode) {\n",
      "                latestModeEntry--;\n",
      "            }\n",
      "            int unlatch = -1;\n",
      "            int dataAmountOfEncodedWithASCII = 0;\n",
      "            if (symbolIndex - latestModeEntry >= 5) {\n",
      "                for (i = symbolIndex - latestModeEntry; i > 0; i--) {\n",
      "                    c = text[textOffset - i] & 0xff;\n",
      "                    if (c > 127) {\n",
      "                        dataAmountOfEncodedWithASCII += 2;\n",
      "                    } else\n",
      "                        dataAmountOfEncodedWithASCII++;\n",
      "                }\n",
      "                for (i = 1; i <= dataAmountOfEncodedWithASCII; i++) {\n",
      "                    if (i > dataOffset)\n",
      "                        break;\n",
      "                    if (data[dataOffset - i] == UNLATCH) {\n",
      "                        unlatch = dataOffset - i;\n",
      "                        break;\n",
      "                    }\n",
      "                }\n",
      "                int amountOfEncodedWithASCII = 0;\n",
      "                if (unlatch >= 0)\n",
      "                    for (i = unlatch + 1; i < dataOffset; i++) {\n",
      "                        if (data[i] == EXTENDED_ASCII)\n",
      "                            i++;\n",
      "                        if (data[i] >= (byte) 129 && data[i] <= (byte) 229)\n",
      "                            amountOfEncodedWithASCII++;\n",
      "                        amountOfEncodedWithASCII++;\n",
      "                    }\n",
      "                else\n",
      "                    amountOfEncodedWithASCII = symbolIndex - latestModeEntry;\n",
      "                int dataOffsetNew = 0;\n",
      "                for (i = amountOfEncodedWithASCII; i > 0; i--) {\n",
      "                    int requiredCapacityForASCII = 0;\n",
      "                    int requiredCapacityForC40orText = 0;\n",
      "                    for (int j = i; j >= 0; j--) {\n",
      "                        c = text[textOffset - j] & 0xff;\n",
      "                        if (c > 127) {\n",
      "                            c -= 128;\n",
      "                            requiredCapacityForC40orText += 2;\n",
      "                        }\n",
      "                        requiredCapacityForC40orText += basic.indexOf((char) c) >= 0 ? 1 : 2;\n",
      "                        if (c > 127)\n",
      "                            requiredCapacityForASCII += 2;\n",
      "                        else {\n",
      "                            if (j > 0 && isDigit(c) && isDigit(text[textOffset - j + 1] & 0xff)) {\n",
      "                                requiredCapacityForC40orText += basic.indexOf((char) text[textOffset - j + 1]) >= 0 ? 1 : 2;\n",
      "                                j--;\n",
      "                                dataOffsetNew = requiredCapacityForASCII + 1;\n",
      "                            }\n",
      "                            requiredCapacityForASCII++;\n",
      "                        }\n",
      "                        if (j == 1)\n",
      "                            dataOffsetNew = requiredCapacityForASCII;\n",
      "                    }\n",
      "                    addLatch = (unlatch < 0) || ((dataOffset - requiredCapacityForASCII) != unlatch);\n",
      "                    if (requiredCapacityForC40orText % 3 == 0 &&\n",
      "                            requiredCapacityForC40orText / 3 * 2 + (addLatch ? 2 : 0) < requiredCapacityForASCII) {\n",
      "                        usingASCII = false;\n",
      "                        textLength = i + 1;\n",
      "                        textOffset -= i;\n",
      "                        dataOffset -= addLatch ? dataOffsetNew : dataOffsetNew + 1;\n",
      "                        dataLength += addLatch ? dataOffsetNew : dataOffsetNew + 1;\n",
      "                        break;\n",
      "                    }\n",
      "                    if (isDigit(text[textOffset - i] & 0xff) && isDigit(text[textOffset - i + 1] & 0xff))\n",
      "                        i--;\n",
      "                }\n",
      "            }\n",
      "        } else if (symbolIndex != -1) {\n",
      "            usingASCII = true;\n",
      "        }\n",
      "        if (dataOffset < 0) {\n",
      "            return -1;\n",
      "        }\n",
      "        if (usingASCII) {\n",
      "            return asciiEncodation(text, textOffset, 1, data, dataOffset, dataLength, prevEnc == mode ? 1 : -1, DM_ASCII, origDataOffset);\n",
      "        }\n",
      "        if (addLatch) {\n",
      "            data[dataOffset + ptrOut++] = c40 ? LATCH_C40 : LATCH_TEXT;\n",
      "        }\n",
      "        int[] enc = new int[textLength * 4 + 10];\n",
      "        encPtr = 0;\n",
      "        last0 = 0;\n",
      "        last1 = 0;\n",
      "        while (ptrIn < textLength) {\n",
      "            if (encPtr % 3 == 0) {\n",
      "                last0 = ptrIn;\n",
      "                last1 = encPtr;\n",
      "            }\n",
      "            c = text[textOffset + ptrIn++] & 0xff;\n",
      "            if (c > 127) {\n",
      "                c -= 128;\n",
      "                enc[encPtr++] = 1;\n",
      "                enc[encPtr++] = 30;\n",
      "            }\n",
      "            int idx = basic.indexOf((char) c);\n",
      "            if (idx >= 0) {\n",
      "                enc[encPtr++] = idx + 3;\n",
      "            } else if (c < 32) {\n",
      "                enc[encPtr++] = 0;\n",
      "                enc[encPtr++] = c;\n",
      "            } else if ((idx = shift2.indexOf((char) c)) >= 0) {\n",
      "                enc[encPtr++] = 1;\n",
      "                enc[encPtr++] = idx;\n",
      "            } else if ((idx = shift3.indexOf((char) c)) >= 0) {\n",
      "                enc[encPtr++] = 2;\n",
      "                enc[encPtr++] = idx;\n",
      "            }\n",
      "        }\n",
      "        if (encPtr % 3 != 0) {\n",
      "            ptrIn = last0;\n",
      "            encPtr = last1;\n",
      "        }\n",
      "        if (encPtr / 3 * 2 > dataLength - 2) {\n",
      "            return -1;\n",
      "        }\n",
      "        i = 0;\n",
      "        for (; i < encPtr; i += 3) {\n",
      "            a = 1600 * enc[i] + 40 * enc[i + 1] + enc[i + 2] + 1;\n",
      "            data[dataOffset + ptrOut++] = (byte) (a / 256);\n",
      "            data[dataOffset + ptrOut++] = (byte) a;\n",
      "        }\n",
      "        if (dataLength - ptrOut > 2)\n",
      "            data[dataOffset + ptrOut++] = UNLATCH;\n",
      "        if (symbolIndex < 0 && textLength > ptrIn) {\n",
      "            i = asciiEncodation(text, textOffset + ptrIn, textLength - ptrIn, data, dataOffset + ptrOut, dataLength - ptrOut, -1, -1, origDataOffset);\n",
      "            return i;\n",
      "        }\n",
      "        return ptrOut + dataOffset - origDataOffset;\n",
      "    }\n",
      "\n",
      "    private void setBit(int x, int y, int xByte) {\n",
      "        image[y * xByte + x / 8] |= (byte) (128 >> (x & 7));\n",
      "    }\n",
      "\n",
      "    private void draw(byte[] data, int dataSize, DmParams dm) {\n",
      "        int i, j, p, x, y, xs, ys, z;\n",
      "        int xByte = (dm.width + ws * 2 + 7) / 8;\n",
      "        Arrays.fill(image, (byte) 0);\n",
      "        //alignment patterns\n",
      "        //dotted horizontal line\n",
      "        for (i = ws; i < dm.height + ws; i += dm.heightSection) {\n",
      "            for (j = ws; j < dm.width + ws; j += 2) {\n",
      "                setBit(j, i, xByte);\n",
      "            }\n",
      "        }\n",
      "        //solid horizontal line\n",
      "        for (i = dm.heightSection - 1 + ws; i < dm.height + ws; i += dm.heightSection) {\n",
      "            for (j = ws; j < dm.width + ws; ++j) {\n",
      "                setBit(j, i, xByte);\n",
      "            }\n",
      "        }\n",
      "        //solid vertical line\n",
      "        for (i = ws; i < dm.width + ws; i += dm.widthSection) {\n",
      "            for (j = ws; j < dm.height + ws; ++j) {\n",
      "                setBit(i, j, xByte);\n",
      "            }\n",
      "        }\n",
      "        //dotted vertical line\n",
      "        for (i = dm.widthSection - 1 + ws; i < dm.width + ws; i += dm.widthSection) {\n",
      "            for (j = 1 + ws; j < dm.height + ws; j += 2) {\n",
      "                setBit(i, j, xByte);\n",
      "            }\n",
      "        }\n",
      "        p = 0;\n",
      "        for (ys = 0; ys < dm.height; ys += dm.heightSection) {\n",
      "            for (y = 1; y < dm.heightSection - 1; ++y) {\n",
      "                for (xs = 0; xs < dm.width; xs += dm.widthSection) {\n",
      "                    for (x = 1; x < dm.widthSection - 1; ++x) {\n",
      "                        z = place[p++];\n",
      "                        if (z == 1 || z > 1 && (data[z / 8 - 1] & 0xff & 128 >> z % 8) != 0)\n",
      "                            setBit(x + xs + ws, y + ys + ws, xByte);\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private static int minValueInColumn(int[][] array, int column) {\n",
      "        int min = Integer.MAX_VALUE;\n",
      "        for (int i = 0; i < 6; i++)\n",
      "            if (array[i][column] < min && array[i][column] >= 0)\n",
      "                min = array[i][column];\n",
      "        return min != Integer.MAX_VALUE ? min : -1;\n",
      "    }\n",
      "\n",
      "    private static int valuePositionInColumn(int[][] array, int column, int value) {\n",
      "        for (int i = 0; i < 6; i++)\n",
      "            if (array[i][column] == value)\n",
      "                return i;\n",
      "        return -1;\n",
      "    }\n",
      "\n",
      "    private void solveFAndSwitchMode(int[] forMin, int mode, int currIndex) {\n",
      "        if (forMin[mode] >= 0 && f[mode][currIndex - 1] >= 0) {\n",
      "            f[mode][currIndex] = forMin[mode];\n",
      "            switchMode[mode][currIndex] = mode + 1;\n",
      "        } else {\n",
      "            f[mode][currIndex] = Integer.MAX_VALUE;\n",
      "        }\n",
      "        for (int i = 0; i < 6; i++) {\n",
      "            if (forMin[i] < f[mode][currIndex] && forMin[i] >= 0 && f[i][currIndex - 1] >= 0) {\n",
      "                f[mode][currIndex] = forMin[i];\n",
      "                switchMode[mode][currIndex] = i + 1;\n",
      "            }\n",
      "        }\n",
      "        if (f[mode][currIndex] == Integer.MAX_VALUE) {\n",
      "            f[mode][currIndex] = -1;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private int getEncodation(byte[] text, int textOffset, int textSize, byte[] data, int dataOffset, int dataSize, int options, boolean sizeFixed) {\n",
      "        int e;\n",
      "        if (dataSize < 0)\n",
      "            return -1;\n",
      "        options &= 7;\n",
      "        if (options == 0) {\n",
      "            if (textSize == 0)\n",
      "                return 0;\n",
      "            byte[][] dataDynamic = new byte[6][data.length];\n",
      "            for (int i = 0; i < 6; i++) {\n",
      "                System.arraycopy(data, 0, dataDynamic[i], 0, data.length);\n",
      "                switchMode[i][0] = i + 1;\n",
      "            }\n",
      "            f[0][0] = asciiEncodation(text, textOffset, 1, dataDynamic[0], dataOffset, dataSize, 0, -1, dataOffset);\n",
      "            f[1][0] = C40OrTextEncodation(text, textOffset, 1, dataDynamic[1], dataOffset, dataSize, true, 0, -1, dataOffset);\n",
      "            f[2][0] = C40OrTextEncodation(text, textOffset, 1, dataDynamic[2], dataOffset, dataSize, false, 0, -1, dataOffset);\n",
      "            f[3][0] = b256Encodation(text, textOffset, 1, dataDynamic[3], dataOffset, dataSize, 0, -1, dataOffset);\n",
      "            f[4][0] = X12Encodation(text, textOffset, 1, dataDynamic[4], dataOffset, dataSize, 0, -1, dataOffset);\n",
      "            f[5][0] = EdifactEncodation(text, textOffset, 1, dataDynamic[5], dataOffset, dataSize, 0, -1, dataOffset, sizeFixed);\n",
      "            for (int i = 1; i < textSize; i++) {\n",
      "                int tempForMin[] = new int[6];\n",
      "                for (int currEnc = 0; currEnc < 6; currEnc++) {\n",
      "                    byte[][] dataDynamicInner = new byte[6][data.length];\n",
      "                    for (int prevEnc = 0; prevEnc < 6; prevEnc++) {\n",
      "                        System.arraycopy(dataDynamic[prevEnc], 0, dataDynamicInner[prevEnc], 0, data.length);\n",
      "                        if (f[prevEnc][i - 1] < 0)\n",
      "                            tempForMin[prevEnc] = -1;\n",
      "                        else {\n",
      "                            if (currEnc == 0)\n",
      "                                tempForMin[prevEnc] = asciiEncodation(text, textOffset + i, 1, dataDynamicInner[prevEnc], f[prevEnc][i - 1] + dataOffset, dataSize - f[prevEnc][i - 1], i, prevEnc + 1, dataOffset);\n",
      "                            if (currEnc == 1)\n",
      "                                tempForMin[prevEnc] = C40OrTextEncodation(text, textOffset + i, 1, dataDynamicInner[prevEnc], f[prevEnc][i - 1] + dataOffset, dataSize - f[prevEnc][i - 1], true, i, prevEnc + 1, dataOffset);\n",
      "                            if (currEnc == 2)\n",
      "                                tempForMin[prevEnc] = C40OrTextEncodation(text, textOffset + i, 1, dataDynamicInner[prevEnc], f[prevEnc][i - 1] + dataOffset, dataSize - f[prevEnc][i - 1], false, i, prevEnc + 1, dataOffset);\n",
      "                            if (currEnc == 3)\n",
      "                                tempForMin[prevEnc] = b256Encodation(text, textOffset + i, 1, dataDynamicInner[prevEnc], f[prevEnc][i - 1] + dataOffset, dataSize - f[prevEnc][i - 1], i, prevEnc + 1, dataOffset);\n",
      "                            if (currEnc == 4)\n",
      "                                tempForMin[prevEnc] = X12Encodation(text, textOffset + i, 1, dataDynamicInner[prevEnc], f[prevEnc][i - 1] + dataOffset, dataSize - f[prevEnc][i - 1], i, prevEnc + 1, dataOffset);\n",
      "                            if (currEnc == 5)\n",
      "                                tempForMin[prevEnc] = EdifactEncodation(text, textOffset + i, 1, dataDynamicInner[prevEnc], f[prevEnc][i - 1] + dataOffset, dataSize - f[prevEnc][i - 1], i, prevEnc + 1, dataOffset, sizeFixed);\n",
      "                        }\n",
      "                    }\n",
      "                    solveFAndSwitchMode(tempForMin, currEnc, i);\n",
      "                    if (switchMode[currEnc][i] != 0)\n",
      "                        System.arraycopy(dataDynamicInner[switchMode[currEnc][i] - 1], 0, dataDynamic[currEnc], 0, data.length);\n",
      "                }\n",
      "            }\n",
      "            e = minValueInColumn(f, textSize - 1);\n",
      "            if (e > dataSize || e < 0)\n",
      "                return -1;\n",
      "            int bestDataDynamicResultIndex = valuePositionInColumn(f, textSize - 1, e);\n",
      "            System.arraycopy(dataDynamic[bestDataDynamicResultIndex], 0, data, 0, data.length);\n",
      "            return e;\n",
      "        }\n",
      "        switch (options) {\n",
      "            case DM_ASCII:\n",
      "                return asciiEncodation(text, textOffset, textSize, data, dataOffset, dataSize, -1, -1, dataOffset);\n",
      "            case DM_C40:\n",
      "                return C40OrTextEncodation(text, textOffset, textSize, data, dataOffset, dataSize, true, -1, -1, dataOffset);\n",
      "            case DM_TEXT:\n",
      "                return C40OrTextEncodation(text, textOffset, textSize, data, dataOffset, dataSize, false, -1, -1, dataOffset);\n",
      "            case DM_B256:\n",
      "                return b256Encodation(text, textOffset, textSize, data, dataOffset, dataSize, -1, -1, dataOffset);\n",
      "            case DM_X12:\n",
      "                return X12Encodation(text, textOffset, textSize, data, dataOffset, dataSize, -1, -1, dataOffset);\n",
      "            case DM_EDIFACT:\n",
      "                return EdifactEncodation(text, textOffset, textSize, data, dataOffset, dataSize, -1, -1, dataOffset, sizeFixed);\n",
      "            case DM_RAW:\n",
      "                if (textSize > dataSize)\n",
      "                    return -1;\n",
      "                System.arraycopy(text, textOffset, data, dataOffset, textSize);\n",
      "                return textSize;\n",
      "        }\n",
      "        return -1;\n",
      "    }\n",
      "\n",
      "    private static int getNumber(byte[] text, int ptrIn, int n) {\n",
      "        int v, j, c;\n",
      "        v = 0;\n",
      "        for (j = 0; j < n; ++j) {\n",
      "            c = text[ptrIn++] & 0xff;\n",
      "            if (c < '0' || c > '9')\n",
      "                return -1;\n",
      "            v = v * 10 + c - '0';\n",
      "        }\n",
      "        return v;\n",
      "    }\n",
      "\n",
      "    private int processExtensions(byte[] text, int textOffset, int textSize, byte[] data) {\n",
      "        int order, ptrIn, ptrOut, eci, fn, ft, fi, c;\n",
      "        if ((options & DM_EXTENSION) == 0)\n",
      "            return 0;\n",
      "        order = 0;\n",
      "        ptrIn = 0;\n",
      "        ptrOut = 0;\n",
      "        while (ptrIn < textSize) {\n",
      "            if (order > 20)\n",
      "                return -1;\n",
      "            c = text[textOffset + ptrIn++] & 0xff;\n",
      "            ++order;\n",
      "            switch (c) {\n",
      "                case '.':\n",
      "                    extOut = ptrIn;\n",
      "                    return ptrOut;\n",
      "                case 'e':\n",
      "                    if (ptrIn + 6 > textSize)\n",
      "                        return -1;\n",
      "                    eci = getNumber(text, textOffset + ptrIn, 6);\n",
      "                    if (eci < 0)\n",
      "                        return -1;\n",
      "                    ptrIn += 6;\n",
      "                    data[ptrOut++] = (byte) 241;\n",
      "                    if (eci < 127)\n",
      "                        data[ptrOut++] = (byte) (eci + 1);\n",
      "                    else if (eci < 16383) {\n",
      "                        data[ptrOut++] = (byte) ((eci - 127) / 254 + 128);\n",
      "                        data[ptrOut++] = (byte) ((eci - 127) % 254 + 1);\n",
      "                    } else {\n",
      "                        data[ptrOut++] = (byte) ((eci - 16383) / 64516 + 192);\n",
      "                        data[ptrOut++] = (byte) ((eci - 16383) / 254 % 254 + 1);\n",
      "                        data[ptrOut++] = (byte) ((eci - 16383) % 254 + 1);\n",
      "                    }\n",
      "                    break;\n",
      "                case 's':\n",
      "                    if (order != 1)\n",
      "                        return -1;\n",
      "                    if (ptrIn + 9 > textSize)\n",
      "                        return -1;\n",
      "                    fn = getNumber(text, textOffset + ptrIn, 2);\n",
      "                    if (fn <= 0 || fn > 16)\n",
      "                        return -1;\n",
      "                    ptrIn += 2;\n",
      "                    ft = getNumber(text, textOffset + ptrIn, 2);\n",
      "                    if (ft <= 1 || ft > 16)\n",
      "                        return -1;\n",
      "                    ptrIn += 2;\n",
      "                    fi = getNumber(text, textOffset + ptrIn, 5);\n",
      "                    if (fi < 0 || fn >= 64516)\n",
      "                        return -1;\n",
      "                    ptrIn += 5;\n",
      "                    data[ptrOut++] = (byte) 233;\n",
      "                    data[ptrOut++] = (byte) (fn - 1 << 4 | 17 - ft);\n",
      "                    data[ptrOut++] = (byte) (fi / 254 + 1);\n",
      "                    data[ptrOut++] = (byte) (fi % 254 + 1);\n",
      "                    break;\n",
      "                case 'p':\n",
      "                    if (order != 1)\n",
      "                        return -1;\n",
      "                    data[ptrOut++] = (byte) 234;\n",
      "                    break;\n",
      "                case 'm':\n",
      "                    if (order != 1)\n",
      "                        return -1;\n",
      "                    if (ptrIn + 1 > textSize)\n",
      "                        return -1;\n",
      "                    c = text[textOffset + ptrIn++] & 0xff;\n",
      "                    if (c != '5')\n",
      "                        return -1;\n",
      "                    data[ptrOut++] = (byte) 234;\n",
      "                    data[ptrOut++] = (byte) 236;\n",
      "                    break;\n",
      "                case 'f':\n",
      "                    if (order != 1 && (order != 2 || text[textOffset] != 's' && text[textOffset] != 'm'))\n",
      "                        return -1;\n",
      "                    data[ptrOut++] = (byte) 232;\n",
      "            }\n",
      "        }\n",
      "        return -1;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.barcodes;\n",
      "\n",
      "\n",
      "import com.itextpdf.kernel.exceptions.PdfException;\n",
      "import com.itextpdf.kernel.colors.ColorConstants;\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "import com.itextpdf.kernel.pdf.PdfPage;\n",
      "import com.itextpdf.kernel.pdf.PdfWriter;\n",
      "import com.itextpdf.kernel.pdf.canvas.PdfCanvas;\n",
      "import com.itextpdf.kernel.utils.CompareTool;\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.type.IntegrationTest;\n",
      "\n",
      "import java.io.IOException;\n",
      "import org.junit.AfterClass;\n",
      "import org.junit.Assert;\n",
      "import org.junit.BeforeClass;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(IntegrationTest.class)\n",
      "public class BarcodeDataMatrixTest extends ExtendedITextTest {\n",
      "\n",
      "    public static final String destinationFolder = \"./target/test/com/itextpdf/barcodes/BarcodeDataMatrix/\";\n",
      "    public static final String sourceFolder = \"./src/test/resources/com/itextpdf/barcodes/\";\n",
      "\n",
      "    @BeforeClass\n",
      "    public static void beforeClass() {\n",
      "        createOrClearDestinationFolder(destinationFolder);\n",
      "    }\n",
      "\n",
      "    @AfterClass\n",
      "    public static void afterClass() {\n",
      "        CompareTool.cleanup(destinationFolder);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcode01Test() throws IOException, PdfException, InterruptedException {\n",
      "        String filename = \"barcodeDataMatrix.pdf\";\n",
      "        PdfWriter writer = CompareTool.createTestPdfWriter(destinationFolder + filename);\n",
      "        PdfDocument document = new PdfDocument(writer);\n",
      "\n",
      "        PdfPage page = document.addNewPage();\n",
      "        PdfCanvas canvas = new PdfCanvas(page);\n",
      "        BarcodeDataMatrix barcode = new BarcodeDataMatrix();\n",
      "        barcode.setCode(\"AAAAAAAAAA;BBBBAAAA3;00028;BBBAA05;AAAA;AAAAAA;1234567;AQWXSZ;JEAN;;;;7894561;AQWXSZ;GEO;;;;1;1;1;1;0;0;1;0;1;0;0;0;1;0;1;0;0;0;0;0;0;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1\");\n",
      "        barcode.placeBarcode(canvas, ColorConstants.GREEN, 5);\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcode02Test() throws IOException, PdfException, InterruptedException {\n",
      "        String filename = \"barcodeDataMatrix2.pdf\";\n",
      "        PdfWriter writer = CompareTool.createTestPdfWriter(destinationFolder + filename);\n",
      "        PdfDocument document = new PdfDocument(writer);\n",
      "\n",
      "        PdfPage page1 = document.addNewPage();\n",
      "        PdfCanvas canvas = new PdfCanvas(page1);\n",
      "        BarcodeDataMatrix barcode2 = new BarcodeDataMatrix(\"\u0434\u0438\u043c\u0430\", \"UTF-8\");\n",
      "        barcode2.placeBarcode(canvas, ColorConstants.GREEN, 10);\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcode03Test() throws IOException, PdfException, InterruptedException {\n",
      "        String filename = \"barcodeDataMatrix3.pdf\";\n",
      "        PdfWriter writer = CompareTool.createTestPdfWriter(destinationFolder + filename);\n",
      "        PdfDocument document = new PdfDocument(writer);\n",
      "\n",
      "        PdfPage page1 = document.addNewPage();\n",
      "        PdfCanvas canvas = new PdfCanvas(page1);\n",
      "\n",
      "        BarcodeDataMatrix barcode3 = new BarcodeDataMatrix();\n",
      "        barcode3.setWidth(36);\n",
      "        barcode3.setHeight(12);\n",
      "        barcode3.setCode(\"AbcdFFghijklmnopqrstuWXSQ\");\n",
      "        barcode3.placeBarcode(canvas, ColorConstants.BLACK, 10);\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcode04Test() throws IOException, PdfException, InterruptedException {\n",
      "        String filename = \"barcodeDataMatrix4.pdf\";\n",
      "        PdfWriter writer = CompareTool.createTestPdfWriter(destinationFolder + filename);\n",
      "        PdfDocument document = new PdfDocument(writer);\n",
      "\n",
      "        PdfPage page1 = document.addNewPage();\n",
      "        PdfCanvas canvas = new PdfCanvas(page1);\n",
      "\n",
      "        BarcodeDataMatrix barcode3 = new BarcodeDataMatrix();\n",
      "        barcode3.setWidth(36);\n",
      "        barcode3.setHeight(12);\n",
      "        barcode3.setCode(\"01AbcdefgAbcdefg123451231231234\");\n",
      "        barcode3.placeBarcode(canvas, ColorConstants.BLACK, 10);\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcode05Test() throws IOException, PdfException, InterruptedException {\n",
      "        String filename = \"barcodeDataMatrix5.pdf\";\n",
      "        PdfWriter writer = CompareTool.createTestPdfWriter(destinationFolder + filename);\n",
      "        PdfDocument document = new PdfDocument(writer);\n",
      "\n",
      "        PdfPage page1 = document.addNewPage();\n",
      "        PdfCanvas canvas = new PdfCanvas(page1);\n",
      "\n",
      "        BarcodeDataMatrix barcode3 = new BarcodeDataMatrix();\n",
      "        barcode3.setWidth(40);\n",
      "        barcode3.setHeight(40);\n",
      "        barcode3.setCode(\"aaabbbcccdddAAABBBAAABBaaabbbcccdddaaa\");\n",
      "        barcode3.placeBarcode(canvas, ColorConstants.BLACK, 10);\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcode06Test() throws IOException, PdfException, InterruptedException {\n",
      "        String filename = \"barcodeDataMatrix6.pdf\";\n",
      "        PdfWriter writer = CompareTool.createTestPdfWriter(destinationFolder + filename);\n",
      "        PdfDocument document = new PdfDocument(writer);\n",
      "\n",
      "        PdfPage page1 = document.addNewPage();\n",
      "        PdfCanvas canvas = new PdfCanvas(page1);\n",
      "\n",
      "        BarcodeDataMatrix barcode3 = new BarcodeDataMatrix();\n",
      "        barcode3.setWidth(36);\n",
      "        barcode3.setHeight(12);\n",
      "        barcode3.setCode(\">>>\\r>>>THIS VERY TEXT>>\\r>\");\n",
      "        barcode3.placeBarcode(canvas, ColorConstants.BLACK, 10);\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcode07Test() {\n",
      "        BarcodeDataMatrix bc = new BarcodeDataMatrix();\n",
      "        bc.setOptions(BarcodeDataMatrix.DM_AUTO);\n",
      "        bc.setWidth(10);\n",
      "        bc.setHeight(10);\n",
      "\n",
      "        String aCode = \"aBCdeFG12\";\n",
      "\n",
      "        int result = bc.setCode(aCode);\n",
      "\n",
      "        Assert.assertEquals(result, BarcodeDataMatrix.DM_ERROR_TEXT_TOO_BIG);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcode08Test() {\n",
      "        BarcodeDataMatrix barcodeDataMatrix = new BarcodeDataMatrix();\n",
      "        barcodeDataMatrix.setWidth(18);\n",
      "        barcodeDataMatrix.setHeight(18);\n",
      "        int result = barcodeDataMatrix.setCode(\"AbcdFFghijklmnopqrstuWXSQ\");\n",
      "\n",
      "        Assert.assertEquals(BarcodeDataMatrix.DM_ERROR_TEXT_TOO_BIG, result);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcode09Test() {\n",
      "        BarcodeDataMatrix barcodeDataMatrix = new BarcodeDataMatrix();\n",
      "        barcodeDataMatrix.setWidth(17);\n",
      "        barcodeDataMatrix.setHeight(17);\n",
      "        int result = barcodeDataMatrix.setCode(\"AbcdFFghijklmnopqrstuWXSQ\");\n",
      "\n",
      "        Assert.assertEquals(BarcodeDataMatrix.DM_ERROR_INVALID_SQUARE, result);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcode10Test() {\n",
      "        BarcodeDataMatrix barcodeDataMatrix = new BarcodeDataMatrix();\n",
      "        barcodeDataMatrix.setWidth(26);\n",
      "        barcodeDataMatrix.setHeight(12);\n",
      "        int result = barcodeDataMatrix.setCode(\"AbcdFFghijklmnopqrstuWXSQ\");\n",
      "\n",
      "        Assert.assertEquals(BarcodeDataMatrix.DM_ERROR_TEXT_TOO_BIG, result);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcode11Test() {\n",
      "        BarcodeDataMatrix barcodeDataMatrix = new BarcodeDataMatrix();\n",
      "        barcodeDataMatrix.setWidth(18);\n",
      "        barcodeDataMatrix.setHeight(18);\n",
      "        byte[] str = \"AbcdFFghijklmnop\".getBytes();\n",
      "        int result = barcodeDataMatrix.setCode(str, 0, str.length);\n",
      "\n",
      "        Assert.assertEquals(BarcodeDataMatrix.DM_NO_ERROR, result);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcode12Test() {\n",
      "        BarcodeDataMatrix barcodeDataMatrix = new BarcodeDataMatrix();\n",
      "        barcodeDataMatrix.setWidth(18);\n",
      "        barcodeDataMatrix.setHeight(18);\n",
      "        byte[] str = \"AbcdFFghijklmnop\".getBytes();\n",
      "\n",
      "        Exception e = Assert.assertThrows(IndexOutOfBoundsException.class, () -> barcodeDataMatrix.setCode(str, -1, str.length));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcode13Test() {\n",
      "        BarcodeDataMatrix barcodeDataMatrix = new BarcodeDataMatrix();\n",
      "        barcodeDataMatrix.setWidth(18);\n",
      "        barcodeDataMatrix.setHeight(18);\n",
      "        byte[] str = \"AbcdFFghijklmnop\".getBytes();\n",
      "\n",
      "        Assert.assertThrows(IndexOutOfBoundsException.class, () -> barcodeDataMatrix.setCode(str, 0, str.length + 1));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcode14Test() {\n",
      "        BarcodeDataMatrix barcodeDataMatrix = new BarcodeDataMatrix();\n",
      "        barcodeDataMatrix.setWidth(18);\n",
      "        barcodeDataMatrix.setHeight(18);\n",
      "        byte[] str = \"AbcdFFghijklmnop\".getBytes();\n",
      "\n",
      "        Assert.assertThrows(IndexOutOfBoundsException.class, () -> barcodeDataMatrix.setCode(str, 0, -1));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcode15Test() {\n",
      "        BarcodeDataMatrix barcodeDataMatrix = new BarcodeDataMatrix();\n",
      "        barcodeDataMatrix.setWidth(18);\n",
      "        barcodeDataMatrix.setHeight(18);\n",
      "        byte[] str = \"AbcdFFghijklmnop\".getBytes();\n",
      "        int result = barcodeDataMatrix.setCode(str, str.length, 0);\n",
      "\n",
      "        Assert.assertEquals(BarcodeDataMatrix.DM_NO_ERROR, result);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcode16Test() throws IOException, PdfException, InterruptedException {\n",
      "        String filename = \"barcode16Test.pdf\";\n",
      "        PdfDocument document = new PdfDocument(CompareTool.createTestPdfWriter(destinationFolder + filename));\n",
      "\n",
      "        PdfCanvas canvas = new PdfCanvas(document.addNewPage());\n",
      "        BarcodeDataMatrix barcode = new BarcodeDataMatrix();\n",
      "        barcode.setCode(\"999999DILLERT XANG LIMITON 18               000\");\n",
      "        canvas.concatMatrix(1, 0, 0, 1, 100, 600);\n",
      "        barcode.placeBarcode(canvas, ColorConstants.BLACK, 3);\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder));\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "BarcodeDataMatrix::::getBarcodeSize()": [
        204,
        207
      ],
      "BarcodeDataMatrix::::createAwtImage(java.awt.Color,java.awt.Color)": [
        287,
        309
      ],
      "BarcodeDataMatrix::::getBarcodeSize(float,float)": [
        318,
        320
      ],
      "BarcodeDataMatrix::::setCode(java.lang.String)": [
        333,
        341
      ],
      "BarcodeDataMatrix::::setCode(byte[],int,int)": [
        356,
        413
      ],
      "BarcodeDataMatrix::::getHeight()": [
        421,
        423
      ],
      "BarcodeDataMatrix::::setHeight(int)": [
        463,
        465
      ],
      "BarcodeDataMatrix::::getWidth()": [
        473,
        475
      ],
      "BarcodeDataMatrix::::setWidth(int)": [
        515,
        517
      ],
      "BarcodeDataMatrix::::getWs()": [
        524,
        526
      ],
      "BarcodeDataMatrix::::setWs(int)": [
        533,
        535
      ],
      "BarcodeDataMatrix::::getOptions()": [
        542,
        544
      ],
      "BarcodeDataMatrix::::setOptions(int)": [
        575,
        577
      ],
      "BarcodeDataMatrix::::setEncoding(java.lang.String)": [
        584,
        586
      ],
      "BarcodeDataMatrix::::getEncoding()": [
        593,
        595
      ],
      "BarcodeDataMatrix::::makePadding(byte[],int,int)": [
        598,
        609
      ],
      "BarcodeDataMatrix::::isDigit(int)": [
        611,
        613
      ],
      "BarcodeDataMatrix::::asciiEncodation(byte[],int,int,byte[],int,int,int,int,int)": [
        616,
        643
      ],
      "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)": [
        645,
        691
      ],
      "BarcodeDataMatrix::::randomizationAlgorithm255(byte[],int)": [
        693,
        700
      ],
      "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)": [
        702,
        803
      ],
      "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)": [
        805,
        1025
      ],
      "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)": [
        1027,
        1178
      ],
      "BarcodeDataMatrix::::setBit(int,int,int)": [
        1180,
        1182
      ],
      "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)": [
        1184,
        1225
      ],
      "BarcodeDataMatrix::::minValueInColumn(int[][],int)": [
        1227,
        1233
      ],
      "BarcodeDataMatrix::::valuePositionInColumn(int[][],int,int)": [
        1235,
        1240
      ],
      "BarcodeDataMatrix::::solveFAndSwitchMode(int[],int,int)": [
        1242,
        1258
      ],
      "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)": [
        1260,
        1334
      ],
      "BarcodeDataMatrix::::getNumber(byte[],int,int)": [
        1336,
        1346
      ],
      "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])": [
        1348,
        1428
      ]
    },
    "test_method_lines_dic": {
      "BarcodeDataMatrixTest::::beforeClass()": [
        49,
        52
      ],
      "BarcodeDataMatrixTest::::afterClass()": [
        54,
        57
      ],
      "BarcodeDataMatrixTest::::barcode01Test()": [
        59,
        73
      ],
      "BarcodeDataMatrixTest::::barcode02Test()": [
        75,
        88
      ],
      "BarcodeDataMatrixTest::::barcode03Test()": [
        90,
        107
      ],
      "BarcodeDataMatrixTest::::barcode04Test()": [
        109,
        126
      ],
      "BarcodeDataMatrixTest::::barcode05Test()": [
        128,
        145
      ],
      "BarcodeDataMatrixTest::::barcode06Test()": [
        147,
        164
      ],
      "BarcodeDataMatrixTest::::barcode07Test()": [
        166,
        178
      ],
      "BarcodeDataMatrixTest::::barcode08Test()": [
        180,
        188
      ],
      "BarcodeDataMatrixTest::::barcode09Test()": [
        190,
        198
      ],
      "BarcodeDataMatrixTest::::barcode10Test()": [
        200,
        208
      ],
      "BarcodeDataMatrixTest::::barcode11Test()": [
        210,
        219
      ],
      "BarcodeDataMatrixTest::::barcode12Test()": [
        221,
        229
      ],
      "BarcodeDataMatrixTest::::barcode13Test()": [
        231,
        239
      ],
      "BarcodeDataMatrixTest::::barcode14Test()": [
        241,
        249
      ],
      "BarcodeDataMatrixTest::::barcode15Test()": [
        251,
        260
      ],
      "BarcodeDataMatrixTest::::barcode16Test()": [
        262,
        275
      ]
    },
    "reverse_method_lines_dic": {
      "204": "BarcodeDataMatrix::::getBarcodeSize()",
      "205": "BarcodeDataMatrix::::getBarcodeSize()",
      "206": "BarcodeDataMatrix::::getBarcodeSize()",
      "207": "BarcodeDataMatrix::::getBarcodeSize()",
      "287": "BarcodeDataMatrix::::createAwtImage(java.awt.Color,java.awt.Color)",
      "288": "BarcodeDataMatrix::::createAwtImage(java.awt.Color,java.awt.Color)",
      "289": "BarcodeDataMatrix::::createAwtImage(java.awt.Color,java.awt.Color)",
      "290": "BarcodeDataMatrix::::createAwtImage(java.awt.Color,java.awt.Color)",
      "291": "BarcodeDataMatrix::::createAwtImage(java.awt.Color,java.awt.Color)",
      "292": "BarcodeDataMatrix::::createAwtImage(java.awt.Color,java.awt.Color)",
      "293": "BarcodeDataMatrix::::createAwtImage(java.awt.Color,java.awt.Color)",
      "294": "BarcodeDataMatrix::::createAwtImage(java.awt.Color,java.awt.Color)",
      "295": "BarcodeDataMatrix::::createAwtImage(java.awt.Color,java.awt.Color)",
      "296": "BarcodeDataMatrix::::createAwtImage(java.awt.Color,java.awt.Color)",
      "297": "BarcodeDataMatrix::::createAwtImage(java.awt.Color,java.awt.Color)",
      "298": "BarcodeDataMatrix::::createAwtImage(java.awt.Color,java.awt.Color)",
      "299": "BarcodeDataMatrix::::createAwtImage(java.awt.Color,java.awt.Color)",
      "300": "BarcodeDataMatrix::::createAwtImage(java.awt.Color,java.awt.Color)",
      "301": "BarcodeDataMatrix::::createAwtImage(java.awt.Color,java.awt.Color)",
      "302": "BarcodeDataMatrix::::createAwtImage(java.awt.Color,java.awt.Color)",
      "303": "BarcodeDataMatrix::::createAwtImage(java.awt.Color,java.awt.Color)",
      "304": "BarcodeDataMatrix::::createAwtImage(java.awt.Color,java.awt.Color)",
      "305": "BarcodeDataMatrix::::createAwtImage(java.awt.Color,java.awt.Color)",
      "306": "BarcodeDataMatrix::::createAwtImage(java.awt.Color,java.awt.Color)",
      "307": "BarcodeDataMatrix::::createAwtImage(java.awt.Color,java.awt.Color)",
      "308": "BarcodeDataMatrix::::createAwtImage(java.awt.Color,java.awt.Color)",
      "309": "BarcodeDataMatrix::::createAwtImage(java.awt.Color,java.awt.Color)",
      "318": "BarcodeDataMatrix::::getBarcodeSize(float,float)",
      "319": "BarcodeDataMatrix::::getBarcodeSize(float,float)",
      "320": "BarcodeDataMatrix::::getBarcodeSize(float,float)",
      "333": "BarcodeDataMatrix::::setCode(java.lang.String)",
      "334": "BarcodeDataMatrix::::setCode(java.lang.String)",
      "335": "BarcodeDataMatrix::::setCode(java.lang.String)",
      "336": "BarcodeDataMatrix::::setCode(java.lang.String)",
      "337": "BarcodeDataMatrix::::setCode(java.lang.String)",
      "338": "BarcodeDataMatrix::::setCode(java.lang.String)",
      "339": "BarcodeDataMatrix::::setCode(java.lang.String)",
      "340": "BarcodeDataMatrix::::setCode(java.lang.String)",
      "341": "BarcodeDataMatrix::::setCode(java.lang.String)",
      "356": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "357": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "358": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "359": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "360": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "361": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "362": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "363": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "364": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "365": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "366": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "367": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "368": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "369": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "370": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "371": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "372": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "373": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "374": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "375": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "376": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "377": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "378": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "379": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "380": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "381": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "382": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "383": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "384": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "385": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "386": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "387": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "388": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "389": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "390": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "391": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "392": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "393": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "394": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "395": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "396": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "397": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "398": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "399": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "400": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "401": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "402": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "403": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "404": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "405": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "406": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "407": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "408": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "409": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "410": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "411": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "412": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "413": "BarcodeDataMatrix::::setCode(byte[],int,int)",
      "421": "BarcodeDataMatrix::::getHeight()",
      "422": "BarcodeDataMatrix::::getHeight()",
      "423": "BarcodeDataMatrix::::getHeight()",
      "463": "BarcodeDataMatrix::::setHeight(int)",
      "464": "BarcodeDataMatrix::::setHeight(int)",
      "465": "BarcodeDataMatrix::::setHeight(int)",
      "473": "BarcodeDataMatrix::::getWidth()",
      "474": "BarcodeDataMatrix::::getWidth()",
      "475": "BarcodeDataMatrix::::getWidth()",
      "515": "BarcodeDataMatrix::::setWidth(int)",
      "516": "BarcodeDataMatrix::::setWidth(int)",
      "517": "BarcodeDataMatrix::::setWidth(int)",
      "524": "BarcodeDataMatrix::::getWs()",
      "525": "BarcodeDataMatrix::::getWs()",
      "526": "BarcodeDataMatrix::::getWs()",
      "533": "BarcodeDataMatrix::::setWs(int)",
      "534": "BarcodeDataMatrix::::setWs(int)",
      "535": "BarcodeDataMatrix::::setWs(int)",
      "542": "BarcodeDataMatrix::::getOptions()",
      "543": "BarcodeDataMatrix::::getOptions()",
      "544": "BarcodeDataMatrix::::getOptions()",
      "575": "BarcodeDataMatrix::::setOptions(int)",
      "576": "BarcodeDataMatrix::::setOptions(int)",
      "577": "BarcodeDataMatrix::::setOptions(int)",
      "584": "BarcodeDataMatrix::::setEncoding(java.lang.String)",
      "585": "BarcodeDataMatrix::::setEncoding(java.lang.String)",
      "586": "BarcodeDataMatrix::::setEncoding(java.lang.String)",
      "593": "BarcodeDataMatrix::::getEncoding()",
      "594": "BarcodeDataMatrix::::getEncoding()",
      "595": "BarcodeDataMatrix::::getEncoding()",
      "598": "BarcodeDataMatrix::::makePadding(byte[],int,int)",
      "599": "BarcodeDataMatrix::::makePadding(byte[],int,int)",
      "600": "BarcodeDataMatrix::::makePadding(byte[],int,int)",
      "601": "BarcodeDataMatrix::::makePadding(byte[],int,int)",
      "602": "BarcodeDataMatrix::::makePadding(byte[],int,int)",
      "603": "BarcodeDataMatrix::::makePadding(byte[],int,int)",
      "604": "BarcodeDataMatrix::::makePadding(byte[],int,int)",
      "605": "BarcodeDataMatrix::::makePadding(byte[],int,int)",
      "606": "BarcodeDataMatrix::::makePadding(byte[],int,int)",
      "607": "BarcodeDataMatrix::::makePadding(byte[],int,int)",
      "608": "BarcodeDataMatrix::::makePadding(byte[],int,int)",
      "609": "BarcodeDataMatrix::::makePadding(byte[],int,int)",
      "611": "BarcodeDataMatrix::::isDigit(int)",
      "612": "BarcodeDataMatrix::::isDigit(int)",
      "613": "BarcodeDataMatrix::::isDigit(int)",
      "616": "BarcodeDataMatrix::::asciiEncodation(byte[],int,int,byte[],int,int,int,int,int)",
      "617": "BarcodeDataMatrix::::asciiEncodation(byte[],int,int,byte[],int,int,int,int,int)",
      "618": "BarcodeDataMatrix::::asciiEncodation(byte[],int,int,byte[],int,int,int,int,int)",
      "619": "BarcodeDataMatrix::::asciiEncodation(byte[],int,int,byte[],int,int,int,int,int)",
      "620": "BarcodeDataMatrix::::asciiEncodation(byte[],int,int,byte[],int,int,int,int,int)",
      "621": "BarcodeDataMatrix::::asciiEncodation(byte[],int,int,byte[],int,int,int,int,int)",
      "622": "BarcodeDataMatrix::::asciiEncodation(byte[],int,int,byte[],int,int,int,int,int)",
      "623": "BarcodeDataMatrix::::asciiEncodation(byte[],int,int,byte[],int,int,int,int,int)",
      "624": "BarcodeDataMatrix::::asciiEncodation(byte[],int,int,byte[],int,int,int,int,int)",
      "625": "BarcodeDataMatrix::::asciiEncodation(byte[],int,int,byte[],int,int,int,int,int)",
      "626": "BarcodeDataMatrix::::asciiEncodation(byte[],int,int,byte[],int,int,int,int,int)",
      "627": "BarcodeDataMatrix::::asciiEncodation(byte[],int,int,byte[],int,int,int,int,int)",
      "628": "BarcodeDataMatrix::::asciiEncodation(byte[],int,int,byte[],int,int,int,int,int)",
      "629": "BarcodeDataMatrix::::asciiEncodation(byte[],int,int,byte[],int,int,int,int,int)",
      "630": "BarcodeDataMatrix::::asciiEncodation(byte[],int,int,byte[],int,int,int,int,int)",
      "631": "BarcodeDataMatrix::::asciiEncodation(byte[],int,int,byte[],int,int,int,int,int)",
      "632": "BarcodeDataMatrix::::asciiEncodation(byte[],int,int,byte[],int,int,int,int,int)",
      "633": "BarcodeDataMatrix::::asciiEncodation(byte[],int,int,byte[],int,int,int,int,int)",
      "634": "BarcodeDataMatrix::::asciiEncodation(byte[],int,int,byte[],int,int,int,int,int)",
      "635": "BarcodeDataMatrix::::asciiEncodation(byte[],int,int,byte[],int,int,int,int,int)",
      "636": "BarcodeDataMatrix::::asciiEncodation(byte[],int,int,byte[],int,int,int,int,int)",
      "637": "BarcodeDataMatrix::::asciiEncodation(byte[],int,int,byte[],int,int,int,int,int)",
      "638": "BarcodeDataMatrix::::asciiEncodation(byte[],int,int,byte[],int,int,int,int,int)",
      "639": "BarcodeDataMatrix::::asciiEncodation(byte[],int,int,byte[],int,int,int,int,int)",
      "640": "BarcodeDataMatrix::::asciiEncodation(byte[],int,int,byte[],int,int,int,int,int)",
      "641": "BarcodeDataMatrix::::asciiEncodation(byte[],int,int,byte[],int,int,int,int,int)",
      "642": "BarcodeDataMatrix::::asciiEncodation(byte[],int,int,byte[],int,int,int,int,int)",
      "643": "BarcodeDataMatrix::::asciiEncodation(byte[],int,int,byte[],int,int,int,int,int)",
      "645": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "646": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "647": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "648": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "649": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "650": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "651": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "652": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "653": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "654": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "655": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "656": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "657": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "658": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "659": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "660": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "661": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "662": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "663": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "664": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "665": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "666": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "667": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "668": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "669": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "670": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "671": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "672": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "673": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "674": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "675": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "676": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "677": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "678": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "679": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "680": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "681": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "682": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "683": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "684": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "685": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "686": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "687": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "688": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "689": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "690": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "691": "BarcodeDataMatrix::::b256Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "693": "BarcodeDataMatrix::::randomizationAlgorithm255(byte[],int)",
      "694": "BarcodeDataMatrix::::randomizationAlgorithm255(byte[],int)",
      "695": "BarcodeDataMatrix::::randomizationAlgorithm255(byte[],int)",
      "696": "BarcodeDataMatrix::::randomizationAlgorithm255(byte[],int)",
      "697": "BarcodeDataMatrix::::randomizationAlgorithm255(byte[],int)",
      "698": "BarcodeDataMatrix::::randomizationAlgorithm255(byte[],int)",
      "699": "BarcodeDataMatrix::::randomizationAlgorithm255(byte[],int)",
      "700": "BarcodeDataMatrix::::randomizationAlgorithm255(byte[],int)",
      "702": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "703": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "704": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "705": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "706": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "707": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "708": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "709": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "710": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "711": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "712": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "713": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "714": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "715": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "716": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "717": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "718": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "719": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "720": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "721": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "722": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "723": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "724": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "725": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "726": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "727": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "728": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "729": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "730": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "731": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "732": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "733": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "734": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "735": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "736": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "737": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "738": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "739": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "740": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "741": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "742": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "743": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "744": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "745": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "746": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "747": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "748": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "749": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "750": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "751": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "752": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "753": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "754": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "755": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "756": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "757": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "758": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "759": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "760": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "761": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "762": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "763": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "764": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "765": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "766": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "767": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "768": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "769": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "770": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "771": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "772": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "773": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "774": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "775": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "776": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "777": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "778": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "779": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "780": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "781": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "782": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "783": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "784": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "785": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "786": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "787": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "788": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "789": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "790": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "791": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "792": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "793": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "794": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "795": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "796": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "797": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "798": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "799": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "800": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "801": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "802": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "803": "BarcodeDataMatrix::::X12Encodation(byte[],int,int,byte[],int,int,int,int,int)",
      "805": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "806": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "807": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "808": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "809": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "810": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "811": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "812": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "813": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "814": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "815": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "816": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "817": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "818": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "819": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "820": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "821": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "822": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "823": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "824": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "825": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "826": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "827": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "828": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "829": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "830": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "831": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "832": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "833": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "834": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "835": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "836": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "837": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "838": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "839": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "840": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "841": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "842": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "843": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "844": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "845": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "846": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "847": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "848": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "849": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "850": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "851": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "852": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "853": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "854": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "855": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "856": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "857": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "858": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "859": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "860": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "861": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "862": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "863": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "864": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "865": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "866": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "867": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "868": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "869": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "870": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "871": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "872": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "873": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "874": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "875": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "876": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "877": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "878": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "879": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "880": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "881": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "882": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "883": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "884": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "885": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "886": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "887": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "888": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "889": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "890": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "891": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "892": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "893": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "894": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "895": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "896": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "897": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "898": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "899": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "900": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "901": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "902": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "903": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "904": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "905": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "906": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "907": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "908": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "909": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "910": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "911": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "912": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "913": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "914": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "915": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "916": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "917": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "918": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "919": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "920": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "921": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "922": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "923": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "924": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "925": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "926": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "927": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "928": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "929": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "930": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "931": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "932": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "933": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "934": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "935": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "936": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "937": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "938": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "939": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "940": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "941": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "942": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "943": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "944": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "945": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "946": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "947": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "948": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "949": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "950": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "951": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "952": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "953": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "954": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "955": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "956": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "957": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "958": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "959": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "960": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "961": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "962": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "963": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "964": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "965": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "966": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "967": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "968": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "969": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "970": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "971": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "972": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "973": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "974": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "975": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "976": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "977": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "978": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "979": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "980": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "981": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "982": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "983": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "984": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "985": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "986": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "987": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "988": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "989": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "990": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "991": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "992": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "993": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "994": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "995": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "996": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "997": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "998": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "999": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "1000": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "1001": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "1002": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "1003": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "1004": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "1005": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "1006": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "1007": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "1008": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "1009": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "1010": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "1011": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "1012": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "1013": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "1014": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "1015": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "1016": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "1017": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "1018": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "1019": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "1020": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "1021": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "1022": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "1023": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "1024": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "1025": "BarcodeDataMatrix::::EdifactEncodation(byte[],int,int,byte[],int,int,int,int,int,boolean)",
      "1027": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1028": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1029": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1030": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1031": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1032": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1033": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1034": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1035": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1036": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1037": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1038": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1039": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1040": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1041": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1042": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1043": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1044": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1045": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1046": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1047": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1048": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1049": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1050": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1051": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1052": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1053": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1054": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1055": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1056": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1057": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1058": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1059": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1060": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1061": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1062": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1063": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1064": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1065": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1066": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1067": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1068": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1069": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1070": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1071": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1072": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1073": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1074": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1075": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1076": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1077": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1078": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1079": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1080": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1081": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1082": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1083": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1084": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1085": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1086": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1087": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1088": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1089": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1090": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1091": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1092": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1093": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1094": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1095": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1096": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1097": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1098": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1099": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1100": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1101": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1102": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1103": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1104": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1105": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1106": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1107": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1108": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1109": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1110": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1111": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1112": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1113": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1114": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1115": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1116": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1117": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1118": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1119": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1120": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1121": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1122": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1123": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1124": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1125": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1126": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1127": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1128": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1129": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1130": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1131": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1132": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1133": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1134": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1135": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1136": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1137": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1138": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1139": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1140": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1141": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1142": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1143": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1144": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1145": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1146": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1147": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1148": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1149": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1150": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1151": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1152": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1153": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1154": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1155": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1156": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1157": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1158": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1159": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1160": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1161": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1162": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1163": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1164": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1165": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1166": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1167": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1168": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1169": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1170": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1171": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1172": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1173": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1174": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1175": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1176": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1177": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1178": "BarcodeDataMatrix::::C40OrTextEncodation(byte[],int,int,byte[],int,int,boolean,int,int,int)",
      "1180": "BarcodeDataMatrix::::setBit(int,int,int)",
      "1181": "BarcodeDataMatrix::::setBit(int,int,int)",
      "1182": "BarcodeDataMatrix::::setBit(int,int,int)",
      "1184": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1185": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1186": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1187": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1188": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1189": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1190": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1191": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1192": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1193": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1194": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1195": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1196": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1197": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1198": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1199": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1200": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1201": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1202": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1203": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1204": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1205": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1206": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1207": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1208": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1209": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1210": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1211": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1212": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1213": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1214": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1215": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1216": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1217": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1218": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1219": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1220": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1221": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1222": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1223": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1224": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1225": "BarcodeDataMatrix::::draw(byte[],int,com.itextpdf.barcodes.dmcode.DmParams)",
      "1227": "BarcodeDataMatrix::::minValueInColumn(int[][],int)",
      "1228": "BarcodeDataMatrix::::minValueInColumn(int[][],int)",
      "1229": "BarcodeDataMatrix::::minValueInColumn(int[][],int)",
      "1230": "BarcodeDataMatrix::::minValueInColumn(int[][],int)",
      "1231": "BarcodeDataMatrix::::minValueInColumn(int[][],int)",
      "1232": "BarcodeDataMatrix::::minValueInColumn(int[][],int)",
      "1233": "BarcodeDataMatrix::::minValueInColumn(int[][],int)",
      "1235": "BarcodeDataMatrix::::valuePositionInColumn(int[][],int,int)",
      "1236": "BarcodeDataMatrix::::valuePositionInColumn(int[][],int,int)",
      "1237": "BarcodeDataMatrix::::valuePositionInColumn(int[][],int,int)",
      "1238": "BarcodeDataMatrix::::valuePositionInColumn(int[][],int,int)",
      "1239": "BarcodeDataMatrix::::valuePositionInColumn(int[][],int,int)",
      "1240": "BarcodeDataMatrix::::valuePositionInColumn(int[][],int,int)",
      "1242": "BarcodeDataMatrix::::solveFAndSwitchMode(int[],int,int)",
      "1243": "BarcodeDataMatrix::::solveFAndSwitchMode(int[],int,int)",
      "1244": "BarcodeDataMatrix::::solveFAndSwitchMode(int[],int,int)",
      "1245": "BarcodeDataMatrix::::solveFAndSwitchMode(int[],int,int)",
      "1246": "BarcodeDataMatrix::::solveFAndSwitchMode(int[],int,int)",
      "1247": "BarcodeDataMatrix::::solveFAndSwitchMode(int[],int,int)",
      "1248": "BarcodeDataMatrix::::solveFAndSwitchMode(int[],int,int)",
      "1249": "BarcodeDataMatrix::::solveFAndSwitchMode(int[],int,int)",
      "1250": "BarcodeDataMatrix::::solveFAndSwitchMode(int[],int,int)",
      "1251": "BarcodeDataMatrix::::solveFAndSwitchMode(int[],int,int)",
      "1252": "BarcodeDataMatrix::::solveFAndSwitchMode(int[],int,int)",
      "1253": "BarcodeDataMatrix::::solveFAndSwitchMode(int[],int,int)",
      "1254": "BarcodeDataMatrix::::solveFAndSwitchMode(int[],int,int)",
      "1255": "BarcodeDataMatrix::::solveFAndSwitchMode(int[],int,int)",
      "1256": "BarcodeDataMatrix::::solveFAndSwitchMode(int[],int,int)",
      "1257": "BarcodeDataMatrix::::solveFAndSwitchMode(int[],int,int)",
      "1258": "BarcodeDataMatrix::::solveFAndSwitchMode(int[],int,int)",
      "1260": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1261": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1262": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1263": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1264": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1265": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1266": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1267": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1268": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1269": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1270": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1271": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1272": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1273": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1274": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1275": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1276": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1277": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1278": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1279": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1280": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1281": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1282": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1283": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1284": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1285": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1286": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1287": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1288": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1289": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1290": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1291": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1292": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1293": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1294": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1295": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1296": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1297": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1298": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1299": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1300": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1301": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1302": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1303": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1304": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1305": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1306": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1307": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1308": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1309": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1310": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1311": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1312": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1313": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1314": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1315": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1316": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1317": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1318": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1319": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1320": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1321": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1322": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1323": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1324": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1325": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1326": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1327": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1328": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1329": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1330": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1331": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1332": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1333": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1334": "BarcodeDataMatrix::::getEncodation(byte[],int,int,byte[],int,int,int,boolean)",
      "1336": "BarcodeDataMatrix::::getNumber(byte[],int,int)",
      "1337": "BarcodeDataMatrix::::getNumber(byte[],int,int)",
      "1338": "BarcodeDataMatrix::::getNumber(byte[],int,int)",
      "1339": "BarcodeDataMatrix::::getNumber(byte[],int,int)",
      "1340": "BarcodeDataMatrix::::getNumber(byte[],int,int)",
      "1341": "BarcodeDataMatrix::::getNumber(byte[],int,int)",
      "1342": "BarcodeDataMatrix::::getNumber(byte[],int,int)",
      "1343": "BarcodeDataMatrix::::getNumber(byte[],int,int)",
      "1344": "BarcodeDataMatrix::::getNumber(byte[],int,int)",
      "1345": "BarcodeDataMatrix::::getNumber(byte[],int,int)",
      "1346": "BarcodeDataMatrix::::getNumber(byte[],int,int)",
      "1348": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1349": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1350": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1351": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1352": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1353": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1354": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1355": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1356": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1357": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1358": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1359": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1360": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1361": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1362": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1363": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1364": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1365": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1366": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1367": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1368": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1369": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1370": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1371": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1372": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1373": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1374": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1375": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1376": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1377": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1378": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1379": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1380": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1381": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1382": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1383": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1384": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1385": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1386": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1387": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1388": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1389": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1390": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1391": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1392": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1393": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1394": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1395": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1396": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1397": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1398": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1399": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1400": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1401": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1402": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1403": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1404": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1405": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1406": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1407": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1408": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1409": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1410": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1411": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1412": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1413": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1414": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1415": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1416": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1417": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1418": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1419": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1420": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1421": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1422": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1423": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1424": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1425": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1426": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1427": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])",
      "1428": "BarcodeDataMatrix::::processExtensions(byte[],int,int,byte[])"
    },
    "test_reverse_method_lines_dic": {
      "49": "BarcodeDataMatrixTest::::beforeClass()",
      "50": "BarcodeDataMatrixTest::::beforeClass()",
      "51": "BarcodeDataMatrixTest::::beforeClass()",
      "52": "BarcodeDataMatrixTest::::beforeClass()",
      "54": "BarcodeDataMatrixTest::::afterClass()",
      "55": "BarcodeDataMatrixTest::::afterClass()",
      "56": "BarcodeDataMatrixTest::::afterClass()",
      "57": "BarcodeDataMatrixTest::::afterClass()",
      "59": "BarcodeDataMatrixTest::::barcode01Test()",
      "60": "BarcodeDataMatrixTest::::barcode01Test()",
      "61": "BarcodeDataMatrixTest::::barcode01Test()",
      "62": "BarcodeDataMatrixTest::::barcode01Test()",
      "63": "BarcodeDataMatrixTest::::barcode01Test()",
      "64": "BarcodeDataMatrixTest::::barcode01Test()",
      "65": "BarcodeDataMatrixTest::::barcode01Test()",
      "66": "BarcodeDataMatrixTest::::barcode01Test()",
      "67": "BarcodeDataMatrixTest::::barcode01Test()",
      "68": "BarcodeDataMatrixTest::::barcode01Test()",
      "69": "BarcodeDataMatrixTest::::barcode01Test()",
      "70": "BarcodeDataMatrixTest::::barcode01Test()",
      "71": "BarcodeDataMatrixTest::::barcode01Test()",
      "72": "BarcodeDataMatrixTest::::barcode01Test()",
      "73": "BarcodeDataMatrixTest::::barcode01Test()",
      "75": "BarcodeDataMatrixTest::::barcode02Test()",
      "76": "BarcodeDataMatrixTest::::barcode02Test()",
      "77": "BarcodeDataMatrixTest::::barcode02Test()",
      "78": "BarcodeDataMatrixTest::::barcode02Test()",
      "79": "BarcodeDataMatrixTest::::barcode02Test()",
      "80": "BarcodeDataMatrixTest::::barcode02Test()",
      "81": "BarcodeDataMatrixTest::::barcode02Test()",
      "82": "BarcodeDataMatrixTest::::barcode02Test()",
      "83": "BarcodeDataMatrixTest::::barcode02Test()",
      "84": "BarcodeDataMatrixTest::::barcode02Test()",
      "85": "BarcodeDataMatrixTest::::barcode02Test()",
      "86": "BarcodeDataMatrixTest::::barcode02Test()",
      "87": "BarcodeDataMatrixTest::::barcode02Test()",
      "88": "BarcodeDataMatrixTest::::barcode02Test()",
      "90": "BarcodeDataMatrixTest::::barcode03Test()",
      "91": "BarcodeDataMatrixTest::::barcode03Test()",
      "92": "BarcodeDataMatrixTest::::barcode03Test()",
      "93": "BarcodeDataMatrixTest::::barcode03Test()",
      "94": "BarcodeDataMatrixTest::::barcode03Test()",
      "95": "BarcodeDataMatrixTest::::barcode03Test()",
      "96": "BarcodeDataMatrixTest::::barcode03Test()",
      "97": "BarcodeDataMatrixTest::::barcode03Test()",
      "98": "BarcodeDataMatrixTest::::barcode03Test()",
      "99": "BarcodeDataMatrixTest::::barcode03Test()",
      "100": "BarcodeDataMatrixTest::::barcode03Test()",
      "101": "BarcodeDataMatrixTest::::barcode03Test()",
      "102": "BarcodeDataMatrixTest::::barcode03Test()",
      "103": "BarcodeDataMatrixTest::::barcode03Test()",
      "104": "BarcodeDataMatrixTest::::barcode03Test()",
      "105": "BarcodeDataMatrixTest::::barcode03Test()",
      "106": "BarcodeDataMatrixTest::::barcode03Test()",
      "107": "BarcodeDataMatrixTest::::barcode03Test()",
      "109": "BarcodeDataMatrixTest::::barcode04Test()",
      "110": "BarcodeDataMatrixTest::::barcode04Test()",
      "111": "BarcodeDataMatrixTest::::barcode04Test()",
      "112": "BarcodeDataMatrixTest::::barcode04Test()",
      "113": "BarcodeDataMatrixTest::::barcode04Test()",
      "114": "BarcodeDataMatrixTest::::barcode04Test()",
      "115": "BarcodeDataMatrixTest::::barcode04Test()",
      "116": "BarcodeDataMatrixTest::::barcode04Test()",
      "117": "BarcodeDataMatrixTest::::barcode04Test()",
      "118": "BarcodeDataMatrixTest::::barcode04Test()",
      "119": "BarcodeDataMatrixTest::::barcode04Test()",
      "120": "BarcodeDataMatrixTest::::barcode04Test()",
      "121": "BarcodeDataMatrixTest::::barcode04Test()",
      "122": "BarcodeDataMatrixTest::::barcode04Test()",
      "123": "BarcodeDataMatrixTest::::barcode04Test()",
      "124": "BarcodeDataMatrixTest::::barcode04Test()",
      "125": "BarcodeDataMatrixTest::::barcode04Test()",
      "126": "BarcodeDataMatrixTest::::barcode04Test()",
      "128": "BarcodeDataMatrixTest::::barcode05Test()",
      "129": "BarcodeDataMatrixTest::::barcode05Test()",
      "130": "BarcodeDataMatrixTest::::barcode05Test()",
      "131": "BarcodeDataMatrixTest::::barcode05Test()",
      "132": "BarcodeDataMatrixTest::::barcode05Test()",
      "133": "BarcodeDataMatrixTest::::barcode05Test()",
      "134": "BarcodeDataMatrixTest::::barcode05Test()",
      "135": "BarcodeDataMatrixTest::::barcode05Test()",
      "136": "BarcodeDataMatrixTest::::barcode05Test()",
      "137": "BarcodeDataMatrixTest::::barcode05Test()",
      "138": "BarcodeDataMatrixTest::::barcode05Test()",
      "139": "BarcodeDataMatrixTest::::barcode05Test()",
      "140": "BarcodeDataMatrixTest::::barcode05Test()",
      "141": "BarcodeDataMatrixTest::::barcode05Test()",
      "142": "BarcodeDataMatrixTest::::barcode05Test()",
      "143": "BarcodeDataMatrixTest::::barcode05Test()",
      "144": "BarcodeDataMatrixTest::::barcode05Test()",
      "145": "BarcodeDataMatrixTest::::barcode05Test()",
      "147": "BarcodeDataMatrixTest::::barcode06Test()",
      "148": "BarcodeDataMatrixTest::::barcode06Test()",
      "149": "BarcodeDataMatrixTest::::barcode06Test()",
      "150": "BarcodeDataMatrixTest::::barcode06Test()",
      "151": "BarcodeDataMatrixTest::::barcode06Test()",
      "152": "BarcodeDataMatrixTest::::barcode06Test()",
      "153": "BarcodeDataMatrixTest::::barcode06Test()",
      "154": "BarcodeDataMatrixTest::::barcode06Test()",
      "155": "BarcodeDataMatrixTest::::barcode06Test()",
      "156": "BarcodeDataMatrixTest::::barcode06Test()",
      "157": "BarcodeDataMatrixTest::::barcode06Test()",
      "158": "BarcodeDataMatrixTest::::barcode06Test()",
      "159": "BarcodeDataMatrixTest::::barcode06Test()",
      "160": "BarcodeDataMatrixTest::::barcode06Test()",
      "161": "BarcodeDataMatrixTest::::barcode06Test()",
      "162": "BarcodeDataMatrixTest::::barcode06Test()",
      "163": "BarcodeDataMatrixTest::::barcode06Test()",
      "164": "BarcodeDataMatrixTest::::barcode06Test()",
      "166": "BarcodeDataMatrixTest::::barcode07Test()",
      "167": "BarcodeDataMatrixTest::::barcode07Test()",
      "168": "BarcodeDataMatrixTest::::barcode07Test()",
      "169": "BarcodeDataMatrixTest::::barcode07Test()",
      "170": "BarcodeDataMatrixTest::::barcode07Test()",
      "171": "BarcodeDataMatrixTest::::barcode07Test()",
      "172": "BarcodeDataMatrixTest::::barcode07Test()",
      "173": "BarcodeDataMatrixTest::::barcode07Test()",
      "174": "BarcodeDataMatrixTest::::barcode07Test()",
      "175": "BarcodeDataMatrixTest::::barcode07Test()",
      "176": "BarcodeDataMatrixTest::::barcode07Test()",
      "177": "BarcodeDataMatrixTest::::barcode07Test()",
      "178": "BarcodeDataMatrixTest::::barcode07Test()",
      "180": "BarcodeDataMatrixTest::::barcode08Test()",
      "181": "BarcodeDataMatrixTest::::barcode08Test()",
      "182": "BarcodeDataMatrixTest::::barcode08Test()",
      "183": "BarcodeDataMatrixTest::::barcode08Test()",
      "184": "BarcodeDataMatrixTest::::barcode08Test()",
      "185": "BarcodeDataMatrixTest::::barcode08Test()",
      "186": "BarcodeDataMatrixTest::::barcode08Test()",
      "187": "BarcodeDataMatrixTest::::barcode08Test()",
      "188": "BarcodeDataMatrixTest::::barcode08Test()",
      "190": "BarcodeDataMatrixTest::::barcode09Test()",
      "191": "BarcodeDataMatrixTest::::barcode09Test()",
      "192": "BarcodeDataMatrixTest::::barcode09Test()",
      "193": "BarcodeDataMatrixTest::::barcode09Test()",
      "194": "BarcodeDataMatrixTest::::barcode09Test()",
      "195": "BarcodeDataMatrixTest::::barcode09Test()",
      "196": "BarcodeDataMatrixTest::::barcode09Test()",
      "197": "BarcodeDataMatrixTest::::barcode09Test()",
      "198": "BarcodeDataMatrixTest::::barcode09Test()",
      "200": "BarcodeDataMatrixTest::::barcode10Test()",
      "201": "BarcodeDataMatrixTest::::barcode10Test()",
      "202": "BarcodeDataMatrixTest::::barcode10Test()",
      "203": "BarcodeDataMatrixTest::::barcode10Test()",
      "204": "BarcodeDataMatrixTest::::barcode10Test()",
      "205": "BarcodeDataMatrixTest::::barcode10Test()",
      "206": "BarcodeDataMatrixTest::::barcode10Test()",
      "207": "BarcodeDataMatrixTest::::barcode10Test()",
      "208": "BarcodeDataMatrixTest::::barcode10Test()",
      "210": "BarcodeDataMatrixTest::::barcode11Test()",
      "211": "BarcodeDataMatrixTest::::barcode11Test()",
      "212": "BarcodeDataMatrixTest::::barcode11Test()",
      "213": "BarcodeDataMatrixTest::::barcode11Test()",
      "214": "BarcodeDataMatrixTest::::barcode11Test()",
      "215": "BarcodeDataMatrixTest::::barcode11Test()",
      "216": "BarcodeDataMatrixTest::::barcode11Test()",
      "217": "BarcodeDataMatrixTest::::barcode11Test()",
      "218": "BarcodeDataMatrixTest::::barcode11Test()",
      "219": "BarcodeDataMatrixTest::::barcode11Test()",
      "221": "BarcodeDataMatrixTest::::barcode12Test()",
      "222": "BarcodeDataMatrixTest::::barcode12Test()",
      "223": "BarcodeDataMatrixTest::::barcode12Test()",
      "224": "BarcodeDataMatrixTest::::barcode12Test()",
      "225": "BarcodeDataMatrixTest::::barcode12Test()",
      "226": "BarcodeDataMatrixTest::::barcode12Test()",
      "227": "BarcodeDataMatrixTest::::barcode12Test()",
      "228": "BarcodeDataMatrixTest::::barcode12Test()",
      "229": "BarcodeDataMatrixTest::::barcode12Test()",
      "231": "BarcodeDataMatrixTest::::barcode13Test()",
      "232": "BarcodeDataMatrixTest::::barcode13Test()",
      "233": "BarcodeDataMatrixTest::::barcode13Test()",
      "234": "BarcodeDataMatrixTest::::barcode13Test()",
      "235": "BarcodeDataMatrixTest::::barcode13Test()",
      "236": "BarcodeDataMatrixTest::::barcode13Test()",
      "237": "BarcodeDataMatrixTest::::barcode13Test()",
      "238": "BarcodeDataMatrixTest::::barcode13Test()",
      "239": "BarcodeDataMatrixTest::::barcode13Test()",
      "241": "BarcodeDataMatrixTest::::barcode14Test()",
      "242": "BarcodeDataMatrixTest::::barcode14Test()",
      "243": "BarcodeDataMatrixTest::::barcode14Test()",
      "244": "BarcodeDataMatrixTest::::barcode14Test()",
      "245": "BarcodeDataMatrixTest::::barcode14Test()",
      "246": "BarcodeDataMatrixTest::::barcode14Test()",
      "247": "BarcodeDataMatrixTest::::barcode14Test()",
      "248": "BarcodeDataMatrixTest::::barcode14Test()",
      "249": "BarcodeDataMatrixTest::::barcode14Test()",
      "251": "BarcodeDataMatrixTest::::barcode15Test()",
      "252": "BarcodeDataMatrixTest::::barcode15Test()",
      "253": "BarcodeDataMatrixTest::::barcode15Test()",
      "254": "BarcodeDataMatrixTest::::barcode15Test()",
      "255": "BarcodeDataMatrixTest::::barcode15Test()",
      "256": "BarcodeDataMatrixTest::::barcode15Test()",
      "257": "BarcodeDataMatrixTest::::barcode15Test()",
      "258": "BarcodeDataMatrixTest::::barcode15Test()",
      "259": "BarcodeDataMatrixTest::::barcode15Test()",
      "260": "BarcodeDataMatrixTest::::barcode15Test()",
      "262": "BarcodeDataMatrixTest::::barcode16Test()",
      "263": "BarcodeDataMatrixTest::::barcode16Test()",
      "264": "BarcodeDataMatrixTest::::barcode16Test()",
      "265": "BarcodeDataMatrixTest::::barcode16Test()",
      "266": "BarcodeDataMatrixTest::::barcode16Test()",
      "267": "BarcodeDataMatrixTest::::barcode16Test()",
      "268": "BarcodeDataMatrixTest::::barcode16Test()",
      "269": "BarcodeDataMatrixTest::::barcode16Test()",
      "270": "BarcodeDataMatrixTest::::barcode16Test()",
      "271": "BarcodeDataMatrixTest::::barcode16Test()",
      "272": "BarcodeDataMatrixTest::::barcode16Test()",
      "273": "BarcodeDataMatrixTest::::barcode16Test()",
      "274": "BarcodeDataMatrixTest::::barcode16Test()",
      "275": "BarcodeDataMatrixTest::::barcode16Test()"
    },
    "tests": [
      {
        "test_lines": [
          59,
          73
        ],
        "covered_lines": [
          126,
          175,
          176,
          177,
          206,
          251,
          255,
          256,
          259,
          260,
          261,
          263,
          264,
          265,
          266,
          267,
          268,
          269,
          273,
          275,
          336,
          339,
          340,
          357,
          360,
          365,
          366,
          367,
          368,
          371,
          372,
          373,
          374,
          375,
          376,
          377,
          380,
          381,
          382,
          383,
          385,
          386,
          387,
          403,
          406,
          407,
          408,
          409,
          410,
          411,
          412,
          600,
          602,
          603,
          609,
          612,
          618,
          619,
          620,
          621,
          622,
          623,
          624,
          626,
          627,
          629,
          631,
          633,
          639,
          642,
          647,
          649,
          650,
          651,
          653,
          655,
          657,
          658,
          659,
          661,
          662,
          664,
          666,
          668,
          669,
          670,
          682,
          683,
          684,
          685,
          686,
          688,
          689,
          690,
          694,
          695,
          696,
          697,
          698,
          699,
          700,
          704,
          706,
          708,
          709,
          710,
          711,
          712,
          713,
          714,
          715,
          716,
          718,
          719,
          721,
          723,
          726,
          728,
          729,
          730,
          731,
          732,
          733,
          734,
          736,
          737,
          738,
          739,
          741,
          742,
          743,
          744,
          746,
          747,
          748,
          750,
          751,
          752,
          753,
          754,
          756,
          757,
          758,
          759,
          760,
          761,
          764,
          765,
          766,
          767,
          768,
          769,
          770,
          771,
          772,
          773,
          774,
          775,
          778,
          779,
          783,
          784,
          785,
          787,
          789,
          793,
          794,
          795,
          796,
          798,
          799,
          800,
          802,
          807,
          809,
          810,
          811,
          812,
          813,
          814,
          815,
          817,
          818,
          819,
          820,
          821,
          825,
          827,
          828,
          829,
          830,
          831,
          832,
          839,
          840,
          841,
          842,
          843,
          844,
          845,
          846,
          847,
          848,
          849,
          850,
          851,
          852,
          853,
          854,
          858,
          859,
          861,
          862,
          863,
          865,
          866,
          867,
          868,
          871,
          872,
          873,
          874,
          875,
          877,
          878,
          879,
          880,
          883,
          884,
          887,
          888,
          889,
          890,
          894,
          907,
          908,
          911,
          916,
          918,
          919,
          922,
          923,
          924,
          925,
          926,
          929,
          930,
          931,
          933,
          934,
          936,
          939,
          940,
          941,
          942,
          943,
          945,
          946,
          948,
          949,
          950,
          951,
          953,
          954,
          955,
          956,
          957,
          959,
          988,
          990,
          991,
          992,
          993,
          994,
          995,
          999,
          1000,
          1002,
          1003,
          1004,
          1006,
          1008,
          1014,
          1015,
          1016,
          1018,
          1019,
          1020,
          1021,
          1022,
          1024,
          1030,
          1032,
          1033,
          1034,
          1035,
          1036,
          1037,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1046,
          1047,
          1048,
          1050,
          1051,
          1052,
          1053,
          1054,
          1055,
          1058,
          1060,
          1061,
          1063,
          1064,
          1065,
          1068,
          1069,
          1070,
          1071,
          1073,
          1074,
          1075,
          1078,
          1079,
          1080,
          1081,
          1082,
          1083,
          1084,
          1085,
          1089,
          1090,
          1093,
          1094,
          1095,
          1096,
          1098,
          1100,
          1101,
          1103,
          1104,
          1106,
          1107,
          1108,
          1109,
          1110,
          1111,
          1113,
          1114,
          1117,
          1118,
          1120,
          1123,
          1124,
          1126,
          1127,
          1129,
          1130,
          1131,
          1132,
          1133,
          1134,
          1135,
          1136,
          1138,
          1139,
          1144,
          1145,
          1146,
          1147,
          1150,
          1151,
          1152,
          1157,
          1158,
          1162,
          1165,
          1166,
          1167,
          1168,
          1169,
          1171,
          1172,
          1173,
          1177,
          1181,
          1182,
          1186,
          1187,
          1190,
          1191,
          1192,
          1196,
          1197,
          1198,
          1202,
          1203,
          1204,
          1208,
          1209,
          1210,
          1213,
          1214,
          1215,
          1216,
          1217,
          1218,
          1219,
          1220,
          1225,
          1228,
          1229,
          1230,
          1231,
          1232,
          1236,
          1237,
          1238,
          1243,
          1244,
          1245,
          1249,
          1250,
          1251,
          1252,
          1255,
          1258,
          1262,
          1264,
          1265,
          1266,
          1268,
          1269,
          1270,
          1271,
          1273,
          1274,
          1275,
          1276,
          1277,
          1278,
          1279,
          1280,
          1281,
          1282,
          1283,
          1284,
          1285,
          1288,
          1289,
          1290,
          1291,
          1292,
          1293,
          1294,
          1295,
          1296,
          1297,
          1298,
          1299,
          1302,
          1303,
          1304,
          1307,
          1308,
          1310,
          1311,
          1312,
          1350,
          1351
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          75,
          88
        ],
        "covered_lines": [
          126,
          196,
          197,
          198,
          199,
          206,
          251,
          255,
          256,
          259,
          260,
          261,
          263,
          264,
          265,
          266,
          267,
          268,
          269,
          273,
          275,
          336,
          339,
          340,
          357,
          360,
          365,
          366,
          367,
          368,
          371,
          372,
          373,
          374,
          375,
          376,
          377,
          380,
          381,
          382,
          383,
          385,
          386,
          387,
          403,
          406,
          407,
          408,
          409,
          410,
          411,
          412,
          600,
          601,
          612,
          618,
          619,
          620,
          621,
          622,
          623,
          624,
          629,
          631,
          633,
          634,
          636,
          637,
          642,
          647,
          649,
          650,
          651,
          653,
          655,
          657,
          658,
          659,
          661,
          662,
          664,
          666,
          668,
          669,
          670,
          682,
          683,
          684,
          685,
          686,
          688,
          689,
          690,
          694,
          695,
          696,
          697,
          698,
          699,
          700,
          704,
          706,
          708,
          709,
          710,
          711,
          712,
          713,
          714,
          718,
          719,
          721,
          723,
          726,
          728,
          730,
          731,
          732,
          733,
          734,
          736,
          746,
          747,
          748,
          750,
          783,
          784,
          785,
          787,
          788,
          789,
          793,
          794,
          795,
          796,
          798,
          800,
          802,
          807,
          809,
          810,
          811,
          812,
          813,
          814,
          815,
          839,
          840,
          841,
          842,
          843,
          844,
          877,
          929,
          930,
          931,
          936,
          1030,
          1032,
          1033,
          1034,
          1035,
          1036,
          1037,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1046,
          1047,
          1048,
          1050,
          1051,
          1052,
          1117,
          1118,
          1120,
          1123,
          1124,
          1181,
          1182,
          1186,
          1187,
          1190,
          1191,
          1192,
          1196,
          1197,
          1198,
          1202,
          1203,
          1204,
          1208,
          1209,
          1210,
          1213,
          1214,
          1215,
          1216,
          1217,
          1218,
          1219,
          1220,
          1225,
          1228,
          1229,
          1230,
          1231,
          1232,
          1236,
          1237,
          1238,
          1243,
          1244,
          1245,
          1249,
          1250,
          1251,
          1252,
          1255,
          1258,
          1262,
          1264,
          1265,
          1266,
          1268,
          1269,
          1270,
          1271,
          1273,
          1274,
          1275,
          1276,
          1277,
          1278,
          1279,
          1280,
          1281,
          1282,
          1283,
          1284,
          1285,
          1288,
          1289,
          1290,
          1291,
          1292,
          1293,
          1294,
          1295,
          1296,
          1297,
          1298,
          1299,
          1302,
          1303,
          1304,
          1307,
          1308,
          1310,
          1311,
          1312,
          1350,
          1351
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          90,
          107
        ],
        "covered_lines": [
          126,
          175,
          176,
          177,
          206,
          251,
          255,
          256,
          259,
          260,
          261,
          263,
          264,
          265,
          266,
          267,
          268,
          269,
          273,
          275,
          336,
          339,
          340,
          357,
          360,
          365,
          366,
          367,
          368,
          371,
          372,
          373,
          374,
          389,
          390,
          391,
          393,
          396,
          397,
          398,
          401,
          403,
          406,
          407,
          408,
          409,
          410,
          411,
          412,
          464,
          465,
          516,
          517,
          600,
          601,
          612,
          618,
          619,
          620,
          621,
          622,
          623,
          624,
          629,
          630,
          631,
          633,
          639,
          642,
          647,
          649,
          650,
          651,
          652,
          653,
          655,
          657,
          658,
          659,
          661,
          662,
          663,
          664,
          666,
          668,
          669,
          670,
          682,
          683,
          684,
          685,
          686,
          688,
          689,
          690,
          694,
          695,
          696,
          697,
          698,
          699,
          700,
          704,
          706,
          708,
          709,
          710,
          711,
          712,
          713,
          714,
          715,
          716,
          718,
          719,
          721,
          723,
          726,
          728,
          729,
          730,
          731,
          732,
          733,
          734,
          736,
          746,
          747,
          748,
          750,
          751,
          752,
          753,
          754,
          756,
          757,
          783,
          784,
          785,
          786,
          787,
          789,
          793,
          794,
          795,
          796,
          798,
          800,
          802,
          807,
          809,
          810,
          811,
          812,
          813,
          814,
          815,
          817,
          818,
          819,
          820,
          821,
          825,
          827,
          829,
          839,
          840,
          841,
          842,
          843,
          844,
          877,
          929,
          930,
          931,
          936,
          1030,
          1032,
          1033,
          1034,
          1035,
          1036,
          1037,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1046,
          1047,
          1048,
          1050,
          1051,
          1052,
          1053,
          1054,
          1055,
          1058,
          1060,
          1061,
          1063,
          1064,
          1065,
          1068,
          1069,
          1070,
          1071,
          1073,
          1075,
          1078,
          1079,
          1080,
          1081,
          1082,
          1083,
          1084,
          1085,
          1089,
          1090,
          1093,
          1098,
          1100,
          1101,
          1103,
          1104,
          1106,
          1107,
          1108,
          1109,
          1110,
          1111,
          1113,
          1117,
          1118,
          1120,
          1123,
          1124,
          1126,
          1127,
          1129,
          1130,
          1131,
          1132,
          1133,
          1134,
          1135,
          1136,
          1138,
          1139,
          1144,
          1145,
          1146,
          1147,
          1150,
          1153,
          1154,
          1155,
          1157,
          1158,
          1162,
          1165,
          1166,
          1167,
          1168,
          1169,
          1171,
          1172,
          1173,
          1177,
          1181,
          1182,
          1186,
          1187,
          1190,
          1191,
          1192,
          1196,
          1197,
          1198,
          1202,
          1203,
          1204,
          1208,
          1209,
          1210,
          1213,
          1214,
          1215,
          1216,
          1217,
          1218,
          1219,
          1220,
          1225,
          1228,
          1229,
          1230,
          1231,
          1232,
          1236,
          1237,
          1238,
          1243,
          1244,
          1245,
          1247,
          1249,
          1250,
          1251,
          1252,
          1255,
          1256,
          1258,
          1262,
          1264,
          1265,
          1266,
          1268,
          1269,
          1270,
          1271,
          1273,
          1274,
          1275,
          1276,
          1277,
          1278,
          1279,
          1280,
          1281,
          1282,
          1283,
          1284,
          1285,
          1286,
          1288,
          1289,
          1290,
          1291,
          1292,
          1293,
          1294,
          1295,
          1296,
          1297,
          1298,
          1299,
          1302,
          1303,
          1304,
          1307,
          1308,
          1310,
          1311,
          1312,
          1350,
          1351
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          109,
          126
        ],
        "covered_lines": [
          126,
          175,
          176,
          177,
          206,
          251,
          255,
          256,
          259,
          260,
          261,
          263,
          264,
          265,
          266,
          267,
          268,
          269,
          273,
          275,
          336,
          339,
          340,
          357,
          360,
          365,
          366,
          367,
          368,
          371,
          372,
          373,
          374,
          389,
          390,
          391,
          393,
          396,
          397,
          398,
          401,
          403,
          406,
          407,
          408,
          409,
          410,
          411,
          412,
          464,
          465,
          516,
          517,
          600,
          602,
          603,
          609,
          612,
          618,
          619,
          620,
          621,
          622,
          623,
          624,
          626,
          627,
          629,
          630,
          631,
          633,
          639,
          642,
          647,
          649,
          650,
          651,
          652,
          653,
          655,
          657,
          658,
          659,
          661,
          662,
          663,
          664,
          666,
          668,
          669,
          670,
          682,
          683,
          684,
          685,
          686,
          688,
          689,
          690,
          694,
          695,
          696,
          697,
          698,
          699,
          700,
          704,
          706,
          708,
          709,
          710,
          711,
          712,
          713,
          714,
          715,
          716,
          718,
          719,
          721,
          723,
          726,
          728,
          729,
          730,
          731,
          732,
          733,
          734,
          736,
          746,
          747,
          748,
          750,
          751,
          752,
          753,
          754,
          756,
          757,
          783,
          784,
          785,
          786,
          787,
          789,
          793,
          794,
          795,
          796,
          798,
          800,
          802,
          807,
          809,
          810,
          811,
          812,
          813,
          814,
          815,
          817,
          818,
          819,
          820,
          821,
          825,
          827,
          829,
          839,
          840,
          841,
          842,
          843,
          844,
          877,
          878,
          879,
          880,
          881,
          883,
          884,
          885,
          887,
          888,
          889,
          890,
          894,
          907,
          908,
          911,
          912,
          913,
          914,
          916,
          918,
          919,
          922,
          929,
          930,
          931,
          933,
          934,
          936,
          1030,
          1032,
          1033,
          1034,
          1035,
          1036,
          1037,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1046,
          1047,
          1048,
          1050,
          1051,
          1052,
          1053,
          1054,
          1055,
          1058,
          1060,
          1061,
          1062,
          1063,
          1064,
          1065,
          1068,
          1069,
          1070,
          1071,
          1073,
          1074,
          1075,
          1078,
          1079,
          1080,
          1081,
          1082,
          1083,
          1084,
          1085,
          1089,
          1090,
          1093,
          1094,
          1095,
          1096,
          1098,
          1100,
          1101,
          1103,
          1104,
          1106,
          1107,
          1108,
          1109,
          1110,
          1111,
          1113,
          1114,
          1117,
          1118,
          1120,
          1123,
          1124,
          1126,
          1127,
          1129,
          1130,
          1131,
          1132,
          1133,
          1134,
          1135,
          1136,
          1138,
          1139,
          1144,
          1145,
          1146,
          1147,
          1150,
          1153,
          1154,
          1155,
          1157,
          1158,
          1162,
          1165,
          1166,
          1167,
          1168,
          1169,
          1171,
          1172,
          1173,
          1177,
          1181,
          1182,
          1186,
          1187,
          1190,
          1191,
          1192,
          1196,
          1197,
          1198,
          1202,
          1203,
          1204,
          1208,
          1209,
          1210,
          1213,
          1214,
          1215,
          1216,
          1217,
          1218,
          1219,
          1220,
          1225,
          1228,
          1229,
          1230,
          1231,
          1232,
          1236,
          1237,
          1238,
          1243,
          1244,
          1245,
          1247,
          1249,
          1250,
          1251,
          1252,
          1255,
          1256,
          1258,
          1262,
          1264,
          1265,
          1266,
          1268,
          1269,
          1270,
          1271,
          1273,
          1274,
          1275,
          1276,
          1277,
          1278,
          1279,
          1280,
          1281,
          1282,
          1283,
          1284,
          1285,
          1286,
          1288,
          1289,
          1290,
          1291,
          1292,
          1293,
          1294,
          1295,
          1296,
          1297,
          1298,
          1299,
          1302,
          1303,
          1304,
          1307,
          1308,
          1310,
          1311,
          1312,
          1350,
          1351
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          128,
          145
        ],
        "covered_lines": [
          126,
          175,
          176,
          177,
          206,
          251,
          255,
          256,
          259,
          260,
          261,
          263,
          264,
          265,
          266,
          267,
          268,
          269,
          273,
          275,
          336,
          339,
          340,
          357,
          360,
          365,
          366,
          367,
          368,
          371,
          372,
          373,
          374,
          389,
          390,
          391,
          393,
          396,
          397,
          398,
          401,
          403,
          406,
          407,
          408,
          409,
          410,
          411,
          412,
          464,
          465,
          516,
          517,
          600,
          602,
          603,
          604,
          605,
          606,
          607,
          608,
          609,
          612,
          618,
          619,
          620,
          621,
          622,
          623,
          624,
          629,
          631,
          633,
          639,
          642,
          647,
          649,
          650,
          651,
          653,
          655,
          657,
          658,
          659,
          661,
          662,
          664,
          666,
          668,
          669,
          670,
          682,
          683,
          684,
          685,
          686,
          688,
          689,
          690,
          694,
          695,
          696,
          697,
          698,
          699,
          700,
          704,
          706,
          708,
          709,
          710,
          711,
          712,
          713,
          714,
          715,
          716,
          718,
          719,
          721,
          723,
          726,
          728,
          729,
          730,
          731,
          732,
          733,
          734,
          736,
          737,
          738,
          739,
          741,
          742,
          743,
          744,
          746,
          747,
          748,
          750,
          751,
          752,
          753,
          754,
          756,
          757,
          758,
          759,
          760,
          761,
          764,
          765,
          766,
          767,
          768,
          769,
          770,
          771,
          772,
          773,
          774,
          775,
          778,
          779,
          783,
          784,
          785,
          787,
          789,
          793,
          794,
          795,
          796,
          798,
          799,
          800,
          802,
          807,
          809,
          810,
          811,
          812,
          813,
          814,
          815,
          817,
          818,
          819,
          820,
          821,
          825,
          827,
          828,
          829,
          830,
          831,
          832,
          839,
          840,
          841,
          842,
          843,
          844,
          845,
          846,
          847,
          848,
          849,
          858,
          861,
          862,
          863,
          865,
          866,
          867,
          868,
          871,
          877,
          878,
          879,
          880,
          883,
          884,
          887,
          888,
          889,
          890,
          894,
          907,
          908,
          911,
          916,
          918,
          919,
          922,
          923,
          924,
          925,
          926,
          929,
          930,
          931,
          936,
          939,
          940,
          941,
          942,
          943,
          945,
          946,
          948,
          949,
          950,
          951,
          953,
          954,
          955,
          956,
          957,
          959,
          988,
          990,
          999,
          1014,
          1015,
          1016,
          1018,
          1019,
          1020,
          1021,
          1022,
          1024,
          1030,
          1032,
          1033,
          1034,
          1035,
          1036,
          1037,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1046,
          1047,
          1048,
          1050,
          1051,
          1052,
          1053,
          1054,
          1055,
          1058,
          1060,
          1061,
          1063,
          1064,
          1065,
          1068,
          1069,
          1070,
          1071,
          1073,
          1075,
          1078,
          1079,
          1080,
          1081,
          1082,
          1083,
          1084,
          1085,
          1089,
          1090,
          1093,
          1098,
          1100,
          1101,
          1103,
          1104,
          1106,
          1107,
          1108,
          1109,
          1110,
          1111,
          1113,
          1117,
          1118,
          1120,
          1123,
          1124,
          1126,
          1127,
          1129,
          1130,
          1131,
          1132,
          1133,
          1134,
          1135,
          1136,
          1138,
          1139,
          1144,
          1145,
          1146,
          1157,
          1158,
          1162,
          1165,
          1166,
          1167,
          1168,
          1169,
          1171,
          1172,
          1173,
          1177,
          1181,
          1182,
          1186,
          1187,
          1190,
          1191,
          1192,
          1196,
          1197,
          1198,
          1202,
          1203,
          1204,
          1208,
          1209,
          1210,
          1213,
          1214,
          1215,
          1216,
          1217,
          1218,
          1219,
          1220,
          1225,
          1228,
          1229,
          1230,
          1231,
          1232,
          1236,
          1237,
          1238,
          1243,
          1244,
          1245,
          1249,
          1250,
          1251,
          1252,
          1255,
          1258,
          1262,
          1264,
          1265,
          1266,
          1268,
          1269,
          1270,
          1271,
          1273,
          1274,
          1275,
          1276,
          1277,
          1278,
          1279,
          1280,
          1281,
          1282,
          1283,
          1284,
          1285,
          1288,
          1289,
          1290,
          1291,
          1292,
          1293,
          1294,
          1295,
          1296,
          1297,
          1298,
          1299,
          1302,
          1303,
          1304,
          1307,
          1308,
          1310,
          1311,
          1312,
          1350,
          1351
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          147,
          164
        ],
        "covered_lines": [
          126,
          175,
          176,
          177,
          206,
          251,
          255,
          256,
          259,
          260,
          261,
          263,
          264,
          265,
          266,
          267,
          268,
          269,
          273,
          275,
          336,
          339,
          340,
          357,
          360,
          365,
          366,
          367,
          368,
          371,
          372,
          373,
          374,
          389,
          390,
          391,
          393,
          396,
          397,
          398,
          401,
          403,
          406,
          407,
          408,
          409,
          410,
          411,
          412,
          464,
          465,
          516,
          517,
          600,
          602,
          603,
          604,
          605,
          606,
          607,
          608,
          609,
          612,
          618,
          619,
          620,
          621,
          622,
          623,
          624,
          629,
          631,
          633,
          639,
          642,
          647,
          649,
          650,
          651,
          653,
          655,
          657,
          658,
          659,
          661,
          662,
          664,
          666,
          668,
          669,
          670,
          682,
          683,
          684,
          685,
          686,
          688,
          689,
          690,
          694,
          695,
          696,
          697,
          698,
          699,
          700,
          704,
          706,
          708,
          709,
          710,
          711,
          712,
          713,
          714,
          715,
          716,
          726,
          728,
          729,
          730,
          731,
          732,
          733,
          734,
          736,
          737,
          738,
          739,
          741,
          742,
          743,
          744,
          746,
          747,
          748,
          750,
          751,
          752,
          753,
          754,
          756,
          757,
          758,
          759,
          760,
          761,
          764,
          765,
          766,
          767,
          768,
          769,
          770,
          771,
          772,
          773,
          774,
          775,
          778,
          779,
          783,
          784,
          785,
          787,
          789,
          793,
          794,
          795,
          796,
          798,
          799,
          800,
          802,
          807,
          809,
          810,
          811,
          812,
          813,
          814,
          815,
          817,
          818,
          819,
          820,
          821,
          825,
          827,
          828,
          829,
          830,
          831,
          832,
          834,
          835,
          839,
          840,
          841,
          842,
          843,
          844,
          877,
          929,
          930,
          931,
          936,
          1030,
          1032,
          1033,
          1034,
          1035,
          1036,
          1037,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1046,
          1047,
          1048,
          1050,
          1051,
          1052,
          1053,
          1054,
          1055,
          1058,
          1060,
          1061,
          1063,
          1068,
          1069,
          1078,
          1079,
          1080,
          1081,
          1082,
          1083,
          1084,
          1085,
          1089,
          1090,
          1093,
          1098,
          1100,
          1101,
          1103,
          1104,
          1113,
          1117,
          1118,
          1120,
          1123,
          1124,
          1181,
          1182,
          1186,
          1187,
          1190,
          1191,
          1192,
          1196,
          1197,
          1198,
          1202,
          1203,
          1204,
          1208,
          1209,
          1210,
          1213,
          1214,
          1215,
          1216,
          1217,
          1218,
          1219,
          1220,
          1225,
          1228,
          1229,
          1230,
          1231,
          1232,
          1236,
          1237,
          1238,
          1243,
          1244,
          1245,
          1249,
          1250,
          1251,
          1252,
          1255,
          1258,
          1262,
          1264,
          1265,
          1266,
          1268,
          1269,
          1270,
          1271,
          1273,
          1274,
          1275,
          1276,
          1277,
          1278,
          1279,
          1280,
          1281,
          1282,
          1283,
          1284,
          1285,
          1288,
          1289,
          1290,
          1291,
          1292,
          1293,
          1294,
          1295,
          1296,
          1297,
          1298,
          1299,
          1302,
          1303,
          1304,
          1307,
          1308,
          1310,
          1311,
          1312,
          1350,
          1351
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          166,
          178
        ],
        "covered_lines": [
          126,
          175,
          176,
          177,
          336,
          339,
          340,
          357,
          360,
          365,
          366,
          367,
          368,
          371,
          372,
          373,
          374,
          389,
          390,
          391,
          393,
          396,
          397,
          398,
          399,
          464,
          465,
          516,
          517,
          576,
          577,
          612,
          618,
          619,
          620,
          621,
          622,
          623,
          624,
          629,
          630,
          631,
          633,
          639,
          642,
          647,
          649,
          650,
          651,
          652,
          653,
          655,
          657,
          658,
          661,
          662,
          663,
          668,
          669,
          670,
          682,
          684,
          685,
          686,
          688,
          690,
          694,
          695,
          696,
          697,
          698,
          699,
          700,
          704,
          706,
          708,
          709,
          710,
          711,
          712,
          713,
          714,
          715,
          716,
          718,
          719,
          721,
          723,
          726,
          728,
          729,
          730,
          731,
          732,
          733,
          734,
          736,
          746,
          747,
          748,
          750,
          783,
          784,
          785,
          786,
          787,
          789,
          793,
          794,
          795,
          796,
          798,
          800,
          802,
          807,
          809,
          810,
          811,
          812,
          813,
          814,
          815,
          817,
          818,
          819,
          820,
          825,
          827,
          829,
          839,
          840,
          841,
          842,
          843,
          844,
          877,
          929,
          930,
          931,
          936,
          1030,
          1032,
          1033,
          1034,
          1035,
          1036,
          1037,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1046,
          1047,
          1048,
          1050,
          1051,
          1052,
          1117,
          1118,
          1120,
          1123,
          1124,
          1228,
          1229,
          1230,
          1232,
          1243,
          1244,
          1245,
          1247,
          1249,
          1250,
          1255,
          1256,
          1258,
          1262,
          1264,
          1265,
          1266,
          1268,
          1269,
          1270,
          1271,
          1273,
          1274,
          1275,
          1276,
          1277,
          1278,
          1279,
          1280,
          1281,
          1282,
          1283,
          1284,
          1285,
          1286,
          1288,
          1289,
          1290,
          1291,
          1292,
          1293,
          1294,
          1295,
          1296,
          1297,
          1298,
          1299,
          1302,
          1303,
          1304,
          1307,
          1308,
          1309,
          1350,
          1351
        ],
        "label": "BarcodeDataMatrix::::setCode(byte[],int,int)"
      },
      {
        "test_lines": [
          180,
          188
        ],
        "covered_lines": [
          126,
          175,
          176,
          177,
          336,
          339,
          340,
          357,
          360,
          365,
          366,
          367,
          368,
          371,
          372,
          373,
          374,
          389,
          390,
          391,
          393,
          396,
          397,
          398,
          399,
          464,
          465,
          516,
          517,
          612,
          618,
          619,
          620,
          621,
          622,
          623,
          624,
          629,
          630,
          631,
          633,
          639,
          642,
          647,
          649,
          650,
          651,
          652,
          653,
          655,
          657,
          658,
          659,
          661,
          662,
          663,
          664,
          666,
          668,
          669,
          670,
          682,
          683,
          684,
          685,
          686,
          688,
          689,
          690,
          694,
          695,
          696,
          697,
          698,
          699,
          700,
          704,
          706,
          708,
          709,
          710,
          711,
          712,
          713,
          714,
          715,
          716,
          718,
          719,
          721,
          723,
          726,
          728,
          729,
          730,
          731,
          732,
          733,
          734,
          736,
          746,
          747,
          748,
          750,
          751,
          752,
          753,
          756,
          757,
          783,
          784,
          785,
          786,
          787,
          789,
          793,
          794,
          795,
          796,
          798,
          800,
          802,
          807,
          809,
          810,
          811,
          812,
          813,
          814,
          815,
          817,
          818,
          819,
          820,
          825,
          827,
          829,
          839,
          840,
          841,
          842,
          843,
          844,
          877,
          929,
          930,
          931,
          936,
          1030,
          1032,
          1033,
          1034,
          1035,
          1036,
          1037,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1046,
          1047,
          1048,
          1050,
          1051,
          1052,
          1053,
          1054,
          1055,
          1058,
          1060,
          1061,
          1062,
          1063,
          1064,
          1065,
          1068,
          1069,
          1070,
          1071,
          1073,
          1075,
          1078,
          1079,
          1080,
          1081,
          1082,
          1083,
          1084,
          1085,
          1089,
          1090,
          1093,
          1098,
          1100,
          1101,
          1103,
          1104,
          1106,
          1107,
          1108,
          1109,
          1110,
          1111,
          1113,
          1117,
          1118,
          1120,
          1121,
          1123,
          1124,
          1126,
          1127,
          1129,
          1130,
          1131,
          1132,
          1133,
          1134,
          1135,
          1136,
          1138,
          1139,
          1144,
          1145,
          1146,
          1147,
          1150,
          1153,
          1154,
          1155,
          1157,
          1158,
          1162,
          1165,
          1166,
          1167,
          1168,
          1169,
          1171,
          1172,
          1173,
          1177,
          1228,
          1229,
          1230,
          1232,
          1243,
          1244,
          1245,
          1247,
          1249,
          1250,
          1251,
          1252,
          1255,
          1256,
          1258,
          1262,
          1264,
          1265,
          1266,
          1268,
          1269,
          1270,
          1271,
          1273,
          1274,
          1275,
          1276,
          1277,
          1278,
          1279,
          1280,
          1281,
          1282,
          1283,
          1284,
          1285,
          1286,
          1288,
          1289,
          1290,
          1291,
          1292,
          1293,
          1294,
          1295,
          1296,
          1297,
          1298,
          1299,
          1302,
          1303,
          1304,
          1307,
          1308,
          1309,
          1350,
          1351
        ],
        "label": "BarcodeDataMatrix::::setCode(byte[],int,int)"
      },
      {
        "test_lines": [
          190,
          198
        ],
        "covered_lines": [
          126,
          175,
          176,
          177,
          336,
          339,
          340,
          357,
          360,
          365,
          366,
          367,
          368,
          371,
          372,
          373,
          374,
          389,
          390,
          393,
          394,
          464,
          465,
          516,
          517,
          1350,
          1351
        ],
        "label": "BarcodeDataMatrix::::setCode(byte[],int,int)"
      },
      {
        "test_lines": [
          200,
          208
        ],
        "covered_lines": [
          126,
          175,
          176,
          177,
          336,
          339,
          340,
          357,
          360,
          365,
          366,
          367,
          368,
          371,
          372,
          373,
          374,
          389,
          390,
          391,
          393,
          396,
          397,
          398,
          399,
          464,
          465,
          516,
          517,
          612,
          618,
          619,
          620,
          621,
          622,
          623,
          624,
          629,
          630,
          631,
          633,
          639,
          642,
          647,
          649,
          650,
          651,
          652,
          653,
          655,
          657,
          658,
          659,
          661,
          662,
          663,
          664,
          666,
          668,
          669,
          670,
          682,
          683,
          684,
          685,
          686,
          688,
          689,
          690,
          694,
          695,
          696,
          697,
          698,
          699,
          700,
          704,
          706,
          708,
          709,
          710,
          711,
          712,
          713,
          714,
          715,
          716,
          718,
          719,
          721,
          723,
          726,
          728,
          729,
          730,
          731,
          732,
          733,
          734,
          736,
          746,
          747,
          748,
          750,
          751,
          752,
          753,
          756,
          757,
          783,
          784,
          785,
          786,
          787,
          789,
          793,
          794,
          795,
          796,
          798,
          800,
          802,
          807,
          809,
          810,
          811,
          812,
          813,
          814,
          815,
          817,
          818,
          819,
          820,
          825,
          827,
          829,
          839,
          840,
          841,
          842,
          843,
          844,
          877,
          929,
          930,
          931,
          936,
          1030,
          1032,
          1033,
          1034,
          1035,
          1036,
          1037,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1046,
          1047,
          1048,
          1050,
          1051,
          1052,
          1053,
          1054,
          1055,
          1058,
          1060,
          1061,
          1062,
          1063,
          1064,
          1065,
          1068,
          1069,
          1070,
          1071,
          1073,
          1075,
          1078,
          1079,
          1080,
          1081,
          1082,
          1083,
          1084,
          1085,
          1089,
          1090,
          1093,
          1098,
          1100,
          1101,
          1103,
          1104,
          1106,
          1107,
          1108,
          1109,
          1110,
          1111,
          1113,
          1117,
          1118,
          1120,
          1121,
          1123,
          1124,
          1126,
          1127,
          1129,
          1130,
          1131,
          1132,
          1133,
          1134,
          1135,
          1136,
          1138,
          1139,
          1144,
          1145,
          1146,
          1147,
          1150,
          1153,
          1154,
          1155,
          1157,
          1158,
          1162,
          1165,
          1166,
          1167,
          1168,
          1169,
          1171,
          1172,
          1173,
          1177,
          1228,
          1229,
          1230,
          1232,
          1243,
          1244,
          1245,
          1247,
          1249,
          1250,
          1251,
          1252,
          1255,
          1256,
          1258,
          1262,
          1264,
          1265,
          1266,
          1268,
          1269,
          1270,
          1271,
          1273,
          1274,
          1275,
          1276,
          1277,
          1278,
          1279,
          1280,
          1281,
          1282,
          1283,
          1284,
          1285,
          1286,
          1288,
          1289,
          1290,
          1291,
          1292,
          1293,
          1294,
          1295,
          1296,
          1297,
          1298,
          1299,
          1302,
          1303,
          1304,
          1307,
          1308,
          1309,
          1350,
          1351
        ],
        "label": "BarcodeDataMatrix::::setCode(byte[],int,int)"
      },
      {
        "test_lines": [
          210,
          219
        ],
        "covered_lines": [
          126,
          175,
          176,
          177,
          357,
          360,
          365,
          366,
          367,
          368,
          371,
          372,
          373,
          374,
          389,
          390,
          391,
          393,
          396,
          397,
          398,
          401,
          403,
          406,
          407,
          408,
          409,
          410,
          411,
          412,
          464,
          465,
          516,
          517,
          600,
          602,
          603,
          604,
          605,
          606,
          607,
          608,
          609,
          612,
          618,
          619,
          620,
          621,
          622,
          623,
          624,
          629,
          631,
          633,
          639,
          642,
          647,
          649,
          650,
          651,
          653,
          655,
          657,
          658,
          659,
          661,
          662,
          664,
          666,
          668,
          669,
          670,
          682,
          683,
          684,
          685,
          686,
          688,
          689,
          690,
          694,
          695,
          696,
          697,
          698,
          699,
          700,
          704,
          706,
          708,
          709,
          710,
          711,
          712,
          713,
          714,
          715,
          716,
          718,
          719,
          721,
          723,
          726,
          728,
          729,
          730,
          731,
          732,
          733,
          734,
          736,
          746,
          747,
          748,
          750,
          751,
          752,
          753,
          756,
          757,
          783,
          784,
          785,
          787,
          789,
          793,
          794,
          795,
          796,
          798,
          800,
          802,
          807,
          809,
          810,
          811,
          812,
          813,
          814,
          815,
          817,
          818,
          819,
          820,
          825,
          827,
          829,
          839,
          840,
          841,
          842,
          843,
          844,
          877,
          929,
          930,
          931,
          936,
          1030,
          1032,
          1033,
          1034,
          1035,
          1036,
          1037,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1046,
          1047,
          1048,
          1050,
          1051,
          1052,
          1053,
          1054,
          1055,
          1058,
          1060,
          1061,
          1063,
          1064,
          1065,
          1068,
          1069,
          1070,
          1071,
          1073,
          1075,
          1078,
          1079,
          1080,
          1081,
          1082,
          1083,
          1084,
          1085,
          1089,
          1090,
          1093,
          1098,
          1100,
          1101,
          1103,
          1104,
          1106,
          1107,
          1108,
          1109,
          1110,
          1111,
          1113,
          1117,
          1118,
          1120,
          1123,
          1124,
          1126,
          1127,
          1129,
          1130,
          1131,
          1132,
          1133,
          1134,
          1135,
          1136,
          1138,
          1139,
          1144,
          1145,
          1146,
          1147,
          1150,
          1153,
          1154,
          1155,
          1157,
          1158,
          1162,
          1165,
          1166,
          1167,
          1168,
          1169,
          1171,
          1172,
          1173,
          1177,
          1181,
          1182,
          1186,
          1187,
          1190,
          1191,
          1192,
          1196,
          1197,
          1198,
          1202,
          1203,
          1204,
          1208,
          1209,
          1210,
          1213,
          1214,
          1215,
          1216,
          1217,
          1218,
          1219,
          1220,
          1225,
          1228,
          1229,
          1230,
          1231,
          1232,
          1236,
          1237,
          1238,
          1243,
          1244,
          1245,
          1249,
          1250,
          1251,
          1252,
          1255,
          1258,
          1262,
          1264,
          1265,
          1266,
          1268,
          1269,
          1270,
          1271,
          1273,
          1274,
          1275,
          1276,
          1277,
          1278,
          1279,
          1280,
          1281,
          1282,
          1283,
          1284,
          1285,
          1288,
          1289,
          1290,
          1291,
          1292,
          1293,
          1294,
          1295,
          1296,
          1297,
          1298,
          1299,
          1302,
          1303,
          1304,
          1307,
          1308,
          1310,
          1311,
          1312,
          1350,
          1351
        ],
        "label": "BarcodeDataMatrix::::setCode(byte[],int,int)"
      },
      {
        "test_lines": [
          221,
          229
        ],
        "covered_lines": [
          126,
          175,
          176,
          177,
          357,
          358,
          464,
          465,
          516,
          517
        ],
        "label": "BarcodeDataMatrix::::setCode(byte[],int,int)"
      },
      {
        "test_lines": [
          231,
          239
        ],
        "covered_lines": [
          126,
          175,
          176,
          177,
          357,
          360,
          361,
          464,
          465,
          516,
          517
        ],
        "label": "BarcodeDataMatrix::::setCode(byte[],int,int)"
      },
      {
        "test_lines": [
          241,
          249
        ],
        "covered_lines": [
          126,
          175,
          176,
          177,
          357,
          360,
          361,
          464,
          465,
          516,
          517
        ],
        "label": "BarcodeDataMatrix::::setCode(byte[],int,int)"
      },
      {
        "test_lines": [
          251,
          260
        ],
        "covered_lines": [
          126,
          175,
          176,
          177,
          357,
          360,
          365,
          366,
          367,
          368,
          371,
          372,
          373,
          374,
          389,
          390,
          391,
          393,
          396,
          397,
          398,
          401,
          403,
          406,
          407,
          408,
          409,
          410,
          411,
          412,
          464,
          465,
          516,
          517,
          600,
          602,
          603,
          604,
          605,
          606,
          607,
          608,
          609,
          1181,
          1182,
          1186,
          1187,
          1190,
          1191,
          1192,
          1196,
          1197,
          1198,
          1202,
          1203,
          1204,
          1208,
          1209,
          1210,
          1213,
          1214,
          1215,
          1216,
          1217,
          1218,
          1219,
          1220,
          1225,
          1262,
          1264,
          1265,
          1266,
          1267,
          1350,
          1351
        ],
        "label": "BarcodeDataMatrix::::setCode(byte[],int,int)"
      },
      {
        "test_lines": [
          262,
          275
        ],
        "covered_lines": [
          126,
          175,
          176,
          177,
          206,
          251,
          255,
          256,
          259,
          260,
          261,
          263,
          264,
          265,
          266,
          267,
          268,
          269,
          273,
          275,
          336,
          339,
          340,
          357,
          360,
          365,
          366,
          367,
          368,
          371,
          372,
          373,
          374,
          375,
          376,
          377,
          380,
          381,
          382,
          383,
          385,
          386,
          387,
          403,
          406,
          407,
          408,
          409,
          410,
          411,
          412,
          600,
          601,
          612,
          618,
          619,
          620,
          621,
          622,
          623,
          624,
          626,
          627,
          629,
          631,
          633,
          639,
          642,
          647,
          649,
          650,
          651,
          653,
          655,
          657,
          658,
          659,
          661,
          662,
          664,
          666,
          668,
          669,
          670,
          682,
          683,
          684,
          685,
          686,
          688,
          689,
          690,
          694,
          695,
          696,
          697,
          698,
          699,
          700,
          704,
          706,
          708,
          709,
          710,
          711,
          712,
          713,
          714,
          715,
          716,
          726,
          728,
          729,
          730,
          731,
          732,
          733,
          734,
          736,
          737,
          738,
          739,
          741,
          742,
          743,
          744,
          746,
          747,
          748,
          750,
          751,
          752,
          753,
          754,
          756,
          757,
          758,
          759,
          760,
          761,
          764,
          765,
          766,
          767,
          768,
          769,
          770,
          771,
          772,
          773,
          774,
          775,
          778,
          779,
          783,
          784,
          785,
          787,
          789,
          793,
          794,
          795,
          796,
          798,
          799,
          800,
          802,
          807,
          809,
          810,
          811,
          812,
          813,
          814,
          815,
          817,
          818,
          819,
          820,
          821,
          825,
          827,
          828,
          829,
          830,
          831,
          832,
          839,
          840,
          841,
          842,
          843,
          844,
          845,
          846,
          847,
          848,
          849,
          858,
          861,
          862,
          863,
          865,
          866,
          867,
          868,
          871,
          877,
          878,
          879,
          880,
          883,
          884,
          885,
          887,
          888,
          889,
          890,
          894,
          907,
          908,
          911,
          912,
          914,
          916,
          918,
          919,
          922,
          929,
          930,
          931,
          933,
          934,
          936,
          1030,
          1032,
          1033,
          1034,
          1035,
          1036,
          1037,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1046,
          1047,
          1048,
          1050,
          1051,
          1052,
          1053,
          1054,
          1055,
          1058,
          1060,
          1061,
          1062,
          1063,
          1064,
          1065,
          1068,
          1069,
          1070,
          1071,
          1073,
          1074,
          1075,
          1078,
          1079,
          1080,
          1081,
          1082,
          1083,
          1084,
          1085,
          1089,
          1090,
          1093,
          1094,
          1095,
          1096,
          1098,
          1100,
          1101,
          1103,
          1104,
          1106,
          1107,
          1108,
          1109,
          1110,
          1111,
          1113,
          1114,
          1117,
          1118,
          1120,
          1123,
          1124,
          1126,
          1127,
          1129,
          1130,
          1131,
          1132,
          1133,
          1134,
          1135,
          1136,
          1138,
          1139,
          1144,
          1145,
          1146,
          1157,
          1158,
          1162,
          1165,
          1166,
          1167,
          1168,
          1169,
          1171,
          1172,
          1173,
          1177,
          1181,
          1182,
          1186,
          1187,
          1190,
          1191,
          1192,
          1196,
          1197,
          1198,
          1202,
          1203,
          1204,
          1208,
          1209,
          1210,
          1213,
          1214,
          1215,
          1216,
          1217,
          1218,
          1219,
          1220,
          1225,
          1228,
          1229,
          1230,
          1231,
          1232,
          1236,
          1237,
          1238,
          1243,
          1244,
          1245,
          1249,
          1250,
          1251,
          1252,
          1255,
          1258,
          1262,
          1264,
          1265,
          1266,
          1268,
          1269,
          1270,
          1271,
          1273,
          1274,
          1275,
          1276,
          1277,
          1278,
          1279,
          1280,
          1281,
          1282,
          1283,
          1284,
          1285,
          1288,
          1289,
          1290,
          1291,
          1292,
          1293,
          1294,
          1295,
          1296,
          1297,
          1298,
          1299,
          1302,
          1303,
          1304,
          1307,
          1308,
          1310,
          1311,
          1312,
          1350,
          1351
        ],
        "label": "<<NO FOCAL METHOD>>"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/barcodes/src/main/java/com/itextpdf/barcodes/BarcodeMSI.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.barcodes;\n",
      "\n",
      "import com.itextpdf.kernel.colors.Color;\n",
      "import com.itextpdf.kernel.font.PdfFont;\n",
      "import com.itextpdf.kernel.geom.Rectangle;\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "import com.itextpdf.kernel.pdf.canvas.PdfCanvas;\n",
      "\n",
      "/**\n",
      " * Implements the MSI Barcode.\n",
      " * The <CODE>code</CODE> may only contain numeric characters.\n",
      " * The {@link #getChecksum(String) getChecksum} method returns the mod 10 checksum digit which is the most widely used for MSI barcodes.\n",
      " */\n",
      "public class BarcodeMSI extends Barcode1D {\n",
      "    /**\n",
      "     * The index chars to <CODE>BARS</CODE> representing valid characters in the <CODE>code</CODE>\n",
      "     */\n",
      "    private static final String CHARS = \"0123456789\";\n",
      "\n",
      "    /**\n",
      "     * The sequence prepended to the start of all MSI Barcodes.\n",
      "     */\n",
      "    private static final byte[] BARS_START = new byte[]{1, 1, 0};\n",
      "\n",
      "    /**\n",
      "     * The sequence appended to the end of all MSI Barcodes.\n",
      "     */\n",
      "    private static final byte[] BARS_END = new byte[]{1, 0, 0, 1};\n",
      "\n",
      "    /**\n",
      "     * The bars to generate the code.\n",
      "     */\n",
      "    private static final byte[][] BARS = new byte[][]{\n",
      "\n",
      "            // 0\n",
      "            {1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0},\n",
      "\n",
      "            // 1\n",
      "            {1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0},\n",
      "\n",
      "            // 2\n",
      "            {1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0},\n",
      "\n",
      "            // 3\n",
      "            {1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0},\n",
      "\n",
      "            // 4\n",
      "            {1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0},\n",
      "\n",
      "            // 5\n",
      "            {1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0},\n",
      "\n",
      "            // 6\n",
      "            {1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0},\n",
      "\n",
      "            // 7\n",
      "            {1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0},\n",
      "\n",
      "            // 8\n",
      "            {1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0},\n",
      "\n",
      "            // 9\n",
      "            {1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0}\n",
      "    };\n",
      "\n",
      "    /**\n",
      "     * The number of individual bars either drawn or not drawn per character of the <CODE>code</CODE>\n",
      "     */\n",
      "    private static final int BARS_PER_CHARACTER = 12;\n",
      "\n",
      "    /**\n",
      "     * The number of individual bars either drawn or not drawn for the start character in the BarcodeMSI.\n",
      "     */\n",
      "    private static final int BARS_FOR_START = 3;\n",
      "\n",
      "    /**\n",
      "     * The number of individual bars either drawn or not drawn for the stop character in the BarcodeMSI.\n",
      "     */\n",
      "    private static final int BARS_FOR_STOP = 4;\n",
      "\n",
      "    /**\n",
      "     * Creates a new BarcodeMSI.\n",
      "     * To generate the font the {@link PdfDocument#getDefaultFont()} will be implicitly called.\n",
      "     * If you want to use this barcode in PDF/A documents, please consider using {@link #BarcodeMSI(PdfDocument, PdfFont)}.\n",
      "     *\n",
      "     * @param document The document to which the barcode will be added\n",
      "     */\n",
      "    public BarcodeMSI(PdfDocument document) {\n",
      "        this(document, document.getDefaultFont());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates a new BarcodeMSI\n",
      "     *\n",
      "     * @param document The document to which the barcode will be added\n",
      "     * @param font The font to use\n",
      "     */\n",
      "    public BarcodeMSI(PdfDocument document, PdfFont font) {\n",
      "        super(document);\n",
      "        this.x = 0.8f;\n",
      "        this.n = 2.0f;\n",
      "        this.font = font;\n",
      "        this.size = 8.0f;\n",
      "        this.baseline = this.size;\n",
      "        this.barHeight = this.size * 3.0f;\n",
      "        this.generateChecksum = false;\n",
      "        this.checksumText = false;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets the maximum area that the barcode and the text, if\n",
      "     * any, will occupy. The lower left corner is always (0, 0).\n",
      "     *\n",
      "     * @return the size the barcode occupies.\n",
      "     */\n",
      "    @Override\n",
      "    public Rectangle getBarcodeSize() {\n",
      "        float fontX = 0.0f;\n",
      "        float fontY = 0.0f;\n",
      "        String fCode = this.code;\n",
      "        if (this.font != null) {\n",
      "            if (this.baseline > 0.0f) {\n",
      "                fontY = this.baseline - this.getDescender();\n",
      "            } else {\n",
      "                fontY = -this.baseline + this.size;\n",
      "            }\n",
      "            String fullCode = this.code;\n",
      "            fontX = this.font.getWidth(this.altText != null ? this.altText : fullCode, this.size);\n",
      "        }\n",
      "\n",
      "        int len = fCode.length();\n",
      "        if (this.generateChecksum) {\n",
      "            ++len;\n",
      "        }\n",
      "\n",
      "        float fullWidth = (len * BARS_PER_CHARACTER + BARS_FOR_START + BARS_FOR_STOP) * x;\n",
      "        fullWidth = Math.max(fullWidth, fontX);\n",
      "        float fullHeight = this.barHeight + fontY;\n",
      "        return new Rectangle(fullWidth, fullHeight);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Places the barcode in a <CODE>PdfCanvas</CODE>. The\n",
      "     * barcode is always placed at coordinates (0, 0). Use the\n",
      "     * translation matrix to move it elsewhere.\n",
      "     * <p>\n",
      "     * The bars and text are written in the following colors:\n",
      "     * \n",
      "     * <TABLE BORDER=\"1\" summary=\"\">\n",
      "     * <TR>\n",
      "     * <TH><CODE>barColor</CODE></TH>\n",
      "     * <TH><CODE>textColor</CODE></TH>\n",
      "     * <TH>Result</TH>\n",
      "     * </TR>\n",
      "     * <TR>\n",
      "     * <TD><CODE>null</CODE></TD>\n",
      "     * <TD><CODE>null</CODE></TD>\n",
      "     * <TD>bars and text painted with current fill color</TD>\n",
      "     * </TR>\n",
      "     * <TR>\n",
      "     * <TD><CODE>barColor</CODE></TD>\n",
      "     * <TD><CODE>null</CODE></TD>\n",
      "     * <TD>bars and text painted with <CODE>barColor</CODE></TD>\n",
      "     * </TR>\n",
      "     * <TR>\n",
      "     * <TD><CODE>null</CODE></TD>\n",
      "     * <TD><CODE>textColor</CODE></TD>\n",
      "     * <TD>bars painted with current color<br>text painted with <CODE>textColor</CODE></TD>\n",
      "     * </TR>\n",
      "     * <TR>\n",
      "     * <TD><CODE>barColor</CODE></TD>\n",
      "     * <TD><CODE>textColor</CODE></TD>\n",
      "     * <TD>bars painted with <CODE>barColor</CODE><br>text painted with <CODE>textColor</CODE></TD>\n",
      "     * </TR>\n",
      "     * </TABLE>\n",
      "     *\n",
      "     * @param canvas    the <CODE>PdfCanvas</CODE> where the barcode will be placed\n",
      "     * @param barColor  the color of the bars. It can be <CODE>null</CODE>\n",
      "     * @param textColor the color of the text. It can be <CODE>null</CODE>\n",
      "     * @return the dimensions the barcode occupies\n",
      "     */\n",
      "    @Override\n",
      "    public Rectangle placeBarcode(PdfCanvas canvas, Color barColor, Color textColor) {\n",
      "        String fullCode = this.code;\n",
      "        if (this.checksumText) {\n",
      "            fullCode = fullCode + Integer.toString(getChecksum(this.code));\n",
      "        }\n",
      "        float fontX = 0.0f;\n",
      "        if (this.font != null) {\n",
      "            String var10001 = this.altText != null ? this.altText : fullCode;\n",
      "            fullCode = this.altText != null ? this.altText : fullCode;\n",
      "            fontX = this.font.getWidth(var10001, this.size);\n",
      "        }\n",
      "\n",
      "        String bCode = this.code;\n",
      "        if (this.generateChecksum) {\n",
      "            bCode += getChecksum(bCode);\n",
      "        }\n",
      "        int idx;\n",
      "        idx = bCode.length();\n",
      "        final float fullWidth = (idx * BARS_PER_CHARACTER + BARS_FOR_START + BARS_FOR_STOP) * this.x;\n",
      "        float barStartX = 0.0f;\n",
      "        float textStartX = 0.0f;\n",
      "        switch (this.textAlignment) {\n",
      "            case 1:\n",
      "                break;\n",
      "            case 2:\n",
      "                if (fontX > fullWidth) {\n",
      "                    barStartX = fontX - fullWidth;\n",
      "                } else {\n",
      "                    textStartX = fullWidth - fontX;\n",
      "                }\n",
      "                break;\n",
      "            default:\n",
      "                if (fontX > fullWidth) {\n",
      "                    barStartX = (fontX - fullWidth) / 2.0f;\n",
      "                } else {\n",
      "                    textStartX = (fullWidth - fontX) / 2.0f;\n",
      "                }\n",
      "        }\n",
      "\n",
      "        float barStartY = 0.0f;\n",
      "        float textStartY = 0.0f;\n",
      "        if (this.font != null) {\n",
      "            if (this.baseline <= 0.0f) {\n",
      "                textStartY = this.barHeight - this.baseline;\n",
      "            } else {\n",
      "                textStartY = -this.getDescender();\n",
      "                barStartY = textStartY + this.baseline;\n",
      "            }\n",
      "        }\n",
      "        byte[] bars = getBarsMSI(bCode);\n",
      "        if (barColor != null) {\n",
      "            canvas.setFillColor(barColor);\n",
      "        }\n",
      "        for (int k = 0; k < bars.length; ++k) {\n",
      "            float w = (float) bars[k] * this.x;\n",
      "            if (bars[k] == 1)\n",
      "                canvas.rectangle((double) barStartX, (double) barStartY, (double) (w - this.inkSpreading), (double) this.barHeight);\n",
      "            barStartX += this.x;\n",
      "        }\n",
      "        canvas.fill();\n",
      "        if (this.font != null) {\n",
      "            if (textColor != null) {\n",
      "                canvas.setFillColor(textColor);\n",
      "            }\n",
      "            canvas.beginText();\n",
      "            canvas.setFontAndSize(this.font, this.size);\n",
      "            canvas.setTextMatrix(textStartX, textStartY);\n",
      "            canvas.showText(fullCode);\n",
      "            canvas.endText();\n",
      "        }\n",
      "        return this.getBarcodeSize();\n",
      "    }\n",
      "\n",
      "    // Android-Conversion-Skip-Block-Start (java.awt library isn't available on Android)\n",
      "    /**\n",
      "     * Creates a <CODE>java.awt.Image</CODE>. This image only\n",
      "     * contains the bars without any text.\n",
      "     *\n",
      "     * @param foreground the color of the bars\n",
      "     * @param background the color of the background\n",
      "     * @return the image\n",
      "     */\n",
      "    @Override\n",
      "    public java.awt.Image createAwtImage(java.awt.Color foreground, java.awt.Color background) {\n",
      "        int foregroundColor = (foreground == null) ? DEFAULT_BAR_FOREGROUND_COLOR.getRGB() : foreground.getRGB();\n",
      "        int backgroundColor = (background == null) ? DEFAULT_BAR_BACKGROUND_COLOR.getRGB() : background.getRGB();\n",
      "        java.awt.Canvas canvas = new java.awt.Canvas();\n",
      "        String bCode = this.code;\n",
      "        if (this.generateChecksum) {\n",
      "            bCode = bCode + Integer.toString(getChecksum(this.code));\n",
      "        }\n",
      "\n",
      "        byte[] bars = getBarsMSI(bCode);\n",
      "        int fullWidth = bars.length;\n",
      "        int fullHeight = (int) this.barHeight;\n",
      "        int[] pix = new int[fullWidth * fullHeight];\n",
      "\n",
      "        for (int x = 0; x < bars.length; x++) {\n",
      "            int color = (bars[x] == 1 ? foregroundColor : backgroundColor);\n",
      "            for (int y = 0; y < fullHeight; y++) {\n",
      "                int currentPixel = x + (y * fullWidth);\n",
      "                pix[currentPixel] = color;\n",
      "            }\n",
      "        }\n",
      "        return canvas.createImage(new java.awt.image.MemoryImageSource(fullWidth, fullHeight, pix, 0, fullWidth));\n",
      "    }\n",
      "    // Android-Conversion-Skip-Block-End\n",
      "\n",
      "    /**\n",
      "     * Creates the bars.\n",
      "     *\n",
      "     * @param text the text to create the bars.\n",
      "     * @return the bars\n",
      "     */\n",
      "    public static byte[] getBarsMSI(String text) {\n",
      "        if (text == null) {\n",
      "            throw new IllegalArgumentException(\"Valid code required to generate MSI barcode.\");\n",
      "        }\n",
      "        byte[] bars = new byte[((text.length()) * BARS_PER_CHARACTER) + 7];\n",
      "        System.arraycopy(BARS_START, 0, bars, 0, 3);\n",
      "        for (int x = 0; x < text.length(); x++) {\n",
      "            char ch = text.charAt(x);\n",
      "            int idx = CHARS.indexOf(ch);\n",
      "            if (idx < 0) {\n",
      "                throw new IllegalArgumentException(\"The character \" + text.charAt(x) + \" is illegal in MSI bar codes.\");\n",
      "            }\n",
      "            System.arraycopy(BARS[idx], 0, bars, 3 + x * 12, 12);\n",
      "        }\n",
      "        System.arraycopy(BARS_END, 0, bars, bars.length - 4, 4);\n",
      "        return bars;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Calculates the mod 10 checksum digit using the Luhn algorithm.\n",
      "     *\n",
      "     * @param text the barcode data\n",
      "     * @return the checksum digit\n",
      "     */\n",
      "    public static int getChecksum(String text) {\n",
      "        if (text == null) {\n",
      "            throw new IllegalArgumentException(\"Valid code required to generate checksum for MSI barcode\");\n",
      "        }\n",
      "        int[] digits = new int[text.length()];\n",
      "        for (int x = 0; x < text.length(); x++) {\n",
      "            digits[x] = (int)(text.charAt(x) - '0');\n",
      "            if (digits[x] < 0 || digits[x] > 9) {\n",
      "                throw new IllegalArgumentException(\"The character \" + text.charAt(x) + \" is illegal in MSI bar codes.\");\n",
      "            }\n",
      "        }\n",
      "        int sum = 0;\n",
      "        int length = digits.length;\n",
      "        for (int i = 0; i < length; i++) {\n",
      "            int digit = digits[length - i - 1];\n",
      "            if (i % 2 == 0) {\n",
      "                digit *= 2;\n",
      "            }\n",
      "            sum += digit > 9 ? digit - 9 : digit;\n",
      "        }\n",
      "        return (sum * 9) % 10;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.barcodes;\n",
      "\n",
      "import com.itextpdf.kernel.exceptions.PdfException;\n",
      "import com.itextpdf.kernel.colors.ColorConstants;\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "import com.itextpdf.kernel.pdf.PdfPage;\n",
      "import com.itextpdf.kernel.pdf.PdfReader;\n",
      "import com.itextpdf.kernel.pdf.PdfWriter;\n",
      "import com.itextpdf.kernel.pdf.canvas.PdfCanvas;\n",
      "import com.itextpdf.kernel.utils.CompareTool;\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.type.IntegrationTest;\n",
      "\n",
      "import org.junit.AfterClass;\n",
      "import org.junit.Assert;\n",
      "import org.junit.BeforeClass;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "\n",
      "import java.io.IOException;\n",
      "\n",
      "@Category(IntegrationTest.class)\n",
      "public class BarcodeMSITest extends ExtendedITextTest {\n",
      "\n",
      "    public static final String sourceFolder = \"./src/test/resources/com/itextpdf/barcodes/\";\n",
      "    public static final String destinationFolder = \"./target/test/com/itextpdf/barcodes/BarcodeMSI/\";\n",
      "\n",
      "    @BeforeClass\n",
      "    public static void beforeClass() {\n",
      "        createDestinationFolder(destinationFolder);\n",
      "    }\n",
      "\n",
      "    @AfterClass\n",
      "    public static void afterClass() {\n",
      "        CompareTool.cleanup(destinationFolder);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcode01Test() throws IOException, PdfException, InterruptedException {\n",
      "        String filename = \"barcodeMSI_01.pdf\";\n",
      "        PdfWriter writer = CompareTool.createTestPdfWriter(destinationFolder + filename);\n",
      "        PdfDocument document = new PdfDocument(writer);\n",
      "        PdfPage page = document.addNewPage();\n",
      "        PdfCanvas canvas = new PdfCanvas(page);\n",
      "        Barcode1D barcode = new BarcodeMSI(document);\n",
      "        barcode.setCode(\"123456789\");\n",
      "        barcode.setGenerateChecksum(true);\n",
      "        barcode.setTextAlignment(Barcode1D.ALIGN_LEFT);\n",
      "        barcode.placeBarcode(canvas, ColorConstants.BLACK, ColorConstants.WHITE);\n",
      "        document.close();\n",
      "        Assert.assertNull(new CompareTool().compareByContent(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder, \"diff01_\"));\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void barcode02Test() throws IOException, InterruptedException {\n",
      "        String filename = \"barcodeMSI_02.pdf\";\n",
      "        PdfWriter writer = CompareTool.createTestPdfWriter(destinationFolder + filename);\n",
      "        PdfReader reader = new PdfReader(sourceFolder + \"DocumentWithTrueTypeFont1.pdf\");\n",
      "        PdfDocument document = new PdfDocument(reader, writer);\n",
      "        PdfCanvas canvas = new PdfCanvas(document.getLastPage());\n",
      "        Barcode1D barcode = new BarcodeMSI(document);\n",
      "        barcode.setCode(\"9781935182610\");\n",
      "        barcode.setTextAlignment(Barcode1D.ALIGN_LEFT);\n",
      "        barcode.placeBarcode(canvas, ColorConstants.BLACK, ColorConstants.WHITE);\n",
      "        document.close();\n",
      "        Assert.assertNull(new CompareTool().compareByContent(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder, \"diff02_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcodeAlignRightTest() throws IOException, InterruptedException {\n",
      "        final String filename = \"barcodeMSI_AlignRight.pdf\";\n",
      "        final PdfWriter writer = CompareTool.createTestPdfWriter(destinationFolder + filename);\n",
      "        final PdfDocument document = new PdfDocument(writer);\n",
      "        final PdfPage page = document.addNewPage();\n",
      "        final PdfCanvas canvas = new PdfCanvas(page);\n",
      "        final Barcode1D barcode = new BarcodeMSI(document);\n",
      "        barcode.setCode(\"123456789\");\n",
      "        barcode.setGenerateChecksum(true);\n",
      "        barcode.setTextAlignment(Barcode1D.ALIGN_RIGHT);\n",
      "        barcode.placeBarcode(canvas, ColorConstants.BLACK, ColorConstants.RED);\n",
      "        document.close();\n",
      "        Assert.assertNull(new CompareTool().compareByContent(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder, \"diff01_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcodeAlignCenterTest() throws IOException, InterruptedException {\n",
      "        final String filename = \"barcodeMSI_AlignCenter.pdf\";\n",
      "        final PdfWriter writer = CompareTool.createTestPdfWriter(destinationFolder + filename);\n",
      "        final PdfDocument document = new PdfDocument(writer);\n",
      "        final PdfPage page = document.addNewPage();\n",
      "        final PdfCanvas canvas = new PdfCanvas(page);\n",
      "        final Barcode1D barcode = new BarcodeMSI(document);\n",
      "        barcode.setCode(\"123456789\");\n",
      "        barcode.setGenerateChecksum(true);\n",
      "        barcode.setTextAlignment(Barcode1D.ALIGN_CENTER);\n",
      "        barcode.placeBarcode(canvas, ColorConstants.BLACK, ColorConstants.RED);\n",
      "        document.close();\n",
      "        Assert.assertNull(new CompareTool().compareByContent(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder, \"diff01_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcode03Test() {\n",
      "        byte[] expected = {1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1};\n",
      "        byte[] barcodeBytes = BarcodeMSI.getBarsMSI(\"1234\");\n",
      "        boolean isEqual = java.util.Arrays.equals(expected, barcodeBytes);\n",
      "        Assert.assertTrue(isEqual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcode04Test() {\n",
      "        String code = \"0987654321\";\n",
      "        int expectedChecksum = 7;\n",
      "        int checksum = BarcodeMSI.getChecksum(code);\n",
      "        Assert.assertEquals(checksum, expectedChecksum);\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "BarcodeMSI::::getBarcodeSize()": [
        138,
        162
      ],
      "BarcodeMSI::::createAwtImage(java.awt.Color,java.awt.Color)": [
        287,
        310
      ],
      "BarcodeMSI::::getBarsMSI(java.lang.String)": [
        319,
        335
      ],
      "BarcodeMSI::::getChecksum(java.lang.String)": [
        343,
        364
      ]
    },
    "test_method_lines_dic": {
      "BarcodeMSITest::::beforeClass()": [
        51,
        54
      ],
      "BarcodeMSITest::::afterClass()": [
        56,
        59
      ],
      "BarcodeMSITest::::barcode01Test()": [
        61,
        75
      ],
      "BarcodeMSITest::::barcode02Test()": [
        78,
        91
      ],
      "BarcodeMSITest::::barcodeAlignRightTest()": [
        93,
        107
      ],
      "BarcodeMSITest::::barcodeAlignCenterTest()": [
        109,
        123
      ],
      "BarcodeMSITest::::barcode03Test()": [
        125,
        131
      ],
      "BarcodeMSITest::::barcode04Test()": [
        133,
        139
      ]
    },
    "reverse_method_lines_dic": {
      "138": "BarcodeMSI::::getBarcodeSize()",
      "139": "BarcodeMSI::::getBarcodeSize()",
      "140": "BarcodeMSI::::getBarcodeSize()",
      "141": "BarcodeMSI::::getBarcodeSize()",
      "142": "BarcodeMSI::::getBarcodeSize()",
      "143": "BarcodeMSI::::getBarcodeSize()",
      "144": "BarcodeMSI::::getBarcodeSize()",
      "145": "BarcodeMSI::::getBarcodeSize()",
      "146": "BarcodeMSI::::getBarcodeSize()",
      "147": "BarcodeMSI::::getBarcodeSize()",
      "148": "BarcodeMSI::::getBarcodeSize()",
      "149": "BarcodeMSI::::getBarcodeSize()",
      "150": "BarcodeMSI::::getBarcodeSize()",
      "151": "BarcodeMSI::::getBarcodeSize()",
      "152": "BarcodeMSI::::getBarcodeSize()",
      "153": "BarcodeMSI::::getBarcodeSize()",
      "154": "BarcodeMSI::::getBarcodeSize()",
      "155": "BarcodeMSI::::getBarcodeSize()",
      "156": "BarcodeMSI::::getBarcodeSize()",
      "157": "BarcodeMSI::::getBarcodeSize()",
      "158": "BarcodeMSI::::getBarcodeSize()",
      "159": "BarcodeMSI::::getBarcodeSize()",
      "160": "BarcodeMSI::::getBarcodeSize()",
      "161": "BarcodeMSI::::getBarcodeSize()",
      "162": "BarcodeMSI::::getBarcodeSize()",
      "287": "BarcodeMSI::::createAwtImage(java.awt.Color,java.awt.Color)",
      "288": "BarcodeMSI::::createAwtImage(java.awt.Color,java.awt.Color)",
      "289": "BarcodeMSI::::createAwtImage(java.awt.Color,java.awt.Color)",
      "290": "BarcodeMSI::::createAwtImage(java.awt.Color,java.awt.Color)",
      "291": "BarcodeMSI::::createAwtImage(java.awt.Color,java.awt.Color)",
      "292": "BarcodeMSI::::createAwtImage(java.awt.Color,java.awt.Color)",
      "293": "BarcodeMSI::::createAwtImage(java.awt.Color,java.awt.Color)",
      "294": "BarcodeMSI::::createAwtImage(java.awt.Color,java.awt.Color)",
      "295": "BarcodeMSI::::createAwtImage(java.awt.Color,java.awt.Color)",
      "296": "BarcodeMSI::::createAwtImage(java.awt.Color,java.awt.Color)",
      "297": "BarcodeMSI::::createAwtImage(java.awt.Color,java.awt.Color)",
      "298": "BarcodeMSI::::createAwtImage(java.awt.Color,java.awt.Color)",
      "299": "BarcodeMSI::::createAwtImage(java.awt.Color,java.awt.Color)",
      "300": "BarcodeMSI::::createAwtImage(java.awt.Color,java.awt.Color)",
      "301": "BarcodeMSI::::createAwtImage(java.awt.Color,java.awt.Color)",
      "302": "BarcodeMSI::::createAwtImage(java.awt.Color,java.awt.Color)",
      "303": "BarcodeMSI::::createAwtImage(java.awt.Color,java.awt.Color)",
      "304": "BarcodeMSI::::createAwtImage(java.awt.Color,java.awt.Color)",
      "305": "BarcodeMSI::::createAwtImage(java.awt.Color,java.awt.Color)",
      "306": "BarcodeMSI::::createAwtImage(java.awt.Color,java.awt.Color)",
      "307": "BarcodeMSI::::createAwtImage(java.awt.Color,java.awt.Color)",
      "308": "BarcodeMSI::::createAwtImage(java.awt.Color,java.awt.Color)",
      "309": "BarcodeMSI::::createAwtImage(java.awt.Color,java.awt.Color)",
      "310": "BarcodeMSI::::createAwtImage(java.awt.Color,java.awt.Color)",
      "319": "BarcodeMSI::::getBarsMSI(java.lang.String)",
      "320": "BarcodeMSI::::getBarsMSI(java.lang.String)",
      "321": "BarcodeMSI::::getBarsMSI(java.lang.String)",
      "322": "BarcodeMSI::::getBarsMSI(java.lang.String)",
      "323": "BarcodeMSI::::getBarsMSI(java.lang.String)",
      "324": "BarcodeMSI::::getBarsMSI(java.lang.String)",
      "325": "BarcodeMSI::::getBarsMSI(java.lang.String)",
      "326": "BarcodeMSI::::getBarsMSI(java.lang.String)",
      "327": "BarcodeMSI::::getBarsMSI(java.lang.String)",
      "328": "BarcodeMSI::::getBarsMSI(java.lang.String)",
      "329": "BarcodeMSI::::getBarsMSI(java.lang.String)",
      "330": "BarcodeMSI::::getBarsMSI(java.lang.String)",
      "331": "BarcodeMSI::::getBarsMSI(java.lang.String)",
      "332": "BarcodeMSI::::getBarsMSI(java.lang.String)",
      "333": "BarcodeMSI::::getBarsMSI(java.lang.String)",
      "334": "BarcodeMSI::::getBarsMSI(java.lang.String)",
      "335": "BarcodeMSI::::getBarsMSI(java.lang.String)",
      "343": "BarcodeMSI::::getChecksum(java.lang.String)",
      "344": "BarcodeMSI::::getChecksum(java.lang.String)",
      "345": "BarcodeMSI::::getChecksum(java.lang.String)",
      "346": "BarcodeMSI::::getChecksum(java.lang.String)",
      "347": "BarcodeMSI::::getChecksum(java.lang.String)",
      "348": "BarcodeMSI::::getChecksum(java.lang.String)",
      "349": "BarcodeMSI::::getChecksum(java.lang.String)",
      "350": "BarcodeMSI::::getChecksum(java.lang.String)",
      "351": "BarcodeMSI::::getChecksum(java.lang.String)",
      "352": "BarcodeMSI::::getChecksum(java.lang.String)",
      "353": "BarcodeMSI::::getChecksum(java.lang.String)",
      "354": "BarcodeMSI::::getChecksum(java.lang.String)",
      "355": "BarcodeMSI::::getChecksum(java.lang.String)",
      "356": "BarcodeMSI::::getChecksum(java.lang.String)",
      "357": "BarcodeMSI::::getChecksum(java.lang.String)",
      "358": "BarcodeMSI::::getChecksum(java.lang.String)",
      "359": "BarcodeMSI::::getChecksum(java.lang.String)",
      "360": "BarcodeMSI::::getChecksum(java.lang.String)",
      "361": "BarcodeMSI::::getChecksum(java.lang.String)",
      "362": "BarcodeMSI::::getChecksum(java.lang.String)",
      "363": "BarcodeMSI::::getChecksum(java.lang.String)",
      "364": "BarcodeMSI::::getChecksum(java.lang.String)"
    },
    "test_reverse_method_lines_dic": {
      "51": "BarcodeMSITest::::beforeClass()",
      "52": "BarcodeMSITest::::beforeClass()",
      "53": "BarcodeMSITest::::beforeClass()",
      "54": "BarcodeMSITest::::beforeClass()",
      "56": "BarcodeMSITest::::afterClass()",
      "57": "BarcodeMSITest::::afterClass()",
      "58": "BarcodeMSITest::::afterClass()",
      "59": "BarcodeMSITest::::afterClass()",
      "61": "BarcodeMSITest::::barcode01Test()",
      "62": "BarcodeMSITest::::barcode01Test()",
      "63": "BarcodeMSITest::::barcode01Test()",
      "64": "BarcodeMSITest::::barcode01Test()",
      "65": "BarcodeMSITest::::barcode01Test()",
      "66": "BarcodeMSITest::::barcode01Test()",
      "67": "BarcodeMSITest::::barcode01Test()",
      "68": "BarcodeMSITest::::barcode01Test()",
      "69": "BarcodeMSITest::::barcode01Test()",
      "70": "BarcodeMSITest::::barcode01Test()",
      "71": "BarcodeMSITest::::barcode01Test()",
      "72": "BarcodeMSITest::::barcode01Test()",
      "73": "BarcodeMSITest::::barcode01Test()",
      "74": "BarcodeMSITest::::barcode01Test()",
      "75": "BarcodeMSITest::::barcode01Test()",
      "78": "BarcodeMSITest::::barcode02Test()",
      "79": "BarcodeMSITest::::barcode02Test()",
      "80": "BarcodeMSITest::::barcode02Test()",
      "81": "BarcodeMSITest::::barcode02Test()",
      "82": "BarcodeMSITest::::barcode02Test()",
      "83": "BarcodeMSITest::::barcode02Test()",
      "84": "BarcodeMSITest::::barcode02Test()",
      "85": "BarcodeMSITest::::barcode02Test()",
      "86": "BarcodeMSITest::::barcode02Test()",
      "87": "BarcodeMSITest::::barcode02Test()",
      "88": "BarcodeMSITest::::barcode02Test()",
      "89": "BarcodeMSITest::::barcode02Test()",
      "90": "BarcodeMSITest::::barcode02Test()",
      "91": "BarcodeMSITest::::barcode02Test()",
      "93": "BarcodeMSITest::::barcodeAlignRightTest()",
      "94": "BarcodeMSITest::::barcodeAlignRightTest()",
      "95": "BarcodeMSITest::::barcodeAlignRightTest()",
      "96": "BarcodeMSITest::::barcodeAlignRightTest()",
      "97": "BarcodeMSITest::::barcodeAlignRightTest()",
      "98": "BarcodeMSITest::::barcodeAlignRightTest()",
      "99": "BarcodeMSITest::::barcodeAlignRightTest()",
      "100": "BarcodeMSITest::::barcodeAlignRightTest()",
      "101": "BarcodeMSITest::::barcodeAlignRightTest()",
      "102": "BarcodeMSITest::::barcodeAlignRightTest()",
      "103": "BarcodeMSITest::::barcodeAlignRightTest()",
      "104": "BarcodeMSITest::::barcodeAlignRightTest()",
      "105": "BarcodeMSITest::::barcodeAlignRightTest()",
      "106": "BarcodeMSITest::::barcodeAlignRightTest()",
      "107": "BarcodeMSITest::::barcodeAlignRightTest()",
      "109": "BarcodeMSITest::::barcodeAlignCenterTest()",
      "110": "BarcodeMSITest::::barcodeAlignCenterTest()",
      "111": "BarcodeMSITest::::barcodeAlignCenterTest()",
      "112": "BarcodeMSITest::::barcodeAlignCenterTest()",
      "113": "BarcodeMSITest::::barcodeAlignCenterTest()",
      "114": "BarcodeMSITest::::barcodeAlignCenterTest()",
      "115": "BarcodeMSITest::::barcodeAlignCenterTest()",
      "116": "BarcodeMSITest::::barcodeAlignCenterTest()",
      "117": "BarcodeMSITest::::barcodeAlignCenterTest()",
      "118": "BarcodeMSITest::::barcodeAlignCenterTest()",
      "119": "BarcodeMSITest::::barcodeAlignCenterTest()",
      "120": "BarcodeMSITest::::barcodeAlignCenterTest()",
      "121": "BarcodeMSITest::::barcodeAlignCenterTest()",
      "122": "BarcodeMSITest::::barcodeAlignCenterTest()",
      "123": "BarcodeMSITest::::barcodeAlignCenterTest()",
      "125": "BarcodeMSITest::::barcode03Test()",
      "126": "BarcodeMSITest::::barcode03Test()",
      "127": "BarcodeMSITest::::barcode03Test()",
      "128": "BarcodeMSITest::::barcode03Test()",
      "129": "BarcodeMSITest::::barcode03Test()",
      "130": "BarcodeMSITest::::barcode03Test()",
      "131": "BarcodeMSITest::::barcode03Test()",
      "133": "BarcodeMSITest::::barcode04Test()",
      "134": "BarcodeMSITest::::barcode04Test()",
      "135": "BarcodeMSITest::::barcode04Test()",
      "136": "BarcodeMSITest::::barcode04Test()",
      "137": "BarcodeMSITest::::barcode04Test()",
      "138": "BarcodeMSITest::::barcode04Test()",
      "139": "BarcodeMSITest::::barcode04Test()"
    },
    "tests": [
      {
        "test_lines": [
          61,
          75
        ],
        "covered_lines": [
          45,
          50,
          55,
          111,
          112,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          140,
          141,
          142,
          143,
          144,
          145,
          149,
          150,
          153,
          154,
          155,
          158,
          159,
          160,
          161,
          206,
          207,
          210,
          211,
          212,
          213,
          214,
          217,
          218,
          219,
          222,
          223,
          224,
          225,
          226,
          228,
          244,
          245,
          246,
          247,
          250,
          251,
          254,
          255,
          256,
          258,
          259,
          260,
          261,
          262,
          264,
          265,
          266,
          267,
          269,
          270,
          271,
          272,
          273,
          275,
          320,
          323,
          324,
          325,
          326,
          327,
          328,
          331,
          333,
          334,
          344,
          347,
          348,
          349,
          350,
          354,
          355,
          356,
          357,
          358,
          359,
          361,
          363
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          78,
          91
        ],
        "covered_lines": [
          45,
          50,
          55,
          111,
          112,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          140,
          141,
          142,
          143,
          144,
          145,
          149,
          150,
          153,
          154,
          158,
          159,
          160,
          161,
          206,
          207,
          210,
          211,
          212,
          213,
          214,
          217,
          218,
          222,
          223,
          224,
          225,
          226,
          228,
          244,
          245,
          246,
          247,
          250,
          251,
          254,
          255,
          256,
          258,
          259,
          260,
          261,
          262,
          264,
          265,
          266,
          267,
          269,
          270,
          271,
          272,
          273,
          275,
          320,
          323,
          324,
          325,
          326,
          327,
          328,
          331,
          333,
          334
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          93,
          107
        ],
        "covered_lines": [
          45,
          50,
          55,
          111,
          112,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          140,
          141,
          142,
          143,
          144,
          145,
          149,
          150,
          153,
          154,
          155,
          158,
          159,
          160,
          161,
          206,
          207,
          210,
          211,
          212,
          213,
          214,
          217,
          218,
          219,
          222,
          223,
          224,
          225,
          226,
          230,
          233,
          235,
          244,
          245,
          246,
          247,
          250,
          251,
          254,
          255,
          256,
          258,
          259,
          260,
          261,
          262,
          264,
          265,
          266,
          267,
          269,
          270,
          271,
          272,
          273,
          275,
          320,
          323,
          324,
          325,
          326,
          327,
          328,
          331,
          333,
          334,
          344,
          347,
          348,
          349,
          350,
          354,
          355,
          356,
          357,
          358,
          359,
          361,
          363
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          109,
          123
        ],
        "covered_lines": [
          45,
          50,
          55,
          111,
          112,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          140,
          141,
          142,
          143,
          144,
          145,
          149,
          150,
          153,
          154,
          155,
          158,
          159,
          160,
          161,
          206,
          207,
          210,
          211,
          212,
          213,
          214,
          217,
          218,
          219,
          222,
          223,
          224,
          225,
          226,
          237,
          240,
          244,
          245,
          246,
          247,
          250,
          251,
          254,
          255,
          256,
          258,
          259,
          260,
          261,
          262,
          264,
          265,
          266,
          267,
          269,
          270,
          271,
          272,
          273,
          275,
          320,
          323,
          324,
          325,
          326,
          327,
          328,
          331,
          333,
          334,
          344,
          347,
          348,
          349,
          350,
          354,
          355,
          356,
          357,
          358,
          359,
          361,
          363
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          125,
          131
        ],
        "covered_lines": [
          45,
          50,
          55,
          320,
          323,
          324,
          325,
          326,
          327,
          328,
          331,
          333,
          334
        ],
        "label": "BarcodeMSI::::getBarsMSI(java.lang.String)"
      },
      {
        "test_lines": [
          133,
          139
        ],
        "covered_lines": [
          45,
          50,
          55,
          344,
          347,
          348,
          349,
          350,
          354,
          355,
          356,
          357,
          358,
          359,
          361,
          363
        ],
        "label": "BarcodeMSI::::getChecksum(java.lang.String)"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/barcodes/src/main/java/com/itextpdf/barcodes/BarcodeCodabar.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.barcodes;\n",
      "\n",
      "import com.itextpdf.barcodes.exceptions.BarcodesExceptionMessageConstant;\n",
      "import com.itextpdf.kernel.colors.Color;\n",
      "import com.itextpdf.kernel.font.PdfFont;\n",
      "import com.itextpdf.kernel.geom.Rectangle;\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "import com.itextpdf.kernel.pdf.canvas.PdfCanvas;\n",
      "\n",
      "/**\n",
      " * Implementation of the Codabar barcode.\n",
      " * <p>\n",
      " * Codabar was designed to be accurately read even when printed on dot-matrix printers for multi-part forms such as\n",
      " * FedEx airbills and blood bank forms, where variants are still in use as of 2007. Although newer symbologies hold more\n",
      " * information in a smaller space.\n",
      " */\n",
      "public class BarcodeCodabar extends Barcode1D {\n",
      "\n",
      "    /**\n",
      "     * The index chars to <CODE>BARS</CODE>.\n",
      "     */\n",
      "    private static final String CHARS = \"0123456789-$:/.+ABCD\";\n",
      "\n",
      "    private static final int START_STOP_IDX = 16;\n",
      "\n",
      "    /**\n",
      "     * The bars to generate the code.\n",
      "     */\n",
      "    private static final byte[][] BARS =\n",
      "            {\n",
      "\n",
      "                    // 0\n",
      "                    {0, 0, 0, 0, 0, 1, 1},\n",
      "\n",
      "                    // 1\n",
      "                    {0, 0, 0, 0, 1, 1, 0},\n",
      "\n",
      "                    // 2\n",
      "                    {0, 0, 0, 1, 0, 0, 1},\n",
      "\n",
      "                    // 3\n",
      "                    {1, 1, 0, 0, 0, 0, 0},\n",
      "\n",
      "                    // 4\n",
      "                    {0, 0, 1, 0, 0, 1, 0},\n",
      "\n",
      "                    // 5\n",
      "                    {1, 0, 0, 0, 0, 1, 0},\n",
      "\n",
      "                    // 6\n",
      "                    {0, 1, 0, 0, 0, 0, 1},\n",
      "\n",
      "                    // 7\n",
      "                    {0, 1, 0, 0, 1, 0, 0},\n",
      "\n",
      "                    // 8\n",
      "                    {0, 1, 1, 0, 0, 0, 0},\n",
      "\n",
      "                    // 9\n",
      "                    {1, 0, 0, 1, 0, 0, 0},\n",
      "\n",
      "                    // -\n",
      "                    {0, 0, 0, 1, 1, 0, 0},\n",
      "\n",
      "                    // $\n",
      "                    {0, 0, 1, 1, 0, 0, 0},\n",
      "\n",
      "                    // :\n",
      "                    {1, 0, 0, 0, 1, 0, 1},\n",
      "\n",
      "                    // /\n",
      "                    {1, 0, 1, 0, 0, 0, 1},\n",
      "\n",
      "                    // .\n",
      "                    {1, 0, 1, 0, 1, 0, 0},\n",
      "\n",
      "                    // +\n",
      "                    {0, 0, 1, 0, 1, 0, 1},\n",
      "\n",
      "                    // a\n",
      "                    {0, 0, 1, 1, 0, 1, 0},\n",
      "\n",
      "                    // b\n",
      "                    {0, 1, 0, 1, 0, 0, 1},\n",
      "\n",
      "                    // c\n",
      "                    {0, 0, 0, 1, 0, 1, 1},\n",
      "\n",
      "                    // d\n",
      "                    {0, 0, 0, 1, 1, 1, 0}\n",
      "            };\n",
      "\n",
      "    /**\n",
      "     * Creates a new BarcodeCodabar.\n",
      "     * To generate the font the {@link PdfDocument#getDefaultFont()} will be implicitly called.\n",
      "     * If you want to use this barcode in PDF/A documents, please consider using {@link #BarcodeCodabar(PdfDocument, PdfFont)}.\n",
      "     *\n",
      "     * @param document The document to which the barcode will be added\n",
      "     */\n",
      "    public BarcodeCodabar(PdfDocument document) {\n",
      "        this(document, document.getDefaultFont());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates a new BarcodeCodabar.\n",
      "     *\n",
      "     * @param document The document to which the barcode will be added\n",
      "     * @param font The font to use\n",
      "     */\n",
      "    public BarcodeCodabar(PdfDocument document, PdfFont font) {\n",
      "        super(document);\n",
      "        this.x = 0.8f;\n",
      "        this.n = 2;\n",
      "        this.font = font;\n",
      "        this.size = 8;\n",
      "        this.baseline = size;\n",
      "        this.barHeight = size * 3;\n",
      "        this.textAlignment = ALIGN_CENTER;\n",
      "        this.generateChecksum = false;\n",
      "        this.checksumText = false;\n",
      "        this.startStopText = false;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates the bars.\n",
      "     *\n",
      "     * @param text the text to create the bars\n",
      "     * @return the bars\n",
      "     */\n",
      "    public static byte[] getBarsCodabar(String text) {\n",
      "        text = text.toUpperCase();\n",
      "        int len = text.length();\n",
      "        if (len < 2) {\n",
      "            throw new IllegalArgumentException(\n",
      "                    BarcodesExceptionMessageConstant.CODABAR_MUST_HAVE_AT_LEAST_START_AND_STOP_CHARACTER);\n",
      "        }\n",
      "        if (CHARS.indexOf(text.charAt(0)) < START_STOP_IDX || CHARS.indexOf(text.charAt(len - 1)) < START_STOP_IDX) {\n",
      "            throw new IllegalArgumentException(\n",
      "                    BarcodesExceptionMessageConstant.CODABAR_MUST_HAVE_ONE_ABCD_AS_START_STOP_CHARACTER);\n",
      "        }\n",
      "        byte[] bars = new byte[text.length() * 8 - 1];\n",
      "        for (int k = 0; k < len; ++k) {\n",
      "            int idx = CHARS.indexOf(text.charAt(k));\n",
      "            if (idx >= START_STOP_IDX && k > 0 && k < len - 1) {\n",
      "                throw new IllegalArgumentException(BarcodesExceptionMessageConstant.\n",
      "                        IN_CODABAR_START_STOP_CHARACTERS_ARE_ONLY_ALLOWED_AT_THE_EXTREMES);\n",
      "            }\n",
      "            if (idx < 0) {\n",
      "                throw new IllegalArgumentException(\n",
      "                        BarcodesExceptionMessageConstant.ILLEGAL_CHARACTER_IN_CODABAR_BARCODE);\n",
      "            }\n",
      "            System.arraycopy(BARS[idx], 0, bars, k * 8, 7);\n",
      "        }\n",
      "        return bars;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Calculates the checksum.\n",
      "     *\n",
      "     * @param code the value to calculate the checksum for\n",
      "     *\n",
      "     * @return the checksum for the given value\n",
      "     */\n",
      "    public static String calculateChecksum(String code) {\n",
      "        if (code.length() < 2)\n",
      "            return code;\n",
      "        String text = code.toUpperCase();\n",
      "        int sum = 0;\n",
      "        int len = text.length();\n",
      "        for (int k = 0; k < len; ++k) {\n",
      "            sum += CHARS.indexOf(text.charAt(k));\n",
      "        }\n",
      "        sum = (sum + 15) / 16 * 16 - sum;\n",
      "        return code.substring(0, len - 1) + CHARS.charAt(sum) + code.substring(len - 1);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets the maximum area that the barcode and the text, if\n",
      "     * any, will occupy. The lower left corner is always (0, 0).\n",
      "     *\n",
      "     * @return the size the barcode occupies.\n",
      "     */\n",
      "    public Rectangle getBarcodeSize() {\n",
      "        float fontX = 0;\n",
      "        float fontY = 0;\n",
      "        String text = code;\n",
      "        if (generateChecksum && checksumText) {\n",
      "            text = calculateChecksum(code);\n",
      "        }\n",
      "        if (!startStopText) {\n",
      "            text = text.substring(1, text.length() - 1);\n",
      "        }\n",
      "        if (font != null) {\n",
      "            if (baseline > 0) {\n",
      "                fontY = baseline - getDescender();\n",
      "            } else {\n",
      "                fontY = -baseline + size;\n",
      "            }\n",
      "            fontX = font.getWidth(altText != null ? altText : text, size);\n",
      "        }\n",
      "        text = code;\n",
      "        if (generateChecksum) {\n",
      "            text = calculateChecksum(code);\n",
      "        }\n",
      "        byte[] bars = getBarsCodabar(text);\n",
      "        int wide = 0;\n",
      "        for (int k = 0; k < bars.length; ++k) {\n",
      "            wide += bars[k];\n",
      "        }\n",
      "        int narrow = bars.length - wide;\n",
      "        float fullWidth = x * (narrow + wide * n);\n",
      "        fullWidth = Math.max(fullWidth, fontX);\n",
      "        float fullHeight = barHeight + fontY;\n",
      "        return new Rectangle(fullWidth, fullHeight);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Places the barcode in a <CODE>PdfCanvas</CODE>. The\n",
      "     * barcode is always placed at coordinates (0, 0). Use the\n",
      "     * translation matrix to move it elsewhere.<p>\n",
      "     * The bars and text are written in the following colors:\n",
      "     * <br>\n",
      "     * <TABLE BORDER=\"1\" SUMMARY=\"barcode properties\">\n",
      "     * <TR>\n",
      "     * <TH><CODE>barColor</CODE></TH>\n",
      "     * <TH><CODE>textColor</CODE></TH>\n",
      "     * <TH>Result</TH>\n",
      "     * </TR>\n",
      "     * <TR>\n",
      "     * <TD><CODE>null</CODE></TD>\n",
      "     * <TD><CODE>null</CODE></TD>\n",
      "     * <TD>bars and text painted with current fill color</TD>\n",
      "     * </TR>\n",
      "     * <TR>\n",
      "     * <TD><CODE>barColor</CODE></TD>\n",
      "     * <TD><CODE>null</CODE></TD>\n",
      "     * <TD>bars and text painted with <CODE>barColor</CODE></TD>\n",
      "     * </TR>\n",
      "     * <TR>\n",
      "     * <TD><CODE>null</CODE></TD>\n",
      "     * <TD><CODE>textColor</CODE></TD>\n",
      "     * <TD>bars painted with current color<br>text painted with <CODE>textColor</CODE></TD>\n",
      "     * </TR>\n",
      "     * <TR>\n",
      "     * <TD><CODE>barColor</CODE></TD>\n",
      "     * <TD><CODE>textColor</CODE></TD>\n",
      "     * <TD>bars painted with <CODE>barColor</CODE><br>text painted with <CODE>textColor</CODE></TD>\n",
      "     * </TR>\n",
      "     * </TABLE>\n",
      "     *\n",
      "     * @param canvas    the <CODE>PdfCanvas</CODE> where the barcode will be placed\n",
      "     * @param barColor  the color of the bars. It can be <CODE>null</CODE>\n",
      "     * @param textColor the color of the text. It can be <CODE>null</CODE>\n",
      "     * @return the dimensions the barcode occupies\n",
      "     */\n",
      "    public Rectangle placeBarcode(PdfCanvas canvas, Color barColor, Color textColor) {\n",
      "        String fullCode = code;\n",
      "        if (generateChecksum && checksumText) {\n",
      "            fullCode = calculateChecksum(code);\n",
      "        }\n",
      "        if (!startStopText) {\n",
      "            fullCode = fullCode.substring(1, fullCode.length() - 1);\n",
      "        }\n",
      "        float fontX = 0;\n",
      "        if (font != null) {\n",
      "            fontX = font.getWidth(fullCode = altText != null ? altText : fullCode, size);\n",
      "        }\n",
      "        byte[] bars = getBarsCodabar(generateChecksum ? calculateChecksum(code) : code);\n",
      "        int wide = 0;\n",
      "        for (int k = 0; k < bars.length; ++k) {\n",
      "            wide += bars[k];\n",
      "        }\n",
      "        int narrow = bars.length - wide;\n",
      "        float fullWidth = x * (narrow + wide * n);\n",
      "        float barStartX = 0;\n",
      "        float textStartX = 0;\n",
      "        switch (textAlignment) {\n",
      "            case ALIGN_LEFT:\n",
      "                break;\n",
      "            case ALIGN_RIGHT:\n",
      "                if (fontX > fullWidth) {\n",
      "                    barStartX = fontX - fullWidth;\n",
      "                } else {\n",
      "                    textStartX = fullWidth - fontX;\n",
      "                }\n",
      "                break;\n",
      "            default:\n",
      "                if (fontX > fullWidth) {\n",
      "                    barStartX = (fontX - fullWidth) / 2;\n",
      "                } else {\n",
      "                    textStartX = (fullWidth - fontX) / 2;\n",
      "                }\n",
      "                break;\n",
      "        }\n",
      "        float barStartY = 0;\n",
      "        float textStartY = 0;\n",
      "        if (font != null) {\n",
      "            if (baseline <= 0) {\n",
      "                textStartY = barHeight - baseline;\n",
      "            } else {\n",
      "                textStartY = -getDescender();\n",
      "                barStartY = textStartY + baseline;\n",
      "            }\n",
      "        }\n",
      "        boolean print = true;\n",
      "        if (barColor != null) {\n",
      "            canvas.setFillColor(barColor);\n",
      "        }\n",
      "        for (int k = 0; k < bars.length; ++k) {\n",
      "            float w = (bars[k] == 0 ? x : x * n);\n",
      "            if (print) {\n",
      "                canvas.rectangle(barStartX, barStartY, w - inkSpreading, barHeight);\n",
      "            }\n",
      "            print = !print;\n",
      "            barStartX += w;\n",
      "        }\n",
      "        canvas.fill();\n",
      "        if (font != null) {\n",
      "            if (textColor != null) {\n",
      "                canvas.setFillColor(textColor);\n",
      "            }\n",
      "            canvas.beginText();\n",
      "            canvas.setFontAndSize(font, size);\n",
      "            canvas.setTextMatrix(textStartX, textStartY);\n",
      "            canvas.showText(fullCode);\n",
      "            canvas.endText();\n",
      "        }\n",
      "        return getBarcodeSize();\n",
      "    }\n",
      "\n",
      "    // Android-Conversion-Skip-Block-Start (java.awt library isn't available on Android)\n",
      "    /**\n",
      "     * Creates a <CODE>java.awt.Image</CODE>. This image only\n",
      "     * contains the bars without any text.\n",
      "     *\n",
      "     * @param foreground the color of the bars\n",
      "     * @param background the color of the background\n",
      "     * @return the image\n",
      "     */\n",
      "    public java.awt.Image createAwtImage(java.awt.Color foreground, java.awt.Color background) {\n",
      "        int f = (foreground == null) ? DEFAULT_BAR_FOREGROUND_COLOR.getRGB() : foreground.getRGB();\n",
      "        int g = (background == null) ? DEFAULT_BAR_BACKGROUND_COLOR.getRGB() : background.getRGB();\n",
      "        java.awt.Canvas canvas = new java.awt.Canvas();\n",
      "\n",
      "        byte[] bars = getBarsCodabar(generateChecksum ? calculateChecksum(code) : code);\n",
      "        int wide = 0;\n",
      "        for (int k = 0; k < bars.length; ++k) {\n",
      "            wide += bars[k];\n",
      "        }\n",
      "        int narrow = bars.length - wide;\n",
      "        int fullWidth = narrow + wide * (int) n;\n",
      "        boolean print = true;\n",
      "        int ptr = 0;\n",
      "        int height = (int) barHeight;\n",
      "        int[] pix = new int[fullWidth * height];\n",
      "        for (int k = 0; k < bars.length; ++k) {\n",
      "            int w = (bars[k] == 0 ? 1 : (int) n);\n",
      "            int c = g;\n",
      "            if (print) {\n",
      "                c = f;\n",
      "            }\n",
      "            print = !print;\n",
      "            for (int j = 0; j < w; ++j) {\n",
      "                pix[ptr++] = c;\n",
      "            }\n",
      "        }\n",
      "        for (int k = fullWidth; k < pix.length; k += fullWidth) {\n",
      "            System.arraycopy(pix, 0, pix, k, fullWidth);\n",
      "        }\n",
      "        return canvas.createImage(new java.awt.image.MemoryImageSource(fullWidth, height, pix, 0, fullWidth));\n",
      "    }\n",
      "    // Android-Conversion-Skip-Block-End\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.barcodes;\n",
      "\n",
      "\n",
      "import com.itextpdf.barcodes.exceptions.BarcodesExceptionMessageConstant;\n",
      "import com.itextpdf.kernel.exceptions.PdfException;\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "import com.itextpdf.kernel.pdf.PdfPage;\n",
      "import com.itextpdf.kernel.pdf.PdfWriter;\n",
      "import com.itextpdf.kernel.pdf.canvas.PdfCanvas;\n",
      "import com.itextpdf.kernel.utils.CompareTool;\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.type.IntegrationTest;\n",
      "\n",
      "import java.io.ByteArrayOutputStream;\n",
      "import java.io.IOException;\n",
      "import org.junit.AfterClass;\n",
      "import org.junit.Assert;\n",
      "import org.junit.BeforeClass;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(IntegrationTest.class)\n",
      "public class BarcodeCodabarTest extends ExtendedITextTest {\n",
      "\n",
      "    private static final String SOURCE_FOLDER = \"./src/test/resources/com/itextpdf/barcodes/\";\n",
      "    private static final String DESTINATION_FOLDER = \"./target/test/com/itextpdf/barcodes/Codabar/\";\n",
      "\n",
      "    @BeforeClass\n",
      "    public static void beforeClass() {\n",
      "        createDestinationFolder(DESTINATION_FOLDER);\n",
      "    }\n",
      "\n",
      "    @AfterClass\n",
      "    public static void afterClass() {\n",
      "        CompareTool.cleanup(DESTINATION_FOLDER);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcode01Test() throws IOException, PdfException, InterruptedException {\n",
      "        String filename = \"codabar.pdf\";\n",
      "        PdfWriter writer = CompareTool.createTestPdfWriter(DESTINATION_FOLDER + filename);\n",
      "        PdfDocument document = new PdfDocument(writer);\n",
      "\n",
      "        PdfPage page = document.addNewPage();\n",
      "        PdfCanvas canvas = new PdfCanvas(page);\n",
      "\n",
      "        BarcodeCodabar codabar = new BarcodeCodabar(document);\n",
      "        codabar.setCode(\"A123A\");\n",
      "        codabar.setStartStopText(true);\n",
      "\n",
      "        codabar.placeBarcode(canvas, null, null);\n",
      "\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool()\n",
      "                .compareByContent(DESTINATION_FOLDER + filename, SOURCE_FOLDER + \"cmp_\" + filename, DESTINATION_FOLDER,\n",
      "                        \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcodeHasNoAbcdAsStartCharacterTest() {\n",
      "        PdfDocument pdfDocument = new PdfDocument(new PdfWriter(new ByteArrayOutputStream()));\n",
      "        BarcodeCodabar codabar = new BarcodeCodabar(pdfDocument);\n",
      "        Exception exception = Assert.assertThrows(IllegalArgumentException.class,\n",
      "                () -> codabar.getBarsCodabar(\"qbcd\"));\n",
      "        Assert.assertEquals(BarcodesExceptionMessageConstant.CODABAR_MUST_HAVE_ONE_ABCD_AS_START_STOP_CHARACTER,\n",
      "                exception.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcodeHasNoAbcdAsStopCharacterTest() {\n",
      "        PdfDocument pdfDocument = new PdfDocument(new PdfWriter(new ByteArrayOutputStream()));\n",
      "        BarcodeCodabar codabar = new BarcodeCodabar(pdfDocument);\n",
      "        Exception exception = Assert.assertThrows(IllegalArgumentException.class,\n",
      "                () -> codabar.getBarsCodabar(\"abcf\"));\n",
      "        Assert.assertEquals(BarcodesExceptionMessageConstant.CODABAR_MUST_HAVE_ONE_ABCD_AS_START_STOP_CHARACTER,\n",
      "                exception.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcodeHasNoAbcdAsStartAndStopCharacterTest() {\n",
      "        PdfDocument pdfDocument = new PdfDocument(new PdfWriter(new ByteArrayOutputStream()));\n",
      "        BarcodeCodabar codabar = new BarcodeCodabar(pdfDocument);\n",
      "        Exception exception = Assert.assertThrows(IllegalArgumentException.class,\n",
      "                () -> codabar.getBarsCodabar(\"qbcq\"));\n",
      "        Assert.assertEquals(BarcodesExceptionMessageConstant.CODABAR_MUST_HAVE_ONE_ABCD_AS_START_STOP_CHARACTER,\n",
      "                exception.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcodeHasNoStartAndStopCharacterTest() {\n",
      "        PdfDocument pdfDocument = new PdfDocument(new PdfWriter(new ByteArrayOutputStream()));\n",
      "        BarcodeCodabar codabar = new BarcodeCodabar(pdfDocument);\n",
      "        Exception exception = Assert.assertThrows(IllegalArgumentException.class,\n",
      "                () -> codabar.getBarsCodabar(\"\"));\n",
      "        Assert.assertEquals(BarcodesExceptionMessageConstant.CODABAR_MUST_HAVE_AT_LEAST_START_AND_STOP_CHARACTER,\n",
      "                exception.getMessage());\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "BarcodeCodabar::::getBarsCodabar(java.lang.String)": [
        152,
        177
      ],
      "BarcodeCodabar::::calculateChecksum(java.lang.String)": [
        186,
        197
      ],
      "BarcodeCodabar::::getBarcodeSize()": [
        205,
        237
      ],
      "BarcodeCodabar::::createAwtImage(java.awt.Color,java.awt.Color)": [
        362,
        393
      ]
    },
    "test_method_lines_dic": {
      "BarcodeCodabarTest::::beforeClass()": [
        50,
        53
      ],
      "BarcodeCodabarTest::::afterClass()": [
        55,
        58
      ],
      "BarcodeCodabarTest::::barcode01Test()": [
        60,
        80
      ],
      "BarcodeCodabarTest::::barcodeHasNoAbcdAsStartCharacterTest()": [
        82,
        90
      ],
      "BarcodeCodabarTest::::barcodeHasNoAbcdAsStopCharacterTest()": [
        92,
        100
      ],
      "BarcodeCodabarTest::::barcodeHasNoAbcdAsStartAndStopCharacterTest()": [
        102,
        110
      ],
      "BarcodeCodabarTest::::barcodeHasNoStartAndStopCharacterTest()": [
        112,
        120
      ]
    },
    "reverse_method_lines_dic": {
      "152": "BarcodeCodabar::::getBarsCodabar(java.lang.String)",
      "153": "BarcodeCodabar::::getBarsCodabar(java.lang.String)",
      "154": "BarcodeCodabar::::getBarsCodabar(java.lang.String)",
      "155": "BarcodeCodabar::::getBarsCodabar(java.lang.String)",
      "156": "BarcodeCodabar::::getBarsCodabar(java.lang.String)",
      "157": "BarcodeCodabar::::getBarsCodabar(java.lang.String)",
      "158": "BarcodeCodabar::::getBarsCodabar(java.lang.String)",
      "159": "BarcodeCodabar::::getBarsCodabar(java.lang.String)",
      "160": "BarcodeCodabar::::getBarsCodabar(java.lang.String)",
      "161": "BarcodeCodabar::::getBarsCodabar(java.lang.String)",
      "162": "BarcodeCodabar::::getBarsCodabar(java.lang.String)",
      "163": "BarcodeCodabar::::getBarsCodabar(java.lang.String)",
      "164": "BarcodeCodabar::::getBarsCodabar(java.lang.String)",
      "165": "BarcodeCodabar::::getBarsCodabar(java.lang.String)",
      "166": "BarcodeCodabar::::getBarsCodabar(java.lang.String)",
      "167": "BarcodeCodabar::::getBarsCodabar(java.lang.String)",
      "168": "BarcodeCodabar::::getBarsCodabar(java.lang.String)",
      "169": "BarcodeCodabar::::getBarsCodabar(java.lang.String)",
      "170": "BarcodeCodabar::::getBarsCodabar(java.lang.String)",
      "171": "BarcodeCodabar::::getBarsCodabar(java.lang.String)",
      "172": "BarcodeCodabar::::getBarsCodabar(java.lang.String)",
      "173": "BarcodeCodabar::::getBarsCodabar(java.lang.String)",
      "174": "BarcodeCodabar::::getBarsCodabar(java.lang.String)",
      "175": "BarcodeCodabar::::getBarsCodabar(java.lang.String)",
      "176": "BarcodeCodabar::::getBarsCodabar(java.lang.String)",
      "177": "BarcodeCodabar::::getBarsCodabar(java.lang.String)",
      "186": "BarcodeCodabar::::calculateChecksum(java.lang.String)",
      "187": "BarcodeCodabar::::calculateChecksum(java.lang.String)",
      "188": "BarcodeCodabar::::calculateChecksum(java.lang.String)",
      "189": "BarcodeCodabar::::calculateChecksum(java.lang.String)",
      "190": "BarcodeCodabar::::calculateChecksum(java.lang.String)",
      "191": "BarcodeCodabar::::calculateChecksum(java.lang.String)",
      "192": "BarcodeCodabar::::calculateChecksum(java.lang.String)",
      "193": "BarcodeCodabar::::calculateChecksum(java.lang.String)",
      "194": "BarcodeCodabar::::calculateChecksum(java.lang.String)",
      "195": "BarcodeCodabar::::calculateChecksum(java.lang.String)",
      "196": "BarcodeCodabar::::calculateChecksum(java.lang.String)",
      "197": "BarcodeCodabar::::calculateChecksum(java.lang.String)",
      "205": "BarcodeCodabar::::getBarcodeSize()",
      "206": "BarcodeCodabar::::getBarcodeSize()",
      "207": "BarcodeCodabar::::getBarcodeSize()",
      "208": "BarcodeCodabar::::getBarcodeSize()",
      "209": "BarcodeCodabar::::getBarcodeSize()",
      "210": "BarcodeCodabar::::getBarcodeSize()",
      "211": "BarcodeCodabar::::getBarcodeSize()",
      "212": "BarcodeCodabar::::getBarcodeSize()",
      "213": "BarcodeCodabar::::getBarcodeSize()",
      "214": "BarcodeCodabar::::getBarcodeSize()",
      "215": "BarcodeCodabar::::getBarcodeSize()",
      "216": "BarcodeCodabar::::getBarcodeSize()",
      "217": "BarcodeCodabar::::getBarcodeSize()",
      "218": "BarcodeCodabar::::getBarcodeSize()",
      "219": "BarcodeCodabar::::getBarcodeSize()",
      "220": "BarcodeCodabar::::getBarcodeSize()",
      "221": "BarcodeCodabar::::getBarcodeSize()",
      "222": "BarcodeCodabar::::getBarcodeSize()",
      "223": "BarcodeCodabar::::getBarcodeSize()",
      "224": "BarcodeCodabar::::getBarcodeSize()",
      "225": "BarcodeCodabar::::getBarcodeSize()",
      "226": "BarcodeCodabar::::getBarcodeSize()",
      "227": "BarcodeCodabar::::getBarcodeSize()",
      "228": "BarcodeCodabar::::getBarcodeSize()",
      "229": "BarcodeCodabar::::getBarcodeSize()",
      "230": "BarcodeCodabar::::getBarcodeSize()",
      "231": "BarcodeCodabar::::getBarcodeSize()",
      "232": "BarcodeCodabar::::getBarcodeSize()",
      "233": "BarcodeCodabar::::getBarcodeSize()",
      "234": "BarcodeCodabar::::getBarcodeSize()",
      "235": "BarcodeCodabar::::getBarcodeSize()",
      "236": "BarcodeCodabar::::getBarcodeSize()",
      "237": "BarcodeCodabar::::getBarcodeSize()",
      "362": "BarcodeCodabar::::createAwtImage(java.awt.Color,java.awt.Color)",
      "363": "BarcodeCodabar::::createAwtImage(java.awt.Color,java.awt.Color)",
      "364": "BarcodeCodabar::::createAwtImage(java.awt.Color,java.awt.Color)",
      "365": "BarcodeCodabar::::createAwtImage(java.awt.Color,java.awt.Color)",
      "366": "BarcodeCodabar::::createAwtImage(java.awt.Color,java.awt.Color)",
      "367": "BarcodeCodabar::::createAwtImage(java.awt.Color,java.awt.Color)",
      "368": "BarcodeCodabar::::createAwtImage(java.awt.Color,java.awt.Color)",
      "369": "BarcodeCodabar::::createAwtImage(java.awt.Color,java.awt.Color)",
      "370": "BarcodeCodabar::::createAwtImage(java.awt.Color,java.awt.Color)",
      "371": "BarcodeCodabar::::createAwtImage(java.awt.Color,java.awt.Color)",
      "372": "BarcodeCodabar::::createAwtImage(java.awt.Color,java.awt.Color)",
      "373": "BarcodeCodabar::::createAwtImage(java.awt.Color,java.awt.Color)",
      "374": "BarcodeCodabar::::createAwtImage(java.awt.Color,java.awt.Color)",
      "375": "BarcodeCodabar::::createAwtImage(java.awt.Color,java.awt.Color)",
      "376": "BarcodeCodabar::::createAwtImage(java.awt.Color,java.awt.Color)",
      "377": "BarcodeCodabar::::createAwtImage(java.awt.Color,java.awt.Color)",
      "378": "BarcodeCodabar::::createAwtImage(java.awt.Color,java.awt.Color)",
      "379": "BarcodeCodabar::::createAwtImage(java.awt.Color,java.awt.Color)",
      "380": "BarcodeCodabar::::createAwtImage(java.awt.Color,java.awt.Color)",
      "381": "BarcodeCodabar::::createAwtImage(java.awt.Color,java.awt.Color)",
      "382": "BarcodeCodabar::::createAwtImage(java.awt.Color,java.awt.Color)",
      "383": "BarcodeCodabar::::createAwtImage(java.awt.Color,java.awt.Color)",
      "384": "BarcodeCodabar::::createAwtImage(java.awt.Color,java.awt.Color)",
      "385": "BarcodeCodabar::::createAwtImage(java.awt.Color,java.awt.Color)",
      "386": "BarcodeCodabar::::createAwtImage(java.awt.Color,java.awt.Color)",
      "387": "BarcodeCodabar::::createAwtImage(java.awt.Color,java.awt.Color)",
      "388": "BarcodeCodabar::::createAwtImage(java.awt.Color,java.awt.Color)",
      "389": "BarcodeCodabar::::createAwtImage(java.awt.Color,java.awt.Color)",
      "390": "BarcodeCodabar::::createAwtImage(java.awt.Color,java.awt.Color)",
      "391": "BarcodeCodabar::::createAwtImage(java.awt.Color,java.awt.Color)",
      "392": "BarcodeCodabar::::createAwtImage(java.awt.Color,java.awt.Color)",
      "393": "BarcodeCodabar::::createAwtImage(java.awt.Color,java.awt.Color)"
    },
    "test_reverse_method_lines_dic": {
      "50": "BarcodeCodabarTest::::beforeClass()",
      "51": "BarcodeCodabarTest::::beforeClass()",
      "52": "BarcodeCodabarTest::::beforeClass()",
      "53": "BarcodeCodabarTest::::beforeClass()",
      "55": "BarcodeCodabarTest::::afterClass()",
      "56": "BarcodeCodabarTest::::afterClass()",
      "57": "BarcodeCodabarTest::::afterClass()",
      "58": "BarcodeCodabarTest::::afterClass()",
      "60": "BarcodeCodabarTest::::barcode01Test()",
      "61": "BarcodeCodabarTest::::barcode01Test()",
      "62": "BarcodeCodabarTest::::barcode01Test()",
      "63": "BarcodeCodabarTest::::barcode01Test()",
      "64": "BarcodeCodabarTest::::barcode01Test()",
      "65": "BarcodeCodabarTest::::barcode01Test()",
      "66": "BarcodeCodabarTest::::barcode01Test()",
      "67": "BarcodeCodabarTest::::barcode01Test()",
      "68": "BarcodeCodabarTest::::barcode01Test()",
      "69": "BarcodeCodabarTest::::barcode01Test()",
      "70": "BarcodeCodabarTest::::barcode01Test()",
      "71": "BarcodeCodabarTest::::barcode01Test()",
      "72": "BarcodeCodabarTest::::barcode01Test()",
      "73": "BarcodeCodabarTest::::barcode01Test()",
      "74": "BarcodeCodabarTest::::barcode01Test()",
      "75": "BarcodeCodabarTest::::barcode01Test()",
      "76": "BarcodeCodabarTest::::barcode01Test()",
      "77": "BarcodeCodabarTest::::barcode01Test()",
      "78": "BarcodeCodabarTest::::barcode01Test()",
      "79": "BarcodeCodabarTest::::barcode01Test()",
      "80": "BarcodeCodabarTest::::barcode01Test()",
      "82": "BarcodeCodabarTest::::barcodeHasNoAbcdAsStartCharacterTest()",
      "83": "BarcodeCodabarTest::::barcodeHasNoAbcdAsStartCharacterTest()",
      "84": "BarcodeCodabarTest::::barcodeHasNoAbcdAsStartCharacterTest()",
      "85": "BarcodeCodabarTest::::barcodeHasNoAbcdAsStartCharacterTest()",
      "86": "BarcodeCodabarTest::::barcodeHasNoAbcdAsStartCharacterTest()",
      "87": "BarcodeCodabarTest::::barcodeHasNoAbcdAsStartCharacterTest()",
      "88": "BarcodeCodabarTest::::barcodeHasNoAbcdAsStartCharacterTest()",
      "89": "BarcodeCodabarTest::::barcodeHasNoAbcdAsStartCharacterTest()",
      "90": "BarcodeCodabarTest::::barcodeHasNoAbcdAsStartCharacterTest()",
      "92": "BarcodeCodabarTest::::barcodeHasNoAbcdAsStopCharacterTest()",
      "93": "BarcodeCodabarTest::::barcodeHasNoAbcdAsStopCharacterTest()",
      "94": "BarcodeCodabarTest::::barcodeHasNoAbcdAsStopCharacterTest()",
      "95": "BarcodeCodabarTest::::barcodeHasNoAbcdAsStopCharacterTest()",
      "96": "BarcodeCodabarTest::::barcodeHasNoAbcdAsStopCharacterTest()",
      "97": "BarcodeCodabarTest::::barcodeHasNoAbcdAsStopCharacterTest()",
      "98": "BarcodeCodabarTest::::barcodeHasNoAbcdAsStopCharacterTest()",
      "99": "BarcodeCodabarTest::::barcodeHasNoAbcdAsStopCharacterTest()",
      "100": "BarcodeCodabarTest::::barcodeHasNoAbcdAsStopCharacterTest()",
      "102": "BarcodeCodabarTest::::barcodeHasNoAbcdAsStartAndStopCharacterTest()",
      "103": "BarcodeCodabarTest::::barcodeHasNoAbcdAsStartAndStopCharacterTest()",
      "104": "BarcodeCodabarTest::::barcodeHasNoAbcdAsStartAndStopCharacterTest()",
      "105": "BarcodeCodabarTest::::barcodeHasNoAbcdAsStartAndStopCharacterTest()",
      "106": "BarcodeCodabarTest::::barcodeHasNoAbcdAsStartAndStopCharacterTest()",
      "107": "BarcodeCodabarTest::::barcodeHasNoAbcdAsStartAndStopCharacterTest()",
      "108": "BarcodeCodabarTest::::barcodeHasNoAbcdAsStartAndStopCharacterTest()",
      "109": "BarcodeCodabarTest::::barcodeHasNoAbcdAsStartAndStopCharacterTest()",
      "110": "BarcodeCodabarTest::::barcodeHasNoAbcdAsStartAndStopCharacterTest()",
      "112": "BarcodeCodabarTest::::barcodeHasNoStartAndStopCharacterTest()",
      "113": "BarcodeCodabarTest::::barcodeHasNoStartAndStopCharacterTest()",
      "114": "BarcodeCodabarTest::::barcodeHasNoStartAndStopCharacterTest()",
      "115": "BarcodeCodabarTest::::barcodeHasNoStartAndStopCharacterTest()",
      "116": "BarcodeCodabarTest::::barcodeHasNoStartAndStopCharacterTest()",
      "117": "BarcodeCodabarTest::::barcodeHasNoStartAndStopCharacterTest()",
      "118": "BarcodeCodabarTest::::barcodeHasNoStartAndStopCharacterTest()",
      "119": "BarcodeCodabarTest::::barcodeHasNoStartAndStopCharacterTest()",
      "120": "BarcodeCodabarTest::::barcodeHasNoStartAndStopCharacterTest()"
    },
    "tests": [
      {
        "test_lines": [
          60,
          80
        ],
        "covered_lines": [
          51,
          123,
          124,
          133,
          134,
          135,
          136,
          137,
          138,
          139,
          140,
          141,
          142,
          143,
          144,
          153,
          154,
          155,
          159,
          163,
          164,
          165,
          166,
          170,
          174,
          176,
          206,
          207,
          208,
          209,
          212,
          215,
          216,
          217,
          221,
          223,
          224,
          227,
          228,
          229,
          230,
          232,
          233,
          234,
          235,
          236,
          279,
          280,
          283,
          286,
          287,
          288,
          290,
          291,
          292,
          293,
          295,
          296,
          297,
          298,
          299,
          310,
          313,
          317,
          318,
          319,
          320,
          323,
          324,
          327,
          328,
          331,
          332,
          333,
          334,
          336,
          337,
          339,
          340,
          341,
          344,
          345,
          346,
          347,
          348,
          350
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          82,
          90
        ],
        "covered_lines": [
          51,
          123,
          124,
          133,
          134,
          135,
          136,
          137,
          138,
          139,
          140,
          141,
          142,
          143,
          144,
          153,
          154,
          155,
          159,
          160
        ],
        "label": "BarcodeCodabar::::getBarsCodabar(java.lang.String)"
      },
      {
        "test_lines": [
          92,
          100
        ],
        "covered_lines": [
          51,
          123,
          124,
          133,
          134,
          135,
          136,
          137,
          138,
          139,
          140,
          141,
          142,
          143,
          144,
          153,
          154,
          155,
          159,
          160
        ],
        "label": "BarcodeCodabar::::getBarsCodabar(java.lang.String)"
      },
      {
        "test_lines": [
          102,
          110
        ],
        "covered_lines": [
          51,
          123,
          124,
          133,
          134,
          135,
          136,
          137,
          138,
          139,
          140,
          141,
          142,
          143,
          144,
          153,
          154,
          155,
          159,
          160
        ],
        "label": "BarcodeCodabar::::getBarsCodabar(java.lang.String)"
      },
      {
        "test_lines": [
          112,
          120
        ],
        "covered_lines": [
          51,
          123,
          124,
          133,
          134,
          135,
          136,
          137,
          138,
          139,
          140,
          141,
          142,
          143,
          144,
          153,
          154,
          155,
          156
        ],
        "label": "BarcodeCodabar::::getBarsCodabar(java.lang.String)"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/barcodes/src/main/java/com/itextpdf/barcodes/Barcode128.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.barcodes;\n",
      "\n",
      "import com.itextpdf.barcodes.exceptions.BarcodesExceptionMessageConstant;\n",
      "import com.itextpdf.kernel.colors.Color;\n",
      "import com.itextpdf.kernel.exceptions.PdfException;\n",
      "import com.itextpdf.kernel.font.PdfFont;\n",
      "import com.itextpdf.kernel.geom.Rectangle;\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "import com.itextpdf.kernel.pdf.canvas.PdfCanvas;\n",
      "\n",
      "import java.util.HashMap;\n",
      "import java.util.Map;\n",
      "\n",
      "/**\n",
      " * BarCode 128 is a high-density linear barcode symbology defined in ISO/IEC 15417:2007.\n",
      " * It is used for alphanumeric or numeric-only barcodes. It can encode all 128 characters of ASCII\n",
      " */\n",
      "public class Barcode128 extends Barcode1D {\n",
      "\n",
      "    /** A type of barcode */\n",
      "    public static final int CODE128 = 1;\n",
      "    /** A type of barcode */\n",
      "    public static final int CODE128_UCC = 2;\n",
      "    /** A type of barcode */\n",
      "    public static final int CODE128_RAW = 3;\n",
      "    /**\n",
      "     * The bars to generate the code.\n",
      "     */\n",
      "    private static final byte[][] BARS = new byte[][]\n",
      "            {\n",
      "                    new byte[] {2, 1, 2, 2, 2, 2},\n",
      "                    new byte[] {2, 2, 2, 1, 2, 2},\n",
      "                    new byte[] {2, 2, 2, 2, 2, 1},\n",
      "                    new byte[] {1, 2, 1, 2, 2, 3},\n",
      "                    new byte[] {1, 2, 1, 3, 2, 2},\n",
      "                    new byte[] {1, 3, 1, 2, 2, 2},\n",
      "                    new byte[] {1, 2, 2, 2, 1, 3},\n",
      "                    new byte[] {1, 2, 2, 3, 1, 2},\n",
      "                    new byte[] {1, 3, 2, 2, 1, 2},\n",
      "                    new byte[] {2, 2, 1, 2, 1, 3},\n",
      "                    new byte[] {2, 2, 1, 3, 1, 2},\n",
      "                    new byte[] {2, 3, 1, 2, 1, 2},\n",
      "                    new byte[] {1, 1, 2, 2, 3, 2},\n",
      "                    new byte[] {1, 2, 2, 1, 3, 2},\n",
      "                    new byte[] {1, 2, 2, 2, 3, 1},\n",
      "                    new byte[] {1, 1, 3, 2, 2, 2},\n",
      "                    new byte[] {1, 2, 3, 1, 2, 2},\n",
      "                    new byte[] {1, 2, 3, 2, 2, 1},\n",
      "                    new byte[] {2, 2, 3, 2, 1, 1},\n",
      "                    new byte[] {2, 2, 1, 1, 3, 2},\n",
      "                    new byte[] {2, 2, 1, 2, 3, 1},\n",
      "                    new byte[] {2, 1, 3, 2, 1, 2},\n",
      "                    new byte[] {2, 2, 3, 1, 1, 2},\n",
      "                    new byte[] {3, 1, 2, 1, 3, 1},\n",
      "                    new byte[] {3, 1, 1, 2, 2, 2},\n",
      "                    new byte[] {3, 2, 1, 1, 2, 2},\n",
      "                    new byte[] {3, 2, 1, 2, 2, 1},\n",
      "                    new byte[] {3, 1, 2, 2, 1, 2},\n",
      "                    new byte[] {3, 2, 2, 1, 1, 2},\n",
      "                    new byte[] {3, 2, 2, 2, 1, 1},\n",
      "                    new byte[] {2, 1, 2, 1, 2, 3},\n",
      "                    new byte[] {2, 1, 2, 3, 2, 1},\n",
      "                    new byte[] {2, 3, 2, 1, 2, 1},\n",
      "                    new byte[] {1, 1, 1, 3, 2, 3},\n",
      "                    new byte[] {1, 3, 1, 1, 2, 3},\n",
      "                    new byte[] {1, 3, 1, 3, 2, 1},\n",
      "                    new byte[] {1, 1, 2, 3, 1, 3},\n",
      "                    new byte[] {1, 3, 2, 1, 1, 3},\n",
      "                    new byte[] {1, 3, 2, 3, 1, 1},\n",
      "                    new byte[] {2, 1, 1, 3, 1, 3},\n",
      "                    new byte[] {2, 3, 1, 1, 1, 3},\n",
      "                    new byte[] {2, 3, 1, 3, 1, 1},\n",
      "                    new byte[] {1, 1, 2, 1, 3, 3},\n",
      "                    new byte[] {1, 1, 2, 3, 3, 1},\n",
      "                    new byte[] {1, 3, 2, 1, 3, 1},\n",
      "                    new byte[] {1, 1, 3, 1, 2, 3},\n",
      "                    new byte[] {1, 1, 3, 3, 2, 1},\n",
      "                    new byte[] {1, 3, 3, 1, 2, 1},\n",
      "                    new byte[] {3, 1, 3, 1, 2, 1},\n",
      "                    new byte[] {2, 1, 1, 3, 3, 1},\n",
      "                    new byte[] {2, 3, 1, 1, 3, 1},\n",
      "                    new byte[] {2, 1, 3, 1, 1, 3},\n",
      "                    new byte[] {2, 1, 3, 3, 1, 1},\n",
      "                    new byte[] {2, 1, 3, 1, 3, 1},\n",
      "                    new byte[] {3, 1, 1, 1, 2, 3},\n",
      "                    new byte[] {3, 1, 1, 3, 2, 1},\n",
      "                    new byte[] {3, 3, 1, 1, 2, 1},\n",
      "                    new byte[] {3, 1, 2, 1, 1, 3},\n",
      "                    new byte[] {3, 1, 2, 3, 1, 1},\n",
      "                    new byte[] {3, 3, 2, 1, 1, 1},\n",
      "                    new byte[] {3, 1, 4, 1, 1, 1},\n",
      "                    new byte[] {2, 2, 1, 4, 1, 1},\n",
      "                    new byte[] {4, 3, 1, 1, 1, 1},\n",
      "                    new byte[] {1, 1, 1, 2, 2, 4},\n",
      "                    new byte[] {1, 1, 1, 4, 2, 2},\n",
      "                    new byte[] {1, 2, 1, 1, 2, 4},\n",
      "                    new byte[] {1, 2, 1, 4, 2, 1},\n",
      "                    new byte[] {1, 4, 1, 1, 2, 2},\n",
      "                    new byte[] {1, 4, 1, 2, 2, 1},\n",
      "                    new byte[] {1, 1, 2, 2, 1, 4},\n",
      "                    new byte[] {1, 1, 2, 4, 1, 2},\n",
      "                    new byte[] {1, 2, 2, 1, 1, 4},\n",
      "                    new byte[] {1, 2, 2, 4, 1, 1},\n",
      "                    new byte[] {1, 4, 2, 1, 1, 2},\n",
      "                    new byte[] {1, 4, 2, 2, 1, 1},\n",
      "                    new byte[] {2, 4, 1, 2, 1, 1},\n",
      "                    new byte[] {2, 2, 1, 1, 1, 4},\n",
      "                    new byte[] {4, 1, 3, 1, 1, 1},\n",
      "                    new byte[] {2, 4, 1, 1, 1, 2},\n",
      "                    new byte[] {1, 3, 4, 1, 1, 1},\n",
      "                    new byte[] {1, 1, 1, 2, 4, 2},\n",
      "                    new byte[] {1, 2, 1, 1, 4, 2},\n",
      "                    new byte[] {1, 2, 1, 2, 4, 1},\n",
      "                    new byte[] {1, 1, 4, 2, 1, 2},\n",
      "                    new byte[] {1, 2, 4, 1, 1, 2},\n",
      "                    new byte[] {1, 2, 4, 2, 1, 1},\n",
      "                    new byte[] {4, 1, 1, 2, 1, 2},\n",
      "                    new byte[] {4, 2, 1, 1, 1, 2},\n",
      "                    new byte[] {4, 2, 1, 2, 1, 1},\n",
      "                    new byte[] {2, 1, 2, 1, 4, 1},\n",
      "                    new byte[] {2, 1, 4, 1, 2, 1},\n",
      "                    new byte[] {4, 1, 2, 1, 2, 1},\n",
      "                    new byte[] {1, 1, 1, 1, 4, 3},\n",
      "                    new byte[] {1, 1, 1, 3, 4, 1},\n",
      "                    new byte[] {1, 3, 1, 1, 4, 1},\n",
      "                    new byte[] {1, 1, 4, 1, 1, 3},\n",
      "                    new byte[] {1, 1, 4, 3, 1, 1},\n",
      "                    new byte[] {4, 1, 1, 1, 1, 3},\n",
      "                    new byte[] {4, 1, 1, 3, 1, 1},\n",
      "                    new byte[] {1, 1, 3, 1, 4, 1},\n",
      "                    new byte[] {1, 1, 4, 1, 3, 1},\n",
      "                    new byte[] {3, 1, 1, 1, 4, 1},\n",
      "                    new byte[] {4, 1, 1, 1, 3, 1},\n",
      "                    new byte[] {2, 1, 1, 4, 1, 2},\n",
      "                    new byte[] {2, 1, 1, 2, 1, 4},\n",
      "                    new byte[] {2, 1, 1, 2, 3, 2}\n",
      "            };\n",
      "\n",
      "    /**\n",
      "     * The stop bars.\n",
      "     */\n",
      "    private static final byte[] BARS_STOP = new byte[] {2, 3, 3, 1, 1, 1, 2};\n",
      "    /**\n",
      "     * The charset code change.\n",
      "     */\n",
      "    public static final char CODE_AB_TO_C = (char) 99;\n",
      "    /**\n",
      "     * The charset code change.\n",
      "     */\n",
      "    public static final char CODE_AC_TO_B = (char) 100;\n",
      "    /**\n",
      "     * The charset code change.\n",
      "     */\n",
      "    public static final char CODE_BC_TO_A = (char) 101;\n",
      "    /**\n",
      "     * The code for UCC/EAN-128.\n",
      "     */\n",
      "    public static final char FNC1_INDEX = (char) 102;\n",
      "    /**\n",
      "     * The start code.\n",
      "     */\n",
      "    public static final char START_A = (char) 103;\n",
      "    /**\n",
      "     * The start code.\n",
      "     */\n",
      "    public static final char START_B = (char) 104;\n",
      "    /**\n",
      "     * The start code.\n",
      "     */\n",
      "    public static final char START_C = (char) 105;\n",
      "\n",
      "    public static final char FNC1 = '\\u00ca';\n",
      "    public static final char DEL = '\\u00c3';\n",
      "    public static final char FNC3 = '\\u00c4';\n",
      "    public static final char FNC2 = '\\u00c5';\n",
      "    public static final char SHIFT = '\\u00c6';\n",
      "    public static final char CODE_C = '\\u00c7';\n",
      "    public static final char CODE_A = '\\u00c8';\n",
      "    public static final char FNC4 = '\\u00c8';\n",
      "    public static final char STARTA = '\\u00cb';\n",
      "    public static final char STARTB = '\\u00cc';\n",
      "    public static final char STARTC = '\\u00cd';\n",
      "\n",
      "    private static Map<Integer, Integer> ais = new HashMap<>();\n",
      "\n",
      "    /**\n",
      "     * Creates new Barcode128.\n",
      "     * To generate the font the {@link PdfDocument#getDefaultFont()} will be implicitly called.\n",
      "     * If you want to use this barcode in PDF/A documents, please consider using {@link #Barcode128(PdfDocument, PdfFont)}.\n",
      "     *\n",
      "     * @param document The document to which the barcode will be added\n",
      "     */\n",
      "    public Barcode128(PdfDocument document) {\n",
      "        this(document, document.getDefaultFont());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates new Barcode128, which will use the provided font\n",
      "     *\n",
      "     * @param document The document to which the barcode will be added\n",
      "     * @param font The font to use\n",
      "     */\n",
      "    public Barcode128(PdfDocument document, PdfFont font) {\n",
      "        super(document);\n",
      "        this.x = 0.8f;\n",
      "        this.font = font;\n",
      "        this.size = 8;\n",
      "        this.baseline = size;\n",
      "        this.barHeight = size * 3;\n",
      "        this.textAlignment = ALIGN_CENTER;\n",
      "        this.codeType = CODE128;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * The code set to be used to start encoding.\n",
      "     */\n",
      "    public enum Barcode128CodeSet {\n",
      "        A,\n",
      "        B,\n",
      "        C,\n",
      "        AUTO\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Sets the code set to use.\n",
      "     *\n",
      "     * @param codeSet the code set to use.\n",
      "     */\n",
      "    public void setCodeSet(Barcode128CodeSet codeSet) {\n",
      "        this.codeSet = codeSet;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Get the code set that is used.\n",
      "     *\n",
      "     * @return the code set.\n",
      "     */\n",
      "    public Barcode128CodeSet getCodeSet() {\n",
      "        return this.codeSet;\n",
      "    }\n",
      "\n",
      "    private Barcode128CodeSet codeSet = Barcode128CodeSet.AUTO;\n",
      "\n",
      "    /**\n",
      "     * Removes the FNC1 codes in the text.\n",
      "     * @param code  The text to clean\n",
      "     * @return      The cleaned text\n",
      "     */\n",
      "    public static String removeFNC1(String code) {\n",
      "        int len = code.length();\n",
      "        StringBuilder buf = new StringBuilder(len);\n",
      "        for (int k = 0; k < len; ++k) {\n",
      "            char c = code.charAt(k);\n",
      "            if (c >= 32 && c <= 126)\n",
      "                buf.append(c);\n",
      "        }\n",
      "        return buf.toString();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets the human readable text of a sequence of AI.\n",
      "     *\n",
      "     * @param code the text\n",
      "     * @return the human readable text\n",
      "     */\n",
      "    public static String getHumanReadableUCCEAN(String code) {\n",
      "        StringBuilder buf = new StringBuilder();\n",
      "        String fnc1 = new String(new char[]{FNC1});\n",
      "        while (true) {\n",
      "            if (code.startsWith(fnc1)) {\n",
      "                code = code.substring(1);\n",
      "                continue;\n",
      "            }\n",
      "            int n = 0;\n",
      "            int idlen = 0;\n",
      "            for (int k = 2; k < 5; ++k) {\n",
      "                if (code.length() < k)\n",
      "                    break;\n",
      "                int subcode = Integer.parseInt(code.substring(0, k));\n",
      "                n = ais.containsKey(subcode) ? (int)ais.get(subcode) : 0;\n",
      "                if (n != 0) {\n",
      "                    idlen = k;\n",
      "                    break;\n",
      "                }\n",
      "            }\n",
      "            if (idlen == 0)\n",
      "                break;\n",
      "            buf.append('(').append(code.substring(0, idlen)).append(')');\n",
      "            code = code.substring(idlen);\n",
      "            if (n > 0) {\n",
      "                n -= idlen;\n",
      "                if (code.length() <= n)\n",
      "                    break;\n",
      "                buf.append(removeFNC1(code.substring(0, n)));\n",
      "                code = code.substring(n);\n",
      "            } else {\n",
      "                int idx = code.indexOf(FNC1);\n",
      "                if (idx < 0)\n",
      "                    break;\n",
      "                buf.append(code.substring(0, idx));\n",
      "                code = code.substring(idx + 1);\n",
      "            }\n",
      "        }\n",
      "        buf.append(removeFNC1(code));\n",
      "        return buf.toString();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Converts the human readable text to the characters needed to\n",
      "     * create a barcode using the specified code set.\n",
      "     *\n",
      "     * @param text    the text to convert\n",
      "     * @param ucc     <CODE>true</CODE> if it is an UCC/EAN-128. In this case\n",
      "     *                the character FNC1 is added\n",
      "     * @param codeSet forced code set, or AUTO for optimized barcode.\n",
      "     * @return the code ready to be fed to getBarsCode128Raw()\n",
      "     */\n",
      "    public static String getRawText(String text, boolean ucc, Barcode128CodeSet codeSet) {\n",
      "        String out = \"\";\n",
      "        int tLen = text.length();\n",
      "        if (tLen == 0) {\n",
      "            out += getStartSymbol(codeSet);\n",
      "            if (ucc)\n",
      "                out += FNC1_INDEX;\n",
      "            return out;\n",
      "        }\n",
      "        int c;\n",
      "        for (int k = 0; k < tLen; ++k) {\n",
      "            c = text.charAt(k);\n",
      "            if (c > 127 && c != FNC1)\n",
      "                throw new PdfException(BarcodesExceptionMessageConstant.THERE_ARE_ILLEGAL_CHARACTERS_FOR_BARCODE_128);\n",
      "        }\n",
      "        c = text.charAt(0);\n",
      "        char currentCode = getStartSymbol(codeSet);\n",
      "        int index = 0;\n",
      "        if ((codeSet == Barcode128CodeSet.AUTO || codeSet == Barcode128CodeSet.C) && isNextDigits(text, index, 2)) {\n",
      "            currentCode = START_C;\n",
      "            out += currentCode;\n",
      "            if (ucc)\n",
      "                out += FNC1_INDEX;\n",
      "            String out2 = getPackedRawDigits(text, index, 2);\n",
      "            index += out2.charAt(0);\n",
      "            out += out2.substring(1);\n",
      "        } else if (c < ' ') {\n",
      "            currentCode = START_A;\n",
      "            out += currentCode;\n",
      "            if (ucc)\n",
      "                out += FNC1_INDEX;\n",
      "            out += (char) (c + 64);\n",
      "            ++index;\n",
      "        } else {\n",
      "            out += currentCode;\n",
      "            if (ucc)\n",
      "                out += FNC1_INDEX;\n",
      "            if (c == FNC1)\n",
      "                out += FNC1_INDEX;\n",
      "            else\n",
      "                out += (char) (c - ' ');\n",
      "            ++index;\n",
      "        }\n",
      "        if (codeSet != Barcode128CodeSet.AUTO && currentCode != getStartSymbol(codeSet))\n",
      "            throw new PdfException(BarcodesExceptionMessageConstant.THERE_ARE_ILLEGAL_CHARACTERS_FOR_BARCODE_128);\n",
      "        while (index < tLen) {\n",
      "            switch (currentCode) {\n",
      "                case START_A: {\n",
      "                    if (codeSet == Barcode128CodeSet.AUTO && isNextDigits(text, index, 4)) {\n",
      "                        currentCode = START_C;\n",
      "                        out += CODE_AB_TO_C;\n",
      "                        String out2 = getPackedRawDigits(text, index, 4);\n",
      "                        index += out2.charAt(0);\n",
      "                        out += out2.substring(1);\n",
      "                    } else {\n",
      "                        c = text.charAt(index++);\n",
      "                        if (c == FNC1)\n",
      "                            out += FNC1_INDEX;\n",
      "                        else if (c > '_') {\n",
      "                            currentCode = START_B;\n",
      "                            out += CODE_AC_TO_B;\n",
      "                            out += (char) (c - ' ');\n",
      "                        } else if (c < ' ')\n",
      "                            out += (char) (c + 64);\n",
      "                        else\n",
      "                            out += (char) (c - ' ');\n",
      "                    }\n",
      "                }\n",
      "                break;\n",
      "                case START_B: {\n",
      "                    if (codeSet == Barcode128CodeSet.AUTO && isNextDigits(text, index, 4)) {\n",
      "                        currentCode = START_C;\n",
      "                        out += CODE_AB_TO_C;\n",
      "                        String out2 = getPackedRawDigits(text, index, 4);\n",
      "                        index += out2.charAt(0);\n",
      "                        out += out2.substring(1);\n",
      "                    } else {\n",
      "                        c = text.charAt(index++);\n",
      "                        if (c == FNC1)\n",
      "                            out += FNC1_INDEX;\n",
      "                        else if (c < ' ') {\n",
      "                            currentCode = START_A;\n",
      "                            out += CODE_BC_TO_A;\n",
      "                            out += (char) (c + 64);\n",
      "                        } else {\n",
      "                            out += (char) (c - ' ');\n",
      "                        }\n",
      "                    }\n",
      "                }\n",
      "                break;\n",
      "                case START_C: {\n",
      "                    if (isNextDigits(text, index, 2)) {\n",
      "                        String out2 = getPackedRawDigits(text, index, 2);\n",
      "                        index += out2.charAt(0);\n",
      "                        out += out2.substring(1);\n",
      "                    } else {\n",
      "                        c = text.charAt(index++);\n",
      "                        if (c == FNC1)\n",
      "                            out += FNC1_INDEX;\n",
      "                        else if (c < ' ') {\n",
      "                            currentCode = START_A;\n",
      "                            out += CODE_BC_TO_A;\n",
      "                            out += (char) (c + 64);\n",
      "                        } else {\n",
      "                            currentCode = START_B;\n",
      "                            out += CODE_AC_TO_B;\n",
      "                            out += (char) (c - ' ');\n",
      "                        }\n",
      "                    }\n",
      "                }\n",
      "                break;\n",
      "            }\n",
      "            if (codeSet != Barcode128CodeSet.AUTO && currentCode != getStartSymbol(codeSet))\n",
      "                throw new PdfException(BarcodesExceptionMessageConstant.THERE_ARE_ILLEGAL_CHARACTERS_FOR_BARCODE_128);\n",
      "        }\n",
      "        return out;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Converts the human readable text to the characters needed to\n",
      "     * create a barcode. Some optimization is done to get the shortest code.\n",
      "     *\n",
      "     * @param text the text to convert\n",
      "     * @param ucc  <CODE>true</CODE> if it is an UCC/EAN-128. In this case\n",
      "     *             the character FNC1 is added\n",
      "     * @return the code ready to be fed to getBarsCode128Raw()\n",
      "     */\n",
      "    public static String getRawText(String text, boolean ucc) {\n",
      "        return getRawText(text, ucc, Barcode128CodeSet.AUTO);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Generates the bars. The input has the actual barcodes, not\n",
      "     * the human readable text.\n",
      "     *\n",
      "     * @param text the barcode\n",
      "     * @return the bars\n",
      "     */\n",
      "    public static byte[] getBarsCode128Raw(String text) {\n",
      "        int idx = text.indexOf('\\uffff');\n",
      "        if (idx >= 0)\n",
      "            text = text.substring(0, idx);\n",
      "        int chk = text.charAt(0);\n",
      "        for (int k = 1; k < text.length(); ++k)\n",
      "            chk += k * text.charAt(k);\n",
      "        chk = chk % 103;\n",
      "        text += (char) chk;\n",
      "        byte[] bars = new byte[(text.length() + 1) * 6 + 7];\n",
      "        int k;\n",
      "        for (k = 0; k < text.length(); ++k)\n",
      "            System.arraycopy(BARS[text.charAt(k)], 0, bars, k * 6, 6);\n",
      "        System.arraycopy(BARS_STOP, 0, bars, k * 6, 7);\n",
      "        return bars;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets the maximum area that the barcode and the text, if\n",
      "     * any, will occupy. The lower left corner is always (0, 0).\n",
      "     *\n",
      "     * @return the size the barcode occupies.\n",
      "     */\n",
      "    @Override\n",
      "    public Rectangle getBarcodeSize() {\n",
      "        float fontX = 0;\n",
      "        float fontY = 0;\n",
      "        String fullCode;\n",
      "        if (font != null) {\n",
      "            if (baseline > 0) {\n",
      "                fontY = baseline - getDescender();\n",
      "            } else {\n",
      "                fontY = -baseline + size;\n",
      "            }\n",
      "            if (codeType == CODE128_RAW) {\n",
      "                int idx = code.indexOf('\\uffff');\n",
      "                if (idx < 0) {\n",
      "                    fullCode = \"\";\n",
      "                } else {\n",
      "                    fullCode = code.substring(idx + 1);\n",
      "                }\n",
      "            } else if (codeType == CODE128_UCC) {\n",
      "                fullCode = getHumanReadableUCCEAN(code);\n",
      "            } else {\n",
      "                fullCode = removeFNC1(code);\n",
      "            }\n",
      "            fontX = font.getWidth(altText != null ? altText : fullCode, size);\n",
      "        }\n",
      "        if (codeType == CODE128_RAW) {\n",
      "            int idx = code.indexOf('\\uffff');\n",
      "            if (idx >= 0)\n",
      "                fullCode = code.substring(0, idx);\n",
      "            else\n",
      "                fullCode = code;\n",
      "        } else {\n",
      "            fullCode = getRawText(code, codeType == CODE128_UCC, codeSet);\n",
      "        }\n",
      "        int len = fullCode.length();\n",
      "        float fullWidth = (len + 2) * 11 * x + 2 * x;\n",
      "        fullWidth = Math.max(fullWidth, fontX);\n",
      "        float fullHeight = barHeight + fontY;\n",
      "\n",
      "        return new Rectangle(fullWidth, fullHeight);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Places the barcode in a <CODE>PdfCanvas</CODE>. The\n",
      "     * barcode is always placed at coordinates (0, 0). Use the\n",
      "     * translation matrix to move it elsewhere.<p>\n",
      "     * The bars and text are written in the following colors:\n",
      "     * <br>\n",
      "     * <TABLE BORDER=\"1\" SUMMARY=\"barcode properties\">\n",
      "     * <TR>\n",
      "     * <TH><CODE>barColor</CODE></TH>\n",
      "     * <TH><CODE>textColor</CODE></TH>\n",
      "     * <TH>Result</TH>\n",
      "     * </TR>\n",
      "     * <TR>\n",
      "     * <TD><CODE>null</CODE></TD>\n",
      "     * <TD><CODE>null</CODE></TD>\n",
      "     * <TD>bars and text painted with current fill color</TD>\n",
      "     * </TR>\n",
      "     * <TR>\n",
      "     * <TD><CODE>barColor</CODE></TD>\n",
      "     * <TD><CODE>null</CODE></TD>\n",
      "     * <TD>bars and text painted with <CODE>barColor</CODE></TD>\n",
      "     * </TR>\n",
      "     * <TR>\n",
      "     * <TD><CODE>null</CODE></TD>\n",
      "     * <TD><CODE>textColor</CODE></TD>\n",
      "     * <TD>bars painted with current color<br>text painted with <CODE>textColor</CODE></TD>\n",
      "     * </TR>\n",
      "     * <TR>\n",
      "     * <TD><CODE>barColor</CODE></TD>\n",
      "     * <TD><CODE>textColor</CODE></TD>\n",
      "     * <TD>bars painted with <CODE>barColor</CODE><br>text painted with <CODE>textColor</CODE></TD>\n",
      "     * </TR>\n",
      "     * </TABLE>\n",
      "     *\n",
      "     * @param canvas    the <CODE>PdfCanvas</CODE> where the barcode will be placed\n",
      "     * @param barColor  the color of the bars. It can be <CODE>null</CODE>\n",
      "     * @param textColor the color of the text. It can be <CODE>null</CODE>\n",
      "     * @return the dimensions the barcode occupies\n",
      "     */\n",
      "    @Override\n",
      "    public Rectangle placeBarcode(PdfCanvas canvas, Color barColor, Color textColor) {\n",
      "        String fullCode;\n",
      "        if (codeType == CODE128_RAW) {\n",
      "            int idx = code.indexOf('\\uffff');\n",
      "            if (idx < 0) {\n",
      "                fullCode = \"\";\n",
      "            } else {\n",
      "                fullCode = code.substring(idx + 1);\n",
      "            }\n",
      "        } else if (codeType == CODE128_UCC) {\n",
      "            fullCode = getHumanReadableUCCEAN(code);\n",
      "        } else {\n",
      "            fullCode = removeFNC1(code);\n",
      "        }\n",
      "        float fontX = 0;\n",
      "        if (font != null) {\n",
      "            fontX = font.getWidth(fullCode = altText != null ? altText : fullCode, size);\n",
      "        }\n",
      "        String bCode;\n",
      "        if (codeType == CODE128_RAW) {\n",
      "            int idx = code.indexOf('\\uffff');\n",
      "            if (idx >= 0)\n",
      "                bCode = code.substring(0, idx);\n",
      "            else\n",
      "                bCode = code;\n",
      "        } else {\n",
      "            bCode = getRawText(code, codeType == CODE128_UCC, codeSet);\n",
      "        }\n",
      "        int len = bCode.length();\n",
      "        float fullWidth = (len + 2) * 11 * x + 2 * x;\n",
      "        float barStartX = 0;\n",
      "        float textStartX = 0;\n",
      "        switch (textAlignment) {\n",
      "            case ALIGN_LEFT:\n",
      "                break;\n",
      "            case ALIGN_RIGHT:\n",
      "                if (fontX > fullWidth) {\n",
      "                    barStartX = fontX - fullWidth;\n",
      "                } else {\n",
      "                    textStartX = fullWidth - fontX;\n",
      "                }\n",
      "                break;\n",
      "            default:\n",
      "                if (fontX > fullWidth) {\n",
      "                    barStartX = (fontX - fullWidth) / 2;\n",
      "                } else {\n",
      "                    textStartX = (fullWidth - fontX) / 2;\n",
      "                }\n",
      "                break;\n",
      "        }\n",
      "        float barStartY = 0;\n",
      "        float textStartY = 0;\n",
      "        if (font != null) {\n",
      "            if (baseline <= 0)\n",
      "                textStartY = barHeight - baseline;\n",
      "            else {\n",
      "                textStartY = -getDescender();\n",
      "                barStartY = textStartY + baseline;\n",
      "            }\n",
      "        }\n",
      "        byte[] bars = getBarsCode128Raw(bCode);\n",
      "        boolean print = true;\n",
      "        if (barColor != null) {\n",
      "            canvas.setFillColor(barColor);\n",
      "        }\n",
      "        for (int k = 0; k < bars.length; ++k) {\n",
      "            float w = bars[k] * x;\n",
      "            if (print) {\n",
      "                canvas.rectangle(barStartX, barStartY, w - inkSpreading, barHeight);\n",
      "            }\n",
      "            print = !print;\n",
      "            barStartX += w;\n",
      "        }\n",
      "        canvas.fill();\n",
      "        if (font != null) {\n",
      "            if (textColor != null) {\n",
      "                canvas.setFillColor(textColor);\n",
      "            }\n",
      "            canvas.beginText();\n",
      "            canvas.setFontAndSize(font, size);\n",
      "            canvas.setTextMatrix(textStartX, textStartY);\n",
      "            canvas.showText(fullCode);\n",
      "            canvas.endText();\n",
      "        }\n",
      "        return getBarcodeSize();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Sets the code to generate. If it's an UCC code and starts with '(' it will\n",
      "     * be split by the AI. This code in UCC mode is valid:\n",
      "     * <br>\n",
      "     * <code>(01)00000090311314(10)ABC123(15)060916</code>\n",
      "     *\n",
      "     * @param code the code to generate\n",
      "     */\n",
      "    @Override\n",
      "    public void setCode(String code) {\n",
      "        if (getCodeType() == Barcode128.CODE128_UCC && code.startsWith(\"(\")) {\n",
      "            int idx = 0;\n",
      "            StringBuilder ret = new StringBuilder(\"\");\n",
      "            while (idx >= 0) {\n",
      "                int end = code.indexOf(')', idx);\n",
      "                if (end < 0) {\n",
      "                    throw new IllegalArgumentException(\"Badly formed ucc string\");\n",
      "                }\n",
      "                String sai = code.substring(idx + 1, end);\n",
      "                if (sai.length() < 2) {\n",
      "                    throw new IllegalArgumentException(\"AI is too short\");\n",
      "                }\n",
      "                int ai = Integer.parseInt(sai);\n",
      "                int len = (int)ais.get(ai);\n",
      "                if (len == 0) {\n",
      "                    throw new IllegalArgumentException(\"AI not found\");\n",
      "                }\n",
      "                sai = Integer.valueOf(ai).toString();\n",
      "                if (sai.length() == 1) {\n",
      "                    sai = \"0\" + sai;\n",
      "                }\n",
      "                idx = code.indexOf('(', end);\n",
      "                int next = (idx < 0 ? code.length() : idx);\n",
      "                ret.append(sai).append(code.substring(end + 1, next));\n",
      "                if (len < 0) {\n",
      "                    if (idx >= 0) {\n",
      "                        ret.append(FNC1);\n",
      "                    }\n",
      "                } else if (next - end - 1 + sai.length() != len) {\n",
      "                    throw new IllegalArgumentException(\"Invalid AI length\");\n",
      "                }\n",
      "            }\n",
      "            super.setCode(ret.toString());\n",
      "        } else {\n",
      "            super.setCode(code);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    // Android-Conversion-Skip-Block-Start (java.awt library isn't available on Android)\n",
      "    /**\n",
      "     * Creates a <CODE>java.awt.Image</CODE>. This image only\n",
      "     * contains the bars without any text.\n",
      "     *\n",
      "     * @param foreground the color of the bars\n",
      "     * @param background the color of the background\n",
      "     * @return the image\n",
      "     */\n",
      "    @Override\n",
      "    public java.awt.Image createAwtImage(java.awt.Color foreground, java.awt.Color background) {\n",
      "        int f = (foreground == null) ? DEFAULT_BAR_FOREGROUND_COLOR.getRGB() : foreground.getRGB();\n",
      "        int g = (background == null) ? DEFAULT_BAR_BACKGROUND_COLOR.getRGB() : background.getRGB();\n",
      "        java.awt.Canvas canvas = new java.awt.Canvas();\n",
      "        String bCode;\n",
      "        if (codeType == CODE128_RAW) {\n",
      "            int idx = code.indexOf('\\uffff');\n",
      "            if (idx >= 0) {\n",
      "                bCode = code.substring(0, idx);\n",
      "            } else {\n",
      "                bCode = code;\n",
      "            }\n",
      "        } else {\n",
      "            bCode = getRawText(code, codeType == CODE128_UCC);\n",
      "        }\n",
      "        int len = bCode.length();\n",
      "        int fullWidth = (len + 2) * 11 + 2;\n",
      "        byte[] bars = getBarsCode128Raw(bCode);\n",
      "\n",
      "        boolean print = true;\n",
      "        int ptr = 0;\n",
      "        int height = (int) barHeight;\n",
      "        int[] pix = new int[fullWidth * height];\n",
      "        for (int k = 0; k < bars.length; ++k) {\n",
      "            int w = bars[k];\n",
      "            int c = g;\n",
      "            if (print) {\n",
      "                c = f;\n",
      "            }\n",
      "            print = !print;\n",
      "            for (int j = 0; j < w; ++j) {\n",
      "                pix[ptr++] = c;\n",
      "            }\n",
      "        }\n",
      "        for (int k = fullWidth; k < pix.length; k += fullWidth) {\n",
      "            System.arraycopy(pix, 0, pix, k, fullWidth);\n",
      "        }\n",
      "        return canvas.createImage(new java.awt.image.MemoryImageSource(fullWidth, height, pix, 0, fullWidth));\n",
      "    }\n",
      "    // Android-Conversion-Skip-Block-End\n",
      "\n",
      "    private static char getStartSymbol(Barcode128CodeSet codeSet) {\n",
      "        switch (codeSet) {\n",
      "            case A:\n",
      "                return START_A;\n",
      "            case B:\n",
      "                return START_B;\n",
      "            case C:\n",
      "                return START_C;\n",
      "            default:\n",
      "                return START_B;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    static {\n",
      "        ais.put(0, 20);\n",
      "        ais.put(1, 16);\n",
      "        ais.put(2, 16);\n",
      "        ais.put(10, -1);\n",
      "        ais.put(11, 9);\n",
      "        ais.put(12, 8);\n",
      "        ais.put(13, 8);\n",
      "        ais.put(15, 8);\n",
      "        ais.put(17, 8);\n",
      "        ais.put(20, 4);\n",
      "        ais.put(21, -1);\n",
      "        ais.put(22, -1);\n",
      "        ais.put(23, -1);\n",
      "        ais.put(240, -1);\n",
      "        ais.put(241, -1);\n",
      "        ais.put(250, -1);\n",
      "        ais.put(251, -1);\n",
      "        ais.put(252, -1);\n",
      "        ais.put(30, -1);\n",
      "        for (int k = 3100; k < 3700; ++k) {\n",
      "            ais.put(k, 10);\n",
      "        }\n",
      "        ais.put(37, -1);\n",
      "        for (int k = 3900; k < 3940; ++k) {\n",
      "            ais.put(k, -1);\n",
      "        }\n",
      "        ais.put(400, -1);\n",
      "        ais.put(401, -1);\n",
      "        ais.put(402, 20);\n",
      "        ais.put(403, -1);\n",
      "        for (int k = 410; k < 416; ++k) {\n",
      "            ais.put(k, 16);\n",
      "        }\n",
      "        ais.put(420, -1);\n",
      "        ais.put(421, -1);\n",
      "        ais.put(422, 6);\n",
      "        ais.put(423, -1);\n",
      "        ais.put(424, 6);\n",
      "        ais.put(425, 6);\n",
      "        ais.put(426, 6);\n",
      "        ais.put(7001, 17);\n",
      "        ais.put(7002, -1);\n",
      "        for (int k = 7030; k < 7040; ++k) {\n",
      "            ais.put(k, -1);\n",
      "        }\n",
      "        ais.put(8001, 18);\n",
      "        ais.put(8002, -1);\n",
      "        ais.put(8003, -1);\n",
      "        ais.put(8004, -1);\n",
      "        ais.put(8005, 10);\n",
      "        ais.put(8006, 22);\n",
      "        ais.put(8007, -1);\n",
      "        ais.put(8008, -1);\n",
      "        ais.put(8018, 22);\n",
      "        ais.put(8020, -1);\n",
      "        ais.put(8100, 10);\n",
      "        ais.put(8101, 14);\n",
      "        ais.put(8102, 6);\n",
      "        for (int k = 90; k < 100; ++k) {\n",
      "            ais.put(k, -1);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Returns <CODE>true</CODE> if the next <CODE>numDigits</CODE>\n",
      "     * starting from index <CODE>textIndex</CODE> are numeric skipping any FNC1.\n",
      "     *\n",
      "     * @param text      the text to check\n",
      "     * @param textIndex where to check from\n",
      "     * @param numDigits the number of digits to check\n",
      "     * @return the check result\n",
      "     */\n",
      "    static boolean isNextDigits(String text, int textIndex, int numDigits) {\n",
      "        int len = text.length();\n",
      "        while (textIndex < len && numDigits > 0) {\n",
      "            if (text.charAt(textIndex) == FNC1) {\n",
      "                ++textIndex;\n",
      "                continue;\n",
      "            }\n",
      "            int n = Math.min(2, numDigits);\n",
      "            if (textIndex + n > len) {\n",
      "                return false;\n",
      "            }\n",
      "            while (n-- > 0) {\n",
      "                char c = text.charAt(textIndex++);\n",
      "                if (c < '0' || c > '9') {\n",
      "                    return false;\n",
      "                }\n",
      "                --numDigits;\n",
      "            }\n",
      "        }\n",
      "        return numDigits == 0;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Packs the digits for charset C also considering FNC1. It assumes that all the parameters\n",
      "     * are valid.\n",
      "     *\n",
      "     * @param text      the text to pack\n",
      "     * @param textIndex where to pack from\n",
      "     * @param numDigits the number of digits to pack. It is always an even number\n",
      "     * @return the packed digits, two digits per character\n",
      "     */\n",
      "    static String getPackedRawDigits(String text, int textIndex, int numDigits) {\n",
      "        StringBuilder out = new StringBuilder(\"\");\n",
      "        int start = textIndex;\n",
      "        while (numDigits > 0) {\n",
      "            if (text.charAt(textIndex) == FNC1) {\n",
      "                out.append(FNC1_INDEX);\n",
      "                ++textIndex;\n",
      "                continue;\n",
      "            }\n",
      "            numDigits -= 2;\n",
      "            int c1 = text.charAt(textIndex++) - '0';\n",
      "            int c2 = text.charAt(textIndex++) - '0';\n",
      "            out.append((char) (c1 * 10 + c2));\n",
      "        }\n",
      "        return (char) (textIndex - start) + out.toString();\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.barcodes;\n",
      "\n",
      "import com.itextpdf.kernel.exceptions.PdfException;\n",
      "import com.itextpdf.kernel.colors.ColorConstants;\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "import com.itextpdf.kernel.pdf.PdfPage;\n",
      "import com.itextpdf.kernel.pdf.PdfReader;\n",
      "import com.itextpdf.kernel.pdf.PdfWriter;\n",
      "import com.itextpdf.kernel.pdf.canvas.PdfCanvas;\n",
      "import com.itextpdf.kernel.utils.CompareTool;\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.type.IntegrationTest;\n",
      "\n",
      "import org.junit.AfterClass;\n",
      "import org.junit.Assert;\n",
      "import org.junit.BeforeClass;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "import java.io.IOException;\n",
      "\n",
      "@Category(IntegrationTest.class)\n",
      "public class Barcode128Test extends ExtendedITextTest {\n",
      "\n",
      "    public static final String sourceFolder = \"./src/test/resources/com/itextpdf/barcodes/\";\n",
      "    public static final String destinationFolder = \"./target/test/com/itextpdf/barcodes/Barcode128/\";\n",
      "\n",
      "    @BeforeClass\n",
      "    public static void beforeClass() {\n",
      "        createDestinationFolder(destinationFolder);\n",
      "    }\n",
      "\n",
      "    @AfterClass\n",
      "    public static void afterClass() {\n",
      "        CompareTool.cleanup(destinationFolder);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcode01Test() throws IOException, PdfException, InterruptedException {\n",
      "        String filename = \"barcode128_01.pdf\";\n",
      "        PdfWriter writer = CompareTool.createTestPdfWriter(destinationFolder + filename);\n",
      "        PdfDocument document = new PdfDocument(writer);\n",
      "\n",
      "        PdfPage page = document.addNewPage();\n",
      "        PdfCanvas canvas = new PdfCanvas(page);\n",
      "\n",
      "        Barcode1D barcode = new Barcode128(document);\n",
      "        barcode.setCodeType(Barcode128.CODE128);\n",
      "        barcode.setCode(\"9781935182610\");\n",
      "\n",
      "        barcode.setTextAlignment(Barcode1D.ALIGN_LEFT);\n",
      "        barcode.placeBarcode(canvas, ColorConstants.BLACK, ColorConstants.BLACK);\n",
      "\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcode02Test() throws IOException, PdfException, InterruptedException {\n",
      "        String filename = \"barcode128_02.pdf\";\n",
      "        PdfWriter writer = CompareTool.createTestPdfWriter(destinationFolder + filename);\n",
      "        PdfReader reader = new PdfReader(sourceFolder + \"DocumentWithTrueTypeFont1.pdf\");\n",
      "        PdfDocument document = new PdfDocument(reader, writer);\n",
      "\n",
      "        PdfCanvas canvas = new PdfCanvas(document.getLastPage());\n",
      "\n",
      "        Barcode1D barcode = new Barcode128(document);\n",
      "        barcode.setCodeType(Barcode128.CODE128);\n",
      "        barcode.setCode(\"9781935182610\");\n",
      "\n",
      "        barcode.setTextAlignment(Barcode1D.ALIGN_LEFT);\n",
      "        barcode.placeBarcode(canvas, ColorConstants.BLACK, ColorConstants.BLACK);\n",
      "\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcodeRawValueGenerationTest01() {\n",
      "        Assert.assertEquals(new String(new byte[] {103, 17, 18, 19, 20, 21, 17, 18, 19, 20, 21}), Barcode128.getRawText(\"1234512345\", false, Barcode128.Barcode128CodeSet.A));\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "method_lines_dic": {
      "Barcode128::::setCodeSet(com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)": [
        251,
        253
      ],
      "Barcode128::::getCodeSet()": [
        260,
        262
      ],
      "Barcode128::::removeFNC1(java.lang.String)": [
        271,
        280
      ],
      "Barcode128::::getHumanReadableUCCEAN(java.lang.String)": [
        288,
        328
      ],
      "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)": [
        340,
        456
      ],
      "Barcode128::::getRawText(java.lang.String,boolean)": [
        467,
        469
      ],
      "Barcode128::::getBarsCode128Raw(java.lang.String)": [
        478,
        493
      ],
      "Barcode128::::getBarcodeSize()": [
        501,
        541
      ],
      "Barcode128::::setCode(java.lang.String)": [
        678,
        716
      ],
      "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)": [
        727,
        766
      ],
      "Barcode128::::getStartSymbol(com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)": [
        769,
        780
      ],
      "Barcode128::::isNextDigits(java.lang.String,int,int)": [
        855,
        875
      ],
      "Barcode128::::getPackedRawDigits(java.lang.String,int,int)": [
        886,
        901
      ]
    },
    "test_method_lines_dic": {
      "Barcode128Test::::beforeClass()": [
        50,
        53
      ],
      "Barcode128Test::::afterClass()": [
        55,
        58
      ],
      "Barcode128Test::::barcode01Test()": [
        60,
        79
      ],
      "Barcode128Test::::barcode02Test()": [
        81,
        100
      ],
      "Barcode128Test::::barcodeRawValueGenerationTest01()": [
        102,
        105
      ]
    },
    "reverse_method_lines_dic": {
      "251": "Barcode128::::setCodeSet(com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "252": "Barcode128::::setCodeSet(com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "253": "Barcode128::::setCodeSet(com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "260": "Barcode128::::getCodeSet()",
      "261": "Barcode128::::getCodeSet()",
      "262": "Barcode128::::getCodeSet()",
      "271": "Barcode128::::removeFNC1(java.lang.String)",
      "272": "Barcode128::::removeFNC1(java.lang.String)",
      "273": "Barcode128::::removeFNC1(java.lang.String)",
      "274": "Barcode128::::removeFNC1(java.lang.String)",
      "275": "Barcode128::::removeFNC1(java.lang.String)",
      "276": "Barcode128::::removeFNC1(java.lang.String)",
      "277": "Barcode128::::removeFNC1(java.lang.String)",
      "278": "Barcode128::::removeFNC1(java.lang.String)",
      "279": "Barcode128::::removeFNC1(java.lang.String)",
      "280": "Barcode128::::removeFNC1(java.lang.String)",
      "288": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "289": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "290": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "291": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "292": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "293": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "294": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "295": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "296": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "297": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "298": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "299": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "300": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "301": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "302": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "303": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "304": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "305": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "306": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "307": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "308": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "309": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "310": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "311": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "312": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "313": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "314": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "315": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "316": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "317": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "318": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "319": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "320": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "321": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "322": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "323": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "324": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "325": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "326": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "327": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "328": "Barcode128::::getHumanReadableUCCEAN(java.lang.String)",
      "340": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "341": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "342": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "343": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "344": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "345": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "346": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "347": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "348": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "349": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "350": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "351": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "352": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "353": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "354": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "355": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "356": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "357": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "358": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "359": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "360": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "361": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "362": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "363": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "364": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "365": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "366": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "367": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "368": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "369": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "370": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "371": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "372": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "373": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "374": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "375": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "376": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "377": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "378": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "379": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "380": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "381": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "382": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "383": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "384": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "385": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "386": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "387": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "388": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "389": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "390": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "391": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "392": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "393": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "394": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "395": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "396": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "397": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "398": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "399": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "400": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "401": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "402": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "403": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "404": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "405": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "406": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "407": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "408": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "409": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "410": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "411": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "412": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "413": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "414": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "415": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "416": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "417": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "418": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "419": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "420": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "421": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "422": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "423": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "424": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "425": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "426": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "427": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "428": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "429": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "430": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "431": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "432": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "433": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "434": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "435": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "436": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "437": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "438": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "439": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "440": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "441": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "442": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "443": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "444": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "445": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "446": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "447": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "448": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "449": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "450": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "451": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "452": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "453": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "454": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "455": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "456": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "467": "Barcode128::::getRawText(java.lang.String,boolean)",
      "468": "Barcode128::::getRawText(java.lang.String,boolean)",
      "469": "Barcode128::::getRawText(java.lang.String,boolean)",
      "478": "Barcode128::::getBarsCode128Raw(java.lang.String)",
      "479": "Barcode128::::getBarsCode128Raw(java.lang.String)",
      "480": "Barcode128::::getBarsCode128Raw(java.lang.String)",
      "481": "Barcode128::::getBarsCode128Raw(java.lang.String)",
      "482": "Barcode128::::getBarsCode128Raw(java.lang.String)",
      "483": "Barcode128::::getBarsCode128Raw(java.lang.String)",
      "484": "Barcode128::::getBarsCode128Raw(java.lang.String)",
      "485": "Barcode128::::getBarsCode128Raw(java.lang.String)",
      "486": "Barcode128::::getBarsCode128Raw(java.lang.String)",
      "487": "Barcode128::::getBarsCode128Raw(java.lang.String)",
      "488": "Barcode128::::getBarsCode128Raw(java.lang.String)",
      "489": "Barcode128::::getBarsCode128Raw(java.lang.String)",
      "490": "Barcode128::::getBarsCode128Raw(java.lang.String)",
      "491": "Barcode128::::getBarsCode128Raw(java.lang.String)",
      "492": "Barcode128::::getBarsCode128Raw(java.lang.String)",
      "493": "Barcode128::::getBarsCode128Raw(java.lang.String)",
      "501": "Barcode128::::getBarcodeSize()",
      "502": "Barcode128::::getBarcodeSize()",
      "503": "Barcode128::::getBarcodeSize()",
      "504": "Barcode128::::getBarcodeSize()",
      "505": "Barcode128::::getBarcodeSize()",
      "506": "Barcode128::::getBarcodeSize()",
      "507": "Barcode128::::getBarcodeSize()",
      "508": "Barcode128::::getBarcodeSize()",
      "509": "Barcode128::::getBarcodeSize()",
      "510": "Barcode128::::getBarcodeSize()",
      "511": "Barcode128::::getBarcodeSize()",
      "512": "Barcode128::::getBarcodeSize()",
      "513": "Barcode128::::getBarcodeSize()",
      "514": "Barcode128::::getBarcodeSize()",
      "515": "Barcode128::::getBarcodeSize()",
      "516": "Barcode128::::getBarcodeSize()",
      "517": "Barcode128::::getBarcodeSize()",
      "518": "Barcode128::::getBarcodeSize()",
      "519": "Barcode128::::getBarcodeSize()",
      "520": "Barcode128::::getBarcodeSize()",
      "521": "Barcode128::::getBarcodeSize()",
      "522": "Barcode128::::getBarcodeSize()",
      "523": "Barcode128::::getBarcodeSize()",
      "524": "Barcode128::::getBarcodeSize()",
      "525": "Barcode128::::getBarcodeSize()",
      "526": "Barcode128::::getBarcodeSize()",
      "527": "Barcode128::::getBarcodeSize()",
      "528": "Barcode128::::getBarcodeSize()",
      "529": "Barcode128::::getBarcodeSize()",
      "530": "Barcode128::::getBarcodeSize()",
      "531": "Barcode128::::getBarcodeSize()",
      "532": "Barcode128::::getBarcodeSize()",
      "533": "Barcode128::::getBarcodeSize()",
      "534": "Barcode128::::getBarcodeSize()",
      "535": "Barcode128::::getBarcodeSize()",
      "536": "Barcode128::::getBarcodeSize()",
      "537": "Barcode128::::getBarcodeSize()",
      "538": "Barcode128::::getBarcodeSize()",
      "539": "Barcode128::::getBarcodeSize()",
      "540": "Barcode128::::getBarcodeSize()",
      "541": "Barcode128::::getBarcodeSize()",
      "678": "Barcode128::::setCode(java.lang.String)",
      "679": "Barcode128::::setCode(java.lang.String)",
      "680": "Barcode128::::setCode(java.lang.String)",
      "681": "Barcode128::::setCode(java.lang.String)",
      "682": "Barcode128::::setCode(java.lang.String)",
      "683": "Barcode128::::setCode(java.lang.String)",
      "684": "Barcode128::::setCode(java.lang.String)",
      "685": "Barcode128::::setCode(java.lang.String)",
      "686": "Barcode128::::setCode(java.lang.String)",
      "687": "Barcode128::::setCode(java.lang.String)",
      "688": "Barcode128::::setCode(java.lang.String)",
      "689": "Barcode128::::setCode(java.lang.String)",
      "690": "Barcode128::::setCode(java.lang.String)",
      "691": "Barcode128::::setCode(java.lang.String)",
      "692": "Barcode128::::setCode(java.lang.String)",
      "693": "Barcode128::::setCode(java.lang.String)",
      "694": "Barcode128::::setCode(java.lang.String)",
      "695": "Barcode128::::setCode(java.lang.String)",
      "696": "Barcode128::::setCode(java.lang.String)",
      "697": "Barcode128::::setCode(java.lang.String)",
      "698": "Barcode128::::setCode(java.lang.String)",
      "699": "Barcode128::::setCode(java.lang.String)",
      "700": "Barcode128::::setCode(java.lang.String)",
      "701": "Barcode128::::setCode(java.lang.String)",
      "702": "Barcode128::::setCode(java.lang.String)",
      "703": "Barcode128::::setCode(java.lang.String)",
      "704": "Barcode128::::setCode(java.lang.String)",
      "705": "Barcode128::::setCode(java.lang.String)",
      "706": "Barcode128::::setCode(java.lang.String)",
      "707": "Barcode128::::setCode(java.lang.String)",
      "708": "Barcode128::::setCode(java.lang.String)",
      "709": "Barcode128::::setCode(java.lang.String)",
      "710": "Barcode128::::setCode(java.lang.String)",
      "711": "Barcode128::::setCode(java.lang.String)",
      "712": "Barcode128::::setCode(java.lang.String)",
      "713": "Barcode128::::setCode(java.lang.String)",
      "714": "Barcode128::::setCode(java.lang.String)",
      "715": "Barcode128::::setCode(java.lang.String)",
      "716": "Barcode128::::setCode(java.lang.String)",
      "727": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "728": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "729": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "730": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "731": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "732": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "733": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "734": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "735": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "736": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "737": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "738": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "739": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "740": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "741": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "742": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "743": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "744": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "745": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "746": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "747": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "748": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "749": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "750": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "751": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "752": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "753": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "754": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "755": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "756": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "757": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "758": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "759": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "760": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "761": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "762": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "763": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "764": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "765": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "766": "Barcode128::::createAwtImage(java.awt.Color,java.awt.Color)",
      "769": "Barcode128::::getStartSymbol(com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "770": "Barcode128::::getStartSymbol(com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "771": "Barcode128::::getStartSymbol(com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "772": "Barcode128::::getStartSymbol(com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "773": "Barcode128::::getStartSymbol(com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "774": "Barcode128::::getStartSymbol(com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "775": "Barcode128::::getStartSymbol(com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "776": "Barcode128::::getStartSymbol(com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "777": "Barcode128::::getStartSymbol(com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "778": "Barcode128::::getStartSymbol(com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "779": "Barcode128::::getStartSymbol(com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "780": "Barcode128::::getStartSymbol(com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)",
      "855": "Barcode128::::isNextDigits(java.lang.String,int,int)",
      "856": "Barcode128::::isNextDigits(java.lang.String,int,int)",
      "857": "Barcode128::::isNextDigits(java.lang.String,int,int)",
      "858": "Barcode128::::isNextDigits(java.lang.String,int,int)",
      "859": "Barcode128::::isNextDigits(java.lang.String,int,int)",
      "860": "Barcode128::::isNextDigits(java.lang.String,int,int)",
      "861": "Barcode128::::isNextDigits(java.lang.String,int,int)",
      "862": "Barcode128::::isNextDigits(java.lang.String,int,int)",
      "863": "Barcode128::::isNextDigits(java.lang.String,int,int)",
      "864": "Barcode128::::isNextDigits(java.lang.String,int,int)",
      "865": "Barcode128::::isNextDigits(java.lang.String,int,int)",
      "866": "Barcode128::::isNextDigits(java.lang.String,int,int)",
      "867": "Barcode128::::isNextDigits(java.lang.String,int,int)",
      "868": "Barcode128::::isNextDigits(java.lang.String,int,int)",
      "869": "Barcode128::::isNextDigits(java.lang.String,int,int)",
      "870": "Barcode128::::isNextDigits(java.lang.String,int,int)",
      "871": "Barcode128::::isNextDigits(java.lang.String,int,int)",
      "872": "Barcode128::::isNextDigits(java.lang.String,int,int)",
      "873": "Barcode128::::isNextDigits(java.lang.String,int,int)",
      "874": "Barcode128::::isNextDigits(java.lang.String,int,int)",
      "875": "Barcode128::::isNextDigits(java.lang.String,int,int)",
      "886": "Barcode128::::getPackedRawDigits(java.lang.String,int,int)",
      "887": "Barcode128::::getPackedRawDigits(java.lang.String,int,int)",
      "888": "Barcode128::::getPackedRawDigits(java.lang.String,int,int)",
      "889": "Barcode128::::getPackedRawDigits(java.lang.String,int,int)",
      "890": "Barcode128::::getPackedRawDigits(java.lang.String,int,int)",
      "891": "Barcode128::::getPackedRawDigits(java.lang.String,int,int)",
      "892": "Barcode128::::getPackedRawDigits(java.lang.String,int,int)",
      "893": "Barcode128::::getPackedRawDigits(java.lang.String,int,int)",
      "894": "Barcode128::::getPackedRawDigits(java.lang.String,int,int)",
      "895": "Barcode128::::getPackedRawDigits(java.lang.String,int,int)",
      "896": "Barcode128::::getPackedRawDigits(java.lang.String,int,int)",
      "897": "Barcode128::::getPackedRawDigits(java.lang.String,int,int)",
      "898": "Barcode128::::getPackedRawDigits(java.lang.String,int,int)",
      "899": "Barcode128::::getPackedRawDigits(java.lang.String,int,int)",
      "900": "Barcode128::::getPackedRawDigits(java.lang.String,int,int)",
      "901": "Barcode128::::getPackedRawDigits(java.lang.String,int,int)"
    },
    "test_reverse_method_lines_dic": {
      "50": "Barcode128Test::::beforeClass()",
      "51": "Barcode128Test::::beforeClass()",
      "52": "Barcode128Test::::beforeClass()",
      "53": "Barcode128Test::::beforeClass()",
      "55": "Barcode128Test::::afterClass()",
      "56": "Barcode128Test::::afterClass()",
      "57": "Barcode128Test::::afterClass()",
      "58": "Barcode128Test::::afterClass()",
      "60": "Barcode128Test::::barcode01Test()",
      "61": "Barcode128Test::::barcode01Test()",
      "62": "Barcode128Test::::barcode01Test()",
      "63": "Barcode128Test::::barcode01Test()",
      "64": "Barcode128Test::::barcode01Test()",
      "65": "Barcode128Test::::barcode01Test()",
      "66": "Barcode128Test::::barcode01Test()",
      "67": "Barcode128Test::::barcode01Test()",
      "68": "Barcode128Test::::barcode01Test()",
      "69": "Barcode128Test::::barcode01Test()",
      "70": "Barcode128Test::::barcode01Test()",
      "71": "Barcode128Test::::barcode01Test()",
      "72": "Barcode128Test::::barcode01Test()",
      "73": "Barcode128Test::::barcode01Test()",
      "74": "Barcode128Test::::barcode01Test()",
      "75": "Barcode128Test::::barcode01Test()",
      "76": "Barcode128Test::::barcode01Test()",
      "77": "Barcode128Test::::barcode01Test()",
      "78": "Barcode128Test::::barcode01Test()",
      "79": "Barcode128Test::::barcode01Test()",
      "81": "Barcode128Test::::barcode02Test()",
      "82": "Barcode128Test::::barcode02Test()",
      "83": "Barcode128Test::::barcode02Test()",
      "84": "Barcode128Test::::barcode02Test()",
      "85": "Barcode128Test::::barcode02Test()",
      "86": "Barcode128Test::::barcode02Test()",
      "87": "Barcode128Test::::barcode02Test()",
      "88": "Barcode128Test::::barcode02Test()",
      "89": "Barcode128Test::::barcode02Test()",
      "90": "Barcode128Test::::barcode02Test()",
      "91": "Barcode128Test::::barcode02Test()",
      "92": "Barcode128Test::::barcode02Test()",
      "93": "Barcode128Test::::barcode02Test()",
      "94": "Barcode128Test::::barcode02Test()",
      "95": "Barcode128Test::::barcode02Test()",
      "96": "Barcode128Test::::barcode02Test()",
      "97": "Barcode128Test::::barcode02Test()",
      "98": "Barcode128Test::::barcode02Test()",
      "99": "Barcode128Test::::barcode02Test()",
      "100": "Barcode128Test::::barcode02Test()",
      "102": "Barcode128Test::::barcodeRawValueGenerationTest01()",
      "103": "Barcode128Test::::barcodeRawValueGenerationTest01()",
      "104": "Barcode128Test::::barcodeRawValueGenerationTest01()",
      "105": "Barcode128Test::::barcodeRawValueGenerationTest01()"
    },
    "tests": [
      {
        "test_lines": [
          60,
          79
        ],
        "covered_lines": [
          51,
          164,
          206,
          216,
          217,
          226,
          227,
          228,
          229,
          230,
          231,
          232,
          233,
          234,
          239,
          240,
          241,
          242,
          243,
          264,
          272,
          273,
          274,
          275,
          276,
          277,
          279,
          341,
          342,
          343,
          350,
          351,
          352,
          355,
          356,
          357,
          358,
          359,
          360,
          361,
          363,
          364,
          365,
          366,
          383,
          385,
          386,
          431,
          432,
          433,
          434,
          435,
          436,
          437,
          439,
          444,
          445,
          446,
          452,
          455,
          479,
          480,
          482,
          483,
          484,
          485,
          486,
          487,
          489,
          490,
          491,
          492,
          503,
          504,
          506,
          507,
          508,
          512,
          519,
          522,
          524,
          526,
          533,
          535,
          536,
          537,
          538,
          540,
          585,
          592,
          595,
          597,
          598,
          599,
          602,
          609,
          611,
          612,
          613,
          614,
          615,
          617,
          633,
          634,
          635,
          636,
          639,
          640,
          643,
          644,
          645,
          646,
          648,
          649,
          650,
          651,
          653,
          654,
          656,
          657,
          658,
          659,
          661,
          662,
          663,
          664,
          665,
          667,
          680,
          714,
          716,
          770,
          778,
          783,
          784,
          785,
          786,
          787,
          788,
          789,
          790,
          791,
          792,
          793,
          794,
          795,
          796,
          797,
          798,
          799,
          800,
          801,
          802,
          803,
          805,
          806,
          807,
          809,
          810,
          811,
          812,
          813,
          814,
          816,
          817,
          818,
          819,
          820,
          821,
          822,
          823,
          824,
          825,
          826,
          828,
          829,
          830,
          831,
          832,
          833,
          834,
          835,
          836,
          837,
          838,
          839,
          840,
          841,
          842,
          844,
          856,
          857,
          858,
          862,
          863,
          864,
          866,
          867,
          868,
          871,
          872,
          873,
          874,
          887,
          888,
          889,
          890,
          895,
          896,
          897,
          898,
          899,
          900
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          81,
          100
        ],
        "covered_lines": [
          51,
          164,
          206,
          216,
          217,
          226,
          227,
          228,
          229,
          230,
          231,
          232,
          233,
          234,
          239,
          240,
          241,
          242,
          243,
          264,
          272,
          273,
          274,
          275,
          276,
          277,
          279,
          341,
          342,
          343,
          350,
          351,
          352,
          355,
          356,
          357,
          358,
          359,
          360,
          361,
          363,
          364,
          365,
          366,
          383,
          385,
          386,
          431,
          432,
          433,
          434,
          435,
          436,
          437,
          439,
          444,
          445,
          446,
          452,
          455,
          479,
          480,
          482,
          483,
          484,
          485,
          486,
          487,
          489,
          490,
          491,
          492,
          503,
          504,
          506,
          507,
          508,
          512,
          519,
          522,
          524,
          526,
          533,
          535,
          536,
          537,
          538,
          540,
          585,
          592,
          595,
          597,
          598,
          599,
          602,
          609,
          611,
          612,
          613,
          614,
          615,
          617,
          633,
          634,
          635,
          636,
          639,
          640,
          643,
          644,
          645,
          646,
          648,
          649,
          650,
          651,
          653,
          654,
          656,
          657,
          658,
          659,
          661,
          662,
          663,
          664,
          665,
          667,
          680,
          714,
          716,
          770,
          778,
          783,
          784,
          785,
          786,
          787,
          788,
          789,
          790,
          791,
          792,
          793,
          794,
          795,
          796,
          797,
          798,
          799,
          800,
          801,
          802,
          803,
          805,
          806,
          807,
          809,
          810,
          811,
          812,
          813,
          814,
          816,
          817,
          818,
          819,
          820,
          821,
          822,
          823,
          824,
          825,
          826,
          828,
          829,
          830,
          831,
          832,
          833,
          834,
          835,
          836,
          837,
          838,
          839,
          840,
          841,
          842,
          844,
          856,
          857,
          858,
          862,
          863,
          864,
          866,
          867,
          868,
          871,
          872,
          873,
          874,
          887,
          888,
          889,
          890,
          895,
          896,
          897,
          898,
          899,
          900
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          102,
          105
        ],
        "covered_lines": [
          51,
          164,
          206,
          239,
          240,
          241,
          242,
          243,
          341,
          342,
          343,
          350,
          351,
          352,
          355,
          356,
          357,
          358,
          366,
          374,
          375,
          377,
          380,
          381,
          383,
          385,
          386,
          388,
          395,
          396,
          398,
          402,
          405,
          408,
          452,
          455,
          770,
          772,
          783,
          784,
          785,
          786,
          787,
          788,
          789,
          790,
          791,
          792,
          793,
          794,
          795,
          796,
          797,
          798,
          799,
          800,
          801,
          802,
          803,
          805,
          806,
          807,
          809,
          810,
          811,
          812,
          813,
          814,
          816,
          817,
          818,
          819,
          820,
          821,
          822,
          823,
          824,
          825,
          826,
          828,
          829,
          830,
          831,
          832,
          833,
          834,
          835,
          836,
          837,
          838,
          839,
          840,
          841,
          842,
          844
        ],
        "label": "Barcode128::::getRawText(java.lang.String,boolean,com.itextpdf.barcodes.Barcode128.Barcode128CodeSet)"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/barcodes/src/main/java/com/itextpdf/barcodes/Barcode39.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.barcodes;\n",
      "\n",
      "import com.itextpdf.kernel.colors.Color;\n",
      "import com.itextpdf.kernel.font.PdfFont;\n",
      "import com.itextpdf.kernel.geom.Rectangle;\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "import com.itextpdf.kernel.pdf.canvas.PdfCanvas;\n",
      "\n",
      "/**\n",
      " * This class represents the barcode Code 39.\n",
      " * <p>\n",
      " * Code 39 is a variable length, discrete\n",
      " * barcode symbology defined in ISO/IEC 16388:2007.\n",
      " * <p>\n",
      " * The Code 39 specification defines 43 characters, consisting of uppercase letters (A through Z), numeric digits (0\n",
      " * through 9) and a number of special characters (-, ., $, /, +, %, and space). An additional character (denoted '*') is\n",
      " * used for both start and stop delimiters. Each character is composed of nine elements: five bars and four spaces.\n",
      " */\n",
      "public class Barcode39 extends Barcode1D {\n",
      "\n",
      "    /**\n",
      "     * The bars to generate the code.\n",
      "     */\n",
      "    private static final byte[][] BARS =\n",
      "            {\n",
      "                    {0, 0, 0, 1, 1, 0, 1, 0, 0},\n",
      "                    {1, 0, 0, 1, 0, 0, 0, 0, 1},\n",
      "                    {0, 0, 1, 1, 0, 0, 0, 0, 1},\n",
      "                    {1, 0, 1, 1, 0, 0, 0, 0, 0},\n",
      "                    {0, 0, 0, 1, 1, 0, 0, 0, 1},\n",
      "                    {1, 0, 0, 1, 1, 0, 0, 0, 0},\n",
      "                    {0, 0, 1, 1, 1, 0, 0, 0, 0},\n",
      "                    {0, 0, 0, 1, 0, 0, 1, 0, 1},\n",
      "                    {1, 0, 0, 1, 0, 0, 1, 0, 0},\n",
      "                    {0, 0, 1, 1, 0, 0, 1, 0, 0},\n",
      "                    {1, 0, 0, 0, 0, 1, 0, 0, 1},\n",
      "                    {0, 0, 1, 0, 0, 1, 0, 0, 1},\n",
      "                    {1, 0, 1, 0, 0, 1, 0, 0, 0},\n",
      "                    {0, 0, 0, 0, 1, 1, 0, 0, 1},\n",
      "                    {1, 0, 0, 0, 1, 1, 0, 0, 0},\n",
      "                    {0, 0, 1, 0, 1, 1, 0, 0, 0},\n",
      "                    {0, 0, 0, 0, 0, 1, 1, 0, 1},\n",
      "                    {1, 0, 0, 0, 0, 1, 1, 0, 0},\n",
      "                    {0, 0, 1, 0, 0, 1, 1, 0, 0},\n",
      "                    {0, 0, 0, 0, 1, 1, 1, 0, 0},\n",
      "                    {1, 0, 0, 0, 0, 0, 0, 1, 1},\n",
      "                    {0, 0, 1, 0, 0, 0, 0, 1, 1},\n",
      "                    {1, 0, 1, 0, 0, 0, 0, 1, 0},\n",
      "                    {0, 0, 0, 0, 1, 0, 0, 1, 1},\n",
      "                    {1, 0, 0, 0, 1, 0, 0, 1, 0},\n",
      "                    {0, 0, 1, 0, 1, 0, 0, 1, 0},\n",
      "                    {0, 0, 0, 0, 0, 0, 1, 1, 1},\n",
      "                    {1, 0, 0, 0, 0, 0, 1, 1, 0},\n",
      "                    {0, 0, 1, 0, 0, 0, 1, 1, 0},\n",
      "                    {0, 0, 0, 0, 1, 0, 1, 1, 0},\n",
      "                    {1, 1, 0, 0, 0, 0, 0, 0, 1},\n",
      "                    {0, 1, 1, 0, 0, 0, 0, 0, 1},\n",
      "                    {1, 1, 1, 0, 0, 0, 0, 0, 0},\n",
      "                    {0, 1, 0, 0, 1, 0, 0, 0, 1},\n",
      "                    {1, 1, 0, 0, 1, 0, 0, 0, 0},\n",
      "                    {0, 1, 1, 0, 1, 0, 0, 0, 0},\n",
      "                    {0, 1, 0, 0, 0, 0, 1, 0, 1},\n",
      "                    {1, 1, 0, 0, 0, 0, 1, 0, 0},\n",
      "                    {0, 1, 1, 0, 0, 0, 1, 0, 0},\n",
      "                    {0, 1, 0, 1, 0, 1, 0, 0, 0},\n",
      "                    {0, 1, 0, 1, 0, 0, 0, 1, 0},\n",
      "                    {0, 1, 0, 0, 0, 1, 0, 1, 0},\n",
      "                    {0, 0, 0, 1, 0, 1, 0, 1, 0},\n",
      "                    {0, 1, 0, 0, 1, 0, 1, 0, 0}\n",
      "            };\n",
      "\n",
      "    /**\n",
      "     * The index chars to <CODE>BARS</CODE>, symbol * use only start and stop  characters,\n",
      "     * the * character will not appear in the input data.\n",
      "     */\n",
      "    private static final String CHARS = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%*\";\n",
      "\n",
      "\n",
      "\n",
      "    /**\n",
      "     * The character combinations to make the code 39 extended.\n",
      "     */\n",
      "    private static final String EXTENDED = \"%U\" +\n",
      "            \"$A$B$C$D$E$F$G$H$I$J$K$L$M$N$O$P$Q$R$S$T$U$V$W$X$Y$Z\" +\n",
      "            \"%A%B%C%D%E  /A/B/C/D/E/F/G/H/I/J/K/L - ./O\" +\n",
      "            \" 0 1 2 3 4 5 6 7 8 9/Z%F%G%H%I%J%V\" +\n",
      "            \" A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\" +\n",
      "            \"%K%L%M%N%O%W\" +\n",
      "            \"+A+B+C+D+E+F+G+H+I+J+K+L+M+N+O+P+Q+R+S+T+U+V+W+X+Y+Z\" +\n",
      "            \"%P%Q%R%S%T\";\n",
      "\n",
      "    /**\n",
      "     * Creates a new Barcode39.\n",
      "     * To generate the font the {@link PdfDocument#getDefaultFont()} will be implicitly called.\n",
      "     * If you want to use this barcode in PDF/A documents, please consider using {@link #Barcode39(PdfDocument, PdfFont)}.\n",
      "     *\n",
      "     * @param document The document to which the barcode will be added\n",
      "     */\n",
      "    public Barcode39(PdfDocument document) {\n",
      "        this(document, document.getDefaultFont());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates a new Barcode39.\n",
      "     *\n",
      "     * @param document The document to which the barcode will be added\n",
      "     * @param font The font to use\n",
      "     */\n",
      "    public Barcode39(PdfDocument document, PdfFont font) {\n",
      "        super(document);\n",
      "        this.x = 0.8f;\n",
      "        this.n = 2;\n",
      "        this.font = font;\n",
      "        this.size = 8;\n",
      "        this.baseline = size;\n",
      "        this.barHeight = size * 3;\n",
      "        this.generateChecksum = false;\n",
      "        this.checksumText = false;\n",
      "        this.startStopText = true;\n",
      "        this.extended = false;\n",
      "    }\n",
      "    /**\n",
      "     * Creates the bars.\n",
      "     *\n",
      "     * @param text the text to create the bars. This text does not include the start and\n",
      "     *             stop characters\n",
      "     * @return the bars\n",
      "     */\n",
      "    public static byte[] getBarsCode39(String text) {\n",
      "        text = \"*\" + text + \"*\";\n",
      "        byte[] bars = new byte[text.length() * 10 - 1];\n",
      "        for (int k = 0; k < text.length(); ++k) {\n",
      "            char ch = text.charAt(k);\n",
      "            int idx = CHARS.indexOf(ch);\n",
      "            if(ch == '*' && k != 0 && k != (text.length() - 1)){\n",
      "                throw new IllegalArgumentException(\"The character \" + ch + \" is illegal in code 39\");\n",
      "            }\n",
      "            if (idx < 0 ) {\n",
      "                throw new IllegalArgumentException(\"The character \" + text.charAt(k) + \" is illegal in code 39\");\n",
      "            }\n",
      "            System.arraycopy(BARS[idx], 0, bars, k * 10, 9);\n",
      "        }\n",
      "        return bars;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Converts the extended text into a normal, escaped text,\n",
      "     * ready to generate bars.\n",
      "     *\n",
      "     * @param text the extended text\n",
      "     * @return the escaped text\n",
      "     */\n",
      "    public static String getCode39Ex(String text) {\n",
      "        StringBuilder out = new StringBuilder(\"\");\n",
      "        for (int k = 0; k < text.length(); ++k) {\n",
      "            char c = text.charAt(k);\n",
      "            if (c > 127) {\n",
      "                throw new IllegalArgumentException(\"The character \" + c + \" is illegal in code 39\");\n",
      "            }\n",
      "            char c1 = EXTENDED.charAt(c * 2);\n",
      "            char c2 = EXTENDED.charAt(c * 2 + 1);\n",
      "            if (c1 != ' ') {\n",
      "                out.append(c1);\n",
      "            }\n",
      "            out.append(c2);\n",
      "        }\n",
      "        return out.toString();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Calculates the checksum.\n",
      "     *\n",
      "     * @param text the text\n",
      "     * @return the checksum\n",
      "     */\n",
      "    static char getChecksum(String text) {\n",
      "        int chk = 0;\n",
      "        for (int k = 0; k < text.length(); ++k) {\n",
      "            int idx = CHARS.indexOf(text.charAt(k));\n",
      "            char ch = text.charAt(k);\n",
      "            if(ch == '*' && k != 0 && k != (text.length() - 1)){\n",
      "                throw new IllegalArgumentException(\"The character \" + ch + \" is illegal in code 39\");\n",
      "            }\n",
      "            if (idx < 0) {\n",
      "                throw new IllegalArgumentException(\"The character \" + text.charAt(k) + \" is illegal in code 39\");\n",
      "            }\n",
      "            chk += idx;\n",
      "        }\n",
      "        return CHARS.charAt(chk % 43);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets the maximum area that the barcode and the text, if\n",
      "     * any, will occupy. The lower left corner is always (0, 0).\n",
      "     *\n",
      "     * @return the size the barcode occupies.\n",
      "     */\n",
      "    @Override\n",
      "    public Rectangle getBarcodeSize() {\n",
      "        float fontX = 0;\n",
      "        float fontY = 0;\n",
      "        String fCode = code;\n",
      "        if (extended) {\n",
      "            fCode = getCode39Ex(code);\n",
      "        }\n",
      "        if (font != null) {\n",
      "            if (baseline > 0) {\n",
      "                fontY = baseline - getDescender();\n",
      "            } else {\n",
      "                fontY = -baseline + size;\n",
      "            }\n",
      "            String fullCode = code;\n",
      "            if (generateChecksum && checksumText) {\n",
      "                fullCode += getChecksum(fCode);\n",
      "            }\n",
      "            if (startStopText) {\n",
      "                fullCode = \"*\" + fullCode + \"*\";\n",
      "            }\n",
      "            fontX = font.getWidth(altText != null ? altText : fullCode, size);\n",
      "        }\n",
      "        int len = fCode.length() + 2;\n",
      "        if (generateChecksum) {\n",
      "            ++len;\n",
      "        }\n",
      "        float fullWidth = len * (6 * x + 3 * x * n) + (len - 1) * x;\n",
      "        fullWidth = Math.max(fullWidth, fontX);\n",
      "        float fullHeight = barHeight + fontY;\n",
      "        return new Rectangle(fullWidth, fullHeight);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Places the barcode in a <CODE>PdfCanvas</CODE>. The\n",
      "     * barcode is always placed at coordinates (0, 0). Use the\n",
      "     * translation matrix to move it elsewhere.<p>\n",
      "     * The bars and text are written in the following colors:\n",
      "     * <br>\n",
      "     * <TABLE BORDER=\"1\" SUMMARY=\"barcode properties\">\n",
      "     * <TR>\n",
      "     * <TH><CODE>barColor</CODE></TH>\n",
      "     * <TH><CODE>textColor</CODE></TH>\n",
      "     * <TH>Result</TH>\n",
      "     * </TR>\n",
      "     * <TR>\n",
      "     * <TD><CODE>null</CODE></TD>\n",
      "     * <TD><CODE>null</CODE></TD>\n",
      "     * <TD>bars and text painted with current fill color</TD>\n",
      "     * </TR>\n",
      "     * <TR>\n",
      "     * <TD><CODE>barColor</CODE></TD>\n",
      "     * <TD><CODE>null</CODE></TD>\n",
      "     * <TD>bars and text painted with <CODE>barColor</CODE></TD>\n",
      "     * </TR>\n",
      "     * <TR>\n",
      "     * <TD><CODE>null</CODE></TD>\n",
      "     * <TD><CODE>textColor</CODE></TD>\n",
      "     * <TD>bars painted with current color<br>text painted with <CODE>textColor</CODE></TD>\n",
      "     * </TR>\n",
      "     * <TR>\n",
      "     * <TD><CODE>barColor</CODE></TD>\n",
      "     * <TD><CODE>textColor</CODE></TD>\n",
      "     * <TD>bars painted with <CODE>barColor</CODE><br>text painted with <CODE>textColor</CODE></TD>\n",
      "     * </TR>\n",
      "     * </TABLE>\n",
      "     *\n",
      "     * @param canvas    the <CODE>PdfCanvas</CODE> where the barcode will be placed\n",
      "     * @param barColor  the color of the bars. It can be <CODE>null</CODE>\n",
      "     * @param textColor the color of the text. It can be <CODE>null</CODE>\n",
      "     * @return the dimensions the barcode occupies\n",
      "     */\n",
      "    @Override\n",
      "    public Rectangle placeBarcode(PdfCanvas canvas, Color barColor, Color textColor) {\n",
      "        String fullCode = code;\n",
      "        float fontX = 0;\n",
      "        String bCode = code;\n",
      "        if (extended) {\n",
      "            bCode = getCode39Ex(code);\n",
      "        }\n",
      "        if (font != null) {\n",
      "            if (generateChecksum && checksumText) {\n",
      "                fullCode += getChecksum(bCode);\n",
      "            }\n",
      "            if (startStopText) {\n",
      "                fullCode = \"*\" + fullCode + \"*\";\n",
      "            }\n",
      "            fontX = font.getWidth(fullCode = altText != null ? altText : fullCode, size);\n",
      "        }\n",
      "        if (generateChecksum) {\n",
      "            bCode += getChecksum(bCode);\n",
      "        }\n",
      "        int len = bCode.length() + 2;\n",
      "        float fullWidth = len * (6 * x + 3 * x * n) + (len - 1) * x;\n",
      "        float barStartX = 0;\n",
      "        float textStartX = 0;\n",
      "        switch (textAlignment) {\n",
      "            case ALIGN_LEFT:\n",
      "                break;\n",
      "            case ALIGN_RIGHT:\n",
      "                if (fontX > fullWidth) {\n",
      "                    barStartX = fontX - fullWidth;\n",
      "                } else {\n",
      "                    textStartX = fullWidth - fontX;\n",
      "                }\n",
      "                break;\n",
      "            default:\n",
      "                if (fontX > fullWidth) {\n",
      "                    barStartX = (fontX - fullWidth) / 2;\n",
      "                } else {\n",
      "                    textStartX = (fullWidth - fontX) / 2;\n",
      "                }\n",
      "                break;\n",
      "        }\n",
      "        float barStartY = 0;\n",
      "        float textStartY = 0;\n",
      "        if (font != null) {\n",
      "            if (baseline <= 0) {\n",
      "                textStartY = barHeight - baseline;\n",
      "            } else {\n",
      "                textStartY = -getDescender();\n",
      "                barStartY = textStartY + baseline;\n",
      "            }\n",
      "        }\n",
      "        byte[] bars = getBarsCode39(bCode);\n",
      "        boolean print = true;\n",
      "        if (barColor != null) {\n",
      "            canvas.setFillColor(barColor);\n",
      "        }\n",
      "        for (int k = 0; k < bars.length; ++k) {\n",
      "            float w = (bars[k] == 0 ? x : x * n);\n",
      "            if (print) {\n",
      "                canvas.rectangle(barStartX, barStartY, w - inkSpreading, barHeight);\n",
      "            }\n",
      "            print = !print;\n",
      "            barStartX += w;\n",
      "        }\n",
      "        canvas.fill();\n",
      "        if (font != null) {\n",
      "            if (textColor != null) {\n",
      "                canvas.setFillColor(textColor);\n",
      "            }\n",
      "            canvas.\n",
      "                    beginText().\n",
      "                    setFontAndSize(font, size).\n",
      "                    setTextMatrix(textStartX, textStartY).\n",
      "                    showText(fullCode).\n",
      "                    endText();\n",
      "        }\n",
      "        return getBarcodeSize();\n",
      "    }\n",
      "\n",
      "    // Android-Conversion-Skip-Block-Start (java.awt library isn't available on Android)\n",
      "    /**\n",
      "     * Creates a <CODE>java.awt.Image</CODE>. This image only\n",
      "     * contains the bars without any text.\n",
      "     *\n",
      "     * @param foreground the color of the bars\n",
      "     * @param background the color of the background\n",
      "     * @return the image\n",
      "     */\n",
      "    @Override\n",
      "    public java.awt.Image createAwtImage(java.awt.Color foreground, java.awt.Color background) {\n",
      "        int f = (foreground == null) ? DEFAULT_BAR_FOREGROUND_COLOR.getRGB() : foreground.getRGB();\n",
      "        int g = (background == null) ? DEFAULT_BAR_BACKGROUND_COLOR.getRGB() : background.getRGB();\n",
      "        java.awt.Canvas canvas = new java.awt.Canvas();\n",
      "        String bCode = code;\n",
      "        if (extended) {\n",
      "            bCode = getCode39Ex(code);\n",
      "        }\n",
      "        if (generateChecksum) {\n",
      "            bCode += getChecksum(bCode);\n",
      "        }\n",
      "        int len = bCode.length() + 2;\n",
      "        int nn = (int) n;\n",
      "        int fullWidth = len * (6 + 3 * nn) + (len - 1);\n",
      "        byte[] bars = getBarsCode39(bCode);\n",
      "        boolean print = true;\n",
      "        int ptr = 0;\n",
      "        int height = (int) barHeight;\n",
      "        int[] pix = new int[fullWidth * height];\n",
      "        for (int k = 0; k < bars.length; ++k) {\n",
      "            int w = (bars[k] == 0 ? 1 : nn);\n",
      "            int c = g;\n",
      "            if (print) {\n",
      "                c = f;\n",
      "            }\n",
      "            print = !print;\n",
      "            for (int j = 0; j < w; ++j) {\n",
      "                pix[ptr++] = c;\n",
      "            }\n",
      "        }\n",
      "        for (int k = fullWidth; k < pix.length; k += fullWidth) {\n",
      "            System.arraycopy(pix, 0, pix, k, fullWidth);\n",
      "        }\n",
      "        return canvas.createImage(new java.awt.image.MemoryImageSource(fullWidth, height, pix, 0, fullWidth));\n",
      "    }\n",
      "    // Android-Conversion-Skip-Block-End\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.barcodes;\n",
      "\n",
      "import com.itextpdf.io.source.ByteArrayOutputStream;\n",
      "import com.itextpdf.kernel.exceptions.PdfException;\n",
      "import com.itextpdf.kernel.colors.ColorConstants;\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "import com.itextpdf.kernel.pdf.PdfPage;\n",
      "import com.itextpdf.kernel.pdf.PdfReader;\n",
      "import com.itextpdf.kernel.pdf.PdfWriter;\n",
      "import com.itextpdf.kernel.pdf.canvas.PdfCanvas;\n",
      "import com.itextpdf.kernel.utils.CompareTool;\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.type.IntegrationTest;\n",
      "\n",
      "import org.junit.AfterClass;\n",
      "import org.junit.Assert;\n",
      "import org.junit.BeforeClass;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "import java.io.IOException;\n",
      "\n",
      "@Category(IntegrationTest.class)\n",
      "public class Barcode39Test extends ExtendedITextTest {\n",
      "\n",
      "    public static final String sourceFolder = \"./src/test/resources/com/itextpdf/barcodes/\";\n",
      "    public static final String destinationFolder = \"./target/test/com/itextpdf/barcodes/Barcode39/\";\n",
      "\n",
      "    @BeforeClass\n",
      "    public static void beforeClass() {\n",
      "        createDestinationFolder(destinationFolder);\n",
      "    }\n",
      "\n",
      "    @AfterClass\n",
      "    public static void afterClass() {\n",
      "        CompareTool.cleanup(destinationFolder);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcode01Test() throws IOException, PdfException, InterruptedException {\n",
      "        String filename = \"barcode39_01.pdf\";\n",
      "        PdfDocument document = new PdfDocument(CompareTool.createTestPdfWriter(destinationFolder + filename));\n",
      "\n",
      "        PdfPage page = document.addNewPage();\n",
      "        PdfCanvas canvas = new PdfCanvas(page);\n",
      "\n",
      "        Barcode1D barcode = new Barcode39(document);\n",
      "        barcode.setCode(\"9781935182610\");\n",
      "\n",
      "        barcode.setTextAlignment(Barcode1D.ALIGN_LEFT);\n",
      "        barcode.placeBarcode(canvas, ColorConstants.BLACK, ColorConstants.BLACK);\n",
      "\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcode02Test() throws IOException, PdfException, InterruptedException {\n",
      "        String filename = \"barcode39_02.pdf\";\n",
      "        PdfDocument document = new PdfDocument(new PdfReader(sourceFolder + \"DocumentWithTrueTypeFont1.pdf\"),\n",
      "                CompareTool.createTestPdfWriter(destinationFolder + filename));\n",
      "\n",
      "        PdfCanvas canvas = new PdfCanvas(document.getLastPage());\n",
      "\n",
      "        Barcode1D barcode = new Barcode39(document);\n",
      "        barcode.setCode(\"9781935182610\");\n",
      "\n",
      "        barcode.setTextAlignment(Barcode1D.ALIGN_LEFT);\n",
      "        barcode.placeBarcode(canvas, ColorConstants.BLACK, ColorConstants.BLACK);\n",
      "\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcode03Test() {\n",
      "        PdfDocument document = new PdfDocument(new PdfWriter(new ByteArrayOutputStream()));\n",
      "        Barcode39 barcode = new Barcode39(document);\n",
      "        try {\n",
      "            barcode.getBarsCode39(\"9781935*182610\");\n",
      "            Assert.fail(\"IllegalArgumentException expected\");\n",
      "        } catch (IllegalArgumentException ignored) {\n",
      "\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "Barcode39::::getBarsCode39(java.lang.String)": [
        151,
        166
      ],
      "Barcode39::::getCode39Ex(java.lang.String)": [
        175,
        190
      ],
      "Barcode39::::getChecksum(java.lang.String)": [
        198,
        212
      ],
      "Barcode39::::getBarcodeSize()": [
        220,
        251
      ],
      "Barcode39::::createAwtImage(java.awt.Color,java.awt.Color)": [
        381,
        416
      ]
    },
    "test_method_lines_dic": {
      "Barcode39Test::::beforeClass()": [
        51,
        54
      ],
      "Barcode39Test::::afterClass()": [
        56,
        59
      ],
      "Barcode39Test::::barcode01Test()": [
        61,
        78
      ],
      "Barcode39Test::::barcode02Test()": [
        80,
        97
      ],
      "Barcode39Test::::barcode03Test()": [
        99,
        109
      ]
    },
    "reverse_method_lines_dic": {
      "151": "Barcode39::::getBarsCode39(java.lang.String)",
      "152": "Barcode39::::getBarsCode39(java.lang.String)",
      "153": "Barcode39::::getBarsCode39(java.lang.String)",
      "154": "Barcode39::::getBarsCode39(java.lang.String)",
      "155": "Barcode39::::getBarsCode39(java.lang.String)",
      "156": "Barcode39::::getBarsCode39(java.lang.String)",
      "157": "Barcode39::::getBarsCode39(java.lang.String)",
      "158": "Barcode39::::getBarsCode39(java.lang.String)",
      "159": "Barcode39::::getBarsCode39(java.lang.String)",
      "160": "Barcode39::::getBarsCode39(java.lang.String)",
      "161": "Barcode39::::getBarsCode39(java.lang.String)",
      "162": "Barcode39::::getBarsCode39(java.lang.String)",
      "163": "Barcode39::::getBarsCode39(java.lang.String)",
      "164": "Barcode39::::getBarsCode39(java.lang.String)",
      "165": "Barcode39::::getBarsCode39(java.lang.String)",
      "166": "Barcode39::::getBarsCode39(java.lang.String)",
      "175": "Barcode39::::getCode39Ex(java.lang.String)",
      "176": "Barcode39::::getCode39Ex(java.lang.String)",
      "177": "Barcode39::::getCode39Ex(java.lang.String)",
      "178": "Barcode39::::getCode39Ex(java.lang.String)",
      "179": "Barcode39::::getCode39Ex(java.lang.String)",
      "180": "Barcode39::::getCode39Ex(java.lang.String)",
      "181": "Barcode39::::getCode39Ex(java.lang.String)",
      "182": "Barcode39::::getCode39Ex(java.lang.String)",
      "183": "Barcode39::::getCode39Ex(java.lang.String)",
      "184": "Barcode39::::getCode39Ex(java.lang.String)",
      "185": "Barcode39::::getCode39Ex(java.lang.String)",
      "186": "Barcode39::::getCode39Ex(java.lang.String)",
      "187": "Barcode39::::getCode39Ex(java.lang.String)",
      "188": "Barcode39::::getCode39Ex(java.lang.String)",
      "189": "Barcode39::::getCode39Ex(java.lang.String)",
      "190": "Barcode39::::getCode39Ex(java.lang.String)",
      "198": "Barcode39::::getChecksum(java.lang.String)",
      "199": "Barcode39::::getChecksum(java.lang.String)",
      "200": "Barcode39::::getChecksum(java.lang.String)",
      "201": "Barcode39::::getChecksum(java.lang.String)",
      "202": "Barcode39::::getChecksum(java.lang.String)",
      "203": "Barcode39::::getChecksum(java.lang.String)",
      "204": "Barcode39::::getChecksum(java.lang.String)",
      "205": "Barcode39::::getChecksum(java.lang.String)",
      "206": "Barcode39::::getChecksum(java.lang.String)",
      "207": "Barcode39::::getChecksum(java.lang.String)",
      "208": "Barcode39::::getChecksum(java.lang.String)",
      "209": "Barcode39::::getChecksum(java.lang.String)",
      "210": "Barcode39::::getChecksum(java.lang.String)",
      "211": "Barcode39::::getChecksum(java.lang.String)",
      "212": "Barcode39::::getChecksum(java.lang.String)",
      "220": "Barcode39::::getBarcodeSize()",
      "221": "Barcode39::::getBarcodeSize()",
      "222": "Barcode39::::getBarcodeSize()",
      "223": "Barcode39::::getBarcodeSize()",
      "224": "Barcode39::::getBarcodeSize()",
      "225": "Barcode39::::getBarcodeSize()",
      "226": "Barcode39::::getBarcodeSize()",
      "227": "Barcode39::::getBarcodeSize()",
      "228": "Barcode39::::getBarcodeSize()",
      "229": "Barcode39::::getBarcodeSize()",
      "230": "Barcode39::::getBarcodeSize()",
      "231": "Barcode39::::getBarcodeSize()",
      "232": "Barcode39::::getBarcodeSize()",
      "233": "Barcode39::::getBarcodeSize()",
      "234": "Barcode39::::getBarcodeSize()",
      "235": "Barcode39::::getBarcodeSize()",
      "236": "Barcode39::::getBarcodeSize()",
      "237": "Barcode39::::getBarcodeSize()",
      "238": "Barcode39::::getBarcodeSize()",
      "239": "Barcode39::::getBarcodeSize()",
      "240": "Barcode39::::getBarcodeSize()",
      "241": "Barcode39::::getBarcodeSize()",
      "242": "Barcode39::::getBarcodeSize()",
      "243": "Barcode39::::getBarcodeSize()",
      "244": "Barcode39::::getBarcodeSize()",
      "245": "Barcode39::::getBarcodeSize()",
      "246": "Barcode39::::getBarcodeSize()",
      "247": "Barcode39::::getBarcodeSize()",
      "248": "Barcode39::::getBarcodeSize()",
      "249": "Barcode39::::getBarcodeSize()",
      "250": "Barcode39::::getBarcodeSize()",
      "251": "Barcode39::::getBarcodeSize()",
      "381": "Barcode39::::createAwtImage(java.awt.Color,java.awt.Color)",
      "382": "Barcode39::::createAwtImage(java.awt.Color,java.awt.Color)",
      "383": "Barcode39::::createAwtImage(java.awt.Color,java.awt.Color)",
      "384": "Barcode39::::createAwtImage(java.awt.Color,java.awt.Color)",
      "385": "Barcode39::::createAwtImage(java.awt.Color,java.awt.Color)",
      "386": "Barcode39::::createAwtImage(java.awt.Color,java.awt.Color)",
      "387": "Barcode39::::createAwtImage(java.awt.Color,java.awt.Color)",
      "388": "Barcode39::::createAwtImage(java.awt.Color,java.awt.Color)",
      "389": "Barcode39::::createAwtImage(java.awt.Color,java.awt.Color)",
      "390": "Barcode39::::createAwtImage(java.awt.Color,java.awt.Color)",
      "391": "Barcode39::::createAwtImage(java.awt.Color,java.awt.Color)",
      "392": "Barcode39::::createAwtImage(java.awt.Color,java.awt.Color)",
      "393": "Barcode39::::createAwtImage(java.awt.Color,java.awt.Color)",
      "394": "Barcode39::::createAwtImage(java.awt.Color,java.awt.Color)",
      "395": "Barcode39::::createAwtImage(java.awt.Color,java.awt.Color)",
      "396": "Barcode39::::createAwtImage(java.awt.Color,java.awt.Color)",
      "397": "Barcode39::::createAwtImage(java.awt.Color,java.awt.Color)",
      "398": "Barcode39::::createAwtImage(java.awt.Color,java.awt.Color)",
      "399": "Barcode39::::createAwtImage(java.awt.Color,java.awt.Color)",
      "400": "Barcode39::::createAwtImage(java.awt.Color,java.awt.Color)",
      "401": "Barcode39::::createAwtImage(java.awt.Color,java.awt.Color)",
      "402": "Barcode39::::createAwtImage(java.awt.Color,java.awt.Color)",
      "403": "Barcode39::::createAwtImage(java.awt.Color,java.awt.Color)",
      "404": "Barcode39::::createAwtImage(java.awt.Color,java.awt.Color)",
      "405": "Barcode39::::createAwtImage(java.awt.Color,java.awt.Color)",
      "406": "Barcode39::::createAwtImage(java.awt.Color,java.awt.Color)",
      "407": "Barcode39::::createAwtImage(java.awt.Color,java.awt.Color)",
      "408": "Barcode39::::createAwtImage(java.awt.Color,java.awt.Color)",
      "409": "Barcode39::::createAwtImage(java.awt.Color,java.awt.Color)",
      "410": "Barcode39::::createAwtImage(java.awt.Color,java.awt.Color)",
      "411": "Barcode39::::createAwtImage(java.awt.Color,java.awt.Color)",
      "412": "Barcode39::::createAwtImage(java.awt.Color,java.awt.Color)",
      "413": "Barcode39::::createAwtImage(java.awt.Color,java.awt.Color)",
      "414": "Barcode39::::createAwtImage(java.awt.Color,java.awt.Color)",
      "415": "Barcode39::::createAwtImage(java.awt.Color,java.awt.Color)",
      "416": "Barcode39::::createAwtImage(java.awt.Color,java.awt.Color)"
    },
    "test_reverse_method_lines_dic": {
      "51": "Barcode39Test::::beforeClass()",
      "52": "Barcode39Test::::beforeClass()",
      "53": "Barcode39Test::::beforeClass()",
      "54": "Barcode39Test::::beforeClass()",
      "56": "Barcode39Test::::afterClass()",
      "57": "Barcode39Test::::afterClass()",
      "58": "Barcode39Test::::afterClass()",
      "59": "Barcode39Test::::afterClass()",
      "61": "Barcode39Test::::barcode01Test()",
      "62": "Barcode39Test::::barcode01Test()",
      "63": "Barcode39Test::::barcode01Test()",
      "64": "Barcode39Test::::barcode01Test()",
      "65": "Barcode39Test::::barcode01Test()",
      "66": "Barcode39Test::::barcode01Test()",
      "67": "Barcode39Test::::barcode01Test()",
      "68": "Barcode39Test::::barcode01Test()",
      "69": "Barcode39Test::::barcode01Test()",
      "70": "Barcode39Test::::barcode01Test()",
      "71": "Barcode39Test::::barcode01Test()",
      "72": "Barcode39Test::::barcode01Test()",
      "73": "Barcode39Test::::barcode01Test()",
      "74": "Barcode39Test::::barcode01Test()",
      "75": "Barcode39Test::::barcode01Test()",
      "76": "Barcode39Test::::barcode01Test()",
      "77": "Barcode39Test::::barcode01Test()",
      "78": "Barcode39Test::::barcode01Test()",
      "80": "Barcode39Test::::barcode02Test()",
      "81": "Barcode39Test::::barcode02Test()",
      "82": "Barcode39Test::::barcode02Test()",
      "83": "Barcode39Test::::barcode02Test()",
      "84": "Barcode39Test::::barcode02Test()",
      "85": "Barcode39Test::::barcode02Test()",
      "86": "Barcode39Test::::barcode02Test()",
      "87": "Barcode39Test::::barcode02Test()",
      "88": "Barcode39Test::::barcode02Test()",
      "89": "Barcode39Test::::barcode02Test()",
      "90": "Barcode39Test::::barcode02Test()",
      "91": "Barcode39Test::::barcode02Test()",
      "92": "Barcode39Test::::barcode02Test()",
      "93": "Barcode39Test::::barcode02Test()",
      "94": "Barcode39Test::::barcode02Test()",
      "95": "Barcode39Test::::barcode02Test()",
      "96": "Barcode39Test::::barcode02Test()",
      "97": "Barcode39Test::::barcode02Test()",
      "99": "Barcode39Test::::barcode03Test()",
      "100": "Barcode39Test::::barcode03Test()",
      "101": "Barcode39Test::::barcode03Test()",
      "102": "Barcode39Test::::barcode03Test()",
      "103": "Barcode39Test::::barcode03Test()",
      "104": "Barcode39Test::::barcode03Test()",
      "105": "Barcode39Test::::barcode03Test()",
      "106": "Barcode39Test::::barcode03Test()",
      "107": "Barcode39Test::::barcode03Test()",
      "108": "Barcode39Test::::barcode03Test()",
      "109": "Barcode39Test::::barcode03Test()"
    },
    "tests": [
      {
        "test_lines": [
          61,
          78
        ],
        "covered_lines": [
          46,
          122,
          123,
          132,
          133,
          134,
          135,
          136,
          137,
          138,
          139,
          140,
          141,
          142,
          143,
          152,
          153,
          154,
          155,
          156,
          157,
          160,
          163,
          165,
          222,
          223,
          224,
          225,
          228,
          229,
          230,
          234,
          235,
          238,
          239,
          241,
          243,
          244,
          247,
          248,
          249,
          250,
          294,
          295,
          296,
          297,
          300,
          301,
          304,
          305,
          307,
          309,
          312,
          313,
          314,
          315,
          316,
          318,
          334,
          335,
          336,
          337,
          340,
          341,
          344,
          345,
          346,
          347,
          349,
          350,
          351,
          352,
          354,
          355,
          357,
          358,
          359,
          360,
          362,
          363,
          364,
          365,
          366,
          367,
          369
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          80,
          97
        ],
        "covered_lines": [
          46,
          122,
          123,
          132,
          133,
          134,
          135,
          136,
          137,
          138,
          139,
          140,
          141,
          142,
          143,
          152,
          153,
          154,
          155,
          156,
          157,
          160,
          163,
          165,
          222,
          223,
          224,
          225,
          228,
          229,
          230,
          234,
          235,
          238,
          239,
          241,
          243,
          244,
          247,
          248,
          249,
          250,
          294,
          295,
          296,
          297,
          300,
          301,
          304,
          305,
          307,
          309,
          312,
          313,
          314,
          315,
          316,
          318,
          334,
          335,
          336,
          337,
          340,
          341,
          344,
          345,
          346,
          347,
          349,
          350,
          351,
          352,
          354,
          355,
          357,
          358,
          359,
          360,
          362,
          363,
          364,
          365,
          366,
          367,
          369
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          99,
          109
        ],
        "covered_lines": [
          46,
          122,
          123,
          132,
          133,
          134,
          135,
          136,
          137,
          138,
          139,
          140,
          141,
          142,
          143,
          152,
          153,
          154,
          155,
          156,
          157,
          158,
          160,
          163
        ],
        "label": "Barcode39::::getBarsCode39(java.lang.String)"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/barcodes/src/main/java/com/itextpdf/barcodes/BarcodeQRCode.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.barcodes;\n",
      "\n",
      "import com.itextpdf.barcodes.exceptions.WriterException;\n",
      "import com.itextpdf.barcodes.qrcode.ByteMatrix;\n",
      "import com.itextpdf.barcodes.qrcode.EncodeHintType;\n",
      "import com.itextpdf.barcodes.qrcode.QRCodeWriter;\n",
      "import com.itextpdf.kernel.colors.Color;\n",
      "import com.itextpdf.kernel.geom.Rectangle;\n",
      "import com.itextpdf.kernel.pdf.PdfArray;\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "import com.itextpdf.kernel.pdf.canvas.PdfCanvas;\n",
      "import com.itextpdf.kernel.pdf.xobject.PdfFormXObject;\n",
      "\n",
      "import java.util.Map;\n",
      "\n",
      "/**\n",
      " * A QRCode implementation based on the zxing code.\n",
      " */\n",
      "public class BarcodeQRCode extends Barcode2D {\n",
      "    ByteMatrix bm;\n",
      "    /**\n",
      "     * modifiers to change the way the barcode is create.\n",
      "     **/\n",
      "    Map<EncodeHintType, Object> hints;\n",
      "    String code;\n",
      "\n",
      "    /**\n",
      "     * Creates the QR barcode.\n",
      "     *\n",
      "     * @param code  the text to be encoded\n",
      "     * @param hints barcode hints. See #setHints for description.\n",
      "     */\n",
      "    public BarcodeQRCode(String code, Map<EncodeHintType, Object> hints) {\n",
      "        this.code = code;\n",
      "        this.hints = hints;\n",
      "        regenerate();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates the QR barcode with default error correction level (ErrorCorrectionLevel.L)\n",
      "     * and default character set (ISO-8859-1).\n",
      "     *\n",
      "     * @param content the text to be encoded\n",
      "     */\n",
      "    public BarcodeQRCode(String content) {\n",
      "        this(content, null);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates an instance of the {@link BarcodeQRCode} class.\n",
      "     */\n",
      "    public BarcodeQRCode() {\n",
      "        // empty constructor\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets the current data.\n",
      "     * @return the encoded data\n",
      "     */\n",
      "    public String getCode() {\n",
      "        return code;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Sets the data to be encoded by the barcode. If not specified in hints otherwise, the character set should be ISO-8859-1.\n",
      "     * @param code The data to encode\n",
      "     */\n",
      "    public void setCode(String code) {\n",
      "        this.code = code;\n",
      "        regenerate();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * @return modifiers to change the way the barcode is created.\n",
      "     */\n",
      "    public Map<EncodeHintType, Object> getHints() {\n",
      "        return hints;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * @param hints modifiers to change the way the barcode is created. They can be EncodeHintType.ERROR_CORRECTION\n",
      "     *              and EncodeHintType.CHARACTER_SET. For EncodeHintType.ERROR_CORRECTION the values can be ErrorCorrectionLevel.L, M, Q, H.\n",
      "     *              For EncodeHintType.CHARACTER_SET the values are strings and can be Cp437, Shift_JIS and ISO-8859-1 to ISO-8859-16.\n",
      "     *              You can also use UTF-8, but correct behaviour is not guaranteed as Unicode is not supported in QRCodes.\n",
      "     *              The default value is ISO-8859-1.\n",
      "     */\n",
      "    public void setHints(Map<EncodeHintType, Object> hints) {\n",
      "        this.hints = hints;\n",
      "        regenerate();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Regenerates barcode after changes in hints or code.\n",
      "     */\n",
      "    public void regenerate() {\n",
      "        if (code != null) {\n",
      "            try {\n",
      "                QRCodeWriter qc = new QRCodeWriter();\n",
      "                bm = qc.encode(code, 1, 1, hints);\n",
      "            } catch (WriterException ex) {\n",
      "                throw new IllegalArgumentException(ex.getMessage(), ex.getCause());\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets the size of the barcode grid\n",
      "     */\n",
      "    @Override\n",
      "    public Rectangle getBarcodeSize() {\n",
      "        return new Rectangle(0, 0, bm.getWidth(), bm.getHeight());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets the barcode size\n",
      "     * @param moduleSize    The module size\n",
      "     * @return              The size of the barcode\n",
      "     */\n",
      "    public Rectangle getBarcodeSize(float moduleSize) {\n",
      "        return new Rectangle(0, 0, bm.getWidth() * moduleSize, bm.getHeight() * moduleSize);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Rectangle placeBarcode(PdfCanvas canvas, Color foreground) {\n",
      "        return placeBarcode(canvas, foreground, DEFAULT_MODULE_SIZE);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * * Places the barcode in a <CODE>PdfCanvas</CODE>. The\n",
      "     * barcode is always placed at coordinates (0, 0). Use the\n",
      "     * translation matrix to move it elsewhere.\n",
      "     *\n",
      "     * @param canvas     the <CODE>PdfCanvas</CODE> where the barcode will be placed\n",
      "     * @param foreground the foreground color. It can be <CODE>null</CODE>\n",
      "     * @param moduleSide the size of the square grid cell\n",
      "     * @return the dimensions the barcode occupies\n",
      "     */\n",
      "    public Rectangle placeBarcode(PdfCanvas canvas, Color foreground, float moduleSide) {\n",
      "        int width = bm.getWidth();\n",
      "        int height = bm.getHeight();\n",
      "        byte[][] mt = bm.getArray();\n",
      "\n",
      "        if (foreground != null) {\n",
      "            canvas.setFillColor(foreground);\n",
      "        }\n",
      "\n",
      "        for (int y = 0; y < height; ++y) {\n",
      "            byte[] line = mt[y];\n",
      "            for (int x = 0; x < width; ++x) {\n",
      "                if (line[x] == 0) {\n",
      "                    canvas.rectangle(x * moduleSide, (height - y - 1) * moduleSide, moduleSide, moduleSide);\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "        canvas.fill();\n",
      "\n",
      "        return getBarcodeSize(moduleSide);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates a PdfFormXObject with the barcode.\n",
      "     *\n",
      "     * @param foreground the color of the pixels. It can be <CODE>null</CODE>\n",
      "     * @return the XObject.\n",
      "     */\n",
      "    @Override\n",
      "    public PdfFormXObject createFormXObject(Color foreground, PdfDocument document) {\n",
      "        return createFormXObject(foreground, DEFAULT_MODULE_SIZE, document);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates a PdfFormXObject with the barcode.\n",
      "     *\n",
      "     * @param foreground    The color of the pixels. It can be <CODE>null</CODE>\n",
      "     * @param moduleSize    The size of the pixels.\n",
      "     * @param document      The document\n",
      "     * @return the XObject.\n",
      "     */\n",
      "    public PdfFormXObject createFormXObject(Color foreground, float moduleSize, PdfDocument document) {\n",
      "        PdfFormXObject xObject = new PdfFormXObject((Rectangle) null);\n",
      "        Rectangle rect = placeBarcode(new PdfCanvas(xObject, document), foreground, moduleSize);\n",
      "        xObject.setBBox(new PdfArray(rect));\n",
      "\n",
      "        return xObject;\n",
      "    }\n",
      "\n",
      "    // Android-Conversion-Skip-Block-Start (java.awt library isn't available on Android)\n",
      "    /**\n",
      "     * Creates a <CODE>java.awt.Image</CODE>.\n",
      "     *\n",
      "     * @param foreground the color of the bars\n",
      "     * @param background the color of the background\n",
      "     * @return the image\n",
      "     */\n",
      "    public java.awt.Image createAwtImage(java.awt.Color foreground, java.awt.Color background) {\n",
      "        int f = foreground.getRGB();\n",
      "        int g = background.getRGB();\n",
      "        java.awt.Canvas canvas = new java.awt.Canvas();\n",
      "\n",
      "        int width = bm.getWidth();\n",
      "        int height = bm.getHeight();\n",
      "        int[] pix = new int[width * height];\n",
      "        byte[][] mt = bm.getArray();\n",
      "        for (int y = 0; y < height; ++y) {\n",
      "            byte[] line = mt[y];\n",
      "            for (int x = 0; x < width; ++x) {\n",
      "                pix[y * width + x] = line[x] == 0 ? f : g;\n",
      "            }\n",
      "        }\n",
      "\n",
      "        java.awt.Image img = canvas.createImage(new java.awt.image.MemoryImageSource(width, height, pix, 0, width));\n",
      "        return img;\n",
      "    }\n",
      "    // Android-Conversion-Skip-Block-End\n",
      "\n",
      "    private byte[] getBitMatrix() {\n",
      "        int width = bm.getWidth();\n",
      "        int height = bm.getHeight();\n",
      "        int stride = (width + 7) / 8;\n",
      "        byte[] b = new byte[stride * height];\n",
      "        byte[][] mt = bm.getArray();\n",
      "        for (int y = 0; y < height; ++y) {\n",
      "            byte[] line = mt[y];\n",
      "            for (int x = 0; x < width; ++x) {\n",
      "                if (line[x] != 0) {\n",
      "                    int offset = stride * y + x / 8;\n",
      "                    b[offset] |= (byte) (0x80 >> (x % 8));\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "        return b;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.barcodes;\n",
      "\n",
      "import com.itextpdf.barcodes.qrcode.EncodeHintType;\n",
      "import com.itextpdf.barcodes.qrcode.ErrorCorrectionLevel;\n",
      "import com.itextpdf.kernel.exceptions.PdfException;\n",
      "import com.itextpdf.kernel.colors.ColorConstants;\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "import com.itextpdf.kernel.pdf.PdfPage;\n",
      "import com.itextpdf.kernel.pdf.PdfWriter;\n",
      "import com.itextpdf.kernel.pdf.canvas.PdfCanvas;\n",
      "import com.itextpdf.kernel.utils.CompareTool;\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.type.IntegrationTest;\n",
      "\n",
      "import java.io.IOException;\n",
      "import java.util.HashMap;\n",
      "import java.util.Map;\n",
      "\n",
      "import org.junit.AfterClass;\n",
      "import org.junit.Assert;\n",
      "import org.junit.BeforeClass;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(IntegrationTest.class)\n",
      "public class BarcodeQRCodeTest extends ExtendedITextTest {\n",
      "\n",
      "    public static final String sourceFolder = \"./src/test/resources/com/itextpdf/barcodes/\";\n",
      "    public static final String destinationFolder = \"./target/test/com/itextpdf/barcodes/BarcodeQRCode/\";\n",
      "\n",
      "    @BeforeClass\n",
      "    public static void beforeClass() {\n",
      "        createOrClearDestinationFolder(destinationFolder);\n",
      "    }\n",
      "\n",
      "    @AfterClass\n",
      "    public static void afterClass() {\n",
      "        CompareTool.cleanup(destinationFolder);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcode01Test() throws IOException, PdfException, InterruptedException {\n",
      "        String filename = \"barcodeQRCode01.pdf\";\n",
      "        PdfWriter writer = CompareTool.createTestPdfWriter(destinationFolder + filename);\n",
      "        PdfDocument document = new PdfDocument(writer);\n",
      "\n",
      "        PdfPage page = document.addNewPage();\n",
      "        PdfCanvas canvas = new PdfCanvas(page);\n",
      "\n",
      "        Map<EncodeHintType, Object> hints = new HashMap<>();\n",
      "        hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);\n",
      "        BarcodeQRCode barcode = new BarcodeQRCode(\"some specific text 239214 hello world\");\n",
      "        barcode.placeBarcode(canvas, ColorConstants.GRAY, 12);\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcode02Test() throws IOException, PdfException, InterruptedException {\n",
      "        String filename = \"barcodeQRCode02.pdf\";\n",
      "        PdfWriter writer = CompareTool.createTestPdfWriter(destinationFolder + filename);\n",
      "        PdfDocument document = new PdfDocument(writer);\n",
      "\n",
      "        PdfPage page1 = document.addNewPage();\n",
      "        PdfCanvas canvas = new PdfCanvas(page1);\n",
      "        Map<EncodeHintType, Object> hints = new HashMap<>();\n",
      "        hints.put(EncodeHintType.CHARACTER_SET, \"UTF-8\");\n",
      "        BarcodeQRCode barcode1 = new BarcodeQRCode(\"\u0434\u0438\u043c\u0430\", hints);\n",
      "        barcode1.placeBarcode(canvas, ColorConstants.GRAY, 12);\n",
      "        document.close();\n",
      "        Assert.assertNull(new CompareTool().compareByContent(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcodeVersioningTest() throws IOException, PdfException, InterruptedException{\n",
      "        String filename = \"barcodeQRCodeVersioning.pdf\";\n",
      "        PdfWriter writer = CompareTool.createTestPdfWriter(destinationFolder + filename);\n",
      "        PdfDocument document = new PdfDocument(writer);\n",
      "        for(int i = -9; i<42;i+=10) {\n",
      "            PdfPage page1 = document.addNewPage();\n",
      "            PdfCanvas canvas = new PdfCanvas(page1);\n",
      "            Map<EncodeHintType, Object> hints = new HashMap<>();\n",
      "            hints.put(EncodeHintType.CHARACTER_SET, \"UTF-8\");\n",
      "            hints.put(EncodeHintType.MIN_VERSION_NR, i);\n",
      "            BarcodeQRCode barcode1 = new BarcodeQRCode(\"\u0434\u0438\u043c\u0430\", hints);\n",
      "            barcode1.placeBarcode(canvas, ColorConstants.GRAY, 3);\n",
      "        }\n",
      "        document.close();\n",
      "        Assert.assertNull(new CompareTool().compareByContent(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder, \"diff_\"));\n",
      "\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "method_lines_dic": {
      "BarcodeQRCode::::getCode()": [
        82,
        84
      ],
      "BarcodeQRCode::::setCode(java.lang.String)": [
        90,
        93
      ],
      "BarcodeQRCode::::getHints()": [
        98,
        100
      ],
      "BarcodeQRCode::::setHints(java.util.Map<com.itextpdf.barcodes.qrcode.EncodeHintType, java.lang.Object>)": [
        109,
        112
      ],
      "BarcodeQRCode::::regenerate()": [
        117,
        126
      ],
      "BarcodeQRCode::::getBarcodeSize()": [
        131,
        134
      ],
      "BarcodeQRCode::::getBarcodeSize(float)": [
        141,
        143
      ],
      "BarcodeQRCode::::createAwtImage(java.awt.Color,java.awt.Color)": [
        217,
        235
      ],
      "BarcodeQRCode::::getBitMatrix()": [
        238,
        254
      ]
    },
    "test_method_lines_dic": {
      "BarcodeQRCodeTest::::beforeClass()": [
        53,
        56
      ],
      "BarcodeQRCodeTest::::afterClass()": [
        58,
        61
      ],
      "BarcodeQRCodeTest::::barcode01Test()": [
        63,
        79
      ],
      "BarcodeQRCodeTest::::barcode02Test()": [
        81,
        95
      ],
      "BarcodeQRCodeTest::::barcodeVersioningTest()": [
        97,
        114
      ]
    },
    "reverse_method_lines_dic": {
      "82": "BarcodeQRCode::::getCode()",
      "83": "BarcodeQRCode::::getCode()",
      "84": "BarcodeQRCode::::getCode()",
      "90": "BarcodeQRCode::::setCode(java.lang.String)",
      "91": "BarcodeQRCode::::setCode(java.lang.String)",
      "92": "BarcodeQRCode::::setCode(java.lang.String)",
      "93": "BarcodeQRCode::::setCode(java.lang.String)",
      "98": "BarcodeQRCode::::getHints()",
      "99": "BarcodeQRCode::::getHints()",
      "100": "BarcodeQRCode::::getHints()",
      "109": "BarcodeQRCode::::setHints(java.util.Map<com.itextpdf.barcodes.qrcode.EncodeHintType, java.lang.Object>)",
      "110": "BarcodeQRCode::::setHints(java.util.Map<com.itextpdf.barcodes.qrcode.EncodeHintType, java.lang.Object>)",
      "111": "BarcodeQRCode::::setHints(java.util.Map<com.itextpdf.barcodes.qrcode.EncodeHintType, java.lang.Object>)",
      "112": "BarcodeQRCode::::setHints(java.util.Map<com.itextpdf.barcodes.qrcode.EncodeHintType, java.lang.Object>)",
      "117": "BarcodeQRCode::::regenerate()",
      "118": "BarcodeQRCode::::regenerate()",
      "119": "BarcodeQRCode::::regenerate()",
      "120": "BarcodeQRCode::::regenerate()",
      "121": "BarcodeQRCode::::regenerate()",
      "122": "BarcodeQRCode::::regenerate()",
      "123": "BarcodeQRCode::::regenerate()",
      "124": "BarcodeQRCode::::regenerate()",
      "125": "BarcodeQRCode::::regenerate()",
      "126": "BarcodeQRCode::::regenerate()",
      "131": "BarcodeQRCode::::getBarcodeSize()",
      "132": "BarcodeQRCode::::getBarcodeSize()",
      "133": "BarcodeQRCode::::getBarcodeSize()",
      "134": "BarcodeQRCode::::getBarcodeSize()",
      "141": "BarcodeQRCode::::getBarcodeSize(float)",
      "142": "BarcodeQRCode::::getBarcodeSize(float)",
      "143": "BarcodeQRCode::::getBarcodeSize(float)",
      "217": "BarcodeQRCode::::createAwtImage(java.awt.Color,java.awt.Color)",
      "218": "BarcodeQRCode::::createAwtImage(java.awt.Color,java.awt.Color)",
      "219": "BarcodeQRCode::::createAwtImage(java.awt.Color,java.awt.Color)",
      "220": "BarcodeQRCode::::createAwtImage(java.awt.Color,java.awt.Color)",
      "221": "BarcodeQRCode::::createAwtImage(java.awt.Color,java.awt.Color)",
      "222": "BarcodeQRCode::::createAwtImage(java.awt.Color,java.awt.Color)",
      "223": "BarcodeQRCode::::createAwtImage(java.awt.Color,java.awt.Color)",
      "224": "BarcodeQRCode::::createAwtImage(java.awt.Color,java.awt.Color)",
      "225": "BarcodeQRCode::::createAwtImage(java.awt.Color,java.awt.Color)",
      "226": "BarcodeQRCode::::createAwtImage(java.awt.Color,java.awt.Color)",
      "227": "BarcodeQRCode::::createAwtImage(java.awt.Color,java.awt.Color)",
      "228": "BarcodeQRCode::::createAwtImage(java.awt.Color,java.awt.Color)",
      "229": "BarcodeQRCode::::createAwtImage(java.awt.Color,java.awt.Color)",
      "230": "BarcodeQRCode::::createAwtImage(java.awt.Color,java.awt.Color)",
      "231": "BarcodeQRCode::::createAwtImage(java.awt.Color,java.awt.Color)",
      "232": "BarcodeQRCode::::createAwtImage(java.awt.Color,java.awt.Color)",
      "233": "BarcodeQRCode::::createAwtImage(java.awt.Color,java.awt.Color)",
      "234": "BarcodeQRCode::::createAwtImage(java.awt.Color,java.awt.Color)",
      "235": "BarcodeQRCode::::createAwtImage(java.awt.Color,java.awt.Color)",
      "238": "BarcodeQRCode::::getBitMatrix()",
      "239": "BarcodeQRCode::::getBitMatrix()",
      "240": "BarcodeQRCode::::getBitMatrix()",
      "241": "BarcodeQRCode::::getBitMatrix()",
      "242": "BarcodeQRCode::::getBitMatrix()",
      "243": "BarcodeQRCode::::getBitMatrix()",
      "244": "BarcodeQRCode::::getBitMatrix()",
      "245": "BarcodeQRCode::::getBitMatrix()",
      "246": "BarcodeQRCode::::getBitMatrix()",
      "247": "BarcodeQRCode::::getBitMatrix()",
      "248": "BarcodeQRCode::::getBitMatrix()",
      "249": "BarcodeQRCode::::getBitMatrix()",
      "250": "BarcodeQRCode::::getBitMatrix()",
      "251": "BarcodeQRCode::::getBitMatrix()",
      "252": "BarcodeQRCode::::getBitMatrix()",
      "253": "BarcodeQRCode::::getBitMatrix()",
      "254": "BarcodeQRCode::::getBitMatrix()"
    },
    "test_reverse_method_lines_dic": {
      "53": "BarcodeQRCodeTest::::beforeClass()",
      "54": "BarcodeQRCodeTest::::beforeClass()",
      "55": "BarcodeQRCodeTest::::beforeClass()",
      "56": "BarcodeQRCodeTest::::beforeClass()",
      "58": "BarcodeQRCodeTest::::afterClass()",
      "59": "BarcodeQRCodeTest::::afterClass()",
      "60": "BarcodeQRCodeTest::::afterClass()",
      "61": "BarcodeQRCodeTest::::afterClass()",
      "63": "BarcodeQRCodeTest::::barcode01Test()",
      "64": "BarcodeQRCodeTest::::barcode01Test()",
      "65": "BarcodeQRCodeTest::::barcode01Test()",
      "66": "BarcodeQRCodeTest::::barcode01Test()",
      "67": "BarcodeQRCodeTest::::barcode01Test()",
      "68": "BarcodeQRCodeTest::::barcode01Test()",
      "69": "BarcodeQRCodeTest::::barcode01Test()",
      "70": "BarcodeQRCodeTest::::barcode01Test()",
      "71": "BarcodeQRCodeTest::::barcode01Test()",
      "72": "BarcodeQRCodeTest::::barcode01Test()",
      "73": "BarcodeQRCodeTest::::barcode01Test()",
      "74": "BarcodeQRCodeTest::::barcode01Test()",
      "75": "BarcodeQRCodeTest::::barcode01Test()",
      "76": "BarcodeQRCodeTest::::barcode01Test()",
      "77": "BarcodeQRCodeTest::::barcode01Test()",
      "78": "BarcodeQRCodeTest::::barcode01Test()",
      "79": "BarcodeQRCodeTest::::barcode01Test()",
      "81": "BarcodeQRCodeTest::::barcode02Test()",
      "82": "BarcodeQRCodeTest::::barcode02Test()",
      "83": "BarcodeQRCodeTest::::barcode02Test()",
      "84": "BarcodeQRCodeTest::::barcode02Test()",
      "85": "BarcodeQRCodeTest::::barcode02Test()",
      "86": "BarcodeQRCodeTest::::barcode02Test()",
      "87": "BarcodeQRCodeTest::::barcode02Test()",
      "88": "BarcodeQRCodeTest::::barcode02Test()",
      "89": "BarcodeQRCodeTest::::barcode02Test()",
      "90": "BarcodeQRCodeTest::::barcode02Test()",
      "91": "BarcodeQRCodeTest::::barcode02Test()",
      "92": "BarcodeQRCodeTest::::barcode02Test()",
      "93": "BarcodeQRCodeTest::::barcode02Test()",
      "94": "BarcodeQRCodeTest::::barcode02Test()",
      "95": "BarcodeQRCodeTest::::barcode02Test()",
      "97": "BarcodeQRCodeTest::::barcodeVersioningTest()",
      "98": "BarcodeQRCodeTest::::barcodeVersioningTest()",
      "99": "BarcodeQRCodeTest::::barcodeVersioningTest()",
      "100": "BarcodeQRCodeTest::::barcodeVersioningTest()",
      "101": "BarcodeQRCodeTest::::barcodeVersioningTest()",
      "102": "BarcodeQRCodeTest::::barcodeVersioningTest()",
      "103": "BarcodeQRCodeTest::::barcodeVersioningTest()",
      "104": "BarcodeQRCodeTest::::barcodeVersioningTest()",
      "105": "BarcodeQRCodeTest::::barcodeVersioningTest()",
      "106": "BarcodeQRCodeTest::::barcodeVersioningTest()",
      "107": "BarcodeQRCodeTest::::barcodeVersioningTest()",
      "108": "BarcodeQRCodeTest::::barcodeVersioningTest()",
      "109": "BarcodeQRCodeTest::::barcodeVersioningTest()",
      "110": "BarcodeQRCodeTest::::barcodeVersioningTest()",
      "111": "BarcodeQRCodeTest::::barcodeVersioningTest()",
      "112": "BarcodeQRCodeTest::::barcodeVersioningTest()",
      "113": "BarcodeQRCodeTest::::barcodeVersioningTest()",
      "114": "BarcodeQRCodeTest::::barcodeVersioningTest()"
    },
    "tests": [
      {
        "test_lines": [
          63,
          79
        ],
        "covered_lines": [
          55,
          56,
          57,
          58,
          59,
          68,
          69,
          118,
          120,
          121,
          124,
          126,
          142,
          161,
          162,
          163,
          165,
          166,
          169,
          170,
          171,
          172,
          173,
          177,
          179
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          81,
          95
        ],
        "covered_lines": [
          55,
          56,
          57,
          58,
          59,
          118,
          120,
          121,
          124,
          126,
          142,
          161,
          162,
          163,
          165,
          166,
          169,
          170,
          171,
          172,
          173,
          177,
          179
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          97,
          114
        ],
        "covered_lines": [
          55,
          56,
          57,
          58,
          59,
          118,
          120,
          121,
          124,
          126,
          142,
          161,
          162,
          163,
          165,
          166,
          169,
          170,
          171,
          172,
          173,
          177,
          179
        ],
        "label": "<<NO FOCAL METHOD>>"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/barcodes/src/main/java/com/itextpdf/barcodes/BarcodePostnet.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.barcodes;\n",
      "\n",
      "\n",
      "import com.itextpdf.kernel.colors.Color;\n",
      "import com.itextpdf.kernel.geom.Rectangle;\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "import com.itextpdf.kernel.pdf.canvas.PdfCanvas;\n",
      "\n",
      "/**\n",
      " * POSTNET (Postal Numeric Encoding Technique) is a barcode symbology used by the United States Postal Service to assist\n",
      " * in directing mail. The ZIP Code or ZIP+4 code is encoded in half- and full-height bars.[1] Most often, the delivery\n",
      " * point is added, usually being the last two digits of the address or PO box number.\n",
      " */\n",
      "public class BarcodePostnet extends Barcode1D {\n",
      "\n",
      "    public static int TYPE_POSTNET = 1;\n",
      "    public static int TYPE_PLANET = 2;\n",
      "\n",
      "    /**\n",
      "     * The bars for each character.\n",
      "     */\n",
      "    private static final byte[][] BARS =\n",
      "            {\n",
      "                    {1, 1, 0, 0, 0},\n",
      "                    {0, 0, 0, 1, 1},\n",
      "                    {0, 0, 1, 0, 1},\n",
      "                    {0, 0, 1, 1, 0},\n",
      "                    {0, 1, 0, 0, 1},\n",
      "                    {0, 1, 0, 1, 0},\n",
      "                    {0, 1, 1, 0, 0},\n",
      "                    {1, 0, 0, 0, 1},\n",
      "                    {1, 0, 0, 1, 0},\n",
      "                    {1, 0, 1, 0, 0}\n",
      "            };\n",
      "\n",
      "    /**\n",
      "     * Creates new {@link  BarcodePostnet} instance.\n",
      "     *\n",
      "     * @param document The document\n",
      "     */\n",
      "    public BarcodePostnet(PdfDocument document) {\n",
      "        super(document);\n",
      "        // distance between bars\n",
      "        n = 72f / 22f;\n",
      "        // bar width\n",
      "        x = 0.02f * 72f;\n",
      "        // height of the tall bars\n",
      "        barHeight = 0.125f * 72f;\n",
      "        // height of the short bars\n",
      "        size = 0.05f * 72f;\n",
      "        // type of code\n",
      "        codeType = TYPE_POSTNET;\n",
      "    }\n",
      "\n",
      "    /** Creates the bars for Postnet.\n",
      "     * @param text the code to be created without checksum\n",
      "     * @return the bars\n",
      "     */\n",
      "    public static byte[] getBarsPostnet(String text) {\n",
      "        int total = 0;\n",
      "        for (int k = text.length() - 1; k >= 0; --k) {\n",
      "            int n = text.charAt(k) - '0';\n",
      "            total += n;\n",
      "        }\n",
      "        text += (char)(((10 - (total % 10)) % 10) + '0');\n",
      "        byte[] bars = new byte[text.length() * 5 + 2];\n",
      "        bars[0] = 1;\n",
      "        bars[bars.length - 1] = 1;\n",
      "        for (int k = 0; k < text.length(); ++k) {\n",
      "            int c = text.charAt(k) - '0';\n",
      "            System.arraycopy(BARS[c], 0, bars, k * 5 + 1, 5);\n",
      "        }\n",
      "        return bars;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Rectangle getBarcodeSize() {\n",
      "        float width = ((code.length() + 1) * 5 + 1) * n + x;\n",
      "        return new Rectangle(width, barHeight);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void fitWidth(float width) {\n",
      "        byte[] bars = getBarsPostnet(code);\n",
      "        float currentWidth = getBarcodeSize().getWidth();\n",
      "        x *= width / currentWidth;\n",
      "        n = (width - x) / (bars.length - 1);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Rectangle placeBarcode(PdfCanvas canvas, Color barColor, Color textColor) {\n",
      "        if (barColor != null)\n",
      "            canvas.setFillColor(barColor);\n",
      "        byte[] bars = getBarsPostnet(code);\n",
      "        byte flip = 1;\n",
      "        if (codeType == TYPE_PLANET) {\n",
      "            flip = 0;\n",
      "            bars[0] = 0;\n",
      "            bars[bars.length - 1] = 0;\n",
      "        }\n",
      "        float startX = 0;\n",
      "        for (int k = 0; k < bars.length; ++k) {\n",
      "            canvas.rectangle(startX, 0, x - inkSpreading, bars[k] == flip ? barHeight : size);\n",
      "            startX += n;\n",
      "        }\n",
      "        canvas.fill();\n",
      "        return getBarcodeSize();\n",
      "    }\n",
      "\n",
      "    // Android-Conversion-Skip-Block-Start (java.awt library isn't available on Android)\n",
      "    @Override\n",
      "    public java.awt.Image createAwtImage(java.awt.Color foreground, java.awt.Color background) {\n",
      "        int f = (foreground == null) ? DEFAULT_BAR_FOREGROUND_COLOR.getRGB() : foreground.getRGB();\n",
      "        int g = (background == null) ? DEFAULT_BAR_BACKGROUND_COLOR.getRGB() : background.getRGB();\n",
      "        java.awt.Canvas canvas = new java.awt.Canvas();\n",
      "        int barWidth = (int)x;\n",
      "        if (barWidth <= 0)\n",
      "            barWidth = 1;\n",
      "        int barDistance = (int)n;\n",
      "        if (barDistance <= barWidth)\n",
      "            barDistance = barWidth + 1;\n",
      "        int barShort = (int)size;\n",
      "        if (barShort <= 0)\n",
      "            barShort = 1;\n",
      "        int barTall = (int)barHeight;\n",
      "        if (barTall <= barShort)\n",
      "            barTall = barShort + 1;\n",
      "        int width = ((code.length() + 1) * 5 + 1) * barDistance + barWidth;\n",
      "        int[] pix = new int[width * barTall];\n",
      "        byte[] bars = getBarsPostnet(code);\n",
      "        byte flip = 1;\n",
      "        if (codeType == TYPE_PLANET) {\n",
      "            flip = 0;\n",
      "            bars[0] = 0;\n",
      "            bars[bars.length - 1] = 0;\n",
      "        }\n",
      "        int idx = 0;\n",
      "        for (int k = 0; k < bars.length; ++k) {\n",
      "            boolean dot = (bars[k] == flip);\n",
      "            for (int j = 0; j < barDistance; ++j) {\n",
      "                pix[idx + j] = ((dot && j < barWidth) ? f : g);\n",
      "            }\n",
      "            idx += barDistance;\n",
      "        }\n",
      "        int limit = width * (barTall - barShort);\n",
      "        for (int k = width; k < limit; k += width)\n",
      "            System.arraycopy(pix, 0, pix, k, width);\n",
      "        idx = limit;\n",
      "        for (int k = 0; k < bars.length; ++k) {\n",
      "            for (int j = 0; j < barDistance; ++j) {\n",
      "                pix[idx + j] = ((j < barWidth) ? f : g);\n",
      "            }\n",
      "            idx += barDistance;\n",
      "        }\n",
      "        for (int k = limit + width; k < pix.length; k += width)\n",
      "            System.arraycopy(pix, limit, pix, k, width);\n",
      "        java.awt.Image img = canvas.createImage(new java.awt.image.MemoryImageSource(width, barTall, pix, 0, width));\n",
      "\n",
      "        return img;\n",
      "    }\n",
      "    // Android-Conversion-Skip-Block-End\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.barcodes;\n",
      "\n",
      "import com.itextpdf.kernel.exceptions.PdfException;\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "import com.itextpdf.kernel.pdf.PdfPage;\n",
      "import com.itextpdf.kernel.pdf.PdfWriter;\n",
      "import com.itextpdf.kernel.pdf.canvas.PdfCanvas;\n",
      "import com.itextpdf.kernel.utils.CompareTool;\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.type.IntegrationTest;\n",
      "\n",
      "import java.io.IOException;\n",
      "\n",
      "import org.junit.AfterClass;\n",
      "import org.junit.Assert;\n",
      "import org.junit.BeforeClass;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(IntegrationTest.class)\n",
      "public class BarcodePostnetTest extends ExtendedITextTest {\n",
      "\n",
      "    public static final String sourceFolder = \"./src/test/resources/com/itextpdf/barcodes/\";\n",
      "    public static final String destinationFolder = \"./target/test/com/itextpdf/barcodes/BarcodePostnet/\";\n",
      "\n",
      "    @BeforeClass\n",
      "    public static void beforeClass() {\n",
      "        createDestinationFolder(destinationFolder);\n",
      "    }\n",
      "\n",
      "    @AfterClass\n",
      "    public static void afterClass() {\n",
      "        CompareTool.cleanup(destinationFolder);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcode01Test() throws IOException, PdfException, InterruptedException {\n",
      "        String filename = \"barcodePostnet.pdf\";\n",
      "        PdfWriter writer = CompareTool.createTestPdfWriter(destinationFolder + filename);\n",
      "        PdfDocument document = new PdfDocument(writer);\n",
      "\n",
      "        PdfPage page = document.addNewPage();\n",
      "        PdfCanvas canvas = new PdfCanvas(page);\n",
      "\n",
      "        BarcodePostnet codePlanet = new BarcodePostnet(document);\n",
      "        codePlanet.setCode(\"01234567890\");\n",
      "        codePlanet.setCodeType(BarcodePostnet.TYPE_PLANET);\n",
      "        codePlanet.placeBarcode(canvas, null, null);\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder, \"diff_\"));\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "method_lines_dic": {
      "BarcodePostnet::::getBarsPostnet(java.lang.String)": [
        81,
        96
      ],
      "BarcodePostnet::::getBarcodeSize()": [
        98,
        102
      ],
      "BarcodePostnet::::fitWidth(float)": [
        104,
        110
      ],
      "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)": [
        133,
        182
      ]
    },
    "test_method_lines_dic": {
      "BarcodePostnetTest::::beforeClass()": [
        48,
        51
      ],
      "BarcodePostnetTest::::afterClass()": [
        53,
        56
      ],
      "BarcodePostnetTest::::barcode01Test()": [
        58,
        74
      ]
    },
    "reverse_method_lines_dic": {
      "81": "BarcodePostnet::::getBarsPostnet(java.lang.String)",
      "82": "BarcodePostnet::::getBarsPostnet(java.lang.String)",
      "83": "BarcodePostnet::::getBarsPostnet(java.lang.String)",
      "84": "BarcodePostnet::::getBarsPostnet(java.lang.String)",
      "85": "BarcodePostnet::::getBarsPostnet(java.lang.String)",
      "86": "BarcodePostnet::::getBarsPostnet(java.lang.String)",
      "87": "BarcodePostnet::::getBarsPostnet(java.lang.String)",
      "88": "BarcodePostnet::::getBarsPostnet(java.lang.String)",
      "89": "BarcodePostnet::::getBarsPostnet(java.lang.String)",
      "90": "BarcodePostnet::::getBarsPostnet(java.lang.String)",
      "91": "BarcodePostnet::::getBarsPostnet(java.lang.String)",
      "92": "BarcodePostnet::::getBarsPostnet(java.lang.String)",
      "93": "BarcodePostnet::::getBarsPostnet(java.lang.String)",
      "94": "BarcodePostnet::::getBarsPostnet(java.lang.String)",
      "95": "BarcodePostnet::::getBarsPostnet(java.lang.String)",
      "96": "BarcodePostnet::::getBarsPostnet(java.lang.String)",
      "98": "BarcodePostnet::::getBarcodeSize()",
      "99": "BarcodePostnet::::getBarcodeSize()",
      "100": "BarcodePostnet::::getBarcodeSize()",
      "101": "BarcodePostnet::::getBarcodeSize()",
      "102": "BarcodePostnet::::getBarcodeSize()",
      "104": "BarcodePostnet::::fitWidth(float)",
      "105": "BarcodePostnet::::fitWidth(float)",
      "106": "BarcodePostnet::::fitWidth(float)",
      "107": "BarcodePostnet::::fitWidth(float)",
      "108": "BarcodePostnet::::fitWidth(float)",
      "109": "BarcodePostnet::::fitWidth(float)",
      "110": "BarcodePostnet::::fitWidth(float)",
      "133": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "134": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "135": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "136": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "137": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "138": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "139": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "140": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "141": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "142": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "143": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "144": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "145": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "146": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "147": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "148": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "149": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "150": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "151": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "152": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "153": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "154": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "155": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "156": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "157": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "158": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "159": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "160": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "161": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "162": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "163": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "164": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "165": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "166": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "167": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "168": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "169": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "170": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "171": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "172": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "173": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "174": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "175": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "176": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "177": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "178": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "179": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "180": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "181": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)",
      "182": "BarcodePostnet::::createAwtImage(java.awt.Color,java.awt.Color)"
    },
    "test_reverse_method_lines_dic": {
      "48": "BarcodePostnetTest::::beforeClass()",
      "49": "BarcodePostnetTest::::beforeClass()",
      "50": "BarcodePostnetTest::::beforeClass()",
      "51": "BarcodePostnetTest::::beforeClass()",
      "53": "BarcodePostnetTest::::afterClass()",
      "54": "BarcodePostnetTest::::afterClass()",
      "55": "BarcodePostnetTest::::afterClass()",
      "56": "BarcodePostnetTest::::afterClass()",
      "58": "BarcodePostnetTest::::barcode01Test()",
      "59": "BarcodePostnetTest::::barcode01Test()",
      "60": "BarcodePostnetTest::::barcode01Test()",
      "61": "BarcodePostnetTest::::barcode01Test()",
      "62": "BarcodePostnetTest::::barcode01Test()",
      "63": "BarcodePostnetTest::::barcode01Test()",
      "64": "BarcodePostnetTest::::barcode01Test()",
      "65": "BarcodePostnetTest::::barcode01Test()",
      "66": "BarcodePostnetTest::::barcode01Test()",
      "67": "BarcodePostnetTest::::barcode01Test()",
      "68": "BarcodePostnetTest::::barcode01Test()",
      "69": "BarcodePostnetTest::::barcode01Test()",
      "70": "BarcodePostnetTest::::barcode01Test()",
      "71": "BarcodePostnetTest::::barcode01Test()",
      "72": "BarcodePostnetTest::::barcode01Test()",
      "73": "BarcodePostnetTest::::barcode01Test()",
      "74": "BarcodePostnetTest::::barcode01Test()"
    },
    "tests": [
      {
        "test_lines": [
          58,
          74
        ],
        "covered_lines": [
          38,
          39,
          44,
          64,
          66,
          68,
          70,
          72,
          74,
          75,
          82,
          83,
          84,
          85,
          87,
          88,
          89,
          90,
          91,
          92,
          93,
          95,
          100,
          101,
          114,
          116,
          117,
          118,
          119,
          120,
          121,
          123,
          124,
          125,
          126,
          128,
          129
        ],
        "label": "<<NO FOCAL METHOD>>"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/barcodes/src/main/java/com/itextpdf/barcodes/BarcodeInter25.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.barcodes;\n",
      "\n",
      "import com.itextpdf.barcodes.exceptions.BarcodesExceptionMessageConstant;\n",
      "import com.itextpdf.kernel.exceptions.PdfException;\n",
      "import com.itextpdf.kernel.font.PdfFont;\n",
      "import com.itextpdf.kernel.geom.Rectangle;\n",
      "import com.itextpdf.kernel.pdf.canvas.PdfCanvas;\n",
      "import com.itextpdf.kernel.colors.Color;\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "\n",
      "\n",
      "/**\n",
      " * Implements the code interleaved 2 of 5. The text can include\n",
      " * non numeric characters that are printed but do not generate bars.\n",
      " * The default parameters are:\n",
      " * <pre>\n",
      " * x = 0.8f;\n",
      " * n = 2;\n",
      " * font = new PdfType1Font(document, new TYPE_1_FONT(StandardFonts.HELVETICA, PdfEncodings.WINANSI));\n",
      " * size = 8;\n",
      " * baseline = size;\n",
      " * barHeight = size * 3;\n",
      " * textAlignment = ALIGN_CENTER;\n",
      " * generateChecksum = false;\n",
      " * checksumText = false;\n",
      " * </pre>\n",
      " */\n",
      "public class BarcodeInter25 extends Barcode1D {\n",
      "\n",
      "\n",
      "    /**\n",
      "     * The bars to generate the code.\n",
      "     */\n",
      "    private static final byte[][] BARS =\n",
      "            {\n",
      "                    {0, 0, 1, 1, 0},\n",
      "                    {1, 0, 0, 0, 1},\n",
      "                    {0, 1, 0, 0, 1},\n",
      "                    {1, 1, 0, 0, 0},\n",
      "                    {0, 0, 1, 0, 1},\n",
      "                    {1, 0, 1, 0, 0},\n",
      "                    {0, 1, 1, 0, 0},\n",
      "                    {0, 0, 0, 1, 1},\n",
      "                    {1, 0, 0, 1, 0},\n",
      "                    {0, 1, 0, 1, 0}\n",
      "            };\n",
      "\n",
      "    /**\n",
      "     * Creates new BarcodeInter25.\n",
      "     * To generate the font the {@link PdfDocument#getDefaultFont()} will be implicitly called.\n",
      "     * If you want to use this barcode in PDF/A documents, please consider using {@link #BarcodeInter25(PdfDocument, PdfFont)}.\n",
      "     *\n",
      "     * @param document The document to which the barcode will be added\n",
      "     */\n",
      "    public BarcodeInter25(PdfDocument document) {\n",
      "        this(document, document.getDefaultFont());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates new BarcodeInter25\n",
      "     *\n",
      "     * @param document The document to which the barcode will be added\n",
      "     * @param font The font to use\n",
      "     */\n",
      "    public BarcodeInter25(PdfDocument document, PdfFont font) {\n",
      "        super(document);\n",
      "        this.x = 0.8f;\n",
      "        this.n = 2;\n",
      "        this.font = font;\n",
      "        this.size = 8;\n",
      "        this.baseline = size;\n",
      "        this.barHeight = size * 3;\n",
      "        this.textAlignment = ALIGN_CENTER;\n",
      "        this.generateChecksum = false;\n",
      "        this.checksumText = false;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Deletes all the non numeric characters from <CODE>text</CODE>.\n",
      "     *\n",
      "     * @param text the text\n",
      "     * @return a <CODE>String</CODE> with only numeric characters\n",
      "     */\n",
      "    public static String keepNumbers(String text) {\n",
      "        StringBuilder sb = new StringBuilder();\n",
      "        for (int k = 0; k < text.length(); ++k) {\n",
      "            char c = text.charAt(k);\n",
      "            if (c >= '0' && c <= '9') {\n",
      "                sb.append(c);\n",
      "            }\n",
      "        }\n",
      "        return sb.toString();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Calculates the checksum.\n",
      "     *\n",
      "     * @param text the numeric text\n",
      "     * @return the checksum\n",
      "     */\n",
      "    public static char getChecksum(String text) {\n",
      "        int mul = 3;\n",
      "        int total = 0;\n",
      "        for (int k = text.length() - 1; k >= 0; --k) {\n",
      "            int n = text.charAt(k) - '0';\n",
      "            total += mul * n;\n",
      "            mul ^= 2;\n",
      "        }\n",
      "        return (char) (((10 - (total % 10)) % 10) + '0');\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates the bars for the barcode.\n",
      "     *\n",
      "     * @param text the text. It can contain non numeric characters\n",
      "     * @return the barcode\n",
      "     */\n",
      "    public static byte[] getBarsInter25(String text) {\n",
      "        text = keepNumbers(text);\n",
      "        if ((text.length() & 1) != 0) {\n",
      "            throw new PdfException(BarcodesExceptionMessageConstant.TEXT_MUST_BE_EVEN);\n",
      "        }\n",
      "        byte[] bars = new byte[text.length() * 5 + 7];\n",
      "        int pb = 0;\n",
      "        bars[pb++] = 0;\n",
      "        bars[pb++] = 0;\n",
      "        bars[pb++] = 0;\n",
      "        bars[pb++] = 0;\n",
      "        int len = text.length() / 2;\n",
      "        for (int k = 0; k < len; ++k) {\n",
      "            int c1 = text.charAt(k * 2) - '0';\n",
      "            int c2 = text.charAt(k * 2 + 1) - '0';\n",
      "            byte[] b1 = BARS[c1];\n",
      "            byte[] b2 = BARS[c2];\n",
      "            for (int j = 0; j < 5; ++j) {\n",
      "                bars[pb++] = b1[j];\n",
      "                bars[pb++] = b2[j];\n",
      "            }\n",
      "        }\n",
      "        bars[pb++] = 1;\n",
      "        bars[pb++] = 0;\n",
      "        bars[pb++] = 0;\n",
      "        return bars;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets the maximum area that the barcode and the text, if\n",
      "     * any, will occupy. The lower left corner is always (0, 0).\n",
      "     *\n",
      "     * @return the size the barcode occupies.\n",
      "     */\n",
      "    @Override\n",
      "    public Rectangle getBarcodeSize() {\n",
      "        float fontX = 0;\n",
      "        float fontY = 0;\n",
      "        if (font != null) {\n",
      "            if (baseline > 0) {\n",
      "                fontY = baseline - getDescender();\n",
      "            } else {\n",
      "                fontY = -baseline + size;\n",
      "            }\n",
      "            String fullCode = code;\n",
      "            if (generateChecksum && checksumText) {\n",
      "                fullCode += getChecksum(fullCode);\n",
      "            }\n",
      "            fontX = font.getWidth(altText != null ? altText : fullCode, size);\n",
      "        }\n",
      "        String fullCode = keepNumbers(code);\n",
      "        int len = fullCode.length();\n",
      "        if (generateChecksum) {\n",
      "            ++len;\n",
      "        }\n",
      "        float fullWidth = len * (3 * x + 2 * x * n) + (6 + n) * x;\n",
      "        fullWidth = Math.max(fullWidth, fontX);\n",
      "        float fullHeight = barHeight + fontY;\n",
      "        return new Rectangle(fullWidth, fullHeight);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Places the barcode in a <CODE>PdfCanvas</CODE>. The\n",
      "     * barcode is always placed at coordinates (0, 0). Use the\n",
      "     * translation matrix to move it elsewhere.<p>\n",
      "     * The bars and text are written in the following colors:\n",
      "     * <br>\n",
      "     * <TABLE BORDER=\"1\" SUMMARY=\"barcode properties\">\n",
      "     * <TR>\n",
      "     * <TH><CODE>barColor</CODE></TH>\n",
      "     * <TH><CODE>textColor</CODE></TH>\n",
      "     * <TH>Result</TH>\n",
      "     * </TR>\n",
      "     * <TR>\n",
      "     * <TD><CODE>null</CODE></TD>\n",
      "     * <TD><CODE>null</CODE></TD>\n",
      "     * <TD>bars and text painted with current fill color</TD>\n",
      "     * </TR>\n",
      "     * <TR>\n",
      "     * <TD><CODE>barColor</CODE></TD>\n",
      "     * <TD><CODE>null</CODE></TD>\n",
      "     * <TD>bars and text painted with <CODE>barColor</CODE></TD>\n",
      "     * </TR>\n",
      "     * <TR>\n",
      "     * <TD><CODE>null</CODE></TD>\n",
      "     * <TD><CODE>textColor</CODE></TD>\n",
      "     * <TD>bars painted with current color<br>text painted with <CODE>textColor</CODE></TD>\n",
      "     * </TR>\n",
      "     * <TR>\n",
      "     * <TD><CODE>barColor</CODE></TD>\n",
      "     * <TD><CODE>textColor</CODE></TD>\n",
      "     * <TD>bars painted with <CODE>barColor</CODE><br>text painted with <CODE>textColor</CODE></TD>\n",
      "     * </TR>\n",
      "     * </TABLE>\n",
      "     *\n",
      "     * @param canvas    the <CODE>PdfCanvas</CODE> where the barcode will be placed\n",
      "     * @param barColor  the color of the bars. It can be <CODE>null</CODE>\n",
      "     * @param textColor the color of the text. It can be <CODE>null</CODE>\n",
      "     * @return the dimensions the barcode occupies\n",
      "     */\n",
      "    @Override\n",
      "    public Rectangle placeBarcode(PdfCanvas canvas, Color barColor, Color textColor) {\n",
      "        String fullCode = code;\n",
      "        float fontX = 0;\n",
      "        if (font != null) {\n",
      "            if (generateChecksum && checksumText)\n",
      "                fullCode += getChecksum(fullCode);\n",
      "            fontX = font.getWidth(fullCode = altText != null ? altText : fullCode, size);\n",
      "        }\n",
      "        String bCode = keepNumbers(code);\n",
      "        if (generateChecksum)\n",
      "            bCode += getChecksum(bCode);\n",
      "        int len = bCode.length();\n",
      "        float fullWidth = len * (3 * x + 2 * x * n) + (6 + n) * x;\n",
      "        float barStartX = 0;\n",
      "        float textStartX = 0;\n",
      "        switch (textAlignment) {\n",
      "            case ALIGN_LEFT:\n",
      "                break;\n",
      "            case ALIGN_RIGHT:\n",
      "                if (fontX > fullWidth) {\n",
      "                    barStartX = fontX - fullWidth;\n",
      "                } else {\n",
      "                    textStartX = fullWidth - fontX;\n",
      "                }\n",
      "                break;\n",
      "            default:\n",
      "                if (fontX > fullWidth) {\n",
      "                    barStartX = (fontX - fullWidth) / 2;\n",
      "                } else {\n",
      "                    textStartX = (fullWidth - fontX) / 2;\n",
      "                }\n",
      "                break;\n",
      "        }\n",
      "        float barStartY = 0;\n",
      "        float textStartY = 0;\n",
      "        if (font != null) {\n",
      "            if (baseline <= 0) {\n",
      "                textStartY = barHeight - baseline;\n",
      "            } else {\n",
      "                textStartY = -getDescender();\n",
      "                barStartY = textStartY + baseline;\n",
      "            }\n",
      "        }\n",
      "        byte[] bars = getBarsInter25(bCode);\n",
      "        boolean print = true;\n",
      "        if (barColor != null)\n",
      "            canvas.setFillColor(barColor);\n",
      "        for (int k = 0; k < bars.length; ++k) {\n",
      "            float w = (bars[k] == 0 ? x : x * n);\n",
      "            if (print) {\n",
      "                canvas.rectangle(barStartX, barStartY, w - inkSpreading, barHeight);\n",
      "            }\n",
      "            print = !print;\n",
      "            barStartX += w;\n",
      "        }\n",
      "        canvas.fill();\n",
      "        if (font != null) {\n",
      "            if (textColor != null) {\n",
      "                canvas.setFillColor(textColor);\n",
      "            }\n",
      "            canvas.beginText();\n",
      "            canvas.setFontAndSize(font, size);\n",
      "            canvas.setTextMatrix(textStartX, textStartY);\n",
      "            canvas.showText(fullCode);\n",
      "            canvas.endText();\n",
      "        }\n",
      "        return getBarcodeSize();\n",
      "    }\n",
      "\n",
      "    // Android-Conversion-Skip-Block-Start (java.awt library isn't available on Android)\n",
      "    /**\n",
      "     * Creates a <CODE>java.awt.Image</CODE>. This image only\n",
      "     * contains the bars without any text.\n",
      "     *\n",
      "     * @param foreground the color of the bars\n",
      "     * @param background the color of the background\n",
      "     * @return the image\n",
      "     */\n",
      "    @Override\n",
      "    public java.awt.Image createAwtImage(java.awt.Color foreground, java.awt.Color background) {\n",
      "        int f = (foreground == null) ? DEFAULT_BAR_FOREGROUND_COLOR.getRGB() : foreground.getRGB();\n",
      "        int g = (background == null) ? DEFAULT_BAR_BACKGROUND_COLOR.getRGB() : background.getRGB();\n",
      "        java.awt.Canvas canvas = new java.awt.Canvas();\n",
      "        String bCode = keepNumbers(code);\n",
      "        if (generateChecksum) {\n",
      "            bCode += getChecksum(bCode);\n",
      "        }\n",
      "        int len = bCode.length();\n",
      "        int nn = (int) n;\n",
      "        int fullWidth = len * (3 + 2 * nn) + (6 + nn);\n",
      "        byte[] bars = getBarsInter25(bCode);\n",
      "        boolean print = true;\n",
      "        int ptr = 0;\n",
      "        int height = (int) barHeight;\n",
      "        int[] pix = new int[fullWidth * height];\n",
      "        for (int k = 0; k < bars.length; ++k) {\n",
      "            int w = (bars[k] == 0 ? 1 : nn);\n",
      "            int c = g;\n",
      "            if (print) {\n",
      "                c = f;\n",
      "            }\n",
      "            print = !print;\n",
      "            for (int j = 0; j < w; ++j) {\n",
      "                pix[ptr++] = c;\n",
      "            }\n",
      "        }\n",
      "        for (int k = fullWidth; k < pix.length; k += fullWidth) {\n",
      "            System.arraycopy(pix, 0, pix, k, fullWidth);\n",
      "        }\n",
      "        return canvas.createImage(new java.awt.image.MemoryImageSource(fullWidth, height, pix, 0, fullWidth));\n",
      "    }\n",
      "    // Android-Conversion-Skip-Block-End\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.barcodes;\n",
      "\n",
      "\n",
      "import com.itextpdf.kernel.exceptions.PdfException;\n",
      "import com.itextpdf.kernel.colors.ColorConstants;\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "import com.itextpdf.kernel.pdf.PdfPage;\n",
      "import com.itextpdf.kernel.pdf.PdfWriter;\n",
      "import com.itextpdf.kernel.pdf.canvas.PdfCanvas;\n",
      "import com.itextpdf.kernel.utils.CompareTool;\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.type.IntegrationTest;\n",
      "\n",
      "import java.io.IOException;\n",
      "\n",
      "import org.junit.AfterClass;\n",
      "import org.junit.Assert;\n",
      "import org.junit.BeforeClass;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(IntegrationTest.class)\n",
      "public class BarcodeInter25Test extends ExtendedITextTest {\n",
      "\n",
      "    public static final String sourceFolder = \"./src/test/resources/com/itextpdf/barcodes/\";\n",
      "    public static final String destinationFolder = \"./target/test/com/itextpdf/barcodes/BarcodeInter25/\";\n",
      "\n",
      "    @BeforeClass\n",
      "    public static void beforeClass() {\n",
      "        createDestinationFolder(destinationFolder);\n",
      "    }\n",
      "\n",
      "    @AfterClass\n",
      "    public static void afterClass() {\n",
      "        CompareTool.cleanup(destinationFolder);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcode01Test() throws IOException, PdfException, InterruptedException {\n",
      "        String filename = \"barcodeInter25.pdf\";\n",
      "        PdfWriter writer = CompareTool.createTestPdfWriter(destinationFolder + filename);\n",
      "        PdfDocument document = new PdfDocument(writer);\n",
      "\n",
      "        PdfPage page = document.addNewPage();\n",
      "        PdfCanvas canvas = new PdfCanvas(page);\n",
      "\n",
      "        Barcode1D barcode = new BarcodeInter25(document);\n",
      "        barcode.setGenerateChecksum(true);\n",
      "        barcode.setCode(\"41-1200076041-001\");\n",
      "        barcode.setTextAlignment(Barcode1D.ALIGN_CENTER);\n",
      "        barcode.placeBarcode(canvas, ColorConstants.BLUE, ColorConstants.GREEN);\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder, \"diff_\"));\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "method_lines_dic": {
      "BarcodeInter25::::keepNumbers(java.lang.String)": [
        106,
        115
      ],
      "BarcodeInter25::::getChecksum(java.lang.String)": [
        123,
        132
      ],
      "BarcodeInter25::::getBarsInter25(java.lang.String)": [
        140,
        166
      ],
      "BarcodeInter25::::getBarcodeSize()": [
        174,
        199
      ],
      "BarcodeInter25::::createAwtImage(java.awt.Color,java.awt.Color)": [
        319,
        351
      ]
    },
    "test_method_lines_dic": {
      "BarcodeInter25Test::::beforeClass()": [
        50,
        53
      ],
      "BarcodeInter25Test::::afterClass()": [
        55,
        58
      ],
      "BarcodeInter25Test::::barcode01Test()": [
        60,
        77
      ]
    },
    "reverse_method_lines_dic": {
      "106": "BarcodeInter25::::keepNumbers(java.lang.String)",
      "107": "BarcodeInter25::::keepNumbers(java.lang.String)",
      "108": "BarcodeInter25::::keepNumbers(java.lang.String)",
      "109": "BarcodeInter25::::keepNumbers(java.lang.String)",
      "110": "BarcodeInter25::::keepNumbers(java.lang.String)",
      "111": "BarcodeInter25::::keepNumbers(java.lang.String)",
      "112": "BarcodeInter25::::keepNumbers(java.lang.String)",
      "113": "BarcodeInter25::::keepNumbers(java.lang.String)",
      "114": "BarcodeInter25::::keepNumbers(java.lang.String)",
      "115": "BarcodeInter25::::keepNumbers(java.lang.String)",
      "123": "BarcodeInter25::::getChecksum(java.lang.String)",
      "124": "BarcodeInter25::::getChecksum(java.lang.String)",
      "125": "BarcodeInter25::::getChecksum(java.lang.String)",
      "126": "BarcodeInter25::::getChecksum(java.lang.String)",
      "127": "BarcodeInter25::::getChecksum(java.lang.String)",
      "128": "BarcodeInter25::::getChecksum(java.lang.String)",
      "129": "BarcodeInter25::::getChecksum(java.lang.String)",
      "130": "BarcodeInter25::::getChecksum(java.lang.String)",
      "131": "BarcodeInter25::::getChecksum(java.lang.String)",
      "132": "BarcodeInter25::::getChecksum(java.lang.String)",
      "140": "BarcodeInter25::::getBarsInter25(java.lang.String)",
      "141": "BarcodeInter25::::getBarsInter25(java.lang.String)",
      "142": "BarcodeInter25::::getBarsInter25(java.lang.String)",
      "143": "BarcodeInter25::::getBarsInter25(java.lang.String)",
      "144": "BarcodeInter25::::getBarsInter25(java.lang.String)",
      "145": "BarcodeInter25::::getBarsInter25(java.lang.String)",
      "146": "BarcodeInter25::::getBarsInter25(java.lang.String)",
      "147": "BarcodeInter25::::getBarsInter25(java.lang.String)",
      "148": "BarcodeInter25::::getBarsInter25(java.lang.String)",
      "149": "BarcodeInter25::::getBarsInter25(java.lang.String)",
      "150": "BarcodeInter25::::getBarsInter25(java.lang.String)",
      "151": "BarcodeInter25::::getBarsInter25(java.lang.String)",
      "152": "BarcodeInter25::::getBarsInter25(java.lang.String)",
      "153": "BarcodeInter25::::getBarsInter25(java.lang.String)",
      "154": "BarcodeInter25::::getBarsInter25(java.lang.String)",
      "155": "BarcodeInter25::::getBarsInter25(java.lang.String)",
      "156": "BarcodeInter25::::getBarsInter25(java.lang.String)",
      "157": "BarcodeInter25::::getBarsInter25(java.lang.String)",
      "158": "BarcodeInter25::::getBarsInter25(java.lang.String)",
      "159": "BarcodeInter25::::getBarsInter25(java.lang.String)",
      "160": "BarcodeInter25::::getBarsInter25(java.lang.String)",
      "161": "BarcodeInter25::::getBarsInter25(java.lang.String)",
      "162": "BarcodeInter25::::getBarsInter25(java.lang.String)",
      "163": "BarcodeInter25::::getBarsInter25(java.lang.String)",
      "164": "BarcodeInter25::::getBarsInter25(java.lang.String)",
      "165": "BarcodeInter25::::getBarsInter25(java.lang.String)",
      "166": "BarcodeInter25::::getBarsInter25(java.lang.String)",
      "174": "BarcodeInter25::::getBarcodeSize()",
      "175": "BarcodeInter25::::getBarcodeSize()",
      "176": "BarcodeInter25::::getBarcodeSize()",
      "177": "BarcodeInter25::::getBarcodeSize()",
      "178": "BarcodeInter25::::getBarcodeSize()",
      "179": "BarcodeInter25::::getBarcodeSize()",
      "180": "BarcodeInter25::::getBarcodeSize()",
      "181": "BarcodeInter25::::getBarcodeSize()",
      "182": "BarcodeInter25::::getBarcodeSize()",
      "183": "BarcodeInter25::::getBarcodeSize()",
      "184": "BarcodeInter25::::getBarcodeSize()",
      "185": "BarcodeInter25::::getBarcodeSize()",
      "186": "BarcodeInter25::::getBarcodeSize()",
      "187": "BarcodeInter25::::getBarcodeSize()",
      "188": "BarcodeInter25::::getBarcodeSize()",
      "189": "BarcodeInter25::::getBarcodeSize()",
      "190": "BarcodeInter25::::getBarcodeSize()",
      "191": "BarcodeInter25::::getBarcodeSize()",
      "192": "BarcodeInter25::::getBarcodeSize()",
      "193": "BarcodeInter25::::getBarcodeSize()",
      "194": "BarcodeInter25::::getBarcodeSize()",
      "195": "BarcodeInter25::::getBarcodeSize()",
      "196": "BarcodeInter25::::getBarcodeSize()",
      "197": "BarcodeInter25::::getBarcodeSize()",
      "198": "BarcodeInter25::::getBarcodeSize()",
      "199": "BarcodeInter25::::getBarcodeSize()",
      "319": "BarcodeInter25::::createAwtImage(java.awt.Color,java.awt.Color)",
      "320": "BarcodeInter25::::createAwtImage(java.awt.Color,java.awt.Color)",
      "321": "BarcodeInter25::::createAwtImage(java.awt.Color,java.awt.Color)",
      "322": "BarcodeInter25::::createAwtImage(java.awt.Color,java.awt.Color)",
      "323": "BarcodeInter25::::createAwtImage(java.awt.Color,java.awt.Color)",
      "324": "BarcodeInter25::::createAwtImage(java.awt.Color,java.awt.Color)",
      "325": "BarcodeInter25::::createAwtImage(java.awt.Color,java.awt.Color)",
      "326": "BarcodeInter25::::createAwtImage(java.awt.Color,java.awt.Color)",
      "327": "BarcodeInter25::::createAwtImage(java.awt.Color,java.awt.Color)",
      "328": "BarcodeInter25::::createAwtImage(java.awt.Color,java.awt.Color)",
      "329": "BarcodeInter25::::createAwtImage(java.awt.Color,java.awt.Color)",
      "330": "BarcodeInter25::::createAwtImage(java.awt.Color,java.awt.Color)",
      "331": "BarcodeInter25::::createAwtImage(java.awt.Color,java.awt.Color)",
      "332": "BarcodeInter25::::createAwtImage(java.awt.Color,java.awt.Color)",
      "333": "BarcodeInter25::::createAwtImage(java.awt.Color,java.awt.Color)",
      "334": "BarcodeInter25::::createAwtImage(java.awt.Color,java.awt.Color)",
      "335": "BarcodeInter25::::createAwtImage(java.awt.Color,java.awt.Color)",
      "336": "BarcodeInter25::::createAwtImage(java.awt.Color,java.awt.Color)",
      "337": "BarcodeInter25::::createAwtImage(java.awt.Color,java.awt.Color)",
      "338": "BarcodeInter25::::createAwtImage(java.awt.Color,java.awt.Color)",
      "339": "BarcodeInter25::::createAwtImage(java.awt.Color,java.awt.Color)",
      "340": "BarcodeInter25::::createAwtImage(java.awt.Color,java.awt.Color)",
      "341": "BarcodeInter25::::createAwtImage(java.awt.Color,java.awt.Color)",
      "342": "BarcodeInter25::::createAwtImage(java.awt.Color,java.awt.Color)",
      "343": "BarcodeInter25::::createAwtImage(java.awt.Color,java.awt.Color)",
      "344": "BarcodeInter25::::createAwtImage(java.awt.Color,java.awt.Color)",
      "345": "BarcodeInter25::::createAwtImage(java.awt.Color,java.awt.Color)",
      "346": "BarcodeInter25::::createAwtImage(java.awt.Color,java.awt.Color)",
      "347": "BarcodeInter25::::createAwtImage(java.awt.Color,java.awt.Color)",
      "348": "BarcodeInter25::::createAwtImage(java.awt.Color,java.awt.Color)",
      "349": "BarcodeInter25::::createAwtImage(java.awt.Color,java.awt.Color)",
      "350": "BarcodeInter25::::createAwtImage(java.awt.Color,java.awt.Color)",
      "351": "BarcodeInter25::::createAwtImage(java.awt.Color,java.awt.Color)"
    },
    "test_reverse_method_lines_dic": {
      "50": "BarcodeInter25Test::::beforeClass()",
      "51": "BarcodeInter25Test::::beforeClass()",
      "52": "BarcodeInter25Test::::beforeClass()",
      "53": "BarcodeInter25Test::::beforeClass()",
      "55": "BarcodeInter25Test::::afterClass()",
      "56": "BarcodeInter25Test::::afterClass()",
      "57": "BarcodeInter25Test::::afterClass()",
      "58": "BarcodeInter25Test::::afterClass()",
      "60": "BarcodeInter25Test::::barcode01Test()",
      "61": "BarcodeInter25Test::::barcode01Test()",
      "62": "BarcodeInter25Test::::barcode01Test()",
      "63": "BarcodeInter25Test::::barcode01Test()",
      "64": "BarcodeInter25Test::::barcode01Test()",
      "65": "BarcodeInter25Test::::barcode01Test()",
      "66": "BarcodeInter25Test::::barcode01Test()",
      "67": "BarcodeInter25Test::::barcode01Test()",
      "68": "BarcodeInter25Test::::barcode01Test()",
      "69": "BarcodeInter25Test::::barcode01Test()",
      "70": "BarcodeInter25Test::::barcode01Test()",
      "71": "BarcodeInter25Test::::barcode01Test()",
      "72": "BarcodeInter25Test::::barcode01Test()",
      "73": "BarcodeInter25Test::::barcode01Test()",
      "74": "BarcodeInter25Test::::barcode01Test()",
      "75": "BarcodeInter25Test::::barcode01Test()",
      "76": "BarcodeInter25Test::::barcode01Test()",
      "77": "BarcodeInter25Test::::barcode01Test()"
    },
    "tests": [
      {
        "test_lines": [
          60,
          77
        ],
        "covered_lines": [
          56,
          78,
          79,
          88,
          89,
          90,
          91,
          92,
          93,
          94,
          95,
          96,
          97,
          98,
          107,
          108,
          109,
          110,
          111,
          114,
          124,
          125,
          126,
          127,
          128,
          129,
          131,
          141,
          142,
          145,
          146,
          147,
          148,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          157,
          158,
          159,
          162,
          163,
          164,
          165,
          176,
          177,
          178,
          179,
          180,
          184,
          185,
          188,
          190,
          191,
          192,
          193,
          195,
          196,
          197,
          198,
          242,
          243,
          244,
          245,
          247,
          249,
          250,
          251,
          252,
          253,
          254,
          255,
          256,
          267,
          270,
          274,
          275,
          276,
          277,
          280,
          281,
          284,
          285,
          286,
          287,
          288,
          289,
          290,
          291,
          293,
          294,
          296,
          297,
          298,
          299,
          301,
          302,
          303,
          304,
          305,
          307
        ],
        "label": "<<NO FOCAL METHOD>>"
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/barcodes/src/main/java/com/itextpdf/barcodes/BarcodeEAN.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.barcodes;\n",
      "\n",
      "import com.itextpdf.kernel.colors.Color;\n",
      "import com.itextpdf.kernel.exceptions.PdfException;\n",
      "import com.itextpdf.kernel.font.PdfFont;\n",
      "import com.itextpdf.kernel.geom.Rectangle;\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "import com.itextpdf.kernel.pdf.canvas.PdfCanvas;\n",
      "\n",
      "import java.util.Arrays;\n",
      "\n",
      "/**\n",
      " * The implementation of the barcode EAN.\n",
      " * <p>\n",
      " * The International Article Number (also known as European Article Number or EAN) is a standard describing a barcode\n",
      " * symbology and numbering system used in global trade to identify a specific retail product type, in a specific\n",
      " * packaging configuration, from a specific manufacturer\n",
      " */\n",
      "public class BarcodeEAN extends Barcode1D {\n",
      "\n",
      "    /** A type of barcode */\n",
      "    public static final int EAN13 = 1;\n",
      "    /** A type of barcode */\n",
      "    public static final int EAN8 = 2;\n",
      "    /** A type of barcode */\n",
      "    public static final int UPCA = 3;\n",
      "    /** A type of barcode */\n",
      "    public static final int UPCE = 4;\n",
      "    /** A type of barcode */\n",
      "    public static final int SUPP2 = 5;\n",
      "    /** A type of barcode */\n",
      "    public static final int SUPP5 = 6;\n",
      "    /**\n",
      "     * The bar positions that are guard bars.\n",
      "     */\n",
      "    private static final int[] GUARD_EMPTY = {};\n",
      "    /**\n",
      "     * The bar positions that are guard bars.\n",
      "     */\n",
      "    private static final int[] GUARD_UPCA = {0, 2, 4, 6, 28, 30, 52, 54, 56, 58};\n",
      "    /**\n",
      "     * The bar positions that are guard bars.\n",
      "     */\n",
      "    private static final int[] GUARD_EAN13 = {0, 2, 28, 30, 56, 58};\n",
      "    /**\n",
      "     * The bar positions that are guard bars.\n",
      "     */\n",
      "    private static final int[] GUARD_EAN8 = {0, 2, 20, 22, 40, 42};\n",
      "    /**\n",
      "     * The bar positions that are guard bars.\n",
      "     */\n",
      "    private static final int[] GUARD_UPCE = {0, 2, 28, 30, 32};\n",
      "    /**\n",
      "     * The x coordinates to place the text.\n",
      "     */\n",
      "    private static final float[] TEXTPOS_EAN13 = {6.5f, 13.5f, 20.5f, 27.5f, 34.5f, 41.5f, 53.5f, 60.5f, 67.5f, 74.5f, 81.5f, 88.5f};\n",
      "    /**\n",
      "     * The x coordinates to place the text.\n",
      "     */\n",
      "    private static final float[] TEXTPOS_EAN8 = {6.5f, 13.5f, 20.5f, 27.5f, 39.5f, 46.5f, 53.5f, 60.5f};\n",
      "    /**\n",
      "     * The basic bar widths.\n",
      "     */\n",
      "    private static final byte[][] BARS =\n",
      "            {\n",
      "                    // 0\n",
      "                    {3, 2, 1, 1},\n",
      "\n",
      "                    // 1\n",
      "                    {2, 2, 2, 1},\n",
      "\n",
      "                    // 2\n",
      "                    {2, 1, 2, 2},\n",
      "\n",
      "                    // 3\n",
      "                    {1, 4, 1, 1},\n",
      "\n",
      "                    // 4\n",
      "                    {1, 1, 3, 2},\n",
      "\n",
      "                    // 5\n",
      "                    {1, 2, 3, 1},\n",
      "\n",
      "                    // 6\n",
      "                    {1, 1, 1, 4},\n",
      "\n",
      "                    // 7\n",
      "                    {1, 3, 1, 2},\n",
      "\n",
      "                    // 8\n",
      "                    {1, 2, 1, 3},\n",
      "\n",
      "                    // 9\n",
      "                    {3, 1, 1, 2}\n",
      "            };\n",
      "\n",
      "    /**\n",
      "     * The total number of bars for EAN13.\n",
      "     */\n",
      "    private static final int TOTALBARS_EAN13 = 11 + 12 * 4;\n",
      "    /**\n",
      "     * The total number of bars for EAN8.\n",
      "     */\n",
      "    private static final int TOTALBARS_EAN8 = 11 + 8 * 4;\n",
      "    /**\n",
      "     * The total number of bars for UPCE.\n",
      "     */\n",
      "    private static final int TOTALBARS_UPCE = 9 + 6 * 4;\n",
      "    /**\n",
      "     * The total number of bars for supplemental 2.\n",
      "     */\n",
      "    private static final int TOTALBARS_SUPP2 = 13;\n",
      "    /**\n",
      "     * The total number of bars for supplemental 5.\n",
      "     */\n",
      "    private static final int TOTALBARS_SUPP5 = 31;\n",
      "    /**\n",
      "     * Marker for odd parity.\n",
      "     */\n",
      "    private static final int ODD = 0;\n",
      "    /**\n",
      "     * Marker for even parity.\n",
      "     */\n",
      "    private static final int EVEN = 1;\n",
      "\n",
      "    /**\n",
      "     * Sequence of parities to be used with EAN13.\n",
      "     */\n",
      "    private static final byte[][] PARITY13 =\n",
      "            {\n",
      "\n",
      "                    // 0\n",
      "                    {ODD, ODD, ODD, ODD, ODD, ODD},\n",
      "\n",
      "                    // 1\n",
      "                    {ODD, ODD, EVEN, ODD, EVEN, EVEN},\n",
      "\n",
      "                    // 2\n",
      "                    {ODD, ODD, EVEN, EVEN, ODD, EVEN},\n",
      "\n",
      "                    // 3\n",
      "                    {ODD, ODD, EVEN, EVEN, EVEN, ODD},\n",
      "\n",
      "                    // 4\n",
      "                    {ODD, EVEN, ODD, ODD, EVEN, EVEN},\n",
      "\n",
      "                    // 5\n",
      "                    {ODD, EVEN, EVEN, ODD, ODD, EVEN},\n",
      "\n",
      "                    // 6\n",
      "                    {ODD, EVEN, EVEN, EVEN, ODD, ODD},\n",
      "\n",
      "                    // 7\n",
      "                    {ODD, EVEN, ODD, EVEN, ODD, EVEN},\n",
      "\n",
      "                    // 8\n",
      "                    {ODD, EVEN, ODD, EVEN, EVEN, ODD},\n",
      "\n",
      "                    // 9\n",
      "                    {ODD, EVEN, EVEN, ODD, EVEN, ODD}\n",
      "            };\n",
      "\n",
      "    /**\n",
      "     * Sequence of parities to be used with supplemental 2.\n",
      "     */\n",
      "    private static final byte[][] PARITY2 =\n",
      "            {\n",
      "\n",
      "                    // 0\n",
      "                    {ODD, ODD},\n",
      "\n",
      "                    // 1\n",
      "                    {ODD, EVEN},\n",
      "\n",
      "                    // 2\n",
      "                    {EVEN, ODD},\n",
      "\n",
      "                    // 3\n",
      "                    {EVEN, EVEN}\n",
      "            };\n",
      "\n",
      "    /**\n",
      "     * Sequence of parities to be used with supplemental 2.\n",
      "     */\n",
      "    private static final byte[][] PARITY5 =\n",
      "            {\n",
      "\n",
      "                    // 0\n",
      "                    {EVEN, EVEN, ODD, ODD, ODD},\n",
      "\n",
      "                    // 1\n",
      "                    {EVEN, ODD, EVEN, ODD, ODD},\n",
      "\n",
      "                    // 2\n",
      "                    {EVEN, ODD, ODD, EVEN, ODD},\n",
      "\n",
      "                    // 3\n",
      "                    {EVEN, ODD, ODD, ODD, EVEN},\n",
      "\n",
      "                    // 4\n",
      "                    {ODD, EVEN, EVEN, ODD, ODD},\n",
      "\n",
      "                    // 5\n",
      "                    {ODD, ODD, EVEN, EVEN, ODD},\n",
      "\n",
      "                    // 6\n",
      "                    {ODD, ODD, ODD, EVEN, EVEN},\n",
      "\n",
      "                    // 7\n",
      "                    {ODD, EVEN, ODD, EVEN, ODD},\n",
      "\n",
      "                    // 8\n",
      "                    {ODD, EVEN, ODD, ODD, EVEN},\n",
      "\n",
      "                    // 9\n",
      "                    {ODD, ODD, EVEN, ODD, EVEN}\n",
      "            };\n",
      "\n",
      "    /**\n",
      "     * Sequence of parities to be used with UPCE.\n",
      "     */\n",
      "    private static final byte[][] PARITYE =\n",
      "            {\n",
      "\n",
      "                    // 0\n",
      "                    {EVEN, EVEN, EVEN, ODD, ODD, ODD},\n",
      "\n",
      "                    // 1\n",
      "                    {EVEN, EVEN, ODD, EVEN, ODD, ODD},\n",
      "\n",
      "                    // 2\n",
      "                    {EVEN, EVEN, ODD, ODD, EVEN, ODD},\n",
      "\n",
      "                    // 3\n",
      "                    {EVEN, EVEN, ODD, ODD, ODD, EVEN},\n",
      "\n",
      "                    // 4\n",
      "                    {EVEN, ODD, EVEN, EVEN, ODD, ODD},\n",
      "\n",
      "                    // 5\n",
      "                    {EVEN, ODD, ODD, EVEN, EVEN, ODD},\n",
      "\n",
      "                    // 6\n",
      "                    {EVEN, ODD, ODD, ODD, EVEN, EVEN},\n",
      "\n",
      "                    // 7\n",
      "                    {EVEN, ODD, EVEN, ODD, EVEN, ODD},\n",
      "\n",
      "                    // 8\n",
      "                    {EVEN, ODD, EVEN, ODD, ODD, EVEN},\n",
      "\n",
      "                    // 9\n",
      "                    {EVEN, ODD, ODD, EVEN, ODD, EVEN}\n",
      "            };\n",
      "\n",
      "    /**\n",
      "     * Creates new BarcodeEAN.\n",
      "     * To generate the font the {@link PdfDocument#getDefaultFont()} will be implicitly called.\n",
      "     * If you want to use this barcode in PDF/A documents, please consider using {@link #BarcodeEAN(PdfDocument, PdfFont)}.\n",
      "     *\n",
      "     * @param document The document to which the barcode will be added\n",
      "     */\n",
      "    public BarcodeEAN(PdfDocument document) {\n",
      "        this(document, document.getDefaultFont());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates new BarcodeEAN\n",
      "     *\n",
      "     * @param document The document to which the barcode will be added\n",
      "     * @param font The font to use\n",
      "     */\n",
      "    public BarcodeEAN(PdfDocument document, PdfFont font) {\n",
      "        super(document);\n",
      "        this.x = 0.8f;\n",
      "        this.font = font;\n",
      "        this.size = 8;\n",
      "        this.baseline = size;\n",
      "        this.barHeight = size * 3;\n",
      "        this.guardBars = true;\n",
      "        this.codeType = EAN13;\n",
      "        this.code = \"\";\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Calculates the EAN parity character.\n",
      "     *\n",
      "     * @param code the code\n",
      "     * @return the parity character\n",
      "     */\n",
      "    public static int calculateEANParity(String code) {\n",
      "        int mul = 3;\n",
      "        int total = 0;\n",
      "        for (int k = code.length() - 1; k >= 0; --k) {\n",
      "            int n = code.charAt(k) - '0';\n",
      "            total += mul * n;\n",
      "            mul ^= 2;\n",
      "        }\n",
      "        return (10 - (total % 10)) % 10;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Converts an UPCA code into an UPCE code. If the code can not\n",
      "     * be converted a <CODE>null</CODE> is returned.\n",
      "     *\n",
      "     * @param text the code to convert. It must have 12 numeric characters\n",
      "     * @return the 8 converted digits or <CODE>null</CODE> if the\n",
      "     * code could not be converted\n",
      "     */\n",
      "    public static String convertUPCAtoUPCE(String text) {\n",
      "        if (text.length() != 12 || !(text.startsWith(\"0\") || text.startsWith(\"1\")))\n",
      "            return null;\n",
      "        if (text.substring(3, 6).equals(\"000\") || text.substring(3, 6).equals(\"100\")\n",
      "                || text.substring(3, 6).equals(\"200\")) {\n",
      "            if (text.substring(6, 8).equals(\"00\")) {\n",
      "                return text.substring(0, 1) + text.substring(1, 3) + text.substring(8, 11) + text.substring(3, 4) + text.substring(11);\n",
      "            }\n",
      "        } else if (text.substring(4, 6).equals(\"00\")) {\n",
      "            if (text.substring(6, 9).equals(\"000\")) {\n",
      "                return text.substring(0, 1) + text.substring(1, 4) + text.substring(9, 11) + \"3\" + text.substring(11);\n",
      "            }\n",
      "        } else if (text.substring(5, 6).equals(\"0\")) {\n",
      "            if (text.substring(6, 10).equals(\"0000\")) {\n",
      "                return text.substring(0, 1) + text.substring(1, 5) + text.substring(10, 11) + \"4\" + text.substring(11);\n",
      "            }\n",
      "        } else if (text.charAt(10) >= '5') {\n",
      "            if (text.substring(6, 10).equals(\"0000\")) {\n",
      "                return text.substring(0, 1) + text.substring(1, 6) + text.substring(10, 11) + text.substring(11);\n",
      "            }\n",
      "        }\n",
      "        return null;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates the bars for the barcode EAN13 and UPCA.\n",
      "     *\n",
      "     * @param _code the text with 13 digits\n",
      "     * @return the barcode\n",
      "     */\n",
      "    public static byte[] getBarsEAN13(String _code) {\n",
      "        int[] code = new int[_code.length()];\n",
      "        for (int k = 0; k < code.length; ++k) {\n",
      "            code[k] = _code.charAt(k) - '0';\n",
      "        }\n",
      "        byte[] bars = new byte[TOTALBARS_EAN13];\n",
      "        int pb = 0;\n",
      "        bars[pb++] = 1;\n",
      "        bars[pb++] = 1;\n",
      "        bars[pb++] = 1;\n",
      "        byte[] sequence = PARITY13[code[0]];\n",
      "        for (int k = 0; k < sequence.length; ++k) {\n",
      "            int c = code[k + 1];\n",
      "            byte[] stripes = BARS[c];\n",
      "            if (sequence[k] == ODD) {\n",
      "                bars[pb++] = stripes[0];\n",
      "                bars[pb++] = stripes[1];\n",
      "                bars[pb++] = stripes[2];\n",
      "                bars[pb++] = stripes[3];\n",
      "            } else {\n",
      "                bars[pb++] = stripes[3];\n",
      "                bars[pb++] = stripes[2];\n",
      "                bars[pb++] = stripes[1];\n",
      "                bars[pb++] = stripes[0];\n",
      "            }\n",
      "        }\n",
      "        bars[pb++] = 1;\n",
      "        bars[pb++] = 1;\n",
      "        bars[pb++] = 1;\n",
      "        bars[pb++] = 1;\n",
      "        bars[pb++] = 1;\n",
      "        for (int k = 7; k < 13; ++k) {\n",
      "            int c = code[k];\n",
      "            byte[] stripes= BARS[c];\n",
      "            bars[pb++] = stripes[0];\n",
      "            bars[pb++] = stripes[1];\n",
      "            bars[pb++] = stripes[2];\n",
      "            bars[pb++] = stripes[3];\n",
      "        }\n",
      "        bars[pb++] = 1;\n",
      "        bars[pb++] = 1;\n",
      "        bars[pb++] = 1;\n",
      "        return bars;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates the bars for the barcode EAN8.\n",
      "     *\n",
      "     * @param _code the text with 8 digits\n",
      "     * @return the barcode\n",
      "     */\n",
      "    public static byte[] getBarsEAN8(String _code) {\n",
      "        int[] code = new int[_code.length()];\n",
      "        for (int k = 0; k < code.length; ++k) {\n",
      "            code[k] = _code.charAt(k) - '0';\n",
      "        }\n",
      "        byte[] bars= new byte[TOTALBARS_EAN8];\n",
      "        int pb = 0;\n",
      "        bars[pb++] = 1;\n",
      "        bars[pb++] = 1;\n",
      "        bars[pb++] = 1;\n",
      "        for (int k = 0; k < 4; ++k) {\n",
      "            int c = code[k];\n",
      "            byte[] stripes = BARS[c];\n",
      "            bars[pb++] = stripes[0];\n",
      "            bars[pb++] = stripes[1];\n",
      "            bars[pb++] = stripes[2];\n",
      "            bars[pb++] = stripes[3];\n",
      "        }\n",
      "        bars[pb++] = 1;\n",
      "        bars[pb++] = 1;\n",
      "        bars[pb++] = 1;\n",
      "        bars[pb++] = 1;\n",
      "        bars[pb++] = 1;\n",
      "        for (int k = 4; k < 8; ++k) {\n",
      "            int c = code[k];\n",
      "            byte[] stripes = BARS[c];\n",
      "            bars[pb++] = stripes[0];\n",
      "            bars[pb++] = stripes[1];\n",
      "            bars[pb++] = stripes[2];\n",
      "            bars[pb++] = stripes[3];\n",
      "        }\n",
      "        bars[pb++] = 1;\n",
      "        bars[pb++] = 1;\n",
      "        bars[pb++] = 1;\n",
      "        return bars;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates the bars for the barcode UPCE.\n",
      "     *\n",
      "     * @param _code the text with 8 digits\n",
      "     * @return the barcode\n",
      "     */\n",
      "    public static byte[] getBarsUPCE(String _code) {\n",
      "        int[] code = new int[_code.length()];\n",
      "        for (int k = 0; k < code.length; ++k) {\n",
      "            code[k] = _code.charAt(k) - '0';\n",
      "        }\n",
      "        byte[] bars = new byte[TOTALBARS_UPCE];\n",
      "        boolean flip = (code[0] != 0);\n",
      "        int pb = 0;\n",
      "        bars[pb++] = 1;\n",
      "        bars[pb++] = 1;\n",
      "        bars[pb++] = 1;\n",
      "        byte[] sequence = PARITYE[code[code.length - 1]];\n",
      "        for (int k = 1; k < code.length - 1; ++k) {\n",
      "            int c = code[k];\n",
      "            byte[] stripes = BARS[c];\n",
      "            if (sequence[k - 1] == (flip ? EVEN : ODD)) {\n",
      "                bars[pb++] = stripes[0];\n",
      "                bars[pb++] = stripes[1];\n",
      "                bars[pb++] = stripes[2];\n",
      "                bars[pb++] = stripes[3];\n",
      "            } else {\n",
      "                bars[pb++] = stripes[3];\n",
      "                bars[pb++] = stripes[2];\n",
      "                bars[pb++] = stripes[1];\n",
      "                bars[pb++] = stripes[0];\n",
      "            }\n",
      "        }\n",
      "        bars[pb++] = 1;\n",
      "        bars[pb++] = 1;\n",
      "        bars[pb++] = 1;\n",
      "        bars[pb++] = 1;\n",
      "        bars[pb++] = 1;\n",
      "        bars[pb++] = 1;\n",
      "        return bars;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates the bars for the barcode supplemental 2.\n",
      "     *\n",
      "     * @param _code the text with 2 digits\n",
      "     * @return the barcode\n",
      "     */\n",
      "    public static byte[] getBarsSupplemental2(String _code) {\n",
      "        int[] code = new int[2];\n",
      "        for (int k = 0; k < code.length; ++k) {\n",
      "            code[k] = _code.charAt(k) - '0';\n",
      "        }\n",
      "        byte[] bars = new byte[TOTALBARS_SUPP2];\n",
      "        int pb = 0;\n",
      "        int parity = (code[0] * 10 + code[1]) % 4;\n",
      "        bars[pb++] = 1;\n",
      "        bars[pb++] = 1;\n",
      "        bars[pb++] = 2;\n",
      "        byte[] sequence = PARITY2[parity];\n",
      "        for (int k = 0; k < sequence.length; ++k) {\n",
      "            if (k == 1) {\n",
      "                bars[pb++] = 1;\n",
      "                bars[pb++] = 1;\n",
      "            }\n",
      "            int c = code[k];\n",
      "            byte[] stripes = BARS[c];\n",
      "            if (sequence[k] == ODD) {\n",
      "                bars[pb++] = stripes[0];\n",
      "                bars[pb++] = stripes[1];\n",
      "                bars[pb++] = stripes[2];\n",
      "                bars[pb++] = stripes[3];\n",
      "            } else {\n",
      "                bars[pb++] = stripes[3];\n",
      "                bars[pb++] = stripes[2];\n",
      "                bars[pb++] = stripes[1];\n",
      "                bars[pb++] = stripes[0];\n",
      "            }\n",
      "        }\n",
      "        return bars;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates the bars for the barcode supplemental 5.\n",
      "     *\n",
      "     * @param _code the text with 5 digits\n",
      "     * @return the barcode\n",
      "     */\n",
      "    public static byte[] getBarsSupplemental5(String _code) {\n",
      "        int[] code = new int[5];\n",
      "        for (int k = 0; k < code.length; ++k) {\n",
      "            code[k] = _code.charAt(k) - '0';\n",
      "        }\n",
      "        byte[] bars = new byte[TOTALBARS_SUPP5];\n",
      "        int pb = 0;\n",
      "        int parity = (((code[0] + code[2] + code[4]) * 3) + ((code[1] + code[3]) * 9)) % 10;\n",
      "        bars[pb++] = 1;\n",
      "        bars[pb++] = 1;\n",
      "        bars[pb++] = 2;\n",
      "        byte[] sequence = PARITY5[parity];\n",
      "        for (int k = 0; k < sequence.length; ++k) {\n",
      "            if (k != 0) {\n",
      "                bars[pb++] = 1;\n",
      "                bars[pb++] = 1;\n",
      "            }\n",
      "            int c = code[k];\n",
      "            byte[] stripes = BARS[c];\n",
      "            if (sequence[k] == ODD) {\n",
      "                bars[pb++] = stripes[0];\n",
      "                bars[pb++] = stripes[1];\n",
      "                bars[pb++] = stripes[2];\n",
      "                bars[pb++] = stripes[3];\n",
      "            } else {\n",
      "                bars[pb++] = stripes[3];\n",
      "                bars[pb++] = stripes[2];\n",
      "                bars[pb++] = stripes[1];\n",
      "                bars[pb++] = stripes[0];\n",
      "            }\n",
      "        }\n",
      "        return bars;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets the maximum area that the barcode and the text, if\n",
      "     * any, will occupy. The lower left corner is always (0, 0).\n",
      "     *\n",
      "     * @return the size the barcode occupies.\n",
      "     */\n",
      "    @Override\n",
      "    public Rectangle getBarcodeSize() {\n",
      "        float width;\n",
      "        float height = barHeight;\n",
      "        if (font != null) {\n",
      "            if (baseline <= 0) {\n",
      "                height += -baseline + size;\n",
      "            } else {\n",
      "                height += baseline - getDescender();\n",
      "            }\n",
      "        }\n",
      "        switch (codeType) {\n",
      "            case EAN13:\n",
      "                width = x * (11 + 12 * 7);\n",
      "                if (font != null) {\n",
      "                    width += font.getWidth(code.charAt(0), size);\n",
      "                }\n",
      "                break;\n",
      "            case EAN8:\n",
      "                width = x * (11 + 8 * 7);\n",
      "                break;\n",
      "            case UPCA:\n",
      "                width = x * (11 + 12 * 7);\n",
      "                if (font != null) {\n",
      "                    width += font.getWidth(code.charAt(0), size) + font.getWidth(code.charAt(11), size);\n",
      "                }\n",
      "                break;\n",
      "            case UPCE:\n",
      "                width = x * (9 + 6 * 7);\n",
      "                if (font != null) {\n",
      "                    width += font.getWidth(code.charAt(0), size) + font.getWidth(code.charAt(7), size);\n",
      "                }\n",
      "                break;\n",
      "            case SUPP2:\n",
      "                width = x * (6 + 2 * 7);\n",
      "                break;\n",
      "            case SUPP5:\n",
      "                width = x * (4 + 5 * 7 + 4 * 2);\n",
      "                break;\n",
      "            default:\n",
      "                throw new PdfException(\"Invalid code type\");\n",
      "        }\n",
      "        return new Rectangle(width, height);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Places the barcode in a <CODE>PdfCanvas</CODE>. The\n",
      "     * barcode is always placed at coordinates (0, 0). Use the\n",
      "     * translation matrix to move it elsewhere.<p>\n",
      "     * The bars and text are written in the following colors:\n",
      "     * <br>\n",
      "     * <TABLE BORDER=\"1\" SUMMARY=\"barcode properties\">\n",
      "     * <TR>\n",
      "     * <TH><CODE>barColor</CODE></TH>\n",
      "     * <TH><CODE>textColor</CODE></TH>\n",
      "     * <TH>Result</TH>\n",
      "     * </TR>\n",
      "     * <TR>\n",
      "     * <TD><CODE>null</CODE></TD>\n",
      "     * <TD><CODE>null</CODE></TD>\n",
      "     * <TD>bars and text painted with current fill color</TD>\n",
      "     * </TR>\n",
      "     * <TR>\n",
      "     * <TD><CODE>barColor</CODE></TD>\n",
      "     * <TD><CODE>null</CODE></TD>\n",
      "     * <TD>bars and text painted with <CODE>barColor</CODE></TD>\n",
      "     * </TR>\n",
      "     * <TR>\n",
      "     * <TD><CODE>null</CODE></TD>\n",
      "     * <TD><CODE>textColor</CODE></TD>\n",
      "     * <TD>bars painted with current color<br>text painted with <CODE>textColor</CODE></TD>\n",
      "     * </TR>\n",
      "     * <TR>\n",
      "     * <TD><CODE>barColor</CODE></TD>\n",
      "     * <TD><CODE>textColor</CODE></TD>\n",
      "     * <TD>bars painted with <CODE>barColor</CODE><br>text painted with <CODE>textColor</CODE></TD>\n",
      "     * </TR>\n",
      "     * </TABLE>\n",
      "     *\n",
      "     * @param canvas    the <CODE>PdfCanvas</CODE> where the barcode will be placed\n",
      "     * @param barColor  the color of the bars. It can be <CODE>null</CODE>\n",
      "     * @param textColor the color of the text. It can be <CODE>null</CODE>\n",
      "     * @return the dimensions the barcode occupies\n",
      "     */\n",
      "    @Override\n",
      "    public Rectangle placeBarcode(PdfCanvas canvas, Color barColor, Color textColor) {\n",
      "        Rectangle rect = getBarcodeSize();\n",
      "        float barStartX = 0;\n",
      "        float barStartY = 0;\n",
      "        float textStartY = 0;\n",
      "        if (font != null) {\n",
      "            if (baseline <= 0) {\n",
      "                textStartY = barHeight - baseline;\n",
      "            } else {\n",
      "                textStartY = -getDescender();\n",
      "                barStartY = textStartY + baseline;\n",
      "            }\n",
      "        }\n",
      "        switch (codeType) {\n",
      "            case EAN13:\n",
      "            case UPCA:\n",
      "            case UPCE:\n",
      "                if (font != null) {\n",
      "                    barStartX += font.getWidth(code.charAt(0), size);\n",
      "                }\n",
      "                break;\n",
      "        }\n",
      "        byte[] bars;\n",
      "        int[] guard = GUARD_EMPTY;\n",
      "        switch (codeType) {\n",
      "            case EAN13:\n",
      "                bars = getBarsEAN13(code);\n",
      "                guard = GUARD_EAN13;\n",
      "                break;\n",
      "            case EAN8:\n",
      "                bars = getBarsEAN8(code);\n",
      "                guard = GUARD_EAN8;\n",
      "                break;\n",
      "            case UPCA:\n",
      "                bars = getBarsEAN13(\"0\" + code);\n",
      "                guard = GUARD_UPCA;\n",
      "                break;\n",
      "            case UPCE:\n",
      "                bars = getBarsUPCE(code);\n",
      "                guard = GUARD_UPCE;\n",
      "                break;\n",
      "            case SUPP2:\n",
      "                bars = getBarsSupplemental2(code);\n",
      "                break;\n",
      "            case SUPP5:\n",
      "                bars = getBarsSupplemental5(code);\n",
      "                break;\n",
      "            default:\n",
      "                throw new PdfException(\"Invalid code type\");\n",
      "        }\n",
      "        float keepBarX = barStartX;\n",
      "        boolean print = true;\n",
      "        float gd = 0;\n",
      "        if (font != null && baseline > 0 && guardBars) {\n",
      "            gd = baseline / 2;\n",
      "        }\n",
      "        if (barColor != null) {\n",
      "            canvas.setFillColor(barColor);\n",
      "        }\n",
      "        for (int k = 0; k < bars.length; ++k) {\n",
      "            float w = bars[k] * x;\n",
      "            if (print) {\n",
      "                if (Arrays.binarySearch(guard, k) >= 0) {\n",
      "                    canvas.rectangle(barStartX, barStartY - gd, w - inkSpreading, barHeight + gd);\n",
      "                } else {\n",
      "                    canvas.rectangle(barStartX, barStartY, w - inkSpreading, barHeight);\n",
      "                }\n",
      "            }\n",
      "            print = !print;\n",
      "            barStartX += w;\n",
      "        }\n",
      "        canvas.fill();\n",
      "        if (font != null) {\n",
      "            if (textColor != null) {\n",
      "                canvas.setFillColor(textColor);\n",
      "            }\n",
      "            canvas.beginText();\n",
      "            canvas.setFontAndSize(font, size);\n",
      "            switch (codeType) {\n",
      "                case EAN13:\n",
      "                    canvas.setTextMatrix(0, textStartY);\n",
      "                    canvas.showText(code.substring(0, 1));\n",
      "                    for (int k = 1; k < 13; ++k) {\n",
      "                        String c = code.substring(k, k + 1);\n",
      "                        float len = font.getWidth(c, size);\n",
      "                        float pX = keepBarX + TEXTPOS_EAN13[k - 1] * x - len / 2;\n",
      "                        canvas.setTextMatrix(pX, textStartY);\n",
      "                        canvas.showText(c);\n",
      "                    }\n",
      "                    break;\n",
      "                case EAN8:\n",
      "                    for (int k = 0; k < 8; ++k) {\n",
      "                        String c = code.substring(k, k + 1);\n",
      "                        float len = font.getWidth(c, size);\n",
      "                        float pX = TEXTPOS_EAN8[k] * x - len / 2;\n",
      "                        canvas.setTextMatrix(pX, textStartY);\n",
      "                        canvas.showText(c);\n",
      "                    }\n",
      "                    break;\n",
      "                case UPCA:\n",
      "                    canvas.setTextMatrix(0, textStartY);\n",
      "                    canvas.showText(code.substring(0, 1));\n",
      "                    for (int k = 1; k < 11; ++k) {\n",
      "                        String c = code.substring(k, k + 1);\n",
      "                        float len = font.getWidth(c, size);\n",
      "                        float pX = keepBarX + TEXTPOS_EAN13[k] * x - len / 2;\n",
      "                        canvas.setTextMatrix(pX, textStartY);\n",
      "                        canvas.showText(c);\n",
      "                    }\n",
      "                    canvas.setTextMatrix(keepBarX + x * (11 + 12 * 7), textStartY);\n",
      "                    canvas.showText(code.substring(11, 12));\n",
      "                    break;\n",
      "                case UPCE:\n",
      "                    canvas.setTextMatrix(0, textStartY);\n",
      "                    canvas.showText(code.substring(0, 1));\n",
      "                    for (int k = 1; k < 7; ++k) {\n",
      "                        String c = code.substring(k, k + 1);\n",
      "                        float len = font.getWidth(c, size);\n",
      "                        float pX = keepBarX + TEXTPOS_EAN13[k - 1] * x - len / 2;\n",
      "                        canvas.setTextMatrix(pX, textStartY);\n",
      "                        canvas.showText(c);\n",
      "                    }\n",
      "                    canvas.setTextMatrix(keepBarX + x * (9 + 6 * 7), textStartY);\n",
      "                    canvas.showText(code.substring(7, 8));\n",
      "                    break;\n",
      "                case SUPP2:\n",
      "                case SUPP5:\n",
      "                    for (int k = 0; k < code.length(); ++k) {\n",
      "                        String c = code.substring(k, k + 1);\n",
      "                        float len = font.getWidth(c, size);\n",
      "                        float pX = (7.5f + (9 * k)) * x - len / 2;\n",
      "                        canvas.setTextMatrix(pX, textStartY);\n",
      "                        canvas.showText(c);\n",
      "                    }\n",
      "                    break;\n",
      "            }\n",
      "            canvas.endText();\n",
      "        }\n",
      "        return rect;\n",
      "    }\n",
      "\n",
      "    // Android-Conversion-Skip-Block-Start (java.awt library isn't available on Android)\n",
      "    /**\n",
      "     * Creates a <CODE>java.awt.Image</CODE>. This image only\n",
      "     * contains the bars without any text.\n",
      "     *\n",
      "     * @param foreground the color of the bars\n",
      "     * @param background the color of the background\n",
      "     * @return the image\n",
      "     */\n",
      "    @Override\n",
      "    public java.awt.Image createAwtImage(java.awt.Color foreground, java.awt.Color background) {\n",
      "        int f = (foreground == null) ? DEFAULT_BAR_FOREGROUND_COLOR.getRGB() : foreground.getRGB();\n",
      "        int g = (background == null) ? DEFAULT_BAR_BACKGROUND_COLOR.getRGB() : background.getRGB();\n",
      "        java.awt.Canvas canvas = new java.awt.Canvas();\n",
      "\n",
      "        int width;\n",
      "        byte bars[];\n",
      "        switch (codeType) {\n",
      "            case EAN13:\n",
      "                bars = getBarsEAN13(code);\n",
      "                width = 11 + 12 * 7;\n",
      "                break;\n",
      "            case EAN8:\n",
      "                bars = getBarsEAN8(code);\n",
      "                width = 11 + 8 * 7;\n",
      "                break;\n",
      "            case UPCA:\n",
      "                bars = getBarsEAN13(\"0\" + code);\n",
      "                width = 11 + 12 * 7;\n",
      "                break;\n",
      "            case UPCE:\n",
      "                bars = getBarsUPCE(code);\n",
      "                width = 9 + 6 * 7;\n",
      "                break;\n",
      "            case SUPP2:\n",
      "                bars = getBarsSupplemental2(code);\n",
      "                width = 6 + 2 * 7;\n",
      "                break;\n",
      "            case SUPP5:\n",
      "                bars = getBarsSupplemental5(code);\n",
      "                width = 4 + 5 * 7 + 4 * 2;\n",
      "                break;\n",
      "            default:\n",
      "                throw new PdfException(\"Invalid code type\");\n",
      "        }\n",
      "\n",
      "        boolean print = true;\n",
      "        int ptr = 0;\n",
      "        int height = (int) barHeight;\n",
      "        int[] pix = new int[width * height];\n",
      "        for (int k = 0; k < bars.length; ++k) {\n",
      "            int w = bars[k];\n",
      "            int c = g;\n",
      "            if (print) {\n",
      "                c = f;\n",
      "            }\n",
      "            print = !print;\n",
      "            for (int j = 0; j < w; ++j) {\n",
      "                pix[ptr++] = c;\n",
      "            }\n",
      "        }\n",
      "        for (int k = width; k < pix.length; k += width) {\n",
      "            System.arraycopy(pix, 0, pix, k, width);\n",
      "        }\n",
      "        return canvas.createImage(new java.awt.image.MemoryImageSource(width, height, pix, 0, width));\n",
      "    }\n",
      "    // Android-Conversion-Skip-Block-End\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.barcodes;\n",
      "\n",
      "import com.itextpdf.kernel.exceptions.PdfException;\n",
      "import com.itextpdf.kernel.colors.ColorConstants;\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "import com.itextpdf.kernel.pdf.PdfPage;\n",
      "import com.itextpdf.kernel.pdf.PdfReader;\n",
      "import com.itextpdf.kernel.pdf.PdfWriter;\n",
      "import com.itextpdf.kernel.pdf.canvas.PdfCanvas;\n",
      "import com.itextpdf.kernel.utils.CompareTool;\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.type.IntegrationTest;\n",
      "\n",
      "import java.io.IOException;\n",
      "import org.junit.AfterClass;\n",
      "import org.junit.Assert;\n",
      "import org.junit.BeforeClass;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(IntegrationTest.class)\n",
      "public class BarcodeEANTest extends ExtendedITextTest {\n",
      "    public static final String sourceFolder = \"./src/test/resources/com/itextpdf/barcodes/\";\n",
      "    public static final String destinationFolder = \"./target/test/com/itextpdf/barcodes/BarcodeEAN/\";\n",
      "\n",
      "    @BeforeClass\n",
      "    public static void beforeClass() {\n",
      "        createDestinationFolder(destinationFolder);\n",
      "    }\n",
      "\n",
      "    @AfterClass\n",
      "    public static void afterClass() {\n",
      "        CompareTool.cleanup(destinationFolder);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcode01Test() throws IOException, PdfException, InterruptedException {\n",
      "        String filename = \"barcodeEAN_01.pdf\";\n",
      "        PdfWriter writer = CompareTool.createTestPdfWriter(destinationFolder + filename);\n",
      "        PdfDocument document = new PdfDocument(writer);\n",
      "\n",
      "        PdfPage page = document.addNewPage();\n",
      "        PdfCanvas canvas = new PdfCanvas(page);\n",
      "\n",
      "        Barcode1D barcode = new BarcodeEAN(document);\n",
      "        barcode.setCodeType(BarcodeEAN.EAN13);\n",
      "        barcode.setCode(\"9781935182610\");\n",
      "\n",
      "        barcode.setTextAlignment(Barcode1D.ALIGN_LEFT);\n",
      "        barcode.placeBarcode(canvas, ColorConstants.BLACK, ColorConstants.BLACK);\n",
      "\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool()\n",
      "                .compareByContent(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder,\n",
      "                        \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcode02Test() throws IOException, PdfException, InterruptedException {\n",
      "        String filename = \"barcodeEAN_02.pdf\";\n",
      "        PdfWriter writer = CompareTool.createTestPdfWriter(destinationFolder + filename);\n",
      "        PdfReader reader = new PdfReader(sourceFolder + \"DocumentWithTrueTypeFont1.pdf\");\n",
      "        PdfDocument document = new PdfDocument(reader, writer);\n",
      "\n",
      "        PdfCanvas canvas = new PdfCanvas(document.getLastPage());\n",
      "\n",
      "        Barcode1D barcode = new BarcodeEAN(document);\n",
      "        barcode.setCodeType(BarcodeEAN.EAN8);\n",
      "        barcode.setCode(\"97819351\");\n",
      "\n",
      "        barcode.setTextAlignment(Barcode1D.ALIGN_LEFT);\n",
      "        barcode.placeBarcode(canvas, ColorConstants.BLACK, ColorConstants.BLACK);\n",
      "\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool()\n",
      "                .compareByContent(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder,\n",
      "                        \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void barcode03Test() throws IOException, PdfException, InterruptedException {\n",
      "        String filename = \"barcodeEANSUP.pdf\";\n",
      "        PdfWriter writer = CompareTool.createTestPdfWriter(destinationFolder + filename);\n",
      "        PdfDocument document = new PdfDocument(writer);\n",
      "\n",
      "        PdfPage page = document.addNewPage();\n",
      "        PdfCanvas canvas = new PdfCanvas(page);\n",
      "\n",
      "        BarcodeEAN codeEAN = new BarcodeEAN(document);\n",
      "        codeEAN.setCodeType(BarcodeEAN.EAN13);\n",
      "        codeEAN.setCode(\"9781935182610\");\n",
      "        BarcodeEAN codeSUPP = new BarcodeEAN(document);\n",
      "        codeSUPP.setCodeType(BarcodeEAN.SUPP5);\n",
      "        codeSUPP.setCode(\"55999\");\n",
      "        codeSUPP.setBaseline(-2);\n",
      "        BarcodeEANSUPP eanSupp = new BarcodeEANSUPP(codeEAN, codeSUPP);\n",
      "        eanSupp.placeBarcode(canvas, null, ColorConstants.BLUE);\n",
      "\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool()\n",
      "                .compareByContent(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder,\n",
      "                        \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void placeBarcodeUPCATest() throws IOException, PdfException, InterruptedException {\n",
      "        String filename = \"placeBarcodeUPCATest.pdf\";\n",
      "        PdfWriter writer = CompareTool.createTestPdfWriter(destinationFolder + filename);\n",
      "        PdfDocument document = new PdfDocument(writer);\n",
      "\n",
      "        PdfPage page = document.addNewPage();\n",
      "        PdfCanvas canvas = new PdfCanvas(page);\n",
      "\n",
      "        Barcode1D barcode = new BarcodeEAN(document);\n",
      "        barcode.setCodeType(BarcodeEAN.UPCA);\n",
      "        barcode.setCode(\"012340000006\");\n",
      "\n",
      "        barcode.placeBarcode(canvas, ColorConstants.BLACK, ColorConstants.BLACK);\n",
      "\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool()\n",
      "                .compareByContent(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder,\n",
      "                        \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void placeBarcodeUPCETest() throws IOException, PdfException, InterruptedException {\n",
      "        String filename = \"placeBarcodeUPCETest.pdf\";\n",
      "        PdfWriter writer = CompareTool.createTestPdfWriter(destinationFolder + filename);\n",
      "        PdfDocument document = new PdfDocument(writer);\n",
      "\n",
      "        PdfPage page = document.addNewPage();\n",
      "        PdfCanvas canvas = new PdfCanvas(page);\n",
      "\n",
      "        Barcode1D barcode = new BarcodeEAN(document);\n",
      "        barcode.setCodeType(BarcodeEAN.UPCE);\n",
      "        barcode.setCode(\"03456781\");\n",
      "\n",
      "        barcode.placeBarcode(canvas, ColorConstants.BLACK, ColorConstants.BLACK);\n",
      "\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool()\n",
      "                .compareByContent(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder,\n",
      "                        \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void placeBarcodeSUPP2Test() throws IOException, PdfException, InterruptedException {\n",
      "        String filename = \"placeBarcodeSUPP2Test.pdf\";\n",
      "        PdfWriter writer = CompareTool.createTestPdfWriter(destinationFolder + filename);\n",
      "        PdfDocument document = new PdfDocument(writer);\n",
      "\n",
      "        PdfPage page = document.addNewPage();\n",
      "        PdfCanvas canvas = new PdfCanvas(page);\n",
      "\n",
      "        Barcode1D barcode = new BarcodeEAN(document);\n",
      "        barcode.setCodeType(BarcodeEAN.SUPP2);\n",
      "        barcode.setCode(\"03456781\");\n",
      "\n",
      "        barcode.placeBarcode(canvas, ColorConstants.BLACK, ColorConstants.BLACK);\n",
      "\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool()\n",
      "                .compareByContent(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder,\n",
      "                        \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void placeBarcodeSUPP5Test() throws IOException, PdfException, InterruptedException {\n",
      "        String filename = \"placeBarcodeSUPP5Test.pdf\";\n",
      "        PdfWriter writer = CompareTool.createTestPdfWriter(destinationFolder + filename);\n",
      "        PdfDocument document = new PdfDocument(writer);\n",
      "\n",
      "        PdfPage page = document.addNewPage();\n",
      "        PdfCanvas canvas = new PdfCanvas(page);\n",
      "\n",
      "        Barcode1D barcode = new BarcodeEAN(document);\n",
      "        barcode.setCodeType(BarcodeEAN.SUPP5);\n",
      "        barcode.setCode(\"55999\");\n",
      "\n",
      "        barcode.placeBarcode(canvas, ColorConstants.BLACK, ColorConstants.BLACK);\n",
      "\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool()\n",
      "                .compareByContent(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder,\n",
      "                        \"diff_\"));\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "BarcodeEAN::::calculateEANParity(java.lang.String)": [
        313,
        322
      ],
      "BarcodeEAN::::convertUPCAtoUPCE(java.lang.String)": [
        332,
        354
      ],
      "BarcodeEAN::::getBarsEAN13(java.lang.String)": [
        362,
        405
      ],
      "BarcodeEAN::::getBarsEAN8(java.lang.String)": [
        413,
        448
      ],
      "BarcodeEAN::::getBarsUPCE(java.lang.String)": [
        456,
        490
      ],
      "BarcodeEAN::::getBarsSupplemental2(java.lang.String)": [
        498,
        530
      ],
      "BarcodeEAN::::getBarsSupplemental5(java.lang.String)": [
        538,
        570
      ],
      "BarcodeEAN::::getBarcodeSize()": [
        578,
        621
      ],
      "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)": [
        813,
        869
      ]
    },
    "test_method_lines_dic": {
      "BarcodeEANTest::::beforeClass()": [
        48,
        51
      ],
      "BarcodeEANTest::::afterClass()": [
        53,
        56
      ],
      "BarcodeEANTest::::barcode01Test()": [
        58,
        79
      ],
      "BarcodeEANTest::::barcode02Test()": [
        81,
        102
      ],
      "BarcodeEANTest::::barcode03Test()": [
        104,
        128
      ],
      "BarcodeEANTest::::placeBarcodeUPCATest()": [
        130,
        150
      ],
      "BarcodeEANTest::::placeBarcodeUPCETest()": [
        152,
        172
      ],
      "BarcodeEANTest::::placeBarcodeSUPP2Test()": [
        174,
        194
      ],
      "BarcodeEANTest::::placeBarcodeSUPP5Test()": [
        196,
        216
      ]
    },
    "reverse_method_lines_dic": {
      "313": "BarcodeEAN::::calculateEANParity(java.lang.String)",
      "314": "BarcodeEAN::::calculateEANParity(java.lang.String)",
      "315": "BarcodeEAN::::calculateEANParity(java.lang.String)",
      "316": "BarcodeEAN::::calculateEANParity(java.lang.String)",
      "317": "BarcodeEAN::::calculateEANParity(java.lang.String)",
      "318": "BarcodeEAN::::calculateEANParity(java.lang.String)",
      "319": "BarcodeEAN::::calculateEANParity(java.lang.String)",
      "320": "BarcodeEAN::::calculateEANParity(java.lang.String)",
      "321": "BarcodeEAN::::calculateEANParity(java.lang.String)",
      "322": "BarcodeEAN::::calculateEANParity(java.lang.String)",
      "332": "BarcodeEAN::::convertUPCAtoUPCE(java.lang.String)",
      "333": "BarcodeEAN::::convertUPCAtoUPCE(java.lang.String)",
      "334": "BarcodeEAN::::convertUPCAtoUPCE(java.lang.String)",
      "335": "BarcodeEAN::::convertUPCAtoUPCE(java.lang.String)",
      "336": "BarcodeEAN::::convertUPCAtoUPCE(java.lang.String)",
      "337": "BarcodeEAN::::convertUPCAtoUPCE(java.lang.String)",
      "338": "BarcodeEAN::::convertUPCAtoUPCE(java.lang.String)",
      "339": "BarcodeEAN::::convertUPCAtoUPCE(java.lang.String)",
      "340": "BarcodeEAN::::convertUPCAtoUPCE(java.lang.String)",
      "341": "BarcodeEAN::::convertUPCAtoUPCE(java.lang.String)",
      "342": "BarcodeEAN::::convertUPCAtoUPCE(java.lang.String)",
      "343": "BarcodeEAN::::convertUPCAtoUPCE(java.lang.String)",
      "344": "BarcodeEAN::::convertUPCAtoUPCE(java.lang.String)",
      "345": "BarcodeEAN::::convertUPCAtoUPCE(java.lang.String)",
      "346": "BarcodeEAN::::convertUPCAtoUPCE(java.lang.String)",
      "347": "BarcodeEAN::::convertUPCAtoUPCE(java.lang.String)",
      "348": "BarcodeEAN::::convertUPCAtoUPCE(java.lang.String)",
      "349": "BarcodeEAN::::convertUPCAtoUPCE(java.lang.String)",
      "350": "BarcodeEAN::::convertUPCAtoUPCE(java.lang.String)",
      "351": "BarcodeEAN::::convertUPCAtoUPCE(java.lang.String)",
      "352": "BarcodeEAN::::convertUPCAtoUPCE(java.lang.String)",
      "353": "BarcodeEAN::::convertUPCAtoUPCE(java.lang.String)",
      "354": "BarcodeEAN::::convertUPCAtoUPCE(java.lang.String)",
      "362": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "363": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "364": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "365": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "366": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "367": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "368": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "369": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "370": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "371": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "372": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "373": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "374": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "375": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "376": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "377": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "378": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "379": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "380": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "381": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "382": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "383": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "384": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "385": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "386": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "387": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "388": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "389": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "390": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "391": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "392": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "393": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "394": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "395": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "396": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "397": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "398": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "399": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "400": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "401": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "402": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "403": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "404": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "405": "BarcodeEAN::::getBarsEAN13(java.lang.String)",
      "413": "BarcodeEAN::::getBarsEAN8(java.lang.String)",
      "414": "BarcodeEAN::::getBarsEAN8(java.lang.String)",
      "415": "BarcodeEAN::::getBarsEAN8(java.lang.String)",
      "416": "BarcodeEAN::::getBarsEAN8(java.lang.String)",
      "417": "BarcodeEAN::::getBarsEAN8(java.lang.String)",
      "418": "BarcodeEAN::::getBarsEAN8(java.lang.String)",
      "419": "BarcodeEAN::::getBarsEAN8(java.lang.String)",
      "420": "BarcodeEAN::::getBarsEAN8(java.lang.String)",
      "421": "BarcodeEAN::::getBarsEAN8(java.lang.String)",
      "422": "BarcodeEAN::::getBarsEAN8(java.lang.String)",
      "423": "BarcodeEAN::::getBarsEAN8(java.lang.String)",
      "424": "BarcodeEAN::::getBarsEAN8(java.lang.String)",
      "425": "BarcodeEAN::::getBarsEAN8(java.lang.String)",
      "426": "BarcodeEAN::::getBarsEAN8(java.lang.String)",
      "427": "BarcodeEAN::::getBarsEAN8(java.lang.String)",
      "428": "BarcodeEAN::::getBarsEAN8(java.lang.String)",
      "429": "BarcodeEAN::::getBarsEAN8(java.lang.String)",
      "430": "BarcodeEAN::::getBarsEAN8(java.lang.String)",
      "431": "BarcodeEAN::::getBarsEAN8(java.lang.String)",
      "432": "BarcodeEAN::::getBarsEAN8(java.lang.String)",
      "433": "BarcodeEAN::::getBarsEAN8(java.lang.String)",
      "434": "BarcodeEAN::::getBarsEAN8(java.lang.String)",
      "435": "BarcodeEAN::::getBarsEAN8(java.lang.String)",
      "436": "BarcodeEAN::::getBarsEAN8(java.lang.String)",
      "437": "BarcodeEAN::::getBarsEAN8(java.lang.String)",
      "438": "BarcodeEAN::::getBarsEAN8(java.lang.String)",
      "439": "BarcodeEAN::::getBarsEAN8(java.lang.String)",
      "440": "BarcodeEAN::::getBarsEAN8(java.lang.String)",
      "441": "BarcodeEAN::::getBarsEAN8(java.lang.String)",
      "442": "BarcodeEAN::::getBarsEAN8(java.lang.String)",
      "443": "BarcodeEAN::::getBarsEAN8(java.lang.String)",
      "444": "BarcodeEAN::::getBarsEAN8(java.lang.String)",
      "445": "BarcodeEAN::::getBarsEAN8(java.lang.String)",
      "446": "BarcodeEAN::::getBarsEAN8(java.lang.String)",
      "447": "BarcodeEAN::::getBarsEAN8(java.lang.String)",
      "448": "BarcodeEAN::::getBarsEAN8(java.lang.String)",
      "456": "BarcodeEAN::::getBarsUPCE(java.lang.String)",
      "457": "BarcodeEAN::::getBarsUPCE(java.lang.String)",
      "458": "BarcodeEAN::::getBarsUPCE(java.lang.String)",
      "459": "BarcodeEAN::::getBarsUPCE(java.lang.String)",
      "460": "BarcodeEAN::::getBarsUPCE(java.lang.String)",
      "461": "BarcodeEAN::::getBarsUPCE(java.lang.String)",
      "462": "BarcodeEAN::::getBarsUPCE(java.lang.String)",
      "463": "BarcodeEAN::::getBarsUPCE(java.lang.String)",
      "464": "BarcodeEAN::::getBarsUPCE(java.lang.String)",
      "465": "BarcodeEAN::::getBarsUPCE(java.lang.String)",
      "466": "BarcodeEAN::::getBarsUPCE(java.lang.String)",
      "467": "BarcodeEAN::::getBarsUPCE(java.lang.String)",
      "468": "BarcodeEAN::::getBarsUPCE(java.lang.String)",
      "469": "BarcodeEAN::::getBarsUPCE(java.lang.String)",
      "470": "BarcodeEAN::::getBarsUPCE(java.lang.String)",
      "471": "BarcodeEAN::::getBarsUPCE(java.lang.String)",
      "472": "BarcodeEAN::::getBarsUPCE(java.lang.String)",
      "473": "BarcodeEAN::::getBarsUPCE(java.lang.String)",
      "474": "BarcodeEAN::::getBarsUPCE(java.lang.String)",
      "475": "BarcodeEAN::::getBarsUPCE(java.lang.String)",
      "476": "BarcodeEAN::::getBarsUPCE(java.lang.String)",
      "477": "BarcodeEAN::::getBarsUPCE(java.lang.String)",
      "478": "BarcodeEAN::::getBarsUPCE(java.lang.String)",
      "479": "BarcodeEAN::::getBarsUPCE(java.lang.String)",
      "480": "BarcodeEAN::::getBarsUPCE(java.lang.String)",
      "481": "BarcodeEAN::::getBarsUPCE(java.lang.String)",
      "482": "BarcodeEAN::::getBarsUPCE(java.lang.String)",
      "483": "BarcodeEAN::::getBarsUPCE(java.lang.String)",
      "484": "BarcodeEAN::::getBarsUPCE(java.lang.String)",
      "485": "BarcodeEAN::::getBarsUPCE(java.lang.String)",
      "486": "BarcodeEAN::::getBarsUPCE(java.lang.String)",
      "487": "BarcodeEAN::::getBarsUPCE(java.lang.String)",
      "488": "BarcodeEAN::::getBarsUPCE(java.lang.String)",
      "489": "BarcodeEAN::::getBarsUPCE(java.lang.String)",
      "490": "BarcodeEAN::::getBarsUPCE(java.lang.String)",
      "498": "BarcodeEAN::::getBarsSupplemental2(java.lang.String)",
      "499": "BarcodeEAN::::getBarsSupplemental2(java.lang.String)",
      "500": "BarcodeEAN::::getBarsSupplemental2(java.lang.String)",
      "501": "BarcodeEAN::::getBarsSupplemental2(java.lang.String)",
      "502": "BarcodeEAN::::getBarsSupplemental2(java.lang.String)",
      "503": "BarcodeEAN::::getBarsSupplemental2(java.lang.String)",
      "504": "BarcodeEAN::::getBarsSupplemental2(java.lang.String)",
      "505": "BarcodeEAN::::getBarsSupplemental2(java.lang.String)",
      "506": "BarcodeEAN::::getBarsSupplemental2(java.lang.String)",
      "507": "BarcodeEAN::::getBarsSupplemental2(java.lang.String)",
      "508": "BarcodeEAN::::getBarsSupplemental2(java.lang.String)",
      "509": "BarcodeEAN::::getBarsSupplemental2(java.lang.String)",
      "510": "BarcodeEAN::::getBarsSupplemental2(java.lang.String)",
      "511": "BarcodeEAN::::getBarsSupplemental2(java.lang.String)",
      "512": "BarcodeEAN::::getBarsSupplemental2(java.lang.String)",
      "513": "BarcodeEAN::::getBarsSupplemental2(java.lang.String)",
      "514": "BarcodeEAN::::getBarsSupplemental2(java.lang.String)",
      "515": "BarcodeEAN::::getBarsSupplemental2(java.lang.String)",
      "516": "BarcodeEAN::::getBarsSupplemental2(java.lang.String)",
      "517": "BarcodeEAN::::getBarsSupplemental2(java.lang.String)",
      "518": "BarcodeEAN::::getBarsSupplemental2(java.lang.String)",
      "519": "BarcodeEAN::::getBarsSupplemental2(java.lang.String)",
      "520": "BarcodeEAN::::getBarsSupplemental2(java.lang.String)",
      "521": "BarcodeEAN::::getBarsSupplemental2(java.lang.String)",
      "522": "BarcodeEAN::::getBarsSupplemental2(java.lang.String)",
      "523": "BarcodeEAN::::getBarsSupplemental2(java.lang.String)",
      "524": "BarcodeEAN::::getBarsSupplemental2(java.lang.String)",
      "525": "BarcodeEAN::::getBarsSupplemental2(java.lang.String)",
      "526": "BarcodeEAN::::getBarsSupplemental2(java.lang.String)",
      "527": "BarcodeEAN::::getBarsSupplemental2(java.lang.String)",
      "528": "BarcodeEAN::::getBarsSupplemental2(java.lang.String)",
      "529": "BarcodeEAN::::getBarsSupplemental2(java.lang.String)",
      "530": "BarcodeEAN::::getBarsSupplemental2(java.lang.String)",
      "538": "BarcodeEAN::::getBarsSupplemental5(java.lang.String)",
      "539": "BarcodeEAN::::getBarsSupplemental5(java.lang.String)",
      "540": "BarcodeEAN::::getBarsSupplemental5(java.lang.String)",
      "541": "BarcodeEAN::::getBarsSupplemental5(java.lang.String)",
      "542": "BarcodeEAN::::getBarsSupplemental5(java.lang.String)",
      "543": "BarcodeEAN::::getBarsSupplemental5(java.lang.String)",
      "544": "BarcodeEAN::::getBarsSupplemental5(java.lang.String)",
      "545": "BarcodeEAN::::getBarsSupplemental5(java.lang.String)",
      "546": "BarcodeEAN::::getBarsSupplemental5(java.lang.String)",
      "547": "BarcodeEAN::::getBarsSupplemental5(java.lang.String)",
      "548": "BarcodeEAN::::getBarsSupplemental5(java.lang.String)",
      "549": "BarcodeEAN::::getBarsSupplemental5(java.lang.String)",
      "550": "BarcodeEAN::::getBarsSupplemental5(java.lang.String)",
      "551": "BarcodeEAN::::getBarsSupplemental5(java.lang.String)",
      "552": "BarcodeEAN::::getBarsSupplemental5(java.lang.String)",
      "553": "BarcodeEAN::::getBarsSupplemental5(java.lang.String)",
      "554": "BarcodeEAN::::getBarsSupplemental5(java.lang.String)",
      "555": "BarcodeEAN::::getBarsSupplemental5(java.lang.String)",
      "556": "BarcodeEAN::::getBarsSupplemental5(java.lang.String)",
      "557": "BarcodeEAN::::getBarsSupplemental5(java.lang.String)",
      "558": "BarcodeEAN::::getBarsSupplemental5(java.lang.String)",
      "559": "BarcodeEAN::::getBarsSupplemental5(java.lang.String)",
      "560": "BarcodeEAN::::getBarsSupplemental5(java.lang.String)",
      "561": "BarcodeEAN::::getBarsSupplemental5(java.lang.String)",
      "562": "BarcodeEAN::::getBarsSupplemental5(java.lang.String)",
      "563": "BarcodeEAN::::getBarsSupplemental5(java.lang.String)",
      "564": "BarcodeEAN::::getBarsSupplemental5(java.lang.String)",
      "565": "BarcodeEAN::::getBarsSupplemental5(java.lang.String)",
      "566": "BarcodeEAN::::getBarsSupplemental5(java.lang.String)",
      "567": "BarcodeEAN::::getBarsSupplemental5(java.lang.String)",
      "568": "BarcodeEAN::::getBarsSupplemental5(java.lang.String)",
      "569": "BarcodeEAN::::getBarsSupplemental5(java.lang.String)",
      "570": "BarcodeEAN::::getBarsSupplemental5(java.lang.String)",
      "578": "BarcodeEAN::::getBarcodeSize()",
      "579": "BarcodeEAN::::getBarcodeSize()",
      "580": "BarcodeEAN::::getBarcodeSize()",
      "581": "BarcodeEAN::::getBarcodeSize()",
      "582": "BarcodeEAN::::getBarcodeSize()",
      "583": "BarcodeEAN::::getBarcodeSize()",
      "584": "BarcodeEAN::::getBarcodeSize()",
      "585": "BarcodeEAN::::getBarcodeSize()",
      "586": "BarcodeEAN::::getBarcodeSize()",
      "587": "BarcodeEAN::::getBarcodeSize()",
      "588": "BarcodeEAN::::getBarcodeSize()",
      "589": "BarcodeEAN::::getBarcodeSize()",
      "590": "BarcodeEAN::::getBarcodeSize()",
      "591": "BarcodeEAN::::getBarcodeSize()",
      "592": "BarcodeEAN::::getBarcodeSize()",
      "593": "BarcodeEAN::::getBarcodeSize()",
      "594": "BarcodeEAN::::getBarcodeSize()",
      "595": "BarcodeEAN::::getBarcodeSize()",
      "596": "BarcodeEAN::::getBarcodeSize()",
      "597": "BarcodeEAN::::getBarcodeSize()",
      "598": "BarcodeEAN::::getBarcodeSize()",
      "599": "BarcodeEAN::::getBarcodeSize()",
      "600": "BarcodeEAN::::getBarcodeSize()",
      "601": "BarcodeEAN::::getBarcodeSize()",
      "602": "BarcodeEAN::::getBarcodeSize()",
      "603": "BarcodeEAN::::getBarcodeSize()",
      "604": "BarcodeEAN::::getBarcodeSize()",
      "605": "BarcodeEAN::::getBarcodeSize()",
      "606": "BarcodeEAN::::getBarcodeSize()",
      "607": "BarcodeEAN::::getBarcodeSize()",
      "608": "BarcodeEAN::::getBarcodeSize()",
      "609": "BarcodeEAN::::getBarcodeSize()",
      "610": "BarcodeEAN::::getBarcodeSize()",
      "611": "BarcodeEAN::::getBarcodeSize()",
      "612": "BarcodeEAN::::getBarcodeSize()",
      "613": "BarcodeEAN::::getBarcodeSize()",
      "614": "BarcodeEAN::::getBarcodeSize()",
      "615": "BarcodeEAN::::getBarcodeSize()",
      "616": "BarcodeEAN::::getBarcodeSize()",
      "617": "BarcodeEAN::::getBarcodeSize()",
      "618": "BarcodeEAN::::getBarcodeSize()",
      "619": "BarcodeEAN::::getBarcodeSize()",
      "620": "BarcodeEAN::::getBarcodeSize()",
      "621": "BarcodeEAN::::getBarcodeSize()",
      "813": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "814": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "815": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "816": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "817": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "818": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "819": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "820": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "821": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "822": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "823": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "824": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "825": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "826": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "827": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "828": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "829": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "830": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "831": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "832": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "833": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "834": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "835": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "836": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "837": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "838": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "839": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "840": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "841": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "842": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "843": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "844": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "845": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "846": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "847": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "848": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "849": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "850": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "851": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "852": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "853": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "854": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "855": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "856": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "857": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "858": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "859": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "860": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "861": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "862": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "863": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "864": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "865": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "866": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "867": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "868": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)",
      "869": "BarcodeEAN::::createAwtImage(java.awt.Color,java.awt.Color)"
    },
    "test_reverse_method_lines_dic": {
      "48": "BarcodeEANTest::::beforeClass()",
      "49": "BarcodeEANTest::::beforeClass()",
      "50": "BarcodeEANTest::::beforeClass()",
      "51": "BarcodeEANTest::::beforeClass()",
      "53": "BarcodeEANTest::::afterClass()",
      "54": "BarcodeEANTest::::afterClass()",
      "55": "BarcodeEANTest::::afterClass()",
      "56": "BarcodeEANTest::::afterClass()",
      "58": "BarcodeEANTest::::barcode01Test()",
      "59": "BarcodeEANTest::::barcode01Test()",
      "60": "BarcodeEANTest::::barcode01Test()",
      "61": "BarcodeEANTest::::barcode01Test()",
      "62": "BarcodeEANTest::::barcode01Test()",
      "63": "BarcodeEANTest::::barcode01Test()",
      "64": "BarcodeEANTest::::barcode01Test()",
      "65": "BarcodeEANTest::::barcode01Test()",
      "66": "BarcodeEANTest::::barcode01Test()",
      "67": "BarcodeEANTest::::barcode01Test()",
      "68": "BarcodeEANTest::::barcode01Test()",
      "69": "BarcodeEANTest::::barcode01Test()",
      "70": "BarcodeEANTest::::barcode01Test()",
      "71": "BarcodeEANTest::::barcode01Test()",
      "72": "BarcodeEANTest::::barcode01Test()",
      "73": "BarcodeEANTest::::barcode01Test()",
      "74": "BarcodeEANTest::::barcode01Test()",
      "75": "BarcodeEANTest::::barcode01Test()",
      "76": "BarcodeEANTest::::barcode01Test()",
      "77": "BarcodeEANTest::::barcode01Test()",
      "78": "BarcodeEANTest::::barcode01Test()",
      "79": "BarcodeEANTest::::barcode01Test()",
      "81": "BarcodeEANTest::::barcode02Test()",
      "82": "BarcodeEANTest::::barcode02Test()",
      "83": "BarcodeEANTest::::barcode02Test()",
      "84": "BarcodeEANTest::::barcode02Test()",
      "85": "BarcodeEANTest::::barcode02Test()",
      "86": "BarcodeEANTest::::barcode02Test()",
      "87": "BarcodeEANTest::::barcode02Test()",
      "88": "BarcodeEANTest::::barcode02Test()",
      "89": "BarcodeEANTest::::barcode02Test()",
      "90": "BarcodeEANTest::::barcode02Test()",
      "91": "BarcodeEANTest::::barcode02Test()",
      "92": "BarcodeEANTest::::barcode02Test()",
      "93": "BarcodeEANTest::::barcode02Test()",
      "94": "BarcodeEANTest::::barcode02Test()",
      "95": "BarcodeEANTest::::barcode02Test()",
      "96": "BarcodeEANTest::::barcode02Test()",
      "97": "BarcodeEANTest::::barcode02Test()",
      "98": "BarcodeEANTest::::barcode02Test()",
      "99": "BarcodeEANTest::::barcode02Test()",
      "100": "BarcodeEANTest::::barcode02Test()",
      "101": "BarcodeEANTest::::barcode02Test()",
      "102": "BarcodeEANTest::::barcode02Test()",
      "104": "BarcodeEANTest::::barcode03Test()",
      "105": "BarcodeEANTest::::barcode03Test()",
      "106": "BarcodeEANTest::::barcode03Test()",
      "107": "BarcodeEANTest::::barcode03Test()",
      "108": "BarcodeEANTest::::barcode03Test()",
      "109": "BarcodeEANTest::::barcode03Test()",
      "110": "BarcodeEANTest::::barcode03Test()",
      "111": "BarcodeEANTest::::barcode03Test()",
      "112": "BarcodeEANTest::::barcode03Test()",
      "113": "BarcodeEANTest::::barcode03Test()",
      "114": "BarcodeEANTest::::barcode03Test()",
      "115": "BarcodeEANTest::::barcode03Test()",
      "116": "BarcodeEANTest::::barcode03Test()",
      "117": "BarcodeEANTest::::barcode03Test()",
      "118": "BarcodeEANTest::::barcode03Test()",
      "119": "BarcodeEANTest::::barcode03Test()",
      "120": "BarcodeEANTest::::barcode03Test()",
      "121": "BarcodeEANTest::::barcode03Test()",
      "122": "BarcodeEANTest::::barcode03Test()",
      "123": "BarcodeEANTest::::barcode03Test()",
      "124": "BarcodeEANTest::::barcode03Test()",
      "125": "BarcodeEANTest::::barcode03Test()",
      "126": "BarcodeEANTest::::barcode03Test()",
      "127": "BarcodeEANTest::::barcode03Test()",
      "128": "BarcodeEANTest::::barcode03Test()",
      "130": "BarcodeEANTest::::placeBarcodeUPCATest()",
      "131": "BarcodeEANTest::::placeBarcodeUPCATest()",
      "132": "BarcodeEANTest::::placeBarcodeUPCATest()",
      "133": "BarcodeEANTest::::placeBarcodeUPCATest()",
      "134": "BarcodeEANTest::::placeBarcodeUPCATest()",
      "135": "BarcodeEANTest::::placeBarcodeUPCATest()",
      "136": "BarcodeEANTest::::placeBarcodeUPCATest()",
      "137": "BarcodeEANTest::::placeBarcodeUPCATest()",
      "138": "BarcodeEANTest::::placeBarcodeUPCATest()",
      "139": "BarcodeEANTest::::placeBarcodeUPCATest()",
      "140": "BarcodeEANTest::::placeBarcodeUPCATest()",
      "141": "BarcodeEANTest::::placeBarcodeUPCATest()",
      "142": "BarcodeEANTest::::placeBarcodeUPCATest()",
      "143": "BarcodeEANTest::::placeBarcodeUPCATest()",
      "144": "BarcodeEANTest::::placeBarcodeUPCATest()",
      "145": "BarcodeEANTest::::placeBarcodeUPCATest()",
      "146": "BarcodeEANTest::::placeBarcodeUPCATest()",
      "147": "BarcodeEANTest::::placeBarcodeUPCATest()",
      "148": "BarcodeEANTest::::placeBarcodeUPCATest()",
      "149": "BarcodeEANTest::::placeBarcodeUPCATest()",
      "150": "BarcodeEANTest::::placeBarcodeUPCATest()",
      "152": "BarcodeEANTest::::placeBarcodeUPCETest()",
      "153": "BarcodeEANTest::::placeBarcodeUPCETest()",
      "154": "BarcodeEANTest::::placeBarcodeUPCETest()",
      "155": "BarcodeEANTest::::placeBarcodeUPCETest()",
      "156": "BarcodeEANTest::::placeBarcodeUPCETest()",
      "157": "BarcodeEANTest::::placeBarcodeUPCETest()",
      "158": "BarcodeEANTest::::placeBarcodeUPCETest()",
      "159": "BarcodeEANTest::::placeBarcodeUPCETest()",
      "160": "BarcodeEANTest::::placeBarcodeUPCETest()",
      "161": "BarcodeEANTest::::placeBarcodeUPCETest()",
      "162": "BarcodeEANTest::::placeBarcodeUPCETest()",
      "163": "BarcodeEANTest::::placeBarcodeUPCETest()",
      "164": "BarcodeEANTest::::placeBarcodeUPCETest()",
      "165": "BarcodeEANTest::::placeBarcodeUPCETest()",
      "166": "BarcodeEANTest::::placeBarcodeUPCETest()",
      "167": "BarcodeEANTest::::placeBarcodeUPCETest()",
      "168": "BarcodeEANTest::::placeBarcodeUPCETest()",
      "169": "BarcodeEANTest::::placeBarcodeUPCETest()",
      "170": "BarcodeEANTest::::placeBarcodeUPCETest()",
      "171": "BarcodeEANTest::::placeBarcodeUPCETest()",
      "172": "BarcodeEANTest::::placeBarcodeUPCETest()",
      "174": "BarcodeEANTest::::placeBarcodeSUPP2Test()",
      "175": "BarcodeEANTest::::placeBarcodeSUPP2Test()",
      "176": "BarcodeEANTest::::placeBarcodeSUPP2Test()",
      "177": "BarcodeEANTest::::placeBarcodeSUPP2Test()",
      "178": "BarcodeEANTest::::placeBarcodeSUPP2Test()",
      "179": "BarcodeEANTest::::placeBarcodeSUPP2Test()",
      "180": "BarcodeEANTest::::placeBarcodeSUPP2Test()",
      "181": "BarcodeEANTest::::placeBarcodeSUPP2Test()",
      "182": "BarcodeEANTest::::placeBarcodeSUPP2Test()",
      "183": "BarcodeEANTest::::placeBarcodeSUPP2Test()",
      "184": "BarcodeEANTest::::placeBarcodeSUPP2Test()",
      "185": "BarcodeEANTest::::placeBarcodeSUPP2Test()",
      "186": "BarcodeEANTest::::placeBarcodeSUPP2Test()",
      "187": "BarcodeEANTest::::placeBarcodeSUPP2Test()",
      "188": "BarcodeEANTest::::placeBarcodeSUPP2Test()",
      "189": "BarcodeEANTest::::placeBarcodeSUPP2Test()",
      "190": "BarcodeEANTest::::placeBarcodeSUPP2Test()",
      "191": "BarcodeEANTest::::placeBarcodeSUPP2Test()",
      "192": "BarcodeEANTest::::placeBarcodeSUPP2Test()",
      "193": "BarcodeEANTest::::placeBarcodeSUPP2Test()",
      "194": "BarcodeEANTest::::placeBarcodeSUPP2Test()",
      "196": "BarcodeEANTest::::placeBarcodeSUPP5Test()",
      "197": "BarcodeEANTest::::placeBarcodeSUPP5Test()",
      "198": "BarcodeEANTest::::placeBarcodeSUPP5Test()",
      "199": "BarcodeEANTest::::placeBarcodeSUPP5Test()",
      "200": "BarcodeEANTest::::placeBarcodeSUPP5Test()",
      "201": "BarcodeEANTest::::placeBarcodeSUPP5Test()",
      "202": "BarcodeEANTest::::placeBarcodeSUPP5Test()",
      "203": "BarcodeEANTest::::placeBarcodeSUPP5Test()",
      "204": "BarcodeEANTest::::placeBarcodeSUPP5Test()",
      "205": "BarcodeEANTest::::placeBarcodeSUPP5Test()",
      "206": "BarcodeEANTest::::placeBarcodeSUPP5Test()",
      "207": "BarcodeEANTest::::placeBarcodeSUPP5Test()",
      "208": "BarcodeEANTest::::placeBarcodeSUPP5Test()",
      "209": "BarcodeEANTest::::placeBarcodeSUPP5Test()",
      "210": "BarcodeEANTest::::placeBarcodeSUPP5Test()",
      "211": "BarcodeEANTest::::placeBarcodeSUPP5Test()",
      "212": "BarcodeEANTest::::placeBarcodeSUPP5Test()",
      "213": "BarcodeEANTest::::placeBarcodeSUPP5Test()",
      "214": "BarcodeEANTest::::placeBarcodeSUPP5Test()",
      "215": "BarcodeEANTest::::placeBarcodeSUPP5Test()",
      "216": "BarcodeEANTest::::placeBarcodeSUPP5Test()"
    },
    "tests": [
      {
        "test_lines": [
          58,
          79
        ],
        "covered_lines": [
          58,
          62,
          66,
          70,
          74,
          78,
          82,
          86,
          151,
          188,
          207,
          244,
          286,
          287,
          296,
          297,
          298,
          299,
          300,
          301,
          302,
          303,
          304,
          305,
          363,
          364,
          365,
          367,
          368,
          369,
          370,
          371,
          372,
          373,
          374,
          375,
          376,
          377,
          378,
          379,
          380,
          382,
          383,
          384,
          385,
          388,
          389,
          390,
          391,
          392,
          393,
          394,
          395,
          396,
          397,
          398,
          399,
          401,
          402,
          403,
          404,
          581,
          582,
          583,
          586,
          589,
          591,
          592,
          593,
          620,
          664,
          665,
          666,
          667,
          668,
          669,
          672,
          673,
          676,
          680,
          681,
          686,
          687,
          689,
          690,
          691,
          713,
          714,
          715,
          716,
          717,
          719,
          720,
          722,
          723,
          724,
          725,
          726,
          728,
          731,
          732,
          734,
          735,
          736,
          737,
          739,
          740,
          741,
          743,
          744,
          745,
          746,
          747,
          748,
          749,
          750,
          752,
          799,
          801
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          81,
          102
        ],
        "covered_lines": [
          58,
          62,
          66,
          70,
          74,
          78,
          82,
          86,
          151,
          188,
          207,
          244,
          286,
          287,
          296,
          297,
          298,
          299,
          300,
          301,
          302,
          303,
          304,
          305,
          414,
          415,
          416,
          418,
          419,
          420,
          421,
          422,
          423,
          424,
          425,
          426,
          427,
          428,
          429,
          431,
          432,
          433,
          434,
          435,
          436,
          437,
          438,
          439,
          440,
          441,
          442,
          444,
          445,
          446,
          447,
          581,
          582,
          583,
          586,
          589,
          597,
          598,
          620,
          664,
          665,
          666,
          667,
          668,
          669,
          672,
          673,
          676,
          686,
          687,
          693,
          694,
          695,
          713,
          714,
          715,
          716,
          717,
          719,
          720,
          722,
          723,
          724,
          725,
          726,
          728,
          731,
          732,
          734,
          735,
          736,
          737,
          739,
          740,
          741,
          754,
          755,
          756,
          757,
          758,
          759,
          761,
          799,
          801
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          104,
          128
        ],
        "covered_lines": [
          58,
          62,
          66,
          70,
          74,
          78,
          82,
          86,
          151,
          188,
          207,
          244,
          286,
          287,
          296,
          297,
          298,
          299,
          300,
          301,
          302,
          303,
          304,
          305,
          363,
          364,
          365,
          367,
          368,
          369,
          370,
          371,
          372,
          373,
          374,
          375,
          376,
          377,
          378,
          379,
          380,
          382,
          383,
          384,
          385,
          388,
          389,
          390,
          391,
          392,
          393,
          394,
          395,
          396,
          397,
          398,
          399,
          401,
          402,
          403,
          404,
          539,
          540,
          541,
          543,
          544,
          545,
          546,
          547,
          548,
          549,
          550,
          551,
          552,
          553,
          555,
          556,
          557,
          558,
          559,
          560,
          561,
          563,
          564,
          565,
          566,
          569,
          581,
          582,
          583,
          584,
          586,
          589,
          591,
          592,
          593,
          615,
          616,
          620,
          664,
          665,
          666,
          667,
          668,
          669,
          670,
          672,
          673,
          676,
          680,
          681,
          686,
          687,
          689,
          690,
          691,
          708,
          709,
          713,
          714,
          715,
          716,
          717,
          719,
          722,
          723,
          724,
          725,
          726,
          728,
          731,
          732,
          734,
          735,
          736,
          737,
          739,
          740,
          741,
          743,
          744,
          745,
          746,
          747,
          748,
          749,
          750,
          752,
          790,
          791,
          792,
          793,
          794,
          795,
          799,
          801
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          130,
          150
        ],
        "covered_lines": [
          58,
          62,
          66,
          70,
          74,
          78,
          82,
          86,
          151,
          188,
          207,
          244,
          286,
          287,
          296,
          297,
          298,
          299,
          300,
          301,
          302,
          303,
          304,
          305,
          363,
          364,
          365,
          367,
          368,
          369,
          370,
          371,
          372,
          373,
          374,
          375,
          376,
          377,
          378,
          379,
          380,
          388,
          389,
          390,
          391,
          392,
          393,
          394,
          395,
          396,
          397,
          398,
          399,
          401,
          402,
          403,
          404,
          581,
          582,
          583,
          586,
          589,
          600,
          601,
          602,
          620,
          664,
          665,
          666,
          667,
          668,
          669,
          672,
          673,
          676,
          680,
          681,
          686,
          687,
          697,
          698,
          699,
          713,
          714,
          715,
          716,
          717,
          719,
          720,
          722,
          723,
          724,
          725,
          726,
          728,
          731,
          732,
          734,
          735,
          736,
          737,
          739,
          740,
          741,
          763,
          764,
          765,
          766,
          767,
          768,
          769,
          770,
          772,
          773,
          774,
          799,
          801
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          152,
          172
        ],
        "covered_lines": [
          58,
          62,
          66,
          70,
          74,
          78,
          82,
          86,
          151,
          188,
          207,
          244,
          286,
          287,
          296,
          297,
          298,
          299,
          300,
          301,
          302,
          303,
          304,
          305,
          457,
          458,
          459,
          461,
          462,
          463,
          464,
          465,
          466,
          467,
          468,
          469,
          470,
          471,
          472,
          473,
          474,
          475,
          477,
          478,
          479,
          480,
          483,
          484,
          485,
          486,
          487,
          488,
          489,
          581,
          582,
          583,
          586,
          589,
          606,
          607,
          608,
          620,
          664,
          665,
          666,
          667,
          668,
          669,
          672,
          673,
          676,
          680,
          681,
          686,
          687,
          701,
          702,
          703,
          713,
          714,
          715,
          716,
          717,
          719,
          720,
          722,
          723,
          724,
          725,
          726,
          728,
          731,
          732,
          734,
          735,
          736,
          737,
          739,
          740,
          741,
          776,
          777,
          778,
          779,
          780,
          781,
          782,
          783,
          785,
          786,
          787,
          799,
          801
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          174,
          194
        ],
        "covered_lines": [
          58,
          62,
          66,
          70,
          74,
          78,
          82,
          86,
          151,
          188,
          207,
          244,
          286,
          287,
          296,
          297,
          298,
          299,
          300,
          301,
          302,
          303,
          304,
          305,
          499,
          500,
          501,
          503,
          504,
          505,
          506,
          507,
          508,
          509,
          510,
          511,
          512,
          513,
          515,
          516,
          517,
          523,
          524,
          525,
          526,
          529,
          581,
          582,
          583,
          586,
          589,
          612,
          613,
          620,
          664,
          665,
          666,
          667,
          668,
          669,
          672,
          673,
          676,
          686,
          687,
          705,
          706,
          713,
          714,
          715,
          716,
          717,
          719,
          720,
          722,
          723,
          724,
          725,
          728,
          731,
          732,
          734,
          735,
          736,
          737,
          739,
          740,
          741,
          790,
          791,
          792,
          793,
          794,
          795,
          799,
          801
        ],
        "label": "<<NO FOCAL METHOD>>"
      },
      {
        "test_lines": [
          196,
          216
        ],
        "covered_lines": [
          58,
          62,
          66,
          70,
          74,
          78,
          82,
          86,
          151,
          188,
          207,
          244,
          286,
          287,
          296,
          297,
          298,
          299,
          300,
          301,
          302,
          303,
          304,
          305,
          539,
          540,
          541,
          543,
          544,
          545,
          546,
          547,
          548,
          549,
          550,
          551,
          552,
          553,
          555,
          556,
          557,
          558,
          559,
          560,
          561,
          563,
          564,
          565,
          566,
          569,
          581,
          582,
          583,
          586,
          589,
          615,
          616,
          620,
          664,
          665,
          666,
          667,
          668,
          669,
          672,
          673,
          676,
          686,
          687,
          708,
          709,
          713,
          714,
          715,
          716,
          717,
          719,
          720,
          722,
          723,
          724,
          725,
          728,
          731,
          732,
          734,
          735,
          736,
          737,
          739,
          740,
          741,
          790,
          791,
          792,
          793,
          794,
          795,
          799,
          801
        ],
        "label": "<<NO FOCAL METHOD>>"
      }
    ]
  }
}