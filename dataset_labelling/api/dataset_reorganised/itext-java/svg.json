{
  "/bernard/dataset_construction/prep/repos/itext-java/svg/src/main/java/com/itextpdf/svg/processors/impl/font/SvgFontProcessor.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.svg.processors.impl.font;\n",
      "\n",
      "import com.itextpdf.io.font.FontProgram;\n",
      "import com.itextpdf.io.font.FontProgramFactory;\n",
      "import com.itextpdf.io.font.PdfEncodings;\n",
      "import com.itextpdf.commons.utils.MessageFormatUtil;\n",
      "import com.itextpdf.layout.font.FontInfo;\n",
      "import com.itextpdf.layout.font.Range;\n",
      "import com.itextpdf.styledxmlparser.logs.StyledXmlParserLogMessageConstant;\n",
      "import com.itextpdf.styledxmlparser.css.font.CssFontFace;\n",
      "import com.itextpdf.styledxmlparser.css.CssFontFaceRule;\n",
      "import com.itextpdf.styledxmlparser.css.ICssResolver;\n",
      "import com.itextpdf.svg.css.impl.SvgStyleResolver;\n",
      "\n",
      "import java.util.Collection;\n",
      "\n",
      "import com.itextpdf.svg.processors.impl.SvgProcessorContext;\n",
      "import org.slf4j.LoggerFactory;\n",
      "\n",
      "/**\n",
      " * Class that processes and add resolved css fonts to the FontProvider\n",
      " */\n",
      "public class SvgFontProcessor {\n",
      "\n",
      "    private SvgProcessorContext context;\n",
      "\n",
      "    public SvgFontProcessor(SvgProcessorContext context) {\n",
      "        this.context = context;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Adds @font-face fonts to the FontProvider.\n",
      "     *\n",
      "     * @param cssResolver the css styles resolver\n",
      "     */\n",
      "    public void addFontFaceFonts(ICssResolver cssResolver) {\n",
      "        if (cssResolver instanceof SvgStyleResolver) {\n",
      "            for (CssFontFaceRule fontFace : ((SvgStyleResolver) cssResolver).getFonts()) {\n",
      "                boolean findSupportedSrc = false;\n",
      "                CssFontFace ff = CssFontFace.create(fontFace.getProperties());\n",
      "                if (ff != null) {\n",
      "                    for (CssFontFace.CssFontFaceSrc src : ff.getSources()) {\n",
      "                        if (createFont(ff.getFontFamily(), src, fontFace.resolveUnicodeRange())) {\n",
      "                            findSupportedSrc = true;\n",
      "                            break;\n",
      "                        }\n",
      "                    }\n",
      "                }\n",
      "                if (!findSupportedSrc) {\n",
      "                    LoggerFactory.getLogger(SvgFontProcessor.class)\n",
      "                            .error(MessageFormatUtil.format(StyledXmlParserLogMessageConstant.UNABLE_TO_RETRIEVE_FONT,\n",
      "                                    fontFace));\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates a font and adds it to the context.\n",
      "     *\n",
      "     * @param fontFamily the font family\n",
      "     * @param src        the source of the font\n",
      "     * @return true, if successful\n",
      "     */\n",
      "    private boolean createFont(String fontFamily, CssFontFace.CssFontFaceSrc src, Range unicodeRange) {\n",
      "        if (!CssFontFace.isSupportedFontFormat(src.getFormat())) {\n",
      "            return false;\n",
      "        } else if (src.isLocal()) { // to method with lazy initialization\n",
      "            Collection<FontInfo> fonts = context.getFontProvider().getFontSet().get(src.getSrc());\n",
      "            if (fonts.size() > 0) {\n",
      "                for (FontInfo fi : fonts) {\n",
      "                    context.addTemporaryFont(fi, fontFamily);//\n",
      "                }\n",
      "                return true;\n",
      "            } else {\n",
      "                return false;\n",
      "            }\n",
      "        } else {\n",
      "            try {\n",
      "                // Cache at resource resolver level only, at font level we will create font in any case.\n",
      "                // The instance of fontProgram will be collected by GC if the is no need in it.\n",
      "                byte[] bytes = context.getResourceResolver().retrieveBytesFromResource(src.getSrc());\n",
      "                if (bytes != null) {\n",
      "                    FontProgram fp = FontProgramFactory.createFont(bytes, false);\n",
      "                    context.addTemporaryFont(fp, PdfEncodings.IDENTITY_H, fontFamily, unicodeRange);\n",
      "                    return true;\n",
      "                }\n",
      "            } catch (Exception ignored) {\n",
      "            }\n",
      "            return false;\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.svg.processors.impl.font;\n",
      "\n",
      "import com.itextpdf.layout.font.FontInfo;\n",
      "import com.itextpdf.styledxmlparser.css.ICssResolver;\n",
      "import com.itextpdf.styledxmlparser.jsoup.nodes.Element;\n",
      "import com.itextpdf.styledxmlparser.jsoup.nodes.TextNode;\n",
      "import com.itextpdf.styledxmlparser.jsoup.parser.Tag;\n",
      "import com.itextpdf.styledxmlparser.node.impl.jsoup.node.JsoupElementNode;\n",
      "import com.itextpdf.styledxmlparser.node.impl.jsoup.node.JsoupTextNode;\n",
      "import com.itextpdf.svg.css.impl.SvgStyleResolver;\n",
      "import com.itextpdf.svg.processors.impl.SvgConverterProperties;\n",
      "import com.itextpdf.svg.processors.impl.SvgProcessorContext;\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.type.UnitTest;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(UnitTest.class)\n",
      "\n",
      "public class SvgFontProcessorTest extends ExtendedITextTest {\n",
      "    @Test\n",
      "    public void addFontFaceFontsTest() {\n",
      "        Element styleTag = new Element(Tag.valueOf(\"style\"), \"\");\n",
      "        TextNode styleContents = new TextNode(\"\\n\" +\n",
      "                \"\\t@font-face{\\n\" +\n",
      "                \"\\t\\tfont-family:Courier;\\n\" +\n",
      "                \"\\t\\tsrc:local(Courier);\\n\" +\n",
      "                \"\\t}\\n\" +\n",
      "                \"  \");\n",
      "        JsoupElementNode jSoupStyle = new JsoupElementNode(styleTag);\n",
      "        jSoupStyle.addChild(new JsoupTextNode(styleContents));\n",
      "        SvgProcessorContext context = new SvgProcessorContext(new SvgConverterProperties());\n",
      "        ICssResolver cssResolver = new SvgStyleResolver(jSoupStyle, context);\n",
      "        SvgFontProcessor svgFontProcessor = new SvgFontProcessor(context);\n",
      "        svgFontProcessor.addFontFaceFonts(cssResolver);\n",
      "        FontInfo info = (FontInfo) context.getTempFonts().getFonts().toArray()[0];\n",
      "        Assert.assertEquals(\"Courier\", info.getFontName());\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {},
    "test_method_lines_dic": {
      "SvgFontProcessorTest::::addFontFaceFontsTest()": [
        44,
        61
      ]
    },
    "reverse_method_lines_dic": {},
    "test_reverse_method_lines_dic": {
      "44": "SvgFontProcessorTest::::addFontFaceFontsTest()",
      "45": "SvgFontProcessorTest::::addFontFaceFontsTest()",
      "46": "SvgFontProcessorTest::::addFontFaceFontsTest()",
      "47": "SvgFontProcessorTest::::addFontFaceFontsTest()",
      "48": "SvgFontProcessorTest::::addFontFaceFontsTest()",
      "49": "SvgFontProcessorTest::::addFontFaceFontsTest()",
      "50": "SvgFontProcessorTest::::addFontFaceFontsTest()",
      "51": "SvgFontProcessorTest::::addFontFaceFontsTest()",
      "52": "SvgFontProcessorTest::::addFontFaceFontsTest()",
      "53": "SvgFontProcessorTest::::addFontFaceFontsTest()",
      "54": "SvgFontProcessorTest::::addFontFaceFontsTest()",
      "55": "SvgFontProcessorTest::::addFontFaceFontsTest()",
      "56": "SvgFontProcessorTest::::addFontFaceFontsTest()",
      "57": "SvgFontProcessorTest::::addFontFaceFontsTest()",
      "58": "SvgFontProcessorTest::::addFontFaceFontsTest()",
      "59": "SvgFontProcessorTest::::addFontFaceFontsTest()",
      "60": "SvgFontProcessorTest::::addFontFaceFontsTest()",
      "61": "SvgFontProcessorTest::::addFontFaceFontsTest()"
    },
    "tests": [
      {
        "test_lines": [
          44,
          61
        ],
        "covered_lines": [
          49,
          50,
          51,
          59,
          60,
          61,
          62,
          63,
          64,
          65,
          66,
          67,
          71,
          76,
          78,
          88,
          90,
          91,
          92,
          93,
          94,
          95,
          96
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/svg/src/main/java/com/itextpdf/svg/renderers/SvgDrawContext.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.svg.renderers;\n",
      "\n",
      "import com.itextpdf.kernel.geom.AffineTransform;\n",
      "import com.itextpdf.kernel.geom.Matrix;\n",
      "import com.itextpdf.kernel.geom.Rectangle;\n",
      "import com.itextpdf.kernel.pdf.canvas.PdfCanvas;\n",
      "import com.itextpdf.layout.font.FontProvider;\n",
      "import com.itextpdf.layout.font.FontSet;\n",
      "import com.itextpdf.styledxmlparser.resolver.font.BasicFontProvider;\n",
      "import com.itextpdf.styledxmlparser.resolver.resource.ResourceResolver;\n",
      "import com.itextpdf.svg.css.SvgCssContext;\n",
      "import com.itextpdf.svg.exceptions.SvgExceptionMessageConstant;\n",
      "import com.itextpdf.svg.exceptions.SvgProcessingException;\n",
      "\n",
      "import java.util.Deque;\n",
      "import java.util.HashMap;\n",
      "import java.util.LinkedList;\n",
      "import java.util.Map;\n",
      "import java.util.Stack;\n",
      "\n",
      "/**\n",
      " * The SvgDrawContext keeps a stack of {@link PdfCanvas} instances, which\n",
      " * represent all levels of XObjects that are added to the root canvas.\n",
      " */\n",
      "public class SvgDrawContext {\n",
      "\n",
      "    private final Map<String, ISvgNodeRenderer> namedObjects = new HashMap<>();\n",
      "    private final Deque<PdfCanvas> canvases = new LinkedList<>();\n",
      "    private final Deque<Rectangle> viewports = new LinkedList<>();\n",
      "    private final Stack<String> useIds = new Stack<>();\n",
      "    private final Stack<String> patternIds = new Stack<>();\n",
      "    private final ResourceResolver resourceResolver;\n",
      "    private final FontProvider fontProvider;\n",
      "    private FontSet tempFonts;\n",
      "    private SvgCssContext cssContext;\n",
      "\n",
      "    private AffineTransform lastTextTransform = new AffineTransform();\n",
      "    private float[] textMove = new float[]{0.0f, 0.0f};\n",
      "    private float[] previousElementTextMove;\n",
      "\n",
      "    /**\n",
      "     * Create an instance of the context that is used to store information when converting SVG.\n",
      "     *\n",
      "     * @param resourceResolver instance of {@link ResourceResolver}\n",
      "     * @param fontProvider instance of {@link FontProvider}\n",
      "     */\n",
      "    public SvgDrawContext(ResourceResolver resourceResolver, FontProvider fontProvider) {\n",
      "        if (resourceResolver == null) {\n",
      "            resourceResolver = new ResourceResolver(null);\n",
      "        }\n",
      "        this.resourceResolver = resourceResolver;\n",
      "        if (fontProvider == null) {\n",
      "            fontProvider = new BasicFontProvider();\n",
      "        }\n",
      "        this.fontProvider = fontProvider;\n",
      "        cssContext = new SvgCssContext();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Retrieves the current top of the stack, without modifying the stack.\n",
      "     *\n",
      "     * @return the current canvas that can be used for drawing operations.\n",
      "     */\n",
      "    public PdfCanvas getCurrentCanvas() {\n",
      "        return canvases.getFirst();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Retrieves the current top of the stack, thereby taking the current item\n",
      "     * off the stack.\n",
      "     *\n",
      "     * @return the current canvas that can be used for drawing operations.\n",
      "     */\n",
      "    public PdfCanvas popCanvas() {\n",
      "        PdfCanvas canvas = canvases.getFirst();\n",
      "        canvases.removeFirst();\n",
      "        return canvas;\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * Adds a {@link PdfCanvas} to the stack (by definition its top), for use in\n",
      "     * drawing operations.\n",
      "     *\n",
      "     * @param canvas the new top of the stack\n",
      "     */\n",
      "    public void pushCanvas(PdfCanvas canvas) {\n",
      "        canvases.addFirst(canvas);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Get the current size of the stack, signifying the nesting level of the\n",
      "     * XObjects.\n",
      "     *\n",
      "     * @return the current size of the stack.\n",
      "     */\n",
      "    public int size() {\n",
      "        return canvases.size();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Adds a viewbox to the context.\n",
      "     *\n",
      "     * @param viewPort rectangle representing the current viewbox\n",
      "     */\n",
      "    public void addViewPort(Rectangle viewPort) {\n",
      "        viewports.addFirst(viewPort);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Get the current viewbox.\n",
      "     *\n",
      "     * @return the viewbox as it is currently set\n",
      "     */\n",
      "    public Rectangle getCurrentViewPort() {\n",
      "        return viewports.getFirst();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Get the viewbox which is the root viewport for the current document.\n",
      "     *\n",
      "     * @return root viewbox.\n",
      "     */\n",
      "    public Rectangle getRootViewPort() {\n",
      "        return viewports.getLast();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Remove the currently set view box.\n",
      "     */\n",
      "    public void removeCurrentViewPort() {\n",
      "        if (this.viewports.size() > 0) {\n",
      "            viewports.removeFirst();\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Adds a named object to the draw context. These objects can then be referenced from a different tag.\n",
      "     *\n",
      "     * @param name        name of the object\n",
      "     * @param namedObject object to be referenced\n",
      "     */\n",
      "    public void addNamedObject(String name, ISvgNodeRenderer namedObject) {\n",
      "        if (namedObject == null) {\n",
      "            throw new SvgProcessingException(SvgExceptionMessageConstant.NAMED_OBJECT_NULL);\n",
      "        }\n",
      "\n",
      "        if (name == null || name.isEmpty()) {\n",
      "            throw new SvgProcessingException(SvgExceptionMessageConstant.NAMED_OBJECT_NAME_NULL_OR_EMPTY);\n",
      "        }\n",
      "\n",
      "        if (!this.namedObjects.containsKey(name)) {\n",
      "            this.namedObjects.put(name, namedObject);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Get a named object based on its name. If the name isn't listed, this method will return null.\n",
      "     *\n",
      "     * @param name name of the object you want to reference\n",
      "     * @return the referenced object\n",
      "     */\n",
      "    public ISvgNodeRenderer getNamedObject(String name) {\n",
      "        return this.namedObjects.get(name);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets the ResourceResolver to be used during the drawing operations.\n",
      "     *\n",
      "     * @return resource resolver instance\n",
      "     */\n",
      "    public ResourceResolver getResourceResolver() {\n",
      "        return resourceResolver;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * * Adds a number of named object to the draw context. These objects can then be referenced from a different tag.\n",
      "     *\n",
      "     * @param namedObjects Map containing the named objects keyed to their ID strings\n",
      "     */\n",
      "    public void addNamedObjects(Map<String, ISvgNodeRenderer> namedObjects) {\n",
      "        this.namedObjects.putAll(namedObjects);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets the FontProvider to be used during the drawing operations.\n",
      "     *\n",
      "     * @return font provider instance\n",
      "     */\n",
      "    public FontProvider getFontProvider() {\n",
      "        return fontProvider;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets list of temporary fonts from @font-face.\n",
      "     *\n",
      "     * @return font set instance\n",
      "     */\n",
      "    public FontSet getTempFonts() {\n",
      "        return tempFonts;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Sets the FontSet.\n",
      "     *\n",
      "     * @param tempFonts font set to be used during drawing operations\n",
      "     */\n",
      "    public void setTempFonts(FontSet tempFonts) {\n",
      "        this.tempFonts = tempFonts;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Returns true when this id has been used before\n",
      "     *\n",
      "     * @param elementId element id to check\n",
      "     * @return true if id has been encountered before through a use element\n",
      "     */\n",
      "    public boolean isIdUsedByUseTagBefore(String elementId) {\n",
      "        return this.useIds.contains(elementId);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Adds an ID that has been referenced by a use element.\n",
      "     *\n",
      "     * @param elementId referenced element ID\n",
      "     */\n",
      "    public void addUsedId(String elementId) {\n",
      "        this.useIds.push(elementId);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Removes an ID that has been referenced by a use element.\n",
      "     *\n",
      "     * @param elementId referenced element ID\n",
      "     */\n",
      "    public void removeUsedId(String elementId) {\n",
      "        this.useIds.pop();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Get the text transformation that was last applied\n",
      "     * @return {@link AffineTransform} representing the last text transformation\n",
      "     */\n",
      "    public AffineTransform getLastTextTransform() {\n",
      "        if (lastTextTransform == null) {\n",
      "            lastTextTransform = new AffineTransform();\n",
      "        }\n",
      "        return this.lastTextTransform;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Set the last text transformation\n",
      "     * @param newTransform last text transformation\n",
      "     */\n",
      "    public void setLastTextTransform(AffineTransform newTransform) {\n",
      "        this.lastTextTransform = newTransform;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Get the stored current text move\n",
      "     * @return [horizontal text move, vertical text move]\n",
      "     */\n",
      "    public float[] getTextMove() {\n",
      "        return textMove;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Reset the stored text move to [0f,0f]\n",
      "     */\n",
      "    public void resetTextMove() {\n",
      "        textMove = new float[]{0.0f, 0.0f};\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Increment the stored text move\n",
      "     * @param additionalMoveX horizontal value to add\n",
      "     * @param additionalMoveY vertical value to add\n",
      "     */\n",
      "    public void addTextMove(float additionalMoveX, float additionalMoveY) {\n",
      "        textMove[0] += additionalMoveX;\n",
      "        textMove[1] += additionalMoveY;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Get the current canvas transformation\n",
      "     * @return the {@link AffineTransform} representing the current canvas transformation\n",
      "     */\n",
      "    public AffineTransform getCurrentCanvasTransform() {\n",
      "        Matrix currentTransform = getCurrentCanvas().getGraphicsState().getCtm();\n",
      "        if (currentTransform != null) {\n",
      "            return new AffineTransform(currentTransform.get(0), currentTransform.get(1),\n",
      "                    currentTransform.get(3), currentTransform.get(4), currentTransform.get(6), currentTransform.get(7));\n",
      "        }\n",
      "        return new AffineTransform();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets the SVG CSS context.\n",
      "     *\n",
      "     * @return the SVG CSS context\n",
      "     */\n",
      "    public SvgCssContext getCssContext() {\n",
      "        return cssContext;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Sets the SVG CSS context.\n",
      "     *\n",
      "     * @param cssContext the SVG CSS context\n",
      "     */\n",
      "    public void setCssContext(SvgCssContext cssContext) {\n",
      "        this.cssContext = cssContext;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Add pattern id to stack. Check if the id is already in the stack.\n",
      "     * If it is, then return {@code false} and not add, if it is not - add and return {@code true}.\n",
      "     *\n",
      "     * @param patternId pattern id\n",
      "     * @return {@code true} if pattern id was not on the stack and was pushed; {@code false} if it is on the stack\n",
      "     */\n",
      "    public boolean pushPatternId(String patternId) {\n",
      "        if (this.patternIds.contains(patternId)) {\n",
      "            return false;\n",
      "        } else {\n",
      "            this.patternIds.push(patternId);\n",
      "            return true;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Pops the last template id from the stack.\n",
      "     */\n",
      "    public void popPatternId() {\n",
      "        this.patternIds.pop();\n",
      "    }\n",
      "\n",
      "    public void setPreviousElementTextMove(float[] previousElementTextMove) {\n",
      "        this.previousElementTextMove = previousElementTextMove;\n",
      "    }\n",
      "\n",
      "    public float[] getPreviousElementTextMove() {\n",
      "        return previousElementTextMove;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.svg.renderers;\n",
      "\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "import com.itextpdf.kernel.pdf.PdfWriter;\n",
      "import com.itextpdf.kernel.pdf.canvas.PdfCanvas;\n",
      "import com.itextpdf.svg.dummy.renderers.impl.DummySvgNodeRenderer;\n",
      "import com.itextpdf.svg.exceptions.SvgExceptionMessageConstant;\n",
      "import com.itextpdf.svg.exceptions.SvgProcessingException;\n",
      "import com.itextpdf.svg.renderers.impl.GroupSvgNodeRenderer;\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.type.UnitTest;\n",
      "\n",
      "import java.io.ByteArrayOutputStream;\n",
      "import java.util.HashMap;\n",
      "import java.util.Map;\n",
      "\n",
      "import java.util.NoSuchElementException;\n",
      "import org.junit.After;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Before;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(UnitTest.class)\n",
      "public class SvgDrawContextTest extends ExtendedITextTest {\n",
      "\n",
      "    private PdfDocument tokenDoc;\n",
      "    private PdfCanvas page1, page2;\n",
      "    private SvgDrawContext context;\n",
      "\n",
      "    @Before\n",
      "    public void setUp() {\n",
      "        tokenDoc = new PdfDocument(new PdfWriter(new ByteArrayOutputStream()));\n",
      "        page1 = new PdfCanvas(tokenDoc.addNewPage());\n",
      "        page2 = new PdfCanvas(tokenDoc.addNewPage());\n",
      "        context = new SvgDrawContext(null, null);\n",
      "    }\n",
      "\n",
      "    @After\n",
      "    public void tearDown() {\n",
      "        // release all resources\n",
      "        tokenDoc.close();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void drawContextEmptyDequeGetFirstTest() {\n",
      "        Assert.assertThrows(NoSuchElementException.class, () -> context.getCurrentCanvas());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void drawContextEmptyDequePopTest() {\n",
      "        Assert.assertThrows(NoSuchElementException.class, () -> context.popCanvas());\n",
      "    }\n",
      "    \n",
      "    @Test\n",
      "    public void drawContextEmptyStackCountTest() {\n",
      "        Assert.assertEquals(0, context.size());\n",
      "    }\n",
      "    \n",
      "    @Test\n",
      "    public void drawContextPushCountTest() {\n",
      "        context.pushCanvas(page1);\n",
      "        Assert.assertEquals(1, context.size());\n",
      "    }\n",
      "    \n",
      "    @Test\n",
      "    public void drawContextPushPeekTest() {\n",
      "        context.pushCanvas(page1);\n",
      "        Assert.assertEquals(page1, context.getCurrentCanvas());\n",
      "    }\n",
      "    \n",
      "    @Test\n",
      "    public void drawContextPushPopCountTest() {\n",
      "        context.pushCanvas(page1);\n",
      "        context.popCanvas();\n",
      "        Assert.assertEquals(0, context.size());\n",
      "    }\n",
      "    \n",
      "    @Test\n",
      "    public void drawContextPushPopTest() {\n",
      "        context.pushCanvas(page1);\n",
      "        Assert.assertEquals(page1, context.popCanvas());\n",
      "    }\n",
      "    \n",
      "    @Test\n",
      "    public void drawContextPushTwiceCountTest() {\n",
      "        context.pushCanvas(page1);\n",
      "        context.pushCanvas(page2);\n",
      "        Assert.assertEquals(2, context.size());\n",
      "    }\n",
      "    \n",
      "    @Test\n",
      "    public void drawContextPushTwicePeekTest() {\n",
      "        context.pushCanvas(page1);\n",
      "        context.pushCanvas(page2);\n",
      "        Assert.assertEquals(page2, context.getCurrentCanvas());\n",
      "        Assert.assertEquals(2, context.size());\n",
      "    }\n",
      "    \n",
      "    @Test\n",
      "    public void drawContextPushTwicePopTest() {\n",
      "        context.pushCanvas(page1);\n",
      "        context.pushCanvas(page2);\n",
      "        Assert.assertEquals(page2, context.popCanvas());\n",
      "        Assert.assertEquals(1, context.size());\n",
      "        Assert.assertEquals(page1, context.popCanvas());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void addISvgNodeRender() {\n",
      "        String name = \"expected\";\n",
      "        ISvgNodeRenderer expected = new GroupSvgNodeRenderer();\n",
      "        this.context.addNamedObject(name, expected);\n",
      "        Object actual = this.context.getNamedObject(name);\n",
      "\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void addNullToNamedObjects() {\n",
      "        String name = \"expected\";\n",
      "\n",
      "        Exception e = Assert.assertThrows(SvgProcessingException.class,\n",
      "                () -> this.context.addNamedObject(name, null)\n",
      "        );\n",
      "        Assert.assertEquals(SvgExceptionMessageConstant.NAMED_OBJECT_NULL, e.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void addNamedObjectWithNullName() {\n",
      "        ISvgNodeRenderer expected = new DummySvgNodeRenderer();\n",
      "\n",
      "        Exception e = Assert.assertThrows(SvgProcessingException.class,\n",
      "                () -> this.context.addNamedObject(null, expected)\n",
      "        );\n",
      "        Assert.assertEquals(SvgExceptionMessageConstant.NAMED_OBJECT_NAME_NULL_OR_EMPTY, e.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void addNamedObjectWithEmptyName() {\n",
      "        ISvgNodeRenderer expected = new DummySvgNodeRenderer();\n",
      "\n",
      "        Exception e = Assert.assertThrows(SvgProcessingException.class,\n",
      "                () -> this.context.addNamedObject(\"\", expected)\n",
      "        );\n",
      "        Assert.assertEquals(SvgExceptionMessageConstant.NAMED_OBJECT_NAME_NULL_OR_EMPTY, e.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void addNamedRenderer() {\n",
      "        ISvgNodeRenderer expected = new DummySvgNodeRenderer();\n",
      "        String dummyName = \"dummy\";\n",
      "        this.context.addNamedObject(dummyName, expected);\n",
      "        Object actual = this.context.getNamedObject(dummyName);\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void addNamedObjects(){\n",
      "        ISvgNodeRenderer expectedOne = new DummySvgNodeRenderer();\n",
      "        ISvgNodeRenderer expectedTwo = new DummySvgNodeRenderer();\n",
      "        ISvgNodeRenderer expectedThree = new DummySvgNodeRenderer();\n",
      "        String dummyNameOne = \"Ed\";\n",
      "        String dummyNameTwo=\"Edd\";\n",
      "        String dummyNameThree=\"Eddy\";\n",
      "        Map<String,ISvgNodeRenderer> toAdd = new HashMap<>();\n",
      "        toAdd.put(dummyNameOne,expectedOne);\n",
      "        toAdd.put(dummyNameTwo,expectedTwo);\n",
      "        toAdd.put(dummyNameThree,expectedThree);\n",
      "        this.context.addNamedObjects(toAdd);\n",
      "        Object actualThree = this.context.getNamedObject(dummyNameThree);\n",
      "        Object actualTwo = this.context.getNamedObject(dummyNameTwo);\n",
      "        Object actualOne = this.context.getNamedObject(dummyNameOne);\n",
      "        Assert.assertEquals(expectedOne, actualOne);\n",
      "        Assert.assertEquals(expectedTwo, actualTwo);\n",
      "        Assert.assertEquals(expectedThree, actualThree);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void addNamedObjectAndTryToAddDuplicate(){\n",
      "        ISvgNodeRenderer expectedOne = new DummySvgNodeRenderer();\n",
      "        ISvgNodeRenderer expectedTwo = new DummySvgNodeRenderer();\n",
      "        String dummyName = \"Ed\";\n",
      "\n",
      "        context.addNamedObject(dummyName,expectedOne);\n",
      "        context.addNamedObject(dummyName,expectedTwo);\n",
      "        Object actual = context.getNamedObject(dummyName);\n",
      "        Assert.assertEquals(expectedOne,actual);\n",
      "\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "SvgDrawContext::::getCurrentCanvas()": [
        86,
        88
      ],
      "SvgDrawContext::::popCanvas()": [
        96,
        100
      ],
      "SvgDrawContext::::size()": [
        119,
        121
      ],
      "SvgDrawContext::::getCurrentViewPort()": [
        137,
        139
      ],
      "SvgDrawContext::::getRootViewPort()": [
        146,
        148
      ],
      "SvgDrawContext::::removeCurrentViewPort()": [
        153,
        157
      ],
      "SvgDrawContext::::addNamedObject(java.lang.String,com.itextpdf.svg.renderers.ISvgNodeRenderer)": [
        165,
        177
      ],
      "SvgDrawContext::::getNamedObject(java.lang.String)": [
        185,
        187
      ],
      "SvgDrawContext::::getResourceResolver()": [
        194,
        196
      ],
      "SvgDrawContext::::addNamedObjects(java.util.Map<java.lang.String, com.itextpdf.svg.renderers.ISvgNodeRenderer>)": [
        203,
        205
      ],
      "SvgDrawContext::::getFontProvider()": [
        212,
        214
      ],
      "SvgDrawContext::::getTempFonts()": [
        221,
        223
      ],
      "SvgDrawContext::::isIdUsedByUseTagBefore(java.lang.String)": [
        240,
        242
      ],
      "SvgDrawContext::::addUsedId(java.lang.String)": [
        249,
        251
      ],
      "SvgDrawContext::::removeUsedId(java.lang.String)": [
        258,
        260
      ],
      "SvgDrawContext::::getLastTextTransform()": [
        266,
        271
      ],
      "SvgDrawContext::::getTextMove()": [
        285,
        287
      ],
      "SvgDrawContext::::resetTextMove()": [
        292,
        294
      ],
      "SvgDrawContext::::addTextMove(float,float)": [
        301,
        304
      ],
      "SvgDrawContext::::getCurrentCanvasTransform()": [
        310,
        317
      ],
      "SvgDrawContext::::getCssContext()": [
        324,
        326
      ],
      "SvgDrawContext::::setCssContext(com.itextpdf.svg.css.SvgCssContext)": [
        333,
        335
      ],
      "SvgDrawContext::::pushPatternId(java.lang.String)": [
        344,
        351
      ],
      "SvgDrawContext::::popPatternId()": [
        356,
        358
      ],
      "SvgDrawContext::::setPreviousElementTextMove(float[])": [
        360,
        362
      ],
      "SvgDrawContext::::getPreviousElementTextMove()": [
        364,
        366
      ]
    },
    "test_method_lines_dic": {
      "SvgDrawContextTest::::setUp()": [
        53,
        59
      ],
      "SvgDrawContextTest::::tearDown()": [
        61,
        65
      ],
      "SvgDrawContextTest::::drawContextEmptyDequeGetFirstTest()": [
        67,
        70
      ],
      "SvgDrawContextTest::::drawContextEmptyDequePopTest()": [
        72,
        75
      ],
      "SvgDrawContextTest::::drawContextEmptyStackCountTest()": [
        77,
        80
      ],
      "SvgDrawContextTest::::drawContextPushCountTest()": [
        82,
        86
      ],
      "SvgDrawContextTest::::drawContextPushPeekTest()": [
        88,
        92
      ],
      "SvgDrawContextTest::::drawContextPushPopCountTest()": [
        94,
        99
      ],
      "SvgDrawContextTest::::drawContextPushPopTest()": [
        101,
        105
      ],
      "SvgDrawContextTest::::drawContextPushTwiceCountTest()": [
        107,
        112
      ],
      "SvgDrawContextTest::::drawContextPushTwicePeekTest()": [
        114,
        120
      ],
      "SvgDrawContextTest::::drawContextPushTwicePopTest()": [
        122,
        129
      ],
      "SvgDrawContextTest::::addISvgNodeRender()": [
        131,
        139
      ],
      "SvgDrawContextTest::::addNullToNamedObjects()": [
        141,
        149
      ],
      "SvgDrawContextTest::::addNamedObjectWithNullName()": [
        151,
        159
      ],
      "SvgDrawContextTest::::addNamedObjectWithEmptyName()": [
        161,
        169
      ],
      "SvgDrawContextTest::::addNamedRenderer()": [
        171,
        178
      ],
      "SvgDrawContextTest::::addNamedObjects()": [
        180,
        199
      ],
      "SvgDrawContextTest::::addNamedObjectAndTryToAddDuplicate()": [
        201,
        212
      ]
    },
    "reverse_method_lines_dic": {
      "86": "SvgDrawContext::::getCurrentCanvas()",
      "87": "SvgDrawContext::::getCurrentCanvas()",
      "88": "SvgDrawContext::::getCurrentCanvas()",
      "96": "SvgDrawContext::::popCanvas()",
      "97": "SvgDrawContext::::popCanvas()",
      "98": "SvgDrawContext::::popCanvas()",
      "99": "SvgDrawContext::::popCanvas()",
      "100": "SvgDrawContext::::popCanvas()",
      "119": "SvgDrawContext::::size()",
      "120": "SvgDrawContext::::size()",
      "121": "SvgDrawContext::::size()",
      "137": "SvgDrawContext::::getCurrentViewPort()",
      "138": "SvgDrawContext::::getCurrentViewPort()",
      "139": "SvgDrawContext::::getCurrentViewPort()",
      "146": "SvgDrawContext::::getRootViewPort()",
      "147": "SvgDrawContext::::getRootViewPort()",
      "148": "SvgDrawContext::::getRootViewPort()",
      "153": "SvgDrawContext::::removeCurrentViewPort()",
      "154": "SvgDrawContext::::removeCurrentViewPort()",
      "155": "SvgDrawContext::::removeCurrentViewPort()",
      "156": "SvgDrawContext::::removeCurrentViewPort()",
      "157": "SvgDrawContext::::removeCurrentViewPort()",
      "165": "SvgDrawContext::::addNamedObject(java.lang.String,com.itextpdf.svg.renderers.ISvgNodeRenderer)",
      "166": "SvgDrawContext::::addNamedObject(java.lang.String,com.itextpdf.svg.renderers.ISvgNodeRenderer)",
      "167": "SvgDrawContext::::addNamedObject(java.lang.String,com.itextpdf.svg.renderers.ISvgNodeRenderer)",
      "168": "SvgDrawContext::::addNamedObject(java.lang.String,com.itextpdf.svg.renderers.ISvgNodeRenderer)",
      "169": "SvgDrawContext::::addNamedObject(java.lang.String,com.itextpdf.svg.renderers.ISvgNodeRenderer)",
      "170": "SvgDrawContext::::addNamedObject(java.lang.String,com.itextpdf.svg.renderers.ISvgNodeRenderer)",
      "171": "SvgDrawContext::::addNamedObject(java.lang.String,com.itextpdf.svg.renderers.ISvgNodeRenderer)",
      "172": "SvgDrawContext::::addNamedObject(java.lang.String,com.itextpdf.svg.renderers.ISvgNodeRenderer)",
      "173": "SvgDrawContext::::addNamedObject(java.lang.String,com.itextpdf.svg.renderers.ISvgNodeRenderer)",
      "174": "SvgDrawContext::::addNamedObject(java.lang.String,com.itextpdf.svg.renderers.ISvgNodeRenderer)",
      "175": "SvgDrawContext::::addNamedObject(java.lang.String,com.itextpdf.svg.renderers.ISvgNodeRenderer)",
      "176": "SvgDrawContext::::addNamedObject(java.lang.String,com.itextpdf.svg.renderers.ISvgNodeRenderer)",
      "177": "SvgDrawContext::::addNamedObject(java.lang.String,com.itextpdf.svg.renderers.ISvgNodeRenderer)",
      "185": "SvgDrawContext::::getNamedObject(java.lang.String)",
      "186": "SvgDrawContext::::getNamedObject(java.lang.String)",
      "187": "SvgDrawContext::::getNamedObject(java.lang.String)",
      "194": "SvgDrawContext::::getResourceResolver()",
      "195": "SvgDrawContext::::getResourceResolver()",
      "196": "SvgDrawContext::::getResourceResolver()",
      "203": "SvgDrawContext::::addNamedObjects(java.util.Map<java.lang.String, com.itextpdf.svg.renderers.ISvgNodeRenderer>)",
      "204": "SvgDrawContext::::addNamedObjects(java.util.Map<java.lang.String, com.itextpdf.svg.renderers.ISvgNodeRenderer>)",
      "205": "SvgDrawContext::::addNamedObjects(java.util.Map<java.lang.String, com.itextpdf.svg.renderers.ISvgNodeRenderer>)",
      "212": "SvgDrawContext::::getFontProvider()",
      "213": "SvgDrawContext::::getFontProvider()",
      "214": "SvgDrawContext::::getFontProvider()",
      "221": "SvgDrawContext::::getTempFonts()",
      "222": "SvgDrawContext::::getTempFonts()",
      "223": "SvgDrawContext::::getTempFonts()",
      "240": "SvgDrawContext::::isIdUsedByUseTagBefore(java.lang.String)",
      "241": "SvgDrawContext::::isIdUsedByUseTagBefore(java.lang.String)",
      "242": "SvgDrawContext::::isIdUsedByUseTagBefore(java.lang.String)",
      "249": "SvgDrawContext::::addUsedId(java.lang.String)",
      "250": "SvgDrawContext::::addUsedId(java.lang.String)",
      "251": "SvgDrawContext::::addUsedId(java.lang.String)",
      "258": "SvgDrawContext::::removeUsedId(java.lang.String)",
      "259": "SvgDrawContext::::removeUsedId(java.lang.String)",
      "260": "SvgDrawContext::::removeUsedId(java.lang.String)",
      "266": "SvgDrawContext::::getLastTextTransform()",
      "267": "SvgDrawContext::::getLastTextTransform()",
      "268": "SvgDrawContext::::getLastTextTransform()",
      "269": "SvgDrawContext::::getLastTextTransform()",
      "270": "SvgDrawContext::::getLastTextTransform()",
      "271": "SvgDrawContext::::getLastTextTransform()",
      "285": "SvgDrawContext::::getTextMove()",
      "286": "SvgDrawContext::::getTextMove()",
      "287": "SvgDrawContext::::getTextMove()",
      "292": "SvgDrawContext::::resetTextMove()",
      "293": "SvgDrawContext::::resetTextMove()",
      "294": "SvgDrawContext::::resetTextMove()",
      "301": "SvgDrawContext::::addTextMove(float,float)",
      "302": "SvgDrawContext::::addTextMove(float,float)",
      "303": "SvgDrawContext::::addTextMove(float,float)",
      "304": "SvgDrawContext::::addTextMove(float,float)",
      "310": "SvgDrawContext::::getCurrentCanvasTransform()",
      "311": "SvgDrawContext::::getCurrentCanvasTransform()",
      "312": "SvgDrawContext::::getCurrentCanvasTransform()",
      "313": "SvgDrawContext::::getCurrentCanvasTransform()",
      "314": "SvgDrawContext::::getCurrentCanvasTransform()",
      "315": "SvgDrawContext::::getCurrentCanvasTransform()",
      "316": "SvgDrawContext::::getCurrentCanvasTransform()",
      "317": "SvgDrawContext::::getCurrentCanvasTransform()",
      "324": "SvgDrawContext::::getCssContext()",
      "325": "SvgDrawContext::::getCssContext()",
      "326": "SvgDrawContext::::getCssContext()",
      "333": "SvgDrawContext::::setCssContext(com.itextpdf.svg.css.SvgCssContext)",
      "334": "SvgDrawContext::::setCssContext(com.itextpdf.svg.css.SvgCssContext)",
      "335": "SvgDrawContext::::setCssContext(com.itextpdf.svg.css.SvgCssContext)",
      "344": "SvgDrawContext::::pushPatternId(java.lang.String)",
      "345": "SvgDrawContext::::pushPatternId(java.lang.String)",
      "346": "SvgDrawContext::::pushPatternId(java.lang.String)",
      "347": "SvgDrawContext::::pushPatternId(java.lang.String)",
      "348": "SvgDrawContext::::pushPatternId(java.lang.String)",
      "349": "SvgDrawContext::::pushPatternId(java.lang.String)",
      "350": "SvgDrawContext::::pushPatternId(java.lang.String)",
      "351": "SvgDrawContext::::pushPatternId(java.lang.String)",
      "356": "SvgDrawContext::::popPatternId()",
      "357": "SvgDrawContext::::popPatternId()",
      "358": "SvgDrawContext::::popPatternId()",
      "360": "SvgDrawContext::::setPreviousElementTextMove(float[])",
      "361": "SvgDrawContext::::setPreviousElementTextMove(float[])",
      "362": "SvgDrawContext::::setPreviousElementTextMove(float[])",
      "364": "SvgDrawContext::::getPreviousElementTextMove()",
      "365": "SvgDrawContext::::getPreviousElementTextMove()",
      "366": "SvgDrawContext::::getPreviousElementTextMove()"
    },
    "test_reverse_method_lines_dic": {
      "53": "SvgDrawContextTest::::setUp()",
      "54": "SvgDrawContextTest::::setUp()",
      "55": "SvgDrawContextTest::::setUp()",
      "56": "SvgDrawContextTest::::setUp()",
      "57": "SvgDrawContextTest::::setUp()",
      "58": "SvgDrawContextTest::::setUp()",
      "59": "SvgDrawContextTest::::setUp()",
      "61": "SvgDrawContextTest::::tearDown()",
      "62": "SvgDrawContextTest::::tearDown()",
      "63": "SvgDrawContextTest::::tearDown()",
      "64": "SvgDrawContextTest::::tearDown()",
      "65": "SvgDrawContextTest::::tearDown()",
      "67": "SvgDrawContextTest::::drawContextEmptyDequeGetFirstTest()",
      "68": "SvgDrawContextTest::::drawContextEmptyDequeGetFirstTest()",
      "69": "SvgDrawContextTest::::drawContextEmptyDequeGetFirstTest()",
      "70": "SvgDrawContextTest::::drawContextEmptyDequeGetFirstTest()",
      "72": "SvgDrawContextTest::::drawContextEmptyDequePopTest()",
      "73": "SvgDrawContextTest::::drawContextEmptyDequePopTest()",
      "74": "SvgDrawContextTest::::drawContextEmptyDequePopTest()",
      "75": "SvgDrawContextTest::::drawContextEmptyDequePopTest()",
      "77": "SvgDrawContextTest::::drawContextEmptyStackCountTest()",
      "78": "SvgDrawContextTest::::drawContextEmptyStackCountTest()",
      "79": "SvgDrawContextTest::::drawContextEmptyStackCountTest()",
      "80": "SvgDrawContextTest::::drawContextEmptyStackCountTest()",
      "82": "SvgDrawContextTest::::drawContextPushCountTest()",
      "83": "SvgDrawContextTest::::drawContextPushCountTest()",
      "84": "SvgDrawContextTest::::drawContextPushCountTest()",
      "85": "SvgDrawContextTest::::drawContextPushCountTest()",
      "86": "SvgDrawContextTest::::drawContextPushCountTest()",
      "88": "SvgDrawContextTest::::drawContextPushPeekTest()",
      "89": "SvgDrawContextTest::::drawContextPushPeekTest()",
      "90": "SvgDrawContextTest::::drawContextPushPeekTest()",
      "91": "SvgDrawContextTest::::drawContextPushPeekTest()",
      "92": "SvgDrawContextTest::::drawContextPushPeekTest()",
      "94": "SvgDrawContextTest::::drawContextPushPopCountTest()",
      "95": "SvgDrawContextTest::::drawContextPushPopCountTest()",
      "96": "SvgDrawContextTest::::drawContextPushPopCountTest()",
      "97": "SvgDrawContextTest::::drawContextPushPopCountTest()",
      "98": "SvgDrawContextTest::::drawContextPushPopCountTest()",
      "99": "SvgDrawContextTest::::drawContextPushPopCountTest()",
      "101": "SvgDrawContextTest::::drawContextPushPopTest()",
      "102": "SvgDrawContextTest::::drawContextPushPopTest()",
      "103": "SvgDrawContextTest::::drawContextPushPopTest()",
      "104": "SvgDrawContextTest::::drawContextPushPopTest()",
      "105": "SvgDrawContextTest::::drawContextPushPopTest()",
      "107": "SvgDrawContextTest::::drawContextPushTwiceCountTest()",
      "108": "SvgDrawContextTest::::drawContextPushTwiceCountTest()",
      "109": "SvgDrawContextTest::::drawContextPushTwiceCountTest()",
      "110": "SvgDrawContextTest::::drawContextPushTwiceCountTest()",
      "111": "SvgDrawContextTest::::drawContextPushTwiceCountTest()",
      "112": "SvgDrawContextTest::::drawContextPushTwiceCountTest()",
      "114": "SvgDrawContextTest::::drawContextPushTwicePeekTest()",
      "115": "SvgDrawContextTest::::drawContextPushTwicePeekTest()",
      "116": "SvgDrawContextTest::::drawContextPushTwicePeekTest()",
      "117": "SvgDrawContextTest::::drawContextPushTwicePeekTest()",
      "118": "SvgDrawContextTest::::drawContextPushTwicePeekTest()",
      "119": "SvgDrawContextTest::::drawContextPushTwicePeekTest()",
      "120": "SvgDrawContextTest::::drawContextPushTwicePeekTest()",
      "122": "SvgDrawContextTest::::drawContextPushTwicePopTest()",
      "123": "SvgDrawContextTest::::drawContextPushTwicePopTest()",
      "124": "SvgDrawContextTest::::drawContextPushTwicePopTest()",
      "125": "SvgDrawContextTest::::drawContextPushTwicePopTest()",
      "126": "SvgDrawContextTest::::drawContextPushTwicePopTest()",
      "127": "SvgDrawContextTest::::drawContextPushTwicePopTest()",
      "128": "SvgDrawContextTest::::drawContextPushTwicePopTest()",
      "129": "SvgDrawContextTest::::drawContextPushTwicePopTest()",
      "131": "SvgDrawContextTest::::addISvgNodeRender()",
      "132": "SvgDrawContextTest::::addISvgNodeRender()",
      "133": "SvgDrawContextTest::::addISvgNodeRender()",
      "134": "SvgDrawContextTest::::addISvgNodeRender()",
      "135": "SvgDrawContextTest::::addISvgNodeRender()",
      "136": "SvgDrawContextTest::::addISvgNodeRender()",
      "137": "SvgDrawContextTest::::addISvgNodeRender()",
      "138": "SvgDrawContextTest::::addISvgNodeRender()",
      "139": "SvgDrawContextTest::::addISvgNodeRender()",
      "141": "SvgDrawContextTest::::addNullToNamedObjects()",
      "142": "SvgDrawContextTest::::addNullToNamedObjects()",
      "143": "SvgDrawContextTest::::addNullToNamedObjects()",
      "144": "SvgDrawContextTest::::addNullToNamedObjects()",
      "145": "SvgDrawContextTest::::addNullToNamedObjects()",
      "146": "SvgDrawContextTest::::addNullToNamedObjects()",
      "147": "SvgDrawContextTest::::addNullToNamedObjects()",
      "148": "SvgDrawContextTest::::addNullToNamedObjects()",
      "149": "SvgDrawContextTest::::addNullToNamedObjects()",
      "151": "SvgDrawContextTest::::addNamedObjectWithNullName()",
      "152": "SvgDrawContextTest::::addNamedObjectWithNullName()",
      "153": "SvgDrawContextTest::::addNamedObjectWithNullName()",
      "154": "SvgDrawContextTest::::addNamedObjectWithNullName()",
      "155": "SvgDrawContextTest::::addNamedObjectWithNullName()",
      "156": "SvgDrawContextTest::::addNamedObjectWithNullName()",
      "157": "SvgDrawContextTest::::addNamedObjectWithNullName()",
      "158": "SvgDrawContextTest::::addNamedObjectWithNullName()",
      "159": "SvgDrawContextTest::::addNamedObjectWithNullName()",
      "161": "SvgDrawContextTest::::addNamedObjectWithEmptyName()",
      "162": "SvgDrawContextTest::::addNamedObjectWithEmptyName()",
      "163": "SvgDrawContextTest::::addNamedObjectWithEmptyName()",
      "164": "SvgDrawContextTest::::addNamedObjectWithEmptyName()",
      "165": "SvgDrawContextTest::::addNamedObjectWithEmptyName()",
      "166": "SvgDrawContextTest::::addNamedObjectWithEmptyName()",
      "167": "SvgDrawContextTest::::addNamedObjectWithEmptyName()",
      "168": "SvgDrawContextTest::::addNamedObjectWithEmptyName()",
      "169": "SvgDrawContextTest::::addNamedObjectWithEmptyName()",
      "171": "SvgDrawContextTest::::addNamedRenderer()",
      "172": "SvgDrawContextTest::::addNamedRenderer()",
      "173": "SvgDrawContextTest::::addNamedRenderer()",
      "174": "SvgDrawContextTest::::addNamedRenderer()",
      "175": "SvgDrawContextTest::::addNamedRenderer()",
      "176": "SvgDrawContextTest::::addNamedRenderer()",
      "177": "SvgDrawContextTest::::addNamedRenderer()",
      "178": "SvgDrawContextTest::::addNamedRenderer()",
      "180": "SvgDrawContextTest::::addNamedObjects()",
      "181": "SvgDrawContextTest::::addNamedObjects()",
      "182": "SvgDrawContextTest::::addNamedObjects()",
      "183": "SvgDrawContextTest::::addNamedObjects()",
      "184": "SvgDrawContextTest::::addNamedObjects()",
      "185": "SvgDrawContextTest::::addNamedObjects()",
      "186": "SvgDrawContextTest::::addNamedObjects()",
      "187": "SvgDrawContextTest::::addNamedObjects()",
      "188": "SvgDrawContextTest::::addNamedObjects()",
      "189": "SvgDrawContextTest::::addNamedObjects()",
      "190": "SvgDrawContextTest::::addNamedObjects()",
      "191": "SvgDrawContextTest::::addNamedObjects()",
      "192": "SvgDrawContextTest::::addNamedObjects()",
      "193": "SvgDrawContextTest::::addNamedObjects()",
      "194": "SvgDrawContextTest::::addNamedObjects()",
      "195": "SvgDrawContextTest::::addNamedObjects()",
      "196": "SvgDrawContextTest::::addNamedObjects()",
      "197": "SvgDrawContextTest::::addNamedObjects()",
      "198": "SvgDrawContextTest::::addNamedObjects()",
      "199": "SvgDrawContextTest::::addNamedObjects()",
      "201": "SvgDrawContextTest::::addNamedObjectAndTryToAddDuplicate()",
      "202": "SvgDrawContextTest::::addNamedObjectAndTryToAddDuplicate()",
      "203": "SvgDrawContextTest::::addNamedObjectAndTryToAddDuplicate()",
      "204": "SvgDrawContextTest::::addNamedObjectAndTryToAddDuplicate()",
      "205": "SvgDrawContextTest::::addNamedObjectAndTryToAddDuplicate()",
      "206": "SvgDrawContextTest::::addNamedObjectAndTryToAddDuplicate()",
      "207": "SvgDrawContextTest::::addNamedObjectAndTryToAddDuplicate()",
      "208": "SvgDrawContextTest::::addNamedObjectAndTryToAddDuplicate()",
      "209": "SvgDrawContextTest::::addNamedObjectAndTryToAddDuplicate()",
      "210": "SvgDrawContextTest::::addNamedObjectAndTryToAddDuplicate()",
      "211": "SvgDrawContextTest::::addNamedObjectAndTryToAddDuplicate()",
      "212": "SvgDrawContextTest::::addNamedObjectAndTryToAddDuplicate()"
    },
    "tests": [
      {
        "test_lines": [
          67,
          70
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          59,
          60,
          69,
          70,
          71,
          73,
          74,
          75,
          77,
          78,
          79
        ]
      },
      {
        "test_lines": [
          72,
          75
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          59,
          60,
          69,
          70,
          71,
          73,
          74,
          75,
          77,
          78,
          79
        ]
      },
      {
        "test_lines": [
          77,
          80
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          59,
          60,
          69,
          70,
          71,
          73,
          74,
          75,
          77,
          78,
          79,
          120
        ]
      },
      {
        "test_lines": [
          82,
          86
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          59,
          60,
          69,
          70,
          71,
          73,
          74,
          75,
          77,
          78,
          79,
          110,
          111,
          120
        ]
      },
      {
        "test_lines": [
          88,
          92
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          59,
          60,
          69,
          70,
          71,
          73,
          74,
          75,
          77,
          78,
          79,
          87,
          110,
          111
        ]
      },
      {
        "test_lines": [
          94,
          99
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          59,
          60,
          69,
          70,
          71,
          73,
          74,
          75,
          77,
          78,
          79,
          97,
          98,
          99,
          110,
          111,
          120
        ]
      },
      {
        "test_lines": [
          101,
          105
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          59,
          60,
          69,
          70,
          71,
          73,
          74,
          75,
          77,
          78,
          79,
          97,
          98,
          99,
          110,
          111
        ]
      },
      {
        "test_lines": [
          107,
          112
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          59,
          60,
          69,
          70,
          71,
          73,
          74,
          75,
          77,
          78,
          79,
          110,
          111,
          120
        ]
      },
      {
        "test_lines": [
          114,
          120
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          59,
          60,
          69,
          70,
          71,
          73,
          74,
          75,
          77,
          78,
          79,
          87,
          110,
          111,
          120
        ]
      },
      {
        "test_lines": [
          122,
          129
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          59,
          60,
          69,
          70,
          71,
          73,
          74,
          75,
          77,
          78,
          79,
          97,
          98,
          99,
          110,
          111,
          120
        ]
      },
      {
        "test_lines": [
          131,
          139
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          59,
          60,
          69,
          70,
          71,
          73,
          74,
          75,
          77,
          78,
          79,
          166,
          170,
          174,
          175,
          177,
          186
        ]
      },
      {
        "test_lines": [
          141,
          149
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          59,
          60,
          69,
          70,
          71,
          73,
          74,
          75,
          77,
          78,
          79,
          166,
          167
        ]
      },
      {
        "test_lines": [
          151,
          159
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          59,
          60,
          69,
          70,
          71,
          73,
          74,
          75,
          77,
          78,
          79,
          166,
          170,
          171
        ]
      },
      {
        "test_lines": [
          161,
          169
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          59,
          60,
          69,
          70,
          71,
          73,
          74,
          75,
          77,
          78,
          79,
          166,
          170,
          171
        ]
      },
      {
        "test_lines": [
          171,
          178
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          59,
          60,
          69,
          70,
          71,
          73,
          74,
          75,
          77,
          78,
          79,
          166,
          170,
          174,
          175,
          177,
          186
        ]
      },
      {
        "test_lines": [
          180,
          199
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          59,
          60,
          69,
          70,
          71,
          73,
          74,
          75,
          77,
          78,
          79,
          186,
          204,
          205
        ]
      },
      {
        "test_lines": [
          201,
          212
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          59,
          60,
          69,
          70,
          71,
          73,
          74,
          75,
          77,
          78,
          79,
          166,
          170,
          174,
          175,
          177,
          186
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/svg/src/main/java/com/itextpdf/svg/renderers/SvgImageRenderer.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.svg.renderers;\n",
      "\n",
      "import com.itextpdf.layout.renderer.DrawContext;\n",
      "import com.itextpdf.layout.renderer.ImageRenderer;\n",
      "import com.itextpdf.svg.element.SvgImage;\n",
      "\n",
      "/**\n",
      " * Represents a renderer for the {@link SvgImage} layout element.\n",
      " */\n",
      "public class SvgImageRenderer extends ImageRenderer {\n",
      "    /**\n",
      "     * Creates an SvgImageRenderer from its corresponding layout object.\n",
      "     *\n",
      "     * @param image the {@link SvgImage} which this object should manage\n",
      "     */\n",
      "    public SvgImageRenderer(SvgImage image) {\n",
      "        super(image);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * {@inheritDoc}\n",
      "     */\n",
      "    @Override\n",
      "    public void draw(DrawContext drawContext) {\n",
      "        ((SvgImage) modelElement).generate(drawContext.getDocument());\n",
      "        super.draw(drawContext);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.svg.renderers;\n",
      "\n",
      "import com.itextpdf.commons.utils.FileUtil;\n",
      "import com.itextpdf.kernel.geom.Rectangle;\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "import com.itextpdf.kernel.pdf.PdfWriter;\n",
      "import com.itextpdf.kernel.pdf.WriterProperties;\n",
      "import com.itextpdf.kernel.utils.CompareTool;\n",
      "import com.itextpdf.layout.Document;\n",
      "import com.itextpdf.styledxmlparser.node.INode;\n",
      "import com.itextpdf.styledxmlparser.resolver.resource.ResourceResolver;\n",
      "import com.itextpdf.svg.converter.SvgConverter;\n",
      "import com.itextpdf.svg.element.SvgImage;\n",
      "import com.itextpdf.svg.processors.ISvgProcessorResult;\n",
      "import com.itextpdf.svg.processors.impl.DefaultSvgProcessor;\n",
      "import com.itextpdf.svg.xobject.SvgImageXObject;\n",
      "import com.itextpdf.test.annotations.type.IntegrationTest;\n",
      "import org.junit.Assert;\n",
      "import org.junit.BeforeClass;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "import java.io.FileInputStream;\n",
      "import java.io.IOException;\n",
      "\n",
      "@Category(IntegrationTest.class)\n",
      "public class SvgImageRendererTest extends SvgIntegrationTest {\n",
      "    public static final String SOURCE_FOLDER = \"./src/test/resources/com/itextpdf/svg/renderers/SvgImageRendererTest/\";\n",
      "    public static final String DESTINATION_FOLDER = \"./target/test/com/itextpdf/svg/SvgImageRendererTest/\";\n",
      "\n",
      "    @BeforeClass\n",
      "    public static void beforeClass() {\n",
      "        createDestinationFolder(DESTINATION_FOLDER);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void svgWithSvgTest() throws IOException, InterruptedException {\n",
      "        String svgFileName = SOURCE_FOLDER + \"svgWithSvg.svg\";\n",
      "        String cmpFileName = SOURCE_FOLDER + \"cmp_svgWithSvg.pdf\";\n",
      "        String outFileName = DESTINATION_FOLDER + \"svgWithSvg.pdf\";\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(outFileName, new WriterProperties().setCompressionLevel(0))))) {\n",
      "            INode parsedSvg = SvgConverter.parse(FileUtil.getInputStreamForFile(svgFileName));\n",
      "            ISvgProcessorResult result = new DefaultSvgProcessor().process(parsedSvg, null);\n",
      "            ISvgNodeRenderer topSvgRenderer = result.getRootRenderer();\n",
      "            float[] wh = SvgConverter.extractWidthAndHeight(topSvgRenderer);\n",
      "            SvgImageXObject svgImageXObject = new SvgImageXObject(new Rectangle(0, 0, wh[0], wh[1]),\n",
      "                    result, new ResourceResolver(SOURCE_FOLDER));\n",
      "            SvgImage svgImage = new SvgImage(svgImageXObject);\n",
      "            document.add(svgImage);\n",
      "            document.add(svgImage);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, DESTINATION_FOLDER, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void customSvgImageTest() throws IOException, InterruptedException {\n",
      "        String svgFileName = SOURCE_FOLDER + \"svgImage.svg\";\n",
      "        String cmpFileName = SOURCE_FOLDER + \"cmp_svgImage.pdf\";\n",
      "        String outFileName = DESTINATION_FOLDER + \"svgImage.pdf\";\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(outFileName, new WriterProperties().setCompressionLevel(0))))) {\n",
      "            INode parsedSvg = SvgConverter.parse(FileUtil.getInputStreamForFile(svgFileName));\n",
      "            ISvgProcessorResult result = new DefaultSvgProcessor().process(parsedSvg, null);\n",
      "            ISvgNodeRenderer topSvgRenderer = result.getRootRenderer();\n",
      "            float[] wh = SvgConverter.extractWidthAndHeight(topSvgRenderer);\n",
      "            SvgImageXObject svgImageXObject = new SvgImageXObject(new Rectangle(0, 0, wh[0], wh[1]),\n",
      "                    result, new ResourceResolver(SOURCE_FOLDER));\n",
      "            SvgImage svgImage = new SvgImage(svgImageXObject);\n",
      "            document.add(svgImage);\n",
      "            document.add(svgImage);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, DESTINATION_FOLDER, \"diff\"));\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {},
    "test_method_lines_dic": {
      "SvgImageRendererTest::::beforeClass()": [
        53,
        56
      ],
      "SvgImageRendererTest::::svgWithSvgTest()": [
        58,
        76
      ],
      "SvgImageRendererTest::::customSvgImageTest()": [
        78,
        96
      ]
    },
    "reverse_method_lines_dic": {},
    "test_reverse_method_lines_dic": {
      "53": "SvgImageRendererTest::::beforeClass()",
      "54": "SvgImageRendererTest::::beforeClass()",
      "55": "SvgImageRendererTest::::beforeClass()",
      "56": "SvgImageRendererTest::::beforeClass()",
      "58": "SvgImageRendererTest::::svgWithSvgTest()",
      "59": "SvgImageRendererTest::::svgWithSvgTest()",
      "60": "SvgImageRendererTest::::svgWithSvgTest()",
      "61": "SvgImageRendererTest::::svgWithSvgTest()",
      "62": "SvgImageRendererTest::::svgWithSvgTest()",
      "63": "SvgImageRendererTest::::svgWithSvgTest()",
      "64": "SvgImageRendererTest::::svgWithSvgTest()",
      "65": "SvgImageRendererTest::::svgWithSvgTest()",
      "66": "SvgImageRendererTest::::svgWithSvgTest()",
      "67": "SvgImageRendererTest::::svgWithSvgTest()",
      "68": "SvgImageRendererTest::::svgWithSvgTest()",
      "69": "SvgImageRendererTest::::svgWithSvgTest()",
      "70": "SvgImageRendererTest::::svgWithSvgTest()",
      "71": "SvgImageRendererTest::::svgWithSvgTest()",
      "72": "SvgImageRendererTest::::svgWithSvgTest()",
      "73": "SvgImageRendererTest::::svgWithSvgTest()",
      "74": "SvgImageRendererTest::::svgWithSvgTest()",
      "75": "SvgImageRendererTest::::svgWithSvgTest()",
      "76": "SvgImageRendererTest::::svgWithSvgTest()",
      "78": "SvgImageRendererTest::::customSvgImageTest()",
      "79": "SvgImageRendererTest::::customSvgImageTest()",
      "80": "SvgImageRendererTest::::customSvgImageTest()",
      "81": "SvgImageRendererTest::::customSvgImageTest()",
      "82": "SvgImageRendererTest::::customSvgImageTest()",
      "83": "SvgImageRendererTest::::customSvgImageTest()",
      "84": "SvgImageRendererTest::::customSvgImageTest()",
      "85": "SvgImageRendererTest::::customSvgImageTest()",
      "86": "SvgImageRendererTest::::customSvgImageTest()",
      "87": "SvgImageRendererTest::::customSvgImageTest()",
      "88": "SvgImageRendererTest::::customSvgImageTest()",
      "89": "SvgImageRendererTest::::customSvgImageTest()",
      "90": "SvgImageRendererTest::::customSvgImageTest()",
      "91": "SvgImageRendererTest::::customSvgImageTest()",
      "92": "SvgImageRendererTest::::customSvgImageTest()",
      "93": "SvgImageRendererTest::::customSvgImageTest()",
      "94": "SvgImageRendererTest::::customSvgImageTest()",
      "95": "SvgImageRendererTest::::customSvgImageTest()",
      "96": "SvgImageRendererTest::::customSvgImageTest()"
    },
    "tests": [
      {
        "test_lines": [
          58,
          76
        ],
        "covered_lines": [
          39,
          40,
          47,
          48,
          49
        ]
      },
      {
        "test_lines": [
          78,
          96
        ],
        "covered_lines": [
          39,
          40,
          47,
          48,
          49
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/svg/src/main/java/com/itextpdf/svg/renderers/impl/LineSvgNodeRenderer.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.svg.renderers.impl;\n",
      "\n",
      "import com.itextpdf.kernel.geom.Rectangle;\n",
      "import com.itextpdf.kernel.geom.Vector;\n",
      "import com.itextpdf.kernel.pdf.canvas.PdfCanvas;\n",
      "import com.itextpdf.styledxmlparser.css.util.CssDimensionParsingUtils;\n",
      "import com.itextpdf.svg.MarkerVertexType;\n",
      "import com.itextpdf.svg.SvgConstants;\n",
      "import com.itextpdf.svg.renderers.IMarkerCapable;\n",
      "import com.itextpdf.svg.renderers.ISvgNodeRenderer;\n",
      "import com.itextpdf.svg.renderers.SvgDrawContext;\n",
      "import com.itextpdf.svg.utils.SvgCoordinateUtils;\n",
      "\n",
      "import java.util.Map;\n",
      "\n",
      "/**\n",
      " * {@link ISvgNodeRenderer} implementation for the &lt;line&gt; tag.\n",
      " */\n",
      "public class LineSvgNodeRenderer extends AbstractSvgNodeRenderer implements IMarkerCapable {\n",
      "\n",
      "    private float x1 = 0f;\n",
      "    private float y1 = 0f;\n",
      "    private float x2 = 0f;\n",
      "    private float y2 = 0f;\n",
      "\n",
      "    @Override\n",
      "    public void doDraw(SvgDrawContext context) {\n",
      "        PdfCanvas canvas = context.getCurrentCanvas();\n",
      "        canvas.writeLiteral(\"% line\\n\");\n",
      "\n",
      "        if (setParameterss()) {\n",
      "            canvas.moveTo(x1, y1).lineTo(x2, y2);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Rectangle getObjectBoundingBox(SvgDrawContext context) {\n",
      "        if (setParameterss()) {\n",
      "            float x = Math.min(x1, x2);\n",
      "            float y = Math.min(y1, y2);\n",
      "\n",
      "            float width = Math.abs(x1 - x2);\n",
      "            float height = Math.abs(y1 - y2);\n",
      "\n",
      "            return new Rectangle(x, y, width, height);\n",
      "        } else {\n",
      "            return null;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected boolean canElementFill() {\n",
      "        return false;\n",
      "    }\n",
      "\n",
      "    float getAttribute(Map<String, String> attributes, String key) {\n",
      "        String value = attributes.get(key);\n",
      "        if (value != null && !value.isEmpty()) {\n",
      "            return CssDimensionParsingUtils.parseAbsoluteLength(attributes.get(key));\n",
      "        }\n",
      "        return 0;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public ISvgNodeRenderer createDeepCopy() {\n",
      "        LineSvgNodeRenderer copy = new LineSvgNodeRenderer();\n",
      "        deepCopyAttributesAndStyles(copy);\n",
      "        return copy;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void drawMarker(SvgDrawContext context, final MarkerVertexType markerVertexType) {\n",
      "        String moveX = null;\n",
      "        String moveY = null;\n",
      "        if (MarkerVertexType.MARKER_START.equals(markerVertexType)) {\n",
      "            moveX = this.attributesAndStyles.get(SvgConstants.Attributes.X1);\n",
      "            moveY = this.attributesAndStyles.get(SvgConstants.Attributes.Y1);\n",
      "        } else if (MarkerVertexType.MARKER_END.equals(markerVertexType)) {\n",
      "            moveX = this.attributesAndStyles.get(SvgConstants.Attributes.X2);\n",
      "            moveY = this.attributesAndStyles.get(SvgConstants.Attributes.Y2);\n",
      "        }\n",
      "        if (moveX != null && moveY != null) {\n",
      "            MarkerSvgNodeRenderer.drawMarker(context, moveX, moveY, markerVertexType, this);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public double getAutoOrientAngle(MarkerSvgNodeRenderer marker, boolean reverse) {\n",
      "        Vector v = new Vector(getAttribute(this.attributesAndStyles, SvgConstants.Attributes.X2) - getAttribute(\n",
      "                this.attributesAndStyles, SvgConstants.Attributes.X1),\n",
      "                getAttribute(this.attributesAndStyles, SvgConstants.Attributes.Y2) - getAttribute(\n",
      "                        this.attributesAndStyles, SvgConstants.Attributes.Y1), 0f);\n",
      "        Vector xAxis = new Vector(1, 0, 0);\n",
      "        double rotAngle = SvgCoordinateUtils.calculateAngleBetweenTwoVectors(xAxis, v);\n",
      "        return v.get(1) >= 0 && !reverse ? rotAngle : rotAngle * -1f;\n",
      "    }\n",
      "\n",
      "    private boolean setParameterss() {\n",
      "        if (attributesAndStyles.size() > 0) {\n",
      "            if (attributesAndStyles.containsKey(SvgConstants.Attributes.X1)) {\n",
      "                this.x1 = getAttribute(attributesAndStyles, SvgConstants.Attributes.X1);\n",
      "            }\n",
      "\n",
      "            if (attributesAndStyles.containsKey(SvgConstants.Attributes.Y1)) {\n",
      "                this.y1 = getAttribute(attributesAndStyles, SvgConstants.Attributes.Y1);\n",
      "            }\n",
      "\n",
      "            if (attributesAndStyles.containsKey(SvgConstants.Attributes.X2)) {\n",
      "                this.x2 = getAttribute(attributesAndStyles, SvgConstants.Attributes.X2);\n",
      "            }\n",
      "\n",
      "            if (attributesAndStyles.containsKey(SvgConstants.Attributes.Y2)) {\n",
      "                this.y2 = getAttribute(attributesAndStyles, SvgConstants.Attributes.Y2);\n",
      "            }\n",
      "            return true;\n",
      "        }\n",
      "        return false;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.svg.renderers.impl;\n",
      "\n",
      "import com.itextpdf.commons.utils.MessageFormatUtil;\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "import com.itextpdf.kernel.pdf.PdfWriter;\n",
      "import com.itextpdf.kernel.pdf.canvas.PdfCanvas;\n",
      "import com.itextpdf.kernel.utils.CompareTool;\n",
      "import com.itextpdf.styledxmlparser.logs.StyledXmlParserLogMessageConstant;\n",
      "import com.itextpdf.styledxmlparser.exceptions.StyledXMLParserException;\n",
      "import com.itextpdf.svg.renderers.ISvgNodeRenderer;\n",
      "import com.itextpdf.svg.renderers.SvgDrawContext;\n",
      "import com.itextpdf.svg.renderers.SvgIntegrationTest;\n",
      "import com.itextpdf.test.ITextTest;\n",
      "import com.itextpdf.test.annotations.LogMessage;\n",
      "import com.itextpdf.test.annotations.LogMessages;\n",
      "import com.itextpdf.test.annotations.type.IntegrationTest;\n",
      "\n",
      "import java.io.ByteArrayOutputStream;\n",
      "import java.io.IOException;\n",
      "import java.util.HashMap;\n",
      "import java.util.Map;\n",
      "\n",
      "import org.junit.Assert;\n",
      "import org.junit.BeforeClass;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(IntegrationTest.class)\n",
      "public class LineSvgNodeRendererTest extends SvgIntegrationTest{\n",
      "\n",
      "    public static final String sourceFolder = \"./src/test/resources/com/itextpdf/svg/renderers/impl/LineSvgNodeRendererTest/\";\n",
      "    public static final String destinationFolder = \"./target/test/com/itextpdf/svg/renderers/impl/LineSvgNodeRendererTest/\";\n",
      "\n",
      "\n",
      "    @BeforeClass\n",
      "    public static void beforeClass() {\n",
      "        ITextTest.createDestinationFolder(destinationFolder);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void lineRendererTest() throws IOException, InterruptedException {\n",
      "        String filename = \"lineSvgRendererTest.pdf\";\n",
      "        PdfDocument doc = new PdfDocument(new PdfWriter(destinationFolder + filename));\n",
      "        doc.addNewPage();\n",
      "\n",
      "        Map<String, String> lineProperties = new HashMap<>();\n",
      "\n",
      "        lineProperties.put(\"x1\", \"100\");\n",
      "        lineProperties.put(\"y1\", \"800\");\n",
      "        lineProperties.put(\"x2\", \"300\");\n",
      "        lineProperties.put(\"y2\", \"800\");\n",
      "        lineProperties.put(\"stroke\", \"green\");\n",
      "        lineProperties.put(\"stroke-width\", \"25\");\n",
      "\n",
      "        LineSvgNodeRenderer root = new LineSvgNodeRenderer();\n",
      "        root.setAttributesAndStyles(lineProperties);\n",
      "\n",
      "        SvgDrawContext context = new SvgDrawContext(null, null);\n",
      "        PdfCanvas cv = new PdfCanvas(doc, 1);\n",
      "        context.pushCanvas(cv);\n",
      "\n",
      "        root.draw(context);\n",
      "        doc.close();\n",
      "        Assert.assertNull(new CompareTool().compareByContent(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void lineWithEmpyAttributesTest() throws IOException, InterruptedException {\n",
      "        String filename = \"lineWithEmpyAttributesTest.pdf\";\n",
      "        PdfDocument doc = new PdfDocument(new PdfWriter(destinationFolder + filename));\n",
      "        doc.addNewPage();\n",
      "\n",
      "        Map<String, String> lineProperties = new HashMap<>();\n",
      "\n",
      "        LineSvgNodeRenderer root = new LineSvgNodeRenderer();\n",
      "        root.setAttributesAndStyles(lineProperties);\n",
      "\n",
      "        SvgDrawContext context = new SvgDrawContext(null, null);\n",
      "        PdfCanvas cv = new PdfCanvas(doc, 1);\n",
      "        context.pushCanvas(cv);\n",
      "\n",
      "        root.draw(context);\n",
      "        doc.close();\n",
      "        Assert.assertNull(new CompareTool().compareByContent(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void invalidAttributeTest01() {\n",
      "        PdfDocument doc = new PdfDocument(new PdfWriter(new ByteArrayOutputStream()));\n",
      "        doc.addNewPage();\n",
      "        ISvgNodeRenderer root = new LineSvgNodeRenderer();\n",
      "        Map<String, String> lineProperties = new HashMap<>();\n",
      "        lineProperties.put(\"x1\", \"1\");\n",
      "        lineProperties.put(\"y1\", \"800\");\n",
      "        lineProperties.put(\"x2\", \"notAnum\");\n",
      "        lineProperties.put(\"y2\", \"alsoNotANum\");\n",
      "        root.setAttributesAndStyles(lineProperties);\n",
      "        SvgDrawContext context = new SvgDrawContext(null, null);\n",
      "        PdfCanvas cv = new PdfCanvas(doc, 1);\n",
      "        context.pushCanvas(cv);\n",
      "\n",
      "        Exception e = Assert.assertThrows(StyledXMLParserException.class,\n",
      "                () -> root.draw(context)\n",
      "        );\n",
      "        Assert.assertEquals(MessageFormatUtil.format(StyledXMLParserException.NAN, \"notAnum\"), e.getMessage());\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    @LogMessages(messages = @LogMessage(messageTemplate = StyledXmlParserLogMessageConstant.UNKNOWN_ABSOLUTE_METRIC_LENGTH_PARSED, count = 2))\n",
      "    public void invalidAttributeTest02() throws IOException {\n",
      "        Map<String, String> lineProperties = new HashMap<>();\n",
      "        lineProperties.put(\"x1\", \"100\");\n",
      "        lineProperties.put(\"y1\", \"800\");\n",
      "        lineProperties.put(\"x2\", \"1 0\");\n",
      "        lineProperties.put(\"y2\", \"0 2 0\");\n",
      "        lineProperties.put(\"stroke\", \"orange\");\n",
      "\n",
      "\n",
      "        String filename = \"invalidAttributes02.pdf\";\n",
      "        PdfDocument doc = new PdfDocument(new PdfWriter(destinationFolder + filename));\n",
      "        doc.addNewPage();\n",
      "\n",
      "        LineSvgNodeRenderer root = new LineSvgNodeRenderer();\n",
      "        root.setAttributesAndStyles(lineProperties);\n",
      "\n",
      "        SvgDrawContext context = new SvgDrawContext(null, null);\n",
      "        PdfCanvas cv = new PdfCanvas(doc, 1);\n",
      "        context.pushCanvas(cv);\n",
      "\n",
      "        root.draw(context);\n",
      "\n",
      "        doc.close();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void emptyPointsListTest() throws IOException, InterruptedException {\n",
      "        String filename = \"lineEmptyPointsListTest.pdf\";\n",
      "        PdfDocument doc = new PdfDocument(new PdfWriter(destinationFolder + filename));\n",
      "        doc.addNewPage();\n",
      "\n",
      "        ISvgNodeRenderer root = new LineSvgNodeRenderer();\n",
      "        Map<String, String> lineProperties = new HashMap<>();\n",
      "        root.setAttributesAndStyles(lineProperties);\n",
      "        SvgDrawContext context = new SvgDrawContext(null, null);\n",
      "        PdfCanvas cv = new PdfCanvas(doc, 1);\n",
      "        context.pushCanvas(cv);\n",
      "\n",
      "        root.draw(context);\n",
      "        doc.close();\n",
      "\n",
      "        int numPoints = ((LineSvgNodeRenderer) root).attributesAndStyles.size();\n",
      "        Assert.assertEquals(numPoints, 0);\n",
      "        Assert.assertNull(new CompareTool().compareByContent(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void getAttributeTest() {\n",
      "        float expected = 0.75f;\n",
      "        LineSvgNodeRenderer lineSvgNodeRenderer = new LineSvgNodeRenderer();\n",
      "\n",
      "        Map<String, String> attributes = new HashMap<>();\n",
      "        attributes.put(\"key\", \"1.0\");\n",
      "\n",
      "        float actual = lineSvgNodeRenderer.getAttribute(attributes, \"key\");\n",
      "\n",
      "        Assert.assertEquals(expected, actual, 0f);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void getNotPresentAttributeTest() {\n",
      "        float expected = 0f;\n",
      "        LineSvgNodeRenderer lineSvgNodeRenderer = new LineSvgNodeRenderer();\n",
      "\n",
      "        Map<String, String> attributes = new HashMap<>();\n",
      "        attributes.put(\"key\", \"1.0\");\n",
      "\n",
      "        float actual = lineSvgNodeRenderer.getAttribute(attributes, \"notHere\");\n",
      "\n",
      "        Assert.assertEquals(expected, actual, 0f);\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "method_lines_dic": {
      "LineSvgNodeRenderer::::doDraw(com.itextpdf.svg.renderers.SvgDrawContext)": [
        48,
        56
      ],
      "LineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)": [
        58,
        71
      ],
      "LineSvgNodeRenderer::::canElementFill()": [
        73,
        76
      ],
      "LineSvgNodeRenderer::::getAttribute(java.util.Map<java.lang.String, java.lang.String>,java.lang.String)": [
        78,
        84
      ],
      "LineSvgNodeRenderer::::createDeepCopy()": [
        86,
        91
      ],
      "LineSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)": [
        93,
        107
      ],
      "LineSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)": [
        109,
        118
      ],
      "LineSvgNodeRenderer::::setParameterss()": [
        120,
        140
      ]
    },
    "test_method_lines_dic": {
      "LineSvgNodeRendererTest::::beforeClass()": [
        57,
        60
      ],
      "LineSvgNodeRendererTest::::lineRendererTest()": [
        62,
        87
      ],
      "LineSvgNodeRendererTest::::lineWithEmpyAttributesTest()": [
        89,
        107
      ],
      "LineSvgNodeRendererTest::::invalidAttributeTest01()": [
        109,
        128
      ],
      "LineSvgNodeRendererTest::::invalidAttributeTest02()": [
        131,
        156
      ],
      "LineSvgNodeRendererTest::::emptyPointsListTest()": [
        158,
        177
      ],
      "LineSvgNodeRendererTest::::getAttributeTest()": [
        179,
        190
      ],
      "LineSvgNodeRendererTest::::getNotPresentAttributeTest()": [
        192,
        203
      ]
    },
    "reverse_method_lines_dic": {
      "48": "LineSvgNodeRenderer::::doDraw(com.itextpdf.svg.renderers.SvgDrawContext)",
      "49": "LineSvgNodeRenderer::::doDraw(com.itextpdf.svg.renderers.SvgDrawContext)",
      "50": "LineSvgNodeRenderer::::doDraw(com.itextpdf.svg.renderers.SvgDrawContext)",
      "51": "LineSvgNodeRenderer::::doDraw(com.itextpdf.svg.renderers.SvgDrawContext)",
      "52": "LineSvgNodeRenderer::::doDraw(com.itextpdf.svg.renderers.SvgDrawContext)",
      "53": "LineSvgNodeRenderer::::doDraw(com.itextpdf.svg.renderers.SvgDrawContext)",
      "54": "LineSvgNodeRenderer::::doDraw(com.itextpdf.svg.renderers.SvgDrawContext)",
      "55": "LineSvgNodeRenderer::::doDraw(com.itextpdf.svg.renderers.SvgDrawContext)",
      "56": "LineSvgNodeRenderer::::doDraw(com.itextpdf.svg.renderers.SvgDrawContext)",
      "58": "LineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "59": "LineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "60": "LineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "61": "LineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "62": "LineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "63": "LineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "64": "LineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "65": "LineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "66": "LineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "67": "LineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "68": "LineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "69": "LineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "70": "LineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "71": "LineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "73": "LineSvgNodeRenderer::::canElementFill()",
      "74": "LineSvgNodeRenderer::::canElementFill()",
      "75": "LineSvgNodeRenderer::::canElementFill()",
      "76": "LineSvgNodeRenderer::::canElementFill()",
      "78": "LineSvgNodeRenderer::::getAttribute(java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "79": "LineSvgNodeRenderer::::getAttribute(java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "80": "LineSvgNodeRenderer::::getAttribute(java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "81": "LineSvgNodeRenderer::::getAttribute(java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "82": "LineSvgNodeRenderer::::getAttribute(java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "83": "LineSvgNodeRenderer::::getAttribute(java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "84": "LineSvgNodeRenderer::::getAttribute(java.util.Map<java.lang.String, java.lang.String>,java.lang.String)",
      "86": "LineSvgNodeRenderer::::createDeepCopy()",
      "87": "LineSvgNodeRenderer::::createDeepCopy()",
      "88": "LineSvgNodeRenderer::::createDeepCopy()",
      "89": "LineSvgNodeRenderer::::createDeepCopy()",
      "90": "LineSvgNodeRenderer::::createDeepCopy()",
      "91": "LineSvgNodeRenderer::::createDeepCopy()",
      "93": "LineSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "94": "LineSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "95": "LineSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "96": "LineSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "97": "LineSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "98": "LineSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "99": "LineSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "100": "LineSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "101": "LineSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "102": "LineSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "103": "LineSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "104": "LineSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "105": "LineSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "106": "LineSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "107": "LineSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "109": "LineSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "110": "LineSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "111": "LineSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "112": "LineSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "113": "LineSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "114": "LineSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "115": "LineSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "116": "LineSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "117": "LineSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "118": "LineSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "120": "LineSvgNodeRenderer::::setParameterss()",
      "121": "LineSvgNodeRenderer::::setParameterss()",
      "122": "LineSvgNodeRenderer::::setParameterss()",
      "123": "LineSvgNodeRenderer::::setParameterss()",
      "124": "LineSvgNodeRenderer::::setParameterss()",
      "125": "LineSvgNodeRenderer::::setParameterss()",
      "126": "LineSvgNodeRenderer::::setParameterss()",
      "127": "LineSvgNodeRenderer::::setParameterss()",
      "128": "LineSvgNodeRenderer::::setParameterss()",
      "129": "LineSvgNodeRenderer::::setParameterss()",
      "130": "LineSvgNodeRenderer::::setParameterss()",
      "131": "LineSvgNodeRenderer::::setParameterss()",
      "132": "LineSvgNodeRenderer::::setParameterss()",
      "133": "LineSvgNodeRenderer::::setParameterss()",
      "134": "LineSvgNodeRenderer::::setParameterss()",
      "135": "LineSvgNodeRenderer::::setParameterss()",
      "136": "LineSvgNodeRenderer::::setParameterss()",
      "137": "LineSvgNodeRenderer::::setParameterss()",
      "138": "LineSvgNodeRenderer::::setParameterss()",
      "139": "LineSvgNodeRenderer::::setParameterss()",
      "140": "LineSvgNodeRenderer::::setParameterss()"
    },
    "test_reverse_method_lines_dic": {
      "57": "LineSvgNodeRendererTest::::beforeClass()",
      "58": "LineSvgNodeRendererTest::::beforeClass()",
      "59": "LineSvgNodeRendererTest::::beforeClass()",
      "60": "LineSvgNodeRendererTest::::beforeClass()",
      "62": "LineSvgNodeRendererTest::::lineRendererTest()",
      "63": "LineSvgNodeRendererTest::::lineRendererTest()",
      "64": "LineSvgNodeRendererTest::::lineRendererTest()",
      "65": "LineSvgNodeRendererTest::::lineRendererTest()",
      "66": "LineSvgNodeRendererTest::::lineRendererTest()",
      "67": "LineSvgNodeRendererTest::::lineRendererTest()",
      "68": "LineSvgNodeRendererTest::::lineRendererTest()",
      "69": "LineSvgNodeRendererTest::::lineRendererTest()",
      "70": "LineSvgNodeRendererTest::::lineRendererTest()",
      "71": "LineSvgNodeRendererTest::::lineRendererTest()",
      "72": "LineSvgNodeRendererTest::::lineRendererTest()",
      "73": "LineSvgNodeRendererTest::::lineRendererTest()",
      "74": "LineSvgNodeRendererTest::::lineRendererTest()",
      "75": "LineSvgNodeRendererTest::::lineRendererTest()",
      "76": "LineSvgNodeRendererTest::::lineRendererTest()",
      "77": "LineSvgNodeRendererTest::::lineRendererTest()",
      "78": "LineSvgNodeRendererTest::::lineRendererTest()",
      "79": "LineSvgNodeRendererTest::::lineRendererTest()",
      "80": "LineSvgNodeRendererTest::::lineRendererTest()",
      "81": "LineSvgNodeRendererTest::::lineRendererTest()",
      "82": "LineSvgNodeRendererTest::::lineRendererTest()",
      "83": "LineSvgNodeRendererTest::::lineRendererTest()",
      "84": "LineSvgNodeRendererTest::::lineRendererTest()",
      "85": "LineSvgNodeRendererTest::::lineRendererTest()",
      "86": "LineSvgNodeRendererTest::::lineRendererTest()",
      "87": "LineSvgNodeRendererTest::::lineRendererTest()",
      "89": "LineSvgNodeRendererTest::::lineWithEmpyAttributesTest()",
      "90": "LineSvgNodeRendererTest::::lineWithEmpyAttributesTest()",
      "91": "LineSvgNodeRendererTest::::lineWithEmpyAttributesTest()",
      "92": "LineSvgNodeRendererTest::::lineWithEmpyAttributesTest()",
      "93": "LineSvgNodeRendererTest::::lineWithEmpyAttributesTest()",
      "94": "LineSvgNodeRendererTest::::lineWithEmpyAttributesTest()",
      "95": "LineSvgNodeRendererTest::::lineWithEmpyAttributesTest()",
      "96": "LineSvgNodeRendererTest::::lineWithEmpyAttributesTest()",
      "97": "LineSvgNodeRendererTest::::lineWithEmpyAttributesTest()",
      "98": "LineSvgNodeRendererTest::::lineWithEmpyAttributesTest()",
      "99": "LineSvgNodeRendererTest::::lineWithEmpyAttributesTest()",
      "100": "LineSvgNodeRendererTest::::lineWithEmpyAttributesTest()",
      "101": "LineSvgNodeRendererTest::::lineWithEmpyAttributesTest()",
      "102": "LineSvgNodeRendererTest::::lineWithEmpyAttributesTest()",
      "103": "LineSvgNodeRendererTest::::lineWithEmpyAttributesTest()",
      "104": "LineSvgNodeRendererTest::::lineWithEmpyAttributesTest()",
      "105": "LineSvgNodeRendererTest::::lineWithEmpyAttributesTest()",
      "106": "LineSvgNodeRendererTest::::lineWithEmpyAttributesTest()",
      "107": "LineSvgNodeRendererTest::::lineWithEmpyAttributesTest()",
      "109": "LineSvgNodeRendererTest::::invalidAttributeTest01()",
      "110": "LineSvgNodeRendererTest::::invalidAttributeTest01()",
      "111": "LineSvgNodeRendererTest::::invalidAttributeTest01()",
      "112": "LineSvgNodeRendererTest::::invalidAttributeTest01()",
      "113": "LineSvgNodeRendererTest::::invalidAttributeTest01()",
      "114": "LineSvgNodeRendererTest::::invalidAttributeTest01()",
      "115": "LineSvgNodeRendererTest::::invalidAttributeTest01()",
      "116": "LineSvgNodeRendererTest::::invalidAttributeTest01()",
      "117": "LineSvgNodeRendererTest::::invalidAttributeTest01()",
      "118": "LineSvgNodeRendererTest::::invalidAttributeTest01()",
      "119": "LineSvgNodeRendererTest::::invalidAttributeTest01()",
      "120": "LineSvgNodeRendererTest::::invalidAttributeTest01()",
      "121": "LineSvgNodeRendererTest::::invalidAttributeTest01()",
      "122": "LineSvgNodeRendererTest::::invalidAttributeTest01()",
      "123": "LineSvgNodeRendererTest::::invalidAttributeTest01()",
      "124": "LineSvgNodeRendererTest::::invalidAttributeTest01()",
      "125": "LineSvgNodeRendererTest::::invalidAttributeTest01()",
      "126": "LineSvgNodeRendererTest::::invalidAttributeTest01()",
      "127": "LineSvgNodeRendererTest::::invalidAttributeTest01()",
      "128": "LineSvgNodeRendererTest::::invalidAttributeTest01()",
      "131": "LineSvgNodeRendererTest::::invalidAttributeTest02()",
      "132": "LineSvgNodeRendererTest::::invalidAttributeTest02()",
      "133": "LineSvgNodeRendererTest::::invalidAttributeTest02()",
      "134": "LineSvgNodeRendererTest::::invalidAttributeTest02()",
      "135": "LineSvgNodeRendererTest::::invalidAttributeTest02()",
      "136": "LineSvgNodeRendererTest::::invalidAttributeTest02()",
      "137": "LineSvgNodeRendererTest::::invalidAttributeTest02()",
      "138": "LineSvgNodeRendererTest::::invalidAttributeTest02()",
      "139": "LineSvgNodeRendererTest::::invalidAttributeTest02()",
      "140": "LineSvgNodeRendererTest::::invalidAttributeTest02()",
      "141": "LineSvgNodeRendererTest::::invalidAttributeTest02()",
      "142": "LineSvgNodeRendererTest::::invalidAttributeTest02()",
      "143": "LineSvgNodeRendererTest::::invalidAttributeTest02()",
      "144": "LineSvgNodeRendererTest::::invalidAttributeTest02()",
      "145": "LineSvgNodeRendererTest::::invalidAttributeTest02()",
      "146": "LineSvgNodeRendererTest::::invalidAttributeTest02()",
      "147": "LineSvgNodeRendererTest::::invalidAttributeTest02()",
      "148": "LineSvgNodeRendererTest::::invalidAttributeTest02()",
      "149": "LineSvgNodeRendererTest::::invalidAttributeTest02()",
      "150": "LineSvgNodeRendererTest::::invalidAttributeTest02()",
      "151": "LineSvgNodeRendererTest::::invalidAttributeTest02()",
      "152": "LineSvgNodeRendererTest::::invalidAttributeTest02()",
      "153": "LineSvgNodeRendererTest::::invalidAttributeTest02()",
      "154": "LineSvgNodeRendererTest::::invalidAttributeTest02()",
      "155": "LineSvgNodeRendererTest::::invalidAttributeTest02()",
      "156": "LineSvgNodeRendererTest::::invalidAttributeTest02()",
      "158": "LineSvgNodeRendererTest::::emptyPointsListTest()",
      "159": "LineSvgNodeRendererTest::::emptyPointsListTest()",
      "160": "LineSvgNodeRendererTest::::emptyPointsListTest()",
      "161": "LineSvgNodeRendererTest::::emptyPointsListTest()",
      "162": "LineSvgNodeRendererTest::::emptyPointsListTest()",
      "163": "LineSvgNodeRendererTest::::emptyPointsListTest()",
      "164": "LineSvgNodeRendererTest::::emptyPointsListTest()",
      "165": "LineSvgNodeRendererTest::::emptyPointsListTest()",
      "166": "LineSvgNodeRendererTest::::emptyPointsListTest()",
      "167": "LineSvgNodeRendererTest::::emptyPointsListTest()",
      "168": "LineSvgNodeRendererTest::::emptyPointsListTest()",
      "169": "LineSvgNodeRendererTest::::emptyPointsListTest()",
      "170": "LineSvgNodeRendererTest::::emptyPointsListTest()",
      "171": "LineSvgNodeRendererTest::::emptyPointsListTest()",
      "172": "LineSvgNodeRendererTest::::emptyPointsListTest()",
      "173": "LineSvgNodeRendererTest::::emptyPointsListTest()",
      "174": "LineSvgNodeRendererTest::::emptyPointsListTest()",
      "175": "LineSvgNodeRendererTest::::emptyPointsListTest()",
      "176": "LineSvgNodeRendererTest::::emptyPointsListTest()",
      "177": "LineSvgNodeRendererTest::::emptyPointsListTest()",
      "179": "LineSvgNodeRendererTest::::getAttributeTest()",
      "180": "LineSvgNodeRendererTest::::getAttributeTest()",
      "181": "LineSvgNodeRendererTest::::getAttributeTest()",
      "182": "LineSvgNodeRendererTest::::getAttributeTest()",
      "183": "LineSvgNodeRendererTest::::getAttributeTest()",
      "184": "LineSvgNodeRendererTest::::getAttributeTest()",
      "185": "LineSvgNodeRendererTest::::getAttributeTest()",
      "186": "LineSvgNodeRendererTest::::getAttributeTest()",
      "187": "LineSvgNodeRendererTest::::getAttributeTest()",
      "188": "LineSvgNodeRendererTest::::getAttributeTest()",
      "189": "LineSvgNodeRendererTest::::getAttributeTest()",
      "190": "LineSvgNodeRendererTest::::getAttributeTest()",
      "192": "LineSvgNodeRendererTest::::getNotPresentAttributeTest()",
      "193": "LineSvgNodeRendererTest::::getNotPresentAttributeTest()",
      "194": "LineSvgNodeRendererTest::::getNotPresentAttributeTest()",
      "195": "LineSvgNodeRendererTest::::getNotPresentAttributeTest()",
      "196": "LineSvgNodeRendererTest::::getNotPresentAttributeTest()",
      "197": "LineSvgNodeRendererTest::::getNotPresentAttributeTest()",
      "198": "LineSvgNodeRendererTest::::getNotPresentAttributeTest()",
      "199": "LineSvgNodeRendererTest::::getNotPresentAttributeTest()",
      "200": "LineSvgNodeRendererTest::::getNotPresentAttributeTest()",
      "201": "LineSvgNodeRendererTest::::getNotPresentAttributeTest()",
      "202": "LineSvgNodeRendererTest::::getNotPresentAttributeTest()",
      "203": "LineSvgNodeRendererTest::::getNotPresentAttributeTest()"
    },
    "tests": [
      {
        "test_lines": [
          62,
          87
        ],
        "covered_lines": [
          41,
          43,
          44,
          45,
          46,
          50,
          51,
          53,
          54,
          56,
          75,
          79,
          80,
          81,
          121,
          122,
          123,
          126,
          127,
          130,
          131,
          134,
          135,
          137
        ]
      },
      {
        "test_lines": [
          89,
          107
        ],
        "covered_lines": [
          41,
          43,
          44,
          45,
          46,
          50,
          51,
          53,
          56,
          75,
          121,
          139
        ]
      },
      {
        "test_lines": [
          109,
          128
        ],
        "covered_lines": [
          41,
          43,
          44,
          45,
          46,
          50,
          51,
          75,
          79,
          80,
          81,
          121,
          122,
          123,
          126,
          127,
          130
        ]
      },
      {
        "test_lines": [
          131,
          156
        ],
        "covered_lines": [
          41,
          43,
          44,
          45,
          46,
          50,
          51,
          53,
          54,
          56,
          75,
          79,
          80,
          81,
          121,
          122,
          123,
          126,
          127,
          130,
          131,
          134,
          135,
          137
        ]
      },
      {
        "test_lines": [
          158,
          177
        ],
        "covered_lines": [
          41,
          43,
          44,
          45,
          46,
          50,
          51,
          53,
          56,
          75,
          121,
          139
        ]
      },
      {
        "test_lines": [
          179,
          190
        ],
        "covered_lines": [
          41,
          43,
          44,
          45,
          46,
          79,
          80,
          81
        ]
      },
      {
        "test_lines": [
          192,
          203
        ],
        "covered_lines": [
          41,
          43,
          44,
          45,
          46,
          79,
          80,
          83
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/svg/src/main/java/com/itextpdf/svg/renderers/impl/PathSvgNodeRenderer.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.svg.renderers.impl;\n",
      "\n",
      "import com.itextpdf.kernel.geom.Point;\n",
      "import com.itextpdf.kernel.geom.Rectangle;\n",
      "import com.itextpdf.kernel.geom.Vector;\n",
      "import com.itextpdf.kernel.pdf.canvas.PdfCanvas;\n",
      "import com.itextpdf.svg.MarkerVertexType;\n",
      "import com.itextpdf.svg.SvgConstants;\n",
      "import com.itextpdf.svg.exceptions.SvgExceptionMessageConstant;\n",
      "import com.itextpdf.svg.exceptions.SvgProcessingException;\n",
      "import com.itextpdf.svg.renderers.IMarkerCapable;\n",
      "import com.itextpdf.svg.renderers.ISvgNodeRenderer;\n",
      "import com.itextpdf.svg.renderers.SvgDrawContext;\n",
      "import com.itextpdf.svg.renderers.path.IPathShape;\n",
      "import com.itextpdf.svg.renderers.path.SvgPathShapeFactory;\n",
      "import com.itextpdf.svg.renderers.path.impl.AbstractPathShape;\n",
      "import com.itextpdf.svg.renderers.path.impl.ClosePath;\n",
      "import com.itextpdf.svg.renderers.path.impl.IControlPointCurve;\n",
      "import com.itextpdf.svg.renderers.path.impl.MoveTo;\n",
      "import com.itextpdf.svg.renderers.path.impl.QuadraticSmoothCurveTo;\n",
      "import com.itextpdf.svg.renderers.path.impl.SmoothSCurveTo;\n",
      "import com.itextpdf.svg.utils.SvgCoordinateUtils;\n",
      "import com.itextpdf.svg.utils.SvgCssUtils;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.Arrays;\n",
      "import java.util.Collection;\n",
      "import java.util.List;\n",
      "import java.util.regex.Pattern;\n",
      "\n",
      "/**\n",
      " * {@link ISvgNodeRenderer} implementation for the &lt;path&gt; tag.\n",
      " */\n",
      "public class PathSvgNodeRenderer extends AbstractSvgNodeRenderer implements IMarkerCapable {\n",
      "\n",
      "    private static final String SPACE_CHAR = \" \";\n",
      "\n",
      "    /**\n",
      "     * The regular expression to find invalid operators in the <a href=\"https://www.w3.org/TR/SVG/paths.html#PathData\">PathData\n",
      "     * attribute of the &lt;path&gt; element</a>\n",
      "     * <p>\n",
      "     * Find any occurrence of a letter that is not an operator\n",
      "     */\n",
      "    private static final String INVALID_OPERATOR_REGEX = \"(?:(?![mzlhvcsqtae])\\\\p{L})\";\n",
      "    private static final Pattern INVALID_REGEX_PATTERN = Pattern.compile(INVALID_OPERATOR_REGEX, Pattern.CASE_INSENSITIVE);\n",
      "\n",
      "    /**\n",
      "     * The regular expression to split the <a href=\"https://www.w3.org/TR/SVG/paths.html#PathData\">PathData attribute of\n",
      "     * the &lt;path&gt; element</a>\n",
      "     * <p>\n",
      "     * Since {@link PathSvgNodeRenderer#containsInvalidAttributes(String)} is called before the use of this expression\n",
      "     * in {@link PathSvgNodeRenderer#parsePathOperations()} the attribute to be split is valid.\n",
      "     * <p>\n",
      "     * SVG defines 6 types of path commands, for a total of 20 commands:\n",
      "     * <p>\n",
      "     * MoveTo: M, m\n",
      "     * LineTo: L, l, H, h, V, v\n",
      "     * Cubic Bezier Curve: C, c, S, s\n",
      "     * Quadratic Bezier Curve: Q, q, T, t\n",
      "     * Elliptical Arc Curve: A, a\n",
      "     * ClosePath: Z, z\n",
      "     */\n",
      "    private static final Pattern SPLIT_PATTERN = Pattern.compile(\"(?=[mlhvcsqtaz])\", Pattern.CASE_INSENSITIVE);\n",
      "\n",
      "    /**\n",
      "     * The {@link ClosePath} shape keeping track of the initial point set by a {@link MoveTo} operation.\n",
      "     * The original value is {@code null}, and must be set via a {@link MoveTo} operation before it may be drawn.\n",
      "     */\n",
      "    private ClosePath zOperator = null;\n",
      "\n",
      "    @Override\n",
      "    public void doDraw(SvgDrawContext context) {\n",
      "        PdfCanvas canvas = context.getCurrentCanvas();\n",
      "        canvas.writeLiteral(\"% path\\n\");\n",
      "        for (IPathShape item : getShapes()) {\n",
      "            item.draw(canvas);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public ISvgNodeRenderer createDeepCopy() {\n",
      "        PathSvgNodeRenderer copy = new PathSvgNodeRenderer();\n",
      "        deepCopyAttributesAndStyles(copy);\n",
      "        return copy;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Rectangle getObjectBoundingBox(SvgDrawContext context) {\n",
      "        Point lastPoint = null;\n",
      "        Rectangle commonRectangle = null;\n",
      "        for (IPathShape item : getShapes()) {\n",
      "            if (lastPoint == null) {\n",
      "                lastPoint = item.getEndingPoint();\n",
      "            }\n",
      "            Rectangle rectangle = item.getPathShapeRectangle(lastPoint);\n",
      "            commonRectangle = Rectangle.getCommonRectangle(commonRectangle, rectangle);\n",
      "\n",
      "            lastPoint = item.getEndingPoint();\n",
      "        }\n",
      "        return commonRectangle;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets the coordinates that shall be passed to {@link IPathShape#setCoordinates} for the current shape.\n",
      "     *\n",
      "     * @param shape          The current shape.\n",
      "     * @param previousShape  The previous shape which can affect the coordinates of the current shape.\n",
      "     * @param pathProperties The operator and all arguments as an array of {@link String String}s\n",
      "     * @return a {@link String} array of coordinates that shall be passed to {@link IPathShape#setCoordinates}\n",
      "     */\n",
      "    private String[] getShapeCoordinates(IPathShape shape, IPathShape previousShape, String[] pathProperties) {\n",
      "        if (shape instanceof ClosePath) {\n",
      "            return null;\n",
      "        }\n",
      "        String[] shapeCoordinates = null;\n",
      "        if (shape instanceof SmoothSCurveTo || shape instanceof QuadraticSmoothCurveTo) {\n",
      "            String[] startingControlPoint = new String[2];\n",
      "            if (previousShape != null) {\n",
      "                Point previousEndPoint = previousShape.getEndingPoint();\n",
      "                // If the previous command was a Bezier curve, use its last control point\n",
      "                if (previousShape instanceof IControlPointCurve) {\n",
      "                    Point lastControlPoint = ((IControlPointCurve) previousShape).getLastControlPoint();\n",
      "                    float reflectedX = (float) (2 * previousEndPoint.getX() - lastControlPoint.getX());\n",
      "                    float reflectedY = (float) (2 * previousEndPoint.getY() - lastControlPoint.getY());\n",
      "\n",
      "                    startingControlPoint[0] = SvgCssUtils.convertFloatToString(reflectedX);\n",
      "                    startingControlPoint[1] = SvgCssUtils.convertFloatToString(reflectedY);\n",
      "                } else {\n",
      "                    startingControlPoint[0] = SvgCssUtils.convertDoubleToString(previousEndPoint.getX());\n",
      "                    startingControlPoint[1] = SvgCssUtils.convertDoubleToString(previousEndPoint.getY());\n",
      "                }\n",
      "            } else {\n",
      "                throw new SvgProcessingException(SvgExceptionMessageConstant.INVALID_SMOOTH_CURVE_USE);\n",
      "            }\n",
      "            shapeCoordinates = concatenate(startingControlPoint, pathProperties);\n",
      "        }\n",
      "        if (shapeCoordinates == null) {\n",
      "            shapeCoordinates = pathProperties;\n",
      "        }\n",
      "        return shapeCoordinates;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Processes an individual pathing operator and all of its arguments, converting into one or more\n",
      "     * {@link IPathShape} objects.\n",
      "     *\n",
      "     * @param pathProperties The property operator and all arguments as an array of {@link String}s\n",
      "     * @param previousShape  The previous shape which can affect the positioning of the current shape. If no previous\n",
      "     *                       shape exists {@code null} is passed.\n",
      "     * @return a {@link List} of each {@link IPathShape} that should be drawn to represent the operator.\n",
      "     */\n",
      "    private List<IPathShape> processPathOperator(String[] pathProperties, IPathShape previousShape) {\n",
      "        List<IPathShape> shapes = new ArrayList<>();\n",
      "        if (pathProperties.length == 0 || pathProperties[0].isEmpty()\n",
      "                || SvgPathShapeFactory.getArgumentCount(pathProperties[0]) < 0) {\n",
      "            return shapes;\n",
      "        }\n",
      "\n",
      "        int argumentCount = SvgPathShapeFactory.getArgumentCount(pathProperties[0]);\n",
      "        if (argumentCount == 0) { // closePath operator\n",
      "            if (previousShape == null) {\n",
      "                throw new SvgProcessingException(SvgExceptionMessageConstant.INVALID_CLOSEPATH_OPERATOR_USE);\n",
      "            }\n",
      "            shapes.add(zOperator);\n",
      "            return shapes;\n",
      "        }\n",
      "        for (int index = 1; index < pathProperties.length; index += argumentCount) {\n",
      "            if (index + argumentCount > pathProperties.length) {\n",
      "                break;\n",
      "            }\n",
      "            IPathShape pathShape = SvgPathShapeFactory.createPathShape(pathProperties[0]);\n",
      "            if (pathShape instanceof MoveTo) {\n",
      "                shapes.addAll(addMoveToShapes(pathShape, pathProperties, previousShape));\n",
      "                return shapes;\n",
      "            }\n",
      "\n",
      "            String[] shapeCoordinates = getShapeCoordinates(pathShape, previousShape,\n",
      "                    Arrays.copyOfRange(pathProperties, index, index + argumentCount));\n",
      "            if (pathShape != null) {\n",
      "                if (shapeCoordinates != null) {\n",
      "                    pathShape.setCoordinates(shapeCoordinates, getCurrentPoint(previousShape));\n",
      "                }\n",
      "                shapes.add(pathShape);\n",
      "            }\n",
      "            previousShape = pathShape;\n",
      "        }\n",
      "        return shapes;\n",
      "    }\n",
      "\n",
      "    private List<IPathShape> addMoveToShapes(IPathShape pathShape, String[] pathProperties,\n",
      "            IPathShape beforeMoveShape) {\n",
      "        List<IPathShape> shapes = new ArrayList<>();\n",
      "        int argumentCount = 2;\n",
      "        String[] shapeCoordinates = getShapeCoordinates(pathShape, beforeMoveShape,\n",
      "                Arrays.copyOfRange(pathProperties, 1, 3));\n",
      "        zOperator = new ClosePath(pathShape.isRelative());\n",
      "        final Point currentPointBeforeMove = getCurrentPoint(beforeMoveShape);\n",
      "        zOperator.setCoordinates(shapeCoordinates, currentPointBeforeMove);\n",
      "        pathShape.setCoordinates(shapeCoordinates, currentPointBeforeMove);\n",
      "        shapes.add(pathShape);\n",
      "        IPathShape previousShape = pathShape;\n",
      "        if (pathProperties.length > 3) {\n",
      "            for (int index = 3; index < pathProperties.length; index += argumentCount) {\n",
      "                if (index + 2 > pathProperties.length) {\n",
      "                    break;\n",
      "                }\n",
      "                pathShape = pathShape.isRelative() ? SvgPathShapeFactory.createPathShape(\"l\")\n",
      "                        : SvgPathShapeFactory.createPathShape(\"L\");\n",
      "                shapeCoordinates = getShapeCoordinates(pathShape, previousShape,\n",
      "                        Arrays.copyOfRange(pathProperties, index, index + 2));\n",
      "                pathShape.setCoordinates(shapeCoordinates, previousShape.getEndingPoint());\n",
      "                shapes.add(pathShape);\n",
      "                previousShape = pathShape;\n",
      "            }\n",
      "        }\n",
      "        return shapes;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Processes the {@link SvgConstants.Attributes#D} {@link PathSvgNodeRenderer#attributesAndStyles} and converts them\n",
      "     * into one or more {@link IPathShape} objects to be drawn on the canvas.\n",
      "     * <p>\n",
      "     * Each individual operator is passed to {@link PathSvgNodeRenderer#processPathOperator(String[], IPathShape)} to be\n",
      "     * processed individually.\n",
      "     *\n",
      "     * @return a {@link Collection} of each {@link IPathShape} that should be drawn to represent the path.\n",
      "     */\n",
      "    Collection<IPathShape> getShapes() {\n",
      "        Collection<String> parsedResults = parsePathOperations();\n",
      "        List<IPathShape> shapes = new ArrayList<>();\n",
      "\n",
      "        for (String parsedResult : parsedResults) {\n",
      "            String[] pathProperties = parsedResult.split(\" +\");\n",
      "            IPathShape previousShape = shapes.size() == 0 ? null : shapes.get(shapes.size() - 1);\n",
      "            List<IPathShape> operatorShapes = processPathOperator(pathProperties, previousShape);\n",
      "            shapes.addAll(operatorShapes);\n",
      "        }\n",
      "        return shapes;\n",
      "    }\n",
      "\n",
      "    private static String[] concatenate(String[] first, String[] second) {\n",
      "        String[] arr = new String[first.length + second.length];\n",
      "        System.arraycopy(first, 0, arr, 0, first.length);\n",
      "        System.arraycopy(second, 0, arr, first.length, second.length);\n",
      "        return arr;\n",
      "    }\n",
      "\n",
      "\n",
      "    boolean containsInvalidAttributes(String attributes) {\n",
      "        return INVALID_REGEX_PATTERN.matcher(attributes).find();\n",
      "    }\n",
      "\n",
      "    Collection<String> parsePathOperations() {\n",
      "        Collection<String> result = new ArrayList<>();\n",
      "        String pathString = attributesAndStyles.get(SvgConstants.Attributes.D);\n",
      "        if (pathString == null) {\n",
      "            pathString = \"\";\n",
      "        }\n",
      "        if (containsInvalidAttributes(pathString)) {\n",
      "            throw new SvgProcessingException(SvgExceptionMessageConstant.INVALID_PATH_D_ATTRIBUTE_OPERATORS)\n",
      "                    .setMessageParams(pathString);\n",
      "        }\n",
      "\n",
      "        String[] operators = splitPathStringIntoOperators(pathString);\n",
      "\n",
      "        for (String inst : operators) {\n",
      "            String instTrim = inst.trim();\n",
      "            if (!instTrim.isEmpty()) {\n",
      "                char instruction = instTrim.charAt(0);\n",
      "                String temp = instruction + SPACE_CHAR + instTrim.substring(1).replace(\",\", SPACE_CHAR).trim();\n",
      "                // Do a run-through for decimal point separation\n",
      "                temp = separateDecimalPoints(temp);\n",
      "                result.add(temp);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        return result;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Iterate over the input string and separate numbers from each other with space chars\n",
      "     */\n",
      "    String separateDecimalPoints(String input) {\n",
      "        // If a space or minus sign is found reset\n",
      "        // If a another point is found, add an extra space on before the point\n",
      "        StringBuilder res = new StringBuilder();\n",
      "        // We are now among the digits to the right of the decimal point\n",
      "        boolean fractionalPartAfterDecimalPoint = false;\n",
      "        // We are now among the exponent magnitude part\n",
      "        boolean exponentSignMagnitude = false;\n",
      "        for (int i = 0; i < input.length(); i++) {\n",
      "            char c = input.charAt(i);\n",
      "            // Resetting flags\n",
      "            if (c == '-' || Character.isWhitespace(c)) {\n",
      "                fractionalPartAfterDecimalPoint = false;\n",
      "            }\n",
      "            if (Character.isWhitespace(c)) {\n",
      "                exponentSignMagnitude = false;\n",
      "            }\n",
      "\n",
      "            // Add extra space before the next number starting from '.', or before the next number starting with '-'\n",
      "            if (endsWithNonWhitespace(res) && (c == '.' && fractionalPartAfterDecimalPoint ||\n",
      "                    c == '-' && !exponentSignMagnitude)) {\n",
      "                res.append(\" \");\n",
      "            }\n",
      "\n",
      "            if (c == '.') {\n",
      "                fractionalPartAfterDecimalPoint = true;\n",
      "            } else if (Character.toLowerCase(c) == 'e') {\n",
      "                exponentSignMagnitude = true;\n",
      "            }\n",
      "\n",
      "            res.append(c);\n",
      "        }\n",
      "        return res.toString();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets an array of strings representing operators with their arguments, e.g. {\"M 100 100\", \"L 300 100\", \"L200,\n",
      "     * 300\", \"z\"}\n",
      "     */\n",
      "    static String[] splitPathStringIntoOperators(String path) {\n",
      "        return SPLIT_PATTERN.split(path);\n",
      "    }\n",
      "\n",
      "    private static boolean endsWithNonWhitespace(StringBuilder sb) {\n",
      "        return sb.length() > 0 && !Character.isWhitespace(sb.charAt(sb.length() - 1));\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void drawMarker(SvgDrawContext context, final MarkerVertexType markerVertexType) {\n",
      "        Object[] allShapesOrdered = getShapes().toArray();\n",
      "        Point point = null;\n",
      "        if (MarkerVertexType.MARKER_START.equals(markerVertexType)) {\n",
      "            point = ((AbstractPathShape) allShapesOrdered[0]).getEndingPoint();\n",
      "        } else if (MarkerVertexType.MARKER_END.equals(markerVertexType)) {\n",
      "            point = ((AbstractPathShape) allShapesOrdered[allShapesOrdered.length - 1])\n",
      "                    .getEndingPoint();\n",
      "        }\n",
      "        if (point != null) {\n",
      "            String moveX = SvgCssUtils.convertDoubleToString(point.x);\n",
      "            String moveY = SvgCssUtils.convertDoubleToString(point.y);\n",
      "            MarkerSvgNodeRenderer.drawMarker(context, moveX, moveY, markerVertexType, this);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public double getAutoOrientAngle(MarkerSvgNodeRenderer marker, boolean reverse) {\n",
      "        Object[] pathShapes = getShapes().toArray();\n",
      "        if (pathShapes.length > 1) {\n",
      "            Vector v = new Vector(0, 0, 0);\n",
      "            if (SvgConstants.Attributes.MARKER_END.equals(marker.attributesAndStyles.get(SvgConstants.Tags.MARKER))) {\n",
      "                // Create vector from the last two shapes\n",
      "                IPathShape lastShape = (IPathShape) pathShapes[pathShapes.length - 1];\n",
      "                IPathShape secondToLastShape = (IPathShape) pathShapes[pathShapes.length - 2];\n",
      "                v = new Vector((float) (lastShape.getEndingPoint().getX() - secondToLastShape.getEndingPoint().getX()),\n",
      "                        (float) (lastShape.getEndingPoint().getY() - secondToLastShape.getEndingPoint().getY()),\n",
      "                        0f);\n",
      "            } else if (SvgConstants.Attributes.MARKER_START\n",
      "                    .equals(marker.attributesAndStyles.get(SvgConstants.Tags.MARKER))) {\n",
      "                // Create vector from the first two shapes\n",
      "                IPathShape firstShape = (IPathShape) pathShapes[0];\n",
      "                IPathShape secondShape = (IPathShape) pathShapes[1];\n",
      "                v = new Vector((float) (secondShape.getEndingPoint().getX() - firstShape.getEndingPoint().getX()),\n",
      "                        (float) (secondShape.getEndingPoint().getY() - firstShape.getEndingPoint().getY()),\n",
      "                        0f);\n",
      "            }\n",
      "            // Get angle from this vector and the horizontal axis\n",
      "            Vector xAxis = new Vector(1, 0, 0);\n",
      "            double rotAngle = SvgCoordinateUtils.calculateAngleBetweenTwoVectors(xAxis, v);\n",
      "            return v.get(1) >= 0 && !reverse ? rotAngle : rotAngle * -1f;\n",
      "        }\n",
      "        return 0;\n",
      "    }\n",
      "\n",
      "    private static Point getCurrentPoint(IPathShape previousShape) {\n",
      "        return previousShape == null ? new Point(0, 0) : previousShape.getEndingPoint();\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.svg.renderers.impl;\n",
      "\n",
      "import com.itextpdf.commons.utils.FileUtil;\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "import com.itextpdf.kernel.pdf.PdfWriter;\n",
      "import com.itextpdf.kernel.pdf.canvas.PdfCanvas;\n",
      "import com.itextpdf.kernel.utils.CompareTool;\n",
      "import com.itextpdf.styledxmlparser.node.IElementNode;\n",
      "import com.itextpdf.styledxmlparser.node.impl.jsoup.JsoupXmlParser;\n",
      "import com.itextpdf.svg.exceptions.SvgProcessingException;\n",
      "import com.itextpdf.svg.processors.impl.DefaultSvgProcessor;\n",
      "import com.itextpdf.svg.renderers.IBranchSvgNodeRenderer;\n",
      "import com.itextpdf.svg.renderers.ISvgNodeRenderer;\n",
      "import com.itextpdf.svg.renderers.SvgDrawContext;\n",
      "import com.itextpdf.svg.renderers.SvgIntegrationTest;\n",
      "import com.itextpdf.test.ITextTest;\n",
      "import com.itextpdf.test.annotations.type.IntegrationTest;\n",
      "\n",
      "import java.io.IOException;\n",
      "import java.io.InputStream;\n",
      "import java.util.HashMap;\n",
      "import java.util.Map;\n",
      "import org.junit.Assert;\n",
      "import org.junit.BeforeClass;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(IntegrationTest.class)\n",
      "public class PathSvgNodeRendererTest extends SvgIntegrationTest {\n",
      "\n",
      "    public static final String sourceFolder = \"./src/test/resources/com/itextpdf/svg/renderers/impl/PathSvgNodeRendererTest/\";\n",
      "    public static final String destinationFolder = \"./target/test/com/itextpdf/svg/renderers/impl/PathSvgNodeRendererTest/\";\n",
      "\n",
      "    @BeforeClass\n",
      "    public static void beforeClass() {\n",
      "        ITextTest.createDestinationFolder(destinationFolder);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void pathNodeRendererMoveToTest() throws IOException, InterruptedException {\n",
      "        String filename = \"pathNodeRendererMoveToTest.pdf\";\n",
      "        PdfDocument doc = new PdfDocument(new PdfWriter(destinationFolder + filename));\n",
      "        doc.addNewPage();\n",
      "\n",
      "        Map<String, String> pathShapes = new HashMap<String, String>();\n",
      "        pathShapes.put(\"d\", \"M 100,100, L300,100,L200,300,z\");\n",
      "\n",
      "\n",
      "        ISvgNodeRenderer pathRenderer = new PathSvgNodeRenderer();\n",
      "        pathRenderer.setAttributesAndStyles(pathShapes);\n",
      "\n",
      "        SvgDrawContext context = new SvgDrawContext(null, null);\n",
      "        PdfCanvas cv = new PdfCanvas(doc, 1);\n",
      "        context.pushCanvas(cv);\n",
      "        pathRenderer.draw(context);\n",
      "        doc.close();\n",
      "\n",
      "        String result = new CompareTool().compareByContent(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder, \"diff_\");\n",
      "\n",
      "        if (result != null && ! result.contains(\"No visual differences\")) {\n",
      "            Assert.fail(result);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void pathNodeRendererMoveToTest1() throws IOException, InterruptedException {\n",
      "        String filename = \"pathNodeRendererMoveToTest1.pdf\";\n",
      "        PdfDocument doc = new PdfDocument(new PdfWriter(destinationFolder + filename));\n",
      "        doc.addNewPage();\n",
      "\n",
      "        Map<String, String> pathShapes = new HashMap<String, String>();\n",
      "        pathShapes.put(\"d\", \"M 100 100 l300 100 L200 300 z\");\n",
      "\n",
      "        ISvgNodeRenderer pathRenderer = new PathSvgNodeRenderer();\n",
      "        pathRenderer.setAttributesAndStyles(pathShapes);\n",
      "\n",
      "        SvgDrawContext context = new SvgDrawContext(null, null);\n",
      "        PdfCanvas cv = new PdfCanvas(doc, 1);\n",
      "        context.pushCanvas(cv);\n",
      "        pathRenderer.draw(context);\n",
      "        doc.close();\n",
      "\n",
      "        String result = new CompareTool().compareByContent(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder, \"diff_\");\n",
      "\n",
      "        if (result != null && ! result.contains(\"No visual differences\")) {\n",
      "            Assert.fail(result);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void pathNodeRendererCurveToTest() throws IOException, InterruptedException {\n",
      "        String filename = \"pathNodeRendererCurveToTest.pdf\";\n",
      "        PdfDocument doc = new PdfDocument(new PdfWriter(destinationFolder + filename));\n",
      "        doc.addNewPage();\n",
      "\n",
      "        Map<String, String> pathShapes = new HashMap<String, String>();\n",
      "        pathShapes.put(\"d\", \"M100,200 C100,100 250,100 250,200 S400,300 400,200,z\");\n",
      "\n",
      "\n",
      "        ISvgNodeRenderer pathRenderer = new PathSvgNodeRenderer();\n",
      "        pathRenderer.setAttributesAndStyles(pathShapes);\n",
      "\n",
      "        SvgDrawContext context = new SvgDrawContext(null, null);\n",
      "        PdfCanvas cv = new PdfCanvas(doc, 1);\n",
      "        context.pushCanvas(cv);\n",
      "        pathRenderer.draw(context);\n",
      "        doc.close();\n",
      "        String result = new CompareTool().compareByContent(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder, \"diff_\");\n",
      "\n",
      "        if (result != null && ! result.contains(\"No visual differences\")) {\n",
      "            Assert.fail(result);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void pathNodeRendererCurveToTest1() throws IOException, InterruptedException {\n",
      "        String filename = \"pathNodeRendererCurveToTest1.pdf\";\n",
      "        PdfDocument doc = new PdfDocument(new PdfWriter(destinationFolder + filename));\n",
      "        doc.addNewPage();\n",
      "\n",
      "        Map<String, String> pathShapes = new HashMap<String, String>();\n",
      "        pathShapes.put(\"d\", \"M100 200 C100 300 250 300 250 200 S400 100 400 200 z\");\n",
      "\n",
      "        ISvgNodeRenderer pathRenderer = new PathSvgNodeRenderer();\n",
      "        pathRenderer.setAttributesAndStyles(pathShapes);\n",
      "\n",
      "        SvgDrawContext context = new SvgDrawContext(null, null);\n",
      "        PdfCanvas cv = new PdfCanvas(doc, 1);\n",
      "        context.pushCanvas(cv);\n",
      "        pathRenderer.draw(context);\n",
      "        doc.close();\n",
      "\n",
      "        String result = new CompareTool().compareByContent(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder, \"diff_\");\n",
      "\n",
      "        if (result != null && ! result.contains(\"No visual differences\")) {\n",
      "            Assert.fail(result);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void pathNodeRendererQCurveToCurveToTest() throws IOException, InterruptedException {\n",
      "        String filename = \"pathNodeRendererQCurveToCurveToTest.pdf\";\n",
      "        PdfDocument doc = new PdfDocument(new PdfWriter(destinationFolder + filename));\n",
      "        doc.addNewPage();\n",
      "\n",
      "        Map<String, String> pathShapes = new HashMap<String, String>();\n",
      "        pathShapes.put(\"d\", \"M200,300 Q400,50 600,300,z\");\n",
      "\n",
      "        ISvgNodeRenderer pathRenderer = new PathSvgNodeRenderer();\n",
      "        pathRenderer.setAttributesAndStyles(pathShapes);\n",
      "\n",
      "        SvgDrawContext context = new SvgDrawContext(null, null);\n",
      "        PdfCanvas cv = new PdfCanvas(doc, 1);\n",
      "        context.pushCanvas(cv);\n",
      "        pathRenderer.draw(context);\n",
      "        doc.close();\n",
      "        String result = new CompareTool().compareByContent(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder, \"diff_\");\n",
      "\n",
      "        if (result != null && ! result.contains(\"No visual differences\")) {\n",
      "            Assert.fail(result);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void pathNodeRendererQCurveToCurveToTest1() throws IOException, InterruptedException {\n",
      "        String filename = \"pathNodeRendererQCurveToCurveToTest1.pdf\";\n",
      "        PdfDocument doc = new PdfDocument(new PdfWriter(destinationFolder + filename));\n",
      "        doc.addNewPage();\n",
      "\n",
      "        Map<String, String> pathShapes = new HashMap<String, String>();\n",
      "        pathShapes.put(\"d\", \"M200 300 Q400 50 600 300 z\");\n",
      "\n",
      "        ISvgNodeRenderer pathRenderer = new PathSvgNodeRenderer();\n",
      "        pathRenderer.setAttributesAndStyles(pathShapes);\n",
      "\n",
      "        SvgDrawContext context = new SvgDrawContext(null, null);\n",
      "        PdfCanvas cv = new PdfCanvas(doc, 1);\n",
      "        context.pushCanvas(cv);\n",
      "        pathRenderer.draw(context);\n",
      "        doc.close();\n",
      "        String result = new CompareTool().compareByContent(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder, \"diff_\");\n",
      "\n",
      "        if (result != null && ! result.contains(\"No visual differences\")) {\n",
      "            Assert.fail(result);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void smoothCurveTest1() throws IOException {\n",
      "        String filename = \"smoothCurveTest1.pdf\";\n",
      "        PdfDocument doc = new PdfDocument(new PdfWriter(destinationFolder + filename));\n",
      "        doc.addNewPage();\n",
      "\n",
      "        String svgFilename = \"smoothCurveTest1.svg\";\n",
      "        InputStream xmlStream = FileUtil.getInputStreamForFile(sourceFolder + svgFilename);\n",
      "        IElementNode rootTag = new JsoupXmlParser().parse(xmlStream, \"ISO-8859-1\");\n",
      "\n",
      "        DefaultSvgProcessor processor = new DefaultSvgProcessor();\n",
      "        IBranchSvgNodeRenderer root = (IBranchSvgNodeRenderer) processor.process(rootTag, null).getRootRenderer();\n",
      "\n",
      "        SvgDrawContext context = new SvgDrawContext(null, null);\n",
      "        PdfCanvas cv = new PdfCanvas(doc, 1);\n",
      "        context.pushCanvas(cv);\n",
      "        Assert.assertTrue(root.getChildren().get(0) instanceof PathSvgNodeRenderer);\n",
      "        root.getChildren().get(0).draw(context);\n",
      "        doc.close();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void smoothCurveTest2() throws IOException {\n",
      "        String filename = \"smoothCurveTest2.pdf\";\n",
      "        PdfDocument doc = new PdfDocument(new PdfWriter(destinationFolder + filename));\n",
      "        doc.addNewPage();\n",
      "\n",
      "        String svgFilename = \"smoothCurveTest2.svg\";\n",
      "        InputStream xmlStream = FileUtil.getInputStreamForFile(sourceFolder + svgFilename);\n",
      "        IElementNode rootTag = new JsoupXmlParser().parse(xmlStream, \"ISO-8859-1\");\n",
      "\n",
      "        DefaultSvgProcessor processor = new DefaultSvgProcessor();\n",
      "        IBranchSvgNodeRenderer root = (IBranchSvgNodeRenderer) processor.process(rootTag, null).getRootRenderer();\n",
      "\n",
      "        SvgDrawContext context = new SvgDrawContext(null, null);\n",
      "        PdfCanvas cv = new PdfCanvas(doc, 1);\n",
      "        context.pushCanvas(cv);\n",
      "        Assert.assertTrue(root.getChildren().get(0) instanceof PathSvgNodeRenderer);\n",
      "        root.getChildren().get(0).draw(context);\n",
      "        doc.close();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void smoothCurveTest3() throws IOException {\n",
      "        String filename = \"smoothCurveTest3.pdf\";\n",
      "        PdfDocument doc = new PdfDocument(new PdfWriter(destinationFolder + filename));\n",
      "        doc.addNewPage();\n",
      "\n",
      "        String svgFilename = \"smoothCurveTest3.svg\";\n",
      "        InputStream xmlStream = FileUtil.getInputStreamForFile(sourceFolder + svgFilename);\n",
      "        IElementNode rootTag = new JsoupXmlParser().parse(xmlStream, \"ISO-8859-1\");\n",
      "\n",
      "        DefaultSvgProcessor processor = new DefaultSvgProcessor();\n",
      "        IBranchSvgNodeRenderer root = (IBranchSvgNodeRenderer) processor.process(rootTag, null).getRootRenderer();\n",
      "\n",
      "        SvgDrawContext context = new SvgDrawContext(null, null);\n",
      "        PdfCanvas cv = new PdfCanvas(doc, 1);\n",
      "        context.pushCanvas(cv);\n",
      "        Assert.assertTrue(root.getChildren().get(0) instanceof PathSvgNodeRenderer);\n",
      "        root.getChildren().get(0).draw(context);\n",
      "        doc.close();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void pathNodeRendererCurveComplexTest() throws IOException, InterruptedException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"curves\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void pathZOperatorMultipleZTest() throws IOException, InterruptedException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"pathZOperatorMultipleZTest\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void pathZOperatorSingleZTest() throws IOException, InterruptedException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"pathZOperatorSingleZTest\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void pathZOperatorSingleZInstructionsAfterTest() throws IOException, InterruptedException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"pathZOperatorSingleZInstructionsAfterTest\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void invalidZOperatorTest() throws IOException, InterruptedException {\n",
      "        Assert.assertThrows(SvgProcessingException.class,\n",
      "                () -> convertAndCompare(sourceFolder, destinationFolder, \"invalidZOperatorTest01\")\n",
      "        );\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void invalidOperatorTest() throws IOException, InterruptedException {\n",
      "        Assert.assertThrows(SvgProcessingException.class,\n",
      "                () -> convertAndCompare(sourceFolder, destinationFolder, \"invalidOperatorTest01\")\n",
      "        );\n",
      "    }\n",
      "\n",
      "\n",
      "    //TODO DEVSIX-2242. This test should fail when the ticket is resolved\n",
      "    @Test\n",
      "    public void pathLOperatorMultipleCoordinates() throws IOException, InterruptedException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"pathLOperatorMultipleCoordinates\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void pathVOperatorTest() throws IOException, InterruptedException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"pathVOperatorTest01\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void pathZOperatorContinuePathingTest() throws IOException, InterruptedException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"pathZOperatorContinuePathingTest\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void pathVOperatorMultipleArgumentsTest() throws IOException, InterruptedException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"pathVOperatorMultipleArgumentsTest\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void pathHOperatorSimpleTest() throws IOException, InterruptedException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"pathHOperatorSimpleTest\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void pathHandVOperatorTest() throws IOException, InterruptedException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"pathHandVOperatorTest\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void curveToContinuePathingTest() throws IOException, InterruptedException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"curveToContinuePathingTest\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void relativeHorizontalLineToTest() throws IOException, InterruptedException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"relativeHorizontalLineTo\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void relativeVerticalLineToTest() throws IOException, InterruptedException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"relativeVerticalLineTo\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void combinedRelativeVerticalLineToAndRelativeHorizontalLineToTest() throws IOException, InterruptedException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"combinedRelativeVerticalLineToAndRelativeHorizontalLineTo\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void multipleRelativeHorizontalLineToTest() throws IOException, InterruptedException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"multipleRelativeHorizontalLineTo\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void multipleRelativeVerticalLineToTest() throws IOException, InterruptedException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"multipleRelativeVerticalLineTo\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void moveToRelativeMultipleTest() throws IOException, InterruptedException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"moveToRelativeMultiple\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void moveToAbsoluteMultipleTest() throws IOException, InterruptedException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"moveToAbsoluteMultiple\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void iTextLogoTest() throws IOException, InterruptedException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"iTextLogo\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void eofillUnsuportedPathTest() throws IOException, InterruptedException {\n",
      "        Assert.assertThrows(SvgProcessingException.class,\n",
      "                () -> convertAndCompare(sourceFolder, destinationFolder, \"eofillUnsuportedPathTest\")\n",
      "        );\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void multiplePairsAfterMoveToRelativeTest() throws IOException, InterruptedException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"multiplePairsAfterMoveToRelative\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void multiplePairsAfterMoveToAbsoluteTest() throws IOException, InterruptedException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"multiplePairsAfterMoveToAbsolute\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void pathHOperatorAbsoluteAfterMultiplePairsTest() throws IOException, InterruptedException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"pathHOperatorAbsoluteAfterMultiplePairs\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void pathHOperatorRelativeAfterMultiplePairsTest() throws IOException, InterruptedException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"pathHOperatorRelativeAfterMultiplePairs\");\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "PathSvgNodeRenderer::::doDraw(com.itextpdf.svg.renderers.SvgDrawContext)": [
        93,
        100
      ],
      "PathSvgNodeRenderer::::createDeepCopy()": [
        102,
        107
      ],
      "PathSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)": [
        109,
        123
      ],
      "PathSvgNodeRenderer::::getShapeCoordinates(com.itextpdf.svg.renderers.path.IPathShape,com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[])": [
        133,
        163
      ],
      "PathSvgNodeRenderer::::processPathOperator(java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)": [
        174,
        210
      ],
      "PathSvgNodeRenderer::::addMoveToShapes(com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)": [
        212,
        239
      ],
      "PathSvgNodeRenderer::::getShapes()": [
        250,
        261
      ],
      "PathSvgNodeRenderer::::concatenate(java.lang.String[],java.lang.String[])": [
        263,
        268
      ],
      "PathSvgNodeRenderer::::containsInvalidAttributes(java.lang.String)": [
        271,
        273
      ],
      "PathSvgNodeRenderer::::parsePathOperations()": [
        275,
        300
      ],
      "PathSvgNodeRenderer::::separateDecimalPoints(java.lang.String)": [
        305,
        338
      ],
      "PathSvgNodeRenderer::::splitPathStringIntoOperators(java.lang.String)": [
        344,
        346
      ],
      "PathSvgNodeRenderer::::endsWithNonWhitespace(java.lang.StringBuilder)": [
        348,
        350
      ],
      "PathSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)": [
        352,
        367
      ],
      "PathSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)": [
        369,
        396
      ],
      "PathSvgNodeRenderer::::getCurrentPoint(com.itextpdf.svg.renderers.path.IPathShape)": [
        398,
        400
      ]
    },
    "test_method_lines_dic": {
      "PathSvgNodeRendererTest::::beforeClass()": [
        56,
        59
      ],
      "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest()": [
        61,
        85
      ],
      "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest1()": [
        87,
        110
      ],
      "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest()": [
        112,
        135
      ],
      "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest1()": [
        137,
        160
      ],
      "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest()": [
        162,
        184
      ],
      "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest1()": [
        186,
        208
      ],
      "PathSvgNodeRendererTest::::smoothCurveTest1()": [
        210,
        229
      ],
      "PathSvgNodeRendererTest::::smoothCurveTest2()": [
        231,
        250
      ],
      "PathSvgNodeRendererTest::::smoothCurveTest3()": [
        252,
        271
      ],
      "PathSvgNodeRendererTest::::pathNodeRendererCurveComplexTest()": [
        273,
        276
      ],
      "PathSvgNodeRendererTest::::pathZOperatorMultipleZTest()": [
        278,
        281
      ],
      "PathSvgNodeRendererTest::::pathZOperatorSingleZTest()": [
        283,
        286
      ],
      "PathSvgNodeRendererTest::::pathZOperatorSingleZInstructionsAfterTest()": [
        288,
        291
      ],
      "PathSvgNodeRendererTest::::invalidZOperatorTest()": [
        293,
        298
      ],
      "PathSvgNodeRendererTest::::invalidOperatorTest()": [
        300,
        305
      ],
      "PathSvgNodeRendererTest::::pathLOperatorMultipleCoordinates()": [
        309,
        312
      ],
      "PathSvgNodeRendererTest::::pathVOperatorTest()": [
        314,
        317
      ],
      "PathSvgNodeRendererTest::::pathZOperatorContinuePathingTest()": [
        319,
        322
      ],
      "PathSvgNodeRendererTest::::pathVOperatorMultipleArgumentsTest()": [
        324,
        327
      ],
      "PathSvgNodeRendererTest::::pathHOperatorSimpleTest()": [
        329,
        332
      ],
      "PathSvgNodeRendererTest::::pathHandVOperatorTest()": [
        334,
        337
      ],
      "PathSvgNodeRendererTest::::curveToContinuePathingTest()": [
        339,
        342
      ],
      "PathSvgNodeRendererTest::::relativeHorizontalLineToTest()": [
        344,
        347
      ],
      "PathSvgNodeRendererTest::::relativeVerticalLineToTest()": [
        349,
        352
      ],
      "PathSvgNodeRendererTest::::combinedRelativeVerticalLineToAndRelativeHorizontalLineToTest()": [
        354,
        357
      ],
      "PathSvgNodeRendererTest::::multipleRelativeHorizontalLineToTest()": [
        359,
        362
      ],
      "PathSvgNodeRendererTest::::multipleRelativeVerticalLineToTest()": [
        364,
        367
      ],
      "PathSvgNodeRendererTest::::moveToRelativeMultipleTest()": [
        369,
        372
      ],
      "PathSvgNodeRendererTest::::moveToAbsoluteMultipleTest()": [
        374,
        377
      ],
      "PathSvgNodeRendererTest::::iTextLogoTest()": [
        379,
        382
      ],
      "PathSvgNodeRendererTest::::eofillUnsuportedPathTest()": [
        384,
        389
      ],
      "PathSvgNodeRendererTest::::multiplePairsAfterMoveToRelativeTest()": [
        391,
        394
      ],
      "PathSvgNodeRendererTest::::multiplePairsAfterMoveToAbsoluteTest()": [
        396,
        399
      ],
      "PathSvgNodeRendererTest::::pathHOperatorAbsoluteAfterMultiplePairsTest()": [
        401,
        404
      ],
      "PathSvgNodeRendererTest::::pathHOperatorRelativeAfterMultiplePairsTest()": [
        406,
        409
      ]
    },
    "reverse_method_lines_dic": {
      "93": "PathSvgNodeRenderer::::doDraw(com.itextpdf.svg.renderers.SvgDrawContext)",
      "94": "PathSvgNodeRenderer::::doDraw(com.itextpdf.svg.renderers.SvgDrawContext)",
      "95": "PathSvgNodeRenderer::::doDraw(com.itextpdf.svg.renderers.SvgDrawContext)",
      "96": "PathSvgNodeRenderer::::doDraw(com.itextpdf.svg.renderers.SvgDrawContext)",
      "97": "PathSvgNodeRenderer::::doDraw(com.itextpdf.svg.renderers.SvgDrawContext)",
      "98": "PathSvgNodeRenderer::::doDraw(com.itextpdf.svg.renderers.SvgDrawContext)",
      "99": "PathSvgNodeRenderer::::doDraw(com.itextpdf.svg.renderers.SvgDrawContext)",
      "100": "PathSvgNodeRenderer::::doDraw(com.itextpdf.svg.renderers.SvgDrawContext)",
      "102": "PathSvgNodeRenderer::::createDeepCopy()",
      "103": "PathSvgNodeRenderer::::createDeepCopy()",
      "104": "PathSvgNodeRenderer::::createDeepCopy()",
      "105": "PathSvgNodeRenderer::::createDeepCopy()",
      "106": "PathSvgNodeRenderer::::createDeepCopy()",
      "107": "PathSvgNodeRenderer::::createDeepCopy()",
      "109": "PathSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "110": "PathSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "111": "PathSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "112": "PathSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "113": "PathSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "114": "PathSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "115": "PathSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "116": "PathSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "117": "PathSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "118": "PathSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "119": "PathSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "120": "PathSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "121": "PathSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "122": "PathSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "123": "PathSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "133": "PathSvgNodeRenderer::::getShapeCoordinates(com.itextpdf.svg.renderers.path.IPathShape,com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[])",
      "134": "PathSvgNodeRenderer::::getShapeCoordinates(com.itextpdf.svg.renderers.path.IPathShape,com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[])",
      "135": "PathSvgNodeRenderer::::getShapeCoordinates(com.itextpdf.svg.renderers.path.IPathShape,com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[])",
      "136": "PathSvgNodeRenderer::::getShapeCoordinates(com.itextpdf.svg.renderers.path.IPathShape,com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[])",
      "137": "PathSvgNodeRenderer::::getShapeCoordinates(com.itextpdf.svg.renderers.path.IPathShape,com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[])",
      "138": "PathSvgNodeRenderer::::getShapeCoordinates(com.itextpdf.svg.renderers.path.IPathShape,com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[])",
      "139": "PathSvgNodeRenderer::::getShapeCoordinates(com.itextpdf.svg.renderers.path.IPathShape,com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[])",
      "140": "PathSvgNodeRenderer::::getShapeCoordinates(com.itextpdf.svg.renderers.path.IPathShape,com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[])",
      "141": "PathSvgNodeRenderer::::getShapeCoordinates(com.itextpdf.svg.renderers.path.IPathShape,com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[])",
      "142": "PathSvgNodeRenderer::::getShapeCoordinates(com.itextpdf.svg.renderers.path.IPathShape,com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[])",
      "143": "PathSvgNodeRenderer::::getShapeCoordinates(com.itextpdf.svg.renderers.path.IPathShape,com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[])",
      "144": "PathSvgNodeRenderer::::getShapeCoordinates(com.itextpdf.svg.renderers.path.IPathShape,com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[])",
      "145": "PathSvgNodeRenderer::::getShapeCoordinates(com.itextpdf.svg.renderers.path.IPathShape,com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[])",
      "146": "PathSvgNodeRenderer::::getShapeCoordinates(com.itextpdf.svg.renderers.path.IPathShape,com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[])",
      "147": "PathSvgNodeRenderer::::getShapeCoordinates(com.itextpdf.svg.renderers.path.IPathShape,com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[])",
      "148": "PathSvgNodeRenderer::::getShapeCoordinates(com.itextpdf.svg.renderers.path.IPathShape,com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[])",
      "149": "PathSvgNodeRenderer::::getShapeCoordinates(com.itextpdf.svg.renderers.path.IPathShape,com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[])",
      "150": "PathSvgNodeRenderer::::getShapeCoordinates(com.itextpdf.svg.renderers.path.IPathShape,com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[])",
      "151": "PathSvgNodeRenderer::::getShapeCoordinates(com.itextpdf.svg.renderers.path.IPathShape,com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[])",
      "152": "PathSvgNodeRenderer::::getShapeCoordinates(com.itextpdf.svg.renderers.path.IPathShape,com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[])",
      "153": "PathSvgNodeRenderer::::getShapeCoordinates(com.itextpdf.svg.renderers.path.IPathShape,com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[])",
      "154": "PathSvgNodeRenderer::::getShapeCoordinates(com.itextpdf.svg.renderers.path.IPathShape,com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[])",
      "155": "PathSvgNodeRenderer::::getShapeCoordinates(com.itextpdf.svg.renderers.path.IPathShape,com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[])",
      "156": "PathSvgNodeRenderer::::getShapeCoordinates(com.itextpdf.svg.renderers.path.IPathShape,com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[])",
      "157": "PathSvgNodeRenderer::::getShapeCoordinates(com.itextpdf.svg.renderers.path.IPathShape,com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[])",
      "158": "PathSvgNodeRenderer::::getShapeCoordinates(com.itextpdf.svg.renderers.path.IPathShape,com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[])",
      "159": "PathSvgNodeRenderer::::getShapeCoordinates(com.itextpdf.svg.renderers.path.IPathShape,com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[])",
      "160": "PathSvgNodeRenderer::::getShapeCoordinates(com.itextpdf.svg.renderers.path.IPathShape,com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[])",
      "161": "PathSvgNodeRenderer::::getShapeCoordinates(com.itextpdf.svg.renderers.path.IPathShape,com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[])",
      "162": "PathSvgNodeRenderer::::getShapeCoordinates(com.itextpdf.svg.renderers.path.IPathShape,com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[])",
      "163": "PathSvgNodeRenderer::::getShapeCoordinates(com.itextpdf.svg.renderers.path.IPathShape,com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[])",
      "174": "PathSvgNodeRenderer::::processPathOperator(java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "175": "PathSvgNodeRenderer::::processPathOperator(java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "176": "PathSvgNodeRenderer::::processPathOperator(java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "177": "PathSvgNodeRenderer::::processPathOperator(java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "178": "PathSvgNodeRenderer::::processPathOperator(java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "179": "PathSvgNodeRenderer::::processPathOperator(java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "180": "PathSvgNodeRenderer::::processPathOperator(java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "181": "PathSvgNodeRenderer::::processPathOperator(java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "182": "PathSvgNodeRenderer::::processPathOperator(java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "183": "PathSvgNodeRenderer::::processPathOperator(java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "184": "PathSvgNodeRenderer::::processPathOperator(java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "185": "PathSvgNodeRenderer::::processPathOperator(java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "186": "PathSvgNodeRenderer::::processPathOperator(java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "187": "PathSvgNodeRenderer::::processPathOperator(java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "188": "PathSvgNodeRenderer::::processPathOperator(java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "189": "PathSvgNodeRenderer::::processPathOperator(java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "190": "PathSvgNodeRenderer::::processPathOperator(java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "191": "PathSvgNodeRenderer::::processPathOperator(java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "192": "PathSvgNodeRenderer::::processPathOperator(java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "193": "PathSvgNodeRenderer::::processPathOperator(java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "194": "PathSvgNodeRenderer::::processPathOperator(java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "195": "PathSvgNodeRenderer::::processPathOperator(java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "196": "PathSvgNodeRenderer::::processPathOperator(java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "197": "PathSvgNodeRenderer::::processPathOperator(java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "198": "PathSvgNodeRenderer::::processPathOperator(java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "199": "PathSvgNodeRenderer::::processPathOperator(java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "200": "PathSvgNodeRenderer::::processPathOperator(java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "201": "PathSvgNodeRenderer::::processPathOperator(java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "202": "PathSvgNodeRenderer::::processPathOperator(java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "203": "PathSvgNodeRenderer::::processPathOperator(java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "204": "PathSvgNodeRenderer::::processPathOperator(java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "205": "PathSvgNodeRenderer::::processPathOperator(java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "206": "PathSvgNodeRenderer::::processPathOperator(java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "207": "PathSvgNodeRenderer::::processPathOperator(java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "208": "PathSvgNodeRenderer::::processPathOperator(java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "209": "PathSvgNodeRenderer::::processPathOperator(java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "210": "PathSvgNodeRenderer::::processPathOperator(java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "212": "PathSvgNodeRenderer::::addMoveToShapes(com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "213": "PathSvgNodeRenderer::::addMoveToShapes(com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "214": "PathSvgNodeRenderer::::addMoveToShapes(com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "215": "PathSvgNodeRenderer::::addMoveToShapes(com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "216": "PathSvgNodeRenderer::::addMoveToShapes(com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "217": "PathSvgNodeRenderer::::addMoveToShapes(com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "218": "PathSvgNodeRenderer::::addMoveToShapes(com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "219": "PathSvgNodeRenderer::::addMoveToShapes(com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "220": "PathSvgNodeRenderer::::addMoveToShapes(com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "221": "PathSvgNodeRenderer::::addMoveToShapes(com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "222": "PathSvgNodeRenderer::::addMoveToShapes(com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "223": "PathSvgNodeRenderer::::addMoveToShapes(com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "224": "PathSvgNodeRenderer::::addMoveToShapes(com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "225": "PathSvgNodeRenderer::::addMoveToShapes(com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "226": "PathSvgNodeRenderer::::addMoveToShapes(com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "227": "PathSvgNodeRenderer::::addMoveToShapes(com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "228": "PathSvgNodeRenderer::::addMoveToShapes(com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "229": "PathSvgNodeRenderer::::addMoveToShapes(com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "230": "PathSvgNodeRenderer::::addMoveToShapes(com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "231": "PathSvgNodeRenderer::::addMoveToShapes(com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "232": "PathSvgNodeRenderer::::addMoveToShapes(com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "233": "PathSvgNodeRenderer::::addMoveToShapes(com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "234": "PathSvgNodeRenderer::::addMoveToShapes(com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "235": "PathSvgNodeRenderer::::addMoveToShapes(com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "236": "PathSvgNodeRenderer::::addMoveToShapes(com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "237": "PathSvgNodeRenderer::::addMoveToShapes(com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "238": "PathSvgNodeRenderer::::addMoveToShapes(com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "239": "PathSvgNodeRenderer::::addMoveToShapes(com.itextpdf.svg.renderers.path.IPathShape,java.lang.String[],com.itextpdf.svg.renderers.path.IPathShape)",
      "250": "PathSvgNodeRenderer::::getShapes()",
      "251": "PathSvgNodeRenderer::::getShapes()",
      "252": "PathSvgNodeRenderer::::getShapes()",
      "253": "PathSvgNodeRenderer::::getShapes()",
      "254": "PathSvgNodeRenderer::::getShapes()",
      "255": "PathSvgNodeRenderer::::getShapes()",
      "256": "PathSvgNodeRenderer::::getShapes()",
      "257": "PathSvgNodeRenderer::::getShapes()",
      "258": "PathSvgNodeRenderer::::getShapes()",
      "259": "PathSvgNodeRenderer::::getShapes()",
      "260": "PathSvgNodeRenderer::::getShapes()",
      "261": "PathSvgNodeRenderer::::getShapes()",
      "263": "PathSvgNodeRenderer::::concatenate(java.lang.String[],java.lang.String[])",
      "264": "PathSvgNodeRenderer::::concatenate(java.lang.String[],java.lang.String[])",
      "265": "PathSvgNodeRenderer::::concatenate(java.lang.String[],java.lang.String[])",
      "266": "PathSvgNodeRenderer::::concatenate(java.lang.String[],java.lang.String[])",
      "267": "PathSvgNodeRenderer::::concatenate(java.lang.String[],java.lang.String[])",
      "268": "PathSvgNodeRenderer::::concatenate(java.lang.String[],java.lang.String[])",
      "271": "PathSvgNodeRenderer::::containsInvalidAttributes(java.lang.String)",
      "272": "PathSvgNodeRenderer::::containsInvalidAttributes(java.lang.String)",
      "273": "PathSvgNodeRenderer::::containsInvalidAttributes(java.lang.String)",
      "275": "PathSvgNodeRenderer::::parsePathOperations()",
      "276": "PathSvgNodeRenderer::::parsePathOperations()",
      "277": "PathSvgNodeRenderer::::parsePathOperations()",
      "278": "PathSvgNodeRenderer::::parsePathOperations()",
      "279": "PathSvgNodeRenderer::::parsePathOperations()",
      "280": "PathSvgNodeRenderer::::parsePathOperations()",
      "281": "PathSvgNodeRenderer::::parsePathOperations()",
      "282": "PathSvgNodeRenderer::::parsePathOperations()",
      "283": "PathSvgNodeRenderer::::parsePathOperations()",
      "284": "PathSvgNodeRenderer::::parsePathOperations()",
      "285": "PathSvgNodeRenderer::::parsePathOperations()",
      "286": "PathSvgNodeRenderer::::parsePathOperations()",
      "287": "PathSvgNodeRenderer::::parsePathOperations()",
      "288": "PathSvgNodeRenderer::::parsePathOperations()",
      "289": "PathSvgNodeRenderer::::parsePathOperations()",
      "290": "PathSvgNodeRenderer::::parsePathOperations()",
      "291": "PathSvgNodeRenderer::::parsePathOperations()",
      "292": "PathSvgNodeRenderer::::parsePathOperations()",
      "293": "PathSvgNodeRenderer::::parsePathOperations()",
      "294": "PathSvgNodeRenderer::::parsePathOperations()",
      "295": "PathSvgNodeRenderer::::parsePathOperations()",
      "296": "PathSvgNodeRenderer::::parsePathOperations()",
      "297": "PathSvgNodeRenderer::::parsePathOperations()",
      "298": "PathSvgNodeRenderer::::parsePathOperations()",
      "299": "PathSvgNodeRenderer::::parsePathOperations()",
      "300": "PathSvgNodeRenderer::::parsePathOperations()",
      "305": "PathSvgNodeRenderer::::separateDecimalPoints(java.lang.String)",
      "306": "PathSvgNodeRenderer::::separateDecimalPoints(java.lang.String)",
      "307": "PathSvgNodeRenderer::::separateDecimalPoints(java.lang.String)",
      "308": "PathSvgNodeRenderer::::separateDecimalPoints(java.lang.String)",
      "309": "PathSvgNodeRenderer::::separateDecimalPoints(java.lang.String)",
      "310": "PathSvgNodeRenderer::::separateDecimalPoints(java.lang.String)",
      "311": "PathSvgNodeRenderer::::separateDecimalPoints(java.lang.String)",
      "312": "PathSvgNodeRenderer::::separateDecimalPoints(java.lang.String)",
      "313": "PathSvgNodeRenderer::::separateDecimalPoints(java.lang.String)",
      "314": "PathSvgNodeRenderer::::separateDecimalPoints(java.lang.String)",
      "315": "PathSvgNodeRenderer::::separateDecimalPoints(java.lang.String)",
      "316": "PathSvgNodeRenderer::::separateDecimalPoints(java.lang.String)",
      "317": "PathSvgNodeRenderer::::separateDecimalPoints(java.lang.String)",
      "318": "PathSvgNodeRenderer::::separateDecimalPoints(java.lang.String)",
      "319": "PathSvgNodeRenderer::::separateDecimalPoints(java.lang.String)",
      "320": "PathSvgNodeRenderer::::separateDecimalPoints(java.lang.String)",
      "321": "PathSvgNodeRenderer::::separateDecimalPoints(java.lang.String)",
      "322": "PathSvgNodeRenderer::::separateDecimalPoints(java.lang.String)",
      "323": "PathSvgNodeRenderer::::separateDecimalPoints(java.lang.String)",
      "324": "PathSvgNodeRenderer::::separateDecimalPoints(java.lang.String)",
      "325": "PathSvgNodeRenderer::::separateDecimalPoints(java.lang.String)",
      "326": "PathSvgNodeRenderer::::separateDecimalPoints(java.lang.String)",
      "327": "PathSvgNodeRenderer::::separateDecimalPoints(java.lang.String)",
      "328": "PathSvgNodeRenderer::::separateDecimalPoints(java.lang.String)",
      "329": "PathSvgNodeRenderer::::separateDecimalPoints(java.lang.String)",
      "330": "PathSvgNodeRenderer::::separateDecimalPoints(java.lang.String)",
      "331": "PathSvgNodeRenderer::::separateDecimalPoints(java.lang.String)",
      "332": "PathSvgNodeRenderer::::separateDecimalPoints(java.lang.String)",
      "333": "PathSvgNodeRenderer::::separateDecimalPoints(java.lang.String)",
      "334": "PathSvgNodeRenderer::::separateDecimalPoints(java.lang.String)",
      "335": "PathSvgNodeRenderer::::separateDecimalPoints(java.lang.String)",
      "336": "PathSvgNodeRenderer::::separateDecimalPoints(java.lang.String)",
      "337": "PathSvgNodeRenderer::::separateDecimalPoints(java.lang.String)",
      "338": "PathSvgNodeRenderer::::separateDecimalPoints(java.lang.String)",
      "344": "PathSvgNodeRenderer::::splitPathStringIntoOperators(java.lang.String)",
      "345": "PathSvgNodeRenderer::::splitPathStringIntoOperators(java.lang.String)",
      "346": "PathSvgNodeRenderer::::splitPathStringIntoOperators(java.lang.String)",
      "348": "PathSvgNodeRenderer::::endsWithNonWhitespace(java.lang.StringBuilder)",
      "349": "PathSvgNodeRenderer::::endsWithNonWhitespace(java.lang.StringBuilder)",
      "350": "PathSvgNodeRenderer::::endsWithNonWhitespace(java.lang.StringBuilder)",
      "352": "PathSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "353": "PathSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "354": "PathSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "355": "PathSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "356": "PathSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "357": "PathSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "358": "PathSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "359": "PathSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "360": "PathSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "361": "PathSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "362": "PathSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "363": "PathSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "364": "PathSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "365": "PathSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "366": "PathSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "367": "PathSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "369": "PathSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "370": "PathSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "371": "PathSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "372": "PathSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "373": "PathSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "374": "PathSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "375": "PathSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "376": "PathSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "377": "PathSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "378": "PathSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "379": "PathSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "380": "PathSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "381": "PathSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "382": "PathSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "383": "PathSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "384": "PathSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "385": "PathSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "386": "PathSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "387": "PathSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "388": "PathSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "389": "PathSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "390": "PathSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "391": "PathSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "392": "PathSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "393": "PathSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "394": "PathSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "395": "PathSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "396": "PathSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "398": "PathSvgNodeRenderer::::getCurrentPoint(com.itextpdf.svg.renderers.path.IPathShape)",
      "399": "PathSvgNodeRenderer::::getCurrentPoint(com.itextpdf.svg.renderers.path.IPathShape)",
      "400": "PathSvgNodeRenderer::::getCurrentPoint(com.itextpdf.svg.renderers.path.IPathShape)"
    },
    "test_reverse_method_lines_dic": {
      "56": "PathSvgNodeRendererTest::::beforeClass()",
      "57": "PathSvgNodeRendererTest::::beforeClass()",
      "58": "PathSvgNodeRendererTest::::beforeClass()",
      "59": "PathSvgNodeRendererTest::::beforeClass()",
      "61": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest()",
      "62": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest()",
      "63": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest()",
      "64": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest()",
      "65": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest()",
      "66": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest()",
      "67": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest()",
      "68": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest()",
      "69": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest()",
      "70": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest()",
      "71": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest()",
      "72": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest()",
      "73": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest()",
      "74": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest()",
      "75": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest()",
      "76": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest()",
      "77": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest()",
      "78": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest()",
      "79": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest()",
      "80": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest()",
      "81": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest()",
      "82": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest()",
      "83": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest()",
      "84": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest()",
      "85": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest()",
      "87": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest1()",
      "88": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest1()",
      "89": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest1()",
      "90": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest1()",
      "91": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest1()",
      "92": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest1()",
      "93": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest1()",
      "94": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest1()",
      "95": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest1()",
      "96": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest1()",
      "97": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest1()",
      "98": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest1()",
      "99": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest1()",
      "100": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest1()",
      "101": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest1()",
      "102": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest1()",
      "103": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest1()",
      "104": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest1()",
      "105": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest1()",
      "106": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest1()",
      "107": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest1()",
      "108": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest1()",
      "109": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest1()",
      "110": "PathSvgNodeRendererTest::::pathNodeRendererMoveToTest1()",
      "112": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest()",
      "113": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest()",
      "114": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest()",
      "115": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest()",
      "116": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest()",
      "117": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest()",
      "118": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest()",
      "119": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest()",
      "120": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest()",
      "121": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest()",
      "122": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest()",
      "123": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest()",
      "124": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest()",
      "125": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest()",
      "126": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest()",
      "127": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest()",
      "128": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest()",
      "129": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest()",
      "130": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest()",
      "131": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest()",
      "132": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest()",
      "133": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest()",
      "134": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest()",
      "135": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest()",
      "137": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest1()",
      "138": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest1()",
      "139": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest1()",
      "140": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest1()",
      "141": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest1()",
      "142": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest1()",
      "143": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest1()",
      "144": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest1()",
      "145": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest1()",
      "146": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest1()",
      "147": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest1()",
      "148": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest1()",
      "149": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest1()",
      "150": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest1()",
      "151": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest1()",
      "152": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest1()",
      "153": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest1()",
      "154": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest1()",
      "155": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest1()",
      "156": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest1()",
      "157": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest1()",
      "158": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest1()",
      "159": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest1()",
      "160": "PathSvgNodeRendererTest::::pathNodeRendererCurveToTest1()",
      "162": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest()",
      "163": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest()",
      "164": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest()",
      "165": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest()",
      "166": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest()",
      "167": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest()",
      "168": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest()",
      "169": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest()",
      "170": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest()",
      "171": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest()",
      "172": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest()",
      "173": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest()",
      "174": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest()",
      "175": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest()",
      "176": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest()",
      "177": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest()",
      "178": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest()",
      "179": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest()",
      "180": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest()",
      "181": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest()",
      "182": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest()",
      "183": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest()",
      "184": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest()",
      "186": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest1()",
      "187": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest1()",
      "188": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest1()",
      "189": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest1()",
      "190": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest1()",
      "191": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest1()",
      "192": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest1()",
      "193": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest1()",
      "194": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest1()",
      "195": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest1()",
      "196": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest1()",
      "197": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest1()",
      "198": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest1()",
      "199": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest1()",
      "200": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest1()",
      "201": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest1()",
      "202": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest1()",
      "203": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest1()",
      "204": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest1()",
      "205": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest1()",
      "206": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest1()",
      "207": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest1()",
      "208": "PathSvgNodeRendererTest::::pathNodeRendererQCurveToCurveToTest1()",
      "210": "PathSvgNodeRendererTest::::smoothCurveTest1()",
      "211": "PathSvgNodeRendererTest::::smoothCurveTest1()",
      "212": "PathSvgNodeRendererTest::::smoothCurveTest1()",
      "213": "PathSvgNodeRendererTest::::smoothCurveTest1()",
      "214": "PathSvgNodeRendererTest::::smoothCurveTest1()",
      "215": "PathSvgNodeRendererTest::::smoothCurveTest1()",
      "216": "PathSvgNodeRendererTest::::smoothCurveTest1()",
      "217": "PathSvgNodeRendererTest::::smoothCurveTest1()",
      "218": "PathSvgNodeRendererTest::::smoothCurveTest1()",
      "219": "PathSvgNodeRendererTest::::smoothCurveTest1()",
      "220": "PathSvgNodeRendererTest::::smoothCurveTest1()",
      "221": "PathSvgNodeRendererTest::::smoothCurveTest1()",
      "222": "PathSvgNodeRendererTest::::smoothCurveTest1()",
      "223": "PathSvgNodeRendererTest::::smoothCurveTest1()",
      "224": "PathSvgNodeRendererTest::::smoothCurveTest1()",
      "225": "PathSvgNodeRendererTest::::smoothCurveTest1()",
      "226": "PathSvgNodeRendererTest::::smoothCurveTest1()",
      "227": "PathSvgNodeRendererTest::::smoothCurveTest1()",
      "228": "PathSvgNodeRendererTest::::smoothCurveTest1()",
      "229": "PathSvgNodeRendererTest::::smoothCurveTest1()",
      "231": "PathSvgNodeRendererTest::::smoothCurveTest2()",
      "232": "PathSvgNodeRendererTest::::smoothCurveTest2()",
      "233": "PathSvgNodeRendererTest::::smoothCurveTest2()",
      "234": "PathSvgNodeRendererTest::::smoothCurveTest2()",
      "235": "PathSvgNodeRendererTest::::smoothCurveTest2()",
      "236": "PathSvgNodeRendererTest::::smoothCurveTest2()",
      "237": "PathSvgNodeRendererTest::::smoothCurveTest2()",
      "238": "PathSvgNodeRendererTest::::smoothCurveTest2()",
      "239": "PathSvgNodeRendererTest::::smoothCurveTest2()",
      "240": "PathSvgNodeRendererTest::::smoothCurveTest2()",
      "241": "PathSvgNodeRendererTest::::smoothCurveTest2()",
      "242": "PathSvgNodeRendererTest::::smoothCurveTest2()",
      "243": "PathSvgNodeRendererTest::::smoothCurveTest2()",
      "244": "PathSvgNodeRendererTest::::smoothCurveTest2()",
      "245": "PathSvgNodeRendererTest::::smoothCurveTest2()",
      "246": "PathSvgNodeRendererTest::::smoothCurveTest2()",
      "247": "PathSvgNodeRendererTest::::smoothCurveTest2()",
      "248": "PathSvgNodeRendererTest::::smoothCurveTest2()",
      "249": "PathSvgNodeRendererTest::::smoothCurveTest2()",
      "250": "PathSvgNodeRendererTest::::smoothCurveTest2()",
      "252": "PathSvgNodeRendererTest::::smoothCurveTest3()",
      "253": "PathSvgNodeRendererTest::::smoothCurveTest3()",
      "254": "PathSvgNodeRendererTest::::smoothCurveTest3()",
      "255": "PathSvgNodeRendererTest::::smoothCurveTest3()",
      "256": "PathSvgNodeRendererTest::::smoothCurveTest3()",
      "257": "PathSvgNodeRendererTest::::smoothCurveTest3()",
      "258": "PathSvgNodeRendererTest::::smoothCurveTest3()",
      "259": "PathSvgNodeRendererTest::::smoothCurveTest3()",
      "260": "PathSvgNodeRendererTest::::smoothCurveTest3()",
      "261": "PathSvgNodeRendererTest::::smoothCurveTest3()",
      "262": "PathSvgNodeRendererTest::::smoothCurveTest3()",
      "263": "PathSvgNodeRendererTest::::smoothCurveTest3()",
      "264": "PathSvgNodeRendererTest::::smoothCurveTest3()",
      "265": "PathSvgNodeRendererTest::::smoothCurveTest3()",
      "266": "PathSvgNodeRendererTest::::smoothCurveTest3()",
      "267": "PathSvgNodeRendererTest::::smoothCurveTest3()",
      "268": "PathSvgNodeRendererTest::::smoothCurveTest3()",
      "269": "PathSvgNodeRendererTest::::smoothCurveTest3()",
      "270": "PathSvgNodeRendererTest::::smoothCurveTest3()",
      "271": "PathSvgNodeRendererTest::::smoothCurveTest3()",
      "273": "PathSvgNodeRendererTest::::pathNodeRendererCurveComplexTest()",
      "274": "PathSvgNodeRendererTest::::pathNodeRendererCurveComplexTest()",
      "275": "PathSvgNodeRendererTest::::pathNodeRendererCurveComplexTest()",
      "276": "PathSvgNodeRendererTest::::pathNodeRendererCurveComplexTest()",
      "278": "PathSvgNodeRendererTest::::pathZOperatorMultipleZTest()",
      "279": "PathSvgNodeRendererTest::::pathZOperatorMultipleZTest()",
      "280": "PathSvgNodeRendererTest::::pathZOperatorMultipleZTest()",
      "281": "PathSvgNodeRendererTest::::pathZOperatorMultipleZTest()",
      "283": "PathSvgNodeRendererTest::::pathZOperatorSingleZTest()",
      "284": "PathSvgNodeRendererTest::::pathZOperatorSingleZTest()",
      "285": "PathSvgNodeRendererTest::::pathZOperatorSingleZTest()",
      "286": "PathSvgNodeRendererTest::::pathZOperatorSingleZTest()",
      "288": "PathSvgNodeRendererTest::::pathZOperatorSingleZInstructionsAfterTest()",
      "289": "PathSvgNodeRendererTest::::pathZOperatorSingleZInstructionsAfterTest()",
      "290": "PathSvgNodeRendererTest::::pathZOperatorSingleZInstructionsAfterTest()",
      "291": "PathSvgNodeRendererTest::::pathZOperatorSingleZInstructionsAfterTest()",
      "293": "PathSvgNodeRendererTest::::invalidZOperatorTest()",
      "294": "PathSvgNodeRendererTest::::invalidZOperatorTest()",
      "295": "PathSvgNodeRendererTest::::invalidZOperatorTest()",
      "296": "PathSvgNodeRendererTest::::invalidZOperatorTest()",
      "297": "PathSvgNodeRendererTest::::invalidZOperatorTest()",
      "298": "PathSvgNodeRendererTest::::invalidZOperatorTest()",
      "300": "PathSvgNodeRendererTest::::invalidOperatorTest()",
      "301": "PathSvgNodeRendererTest::::invalidOperatorTest()",
      "302": "PathSvgNodeRendererTest::::invalidOperatorTest()",
      "303": "PathSvgNodeRendererTest::::invalidOperatorTest()",
      "304": "PathSvgNodeRendererTest::::invalidOperatorTest()",
      "305": "PathSvgNodeRendererTest::::invalidOperatorTest()",
      "309": "PathSvgNodeRendererTest::::pathLOperatorMultipleCoordinates()",
      "310": "PathSvgNodeRendererTest::::pathLOperatorMultipleCoordinates()",
      "311": "PathSvgNodeRendererTest::::pathLOperatorMultipleCoordinates()",
      "312": "PathSvgNodeRendererTest::::pathLOperatorMultipleCoordinates()",
      "314": "PathSvgNodeRendererTest::::pathVOperatorTest()",
      "315": "PathSvgNodeRendererTest::::pathVOperatorTest()",
      "316": "PathSvgNodeRendererTest::::pathVOperatorTest()",
      "317": "PathSvgNodeRendererTest::::pathVOperatorTest()",
      "319": "PathSvgNodeRendererTest::::pathZOperatorContinuePathingTest()",
      "320": "PathSvgNodeRendererTest::::pathZOperatorContinuePathingTest()",
      "321": "PathSvgNodeRendererTest::::pathZOperatorContinuePathingTest()",
      "322": "PathSvgNodeRendererTest::::pathZOperatorContinuePathingTest()",
      "324": "PathSvgNodeRendererTest::::pathVOperatorMultipleArgumentsTest()",
      "325": "PathSvgNodeRendererTest::::pathVOperatorMultipleArgumentsTest()",
      "326": "PathSvgNodeRendererTest::::pathVOperatorMultipleArgumentsTest()",
      "327": "PathSvgNodeRendererTest::::pathVOperatorMultipleArgumentsTest()",
      "329": "PathSvgNodeRendererTest::::pathHOperatorSimpleTest()",
      "330": "PathSvgNodeRendererTest::::pathHOperatorSimpleTest()",
      "331": "PathSvgNodeRendererTest::::pathHOperatorSimpleTest()",
      "332": "PathSvgNodeRendererTest::::pathHOperatorSimpleTest()",
      "334": "PathSvgNodeRendererTest::::pathHandVOperatorTest()",
      "335": "PathSvgNodeRendererTest::::pathHandVOperatorTest()",
      "336": "PathSvgNodeRendererTest::::pathHandVOperatorTest()",
      "337": "PathSvgNodeRendererTest::::pathHandVOperatorTest()",
      "339": "PathSvgNodeRendererTest::::curveToContinuePathingTest()",
      "340": "PathSvgNodeRendererTest::::curveToContinuePathingTest()",
      "341": "PathSvgNodeRendererTest::::curveToContinuePathingTest()",
      "342": "PathSvgNodeRendererTest::::curveToContinuePathingTest()",
      "344": "PathSvgNodeRendererTest::::relativeHorizontalLineToTest()",
      "345": "PathSvgNodeRendererTest::::relativeHorizontalLineToTest()",
      "346": "PathSvgNodeRendererTest::::relativeHorizontalLineToTest()",
      "347": "PathSvgNodeRendererTest::::relativeHorizontalLineToTest()",
      "349": "PathSvgNodeRendererTest::::relativeVerticalLineToTest()",
      "350": "PathSvgNodeRendererTest::::relativeVerticalLineToTest()",
      "351": "PathSvgNodeRendererTest::::relativeVerticalLineToTest()",
      "352": "PathSvgNodeRendererTest::::relativeVerticalLineToTest()",
      "354": "PathSvgNodeRendererTest::::combinedRelativeVerticalLineToAndRelativeHorizontalLineToTest()",
      "355": "PathSvgNodeRendererTest::::combinedRelativeVerticalLineToAndRelativeHorizontalLineToTest()",
      "356": "PathSvgNodeRendererTest::::combinedRelativeVerticalLineToAndRelativeHorizontalLineToTest()",
      "357": "PathSvgNodeRendererTest::::combinedRelativeVerticalLineToAndRelativeHorizontalLineToTest()",
      "359": "PathSvgNodeRendererTest::::multipleRelativeHorizontalLineToTest()",
      "360": "PathSvgNodeRendererTest::::multipleRelativeHorizontalLineToTest()",
      "361": "PathSvgNodeRendererTest::::multipleRelativeHorizontalLineToTest()",
      "362": "PathSvgNodeRendererTest::::multipleRelativeHorizontalLineToTest()",
      "364": "PathSvgNodeRendererTest::::multipleRelativeVerticalLineToTest()",
      "365": "PathSvgNodeRendererTest::::multipleRelativeVerticalLineToTest()",
      "366": "PathSvgNodeRendererTest::::multipleRelativeVerticalLineToTest()",
      "367": "PathSvgNodeRendererTest::::multipleRelativeVerticalLineToTest()",
      "369": "PathSvgNodeRendererTest::::moveToRelativeMultipleTest()",
      "370": "PathSvgNodeRendererTest::::moveToRelativeMultipleTest()",
      "371": "PathSvgNodeRendererTest::::moveToRelativeMultipleTest()",
      "372": "PathSvgNodeRendererTest::::moveToRelativeMultipleTest()",
      "374": "PathSvgNodeRendererTest::::moveToAbsoluteMultipleTest()",
      "375": "PathSvgNodeRendererTest::::moveToAbsoluteMultipleTest()",
      "376": "PathSvgNodeRendererTest::::moveToAbsoluteMultipleTest()",
      "377": "PathSvgNodeRendererTest::::moveToAbsoluteMultipleTest()",
      "379": "PathSvgNodeRendererTest::::iTextLogoTest()",
      "380": "PathSvgNodeRendererTest::::iTextLogoTest()",
      "381": "PathSvgNodeRendererTest::::iTextLogoTest()",
      "382": "PathSvgNodeRendererTest::::iTextLogoTest()",
      "384": "PathSvgNodeRendererTest::::eofillUnsuportedPathTest()",
      "385": "PathSvgNodeRendererTest::::eofillUnsuportedPathTest()",
      "386": "PathSvgNodeRendererTest::::eofillUnsuportedPathTest()",
      "387": "PathSvgNodeRendererTest::::eofillUnsuportedPathTest()",
      "388": "PathSvgNodeRendererTest::::eofillUnsuportedPathTest()",
      "389": "PathSvgNodeRendererTest::::eofillUnsuportedPathTest()",
      "391": "PathSvgNodeRendererTest::::multiplePairsAfterMoveToRelativeTest()",
      "392": "PathSvgNodeRendererTest::::multiplePairsAfterMoveToRelativeTest()",
      "393": "PathSvgNodeRendererTest::::multiplePairsAfterMoveToRelativeTest()",
      "394": "PathSvgNodeRendererTest::::multiplePairsAfterMoveToRelativeTest()",
      "396": "PathSvgNodeRendererTest::::multiplePairsAfterMoveToAbsoluteTest()",
      "397": "PathSvgNodeRendererTest::::multiplePairsAfterMoveToAbsoluteTest()",
      "398": "PathSvgNodeRendererTest::::multiplePairsAfterMoveToAbsoluteTest()",
      "399": "PathSvgNodeRendererTest::::multiplePairsAfterMoveToAbsoluteTest()",
      "401": "PathSvgNodeRendererTest::::pathHOperatorAbsoluteAfterMultiplePairsTest()",
      "402": "PathSvgNodeRendererTest::::pathHOperatorAbsoluteAfterMultiplePairsTest()",
      "403": "PathSvgNodeRendererTest::::pathHOperatorAbsoluteAfterMultiplePairsTest()",
      "404": "PathSvgNodeRendererTest::::pathHOperatorAbsoluteAfterMultiplePairsTest()",
      "406": "PathSvgNodeRendererTest::::pathHOperatorRelativeAfterMultiplePairsTest()",
      "407": "PathSvgNodeRendererTest::::pathHOperatorRelativeAfterMultiplePairsTest()",
      "408": "PathSvgNodeRendererTest::::pathHOperatorRelativeAfterMultiplePairsTest()",
      "409": "PathSvgNodeRendererTest::::pathHOperatorRelativeAfterMultiplePairsTest()"
    },
    "tests": [
      {
        "test_lines": [
          61,
          85
        ],
        "covered_lines": [
          56,
          67,
          85,
          91,
          95,
          96,
          97,
          98,
          99,
          100,
          134,
          137,
          138,
          159,
          160,
          162,
          175,
          176,
          177,
          181,
          182,
          183,
          186,
          187,
          189,
          190,
          193,
          194,
          195,
          196,
          199,
          200,
          201,
          202,
          203,
          205,
          207,
          209,
          214,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          222,
          223,
          224,
          238,
          251,
          252,
          254,
          255,
          256,
          257,
          258,
          259,
          260,
          272,
          276,
          277,
          278,
          281,
          286,
          288,
          289,
          290,
          291,
          292,
          294,
          295,
          299,
          308,
          310,
          312,
          313,
          314,
          316,
          317,
          319,
          320,
          324,
          329,
          331,
          335,
          337,
          345,
          349,
          399
        ]
      },
      {
        "test_lines": [
          87,
          110
        ],
        "covered_lines": [
          56,
          67,
          85,
          91,
          95,
          96,
          97,
          98,
          99,
          100,
          134,
          137,
          138,
          159,
          160,
          162,
          175,
          176,
          177,
          181,
          182,
          183,
          186,
          187,
          189,
          190,
          193,
          194,
          195,
          196,
          199,
          200,
          201,
          202,
          203,
          205,
          207,
          209,
          214,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          222,
          223,
          224,
          238,
          251,
          252,
          254,
          255,
          256,
          257,
          258,
          259,
          260,
          272,
          276,
          277,
          278,
          281,
          286,
          288,
          289,
          290,
          291,
          292,
          294,
          295,
          299,
          308,
          310,
          312,
          313,
          314,
          316,
          317,
          319,
          320,
          324,
          329,
          331,
          335,
          337,
          345,
          349,
          399
        ]
      },
      {
        "test_lines": [
          112,
          135
        ],
        "covered_lines": [
          56,
          67,
          85,
          91,
          95,
          96,
          97,
          98,
          99,
          100,
          134,
          137,
          138,
          139,
          140,
          141,
          143,
          144,
          145,
          146,
          148,
          149,
          150,
          154,
          157,
          159,
          160,
          162,
          175,
          176,
          177,
          181,
          182,
          183,
          186,
          187,
          189,
          190,
          193,
          194,
          195,
          196,
          199,
          200,
          201,
          202,
          203,
          205,
          207,
          209,
          214,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          222,
          223,
          224,
          238,
          251,
          252,
          254,
          255,
          256,
          257,
          258,
          259,
          260,
          264,
          265,
          266,
          267,
          272,
          276,
          277,
          278,
          281,
          286,
          288,
          289,
          290,
          291,
          292,
          294,
          295,
          299,
          308,
          310,
          312,
          313,
          314,
          316,
          317,
          319,
          320,
          324,
          329,
          331,
          335,
          337,
          345,
          349,
          399
        ]
      },
      {
        "test_lines": [
          137,
          160
        ],
        "covered_lines": [
          56,
          67,
          85,
          91,
          95,
          96,
          97,
          98,
          99,
          100,
          134,
          137,
          138,
          139,
          140,
          141,
          143,
          144,
          145,
          146,
          148,
          149,
          150,
          154,
          157,
          159,
          160,
          162,
          175,
          176,
          177,
          181,
          182,
          183,
          186,
          187,
          189,
          190,
          193,
          194,
          195,
          196,
          199,
          200,
          201,
          202,
          203,
          205,
          207,
          209,
          214,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          222,
          223,
          224,
          238,
          251,
          252,
          254,
          255,
          256,
          257,
          258,
          259,
          260,
          264,
          265,
          266,
          267,
          272,
          276,
          277,
          278,
          281,
          286,
          288,
          289,
          290,
          291,
          292,
          294,
          295,
          299,
          308,
          310,
          312,
          313,
          314,
          316,
          317,
          319,
          320,
          324,
          329,
          331,
          335,
          337,
          345,
          349,
          399
        ]
      },
      {
        "test_lines": [
          162,
          184
        ],
        "covered_lines": [
          56,
          67,
          85,
          91,
          95,
          96,
          97,
          98,
          99,
          100,
          134,
          137,
          138,
          159,
          160,
          162,
          175,
          176,
          177,
          181,
          182,
          183,
          186,
          187,
          189,
          190,
          193,
          194,
          195,
          196,
          199,
          200,
          201,
          202,
          203,
          205,
          207,
          209,
          214,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          222,
          223,
          224,
          238,
          251,
          252,
          254,
          255,
          256,
          257,
          258,
          259,
          260,
          272,
          276,
          277,
          278,
          281,
          286,
          288,
          289,
          290,
          291,
          292,
          294,
          295,
          299,
          308,
          310,
          312,
          313,
          314,
          316,
          317,
          319,
          320,
          324,
          329,
          331,
          335,
          337,
          345,
          349,
          399
        ]
      },
      {
        "test_lines": [
          186,
          208
        ],
        "covered_lines": [
          56,
          67,
          85,
          91,
          95,
          96,
          97,
          98,
          99,
          100,
          134,
          137,
          138,
          159,
          160,
          162,
          175,
          176,
          177,
          181,
          182,
          183,
          186,
          187,
          189,
          190,
          193,
          194,
          195,
          196,
          199,
          200,
          201,
          202,
          203,
          205,
          207,
          209,
          214,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          222,
          223,
          224,
          238,
          251,
          252,
          254,
          255,
          256,
          257,
          258,
          259,
          260,
          272,
          276,
          277,
          278,
          281,
          286,
          288,
          289,
          290,
          291,
          292,
          294,
          295,
          299,
          308,
          310,
          312,
          313,
          314,
          316,
          317,
          319,
          320,
          324,
          329,
          331,
          335,
          337,
          345,
          349,
          399
        ]
      },
      {
        "test_lines": [
          210,
          229
        ],
        "covered_lines": [
          56,
          67,
          85,
          91,
          95,
          96,
          97,
          98,
          99,
          100,
          134,
          137,
          138,
          139,
          140,
          141,
          143,
          144,
          145,
          146,
          148,
          149,
          150,
          154,
          157,
          159,
          160,
          162,
          175,
          176,
          177,
          181,
          182,
          189,
          190,
          193,
          194,
          195,
          196,
          199,
          200,
          201,
          202,
          203,
          205,
          207,
          209,
          214,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          222,
          223,
          224,
          238,
          251,
          252,
          254,
          255,
          256,
          257,
          258,
          259,
          260,
          264,
          265,
          266,
          267,
          272,
          276,
          277,
          278,
          281,
          286,
          288,
          289,
          290,
          291,
          292,
          294,
          295,
          299,
          308,
          310,
          312,
          313,
          314,
          316,
          317,
          319,
          320,
          324,
          329,
          331,
          335,
          337,
          345,
          349,
          399
        ]
      },
      {
        "test_lines": [
          231,
          250
        ],
        "covered_lines": [
          56,
          67,
          85,
          91,
          95,
          96,
          97,
          98,
          99,
          100,
          134,
          137,
          138,
          139,
          140,
          141,
          143,
          144,
          145,
          146,
          148,
          149,
          150,
          151,
          152,
          154,
          157,
          159,
          160,
          162,
          175,
          176,
          177,
          181,
          182,
          183,
          186,
          187,
          189,
          190,
          193,
          194,
          195,
          196,
          199,
          200,
          201,
          202,
          203,
          205,
          207,
          209,
          214,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          222,
          223,
          224,
          238,
          251,
          252,
          254,
          255,
          256,
          257,
          258,
          259,
          260,
          264,
          265,
          266,
          267,
          272,
          276,
          277,
          278,
          281,
          286,
          288,
          289,
          290,
          291,
          292,
          294,
          295,
          299,
          308,
          310,
          312,
          313,
          314,
          316,
          317,
          319,
          320,
          324,
          329,
          331,
          335,
          337,
          345,
          349,
          399
        ]
      },
      {
        "test_lines": [
          252,
          271
        ],
        "covered_lines": [
          56,
          67,
          85,
          91,
          95,
          96,
          97,
          98,
          99,
          100,
          134,
          137,
          138,
          139,
          140,
          141,
          143,
          144,
          145,
          146,
          148,
          149,
          150,
          154,
          157,
          159,
          160,
          162,
          175,
          176,
          177,
          181,
          182,
          189,
          190,
          193,
          194,
          195,
          196,
          199,
          200,
          201,
          202,
          203,
          205,
          207,
          209,
          214,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          222,
          223,
          224,
          238,
          251,
          252,
          254,
          255,
          256,
          257,
          258,
          259,
          260,
          264,
          265,
          266,
          267,
          272,
          276,
          277,
          278,
          281,
          286,
          288,
          289,
          290,
          291,
          292,
          294,
          295,
          299,
          308,
          310,
          312,
          313,
          314,
          316,
          317,
          319,
          320,
          324,
          329,
          331,
          335,
          337,
          345,
          349,
          399
        ]
      },
      {
        "test_lines": [
          273,
          276
        ],
        "covered_lines": [
          56,
          67,
          85,
          91,
          95,
          96,
          97,
          98,
          99,
          100,
          134,
          137,
          138,
          139,
          140,
          141,
          143,
          144,
          145,
          146,
          148,
          149,
          150,
          154,
          157,
          159,
          160,
          162,
          175,
          176,
          177,
          181,
          182,
          189,
          190,
          193,
          194,
          195,
          196,
          199,
          200,
          201,
          202,
          203,
          205,
          207,
          209,
          214,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          222,
          223,
          224,
          238,
          251,
          252,
          254,
          255,
          256,
          257,
          258,
          259,
          260,
          264,
          265,
          266,
          267,
          272,
          276,
          277,
          278,
          281,
          286,
          288,
          289,
          290,
          291,
          292,
          294,
          295,
          299,
          308,
          310,
          312,
          313,
          314,
          316,
          317,
          319,
          320,
          324,
          329,
          331,
          335,
          337,
          345,
          349,
          399
        ]
      },
      {
        "test_lines": [
          278,
          281
        ],
        "covered_lines": [
          56,
          67,
          85,
          91,
          95,
          96,
          97,
          98,
          99,
          100,
          134,
          137,
          138,
          159,
          160,
          162,
          175,
          176,
          177,
          181,
          182,
          183,
          186,
          187,
          189,
          190,
          193,
          194,
          195,
          196,
          199,
          200,
          201,
          202,
          203,
          205,
          207,
          209,
          214,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          222,
          223,
          224,
          238,
          251,
          252,
          254,
          255,
          256,
          257,
          258,
          259,
          260,
          272,
          276,
          277,
          278,
          281,
          286,
          288,
          289,
          290,
          291,
          292,
          294,
          295,
          299,
          308,
          310,
          312,
          313,
          314,
          316,
          317,
          319,
          320,
          324,
          329,
          331,
          335,
          337,
          345,
          349,
          399
        ]
      },
      {
        "test_lines": [
          283,
          286
        ],
        "covered_lines": [
          56,
          67,
          85,
          91,
          95,
          96,
          97,
          98,
          99,
          100,
          134,
          137,
          138,
          159,
          160,
          162,
          175,
          176,
          177,
          181,
          182,
          183,
          186,
          187,
          189,
          190,
          193,
          194,
          195,
          196,
          199,
          200,
          201,
          202,
          203,
          205,
          207,
          209,
          214,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          222,
          223,
          224,
          238,
          251,
          252,
          254,
          255,
          256,
          257,
          258,
          259,
          260,
          272,
          276,
          277,
          278,
          281,
          286,
          288,
          289,
          290,
          291,
          292,
          294,
          295,
          299,
          308,
          310,
          312,
          313,
          314,
          316,
          317,
          319,
          320,
          324,
          329,
          331,
          335,
          337,
          345,
          349,
          399
        ]
      },
      {
        "test_lines": [
          288,
          291
        ],
        "covered_lines": [
          56,
          67,
          85,
          91,
          95,
          96,
          97,
          98,
          99,
          100,
          134,
          137,
          138,
          159,
          160,
          162,
          175,
          176,
          177,
          181,
          182,
          183,
          186,
          187,
          189,
          190,
          193,
          194,
          195,
          196,
          199,
          200,
          201,
          202,
          203,
          205,
          207,
          209,
          214,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          222,
          223,
          224,
          238,
          251,
          252,
          254,
          255,
          256,
          257,
          258,
          259,
          260,
          272,
          276,
          277,
          278,
          281,
          286,
          288,
          289,
          290,
          291,
          292,
          294,
          295,
          299,
          308,
          310,
          312,
          313,
          314,
          316,
          317,
          319,
          320,
          324,
          329,
          331,
          335,
          337,
          345,
          349,
          399
        ]
      },
      {
        "test_lines": [
          293,
          298
        ],
        "covered_lines": [
          56,
          67,
          85,
          91,
          95,
          96,
          175,
          176,
          177,
          181,
          182,
          183,
          184,
          251,
          252,
          254,
          255,
          256,
          272,
          276,
          277,
          278,
          281,
          286,
          288,
          289,
          290,
          291,
          292,
          294,
          295,
          299,
          308,
          310,
          312,
          313,
          314,
          316,
          317,
          319,
          320,
          324,
          329,
          331,
          335,
          337,
          345,
          349
        ]
      },
      {
        "test_lines": [
          300,
          305
        ],
        "covered_lines": [
          56,
          67,
          85,
          91,
          95,
          96,
          272,
          276,
          277,
          278,
          281,
          282,
          283
        ]
      },
      {
        "test_lines": [
          309,
          312
        ],
        "covered_lines": [
          56,
          67,
          85,
          91,
          95,
          96,
          97,
          98,
          99,
          100,
          134,
          137,
          138,
          159,
          160,
          162,
          175,
          176,
          177,
          181,
          182,
          183,
          186,
          187,
          189,
          190,
          193,
          194,
          195,
          196,
          199,
          200,
          201,
          202,
          203,
          205,
          207,
          209,
          214,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          222,
          223,
          224,
          238,
          251,
          252,
          254,
          255,
          256,
          257,
          258,
          259,
          260,
          272,
          276,
          277,
          278,
          281,
          286,
          288,
          289,
          290,
          291,
          292,
          294,
          295,
          299,
          308,
          310,
          312,
          313,
          314,
          316,
          317,
          319,
          320,
          324,
          329,
          331,
          335,
          337,
          345,
          349,
          399
        ]
      },
      {
        "test_lines": [
          314,
          317
        ],
        "covered_lines": [
          56,
          67,
          85,
          91,
          95,
          96,
          97,
          98,
          99,
          100,
          134,
          137,
          138,
          159,
          160,
          162,
          175,
          176,
          177,
          181,
          182,
          189,
          190,
          193,
          194,
          195,
          196,
          199,
          200,
          201,
          202,
          203,
          205,
          207,
          209,
          214,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          222,
          223,
          224,
          238,
          251,
          252,
          254,
          255,
          256,
          257,
          258,
          259,
          260,
          272,
          276,
          277,
          278,
          281,
          286,
          288,
          289,
          290,
          291,
          292,
          294,
          295,
          299,
          308,
          310,
          312,
          313,
          314,
          316,
          317,
          319,
          320,
          324,
          329,
          331,
          335,
          337,
          345,
          349,
          399
        ]
      },
      {
        "test_lines": [
          319,
          322
        ],
        "covered_lines": [
          56,
          67,
          85,
          91,
          95,
          96,
          97,
          98,
          99,
          100,
          134,
          137,
          138,
          159,
          160,
          162,
          175,
          176,
          177,
          181,
          182,
          183,
          186,
          187,
          189,
          190,
          193,
          194,
          195,
          196,
          199,
          200,
          201,
          202,
          203,
          205,
          207,
          209,
          214,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          222,
          223,
          224,
          238,
          251,
          252,
          254,
          255,
          256,
          257,
          258,
          259,
          260,
          272,
          276,
          277,
          278,
          281,
          286,
          288,
          289,
          290,
          291,
          292,
          294,
          295,
          299,
          308,
          310,
          312,
          313,
          314,
          316,
          317,
          319,
          320,
          324,
          329,
          331,
          335,
          337,
          345,
          349,
          399
        ]
      },
      {
        "test_lines": [
          324,
          327
        ],
        "covered_lines": [
          56,
          67,
          85,
          91,
          95,
          96,
          97,
          98,
          99,
          100,
          134,
          137,
          138,
          159,
          160,
          162,
          175,
          176,
          177,
          181,
          182,
          189,
          190,
          193,
          194,
          195,
          196,
          199,
          200,
          201,
          202,
          203,
          205,
          207,
          209,
          214,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          222,
          223,
          224,
          238,
          251,
          252,
          254,
          255,
          256,
          257,
          258,
          259,
          260,
          272,
          276,
          277,
          278,
          281,
          286,
          288,
          289,
          290,
          291,
          292,
          294,
          295,
          299,
          308,
          310,
          312,
          313,
          314,
          316,
          317,
          319,
          320,
          324,
          329,
          331,
          335,
          337,
          345,
          349,
          399
        ]
      },
      {
        "test_lines": [
          329,
          332
        ],
        "covered_lines": [
          56,
          67,
          85,
          91,
          95,
          96,
          97,
          98,
          99,
          100,
          134,
          137,
          138,
          159,
          160,
          162,
          175,
          176,
          177,
          181,
          182,
          189,
          190,
          193,
          194,
          195,
          196,
          199,
          200,
          201,
          202,
          203,
          205,
          207,
          209,
          214,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          222,
          223,
          224,
          238,
          251,
          252,
          254,
          255,
          256,
          257,
          258,
          259,
          260,
          272,
          276,
          277,
          278,
          281,
          286,
          288,
          289,
          290,
          291,
          292,
          294,
          295,
          299,
          308,
          310,
          312,
          313,
          314,
          316,
          317,
          319,
          320,
          324,
          329,
          331,
          335,
          337,
          345,
          349,
          399
        ]
      },
      {
        "test_lines": [
          334,
          337
        ],
        "covered_lines": [
          56,
          67,
          85,
          91,
          95,
          96,
          97,
          98,
          99,
          100,
          134,
          137,
          138,
          159,
          160,
          162,
          175,
          176,
          177,
          181,
          182,
          189,
          190,
          193,
          194,
          195,
          196,
          199,
          200,
          201,
          202,
          203,
          205,
          207,
          209,
          214,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          222,
          223,
          224,
          238,
          251,
          252,
          254,
          255,
          256,
          257,
          258,
          259,
          260,
          272,
          276,
          277,
          278,
          281,
          286,
          288,
          289,
          290,
          291,
          292,
          294,
          295,
          299,
          308,
          310,
          312,
          313,
          314,
          316,
          317,
          319,
          320,
          324,
          329,
          331,
          335,
          337,
          345,
          349,
          399
        ]
      },
      {
        "test_lines": [
          339,
          342
        ],
        "covered_lines": [
          56,
          67,
          85,
          91,
          95,
          96,
          97,
          98,
          99,
          100,
          134,
          137,
          138,
          159,
          160,
          162,
          175,
          176,
          177,
          181,
          182,
          183,
          186,
          187,
          189,
          190,
          193,
          194,
          195,
          196,
          199,
          200,
          201,
          202,
          203,
          205,
          207,
          209,
          214,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          222,
          223,
          224,
          238,
          251,
          252,
          254,
          255,
          256,
          257,
          258,
          259,
          260,
          272,
          276,
          277,
          278,
          281,
          286,
          288,
          289,
          290,
          291,
          292,
          294,
          295,
          299,
          308,
          310,
          312,
          313,
          314,
          316,
          317,
          319,
          320,
          324,
          329,
          331,
          335,
          337,
          345,
          349,
          399
        ]
      },
      {
        "test_lines": [
          344,
          347
        ],
        "covered_lines": [
          56,
          67,
          85,
          91,
          95,
          96,
          97,
          98,
          99,
          100,
          134,
          137,
          138,
          159,
          160,
          162,
          175,
          176,
          177,
          181,
          182,
          183,
          186,
          187,
          189,
          190,
          193,
          194,
          195,
          196,
          199,
          200,
          201,
          202,
          203,
          205,
          207,
          209,
          214,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          222,
          223,
          224,
          238,
          251,
          252,
          254,
          255,
          256,
          257,
          258,
          259,
          260,
          272,
          276,
          277,
          278,
          281,
          286,
          288,
          289,
          290,
          291,
          292,
          294,
          295,
          299,
          308,
          310,
          312,
          313,
          314,
          316,
          317,
          319,
          320,
          324,
          329,
          331,
          335,
          337,
          345,
          349,
          399
        ]
      },
      {
        "test_lines": [
          349,
          352
        ],
        "covered_lines": [
          56,
          67,
          85,
          91,
          95,
          96,
          97,
          98,
          99,
          100,
          134,
          137,
          138,
          159,
          160,
          162,
          175,
          176,
          177,
          181,
          182,
          183,
          186,
          187,
          189,
          190,
          193,
          194,
          195,
          196,
          199,
          200,
          201,
          202,
          203,
          205,
          207,
          209,
          214,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          222,
          223,
          224,
          238,
          251,
          252,
          254,
          255,
          256,
          257,
          258,
          259,
          260,
          272,
          276,
          277,
          278,
          281,
          286,
          288,
          289,
          290,
          291,
          292,
          294,
          295,
          299,
          308,
          310,
          312,
          313,
          314,
          316,
          317,
          319,
          320,
          324,
          329,
          331,
          335,
          337,
          345,
          349,
          399
        ]
      },
      {
        "test_lines": [
          354,
          357
        ],
        "covered_lines": [
          56,
          67,
          85,
          91,
          95,
          96,
          97,
          98,
          99,
          100,
          134,
          137,
          138,
          159,
          160,
          162,
          175,
          176,
          177,
          181,
          182,
          183,
          186,
          187,
          189,
          190,
          193,
          194,
          195,
          196,
          199,
          200,
          201,
          202,
          203,
          205,
          207,
          209,
          214,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          222,
          223,
          224,
          238,
          251,
          252,
          254,
          255,
          256,
          257,
          258,
          259,
          260,
          272,
          276,
          277,
          278,
          281,
          286,
          288,
          289,
          290,
          291,
          292,
          294,
          295,
          299,
          308,
          310,
          312,
          313,
          314,
          316,
          317,
          319,
          320,
          324,
          329,
          331,
          335,
          337,
          345,
          349,
          399
        ]
      },
      {
        "test_lines": [
          359,
          362
        ],
        "covered_lines": [
          56,
          67,
          85,
          91,
          95,
          96,
          97,
          98,
          99,
          100,
          134,
          137,
          138,
          159,
          160,
          162,
          175,
          176,
          177,
          181,
          182,
          183,
          186,
          187,
          189,
          190,
          193,
          194,
          195,
          196,
          199,
          200,
          201,
          202,
          203,
          205,
          207,
          209,
          214,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          222,
          223,
          224,
          238,
          251,
          252,
          254,
          255,
          256,
          257,
          258,
          259,
          260,
          272,
          276,
          277,
          278,
          281,
          286,
          288,
          289,
          290,
          291,
          292,
          294,
          295,
          299,
          308,
          310,
          312,
          313,
          314,
          316,
          317,
          319,
          320,
          324,
          329,
          331,
          335,
          337,
          345,
          349,
          399
        ]
      },
      {
        "test_lines": [
          364,
          367
        ],
        "covered_lines": [
          56,
          67,
          85,
          91,
          95,
          96,
          97,
          98,
          99,
          100,
          134,
          137,
          138,
          159,
          160,
          162,
          175,
          176,
          177,
          181,
          182,
          183,
          186,
          187,
          189,
          190,
          193,
          194,
          195,
          196,
          199,
          200,
          201,
          202,
          203,
          205,
          207,
          209,
          214,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          222,
          223,
          224,
          238,
          251,
          252,
          254,
          255,
          256,
          257,
          258,
          259,
          260,
          272,
          276,
          277,
          278,
          281,
          286,
          288,
          289,
          290,
          291,
          292,
          294,
          295,
          299,
          308,
          310,
          312,
          313,
          314,
          316,
          317,
          319,
          320,
          324,
          329,
          331,
          335,
          337,
          345,
          349,
          399
        ]
      },
      {
        "test_lines": [
          369,
          372
        ],
        "covered_lines": [
          56,
          67,
          85,
          91,
          95,
          96,
          97,
          98,
          99,
          100,
          134,
          137,
          138,
          159,
          160,
          162,
          175,
          176,
          177,
          181,
          182,
          183,
          186,
          187,
          189,
          190,
          193,
          194,
          195,
          196,
          214,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          222,
          223,
          224,
          225,
          226,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          238,
          251,
          252,
          254,
          255,
          256,
          257,
          258,
          259,
          260,
          272,
          276,
          277,
          278,
          281,
          286,
          288,
          289,
          290,
          291,
          292,
          294,
          295,
          299,
          308,
          310,
          312,
          313,
          314,
          316,
          317,
          319,
          320,
          324,
          329,
          331,
          335,
          337,
          345,
          349,
          399
        ]
      },
      {
        "test_lines": [
          374,
          377
        ],
        "covered_lines": [
          56,
          67,
          85,
          91,
          95,
          96,
          97,
          98,
          99,
          100,
          134,
          137,
          138,
          159,
          160,
          162,
          175,
          176,
          177,
          181,
          182,
          183,
          186,
          187,
          189,
          190,
          193,
          194,
          195,
          196,
          214,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          222,
          223,
          224,
          225,
          226,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          238,
          251,
          252,
          254,
          255,
          256,
          257,
          258,
          259,
          260,
          272,
          276,
          277,
          278,
          281,
          286,
          288,
          289,
          290,
          291,
          292,
          294,
          295,
          299,
          308,
          310,
          312,
          313,
          314,
          316,
          317,
          319,
          320,
          324,
          329,
          331,
          335,
          337,
          345,
          349,
          399
        ]
      },
      {
        "test_lines": [
          379,
          382
        ],
        "covered_lines": [
          56,
          67,
          85,
          91,
          95,
          96,
          97,
          98,
          99,
          100,
          134,
          137,
          138,
          159,
          160,
          162,
          175,
          176,
          177,
          181,
          182,
          183,
          186,
          187,
          189,
          190,
          193,
          194,
          195,
          196,
          199,
          200,
          201,
          202,
          203,
          205,
          207,
          209,
          214,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          222,
          223,
          224,
          238,
          251,
          252,
          254,
          255,
          256,
          257,
          258,
          259,
          260,
          272,
          276,
          277,
          278,
          281,
          286,
          288,
          289,
          290,
          291,
          292,
          294,
          295,
          299,
          308,
          310,
          312,
          313,
          314,
          316,
          317,
          319,
          320,
          324,
          329,
          330,
          331,
          335,
          337,
          345,
          349,
          399
        ]
      },
      {
        "test_lines": [
          384,
          389
        ],
        "covered_lines": [
          56,
          67,
          85,
          91,
          95,
          96,
          272,
          276,
          277,
          278,
          281,
          282,
          283
        ]
      },
      {
        "test_lines": [
          391,
          394
        ],
        "covered_lines": [
          56,
          67,
          85,
          91,
          95,
          96,
          97,
          98,
          99,
          100,
          134,
          137,
          138,
          159,
          160,
          162,
          175,
          176,
          177,
          181,
          182,
          183,
          186,
          187,
          189,
          190,
          193,
          194,
          195,
          196,
          199,
          200,
          201,
          202,
          203,
          205,
          207,
          209,
          214,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          222,
          223,
          224,
          225,
          226,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          238,
          251,
          252,
          254,
          255,
          256,
          257,
          258,
          259,
          260,
          272,
          276,
          277,
          278,
          281,
          286,
          288,
          289,
          290,
          291,
          292,
          294,
          295,
          299,
          308,
          310,
          312,
          313,
          314,
          316,
          317,
          319,
          320,
          324,
          326,
          329,
          330,
          331,
          335,
          337,
          345,
          349,
          399
        ]
      },
      {
        "test_lines": [
          396,
          399
        ],
        "covered_lines": [
          56,
          67,
          85,
          91,
          95,
          96,
          97,
          98,
          99,
          100,
          134,
          137,
          138,
          159,
          160,
          162,
          175,
          176,
          177,
          181,
          182,
          183,
          186,
          187,
          189,
          190,
          193,
          194,
          195,
          196,
          199,
          200,
          201,
          202,
          203,
          205,
          207,
          209,
          214,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          222,
          223,
          224,
          225,
          226,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          238,
          251,
          252,
          254,
          255,
          256,
          257,
          258,
          259,
          260,
          272,
          276,
          277,
          278,
          281,
          286,
          288,
          289,
          290,
          291,
          292,
          294,
          295,
          299,
          308,
          310,
          312,
          313,
          314,
          316,
          317,
          319,
          320,
          324,
          329,
          330,
          331,
          335,
          337,
          345,
          349,
          399
        ]
      },
      {
        "test_lines": [
          401,
          404
        ],
        "covered_lines": [
          56,
          67,
          85,
          91,
          95,
          96,
          97,
          98,
          99,
          100,
          134,
          137,
          138,
          159,
          160,
          162,
          175,
          176,
          177,
          181,
          182,
          189,
          190,
          193,
          194,
          195,
          196,
          199,
          200,
          201,
          202,
          203,
          205,
          207,
          209,
          214,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          222,
          223,
          224,
          225,
          226,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          238,
          251,
          252,
          254,
          255,
          256,
          257,
          258,
          259,
          260,
          272,
          276,
          277,
          278,
          281,
          286,
          288,
          289,
          290,
          291,
          292,
          294,
          295,
          299,
          308,
          310,
          312,
          313,
          314,
          316,
          317,
          319,
          320,
          324,
          329,
          330,
          331,
          335,
          337,
          345,
          349,
          399
        ]
      },
      {
        "test_lines": [
          406,
          409
        ],
        "covered_lines": [
          56,
          67,
          85,
          91,
          95,
          96,
          97,
          98,
          99,
          100,
          134,
          137,
          138,
          159,
          160,
          162,
          175,
          176,
          177,
          181,
          182,
          189,
          190,
          193,
          194,
          195,
          196,
          199,
          200,
          201,
          202,
          203,
          205,
          207,
          209,
          214,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          222,
          223,
          224,
          225,
          226,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          238,
          251,
          252,
          254,
          255,
          256,
          257,
          258,
          259,
          260,
          272,
          276,
          277,
          278,
          281,
          286,
          288,
          289,
          290,
          291,
          292,
          294,
          295,
          299,
          308,
          310,
          312,
          313,
          314,
          316,
          317,
          319,
          320,
          324,
          329,
          330,
          331,
          335,
          337,
          345,
          349,
          399
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/svg/src/main/java/com/itextpdf/svg/renderers/impl/LinearGradientSvgNodeRenderer.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.svg.renderers.impl;\n",
      "\n",
      "import com.itextpdf.kernel.colors.Color;\n",
      "import com.itextpdf.kernel.colors.gradients.GradientColorStop;\n",
      "import com.itextpdf.kernel.colors.gradients.GradientColorStop.OffsetType;\n",
      "import com.itextpdf.kernel.colors.gradients.LinearGradientBuilder;\n",
      "import com.itextpdf.kernel.geom.AffineTransform;\n",
      "import com.itextpdf.kernel.geom.Point;\n",
      "import com.itextpdf.kernel.geom.Rectangle;\n",
      "import com.itextpdf.svg.SvgConstants.Attributes;\n",
      "import com.itextpdf.svg.exceptions.SvgExceptionMessageConstant;\n",
      "import com.itextpdf.svg.renderers.ISvgNodeRenderer;\n",
      "import com.itextpdf.svg.renderers.SvgDrawContext;\n",
      "import com.itextpdf.svg.utils.SvgCoordinateUtils;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "\n",
      "/**\n",
      " * {@link ISvgNodeRenderer} implementation for the &lt;linearGradient&gt; tag.\n",
      " */\n",
      "public class LinearGradientSvgNodeRenderer extends AbstractGradientSvgNodeRenderer {\n",
      "\n",
      "\n",
      "    private static final double CONVERT_COEFF = 0.75;\n",
      "\n",
      "    @Override\n",
      "    public Color createColor(SvgDrawContext context, Rectangle objectBoundingBox, float objectBoundingBoxMargin,\n",
      "            float parentOpacity) {\n",
      "        if (objectBoundingBox == null) {\n",
      "            return null;\n",
      "        }\n",
      "\n",
      "        LinearGradientBuilder builder = new LinearGradientBuilder();\n",
      "\n",
      "        for (GradientColorStop stopColor : parseStops(parentOpacity)) {\n",
      "            builder.addColorStop(stopColor);\n",
      "        }\n",
      "        builder.setSpreadMethod(parseSpreadMethod());\n",
      "\n",
      "        boolean isObjectBoundingBox = isObjectBoundingBoxUnits();\n",
      "\n",
      "        Point[] coordinates = getCoordinates(context, isObjectBoundingBox);\n",
      "\n",
      "        builder.setGradientVector(coordinates[0].getX(), coordinates[0].getY(),\n",
      "                coordinates[1].getX(), coordinates[1].getY());\n",
      "\n",
      "        AffineTransform gradientTransform = getGradientTransformToUserSpaceOnUse(objectBoundingBox,\n",
      "                isObjectBoundingBox);\n",
      "\n",
      "        builder.setCurrentSpaceToGradientVectorSpaceTransformation(gradientTransform);\n",
      "\n",
      "        return builder.buildColor(\n",
      "                objectBoundingBox.applyMargins(objectBoundingBoxMargin, objectBoundingBoxMargin, objectBoundingBoxMargin, objectBoundingBoxMargin, true),\n",
      "                context.getCurrentCanvasTransform(), context.getCurrentCanvas().getDocument()\n",
      "        );\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public ISvgNodeRenderer createDeepCopy() {\n",
      "        LinearGradientSvgNodeRenderer copy = new LinearGradientSvgNodeRenderer();\n",
      "        deepCopyAttributesAndStyles(copy);\n",
      "        deepCopyChildren(copy);\n",
      "        return copy;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Rectangle getObjectBoundingBox(SvgDrawContext context) {\n",
      "        return null;\n",
      "    }\n",
      "\n",
      "    // TODO: DEVSIX-4136 opacity is not supported now.\n",
      "    //  The opacity should be equal to 'parentOpacity * stopRenderer.getStopOpacity() * stopColor[3]'\n",
      "    private List<GradientColorStop> parseStops(float parentOpacity) {\n",
      "        List<GradientColorStop> stopsList = new ArrayList<>();\n",
      "        for (StopSvgNodeRenderer stopRenderer : getChildStopRenderers()) {\n",
      "            float[] stopColor = stopRenderer.getStopColor();\n",
      "            double offset = stopRenderer.getOffset();\n",
      "            stopsList.add(new GradientColorStop(stopColor, offset, OffsetType.RELATIVE));\n",
      "        }\n",
      "\n",
      "        if (!stopsList.isEmpty()) {\n",
      "            GradientColorStop firstStop = stopsList.get(0);\n",
      "            if (firstStop.getOffset() > 0) {\n",
      "                stopsList.add(0, new GradientColorStop(firstStop, 0f, OffsetType.RELATIVE));\n",
      "            }\n",
      "\n",
      "            GradientColorStop lastStop = stopsList.get(stopsList.size() - 1);\n",
      "            if (lastStop.getOffset() < 1) {\n",
      "                stopsList.add(new GradientColorStop(lastStop, 1f, OffsetType.RELATIVE));\n",
      "            }\n",
      "        }\n",
      "        return stopsList;\n",
      "    }\n",
      "\n",
      "    private AffineTransform getGradientTransformToUserSpaceOnUse(Rectangle objectBoundingBox,\n",
      "            boolean isObjectBoundingBox) {\n",
      "        AffineTransform gradientTransform = new AffineTransform();\n",
      "        if (isObjectBoundingBox) {\n",
      "            gradientTransform.translate(objectBoundingBox.getX(), objectBoundingBox.getY());\n",
      "            // We need to scale with dividing the lengths by 0.75 as further we should\n",
      "            // concatenate gradient transformation matrix which has no absolute parsing.\n",
      "            // For example, if gradientTransform is set to translate(1, 1) and gradientUnits\n",
      "            // is set to \"objectBoundingBox\" then the gradient should be shifted horizontally\n",
      "            // and vertically exactly by the size of the element bounding box. So, again,\n",
      "            // as we parse translate(1, 1) to translation(0.75, 0.75) the bounding box in\n",
      "            // the gradient vector space should be 0.75x0.75 in order for such translation\n",
      "            // to shift by the complete size of bounding box.\n",
      "            gradientTransform\n",
      "                    .scale(objectBoundingBox.getWidth() / CONVERT_COEFF, objectBoundingBox.getHeight() / CONVERT_COEFF);\n",
      "        }\n",
      "\n",
      "        AffineTransform svgGradientTransformation = getGradientTransform();\n",
      "        if (svgGradientTransformation != null) {\n",
      "            gradientTransform.concatenate(svgGradientTransformation);\n",
      "        }\n",
      "        return gradientTransform;\n",
      "    }\n",
      "\n",
      "    private Point[] getCoordinates(SvgDrawContext context, boolean isObjectBoundingBox) {\n",
      "        Point start;\n",
      "        Point end;\n",
      "        if (isObjectBoundingBox) {\n",
      "            // need to multiply by 0.75 as further the (top, right) coordinates of the object bbox\n",
      "            // would be transformed into (0.75, 0.75) point instead of (1, 1). The reason described\n",
      "            // as a comment inside the method constructing the gradient transformation\n",
      "            start = new Point(SvgCoordinateUtils.getCoordinateForObjectBoundingBox(\n",
      "                    getAttribute(Attributes.X1), 0) * CONVERT_COEFF,\n",
      "                    SvgCoordinateUtils.getCoordinateForObjectBoundingBox(\n",
      "                            getAttribute(Attributes.Y1), 0) * CONVERT_COEFF);\n",
      "            end = new Point(SvgCoordinateUtils.getCoordinateForObjectBoundingBox(\n",
      "                    getAttribute(Attributes.X2), 1) * CONVERT_COEFF,\n",
      "                    SvgCoordinateUtils.getCoordinateForObjectBoundingBox(\n",
      "                            getAttribute(Attributes.Y2), 0) * CONVERT_COEFF);\n",
      "        } else {\n",
      "            Rectangle currentViewPort = context.getCurrentViewPort();\n",
      "            double x = currentViewPort.getX();\n",
      "            double y = currentViewPort.getY();\n",
      "            double width = currentViewPort.getWidth();\n",
      "            double height = currentViewPort.getHeight();\n",
      "            float em = getCurrentFontSize();\n",
      "            float rem = context.getCssContext().getRootFontSize();\n",
      "            start = new Point(\n",
      "                    SvgCoordinateUtils.getCoordinateForUserSpaceOnUse(\n",
      "                            getAttribute(Attributes.X1), x, x, width, em, rem),\n",
      "                    SvgCoordinateUtils.getCoordinateForUserSpaceOnUse(\n",
      "                            getAttribute(Attributes.Y1), y, y, height, em, rem));\n",
      "            end = new Point(\n",
      "                    SvgCoordinateUtils.getCoordinateForUserSpaceOnUse(\n",
      "                            getAttribute(Attributes.X2), x + width, x, width, em, rem),\n",
      "                    SvgCoordinateUtils.getCoordinateForUserSpaceOnUse(\n",
      "                            getAttribute(Attributes.Y2), y, y, height, em, rem));\n",
      "        }\n",
      "\n",
      "        return new Point[] {start, end};\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.svg.renderers.impl;\n",
      "\n",
      "import com.itextpdf.io.exceptions.IOException;\n",
      "import com.itextpdf.kernel.geom.PageSize;\n",
      "import com.itextpdf.styledxmlparser.logs.StyledXmlParserLogMessageConstant;\n",
      "import com.itextpdf.svg.logs.SvgLogMessageConstant;\n",
      "import com.itextpdf.svg.renderers.SvgIntegrationTest;\n",
      "import com.itextpdf.test.ITextTest;\n",
      "import com.itextpdf.test.LogLevelConstants;\n",
      "import com.itextpdf.test.annotations.LogMessage;\n",
      "import com.itextpdf.test.annotations.LogMessages;\n",
      "import com.itextpdf.test.annotations.type.IntegrationTest;\n",
      "\n",
      "import org.junit.BeforeClass;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(IntegrationTest.class)\n",
      "public class LinearGradientSvgNodeRendererTest extends SvgIntegrationTest {\n",
      "\n",
      "    public static final String sourceFolder = \"./src/test/resources/com/itextpdf/svg/renderers/impl/LinearGradientSvgNodeRendererTest/\";\n",
      "    public static final String destinationFolder = \"./target/test/com/itextpdf/svg/renderers/impl/LinearGradientSvgNodeRendererTest/\";\n",
      "\n",
      "    @BeforeClass\n",
      "    public static void beforeClass() {\n",
      "        ITextTest.createOrClearDestinationFolder(destinationFolder);\n",
      "    }\n",
      "\n",
      "    // TODO: DEVSIX-3932 update cmp_ after fix\n",
      "    @Test\n",
      "    public void circleTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"circle\");\n",
      "    }\n",
      "\n",
      "    // TODO: DEVSIX-3932 update cmp_ after fix\n",
      "    @Test\n",
      "    public void ellipseTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"ellipse\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void lineTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"line\");\n",
      "    }\n",
      "    \n",
      "    @Test\n",
      "    public void pathLinesBasedTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"pathLinesBased\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void pathLinesBasedTransformedTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"pathLinesBasedTransformed\");\n",
      "    }\n",
      "    \n",
      "    @Test\n",
      "    public void pathLinesBasedWithMoveTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"pathLinesBasedWithMove\");\n",
      "    }\n",
      "    \n",
      "    @Test\n",
      "    public void pathLinesBasedWithTwoFiguresTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"pathLinesBasedWithTwoFigures\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void cubicBezierTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"cubicBezier\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void cubicBezier2Test() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"cubicBezier2\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void cubicBezier3Test() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"cubicBezier3\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void cubicBezier4Test() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"cubicBezier4\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    // See CurveTo#calculateTValues to see which discriminant is mentioned.\n",
      "    public void cubicBezierZeroDiscriminantTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"cubicBezierZeroDiscriminant\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    // See CurveTo#calculateTValues to see which discriminant is mentioned.\n",
      "    public void cubicBezierNegativeDiscriminantTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"cubicBezierNegativeDiscriminant\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void cubicBezierInsideOtherCubicBezierTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"cubicBezierInsideOtherCubicBezier\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void smoothCubicBezierWithAbsoluteCoordinatesTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"smoothCubicBezierWithAbsoluteCoordinates\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void smoothCubicBezierWithRelativeCoordinatesTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"smoothCubicBezierWithRelativeCoordinates\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void smoothCubicBezierRelativeAndAbsoluteCoordWithMoveTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"smoothCubicBezierRelativeAndAbsoluteCoordWithMove\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void smoothCubicBezierRelativeAndAbsoluteCoordNoZOperatorTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"smoothCubicBezierRelativeAndAbsoluteCoordNoZOperator\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void quadraticBezierTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"quadraticBezier\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void quadraticBezier2Test() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"quadraticBezier2\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void quadraticBezier3Test() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"quadraticBezier3\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void quadraticBezierInsideOtherQuadraticBezierTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"quadraticBezierInsideOtherQuadraticBezier\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void smoothQuadraticBezierWithAbsoluteCoordinatesTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"smoothQuadraticBezierWithAbsoluteCoordinates\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void smoothQuadraticBezierWithRelativeCoordinatesTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"smoothQuadraticBezierWithRelativeCoordinates\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void smoothQuadraticBezierAbsoluteAndRelativeCoordWithMoveTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"smoothQuadraticBezierAbsoluteAndRelativeCoordWithMove\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void smoothQuadraticBezierRelativeAndAbsoluteCoordNoZOperatorTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"smoothQuadraticBezierRelativeAndAbsoluteCoordNoZOperator\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void ellipticalArcsTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"ellipticalArcs\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void ellipticalArcsNegativeRxRyTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"ellipticalArcsNegativeRxRy\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void ellipticalArcZeroRxRyTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"ellipticalArcZeroRxRy\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void ellipticalArcsWithPhiTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"ellipticalArcsWithPhi\", PageSize.A3.rotate());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void ellipticalArcsWithPhi0Test() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"ellipticalArcsWithPhi0\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void ellipticalArcsWithPhi90Test() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"ellipticalArcsWithPhi90\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void ellipticalArcsWithPhi180Test() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"ellipticalArcsWithPhi180\");\n",
      "    }\n",
      "    @Test\n",
      "    public void ellipticalArcsWithPhi270Test() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"ellipticalArcsWithPhi270\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void ellipticalArcsWithPhiRelativeTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"ellipticalArcsWithPhiRelative\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void ellipticalArcsWithPhiAbsoluteTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"ellipticalArcsWithPhiAbsolute\");\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void ellipticalArcsRelativeCoordinatesTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"ellipticalArcsRelativeCoordinates\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void arcInsideOtherEllipticalArcTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"arcInsideOtherEllipticalArc\");\n",
      "    }\n",
      "\n",
      "    // TODO: DEVSIX-3932 update cmp_ after fix\n",
      "    @Test\n",
      "    public void polygonTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"polygon\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void polylineTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"polyline\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void rectTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"rect\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    @LogMessages(messages = {\n",
      "            @LogMessage(messageTemplate = SvgLogMessageConstant.GRADIENT_INVALID_SPREAD_METHOD_LOG, logLevel = LogLevelConstants.WARN)\n",
      "    })\n",
      "    public void rectWithInvalidSpreadMethodValueTest() throws java.io.IOException, InterruptedException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"rectWithInvalidSpreadMethodValue\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void rectsWithFallBackColorsTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"rectsWithFallBackColors\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void rectMultipleStopsWithSameOffsetPadTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"rectMultipleStopsWithSameOffsetPad\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void rectMultipleStopsWithSameOffsetReflectTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"rectMultipleStopsWithSameOffsetReflect\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void rectMultipleStopsWithSameOffsetRepeatTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"rectMultipleStopsWithSameOffsetRepeat\");\n",
      "    }\n",
      "\n",
      "    // TODO: DEVSIX-4136 update cmp_ after fix\n",
      "    //  (opacity is not implemented. No stops defines no color, i.e. transparent color or black with 100% opacity)\n",
      "    @Test\n",
      "    public void rectNoStopsTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"rectNoStops\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void rectSingle0StopTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"rectSingle0Stop\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void rectSingle1StopTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"rectSingle1Stop\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void rectStopWithoutColorTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"rectStopWithoutColor\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void rectTransformedTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"rectTransformed\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void rectWithGradientTransformTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"rectWithGradientTransform\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void rectWithMultipleTransformsTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"rectWithMultipleTransforms\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    @LogMessages(messages = {\n",
      "            @LogMessage(messageTemplate = StyledXmlParserLogMessageConstant.UNKNOWN_ABSOLUTE_METRIC_LENGTH_PARSED)\n",
      "    })\n",
      "    // TODO DEVSIX-4140 font-relative values doesn't support\n",
      "    public void textTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"text\");\n",
      "    }\n",
      "    \n",
      "    @Test\n",
      "    public void textNestedTSpansTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"textNestedTSpansTest\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    @LogMessages(messages = {\n",
      "            @LogMessage(messageTemplate = StyledXmlParserLogMessageConstant.UNKNOWN_ABSOLUTE_METRIC_LENGTH_PARSED)\n",
      "    })\n",
      "    public void textRotatedTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"textRotatedTest\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void textDxTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"textDxTest\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void textDyTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"textDyTest\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void textXYOffset() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"textXYOffset\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    // TODO DEVSIX-4143 change cmp file after fixing\n",
      "    public void textXOffset() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"textXOffset\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void textXYDxDyOffset() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"textXYDxDyOffset\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void textGradientEmUnits() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"textGradientEmUnits\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void textGradientEmUnitsRelated() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"textGradientEmUnitsRelated\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void textGradientEmUnitsRelatedNotDefs() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"textGradientEmUnitsRelatedNotDefs\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void textGradientEmUnitsRelatedDefault() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"textGradientEmUnitsRelatedDefault\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void textGradientExUnits() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"textGradientExUnits\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void textGradientRemUnits() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"textGradientRemUnits\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void textGradientRemUnitsNestedSvg() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"textGradientRemUnitsNestedSvg\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void rectMultipleStopsWithSameOffsetAndZeroCoordLengthPadTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"rectMultipleStopsWithSameOffsetAndZeroCoordLengthPad\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void rectMultipleStopsWithSameOffsetAndZeroCoordLengthReflectTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"rectMultipleStopsWithSameOffsetAndZeroCoordLengthReflect\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void rectMultipleStopsWithSameOffsetAndZeroCoordLengthRepeatTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"rectMultipleStopsWithDiffOffsetAndZeroCoordLengthRepeat\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void rectMultipleStopsWithDiffOffsetAndZeroCoordLengthPadTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"rectMultipleStopsWithDiffOffsetAndZeroCoordLengthPad\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void rectMultipleStopsWithDiffOffsetAndZeroCoordLengthReflectTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"rectMultipleStopsWithDiffOffsetAndZeroCoordLengthReflect\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void rectMultipleStopsWithDiffOffsetAndZeroCoordLengthRepeatTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"rectMultipleStopsWithSameOffsetAndZeroCoordLengthRepeat\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void rectInvalidStopsSequenceTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"rectInvalidStopsSequence\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void rectInvalidCoordinatesMetricsTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"rectInvalidCoordinatesMetrics\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void rectInvalidStopsSequenceWithoutBoundingStopsTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"rectInvalidStopsSequenceWithoutBoundingStops\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void userSpaceOnUseWithAbsoluteCoordinatesTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"userSpaceOnUseWithAbsoluteCoordinates\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void userSpaceOnUseDiffAbsoluteUnitsInGradientTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"userSpaceOnUseDiffAbsoluteUnitsInGradient\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    // TODO: DEVSIX-3596 update cmp_ after fix (\"ch\" unit is not implemented yet)\n",
      "    public void userSpaceOnUseWithChUnitTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"userSpaceOnUseWithChUnit\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void userSpaceOnUseWithUnitsRelativeToFontTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"userSpaceOnUseWithUnitsRelativeToFont\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    // TODO: DEVSIX-3596 update cmp_ after fix (\"vh\" \"vw\" \"vmin\" \"vmax\" units are not implemented yet)\n",
      "    public void userSpaceOnUseWithUnitsRelativeToViewportTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"userSpaceOnUseWithUnitsRelativeToViewport\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    // TODO: DEVSIX-3596 update cmp_ after fix (\"ch\" \"vmin\"+\"vmax\"+\"vw\"+\"vh\" not implemented yet)\n",
      "    public void userSpaceOnUseDiffRelativeUnitsInGradientTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"userSpaceOnUseDiffRelativeUnitsInGradient\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void objectBoundingBoxWithAbsoluteCoordinatesTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"objectBoundingBoxWithAbsoluteCoordinates\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void objectBoundingBoxDifferentAbsoluteUnitsInGradientTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"objectBoundingBoxDifferentAbsoluteUnitsInGradient\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void objectBoundingBoxWithUnitsRelativeToFontTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"objectBoundingBoxWithUnitsRelativeToFont\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    // TODO: DEVSIX-3596 update cmp_ after fix (\"ch\" not implemented yet)\n",
      "    //  actually the value type should not affect on the objectBoundingBox coordinate, but as\n",
      "    //  we are not recognize these values as valid relative type,\n",
      "    //  we get the the resulted coordinate uses defaults\n",
      "    public void objectBoundingBoxWithChUnitTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"objectBoundingBoxWithChUnit\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    // TODO: DEVSIX-3596 update cmp_ after fix (\"vmin\", \"vmax\", \"vw\", \"vh\" not implemented yet)\n",
      "    //  actually the value type should not affect on the objectBoundingBox coordinate, but as\n",
      "    //  we are not recognize these values as valid relative type,\n",
      "    //  we get the the resulted coordinate uses defaults\n",
      "    public void objectBoundingBoxWithUnitsRelativeToViewportTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"objectBoundingBoxWithUnitsRelativeToViewport\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    // TODO: DEVSIX-3596 update cmp_ after fix (\"ch\" \"vmin\"+\"vmax\"+\"vw\"+\"vh\" not implemented yet)\n",
      "    //  actually the value type should not affect on the objectBoundingBox coordinate, but as\n",
      "    //  we are not recognize these values as valid relative type,\n",
      "    //  we get the the resulted coordinate uses defaults\n",
      "    public void objectBoundingBoxDifferentRelativeUnitsInGradientTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"objectBoundingBoxDifferentRelativeUnitsInGradient\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void translateTransformInGradientWithObjectBoundingBoxUnitsTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"translateTransformInGradientWithObjectBoundingBoxUnits\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    //TODO change cmp after DEVSIX-4143 is fixed (bug with only one absolute coordinate in tspan)\n",
      "    public void matrixTransformInGradientWithObjectBoundingBoxUnitsTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"matrixTransformInGradientWithObjectBoundingBoxUnits\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void severalTransformsInGradientWithObjectBoundingBoxUnitsTest() throws IOException, InterruptedException, java.io.IOException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"severalTransformsInGradientWithObjectBoundingBoxUnits\");\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "LinearGradientSvgNodeRenderer::::createDeepCopy()": [
        81,
        87
      ],
      "LinearGradientSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)": [
        89,
        92
      ],
      "LinearGradientSvgNodeRenderer::::parseStops(float)": [
        96,
        116
      ],
      "LinearGradientSvgNodeRenderer::::getCoordinates(com.itextpdf.svg.renderers.SvgDrawContext,boolean)": [
        142,
        178
      ]
    },
    "test_method_lines_dic": {
      "LinearGradientSvgNodeRendererTest::::beforeClass()": [
        46,
        49
      ],
      "LinearGradientSvgNodeRendererTest::::circleTest()": [
        52,
        55
      ],
      "LinearGradientSvgNodeRendererTest::::ellipseTest()": [
        58,
        61
      ],
      "LinearGradientSvgNodeRendererTest::::lineTest()": [
        63,
        66
      ],
      "LinearGradientSvgNodeRendererTest::::pathLinesBasedTest()": [
        68,
        71
      ],
      "LinearGradientSvgNodeRendererTest::::pathLinesBasedTransformedTest()": [
        73,
        76
      ],
      "LinearGradientSvgNodeRendererTest::::pathLinesBasedWithMoveTest()": [
        78,
        81
      ],
      "LinearGradientSvgNodeRendererTest::::pathLinesBasedWithTwoFiguresTest()": [
        83,
        86
      ],
      "LinearGradientSvgNodeRendererTest::::cubicBezierTest()": [
        88,
        91
      ],
      "LinearGradientSvgNodeRendererTest::::cubicBezier2Test()": [
        93,
        96
      ],
      "LinearGradientSvgNodeRendererTest::::cubicBezier3Test()": [
        98,
        101
      ],
      "LinearGradientSvgNodeRendererTest::::cubicBezier4Test()": [
        103,
        106
      ],
      "LinearGradientSvgNodeRendererTest::::cubicBezierZeroDiscriminantTest()": [
        108,
        112
      ],
      "LinearGradientSvgNodeRendererTest::::cubicBezierNegativeDiscriminantTest()": [
        114,
        118
      ],
      "LinearGradientSvgNodeRendererTest::::cubicBezierInsideOtherCubicBezierTest()": [
        120,
        123
      ],
      "LinearGradientSvgNodeRendererTest::::smoothCubicBezierWithAbsoluteCoordinatesTest()": [
        125,
        128
      ],
      "LinearGradientSvgNodeRendererTest::::smoothCubicBezierWithRelativeCoordinatesTest()": [
        130,
        133
      ],
      "LinearGradientSvgNodeRendererTest::::smoothCubicBezierRelativeAndAbsoluteCoordWithMoveTest()": [
        135,
        138
      ],
      "LinearGradientSvgNodeRendererTest::::smoothCubicBezierRelativeAndAbsoluteCoordNoZOperatorTest()": [
        140,
        143
      ],
      "LinearGradientSvgNodeRendererTest::::quadraticBezierTest()": [
        145,
        148
      ],
      "LinearGradientSvgNodeRendererTest::::quadraticBezier2Test()": [
        150,
        153
      ],
      "LinearGradientSvgNodeRendererTest::::quadraticBezier3Test()": [
        155,
        158
      ],
      "LinearGradientSvgNodeRendererTest::::quadraticBezierInsideOtherQuadraticBezierTest()": [
        160,
        163
      ],
      "LinearGradientSvgNodeRendererTest::::smoothQuadraticBezierWithAbsoluteCoordinatesTest()": [
        165,
        168
      ],
      "LinearGradientSvgNodeRendererTest::::smoothQuadraticBezierWithRelativeCoordinatesTest()": [
        170,
        173
      ],
      "LinearGradientSvgNodeRendererTest::::smoothQuadraticBezierAbsoluteAndRelativeCoordWithMoveTest()": [
        175,
        178
      ],
      "LinearGradientSvgNodeRendererTest::::smoothQuadraticBezierRelativeAndAbsoluteCoordNoZOperatorTest()": [
        180,
        183
      ],
      "LinearGradientSvgNodeRendererTest::::ellipticalArcsTest()": [
        185,
        188
      ],
      "LinearGradientSvgNodeRendererTest::::ellipticalArcsNegativeRxRyTest()": [
        190,
        193
      ],
      "LinearGradientSvgNodeRendererTest::::ellipticalArcZeroRxRyTest()": [
        195,
        198
      ],
      "LinearGradientSvgNodeRendererTest::::ellipticalArcsWithPhiTest()": [
        200,
        203
      ],
      "LinearGradientSvgNodeRendererTest::::ellipticalArcsWithPhi0Test()": [
        205,
        208
      ],
      "LinearGradientSvgNodeRendererTest::::ellipticalArcsWithPhi90Test()": [
        210,
        213
      ],
      "LinearGradientSvgNodeRendererTest::::ellipticalArcsWithPhi180Test()": [
        215,
        218
      ],
      "LinearGradientSvgNodeRendererTest::::ellipticalArcsWithPhi270Test()": [
        219,
        222
      ],
      "LinearGradientSvgNodeRendererTest::::ellipticalArcsWithPhiRelativeTest()": [
        224,
        227
      ],
      "LinearGradientSvgNodeRendererTest::::ellipticalArcsWithPhiAbsoluteTest()": [
        229,
        232
      ],
      "LinearGradientSvgNodeRendererTest::::ellipticalArcsRelativeCoordinatesTest()": [
        235,
        238
      ],
      "LinearGradientSvgNodeRendererTest::::arcInsideOtherEllipticalArcTest()": [
        240,
        243
      ],
      "LinearGradientSvgNodeRendererTest::::polygonTest()": [
        246,
        249
      ],
      "LinearGradientSvgNodeRendererTest::::polylineTest()": [
        251,
        254
      ],
      "LinearGradientSvgNodeRendererTest::::rectTest()": [
        256,
        259
      ],
      "LinearGradientSvgNodeRendererTest::::rectWithInvalidSpreadMethodValueTest()": [
        261,
        267
      ],
      "LinearGradientSvgNodeRendererTest::::rectsWithFallBackColorsTest()": [
        269,
        272
      ],
      "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithSameOffsetPadTest()": [
        274,
        277
      ],
      "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithSameOffsetReflectTest()": [
        279,
        282
      ],
      "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithSameOffsetRepeatTest()": [
        284,
        287
      ],
      "LinearGradientSvgNodeRendererTest::::rectNoStopsTest()": [
        291,
        294
      ],
      "LinearGradientSvgNodeRendererTest::::rectSingle0StopTest()": [
        296,
        299
      ],
      "LinearGradientSvgNodeRendererTest::::rectSingle1StopTest()": [
        301,
        304
      ],
      "LinearGradientSvgNodeRendererTest::::rectStopWithoutColorTest()": [
        306,
        309
      ],
      "LinearGradientSvgNodeRendererTest::::rectTransformedTest()": [
        311,
        314
      ],
      "LinearGradientSvgNodeRendererTest::::rectWithGradientTransformTest()": [
        316,
        319
      ],
      "LinearGradientSvgNodeRendererTest::::rectWithMultipleTransformsTest()": [
        321,
        324
      ],
      "LinearGradientSvgNodeRendererTest::::textTest()": [
        326,
        333
      ],
      "LinearGradientSvgNodeRendererTest::::textNestedTSpansTest()": [
        335,
        338
      ],
      "LinearGradientSvgNodeRendererTest::::textRotatedTest()": [
        340,
        346
      ],
      "LinearGradientSvgNodeRendererTest::::textDxTest()": [
        348,
        351
      ],
      "LinearGradientSvgNodeRendererTest::::textDyTest()": [
        353,
        356
      ],
      "LinearGradientSvgNodeRendererTest::::textXYOffset()": [
        358,
        361
      ],
      "LinearGradientSvgNodeRendererTest::::textXOffset()": [
        363,
        367
      ],
      "LinearGradientSvgNodeRendererTest::::textXYDxDyOffset()": [
        369,
        372
      ],
      "LinearGradientSvgNodeRendererTest::::textGradientEmUnits()": [
        374,
        377
      ],
      "LinearGradientSvgNodeRendererTest::::textGradientEmUnitsRelated()": [
        379,
        382
      ],
      "LinearGradientSvgNodeRendererTest::::textGradientEmUnitsRelatedNotDefs()": [
        384,
        387
      ],
      "LinearGradientSvgNodeRendererTest::::textGradientEmUnitsRelatedDefault()": [
        389,
        392
      ],
      "LinearGradientSvgNodeRendererTest::::textGradientExUnits()": [
        394,
        397
      ],
      "LinearGradientSvgNodeRendererTest::::textGradientRemUnits()": [
        399,
        402
      ],
      "LinearGradientSvgNodeRendererTest::::textGradientRemUnitsNestedSvg()": [
        404,
        407
      ],
      "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithSameOffsetAndZeroCoordLengthPadTest()": [
        409,
        412
      ],
      "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithSameOffsetAndZeroCoordLengthReflectTest()": [
        414,
        417
      ],
      "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithSameOffsetAndZeroCoordLengthRepeatTest()": [
        419,
        422
      ],
      "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithDiffOffsetAndZeroCoordLengthPadTest()": [
        424,
        427
      ],
      "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithDiffOffsetAndZeroCoordLengthReflectTest()": [
        429,
        432
      ],
      "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithDiffOffsetAndZeroCoordLengthRepeatTest()": [
        434,
        437
      ],
      "LinearGradientSvgNodeRendererTest::::rectInvalidStopsSequenceTest()": [
        439,
        442
      ],
      "LinearGradientSvgNodeRendererTest::::rectInvalidCoordinatesMetricsTest()": [
        444,
        447
      ],
      "LinearGradientSvgNodeRendererTest::::rectInvalidStopsSequenceWithoutBoundingStopsTest()": [
        449,
        452
      ],
      "LinearGradientSvgNodeRendererTest::::userSpaceOnUseWithAbsoluteCoordinatesTest()": [
        454,
        457
      ],
      "LinearGradientSvgNodeRendererTest::::userSpaceOnUseDiffAbsoluteUnitsInGradientTest()": [
        459,
        462
      ],
      "LinearGradientSvgNodeRendererTest::::userSpaceOnUseWithChUnitTest()": [
        464,
        468
      ],
      "LinearGradientSvgNodeRendererTest::::userSpaceOnUseWithUnitsRelativeToFontTest()": [
        470,
        473
      ],
      "LinearGradientSvgNodeRendererTest::::userSpaceOnUseWithUnitsRelativeToViewportTest()": [
        475,
        479
      ],
      "LinearGradientSvgNodeRendererTest::::userSpaceOnUseDiffRelativeUnitsInGradientTest()": [
        481,
        485
      ],
      "LinearGradientSvgNodeRendererTest::::objectBoundingBoxWithAbsoluteCoordinatesTest()": [
        487,
        490
      ],
      "LinearGradientSvgNodeRendererTest::::objectBoundingBoxDifferentAbsoluteUnitsInGradientTest()": [
        492,
        495
      ],
      "LinearGradientSvgNodeRendererTest::::objectBoundingBoxWithUnitsRelativeToFontTest()": [
        497,
        500
      ],
      "LinearGradientSvgNodeRendererTest::::objectBoundingBoxWithChUnitTest()": [
        502,
        509
      ],
      "LinearGradientSvgNodeRendererTest::::objectBoundingBoxWithUnitsRelativeToViewportTest()": [
        511,
        518
      ],
      "LinearGradientSvgNodeRendererTest::::objectBoundingBoxDifferentRelativeUnitsInGradientTest()": [
        520,
        527
      ],
      "LinearGradientSvgNodeRendererTest::::translateTransformInGradientWithObjectBoundingBoxUnitsTest()": [
        529,
        532
      ],
      "LinearGradientSvgNodeRendererTest::::matrixTransformInGradientWithObjectBoundingBoxUnitsTest()": [
        534,
        538
      ],
      "LinearGradientSvgNodeRendererTest::::severalTransformsInGradientWithObjectBoundingBoxUnitsTest()": [
        540,
        543
      ]
    },
    "reverse_method_lines_dic": {
      "81": "LinearGradientSvgNodeRenderer::::createDeepCopy()",
      "82": "LinearGradientSvgNodeRenderer::::createDeepCopy()",
      "83": "LinearGradientSvgNodeRenderer::::createDeepCopy()",
      "84": "LinearGradientSvgNodeRenderer::::createDeepCopy()",
      "85": "LinearGradientSvgNodeRenderer::::createDeepCopy()",
      "86": "LinearGradientSvgNodeRenderer::::createDeepCopy()",
      "87": "LinearGradientSvgNodeRenderer::::createDeepCopy()",
      "89": "LinearGradientSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "90": "LinearGradientSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "91": "LinearGradientSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "92": "LinearGradientSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "96": "LinearGradientSvgNodeRenderer::::parseStops(float)",
      "97": "LinearGradientSvgNodeRenderer::::parseStops(float)",
      "98": "LinearGradientSvgNodeRenderer::::parseStops(float)",
      "99": "LinearGradientSvgNodeRenderer::::parseStops(float)",
      "100": "LinearGradientSvgNodeRenderer::::parseStops(float)",
      "101": "LinearGradientSvgNodeRenderer::::parseStops(float)",
      "102": "LinearGradientSvgNodeRenderer::::parseStops(float)",
      "103": "LinearGradientSvgNodeRenderer::::parseStops(float)",
      "104": "LinearGradientSvgNodeRenderer::::parseStops(float)",
      "105": "LinearGradientSvgNodeRenderer::::parseStops(float)",
      "106": "LinearGradientSvgNodeRenderer::::parseStops(float)",
      "107": "LinearGradientSvgNodeRenderer::::parseStops(float)",
      "108": "LinearGradientSvgNodeRenderer::::parseStops(float)",
      "109": "LinearGradientSvgNodeRenderer::::parseStops(float)",
      "110": "LinearGradientSvgNodeRenderer::::parseStops(float)",
      "111": "LinearGradientSvgNodeRenderer::::parseStops(float)",
      "112": "LinearGradientSvgNodeRenderer::::parseStops(float)",
      "113": "LinearGradientSvgNodeRenderer::::parseStops(float)",
      "114": "LinearGradientSvgNodeRenderer::::parseStops(float)",
      "115": "LinearGradientSvgNodeRenderer::::parseStops(float)",
      "116": "LinearGradientSvgNodeRenderer::::parseStops(float)",
      "142": "LinearGradientSvgNodeRenderer::::getCoordinates(com.itextpdf.svg.renderers.SvgDrawContext,boolean)",
      "143": "LinearGradientSvgNodeRenderer::::getCoordinates(com.itextpdf.svg.renderers.SvgDrawContext,boolean)",
      "144": "LinearGradientSvgNodeRenderer::::getCoordinates(com.itextpdf.svg.renderers.SvgDrawContext,boolean)",
      "145": "LinearGradientSvgNodeRenderer::::getCoordinates(com.itextpdf.svg.renderers.SvgDrawContext,boolean)",
      "146": "LinearGradientSvgNodeRenderer::::getCoordinates(com.itextpdf.svg.renderers.SvgDrawContext,boolean)",
      "147": "LinearGradientSvgNodeRenderer::::getCoordinates(com.itextpdf.svg.renderers.SvgDrawContext,boolean)",
      "148": "LinearGradientSvgNodeRenderer::::getCoordinates(com.itextpdf.svg.renderers.SvgDrawContext,boolean)",
      "149": "LinearGradientSvgNodeRenderer::::getCoordinates(com.itextpdf.svg.renderers.SvgDrawContext,boolean)",
      "150": "LinearGradientSvgNodeRenderer::::getCoordinates(com.itextpdf.svg.renderers.SvgDrawContext,boolean)",
      "151": "LinearGradientSvgNodeRenderer::::getCoordinates(com.itextpdf.svg.renderers.SvgDrawContext,boolean)",
      "152": "LinearGradientSvgNodeRenderer::::getCoordinates(com.itextpdf.svg.renderers.SvgDrawContext,boolean)",
      "153": "LinearGradientSvgNodeRenderer::::getCoordinates(com.itextpdf.svg.renderers.SvgDrawContext,boolean)",
      "154": "LinearGradientSvgNodeRenderer::::getCoordinates(com.itextpdf.svg.renderers.SvgDrawContext,boolean)",
      "155": "LinearGradientSvgNodeRenderer::::getCoordinates(com.itextpdf.svg.renderers.SvgDrawContext,boolean)",
      "156": "LinearGradientSvgNodeRenderer::::getCoordinates(com.itextpdf.svg.renderers.SvgDrawContext,boolean)",
      "157": "LinearGradientSvgNodeRenderer::::getCoordinates(com.itextpdf.svg.renderers.SvgDrawContext,boolean)",
      "158": "LinearGradientSvgNodeRenderer::::getCoordinates(com.itextpdf.svg.renderers.SvgDrawContext,boolean)",
      "159": "LinearGradientSvgNodeRenderer::::getCoordinates(com.itextpdf.svg.renderers.SvgDrawContext,boolean)",
      "160": "LinearGradientSvgNodeRenderer::::getCoordinates(com.itextpdf.svg.renderers.SvgDrawContext,boolean)",
      "161": "LinearGradientSvgNodeRenderer::::getCoordinates(com.itextpdf.svg.renderers.SvgDrawContext,boolean)",
      "162": "LinearGradientSvgNodeRenderer::::getCoordinates(com.itextpdf.svg.renderers.SvgDrawContext,boolean)",
      "163": "LinearGradientSvgNodeRenderer::::getCoordinates(com.itextpdf.svg.renderers.SvgDrawContext,boolean)",
      "164": "LinearGradientSvgNodeRenderer::::getCoordinates(com.itextpdf.svg.renderers.SvgDrawContext,boolean)",
      "165": "LinearGradientSvgNodeRenderer::::getCoordinates(com.itextpdf.svg.renderers.SvgDrawContext,boolean)",
      "166": "LinearGradientSvgNodeRenderer::::getCoordinates(com.itextpdf.svg.renderers.SvgDrawContext,boolean)",
      "167": "LinearGradientSvgNodeRenderer::::getCoordinates(com.itextpdf.svg.renderers.SvgDrawContext,boolean)",
      "168": "LinearGradientSvgNodeRenderer::::getCoordinates(com.itextpdf.svg.renderers.SvgDrawContext,boolean)",
      "169": "LinearGradientSvgNodeRenderer::::getCoordinates(com.itextpdf.svg.renderers.SvgDrawContext,boolean)",
      "170": "LinearGradientSvgNodeRenderer::::getCoordinates(com.itextpdf.svg.renderers.SvgDrawContext,boolean)",
      "171": "LinearGradientSvgNodeRenderer::::getCoordinates(com.itextpdf.svg.renderers.SvgDrawContext,boolean)",
      "172": "LinearGradientSvgNodeRenderer::::getCoordinates(com.itextpdf.svg.renderers.SvgDrawContext,boolean)",
      "173": "LinearGradientSvgNodeRenderer::::getCoordinates(com.itextpdf.svg.renderers.SvgDrawContext,boolean)",
      "174": "LinearGradientSvgNodeRenderer::::getCoordinates(com.itextpdf.svg.renderers.SvgDrawContext,boolean)",
      "175": "LinearGradientSvgNodeRenderer::::getCoordinates(com.itextpdf.svg.renderers.SvgDrawContext,boolean)",
      "176": "LinearGradientSvgNodeRenderer::::getCoordinates(com.itextpdf.svg.renderers.SvgDrawContext,boolean)",
      "177": "LinearGradientSvgNodeRenderer::::getCoordinates(com.itextpdf.svg.renderers.SvgDrawContext,boolean)",
      "178": "LinearGradientSvgNodeRenderer::::getCoordinates(com.itextpdf.svg.renderers.SvgDrawContext,boolean)"
    },
    "test_reverse_method_lines_dic": {
      "46": "LinearGradientSvgNodeRendererTest::::beforeClass()",
      "47": "LinearGradientSvgNodeRendererTest::::beforeClass()",
      "48": "LinearGradientSvgNodeRendererTest::::beforeClass()",
      "49": "LinearGradientSvgNodeRendererTest::::beforeClass()",
      "52": "LinearGradientSvgNodeRendererTest::::circleTest()",
      "53": "LinearGradientSvgNodeRendererTest::::circleTest()",
      "54": "LinearGradientSvgNodeRendererTest::::circleTest()",
      "55": "LinearGradientSvgNodeRendererTest::::circleTest()",
      "58": "LinearGradientSvgNodeRendererTest::::ellipseTest()",
      "59": "LinearGradientSvgNodeRendererTest::::ellipseTest()",
      "60": "LinearGradientSvgNodeRendererTest::::ellipseTest()",
      "61": "LinearGradientSvgNodeRendererTest::::ellipseTest()",
      "63": "LinearGradientSvgNodeRendererTest::::lineTest()",
      "64": "LinearGradientSvgNodeRendererTest::::lineTest()",
      "65": "LinearGradientSvgNodeRendererTest::::lineTest()",
      "66": "LinearGradientSvgNodeRendererTest::::lineTest()",
      "68": "LinearGradientSvgNodeRendererTest::::pathLinesBasedTest()",
      "69": "LinearGradientSvgNodeRendererTest::::pathLinesBasedTest()",
      "70": "LinearGradientSvgNodeRendererTest::::pathLinesBasedTest()",
      "71": "LinearGradientSvgNodeRendererTest::::pathLinesBasedTest()",
      "73": "LinearGradientSvgNodeRendererTest::::pathLinesBasedTransformedTest()",
      "74": "LinearGradientSvgNodeRendererTest::::pathLinesBasedTransformedTest()",
      "75": "LinearGradientSvgNodeRendererTest::::pathLinesBasedTransformedTest()",
      "76": "LinearGradientSvgNodeRendererTest::::pathLinesBasedTransformedTest()",
      "78": "LinearGradientSvgNodeRendererTest::::pathLinesBasedWithMoveTest()",
      "79": "LinearGradientSvgNodeRendererTest::::pathLinesBasedWithMoveTest()",
      "80": "LinearGradientSvgNodeRendererTest::::pathLinesBasedWithMoveTest()",
      "81": "LinearGradientSvgNodeRendererTest::::pathLinesBasedWithMoveTest()",
      "83": "LinearGradientSvgNodeRendererTest::::pathLinesBasedWithTwoFiguresTest()",
      "84": "LinearGradientSvgNodeRendererTest::::pathLinesBasedWithTwoFiguresTest()",
      "85": "LinearGradientSvgNodeRendererTest::::pathLinesBasedWithTwoFiguresTest()",
      "86": "LinearGradientSvgNodeRendererTest::::pathLinesBasedWithTwoFiguresTest()",
      "88": "LinearGradientSvgNodeRendererTest::::cubicBezierTest()",
      "89": "LinearGradientSvgNodeRendererTest::::cubicBezierTest()",
      "90": "LinearGradientSvgNodeRendererTest::::cubicBezierTest()",
      "91": "LinearGradientSvgNodeRendererTest::::cubicBezierTest()",
      "93": "LinearGradientSvgNodeRendererTest::::cubicBezier2Test()",
      "94": "LinearGradientSvgNodeRendererTest::::cubicBezier2Test()",
      "95": "LinearGradientSvgNodeRendererTest::::cubicBezier2Test()",
      "96": "LinearGradientSvgNodeRendererTest::::cubicBezier2Test()",
      "98": "LinearGradientSvgNodeRendererTest::::cubicBezier3Test()",
      "99": "LinearGradientSvgNodeRendererTest::::cubicBezier3Test()",
      "100": "LinearGradientSvgNodeRendererTest::::cubicBezier3Test()",
      "101": "LinearGradientSvgNodeRendererTest::::cubicBezier3Test()",
      "103": "LinearGradientSvgNodeRendererTest::::cubicBezier4Test()",
      "104": "LinearGradientSvgNodeRendererTest::::cubicBezier4Test()",
      "105": "LinearGradientSvgNodeRendererTest::::cubicBezier4Test()",
      "106": "LinearGradientSvgNodeRendererTest::::cubicBezier4Test()",
      "108": "LinearGradientSvgNodeRendererTest::::cubicBezierZeroDiscriminantTest()",
      "109": "LinearGradientSvgNodeRendererTest::::cubicBezierZeroDiscriminantTest()",
      "110": "LinearGradientSvgNodeRendererTest::::cubicBezierZeroDiscriminantTest()",
      "111": "LinearGradientSvgNodeRendererTest::::cubicBezierZeroDiscriminantTest()",
      "112": "LinearGradientSvgNodeRendererTest::::cubicBezierZeroDiscriminantTest()",
      "114": "LinearGradientSvgNodeRendererTest::::cubicBezierNegativeDiscriminantTest()",
      "115": "LinearGradientSvgNodeRendererTest::::cubicBezierNegativeDiscriminantTest()",
      "116": "LinearGradientSvgNodeRendererTest::::cubicBezierNegativeDiscriminantTest()",
      "117": "LinearGradientSvgNodeRendererTest::::cubicBezierNegativeDiscriminantTest()",
      "118": "LinearGradientSvgNodeRendererTest::::cubicBezierNegativeDiscriminantTest()",
      "120": "LinearGradientSvgNodeRendererTest::::cubicBezierInsideOtherCubicBezierTest()",
      "121": "LinearGradientSvgNodeRendererTest::::cubicBezierInsideOtherCubicBezierTest()",
      "122": "LinearGradientSvgNodeRendererTest::::cubicBezierInsideOtherCubicBezierTest()",
      "123": "LinearGradientSvgNodeRendererTest::::cubicBezierInsideOtherCubicBezierTest()",
      "125": "LinearGradientSvgNodeRendererTest::::smoothCubicBezierWithAbsoluteCoordinatesTest()",
      "126": "LinearGradientSvgNodeRendererTest::::smoothCubicBezierWithAbsoluteCoordinatesTest()",
      "127": "LinearGradientSvgNodeRendererTest::::smoothCubicBezierWithAbsoluteCoordinatesTest()",
      "128": "LinearGradientSvgNodeRendererTest::::smoothCubicBezierWithAbsoluteCoordinatesTest()",
      "130": "LinearGradientSvgNodeRendererTest::::smoothCubicBezierWithRelativeCoordinatesTest()",
      "131": "LinearGradientSvgNodeRendererTest::::smoothCubicBezierWithRelativeCoordinatesTest()",
      "132": "LinearGradientSvgNodeRendererTest::::smoothCubicBezierWithRelativeCoordinatesTest()",
      "133": "LinearGradientSvgNodeRendererTest::::smoothCubicBezierWithRelativeCoordinatesTest()",
      "135": "LinearGradientSvgNodeRendererTest::::smoothCubicBezierRelativeAndAbsoluteCoordWithMoveTest()",
      "136": "LinearGradientSvgNodeRendererTest::::smoothCubicBezierRelativeAndAbsoluteCoordWithMoveTest()",
      "137": "LinearGradientSvgNodeRendererTest::::smoothCubicBezierRelativeAndAbsoluteCoordWithMoveTest()",
      "138": "LinearGradientSvgNodeRendererTest::::smoothCubicBezierRelativeAndAbsoluteCoordWithMoveTest()",
      "140": "LinearGradientSvgNodeRendererTest::::smoothCubicBezierRelativeAndAbsoluteCoordNoZOperatorTest()",
      "141": "LinearGradientSvgNodeRendererTest::::smoothCubicBezierRelativeAndAbsoluteCoordNoZOperatorTest()",
      "142": "LinearGradientSvgNodeRendererTest::::smoothCubicBezierRelativeAndAbsoluteCoordNoZOperatorTest()",
      "143": "LinearGradientSvgNodeRendererTest::::smoothCubicBezierRelativeAndAbsoluteCoordNoZOperatorTest()",
      "145": "LinearGradientSvgNodeRendererTest::::quadraticBezierTest()",
      "146": "LinearGradientSvgNodeRendererTest::::quadraticBezierTest()",
      "147": "LinearGradientSvgNodeRendererTest::::quadraticBezierTest()",
      "148": "LinearGradientSvgNodeRendererTest::::quadraticBezierTest()",
      "150": "LinearGradientSvgNodeRendererTest::::quadraticBezier2Test()",
      "151": "LinearGradientSvgNodeRendererTest::::quadraticBezier2Test()",
      "152": "LinearGradientSvgNodeRendererTest::::quadraticBezier2Test()",
      "153": "LinearGradientSvgNodeRendererTest::::quadraticBezier2Test()",
      "155": "LinearGradientSvgNodeRendererTest::::quadraticBezier3Test()",
      "156": "LinearGradientSvgNodeRendererTest::::quadraticBezier3Test()",
      "157": "LinearGradientSvgNodeRendererTest::::quadraticBezier3Test()",
      "158": "LinearGradientSvgNodeRendererTest::::quadraticBezier3Test()",
      "160": "LinearGradientSvgNodeRendererTest::::quadraticBezierInsideOtherQuadraticBezierTest()",
      "161": "LinearGradientSvgNodeRendererTest::::quadraticBezierInsideOtherQuadraticBezierTest()",
      "162": "LinearGradientSvgNodeRendererTest::::quadraticBezierInsideOtherQuadraticBezierTest()",
      "163": "LinearGradientSvgNodeRendererTest::::quadraticBezierInsideOtherQuadraticBezierTest()",
      "165": "LinearGradientSvgNodeRendererTest::::smoothQuadraticBezierWithAbsoluteCoordinatesTest()",
      "166": "LinearGradientSvgNodeRendererTest::::smoothQuadraticBezierWithAbsoluteCoordinatesTest()",
      "167": "LinearGradientSvgNodeRendererTest::::smoothQuadraticBezierWithAbsoluteCoordinatesTest()",
      "168": "LinearGradientSvgNodeRendererTest::::smoothQuadraticBezierWithAbsoluteCoordinatesTest()",
      "170": "LinearGradientSvgNodeRendererTest::::smoothQuadraticBezierWithRelativeCoordinatesTest()",
      "171": "LinearGradientSvgNodeRendererTest::::smoothQuadraticBezierWithRelativeCoordinatesTest()",
      "172": "LinearGradientSvgNodeRendererTest::::smoothQuadraticBezierWithRelativeCoordinatesTest()",
      "173": "LinearGradientSvgNodeRendererTest::::smoothQuadraticBezierWithRelativeCoordinatesTest()",
      "175": "LinearGradientSvgNodeRendererTest::::smoothQuadraticBezierAbsoluteAndRelativeCoordWithMoveTest()",
      "176": "LinearGradientSvgNodeRendererTest::::smoothQuadraticBezierAbsoluteAndRelativeCoordWithMoveTest()",
      "177": "LinearGradientSvgNodeRendererTest::::smoothQuadraticBezierAbsoluteAndRelativeCoordWithMoveTest()",
      "178": "LinearGradientSvgNodeRendererTest::::smoothQuadraticBezierAbsoluteAndRelativeCoordWithMoveTest()",
      "180": "LinearGradientSvgNodeRendererTest::::smoothQuadraticBezierRelativeAndAbsoluteCoordNoZOperatorTest()",
      "181": "LinearGradientSvgNodeRendererTest::::smoothQuadraticBezierRelativeAndAbsoluteCoordNoZOperatorTest()",
      "182": "LinearGradientSvgNodeRendererTest::::smoothQuadraticBezierRelativeAndAbsoluteCoordNoZOperatorTest()",
      "183": "LinearGradientSvgNodeRendererTest::::smoothQuadraticBezierRelativeAndAbsoluteCoordNoZOperatorTest()",
      "185": "LinearGradientSvgNodeRendererTest::::ellipticalArcsTest()",
      "186": "LinearGradientSvgNodeRendererTest::::ellipticalArcsTest()",
      "187": "LinearGradientSvgNodeRendererTest::::ellipticalArcsTest()",
      "188": "LinearGradientSvgNodeRendererTest::::ellipticalArcsTest()",
      "190": "LinearGradientSvgNodeRendererTest::::ellipticalArcsNegativeRxRyTest()",
      "191": "LinearGradientSvgNodeRendererTest::::ellipticalArcsNegativeRxRyTest()",
      "192": "LinearGradientSvgNodeRendererTest::::ellipticalArcsNegativeRxRyTest()",
      "193": "LinearGradientSvgNodeRendererTest::::ellipticalArcsNegativeRxRyTest()",
      "195": "LinearGradientSvgNodeRendererTest::::ellipticalArcZeroRxRyTest()",
      "196": "LinearGradientSvgNodeRendererTest::::ellipticalArcZeroRxRyTest()",
      "197": "LinearGradientSvgNodeRendererTest::::ellipticalArcZeroRxRyTest()",
      "198": "LinearGradientSvgNodeRendererTest::::ellipticalArcZeroRxRyTest()",
      "200": "LinearGradientSvgNodeRendererTest::::ellipticalArcsWithPhiTest()",
      "201": "LinearGradientSvgNodeRendererTest::::ellipticalArcsWithPhiTest()",
      "202": "LinearGradientSvgNodeRendererTest::::ellipticalArcsWithPhiTest()",
      "203": "LinearGradientSvgNodeRendererTest::::ellipticalArcsWithPhiTest()",
      "205": "LinearGradientSvgNodeRendererTest::::ellipticalArcsWithPhi0Test()",
      "206": "LinearGradientSvgNodeRendererTest::::ellipticalArcsWithPhi0Test()",
      "207": "LinearGradientSvgNodeRendererTest::::ellipticalArcsWithPhi0Test()",
      "208": "LinearGradientSvgNodeRendererTest::::ellipticalArcsWithPhi0Test()",
      "210": "LinearGradientSvgNodeRendererTest::::ellipticalArcsWithPhi90Test()",
      "211": "LinearGradientSvgNodeRendererTest::::ellipticalArcsWithPhi90Test()",
      "212": "LinearGradientSvgNodeRendererTest::::ellipticalArcsWithPhi90Test()",
      "213": "LinearGradientSvgNodeRendererTest::::ellipticalArcsWithPhi90Test()",
      "215": "LinearGradientSvgNodeRendererTest::::ellipticalArcsWithPhi180Test()",
      "216": "LinearGradientSvgNodeRendererTest::::ellipticalArcsWithPhi180Test()",
      "217": "LinearGradientSvgNodeRendererTest::::ellipticalArcsWithPhi180Test()",
      "218": "LinearGradientSvgNodeRendererTest::::ellipticalArcsWithPhi180Test()",
      "219": "LinearGradientSvgNodeRendererTest::::ellipticalArcsWithPhi270Test()",
      "220": "LinearGradientSvgNodeRendererTest::::ellipticalArcsWithPhi270Test()",
      "221": "LinearGradientSvgNodeRendererTest::::ellipticalArcsWithPhi270Test()",
      "222": "LinearGradientSvgNodeRendererTest::::ellipticalArcsWithPhi270Test()",
      "224": "LinearGradientSvgNodeRendererTest::::ellipticalArcsWithPhiRelativeTest()",
      "225": "LinearGradientSvgNodeRendererTest::::ellipticalArcsWithPhiRelativeTest()",
      "226": "LinearGradientSvgNodeRendererTest::::ellipticalArcsWithPhiRelativeTest()",
      "227": "LinearGradientSvgNodeRendererTest::::ellipticalArcsWithPhiRelativeTest()",
      "229": "LinearGradientSvgNodeRendererTest::::ellipticalArcsWithPhiAbsoluteTest()",
      "230": "LinearGradientSvgNodeRendererTest::::ellipticalArcsWithPhiAbsoluteTest()",
      "231": "LinearGradientSvgNodeRendererTest::::ellipticalArcsWithPhiAbsoluteTest()",
      "232": "LinearGradientSvgNodeRendererTest::::ellipticalArcsWithPhiAbsoluteTest()",
      "235": "LinearGradientSvgNodeRendererTest::::ellipticalArcsRelativeCoordinatesTest()",
      "236": "LinearGradientSvgNodeRendererTest::::ellipticalArcsRelativeCoordinatesTest()",
      "237": "LinearGradientSvgNodeRendererTest::::ellipticalArcsRelativeCoordinatesTest()",
      "238": "LinearGradientSvgNodeRendererTest::::ellipticalArcsRelativeCoordinatesTest()",
      "240": "LinearGradientSvgNodeRendererTest::::arcInsideOtherEllipticalArcTest()",
      "241": "LinearGradientSvgNodeRendererTest::::arcInsideOtherEllipticalArcTest()",
      "242": "LinearGradientSvgNodeRendererTest::::arcInsideOtherEllipticalArcTest()",
      "243": "LinearGradientSvgNodeRendererTest::::arcInsideOtherEllipticalArcTest()",
      "246": "LinearGradientSvgNodeRendererTest::::polygonTest()",
      "247": "LinearGradientSvgNodeRendererTest::::polygonTest()",
      "248": "LinearGradientSvgNodeRendererTest::::polygonTest()",
      "249": "LinearGradientSvgNodeRendererTest::::polygonTest()",
      "251": "LinearGradientSvgNodeRendererTest::::polylineTest()",
      "252": "LinearGradientSvgNodeRendererTest::::polylineTest()",
      "253": "LinearGradientSvgNodeRendererTest::::polylineTest()",
      "254": "LinearGradientSvgNodeRendererTest::::polylineTest()",
      "256": "LinearGradientSvgNodeRendererTest::::rectTest()",
      "257": "LinearGradientSvgNodeRendererTest::::rectTest()",
      "258": "LinearGradientSvgNodeRendererTest::::rectTest()",
      "259": "LinearGradientSvgNodeRendererTest::::rectTest()",
      "261": "LinearGradientSvgNodeRendererTest::::rectWithInvalidSpreadMethodValueTest()",
      "262": "LinearGradientSvgNodeRendererTest::::rectWithInvalidSpreadMethodValueTest()",
      "263": "LinearGradientSvgNodeRendererTest::::rectWithInvalidSpreadMethodValueTest()",
      "264": "LinearGradientSvgNodeRendererTest::::rectWithInvalidSpreadMethodValueTest()",
      "265": "LinearGradientSvgNodeRendererTest::::rectWithInvalidSpreadMethodValueTest()",
      "266": "LinearGradientSvgNodeRendererTest::::rectWithInvalidSpreadMethodValueTest()",
      "267": "LinearGradientSvgNodeRendererTest::::rectWithInvalidSpreadMethodValueTest()",
      "269": "LinearGradientSvgNodeRendererTest::::rectsWithFallBackColorsTest()",
      "270": "LinearGradientSvgNodeRendererTest::::rectsWithFallBackColorsTest()",
      "271": "LinearGradientSvgNodeRendererTest::::rectsWithFallBackColorsTest()",
      "272": "LinearGradientSvgNodeRendererTest::::rectsWithFallBackColorsTest()",
      "274": "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithSameOffsetPadTest()",
      "275": "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithSameOffsetPadTest()",
      "276": "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithSameOffsetPadTest()",
      "277": "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithSameOffsetPadTest()",
      "279": "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithSameOffsetReflectTest()",
      "280": "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithSameOffsetReflectTest()",
      "281": "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithSameOffsetReflectTest()",
      "282": "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithSameOffsetReflectTest()",
      "284": "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithSameOffsetRepeatTest()",
      "285": "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithSameOffsetRepeatTest()",
      "286": "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithSameOffsetRepeatTest()",
      "287": "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithSameOffsetRepeatTest()",
      "291": "LinearGradientSvgNodeRendererTest::::rectNoStopsTest()",
      "292": "LinearGradientSvgNodeRendererTest::::rectNoStopsTest()",
      "293": "LinearGradientSvgNodeRendererTest::::rectNoStopsTest()",
      "294": "LinearGradientSvgNodeRendererTest::::rectNoStopsTest()",
      "296": "LinearGradientSvgNodeRendererTest::::rectSingle0StopTest()",
      "297": "LinearGradientSvgNodeRendererTest::::rectSingle0StopTest()",
      "298": "LinearGradientSvgNodeRendererTest::::rectSingle0StopTest()",
      "299": "LinearGradientSvgNodeRendererTest::::rectSingle0StopTest()",
      "301": "LinearGradientSvgNodeRendererTest::::rectSingle1StopTest()",
      "302": "LinearGradientSvgNodeRendererTest::::rectSingle1StopTest()",
      "303": "LinearGradientSvgNodeRendererTest::::rectSingle1StopTest()",
      "304": "LinearGradientSvgNodeRendererTest::::rectSingle1StopTest()",
      "306": "LinearGradientSvgNodeRendererTest::::rectStopWithoutColorTest()",
      "307": "LinearGradientSvgNodeRendererTest::::rectStopWithoutColorTest()",
      "308": "LinearGradientSvgNodeRendererTest::::rectStopWithoutColorTest()",
      "309": "LinearGradientSvgNodeRendererTest::::rectStopWithoutColorTest()",
      "311": "LinearGradientSvgNodeRendererTest::::rectTransformedTest()",
      "312": "LinearGradientSvgNodeRendererTest::::rectTransformedTest()",
      "313": "LinearGradientSvgNodeRendererTest::::rectTransformedTest()",
      "314": "LinearGradientSvgNodeRendererTest::::rectTransformedTest()",
      "316": "LinearGradientSvgNodeRendererTest::::rectWithGradientTransformTest()",
      "317": "LinearGradientSvgNodeRendererTest::::rectWithGradientTransformTest()",
      "318": "LinearGradientSvgNodeRendererTest::::rectWithGradientTransformTest()",
      "319": "LinearGradientSvgNodeRendererTest::::rectWithGradientTransformTest()",
      "321": "LinearGradientSvgNodeRendererTest::::rectWithMultipleTransformsTest()",
      "322": "LinearGradientSvgNodeRendererTest::::rectWithMultipleTransformsTest()",
      "323": "LinearGradientSvgNodeRendererTest::::rectWithMultipleTransformsTest()",
      "324": "LinearGradientSvgNodeRendererTest::::rectWithMultipleTransformsTest()",
      "326": "LinearGradientSvgNodeRendererTest::::textTest()",
      "327": "LinearGradientSvgNodeRendererTest::::textTest()",
      "328": "LinearGradientSvgNodeRendererTest::::textTest()",
      "329": "LinearGradientSvgNodeRendererTest::::textTest()",
      "330": "LinearGradientSvgNodeRendererTest::::textTest()",
      "331": "LinearGradientSvgNodeRendererTest::::textTest()",
      "332": "LinearGradientSvgNodeRendererTest::::textTest()",
      "333": "LinearGradientSvgNodeRendererTest::::textTest()",
      "335": "LinearGradientSvgNodeRendererTest::::textNestedTSpansTest()",
      "336": "LinearGradientSvgNodeRendererTest::::textNestedTSpansTest()",
      "337": "LinearGradientSvgNodeRendererTest::::textNestedTSpansTest()",
      "338": "LinearGradientSvgNodeRendererTest::::textNestedTSpansTest()",
      "340": "LinearGradientSvgNodeRendererTest::::textRotatedTest()",
      "341": "LinearGradientSvgNodeRendererTest::::textRotatedTest()",
      "342": "LinearGradientSvgNodeRendererTest::::textRotatedTest()",
      "343": "LinearGradientSvgNodeRendererTest::::textRotatedTest()",
      "344": "LinearGradientSvgNodeRendererTest::::textRotatedTest()",
      "345": "LinearGradientSvgNodeRendererTest::::textRotatedTest()",
      "346": "LinearGradientSvgNodeRendererTest::::textRotatedTest()",
      "348": "LinearGradientSvgNodeRendererTest::::textDxTest()",
      "349": "LinearGradientSvgNodeRendererTest::::textDxTest()",
      "350": "LinearGradientSvgNodeRendererTest::::textDxTest()",
      "351": "LinearGradientSvgNodeRendererTest::::textDxTest()",
      "353": "LinearGradientSvgNodeRendererTest::::textDyTest()",
      "354": "LinearGradientSvgNodeRendererTest::::textDyTest()",
      "355": "LinearGradientSvgNodeRendererTest::::textDyTest()",
      "356": "LinearGradientSvgNodeRendererTest::::textDyTest()",
      "358": "LinearGradientSvgNodeRendererTest::::textXYOffset()",
      "359": "LinearGradientSvgNodeRendererTest::::textXYOffset()",
      "360": "LinearGradientSvgNodeRendererTest::::textXYOffset()",
      "361": "LinearGradientSvgNodeRendererTest::::textXYOffset()",
      "363": "LinearGradientSvgNodeRendererTest::::textXOffset()",
      "364": "LinearGradientSvgNodeRendererTest::::textXOffset()",
      "365": "LinearGradientSvgNodeRendererTest::::textXOffset()",
      "366": "LinearGradientSvgNodeRendererTest::::textXOffset()",
      "367": "LinearGradientSvgNodeRendererTest::::textXOffset()",
      "369": "LinearGradientSvgNodeRendererTest::::textXYDxDyOffset()",
      "370": "LinearGradientSvgNodeRendererTest::::textXYDxDyOffset()",
      "371": "LinearGradientSvgNodeRendererTest::::textXYDxDyOffset()",
      "372": "LinearGradientSvgNodeRendererTest::::textXYDxDyOffset()",
      "374": "LinearGradientSvgNodeRendererTest::::textGradientEmUnits()",
      "375": "LinearGradientSvgNodeRendererTest::::textGradientEmUnits()",
      "376": "LinearGradientSvgNodeRendererTest::::textGradientEmUnits()",
      "377": "LinearGradientSvgNodeRendererTest::::textGradientEmUnits()",
      "379": "LinearGradientSvgNodeRendererTest::::textGradientEmUnitsRelated()",
      "380": "LinearGradientSvgNodeRendererTest::::textGradientEmUnitsRelated()",
      "381": "LinearGradientSvgNodeRendererTest::::textGradientEmUnitsRelated()",
      "382": "LinearGradientSvgNodeRendererTest::::textGradientEmUnitsRelated()",
      "384": "LinearGradientSvgNodeRendererTest::::textGradientEmUnitsRelatedNotDefs()",
      "385": "LinearGradientSvgNodeRendererTest::::textGradientEmUnitsRelatedNotDefs()",
      "386": "LinearGradientSvgNodeRendererTest::::textGradientEmUnitsRelatedNotDefs()",
      "387": "LinearGradientSvgNodeRendererTest::::textGradientEmUnitsRelatedNotDefs()",
      "389": "LinearGradientSvgNodeRendererTest::::textGradientEmUnitsRelatedDefault()",
      "390": "LinearGradientSvgNodeRendererTest::::textGradientEmUnitsRelatedDefault()",
      "391": "LinearGradientSvgNodeRendererTest::::textGradientEmUnitsRelatedDefault()",
      "392": "LinearGradientSvgNodeRendererTest::::textGradientEmUnitsRelatedDefault()",
      "394": "LinearGradientSvgNodeRendererTest::::textGradientExUnits()",
      "395": "LinearGradientSvgNodeRendererTest::::textGradientExUnits()",
      "396": "LinearGradientSvgNodeRendererTest::::textGradientExUnits()",
      "397": "LinearGradientSvgNodeRendererTest::::textGradientExUnits()",
      "399": "LinearGradientSvgNodeRendererTest::::textGradientRemUnits()",
      "400": "LinearGradientSvgNodeRendererTest::::textGradientRemUnits()",
      "401": "LinearGradientSvgNodeRendererTest::::textGradientRemUnits()",
      "402": "LinearGradientSvgNodeRendererTest::::textGradientRemUnits()",
      "404": "LinearGradientSvgNodeRendererTest::::textGradientRemUnitsNestedSvg()",
      "405": "LinearGradientSvgNodeRendererTest::::textGradientRemUnitsNestedSvg()",
      "406": "LinearGradientSvgNodeRendererTest::::textGradientRemUnitsNestedSvg()",
      "407": "LinearGradientSvgNodeRendererTest::::textGradientRemUnitsNestedSvg()",
      "409": "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithSameOffsetAndZeroCoordLengthPadTest()",
      "410": "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithSameOffsetAndZeroCoordLengthPadTest()",
      "411": "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithSameOffsetAndZeroCoordLengthPadTest()",
      "412": "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithSameOffsetAndZeroCoordLengthPadTest()",
      "414": "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithSameOffsetAndZeroCoordLengthReflectTest()",
      "415": "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithSameOffsetAndZeroCoordLengthReflectTest()",
      "416": "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithSameOffsetAndZeroCoordLengthReflectTest()",
      "417": "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithSameOffsetAndZeroCoordLengthReflectTest()",
      "419": "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithSameOffsetAndZeroCoordLengthRepeatTest()",
      "420": "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithSameOffsetAndZeroCoordLengthRepeatTest()",
      "421": "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithSameOffsetAndZeroCoordLengthRepeatTest()",
      "422": "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithSameOffsetAndZeroCoordLengthRepeatTest()",
      "424": "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithDiffOffsetAndZeroCoordLengthPadTest()",
      "425": "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithDiffOffsetAndZeroCoordLengthPadTest()",
      "426": "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithDiffOffsetAndZeroCoordLengthPadTest()",
      "427": "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithDiffOffsetAndZeroCoordLengthPadTest()",
      "429": "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithDiffOffsetAndZeroCoordLengthReflectTest()",
      "430": "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithDiffOffsetAndZeroCoordLengthReflectTest()",
      "431": "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithDiffOffsetAndZeroCoordLengthReflectTest()",
      "432": "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithDiffOffsetAndZeroCoordLengthReflectTest()",
      "434": "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithDiffOffsetAndZeroCoordLengthRepeatTest()",
      "435": "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithDiffOffsetAndZeroCoordLengthRepeatTest()",
      "436": "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithDiffOffsetAndZeroCoordLengthRepeatTest()",
      "437": "LinearGradientSvgNodeRendererTest::::rectMultipleStopsWithDiffOffsetAndZeroCoordLengthRepeatTest()",
      "439": "LinearGradientSvgNodeRendererTest::::rectInvalidStopsSequenceTest()",
      "440": "LinearGradientSvgNodeRendererTest::::rectInvalidStopsSequenceTest()",
      "441": "LinearGradientSvgNodeRendererTest::::rectInvalidStopsSequenceTest()",
      "442": "LinearGradientSvgNodeRendererTest::::rectInvalidStopsSequenceTest()",
      "444": "LinearGradientSvgNodeRendererTest::::rectInvalidCoordinatesMetricsTest()",
      "445": "LinearGradientSvgNodeRendererTest::::rectInvalidCoordinatesMetricsTest()",
      "446": "LinearGradientSvgNodeRendererTest::::rectInvalidCoordinatesMetricsTest()",
      "447": "LinearGradientSvgNodeRendererTest::::rectInvalidCoordinatesMetricsTest()",
      "449": "LinearGradientSvgNodeRendererTest::::rectInvalidStopsSequenceWithoutBoundingStopsTest()",
      "450": "LinearGradientSvgNodeRendererTest::::rectInvalidStopsSequenceWithoutBoundingStopsTest()",
      "451": "LinearGradientSvgNodeRendererTest::::rectInvalidStopsSequenceWithoutBoundingStopsTest()",
      "452": "LinearGradientSvgNodeRendererTest::::rectInvalidStopsSequenceWithoutBoundingStopsTest()",
      "454": "LinearGradientSvgNodeRendererTest::::userSpaceOnUseWithAbsoluteCoordinatesTest()",
      "455": "LinearGradientSvgNodeRendererTest::::userSpaceOnUseWithAbsoluteCoordinatesTest()",
      "456": "LinearGradientSvgNodeRendererTest::::userSpaceOnUseWithAbsoluteCoordinatesTest()",
      "457": "LinearGradientSvgNodeRendererTest::::userSpaceOnUseWithAbsoluteCoordinatesTest()",
      "459": "LinearGradientSvgNodeRendererTest::::userSpaceOnUseDiffAbsoluteUnitsInGradientTest()",
      "460": "LinearGradientSvgNodeRendererTest::::userSpaceOnUseDiffAbsoluteUnitsInGradientTest()",
      "461": "LinearGradientSvgNodeRendererTest::::userSpaceOnUseDiffAbsoluteUnitsInGradientTest()",
      "462": "LinearGradientSvgNodeRendererTest::::userSpaceOnUseDiffAbsoluteUnitsInGradientTest()",
      "464": "LinearGradientSvgNodeRendererTest::::userSpaceOnUseWithChUnitTest()",
      "465": "LinearGradientSvgNodeRendererTest::::userSpaceOnUseWithChUnitTest()",
      "466": "LinearGradientSvgNodeRendererTest::::userSpaceOnUseWithChUnitTest()",
      "467": "LinearGradientSvgNodeRendererTest::::userSpaceOnUseWithChUnitTest()",
      "468": "LinearGradientSvgNodeRendererTest::::userSpaceOnUseWithChUnitTest()",
      "470": "LinearGradientSvgNodeRendererTest::::userSpaceOnUseWithUnitsRelativeToFontTest()",
      "471": "LinearGradientSvgNodeRendererTest::::userSpaceOnUseWithUnitsRelativeToFontTest()",
      "472": "LinearGradientSvgNodeRendererTest::::userSpaceOnUseWithUnitsRelativeToFontTest()",
      "473": "LinearGradientSvgNodeRendererTest::::userSpaceOnUseWithUnitsRelativeToFontTest()",
      "475": "LinearGradientSvgNodeRendererTest::::userSpaceOnUseWithUnitsRelativeToViewportTest()",
      "476": "LinearGradientSvgNodeRendererTest::::userSpaceOnUseWithUnitsRelativeToViewportTest()",
      "477": "LinearGradientSvgNodeRendererTest::::userSpaceOnUseWithUnitsRelativeToViewportTest()",
      "478": "LinearGradientSvgNodeRendererTest::::userSpaceOnUseWithUnitsRelativeToViewportTest()",
      "479": "LinearGradientSvgNodeRendererTest::::userSpaceOnUseWithUnitsRelativeToViewportTest()",
      "481": "LinearGradientSvgNodeRendererTest::::userSpaceOnUseDiffRelativeUnitsInGradientTest()",
      "482": "LinearGradientSvgNodeRendererTest::::userSpaceOnUseDiffRelativeUnitsInGradientTest()",
      "483": "LinearGradientSvgNodeRendererTest::::userSpaceOnUseDiffRelativeUnitsInGradientTest()",
      "484": "LinearGradientSvgNodeRendererTest::::userSpaceOnUseDiffRelativeUnitsInGradientTest()",
      "485": "LinearGradientSvgNodeRendererTest::::userSpaceOnUseDiffRelativeUnitsInGradientTest()",
      "487": "LinearGradientSvgNodeRendererTest::::objectBoundingBoxWithAbsoluteCoordinatesTest()",
      "488": "LinearGradientSvgNodeRendererTest::::objectBoundingBoxWithAbsoluteCoordinatesTest()",
      "489": "LinearGradientSvgNodeRendererTest::::objectBoundingBoxWithAbsoluteCoordinatesTest()",
      "490": "LinearGradientSvgNodeRendererTest::::objectBoundingBoxWithAbsoluteCoordinatesTest()",
      "492": "LinearGradientSvgNodeRendererTest::::objectBoundingBoxDifferentAbsoluteUnitsInGradientTest()",
      "493": "LinearGradientSvgNodeRendererTest::::objectBoundingBoxDifferentAbsoluteUnitsInGradientTest()",
      "494": "LinearGradientSvgNodeRendererTest::::objectBoundingBoxDifferentAbsoluteUnitsInGradientTest()",
      "495": "LinearGradientSvgNodeRendererTest::::objectBoundingBoxDifferentAbsoluteUnitsInGradientTest()",
      "497": "LinearGradientSvgNodeRendererTest::::objectBoundingBoxWithUnitsRelativeToFontTest()",
      "498": "LinearGradientSvgNodeRendererTest::::objectBoundingBoxWithUnitsRelativeToFontTest()",
      "499": "LinearGradientSvgNodeRendererTest::::objectBoundingBoxWithUnitsRelativeToFontTest()",
      "500": "LinearGradientSvgNodeRendererTest::::objectBoundingBoxWithUnitsRelativeToFontTest()",
      "502": "LinearGradientSvgNodeRendererTest::::objectBoundingBoxWithChUnitTest()",
      "503": "LinearGradientSvgNodeRendererTest::::objectBoundingBoxWithChUnitTest()",
      "504": "LinearGradientSvgNodeRendererTest::::objectBoundingBoxWithChUnitTest()",
      "505": "LinearGradientSvgNodeRendererTest::::objectBoundingBoxWithChUnitTest()",
      "506": "LinearGradientSvgNodeRendererTest::::objectBoundingBoxWithChUnitTest()",
      "507": "LinearGradientSvgNodeRendererTest::::objectBoundingBoxWithChUnitTest()",
      "508": "LinearGradientSvgNodeRendererTest::::objectBoundingBoxWithChUnitTest()",
      "509": "LinearGradientSvgNodeRendererTest::::objectBoundingBoxWithChUnitTest()",
      "511": "LinearGradientSvgNodeRendererTest::::objectBoundingBoxWithUnitsRelativeToViewportTest()",
      "512": "LinearGradientSvgNodeRendererTest::::objectBoundingBoxWithUnitsRelativeToViewportTest()",
      "513": "LinearGradientSvgNodeRendererTest::::objectBoundingBoxWithUnitsRelativeToViewportTest()",
      "514": "LinearGradientSvgNodeRendererTest::::objectBoundingBoxWithUnitsRelativeToViewportTest()",
      "515": "LinearGradientSvgNodeRendererTest::::objectBoundingBoxWithUnitsRelativeToViewportTest()",
      "516": "LinearGradientSvgNodeRendererTest::::objectBoundingBoxWithUnitsRelativeToViewportTest()",
      "517": "LinearGradientSvgNodeRendererTest::::objectBoundingBoxWithUnitsRelativeToViewportTest()",
      "518": "LinearGradientSvgNodeRendererTest::::objectBoundingBoxWithUnitsRelativeToViewportTest()",
      "520": "LinearGradientSvgNodeRendererTest::::objectBoundingBoxDifferentRelativeUnitsInGradientTest()",
      "521": "LinearGradientSvgNodeRendererTest::::objectBoundingBoxDifferentRelativeUnitsInGradientTest()",
      "522": "LinearGradientSvgNodeRendererTest::::objectBoundingBoxDifferentRelativeUnitsInGradientTest()",
      "523": "LinearGradientSvgNodeRendererTest::::objectBoundingBoxDifferentRelativeUnitsInGradientTest()",
      "524": "LinearGradientSvgNodeRendererTest::::objectBoundingBoxDifferentRelativeUnitsInGradientTest()",
      "525": "LinearGradientSvgNodeRendererTest::::objectBoundingBoxDifferentRelativeUnitsInGradientTest()",
      "526": "LinearGradientSvgNodeRendererTest::::objectBoundingBoxDifferentRelativeUnitsInGradientTest()",
      "527": "LinearGradientSvgNodeRendererTest::::objectBoundingBoxDifferentRelativeUnitsInGradientTest()",
      "529": "LinearGradientSvgNodeRendererTest::::translateTransformInGradientWithObjectBoundingBoxUnitsTest()",
      "530": "LinearGradientSvgNodeRendererTest::::translateTransformInGradientWithObjectBoundingBoxUnitsTest()",
      "531": "LinearGradientSvgNodeRendererTest::::translateTransformInGradientWithObjectBoundingBoxUnitsTest()",
      "532": "LinearGradientSvgNodeRendererTest::::translateTransformInGradientWithObjectBoundingBoxUnitsTest()",
      "534": "LinearGradientSvgNodeRendererTest::::matrixTransformInGradientWithObjectBoundingBoxUnitsTest()",
      "535": "LinearGradientSvgNodeRendererTest::::matrixTransformInGradientWithObjectBoundingBoxUnitsTest()",
      "536": "LinearGradientSvgNodeRendererTest::::matrixTransformInGradientWithObjectBoundingBoxUnitsTest()",
      "537": "LinearGradientSvgNodeRendererTest::::matrixTransformInGradientWithObjectBoundingBoxUnitsTest()",
      "538": "LinearGradientSvgNodeRendererTest::::matrixTransformInGradientWithObjectBoundingBoxUnitsTest()",
      "540": "LinearGradientSvgNodeRendererTest::::severalTransformsInGradientWithObjectBoundingBoxUnitsTest()",
      "541": "LinearGradientSvgNodeRendererTest::::severalTransformsInGradientWithObjectBoundingBoxUnitsTest()",
      "542": "LinearGradientSvgNodeRendererTest::::severalTransformsInGradientWithObjectBoundingBoxUnitsTest()",
      "543": "LinearGradientSvgNodeRendererTest::::severalTransformsInGradientWithObjectBoundingBoxUnitsTest()"
    },
    "tests": [
      {
        "test_lines": [
          52,
          55
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          58,
          61
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          63,
          66
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          68,
          71
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          73,
          76
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          78,
          81
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          83,
          86
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          88,
          91
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          93,
          96
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          98,
          101
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          103,
          106
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          108,
          112
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          114,
          118
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          120,
          123
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          125,
          128
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          130,
          133
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          135,
          138
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          140,
          143
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          145,
          148
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          150,
          153
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          155,
          158
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          160,
          163
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          165,
          168
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          170,
          173
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          175,
          178
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          180,
          183
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          185,
          188
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          190,
          193
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          195,
          198
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          200,
          203
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          205,
          208
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          210,
          213
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          215,
          218
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          219,
          222
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          224,
          227
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          229,
          232
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          235,
          238
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          240,
          243
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          246,
          249
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          251,
          254
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          256,
          259
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          261,
          267
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          269,
          272
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          274,
          277
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          279,
          282
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          284,
          287
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          291,
          294
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          104,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          296,
          299
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          112,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          301,
          304
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          107,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          306,
          309
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          112,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          311,
          314
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          316,
          319
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          137,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          321,
          324
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          137,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          158,
          159,
          160,
          161,
          162,
          163,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          171,
          172,
          173,
          174,
          177
        ]
      },
      {
        "test_lines": [
          326,
          333
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          335,
          338
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          340,
          346
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          348,
          351
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          353,
          356
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          358,
          361
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          363,
          367
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          369,
          372
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          374,
          377
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          135,
          136,
          139,
          145,
          158,
          159,
          160,
          161,
          162,
          163,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          171,
          172,
          173,
          174,
          177
        ]
      },
      {
        "test_lines": [
          379,
          382
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          135,
          136,
          139,
          145,
          158,
          159,
          160,
          161,
          162,
          163,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          171,
          172,
          173,
          174,
          177
        ]
      },
      {
        "test_lines": [
          384,
          387
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          135,
          136,
          139,
          145,
          158,
          159,
          160,
          161,
          162,
          163,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          171,
          172,
          173,
          174,
          177
        ]
      },
      {
        "test_lines": [
          389,
          392
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          135,
          136,
          139,
          145,
          158,
          159,
          160,
          161,
          162,
          163,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          171,
          172,
          173,
          174,
          177
        ]
      },
      {
        "test_lines": [
          394,
          397
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          135,
          136,
          139,
          145,
          158,
          159,
          160,
          161,
          162,
          163,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          171,
          172,
          173,
          174,
          177
        ]
      },
      {
        "test_lines": [
          399,
          402
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          135,
          136,
          139,
          145,
          158,
          159,
          160,
          161,
          162,
          163,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          171,
          172,
          173,
          174,
          177
        ]
      },
      {
        "test_lines": [
          404,
          407
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          135,
          136,
          139,
          145,
          158,
          159,
          160,
          161,
          162,
          163,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          171,
          172,
          173,
          174,
          177
        ]
      },
      {
        "test_lines": [
          409,
          412
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          107,
          110,
          111,
          112,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          414,
          417
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          107,
          110,
          111,
          112,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          419,
          422
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          424,
          427
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          429,
          432
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          434,
          437
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          107,
          110,
          111,
          112,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          439,
          442
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          444,
          447
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          449,
          452
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          107,
          110,
          111,
          112,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          454,
          457
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          135,
          136,
          139,
          145,
          158,
          159,
          160,
          161,
          162,
          163,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          171,
          172,
          173,
          174,
          177
        ]
      },
      {
        "test_lines": [
          459,
          462
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          135,
          136,
          139,
          145,
          158,
          159,
          160,
          161,
          162,
          163,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          171,
          172,
          173,
          174,
          177
        ]
      },
      {
        "test_lines": [
          464,
          468
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          135,
          136,
          139,
          145,
          158,
          159,
          160,
          161,
          162,
          163,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          171,
          172,
          173,
          174,
          177
        ]
      },
      {
        "test_lines": [
          470,
          473
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          135,
          136,
          139,
          145,
          158,
          159,
          160,
          161,
          162,
          163,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          171,
          172,
          173,
          174,
          177
        ]
      },
      {
        "test_lines": [
          475,
          479
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          135,
          136,
          139,
          145,
          158,
          159,
          160,
          161,
          162,
          163,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          171,
          172,
          173,
          174,
          177
        ]
      },
      {
        "test_lines": [
          481,
          485
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          135,
          136,
          139,
          145,
          158,
          159,
          160,
          161,
          162,
          163,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          171,
          172,
          173,
          174,
          177
        ]
      },
      {
        "test_lines": [
          487,
          490
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          492,
          495
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          497,
          500
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          502,
          509
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          511,
          518
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          520,
          527
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          529,
          532
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          534,
          538
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      },
      {
        "test_lines": [
          540,
          543
        ],
        "covered_lines": [
          44,
          52,
          56,
          58,
          59,
          60,
          61,
          63,
          65,
          67,
          68,
          70,
          73,
          75,
          76,
          77,
          97,
          98,
          99,
          100,
          101,
          102,
          104,
          105,
          106,
          110,
          111,
          115,
          120,
          121,
          122,
          131,
          132,
          135,
          136,
          139,
          145,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          177
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/svg/src/main/java/com/itextpdf/svg/renderers/impl/PolylineSvgNodeRenderer.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.svg.renderers.impl;\n",
      "\n",
      "import com.itextpdf.kernel.geom.Point;\n",
      "import com.itextpdf.kernel.geom.Rectangle;\n",
      "import com.itextpdf.kernel.geom.Vector;\n",
      "import com.itextpdf.kernel.pdf.canvas.PdfCanvas;\n",
      "import com.itextpdf.styledxmlparser.css.util.CssDimensionParsingUtils;\n",
      "import com.itextpdf.styledxmlparser.css.util.CssUtils;\n",
      "import com.itextpdf.svg.MarkerVertexType;\n",
      "import com.itextpdf.svg.SvgConstants;\n",
      "import com.itextpdf.svg.exceptions.SvgExceptionMessageConstant;\n",
      "import com.itextpdf.svg.exceptions.SvgProcessingException;\n",
      "import com.itextpdf.svg.renderers.IMarkerCapable;\n",
      "import com.itextpdf.svg.renderers.ISvgNodeRenderer;\n",
      "import com.itextpdf.svg.renderers.SvgDrawContext;\n",
      "import com.itextpdf.svg.utils.SvgCoordinateUtils;\n",
      "import com.itextpdf.svg.utils.SvgCssUtils;\n",
      "\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "\n",
      "/**\n",
      " * {@link ISvgNodeRenderer} implementation for the &lt;polyline&gt; tag.\n",
      " */\n",
      "public class PolylineSvgNodeRenderer extends AbstractSvgNodeRenderer implements IMarkerCapable {\n",
      "\n",
      "    /**\n",
      "     * A List of {@link Point} objects representing the path to be drawn by the polyline tag\n",
      "     */\n",
      "    protected List<Point> points = new ArrayList<>();\n",
      "\n",
      "    protected List<Point> getPoints() {\n",
      "        return this.points;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Parses a string of space separated x,y pairs into individual {@link Point} objects and appends them to{@link\n",
      "     * PolylineSvgNodeRenderer#points}.\n",
      "     * Throws an {@link SvgProcessingException} if pointsAttribute does not have a valid list of numerical x,y pairs.\n",
      "     *\n",
      "     * @param pointsAttribute A string of space separated x,y value pairs\n",
      "     */\n",
      "    protected void setPoints(String pointsAttribute) {\n",
      "        if (pointsAttribute == null) {\n",
      "            return;\n",
      "        }\n",
      "\n",
      "        List<String> points = SvgCssUtils.splitValueList(pointsAttribute);\n",
      "        if (points.size() % 2 != 0) {\n",
      "            throw new SvgProcessingException(SvgExceptionMessageConstant.POINTS_ATTRIBUTE_INVALID_LIST)\n",
      "                    .setMessageParams(pointsAttribute);\n",
      "        }\n",
      "\n",
      "        this.points.clear();\n",
      "        float x, y;\n",
      "        for (int i = 0; i < points.size(); i = i + 2) {\n",
      "            x = CssDimensionParsingUtils.parseAbsoluteLength(points.get(i));\n",
      "            y = CssDimensionParsingUtils.parseAbsoluteLength(points.get(i + 1));\n",
      "            this.points.add(new Point(x, y));\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Rectangle getObjectBoundingBox(SvgDrawContext context) {\n",
      "        setPoints(getAttribute(SvgConstants.Attributes.POINTS));\n",
      "        if (points.size() > 1) {\n",
      "            Point firstPoint = points.get(0);\n",
      "            double minX = firstPoint.getX();\n",
      "            double minY = firstPoint.getY();\n",
      "            double maxX = minX;\n",
      "            double maxY = minY;\n",
      "\n",
      "            for (int i = 1; i < points.size(); ++i) {\n",
      "                Point current = points.get(i);\n",
      "\n",
      "                double currentX = current.getX();\n",
      "                minX = Math.min(minX, currentX);\n",
      "                maxX = Math.max(maxX, currentX);\n",
      "\n",
      "                double currentY = current.getY();\n",
      "                minY = Math.min(minY, currentY);\n",
      "                maxY = Math.max(maxY, currentY);\n",
      "            }\n",
      "\n",
      "            double width = maxX - minX;\n",
      "            double height = maxY - minY;\n",
      "\n",
      "            return new Rectangle((float) minX, (float) minY, (float) width, (float) height);\n",
      "        } else {\n",
      "            return null;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Draws this element to a canvas-like object maintained in the context.\n",
      "     *\n",
      "     * @param context the object that knows the place to draw this element and maintains its state\n",
      "     */\n",
      "    @Override\n",
      "    protected void doDraw(SvgDrawContext context) {\n",
      "        String pointsAttribute = attributesAndStyles.containsKey(SvgConstants.Attributes.POINTS) ? attributesAndStyles\n",
      "                .get(SvgConstants.Attributes.POINTS) : null;\n",
      "        setPoints(pointsAttribute);\n",
      "\n",
      "        PdfCanvas canvas = context.getCurrentCanvas();\n",
      "        canvas.writeLiteral(\"% polyline\\n\");\n",
      "        if (points.size() > 1) {\n",
      "            Point currentPoint = points.get(0);\n",
      "            canvas.moveTo(currentPoint.getX(), currentPoint.getY());\n",
      "            for (int x = 1; x < points.size(); x++) {\n",
      "                currentPoint = points.get(x);\n",
      "                canvas.lineTo(currentPoint.getX(), currentPoint.getY());\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public ISvgNodeRenderer createDeepCopy() {\n",
      "        PolylineSvgNodeRenderer copy = new PolylineSvgNodeRenderer();\n",
      "        deepCopyAttributesAndStyles(copy);\n",
      "        return copy;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void drawMarker(SvgDrawContext context, final MarkerVertexType markerVertexType) {\n",
      "        Point point = null;\n",
      "        if (MarkerVertexType.MARKER_START.equals(markerVertexType)) {\n",
      "            point = points.get(0);\n",
      "        } else if (MarkerVertexType.MARKER_END.equals(markerVertexType)) {\n",
      "            point = points.get(points.size() - 1);\n",
      "        }\n",
      "        if (point != null) {\n",
      "            String moveX = SvgCssUtils.convertDoubleToString(CssUtils.convertPtsToPx(point.x));\n",
      "            String moveY = SvgCssUtils.convertDoubleToString(CssUtils.convertPtsToPx(point.y));\n",
      "            MarkerSvgNodeRenderer.drawMarker(context, moveX, moveY, markerVertexType, this);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public double getAutoOrientAngle(MarkerSvgNodeRenderer marker, boolean reverse) {\n",
      "        if (points.size() > 1) {\n",
      "            Vector v = new Vector(0, 0, 0);\n",
      "            if (SvgConstants.Attributes.MARKER_END.equals(marker.attributesAndStyles.get(SvgConstants.Tags.MARKER))) {\n",
      "                Point lastPoint = points.get(points.size() - 1);\n",
      "                Point secondToLastPoint = points.get(points.size() - 2);\n",
      "                v = new Vector((float) (lastPoint.getX() - secondToLastPoint.getX()),\n",
      "                        (float) (lastPoint.getY() - secondToLastPoint.getY()), 0f);\n",
      "            } else if (SvgConstants.Attributes.MARKER_START\n",
      "                    .equals(marker.attributesAndStyles.get(SvgConstants.Tags.MARKER))) {\n",
      "                Point firstPoint = points.get(0);\n",
      "                Point secondPoint = points.get(1);\n",
      "                v = new Vector((float) (secondPoint.getX() - firstPoint.getX()),\n",
      "                        (float) (secondPoint.getY() - firstPoint.getY()), 0f);\n",
      "            }\n",
      "            Vector xAxis = new Vector(1, 0, 0);\n",
      "            double rotAngle = SvgCoordinateUtils.calculateAngleBetweenTwoVectors(xAxis, v);\n",
      "            return v.get(1) >= 0 && !reverse ? rotAngle : rotAngle * -1f;\n",
      "        }\n",
      "        return 0;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.svg.renderers.impl;\n",
      "\n",
      "import com.itextpdf.kernel.geom.Point;\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "import com.itextpdf.kernel.pdf.PdfWriter;\n",
      "import com.itextpdf.kernel.pdf.canvas.PdfCanvas;\n",
      "import com.itextpdf.kernel.utils.CompareTool;\n",
      "import com.itextpdf.styledxmlparser.exceptions.StyledXMLParserException;\n",
      "import com.itextpdf.svg.SvgConstants;\n",
      "import com.itextpdf.svg.exceptions.SvgProcessingException;\n",
      "import com.itextpdf.svg.renderers.ISvgNodeRenderer;\n",
      "import com.itextpdf.svg.renderers.SvgDrawContext;\n",
      "import com.itextpdf.svg.renderers.SvgIntegrationTest;\n",
      "import com.itextpdf.test.ITextTest;\n",
      "import com.itextpdf.test.annotations.type.IntegrationTest;\n",
      "\n",
      "import java.io.ByteArrayOutputStream;\n",
      "import java.io.IOException;\n",
      "import java.util.ArrayList;\n",
      "import java.util.HashMap;\n",
      "import java.util.List;\n",
      "import java.util.Map;\n",
      "\n",
      "import org.junit.Assert;\n",
      "import org.junit.BeforeClass;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(IntegrationTest.class)\n",
      "public class PolylineSvgNodeRendererTest extends SvgIntegrationTest {\n",
      "    private static final String sourceFolder = \"./src/test/resources/com/itextpdf/svg/renderers/impl/PolylineSvgNodeRendererTest/\";\n",
      "    private static final String destinationFolder = \"./target/test/com/itextpdf/svg/renderers/impl/PolylineSvgNodeRendererTest/\";\n",
      "\n",
      "    @BeforeClass\n",
      "    public static void beforeClass() {\n",
      "        ITextTest.createDestinationFolder(destinationFolder);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void polylineRendererTest() throws IOException, InterruptedException {\n",
      "        String filename = \"polylineRendererTest.pdf\";\n",
      "        PdfDocument doc = new PdfDocument(new PdfWriter(destinationFolder + filename));\n",
      "        doc.addNewPage();\n",
      "\n",
      "        ISvgNodeRenderer root = new PolylineSvgNodeRenderer();\n",
      "        Map<String, String> polyLineAttributes = new HashMap<>();\n",
      "        polyLineAttributes.put(SvgConstants.Attributes.POINTS, \"0,40 40,40 40,80 80,80 80,120 120,120 120,160\");\n",
      "        root.setAttributesAndStyles(polyLineAttributes);\n",
      "        SvgDrawContext context = new SvgDrawContext(null, null);\n",
      "        PdfCanvas cv = new PdfCanvas(doc, 1);\n",
      "        context.pushCanvas(cv);\n",
      "\n",
      "        root.draw(context);\n",
      "        doc.close();\n",
      "        Assert.assertNull(new CompareTool().compareVisually(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void polyLineInvalidAttributeTest01() {\n",
      "        PdfDocument doc = new PdfDocument(new PdfWriter(new ByteArrayOutputStream()));\n",
      "        doc.addNewPage();\n",
      "        ISvgNodeRenderer root = new PolylineSvgNodeRenderer();\n",
      "        Map<String, String> polyLineAttributes = new HashMap<>();\n",
      "        polyLineAttributes.put(SvgConstants.Attributes.POINTS, \"0,0 notAnum,alsoNotANum\");\n",
      "        root.setAttributesAndStyles(polyLineAttributes);\n",
      "        SvgDrawContext context = new SvgDrawContext(null, null);\n",
      "        PdfCanvas cv = new PdfCanvas(doc, 1);\n",
      "        context.pushCanvas(cv);\n",
      "\n",
      "        Assert.assertThrows(StyledXMLParserException.class, () -> root.draw(context));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void polyLineInvalidAttributeTest02() {\n",
      "        PdfDocument doc = new PdfDocument(new PdfWriter(new ByteArrayOutputStream()));\n",
      "        doc.addNewPage();\n",
      "        ISvgNodeRenderer root = new PolylineSvgNodeRenderer();\n",
      "        Map<String, String> polyLineAttributes = new HashMap<>();\n",
      "        polyLineAttributes.put(SvgConstants.Attributes.POINTS, \"0,0 100,100 5, 20,30\");\n",
      "        root.setAttributesAndStyles(polyLineAttributes);\n",
      "        SvgDrawContext context = new SvgDrawContext(null, null);\n",
      "        PdfCanvas cv = new PdfCanvas(doc, 1);\n",
      "        context.pushCanvas(cv);\n",
      "\n",
      "        Assert.assertThrows(SvgProcessingException.class, () -> root.draw(context));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void polyLineEmptyPointsListTest() throws IOException, InterruptedException {\n",
      "        String filename = \"polyLineEmptyPointsListTest.pdf\";\n",
      "        PdfDocument doc = new PdfDocument(new PdfWriter(destinationFolder + filename));\n",
      "        doc.addNewPage();\n",
      "\n",
      "        ISvgNodeRenderer root = new PolylineSvgNodeRenderer();\n",
      "        Map<String, String> polyLineAttributes = new HashMap<>();\n",
      "        root.setAttributesAndStyles(polyLineAttributes);\n",
      "        SvgDrawContext context = new SvgDrawContext(null, null);\n",
      "        PdfCanvas cv = new PdfCanvas(doc, 1);\n",
      "        context.pushCanvas(cv);\n",
      "\n",
      "        root.draw(context);\n",
      "        doc.close();\n",
      "\n",
      "        int numPoints = ((PolylineSvgNodeRenderer) root).getPoints().size();\n",
      "        Assert.assertEquals(numPoints, 0);\n",
      "        Assert.assertNull(new CompareTool().compareVisually(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void polyPointCheckerTest() {\n",
      "        PdfDocument doc = new PdfDocument(new PdfWriter(new ByteArrayOutputStream()));\n",
      "        doc.addNewPage();\n",
      "        ISvgNodeRenderer root = new PolylineSvgNodeRenderer();\n",
      "        Map<String, String> polyLineAttributes = new HashMap<>();\n",
      "        polyLineAttributes.put(SvgConstants.Attributes.POINTS, \"0,0 100,100 200,200 300,300\");\n",
      "        root.setAttributesAndStyles(polyLineAttributes);\n",
      "        SvgDrawContext context = new SvgDrawContext(null, null);\n",
      "        PdfCanvas cv = new PdfCanvas(doc, 1);\n",
      "        context.pushCanvas(cv);\n",
      "        root.draw(context);\n",
      "\n",
      "        List<Point> expectedPoints = new ArrayList<>();\n",
      "        expectedPoints.add(new Point(0, 0));\n",
      "        expectedPoints.add(new Point(75, 75));\n",
      "        expectedPoints.add(new Point(150, 150));\n",
      "        expectedPoints.add(new Point(225, 225));\n",
      "        List<Point> attributePoints = ((PolylineSvgNodeRenderer) root).getPoints();\n",
      "\n",
      "        Assert.assertEquals(expectedPoints.size(), attributePoints.size());\n",
      "        for (int x = 0; x < attributePoints.size(); x++) {\n",
      "            Assert.assertEquals(expectedPoints.get(x), attributePoints.get(x));\n",
      "        }\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void elementDimensionExceedsViewboxBoundaryTest() throws IOException, InterruptedException {\n",
      "        convertAndCompare(sourceFolder, destinationFolder, \"elementDimensionExceedsViewboxBoundary\");\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "PolylineSvgNodeRenderer::::getPoints()": [
        55,
        57
      ],
      "PolylineSvgNodeRenderer::::setPoints(java.lang.String)": [
        66,
        84
      ],
      "PolylineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)": [
        86,
        115
      ],
      "PolylineSvgNodeRenderer::::doDraw(com.itextpdf.svg.renderers.SvgDrawContext)": [
        122,
        138
      ],
      "PolylineSvgNodeRenderer::::createDeepCopy()": [
        140,
        145
      ],
      "PolylineSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)": [
        147,
        160
      ],
      "PolylineSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)": [
        162,
        183
      ]
    },
    "test_method_lines_dic": {
      "PolylineSvgNodeRendererTest::::beforeClass()": [
        56,
        59
      ],
      "PolylineSvgNodeRendererTest::::polylineRendererTest()": [
        61,
        78
      ],
      "PolylineSvgNodeRendererTest::::polyLineInvalidAttributeTest01()": [
        80,
        93
      ],
      "PolylineSvgNodeRendererTest::::polyLineInvalidAttributeTest02()": [
        95,
        108
      ],
      "PolylineSvgNodeRendererTest::::polyLineEmptyPointsListTest()": [
        110,
        129
      ],
      "PolylineSvgNodeRendererTest::::polyPointCheckerTest()": [
        131,
        156
      ],
      "PolylineSvgNodeRendererTest::::elementDimensionExceedsViewboxBoundaryTest()": [
        158,
        161
      ]
    },
    "reverse_method_lines_dic": {
      "55": "PolylineSvgNodeRenderer::::getPoints()",
      "56": "PolylineSvgNodeRenderer::::getPoints()",
      "57": "PolylineSvgNodeRenderer::::getPoints()",
      "66": "PolylineSvgNodeRenderer::::setPoints(java.lang.String)",
      "67": "PolylineSvgNodeRenderer::::setPoints(java.lang.String)",
      "68": "PolylineSvgNodeRenderer::::setPoints(java.lang.String)",
      "69": "PolylineSvgNodeRenderer::::setPoints(java.lang.String)",
      "70": "PolylineSvgNodeRenderer::::setPoints(java.lang.String)",
      "71": "PolylineSvgNodeRenderer::::setPoints(java.lang.String)",
      "72": "PolylineSvgNodeRenderer::::setPoints(java.lang.String)",
      "73": "PolylineSvgNodeRenderer::::setPoints(java.lang.String)",
      "74": "PolylineSvgNodeRenderer::::setPoints(java.lang.String)",
      "75": "PolylineSvgNodeRenderer::::setPoints(java.lang.String)",
      "76": "PolylineSvgNodeRenderer::::setPoints(java.lang.String)",
      "77": "PolylineSvgNodeRenderer::::setPoints(java.lang.String)",
      "78": "PolylineSvgNodeRenderer::::setPoints(java.lang.String)",
      "79": "PolylineSvgNodeRenderer::::setPoints(java.lang.String)",
      "80": "PolylineSvgNodeRenderer::::setPoints(java.lang.String)",
      "81": "PolylineSvgNodeRenderer::::setPoints(java.lang.String)",
      "82": "PolylineSvgNodeRenderer::::setPoints(java.lang.String)",
      "83": "PolylineSvgNodeRenderer::::setPoints(java.lang.String)",
      "84": "PolylineSvgNodeRenderer::::setPoints(java.lang.String)",
      "86": "PolylineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "87": "PolylineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "88": "PolylineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "89": "PolylineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "90": "PolylineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "91": "PolylineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "92": "PolylineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "93": "PolylineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "94": "PolylineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "95": "PolylineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "96": "PolylineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "97": "PolylineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "98": "PolylineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "99": "PolylineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "100": "PolylineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "101": "PolylineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "102": "PolylineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "103": "PolylineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "104": "PolylineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "105": "PolylineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "106": "PolylineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "107": "PolylineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "108": "PolylineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "109": "PolylineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "110": "PolylineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "111": "PolylineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "112": "PolylineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "113": "PolylineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "114": "PolylineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "115": "PolylineSvgNodeRenderer::::getObjectBoundingBox(com.itextpdf.svg.renderers.SvgDrawContext)",
      "122": "PolylineSvgNodeRenderer::::doDraw(com.itextpdf.svg.renderers.SvgDrawContext)",
      "123": "PolylineSvgNodeRenderer::::doDraw(com.itextpdf.svg.renderers.SvgDrawContext)",
      "124": "PolylineSvgNodeRenderer::::doDraw(com.itextpdf.svg.renderers.SvgDrawContext)",
      "125": "PolylineSvgNodeRenderer::::doDraw(com.itextpdf.svg.renderers.SvgDrawContext)",
      "126": "PolylineSvgNodeRenderer::::doDraw(com.itextpdf.svg.renderers.SvgDrawContext)",
      "127": "PolylineSvgNodeRenderer::::doDraw(com.itextpdf.svg.renderers.SvgDrawContext)",
      "128": "PolylineSvgNodeRenderer::::doDraw(com.itextpdf.svg.renderers.SvgDrawContext)",
      "129": "PolylineSvgNodeRenderer::::doDraw(com.itextpdf.svg.renderers.SvgDrawContext)",
      "130": "PolylineSvgNodeRenderer::::doDraw(com.itextpdf.svg.renderers.SvgDrawContext)",
      "131": "PolylineSvgNodeRenderer::::doDraw(com.itextpdf.svg.renderers.SvgDrawContext)",
      "132": "PolylineSvgNodeRenderer::::doDraw(com.itextpdf.svg.renderers.SvgDrawContext)",
      "133": "PolylineSvgNodeRenderer::::doDraw(com.itextpdf.svg.renderers.SvgDrawContext)",
      "134": "PolylineSvgNodeRenderer::::doDraw(com.itextpdf.svg.renderers.SvgDrawContext)",
      "135": "PolylineSvgNodeRenderer::::doDraw(com.itextpdf.svg.renderers.SvgDrawContext)",
      "136": "PolylineSvgNodeRenderer::::doDraw(com.itextpdf.svg.renderers.SvgDrawContext)",
      "137": "PolylineSvgNodeRenderer::::doDraw(com.itextpdf.svg.renderers.SvgDrawContext)",
      "138": "PolylineSvgNodeRenderer::::doDraw(com.itextpdf.svg.renderers.SvgDrawContext)",
      "140": "PolylineSvgNodeRenderer::::createDeepCopy()",
      "141": "PolylineSvgNodeRenderer::::createDeepCopy()",
      "142": "PolylineSvgNodeRenderer::::createDeepCopy()",
      "143": "PolylineSvgNodeRenderer::::createDeepCopy()",
      "144": "PolylineSvgNodeRenderer::::createDeepCopy()",
      "145": "PolylineSvgNodeRenderer::::createDeepCopy()",
      "147": "PolylineSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "148": "PolylineSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "149": "PolylineSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "150": "PolylineSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "151": "PolylineSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "152": "PolylineSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "153": "PolylineSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "154": "PolylineSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "155": "PolylineSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "156": "PolylineSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "157": "PolylineSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "158": "PolylineSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "159": "PolylineSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "160": "PolylineSvgNodeRenderer::::drawMarker(com.itextpdf.svg.renderers.SvgDrawContext,com.itextpdf.svg.MarkerVertexType)",
      "162": "PolylineSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "163": "PolylineSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "164": "PolylineSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "165": "PolylineSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "166": "PolylineSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "167": "PolylineSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "168": "PolylineSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "169": "PolylineSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "170": "PolylineSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "171": "PolylineSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "172": "PolylineSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "173": "PolylineSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "174": "PolylineSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "175": "PolylineSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "176": "PolylineSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "177": "PolylineSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "178": "PolylineSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "179": "PolylineSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "180": "PolylineSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "181": "PolylineSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "182": "PolylineSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)",
      "183": "PolylineSvgNodeRenderer::::getAutoOrientAngle(com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer,boolean)"
    },
    "test_reverse_method_lines_dic": {
      "56": "PolylineSvgNodeRendererTest::::beforeClass()",
      "57": "PolylineSvgNodeRendererTest::::beforeClass()",
      "58": "PolylineSvgNodeRendererTest::::beforeClass()",
      "59": "PolylineSvgNodeRendererTest::::beforeClass()",
      "61": "PolylineSvgNodeRendererTest::::polylineRendererTest()",
      "62": "PolylineSvgNodeRendererTest::::polylineRendererTest()",
      "63": "PolylineSvgNodeRendererTest::::polylineRendererTest()",
      "64": "PolylineSvgNodeRendererTest::::polylineRendererTest()",
      "65": "PolylineSvgNodeRendererTest::::polylineRendererTest()",
      "66": "PolylineSvgNodeRendererTest::::polylineRendererTest()",
      "67": "PolylineSvgNodeRendererTest::::polylineRendererTest()",
      "68": "PolylineSvgNodeRendererTest::::polylineRendererTest()",
      "69": "PolylineSvgNodeRendererTest::::polylineRendererTest()",
      "70": "PolylineSvgNodeRendererTest::::polylineRendererTest()",
      "71": "PolylineSvgNodeRendererTest::::polylineRendererTest()",
      "72": "PolylineSvgNodeRendererTest::::polylineRendererTest()",
      "73": "PolylineSvgNodeRendererTest::::polylineRendererTest()",
      "74": "PolylineSvgNodeRendererTest::::polylineRendererTest()",
      "75": "PolylineSvgNodeRendererTest::::polylineRendererTest()",
      "76": "PolylineSvgNodeRendererTest::::polylineRendererTest()",
      "77": "PolylineSvgNodeRendererTest::::polylineRendererTest()",
      "78": "PolylineSvgNodeRendererTest::::polylineRendererTest()",
      "80": "PolylineSvgNodeRendererTest::::polyLineInvalidAttributeTest01()",
      "81": "PolylineSvgNodeRendererTest::::polyLineInvalidAttributeTest01()",
      "82": "PolylineSvgNodeRendererTest::::polyLineInvalidAttributeTest01()",
      "83": "PolylineSvgNodeRendererTest::::polyLineInvalidAttributeTest01()",
      "84": "PolylineSvgNodeRendererTest::::polyLineInvalidAttributeTest01()",
      "85": "PolylineSvgNodeRendererTest::::polyLineInvalidAttributeTest01()",
      "86": "PolylineSvgNodeRendererTest::::polyLineInvalidAttributeTest01()",
      "87": "PolylineSvgNodeRendererTest::::polyLineInvalidAttributeTest01()",
      "88": "PolylineSvgNodeRendererTest::::polyLineInvalidAttributeTest01()",
      "89": "PolylineSvgNodeRendererTest::::polyLineInvalidAttributeTest01()",
      "90": "PolylineSvgNodeRendererTest::::polyLineInvalidAttributeTest01()",
      "91": "PolylineSvgNodeRendererTest::::polyLineInvalidAttributeTest01()",
      "92": "PolylineSvgNodeRendererTest::::polyLineInvalidAttributeTest01()",
      "93": "PolylineSvgNodeRendererTest::::polyLineInvalidAttributeTest01()",
      "95": "PolylineSvgNodeRendererTest::::polyLineInvalidAttributeTest02()",
      "96": "PolylineSvgNodeRendererTest::::polyLineInvalidAttributeTest02()",
      "97": "PolylineSvgNodeRendererTest::::polyLineInvalidAttributeTest02()",
      "98": "PolylineSvgNodeRendererTest::::polyLineInvalidAttributeTest02()",
      "99": "PolylineSvgNodeRendererTest::::polyLineInvalidAttributeTest02()",
      "100": "PolylineSvgNodeRendererTest::::polyLineInvalidAttributeTest02()",
      "101": "PolylineSvgNodeRendererTest::::polyLineInvalidAttributeTest02()",
      "102": "PolylineSvgNodeRendererTest::::polyLineInvalidAttributeTest02()",
      "103": "PolylineSvgNodeRendererTest::::polyLineInvalidAttributeTest02()",
      "104": "PolylineSvgNodeRendererTest::::polyLineInvalidAttributeTest02()",
      "105": "PolylineSvgNodeRendererTest::::polyLineInvalidAttributeTest02()",
      "106": "PolylineSvgNodeRendererTest::::polyLineInvalidAttributeTest02()",
      "107": "PolylineSvgNodeRendererTest::::polyLineInvalidAttributeTest02()",
      "108": "PolylineSvgNodeRendererTest::::polyLineInvalidAttributeTest02()",
      "110": "PolylineSvgNodeRendererTest::::polyLineEmptyPointsListTest()",
      "111": "PolylineSvgNodeRendererTest::::polyLineEmptyPointsListTest()",
      "112": "PolylineSvgNodeRendererTest::::polyLineEmptyPointsListTest()",
      "113": "PolylineSvgNodeRendererTest::::polyLineEmptyPointsListTest()",
      "114": "PolylineSvgNodeRendererTest::::polyLineEmptyPointsListTest()",
      "115": "PolylineSvgNodeRendererTest::::polyLineEmptyPointsListTest()",
      "116": "PolylineSvgNodeRendererTest::::polyLineEmptyPointsListTest()",
      "117": "PolylineSvgNodeRendererTest::::polyLineEmptyPointsListTest()",
      "118": "PolylineSvgNodeRendererTest::::polyLineEmptyPointsListTest()",
      "119": "PolylineSvgNodeRendererTest::::polyLineEmptyPointsListTest()",
      "120": "PolylineSvgNodeRendererTest::::polyLineEmptyPointsListTest()",
      "121": "PolylineSvgNodeRendererTest::::polyLineEmptyPointsListTest()",
      "122": "PolylineSvgNodeRendererTest::::polyLineEmptyPointsListTest()",
      "123": "PolylineSvgNodeRendererTest::::polyLineEmptyPointsListTest()",
      "124": "PolylineSvgNodeRendererTest::::polyLineEmptyPointsListTest()",
      "125": "PolylineSvgNodeRendererTest::::polyLineEmptyPointsListTest()",
      "126": "PolylineSvgNodeRendererTest::::polyLineEmptyPointsListTest()",
      "127": "PolylineSvgNodeRendererTest::::polyLineEmptyPointsListTest()",
      "128": "PolylineSvgNodeRendererTest::::polyLineEmptyPointsListTest()",
      "129": "PolylineSvgNodeRendererTest::::polyLineEmptyPointsListTest()",
      "131": "PolylineSvgNodeRendererTest::::polyPointCheckerTest()",
      "132": "PolylineSvgNodeRendererTest::::polyPointCheckerTest()",
      "133": "PolylineSvgNodeRendererTest::::polyPointCheckerTest()",
      "134": "PolylineSvgNodeRendererTest::::polyPointCheckerTest()",
      "135": "PolylineSvgNodeRendererTest::::polyPointCheckerTest()",
      "136": "PolylineSvgNodeRendererTest::::polyPointCheckerTest()",
      "137": "PolylineSvgNodeRendererTest::::polyPointCheckerTest()",
      "138": "PolylineSvgNodeRendererTest::::polyPointCheckerTest()",
      "139": "PolylineSvgNodeRendererTest::::polyPointCheckerTest()",
      "140": "PolylineSvgNodeRendererTest::::polyPointCheckerTest()",
      "141": "PolylineSvgNodeRendererTest::::polyPointCheckerTest()",
      "142": "PolylineSvgNodeRendererTest::::polyPointCheckerTest()",
      "143": "PolylineSvgNodeRendererTest::::polyPointCheckerTest()",
      "144": "PolylineSvgNodeRendererTest::::polyPointCheckerTest()",
      "145": "PolylineSvgNodeRendererTest::::polyPointCheckerTest()",
      "146": "PolylineSvgNodeRendererTest::::polyPointCheckerTest()",
      "147": "PolylineSvgNodeRendererTest::::polyPointCheckerTest()",
      "148": "PolylineSvgNodeRendererTest::::polyPointCheckerTest()",
      "149": "PolylineSvgNodeRendererTest::::polyPointCheckerTest()",
      "150": "PolylineSvgNodeRendererTest::::polyPointCheckerTest()",
      "151": "PolylineSvgNodeRendererTest::::polyPointCheckerTest()",
      "152": "PolylineSvgNodeRendererTest::::polyPointCheckerTest()",
      "153": "PolylineSvgNodeRendererTest::::polyPointCheckerTest()",
      "154": "PolylineSvgNodeRendererTest::::polyPointCheckerTest()",
      "155": "PolylineSvgNodeRendererTest::::polyPointCheckerTest()",
      "156": "PolylineSvgNodeRendererTest::::polyPointCheckerTest()",
      "158": "PolylineSvgNodeRendererTest::::elementDimensionExceedsViewboxBoundaryTest()",
      "159": "PolylineSvgNodeRendererTest::::elementDimensionExceedsViewboxBoundaryTest()",
      "160": "PolylineSvgNodeRendererTest::::elementDimensionExceedsViewboxBoundaryTest()",
      "161": "PolylineSvgNodeRendererTest::::elementDimensionExceedsViewboxBoundaryTest()"
    },
    "tests": [
      {
        "test_lines": [
          80,
          93
        ],
        "covered_lines": [
          48,
          53,
          67,
          71,
          72,
          77,
          79,
          80,
          81,
          82,
          124,
          125
        ]
      },
      {
        "test_lines": [
          95,
          108
        ],
        "covered_lines": [
          48,
          53,
          67,
          71,
          72,
          73,
          74,
          124,
          125
        ]
      },
      {
        "test_lines": [
          131,
          156
        ],
        "covered_lines": [
          48,
          53,
          56,
          67,
          71,
          72,
          77,
          79,
          80,
          81,
          82,
          84,
          124,
          125,
          126,
          128,
          129,
          130,
          131,
          132,
          133,
          134,
          135,
          138
        ]
      },
      {
        "test_lines": [
          158,
          161
        ],
        "covered_lines": [
          48,
          53,
          67,
          71,
          72,
          77,
          79,
          80,
          81,
          82,
          84,
          124,
          125,
          126,
          128,
          129,
          130,
          131,
          132,
          133,
          134,
          135,
          138
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/svg/src/main/java/com/itextpdf/svg/renderers/impl/PolygonSvgNodeRenderer.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.svg.renderers.impl;\n",
      "\n",
      "import com.itextpdf.kernel.geom.Point;\n",
      "import com.itextpdf.svg.renderers.IMarkerCapable;\n",
      "import com.itextpdf.svg.renderers.ISvgNodeRenderer;\n",
      "\n",
      "/**\n",
      " * {@link ISvgNodeRenderer} implementation for the &lt;polygon&gt; tag.\n",
      " */\n",
      "public class PolygonSvgNodeRenderer extends PolylineSvgNodeRenderer implements IMarkerCapable {\n",
      "\n",
      "    /**\n",
      "     * Calls setPoints(String) to set {@link PolylineSvgNodeRenderer#points}\n",
      "     * Then calls {@link PolygonSvgNodeRenderer#connectPoints()} to create a path between the first and last point if it doesn't already exist\n",
      "     */\n",
      "    @Override\n",
      "    protected void setPoints(String pointsAttribute) {\n",
      "        super.setPoints(pointsAttribute);\n",
      "        connectPoints();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Appends the starting point to the end of {@link PolylineSvgNodeRenderer#points} if it is not already there.\n",
      "     */\n",
      "    private void connectPoints() {\n",
      "        if (points.size() < 2) {\n",
      "            return;\n",
      "        }\n",
      "\n",
      "        Point start = points.get(0);\n",
      "        Point end = points.get(points.size() - 1);\n",
      "        if (Double.compare(start.x, end.x) != 0 || Double.compare(start.y, end.y) != 0) {\n",
      "            points.add(new Point(start.x, start.y));\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public ISvgNodeRenderer createDeepCopy() {\n",
      "        PolygonSvgNodeRenderer copy = new PolygonSvgNodeRenderer();\n",
      "        deepCopyAttributesAndStyles(copy);\n",
      "        return copy;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.svg.renderers.impl;\n",
      "\n",
      "import com.itextpdf.kernel.geom.Point;\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "import com.itextpdf.kernel.pdf.PdfWriter;\n",
      "import com.itextpdf.kernel.pdf.canvas.PdfCanvas;\n",
      "import com.itextpdf.kernel.utils.CompareTool;\n",
      "import com.itextpdf.svg.SvgConstants;\n",
      "import com.itextpdf.svg.SvgConstants.Attributes;\n",
      "import com.itextpdf.svg.renderers.ISvgNodeRenderer;\n",
      "import com.itextpdf.svg.renderers.SvgDrawContext;\n",
      "import com.itextpdf.svg.renderers.SvgIntegrationTest;\n",
      "import com.itextpdf.test.ITextTest;\n",
      "import com.itextpdf.test.annotations.type.IntegrationTest;\n",
      "\n",
      "import java.io.ByteArrayOutputStream;\n",
      "import java.io.IOException;\n",
      "import java.util.ArrayList;\n",
      "import java.util.HashMap;\n",
      "import java.util.List;\n",
      "import java.util.Map;\n",
      "\n",
      "import org.junit.Assert;\n",
      "import org.junit.BeforeClass;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(IntegrationTest.class)\n",
      "public class PolygonSvgNodeRendererTest extends SvgIntegrationTest {\n",
      "    private static final String sourceFolder = \"./src/test/resources/com/itextpdf/svg/renderers/impl/PolygonSvgNoderendererTest/\";\n",
      "    private static final String destinationFolder = \"./target/test/com/itextpdf/svg/renderers/impl/PolygonSvgNoderendererTest/\";\n",
      "\n",
      "    @BeforeClass\n",
      "    public static void beforeClass() {\n",
      "        ITextTest.createDestinationFolder(destinationFolder);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void polygonLineRendererTest() throws IOException, InterruptedException {\n",
      "        String filename = \"polygonLineRendererTest.pdf\";\n",
      "        PdfDocument doc = new PdfDocument(new PdfWriter(destinationFolder + filename));\n",
      "        doc.addNewPage();\n",
      "\n",
      "        ISvgNodeRenderer root = new PolygonSvgNodeRenderer();\n",
      "        Map<String, String> polyLineAttributes = new HashMap<>();\n",
      "        polyLineAttributes.put(SvgConstants.Attributes.POINTS, \"60,20 100,40 100,80 60,100 20,80 20,40\");\n",
      "        root.setAttributesAndStyles(polyLineAttributes);\n",
      "        SvgDrawContext context = new SvgDrawContext(null, null);\n",
      "        PdfCanvas cv = new PdfCanvas(doc, 1);\n",
      "        context.pushCanvas(cv);\n",
      "\n",
      "        root.draw(context);\n",
      "        doc.close();\n",
      "        Assert.assertNull(new CompareTool().compareVisually(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void polygonLinkedPointCheckerImplicit() {\n",
      "        PdfDocument doc = new PdfDocument(new PdfWriter(new ByteArrayOutputStream()));\n",
      "        doc.addNewPage();\n",
      "        ISvgNodeRenderer root = new PolygonSvgNodeRenderer();\n",
      "        Map<String, String> polyLineAttributes = new HashMap<>();\n",
      "        polyLineAttributes.put(SvgConstants.Attributes.POINTS, \"0,0 100,100 200,200 300,300\");\n",
      "        root.setAttributesAndStyles(polyLineAttributes);\n",
      "        SvgDrawContext context = new SvgDrawContext(null, null);\n",
      "        PdfCanvas cv = new PdfCanvas(doc, 1);\n",
      "        context.pushCanvas(cv);\n",
      "        root.draw(context);\n",
      "\n",
      "        List<Point> expectedPoints = new ArrayList<>();\n",
      "        expectedPoints.add(new Point(0, 0));\n",
      "        expectedPoints.add(new Point(75, 75));\n",
      "        expectedPoints.add(new Point(150, 150));\n",
      "        expectedPoints.add(new Point(225, 225));\n",
      "        expectedPoints.add(new Point(0, 0));\n",
      "        List<Point> attributePoints = ((PolygonSvgNodeRenderer) root).getPoints();\n",
      "\n",
      "        Assert.assertEquals(expectedPoints.size(), attributePoints.size());\n",
      "        for (int x = 0; x < attributePoints.size(); x++) {\n",
      "            Assert.assertEquals(expectedPoints.get(x), attributePoints.get(x));\n",
      "        }\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void polygonLinkedPointCheckerExplicit() {\n",
      "        PdfDocument doc = new PdfDocument(new PdfWriter(new ByteArrayOutputStream()));\n",
      "        doc.addNewPage();\n",
      "        ISvgNodeRenderer root = new PolygonSvgNodeRenderer();\n",
      "        Map<String, String> polyLineAttributes = new HashMap<>();\n",
      "        polyLineAttributes.put(SvgConstants.Attributes.POINTS, \"0,0 100,100 200,200 300,300 0,0\");\n",
      "        root.setAttributesAndStyles(polyLineAttributes);\n",
      "        SvgDrawContext context = new SvgDrawContext(null, null);\n",
      "        PdfCanvas cv = new PdfCanvas(doc, 1);\n",
      "        context.pushCanvas(cv);\n",
      "        root.draw(context);\n",
      "\n",
      "        List<Point> expectedPoints = new ArrayList<>();\n",
      "        expectedPoints.add(new Point(0, 0));\n",
      "        expectedPoints.add(new Point(75, 75));\n",
      "        expectedPoints.add(new Point(150, 150));\n",
      "        expectedPoints.add(new Point(225, 225));\n",
      "        expectedPoints.add(new Point(0, 0));\n",
      "        List<Point> attributePoints = ((PolygonSvgNodeRenderer) root).getPoints();\n",
      "\n",
      "        Assert.assertEquals(expectedPoints.size(), attributePoints.size());\n",
      "        for (int x = 0; x < attributePoints.size(); x++) {\n",
      "            Assert.assertEquals(expectedPoints.get(x), attributePoints.get(x));\n",
      "        }\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void polygonEmptyPointCheckerTest() throws IOException, InterruptedException {\n",
      "        String filename = \"polygonEmptyPointCheckerTest.pdf\";\n",
      "        PdfDocument doc = new PdfDocument(new PdfWriter(destinationFolder + filename));\n",
      "        doc.addNewPage();\n",
      "\n",
      "        ISvgNodeRenderer root = new PolygonSvgNodeRenderer();\n",
      "        Map<String, String> polyLineAttributes = new HashMap<>();\n",
      "        root.setAttributesAndStyles(polyLineAttributes);\n",
      "        SvgDrawContext context = new SvgDrawContext(null, null);\n",
      "        PdfCanvas cv = new PdfCanvas(doc, 1);\n",
      "        context.pushCanvas(cv);\n",
      "\n",
      "        root.draw(context);\n",
      "        doc.close();\n",
      "\n",
      "        int numPoints = ((PolygonSvgNodeRenderer) root).getPoints().size();\n",
      "        Assert.assertEquals(numPoints, 0);\n",
      "        Assert.assertNull(new CompareTool().compareVisually(destinationFolder + filename, sourceFolder + \"cmp_\" + filename, destinationFolder, \"diff_\"));\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void connectPointsWithSameYCoordinateTest() {\n",
      "        PdfDocument doc = new PdfDocument(new PdfWriter(new ByteArrayOutputStream()));\n",
      "        doc.addNewPage();\n",
      "        ISvgNodeRenderer root = new PolygonSvgNodeRenderer();\n",
      "        Map<String, String> polyLineAttributes = new HashMap<>();\n",
      "        polyLineAttributes.put(SvgConstants.Attributes.POINTS, \"100,100 100,200 150,200 150,100\");\n",
      "        polyLineAttributes.put(Attributes.FILL, \"none\");\n",
      "        polyLineAttributes.put(Attributes.STROKE, \"black\");\n",
      "        root.setAttributesAndStyles(polyLineAttributes);\n",
      "        SvgDrawContext context = new SvgDrawContext(null, null);\n",
      "        PdfCanvas cv = new PdfCanvas(doc, 1);\n",
      "        context.pushCanvas(cv);\n",
      "        root.draw(context);\n",
      "        doc.close();\n",
      "\n",
      "        List<Point> expectedPoints = new ArrayList<>();\n",
      "        expectedPoints.add(new Point(75, 75));\n",
      "        expectedPoints.add(new Point(75, 150));\n",
      "        expectedPoints.add(new Point(112.5, 150));\n",
      "        expectedPoints.add(new Point(112.5, 75));\n",
      "        expectedPoints.add(new Point(75, 75));\n",
      "        List<Point> attributePoints = ((PolygonSvgNodeRenderer) root).getPoints();\n",
      "\n",
      "        Assert.assertEquals(expectedPoints.size(), attributePoints.size());\n",
      "        for (int x = 0; x < attributePoints.size(); x++) {\n",
      "            Assert.assertEquals(expectedPoints.get(x), attributePoints.get(x));\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "PolygonSvgNodeRenderer::::setPoints(java.lang.String)": [
        38,
        42
      ],
      "PolygonSvgNodeRenderer::::connectPoints()": [
        47,
        57
      ],
      "PolygonSvgNodeRenderer::::createDeepCopy()": [
        59,
        64
      ]
    },
    "test_method_lines_dic": {
      "PolygonSvgNodeRendererTest::::beforeClass()": [
        55,
        58
      ],
      "PolygonSvgNodeRendererTest::::polygonLineRendererTest()": [
        60,
        77
      ],
      "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerImplicit()": [
        79,
        105
      ],
      "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerExplicit()": [
        107,
        133
      ],
      "PolygonSvgNodeRendererTest::::polygonEmptyPointCheckerTest()": [
        135,
        154
      ],
      "PolygonSvgNodeRendererTest::::connectPointsWithSameYCoordinateTest()": [
        157,
        185
      ]
    },
    "reverse_method_lines_dic": {
      "38": "PolygonSvgNodeRenderer::::setPoints(java.lang.String)",
      "39": "PolygonSvgNodeRenderer::::setPoints(java.lang.String)",
      "40": "PolygonSvgNodeRenderer::::setPoints(java.lang.String)",
      "41": "PolygonSvgNodeRenderer::::setPoints(java.lang.String)",
      "42": "PolygonSvgNodeRenderer::::setPoints(java.lang.String)",
      "47": "PolygonSvgNodeRenderer::::connectPoints()",
      "48": "PolygonSvgNodeRenderer::::connectPoints()",
      "49": "PolygonSvgNodeRenderer::::connectPoints()",
      "50": "PolygonSvgNodeRenderer::::connectPoints()",
      "51": "PolygonSvgNodeRenderer::::connectPoints()",
      "52": "PolygonSvgNodeRenderer::::connectPoints()",
      "53": "PolygonSvgNodeRenderer::::connectPoints()",
      "54": "PolygonSvgNodeRenderer::::connectPoints()",
      "55": "PolygonSvgNodeRenderer::::connectPoints()",
      "56": "PolygonSvgNodeRenderer::::connectPoints()",
      "57": "PolygonSvgNodeRenderer::::connectPoints()",
      "59": "PolygonSvgNodeRenderer::::createDeepCopy()",
      "60": "PolygonSvgNodeRenderer::::createDeepCopy()",
      "61": "PolygonSvgNodeRenderer::::createDeepCopy()",
      "62": "PolygonSvgNodeRenderer::::createDeepCopy()",
      "63": "PolygonSvgNodeRenderer::::createDeepCopy()",
      "64": "PolygonSvgNodeRenderer::::createDeepCopy()"
    },
    "test_reverse_method_lines_dic": {
      "55": "PolygonSvgNodeRendererTest::::beforeClass()",
      "56": "PolygonSvgNodeRendererTest::::beforeClass()",
      "57": "PolygonSvgNodeRendererTest::::beforeClass()",
      "58": "PolygonSvgNodeRendererTest::::beforeClass()",
      "60": "PolygonSvgNodeRendererTest::::polygonLineRendererTest()",
      "61": "PolygonSvgNodeRendererTest::::polygonLineRendererTest()",
      "62": "PolygonSvgNodeRendererTest::::polygonLineRendererTest()",
      "63": "PolygonSvgNodeRendererTest::::polygonLineRendererTest()",
      "64": "PolygonSvgNodeRendererTest::::polygonLineRendererTest()",
      "65": "PolygonSvgNodeRendererTest::::polygonLineRendererTest()",
      "66": "PolygonSvgNodeRendererTest::::polygonLineRendererTest()",
      "67": "PolygonSvgNodeRendererTest::::polygonLineRendererTest()",
      "68": "PolygonSvgNodeRendererTest::::polygonLineRendererTest()",
      "69": "PolygonSvgNodeRendererTest::::polygonLineRendererTest()",
      "70": "PolygonSvgNodeRendererTest::::polygonLineRendererTest()",
      "71": "PolygonSvgNodeRendererTest::::polygonLineRendererTest()",
      "72": "PolygonSvgNodeRendererTest::::polygonLineRendererTest()",
      "73": "PolygonSvgNodeRendererTest::::polygonLineRendererTest()",
      "74": "PolygonSvgNodeRendererTest::::polygonLineRendererTest()",
      "75": "PolygonSvgNodeRendererTest::::polygonLineRendererTest()",
      "76": "PolygonSvgNodeRendererTest::::polygonLineRendererTest()",
      "77": "PolygonSvgNodeRendererTest::::polygonLineRendererTest()",
      "79": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerImplicit()",
      "80": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerImplicit()",
      "81": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerImplicit()",
      "82": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerImplicit()",
      "83": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerImplicit()",
      "84": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerImplicit()",
      "85": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerImplicit()",
      "86": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerImplicit()",
      "87": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerImplicit()",
      "88": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerImplicit()",
      "89": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerImplicit()",
      "90": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerImplicit()",
      "91": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerImplicit()",
      "92": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerImplicit()",
      "93": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerImplicit()",
      "94": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerImplicit()",
      "95": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerImplicit()",
      "96": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerImplicit()",
      "97": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerImplicit()",
      "98": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerImplicit()",
      "99": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerImplicit()",
      "100": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerImplicit()",
      "101": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerImplicit()",
      "102": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerImplicit()",
      "103": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerImplicit()",
      "104": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerImplicit()",
      "105": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerImplicit()",
      "107": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerExplicit()",
      "108": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerExplicit()",
      "109": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerExplicit()",
      "110": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerExplicit()",
      "111": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerExplicit()",
      "112": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerExplicit()",
      "113": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerExplicit()",
      "114": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerExplicit()",
      "115": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerExplicit()",
      "116": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerExplicit()",
      "117": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerExplicit()",
      "118": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerExplicit()",
      "119": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerExplicit()",
      "120": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerExplicit()",
      "121": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerExplicit()",
      "122": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerExplicit()",
      "123": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerExplicit()",
      "124": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerExplicit()",
      "125": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerExplicit()",
      "126": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerExplicit()",
      "127": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerExplicit()",
      "128": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerExplicit()",
      "129": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerExplicit()",
      "130": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerExplicit()",
      "131": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerExplicit()",
      "132": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerExplicit()",
      "133": "PolygonSvgNodeRendererTest::::polygonLinkedPointCheckerExplicit()",
      "135": "PolygonSvgNodeRendererTest::::polygonEmptyPointCheckerTest()",
      "136": "PolygonSvgNodeRendererTest::::polygonEmptyPointCheckerTest()",
      "137": "PolygonSvgNodeRendererTest::::polygonEmptyPointCheckerTest()",
      "138": "PolygonSvgNodeRendererTest::::polygonEmptyPointCheckerTest()",
      "139": "PolygonSvgNodeRendererTest::::polygonEmptyPointCheckerTest()",
      "140": "PolygonSvgNodeRendererTest::::polygonEmptyPointCheckerTest()",
      "141": "PolygonSvgNodeRendererTest::::polygonEmptyPointCheckerTest()",
      "142": "PolygonSvgNodeRendererTest::::polygonEmptyPointCheckerTest()",
      "143": "PolygonSvgNodeRendererTest::::polygonEmptyPointCheckerTest()",
      "144": "PolygonSvgNodeRendererTest::::polygonEmptyPointCheckerTest()",
      "145": "PolygonSvgNodeRendererTest::::polygonEmptyPointCheckerTest()",
      "146": "PolygonSvgNodeRendererTest::::polygonEmptyPointCheckerTest()",
      "147": "PolygonSvgNodeRendererTest::::polygonEmptyPointCheckerTest()",
      "148": "PolygonSvgNodeRendererTest::::polygonEmptyPointCheckerTest()",
      "149": "PolygonSvgNodeRendererTest::::polygonEmptyPointCheckerTest()",
      "150": "PolygonSvgNodeRendererTest::::polygonEmptyPointCheckerTest()",
      "151": "PolygonSvgNodeRendererTest::::polygonEmptyPointCheckerTest()",
      "152": "PolygonSvgNodeRendererTest::::polygonEmptyPointCheckerTest()",
      "153": "PolygonSvgNodeRendererTest::::polygonEmptyPointCheckerTest()",
      "154": "PolygonSvgNodeRendererTest::::polygonEmptyPointCheckerTest()",
      "157": "PolygonSvgNodeRendererTest::::connectPointsWithSameYCoordinateTest()",
      "158": "PolygonSvgNodeRendererTest::::connectPointsWithSameYCoordinateTest()",
      "159": "PolygonSvgNodeRendererTest::::connectPointsWithSameYCoordinateTest()",
      "160": "PolygonSvgNodeRendererTest::::connectPointsWithSameYCoordinateTest()",
      "161": "PolygonSvgNodeRendererTest::::connectPointsWithSameYCoordinateTest()",
      "162": "PolygonSvgNodeRendererTest::::connectPointsWithSameYCoordinateTest()",
      "163": "PolygonSvgNodeRendererTest::::connectPointsWithSameYCoordinateTest()",
      "164": "PolygonSvgNodeRendererTest::::connectPointsWithSameYCoordinateTest()",
      "165": "PolygonSvgNodeRendererTest::::connectPointsWithSameYCoordinateTest()",
      "166": "PolygonSvgNodeRendererTest::::connectPointsWithSameYCoordinateTest()",
      "167": "PolygonSvgNodeRendererTest::::connectPointsWithSameYCoordinateTest()",
      "168": "PolygonSvgNodeRendererTest::::connectPointsWithSameYCoordinateTest()",
      "169": "PolygonSvgNodeRendererTest::::connectPointsWithSameYCoordinateTest()",
      "170": "PolygonSvgNodeRendererTest::::connectPointsWithSameYCoordinateTest()",
      "171": "PolygonSvgNodeRendererTest::::connectPointsWithSameYCoordinateTest()",
      "172": "PolygonSvgNodeRendererTest::::connectPointsWithSameYCoordinateTest()",
      "173": "PolygonSvgNodeRendererTest::::connectPointsWithSameYCoordinateTest()",
      "174": "PolygonSvgNodeRendererTest::::connectPointsWithSameYCoordinateTest()",
      "175": "PolygonSvgNodeRendererTest::::connectPointsWithSameYCoordinateTest()",
      "176": "PolygonSvgNodeRendererTest::::connectPointsWithSameYCoordinateTest()",
      "177": "PolygonSvgNodeRendererTest::::connectPointsWithSameYCoordinateTest()",
      "178": "PolygonSvgNodeRendererTest::::connectPointsWithSameYCoordinateTest()",
      "179": "PolygonSvgNodeRendererTest::::connectPointsWithSameYCoordinateTest()",
      "180": "PolygonSvgNodeRendererTest::::connectPointsWithSameYCoordinateTest()",
      "181": "PolygonSvgNodeRendererTest::::connectPointsWithSameYCoordinateTest()",
      "182": "PolygonSvgNodeRendererTest::::connectPointsWithSameYCoordinateTest()",
      "183": "PolygonSvgNodeRendererTest::::connectPointsWithSameYCoordinateTest()",
      "184": "PolygonSvgNodeRendererTest::::connectPointsWithSameYCoordinateTest()",
      "185": "PolygonSvgNodeRendererTest::::connectPointsWithSameYCoordinateTest()"
    },
    "tests": [
      {
        "test_lines": [
          79,
          105
        ],
        "covered_lines": [
          32,
          40,
          41,
          42,
          48,
          52,
          53,
          54,
          55,
          57
        ]
      },
      {
        "test_lines": [
          107,
          133
        ],
        "covered_lines": [
          32,
          40,
          41,
          42,
          48,
          52,
          53,
          54,
          57
        ]
      },
      {
        "test_lines": [
          157,
          185
        ],
        "covered_lines": [
          32,
          40,
          41,
          42,
          48,
          52,
          53,
          54,
          55,
          57
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/svg/src/main/java/com/itextpdf/svg/renderers/factories/DefaultSvgNodeRendererMapper.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.svg.renderers.factories;\n",
      "\n",
      "import com.itextpdf.svg.SvgConstants;\n",
      "import com.itextpdf.svg.renderers.ISvgNodeRenderer;\n",
      "import com.itextpdf.svg.renderers.impl.CircleSvgNodeRenderer;\n",
      "import com.itextpdf.svg.renderers.impl.ClipPathSvgNodeRenderer;\n",
      "import com.itextpdf.svg.renderers.impl.DefsSvgNodeRenderer;\n",
      "import com.itextpdf.svg.renderers.impl.EllipseSvgNodeRenderer;\n",
      "import com.itextpdf.svg.renderers.impl.GroupSvgNodeRenderer;\n",
      "import com.itextpdf.svg.renderers.impl.ImageSvgNodeRenderer;\n",
      "import com.itextpdf.svg.renderers.impl.LineSvgNodeRenderer;\n",
      "import com.itextpdf.svg.renderers.impl.LinearGradientSvgNodeRenderer;\n",
      "import com.itextpdf.svg.renderers.impl.MarkerSvgNodeRenderer;\n",
      "import com.itextpdf.svg.renderers.impl.PathSvgNodeRenderer;\n",
      "import com.itextpdf.svg.renderers.impl.PatternSvgNodeRenderer;\n",
      "import com.itextpdf.svg.renderers.impl.PolygonSvgNodeRenderer;\n",
      "import com.itextpdf.svg.renderers.impl.PolylineSvgNodeRenderer;\n",
      "import com.itextpdf.svg.renderers.impl.RectangleSvgNodeRenderer;\n",
      "import com.itextpdf.svg.renderers.impl.StopSvgNodeRenderer;\n",
      "import com.itextpdf.svg.renderers.impl.SvgTagSvgNodeRenderer;\n",
      "import com.itextpdf.svg.renderers.impl.SymbolSvgNodeRenderer;\n",
      "import com.itextpdf.svg.renderers.impl.TextLeafSvgNodeRenderer;\n",
      "import com.itextpdf.svg.renderers.impl.TextSvgBranchRenderer;\n",
      "import com.itextpdf.svg.renderers.impl.TextSvgTSpanBranchRenderer;\n",
      "import com.itextpdf.svg.renderers.impl.UseSvgNodeRenderer;\n",
      "\n",
      "import java.util.Collection;\n",
      "import java.util.Collections;\n",
      "import java.util.HashMap;\n",
      "import java.util.HashSet;\n",
      "import java.util.Map;\n",
      "\n",
      "/**\n",
      " * Contains the mapping of the default implementations, provided by this project for the standard SVG\n",
      " * tags as defined in the SVG Specification.\n",
      " */\n",
      "class DefaultSvgNodeRendererMapper {\n",
      "\n",
      "    private static final String CLIP_PATH_LC = SvgConstants.Tags.CLIP_PATH.toLowerCase();\n",
      "    private static final String LINEAR_GRADIENT_LC = SvgConstants.Tags.LINEAR_GRADIENT.toLowerCase();\n",
      "    private static final String TEXT_LEAF_LC = SvgConstants.Tags.TEXT_LEAF.toLowerCase();\n",
      "\n",
      "    /**\n",
      "     * Creates a new {@link DefaultSvgNodeRendererMapper} instance.\n",
      "     */\n",
      "    DefaultSvgNodeRendererMapper() {\n",
      "    }\n",
      "\n",
      "    private static final Map<String, ISvgNodeRendererCreator> mapping;\n",
      "    private static final Collection<String> ignored;\n",
      "\n",
      "    static {\n",
      "        Map<String, ISvgNodeRendererCreator> result = new HashMap<>();\n",
      "        result.put(SvgConstants.Tags.CIRCLE, () -> new CircleSvgNodeRenderer());\n",
      "        result.put(SvgConstants.Tags.CLIP_PATH, () -> new ClipPathSvgNodeRenderer());\n",
      "        result.put(SvgConstants.Tags.DEFS, () -> new DefsSvgNodeRenderer());\n",
      "        result.put(SvgConstants.Tags.ELLIPSE, () -> new EllipseSvgNodeRenderer());\n",
      "        result.put(SvgConstants.Tags.G, () -> new GroupSvgNodeRenderer());\n",
      "        result.put(SvgConstants.Tags.IMAGE, () -> new ImageSvgNodeRenderer());\n",
      "        result.put(SvgConstants.Tags.LINE, () -> new LineSvgNodeRenderer());\n",
      "        result.put(SvgConstants.Tags.LINEAR_GRADIENT, () -> new LinearGradientSvgNodeRenderer());\n",
      "        result.put(SvgConstants.Tags.MARKER, () -> new MarkerSvgNodeRenderer());\n",
      "        result.put(SvgConstants.Tags.PATTERN, () -> new PatternSvgNodeRenderer());\n",
      "        result.put(SvgConstants.Tags.PATH, () -> new PathSvgNodeRenderer());\n",
      "        result.put(SvgConstants.Tags.POLYGON, () -> new PolygonSvgNodeRenderer());\n",
      "        result.put(SvgConstants.Tags.POLYLINE, () -> new PolylineSvgNodeRenderer());\n",
      "        result.put(SvgConstants.Tags.RECT, () -> new RectangleSvgNodeRenderer());\n",
      "        result.put(SvgConstants.Tags.STOP, () -> new StopSvgNodeRenderer());\n",
      "        result.put(SvgConstants.Tags.SVG, () -> new SvgTagSvgNodeRenderer());\n",
      "        result.put(SvgConstants.Tags.SYMBOL, () -> new SymbolSvgNodeRenderer());\n",
      "        result.put(SvgConstants.Tags.TEXT, () -> new TextSvgBranchRenderer());\n",
      "        result.put(SvgConstants.Tags.TSPAN, () -> new TextSvgTSpanBranchRenderer());\n",
      "        result.put(SvgConstants.Tags.USE, () -> new UseSvgNodeRenderer());\n",
      "        result.put(SvgConstants.Tags.TEXT_LEAF, () -> new TextLeafSvgNodeRenderer());\n",
      "\n",
      "        // TODO: DEVSIX-3923 remove normalization (.toLowerCase)\n",
      "        result.put(CLIP_PATH_LC, () -> new ClipPathSvgNodeRenderer());\n",
      "        result.put(LINEAR_GRADIENT_LC, () -> new LinearGradientSvgNodeRenderer());\n",
      "        result.put(TEXT_LEAF_LC, () -> new TextLeafSvgNodeRenderer());\n",
      "\n",
      "        mapping = Collections.unmodifiableMap(result);\n",
      "\n",
      "        // Not supported tags as of yet\n",
      "        Collection<String> ignoredTags = new HashSet<>();\n",
      "\n",
      "        ignoredTags.add(SvgConstants.Tags.A);\n",
      "        ignoredTags.add(SvgConstants.Tags.ALT_GLYPH);\n",
      "        ignoredTags.add(SvgConstants.Tags.ALT_GLYPH_DEF);\n",
      "        ignoredTags.add(SvgConstants.Tags.ALT_GLYPH_ITEM);\n",
      "\n",
      "        ignoredTags.add(SvgConstants.Tags.COLOR_PROFILE);\n",
      "\n",
      "        ignoredTags.add(SvgConstants.Tags.DESC);\n",
      "\n",
      "        ignoredTags.add(SvgConstants.Tags.FE_BLEND);\n",
      "        ignoredTags.add(SvgConstants.Tags.FE_COLOR_MATRIX);\n",
      "        ignoredTags.add(SvgConstants.Tags.FE_COMPONENT_TRANSFER);\n",
      "        ignoredTags.add(SvgConstants.Tags.FE_COMPOSITE);\n",
      "        ignoredTags.add(SvgConstants.Tags.FE_COMVOLVE_MATRIX);\n",
      "        ignoredTags.add(SvgConstants.Tags.FE_DIFFUSE_LIGHTING);\n",
      "        ignoredTags.add(SvgConstants.Tags.FE_DISPLACEMENT_MAP);\n",
      "        ignoredTags.add(SvgConstants.Tags.FE_DISTANT_LIGHT);\n",
      "        ignoredTags.add(SvgConstants.Tags.FE_FLOOD);\n",
      "        ignoredTags.add(SvgConstants.Tags.FE_FUNC_A);\n",
      "        ignoredTags.add(SvgConstants.Tags.FE_FUNC_B);\n",
      "        ignoredTags.add(SvgConstants.Tags.FE_FUNC_G);\n",
      "        ignoredTags.add(SvgConstants.Tags.FE_FUNC_R);\n",
      "        ignoredTags.add(SvgConstants.Tags.FE_GAUSSIAN_BLUR);\n",
      "        ignoredTags.add(SvgConstants.Tags.FE_IMAGE);\n",
      "        ignoredTags.add(SvgConstants.Tags.FE_MERGE);\n",
      "        ignoredTags.add(SvgConstants.Tags.FE_MERGE_NODE);\n",
      "        ignoredTags.add(SvgConstants.Tags.FE_MORPHOLOGY);\n",
      "        ignoredTags.add(SvgConstants.Tags.FE_OFFSET);\n",
      "        ignoredTags.add(SvgConstants.Tags.FE_POINT_LIGHT);\n",
      "        ignoredTags.add(SvgConstants.Tags.FE_SPECULAR_LIGHTING);\n",
      "        ignoredTags.add(SvgConstants.Tags.FE_SPOTLIGHT);\n",
      "        ignoredTags.add(SvgConstants.Tags.FE_TILE);\n",
      "        ignoredTags.add(SvgConstants.Tags.FE_TURBULENCE);\n",
      "        ignoredTags.add(SvgConstants.Tags.FILTER);\n",
      "        ignoredTags.add(SvgConstants.Tags.FONT);\n",
      "        ignoredTags.add(SvgConstants.Tags.FONT_FACE);\n",
      "        ignoredTags.add(SvgConstants.Tags.FONT_FACE_FORMAT);\n",
      "        ignoredTags.add(SvgConstants.Tags.FONT_FACE_NAME);\n",
      "        ignoredTags.add(SvgConstants.Tags.FONT_FACE_SRC);\n",
      "        ignoredTags.add(SvgConstants.Tags.FONT_FACE_URI);\n",
      "        ignoredTags.add(SvgConstants.Tags.FOREIGN_OBJECT);\n",
      "\n",
      "        ignoredTags.add(SvgConstants.Tags.GLYPH);\n",
      "        ignoredTags.add(SvgConstants.Tags.GLYPH_REF);\n",
      "\n",
      "        ignoredTags.add(SvgConstants.Tags.HKERN);\n",
      "\n",
      "        ignoredTags.add(SvgConstants.Tags.MASK);\n",
      "        ignoredTags.add(SvgConstants.Tags.METADATA);\n",
      "        ignoredTags.add(SvgConstants.Tags.MISSING_GLYPH);\n",
      "\n",
      "        ignoredTags.add(SvgConstants.Tags.RADIAL_GRADIENT);\n",
      "\n",
      "        ignoredTags.add(SvgConstants.Tags.STYLE);\n",
      "\n",
      "        ignoredTags.add(SvgConstants.Tags.TITLE);\n",
      "\n",
      "        ignored = Collections.unmodifiableCollection(ignoredTags);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets the default SVG tags mapping.\n",
      "     *\n",
      "     * @return the default SVG tags mapping\n",
      "     */\n",
      "    Map<String, ISvgNodeRendererCreator> getMapping() {\n",
      "        return mapping;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets the default ignored SVG tags.\n",
      "     * @return default ignored SVG tags\n",
      "     */\n",
      "    Collection<String> getIgnoredTags() {\n",
      "        return ignored;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Represents a function, which creates {@link ISvgNodeRenderer} instance.\n",
      "     */\n",
      "    @FunctionalInterface\n",
      "    public interface ISvgNodeRendererCreator {\n",
      "        /**\n",
      "         * Creates an {@link ISvgNodeRenderer} instance.\n",
      "         * @return {@link ISvgNodeRenderer} instance.\n",
      "         */\n",
      "        ISvgNodeRenderer create();\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.svg.renderers.factories;\n",
      "\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.type.UnitTest;\n",
      "\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(UnitTest.class)\n",
      "public class DefaultSvgNodeRendererMapperTest extends ExtendedITextTest {\n",
      "\n",
      "    private DefaultSvgNodeRendererMapper mapper = new DefaultSvgNodeRendererMapper();\n",
      "\n",
      "    @Test\n",
      "    public void mapperNotEmptyTest() {\n",
      "        boolean result = mapper.getMapping().isEmpty();\n",
      "        Assert.assertFalse(result);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void ignoredTagsNotEmptyTest() {\n",
      "        boolean result = mapper.getIgnoredTags().isEmpty();\n",
      "        Assert.assertFalse(result);\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "DefaultSvgNodeRendererMapper::::getMapping()": [
        173,
        175
      ],
      "DefaultSvgNodeRendererMapper::::getIgnoredTags()": [
        181,
        183
      ],
      "DefaultSvgNodeRendererMapper.ISvgNodeRendererCreator::::create()": [
        194,
        194
      ]
    },
    "test_method_lines_dic": {
      "DefaultSvgNodeRendererMapperTest::::mapperNotEmptyTest()": [
        37,
        41
      ],
      "DefaultSvgNodeRendererMapperTest::::ignoredTagsNotEmptyTest()": [
        43,
        47
      ]
    },
    "reverse_method_lines_dic": {
      "173": "DefaultSvgNodeRendererMapper::::getMapping()",
      "174": "DefaultSvgNodeRendererMapper::::getMapping()",
      "175": "DefaultSvgNodeRendererMapper::::getMapping()",
      "181": "DefaultSvgNodeRendererMapper::::getIgnoredTags()",
      "182": "DefaultSvgNodeRendererMapper::::getIgnoredTags()",
      "183": "DefaultSvgNodeRendererMapper::::getIgnoredTags()",
      "194": "DefaultSvgNodeRendererMapper.ISvgNodeRendererCreator::::create()"
    },
    "test_reverse_method_lines_dic": {
      "37": "DefaultSvgNodeRendererMapperTest::::mapperNotEmptyTest()",
      "38": "DefaultSvgNodeRendererMapperTest::::mapperNotEmptyTest()",
      "39": "DefaultSvgNodeRendererMapperTest::::mapperNotEmptyTest()",
      "40": "DefaultSvgNodeRendererMapperTest::::mapperNotEmptyTest()",
      "41": "DefaultSvgNodeRendererMapperTest::::mapperNotEmptyTest()",
      "43": "DefaultSvgNodeRendererMapperTest::::ignoredTagsNotEmptyTest()",
      "44": "DefaultSvgNodeRendererMapperTest::::ignoredTagsNotEmptyTest()",
      "45": "DefaultSvgNodeRendererMapperTest::::ignoredTagsNotEmptyTest()",
      "46": "DefaultSvgNodeRendererMapperTest::::ignoredTagsNotEmptyTest()",
      "47": "DefaultSvgNodeRendererMapperTest::::ignoredTagsNotEmptyTest()"
    },
    "tests": [
      {
        "test_lines": [
          37,
          41
        ],
        "covered_lines": [
          61,
          62,
          63,
          68,
          69,
          75,
          76,
          77,
          78,
          79,
          80,
          81,
          82,
          83,
          84,
          85,
          86,
          87,
          88,
          89,
          90,
          91,
          92,
          93,
          94,
          95,
          96,
          99,
          100,
          101,
          103,
          106,
          108,
          109,
          110,
          111,
          113,
          115,
          117,
          118,
          119,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          133,
          134,
          135,
          136,
          137,
          138,
          139,
          140,
          141,
          142,
          143,
          144,
          145,
          146,
          147,
          148,
          150,
          151,
          153,
          155,
          156,
          157,
          159,
          161,
          163,
          165,
          166,
          174
        ]
      },
      {
        "test_lines": [
          43,
          47
        ],
        "covered_lines": [
          61,
          62,
          63,
          68,
          69,
          75,
          76,
          77,
          78,
          79,
          80,
          81,
          82,
          83,
          84,
          85,
          86,
          87,
          88,
          89,
          90,
          91,
          92,
          93,
          94,
          95,
          96,
          99,
          100,
          101,
          103,
          106,
          108,
          109,
          110,
          111,
          113,
          115,
          117,
          118,
          119,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          133,
          134,
          135,
          136,
          137,
          138,
          139,
          140,
          141,
          142,
          143,
          144,
          145,
          146,
          147,
          148,
          150,
          151,
          153,
          155,
          156,
          157,
          159,
          161,
          163,
          165,
          166,
          182
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/svg/src/main/java/com/itextpdf/svg/renderers/factories/DefaultSvgNodeRendererFactory.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.svg.renderers.factories;\n",
      "\n",
      "import com.itextpdf.commons.utils.MessageFormatUtil;\n",
      "import com.itextpdf.styledxmlparser.node.IElementNode;\n",
      "import com.itextpdf.svg.exceptions.SvgExceptionMessageConstant;\n",
      "import com.itextpdf.svg.logs.SvgLogMessageConstant;\n",
      "import com.itextpdf.svg.exceptions.SvgProcessingException;\n",
      "import com.itextpdf.svg.renderers.INoDrawSvgNodeRenderer;\n",
      "import com.itextpdf.svg.renderers.ISvgNodeRenderer;\n",
      "import com.itextpdf.svg.renderers.factories.DefaultSvgNodeRendererMapper.ISvgNodeRendererCreator;\n",
      "import com.itextpdf.svg.renderers.impl.DefsSvgNodeRenderer;\n",
      "\n",
      "import java.util.Collection;\n",
      "import java.util.HashMap;\n",
      "import java.util.HashSet;\n",
      "import java.util.Map;\n",
      "\n",
      "import org.slf4j.Logger;\n",
      "import org.slf4j.LoggerFactory;\n",
      "\n",
      "/**\n",
      " * The default implementation of {@link ISvgNodeRendererFactory} that will be\n",
      " * used by default by the entry points defined by this project.\n",
      " */\n",
      "public class DefaultSvgNodeRendererFactory implements ISvgNodeRendererFactory {\n",
      "\n",
      "    private final Map<String, ISvgNodeRendererCreator> rendererMap = new HashMap<>();\n",
      "    private final Collection<String> ignoredTags = new HashSet<>();\n",
      "\n",
      "    /**\n",
      "     * Default constructor with default {@link ISvgNodeRenderer} creation logic.\n",
      "     */\n",
      "    public DefaultSvgNodeRendererFactory() {\n",
      "        final DefaultSvgNodeRendererMapper defaultMapper = new DefaultSvgNodeRendererMapper();\n",
      "        rendererMap.putAll(defaultMapper.getMapping());\n",
      "        ignoredTags.addAll(defaultMapper.getIgnoredTags());\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public ISvgNodeRenderer createSvgNodeRendererForTag(IElementNode tag, ISvgNodeRenderer parent) {\n",
      "        ISvgNodeRenderer result;\n",
      "\n",
      "        if (tag == null) {\n",
      "            throw new SvgProcessingException(SvgExceptionMessageConstant.TAG_PARAMETER_NULL);\n",
      "        }\n",
      "\n",
      "        final ISvgNodeRendererCreator svgNodeRendererCreator = rendererMap.get(tag.name());\n",
      "\n",
      "        if (svgNodeRendererCreator == null) {\n",
      "            Logger logger = LoggerFactory.getLogger(this.getClass());\n",
      "            logger.warn(MessageFormatUtil.format(SvgLogMessageConstant.UNMAPPED_TAG, tag.name()));\n",
      "            return null;\n",
      "        }\n",
      "\n",
      "        result = svgNodeRendererCreator.create();\n",
      "\n",
      "        // DefsSvgNodeRenderer should not have parental relationship with any renderer, it only serves as a storage\n",
      "        if (parent != null && !(result instanceof INoDrawSvgNodeRenderer) && !(parent instanceof DefsSvgNodeRenderer)) {\n",
      "            result.setParent(parent);\n",
      "        }\n",
      "\n",
      "        return result;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public boolean isTagIgnored(IElementNode tag) {\n",
      "        return ignoredTags.contains(tag.name());\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.svg.renderers.factories;\n",
      "\n",
      "import com.itextpdf.svg.exceptions.SvgExceptionMessageConstant;\n",
      "import com.itextpdf.svg.exceptions.SvgProcessingException;\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.type.UnitTest;\n",
      "\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(UnitTest.class)\n",
      "public class DefaultSvgNodeRendererFactoryTest extends ExtendedITextTest {\n",
      "\n",
      "    @Test\n",
      "    public void createSvgNodeRenderer() {\n",
      "        ISvgNodeRendererFactory nodeRendererFactory = new DefaultSvgNodeRendererFactory();\n",
      "\n",
      "        Exception e = Assert.assertThrows(SvgProcessingException.class,\n",
      "                () -> nodeRendererFactory.createSvgNodeRendererForTag(null, null)\n",
      "        );\n",
      "        Assert.assertEquals(SvgExceptionMessageConstant.TAG_PARAMETER_NULL, e.getMessage());\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {},
    "test_method_lines_dic": {
      "DefaultSvgNodeRendererFactoryTest::::createSvgNodeRenderer()": [
        37,
        45
      ]
    },
    "reverse_method_lines_dic": {},
    "test_reverse_method_lines_dic": {
      "37": "DefaultSvgNodeRendererFactoryTest::::createSvgNodeRenderer()",
      "38": "DefaultSvgNodeRendererFactoryTest::::createSvgNodeRenderer()",
      "39": "DefaultSvgNodeRendererFactoryTest::::createSvgNodeRenderer()",
      "40": "DefaultSvgNodeRendererFactoryTest::::createSvgNodeRenderer()",
      "41": "DefaultSvgNodeRendererFactoryTest::::createSvgNodeRenderer()",
      "42": "DefaultSvgNodeRendererFactoryTest::::createSvgNodeRenderer()",
      "43": "DefaultSvgNodeRendererFactoryTest::::createSvgNodeRenderer()",
      "44": "DefaultSvgNodeRendererFactoryTest::::createSvgNodeRenderer()",
      "45": "DefaultSvgNodeRendererFactoryTest::::createSvgNodeRenderer()"
    },
    "tests": [
      {
        "test_lines": [
          37,
          45
        ],
        "covered_lines": [
          49,
          50,
          55,
          56,
          57,
          58,
          59,
          65,
          66
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/svg/src/main/java/com/itextpdf/svg/utils/TransformUtils.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.svg.utils;\n",
      "\n",
      "import com.itextpdf.kernel.geom.AffineTransform;\n",
      "import com.itextpdf.styledxmlparser.css.util.CssDimensionParsingUtils;\n",
      "import com.itextpdf.styledxmlparser.css.util.CssUtils;\n",
      "import com.itextpdf.svg.exceptions.SvgExceptionMessageConstant;\n",
      "import com.itextpdf.svg.exceptions.SvgProcessingException;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "import java.util.StringTokenizer;\n",
      "\n",
      "/**\n",
      " * Utility class responsible for converting Strings containing transformation declarations\n",
      " * into AffineTransform objects.\n",
      " * <p>\n",
      " * This class only supports the transformations as described in the SVG specification:\n",
      " * - matrix\n",
      " * - rotate\n",
      " * - scale\n",
      " * - skewX\n",
      " * - skewY\n",
      " * - translate\n",
      " */\n",
      "public final class TransformUtils {\n",
      "\n",
      "    /**\n",
      "     * Keyword for matrix transformations. Accepts 6 values.\n",
      "     * <p>\n",
      "     * matrix(0 1 2 3 4 5)\n",
      "     */\n",
      "    private static final String MATRIX = \"MATRIX\";\n",
      "\n",
      "    /**\n",
      "     * Keyword for rotation transformation. Accepts either 1 or 3 values.\n",
      "     * In the case of 1 value, x and y are assumed to be the origin of the user space.\n",
      "     * <p>\n",
      "     * rotate(angle x y)\n",
      "     * rotate(angle)\n",
      "     */\n",
      "    private static final String ROTATE = \"ROTATE\";\n",
      "\n",
      "    /**\n",
      "     * Keyword for scale transformation. Accepts either 1 or 2 values.\n",
      "     * In the case of 1 value, the second value is assumed to be the same as the first one.\n",
      "     * <p>\n",
      "     * scale(x y)\n",
      "     * scale(x)\n",
      "     */\n",
      "    private static final String SCALE = \"SCALE\";\n",
      "\n",
      "    /**\n",
      "     * Keyword for skewX transformation. Accepts 1 value.\n",
      "     * <p>\n",
      "     * skewX(angle)\n",
      "     */\n",
      "    private static final String SKEWX = \"SKEWX\";\n",
      "\n",
      "    /**\n",
      "     * Keyword for skewY transformation. Accepts 1 value.\n",
      "     * <p>\n",
      "     * skewY(angle)\n",
      "     */\n",
      "    private static final String SKEWY = \"SKEWY\";\n",
      "\n",
      "    /**\n",
      "     * Keyword for translate transformation. Accepts either 1 or 2 values.\n",
      "     * In the case of 1 value, the y value is assumed to be 0.\n",
      "     * <p>\n",
      "     * translate(x y)\n",
      "     * translate(x)\n",
      "     */\n",
      "    private static final String TRANSLATE = \"TRANSLATE\";\n",
      "\n",
      "    private TransformUtils() {\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Converts a string containing a transform declaration into an AffineTransform object.\n",
      "     * This class only supports the transformations as described in the SVG specification:\n",
      "     * - matrix\n",
      "     * - translate\n",
      "     * - skewx\n",
      "     * - skewy\n",
      "     * - rotate\n",
      "     * - scale\n",
      "     *\n",
      "     * @param transform value to be parsed\n",
      "     * @return the AffineTransform object\n",
      "     */\n",
      "    public static AffineTransform parseTransform(String transform) {\n",
      "        if (transform == null) {\n",
      "            throw new SvgProcessingException(SvgExceptionMessageConstant.TRANSFORM_NULL);\n",
      "        }\n",
      "\n",
      "        if (transform.isEmpty()) {\n",
      "            throw new SvgProcessingException(SvgExceptionMessageConstant.TRANSFORM_EMPTY);\n",
      "        }\n",
      "\n",
      "        AffineTransform matrix = new AffineTransform();\n",
      "\n",
      "        List<String> listWithTransformations = splitString(transform);\n",
      "\n",
      "        for (String transformation : listWithTransformations) {\n",
      "            AffineTransform newMatrix = transformationStringToMatrix(transformation);\n",
      "\n",
      "            if (newMatrix != null) {\n",
      "                matrix.concatenate(newMatrix);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        return matrix;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * A transformation attribute can encompass multiple transformation operation (e.g. \"translate(10,20) scale(30,40)\".\n",
      "     * This method splits the original transformation string into multiple strings so that they can be handled separately.\n",
      "     *\n",
      "     * @param transform the transformation value\n",
      "     * @return a list containing strings describing a single transformation operation\n",
      "     */\n",
      "    private static List<String> splitString(String transform) {\n",
      "        ArrayList<String> list = new ArrayList<>();\n",
      "        StringTokenizer tokenizer = new StringTokenizer(transform, \")\", false);\n",
      "\n",
      "        while (tokenizer.hasMoreTokens()) {\n",
      "            String trim = tokenizer.nextToken().trim();\n",
      "\n",
      "            if (trim != null && !trim.isEmpty()) {\n",
      "                list.add(trim + \")\");\n",
      "            }\n",
      "        }\n",
      "\n",
      "        return list;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * This method decides which transformation operation the given transformation strings maps onto.\n",
      "     *\n",
      "     * @param transformation string containing a transformation operation\n",
      "     * @return the mapped AffineTransform object\n",
      "     */\n",
      "    private static AffineTransform transformationStringToMatrix(String transformation) {\n",
      "        String name = getNameFromString(transformation).toUpperCase();\n",
      "\n",
      "        if (name.isEmpty()) {\n",
      "            throw new SvgProcessingException(SvgExceptionMessageConstant.INVALID_TRANSFORM_DECLARATION);\n",
      "        }\n",
      "        switch (name) {\n",
      "            case MATRIX:\n",
      "                return createMatrixTransformation(getValuesFromTransformationString(transformation));\n",
      "            case TRANSLATE:\n",
      "                return createTranslateTransformation(getValuesFromTransformationString(transformation));\n",
      "            case SCALE:\n",
      "                return createScaleTransformation(getValuesFromTransformationString(transformation));\n",
      "            case ROTATE:\n",
      "                return createRotationTransformation(getValuesFromTransformationString(transformation));\n",
      "            case SKEWX:\n",
      "                return createSkewXTransformation(getValuesFromTransformationString(transformation));\n",
      "            case SKEWY:\n",
      "                return createSkewYTransformation(getValuesFromTransformationString(transformation));\n",
      "            default:\n",
      "                throw new SvgProcessingException(SvgExceptionMessageConstant.UNKNOWN_TRANSFORMATION_TYPE);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates a skewY transformation.\n",
      "     *\n",
      "     * @param values values of the transformation\n",
      "     * @return AffineTransform for the skew operation\n",
      "     */\n",
      "    private static AffineTransform createSkewYTransformation(List<String> values) {\n",
      "        if (values.size() != 1) {\n",
      "            throw new SvgProcessingException(SvgExceptionMessageConstant.TRANSFORM_INCORRECT_NUMBER_OF_VALUES);\n",
      "        }\n",
      "\n",
      "        double tan = Math.tan(Math.toRadians((float) CssDimensionParsingUtils.parseFloat(values.get(0))));\n",
      "\n",
      "        //Differs from the notation in the PDF-spec for skews\n",
      "        return new AffineTransform(1, tan, 0, 1, 0, 0);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates a skewX transformation.\n",
      "     *\n",
      "     * @param values values of the transformation\n",
      "     * @return AffineTransform for the skew operation\n",
      "     */\n",
      "    private static AffineTransform createSkewXTransformation(List<String> values) {\n",
      "        if (values.size() != 1) {\n",
      "            throw new SvgProcessingException(SvgExceptionMessageConstant.TRANSFORM_INCORRECT_NUMBER_OF_VALUES);\n",
      "        }\n",
      "\n",
      "        double tan = Math.tan(Math.toRadians((float) CssDimensionParsingUtils.parseFloat(values.get(0))));\n",
      "\n",
      "        //Differs from the notation in the PDF-spec for skews\n",
      "        return new AffineTransform(1, 0, tan, 1, 0, 0);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates a rotate transformation.\n",
      "     *\n",
      "     * @param values values of the transformation\n",
      "     * @return AffineTransform for the rotate operation\n",
      "     */\n",
      "    private static AffineTransform createRotationTransformation(List<String> values) {\n",
      "        if (values.size() != 1 && values.size() != 3) {\n",
      "            throw new SvgProcessingException(SvgExceptionMessageConstant.TRANSFORM_INCORRECT_NUMBER_OF_VALUES);\n",
      "        }\n",
      "\n",
      "        double angle = Math.toRadians((float) CssDimensionParsingUtils.parseFloat(values.get(0)));\n",
      "\n",
      "        if (values.size() == 3) {\n",
      "            float centerX = CssDimensionParsingUtils.parseAbsoluteLength(values.get(1));\n",
      "            float centerY = CssDimensionParsingUtils.parseAbsoluteLength(values.get(2));\n",
      "            return AffineTransform.getRotateInstance(angle, centerX, centerY);\n",
      "        }\n",
      "\n",
      "        return AffineTransform.getRotateInstance(angle);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates a scale transformation.\n",
      "     *\n",
      "     * @param values values of the transformation\n",
      "     * @return AffineTransform for the scale operation\n",
      "     */\n",
      "    private static AffineTransform createScaleTransformation(List<String> values) {\n",
      "        if (values.size() == 0 || values.size() > 2) {\n",
      "            throw new SvgProcessingException(SvgExceptionMessageConstant.TRANSFORM_INCORRECT_NUMBER_OF_VALUES);\n",
      "        }\n",
      "\n",
      "        float scaleX = CssDimensionParsingUtils.parseRelativeValue(values.get(0), 1);\n",
      "        float scaleY = values.size() == 2 ? CssDimensionParsingUtils.parseRelativeValue(values.get(1), 1) : scaleX;\n",
      "\n",
      "        return AffineTransform.getScaleInstance(scaleX, scaleY);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates a translate transformation.\n",
      "     *\n",
      "     * @param values values of the transformation\n",
      "     * @return AffineTransform for the translate operation\n",
      "     */\n",
      "    private static AffineTransform createTranslateTransformation(List<String> values) {\n",
      "        if (values.size() == 0 || values.size() > 2) {\n",
      "            throw new SvgProcessingException(SvgExceptionMessageConstant.TRANSFORM_INCORRECT_NUMBER_OF_VALUES);\n",
      "        }\n",
      "\n",
      "        float translateX = CssDimensionParsingUtils.parseAbsoluteLength(values.get(0));\n",
      "        float translateY = values.size() == 2 ? CssDimensionParsingUtils.parseAbsoluteLength(values.get(1)) : 0;\n",
      "\n",
      "        return AffineTransform.getTranslateInstance(translateX, translateY);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates a matrix transformation.\n",
      "     *\n",
      "     * @param values values of the transformation\n",
      "     * @return AffineTransform for the matrix keyword\n",
      "     */\n",
      "    private static AffineTransform createMatrixTransformation(List<String> values) {\n",
      "        if (values.size() != 6) {\n",
      "            throw new SvgProcessingException(SvgExceptionMessageConstant.TRANSFORM_INCORRECT_NUMBER_OF_VALUES);\n",
      "        }\n",
      "\n",
      "        float a = (float) Float.parseFloat(values.get(0));\n",
      "        float b = (float) Float.parseFloat(values.get(1));\n",
      "        float c = (float) Float.parseFloat(values.get(2));\n",
      "        float d = (float) Float.parseFloat(values.get(3));\n",
      "        float e = CssDimensionParsingUtils.parseAbsoluteLength(values.get(4));\n",
      "        float f = CssDimensionParsingUtils.parseAbsoluteLength(values.get(5));\n",
      "\n",
      "        return new AffineTransform(a, b, c, d, e, f);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * This method extracts the transformation name given a transformation.\n",
      "     *\n",
      "     * @param transformation the transformation\n",
      "     * @return the name of the transformation\n",
      "     */\n",
      "    private static String getNameFromString(String transformation) {\n",
      "        int indexOfParenthesis = transformation.indexOf(\"(\");\n",
      "\n",
      "        if (indexOfParenthesis == -1) {\n",
      "            throw new SvgProcessingException(SvgExceptionMessageConstant.INVALID_TRANSFORM_DECLARATION);\n",
      "        }\n",
      "\n",
      "        return transformation.substring(0, transformation.indexOf(\"(\"));\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * This method extracts the values from a transformation.\n",
      "     *\n",
      "     * @param transformation the transformation\n",
      "     * @return values of the transformation\n",
      "     */\n",
      "    private static List<String> getValuesFromTransformationString(String transformation) {\n",
      "        String numbers = transformation.substring(transformation.indexOf('(') + 1, transformation.indexOf(')'));\n",
      "\n",
      "        return SvgCssUtils.splitValueList(numbers);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.svg.utils;\n",
      "\n",
      "import com.itextpdf.kernel.geom.AffineTransform;\n",
      "import com.itextpdf.svg.exceptions.SvgExceptionMessageConstant;\n",
      "import com.itextpdf.svg.exceptions.SvgProcessingException;\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.type.UnitTest;\n",
      "\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(UnitTest.class)\n",
      "public class TransformUtilsTest extends ExtendedITextTest {\n",
      "\n",
      "    @Test\n",
      "    public void nullStringTest() {\n",
      "        Exception e = Assert.assertThrows(SvgProcessingException.class,\n",
      "                () -> TransformUtils.parseTransform(null)\n",
      "        );\n",
      "        Assert.assertEquals(SvgExceptionMessageConstant.TRANSFORM_NULL, e.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void emptyTest() {\n",
      "        Exception e = Assert.assertThrows(SvgProcessingException.class,\n",
      "                () -> TransformUtils.parseTransform(\"\")\n",
      "        );\n",
      "        Assert.assertEquals(SvgExceptionMessageConstant.TRANSFORM_EMPTY, e.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void noTransformationTest() {\n",
      "        Exception e = Assert.assertThrows(SvgProcessingException.class,\n",
      "                () -> TransformUtils.parseTransform(\"Lorem ipsum\")\n",
      "        );\n",
      "        Assert.assertEquals(SvgExceptionMessageConstant.INVALID_TRANSFORM_DECLARATION, e.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void wrongTypeOfValuesTest() {\n",
      "        Assert.assertThrows(NumberFormatException.class, () -> TransformUtils.parseTransform(\"matrix(a b c d e f)\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void tooManyParenthesesTest() {\n",
      "        Exception e = Assert.assertThrows(SvgProcessingException.class,\n",
      "                () -> TransformUtils.parseTransform(\"(((())))\")\n",
      "        );\n",
      "        Assert.assertEquals(SvgExceptionMessageConstant.INVALID_TRANSFORM_DECLARATION, e.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void noClosingParenthesisTest() {\n",
      "        AffineTransform expected = new AffineTransform(0d, 0d, 0d, 0d, 0d, 0d);\n",
      "        AffineTransform actual = TransformUtils.parseTransform(\"matrix(0 0 0 0 0 0\");\n",
      "\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void mixedCaseTest() {\n",
      "        AffineTransform expected = new AffineTransform(0d, 0d, 0d, 0d, 0d, 0d);\n",
      "        AffineTransform actual = TransformUtils.parseTransform(\"maTRix(0 0 0 0 0 0)\");\n",
      "\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void upperCaseTest() {\n",
      "        AffineTransform expected = new AffineTransform(0d, 0d, 0d, 0d, 0d, 0d);\n",
      "        AffineTransform actual = TransformUtils.parseTransform(\"MATRIX(0 0 0 0 0 0)\");\n",
      "\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void whitespaceTest() {\n",
      "        AffineTransform expected = new AffineTransform(0d, 0d, 0d, 0d, 0d, 0d);\n",
      "        AffineTransform actual = TransformUtils.parseTransform(\"matrix(0 0 0 0 0 0)\");\n",
      "\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void commasWithWhitespaceTest() {\n",
      "        AffineTransform expected = new AffineTransform(10d,20d,30d,40d,37.5d, 45d);\n",
      "        AffineTransform actual = TransformUtils.parseTransform(\"matrix(10, 20, 30, 40, 50, 60)\");\n",
      "\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void commasTest() {\n",
      "        AffineTransform expected = new AffineTransform(10d,20d,30d,40d,37.5d, 45d);\n",
      "        AffineTransform actual = TransformUtils.parseTransform(\"matrix(10,20,30,40,50,60)\");\n",
      "\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void combinedTransformTest() {\n",
      "        AffineTransform actual = TransformUtils.parseTransform(\"translate(40,20) scale(3)\");\n",
      "        AffineTransform expected = new AffineTransform(3.0,0d,0d,3.0d,30d,15d);\n",
      "\n",
      "        Assert.assertEquals(actual, expected);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void combinedReverseTransformTest() {\n",
      "        AffineTransform actual = TransformUtils.parseTransform(\"scale(3) translate(40,20)\");\n",
      "        AffineTransform expected = new AffineTransform(3d,0d,0d,3d,90d,45d);\n",
      "\n",
      "        Assert.assertEquals(actual, expected);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void doubleTransformationTest() {\n",
      "        AffineTransform expected = new AffineTransform(9d, 0d, 0d, 9d, 0d, 0d);\n",
      "        AffineTransform actual = TransformUtils.parseTransform(\"scale(3) scale(3)\");\n",
      "\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void oppositeTransformationSequenceTest() {\n",
      "        AffineTransform expected = new AffineTransform(1,0,0,1,0,0);\n",
      "        AffineTransform actual = TransformUtils.parseTransform(\"translate(10 10) translate(-10 -10)\");\n",
      "\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void unknownTransformationTest() {\n",
      "        Exception e = Assert.assertThrows(SvgProcessingException.class,\n",
      "                () -> TransformUtils.parseTransform(\"unknown(1 2 3)\")\n",
      "        );\n",
      "        Assert.assertEquals(SvgExceptionMessageConstant.UNKNOWN_TRANSFORMATION_TYPE, e.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void trailingWhiteSpace() {\n",
      "        AffineTransform actual = TransformUtils.parseTransform(\"translate(1) translate(2) \");\n",
      "        AffineTransform expected = AffineTransform.getTranslateInstance(2.25, 0);\n",
      "\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void leadingWhiteSpace() {\n",
      "        AffineTransform actual = TransformUtils.parseTransform(\"   translate(1) translate(2)\");\n",
      "        AffineTransform expected = AffineTransform.getTranslateInstance(2.25, 0);\n",
      "\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void middleWhiteSpace() {\n",
      "        AffineTransform actual = TransformUtils.parseTransform(\"translate(1)     translate(2)\");\n",
      "        AffineTransform expected = AffineTransform.getTranslateInstance(2.25, 0);\n",
      "\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void mixedWhiteSpace() {\n",
      "        AffineTransform actual = TransformUtils.parseTransform(\"   translate(1)     translate(2)   \");\n",
      "        AffineTransform expected = AffineTransform.getTranslateInstance(2.25, 0);\n",
      "\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "TransformUtils::::parseTransform(java.lang.String)": [
        113,
        135
      ],
      "TransformUtils::::splitString(java.lang.String)": [
        144,
        157
      ],
      "TransformUtils::::transformationStringToMatrix(java.lang.String)": [
        165,
        187
      ],
      "TransformUtils::::createSkewYTransformation(java.util.List<java.lang.String>)": [
        195,
        204
      ],
      "TransformUtils::::createSkewXTransformation(java.util.List<java.lang.String>)": [
        212,
        221
      ],
      "TransformUtils::::createRotationTransformation(java.util.List<java.lang.String>)": [
        229,
        243
      ],
      "TransformUtils::::createScaleTransformation(java.util.List<java.lang.String>)": [
        251,
        260
      ],
      "TransformUtils::::createTranslateTransformation(java.util.List<java.lang.String>)": [
        268,
        277
      ],
      "TransformUtils::::createMatrixTransformation(java.util.List<java.lang.String>)": [
        285,
        298
      ],
      "TransformUtils::::getNameFromString(java.lang.String)": [
        306,
        314
      ],
      "TransformUtils::::getValuesFromTransformationString(java.lang.String)": [
        322,
        326
      ]
    },
    "test_method_lines_dic": {
      "TransformUtilsTest::::nullStringTest()": [
        38,
        44
      ],
      "TransformUtilsTest::::emptyTest()": [
        46,
        52
      ],
      "TransformUtilsTest::::noTransformationTest()": [
        54,
        60
      ],
      "TransformUtilsTest::::wrongTypeOfValuesTest()": [
        62,
        65
      ],
      "TransformUtilsTest::::tooManyParenthesesTest()": [
        67,
        73
      ],
      "TransformUtilsTest::::noClosingParenthesisTest()": [
        75,
        81
      ],
      "TransformUtilsTest::::mixedCaseTest()": [
        83,
        89
      ],
      "TransformUtilsTest::::upperCaseTest()": [
        91,
        97
      ],
      "TransformUtilsTest::::whitespaceTest()": [
        99,
        105
      ],
      "TransformUtilsTest::::commasWithWhitespaceTest()": [
        107,
        113
      ],
      "TransformUtilsTest::::commasTest()": [
        115,
        121
      ],
      "TransformUtilsTest::::combinedTransformTest()": [
        123,
        129
      ],
      "TransformUtilsTest::::combinedReverseTransformTest()": [
        131,
        137
      ],
      "TransformUtilsTest::::doubleTransformationTest()": [
        139,
        145
      ],
      "TransformUtilsTest::::oppositeTransformationSequenceTest()": [
        147,
        153
      ],
      "TransformUtilsTest::::unknownTransformationTest()": [
        155,
        161
      ],
      "TransformUtilsTest::::trailingWhiteSpace()": [
        163,
        169
      ],
      "TransformUtilsTest::::leadingWhiteSpace()": [
        171,
        177
      ],
      "TransformUtilsTest::::middleWhiteSpace()": [
        179,
        185
      ],
      "TransformUtilsTest::::mixedWhiteSpace()": [
        187,
        193
      ]
    },
    "reverse_method_lines_dic": {
      "113": "TransformUtils::::parseTransform(java.lang.String)",
      "114": "TransformUtils::::parseTransform(java.lang.String)",
      "115": "TransformUtils::::parseTransform(java.lang.String)",
      "116": "TransformUtils::::parseTransform(java.lang.String)",
      "117": "TransformUtils::::parseTransform(java.lang.String)",
      "118": "TransformUtils::::parseTransform(java.lang.String)",
      "119": "TransformUtils::::parseTransform(java.lang.String)",
      "120": "TransformUtils::::parseTransform(java.lang.String)",
      "121": "TransformUtils::::parseTransform(java.lang.String)",
      "122": "TransformUtils::::parseTransform(java.lang.String)",
      "123": "TransformUtils::::parseTransform(java.lang.String)",
      "124": "TransformUtils::::parseTransform(java.lang.String)",
      "125": "TransformUtils::::parseTransform(java.lang.String)",
      "126": "TransformUtils::::parseTransform(java.lang.String)",
      "127": "TransformUtils::::parseTransform(java.lang.String)",
      "128": "TransformUtils::::parseTransform(java.lang.String)",
      "129": "TransformUtils::::parseTransform(java.lang.String)",
      "130": "TransformUtils::::parseTransform(java.lang.String)",
      "131": "TransformUtils::::parseTransform(java.lang.String)",
      "132": "TransformUtils::::parseTransform(java.lang.String)",
      "133": "TransformUtils::::parseTransform(java.lang.String)",
      "134": "TransformUtils::::parseTransform(java.lang.String)",
      "135": "TransformUtils::::parseTransform(java.lang.String)",
      "144": "TransformUtils::::splitString(java.lang.String)",
      "145": "TransformUtils::::splitString(java.lang.String)",
      "146": "TransformUtils::::splitString(java.lang.String)",
      "147": "TransformUtils::::splitString(java.lang.String)",
      "148": "TransformUtils::::splitString(java.lang.String)",
      "149": "TransformUtils::::splitString(java.lang.String)",
      "150": "TransformUtils::::splitString(java.lang.String)",
      "151": "TransformUtils::::splitString(java.lang.String)",
      "152": "TransformUtils::::splitString(java.lang.String)",
      "153": "TransformUtils::::splitString(java.lang.String)",
      "154": "TransformUtils::::splitString(java.lang.String)",
      "155": "TransformUtils::::splitString(java.lang.String)",
      "156": "TransformUtils::::splitString(java.lang.String)",
      "157": "TransformUtils::::splitString(java.lang.String)",
      "165": "TransformUtils::::transformationStringToMatrix(java.lang.String)",
      "166": "TransformUtils::::transformationStringToMatrix(java.lang.String)",
      "167": "TransformUtils::::transformationStringToMatrix(java.lang.String)",
      "168": "TransformUtils::::transformationStringToMatrix(java.lang.String)",
      "169": "TransformUtils::::transformationStringToMatrix(java.lang.String)",
      "170": "TransformUtils::::transformationStringToMatrix(java.lang.String)",
      "171": "TransformUtils::::transformationStringToMatrix(java.lang.String)",
      "172": "TransformUtils::::transformationStringToMatrix(java.lang.String)",
      "173": "TransformUtils::::transformationStringToMatrix(java.lang.String)",
      "174": "TransformUtils::::transformationStringToMatrix(java.lang.String)",
      "175": "TransformUtils::::transformationStringToMatrix(java.lang.String)",
      "176": "TransformUtils::::transformationStringToMatrix(java.lang.String)",
      "177": "TransformUtils::::transformationStringToMatrix(java.lang.String)",
      "178": "TransformUtils::::transformationStringToMatrix(java.lang.String)",
      "179": "TransformUtils::::transformationStringToMatrix(java.lang.String)",
      "180": "TransformUtils::::transformationStringToMatrix(java.lang.String)",
      "181": "TransformUtils::::transformationStringToMatrix(java.lang.String)",
      "182": "TransformUtils::::transformationStringToMatrix(java.lang.String)",
      "183": "TransformUtils::::transformationStringToMatrix(java.lang.String)",
      "184": "TransformUtils::::transformationStringToMatrix(java.lang.String)",
      "185": "TransformUtils::::transformationStringToMatrix(java.lang.String)",
      "186": "TransformUtils::::transformationStringToMatrix(java.lang.String)",
      "187": "TransformUtils::::transformationStringToMatrix(java.lang.String)",
      "195": "TransformUtils::::createSkewYTransformation(java.util.List<java.lang.String>)",
      "196": "TransformUtils::::createSkewYTransformation(java.util.List<java.lang.String>)",
      "197": "TransformUtils::::createSkewYTransformation(java.util.List<java.lang.String>)",
      "198": "TransformUtils::::createSkewYTransformation(java.util.List<java.lang.String>)",
      "199": "TransformUtils::::createSkewYTransformation(java.util.List<java.lang.String>)",
      "200": "TransformUtils::::createSkewYTransformation(java.util.List<java.lang.String>)",
      "201": "TransformUtils::::createSkewYTransformation(java.util.List<java.lang.String>)",
      "202": "TransformUtils::::createSkewYTransformation(java.util.List<java.lang.String>)",
      "203": "TransformUtils::::createSkewYTransformation(java.util.List<java.lang.String>)",
      "204": "TransformUtils::::createSkewYTransformation(java.util.List<java.lang.String>)",
      "212": "TransformUtils::::createSkewXTransformation(java.util.List<java.lang.String>)",
      "213": "TransformUtils::::createSkewXTransformation(java.util.List<java.lang.String>)",
      "214": "TransformUtils::::createSkewXTransformation(java.util.List<java.lang.String>)",
      "215": "TransformUtils::::createSkewXTransformation(java.util.List<java.lang.String>)",
      "216": "TransformUtils::::createSkewXTransformation(java.util.List<java.lang.String>)",
      "217": "TransformUtils::::createSkewXTransformation(java.util.List<java.lang.String>)",
      "218": "TransformUtils::::createSkewXTransformation(java.util.List<java.lang.String>)",
      "219": "TransformUtils::::createSkewXTransformation(java.util.List<java.lang.String>)",
      "220": "TransformUtils::::createSkewXTransformation(java.util.List<java.lang.String>)",
      "221": "TransformUtils::::createSkewXTransformation(java.util.List<java.lang.String>)",
      "229": "TransformUtils::::createRotationTransformation(java.util.List<java.lang.String>)",
      "230": "TransformUtils::::createRotationTransformation(java.util.List<java.lang.String>)",
      "231": "TransformUtils::::createRotationTransformation(java.util.List<java.lang.String>)",
      "232": "TransformUtils::::createRotationTransformation(java.util.List<java.lang.String>)",
      "233": "TransformUtils::::createRotationTransformation(java.util.List<java.lang.String>)",
      "234": "TransformUtils::::createRotationTransformation(java.util.List<java.lang.String>)",
      "235": "TransformUtils::::createRotationTransformation(java.util.List<java.lang.String>)",
      "236": "TransformUtils::::createRotationTransformation(java.util.List<java.lang.String>)",
      "237": "TransformUtils::::createRotationTransformation(java.util.List<java.lang.String>)",
      "238": "TransformUtils::::createRotationTransformation(java.util.List<java.lang.String>)",
      "239": "TransformUtils::::createRotationTransformation(java.util.List<java.lang.String>)",
      "240": "TransformUtils::::createRotationTransformation(java.util.List<java.lang.String>)",
      "241": "TransformUtils::::createRotationTransformation(java.util.List<java.lang.String>)",
      "242": "TransformUtils::::createRotationTransformation(java.util.List<java.lang.String>)",
      "243": "TransformUtils::::createRotationTransformation(java.util.List<java.lang.String>)",
      "251": "TransformUtils::::createScaleTransformation(java.util.List<java.lang.String>)",
      "252": "TransformUtils::::createScaleTransformation(java.util.List<java.lang.String>)",
      "253": "TransformUtils::::createScaleTransformation(java.util.List<java.lang.String>)",
      "254": "TransformUtils::::createScaleTransformation(java.util.List<java.lang.String>)",
      "255": "TransformUtils::::createScaleTransformation(java.util.List<java.lang.String>)",
      "256": "TransformUtils::::createScaleTransformation(java.util.List<java.lang.String>)",
      "257": "TransformUtils::::createScaleTransformation(java.util.List<java.lang.String>)",
      "258": "TransformUtils::::createScaleTransformation(java.util.List<java.lang.String>)",
      "259": "TransformUtils::::createScaleTransformation(java.util.List<java.lang.String>)",
      "260": "TransformUtils::::createScaleTransformation(java.util.List<java.lang.String>)",
      "268": "TransformUtils::::createTranslateTransformation(java.util.List<java.lang.String>)",
      "269": "TransformUtils::::createTranslateTransformation(java.util.List<java.lang.String>)",
      "270": "TransformUtils::::createTranslateTransformation(java.util.List<java.lang.String>)",
      "271": "TransformUtils::::createTranslateTransformation(java.util.List<java.lang.String>)",
      "272": "TransformUtils::::createTranslateTransformation(java.util.List<java.lang.String>)",
      "273": "TransformUtils::::createTranslateTransformation(java.util.List<java.lang.String>)",
      "274": "TransformUtils::::createTranslateTransformation(java.util.List<java.lang.String>)",
      "275": "TransformUtils::::createTranslateTransformation(java.util.List<java.lang.String>)",
      "276": "TransformUtils::::createTranslateTransformation(java.util.List<java.lang.String>)",
      "277": "TransformUtils::::createTranslateTransformation(java.util.List<java.lang.String>)",
      "285": "TransformUtils::::createMatrixTransformation(java.util.List<java.lang.String>)",
      "286": "TransformUtils::::createMatrixTransformation(java.util.List<java.lang.String>)",
      "287": "TransformUtils::::createMatrixTransformation(java.util.List<java.lang.String>)",
      "288": "TransformUtils::::createMatrixTransformation(java.util.List<java.lang.String>)",
      "289": "TransformUtils::::createMatrixTransformation(java.util.List<java.lang.String>)",
      "290": "TransformUtils::::createMatrixTransformation(java.util.List<java.lang.String>)",
      "291": "TransformUtils::::createMatrixTransformation(java.util.List<java.lang.String>)",
      "292": "TransformUtils::::createMatrixTransformation(java.util.List<java.lang.String>)",
      "293": "TransformUtils::::createMatrixTransformation(java.util.List<java.lang.String>)",
      "294": "TransformUtils::::createMatrixTransformation(java.util.List<java.lang.String>)",
      "295": "TransformUtils::::createMatrixTransformation(java.util.List<java.lang.String>)",
      "296": "TransformUtils::::createMatrixTransformation(java.util.List<java.lang.String>)",
      "297": "TransformUtils::::createMatrixTransformation(java.util.List<java.lang.String>)",
      "298": "TransformUtils::::createMatrixTransformation(java.util.List<java.lang.String>)",
      "306": "TransformUtils::::getNameFromString(java.lang.String)",
      "307": "TransformUtils::::getNameFromString(java.lang.String)",
      "308": "TransformUtils::::getNameFromString(java.lang.String)",
      "309": "TransformUtils::::getNameFromString(java.lang.String)",
      "310": "TransformUtils::::getNameFromString(java.lang.String)",
      "311": "TransformUtils::::getNameFromString(java.lang.String)",
      "312": "TransformUtils::::getNameFromString(java.lang.String)",
      "313": "TransformUtils::::getNameFromString(java.lang.String)",
      "314": "TransformUtils::::getNameFromString(java.lang.String)",
      "322": "TransformUtils::::getValuesFromTransformationString(java.lang.String)",
      "323": "TransformUtils::::getValuesFromTransformationString(java.lang.String)",
      "324": "TransformUtils::::getValuesFromTransformationString(java.lang.String)",
      "325": "TransformUtils::::getValuesFromTransformationString(java.lang.String)",
      "326": "TransformUtils::::getValuesFromTransformationString(java.lang.String)"
    },
    "test_reverse_method_lines_dic": {
      "38": "TransformUtilsTest::::nullStringTest()",
      "39": "TransformUtilsTest::::nullStringTest()",
      "40": "TransformUtilsTest::::nullStringTest()",
      "41": "TransformUtilsTest::::nullStringTest()",
      "42": "TransformUtilsTest::::nullStringTest()",
      "43": "TransformUtilsTest::::nullStringTest()",
      "44": "TransformUtilsTest::::nullStringTest()",
      "46": "TransformUtilsTest::::emptyTest()",
      "47": "TransformUtilsTest::::emptyTest()",
      "48": "TransformUtilsTest::::emptyTest()",
      "49": "TransformUtilsTest::::emptyTest()",
      "50": "TransformUtilsTest::::emptyTest()",
      "51": "TransformUtilsTest::::emptyTest()",
      "52": "TransformUtilsTest::::emptyTest()",
      "54": "TransformUtilsTest::::noTransformationTest()",
      "55": "TransformUtilsTest::::noTransformationTest()",
      "56": "TransformUtilsTest::::noTransformationTest()",
      "57": "TransformUtilsTest::::noTransformationTest()",
      "58": "TransformUtilsTest::::noTransformationTest()",
      "59": "TransformUtilsTest::::noTransformationTest()",
      "60": "TransformUtilsTest::::noTransformationTest()",
      "62": "TransformUtilsTest::::wrongTypeOfValuesTest()",
      "63": "TransformUtilsTest::::wrongTypeOfValuesTest()",
      "64": "TransformUtilsTest::::wrongTypeOfValuesTest()",
      "65": "TransformUtilsTest::::wrongTypeOfValuesTest()",
      "67": "TransformUtilsTest::::tooManyParenthesesTest()",
      "68": "TransformUtilsTest::::tooManyParenthesesTest()",
      "69": "TransformUtilsTest::::tooManyParenthesesTest()",
      "70": "TransformUtilsTest::::tooManyParenthesesTest()",
      "71": "TransformUtilsTest::::tooManyParenthesesTest()",
      "72": "TransformUtilsTest::::tooManyParenthesesTest()",
      "73": "TransformUtilsTest::::tooManyParenthesesTest()",
      "75": "TransformUtilsTest::::noClosingParenthesisTest()",
      "76": "TransformUtilsTest::::noClosingParenthesisTest()",
      "77": "TransformUtilsTest::::noClosingParenthesisTest()",
      "78": "TransformUtilsTest::::noClosingParenthesisTest()",
      "79": "TransformUtilsTest::::noClosingParenthesisTest()",
      "80": "TransformUtilsTest::::noClosingParenthesisTest()",
      "81": "TransformUtilsTest::::noClosingParenthesisTest()",
      "83": "TransformUtilsTest::::mixedCaseTest()",
      "84": "TransformUtilsTest::::mixedCaseTest()",
      "85": "TransformUtilsTest::::mixedCaseTest()",
      "86": "TransformUtilsTest::::mixedCaseTest()",
      "87": "TransformUtilsTest::::mixedCaseTest()",
      "88": "TransformUtilsTest::::mixedCaseTest()",
      "89": "TransformUtilsTest::::mixedCaseTest()",
      "91": "TransformUtilsTest::::upperCaseTest()",
      "92": "TransformUtilsTest::::upperCaseTest()",
      "93": "TransformUtilsTest::::upperCaseTest()",
      "94": "TransformUtilsTest::::upperCaseTest()",
      "95": "TransformUtilsTest::::upperCaseTest()",
      "96": "TransformUtilsTest::::upperCaseTest()",
      "97": "TransformUtilsTest::::upperCaseTest()",
      "99": "TransformUtilsTest::::whitespaceTest()",
      "100": "TransformUtilsTest::::whitespaceTest()",
      "101": "TransformUtilsTest::::whitespaceTest()",
      "102": "TransformUtilsTest::::whitespaceTest()",
      "103": "TransformUtilsTest::::whitespaceTest()",
      "104": "TransformUtilsTest::::whitespaceTest()",
      "105": "TransformUtilsTest::::whitespaceTest()",
      "107": "TransformUtilsTest::::commasWithWhitespaceTest()",
      "108": "TransformUtilsTest::::commasWithWhitespaceTest()",
      "109": "TransformUtilsTest::::commasWithWhitespaceTest()",
      "110": "TransformUtilsTest::::commasWithWhitespaceTest()",
      "111": "TransformUtilsTest::::commasWithWhitespaceTest()",
      "112": "TransformUtilsTest::::commasWithWhitespaceTest()",
      "113": "TransformUtilsTest::::commasWithWhitespaceTest()",
      "115": "TransformUtilsTest::::commasTest()",
      "116": "TransformUtilsTest::::commasTest()",
      "117": "TransformUtilsTest::::commasTest()",
      "118": "TransformUtilsTest::::commasTest()",
      "119": "TransformUtilsTest::::commasTest()",
      "120": "TransformUtilsTest::::commasTest()",
      "121": "TransformUtilsTest::::commasTest()",
      "123": "TransformUtilsTest::::combinedTransformTest()",
      "124": "TransformUtilsTest::::combinedTransformTest()",
      "125": "TransformUtilsTest::::combinedTransformTest()",
      "126": "TransformUtilsTest::::combinedTransformTest()",
      "127": "TransformUtilsTest::::combinedTransformTest()",
      "128": "TransformUtilsTest::::combinedTransformTest()",
      "129": "TransformUtilsTest::::combinedTransformTest()",
      "131": "TransformUtilsTest::::combinedReverseTransformTest()",
      "132": "TransformUtilsTest::::combinedReverseTransformTest()",
      "133": "TransformUtilsTest::::combinedReverseTransformTest()",
      "134": "TransformUtilsTest::::combinedReverseTransformTest()",
      "135": "TransformUtilsTest::::combinedReverseTransformTest()",
      "136": "TransformUtilsTest::::combinedReverseTransformTest()",
      "137": "TransformUtilsTest::::combinedReverseTransformTest()",
      "139": "TransformUtilsTest::::doubleTransformationTest()",
      "140": "TransformUtilsTest::::doubleTransformationTest()",
      "141": "TransformUtilsTest::::doubleTransformationTest()",
      "142": "TransformUtilsTest::::doubleTransformationTest()",
      "143": "TransformUtilsTest::::doubleTransformationTest()",
      "144": "TransformUtilsTest::::doubleTransformationTest()",
      "145": "TransformUtilsTest::::doubleTransformationTest()",
      "147": "TransformUtilsTest::::oppositeTransformationSequenceTest()",
      "148": "TransformUtilsTest::::oppositeTransformationSequenceTest()",
      "149": "TransformUtilsTest::::oppositeTransformationSequenceTest()",
      "150": "TransformUtilsTest::::oppositeTransformationSequenceTest()",
      "151": "TransformUtilsTest::::oppositeTransformationSequenceTest()",
      "152": "TransformUtilsTest::::oppositeTransformationSequenceTest()",
      "153": "TransformUtilsTest::::oppositeTransformationSequenceTest()",
      "155": "TransformUtilsTest::::unknownTransformationTest()",
      "156": "TransformUtilsTest::::unknownTransformationTest()",
      "157": "TransformUtilsTest::::unknownTransformationTest()",
      "158": "TransformUtilsTest::::unknownTransformationTest()",
      "159": "TransformUtilsTest::::unknownTransformationTest()",
      "160": "TransformUtilsTest::::unknownTransformationTest()",
      "161": "TransformUtilsTest::::unknownTransformationTest()",
      "163": "TransformUtilsTest::::trailingWhiteSpace()",
      "164": "TransformUtilsTest::::trailingWhiteSpace()",
      "165": "TransformUtilsTest::::trailingWhiteSpace()",
      "166": "TransformUtilsTest::::trailingWhiteSpace()",
      "167": "TransformUtilsTest::::trailingWhiteSpace()",
      "168": "TransformUtilsTest::::trailingWhiteSpace()",
      "169": "TransformUtilsTest::::trailingWhiteSpace()",
      "171": "TransformUtilsTest::::leadingWhiteSpace()",
      "172": "TransformUtilsTest::::leadingWhiteSpace()",
      "173": "TransformUtilsTest::::leadingWhiteSpace()",
      "174": "TransformUtilsTest::::leadingWhiteSpace()",
      "175": "TransformUtilsTest::::leadingWhiteSpace()",
      "176": "TransformUtilsTest::::leadingWhiteSpace()",
      "177": "TransformUtilsTest::::leadingWhiteSpace()",
      "179": "TransformUtilsTest::::middleWhiteSpace()",
      "180": "TransformUtilsTest::::middleWhiteSpace()",
      "181": "TransformUtilsTest::::middleWhiteSpace()",
      "182": "TransformUtilsTest::::middleWhiteSpace()",
      "183": "TransformUtilsTest::::middleWhiteSpace()",
      "184": "TransformUtilsTest::::middleWhiteSpace()",
      "185": "TransformUtilsTest::::middleWhiteSpace()",
      "187": "TransformUtilsTest::::mixedWhiteSpace()",
      "188": "TransformUtilsTest::::mixedWhiteSpace()",
      "189": "TransformUtilsTest::::mixedWhiteSpace()",
      "190": "TransformUtilsTest::::mixedWhiteSpace()",
      "191": "TransformUtilsTest::::mixedWhiteSpace()",
      "192": "TransformUtilsTest::::mixedWhiteSpace()",
      "193": "TransformUtilsTest::::mixedWhiteSpace()"
    },
    "tests": [
      {
        "test_lines": [
          38,
          44
        ],
        "covered_lines": [
          114,
          115
        ]
      },
      {
        "test_lines": [
          46,
          52
        ],
        "covered_lines": [
          114,
          118,
          119
        ]
      },
      {
        "test_lines": [
          54,
          60
        ],
        "covered_lines": [
          114,
          118,
          122,
          124,
          126,
          145,
          146,
          148,
          149,
          151,
          152,
          154,
          156,
          307,
          309,
          310
        ]
      },
      {
        "test_lines": [
          62,
          65
        ],
        "covered_lines": [
          114,
          118,
          122,
          124,
          126,
          145,
          146,
          148,
          149,
          151,
          152,
          154,
          156,
          166,
          168,
          171,
          307,
          309,
          313,
          323,
          325
        ]
      },
      {
        "test_lines": [
          67,
          73
        ],
        "covered_lines": [
          114,
          118,
          122,
          124,
          126,
          145,
          146,
          148,
          149,
          151,
          152,
          154,
          156,
          166,
          168,
          169,
          307,
          309,
          313
        ]
      },
      {
        "test_lines": [
          75,
          81
        ],
        "covered_lines": [
          114,
          118,
          122,
          124,
          126,
          127,
          129,
          130,
          132,
          134,
          145,
          146,
          148,
          149,
          151,
          152,
          154,
          156,
          166,
          168,
          171,
          173,
          286,
          290,
          291,
          292,
          293,
          294,
          295,
          297,
          307,
          309,
          313,
          323,
          325
        ]
      },
      {
        "test_lines": [
          83,
          89
        ],
        "covered_lines": [
          114,
          118,
          122,
          124,
          126,
          127,
          129,
          130,
          132,
          134,
          145,
          146,
          148,
          149,
          151,
          152,
          154,
          156,
          166,
          168,
          171,
          173,
          286,
          290,
          291,
          292,
          293,
          294,
          295,
          297,
          307,
          309,
          313,
          323,
          325
        ]
      },
      {
        "test_lines": [
          91,
          97
        ],
        "covered_lines": [
          114,
          118,
          122,
          124,
          126,
          127,
          129,
          130,
          132,
          134,
          145,
          146,
          148,
          149,
          151,
          152,
          154,
          156,
          166,
          168,
          171,
          173,
          286,
          290,
          291,
          292,
          293,
          294,
          295,
          297,
          307,
          309,
          313,
          323,
          325
        ]
      },
      {
        "test_lines": [
          99,
          105
        ],
        "covered_lines": [
          114,
          118,
          122,
          124,
          126,
          127,
          129,
          130,
          132,
          134,
          145,
          146,
          148,
          149,
          151,
          152,
          154,
          156,
          166,
          168,
          171,
          173,
          286,
          290,
          291,
          292,
          293,
          294,
          295,
          297,
          307,
          309,
          313,
          323,
          325
        ]
      },
      {
        "test_lines": [
          107,
          113
        ],
        "covered_lines": [
          114,
          118,
          122,
          124,
          126,
          127,
          129,
          130,
          132,
          134,
          145,
          146,
          148,
          149,
          151,
          152,
          154,
          156,
          166,
          168,
          171,
          173,
          286,
          290,
          291,
          292,
          293,
          294,
          295,
          297,
          307,
          309,
          313,
          323,
          325
        ]
      },
      {
        "test_lines": [
          115,
          121
        ],
        "covered_lines": [
          114,
          118,
          122,
          124,
          126,
          127,
          129,
          130,
          132,
          134,
          145,
          146,
          148,
          149,
          151,
          152,
          154,
          156,
          166,
          168,
          171,
          173,
          286,
          290,
          291,
          292,
          293,
          294,
          295,
          297,
          307,
          309,
          313,
          323,
          325
        ]
      },
      {
        "test_lines": [
          123,
          129
        ],
        "covered_lines": [
          114,
          118,
          122,
          124,
          126,
          127,
          129,
          130,
          132,
          134,
          145,
          146,
          148,
          149,
          151,
          152,
          154,
          156,
          166,
          168,
          171,
          175,
          177,
          252,
          256,
          257,
          259,
          269,
          273,
          274,
          276,
          307,
          309,
          313,
          323,
          325
        ]
      },
      {
        "test_lines": [
          131,
          137
        ],
        "covered_lines": [
          114,
          118,
          122,
          124,
          126,
          127,
          129,
          130,
          132,
          134,
          145,
          146,
          148,
          149,
          151,
          152,
          154,
          156,
          166,
          168,
          171,
          175,
          177,
          252,
          256,
          257,
          259,
          269,
          273,
          274,
          276,
          307,
          309,
          313,
          323,
          325
        ]
      },
      {
        "test_lines": [
          139,
          145
        ],
        "covered_lines": [
          114,
          118,
          122,
          124,
          126,
          127,
          129,
          130,
          132,
          134,
          145,
          146,
          148,
          149,
          151,
          152,
          154,
          156,
          166,
          168,
          171,
          177,
          252,
          256,
          257,
          259,
          307,
          309,
          313,
          323,
          325
        ]
      },
      {
        "test_lines": [
          147,
          153
        ],
        "covered_lines": [
          114,
          118,
          122,
          124,
          126,
          127,
          129,
          130,
          132,
          134,
          145,
          146,
          148,
          149,
          151,
          152,
          154,
          156,
          166,
          168,
          171,
          175,
          269,
          273,
          274,
          276,
          307,
          309,
          313,
          323,
          325
        ]
      },
      {
        "test_lines": [
          155,
          161
        ],
        "covered_lines": [
          114,
          118,
          122,
          124,
          126,
          145,
          146,
          148,
          149,
          151,
          152,
          154,
          156,
          166,
          168,
          171,
          185,
          307,
          309,
          313
        ]
      },
      {
        "test_lines": [
          163,
          169
        ],
        "covered_lines": [
          114,
          118,
          122,
          124,
          126,
          127,
          129,
          130,
          132,
          134,
          145,
          146,
          148,
          149,
          151,
          152,
          154,
          156,
          166,
          168,
          171,
          175,
          269,
          273,
          274,
          276,
          307,
          309,
          313,
          323,
          325
        ]
      },
      {
        "test_lines": [
          171,
          177
        ],
        "covered_lines": [
          114,
          118,
          122,
          124,
          126,
          127,
          129,
          130,
          132,
          134,
          145,
          146,
          148,
          149,
          151,
          152,
          154,
          156,
          166,
          168,
          171,
          175,
          269,
          273,
          274,
          276,
          307,
          309,
          313,
          323,
          325
        ]
      },
      {
        "test_lines": [
          179,
          185
        ],
        "covered_lines": [
          114,
          118,
          122,
          124,
          126,
          127,
          129,
          130,
          132,
          134,
          145,
          146,
          148,
          149,
          151,
          152,
          154,
          156,
          166,
          168,
          171,
          175,
          269,
          273,
          274,
          276,
          307,
          309,
          313,
          323,
          325
        ]
      },
      {
        "test_lines": [
          187,
          193
        ],
        "covered_lines": [
          114,
          118,
          122,
          124,
          126,
          127,
          129,
          130,
          132,
          134,
          145,
          146,
          148,
          149,
          151,
          152,
          154,
          156,
          166,
          168,
          171,
          175,
          269,
          273,
          274,
          276,
          307,
          309,
          313,
          323,
          325
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/svg/src/main/java/com/itextpdf/svg/utils/SvgCoordinateUtils.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.svg.utils;\n",
      "\n",
      "import com.itextpdf.kernel.geom.Rectangle;\n",
      "import com.itextpdf.kernel.geom.Vector;\n",
      "import com.itextpdf.layout.properties.UnitValue;\n",
      "import com.itextpdf.styledxmlparser.css.util.CssDimensionParsingUtils;\n",
      "import com.itextpdf.styledxmlparser.css.util.CssTypesValidationUtils;\n",
      "import com.itextpdf.svg.SvgConstants;\n",
      "import com.itextpdf.svg.SvgConstants.Values;\n",
      "import com.itextpdf.svg.exceptions.SvgExceptionMessageConstant;\n",
      "\n",
      "public class SvgCoordinateUtils {\n",
      "\n",
      "    /**\n",
      "     * Converts relative coordinates to absolute ones. Assumes that relative coordinates are represented by\n",
      "     * an array of coordinates with length proportional to the length of current coordinates array,\n",
      "     * so that current coordinates array is applied in segments to the relative coordinates array\n",
      "     *\n",
      "     * @param relativeCoordinates the initial set of coordinates\n",
      "     * @param currentCoordinates  an array representing the point relative to which the relativeCoordinates are defined\n",
      "     * @return a String array of absolute coordinates, with the same length as the input array\n",
      "     */\n",
      "    public static String[] makeRelativeOperatorCoordinatesAbsolute(String[] relativeCoordinates,\n",
      "            double[] currentCoordinates) {\n",
      "        if (relativeCoordinates.length % currentCoordinates.length != 0) {\n",
      "            throw new IllegalArgumentException(\n",
      "                    SvgExceptionMessageConstant.COORDINATE_ARRAY_LENGTH_MUST_BY_DIVISIBLE_BY_CURRENT_COORDINATES_ARRAY_LENGTH);\n",
      "        }\n",
      "        String[] absoluteOperators = new String[relativeCoordinates.length];\n",
      "\n",
      "        for (int i = 0; i < relativeCoordinates.length; ) {\n",
      "            for (int j = 0; j < currentCoordinates.length; j++, i++) {\n",
      "                double relativeDouble = Double.parseDouble(relativeCoordinates[i]);\n",
      "                relativeDouble += currentCoordinates[j];\n",
      "                absoluteOperators[i] = SvgCssUtils.convertDoubleToString(relativeDouble);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        return absoluteOperators;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Calculate the angle between two vectors\n",
      "     *\n",
      "     * @param vectorA first vector\n",
      "     * @param vectorB second vector\n",
      "     * @return angle between vectors in radians units\n",
      "     */\n",
      "    public static double calculateAngleBetweenTwoVectors(Vector vectorA, Vector vectorB) {\n",
      "        return Math.acos((double) vectorA.dot(vectorB) / ((double) vectorA.length() * (double) vectorB.length()));\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Returns absolute value for attribute in userSpaceOnUse coordinate system.\n",
      "     *\n",
      "     * @param attributeValue value of attribute.\n",
      "     * @param defaultValue   default value.\n",
      "     * @param start          start border for calculating percent value.\n",
      "     * @param length         length for calculating percent value.\n",
      "     * @param em             em value.\n",
      "     * @param rem            rem value.\n",
      "     * @return absolute value in the userSpaceOnUse coordinate system.\n",
      "     */\n",
      "    public static double getCoordinateForUserSpaceOnUse(String attributeValue, double defaultValue,\n",
      "            double start, double length, float em, float rem) {\n",
      "        double absoluteValue;\n",
      "        final UnitValue unitValue = CssDimensionParsingUtils.parseLengthValueToPt(attributeValue, em, rem);\n",
      "        if (unitValue == null) {\n",
      "            absoluteValue = defaultValue;\n",
      "        } else if (unitValue.getUnitType() == UnitValue.PERCENT) {\n",
      "            absoluteValue = start + (length * unitValue.getValue() / 100);\n",
      "        } else {\n",
      "            absoluteValue = unitValue.getValue();\n",
      "        }\n",
      "        return absoluteValue;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Returns a value relative to the object bounding box.\n",
      "     * We should only call this method for attributes with coordinates relative to the object bounding rectangle.\n",
      "     *\n",
      "     * @param attributeValue attribute value to parse\n",
      "     * @param defaultValue   this value will be returned if an error occurs while parsing the attribute value\n",
      "     * @return if {@code attributeValue} is a percentage value, the given percentage of 1 will be returned.\n",
      "     * And if it's a valid value with a number, the number will be extracted from that value.\n",
      "     */\n",
      "    public static double getCoordinateForObjectBoundingBox(String attributeValue, double defaultValue) {\n",
      "        if (CssTypesValidationUtils.isPercentageValue(attributeValue)) {\n",
      "            return CssDimensionParsingUtils.parseRelativeValue(attributeValue, 1);\n",
      "        }\n",
      "        if (CssTypesValidationUtils.isNumber(attributeValue)\n",
      "                || CssTypesValidationUtils.isMetricValue(attributeValue)\n",
      "                || CssTypesValidationUtils.isRelativeValue(attributeValue)) {\n",
      "            // if there is incorrect value metric, then we do not need to parse the value\n",
      "            int unitsPosition = CssDimensionParsingUtils.determinePositionBetweenValueAndUnit(attributeValue);\n",
      "            if (unitsPosition > 0) {\n",
      "                // We want to ignore the unit type how this is done in the \"Google Chrome\" approach\n",
      "                // which treats the \"abstract coordinate system\" in the coordinate metric measure,\n",
      "                // i.e. for value '0.5cm' the top/left of the object bounding box would be (1cm, 1cm),\n",
      "                // for value '0.5em' the top/left of the object bounding box would be (1em, 1em) and etc.\n",
      "                // no null pointer should be thrown as determine\n",
      "                return CssDimensionParsingUtils.parseDouble(attributeValue.substring(0, unitsPosition))\n",
      "                        .doubleValue();\n",
      "            }\n",
      "        }\n",
      "        return defaultValue;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Returns the viewBox received after scaling and displacement given preserveAspectRatio.\n",
      "     *\n",
      "     * @param viewBox         parsed viewBox rectangle. It should be a valid {@link Rectangle}\n",
      "     * @param currentViewPort current element view port. It should be a valid {@link Rectangle}\n",
      "     * @param align           the alignment value that indicates whether to force uniform scaling\n",
      "     *                        and, if so, the alignment method to use in case the aspect ratio of\n",
      "     *                        the viewBox doesn't match the aspect ratio of the viewport. If align\n",
      "     *                        is {@code null} or align is invalid (i.e. not in the predefined list),\n",
      "     *                        then the default logic with align = \"xMidYMid\", and meetOrSlice = \"meet\" would be used\n",
      "     * @param meetOrSlice     the way to scale the viewBox. If meetOrSlice is not {@code null} and invalid,\n",
      "     *                        then the default logic with align = \"xMidYMid\"\n",
      "     *                        and meetOrSlice = \"meet\" would be used, if meetOrSlice is {@code null}\n",
      "     *                        then default \"meet\" value would be used with the specified align\n",
      "     * @return the applied viewBox {@link Rectangle}\n",
      "     */\n",
      "    public static Rectangle applyViewBox(Rectangle viewBox, Rectangle currentViewPort, String align,\n",
      "            String meetOrSlice) {\n",
      "        if (currentViewPort == null) {\n",
      "            throw new IllegalArgumentException(SvgExceptionMessageConstant.CURRENT_VIEWPORT_IS_NULL);\n",
      "        }\n",
      "\n",
      "        if (viewBox == null || viewBox.getWidth() <= 0 || viewBox.getHeight() <= 0) {\n",
      "            throw new IllegalArgumentException(SvgExceptionMessageConstant.VIEWBOX_IS_INCORRECT);\n",
      "        }\n",
      "\n",
      "        if (align == null || (\n",
      "                meetOrSlice != null && !Values.MEET.equals(meetOrSlice) && !Values.SLICE.equals(meetOrSlice)\n",
      "        )) {\n",
      "            return applyViewBox(viewBox, currentViewPort, Values.XMID_YMID, Values.MEET);\n",
      "        }\n",
      "\n",
      "        double scaleWidth;\n",
      "        double scaleHeight;\n",
      "        if (Values.NONE.equalsIgnoreCase(align)) {\n",
      "            scaleWidth = (double) currentViewPort.getWidth() / (double) viewBox.getWidth();\n",
      "            scaleHeight = (double) currentViewPort.getHeight() / (double) viewBox.getHeight();\n",
      "        } else {\n",
      "            double scale = getScaleWidthHeight(viewBox, currentViewPort, meetOrSlice);\n",
      "            scaleWidth = scale;\n",
      "            scaleHeight = scale;\n",
      "        }\n",
      "\n",
      "        // apply scale\n",
      "        Rectangle appliedViewBox = new Rectangle(viewBox.getX(), viewBox.getY(),\n",
      "                (float) ((double) viewBox.getWidth() * scaleWidth),\n",
      "                (float) ((double) viewBox.getHeight() * scaleHeight));\n",
      "\n",
      "        double minXOffset = (double) currentViewPort.getX() - (double) appliedViewBox.getX();\n",
      "        double minYOffset = (double) currentViewPort.getY() - (double) appliedViewBox.getY();\n",
      "\n",
      "        double midXOffset = (double) currentViewPort.getX() + ((double) currentViewPort.getWidth() / 2)\n",
      "                - ((double) appliedViewBox.getX() + ((double) appliedViewBox.getWidth() / 2));\n",
      "        double midYOffset = (double) currentViewPort.getY() + ((double) currentViewPort.getHeight() / 2)\n",
      "                - ((double) appliedViewBox.getY() + ((double) appliedViewBox.getHeight() / 2));\n",
      "\n",
      "        double maxXOffset = (double) currentViewPort.getX() + (double) currentViewPort.getWidth()\n",
      "                - ((double) appliedViewBox.getX() + (double) appliedViewBox.getWidth());\n",
      "        double maxYOffset = (double) currentViewPort.getY() + (double) currentViewPort.getHeight()\n",
      "                - ((double) appliedViewBox.getY() + (double) appliedViewBox.getHeight());\n",
      "        \n",
      "        double xOffset;\n",
      "        double yOffset;\n",
      "\n",
      "        switch (align.toLowerCase()) {\n",
      "            case SvgConstants.Values.NONE:\n",
      "            case SvgConstants.Values.XMIN_YMIN:\n",
      "                xOffset = minXOffset;\n",
      "                yOffset = minYOffset;\n",
      "                break;\n",
      "            case SvgConstants.Values.XMIN_YMID:\n",
      "                xOffset = minXOffset;\n",
      "                yOffset = midYOffset;\n",
      "                break;\n",
      "            case SvgConstants.Values.XMIN_YMAX:\n",
      "                xOffset = minXOffset;\n",
      "                yOffset = maxYOffset;\n",
      "                break;\n",
      "            case SvgConstants.Values.XMID_YMIN:\n",
      "                xOffset = midXOffset;\n",
      "                yOffset = minYOffset;\n",
      "                break;\n",
      "            case SvgConstants.Values.XMID_YMAX:\n",
      "                xOffset = midXOffset;\n",
      "                yOffset = maxYOffset;\n",
      "                break;\n",
      "            case SvgConstants.Values.XMAX_YMIN:\n",
      "                xOffset = maxXOffset;\n",
      "                yOffset = minYOffset;\n",
      "                break;\n",
      "            case SvgConstants.Values.XMAX_YMID:\n",
      "                xOffset = maxXOffset;\n",
      "                yOffset = midYOffset;\n",
      "                break;\n",
      "            case SvgConstants.Values.XMAX_YMAX:\n",
      "                xOffset = maxXOffset;\n",
      "                yOffset = maxYOffset;\n",
      "                break;\n",
      "            case SvgConstants.Values.XMID_YMID:\n",
      "                xOffset = midXOffset;\n",
      "                yOffset = midYOffset;\n",
      "                break;\n",
      "            default:\n",
      "                return applyViewBox(viewBox, currentViewPort, Values.XMID_YMID, Values.MEET);\n",
      "        }\n",
      "\n",
      "        // apply offset\n",
      "        appliedViewBox.moveRight((float) xOffset);\n",
      "        appliedViewBox.moveUp((float) yOffset);\n",
      "\n",
      "        return appliedViewBox;\n",
      "    }\n",
      "\n",
      "    private static double getScaleWidthHeight(Rectangle viewBox, Rectangle currentViewPort,\n",
      "            String meetOrSlice) {\n",
      "        double scaleWidth = (double) currentViewPort.getWidth() / (double) viewBox.getWidth();\n",
      "        double scaleHeight = (double) currentViewPort.getHeight() / (double) viewBox.getHeight();\n",
      "        if (Values.SLICE.equalsIgnoreCase(meetOrSlice)) {\n",
      "            return Math.max(scaleWidth, scaleHeight);\n",
      "        } else if (Values.MEET.equalsIgnoreCase(meetOrSlice) || meetOrSlice == null) {\n",
      "            return Math.min(scaleWidth, scaleHeight);\n",
      "        } else {\n",
      "            // This code should be unreachable. We check for incorrect cases\n",
      "            // in the applyViewBox method and instead use the default implementation (xMidYMid meet).\n",
      "            throw new IllegalStateException(\n",
      "                    SvgExceptionMessageConstant.MEET_OR_SLICE_ARGUMENT_IS_INCORRECT);\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.svg.utils;\n",
      "\n",
      "import com.itextpdf.kernel.geom.Rectangle;\n",
      "import com.itextpdf.kernel.geom.Vector;\n",
      "import com.itextpdf.svg.SvgConstants.Values;\n",
      "import com.itextpdf.svg.exceptions.SvgExceptionMessageConstant;\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.type.UnitTest;\n",
      "\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(UnitTest.class)\n",
      "public class SvgCoordinateUtilsTest extends ExtendedITextTest {\n",
      "\n",
      "    private final static double DELTA = 0.0000001;\n",
      "\n",
      "    private final static Rectangle VIEW_BOX = new Rectangle(20F, 20F, 20F, 20F);\n",
      "    private final static Rectangle VIEW_PORT_HORIZONTAL = new Rectangle(60F, 40F, 100F, 60F);\n",
      "    private final static Rectangle VIEW_PORT_VERTICAL = new Rectangle(60F, 40F, 60F, 100F);\n",
      "\n",
      "    @Test\n",
      "    public void calculateAngleBetweenTwoVectors45degTest() {\n",
      "        Vector vectorA = new Vector(1, 0, 0);\n",
      "        Vector vectorB = new Vector(1, 1, 0);\n",
      "        double expected = Math.PI / 4;\n",
      "        double actual = SvgCoordinateUtils.calculateAngleBetweenTwoVectors(vectorA, vectorB);\n",
      "        Assert.assertEquals(expected, actual, DELTA);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void calculateAngleBetweenTwoVectors45degInverseTest() {\n",
      "        Vector vectorA = new Vector(1, 0, 0);\n",
      "        Vector vectorB = new Vector(1, -1, 0);\n",
      "        double expected = Math.PI / 4;\n",
      "        double actual = SvgCoordinateUtils.calculateAngleBetweenTwoVectors(vectorA, vectorB);\n",
      "        Assert.assertEquals(expected, actual, DELTA);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void calculateAngleBetweenTwoVectors135degTest() {\n",
      "        Vector vectorA = new Vector(1, 0, 0);\n",
      "        Vector vectorB = new Vector(-1, 1, 0);\n",
      "        double expected = (Math.PI - Math.PI / 4);\n",
      "        double actual = SvgCoordinateUtils.calculateAngleBetweenTwoVectors(vectorA, vectorB);\n",
      "        Assert.assertEquals(expected, actual, DELTA);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void calculateAngleBetweenTwoVectors135degInverseTest() {\n",
      "        Vector vectorA = new Vector(1, 0, 0);\n",
      "        Vector vectorB = new Vector(-1, -1, 0);\n",
      "        double expected = (Math.PI - Math.PI / 4);\n",
      "        double actual = SvgCoordinateUtils.calculateAngleBetweenTwoVectors(vectorA, vectorB);\n",
      "        Assert.assertEquals(expected, actual, DELTA);\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void calculateAngleBetweenTwoVectors90degTest() {\n",
      "        Vector vectorA = new Vector(1, 0, 0);\n",
      "        Vector vectorB = new Vector(0, 1, 0);\n",
      "        double expected = Math.PI / 2;\n",
      "        double actual = SvgCoordinateUtils.calculateAngleBetweenTwoVectors(vectorA, vectorB);\n",
      "        Assert.assertEquals(expected, actual, DELTA);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void calculateAngleBetweenTwoVectors180degTest() {\n",
      "        Vector vectorA = new Vector(1, 0, 0);\n",
      "        Vector vectorB = new Vector(-1, 0, 0);\n",
      "        double expected = Math.PI;\n",
      "        double actual = SvgCoordinateUtils.calculateAngleBetweenTwoVectors(vectorA, vectorB);\n",
      "        Assert.assertEquals(expected, actual, DELTA);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void getCoordinateForUserSpaceOnUseDefaultTest() {\n",
      "        double defaultValue = 244.0;\n",
      "        double result = SvgCoordinateUtils.getCoordinateForUserSpaceOnUse(\n",
      "                \"random\", defaultValue, 0, 0, 0, 0);\n",
      "        Assert.assertEquals(defaultValue, result, DELTA);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void getCoordinateForUserSpaceOnUsePercentTest() {\n",
      "        double result = SvgCoordinateUtils.getCoordinateForUserSpaceOnUse(\n",
      "                \"20%\", 0, 10, 20, 0, 0);\n",
      "        Assert.assertEquals(14.0, result, DELTA);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void getCoordinateForUserSpaceOnUsePxTest() {\n",
      "        double result = SvgCoordinateUtils.getCoordinateForUserSpaceOnUse(\n",
      "                \"20px\", 0, 0, 0, 0, 0);\n",
      "        Assert.assertEquals(15.0, result, DELTA);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void getCoordinateForUserSpaceOnUseEmTest() {\n",
      "        double result = SvgCoordinateUtils.getCoordinateForUserSpaceOnUse(\n",
      "                \"14em\", 0, 0, 0, 10, 18);\n",
      "        Assert.assertEquals(140.0, result, DELTA);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void getCoordinateForUserSpaceOnUseRemTest() {\n",
      "        double result = SvgCoordinateUtils.getCoordinateForUserSpaceOnUse(\n",
      "                \"14rem\", 0, 0, 0, 10, 18);\n",
      "        Assert.assertEquals(252.0, result, DELTA);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void getCoordinateForObjectBoundingBoxPercentTest() {\n",
      "        double result = SvgCoordinateUtils.getCoordinateForObjectBoundingBox(\"20%\", 0);\n",
      "        Assert.assertEquals(0.2, result, DELTA);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void getCoordinateForObjectBoundingBoxNumericFloatingValueTest() {\n",
      "        double result = SvgCoordinateUtils.getCoordinateForObjectBoundingBox(\"1234.3\", 0);\n",
      "        Assert.assertEquals(1234.3, result, DELTA);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void getCoordinateForObjectBoundingBoxNumericIntegerValueTest() {\n",
      "        double result = SvgCoordinateUtils.getCoordinateForObjectBoundingBox(\"1234\", 0);\n",
      "        Assert.assertEquals(1234.0, result, DELTA);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void getCoordinateForObjectBoundingBoxMetricFloatingValueTest() {\n",
      "        double result = SvgCoordinateUtils.getCoordinateForObjectBoundingBox(\"12.3px\", 0);\n",
      "        Assert.assertEquals(12.3, result, DELTA);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void getCoordinateForObjectBoundingBoxMetricIntegerValueTest() {\n",
      "        double result = SvgCoordinateUtils.getCoordinateForObjectBoundingBox(\"12px\", 0);\n",
      "        Assert.assertEquals(12.0, result, DELTA);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void getCoordinateForObjectBoundingBoxRelativeValueTest() {\n",
      "        double result = SvgCoordinateUtils.getCoordinateForObjectBoundingBox(\"12.3em\", 0);\n",
      "        Assert.assertEquals(12.3, result, DELTA);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void getCoordinateForObjectBoundingBoxDefaultTest() {\n",
      "        double defaultValue = 20.0;\n",
      "        double result = SvgCoordinateUtils.getCoordinateForObjectBoundingBox(\"random\", defaultValue);\n",
      "        Assert.assertEquals(defaultValue, result, DELTA);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxViewBoxIsNullTest() {\n",
      "        Exception e = Assert.assertThrows(IllegalArgumentException.class,\n",
      "                () -> SvgCoordinateUtils.applyViewBox(null, new Rectangle(10F, 10F), null, null)\n",
      "        );\n",
      "        Assert.assertEquals(SvgExceptionMessageConstant.VIEWBOX_IS_INCORRECT, e.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxViewBoxWidthIsZeroTest() {\n",
      "        Exception e = Assert.assertThrows(IllegalArgumentException.class,\n",
      "                () -> SvgCoordinateUtils.applyViewBox(new Rectangle(0F, 10F), new Rectangle(10F, 10F), null, null)\n",
      "        );\n",
      "        Assert.assertEquals(SvgExceptionMessageConstant.VIEWBOX_IS_INCORRECT, e.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxViewBoxHeightIsZeroTest() {\n",
      "        Exception e = Assert.assertThrows(IllegalArgumentException.class,\n",
      "                () -> SvgCoordinateUtils.applyViewBox(new Rectangle(10F, 0F), new Rectangle(10F, 10F), null, null)\n",
      "        );\n",
      "        Assert.assertEquals(SvgExceptionMessageConstant.VIEWBOX_IS_INCORRECT, e.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxViewBoxWidthIsNegativeTest() {\n",
      "        Exception e = Assert.assertThrows(IllegalArgumentException.class,\n",
      "                () -> SvgCoordinateUtils.applyViewBox(new Rectangle(-10F, 10F), new Rectangle(10F, 10F), null, null)\n",
      "        );\n",
      "        Assert.assertEquals(SvgExceptionMessageConstant.VIEWBOX_IS_INCORRECT, e.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxViewBoxHeightIsNegativeTest() {\n",
      "        Exception e = Assert.assertThrows(IllegalArgumentException.class,\n",
      "                () -> SvgCoordinateUtils.applyViewBox(new Rectangle(10F, -10F), new Rectangle(10F, 10F), null, null)\n",
      "        );\n",
      "        Assert.assertEquals(SvgExceptionMessageConstant.VIEWBOX_IS_INCORRECT, e.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxCurrentViewPortIsNullTest() {\n",
      "        Exception e = Assert.assertThrows(IllegalArgumentException.class,\n",
      "                () -> SvgCoordinateUtils.applyViewBox(new Rectangle(10F, 10F), null, null, null)\n",
      "        );\n",
      "        Assert.assertEquals(SvgExceptionMessageConstant.CURRENT_VIEWPORT_IS_NULL, e.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxAllNullTest() {\n",
      "        Exception e = Assert.assertThrows(IllegalArgumentException.class,\n",
      "                () -> SvgCoordinateUtils.applyViewBox(null, null, null, null)\n",
      "        );\n",
      "        Assert.assertEquals(SvgExceptionMessageConstant.CURRENT_VIEWPORT_IS_NULL, e.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxCurrentViewPortZeroWidthHeightTest() {\n",
      "        Rectangle currentViewPort = new Rectangle(50F, 50F, 0F, 0F);\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, currentViewPort, null, null);\n",
      "        Assert.assertTrue(currentViewPort.equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxCurrentViewPortNegativeWidthHeightTest() {\n",
      "        Rectangle currentViewPort = new Rectangle(50F, 50F, -100F, -60F);\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, currentViewPort, null, null);\n",
      "        Assert.assertTrue(new Rectangle(50F, 70F, -100F, -100F).equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxAlignIsNullSliceTest() {\n",
      "        Rectangle assertRect = new Rectangle(80F, 40F, 60F, 60F);\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils.applyViewBox(VIEW_BOX, VIEW_PORT_HORIZONTAL, null, Values.SLICE);\n",
      "        Assert.assertTrue(assertRect.equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxAlignIsNullMeetTest() {\n",
      "        Rectangle assertRect = new Rectangle(80F, 40F, 60F, 60F);\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils.applyViewBox(VIEW_BOX, VIEW_PORT_HORIZONTAL, null, Values.MEET);\n",
      "        Assert.assertTrue(assertRect.equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxAlignIsNullIncorrectMeetOrSliceTest() {\n",
      "        Rectangle assertRect = new Rectangle(80F, 40F, 60F, 60F);\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils.applyViewBox(VIEW_BOX, VIEW_PORT_HORIZONTAL, null, \"jklsdj\");\n",
      "        Assert.assertTrue(assertRect.equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxMeetOrSliceIsNullXMaxYMaxTest() {\n",
      "        Rectangle assertRect = new Rectangle(100F, 40F, 60F, 60F);\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_HORIZONTAL, Values.XMAX_YMAX, null);\n",
      "        Assert.assertTrue(assertRect.equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxMeetOrSliceIsNullXMinYMinTest() {\n",
      "        Rectangle assertRect = new Rectangle(60F, 40F, 60F, 60F);\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_HORIZONTAL, Values.XMIN_YMIN, null);\n",
      "        Assert.assertTrue(assertRect.equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxMeetOrSliceIsNullIncorrectAlignTest() {\n",
      "        Rectangle assertRect = new Rectangle(80F, 40F, 60F, 60F);\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_HORIZONTAL, \"ahfdfs\", null);\n",
      "        Assert.assertTrue(assertRect.equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxIncorrectAlignMeetTest() {\n",
      "        Rectangle assertRect = new Rectangle(80F, 40F, 60F, 60F);\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_HORIZONTAL, \"ahfdfs\", Values.MEET);\n",
      "        Assert.assertTrue(assertRect.equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxIncorrectAlignSliceTest() {\n",
      "        Rectangle assertRect = new Rectangle(80F, 40F, 60F, 60F);\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_HORIZONTAL, \"ahfdfs\", Values.SLICE);\n",
      "        Assert.assertTrue(assertRect.equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxNoneNullTest() {\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_HORIZONTAL, Values.NONE, null);\n",
      "        Assert.assertNotSame(VIEW_PORT_HORIZONTAL, appliedViewBox);\n",
      "        Assert.assertTrue(VIEW_PORT_HORIZONTAL.equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxNoneMeetTest() {\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_HORIZONTAL, Values.NONE, Values.MEET);\n",
      "        Assert.assertNotSame(VIEW_PORT_HORIZONTAL, appliedViewBox);\n",
      "        Assert.assertTrue(VIEW_PORT_HORIZONTAL.equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxNoneSliceTest() {\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_HORIZONTAL, Values.NONE, Values.SLICE);\n",
      "        Assert.assertNotSame(VIEW_PORT_HORIZONTAL, appliedViewBox);\n",
      "        Assert.assertTrue(VIEW_PORT_HORIZONTAL.equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxNoneMeetOrSliceIsIncorrectTest() {\n",
      "        //xMidYMid will be processed  cause meetOrSlice is incorrect\n",
      "        Rectangle assertRect = new Rectangle(80F, 40F, 60F, 60F);\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_HORIZONTAL, Values.NONE, \"fhakljs\");\n",
      "        Assert.assertTrue(assertRect.equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxXMinYMinMeetHorizontalViewPortTest() {\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_HORIZONTAL, Values.XMIN_YMIN, Values.MEET);\n",
      "        Assert.assertTrue(new Rectangle(60F, 40F, 60F, 60F).equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxXMinYMinSliceHorizontalViewPortTest() {\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_HORIZONTAL, Values.XMIN_YMIN, Values.SLICE);\n",
      "        Assert.assertTrue(new Rectangle(60F, 40F, 100F, 100F).equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxXMinYMinMeetVerticalViewPortTest() {\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_VERTICAL, Values.XMIN_YMIN, Values.MEET);\n",
      "        Assert.assertTrue(new Rectangle(60F, 40F, 60F, 60F).equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxXMinYMinSliceVerticalViewPortTest() {\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_VERTICAL, Values.XMIN_YMIN, Values.SLICE);\n",
      "        Assert.assertTrue(new Rectangle(60F, 40F, 100F, 100F).equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxXMinYMidMeetHorizontalTest() {\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_HORIZONTAL, Values.XMIN_YMID, Values.MEET);\n",
      "        Assert.assertTrue(new Rectangle(60F, 40F, 60F, 60F).equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxXMinYMidSliceHorizontalTest() {\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_HORIZONTAL, Values.XMIN_YMID, Values.SLICE);\n",
      "        Assert.assertTrue(new Rectangle(60F, 20F, 100F, 100F).equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxXMinYMidMeetVerticalTest() {\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_VERTICAL, Values.XMIN_YMID, Values.MEET);\n",
      "        Assert.assertTrue(new Rectangle(60F, 60F, 60F, 60F).equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxXMinYMidSliceVerticalTest() {\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_VERTICAL, Values.XMIN_YMID, Values.SLICE);\n",
      "        Assert.assertTrue(new Rectangle(60F, 40F, 100F, 100F).equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxXMinYMaxMeetHorizontalTest() {\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_HORIZONTAL, Values.XMIN_YMAX, Values.MEET);\n",
      "        Assert.assertTrue(new Rectangle(60F, 40F, 60F, 60F).equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxXMinYMaxSliceHorizontalTest() {\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_HORIZONTAL, Values.XMIN_YMAX, Values.SLICE);\n",
      "        Assert.assertTrue(new Rectangle(60F, 0F, 100F, 100F).equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxXMinYMaxMeetVerticalTest() {\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_VERTICAL, Values.XMIN_YMAX, Values.MEET);\n",
      "        Assert.assertTrue(new Rectangle(60F, 80F, 60F, 60F).equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxXMinYMaxSliceVerticalTest() {\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_VERTICAL, Values.XMIN_YMAX, Values.SLICE);\n",
      "        Assert.assertTrue(new Rectangle(60F, 40F, 100F, 100F).equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxXMidYMinMeetHorizontalTest() {\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_HORIZONTAL, Values.XMID_YMIN, Values.MEET);\n",
      "        Assert.assertTrue(new Rectangle(80F, 40F, 60F, 60F).equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxXMidYMinSliceHorizontalTest() {\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_HORIZONTAL, Values.XMID_YMIN, Values.SLICE);\n",
      "        Assert.assertTrue(new Rectangle(60F, 40F, 100F, 100F).equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxXMidYMinMeetVerticalTest() {\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_VERTICAL, Values.XMID_YMIN, Values.MEET);\n",
      "        Assert.assertTrue(new Rectangle(60F, 40F, 60F, 60F).equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxXMidYMinSliceVerticalTest() {\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_VERTICAL, Values.XMID_YMIN, Values.SLICE);\n",
      "        Assert.assertTrue(new Rectangle(40F, 40F, 100F, 100F).equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxXMidYMidMeetHorizontalTest() {\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_HORIZONTAL, Values.XMID_YMID, Values.MEET);\n",
      "        Assert.assertTrue(new Rectangle(80F, 40F, 60F, 60F).equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxXMidYMidSliceHorizontalTest() {\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_HORIZONTAL, Values.XMID_YMID, Values.SLICE);\n",
      "        Assert.assertTrue(new Rectangle(60F, 20F, 100F, 100F).equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxXMidYMidMeetVerticalTest() {\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_VERTICAL, Values.XMID_YMID, Values.MEET);\n",
      "        Assert.assertTrue(new Rectangle(60F, 60F, 60F, 60F).equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxXMidYMidSliceVerticalTest() {\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_VERTICAL, Values.XMID_YMID, Values.SLICE);\n",
      "        Assert.assertTrue(new Rectangle(40F, 40F, 100F, 100F).equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxXMidYMaxMeetHorizontalTest() {\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_HORIZONTAL, Values.XMID_YMAX, Values.MEET);\n",
      "        Assert.assertTrue(new Rectangle(80F, 40F, 60F, 60F).equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxXMidYMaxSliceHorizontalTest() {\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_HORIZONTAL, Values.XMID_YMAX, Values.SLICE);\n",
      "        Assert.assertTrue(new Rectangle(60F, 0F, 100F, 100F).equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxXMidYMaxMeetVerticalTest() {\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_VERTICAL, Values.XMID_YMAX, Values.MEET);\n",
      "        Assert.assertTrue(new Rectangle(60F, 80F, 60F, 60F).equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxXMidYMaxSliceVerticalTest() {\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_VERTICAL, Values.XMID_YMAX, Values.SLICE);\n",
      "        Assert.assertTrue(new Rectangle(40F, 40F, 100F, 100F).equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxXMaxYMinMeetHorizontalTest() {\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_HORIZONTAL, Values.XMAX_YMIN, Values.MEET);\n",
      "        Assert.assertTrue(new Rectangle(100F, 40F, 60F, 60F).equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxXMaxYMinSliceHorizontalTest() {\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_HORIZONTAL, Values.XMAX_YMIN, Values.SLICE);\n",
      "        Assert.assertTrue(new Rectangle(60F, 40F, 100F, 100F).equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxXMaxYMinMeetVerticalTest() {\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_VERTICAL, Values.XMAX_YMIN, Values.MEET);\n",
      "        Assert.assertTrue(new Rectangle(60F, 40F, 60F, 60F).equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxXMaxYMinSliceVerticalTest() {\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_VERTICAL, Values.XMAX_YMIN, Values.SLICE);\n",
      "        Assert.assertTrue(new Rectangle(20F, 40F, 100F, 100F).equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxXMaxYMidMeetHorizontalTest() {\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_HORIZONTAL, Values.XMAX_YMID, Values.MEET);\n",
      "        Assert.assertTrue(new Rectangle(100F, 40F, 60F, 60F).equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxXMaxYMidSliceHorizontalTest() {\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_HORIZONTAL, Values.XMAX_YMID, Values.SLICE);\n",
      "        Assert.assertTrue(new Rectangle(60F, 20F, 100F, 100F).equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxXMaxYMidMeetVerticalTest() {\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_VERTICAL, Values.XMAX_YMID, Values.MEET);\n",
      "        Assert.assertTrue(new Rectangle(60F, 60F, 60F, 60F).equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxXMaxYMidSliceVerticalTest() {\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_VERTICAL, Values.XMAX_YMID, Values.SLICE);\n",
      "        Assert.assertTrue(new Rectangle(20F, 40F, 100F, 100F).equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxXMaxYMaxMeetHorizontalTest() {\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_HORIZONTAL, Values.XMAX_YMAX, Values.MEET);\n",
      "        Assert.assertTrue(new Rectangle(100F, 40F, 60F, 60F).equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxXMaxYMaxSliceHorizontalTest() {\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_HORIZONTAL, Values.XMAX_YMAX, Values.SLICE);\n",
      "        Assert.assertTrue(new Rectangle(60F, 0F, 100F, 100F).equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxXMaxYMaxMeetVerticalTest() {\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_VERTICAL, Values.XMAX_YMAX, Values.MEET);\n",
      "        Assert.assertTrue(new Rectangle(60F, 80F, 60F, 60F).equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyViewBoxXMaxYMaxSliceVerticalTest() {\n",
      "        Rectangle appliedViewBox = SvgCoordinateUtils\n",
      "                .applyViewBox(VIEW_BOX, VIEW_PORT_VERTICAL, Values.XMAX_YMAX, Values.SLICE);\n",
      "        Assert.assertTrue(new Rectangle(20F, 40F, 100F, 100F).equalsWithEpsilon(appliedViewBox));\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "SvgCoordinateUtils::::makeRelativeOperatorCoordinatesAbsolute(java.lang.String[],double[])": [
        45,
        62
      ],
      "SvgCoordinateUtils::::getCoordinateForUserSpaceOnUse(java.lang.String,double,double,double,float,float)": [
        86,
        98
      ],
      "SvgCoordinateUtils::::getCoordinateForObjectBoundingBox(java.lang.String,double)": [
        109,
        129
      ]
    },
    "test_method_lines_dic": {
      "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors45degTest()": [
        45,
        52
      ],
      "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors45degInverseTest()": [
        54,
        61
      ],
      "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors135degTest()": [
        63,
        70
      ],
      "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors135degInverseTest()": [
        72,
        79
      ],
      "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors90degTest()": [
        82,
        89
      ],
      "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors180degTest()": [
        91,
        98
      ],
      "SvgCoordinateUtilsTest::::getCoordinateForUserSpaceOnUseDefaultTest()": [
        100,
        106
      ],
      "SvgCoordinateUtilsTest::::getCoordinateForUserSpaceOnUsePercentTest()": [
        108,
        113
      ],
      "SvgCoordinateUtilsTest::::getCoordinateForUserSpaceOnUsePxTest()": [
        115,
        120
      ],
      "SvgCoordinateUtilsTest::::getCoordinateForUserSpaceOnUseEmTest()": [
        122,
        127
      ],
      "SvgCoordinateUtilsTest::::getCoordinateForUserSpaceOnUseRemTest()": [
        129,
        134
      ],
      "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxPercentTest()": [
        136,
        140
      ],
      "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxNumericFloatingValueTest()": [
        142,
        146
      ],
      "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxNumericIntegerValueTest()": [
        148,
        152
      ],
      "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxMetricFloatingValueTest()": [
        154,
        158
      ],
      "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxMetricIntegerValueTest()": [
        160,
        164
      ],
      "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxRelativeValueTest()": [
        166,
        170
      ],
      "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxDefaultTest()": [
        172,
        177
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxViewBoxIsNullTest()": [
        179,
        185
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxViewBoxWidthIsZeroTest()": [
        187,
        193
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxViewBoxHeightIsZeroTest()": [
        195,
        201
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxViewBoxWidthIsNegativeTest()": [
        203,
        209
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxViewBoxHeightIsNegativeTest()": [
        211,
        217
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxCurrentViewPortIsNullTest()": [
        219,
        225
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxAllNullTest()": [
        227,
        233
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxCurrentViewPortZeroWidthHeightTest()": [
        235,
        241
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxCurrentViewPortNegativeWidthHeightTest()": [
        243,
        249
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxAlignIsNullSliceTest()": [
        251,
        256
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxAlignIsNullMeetTest()": [
        258,
        263
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxAlignIsNullIncorrectMeetOrSliceTest()": [
        265,
        270
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxMeetOrSliceIsNullXMaxYMaxTest()": [
        272,
        278
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxMeetOrSliceIsNullXMinYMinTest()": [
        280,
        286
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxMeetOrSliceIsNullIncorrectAlignTest()": [
        288,
        294
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxIncorrectAlignMeetTest()": [
        296,
        302
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxIncorrectAlignSliceTest()": [
        304,
        310
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxNoneNullTest()": [
        312,
        318
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxNoneMeetTest()": [
        320,
        326
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxNoneSliceTest()": [
        328,
        334
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxNoneMeetOrSliceIsIncorrectTest()": [
        336,
        343
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxXMinYMinMeetHorizontalViewPortTest()": [
        345,
        350
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxXMinYMinSliceHorizontalViewPortTest()": [
        352,
        357
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxXMinYMinMeetVerticalViewPortTest()": [
        359,
        364
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxXMinYMinSliceVerticalViewPortTest()": [
        366,
        371
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxXMinYMidMeetHorizontalTest()": [
        373,
        378
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxXMinYMidSliceHorizontalTest()": [
        380,
        385
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxXMinYMidMeetVerticalTest()": [
        387,
        392
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxXMinYMidSliceVerticalTest()": [
        394,
        399
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxXMinYMaxMeetHorizontalTest()": [
        402,
        407
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxXMinYMaxSliceHorizontalTest()": [
        409,
        414
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxXMinYMaxMeetVerticalTest()": [
        416,
        421
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxXMinYMaxSliceVerticalTest()": [
        423,
        428
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxXMidYMinMeetHorizontalTest()": [
        430,
        435
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxXMidYMinSliceHorizontalTest()": [
        437,
        442
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxXMidYMinMeetVerticalTest()": [
        444,
        449
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxXMidYMinSliceVerticalTest()": [
        451,
        456
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxXMidYMidMeetHorizontalTest()": [
        458,
        463
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxXMidYMidSliceHorizontalTest()": [
        465,
        470
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxXMidYMidMeetVerticalTest()": [
        472,
        477
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxXMidYMidSliceVerticalTest()": [
        479,
        484
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxXMidYMaxMeetHorizontalTest()": [
        486,
        491
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxXMidYMaxSliceHorizontalTest()": [
        493,
        498
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxXMidYMaxMeetVerticalTest()": [
        500,
        505
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxXMidYMaxSliceVerticalTest()": [
        507,
        512
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMinMeetHorizontalTest()": [
        514,
        519
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMinSliceHorizontalTest()": [
        521,
        526
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMinMeetVerticalTest()": [
        528,
        533
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMinSliceVerticalTest()": [
        535,
        540
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMidMeetHorizontalTest()": [
        542,
        547
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMidSliceHorizontalTest()": [
        549,
        554
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMidMeetVerticalTest()": [
        556,
        561
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMidSliceVerticalTest()": [
        563,
        568
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMaxMeetHorizontalTest()": [
        570,
        575
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMaxSliceHorizontalTest()": [
        577,
        582
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMaxMeetVerticalTest()": [
        584,
        589
      ],
      "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMaxSliceVerticalTest()": [
        591,
        596
      ]
    },
    "reverse_method_lines_dic": {
      "45": "SvgCoordinateUtils::::makeRelativeOperatorCoordinatesAbsolute(java.lang.String[],double[])",
      "46": "SvgCoordinateUtils::::makeRelativeOperatorCoordinatesAbsolute(java.lang.String[],double[])",
      "47": "SvgCoordinateUtils::::makeRelativeOperatorCoordinatesAbsolute(java.lang.String[],double[])",
      "48": "SvgCoordinateUtils::::makeRelativeOperatorCoordinatesAbsolute(java.lang.String[],double[])",
      "49": "SvgCoordinateUtils::::makeRelativeOperatorCoordinatesAbsolute(java.lang.String[],double[])",
      "50": "SvgCoordinateUtils::::makeRelativeOperatorCoordinatesAbsolute(java.lang.String[],double[])",
      "51": "SvgCoordinateUtils::::makeRelativeOperatorCoordinatesAbsolute(java.lang.String[],double[])",
      "52": "SvgCoordinateUtils::::makeRelativeOperatorCoordinatesAbsolute(java.lang.String[],double[])",
      "53": "SvgCoordinateUtils::::makeRelativeOperatorCoordinatesAbsolute(java.lang.String[],double[])",
      "54": "SvgCoordinateUtils::::makeRelativeOperatorCoordinatesAbsolute(java.lang.String[],double[])",
      "55": "SvgCoordinateUtils::::makeRelativeOperatorCoordinatesAbsolute(java.lang.String[],double[])",
      "56": "SvgCoordinateUtils::::makeRelativeOperatorCoordinatesAbsolute(java.lang.String[],double[])",
      "57": "SvgCoordinateUtils::::makeRelativeOperatorCoordinatesAbsolute(java.lang.String[],double[])",
      "58": "SvgCoordinateUtils::::makeRelativeOperatorCoordinatesAbsolute(java.lang.String[],double[])",
      "59": "SvgCoordinateUtils::::makeRelativeOperatorCoordinatesAbsolute(java.lang.String[],double[])",
      "60": "SvgCoordinateUtils::::makeRelativeOperatorCoordinatesAbsolute(java.lang.String[],double[])",
      "61": "SvgCoordinateUtils::::makeRelativeOperatorCoordinatesAbsolute(java.lang.String[],double[])",
      "62": "SvgCoordinateUtils::::makeRelativeOperatorCoordinatesAbsolute(java.lang.String[],double[])",
      "86": "SvgCoordinateUtils::::getCoordinateForUserSpaceOnUse(java.lang.String,double,double,double,float,float)",
      "87": "SvgCoordinateUtils::::getCoordinateForUserSpaceOnUse(java.lang.String,double,double,double,float,float)",
      "88": "SvgCoordinateUtils::::getCoordinateForUserSpaceOnUse(java.lang.String,double,double,double,float,float)",
      "89": "SvgCoordinateUtils::::getCoordinateForUserSpaceOnUse(java.lang.String,double,double,double,float,float)",
      "90": "SvgCoordinateUtils::::getCoordinateForUserSpaceOnUse(java.lang.String,double,double,double,float,float)",
      "91": "SvgCoordinateUtils::::getCoordinateForUserSpaceOnUse(java.lang.String,double,double,double,float,float)",
      "92": "SvgCoordinateUtils::::getCoordinateForUserSpaceOnUse(java.lang.String,double,double,double,float,float)",
      "93": "SvgCoordinateUtils::::getCoordinateForUserSpaceOnUse(java.lang.String,double,double,double,float,float)",
      "94": "SvgCoordinateUtils::::getCoordinateForUserSpaceOnUse(java.lang.String,double,double,double,float,float)",
      "95": "SvgCoordinateUtils::::getCoordinateForUserSpaceOnUse(java.lang.String,double,double,double,float,float)",
      "96": "SvgCoordinateUtils::::getCoordinateForUserSpaceOnUse(java.lang.String,double,double,double,float,float)",
      "97": "SvgCoordinateUtils::::getCoordinateForUserSpaceOnUse(java.lang.String,double,double,double,float,float)",
      "98": "SvgCoordinateUtils::::getCoordinateForUserSpaceOnUse(java.lang.String,double,double,double,float,float)",
      "109": "SvgCoordinateUtils::::getCoordinateForObjectBoundingBox(java.lang.String,double)",
      "110": "SvgCoordinateUtils::::getCoordinateForObjectBoundingBox(java.lang.String,double)",
      "111": "SvgCoordinateUtils::::getCoordinateForObjectBoundingBox(java.lang.String,double)",
      "112": "SvgCoordinateUtils::::getCoordinateForObjectBoundingBox(java.lang.String,double)",
      "113": "SvgCoordinateUtils::::getCoordinateForObjectBoundingBox(java.lang.String,double)",
      "114": "SvgCoordinateUtils::::getCoordinateForObjectBoundingBox(java.lang.String,double)",
      "115": "SvgCoordinateUtils::::getCoordinateForObjectBoundingBox(java.lang.String,double)",
      "116": "SvgCoordinateUtils::::getCoordinateForObjectBoundingBox(java.lang.String,double)",
      "117": "SvgCoordinateUtils::::getCoordinateForObjectBoundingBox(java.lang.String,double)",
      "118": "SvgCoordinateUtils::::getCoordinateForObjectBoundingBox(java.lang.String,double)",
      "119": "SvgCoordinateUtils::::getCoordinateForObjectBoundingBox(java.lang.String,double)",
      "120": "SvgCoordinateUtils::::getCoordinateForObjectBoundingBox(java.lang.String,double)",
      "121": "SvgCoordinateUtils::::getCoordinateForObjectBoundingBox(java.lang.String,double)",
      "122": "SvgCoordinateUtils::::getCoordinateForObjectBoundingBox(java.lang.String,double)",
      "123": "SvgCoordinateUtils::::getCoordinateForObjectBoundingBox(java.lang.String,double)",
      "124": "SvgCoordinateUtils::::getCoordinateForObjectBoundingBox(java.lang.String,double)",
      "125": "SvgCoordinateUtils::::getCoordinateForObjectBoundingBox(java.lang.String,double)",
      "126": "SvgCoordinateUtils::::getCoordinateForObjectBoundingBox(java.lang.String,double)",
      "127": "SvgCoordinateUtils::::getCoordinateForObjectBoundingBox(java.lang.String,double)",
      "128": "SvgCoordinateUtils::::getCoordinateForObjectBoundingBox(java.lang.String,double)",
      "129": "SvgCoordinateUtils::::getCoordinateForObjectBoundingBox(java.lang.String,double)"
    },
    "test_reverse_method_lines_dic": {
      "45": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors45degTest()",
      "46": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors45degTest()",
      "47": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors45degTest()",
      "48": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors45degTest()",
      "49": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors45degTest()",
      "50": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors45degTest()",
      "51": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors45degTest()",
      "52": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors45degTest()",
      "54": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors45degInverseTest()",
      "55": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors45degInverseTest()",
      "56": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors45degInverseTest()",
      "57": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors45degInverseTest()",
      "58": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors45degInverseTest()",
      "59": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors45degInverseTest()",
      "60": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors45degInverseTest()",
      "61": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors45degInverseTest()",
      "63": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors135degTest()",
      "64": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors135degTest()",
      "65": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors135degTest()",
      "66": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors135degTest()",
      "67": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors135degTest()",
      "68": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors135degTest()",
      "69": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors135degTest()",
      "70": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors135degTest()",
      "72": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors135degInverseTest()",
      "73": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors135degInverseTest()",
      "74": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors135degInverseTest()",
      "75": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors135degInverseTest()",
      "76": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors135degInverseTest()",
      "77": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors135degInverseTest()",
      "78": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors135degInverseTest()",
      "79": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors135degInverseTest()",
      "82": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors90degTest()",
      "83": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors90degTest()",
      "84": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors90degTest()",
      "85": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors90degTest()",
      "86": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors90degTest()",
      "87": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors90degTest()",
      "88": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors90degTest()",
      "89": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors90degTest()",
      "91": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors180degTest()",
      "92": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors180degTest()",
      "93": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors180degTest()",
      "94": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors180degTest()",
      "95": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors180degTest()",
      "96": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors180degTest()",
      "97": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors180degTest()",
      "98": "SvgCoordinateUtilsTest::::calculateAngleBetweenTwoVectors180degTest()",
      "100": "SvgCoordinateUtilsTest::::getCoordinateForUserSpaceOnUseDefaultTest()",
      "101": "SvgCoordinateUtilsTest::::getCoordinateForUserSpaceOnUseDefaultTest()",
      "102": "SvgCoordinateUtilsTest::::getCoordinateForUserSpaceOnUseDefaultTest()",
      "103": "SvgCoordinateUtilsTest::::getCoordinateForUserSpaceOnUseDefaultTest()",
      "104": "SvgCoordinateUtilsTest::::getCoordinateForUserSpaceOnUseDefaultTest()",
      "105": "SvgCoordinateUtilsTest::::getCoordinateForUserSpaceOnUseDefaultTest()",
      "106": "SvgCoordinateUtilsTest::::getCoordinateForUserSpaceOnUseDefaultTest()",
      "108": "SvgCoordinateUtilsTest::::getCoordinateForUserSpaceOnUsePercentTest()",
      "109": "SvgCoordinateUtilsTest::::getCoordinateForUserSpaceOnUsePercentTest()",
      "110": "SvgCoordinateUtilsTest::::getCoordinateForUserSpaceOnUsePercentTest()",
      "111": "SvgCoordinateUtilsTest::::getCoordinateForUserSpaceOnUsePercentTest()",
      "112": "SvgCoordinateUtilsTest::::getCoordinateForUserSpaceOnUsePercentTest()",
      "113": "SvgCoordinateUtilsTest::::getCoordinateForUserSpaceOnUsePercentTest()",
      "115": "SvgCoordinateUtilsTest::::getCoordinateForUserSpaceOnUsePxTest()",
      "116": "SvgCoordinateUtilsTest::::getCoordinateForUserSpaceOnUsePxTest()",
      "117": "SvgCoordinateUtilsTest::::getCoordinateForUserSpaceOnUsePxTest()",
      "118": "SvgCoordinateUtilsTest::::getCoordinateForUserSpaceOnUsePxTest()",
      "119": "SvgCoordinateUtilsTest::::getCoordinateForUserSpaceOnUsePxTest()",
      "120": "SvgCoordinateUtilsTest::::getCoordinateForUserSpaceOnUsePxTest()",
      "122": "SvgCoordinateUtilsTest::::getCoordinateForUserSpaceOnUseEmTest()",
      "123": "SvgCoordinateUtilsTest::::getCoordinateForUserSpaceOnUseEmTest()",
      "124": "SvgCoordinateUtilsTest::::getCoordinateForUserSpaceOnUseEmTest()",
      "125": "SvgCoordinateUtilsTest::::getCoordinateForUserSpaceOnUseEmTest()",
      "126": "SvgCoordinateUtilsTest::::getCoordinateForUserSpaceOnUseEmTest()",
      "127": "SvgCoordinateUtilsTest::::getCoordinateForUserSpaceOnUseEmTest()",
      "129": "SvgCoordinateUtilsTest::::getCoordinateForUserSpaceOnUseRemTest()",
      "130": "SvgCoordinateUtilsTest::::getCoordinateForUserSpaceOnUseRemTest()",
      "131": "SvgCoordinateUtilsTest::::getCoordinateForUserSpaceOnUseRemTest()",
      "132": "SvgCoordinateUtilsTest::::getCoordinateForUserSpaceOnUseRemTest()",
      "133": "SvgCoordinateUtilsTest::::getCoordinateForUserSpaceOnUseRemTest()",
      "134": "SvgCoordinateUtilsTest::::getCoordinateForUserSpaceOnUseRemTest()",
      "136": "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxPercentTest()",
      "137": "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxPercentTest()",
      "138": "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxPercentTest()",
      "139": "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxPercentTest()",
      "140": "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxPercentTest()",
      "142": "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxNumericFloatingValueTest()",
      "143": "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxNumericFloatingValueTest()",
      "144": "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxNumericFloatingValueTest()",
      "145": "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxNumericFloatingValueTest()",
      "146": "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxNumericFloatingValueTest()",
      "148": "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxNumericIntegerValueTest()",
      "149": "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxNumericIntegerValueTest()",
      "150": "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxNumericIntegerValueTest()",
      "151": "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxNumericIntegerValueTest()",
      "152": "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxNumericIntegerValueTest()",
      "154": "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxMetricFloatingValueTest()",
      "155": "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxMetricFloatingValueTest()",
      "156": "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxMetricFloatingValueTest()",
      "157": "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxMetricFloatingValueTest()",
      "158": "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxMetricFloatingValueTest()",
      "160": "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxMetricIntegerValueTest()",
      "161": "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxMetricIntegerValueTest()",
      "162": "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxMetricIntegerValueTest()",
      "163": "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxMetricIntegerValueTest()",
      "164": "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxMetricIntegerValueTest()",
      "166": "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxRelativeValueTest()",
      "167": "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxRelativeValueTest()",
      "168": "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxRelativeValueTest()",
      "169": "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxRelativeValueTest()",
      "170": "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxRelativeValueTest()",
      "172": "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxDefaultTest()",
      "173": "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxDefaultTest()",
      "174": "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxDefaultTest()",
      "175": "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxDefaultTest()",
      "176": "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxDefaultTest()",
      "177": "SvgCoordinateUtilsTest::::getCoordinateForObjectBoundingBoxDefaultTest()",
      "179": "SvgCoordinateUtilsTest::::applyViewBoxViewBoxIsNullTest()",
      "180": "SvgCoordinateUtilsTest::::applyViewBoxViewBoxIsNullTest()",
      "181": "SvgCoordinateUtilsTest::::applyViewBoxViewBoxIsNullTest()",
      "182": "SvgCoordinateUtilsTest::::applyViewBoxViewBoxIsNullTest()",
      "183": "SvgCoordinateUtilsTest::::applyViewBoxViewBoxIsNullTest()",
      "184": "SvgCoordinateUtilsTest::::applyViewBoxViewBoxIsNullTest()",
      "185": "SvgCoordinateUtilsTest::::applyViewBoxViewBoxIsNullTest()",
      "187": "SvgCoordinateUtilsTest::::applyViewBoxViewBoxWidthIsZeroTest()",
      "188": "SvgCoordinateUtilsTest::::applyViewBoxViewBoxWidthIsZeroTest()",
      "189": "SvgCoordinateUtilsTest::::applyViewBoxViewBoxWidthIsZeroTest()",
      "190": "SvgCoordinateUtilsTest::::applyViewBoxViewBoxWidthIsZeroTest()",
      "191": "SvgCoordinateUtilsTest::::applyViewBoxViewBoxWidthIsZeroTest()",
      "192": "SvgCoordinateUtilsTest::::applyViewBoxViewBoxWidthIsZeroTest()",
      "193": "SvgCoordinateUtilsTest::::applyViewBoxViewBoxWidthIsZeroTest()",
      "195": "SvgCoordinateUtilsTest::::applyViewBoxViewBoxHeightIsZeroTest()",
      "196": "SvgCoordinateUtilsTest::::applyViewBoxViewBoxHeightIsZeroTest()",
      "197": "SvgCoordinateUtilsTest::::applyViewBoxViewBoxHeightIsZeroTest()",
      "198": "SvgCoordinateUtilsTest::::applyViewBoxViewBoxHeightIsZeroTest()",
      "199": "SvgCoordinateUtilsTest::::applyViewBoxViewBoxHeightIsZeroTest()",
      "200": "SvgCoordinateUtilsTest::::applyViewBoxViewBoxHeightIsZeroTest()",
      "201": "SvgCoordinateUtilsTest::::applyViewBoxViewBoxHeightIsZeroTest()",
      "203": "SvgCoordinateUtilsTest::::applyViewBoxViewBoxWidthIsNegativeTest()",
      "204": "SvgCoordinateUtilsTest::::applyViewBoxViewBoxWidthIsNegativeTest()",
      "205": "SvgCoordinateUtilsTest::::applyViewBoxViewBoxWidthIsNegativeTest()",
      "206": "SvgCoordinateUtilsTest::::applyViewBoxViewBoxWidthIsNegativeTest()",
      "207": "SvgCoordinateUtilsTest::::applyViewBoxViewBoxWidthIsNegativeTest()",
      "208": "SvgCoordinateUtilsTest::::applyViewBoxViewBoxWidthIsNegativeTest()",
      "209": "SvgCoordinateUtilsTest::::applyViewBoxViewBoxWidthIsNegativeTest()",
      "211": "SvgCoordinateUtilsTest::::applyViewBoxViewBoxHeightIsNegativeTest()",
      "212": "SvgCoordinateUtilsTest::::applyViewBoxViewBoxHeightIsNegativeTest()",
      "213": "SvgCoordinateUtilsTest::::applyViewBoxViewBoxHeightIsNegativeTest()",
      "214": "SvgCoordinateUtilsTest::::applyViewBoxViewBoxHeightIsNegativeTest()",
      "215": "SvgCoordinateUtilsTest::::applyViewBoxViewBoxHeightIsNegativeTest()",
      "216": "SvgCoordinateUtilsTest::::applyViewBoxViewBoxHeightIsNegativeTest()",
      "217": "SvgCoordinateUtilsTest::::applyViewBoxViewBoxHeightIsNegativeTest()",
      "219": "SvgCoordinateUtilsTest::::applyViewBoxCurrentViewPortIsNullTest()",
      "220": "SvgCoordinateUtilsTest::::applyViewBoxCurrentViewPortIsNullTest()",
      "221": "SvgCoordinateUtilsTest::::applyViewBoxCurrentViewPortIsNullTest()",
      "222": "SvgCoordinateUtilsTest::::applyViewBoxCurrentViewPortIsNullTest()",
      "223": "SvgCoordinateUtilsTest::::applyViewBoxCurrentViewPortIsNullTest()",
      "224": "SvgCoordinateUtilsTest::::applyViewBoxCurrentViewPortIsNullTest()",
      "225": "SvgCoordinateUtilsTest::::applyViewBoxCurrentViewPortIsNullTest()",
      "227": "SvgCoordinateUtilsTest::::applyViewBoxAllNullTest()",
      "228": "SvgCoordinateUtilsTest::::applyViewBoxAllNullTest()",
      "229": "SvgCoordinateUtilsTest::::applyViewBoxAllNullTest()",
      "230": "SvgCoordinateUtilsTest::::applyViewBoxAllNullTest()",
      "231": "SvgCoordinateUtilsTest::::applyViewBoxAllNullTest()",
      "232": "SvgCoordinateUtilsTest::::applyViewBoxAllNullTest()",
      "233": "SvgCoordinateUtilsTest::::applyViewBoxAllNullTest()",
      "235": "SvgCoordinateUtilsTest::::applyViewBoxCurrentViewPortZeroWidthHeightTest()",
      "236": "SvgCoordinateUtilsTest::::applyViewBoxCurrentViewPortZeroWidthHeightTest()",
      "237": "SvgCoordinateUtilsTest::::applyViewBoxCurrentViewPortZeroWidthHeightTest()",
      "238": "SvgCoordinateUtilsTest::::applyViewBoxCurrentViewPortZeroWidthHeightTest()",
      "239": "SvgCoordinateUtilsTest::::applyViewBoxCurrentViewPortZeroWidthHeightTest()",
      "240": "SvgCoordinateUtilsTest::::applyViewBoxCurrentViewPortZeroWidthHeightTest()",
      "241": "SvgCoordinateUtilsTest::::applyViewBoxCurrentViewPortZeroWidthHeightTest()",
      "243": "SvgCoordinateUtilsTest::::applyViewBoxCurrentViewPortNegativeWidthHeightTest()",
      "244": "SvgCoordinateUtilsTest::::applyViewBoxCurrentViewPortNegativeWidthHeightTest()",
      "245": "SvgCoordinateUtilsTest::::applyViewBoxCurrentViewPortNegativeWidthHeightTest()",
      "246": "SvgCoordinateUtilsTest::::applyViewBoxCurrentViewPortNegativeWidthHeightTest()",
      "247": "SvgCoordinateUtilsTest::::applyViewBoxCurrentViewPortNegativeWidthHeightTest()",
      "248": "SvgCoordinateUtilsTest::::applyViewBoxCurrentViewPortNegativeWidthHeightTest()",
      "249": "SvgCoordinateUtilsTest::::applyViewBoxCurrentViewPortNegativeWidthHeightTest()",
      "251": "SvgCoordinateUtilsTest::::applyViewBoxAlignIsNullSliceTest()",
      "252": "SvgCoordinateUtilsTest::::applyViewBoxAlignIsNullSliceTest()",
      "253": "SvgCoordinateUtilsTest::::applyViewBoxAlignIsNullSliceTest()",
      "254": "SvgCoordinateUtilsTest::::applyViewBoxAlignIsNullSliceTest()",
      "255": "SvgCoordinateUtilsTest::::applyViewBoxAlignIsNullSliceTest()",
      "256": "SvgCoordinateUtilsTest::::applyViewBoxAlignIsNullSliceTest()",
      "258": "SvgCoordinateUtilsTest::::applyViewBoxAlignIsNullMeetTest()",
      "259": "SvgCoordinateUtilsTest::::applyViewBoxAlignIsNullMeetTest()",
      "260": "SvgCoordinateUtilsTest::::applyViewBoxAlignIsNullMeetTest()",
      "261": "SvgCoordinateUtilsTest::::applyViewBoxAlignIsNullMeetTest()",
      "262": "SvgCoordinateUtilsTest::::applyViewBoxAlignIsNullMeetTest()",
      "263": "SvgCoordinateUtilsTest::::applyViewBoxAlignIsNullMeetTest()",
      "265": "SvgCoordinateUtilsTest::::applyViewBoxAlignIsNullIncorrectMeetOrSliceTest()",
      "266": "SvgCoordinateUtilsTest::::applyViewBoxAlignIsNullIncorrectMeetOrSliceTest()",
      "267": "SvgCoordinateUtilsTest::::applyViewBoxAlignIsNullIncorrectMeetOrSliceTest()",
      "268": "SvgCoordinateUtilsTest::::applyViewBoxAlignIsNullIncorrectMeetOrSliceTest()",
      "269": "SvgCoordinateUtilsTest::::applyViewBoxAlignIsNullIncorrectMeetOrSliceTest()",
      "270": "SvgCoordinateUtilsTest::::applyViewBoxAlignIsNullIncorrectMeetOrSliceTest()",
      "272": "SvgCoordinateUtilsTest::::applyViewBoxMeetOrSliceIsNullXMaxYMaxTest()",
      "273": "SvgCoordinateUtilsTest::::applyViewBoxMeetOrSliceIsNullXMaxYMaxTest()",
      "274": "SvgCoordinateUtilsTest::::applyViewBoxMeetOrSliceIsNullXMaxYMaxTest()",
      "275": "SvgCoordinateUtilsTest::::applyViewBoxMeetOrSliceIsNullXMaxYMaxTest()",
      "276": "SvgCoordinateUtilsTest::::applyViewBoxMeetOrSliceIsNullXMaxYMaxTest()",
      "277": "SvgCoordinateUtilsTest::::applyViewBoxMeetOrSliceIsNullXMaxYMaxTest()",
      "278": "SvgCoordinateUtilsTest::::applyViewBoxMeetOrSliceIsNullXMaxYMaxTest()",
      "280": "SvgCoordinateUtilsTest::::applyViewBoxMeetOrSliceIsNullXMinYMinTest()",
      "281": "SvgCoordinateUtilsTest::::applyViewBoxMeetOrSliceIsNullXMinYMinTest()",
      "282": "SvgCoordinateUtilsTest::::applyViewBoxMeetOrSliceIsNullXMinYMinTest()",
      "283": "SvgCoordinateUtilsTest::::applyViewBoxMeetOrSliceIsNullXMinYMinTest()",
      "284": "SvgCoordinateUtilsTest::::applyViewBoxMeetOrSliceIsNullXMinYMinTest()",
      "285": "SvgCoordinateUtilsTest::::applyViewBoxMeetOrSliceIsNullXMinYMinTest()",
      "286": "SvgCoordinateUtilsTest::::applyViewBoxMeetOrSliceIsNullXMinYMinTest()",
      "288": "SvgCoordinateUtilsTest::::applyViewBoxMeetOrSliceIsNullIncorrectAlignTest()",
      "289": "SvgCoordinateUtilsTest::::applyViewBoxMeetOrSliceIsNullIncorrectAlignTest()",
      "290": "SvgCoordinateUtilsTest::::applyViewBoxMeetOrSliceIsNullIncorrectAlignTest()",
      "291": "SvgCoordinateUtilsTest::::applyViewBoxMeetOrSliceIsNullIncorrectAlignTest()",
      "292": "SvgCoordinateUtilsTest::::applyViewBoxMeetOrSliceIsNullIncorrectAlignTest()",
      "293": "SvgCoordinateUtilsTest::::applyViewBoxMeetOrSliceIsNullIncorrectAlignTest()",
      "294": "SvgCoordinateUtilsTest::::applyViewBoxMeetOrSliceIsNullIncorrectAlignTest()",
      "296": "SvgCoordinateUtilsTest::::applyViewBoxIncorrectAlignMeetTest()",
      "297": "SvgCoordinateUtilsTest::::applyViewBoxIncorrectAlignMeetTest()",
      "298": "SvgCoordinateUtilsTest::::applyViewBoxIncorrectAlignMeetTest()",
      "299": "SvgCoordinateUtilsTest::::applyViewBoxIncorrectAlignMeetTest()",
      "300": "SvgCoordinateUtilsTest::::applyViewBoxIncorrectAlignMeetTest()",
      "301": "SvgCoordinateUtilsTest::::applyViewBoxIncorrectAlignMeetTest()",
      "302": "SvgCoordinateUtilsTest::::applyViewBoxIncorrectAlignMeetTest()",
      "304": "SvgCoordinateUtilsTest::::applyViewBoxIncorrectAlignSliceTest()",
      "305": "SvgCoordinateUtilsTest::::applyViewBoxIncorrectAlignSliceTest()",
      "306": "SvgCoordinateUtilsTest::::applyViewBoxIncorrectAlignSliceTest()",
      "307": "SvgCoordinateUtilsTest::::applyViewBoxIncorrectAlignSliceTest()",
      "308": "SvgCoordinateUtilsTest::::applyViewBoxIncorrectAlignSliceTest()",
      "309": "SvgCoordinateUtilsTest::::applyViewBoxIncorrectAlignSliceTest()",
      "310": "SvgCoordinateUtilsTest::::applyViewBoxIncorrectAlignSliceTest()",
      "312": "SvgCoordinateUtilsTest::::applyViewBoxNoneNullTest()",
      "313": "SvgCoordinateUtilsTest::::applyViewBoxNoneNullTest()",
      "314": "SvgCoordinateUtilsTest::::applyViewBoxNoneNullTest()",
      "315": "SvgCoordinateUtilsTest::::applyViewBoxNoneNullTest()",
      "316": "SvgCoordinateUtilsTest::::applyViewBoxNoneNullTest()",
      "317": "SvgCoordinateUtilsTest::::applyViewBoxNoneNullTest()",
      "318": "SvgCoordinateUtilsTest::::applyViewBoxNoneNullTest()",
      "320": "SvgCoordinateUtilsTest::::applyViewBoxNoneMeetTest()",
      "321": "SvgCoordinateUtilsTest::::applyViewBoxNoneMeetTest()",
      "322": "SvgCoordinateUtilsTest::::applyViewBoxNoneMeetTest()",
      "323": "SvgCoordinateUtilsTest::::applyViewBoxNoneMeetTest()",
      "324": "SvgCoordinateUtilsTest::::applyViewBoxNoneMeetTest()",
      "325": "SvgCoordinateUtilsTest::::applyViewBoxNoneMeetTest()",
      "326": "SvgCoordinateUtilsTest::::applyViewBoxNoneMeetTest()",
      "328": "SvgCoordinateUtilsTest::::applyViewBoxNoneSliceTest()",
      "329": "SvgCoordinateUtilsTest::::applyViewBoxNoneSliceTest()",
      "330": "SvgCoordinateUtilsTest::::applyViewBoxNoneSliceTest()",
      "331": "SvgCoordinateUtilsTest::::applyViewBoxNoneSliceTest()",
      "332": "SvgCoordinateUtilsTest::::applyViewBoxNoneSliceTest()",
      "333": "SvgCoordinateUtilsTest::::applyViewBoxNoneSliceTest()",
      "334": "SvgCoordinateUtilsTest::::applyViewBoxNoneSliceTest()",
      "336": "SvgCoordinateUtilsTest::::applyViewBoxNoneMeetOrSliceIsIncorrectTest()",
      "337": "SvgCoordinateUtilsTest::::applyViewBoxNoneMeetOrSliceIsIncorrectTest()",
      "338": "SvgCoordinateUtilsTest::::applyViewBoxNoneMeetOrSliceIsIncorrectTest()",
      "339": "SvgCoordinateUtilsTest::::applyViewBoxNoneMeetOrSliceIsIncorrectTest()",
      "340": "SvgCoordinateUtilsTest::::applyViewBoxNoneMeetOrSliceIsIncorrectTest()",
      "341": "SvgCoordinateUtilsTest::::applyViewBoxNoneMeetOrSliceIsIncorrectTest()",
      "342": "SvgCoordinateUtilsTest::::applyViewBoxNoneMeetOrSliceIsIncorrectTest()",
      "343": "SvgCoordinateUtilsTest::::applyViewBoxNoneMeetOrSliceIsIncorrectTest()",
      "345": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMinMeetHorizontalViewPortTest()",
      "346": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMinMeetHorizontalViewPortTest()",
      "347": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMinMeetHorizontalViewPortTest()",
      "348": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMinMeetHorizontalViewPortTest()",
      "349": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMinMeetHorizontalViewPortTest()",
      "350": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMinMeetHorizontalViewPortTest()",
      "352": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMinSliceHorizontalViewPortTest()",
      "353": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMinSliceHorizontalViewPortTest()",
      "354": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMinSliceHorizontalViewPortTest()",
      "355": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMinSliceHorizontalViewPortTest()",
      "356": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMinSliceHorizontalViewPortTest()",
      "357": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMinSliceHorizontalViewPortTest()",
      "359": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMinMeetVerticalViewPortTest()",
      "360": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMinMeetVerticalViewPortTest()",
      "361": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMinMeetVerticalViewPortTest()",
      "362": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMinMeetVerticalViewPortTest()",
      "363": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMinMeetVerticalViewPortTest()",
      "364": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMinMeetVerticalViewPortTest()",
      "366": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMinSliceVerticalViewPortTest()",
      "367": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMinSliceVerticalViewPortTest()",
      "368": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMinSliceVerticalViewPortTest()",
      "369": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMinSliceVerticalViewPortTest()",
      "370": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMinSliceVerticalViewPortTest()",
      "371": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMinSliceVerticalViewPortTest()",
      "373": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMidMeetHorizontalTest()",
      "374": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMidMeetHorizontalTest()",
      "375": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMidMeetHorizontalTest()",
      "376": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMidMeetHorizontalTest()",
      "377": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMidMeetHorizontalTest()",
      "378": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMidMeetHorizontalTest()",
      "380": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMidSliceHorizontalTest()",
      "381": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMidSliceHorizontalTest()",
      "382": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMidSliceHorizontalTest()",
      "383": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMidSliceHorizontalTest()",
      "384": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMidSliceHorizontalTest()",
      "385": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMidSliceHorizontalTest()",
      "387": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMidMeetVerticalTest()",
      "388": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMidMeetVerticalTest()",
      "389": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMidMeetVerticalTest()",
      "390": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMidMeetVerticalTest()",
      "391": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMidMeetVerticalTest()",
      "392": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMidMeetVerticalTest()",
      "394": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMidSliceVerticalTest()",
      "395": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMidSliceVerticalTest()",
      "396": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMidSliceVerticalTest()",
      "397": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMidSliceVerticalTest()",
      "398": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMidSliceVerticalTest()",
      "399": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMidSliceVerticalTest()",
      "402": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMaxMeetHorizontalTest()",
      "403": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMaxMeetHorizontalTest()",
      "404": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMaxMeetHorizontalTest()",
      "405": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMaxMeetHorizontalTest()",
      "406": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMaxMeetHorizontalTest()",
      "407": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMaxMeetHorizontalTest()",
      "409": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMaxSliceHorizontalTest()",
      "410": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMaxSliceHorizontalTest()",
      "411": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMaxSliceHorizontalTest()",
      "412": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMaxSliceHorizontalTest()",
      "413": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMaxSliceHorizontalTest()",
      "414": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMaxSliceHorizontalTest()",
      "416": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMaxMeetVerticalTest()",
      "417": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMaxMeetVerticalTest()",
      "418": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMaxMeetVerticalTest()",
      "419": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMaxMeetVerticalTest()",
      "420": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMaxMeetVerticalTest()",
      "421": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMaxMeetVerticalTest()",
      "423": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMaxSliceVerticalTest()",
      "424": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMaxSliceVerticalTest()",
      "425": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMaxSliceVerticalTest()",
      "426": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMaxSliceVerticalTest()",
      "427": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMaxSliceVerticalTest()",
      "428": "SvgCoordinateUtilsTest::::applyViewBoxXMinYMaxSliceVerticalTest()",
      "430": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMinMeetHorizontalTest()",
      "431": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMinMeetHorizontalTest()",
      "432": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMinMeetHorizontalTest()",
      "433": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMinMeetHorizontalTest()",
      "434": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMinMeetHorizontalTest()",
      "435": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMinMeetHorizontalTest()",
      "437": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMinSliceHorizontalTest()",
      "438": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMinSliceHorizontalTest()",
      "439": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMinSliceHorizontalTest()",
      "440": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMinSliceHorizontalTest()",
      "441": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMinSliceHorizontalTest()",
      "442": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMinSliceHorizontalTest()",
      "444": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMinMeetVerticalTest()",
      "445": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMinMeetVerticalTest()",
      "446": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMinMeetVerticalTest()",
      "447": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMinMeetVerticalTest()",
      "448": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMinMeetVerticalTest()",
      "449": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMinMeetVerticalTest()",
      "451": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMinSliceVerticalTest()",
      "452": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMinSliceVerticalTest()",
      "453": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMinSliceVerticalTest()",
      "454": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMinSliceVerticalTest()",
      "455": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMinSliceVerticalTest()",
      "456": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMinSliceVerticalTest()",
      "458": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMidMeetHorizontalTest()",
      "459": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMidMeetHorizontalTest()",
      "460": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMidMeetHorizontalTest()",
      "461": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMidMeetHorizontalTest()",
      "462": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMidMeetHorizontalTest()",
      "463": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMidMeetHorizontalTest()",
      "465": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMidSliceHorizontalTest()",
      "466": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMidSliceHorizontalTest()",
      "467": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMidSliceHorizontalTest()",
      "468": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMidSliceHorizontalTest()",
      "469": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMidSliceHorizontalTest()",
      "470": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMidSliceHorizontalTest()",
      "472": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMidMeetVerticalTest()",
      "473": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMidMeetVerticalTest()",
      "474": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMidMeetVerticalTest()",
      "475": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMidMeetVerticalTest()",
      "476": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMidMeetVerticalTest()",
      "477": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMidMeetVerticalTest()",
      "479": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMidSliceVerticalTest()",
      "480": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMidSliceVerticalTest()",
      "481": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMidSliceVerticalTest()",
      "482": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMidSliceVerticalTest()",
      "483": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMidSliceVerticalTest()",
      "484": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMidSliceVerticalTest()",
      "486": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMaxMeetHorizontalTest()",
      "487": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMaxMeetHorizontalTest()",
      "488": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMaxMeetHorizontalTest()",
      "489": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMaxMeetHorizontalTest()",
      "490": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMaxMeetHorizontalTest()",
      "491": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMaxMeetHorizontalTest()",
      "493": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMaxSliceHorizontalTest()",
      "494": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMaxSliceHorizontalTest()",
      "495": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMaxSliceHorizontalTest()",
      "496": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMaxSliceHorizontalTest()",
      "497": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMaxSliceHorizontalTest()",
      "498": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMaxSliceHorizontalTest()",
      "500": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMaxMeetVerticalTest()",
      "501": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMaxMeetVerticalTest()",
      "502": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMaxMeetVerticalTest()",
      "503": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMaxMeetVerticalTest()",
      "504": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMaxMeetVerticalTest()",
      "505": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMaxMeetVerticalTest()",
      "507": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMaxSliceVerticalTest()",
      "508": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMaxSliceVerticalTest()",
      "509": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMaxSliceVerticalTest()",
      "510": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMaxSliceVerticalTest()",
      "511": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMaxSliceVerticalTest()",
      "512": "SvgCoordinateUtilsTest::::applyViewBoxXMidYMaxSliceVerticalTest()",
      "514": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMinMeetHorizontalTest()",
      "515": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMinMeetHorizontalTest()",
      "516": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMinMeetHorizontalTest()",
      "517": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMinMeetHorizontalTest()",
      "518": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMinMeetHorizontalTest()",
      "519": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMinMeetHorizontalTest()",
      "521": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMinSliceHorizontalTest()",
      "522": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMinSliceHorizontalTest()",
      "523": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMinSliceHorizontalTest()",
      "524": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMinSliceHorizontalTest()",
      "525": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMinSliceHorizontalTest()",
      "526": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMinSliceHorizontalTest()",
      "528": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMinMeetVerticalTest()",
      "529": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMinMeetVerticalTest()",
      "530": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMinMeetVerticalTest()",
      "531": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMinMeetVerticalTest()",
      "532": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMinMeetVerticalTest()",
      "533": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMinMeetVerticalTest()",
      "535": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMinSliceVerticalTest()",
      "536": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMinSliceVerticalTest()",
      "537": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMinSliceVerticalTest()",
      "538": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMinSliceVerticalTest()",
      "539": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMinSliceVerticalTest()",
      "540": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMinSliceVerticalTest()",
      "542": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMidMeetHorizontalTest()",
      "543": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMidMeetHorizontalTest()",
      "544": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMidMeetHorizontalTest()",
      "545": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMidMeetHorizontalTest()",
      "546": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMidMeetHorizontalTest()",
      "547": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMidMeetHorizontalTest()",
      "549": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMidSliceHorizontalTest()",
      "550": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMidSliceHorizontalTest()",
      "551": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMidSliceHorizontalTest()",
      "552": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMidSliceHorizontalTest()",
      "553": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMidSliceHorizontalTest()",
      "554": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMidSliceHorizontalTest()",
      "556": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMidMeetVerticalTest()",
      "557": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMidMeetVerticalTest()",
      "558": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMidMeetVerticalTest()",
      "559": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMidMeetVerticalTest()",
      "560": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMidMeetVerticalTest()",
      "561": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMidMeetVerticalTest()",
      "563": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMidSliceVerticalTest()",
      "564": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMidSliceVerticalTest()",
      "565": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMidSliceVerticalTest()",
      "566": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMidSliceVerticalTest()",
      "567": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMidSliceVerticalTest()",
      "568": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMidSliceVerticalTest()",
      "570": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMaxMeetHorizontalTest()",
      "571": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMaxMeetHorizontalTest()",
      "572": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMaxMeetHorizontalTest()",
      "573": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMaxMeetHorizontalTest()",
      "574": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMaxMeetHorizontalTest()",
      "575": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMaxMeetHorizontalTest()",
      "577": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMaxSliceHorizontalTest()",
      "578": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMaxSliceHorizontalTest()",
      "579": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMaxSliceHorizontalTest()",
      "580": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMaxSliceHorizontalTest()",
      "581": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMaxSliceHorizontalTest()",
      "582": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMaxSliceHorizontalTest()",
      "584": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMaxMeetVerticalTest()",
      "585": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMaxMeetVerticalTest()",
      "586": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMaxMeetVerticalTest()",
      "587": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMaxMeetVerticalTest()",
      "588": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMaxMeetVerticalTest()",
      "589": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMaxMeetVerticalTest()",
      "591": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMaxSliceVerticalTest()",
      "592": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMaxSliceVerticalTest()",
      "593": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMaxSliceVerticalTest()",
      "594": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMaxSliceVerticalTest()",
      "595": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMaxSliceVerticalTest()",
      "596": "SvgCoordinateUtilsTest::::applyViewBoxXMaxYMaxSliceVerticalTest()"
    },
    "tests": [
      {
        "test_lines": [
          45,
          52
        ],
        "covered_lines": [
          72
        ]
      },
      {
        "test_lines": [
          54,
          61
        ],
        "covered_lines": [
          72
        ]
      },
      {
        "test_lines": [
          63,
          70
        ],
        "covered_lines": [
          72
        ]
      },
      {
        "test_lines": [
          72,
          79
        ],
        "covered_lines": [
          72
        ]
      },
      {
        "test_lines": [
          82,
          89
        ],
        "covered_lines": [
          72
        ]
      },
      {
        "test_lines": [
          91,
          98
        ],
        "covered_lines": [
          72
        ]
      },
      {
        "test_lines": [
          100,
          106
        ],
        "covered_lines": [
          89,
          90,
          91,
          97
        ]
      },
      {
        "test_lines": [
          108,
          113
        ],
        "covered_lines": [
          89,
          90,
          92,
          93,
          97
        ]
      },
      {
        "test_lines": [
          115,
          120
        ],
        "covered_lines": [
          89,
          90,
          92,
          95,
          97
        ]
      },
      {
        "test_lines": [
          122,
          127
        ],
        "covered_lines": [
          89,
          90,
          92,
          95,
          97
        ]
      },
      {
        "test_lines": [
          129,
          134
        ],
        "covered_lines": [
          89,
          90,
          92,
          95,
          97
        ]
      },
      {
        "test_lines": [
          136,
          140
        ],
        "covered_lines": [
          110,
          111
        ]
      },
      {
        "test_lines": [
          142,
          146
        ],
        "covered_lines": [
          110,
          113,
          117,
          118,
          124,
          125
        ]
      },
      {
        "test_lines": [
          148,
          152
        ],
        "covered_lines": [
          110,
          113,
          117,
          118,
          124,
          125
        ]
      },
      {
        "test_lines": [
          154,
          158
        ],
        "covered_lines": [
          110,
          113,
          114,
          117,
          118,
          124,
          125
        ]
      },
      {
        "test_lines": [
          160,
          164
        ],
        "covered_lines": [
          110,
          113,
          114,
          117,
          118,
          124,
          125
        ]
      },
      {
        "test_lines": [
          166,
          170
        ],
        "covered_lines": [
          110,
          113,
          114,
          115,
          117,
          118,
          124,
          125
        ]
      },
      {
        "test_lines": [
          172,
          177
        ],
        "covered_lines": [
          110,
          113,
          114,
          115,
          128
        ]
      },
      {
        "test_lines": [
          179,
          185
        ],
        "covered_lines": [
          149,
          153,
          154
        ]
      },
      {
        "test_lines": [
          187,
          193
        ],
        "covered_lines": [
          149,
          153,
          154
        ]
      },
      {
        "test_lines": [
          195,
          201
        ],
        "covered_lines": [
          149,
          153,
          154
        ]
      },
      {
        "test_lines": [
          203,
          209
        ],
        "covered_lines": [
          149,
          153,
          154
        ]
      },
      {
        "test_lines": [
          211,
          217
        ],
        "covered_lines": [
          149,
          153,
          154
        ]
      },
      {
        "test_lines": [
          219,
          225
        ],
        "covered_lines": [
          149,
          150
        ]
      },
      {
        "test_lines": [
          227,
          233
        ],
        "covered_lines": [
          149,
          150
        ]
      },
      {
        "test_lines": [
          235,
          241
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          160,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          230,
          231,
          232,
          238,
          239,
          241,
          246,
          247,
          248,
          250,
          251
        ]
      },
      {
        "test_lines": [
          243,
          249
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          160,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          230,
          231,
          232,
          238,
          239,
          241,
          246,
          247,
          248,
          250,
          251
        ]
      },
      {
        "test_lines": [
          251,
          256
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          160,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          230,
          231,
          232,
          238,
          239,
          241,
          246,
          247,
          248,
          250,
          251
        ]
      },
      {
        "test_lines": [
          258,
          263
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          160,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          230,
          231,
          232,
          238,
          239,
          241,
          246,
          247,
          248,
          250,
          251
        ]
      },
      {
        "test_lines": [
          265,
          270
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          160,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          230,
          231,
          232,
          238,
          239,
          241,
          246,
          247,
          248,
          250,
          251
        ]
      },
      {
        "test_lines": [
          272,
          278
        ],
        "covered_lines": [
          149,
          153,
          157,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          226,
          227,
          228,
          238,
          239,
          241,
          246,
          247,
          248,
          250,
          251
        ]
      },
      {
        "test_lines": [
          280,
          286
        ],
        "covered_lines": [
          149,
          153,
          157,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          198,
          199,
          200,
          238,
          239,
          241,
          246,
          247,
          248,
          250,
          251
        ]
      },
      {
        "test_lines": [
          288,
          294
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          230,
          231,
          232,
          234,
          238,
          239,
          241,
          246,
          247,
          248,
          250,
          251
        ]
      },
      {
        "test_lines": [
          296,
          302
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          230,
          231,
          232,
          234,
          238,
          239,
          241,
          246,
          247,
          248,
          250,
          251
        ]
      },
      {
        "test_lines": [
          304,
          310
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          230,
          231,
          232,
          234,
          238,
          239,
          241,
          246,
          247,
          248,
          249,
          250,
          251
        ]
      },
      {
        "test_lines": [
          312,
          318
        ],
        "covered_lines": [
          149,
          153,
          157,
          165,
          166,
          167,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          198,
          199,
          200,
          238,
          239,
          241
        ]
      },
      {
        "test_lines": [
          320,
          326
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          166,
          167,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          198,
          199,
          200,
          238,
          239,
          241
        ]
      },
      {
        "test_lines": [
          328,
          334
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          166,
          167,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          198,
          199,
          200,
          238,
          239,
          241
        ]
      },
      {
        "test_lines": [
          336,
          343
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          160,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          230,
          231,
          232,
          238,
          239,
          241,
          246,
          247,
          248,
          250,
          251
        ]
      },
      {
        "test_lines": [
          345,
          350
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          198,
          199,
          200,
          238,
          239,
          241,
          246,
          247,
          248,
          250,
          251
        ]
      },
      {
        "test_lines": [
          352,
          357
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          198,
          199,
          200,
          238,
          239,
          241,
          246,
          247,
          248,
          249
        ]
      },
      {
        "test_lines": [
          359,
          364
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          198,
          199,
          200,
          238,
          239,
          241,
          246,
          247,
          248,
          250,
          251
        ]
      },
      {
        "test_lines": [
          366,
          371
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          198,
          199,
          200,
          238,
          239,
          241,
          246,
          247,
          248,
          249
        ]
      },
      {
        "test_lines": [
          373,
          378
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          202,
          203,
          204,
          238,
          239,
          241,
          246,
          247,
          248,
          250,
          251
        ]
      },
      {
        "test_lines": [
          380,
          385
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          202,
          203,
          204,
          238,
          239,
          241,
          246,
          247,
          248,
          249
        ]
      },
      {
        "test_lines": [
          387,
          392
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          202,
          203,
          204,
          238,
          239,
          241,
          246,
          247,
          248,
          250,
          251
        ]
      },
      {
        "test_lines": [
          394,
          399
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          202,
          203,
          204,
          238,
          239,
          241,
          246,
          247,
          248,
          249
        ]
      },
      {
        "test_lines": [
          402,
          407
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          206,
          207,
          208,
          238,
          239,
          241,
          246,
          247,
          248,
          250,
          251
        ]
      },
      {
        "test_lines": [
          409,
          414
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          206,
          207,
          208,
          238,
          239,
          241,
          246,
          247,
          248,
          249
        ]
      },
      {
        "test_lines": [
          416,
          421
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          206,
          207,
          208,
          238,
          239,
          241,
          246,
          247,
          248,
          250,
          251
        ]
      },
      {
        "test_lines": [
          423,
          428
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          206,
          207,
          208,
          238,
          239,
          241,
          246,
          247,
          248,
          249
        ]
      },
      {
        "test_lines": [
          430,
          435
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          210,
          211,
          212,
          238,
          239,
          241,
          246,
          247,
          248,
          250,
          251
        ]
      },
      {
        "test_lines": [
          437,
          442
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          210,
          211,
          212,
          238,
          239,
          241,
          246,
          247,
          248,
          249
        ]
      },
      {
        "test_lines": [
          444,
          449
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          210,
          211,
          212,
          238,
          239,
          241,
          246,
          247,
          248,
          250,
          251
        ]
      },
      {
        "test_lines": [
          451,
          456
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          210,
          211,
          212,
          238,
          239,
          241,
          246,
          247,
          248,
          249
        ]
      },
      {
        "test_lines": [
          458,
          463
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          230,
          231,
          232,
          238,
          239,
          241,
          246,
          247,
          248,
          250,
          251
        ]
      },
      {
        "test_lines": [
          465,
          470
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          230,
          231,
          232,
          238,
          239,
          241,
          246,
          247,
          248,
          249
        ]
      },
      {
        "test_lines": [
          472,
          477
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          230,
          231,
          232,
          238,
          239,
          241,
          246,
          247,
          248,
          250,
          251
        ]
      },
      {
        "test_lines": [
          479,
          484
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          230,
          231,
          232,
          238,
          239,
          241,
          246,
          247,
          248,
          249
        ]
      },
      {
        "test_lines": [
          486,
          491
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          214,
          215,
          216,
          238,
          239,
          241,
          246,
          247,
          248,
          250,
          251
        ]
      },
      {
        "test_lines": [
          493,
          498
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          214,
          215,
          216,
          238,
          239,
          241,
          246,
          247,
          248,
          249
        ]
      },
      {
        "test_lines": [
          500,
          505
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          214,
          215,
          216,
          238,
          239,
          241,
          246,
          247,
          248,
          250,
          251
        ]
      },
      {
        "test_lines": [
          507,
          512
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          214,
          215,
          216,
          238,
          239,
          241,
          246,
          247,
          248,
          249
        ]
      },
      {
        "test_lines": [
          514,
          519
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          218,
          219,
          220,
          238,
          239,
          241,
          246,
          247,
          248,
          250,
          251
        ]
      },
      {
        "test_lines": [
          521,
          526
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          218,
          219,
          220,
          238,
          239,
          241,
          246,
          247,
          248,
          249
        ]
      },
      {
        "test_lines": [
          528,
          533
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          218,
          219,
          220,
          238,
          239,
          241,
          246,
          247,
          248,
          250,
          251
        ]
      },
      {
        "test_lines": [
          535,
          540
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          218,
          219,
          220,
          238,
          239,
          241,
          246,
          247,
          248,
          249
        ]
      },
      {
        "test_lines": [
          542,
          547
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          222,
          223,
          224,
          238,
          239,
          241,
          246,
          247,
          248,
          250,
          251
        ]
      },
      {
        "test_lines": [
          549,
          554
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          222,
          223,
          224,
          238,
          239,
          241,
          246,
          247,
          248,
          249
        ]
      },
      {
        "test_lines": [
          556,
          561
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          222,
          223,
          224,
          238,
          239,
          241,
          246,
          247,
          248,
          250,
          251
        ]
      },
      {
        "test_lines": [
          563,
          568
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          222,
          223,
          224,
          238,
          239,
          241,
          246,
          247,
          248,
          249
        ]
      },
      {
        "test_lines": [
          570,
          575
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          226,
          227,
          228,
          238,
          239,
          241,
          246,
          247,
          248,
          250,
          251
        ]
      },
      {
        "test_lines": [
          577,
          582
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          226,
          227,
          228,
          238,
          239,
          241,
          246,
          247,
          248,
          249
        ]
      },
      {
        "test_lines": [
          584,
          589
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          226,
          227,
          228,
          238,
          239,
          241,
          246,
          247,
          248,
          250,
          251
        ]
      },
      {
        "test_lines": [
          591,
          596
        ],
        "covered_lines": [
          149,
          153,
          157,
          158,
          165,
          169,
          170,
          171,
          175,
          176,
          177,
          179,
          180,
          182,
          183,
          184,
          185,
          187,
          188,
          189,
          190,
          195,
          226,
          227,
          228,
          238,
          239,
          241,
          246,
          247,
          248,
          249
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/svg/src/main/java/com/itextpdf/svg/utils/SvgCssUtils.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.svg.utils;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.Arrays;\n",
      "import java.util.List;\n",
      "\n",
      "/**\n",
      " * Utility class that facilitates parsing values from CSS.\n",
      " */\n",
      "// TODO DEVSIX-2266\n",
      "\n",
      "public final class SvgCssUtils {\n",
      "\n",
      "    private SvgCssUtils() {}\n",
      "\n",
      "    /**\n",
      "     * Splits a given String into a list of substrings.\n",
      "     * The string is split up by commas and whitespace characters (\\t, \\n, \\r, \\f).\n",
      "     *\n",
      "     * @param value the string to be split\n",
      "     * @return a list containing the split strings, an empty list if the value is null or empty\n",
      "     */\n",
      "    public static List<String> splitValueList(String value) {\n",
      "        List<String> result = new ArrayList<>();\n",
      "\n",
      "        if (value != null && value.length() > 0) {\n",
      "            value = value.trim();\n",
      "\n",
      "            String[] list = value.split(\"[,|\\\\s]\");\n",
      "            for (String element: list) {\n",
      "                if (!element.isEmpty()) {\n",
      "                    result.add(element);\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "\n",
      "        return result;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Converts a float to a String.\n",
      "     *\n",
      "     * @param value to be converted float value\n",
      "     * @return the value in a String representation\n",
      "     */\n",
      "    public static String convertFloatToString(float value) {\n",
      "        return String.valueOf(value);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Converts a double to a String.\n",
      "     *\n",
      "     * @param value to be converted double value\n",
      "     * @return the value in a String representation\n",
      "     */\n",
      "    public static String convertDoubleToString(double value) {\n",
      "        return String.valueOf(value);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.svg.utils;\n",
      "\n",
      "import com.itextpdf.styledxmlparser.CommonAttributeConstants;\n",
      "import com.itextpdf.styledxmlparser.css.util.CssUtils;\n",
      "import com.itextpdf.styledxmlparser.jsoup.nodes.Element;\n",
      "import com.itextpdf.styledxmlparser.jsoup.parser.Tag;\n",
      "import com.itextpdf.styledxmlparser.node.impl.jsoup.node.JsoupElementNode;\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.type.UnitTest;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(UnitTest.class)\n",
      "public class SvgCssUtilsTest extends ExtendedITextTest {\n",
      "\n",
      "    @Test\n",
      "    public void commaSplitValueTest() {\n",
      "        String input = \"a,b,c,d\";\n",
      "        List<String> expected = new ArrayList<>();\n",
      "        expected.add(\"a\");\n",
      "        expected.add(\"b\");\n",
      "        expected.add(\"c\");\n",
      "        expected.add(\"d\");\n",
      "\n",
      "        List<String> actual = SvgCssUtils.splitValueList(input);\n",
      "\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void leadingAndTrailingWhiteSpaceTest() {\n",
      "        String input = \"          -140.465,-116.438 -163.725,-103.028 -259.805,-47.618         \";\n",
      "\n",
      "        List<String> expected = new ArrayList<>();\n",
      "        expected.add(\"-140.465\");\n",
      "        expected.add(\"-116.438\");\n",
      "        expected.add(\"-163.725\");\n",
      "        expected.add(\"-103.028\");\n",
      "        expected.add(\"-259.805\");\n",
      "        expected.add(\"-47.618\");\n",
      "\n",
      "        List<String> actual = SvgCssUtils.splitValueList(input);\n",
      "\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void whitespaceSplitValueTest() {\n",
      "        String input = \"1 2 3 4\";\n",
      "        List<String> expected = new ArrayList<>();\n",
      "        expected.add(\"1\");\n",
      "        expected.add(\"2\");\n",
      "        expected.add(\"3\");\n",
      "        expected.add(\"4\");\n",
      "\n",
      "        List<String> actual = SvgCssUtils.splitValueList(input);\n",
      "\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void newLineSplitValueTest() {\n",
      "        String input = \"1\\n2\\n3\\n4\";\n",
      "        List<String> expected = new ArrayList<>();\n",
      "        expected.add(\"1\");\n",
      "        expected.add(\"2\");\n",
      "        expected.add(\"3\");\n",
      "        expected.add(\"4\");\n",
      "\n",
      "        List<String> actual = SvgCssUtils.splitValueList(input);\n",
      "\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void tabSplitValueTest() {\n",
      "        String input = \"1\\t2\\t3\\t4\";\n",
      "        List<String> expected = new ArrayList<>();\n",
      "        expected.add(\"1\");\n",
      "        expected.add(\"2\");\n",
      "        expected.add(\"3\");\n",
      "        expected.add(\"4\");\n",
      "\n",
      "        List<String> actual = SvgCssUtils.splitValueList(input);\n",
      "\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void mixedCommaWhitespaceSplitValueTest() {\n",
      "        String input = \"1,2 a,b\";\n",
      "        List<String> expected = new ArrayList<>();\n",
      "        expected.add(\"1\");\n",
      "        expected.add(\"2\");\n",
      "        expected.add(\"a\");\n",
      "        expected.add(\"b\");\n",
      "\n",
      "        List<String> actual = SvgCssUtils.splitValueList(input);\n",
      "\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void emptyStringsSplitValueTest() {\n",
      "        String input = \" \\n1,,\\n 2   a  ,\\tb  ,\";\n",
      "        List<String> expected = new ArrayList<>();\n",
      "        expected.add(\"1\");\n",
      "        expected.add(\"2\");\n",
      "        expected.add(\"a\");\n",
      "        expected.add(\"b\");\n",
      "\n",
      "        List<String> actual = SvgCssUtils.splitValueList(input);\n",
      "\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void nullSplitValueTest() {\n",
      "        List<String> actual = SvgCssUtils.splitValueList(null);\n",
      "\n",
      "        Assert.assertTrue(actual.isEmpty());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void emptySplitValueTest() {\n",
      "        List<String> actual = SvgCssUtils.splitValueList(\"\");\n",
      "\n",
      "        Assert.assertTrue(actual.isEmpty());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void convertFloatToStringTest() {\n",
      "        String expected = \"0.5\";\n",
      "        String actual = SvgCssUtils.convertFloatToString(0.5f);\n",
      "\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void convertLongerFloatToStringTest() {\n",
      "        String expected = \"0.1234567\";\n",
      "        String actual = SvgCssUtils.convertFloatToString(0.1234567f);\n",
      "\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "SvgCssUtils::::splitValueList(java.lang.String)": [
        45,
        60
      ],
      "SvgCssUtils::::convertFloatToString(float)": [
        68,
        70
      ],
      "SvgCssUtils::::convertDoubleToString(double)": [
        78,
        80
      ]
    },
    "test_method_lines_dic": {
      "SvgCssUtilsTest::::commaSplitValueTest()": [
        43,
        55
      ],
      "SvgCssUtilsTest::::leadingAndTrailingWhiteSpaceTest()": [
        57,
        72
      ],
      "SvgCssUtilsTest::::whitespaceSplitValueTest()": [
        74,
        86
      ],
      "SvgCssUtilsTest::::newLineSplitValueTest()": [
        88,
        100
      ],
      "SvgCssUtilsTest::::tabSplitValueTest()": [
        102,
        114
      ],
      "SvgCssUtilsTest::::mixedCommaWhitespaceSplitValueTest()": [
        116,
        128
      ],
      "SvgCssUtilsTest::::emptyStringsSplitValueTest()": [
        130,
        142
      ],
      "SvgCssUtilsTest::::nullSplitValueTest()": [
        144,
        149
      ],
      "SvgCssUtilsTest::::emptySplitValueTest()": [
        151,
        156
      ],
      "SvgCssUtilsTest::::convertFloatToStringTest()": [
        158,
        164
      ],
      "SvgCssUtilsTest::::convertLongerFloatToStringTest()": [
        166,
        172
      ]
    },
    "reverse_method_lines_dic": {
      "45": "SvgCssUtils::::splitValueList(java.lang.String)",
      "46": "SvgCssUtils::::splitValueList(java.lang.String)",
      "47": "SvgCssUtils::::splitValueList(java.lang.String)",
      "48": "SvgCssUtils::::splitValueList(java.lang.String)",
      "49": "SvgCssUtils::::splitValueList(java.lang.String)",
      "50": "SvgCssUtils::::splitValueList(java.lang.String)",
      "51": "SvgCssUtils::::splitValueList(java.lang.String)",
      "52": "SvgCssUtils::::splitValueList(java.lang.String)",
      "53": "SvgCssUtils::::splitValueList(java.lang.String)",
      "54": "SvgCssUtils::::splitValueList(java.lang.String)",
      "55": "SvgCssUtils::::splitValueList(java.lang.String)",
      "56": "SvgCssUtils::::splitValueList(java.lang.String)",
      "57": "SvgCssUtils::::splitValueList(java.lang.String)",
      "58": "SvgCssUtils::::splitValueList(java.lang.String)",
      "59": "SvgCssUtils::::splitValueList(java.lang.String)",
      "60": "SvgCssUtils::::splitValueList(java.lang.String)",
      "68": "SvgCssUtils::::convertFloatToString(float)",
      "69": "SvgCssUtils::::convertFloatToString(float)",
      "70": "SvgCssUtils::::convertFloatToString(float)",
      "78": "SvgCssUtils::::convertDoubleToString(double)",
      "79": "SvgCssUtils::::convertDoubleToString(double)",
      "80": "SvgCssUtils::::convertDoubleToString(double)"
    },
    "test_reverse_method_lines_dic": {
      "43": "SvgCssUtilsTest::::commaSplitValueTest()",
      "44": "SvgCssUtilsTest::::commaSplitValueTest()",
      "45": "SvgCssUtilsTest::::commaSplitValueTest()",
      "46": "SvgCssUtilsTest::::commaSplitValueTest()",
      "47": "SvgCssUtilsTest::::commaSplitValueTest()",
      "48": "SvgCssUtilsTest::::commaSplitValueTest()",
      "49": "SvgCssUtilsTest::::commaSplitValueTest()",
      "50": "SvgCssUtilsTest::::commaSplitValueTest()",
      "51": "SvgCssUtilsTest::::commaSplitValueTest()",
      "52": "SvgCssUtilsTest::::commaSplitValueTest()",
      "53": "SvgCssUtilsTest::::commaSplitValueTest()",
      "54": "SvgCssUtilsTest::::commaSplitValueTest()",
      "55": "SvgCssUtilsTest::::commaSplitValueTest()",
      "57": "SvgCssUtilsTest::::leadingAndTrailingWhiteSpaceTest()",
      "58": "SvgCssUtilsTest::::leadingAndTrailingWhiteSpaceTest()",
      "59": "SvgCssUtilsTest::::leadingAndTrailingWhiteSpaceTest()",
      "60": "SvgCssUtilsTest::::leadingAndTrailingWhiteSpaceTest()",
      "61": "SvgCssUtilsTest::::leadingAndTrailingWhiteSpaceTest()",
      "62": "SvgCssUtilsTest::::leadingAndTrailingWhiteSpaceTest()",
      "63": "SvgCssUtilsTest::::leadingAndTrailingWhiteSpaceTest()",
      "64": "SvgCssUtilsTest::::leadingAndTrailingWhiteSpaceTest()",
      "65": "SvgCssUtilsTest::::leadingAndTrailingWhiteSpaceTest()",
      "66": "SvgCssUtilsTest::::leadingAndTrailingWhiteSpaceTest()",
      "67": "SvgCssUtilsTest::::leadingAndTrailingWhiteSpaceTest()",
      "68": "SvgCssUtilsTest::::leadingAndTrailingWhiteSpaceTest()",
      "69": "SvgCssUtilsTest::::leadingAndTrailingWhiteSpaceTest()",
      "70": "SvgCssUtilsTest::::leadingAndTrailingWhiteSpaceTest()",
      "71": "SvgCssUtilsTest::::leadingAndTrailingWhiteSpaceTest()",
      "72": "SvgCssUtilsTest::::leadingAndTrailingWhiteSpaceTest()",
      "74": "SvgCssUtilsTest::::whitespaceSplitValueTest()",
      "75": "SvgCssUtilsTest::::whitespaceSplitValueTest()",
      "76": "SvgCssUtilsTest::::whitespaceSplitValueTest()",
      "77": "SvgCssUtilsTest::::whitespaceSplitValueTest()",
      "78": "SvgCssUtilsTest::::whitespaceSplitValueTest()",
      "79": "SvgCssUtilsTest::::whitespaceSplitValueTest()",
      "80": "SvgCssUtilsTest::::whitespaceSplitValueTest()",
      "81": "SvgCssUtilsTest::::whitespaceSplitValueTest()",
      "82": "SvgCssUtilsTest::::whitespaceSplitValueTest()",
      "83": "SvgCssUtilsTest::::whitespaceSplitValueTest()",
      "84": "SvgCssUtilsTest::::whitespaceSplitValueTest()",
      "85": "SvgCssUtilsTest::::whitespaceSplitValueTest()",
      "86": "SvgCssUtilsTest::::whitespaceSplitValueTest()",
      "88": "SvgCssUtilsTest::::newLineSplitValueTest()",
      "89": "SvgCssUtilsTest::::newLineSplitValueTest()",
      "90": "SvgCssUtilsTest::::newLineSplitValueTest()",
      "91": "SvgCssUtilsTest::::newLineSplitValueTest()",
      "92": "SvgCssUtilsTest::::newLineSplitValueTest()",
      "93": "SvgCssUtilsTest::::newLineSplitValueTest()",
      "94": "SvgCssUtilsTest::::newLineSplitValueTest()",
      "95": "SvgCssUtilsTest::::newLineSplitValueTest()",
      "96": "SvgCssUtilsTest::::newLineSplitValueTest()",
      "97": "SvgCssUtilsTest::::newLineSplitValueTest()",
      "98": "SvgCssUtilsTest::::newLineSplitValueTest()",
      "99": "SvgCssUtilsTest::::newLineSplitValueTest()",
      "100": "SvgCssUtilsTest::::newLineSplitValueTest()",
      "102": "SvgCssUtilsTest::::tabSplitValueTest()",
      "103": "SvgCssUtilsTest::::tabSplitValueTest()",
      "104": "SvgCssUtilsTest::::tabSplitValueTest()",
      "105": "SvgCssUtilsTest::::tabSplitValueTest()",
      "106": "SvgCssUtilsTest::::tabSplitValueTest()",
      "107": "SvgCssUtilsTest::::tabSplitValueTest()",
      "108": "SvgCssUtilsTest::::tabSplitValueTest()",
      "109": "SvgCssUtilsTest::::tabSplitValueTest()",
      "110": "SvgCssUtilsTest::::tabSplitValueTest()",
      "111": "SvgCssUtilsTest::::tabSplitValueTest()",
      "112": "SvgCssUtilsTest::::tabSplitValueTest()",
      "113": "SvgCssUtilsTest::::tabSplitValueTest()",
      "114": "SvgCssUtilsTest::::tabSplitValueTest()",
      "116": "SvgCssUtilsTest::::mixedCommaWhitespaceSplitValueTest()",
      "117": "SvgCssUtilsTest::::mixedCommaWhitespaceSplitValueTest()",
      "118": "SvgCssUtilsTest::::mixedCommaWhitespaceSplitValueTest()",
      "119": "SvgCssUtilsTest::::mixedCommaWhitespaceSplitValueTest()",
      "120": "SvgCssUtilsTest::::mixedCommaWhitespaceSplitValueTest()",
      "121": "SvgCssUtilsTest::::mixedCommaWhitespaceSplitValueTest()",
      "122": "SvgCssUtilsTest::::mixedCommaWhitespaceSplitValueTest()",
      "123": "SvgCssUtilsTest::::mixedCommaWhitespaceSplitValueTest()",
      "124": "SvgCssUtilsTest::::mixedCommaWhitespaceSplitValueTest()",
      "125": "SvgCssUtilsTest::::mixedCommaWhitespaceSplitValueTest()",
      "126": "SvgCssUtilsTest::::mixedCommaWhitespaceSplitValueTest()",
      "127": "SvgCssUtilsTest::::mixedCommaWhitespaceSplitValueTest()",
      "128": "SvgCssUtilsTest::::mixedCommaWhitespaceSplitValueTest()",
      "130": "SvgCssUtilsTest::::emptyStringsSplitValueTest()",
      "131": "SvgCssUtilsTest::::emptyStringsSplitValueTest()",
      "132": "SvgCssUtilsTest::::emptyStringsSplitValueTest()",
      "133": "SvgCssUtilsTest::::emptyStringsSplitValueTest()",
      "134": "SvgCssUtilsTest::::emptyStringsSplitValueTest()",
      "135": "SvgCssUtilsTest::::emptyStringsSplitValueTest()",
      "136": "SvgCssUtilsTest::::emptyStringsSplitValueTest()",
      "137": "SvgCssUtilsTest::::emptyStringsSplitValueTest()",
      "138": "SvgCssUtilsTest::::emptyStringsSplitValueTest()",
      "139": "SvgCssUtilsTest::::emptyStringsSplitValueTest()",
      "140": "SvgCssUtilsTest::::emptyStringsSplitValueTest()",
      "141": "SvgCssUtilsTest::::emptyStringsSplitValueTest()",
      "142": "SvgCssUtilsTest::::emptyStringsSplitValueTest()",
      "144": "SvgCssUtilsTest::::nullSplitValueTest()",
      "145": "SvgCssUtilsTest::::nullSplitValueTest()",
      "146": "SvgCssUtilsTest::::nullSplitValueTest()",
      "147": "SvgCssUtilsTest::::nullSplitValueTest()",
      "148": "SvgCssUtilsTest::::nullSplitValueTest()",
      "149": "SvgCssUtilsTest::::nullSplitValueTest()",
      "151": "SvgCssUtilsTest::::emptySplitValueTest()",
      "152": "SvgCssUtilsTest::::emptySplitValueTest()",
      "153": "SvgCssUtilsTest::::emptySplitValueTest()",
      "154": "SvgCssUtilsTest::::emptySplitValueTest()",
      "155": "SvgCssUtilsTest::::emptySplitValueTest()",
      "156": "SvgCssUtilsTest::::emptySplitValueTest()",
      "158": "SvgCssUtilsTest::::convertFloatToStringTest()",
      "159": "SvgCssUtilsTest::::convertFloatToStringTest()",
      "160": "SvgCssUtilsTest::::convertFloatToStringTest()",
      "161": "SvgCssUtilsTest::::convertFloatToStringTest()",
      "162": "SvgCssUtilsTest::::convertFloatToStringTest()",
      "163": "SvgCssUtilsTest::::convertFloatToStringTest()",
      "164": "SvgCssUtilsTest::::convertFloatToStringTest()",
      "166": "SvgCssUtilsTest::::convertLongerFloatToStringTest()",
      "167": "SvgCssUtilsTest::::convertLongerFloatToStringTest()",
      "168": "SvgCssUtilsTest::::convertLongerFloatToStringTest()",
      "169": "SvgCssUtilsTest::::convertLongerFloatToStringTest()",
      "170": "SvgCssUtilsTest::::convertLongerFloatToStringTest()",
      "171": "SvgCssUtilsTest::::convertLongerFloatToStringTest()",
      "172": "SvgCssUtilsTest::::convertLongerFloatToStringTest()"
    },
    "tests": [
      {
        "test_lines": [
          43,
          55
        ],
        "covered_lines": [
          46,
          48,
          49,
          51,
          52,
          53,
          54,
          59
        ]
      },
      {
        "test_lines": [
          57,
          72
        ],
        "covered_lines": [
          46,
          48,
          49,
          51,
          52,
          53,
          54,
          59
        ]
      },
      {
        "test_lines": [
          74,
          86
        ],
        "covered_lines": [
          46,
          48,
          49,
          51,
          52,
          53,
          54,
          59
        ]
      },
      {
        "test_lines": [
          88,
          100
        ],
        "covered_lines": [
          46,
          48,
          49,
          51,
          52,
          53,
          54,
          59
        ]
      },
      {
        "test_lines": [
          102,
          114
        ],
        "covered_lines": [
          46,
          48,
          49,
          51,
          52,
          53,
          54,
          59
        ]
      },
      {
        "test_lines": [
          116,
          128
        ],
        "covered_lines": [
          46,
          48,
          49,
          51,
          52,
          53,
          54,
          59
        ]
      },
      {
        "test_lines": [
          130,
          142
        ],
        "covered_lines": [
          46,
          48,
          49,
          51,
          52,
          53,
          54,
          59
        ]
      },
      {
        "test_lines": [
          144,
          149
        ],
        "covered_lines": [
          46,
          48,
          59
        ]
      },
      {
        "test_lines": [
          151,
          156
        ],
        "covered_lines": [
          46,
          48,
          59
        ]
      },
      {
        "test_lines": [
          158,
          164
        ],
        "covered_lines": [
          69
        ]
      },
      {
        "test_lines": [
          166,
          172
        ],
        "covered_lines": [
          69
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/svg/src/main/java/com/itextpdf/svg/utils/SvgTextUtil.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.svg.utils;\n",
      "\n",
      "\n",
      "import com.itextpdf.styledxmlparser.css.CommonCssConstants;\n",
      "import com.itextpdf.styledxmlparser.css.util.CssTypesValidationUtils;\n",
      "import com.itextpdf.styledxmlparser.css.util.CssDimensionParsingUtils;\n",
      "import com.itextpdf.styledxmlparser.util.WhiteSpaceUtil;\n",
      "import com.itextpdf.svg.SvgConstants;\n",
      "import com.itextpdf.svg.renderers.impl.ISvgTextNodeRenderer;\n",
      "import com.itextpdf.svg.renderers.impl.TextLeafSvgNodeRenderer;\n",
      "import com.itextpdf.svg.renderers.impl.TextSvgBranchRenderer;\n",
      "\n",
      "\n",
      "/**\n",
      " * Class containing utility methods for text operations in the context of SVG processing\n",
      " */\n",
      "public final class SvgTextUtil {\n",
      "\n",
      "\n",
      "    private SvgTextUtil() {\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Trim all the leading whitespace characters from the passed string\n",
      "     *\n",
      "     * @param toTrim string to trim\n",
      "     * @return string with all leading whitespace characters removed\n",
      "     */\n",
      "    public static String trimLeadingWhitespace(String toTrim) {\n",
      "        if (toTrim == null) {\n",
      "            return \"\";\n",
      "        }\n",
      "        int current = 0;\n",
      "        int end = toTrim.length();\n",
      "        while (current < end) {\n",
      "            char currentChar = toTrim.charAt(current);\n",
      "            if (Character.isWhitespace(currentChar) && !(currentChar == '\\n' || currentChar == '\\r')) {\n",
      "                //if the character is whitespace and not a newline, increase current\n",
      "                current++;\n",
      "            } else {\n",
      "                break;\n",
      "            }\n",
      "        }\n",
      "        return toTrim.substring(current);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Trim all the trailing whitespace characters from the passed string\n",
      "     *\n",
      "     * @param toTrim string to trim\n",
      "     * @return string with al trailing whitespace characters removed\n",
      "     */\n",
      "    public static String trimTrailingWhitespace(String toTrim) {\n",
      "        if (toTrim == null) {\n",
      "            return \"\";\n",
      "        }\n",
      "        int end = toTrim.length();\n",
      "        if (end > 0) {\n",
      "            int current = end - 1;\n",
      "            while (current >= 0) {\n",
      "                char currentChar = toTrim.charAt(current);\n",
      "                if (Character.isWhitespace(currentChar) && !(currentChar == '\\n' || currentChar == '\\r')) {\n",
      "                    //if the character is whitespace and not a newline, increase current\n",
      "                    current--;\n",
      "                } else {\n",
      "                    break;\n",
      "                }\n",
      "            }\n",
      "            if (current < 0) {\n",
      "                return \"\";\n",
      "            } else {\n",
      "                return toTrim.substring(0, current + 1);\n",
      "            }\n",
      "        } else {\n",
      "            return toTrim;\n",
      "        }\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * Process the whitespace inside the Text Tree.\n",
      "     * Whitespace is collapsed and new lines are handled\n",
      "     * A leading element in each subtree is handled different: the preceding whitespace is trimmed instead of kept\n",
      "     *\n",
      "     * @param root             root of the text-renderer subtree\n",
      "     * @param isLeadingElement true if this element is a leading element(either the first child or the first element after an absolute position change)\n",
      "     */\n",
      "    public static void processWhiteSpace(TextSvgBranchRenderer root, boolean isLeadingElement) {\n",
      "        // when svg is parsed by jsoup it leaves all whitespace in text element as is. Meaning that\n",
      "        // tab/space indented xml files will retain their tabs and spaces.\n",
      "        // The following regex replaces all whitespace with a single space.\n",
      "        boolean performLeadingTrim = isLeadingElement;\n",
      "        for (ISvgTextNodeRenderer child : root.getChildren()) {\n",
      "            //If leaf, process contents, if branch, call function again\n",
      "            if (child instanceof TextSvgBranchRenderer) {\n",
      "                //Branch processing\n",
      "                processWhiteSpace((TextSvgBranchRenderer) child, child.containsAbsolutePositionChange());\n",
      "                ((TextSvgBranchRenderer) child).markWhiteSpaceProcessed();\n",
      "            }\n",
      "            if (child instanceof TextLeafSvgNodeRenderer) {\n",
      "                //Leaf processing\n",
      "                TextLeafSvgNodeRenderer leafRend = (TextLeafSvgNodeRenderer) child;\n",
      "                //Process text\n",
      "                String toProcess = leafRend.getAttribute(SvgConstants.Attributes.TEXT_CONTENT);\n",
      "                toProcess = toProcess.replaceAll(\"\\\\s+\", \" \");\n",
      "                toProcess = WhiteSpaceUtil.collapseConsecutiveSpaces(toProcess);\n",
      "                if (performLeadingTrim) {\n",
      "                    //Trim leading white spaces\n",
      "                    toProcess = trimLeadingWhitespace(toProcess);\n",
      "                    toProcess = trimTrailingWhitespace(toProcess);\n",
      "                    performLeadingTrim = false;\n",
      "                } else {\n",
      "                    //only collapse whitespace\n",
      "                    toProcess = trimTrailingWhitespace(toProcess);\n",
      "                }\n",
      "                leafRend.setAttribute(SvgConstants.Attributes.TEXT_CONTENT, toProcess);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Check if the String is only composed of whitespace characters\n",
      "     *\n",
      "     * @param s string to check\n",
      "     * @return true if the string only contains whitespace characters, false otherwise\n",
      "     */\n",
      "    public static boolean isOnlyWhiteSpace(String s) {\n",
      "        String trimmedText = s.replaceAll(\"\\\\s+\", \" \");\n",
      "        //Trim leading whitespace\n",
      "        trimmedText = SvgTextUtil.trimLeadingWhitespace(trimmedText);\n",
      "        //Trim trailing whitespace\n",
      "        trimmedText = SvgTextUtil.trimTrailingWhitespace(trimmedText);\n",
      "        return \"\".equals(trimmedText);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Resolve the font size stored inside the passed renderer\n",
      "     *\n",
      "     * @param renderer       renderer containing the font size declaration\n",
      "     * @param parentFontSize parent font size to fall back on if the renderer does not contain a font size declarations or if the stored declaration is invalid\n",
      "     * @return float containing the font-size, or the parent font size if the renderer's declaration cannot be resolved\n",
      "     */\n",
      "    public static float resolveFontSize(ISvgTextNodeRenderer renderer, float parentFontSize) {\n",
      "        //Use own font-size declaration if it is present, parent's otherwise\n",
      "        float fontSize = Float.NaN;\n",
      "        final String elementFontSize = renderer.getAttribute(SvgConstants.Attributes.FONT_SIZE);\n",
      "        if (null != elementFontSize && !elementFontSize.isEmpty()) {\n",
      "            if (CssTypesValidationUtils.isRelativeValue(elementFontSize)\n",
      "                    || CommonCssConstants.LARGER.equals(elementFontSize)\n",
      "                    || CommonCssConstants.SMALLER.equals(elementFontSize)) {\n",
      "                fontSize = CssDimensionParsingUtils.parseRelativeFontSize(elementFontSize, parentFontSize);\n",
      "            } else {\n",
      "                fontSize = CssDimensionParsingUtils.parseAbsoluteFontSize(elementFontSize, CommonCssConstants.PX);\n",
      "            }\n",
      "        }\n",
      "        if ((Float.isNaN(fontSize)) || fontSize < 0f) {\n",
      "            fontSize = parentFontSize;\n",
      "        }\n",
      "        return fontSize;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * The reference value may contain a hashtag character or 'url' designation and this method will filter them.\n",
      "     *\n",
      "     * @param name value to be filtered\n",
      "     * @return filtered value\n",
      "     */\n",
      "    public static String filterReferenceValue(String name) {\n",
      "        return name.replace(\"#\", \"\").replace(\"url(\", \"\").replace(\")\", \"\").trim();\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.svg.utils;\n",
      "\n",
      "import com.itextpdf.svg.SvgConstants;\n",
      "import com.itextpdf.svg.renderers.impl.TextLeafSvgNodeRenderer;\n",
      "import com.itextpdf.svg.renderers.impl.TextSvgBranchRenderer;\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.type.UnitTest;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(UnitTest.class)\n",
      "public class SvgTextUtilTest extends ExtendedITextTest {\n",
      "\n",
      "    public static float EPS = 0.0001f;\n",
      "\n",
      "    //Trim leading tests\n",
      "    @Test\n",
      "    public void trimLeadingTest() {\n",
      "        String toTrim = \"\\t \\t   to trim  \\t\";\n",
      "\n",
      "        String actual = SvgTextUtil.trimLeadingWhitespace(toTrim);\n",
      "        String expected = \"to trim  \\t\";\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void trimLeadingEmptyTest() {\n",
      "        String toTrim = \"\";\n",
      "\n",
      "        String actual = SvgTextUtil.trimLeadingWhitespace(toTrim);\n",
      "        String expected = \"\";\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void trimLeadingNoLeadingTest() {\n",
      "        String toTrim = \"to Test  \";\n",
      "\n",
      "        String actual = SvgTextUtil.trimLeadingWhitespace(toTrim);\n",
      "        String expected = \"to Test  \";\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void trimLeadingSingleWhiteSpaceTest() {\n",
      "        String toTrim = \" to Test  \";\n",
      "\n",
      "        String actual = SvgTextUtil.trimLeadingWhitespace(toTrim);\n",
      "        String expected = \"to Test  \";\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void trimLeadingNonBreakingSpaceTest() {\n",
      "        String toTrim = \"\\u00A0to Test  \";\n",
      "\n",
      "        String actual = SvgTextUtil.trimLeadingWhitespace(toTrim);\n",
      "        String expected = \"\\u00A0to Test  \";\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void trimLeadingOnlyWhitespaceTest() {\n",
      "        String toTrim = \"\\t\\t\\t   \\t\\t\\t\";\n",
      "\n",
      "        String actual = SvgTextUtil.trimLeadingWhitespace(toTrim);\n",
      "        String expected = \"\";\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void trimLeadingLineBreakTest() {\n",
      "        String toTrim = \" \\n Test \";\n",
      "\n",
      "        String actual = SvgTextUtil.trimLeadingWhitespace(toTrim);\n",
      "        String expected = \"\\n Test \";\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    //Trim trailing tests\n",
      "    @Test\n",
      "    public void trimTrailingTest() {\n",
      "        String toTrim = \"\\t \\t   to trim  \\t\";\n",
      "\n",
      "        String actual = SvgTextUtil.trimTrailingWhitespace(toTrim);\n",
      "        String expected = \"\\t \\t   to trim\";\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void trimTrailingEmptyTest() {\n",
      "        String toTrim = \"\";\n",
      "\n",
      "        String actual = SvgTextUtil.trimTrailingWhitespace(toTrim);\n",
      "        String expected = \"\";\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void trimTrailingNoTrailingTest() {\n",
      "        String toTrim = \"   to Test\";\n",
      "\n",
      "        String actual = SvgTextUtil.trimTrailingWhitespace(toTrim);\n",
      "        String expected = \"   to Test\";\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void trimTrailingSingleWhiteSpaceTest() {\n",
      "        String toTrim = \" to Test \";\n",
      "\n",
      "        String actual = SvgTextUtil.trimTrailingWhitespace(toTrim);\n",
      "        String expected = \" to Test\";\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void trimTrailingNonBreakingSpaceTest() {\n",
      "        String toTrim = \" to Test\\u00A0\";\n",
      "\n",
      "        String actual = SvgTextUtil.trimTrailingWhitespace(toTrim);\n",
      "        String expected = \" to Test\\u00A0\";\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void trimTrailingOnlyWhitespaceTest() {\n",
      "        String toTrim = \"\\t\\t\\t   \\t\\t\\t\";\n",
      "\n",
      "        String actual = SvgTextUtil.trimTrailingWhitespace(toTrim);\n",
      "        String expected = \"\";\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void trimTrailingLineBreakTest() {\n",
      "        String toTrim = \" to trim \\n\";\n",
      "\n",
      "        String actual = SvgTextUtil.trimTrailingWhitespace(toTrim);\n",
      "        String expected = \" to trim \\n\";\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void trimNullLeadingTest() {\n",
      "        String expected = \"\";\n",
      "\n",
      "        String actual = SvgTextUtil.trimLeadingWhitespace(null);\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void trimNullTrailingTest() {\n",
      "        String expected = \"\";\n",
      "\n",
      "        String actual = SvgTextUtil.trimTrailingWhitespace(null);\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void trimTrailingOfStringWithLength1Test() {\n",
      "        String toTrim = \"A\";\n",
      "        String actual = SvgTextUtil.trimTrailingWhitespace(toTrim);\n",
      "        String expected = \"A\";\n",
      "        Assert.assertEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void processWhiteSpaceBreakLine() {\n",
      "        //Create tree\n",
      "        TextSvgBranchRenderer root = new TextSvgBranchRenderer();\n",
      "\n",
      "        TextLeafSvgNodeRenderer textBefore = new TextLeafSvgNodeRenderer();\n",
      "        textBefore.setAttribute(SvgConstants.Attributes.TEXT_CONTENT,\n",
      "                \"\\n\" +\n",
      "                        \"            text\\n\" +\n",
      "                        \"            \");\n",
      "        root.addChild(textBefore);\n",
      "\n",
      "        TextSvgBranchRenderer span = new TextSvgBranchRenderer();\n",
      "        TextLeafSvgNodeRenderer textInSpan = new TextLeafSvgNodeRenderer();\n",
      "        textInSpan.setAttribute(SvgConstants.Attributes.TEXT_CONTENT,\n",
      "                \"\\n\" +\n",
      "                        \"                tspan text\\n\" +\n",
      "                        \"            \");\n",
      "        span.addChild(textInSpan);\n",
      "        root.addChild(span);\n",
      "\n",
      "        TextLeafSvgNodeRenderer textAfter = new TextLeafSvgNodeRenderer();\n",
      "        textAfter.setAttribute(SvgConstants.Attributes.TEXT_CONTENT,\n",
      "                \"\\n\" +\n",
      "                        \"            after text\\n\" +\n",
      "                        \"        \");\n",
      "        root.addChild(textAfter);\n",
      "\n",
      "        //Run\n",
      "        SvgTextUtil.processWhiteSpace(root, true);\n",
      "        root.getChildren().get(0).getAttribute(SvgConstants.Attributes.TEXT_CONTENT);\n",
      "        //Create result array\n",
      "        String[] actual = new String[]{\n",
      "                root.getChildren().get(0).getAttribute(SvgConstants.Attributes.TEXT_CONTENT),\n",
      "                ((TextSvgBranchRenderer) root.getChildren().get(1)).getChildren().get(0).getAttribute(SvgConstants.Attributes.TEXT_CONTENT),\n",
      "                root.getChildren().get(2).getAttribute(SvgConstants.Attributes.TEXT_CONTENT)\n",
      "        };\n",
      "        //Create expected\n",
      "        String[] expected = new String[]{\"text\", \" tspan text\", \" after text\"};\n",
      "        Assert.assertArrayEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void processWhiteSpaceAbsPositionChange() {\n",
      "        //Create tree\n",
      "        TextSvgBranchRenderer root = new TextSvgBranchRenderer();\n",
      "\n",
      "        TextLeafSvgNodeRenderer textBefore = new TextLeafSvgNodeRenderer();\n",
      "        textBefore.setAttribute(SvgConstants.Attributes.TEXT_CONTENT,\n",
      "                \"\\n\" +\n",
      "                        \"            text\\n\" +\n",
      "                        \"            \");\n",
      "        root.addChild(textBefore);\n",
      "\n",
      "        TextSvgBranchRenderer span = new TextSvgBranchRenderer();\n",
      "        span.setAttribute(SvgConstants.Attributes.X, \"10\");\n",
      "        span.setAttribute(SvgConstants.Attributes.Y, \"20\");\n",
      "        TextLeafSvgNodeRenderer textInSpan = new TextLeafSvgNodeRenderer();\n",
      "        textInSpan.setAttribute(SvgConstants.Attributes.TEXT_CONTENT,\n",
      "                \"\\n\" +\n",
      "                        \"                tspan text\\n\" +\n",
      "                        \"            \");\n",
      "        span.addChild(textInSpan);\n",
      "        root.addChild(span);\n",
      "\n",
      "        TextLeafSvgNodeRenderer textAfter = new TextLeafSvgNodeRenderer();\n",
      "        textAfter.setAttribute(SvgConstants.Attributes.TEXT_CONTENT,\n",
      "                \"\\n\" +\n",
      "                        \"            after text\\n\" +\n",
      "                        \"        \");\n",
      "        root.addChild(textAfter);\n",
      "\n",
      "        //Run\n",
      "        SvgTextUtil.processWhiteSpace(root, true);\n",
      "        root.getChildren().get(0).getAttribute(SvgConstants.Attributes.TEXT_CONTENT);\n",
      "        //Create result array\n",
      "        String[] actual = new String[]{\n",
      "                root.getChildren().get(0).getAttribute(SvgConstants.Attributes.TEXT_CONTENT),\n",
      "                ((TextSvgBranchRenderer) root.getChildren().get(1)).getChildren().get(0).getAttribute(SvgConstants.Attributes.TEXT_CONTENT),\n",
      "                root.getChildren().get(2).getAttribute(SvgConstants.Attributes.TEXT_CONTENT)\n",
      "        };\n",
      "        //Create expected\n",
      "        String[] expected = new String[]{\"text\", \"tspan text\", \" after text\"};//No preceding whitespace on the second element\n",
      "        Assert.assertArrayEquals(expected, actual);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void processFontSizeInEM() {\n",
      "        float expected = 120;\n",
      "\n",
      "        // Create a renderer\n",
      "        TextSvgBranchRenderer root = new TextSvgBranchRenderer();\n",
      "        root.setAttribute(SvgConstants.Attributes.FONT_SIZE, \"12em\");\n",
      "\n",
      "        //Run\n",
      "        float actual = SvgTextUtil.resolveFontSize(root, 10);\n",
      "\n",
      "        Assert.assertEquals(expected, actual, EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void processFontSizeInPX() {\n",
      "        float expected = 24;\n",
      "\n",
      "        // Create a renderer\n",
      "        TextSvgBranchRenderer root = new TextSvgBranchRenderer();\n",
      "        root.setAttribute(SvgConstants.Attributes.FONT_SIZE, \"32px\");\n",
      "\n",
      "        //Run\n",
      "        float actual = SvgTextUtil.resolveFontSize(root, 10);\n",
      "\n",
      "        Assert.assertEquals(expected, actual, EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void processFontSizeInPT() {\n",
      "        float expected = 24;\n",
      "\n",
      "        // Create a renderer\n",
      "        TextSvgBranchRenderer root = new TextSvgBranchRenderer();\n",
      "        root.setAttribute(SvgConstants.Attributes.FONT_SIZE, \"24pt\");\n",
      "\n",
      "        //Run\n",
      "        float actual = SvgTextUtil.resolveFontSize(root, 10);\n",
      "\n",
      "        Assert.assertEquals(expected, actual, EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void processKeywordedFontSize() {\n",
      "        float expected = 24;\n",
      "\n",
      "        // Create a renderer\n",
      "        TextSvgBranchRenderer root = new TextSvgBranchRenderer();\n",
      "        root.setAttribute(SvgConstants.Attributes.FONT_SIZE, \"xx-large\");\n",
      "\n",
      "        //Run\n",
      "        // Parent's font-size doesn't impact the result in this test\n",
      "        float actual = SvgTextUtil.resolveFontSize(root, 10);\n",
      "\n",
      "        Assert.assertEquals(expected, actual, EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testFilterReferenceValueMarkerReference() {\n",
      "        Assert.assertEquals(\"MarkerCircle\", SvgTextUtil.filterReferenceValue(\"url(#MarkerCircle)\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testFilterReferenceValueMarkerFullEntry() {\n",
      "        Assert.assertEquals(\"marker-end: MarkerArrow;\",\n",
      "                SvgTextUtil.filterReferenceValue(\"marker-end: url(#MarkerArrow);\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testFilterReferenceValueSimpleReference() {\n",
      "        Assert.assertEquals(\"figure11\",\n",
      "                SvgTextUtil.filterReferenceValue(\"#figure11\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testFilterReferenceValueNoFilter() {\n",
      "        Assert.assertEquals(\"circle\",\n",
      "                SvgTextUtil.filterReferenceValue(\"circle\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testFilterReferenceValueEmptyString() {\n",
      "        Assert.assertEquals(\"\",\n",
      "                SvgTextUtil.filterReferenceValue(\"\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testFilterReferenceValueNumberString() {\n",
      "        Assert.assertEquals(\"16554245\",\n",
      "                SvgTextUtil.filterReferenceValue(\"16554245\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testFilterReferenceValueFilteredValues() {\n",
      "        Assert.assertEquals(\"\",\n",
      "                SvgTextUtil.filterReferenceValue(\"))url(####)\"));\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "SvgTextUtil::::trimLeadingWhitespace(java.lang.String)": [
        51,
        67
      ],
      "SvgTextUtil::::trimTrailingWhitespace(java.lang.String)": [
        75,
        99
      ],
      "SvgTextUtil::::processWhiteSpace(com.itextpdf.svg.renderers.impl.TextSvgBranchRenderer,boolean)": [
        110,
        141
      ],
      "SvgTextUtil::::isOnlyWhiteSpace(java.lang.String)": [
        149,
        156
      ],
      "SvgTextUtil::::resolveFontSize(com.itextpdf.svg.renderers.impl.ISvgTextNodeRenderer,float)": [
        165,
        182
      ],
      "SvgTextUtil::::filterReferenceValue(java.lang.String)": [
        190,
        192
      ]
    },
    "test_method_lines_dic": {
      "SvgTextUtilTest::::trimLeadingTest()": [
        40,
        47
      ],
      "SvgTextUtilTest::::trimLeadingEmptyTest()": [
        49,
        56
      ],
      "SvgTextUtilTest::::trimLeadingNoLeadingTest()": [
        58,
        65
      ],
      "SvgTextUtilTest::::trimLeadingSingleWhiteSpaceTest()": [
        67,
        74
      ],
      "SvgTextUtilTest::::trimLeadingNonBreakingSpaceTest()": [
        76,
        83
      ],
      "SvgTextUtilTest::::trimLeadingOnlyWhitespaceTest()": [
        85,
        92
      ],
      "SvgTextUtilTest::::trimLeadingLineBreakTest()": [
        94,
        101
      ],
      "SvgTextUtilTest::::trimTrailingTest()": [
        104,
        111
      ],
      "SvgTextUtilTest::::trimTrailingEmptyTest()": [
        113,
        120
      ],
      "SvgTextUtilTest::::trimTrailingNoTrailingTest()": [
        122,
        129
      ],
      "SvgTextUtilTest::::trimTrailingSingleWhiteSpaceTest()": [
        131,
        138
      ],
      "SvgTextUtilTest::::trimTrailingNonBreakingSpaceTest()": [
        140,
        147
      ],
      "SvgTextUtilTest::::trimTrailingOnlyWhitespaceTest()": [
        149,
        156
      ],
      "SvgTextUtilTest::::trimTrailingLineBreakTest()": [
        158,
        165
      ],
      "SvgTextUtilTest::::trimNullLeadingTest()": [
        167,
        173
      ],
      "SvgTextUtilTest::::trimNullTrailingTest()": [
        175,
        181
      ],
      "SvgTextUtilTest::::trimTrailingOfStringWithLength1Test()": [
        183,
        189
      ],
      "SvgTextUtilTest::::processWhiteSpaceBreakLine()": [
        191,
        231
      ],
      "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()": [
        233,
        275
      ],
      "SvgTextUtilTest::::processFontSizeInEM()": [
        277,
        289
      ],
      "SvgTextUtilTest::::processFontSizeInPX()": [
        291,
        303
      ],
      "SvgTextUtilTest::::processFontSizeInPT()": [
        305,
        317
      ],
      "SvgTextUtilTest::::processKeywordedFontSize()": [
        319,
        332
      ],
      "SvgTextUtilTest::::testFilterReferenceValueMarkerReference()": [
        334,
        337
      ],
      "SvgTextUtilTest::::testFilterReferenceValueMarkerFullEntry()": [
        339,
        343
      ],
      "SvgTextUtilTest::::testFilterReferenceValueSimpleReference()": [
        345,
        349
      ],
      "SvgTextUtilTest::::testFilterReferenceValueNoFilter()": [
        351,
        355
      ],
      "SvgTextUtilTest::::testFilterReferenceValueEmptyString()": [
        357,
        361
      ],
      "SvgTextUtilTest::::testFilterReferenceValueNumberString()": [
        363,
        367
      ],
      "SvgTextUtilTest::::testFilterReferenceValueFilteredValues()": [
        369,
        373
      ]
    },
    "reverse_method_lines_dic": {
      "51": "SvgTextUtil::::trimLeadingWhitespace(java.lang.String)",
      "52": "SvgTextUtil::::trimLeadingWhitespace(java.lang.String)",
      "53": "SvgTextUtil::::trimLeadingWhitespace(java.lang.String)",
      "54": "SvgTextUtil::::trimLeadingWhitespace(java.lang.String)",
      "55": "SvgTextUtil::::trimLeadingWhitespace(java.lang.String)",
      "56": "SvgTextUtil::::trimLeadingWhitespace(java.lang.String)",
      "57": "SvgTextUtil::::trimLeadingWhitespace(java.lang.String)",
      "58": "SvgTextUtil::::trimLeadingWhitespace(java.lang.String)",
      "59": "SvgTextUtil::::trimLeadingWhitespace(java.lang.String)",
      "60": "SvgTextUtil::::trimLeadingWhitespace(java.lang.String)",
      "61": "SvgTextUtil::::trimLeadingWhitespace(java.lang.String)",
      "62": "SvgTextUtil::::trimLeadingWhitespace(java.lang.String)",
      "63": "SvgTextUtil::::trimLeadingWhitespace(java.lang.String)",
      "64": "SvgTextUtil::::trimLeadingWhitespace(java.lang.String)",
      "65": "SvgTextUtil::::trimLeadingWhitespace(java.lang.String)",
      "66": "SvgTextUtil::::trimLeadingWhitespace(java.lang.String)",
      "67": "SvgTextUtil::::trimLeadingWhitespace(java.lang.String)",
      "75": "SvgTextUtil::::trimTrailingWhitespace(java.lang.String)",
      "76": "SvgTextUtil::::trimTrailingWhitespace(java.lang.String)",
      "77": "SvgTextUtil::::trimTrailingWhitespace(java.lang.String)",
      "78": "SvgTextUtil::::trimTrailingWhitespace(java.lang.String)",
      "79": "SvgTextUtil::::trimTrailingWhitespace(java.lang.String)",
      "80": "SvgTextUtil::::trimTrailingWhitespace(java.lang.String)",
      "81": "SvgTextUtil::::trimTrailingWhitespace(java.lang.String)",
      "82": "SvgTextUtil::::trimTrailingWhitespace(java.lang.String)",
      "83": "SvgTextUtil::::trimTrailingWhitespace(java.lang.String)",
      "84": "SvgTextUtil::::trimTrailingWhitespace(java.lang.String)",
      "85": "SvgTextUtil::::trimTrailingWhitespace(java.lang.String)",
      "86": "SvgTextUtil::::trimTrailingWhitespace(java.lang.String)",
      "87": "SvgTextUtil::::trimTrailingWhitespace(java.lang.String)",
      "88": "SvgTextUtil::::trimTrailingWhitespace(java.lang.String)",
      "89": "SvgTextUtil::::trimTrailingWhitespace(java.lang.String)",
      "90": "SvgTextUtil::::trimTrailingWhitespace(java.lang.String)",
      "91": "SvgTextUtil::::trimTrailingWhitespace(java.lang.String)",
      "92": "SvgTextUtil::::trimTrailingWhitespace(java.lang.String)",
      "93": "SvgTextUtil::::trimTrailingWhitespace(java.lang.String)",
      "94": "SvgTextUtil::::trimTrailingWhitespace(java.lang.String)",
      "95": "SvgTextUtil::::trimTrailingWhitespace(java.lang.String)",
      "96": "SvgTextUtil::::trimTrailingWhitespace(java.lang.String)",
      "97": "SvgTextUtil::::trimTrailingWhitespace(java.lang.String)",
      "98": "SvgTextUtil::::trimTrailingWhitespace(java.lang.String)",
      "99": "SvgTextUtil::::trimTrailingWhitespace(java.lang.String)",
      "110": "SvgTextUtil::::processWhiteSpace(com.itextpdf.svg.renderers.impl.TextSvgBranchRenderer,boolean)",
      "111": "SvgTextUtil::::processWhiteSpace(com.itextpdf.svg.renderers.impl.TextSvgBranchRenderer,boolean)",
      "112": "SvgTextUtil::::processWhiteSpace(com.itextpdf.svg.renderers.impl.TextSvgBranchRenderer,boolean)",
      "113": "SvgTextUtil::::processWhiteSpace(com.itextpdf.svg.renderers.impl.TextSvgBranchRenderer,boolean)",
      "114": "SvgTextUtil::::processWhiteSpace(com.itextpdf.svg.renderers.impl.TextSvgBranchRenderer,boolean)",
      "115": "SvgTextUtil::::processWhiteSpace(com.itextpdf.svg.renderers.impl.TextSvgBranchRenderer,boolean)",
      "116": "SvgTextUtil::::processWhiteSpace(com.itextpdf.svg.renderers.impl.TextSvgBranchRenderer,boolean)",
      "117": "SvgTextUtil::::processWhiteSpace(com.itextpdf.svg.renderers.impl.TextSvgBranchRenderer,boolean)",
      "118": "SvgTextUtil::::processWhiteSpace(com.itextpdf.svg.renderers.impl.TextSvgBranchRenderer,boolean)",
      "119": "SvgTextUtil::::processWhiteSpace(com.itextpdf.svg.renderers.impl.TextSvgBranchRenderer,boolean)",
      "120": "SvgTextUtil::::processWhiteSpace(com.itextpdf.svg.renderers.impl.TextSvgBranchRenderer,boolean)",
      "121": "SvgTextUtil::::processWhiteSpace(com.itextpdf.svg.renderers.impl.TextSvgBranchRenderer,boolean)",
      "122": "SvgTextUtil::::processWhiteSpace(com.itextpdf.svg.renderers.impl.TextSvgBranchRenderer,boolean)",
      "123": "SvgTextUtil::::processWhiteSpace(com.itextpdf.svg.renderers.impl.TextSvgBranchRenderer,boolean)",
      "124": "SvgTextUtil::::processWhiteSpace(com.itextpdf.svg.renderers.impl.TextSvgBranchRenderer,boolean)",
      "125": "SvgTextUtil::::processWhiteSpace(com.itextpdf.svg.renderers.impl.TextSvgBranchRenderer,boolean)",
      "126": "SvgTextUtil::::processWhiteSpace(com.itextpdf.svg.renderers.impl.TextSvgBranchRenderer,boolean)",
      "127": "SvgTextUtil::::processWhiteSpace(com.itextpdf.svg.renderers.impl.TextSvgBranchRenderer,boolean)",
      "128": "SvgTextUtil::::processWhiteSpace(com.itextpdf.svg.renderers.impl.TextSvgBranchRenderer,boolean)",
      "129": "SvgTextUtil::::processWhiteSpace(com.itextpdf.svg.renderers.impl.TextSvgBranchRenderer,boolean)",
      "130": "SvgTextUtil::::processWhiteSpace(com.itextpdf.svg.renderers.impl.TextSvgBranchRenderer,boolean)",
      "131": "SvgTextUtil::::processWhiteSpace(com.itextpdf.svg.renderers.impl.TextSvgBranchRenderer,boolean)",
      "132": "SvgTextUtil::::processWhiteSpace(com.itextpdf.svg.renderers.impl.TextSvgBranchRenderer,boolean)",
      "133": "SvgTextUtil::::processWhiteSpace(com.itextpdf.svg.renderers.impl.TextSvgBranchRenderer,boolean)",
      "134": "SvgTextUtil::::processWhiteSpace(com.itextpdf.svg.renderers.impl.TextSvgBranchRenderer,boolean)",
      "135": "SvgTextUtil::::processWhiteSpace(com.itextpdf.svg.renderers.impl.TextSvgBranchRenderer,boolean)",
      "136": "SvgTextUtil::::processWhiteSpace(com.itextpdf.svg.renderers.impl.TextSvgBranchRenderer,boolean)",
      "137": "SvgTextUtil::::processWhiteSpace(com.itextpdf.svg.renderers.impl.TextSvgBranchRenderer,boolean)",
      "138": "SvgTextUtil::::processWhiteSpace(com.itextpdf.svg.renderers.impl.TextSvgBranchRenderer,boolean)",
      "139": "SvgTextUtil::::processWhiteSpace(com.itextpdf.svg.renderers.impl.TextSvgBranchRenderer,boolean)",
      "140": "SvgTextUtil::::processWhiteSpace(com.itextpdf.svg.renderers.impl.TextSvgBranchRenderer,boolean)",
      "141": "SvgTextUtil::::processWhiteSpace(com.itextpdf.svg.renderers.impl.TextSvgBranchRenderer,boolean)",
      "149": "SvgTextUtil::::isOnlyWhiteSpace(java.lang.String)",
      "150": "SvgTextUtil::::isOnlyWhiteSpace(java.lang.String)",
      "151": "SvgTextUtil::::isOnlyWhiteSpace(java.lang.String)",
      "152": "SvgTextUtil::::isOnlyWhiteSpace(java.lang.String)",
      "153": "SvgTextUtil::::isOnlyWhiteSpace(java.lang.String)",
      "154": "SvgTextUtil::::isOnlyWhiteSpace(java.lang.String)",
      "155": "SvgTextUtil::::isOnlyWhiteSpace(java.lang.String)",
      "156": "SvgTextUtil::::isOnlyWhiteSpace(java.lang.String)",
      "165": "SvgTextUtil::::resolveFontSize(com.itextpdf.svg.renderers.impl.ISvgTextNodeRenderer,float)",
      "166": "SvgTextUtil::::resolveFontSize(com.itextpdf.svg.renderers.impl.ISvgTextNodeRenderer,float)",
      "167": "SvgTextUtil::::resolveFontSize(com.itextpdf.svg.renderers.impl.ISvgTextNodeRenderer,float)",
      "168": "SvgTextUtil::::resolveFontSize(com.itextpdf.svg.renderers.impl.ISvgTextNodeRenderer,float)",
      "169": "SvgTextUtil::::resolveFontSize(com.itextpdf.svg.renderers.impl.ISvgTextNodeRenderer,float)",
      "170": "SvgTextUtil::::resolveFontSize(com.itextpdf.svg.renderers.impl.ISvgTextNodeRenderer,float)",
      "171": "SvgTextUtil::::resolveFontSize(com.itextpdf.svg.renderers.impl.ISvgTextNodeRenderer,float)",
      "172": "SvgTextUtil::::resolveFontSize(com.itextpdf.svg.renderers.impl.ISvgTextNodeRenderer,float)",
      "173": "SvgTextUtil::::resolveFontSize(com.itextpdf.svg.renderers.impl.ISvgTextNodeRenderer,float)",
      "174": "SvgTextUtil::::resolveFontSize(com.itextpdf.svg.renderers.impl.ISvgTextNodeRenderer,float)",
      "175": "SvgTextUtil::::resolveFontSize(com.itextpdf.svg.renderers.impl.ISvgTextNodeRenderer,float)",
      "176": "SvgTextUtil::::resolveFontSize(com.itextpdf.svg.renderers.impl.ISvgTextNodeRenderer,float)",
      "177": "SvgTextUtil::::resolveFontSize(com.itextpdf.svg.renderers.impl.ISvgTextNodeRenderer,float)",
      "178": "SvgTextUtil::::resolveFontSize(com.itextpdf.svg.renderers.impl.ISvgTextNodeRenderer,float)",
      "179": "SvgTextUtil::::resolveFontSize(com.itextpdf.svg.renderers.impl.ISvgTextNodeRenderer,float)",
      "180": "SvgTextUtil::::resolveFontSize(com.itextpdf.svg.renderers.impl.ISvgTextNodeRenderer,float)",
      "181": "SvgTextUtil::::resolveFontSize(com.itextpdf.svg.renderers.impl.ISvgTextNodeRenderer,float)",
      "182": "SvgTextUtil::::resolveFontSize(com.itextpdf.svg.renderers.impl.ISvgTextNodeRenderer,float)",
      "190": "SvgTextUtil::::filterReferenceValue(java.lang.String)",
      "191": "SvgTextUtil::::filterReferenceValue(java.lang.String)",
      "192": "SvgTextUtil::::filterReferenceValue(java.lang.String)"
    },
    "test_reverse_method_lines_dic": {
      "40": "SvgTextUtilTest::::trimLeadingTest()",
      "41": "SvgTextUtilTest::::trimLeadingTest()",
      "42": "SvgTextUtilTest::::trimLeadingTest()",
      "43": "SvgTextUtilTest::::trimLeadingTest()",
      "44": "SvgTextUtilTest::::trimLeadingTest()",
      "45": "SvgTextUtilTest::::trimLeadingTest()",
      "46": "SvgTextUtilTest::::trimLeadingTest()",
      "47": "SvgTextUtilTest::::trimLeadingTest()",
      "49": "SvgTextUtilTest::::trimLeadingEmptyTest()",
      "50": "SvgTextUtilTest::::trimLeadingEmptyTest()",
      "51": "SvgTextUtilTest::::trimLeadingEmptyTest()",
      "52": "SvgTextUtilTest::::trimLeadingEmptyTest()",
      "53": "SvgTextUtilTest::::trimLeadingEmptyTest()",
      "54": "SvgTextUtilTest::::trimLeadingEmptyTest()",
      "55": "SvgTextUtilTest::::trimLeadingEmptyTest()",
      "56": "SvgTextUtilTest::::trimLeadingEmptyTest()",
      "58": "SvgTextUtilTest::::trimLeadingNoLeadingTest()",
      "59": "SvgTextUtilTest::::trimLeadingNoLeadingTest()",
      "60": "SvgTextUtilTest::::trimLeadingNoLeadingTest()",
      "61": "SvgTextUtilTest::::trimLeadingNoLeadingTest()",
      "62": "SvgTextUtilTest::::trimLeadingNoLeadingTest()",
      "63": "SvgTextUtilTest::::trimLeadingNoLeadingTest()",
      "64": "SvgTextUtilTest::::trimLeadingNoLeadingTest()",
      "65": "SvgTextUtilTest::::trimLeadingNoLeadingTest()",
      "67": "SvgTextUtilTest::::trimLeadingSingleWhiteSpaceTest()",
      "68": "SvgTextUtilTest::::trimLeadingSingleWhiteSpaceTest()",
      "69": "SvgTextUtilTest::::trimLeadingSingleWhiteSpaceTest()",
      "70": "SvgTextUtilTest::::trimLeadingSingleWhiteSpaceTest()",
      "71": "SvgTextUtilTest::::trimLeadingSingleWhiteSpaceTest()",
      "72": "SvgTextUtilTest::::trimLeadingSingleWhiteSpaceTest()",
      "73": "SvgTextUtilTest::::trimLeadingSingleWhiteSpaceTest()",
      "74": "SvgTextUtilTest::::trimLeadingSingleWhiteSpaceTest()",
      "76": "SvgTextUtilTest::::trimLeadingNonBreakingSpaceTest()",
      "77": "SvgTextUtilTest::::trimLeadingNonBreakingSpaceTest()",
      "78": "SvgTextUtilTest::::trimLeadingNonBreakingSpaceTest()",
      "79": "SvgTextUtilTest::::trimLeadingNonBreakingSpaceTest()",
      "80": "SvgTextUtilTest::::trimLeadingNonBreakingSpaceTest()",
      "81": "SvgTextUtilTest::::trimLeadingNonBreakingSpaceTest()",
      "82": "SvgTextUtilTest::::trimLeadingNonBreakingSpaceTest()",
      "83": "SvgTextUtilTest::::trimLeadingNonBreakingSpaceTest()",
      "85": "SvgTextUtilTest::::trimLeadingOnlyWhitespaceTest()",
      "86": "SvgTextUtilTest::::trimLeadingOnlyWhitespaceTest()",
      "87": "SvgTextUtilTest::::trimLeadingOnlyWhitespaceTest()",
      "88": "SvgTextUtilTest::::trimLeadingOnlyWhitespaceTest()",
      "89": "SvgTextUtilTest::::trimLeadingOnlyWhitespaceTest()",
      "90": "SvgTextUtilTest::::trimLeadingOnlyWhitespaceTest()",
      "91": "SvgTextUtilTest::::trimLeadingOnlyWhitespaceTest()",
      "92": "SvgTextUtilTest::::trimLeadingOnlyWhitespaceTest()",
      "94": "SvgTextUtilTest::::trimLeadingLineBreakTest()",
      "95": "SvgTextUtilTest::::trimLeadingLineBreakTest()",
      "96": "SvgTextUtilTest::::trimLeadingLineBreakTest()",
      "97": "SvgTextUtilTest::::trimLeadingLineBreakTest()",
      "98": "SvgTextUtilTest::::trimLeadingLineBreakTest()",
      "99": "SvgTextUtilTest::::trimLeadingLineBreakTest()",
      "100": "SvgTextUtilTest::::trimLeadingLineBreakTest()",
      "101": "SvgTextUtilTest::::trimLeadingLineBreakTest()",
      "104": "SvgTextUtilTest::::trimTrailingTest()",
      "105": "SvgTextUtilTest::::trimTrailingTest()",
      "106": "SvgTextUtilTest::::trimTrailingTest()",
      "107": "SvgTextUtilTest::::trimTrailingTest()",
      "108": "SvgTextUtilTest::::trimTrailingTest()",
      "109": "SvgTextUtilTest::::trimTrailingTest()",
      "110": "SvgTextUtilTest::::trimTrailingTest()",
      "111": "SvgTextUtilTest::::trimTrailingTest()",
      "113": "SvgTextUtilTest::::trimTrailingEmptyTest()",
      "114": "SvgTextUtilTest::::trimTrailingEmptyTest()",
      "115": "SvgTextUtilTest::::trimTrailingEmptyTest()",
      "116": "SvgTextUtilTest::::trimTrailingEmptyTest()",
      "117": "SvgTextUtilTest::::trimTrailingEmptyTest()",
      "118": "SvgTextUtilTest::::trimTrailingEmptyTest()",
      "119": "SvgTextUtilTest::::trimTrailingEmptyTest()",
      "120": "SvgTextUtilTest::::trimTrailingEmptyTest()",
      "122": "SvgTextUtilTest::::trimTrailingNoTrailingTest()",
      "123": "SvgTextUtilTest::::trimTrailingNoTrailingTest()",
      "124": "SvgTextUtilTest::::trimTrailingNoTrailingTest()",
      "125": "SvgTextUtilTest::::trimTrailingNoTrailingTest()",
      "126": "SvgTextUtilTest::::trimTrailingNoTrailingTest()",
      "127": "SvgTextUtilTest::::trimTrailingNoTrailingTest()",
      "128": "SvgTextUtilTest::::trimTrailingNoTrailingTest()",
      "129": "SvgTextUtilTest::::trimTrailingNoTrailingTest()",
      "131": "SvgTextUtilTest::::trimTrailingSingleWhiteSpaceTest()",
      "132": "SvgTextUtilTest::::trimTrailingSingleWhiteSpaceTest()",
      "133": "SvgTextUtilTest::::trimTrailingSingleWhiteSpaceTest()",
      "134": "SvgTextUtilTest::::trimTrailingSingleWhiteSpaceTest()",
      "135": "SvgTextUtilTest::::trimTrailingSingleWhiteSpaceTest()",
      "136": "SvgTextUtilTest::::trimTrailingSingleWhiteSpaceTest()",
      "137": "SvgTextUtilTest::::trimTrailingSingleWhiteSpaceTest()",
      "138": "SvgTextUtilTest::::trimTrailingSingleWhiteSpaceTest()",
      "140": "SvgTextUtilTest::::trimTrailingNonBreakingSpaceTest()",
      "141": "SvgTextUtilTest::::trimTrailingNonBreakingSpaceTest()",
      "142": "SvgTextUtilTest::::trimTrailingNonBreakingSpaceTest()",
      "143": "SvgTextUtilTest::::trimTrailingNonBreakingSpaceTest()",
      "144": "SvgTextUtilTest::::trimTrailingNonBreakingSpaceTest()",
      "145": "SvgTextUtilTest::::trimTrailingNonBreakingSpaceTest()",
      "146": "SvgTextUtilTest::::trimTrailingNonBreakingSpaceTest()",
      "147": "SvgTextUtilTest::::trimTrailingNonBreakingSpaceTest()",
      "149": "SvgTextUtilTest::::trimTrailingOnlyWhitespaceTest()",
      "150": "SvgTextUtilTest::::trimTrailingOnlyWhitespaceTest()",
      "151": "SvgTextUtilTest::::trimTrailingOnlyWhitespaceTest()",
      "152": "SvgTextUtilTest::::trimTrailingOnlyWhitespaceTest()",
      "153": "SvgTextUtilTest::::trimTrailingOnlyWhitespaceTest()",
      "154": "SvgTextUtilTest::::trimTrailingOnlyWhitespaceTest()",
      "155": "SvgTextUtilTest::::trimTrailingOnlyWhitespaceTest()",
      "156": "SvgTextUtilTest::::trimTrailingOnlyWhitespaceTest()",
      "158": "SvgTextUtilTest::::trimTrailingLineBreakTest()",
      "159": "SvgTextUtilTest::::trimTrailingLineBreakTest()",
      "160": "SvgTextUtilTest::::trimTrailingLineBreakTest()",
      "161": "SvgTextUtilTest::::trimTrailingLineBreakTest()",
      "162": "SvgTextUtilTest::::trimTrailingLineBreakTest()",
      "163": "SvgTextUtilTest::::trimTrailingLineBreakTest()",
      "164": "SvgTextUtilTest::::trimTrailingLineBreakTest()",
      "165": "SvgTextUtilTest::::trimTrailingLineBreakTest()",
      "167": "SvgTextUtilTest::::trimNullLeadingTest()",
      "168": "SvgTextUtilTest::::trimNullLeadingTest()",
      "169": "SvgTextUtilTest::::trimNullLeadingTest()",
      "170": "SvgTextUtilTest::::trimNullLeadingTest()",
      "171": "SvgTextUtilTest::::trimNullLeadingTest()",
      "172": "SvgTextUtilTest::::trimNullLeadingTest()",
      "173": "SvgTextUtilTest::::trimNullLeadingTest()",
      "175": "SvgTextUtilTest::::trimNullTrailingTest()",
      "176": "SvgTextUtilTest::::trimNullTrailingTest()",
      "177": "SvgTextUtilTest::::trimNullTrailingTest()",
      "178": "SvgTextUtilTest::::trimNullTrailingTest()",
      "179": "SvgTextUtilTest::::trimNullTrailingTest()",
      "180": "SvgTextUtilTest::::trimNullTrailingTest()",
      "181": "SvgTextUtilTest::::trimNullTrailingTest()",
      "183": "SvgTextUtilTest::::trimTrailingOfStringWithLength1Test()",
      "184": "SvgTextUtilTest::::trimTrailingOfStringWithLength1Test()",
      "185": "SvgTextUtilTest::::trimTrailingOfStringWithLength1Test()",
      "186": "SvgTextUtilTest::::trimTrailingOfStringWithLength1Test()",
      "187": "SvgTextUtilTest::::trimTrailingOfStringWithLength1Test()",
      "188": "SvgTextUtilTest::::trimTrailingOfStringWithLength1Test()",
      "189": "SvgTextUtilTest::::trimTrailingOfStringWithLength1Test()",
      "191": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "192": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "193": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "194": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "195": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "196": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "197": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "198": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "199": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "200": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "201": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "202": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "203": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "204": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "205": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "206": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "207": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "208": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "209": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "210": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "211": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "212": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "213": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "214": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "215": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "216": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "217": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "218": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "219": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "220": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "221": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "222": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "223": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "224": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "225": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "226": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "227": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "228": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "229": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "230": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "231": "SvgTextUtilTest::::processWhiteSpaceBreakLine()",
      "233": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "234": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "235": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "236": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "237": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "238": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "239": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "240": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "241": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "242": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "243": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "244": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "245": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "246": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "247": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "248": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "249": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "250": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "251": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "252": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "253": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "254": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "255": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "256": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "257": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "258": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "259": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "260": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "261": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "262": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "263": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "264": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "265": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "266": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "267": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "268": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "269": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "270": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "271": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "272": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "273": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "274": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "275": "SvgTextUtilTest::::processWhiteSpaceAbsPositionChange()",
      "277": "SvgTextUtilTest::::processFontSizeInEM()",
      "278": "SvgTextUtilTest::::processFontSizeInEM()",
      "279": "SvgTextUtilTest::::processFontSizeInEM()",
      "280": "SvgTextUtilTest::::processFontSizeInEM()",
      "281": "SvgTextUtilTest::::processFontSizeInEM()",
      "282": "SvgTextUtilTest::::processFontSizeInEM()",
      "283": "SvgTextUtilTest::::processFontSizeInEM()",
      "284": "SvgTextUtilTest::::processFontSizeInEM()",
      "285": "SvgTextUtilTest::::processFontSizeInEM()",
      "286": "SvgTextUtilTest::::processFontSizeInEM()",
      "287": "SvgTextUtilTest::::processFontSizeInEM()",
      "288": "SvgTextUtilTest::::processFontSizeInEM()",
      "289": "SvgTextUtilTest::::processFontSizeInEM()",
      "291": "SvgTextUtilTest::::processFontSizeInPX()",
      "292": "SvgTextUtilTest::::processFontSizeInPX()",
      "293": "SvgTextUtilTest::::processFontSizeInPX()",
      "294": "SvgTextUtilTest::::processFontSizeInPX()",
      "295": "SvgTextUtilTest::::processFontSizeInPX()",
      "296": "SvgTextUtilTest::::processFontSizeInPX()",
      "297": "SvgTextUtilTest::::processFontSizeInPX()",
      "298": "SvgTextUtilTest::::processFontSizeInPX()",
      "299": "SvgTextUtilTest::::processFontSizeInPX()",
      "300": "SvgTextUtilTest::::processFontSizeInPX()",
      "301": "SvgTextUtilTest::::processFontSizeInPX()",
      "302": "SvgTextUtilTest::::processFontSizeInPX()",
      "303": "SvgTextUtilTest::::processFontSizeInPX()",
      "305": "SvgTextUtilTest::::processFontSizeInPT()",
      "306": "SvgTextUtilTest::::processFontSizeInPT()",
      "307": "SvgTextUtilTest::::processFontSizeInPT()",
      "308": "SvgTextUtilTest::::processFontSizeInPT()",
      "309": "SvgTextUtilTest::::processFontSizeInPT()",
      "310": "SvgTextUtilTest::::processFontSizeInPT()",
      "311": "SvgTextUtilTest::::processFontSizeInPT()",
      "312": "SvgTextUtilTest::::processFontSizeInPT()",
      "313": "SvgTextUtilTest::::processFontSizeInPT()",
      "314": "SvgTextUtilTest::::processFontSizeInPT()",
      "315": "SvgTextUtilTest::::processFontSizeInPT()",
      "316": "SvgTextUtilTest::::processFontSizeInPT()",
      "317": "SvgTextUtilTest::::processFontSizeInPT()",
      "319": "SvgTextUtilTest::::processKeywordedFontSize()",
      "320": "SvgTextUtilTest::::processKeywordedFontSize()",
      "321": "SvgTextUtilTest::::processKeywordedFontSize()",
      "322": "SvgTextUtilTest::::processKeywordedFontSize()",
      "323": "SvgTextUtilTest::::processKeywordedFontSize()",
      "324": "SvgTextUtilTest::::processKeywordedFontSize()",
      "325": "SvgTextUtilTest::::processKeywordedFontSize()",
      "326": "SvgTextUtilTest::::processKeywordedFontSize()",
      "327": "SvgTextUtilTest::::processKeywordedFontSize()",
      "328": "SvgTextUtilTest::::processKeywordedFontSize()",
      "329": "SvgTextUtilTest::::processKeywordedFontSize()",
      "330": "SvgTextUtilTest::::processKeywordedFontSize()",
      "331": "SvgTextUtilTest::::processKeywordedFontSize()",
      "332": "SvgTextUtilTest::::processKeywordedFontSize()",
      "334": "SvgTextUtilTest::::testFilterReferenceValueMarkerReference()",
      "335": "SvgTextUtilTest::::testFilterReferenceValueMarkerReference()",
      "336": "SvgTextUtilTest::::testFilterReferenceValueMarkerReference()",
      "337": "SvgTextUtilTest::::testFilterReferenceValueMarkerReference()",
      "339": "SvgTextUtilTest::::testFilterReferenceValueMarkerFullEntry()",
      "340": "SvgTextUtilTest::::testFilterReferenceValueMarkerFullEntry()",
      "341": "SvgTextUtilTest::::testFilterReferenceValueMarkerFullEntry()",
      "342": "SvgTextUtilTest::::testFilterReferenceValueMarkerFullEntry()",
      "343": "SvgTextUtilTest::::testFilterReferenceValueMarkerFullEntry()",
      "345": "SvgTextUtilTest::::testFilterReferenceValueSimpleReference()",
      "346": "SvgTextUtilTest::::testFilterReferenceValueSimpleReference()",
      "347": "SvgTextUtilTest::::testFilterReferenceValueSimpleReference()",
      "348": "SvgTextUtilTest::::testFilterReferenceValueSimpleReference()",
      "349": "SvgTextUtilTest::::testFilterReferenceValueSimpleReference()",
      "351": "SvgTextUtilTest::::testFilterReferenceValueNoFilter()",
      "352": "SvgTextUtilTest::::testFilterReferenceValueNoFilter()",
      "353": "SvgTextUtilTest::::testFilterReferenceValueNoFilter()",
      "354": "SvgTextUtilTest::::testFilterReferenceValueNoFilter()",
      "355": "SvgTextUtilTest::::testFilterReferenceValueNoFilter()",
      "357": "SvgTextUtilTest::::testFilterReferenceValueEmptyString()",
      "358": "SvgTextUtilTest::::testFilterReferenceValueEmptyString()",
      "359": "SvgTextUtilTest::::testFilterReferenceValueEmptyString()",
      "360": "SvgTextUtilTest::::testFilterReferenceValueEmptyString()",
      "361": "SvgTextUtilTest::::testFilterReferenceValueEmptyString()",
      "363": "SvgTextUtilTest::::testFilterReferenceValueNumberString()",
      "364": "SvgTextUtilTest::::testFilterReferenceValueNumberString()",
      "365": "SvgTextUtilTest::::testFilterReferenceValueNumberString()",
      "366": "SvgTextUtilTest::::testFilterReferenceValueNumberString()",
      "367": "SvgTextUtilTest::::testFilterReferenceValueNumberString()",
      "369": "SvgTextUtilTest::::testFilterReferenceValueFilteredValues()",
      "370": "SvgTextUtilTest::::testFilterReferenceValueFilteredValues()",
      "371": "SvgTextUtilTest::::testFilterReferenceValueFilteredValues()",
      "372": "SvgTextUtilTest::::testFilterReferenceValueFilteredValues()",
      "373": "SvgTextUtilTest::::testFilterReferenceValueFilteredValues()"
    },
    "tests": [
      {
        "test_lines": [
          40,
          47
        ],
        "covered_lines": [
          52,
          55,
          56,
          57,
          58,
          59,
          61,
          65,
          66
        ]
      },
      {
        "test_lines": [
          49,
          56
        ],
        "covered_lines": [
          52,
          55,
          56,
          57,
          66
        ]
      },
      {
        "test_lines": [
          58,
          65
        ],
        "covered_lines": [
          52,
          55,
          56,
          57,
          58,
          59,
          66
        ]
      },
      {
        "test_lines": [
          67,
          74
        ],
        "covered_lines": [
          52,
          55,
          56,
          57,
          58,
          59,
          61,
          65,
          66
        ]
      },
      {
        "test_lines": [
          76,
          83
        ],
        "covered_lines": [
          52,
          55,
          56,
          57,
          58,
          59,
          66
        ]
      },
      {
        "test_lines": [
          85,
          92
        ],
        "covered_lines": [
          52,
          55,
          56,
          57,
          58,
          59,
          61,
          65,
          66
        ]
      },
      {
        "test_lines": [
          94,
          101
        ],
        "covered_lines": [
          52,
          55,
          56,
          57,
          58,
          59,
          61,
          65,
          66
        ]
      },
      {
        "test_lines": [
          104,
          111
        ],
        "covered_lines": [
          76,
          79,
          80,
          81,
          82,
          83,
          84,
          86,
          90,
          91,
          94
        ]
      },
      {
        "test_lines": [
          113,
          120
        ],
        "covered_lines": [
          76,
          79,
          80,
          97
        ]
      },
      {
        "test_lines": [
          122,
          129
        ],
        "covered_lines": [
          76,
          79,
          80,
          81,
          82,
          83,
          84,
          91,
          94
        ]
      },
      {
        "test_lines": [
          131,
          138
        ],
        "covered_lines": [
          76,
          79,
          80,
          81,
          82,
          83,
          84,
          86,
          90,
          91,
          94
        ]
      },
      {
        "test_lines": [
          140,
          147
        ],
        "covered_lines": [
          76,
          79,
          80,
          81,
          82,
          83,
          84,
          91,
          94
        ]
      },
      {
        "test_lines": [
          149,
          156
        ],
        "covered_lines": [
          76,
          79,
          80,
          81,
          82,
          83,
          84,
          86,
          90,
          91,
          92
        ]
      },
      {
        "test_lines": [
          158,
          165
        ],
        "covered_lines": [
          76,
          79,
          80,
          81,
          82,
          83,
          84,
          91,
          94
        ]
      },
      {
        "test_lines": [
          167,
          173
        ],
        "covered_lines": [
          52,
          53
        ]
      },
      {
        "test_lines": [
          175,
          181
        ],
        "covered_lines": [
          76,
          77
        ]
      },
      {
        "test_lines": [
          183,
          189
        ],
        "covered_lines": [
          76,
          79,
          80,
          81,
          82,
          83,
          84,
          91,
          94
        ]
      },
      {
        "test_lines": [
          191,
          231
        ],
        "covered_lines": [
          52,
          55,
          56,
          57,
          58,
          59,
          61,
          65,
          66,
          76,
          79,
          80,
          81,
          82,
          83,
          84,
          86,
          90,
          91,
          94,
          114,
          115,
          117,
          119,
          120,
          122,
          124,
          126,
          127,
          128,
          129,
          131,
          132,
          133,
          136,
          138,
          140,
          141
        ]
      },
      {
        "test_lines": [
          233,
          275
        ],
        "covered_lines": [
          52,
          55,
          56,
          57,
          58,
          59,
          61,
          65,
          66,
          76,
          79,
          80,
          81,
          82,
          83,
          84,
          86,
          90,
          91,
          94,
          114,
          115,
          117,
          119,
          120,
          122,
          124,
          126,
          127,
          128,
          129,
          131,
          132,
          133,
          136,
          138,
          140,
          141
        ]
      },
      {
        "test_lines": [
          277,
          289
        ],
        "covered_lines": [
          167,
          168,
          169,
          170,
          173,
          178,
          181
        ]
      },
      {
        "test_lines": [
          291,
          303
        ],
        "covered_lines": [
          167,
          168,
          169,
          170,
          171,
          172,
          175,
          178,
          181
        ]
      },
      {
        "test_lines": [
          305,
          317
        ],
        "covered_lines": [
          167,
          168,
          169,
          170,
          171,
          172,
          175,
          178,
          181
        ]
      },
      {
        "test_lines": [
          319,
          332
        ],
        "covered_lines": [
          167,
          168,
          169,
          170,
          171,
          172,
          175,
          178,
          181
        ]
      },
      {
        "test_lines": [
          334,
          337
        ],
        "covered_lines": [
          191
        ]
      },
      {
        "test_lines": [
          339,
          343
        ],
        "covered_lines": [
          191
        ]
      },
      {
        "test_lines": [
          345,
          349
        ],
        "covered_lines": [
          191
        ]
      },
      {
        "test_lines": [
          351,
          355
        ],
        "covered_lines": [
          191
        ]
      },
      {
        "test_lines": [
          357,
          361
        ],
        "covered_lines": [
          191
        ]
      },
      {
        "test_lines": [
          363,
          367
        ],
        "covered_lines": [
          191
        ]
      },
      {
        "test_lines": [
          369,
          373
        ],
        "covered_lines": [
          191
        ]
      }
    ]
  }
}