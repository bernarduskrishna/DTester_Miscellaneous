{
  "/bernard/dataset_construction/prep/repos/zouzhiy-excel/src/main/java/io/github/zouzhiy/excel/context/defualts/DefaultWorkbookContext.java": {
    "class_content": [
      "/*\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package io.github.zouzhiy.excel.context.defualts;\n",
      "\n",
      "import io.github.zouzhiy.excel.context.WorkbookContext;\n",
      "import io.github.zouzhiy.excel.enums.StyleHorizontalAlignment;\n",
      "import io.github.zouzhiy.excel.enums.StyleVerticalAlignment;\n",
      "import io.github.zouzhiy.excel.exceptions.ExcelException;\n",
      "import io.github.zouzhiy.excel.metadata.Configuration;\n",
      "import io.github.zouzhiy.excel.metadata.config.ExcelClassConfig;\n",
      "import io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig;\n",
      "import io.github.zouzhiy.excel.metadata.config.ExcelFontConfig;\n",
      "import io.github.zouzhiy.excel.metadata.config.ExcelStyleConfig;\n",
      "import io.github.zouzhiy.excel.metadata.parameter.WorkbookParameter;\n",
      "import io.github.zouzhiy.excel.metadata.result.CellStyleResultSet;\n",
      "import org.apache.poi.ss.usermodel.*;\n",
      "\n",
      "import java.io.IOException;\n",
      "import java.io.InputStream;\n",
      "import java.util.HashMap;\n",
      "import java.util.Map;\n",
      "import java.util.function.Consumer;\n",
      "import java.util.function.Supplier;\n",
      "\n",
      "/**\n",
      " * @author zouzhiy\n",
      " * @since 2022/7/2\n",
      " */\n",
      "public class DefaultWorkbookContext implements WorkbookContext {\n",
      "\n",
      "    private final Configuration configuration;\n",
      "\n",
      "    private final WorkbookParameter workbookParameter;\n",
      "    private final Map<String, CellStyle> headCellStyleMap = new HashMap<>(32);\n",
      "    private final Map<String, CellStyle> dataCellStyleMap = new HashMap<>(32);\n",
      "    private Workbook workbook;\n",
      "    private FormulaEvaluator formulaEvaluator;\n",
      "    private DataFormat dataFormat;\n",
      "    private CellStyle titleCellStyle = null;\n",
      "\n",
      "    public DefaultWorkbookContext(Configuration configuration, WorkbookParameter workbookParameter) {\n",
      "        this.configuration = configuration;\n",
      "        this.workbookParameter = workbookParameter;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Configuration getConfiguration() {\n",
      "        return configuration;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public WorkbookParameter getWorkbookParameter() {\n",
      "        return workbookParameter;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Workbook getWorkbook() {\n",
      "        if (workbook == null) {\n",
      "            this.workbook = this.createWorkbook();\n",
      "        }\n",
      "        return workbook;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public FormulaEvaluator getFormulaEvaluator() {\n",
      "        if (formulaEvaluator == null) {\n",
      "            formulaEvaluator = this.getWorkbook().getCreationHelper().createFormulaEvaluator();\n",
      "        }\n",
      "        return formulaEvaluator;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void putTitleCellStyle(ExcelClassConfig excelClassConfig, CellStyle titleCellStyle) {\n",
      "        this.titleCellStyle = titleCellStyle;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void putHeadCellStyle(CellStyleResultSet headCellStyleResultSet) {\n",
      "        headCellStyleResultSet.getCellStyleResultList().forEach(item -> headCellStyleMap.put(item.getExcelFieldConfig().getPropertyName(), item.getCellStyle()));\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void putDataCellStyle(CellStyleResultSet dataCellStyleResultSet) {\n",
      "        dataCellStyleResultSet.getCellStyleResultList().forEach(item -> dataCellStyleMap.put(item.getExcelFieldConfig().getPropertyName(), item.getCellStyle()));\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public CellStyle getTitleCellStyle(ExcelClassConfig excelClassConfig) {\n",
      "        if (titleCellStyle == null) {\n",
      "            titleCellStyle = this.createTitleCellStyle(excelClassConfig);\n",
      "        }\n",
      "        return titleCellStyle;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public CellStyle getHeadCellStyle(ExcelFieldConfig excelFieldConfig) {\n",
      "        String propertyName = excelFieldConfig.getPropertyName();\n",
      "        return headCellStyleMap.computeIfAbsent(propertyName, s -> createHeadCellStyle(excelFieldConfig));\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public CellStyle getDataCellStyle(ExcelFieldConfig excelFieldConfig, String defaultFormat) {\n",
      "        String propertyName = excelFieldConfig.getPropertyName();\n",
      "        return dataCellStyleMap.computeIfAbsent(propertyName, s -> createDataCellStyle(excelFieldConfig, defaultFormat));\n",
      "    }\n",
      "\n",
      "    private CellStyle createTitleCellStyle(ExcelClassConfig excelClassConfig) {\n",
      "        CellStyle cellStyle = this.getWorkbook().createCellStyle();\n",
      "        ExcelStyleConfig titleStyle = excelClassConfig.getTitleStyle();\n",
      "\n",
      "        DataFormat dataFormat = this.getDataFormat();\n",
      "        String titleFormat = excelClassConfig.getTitleFormat();\n",
      "        this.setValue(titleFormat != null && titleFormat.trim().length() > 0, cellStyle::setDataFormat, () -> dataFormat.getFormat(titleFormat));\n",
      "\n",
      "        this.setCellStyle(cellStyle, titleStyle);\n",
      "\n",
      "        workbookParameter.getCellStyleConsumerList().forEach(item -> item.afterCreateTitleCellStyle(excelClassConfig, cellStyle));\n",
      "\n",
      "        return cellStyle;\n",
      "    }\n",
      "\n",
      "    private CellStyle createHeadCellStyle(ExcelFieldConfig excelFieldConfig) {\n",
      "        CellStyle cellStyle = this.getWorkbook().createCellStyle();\n",
      "        ExcelStyleConfig headStyle = excelFieldConfig.getHeadStyle();\n",
      "\n",
      "        DataFormat dataFormat = this.getDataFormat();\n",
      "        String headFormat = excelFieldConfig.getHeadFormat();\n",
      "        this.setValue(headFormat != null && headFormat.trim().length() > 0, cellStyle::setDataFormat, () -> dataFormat.getFormat(headFormat));\n",
      "\n",
      "        this.setCellStyle(cellStyle, headStyle);\n",
      "\n",
      "        workbookParameter.getCellStyleConsumerList().forEach(item -> item.afterCreateHeadCellStyle(excelFieldConfig, cellStyle));\n",
      "\n",
      "        return cellStyle;\n",
      "    }\n",
      "\n",
      "    private CellStyle createDataCellStyle(ExcelFieldConfig excelFieldConfig, String defaultDataFormat) {\n",
      "        CellStyle cellStyle = this.getWorkbook().createCellStyle();\n",
      "\n",
      "        String excelFormat = excelFieldConfig.getExcelFormat();\n",
      "        String realFormat = excelFormat != null && excelFormat.trim().length() > 0 ? excelFormat.trim() : defaultDataFormat.trim();\n",
      "        if (realFormat.length() > 0) {\n",
      "            DataFormat dataFormat = this.getDataFormat();\n",
      "            short dataFormatFormat = dataFormat.getFormat(realFormat);\n",
      "            cellStyle.setDataFormat(dataFormatFormat);\n",
      "        }\n",
      "\n",
      "        ExcelStyleConfig dataStyle = excelFieldConfig.getDataStyle();\n",
      "        this.setCellStyle(cellStyle, dataStyle);\n",
      "\n",
      "        workbookParameter.getCellStyleConsumerList().forEach(item -> item.afterCreateDataCellStyle(excelFieldConfig, defaultDataFormat, cellStyle));\n",
      "\n",
      "        return cellStyle;\n",
      "    }\n",
      "\n",
      "    private Workbook createWorkbook() {\n",
      "        InputStream inputStream = workbookParameter.getInputStream();\n",
      "        Workbook workbook;\n",
      "        try {\n",
      "            if (inputStream != null) {\n",
      "                workbook = WorkbookFactory.create(inputStream);\n",
      "            } else {\n",
      "                workbook = WorkbookFactory.create(workbookParameter.isXssf());\n",
      "            }\n",
      "        } catch (IOException ioException) {\n",
      "            throw new ExcelException(ioException, \"\u521b\u5efa\u5de5\u4f5c\u7c3f\u5931\u8d25\");\n",
      "        }\n",
      "\n",
      "        return workbook;\n",
      "    }\n",
      "\n",
      "    private DataFormat getDataFormat() {\n",
      "        if (dataFormat == null) {\n",
      "            dataFormat = this.getWorkbook().createDataFormat();\n",
      "        }\n",
      "        return dataFormat;\n",
      "    }\n",
      "\n",
      "    private void setCellStyle(CellStyle cellStyle, ExcelStyleConfig excelStyleConfig) {\n",
      "\n",
      "        this.setValue(cellStyle::setHidden, excelStyleConfig::isHidden);\n",
      "        this.setValue(cellStyle::setLocked, excelStyleConfig::isLocked);\n",
      "        this.setValue(cellStyle::setQuotePrefixed, excelStyleConfig::isQuotePrefix);\n",
      "        this.setValue(!excelStyleConfig.getHorizontalAlignment().equals(StyleHorizontalAlignment.NONE), cellStyle::setAlignment, () -> excelStyleConfig.getHorizontalAlignment().getValue());\n",
      "        this.setValue(cellStyle::setWrapText, excelStyleConfig::isWrapText);\n",
      "        this.setValue(!excelStyleConfig.getVerticalAlignment().equals(StyleVerticalAlignment.NONE), cellStyle::setVerticalAlignment, () -> excelStyleConfig.getVerticalAlignment().getValue());\n",
      "        if (this.workbookParameter.isXssf()) {\n",
      "            this.setValue(cellStyle::setRotation, excelStyleConfig::getRotation);\n",
      "        } else {\n",
      "            this.setValue(cellStyle::setRotation, () -> {\n",
      "                short rotation = excelStyleConfig.getRotation();\n",
      "                return rotation > 100 ? (short) (90 - rotation) : rotation;\n",
      "            });\n",
      "        }\n",
      "        this.setValue(excelStyleConfig.getIndent() != -1, cellStyle::setIndention, excelStyleConfig::getIndent);\n",
      "        this.setValue(cellStyle::setBorderLeft, excelStyleConfig::getBorderLeft);\n",
      "        this.setValue(cellStyle::setBorderRight, excelStyleConfig::getBorderRight);\n",
      "        this.setValue(cellStyle::setBorderTop, excelStyleConfig::getBorderTop);\n",
      "        this.setValue(cellStyle::setBorderBottom, excelStyleConfig::getBorderBottom);\n",
      "        this.setValue(excelStyleConfig.getLeftBorderColor() != -1, cellStyle::setLeftBorderColor, excelStyleConfig::getLeftBorderColor);\n",
      "        this.setValue(excelStyleConfig.getRightBorderColor() != -1, cellStyle::setRightBorderColor, excelStyleConfig::getRightBorderColor);\n",
      "        this.setValue(excelStyleConfig.getTopBorderColor() != -1, cellStyle::setTopBorderColor, excelStyleConfig::getTopBorderColor);\n",
      "        this.setValue(excelStyleConfig.getBottomBorderColor() != -1, cellStyle::setBottomBorderColor, excelStyleConfig::getBottomBorderColor);\n",
      "        this.setValue(cellStyle::setFillPattern, excelStyleConfig::getFillPattern);\n",
      "        this.setValue(excelStyleConfig.getFillBackgroundColor() != -1, cellStyle::setFillBackgroundColor, excelStyleConfig::getFillBackgroundColor);\n",
      "        this.setValue(excelStyleConfig.getFillForegroundColor() != -1, cellStyle::setFillForegroundColor, excelStyleConfig::getFillForegroundColor);\n",
      "        this.setValue(cellStyle::setShrinkToFit, excelStyleConfig::isShrinkToFit);\n",
      "\n",
      "        ExcelFontConfig excelFontConfig = excelStyleConfig.getFont();\n",
      "        Font font = this.workbook.createFont();\n",
      "        this.setValue(excelFontConfig.getFontName() != null && excelFontConfig.getFontName().trim().length() > 0, font::setFontName, excelFontConfig::getFontName);\n",
      "        this.setValue(excelFontConfig.getFontHeight() != -1, font::setFontHeight, excelFontConfig::getFontHeight);\n",
      "        this.setValue(excelFontConfig.getFontHeightInPoints() != -1, font::setFontHeightInPoints, excelFontConfig::getFontHeightInPoints);\n",
      "        this.setValue(font::setItalic, excelFontConfig::isItalic);\n",
      "        this.setValue(font::setStrikeout, excelFontConfig::isStrikeout);\n",
      "        this.setValue(excelFontConfig.getColor() != -1, font::setColor, excelFontConfig::getColor);\n",
      "        this.setValue(font::setTypeOffset, () -> excelFontConfig.getTypeOffset().getValue());\n",
      "        this.setValue(font::setUnderline, () -> excelFontConfig.getUnderline().getByteValue());\n",
      "        this.setValue(font::setCharSet, () -> excelFontConfig.getCharset().getNativeId());\n",
      "        this.setValue(font::setBold, excelFontConfig::isBold);\n",
      "        cellStyle.setFont(font);\n",
      "    }\n",
      "\n",
      "    private <T> void setValue(Consumer<T> consumer, Supplier<T> supplier) {\n",
      "        this.setValue(true, consumer, supplier);\n",
      "    }\n",
      "\n",
      "    private <T> void setValue(boolean condition, Consumer<T> consumer, Supplier<T> supplier) {\n",
      "        if (condition) {\n",
      "            consumer.accept(supplier.get());\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package io.github.zouzhiy.excel.context.defualts;\n",
      "\n",
      "import io.github.zouzhiy.excel.builder.ZouzhiyExcelFactory;\n",
      "import io.github.zouzhiy.excel.builder.ZouzhiyExcelFactoryBuilder;\n",
      "import io.github.zouzhiy.excel.context.WorkbookContext;\n",
      "import io.github.zouzhiy.excel.metadata.Configuration;\n",
      "import io.github.zouzhiy.excel.metadata.config.ExcelClassConfig;\n",
      "import io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig;\n",
      "import io.github.zouzhiy.excel.metadata.parameter.SheetParameter;\n",
      "import io.github.zouzhiy.excel.metadata.parameter.WorkbookParameter;\n",
      "import io.github.zouzhiy.excel.metadata.result.CellStyleResult;\n",
      "import io.github.zouzhiy.excel.metadata.result.CellStyleResultSet;\n",
      "import io.github.zouzhiy.excel.parsing.ExcelAnnotationParse;\n",
      "import io.github.zouzhiy.excel.support.metadata.DemoDefault;\n",
      "import io.github.zouzhiy.excel.support.utils.TestFileUtils;\n",
      "import org.apache.poi.ss.usermodel.CellStyle;\n",
      "import org.apache.poi.ss.usermodel.Workbook;\n",
      "import org.junit.jupiter.api.Assertions;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import java.io.InputStream;\n",
      "import java.math.BigDecimal;\n",
      "import java.util.Random;\n",
      "\n",
      "class DefaultWorkbookContextTest {\n",
      "\n",
      "    private final ZouzhiyExcelFactory zouzhiyExcelFactory = ZouzhiyExcelFactoryBuilder.builder().build();\n",
      "\n",
      "    private final Random random = new Random(System.currentTimeMillis());\n",
      "\n",
      "    @Test\n",
      "    void getConfiguration() {\n",
      "        InputStream inputStream = TestFileUtils.getInputStream(\"statics/import/data-title-style-read.xlsx\");\n",
      "        WorkbookParameter workbookParameter = WorkbookParameter.builder()\n",
      "                .input(inputStream)\n",
      "                .sheetParameter(SheetParameter.builder().sheet(0).titleRowStartIndex(0).headRowStartIndex(1).dataRowStartIndex(3).build())\n",
      "                .build();\n",
      "        Configuration configuration = new Configuration();\n",
      "\n",
      "        DefaultWorkbookContext defaultWorkbookContext = new DefaultWorkbookContext(configuration, workbookParameter);\n",
      "\n",
      "        Assertions.assertEquals(configuration, defaultWorkbookContext.getConfiguration());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getWorkbookParameter() {\n",
      "\n",
      "        InputStream inputStream = TestFileUtils.getInputStream(\"statics/import/data-title-style-read.xlsx\");\n",
      "        WorkbookParameter workbookParameter = WorkbookParameter.builder()\n",
      "                .input(inputStream)\n",
      "                .sheetParameter(SheetParameter.builder().sheet(0).titleRowStartIndex(0).headRowStartIndex(1).dataRowStartIndex(3).build())\n",
      "                .build();\n",
      "        Configuration configuration = new Configuration();\n",
      "\n",
      "        DefaultWorkbookContext defaultWorkbookContext = new DefaultWorkbookContext(configuration, workbookParameter);\n",
      "\n",
      "        Assertions.assertEquals(workbookParameter, defaultWorkbookContext.getWorkbookParameter());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getWorkbook() {\n",
      "\n",
      "        WorkbookContext workbookContext = this.getWorkbookContext();\n",
      "        Assertions.assertNotNull(workbookContext.getWorkbook());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getFormulaEvaluator() {\n",
      "        WorkbookContext workbookContext = this.getWorkbookContext();\n",
      "        Assertions.assertNotNull(workbookContext.getFormulaEvaluator());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void putTitleCellStyle() {\n",
      "        WorkbookContext workbookContext = this.getWorkbookContext();\n",
      "\n",
      "        ExcelClassConfig excelClassConfig = this.getExcelClassConfig();\n",
      "        Workbook workbook = workbookContext.getWorkbook();\n",
      "        CellStyle cellStyle = workbook.createCellStyle();\n",
      "        cellStyle.setLeftBorderColor((short) random.nextInt(Short.MAX_VALUE));\n",
      "\n",
      "        workbookContext.putTitleCellStyle(excelClassConfig, cellStyle);\n",
      "        Assertions.assertEquals(cellStyle, workbookContext.getTitleCellStyle(excelClassConfig));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void putHeadCellStyle() {\n",
      "\n",
      "        for (int i = 0; i < 10; i++) {\n",
      "            WorkbookContext workbookContext = this.getWorkbookContext();\n",
      "\n",
      "            Workbook workbook = workbookContext.getWorkbook();\n",
      "            ExcelClassConfig excelClassConfig = this.getExcelClassConfig();\n",
      "            CellStyleResultSet cellStyleResultSet = CellStyleResultSet.empty();\n",
      "            for (ExcelFieldConfig excelFieldConfig : excelClassConfig.getItemList()) {\n",
      "                CellStyle cellStyle = workbook.createCellStyle();\n",
      "                cellStyle.setLeftBorderColor((short) random.nextInt(Short.MAX_VALUE));\n",
      "                cellStyleResultSet.cellStyleResult(excelFieldConfig, cellStyle);\n",
      "            }\n",
      "            workbookContext.putHeadCellStyle(cellStyleResultSet);\n",
      "\n",
      "            for (ExcelFieldConfig excelFieldConfig : excelClassConfig.getItemList()) {\n",
      "                CellStyle cellStyle = workbookContext.getHeadCellStyle(excelFieldConfig);\n",
      "                CellStyle cellStyleResult = cellStyleResultSet.getCellStyleResultList().stream().filter(item -> item.getExcelFieldConfig().equals(excelFieldConfig)).findAny().map(CellStyleResult::getCellStyle).orElse(null);\n",
      "                Assertions.assertNotNull(cellStyleResult);\n",
      "                Assertions.assertEquals(cellStyle.getLeftBorderColor(), cellStyleResult.getLeftBorderColor());\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void putDataCellStyle() {\n",
      "        for (int i = 0; i < 10; i++) {\n",
      "            WorkbookContext workbookContext = this.getWorkbookContext();\n",
      "\n",
      "            Workbook workbook = workbookContext.getWorkbook();\n",
      "            ExcelClassConfig excelClassConfig = this.getExcelClassConfig();\n",
      "            CellStyleResultSet cellStyleResultSet = CellStyleResultSet.empty();\n",
      "            for (ExcelFieldConfig excelFieldConfig : excelClassConfig.getItemList()) {\n",
      "                CellStyle cellStyle = workbook.createCellStyle();\n",
      "                cellStyle.setLeftBorderColor((short) random.nextInt(Short.MAX_VALUE));\n",
      "                cellStyleResultSet.cellStyleResult(excelFieldConfig, cellStyle);\n",
      "            }\n",
      "            workbookContext.putDataCellStyle(cellStyleResultSet);\n",
      "\n",
      "            for (ExcelFieldConfig excelFieldConfig : excelClassConfig.getItemList()) {\n",
      "                CellStyle cellStyle = workbookContext.getDataCellStyle(excelFieldConfig, \"\");\n",
      "                CellStyle cellStyleResult = cellStyleResultSet.getCellStyleResultList().stream().filter(item -> item.getExcelFieldConfig().equals(excelFieldConfig)).findAny().map(CellStyleResult::getCellStyle).orElse(null);\n",
      "                Assertions.assertNotNull(cellStyleResult);\n",
      "                Assertions.assertEquals(cellStyle.getLeftBorderColor(), cellStyleResult.getLeftBorderColor());\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getTitleCellStyle() {\n",
      "        WorkbookContext workbookContext = this.getWorkbookContext();\n",
      "        ExcelClassConfig excelClassConfig = this.getExcelClassConfig();\n",
      "        CellStyle cellStyle = workbookContext.getTitleCellStyle(excelClassConfig);\n",
      "        Assertions.assertNotNull(cellStyle);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getHeadCellStyle() {\n",
      "\n",
      "        WorkbookContext workbookContext = this.getWorkbookContext();\n",
      "        ExcelClassConfig excelClassConfig = this.getExcelClassConfig();\n",
      "        for (ExcelFieldConfig excelFieldConfig : excelClassConfig.getItemList()) {\n",
      "            CellStyle cellStyle = workbookContext.getHeadCellStyle(excelFieldConfig);\n",
      "            Assertions.assertNotNull(cellStyle);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getDataCellStyle() {\n",
      "        for (int i = 0; i < 10; i++) {\n",
      "            WorkbookContext workbookContext = this.getWorkbookContext();\n",
      "\n",
      "            ExcelClassConfig excelClassConfig = this.getExcelClassConfig();\n",
      "\n",
      "            for (ExcelFieldConfig excelFieldConfig : excelClassConfig.getItemList()) {\n",
      "                if (!BigDecimal.class.equals(excelFieldConfig.getJavaType())) {\n",
      "                    continue;\n",
      "                }\n",
      "                CellStyle cellStyle = workbookContext.getDataCellStyle(excelFieldConfig, \"0.00\");\n",
      "                assert cellStyle.getDataFormat() == workbookContext.getWorkbook().createDataFormat().getFormat(\"0.00\");\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "\n",
      "    private ExcelClassConfig getExcelClassConfig() {\n",
      "        return new ExcelAnnotationParse(new Configuration()).findForClass(DemoDefault.class);\n",
      "    }\n",
      "\n",
      "    private WorkbookContext getWorkbookContext() {\n",
      "        InputStream inputStream = TestFileUtils.getInputStream(\"statics/statics/import/data-title-style-read.xlsx\");\n",
      "        WorkbookParameter workbookParameter = WorkbookParameter.builder()\n",
      "                .input(inputStream)\n",
      "                .sheetParameter(SheetParameter.builder().sheet(0).titleRowStartIndex(0).headRowStartIndex(1).dataRowStartIndex(3).build())\n",
      "                .build();\n",
      "\n",
      "        return new DefaultWorkbookContext(new Configuration(), workbookParameter);\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "DefaultWorkbookContext::::getConfiguration()": [
        57,
        60
      ],
      "DefaultWorkbookContext::::getWorkbookParameter()": [
        62,
        65
      ],
      "DefaultWorkbookContext::::getWorkbook()": [
        67,
        73
      ],
      "DefaultWorkbookContext::::getFormulaEvaluator()": [
        75,
        81
      ],
      "DefaultWorkbookContext::::putHeadCellStyle(io.github.zouzhiy.excel.metadata.result.CellStyleResultSet)": [
        88,
        91
      ],
      "DefaultWorkbookContext::::putDataCellStyle(io.github.zouzhiy.excel.metadata.result.CellStyleResultSet)": [
        93,
        96
      ],
      "DefaultWorkbookContext::::getTitleCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelClassConfig)": [
        98,
        104
      ],
      "DefaultWorkbookContext::::getHeadCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig)": [
        106,
        110
      ],
      "DefaultWorkbookContext::::getDataCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,java.lang.String)": [
        112,
        116
      ],
      "DefaultWorkbookContext::::createTitleCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelClassConfig)": [
        118,
        131
      ],
      "DefaultWorkbookContext::::createHeadCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig)": [
        133,
        146
      ],
      "DefaultWorkbookContext::::createDataCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,java.lang.String)": [
        148,
        165
      ],
      "DefaultWorkbookContext::::createWorkbook()": [
        167,
        181
      ],
      "DefaultWorkbookContext::::getDataFormat()": [
        183,
        188
      ],
      "DefaultWorkbookContext::::setValue(java.util.function.Consumer<T>,java.util.function.Supplier<T>)": [
        235,
        237
      ],
      "DefaultWorkbookContext::::setValue(boolean,java.util.function.Consumer<T>,java.util.function.Supplier<T>)": [
        239,
        243
      ]
    },
    "test_method_lines_dic": {
      "DefaultWorkbookContextTest::::getConfiguration()": [
        31,
        43
      ],
      "DefaultWorkbookContextTest::::getWorkbookParameter()": [
        45,
        58
      ],
      "DefaultWorkbookContextTest::::getWorkbook()": [
        60,
        65
      ],
      "DefaultWorkbookContextTest::::getFormulaEvaluator()": [
        67,
        71
      ],
      "DefaultWorkbookContextTest::::putTitleCellStyle()": [
        73,
        84
      ],
      "DefaultWorkbookContextTest::::putHeadCellStyle()": [
        86,
        109
      ],
      "DefaultWorkbookContextTest::::putDataCellStyle()": [
        111,
        133
      ],
      "DefaultWorkbookContextTest::::getTitleCellStyle()": [
        135,
        141
      ],
      "DefaultWorkbookContextTest::::getHeadCellStyle()": [
        143,
        152
      ],
      "DefaultWorkbookContextTest::::getDataCellStyle()": [
        154,
        169
      ],
      "DefaultWorkbookContextTest::::getExcelClassConfig()": [
        172,
        174
      ],
      "DefaultWorkbookContextTest::::getWorkbookContext()": [
        176,
        184
      ]
    },
    "reverse_method_lines_dic": {
      "57": "DefaultWorkbookContext::::getConfiguration()",
      "58": "DefaultWorkbookContext::::getConfiguration()",
      "59": "DefaultWorkbookContext::::getConfiguration()",
      "60": "DefaultWorkbookContext::::getConfiguration()",
      "62": "DefaultWorkbookContext::::getWorkbookParameter()",
      "63": "DefaultWorkbookContext::::getWorkbookParameter()",
      "64": "DefaultWorkbookContext::::getWorkbookParameter()",
      "65": "DefaultWorkbookContext::::getWorkbookParameter()",
      "67": "DefaultWorkbookContext::::getWorkbook()",
      "68": "DefaultWorkbookContext::::getWorkbook()",
      "69": "DefaultWorkbookContext::::getWorkbook()",
      "70": "DefaultWorkbookContext::::getWorkbook()",
      "71": "DefaultWorkbookContext::::getWorkbook()",
      "72": "DefaultWorkbookContext::::getWorkbook()",
      "73": "DefaultWorkbookContext::::getWorkbook()",
      "75": "DefaultWorkbookContext::::getFormulaEvaluator()",
      "76": "DefaultWorkbookContext::::getFormulaEvaluator()",
      "77": "DefaultWorkbookContext::::getFormulaEvaluator()",
      "78": "DefaultWorkbookContext::::getFormulaEvaluator()",
      "79": "DefaultWorkbookContext::::getFormulaEvaluator()",
      "80": "DefaultWorkbookContext::::getFormulaEvaluator()",
      "81": "DefaultWorkbookContext::::getFormulaEvaluator()",
      "88": "DefaultWorkbookContext::::putHeadCellStyle(io.github.zouzhiy.excel.metadata.result.CellStyleResultSet)",
      "89": "DefaultWorkbookContext::::putHeadCellStyle(io.github.zouzhiy.excel.metadata.result.CellStyleResultSet)",
      "90": "DefaultWorkbookContext::::putHeadCellStyle(io.github.zouzhiy.excel.metadata.result.CellStyleResultSet)",
      "91": "DefaultWorkbookContext::::putHeadCellStyle(io.github.zouzhiy.excel.metadata.result.CellStyleResultSet)",
      "93": "DefaultWorkbookContext::::putDataCellStyle(io.github.zouzhiy.excel.metadata.result.CellStyleResultSet)",
      "94": "DefaultWorkbookContext::::putDataCellStyle(io.github.zouzhiy.excel.metadata.result.CellStyleResultSet)",
      "95": "DefaultWorkbookContext::::putDataCellStyle(io.github.zouzhiy.excel.metadata.result.CellStyleResultSet)",
      "96": "DefaultWorkbookContext::::putDataCellStyle(io.github.zouzhiy.excel.metadata.result.CellStyleResultSet)",
      "98": "DefaultWorkbookContext::::getTitleCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelClassConfig)",
      "99": "DefaultWorkbookContext::::getTitleCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelClassConfig)",
      "100": "DefaultWorkbookContext::::getTitleCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelClassConfig)",
      "101": "DefaultWorkbookContext::::getTitleCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelClassConfig)",
      "102": "DefaultWorkbookContext::::getTitleCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelClassConfig)",
      "103": "DefaultWorkbookContext::::getTitleCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelClassConfig)",
      "104": "DefaultWorkbookContext::::getTitleCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelClassConfig)",
      "106": "DefaultWorkbookContext::::getHeadCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig)",
      "107": "DefaultWorkbookContext::::getHeadCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig)",
      "108": "DefaultWorkbookContext::::getHeadCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig)",
      "109": "DefaultWorkbookContext::::getHeadCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig)",
      "110": "DefaultWorkbookContext::::getHeadCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig)",
      "112": "DefaultWorkbookContext::::getDataCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,java.lang.String)",
      "113": "DefaultWorkbookContext::::getDataCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,java.lang.String)",
      "114": "DefaultWorkbookContext::::getDataCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,java.lang.String)",
      "115": "DefaultWorkbookContext::::getDataCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,java.lang.String)",
      "116": "DefaultWorkbookContext::::getDataCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,java.lang.String)",
      "118": "DefaultWorkbookContext::::createTitleCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelClassConfig)",
      "119": "DefaultWorkbookContext::::createTitleCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelClassConfig)",
      "120": "DefaultWorkbookContext::::createTitleCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelClassConfig)",
      "121": "DefaultWorkbookContext::::createTitleCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelClassConfig)",
      "122": "DefaultWorkbookContext::::createTitleCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelClassConfig)",
      "123": "DefaultWorkbookContext::::createTitleCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelClassConfig)",
      "124": "DefaultWorkbookContext::::createTitleCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelClassConfig)",
      "125": "DefaultWorkbookContext::::createTitleCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelClassConfig)",
      "126": "DefaultWorkbookContext::::createTitleCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelClassConfig)",
      "127": "DefaultWorkbookContext::::createTitleCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelClassConfig)",
      "128": "DefaultWorkbookContext::::createTitleCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelClassConfig)",
      "129": "DefaultWorkbookContext::::createTitleCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelClassConfig)",
      "130": "DefaultWorkbookContext::::createTitleCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelClassConfig)",
      "131": "DefaultWorkbookContext::::createTitleCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelClassConfig)",
      "133": "DefaultWorkbookContext::::createHeadCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig)",
      "134": "DefaultWorkbookContext::::createHeadCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig)",
      "135": "DefaultWorkbookContext::::createHeadCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig)",
      "136": "DefaultWorkbookContext::::createHeadCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig)",
      "137": "DefaultWorkbookContext::::createHeadCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig)",
      "138": "DefaultWorkbookContext::::createHeadCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig)",
      "139": "DefaultWorkbookContext::::createHeadCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig)",
      "140": "DefaultWorkbookContext::::createHeadCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig)",
      "141": "DefaultWorkbookContext::::createHeadCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig)",
      "142": "DefaultWorkbookContext::::createHeadCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig)",
      "143": "DefaultWorkbookContext::::createHeadCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig)",
      "144": "DefaultWorkbookContext::::createHeadCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig)",
      "145": "DefaultWorkbookContext::::createHeadCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig)",
      "146": "DefaultWorkbookContext::::createHeadCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig)",
      "148": "DefaultWorkbookContext::::createDataCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,java.lang.String)",
      "149": "DefaultWorkbookContext::::createDataCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,java.lang.String)",
      "150": "DefaultWorkbookContext::::createDataCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,java.lang.String)",
      "151": "DefaultWorkbookContext::::createDataCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,java.lang.String)",
      "152": "DefaultWorkbookContext::::createDataCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,java.lang.String)",
      "153": "DefaultWorkbookContext::::createDataCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,java.lang.String)",
      "154": "DefaultWorkbookContext::::createDataCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,java.lang.String)",
      "155": "DefaultWorkbookContext::::createDataCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,java.lang.String)",
      "156": "DefaultWorkbookContext::::createDataCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,java.lang.String)",
      "157": "DefaultWorkbookContext::::createDataCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,java.lang.String)",
      "158": "DefaultWorkbookContext::::createDataCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,java.lang.String)",
      "159": "DefaultWorkbookContext::::createDataCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,java.lang.String)",
      "160": "DefaultWorkbookContext::::createDataCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,java.lang.String)",
      "161": "DefaultWorkbookContext::::createDataCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,java.lang.String)",
      "162": "DefaultWorkbookContext::::createDataCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,java.lang.String)",
      "163": "DefaultWorkbookContext::::createDataCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,java.lang.String)",
      "164": "DefaultWorkbookContext::::createDataCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,java.lang.String)",
      "165": "DefaultWorkbookContext::::createDataCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,java.lang.String)",
      "167": "DefaultWorkbookContext::::createWorkbook()",
      "168": "DefaultWorkbookContext::::createWorkbook()",
      "169": "DefaultWorkbookContext::::createWorkbook()",
      "170": "DefaultWorkbookContext::::createWorkbook()",
      "171": "DefaultWorkbookContext::::createWorkbook()",
      "172": "DefaultWorkbookContext::::createWorkbook()",
      "173": "DefaultWorkbookContext::::createWorkbook()",
      "174": "DefaultWorkbookContext::::createWorkbook()",
      "175": "DefaultWorkbookContext::::createWorkbook()",
      "176": "DefaultWorkbookContext::::createWorkbook()",
      "177": "DefaultWorkbookContext::::createWorkbook()",
      "178": "DefaultWorkbookContext::::createWorkbook()",
      "179": "DefaultWorkbookContext::::createWorkbook()",
      "180": "DefaultWorkbookContext::::createWorkbook()",
      "181": "DefaultWorkbookContext::::createWorkbook()",
      "183": "DefaultWorkbookContext::::getDataFormat()",
      "184": "DefaultWorkbookContext::::getDataFormat()",
      "185": "DefaultWorkbookContext::::getDataFormat()",
      "186": "DefaultWorkbookContext::::getDataFormat()",
      "187": "DefaultWorkbookContext::::getDataFormat()",
      "188": "DefaultWorkbookContext::::getDataFormat()",
      "235": "DefaultWorkbookContext::::setValue(java.util.function.Consumer<T>,java.util.function.Supplier<T>)",
      "236": "DefaultWorkbookContext::::setValue(java.util.function.Consumer<T>,java.util.function.Supplier<T>)",
      "237": "DefaultWorkbookContext::::setValue(java.util.function.Consumer<T>,java.util.function.Supplier<T>)",
      "239": "DefaultWorkbookContext::::setValue(boolean,java.util.function.Consumer<T>,java.util.function.Supplier<T>)",
      "240": "DefaultWorkbookContext::::setValue(boolean,java.util.function.Consumer<T>,java.util.function.Supplier<T>)",
      "241": "DefaultWorkbookContext::::setValue(boolean,java.util.function.Consumer<T>,java.util.function.Supplier<T>)",
      "242": "DefaultWorkbookContext::::setValue(boolean,java.util.function.Consumer<T>,java.util.function.Supplier<T>)",
      "243": "DefaultWorkbookContext::::setValue(boolean,java.util.function.Consumer<T>,java.util.function.Supplier<T>)"
    },
    "test_reverse_method_lines_dic": {
      "31": "DefaultWorkbookContextTest::::getConfiguration()",
      "32": "DefaultWorkbookContextTest::::getConfiguration()",
      "33": "DefaultWorkbookContextTest::::getConfiguration()",
      "34": "DefaultWorkbookContextTest::::getConfiguration()",
      "35": "DefaultWorkbookContextTest::::getConfiguration()",
      "36": "DefaultWorkbookContextTest::::getConfiguration()",
      "37": "DefaultWorkbookContextTest::::getConfiguration()",
      "38": "DefaultWorkbookContextTest::::getConfiguration()",
      "39": "DefaultWorkbookContextTest::::getConfiguration()",
      "40": "DefaultWorkbookContextTest::::getConfiguration()",
      "41": "DefaultWorkbookContextTest::::getConfiguration()",
      "42": "DefaultWorkbookContextTest::::getConfiguration()",
      "43": "DefaultWorkbookContextTest::::getConfiguration()",
      "45": "DefaultWorkbookContextTest::::getWorkbookParameter()",
      "46": "DefaultWorkbookContextTest::::getWorkbookParameter()",
      "47": "DefaultWorkbookContextTest::::getWorkbookParameter()",
      "48": "DefaultWorkbookContextTest::::getWorkbookParameter()",
      "49": "DefaultWorkbookContextTest::::getWorkbookParameter()",
      "50": "DefaultWorkbookContextTest::::getWorkbookParameter()",
      "51": "DefaultWorkbookContextTest::::getWorkbookParameter()",
      "52": "DefaultWorkbookContextTest::::getWorkbookParameter()",
      "53": "DefaultWorkbookContextTest::::getWorkbookParameter()",
      "54": "DefaultWorkbookContextTest::::getWorkbookParameter()",
      "55": "DefaultWorkbookContextTest::::getWorkbookParameter()",
      "56": "DefaultWorkbookContextTest::::getWorkbookParameter()",
      "57": "DefaultWorkbookContextTest::::getWorkbookParameter()",
      "58": "DefaultWorkbookContextTest::::getWorkbookParameter()",
      "60": "DefaultWorkbookContextTest::::getWorkbook()",
      "61": "DefaultWorkbookContextTest::::getWorkbook()",
      "62": "DefaultWorkbookContextTest::::getWorkbook()",
      "63": "DefaultWorkbookContextTest::::getWorkbook()",
      "64": "DefaultWorkbookContextTest::::getWorkbook()",
      "65": "DefaultWorkbookContextTest::::getWorkbook()",
      "67": "DefaultWorkbookContextTest::::getFormulaEvaluator()",
      "68": "DefaultWorkbookContextTest::::getFormulaEvaluator()",
      "69": "DefaultWorkbookContextTest::::getFormulaEvaluator()",
      "70": "DefaultWorkbookContextTest::::getFormulaEvaluator()",
      "71": "DefaultWorkbookContextTest::::getFormulaEvaluator()",
      "73": "DefaultWorkbookContextTest::::putTitleCellStyle()",
      "74": "DefaultWorkbookContextTest::::putTitleCellStyle()",
      "75": "DefaultWorkbookContextTest::::putTitleCellStyle()",
      "76": "DefaultWorkbookContextTest::::putTitleCellStyle()",
      "77": "DefaultWorkbookContextTest::::putTitleCellStyle()",
      "78": "DefaultWorkbookContextTest::::putTitleCellStyle()",
      "79": "DefaultWorkbookContextTest::::putTitleCellStyle()",
      "80": "DefaultWorkbookContextTest::::putTitleCellStyle()",
      "81": "DefaultWorkbookContextTest::::putTitleCellStyle()",
      "82": "DefaultWorkbookContextTest::::putTitleCellStyle()",
      "83": "DefaultWorkbookContextTest::::putTitleCellStyle()",
      "84": "DefaultWorkbookContextTest::::putTitleCellStyle()",
      "86": "DefaultWorkbookContextTest::::putHeadCellStyle()",
      "87": "DefaultWorkbookContextTest::::putHeadCellStyle()",
      "88": "DefaultWorkbookContextTest::::putHeadCellStyle()",
      "89": "DefaultWorkbookContextTest::::putHeadCellStyle()",
      "90": "DefaultWorkbookContextTest::::putHeadCellStyle()",
      "91": "DefaultWorkbookContextTest::::putHeadCellStyle()",
      "92": "DefaultWorkbookContextTest::::putHeadCellStyle()",
      "93": "DefaultWorkbookContextTest::::putHeadCellStyle()",
      "94": "DefaultWorkbookContextTest::::putHeadCellStyle()",
      "95": "DefaultWorkbookContextTest::::putHeadCellStyle()",
      "96": "DefaultWorkbookContextTest::::putHeadCellStyle()",
      "97": "DefaultWorkbookContextTest::::putHeadCellStyle()",
      "98": "DefaultWorkbookContextTest::::putHeadCellStyle()",
      "99": "DefaultWorkbookContextTest::::putHeadCellStyle()",
      "100": "DefaultWorkbookContextTest::::putHeadCellStyle()",
      "101": "DefaultWorkbookContextTest::::putHeadCellStyle()",
      "102": "DefaultWorkbookContextTest::::putHeadCellStyle()",
      "103": "DefaultWorkbookContextTest::::putHeadCellStyle()",
      "104": "DefaultWorkbookContextTest::::putHeadCellStyle()",
      "105": "DefaultWorkbookContextTest::::putHeadCellStyle()",
      "106": "DefaultWorkbookContextTest::::putHeadCellStyle()",
      "107": "DefaultWorkbookContextTest::::putHeadCellStyle()",
      "108": "DefaultWorkbookContextTest::::putHeadCellStyle()",
      "109": "DefaultWorkbookContextTest::::putHeadCellStyle()",
      "111": "DefaultWorkbookContextTest::::putDataCellStyle()",
      "112": "DefaultWorkbookContextTest::::putDataCellStyle()",
      "113": "DefaultWorkbookContextTest::::putDataCellStyle()",
      "114": "DefaultWorkbookContextTest::::putDataCellStyle()",
      "115": "DefaultWorkbookContextTest::::putDataCellStyle()",
      "116": "DefaultWorkbookContextTest::::putDataCellStyle()",
      "117": "DefaultWorkbookContextTest::::putDataCellStyle()",
      "118": "DefaultWorkbookContextTest::::putDataCellStyle()",
      "119": "DefaultWorkbookContextTest::::putDataCellStyle()",
      "120": "DefaultWorkbookContextTest::::putDataCellStyle()",
      "121": "DefaultWorkbookContextTest::::putDataCellStyle()",
      "122": "DefaultWorkbookContextTest::::putDataCellStyle()",
      "123": "DefaultWorkbookContextTest::::putDataCellStyle()",
      "124": "DefaultWorkbookContextTest::::putDataCellStyle()",
      "125": "DefaultWorkbookContextTest::::putDataCellStyle()",
      "126": "DefaultWorkbookContextTest::::putDataCellStyle()",
      "127": "DefaultWorkbookContextTest::::putDataCellStyle()",
      "128": "DefaultWorkbookContextTest::::putDataCellStyle()",
      "129": "DefaultWorkbookContextTest::::putDataCellStyle()",
      "130": "DefaultWorkbookContextTest::::putDataCellStyle()",
      "131": "DefaultWorkbookContextTest::::putDataCellStyle()",
      "132": "DefaultWorkbookContextTest::::putDataCellStyle()",
      "133": "DefaultWorkbookContextTest::::putDataCellStyle()",
      "135": "DefaultWorkbookContextTest::::getTitleCellStyle()",
      "136": "DefaultWorkbookContextTest::::getTitleCellStyle()",
      "137": "DefaultWorkbookContextTest::::getTitleCellStyle()",
      "138": "DefaultWorkbookContextTest::::getTitleCellStyle()",
      "139": "DefaultWorkbookContextTest::::getTitleCellStyle()",
      "140": "DefaultWorkbookContextTest::::getTitleCellStyle()",
      "141": "DefaultWorkbookContextTest::::getTitleCellStyle()",
      "143": "DefaultWorkbookContextTest::::getHeadCellStyle()",
      "144": "DefaultWorkbookContextTest::::getHeadCellStyle()",
      "145": "DefaultWorkbookContextTest::::getHeadCellStyle()",
      "146": "DefaultWorkbookContextTest::::getHeadCellStyle()",
      "147": "DefaultWorkbookContextTest::::getHeadCellStyle()",
      "148": "DefaultWorkbookContextTest::::getHeadCellStyle()",
      "149": "DefaultWorkbookContextTest::::getHeadCellStyle()",
      "150": "DefaultWorkbookContextTest::::getHeadCellStyle()",
      "151": "DefaultWorkbookContextTest::::getHeadCellStyle()",
      "152": "DefaultWorkbookContextTest::::getHeadCellStyle()",
      "154": "DefaultWorkbookContextTest::::getDataCellStyle()",
      "155": "DefaultWorkbookContextTest::::getDataCellStyle()",
      "156": "DefaultWorkbookContextTest::::getDataCellStyle()",
      "157": "DefaultWorkbookContextTest::::getDataCellStyle()",
      "158": "DefaultWorkbookContextTest::::getDataCellStyle()",
      "159": "DefaultWorkbookContextTest::::getDataCellStyle()",
      "160": "DefaultWorkbookContextTest::::getDataCellStyle()",
      "161": "DefaultWorkbookContextTest::::getDataCellStyle()",
      "162": "DefaultWorkbookContextTest::::getDataCellStyle()",
      "163": "DefaultWorkbookContextTest::::getDataCellStyle()",
      "164": "DefaultWorkbookContextTest::::getDataCellStyle()",
      "165": "DefaultWorkbookContextTest::::getDataCellStyle()",
      "166": "DefaultWorkbookContextTest::::getDataCellStyle()",
      "167": "DefaultWorkbookContextTest::::getDataCellStyle()",
      "168": "DefaultWorkbookContextTest::::getDataCellStyle()",
      "169": "DefaultWorkbookContextTest::::getDataCellStyle()",
      "172": "DefaultWorkbookContextTest::::getExcelClassConfig()",
      "173": "DefaultWorkbookContextTest::::getExcelClassConfig()",
      "174": "DefaultWorkbookContextTest::::getExcelClassConfig()",
      "176": "DefaultWorkbookContextTest::::getWorkbookContext()",
      "177": "DefaultWorkbookContextTest::::getWorkbookContext()",
      "178": "DefaultWorkbookContextTest::::getWorkbookContext()",
      "179": "DefaultWorkbookContextTest::::getWorkbookContext()",
      "180": "DefaultWorkbookContextTest::::getWorkbookContext()",
      "181": "DefaultWorkbookContextTest::::getWorkbookContext()",
      "182": "DefaultWorkbookContextTest::::getWorkbookContext()",
      "183": "DefaultWorkbookContextTest::::getWorkbookContext()",
      "184": "DefaultWorkbookContextTest::::getWorkbookContext()"
    },
    "tests": [
      {
        "test_lines": [
          31,
          43
        ],
        "covered_lines": [
          45,
          46,
          50,
          52,
          53,
          54,
          55,
          59
        ]
      },
      {
        "test_lines": [
          45,
          58
        ],
        "covered_lines": [
          45,
          46,
          50,
          52,
          53,
          54,
          55,
          64
        ]
      },
      {
        "test_lines": [
          60,
          65
        ],
        "covered_lines": [
          45,
          46,
          50,
          52,
          53,
          54,
          55,
          69,
          70,
          72,
          168,
          171,
          174,
          178,
          180
        ]
      },
      {
        "test_lines": [
          67,
          71
        ],
        "covered_lines": [
          45,
          46,
          50,
          52,
          53,
          54,
          55,
          69,
          70,
          72,
          77,
          78,
          80,
          168,
          171,
          174,
          178,
          180
        ]
      },
      {
        "test_lines": [
          73,
          84
        ],
        "covered_lines": [
          45,
          46,
          50,
          52,
          53,
          54,
          55,
          69,
          70,
          72,
          85,
          86,
          100,
          103,
          168,
          171,
          174,
          178,
          180
        ]
      },
      {
        "test_lines": [
          86,
          109
        ],
        "covered_lines": [
          45,
          46,
          50,
          52,
          53,
          54,
          55,
          69,
          70,
          72,
          90,
          91,
          108,
          109,
          168,
          171,
          174,
          178,
          180
        ]
      },
      {
        "test_lines": [
          111,
          133
        ],
        "covered_lines": [
          45,
          46,
          50,
          52,
          53,
          54,
          55,
          69,
          70,
          72,
          95,
          96,
          114,
          115,
          168,
          171,
          174,
          178,
          180
        ]
      },
      {
        "test_lines": [
          135,
          141
        ],
        "covered_lines": [
          45,
          46,
          50,
          52,
          53,
          54,
          55,
          69,
          70,
          72,
          100,
          101,
          103,
          119,
          120,
          122,
          123,
          124,
          126,
          128,
          130,
          168,
          171,
          174,
          178,
          180,
          184,
          185,
          187,
          192,
          193,
          194,
          195,
          196,
          197,
          198,
          199,
          206,
          207,
          208,
          209,
          210,
          211,
          212,
          213,
          214,
          215,
          216,
          217,
          218,
          220,
          221,
          222,
          223,
          224,
          225,
          226,
          227,
          228,
          229,
          230,
          231,
          232,
          233,
          236,
          237,
          240,
          241,
          243
        ]
      },
      {
        "test_lines": [
          143,
          152
        ],
        "covered_lines": [
          45,
          46,
          50,
          52,
          53,
          54,
          55,
          69,
          70,
          72,
          108,
          109,
          134,
          135,
          137,
          138,
          139,
          141,
          143,
          145,
          168,
          171,
          174,
          178,
          180,
          184,
          185,
          187,
          192,
          193,
          194,
          195,
          196,
          197,
          198,
          199,
          206,
          207,
          208,
          209,
          210,
          211,
          212,
          213,
          214,
          215,
          216,
          217,
          218,
          220,
          221,
          222,
          223,
          224,
          225,
          226,
          227,
          228,
          229,
          230,
          231,
          232,
          233,
          236,
          237,
          240,
          241,
          243
        ]
      },
      {
        "test_lines": [
          154,
          169
        ],
        "covered_lines": [
          45,
          46,
          50,
          52,
          53,
          54,
          55
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/zouzhiy-excel/src/main/java/io/github/zouzhiy/excel/context/defualts/DefaultRowContext.java": {
    "class_content": [
      "/*\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package io.github.zouzhiy.excel.context.defualts;\n",
      "\n",
      "import io.github.zouzhiy.excel.context.RowContext;\n",
      "import io.github.zouzhiy.excel.context.SheetContext;\n",
      "import org.apache.poi.ss.usermodel.Row;\n",
      "\n",
      "import java.util.List;\n",
      "\n",
      "/**\n",
      " * @author zouzhiy\n",
      " * @since 2022/7/2\n",
      " */\n",
      "public class DefaultRowContext implements RowContext {\n",
      "\n",
      "    private final SheetContext sheetContext;\n",
      "\n",
      "    private final Object rowData;\n",
      "\n",
      "    private final List<Row> rowList;\n",
      "\n",
      "    private final int rowspan;\n",
      "\n",
      "\n",
      "    public DefaultRowContext(SheetContext sheetContext, Object rowData, List<Row> rowList, int rowspan) {\n",
      "        this.sheetContext = sheetContext;\n",
      "        this.rowData = rowData;\n",
      "        this.rowList = rowList;\n",
      "        this.rowspan = rowspan;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public SheetContext getSheetContext() {\n",
      "        return sheetContext;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Object getRowData() {\n",
      "        return rowData;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public List<Row> getRowList() {\n",
      "        return rowList;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public int getRowspan() {\n",
      "        return rowspan;\n",
      "    }\n",
      "\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package io.github.zouzhiy.excel.context.defualts;\n",
      "\n",
      "import io.github.zouzhiy.excel.builder.ZouzhiyExcelFactory;\n",
      "import io.github.zouzhiy.excel.builder.ZouzhiyExcelFactoryBuilder;\n",
      "import io.github.zouzhiy.excel.context.RowContext;\n",
      "import io.github.zouzhiy.excel.context.SheetContext;\n",
      "import io.github.zouzhiy.excel.metadata.parameter.SheetParameter;\n",
      "import io.github.zouzhiy.excel.metadata.parameter.WorkbookParameter;\n",
      "import io.github.zouzhiy.excel.read.WorkbookRead;\n",
      "import io.github.zouzhiy.excel.support.metadata.DemoDefault;\n",
      "import io.github.zouzhiy.excel.support.utils.TestFileUtils;\n",
      "import org.apache.poi.ss.usermodel.Row;\n",
      "import org.junit.jupiter.api.Assertions;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import java.io.InputStream;\n",
      "import java.util.List;\n",
      "import java.util.Random;\n",
      "\n",
      "class DefaultRowContextTest {\n",
      "\n",
      "    private final ZouzhiyExcelFactory zouzhiyExcelFactory = ZouzhiyExcelFactoryBuilder.builder().build();\n",
      "    private final Random random = new Random(System.currentTimeMillis());\n",
      "\n",
      "    @Test\n",
      "    void getSheetContext1() {\n",
      "        SheetContext sheetContext = this.getSheetContext();\n",
      "        RowContext rowContext = new DefaultRowContext(sheetContext, null, null, 1);\n",
      "\n",
      "        Assertions.assertEquals(sheetContext, rowContext.getSheetContext());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getRowData() {\n",
      "        SheetContext sheetContext = this.getSheetContext();\n",
      "        DemoDefault demoDefault = new DemoDefault();\n",
      "        demoDefault.setName(\"name--\" + System.currentTimeMillis());\n",
      "        demoDefault.setTitle(\"title--\" + System.currentTimeMillis());\n",
      "        RowContext rowContext = new DefaultRowContext(sheetContext, demoDefault, null, 1);\n",
      "\n",
      "        Assertions.assertEquals(demoDefault, rowContext.getRowData());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getRowList() {\n",
      "        for (int i = 0; i < 10; i++) {\n",
      "            SheetContext sheetContext = this.getSheetContext();\n",
      "\n",
      "            int rowIndex = random.nextInt(10);\n",
      "            List<Row> rowList = sheetContext.getRowList(rowIndex, rowIndex + random.nextInt(5));\n",
      "            DemoDefault demoDefault = new DemoDefault();\n",
      "            demoDefault.setName(\"name--\" + System.currentTimeMillis());\n",
      "            demoDefault.setTitle(\"title--\" + System.currentTimeMillis());\n",
      "            RowContext rowContext = new DefaultRowContext(sheetContext, demoDefault, rowList, 1);\n",
      "\n",
      "            Assertions.assertEquals(rowList, rowContext.getRowList());\n",
      "        }\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getRowspan() {\n",
      "        for (int i = 0; i < 10; i++) {\n",
      "            SheetContext sheetContext = this.getSheetContext();\n",
      "\n",
      "            int rowIndex = random.nextInt(10);\n",
      "            List<Row> rowList = sheetContext.getRowList(rowIndex, rowIndex + random.nextInt(5));\n",
      "            DemoDefault demoDefault = new DemoDefault();\n",
      "            demoDefault.setName(\"name--\" + System.currentTimeMillis());\n",
      "            demoDefault.setTitle(\"title--\" + System.currentTimeMillis());\n",
      "            int rowspan = random.nextInt(10);\n",
      "            RowContext rowContext = new DefaultRowContext(sheetContext, demoDefault, rowList, rowspan);\n",
      "\n",
      "            Assertions.assertEquals(rowspan, rowContext.getRowspan());\n",
      "        }\n",
      "\n",
      "    }\n",
      "\n",
      "    private SheetContext getSheetContext() {\n",
      "        InputStream inputStream = TestFileUtils.getInputStream(\"statics/import/data-title-style-read.xlsx\");\n",
      "        WorkbookParameter workbookParameter = WorkbookParameter.builder()\n",
      "                .input(inputStream)\n",
      "                .sheetParameter(SheetParameter.builder().sheet(0).titleRowStartIndex(0).headRowStartIndex(1).dataRowStartIndex(3).build())\n",
      "                .build();\n",
      "        WorkbookRead workbookRead = zouzhiyExcelFactory.getWorkbookRead(workbookParameter, DemoDefault.class);\n",
      "\n",
      "        return new DefaultSheetContext(workbookRead.getWorkbookContext(), workbookRead.getExcelClassConfig(), workbookParameter.getSheetParameter());\n",
      "\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "DefaultRowContext::::getSheetContext()": [
        44,
        47
      ],
      "DefaultRowContext::::getRowData()": [
        49,
        52
      ],
      "DefaultRowContext::::getRowList()": [
        54,
        57
      ],
      "DefaultRowContext::::getRowspan()": [
        59,
        62
      ]
    },
    "test_method_lines_dic": {
      "DefaultRowContextTest::::getSheetContext1()": [
        25,
        31
      ],
      "DefaultRowContextTest::::getRowData()": [
        33,
        42
      ],
      "DefaultRowContextTest::::getRowList()": [
        44,
        59
      ],
      "DefaultRowContextTest::::getRowspan()": [
        61,
        77
      ],
      "DefaultRowContextTest::::getSheetContext()": [
        79,
        89
      ]
    },
    "reverse_method_lines_dic": {
      "44": "DefaultRowContext::::getSheetContext()",
      "45": "DefaultRowContext::::getSheetContext()",
      "46": "DefaultRowContext::::getSheetContext()",
      "47": "DefaultRowContext::::getSheetContext()",
      "49": "DefaultRowContext::::getRowData()",
      "50": "DefaultRowContext::::getRowData()",
      "51": "DefaultRowContext::::getRowData()",
      "52": "DefaultRowContext::::getRowData()",
      "54": "DefaultRowContext::::getRowList()",
      "55": "DefaultRowContext::::getRowList()",
      "56": "DefaultRowContext::::getRowList()",
      "57": "DefaultRowContext::::getRowList()",
      "59": "DefaultRowContext::::getRowspan()",
      "60": "DefaultRowContext::::getRowspan()",
      "61": "DefaultRowContext::::getRowspan()",
      "62": "DefaultRowContext::::getRowspan()"
    },
    "test_reverse_method_lines_dic": {
      "25": "DefaultRowContextTest::::getSheetContext1()",
      "26": "DefaultRowContextTest::::getSheetContext1()",
      "27": "DefaultRowContextTest::::getSheetContext1()",
      "28": "DefaultRowContextTest::::getSheetContext1()",
      "29": "DefaultRowContextTest::::getSheetContext1()",
      "30": "DefaultRowContextTest::::getSheetContext1()",
      "31": "DefaultRowContextTest::::getSheetContext1()",
      "33": "DefaultRowContextTest::::getRowData()",
      "34": "DefaultRowContextTest::::getRowData()",
      "35": "DefaultRowContextTest::::getRowData()",
      "36": "DefaultRowContextTest::::getRowData()",
      "37": "DefaultRowContextTest::::getRowData()",
      "38": "DefaultRowContextTest::::getRowData()",
      "39": "DefaultRowContextTest::::getRowData()",
      "40": "DefaultRowContextTest::::getRowData()",
      "41": "DefaultRowContextTest::::getRowData()",
      "42": "DefaultRowContextTest::::getRowData()",
      "44": "DefaultRowContextTest::::getRowList()",
      "45": "DefaultRowContextTest::::getRowList()",
      "46": "DefaultRowContextTest::::getRowList()",
      "47": "DefaultRowContextTest::::getRowList()",
      "48": "DefaultRowContextTest::::getRowList()",
      "49": "DefaultRowContextTest::::getRowList()",
      "50": "DefaultRowContextTest::::getRowList()",
      "51": "DefaultRowContextTest::::getRowList()",
      "52": "DefaultRowContextTest::::getRowList()",
      "53": "DefaultRowContextTest::::getRowList()",
      "54": "DefaultRowContextTest::::getRowList()",
      "55": "DefaultRowContextTest::::getRowList()",
      "56": "DefaultRowContextTest::::getRowList()",
      "57": "DefaultRowContextTest::::getRowList()",
      "58": "DefaultRowContextTest::::getRowList()",
      "59": "DefaultRowContextTest::::getRowList()",
      "61": "DefaultRowContextTest::::getRowspan()",
      "62": "DefaultRowContextTest::::getRowspan()",
      "63": "DefaultRowContextTest::::getRowspan()",
      "64": "DefaultRowContextTest::::getRowspan()",
      "65": "DefaultRowContextTest::::getRowspan()",
      "66": "DefaultRowContextTest::::getRowspan()",
      "67": "DefaultRowContextTest::::getRowspan()",
      "68": "DefaultRowContextTest::::getRowspan()",
      "69": "DefaultRowContextTest::::getRowspan()",
      "70": "DefaultRowContextTest::::getRowspan()",
      "71": "DefaultRowContextTest::::getRowspan()",
      "72": "DefaultRowContextTest::::getRowspan()",
      "73": "DefaultRowContextTest::::getRowspan()",
      "74": "DefaultRowContextTest::::getRowspan()",
      "75": "DefaultRowContextTest::::getRowspan()",
      "76": "DefaultRowContextTest::::getRowspan()",
      "77": "DefaultRowContextTest::::getRowspan()",
      "79": "DefaultRowContextTest::::getSheetContext()",
      "80": "DefaultRowContextTest::::getSheetContext()",
      "81": "DefaultRowContextTest::::getSheetContext()",
      "82": "DefaultRowContextTest::::getSheetContext()",
      "83": "DefaultRowContextTest::::getSheetContext()",
      "84": "DefaultRowContextTest::::getSheetContext()",
      "85": "DefaultRowContextTest::::getSheetContext()",
      "86": "DefaultRowContextTest::::getSheetContext()",
      "87": "DefaultRowContextTest::::getSheetContext()",
      "88": "DefaultRowContextTest::::getSheetContext()",
      "89": "DefaultRowContextTest::::getSheetContext()"
    },
    "tests": [
      {
        "test_lines": [
          25,
          31
        ],
        "covered_lines": [
          37,
          38,
          39,
          40,
          41,
          42,
          46
        ]
      },
      {
        "test_lines": [
          33,
          42
        ],
        "covered_lines": [
          37,
          38,
          39,
          40,
          41,
          42,
          51
        ]
      },
      {
        "test_lines": [
          44,
          59
        ],
        "covered_lines": [
          37,
          38,
          39,
          40,
          41,
          42,
          56
        ]
      },
      {
        "test_lines": [
          61,
          77
        ],
        "covered_lines": [
          37,
          38,
          39,
          40,
          41,
          42,
          61
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/zouzhiy-excel/src/main/java/io/github/zouzhiy/excel/context/defualts/DefaultSheetContext.java": {
    "class_content": [
      "/*\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package io.github.zouzhiy.excel.context.defualts;\n",
      "\n",
      "import io.github.zouzhiy.excel.context.SheetContext;\n",
      "import io.github.zouzhiy.excel.context.WorkbookContext;\n",
      "import io.github.zouzhiy.excel.metadata.CellSpan;\n",
      "import io.github.zouzhiy.excel.metadata.Configuration;\n",
      "import io.github.zouzhiy.excel.metadata.MergedRegion;\n",
      "import io.github.zouzhiy.excel.metadata.config.ExcelClassConfig;\n",
      "import io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig;\n",
      "import io.github.zouzhiy.excel.metadata.parameter.SheetParameter;\n",
      "import io.github.zouzhiy.excel.metadata.result.CellStyleResultSet;\n",
      "import org.apache.poi.ss.usermodel.*;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "\n",
      "/**\n",
      " * @author zouzhiy\n",
      " * @since 2022/7/2\n",
      " */\n",
      "public class DefaultSheetContext implements SheetContext {\n",
      "\n",
      "    private final WorkbookContext workbookContext;\n",
      "\n",
      "    private final ExcelClassConfig excelClassConfig;\n",
      "\n",
      "    private final SheetParameter sheetParameter;\n",
      "\n",
      "    private Sheet sheet;\n",
      "\n",
      "    private MergedRegion mergedRegion;\n",
      "\n",
      "    private Drawing<?> drawing;\n",
      "\n",
      "\n",
      "    public DefaultSheetContext(WorkbookContext workbookContext, ExcelClassConfig excelClassConfig, SheetParameter sheetParameter) {\n",
      "        this.workbookContext = workbookContext;\n",
      "        this.excelClassConfig = excelClassConfig;\n",
      "        this.sheetParameter = sheetParameter;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public WorkbookContext getWorkbookContext() {\n",
      "        return workbookContext;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Configuration getConfiguration() {\n",
      "        return this.getWorkbookContext().getConfiguration();\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Workbook getWorkbook() {\n",
      "        return this.getWorkbookContext().getWorkbook();\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public ExcelClassConfig getExcelClassConfig() {\n",
      "        return excelClassConfig;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public SheetParameter getSheetParameter() {\n",
      "        return sheetParameter;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public boolean hasInputStream() {\n",
      "        return this.workbookContext.getWorkbookParameter().getInputStream() != null;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Sheet getSheet() {\n",
      "        Sheet sheet = this.sheet;\n",
      "        if (sheet != null) {\n",
      "            return sheet;\n",
      "        }\n",
      "\n",
      "        Workbook workbook = workbookContext.getWorkbook();\n",
      "        String sheetName = sheetParameter.getSheetName();\n",
      "        if (isNotEmpty(sheetName)) {\n",
      "            sheet = workbook.getSheet(sheetName);\n",
      "        }\n",
      "\n",
      "        Integer sheetIndex = sheetParameter.getSheetIndex();\n",
      "        int numberOfSheets = workbook.getNumberOfSheets();\n",
      "        if (sheet == null && sheetIndex != null && sheetIndex < numberOfSheets) {\n",
      "            sheet = workbook.getSheetAt(sheetIndex);\n",
      "        }\n",
      "\n",
      "        String title = sheetParameter.getTitle();\n",
      "        if (sheet == null && isNotEmpty(title)) {\n",
      "            sheet = workbook.getSheet(title);\n",
      "        }\n",
      "\n",
      "        if (sheet == null) {\n",
      "            sheet = createSheet(workbook);\n",
      "        }\n",
      "\n",
      "        this.sheet = sheet;\n",
      "\n",
      "        return sheet;\n",
      "    }\n",
      "\n",
      "\n",
      "    @Override\n",
      "    public MergedRegion getMergedRegion() {\n",
      "        if (mergedRegion == null) {\n",
      "            mergedRegion = new MergedRegion(this.getSheet().getMergedRegions());\n",
      "        }\n",
      "        return mergedRegion;\n",
      "    }\n",
      "\n",
      "\n",
      "    @Override\n",
      "    public int getMaxRowspan(int rowIndex) {\n",
      "        SheetParameter sheetParameter = this.getSheetParameter();\n",
      "        MergedRegion mergedRegion = this.getMergedRegion();\n",
      "        Sheet sheet = this.getSheet();\n",
      "        Row row = sheet.getRow(rowIndex);\n",
      "        if (row == null) {\n",
      "            return 1;\n",
      "        }\n",
      "        short lastCellNum = row.getLastCellNum();\n",
      "        int curColumnIndex = sheetParameter.getDataColumnStartIndex();\n",
      "\n",
      "        int maxRowspan = 1;\n",
      "        while (curColumnIndex < lastCellNum) {\n",
      "            CellSpan cellSpan = mergedRegion.getCellSpan(rowIndex, curColumnIndex);\n",
      "            curColumnIndex += cellSpan.getColspan();\n",
      "            maxRowspan = Math.max(maxRowspan, cellSpan.getRowspan());\n",
      "        }\n",
      "        return maxRowspan;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Drawing<?> getDrawing() {\n",
      "        if (drawing == null) {\n",
      "            drawing = this.getSheet().createDrawingPatriarch();\n",
      "        }\n",
      "        return drawing;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Row getRow(int rowIndex) {\n",
      "        return this.getSheet().getRow(rowIndex);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public List<Row> getRowList(int firstRowIndex, int lastRowIndex) {\n",
      "        List<Row> rowList = new ArrayList<>();\n",
      "        Sheet sheet = this.getSheet();\n",
      "        for (int i = firstRowIndex; i <= lastRowIndex; i++) {\n",
      "            Row row = sheet.getRow(i);\n",
      "            rowList.add(row);\n",
      "        }\n",
      "\n",
      "        return rowList;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public int getLasRowIndex() {\n",
      "        return this.getSheet().getLastRowNum();\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public FormulaEvaluator getFormulaEvaluator() {\n",
      "        return workbookContext.getFormulaEvaluator();\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void putTitleCellStyle(ExcelClassConfig excelClassConfig, CellStyle cellStyle) {\n",
      "        workbookContext.putTitleCellStyle(excelClassConfig, cellStyle);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void putHeadCellStyle(CellStyleResultSet headCellStyleResultSet) {\n",
      "        workbookContext.putHeadCellStyle(headCellStyleResultSet);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void putDataCellStyle(CellStyleResultSet dataCellStyleResultSet) {\n",
      "        workbookContext.putDataCellStyle(dataCellStyleResultSet);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public CellStyle getTitleCellStyle(ExcelClassConfig excelClassConfig) {\n",
      "        return workbookContext.getTitleCellStyle(excelClassConfig);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public CellStyle getHeadCellStyle(ExcelFieldConfig excelFieldConfig) {\n",
      "        return workbookContext.getHeadCellStyle(excelFieldConfig);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public CellStyle getDataCellStyle(ExcelFieldConfig excelFieldConfig, String defaultDataFormat) {\n",
      "        return workbookContext.getDataCellStyle(excelFieldConfig, defaultDataFormat);\n",
      "    }\n",
      "\n",
      "    private Sheet createSheet(Workbook workbook) {\n",
      "        String realSheetName = null;\n",
      "        String sheetName = sheetParameter.getSheetName();\n",
      "        if (isNotEmpty(sheetName)) {\n",
      "            realSheetName = sheetName;\n",
      "        }\n",
      "        String title = sheetParameter.getTitle();\n",
      "        if (realSheetName == null && isNotEmpty(title)) {\n",
      "            realSheetName = title;\n",
      "        }\n",
      "\n",
      "        Integer sheetIndex = sheetParameter.getSheetIndex();\n",
      "        if (realSheetName == null && sheetIndex != null) {\n",
      "            realSheetName = \"Sheet\" + (sheetIndex + 1);\n",
      "        }\n",
      "        if (realSheetName == null) {\n",
      "            int numberOfSheets = workbook.getNumberOfSheets();\n",
      "            realSheetName = \"Sheet\" + (numberOfSheets + 1);\n",
      "            while (workbook.getSheet(realSheetName) != null) {\n",
      "                numberOfSheets += 1;\n",
      "                realSheetName = \"Sheet\" + (numberOfSheets + 1);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        return workbook.createSheet(realSheetName);\n",
      "    }\n",
      "\n",
      "    private boolean isNotEmpty(String str) {\n",
      "        return str != null && str.trim().length() != 0;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package io.github.zouzhiy.excel.context.defualts;\n",
      "\n",
      "import io.github.zouzhiy.excel.context.SheetContext;\n",
      "import io.github.zouzhiy.excel.context.WorkbookContext;\n",
      "import io.github.zouzhiy.excel.metadata.Configuration;\n",
      "import io.github.zouzhiy.excel.metadata.MergedRegion;\n",
      "import io.github.zouzhiy.excel.metadata.config.ExcelClassConfig;\n",
      "import io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig;\n",
      "import io.github.zouzhiy.excel.metadata.parameter.SheetParameter;\n",
      "import io.github.zouzhiy.excel.metadata.parameter.WorkbookParameter;\n",
      "import io.github.zouzhiy.excel.metadata.result.CellStyleResultSet;\n",
      "import io.github.zouzhiy.excel.parsing.ExcelAnnotationParse;\n",
      "import io.github.zouzhiy.excel.support.metadata.DemoDefault;\n",
      "import org.apache.poi.ss.usermodel.*;\n",
      "import org.apache.poi.ss.util.CellRangeAddress;\n",
      "import org.junit.jupiter.api.Assertions;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.mockito.Mockito;\n",
      "\n",
      "import java.io.IOException;\n",
      "import java.io.InputStream;\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "import java.util.Random;\n",
      "\n",
      "class DefaultSheetContextTest {\n",
      "\n",
      "    @Test\n",
      "    void getConfiguration() {\n",
      "        WorkbookContext workbookContext = Mockito.mock(WorkbookContext.class);\n",
      "        ExcelClassConfig excelClassConfig = Mockito.mock(ExcelClassConfig.class);\n",
      "        SheetParameter sheetParameter = Mockito.mock(SheetParameter.class);\n",
      "        SheetContext sheetContext = new DefaultSheetContext(workbookContext, excelClassConfig, sheetParameter);\n",
      "\n",
      "        Assertions.assertEquals(workbookContext, sheetContext.getWorkbookContext());\n",
      "        Assertions.assertEquals(excelClassConfig, sheetContext.getExcelClassConfig());\n",
      "        Assertions.assertEquals(sheetParameter, sheetContext.getSheetParameter());\n",
      "\n",
      "\n",
      "        Configuration configuration = new Configuration();\n",
      "        Mockito.when(workbookContext.getConfiguration()).thenReturn(configuration);\n",
      "        Assertions.assertEquals(configuration, sheetContext.getConfiguration());\n",
      "\n",
      "        Assertions.assertNotEquals(new Configuration(), sheetContext.getConfiguration());\n",
      "\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getWorkbook() throws IOException {\n",
      "        WorkbookContext workbookContext = Mockito.mock(WorkbookContext.class);\n",
      "        ExcelClassConfig excelClassConfig = Mockito.mock(ExcelClassConfig.class);\n",
      "        SheetParameter sheetParameter = Mockito.mock(SheetParameter.class);\n",
      "        SheetContext sheetContext = new DefaultSheetContext(workbookContext, excelClassConfig, sheetParameter);\n",
      "\n",
      "        Workbook workbook = WorkbookFactory.create(true);\n",
      "        Mockito.when(workbookContext.getWorkbook()).thenReturn(workbook);\n",
      "        Assertions.assertEquals(workbook, sheetContext.getWorkbook());\n",
      "\n",
      "        Workbook workbook2 = WorkbookFactory.create(true);\n",
      "        Assertions.assertNotEquals(workbook2, sheetContext.getWorkbook());\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void hasInputStream() {\n",
      "        WorkbookContext workbookContext = Mockito.mock(WorkbookContext.class);\n",
      "        ExcelClassConfig excelClassConfig = Mockito.mock(ExcelClassConfig.class);\n",
      "        SheetParameter sheetParameter = SheetParameter.builder().build();\n",
      "        SheetContext sheetContext = new DefaultSheetContext(workbookContext, excelClassConfig, sheetParameter);\n",
      "\n",
      "        WorkbookParameter workbookParameter = Mockito.mock(WorkbookParameter.class);\n",
      "        Mockito.when(workbookContext.getWorkbookParameter()).thenReturn(workbookParameter);\n",
      "        Mockito.when(workbookParameter.getInputStream()).thenReturn(null);\n",
      "        Assertions.assertFalse(sheetContext.hasInputStream());\n",
      "\n",
      "        Mockito.when(workbookParameter.getInputStream()).thenReturn(Mockito.mock(InputStream.class));\n",
      "        Assertions.assertTrue(sheetContext.hasInputStream());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getSheet1() throws IOException {\n",
      "        WorkbookContext workbookContext = Mockito.mock(WorkbookContext.class);\n",
      "        ExcelClassConfig excelClassConfig = Mockito.mock(ExcelClassConfig.class);\n",
      "        SheetParameter sheetParameter = Mockito.mock(SheetParameter.class);\n",
      "        SheetContext sheetContext = new DefaultSheetContext(workbookContext, excelClassConfig, sheetParameter);\n",
      "\n",
      "        Workbook workbook = WorkbookFactory.create(true);\n",
      "        workbook.createSheet(\"sheet1\");\n",
      "        Mockito.when(workbookContext.getWorkbook()).thenReturn(workbook);\n",
      "\n",
      "        Mockito.when(sheetParameter.getSheetName()).thenReturn(\"sheet1\");\n",
      "        Assertions.assertEquals(sheetContext.getSheet().getSheetName(), \"sheet1\");\n",
      "        Assertions.assertEquals(sheetContext.getSheet().getSheetName(), sheetContext.getSheet().getSheetName());\n",
      "\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getSheet2() throws IOException {\n",
      "        WorkbookContext workbookContext = Mockito.mock(WorkbookContext.class);\n",
      "        ExcelClassConfig excelClassConfig = Mockito.mock(ExcelClassConfig.class);\n",
      "        SheetParameter sheetParameter = Mockito.mock(SheetParameter.class);\n",
      "        SheetContext sheetContext = new DefaultSheetContext(workbookContext, excelClassConfig, sheetParameter);\n",
      "\n",
      "        Workbook workbook = WorkbookFactory.create(true);\n",
      "        workbook.createSheet(\"sheet1\");\n",
      "        Mockito.when(workbookContext.getWorkbook()).thenReturn(workbook);\n",
      "\n",
      "        Mockito.when(sheetParameter.getSheetIndex()).thenReturn(0);\n",
      "        Assertions.assertEquals(workbook.getSheetIndex(sheetContext.getSheet()), 0);\n",
      "        Assertions.assertEquals(workbook.getSheetIndex(sheetContext.getSheet()), 0);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getSheet3() throws IOException {\n",
      "        WorkbookContext workbookContext = Mockito.mock(WorkbookContext.class);\n",
      "        ExcelClassConfig excelClassConfig = Mockito.mock(ExcelClassConfig.class);\n",
      "        SheetParameter sheetParameter = Mockito.mock(SheetParameter.class);\n",
      "        SheetContext sheetContext = new DefaultSheetContext(workbookContext, excelClassConfig, sheetParameter);\n",
      "\n",
      "        Workbook workbook = WorkbookFactory.create(true);\n",
      "        workbook.createSheet(\"sheet1\");\n",
      "        Mockito.when(workbookContext.getWorkbook()).thenReturn(workbook);\n",
      "\n",
      "        Mockito.when(sheetParameter.getSheetIndex()).thenReturn(null);\n",
      "        Mockito.when(sheetParameter.getTitle()).thenReturn(\"sheet1\");\n",
      "        Assertions.assertEquals(sheetContext.getSheet().getSheetName(), \"sheet1\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getSheet4() throws IOException {\n",
      "        WorkbookContext workbookContext = Mockito.mock(WorkbookContext.class);\n",
      "        ExcelClassConfig excelClassConfig = Mockito.mock(ExcelClassConfig.class);\n",
      "        SheetParameter sheetParameter = Mockito.mock(SheetParameter.class);\n",
      "        SheetContext sheetContext = new DefaultSheetContext(workbookContext, excelClassConfig, sheetParameter);\n",
      "\n",
      "        Workbook workbook = WorkbookFactory.create(true);\n",
      "        workbook.createSheet(\"sheet1\");\n",
      "        Mockito.when(workbookContext.getWorkbook()).thenReturn(workbook);\n",
      "\n",
      "        Mockito.when(sheetParameter.getSheetName()).thenReturn(null);\n",
      "        Mockito.when(sheetParameter.getSheetIndex()).thenReturn(null);\n",
      "        Mockito.when(sheetParameter.getTitle()).thenReturn(null);\n",
      "        Assertions.assertEquals(sheetContext.getSheet(), sheetContext.getSheet());\n",
      "        Assertions.assertEquals(sheetContext.getSheet().getSheetName(), \"Sheet2\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getSheet5() throws IOException {\n",
      "        WorkbookContext workbookContext = Mockito.mock(WorkbookContext.class);\n",
      "        ExcelClassConfig excelClassConfig = Mockito.mock(ExcelClassConfig.class);\n",
      "        SheetParameter sheetParameter = Mockito.mock(SheetParameter.class);\n",
      "        SheetContext sheetContext = new DefaultSheetContext(workbookContext, excelClassConfig, sheetParameter);\n",
      "\n",
      "        Workbook workbook = WorkbookFactory.create(true);\n",
      "        Mockito.when(workbookContext.getWorkbook()).thenReturn(workbook);\n",
      "\n",
      "        Mockito.when(sheetParameter.getSheetName()).thenReturn(\"sheet6\");\n",
      "        Mockito.when(sheetParameter.getSheetIndex()).thenReturn(null);\n",
      "        Mockito.when(sheetParameter.getTitle()).thenReturn(null);\n",
      "        Assertions.assertEquals(sheetContext.getSheet(), sheetContext.getSheet());\n",
      "        Assertions.assertEquals(sheetContext.getSheet().getSheetName(), \"sheet6\");\n",
      "        Assertions.assertEquals(workbook.getSheetIndex(sheetContext.getSheet()), 0);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getSheet6() throws IOException {\n",
      "        WorkbookContext workbookContext = Mockito.mock(WorkbookContext.class);\n",
      "        ExcelClassConfig excelClassConfig = Mockito.mock(ExcelClassConfig.class);\n",
      "        SheetParameter sheetParameter = Mockito.mock(SheetParameter.class);\n",
      "        SheetContext sheetContext = new DefaultSheetContext(workbookContext, excelClassConfig, sheetParameter);\n",
      "\n",
      "        Workbook workbook = WorkbookFactory.create(true);\n",
      "        Mockito.when(workbookContext.getWorkbook()).thenReturn(workbook);\n",
      "\n",
      "        Mockito.when(sheetParameter.getSheetName()).thenReturn(null);\n",
      "        Mockito.when(sheetParameter.getSheetIndex()).thenReturn(1);\n",
      "        Mockito.when(sheetParameter.getTitle()).thenReturn(null);\n",
      "        Assertions.assertEquals(sheetContext.getSheet(), sheetContext.getSheet());\n",
      "        Assertions.assertEquals(sheetContext.getSheet().getSheetName(), \"Sheet2\");\n",
      "        Assertions.assertEquals(workbook.getSheetIndex(sheetContext.getSheet()), 0);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getSheet7() throws IOException {\n",
      "        WorkbookContext workbookContext = Mockito.mock(WorkbookContext.class);\n",
      "        ExcelClassConfig excelClassConfig = Mockito.mock(ExcelClassConfig.class);\n",
      "        SheetParameter sheetParameter = Mockito.mock(SheetParameter.class);\n",
      "        SheetContext sheetContext = new DefaultSheetContext(workbookContext, excelClassConfig, sheetParameter);\n",
      "\n",
      "        Workbook workbook = WorkbookFactory.create(true);\n",
      "        Mockito.when(workbookContext.getWorkbook()).thenReturn(workbook);\n",
      "\n",
      "        Mockito.when(sheetParameter.getSheetName()).thenReturn(null);\n",
      "        Mockito.when(sheetParameter.getSheetIndex()).thenReturn(null);\n",
      "        Mockito.when(sheetParameter.getTitle()).thenReturn(\"title\");\n",
      "        Assertions.assertEquals(sheetContext.getSheet(), sheetContext.getSheet());\n",
      "        Assertions.assertEquals(sheetContext.getSheet().getSheetName(), \"title\");\n",
      "        Assertions.assertEquals(workbook.getSheetIndex(sheetContext.getSheet()), 0);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getSheet8() throws IOException {\n",
      "        WorkbookContext workbookContext = Mockito.mock(WorkbookContext.class);\n",
      "        ExcelClassConfig excelClassConfig = Mockito.mock(ExcelClassConfig.class);\n",
      "        SheetParameter sheetParameter = Mockito.mock(SheetParameter.class);\n",
      "        SheetContext sheetContext = new DefaultSheetContext(workbookContext, excelClassConfig, sheetParameter);\n",
      "\n",
      "        Workbook workbook = WorkbookFactory.create(true);\n",
      "        Mockito.when(workbookContext.getWorkbook()).thenReturn(workbook);\n",
      "\n",
      "        Mockito.when(sheetParameter.getSheetName()).thenReturn(null);\n",
      "        Mockito.when(sheetParameter.getSheetIndex()).thenReturn(null);\n",
      "        Mockito.when(sheetParameter.getTitle()).thenReturn(null);\n",
      "        Assertions.assertEquals(sheetContext.getSheet(), sheetContext.getSheet());\n",
      "        Assertions.assertEquals(sheetContext.getSheet().getSheetName(), \"Sheet1\");\n",
      "        Assertions.assertEquals(workbook.getSheetIndex(sheetContext.getSheet()), 0);\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void getSheet9() throws IOException {\n",
      "        WorkbookContext workbookContext = Mockito.mock(WorkbookContext.class);\n",
      "        ExcelClassConfig excelClassConfig = Mockito.mock(ExcelClassConfig.class);\n",
      "        SheetParameter sheetParameter = Mockito.mock(SheetParameter.class);\n",
      "        SheetContext sheetContext = new DefaultSheetContext(workbookContext, excelClassConfig, sheetParameter);\n",
      "\n",
      "        Workbook workbook = WorkbookFactory.create(true);\n",
      "        workbook.createSheet(\"Sheet2\");\n",
      "        Mockito.when(workbookContext.getWorkbook()).thenReturn(workbook);\n",
      "\n",
      "        Mockito.when(sheetParameter.getSheetName()).thenReturn(null);\n",
      "        Mockito.when(sheetParameter.getSheetIndex()).thenReturn(null);\n",
      "        Mockito.when(sheetParameter.getTitle()).thenReturn(null);\n",
      "        Assertions.assertEquals(sheetContext.getSheet(), sheetContext.getSheet());\n",
      "        Assertions.assertEquals(sheetContext.getSheet().getSheetName(), \"Sheet3\");\n",
      "        Assertions.assertEquals(workbook.getSheetIndex(sheetContext.getSheet()), 1);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getMergedRegion() throws IOException {\n",
      "\n",
      "        WorkbookContext workbookContext = Mockito.mock(WorkbookContext.class);\n",
      "        ExcelClassConfig excelClassConfig = Mockito.mock(ExcelClassConfig.class);\n",
      "        SheetParameter sheetParameter = Mockito.mock(SheetParameter.class);\n",
      "\n",
      "\n",
      "        SheetContext sheetContext = Mockito.spy(new DefaultSheetContext(workbookContext, excelClassConfig, sheetParameter));\n",
      "        Workbook workbook = WorkbookFactory.create(true);\n",
      "        Sheet sheet = workbook.createSheet(\"sheet1\");\n",
      "\n",
      "        Mockito.when(workbookContext.getWorkbook()).thenReturn(workbook);\n",
      "        Mockito.doReturn(sheet).when(sheetContext).getSheet();\n",
      "\n",
      "        Assertions.assertEquals(sheetContext.getMergedRegion().getCellRangeAddressListMap(), new MergedRegion(sheet.getMergedRegions()).getCellRangeAddressListMap());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getDrawing() throws IOException {\n",
      "        WorkbookContext workbookContext = Mockito.mock(WorkbookContext.class);\n",
      "        ExcelClassConfig excelClassConfig = Mockito.mock(ExcelClassConfig.class);\n",
      "        SheetParameter sheetParameter = Mockito.mock(SheetParameter.class);\n",
      "\n",
      "        SheetContext sheetContext = Mockito.spy(new DefaultSheetContext(workbookContext, excelClassConfig, sheetParameter));\n",
      "        Workbook workbook = WorkbookFactory.create(true);\n",
      "        Sheet sheet = workbook.createSheet(\"sheet1\");\n",
      "\n",
      "        Mockito.when(workbookContext.getWorkbook()).thenReturn(workbook);\n",
      "        Mockito.doReturn(sheet).when(sheetContext).getSheet();\n",
      "\n",
      "        Assertions.assertNotNull(sheetContext.getDrawing());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getMaxRowspan1() throws IOException {\n",
      "        WorkbookContext workbookContext = Mockito.mock(WorkbookContext.class);\n",
      "        ExcelClassConfig excelClassConfig = Mockito.mock(ExcelClassConfig.class);\n",
      "        SheetParameter sheetParameter = Mockito.mock(SheetParameter.class);\n",
      "\n",
      "        SheetContext sheetContext = Mockito.spy(new DefaultSheetContext(workbookContext, excelClassConfig, sheetParameter));\n",
      "        Workbook workbook = WorkbookFactory.create(true);\n",
      "        Sheet sheet = workbook.createSheet(\"sheet1\");\n",
      "        int rowspan = new Random(System.currentTimeMillis()).nextInt(15) + 2;\n",
      "        Row row = sheet.createRow(0);\n",
      "        row.createCell(1);\n",
      "        sheet.addMergedRegion(new CellRangeAddress(0, rowspan - 1, 1, 1));\n",
      "\n",
      "        Mockito.doReturn(sheet).when(sheetContext).getSheet();\n",
      "        Assertions.assertEquals(sheetContext.getMaxRowspan(0), rowspan);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getMaxRowspan2() throws IOException {\n",
      "        WorkbookContext workbookContext = Mockito.mock(WorkbookContext.class);\n",
      "        ExcelClassConfig excelClassConfig = Mockito.mock(ExcelClassConfig.class);\n",
      "        SheetParameter sheetParameter = Mockito.mock(SheetParameter.class);\n",
      "\n",
      "        SheetContext sheetContext = Mockito.spy(new DefaultSheetContext(workbookContext, excelClassConfig, sheetParameter));\n",
      "        Workbook workbook = WorkbookFactory.create(true);\n",
      "        Sheet sheet = workbook.createSheet(\"sheet1\");\n",
      "\n",
      "        Mockito.doReturn(sheet).when(sheetContext).getSheet();\n",
      "        Assertions.assertEquals(sheetContext.getMaxRowspan(0), 1);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getRow() throws IOException {\n",
      "        WorkbookContext workbookContext = Mockito.mock(WorkbookContext.class);\n",
      "        ExcelClassConfig excelClassConfig = Mockito.mock(ExcelClassConfig.class);\n",
      "        SheetParameter sheetParameter = Mockito.mock(SheetParameter.class);\n",
      "\n",
      "        SheetContext sheetContext = Mockito.spy(new DefaultSheetContext(workbookContext, excelClassConfig, sheetParameter));\n",
      "        Workbook workbook = WorkbookFactory.create(true);\n",
      "        Sheet sheet = workbook.createSheet(\"sheet1\");\n",
      "        int rowspan = new Random(System.currentTimeMillis()).nextInt(15) + 2;\n",
      "        Row row = sheet.createRow(rowspan);\n",
      "        row.createCell(1);\n",
      "\n",
      "        Mockito.doReturn(sheet).when(sheetContext).getSheet();\n",
      "        Assertions.assertEquals(sheetContext.getRow(rowspan), row);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getRowList() throws IOException {\n",
      "        WorkbookContext workbookContext = Mockito.mock(WorkbookContext.class);\n",
      "        ExcelClassConfig excelClassConfig = Mockito.mock(ExcelClassConfig.class);\n",
      "        SheetParameter sheetParameter = Mockito.mock(SheetParameter.class);\n",
      "\n",
      "        SheetContext sheetContext = Mockito.spy(new DefaultSheetContext(workbookContext, excelClassConfig, sheetParameter));\n",
      "        Workbook workbook = WorkbookFactory.create(true);\n",
      "        Sheet sheet = workbook.createSheet(\"sheet1\");\n",
      "        int rowspan = new Random(System.currentTimeMillis()).nextInt(15) + 2;\n",
      "        List<Row> rowList = new ArrayList<>();\n",
      "        for (int i = 0; i < rowspan; i++) {\n",
      "            Row row = sheet.createRow(i);\n",
      "            rowList.add(row);\n",
      "            row.createCell(new Random(System.currentTimeMillis()).nextInt(88));\n",
      "        }\n",
      "        sheet.addMergedRegion(new CellRangeAddress(0, rowspan - 1, 1, 1));\n",
      "\n",
      "        Mockito.doReturn(sheet).when(sheetContext).getSheet();\n",
      "        Assertions.assertEquals(sheetContext.getRowList(0, rowspan - 1).size(), rowspan);\n",
      "        Assertions.assertEquals(sheetContext.getRowList(0, rowspan - 1), rowList);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getLasRowIndex() throws IOException {\n",
      "        WorkbookContext workbookContext = Mockito.mock(WorkbookContext.class);\n",
      "        ExcelClassConfig excelClassConfig = Mockito.mock(ExcelClassConfig.class);\n",
      "        SheetParameter sheetParameter = Mockito.mock(SheetParameter.class);\n",
      "\n",
      "        SheetContext sheetContext = Mockito.spy(new DefaultSheetContext(workbookContext, excelClassConfig, sheetParameter));\n",
      "        Workbook workbook = WorkbookFactory.create(true);\n",
      "        Sheet sheet = workbook.createSheet(\"sheet1\");\n",
      "        int rowspan = new Random(System.currentTimeMillis()).nextInt(15) + 2;\n",
      "        List<Row> rowList = new ArrayList<>();\n",
      "        for (int i = 0; i < rowspan; i++) {\n",
      "            Row row = sheet.createRow(i);\n",
      "            rowList.add(row);\n",
      "            row.createCell(new Random(System.currentTimeMillis()).nextInt(88));\n",
      "        }\n",
      "        sheet.addMergedRegion(new CellRangeAddress(0, rowspan - 1, 1, 1));\n",
      "\n",
      "        Mockito.doReturn(sheet).when(sheetContext).getSheet();\n",
      "        Assertions.assertEquals(sheetContext.getLasRowIndex(), rowspan - 1);\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void getFormulaEvaluator() throws IOException {\n",
      "        WorkbookContext workbookContext = Mockito.mock(WorkbookContext.class);\n",
      "        ExcelClassConfig excelClassConfig = Mockito.mock(ExcelClassConfig.class);\n",
      "        SheetParameter sheetParameter = Mockito.mock(SheetParameter.class);\n",
      "        SheetContext sheetContext = new DefaultSheetContext(workbookContext, excelClassConfig, sheetParameter);\n",
      "\n",
      "        Workbook workbook = WorkbookFactory.create(true);\n",
      "\n",
      "        FormulaEvaluator formulaEvaluator = workbook.getCreationHelper().createFormulaEvaluator();\n",
      "        Mockito.when(workbookContext.getFormulaEvaluator()).thenReturn(formulaEvaluator);\n",
      "        Assertions.assertEquals(formulaEvaluator, sheetContext.getFormulaEvaluator());\n",
      "\n",
      "        Workbook workbook2 = WorkbookFactory.create(true);\n",
      "        Assertions.assertNotEquals(workbook2.getCreationHelper().createFormulaEvaluator(), sheetContext.getFormulaEvaluator());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void putTitleCellStyle() throws IOException {\n",
      "\n",
      "        WorkbookContext workbookContext = Mockito.mock(WorkbookContext.class);\n",
      "        ExcelClassConfig excelClassConfig = new ExcelAnnotationParse(new Configuration()).findForClass(DemoDefault.class);\n",
      "        SheetParameter sheetParameter = SheetParameter.builder().sheet(\"sheet1\").build();\n",
      "        SheetContext sheetContext = new DefaultSheetContext(workbookContext, excelClassConfig, sheetParameter);\n",
      "\n",
      "        Workbook workbook = WorkbookFactory.create(false);\n",
      "        CellStyle titleCellStyle = workbook.createCellStyle();\n",
      "        titleCellStyle.setAlignment(HorizontalAlignment.FILL);\n",
      "        sheetContext.putTitleCellStyle(excelClassConfig, titleCellStyle);\n",
      "        Mockito.verify(workbookContext).putTitleCellStyle(excelClassConfig, titleCellStyle);\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void putHeadCellStyle() throws IOException {\n",
      "\n",
      "        WorkbookContext workbookContext = Mockito.mock(WorkbookContext.class);\n",
      "        ExcelClassConfig excelClassConfig = new ExcelAnnotationParse(new Configuration()).findForClass(DemoDefault.class);\n",
      "        SheetParameter sheetParameter = SheetParameter.builder().sheet(\"sheet1\").build();\n",
      "        SheetContext sheetContext = new DefaultSheetContext(workbookContext, excelClassConfig, sheetParameter);\n",
      "\n",
      "        Workbook workbook = WorkbookFactory.create(false);\n",
      "        CellStyle headCellStyle = workbook.createCellStyle();\n",
      "        headCellStyle.setAlignment(HorizontalAlignment.DISTRIBUTED);\n",
      "        CellStyleResultSet cellStyleResultSet = CellStyleResultSet.empty();\n",
      "        cellStyleResultSet.cellStyleResult(Mockito.mock(ExcelFieldConfig.class), headCellStyle);\n",
      "        cellStyleResultSet.cellStyleResult(Mockito.mock(ExcelFieldConfig.class), headCellStyle);\n",
      "        sheetContext.putHeadCellStyle(cellStyleResultSet);\n",
      "        Mockito.verify(workbookContext).putHeadCellStyle(cellStyleResultSet);\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void putDataCellStyle() throws IOException {\n",
      "        WorkbookContext workbookContext = Mockito.mock(WorkbookContext.class);\n",
      "        ExcelClassConfig excelClassConfig = new ExcelAnnotationParse(new Configuration()).findForClass(DemoDefault.class);\n",
      "        SheetParameter sheetParameter = SheetParameter.builder().sheet(\"sheet1\").build();\n",
      "        SheetContext sheetContext = new DefaultSheetContext(workbookContext, excelClassConfig, sheetParameter);\n",
      "\n",
      "        Workbook workbook = WorkbookFactory.create(false);\n",
      "\n",
      "        CellStyle cellStyle = workbook.createCellStyle();\n",
      "        cellStyle.setBorderLeft(BorderStyle.DASHED);\n",
      "\n",
      "\n",
      "        CellStyle dataCellStyle = workbook.createCellStyle();\n",
      "        dataCellStyle.setAlignment(HorizontalAlignment.DISTRIBUTED);\n",
      "        CellStyleResultSet dataStyleResultSet = CellStyleResultSet.empty();\n",
      "        dataStyleResultSet.cellStyleResult(Mockito.mock(ExcelFieldConfig.class), dataCellStyle);\n",
      "        dataStyleResultSet.cellStyleResult(Mockito.mock(ExcelFieldConfig.class), dataCellStyle);\n",
      "        sheetContext.putDataCellStyle(dataStyleResultSet);\n",
      "        Mockito.verify(workbookContext).putDataCellStyle(dataStyleResultSet);\n",
      "\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void getTitleCellStyle() throws IOException {\n",
      "        WorkbookContext workbookContext = Mockito.mock(WorkbookContext.class);\n",
      "        ExcelClassConfig excelClassConfig = new ExcelAnnotationParse(new Configuration()).findForClass(DemoDefault.class);\n",
      "        SheetParameter sheetParameter = SheetParameter.builder().sheet(\"sheet1\").build();\n",
      "        SheetContext sheetContext = new DefaultSheetContext(workbookContext, excelClassConfig, sheetParameter);\n",
      "\n",
      "        Workbook workbook = WorkbookFactory.create(false);\n",
      "        CellStyle cellStyle = workbook.createCellStyle();\n",
      "        cellStyle.setLeftBorderColor((short) 22);\n",
      "\n",
      "        CellStyle titleCellStyle = workbook.createCellStyle();\n",
      "        titleCellStyle.setAlignment(HorizontalAlignment.FILL);\n",
      "        Mockito.when(workbookContext.getTitleCellStyle(excelClassConfig)).thenReturn(titleCellStyle);\n",
      "        Assertions.assertEquals(titleCellStyle, sheetContext.getTitleCellStyle(excelClassConfig));\n",
      "        Assertions.assertNotEquals(cellStyle, sheetContext.getTitleCellStyle(excelClassConfig));\n",
      "        Assertions.assertNotEquals(titleCellStyle, sheetContext.getTitleCellStyle(Mockito.mock(ExcelClassConfig.class)));\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getHeadCellStyle() throws IOException {\n",
      "        WorkbookContext workbookContext = Mockito.mock(WorkbookContext.class);\n",
      "        ExcelClassConfig excelClassConfig = new ExcelAnnotationParse(new Configuration()).findForClass(DemoDefault.class);\n",
      "        SheetParameter sheetParameter = SheetParameter.builder().sheet(\"sheet1\").build();\n",
      "        SheetContext sheetContext = new DefaultSheetContext(workbookContext, excelClassConfig, sheetParameter);\n",
      "\n",
      "        Workbook workbook = WorkbookFactory.create(false);\n",
      "        CellStyle cellStyle = workbook.createCellStyle();\n",
      "        cellStyle.setLeftBorderColor((short) 22);\n",
      "\n",
      "        CellStyle headCellStyle = workbook.createCellStyle();\n",
      "        headCellStyle.setAlignment(HorizontalAlignment.FILL);\n",
      "        ExcelFieldConfig excelFieldConfig = Mockito.mock(ExcelFieldConfig.class);\n",
      "        Mockito.when(workbookContext.getHeadCellStyle(excelFieldConfig)).thenReturn(headCellStyle);\n",
      "        Assertions.assertEquals(headCellStyle, sheetContext.getHeadCellStyle(excelFieldConfig));\n",
      "        Assertions.assertNotEquals(cellStyle, sheetContext.getHeadCellStyle(excelFieldConfig));\n",
      "        Assertions.assertNotEquals(headCellStyle, sheetContext.getHeadCellStyle(Mockito.mock(ExcelFieldConfig.class)));\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getDataCellStyle() throws IOException {\n",
      "        WorkbookContext workbookContext = Mockito.mock(WorkbookContext.class);\n",
      "        ExcelClassConfig excelClassConfig = new ExcelAnnotationParse(new Configuration()).findForClass(DemoDefault.class);\n",
      "        SheetParameter sheetParameter = SheetParameter.builder().sheet(\"sheet1\").build();\n",
      "        SheetContext sheetContext = new DefaultSheetContext(workbookContext, excelClassConfig, sheetParameter);\n",
      "\n",
      "        Workbook workbook = WorkbookFactory.create(false);\n",
      "        CellStyle cellStyle = workbook.createCellStyle();\n",
      "        cellStyle.setLeftBorderColor((short) 22);\n",
      "\n",
      "        CellStyle dataCellStyle = workbook.createCellStyle();\n",
      "        dataCellStyle.setAlignment(HorizontalAlignment.DISTRIBUTED);\n",
      "        ExcelFieldConfig excelFieldConfig1 = Mockito.mock(ExcelFieldConfig.class);\n",
      "        Mockito.when(workbookContext.getDataCellStyle(excelFieldConfig1, \"@\")).thenReturn(dataCellStyle);\n",
      "        Assertions.assertEquals(dataCellStyle, sheetContext.getDataCellStyle(excelFieldConfig1, \"@\"));\n",
      "        Assertions.assertNotEquals(dataCellStyle, sheetContext.getDataCellStyle(excelFieldConfig1, \"@@\"));\n",
      "\n",
      "        Assertions.assertNotEquals(cellStyle, sheetContext.getDataCellStyle(excelFieldConfig1, \"@\"));\n",
      "        Assertions.assertNotEquals(dataCellStyle, sheetContext.getDataCellStyle(Mockito.mock(ExcelFieldConfig.class), \"@\"));\n",
      "\n",
      "    }\n",
      "\n",
      "\n",
      "}\n"
    ],
    "method_lines_dic": {
      "DefaultSheetContext::::getWorkbookContext()": [
        55,
        58
      ],
      "DefaultSheetContext::::getConfiguration()": [
        60,
        63
      ],
      "DefaultSheetContext::::getWorkbook()": [
        65,
        68
      ],
      "DefaultSheetContext::::getExcelClassConfig()": [
        70,
        73
      ],
      "DefaultSheetContext::::getSheetParameter()": [
        75,
        78
      ],
      "DefaultSheetContext::::hasInputStream()": [
        80,
        83
      ],
      "DefaultSheetContext::::getSheet()": [
        85,
        116
      ],
      "DefaultSheetContext::::getMergedRegion()": [
        119,
        125
      ],
      "DefaultSheetContext::::getMaxRowspan(int)": [
        128,
        147
      ],
      "DefaultSheetContext::::getDrawing()": [
        149,
        155
      ],
      "DefaultSheetContext::::getRow(int)": [
        157,
        160
      ],
      "DefaultSheetContext::::getRowList(int,int)": [
        162,
        172
      ],
      "DefaultSheetContext::::getLasRowIndex()": [
        174,
        177
      ],
      "DefaultSheetContext::::getFormulaEvaluator()": [
        179,
        182
      ],
      "DefaultSheetContext::::putHeadCellStyle(io.github.zouzhiy.excel.metadata.result.CellStyleResultSet)": [
        189,
        192
      ],
      "DefaultSheetContext::::putDataCellStyle(io.github.zouzhiy.excel.metadata.result.CellStyleResultSet)": [
        194,
        197
      ],
      "DefaultSheetContext::::getTitleCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelClassConfig)": [
        199,
        202
      ],
      "DefaultSheetContext::::getHeadCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig)": [
        204,
        207
      ],
      "DefaultSheetContext::::getDataCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,java.lang.String)": [
        209,
        212
      ],
      "DefaultSheetContext::::isNotEmpty(java.lang.String)": [
        241,
        243
      ]
    },
    "test_method_lines_dic": {
      "DefaultSheetContextTest::::getConfiguration()": [
        28,
        47
      ],
      "DefaultSheetContextTest::::getWorkbook()": [
        49,
        62
      ],
      "DefaultSheetContextTest::::hasInputStream()": [
        65,
        79
      ],
      "DefaultSheetContextTest::::getSheet1()": [
        81,
        97
      ],
      "DefaultSheetContextTest::::getSheet2()": [
        99,
        113
      ],
      "DefaultSheetContextTest::::getSheet3()": [
        115,
        129
      ],
      "DefaultSheetContextTest::::getSheet4()": [
        131,
        147
      ],
      "DefaultSheetContextTest::::getSheet5()": [
        149,
        165
      ],
      "DefaultSheetContextTest::::getSheet6()": [
        167,
        183
      ],
      "DefaultSheetContextTest::::getSheet7()": [
        185,
        201
      ],
      "DefaultSheetContextTest::::getSheet8()": [
        203,
        219
      ],
      "DefaultSheetContextTest::::getSheet9()": [
        222,
        239
      ],
      "DefaultSheetContextTest::::getMergedRegion()": [
        241,
        257
      ],
      "DefaultSheetContextTest::::getDrawing()": [
        259,
        273
      ],
      "DefaultSheetContextTest::::getMaxRowspan1()": [
        275,
        291
      ],
      "DefaultSheetContextTest::::getMaxRowspan2()": [
        293,
        305
      ],
      "DefaultSheetContextTest::::getRow()": [
        307,
        322
      ],
      "DefaultSheetContextTest::::getRowList()": [
        324,
        345
      ],
      "DefaultSheetContextTest::::getLasRowIndex()": [
        347,
        367
      ],
      "DefaultSheetContextTest::::getFormulaEvaluator()": [
        370,
        385
      ],
      "DefaultSheetContextTest::::putTitleCellStyle()": [
        387,
        401
      ],
      "DefaultSheetContextTest::::putHeadCellStyle()": [
        403,
        420
      ],
      "DefaultSheetContextTest::::putDataCellStyle()": [
        422,
        443
      ],
      "DefaultSheetContextTest::::getTitleCellStyle()": [
        446,
        464
      ],
      "DefaultSheetContextTest::::getHeadCellStyle()": [
        466,
        485
      ],
      "DefaultSheetContextTest::::getDataCellStyle()": [
        487,
        508
      ]
    },
    "reverse_method_lines_dic": {
      "55": "DefaultSheetContext::::getWorkbookContext()",
      "56": "DefaultSheetContext::::getWorkbookContext()",
      "57": "DefaultSheetContext::::getWorkbookContext()",
      "58": "DefaultSheetContext::::getWorkbookContext()",
      "60": "DefaultSheetContext::::getConfiguration()",
      "61": "DefaultSheetContext::::getConfiguration()",
      "62": "DefaultSheetContext::::getConfiguration()",
      "63": "DefaultSheetContext::::getConfiguration()",
      "65": "DefaultSheetContext::::getWorkbook()",
      "66": "DefaultSheetContext::::getWorkbook()",
      "67": "DefaultSheetContext::::getWorkbook()",
      "68": "DefaultSheetContext::::getWorkbook()",
      "70": "DefaultSheetContext::::getExcelClassConfig()",
      "71": "DefaultSheetContext::::getExcelClassConfig()",
      "72": "DefaultSheetContext::::getExcelClassConfig()",
      "73": "DefaultSheetContext::::getExcelClassConfig()",
      "75": "DefaultSheetContext::::getSheetParameter()",
      "76": "DefaultSheetContext::::getSheetParameter()",
      "77": "DefaultSheetContext::::getSheetParameter()",
      "78": "DefaultSheetContext::::getSheetParameter()",
      "80": "DefaultSheetContext::::hasInputStream()",
      "81": "DefaultSheetContext::::hasInputStream()",
      "82": "DefaultSheetContext::::hasInputStream()",
      "83": "DefaultSheetContext::::hasInputStream()",
      "85": "DefaultSheetContext::::getSheet()",
      "86": "DefaultSheetContext::::getSheet()",
      "87": "DefaultSheetContext::::getSheet()",
      "88": "DefaultSheetContext::::getSheet()",
      "89": "DefaultSheetContext::::getSheet()",
      "90": "DefaultSheetContext::::getSheet()",
      "91": "DefaultSheetContext::::getSheet()",
      "92": "DefaultSheetContext::::getSheet()",
      "93": "DefaultSheetContext::::getSheet()",
      "94": "DefaultSheetContext::::getSheet()",
      "95": "DefaultSheetContext::::getSheet()",
      "96": "DefaultSheetContext::::getSheet()",
      "97": "DefaultSheetContext::::getSheet()",
      "98": "DefaultSheetContext::::getSheet()",
      "99": "DefaultSheetContext::::getSheet()",
      "100": "DefaultSheetContext::::getSheet()",
      "101": "DefaultSheetContext::::getSheet()",
      "102": "DefaultSheetContext::::getSheet()",
      "103": "DefaultSheetContext::::getSheet()",
      "104": "DefaultSheetContext::::getSheet()",
      "105": "DefaultSheetContext::::getSheet()",
      "106": "DefaultSheetContext::::getSheet()",
      "107": "DefaultSheetContext::::getSheet()",
      "108": "DefaultSheetContext::::getSheet()",
      "109": "DefaultSheetContext::::getSheet()",
      "110": "DefaultSheetContext::::getSheet()",
      "111": "DefaultSheetContext::::getSheet()",
      "112": "DefaultSheetContext::::getSheet()",
      "113": "DefaultSheetContext::::getSheet()",
      "114": "DefaultSheetContext::::getSheet()",
      "115": "DefaultSheetContext::::getSheet()",
      "116": "DefaultSheetContext::::getSheet()",
      "119": "DefaultSheetContext::::getMergedRegion()",
      "120": "DefaultSheetContext::::getMergedRegion()",
      "121": "DefaultSheetContext::::getMergedRegion()",
      "122": "DefaultSheetContext::::getMergedRegion()",
      "123": "DefaultSheetContext::::getMergedRegion()",
      "124": "DefaultSheetContext::::getMergedRegion()",
      "125": "DefaultSheetContext::::getMergedRegion()",
      "128": "DefaultSheetContext::::getMaxRowspan(int)",
      "129": "DefaultSheetContext::::getMaxRowspan(int)",
      "130": "DefaultSheetContext::::getMaxRowspan(int)",
      "131": "DefaultSheetContext::::getMaxRowspan(int)",
      "132": "DefaultSheetContext::::getMaxRowspan(int)",
      "133": "DefaultSheetContext::::getMaxRowspan(int)",
      "134": "DefaultSheetContext::::getMaxRowspan(int)",
      "135": "DefaultSheetContext::::getMaxRowspan(int)",
      "136": "DefaultSheetContext::::getMaxRowspan(int)",
      "137": "DefaultSheetContext::::getMaxRowspan(int)",
      "138": "DefaultSheetContext::::getMaxRowspan(int)",
      "139": "DefaultSheetContext::::getMaxRowspan(int)",
      "140": "DefaultSheetContext::::getMaxRowspan(int)",
      "141": "DefaultSheetContext::::getMaxRowspan(int)",
      "142": "DefaultSheetContext::::getMaxRowspan(int)",
      "143": "DefaultSheetContext::::getMaxRowspan(int)",
      "144": "DefaultSheetContext::::getMaxRowspan(int)",
      "145": "DefaultSheetContext::::getMaxRowspan(int)",
      "146": "DefaultSheetContext::::getMaxRowspan(int)",
      "147": "DefaultSheetContext::::getMaxRowspan(int)",
      "149": "DefaultSheetContext::::getDrawing()",
      "150": "DefaultSheetContext::::getDrawing()",
      "151": "DefaultSheetContext::::getDrawing()",
      "152": "DefaultSheetContext::::getDrawing()",
      "153": "DefaultSheetContext::::getDrawing()",
      "154": "DefaultSheetContext::::getDrawing()",
      "155": "DefaultSheetContext::::getDrawing()",
      "157": "DefaultSheetContext::::getRow(int)",
      "158": "DefaultSheetContext::::getRow(int)",
      "159": "DefaultSheetContext::::getRow(int)",
      "160": "DefaultSheetContext::::getRow(int)",
      "162": "DefaultSheetContext::::getRowList(int,int)",
      "163": "DefaultSheetContext::::getRowList(int,int)",
      "164": "DefaultSheetContext::::getRowList(int,int)",
      "165": "DefaultSheetContext::::getRowList(int,int)",
      "166": "DefaultSheetContext::::getRowList(int,int)",
      "167": "DefaultSheetContext::::getRowList(int,int)",
      "168": "DefaultSheetContext::::getRowList(int,int)",
      "169": "DefaultSheetContext::::getRowList(int,int)",
      "170": "DefaultSheetContext::::getRowList(int,int)",
      "171": "DefaultSheetContext::::getRowList(int,int)",
      "172": "DefaultSheetContext::::getRowList(int,int)",
      "174": "DefaultSheetContext::::getLasRowIndex()",
      "175": "DefaultSheetContext::::getLasRowIndex()",
      "176": "DefaultSheetContext::::getLasRowIndex()",
      "177": "DefaultSheetContext::::getLasRowIndex()",
      "179": "DefaultSheetContext::::getFormulaEvaluator()",
      "180": "DefaultSheetContext::::getFormulaEvaluator()",
      "181": "DefaultSheetContext::::getFormulaEvaluator()",
      "182": "DefaultSheetContext::::getFormulaEvaluator()",
      "189": "DefaultSheetContext::::putHeadCellStyle(io.github.zouzhiy.excel.metadata.result.CellStyleResultSet)",
      "190": "DefaultSheetContext::::putHeadCellStyle(io.github.zouzhiy.excel.metadata.result.CellStyleResultSet)",
      "191": "DefaultSheetContext::::putHeadCellStyle(io.github.zouzhiy.excel.metadata.result.CellStyleResultSet)",
      "192": "DefaultSheetContext::::putHeadCellStyle(io.github.zouzhiy.excel.metadata.result.CellStyleResultSet)",
      "194": "DefaultSheetContext::::putDataCellStyle(io.github.zouzhiy.excel.metadata.result.CellStyleResultSet)",
      "195": "DefaultSheetContext::::putDataCellStyle(io.github.zouzhiy.excel.metadata.result.CellStyleResultSet)",
      "196": "DefaultSheetContext::::putDataCellStyle(io.github.zouzhiy.excel.metadata.result.CellStyleResultSet)",
      "197": "DefaultSheetContext::::putDataCellStyle(io.github.zouzhiy.excel.metadata.result.CellStyleResultSet)",
      "199": "DefaultSheetContext::::getTitleCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelClassConfig)",
      "200": "DefaultSheetContext::::getTitleCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelClassConfig)",
      "201": "DefaultSheetContext::::getTitleCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelClassConfig)",
      "202": "DefaultSheetContext::::getTitleCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelClassConfig)",
      "204": "DefaultSheetContext::::getHeadCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig)",
      "205": "DefaultSheetContext::::getHeadCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig)",
      "206": "DefaultSheetContext::::getHeadCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig)",
      "207": "DefaultSheetContext::::getHeadCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig)",
      "209": "DefaultSheetContext::::getDataCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,java.lang.String)",
      "210": "DefaultSheetContext::::getDataCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,java.lang.String)",
      "211": "DefaultSheetContext::::getDataCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,java.lang.String)",
      "212": "DefaultSheetContext::::getDataCellStyle(io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,java.lang.String)",
      "241": "DefaultSheetContext::::isNotEmpty(java.lang.String)",
      "242": "DefaultSheetContext::::isNotEmpty(java.lang.String)",
      "243": "DefaultSheetContext::::isNotEmpty(java.lang.String)"
    },
    "test_reverse_method_lines_dic": {
      "28": "DefaultSheetContextTest::::getConfiguration()",
      "29": "DefaultSheetContextTest::::getConfiguration()",
      "30": "DefaultSheetContextTest::::getConfiguration()",
      "31": "DefaultSheetContextTest::::getConfiguration()",
      "32": "DefaultSheetContextTest::::getConfiguration()",
      "33": "DefaultSheetContextTest::::getConfiguration()",
      "34": "DefaultSheetContextTest::::getConfiguration()",
      "35": "DefaultSheetContextTest::::getConfiguration()",
      "36": "DefaultSheetContextTest::::getConfiguration()",
      "37": "DefaultSheetContextTest::::getConfiguration()",
      "38": "DefaultSheetContextTest::::getConfiguration()",
      "39": "DefaultSheetContextTest::::getConfiguration()",
      "40": "DefaultSheetContextTest::::getConfiguration()",
      "41": "DefaultSheetContextTest::::getConfiguration()",
      "42": "DefaultSheetContextTest::::getConfiguration()",
      "43": "DefaultSheetContextTest::::getConfiguration()",
      "44": "DefaultSheetContextTest::::getConfiguration()",
      "45": "DefaultSheetContextTest::::getConfiguration()",
      "46": "DefaultSheetContextTest::::getConfiguration()",
      "47": "DefaultSheetContextTest::::getConfiguration()",
      "49": "DefaultSheetContextTest::::getWorkbook()",
      "50": "DefaultSheetContextTest::::getWorkbook()",
      "51": "DefaultSheetContextTest::::getWorkbook()",
      "52": "DefaultSheetContextTest::::getWorkbook()",
      "53": "DefaultSheetContextTest::::getWorkbook()",
      "54": "DefaultSheetContextTest::::getWorkbook()",
      "55": "DefaultSheetContextTest::::getWorkbook()",
      "56": "DefaultSheetContextTest::::getWorkbook()",
      "57": "DefaultSheetContextTest::::getWorkbook()",
      "58": "DefaultSheetContextTest::::getWorkbook()",
      "59": "DefaultSheetContextTest::::getWorkbook()",
      "60": "DefaultSheetContextTest::::getWorkbook()",
      "61": "DefaultSheetContextTest::::getWorkbook()",
      "62": "DefaultSheetContextTest::::getWorkbook()",
      "65": "DefaultSheetContextTest::::hasInputStream()",
      "66": "DefaultSheetContextTest::::hasInputStream()",
      "67": "DefaultSheetContextTest::::hasInputStream()",
      "68": "DefaultSheetContextTest::::hasInputStream()",
      "69": "DefaultSheetContextTest::::hasInputStream()",
      "70": "DefaultSheetContextTest::::hasInputStream()",
      "71": "DefaultSheetContextTest::::hasInputStream()",
      "72": "DefaultSheetContextTest::::hasInputStream()",
      "73": "DefaultSheetContextTest::::hasInputStream()",
      "74": "DefaultSheetContextTest::::hasInputStream()",
      "75": "DefaultSheetContextTest::::hasInputStream()",
      "76": "DefaultSheetContextTest::::hasInputStream()",
      "77": "DefaultSheetContextTest::::hasInputStream()",
      "78": "DefaultSheetContextTest::::hasInputStream()",
      "79": "DefaultSheetContextTest::::hasInputStream()",
      "81": "DefaultSheetContextTest::::getSheet1()",
      "82": "DefaultSheetContextTest::::getSheet1()",
      "83": "DefaultSheetContextTest::::getSheet1()",
      "84": "DefaultSheetContextTest::::getSheet1()",
      "85": "DefaultSheetContextTest::::getSheet1()",
      "86": "DefaultSheetContextTest::::getSheet1()",
      "87": "DefaultSheetContextTest::::getSheet1()",
      "88": "DefaultSheetContextTest::::getSheet1()",
      "89": "DefaultSheetContextTest::::getSheet1()",
      "90": "DefaultSheetContextTest::::getSheet1()",
      "91": "DefaultSheetContextTest::::getSheet1()",
      "92": "DefaultSheetContextTest::::getSheet1()",
      "93": "DefaultSheetContextTest::::getSheet1()",
      "94": "DefaultSheetContextTest::::getSheet1()",
      "95": "DefaultSheetContextTest::::getSheet1()",
      "96": "DefaultSheetContextTest::::getSheet1()",
      "97": "DefaultSheetContextTest::::getSheet1()",
      "99": "DefaultSheetContextTest::::getSheet2()",
      "100": "DefaultSheetContextTest::::getSheet2()",
      "101": "DefaultSheetContextTest::::getSheet2()",
      "102": "DefaultSheetContextTest::::getSheet2()",
      "103": "DefaultSheetContextTest::::getSheet2()",
      "104": "DefaultSheetContextTest::::getSheet2()",
      "105": "DefaultSheetContextTest::::getSheet2()",
      "106": "DefaultSheetContextTest::::getSheet2()",
      "107": "DefaultSheetContextTest::::getSheet2()",
      "108": "DefaultSheetContextTest::::getSheet2()",
      "109": "DefaultSheetContextTest::::getSheet2()",
      "110": "DefaultSheetContextTest::::getSheet2()",
      "111": "DefaultSheetContextTest::::getSheet2()",
      "112": "DefaultSheetContextTest::::getSheet2()",
      "113": "DefaultSheetContextTest::::getSheet2()",
      "115": "DefaultSheetContextTest::::getSheet3()",
      "116": "DefaultSheetContextTest::::getSheet3()",
      "117": "DefaultSheetContextTest::::getSheet3()",
      "118": "DefaultSheetContextTest::::getSheet3()",
      "119": "DefaultSheetContextTest::::getSheet3()",
      "120": "DefaultSheetContextTest::::getSheet3()",
      "121": "DefaultSheetContextTest::::getSheet3()",
      "122": "DefaultSheetContextTest::::getSheet3()",
      "123": "DefaultSheetContextTest::::getSheet3()",
      "124": "DefaultSheetContextTest::::getSheet3()",
      "125": "DefaultSheetContextTest::::getSheet3()",
      "126": "DefaultSheetContextTest::::getSheet3()",
      "127": "DefaultSheetContextTest::::getSheet3()",
      "128": "DefaultSheetContextTest::::getSheet3()",
      "129": "DefaultSheetContextTest::::getSheet3()",
      "131": "DefaultSheetContextTest::::getSheet4()",
      "132": "DefaultSheetContextTest::::getSheet4()",
      "133": "DefaultSheetContextTest::::getSheet4()",
      "134": "DefaultSheetContextTest::::getSheet4()",
      "135": "DefaultSheetContextTest::::getSheet4()",
      "136": "DefaultSheetContextTest::::getSheet4()",
      "137": "DefaultSheetContextTest::::getSheet4()",
      "138": "DefaultSheetContextTest::::getSheet4()",
      "139": "DefaultSheetContextTest::::getSheet4()",
      "140": "DefaultSheetContextTest::::getSheet4()",
      "141": "DefaultSheetContextTest::::getSheet4()",
      "142": "DefaultSheetContextTest::::getSheet4()",
      "143": "DefaultSheetContextTest::::getSheet4()",
      "144": "DefaultSheetContextTest::::getSheet4()",
      "145": "DefaultSheetContextTest::::getSheet4()",
      "146": "DefaultSheetContextTest::::getSheet4()",
      "147": "DefaultSheetContextTest::::getSheet4()",
      "149": "DefaultSheetContextTest::::getSheet5()",
      "150": "DefaultSheetContextTest::::getSheet5()",
      "151": "DefaultSheetContextTest::::getSheet5()",
      "152": "DefaultSheetContextTest::::getSheet5()",
      "153": "DefaultSheetContextTest::::getSheet5()",
      "154": "DefaultSheetContextTest::::getSheet5()",
      "155": "DefaultSheetContextTest::::getSheet5()",
      "156": "DefaultSheetContextTest::::getSheet5()",
      "157": "DefaultSheetContextTest::::getSheet5()",
      "158": "DefaultSheetContextTest::::getSheet5()",
      "159": "DefaultSheetContextTest::::getSheet5()",
      "160": "DefaultSheetContextTest::::getSheet5()",
      "161": "DefaultSheetContextTest::::getSheet5()",
      "162": "DefaultSheetContextTest::::getSheet5()",
      "163": "DefaultSheetContextTest::::getSheet5()",
      "164": "DefaultSheetContextTest::::getSheet5()",
      "165": "DefaultSheetContextTest::::getSheet5()",
      "167": "DefaultSheetContextTest::::getSheet6()",
      "168": "DefaultSheetContextTest::::getSheet6()",
      "169": "DefaultSheetContextTest::::getSheet6()",
      "170": "DefaultSheetContextTest::::getSheet6()",
      "171": "DefaultSheetContextTest::::getSheet6()",
      "172": "DefaultSheetContextTest::::getSheet6()",
      "173": "DefaultSheetContextTest::::getSheet6()",
      "174": "DefaultSheetContextTest::::getSheet6()",
      "175": "DefaultSheetContextTest::::getSheet6()",
      "176": "DefaultSheetContextTest::::getSheet6()",
      "177": "DefaultSheetContextTest::::getSheet6()",
      "178": "DefaultSheetContextTest::::getSheet6()",
      "179": "DefaultSheetContextTest::::getSheet6()",
      "180": "DefaultSheetContextTest::::getSheet6()",
      "181": "DefaultSheetContextTest::::getSheet6()",
      "182": "DefaultSheetContextTest::::getSheet6()",
      "183": "DefaultSheetContextTest::::getSheet6()",
      "185": "DefaultSheetContextTest::::getSheet7()",
      "186": "DefaultSheetContextTest::::getSheet7()",
      "187": "DefaultSheetContextTest::::getSheet7()",
      "188": "DefaultSheetContextTest::::getSheet7()",
      "189": "DefaultSheetContextTest::::getSheet7()",
      "190": "DefaultSheetContextTest::::getSheet7()",
      "191": "DefaultSheetContextTest::::getSheet7()",
      "192": "DefaultSheetContextTest::::getSheet7()",
      "193": "DefaultSheetContextTest::::getSheet7()",
      "194": "DefaultSheetContextTest::::getSheet7()",
      "195": "DefaultSheetContextTest::::getSheet7()",
      "196": "DefaultSheetContextTest::::getSheet7()",
      "197": "DefaultSheetContextTest::::getSheet7()",
      "198": "DefaultSheetContextTest::::getSheet7()",
      "199": "DefaultSheetContextTest::::getSheet7()",
      "200": "DefaultSheetContextTest::::getSheet7()",
      "201": "DefaultSheetContextTest::::getSheet7()",
      "203": "DefaultSheetContextTest::::getSheet8()",
      "204": "DefaultSheetContextTest::::getSheet8()",
      "205": "DefaultSheetContextTest::::getSheet8()",
      "206": "DefaultSheetContextTest::::getSheet8()",
      "207": "DefaultSheetContextTest::::getSheet8()",
      "208": "DefaultSheetContextTest::::getSheet8()",
      "209": "DefaultSheetContextTest::::getSheet8()",
      "210": "DefaultSheetContextTest::::getSheet8()",
      "211": "DefaultSheetContextTest::::getSheet8()",
      "212": "DefaultSheetContextTest::::getSheet8()",
      "213": "DefaultSheetContextTest::::getSheet8()",
      "214": "DefaultSheetContextTest::::getSheet8()",
      "215": "DefaultSheetContextTest::::getSheet8()",
      "216": "DefaultSheetContextTest::::getSheet8()",
      "217": "DefaultSheetContextTest::::getSheet8()",
      "218": "DefaultSheetContextTest::::getSheet8()",
      "219": "DefaultSheetContextTest::::getSheet8()",
      "222": "DefaultSheetContextTest::::getSheet9()",
      "223": "DefaultSheetContextTest::::getSheet9()",
      "224": "DefaultSheetContextTest::::getSheet9()",
      "225": "DefaultSheetContextTest::::getSheet9()",
      "226": "DefaultSheetContextTest::::getSheet9()",
      "227": "DefaultSheetContextTest::::getSheet9()",
      "228": "DefaultSheetContextTest::::getSheet9()",
      "229": "DefaultSheetContextTest::::getSheet9()",
      "230": "DefaultSheetContextTest::::getSheet9()",
      "231": "DefaultSheetContextTest::::getSheet9()",
      "232": "DefaultSheetContextTest::::getSheet9()",
      "233": "DefaultSheetContextTest::::getSheet9()",
      "234": "DefaultSheetContextTest::::getSheet9()",
      "235": "DefaultSheetContextTest::::getSheet9()",
      "236": "DefaultSheetContextTest::::getSheet9()",
      "237": "DefaultSheetContextTest::::getSheet9()",
      "238": "DefaultSheetContextTest::::getSheet9()",
      "239": "DefaultSheetContextTest::::getSheet9()",
      "241": "DefaultSheetContextTest::::getMergedRegion()",
      "242": "DefaultSheetContextTest::::getMergedRegion()",
      "243": "DefaultSheetContextTest::::getMergedRegion()",
      "244": "DefaultSheetContextTest::::getMergedRegion()",
      "245": "DefaultSheetContextTest::::getMergedRegion()",
      "246": "DefaultSheetContextTest::::getMergedRegion()",
      "247": "DefaultSheetContextTest::::getMergedRegion()",
      "248": "DefaultSheetContextTest::::getMergedRegion()",
      "249": "DefaultSheetContextTest::::getMergedRegion()",
      "250": "DefaultSheetContextTest::::getMergedRegion()",
      "251": "DefaultSheetContextTest::::getMergedRegion()",
      "252": "DefaultSheetContextTest::::getMergedRegion()",
      "253": "DefaultSheetContextTest::::getMergedRegion()",
      "254": "DefaultSheetContextTest::::getMergedRegion()",
      "255": "DefaultSheetContextTest::::getMergedRegion()",
      "256": "DefaultSheetContextTest::::getMergedRegion()",
      "257": "DefaultSheetContextTest::::getMergedRegion()",
      "259": "DefaultSheetContextTest::::getDrawing()",
      "260": "DefaultSheetContextTest::::getDrawing()",
      "261": "DefaultSheetContextTest::::getDrawing()",
      "262": "DefaultSheetContextTest::::getDrawing()",
      "263": "DefaultSheetContextTest::::getDrawing()",
      "264": "DefaultSheetContextTest::::getDrawing()",
      "265": "DefaultSheetContextTest::::getDrawing()",
      "266": "DefaultSheetContextTest::::getDrawing()",
      "267": "DefaultSheetContextTest::::getDrawing()",
      "268": "DefaultSheetContextTest::::getDrawing()",
      "269": "DefaultSheetContextTest::::getDrawing()",
      "270": "DefaultSheetContextTest::::getDrawing()",
      "271": "DefaultSheetContextTest::::getDrawing()",
      "272": "DefaultSheetContextTest::::getDrawing()",
      "273": "DefaultSheetContextTest::::getDrawing()",
      "275": "DefaultSheetContextTest::::getMaxRowspan1()",
      "276": "DefaultSheetContextTest::::getMaxRowspan1()",
      "277": "DefaultSheetContextTest::::getMaxRowspan1()",
      "278": "DefaultSheetContextTest::::getMaxRowspan1()",
      "279": "DefaultSheetContextTest::::getMaxRowspan1()",
      "280": "DefaultSheetContextTest::::getMaxRowspan1()",
      "281": "DefaultSheetContextTest::::getMaxRowspan1()",
      "282": "DefaultSheetContextTest::::getMaxRowspan1()",
      "283": "DefaultSheetContextTest::::getMaxRowspan1()",
      "284": "DefaultSheetContextTest::::getMaxRowspan1()",
      "285": "DefaultSheetContextTest::::getMaxRowspan1()",
      "286": "DefaultSheetContextTest::::getMaxRowspan1()",
      "287": "DefaultSheetContextTest::::getMaxRowspan1()",
      "288": "DefaultSheetContextTest::::getMaxRowspan1()",
      "289": "DefaultSheetContextTest::::getMaxRowspan1()",
      "290": "DefaultSheetContextTest::::getMaxRowspan1()",
      "291": "DefaultSheetContextTest::::getMaxRowspan1()",
      "293": "DefaultSheetContextTest::::getMaxRowspan2()",
      "294": "DefaultSheetContextTest::::getMaxRowspan2()",
      "295": "DefaultSheetContextTest::::getMaxRowspan2()",
      "296": "DefaultSheetContextTest::::getMaxRowspan2()",
      "297": "DefaultSheetContextTest::::getMaxRowspan2()",
      "298": "DefaultSheetContextTest::::getMaxRowspan2()",
      "299": "DefaultSheetContextTest::::getMaxRowspan2()",
      "300": "DefaultSheetContextTest::::getMaxRowspan2()",
      "301": "DefaultSheetContextTest::::getMaxRowspan2()",
      "302": "DefaultSheetContextTest::::getMaxRowspan2()",
      "303": "DefaultSheetContextTest::::getMaxRowspan2()",
      "304": "DefaultSheetContextTest::::getMaxRowspan2()",
      "305": "DefaultSheetContextTest::::getMaxRowspan2()",
      "307": "DefaultSheetContextTest::::getRow()",
      "308": "DefaultSheetContextTest::::getRow()",
      "309": "DefaultSheetContextTest::::getRow()",
      "310": "DefaultSheetContextTest::::getRow()",
      "311": "DefaultSheetContextTest::::getRow()",
      "312": "DefaultSheetContextTest::::getRow()",
      "313": "DefaultSheetContextTest::::getRow()",
      "314": "DefaultSheetContextTest::::getRow()",
      "315": "DefaultSheetContextTest::::getRow()",
      "316": "DefaultSheetContextTest::::getRow()",
      "317": "DefaultSheetContextTest::::getRow()",
      "318": "DefaultSheetContextTest::::getRow()",
      "319": "DefaultSheetContextTest::::getRow()",
      "320": "DefaultSheetContextTest::::getRow()",
      "321": "DefaultSheetContextTest::::getRow()",
      "322": "DefaultSheetContextTest::::getRow()",
      "324": "DefaultSheetContextTest::::getRowList()",
      "325": "DefaultSheetContextTest::::getRowList()",
      "326": "DefaultSheetContextTest::::getRowList()",
      "327": "DefaultSheetContextTest::::getRowList()",
      "328": "DefaultSheetContextTest::::getRowList()",
      "329": "DefaultSheetContextTest::::getRowList()",
      "330": "DefaultSheetContextTest::::getRowList()",
      "331": "DefaultSheetContextTest::::getRowList()",
      "332": "DefaultSheetContextTest::::getRowList()",
      "333": "DefaultSheetContextTest::::getRowList()",
      "334": "DefaultSheetContextTest::::getRowList()",
      "335": "DefaultSheetContextTest::::getRowList()",
      "336": "DefaultSheetContextTest::::getRowList()",
      "337": "DefaultSheetContextTest::::getRowList()",
      "338": "DefaultSheetContextTest::::getRowList()",
      "339": "DefaultSheetContextTest::::getRowList()",
      "340": "DefaultSheetContextTest::::getRowList()",
      "341": "DefaultSheetContextTest::::getRowList()",
      "342": "DefaultSheetContextTest::::getRowList()",
      "343": "DefaultSheetContextTest::::getRowList()",
      "344": "DefaultSheetContextTest::::getRowList()",
      "345": "DefaultSheetContextTest::::getRowList()",
      "347": "DefaultSheetContextTest::::getLasRowIndex()",
      "348": "DefaultSheetContextTest::::getLasRowIndex()",
      "349": "DefaultSheetContextTest::::getLasRowIndex()",
      "350": "DefaultSheetContextTest::::getLasRowIndex()",
      "351": "DefaultSheetContextTest::::getLasRowIndex()",
      "352": "DefaultSheetContextTest::::getLasRowIndex()",
      "353": "DefaultSheetContextTest::::getLasRowIndex()",
      "354": "DefaultSheetContextTest::::getLasRowIndex()",
      "355": "DefaultSheetContextTest::::getLasRowIndex()",
      "356": "DefaultSheetContextTest::::getLasRowIndex()",
      "357": "DefaultSheetContextTest::::getLasRowIndex()",
      "358": "DefaultSheetContextTest::::getLasRowIndex()",
      "359": "DefaultSheetContextTest::::getLasRowIndex()",
      "360": "DefaultSheetContextTest::::getLasRowIndex()",
      "361": "DefaultSheetContextTest::::getLasRowIndex()",
      "362": "DefaultSheetContextTest::::getLasRowIndex()",
      "363": "DefaultSheetContextTest::::getLasRowIndex()",
      "364": "DefaultSheetContextTest::::getLasRowIndex()",
      "365": "DefaultSheetContextTest::::getLasRowIndex()",
      "366": "DefaultSheetContextTest::::getLasRowIndex()",
      "367": "DefaultSheetContextTest::::getLasRowIndex()",
      "370": "DefaultSheetContextTest::::getFormulaEvaluator()",
      "371": "DefaultSheetContextTest::::getFormulaEvaluator()",
      "372": "DefaultSheetContextTest::::getFormulaEvaluator()",
      "373": "DefaultSheetContextTest::::getFormulaEvaluator()",
      "374": "DefaultSheetContextTest::::getFormulaEvaluator()",
      "375": "DefaultSheetContextTest::::getFormulaEvaluator()",
      "376": "DefaultSheetContextTest::::getFormulaEvaluator()",
      "377": "DefaultSheetContextTest::::getFormulaEvaluator()",
      "378": "DefaultSheetContextTest::::getFormulaEvaluator()",
      "379": "DefaultSheetContextTest::::getFormulaEvaluator()",
      "380": "DefaultSheetContextTest::::getFormulaEvaluator()",
      "381": "DefaultSheetContextTest::::getFormulaEvaluator()",
      "382": "DefaultSheetContextTest::::getFormulaEvaluator()",
      "383": "DefaultSheetContextTest::::getFormulaEvaluator()",
      "384": "DefaultSheetContextTest::::getFormulaEvaluator()",
      "385": "DefaultSheetContextTest::::getFormulaEvaluator()",
      "387": "DefaultSheetContextTest::::putTitleCellStyle()",
      "388": "DefaultSheetContextTest::::putTitleCellStyle()",
      "389": "DefaultSheetContextTest::::putTitleCellStyle()",
      "390": "DefaultSheetContextTest::::putTitleCellStyle()",
      "391": "DefaultSheetContextTest::::putTitleCellStyle()",
      "392": "DefaultSheetContextTest::::putTitleCellStyle()",
      "393": "DefaultSheetContextTest::::putTitleCellStyle()",
      "394": "DefaultSheetContextTest::::putTitleCellStyle()",
      "395": "DefaultSheetContextTest::::putTitleCellStyle()",
      "396": "DefaultSheetContextTest::::putTitleCellStyle()",
      "397": "DefaultSheetContextTest::::putTitleCellStyle()",
      "398": "DefaultSheetContextTest::::putTitleCellStyle()",
      "399": "DefaultSheetContextTest::::putTitleCellStyle()",
      "400": "DefaultSheetContextTest::::putTitleCellStyle()",
      "401": "DefaultSheetContextTest::::putTitleCellStyle()",
      "403": "DefaultSheetContextTest::::putHeadCellStyle()",
      "404": "DefaultSheetContextTest::::putHeadCellStyle()",
      "405": "DefaultSheetContextTest::::putHeadCellStyle()",
      "406": "DefaultSheetContextTest::::putHeadCellStyle()",
      "407": "DefaultSheetContextTest::::putHeadCellStyle()",
      "408": "DefaultSheetContextTest::::putHeadCellStyle()",
      "409": "DefaultSheetContextTest::::putHeadCellStyle()",
      "410": "DefaultSheetContextTest::::putHeadCellStyle()",
      "411": "DefaultSheetContextTest::::putHeadCellStyle()",
      "412": "DefaultSheetContextTest::::putHeadCellStyle()",
      "413": "DefaultSheetContextTest::::putHeadCellStyle()",
      "414": "DefaultSheetContextTest::::putHeadCellStyle()",
      "415": "DefaultSheetContextTest::::putHeadCellStyle()",
      "416": "DefaultSheetContextTest::::putHeadCellStyle()",
      "417": "DefaultSheetContextTest::::putHeadCellStyle()",
      "418": "DefaultSheetContextTest::::putHeadCellStyle()",
      "419": "DefaultSheetContextTest::::putHeadCellStyle()",
      "420": "DefaultSheetContextTest::::putHeadCellStyle()",
      "422": "DefaultSheetContextTest::::putDataCellStyle()",
      "423": "DefaultSheetContextTest::::putDataCellStyle()",
      "424": "DefaultSheetContextTest::::putDataCellStyle()",
      "425": "DefaultSheetContextTest::::putDataCellStyle()",
      "426": "DefaultSheetContextTest::::putDataCellStyle()",
      "427": "DefaultSheetContextTest::::putDataCellStyle()",
      "428": "DefaultSheetContextTest::::putDataCellStyle()",
      "429": "DefaultSheetContextTest::::putDataCellStyle()",
      "430": "DefaultSheetContextTest::::putDataCellStyle()",
      "431": "DefaultSheetContextTest::::putDataCellStyle()",
      "432": "DefaultSheetContextTest::::putDataCellStyle()",
      "433": "DefaultSheetContextTest::::putDataCellStyle()",
      "434": "DefaultSheetContextTest::::putDataCellStyle()",
      "435": "DefaultSheetContextTest::::putDataCellStyle()",
      "436": "DefaultSheetContextTest::::putDataCellStyle()",
      "437": "DefaultSheetContextTest::::putDataCellStyle()",
      "438": "DefaultSheetContextTest::::putDataCellStyle()",
      "439": "DefaultSheetContextTest::::putDataCellStyle()",
      "440": "DefaultSheetContextTest::::putDataCellStyle()",
      "441": "DefaultSheetContextTest::::putDataCellStyle()",
      "442": "DefaultSheetContextTest::::putDataCellStyle()",
      "443": "DefaultSheetContextTest::::putDataCellStyle()",
      "446": "DefaultSheetContextTest::::getTitleCellStyle()",
      "447": "DefaultSheetContextTest::::getTitleCellStyle()",
      "448": "DefaultSheetContextTest::::getTitleCellStyle()",
      "449": "DefaultSheetContextTest::::getTitleCellStyle()",
      "450": "DefaultSheetContextTest::::getTitleCellStyle()",
      "451": "DefaultSheetContextTest::::getTitleCellStyle()",
      "452": "DefaultSheetContextTest::::getTitleCellStyle()",
      "453": "DefaultSheetContextTest::::getTitleCellStyle()",
      "454": "DefaultSheetContextTest::::getTitleCellStyle()",
      "455": "DefaultSheetContextTest::::getTitleCellStyle()",
      "456": "DefaultSheetContextTest::::getTitleCellStyle()",
      "457": "DefaultSheetContextTest::::getTitleCellStyle()",
      "458": "DefaultSheetContextTest::::getTitleCellStyle()",
      "459": "DefaultSheetContextTest::::getTitleCellStyle()",
      "460": "DefaultSheetContextTest::::getTitleCellStyle()",
      "461": "DefaultSheetContextTest::::getTitleCellStyle()",
      "462": "DefaultSheetContextTest::::getTitleCellStyle()",
      "463": "DefaultSheetContextTest::::getTitleCellStyle()",
      "464": "DefaultSheetContextTest::::getTitleCellStyle()",
      "466": "DefaultSheetContextTest::::getHeadCellStyle()",
      "467": "DefaultSheetContextTest::::getHeadCellStyle()",
      "468": "DefaultSheetContextTest::::getHeadCellStyle()",
      "469": "DefaultSheetContextTest::::getHeadCellStyle()",
      "470": "DefaultSheetContextTest::::getHeadCellStyle()",
      "471": "DefaultSheetContextTest::::getHeadCellStyle()",
      "472": "DefaultSheetContextTest::::getHeadCellStyle()",
      "473": "DefaultSheetContextTest::::getHeadCellStyle()",
      "474": "DefaultSheetContextTest::::getHeadCellStyle()",
      "475": "DefaultSheetContextTest::::getHeadCellStyle()",
      "476": "DefaultSheetContextTest::::getHeadCellStyle()",
      "477": "DefaultSheetContextTest::::getHeadCellStyle()",
      "478": "DefaultSheetContextTest::::getHeadCellStyle()",
      "479": "DefaultSheetContextTest::::getHeadCellStyle()",
      "480": "DefaultSheetContextTest::::getHeadCellStyle()",
      "481": "DefaultSheetContextTest::::getHeadCellStyle()",
      "482": "DefaultSheetContextTest::::getHeadCellStyle()",
      "483": "DefaultSheetContextTest::::getHeadCellStyle()",
      "484": "DefaultSheetContextTest::::getHeadCellStyle()",
      "485": "DefaultSheetContextTest::::getHeadCellStyle()",
      "487": "DefaultSheetContextTest::::getDataCellStyle()",
      "488": "DefaultSheetContextTest::::getDataCellStyle()",
      "489": "DefaultSheetContextTest::::getDataCellStyle()",
      "490": "DefaultSheetContextTest::::getDataCellStyle()",
      "491": "DefaultSheetContextTest::::getDataCellStyle()",
      "492": "DefaultSheetContextTest::::getDataCellStyle()",
      "493": "DefaultSheetContextTest::::getDataCellStyle()",
      "494": "DefaultSheetContextTest::::getDataCellStyle()",
      "495": "DefaultSheetContextTest::::getDataCellStyle()",
      "496": "DefaultSheetContextTest::::getDataCellStyle()",
      "497": "DefaultSheetContextTest::::getDataCellStyle()",
      "498": "DefaultSheetContextTest::::getDataCellStyle()",
      "499": "DefaultSheetContextTest::::getDataCellStyle()",
      "500": "DefaultSheetContextTest::::getDataCellStyle()",
      "501": "DefaultSheetContextTest::::getDataCellStyle()",
      "502": "DefaultSheetContextTest::::getDataCellStyle()",
      "503": "DefaultSheetContextTest::::getDataCellStyle()",
      "504": "DefaultSheetContextTest::::getDataCellStyle()",
      "505": "DefaultSheetContextTest::::getDataCellStyle()",
      "506": "DefaultSheetContextTest::::getDataCellStyle()",
      "507": "DefaultSheetContextTest::::getDataCellStyle()",
      "508": "DefaultSheetContextTest::::getDataCellStyle()"
    },
    "tests": [
      {
        "test_lines": [
          28,
          47
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          57,
          62,
          72,
          77
        ]
      },
      {
        "test_lines": [
          49,
          62
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          57,
          67
        ]
      },
      {
        "test_lines": [
          65,
          79
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          82
        ]
      },
      {
        "test_lines": [
          81,
          97
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          87,
          88,
          89,
          92,
          93,
          94,
          95,
          98,
          99,
          100,
          104,
          105,
          109,
          113,
          115,
          242
        ]
      },
      {
        "test_lines": [
          99,
          113
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          87,
          88,
          89,
          92,
          93,
          94,
          98,
          99,
          100,
          101,
          104,
          105,
          109,
          113,
          115,
          242
        ]
      },
      {
        "test_lines": [
          115,
          129
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          87,
          88,
          92,
          93,
          94,
          98,
          99,
          100,
          104,
          105,
          106,
          109,
          113,
          115,
          242
        ]
      },
      {
        "test_lines": [
          131,
          147
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          87,
          88,
          89,
          92,
          93,
          94,
          98,
          99,
          100,
          104,
          105,
          109,
          110,
          113,
          115,
          215,
          216,
          217,
          220,
          221,
          225,
          226,
          229,
          230,
          231,
          232,
          238,
          242
        ]
      },
      {
        "test_lines": [
          149,
          165
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          87,
          88,
          89,
          92,
          93,
          94,
          95,
          98,
          99,
          100,
          104,
          105,
          109,
          110,
          113,
          115,
          215,
          216,
          217,
          218,
          220,
          221,
          225,
          226,
          229,
          238,
          242
        ]
      },
      {
        "test_lines": [
          167,
          183
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          87,
          88,
          89,
          92,
          93,
          94,
          98,
          99,
          100,
          104,
          105,
          109,
          110,
          113,
          115,
          215,
          216,
          217,
          220,
          221,
          225,
          226,
          227,
          229,
          238,
          242
        ]
      },
      {
        "test_lines": [
          185,
          201
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          87,
          88,
          89,
          92,
          93,
          94,
          98,
          99,
          100,
          104,
          105,
          106,
          109,
          110,
          113,
          115,
          215,
          216,
          217,
          220,
          221,
          222,
          225,
          226,
          229,
          238,
          242
        ]
      },
      {
        "test_lines": [
          203,
          219
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          87,
          88,
          89,
          92,
          93,
          94,
          98,
          99,
          100,
          104,
          105,
          109,
          110,
          113,
          115,
          215,
          216,
          217,
          220,
          221,
          225,
          226,
          229,
          230,
          231,
          232,
          238,
          242
        ]
      },
      {
        "test_lines": [
          222,
          239
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          87,
          88,
          89,
          92,
          93,
          94,
          98,
          99,
          100,
          104,
          105,
          109,
          110,
          113,
          115,
          215,
          216,
          217,
          220,
          221,
          225,
          226,
          229,
          230,
          231,
          232,
          233,
          234,
          238,
          242
        ]
      },
      {
        "test_lines": [
          241,
          257
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          121,
          122,
          124
        ]
      },
      {
        "test_lines": [
          259,
          273
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          151,
          152,
          154
        ]
      },
      {
        "test_lines": [
          275,
          291
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          77,
          121,
          122,
          124,
          130,
          131,
          132,
          133,
          134,
          137,
          138,
          140,
          141,
          142,
          143,
          144,
          145,
          146
        ]
      },
      {
        "test_lines": [
          293,
          305
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          77,
          121,
          122,
          124,
          130,
          131,
          132,
          133,
          134,
          135
        ]
      },
      {
        "test_lines": [
          307,
          322
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          159
        ]
      },
      {
        "test_lines": [
          324,
          345
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          164,
          165,
          166,
          167,
          168,
          171
        ]
      },
      {
        "test_lines": [
          347,
          367
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          176
        ]
      },
      {
        "test_lines": [
          370,
          385
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          181
        ]
      },
      {
        "test_lines": [
          387,
          401
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          186,
          187
        ]
      },
      {
        "test_lines": [
          403,
          420
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          191,
          192
        ]
      },
      {
        "test_lines": [
          422,
          443
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          196,
          197
        ]
      },
      {
        "test_lines": [
          446,
          464
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          201
        ]
      },
      {
        "test_lines": [
          466,
          485
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          206
        ]
      },
      {
        "test_lines": [
          487,
          508
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          53,
          211
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/zouzhiy-excel/src/main/java/io/github/zouzhiy/excel/write/registry/RowFootWriteRegistry.java": {
    "class_content": [
      "/*\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package io.github.zouzhiy.excel.write.registry;\n",
      "\n",
      "import io.github.zouzhiy.excel.exceptions.ExcelException;\n",
      "import io.github.zouzhiy.excel.metadata.Configuration;\n",
      "import io.github.zouzhiy.excel.write.RowFootWrite;\n",
      "import io.github.zouzhiy.excel.write.defaults.DefaultRowFootWrite;\n",
      "\n",
      "import java.util.Map;\n",
      "import java.util.concurrent.ConcurrentHashMap;\n",
      "\n",
      "/**\n",
      " * @author zouzhiy\n",
      " * @since 2022/7/2\n",
      " */\n",
      "public class RowFootWriteRegistry {\n",
      "\n",
      "    public final static Class<DefaultRowFootWrite> DEFAULT_ROW_FOOT_WRITE_CLASS = DefaultRowFootWrite.class;\n",
      "\n",
      "    private final Configuration configuration;\n",
      "\n",
      "    private final Map<Class<? extends RowFootWrite>, RowFootWrite> rowFootWriteMap = new ConcurrentHashMap<>(16);\n",
      "\n",
      "    public RowFootWriteRegistry(Configuration configuration) {\n",
      "        this.configuration = configuration;\n",
      "        register(new DefaultRowFootWrite());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5168\u5bb6\u914d\u7f6e\u4fe1\u606f\n",
      "     *\n",
      "     * @return Configuration\n",
      "     */\n",
      "    public Configuration getConfiguration() {\n",
      "        return configuration;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6ce8\u518c\n",
      "     *\n",
      "     * @param rowFootWrite \u5b9e\u4f8b\n",
      "     */\n",
      "    public void register(RowFootWrite rowFootWrite) {\n",
      "        rowFootWriteMap.put(rowFootWrite.getClass(), rowFootWrite);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6839\u636e class \u67e5\u627e\u5df2\u6ce8\u518c\u7684\u5b9e\u4f8b\u5bf9\u8c61\n",
      "     *\n",
      "     * @param rowFootWriteClazz class\n",
      "     * @return \u8fd4\u56de\u5df2\u6ce8\u518c\u7684\u5b9e\u4f8b\u5bf9\u8c61\n",
      "     */\n",
      "    public RowFootWrite getMappingRowWrite(Class<? extends RowFootWrite> rowFootWriteClazz) {\n",
      "        RowFootWrite rowFootWrite = rowFootWriteMap.get(rowFootWriteClazz);\n",
      "        if (rowFootWrite == null) {\n",
      "            throw new ExcelException(\"\u4e0d\u5b58\u5728\u7684\uff1aRowFootWrite\");\n",
      "        }\n",
      "        return rowFootWrite;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package io.github.zouzhiy.excel.write.registry;\n",
      "\n",
      "import io.github.zouzhiy.excel.exceptions.ExcelException;\n",
      "import io.github.zouzhiy.excel.metadata.Configuration;\n",
      "import io.github.zouzhiy.excel.write.RowFootWrite;\n",
      "import org.junit.jupiter.api.Assertions;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.mockito.Mockito;\n",
      "\n",
      "class RowFootWriteRegistryTest {\n",
      "\n",
      "    @Test\n",
      "    void getConfiguration() {\n",
      "        Configuration configuration = Mockito.mock(Configuration.class);\n",
      "        RowFootWriteRegistry rowFootWriteRegistry = new RowFootWriteRegistry(configuration);\n",
      "        Assertions.assertEquals(rowFootWriteRegistry.getConfiguration(), configuration);\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void getMappingRowRead1() {\n",
      "        Configuration configuration = Mockito.mock(Configuration.class);\n",
      "        RowFootWriteRegistry rowFootWriteRegistry = new RowFootWriteRegistry(configuration);\n",
      "\n",
      "        Assertions.assertNotNull(rowFootWriteRegistry.getMappingRowWrite(RowFootWriteRegistry.DEFAULT_ROW_FOOT_WRITE_CLASS));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void register() {\n",
      "        Configuration configuration = Mockito.mock(Configuration.class);\n",
      "        RowFootWriteRegistry rowFootWriteRegistry = new RowFootWriteRegistry(configuration);\n",
      "        RowFootWrite rowFootWrite = Mockito.mock(RowFootWrite.class);\n",
      "\n",
      "        Assertions.assertThrows(ExcelException.class, () -> rowFootWriteRegistry.getMappingRowWrite(rowFootWrite.getClass()));\n",
      "\n",
      "        rowFootWriteRegistry.register(rowFootWrite);\n",
      "\n",
      "        Assertions.assertEquals(rowFootWriteRegistry.getMappingRowWrite(rowFootWrite.getClass()), rowFootWrite);\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "RowFootWriteRegistry::::getConfiguration()": [
        46,
        48
      ],
      "RowFootWriteRegistry::::register(io.github.zouzhiy.excel.write.RowFootWrite)": [
        55,
        57
      ],
      "RowFootWriteRegistry::::getMappingRowWrite(java.lang.Class<? extends io.github.zouzhiy.excel.write.RowFootWrite>)": [
        65,
        71
      ]
    },
    "test_method_lines_dic": {
      "RowFootWriteRegistryTest::::getConfiguration()": [
        12,
        17
      ],
      "RowFootWriteRegistryTest::::getMappingRowRead1()": [
        20,
        26
      ],
      "RowFootWriteRegistryTest::::register()": [
        28,
        39
      ]
    },
    "reverse_method_lines_dic": {
      "46": "RowFootWriteRegistry::::getConfiguration()",
      "47": "RowFootWriteRegistry::::getConfiguration()",
      "48": "RowFootWriteRegistry::::getConfiguration()",
      "55": "RowFootWriteRegistry::::register(io.github.zouzhiy.excel.write.RowFootWrite)",
      "56": "RowFootWriteRegistry::::register(io.github.zouzhiy.excel.write.RowFootWrite)",
      "57": "RowFootWriteRegistry::::register(io.github.zouzhiy.excel.write.RowFootWrite)",
      "65": "RowFootWriteRegistry::::getMappingRowWrite(java.lang.Class<? extends io.github.zouzhiy.excel.write.RowFootWrite>)",
      "66": "RowFootWriteRegistry::::getMappingRowWrite(java.lang.Class<? extends io.github.zouzhiy.excel.write.RowFootWrite>)",
      "67": "RowFootWriteRegistry::::getMappingRowWrite(java.lang.Class<? extends io.github.zouzhiy.excel.write.RowFootWrite>)",
      "68": "RowFootWriteRegistry::::getMappingRowWrite(java.lang.Class<? extends io.github.zouzhiy.excel.write.RowFootWrite>)",
      "69": "RowFootWriteRegistry::::getMappingRowWrite(java.lang.Class<? extends io.github.zouzhiy.excel.write.RowFootWrite>)",
      "70": "RowFootWriteRegistry::::getMappingRowWrite(java.lang.Class<? extends io.github.zouzhiy.excel.write.RowFootWrite>)",
      "71": "RowFootWriteRegistry::::getMappingRowWrite(java.lang.Class<? extends io.github.zouzhiy.excel.write.RowFootWrite>)"
    },
    "test_reverse_method_lines_dic": {
      "12": "RowFootWriteRegistryTest::::getConfiguration()",
      "13": "RowFootWriteRegistryTest::::getConfiguration()",
      "14": "RowFootWriteRegistryTest::::getConfiguration()",
      "15": "RowFootWriteRegistryTest::::getConfiguration()",
      "16": "RowFootWriteRegistryTest::::getConfiguration()",
      "17": "RowFootWriteRegistryTest::::getConfiguration()",
      "20": "RowFootWriteRegistryTest::::getMappingRowRead1()",
      "21": "RowFootWriteRegistryTest::::getMappingRowRead1()",
      "22": "RowFootWriteRegistryTest::::getMappingRowRead1()",
      "23": "RowFootWriteRegistryTest::::getMappingRowRead1()",
      "24": "RowFootWriteRegistryTest::::getMappingRowRead1()",
      "25": "RowFootWriteRegistryTest::::getMappingRowRead1()",
      "26": "RowFootWriteRegistryTest::::getMappingRowRead1()",
      "28": "RowFootWriteRegistryTest::::register()",
      "29": "RowFootWriteRegistryTest::::register()",
      "30": "RowFootWriteRegistryTest::::register()",
      "31": "RowFootWriteRegistryTest::::register()",
      "32": "RowFootWriteRegistryTest::::register()",
      "33": "RowFootWriteRegistryTest::::register()",
      "34": "RowFootWriteRegistryTest::::register()",
      "35": "RowFootWriteRegistryTest::::register()",
      "36": "RowFootWriteRegistryTest::::register()",
      "37": "RowFootWriteRegistryTest::::register()",
      "38": "RowFootWriteRegistryTest::::register()",
      "39": "RowFootWriteRegistryTest::::register()"
    },
    "tests": [
      {
        "test_lines": [
          12,
          17
        ],
        "covered_lines": [
          30,
          34,
          36,
          37,
          38,
          39,
          47,
          56,
          57
        ]
      },
      {
        "test_lines": [
          20,
          26
        ],
        "covered_lines": [
          30,
          34,
          36,
          37,
          38,
          39,
          56,
          57,
          66,
          67,
          70
        ]
      },
      {
        "test_lines": [
          28,
          39
        ],
        "covered_lines": [
          30,
          34,
          36,
          37,
          38,
          39,
          56,
          57,
          66,
          67,
          68,
          70
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/zouzhiy-excel/src/main/java/io/github/zouzhiy/excel/write/registry/RowTitleWriteRegistry.java": {
    "class_content": [
      "/*\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package io.github.zouzhiy.excel.write.registry;\n",
      "\n",
      "import io.github.zouzhiy.excel.exceptions.ExcelException;\n",
      "import io.github.zouzhiy.excel.metadata.Configuration;\n",
      "import io.github.zouzhiy.excel.write.RowTitleWrite;\n",
      "import io.github.zouzhiy.excel.write.defaults.DefaultRowTitleWrite;\n",
      "\n",
      "import java.util.Map;\n",
      "import java.util.concurrent.ConcurrentHashMap;\n",
      "\n",
      "/**\n",
      " * RowTitleWrite \u6ce8\u518c\u7ba1\u7406\n",
      " *\n",
      " * @author zouzhiy\n",
      " * @since 2022/7/2\n",
      " */\n",
      "public class RowTitleWriteRegistry {\n",
      "\n",
      "    public final static Class<DefaultRowTitleWrite> DEFAULT_ROW_TITLE_WRITE_CLASS = DefaultRowTitleWrite.class;\n",
      "\n",
      "    private final Configuration configuration;\n",
      "\n",
      "    private final Map<Class<? extends RowTitleWrite>, RowTitleWrite> rowTitleWriteMap = new ConcurrentHashMap<>(16);\n",
      "\n",
      "    public RowTitleWriteRegistry(Configuration configuration) {\n",
      "        this.configuration = configuration;\n",
      "        register(new DefaultRowTitleWrite());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5168\u5bb6\u914d\u7f6e\u4fe1\u606f\n",
      "     *\n",
      "     * @return Configuration\n",
      "     */\n",
      "    public Configuration getConfiguration() {\n",
      "        return configuration;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6ce8\u518c\n",
      "     *\n",
      "     * @param rowTitleWrite \u5b9e\u4f8b\n",
      "     */\n",
      "    public void register(RowTitleWrite rowTitleWrite) {\n",
      "        rowTitleWriteMap.put(rowTitleWrite.getClass(), rowTitleWrite);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6839\u636e class \u67e5\u627e\u5df2\u6ce8\u518c\u7684\u5b9e\u4f8b\u5bf9\u8c61\n",
      "     *\n",
      "     * @param rowTitleWriteClazz class\n",
      "     * @return \u8fd4\u56de\u5df2\u6ce8\u518c\u7684\u5b9e\u4f8b\u5bf9\u8c61\n",
      "     */\n",
      "    public RowTitleWrite getMappingRowWrite(Class<? extends RowTitleWrite> rowTitleWriteClazz) {\n",
      "        RowTitleWrite rowTitleWrite = rowTitleWriteMap.get(rowTitleWriteClazz);\n",
      "        if (rowTitleWrite == null) {\n",
      "            throw new ExcelException(\"\u4e0d\u5b58\u5728\u7684\uff1aRowTitleWrite\");\n",
      "        }\n",
      "        return rowTitleWrite;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package io.github.zouzhiy.excel.write.registry;\n",
      "\n",
      "import io.github.zouzhiy.excel.exceptions.ExcelException;\n",
      "import io.github.zouzhiy.excel.metadata.Configuration;\n",
      "import io.github.zouzhiy.excel.write.RowTitleWrite;\n",
      "import org.junit.jupiter.api.Assertions;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.mockito.Mockito;\n",
      "\n",
      "class RowTitleWriteRegistryTest {\n",
      "\n",
      "    @Test\n",
      "    void getConfiguration() {\n",
      "        Configuration configuration = Mockito.mock(Configuration.class);\n",
      "        RowTitleWriteRegistry rowTitleWriteRegistry = new RowTitleWriteRegistry(configuration);\n",
      "        Assertions.assertEquals(rowTitleWriteRegistry.getConfiguration(), configuration);\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void getMappingRowRead1() {\n",
      "        Configuration configuration = Mockito.mock(Configuration.class);\n",
      "        RowTitleWriteRegistry rowTitleWriteRegistry = new RowTitleWriteRegistry(configuration);\n",
      "\n",
      "        Assertions.assertNotNull(rowTitleWriteRegistry.getMappingRowWrite(RowTitleWriteRegistry.DEFAULT_ROW_TITLE_WRITE_CLASS));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void register() {\n",
      "        Configuration configuration = Mockito.mock(Configuration.class);\n",
      "        RowTitleWriteRegistry rowTitleWriteRegistry = new RowTitleWriteRegistry(configuration);\n",
      "        RowTitleWrite rowTitleWrite = Mockito.mock(RowTitleWrite.class);\n",
      "\n",
      "        Assertions.assertThrows(ExcelException.class, () -> rowTitleWriteRegistry.getMappingRowWrite(rowTitleWrite.getClass()));\n",
      "\n",
      "        rowTitleWriteRegistry.register(rowTitleWrite);\n",
      "\n",
      "        Assertions.assertEquals(rowTitleWriteRegistry.getMappingRowWrite(rowTitleWrite.getClass()), rowTitleWrite);\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "RowTitleWriteRegistry::::getConfiguration()": [
        48,
        50
      ],
      "RowTitleWriteRegistry::::register(io.github.zouzhiy.excel.write.RowTitleWrite)": [
        57,
        59
      ],
      "RowTitleWriteRegistry::::getMappingRowWrite(java.lang.Class<? extends io.github.zouzhiy.excel.write.RowTitleWrite>)": [
        67,
        73
      ]
    },
    "test_method_lines_dic": {
      "RowTitleWriteRegistryTest::::getConfiguration()": [
        12,
        17
      ],
      "RowTitleWriteRegistryTest::::getMappingRowRead1()": [
        20,
        26
      ],
      "RowTitleWriteRegistryTest::::register()": [
        28,
        39
      ]
    },
    "reverse_method_lines_dic": {
      "48": "RowTitleWriteRegistry::::getConfiguration()",
      "49": "RowTitleWriteRegistry::::getConfiguration()",
      "50": "RowTitleWriteRegistry::::getConfiguration()",
      "57": "RowTitleWriteRegistry::::register(io.github.zouzhiy.excel.write.RowTitleWrite)",
      "58": "RowTitleWriteRegistry::::register(io.github.zouzhiy.excel.write.RowTitleWrite)",
      "59": "RowTitleWriteRegistry::::register(io.github.zouzhiy.excel.write.RowTitleWrite)",
      "67": "RowTitleWriteRegistry::::getMappingRowWrite(java.lang.Class<? extends io.github.zouzhiy.excel.write.RowTitleWrite>)",
      "68": "RowTitleWriteRegistry::::getMappingRowWrite(java.lang.Class<? extends io.github.zouzhiy.excel.write.RowTitleWrite>)",
      "69": "RowTitleWriteRegistry::::getMappingRowWrite(java.lang.Class<? extends io.github.zouzhiy.excel.write.RowTitleWrite>)",
      "70": "RowTitleWriteRegistry::::getMappingRowWrite(java.lang.Class<? extends io.github.zouzhiy.excel.write.RowTitleWrite>)",
      "71": "RowTitleWriteRegistry::::getMappingRowWrite(java.lang.Class<? extends io.github.zouzhiy.excel.write.RowTitleWrite>)",
      "72": "RowTitleWriteRegistry::::getMappingRowWrite(java.lang.Class<? extends io.github.zouzhiy.excel.write.RowTitleWrite>)",
      "73": "RowTitleWriteRegistry::::getMappingRowWrite(java.lang.Class<? extends io.github.zouzhiy.excel.write.RowTitleWrite>)"
    },
    "test_reverse_method_lines_dic": {
      "12": "RowTitleWriteRegistryTest::::getConfiguration()",
      "13": "RowTitleWriteRegistryTest::::getConfiguration()",
      "14": "RowTitleWriteRegistryTest::::getConfiguration()",
      "15": "RowTitleWriteRegistryTest::::getConfiguration()",
      "16": "RowTitleWriteRegistryTest::::getConfiguration()",
      "17": "RowTitleWriteRegistryTest::::getConfiguration()",
      "20": "RowTitleWriteRegistryTest::::getMappingRowRead1()",
      "21": "RowTitleWriteRegistryTest::::getMappingRowRead1()",
      "22": "RowTitleWriteRegistryTest::::getMappingRowRead1()",
      "23": "RowTitleWriteRegistryTest::::getMappingRowRead1()",
      "24": "RowTitleWriteRegistryTest::::getMappingRowRead1()",
      "25": "RowTitleWriteRegistryTest::::getMappingRowRead1()",
      "26": "RowTitleWriteRegistryTest::::getMappingRowRead1()",
      "28": "RowTitleWriteRegistryTest::::register()",
      "29": "RowTitleWriteRegistryTest::::register()",
      "30": "RowTitleWriteRegistryTest::::register()",
      "31": "RowTitleWriteRegistryTest::::register()",
      "32": "RowTitleWriteRegistryTest::::register()",
      "33": "RowTitleWriteRegistryTest::::register()",
      "34": "RowTitleWriteRegistryTest::::register()",
      "35": "RowTitleWriteRegistryTest::::register()",
      "36": "RowTitleWriteRegistryTest::::register()",
      "37": "RowTitleWriteRegistryTest::::register()",
      "38": "RowTitleWriteRegistryTest::::register()",
      "39": "RowTitleWriteRegistryTest::::register()"
    },
    "tests": [
      {
        "test_lines": [
          12,
          17
        ],
        "covered_lines": [
          32,
          36,
          38,
          39,
          40,
          41,
          49,
          58,
          59
        ]
      },
      {
        "test_lines": [
          20,
          26
        ],
        "covered_lines": [
          32,
          36,
          38,
          39,
          40,
          41,
          58,
          59,
          68,
          69,
          72
        ]
      },
      {
        "test_lines": [
          28,
          39
        ],
        "covered_lines": [
          32,
          36,
          38,
          39,
          40,
          41,
          58,
          59,
          68,
          69,
          70,
          72
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/zouzhiy-excel/src/main/java/io/github/zouzhiy/excel/write/registry/RowHeadWriteRegistry.java": {
    "class_content": [
      "/*\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package io.github.zouzhiy.excel.write.registry;\n",
      "\n",
      "import io.github.zouzhiy.excel.exceptions.ExcelException;\n",
      "import io.github.zouzhiy.excel.metadata.Configuration;\n",
      "import io.github.zouzhiy.excel.write.RowHeadWrite;\n",
      "import io.github.zouzhiy.excel.write.defaults.DefaultRowHeadWrite;\n",
      "\n",
      "import java.util.Map;\n",
      "import java.util.concurrent.ConcurrentHashMap;\n",
      "\n",
      "/**\n",
      " * RowHeadWrite \u6ce8\u518c\u7ba1\u7406\n",
      " *\n",
      " * @author zouzhiy\n",
      " * @since 2022/7/2\n",
      " */\n",
      "public class RowHeadWriteRegistry {\n",
      "\n",
      "    public final static Class<DefaultRowHeadWrite> DEFAULT_ROW_HEAD_WRITE_CLASS = DefaultRowHeadWrite.class;\n",
      "\n",
      "    private final Configuration configuration;\n",
      "\n",
      "    private final Map<Class<? extends RowHeadWrite>, RowHeadWrite> rowHeadWriteMap = new ConcurrentHashMap<>(16);\n",
      "\n",
      "    public RowHeadWriteRegistry(Configuration configuration) {\n",
      "        this.configuration = configuration;\n",
      "        register(new DefaultRowHeadWrite());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5168\u5bb6\u914d\u7f6e\u4fe1\u606f\n",
      "     *\n",
      "     * @return Configuration\n",
      "     */\n",
      "    public Configuration getConfiguration() {\n",
      "        return configuration;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6ce8\u518c\n",
      "     *\n",
      "     * @param rowHeadWrite \u5b9e\u4f8b\n",
      "     */\n",
      "    public void register(RowHeadWrite rowHeadWrite) {\n",
      "        rowHeadWriteMap.put(rowHeadWrite.getClass(), rowHeadWrite);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6839\u636e class \u67e5\u627e\u5df2\u6ce8\u518c\u7684\u5b9e\u4f8b\u5bf9\u8c61\n",
      "     *\n",
      "     * @param rowHeadWriteClazz class\n",
      "     * @return \u8fd4\u56de\u5df2\u6ce8\u518c\u7684\u5b9e\u4f8b\u5bf9\u8c61\n",
      "     */\n",
      "    public RowHeadWrite getMappingRowWrite(Class<? extends RowHeadWrite> rowHeadWriteClazz) {\n",
      "        RowHeadWrite rowHeadWrite = rowHeadWriteMap.get(rowHeadWriteClazz);\n",
      "        if (rowHeadWrite == null) {\n",
      "            throw new ExcelException(\"\u4e0d\u5b58\u5728\u7684\uff1aRowHeadWrite\");\n",
      "        }\n",
      "        return rowHeadWrite;\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package io.github.zouzhiy.excel.write.registry;\n",
      "\n",
      "import io.github.zouzhiy.excel.exceptions.ExcelException;\n",
      "import io.github.zouzhiy.excel.metadata.Configuration;\n",
      "import io.github.zouzhiy.excel.write.RowHeadWrite;\n",
      "import org.junit.jupiter.api.Assertions;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.mockito.Mockito;\n",
      "\n",
      "class RowHeadWriteRegistryTest {\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void getConfiguration() {\n",
      "        Configuration configuration = Mockito.mock(Configuration.class);\n",
      "        RowHeadWriteRegistry rowHeadWriteRegistry = new RowHeadWriteRegistry(configuration);\n",
      "        Assertions.assertEquals(rowHeadWriteRegistry.getConfiguration(), configuration);\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void getMappingRowRead1() {\n",
      "        Configuration configuration = Mockito.mock(Configuration.class);\n",
      "        RowHeadWriteRegistry rowHeadWriteRegistry = new RowHeadWriteRegistry(configuration);\n",
      "\n",
      "        Assertions.assertNotNull(rowHeadWriteRegistry.getMappingRowWrite(RowHeadWriteRegistry.DEFAULT_ROW_HEAD_WRITE_CLASS));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void register() {\n",
      "        Configuration configuration = Mockito.mock(Configuration.class);\n",
      "        RowHeadWriteRegistry rowHeadWriteRegistry = new RowHeadWriteRegistry(configuration);\n",
      "        RowHeadWrite rowHeadWrite = Mockito.mock(RowHeadWrite.class);\n",
      "\n",
      "        Assertions.assertThrows(ExcelException.class, () -> rowHeadWriteRegistry.getMappingRowWrite(rowHeadWrite.getClass()));\n",
      "\n",
      "        rowHeadWriteRegistry.register(rowHeadWrite);\n",
      "\n",
      "        Assertions.assertEquals(rowHeadWriteRegistry.getMappingRowWrite(rowHeadWrite.getClass()), rowHeadWrite);\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "RowHeadWriteRegistry::::getConfiguration()": [
        48,
        50
      ],
      "RowHeadWriteRegistry::::register(io.github.zouzhiy.excel.write.RowHeadWrite)": [
        57,
        59
      ],
      "RowHeadWriteRegistry::::getMappingRowWrite(java.lang.Class<? extends io.github.zouzhiy.excel.write.RowHeadWrite>)": [
        67,
        73
      ]
    },
    "test_method_lines_dic": {
      "RowHeadWriteRegistryTest::::getConfiguration()": [
        13,
        18
      ],
      "RowHeadWriteRegistryTest::::getMappingRowRead1()": [
        21,
        27
      ],
      "RowHeadWriteRegistryTest::::register()": [
        29,
        40
      ]
    },
    "reverse_method_lines_dic": {
      "48": "RowHeadWriteRegistry::::getConfiguration()",
      "49": "RowHeadWriteRegistry::::getConfiguration()",
      "50": "RowHeadWriteRegistry::::getConfiguration()",
      "57": "RowHeadWriteRegistry::::register(io.github.zouzhiy.excel.write.RowHeadWrite)",
      "58": "RowHeadWriteRegistry::::register(io.github.zouzhiy.excel.write.RowHeadWrite)",
      "59": "RowHeadWriteRegistry::::register(io.github.zouzhiy.excel.write.RowHeadWrite)",
      "67": "RowHeadWriteRegistry::::getMappingRowWrite(java.lang.Class<? extends io.github.zouzhiy.excel.write.RowHeadWrite>)",
      "68": "RowHeadWriteRegistry::::getMappingRowWrite(java.lang.Class<? extends io.github.zouzhiy.excel.write.RowHeadWrite>)",
      "69": "RowHeadWriteRegistry::::getMappingRowWrite(java.lang.Class<? extends io.github.zouzhiy.excel.write.RowHeadWrite>)",
      "70": "RowHeadWriteRegistry::::getMappingRowWrite(java.lang.Class<? extends io.github.zouzhiy.excel.write.RowHeadWrite>)",
      "71": "RowHeadWriteRegistry::::getMappingRowWrite(java.lang.Class<? extends io.github.zouzhiy.excel.write.RowHeadWrite>)",
      "72": "RowHeadWriteRegistry::::getMappingRowWrite(java.lang.Class<? extends io.github.zouzhiy.excel.write.RowHeadWrite>)",
      "73": "RowHeadWriteRegistry::::getMappingRowWrite(java.lang.Class<? extends io.github.zouzhiy.excel.write.RowHeadWrite>)"
    },
    "test_reverse_method_lines_dic": {
      "13": "RowHeadWriteRegistryTest::::getConfiguration()",
      "14": "RowHeadWriteRegistryTest::::getConfiguration()",
      "15": "RowHeadWriteRegistryTest::::getConfiguration()",
      "16": "RowHeadWriteRegistryTest::::getConfiguration()",
      "17": "RowHeadWriteRegistryTest::::getConfiguration()",
      "18": "RowHeadWriteRegistryTest::::getConfiguration()",
      "21": "RowHeadWriteRegistryTest::::getMappingRowRead1()",
      "22": "RowHeadWriteRegistryTest::::getMappingRowRead1()",
      "23": "RowHeadWriteRegistryTest::::getMappingRowRead1()",
      "24": "RowHeadWriteRegistryTest::::getMappingRowRead1()",
      "25": "RowHeadWriteRegistryTest::::getMappingRowRead1()",
      "26": "RowHeadWriteRegistryTest::::getMappingRowRead1()",
      "27": "RowHeadWriteRegistryTest::::getMappingRowRead1()",
      "29": "RowHeadWriteRegistryTest::::register()",
      "30": "RowHeadWriteRegistryTest::::register()",
      "31": "RowHeadWriteRegistryTest::::register()",
      "32": "RowHeadWriteRegistryTest::::register()",
      "33": "RowHeadWriteRegistryTest::::register()",
      "34": "RowHeadWriteRegistryTest::::register()",
      "35": "RowHeadWriteRegistryTest::::register()",
      "36": "RowHeadWriteRegistryTest::::register()",
      "37": "RowHeadWriteRegistryTest::::register()",
      "38": "RowHeadWriteRegistryTest::::register()",
      "39": "RowHeadWriteRegistryTest::::register()",
      "40": "RowHeadWriteRegistryTest::::register()"
    },
    "tests": [
      {
        "test_lines": [
          13,
          18
        ],
        "covered_lines": [
          32,
          36,
          38,
          39,
          40,
          41,
          49,
          58,
          59
        ]
      },
      {
        "test_lines": [
          21,
          27
        ],
        "covered_lines": [
          32,
          36,
          38,
          39,
          40,
          41,
          58,
          59,
          68,
          69,
          72
        ]
      },
      {
        "test_lines": [
          29,
          40
        ],
        "covered_lines": [
          32,
          36,
          38,
          39,
          40,
          41,
          58,
          59,
          68,
          69,
          70,
          72
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/zouzhiy-excel/src/main/java/io/github/zouzhiy/excel/builder/ZouzhiyExcelFactoryBuilder.java": {
    "class_content": [
      "/*\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package io.github.zouzhiy.excel.builder;\n",
      "\n",
      "import io.github.zouzhiy.excel.cellstyle.RowStyleRead;\n",
      "import io.github.zouzhiy.excel.handler.CellHandler;\n",
      "import io.github.zouzhiy.excel.ibatis.reflection.ReflectorFactory;\n",
      "import io.github.zouzhiy.excel.ibatis.reflection.factory.ObjectFactory;\n",
      "import io.github.zouzhiy.excel.ibatis.reflection.wrapper.ObjectWrapperFactory;\n",
      "import io.github.zouzhiy.excel.metadata.Configuration;\n",
      "import io.github.zouzhiy.excel.read.RowFootRead;\n",
      "import io.github.zouzhiy.excel.read.RowHeadRead;\n",
      "import io.github.zouzhiy.excel.read.RowRead;\n",
      "import io.github.zouzhiy.excel.read.RowTitleRead;\n",
      "import io.github.zouzhiy.excel.write.RowFootWrite;\n",
      "import io.github.zouzhiy.excel.write.RowHeadWrite;\n",
      "import io.github.zouzhiy.excel.write.RowTitleWrite;\n",
      "import io.github.zouzhiy.excel.write.RowWrite;\n",
      "\n",
      "/**\n",
      " * @author zouzhiy\n",
      " * @since 2022/7/2\n",
      " */\n",
      "public class ZouzhiyExcelFactoryBuilder {\n",
      "\n",
      "    private final Configuration configuration;\n",
      "\n",
      "    private ZouzhiyExcelFactoryBuilder(Configuration configuration) {\n",
      "        this.configuration = configuration;\n",
      "    }\n",
      "\n",
      "    public static ZouzhiyExcelFactoryBuilder builder() {\n",
      "        return builder(new Configuration());\n",
      "    }\n",
      "\n",
      "    public static ZouzhiyExcelFactoryBuilder builder(Configuration configuration) {\n",
      "        return new ZouzhiyExcelFactoryBuilder(configuration);\n",
      "    }\n",
      "\n",
      "    public ZouzhiyExcelFactoryBuilder register(CellHandler<?> cellHandler) {\n",
      "        this.configuration.getCellHandlerRegistry().register(cellHandler);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public ZouzhiyExcelFactoryBuilder register(RowWrite rowWrite) {\n",
      "        if (rowWrite instanceof RowTitleWrite) {\n",
      "            this.register((RowTitleWrite) rowWrite);\n",
      "        }\n",
      "        if (rowWrite instanceof RowHeadWrite) {\n",
      "            this.register((RowHeadWrite) rowWrite);\n",
      "        }\n",
      "        if (rowWrite instanceof RowFootWrite) {\n",
      "            this.register((RowFootWrite) rowWrite);\n",
      "        }\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public ZouzhiyExcelFactoryBuilder register(RowRead rowRead) {\n",
      "        if (rowRead instanceof RowTitleRead) {\n",
      "            this.register((RowTitleRead) rowRead);\n",
      "        }\n",
      "        if (rowRead instanceof RowHeadRead) {\n",
      "            this.register((RowHeadRead) rowRead);\n",
      "        }\n",
      "        if (rowRead instanceof RowFootRead) {\n",
      "            this.register((RowFootRead) rowRead);\n",
      "        }\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public ZouzhiyExcelFactoryBuilder register(RowStyleRead rowStyleRead) {\n",
      "        this.configuration.getRowStyleReadRegistry().register(rowStyleRead);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public ZouzhiyExcelFactoryBuilder setReflectorFactory(ReflectorFactory reflectorFactory) {\n",
      "        this.configuration.setReflectorFactory(reflectorFactory);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public ZouzhiyExcelFactoryBuilder setObjectFactory(ObjectFactory objectFactory) {\n",
      "        this.configuration.setObjectFactory(objectFactory);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public ZouzhiyExcelFactoryBuilder setObjectWrapperFactory(ObjectWrapperFactory objectWrapperFactory) {\n",
      "        this.configuration.setObjectWrapperFactory(objectWrapperFactory);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public ZouzhiyExcelFactoryBuilder setClassCacheEnabled(boolean classCacheEnabled) {\n",
      "        this.configuration.getReflectorFactory().setClassCacheEnabled(classCacheEnabled);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public ZouzhiyExcelFactoryBuilder setConfigCacheEnabled(boolean configCacheEnabled) {\n",
      "        this.configuration.getExcelAnnotationParse().setConfigCacheEnabled(configCacheEnabled);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public ZouzhiyExcelFactory build() {\n",
      "        return new DefaultZouzhiyExcelFactory(configuration);\n",
      "    }\n",
      "\n",
      "\n",
      "    private ZouzhiyExcelFactoryBuilder register(RowTitleWrite rowTitleWrite) {\n",
      "        this.configuration.getRowTitleWriteRegistry().register(rowTitleWrite);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    private ZouzhiyExcelFactoryBuilder register(RowHeadWrite rowHeadWrite) {\n",
      "        this.configuration.getRowHeadWriteRegistry().register(rowHeadWrite);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    private ZouzhiyExcelFactoryBuilder register(RowFootWrite rowFootWrite) {\n",
      "        this.configuration.getRowFootWriteRegistry().register(rowFootWrite);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    private ZouzhiyExcelFactoryBuilder register(RowTitleRead rowTitleRead) {\n",
      "        this.configuration.getRowTitleReadRegistry().register(rowTitleRead);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    private ZouzhiyExcelFactoryBuilder register(RowHeadRead rowHeadRead) {\n",
      "        this.configuration.getRowHeadReadRegistry().register(rowHeadRead);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    private ZouzhiyExcelFactoryBuilder register(RowFootRead rowFootRead) {\n",
      "        this.configuration.getRowFootReadRegistry().register(rowFootRead);\n",
      "        return this;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package io.github.zouzhiy.excel.builder;\n",
      "\n",
      "import io.github.zouzhiy.excel.cellstyle.RowStyleRead;\n",
      "import io.github.zouzhiy.excel.context.RowContext;\n",
      "import io.github.zouzhiy.excel.context.SheetContext;\n",
      "import io.github.zouzhiy.excel.enums.ExcelType;\n",
      "import io.github.zouzhiy.excel.handler.CellHandler;\n",
      "import io.github.zouzhiy.excel.ibatis.reflection.MetaObject;\n",
      "import io.github.zouzhiy.excel.ibatis.reflection.Reflector;\n",
      "import io.github.zouzhiy.excel.ibatis.reflection.ReflectorFactory;\n",
      "import io.github.zouzhiy.excel.ibatis.reflection.factory.ObjectFactory;\n",
      "import io.github.zouzhiy.excel.ibatis.reflection.wrapper.ObjectWrapper;\n",
      "import io.github.zouzhiy.excel.ibatis.reflection.wrapper.ObjectWrapperFactory;\n",
      "import io.github.zouzhiy.excel.metadata.Configuration;\n",
      "import io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig;\n",
      "import io.github.zouzhiy.excel.metadata.result.CellResultSet;\n",
      "import io.github.zouzhiy.excel.metadata.result.CellStyleResultSet;\n",
      "import io.github.zouzhiy.excel.read.RowFootRead;\n",
      "import io.github.zouzhiy.excel.read.RowHeadRead;\n",
      "import io.github.zouzhiy.excel.read.RowRead;\n",
      "import io.github.zouzhiy.excel.read.RowTitleRead;\n",
      "import io.github.zouzhiy.excel.write.RowFootWrite;\n",
      "import io.github.zouzhiy.excel.write.RowHeadWrite;\n",
      "import io.github.zouzhiy.excel.write.RowTitleWrite;\n",
      "import io.github.zouzhiy.excel.write.RowWrite;\n",
      "import org.apache.poi.ss.usermodel.CellStyle;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import java.util.List;\n",
      "\n",
      "/**\n",
      " * @author zouzhiy\n",
      " * @since 2022/7/2\n",
      " */\n",
      "@SuppressWarnings(\"unchecked\")\n",
      "class ZouzhiyExcelFactoryBuilderTest {\n",
      "\n",
      "    @Test\n",
      "    void builder() {\n",
      "\n",
      "        ZouzhiyExcelFactory zouzhiyExcelFactory = ZouzhiyExcelFactoryBuilder.builder().build();\n",
      "        assert zouzhiyExcelFactory != null;\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void builder1() {\n",
      "        Configuration configuration = new Configuration();\n",
      "\n",
      "        ZouzhiyExcelFactory zouzhiyExcelFactory = ZouzhiyExcelFactoryBuilder.builder(configuration).build();\n",
      "        assert zouzhiyExcelFactory.getConfiguration().equals(configuration);\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void registerCellHandler() {\n",
      "        CellHandler<String> cellHandler = new CellHandler<String>() {\n",
      "            @Override\n",
      "            public Class<String> getJavaType() {\n",
      "                return String.class;\n",
      "            }\n",
      "\n",
      "            @Override\n",
      "            public ExcelType getExcelType() {\n",
      "                return ExcelType.STRING;\n",
      "            }\n",
      "\n",
      "            @Override\n",
      "            public String read(SheetContext sheetContext, ExcelFieldConfig excelFieldConfig, CellResultSet cellResultSet) {\n",
      "                return null;\n",
      "            }\n",
      "\n",
      "            @Override\n",
      "            public void write(RowContext rowContext, Integer columnIndex, ExcelFieldConfig excelFieldConfig, String value) {\n",
      "\n",
      "            }\n",
      "        };\n",
      "        ZouzhiyExcelFactory zouzhiyExcelFactory = ZouzhiyExcelFactoryBuilder.builder()\n",
      "                .register(cellHandler)\n",
      "                .build();\n",
      "\n",
      "        Class<? extends CellHandler<String>> cellHandlerClass = (Class<? extends CellHandler<String>>) cellHandler.getClass();\n",
      "        assert zouzhiyExcelFactory.getConfiguration().getCellHandlerRegistry()\n",
      "                .getCellHandler(cellHandlerClass)\n",
      "                .equals(cellHandler);\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void registerRowWrite() {\n",
      "        RowWrite rowWrite = (RowHeadWrite) (sheetContext, dataList) -> 0;\n",
      "        ZouzhiyExcelFactory zouzhiyExcelFactory = ZouzhiyExcelFactoryBuilder.builder()\n",
      "                .register(rowWrite)\n",
      "                .build();\n",
      "\n",
      "        assert zouzhiyExcelFactory.getConfiguration().getRowHeadWriteRegistry()\n",
      "                .getMappingRowWrite((Class<? extends RowHeadWrite>) rowWrite.getClass())\n",
      "                .equals(rowWrite);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void testRegisterRowTitleWrite() {\n",
      "        RowWrite rowWrite = (RowTitleWrite) (sheetContext, dataList) -> 0;\n",
      "        ZouzhiyExcelFactory zouzhiyExcelFactory = ZouzhiyExcelFactoryBuilder.builder()\n",
      "                .register(rowWrite)\n",
      "                .build();\n",
      "\n",
      "        assert zouzhiyExcelFactory.getConfiguration().getRowTitleWriteRegistry()\n",
      "                .getMappingRowWrite((Class<? extends RowTitleWrite>) rowWrite.getClass())\n",
      "                .equals(rowWrite);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void testRegister1() {\n",
      "        RowWrite rowWrite = (RowTitleWrite) (sheetContext, dataList) -> 0;\n",
      "        ZouzhiyExcelFactory zouzhiyExcelFactory = ZouzhiyExcelFactoryBuilder.builder()\n",
      "                .register(rowWrite)\n",
      "                .build();\n",
      "\n",
      "        assert zouzhiyExcelFactory.getConfiguration().getRowTitleWriteRegistry()\n",
      "                .getMappingRowWrite((Class<? extends RowTitleWrite>) rowWrite.getClass())\n",
      "                .equals(rowWrite);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void testRegisterRowFootWrite() {\n",
      "        RowWrite rowWrite = (RowFootWrite) (sheetContext, dataList) -> 0;\n",
      "        ZouzhiyExcelFactory zouzhiyExcelFactory = ZouzhiyExcelFactoryBuilder.builder()\n",
      "                .register(rowWrite)\n",
      "                .build();\n",
      "\n",
      "        assert zouzhiyExcelFactory.getConfiguration().getRowFootWriteRegistry()\n",
      "                .getMappingRowWrite((Class<? extends RowFootWrite>) rowWrite.getClass())\n",
      "                .equals(rowWrite);\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void registerRowRead() {\n",
      "        RowRead rowRead = (RowHeadRead) sheetContext -> null;\n",
      "        ZouzhiyExcelFactory zouzhiyExcelFactory = ZouzhiyExcelFactoryBuilder.builder()\n",
      "                .register(rowRead)\n",
      "                .build();\n",
      "\n",
      "        assert zouzhiyExcelFactory.getConfiguration().getRowHeadReadRegistry()\n",
      "                .getMappingRowRead((Class<? extends RowHeadRead>) rowRead.getClass())\n",
      "                .equals(rowRead);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void testRegisterRowTitleRead() {\n",
      "        RowRead rowRead = (RowTitleRead) sheetContext -> null;\n",
      "        ZouzhiyExcelFactory zouzhiyExcelFactory = ZouzhiyExcelFactoryBuilder.builder()\n",
      "                .register(rowRead)\n",
      "                .build();\n",
      "\n",
      "        assert zouzhiyExcelFactory.getConfiguration().getRowTitleReadRegistry()\n",
      "                .getMappingRowRead((Class<? extends RowTitleRead>) rowRead.getClass())\n",
      "                .equals(rowRead);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void registerRowTitleRead() {\n",
      "        RowRead rowRead = (RowTitleRead) sheetContext -> null;\n",
      "        ZouzhiyExcelFactory zouzhiyExcelFactory = ZouzhiyExcelFactoryBuilder.builder()\n",
      "                .register(rowRead)\n",
      "                .build();\n",
      "\n",
      "        assert zouzhiyExcelFactory.getConfiguration().getRowTitleReadRegistry()\n",
      "                .getMappingRowRead((Class<? extends RowTitleRead>) rowRead.getClass())\n",
      "                .equals(rowRead);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void testRegisterRowFootRead() {\n",
      "        RowRead rowRead = (RowFootRead) sheetContext -> null;\n",
      "        ZouzhiyExcelFactory zouzhiyExcelFactory = ZouzhiyExcelFactoryBuilder.builder()\n",
      "                .register(rowRead)\n",
      "                .build();\n",
      "\n",
      "        assert zouzhiyExcelFactory.getConfiguration().getRowFootReadRegistry()\n",
      "                .getMappingRowRead((Class<? extends RowFootRead>) rowRead.getClass())\n",
      "                .equals(rowRead);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void registerRowStyleRead() {\n",
      "        RowStyleRead rowStyleRead = new RowStyleRead() {\n",
      "\n",
      "            @Override\n",
      "            public CellStyle readTitle(SheetContext sheetContext) {\n",
      "                return null;\n",
      "            }\n",
      "\n",
      "            @Override\n",
      "            public CellStyleResultSet readHead(SheetContext sheetContext) {\n",
      "                return null;\n",
      "            }\n",
      "\n",
      "            @Override\n",
      "            public CellStyleResultSet readData(SheetContext sheetContext) {\n",
      "                return null;\n",
      "            }\n",
      "        };\n",
      "        ZouzhiyExcelFactory zouzhiyExcelFactory = ZouzhiyExcelFactoryBuilder.builder()\n",
      "                .register(rowStyleRead)\n",
      "                .build();\n",
      "\n",
      "        assert zouzhiyExcelFactory.getConfiguration().getRowStyleReadRegistry()\n",
      "                .getMappingRowStyleRead(rowStyleRead.getClass())\n",
      "                .equals(rowStyleRead);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void setReflectorFactory() {\n",
      "        ReflectorFactory reflectorFactory = new ReflectorFactory() {\n",
      "            @Override\n",
      "            public boolean isClassCacheEnabled() {\n",
      "                return false;\n",
      "            }\n",
      "\n",
      "            @Override\n",
      "            public void setClassCacheEnabled(boolean classCacheEnabled) {\n",
      "\n",
      "            }\n",
      "\n",
      "            @Override\n",
      "            public Reflector findForClass(Class<?> type) {\n",
      "                return null;\n",
      "            }\n",
      "        };\n",
      "        ZouzhiyExcelFactory zouzhiyExcelFactory = ZouzhiyExcelFactoryBuilder.builder()\n",
      "                .setReflectorFactory(reflectorFactory)\n",
      "                .build();\n",
      "\n",
      "        assert reflectorFactory.equals(zouzhiyExcelFactory.getConfiguration().getReflectorFactory());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void setObjectFactory() {\n",
      "        ObjectFactory objectFactory = new ObjectFactory() {\n",
      "\n",
      "            @Override\n",
      "            public <T> T create(Class<T> type) {\n",
      "                return null;\n",
      "            }\n",
      "\n",
      "            @Override\n",
      "            public <T> T create(Class<T> type, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {\n",
      "                return null;\n",
      "            }\n",
      "\n",
      "            @Override\n",
      "            public <T> boolean isCollection(Class<T> type) {\n",
      "                return false;\n",
      "            }\n",
      "        };\n",
      "        ZouzhiyExcelFactory zouzhiyExcelFactory = ZouzhiyExcelFactoryBuilder.builder()\n",
      "                .setObjectFactory(objectFactory)\n",
      "                .build();\n",
      "\n",
      "        assert objectFactory.equals(zouzhiyExcelFactory.getConfiguration().getObjectFactory());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void setObjectWrapperFactory() {\n",
      "        ObjectWrapperFactory objectWrapperFactory = new ObjectWrapperFactory() {\n",
      "            @Override\n",
      "            public boolean hasWrapperFor(Object object) {\n",
      "                return false;\n",
      "            }\n",
      "\n",
      "            @Override\n",
      "            public ObjectWrapper getWrapperFor(MetaObject metaObject, Object object) {\n",
      "                return null;\n",
      "            }\n",
      "        };\n",
      "        ZouzhiyExcelFactory zouzhiyExcelFactory = ZouzhiyExcelFactoryBuilder.builder()\n",
      "                .setObjectWrapperFactory(objectWrapperFactory)\n",
      "                .build();\n",
      "\n",
      "        assert objectWrapperFactory.equals(zouzhiyExcelFactory.getConfiguration().getObjectWrapperFactory());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void setClassCacheEnabled() {\n",
      "        ZouzhiyExcelFactory zouzhiyExcelFactory1 = ZouzhiyExcelFactoryBuilder.builder()\n",
      "                .setClassCacheEnabled(false)\n",
      "                .build();\n",
      "        assert !zouzhiyExcelFactory1.getConfiguration().getReflectorFactory().isClassCacheEnabled();\n",
      "\n",
      "        ZouzhiyExcelFactory zouzhiyExcelFactory2 = ZouzhiyExcelFactoryBuilder.builder()\n",
      "                .setClassCacheEnabled(true)\n",
      "                .build();\n",
      "        assert zouzhiyExcelFactory2.getConfiguration().getReflectorFactory().isClassCacheEnabled();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void setConfigCacheEnabled() {\n",
      "\n",
      "        ZouzhiyExcelFactory zouzhiyExcelFactory1 = ZouzhiyExcelFactoryBuilder.builder()\n",
      "                .setConfigCacheEnabled(false)\n",
      "                .build();\n",
      "        assert !zouzhiyExcelFactory1.getConfiguration().getExcelAnnotationParse().isConfigCacheEnabled();\n",
      "\n",
      "        ZouzhiyExcelFactory zouzhiyExcelFactory2 = ZouzhiyExcelFactoryBuilder.builder()\n",
      "                .setConfigCacheEnabled(true)\n",
      "                .build();\n",
      "        assert zouzhiyExcelFactory2.getConfiguration().getExcelAnnotationParse().isConfigCacheEnabled();\n",
      "    }\n",
      "\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "ZouzhiyExcelFactoryBuilder::::builder()": [
        43,
        45
      ],
      "ZouzhiyExcelFactoryBuilder::::builder(io.github.zouzhiy.excel.metadata.Configuration)": [
        47,
        49
      ],
      "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.handler.CellHandler<?>)": [
        51,
        54
      ],
      "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.write.RowWrite)": [
        56,
        67
      ],
      "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.read.RowRead)": [
        69,
        80
      ],
      "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.cellstyle.RowStyleRead)": [
        82,
        85
      ],
      "ZouzhiyExcelFactoryBuilder::::setReflectorFactory(io.github.zouzhiy.excel.ibatis.reflection.ReflectorFactory)": [
        87,
        90
      ],
      "ZouzhiyExcelFactoryBuilder::::setObjectFactory(io.github.zouzhiy.excel.ibatis.reflection.factory.ObjectFactory)": [
        92,
        95
      ],
      "ZouzhiyExcelFactoryBuilder::::setObjectWrapperFactory(io.github.zouzhiy.excel.ibatis.reflection.wrapper.ObjectWrapperFactory)": [
        97,
        100
      ],
      "ZouzhiyExcelFactoryBuilder::::setClassCacheEnabled(boolean)": [
        102,
        105
      ],
      "ZouzhiyExcelFactoryBuilder::::setConfigCacheEnabled(boolean)": [
        107,
        110
      ],
      "ZouzhiyExcelFactoryBuilder::::build()": [
        112,
        114
      ],
      "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.write.RowTitleWrite)": [
        117,
        120
      ],
      "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.write.RowHeadWrite)": [
        122,
        125
      ],
      "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.write.RowFootWrite)": [
        127,
        130
      ],
      "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.read.RowTitleRead)": [
        132,
        135
      ],
      "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.read.RowHeadRead)": [
        137,
        140
      ],
      "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.read.RowFootRead)": [
        142,
        145
      ]
    },
    "test_method_lines_dic": {
      "ZouzhiyExcelFactoryBuilderTest::::builder()": [
        51,
        56
      ],
      "ZouzhiyExcelFactoryBuilderTest::::builder1()": [
        58,
        64
      ],
      "ZouzhiyExcelFactoryBuilderTest::::registerCellHandler()": [
        67,
        99
      ],
      "ZouzhiyExcelFactoryBuilderTest::::registerRowWrite()": [
        101,
        111
      ],
      "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowTitleWrite()": [
        113,
        123
      ],
      "ZouzhiyExcelFactoryBuilderTest::::testRegister1()": [
        125,
        135
      ],
      "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowFootWrite()": [
        137,
        147
      ],
      "ZouzhiyExcelFactoryBuilderTest::::registerRowRead()": [
        150,
        160
      ],
      "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowTitleRead()": [
        162,
        172
      ],
      "ZouzhiyExcelFactoryBuilderTest::::registerRowTitleRead()": [
        174,
        184
      ],
      "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowFootRead()": [
        186,
        196
      ],
      "ZouzhiyExcelFactoryBuilderTest::::registerRowStyleRead()": [
        198,
        224
      ],
      "ZouzhiyExcelFactoryBuilderTest::::setReflectorFactory()": [
        226,
        249
      ],
      "ZouzhiyExcelFactoryBuilderTest::::setObjectFactory()": [
        251,
        275
      ],
      "ZouzhiyExcelFactoryBuilderTest::::setObjectWrapperFactory()": [
        277,
        295
      ],
      "ZouzhiyExcelFactoryBuilderTest::::setClassCacheEnabled()": [
        297,
        308
      ],
      "ZouzhiyExcelFactoryBuilderTest::::setConfigCacheEnabled()": [
        310,
        322
      ]
    },
    "reverse_method_lines_dic": {
      "43": "ZouzhiyExcelFactoryBuilder::::builder()",
      "44": "ZouzhiyExcelFactoryBuilder::::builder()",
      "45": "ZouzhiyExcelFactoryBuilder::::builder()",
      "47": "ZouzhiyExcelFactoryBuilder::::builder(io.github.zouzhiy.excel.metadata.Configuration)",
      "48": "ZouzhiyExcelFactoryBuilder::::builder(io.github.zouzhiy.excel.metadata.Configuration)",
      "49": "ZouzhiyExcelFactoryBuilder::::builder(io.github.zouzhiy.excel.metadata.Configuration)",
      "51": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.handler.CellHandler<?>)",
      "52": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.handler.CellHandler<?>)",
      "53": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.handler.CellHandler<?>)",
      "54": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.handler.CellHandler<?>)",
      "56": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.write.RowWrite)",
      "57": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.write.RowWrite)",
      "58": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.write.RowWrite)",
      "59": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.write.RowWrite)",
      "60": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.write.RowWrite)",
      "61": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.write.RowWrite)",
      "62": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.write.RowWrite)",
      "63": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.write.RowWrite)",
      "64": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.write.RowWrite)",
      "65": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.write.RowWrite)",
      "66": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.write.RowWrite)",
      "67": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.write.RowWrite)",
      "69": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.read.RowRead)",
      "70": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.read.RowRead)",
      "71": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.read.RowRead)",
      "72": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.read.RowRead)",
      "73": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.read.RowRead)",
      "74": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.read.RowRead)",
      "75": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.read.RowRead)",
      "76": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.read.RowRead)",
      "77": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.read.RowRead)",
      "78": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.read.RowRead)",
      "79": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.read.RowRead)",
      "80": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.read.RowRead)",
      "82": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.cellstyle.RowStyleRead)",
      "83": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.cellstyle.RowStyleRead)",
      "84": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.cellstyle.RowStyleRead)",
      "85": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.cellstyle.RowStyleRead)",
      "87": "ZouzhiyExcelFactoryBuilder::::setReflectorFactory(io.github.zouzhiy.excel.ibatis.reflection.ReflectorFactory)",
      "88": "ZouzhiyExcelFactoryBuilder::::setReflectorFactory(io.github.zouzhiy.excel.ibatis.reflection.ReflectorFactory)",
      "89": "ZouzhiyExcelFactoryBuilder::::setReflectorFactory(io.github.zouzhiy.excel.ibatis.reflection.ReflectorFactory)",
      "90": "ZouzhiyExcelFactoryBuilder::::setReflectorFactory(io.github.zouzhiy.excel.ibatis.reflection.ReflectorFactory)",
      "92": "ZouzhiyExcelFactoryBuilder::::setObjectFactory(io.github.zouzhiy.excel.ibatis.reflection.factory.ObjectFactory)",
      "93": "ZouzhiyExcelFactoryBuilder::::setObjectFactory(io.github.zouzhiy.excel.ibatis.reflection.factory.ObjectFactory)",
      "94": "ZouzhiyExcelFactoryBuilder::::setObjectFactory(io.github.zouzhiy.excel.ibatis.reflection.factory.ObjectFactory)",
      "95": "ZouzhiyExcelFactoryBuilder::::setObjectFactory(io.github.zouzhiy.excel.ibatis.reflection.factory.ObjectFactory)",
      "97": "ZouzhiyExcelFactoryBuilder::::setObjectWrapperFactory(io.github.zouzhiy.excel.ibatis.reflection.wrapper.ObjectWrapperFactory)",
      "98": "ZouzhiyExcelFactoryBuilder::::setObjectWrapperFactory(io.github.zouzhiy.excel.ibatis.reflection.wrapper.ObjectWrapperFactory)",
      "99": "ZouzhiyExcelFactoryBuilder::::setObjectWrapperFactory(io.github.zouzhiy.excel.ibatis.reflection.wrapper.ObjectWrapperFactory)",
      "100": "ZouzhiyExcelFactoryBuilder::::setObjectWrapperFactory(io.github.zouzhiy.excel.ibatis.reflection.wrapper.ObjectWrapperFactory)",
      "102": "ZouzhiyExcelFactoryBuilder::::setClassCacheEnabled(boolean)",
      "103": "ZouzhiyExcelFactoryBuilder::::setClassCacheEnabled(boolean)",
      "104": "ZouzhiyExcelFactoryBuilder::::setClassCacheEnabled(boolean)",
      "105": "ZouzhiyExcelFactoryBuilder::::setClassCacheEnabled(boolean)",
      "107": "ZouzhiyExcelFactoryBuilder::::setConfigCacheEnabled(boolean)",
      "108": "ZouzhiyExcelFactoryBuilder::::setConfigCacheEnabled(boolean)",
      "109": "ZouzhiyExcelFactoryBuilder::::setConfigCacheEnabled(boolean)",
      "110": "ZouzhiyExcelFactoryBuilder::::setConfigCacheEnabled(boolean)",
      "112": "ZouzhiyExcelFactoryBuilder::::build()",
      "113": "ZouzhiyExcelFactoryBuilder::::build()",
      "114": "ZouzhiyExcelFactoryBuilder::::build()",
      "117": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.write.RowTitleWrite)",
      "118": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.write.RowTitleWrite)",
      "119": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.write.RowTitleWrite)",
      "120": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.write.RowTitleWrite)",
      "122": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.write.RowHeadWrite)",
      "123": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.write.RowHeadWrite)",
      "124": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.write.RowHeadWrite)",
      "125": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.write.RowHeadWrite)",
      "127": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.write.RowFootWrite)",
      "128": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.write.RowFootWrite)",
      "129": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.write.RowFootWrite)",
      "130": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.write.RowFootWrite)",
      "132": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.read.RowTitleRead)",
      "133": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.read.RowTitleRead)",
      "134": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.read.RowTitleRead)",
      "135": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.read.RowTitleRead)",
      "137": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.read.RowHeadRead)",
      "138": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.read.RowHeadRead)",
      "139": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.read.RowHeadRead)",
      "140": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.read.RowHeadRead)",
      "142": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.read.RowFootRead)",
      "143": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.read.RowFootRead)",
      "144": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.read.RowFootRead)",
      "145": "ZouzhiyExcelFactoryBuilder::::register(io.github.zouzhiy.excel.read.RowFootRead)"
    },
    "test_reverse_method_lines_dic": {
      "51": "ZouzhiyExcelFactoryBuilderTest::::builder()",
      "52": "ZouzhiyExcelFactoryBuilderTest::::builder()",
      "53": "ZouzhiyExcelFactoryBuilderTest::::builder()",
      "54": "ZouzhiyExcelFactoryBuilderTest::::builder()",
      "55": "ZouzhiyExcelFactoryBuilderTest::::builder()",
      "56": "ZouzhiyExcelFactoryBuilderTest::::builder()",
      "58": "ZouzhiyExcelFactoryBuilderTest::::builder1()",
      "59": "ZouzhiyExcelFactoryBuilderTest::::builder1()",
      "60": "ZouzhiyExcelFactoryBuilderTest::::builder1()",
      "61": "ZouzhiyExcelFactoryBuilderTest::::builder1()",
      "62": "ZouzhiyExcelFactoryBuilderTest::::builder1()",
      "63": "ZouzhiyExcelFactoryBuilderTest::::builder1()",
      "64": "ZouzhiyExcelFactoryBuilderTest::::builder1()",
      "67": "ZouzhiyExcelFactoryBuilderTest::::registerCellHandler()",
      "68": "ZouzhiyExcelFactoryBuilderTest::::registerCellHandler()",
      "69": "ZouzhiyExcelFactoryBuilderTest::::registerCellHandler()",
      "70": "ZouzhiyExcelFactoryBuilderTest::::registerCellHandler()",
      "71": "ZouzhiyExcelFactoryBuilderTest::::registerCellHandler()",
      "72": "ZouzhiyExcelFactoryBuilderTest::::registerCellHandler()",
      "73": "ZouzhiyExcelFactoryBuilderTest::::registerCellHandler()",
      "74": "ZouzhiyExcelFactoryBuilderTest::::registerCellHandler()",
      "75": "ZouzhiyExcelFactoryBuilderTest::::registerCellHandler()",
      "76": "ZouzhiyExcelFactoryBuilderTest::::registerCellHandler()",
      "77": "ZouzhiyExcelFactoryBuilderTest::::registerCellHandler()",
      "78": "ZouzhiyExcelFactoryBuilderTest::::registerCellHandler()",
      "79": "ZouzhiyExcelFactoryBuilderTest::::registerCellHandler()",
      "80": "ZouzhiyExcelFactoryBuilderTest::::registerCellHandler()",
      "81": "ZouzhiyExcelFactoryBuilderTest::::registerCellHandler()",
      "82": "ZouzhiyExcelFactoryBuilderTest::::registerCellHandler()",
      "83": "ZouzhiyExcelFactoryBuilderTest::::registerCellHandler()",
      "84": "ZouzhiyExcelFactoryBuilderTest::::registerCellHandler()",
      "85": "ZouzhiyExcelFactoryBuilderTest::::registerCellHandler()",
      "86": "ZouzhiyExcelFactoryBuilderTest::::registerCellHandler()",
      "87": "ZouzhiyExcelFactoryBuilderTest::::registerCellHandler()",
      "88": "ZouzhiyExcelFactoryBuilderTest::::registerCellHandler()",
      "89": "ZouzhiyExcelFactoryBuilderTest::::registerCellHandler()",
      "90": "ZouzhiyExcelFactoryBuilderTest::::registerCellHandler()",
      "91": "ZouzhiyExcelFactoryBuilderTest::::registerCellHandler()",
      "92": "ZouzhiyExcelFactoryBuilderTest::::registerCellHandler()",
      "93": "ZouzhiyExcelFactoryBuilderTest::::registerCellHandler()",
      "94": "ZouzhiyExcelFactoryBuilderTest::::registerCellHandler()",
      "95": "ZouzhiyExcelFactoryBuilderTest::::registerCellHandler()",
      "96": "ZouzhiyExcelFactoryBuilderTest::::registerCellHandler()",
      "97": "ZouzhiyExcelFactoryBuilderTest::::registerCellHandler()",
      "98": "ZouzhiyExcelFactoryBuilderTest::::registerCellHandler()",
      "99": "ZouzhiyExcelFactoryBuilderTest::::registerCellHandler()",
      "101": "ZouzhiyExcelFactoryBuilderTest::::registerRowWrite()",
      "102": "ZouzhiyExcelFactoryBuilderTest::::registerRowWrite()",
      "103": "ZouzhiyExcelFactoryBuilderTest::::registerRowWrite()",
      "104": "ZouzhiyExcelFactoryBuilderTest::::registerRowWrite()",
      "105": "ZouzhiyExcelFactoryBuilderTest::::registerRowWrite()",
      "106": "ZouzhiyExcelFactoryBuilderTest::::registerRowWrite()",
      "107": "ZouzhiyExcelFactoryBuilderTest::::registerRowWrite()",
      "108": "ZouzhiyExcelFactoryBuilderTest::::registerRowWrite()",
      "109": "ZouzhiyExcelFactoryBuilderTest::::registerRowWrite()",
      "110": "ZouzhiyExcelFactoryBuilderTest::::registerRowWrite()",
      "111": "ZouzhiyExcelFactoryBuilderTest::::registerRowWrite()",
      "113": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowTitleWrite()",
      "114": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowTitleWrite()",
      "115": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowTitleWrite()",
      "116": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowTitleWrite()",
      "117": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowTitleWrite()",
      "118": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowTitleWrite()",
      "119": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowTitleWrite()",
      "120": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowTitleWrite()",
      "121": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowTitleWrite()",
      "122": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowTitleWrite()",
      "123": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowTitleWrite()",
      "125": "ZouzhiyExcelFactoryBuilderTest::::testRegister1()",
      "126": "ZouzhiyExcelFactoryBuilderTest::::testRegister1()",
      "127": "ZouzhiyExcelFactoryBuilderTest::::testRegister1()",
      "128": "ZouzhiyExcelFactoryBuilderTest::::testRegister1()",
      "129": "ZouzhiyExcelFactoryBuilderTest::::testRegister1()",
      "130": "ZouzhiyExcelFactoryBuilderTest::::testRegister1()",
      "131": "ZouzhiyExcelFactoryBuilderTest::::testRegister1()",
      "132": "ZouzhiyExcelFactoryBuilderTest::::testRegister1()",
      "133": "ZouzhiyExcelFactoryBuilderTest::::testRegister1()",
      "134": "ZouzhiyExcelFactoryBuilderTest::::testRegister1()",
      "135": "ZouzhiyExcelFactoryBuilderTest::::testRegister1()",
      "137": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowFootWrite()",
      "138": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowFootWrite()",
      "139": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowFootWrite()",
      "140": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowFootWrite()",
      "141": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowFootWrite()",
      "142": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowFootWrite()",
      "143": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowFootWrite()",
      "144": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowFootWrite()",
      "145": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowFootWrite()",
      "146": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowFootWrite()",
      "147": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowFootWrite()",
      "150": "ZouzhiyExcelFactoryBuilderTest::::registerRowRead()",
      "151": "ZouzhiyExcelFactoryBuilderTest::::registerRowRead()",
      "152": "ZouzhiyExcelFactoryBuilderTest::::registerRowRead()",
      "153": "ZouzhiyExcelFactoryBuilderTest::::registerRowRead()",
      "154": "ZouzhiyExcelFactoryBuilderTest::::registerRowRead()",
      "155": "ZouzhiyExcelFactoryBuilderTest::::registerRowRead()",
      "156": "ZouzhiyExcelFactoryBuilderTest::::registerRowRead()",
      "157": "ZouzhiyExcelFactoryBuilderTest::::registerRowRead()",
      "158": "ZouzhiyExcelFactoryBuilderTest::::registerRowRead()",
      "159": "ZouzhiyExcelFactoryBuilderTest::::registerRowRead()",
      "160": "ZouzhiyExcelFactoryBuilderTest::::registerRowRead()",
      "162": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowTitleRead()",
      "163": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowTitleRead()",
      "164": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowTitleRead()",
      "165": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowTitleRead()",
      "166": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowTitleRead()",
      "167": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowTitleRead()",
      "168": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowTitleRead()",
      "169": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowTitleRead()",
      "170": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowTitleRead()",
      "171": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowTitleRead()",
      "172": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowTitleRead()",
      "174": "ZouzhiyExcelFactoryBuilderTest::::registerRowTitleRead()",
      "175": "ZouzhiyExcelFactoryBuilderTest::::registerRowTitleRead()",
      "176": "ZouzhiyExcelFactoryBuilderTest::::registerRowTitleRead()",
      "177": "ZouzhiyExcelFactoryBuilderTest::::registerRowTitleRead()",
      "178": "ZouzhiyExcelFactoryBuilderTest::::registerRowTitleRead()",
      "179": "ZouzhiyExcelFactoryBuilderTest::::registerRowTitleRead()",
      "180": "ZouzhiyExcelFactoryBuilderTest::::registerRowTitleRead()",
      "181": "ZouzhiyExcelFactoryBuilderTest::::registerRowTitleRead()",
      "182": "ZouzhiyExcelFactoryBuilderTest::::registerRowTitleRead()",
      "183": "ZouzhiyExcelFactoryBuilderTest::::registerRowTitleRead()",
      "184": "ZouzhiyExcelFactoryBuilderTest::::registerRowTitleRead()",
      "186": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowFootRead()",
      "187": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowFootRead()",
      "188": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowFootRead()",
      "189": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowFootRead()",
      "190": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowFootRead()",
      "191": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowFootRead()",
      "192": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowFootRead()",
      "193": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowFootRead()",
      "194": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowFootRead()",
      "195": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowFootRead()",
      "196": "ZouzhiyExcelFactoryBuilderTest::::testRegisterRowFootRead()",
      "198": "ZouzhiyExcelFactoryBuilderTest::::registerRowStyleRead()",
      "199": "ZouzhiyExcelFactoryBuilderTest::::registerRowStyleRead()",
      "200": "ZouzhiyExcelFactoryBuilderTest::::registerRowStyleRead()",
      "201": "ZouzhiyExcelFactoryBuilderTest::::registerRowStyleRead()",
      "202": "ZouzhiyExcelFactoryBuilderTest::::registerRowStyleRead()",
      "203": "ZouzhiyExcelFactoryBuilderTest::::registerRowStyleRead()",
      "204": "ZouzhiyExcelFactoryBuilderTest::::registerRowStyleRead()",
      "205": "ZouzhiyExcelFactoryBuilderTest::::registerRowStyleRead()",
      "206": "ZouzhiyExcelFactoryBuilderTest::::registerRowStyleRead()",
      "207": "ZouzhiyExcelFactoryBuilderTest::::registerRowStyleRead()",
      "208": "ZouzhiyExcelFactoryBuilderTest::::registerRowStyleRead()",
      "209": "ZouzhiyExcelFactoryBuilderTest::::registerRowStyleRead()",
      "210": "ZouzhiyExcelFactoryBuilderTest::::registerRowStyleRead()",
      "211": "ZouzhiyExcelFactoryBuilderTest::::registerRowStyleRead()",
      "212": "ZouzhiyExcelFactoryBuilderTest::::registerRowStyleRead()",
      "213": "ZouzhiyExcelFactoryBuilderTest::::registerRowStyleRead()",
      "214": "ZouzhiyExcelFactoryBuilderTest::::registerRowStyleRead()",
      "215": "ZouzhiyExcelFactoryBuilderTest::::registerRowStyleRead()",
      "216": "ZouzhiyExcelFactoryBuilderTest::::registerRowStyleRead()",
      "217": "ZouzhiyExcelFactoryBuilderTest::::registerRowStyleRead()",
      "218": "ZouzhiyExcelFactoryBuilderTest::::registerRowStyleRead()",
      "219": "ZouzhiyExcelFactoryBuilderTest::::registerRowStyleRead()",
      "220": "ZouzhiyExcelFactoryBuilderTest::::registerRowStyleRead()",
      "221": "ZouzhiyExcelFactoryBuilderTest::::registerRowStyleRead()",
      "222": "ZouzhiyExcelFactoryBuilderTest::::registerRowStyleRead()",
      "223": "ZouzhiyExcelFactoryBuilderTest::::registerRowStyleRead()",
      "224": "ZouzhiyExcelFactoryBuilderTest::::registerRowStyleRead()",
      "226": "ZouzhiyExcelFactoryBuilderTest::::setReflectorFactory()",
      "227": "ZouzhiyExcelFactoryBuilderTest::::setReflectorFactory()",
      "228": "ZouzhiyExcelFactoryBuilderTest::::setReflectorFactory()",
      "229": "ZouzhiyExcelFactoryBuilderTest::::setReflectorFactory()",
      "230": "ZouzhiyExcelFactoryBuilderTest::::setReflectorFactory()",
      "231": "ZouzhiyExcelFactoryBuilderTest::::setReflectorFactory()",
      "232": "ZouzhiyExcelFactoryBuilderTest::::setReflectorFactory()",
      "233": "ZouzhiyExcelFactoryBuilderTest::::setReflectorFactory()",
      "234": "ZouzhiyExcelFactoryBuilderTest::::setReflectorFactory()",
      "235": "ZouzhiyExcelFactoryBuilderTest::::setReflectorFactory()",
      "236": "ZouzhiyExcelFactoryBuilderTest::::setReflectorFactory()",
      "237": "ZouzhiyExcelFactoryBuilderTest::::setReflectorFactory()",
      "238": "ZouzhiyExcelFactoryBuilderTest::::setReflectorFactory()",
      "239": "ZouzhiyExcelFactoryBuilderTest::::setReflectorFactory()",
      "240": "ZouzhiyExcelFactoryBuilderTest::::setReflectorFactory()",
      "241": "ZouzhiyExcelFactoryBuilderTest::::setReflectorFactory()",
      "242": "ZouzhiyExcelFactoryBuilderTest::::setReflectorFactory()",
      "243": "ZouzhiyExcelFactoryBuilderTest::::setReflectorFactory()",
      "244": "ZouzhiyExcelFactoryBuilderTest::::setReflectorFactory()",
      "245": "ZouzhiyExcelFactoryBuilderTest::::setReflectorFactory()",
      "246": "ZouzhiyExcelFactoryBuilderTest::::setReflectorFactory()",
      "247": "ZouzhiyExcelFactoryBuilderTest::::setReflectorFactory()",
      "248": "ZouzhiyExcelFactoryBuilderTest::::setReflectorFactory()",
      "249": "ZouzhiyExcelFactoryBuilderTest::::setReflectorFactory()",
      "251": "ZouzhiyExcelFactoryBuilderTest::::setObjectFactory()",
      "252": "ZouzhiyExcelFactoryBuilderTest::::setObjectFactory()",
      "253": "ZouzhiyExcelFactoryBuilderTest::::setObjectFactory()",
      "254": "ZouzhiyExcelFactoryBuilderTest::::setObjectFactory()",
      "255": "ZouzhiyExcelFactoryBuilderTest::::setObjectFactory()",
      "256": "ZouzhiyExcelFactoryBuilderTest::::setObjectFactory()",
      "257": "ZouzhiyExcelFactoryBuilderTest::::setObjectFactory()",
      "258": "ZouzhiyExcelFactoryBuilderTest::::setObjectFactory()",
      "259": "ZouzhiyExcelFactoryBuilderTest::::setObjectFactory()",
      "260": "ZouzhiyExcelFactoryBuilderTest::::setObjectFactory()",
      "261": "ZouzhiyExcelFactoryBuilderTest::::setObjectFactory()",
      "262": "ZouzhiyExcelFactoryBuilderTest::::setObjectFactory()",
      "263": "ZouzhiyExcelFactoryBuilderTest::::setObjectFactory()",
      "264": "ZouzhiyExcelFactoryBuilderTest::::setObjectFactory()",
      "265": "ZouzhiyExcelFactoryBuilderTest::::setObjectFactory()",
      "266": "ZouzhiyExcelFactoryBuilderTest::::setObjectFactory()",
      "267": "ZouzhiyExcelFactoryBuilderTest::::setObjectFactory()",
      "268": "ZouzhiyExcelFactoryBuilderTest::::setObjectFactory()",
      "269": "ZouzhiyExcelFactoryBuilderTest::::setObjectFactory()",
      "270": "ZouzhiyExcelFactoryBuilderTest::::setObjectFactory()",
      "271": "ZouzhiyExcelFactoryBuilderTest::::setObjectFactory()",
      "272": "ZouzhiyExcelFactoryBuilderTest::::setObjectFactory()",
      "273": "ZouzhiyExcelFactoryBuilderTest::::setObjectFactory()",
      "274": "ZouzhiyExcelFactoryBuilderTest::::setObjectFactory()",
      "275": "ZouzhiyExcelFactoryBuilderTest::::setObjectFactory()",
      "277": "ZouzhiyExcelFactoryBuilderTest::::setObjectWrapperFactory()",
      "278": "ZouzhiyExcelFactoryBuilderTest::::setObjectWrapperFactory()",
      "279": "ZouzhiyExcelFactoryBuilderTest::::setObjectWrapperFactory()",
      "280": "ZouzhiyExcelFactoryBuilderTest::::setObjectWrapperFactory()",
      "281": "ZouzhiyExcelFactoryBuilderTest::::setObjectWrapperFactory()",
      "282": "ZouzhiyExcelFactoryBuilderTest::::setObjectWrapperFactory()",
      "283": "ZouzhiyExcelFactoryBuilderTest::::setObjectWrapperFactory()",
      "284": "ZouzhiyExcelFactoryBuilderTest::::setObjectWrapperFactory()",
      "285": "ZouzhiyExcelFactoryBuilderTest::::setObjectWrapperFactory()",
      "286": "ZouzhiyExcelFactoryBuilderTest::::setObjectWrapperFactory()",
      "287": "ZouzhiyExcelFactoryBuilderTest::::setObjectWrapperFactory()",
      "288": "ZouzhiyExcelFactoryBuilderTest::::setObjectWrapperFactory()",
      "289": "ZouzhiyExcelFactoryBuilderTest::::setObjectWrapperFactory()",
      "290": "ZouzhiyExcelFactoryBuilderTest::::setObjectWrapperFactory()",
      "291": "ZouzhiyExcelFactoryBuilderTest::::setObjectWrapperFactory()",
      "292": "ZouzhiyExcelFactoryBuilderTest::::setObjectWrapperFactory()",
      "293": "ZouzhiyExcelFactoryBuilderTest::::setObjectWrapperFactory()",
      "294": "ZouzhiyExcelFactoryBuilderTest::::setObjectWrapperFactory()",
      "295": "ZouzhiyExcelFactoryBuilderTest::::setObjectWrapperFactory()",
      "297": "ZouzhiyExcelFactoryBuilderTest::::setClassCacheEnabled()",
      "298": "ZouzhiyExcelFactoryBuilderTest::::setClassCacheEnabled()",
      "299": "ZouzhiyExcelFactoryBuilderTest::::setClassCacheEnabled()",
      "300": "ZouzhiyExcelFactoryBuilderTest::::setClassCacheEnabled()",
      "301": "ZouzhiyExcelFactoryBuilderTest::::setClassCacheEnabled()",
      "302": "ZouzhiyExcelFactoryBuilderTest::::setClassCacheEnabled()",
      "303": "ZouzhiyExcelFactoryBuilderTest::::setClassCacheEnabled()",
      "304": "ZouzhiyExcelFactoryBuilderTest::::setClassCacheEnabled()",
      "305": "ZouzhiyExcelFactoryBuilderTest::::setClassCacheEnabled()",
      "306": "ZouzhiyExcelFactoryBuilderTest::::setClassCacheEnabled()",
      "307": "ZouzhiyExcelFactoryBuilderTest::::setClassCacheEnabled()",
      "308": "ZouzhiyExcelFactoryBuilderTest::::setClassCacheEnabled()",
      "310": "ZouzhiyExcelFactoryBuilderTest::::setConfigCacheEnabled()",
      "311": "ZouzhiyExcelFactoryBuilderTest::::setConfigCacheEnabled()",
      "312": "ZouzhiyExcelFactoryBuilderTest::::setConfigCacheEnabled()",
      "313": "ZouzhiyExcelFactoryBuilderTest::::setConfigCacheEnabled()",
      "314": "ZouzhiyExcelFactoryBuilderTest::::setConfigCacheEnabled()",
      "315": "ZouzhiyExcelFactoryBuilderTest::::setConfigCacheEnabled()",
      "316": "ZouzhiyExcelFactoryBuilderTest::::setConfigCacheEnabled()",
      "317": "ZouzhiyExcelFactoryBuilderTest::::setConfigCacheEnabled()",
      "318": "ZouzhiyExcelFactoryBuilderTest::::setConfigCacheEnabled()",
      "319": "ZouzhiyExcelFactoryBuilderTest::::setConfigCacheEnabled()",
      "320": "ZouzhiyExcelFactoryBuilderTest::::setConfigCacheEnabled()",
      "321": "ZouzhiyExcelFactoryBuilderTest::::setConfigCacheEnabled()",
      "322": "ZouzhiyExcelFactoryBuilderTest::::setConfigCacheEnabled()"
    },
    "tests": [
      {
        "test_lines": [
          51,
          56
        ],
        "covered_lines": [
          39,
          40,
          41,
          44,
          48,
          113
        ]
      },
      {
        "test_lines": [
          58,
          64
        ],
        "covered_lines": [
          39,
          40,
          41,
          48,
          113
        ]
      },
      {
        "test_lines": [
          67,
          99
        ],
        "covered_lines": [
          39,
          40,
          41,
          44,
          48,
          52,
          53,
          113
        ]
      },
      {
        "test_lines": [
          101,
          111
        ],
        "covered_lines": [
          39,
          40,
          41,
          44,
          48,
          57,
          60,
          61,
          63,
          66,
          113,
          123,
          124
        ]
      },
      {
        "test_lines": [
          113,
          123
        ],
        "covered_lines": [
          39,
          40,
          41,
          44,
          48,
          57,
          58,
          60,
          63,
          66,
          113,
          118,
          119
        ]
      },
      {
        "test_lines": [
          125,
          135
        ],
        "covered_lines": [
          39,
          40,
          41,
          44,
          48,
          57,
          58,
          60,
          63,
          66,
          113,
          118,
          119
        ]
      },
      {
        "test_lines": [
          137,
          147
        ],
        "covered_lines": [
          39,
          40,
          41,
          44,
          48,
          57,
          60,
          63,
          64,
          66,
          113,
          128,
          129
        ]
      },
      {
        "test_lines": [
          150,
          160
        ],
        "covered_lines": [
          39,
          40,
          41,
          44,
          48,
          70,
          73,
          74,
          76,
          79,
          113,
          138,
          139
        ]
      },
      {
        "test_lines": [
          162,
          172
        ],
        "covered_lines": [
          39,
          40,
          41,
          44,
          48,
          70,
          71,
          73,
          76,
          79,
          113,
          133,
          134
        ]
      },
      {
        "test_lines": [
          174,
          184
        ],
        "covered_lines": [
          39,
          40,
          41,
          44,
          48,
          70,
          71,
          73,
          76,
          79,
          113,
          133,
          134
        ]
      },
      {
        "test_lines": [
          186,
          196
        ],
        "covered_lines": [
          39,
          40,
          41,
          44,
          48,
          70,
          73,
          76,
          77,
          79,
          113,
          143,
          144
        ]
      },
      {
        "test_lines": [
          198,
          224
        ],
        "covered_lines": [
          39,
          40,
          41,
          44,
          48,
          83,
          84,
          113
        ]
      },
      {
        "test_lines": [
          226,
          249
        ],
        "covered_lines": [
          39,
          40,
          41,
          44,
          48,
          88,
          89,
          113
        ]
      },
      {
        "test_lines": [
          251,
          275
        ],
        "covered_lines": [
          39,
          40,
          41,
          44,
          48,
          93,
          94,
          113
        ]
      },
      {
        "test_lines": [
          277,
          295
        ],
        "covered_lines": [
          39,
          40,
          41,
          44,
          48,
          98,
          99,
          113
        ]
      },
      {
        "test_lines": [
          297,
          308
        ],
        "covered_lines": [
          39,
          40,
          41,
          44,
          48,
          103,
          104,
          113
        ]
      },
      {
        "test_lines": [
          310,
          322
        ],
        "covered_lines": [
          39,
          40,
          41,
          44,
          48,
          108,
          109,
          113
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/zouzhiy-excel/src/main/java/io/github/zouzhiy/excel/builder/WorkbookReadBuilder.java": {
    "class_content": [
      "package io.github.zouzhiy.excel.builder;\n",
      "\n",
      "import io.github.zouzhiy.excel.callback.CellStyleConsumer;\n",
      "import io.github.zouzhiy.excel.callback.SheetReadConsumer;\n",
      "import io.github.zouzhiy.excel.callback.SheetWriteConsumer;\n",
      "import io.github.zouzhiy.excel.metadata.parameter.SheetParameter;\n",
      "import io.github.zouzhiy.excel.metadata.parameter.WorkbookParameter;\n",
      "import io.github.zouzhiy.excel.read.WorkbookRead;\n",
      "\n",
      "import java.io.File;\n",
      "import java.io.InputStream;\n",
      "import java.util.List;\n",
      "\n",
      "/**\n",
      " * @author zouzhiy\n",
      " * @since 2022/7/6\n",
      " */\n",
      "public class WorkbookReadBuilder {\n",
      "\n",
      "    private final ZouzhiyExcelFactory zouzhiyExcelFactory;\n",
      "\n",
      "    private final WorkbookParameter.WorkbookParameterBuilder workbookParameterBuilder;\n",
      "\n",
      "    public WorkbookReadBuilder(ZouzhiyExcelFactory zouzhiyExcelFactory) {\n",
      "        this.zouzhiyExcelFactory = zouzhiyExcelFactory;\n",
      "        workbookParameterBuilder = WorkbookParameter.builder();\n",
      "    }\n",
      "\n",
      "    public WorkbookReadBuilder input(File inputFile) {\n",
      "        workbookParameterBuilder.input(inputFile);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public WorkbookReadBuilder input(InputStream inputStream) {\n",
      "        workbookParameterBuilder.input(inputStream);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public WorkbookReadBuilder cellStyleConsumer(CellStyleConsumer cellStyleConsumer) {\n",
      "        workbookParameterBuilder.cellStyleConsumer(cellStyleConsumer);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public WorkSheetReadBuilder sheet() {\n",
      "        return new WorkSheetReadBuilder().sheet(0);\n",
      "    }\n",
      "\n",
      "    public WorkSheetReadBuilder sheet(String sheetName) {\n",
      "        return new WorkSheetReadBuilder().sheet(sheetName);\n",
      "    }\n",
      "\n",
      "    public WorkSheetReadBuilder sheet(Integer sheetIndex) {\n",
      "        return new WorkSheetReadBuilder().sheet(sheetIndex);\n",
      "    }\n",
      "\n",
      "    public class WorkSheetReadBuilder {\n",
      "\n",
      "        private final SheetParameter.SheetParameterBuilder sheetParameterBuilder;\n",
      "\n",
      "        public WorkSheetReadBuilder() {\n",
      "            this.sheetParameterBuilder = SheetParameter.builder();\n",
      "        }\n",
      "\n",
      "        public WorkSheetReadBuilder sheet(String sheetName) {\n",
      "            sheetParameterBuilder.sheet(sheetName);\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public WorkSheetReadBuilder sheet(Integer sheetIndex) {\n",
      "            sheetParameterBuilder.sheet(sheetIndex);\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public WorkSheetReadBuilder title(String title) {\n",
      "            sheetParameterBuilder.title(title);\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public WorkSheetReadBuilder titleRowStartIndex(Integer titleRowStartIndex) {\n",
      "            sheetParameterBuilder.titleRowStartIndex(titleRowStartIndex);\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public WorkSheetReadBuilder titleColumnStartIndex(Integer titleColumnStartIndex) {\n",
      "            sheetParameterBuilder.titleColumnStartIndex(titleColumnStartIndex);\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public WorkSheetReadBuilder headRowStartIndex(Integer headRowStartIndex) {\n",
      "            sheetParameterBuilder.headRowStartIndex(headRowStartIndex);\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public WorkSheetReadBuilder headColumnStartIndex(Integer headColumnStartIndex) {\n",
      "            sheetParameterBuilder.headColumnStartIndex(headColumnStartIndex);\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public WorkSheetReadBuilder dataRowStartIndex(Integer dataRowStartIndex) {\n",
      "            sheetParameterBuilder.dataRowStartIndex(dataRowStartIndex);\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public WorkSheetReadBuilder dataColumnStartIndex(Integer dataColumnStartIndex) {\n",
      "            sheetParameterBuilder.dataColumnStartIndex(dataColumnStartIndex);\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public WorkSheetReadBuilder sheetReadConsumer(SheetReadConsumer<?> sheetReadConsumer) {\n",
      "            sheetParameterBuilder.sheetReadConsumer(sheetReadConsumer);\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public WorkSheetReadBuilder sheetWriteConsumer(SheetWriteConsumer<?> sheetWriteConsumer) {\n",
      "            sheetParameterBuilder.sheetWriteConsumer(sheetWriteConsumer);\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public <T> List<T> read(Class<T> clazz) {\n",
      "            WorkbookParameter workbookParameter = WorkbookReadBuilder.this.workbookParameterBuilder\n",
      "                    .sheetParameter(this.sheetParameterBuilder.build())\n",
      "                    .build();\n",
      "            WorkbookRead workbookRead = WorkbookReadBuilder.this.zouzhiyExcelFactory.getWorkbookRead(workbookParameter, clazz);\n",
      "            return workbookRead.read(clazz);\n",
      "        }\n",
      "\n",
      "    }\n",
      "\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package io.github.zouzhiy.excel.builder;\n",
      "\n",
      "import io.github.zouzhiy.excel.callback.CellStyleConsumer;\n",
      "import io.github.zouzhiy.excel.callback.SheetReadConsumer;\n",
      "import io.github.zouzhiy.excel.callback.SheetWriteConsumer;\n",
      "import io.github.zouzhiy.excel.metadata.Configuration;\n",
      "import io.github.zouzhiy.excel.metadata.parameter.WorkbookParameter;\n",
      "import io.github.zouzhiy.excel.read.WorkbookRead;\n",
      "import io.github.zouzhiy.excel.support.metadata.DemoDefault;\n",
      "import io.github.zouzhiy.excel.support.utils.TestFileUtils;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import java.io.File;\n",
      "import java.io.InputStream;\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "import java.util.Random;\n",
      "import java.util.function.BiConsumer;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.*;\n",
      "\n",
      "/**\n",
      " * @author zouzhiy\n",
      " * @since 2022/7/9\n",
      " */\n",
      "class WorkbookReadBuilderTest {\n",
      "\n",
      "    private final Random random = new Random(System.currentTimeMillis());\n",
      "\n",
      "    @Test\n",
      "    void input1() {\n",
      "        File file = TestFileUtils.getEmptyXlsFile();\n",
      "\n",
      "        WorkbookReadBuilder workbookReadBuilder = this.getWorkbookReadBuilder((workbookParameter, aClass) -> {\n",
      "            assertTrue(workbookParameter.getCellStyleConsumerList().isEmpty());\n",
      "\n",
      "            assertEquals(file.getName(), workbookParameter.getInputFileName());\n",
      "            assertEquals(file.getAbsolutePath(), workbookParameter.getInputFilePath());\n",
      "            assertEquals(file, workbookParameter.getInputFile());\n",
      "            assertNotNull(workbookParameter.getInputStream());\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetIndex(), 0);\n",
      "            assertNull(workbookParameter.getSheetParameter().getSheetName());\n",
      "\n",
      "            assertNull(workbookParameter.getSheetParameter().getTitle());\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleColumnStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadColumnStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataRowStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataColumnStartIndex(), 0);\n",
      "\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetReadConsumerList().isEmpty());\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetWriteConsumerList().isEmpty());\n",
      "        });\n",
      "        try {\n",
      "            workbookReadBuilder.input(file).sheet().read(DemoDefault.class);\n",
      "            assert false;\n",
      "        } catch (Exception e) {\n",
      "            assert true;\n",
      "        }\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void input2() {\n",
      "        File file = TestFileUtils.writeXlsxFile(TestFileUtils.getInputStream(this.getEmptyXlsxFilePath()));\n",
      "\n",
      "        WorkbookReadBuilder workbookReadBuilder = this.getWorkbookReadBuilder((workbookParameter, aClass) -> {\n",
      "            assertTrue(workbookParameter.getCellStyleConsumerList().isEmpty());\n",
      "\n",
      "            assertEquals(file.getName(), workbookParameter.getInputFileName());\n",
      "            assertEquals(file.getAbsolutePath(), workbookParameter.getInputFilePath());\n",
      "            assertEquals(file, workbookParameter.getInputFile());\n",
      "            assertNotNull(workbookParameter.getInputStream());\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetIndex(), 0);\n",
      "            assertNull(workbookParameter.getSheetParameter().getSheetName());\n",
      "\n",
      "            assertNull(workbookParameter.getSheetParameter().getTitle());\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleColumnStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadColumnStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataRowStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataColumnStartIndex(), 0);\n",
      "\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetReadConsumerList().isEmpty());\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetWriteConsumerList().isEmpty());\n",
      "        });\n",
      "        workbookReadBuilder.input(file).sheet().read(DemoDefault.class);\n",
      "\n",
      "        assert true;\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void input3() {\n",
      "        InputStream inputStream = TestFileUtils.getInputStream(this.getEmptyXlsxFilePath());\n",
      "\n",
      "        WorkbookReadBuilder workbookReadBuilder = this.getWorkbookReadBuilder((workbookParameter, aClass) -> {\n",
      "            assertNull(workbookParameter.getInputFileName());\n",
      "            assertNull(workbookParameter.getInputFilePath());\n",
      "            assertNull(workbookParameter.getInputFile());\n",
      "            assertNotNull(workbookParameter.getInputStream());\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetIndex(), 0);\n",
      "            assertNull(workbookParameter.getSheetParameter().getSheetName());\n",
      "\n",
      "            assertNull(workbookParameter.getSheetParameter().getTitle());\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleColumnStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadColumnStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataRowStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataColumnStartIndex(), 0);\n",
      "\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetReadConsumerList().isEmpty());\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetWriteConsumerList().isEmpty());\n",
      "        });\n",
      "        List<DemoDefault> demoDefaultList = workbookReadBuilder.input(inputStream).sheet().read(DemoDefault.class);\n",
      "        assertTrue(demoDefaultList.isEmpty());\n",
      "        assert true;\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void cellStyleConsumer1() {\n",
      "        CellStyleConsumer cellStyleConsumer = new CellStyleConsumer() {\n",
      "        };\n",
      "        InputStream inputStream = TestFileUtils.getInputStream(this.getEmptyXlsxFilePath());\n",
      "\n",
      "        WorkbookReadBuilder workbookReadBuilder = this.getWorkbookReadBuilder((workbookParameter, aClass) -> {\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetIndex(), 0);\n",
      "            assertNull(workbookParameter.getSheetParameter().getSheetName());\n",
      "            assertNull(workbookParameter.getSheetParameter().getTitle());\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleColumnStartIndex(), 0);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadColumnStartIndex(), 0);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataRowStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataColumnStartIndex(), 0);\n",
      "\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetReadConsumerList().isEmpty());\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetWriteConsumerList().isEmpty());\n",
      "\n",
      "            assertEquals(cellStyleConsumer, workbookParameter.getCellStyleConsumerList().get(0));\n",
      "\n",
      "            assert DemoDefault.class.equals(aClass);\n",
      "\n",
      "        });\n",
      "        workbookReadBuilder.input(inputStream).cellStyleConsumer(cellStyleConsumer).sheet().read(DemoDefault.class);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void cellStyleConsumer2() {\n",
      "        List<CellStyleConsumer> cellStyleConsumerList = new ArrayList<>();\n",
      "        for (int i = 0; i < random.nextInt(30); i++) {\n",
      "            CellStyleConsumer cellStyleConsumer = new CellStyleConsumer() {\n",
      "            };\n",
      "            cellStyleConsumerList.add(cellStyleConsumer);\n",
      "        }\n",
      "\n",
      "        InputStream inputStream = TestFileUtils.getInputStream(this.getEmptyXlsxFilePath());\n",
      "\n",
      "        WorkbookReadBuilder workbookReadBuilder = this.getWorkbookReadBuilder((workbookParameter, aClass) -> {\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetIndex(), 0);\n",
      "            assertNull(workbookParameter.getSheetParameter().getSheetName());\n",
      "            assertNull(workbookParameter.getSheetParameter().getTitle());\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleColumnStartIndex(), 0);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadColumnStartIndex(), 0);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataRowStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataColumnStartIndex(), 0);\n",
      "\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetReadConsumerList().isEmpty());\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetWriteConsumerList().isEmpty());\n",
      "            assert DemoDefault.class.equals(aClass);\n",
      "        });\n",
      "        workbookReadBuilder = workbookReadBuilder.input(inputStream);\n",
      "        cellStyleConsumerList.forEach(workbookReadBuilder::cellStyleConsumer);\n",
      "        List<DemoDefault> demoDefaultList = workbookReadBuilder.sheet().read(DemoDefault.class);\n",
      "        assertTrue(demoDefaultList.isEmpty());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void sheet1() {\n",
      "        InputStream inputStream = TestFileUtils.getInputStream(\"statics/import/empty.xlsx\");\n",
      "\n",
      "        WorkbookReadBuilder workbookReadBuilder = this.getWorkbookReadBuilder((workbookParameter, aClass) -> {\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetIndex(), 0);\n",
      "            assertNull(workbookParameter.getSheetParameter().getSheetName());\n",
      "\n",
      "            assertNull(workbookParameter.getSheetParameter().getTitle());\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleColumnStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadColumnStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataRowStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataColumnStartIndex(), 0);\n",
      "\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetReadConsumerList().isEmpty());\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetWriteConsumerList().isEmpty());\n",
      "        });\n",
      "        List<DemoDefault> demoDefaultList = workbookReadBuilder.input(inputStream).sheet().read(DemoDefault.class);\n",
      "        assertTrue(demoDefaultList.isEmpty());\n",
      "        assert true;\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void sheet2() {\n",
      "        String sheetName = new Random(System.currentTimeMillis()).nextInt(999) + \"name\";\n",
      "        InputStream inputStream = TestFileUtils.getInputStream(this.getEmptyXlsxFilePath());\n",
      "\n",
      "        WorkbookReadBuilder workbookReadBuilder = this.getWorkbookReadBuilder((workbookParameter, aClass) -> {\n",
      "            assertNull(workbookParameter.getSheetParameter().getSheetIndex());\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetName(), sheetName);\n",
      "\n",
      "            assertNull(workbookParameter.getSheetParameter().getTitle());\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleColumnStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadColumnStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataRowStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataColumnStartIndex(), 0);\n",
      "\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetReadConsumerList().isEmpty());\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetWriteConsumerList().isEmpty());\n",
      "        });\n",
      "        List<DemoDefault> demoDefaultList = workbookReadBuilder.input(inputStream).sheet(sheetName).read(DemoDefault.class);\n",
      "        assertTrue(demoDefaultList.isEmpty());\n",
      "        assert true;\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void sheet3() {\n",
      "        Integer sheetIndex = new Random(System.currentTimeMillis()).nextInt(999);\n",
      "        InputStream inputStream = TestFileUtils.getInputStream(this.getEmptyXlsxFilePath());\n",
      "\n",
      "        WorkbookReadBuilder workbookReadBuilder = this.getWorkbookReadBuilder((workbookParameter, aClass) -> {\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetIndex(), sheetIndex);\n",
      "            assertNull(workbookParameter.getSheetParameter().getSheetName());\n",
      "            assertNull(workbookParameter.getSheetParameter().getTitle());\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleColumnStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadColumnStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataRowStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataColumnStartIndex(), 0);\n",
      "\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetReadConsumerList().isEmpty());\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetWriteConsumerList().isEmpty());\n",
      "        });\n",
      "        List<DemoDefault> demoDefaultList = workbookReadBuilder.input(inputStream).sheet(sheetIndex).read(DemoDefault.class);\n",
      "        assertTrue(demoDefaultList.isEmpty());\n",
      "        assert true;\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void title() {\n",
      "        String title = new Random(System.currentTimeMillis()).nextInt(999) + \"title\";\n",
      "\n",
      "        InputStream inputStream = TestFileUtils.getInputStream(this.getEmptyXlsxFilePath());\n",
      "\n",
      "        WorkbookReadBuilder workbookReadBuilder = this.getWorkbookReadBuilder((workbookParameter, aClass) -> {\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetIndex(), 0);\n",
      "            assertNull(workbookParameter.getSheetParameter().getSheetName());\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitle(), title);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleColumnStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadColumnStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataRowStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataColumnStartIndex(), 0);\n",
      "\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetReadConsumerList().isEmpty());\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetWriteConsumerList().isEmpty());\n",
      "        });\n",
      "        List<DemoDefault> demoDefaultList = workbookReadBuilder.input(inputStream).sheet().title(title).read(DemoDefault.class);\n",
      "        assertTrue(demoDefaultList.isEmpty());\n",
      "        assert true;\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void titleRowStartIndex() {\n",
      "        Integer titleRowStartIndex = random.nextInt(88);\n",
      "        InputStream inputStream = TestFileUtils.getInputStream(this.getEmptyXlsxFilePath());\n",
      "\n",
      "        WorkbookReadBuilder workbookReadBuilder = this.getWorkbookReadBuilder((workbookParameter, aClass) -> {\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetIndex(), 0);\n",
      "            assertNull(workbookParameter.getSheetParameter().getSheetName());\n",
      "            assertNull(workbookParameter.getSheetParameter().getTitle());\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleRowStartIndex(), titleRowStartIndex);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleColumnStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadColumnStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataRowStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataColumnStartIndex(), 0);\n",
      "\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetReadConsumerList().isEmpty());\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetWriteConsumerList().isEmpty());\n",
      "        });\n",
      "        try {\n",
      "            workbookReadBuilder.input(inputStream).sheet().titleRowStartIndex(titleRowStartIndex).read(DemoDefault.class);\n",
      "        } catch (Exception ignore) {\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void titleColumnStartIndex() {\n",
      "        Integer titleColumnStartIndex = random.nextInt(88);\n",
      "        InputStream inputStream = TestFileUtils.getInputStream(this.getEmptyXlsxFilePath());\n",
      "\n",
      "        WorkbookReadBuilder workbookReadBuilder = this.getWorkbookReadBuilder((workbookParameter, aClass) -> {\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetIndex(), 0);\n",
      "            assertNull(workbookParameter.getSheetParameter().getSheetName());\n",
      "            assertNull(workbookParameter.getSheetParameter().getTitle());\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleRowStartIndex(), -1);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleColumnStartIndex(), titleColumnStartIndex);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadColumnStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataRowStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataColumnStartIndex(), 0);\n",
      "\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetReadConsumerList().isEmpty());\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetWriteConsumerList().isEmpty());\n",
      "        });\n",
      "        try {\n",
      "            workbookReadBuilder.input(inputStream).sheet().titleColumnStartIndex(titleColumnStartIndex).read(DemoDefault.class);\n",
      "        } catch (Exception ignore) {\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void headRowStartIndex() {\n",
      "        Integer headRowStartIndex = random.nextInt(88);\n",
      "        InputStream inputStream = TestFileUtils.getInputStream(this.getEmptyXlsxFilePath());\n",
      "\n",
      "        WorkbookReadBuilder workbookReadBuilder = this.getWorkbookReadBuilder((workbookParameter, aClass) -> {\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetIndex(), 0);\n",
      "            assertNull(workbookParameter.getSheetParameter().getSheetName());\n",
      "            assertNull(workbookParameter.getSheetParameter().getTitle());\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleRowStartIndex(), headRowStartIndex > 0 ? 0 : -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleColumnStartIndex(), 0);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadRowStartIndex(), headRowStartIndex);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadColumnStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataRowStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataColumnStartIndex(), 0);\n",
      "\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetReadConsumerList().isEmpty());\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetWriteConsumerList().isEmpty());\n",
      "        });\n",
      "        try {\n",
      "            workbookReadBuilder.input(inputStream).sheet().headRowStartIndex(headRowStartIndex).read(DemoDefault.class);\n",
      "        } catch (Exception ignore) {\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void headColumnStartIndex() {\n",
      "        Integer headColumnStartIndex = random.nextInt(88);\n",
      "        InputStream inputStream = TestFileUtils.getInputStream(this.getEmptyXlsxFilePath());\n",
      "\n",
      "        WorkbookReadBuilder workbookReadBuilder = this.getWorkbookReadBuilder((workbookParameter, aClass) -> {\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetIndex(), 0);\n",
      "            assertNull(workbookParameter.getSheetParameter().getSheetName());\n",
      "            assertNull(workbookParameter.getSheetParameter().getTitle());\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleColumnStartIndex(), 0);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadColumnStartIndex(), headColumnStartIndex);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataRowStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataColumnStartIndex(), 0);\n",
      "\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetReadConsumerList().isEmpty());\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetWriteConsumerList().isEmpty());\n",
      "        });\n",
      "        try {\n",
      "            workbookReadBuilder.input(inputStream).sheet().headColumnStartIndex(headColumnStartIndex).read(DemoDefault.class);\n",
      "        } catch (Exception ignore) {\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void dataRowStartIndex() {\n",
      "        for (int i = 0; i < random.nextInt(20); i++) {\n",
      "            final int dataRowStartIndex = i;\n",
      "            InputStream inputStream = TestFileUtils.getInputStream(this.getEmptyXlsxFilePath());\n",
      "\n",
      "            WorkbookReadBuilder workbookReadBuilder = this.getWorkbookReadBuilder((workbookParameter, aClass) -> {\n",
      "                assertEquals(workbookParameter.getSheetParameter().getSheetIndex(), 0);\n",
      "                assertNull(workbookParameter.getSheetParameter().getSheetName());\n",
      "                assertNull(workbookParameter.getSheetParameter().getTitle());\n",
      "\n",
      "                assertEquals(workbookParameter.getSheetParameter().getTitleRowStartIndex(), dataRowStartIndex > 1 ? 0 : -1);\n",
      "                assertEquals(workbookParameter.getSheetParameter().getTitleColumnStartIndex(), 0);\n",
      "\n",
      "                assertEquals(workbookParameter.getSheetParameter().getHeadRowStartIndex(), dataRowStartIndex - 1);\n",
      "                assertEquals(workbookParameter.getSheetParameter().getHeadColumnStartIndex(), 0);\n",
      "\n",
      "                assertEquals(workbookParameter.getSheetParameter().getDataRowStartIndex(), dataRowStartIndex);\n",
      "                assertEquals(workbookParameter.getSheetParameter().getDataColumnStartIndex(), 0);\n",
      "\n",
      "                assertTrue(workbookParameter.getSheetParameter().getSheetReadConsumerList().isEmpty());\n",
      "                assertTrue(workbookParameter.getSheetParameter().getSheetWriteConsumerList().isEmpty());\n",
      "            });\n",
      "            try {\n",
      "                workbookReadBuilder.input(inputStream).sheet().dataRowStartIndex(dataRowStartIndex).read(DemoDefault.class);\n",
      "            } catch (Exception ignore) {\n",
      "            }\n",
      "        }\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void dataColumnStartIndex() {\n",
      "        for (int i = 0; i < random.nextInt(20); i++) {\n",
      "            final int dataColumnStartIndex = i;\n",
      "            InputStream inputStream = TestFileUtils.getInputStream(this.getEmptyXlsxFilePath());\n",
      "\n",
      "            WorkbookReadBuilder workbookReadBuilder = this.getWorkbookReadBuilder((workbookParameter, aClass) -> {\n",
      "                assertEquals(workbookParameter.getSheetParameter().getSheetIndex(), 0);\n",
      "                assertNull(workbookParameter.getSheetParameter().getSheetName());\n",
      "                assertNull(workbookParameter.getSheetParameter().getTitle());\n",
      "\n",
      "                assertEquals(workbookParameter.getSheetParameter().getTitleRowStartIndex(), -1);\n",
      "                assertEquals(workbookParameter.getSheetParameter().getTitleColumnStartIndex(), 0);\n",
      "\n",
      "                assertEquals(workbookParameter.getSheetParameter().getHeadRowStartIndex(), -1);\n",
      "                assertEquals(workbookParameter.getSheetParameter().getHeadColumnStartIndex(), 0);\n",
      "\n",
      "                assertEquals(workbookParameter.getSheetParameter().getDataRowStartIndex(), 0);\n",
      "                assertEquals(workbookParameter.getSheetParameter().getDataColumnStartIndex(), dataColumnStartIndex);\n",
      "\n",
      "                assertTrue(workbookParameter.getSheetParameter().getSheetReadConsumerList().isEmpty());\n",
      "                assertTrue(workbookParameter.getSheetParameter().getSheetWriteConsumerList().isEmpty());\n",
      "                assert DemoDefault.class.equals(aClass);\n",
      "            });\n",
      "            List<DemoDefault> demoDefaultList = workbookReadBuilder.input(inputStream).sheet().dataColumnStartIndex(dataColumnStartIndex).read(DemoDefault.class);\n",
      "            assertTrue(demoDefaultList.isEmpty());\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void sheetReadConsumer1() {\n",
      "\n",
      "        SheetReadConsumer<DemoDefault> sheetReadConsumer = new SheetReadConsumer<DemoDefault>() {\n",
      "        };\n",
      "        InputStream inputStream = TestFileUtils.getInputStream(this.getEmptyXlsxFilePath());\n",
      "\n",
      "        WorkbookReadBuilder workbookReadBuilder = this.getWorkbookReadBuilder((workbookParameter, aClass) -> {\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetIndex(), 0);\n",
      "            assertNull(workbookParameter.getSheetParameter().getSheetName());\n",
      "            assertNull(workbookParameter.getSheetParameter().getTitle());\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleColumnStartIndex(), 0);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadColumnStartIndex(), 0);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataRowStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataColumnStartIndex(), 0);\n",
      "\n",
      "            assertEquals(sheetReadConsumer, workbookParameter.getSheetParameter().getSheetReadConsumerList().get(0));\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetReadConsumerList().size(), 1);\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetWriteConsumerList().isEmpty());\n",
      "            assert DemoDefault.class.equals(aClass);\n",
      "        });\n",
      "        List<DemoDefault> demoDefaultList = workbookReadBuilder.input(inputStream).sheet().sheetReadConsumer(sheetReadConsumer).read(DemoDefault.class);\n",
      "        assertTrue(demoDefaultList.isEmpty());\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void sheetReadConsumer2() {\n",
      "\n",
      "        List<SheetReadConsumer<DemoDefault>> sheetReadConsumerList = new ArrayList<>();\n",
      "        for (int i = 0; i < random.nextInt(30); i++) {\n",
      "            SheetReadConsumer<DemoDefault> sheetReadConsumer = new SheetReadConsumer<DemoDefault>() {\n",
      "            };\n",
      "            sheetReadConsumerList.add(sheetReadConsumer);\n",
      "        }\n",
      "\n",
      "        InputStream inputStream = TestFileUtils.getInputStream(this.getEmptyXlsxFilePath());\n",
      "\n",
      "        WorkbookReadBuilder workbookReadBuilder = this.getWorkbookReadBuilder((workbookParameter, aClass) -> {\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetIndex(), 0);\n",
      "            assertNull(workbookParameter.getSheetParameter().getSheetName());\n",
      "            assertNull(workbookParameter.getSheetParameter().getTitle());\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleColumnStartIndex(), 0);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadColumnStartIndex(), 0);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataRowStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataColumnStartIndex(), 0);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetReadConsumerList().size(), sheetReadConsumerList.size());\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetWriteConsumerList().isEmpty());\n",
      "            assert DemoDefault.class.equals(aClass);\n",
      "        });\n",
      "        WorkbookReadBuilder.WorkSheetReadBuilder workSheetReadBuilder = workbookReadBuilder.input(inputStream).sheet();\n",
      "        sheetReadConsumerList.forEach(workSheetReadBuilder::sheetReadConsumer);\n",
      "        List<DemoDefault> demoDefaultList = workSheetReadBuilder.read(DemoDefault.class);\n",
      "        assertTrue(demoDefaultList.isEmpty());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void sheetWriteConsumer1() {\n",
      "        SheetWriteConsumer<DemoDefault> sheetWriteConsumer = new SheetWriteConsumer<DemoDefault>() {\n",
      "        };\n",
      "        InputStream inputStream = TestFileUtils.getInputStream(this.getEmptyXlsxFilePath());\n",
      "\n",
      "        WorkbookReadBuilder workbookReadBuilder = this.getWorkbookReadBuilder((workbookParameter, aClass) -> {\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetIndex(), 0);\n",
      "            assertNull(workbookParameter.getSheetParameter().getSheetName());\n",
      "            assertNull(workbookParameter.getSheetParameter().getTitle());\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleColumnStartIndex(), 0);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadColumnStartIndex(), 0);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataRowStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataColumnStartIndex(), 0);\n",
      "\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetReadConsumerList().isEmpty());\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetWriteConsumerList().size(), 1);\n",
      "\n",
      "            assertEquals(sheetWriteConsumer, workbookParameter.getSheetParameter().getSheetWriteConsumerList().get(0));\n",
      "\n",
      "            assert DemoDefault.class.equals(aClass);\n",
      "\n",
      "        });\n",
      "        workbookReadBuilder.input(inputStream).sheet().sheetWriteConsumer(sheetWriteConsumer).read(DemoDefault.class);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void sheetWriteConsumer2() {\n",
      "        List<SheetWriteConsumer<DemoDefault>> sheetWriteConsumerList = new ArrayList<>();\n",
      "        for (int i = 0; i < random.nextInt(30); i++) {\n",
      "            SheetWriteConsumer<DemoDefault> sheetReadConsumer = new SheetWriteConsumer<DemoDefault>() {\n",
      "            };\n",
      "            sheetWriteConsumerList.add(sheetReadConsumer);\n",
      "        }\n",
      "\n",
      "        InputStream inputStream = TestFileUtils.getInputStream(this.getEmptyXlsxFilePath());\n",
      "\n",
      "        WorkbookReadBuilder workbookReadBuilder = this.getWorkbookReadBuilder((workbookParameter, aClass) -> {\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetIndex(), 0);\n",
      "            assertNull(workbookParameter.getSheetParameter().getSheetName());\n",
      "            assertNull(workbookParameter.getSheetParameter().getTitle());\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleColumnStartIndex(), 0);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadColumnStartIndex(), 0);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataRowStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataColumnStartIndex(), 0);\n",
      "\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetReadConsumerList().isEmpty());\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetWriteConsumerList().size(), sheetWriteConsumerList.size());\n",
      "\n",
      "            assert DemoDefault.class.equals(aClass);\n",
      "        });\n",
      "        WorkbookReadBuilder.WorkSheetReadBuilder workSheetReadBuilder = workbookReadBuilder.input(inputStream).sheet();\n",
      "        sheetWriteConsumerList.forEach(workSheetReadBuilder::sheetWriteConsumer);\n",
      "        List<DemoDefault> demoDefaultList = workSheetReadBuilder.read(DemoDefault.class);\n",
      "        assertTrue(demoDefaultList.isEmpty());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void read() {\n",
      "        InputStream inputStream = TestFileUtils.getInputStream(this.getEmptyXlsxFilePath());\n",
      "        WorkbookReadBuilder workbookReadBuilder = this.getWorkbookReadBuilder((workbookParameter, aClass) -> {\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetIndex(), 0);\n",
      "            assertNull(workbookParameter.getSheetParameter().getSheetName());\n",
      "            assertNull(workbookParameter.getSheetParameter().getTitle());\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleColumnStartIndex(), 0);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadColumnStartIndex(), 0);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataRowStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataColumnStartIndex(), 0);\n",
      "\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetReadConsumerList().isEmpty());\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetWriteConsumerList().isEmpty());\n",
      "\n",
      "            assert DemoDefault.class.equals(aClass);\n",
      "        });\n",
      "        List<DemoDefault> demoDefaultList = workbookReadBuilder.input(inputStream).sheet().read(DemoDefault.class);\n",
      "        assertTrue(demoDefaultList.isEmpty());\n",
      "    }\n",
      "\n",
      "    private WorkbookReadBuilder getWorkbookReadBuilder(BiConsumer<WorkbookParameter, Class<?>> biConsumer) {\n",
      "        return new WorkbookReadBuilder(this.getDefaultZouzhiyExcelFactory(biConsumer));\n",
      "    }\n",
      "\n",
      "    private DefaultZouzhiyExcelFactory getDefaultZouzhiyExcelFactory(BiConsumer<WorkbookParameter, Class<?>>\n",
      "                                                                             biConsumer) {\n",
      "        return new DefaultZouzhiyExcelFactory(new Configuration()) {\n",
      "            @Override\n",
      "            public WorkbookRead getWorkbookRead(WorkbookParameter workbookParameter, Class<?> clazz) {\n",
      "                biConsumer.accept(workbookParameter, clazz);\n",
      "                return super.getWorkbookRead(workbookParameter, clazz);\n",
      "            }\n",
      "        };\n",
      "    }\n",
      "\n",
      "    private String getEmptyXlsxFilePath() {\n",
      "        return \"statics/import/empty.xlsx\";\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "method_lines_dic": {
      "WorkbookReadBuilder::::input(java.io.File)": [
        29,
        32
      ],
      "WorkbookReadBuilder::::input(java.io.InputStream)": [
        34,
        37
      ],
      "WorkbookReadBuilder::::cellStyleConsumer(io.github.zouzhiy.excel.callback.CellStyleConsumer)": [
        39,
        42
      ],
      "WorkbookReadBuilder::::sheet()": [
        44,
        46
      ],
      "WorkbookReadBuilder::::sheet(java.lang.String)": [
        48,
        50
      ],
      "WorkbookReadBuilder::::sheet(java.lang.Integer)": [
        52,
        54
      ],
      "WorkbookReadBuilder.WorkSheetReadBuilder::::sheet(java.lang.String)": [
        64,
        67
      ],
      "WorkbookReadBuilder.WorkSheetReadBuilder::::sheet(java.lang.Integer)": [
        69,
        72
      ],
      "WorkbookReadBuilder.WorkSheetReadBuilder::::title(java.lang.String)": [
        74,
        77
      ],
      "WorkbookReadBuilder.WorkSheetReadBuilder::::titleRowStartIndex(java.lang.Integer)": [
        79,
        82
      ],
      "WorkbookReadBuilder.WorkSheetReadBuilder::::titleColumnStartIndex(java.lang.Integer)": [
        84,
        87
      ],
      "WorkbookReadBuilder.WorkSheetReadBuilder::::headRowStartIndex(java.lang.Integer)": [
        89,
        92
      ],
      "WorkbookReadBuilder.WorkSheetReadBuilder::::headColumnStartIndex(java.lang.Integer)": [
        94,
        97
      ],
      "WorkbookReadBuilder.WorkSheetReadBuilder::::dataRowStartIndex(java.lang.Integer)": [
        99,
        102
      ],
      "WorkbookReadBuilder.WorkSheetReadBuilder::::dataColumnStartIndex(java.lang.Integer)": [
        104,
        107
      ],
      "WorkbookReadBuilder.WorkSheetReadBuilder::::sheetReadConsumer(io.github.zouzhiy.excel.callback.SheetReadConsumer<?>)": [
        109,
        112
      ],
      "WorkbookReadBuilder.WorkSheetReadBuilder::::sheetWriteConsumer(io.github.zouzhiy.excel.callback.SheetWriteConsumer<?>)": [
        114,
        117
      ],
      "WorkbookReadBuilder.WorkSheetReadBuilder::::read(java.lang.Class<T>)": [
        119,
        125
      ]
    },
    "test_method_lines_dic": {
      "WorkbookReadBuilderTest::::input1()": [
        30,
        63
      ],
      "WorkbookReadBuilderTest::::input2()": [
        65,
        94
      ],
      "WorkbookReadBuilderTest::::input3()": [
        96,
        123
      ],
      "WorkbookReadBuilderTest::::cellStyleConsumer1()": [
        125,
        154
      ],
      "WorkbookReadBuilderTest::::cellStyleConsumer2()": [
        156,
        190
      ],
      "WorkbookReadBuilderTest::::sheet1()": [
        192,
        214
      ],
      "WorkbookReadBuilderTest::::sheet2()": [
        216,
        239
      ],
      "WorkbookReadBuilderTest::::sheet3()": [
        241,
        263
      ],
      "WorkbookReadBuilderTest::::title()": [
        266,
        291
      ],
      "WorkbookReadBuilderTest::::titleRowStartIndex()": [
        293,
        318
      ],
      "WorkbookReadBuilderTest::::titleColumnStartIndex()": [
        320,
        346
      ],
      "WorkbookReadBuilderTest::::headRowStartIndex()": [
        348,
        373
      ],
      "WorkbookReadBuilderTest::::headColumnStartIndex()": [
        375,
        400
      ],
      "WorkbookReadBuilderTest::::dataRowStartIndex()": [
        402,
        431
      ],
      "WorkbookReadBuilderTest::::dataColumnStartIndex()": [
        433,
        460
      ],
      "WorkbookReadBuilderTest::::sheetReadConsumer1()": [
        462,
        491
      ],
      "WorkbookReadBuilderTest::::sheetReadConsumer2()": [
        493,
        527
      ],
      "WorkbookReadBuilderTest::::sheetWriteConsumer1()": [
        529,
        558
      ],
      "WorkbookReadBuilderTest::::sheetWriteConsumer2()": [
        560,
        594
      ],
      "WorkbookReadBuilderTest::::read()": [
        596,
        620
      ],
      "WorkbookReadBuilderTest::::getEmptyXlsxFilePath()": [
        637,
        639
      ]
    },
    "reverse_method_lines_dic": {
      "29": "WorkbookReadBuilder::::input(java.io.File)",
      "30": "WorkbookReadBuilder::::input(java.io.File)",
      "31": "WorkbookReadBuilder::::input(java.io.File)",
      "32": "WorkbookReadBuilder::::input(java.io.File)",
      "34": "WorkbookReadBuilder::::input(java.io.InputStream)",
      "35": "WorkbookReadBuilder::::input(java.io.InputStream)",
      "36": "WorkbookReadBuilder::::input(java.io.InputStream)",
      "37": "WorkbookReadBuilder::::input(java.io.InputStream)",
      "39": "WorkbookReadBuilder::::cellStyleConsumer(io.github.zouzhiy.excel.callback.CellStyleConsumer)",
      "40": "WorkbookReadBuilder::::cellStyleConsumer(io.github.zouzhiy.excel.callback.CellStyleConsumer)",
      "41": "WorkbookReadBuilder::::cellStyleConsumer(io.github.zouzhiy.excel.callback.CellStyleConsumer)",
      "42": "WorkbookReadBuilder::::cellStyleConsumer(io.github.zouzhiy.excel.callback.CellStyleConsumer)",
      "44": "WorkbookReadBuilder::::sheet()",
      "45": "WorkbookReadBuilder::::sheet()",
      "46": "WorkbookReadBuilder::::sheet()",
      "48": "WorkbookReadBuilder::::sheet(java.lang.String)",
      "49": "WorkbookReadBuilder::::sheet(java.lang.String)",
      "50": "WorkbookReadBuilder::::sheet(java.lang.String)",
      "52": "WorkbookReadBuilder::::sheet(java.lang.Integer)",
      "53": "WorkbookReadBuilder::::sheet(java.lang.Integer)",
      "54": "WorkbookReadBuilder::::sheet(java.lang.Integer)",
      "64": "WorkbookReadBuilder.WorkSheetReadBuilder::::sheet(java.lang.String)",
      "65": "WorkbookReadBuilder.WorkSheetReadBuilder::::sheet(java.lang.String)",
      "66": "WorkbookReadBuilder.WorkSheetReadBuilder::::sheet(java.lang.String)",
      "67": "WorkbookReadBuilder.WorkSheetReadBuilder::::sheet(java.lang.String)",
      "69": "WorkbookReadBuilder.WorkSheetReadBuilder::::sheet(java.lang.Integer)",
      "70": "WorkbookReadBuilder.WorkSheetReadBuilder::::sheet(java.lang.Integer)",
      "71": "WorkbookReadBuilder.WorkSheetReadBuilder::::sheet(java.lang.Integer)",
      "72": "WorkbookReadBuilder.WorkSheetReadBuilder::::sheet(java.lang.Integer)",
      "74": "WorkbookReadBuilder.WorkSheetReadBuilder::::title(java.lang.String)",
      "75": "WorkbookReadBuilder.WorkSheetReadBuilder::::title(java.lang.String)",
      "76": "WorkbookReadBuilder.WorkSheetReadBuilder::::title(java.lang.String)",
      "77": "WorkbookReadBuilder.WorkSheetReadBuilder::::title(java.lang.String)",
      "79": "WorkbookReadBuilder.WorkSheetReadBuilder::::titleRowStartIndex(java.lang.Integer)",
      "80": "WorkbookReadBuilder.WorkSheetReadBuilder::::titleRowStartIndex(java.lang.Integer)",
      "81": "WorkbookReadBuilder.WorkSheetReadBuilder::::titleRowStartIndex(java.lang.Integer)",
      "82": "WorkbookReadBuilder.WorkSheetReadBuilder::::titleRowStartIndex(java.lang.Integer)",
      "84": "WorkbookReadBuilder.WorkSheetReadBuilder::::titleColumnStartIndex(java.lang.Integer)",
      "85": "WorkbookReadBuilder.WorkSheetReadBuilder::::titleColumnStartIndex(java.lang.Integer)",
      "86": "WorkbookReadBuilder.WorkSheetReadBuilder::::titleColumnStartIndex(java.lang.Integer)",
      "87": "WorkbookReadBuilder.WorkSheetReadBuilder::::titleColumnStartIndex(java.lang.Integer)",
      "89": "WorkbookReadBuilder.WorkSheetReadBuilder::::headRowStartIndex(java.lang.Integer)",
      "90": "WorkbookReadBuilder.WorkSheetReadBuilder::::headRowStartIndex(java.lang.Integer)",
      "91": "WorkbookReadBuilder.WorkSheetReadBuilder::::headRowStartIndex(java.lang.Integer)",
      "92": "WorkbookReadBuilder.WorkSheetReadBuilder::::headRowStartIndex(java.lang.Integer)",
      "94": "WorkbookReadBuilder.WorkSheetReadBuilder::::headColumnStartIndex(java.lang.Integer)",
      "95": "WorkbookReadBuilder.WorkSheetReadBuilder::::headColumnStartIndex(java.lang.Integer)",
      "96": "WorkbookReadBuilder.WorkSheetReadBuilder::::headColumnStartIndex(java.lang.Integer)",
      "97": "WorkbookReadBuilder.WorkSheetReadBuilder::::headColumnStartIndex(java.lang.Integer)",
      "99": "WorkbookReadBuilder.WorkSheetReadBuilder::::dataRowStartIndex(java.lang.Integer)",
      "100": "WorkbookReadBuilder.WorkSheetReadBuilder::::dataRowStartIndex(java.lang.Integer)",
      "101": "WorkbookReadBuilder.WorkSheetReadBuilder::::dataRowStartIndex(java.lang.Integer)",
      "102": "WorkbookReadBuilder.WorkSheetReadBuilder::::dataRowStartIndex(java.lang.Integer)",
      "104": "WorkbookReadBuilder.WorkSheetReadBuilder::::dataColumnStartIndex(java.lang.Integer)",
      "105": "WorkbookReadBuilder.WorkSheetReadBuilder::::dataColumnStartIndex(java.lang.Integer)",
      "106": "WorkbookReadBuilder.WorkSheetReadBuilder::::dataColumnStartIndex(java.lang.Integer)",
      "107": "WorkbookReadBuilder.WorkSheetReadBuilder::::dataColumnStartIndex(java.lang.Integer)",
      "109": "WorkbookReadBuilder.WorkSheetReadBuilder::::sheetReadConsumer(io.github.zouzhiy.excel.callback.SheetReadConsumer<?>)",
      "110": "WorkbookReadBuilder.WorkSheetReadBuilder::::sheetReadConsumer(io.github.zouzhiy.excel.callback.SheetReadConsumer<?>)",
      "111": "WorkbookReadBuilder.WorkSheetReadBuilder::::sheetReadConsumer(io.github.zouzhiy.excel.callback.SheetReadConsumer<?>)",
      "112": "WorkbookReadBuilder.WorkSheetReadBuilder::::sheetReadConsumer(io.github.zouzhiy.excel.callback.SheetReadConsumer<?>)",
      "114": "WorkbookReadBuilder.WorkSheetReadBuilder::::sheetWriteConsumer(io.github.zouzhiy.excel.callback.SheetWriteConsumer<?>)",
      "115": "WorkbookReadBuilder.WorkSheetReadBuilder::::sheetWriteConsumer(io.github.zouzhiy.excel.callback.SheetWriteConsumer<?>)",
      "116": "WorkbookReadBuilder.WorkSheetReadBuilder::::sheetWriteConsumer(io.github.zouzhiy.excel.callback.SheetWriteConsumer<?>)",
      "117": "WorkbookReadBuilder.WorkSheetReadBuilder::::sheetWriteConsumer(io.github.zouzhiy.excel.callback.SheetWriteConsumer<?>)",
      "119": "WorkbookReadBuilder.WorkSheetReadBuilder::::read(java.lang.Class<T>)",
      "120": "WorkbookReadBuilder.WorkSheetReadBuilder::::read(java.lang.Class<T>)",
      "121": "WorkbookReadBuilder.WorkSheetReadBuilder::::read(java.lang.Class<T>)",
      "122": "WorkbookReadBuilder.WorkSheetReadBuilder::::read(java.lang.Class<T>)",
      "123": "WorkbookReadBuilder.WorkSheetReadBuilder::::read(java.lang.Class<T>)",
      "124": "WorkbookReadBuilder.WorkSheetReadBuilder::::read(java.lang.Class<T>)",
      "125": "WorkbookReadBuilder.WorkSheetReadBuilder::::read(java.lang.Class<T>)"
    },
    "test_reverse_method_lines_dic": {
      "30": "WorkbookReadBuilderTest::::input1()",
      "31": "WorkbookReadBuilderTest::::input1()",
      "32": "WorkbookReadBuilderTest::::input1()",
      "33": "WorkbookReadBuilderTest::::input1()",
      "34": "WorkbookReadBuilderTest::::input1()",
      "35": "WorkbookReadBuilderTest::::input1()",
      "36": "WorkbookReadBuilderTest::::input1()",
      "37": "WorkbookReadBuilderTest::::input1()",
      "38": "WorkbookReadBuilderTest::::input1()",
      "39": "WorkbookReadBuilderTest::::input1()",
      "40": "WorkbookReadBuilderTest::::input1()",
      "41": "WorkbookReadBuilderTest::::input1()",
      "42": "WorkbookReadBuilderTest::::input1()",
      "43": "WorkbookReadBuilderTest::::input1()",
      "44": "WorkbookReadBuilderTest::::input1()",
      "45": "WorkbookReadBuilderTest::::input1()",
      "46": "WorkbookReadBuilderTest::::input1()",
      "47": "WorkbookReadBuilderTest::::input1()",
      "48": "WorkbookReadBuilderTest::::input1()",
      "49": "WorkbookReadBuilderTest::::input1()",
      "50": "WorkbookReadBuilderTest::::input1()",
      "51": "WorkbookReadBuilderTest::::input1()",
      "52": "WorkbookReadBuilderTest::::input1()",
      "53": "WorkbookReadBuilderTest::::input1()",
      "54": "WorkbookReadBuilderTest::::input1()",
      "55": "WorkbookReadBuilderTest::::input1()",
      "56": "WorkbookReadBuilderTest::::input1()",
      "57": "WorkbookReadBuilderTest::::input1()",
      "58": "WorkbookReadBuilderTest::::input1()",
      "59": "WorkbookReadBuilderTest::::input1()",
      "60": "WorkbookReadBuilderTest::::input1()",
      "61": "WorkbookReadBuilderTest::::input1()",
      "62": "WorkbookReadBuilderTest::::input1()",
      "63": "WorkbookReadBuilderTest::::input1()",
      "65": "WorkbookReadBuilderTest::::input2()",
      "66": "WorkbookReadBuilderTest::::input2()",
      "67": "WorkbookReadBuilderTest::::input2()",
      "68": "WorkbookReadBuilderTest::::input2()",
      "69": "WorkbookReadBuilderTest::::input2()",
      "70": "WorkbookReadBuilderTest::::input2()",
      "71": "WorkbookReadBuilderTest::::input2()",
      "72": "WorkbookReadBuilderTest::::input2()",
      "73": "WorkbookReadBuilderTest::::input2()",
      "74": "WorkbookReadBuilderTest::::input2()",
      "75": "WorkbookReadBuilderTest::::input2()",
      "76": "WorkbookReadBuilderTest::::input2()",
      "77": "WorkbookReadBuilderTest::::input2()",
      "78": "WorkbookReadBuilderTest::::input2()",
      "79": "WorkbookReadBuilderTest::::input2()",
      "80": "WorkbookReadBuilderTest::::input2()",
      "81": "WorkbookReadBuilderTest::::input2()",
      "82": "WorkbookReadBuilderTest::::input2()",
      "83": "WorkbookReadBuilderTest::::input2()",
      "84": "WorkbookReadBuilderTest::::input2()",
      "85": "WorkbookReadBuilderTest::::input2()",
      "86": "WorkbookReadBuilderTest::::input2()",
      "87": "WorkbookReadBuilderTest::::input2()",
      "88": "WorkbookReadBuilderTest::::input2()",
      "89": "WorkbookReadBuilderTest::::input2()",
      "90": "WorkbookReadBuilderTest::::input2()",
      "91": "WorkbookReadBuilderTest::::input2()",
      "92": "WorkbookReadBuilderTest::::input2()",
      "93": "WorkbookReadBuilderTest::::input2()",
      "94": "WorkbookReadBuilderTest::::input2()",
      "96": "WorkbookReadBuilderTest::::input3()",
      "97": "WorkbookReadBuilderTest::::input3()",
      "98": "WorkbookReadBuilderTest::::input3()",
      "99": "WorkbookReadBuilderTest::::input3()",
      "100": "WorkbookReadBuilderTest::::input3()",
      "101": "WorkbookReadBuilderTest::::input3()",
      "102": "WorkbookReadBuilderTest::::input3()",
      "103": "WorkbookReadBuilderTest::::input3()",
      "104": "WorkbookReadBuilderTest::::input3()",
      "105": "WorkbookReadBuilderTest::::input3()",
      "106": "WorkbookReadBuilderTest::::input3()",
      "107": "WorkbookReadBuilderTest::::input3()",
      "108": "WorkbookReadBuilderTest::::input3()",
      "109": "WorkbookReadBuilderTest::::input3()",
      "110": "WorkbookReadBuilderTest::::input3()",
      "111": "WorkbookReadBuilderTest::::input3()",
      "112": "WorkbookReadBuilderTest::::input3()",
      "113": "WorkbookReadBuilderTest::::input3()",
      "114": "WorkbookReadBuilderTest::::input3()",
      "115": "WorkbookReadBuilderTest::::input3()",
      "116": "WorkbookReadBuilderTest::::input3()",
      "117": "WorkbookReadBuilderTest::::input3()",
      "118": "WorkbookReadBuilderTest::::input3()",
      "119": "WorkbookReadBuilderTest::::input3()",
      "120": "WorkbookReadBuilderTest::::input3()",
      "121": "WorkbookReadBuilderTest::::input3()",
      "122": "WorkbookReadBuilderTest::::input3()",
      "123": "WorkbookReadBuilderTest::::input3()",
      "125": "WorkbookReadBuilderTest::::cellStyleConsumer1()",
      "126": "WorkbookReadBuilderTest::::cellStyleConsumer1()",
      "127": "WorkbookReadBuilderTest::::cellStyleConsumer1()",
      "128": "WorkbookReadBuilderTest::::cellStyleConsumer1()",
      "129": "WorkbookReadBuilderTest::::cellStyleConsumer1()",
      "130": "WorkbookReadBuilderTest::::cellStyleConsumer1()",
      "131": "WorkbookReadBuilderTest::::cellStyleConsumer1()",
      "132": "WorkbookReadBuilderTest::::cellStyleConsumer1()",
      "133": "WorkbookReadBuilderTest::::cellStyleConsumer1()",
      "134": "WorkbookReadBuilderTest::::cellStyleConsumer1()",
      "135": "WorkbookReadBuilderTest::::cellStyleConsumer1()",
      "136": "WorkbookReadBuilderTest::::cellStyleConsumer1()",
      "137": "WorkbookReadBuilderTest::::cellStyleConsumer1()",
      "138": "WorkbookReadBuilderTest::::cellStyleConsumer1()",
      "139": "WorkbookReadBuilderTest::::cellStyleConsumer1()",
      "140": "WorkbookReadBuilderTest::::cellStyleConsumer1()",
      "141": "WorkbookReadBuilderTest::::cellStyleConsumer1()",
      "142": "WorkbookReadBuilderTest::::cellStyleConsumer1()",
      "143": "WorkbookReadBuilderTest::::cellStyleConsumer1()",
      "144": "WorkbookReadBuilderTest::::cellStyleConsumer1()",
      "145": "WorkbookReadBuilderTest::::cellStyleConsumer1()",
      "146": "WorkbookReadBuilderTest::::cellStyleConsumer1()",
      "147": "WorkbookReadBuilderTest::::cellStyleConsumer1()",
      "148": "WorkbookReadBuilderTest::::cellStyleConsumer1()",
      "149": "WorkbookReadBuilderTest::::cellStyleConsumer1()",
      "150": "WorkbookReadBuilderTest::::cellStyleConsumer1()",
      "151": "WorkbookReadBuilderTest::::cellStyleConsumer1()",
      "152": "WorkbookReadBuilderTest::::cellStyleConsumer1()",
      "153": "WorkbookReadBuilderTest::::cellStyleConsumer1()",
      "154": "WorkbookReadBuilderTest::::cellStyleConsumer1()",
      "156": "WorkbookReadBuilderTest::::cellStyleConsumer2()",
      "157": "WorkbookReadBuilderTest::::cellStyleConsumer2()",
      "158": "WorkbookReadBuilderTest::::cellStyleConsumer2()",
      "159": "WorkbookReadBuilderTest::::cellStyleConsumer2()",
      "160": "WorkbookReadBuilderTest::::cellStyleConsumer2()",
      "161": "WorkbookReadBuilderTest::::cellStyleConsumer2()",
      "162": "WorkbookReadBuilderTest::::cellStyleConsumer2()",
      "163": "WorkbookReadBuilderTest::::cellStyleConsumer2()",
      "164": "WorkbookReadBuilderTest::::cellStyleConsumer2()",
      "165": "WorkbookReadBuilderTest::::cellStyleConsumer2()",
      "166": "WorkbookReadBuilderTest::::cellStyleConsumer2()",
      "167": "WorkbookReadBuilderTest::::cellStyleConsumer2()",
      "168": "WorkbookReadBuilderTest::::cellStyleConsumer2()",
      "169": "WorkbookReadBuilderTest::::cellStyleConsumer2()",
      "170": "WorkbookReadBuilderTest::::cellStyleConsumer2()",
      "171": "WorkbookReadBuilderTest::::cellStyleConsumer2()",
      "172": "WorkbookReadBuilderTest::::cellStyleConsumer2()",
      "173": "WorkbookReadBuilderTest::::cellStyleConsumer2()",
      "174": "WorkbookReadBuilderTest::::cellStyleConsumer2()",
      "175": "WorkbookReadBuilderTest::::cellStyleConsumer2()",
      "176": "WorkbookReadBuilderTest::::cellStyleConsumer2()",
      "177": "WorkbookReadBuilderTest::::cellStyleConsumer2()",
      "178": "WorkbookReadBuilderTest::::cellStyleConsumer2()",
      "179": "WorkbookReadBuilderTest::::cellStyleConsumer2()",
      "180": "WorkbookReadBuilderTest::::cellStyleConsumer2()",
      "181": "WorkbookReadBuilderTest::::cellStyleConsumer2()",
      "182": "WorkbookReadBuilderTest::::cellStyleConsumer2()",
      "183": "WorkbookReadBuilderTest::::cellStyleConsumer2()",
      "184": "WorkbookReadBuilderTest::::cellStyleConsumer2()",
      "185": "WorkbookReadBuilderTest::::cellStyleConsumer2()",
      "186": "WorkbookReadBuilderTest::::cellStyleConsumer2()",
      "187": "WorkbookReadBuilderTest::::cellStyleConsumer2()",
      "188": "WorkbookReadBuilderTest::::cellStyleConsumer2()",
      "189": "WorkbookReadBuilderTest::::cellStyleConsumer2()",
      "190": "WorkbookReadBuilderTest::::cellStyleConsumer2()",
      "192": "WorkbookReadBuilderTest::::sheet1()",
      "193": "WorkbookReadBuilderTest::::sheet1()",
      "194": "WorkbookReadBuilderTest::::sheet1()",
      "195": "WorkbookReadBuilderTest::::sheet1()",
      "196": "WorkbookReadBuilderTest::::sheet1()",
      "197": "WorkbookReadBuilderTest::::sheet1()",
      "198": "WorkbookReadBuilderTest::::sheet1()",
      "199": "WorkbookReadBuilderTest::::sheet1()",
      "200": "WorkbookReadBuilderTest::::sheet1()",
      "201": "WorkbookReadBuilderTest::::sheet1()",
      "202": "WorkbookReadBuilderTest::::sheet1()",
      "203": "WorkbookReadBuilderTest::::sheet1()",
      "204": "WorkbookReadBuilderTest::::sheet1()",
      "205": "WorkbookReadBuilderTest::::sheet1()",
      "206": "WorkbookReadBuilderTest::::sheet1()",
      "207": "WorkbookReadBuilderTest::::sheet1()",
      "208": "WorkbookReadBuilderTest::::sheet1()",
      "209": "WorkbookReadBuilderTest::::sheet1()",
      "210": "WorkbookReadBuilderTest::::sheet1()",
      "211": "WorkbookReadBuilderTest::::sheet1()",
      "212": "WorkbookReadBuilderTest::::sheet1()",
      "213": "WorkbookReadBuilderTest::::sheet1()",
      "214": "WorkbookReadBuilderTest::::sheet1()",
      "216": "WorkbookReadBuilderTest::::sheet2()",
      "217": "WorkbookReadBuilderTest::::sheet2()",
      "218": "WorkbookReadBuilderTest::::sheet2()",
      "219": "WorkbookReadBuilderTest::::sheet2()",
      "220": "WorkbookReadBuilderTest::::sheet2()",
      "221": "WorkbookReadBuilderTest::::sheet2()",
      "222": "WorkbookReadBuilderTest::::sheet2()",
      "223": "WorkbookReadBuilderTest::::sheet2()",
      "224": "WorkbookReadBuilderTest::::sheet2()",
      "225": "WorkbookReadBuilderTest::::sheet2()",
      "226": "WorkbookReadBuilderTest::::sheet2()",
      "227": "WorkbookReadBuilderTest::::sheet2()",
      "228": "WorkbookReadBuilderTest::::sheet2()",
      "229": "WorkbookReadBuilderTest::::sheet2()",
      "230": "WorkbookReadBuilderTest::::sheet2()",
      "231": "WorkbookReadBuilderTest::::sheet2()",
      "232": "WorkbookReadBuilderTest::::sheet2()",
      "233": "WorkbookReadBuilderTest::::sheet2()",
      "234": "WorkbookReadBuilderTest::::sheet2()",
      "235": "WorkbookReadBuilderTest::::sheet2()",
      "236": "WorkbookReadBuilderTest::::sheet2()",
      "237": "WorkbookReadBuilderTest::::sheet2()",
      "238": "WorkbookReadBuilderTest::::sheet2()",
      "239": "WorkbookReadBuilderTest::::sheet2()",
      "241": "WorkbookReadBuilderTest::::sheet3()",
      "242": "WorkbookReadBuilderTest::::sheet3()",
      "243": "WorkbookReadBuilderTest::::sheet3()",
      "244": "WorkbookReadBuilderTest::::sheet3()",
      "245": "WorkbookReadBuilderTest::::sheet3()",
      "246": "WorkbookReadBuilderTest::::sheet3()",
      "247": "WorkbookReadBuilderTest::::sheet3()",
      "248": "WorkbookReadBuilderTest::::sheet3()",
      "249": "WorkbookReadBuilderTest::::sheet3()",
      "250": "WorkbookReadBuilderTest::::sheet3()",
      "251": "WorkbookReadBuilderTest::::sheet3()",
      "252": "WorkbookReadBuilderTest::::sheet3()",
      "253": "WorkbookReadBuilderTest::::sheet3()",
      "254": "WorkbookReadBuilderTest::::sheet3()",
      "255": "WorkbookReadBuilderTest::::sheet3()",
      "256": "WorkbookReadBuilderTest::::sheet3()",
      "257": "WorkbookReadBuilderTest::::sheet3()",
      "258": "WorkbookReadBuilderTest::::sheet3()",
      "259": "WorkbookReadBuilderTest::::sheet3()",
      "260": "WorkbookReadBuilderTest::::sheet3()",
      "261": "WorkbookReadBuilderTest::::sheet3()",
      "262": "WorkbookReadBuilderTest::::sheet3()",
      "263": "WorkbookReadBuilderTest::::sheet3()",
      "266": "WorkbookReadBuilderTest::::title()",
      "267": "WorkbookReadBuilderTest::::title()",
      "268": "WorkbookReadBuilderTest::::title()",
      "269": "WorkbookReadBuilderTest::::title()",
      "270": "WorkbookReadBuilderTest::::title()",
      "271": "WorkbookReadBuilderTest::::title()",
      "272": "WorkbookReadBuilderTest::::title()",
      "273": "WorkbookReadBuilderTest::::title()",
      "274": "WorkbookReadBuilderTest::::title()",
      "275": "WorkbookReadBuilderTest::::title()",
      "276": "WorkbookReadBuilderTest::::title()",
      "277": "WorkbookReadBuilderTest::::title()",
      "278": "WorkbookReadBuilderTest::::title()",
      "279": "WorkbookReadBuilderTest::::title()",
      "280": "WorkbookReadBuilderTest::::title()",
      "281": "WorkbookReadBuilderTest::::title()",
      "282": "WorkbookReadBuilderTest::::title()",
      "283": "WorkbookReadBuilderTest::::title()",
      "284": "WorkbookReadBuilderTest::::title()",
      "285": "WorkbookReadBuilderTest::::title()",
      "286": "WorkbookReadBuilderTest::::title()",
      "287": "WorkbookReadBuilderTest::::title()",
      "288": "WorkbookReadBuilderTest::::title()",
      "289": "WorkbookReadBuilderTest::::title()",
      "290": "WorkbookReadBuilderTest::::title()",
      "291": "WorkbookReadBuilderTest::::title()",
      "293": "WorkbookReadBuilderTest::::titleRowStartIndex()",
      "294": "WorkbookReadBuilderTest::::titleRowStartIndex()",
      "295": "WorkbookReadBuilderTest::::titleRowStartIndex()",
      "296": "WorkbookReadBuilderTest::::titleRowStartIndex()",
      "297": "WorkbookReadBuilderTest::::titleRowStartIndex()",
      "298": "WorkbookReadBuilderTest::::titleRowStartIndex()",
      "299": "WorkbookReadBuilderTest::::titleRowStartIndex()",
      "300": "WorkbookReadBuilderTest::::titleRowStartIndex()",
      "301": "WorkbookReadBuilderTest::::titleRowStartIndex()",
      "302": "WorkbookReadBuilderTest::::titleRowStartIndex()",
      "303": "WorkbookReadBuilderTest::::titleRowStartIndex()",
      "304": "WorkbookReadBuilderTest::::titleRowStartIndex()",
      "305": "WorkbookReadBuilderTest::::titleRowStartIndex()",
      "306": "WorkbookReadBuilderTest::::titleRowStartIndex()",
      "307": "WorkbookReadBuilderTest::::titleRowStartIndex()",
      "308": "WorkbookReadBuilderTest::::titleRowStartIndex()",
      "309": "WorkbookReadBuilderTest::::titleRowStartIndex()",
      "310": "WorkbookReadBuilderTest::::titleRowStartIndex()",
      "311": "WorkbookReadBuilderTest::::titleRowStartIndex()",
      "312": "WorkbookReadBuilderTest::::titleRowStartIndex()",
      "313": "WorkbookReadBuilderTest::::titleRowStartIndex()",
      "314": "WorkbookReadBuilderTest::::titleRowStartIndex()",
      "315": "WorkbookReadBuilderTest::::titleRowStartIndex()",
      "316": "WorkbookReadBuilderTest::::titleRowStartIndex()",
      "317": "WorkbookReadBuilderTest::::titleRowStartIndex()",
      "318": "WorkbookReadBuilderTest::::titleRowStartIndex()",
      "320": "WorkbookReadBuilderTest::::titleColumnStartIndex()",
      "321": "WorkbookReadBuilderTest::::titleColumnStartIndex()",
      "322": "WorkbookReadBuilderTest::::titleColumnStartIndex()",
      "323": "WorkbookReadBuilderTest::::titleColumnStartIndex()",
      "324": "WorkbookReadBuilderTest::::titleColumnStartIndex()",
      "325": "WorkbookReadBuilderTest::::titleColumnStartIndex()",
      "326": "WorkbookReadBuilderTest::::titleColumnStartIndex()",
      "327": "WorkbookReadBuilderTest::::titleColumnStartIndex()",
      "328": "WorkbookReadBuilderTest::::titleColumnStartIndex()",
      "329": "WorkbookReadBuilderTest::::titleColumnStartIndex()",
      "330": "WorkbookReadBuilderTest::::titleColumnStartIndex()",
      "331": "WorkbookReadBuilderTest::::titleColumnStartIndex()",
      "332": "WorkbookReadBuilderTest::::titleColumnStartIndex()",
      "333": "WorkbookReadBuilderTest::::titleColumnStartIndex()",
      "334": "WorkbookReadBuilderTest::::titleColumnStartIndex()",
      "335": "WorkbookReadBuilderTest::::titleColumnStartIndex()",
      "336": "WorkbookReadBuilderTest::::titleColumnStartIndex()",
      "337": "WorkbookReadBuilderTest::::titleColumnStartIndex()",
      "338": "WorkbookReadBuilderTest::::titleColumnStartIndex()",
      "339": "WorkbookReadBuilderTest::::titleColumnStartIndex()",
      "340": "WorkbookReadBuilderTest::::titleColumnStartIndex()",
      "341": "WorkbookReadBuilderTest::::titleColumnStartIndex()",
      "342": "WorkbookReadBuilderTest::::titleColumnStartIndex()",
      "343": "WorkbookReadBuilderTest::::titleColumnStartIndex()",
      "344": "WorkbookReadBuilderTest::::titleColumnStartIndex()",
      "345": "WorkbookReadBuilderTest::::titleColumnStartIndex()",
      "346": "WorkbookReadBuilderTest::::titleColumnStartIndex()",
      "348": "WorkbookReadBuilderTest::::headRowStartIndex()",
      "349": "WorkbookReadBuilderTest::::headRowStartIndex()",
      "350": "WorkbookReadBuilderTest::::headRowStartIndex()",
      "351": "WorkbookReadBuilderTest::::headRowStartIndex()",
      "352": "WorkbookReadBuilderTest::::headRowStartIndex()",
      "353": "WorkbookReadBuilderTest::::headRowStartIndex()",
      "354": "WorkbookReadBuilderTest::::headRowStartIndex()",
      "355": "WorkbookReadBuilderTest::::headRowStartIndex()",
      "356": "WorkbookReadBuilderTest::::headRowStartIndex()",
      "357": "WorkbookReadBuilderTest::::headRowStartIndex()",
      "358": "WorkbookReadBuilderTest::::headRowStartIndex()",
      "359": "WorkbookReadBuilderTest::::headRowStartIndex()",
      "360": "WorkbookReadBuilderTest::::headRowStartIndex()",
      "361": "WorkbookReadBuilderTest::::headRowStartIndex()",
      "362": "WorkbookReadBuilderTest::::headRowStartIndex()",
      "363": "WorkbookReadBuilderTest::::headRowStartIndex()",
      "364": "WorkbookReadBuilderTest::::headRowStartIndex()",
      "365": "WorkbookReadBuilderTest::::headRowStartIndex()",
      "366": "WorkbookReadBuilderTest::::headRowStartIndex()",
      "367": "WorkbookReadBuilderTest::::headRowStartIndex()",
      "368": "WorkbookReadBuilderTest::::headRowStartIndex()",
      "369": "WorkbookReadBuilderTest::::headRowStartIndex()",
      "370": "WorkbookReadBuilderTest::::headRowStartIndex()",
      "371": "WorkbookReadBuilderTest::::headRowStartIndex()",
      "372": "WorkbookReadBuilderTest::::headRowStartIndex()",
      "373": "WorkbookReadBuilderTest::::headRowStartIndex()",
      "375": "WorkbookReadBuilderTest::::headColumnStartIndex()",
      "376": "WorkbookReadBuilderTest::::headColumnStartIndex()",
      "377": "WorkbookReadBuilderTest::::headColumnStartIndex()",
      "378": "WorkbookReadBuilderTest::::headColumnStartIndex()",
      "379": "WorkbookReadBuilderTest::::headColumnStartIndex()",
      "380": "WorkbookReadBuilderTest::::headColumnStartIndex()",
      "381": "WorkbookReadBuilderTest::::headColumnStartIndex()",
      "382": "WorkbookReadBuilderTest::::headColumnStartIndex()",
      "383": "WorkbookReadBuilderTest::::headColumnStartIndex()",
      "384": "WorkbookReadBuilderTest::::headColumnStartIndex()",
      "385": "WorkbookReadBuilderTest::::headColumnStartIndex()",
      "386": "WorkbookReadBuilderTest::::headColumnStartIndex()",
      "387": "WorkbookReadBuilderTest::::headColumnStartIndex()",
      "388": "WorkbookReadBuilderTest::::headColumnStartIndex()",
      "389": "WorkbookReadBuilderTest::::headColumnStartIndex()",
      "390": "WorkbookReadBuilderTest::::headColumnStartIndex()",
      "391": "WorkbookReadBuilderTest::::headColumnStartIndex()",
      "392": "WorkbookReadBuilderTest::::headColumnStartIndex()",
      "393": "WorkbookReadBuilderTest::::headColumnStartIndex()",
      "394": "WorkbookReadBuilderTest::::headColumnStartIndex()",
      "395": "WorkbookReadBuilderTest::::headColumnStartIndex()",
      "396": "WorkbookReadBuilderTest::::headColumnStartIndex()",
      "397": "WorkbookReadBuilderTest::::headColumnStartIndex()",
      "398": "WorkbookReadBuilderTest::::headColumnStartIndex()",
      "399": "WorkbookReadBuilderTest::::headColumnStartIndex()",
      "400": "WorkbookReadBuilderTest::::headColumnStartIndex()",
      "402": "WorkbookReadBuilderTest::::dataRowStartIndex()",
      "403": "WorkbookReadBuilderTest::::dataRowStartIndex()",
      "404": "WorkbookReadBuilderTest::::dataRowStartIndex()",
      "405": "WorkbookReadBuilderTest::::dataRowStartIndex()",
      "406": "WorkbookReadBuilderTest::::dataRowStartIndex()",
      "407": "WorkbookReadBuilderTest::::dataRowStartIndex()",
      "408": "WorkbookReadBuilderTest::::dataRowStartIndex()",
      "409": "WorkbookReadBuilderTest::::dataRowStartIndex()",
      "410": "WorkbookReadBuilderTest::::dataRowStartIndex()",
      "411": "WorkbookReadBuilderTest::::dataRowStartIndex()",
      "412": "WorkbookReadBuilderTest::::dataRowStartIndex()",
      "413": "WorkbookReadBuilderTest::::dataRowStartIndex()",
      "414": "WorkbookReadBuilderTest::::dataRowStartIndex()",
      "415": "WorkbookReadBuilderTest::::dataRowStartIndex()",
      "416": "WorkbookReadBuilderTest::::dataRowStartIndex()",
      "417": "WorkbookReadBuilderTest::::dataRowStartIndex()",
      "418": "WorkbookReadBuilderTest::::dataRowStartIndex()",
      "419": "WorkbookReadBuilderTest::::dataRowStartIndex()",
      "420": "WorkbookReadBuilderTest::::dataRowStartIndex()",
      "421": "WorkbookReadBuilderTest::::dataRowStartIndex()",
      "422": "WorkbookReadBuilderTest::::dataRowStartIndex()",
      "423": "WorkbookReadBuilderTest::::dataRowStartIndex()",
      "424": "WorkbookReadBuilderTest::::dataRowStartIndex()",
      "425": "WorkbookReadBuilderTest::::dataRowStartIndex()",
      "426": "WorkbookReadBuilderTest::::dataRowStartIndex()",
      "427": "WorkbookReadBuilderTest::::dataRowStartIndex()",
      "428": "WorkbookReadBuilderTest::::dataRowStartIndex()",
      "429": "WorkbookReadBuilderTest::::dataRowStartIndex()",
      "430": "WorkbookReadBuilderTest::::dataRowStartIndex()",
      "431": "WorkbookReadBuilderTest::::dataRowStartIndex()",
      "433": "WorkbookReadBuilderTest::::dataColumnStartIndex()",
      "434": "WorkbookReadBuilderTest::::dataColumnStartIndex()",
      "435": "WorkbookReadBuilderTest::::dataColumnStartIndex()",
      "436": "WorkbookReadBuilderTest::::dataColumnStartIndex()",
      "437": "WorkbookReadBuilderTest::::dataColumnStartIndex()",
      "438": "WorkbookReadBuilderTest::::dataColumnStartIndex()",
      "439": "WorkbookReadBuilderTest::::dataColumnStartIndex()",
      "440": "WorkbookReadBuilderTest::::dataColumnStartIndex()",
      "441": "WorkbookReadBuilderTest::::dataColumnStartIndex()",
      "442": "WorkbookReadBuilderTest::::dataColumnStartIndex()",
      "443": "WorkbookReadBuilderTest::::dataColumnStartIndex()",
      "444": "WorkbookReadBuilderTest::::dataColumnStartIndex()",
      "445": "WorkbookReadBuilderTest::::dataColumnStartIndex()",
      "446": "WorkbookReadBuilderTest::::dataColumnStartIndex()",
      "447": "WorkbookReadBuilderTest::::dataColumnStartIndex()",
      "448": "WorkbookReadBuilderTest::::dataColumnStartIndex()",
      "449": "WorkbookReadBuilderTest::::dataColumnStartIndex()",
      "450": "WorkbookReadBuilderTest::::dataColumnStartIndex()",
      "451": "WorkbookReadBuilderTest::::dataColumnStartIndex()",
      "452": "WorkbookReadBuilderTest::::dataColumnStartIndex()",
      "453": "WorkbookReadBuilderTest::::dataColumnStartIndex()",
      "454": "WorkbookReadBuilderTest::::dataColumnStartIndex()",
      "455": "WorkbookReadBuilderTest::::dataColumnStartIndex()",
      "456": "WorkbookReadBuilderTest::::dataColumnStartIndex()",
      "457": "WorkbookReadBuilderTest::::dataColumnStartIndex()",
      "458": "WorkbookReadBuilderTest::::dataColumnStartIndex()",
      "459": "WorkbookReadBuilderTest::::dataColumnStartIndex()",
      "460": "WorkbookReadBuilderTest::::dataColumnStartIndex()",
      "462": "WorkbookReadBuilderTest::::sheetReadConsumer1()",
      "463": "WorkbookReadBuilderTest::::sheetReadConsumer1()",
      "464": "WorkbookReadBuilderTest::::sheetReadConsumer1()",
      "465": "WorkbookReadBuilderTest::::sheetReadConsumer1()",
      "466": "WorkbookReadBuilderTest::::sheetReadConsumer1()",
      "467": "WorkbookReadBuilderTest::::sheetReadConsumer1()",
      "468": "WorkbookReadBuilderTest::::sheetReadConsumer1()",
      "469": "WorkbookReadBuilderTest::::sheetReadConsumer1()",
      "470": "WorkbookReadBuilderTest::::sheetReadConsumer1()",
      "471": "WorkbookReadBuilderTest::::sheetReadConsumer1()",
      "472": "WorkbookReadBuilderTest::::sheetReadConsumer1()",
      "473": "WorkbookReadBuilderTest::::sheetReadConsumer1()",
      "474": "WorkbookReadBuilderTest::::sheetReadConsumer1()",
      "475": "WorkbookReadBuilderTest::::sheetReadConsumer1()",
      "476": "WorkbookReadBuilderTest::::sheetReadConsumer1()",
      "477": "WorkbookReadBuilderTest::::sheetReadConsumer1()",
      "478": "WorkbookReadBuilderTest::::sheetReadConsumer1()",
      "479": "WorkbookReadBuilderTest::::sheetReadConsumer1()",
      "480": "WorkbookReadBuilderTest::::sheetReadConsumer1()",
      "481": "WorkbookReadBuilderTest::::sheetReadConsumer1()",
      "482": "WorkbookReadBuilderTest::::sheetReadConsumer1()",
      "483": "WorkbookReadBuilderTest::::sheetReadConsumer1()",
      "484": "WorkbookReadBuilderTest::::sheetReadConsumer1()",
      "485": "WorkbookReadBuilderTest::::sheetReadConsumer1()",
      "486": "WorkbookReadBuilderTest::::sheetReadConsumer1()",
      "487": "WorkbookReadBuilderTest::::sheetReadConsumer1()",
      "488": "WorkbookReadBuilderTest::::sheetReadConsumer1()",
      "489": "WorkbookReadBuilderTest::::sheetReadConsumer1()",
      "490": "WorkbookReadBuilderTest::::sheetReadConsumer1()",
      "491": "WorkbookReadBuilderTest::::sheetReadConsumer1()",
      "493": "WorkbookReadBuilderTest::::sheetReadConsumer2()",
      "494": "WorkbookReadBuilderTest::::sheetReadConsumer2()",
      "495": "WorkbookReadBuilderTest::::sheetReadConsumer2()",
      "496": "WorkbookReadBuilderTest::::sheetReadConsumer2()",
      "497": "WorkbookReadBuilderTest::::sheetReadConsumer2()",
      "498": "WorkbookReadBuilderTest::::sheetReadConsumer2()",
      "499": "WorkbookReadBuilderTest::::sheetReadConsumer2()",
      "500": "WorkbookReadBuilderTest::::sheetReadConsumer2()",
      "501": "WorkbookReadBuilderTest::::sheetReadConsumer2()",
      "502": "WorkbookReadBuilderTest::::sheetReadConsumer2()",
      "503": "WorkbookReadBuilderTest::::sheetReadConsumer2()",
      "504": "WorkbookReadBuilderTest::::sheetReadConsumer2()",
      "505": "WorkbookReadBuilderTest::::sheetReadConsumer2()",
      "506": "WorkbookReadBuilderTest::::sheetReadConsumer2()",
      "507": "WorkbookReadBuilderTest::::sheetReadConsumer2()",
      "508": "WorkbookReadBuilderTest::::sheetReadConsumer2()",
      "509": "WorkbookReadBuilderTest::::sheetReadConsumer2()",
      "510": "WorkbookReadBuilderTest::::sheetReadConsumer2()",
      "511": "WorkbookReadBuilderTest::::sheetReadConsumer2()",
      "512": "WorkbookReadBuilderTest::::sheetReadConsumer2()",
      "513": "WorkbookReadBuilderTest::::sheetReadConsumer2()",
      "514": "WorkbookReadBuilderTest::::sheetReadConsumer2()",
      "515": "WorkbookReadBuilderTest::::sheetReadConsumer2()",
      "516": "WorkbookReadBuilderTest::::sheetReadConsumer2()",
      "517": "WorkbookReadBuilderTest::::sheetReadConsumer2()",
      "518": "WorkbookReadBuilderTest::::sheetReadConsumer2()",
      "519": "WorkbookReadBuilderTest::::sheetReadConsumer2()",
      "520": "WorkbookReadBuilderTest::::sheetReadConsumer2()",
      "521": "WorkbookReadBuilderTest::::sheetReadConsumer2()",
      "522": "WorkbookReadBuilderTest::::sheetReadConsumer2()",
      "523": "WorkbookReadBuilderTest::::sheetReadConsumer2()",
      "524": "WorkbookReadBuilderTest::::sheetReadConsumer2()",
      "525": "WorkbookReadBuilderTest::::sheetReadConsumer2()",
      "526": "WorkbookReadBuilderTest::::sheetReadConsumer2()",
      "527": "WorkbookReadBuilderTest::::sheetReadConsumer2()",
      "529": "WorkbookReadBuilderTest::::sheetWriteConsumer1()",
      "530": "WorkbookReadBuilderTest::::sheetWriteConsumer1()",
      "531": "WorkbookReadBuilderTest::::sheetWriteConsumer1()",
      "532": "WorkbookReadBuilderTest::::sheetWriteConsumer1()",
      "533": "WorkbookReadBuilderTest::::sheetWriteConsumer1()",
      "534": "WorkbookReadBuilderTest::::sheetWriteConsumer1()",
      "535": "WorkbookReadBuilderTest::::sheetWriteConsumer1()",
      "536": "WorkbookReadBuilderTest::::sheetWriteConsumer1()",
      "537": "WorkbookReadBuilderTest::::sheetWriteConsumer1()",
      "538": "WorkbookReadBuilderTest::::sheetWriteConsumer1()",
      "539": "WorkbookReadBuilderTest::::sheetWriteConsumer1()",
      "540": "WorkbookReadBuilderTest::::sheetWriteConsumer1()",
      "541": "WorkbookReadBuilderTest::::sheetWriteConsumer1()",
      "542": "WorkbookReadBuilderTest::::sheetWriteConsumer1()",
      "543": "WorkbookReadBuilderTest::::sheetWriteConsumer1()",
      "544": "WorkbookReadBuilderTest::::sheetWriteConsumer1()",
      "545": "WorkbookReadBuilderTest::::sheetWriteConsumer1()",
      "546": "WorkbookReadBuilderTest::::sheetWriteConsumer1()",
      "547": "WorkbookReadBuilderTest::::sheetWriteConsumer1()",
      "548": "WorkbookReadBuilderTest::::sheetWriteConsumer1()",
      "549": "WorkbookReadBuilderTest::::sheetWriteConsumer1()",
      "550": "WorkbookReadBuilderTest::::sheetWriteConsumer1()",
      "551": "WorkbookReadBuilderTest::::sheetWriteConsumer1()",
      "552": "WorkbookReadBuilderTest::::sheetWriteConsumer1()",
      "553": "WorkbookReadBuilderTest::::sheetWriteConsumer1()",
      "554": "WorkbookReadBuilderTest::::sheetWriteConsumer1()",
      "555": "WorkbookReadBuilderTest::::sheetWriteConsumer1()",
      "556": "WorkbookReadBuilderTest::::sheetWriteConsumer1()",
      "557": "WorkbookReadBuilderTest::::sheetWriteConsumer1()",
      "558": "WorkbookReadBuilderTest::::sheetWriteConsumer1()",
      "560": "WorkbookReadBuilderTest::::sheetWriteConsumer2()",
      "561": "WorkbookReadBuilderTest::::sheetWriteConsumer2()",
      "562": "WorkbookReadBuilderTest::::sheetWriteConsumer2()",
      "563": "WorkbookReadBuilderTest::::sheetWriteConsumer2()",
      "564": "WorkbookReadBuilderTest::::sheetWriteConsumer2()",
      "565": "WorkbookReadBuilderTest::::sheetWriteConsumer2()",
      "566": "WorkbookReadBuilderTest::::sheetWriteConsumer2()",
      "567": "WorkbookReadBuilderTest::::sheetWriteConsumer2()",
      "568": "WorkbookReadBuilderTest::::sheetWriteConsumer2()",
      "569": "WorkbookReadBuilderTest::::sheetWriteConsumer2()",
      "570": "WorkbookReadBuilderTest::::sheetWriteConsumer2()",
      "571": "WorkbookReadBuilderTest::::sheetWriteConsumer2()",
      "572": "WorkbookReadBuilderTest::::sheetWriteConsumer2()",
      "573": "WorkbookReadBuilderTest::::sheetWriteConsumer2()",
      "574": "WorkbookReadBuilderTest::::sheetWriteConsumer2()",
      "575": "WorkbookReadBuilderTest::::sheetWriteConsumer2()",
      "576": "WorkbookReadBuilderTest::::sheetWriteConsumer2()",
      "577": "WorkbookReadBuilderTest::::sheetWriteConsumer2()",
      "578": "WorkbookReadBuilderTest::::sheetWriteConsumer2()",
      "579": "WorkbookReadBuilderTest::::sheetWriteConsumer2()",
      "580": "WorkbookReadBuilderTest::::sheetWriteConsumer2()",
      "581": "WorkbookReadBuilderTest::::sheetWriteConsumer2()",
      "582": "WorkbookReadBuilderTest::::sheetWriteConsumer2()",
      "583": "WorkbookReadBuilderTest::::sheetWriteConsumer2()",
      "584": "WorkbookReadBuilderTest::::sheetWriteConsumer2()",
      "585": "WorkbookReadBuilderTest::::sheetWriteConsumer2()",
      "586": "WorkbookReadBuilderTest::::sheetWriteConsumer2()",
      "587": "WorkbookReadBuilderTest::::sheetWriteConsumer2()",
      "588": "WorkbookReadBuilderTest::::sheetWriteConsumer2()",
      "589": "WorkbookReadBuilderTest::::sheetWriteConsumer2()",
      "590": "WorkbookReadBuilderTest::::sheetWriteConsumer2()",
      "591": "WorkbookReadBuilderTest::::sheetWriteConsumer2()",
      "592": "WorkbookReadBuilderTest::::sheetWriteConsumer2()",
      "593": "WorkbookReadBuilderTest::::sheetWriteConsumer2()",
      "594": "WorkbookReadBuilderTest::::sheetWriteConsumer2()",
      "596": "WorkbookReadBuilderTest::::read()",
      "597": "WorkbookReadBuilderTest::::read()",
      "598": "WorkbookReadBuilderTest::::read()",
      "599": "WorkbookReadBuilderTest::::read()",
      "600": "WorkbookReadBuilderTest::::read()",
      "601": "WorkbookReadBuilderTest::::read()",
      "602": "WorkbookReadBuilderTest::::read()",
      "603": "WorkbookReadBuilderTest::::read()",
      "604": "WorkbookReadBuilderTest::::read()",
      "605": "WorkbookReadBuilderTest::::read()",
      "606": "WorkbookReadBuilderTest::::read()",
      "607": "WorkbookReadBuilderTest::::read()",
      "608": "WorkbookReadBuilderTest::::read()",
      "609": "WorkbookReadBuilderTest::::read()",
      "610": "WorkbookReadBuilderTest::::read()",
      "611": "WorkbookReadBuilderTest::::read()",
      "612": "WorkbookReadBuilderTest::::read()",
      "613": "WorkbookReadBuilderTest::::read()",
      "614": "WorkbookReadBuilderTest::::read()",
      "615": "WorkbookReadBuilderTest::::read()",
      "616": "WorkbookReadBuilderTest::::read()",
      "617": "WorkbookReadBuilderTest::::read()",
      "618": "WorkbookReadBuilderTest::::read()",
      "619": "WorkbookReadBuilderTest::::read()",
      "620": "WorkbookReadBuilderTest::::read()",
      "637": "WorkbookReadBuilderTest::::getEmptyXlsxFilePath()",
      "638": "WorkbookReadBuilderTest::::getEmptyXlsxFilePath()",
      "639": "WorkbookReadBuilderTest::::getEmptyXlsxFilePath()"
    },
    "tests": [
      {
        "test_lines": [
          30,
          63
        ],
        "covered_lines": [
          24,
          25,
          26,
          27,
          30,
          31,
          45,
          60,
          61,
          62,
          70,
          71,
          120,
          121,
          122,
          123
        ]
      },
      {
        "test_lines": [
          65,
          94
        ],
        "covered_lines": [
          24,
          25,
          26,
          27,
          30,
          31,
          45,
          60,
          61,
          62,
          70,
          71,
          120,
          121,
          122,
          123,
          124
        ]
      },
      {
        "test_lines": [
          96,
          123
        ],
        "covered_lines": [
          24,
          25,
          26,
          27,
          35,
          36,
          45,
          60,
          61,
          62,
          70,
          71,
          120,
          121,
          122,
          123,
          124
        ]
      },
      {
        "test_lines": [
          125,
          154
        ],
        "covered_lines": [
          24,
          25,
          26,
          27,
          35,
          36,
          40,
          41,
          45,
          60,
          61,
          62,
          70,
          71,
          120,
          121,
          122,
          123,
          124
        ]
      },
      {
        "test_lines": [
          156,
          190
        ],
        "covered_lines": [
          24,
          25,
          26,
          27,
          35,
          36,
          40,
          41,
          45,
          60,
          61,
          62,
          70,
          71,
          120,
          121,
          122,
          123,
          124
        ]
      },
      {
        "test_lines": [
          192,
          214
        ],
        "covered_lines": [
          24,
          25,
          26,
          27,
          35,
          36,
          45,
          60,
          61,
          62,
          70,
          71,
          120,
          121,
          122,
          123,
          124
        ]
      },
      {
        "test_lines": [
          216,
          239
        ],
        "covered_lines": [
          24,
          25,
          26,
          27,
          35,
          36,
          49,
          60,
          61,
          62,
          65,
          66,
          120,
          121,
          122,
          123,
          124
        ]
      },
      {
        "test_lines": [
          241,
          263
        ],
        "covered_lines": [
          24,
          25,
          26,
          27,
          35,
          36,
          53,
          60,
          61,
          62,
          70,
          71,
          120,
          121,
          122,
          123,
          124
        ]
      },
      {
        "test_lines": [
          266,
          291
        ],
        "covered_lines": [
          24,
          25,
          26,
          27,
          35,
          36,
          45,
          60,
          61,
          62,
          70,
          71,
          75,
          76,
          120,
          121,
          122,
          123,
          124
        ]
      },
      {
        "test_lines": [
          293,
          318
        ],
        "covered_lines": [
          24,
          25,
          26,
          27,
          35,
          36,
          45,
          60,
          61,
          62,
          70,
          71,
          80,
          81,
          120,
          121,
          122,
          123
        ]
      },
      {
        "test_lines": [
          320,
          346
        ],
        "covered_lines": [
          24,
          25,
          26,
          27,
          35,
          36,
          45,
          60,
          61,
          62,
          70,
          71,
          85,
          86,
          120,
          121,
          122,
          123,
          124
        ]
      },
      {
        "test_lines": [
          348,
          373
        ],
        "covered_lines": [
          24,
          25,
          26,
          27,
          35,
          36,
          45,
          60,
          61,
          62,
          70,
          71,
          90,
          91,
          120,
          121,
          122,
          123
        ]
      },
      {
        "test_lines": [
          375,
          400
        ],
        "covered_lines": [
          24,
          25,
          26,
          27,
          35,
          36,
          45,
          60,
          61,
          62,
          70,
          71,
          95,
          96,
          120,
          121,
          122,
          123,
          124
        ]
      },
      {
        "test_lines": [
          402,
          431
        ],
        "covered_lines": [
          24,
          25,
          26,
          27,
          35,
          36,
          45,
          60,
          61,
          62,
          70,
          71,
          100,
          101,
          120,
          121,
          122,
          123,
          124
        ]
      },
      {
        "test_lines": [
          462,
          491
        ],
        "covered_lines": [
          24,
          25,
          26,
          27,
          35,
          36,
          45,
          60,
          61,
          62,
          70,
          71,
          110,
          111,
          120,
          121,
          122,
          123,
          124
        ]
      },
      {
        "test_lines": [
          493,
          527
        ],
        "covered_lines": [
          24,
          25,
          26,
          27,
          35,
          36,
          45,
          60,
          61,
          62,
          70,
          71,
          110,
          111,
          120,
          121,
          122,
          123,
          124
        ]
      },
      {
        "test_lines": [
          529,
          558
        ],
        "covered_lines": [
          24,
          25,
          26,
          27,
          35,
          36,
          45,
          60,
          61,
          62,
          70,
          71,
          115,
          116,
          120,
          121,
          122,
          123,
          124
        ]
      },
      {
        "test_lines": [
          560,
          594
        ],
        "covered_lines": [
          24,
          25,
          26,
          27,
          35,
          36,
          45,
          60,
          61,
          62,
          70,
          71,
          115,
          116,
          120,
          121,
          122,
          123,
          124
        ]
      },
      {
        "test_lines": [
          596,
          620
        ],
        "covered_lines": [
          24,
          25,
          26,
          27,
          35,
          36,
          45,
          60,
          61,
          62,
          70,
          71,
          120,
          121,
          122,
          123,
          124
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/zouzhiy-excel/src/main/java/io/github/zouzhiy/excel/builder/DefaultZouzhiyExcelFactory.java": {
    "class_content": [
      "/*\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package io.github.zouzhiy.excel.builder;\n",
      "\n",
      "import io.github.zouzhiy.excel.metadata.Configuration;\n",
      "import io.github.zouzhiy.excel.metadata.config.ExcelClassConfig;\n",
      "import io.github.zouzhiy.excel.metadata.parameter.WorkbookParameter;\n",
      "import io.github.zouzhiy.excel.read.WorkbookRead;\n",
      "import io.github.zouzhiy.excel.read.defaults.DefaultWorkbookRead;\n",
      "import io.github.zouzhiy.excel.write.WorkbookWrite;\n",
      "import io.github.zouzhiy.excel.write.defaults.DefaultWorkbookWrite;\n",
      "\n",
      "import java.io.File;\n",
      "import java.io.InputStream;\n",
      "import java.io.OutputStream;\n",
      "\n",
      "/**\n",
      " * @author zouzhiy\n",
      " * @since 2022/7/2\n",
      " */\n",
      "public class DefaultZouzhiyExcelFactory implements ZouzhiyExcelFactory {\n",
      "\n",
      "    private final Configuration configuration;\n",
      "\n",
      "    public DefaultZouzhiyExcelFactory(Configuration configuration) {\n",
      "        this.configuration = configuration;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Configuration getConfiguration() {\n",
      "        return configuration;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public WorkbookRead getWorkbookRead(WorkbookParameter workbookParameter, Class<?> clazz) {\n",
      "        return new DefaultWorkbookRead(configuration, workbookParameter, configuration.getExcelAnnotationParse().findForClass(clazz));\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public WorkbookRead getWorkbookRead(WorkbookParameter workbookParameter, ExcelClassConfig excelClassConfig) {\n",
      "        return new DefaultWorkbookRead(configuration, workbookParameter, excelClassConfig);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public WorkbookWrite getWorkbookWrite(WorkbookParameter workbookParameter, Class<?> clazz) {\n",
      "        return new DefaultWorkbookWrite(configuration, workbookParameter, configuration.getExcelAnnotationParse().findForClass(clazz));\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public WorkbookWrite getWorkbookWrite(WorkbookParameter workbookParameter, ExcelClassConfig excelClassConfig) {\n",
      "        return new DefaultWorkbookWrite(configuration, workbookParameter, excelClassConfig);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public WorkbookReadBuilder read() {\n",
      "        return new WorkbookReadBuilder(this);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public WorkbookReadBuilder read(File inputFile) {\n",
      "        return new WorkbookReadBuilder(this).input(inputFile);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public WorkbookReadBuilder read(InputStream inputStream) {\n",
      "        return new WorkbookReadBuilder(this).input(inputStream);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public WorkbookWriteBuilder write() {\n",
      "        return new WorkbookWriteBuilder(this);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public WorkbookWriteBuilder write(File outputFile) {\n",
      "        return new WorkbookWriteBuilder(this).output(outputFile);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public WorkbookWriteBuilder write(OutputStream outputStream) {\n",
      "        return new WorkbookWriteBuilder(this).output(outputStream);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package io.github.zouzhiy.excel.builder;\n",
      "\n",
      "import io.github.zouzhiy.excel.metadata.Configuration;\n",
      "import io.github.zouzhiy.excel.metadata.config.ExcelClassConfig;\n",
      "import io.github.zouzhiy.excel.metadata.parameter.WorkbookParameter;\n",
      "import io.github.zouzhiy.excel.read.WorkbookRead;\n",
      "import io.github.zouzhiy.excel.support.metadata.DemoDefault;\n",
      "import io.github.zouzhiy.excel.support.utils.TestFileUtils;\n",
      "import io.github.zouzhiy.excel.write.WorkbookWrite;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import java.io.*;\n",
      "import java.util.Collections;\n",
      "import java.util.List;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.*;\n",
      "\n",
      "/**\n",
      " * @author zouzhiy\n",
      " * @since 2022/7/9\n",
      " */\n",
      "class DefaultZouzhiyExcelFactoryTest {\n",
      "\n",
      "    @Test\n",
      "    void getConfiguration() {\n",
      "        Configuration configuration = new Configuration();\n",
      "        DefaultZouzhiyExcelFactory defaultZouzhiyExcelFactory = new DefaultZouzhiyExcelFactory(configuration);\n",
      "        assertEquals(configuration, defaultZouzhiyExcelFactory.getConfiguration());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getWorkbookRead() {\n",
      "        DefaultZouzhiyExcelFactory defaultZouzhiyExcelFactory = new DefaultZouzhiyExcelFactory(new Configuration());\n",
      "        WorkbookParameter workbookParameter = WorkbookParameter.builder().build();\n",
      "        WorkbookRead workbookRead = defaultZouzhiyExcelFactory.getWorkbookRead(workbookParameter, DemoDefault.class);\n",
      "\n",
      "        assertEquals(workbookParameter, workbookRead.getWorkbookContext().getWorkbookParameter());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getWorkbookRead2() {\n",
      "        DefaultZouzhiyExcelFactory defaultZouzhiyExcelFactory = new DefaultZouzhiyExcelFactory(new Configuration());\n",
      "        WorkbookParameter workbookParameter = WorkbookParameter.builder().build();\n",
      "        WorkbookRead workbookRead = defaultZouzhiyExcelFactory.getWorkbookRead(workbookParameter, defaultZouzhiyExcelFactory.getConfiguration().getExcelAnnotationParse().findForClass(DemoDefault.class));\n",
      "\n",
      "        assertEquals(workbookParameter, workbookRead.getWorkbookContext().getWorkbookParameter());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getWorkbookRead3() {\n",
      "        DefaultZouzhiyExcelFactory defaultZouzhiyExcelFactory = new DefaultZouzhiyExcelFactory(new Configuration());\n",
      "        WorkbookParameter workbookParameter = WorkbookParameter.builder().build();\n",
      "        WorkbookRead workbookRead1 = defaultZouzhiyExcelFactory.getWorkbookRead(workbookParameter, DemoDefault.class);\n",
      "        WorkbookRead workbookRead2 = defaultZouzhiyExcelFactory.getWorkbookRead(workbookParameter, defaultZouzhiyExcelFactory.getConfiguration().getExcelAnnotationParse().findForClass(DemoDefault.class));\n",
      "\n",
      "        ExcelClassConfig excelClassConfig1 = workbookRead1.getExcelClassConfig();\n",
      "        ExcelClassConfig excelClassConfig2 = workbookRead2.getExcelClassConfig();\n",
      "\n",
      "        assertEquals(excelClassConfig1, excelClassConfig2);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getWorkbookWrite1() {\n",
      "        DefaultZouzhiyExcelFactory defaultZouzhiyExcelFactory = new DefaultZouzhiyExcelFactory(new Configuration());\n",
      "        WorkbookParameter workbookParameter = WorkbookParameter.builder().build();\n",
      "        WorkbookWrite workbookWrite = defaultZouzhiyExcelFactory.getWorkbookWrite(workbookParameter, DemoDefault.class);\n",
      "\n",
      "        assertEquals(workbookParameter, workbookWrite.getWorkbookContext().getWorkbookParameter());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getWorkbookWrite2() {\n",
      "\n",
      "        DefaultZouzhiyExcelFactory defaultZouzhiyExcelFactory = new DefaultZouzhiyExcelFactory(new Configuration());\n",
      "        WorkbookParameter workbookParameter = WorkbookParameter.builder().build();\n",
      "        WorkbookWrite workbookWrite = defaultZouzhiyExcelFactory.getWorkbookWrite(workbookParameter, defaultZouzhiyExcelFactory.getConfiguration().getExcelAnnotationParse().findForClass(DemoDefault.class));\n",
      "\n",
      "        assertEquals(workbookParameter, workbookWrite.getWorkbookContext().getWorkbookParameter());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getWorkbookWrite3() {\n",
      "        DefaultZouzhiyExcelFactory defaultZouzhiyExcelFactory = new DefaultZouzhiyExcelFactory(new Configuration());\n",
      "        WorkbookParameter workbookParameter = WorkbookParameter.builder().build();\n",
      "        WorkbookWrite workbookWrite1 = defaultZouzhiyExcelFactory.getWorkbookWrite(workbookParameter, DemoDefault.class);\n",
      "        WorkbookWrite workbookWrite2 = defaultZouzhiyExcelFactory.getWorkbookWrite(workbookParameter, defaultZouzhiyExcelFactory.getConfiguration().getExcelAnnotationParse().findForClass(DemoDefault.class));\n",
      "\n",
      "        assertEquals(workbookWrite1.getExcelClassConfig(), workbookWrite2.getExcelClassConfig());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void read1() {\n",
      "        DefaultZouzhiyExcelFactory defaultZouzhiyExcelFactory = new DefaultZouzhiyExcelFactory(new Configuration()) {\n",
      "            @Override\n",
      "            public WorkbookRead getWorkbookRead(WorkbookParameter workbookParameter, Class<?> excelClassConfig) {\n",
      "                assertNull(workbookParameter.getInputFileName());\n",
      "                assertNull(workbookParameter.getInputFilePath());\n",
      "                assertNull(workbookParameter.getInputFile());\n",
      "                assertNull(workbookParameter.getInputStream());\n",
      "                return super.getWorkbookRead(workbookParameter, excelClassConfig);\n",
      "            }\n",
      "        };\n",
      "        List<DemoDefault> demoDefaultList = defaultZouzhiyExcelFactory.read().sheet().read(DemoDefault.class);\n",
      "\n",
      "        assertTrue(demoDefaultList.isEmpty());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void read2() {\n",
      "        File writeXlsxFile = TestFileUtils.writeXlsxFile(TestFileUtils.getInputStream(TestFileUtils.getEmptyXlsxFilePath()));\n",
      "        DefaultZouzhiyExcelFactory defaultZouzhiyExcelFactory = new DefaultZouzhiyExcelFactory(new Configuration()) {\n",
      "            @Override\n",
      "            public WorkbookRead getWorkbookRead(WorkbookParameter workbookParameter, Class<?> clazz) {\n",
      "                assertNotNull(workbookParameter.getInputFileName());\n",
      "                assertNotNull(workbookParameter.getInputFilePath());\n",
      "                assertNotNull(workbookParameter.getInputFile());\n",
      "                assertNotNull(workbookParameter.getInputStream());\n",
      "                assertEquals(workbookParameter.getInputFileName(), writeXlsxFile.getName());\n",
      "                assertEquals(workbookParameter.getInputFilePath(), writeXlsxFile.getAbsolutePath());\n",
      "                assertEquals(writeXlsxFile, workbookParameter.getInputFile());\n",
      "                return super.getWorkbookRead(workbookParameter, clazz);\n",
      "            }\n",
      "        };\n",
      "\n",
      "        List<DemoDefault> demoDefaultList = defaultZouzhiyExcelFactory.read(writeXlsxFile).sheet().read(DemoDefault.class);\n",
      "        assertTrue(demoDefaultList.isEmpty());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void read3() {\n",
      "        InputStream inputStream = TestFileUtils.getInputStream(TestFileUtils.getEmptyXlsxFilePath());\n",
      "        DefaultZouzhiyExcelFactory defaultZouzhiyExcelFactory = new DefaultZouzhiyExcelFactory(new Configuration()) {\n",
      "            @Override\n",
      "            public WorkbookRead getWorkbookRead(WorkbookParameter workbookParameter, Class<?> clazz) {\n",
      "                assertNull(workbookParameter.getInputFileName());\n",
      "                assertNull(workbookParameter.getInputFilePath());\n",
      "                assertNull(workbookParameter.getInputFile());\n",
      "                assertNotNull(workbookParameter.getInputStream());\n",
      "                assertEquals(inputStream, workbookParameter.getInputStream());\n",
      "                return super.getWorkbookRead(workbookParameter, clazz);\n",
      "            }\n",
      "        };\n",
      "        List<DemoDefault> demoDefaultList = defaultZouzhiyExcelFactory.read(inputStream).sheet().read(DemoDefault.class);\n",
      "        assertTrue(demoDefaultList.isEmpty());\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void write1() {\n",
      "        DefaultZouzhiyExcelFactory defaultZouzhiyExcelFactory = new DefaultZouzhiyExcelFactory(new Configuration()) {\n",
      "            @Override\n",
      "            public WorkbookWrite getWorkbookWrite(WorkbookParameter workbookParameter, Class<?> excelClassConfig) {\n",
      "                assertNull(workbookParameter.getOutputFileName());\n",
      "                assertNull(workbookParameter.getOutputFilePath());\n",
      "                assertNull(workbookParameter.getOutputFile());\n",
      "                assertNull(workbookParameter.getOutputStream());\n",
      "                return super.getWorkbookWrite(workbookParameter, excelClassConfig);\n",
      "            }\n",
      "\n",
      "        };\n",
      "        try {\n",
      "            defaultZouzhiyExcelFactory.write().sheet().write(Collections.emptyList(), DemoDefault.class);\n",
      "        } catch (Exception e) {\n",
      "            e.printStackTrace();\n",
      "        }\n",
      "\n",
      "        assert true;\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void write2() {\n",
      "        File file = TestFileUtils.getEmptyXlsxFile();\n",
      "        DefaultZouzhiyExcelFactory defaultZouzhiyExcelFactory = new DefaultZouzhiyExcelFactory(new Configuration()) {\n",
      "            @Override\n",
      "            public WorkbookWrite getWorkbookWrite(WorkbookParameter workbookParameter, Class<?> excelClassConfig) {\n",
      "                assertNotNull(workbookParameter.getOutputFileName());\n",
      "                assertNotNull(workbookParameter.getOutputFilePath());\n",
      "                assertNotNull(workbookParameter.getOutputFile());\n",
      "                assertNotNull(workbookParameter.getOutputStream());\n",
      "                return super.getWorkbookWrite(workbookParameter, excelClassConfig);\n",
      "            }\n",
      "\n",
      "        };\n",
      "        defaultZouzhiyExcelFactory.write(file).sheet().write(Collections.emptyList(), DemoDefault.class);\n",
      "\n",
      "        assert true;\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void write3() throws FileNotFoundException {\n",
      "        File file = TestFileUtils.getEmptyXlsFile();\n",
      "        OutputStream outputStream = new FileOutputStream(file);\n",
      "        DefaultZouzhiyExcelFactory defaultZouzhiyExcelFactory = new DefaultZouzhiyExcelFactory(new Configuration()) {\n",
      "            @Override\n",
      "            public WorkbookWrite getWorkbookWrite(WorkbookParameter workbookParameter, Class<?> excelClassConfig) {\n",
      "                assertNull(workbookParameter.getOutputFileName());\n",
      "                assertNull(workbookParameter.getOutputFilePath());\n",
      "                assertNull(workbookParameter.getOutputFile());\n",
      "                assertNotNull(workbookParameter.getOutputStream());\n",
      "                return super.getWorkbookWrite(workbookParameter, excelClassConfig);\n",
      "            }\n",
      "\n",
      "        };\n",
      "        defaultZouzhiyExcelFactory.write(outputStream).sheet().write(Collections.emptyList(), DemoDefault.class);\n",
      "\n",
      "        assert true;\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "DefaultZouzhiyExcelFactory::::getConfiguration()": [
        40,
        43
      ],
      "DefaultZouzhiyExcelFactory::::getWorkbookRead(io.github.zouzhiy.excel.metadata.parameter.WorkbookParameter,java.lang.Class<?>)": [
        45,
        48
      ],
      "DefaultZouzhiyExcelFactory::::getWorkbookRead(io.github.zouzhiy.excel.metadata.parameter.WorkbookParameter,io.github.zouzhiy.excel.metadata.config.ExcelClassConfig)": [
        50,
        53
      ],
      "DefaultZouzhiyExcelFactory::::getWorkbookWrite(io.github.zouzhiy.excel.metadata.parameter.WorkbookParameter,java.lang.Class<?>)": [
        55,
        58
      ],
      "DefaultZouzhiyExcelFactory::::getWorkbookWrite(io.github.zouzhiy.excel.metadata.parameter.WorkbookParameter,io.github.zouzhiy.excel.metadata.config.ExcelClassConfig)": [
        60,
        63
      ],
      "DefaultZouzhiyExcelFactory::::read()": [
        65,
        68
      ],
      "DefaultZouzhiyExcelFactory::::read(java.io.File)": [
        70,
        73
      ],
      "DefaultZouzhiyExcelFactory::::read(java.io.InputStream)": [
        75,
        78
      ],
      "DefaultZouzhiyExcelFactory::::write()": [
        80,
        83
      ],
      "DefaultZouzhiyExcelFactory::::write(java.io.File)": [
        85,
        88
      ],
      "DefaultZouzhiyExcelFactory::::write(java.io.OutputStream)": [
        90,
        93
      ]
    },
    "test_method_lines_dic": {
      "DefaultZouzhiyExcelFactoryTest::::getConfiguration()": [
        24,
        29
      ],
      "DefaultZouzhiyExcelFactoryTest::::getWorkbookRead()": [
        31,
        38
      ],
      "DefaultZouzhiyExcelFactoryTest::::getWorkbookRead2()": [
        40,
        47
      ],
      "DefaultZouzhiyExcelFactoryTest::::getWorkbookRead3()": [
        49,
        60
      ],
      "DefaultZouzhiyExcelFactoryTest::::getWorkbookWrite1()": [
        62,
        69
      ],
      "DefaultZouzhiyExcelFactoryTest::::getWorkbookWrite2()": [
        71,
        79
      ],
      "DefaultZouzhiyExcelFactoryTest::::getWorkbookWrite3()": [
        81,
        89
      ],
      "DefaultZouzhiyExcelFactoryTest::::read1()": [
        91,
        106
      ],
      "DefaultZouzhiyExcelFactoryTest::::read2()": [
        108,
        127
      ],
      "DefaultZouzhiyExcelFactoryTest::::read3()": [
        129,
        145
      ],
      "DefaultZouzhiyExcelFactoryTest::::write1()": [
        148,
        168
      ],
      "DefaultZouzhiyExcelFactoryTest::::write2()": [
        170,
        187
      ],
      "DefaultZouzhiyExcelFactoryTest::::write3()": [
        189,
        207
      ]
    },
    "reverse_method_lines_dic": {
      "40": "DefaultZouzhiyExcelFactory::::getConfiguration()",
      "41": "DefaultZouzhiyExcelFactory::::getConfiguration()",
      "42": "DefaultZouzhiyExcelFactory::::getConfiguration()",
      "43": "DefaultZouzhiyExcelFactory::::getConfiguration()",
      "45": "DefaultZouzhiyExcelFactory::::getWorkbookRead(io.github.zouzhiy.excel.metadata.parameter.WorkbookParameter,java.lang.Class<?>)",
      "46": "DefaultZouzhiyExcelFactory::::getWorkbookRead(io.github.zouzhiy.excel.metadata.parameter.WorkbookParameter,java.lang.Class<?>)",
      "47": "DefaultZouzhiyExcelFactory::::getWorkbookRead(io.github.zouzhiy.excel.metadata.parameter.WorkbookParameter,java.lang.Class<?>)",
      "48": "DefaultZouzhiyExcelFactory::::getWorkbookRead(io.github.zouzhiy.excel.metadata.parameter.WorkbookParameter,java.lang.Class<?>)",
      "50": "DefaultZouzhiyExcelFactory::::getWorkbookRead(io.github.zouzhiy.excel.metadata.parameter.WorkbookParameter,io.github.zouzhiy.excel.metadata.config.ExcelClassConfig)",
      "51": "DefaultZouzhiyExcelFactory::::getWorkbookRead(io.github.zouzhiy.excel.metadata.parameter.WorkbookParameter,io.github.zouzhiy.excel.metadata.config.ExcelClassConfig)",
      "52": "DefaultZouzhiyExcelFactory::::getWorkbookRead(io.github.zouzhiy.excel.metadata.parameter.WorkbookParameter,io.github.zouzhiy.excel.metadata.config.ExcelClassConfig)",
      "53": "DefaultZouzhiyExcelFactory::::getWorkbookRead(io.github.zouzhiy.excel.metadata.parameter.WorkbookParameter,io.github.zouzhiy.excel.metadata.config.ExcelClassConfig)",
      "55": "DefaultZouzhiyExcelFactory::::getWorkbookWrite(io.github.zouzhiy.excel.metadata.parameter.WorkbookParameter,java.lang.Class<?>)",
      "56": "DefaultZouzhiyExcelFactory::::getWorkbookWrite(io.github.zouzhiy.excel.metadata.parameter.WorkbookParameter,java.lang.Class<?>)",
      "57": "DefaultZouzhiyExcelFactory::::getWorkbookWrite(io.github.zouzhiy.excel.metadata.parameter.WorkbookParameter,java.lang.Class<?>)",
      "58": "DefaultZouzhiyExcelFactory::::getWorkbookWrite(io.github.zouzhiy.excel.metadata.parameter.WorkbookParameter,java.lang.Class<?>)",
      "60": "DefaultZouzhiyExcelFactory::::getWorkbookWrite(io.github.zouzhiy.excel.metadata.parameter.WorkbookParameter,io.github.zouzhiy.excel.metadata.config.ExcelClassConfig)",
      "61": "DefaultZouzhiyExcelFactory::::getWorkbookWrite(io.github.zouzhiy.excel.metadata.parameter.WorkbookParameter,io.github.zouzhiy.excel.metadata.config.ExcelClassConfig)",
      "62": "DefaultZouzhiyExcelFactory::::getWorkbookWrite(io.github.zouzhiy.excel.metadata.parameter.WorkbookParameter,io.github.zouzhiy.excel.metadata.config.ExcelClassConfig)",
      "63": "DefaultZouzhiyExcelFactory::::getWorkbookWrite(io.github.zouzhiy.excel.metadata.parameter.WorkbookParameter,io.github.zouzhiy.excel.metadata.config.ExcelClassConfig)",
      "65": "DefaultZouzhiyExcelFactory::::read()",
      "66": "DefaultZouzhiyExcelFactory::::read()",
      "67": "DefaultZouzhiyExcelFactory::::read()",
      "68": "DefaultZouzhiyExcelFactory::::read()",
      "70": "DefaultZouzhiyExcelFactory::::read(java.io.File)",
      "71": "DefaultZouzhiyExcelFactory::::read(java.io.File)",
      "72": "DefaultZouzhiyExcelFactory::::read(java.io.File)",
      "73": "DefaultZouzhiyExcelFactory::::read(java.io.File)",
      "75": "DefaultZouzhiyExcelFactory::::read(java.io.InputStream)",
      "76": "DefaultZouzhiyExcelFactory::::read(java.io.InputStream)",
      "77": "DefaultZouzhiyExcelFactory::::read(java.io.InputStream)",
      "78": "DefaultZouzhiyExcelFactory::::read(java.io.InputStream)",
      "80": "DefaultZouzhiyExcelFactory::::write()",
      "81": "DefaultZouzhiyExcelFactory::::write()",
      "82": "DefaultZouzhiyExcelFactory::::write()",
      "83": "DefaultZouzhiyExcelFactory::::write()",
      "85": "DefaultZouzhiyExcelFactory::::write(java.io.File)",
      "86": "DefaultZouzhiyExcelFactory::::write(java.io.File)",
      "87": "DefaultZouzhiyExcelFactory::::write(java.io.File)",
      "88": "DefaultZouzhiyExcelFactory::::write(java.io.File)",
      "90": "DefaultZouzhiyExcelFactory::::write(java.io.OutputStream)",
      "91": "DefaultZouzhiyExcelFactory::::write(java.io.OutputStream)",
      "92": "DefaultZouzhiyExcelFactory::::write(java.io.OutputStream)",
      "93": "DefaultZouzhiyExcelFactory::::write(java.io.OutputStream)"
    },
    "test_reverse_method_lines_dic": {
      "24": "DefaultZouzhiyExcelFactoryTest::::getConfiguration()",
      "25": "DefaultZouzhiyExcelFactoryTest::::getConfiguration()",
      "26": "DefaultZouzhiyExcelFactoryTest::::getConfiguration()",
      "27": "DefaultZouzhiyExcelFactoryTest::::getConfiguration()",
      "28": "DefaultZouzhiyExcelFactoryTest::::getConfiguration()",
      "29": "DefaultZouzhiyExcelFactoryTest::::getConfiguration()",
      "31": "DefaultZouzhiyExcelFactoryTest::::getWorkbookRead()",
      "32": "DefaultZouzhiyExcelFactoryTest::::getWorkbookRead()",
      "33": "DefaultZouzhiyExcelFactoryTest::::getWorkbookRead()",
      "34": "DefaultZouzhiyExcelFactoryTest::::getWorkbookRead()",
      "35": "DefaultZouzhiyExcelFactoryTest::::getWorkbookRead()",
      "36": "DefaultZouzhiyExcelFactoryTest::::getWorkbookRead()",
      "37": "DefaultZouzhiyExcelFactoryTest::::getWorkbookRead()",
      "38": "DefaultZouzhiyExcelFactoryTest::::getWorkbookRead()",
      "40": "DefaultZouzhiyExcelFactoryTest::::getWorkbookRead2()",
      "41": "DefaultZouzhiyExcelFactoryTest::::getWorkbookRead2()",
      "42": "DefaultZouzhiyExcelFactoryTest::::getWorkbookRead2()",
      "43": "DefaultZouzhiyExcelFactoryTest::::getWorkbookRead2()",
      "44": "DefaultZouzhiyExcelFactoryTest::::getWorkbookRead2()",
      "45": "DefaultZouzhiyExcelFactoryTest::::getWorkbookRead2()",
      "46": "DefaultZouzhiyExcelFactoryTest::::getWorkbookRead2()",
      "47": "DefaultZouzhiyExcelFactoryTest::::getWorkbookRead2()",
      "49": "DefaultZouzhiyExcelFactoryTest::::getWorkbookRead3()",
      "50": "DefaultZouzhiyExcelFactoryTest::::getWorkbookRead3()",
      "51": "DefaultZouzhiyExcelFactoryTest::::getWorkbookRead3()",
      "52": "DefaultZouzhiyExcelFactoryTest::::getWorkbookRead3()",
      "53": "DefaultZouzhiyExcelFactoryTest::::getWorkbookRead3()",
      "54": "DefaultZouzhiyExcelFactoryTest::::getWorkbookRead3()",
      "55": "DefaultZouzhiyExcelFactoryTest::::getWorkbookRead3()",
      "56": "DefaultZouzhiyExcelFactoryTest::::getWorkbookRead3()",
      "57": "DefaultZouzhiyExcelFactoryTest::::getWorkbookRead3()",
      "58": "DefaultZouzhiyExcelFactoryTest::::getWorkbookRead3()",
      "59": "DefaultZouzhiyExcelFactoryTest::::getWorkbookRead3()",
      "60": "DefaultZouzhiyExcelFactoryTest::::getWorkbookRead3()",
      "62": "DefaultZouzhiyExcelFactoryTest::::getWorkbookWrite1()",
      "63": "DefaultZouzhiyExcelFactoryTest::::getWorkbookWrite1()",
      "64": "DefaultZouzhiyExcelFactoryTest::::getWorkbookWrite1()",
      "65": "DefaultZouzhiyExcelFactoryTest::::getWorkbookWrite1()",
      "66": "DefaultZouzhiyExcelFactoryTest::::getWorkbookWrite1()",
      "67": "DefaultZouzhiyExcelFactoryTest::::getWorkbookWrite1()",
      "68": "DefaultZouzhiyExcelFactoryTest::::getWorkbookWrite1()",
      "69": "DefaultZouzhiyExcelFactoryTest::::getWorkbookWrite1()",
      "71": "DefaultZouzhiyExcelFactoryTest::::getWorkbookWrite2()",
      "72": "DefaultZouzhiyExcelFactoryTest::::getWorkbookWrite2()",
      "73": "DefaultZouzhiyExcelFactoryTest::::getWorkbookWrite2()",
      "74": "DefaultZouzhiyExcelFactoryTest::::getWorkbookWrite2()",
      "75": "DefaultZouzhiyExcelFactoryTest::::getWorkbookWrite2()",
      "76": "DefaultZouzhiyExcelFactoryTest::::getWorkbookWrite2()",
      "77": "DefaultZouzhiyExcelFactoryTest::::getWorkbookWrite2()",
      "78": "DefaultZouzhiyExcelFactoryTest::::getWorkbookWrite2()",
      "79": "DefaultZouzhiyExcelFactoryTest::::getWorkbookWrite2()",
      "81": "DefaultZouzhiyExcelFactoryTest::::getWorkbookWrite3()",
      "82": "DefaultZouzhiyExcelFactoryTest::::getWorkbookWrite3()",
      "83": "DefaultZouzhiyExcelFactoryTest::::getWorkbookWrite3()",
      "84": "DefaultZouzhiyExcelFactoryTest::::getWorkbookWrite3()",
      "85": "DefaultZouzhiyExcelFactoryTest::::getWorkbookWrite3()",
      "86": "DefaultZouzhiyExcelFactoryTest::::getWorkbookWrite3()",
      "87": "DefaultZouzhiyExcelFactoryTest::::getWorkbookWrite3()",
      "88": "DefaultZouzhiyExcelFactoryTest::::getWorkbookWrite3()",
      "89": "DefaultZouzhiyExcelFactoryTest::::getWorkbookWrite3()",
      "91": "DefaultZouzhiyExcelFactoryTest::::read1()",
      "92": "DefaultZouzhiyExcelFactoryTest::::read1()",
      "93": "DefaultZouzhiyExcelFactoryTest::::read1()",
      "94": "DefaultZouzhiyExcelFactoryTest::::read1()",
      "95": "DefaultZouzhiyExcelFactoryTest::::read1()",
      "96": "DefaultZouzhiyExcelFactoryTest::::read1()",
      "97": "DefaultZouzhiyExcelFactoryTest::::read1()",
      "98": "DefaultZouzhiyExcelFactoryTest::::read1()",
      "99": "DefaultZouzhiyExcelFactoryTest::::read1()",
      "100": "DefaultZouzhiyExcelFactoryTest::::read1()",
      "101": "DefaultZouzhiyExcelFactoryTest::::read1()",
      "102": "DefaultZouzhiyExcelFactoryTest::::read1()",
      "103": "DefaultZouzhiyExcelFactoryTest::::read1()",
      "104": "DefaultZouzhiyExcelFactoryTest::::read1()",
      "105": "DefaultZouzhiyExcelFactoryTest::::read1()",
      "106": "DefaultZouzhiyExcelFactoryTest::::read1()",
      "108": "DefaultZouzhiyExcelFactoryTest::::read2()",
      "109": "DefaultZouzhiyExcelFactoryTest::::read2()",
      "110": "DefaultZouzhiyExcelFactoryTest::::read2()",
      "111": "DefaultZouzhiyExcelFactoryTest::::read2()",
      "112": "DefaultZouzhiyExcelFactoryTest::::read2()",
      "113": "DefaultZouzhiyExcelFactoryTest::::read2()",
      "114": "DefaultZouzhiyExcelFactoryTest::::read2()",
      "115": "DefaultZouzhiyExcelFactoryTest::::read2()",
      "116": "DefaultZouzhiyExcelFactoryTest::::read2()",
      "117": "DefaultZouzhiyExcelFactoryTest::::read2()",
      "118": "DefaultZouzhiyExcelFactoryTest::::read2()",
      "119": "DefaultZouzhiyExcelFactoryTest::::read2()",
      "120": "DefaultZouzhiyExcelFactoryTest::::read2()",
      "121": "DefaultZouzhiyExcelFactoryTest::::read2()",
      "122": "DefaultZouzhiyExcelFactoryTest::::read2()",
      "123": "DefaultZouzhiyExcelFactoryTest::::read2()",
      "124": "DefaultZouzhiyExcelFactoryTest::::read2()",
      "125": "DefaultZouzhiyExcelFactoryTest::::read2()",
      "126": "DefaultZouzhiyExcelFactoryTest::::read2()",
      "127": "DefaultZouzhiyExcelFactoryTest::::read2()",
      "129": "DefaultZouzhiyExcelFactoryTest::::read3()",
      "130": "DefaultZouzhiyExcelFactoryTest::::read3()",
      "131": "DefaultZouzhiyExcelFactoryTest::::read3()",
      "132": "DefaultZouzhiyExcelFactoryTest::::read3()",
      "133": "DefaultZouzhiyExcelFactoryTest::::read3()",
      "134": "DefaultZouzhiyExcelFactoryTest::::read3()",
      "135": "DefaultZouzhiyExcelFactoryTest::::read3()",
      "136": "DefaultZouzhiyExcelFactoryTest::::read3()",
      "137": "DefaultZouzhiyExcelFactoryTest::::read3()",
      "138": "DefaultZouzhiyExcelFactoryTest::::read3()",
      "139": "DefaultZouzhiyExcelFactoryTest::::read3()",
      "140": "DefaultZouzhiyExcelFactoryTest::::read3()",
      "141": "DefaultZouzhiyExcelFactoryTest::::read3()",
      "142": "DefaultZouzhiyExcelFactoryTest::::read3()",
      "143": "DefaultZouzhiyExcelFactoryTest::::read3()",
      "144": "DefaultZouzhiyExcelFactoryTest::::read3()",
      "145": "DefaultZouzhiyExcelFactoryTest::::read3()",
      "148": "DefaultZouzhiyExcelFactoryTest::::write1()",
      "149": "DefaultZouzhiyExcelFactoryTest::::write1()",
      "150": "DefaultZouzhiyExcelFactoryTest::::write1()",
      "151": "DefaultZouzhiyExcelFactoryTest::::write1()",
      "152": "DefaultZouzhiyExcelFactoryTest::::write1()",
      "153": "DefaultZouzhiyExcelFactoryTest::::write1()",
      "154": "DefaultZouzhiyExcelFactoryTest::::write1()",
      "155": "DefaultZouzhiyExcelFactoryTest::::write1()",
      "156": "DefaultZouzhiyExcelFactoryTest::::write1()",
      "157": "DefaultZouzhiyExcelFactoryTest::::write1()",
      "158": "DefaultZouzhiyExcelFactoryTest::::write1()",
      "159": "DefaultZouzhiyExcelFactoryTest::::write1()",
      "160": "DefaultZouzhiyExcelFactoryTest::::write1()",
      "161": "DefaultZouzhiyExcelFactoryTest::::write1()",
      "162": "DefaultZouzhiyExcelFactoryTest::::write1()",
      "163": "DefaultZouzhiyExcelFactoryTest::::write1()",
      "164": "DefaultZouzhiyExcelFactoryTest::::write1()",
      "165": "DefaultZouzhiyExcelFactoryTest::::write1()",
      "166": "DefaultZouzhiyExcelFactoryTest::::write1()",
      "167": "DefaultZouzhiyExcelFactoryTest::::write1()",
      "168": "DefaultZouzhiyExcelFactoryTest::::write1()",
      "170": "DefaultZouzhiyExcelFactoryTest::::write2()",
      "171": "DefaultZouzhiyExcelFactoryTest::::write2()",
      "172": "DefaultZouzhiyExcelFactoryTest::::write2()",
      "173": "DefaultZouzhiyExcelFactoryTest::::write2()",
      "174": "DefaultZouzhiyExcelFactoryTest::::write2()",
      "175": "DefaultZouzhiyExcelFactoryTest::::write2()",
      "176": "DefaultZouzhiyExcelFactoryTest::::write2()",
      "177": "DefaultZouzhiyExcelFactoryTest::::write2()",
      "178": "DefaultZouzhiyExcelFactoryTest::::write2()",
      "179": "DefaultZouzhiyExcelFactoryTest::::write2()",
      "180": "DefaultZouzhiyExcelFactoryTest::::write2()",
      "181": "DefaultZouzhiyExcelFactoryTest::::write2()",
      "182": "DefaultZouzhiyExcelFactoryTest::::write2()",
      "183": "DefaultZouzhiyExcelFactoryTest::::write2()",
      "184": "DefaultZouzhiyExcelFactoryTest::::write2()",
      "185": "DefaultZouzhiyExcelFactoryTest::::write2()",
      "186": "DefaultZouzhiyExcelFactoryTest::::write2()",
      "187": "DefaultZouzhiyExcelFactoryTest::::write2()",
      "189": "DefaultZouzhiyExcelFactoryTest::::write3()",
      "190": "DefaultZouzhiyExcelFactoryTest::::write3()",
      "191": "DefaultZouzhiyExcelFactoryTest::::write3()",
      "192": "DefaultZouzhiyExcelFactoryTest::::write3()",
      "193": "DefaultZouzhiyExcelFactoryTest::::write3()",
      "194": "DefaultZouzhiyExcelFactoryTest::::write3()",
      "195": "DefaultZouzhiyExcelFactoryTest::::write3()",
      "196": "DefaultZouzhiyExcelFactoryTest::::write3()",
      "197": "DefaultZouzhiyExcelFactoryTest::::write3()",
      "198": "DefaultZouzhiyExcelFactoryTest::::write3()",
      "199": "DefaultZouzhiyExcelFactoryTest::::write3()",
      "200": "DefaultZouzhiyExcelFactoryTest::::write3()",
      "201": "DefaultZouzhiyExcelFactoryTest::::write3()",
      "202": "DefaultZouzhiyExcelFactoryTest::::write3()",
      "203": "DefaultZouzhiyExcelFactoryTest::::write3()",
      "204": "DefaultZouzhiyExcelFactoryTest::::write3()",
      "205": "DefaultZouzhiyExcelFactoryTest::::write3()",
      "206": "DefaultZouzhiyExcelFactoryTest::::write3()",
      "207": "DefaultZouzhiyExcelFactoryTest::::write3()"
    },
    "tests": [
      {
        "test_lines": [
          24,
          29
        ],
        "covered_lines": [
          36,
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          31,
          38
        ],
        "covered_lines": [
          36,
          37,
          38,
          47
        ]
      },
      {
        "test_lines": [
          40,
          47
        ],
        "covered_lines": [
          36,
          37,
          38,
          42,
          52
        ]
      },
      {
        "test_lines": [
          49,
          60
        ],
        "covered_lines": [
          36,
          37,
          38,
          42,
          47,
          52
        ]
      },
      {
        "test_lines": [
          62,
          69
        ],
        "covered_lines": [
          36,
          37,
          38,
          57
        ]
      },
      {
        "test_lines": [
          71,
          79
        ],
        "covered_lines": [
          36,
          37,
          38,
          42,
          62
        ]
      },
      {
        "test_lines": [
          81,
          89
        ],
        "covered_lines": [
          36,
          37,
          38,
          42,
          57,
          62
        ]
      },
      {
        "test_lines": [
          91,
          106
        ],
        "covered_lines": [
          36,
          37,
          38,
          47,
          67
        ]
      },
      {
        "test_lines": [
          108,
          127
        ],
        "covered_lines": [
          36,
          37,
          38,
          47,
          72
        ]
      },
      {
        "test_lines": [
          129,
          145
        ],
        "covered_lines": [
          36,
          37,
          38,
          47,
          77
        ]
      },
      {
        "test_lines": [
          148,
          168
        ],
        "covered_lines": [
          36,
          37,
          38,
          57,
          82
        ]
      },
      {
        "test_lines": [
          170,
          187
        ],
        "covered_lines": [
          36,
          37,
          38,
          57,
          87
        ]
      },
      {
        "test_lines": [
          189,
          207
        ],
        "covered_lines": [
          36,
          37,
          38,
          57,
          92
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/zouzhiy-excel/src/main/java/io/github/zouzhiy/excel/builder/WorkbookWriteBuilder.java": {
    "class_content": [
      "package io.github.zouzhiy.excel.builder;\n",
      "\n",
      "import io.github.zouzhiy.excel.callback.CellStyleConsumer;\n",
      "import io.github.zouzhiy.excel.callback.SheetReadConsumer;\n",
      "import io.github.zouzhiy.excel.callback.SheetWriteConsumer;\n",
      "import io.github.zouzhiy.excel.metadata.parameter.SheetParameter;\n",
      "import io.github.zouzhiy.excel.metadata.parameter.WorkbookParameter;\n",
      "import io.github.zouzhiy.excel.write.WorkbookWrite;\n",
      "\n",
      "import java.io.File;\n",
      "import java.io.InputStream;\n",
      "import java.io.OutputStream;\n",
      "import java.util.List;\n",
      "\n",
      "/**\n",
      " * @author zouzhiy\n",
      " * @since 2022/7/6\n",
      " */\n",
      "public class WorkbookWriteBuilder {\n",
      "\n",
      "    private final ZouzhiyExcelFactory zouzhiyExcelFactory;\n",
      "\n",
      "    private final WorkbookParameter.WorkbookParameterBuilder workbookParameterBuilder;\n",
      "\n",
      "    public WorkbookWriteBuilder(ZouzhiyExcelFactory zouzhiyExcelFactory) {\n",
      "        this.zouzhiyExcelFactory = zouzhiyExcelFactory;\n",
      "        workbookParameterBuilder = WorkbookParameter.builder();\n",
      "    }\n",
      "\n",
      "    public WorkbookWriteBuilder template(File templateFile) {\n",
      "        workbookParameterBuilder.input(templateFile);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public WorkbookWriteBuilder template(InputStream templateInputStream) {\n",
      "        workbookParameterBuilder.input(templateInputStream);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "\n",
      "    public WorkbookWriteBuilder output(File outputFile) {\n",
      "        workbookParameterBuilder.output(outputFile);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public WorkbookWriteBuilder output(OutputStream outputStream) {\n",
      "        workbookParameterBuilder.output(outputStream);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public WorkbookWriteBuilder xssf(boolean xssf) {\n",
      "        workbookParameterBuilder.xssf(xssf);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public WorkbookWriteBuilder cellStyleConsumer(CellStyleConsumer cellStyleConsumer) {\n",
      "        workbookParameterBuilder.cellStyleConsumer(cellStyleConsumer);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public WorkSheetWriteBuilder sheet() {\n",
      "        return new WorkSheetWriteBuilder().sheet(0);\n",
      "    }\n",
      "\n",
      "    public WorkSheetWriteBuilder sheet(String sheetName) {\n",
      "        return new WorkSheetWriteBuilder().sheet(sheetName);\n",
      "    }\n",
      "\n",
      "    public WorkSheetWriteBuilder sheet(Integer sheetIndex) {\n",
      "        return new WorkSheetWriteBuilder().sheet(sheetIndex);\n",
      "    }\n",
      "\n",
      "    public class WorkSheetWriteBuilder {\n",
      "\n",
      "        private final SheetParameter.SheetParameterBuilder sheetParameterBuilder;\n",
      "\n",
      "        public WorkSheetWriteBuilder() {\n",
      "            this.sheetParameterBuilder = SheetParameter.builder();\n",
      "        }\n",
      "\n",
      "        public WorkSheetWriteBuilder sheet(String sheetName) {\n",
      "            sheetParameterBuilder.sheet(sheetName);\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public WorkSheetWriteBuilder sheet(Integer sheetIndex) {\n",
      "            sheetParameterBuilder.sheet(sheetIndex);\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public WorkSheetWriteBuilder title(String title) {\n",
      "            sheetParameterBuilder.title(title);\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public WorkSheetWriteBuilder titleRowStartIndex(Integer titleRowStartIndex) {\n",
      "            sheetParameterBuilder.titleRowStartIndex(titleRowStartIndex);\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public WorkSheetWriteBuilder titleColumnStartIndex(Integer titleColumnStartIndex) {\n",
      "            sheetParameterBuilder.titleColumnStartIndex(titleColumnStartIndex);\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public WorkSheetWriteBuilder headRowStartIndex(Integer headRowStartIndex) {\n",
      "            sheetParameterBuilder.headRowStartIndex(headRowStartIndex);\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public WorkSheetWriteBuilder headColumnStartIndex(Integer headColumnStartIndex) {\n",
      "            sheetParameterBuilder.headColumnStartIndex(headColumnStartIndex);\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public WorkSheetWriteBuilder dataRowStartIndex(Integer dataRowStartIndex) {\n",
      "            sheetParameterBuilder.dataRowStartIndex(dataRowStartIndex);\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public WorkSheetWriteBuilder dataColumnStartIndex(Integer dataColumnStartIndex) {\n",
      "            sheetParameterBuilder.dataColumnStartIndex(dataColumnStartIndex);\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public WorkSheetWriteBuilder sheetReadConsumer(SheetReadConsumer<?> sheetReadConsumer) {\n",
      "            sheetParameterBuilder.sheetReadConsumer(sheetReadConsumer);\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public WorkSheetWriteBuilder sheetWriteConsumer(SheetWriteConsumer<?> sheetWriteConsumer) {\n",
      "            sheetParameterBuilder.sheetWriteConsumer(sheetWriteConsumer);\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public <T> void write(List<T> itemList, Class<T> clazz) {\n",
      "            WorkbookParameter workbookParameter = WorkbookWriteBuilder.this.workbookParameterBuilder\n",
      "                    .sheetParameter(this.sheetParameterBuilder.build())\n",
      "                    .build();\n",
      "\n",
      "            WorkbookWrite workbookWrite = WorkbookWriteBuilder.this.zouzhiyExcelFactory.getWorkbookWrite(workbookParameter, clazz);\n",
      "            workbookWrite.write(itemList);\n",
      "        }\n",
      "\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package io.github.zouzhiy.excel.builder;\n",
      "\n",
      "import io.github.zouzhiy.excel.callback.CellStyleConsumer;\n",
      "import io.github.zouzhiy.excel.callback.SheetReadConsumer;\n",
      "import io.github.zouzhiy.excel.callback.SheetWriteConsumer;\n",
      "import io.github.zouzhiy.excel.exceptions.ExcelException;\n",
      "import io.github.zouzhiy.excel.metadata.Configuration;\n",
      "import io.github.zouzhiy.excel.metadata.parameter.WorkbookParameter;\n",
      "import io.github.zouzhiy.excel.read.WorkbookRead;\n",
      "import io.github.zouzhiy.excel.support.metadata.DemoDefault;\n",
      "import io.github.zouzhiy.excel.support.utils.TestFileUtils;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import java.io.File;\n",
      "import java.io.InputStream;\n",
      "import java.io.OutputStream;\n",
      "import java.util.ArrayList;\n",
      "import java.util.Collections;\n",
      "import java.util.List;\n",
      "import java.util.Random;\n",
      "import java.util.function.BiConsumer;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.*;\n",
      "\n",
      "/**\n",
      " * @author zouzhiy\n",
      " * @since 2022/7/9\n",
      " */\n",
      "class WorkbookWriteBuilderTest {\n",
      "\n",
      "    private final Random random = new Random(System.currentTimeMillis());\n",
      "\n",
      "    @Test\n",
      "    void template1() {\n",
      "        File templateFile = TestFileUtils.getTemplateFile(TestFileUtils.getEmptyXlsxFilePath());\n",
      "        WorkbookWriteBuilder workbookWriteBuilder = this.getWorkbookWriteBuilder((workbookParameter, aClass) -> {\n",
      "            assertNotNull(workbookParameter.getInputFileName());\n",
      "            assertNotNull(workbookParameter.getInputFilePath());\n",
      "            assertNotNull(workbookParameter.getInputFile());\n",
      "            assertNotNull(workbookParameter.getInputStream());\n",
      "\n",
      "            assertEquals(templateFile.getName(), workbookParameter.getInputFileName());\n",
      "            assertEquals(templateFile.getAbsolutePath(), workbookParameter.getInputFilePath());\n",
      "            assertEquals(templateFile, workbookParameter.getInputFile());\n",
      "\n",
      "            assertTrue(workbookParameter.isXssf());\n",
      "\n",
      "        });\n",
      "        workbookWriteBuilder.template(templateFile).output(TestFileUtils.getXlsxOutputStream()).sheet().write(Collections.emptyList(), DemoDefault.class);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void template2() {\n",
      "        InputStream templateInputStream = TestFileUtils.getTemplateInputStream(TestFileUtils.getEmptyXlsxFilePath());\n",
      "        WorkbookWriteBuilder workbookWriteBuilder = this.getWorkbookWriteBuilder((workbookParameter, aClass) -> {\n",
      "            assertNull(workbookParameter.getInputFileName());\n",
      "            assertNull(workbookParameter.getInputFilePath());\n",
      "            assertNull(workbookParameter.getInputFile());\n",
      "            assertNotNull(workbookParameter.getInputStream());\n",
      "\n",
      "            assertTrue(workbookParameter.isXssf());\n",
      "\n",
      "        });\n",
      "        workbookWriteBuilder.template(templateInputStream).output(TestFileUtils.getXlsxOutputStream()).sheet().write(Collections.emptyList(), DemoDefault.class);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void output1() {\n",
      "\n",
      "        WorkbookWriteBuilder workbookWriteBuilder = this.getWorkbookWriteBuilder((workbookParameter, aClass) -> {\n",
      "            assertNull(workbookParameter.getInputFileName());\n",
      "            assertNull(workbookParameter.getInputFilePath());\n",
      "            assertNull(workbookParameter.getInputFile());\n",
      "            assertNull(workbookParameter.getInputStream());\n",
      "\n",
      "            assertTrue(workbookParameter.getCellStyleConsumerList().isEmpty());\n",
      "\n",
      "            assertNull(workbookParameter.getOutputFileName());\n",
      "            assertNull(workbookParameter.getOutputFilePath());\n",
      "            assertNull(workbookParameter.getOutputFile());\n",
      "            assertNull(workbookParameter.getOutputStream());\n",
      "\n",
      "        });\n",
      "        try {\n",
      "            workbookWriteBuilder.sheet().write(Collections.emptyList(), DemoDefault.class);\n",
      "            assert false;\n",
      "        } catch (ExcelException e) {\n",
      "            assert true;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void output2() {\n",
      "        File outputFile = TestFileUtils.getEmptyXlsFile();\n",
      "\n",
      "        WorkbookWriteBuilder workbookWriteBuilder = this.getWorkbookWriteBuilder((workbookParameter, aClass) -> {\n",
      "            assertNull(workbookParameter.getInputFileName());\n",
      "            assertNull(workbookParameter.getInputFilePath());\n",
      "            assertNull(workbookParameter.getInputFile());\n",
      "            assertNull(workbookParameter.getInputStream());\n",
      "\n",
      "            assertTrue(workbookParameter.getCellStyleConsumerList().isEmpty());\n",
      "\n",
      "            assertEquals(outputFile.getName(), workbookParameter.getOutputFileName());\n",
      "            assertEquals(outputFile.getAbsolutePath(), workbookParameter.getOutputFilePath());\n",
      "            assertEquals(outputFile, workbookParameter.getOutputFile());\n",
      "            assertNotNull(workbookParameter.getOutputStream());\n",
      "\n",
      "            assertFalse(workbookParameter.isXssf());\n",
      "\n",
      "        });\n",
      "        workbookWriteBuilder.output(outputFile).sheet().write(Collections.emptyList(), DemoDefault.class);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void output3() {\n",
      "        OutputStream outputStream = TestFileUtils.getXlsxOutputStream();\n",
      "\n",
      "        WorkbookWriteBuilder workbookWriteBuilder = this.getWorkbookWriteBuilder((workbookParameter, aClass) -> {\n",
      "            assertNull(workbookParameter.getInputFileName());\n",
      "            assertNull(workbookParameter.getInputFilePath());\n",
      "            assertNull(workbookParameter.getInputFile());\n",
      "            assertNull(workbookParameter.getInputStream());\n",
      "\n",
      "\n",
      "            assertNull(workbookParameter.getOutputFileName());\n",
      "            assertNull(workbookParameter.getOutputFilePath());\n",
      "            assertNull(workbookParameter.getOutputFile());\n",
      "            assertNotNull(workbookParameter.getOutputStream());\n",
      "\n",
      "            assertTrue(workbookParameter.getCellStyleConsumerList().isEmpty());\n",
      "\n",
      "        });\n",
      "        workbookWriteBuilder.output(outputStream).sheet().write(Collections.emptyList(), DemoDefault.class);\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void xssf1() {\n",
      "        OutputStream outputStream = TestFileUtils.getXlsxOutputStream();\n",
      "\n",
      "        boolean xssf = true;\n",
      "        WorkbookWriteBuilder workbookWriteBuilder = this.getWorkbookWriteBuilder((workbookParameter, aClass) -> {\n",
      "            assertNull(workbookParameter.getInputFileName());\n",
      "            assertNull(workbookParameter.getInputFilePath());\n",
      "            assertNull(workbookParameter.getInputFile());\n",
      "            assertNull(workbookParameter.getInputStream());\n",
      "\n",
      "\n",
      "            assertNull(workbookParameter.getOutputFileName());\n",
      "            assertNull(workbookParameter.getOutputFilePath());\n",
      "            assertNull(workbookParameter.getOutputFile());\n",
      "            assertNotNull(workbookParameter.getOutputStream());\n",
      "\n",
      "            assertTrue(workbookParameter.isXssf());\n",
      "\n",
      "            assertTrue(workbookParameter.getCellStyleConsumerList().isEmpty());\n",
      "\n",
      "        });\n",
      "        workbookWriteBuilder.output(outputStream).xssf(xssf).sheet().write(Collections.emptyList(), DemoDefault.class);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void xssf2() {\n",
      "        File outputFile = TestFileUtils.getEmptyXlsFile();\n",
      "\n",
      "        WorkbookWriteBuilder workbookWriteBuilder = this.getWorkbookWriteBuilder((workbookParameter, aClass) -> {\n",
      "\n",
      "        });\n",
      "        try {\n",
      "            workbookWriteBuilder.output(outputFile).xssf(true).sheet().write(Collections.emptyList(), DemoDefault.class);\n",
      "            assert false;\n",
      "        } catch (ExcelException e) {\n",
      "            e.printStackTrace();\n",
      "            assert true;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void cellStyleConsumer1() {\n",
      "        CellStyleConsumer cellStyleConsumer = new CellStyleConsumer() {\n",
      "        };\n",
      "        OutputStream outputStream = TestFileUtils.getXlsxOutputStream();\n",
      "\n",
      "        WorkbookWriteBuilder workbookReadBuilder = this.getWorkbookWriteBuilder((workbookParameter, aClass) -> {\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetIndex(), 0);\n",
      "            assertNull(workbookParameter.getSheetParameter().getSheetName());\n",
      "            assertNull(workbookParameter.getSheetParameter().getTitle());\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleColumnStartIndex(), 0);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadColumnStartIndex(), 0);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataRowStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataColumnStartIndex(), 0);\n",
      "\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetReadConsumerList().isEmpty());\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetWriteConsumerList().isEmpty());\n",
      "\n",
      "            assertEquals(cellStyleConsumer, workbookParameter.getCellStyleConsumerList().get(0));\n",
      "\n",
      "            assert DemoDefault.class.equals(aClass);\n",
      "\n",
      "        });\n",
      "        workbookReadBuilder.output(outputStream).cellStyleConsumer(cellStyleConsumer).sheet().write(Collections.emptyList(), DemoDefault.class);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void cellStyleConsumer2() {\n",
      "        List<CellStyleConsumer> cellStyleConsumerList = new ArrayList<>();\n",
      "        for (int i = 0; i < random.nextInt(30); i++) {\n",
      "            CellStyleConsumer cellStyleConsumer = new CellStyleConsumer() {\n",
      "            };\n",
      "            cellStyleConsumerList.add(cellStyleConsumer);\n",
      "        }\n",
      "\n",
      "        OutputStream outputStream = TestFileUtils.getXlsxOutputStream();\n",
      "\n",
      "        WorkbookWriteBuilder workbookReadBuilder = this.getWorkbookWriteBuilder((workbookParameter, aClass) -> {\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetIndex(), 0);\n",
      "            assertNull(workbookParameter.getSheetParameter().getSheetName());\n",
      "            assertNull(workbookParameter.getSheetParameter().getTitle());\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleColumnStartIndex(), 0);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadColumnStartIndex(), 0);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataRowStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataColumnStartIndex(), 0);\n",
      "\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetReadConsumerList().isEmpty());\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetWriteConsumerList().isEmpty());\n",
      "            assert DemoDefault.class.equals(aClass);\n",
      "        });\n",
      "        workbookReadBuilder = workbookReadBuilder.output(outputStream);\n",
      "        cellStyleConsumerList.forEach(workbookReadBuilder::cellStyleConsumer);\n",
      "        workbookReadBuilder.sheet().write(Collections.emptyList(), DemoDefault.class);\n",
      "        assert true;\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void sheet1() {\n",
      "        OutputStream outputStream = TestFileUtils.getXlsxOutputStream();\n",
      "\n",
      "        WorkbookWriteBuilder workbookReadBuilder = this.getWorkbookWriteBuilder((workbookParameter, aClass) -> {\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetIndex(), 0);\n",
      "            assertNull(workbookParameter.getSheetParameter().getSheetName());\n",
      "\n",
      "            assertNull(workbookParameter.getSheetParameter().getTitle());\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleColumnStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadColumnStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataRowStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataColumnStartIndex(), 0);\n",
      "\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetReadConsumerList().isEmpty());\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetWriteConsumerList().isEmpty());\n",
      "        });\n",
      "        workbookReadBuilder.output(outputStream).sheet().write(Collections.emptyList(), DemoDefault.class);\n",
      "        assert true;\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void sheet2() {\n",
      "        String sheetName = new Random(System.currentTimeMillis()).nextInt(999) + \"name\";\n",
      "        OutputStream outputStream = TestFileUtils.getXlsxOutputStream();\n",
      "\n",
      "        WorkbookWriteBuilder workbookReadBuilder = this.getWorkbookWriteBuilder((workbookParameter, aClass) -> {\n",
      "            assertNull(workbookParameter.getSheetParameter().getSheetIndex());\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetName(), sheetName);\n",
      "\n",
      "            assertNull(workbookParameter.getSheetParameter().getTitle());\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleColumnStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadColumnStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataRowStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataColumnStartIndex(), 0);\n",
      "\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetReadConsumerList().isEmpty());\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetWriteConsumerList().isEmpty());\n",
      "        });\n",
      "        workbookReadBuilder.output(outputStream).sheet(sheetName).write(Collections.emptyList(), DemoDefault.class);\n",
      "        assert true;\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void sheet3() {\n",
      "        Integer sheetIndex = new Random(System.currentTimeMillis()).nextInt(999);\n",
      "        OutputStream outputStream = TestFileUtils.getXlsxOutputStream();\n",
      "\n",
      "        WorkbookWriteBuilder workbookReadBuilder = this.getWorkbookWriteBuilder((workbookParameter, aClass) -> {\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetIndex(), sheetIndex);\n",
      "            assertNull(workbookParameter.getSheetParameter().getSheetName());\n",
      "            assertNull(workbookParameter.getSheetParameter().getTitle());\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleColumnStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadColumnStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataRowStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataColumnStartIndex(), 0);\n",
      "\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetReadConsumerList().isEmpty());\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetWriteConsumerList().isEmpty());\n",
      "        });\n",
      "        workbookReadBuilder.output(outputStream).sheet(sheetIndex).write(Collections.emptyList(), DemoDefault.class);\n",
      "        assert true;\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void title() {\n",
      "        String title = new Random(System.currentTimeMillis()).nextInt(999) + \"title\";\n",
      "\n",
      "        OutputStream outputStream = TestFileUtils.getXlsxOutputStream();\n",
      "\n",
      "        WorkbookWriteBuilder workbookReadBuilder = this.getWorkbookWriteBuilder((workbookParameter, aClass) -> {\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetIndex(), 0);\n",
      "            assertNull(workbookParameter.getSheetParameter().getSheetName());\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitle(), title);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleColumnStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadColumnStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataRowStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataColumnStartIndex(), 0);\n",
      "\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetReadConsumerList().isEmpty());\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetWriteConsumerList().isEmpty());\n",
      "        });\n",
      "        workbookReadBuilder.output(outputStream).sheet().title(title).write(Collections.emptyList(), DemoDefault.class);\n",
      "        assert true;\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void titleRowStartIndex() {\n",
      "        Integer titleRowStartIndex = random.nextInt(88);\n",
      "        OutputStream outputStream = TestFileUtils.getXlsxOutputStream();\n",
      "\n",
      "        WorkbookWriteBuilder workbookReadBuilder = this.getWorkbookWriteBuilder((workbookParameter, aClass) -> {\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetIndex(), 0);\n",
      "            assertNull(workbookParameter.getSheetParameter().getSheetName());\n",
      "            assertNull(workbookParameter.getSheetParameter().getTitle());\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleRowStartIndex(), titleRowStartIndex);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleColumnStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadColumnStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataRowStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataColumnStartIndex(), 0);\n",
      "\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetReadConsumerList().isEmpty());\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetWriteConsumerList().isEmpty());\n",
      "        });\n",
      "        try {\n",
      "            workbookReadBuilder.output(outputStream).sheet().titleRowStartIndex(titleRowStartIndex).write(Collections.emptyList(), DemoDefault.class);\n",
      "        } catch (Exception ignore) {\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void titleColumnStartIndex() {\n",
      "        Integer titleColumnStartIndex = random.nextInt(88);\n",
      "        OutputStream outputStream = TestFileUtils.getXlsxOutputStream();\n",
      "\n",
      "        WorkbookWriteBuilder workbookReadBuilder = this.getWorkbookWriteBuilder((workbookParameter, aClass) -> {\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetIndex(), 0);\n",
      "            assertNull(workbookParameter.getSheetParameter().getSheetName());\n",
      "            assertNull(workbookParameter.getSheetParameter().getTitle());\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleRowStartIndex(), -1);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleColumnStartIndex(), titleColumnStartIndex);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadColumnStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataRowStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataColumnStartIndex(), 0);\n",
      "\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetReadConsumerList().isEmpty());\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetWriteConsumerList().isEmpty());\n",
      "        });\n",
      "        try {\n",
      "            workbookReadBuilder.output(outputStream).sheet().titleColumnStartIndex(titleColumnStartIndex).write(Collections.emptyList(), DemoDefault.class);\n",
      "        } catch (Exception ignore) {\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void headRowStartIndex() {\n",
      "        Integer headRowStartIndex = random.nextInt(88);\n",
      "        OutputStream outputStream = TestFileUtils.getXlsxOutputStream();\n",
      "\n",
      "        WorkbookWriteBuilder workbookReadBuilder = this.getWorkbookWriteBuilder((workbookParameter, aClass) -> {\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetIndex(), 0);\n",
      "            assertNull(workbookParameter.getSheetParameter().getSheetName());\n",
      "            assertNull(workbookParameter.getSheetParameter().getTitle());\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleRowStartIndex(), headRowStartIndex > 0 ? 0 : -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleColumnStartIndex(), 0);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadRowStartIndex(), headRowStartIndex);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadColumnStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataRowStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataColumnStartIndex(), 0);\n",
      "\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetReadConsumerList().isEmpty());\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetWriteConsumerList().isEmpty());\n",
      "        });\n",
      "        try {\n",
      "            workbookReadBuilder.output(outputStream).sheet().headRowStartIndex(headRowStartIndex).write(Collections.emptyList(), DemoDefault.class);\n",
      "        } catch (Exception ignore) {\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void headColumnStartIndex() {\n",
      "        Integer headColumnStartIndex = random.nextInt(88);\n",
      "        OutputStream outputStream = TestFileUtils.getXlsxOutputStream();\n",
      "\n",
      "        WorkbookWriteBuilder workbookReadBuilder = this.getWorkbookWriteBuilder((workbookParameter, aClass) -> {\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetIndex(), 0);\n",
      "            assertNull(workbookParameter.getSheetParameter().getSheetName());\n",
      "            assertNull(workbookParameter.getSheetParameter().getTitle());\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleColumnStartIndex(), 0);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadColumnStartIndex(), headColumnStartIndex);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataRowStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataColumnStartIndex(), 0);\n",
      "\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetReadConsumerList().isEmpty());\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetWriteConsumerList().isEmpty());\n",
      "        });\n",
      "        try {\n",
      "            workbookReadBuilder.output(outputStream).sheet().headColumnStartIndex(headColumnStartIndex).write(Collections.emptyList(), DemoDefault.class);\n",
      "        } catch (Exception ignore) {\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void dataRowStartIndex() {\n",
      "        for (int i = 0; i < random.nextInt(20); i++) {\n",
      "            final int dataRowStartIndex = i;\n",
      "            OutputStream outputStream = TestFileUtils.getXlsxOutputStream();\n",
      "\n",
      "            WorkbookWriteBuilder workbookReadBuilder = this.getWorkbookWriteBuilder((workbookParameter, aClass) -> {\n",
      "                assertEquals(workbookParameter.getSheetParameter().getSheetIndex(), 0);\n",
      "                assertNull(workbookParameter.getSheetParameter().getSheetName());\n",
      "                assertNull(workbookParameter.getSheetParameter().getTitle());\n",
      "\n",
      "                assertEquals(workbookParameter.getSheetParameter().getTitleRowStartIndex(), dataRowStartIndex > 1 ? 0 : -1);\n",
      "                assertEquals(workbookParameter.getSheetParameter().getTitleColumnStartIndex(), 0);\n",
      "\n",
      "                assertEquals(workbookParameter.getSheetParameter().getHeadRowStartIndex(), dataRowStartIndex - 1);\n",
      "                assertEquals(workbookParameter.getSheetParameter().getHeadColumnStartIndex(), 0);\n",
      "\n",
      "                assertEquals(workbookParameter.getSheetParameter().getDataRowStartIndex(), dataRowStartIndex);\n",
      "                assertEquals(workbookParameter.getSheetParameter().getDataColumnStartIndex(), 0);\n",
      "\n",
      "                assertTrue(workbookParameter.getSheetParameter().getSheetReadConsumerList().isEmpty());\n",
      "                assertTrue(workbookParameter.getSheetParameter().getSheetWriteConsumerList().isEmpty());\n",
      "            });\n",
      "            try {\n",
      "                workbookReadBuilder.output(outputStream).sheet().dataRowStartIndex(dataRowStartIndex).write(Collections.emptyList(), DemoDefault.class);\n",
      "            } catch (Exception ignore) {\n",
      "            }\n",
      "        }\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void dataColumnStartIndex() {\n",
      "        for (int i = 0; i < random.nextInt(20); i++) {\n",
      "            final int dataColumnStartIndex = i;\n",
      "            OutputStream outputStream = TestFileUtils.getXlsxOutputStream();\n",
      "\n",
      "            WorkbookWriteBuilder workbookReadBuilder = this.getWorkbookWriteBuilder((workbookParameter, aClass) -> {\n",
      "                assertEquals(workbookParameter.getSheetParameter().getSheetIndex(), 0);\n",
      "                assertNull(workbookParameter.getSheetParameter().getSheetName());\n",
      "                assertNull(workbookParameter.getSheetParameter().getTitle());\n",
      "\n",
      "                assertEquals(workbookParameter.getSheetParameter().getTitleRowStartIndex(), -1);\n",
      "                assertEquals(workbookParameter.getSheetParameter().getTitleColumnStartIndex(), 0);\n",
      "\n",
      "                assertEquals(workbookParameter.getSheetParameter().getHeadRowStartIndex(), -1);\n",
      "                assertEquals(workbookParameter.getSheetParameter().getHeadColumnStartIndex(), 0);\n",
      "\n",
      "                assertEquals(workbookParameter.getSheetParameter().getDataRowStartIndex(), 0);\n",
      "                assertEquals(workbookParameter.getSheetParameter().getDataColumnStartIndex(), dataColumnStartIndex);\n",
      "\n",
      "                assertTrue(workbookParameter.getSheetParameter().getSheetReadConsumerList().isEmpty());\n",
      "                assertTrue(workbookParameter.getSheetParameter().getSheetWriteConsumerList().isEmpty());\n",
      "                assert DemoDefault.class.equals(aClass);\n",
      "            });\n",
      "            workbookReadBuilder.output(outputStream).sheet().dataColumnStartIndex(dataColumnStartIndex).write(Collections.emptyList(), DemoDefault.class);\n",
      "            assert true;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void sheetReadConsumer1() {\n",
      "\n",
      "        SheetReadConsumer<DemoDefault> sheetReadConsumer = new SheetReadConsumer<DemoDefault>() {\n",
      "        };\n",
      "        OutputStream outputStream = TestFileUtils.getXlsxOutputStream();\n",
      "\n",
      "        WorkbookWriteBuilder workbookReadBuilder = this.getWorkbookWriteBuilder((workbookParameter, aClass) -> {\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetIndex(), 0);\n",
      "            assertNull(workbookParameter.getSheetParameter().getSheetName());\n",
      "            assertNull(workbookParameter.getSheetParameter().getTitle());\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleColumnStartIndex(), 0);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadColumnStartIndex(), 0);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataRowStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataColumnStartIndex(), 0);\n",
      "\n",
      "            assertEquals(sheetReadConsumer, workbookParameter.getSheetParameter().getSheetReadConsumerList().get(0));\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetReadConsumerList().size(), 1);\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetWriteConsumerList().isEmpty());\n",
      "            assert DemoDefault.class.equals(aClass);\n",
      "        });\n",
      "        workbookReadBuilder.output(outputStream).sheet().sheetReadConsumer(sheetReadConsumer).write(Collections.emptyList(), DemoDefault.class);\n",
      "        assert true;\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void sheetReadConsumer2() {\n",
      "\n",
      "        List<SheetReadConsumer<DemoDefault>> sheetReadConsumerList = new ArrayList<>();\n",
      "        for (int i = 0; i < random.nextInt(30); i++) {\n",
      "            SheetReadConsumer<DemoDefault> sheetReadConsumer = new SheetReadConsumer<DemoDefault>() {\n",
      "            };\n",
      "            sheetReadConsumerList.add(sheetReadConsumer);\n",
      "        }\n",
      "\n",
      "        OutputStream outputStream = TestFileUtils.getXlsxOutputStream();\n",
      "\n",
      "        WorkbookWriteBuilder workbookReadBuilder = this.getWorkbookWriteBuilder((workbookParameter, aClass) -> {\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetIndex(), 0);\n",
      "            assertNull(workbookParameter.getSheetParameter().getSheetName());\n",
      "            assertNull(workbookParameter.getSheetParameter().getTitle());\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleColumnStartIndex(), 0);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadColumnStartIndex(), 0);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataRowStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataColumnStartIndex(), 0);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetReadConsumerList().size(), sheetReadConsumerList.size());\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetWriteConsumerList().isEmpty());\n",
      "            assert DemoDefault.class.equals(aClass);\n",
      "        });\n",
      "        WorkbookWriteBuilder.WorkSheetWriteBuilder workSheetReadBuilder = workbookReadBuilder.output(outputStream).sheet();\n",
      "        sheetReadConsumerList.forEach(workSheetReadBuilder::sheetReadConsumer);\n",
      "        workSheetReadBuilder.write(Collections.emptyList(), DemoDefault.class);\n",
      "        assert true;\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void sheetWriteConsumer1() {\n",
      "        SheetWriteConsumer<DemoDefault> sheetWriteConsumer = new SheetWriteConsumer<DemoDefault>() {\n",
      "        };\n",
      "        OutputStream outputStream = TestFileUtils.getXlsxOutputStream();\n",
      "\n",
      "        WorkbookWriteBuilder workbookReadBuilder = this.getWorkbookWriteBuilder((workbookParameter, aClass) -> {\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetIndex(), 0);\n",
      "            assertNull(workbookParameter.getSheetParameter().getSheetName());\n",
      "            assertNull(workbookParameter.getSheetParameter().getTitle());\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleColumnStartIndex(), 0);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadColumnStartIndex(), 0);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataRowStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataColumnStartIndex(), 0);\n",
      "\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetReadConsumerList().isEmpty());\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetWriteConsumerList().size(), 1);\n",
      "\n",
      "            assertEquals(sheetWriteConsumer, workbookParameter.getSheetParameter().getSheetWriteConsumerList().get(0));\n",
      "\n",
      "            assert DemoDefault.class.equals(aClass);\n",
      "\n",
      "        });\n",
      "        workbookReadBuilder.output(outputStream).sheet().sheetWriteConsumer(sheetWriteConsumer).write(Collections.emptyList(), DemoDefault.class);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void sheetWriteConsumer2() {\n",
      "        List<SheetWriteConsumer<DemoDefault>> sheetWriteConsumerList = new ArrayList<>();\n",
      "        for (int i = 0; i < random.nextInt(30); i++) {\n",
      "            SheetWriteConsumer<DemoDefault> sheetReadConsumer = new SheetWriteConsumer<DemoDefault>() {\n",
      "            };\n",
      "            sheetWriteConsumerList.add(sheetReadConsumer);\n",
      "        }\n",
      "\n",
      "        OutputStream outputStream = TestFileUtils.getXlsxOutputStream();\n",
      "\n",
      "        WorkbookWriteBuilder workbookReadBuilder = this.getWorkbookWriteBuilder((workbookParameter, aClass) -> {\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetIndex(), 0);\n",
      "            assertNull(workbookParameter.getSheetParameter().getSheetName());\n",
      "            assertNull(workbookParameter.getSheetParameter().getTitle());\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleColumnStartIndex(), 0);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadColumnStartIndex(), 0);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataRowStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataColumnStartIndex(), 0);\n",
      "\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetReadConsumerList().isEmpty());\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetWriteConsumerList().size(), sheetWriteConsumerList.size());\n",
      "\n",
      "            assert DemoDefault.class.equals(aClass);\n",
      "        });\n",
      "        WorkbookWriteBuilder.WorkSheetWriteBuilder workSheetReadBuilder = workbookReadBuilder.output(outputStream).sheet();\n",
      "        sheetWriteConsumerList.forEach(workSheetReadBuilder::sheetWriteConsumer);\n",
      "        workSheetReadBuilder.write(Collections.emptyList(), DemoDefault.class);\n",
      "        assert true;\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void write() {\n",
      "        OutputStream outputStream = TestFileUtils.getXlsxOutputStream();\n",
      "        WorkbookWriteBuilder workbookReadBuilder = this.getWorkbookWriteBuilder((workbookParameter, aClass) -> {\n",
      "            assertEquals(workbookParameter.getSheetParameter().getSheetIndex(), 0);\n",
      "            assertNull(workbookParameter.getSheetParameter().getSheetName());\n",
      "            assertNull(workbookParameter.getSheetParameter().getTitle());\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getTitleColumnStartIndex(), 0);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadRowStartIndex(), -1);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getHeadColumnStartIndex(), 0);\n",
      "\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataRowStartIndex(), 0);\n",
      "            assertEquals(workbookParameter.getSheetParameter().getDataColumnStartIndex(), 0);\n",
      "\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetReadConsumerList().isEmpty());\n",
      "            assertTrue(workbookParameter.getSheetParameter().getSheetWriteConsumerList().isEmpty());\n",
      "\n",
      "            assert DemoDefault.class.equals(aClass);\n",
      "        });\n",
      "        workbookReadBuilder.output(outputStream).sheet().write(Collections.emptyList(), DemoDefault.class);\n",
      "        assert true;\n",
      "    }\n",
      "\n",
      "    private WorkbookWriteBuilder getWorkbookWriteBuilder(BiConsumer<WorkbookParameter, Class<?>> biConsumer) {\n",
      "        return new WorkbookWriteBuilder(this.getDefaultZouzhiyExcelFactory(biConsumer));\n",
      "    }\n",
      "\n",
      "    private DefaultZouzhiyExcelFactory getDefaultZouzhiyExcelFactory(BiConsumer<WorkbookParameter, Class<?>>\n",
      "                                                                             biConsumer) {\n",
      "        return new DefaultZouzhiyExcelFactory(new Configuration()) {\n",
      "            @Override\n",
      "            public WorkbookRead getWorkbookRead(WorkbookParameter workbookParameter, Class<?> clazz) {\n",
      "                biConsumer.accept(workbookParameter, clazz);\n",
      "                return super.getWorkbookRead(workbookParameter, clazz);\n",
      "            }\n",
      "        };\n",
      "    }\n",
      "\n",
      "\n",
      "}\n"
    ],
    "method_lines_dic": {
      "WorkbookWriteBuilder::::template(java.io.File)": [
        30,
        33
      ],
      "WorkbookWriteBuilder::::template(java.io.InputStream)": [
        35,
        38
      ],
      "WorkbookWriteBuilder::::output(java.io.File)": [
        41,
        44
      ],
      "WorkbookWriteBuilder::::output(java.io.OutputStream)": [
        46,
        49
      ],
      "WorkbookWriteBuilder::::xssf(boolean)": [
        51,
        54
      ],
      "WorkbookWriteBuilder::::cellStyleConsumer(io.github.zouzhiy.excel.callback.CellStyleConsumer)": [
        56,
        59
      ],
      "WorkbookWriteBuilder::::sheet()": [
        61,
        63
      ],
      "WorkbookWriteBuilder::::sheet(java.lang.String)": [
        65,
        67
      ],
      "WorkbookWriteBuilder::::sheet(java.lang.Integer)": [
        69,
        71
      ],
      "WorkbookWriteBuilder.WorkSheetWriteBuilder::::sheet(java.lang.String)": [
        81,
        84
      ],
      "WorkbookWriteBuilder.WorkSheetWriteBuilder::::sheet(java.lang.Integer)": [
        86,
        89
      ],
      "WorkbookWriteBuilder.WorkSheetWriteBuilder::::title(java.lang.String)": [
        91,
        94
      ],
      "WorkbookWriteBuilder.WorkSheetWriteBuilder::::titleRowStartIndex(java.lang.Integer)": [
        96,
        99
      ],
      "WorkbookWriteBuilder.WorkSheetWriteBuilder::::titleColumnStartIndex(java.lang.Integer)": [
        101,
        104
      ],
      "WorkbookWriteBuilder.WorkSheetWriteBuilder::::headRowStartIndex(java.lang.Integer)": [
        106,
        109
      ],
      "WorkbookWriteBuilder.WorkSheetWriteBuilder::::headColumnStartIndex(java.lang.Integer)": [
        111,
        114
      ],
      "WorkbookWriteBuilder.WorkSheetWriteBuilder::::dataRowStartIndex(java.lang.Integer)": [
        116,
        119
      ],
      "WorkbookWriteBuilder.WorkSheetWriteBuilder::::dataColumnStartIndex(java.lang.Integer)": [
        121,
        124
      ],
      "WorkbookWriteBuilder.WorkSheetWriteBuilder::::sheetReadConsumer(io.github.zouzhiy.excel.callback.SheetReadConsumer<?>)": [
        126,
        129
      ],
      "WorkbookWriteBuilder.WorkSheetWriteBuilder::::sheetWriteConsumer(io.github.zouzhiy.excel.callback.SheetWriteConsumer<?>)": [
        131,
        134
      ],
      "WorkbookWriteBuilder.WorkSheetWriteBuilder::::write(java.util.List<T>,java.lang.Class<T>)": [
        136,
        143
      ]
    },
    "test_method_lines_dic": {
      "WorkbookWriteBuilderTest::::template1()": [
        33,
        50
      ],
      "WorkbookWriteBuilderTest::::template2()": [
        52,
        65
      ],
      "WorkbookWriteBuilderTest::::output1()": [
        67,
        90
      ],
      "WorkbookWriteBuilderTest::::output2()": [
        92,
        113
      ],
      "WorkbookWriteBuilderTest::::output3()": [
        115,
        135
      ],
      "WorkbookWriteBuilderTest::::xssf1()": [
        138,
        161
      ],
      "WorkbookWriteBuilderTest::::xssf2()": [
        163,
        177
      ],
      "WorkbookWriteBuilderTest::::cellStyleConsumer1()": [
        179,
        208
      ],
      "WorkbookWriteBuilderTest::::cellStyleConsumer2()": [
        210,
        244
      ],
      "WorkbookWriteBuilderTest::::sheet1()": [
        246,
        267
      ],
      "WorkbookWriteBuilderTest::::sheet2()": [
        269,
        291
      ],
      "WorkbookWriteBuilderTest::::sheet3()": [
        293,
        314
      ],
      "WorkbookWriteBuilderTest::::title()": [
        317,
        341
      ],
      "WorkbookWriteBuilderTest::::titleRowStartIndex()": [
        343,
        368
      ],
      "WorkbookWriteBuilderTest::::titleColumnStartIndex()": [
        370,
        396
      ],
      "WorkbookWriteBuilderTest::::headRowStartIndex()": [
        398,
        423
      ],
      "WorkbookWriteBuilderTest::::headColumnStartIndex()": [
        425,
        450
      ],
      "WorkbookWriteBuilderTest::::dataRowStartIndex()": [
        452,
        481
      ],
      "WorkbookWriteBuilderTest::::dataColumnStartIndex()": [
        483,
        510
      ],
      "WorkbookWriteBuilderTest::::sheetReadConsumer1()": [
        512,
        541
      ],
      "WorkbookWriteBuilderTest::::sheetReadConsumer2()": [
        543,
        577
      ],
      "WorkbookWriteBuilderTest::::sheetWriteConsumer1()": [
        579,
        608
      ],
      "WorkbookWriteBuilderTest::::sheetWriteConsumer2()": [
        610,
        644
      ],
      "WorkbookWriteBuilderTest::::write()": [
        646,
        670
      ]
    },
    "reverse_method_lines_dic": {
      "30": "WorkbookWriteBuilder::::template(java.io.File)",
      "31": "WorkbookWriteBuilder::::template(java.io.File)",
      "32": "WorkbookWriteBuilder::::template(java.io.File)",
      "33": "WorkbookWriteBuilder::::template(java.io.File)",
      "35": "WorkbookWriteBuilder::::template(java.io.InputStream)",
      "36": "WorkbookWriteBuilder::::template(java.io.InputStream)",
      "37": "WorkbookWriteBuilder::::template(java.io.InputStream)",
      "38": "WorkbookWriteBuilder::::template(java.io.InputStream)",
      "41": "WorkbookWriteBuilder::::output(java.io.File)",
      "42": "WorkbookWriteBuilder::::output(java.io.File)",
      "43": "WorkbookWriteBuilder::::output(java.io.File)",
      "44": "WorkbookWriteBuilder::::output(java.io.File)",
      "46": "WorkbookWriteBuilder::::output(java.io.OutputStream)",
      "47": "WorkbookWriteBuilder::::output(java.io.OutputStream)",
      "48": "WorkbookWriteBuilder::::output(java.io.OutputStream)",
      "49": "WorkbookWriteBuilder::::output(java.io.OutputStream)",
      "51": "WorkbookWriteBuilder::::xssf(boolean)",
      "52": "WorkbookWriteBuilder::::xssf(boolean)",
      "53": "WorkbookWriteBuilder::::xssf(boolean)",
      "54": "WorkbookWriteBuilder::::xssf(boolean)",
      "56": "WorkbookWriteBuilder::::cellStyleConsumer(io.github.zouzhiy.excel.callback.CellStyleConsumer)",
      "57": "WorkbookWriteBuilder::::cellStyleConsumer(io.github.zouzhiy.excel.callback.CellStyleConsumer)",
      "58": "WorkbookWriteBuilder::::cellStyleConsumer(io.github.zouzhiy.excel.callback.CellStyleConsumer)",
      "59": "WorkbookWriteBuilder::::cellStyleConsumer(io.github.zouzhiy.excel.callback.CellStyleConsumer)",
      "61": "WorkbookWriteBuilder::::sheet()",
      "62": "WorkbookWriteBuilder::::sheet()",
      "63": "WorkbookWriteBuilder::::sheet()",
      "65": "WorkbookWriteBuilder::::sheet(java.lang.String)",
      "66": "WorkbookWriteBuilder::::sheet(java.lang.String)",
      "67": "WorkbookWriteBuilder::::sheet(java.lang.String)",
      "69": "WorkbookWriteBuilder::::sheet(java.lang.Integer)",
      "70": "WorkbookWriteBuilder::::sheet(java.lang.Integer)",
      "71": "WorkbookWriteBuilder::::sheet(java.lang.Integer)",
      "81": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::sheet(java.lang.String)",
      "82": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::sheet(java.lang.String)",
      "83": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::sheet(java.lang.String)",
      "84": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::sheet(java.lang.String)",
      "86": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::sheet(java.lang.Integer)",
      "87": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::sheet(java.lang.Integer)",
      "88": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::sheet(java.lang.Integer)",
      "89": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::sheet(java.lang.Integer)",
      "91": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::title(java.lang.String)",
      "92": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::title(java.lang.String)",
      "93": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::title(java.lang.String)",
      "94": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::title(java.lang.String)",
      "96": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::titleRowStartIndex(java.lang.Integer)",
      "97": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::titleRowStartIndex(java.lang.Integer)",
      "98": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::titleRowStartIndex(java.lang.Integer)",
      "99": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::titleRowStartIndex(java.lang.Integer)",
      "101": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::titleColumnStartIndex(java.lang.Integer)",
      "102": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::titleColumnStartIndex(java.lang.Integer)",
      "103": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::titleColumnStartIndex(java.lang.Integer)",
      "104": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::titleColumnStartIndex(java.lang.Integer)",
      "106": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::headRowStartIndex(java.lang.Integer)",
      "107": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::headRowStartIndex(java.lang.Integer)",
      "108": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::headRowStartIndex(java.lang.Integer)",
      "109": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::headRowStartIndex(java.lang.Integer)",
      "111": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::headColumnStartIndex(java.lang.Integer)",
      "112": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::headColumnStartIndex(java.lang.Integer)",
      "113": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::headColumnStartIndex(java.lang.Integer)",
      "114": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::headColumnStartIndex(java.lang.Integer)",
      "116": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::dataRowStartIndex(java.lang.Integer)",
      "117": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::dataRowStartIndex(java.lang.Integer)",
      "118": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::dataRowStartIndex(java.lang.Integer)",
      "119": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::dataRowStartIndex(java.lang.Integer)",
      "121": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::dataColumnStartIndex(java.lang.Integer)",
      "122": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::dataColumnStartIndex(java.lang.Integer)",
      "123": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::dataColumnStartIndex(java.lang.Integer)",
      "124": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::dataColumnStartIndex(java.lang.Integer)",
      "126": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::sheetReadConsumer(io.github.zouzhiy.excel.callback.SheetReadConsumer<?>)",
      "127": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::sheetReadConsumer(io.github.zouzhiy.excel.callback.SheetReadConsumer<?>)",
      "128": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::sheetReadConsumer(io.github.zouzhiy.excel.callback.SheetReadConsumer<?>)",
      "129": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::sheetReadConsumer(io.github.zouzhiy.excel.callback.SheetReadConsumer<?>)",
      "131": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::sheetWriteConsumer(io.github.zouzhiy.excel.callback.SheetWriteConsumer<?>)",
      "132": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::sheetWriteConsumer(io.github.zouzhiy.excel.callback.SheetWriteConsumer<?>)",
      "133": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::sheetWriteConsumer(io.github.zouzhiy.excel.callback.SheetWriteConsumer<?>)",
      "134": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::sheetWriteConsumer(io.github.zouzhiy.excel.callback.SheetWriteConsumer<?>)",
      "136": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::write(java.util.List<T>,java.lang.Class<T>)",
      "137": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::write(java.util.List<T>,java.lang.Class<T>)",
      "138": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::write(java.util.List<T>,java.lang.Class<T>)",
      "139": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::write(java.util.List<T>,java.lang.Class<T>)",
      "140": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::write(java.util.List<T>,java.lang.Class<T>)",
      "141": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::write(java.util.List<T>,java.lang.Class<T>)",
      "142": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::write(java.util.List<T>,java.lang.Class<T>)",
      "143": "WorkbookWriteBuilder.WorkSheetWriteBuilder::::write(java.util.List<T>,java.lang.Class<T>)"
    },
    "test_reverse_method_lines_dic": {
      "33": "WorkbookWriteBuilderTest::::template1()",
      "34": "WorkbookWriteBuilderTest::::template1()",
      "35": "WorkbookWriteBuilderTest::::template1()",
      "36": "WorkbookWriteBuilderTest::::template1()",
      "37": "WorkbookWriteBuilderTest::::template1()",
      "38": "WorkbookWriteBuilderTest::::template1()",
      "39": "WorkbookWriteBuilderTest::::template1()",
      "40": "WorkbookWriteBuilderTest::::template1()",
      "41": "WorkbookWriteBuilderTest::::template1()",
      "42": "WorkbookWriteBuilderTest::::template1()",
      "43": "WorkbookWriteBuilderTest::::template1()",
      "44": "WorkbookWriteBuilderTest::::template1()",
      "45": "WorkbookWriteBuilderTest::::template1()",
      "46": "WorkbookWriteBuilderTest::::template1()",
      "47": "WorkbookWriteBuilderTest::::template1()",
      "48": "WorkbookWriteBuilderTest::::template1()",
      "49": "WorkbookWriteBuilderTest::::template1()",
      "50": "WorkbookWriteBuilderTest::::template1()",
      "52": "WorkbookWriteBuilderTest::::template2()",
      "53": "WorkbookWriteBuilderTest::::template2()",
      "54": "WorkbookWriteBuilderTest::::template2()",
      "55": "WorkbookWriteBuilderTest::::template2()",
      "56": "WorkbookWriteBuilderTest::::template2()",
      "57": "WorkbookWriteBuilderTest::::template2()",
      "58": "WorkbookWriteBuilderTest::::template2()",
      "59": "WorkbookWriteBuilderTest::::template2()",
      "60": "WorkbookWriteBuilderTest::::template2()",
      "61": "WorkbookWriteBuilderTest::::template2()",
      "62": "WorkbookWriteBuilderTest::::template2()",
      "63": "WorkbookWriteBuilderTest::::template2()",
      "64": "WorkbookWriteBuilderTest::::template2()",
      "65": "WorkbookWriteBuilderTest::::template2()",
      "67": "WorkbookWriteBuilderTest::::output1()",
      "68": "WorkbookWriteBuilderTest::::output1()",
      "69": "WorkbookWriteBuilderTest::::output1()",
      "70": "WorkbookWriteBuilderTest::::output1()",
      "71": "WorkbookWriteBuilderTest::::output1()",
      "72": "WorkbookWriteBuilderTest::::output1()",
      "73": "WorkbookWriteBuilderTest::::output1()",
      "74": "WorkbookWriteBuilderTest::::output1()",
      "75": "WorkbookWriteBuilderTest::::output1()",
      "76": "WorkbookWriteBuilderTest::::output1()",
      "77": "WorkbookWriteBuilderTest::::output1()",
      "78": "WorkbookWriteBuilderTest::::output1()",
      "79": "WorkbookWriteBuilderTest::::output1()",
      "80": "WorkbookWriteBuilderTest::::output1()",
      "81": "WorkbookWriteBuilderTest::::output1()",
      "82": "WorkbookWriteBuilderTest::::output1()",
      "83": "WorkbookWriteBuilderTest::::output1()",
      "84": "WorkbookWriteBuilderTest::::output1()",
      "85": "WorkbookWriteBuilderTest::::output1()",
      "86": "WorkbookWriteBuilderTest::::output1()",
      "87": "WorkbookWriteBuilderTest::::output1()",
      "88": "WorkbookWriteBuilderTest::::output1()",
      "89": "WorkbookWriteBuilderTest::::output1()",
      "90": "WorkbookWriteBuilderTest::::output1()",
      "92": "WorkbookWriteBuilderTest::::output2()",
      "93": "WorkbookWriteBuilderTest::::output2()",
      "94": "WorkbookWriteBuilderTest::::output2()",
      "95": "WorkbookWriteBuilderTest::::output2()",
      "96": "WorkbookWriteBuilderTest::::output2()",
      "97": "WorkbookWriteBuilderTest::::output2()",
      "98": "WorkbookWriteBuilderTest::::output2()",
      "99": "WorkbookWriteBuilderTest::::output2()",
      "100": "WorkbookWriteBuilderTest::::output2()",
      "101": "WorkbookWriteBuilderTest::::output2()",
      "102": "WorkbookWriteBuilderTest::::output2()",
      "103": "WorkbookWriteBuilderTest::::output2()",
      "104": "WorkbookWriteBuilderTest::::output2()",
      "105": "WorkbookWriteBuilderTest::::output2()",
      "106": "WorkbookWriteBuilderTest::::output2()",
      "107": "WorkbookWriteBuilderTest::::output2()",
      "108": "WorkbookWriteBuilderTest::::output2()",
      "109": "WorkbookWriteBuilderTest::::output2()",
      "110": "WorkbookWriteBuilderTest::::output2()",
      "111": "WorkbookWriteBuilderTest::::output2()",
      "112": "WorkbookWriteBuilderTest::::output2()",
      "113": "WorkbookWriteBuilderTest::::output2()",
      "115": "WorkbookWriteBuilderTest::::output3()",
      "116": "WorkbookWriteBuilderTest::::output3()",
      "117": "WorkbookWriteBuilderTest::::output3()",
      "118": "WorkbookWriteBuilderTest::::output3()",
      "119": "WorkbookWriteBuilderTest::::output3()",
      "120": "WorkbookWriteBuilderTest::::output3()",
      "121": "WorkbookWriteBuilderTest::::output3()",
      "122": "WorkbookWriteBuilderTest::::output3()",
      "123": "WorkbookWriteBuilderTest::::output3()",
      "124": "WorkbookWriteBuilderTest::::output3()",
      "125": "WorkbookWriteBuilderTest::::output3()",
      "126": "WorkbookWriteBuilderTest::::output3()",
      "127": "WorkbookWriteBuilderTest::::output3()",
      "128": "WorkbookWriteBuilderTest::::output3()",
      "129": "WorkbookWriteBuilderTest::::output3()",
      "130": "WorkbookWriteBuilderTest::::output3()",
      "131": "WorkbookWriteBuilderTest::::output3()",
      "132": "WorkbookWriteBuilderTest::::output3()",
      "133": "WorkbookWriteBuilderTest::::output3()",
      "134": "WorkbookWriteBuilderTest::::output3()",
      "135": "WorkbookWriteBuilderTest::::output3()",
      "138": "WorkbookWriteBuilderTest::::xssf1()",
      "139": "WorkbookWriteBuilderTest::::xssf1()",
      "140": "WorkbookWriteBuilderTest::::xssf1()",
      "141": "WorkbookWriteBuilderTest::::xssf1()",
      "142": "WorkbookWriteBuilderTest::::xssf1()",
      "143": "WorkbookWriteBuilderTest::::xssf1()",
      "144": "WorkbookWriteBuilderTest::::xssf1()",
      "145": "WorkbookWriteBuilderTest::::xssf1()",
      "146": "WorkbookWriteBuilderTest::::xssf1()",
      "147": "WorkbookWriteBuilderTest::::xssf1()",
      "148": "WorkbookWriteBuilderTest::::xssf1()",
      "149": "WorkbookWriteBuilderTest::::xssf1()",
      "150": "WorkbookWriteBuilderTest::::xssf1()",
      "151": "WorkbookWriteBuilderTest::::xssf1()",
      "152": "WorkbookWriteBuilderTest::::xssf1()",
      "153": "WorkbookWriteBuilderTest::::xssf1()",
      "154": "WorkbookWriteBuilderTest::::xssf1()",
      "155": "WorkbookWriteBuilderTest::::xssf1()",
      "156": "WorkbookWriteBuilderTest::::xssf1()",
      "157": "WorkbookWriteBuilderTest::::xssf1()",
      "158": "WorkbookWriteBuilderTest::::xssf1()",
      "159": "WorkbookWriteBuilderTest::::xssf1()",
      "160": "WorkbookWriteBuilderTest::::xssf1()",
      "161": "WorkbookWriteBuilderTest::::xssf1()",
      "163": "WorkbookWriteBuilderTest::::xssf2()",
      "164": "WorkbookWriteBuilderTest::::xssf2()",
      "165": "WorkbookWriteBuilderTest::::xssf2()",
      "166": "WorkbookWriteBuilderTest::::xssf2()",
      "167": "WorkbookWriteBuilderTest::::xssf2()",
      "168": "WorkbookWriteBuilderTest::::xssf2()",
      "169": "WorkbookWriteBuilderTest::::xssf2()",
      "170": "WorkbookWriteBuilderTest::::xssf2()",
      "171": "WorkbookWriteBuilderTest::::xssf2()",
      "172": "WorkbookWriteBuilderTest::::xssf2()",
      "173": "WorkbookWriteBuilderTest::::xssf2()",
      "174": "WorkbookWriteBuilderTest::::xssf2()",
      "175": "WorkbookWriteBuilderTest::::xssf2()",
      "176": "WorkbookWriteBuilderTest::::xssf2()",
      "177": "WorkbookWriteBuilderTest::::xssf2()",
      "179": "WorkbookWriteBuilderTest::::cellStyleConsumer1()",
      "180": "WorkbookWriteBuilderTest::::cellStyleConsumer1()",
      "181": "WorkbookWriteBuilderTest::::cellStyleConsumer1()",
      "182": "WorkbookWriteBuilderTest::::cellStyleConsumer1()",
      "183": "WorkbookWriteBuilderTest::::cellStyleConsumer1()",
      "184": "WorkbookWriteBuilderTest::::cellStyleConsumer1()",
      "185": "WorkbookWriteBuilderTest::::cellStyleConsumer1()",
      "186": "WorkbookWriteBuilderTest::::cellStyleConsumer1()",
      "187": "WorkbookWriteBuilderTest::::cellStyleConsumer1()",
      "188": "WorkbookWriteBuilderTest::::cellStyleConsumer1()",
      "189": "WorkbookWriteBuilderTest::::cellStyleConsumer1()",
      "190": "WorkbookWriteBuilderTest::::cellStyleConsumer1()",
      "191": "WorkbookWriteBuilderTest::::cellStyleConsumer1()",
      "192": "WorkbookWriteBuilderTest::::cellStyleConsumer1()",
      "193": "WorkbookWriteBuilderTest::::cellStyleConsumer1()",
      "194": "WorkbookWriteBuilderTest::::cellStyleConsumer1()",
      "195": "WorkbookWriteBuilderTest::::cellStyleConsumer1()",
      "196": "WorkbookWriteBuilderTest::::cellStyleConsumer1()",
      "197": "WorkbookWriteBuilderTest::::cellStyleConsumer1()",
      "198": "WorkbookWriteBuilderTest::::cellStyleConsumer1()",
      "199": "WorkbookWriteBuilderTest::::cellStyleConsumer1()",
      "200": "WorkbookWriteBuilderTest::::cellStyleConsumer1()",
      "201": "WorkbookWriteBuilderTest::::cellStyleConsumer1()",
      "202": "WorkbookWriteBuilderTest::::cellStyleConsumer1()",
      "203": "WorkbookWriteBuilderTest::::cellStyleConsumer1()",
      "204": "WorkbookWriteBuilderTest::::cellStyleConsumer1()",
      "205": "WorkbookWriteBuilderTest::::cellStyleConsumer1()",
      "206": "WorkbookWriteBuilderTest::::cellStyleConsumer1()",
      "207": "WorkbookWriteBuilderTest::::cellStyleConsumer1()",
      "208": "WorkbookWriteBuilderTest::::cellStyleConsumer1()",
      "210": "WorkbookWriteBuilderTest::::cellStyleConsumer2()",
      "211": "WorkbookWriteBuilderTest::::cellStyleConsumer2()",
      "212": "WorkbookWriteBuilderTest::::cellStyleConsumer2()",
      "213": "WorkbookWriteBuilderTest::::cellStyleConsumer2()",
      "214": "WorkbookWriteBuilderTest::::cellStyleConsumer2()",
      "215": "WorkbookWriteBuilderTest::::cellStyleConsumer2()",
      "216": "WorkbookWriteBuilderTest::::cellStyleConsumer2()",
      "217": "WorkbookWriteBuilderTest::::cellStyleConsumer2()",
      "218": "WorkbookWriteBuilderTest::::cellStyleConsumer2()",
      "219": "WorkbookWriteBuilderTest::::cellStyleConsumer2()",
      "220": "WorkbookWriteBuilderTest::::cellStyleConsumer2()",
      "221": "WorkbookWriteBuilderTest::::cellStyleConsumer2()",
      "222": "WorkbookWriteBuilderTest::::cellStyleConsumer2()",
      "223": "WorkbookWriteBuilderTest::::cellStyleConsumer2()",
      "224": "WorkbookWriteBuilderTest::::cellStyleConsumer2()",
      "225": "WorkbookWriteBuilderTest::::cellStyleConsumer2()",
      "226": "WorkbookWriteBuilderTest::::cellStyleConsumer2()",
      "227": "WorkbookWriteBuilderTest::::cellStyleConsumer2()",
      "228": "WorkbookWriteBuilderTest::::cellStyleConsumer2()",
      "229": "WorkbookWriteBuilderTest::::cellStyleConsumer2()",
      "230": "WorkbookWriteBuilderTest::::cellStyleConsumer2()",
      "231": "WorkbookWriteBuilderTest::::cellStyleConsumer2()",
      "232": "WorkbookWriteBuilderTest::::cellStyleConsumer2()",
      "233": "WorkbookWriteBuilderTest::::cellStyleConsumer2()",
      "234": "WorkbookWriteBuilderTest::::cellStyleConsumer2()",
      "235": "WorkbookWriteBuilderTest::::cellStyleConsumer2()",
      "236": "WorkbookWriteBuilderTest::::cellStyleConsumer2()",
      "237": "WorkbookWriteBuilderTest::::cellStyleConsumer2()",
      "238": "WorkbookWriteBuilderTest::::cellStyleConsumer2()",
      "239": "WorkbookWriteBuilderTest::::cellStyleConsumer2()",
      "240": "WorkbookWriteBuilderTest::::cellStyleConsumer2()",
      "241": "WorkbookWriteBuilderTest::::cellStyleConsumer2()",
      "242": "WorkbookWriteBuilderTest::::cellStyleConsumer2()",
      "243": "WorkbookWriteBuilderTest::::cellStyleConsumer2()",
      "244": "WorkbookWriteBuilderTest::::cellStyleConsumer2()",
      "246": "WorkbookWriteBuilderTest::::sheet1()",
      "247": "WorkbookWriteBuilderTest::::sheet1()",
      "248": "WorkbookWriteBuilderTest::::sheet1()",
      "249": "WorkbookWriteBuilderTest::::sheet1()",
      "250": "WorkbookWriteBuilderTest::::sheet1()",
      "251": "WorkbookWriteBuilderTest::::sheet1()",
      "252": "WorkbookWriteBuilderTest::::sheet1()",
      "253": "WorkbookWriteBuilderTest::::sheet1()",
      "254": "WorkbookWriteBuilderTest::::sheet1()",
      "255": "WorkbookWriteBuilderTest::::sheet1()",
      "256": "WorkbookWriteBuilderTest::::sheet1()",
      "257": "WorkbookWriteBuilderTest::::sheet1()",
      "258": "WorkbookWriteBuilderTest::::sheet1()",
      "259": "WorkbookWriteBuilderTest::::sheet1()",
      "260": "WorkbookWriteBuilderTest::::sheet1()",
      "261": "WorkbookWriteBuilderTest::::sheet1()",
      "262": "WorkbookWriteBuilderTest::::sheet1()",
      "263": "WorkbookWriteBuilderTest::::sheet1()",
      "264": "WorkbookWriteBuilderTest::::sheet1()",
      "265": "WorkbookWriteBuilderTest::::sheet1()",
      "266": "WorkbookWriteBuilderTest::::sheet1()",
      "267": "WorkbookWriteBuilderTest::::sheet1()",
      "269": "WorkbookWriteBuilderTest::::sheet2()",
      "270": "WorkbookWriteBuilderTest::::sheet2()",
      "271": "WorkbookWriteBuilderTest::::sheet2()",
      "272": "WorkbookWriteBuilderTest::::sheet2()",
      "273": "WorkbookWriteBuilderTest::::sheet2()",
      "274": "WorkbookWriteBuilderTest::::sheet2()",
      "275": "WorkbookWriteBuilderTest::::sheet2()",
      "276": "WorkbookWriteBuilderTest::::sheet2()",
      "277": "WorkbookWriteBuilderTest::::sheet2()",
      "278": "WorkbookWriteBuilderTest::::sheet2()",
      "279": "WorkbookWriteBuilderTest::::sheet2()",
      "280": "WorkbookWriteBuilderTest::::sheet2()",
      "281": "WorkbookWriteBuilderTest::::sheet2()",
      "282": "WorkbookWriteBuilderTest::::sheet2()",
      "283": "WorkbookWriteBuilderTest::::sheet2()",
      "284": "WorkbookWriteBuilderTest::::sheet2()",
      "285": "WorkbookWriteBuilderTest::::sheet2()",
      "286": "WorkbookWriteBuilderTest::::sheet2()",
      "287": "WorkbookWriteBuilderTest::::sheet2()",
      "288": "WorkbookWriteBuilderTest::::sheet2()",
      "289": "WorkbookWriteBuilderTest::::sheet2()",
      "290": "WorkbookWriteBuilderTest::::sheet2()",
      "291": "WorkbookWriteBuilderTest::::sheet2()",
      "293": "WorkbookWriteBuilderTest::::sheet3()",
      "294": "WorkbookWriteBuilderTest::::sheet3()",
      "295": "WorkbookWriteBuilderTest::::sheet3()",
      "296": "WorkbookWriteBuilderTest::::sheet3()",
      "297": "WorkbookWriteBuilderTest::::sheet3()",
      "298": "WorkbookWriteBuilderTest::::sheet3()",
      "299": "WorkbookWriteBuilderTest::::sheet3()",
      "300": "WorkbookWriteBuilderTest::::sheet3()",
      "301": "WorkbookWriteBuilderTest::::sheet3()",
      "302": "WorkbookWriteBuilderTest::::sheet3()",
      "303": "WorkbookWriteBuilderTest::::sheet3()",
      "304": "WorkbookWriteBuilderTest::::sheet3()",
      "305": "WorkbookWriteBuilderTest::::sheet3()",
      "306": "WorkbookWriteBuilderTest::::sheet3()",
      "307": "WorkbookWriteBuilderTest::::sheet3()",
      "308": "WorkbookWriteBuilderTest::::sheet3()",
      "309": "WorkbookWriteBuilderTest::::sheet3()",
      "310": "WorkbookWriteBuilderTest::::sheet3()",
      "311": "WorkbookWriteBuilderTest::::sheet3()",
      "312": "WorkbookWriteBuilderTest::::sheet3()",
      "313": "WorkbookWriteBuilderTest::::sheet3()",
      "314": "WorkbookWriteBuilderTest::::sheet3()",
      "317": "WorkbookWriteBuilderTest::::title()",
      "318": "WorkbookWriteBuilderTest::::title()",
      "319": "WorkbookWriteBuilderTest::::title()",
      "320": "WorkbookWriteBuilderTest::::title()",
      "321": "WorkbookWriteBuilderTest::::title()",
      "322": "WorkbookWriteBuilderTest::::title()",
      "323": "WorkbookWriteBuilderTest::::title()",
      "324": "WorkbookWriteBuilderTest::::title()",
      "325": "WorkbookWriteBuilderTest::::title()",
      "326": "WorkbookWriteBuilderTest::::title()",
      "327": "WorkbookWriteBuilderTest::::title()",
      "328": "WorkbookWriteBuilderTest::::title()",
      "329": "WorkbookWriteBuilderTest::::title()",
      "330": "WorkbookWriteBuilderTest::::title()",
      "331": "WorkbookWriteBuilderTest::::title()",
      "332": "WorkbookWriteBuilderTest::::title()",
      "333": "WorkbookWriteBuilderTest::::title()",
      "334": "WorkbookWriteBuilderTest::::title()",
      "335": "WorkbookWriteBuilderTest::::title()",
      "336": "WorkbookWriteBuilderTest::::title()",
      "337": "WorkbookWriteBuilderTest::::title()",
      "338": "WorkbookWriteBuilderTest::::title()",
      "339": "WorkbookWriteBuilderTest::::title()",
      "340": "WorkbookWriteBuilderTest::::title()",
      "341": "WorkbookWriteBuilderTest::::title()",
      "343": "WorkbookWriteBuilderTest::::titleRowStartIndex()",
      "344": "WorkbookWriteBuilderTest::::titleRowStartIndex()",
      "345": "WorkbookWriteBuilderTest::::titleRowStartIndex()",
      "346": "WorkbookWriteBuilderTest::::titleRowStartIndex()",
      "347": "WorkbookWriteBuilderTest::::titleRowStartIndex()",
      "348": "WorkbookWriteBuilderTest::::titleRowStartIndex()",
      "349": "WorkbookWriteBuilderTest::::titleRowStartIndex()",
      "350": "WorkbookWriteBuilderTest::::titleRowStartIndex()",
      "351": "WorkbookWriteBuilderTest::::titleRowStartIndex()",
      "352": "WorkbookWriteBuilderTest::::titleRowStartIndex()",
      "353": "WorkbookWriteBuilderTest::::titleRowStartIndex()",
      "354": "WorkbookWriteBuilderTest::::titleRowStartIndex()",
      "355": "WorkbookWriteBuilderTest::::titleRowStartIndex()",
      "356": "WorkbookWriteBuilderTest::::titleRowStartIndex()",
      "357": "WorkbookWriteBuilderTest::::titleRowStartIndex()",
      "358": "WorkbookWriteBuilderTest::::titleRowStartIndex()",
      "359": "WorkbookWriteBuilderTest::::titleRowStartIndex()",
      "360": "WorkbookWriteBuilderTest::::titleRowStartIndex()",
      "361": "WorkbookWriteBuilderTest::::titleRowStartIndex()",
      "362": "WorkbookWriteBuilderTest::::titleRowStartIndex()",
      "363": "WorkbookWriteBuilderTest::::titleRowStartIndex()",
      "364": "WorkbookWriteBuilderTest::::titleRowStartIndex()",
      "365": "WorkbookWriteBuilderTest::::titleRowStartIndex()",
      "366": "WorkbookWriteBuilderTest::::titleRowStartIndex()",
      "367": "WorkbookWriteBuilderTest::::titleRowStartIndex()",
      "368": "WorkbookWriteBuilderTest::::titleRowStartIndex()",
      "370": "WorkbookWriteBuilderTest::::titleColumnStartIndex()",
      "371": "WorkbookWriteBuilderTest::::titleColumnStartIndex()",
      "372": "WorkbookWriteBuilderTest::::titleColumnStartIndex()",
      "373": "WorkbookWriteBuilderTest::::titleColumnStartIndex()",
      "374": "WorkbookWriteBuilderTest::::titleColumnStartIndex()",
      "375": "WorkbookWriteBuilderTest::::titleColumnStartIndex()",
      "376": "WorkbookWriteBuilderTest::::titleColumnStartIndex()",
      "377": "WorkbookWriteBuilderTest::::titleColumnStartIndex()",
      "378": "WorkbookWriteBuilderTest::::titleColumnStartIndex()",
      "379": "WorkbookWriteBuilderTest::::titleColumnStartIndex()",
      "380": "WorkbookWriteBuilderTest::::titleColumnStartIndex()",
      "381": "WorkbookWriteBuilderTest::::titleColumnStartIndex()",
      "382": "WorkbookWriteBuilderTest::::titleColumnStartIndex()",
      "383": "WorkbookWriteBuilderTest::::titleColumnStartIndex()",
      "384": "WorkbookWriteBuilderTest::::titleColumnStartIndex()",
      "385": "WorkbookWriteBuilderTest::::titleColumnStartIndex()",
      "386": "WorkbookWriteBuilderTest::::titleColumnStartIndex()",
      "387": "WorkbookWriteBuilderTest::::titleColumnStartIndex()",
      "388": "WorkbookWriteBuilderTest::::titleColumnStartIndex()",
      "389": "WorkbookWriteBuilderTest::::titleColumnStartIndex()",
      "390": "WorkbookWriteBuilderTest::::titleColumnStartIndex()",
      "391": "WorkbookWriteBuilderTest::::titleColumnStartIndex()",
      "392": "WorkbookWriteBuilderTest::::titleColumnStartIndex()",
      "393": "WorkbookWriteBuilderTest::::titleColumnStartIndex()",
      "394": "WorkbookWriteBuilderTest::::titleColumnStartIndex()",
      "395": "WorkbookWriteBuilderTest::::titleColumnStartIndex()",
      "396": "WorkbookWriteBuilderTest::::titleColumnStartIndex()",
      "398": "WorkbookWriteBuilderTest::::headRowStartIndex()",
      "399": "WorkbookWriteBuilderTest::::headRowStartIndex()",
      "400": "WorkbookWriteBuilderTest::::headRowStartIndex()",
      "401": "WorkbookWriteBuilderTest::::headRowStartIndex()",
      "402": "WorkbookWriteBuilderTest::::headRowStartIndex()",
      "403": "WorkbookWriteBuilderTest::::headRowStartIndex()",
      "404": "WorkbookWriteBuilderTest::::headRowStartIndex()",
      "405": "WorkbookWriteBuilderTest::::headRowStartIndex()",
      "406": "WorkbookWriteBuilderTest::::headRowStartIndex()",
      "407": "WorkbookWriteBuilderTest::::headRowStartIndex()",
      "408": "WorkbookWriteBuilderTest::::headRowStartIndex()",
      "409": "WorkbookWriteBuilderTest::::headRowStartIndex()",
      "410": "WorkbookWriteBuilderTest::::headRowStartIndex()",
      "411": "WorkbookWriteBuilderTest::::headRowStartIndex()",
      "412": "WorkbookWriteBuilderTest::::headRowStartIndex()",
      "413": "WorkbookWriteBuilderTest::::headRowStartIndex()",
      "414": "WorkbookWriteBuilderTest::::headRowStartIndex()",
      "415": "WorkbookWriteBuilderTest::::headRowStartIndex()",
      "416": "WorkbookWriteBuilderTest::::headRowStartIndex()",
      "417": "WorkbookWriteBuilderTest::::headRowStartIndex()",
      "418": "WorkbookWriteBuilderTest::::headRowStartIndex()",
      "419": "WorkbookWriteBuilderTest::::headRowStartIndex()",
      "420": "WorkbookWriteBuilderTest::::headRowStartIndex()",
      "421": "WorkbookWriteBuilderTest::::headRowStartIndex()",
      "422": "WorkbookWriteBuilderTest::::headRowStartIndex()",
      "423": "WorkbookWriteBuilderTest::::headRowStartIndex()",
      "425": "WorkbookWriteBuilderTest::::headColumnStartIndex()",
      "426": "WorkbookWriteBuilderTest::::headColumnStartIndex()",
      "427": "WorkbookWriteBuilderTest::::headColumnStartIndex()",
      "428": "WorkbookWriteBuilderTest::::headColumnStartIndex()",
      "429": "WorkbookWriteBuilderTest::::headColumnStartIndex()",
      "430": "WorkbookWriteBuilderTest::::headColumnStartIndex()",
      "431": "WorkbookWriteBuilderTest::::headColumnStartIndex()",
      "432": "WorkbookWriteBuilderTest::::headColumnStartIndex()",
      "433": "WorkbookWriteBuilderTest::::headColumnStartIndex()",
      "434": "WorkbookWriteBuilderTest::::headColumnStartIndex()",
      "435": "WorkbookWriteBuilderTest::::headColumnStartIndex()",
      "436": "WorkbookWriteBuilderTest::::headColumnStartIndex()",
      "437": "WorkbookWriteBuilderTest::::headColumnStartIndex()",
      "438": "WorkbookWriteBuilderTest::::headColumnStartIndex()",
      "439": "WorkbookWriteBuilderTest::::headColumnStartIndex()",
      "440": "WorkbookWriteBuilderTest::::headColumnStartIndex()",
      "441": "WorkbookWriteBuilderTest::::headColumnStartIndex()",
      "442": "WorkbookWriteBuilderTest::::headColumnStartIndex()",
      "443": "WorkbookWriteBuilderTest::::headColumnStartIndex()",
      "444": "WorkbookWriteBuilderTest::::headColumnStartIndex()",
      "445": "WorkbookWriteBuilderTest::::headColumnStartIndex()",
      "446": "WorkbookWriteBuilderTest::::headColumnStartIndex()",
      "447": "WorkbookWriteBuilderTest::::headColumnStartIndex()",
      "448": "WorkbookWriteBuilderTest::::headColumnStartIndex()",
      "449": "WorkbookWriteBuilderTest::::headColumnStartIndex()",
      "450": "WorkbookWriteBuilderTest::::headColumnStartIndex()",
      "452": "WorkbookWriteBuilderTest::::dataRowStartIndex()",
      "453": "WorkbookWriteBuilderTest::::dataRowStartIndex()",
      "454": "WorkbookWriteBuilderTest::::dataRowStartIndex()",
      "455": "WorkbookWriteBuilderTest::::dataRowStartIndex()",
      "456": "WorkbookWriteBuilderTest::::dataRowStartIndex()",
      "457": "WorkbookWriteBuilderTest::::dataRowStartIndex()",
      "458": "WorkbookWriteBuilderTest::::dataRowStartIndex()",
      "459": "WorkbookWriteBuilderTest::::dataRowStartIndex()",
      "460": "WorkbookWriteBuilderTest::::dataRowStartIndex()",
      "461": "WorkbookWriteBuilderTest::::dataRowStartIndex()",
      "462": "WorkbookWriteBuilderTest::::dataRowStartIndex()",
      "463": "WorkbookWriteBuilderTest::::dataRowStartIndex()",
      "464": "WorkbookWriteBuilderTest::::dataRowStartIndex()",
      "465": "WorkbookWriteBuilderTest::::dataRowStartIndex()",
      "466": "WorkbookWriteBuilderTest::::dataRowStartIndex()",
      "467": "WorkbookWriteBuilderTest::::dataRowStartIndex()",
      "468": "WorkbookWriteBuilderTest::::dataRowStartIndex()",
      "469": "WorkbookWriteBuilderTest::::dataRowStartIndex()",
      "470": "WorkbookWriteBuilderTest::::dataRowStartIndex()",
      "471": "WorkbookWriteBuilderTest::::dataRowStartIndex()",
      "472": "WorkbookWriteBuilderTest::::dataRowStartIndex()",
      "473": "WorkbookWriteBuilderTest::::dataRowStartIndex()",
      "474": "WorkbookWriteBuilderTest::::dataRowStartIndex()",
      "475": "WorkbookWriteBuilderTest::::dataRowStartIndex()",
      "476": "WorkbookWriteBuilderTest::::dataRowStartIndex()",
      "477": "WorkbookWriteBuilderTest::::dataRowStartIndex()",
      "478": "WorkbookWriteBuilderTest::::dataRowStartIndex()",
      "479": "WorkbookWriteBuilderTest::::dataRowStartIndex()",
      "480": "WorkbookWriteBuilderTest::::dataRowStartIndex()",
      "481": "WorkbookWriteBuilderTest::::dataRowStartIndex()",
      "483": "WorkbookWriteBuilderTest::::dataColumnStartIndex()",
      "484": "WorkbookWriteBuilderTest::::dataColumnStartIndex()",
      "485": "WorkbookWriteBuilderTest::::dataColumnStartIndex()",
      "486": "WorkbookWriteBuilderTest::::dataColumnStartIndex()",
      "487": "WorkbookWriteBuilderTest::::dataColumnStartIndex()",
      "488": "WorkbookWriteBuilderTest::::dataColumnStartIndex()",
      "489": "WorkbookWriteBuilderTest::::dataColumnStartIndex()",
      "490": "WorkbookWriteBuilderTest::::dataColumnStartIndex()",
      "491": "WorkbookWriteBuilderTest::::dataColumnStartIndex()",
      "492": "WorkbookWriteBuilderTest::::dataColumnStartIndex()",
      "493": "WorkbookWriteBuilderTest::::dataColumnStartIndex()",
      "494": "WorkbookWriteBuilderTest::::dataColumnStartIndex()",
      "495": "WorkbookWriteBuilderTest::::dataColumnStartIndex()",
      "496": "WorkbookWriteBuilderTest::::dataColumnStartIndex()",
      "497": "WorkbookWriteBuilderTest::::dataColumnStartIndex()",
      "498": "WorkbookWriteBuilderTest::::dataColumnStartIndex()",
      "499": "WorkbookWriteBuilderTest::::dataColumnStartIndex()",
      "500": "WorkbookWriteBuilderTest::::dataColumnStartIndex()",
      "501": "WorkbookWriteBuilderTest::::dataColumnStartIndex()",
      "502": "WorkbookWriteBuilderTest::::dataColumnStartIndex()",
      "503": "WorkbookWriteBuilderTest::::dataColumnStartIndex()",
      "504": "WorkbookWriteBuilderTest::::dataColumnStartIndex()",
      "505": "WorkbookWriteBuilderTest::::dataColumnStartIndex()",
      "506": "WorkbookWriteBuilderTest::::dataColumnStartIndex()",
      "507": "WorkbookWriteBuilderTest::::dataColumnStartIndex()",
      "508": "WorkbookWriteBuilderTest::::dataColumnStartIndex()",
      "509": "WorkbookWriteBuilderTest::::dataColumnStartIndex()",
      "510": "WorkbookWriteBuilderTest::::dataColumnStartIndex()",
      "512": "WorkbookWriteBuilderTest::::sheetReadConsumer1()",
      "513": "WorkbookWriteBuilderTest::::sheetReadConsumer1()",
      "514": "WorkbookWriteBuilderTest::::sheetReadConsumer1()",
      "515": "WorkbookWriteBuilderTest::::sheetReadConsumer1()",
      "516": "WorkbookWriteBuilderTest::::sheetReadConsumer1()",
      "517": "WorkbookWriteBuilderTest::::sheetReadConsumer1()",
      "518": "WorkbookWriteBuilderTest::::sheetReadConsumer1()",
      "519": "WorkbookWriteBuilderTest::::sheetReadConsumer1()",
      "520": "WorkbookWriteBuilderTest::::sheetReadConsumer1()",
      "521": "WorkbookWriteBuilderTest::::sheetReadConsumer1()",
      "522": "WorkbookWriteBuilderTest::::sheetReadConsumer1()",
      "523": "WorkbookWriteBuilderTest::::sheetReadConsumer1()",
      "524": "WorkbookWriteBuilderTest::::sheetReadConsumer1()",
      "525": "WorkbookWriteBuilderTest::::sheetReadConsumer1()",
      "526": "WorkbookWriteBuilderTest::::sheetReadConsumer1()",
      "527": "WorkbookWriteBuilderTest::::sheetReadConsumer1()",
      "528": "WorkbookWriteBuilderTest::::sheetReadConsumer1()",
      "529": "WorkbookWriteBuilderTest::::sheetReadConsumer1()",
      "530": "WorkbookWriteBuilderTest::::sheetReadConsumer1()",
      "531": "WorkbookWriteBuilderTest::::sheetReadConsumer1()",
      "532": "WorkbookWriteBuilderTest::::sheetReadConsumer1()",
      "533": "WorkbookWriteBuilderTest::::sheetReadConsumer1()",
      "534": "WorkbookWriteBuilderTest::::sheetReadConsumer1()",
      "535": "WorkbookWriteBuilderTest::::sheetReadConsumer1()",
      "536": "WorkbookWriteBuilderTest::::sheetReadConsumer1()",
      "537": "WorkbookWriteBuilderTest::::sheetReadConsumer1()",
      "538": "WorkbookWriteBuilderTest::::sheetReadConsumer1()",
      "539": "WorkbookWriteBuilderTest::::sheetReadConsumer1()",
      "540": "WorkbookWriteBuilderTest::::sheetReadConsumer1()",
      "541": "WorkbookWriteBuilderTest::::sheetReadConsumer1()",
      "543": "WorkbookWriteBuilderTest::::sheetReadConsumer2()",
      "544": "WorkbookWriteBuilderTest::::sheetReadConsumer2()",
      "545": "WorkbookWriteBuilderTest::::sheetReadConsumer2()",
      "546": "WorkbookWriteBuilderTest::::sheetReadConsumer2()",
      "547": "WorkbookWriteBuilderTest::::sheetReadConsumer2()",
      "548": "WorkbookWriteBuilderTest::::sheetReadConsumer2()",
      "549": "WorkbookWriteBuilderTest::::sheetReadConsumer2()",
      "550": "WorkbookWriteBuilderTest::::sheetReadConsumer2()",
      "551": "WorkbookWriteBuilderTest::::sheetReadConsumer2()",
      "552": "WorkbookWriteBuilderTest::::sheetReadConsumer2()",
      "553": "WorkbookWriteBuilderTest::::sheetReadConsumer2()",
      "554": "WorkbookWriteBuilderTest::::sheetReadConsumer2()",
      "555": "WorkbookWriteBuilderTest::::sheetReadConsumer2()",
      "556": "WorkbookWriteBuilderTest::::sheetReadConsumer2()",
      "557": "WorkbookWriteBuilderTest::::sheetReadConsumer2()",
      "558": "WorkbookWriteBuilderTest::::sheetReadConsumer2()",
      "559": "WorkbookWriteBuilderTest::::sheetReadConsumer2()",
      "560": "WorkbookWriteBuilderTest::::sheetReadConsumer2()",
      "561": "WorkbookWriteBuilderTest::::sheetReadConsumer2()",
      "562": "WorkbookWriteBuilderTest::::sheetReadConsumer2()",
      "563": "WorkbookWriteBuilderTest::::sheetReadConsumer2()",
      "564": "WorkbookWriteBuilderTest::::sheetReadConsumer2()",
      "565": "WorkbookWriteBuilderTest::::sheetReadConsumer2()",
      "566": "WorkbookWriteBuilderTest::::sheetReadConsumer2()",
      "567": "WorkbookWriteBuilderTest::::sheetReadConsumer2()",
      "568": "WorkbookWriteBuilderTest::::sheetReadConsumer2()",
      "569": "WorkbookWriteBuilderTest::::sheetReadConsumer2()",
      "570": "WorkbookWriteBuilderTest::::sheetReadConsumer2()",
      "571": "WorkbookWriteBuilderTest::::sheetReadConsumer2()",
      "572": "WorkbookWriteBuilderTest::::sheetReadConsumer2()",
      "573": "WorkbookWriteBuilderTest::::sheetReadConsumer2()",
      "574": "WorkbookWriteBuilderTest::::sheetReadConsumer2()",
      "575": "WorkbookWriteBuilderTest::::sheetReadConsumer2()",
      "576": "WorkbookWriteBuilderTest::::sheetReadConsumer2()",
      "577": "WorkbookWriteBuilderTest::::sheetReadConsumer2()",
      "579": "WorkbookWriteBuilderTest::::sheetWriteConsumer1()",
      "580": "WorkbookWriteBuilderTest::::sheetWriteConsumer1()",
      "581": "WorkbookWriteBuilderTest::::sheetWriteConsumer1()",
      "582": "WorkbookWriteBuilderTest::::sheetWriteConsumer1()",
      "583": "WorkbookWriteBuilderTest::::sheetWriteConsumer1()",
      "584": "WorkbookWriteBuilderTest::::sheetWriteConsumer1()",
      "585": "WorkbookWriteBuilderTest::::sheetWriteConsumer1()",
      "586": "WorkbookWriteBuilderTest::::sheetWriteConsumer1()",
      "587": "WorkbookWriteBuilderTest::::sheetWriteConsumer1()",
      "588": "WorkbookWriteBuilderTest::::sheetWriteConsumer1()",
      "589": "WorkbookWriteBuilderTest::::sheetWriteConsumer1()",
      "590": "WorkbookWriteBuilderTest::::sheetWriteConsumer1()",
      "591": "WorkbookWriteBuilderTest::::sheetWriteConsumer1()",
      "592": "WorkbookWriteBuilderTest::::sheetWriteConsumer1()",
      "593": "WorkbookWriteBuilderTest::::sheetWriteConsumer1()",
      "594": "WorkbookWriteBuilderTest::::sheetWriteConsumer1()",
      "595": "WorkbookWriteBuilderTest::::sheetWriteConsumer1()",
      "596": "WorkbookWriteBuilderTest::::sheetWriteConsumer1()",
      "597": "WorkbookWriteBuilderTest::::sheetWriteConsumer1()",
      "598": "WorkbookWriteBuilderTest::::sheetWriteConsumer1()",
      "599": "WorkbookWriteBuilderTest::::sheetWriteConsumer1()",
      "600": "WorkbookWriteBuilderTest::::sheetWriteConsumer1()",
      "601": "WorkbookWriteBuilderTest::::sheetWriteConsumer1()",
      "602": "WorkbookWriteBuilderTest::::sheetWriteConsumer1()",
      "603": "WorkbookWriteBuilderTest::::sheetWriteConsumer1()",
      "604": "WorkbookWriteBuilderTest::::sheetWriteConsumer1()",
      "605": "WorkbookWriteBuilderTest::::sheetWriteConsumer1()",
      "606": "WorkbookWriteBuilderTest::::sheetWriteConsumer1()",
      "607": "WorkbookWriteBuilderTest::::sheetWriteConsumer1()",
      "608": "WorkbookWriteBuilderTest::::sheetWriteConsumer1()",
      "610": "WorkbookWriteBuilderTest::::sheetWriteConsumer2()",
      "611": "WorkbookWriteBuilderTest::::sheetWriteConsumer2()",
      "612": "WorkbookWriteBuilderTest::::sheetWriteConsumer2()",
      "613": "WorkbookWriteBuilderTest::::sheetWriteConsumer2()",
      "614": "WorkbookWriteBuilderTest::::sheetWriteConsumer2()",
      "615": "WorkbookWriteBuilderTest::::sheetWriteConsumer2()",
      "616": "WorkbookWriteBuilderTest::::sheetWriteConsumer2()",
      "617": "WorkbookWriteBuilderTest::::sheetWriteConsumer2()",
      "618": "WorkbookWriteBuilderTest::::sheetWriteConsumer2()",
      "619": "WorkbookWriteBuilderTest::::sheetWriteConsumer2()",
      "620": "WorkbookWriteBuilderTest::::sheetWriteConsumer2()",
      "621": "WorkbookWriteBuilderTest::::sheetWriteConsumer2()",
      "622": "WorkbookWriteBuilderTest::::sheetWriteConsumer2()",
      "623": "WorkbookWriteBuilderTest::::sheetWriteConsumer2()",
      "624": "WorkbookWriteBuilderTest::::sheetWriteConsumer2()",
      "625": "WorkbookWriteBuilderTest::::sheetWriteConsumer2()",
      "626": "WorkbookWriteBuilderTest::::sheetWriteConsumer2()",
      "627": "WorkbookWriteBuilderTest::::sheetWriteConsumer2()",
      "628": "WorkbookWriteBuilderTest::::sheetWriteConsumer2()",
      "629": "WorkbookWriteBuilderTest::::sheetWriteConsumer2()",
      "630": "WorkbookWriteBuilderTest::::sheetWriteConsumer2()",
      "631": "WorkbookWriteBuilderTest::::sheetWriteConsumer2()",
      "632": "WorkbookWriteBuilderTest::::sheetWriteConsumer2()",
      "633": "WorkbookWriteBuilderTest::::sheetWriteConsumer2()",
      "634": "WorkbookWriteBuilderTest::::sheetWriteConsumer2()",
      "635": "WorkbookWriteBuilderTest::::sheetWriteConsumer2()",
      "636": "WorkbookWriteBuilderTest::::sheetWriteConsumer2()",
      "637": "WorkbookWriteBuilderTest::::sheetWriteConsumer2()",
      "638": "WorkbookWriteBuilderTest::::sheetWriteConsumer2()",
      "639": "WorkbookWriteBuilderTest::::sheetWriteConsumer2()",
      "640": "WorkbookWriteBuilderTest::::sheetWriteConsumer2()",
      "641": "WorkbookWriteBuilderTest::::sheetWriteConsumer2()",
      "642": "WorkbookWriteBuilderTest::::sheetWriteConsumer2()",
      "643": "WorkbookWriteBuilderTest::::sheetWriteConsumer2()",
      "644": "WorkbookWriteBuilderTest::::sheetWriteConsumer2()",
      "646": "WorkbookWriteBuilderTest::::write()",
      "647": "WorkbookWriteBuilderTest::::write()",
      "648": "WorkbookWriteBuilderTest::::write()",
      "649": "WorkbookWriteBuilderTest::::write()",
      "650": "WorkbookWriteBuilderTest::::write()",
      "651": "WorkbookWriteBuilderTest::::write()",
      "652": "WorkbookWriteBuilderTest::::write()",
      "653": "WorkbookWriteBuilderTest::::write()",
      "654": "WorkbookWriteBuilderTest::::write()",
      "655": "WorkbookWriteBuilderTest::::write()",
      "656": "WorkbookWriteBuilderTest::::write()",
      "657": "WorkbookWriteBuilderTest::::write()",
      "658": "WorkbookWriteBuilderTest::::write()",
      "659": "WorkbookWriteBuilderTest::::write()",
      "660": "WorkbookWriteBuilderTest::::write()",
      "661": "WorkbookWriteBuilderTest::::write()",
      "662": "WorkbookWriteBuilderTest::::write()",
      "663": "WorkbookWriteBuilderTest::::write()",
      "664": "WorkbookWriteBuilderTest::::write()",
      "665": "WorkbookWriteBuilderTest::::write()",
      "666": "WorkbookWriteBuilderTest::::write()",
      "667": "WorkbookWriteBuilderTest::::write()",
      "668": "WorkbookWriteBuilderTest::::write()",
      "669": "WorkbookWriteBuilderTest::::write()",
      "670": "WorkbookWriteBuilderTest::::write()"
    },
    "tests": [
      {
        "test_lines": [
          33,
          50
        ],
        "covered_lines": [
          25,
          26,
          27,
          28,
          31,
          32,
          47,
          48,
          62,
          77,
          78,
          79,
          87,
          88,
          137,
          138,
          139,
          141,
          142,
          143
        ]
      },
      {
        "test_lines": [
          52,
          65
        ],
        "covered_lines": [
          25,
          26,
          27,
          28,
          36,
          37,
          47,
          48,
          62,
          77,
          78,
          79,
          87,
          88,
          137,
          138,
          139,
          141,
          142,
          143
        ]
      },
      {
        "test_lines": [
          67,
          90
        ],
        "covered_lines": [
          25,
          26,
          27,
          28,
          62,
          77,
          78,
          79,
          87,
          88,
          137,
          138,
          139,
          141
        ]
      },
      {
        "test_lines": [
          92,
          113
        ],
        "covered_lines": [
          25,
          26,
          27,
          28,
          42,
          43,
          62,
          77,
          78,
          79,
          87,
          88,
          137,
          138,
          139,
          141,
          142,
          143
        ]
      },
      {
        "test_lines": [
          115,
          135
        ],
        "covered_lines": [
          25,
          26,
          27,
          28,
          47,
          48,
          62,
          77,
          78,
          79,
          87,
          88,
          137,
          138,
          139,
          141,
          142,
          143
        ]
      },
      {
        "test_lines": [
          138,
          161
        ],
        "covered_lines": [
          25,
          26,
          27,
          28,
          47,
          48,
          52,
          53,
          62,
          77,
          78,
          79,
          87,
          88,
          137,
          138,
          139,
          141,
          142,
          143
        ]
      },
      {
        "test_lines": [
          163,
          177
        ],
        "covered_lines": [
          25,
          26,
          27,
          28,
          42,
          43
        ]
      },
      {
        "test_lines": [
          179,
          208
        ],
        "covered_lines": [
          25,
          26,
          27,
          28,
          47,
          48,
          57,
          58,
          62,
          77,
          78,
          79,
          87,
          88,
          137,
          138,
          139,
          141,
          142,
          143
        ]
      },
      {
        "test_lines": [
          210,
          244
        ],
        "covered_lines": [
          25,
          26,
          27,
          28,
          47,
          48,
          57,
          58,
          62,
          77,
          78,
          79,
          87,
          88,
          137,
          138,
          139,
          141,
          142,
          143
        ]
      },
      {
        "test_lines": [
          246,
          267
        ],
        "covered_lines": [
          25,
          26,
          27,
          28,
          47,
          48,
          62,
          77,
          78,
          79,
          87,
          88,
          137,
          138,
          139,
          141,
          142,
          143
        ]
      },
      {
        "test_lines": [
          269,
          291
        ],
        "covered_lines": [
          25,
          26,
          27,
          28,
          47,
          48,
          66,
          77,
          78,
          79,
          82,
          83,
          137,
          138,
          139,
          141,
          142,
          143
        ]
      },
      {
        "test_lines": [
          293,
          314
        ],
        "covered_lines": [
          25,
          26,
          27,
          28,
          47,
          48,
          70,
          77,
          78,
          79,
          87,
          88,
          137,
          138,
          139,
          141,
          142,
          143
        ]
      },
      {
        "test_lines": [
          317,
          341
        ],
        "covered_lines": [
          25,
          26,
          27,
          28,
          47,
          48,
          62,
          77,
          78,
          79,
          87,
          88,
          92,
          93,
          137,
          138,
          139,
          141,
          142,
          143
        ]
      },
      {
        "test_lines": [
          343,
          368
        ],
        "covered_lines": [
          25,
          26,
          27,
          28,
          47,
          48,
          62,
          77,
          78,
          79,
          87,
          88,
          97,
          98,
          137,
          138,
          139,
          141,
          142,
          143
        ]
      },
      {
        "test_lines": [
          370,
          396
        ],
        "covered_lines": [
          25,
          26,
          27,
          28,
          47,
          48,
          62,
          77,
          78,
          79,
          87,
          88,
          102,
          103,
          137,
          138,
          139,
          141,
          142,
          143
        ]
      },
      {
        "test_lines": [
          398,
          423
        ],
        "covered_lines": [
          25,
          26,
          27,
          28,
          47,
          48,
          62,
          77,
          78,
          79,
          87,
          88,
          107,
          108,
          137,
          138,
          139,
          141,
          142,
          143
        ]
      },
      {
        "test_lines": [
          425,
          450
        ],
        "covered_lines": [
          25,
          26,
          27,
          28,
          47,
          48,
          62,
          77,
          78,
          79,
          87,
          88,
          112,
          113,
          137,
          138,
          139,
          141,
          142,
          143
        ]
      },
      {
        "test_lines": [
          452,
          481
        ],
        "covered_lines": [
          25,
          26,
          27,
          28,
          47,
          48,
          62,
          77,
          78,
          79,
          87,
          88,
          117,
          118,
          137,
          138,
          139,
          141,
          142,
          143
        ]
      },
      {
        "test_lines": [
          483,
          510
        ],
        "covered_lines": [
          25,
          26,
          27,
          28,
          47,
          48,
          62,
          77,
          78,
          79,
          87,
          88,
          122,
          123,
          137,
          138,
          139,
          141,
          142,
          143
        ]
      },
      {
        "test_lines": [
          512,
          541
        ],
        "covered_lines": [
          25,
          26,
          27,
          28,
          47,
          48,
          62,
          77,
          78,
          79,
          87,
          88,
          127,
          128,
          137,
          138,
          139,
          141,
          142,
          143
        ]
      },
      {
        "test_lines": [
          543,
          577
        ],
        "covered_lines": [
          25,
          26,
          27,
          28,
          47,
          48,
          62,
          77,
          78,
          79,
          87,
          88,
          127,
          128,
          137,
          138,
          139,
          141,
          142,
          143
        ]
      },
      {
        "test_lines": [
          579,
          608
        ],
        "covered_lines": [
          25,
          26,
          27,
          28,
          47,
          48,
          62,
          77,
          78,
          79,
          87,
          88,
          132,
          133,
          137,
          138,
          139,
          141,
          142,
          143
        ]
      },
      {
        "test_lines": [
          610,
          644
        ],
        "covered_lines": [
          25,
          26,
          27,
          28,
          47,
          48,
          62,
          77,
          78,
          79,
          87,
          88,
          132,
          133,
          137,
          138,
          139,
          141,
          142,
          143
        ]
      },
      {
        "test_lines": [
          646,
          670
        ],
        "covered_lines": [
          25,
          26,
          27,
          28,
          47,
          48,
          62,
          77,
          78,
          79,
          87,
          88,
          137,
          138,
          139,
          141,
          142,
          143
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/zouzhiy-excel/src/main/java/io/github/zouzhiy/excel/exceptions/ExcelException.java": {
    "class_content": [
      "/*\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package io.github.zouzhiy.excel.exceptions;\n",
      "\n",
      "/**\n",
      " * @author zouzhiy\n",
      " * @since 2022/7/2\n",
      " */\n",
      "public class ExcelException extends RuntimeException {\n",
      "    public ExcelException() {\n",
      "    }\n",
      "\n",
      "    public ExcelException(String message) {\n",
      "        super(message);\n",
      "    }\n",
      "\n",
      "    public ExcelException(String messageFormat, Object... args) {\n",
      "        super(String.format(messageFormat, args));\n",
      "    }\n",
      "\n",
      "    public ExcelException(String message, Throwable cause) {\n",
      "        super(message, cause);\n",
      "    }\n",
      "\n",
      "    public ExcelException(Throwable cause, String messageFormat, Object... args) {\n",
      "        super(String.format(messageFormat, args), cause);\n",
      "    }\n",
      "\n",
      "    public ExcelException(Throwable cause) {\n",
      "        super(cause);\n",
      "    }\n",
      "\n",
      "\n",
      "    public ExcelException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {\n",
      "        super(message, cause, enableSuppression, writableStackTrace);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package io.github.zouzhiy.excel.exceptions;\n",
      "\n",
      "\n",
      "import org.junit.jupiter.api.Assertions;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import java.util.Random;\n",
      "\n",
      "class ExcelExceptionTest {\n",
      "\n",
      "    private final Random random = new Random(System.currentTimeMillis());\n",
      "\n",
      "    @Test\n",
      "    void excelException1() {\n",
      "        ExcelException excelException = new ExcelException(\"errorMsg\");\n",
      "        Assertions.assertEquals(excelException.getMessage(), \"errorMsg\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void excelException2() {\n",
      "        int value = random.nextInt(1000);\n",
      "        ExcelException excelException = new ExcelException(\"errorMsg:%s\", value);\n",
      "        Assertions.assertEquals(excelException.getMessage(), \"errorMsg:\" + value);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void excelException3() {\n",
      "        RuntimeException runtimeException = new RuntimeException(\"test\");\n",
      "        ExcelException excelException = new ExcelException(\"errorMsg\", runtimeException);\n",
      "        Assertions.assertEquals(excelException.getMessage(), \"errorMsg\");\n",
      "        Assertions.assertEquals(excelException.getCause(), runtimeException);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void excelException4() {\n",
      "        int value = random.nextInt(1000);\n",
      "        RuntimeException runtimeException = new RuntimeException(\"test\");\n",
      "        ExcelException excelException = new ExcelException(runtimeException, \"errorMsg:%s\", value);\n",
      "        Assertions.assertEquals(excelException.getMessage(), \"errorMsg:\" + value);\n",
      "        Assertions.assertEquals(excelException.getCause(), runtimeException);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void excelException5() {\n",
      "        RuntimeException runtimeException = new RuntimeException(\"test\");\n",
      "        ExcelException excelException = new ExcelException(runtimeException);\n",
      "        Assertions.assertEquals(excelException.getCause(), runtimeException);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void excelException6() {\n",
      "        RuntimeException runtimeException = new RuntimeException(\"test\");\n",
      "        ExcelException excelException = new ExcelException(\"errorMsg\", runtimeException, false, true);\n",
      "        Assertions.assertEquals(excelException.getMessage(), \"errorMsg\");\n",
      "        Assertions.assertEquals(excelException.getCause(), runtimeException);\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "method_lines_dic": {},
    "test_method_lines_dic": {
      "ExcelExceptionTest::::excelException1()": [
        13,
        17
      ],
      "ExcelExceptionTest::::excelException2()": [
        19,
        24
      ],
      "ExcelExceptionTest::::excelException3()": [
        26,
        32
      ],
      "ExcelExceptionTest::::excelException4()": [
        34,
        41
      ],
      "ExcelExceptionTest::::excelException5()": [
        43,
        48
      ],
      "ExcelExceptionTest::::excelException6()": [
        50,
        56
      ]
    },
    "reverse_method_lines_dic": {},
    "test_reverse_method_lines_dic": {
      "13": "ExcelExceptionTest::::excelException1()",
      "14": "ExcelExceptionTest::::excelException1()",
      "15": "ExcelExceptionTest::::excelException1()",
      "16": "ExcelExceptionTest::::excelException1()",
      "17": "ExcelExceptionTest::::excelException1()",
      "19": "ExcelExceptionTest::::excelException2()",
      "20": "ExcelExceptionTest::::excelException2()",
      "21": "ExcelExceptionTest::::excelException2()",
      "22": "ExcelExceptionTest::::excelException2()",
      "23": "ExcelExceptionTest::::excelException2()",
      "24": "ExcelExceptionTest::::excelException2()",
      "26": "ExcelExceptionTest::::excelException3()",
      "27": "ExcelExceptionTest::::excelException3()",
      "28": "ExcelExceptionTest::::excelException3()",
      "29": "ExcelExceptionTest::::excelException3()",
      "30": "ExcelExceptionTest::::excelException3()",
      "31": "ExcelExceptionTest::::excelException3()",
      "32": "ExcelExceptionTest::::excelException3()",
      "34": "ExcelExceptionTest::::excelException4()",
      "35": "ExcelExceptionTest::::excelException4()",
      "36": "ExcelExceptionTest::::excelException4()",
      "37": "ExcelExceptionTest::::excelException4()",
      "38": "ExcelExceptionTest::::excelException4()",
      "39": "ExcelExceptionTest::::excelException4()",
      "40": "ExcelExceptionTest::::excelException4()",
      "41": "ExcelExceptionTest::::excelException4()",
      "43": "ExcelExceptionTest::::excelException5()",
      "44": "ExcelExceptionTest::::excelException5()",
      "45": "ExcelExceptionTest::::excelException5()",
      "46": "ExcelExceptionTest::::excelException5()",
      "47": "ExcelExceptionTest::::excelException5()",
      "48": "ExcelExceptionTest::::excelException5()",
      "50": "ExcelExceptionTest::::excelException6()",
      "51": "ExcelExceptionTest::::excelException6()",
      "52": "ExcelExceptionTest::::excelException6()",
      "53": "ExcelExceptionTest::::excelException6()",
      "54": "ExcelExceptionTest::::excelException6()",
      "55": "ExcelExceptionTest::::excelException6()",
      "56": "ExcelExceptionTest::::excelException6()"
    },
    "tests": [
      {
        "test_lines": [
          13,
          17
        ],
        "covered_lines": [
          25,
          26
        ]
      },
      {
        "test_lines": [
          19,
          24
        ],
        "covered_lines": [
          29,
          30
        ]
      },
      {
        "test_lines": [
          26,
          32
        ],
        "covered_lines": [
          33,
          34
        ]
      },
      {
        "test_lines": [
          34,
          41
        ],
        "covered_lines": [
          37,
          38
        ]
      },
      {
        "test_lines": [
          43,
          48
        ],
        "covered_lines": [
          41,
          42
        ]
      },
      {
        "test_lines": [
          50,
          56
        ],
        "covered_lines": [
          46,
          47
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/zouzhiy-excel/src/main/java/io/github/zouzhiy/excel/utils/ExcelDateParseUtils.java": {
    "class_content": [
      "/*\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package io.github.zouzhiy.excel.utils;\n",
      "\n",
      "import io.github.zouzhiy.excel.exceptions.ExcelException;\n",
      "\n",
      "import java.text.ParsePosition;\n",
      "import java.time.*;\n",
      "import java.time.format.DateTimeFormatter;\n",
      "import java.time.temporal.ChronoField;\n",
      "import java.time.temporal.TemporalAccessor;\n",
      "import java.time.temporal.TemporalQueries;\n",
      "import java.util.Map;\n",
      "import java.util.concurrent.ConcurrentHashMap;\n",
      "\n",
      "import static java.time.temporal.ChronoField.MONTH_OF_YEAR;\n",
      "\n",
      "/**\n",
      " * @author zouzhiy\n",
      " * @since 2022/7/2\n",
      " */\n",
      "public class ExcelDateParseUtils {\n",
      "\n",
      "    private final static Map<String, DateTimeFormatter> DATE_TIME_FORMATTER_MAP = new ConcurrentHashMap<>(16);\n",
      "\n",
      "    /**\n",
      "     * \u53ef\u80fd\u7684\u65e5\u671f\u683c\u5f0f\u7c7b\u578b\n",
      "     */\n",
      "    private final static String[] PATTERNS = new String[]{\n",
      "            \"yyyy-MM-dd HH:mm:ss\", \"yyyy-MM-dd HH:mm\", \"yyyy-MM-dd HH\", \"yyyy-MM-dd\", \"yyyy-MM\"\n",
      "            , \"yyyy/MM/dd HH:mm:ss\", \"yyyy/MM/dd HH:mm\", \"yyyy/MM/dd HH\", \"yyyy/MM/dd\", \"yyyy/MM\"\n",
      "            , \"yyyy.MM.dd HH:mm:ss\", \"yyyy.MM.dd HH:mm\", \"yyyy.MM.dd HH\", \"yyyy.MM.dd\", \"yyyy.MM\"\n",
      "            , \"yyyyMMdd HHmmss\", \"yyyyMMdd HHmm\", \"yyyyMMdd HH\", \"yyyyMMdd\", \"yyyyMM\"\n",
      "            , \"yyyy\u5e74MM\u6708dd\u65e5 HH\u65f6mm\u5206ss\u79d2\", \"yyyy\u5e74MM\u6708dd\u65e5 HH\u65f6mm\u5206\", \"yyyy\u5e74MM\u6708dd\u65e5 HH\u65f6\", \"yyyy\u5e74MM\u6708dd\u65e5\", \"yyyy\u5e74MM\u6708\"\n",
      "            , \"yyyy\", \"HH:mm:ss\"\n",
      "\n",
      "    };\n",
      "\n",
      "    /**\n",
      "     * \u5b57\u7b26\u4e32\u89e3\u6790\u65e5\u671f\n",
      "     *\n",
      "     * @param str \u5b57\u7b26\n",
      "     * @return \u89e3\u6790\u51fa\u7684\u65e5\u671f\n",
      "     */\n",
      "    public static LocalDateTime parseDateTime(String str) {\n",
      "        return parseDateTimeWithPosition(str.replaceAll(\"\\\\s+\", \" \").trim());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5b57\u7b26\u4e32\u89e3\u6790\u65e5\u671f\n",
      "     *\n",
      "     * @param str     \u5b57\u7b26\n",
      "     * @param pattern \u6307\u5b9a\u7684\u89e3\u6790\u683c\u5f0f\uff0c\u4e3a\u7a7a\u6216 null \u65f6\uff0c\u4f7f\u7528\u53ef\u80fd\u7684\u683c\u5f0f\u904d\u5386\u89e3\u6790\n",
      "     * @return \u89e3\u6790\u51fa\u7684\u65e5\u671f\n",
      "     */\n",
      "    public static LocalDateTime parseDateTime(String str, String pattern) {\n",
      "        if (pattern == null || pattern.trim().length() == 0) {\n",
      "            return parseDateTime(str);\n",
      "        }\n",
      "        return parseDateTime(str.replaceAll(\"\\\\s+\", \" \").trim(), pattern, new ParsePosition(0));\n",
      "    }\n",
      "\n",
      "    private static LocalDateTime parseDateTimeWithPosition(String str) {\n",
      "        ParsePosition parsePosition = new ParsePosition(0);\n",
      "        for (String pattern : PATTERNS) {\n",
      "            try {\n",
      "                LocalDateTime localDateTime = parseDateTime(str, pattern, parsePosition);\n",
      "                if (parsePosition.getIndex() == str.length()) {\n",
      "                    return localDateTime;\n",
      "                }\n",
      "            } catch (ExcelException ignore) {\n",
      "            }\n",
      "            parsePosition.setIndex(0);\n",
      "            parsePosition.setErrorIndex(-1);\n",
      "        }\n",
      "\n",
      "        throw new ExcelException(\"Unable to parse the date: \" + str);\n",
      "    }\n",
      "\n",
      "\n",
      "    private static LocalDateTime parseDateTime(String str, String pattern, ParsePosition parsePosition) {\n",
      "\n",
      "        try {\n",
      "            DateTimeFormatter dateTimeFormatter = DATE_TIME_FORMATTER_MAP.computeIfAbsent(pattern, DateTimeFormatter::ofPattern);\n",
      "            TemporalAccessor temporalAccessor = dateTimeFormatter.parse(str, parsePosition);\n",
      "\n",
      "            LocalDateTime localDateTime = queryByDateAndTime(temporalAccessor);\n",
      "            if (localDateTime == null) {\n",
      "                localDateTime = queryByYearMonth(temporalAccessor);\n",
      "            }\n",
      "            if (localDateTime == null) {\n",
      "                localDateTime = queryByYear(temporalAccessor);\n",
      "            }\n",
      "            if (localDateTime == null) {\n",
      "                throw new ExcelException(\"\u65e5\u671f\u8f6c\u6362\u5931\u8d25\uff1a%s\", str);\n",
      "            }\n",
      "            return localDateTime;\n",
      "        } catch (ExcelException excelException) {\n",
      "            throw excelException;\n",
      "        } catch (Exception e) {\n",
      "            throw new ExcelException(e, \"\u65e5\u671f\u8f6c\u6362\u5931\u8d25\uff1a%s\", str);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private static LocalDateTime queryByDateAndTime(TemporalAccessor temporalAccessor) {\n",
      "        LocalTime time = temporalAccessor.query(TemporalQueries.localTime());\n",
      "        LocalDate date = temporalAccessor.query(TemporalQueries.localDate());\n",
      "        if (time == null && date == null) {\n",
      "            return null;\n",
      "        } else if (date != null && time == null) {\n",
      "            return LocalDateTime.of(date, LocalTime.MIN);\n",
      "        } else if (date == null) {\n",
      "            return LocalDateTime.of(LocalDate.of(1900, 1, 1), time);\n",
      "        } else {\n",
      "            return LocalDateTime.of(date, time);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private static LocalDateTime queryByYearMonth(TemporalAccessor temporalAccessor) {\n",
      "        YearMonth yearMonth = temporalAccessor.query(temporal -> {\n",
      "            if (temporal.isSupported(MONTH_OF_YEAR)) {\n",
      "                return YearMonth.from(temporal);\n",
      "            } else {\n",
      "                return null;\n",
      "            }\n",
      "        });\n",
      "        if (yearMonth == null) {\n",
      "            return null;\n",
      "        } else {\n",
      "            return LocalDateTime.of(yearMonth.atDay(1), LocalTime.MIN);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private static LocalDateTime queryByYear(TemporalAccessor temporalAccessor) {\n",
      "        Year year = temporalAccessor.query(temporal -> {\n",
      "            if (temporal.isSupported(ChronoField.YEAR)) {\n",
      "                return Year.from(temporal);\n",
      "            } else {\n",
      "                return null;\n",
      "            }\n",
      "        });\n",
      "        if (year == null) {\n",
      "            return null;\n",
      "        } else {\n",
      "            return LocalDateTime.of(year.atDay(1), LocalTime.MIN);\n",
      "        }\n",
      "    }\n",
      "\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package io.github.zouzhiy.excel.utils;\n",
      "\n",
      "import io.github.zouzhiy.excel.exceptions.ExcelException;\n",
      "import org.junit.jupiter.api.Assertions;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import java.time.LocalDateTime;\n",
      "\n",
      "/**\n",
      " * @author zouzhiy\n",
      " * @since 2022/7/9\n",
      " */\n",
      "class ExcelDateParseUtilsTest {\n",
      "\n",
      "    @Test\n",
      "    void parseDateTime1() {\n",
      "        LocalDateTime localDateTime = LocalDateTime.of(2022, 7, 8, 19, 30, 30);\n",
      "        String str1 = \"2022-07-08 19:30:30\";\n",
      "        String str2 = \"2022/07/08 19:30:30\";\n",
      "        String str3 = \"2022.07.08 19:30:30\";\n",
      "        String str4 = \"20220708 193030\";\n",
      "        String str5 = \"2022\u5e7407\u670808\u65e5 19\u65f630\u520630\u79d2\";\n",
      "\n",
      "        LocalDateTime localDateTime1 = ExcelDateParseUtils.parseDateTime(str1);\n",
      "        LocalDateTime localDateTime2 = ExcelDateParseUtils.parseDateTime(str2);\n",
      "        LocalDateTime localDateTime3 = ExcelDateParseUtils.parseDateTime(str3);\n",
      "        LocalDateTime localDateTime4 = ExcelDateParseUtils.parseDateTime(str4);\n",
      "        LocalDateTime localDateTime5 = ExcelDateParseUtils.parseDateTime(str5);\n",
      "\n",
      "        Assertions.assertEquals(localDateTime, localDateTime1);\n",
      "        Assertions.assertEquals(localDateTime, localDateTime2);\n",
      "        Assertions.assertEquals(localDateTime, localDateTime3);\n",
      "        Assertions.assertEquals(localDateTime, localDateTime4);\n",
      "        Assertions.assertEquals(localDateTime, localDateTime5);\n",
      "\n",
      "        String str6 = \"2022-0708 19:30:30\";\n",
      "        String str7 = \"202207-08 19:30:30\";\n",
      "        String str8 = \"2022-07-08 1930:30\";\n",
      "        String str9 = \"2022-07--08 19:30:30\";\n",
      "\n",
      "        try {\n",
      "            ExcelDateParseUtils.parseDateTime(str6);\n",
      "            assert false;\n",
      "        } catch (ExcelException e) {\n",
      "            assert true;\n",
      "        } catch (Exception e) {\n",
      "            assert false;\n",
      "        }\n",
      "\n",
      "        try {\n",
      "            ExcelDateParseUtils.parseDateTime(str7);\n",
      "            assert false;\n",
      "        } catch (ExcelException e) {\n",
      "            assert true;\n",
      "        } catch (Exception e) {\n",
      "            assert false;\n",
      "        }\n",
      "\n",
      "        try {\n",
      "            ExcelDateParseUtils.parseDateTime(str8);\n",
      "            assert false;\n",
      "        } catch (ExcelException e) {\n",
      "            assert true;\n",
      "        } catch (Exception e) {\n",
      "            assert false;\n",
      "        }\n",
      "\n",
      "        try {\n",
      "            ExcelDateParseUtils.parseDateTime(str9);\n",
      "            assert false;\n",
      "        } catch (ExcelException e) {\n",
      "            assert true;\n",
      "        } catch (Exception e) {\n",
      "            assert false;\n",
      "        }\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void parseDateTime2() {\n",
      "        LocalDateTime localDateTime = LocalDateTime.of(2022, 7, 8, 19, 30, 0);\n",
      "        String str1 = \"2022-07-08 19:30\";\n",
      "        String str2 = \"2022/07/08 19:30\";\n",
      "        String str3 = \"2022.07.08 19:30\";\n",
      "        String str4 = \"20220708 1930\";\n",
      "        String str5 = \"2022\u5e7407\u670808\u65e5 19\u65f630\u5206\";\n",
      "\n",
      "        LocalDateTime localDateTime1 = ExcelDateParseUtils.parseDateTime(str1);\n",
      "        LocalDateTime localDateTime2 = ExcelDateParseUtils.parseDateTime(str2);\n",
      "        LocalDateTime localDateTime3 = ExcelDateParseUtils.parseDateTime(str3);\n",
      "        LocalDateTime localDateTime4 = ExcelDateParseUtils.parseDateTime(str4);\n",
      "        LocalDateTime localDateTime5 = ExcelDateParseUtils.parseDateTime(str5);\n",
      "\n",
      "        Assertions.assertEquals(localDateTime, localDateTime1);\n",
      "        Assertions.assertEquals(localDateTime, localDateTime2);\n",
      "        Assertions.assertEquals(localDateTime, localDateTime3);\n",
      "        Assertions.assertEquals(localDateTime, localDateTime4);\n",
      "        Assertions.assertEquals(localDateTime, localDateTime5);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void parseDateTime3() {\n",
      "        LocalDateTime localDateTime = LocalDateTime.of(2022, 7, 8, 19, 0, 0);\n",
      "        String str1 = \"2022-07-08 19\";\n",
      "        String str2 = \"2022/07/08 19\";\n",
      "        String str3 = \"2022.07.08 19\";\n",
      "        String str4 = \"20220708 19\";\n",
      "        String str5 = \"2022\u5e7407\u670808\u65e5 19\u65f6\";\n",
      "\n",
      "        LocalDateTime localDateTime1 = ExcelDateParseUtils.parseDateTime(str1);\n",
      "        LocalDateTime localDateTime2 = ExcelDateParseUtils.parseDateTime(str2);\n",
      "        LocalDateTime localDateTime3 = ExcelDateParseUtils.parseDateTime(str3);\n",
      "        LocalDateTime localDateTime4 = ExcelDateParseUtils.parseDateTime(str4);\n",
      "        LocalDateTime localDateTime5 = ExcelDateParseUtils.parseDateTime(str5);\n",
      "\n",
      "        Assertions.assertEquals(localDateTime, localDateTime1);\n",
      "        Assertions.assertEquals(localDateTime, localDateTime2);\n",
      "        Assertions.assertEquals(localDateTime, localDateTime3);\n",
      "        Assertions.assertEquals(localDateTime, localDateTime4);\n",
      "        Assertions.assertEquals(localDateTime, localDateTime5);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void parseDateTime4() {\n",
      "        LocalDateTime localDateTime = LocalDateTime.of(2022, 7, 8, 0, 0, 0);\n",
      "        String str1 = \"2022-07-08 \";\n",
      "        String str2 = \"2022/07/08 \";\n",
      "        String str3 = \"2022.07.08 \";\n",
      "        String str4 = \"20220708 \";\n",
      "        String str5 = \"2022\u5e7407\u670808\u65e5 \";\n",
      "\n",
      "        LocalDateTime localDateTime1 = ExcelDateParseUtils.parseDateTime(str1);\n",
      "        LocalDateTime localDateTime2 = ExcelDateParseUtils.parseDateTime(str2);\n",
      "        LocalDateTime localDateTime3 = ExcelDateParseUtils.parseDateTime(str3);\n",
      "        LocalDateTime localDateTime4 = ExcelDateParseUtils.parseDateTime(str4);\n",
      "        LocalDateTime localDateTime5 = ExcelDateParseUtils.parseDateTime(str5);\n",
      "\n",
      "        Assertions.assertEquals(localDateTime, localDateTime1);\n",
      "        Assertions.assertEquals(localDateTime, localDateTime2);\n",
      "        Assertions.assertEquals(localDateTime, localDateTime3);\n",
      "        Assertions.assertEquals(localDateTime, localDateTime4);\n",
      "        Assertions.assertEquals(localDateTime, localDateTime5);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void parseDateTime5() {\n",
      "        LocalDateTime localDateTime = LocalDateTime.of(2022, 7, 1, 0, 0, 0);\n",
      "        String str1 = \"2022-07 \";\n",
      "        String str2 = \"2022/07 \";\n",
      "        String str3 = \"2022.07 \";\n",
      "        String str4 = \"202207 \";\n",
      "        String str5 = \"2022\u5e7407\u6708 \";\n",
      "\n",
      "        LocalDateTime localDateTime1 = ExcelDateParseUtils.parseDateTime(str1);\n",
      "        LocalDateTime localDateTime2 = ExcelDateParseUtils.parseDateTime(str2);\n",
      "        LocalDateTime localDateTime3 = ExcelDateParseUtils.parseDateTime(str3);\n",
      "        LocalDateTime localDateTime4 = ExcelDateParseUtils.parseDateTime(str4);\n",
      "        LocalDateTime localDateTime5 = ExcelDateParseUtils.parseDateTime(str5);\n",
      "\n",
      "        Assertions.assertEquals(localDateTime, localDateTime1);\n",
      "        Assertions.assertEquals(localDateTime, localDateTime2);\n",
      "        Assertions.assertEquals(localDateTime, localDateTime3);\n",
      "        Assertions.assertEquals(localDateTime, localDateTime4);\n",
      "        Assertions.assertEquals(localDateTime, localDateTime5);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void parseDateTime6() {\n",
      "        LocalDateTime localDateTime = LocalDateTime.of(2022, 1, 1, 0, 0, 0);\n",
      "        String str1 = \"2022 \";\n",
      "\n",
      "        LocalDateTime localDateTime1 = ExcelDateParseUtils.parseDateTime(str1);\n",
      "\n",
      "        Assertions.assertEquals(localDateTime, localDateTime1);\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void parseDateTime7() {\n",
      "        LocalDateTime localDateTime = LocalDateTime.of(2022, 7, 8, 19, 30, 22);\n",
      "        String str1 = \"2022-07-08 19:30:22\";\n",
      "\n",
      "        LocalDateTime localDateTime1 = ExcelDateParseUtils.parseDateTime(str1, \"\");\n",
      "        LocalDateTime localDateTime2 = ExcelDateParseUtils.parseDateTime(str1, \"yyyy-MM-dd HH:mm:ss\");\n",
      "\n",
      "        Assertions.assertEquals(localDateTime, localDateTime1);\n",
      "\n",
      "        Assertions.assertEquals(localDateTime, localDateTime2);\n",
      "\n",
      "        try {\n",
      "            LocalDateTime localDateTime3 = ExcelDateParseUtils.parseDateTime(str1, \"yyyy-MMdd HH:mm:ss\");\n",
      "            assert false;\n",
      "\n",
      "        } catch (ExcelException e) {\n",
      "            assert true;\n",
      "        } catch (Exception e) {\n",
      "            assert false;\n",
      "        }\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void parseDateTime8() {\n",
      "        String str1 = \"1\";\n",
      "\n",
      "\n",
      "        try {\n",
      "            LocalDateTime localDateTime2 = ExcelDateParseUtils.parseDateTime(str1);\n",
      "            assert false;\n",
      "        } catch (ExcelException e) {\n",
      "            assert true;\n",
      "        } catch (Exception e) {\n",
      "            assert false;\n",
      "        }\n",
      "\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "ExcelDateParseUtils::::parseDateTime(java.lang.String)": [
        56,
        58
      ],
      "ExcelDateParseUtils::::parseDateTime(java.lang.String,java.lang.String)": [
        67,
        72
      ],
      "ExcelDateParseUtils::::parseDateTimeWithPosition(java.lang.String)": [
        74,
        89
      ],
      "ExcelDateParseUtils::::parseDateTime(java.lang.String,java.lang.String,java.text.ParsePosition)": [
        92,
        114
      ],
      "ExcelDateParseUtils::::queryByDateAndTime(java.time.temporal.TemporalAccessor)": [
        116,
        128
      ],
      "ExcelDateParseUtils::::queryByYearMonth(java.time.temporal.TemporalAccessor)": [
        130,
        143
      ],
      "ExcelDateParseUtils::::queryByYear(java.time.temporal.TemporalAccessor)": [
        145,
        158
      ]
    },
    "test_method_lines_dic": {
      "ExcelDateParseUtilsTest::::parseDateTime1()": [
        15,
        77
      ],
      "ExcelDateParseUtilsTest::::parseDateTime2()": [
        79,
        99
      ],
      "ExcelDateParseUtilsTest::::parseDateTime3()": [
        101,
        121
      ],
      "ExcelDateParseUtilsTest::::parseDateTime4()": [
        123,
        143
      ],
      "ExcelDateParseUtilsTest::::parseDateTime5()": [
        145,
        165
      ],
      "ExcelDateParseUtilsTest::::parseDateTime6()": [
        167,
        176
      ],
      "ExcelDateParseUtilsTest::::parseDateTime7()": [
        178,
        200
      ],
      "ExcelDateParseUtilsTest::::parseDateTime8()": [
        202,
        216
      ]
    },
    "reverse_method_lines_dic": {
      "56": "ExcelDateParseUtils::::parseDateTime(java.lang.String)",
      "57": "ExcelDateParseUtils::::parseDateTime(java.lang.String)",
      "58": "ExcelDateParseUtils::::parseDateTime(java.lang.String)",
      "67": "ExcelDateParseUtils::::parseDateTime(java.lang.String,java.lang.String)",
      "68": "ExcelDateParseUtils::::parseDateTime(java.lang.String,java.lang.String)",
      "69": "ExcelDateParseUtils::::parseDateTime(java.lang.String,java.lang.String)",
      "70": "ExcelDateParseUtils::::parseDateTime(java.lang.String,java.lang.String)",
      "71": "ExcelDateParseUtils::::parseDateTime(java.lang.String,java.lang.String)",
      "72": "ExcelDateParseUtils::::parseDateTime(java.lang.String,java.lang.String)",
      "74": "ExcelDateParseUtils::::parseDateTimeWithPosition(java.lang.String)",
      "75": "ExcelDateParseUtils::::parseDateTimeWithPosition(java.lang.String)",
      "76": "ExcelDateParseUtils::::parseDateTimeWithPosition(java.lang.String)",
      "77": "ExcelDateParseUtils::::parseDateTimeWithPosition(java.lang.String)",
      "78": "ExcelDateParseUtils::::parseDateTimeWithPosition(java.lang.String)",
      "79": "ExcelDateParseUtils::::parseDateTimeWithPosition(java.lang.String)",
      "80": "ExcelDateParseUtils::::parseDateTimeWithPosition(java.lang.String)",
      "81": "ExcelDateParseUtils::::parseDateTimeWithPosition(java.lang.String)",
      "82": "ExcelDateParseUtils::::parseDateTimeWithPosition(java.lang.String)",
      "83": "ExcelDateParseUtils::::parseDateTimeWithPosition(java.lang.String)",
      "84": "ExcelDateParseUtils::::parseDateTimeWithPosition(java.lang.String)",
      "85": "ExcelDateParseUtils::::parseDateTimeWithPosition(java.lang.String)",
      "86": "ExcelDateParseUtils::::parseDateTimeWithPosition(java.lang.String)",
      "87": "ExcelDateParseUtils::::parseDateTimeWithPosition(java.lang.String)",
      "88": "ExcelDateParseUtils::::parseDateTimeWithPosition(java.lang.String)",
      "89": "ExcelDateParseUtils::::parseDateTimeWithPosition(java.lang.String)",
      "92": "ExcelDateParseUtils::::parseDateTime(java.lang.String,java.lang.String,java.text.ParsePosition)",
      "93": "ExcelDateParseUtils::::parseDateTime(java.lang.String,java.lang.String,java.text.ParsePosition)",
      "94": "ExcelDateParseUtils::::parseDateTime(java.lang.String,java.lang.String,java.text.ParsePosition)",
      "95": "ExcelDateParseUtils::::parseDateTime(java.lang.String,java.lang.String,java.text.ParsePosition)",
      "96": "ExcelDateParseUtils::::parseDateTime(java.lang.String,java.lang.String,java.text.ParsePosition)",
      "97": "ExcelDateParseUtils::::parseDateTime(java.lang.String,java.lang.String,java.text.ParsePosition)",
      "98": "ExcelDateParseUtils::::parseDateTime(java.lang.String,java.lang.String,java.text.ParsePosition)",
      "99": "ExcelDateParseUtils::::parseDateTime(java.lang.String,java.lang.String,java.text.ParsePosition)",
      "100": "ExcelDateParseUtils::::parseDateTime(java.lang.String,java.lang.String,java.text.ParsePosition)",
      "101": "ExcelDateParseUtils::::parseDateTime(java.lang.String,java.lang.String,java.text.ParsePosition)",
      "102": "ExcelDateParseUtils::::parseDateTime(java.lang.String,java.lang.String,java.text.ParsePosition)",
      "103": "ExcelDateParseUtils::::parseDateTime(java.lang.String,java.lang.String,java.text.ParsePosition)",
      "104": "ExcelDateParseUtils::::parseDateTime(java.lang.String,java.lang.String,java.text.ParsePosition)",
      "105": "ExcelDateParseUtils::::parseDateTime(java.lang.String,java.lang.String,java.text.ParsePosition)",
      "106": "ExcelDateParseUtils::::parseDateTime(java.lang.String,java.lang.String,java.text.ParsePosition)",
      "107": "ExcelDateParseUtils::::parseDateTime(java.lang.String,java.lang.String,java.text.ParsePosition)",
      "108": "ExcelDateParseUtils::::parseDateTime(java.lang.String,java.lang.String,java.text.ParsePosition)",
      "109": "ExcelDateParseUtils::::parseDateTime(java.lang.String,java.lang.String,java.text.ParsePosition)",
      "110": "ExcelDateParseUtils::::parseDateTime(java.lang.String,java.lang.String,java.text.ParsePosition)",
      "111": "ExcelDateParseUtils::::parseDateTime(java.lang.String,java.lang.String,java.text.ParsePosition)",
      "112": "ExcelDateParseUtils::::parseDateTime(java.lang.String,java.lang.String,java.text.ParsePosition)",
      "113": "ExcelDateParseUtils::::parseDateTime(java.lang.String,java.lang.String,java.text.ParsePosition)",
      "114": "ExcelDateParseUtils::::parseDateTime(java.lang.String,java.lang.String,java.text.ParsePosition)",
      "116": "ExcelDateParseUtils::::queryByDateAndTime(java.time.temporal.TemporalAccessor)",
      "117": "ExcelDateParseUtils::::queryByDateAndTime(java.time.temporal.TemporalAccessor)",
      "118": "ExcelDateParseUtils::::queryByDateAndTime(java.time.temporal.TemporalAccessor)",
      "119": "ExcelDateParseUtils::::queryByDateAndTime(java.time.temporal.TemporalAccessor)",
      "120": "ExcelDateParseUtils::::queryByDateAndTime(java.time.temporal.TemporalAccessor)",
      "121": "ExcelDateParseUtils::::queryByDateAndTime(java.time.temporal.TemporalAccessor)",
      "122": "ExcelDateParseUtils::::queryByDateAndTime(java.time.temporal.TemporalAccessor)",
      "123": "ExcelDateParseUtils::::queryByDateAndTime(java.time.temporal.TemporalAccessor)",
      "124": "ExcelDateParseUtils::::queryByDateAndTime(java.time.temporal.TemporalAccessor)",
      "125": "ExcelDateParseUtils::::queryByDateAndTime(java.time.temporal.TemporalAccessor)",
      "126": "ExcelDateParseUtils::::queryByDateAndTime(java.time.temporal.TemporalAccessor)",
      "127": "ExcelDateParseUtils::::queryByDateAndTime(java.time.temporal.TemporalAccessor)",
      "128": "ExcelDateParseUtils::::queryByDateAndTime(java.time.temporal.TemporalAccessor)",
      "130": "ExcelDateParseUtils::::queryByYearMonth(java.time.temporal.TemporalAccessor)",
      "131": "ExcelDateParseUtils::::queryByYearMonth(java.time.temporal.TemporalAccessor)",
      "132": "ExcelDateParseUtils::::queryByYearMonth(java.time.temporal.TemporalAccessor)",
      "133": "ExcelDateParseUtils::::queryByYearMonth(java.time.temporal.TemporalAccessor)",
      "134": "ExcelDateParseUtils::::queryByYearMonth(java.time.temporal.TemporalAccessor)",
      "135": "ExcelDateParseUtils::::queryByYearMonth(java.time.temporal.TemporalAccessor)",
      "136": "ExcelDateParseUtils::::queryByYearMonth(java.time.temporal.TemporalAccessor)",
      "137": "ExcelDateParseUtils::::queryByYearMonth(java.time.temporal.TemporalAccessor)",
      "138": "ExcelDateParseUtils::::queryByYearMonth(java.time.temporal.TemporalAccessor)",
      "139": "ExcelDateParseUtils::::queryByYearMonth(java.time.temporal.TemporalAccessor)",
      "140": "ExcelDateParseUtils::::queryByYearMonth(java.time.temporal.TemporalAccessor)",
      "141": "ExcelDateParseUtils::::queryByYearMonth(java.time.temporal.TemporalAccessor)",
      "142": "ExcelDateParseUtils::::queryByYearMonth(java.time.temporal.TemporalAccessor)",
      "143": "ExcelDateParseUtils::::queryByYearMonth(java.time.temporal.TemporalAccessor)",
      "145": "ExcelDateParseUtils::::queryByYear(java.time.temporal.TemporalAccessor)",
      "146": "ExcelDateParseUtils::::queryByYear(java.time.temporal.TemporalAccessor)",
      "147": "ExcelDateParseUtils::::queryByYear(java.time.temporal.TemporalAccessor)",
      "148": "ExcelDateParseUtils::::queryByYear(java.time.temporal.TemporalAccessor)",
      "149": "ExcelDateParseUtils::::queryByYear(java.time.temporal.TemporalAccessor)",
      "150": "ExcelDateParseUtils::::queryByYear(java.time.temporal.TemporalAccessor)",
      "151": "ExcelDateParseUtils::::queryByYear(java.time.temporal.TemporalAccessor)",
      "152": "ExcelDateParseUtils::::queryByYear(java.time.temporal.TemporalAccessor)",
      "153": "ExcelDateParseUtils::::queryByYear(java.time.temporal.TemporalAccessor)",
      "154": "ExcelDateParseUtils::::queryByYear(java.time.temporal.TemporalAccessor)",
      "155": "ExcelDateParseUtils::::queryByYear(java.time.temporal.TemporalAccessor)",
      "156": "ExcelDateParseUtils::::queryByYear(java.time.temporal.TemporalAccessor)",
      "157": "ExcelDateParseUtils::::queryByYear(java.time.temporal.TemporalAccessor)",
      "158": "ExcelDateParseUtils::::queryByYear(java.time.temporal.TemporalAccessor)"
    },
    "test_reverse_method_lines_dic": {
      "15": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "16": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "17": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "18": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "19": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "20": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "21": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "22": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "23": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "24": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "25": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "26": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "27": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "28": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "29": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "30": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "31": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "32": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "33": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "34": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "35": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "36": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "37": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "38": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "39": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "40": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "41": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "42": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "43": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "44": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "45": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "46": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "47": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "48": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "49": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "50": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "51": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "52": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "53": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "54": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "55": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "56": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "57": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "58": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "59": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "60": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "61": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "62": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "63": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "64": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "65": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "66": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "67": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "68": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "69": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "70": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "71": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "72": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "73": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "74": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "75": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "76": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "77": "ExcelDateParseUtilsTest::::parseDateTime1()",
      "79": "ExcelDateParseUtilsTest::::parseDateTime2()",
      "80": "ExcelDateParseUtilsTest::::parseDateTime2()",
      "81": "ExcelDateParseUtilsTest::::parseDateTime2()",
      "82": "ExcelDateParseUtilsTest::::parseDateTime2()",
      "83": "ExcelDateParseUtilsTest::::parseDateTime2()",
      "84": "ExcelDateParseUtilsTest::::parseDateTime2()",
      "85": "ExcelDateParseUtilsTest::::parseDateTime2()",
      "86": "ExcelDateParseUtilsTest::::parseDateTime2()",
      "87": "ExcelDateParseUtilsTest::::parseDateTime2()",
      "88": "ExcelDateParseUtilsTest::::parseDateTime2()",
      "89": "ExcelDateParseUtilsTest::::parseDateTime2()",
      "90": "ExcelDateParseUtilsTest::::parseDateTime2()",
      "91": "ExcelDateParseUtilsTest::::parseDateTime2()",
      "92": "ExcelDateParseUtilsTest::::parseDateTime2()",
      "93": "ExcelDateParseUtilsTest::::parseDateTime2()",
      "94": "ExcelDateParseUtilsTest::::parseDateTime2()",
      "95": "ExcelDateParseUtilsTest::::parseDateTime2()",
      "96": "ExcelDateParseUtilsTest::::parseDateTime2()",
      "97": "ExcelDateParseUtilsTest::::parseDateTime2()",
      "98": "ExcelDateParseUtilsTest::::parseDateTime2()",
      "99": "ExcelDateParseUtilsTest::::parseDateTime2()",
      "101": "ExcelDateParseUtilsTest::::parseDateTime3()",
      "102": "ExcelDateParseUtilsTest::::parseDateTime3()",
      "103": "ExcelDateParseUtilsTest::::parseDateTime3()",
      "104": "ExcelDateParseUtilsTest::::parseDateTime3()",
      "105": "ExcelDateParseUtilsTest::::parseDateTime3()",
      "106": "ExcelDateParseUtilsTest::::parseDateTime3()",
      "107": "ExcelDateParseUtilsTest::::parseDateTime3()",
      "108": "ExcelDateParseUtilsTest::::parseDateTime3()",
      "109": "ExcelDateParseUtilsTest::::parseDateTime3()",
      "110": "ExcelDateParseUtilsTest::::parseDateTime3()",
      "111": "ExcelDateParseUtilsTest::::parseDateTime3()",
      "112": "ExcelDateParseUtilsTest::::parseDateTime3()",
      "113": "ExcelDateParseUtilsTest::::parseDateTime3()",
      "114": "ExcelDateParseUtilsTest::::parseDateTime3()",
      "115": "ExcelDateParseUtilsTest::::parseDateTime3()",
      "116": "ExcelDateParseUtilsTest::::parseDateTime3()",
      "117": "ExcelDateParseUtilsTest::::parseDateTime3()",
      "118": "ExcelDateParseUtilsTest::::parseDateTime3()",
      "119": "ExcelDateParseUtilsTest::::parseDateTime3()",
      "120": "ExcelDateParseUtilsTest::::parseDateTime3()",
      "121": "ExcelDateParseUtilsTest::::parseDateTime3()",
      "123": "ExcelDateParseUtilsTest::::parseDateTime4()",
      "124": "ExcelDateParseUtilsTest::::parseDateTime4()",
      "125": "ExcelDateParseUtilsTest::::parseDateTime4()",
      "126": "ExcelDateParseUtilsTest::::parseDateTime4()",
      "127": "ExcelDateParseUtilsTest::::parseDateTime4()",
      "128": "ExcelDateParseUtilsTest::::parseDateTime4()",
      "129": "ExcelDateParseUtilsTest::::parseDateTime4()",
      "130": "ExcelDateParseUtilsTest::::parseDateTime4()",
      "131": "ExcelDateParseUtilsTest::::parseDateTime4()",
      "132": "ExcelDateParseUtilsTest::::parseDateTime4()",
      "133": "ExcelDateParseUtilsTest::::parseDateTime4()",
      "134": "ExcelDateParseUtilsTest::::parseDateTime4()",
      "135": "ExcelDateParseUtilsTest::::parseDateTime4()",
      "136": "ExcelDateParseUtilsTest::::parseDateTime4()",
      "137": "ExcelDateParseUtilsTest::::parseDateTime4()",
      "138": "ExcelDateParseUtilsTest::::parseDateTime4()",
      "139": "ExcelDateParseUtilsTest::::parseDateTime4()",
      "140": "ExcelDateParseUtilsTest::::parseDateTime4()",
      "141": "ExcelDateParseUtilsTest::::parseDateTime4()",
      "142": "ExcelDateParseUtilsTest::::parseDateTime4()",
      "143": "ExcelDateParseUtilsTest::::parseDateTime4()",
      "145": "ExcelDateParseUtilsTest::::parseDateTime5()",
      "146": "ExcelDateParseUtilsTest::::parseDateTime5()",
      "147": "ExcelDateParseUtilsTest::::parseDateTime5()",
      "148": "ExcelDateParseUtilsTest::::parseDateTime5()",
      "149": "ExcelDateParseUtilsTest::::parseDateTime5()",
      "150": "ExcelDateParseUtilsTest::::parseDateTime5()",
      "151": "ExcelDateParseUtilsTest::::parseDateTime5()",
      "152": "ExcelDateParseUtilsTest::::parseDateTime5()",
      "153": "ExcelDateParseUtilsTest::::parseDateTime5()",
      "154": "ExcelDateParseUtilsTest::::parseDateTime5()",
      "155": "ExcelDateParseUtilsTest::::parseDateTime5()",
      "156": "ExcelDateParseUtilsTest::::parseDateTime5()",
      "157": "ExcelDateParseUtilsTest::::parseDateTime5()",
      "158": "ExcelDateParseUtilsTest::::parseDateTime5()",
      "159": "ExcelDateParseUtilsTest::::parseDateTime5()",
      "160": "ExcelDateParseUtilsTest::::parseDateTime5()",
      "161": "ExcelDateParseUtilsTest::::parseDateTime5()",
      "162": "ExcelDateParseUtilsTest::::parseDateTime5()",
      "163": "ExcelDateParseUtilsTest::::parseDateTime5()",
      "164": "ExcelDateParseUtilsTest::::parseDateTime5()",
      "165": "ExcelDateParseUtilsTest::::parseDateTime5()",
      "167": "ExcelDateParseUtilsTest::::parseDateTime6()",
      "168": "ExcelDateParseUtilsTest::::parseDateTime6()",
      "169": "ExcelDateParseUtilsTest::::parseDateTime6()",
      "170": "ExcelDateParseUtilsTest::::parseDateTime6()",
      "171": "ExcelDateParseUtilsTest::::parseDateTime6()",
      "172": "ExcelDateParseUtilsTest::::parseDateTime6()",
      "173": "ExcelDateParseUtilsTest::::parseDateTime6()",
      "174": "ExcelDateParseUtilsTest::::parseDateTime6()",
      "175": "ExcelDateParseUtilsTest::::parseDateTime6()",
      "176": "ExcelDateParseUtilsTest::::parseDateTime6()",
      "178": "ExcelDateParseUtilsTest::::parseDateTime7()",
      "179": "ExcelDateParseUtilsTest::::parseDateTime7()",
      "180": "ExcelDateParseUtilsTest::::parseDateTime7()",
      "181": "ExcelDateParseUtilsTest::::parseDateTime7()",
      "182": "ExcelDateParseUtilsTest::::parseDateTime7()",
      "183": "ExcelDateParseUtilsTest::::parseDateTime7()",
      "184": "ExcelDateParseUtilsTest::::parseDateTime7()",
      "185": "ExcelDateParseUtilsTest::::parseDateTime7()",
      "186": "ExcelDateParseUtilsTest::::parseDateTime7()",
      "187": "ExcelDateParseUtilsTest::::parseDateTime7()",
      "188": "ExcelDateParseUtilsTest::::parseDateTime7()",
      "189": "ExcelDateParseUtilsTest::::parseDateTime7()",
      "190": "ExcelDateParseUtilsTest::::parseDateTime7()",
      "191": "ExcelDateParseUtilsTest::::parseDateTime7()",
      "192": "ExcelDateParseUtilsTest::::parseDateTime7()",
      "193": "ExcelDateParseUtilsTest::::parseDateTime7()",
      "194": "ExcelDateParseUtilsTest::::parseDateTime7()",
      "195": "ExcelDateParseUtilsTest::::parseDateTime7()",
      "196": "ExcelDateParseUtilsTest::::parseDateTime7()",
      "197": "ExcelDateParseUtilsTest::::parseDateTime7()",
      "198": "ExcelDateParseUtilsTest::::parseDateTime7()",
      "199": "ExcelDateParseUtilsTest::::parseDateTime7()",
      "200": "ExcelDateParseUtilsTest::::parseDateTime7()",
      "202": "ExcelDateParseUtilsTest::::parseDateTime8()",
      "203": "ExcelDateParseUtilsTest::::parseDateTime8()",
      "204": "ExcelDateParseUtilsTest::::parseDateTime8()",
      "205": "ExcelDateParseUtilsTest::::parseDateTime8()",
      "206": "ExcelDateParseUtilsTest::::parseDateTime8()",
      "207": "ExcelDateParseUtilsTest::::parseDateTime8()",
      "208": "ExcelDateParseUtilsTest::::parseDateTime8()",
      "209": "ExcelDateParseUtilsTest::::parseDateTime8()",
      "210": "ExcelDateParseUtilsTest::::parseDateTime8()",
      "211": "ExcelDateParseUtilsTest::::parseDateTime8()",
      "212": "ExcelDateParseUtilsTest::::parseDateTime8()",
      "213": "ExcelDateParseUtilsTest::::parseDateTime8()",
      "214": "ExcelDateParseUtilsTest::::parseDateTime8()",
      "215": "ExcelDateParseUtilsTest::::parseDateTime8()",
      "216": "ExcelDateParseUtilsTest::::parseDateTime8()"
    },
    "tests": [
      {
        "test_lines": [
          15,
          77
        ],
        "covered_lines": [
          35,
          40,
          57,
          75,
          76,
          78,
          79,
          80,
          82,
          83,
          84,
          85,
          88,
          95,
          96,
          98,
          99,
          100,
          102,
          103,
          105,
          108,
          111,
          112,
          117,
          118,
          119,
          120,
          121,
          122,
          123,
          126,
          131,
          132,
          133,
          135,
          138,
          139,
          141,
          146,
          147,
          148,
          153,
          156
        ]
      },
      {
        "test_lines": [
          79,
          99
        ],
        "covered_lines": [
          35,
          40,
          57,
          75,
          76,
          78,
          79,
          80,
          82,
          84,
          85,
          95,
          96,
          98,
          99,
          102,
          105,
          108,
          111,
          112,
          117,
          118,
          119,
          121,
          123,
          126
        ]
      },
      {
        "test_lines": [
          101,
          121
        ],
        "covered_lines": [
          35,
          40,
          57,
          75,
          76,
          78,
          79,
          80,
          82,
          84,
          85,
          95,
          96,
          98,
          99,
          102,
          105,
          108,
          111,
          112,
          117,
          118,
          119,
          121,
          123,
          126
        ]
      },
      {
        "test_lines": [
          123,
          143
        ],
        "covered_lines": [
          35,
          40,
          57,
          75,
          76,
          78,
          79,
          80,
          82,
          84,
          85,
          95,
          96,
          98,
          99,
          102,
          105,
          108,
          111,
          112,
          117,
          118,
          119,
          121,
          122
        ]
      },
      {
        "test_lines": [
          145,
          165
        ],
        "covered_lines": [
          35,
          40,
          57,
          75,
          76,
          78,
          79,
          80,
          82,
          84,
          85,
          95,
          96,
          98,
          99,
          100,
          102,
          105,
          108,
          111,
          112,
          117,
          118,
          119,
          120,
          131,
          132,
          133,
          138,
          141
        ]
      },
      {
        "test_lines": [
          167,
          176
        ],
        "covered_lines": [
          35,
          40,
          57,
          75,
          76,
          78,
          79,
          80,
          82,
          84,
          85,
          95,
          96,
          98,
          99,
          100,
          102,
          103,
          105,
          108,
          111,
          112,
          117,
          118,
          119,
          120,
          131,
          132,
          135,
          138,
          139,
          146,
          147,
          148,
          153,
          156
        ]
      },
      {
        "test_lines": [
          178,
          200
        ],
        "covered_lines": [
          35,
          40,
          57,
          68,
          69,
          71,
          75,
          76,
          78,
          79,
          80,
          95,
          96,
          98,
          99,
          102,
          105,
          108,
          111,
          112,
          117,
          118,
          119,
          121,
          123,
          126
        ]
      },
      {
        "test_lines": [
          202,
          216
        ],
        "covered_lines": [
          35,
          40,
          75,
          76,
          82,
          84,
          85,
          88,
          95,
          111,
          112
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/zouzhiy-excel/src/main/java/io/github/zouzhiy/excel/read/registry/RowFootReadRegistry.java": {
    "class_content": [
      "/*\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package io.github.zouzhiy.excel.read.registry;\n",
      "\n",
      "import io.github.zouzhiy.excel.exceptions.ExcelException;\n",
      "import io.github.zouzhiy.excel.metadata.Configuration;\n",
      "import io.github.zouzhiy.excel.read.RowFootRead;\n",
      "import io.github.zouzhiy.excel.read.defaults.DefaultRowFootRead;\n",
      "\n",
      "import java.util.Map;\n",
      "import java.util.concurrent.ConcurrentHashMap;\n",
      "\n",
      "/**\n",
      " * @author zouzhiy\n",
      " * @since 2022/7/2\n",
      " */\n",
      "public class RowFootReadRegistry {\n",
      "\n",
      "    public final static Class<DefaultRowFootRead> DEFAULT_ROW_FOOT_READ_CLASS = DefaultRowFootRead.class;\n",
      "\n",
      "    private final Configuration configuration;\n",
      "\n",
      "    private final Map<Class<? extends RowFootRead>, RowFootRead> rowFootReadMap = new ConcurrentHashMap<>(16);\n",
      "\n",
      "    public RowFootReadRegistry(Configuration configuration) {\n",
      "        this.configuration = configuration;\n",
      "        register(new DefaultRowFootRead());\n",
      "    }\n",
      "\n",
      "    public Configuration getConfiguration() {\n",
      "        return configuration;\n",
      "    }\n",
      "\n",
      "    public void register(RowFootRead rowFootRead) {\n",
      "        rowFootReadMap.put(rowFootRead.getClass(), rowFootRead);\n",
      "    }\n",
      "\n",
      "    public RowFootRead getMappingRowRead(Class<? extends RowFootRead> rowFootReadClazz) {\n",
      "        RowFootRead rowFootRead = rowFootReadMap.get(rowFootReadClazz);\n",
      "        if (rowFootRead == null) {\n",
      "            throw new ExcelException(\"\u4e0d\u5b58\u5728\u7684\uff1aRowFootRead\");\n",
      "        }\n",
      "        return rowFootRead;\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package io.github.zouzhiy.excel.read.registry;\n",
      "\n",
      "import io.github.zouzhiy.excel.exceptions.ExcelException;\n",
      "import io.github.zouzhiy.excel.metadata.Configuration;\n",
      "import io.github.zouzhiy.excel.read.RowFootRead;\n",
      "import org.junit.jupiter.api.Assertions;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.mockito.Mockito;\n",
      "\n",
      "class RowFootReadRegistryTest {\n",
      "\n",
      "    @Test\n",
      "    void getConfiguration() {\n",
      "        Configuration configuration = Mockito.mock(Configuration.class);\n",
      "        RowFootReadRegistry rowFootReadRegistry = new RowFootReadRegistry(configuration);\n",
      "        Assertions.assertEquals(rowFootReadRegistry.getConfiguration(), configuration);\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void getMappingRowRead1() {\n",
      "        Configuration configuration = Mockito.mock(Configuration.class);\n",
      "        RowFootReadRegistry rowFootReadRegistry = new RowFootReadRegistry(configuration);\n",
      "\n",
      "        Assertions.assertNotNull(rowFootReadRegistry.getMappingRowRead(RowFootReadRegistry.DEFAULT_ROW_FOOT_READ_CLASS));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void register() {\n",
      "        Configuration configuration = Mockito.mock(Configuration.class);\n",
      "        RowFootReadRegistry rowFootReadRegistry = new RowFootReadRegistry(configuration);\n",
      "        RowFootRead rowFootRead = Mockito.mock(RowFootRead.class);\n",
      "\n",
      "        Assertions.assertThrows(ExcelException.class, () -> rowFootReadRegistry.getMappingRowRead(rowFootRead.getClass()));\n",
      "\n",
      "        rowFootReadRegistry.register(rowFootRead);\n",
      "\n",
      "        Assertions.assertEquals(rowFootReadRegistry.getMappingRowRead(rowFootRead.getClass()), rowFootRead);\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "RowFootReadRegistry::::getConfiguration()": [
        41,
        43
      ],
      "RowFootReadRegistry::::register(io.github.zouzhiy.excel.read.RowFootRead)": [
        45,
        47
      ],
      "RowFootReadRegistry::::getMappingRowRead(java.lang.Class<? extends io.github.zouzhiy.excel.read.RowFootRead>)": [
        49,
        55
      ]
    },
    "test_method_lines_dic": {
      "RowFootReadRegistryTest::::getConfiguration()": [
        12,
        17
      ],
      "RowFootReadRegistryTest::::getMappingRowRead1()": [
        20,
        26
      ],
      "RowFootReadRegistryTest::::register()": [
        28,
        39
      ]
    },
    "reverse_method_lines_dic": {
      "41": "RowFootReadRegistry::::getConfiguration()",
      "42": "RowFootReadRegistry::::getConfiguration()",
      "43": "RowFootReadRegistry::::getConfiguration()",
      "45": "RowFootReadRegistry::::register(io.github.zouzhiy.excel.read.RowFootRead)",
      "46": "RowFootReadRegistry::::register(io.github.zouzhiy.excel.read.RowFootRead)",
      "47": "RowFootReadRegistry::::register(io.github.zouzhiy.excel.read.RowFootRead)",
      "49": "RowFootReadRegistry::::getMappingRowRead(java.lang.Class<? extends io.github.zouzhiy.excel.read.RowFootRead>)",
      "50": "RowFootReadRegistry::::getMappingRowRead(java.lang.Class<? extends io.github.zouzhiy.excel.read.RowFootRead>)",
      "51": "RowFootReadRegistry::::getMappingRowRead(java.lang.Class<? extends io.github.zouzhiy.excel.read.RowFootRead>)",
      "52": "RowFootReadRegistry::::getMappingRowRead(java.lang.Class<? extends io.github.zouzhiy.excel.read.RowFootRead>)",
      "53": "RowFootReadRegistry::::getMappingRowRead(java.lang.Class<? extends io.github.zouzhiy.excel.read.RowFootRead>)",
      "54": "RowFootReadRegistry::::getMappingRowRead(java.lang.Class<? extends io.github.zouzhiy.excel.read.RowFootRead>)",
      "55": "RowFootReadRegistry::::getMappingRowRead(java.lang.Class<? extends io.github.zouzhiy.excel.read.RowFootRead>)"
    },
    "test_reverse_method_lines_dic": {
      "12": "RowFootReadRegistryTest::::getConfiguration()",
      "13": "RowFootReadRegistryTest::::getConfiguration()",
      "14": "RowFootReadRegistryTest::::getConfiguration()",
      "15": "RowFootReadRegistryTest::::getConfiguration()",
      "16": "RowFootReadRegistryTest::::getConfiguration()",
      "17": "RowFootReadRegistryTest::::getConfiguration()",
      "20": "RowFootReadRegistryTest::::getMappingRowRead1()",
      "21": "RowFootReadRegistryTest::::getMappingRowRead1()",
      "22": "RowFootReadRegistryTest::::getMappingRowRead1()",
      "23": "RowFootReadRegistryTest::::getMappingRowRead1()",
      "24": "RowFootReadRegistryTest::::getMappingRowRead1()",
      "25": "RowFootReadRegistryTest::::getMappingRowRead1()",
      "26": "RowFootReadRegistryTest::::getMappingRowRead1()",
      "28": "RowFootReadRegistryTest::::register()",
      "29": "RowFootReadRegistryTest::::register()",
      "30": "RowFootReadRegistryTest::::register()",
      "31": "RowFootReadRegistryTest::::register()",
      "32": "RowFootReadRegistryTest::::register()",
      "33": "RowFootReadRegistryTest::::register()",
      "34": "RowFootReadRegistryTest::::register()",
      "35": "RowFootReadRegistryTest::::register()",
      "36": "RowFootReadRegistryTest::::register()",
      "37": "RowFootReadRegistryTest::::register()",
      "38": "RowFootReadRegistryTest::::register()",
      "39": "RowFootReadRegistryTest::::register()"
    },
    "tests": [
      {
        "test_lines": [
          12,
          17
        ],
        "covered_lines": [
          30,
          34,
          36,
          37,
          38,
          39,
          42,
          46,
          47
        ]
      },
      {
        "test_lines": [
          20,
          26
        ],
        "covered_lines": [
          30,
          34,
          36,
          37,
          38,
          39,
          46,
          47,
          50,
          51,
          54
        ]
      },
      {
        "test_lines": [
          28,
          39
        ],
        "covered_lines": [
          30,
          34,
          36,
          37,
          38,
          39,
          46,
          47,
          50,
          51,
          52,
          54
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/zouzhiy-excel/src/main/java/io/github/zouzhiy/excel/read/registry/RowHeadReadRegistry.java": {
    "class_content": [
      "/*\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package io.github.zouzhiy.excel.read.registry;\n",
      "\n",
      "import io.github.zouzhiy.excel.exceptions.ExcelException;\n",
      "import io.github.zouzhiy.excel.metadata.Configuration;\n",
      "import io.github.zouzhiy.excel.read.RowHeadRead;\n",
      "import io.github.zouzhiy.excel.read.defaults.DefaultRowHeadRead;\n",
      "\n",
      "import java.util.Map;\n",
      "import java.util.concurrent.ConcurrentHashMap;\n",
      "\n",
      "/**\n",
      " * @author zouzhiy\n",
      " * @since 2022/7/2\n",
      " */\n",
      "public class RowHeadReadRegistry {\n",
      "\n",
      "    public final static Class<DefaultRowHeadRead> DEFAULT_ROW_HEAD_READ_CLASS = DefaultRowHeadRead.class;\n",
      "\n",
      "    private final Configuration configuration;\n",
      "\n",
      "    private final Map<Class<? extends RowHeadRead>, RowHeadRead> rowHeadReadMap = new ConcurrentHashMap<>(16);\n",
      "\n",
      "    public RowHeadReadRegistry(Configuration configuration) {\n",
      "        this.configuration = configuration;\n",
      "        register(new DefaultRowHeadRead());\n",
      "    }\n",
      "\n",
      "    public Configuration getConfiguration() {\n",
      "        return configuration;\n",
      "    }\n",
      "\n",
      "    public void register(RowHeadRead rowHeadRead) {\n",
      "        rowHeadReadMap.put(rowHeadRead.getClass(), rowHeadRead);\n",
      "    }\n",
      "\n",
      "    public RowHeadRead getMappingRowRead(Class<? extends RowHeadRead> rowHeadReadClazz) {\n",
      "        RowHeadRead rowHeadRead = rowHeadReadMap.get(rowHeadReadClazz);\n",
      "        if (rowHeadRead == null) {\n",
      "            throw new ExcelException(\"\u4e0d\u5b58\u5728\u7684\uff1aRowHeadRead\");\n",
      "        }\n",
      "        return rowHeadRead;\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package io.github.zouzhiy.excel.read.registry;\n",
      "\n",
      "import io.github.zouzhiy.excel.exceptions.ExcelException;\n",
      "import io.github.zouzhiy.excel.metadata.Configuration;\n",
      "import io.github.zouzhiy.excel.read.RowHeadRead;\n",
      "import org.junit.jupiter.api.Assertions;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.mockito.Mockito;\n",
      "\n",
      "class RowHeadReadRegistryTest {\n",
      "\n",
      "    @Test\n",
      "    void getConfiguration() {\n",
      "        Configuration configuration = Mockito.mock(Configuration.class);\n",
      "        RowHeadReadRegistry rowHeadReadRegistry = new RowHeadReadRegistry(configuration);\n",
      "        Assertions.assertEquals(rowHeadReadRegistry.getConfiguration(), configuration);\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void getMappingRowRead1() {\n",
      "        Configuration configuration = Mockito.mock(Configuration.class);\n",
      "        RowHeadReadRegistry rowHeadReadRegistry = new RowHeadReadRegistry(configuration);\n",
      "\n",
      "        Assertions.assertNotNull(rowHeadReadRegistry.getMappingRowRead(RowHeadReadRegistry.DEFAULT_ROW_HEAD_READ_CLASS));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void register() {\n",
      "        Configuration configuration = Mockito.mock(Configuration.class);\n",
      "        RowHeadReadRegistry rowHeadReadRegistry = new RowHeadReadRegistry(configuration);\n",
      "        RowHeadRead rowHeadRead = Mockito.mock(RowHeadRead.class);\n",
      "\n",
      "        Assertions.assertThrows(ExcelException.class, () -> rowHeadReadRegistry.getMappingRowRead(rowHeadRead.getClass()));\n",
      "\n",
      "        rowHeadReadRegistry.register(rowHeadRead);\n",
      "\n",
      "        Assertions.assertEquals(rowHeadReadRegistry.getMappingRowRead(rowHeadRead.getClass()), rowHeadRead);\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "RowHeadReadRegistry::::getConfiguration()": [
        41,
        43
      ],
      "RowHeadReadRegistry::::register(io.github.zouzhiy.excel.read.RowHeadRead)": [
        45,
        47
      ],
      "RowHeadReadRegistry::::getMappingRowRead(java.lang.Class<? extends io.github.zouzhiy.excel.read.RowHeadRead>)": [
        49,
        55
      ]
    },
    "test_method_lines_dic": {
      "RowHeadReadRegistryTest::::getConfiguration()": [
        12,
        17
      ],
      "RowHeadReadRegistryTest::::getMappingRowRead1()": [
        20,
        26
      ],
      "RowHeadReadRegistryTest::::register()": [
        28,
        39
      ]
    },
    "reverse_method_lines_dic": {
      "41": "RowHeadReadRegistry::::getConfiguration()",
      "42": "RowHeadReadRegistry::::getConfiguration()",
      "43": "RowHeadReadRegistry::::getConfiguration()",
      "45": "RowHeadReadRegistry::::register(io.github.zouzhiy.excel.read.RowHeadRead)",
      "46": "RowHeadReadRegistry::::register(io.github.zouzhiy.excel.read.RowHeadRead)",
      "47": "RowHeadReadRegistry::::register(io.github.zouzhiy.excel.read.RowHeadRead)",
      "49": "RowHeadReadRegistry::::getMappingRowRead(java.lang.Class<? extends io.github.zouzhiy.excel.read.RowHeadRead>)",
      "50": "RowHeadReadRegistry::::getMappingRowRead(java.lang.Class<? extends io.github.zouzhiy.excel.read.RowHeadRead>)",
      "51": "RowHeadReadRegistry::::getMappingRowRead(java.lang.Class<? extends io.github.zouzhiy.excel.read.RowHeadRead>)",
      "52": "RowHeadReadRegistry::::getMappingRowRead(java.lang.Class<? extends io.github.zouzhiy.excel.read.RowHeadRead>)",
      "53": "RowHeadReadRegistry::::getMappingRowRead(java.lang.Class<? extends io.github.zouzhiy.excel.read.RowHeadRead>)",
      "54": "RowHeadReadRegistry::::getMappingRowRead(java.lang.Class<? extends io.github.zouzhiy.excel.read.RowHeadRead>)",
      "55": "RowHeadReadRegistry::::getMappingRowRead(java.lang.Class<? extends io.github.zouzhiy.excel.read.RowHeadRead>)"
    },
    "test_reverse_method_lines_dic": {
      "12": "RowHeadReadRegistryTest::::getConfiguration()",
      "13": "RowHeadReadRegistryTest::::getConfiguration()",
      "14": "RowHeadReadRegistryTest::::getConfiguration()",
      "15": "RowHeadReadRegistryTest::::getConfiguration()",
      "16": "RowHeadReadRegistryTest::::getConfiguration()",
      "17": "RowHeadReadRegistryTest::::getConfiguration()",
      "20": "RowHeadReadRegistryTest::::getMappingRowRead1()",
      "21": "RowHeadReadRegistryTest::::getMappingRowRead1()",
      "22": "RowHeadReadRegistryTest::::getMappingRowRead1()",
      "23": "RowHeadReadRegistryTest::::getMappingRowRead1()",
      "24": "RowHeadReadRegistryTest::::getMappingRowRead1()",
      "25": "RowHeadReadRegistryTest::::getMappingRowRead1()",
      "26": "RowHeadReadRegistryTest::::getMappingRowRead1()",
      "28": "RowHeadReadRegistryTest::::register()",
      "29": "RowHeadReadRegistryTest::::register()",
      "30": "RowHeadReadRegistryTest::::register()",
      "31": "RowHeadReadRegistryTest::::register()",
      "32": "RowHeadReadRegistryTest::::register()",
      "33": "RowHeadReadRegistryTest::::register()",
      "34": "RowHeadReadRegistryTest::::register()",
      "35": "RowHeadReadRegistryTest::::register()",
      "36": "RowHeadReadRegistryTest::::register()",
      "37": "RowHeadReadRegistryTest::::register()",
      "38": "RowHeadReadRegistryTest::::register()",
      "39": "RowHeadReadRegistryTest::::register()"
    },
    "tests": [
      {
        "test_lines": [
          12,
          17
        ],
        "covered_lines": [
          30,
          34,
          36,
          37,
          38,
          39,
          42,
          46,
          47
        ]
      },
      {
        "test_lines": [
          20,
          26
        ],
        "covered_lines": [
          30,
          34,
          36,
          37,
          38,
          39,
          46,
          47,
          50,
          51,
          54
        ]
      },
      {
        "test_lines": [
          28,
          39
        ],
        "covered_lines": [
          30,
          34,
          36,
          37,
          38,
          39,
          46,
          47,
          50,
          51,
          52,
          54
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/zouzhiy-excel/src/main/java/io/github/zouzhiy/excel/read/registry/RowTitleReadRegistry.java": {
    "class_content": [
      "/*\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package io.github.zouzhiy.excel.read.registry;\n",
      "\n",
      "import io.github.zouzhiy.excel.exceptions.ExcelException;\n",
      "import io.github.zouzhiy.excel.metadata.Configuration;\n",
      "import io.github.zouzhiy.excel.read.RowTitleRead;\n",
      "import io.github.zouzhiy.excel.read.defaults.DefaultRowTitleRead;\n",
      "\n",
      "import java.util.Map;\n",
      "import java.util.concurrent.ConcurrentHashMap;\n",
      "\n",
      "/**\n",
      " * @author zouzhiy\n",
      " * @since 2022/7/2\n",
      " */\n",
      "public class RowTitleReadRegistry {\n",
      "\n",
      "    public final static Class<DefaultRowTitleRead> DEFAULT_ROW_TITLE_READ_CLASS = DefaultRowTitleRead.class;\n",
      "\n",
      "    private final Configuration configuration;\n",
      "\n",
      "    private final Map<Class<? extends RowTitleRead>, RowTitleRead> rowTitleReadMap = new ConcurrentHashMap<>(16);\n",
      "\n",
      "    public RowTitleReadRegistry(Configuration configuration) {\n",
      "        this.configuration = configuration;\n",
      "        register(new DefaultRowTitleRead());\n",
      "    }\n",
      "\n",
      "    public Configuration getConfiguration() {\n",
      "        return configuration;\n",
      "    }\n",
      "\n",
      "    public void register(RowTitleRead rowTitleRead) {\n",
      "        rowTitleReadMap.put(rowTitleRead.getClass(), rowTitleRead);\n",
      "    }\n",
      "\n",
      "    public RowTitleRead getMappingRowRead(Class<? extends RowTitleRead> rowTitleReadClazz) {\n",
      "        RowTitleRead rowTitleRead = rowTitleReadMap.get(rowTitleReadClazz);\n",
      "        if (rowTitleRead == null) {\n",
      "            throw new ExcelException(\"\u4e0d\u5b58\u5728\u7684\uff1aRowTitleRead\");\n",
      "        }\n",
      "        return rowTitleRead;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package io.github.zouzhiy.excel.read.registry;\n",
      "\n",
      "import io.github.zouzhiy.excel.exceptions.ExcelException;\n",
      "import io.github.zouzhiy.excel.metadata.Configuration;\n",
      "import io.github.zouzhiy.excel.read.RowTitleRead;\n",
      "import org.junit.jupiter.api.Assertions;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.mockito.Mockito;\n",
      "\n",
      "class RowTitleReadRegistryTest {\n",
      "\n",
      "    @Test\n",
      "    void getConfiguration() {\n",
      "        Configuration configuration = Mockito.mock(Configuration.class);\n",
      "        RowTitleReadRegistry rowTitleReadRegistry = new RowTitleReadRegistry(configuration);\n",
      "        Assertions.assertEquals(rowTitleReadRegistry.getConfiguration(), configuration);\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void getMappingRowRead1() {\n",
      "        Configuration configuration = Mockito.mock(Configuration.class);\n",
      "        RowTitleReadRegistry rowTitleReadRegistry = new RowTitleReadRegistry(configuration);\n",
      "\n",
      "        Assertions.assertNotNull(rowTitleReadRegistry.getMappingRowRead(RowTitleReadRegistry.DEFAULT_ROW_TITLE_READ_CLASS));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void register() {\n",
      "        Configuration configuration = Mockito.mock(Configuration.class);\n",
      "        RowTitleReadRegistry rowTitleReadRegistry = new RowTitleReadRegistry(configuration);\n",
      "        RowTitleRead rowTitleRead = Mockito.mock(RowTitleRead.class);\n",
      "\n",
      "        Assertions.assertThrows(ExcelException.class, () -> rowTitleReadRegistry.getMappingRowRead(rowTitleRead.getClass()));\n",
      "\n",
      "        rowTitleReadRegistry.register(rowTitleRead);\n",
      "\n",
      "        Assertions.assertEquals(rowTitleReadRegistry.getMappingRowRead(rowTitleRead.getClass()), rowTitleRead);\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "RowTitleReadRegistry::::getConfiguration()": [
        41,
        43
      ],
      "RowTitleReadRegistry::::register(io.github.zouzhiy.excel.read.RowTitleRead)": [
        45,
        47
      ],
      "RowTitleReadRegistry::::getMappingRowRead(java.lang.Class<? extends io.github.zouzhiy.excel.read.RowTitleRead>)": [
        49,
        55
      ]
    },
    "test_method_lines_dic": {
      "RowTitleReadRegistryTest::::getConfiguration()": [
        12,
        17
      ],
      "RowTitleReadRegistryTest::::getMappingRowRead1()": [
        20,
        26
      ],
      "RowTitleReadRegistryTest::::register()": [
        28,
        39
      ]
    },
    "reverse_method_lines_dic": {
      "41": "RowTitleReadRegistry::::getConfiguration()",
      "42": "RowTitleReadRegistry::::getConfiguration()",
      "43": "RowTitleReadRegistry::::getConfiguration()",
      "45": "RowTitleReadRegistry::::register(io.github.zouzhiy.excel.read.RowTitleRead)",
      "46": "RowTitleReadRegistry::::register(io.github.zouzhiy.excel.read.RowTitleRead)",
      "47": "RowTitleReadRegistry::::register(io.github.zouzhiy.excel.read.RowTitleRead)",
      "49": "RowTitleReadRegistry::::getMappingRowRead(java.lang.Class<? extends io.github.zouzhiy.excel.read.RowTitleRead>)",
      "50": "RowTitleReadRegistry::::getMappingRowRead(java.lang.Class<? extends io.github.zouzhiy.excel.read.RowTitleRead>)",
      "51": "RowTitleReadRegistry::::getMappingRowRead(java.lang.Class<? extends io.github.zouzhiy.excel.read.RowTitleRead>)",
      "52": "RowTitleReadRegistry::::getMappingRowRead(java.lang.Class<? extends io.github.zouzhiy.excel.read.RowTitleRead>)",
      "53": "RowTitleReadRegistry::::getMappingRowRead(java.lang.Class<? extends io.github.zouzhiy.excel.read.RowTitleRead>)",
      "54": "RowTitleReadRegistry::::getMappingRowRead(java.lang.Class<? extends io.github.zouzhiy.excel.read.RowTitleRead>)",
      "55": "RowTitleReadRegistry::::getMappingRowRead(java.lang.Class<? extends io.github.zouzhiy.excel.read.RowTitleRead>)"
    },
    "test_reverse_method_lines_dic": {
      "12": "RowTitleReadRegistryTest::::getConfiguration()",
      "13": "RowTitleReadRegistryTest::::getConfiguration()",
      "14": "RowTitleReadRegistryTest::::getConfiguration()",
      "15": "RowTitleReadRegistryTest::::getConfiguration()",
      "16": "RowTitleReadRegistryTest::::getConfiguration()",
      "17": "RowTitleReadRegistryTest::::getConfiguration()",
      "20": "RowTitleReadRegistryTest::::getMappingRowRead1()",
      "21": "RowTitleReadRegistryTest::::getMappingRowRead1()",
      "22": "RowTitleReadRegistryTest::::getMappingRowRead1()",
      "23": "RowTitleReadRegistryTest::::getMappingRowRead1()",
      "24": "RowTitleReadRegistryTest::::getMappingRowRead1()",
      "25": "RowTitleReadRegistryTest::::getMappingRowRead1()",
      "26": "RowTitleReadRegistryTest::::getMappingRowRead1()",
      "28": "RowTitleReadRegistryTest::::register()",
      "29": "RowTitleReadRegistryTest::::register()",
      "30": "RowTitleReadRegistryTest::::register()",
      "31": "RowTitleReadRegistryTest::::register()",
      "32": "RowTitleReadRegistryTest::::register()",
      "33": "RowTitleReadRegistryTest::::register()",
      "34": "RowTitleReadRegistryTest::::register()",
      "35": "RowTitleReadRegistryTest::::register()",
      "36": "RowTitleReadRegistryTest::::register()",
      "37": "RowTitleReadRegistryTest::::register()",
      "38": "RowTitleReadRegistryTest::::register()",
      "39": "RowTitleReadRegistryTest::::register()"
    },
    "tests": [
      {
        "test_lines": [
          12,
          17
        ],
        "covered_lines": [
          30,
          34,
          36,
          37,
          38,
          39,
          42,
          46,
          47
        ]
      },
      {
        "test_lines": [
          20,
          26
        ],
        "covered_lines": [
          30,
          34,
          36,
          37,
          38,
          39,
          46,
          47,
          50,
          51,
          54
        ]
      },
      {
        "test_lines": [
          28,
          39
        ],
        "covered_lines": [
          30,
          34,
          36,
          37,
          38,
          39,
          46,
          47,
          50,
          51,
          52,
          54
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/zouzhiy-excel/src/main/java/io/github/zouzhiy/excel/handler/NoneCellHandler.java": {
    "class_content": [
      "/*\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package io.github.zouzhiy.excel.handler;\n",
      "\n",
      "import io.github.zouzhiy.excel.context.RowContext;\n",
      "import io.github.zouzhiy.excel.context.SheetContext;\n",
      "import io.github.zouzhiy.excel.enums.ExcelType;\n",
      "import io.github.zouzhiy.excel.exceptions.ExcelException;\n",
      "import io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig;\n",
      "import io.github.zouzhiy.excel.metadata.result.CellResultSet;\n",
      "\n",
      "/**\n",
      " * @author zouzhiy\n",
      " * @since 2022/7/2\n",
      " */\n",
      "public class NoneCellHandler implements CellHandler<Object> {\n",
      "\n",
      "    @Override\n",
      "    public Class<Object> getJavaType() {\n",
      "        throw new ExcelException(\"\u4e0d\u652f\u6301\u7684\u65b9\u6cd5\");\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public ExcelType getExcelType() {\n",
      "        throw new ExcelException(\"\u4e0d\u652f\u6301\u7684\u65b9\u6cd5\");\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Object read(SheetContext sheetContext, ExcelFieldConfig excelFieldConfig, CellResultSet cellResultSet) {\n",
      "        throw new ExcelException(\"\u4e0d\u652f\u6301\u7684\u65b9\u6cd5\");\n",
      "    }\n",
      "\n",
      "\n",
      "    @Override\n",
      "    public void write(RowContext rowContext, Integer columnIndex, ExcelFieldConfig excelFieldConfig, Object value) {\n",
      "        throw new ExcelException(\"\u4e0d\u652f\u6301\u7684\u65b9\u6cd5\");\n",
      "\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package io.github.zouzhiy.excel.handler;\n",
      "\n",
      "import io.github.zouzhiy.excel.support.metadata.DemoDefault;\n",
      "import org.junit.jupiter.api.Assertions;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "class NoneCellHandlerTest extends CellHandlerTest {\n",
      "\n",
      "    private final NoneCellHandler cellHandler = new NoneCellHandler();\n",
      "\n",
      "    @Test\n",
      "    @Override\n",
      "    void getJavaType() {\n",
      "        Assertions.assertThrows(Exception.class, cellHandler::getJavaType);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    @Override\n",
      "    void getExcelType() {\n",
      "        Assertions.assertThrows(Exception.class, cellHandler::getExcelType);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    @Override\n",
      "    void read() {\n",
      "        Assertions.assertThrows(Exception.class, () -> cellHandler.read(sheetContext, excelFieldConfig, cellResultSet));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    @Override\n",
      "    void write() {\n",
      "        Assertions.assertThrows(Exception.class, () -> cellHandler.write(rowContext, 1, excelFieldConfig, new DemoDefault()));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    @Override\n",
      "    void getWriteRowspan() {\n",
      "        Assertions.assertEquals(cellHandler.getWriteRowspan(new DemoDefault()), 1);\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    @Override\n",
      "    void getDefaultJavaFormat() {\n",
      "        Assertions.assertEquals(cellHandler.getDefaultJavaFormat(), \"\");\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    @Override\n",
      "    void getDefaultExcelFormat() {\n",
      "        Assertions.assertEquals(cellHandler.getDefaultExcelFormat(), \"\");\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "NoneCellHandler::::getJavaType()": [
        29,
        32
      ],
      "NoneCellHandler::::getExcelType()": [
        34,
        37
      ],
      "NoneCellHandler::::read(io.github.zouzhiy.excel.context.SheetContext,io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,io.github.zouzhiy.excel.metadata.result.CellResultSet)": [
        39,
        42
      ],
      "NoneCellHandler::::write(io.github.zouzhiy.excel.context.RowContext,java.lang.Integer,io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,java.lang.Object)": [
        45,
        49
      ]
    },
    "test_method_lines_dic": {
      "NoneCellHandlerTest::::getJavaType()": [
        11,
        15
      ],
      "NoneCellHandlerTest::::getExcelType()": [
        17,
        21
      ],
      "NoneCellHandlerTest::::read()": [
        23,
        27
      ],
      "NoneCellHandlerTest::::write()": [
        29,
        33
      ],
      "NoneCellHandlerTest::::getWriteRowspan()": [
        35,
        40
      ],
      "NoneCellHandlerTest::::getDefaultJavaFormat()": [
        42,
        47
      ],
      "NoneCellHandlerTest::::getDefaultExcelFormat()": [
        49,
        53
      ]
    },
    "reverse_method_lines_dic": {
      "29": "NoneCellHandler::::getJavaType()",
      "30": "NoneCellHandler::::getJavaType()",
      "31": "NoneCellHandler::::getJavaType()",
      "32": "NoneCellHandler::::getJavaType()",
      "34": "NoneCellHandler::::getExcelType()",
      "35": "NoneCellHandler::::getExcelType()",
      "36": "NoneCellHandler::::getExcelType()",
      "37": "NoneCellHandler::::getExcelType()",
      "39": "NoneCellHandler::::read(io.github.zouzhiy.excel.context.SheetContext,io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,io.github.zouzhiy.excel.metadata.result.CellResultSet)",
      "40": "NoneCellHandler::::read(io.github.zouzhiy.excel.context.SheetContext,io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,io.github.zouzhiy.excel.metadata.result.CellResultSet)",
      "41": "NoneCellHandler::::read(io.github.zouzhiy.excel.context.SheetContext,io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,io.github.zouzhiy.excel.metadata.result.CellResultSet)",
      "42": "NoneCellHandler::::read(io.github.zouzhiy.excel.context.SheetContext,io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,io.github.zouzhiy.excel.metadata.result.CellResultSet)",
      "45": "NoneCellHandler::::write(io.github.zouzhiy.excel.context.RowContext,java.lang.Integer,io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,java.lang.Object)",
      "46": "NoneCellHandler::::write(io.github.zouzhiy.excel.context.RowContext,java.lang.Integer,io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,java.lang.Object)",
      "47": "NoneCellHandler::::write(io.github.zouzhiy.excel.context.RowContext,java.lang.Integer,io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,java.lang.Object)",
      "48": "NoneCellHandler::::write(io.github.zouzhiy.excel.context.RowContext,java.lang.Integer,io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,java.lang.Object)",
      "49": "NoneCellHandler::::write(io.github.zouzhiy.excel.context.RowContext,java.lang.Integer,io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig,java.lang.Object)"
    },
    "test_reverse_method_lines_dic": {
      "11": "NoneCellHandlerTest::::getJavaType()",
      "12": "NoneCellHandlerTest::::getJavaType()",
      "13": "NoneCellHandlerTest::::getJavaType()",
      "14": "NoneCellHandlerTest::::getJavaType()",
      "15": "NoneCellHandlerTest::::getJavaType()",
      "17": "NoneCellHandlerTest::::getExcelType()",
      "18": "NoneCellHandlerTest::::getExcelType()",
      "19": "NoneCellHandlerTest::::getExcelType()",
      "20": "NoneCellHandlerTest::::getExcelType()",
      "21": "NoneCellHandlerTest::::getExcelType()",
      "23": "NoneCellHandlerTest::::read()",
      "24": "NoneCellHandlerTest::::read()",
      "25": "NoneCellHandlerTest::::read()",
      "26": "NoneCellHandlerTest::::read()",
      "27": "NoneCellHandlerTest::::read()",
      "29": "NoneCellHandlerTest::::write()",
      "30": "NoneCellHandlerTest::::write()",
      "31": "NoneCellHandlerTest::::write()",
      "32": "NoneCellHandlerTest::::write()",
      "33": "NoneCellHandlerTest::::write()",
      "35": "NoneCellHandlerTest::::getWriteRowspan()",
      "36": "NoneCellHandlerTest::::getWriteRowspan()",
      "37": "NoneCellHandlerTest::::getWriteRowspan()",
      "38": "NoneCellHandlerTest::::getWriteRowspan()",
      "39": "NoneCellHandlerTest::::getWriteRowspan()",
      "40": "NoneCellHandlerTest::::getWriteRowspan()",
      "42": "NoneCellHandlerTest::::getDefaultJavaFormat()",
      "43": "NoneCellHandlerTest::::getDefaultJavaFormat()",
      "44": "NoneCellHandlerTest::::getDefaultJavaFormat()",
      "45": "NoneCellHandlerTest::::getDefaultJavaFormat()",
      "46": "NoneCellHandlerTest::::getDefaultJavaFormat()",
      "47": "NoneCellHandlerTest::::getDefaultJavaFormat()",
      "49": "NoneCellHandlerTest::::getDefaultExcelFormat()",
      "50": "NoneCellHandlerTest::::getDefaultExcelFormat()",
      "51": "NoneCellHandlerTest::::getDefaultExcelFormat()",
      "52": "NoneCellHandlerTest::::getDefaultExcelFormat()",
      "53": "NoneCellHandlerTest::::getDefaultExcelFormat()"
    },
    "tests": [
      {
        "test_lines": [
          11,
          15
        ],
        "covered_lines": [
          27,
          31
        ]
      },
      {
        "test_lines": [
          17,
          21
        ],
        "covered_lines": [
          27,
          36
        ]
      },
      {
        "test_lines": [
          23,
          27
        ],
        "covered_lines": [
          27,
          41
        ]
      },
      {
        "test_lines": [
          29,
          33
        ],
        "covered_lines": [
          27,
          47
        ]
      },
      {
        "test_lines": [
          35,
          40
        ],
        "covered_lines": [
          27
        ]
      },
      {
        "test_lines": [
          42,
          47
        ],
        "covered_lines": [
          27
        ]
      },
      {
        "test_lines": [
          49,
          53
        ],
        "covered_lines": [
          27
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/zouzhiy-excel/src/main/java/io/github/zouzhiy/excel/cellstyle/registry/RowStyleReadRegistry.java": {
    "class_content": [
      "/*\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package io.github.zouzhiy.excel.cellstyle.registry;\n",
      "\n",
      "import io.github.zouzhiy.excel.cellstyle.RowStyleRead;\n",
      "import io.github.zouzhiy.excel.cellstyle.defaults.DefaultRowStyleRead;\n",
      "import io.github.zouzhiy.excel.exceptions.ExcelException;\n",
      "import io.github.zouzhiy.excel.metadata.Configuration;\n",
      "\n",
      "import java.util.Map;\n",
      "import java.util.concurrent.ConcurrentHashMap;\n",
      "\n",
      "/**\n",
      " * @author zouzhiy\n",
      " * @since 2022/7/2\n",
      " */\n",
      "public class RowStyleReadRegistry {\n",
      "\n",
      "    public final static Class<DefaultRowStyleRead> DEFAULT_ROW_STYLE_READ_CLASS = DefaultRowStyleRead.class;\n",
      "\n",
      "    private final Configuration configuration;\n",
      "\n",
      "    private final Map<Class<? extends RowStyleRead>, RowStyleRead> rowStyleReadMap = new ConcurrentHashMap<>(16);\n",
      "\n",
      "    public RowStyleReadRegistry(Configuration configuration) {\n",
      "        this.configuration = configuration;\n",
      "        register(new DefaultRowStyleRead());\n",
      "    }\n",
      "\n",
      "    public Configuration getConfiguration() {\n",
      "        return configuration;\n",
      "    }\n",
      "\n",
      "    public void register(RowStyleRead rowStyleRead) {\n",
      "        rowStyleReadMap.put(rowStyleRead.getClass(), rowStyleRead);\n",
      "    }\n",
      "\n",
      "    public RowStyleRead getMappingRowStyleRead(Class<? extends RowStyleRead> rowStyleReadClazz) {\n",
      "        RowStyleRead rowStyleRead = rowStyleReadMap.get(rowStyleReadClazz);\n",
      "        if (rowStyleRead == null) {\n",
      "            throw new ExcelException(\"\u4e0d\u5b58\u5728\u7684\uff1aCellStyleRead\");\n",
      "        }\n",
      "        return rowStyleRead;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package io.github.zouzhiy.excel.cellstyle.registry;\n",
      "\n",
      "import io.github.zouzhiy.excel.cellstyle.RowStyleRead;\n",
      "import io.github.zouzhiy.excel.context.SheetContext;\n",
      "import io.github.zouzhiy.excel.exceptions.ExcelException;\n",
      "import io.github.zouzhiy.excel.metadata.Configuration;\n",
      "import io.github.zouzhiy.excel.metadata.result.CellStyleResultSet;\n",
      "import org.apache.poi.ss.usermodel.CellStyle;\n",
      "import org.junit.jupiter.api.Assertions;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "class RowStyleReadRegistryTest {\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void register() {\n",
      "        RowStyleRead rowStyleRead = new RowStyleRead() {\n",
      "            @Override\n",
      "            public CellStyle readTitle(SheetContext sheetContext) {\n",
      "                return null;\n",
      "            }\n",
      "\n",
      "            @Override\n",
      "            public CellStyleResultSet readHead(SheetContext sheetContext) {\n",
      "                return null;\n",
      "            }\n",
      "\n",
      "            @Override\n",
      "            public CellStyleResultSet readData(SheetContext sheetContext) {\n",
      "                return null;\n",
      "            }\n",
      "        };\n",
      "\n",
      "        RowStyleReadRegistry rowStyleReadRegistry = new RowStyleReadRegistry(new Configuration());\n",
      "        rowStyleReadRegistry.register(rowStyleRead);\n",
      "        RowStyleRead rowStyleRead1 = rowStyleReadRegistry.getMappingRowStyleRead(rowStyleRead.getClass());\n",
      "\n",
      "        assert rowStyleRead1 == rowStyleRead;\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void getMappingRowStyleRead() {\n",
      "        RowStyleRead rowStyleRead = new RowStyleRead() {\n",
      "            @Override\n",
      "            public CellStyle readTitle(SheetContext sheetContext) {\n",
      "                return null;\n",
      "            }\n",
      "\n",
      "            @Override\n",
      "            public CellStyleResultSet readHead(SheetContext sheetContext) {\n",
      "                return null;\n",
      "            }\n",
      "\n",
      "            @Override\n",
      "            public CellStyleResultSet readData(SheetContext sheetContext) {\n",
      "                return null;\n",
      "            }\n",
      "        };\n",
      "        RowStyleReadRegistry rowStyleReadRegistry = new RowStyleReadRegistry(new Configuration());\n",
      "\n",
      "        try {\n",
      "            rowStyleReadRegistry.getMappingRowStyleRead(rowStyleRead.getClass());\n",
      "            assert false;\n",
      "        } catch (ExcelException e) {\n",
      "            Assertions.assertEquals(e.getMessage(), \"\u4e0d\u5b58\u5728\u7684\uff1aCellStyleRead\");\n",
      "        }\n",
      "\n",
      "    }\n",
      "\n",
      "\n",
      "}\n"
    ],
    "method_lines_dic": {
      "RowStyleReadRegistry::::getConfiguration()": [
        41,
        43
      ],
      "RowStyleReadRegistry::::register(io.github.zouzhiy.excel.cellstyle.RowStyleRead)": [
        45,
        47
      ],
      "RowStyleReadRegistry::::getMappingRowStyleRead(java.lang.Class<? extends io.github.zouzhiy.excel.cellstyle.RowStyleRead>)": [
        49,
        55
      ]
    },
    "test_method_lines_dic": {
      "RowStyleReadRegistryTest::::register()": [
        15,
        39
      ],
      "RowStyleReadRegistryTest::::getMappingRowStyleRead()": [
        42,
        69
      ]
    },
    "reverse_method_lines_dic": {
      "41": "RowStyleReadRegistry::::getConfiguration()",
      "42": "RowStyleReadRegistry::::getConfiguration()",
      "43": "RowStyleReadRegistry::::getConfiguration()",
      "45": "RowStyleReadRegistry::::register(io.github.zouzhiy.excel.cellstyle.RowStyleRead)",
      "46": "RowStyleReadRegistry::::register(io.github.zouzhiy.excel.cellstyle.RowStyleRead)",
      "47": "RowStyleReadRegistry::::register(io.github.zouzhiy.excel.cellstyle.RowStyleRead)",
      "49": "RowStyleReadRegistry::::getMappingRowStyleRead(java.lang.Class<? extends io.github.zouzhiy.excel.cellstyle.RowStyleRead>)",
      "50": "RowStyleReadRegistry::::getMappingRowStyleRead(java.lang.Class<? extends io.github.zouzhiy.excel.cellstyle.RowStyleRead>)",
      "51": "RowStyleReadRegistry::::getMappingRowStyleRead(java.lang.Class<? extends io.github.zouzhiy.excel.cellstyle.RowStyleRead>)",
      "52": "RowStyleReadRegistry::::getMappingRowStyleRead(java.lang.Class<? extends io.github.zouzhiy.excel.cellstyle.RowStyleRead>)",
      "53": "RowStyleReadRegistry::::getMappingRowStyleRead(java.lang.Class<? extends io.github.zouzhiy.excel.cellstyle.RowStyleRead>)",
      "54": "RowStyleReadRegistry::::getMappingRowStyleRead(java.lang.Class<? extends io.github.zouzhiy.excel.cellstyle.RowStyleRead>)",
      "55": "RowStyleReadRegistry::::getMappingRowStyleRead(java.lang.Class<? extends io.github.zouzhiy.excel.cellstyle.RowStyleRead>)"
    },
    "test_reverse_method_lines_dic": {
      "15": "RowStyleReadRegistryTest::::register()",
      "16": "RowStyleReadRegistryTest::::register()",
      "17": "RowStyleReadRegistryTest::::register()",
      "18": "RowStyleReadRegistryTest::::register()",
      "19": "RowStyleReadRegistryTest::::register()",
      "20": "RowStyleReadRegistryTest::::register()",
      "21": "RowStyleReadRegistryTest::::register()",
      "22": "RowStyleReadRegistryTest::::register()",
      "23": "RowStyleReadRegistryTest::::register()",
      "24": "RowStyleReadRegistryTest::::register()",
      "25": "RowStyleReadRegistryTest::::register()",
      "26": "RowStyleReadRegistryTest::::register()",
      "27": "RowStyleReadRegistryTest::::register()",
      "28": "RowStyleReadRegistryTest::::register()",
      "29": "RowStyleReadRegistryTest::::register()",
      "30": "RowStyleReadRegistryTest::::register()",
      "31": "RowStyleReadRegistryTest::::register()",
      "32": "RowStyleReadRegistryTest::::register()",
      "33": "RowStyleReadRegistryTest::::register()",
      "34": "RowStyleReadRegistryTest::::register()",
      "35": "RowStyleReadRegistryTest::::register()",
      "36": "RowStyleReadRegistryTest::::register()",
      "37": "RowStyleReadRegistryTest::::register()",
      "38": "RowStyleReadRegistryTest::::register()",
      "39": "RowStyleReadRegistryTest::::register()",
      "42": "RowStyleReadRegistryTest::::getMappingRowStyleRead()",
      "43": "RowStyleReadRegistryTest::::getMappingRowStyleRead()",
      "44": "RowStyleReadRegistryTest::::getMappingRowStyleRead()",
      "45": "RowStyleReadRegistryTest::::getMappingRowStyleRead()",
      "46": "RowStyleReadRegistryTest::::getMappingRowStyleRead()",
      "47": "RowStyleReadRegistryTest::::getMappingRowStyleRead()",
      "48": "RowStyleReadRegistryTest::::getMappingRowStyleRead()",
      "49": "RowStyleReadRegistryTest::::getMappingRowStyleRead()",
      "50": "RowStyleReadRegistryTest::::getMappingRowStyleRead()",
      "51": "RowStyleReadRegistryTest::::getMappingRowStyleRead()",
      "52": "RowStyleReadRegistryTest::::getMappingRowStyleRead()",
      "53": "RowStyleReadRegistryTest::::getMappingRowStyleRead()",
      "54": "RowStyleReadRegistryTest::::getMappingRowStyleRead()",
      "55": "RowStyleReadRegistryTest::::getMappingRowStyleRead()",
      "56": "RowStyleReadRegistryTest::::getMappingRowStyleRead()",
      "57": "RowStyleReadRegistryTest::::getMappingRowStyleRead()",
      "58": "RowStyleReadRegistryTest::::getMappingRowStyleRead()",
      "59": "RowStyleReadRegistryTest::::getMappingRowStyleRead()",
      "60": "RowStyleReadRegistryTest::::getMappingRowStyleRead()",
      "61": "RowStyleReadRegistryTest::::getMappingRowStyleRead()",
      "62": "RowStyleReadRegistryTest::::getMappingRowStyleRead()",
      "63": "RowStyleReadRegistryTest::::getMappingRowStyleRead()",
      "64": "RowStyleReadRegistryTest::::getMappingRowStyleRead()",
      "65": "RowStyleReadRegistryTest::::getMappingRowStyleRead()",
      "66": "RowStyleReadRegistryTest::::getMappingRowStyleRead()",
      "67": "RowStyleReadRegistryTest::::getMappingRowStyleRead()",
      "68": "RowStyleReadRegistryTest::::getMappingRowStyleRead()",
      "69": "RowStyleReadRegistryTest::::getMappingRowStyleRead()"
    },
    "tests": [
      {
        "test_lines": [
          15,
          39
        ],
        "covered_lines": [
          30,
          34,
          36,
          37,
          38,
          39,
          46,
          47,
          50,
          51,
          54
        ]
      },
      {
        "test_lines": [
          42,
          69
        ],
        "covered_lines": [
          30,
          34,
          36,
          37,
          38,
          39,
          46,
          47,
          50,
          51,
          52
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/zouzhiy-excel/src/main/java/io/github/zouzhiy/excel/cellstyle/defaults/DefaultSheetCellStyleRead.java": {
    "class_content": [
      "/*\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package io.github.zouzhiy.excel.cellstyle.defaults;\n",
      "\n",
      "import io.github.zouzhiy.excel.cellstyle.RowStyleRead;\n",
      "import io.github.zouzhiy.excel.cellstyle.SheetCellStyleRead;\n",
      "import io.github.zouzhiy.excel.cellstyle.registry.RowStyleReadRegistry;\n",
      "import io.github.zouzhiy.excel.context.SheetContext;\n",
      "import io.github.zouzhiy.excel.metadata.result.CellStyleResultSet;\n",
      "import org.apache.poi.ss.usermodel.CellStyle;\n",
      "\n",
      "/**\n",
      " * @author zouzhiy\n",
      " * @since 2022/7/2\n",
      " */\n",
      "public class DefaultSheetCellStyleRead implements SheetCellStyleRead {\n",
      "\n",
      "    private final SheetContext sheetContext;\n",
      "\n",
      "    public DefaultSheetCellStyleRead(SheetContext sheetContext) {\n",
      "        this.sheetContext = sheetContext;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public SheetContext getSheetContext() {\n",
      "        return sheetContext;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void read() {\n",
      "        SheetContext sheetContext = this.getSheetContext();\n",
      "\n",
      "        Integer titleRowIndex = this.sheetContext.getSheetParameter().getTitleRowStartIndex();\n",
      "        if (titleRowIndex == -1) {\n",
      "            return;\n",
      "        }\n",
      "        RowStyleRead rowStyleRead = this.getRowStyleRead();\n",
      "\n",
      "        CellStyle titleCellStyle = rowStyleRead.readTitle(sheetContext);\n",
      "        sheetContext.putTitleCellStyle(sheetContext.getExcelClassConfig(), titleCellStyle);\n",
      "\n",
      "        CellStyleResultSet headCellStyleResultSet = rowStyleRead.readHead(sheetContext);\n",
      "        sheetContext.putHeadCellStyle(headCellStyleResultSet);\n",
      "\n",
      "        CellStyleResultSet dataCellStyleResultSet = rowStyleRead.readData(sheetContext);\n",
      "        sheetContext.putDataCellStyle(dataCellStyleResultSet);\n",
      "\n",
      "    }\n",
      "\n",
      "    private RowStyleRead getRowStyleRead() {\n",
      "        Class<? extends RowStyleRead> rowStyleReadClazz = this.sheetContext.getExcelClassConfig().getRowStyleRead();\n",
      "        if (rowStyleReadClazz == null) {\n",
      "            rowStyleReadClazz = RowStyleReadRegistry.DEFAULT_ROW_STYLE_READ_CLASS;\n",
      "        }\n",
      "        return this.getSheetContext().getConfiguration().getRowStyleReadRegistry().getMappingRowStyleRead(rowStyleReadClazz);\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package io.github.zouzhiy.excel.cellstyle.defaults;\n",
      "\n",
      "import io.github.zouzhiy.excel.builder.ZouzhiyExcelFactory;\n",
      "import io.github.zouzhiy.excel.builder.ZouzhiyExcelFactoryBuilder;\n",
      "import io.github.zouzhiy.excel.context.SheetContext;\n",
      "import io.github.zouzhiy.excel.context.defualts.DefaultSheetContext;\n",
      "import io.github.zouzhiy.excel.metadata.parameter.SheetParameter;\n",
      "import io.github.zouzhiy.excel.metadata.parameter.WorkbookParameter;\n",
      "import io.github.zouzhiy.excel.read.WorkbookRead;\n",
      "import io.github.zouzhiy.excel.support.metadata.DemoDefault;\n",
      "import io.github.zouzhiy.excel.support.utils.TestFileUtils;\n",
      "import org.junit.jupiter.api.Assertions;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import java.io.InputStream;\n",
      "\n",
      "class DefaultSheetCellStyleReadTest {\n",
      "\n",
      "    private final ZouzhiyExcelFactory zouzhiyExcelFactory = ZouzhiyExcelFactoryBuilder.builder().build();\n",
      "\n",
      "    @Test\n",
      "    void getSheetContext1() {\n",
      "        SheetContext sheetContext = this.getSheetContext();\n",
      "\n",
      "        DefaultSheetCellStyleRead defaultSheetCellStyleRead = new DefaultSheetCellStyleRead(sheetContext);\n",
      "        Assertions.assertEquals(sheetContext, defaultSheetCellStyleRead.getSheetContext());\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void read1() {\n",
      "        SheetContext sheetContext = this.getSheetContext();\n",
      "\n",
      "        DefaultSheetCellStyleRead defaultSheetCellStyleRead = new DefaultSheetCellStyleRead(sheetContext);\n",
      "\n",
      "        defaultSheetCellStyleRead.read();\n",
      "\n",
      "        assert true;\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void read2() {\n",
      "        SheetContext sheetContext = this.getSheetContext();\n",
      "\n",
      "        DefaultSheetCellStyleRead defaultSheetCellStyleRead = new DefaultSheetCellStyleRead(sheetContext);\n",
      "\n",
      "        defaultSheetCellStyleRead.read();\n",
      "\n",
      "        assert true;\n",
      "\n",
      "    }\n",
      "\n",
      "    private SheetContext getSheetContext() {\n",
      "\n",
      "        InputStream inputStream = TestFileUtils.getInputStream(\"statics/import/data-title-style-read.xlsx\");\n",
      "        WorkbookParameter workbookParameter = WorkbookParameter.builder()\n",
      "                .input(inputStream)\n",
      "                .sheetParameter(SheetParameter.builder().sheet(0).titleRowStartIndex(0).headRowStartIndex(1).dataRowStartIndex(3).build())\n",
      "                .build();\n",
      "        WorkbookRead workbookRead = zouzhiyExcelFactory.getWorkbookRead(workbookParameter, DemoDefault.class);\n",
      "\n",
      "        return new DefaultSheetContext(workbookRead.getWorkbookContext(), workbookRead.getExcelClassConfig(), workbookParameter.getSheetParameter());\n",
      "\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "DefaultSheetCellStyleRead::::getSheetContext()": [
        35,
        38
      ],
      "DefaultSheetCellStyleRead::::read()": [
        40,
        59
      ],
      "DefaultSheetCellStyleRead::::getRowStyleRead()": [
        61,
        67
      ]
    },
    "test_method_lines_dic": {
      "DefaultSheetCellStyleReadTest::::getSheetContext1()": [
        21,
        28
      ],
      "DefaultSheetCellStyleReadTest::::read1()": [
        30,
        40
      ],
      "DefaultSheetCellStyleReadTest::::read2()": [
        42,
        52
      ],
      "DefaultSheetCellStyleReadTest::::getSheetContext()": [
        54,
        65
      ]
    },
    "reverse_method_lines_dic": {
      "35": "DefaultSheetCellStyleRead::::getSheetContext()",
      "36": "DefaultSheetCellStyleRead::::getSheetContext()",
      "37": "DefaultSheetCellStyleRead::::getSheetContext()",
      "38": "DefaultSheetCellStyleRead::::getSheetContext()",
      "40": "DefaultSheetCellStyleRead::::read()",
      "41": "DefaultSheetCellStyleRead::::read()",
      "42": "DefaultSheetCellStyleRead::::read()",
      "43": "DefaultSheetCellStyleRead::::read()",
      "44": "DefaultSheetCellStyleRead::::read()",
      "45": "DefaultSheetCellStyleRead::::read()",
      "46": "DefaultSheetCellStyleRead::::read()",
      "47": "DefaultSheetCellStyleRead::::read()",
      "48": "DefaultSheetCellStyleRead::::read()",
      "49": "DefaultSheetCellStyleRead::::read()",
      "50": "DefaultSheetCellStyleRead::::read()",
      "51": "DefaultSheetCellStyleRead::::read()",
      "52": "DefaultSheetCellStyleRead::::read()",
      "53": "DefaultSheetCellStyleRead::::read()",
      "54": "DefaultSheetCellStyleRead::::read()",
      "55": "DefaultSheetCellStyleRead::::read()",
      "56": "DefaultSheetCellStyleRead::::read()",
      "57": "DefaultSheetCellStyleRead::::read()",
      "58": "DefaultSheetCellStyleRead::::read()",
      "59": "DefaultSheetCellStyleRead::::read()",
      "61": "DefaultSheetCellStyleRead::::getRowStyleRead()",
      "62": "DefaultSheetCellStyleRead::::getRowStyleRead()",
      "63": "DefaultSheetCellStyleRead::::getRowStyleRead()",
      "64": "DefaultSheetCellStyleRead::::getRowStyleRead()",
      "65": "DefaultSheetCellStyleRead::::getRowStyleRead()",
      "66": "DefaultSheetCellStyleRead::::getRowStyleRead()",
      "67": "DefaultSheetCellStyleRead::::getRowStyleRead()"
    },
    "test_reverse_method_lines_dic": {
      "21": "DefaultSheetCellStyleReadTest::::getSheetContext1()",
      "22": "DefaultSheetCellStyleReadTest::::getSheetContext1()",
      "23": "DefaultSheetCellStyleReadTest::::getSheetContext1()",
      "24": "DefaultSheetCellStyleReadTest::::getSheetContext1()",
      "25": "DefaultSheetCellStyleReadTest::::getSheetContext1()",
      "26": "DefaultSheetCellStyleReadTest::::getSheetContext1()",
      "27": "DefaultSheetCellStyleReadTest::::getSheetContext1()",
      "28": "DefaultSheetCellStyleReadTest::::getSheetContext1()",
      "30": "DefaultSheetCellStyleReadTest::::read1()",
      "31": "DefaultSheetCellStyleReadTest::::read1()",
      "32": "DefaultSheetCellStyleReadTest::::read1()",
      "33": "DefaultSheetCellStyleReadTest::::read1()",
      "34": "DefaultSheetCellStyleReadTest::::read1()",
      "35": "DefaultSheetCellStyleReadTest::::read1()",
      "36": "DefaultSheetCellStyleReadTest::::read1()",
      "37": "DefaultSheetCellStyleReadTest::::read1()",
      "38": "DefaultSheetCellStyleReadTest::::read1()",
      "39": "DefaultSheetCellStyleReadTest::::read1()",
      "40": "DefaultSheetCellStyleReadTest::::read1()",
      "42": "DefaultSheetCellStyleReadTest::::read2()",
      "43": "DefaultSheetCellStyleReadTest::::read2()",
      "44": "DefaultSheetCellStyleReadTest::::read2()",
      "45": "DefaultSheetCellStyleReadTest::::read2()",
      "46": "DefaultSheetCellStyleReadTest::::read2()",
      "47": "DefaultSheetCellStyleReadTest::::read2()",
      "48": "DefaultSheetCellStyleReadTest::::read2()",
      "49": "DefaultSheetCellStyleReadTest::::read2()",
      "50": "DefaultSheetCellStyleReadTest::::read2()",
      "51": "DefaultSheetCellStyleReadTest::::read2()",
      "52": "DefaultSheetCellStyleReadTest::::read2()",
      "54": "DefaultSheetCellStyleReadTest::::getSheetContext()",
      "55": "DefaultSheetCellStyleReadTest::::getSheetContext()",
      "56": "DefaultSheetCellStyleReadTest::::getSheetContext()",
      "57": "DefaultSheetCellStyleReadTest::::getSheetContext()",
      "58": "DefaultSheetCellStyleReadTest::::getSheetContext()",
      "59": "DefaultSheetCellStyleReadTest::::getSheetContext()",
      "60": "DefaultSheetCellStyleReadTest::::getSheetContext()",
      "61": "DefaultSheetCellStyleReadTest::::getSheetContext()",
      "62": "DefaultSheetCellStyleReadTest::::getSheetContext()",
      "63": "DefaultSheetCellStyleReadTest::::getSheetContext()",
      "64": "DefaultSheetCellStyleReadTest::::getSheetContext()",
      "65": "DefaultSheetCellStyleReadTest::::getSheetContext()"
    },
    "tests": [
      {
        "test_lines": [
          21,
          28
        ],
        "covered_lines": [
          31,
          32,
          33,
          37
        ]
      },
      {
        "test_lines": [
          30,
          40
        ],
        "covered_lines": [
          31,
          32,
          33,
          37,
          42,
          44,
          45,
          48,
          50,
          51,
          53,
          54,
          56,
          57,
          59,
          62,
          63,
          66
        ]
      },
      {
        "test_lines": [
          42,
          52
        ],
        "covered_lines": [
          31,
          32,
          33,
          37,
          42,
          44,
          45,
          48,
          50,
          51,
          53,
          54,
          56,
          57,
          59,
          62,
          63,
          66
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/zouzhiy-excel/src/main/java/io/github/zouzhiy/excel/cellstyle/defaults/DefaultRowStyleRead.java": {
    "class_content": [
      "/*\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package io.github.zouzhiy.excel.cellstyle.defaults;\n",
      "\n",
      "import io.github.zouzhiy.excel.cellstyle.CellStyleRead;\n",
      "import io.github.zouzhiy.excel.cellstyle.RowStyleRead;\n",
      "import io.github.zouzhiy.excel.context.SheetContext;\n",
      "import io.github.zouzhiy.excel.metadata.config.ExcelClassConfig;\n",
      "import io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig;\n",
      "import io.github.zouzhiy.excel.metadata.parameter.SheetParameter;\n",
      "import io.github.zouzhiy.excel.metadata.result.CellStyleResultSet;\n",
      "import org.apache.poi.ss.usermodel.CellStyle;\n",
      "import org.apache.poi.ss.usermodel.Row;\n",
      "\n",
      "import java.util.Collections;\n",
      "import java.util.List;\n",
      "\n",
      "/**\n",
      " * @author zouzhiy\n",
      " * @since 2022/7/2\n",
      " */\n",
      "public class DefaultRowStyleRead implements RowStyleRead {\n",
      "\n",
      "    @Override\n",
      "    public CellStyle readTitle(SheetContext sheetContext) {\n",
      "        SheetParameter sheetParameter = sheetContext.getSheetParameter();\n",
      "        Integer titleRowIndex = sheetParameter.getTitleRowStartIndex();\n",
      "\n",
      "        Row row = sheetContext.getRow(titleRowIndex);\n",
      "        Integer titleColumnIndex = sheetParameter.getTitleColumnStartIndex();\n",
      "        CellStyleRead cellStyleRead = DefaultCellStyleRead.getInstance();\n",
      "\n",
      "        return cellStyleRead.read(sheetContext, Collections.singletonList(row), titleColumnIndex, titleColumnIndex);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public CellStyleResultSet readHead(SheetContext sheetContext) {\n",
      "        SheetParameter sheetParameter = sheetContext.getSheetParameter();\n",
      "        return this.read(sheetContext, sheetParameter.getHeadRowStartIndex(), sheetParameter.getHeadColumnStartIndex());\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public CellStyleResultSet readData(SheetContext sheetContext) {\n",
      "        SheetParameter sheetParameter = sheetContext.getSheetParameter();\n",
      "        return this.read(sheetContext, sheetParameter.getDataRowStartIndex(), sheetParameter.getDataColumnStartIndex());\n",
      "    }\n",
      "\n",
      "\n",
      "    private CellStyleResultSet read(SheetContext sheetContext, int rowStartIndex, int columnStartIndex) {\n",
      "        CellStyleResultSet cellStyleResultSet = CellStyleResultSet.empty();\n",
      "\n",
      "        int maxRowspan = sheetContext.getMaxRowspan(rowStartIndex);\n",
      "\n",
      "        List<Row> rowList = sheetContext.getRowList(rowStartIndex, rowStartIndex + maxRowspan - 1);\n",
      "\n",
      "        int curColumnIndex = columnStartIndex;\n",
      "        ExcelClassConfig excelClassConfig = sheetContext.getExcelClassConfig();\n",
      "        List<ExcelFieldConfig> itemList = excelClassConfig.getItemList();\n",
      "        CellStyleRead cellStyleRead = DefaultCellStyleRead.getInstance();\n",
      "        for (ExcelFieldConfig excelFieldConfig : itemList) {\n",
      "            int colspan = excelFieldConfig.getColspan();\n",
      "            CellStyle cellStyle = cellStyleRead.read(sheetContext, rowList, curColumnIndex, curColumnIndex + colspan - 1);\n",
      "            if (cellStyle != null) {\n",
      "                cellStyleResultSet.cellStyleResult(excelFieldConfig, cellStyle);\n",
      "            }\n",
      "            curColumnIndex += colspan;\n",
      "        }\n",
      "\n",
      "        return cellStyleResultSet;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package io.github.zouzhiy.excel.cellstyle.defaults;\n",
      "\n",
      "import io.github.zouzhiy.excel.builder.ZouzhiyExcelFactory;\n",
      "import io.github.zouzhiy.excel.builder.ZouzhiyExcelFactoryBuilder;\n",
      "import io.github.zouzhiy.excel.context.SheetContext;\n",
      "import io.github.zouzhiy.excel.context.defualts.DefaultSheetContext;\n",
      "import io.github.zouzhiy.excel.metadata.parameter.SheetParameter;\n",
      "import io.github.zouzhiy.excel.metadata.parameter.WorkbookParameter;\n",
      "import io.github.zouzhiy.excel.metadata.result.CellStyleResultSet;\n",
      "import io.github.zouzhiy.excel.read.WorkbookRead;\n",
      "import io.github.zouzhiy.excel.support.metadata.DemoDefault;\n",
      "import io.github.zouzhiy.excel.support.utils.TestFileUtils;\n",
      "import org.apache.poi.ss.usermodel.CellStyle;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import java.io.InputStream;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.assertNotNull;\n",
      "import static org.junit.jupiter.api.Assertions.assertTrue;\n",
      "\n",
      "class DefaultRowStyleReadTest {\n",
      "\n",
      "    private final ZouzhiyExcelFactory zouzhiyExcelFactory = ZouzhiyExcelFactoryBuilder.builder().build();\n",
      "\n",
      "    @Test\n",
      "    void readTitle1() {\n",
      "        InputStream inputStream = TestFileUtils.getInputStream(\"statics/import/data-title-style-read.xlsx\");\n",
      "        WorkbookParameter workbookParameter = WorkbookParameter.builder()\n",
      "                .input(inputStream)\n",
      "                .sheetParameter(SheetParameter.builder().sheet(0).titleRowStartIndex(-1).headRowStartIndex(1).dataRowStartIndex(3).build())\n",
      "                .build();\n",
      "        WorkbookRead workbookRead = zouzhiyExcelFactory.getWorkbookRead(workbookParameter, DemoDefault.class);\n",
      "\n",
      "        SheetContext sheetContext = new DefaultSheetContext(workbookRead.getWorkbookContext(), workbookRead.getExcelClassConfig(), workbookParameter.getSheetParameter());\n",
      "\n",
      "\n",
      "        DefaultRowStyleRead defaultRowStyleRead = new DefaultRowStyleRead();\n",
      "        CellStyle cellStyle = defaultRowStyleRead.readTitle(sheetContext);\n",
      "        assert cellStyle == null;\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void readTitle2() {\n",
      "        SheetContext sheetContext = this.getSheetContext();\n",
      "\n",
      "        DefaultRowStyleRead defaultRowStyleRead = new DefaultRowStyleRead();\n",
      "        CellStyle cellStyle = defaultRowStyleRead.readTitle(sheetContext);\n",
      "        assert cellStyle != null;\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void readHead1() {\n",
      "        InputStream inputStream = TestFileUtils.getInputStream(\"statics/import/data-title-style-read.xlsx\");\n",
      "        WorkbookParameter workbookParameter = WorkbookParameter.builder()\n",
      "                .input(inputStream)\n",
      "                .sheetParameter(SheetParameter.builder().sheet(0).titleRowStartIndex(-1).headRowStartIndex(-1).dataRowStartIndex(3).build())\n",
      "                .build();\n",
      "        WorkbookRead workbookRead = zouzhiyExcelFactory.getWorkbookRead(workbookParameter, DemoDefault.class);\n",
      "\n",
      "        SheetContext sheetContext = new DefaultSheetContext(workbookRead.getWorkbookContext(), workbookRead.getExcelClassConfig(), workbookParameter.getSheetParameter());\n",
      "\n",
      "        DefaultRowStyleRead defaultRowStyleRead = new DefaultRowStyleRead();\n",
      "        CellStyleResultSet cellStyleResultSet = defaultRowStyleRead.readHead(sheetContext);\n",
      "\n",
      "        assertNotNull(cellStyleResultSet);\n",
      "        assertTrue(cellStyleResultSet.getCellStyleResultList().isEmpty());\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void readHead2() {\n",
      "        SheetContext sheetContext = this.getSheetContext();\n",
      "\n",
      "        DefaultRowStyleRead defaultRowStyleRead = new DefaultRowStyleRead();\n",
      "        CellStyleResultSet cellStyleResultSet = defaultRowStyleRead.readHead(sheetContext);\n",
      "\n",
      "        assertNotNull(cellStyleResultSet);\n",
      "        assertTrue(cellStyleResultSet.getCellStyleResultList().size() > 0);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void readData1() {\n",
      "        InputStream inputStream = TestFileUtils.getInputStream(\"statics/import/data-title-style-read.xlsx\");\n",
      "        WorkbookParameter workbookParameter = WorkbookParameter.builder()\n",
      "                .input(inputStream)\n",
      "                .sheetParameter(SheetParameter.builder().sheet(0).titleRowStartIndex(-1).headRowStartIndex(-1).dataRowStartIndex(32).build())\n",
      "                .build();\n",
      "        WorkbookRead workbookRead = zouzhiyExcelFactory.getWorkbookRead(workbookParameter, DemoDefault.class);\n",
      "\n",
      "        SheetContext sheetContext = new DefaultSheetContext(workbookRead.getWorkbookContext(), workbookRead.getExcelClassConfig(), workbookParameter.getSheetParameter());\n",
      "\n",
      "\n",
      "        DefaultRowStyleRead defaultRowStyleRead = new DefaultRowStyleRead();\n",
      "        CellStyleResultSet cellStyleResultSet = defaultRowStyleRead.readHead(sheetContext);\n",
      "\n",
      "        assertNotNull(cellStyleResultSet);\n",
      "        assertTrue(cellStyleResultSet.getCellStyleResultList().isEmpty());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void readData2() {\n",
      "        SheetContext sheetContext = this.getSheetContext();\n",
      "        DefaultRowStyleRead defaultRowStyleRead = new DefaultRowStyleRead();\n",
      "        CellStyleResultSet cellStyleResultSet = defaultRowStyleRead.readHead(sheetContext);\n",
      "\n",
      "        assertNotNull(cellStyleResultSet);\n",
      "        assertTrue(cellStyleResultSet.getCellStyleResultList().size() > 0);\n",
      "    }\n",
      "\n",
      "\n",
      "    private SheetContext getSheetContext() {\n",
      "\n",
      "        InputStream inputStream = TestFileUtils.getInputStream(\"statics/import/data-title-style-read.xlsx\");\n",
      "        WorkbookParameter workbookParameter = WorkbookParameter.builder()\n",
      "                .input(inputStream)\n",
      "                .sheetParameter(SheetParameter.builder().sheet(0).titleRowStartIndex(0).headRowStartIndex(1).dataRowStartIndex(3).build())\n",
      "                .build();\n",
      "        WorkbookRead workbookRead = zouzhiyExcelFactory.getWorkbookRead(workbookParameter, DemoDefault.class);\n",
      "\n",
      "        return new DefaultSheetContext(workbookRead.getWorkbookContext(), workbookRead.getExcelClassConfig(), workbookParameter.getSheetParameter());\n",
      "\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "DefaultRowStyleRead::::readTitle(io.github.zouzhiy.excel.context.SheetContext)": [
        35,
        45
      ],
      "DefaultRowStyleRead::::readHead(io.github.zouzhiy.excel.context.SheetContext)": [
        47,
        51
      ],
      "DefaultRowStyleRead::::readData(io.github.zouzhiy.excel.context.SheetContext)": [
        53,
        57
      ],
      "DefaultRowStyleRead::::read(io.github.zouzhiy.excel.context.SheetContext,int,int)": [
        60,
        81
      ]
    },
    "test_method_lines_dic": {
      "DefaultRowStyleReadTest::::readTitle1()": [
        25,
        40
      ],
      "DefaultRowStyleReadTest::::readTitle2()": [
        42,
        49
      ],
      "DefaultRowStyleReadTest::::readHead1()": [
        51,
        67
      ],
      "DefaultRowStyleReadTest::::readHead2()": [
        70,
        79
      ],
      "DefaultRowStyleReadTest::::readData1()": [
        81,
        98
      ],
      "DefaultRowStyleReadTest::::readData2()": [
        100,
        108
      ],
      "DefaultRowStyleReadTest::::getSheetContext()": [
        111,
        122
      ]
    },
    "reverse_method_lines_dic": {
      "35": "DefaultRowStyleRead::::readTitle(io.github.zouzhiy.excel.context.SheetContext)",
      "36": "DefaultRowStyleRead::::readTitle(io.github.zouzhiy.excel.context.SheetContext)",
      "37": "DefaultRowStyleRead::::readTitle(io.github.zouzhiy.excel.context.SheetContext)",
      "38": "DefaultRowStyleRead::::readTitle(io.github.zouzhiy.excel.context.SheetContext)",
      "39": "DefaultRowStyleRead::::readTitle(io.github.zouzhiy.excel.context.SheetContext)",
      "40": "DefaultRowStyleRead::::readTitle(io.github.zouzhiy.excel.context.SheetContext)",
      "41": "DefaultRowStyleRead::::readTitle(io.github.zouzhiy.excel.context.SheetContext)",
      "42": "DefaultRowStyleRead::::readTitle(io.github.zouzhiy.excel.context.SheetContext)",
      "43": "DefaultRowStyleRead::::readTitle(io.github.zouzhiy.excel.context.SheetContext)",
      "44": "DefaultRowStyleRead::::readTitle(io.github.zouzhiy.excel.context.SheetContext)",
      "45": "DefaultRowStyleRead::::readTitle(io.github.zouzhiy.excel.context.SheetContext)",
      "47": "DefaultRowStyleRead::::readHead(io.github.zouzhiy.excel.context.SheetContext)",
      "48": "DefaultRowStyleRead::::readHead(io.github.zouzhiy.excel.context.SheetContext)",
      "49": "DefaultRowStyleRead::::readHead(io.github.zouzhiy.excel.context.SheetContext)",
      "50": "DefaultRowStyleRead::::readHead(io.github.zouzhiy.excel.context.SheetContext)",
      "51": "DefaultRowStyleRead::::readHead(io.github.zouzhiy.excel.context.SheetContext)",
      "53": "DefaultRowStyleRead::::readData(io.github.zouzhiy.excel.context.SheetContext)",
      "54": "DefaultRowStyleRead::::readData(io.github.zouzhiy.excel.context.SheetContext)",
      "55": "DefaultRowStyleRead::::readData(io.github.zouzhiy.excel.context.SheetContext)",
      "56": "DefaultRowStyleRead::::readData(io.github.zouzhiy.excel.context.SheetContext)",
      "57": "DefaultRowStyleRead::::readData(io.github.zouzhiy.excel.context.SheetContext)",
      "60": "DefaultRowStyleRead::::read(io.github.zouzhiy.excel.context.SheetContext,int,int)",
      "61": "DefaultRowStyleRead::::read(io.github.zouzhiy.excel.context.SheetContext,int,int)",
      "62": "DefaultRowStyleRead::::read(io.github.zouzhiy.excel.context.SheetContext,int,int)",
      "63": "DefaultRowStyleRead::::read(io.github.zouzhiy.excel.context.SheetContext,int,int)",
      "64": "DefaultRowStyleRead::::read(io.github.zouzhiy.excel.context.SheetContext,int,int)",
      "65": "DefaultRowStyleRead::::read(io.github.zouzhiy.excel.context.SheetContext,int,int)",
      "66": "DefaultRowStyleRead::::read(io.github.zouzhiy.excel.context.SheetContext,int,int)",
      "67": "DefaultRowStyleRead::::read(io.github.zouzhiy.excel.context.SheetContext,int,int)",
      "68": "DefaultRowStyleRead::::read(io.github.zouzhiy.excel.context.SheetContext,int,int)",
      "69": "DefaultRowStyleRead::::read(io.github.zouzhiy.excel.context.SheetContext,int,int)",
      "70": "DefaultRowStyleRead::::read(io.github.zouzhiy.excel.context.SheetContext,int,int)",
      "71": "DefaultRowStyleRead::::read(io.github.zouzhiy.excel.context.SheetContext,int,int)",
      "72": "DefaultRowStyleRead::::read(io.github.zouzhiy.excel.context.SheetContext,int,int)",
      "73": "DefaultRowStyleRead::::read(io.github.zouzhiy.excel.context.SheetContext,int,int)",
      "74": "DefaultRowStyleRead::::read(io.github.zouzhiy.excel.context.SheetContext,int,int)",
      "75": "DefaultRowStyleRead::::read(io.github.zouzhiy.excel.context.SheetContext,int,int)",
      "76": "DefaultRowStyleRead::::read(io.github.zouzhiy.excel.context.SheetContext,int,int)",
      "77": "DefaultRowStyleRead::::read(io.github.zouzhiy.excel.context.SheetContext,int,int)",
      "78": "DefaultRowStyleRead::::read(io.github.zouzhiy.excel.context.SheetContext,int,int)",
      "79": "DefaultRowStyleRead::::read(io.github.zouzhiy.excel.context.SheetContext,int,int)",
      "80": "DefaultRowStyleRead::::read(io.github.zouzhiy.excel.context.SheetContext,int,int)",
      "81": "DefaultRowStyleRead::::read(io.github.zouzhiy.excel.context.SheetContext,int,int)"
    },
    "test_reverse_method_lines_dic": {
      "25": "DefaultRowStyleReadTest::::readTitle1()",
      "26": "DefaultRowStyleReadTest::::readTitle1()",
      "27": "DefaultRowStyleReadTest::::readTitle1()",
      "28": "DefaultRowStyleReadTest::::readTitle1()",
      "29": "DefaultRowStyleReadTest::::readTitle1()",
      "30": "DefaultRowStyleReadTest::::readTitle1()",
      "31": "DefaultRowStyleReadTest::::readTitle1()",
      "32": "DefaultRowStyleReadTest::::readTitle1()",
      "33": "DefaultRowStyleReadTest::::readTitle1()",
      "34": "DefaultRowStyleReadTest::::readTitle1()",
      "35": "DefaultRowStyleReadTest::::readTitle1()",
      "36": "DefaultRowStyleReadTest::::readTitle1()",
      "37": "DefaultRowStyleReadTest::::readTitle1()",
      "38": "DefaultRowStyleReadTest::::readTitle1()",
      "39": "DefaultRowStyleReadTest::::readTitle1()",
      "40": "DefaultRowStyleReadTest::::readTitle1()",
      "42": "DefaultRowStyleReadTest::::readTitle2()",
      "43": "DefaultRowStyleReadTest::::readTitle2()",
      "44": "DefaultRowStyleReadTest::::readTitle2()",
      "45": "DefaultRowStyleReadTest::::readTitle2()",
      "46": "DefaultRowStyleReadTest::::readTitle2()",
      "47": "DefaultRowStyleReadTest::::readTitle2()",
      "48": "DefaultRowStyleReadTest::::readTitle2()",
      "49": "DefaultRowStyleReadTest::::readTitle2()",
      "51": "DefaultRowStyleReadTest::::readHead1()",
      "52": "DefaultRowStyleReadTest::::readHead1()",
      "53": "DefaultRowStyleReadTest::::readHead1()",
      "54": "DefaultRowStyleReadTest::::readHead1()",
      "55": "DefaultRowStyleReadTest::::readHead1()",
      "56": "DefaultRowStyleReadTest::::readHead1()",
      "57": "DefaultRowStyleReadTest::::readHead1()",
      "58": "DefaultRowStyleReadTest::::readHead1()",
      "59": "DefaultRowStyleReadTest::::readHead1()",
      "60": "DefaultRowStyleReadTest::::readHead1()",
      "61": "DefaultRowStyleReadTest::::readHead1()",
      "62": "DefaultRowStyleReadTest::::readHead1()",
      "63": "DefaultRowStyleReadTest::::readHead1()",
      "64": "DefaultRowStyleReadTest::::readHead1()",
      "65": "DefaultRowStyleReadTest::::readHead1()",
      "66": "DefaultRowStyleReadTest::::readHead1()",
      "67": "DefaultRowStyleReadTest::::readHead1()",
      "70": "DefaultRowStyleReadTest::::readHead2()",
      "71": "DefaultRowStyleReadTest::::readHead2()",
      "72": "DefaultRowStyleReadTest::::readHead2()",
      "73": "DefaultRowStyleReadTest::::readHead2()",
      "74": "DefaultRowStyleReadTest::::readHead2()",
      "75": "DefaultRowStyleReadTest::::readHead2()",
      "76": "DefaultRowStyleReadTest::::readHead2()",
      "77": "DefaultRowStyleReadTest::::readHead2()",
      "78": "DefaultRowStyleReadTest::::readHead2()",
      "79": "DefaultRowStyleReadTest::::readHead2()",
      "81": "DefaultRowStyleReadTest::::readData1()",
      "82": "DefaultRowStyleReadTest::::readData1()",
      "83": "DefaultRowStyleReadTest::::readData1()",
      "84": "DefaultRowStyleReadTest::::readData1()",
      "85": "DefaultRowStyleReadTest::::readData1()",
      "86": "DefaultRowStyleReadTest::::readData1()",
      "87": "DefaultRowStyleReadTest::::readData1()",
      "88": "DefaultRowStyleReadTest::::readData1()",
      "89": "DefaultRowStyleReadTest::::readData1()",
      "90": "DefaultRowStyleReadTest::::readData1()",
      "91": "DefaultRowStyleReadTest::::readData1()",
      "92": "DefaultRowStyleReadTest::::readData1()",
      "93": "DefaultRowStyleReadTest::::readData1()",
      "94": "DefaultRowStyleReadTest::::readData1()",
      "95": "DefaultRowStyleReadTest::::readData1()",
      "96": "DefaultRowStyleReadTest::::readData1()",
      "97": "DefaultRowStyleReadTest::::readData1()",
      "98": "DefaultRowStyleReadTest::::readData1()",
      "100": "DefaultRowStyleReadTest::::readData2()",
      "101": "DefaultRowStyleReadTest::::readData2()",
      "102": "DefaultRowStyleReadTest::::readData2()",
      "103": "DefaultRowStyleReadTest::::readData2()",
      "104": "DefaultRowStyleReadTest::::readData2()",
      "105": "DefaultRowStyleReadTest::::readData2()",
      "106": "DefaultRowStyleReadTest::::readData2()",
      "107": "DefaultRowStyleReadTest::::readData2()",
      "108": "DefaultRowStyleReadTest::::readData2()",
      "111": "DefaultRowStyleReadTest::::getSheetContext()",
      "112": "DefaultRowStyleReadTest::::getSheetContext()",
      "113": "DefaultRowStyleReadTest::::getSheetContext()",
      "114": "DefaultRowStyleReadTest::::getSheetContext()",
      "115": "DefaultRowStyleReadTest::::getSheetContext()",
      "116": "DefaultRowStyleReadTest::::getSheetContext()",
      "117": "DefaultRowStyleReadTest::::getSheetContext()",
      "118": "DefaultRowStyleReadTest::::getSheetContext()",
      "119": "DefaultRowStyleReadTest::::getSheetContext()",
      "120": "DefaultRowStyleReadTest::::getSheetContext()",
      "121": "DefaultRowStyleReadTest::::getSheetContext()",
      "122": "DefaultRowStyleReadTest::::getSheetContext()"
    },
    "tests": [
      {
        "test_lines": [
          25,
          40
        ],
        "covered_lines": [
          33,
          37,
          38,
          40,
          41,
          42,
          44
        ]
      },
      {
        "test_lines": [
          42,
          49
        ],
        "covered_lines": [
          33,
          37,
          38,
          40,
          41,
          42,
          44
        ]
      },
      {
        "test_lines": [
          51,
          67
        ],
        "covered_lines": [
          33,
          49,
          50,
          61,
          63,
          65,
          67,
          68,
          69,
          70,
          71,
          72,
          73,
          74,
          77,
          78,
          80
        ]
      },
      {
        "test_lines": [
          70,
          79
        ],
        "covered_lines": [
          33,
          49,
          50,
          61,
          63,
          65,
          67,
          68,
          69,
          70,
          71,
          72,
          73,
          74,
          75,
          77,
          78,
          80
        ]
      },
      {
        "test_lines": [
          81,
          98
        ],
        "covered_lines": [
          33,
          49,
          50,
          61,
          63,
          65,
          67,
          68,
          69,
          70,
          71,
          72,
          73,
          74,
          77,
          78,
          80
        ]
      },
      {
        "test_lines": [
          100,
          108
        ],
        "covered_lines": [
          33,
          49,
          50,
          61,
          63,
          65,
          67,
          68,
          69,
          70,
          71,
          72,
          73,
          74,
          75,
          77,
          78,
          80
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/zouzhiy-excel/src/main/java/io/github/zouzhiy/excel/cellstyle/defaults/DefaultCellStyleRead.java": {
    "class_content": [
      "/*\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package io.github.zouzhiy.excel.cellstyle.defaults;\n",
      "\n",
      "import io.github.zouzhiy.excel.cellstyle.CellStyleRead;\n",
      "import io.github.zouzhiy.excel.context.SheetContext;\n",
      "import org.apache.poi.ss.usermodel.Cell;\n",
      "import org.apache.poi.ss.usermodel.CellStyle;\n",
      "import org.apache.poi.ss.usermodel.Row;\n",
      "\n",
      "import java.util.List;\n",
      "\n",
      "/**\n",
      " * @author zouzhiy\n",
      " * @since 2022/7/2\n",
      " */\n",
      "public class DefaultCellStyleRead implements CellStyleRead {\n",
      "\n",
      "\n",
      "    private final static DefaultCellStyleRead DEFAULT_CELL_STYLE_READ = new DefaultCellStyleRead();\n",
      "\n",
      "    private DefaultCellStyleRead() {\n",
      "    }\n",
      "\n",
      "    public static DefaultCellStyleRead getInstance() {\n",
      "        return DEFAULT_CELL_STYLE_READ;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public CellStyle read(SheetContext sheetContext, List<Row> rowList, int firstCol, int lastCol) {\n",
      "        if (rowList == null || rowList.isEmpty()) {\n",
      "            return null;\n",
      "        }\n",
      "        Row row = rowList.get(0);\n",
      "        if (row == null) {\n",
      "            return null;\n",
      "        }\n",
      "        Cell cell = row.getCell(firstCol);\n",
      "        if (cell == null) {\n",
      "            return null;\n",
      "        }\n",
      "        return cell.getCellStyle();\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package io.github.zouzhiy.excel.cellstyle.defaults;\n",
      "\n",
      "\n",
      "import io.github.zouzhiy.excel.builder.ZouzhiyExcelFactory;\n",
      "import io.github.zouzhiy.excel.builder.ZouzhiyExcelFactoryBuilder;\n",
      "import io.github.zouzhiy.excel.context.SheetContext;\n",
      "import io.github.zouzhiy.excel.context.defualts.DefaultSheetContext;\n",
      "import io.github.zouzhiy.excel.metadata.parameter.SheetParameter;\n",
      "import io.github.zouzhiy.excel.metadata.parameter.WorkbookParameter;\n",
      "import io.github.zouzhiy.excel.read.WorkbookRead;\n",
      "import io.github.zouzhiy.excel.support.metadata.DemoDefault;\n",
      "import io.github.zouzhiy.excel.support.utils.TestFileUtils;\n",
      "import io.github.zouzhiy.excel.utils.RegionUtils;\n",
      "import org.apache.poi.ss.usermodel.*;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import java.io.InputStream;\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "import java.util.Random;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.assertEquals;\n",
      "\n",
      "class DefaultCellStyleReadTest {\n",
      "\n",
      "    private final Random random = new Random(System.currentTimeMillis());\n",
      "    private final ZouzhiyExcelFactory zouzhiyExcelFactory = ZouzhiyExcelFactoryBuilder.builder().build();\n",
      "    private final DefaultCellStyleRead defaultCellStyleRead = DefaultCellStyleRead.getInstance();\n",
      "\n",
      "    @Test\n",
      "    void read() {\n",
      "        SheetContext sheetContext = this.getSheetContext();\n",
      "\n",
      "        int i = 1;\n",
      "        while (i < 50) {\n",
      "            int rowspan = testRow(sheetContext, i);\n",
      "            i = i + rowspan;\n",
      "        }\n",
      "        assert true;\n",
      "\n",
      "    }\n",
      "\n",
      "    private int testRow(SheetContext sheetContext, int rowIndex) {\n",
      "        int rowspan = random.nextBoolean() ? 1 : random.nextInt(3) + 1;\n",
      "        int colStartIndex = random.nextInt(10);\n",
      "        int lasCol = random.nextBoolean() ? colStartIndex : colStartIndex + random.nextInt(5);\n",
      "\n",
      "        Sheet sheet = sheetContext.getSheet();\n",
      "        List<Row> rowList = new ArrayList<>();\n",
      "        for (int i = 0; i < rowspan; i++) {\n",
      "            Row row = sheet.createRow(rowIndex + i);\n",
      "            rowList.add(row);\n",
      "        }\n",
      "        Row row = rowList.get(0);\n",
      "        Cell cell = row.createCell(colStartIndex);\n",
      "\n",
      "        Workbook workbook = sheetContext.getWorkbookContext().getWorkbook();\n",
      "        DataFormat dataFormat = workbook.createDataFormat();\n",
      "        CellStyle cellStyleInsert = workbook.createCellStyle();\n",
      "        if (random.nextBoolean()) {\n",
      "            Font font = workbook.createFont();\n",
      "            font.setFontName(\"\u5b8b\u4f53\");\n",
      "            cellStyleInsert.setFont(font);\n",
      "        }\n",
      "        if (random.nextBoolean()) {\n",
      "            cellStyleInsert.setHidden(random.nextBoolean());\n",
      "        }\n",
      "\n",
      "        if (random.nextBoolean()) {\n",
      "            cellStyleInsert.setLocked(random.nextBoolean());\n",
      "        }\n",
      "\n",
      "        if (random.nextBoolean()) {\n",
      "            cellStyleInsert.setQuotePrefixed(random.nextBoolean());\n",
      "        }\n",
      "\n",
      "        if (random.nextBoolean()) {\n",
      "            cellStyleInsert.setAlignment(HorizontalAlignment.values()[random.nextInt(HorizontalAlignment.values().length)]);\n",
      "        }\n",
      "        if (random.nextBoolean()) {\n",
      "            cellStyleInsert.setWrapText(random.nextBoolean());\n",
      "        }\n",
      "\n",
      "        if (random.nextBoolean()) {\n",
      "            cellStyleInsert.setVerticalAlignment(VerticalAlignment.values()[random.nextInt(VerticalAlignment.values().length)]);\n",
      "        }\n",
      "\n",
      "        if (random.nextBoolean()) {\n",
      "            cellStyleInsert.setRotation((short) random.nextInt(Short.MAX_VALUE));\n",
      "        }\n",
      "        if (random.nextBoolean()) {\n",
      "            cellStyleInsert.setIndention((short) random.nextInt(Short.MAX_VALUE));\n",
      "        }\n",
      "\n",
      "        if (random.nextBoolean()) {\n",
      "            cellStyleInsert.setBorderLeft(BorderStyle.values()[random.nextInt(BorderStyle.values().length)]);\n",
      "        }\n",
      "\n",
      "        if (random.nextBoolean()) {\n",
      "            cellStyleInsert.setBottomBorderColor((short) random.nextInt(Short.MAX_VALUE));\n",
      "        }\n",
      "\n",
      "        cell.setCellStyle(cellStyleInsert);\n",
      "        RegionUtils.addMergedRegionIfPresent(sheetContext, cellStyleInsert, rowIndex, rowIndex + rowspan - 1, colStartIndex, lasCol);\n",
      "\n",
      "        CellStyle cellStyle = defaultCellStyleRead.read(sheetContext, rowList, colStartIndex, lasCol);\n",
      "\n",
      "        assertEquals(cellStyleInsert.getFontIndex(), cellStyle.getFontIndex());\n",
      "\n",
      "        assertEquals(cellStyleInsert.getHidden(), cellStyle.getHidden());\n",
      "        assertEquals(cellStyleInsert.getLocked(), cellStyle.getLocked());\n",
      "        // assertEquals(cellStyleInsert.getQuotePrefixed(), cellStyle.getQuotePrefixed());\n",
      "        assertEquals(cellStyleInsert.getAlignment(), cellStyle.getAlignment());\n",
      "        assertEquals(cellStyleInsert.getWrapText(), cellStyle.getWrapText());\n",
      "        assertEquals(cellStyleInsert.getVerticalAlignment(), cellStyle.getVerticalAlignment());\n",
      "        assertEquals(cellStyleInsert.getRotation(), cellStyle.getRotation());\n",
      "        assertEquals(cellStyleInsert.getIndention(), cellStyle.getIndention());\n",
      "        assertEquals(cellStyleInsert.getBorderLeft(), cellStyle.getBorderLeft());\n",
      "        assertEquals(cellStyleInsert.getBottomBorderColor(), cellStyle.getBottomBorderColor());\n",
      "\n",
      "        return rowspan;\n",
      "    }\n",
      "\n",
      "\n",
      "    private SheetContext getSheetContext() {\n",
      "\n",
      "        InputStream inputStream = TestFileUtils.getInputStream(\"import/empty.xlsx\");\n",
      "        WorkbookParameter workbookParameter = WorkbookParameter.builder()\n",
      "                .input(inputStream)\n",
      "                .sheetParameter(SheetParameter.builder().build())\n",
      "                .build();\n",
      "        WorkbookRead workbookRead = zouzhiyExcelFactory.getWorkbookRead(workbookParameter, DemoDefault.class);\n",
      "\n",
      "        return new DefaultSheetContext(workbookRead.getWorkbookContext(), workbookRead.getExcelClassConfig(), workbookParameter.getSheetParameter());\n",
      "\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "DefaultCellStyleRead::::getInstance()": [
        36,
        38
      ]
    },
    "test_method_lines_dic": {
      "DefaultCellStyleReadTest::::read()": [
        30,
        41
      ],
      "DefaultCellStyleReadTest::::getSheetContext()": [
        125,
        136
      ]
    },
    "reverse_method_lines_dic": {
      "36": "DefaultCellStyleRead::::getInstance()",
      "37": "DefaultCellStyleRead::::getInstance()",
      "38": "DefaultCellStyleRead::::getInstance()"
    },
    "test_reverse_method_lines_dic": {
      "30": "DefaultCellStyleReadTest::::read()",
      "31": "DefaultCellStyleReadTest::::read()",
      "32": "DefaultCellStyleReadTest::::read()",
      "33": "DefaultCellStyleReadTest::::read()",
      "34": "DefaultCellStyleReadTest::::read()",
      "35": "DefaultCellStyleReadTest::::read()",
      "36": "DefaultCellStyleReadTest::::read()",
      "37": "DefaultCellStyleReadTest::::read()",
      "38": "DefaultCellStyleReadTest::::read()",
      "39": "DefaultCellStyleReadTest::::read()",
      "40": "DefaultCellStyleReadTest::::read()",
      "41": "DefaultCellStyleReadTest::::read()",
      "125": "DefaultCellStyleReadTest::::getSheetContext()",
      "126": "DefaultCellStyleReadTest::::getSheetContext()",
      "127": "DefaultCellStyleReadTest::::getSheetContext()",
      "128": "DefaultCellStyleReadTest::::getSheetContext()",
      "129": "DefaultCellStyleReadTest::::getSheetContext()",
      "130": "DefaultCellStyleReadTest::::getSheetContext()",
      "131": "DefaultCellStyleReadTest::::getSheetContext()",
      "132": "DefaultCellStyleReadTest::::getSheetContext()",
      "133": "DefaultCellStyleReadTest::::getSheetContext()",
      "134": "DefaultCellStyleReadTest::::getSheetContext()",
      "135": "DefaultCellStyleReadTest::::getSheetContext()",
      "136": "DefaultCellStyleReadTest::::getSheetContext()"
    },
    "tests": [
      {
        "test_lines": [
          30,
          41
        ],
        "covered_lines": [
          31,
          33,
          34,
          37,
          42,
          45,
          46,
          49,
          50,
          53
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/zouzhiy-excel/src/main/java/io/github/zouzhiy/excel/metadata/CellSpan.java": {
    "class_content": [
      "/*\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package io.github.zouzhiy.excel.metadata;\n",
      "\n",
      "import io.github.zouzhiy.excel.exceptions.ExcelException;\n",
      "import lombok.EqualsAndHashCode;\n",
      "import lombok.Getter;\n",
      "import lombok.Setter;\n",
      "import lombok.ToString;\n",
      "\n",
      "/**\n",
      " * \u5408\u5e76\u5355\u5143\u683c\u8de8\u884c\u6570\uff0c\u8de8\u5217\u6570\n",
      " *\n",
      " * @author zouzhiy\n",
      " * @since 2022/7/2\n",
      " */\n",
      "@Setter\n",
      "@Getter\n",
      "@ToString\n",
      "@EqualsAndHashCode\n",
      "public class CellSpan {\n",
      "\n",
      "    public final static CellSpan DEFAULT_CELL_SPAN = new CellSpan(1, 1) {\n",
      "        @Override\n",
      "        public void setRowspan(int rowspan) {\n",
      "            throw new ExcelException(\"\u4e0d\u652f\u6301\u4fee\u6539\");\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public void setColspan(int colspan) {\n",
      "            throw new ExcelException(\"\u4e0d\u652f\u6301\u4fee\u6539\");\n",
      "        }\n",
      "    };\n",
      "\n",
      "    public final static CellSpan NONE_CELL_SPAN = CellSpan.newInstance(-1, -1, -1, -1);\n",
      "\n",
      "    /**\n",
      "     * \u6a2a\u8de8\u7684\u884c\u6570\n",
      "     */\n",
      "    private int rowspan;\n",
      "\n",
      "    /**\n",
      "     * \u6a2a\u8de8\u7684\u5217\u6570\n",
      "     */\n",
      "    private int colspan;\n",
      "\n",
      "\n",
      "    private CellSpan(int rowspan, int colspan) {\n",
      "        this.rowspan = rowspan;\n",
      "        this.colspan = colspan;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u76f4\u63a5\u521b\u5efa\n",
      "     *\n",
      "     * @param rowspan \u7eb5\u8de8\u7684\u884c\u6570\n",
      "     * @param colspan \u6a2a\u8de8\u7684\u5217\u6570\n",
      "     * @return \u5bf9\u8c61\n",
      "     */\n",
      "    public static CellSpan newInstance(int rowspan, int colspan) {\n",
      "        return new CellSpan(rowspan, colspan);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6839\u636e\u8fb9\u754c\u8ba1\u7b97\n",
      "     *\n",
      "     * @param firstRow \u8d77\u59cb\u884c\n",
      "     * @param lastRow  \u7ec8\u6b62\u884c\n",
      "     * @param firstCol \u8d77\u59cb\u5217\n",
      "     * @param lastCol  \u7ec8\u6b62\u5217\n",
      "     * @return \u5408\u5e76\u5355\u5143\u683c\u8de8\u884c\u6570\uff0c\u8de8\u5217\u6570\n",
      "     */\n",
      "    public static CellSpan newInstance(int firstRow, int lastRow, int firstCol, int lastCol) {\n",
      "        return new CellSpan(lastRow - firstRow + 1, lastCol - firstCol + 1);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package io.github.zouzhiy.excel.metadata;\n",
      "\n",
      "import org.junit.jupiter.api.Assertions;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import java.util.Random;\n",
      "\n",
      "class CellSpanTest {\n",
      "\n",
      "    private final Random random = new Random(System.currentTimeMillis());\n",
      "\n",
      "    @Test\n",
      "    void newInstance1() {\n",
      "        int rowspan = random.nextInt();\n",
      "        int colspan = random.nextInt();\n",
      "\n",
      "        CellSpan cellSpan = CellSpan.newInstance(rowspan, colspan);\n",
      "\n",
      "        Assertions.assertEquals(cellSpan.getRowspan(), rowspan);\n",
      "        Assertions.assertEquals(cellSpan.getColspan(), colspan);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void newInstance2() {\n",
      "        int firstRow = random.nextInt();\n",
      "        int lastRow = random.nextInt();\n",
      "        int firstCol = random.nextInt();\n",
      "        int lastCol = random.nextInt();\n",
      "\n",
      "        CellSpan cellSpan = CellSpan.newInstance(firstRow, lastRow, firstCol, lastCol);\n",
      "\n",
      "        Assertions.assertEquals(cellSpan.getRowspan(), lastRow - firstRow + 1);\n",
      "        Assertions.assertEquals(cellSpan.getColspan(), lastCol - firstCol + 1);\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "CellSpan::::setRowspan(int)": [
        35,
        38
      ],
      "CellSpan::::setColspan(int)": [
        40,
        43
      ],
      "CellSpan::::newInstance(int,int)": [
        71,
        73
      ],
      "CellSpan::::newInstance(int,int,int,int)": [
        84,
        86
      ]
    },
    "test_method_lines_dic": {
      "CellSpanTest::::newInstance1()": [
        12,
        21
      ],
      "CellSpanTest::::newInstance2()": [
        23,
        34
      ]
    },
    "reverse_method_lines_dic": {
      "35": "CellSpan::::setRowspan(int)",
      "36": "CellSpan::::setRowspan(int)",
      "37": "CellSpan::::setRowspan(int)",
      "38": "CellSpan::::setRowspan(int)",
      "40": "CellSpan::::setColspan(int)",
      "41": "CellSpan::::setColspan(int)",
      "42": "CellSpan::::setColspan(int)",
      "43": "CellSpan::::setColspan(int)",
      "71": "CellSpan::::newInstance(int,int)",
      "72": "CellSpan::::newInstance(int,int)",
      "73": "CellSpan::::newInstance(int,int)",
      "84": "CellSpan::::newInstance(int,int,int,int)",
      "85": "CellSpan::::newInstance(int,int,int,int)",
      "86": "CellSpan::::newInstance(int,int,int,int)"
    },
    "test_reverse_method_lines_dic": {
      "12": "CellSpanTest::::newInstance1()",
      "13": "CellSpanTest::::newInstance1()",
      "14": "CellSpanTest::::newInstance1()",
      "15": "CellSpanTest::::newInstance1()",
      "16": "CellSpanTest::::newInstance1()",
      "17": "CellSpanTest::::newInstance1()",
      "18": "CellSpanTest::::newInstance1()",
      "19": "CellSpanTest::::newInstance1()",
      "20": "CellSpanTest::::newInstance1()",
      "21": "CellSpanTest::::newInstance1()",
      "23": "CellSpanTest::::newInstance2()",
      "24": "CellSpanTest::::newInstance2()",
      "25": "CellSpanTest::::newInstance2()",
      "26": "CellSpanTest::::newInstance2()",
      "27": "CellSpanTest::::newInstance2()",
      "28": "CellSpanTest::::newInstance2()",
      "29": "CellSpanTest::::newInstance2()",
      "30": "CellSpanTest::::newInstance2()",
      "31": "CellSpanTest::::newInstance2()",
      "32": "CellSpanTest::::newInstance2()",
      "33": "CellSpanTest::::newInstance2()",
      "34": "CellSpanTest::::newInstance2()"
    },
    "tests": [
      {
        "test_lines": [
          12,
          21
        ],
        "covered_lines": [
          34,
          46,
          51,
          56,
          59,
          60,
          61,
          62,
          72,
          85
        ]
      },
      {
        "test_lines": [
          23,
          34
        ],
        "covered_lines": [
          34,
          46,
          51,
          56,
          59,
          60,
          61,
          62,
          85
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/zouzhiy-excel/src/main/java/io/github/zouzhiy/excel/metadata/MergedRegion.java": {
    "class_content": [
      "/*\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package io.github.zouzhiy.excel.metadata;\n",
      "\n",
      "import lombok.Getter;\n",
      "import org.apache.poi.ss.util.CellRangeAddress;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.HashMap;\n",
      "import java.util.List;\n",
      "import java.util.Map;\n",
      "\n",
      "/**\n",
      " * sheet\u7684\u5408\u5e76\u5355\u5143\u683c\u6570\u636e\n",
      " *\n",
      " * @author zouzhiy\n",
      " * @since 2022/7/2\n",
      " */\n",
      "public class MergedRegion {\n",
      "\n",
      "    @Getter\n",
      "    private final Map<Integer, List<CellRangeAddress>> cellRangeAddressListMap;\n",
      "\n",
      "    public MergedRegion(List<CellRangeAddress> cellRangeAddressList) {\n",
      "        cellRangeAddressListMap = new HashMap<>();\n",
      "        for (CellRangeAddress cellRangeAddress : cellRangeAddressList) {\n",
      "            int firstRow = cellRangeAddress.getFirstRow();\n",
      "            int firstColumn = cellRangeAddress.getFirstColumn();\n",
      "            Integer key = firstRow + firstColumn;\n",
      "            List<CellRangeAddress> valueList = cellRangeAddressListMap.computeIfAbsent(key, integer -> new ArrayList<>(5));\n",
      "            valueList.add(cellRangeAddress);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u82e5\u884c\u5217\u662f\u5408\u5e76\u5355\u5143\u683c\u5de6\u4e0a\u89d2\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56de\u5355\u5143\u683c\u4fe1\u606f\u3002\u5426\u5219\u8fd4\u56denull\n",
      "     *\n",
      "     * @param firstRow    \u5355\u5143\u683c\u8d77\u59cb\u884c\n",
      "     * @param firstColumn \u5355\u5143\u683c\u8d77\u59cb\u5217\n",
      "     * @return \u4e0d\u7b26\u5408\u6761\u4ef6\u5219\u8fd4\u56denull\n",
      "     */\n",
      "    public CellRangeAddress getCellRangeAddress(int firstRow, int firstColumn) {\n",
      "        Integer key = firstRow + firstColumn;\n",
      "        List<CellRangeAddress> cellRangeAddressList = cellRangeAddressListMap.get(key);\n",
      "        if (cellRangeAddressList == null || cellRangeAddressList.isEmpty()) {\n",
      "            return null;\n",
      "        }\n",
      "\n",
      "        for (CellRangeAddress cellRangeAddress : cellRangeAddressList) {\n",
      "            int row = cellRangeAddress.getFirstRow();\n",
      "            int column = cellRangeAddress.getFirstColumn();\n",
      "\n",
      "            if (firstRow == row && firstColumn == column) {\n",
      "                return cellRangeAddress;\n",
      "            }\n",
      "        }\n",
      "\n",
      "        return null;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u82e5\u884c\u5217\u662f\u5408\u5e76\u5355\u5143\u683c\u5de6\u4e0a\u89d2\u4f4d\u7f6e\uff0c\u5219\u8fd4\u56de\u5408\u5e76\u5355\u5143\u683c\u5360\u7528\u7684\u884c\u6570\u548c\u5217\u6570\n",
      "     *\n",
      "     * @param firstRow    \u5355\u5143\u683c\u8d77\u59cb\u884c\n",
      "     * @param firstColumn \u5355\u5143\u683c\u8d77\u59cb\u5217\n",
      "     * @return \u7b26\u5408\u6761\u4ef6\u5219\u8fd4\u56de\u5408\u5e76\u5355\u5143\u683c\u5408\u5e76\u5217\u6570\u548c\u884c\u6570\u4fe1\u606f\u3002\u5426\u5219\u8fd4\u56de\u9ed8\u8ba4\u7684\u4e00\u884c\u4e00\u5217\u3002{@link CellSpan#DEFAULT_CELL_SPAN}\n",
      "     */\n",
      "    public CellSpan getCellSpan(int firstRow, int firstColumn) {\n",
      "        CellRangeAddress cellRangeAddress = this.getCellRangeAddress(firstRow, firstColumn);\n",
      "        if (cellRangeAddress == null) {\n",
      "            return CellSpan.DEFAULT_CELL_SPAN;\n",
      "        }\n",
      "        int lastRow = cellRangeAddress.getLastRow();\n",
      "        int lastColumn = cellRangeAddress.getLastColumn();\n",
      "\n",
      "        return CellSpan.newInstance(firstRow, lastRow, firstColumn, lastColumn);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5224\u65ad\u5355\u5143\u683c\u662f\u5426\u5c5e\u4e8e\u67d0\u4e2a\u5408\u5e76\u5355\u5143\u683c\u8303\u56f4\u5185\u5e76\u4e14\u4e0d\u662f\u9996\u4e2a\n",
      "     * \u6ee1\u8db3\u4e24\u4e2a\u6761\u4ef6\uff0c\u624d\u8fd4\u56detrue\n",
      "     * <pre>\n",
      "     *   1\u3001\u5c5e\u4e8e\u5408\u5e76\u5355\u5143\u683c\n",
      "     *   2\u3001\u4e0d\u662f\u5408\u5e76\u5355\u5143\u7684\u5de6\u4e0a\u89d2\u7b2c\u4e00\u4e2a\u5355\u5143\u683c\n",
      "     * </pre>\n",
      "     *\n",
      "     * @param rowIndex    \u5355\u5143\u683c\u884c\u4e0b\u6807\n",
      "     * @param columnIndex \u5355\u5143\u683c\u5217\u4e0b\u6807\n",
      "     * @return \u5224\u65ad\u7ed3\u679c\n",
      "     */\n",
      "    public boolean isInMergedRegionAndNotFirst(int rowIndex, int columnIndex) {\n",
      "        for (List<CellRangeAddress> cellRangeAddressList : cellRangeAddressListMap.values()) {\n",
      "            for (CellRangeAddress cellRangeAddress : cellRangeAddressList) {\n",
      "                int firstRow = cellRangeAddress.getFirstRow();\n",
      "                int lastRow = cellRangeAddress.getLastRow();\n",
      "                int firstColumn = cellRangeAddress.getFirstColumn();\n",
      "                int lastColumn = cellRangeAddress.getLastColumn();\n",
      "                if (rowIndex > firstRow && rowIndex <= lastRow) {\n",
      "                    if (columnIndex > firstColumn && columnIndex <= lastColumn) {\n",
      "                        return true;\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "        return false;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5224\u65ad\u5355\u5143\u683c\u533a\u57df\u662f\u5426\u5b58\u5728\u5408\u5e76\u5355\u5143\u683c\n",
      "     *\n",
      "     * @param firstRow \u8d77\u59cb\u884c\n",
      "     * @param lastRow  \u7ec8\u6b62\u884c\n",
      "     * @param firstCol \u8d77\u59cb\u5217\n",
      "     * @param lastCol  \u7ec8\u6b62\u5217\n",
      "     * @return \u5b58\u5728\u5219\u4e3aTrue, \u4e0d\u5b58\u5728\u8fd4\u56deFalse\n",
      "     */\n",
      "    public boolean unHasMergedRegion(int firstRow, int lastRow, int firstCol, int lastCol) {\n",
      "        CellRangeAddress cellRangeAddress = this.getCellRangeAddress(firstRow, lastRow);\n",
      "        if (cellRangeAddress != null) {\n",
      "            return false;\n",
      "        }\n",
      "        for (List<CellRangeAddress> cellRangeAddressList : cellRangeAddressListMap.values()) {\n",
      "            for (CellRangeAddress item : cellRangeAddressList) {\n",
      "                if (firstRow <= item.getLastRow() && lastRow >= item.getFirstRow()) {\n",
      "                    if (firstCol <= item.getLastColumn() && lastCol >= item.getFirstColumn()) {\n",
      "                        return false;\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "\n",
      "        return true;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package io.github.zouzhiy.excel.metadata;\n",
      "\n",
      "import org.apache.poi.ss.util.CellRangeAddress;\n",
      "import org.junit.jupiter.api.Assertions;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "import java.util.Random;\n",
      "\n",
      "/**\n",
      " * @author zouzhiy\n",
      " * @since 2022/7/13\n",
      " */\n",
      "class MergedRegionTest {\n",
      "\n",
      "    private final Random random = new Random(System.currentTimeMillis());\n",
      "\n",
      "    @Test\n",
      "    void getCellRangeAddress1() {\n",
      "        List<CellRangeAddress> cellRangeAddressList = new ArrayList<>();\n",
      "        MergedRegion mergedRegion = new MergedRegion(cellRangeAddressList);\n",
      "\n",
      "        Assertions.assertNull(mergedRegion.getCellRangeAddress(1, 1));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getCellRangeAddress2() {\n",
      "        List<CellRangeAddress> cellRangeAddressList = new ArrayList<>();\n",
      "\n",
      "        CellRangeAddress cellRangeAddress1 = CellRangeAddress.valueOf(\"A1:A2\");\n",
      "        cellRangeAddressList.add(cellRangeAddress1);\n",
      "\n",
      "        CellRangeAddress cellRangeAddress2 = CellRangeAddress.valueOf(\"B1:C5\");\n",
      "        cellRangeAddressList.add(cellRangeAddress2);\n",
      "\n",
      "        MergedRegion mergedRegion = new MergedRegion(cellRangeAddressList);\n",
      "\n",
      "        Assertions.assertEquals(mergedRegion.getCellRangeAddress(0, 0), cellRangeAddress1);\n",
      "        Assertions.assertEquals(mergedRegion.getCellRangeAddress(0, 1), cellRangeAddress2);\n",
      "        Assertions.assertNull(mergedRegion.getCellRangeAddress(2, 3));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getCellSpan1() {\n",
      "        List<CellRangeAddress> cellRangeAddressList = new ArrayList<>();\n",
      "        MergedRegion mergedRegion = new MergedRegion(cellRangeAddressList);\n",
      "\n",
      "        Assertions.assertEquals(mergedRegion.getCellSpan(1, 1), CellSpan.DEFAULT_CELL_SPAN);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getCellSpan2() {\n",
      "        List<CellRangeAddress> cellRangeAddressList = new ArrayList<>();\n",
      "\n",
      "        CellRangeAddress cellRangeAddress1 = CellRangeAddress.valueOf(\"A1:A2\");\n",
      "        cellRangeAddressList.add(cellRangeAddress1);\n",
      "\n",
      "        CellRangeAddress cellRangeAddress2 = CellRangeAddress.valueOf(\"B1:C5\");\n",
      "        cellRangeAddressList.add(cellRangeAddress2);\n",
      "\n",
      "        MergedRegion mergedRegion = new MergedRegion(cellRangeAddressList);\n",
      "\n",
      "        Assertions.assertEquals(mergedRegion.getCellSpan(0, 0), CellSpan.newInstance(2, 1));\n",
      "        Assertions.assertEquals(mergedRegion.getCellSpan(0, 1), CellSpan.newInstance(5, 2));\n",
      "        Assertions.assertEquals(mergedRegion.getCellSpan(2, 3), CellSpan.DEFAULT_CELL_SPAN);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void isInMergedRegionAndNotFirst1() {\n",
      "        List<CellRangeAddress> cellRangeAddressList = new ArrayList<>();\n",
      "\n",
      "        CellRangeAddress cellRangeAddress1 = CellRangeAddress.valueOf(\"A1:A2\");\n",
      "        cellRangeAddressList.add(cellRangeAddress1);\n",
      "\n",
      "        CellRangeAddress cellRangeAddress2 = CellRangeAddress.valueOf(\"B1:E5\");\n",
      "        cellRangeAddressList.add(cellRangeAddress2);\n",
      "\n",
      "        MergedRegion mergedRegion = new MergedRegion(cellRangeAddressList);\n",
      "\n",
      "        Assertions.assertFalse(mergedRegion.isInMergedRegionAndNotFirst(0, 0));\n",
      "        Assertions.assertFalse(mergedRegion.isInMergedRegionAndNotFirst(0, 1));\n",
      "        Assertions.assertTrue(mergedRegion.isInMergedRegionAndNotFirst(2, 3));\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void unHasMergedRegion() {\n",
      "\n",
      "        List<CellRangeAddress> cellRangeAddressList = new ArrayList<>();\n",
      "\n",
      "        CellRangeAddress cellRangeAddress1 = CellRangeAddress.valueOf(\"A1:A2\");\n",
      "        cellRangeAddressList.add(cellRangeAddress1);\n",
      "\n",
      "        CellRangeAddress cellRangeAddress2 = CellRangeAddress.valueOf(\"B1:E5\");\n",
      "        cellRangeAddressList.add(cellRangeAddress2);\n",
      "\n",
      "        MergedRegion mergedRegion = new MergedRegion(cellRangeAddressList);\n",
      "\n",
      "        Assertions.assertFalse(mergedRegion.unHasMergedRegion(0, 0, 0, 0));\n",
      "        Assertions.assertFalse(mergedRegion.unHasMergedRegion(0, 0, 1, 2));\n",
      "        Assertions.assertFalse(mergedRegion.unHasMergedRegion(2, 2, 3, 3));\n",
      "        Assertions.assertTrue(mergedRegion.unHasMergedRegion(5, 5, 3, 3));\n",
      "    }\n",
      "\n",
      "\n",
      "}\n"
    ],
    "method_lines_dic": {
      "MergedRegion::::getCellRangeAddress(int,int)": [
        53,
        70
      ],
      "MergedRegion::::getCellSpan(int,int)": [
        79,
        88
      ],
      "MergedRegion::::isInMergedRegionAndNotFirst(int,int)": [
        102,
        117
      ],
      "MergedRegion::::unHasMergedRegion(int,int,int,int)": [
        128,
        144
      ]
    },
    "test_method_lines_dic": {
      "MergedRegionTest::::getCellRangeAddress1()": [
        19,
        25
      ],
      "MergedRegionTest::::getCellRangeAddress2()": [
        27,
        42
      ],
      "MergedRegionTest::::getCellSpan1()": [
        44,
        50
      ],
      "MergedRegionTest::::getCellSpan2()": [
        52,
        67
      ],
      "MergedRegionTest::::isInMergedRegionAndNotFirst1()": [
        69,
        84
      ],
      "MergedRegionTest::::unHasMergedRegion()": [
        87,
        104
      ]
    },
    "reverse_method_lines_dic": {
      "53": "MergedRegion::::getCellRangeAddress(int,int)",
      "54": "MergedRegion::::getCellRangeAddress(int,int)",
      "55": "MergedRegion::::getCellRangeAddress(int,int)",
      "56": "MergedRegion::::getCellRangeAddress(int,int)",
      "57": "MergedRegion::::getCellRangeAddress(int,int)",
      "58": "MergedRegion::::getCellRangeAddress(int,int)",
      "59": "MergedRegion::::getCellRangeAddress(int,int)",
      "60": "MergedRegion::::getCellRangeAddress(int,int)",
      "61": "MergedRegion::::getCellRangeAddress(int,int)",
      "62": "MergedRegion::::getCellRangeAddress(int,int)",
      "63": "MergedRegion::::getCellRangeAddress(int,int)",
      "64": "MergedRegion::::getCellRangeAddress(int,int)",
      "65": "MergedRegion::::getCellRangeAddress(int,int)",
      "66": "MergedRegion::::getCellRangeAddress(int,int)",
      "67": "MergedRegion::::getCellRangeAddress(int,int)",
      "68": "MergedRegion::::getCellRangeAddress(int,int)",
      "69": "MergedRegion::::getCellRangeAddress(int,int)",
      "70": "MergedRegion::::getCellRangeAddress(int,int)",
      "79": "MergedRegion::::getCellSpan(int,int)",
      "80": "MergedRegion::::getCellSpan(int,int)",
      "81": "MergedRegion::::getCellSpan(int,int)",
      "82": "MergedRegion::::getCellSpan(int,int)",
      "83": "MergedRegion::::getCellSpan(int,int)",
      "84": "MergedRegion::::getCellSpan(int,int)",
      "85": "MergedRegion::::getCellSpan(int,int)",
      "86": "MergedRegion::::getCellSpan(int,int)",
      "87": "MergedRegion::::getCellSpan(int,int)",
      "88": "MergedRegion::::getCellSpan(int,int)",
      "102": "MergedRegion::::isInMergedRegionAndNotFirst(int,int)",
      "103": "MergedRegion::::isInMergedRegionAndNotFirst(int,int)",
      "104": "MergedRegion::::isInMergedRegionAndNotFirst(int,int)",
      "105": "MergedRegion::::isInMergedRegionAndNotFirst(int,int)",
      "106": "MergedRegion::::isInMergedRegionAndNotFirst(int,int)",
      "107": "MergedRegion::::isInMergedRegionAndNotFirst(int,int)",
      "108": "MergedRegion::::isInMergedRegionAndNotFirst(int,int)",
      "109": "MergedRegion::::isInMergedRegionAndNotFirst(int,int)",
      "110": "MergedRegion::::isInMergedRegionAndNotFirst(int,int)",
      "111": "MergedRegion::::isInMergedRegionAndNotFirst(int,int)",
      "112": "MergedRegion::::isInMergedRegionAndNotFirst(int,int)",
      "113": "MergedRegion::::isInMergedRegionAndNotFirst(int,int)",
      "114": "MergedRegion::::isInMergedRegionAndNotFirst(int,int)",
      "115": "MergedRegion::::isInMergedRegionAndNotFirst(int,int)",
      "116": "MergedRegion::::isInMergedRegionAndNotFirst(int,int)",
      "117": "MergedRegion::::isInMergedRegionAndNotFirst(int,int)",
      "128": "MergedRegion::::unHasMergedRegion(int,int,int,int)",
      "129": "MergedRegion::::unHasMergedRegion(int,int,int,int)",
      "130": "MergedRegion::::unHasMergedRegion(int,int,int,int)",
      "131": "MergedRegion::::unHasMergedRegion(int,int,int,int)",
      "132": "MergedRegion::::unHasMergedRegion(int,int,int,int)",
      "133": "MergedRegion::::unHasMergedRegion(int,int,int,int)",
      "134": "MergedRegion::::unHasMergedRegion(int,int,int,int)",
      "135": "MergedRegion::::unHasMergedRegion(int,int,int,int)",
      "136": "MergedRegion::::unHasMergedRegion(int,int,int,int)",
      "137": "MergedRegion::::unHasMergedRegion(int,int,int,int)",
      "138": "MergedRegion::::unHasMergedRegion(int,int,int,int)",
      "139": "MergedRegion::::unHasMergedRegion(int,int,int,int)",
      "140": "MergedRegion::::unHasMergedRegion(int,int,int,int)",
      "141": "MergedRegion::::unHasMergedRegion(int,int,int,int)",
      "142": "MergedRegion::::unHasMergedRegion(int,int,int,int)",
      "143": "MergedRegion::::unHasMergedRegion(int,int,int,int)",
      "144": "MergedRegion::::unHasMergedRegion(int,int,int,int)"
    },
    "test_reverse_method_lines_dic": {
      "19": "MergedRegionTest::::getCellRangeAddress1()",
      "20": "MergedRegionTest::::getCellRangeAddress1()",
      "21": "MergedRegionTest::::getCellRangeAddress1()",
      "22": "MergedRegionTest::::getCellRangeAddress1()",
      "23": "MergedRegionTest::::getCellRangeAddress1()",
      "24": "MergedRegionTest::::getCellRangeAddress1()",
      "25": "MergedRegionTest::::getCellRangeAddress1()",
      "27": "MergedRegionTest::::getCellRangeAddress2()",
      "28": "MergedRegionTest::::getCellRangeAddress2()",
      "29": "MergedRegionTest::::getCellRangeAddress2()",
      "30": "MergedRegionTest::::getCellRangeAddress2()",
      "31": "MergedRegionTest::::getCellRangeAddress2()",
      "32": "MergedRegionTest::::getCellRangeAddress2()",
      "33": "MergedRegionTest::::getCellRangeAddress2()",
      "34": "MergedRegionTest::::getCellRangeAddress2()",
      "35": "MergedRegionTest::::getCellRangeAddress2()",
      "36": "MergedRegionTest::::getCellRangeAddress2()",
      "37": "MergedRegionTest::::getCellRangeAddress2()",
      "38": "MergedRegionTest::::getCellRangeAddress2()",
      "39": "MergedRegionTest::::getCellRangeAddress2()",
      "40": "MergedRegionTest::::getCellRangeAddress2()",
      "41": "MergedRegionTest::::getCellRangeAddress2()",
      "42": "MergedRegionTest::::getCellRangeAddress2()",
      "44": "MergedRegionTest::::getCellSpan1()",
      "45": "MergedRegionTest::::getCellSpan1()",
      "46": "MergedRegionTest::::getCellSpan1()",
      "47": "MergedRegionTest::::getCellSpan1()",
      "48": "MergedRegionTest::::getCellSpan1()",
      "49": "MergedRegionTest::::getCellSpan1()",
      "50": "MergedRegionTest::::getCellSpan1()",
      "52": "MergedRegionTest::::getCellSpan2()",
      "53": "MergedRegionTest::::getCellSpan2()",
      "54": "MergedRegionTest::::getCellSpan2()",
      "55": "MergedRegionTest::::getCellSpan2()",
      "56": "MergedRegionTest::::getCellSpan2()",
      "57": "MergedRegionTest::::getCellSpan2()",
      "58": "MergedRegionTest::::getCellSpan2()",
      "59": "MergedRegionTest::::getCellSpan2()",
      "60": "MergedRegionTest::::getCellSpan2()",
      "61": "MergedRegionTest::::getCellSpan2()",
      "62": "MergedRegionTest::::getCellSpan2()",
      "63": "MergedRegionTest::::getCellSpan2()",
      "64": "MergedRegionTest::::getCellSpan2()",
      "65": "MergedRegionTest::::getCellSpan2()",
      "66": "MergedRegionTest::::getCellSpan2()",
      "67": "MergedRegionTest::::getCellSpan2()",
      "69": "MergedRegionTest::::isInMergedRegionAndNotFirst1()",
      "70": "MergedRegionTest::::isInMergedRegionAndNotFirst1()",
      "71": "MergedRegionTest::::isInMergedRegionAndNotFirst1()",
      "72": "MergedRegionTest::::isInMergedRegionAndNotFirst1()",
      "73": "MergedRegionTest::::isInMergedRegionAndNotFirst1()",
      "74": "MergedRegionTest::::isInMergedRegionAndNotFirst1()",
      "75": "MergedRegionTest::::isInMergedRegionAndNotFirst1()",
      "76": "MergedRegionTest::::isInMergedRegionAndNotFirst1()",
      "77": "MergedRegionTest::::isInMergedRegionAndNotFirst1()",
      "78": "MergedRegionTest::::isInMergedRegionAndNotFirst1()",
      "79": "MergedRegionTest::::isInMergedRegionAndNotFirst1()",
      "80": "MergedRegionTest::::isInMergedRegionAndNotFirst1()",
      "81": "MergedRegionTest::::isInMergedRegionAndNotFirst1()",
      "82": "MergedRegionTest::::isInMergedRegionAndNotFirst1()",
      "83": "MergedRegionTest::::isInMergedRegionAndNotFirst1()",
      "84": "MergedRegionTest::::isInMergedRegionAndNotFirst1()",
      "87": "MergedRegionTest::::unHasMergedRegion()",
      "88": "MergedRegionTest::::unHasMergedRegion()",
      "89": "MergedRegionTest::::unHasMergedRegion()",
      "90": "MergedRegionTest::::unHasMergedRegion()",
      "91": "MergedRegionTest::::unHasMergedRegion()",
      "92": "MergedRegionTest::::unHasMergedRegion()",
      "93": "MergedRegionTest::::unHasMergedRegion()",
      "94": "MergedRegionTest::::unHasMergedRegion()",
      "95": "MergedRegionTest::::unHasMergedRegion()",
      "96": "MergedRegionTest::::unHasMergedRegion()",
      "97": "MergedRegionTest::::unHasMergedRegion()",
      "98": "MergedRegionTest::::unHasMergedRegion()",
      "99": "MergedRegionTest::::unHasMergedRegion()",
      "100": "MergedRegionTest::::unHasMergedRegion()",
      "101": "MergedRegionTest::::unHasMergedRegion()",
      "102": "MergedRegionTest::::unHasMergedRegion()",
      "103": "MergedRegionTest::::unHasMergedRegion()",
      "104": "MergedRegionTest::::unHasMergedRegion()"
    },
    "tests": [
      {
        "test_lines": [
          19,
          25
        ],
        "covered_lines": [
          35,
          36,
          37,
          44,
          54,
          55,
          56,
          57
        ]
      },
      {
        "test_lines": [
          27,
          42
        ],
        "covered_lines": [
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          54,
          55,
          56,
          57,
          60,
          61,
          62,
          64,
          65
        ]
      },
      {
        "test_lines": [
          44,
          50
        ],
        "covered_lines": [
          35,
          36,
          37,
          44,
          54,
          55,
          56,
          57,
          80,
          81,
          82
        ]
      },
      {
        "test_lines": [
          52,
          67
        ],
        "covered_lines": [
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          54,
          55,
          56,
          57,
          60,
          61,
          62,
          64,
          65,
          80,
          81,
          82,
          84,
          85,
          87
        ]
      },
      {
        "test_lines": [
          69,
          84
        ],
        "covered_lines": [
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          103,
          104,
          105,
          106,
          107,
          108,
          109,
          110,
          111,
          114,
          115,
          116
        ]
      },
      {
        "test_lines": [
          87,
          104
        ],
        "covered_lines": [
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          54,
          55,
          56,
          57,
          60,
          61,
          62,
          64,
          65,
          129,
          130,
          131,
          133,
          134,
          135,
          136,
          137,
          140,
          141,
          143
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/zouzhiy-excel/src/main/java/io/github/zouzhiy/excel/metadata/Configuration.java": {
    "class_content": [
      "/*\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package io.github.zouzhiy.excel.metadata;\n",
      "\n",
      "import io.github.zouzhiy.excel.cellstyle.registry.RowStyleReadRegistry;\n",
      "import io.github.zouzhiy.excel.handler.CellHandlerRegistry;\n",
      "import io.github.zouzhiy.excel.ibatis.reflection.DefaultReflectorFactory;\n",
      "import io.github.zouzhiy.excel.ibatis.reflection.MetaClass;\n",
      "import io.github.zouzhiy.excel.ibatis.reflection.MetaObject;\n",
      "import io.github.zouzhiy.excel.ibatis.reflection.ReflectorFactory;\n",
      "import io.github.zouzhiy.excel.ibatis.reflection.factory.DefaultObjectFactory;\n",
      "import io.github.zouzhiy.excel.ibatis.reflection.factory.ObjectFactory;\n",
      "import io.github.zouzhiy.excel.ibatis.reflection.wrapper.DefaultObjectWrapperFactory;\n",
      "import io.github.zouzhiy.excel.ibatis.reflection.wrapper.ObjectWrapperFactory;\n",
      "import io.github.zouzhiy.excel.parsing.ExcelAnnotationParse;\n",
      "import io.github.zouzhiy.excel.read.registry.RowFootReadRegistry;\n",
      "import io.github.zouzhiy.excel.read.registry.RowHeadReadRegistry;\n",
      "import io.github.zouzhiy.excel.read.registry.RowTitleReadRegistry;\n",
      "import io.github.zouzhiy.excel.write.registry.RowFootWriteRegistry;\n",
      "import io.github.zouzhiy.excel.write.registry.RowHeadWriteRegistry;\n",
      "import io.github.zouzhiy.excel.write.registry.RowTitleWriteRegistry;\n",
      "import lombok.Getter;\n",
      "import lombok.Setter;\n",
      "\n",
      "/**\n",
      " * \u5168\u5c40\u914d\u7f6e\u4fe1\u606f\n",
      " *\n",
      " * @author zouzhiy\n",
      " * @since 2022/7/2\n",
      " */\n",
      "public class Configuration {\n",
      "    /**\n",
      "     * {@link io.github.zouzhiy.excel.handler.CellHandler} \u6ce8\u518c\u67e5\u8be2\u7ba1\u7406\u5668\n",
      "     */\n",
      "    @Getter\n",
      "    private final CellHandlerRegistry cellHandlerRegistry = new CellHandlerRegistry(this);\n",
      "    /**\n",
      "     * {@link io.github.zouzhiy.excel.write.RowTitleWrite} \u6ce8\u518c\u67e5\u8be2\u7ba1\u7406\u5668\n",
      "     */\n",
      "    @Getter\n",
      "    private final RowTitleWriteRegistry rowTitleWriteRegistry = new RowTitleWriteRegistry(this);\n",
      "    /**\n",
      "     * {@link io.github.zouzhiy.excel.write.RowHeadWrite} \u6ce8\u518c\u67e5\u8be2\u7ba1\u7406\u5668\n",
      "     */\n",
      "    @Getter\n",
      "    private final RowHeadWriteRegistry rowHeadWriteRegistry = new RowHeadWriteRegistry(this);\n",
      "    /**\n",
      "     * {@link io.github.zouzhiy.excel.write.RowFootWrite} \u6ce8\u518c\u67e5\u8be2\u7ba1\u7406\u5668\n",
      "     */\n",
      "    @Getter\n",
      "    private final RowFootWriteRegistry rowFootWriteRegistry = new RowFootWriteRegistry(this);\n",
      "    /**\n",
      "     * {@link io.github.zouzhiy.excel.read.RowTitleRead} \u6ce8\u518c\u67e5\u8be2\u7ba1\u7406\u5668\n",
      "     */\n",
      "    @Getter\n",
      "    private final RowTitleReadRegistry rowTitleReadRegistry = new RowTitleReadRegistry(this);\n",
      "    /**\n",
      "     * {@link io.github.zouzhiy.excel.read.RowHeadRead} \u6ce8\u518c\u67e5\u8be2\u7ba1\u7406\u5668\n",
      "     */\n",
      "    @Getter\n",
      "    private final RowHeadReadRegistry rowHeadReadRegistry = new RowHeadReadRegistry(this);\n",
      "\n",
      "    /**\n",
      "     * {@link io.github.zouzhiy.excel.read.RowFootRead} \u6ce8\u518c\u67e5\u8be2\u7ba1\u7406\u5668\n",
      "     */\n",
      "    @Getter\n",
      "    private final RowFootReadRegistry rowFootReadRegistry = new RowFootReadRegistry(this);\n",
      "    /**\n",
      "     * {@link io.github.zouzhiy.excel.cellstyle.RowStyleRead} \u6ce8\u518c\u67e5\u8be2\u7ba1\u7406\u5668\n",
      "     */\n",
      "    @Getter\n",
      "    private final RowStyleReadRegistry rowStyleReadRegistry = new RowStyleReadRegistry(this);\n",
      "    /**\n",
      "     * \u6ce8\u89e3\u914d\u7f6e\u89e3\u6790\u5668\n",
      "     */\n",
      "    @Getter\n",
      "    private final ExcelAnnotationParse excelAnnotationParse = new ExcelAnnotationParse(this);\n",
      "    /**\n",
      "     * {@link io.github.zouzhiy.excel.ibatis.reflection.Reflector} \u521b\u5efa\u5de5\u5382\uff0c\u63d0\u4f9b\u7f13\u5b58\u7684\u80fd\u529b\n",
      "     */\n",
      "    @Getter\n",
      "    @Setter\n",
      "    private ReflectorFactory reflectorFactory = new DefaultReflectorFactory();\n",
      "\n",
      "    @Getter\n",
      "    @Setter\n",
      "    private ObjectFactory objectFactory = new DefaultObjectFactory();\n",
      "\n",
      "    @Getter\n",
      "    @Setter\n",
      "    private ObjectWrapperFactory objectWrapperFactory = new DefaultObjectWrapperFactory();\n",
      "\n",
      "    public MetaObject newMetaObject(Object object) {\n",
      "        return MetaObject.forObject(object, objectFactory, objectWrapperFactory, reflectorFactory);\n",
      "    }\n",
      "\n",
      "    public MetaClass newMetaClazz(Class<?> clazz) {\n",
      "        return MetaClass.forClass(clazz, reflectorFactory);\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package io.github.zouzhiy.excel.metadata;\n",
      "\n",
      "import io.github.zouzhiy.excel.ibatis.reflection.MetaClass;\n",
      "import io.github.zouzhiy.excel.ibatis.reflection.MetaObject;\n",
      "import io.github.zouzhiy.excel.support.metadata.DemoDefault;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.mockito.MockedStatic;\n",
      "import org.mockito.Mockito;\n",
      "\n",
      "\n",
      "class ConfigurationTest {\n",
      "\n",
      "    @Test\n",
      "    void newMetaObject() {\n",
      "        Configuration configuration = new Configuration();\n",
      "        MockedStatic<MetaObject> metaObjectMockedStatic = Mockito.mockStatic(MetaObject.class);\n",
      "        DemoDefault demoDefault = new DemoDefault();\n",
      "        configuration.newMetaObject(demoDefault);\n",
      "\n",
      "        metaObjectMockedStatic.verify(() -> MetaObject.forObject(demoDefault, configuration.getObjectFactory(), configuration.getObjectWrapperFactory(), configuration.getReflectorFactory()), Mockito.times(1));\n",
      "        metaObjectMockedStatic.close();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void newMetaClazz() {\n",
      "        Configuration configuration = new Configuration();\n",
      "        MockedStatic<MetaClass> metaObjectMockedStatic = Mockito.mockStatic(MetaClass.class);\n",
      "        Class<DemoDefault> demoDefaultClass = DemoDefault.class;\n",
      "        configuration.newMetaClazz(demoDefaultClass);\n",
      "\n",
      "        metaObjectMockedStatic.verify(() -> MetaClass.forClass(demoDefaultClass, configuration.getReflectorFactory()), Mockito.times(1));\n",
      "        metaObjectMockedStatic.close();\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "Configuration::::newMetaObject(java.lang.Object)": [
        104,
        106
      ],
      "Configuration::::newMetaClazz(java.lang.Class<?>)": [
        108,
        110
      ]
    },
    "test_method_lines_dic": {
      "ConfigurationTest::::newMetaObject()": [
        13,
        22
      ],
      "ConfigurationTest::::newMetaClazz()": [
        24,
        33
      ]
    },
    "reverse_method_lines_dic": {
      "104": "Configuration::::newMetaObject(java.lang.Object)",
      "105": "Configuration::::newMetaObject(java.lang.Object)",
      "106": "Configuration::::newMetaObject(java.lang.Object)",
      "108": "Configuration::::newMetaClazz(java.lang.Class<?>)",
      "109": "Configuration::::newMetaClazz(java.lang.Class<?>)",
      "110": "Configuration::::newMetaClazz(java.lang.Class<?>)"
    },
    "test_reverse_method_lines_dic": {
      "13": "ConfigurationTest::::newMetaObject()",
      "14": "ConfigurationTest::::newMetaObject()",
      "15": "ConfigurationTest::::newMetaObject()",
      "16": "ConfigurationTest::::newMetaObject()",
      "17": "ConfigurationTest::::newMetaObject()",
      "18": "ConfigurationTest::::newMetaObject()",
      "19": "ConfigurationTest::::newMetaObject()",
      "20": "ConfigurationTest::::newMetaObject()",
      "21": "ConfigurationTest::::newMetaObject()",
      "22": "ConfigurationTest::::newMetaObject()",
      "24": "ConfigurationTest::::newMetaClazz()",
      "25": "ConfigurationTest::::newMetaClazz()",
      "26": "ConfigurationTest::::newMetaClazz()",
      "27": "ConfigurationTest::::newMetaClazz()",
      "28": "ConfigurationTest::::newMetaClazz()",
      "29": "ConfigurationTest::::newMetaClazz()",
      "30": "ConfigurationTest::::newMetaClazz()",
      "31": "ConfigurationTest::::newMetaClazz()",
      "32": "ConfigurationTest::::newMetaClazz()",
      "33": "ConfigurationTest::::newMetaClazz()"
    },
    "tests": [
      {
        "test_lines": [
          13,
          22
        ],
        "covered_lines": [
          42,
          46,
          51,
          56,
          61,
          66,
          71,
          77,
          82,
          87,
          92,
          96,
          100,
          105
        ]
      },
      {
        "test_lines": [
          24,
          33
        ],
        "covered_lines": [
          42,
          46,
          51,
          56,
          61,
          66,
          71,
          77,
          82,
          87,
          92,
          96,
          100,
          109
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/zouzhiy-excel/src/main/java/io/github/zouzhiy/excel/metadata/config/ExcelStyleConfig.java": {
    "class_content": [
      "/*\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package io.github.zouzhiy.excel.metadata.config;\n",
      "\n",
      "import io.github.zouzhiy.excel.annotation.ExcelStyle;\n",
      "import io.github.zouzhiy.excel.enums.StyleHorizontalAlignment;\n",
      "import io.github.zouzhiy.excel.enums.StyleVerticalAlignment;\n",
      "import lombok.Builder;\n",
      "import lombok.EqualsAndHashCode;\n",
      "import lombok.Getter;\n",
      "import lombok.ToString;\n",
      "import org.apache.poi.ss.usermodel.BorderStyle;\n",
      "import org.apache.poi.ss.usermodel.FillPatternType;\n",
      "\n",
      "/**\n",
      " * \u6837\u5f0f\u914d\u7f6e {@link io.github.zouzhiy.excel.annotation.ExcelFont}\n",
      " *\n",
      " * @author zouzhiy\n",
      " * @since 2022/7/2\n",
      " */\n",
      "@Getter\n",
      "@ToString\n",
      "@EqualsAndHashCode\n",
      "@Builder\n",
      "public class ExcelStyleConfig {\n",
      "\n",
      "    @Builder.Default\n",
      "    private final ExcelFontConfig font = ExcelFontConfig.getDefaultExcelFontConfigData();\n",
      "\n",
      "    @Builder.Default\n",
      "    private final boolean hidden = false;\n",
      "\n",
      "    @Builder.Default\n",
      "    private final boolean locked = false;\n",
      "\n",
      "    @Builder.Default\n",
      "    private final boolean quotePrefix = false;\n",
      "\n",
      "    @Builder.Default\n",
      "    private final StyleHorizontalAlignment horizontalAlignment = StyleHorizontalAlignment.GENERAL;\n",
      "\n",
      "    @Builder.Default\n",
      "    private final boolean wrapText = true;\n",
      "\n",
      "    @Builder.Default\n",
      "    private final StyleVerticalAlignment verticalAlignment = StyleVerticalAlignment.CENTER;\n",
      "\n",
      "    @Builder.Default\n",
      "    private final short rotation = 0;\n",
      "\n",
      "    @Builder.Default\n",
      "    private final short indent = -1;\n",
      "\n",
      "    @Builder.Default\n",
      "    private final BorderStyle borderLeft = BorderStyle.NONE;\n",
      "    @Builder.Default\n",
      "    private final BorderStyle borderRight = BorderStyle.NONE;\n",
      "    @Builder.Default\n",
      "    private final BorderStyle borderTop = BorderStyle.NONE;\n",
      "    @Builder.Default\n",
      "    private final BorderStyle borderBottom = BorderStyle.NONE;\n",
      "\n",
      "    @Builder.Default\n",
      "    private final short leftBorderColor = -1;\n",
      "    @Builder.Default\n",
      "    private final short rightBorderColor = -1;\n",
      "    @Builder.Default\n",
      "    private final short topBorderColor = -1;\n",
      "    @Builder.Default\n",
      "    private final short bottomBorderColor = -1;\n",
      "\n",
      "    @Builder.Default\n",
      "    private final FillPatternType fillPattern = FillPatternType.NO_FILL;\n",
      "\n",
      "    @Builder.Default\n",
      "    private final short fillBackgroundColor = -1;\n",
      "\n",
      "    @Builder.Default\n",
      "    private final short fillForegroundColor = -1;\n",
      "\n",
      "    @Builder.Default\n",
      "    private final boolean shrinkToFit = false;\n",
      "\n",
      "\n",
      "    public static ExcelStyleConfig getDefaultExcelStyleConfigTitle() {\n",
      "\n",
      "        return ExcelStyleConfig.builder()\n",
      "                .font(ExcelFontConfig.getDefaultExcelFontConfigTitle())\n",
      "                .horizontalAlignment(StyleHorizontalAlignment.CENTER)\n",
      "                .verticalAlignment(StyleVerticalAlignment.CENTER)\n",
      "                .build();\n",
      "    }\n",
      "\n",
      "    public static ExcelStyleConfig getDefaultExcelStyleConfigHead() {\n",
      "        return ExcelStyleConfig.builder()\n",
      "                .font(ExcelFontConfig.getDefaultExcelFontConfigHead())\n",
      "                .horizontalAlignment(StyleHorizontalAlignment.CENTER)\n",
      "                .verticalAlignment(StyleVerticalAlignment.CENTER)\n",
      "                .build();\n",
      "    }\n",
      "\n",
      "    public static ExcelStyleConfig getDefaultExcelStyleConfigData() {\n",
      "        return ExcelStyleConfig.builder()\n",
      "                .font(ExcelFontConfig.getDefaultExcelFontConfigData())\n",
      "                .horizontalAlignment(StyleHorizontalAlignment.GENERAL)\n",
      "                .verticalAlignment(StyleVerticalAlignment.CENTER)\n",
      "                .build();\n",
      "    }\n",
      "\n",
      "    public static ExcelStyleConfig buildByExcelStyle(ExcelStyle excelStyle) {\n",
      "        return ExcelStyleConfig.builder()\n",
      "                .font(ExcelFontConfig.buildByExcelFont(excelStyle.font()))\n",
      "                .hidden(excelStyle.hidden())\n",
      "                .locked(excelStyle.locked())\n",
      "                .quotePrefix(excelStyle.quotePrefix())\n",
      "                .horizontalAlignment(excelStyle.horizontalAlignment())\n",
      "                .wrapText(excelStyle.wrapText())\n",
      "                .verticalAlignment(excelStyle.verticalAlignment())\n",
      "                .rotation(excelStyle.rotation())\n",
      "                .indent(excelStyle.indent())\n",
      "                .borderLeft(excelStyle.borderLeft())\n",
      "                .borderRight(excelStyle.borderRight())\n",
      "                .borderTop(excelStyle.borderTop())\n",
      "                .borderBottom(excelStyle.borderBottom())\n",
      "                .leftBorderColor(excelStyle.leftBorderColor())\n",
      "                .rightBorderColor(excelStyle.rightBorderColor())\n",
      "                .topBorderColor(excelStyle.topBorderColor())\n",
      "                .bottomBorderColor(excelStyle.bottomBorderColor())\n",
      "                .fillPattern(excelStyle.fillPattern())\n",
      "                .fillBackgroundColor(excelStyle.fillBackgroundColor())\n",
      "                .fillForegroundColor(excelStyle.fillForegroundColor())\n",
      "                .shrinkToFit(excelStyle.shrinkToFit())\n",
      "                .build();\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package io.github.zouzhiy.excel.metadata.config;\n",
      "\n",
      "import io.github.zouzhiy.excel.annotation.ExcelFont;\n",
      "import io.github.zouzhiy.excel.annotation.ExcelStyle;\n",
      "import io.github.zouzhiy.excel.enums.StyleHorizontalAlignment;\n",
      "import io.github.zouzhiy.excel.enums.StyleVerticalAlignment;\n",
      "import org.apache.poi.ss.usermodel.BorderStyle;\n",
      "import org.apache.poi.ss.usermodel.FillPatternType;\n",
      "import org.junit.jupiter.api.Assertions;\n",
      "import org.junit.jupiter.api.RepeatedTest;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.mockito.Mockito;\n",
      "\n",
      "import java.util.Random;\n",
      "\n",
      "import static io.github.zouzhiy.excel.metadata.config.ExcelFontConfigTest.mockExcelFont;\n",
      "\n",
      "class ExcelStyleConfigTest {\n",
      "\n",
      "    private final Random random = new Random(System.currentTimeMillis());\n",
      "\n",
      "    static void mockExcelStyle(ExcelStyle excelStyle, Random random) {\n",
      "        Mockito.when(excelStyle.hidden()).thenReturn(random.nextBoolean());\n",
      "        Mockito.when(excelStyle.locked()).thenReturn(random.nextBoolean());\n",
      "        Mockito.when(excelStyle.quotePrefix()).thenReturn(random.nextBoolean());\n",
      "        Mockito.when(excelStyle.horizontalAlignment()).thenReturn(StyleHorizontalAlignment.values()[random.nextInt(StyleHorizontalAlignment.values().length)]);\n",
      "        Mockito.when(excelStyle.wrapText()).thenReturn(random.nextBoolean());\n",
      "        Mockito.when(excelStyle.verticalAlignment()).thenReturn(StyleVerticalAlignment.values()[random.nextInt(StyleVerticalAlignment.values().length)]);\n",
      "        Mockito.when(excelStyle.rotation()).thenReturn((short) random.nextInt(Short.MAX_VALUE));\n",
      "        Mockito.when(excelStyle.indent()).thenReturn((short) random.nextInt(Short.MAX_VALUE));\n",
      "        Mockito.when(excelStyle.borderLeft()).thenReturn(BorderStyle.values()[random.nextInt(BorderStyle.values().length)]);\n",
      "        Mockito.when(excelStyle.borderRight()).thenReturn(BorderStyle.values()[random.nextInt(BorderStyle.values().length)]);\n",
      "        Mockito.when(excelStyle.borderTop()).thenReturn(BorderStyle.values()[random.nextInt(BorderStyle.values().length)]);\n",
      "        Mockito.when(excelStyle.borderBottom()).thenReturn(BorderStyle.values()[random.nextInt(BorderStyle.values().length)]);\n",
      "        Mockito.when(excelStyle.leftBorderColor()).thenReturn((short) random.nextInt(Short.MAX_VALUE));\n",
      "        Mockito.when(excelStyle.rightBorderColor()).thenReturn((short) random.nextInt(Short.MAX_VALUE));\n",
      "        Mockito.when(excelStyle.topBorderColor()).thenReturn((short) random.nextInt(Short.MAX_VALUE));\n",
      "        Mockito.when(excelStyle.bottomBorderColor()).thenReturn((short) random.nextInt(Short.MAX_VALUE));\n",
      "        Mockito.when(excelStyle.fillPattern()).thenReturn(FillPatternType.values()[random.nextInt(FillPatternType.values().length)]);\n",
      "        Mockito.when(excelStyle.fillBackgroundColor()).thenReturn((short) random.nextInt(Short.MAX_VALUE));\n",
      "        Mockito.when(excelStyle.fillForegroundColor()).thenReturn((short) random.nextInt(Short.MAX_VALUE));\n",
      "        Mockito.when(excelStyle.shrinkToFit()).thenReturn(random.nextBoolean());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getDefaultExcelStyleConfig() {\n",
      "        ExcelStyleConfig excelStyleConfig = ExcelStyleConfig.builder().build();\n",
      "\n",
      "        Assertions.assertEquals(excelStyleConfig.getFont(), ExcelFontConfig.getDefaultExcelFontConfigData());\n",
      "        Assertions.assertFalse(excelStyleConfig.isHidden());\n",
      "        Assertions.assertFalse(excelStyleConfig.isLocked());\n",
      "        Assertions.assertFalse(excelStyleConfig.isQuotePrefix());\n",
      "        Assertions.assertEquals(excelStyleConfig.getHorizontalAlignment(), StyleHorizontalAlignment.GENERAL);\n",
      "        Assertions.assertTrue(excelStyleConfig.isWrapText());\n",
      "        Assertions.assertEquals(excelStyleConfig.getVerticalAlignment(), StyleVerticalAlignment.CENTER);\n",
      "        Assertions.assertEquals(excelStyleConfig.getRotation(), 0);\n",
      "        Assertions.assertEquals(excelStyleConfig.getIndent(), -1);\n",
      "        Assertions.assertEquals(excelStyleConfig.getBorderLeft(), BorderStyle.NONE);\n",
      "        Assertions.assertEquals(excelStyleConfig.getBorderRight(), BorderStyle.NONE);\n",
      "        Assertions.assertEquals(excelStyleConfig.getBorderTop(), BorderStyle.NONE);\n",
      "        Assertions.assertEquals(excelStyleConfig.getBorderBottom(), BorderStyle.NONE);\n",
      "        Assertions.assertEquals(excelStyleConfig.getLeftBorderColor(), -1);\n",
      "        Assertions.assertEquals(excelStyleConfig.getRightBorderColor(), -1);\n",
      "        Assertions.assertEquals(excelStyleConfig.getTopBorderColor(), -1);\n",
      "        Assertions.assertEquals(excelStyleConfig.getBottomBorderColor(), -1);\n",
      "        Assertions.assertEquals(excelStyleConfig.getFillPattern(), FillPatternType.NO_FILL);\n",
      "        Assertions.assertEquals(excelStyleConfig.getFillBackgroundColor(), -1);\n",
      "        Assertions.assertEquals(excelStyleConfig.getFillForegroundColor(), -1);\n",
      "        Assertions.assertFalse(excelStyleConfig.isShrinkToFit());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getDefaultExcelStyleConfigTitle() {\n",
      "        ExcelStyleConfig excelStyleConfig = ExcelStyleConfig.getDefaultExcelStyleConfigTitle();\n",
      "\n",
      "        Assertions.assertEquals(excelStyleConfig.getFont(), ExcelFontConfig.getDefaultExcelFontConfigTitle());\n",
      "        Assertions.assertFalse(excelStyleConfig.isHidden());\n",
      "        Assertions.assertFalse(excelStyleConfig.isLocked());\n",
      "        Assertions.assertFalse(excelStyleConfig.isQuotePrefix());\n",
      "        Assertions.assertEquals(excelStyleConfig.getHorizontalAlignment(), StyleHorizontalAlignment.CENTER);\n",
      "        Assertions.assertTrue(excelStyleConfig.isWrapText());\n",
      "        Assertions.assertEquals(excelStyleConfig.getVerticalAlignment(), StyleVerticalAlignment.CENTER);\n",
      "        Assertions.assertEquals(excelStyleConfig.getRotation(), 0);\n",
      "        Assertions.assertEquals(excelStyleConfig.getIndent(), -1);\n",
      "        Assertions.assertEquals(excelStyleConfig.getBorderLeft(), BorderStyle.NONE);\n",
      "        Assertions.assertEquals(excelStyleConfig.getBorderRight(), BorderStyle.NONE);\n",
      "        Assertions.assertEquals(excelStyleConfig.getBorderTop(), BorderStyle.NONE);\n",
      "        Assertions.assertEquals(excelStyleConfig.getBorderBottom(), BorderStyle.NONE);\n",
      "        Assertions.assertEquals(excelStyleConfig.getLeftBorderColor(), -1);\n",
      "        Assertions.assertEquals(excelStyleConfig.getRightBorderColor(), -1);\n",
      "        Assertions.assertEquals(excelStyleConfig.getTopBorderColor(), -1);\n",
      "        Assertions.assertEquals(excelStyleConfig.getBottomBorderColor(), -1);\n",
      "        Assertions.assertEquals(excelStyleConfig.getFillPattern(), FillPatternType.NO_FILL);\n",
      "        Assertions.assertEquals(excelStyleConfig.getFillBackgroundColor(), -1);\n",
      "        Assertions.assertEquals(excelStyleConfig.getFillForegroundColor(), -1);\n",
      "        Assertions.assertFalse(excelStyleConfig.isShrinkToFit());\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void getDefaultExcelStyleConfigHead() {\n",
      "        ExcelStyleConfig excelStyleConfig = ExcelStyleConfig.getDefaultExcelStyleConfigHead();\n",
      "\n",
      "        Assertions.assertEquals(excelStyleConfig.getFont(), ExcelFontConfig.getDefaultExcelFontConfigHead());\n",
      "        Assertions.assertFalse(excelStyleConfig.isHidden());\n",
      "        Assertions.assertFalse(excelStyleConfig.isLocked());\n",
      "        Assertions.assertFalse(excelStyleConfig.isQuotePrefix());\n",
      "        Assertions.assertEquals(excelStyleConfig.getHorizontalAlignment(), StyleHorizontalAlignment.CENTER);\n",
      "        Assertions.assertTrue(excelStyleConfig.isWrapText());\n",
      "        Assertions.assertEquals(excelStyleConfig.getVerticalAlignment(), StyleVerticalAlignment.CENTER);\n",
      "        Assertions.assertEquals(excelStyleConfig.getRotation(), 0);\n",
      "        Assertions.assertEquals(excelStyleConfig.getIndent(), -1);\n",
      "        Assertions.assertEquals(excelStyleConfig.getBorderLeft(), BorderStyle.NONE);\n",
      "        Assertions.assertEquals(excelStyleConfig.getBorderRight(), BorderStyle.NONE);\n",
      "        Assertions.assertEquals(excelStyleConfig.getBorderTop(), BorderStyle.NONE);\n",
      "        Assertions.assertEquals(excelStyleConfig.getBorderBottom(), BorderStyle.NONE);\n",
      "        Assertions.assertEquals(excelStyleConfig.getLeftBorderColor(), -1);\n",
      "        Assertions.assertEquals(excelStyleConfig.getRightBorderColor(), -1);\n",
      "        Assertions.assertEquals(excelStyleConfig.getTopBorderColor(), -1);\n",
      "        Assertions.assertEquals(excelStyleConfig.getBottomBorderColor(), -1);\n",
      "        Assertions.assertEquals(excelStyleConfig.getFillPattern(), FillPatternType.NO_FILL);\n",
      "        Assertions.assertEquals(excelStyleConfig.getFillBackgroundColor(), -1);\n",
      "        Assertions.assertEquals(excelStyleConfig.getFillForegroundColor(), -1);\n",
      "        Assertions.assertFalse(excelStyleConfig.isShrinkToFit());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getDefaultExcelStyleConfigData() {\n",
      "        ExcelStyleConfig excelStyleConfig = ExcelStyleConfig.getDefaultExcelStyleConfigData();\n",
      "\n",
      "        Assertions.assertEquals(excelStyleConfig.getFont(), ExcelFontConfig.getDefaultExcelFontConfigData());\n",
      "        Assertions.assertFalse(excelStyleConfig.isHidden());\n",
      "        Assertions.assertFalse(excelStyleConfig.isLocked());\n",
      "        Assertions.assertFalse(excelStyleConfig.isQuotePrefix());\n",
      "        Assertions.assertEquals(excelStyleConfig.getHorizontalAlignment(), StyleHorizontalAlignment.GENERAL);\n",
      "        Assertions.assertTrue(excelStyleConfig.isWrapText());\n",
      "        Assertions.assertEquals(excelStyleConfig.getVerticalAlignment(), StyleVerticalAlignment.CENTER);\n",
      "        Assertions.assertEquals(excelStyleConfig.getRotation(), 0);\n",
      "        Assertions.assertEquals(excelStyleConfig.getIndent(), -1);\n",
      "        Assertions.assertEquals(excelStyleConfig.getBorderLeft(), BorderStyle.NONE);\n",
      "        Assertions.assertEquals(excelStyleConfig.getBorderRight(), BorderStyle.NONE);\n",
      "        Assertions.assertEquals(excelStyleConfig.getBorderTop(), BorderStyle.NONE);\n",
      "        Assertions.assertEquals(excelStyleConfig.getBorderBottom(), BorderStyle.NONE);\n",
      "        Assertions.assertEquals(excelStyleConfig.getLeftBorderColor(), -1);\n",
      "        Assertions.assertEquals(excelStyleConfig.getRightBorderColor(), -1);\n",
      "        Assertions.assertEquals(excelStyleConfig.getTopBorderColor(), -1);\n",
      "        Assertions.assertEquals(excelStyleConfig.getBottomBorderColor(), -1);\n",
      "        Assertions.assertEquals(excelStyleConfig.getFillPattern(), FillPatternType.NO_FILL);\n",
      "        Assertions.assertEquals(excelStyleConfig.getFillBackgroundColor(), -1);\n",
      "        Assertions.assertEquals(excelStyleConfig.getFillForegroundColor(), -1);\n",
      "        Assertions.assertFalse(excelStyleConfig.isShrinkToFit());\n",
      "    }\n",
      "\n",
      "    @RepeatedTest(10)\n",
      "    void buildByExcelStyle() {\n",
      "        ExcelStyle excelStyle = Mockito.mock(ExcelStyle.class);\n",
      "\n",
      "        ExcelFont excelFont = Mockito.mock(ExcelFont.class);\n",
      "        mockExcelFont(excelFont, random);\n",
      "\n",
      "        Mockito.when(excelStyle.font()).thenReturn(excelFont);\n",
      "        mockExcelStyle(excelStyle, random);\n",
      "\n",
      "        ExcelStyleConfig excelStyleConfig = ExcelStyleConfig.buildByExcelStyle(excelStyle);\n",
      "\n",
      "        Assertions.assertEquals(excelStyleConfig.getFont(), ExcelFontConfig.buildByExcelFont(excelStyle.font()));\n",
      "        Assertions.assertEquals(excelStyleConfig.isHidden(), excelStyle.hidden());\n",
      "        Assertions.assertEquals(excelStyleConfig.isLocked(), excelStyle.locked());\n",
      "        Assertions.assertEquals(excelStyleConfig.isQuotePrefix(), excelStyle.quotePrefix());\n",
      "        Assertions.assertEquals(excelStyleConfig.getHorizontalAlignment(), excelStyle.horizontalAlignment());\n",
      "        Assertions.assertEquals(excelStyleConfig.isWrapText(), excelStyle.wrapText());\n",
      "        Assertions.assertEquals(excelStyleConfig.getVerticalAlignment(), excelStyle.verticalAlignment());\n",
      "        Assertions.assertEquals(excelStyleConfig.getRotation(), excelStyle.rotation());\n",
      "        Assertions.assertEquals(excelStyleConfig.getIndent(), excelStyle.indent());\n",
      "        Assertions.assertEquals(excelStyleConfig.getBorderLeft(), excelStyle.borderLeft());\n",
      "        Assertions.assertEquals(excelStyleConfig.getBorderRight(), excelStyle.borderRight());\n",
      "        Assertions.assertEquals(excelStyleConfig.getBorderTop(), excelStyle.borderTop());\n",
      "        Assertions.assertEquals(excelStyleConfig.getBorderBottom(), excelStyle.borderBottom());\n",
      "        Assertions.assertEquals(excelStyleConfig.getLeftBorderColor(), excelStyle.leftBorderColor());\n",
      "        Assertions.assertEquals(excelStyleConfig.getRightBorderColor(), excelStyle.rightBorderColor());\n",
      "        Assertions.assertEquals(excelStyleConfig.getTopBorderColor(), excelStyle.topBorderColor());\n",
      "        Assertions.assertEquals(excelStyleConfig.getBottomBorderColor(), excelStyle.bottomBorderColor());\n",
      "        Assertions.assertEquals(excelStyleConfig.getFillPattern(), excelStyle.fillPattern());\n",
      "        Assertions.assertEquals(excelStyleConfig.getFillBackgroundColor(), excelStyle.fillBackgroundColor());\n",
      "        Assertions.assertEquals(excelStyleConfig.getFillForegroundColor(), excelStyle.fillForegroundColor());\n",
      "        Assertions.assertEquals(excelStyleConfig.isShrinkToFit(), excelStyle.shrinkToFit());\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "ExcelStyleConfig::::getDefaultExcelStyleConfigTitle()": [
        96,
        103
      ],
      "ExcelStyleConfig::::getDefaultExcelStyleConfigHead()": [
        105,
        111
      ],
      "ExcelStyleConfig::::getDefaultExcelStyleConfigData()": [
        113,
        119
      ],
      "ExcelStyleConfig::::buildByExcelStyle(io.github.zouzhiy.excel.annotation.ExcelStyle)": [
        121,
        145
      ]
    },
    "test_method_lines_dic": {
      "ExcelStyleConfigTest::::getDefaultExcelStyleConfig()": [
        45,
        70
      ],
      "ExcelStyleConfigTest::::getDefaultExcelStyleConfigTitle()": [
        72,
        97
      ],
      "ExcelStyleConfigTest::::getDefaultExcelStyleConfigHead()": [
        100,
        125
      ],
      "ExcelStyleConfigTest::::getDefaultExcelStyleConfigData()": [
        127,
        152
      ],
      "ExcelStyleConfigTest::::buildByExcelStyle()": [
        154,
        187
      ]
    },
    "reverse_method_lines_dic": {
      "96": "ExcelStyleConfig::::getDefaultExcelStyleConfigTitle()",
      "97": "ExcelStyleConfig::::getDefaultExcelStyleConfigTitle()",
      "98": "ExcelStyleConfig::::getDefaultExcelStyleConfigTitle()",
      "99": "ExcelStyleConfig::::getDefaultExcelStyleConfigTitle()",
      "100": "ExcelStyleConfig::::getDefaultExcelStyleConfigTitle()",
      "101": "ExcelStyleConfig::::getDefaultExcelStyleConfigTitle()",
      "102": "ExcelStyleConfig::::getDefaultExcelStyleConfigTitle()",
      "103": "ExcelStyleConfig::::getDefaultExcelStyleConfigTitle()",
      "105": "ExcelStyleConfig::::getDefaultExcelStyleConfigHead()",
      "106": "ExcelStyleConfig::::getDefaultExcelStyleConfigHead()",
      "107": "ExcelStyleConfig::::getDefaultExcelStyleConfigHead()",
      "108": "ExcelStyleConfig::::getDefaultExcelStyleConfigHead()",
      "109": "ExcelStyleConfig::::getDefaultExcelStyleConfigHead()",
      "110": "ExcelStyleConfig::::getDefaultExcelStyleConfigHead()",
      "111": "ExcelStyleConfig::::getDefaultExcelStyleConfigHead()",
      "113": "ExcelStyleConfig::::getDefaultExcelStyleConfigData()",
      "114": "ExcelStyleConfig::::getDefaultExcelStyleConfigData()",
      "115": "ExcelStyleConfig::::getDefaultExcelStyleConfigData()",
      "116": "ExcelStyleConfig::::getDefaultExcelStyleConfigData()",
      "117": "ExcelStyleConfig::::getDefaultExcelStyleConfigData()",
      "118": "ExcelStyleConfig::::getDefaultExcelStyleConfigData()",
      "119": "ExcelStyleConfig::::getDefaultExcelStyleConfigData()",
      "121": "ExcelStyleConfig::::buildByExcelStyle(io.github.zouzhiy.excel.annotation.ExcelStyle)",
      "122": "ExcelStyleConfig::::buildByExcelStyle(io.github.zouzhiy.excel.annotation.ExcelStyle)",
      "123": "ExcelStyleConfig::::buildByExcelStyle(io.github.zouzhiy.excel.annotation.ExcelStyle)",
      "124": "ExcelStyleConfig::::buildByExcelStyle(io.github.zouzhiy.excel.annotation.ExcelStyle)",
      "125": "ExcelStyleConfig::::buildByExcelStyle(io.github.zouzhiy.excel.annotation.ExcelStyle)",
      "126": "ExcelStyleConfig::::buildByExcelStyle(io.github.zouzhiy.excel.annotation.ExcelStyle)",
      "127": "ExcelStyleConfig::::buildByExcelStyle(io.github.zouzhiy.excel.annotation.ExcelStyle)",
      "128": "ExcelStyleConfig::::buildByExcelStyle(io.github.zouzhiy.excel.annotation.ExcelStyle)",
      "129": "ExcelStyleConfig::::buildByExcelStyle(io.github.zouzhiy.excel.annotation.ExcelStyle)",
      "130": "ExcelStyleConfig::::buildByExcelStyle(io.github.zouzhiy.excel.annotation.ExcelStyle)",
      "131": "ExcelStyleConfig::::buildByExcelStyle(io.github.zouzhiy.excel.annotation.ExcelStyle)",
      "132": "ExcelStyleConfig::::buildByExcelStyle(io.github.zouzhiy.excel.annotation.ExcelStyle)",
      "133": "ExcelStyleConfig::::buildByExcelStyle(io.github.zouzhiy.excel.annotation.ExcelStyle)",
      "134": "ExcelStyleConfig::::buildByExcelStyle(io.github.zouzhiy.excel.annotation.ExcelStyle)",
      "135": "ExcelStyleConfig::::buildByExcelStyle(io.github.zouzhiy.excel.annotation.ExcelStyle)",
      "136": "ExcelStyleConfig::::buildByExcelStyle(io.github.zouzhiy.excel.annotation.ExcelStyle)",
      "137": "ExcelStyleConfig::::buildByExcelStyle(io.github.zouzhiy.excel.annotation.ExcelStyle)",
      "138": "ExcelStyleConfig::::buildByExcelStyle(io.github.zouzhiy.excel.annotation.ExcelStyle)",
      "139": "ExcelStyleConfig::::buildByExcelStyle(io.github.zouzhiy.excel.annotation.ExcelStyle)",
      "140": "ExcelStyleConfig::::buildByExcelStyle(io.github.zouzhiy.excel.annotation.ExcelStyle)",
      "141": "ExcelStyleConfig::::buildByExcelStyle(io.github.zouzhiy.excel.annotation.ExcelStyle)",
      "142": "ExcelStyleConfig::::buildByExcelStyle(io.github.zouzhiy.excel.annotation.ExcelStyle)",
      "143": "ExcelStyleConfig::::buildByExcelStyle(io.github.zouzhiy.excel.annotation.ExcelStyle)",
      "144": "ExcelStyleConfig::::buildByExcelStyle(io.github.zouzhiy.excel.annotation.ExcelStyle)",
      "145": "ExcelStyleConfig::::buildByExcelStyle(io.github.zouzhiy.excel.annotation.ExcelStyle)"
    },
    "test_reverse_method_lines_dic": {
      "45": "ExcelStyleConfigTest::::getDefaultExcelStyleConfig()",
      "46": "ExcelStyleConfigTest::::getDefaultExcelStyleConfig()",
      "47": "ExcelStyleConfigTest::::getDefaultExcelStyleConfig()",
      "48": "ExcelStyleConfigTest::::getDefaultExcelStyleConfig()",
      "49": "ExcelStyleConfigTest::::getDefaultExcelStyleConfig()",
      "50": "ExcelStyleConfigTest::::getDefaultExcelStyleConfig()",
      "51": "ExcelStyleConfigTest::::getDefaultExcelStyleConfig()",
      "52": "ExcelStyleConfigTest::::getDefaultExcelStyleConfig()",
      "53": "ExcelStyleConfigTest::::getDefaultExcelStyleConfig()",
      "54": "ExcelStyleConfigTest::::getDefaultExcelStyleConfig()",
      "55": "ExcelStyleConfigTest::::getDefaultExcelStyleConfig()",
      "56": "ExcelStyleConfigTest::::getDefaultExcelStyleConfig()",
      "57": "ExcelStyleConfigTest::::getDefaultExcelStyleConfig()",
      "58": "ExcelStyleConfigTest::::getDefaultExcelStyleConfig()",
      "59": "ExcelStyleConfigTest::::getDefaultExcelStyleConfig()",
      "60": "ExcelStyleConfigTest::::getDefaultExcelStyleConfig()",
      "61": "ExcelStyleConfigTest::::getDefaultExcelStyleConfig()",
      "62": "ExcelStyleConfigTest::::getDefaultExcelStyleConfig()",
      "63": "ExcelStyleConfigTest::::getDefaultExcelStyleConfig()",
      "64": "ExcelStyleConfigTest::::getDefaultExcelStyleConfig()",
      "65": "ExcelStyleConfigTest::::getDefaultExcelStyleConfig()",
      "66": "ExcelStyleConfigTest::::getDefaultExcelStyleConfig()",
      "67": "ExcelStyleConfigTest::::getDefaultExcelStyleConfig()",
      "68": "ExcelStyleConfigTest::::getDefaultExcelStyleConfig()",
      "69": "ExcelStyleConfigTest::::getDefaultExcelStyleConfig()",
      "70": "ExcelStyleConfigTest::::getDefaultExcelStyleConfig()",
      "72": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigTitle()",
      "73": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigTitle()",
      "74": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigTitle()",
      "75": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigTitle()",
      "76": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigTitle()",
      "77": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigTitle()",
      "78": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigTitle()",
      "79": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigTitle()",
      "80": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigTitle()",
      "81": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigTitle()",
      "82": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigTitle()",
      "83": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigTitle()",
      "84": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigTitle()",
      "85": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigTitle()",
      "86": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigTitle()",
      "87": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigTitle()",
      "88": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigTitle()",
      "89": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigTitle()",
      "90": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigTitle()",
      "91": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigTitle()",
      "92": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigTitle()",
      "93": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigTitle()",
      "94": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigTitle()",
      "95": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigTitle()",
      "96": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigTitle()",
      "97": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigTitle()",
      "100": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigHead()",
      "101": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigHead()",
      "102": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigHead()",
      "103": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigHead()",
      "104": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigHead()",
      "105": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigHead()",
      "106": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigHead()",
      "107": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigHead()",
      "108": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigHead()",
      "109": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigHead()",
      "110": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigHead()",
      "111": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigHead()",
      "112": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigHead()",
      "113": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigHead()",
      "114": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigHead()",
      "115": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigHead()",
      "116": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigHead()",
      "117": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigHead()",
      "118": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigHead()",
      "119": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigHead()",
      "120": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigHead()",
      "121": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigHead()",
      "122": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigHead()",
      "123": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigHead()",
      "124": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigHead()",
      "125": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigHead()",
      "127": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigData()",
      "128": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigData()",
      "129": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigData()",
      "130": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigData()",
      "131": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigData()",
      "132": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigData()",
      "133": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigData()",
      "134": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigData()",
      "135": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigData()",
      "136": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigData()",
      "137": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigData()",
      "138": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigData()",
      "139": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigData()",
      "140": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigData()",
      "141": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigData()",
      "142": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigData()",
      "143": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigData()",
      "144": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigData()",
      "145": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigData()",
      "146": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigData()",
      "147": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigData()",
      "148": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigData()",
      "149": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigData()",
      "150": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigData()",
      "151": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigData()",
      "152": "ExcelStyleConfigTest::::getDefaultExcelStyleConfigData()",
      "154": "ExcelStyleConfigTest::::buildByExcelStyle()",
      "155": "ExcelStyleConfigTest::::buildByExcelStyle()",
      "156": "ExcelStyleConfigTest::::buildByExcelStyle()",
      "157": "ExcelStyleConfigTest::::buildByExcelStyle()",
      "158": "ExcelStyleConfigTest::::buildByExcelStyle()",
      "159": "ExcelStyleConfigTest::::buildByExcelStyle()",
      "160": "ExcelStyleConfigTest::::buildByExcelStyle()",
      "161": "ExcelStyleConfigTest::::buildByExcelStyle()",
      "162": "ExcelStyleConfigTest::::buildByExcelStyle()",
      "163": "ExcelStyleConfigTest::::buildByExcelStyle()",
      "164": "ExcelStyleConfigTest::::buildByExcelStyle()",
      "165": "ExcelStyleConfigTest::::buildByExcelStyle()",
      "166": "ExcelStyleConfigTest::::buildByExcelStyle()",
      "167": "ExcelStyleConfigTest::::buildByExcelStyle()",
      "168": "ExcelStyleConfigTest::::buildByExcelStyle()",
      "169": "ExcelStyleConfigTest::::buildByExcelStyle()",
      "170": "ExcelStyleConfigTest::::buildByExcelStyle()",
      "171": "ExcelStyleConfigTest::::buildByExcelStyle()",
      "172": "ExcelStyleConfigTest::::buildByExcelStyle()",
      "173": "ExcelStyleConfigTest::::buildByExcelStyle()",
      "174": "ExcelStyleConfigTest::::buildByExcelStyle()",
      "175": "ExcelStyleConfigTest::::buildByExcelStyle()",
      "176": "ExcelStyleConfigTest::::buildByExcelStyle()",
      "177": "ExcelStyleConfigTest::::buildByExcelStyle()",
      "178": "ExcelStyleConfigTest::::buildByExcelStyle()",
      "179": "ExcelStyleConfigTest::::buildByExcelStyle()",
      "180": "ExcelStyleConfigTest::::buildByExcelStyle()",
      "181": "ExcelStyleConfigTest::::buildByExcelStyle()",
      "182": "ExcelStyleConfigTest::::buildByExcelStyle()",
      "183": "ExcelStyleConfigTest::::buildByExcelStyle()",
      "184": "ExcelStyleConfigTest::::buildByExcelStyle()",
      "185": "ExcelStyleConfigTest::::buildByExcelStyle()",
      "186": "ExcelStyleConfigTest::::buildByExcelStyle()",
      "187": "ExcelStyleConfigTest::::buildByExcelStyle()"
    },
    "tests": [
      {
        "test_lines": [
          45,
          70
        ],
        "covered_lines": [
          35,
          39,
          42,
          45,
          48,
          51,
          54,
          57,
          60,
          63,
          66,
          68,
          70,
          72,
          75,
          77,
          79,
          81,
          84,
          87,
          90,
          93
        ]
      },
      {
        "test_lines": [
          72,
          97
        ],
        "covered_lines": [
          35,
          39,
          42,
          45,
          48,
          51,
          54,
          57,
          60,
          63,
          66,
          68,
          70,
          72,
          75,
          77,
          79,
          81,
          84,
          87,
          90,
          93,
          98,
          99,
          100,
          101,
          102
        ]
      },
      {
        "test_lines": [
          100,
          125
        ],
        "covered_lines": [
          35,
          39,
          42,
          45,
          48,
          51,
          54,
          57,
          60,
          63,
          66,
          68,
          70,
          72,
          75,
          77,
          79,
          81,
          84,
          87,
          90,
          93,
          106,
          107,
          108,
          109,
          110
        ]
      },
      {
        "test_lines": [
          127,
          152
        ],
        "covered_lines": [
          35,
          39,
          42,
          45,
          48,
          51,
          54,
          57,
          60,
          63,
          66,
          68,
          70,
          72,
          75,
          77,
          79,
          81,
          84,
          87,
          90,
          93,
          114,
          115,
          116,
          117,
          118
        ]
      },
      {
        "test_lines": [
          154,
          187
        ],
        "covered_lines": [
          35,
          39,
          42,
          45,
          48,
          51,
          54,
          57,
          60,
          63,
          66,
          68,
          70,
          72,
          75,
          77,
          79,
          81,
          84,
          87,
          90,
          93,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          133,
          134,
          135,
          136,
          137,
          138,
          139,
          140,
          141,
          142,
          143,
          144
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/zouzhiy-excel/src/main/java/io/github/zouzhiy/excel/metadata/config/ExcelClassConfig.java": {
    "class_content": [
      "/*\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package io.github.zouzhiy.excel.metadata.config;\n",
      "\n",
      "import io.github.zouzhiy.excel.annotation.ExcelClass;\n",
      "import io.github.zouzhiy.excel.cellstyle.RowStyleRead;\n",
      "import io.github.zouzhiy.excel.cellstyle.defaults.DefaultRowStyleRead;\n",
      "import io.github.zouzhiy.excel.read.RowFootRead;\n",
      "import io.github.zouzhiy.excel.read.RowHeadRead;\n",
      "import io.github.zouzhiy.excel.read.RowTitleRead;\n",
      "import io.github.zouzhiy.excel.read.defaults.DefaultRowFootRead;\n",
      "import io.github.zouzhiy.excel.read.defaults.DefaultRowHeadRead;\n",
      "import io.github.zouzhiy.excel.read.defaults.DefaultRowTitleRead;\n",
      "import io.github.zouzhiy.excel.write.RowFootWrite;\n",
      "import io.github.zouzhiy.excel.write.RowHeadWrite;\n",
      "import io.github.zouzhiy.excel.write.RowTitleWrite;\n",
      "import io.github.zouzhiy.excel.write.defaults.DefaultRowFootWrite;\n",
      "import io.github.zouzhiy.excel.write.defaults.DefaultRowHeadWrite;\n",
      "import io.github.zouzhiy.excel.write.defaults.DefaultRowTitleWrite;\n",
      "import lombok.Builder;\n",
      "import lombok.EqualsAndHashCode;\n",
      "import lombok.Getter;\n",
      "import lombok.ToString;\n",
      "\n",
      "import java.util.Collections;\n",
      "import java.util.List;\n",
      "\n",
      "/**\n",
      " * \u914d\u7f6e\u4fe1\u606f {@link io.github.zouzhiy.excel.annotation.ExcelClass}\n",
      " *\n",
      " * @author zouzhiy\n",
      " * @since 2022/7/2\n",
      " */\n",
      "@Getter\n",
      "@ToString\n",
      "@EqualsAndHashCode\n",
      "@Builder\n",
      "public class ExcelClassConfig {\n",
      "\n",
      "    @Builder.Default\n",
      "    private final Class<? extends RowTitleWrite> rowTitleWrite = DefaultRowTitleWrite.class;\n",
      "\n",
      "    @Builder.Default\n",
      "    private final Class<? extends RowHeadWrite> rowHeadWrite = DefaultRowHeadWrite.class;\n",
      "\n",
      "    @Builder.Default\n",
      "    private final Class<? extends RowFootWrite> rowFootWrite = DefaultRowFootWrite.class;\n",
      "\n",
      "    @Builder.Default\n",
      "    private final Class<? extends RowTitleRead> rowTitleRead = DefaultRowTitleRead.class;\n",
      "\n",
      "    @Builder.Default\n",
      "    private final Class<? extends RowHeadRead> rowHeadRead = DefaultRowHeadRead.class;\n",
      "\n",
      "    @Builder.Default\n",
      "    private final Class<? extends RowFootRead> rowFootRead = DefaultRowFootRead.class;\n",
      "\n",
      "    @Builder.Default\n",
      "    private final String titleFormat = \"@\";\n",
      "\n",
      "    @Builder.Default\n",
      "    private final ExcelStyleConfig titleStyle = ExcelStyleConfig.getDefaultExcelStyleConfigTitle();\n",
      "\n",
      "    @Builder.Default\n",
      "    private final Class<? extends RowStyleRead> rowStyleRead = DefaultRowStyleRead.class;\n",
      "    @Builder.Default\n",
      "    private final List<ExcelFieldConfig> itemList = Collections.emptyList();\n",
      "    @Builder.Default\n",
      "    private Boolean autoSizeColumn = false;\n",
      "\n",
      "    public static ExcelClassConfig getDefaultExcelClassConfig(List<ExcelFieldConfig> itemList) {\n",
      "        return ExcelClassConfig.builder()\n",
      "                .itemList(itemList)\n",
      "                .build();\n",
      "    }\n",
      "\n",
      "    public static ExcelClassConfig buildByExcelClass(ExcelClass excelClass, List<ExcelFieldConfig> excelFieldConfigList) {\n",
      "        return ExcelClassConfig.builder()\n",
      "                .rowTitleWrite(excelClass.rowTitleWrite())\n",
      "                .rowHeadWrite(excelClass.rowHeadWrite())\n",
      "                .rowFootWrite(excelClass.rowFootWrite())\n",
      "                .rowTitleRead(excelClass.rowTitleRead())\n",
      "                .rowHeadRead(excelClass.rowHeadRead())\n",
      "                .rowFootRead(excelClass.rowFootRead())\n",
      "                .titleStyle(ExcelStyleConfig.buildByExcelStyle(excelClass.titleStyle()))\n",
      "                .rowStyleRead(excelClass.rowStyleRead())\n",
      "                .titleFormat(excelClass.titleFormat())\n",
      "                .autoSizeColumn(excelClass.autoSizeColumn())\n",
      "                .itemList(excelFieldConfigList)\n",
      "                .build();\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package io.github.zouzhiy.excel.metadata.config;\n",
      "\n",
      "import io.github.zouzhiy.excel.annotation.ExcelClass;\n",
      "import io.github.zouzhiy.excel.annotation.ExcelFont;\n",
      "import io.github.zouzhiy.excel.annotation.ExcelStyle;\n",
      "import io.github.zouzhiy.excel.cellstyle.RowStyleRead;\n",
      "import io.github.zouzhiy.excel.cellstyle.defaults.DefaultRowStyleRead;\n",
      "import io.github.zouzhiy.excel.enums.FontTypeOffset;\n",
      "import io.github.zouzhiy.excel.enums.StyleHorizontalAlignment;\n",
      "import io.github.zouzhiy.excel.enums.StyleVerticalAlignment;\n",
      "import io.github.zouzhiy.excel.read.RowFootRead;\n",
      "import io.github.zouzhiy.excel.read.RowHeadRead;\n",
      "import io.github.zouzhiy.excel.read.RowTitleRead;\n",
      "import io.github.zouzhiy.excel.read.defaults.DefaultRowFootRead;\n",
      "import io.github.zouzhiy.excel.read.defaults.DefaultRowHeadRead;\n",
      "import io.github.zouzhiy.excel.read.defaults.DefaultRowTitleRead;\n",
      "import io.github.zouzhiy.excel.write.RowFootWrite;\n",
      "import io.github.zouzhiy.excel.write.RowHeadWrite;\n",
      "import io.github.zouzhiy.excel.write.RowTitleWrite;\n",
      "import io.github.zouzhiy.excel.write.defaults.DefaultRowFootWrite;\n",
      "import io.github.zouzhiy.excel.write.defaults.DefaultRowHeadWrite;\n",
      "import io.github.zouzhiy.excel.write.defaults.DefaultRowTitleWrite;\n",
      "import org.apache.poi.common.usermodel.fonts.FontCharset;\n",
      "import org.apache.poi.ss.usermodel.BorderStyle;\n",
      "import org.apache.poi.ss.usermodel.FillPatternType;\n",
      "import org.apache.poi.ss.usermodel.FontUnderline;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.mockito.Mockito;\n",
      "\n",
      "import java.util.Collections;\n",
      "import java.util.Random;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.assertEquals;\n",
      "import static org.junit.jupiter.api.Assertions.assertTrue;\n",
      "\n",
      "class ExcelClassConfigTest {\n",
      "\n",
      "    private final Random random = new Random(System.currentTimeMillis());\n",
      "\n",
      "    static void mockExcelClass(ExcelClass excelClass, ExcelStyle excelStyle, Random random) {\n",
      "        ExcelFont excelFont = Mockito.mock(ExcelFont.class);\n",
      "\n",
      "        Mockito.when(excelFont.fontName()).thenReturn(\"\" + random.nextDouble());\n",
      "        Mockito.when(excelFont.fontHeight()).thenReturn((short) random.nextInt(Short.MAX_VALUE));\n",
      "        Mockito.when(excelFont.fontHeightInPoints()).thenReturn((short) random.nextInt(Short.MAX_VALUE));\n",
      "        Mockito.when(excelFont.italic()).thenReturn(random.nextBoolean());\n",
      "        Mockito.when(excelFont.strikeout()).thenReturn(random.nextBoolean());\n",
      "        Mockito.when(excelFont.color()).thenReturn((short) random.nextInt(Short.MAX_VALUE));\n",
      "        Mockito.when(excelFont.typeOffset()).thenReturn(FontTypeOffset.values()[random.nextInt(FontTypeOffset.values().length)]);\n",
      "        Mockito.when(excelFont.underline()).thenReturn(FontUnderline.values()[random.nextInt(FontUnderline.values().length)]);\n",
      "        Mockito.when(excelFont.charset()).thenReturn(FontCharset.values()[random.nextInt(FontCharset.values().length)]);\n",
      "        Mockito.when(excelFont.bold()).thenReturn(random.nextBoolean());\n",
      "\n",
      "        Mockito.when(excelStyle.font()).thenReturn(excelFont);\n",
      "        Mockito.when(excelStyle.hidden()).thenReturn(random.nextBoolean());\n",
      "        Mockito.when(excelStyle.locked()).thenReturn(random.nextBoolean());\n",
      "        Mockito.when(excelStyle.quotePrefix()).thenReturn(random.nextBoolean());\n",
      "        Mockito.when(excelStyle.horizontalAlignment()).thenReturn(StyleHorizontalAlignment.values()[random.nextInt(StyleHorizontalAlignment.values().length)]);\n",
      "        Mockito.when(excelStyle.wrapText()).thenReturn(random.nextBoolean());\n",
      "        Mockito.when(excelStyle.verticalAlignment()).thenReturn(StyleVerticalAlignment.values()[random.nextInt(StyleVerticalAlignment.values().length)]);\n",
      "        Mockito.when(excelStyle.rotation()).thenReturn((short) random.nextInt(Short.MAX_VALUE));\n",
      "        Mockito.when(excelStyle.indent()).thenReturn((short) random.nextInt(Short.MAX_VALUE));\n",
      "        Mockito.when(excelStyle.borderLeft()).thenReturn(BorderStyle.values()[random.nextInt(BorderStyle.values().length)]);\n",
      "        Mockito.when(excelStyle.borderRight()).thenReturn(BorderStyle.values()[random.nextInt(BorderStyle.values().length)]);\n",
      "        Mockito.when(excelStyle.borderTop()).thenReturn(BorderStyle.values()[random.nextInt(BorderStyle.values().length)]);\n",
      "        Mockito.when(excelStyle.borderBottom()).thenReturn(BorderStyle.values()[random.nextInt(BorderStyle.values().length)]);\n",
      "        Mockito.when(excelStyle.leftBorderColor()).thenReturn((short) random.nextInt(Short.MAX_VALUE));\n",
      "        Mockito.when(excelStyle.rightBorderColor()).thenReturn((short) random.nextInt(Short.MAX_VALUE));\n",
      "        Mockito.when(excelStyle.topBorderColor()).thenReturn((short) random.nextInt(Short.MAX_VALUE));\n",
      "        Mockito.when(excelStyle.bottomBorderColor()).thenReturn((short) random.nextInt(Short.MAX_VALUE));\n",
      "        Mockito.when(excelStyle.fillPattern()).thenReturn(FillPatternType.values()[random.nextInt(FillPatternType.values().length)]);\n",
      "        Mockito.when(excelStyle.fillBackgroundColor()).thenReturn((short) random.nextInt(Short.MAX_VALUE));\n",
      "        Mockito.when(excelStyle.fillForegroundColor()).thenReturn((short) random.nextInt(Short.MAX_VALUE));\n",
      "        Mockito.when(excelStyle.shrinkToFit()).thenReturn(random.nextBoolean());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getDefaultExcelClassConfig() {\n",
      "        ExcelClassConfig excelClassConfig = ExcelClassConfig.builder().build();\n",
      "\n",
      "        assertEquals(excelClassConfig.getRowTitleWrite(), DefaultRowTitleWrite.class);\n",
      "        assertEquals(excelClassConfig.getRowHeadWrite(), DefaultRowHeadWrite.class);\n",
      "        assertEquals(excelClassConfig.getRowFootWrite(), DefaultRowFootWrite.class);\n",
      "        assertEquals(excelClassConfig.getRowTitleRead(), DefaultRowTitleRead.class);\n",
      "        assertEquals(excelClassConfig.getRowHeadRead(), DefaultRowHeadRead.class);\n",
      "        assertEquals(excelClassConfig.getRowFootRead(), DefaultRowFootRead.class);\n",
      "        assertEquals(excelClassConfig.getTitleFormat(), \"@\");\n",
      "        assertEquals(excelClassConfig.getTitleStyle(), ExcelStyleConfig.getDefaultExcelStyleConfigTitle());\n",
      "        assertEquals(excelClassConfig.getRowStyleRead(), DefaultRowStyleRead.class);\n",
      "        assertEquals(excelClassConfig.getAutoSizeColumn(), false);\n",
      "        assertTrue(excelClassConfig.getItemList().isEmpty());\n",
      "\n",
      "        assertEquals(excelClassConfig.getItemList().getClass(), Collections.emptyList().getClass());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getDefaultExcelClassConfigEmptyList() {\n",
      "        ExcelClassConfig excelClassConfig = ExcelClassConfig.getDefaultExcelClassConfig(Collections.emptyList());\n",
      "\n",
      "        assertEquals(excelClassConfig.getRowTitleWrite(), DefaultRowTitleWrite.class);\n",
      "        assertEquals(excelClassConfig.getRowHeadWrite(), DefaultRowHeadWrite.class);\n",
      "        assertEquals(excelClassConfig.getRowFootWrite(), DefaultRowFootWrite.class);\n",
      "        assertEquals(excelClassConfig.getRowTitleRead(), DefaultRowTitleRead.class);\n",
      "        assertEquals(excelClassConfig.getRowHeadRead(), DefaultRowHeadRead.class);\n",
      "        assertEquals(excelClassConfig.getRowFootRead(), DefaultRowFootRead.class);\n",
      "        assertEquals(excelClassConfig.getTitleFormat(), \"@\");\n",
      "        assertEquals(excelClassConfig.getTitleStyle(), ExcelStyleConfig.getDefaultExcelStyleConfigTitle());\n",
      "        assertEquals(excelClassConfig.getRowStyleRead(), DefaultRowStyleRead.class);\n",
      "        assertEquals(excelClassConfig.getAutoSizeColumn(), false);\n",
      "        assertTrue(excelClassConfig.getItemList().isEmpty());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getDefaultExcelClassConfigSingleList() {\n",
      "        ExcelFieldConfig excelFieldConfig = Mockito.mock(ExcelFieldConfig.class);\n",
      "        ExcelClassConfig excelClassConfig = ExcelClassConfig.getDefaultExcelClassConfig(Collections.singletonList(excelFieldConfig));\n",
      "\n",
      "        assertEquals(excelClassConfig.getRowTitleWrite(), DefaultRowTitleWrite.class);\n",
      "        assertEquals(excelClassConfig.getRowHeadWrite(), DefaultRowHeadWrite.class);\n",
      "        assertEquals(excelClassConfig.getRowFootWrite(), DefaultRowFootWrite.class);\n",
      "        assertEquals(excelClassConfig.getRowTitleRead(), DefaultRowTitleRead.class);\n",
      "        assertEquals(excelClassConfig.getRowHeadRead(), DefaultRowHeadRead.class);\n",
      "        assertEquals(excelClassConfig.getRowFootRead(), DefaultRowFootRead.class);\n",
      "        assertEquals(excelClassConfig.getTitleFormat(), \"@\");\n",
      "        assertEquals(excelClassConfig.getTitleStyle(), ExcelStyleConfig.getDefaultExcelStyleConfigTitle());\n",
      "        assertEquals(excelClassConfig.getRowStyleRead(), DefaultRowStyleRead.class);\n",
      "        assertEquals(excelClassConfig.getAutoSizeColumn(), false);\n",
      "        assertEquals(excelClassConfig.getItemList().size(), 1);\n",
      "    }\n",
      "\n",
      "    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n",
      "    @Test\n",
      "    void buildByExcelClass() {\n",
      "        ExcelClass excelClass = Mockito.mock(ExcelClass.class);\n",
      "        ExcelStyle excelStyle = Mockito.mock(ExcelStyle.class);\n",
      "        mockExcelClass(excelClass, excelStyle, random);\n",
      "\n",
      "        RowTitleWrite rowTitleWrite = Mockito.mock(RowTitleWrite.class);\n",
      "        RowHeadWrite rowHeadWrite = Mockito.mock(RowHeadWrite.class);\n",
      "        RowFootWrite rowFootWrite = Mockito.mock(RowFootWrite.class);\n",
      "        RowTitleRead rowTitleRead = Mockito.mock(RowTitleRead.class);\n",
      "        RowHeadRead rowHeadRead = Mockito.mock(RowHeadRead.class);\n",
      "        RowFootRead rowFootRead = Mockito.mock(RowFootRead.class);\n",
      "        RowStyleRead rowStyleRead = Mockito.mock(RowStyleRead.class);\n",
      "\n",
      "        Class rowTitleWriteClass = rowTitleWrite.getClass();\n",
      "        Class rowHeadWriteClass = rowHeadWrite.getClass();\n",
      "        Class rowFootWriteClass = rowFootWrite.getClass();\n",
      "        Class rowTitleReadClass = rowTitleRead.getClass();\n",
      "        Class rowHeadReadClass = rowHeadRead.getClass();\n",
      "        Class rowFootReadClass = rowFootRead.getClass();\n",
      "        Class rowStyleReadClass = rowStyleRead.getClass();\n",
      "\n",
      "        Mockito.when(excelClass.rowTitleWrite()).thenReturn(rowTitleWriteClass);\n",
      "        Mockito.when(excelClass.rowHeadWrite()).thenReturn(rowHeadWriteClass);\n",
      "        Mockito.when(excelClass.rowFootWrite()).thenReturn(rowFootWriteClass);\n",
      "        Mockito.when(excelClass.rowTitleRead()).thenReturn(rowTitleReadClass);\n",
      "        Mockito.when(excelClass.rowHeadRead()).thenReturn(rowHeadReadClass);\n",
      "        Mockito.when(excelClass.rowFootRead()).thenReturn(rowFootReadClass);\n",
      "        Mockito.when(excelClass.rowStyleRead()).thenReturn(rowStyleReadClass);\n",
      "        Mockito.when(excelClass.titleFormat()).thenReturn(\"\" + random.nextDouble());\n",
      "        Mockito.when(excelClass.titleStyle()).thenReturn(excelStyle);\n",
      "        Mockito.when(excelClass.autoSizeColumn()).thenReturn(random.nextBoolean());\n",
      "\n",
      "        ExcelClassConfig excelClassConfig = ExcelClassConfig.buildByExcelClass(excelClass, Collections.emptyList());\n",
      "\n",
      "        assertEquals(excelClassConfig.getRowTitleWrite(), excelClass.rowTitleWrite());\n",
      "        assertEquals(excelClassConfig.getRowHeadWrite(), excelClass.rowHeadWrite());\n",
      "        assertEquals(excelClassConfig.getRowFootWrite(), excelClass.rowFootWrite());\n",
      "        assertEquals(excelClassConfig.getRowTitleRead(), excelClass.rowTitleRead());\n",
      "        assertEquals(excelClassConfig.getRowHeadRead(), excelClass.rowHeadRead());\n",
      "        assertEquals(excelClassConfig.getRowFootRead(), excelClass.rowFootRead());\n",
      "        assertEquals(excelClassConfig.getTitleFormat(), excelClass.titleFormat());\n",
      "        assertEquals(excelClassConfig.getTitleStyle(), ExcelStyleConfig.buildByExcelStyle(excelClass.titleStyle()));\n",
      "        assertEquals(excelClassConfig.getRowStyleRead(), excelClass.rowStyleRead());\n",
      "        assertEquals(excelClassConfig.getAutoSizeColumn(), excelClass.autoSizeColumn());\n",
      "        assertEquals(excelClassConfig.getItemList().size(), 0);\n",
      "    }\n",
      "\n",
      "\n",
      "}\n"
    ],
    "method_lines_dic": {
      "ExcelClassConfig::::getDefaultExcelClassConfig(java.util.List<io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig>)": [
        82,
        86
      ],
      "ExcelClassConfig::::buildByExcelClass(io.github.zouzhiy.excel.annotation.ExcelClass,java.util.List<io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig>)": [
        88,
        102
      ]
    },
    "test_method_lines_dic": {
      "ExcelClassConfigTest::::getDefaultExcelClassConfig()": [
        77,
        94
      ],
      "ExcelClassConfigTest::::getDefaultExcelClassConfigEmptyList()": [
        96,
        111
      ],
      "ExcelClassConfigTest::::getDefaultExcelClassConfigSingleList()": [
        113,
        129
      ],
      "ExcelClassConfigTest::::buildByExcelClass()": [
        131,
        178
      ]
    },
    "reverse_method_lines_dic": {
      "82": "ExcelClassConfig::::getDefaultExcelClassConfig(java.util.List<io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig>)",
      "83": "ExcelClassConfig::::getDefaultExcelClassConfig(java.util.List<io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig>)",
      "84": "ExcelClassConfig::::getDefaultExcelClassConfig(java.util.List<io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig>)",
      "85": "ExcelClassConfig::::getDefaultExcelClassConfig(java.util.List<io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig>)",
      "86": "ExcelClassConfig::::getDefaultExcelClassConfig(java.util.List<io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig>)",
      "88": "ExcelClassConfig::::buildByExcelClass(io.github.zouzhiy.excel.annotation.ExcelClass,java.util.List<io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig>)",
      "89": "ExcelClassConfig::::buildByExcelClass(io.github.zouzhiy.excel.annotation.ExcelClass,java.util.List<io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig>)",
      "90": "ExcelClassConfig::::buildByExcelClass(io.github.zouzhiy.excel.annotation.ExcelClass,java.util.List<io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig>)",
      "91": "ExcelClassConfig::::buildByExcelClass(io.github.zouzhiy.excel.annotation.ExcelClass,java.util.List<io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig>)",
      "92": "ExcelClassConfig::::buildByExcelClass(io.github.zouzhiy.excel.annotation.ExcelClass,java.util.List<io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig>)",
      "93": "ExcelClassConfig::::buildByExcelClass(io.github.zouzhiy.excel.annotation.ExcelClass,java.util.List<io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig>)",
      "94": "ExcelClassConfig::::buildByExcelClass(io.github.zouzhiy.excel.annotation.ExcelClass,java.util.List<io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig>)",
      "95": "ExcelClassConfig::::buildByExcelClass(io.github.zouzhiy.excel.annotation.ExcelClass,java.util.List<io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig>)",
      "96": "ExcelClassConfig::::buildByExcelClass(io.github.zouzhiy.excel.annotation.ExcelClass,java.util.List<io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig>)",
      "97": "ExcelClassConfig::::buildByExcelClass(io.github.zouzhiy.excel.annotation.ExcelClass,java.util.List<io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig>)",
      "98": "ExcelClassConfig::::buildByExcelClass(io.github.zouzhiy.excel.annotation.ExcelClass,java.util.List<io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig>)",
      "99": "ExcelClassConfig::::buildByExcelClass(io.github.zouzhiy.excel.annotation.ExcelClass,java.util.List<io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig>)",
      "100": "ExcelClassConfig::::buildByExcelClass(io.github.zouzhiy.excel.annotation.ExcelClass,java.util.List<io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig>)",
      "101": "ExcelClassConfig::::buildByExcelClass(io.github.zouzhiy.excel.annotation.ExcelClass,java.util.List<io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig>)",
      "102": "ExcelClassConfig::::buildByExcelClass(io.github.zouzhiy.excel.annotation.ExcelClass,java.util.List<io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig>)"
    },
    "test_reverse_method_lines_dic": {
      "77": "ExcelClassConfigTest::::getDefaultExcelClassConfig()",
      "78": "ExcelClassConfigTest::::getDefaultExcelClassConfig()",
      "79": "ExcelClassConfigTest::::getDefaultExcelClassConfig()",
      "80": "ExcelClassConfigTest::::getDefaultExcelClassConfig()",
      "81": "ExcelClassConfigTest::::getDefaultExcelClassConfig()",
      "82": "ExcelClassConfigTest::::getDefaultExcelClassConfig()",
      "83": "ExcelClassConfigTest::::getDefaultExcelClassConfig()",
      "84": "ExcelClassConfigTest::::getDefaultExcelClassConfig()",
      "85": "ExcelClassConfigTest::::getDefaultExcelClassConfig()",
      "86": "ExcelClassConfigTest::::getDefaultExcelClassConfig()",
      "87": "ExcelClassConfigTest::::getDefaultExcelClassConfig()",
      "88": "ExcelClassConfigTest::::getDefaultExcelClassConfig()",
      "89": "ExcelClassConfigTest::::getDefaultExcelClassConfig()",
      "90": "ExcelClassConfigTest::::getDefaultExcelClassConfig()",
      "91": "ExcelClassConfigTest::::getDefaultExcelClassConfig()",
      "92": "ExcelClassConfigTest::::getDefaultExcelClassConfig()",
      "93": "ExcelClassConfigTest::::getDefaultExcelClassConfig()",
      "94": "ExcelClassConfigTest::::getDefaultExcelClassConfig()",
      "96": "ExcelClassConfigTest::::getDefaultExcelClassConfigEmptyList()",
      "97": "ExcelClassConfigTest::::getDefaultExcelClassConfigEmptyList()",
      "98": "ExcelClassConfigTest::::getDefaultExcelClassConfigEmptyList()",
      "99": "ExcelClassConfigTest::::getDefaultExcelClassConfigEmptyList()",
      "100": "ExcelClassConfigTest::::getDefaultExcelClassConfigEmptyList()",
      "101": "ExcelClassConfigTest::::getDefaultExcelClassConfigEmptyList()",
      "102": "ExcelClassConfigTest::::getDefaultExcelClassConfigEmptyList()",
      "103": "ExcelClassConfigTest::::getDefaultExcelClassConfigEmptyList()",
      "104": "ExcelClassConfigTest::::getDefaultExcelClassConfigEmptyList()",
      "105": "ExcelClassConfigTest::::getDefaultExcelClassConfigEmptyList()",
      "106": "ExcelClassConfigTest::::getDefaultExcelClassConfigEmptyList()",
      "107": "ExcelClassConfigTest::::getDefaultExcelClassConfigEmptyList()",
      "108": "ExcelClassConfigTest::::getDefaultExcelClassConfigEmptyList()",
      "109": "ExcelClassConfigTest::::getDefaultExcelClassConfigEmptyList()",
      "110": "ExcelClassConfigTest::::getDefaultExcelClassConfigEmptyList()",
      "111": "ExcelClassConfigTest::::getDefaultExcelClassConfigEmptyList()",
      "113": "ExcelClassConfigTest::::getDefaultExcelClassConfigSingleList()",
      "114": "ExcelClassConfigTest::::getDefaultExcelClassConfigSingleList()",
      "115": "ExcelClassConfigTest::::getDefaultExcelClassConfigSingleList()",
      "116": "ExcelClassConfigTest::::getDefaultExcelClassConfigSingleList()",
      "117": "ExcelClassConfigTest::::getDefaultExcelClassConfigSingleList()",
      "118": "ExcelClassConfigTest::::getDefaultExcelClassConfigSingleList()",
      "119": "ExcelClassConfigTest::::getDefaultExcelClassConfigSingleList()",
      "120": "ExcelClassConfigTest::::getDefaultExcelClassConfigSingleList()",
      "121": "ExcelClassConfigTest::::getDefaultExcelClassConfigSingleList()",
      "122": "ExcelClassConfigTest::::getDefaultExcelClassConfigSingleList()",
      "123": "ExcelClassConfigTest::::getDefaultExcelClassConfigSingleList()",
      "124": "ExcelClassConfigTest::::getDefaultExcelClassConfigSingleList()",
      "125": "ExcelClassConfigTest::::getDefaultExcelClassConfigSingleList()",
      "126": "ExcelClassConfigTest::::getDefaultExcelClassConfigSingleList()",
      "127": "ExcelClassConfigTest::::getDefaultExcelClassConfigSingleList()",
      "128": "ExcelClassConfigTest::::getDefaultExcelClassConfigSingleList()",
      "129": "ExcelClassConfigTest::::getDefaultExcelClassConfigSingleList()",
      "131": "ExcelClassConfigTest::::buildByExcelClass()",
      "132": "ExcelClassConfigTest::::buildByExcelClass()",
      "133": "ExcelClassConfigTest::::buildByExcelClass()",
      "134": "ExcelClassConfigTest::::buildByExcelClass()",
      "135": "ExcelClassConfigTest::::buildByExcelClass()",
      "136": "ExcelClassConfigTest::::buildByExcelClass()",
      "137": "ExcelClassConfigTest::::buildByExcelClass()",
      "138": "ExcelClassConfigTest::::buildByExcelClass()",
      "139": "ExcelClassConfigTest::::buildByExcelClass()",
      "140": "ExcelClassConfigTest::::buildByExcelClass()",
      "141": "ExcelClassConfigTest::::buildByExcelClass()",
      "142": "ExcelClassConfigTest::::buildByExcelClass()",
      "143": "ExcelClassConfigTest::::buildByExcelClass()",
      "144": "ExcelClassConfigTest::::buildByExcelClass()",
      "145": "ExcelClassConfigTest::::buildByExcelClass()",
      "146": "ExcelClassConfigTest::::buildByExcelClass()",
      "147": "ExcelClassConfigTest::::buildByExcelClass()",
      "148": "ExcelClassConfigTest::::buildByExcelClass()",
      "149": "ExcelClassConfigTest::::buildByExcelClass()",
      "150": "ExcelClassConfigTest::::buildByExcelClass()",
      "151": "ExcelClassConfigTest::::buildByExcelClass()",
      "152": "ExcelClassConfigTest::::buildByExcelClass()",
      "153": "ExcelClassConfigTest::::buildByExcelClass()",
      "154": "ExcelClassConfigTest::::buildByExcelClass()",
      "155": "ExcelClassConfigTest::::buildByExcelClass()",
      "156": "ExcelClassConfigTest::::buildByExcelClass()",
      "157": "ExcelClassConfigTest::::buildByExcelClass()",
      "158": "ExcelClassConfigTest::::buildByExcelClass()",
      "159": "ExcelClassConfigTest::::buildByExcelClass()",
      "160": "ExcelClassConfigTest::::buildByExcelClass()",
      "161": "ExcelClassConfigTest::::buildByExcelClass()",
      "162": "ExcelClassConfigTest::::buildByExcelClass()",
      "163": "ExcelClassConfigTest::::buildByExcelClass()",
      "164": "ExcelClassConfigTest::::buildByExcelClass()",
      "165": "ExcelClassConfigTest::::buildByExcelClass()",
      "166": "ExcelClassConfigTest::::buildByExcelClass()",
      "167": "ExcelClassConfigTest::::buildByExcelClass()",
      "168": "ExcelClassConfigTest::::buildByExcelClass()",
      "169": "ExcelClassConfigTest::::buildByExcelClass()",
      "170": "ExcelClassConfigTest::::buildByExcelClass()",
      "171": "ExcelClassConfigTest::::buildByExcelClass()",
      "172": "ExcelClassConfigTest::::buildByExcelClass()",
      "173": "ExcelClassConfigTest::::buildByExcelClass()",
      "174": "ExcelClassConfigTest::::buildByExcelClass()",
      "175": "ExcelClassConfigTest::::buildByExcelClass()",
      "176": "ExcelClassConfigTest::::buildByExcelClass()",
      "177": "ExcelClassConfigTest::::buildByExcelClass()",
      "178": "ExcelClassConfigTest::::buildByExcelClass()"
    },
    "tests": [
      {
        "test_lines": [
          77,
          94
        ],
        "covered_lines": [
          48,
          52,
          55,
          58,
          61,
          64,
          67,
          70,
          73,
          76,
          78,
          80
        ]
      },
      {
        "test_lines": [
          96,
          111
        ],
        "covered_lines": [
          48,
          52,
          55,
          58,
          61,
          64,
          67,
          70,
          73,
          76,
          78,
          80,
          83,
          84,
          85
        ]
      },
      {
        "test_lines": [
          113,
          129
        ],
        "covered_lines": [
          48,
          52,
          55,
          58,
          61,
          64,
          67,
          70,
          73,
          76,
          78,
          80,
          83,
          84,
          85
        ]
      },
      {
        "test_lines": [
          131,
          178
        ],
        "covered_lines": [
          48,
          52,
          55,
          58,
          61,
          64,
          67,
          70,
          73,
          76,
          78,
          80,
          89,
          90,
          91,
          92,
          93,
          94,
          95,
          96,
          97,
          98,
          99,
          100,
          101
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/zouzhiy-excel/src/main/java/io/github/zouzhiy/excel/metadata/config/ExcelFieldConfig.java": {
    "class_content": [
      "/*\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package io.github.zouzhiy.excel.metadata.config;\n",
      "\n",
      "import io.github.zouzhiy.excel.annotation.ExcelField;\n",
      "import io.github.zouzhiy.excel.enums.ExcelType;\n",
      "import io.github.zouzhiy.excel.handler.CellHandler;\n",
      "import lombok.Builder;\n",
      "import lombok.EqualsAndHashCode;\n",
      "import lombok.Getter;\n",
      "import lombok.ToString;\n",
      "\n",
      "\n",
      "/**\n",
      " * \u5b57\u6bb5\u914d\u7f6e {@link io.github.zouzhiy.excel.annotation.ExcelField}\n",
      " *\n",
      " * @author zouzhiy\n",
      " * @since 2022/7/2\n",
      " */\n",
      "@Getter\n",
      "@ToString\n",
      "@EqualsAndHashCode\n",
      "@Builder\n",
      "public class ExcelFieldConfig {\n",
      "\n",
      "    @Builder.Default\n",
      "    private final String title = \"\";\n",
      "\n",
      "    @Builder.Default\n",
      "    private final double width = -1D;\n",
      "\n",
      "    @Builder.Default\n",
      "    private final String propertyName = \"\";\n",
      "\n",
      "    @Builder.Default\n",
      "    private final Class<?> javaType = Object.class;\n",
      "\n",
      "    @Builder.Default\n",
      "    private final ExcelType excelType = ExcelType.BLANK;\n",
      "\n",
      "    @SuppressWarnings(\"unchecked\")\n",
      "    @Builder.Default\n",
      "    private final Class<? extends CellHandler<?>>[] cellHandler = (Class<? extends CellHandler<?>>[]) new Class<?>[0];\n",
      "\n",
      "    @Builder.Default\n",
      "    private final int colspan = 1;\n",
      "\n",
      "    @Builder.Default\n",
      "    private final String headFormat = \"@\";\n",
      "\n",
      "    @Builder.Default\n",
      "    private final String javaFormat = \"\";\n",
      "\n",
      "    @Builder.Default\n",
      "    private final String excelFormat = \"\";\n",
      "\n",
      "    @Builder.Default\n",
      "    private final long sort = 0L;\n",
      "\n",
      "    @Builder.Default\n",
      "    private final ExcelStyleConfig headStyle = ExcelStyleConfig.getDefaultExcelStyleConfigHead();\n",
      "\n",
      "    @Builder.Default\n",
      "    private final ExcelStyleConfig dataStyle = ExcelStyleConfig.getDefaultExcelStyleConfigData();\n",
      "\n",
      "\n",
      "    public static ExcelFieldConfig getDefaultExcelFieldConfig(String propertyName, Class<?> javaType) {\n",
      "        return ExcelFieldConfig.builder()\n",
      "                .title(propertyName)\n",
      "                .propertyName(propertyName)\n",
      "                .javaType(javaType)\n",
      "                .build();\n",
      "    }\n",
      "\n",
      "\n",
      "    public static ExcelFieldConfig buildByExcelField(ExcelField excelField, String propertyName, Class<?> javaType) {\n",
      "        return ExcelFieldConfig\n",
      "                .builder()\n",
      "                .title(excelField.title().length() == 0 ? propertyName : excelField.title())\n",
      "                .width(excelField.width())\n",
      "                .propertyName(propertyName)\n",
      "                .javaType(javaType)\n",
      "                .excelType(excelField.excelType())\n",
      "                .cellHandler(excelField.cellHandler())\n",
      "                .colspan(excelField.colspan())\n",
      "                .headFormat(excelField.headFormat())\n",
      "                .javaFormat(excelField.javaFormat())\n",
      "                .excelFormat(excelField.excelFormat())\n",
      "                .sort(excelField.sort())\n",
      "                .headStyle(ExcelStyleConfig.buildByExcelStyle(excelField.headStyle()))\n",
      "                .dataStyle(ExcelStyleConfig.buildByExcelStyle(excelField.dataStyle()))\n",
      "                .build();\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package io.github.zouzhiy.excel.metadata.config;\n",
      "\n",
      "import io.github.zouzhiy.excel.annotation.ExcelField;\n",
      "import io.github.zouzhiy.excel.annotation.ExcelFont;\n",
      "import io.github.zouzhiy.excel.annotation.ExcelStyle;\n",
      "import io.github.zouzhiy.excel.enums.ExcelType;\n",
      "import io.github.zouzhiy.excel.handler.string.StringBooleanHandler;\n",
      "import io.github.zouzhiy.excel.handler.string.StringNumberHandler;\n",
      "import io.github.zouzhiy.excel.handler.string.StringStringHandler;\n",
      "import io.github.zouzhiy.excel.support.metadata.DemoDefault;\n",
      "import org.junit.jupiter.api.Assertions;\n",
      "import org.junit.jupiter.api.RepeatedTest;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.mockito.Mockito;\n",
      "\n",
      "import java.util.Random;\n",
      "\n",
      "\n",
      "class ExcelFieldConfigTest {\n",
      "\n",
      "    private final Random random = new Random(System.currentTimeMillis());\n",
      "\n",
      "    static void mockExcelField(ExcelField excelField, Random random) {\n",
      "        ExcelFont headExcelFont = Mockito.mock(ExcelFont.class);\n",
      "        ExcelStyle headExcelStyle = Mockito.mock(ExcelStyle.class);\n",
      "        ExcelFontConfigTest.mockExcelFont(headExcelFont, random);\n",
      "        ExcelStyleConfigTest.mockExcelStyle(headExcelStyle, random);\n",
      "        Mockito.when(headExcelStyle.font()).thenReturn(headExcelFont);\n",
      "\n",
      "        ExcelFont dataExcelFont = Mockito.mock(ExcelFont.class);\n",
      "        ExcelStyle dataExcelStyle = Mockito.mock(ExcelStyle.class);\n",
      "        ExcelFontConfigTest.mockExcelFont(dataExcelFont, random);\n",
      "        ExcelStyleConfigTest.mockExcelStyle(dataExcelStyle, random);\n",
      "        Mockito.when(dataExcelStyle.font()).thenReturn(dataExcelFont);\n",
      "\n",
      "        Mockito.when(excelField.width()).thenReturn(random.nextDouble());\n",
      "        Mockito.when(excelField.excelType()).thenReturn(ExcelType.values()[random.nextInt(ExcelType.values().length)]);\n",
      "        Mockito.when(excelField.colspan()).thenReturn(random.nextInt());\n",
      "        Mockito.when(excelField.headFormat()).thenReturn(\"\" + random.nextDouble());\n",
      "        Mockito.when(excelField.javaFormat()).thenReturn(\"\" + random.nextDouble());\n",
      "        Mockito.when(excelField.excelFormat()).thenReturn(\"\" + random.nextDouble());\n",
      "        Mockito.when(excelField.sort()).thenReturn(random.nextLong());\n",
      "        Mockito.when(excelField.headStyle()).thenReturn(headExcelStyle);\n",
      "        Mockito.when(excelField.dataStyle()).thenReturn(dataExcelStyle);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getExcelFieldConfig() {\n",
      "\n",
      "        ExcelFieldConfig excelFieldConfig = ExcelFieldConfig.builder().build();\n",
      "\n",
      "        Assertions.assertEquals(excelFieldConfig.getTitle(), \"\");\n",
      "        Assertions.assertEquals(excelFieldConfig.getPropertyName(), \"\");\n",
      "        Assertions.assertEquals(excelFieldConfig.getJavaType(), Object.class);\n",
      "        Assertions.assertEquals(excelFieldConfig.getExcelType(), ExcelType.BLANK);\n",
      "        Assertions.assertEquals(excelFieldConfig.getCellHandler().length, 0);\n",
      "        Assertions.assertEquals(excelFieldConfig.getColspan(), 1);\n",
      "        Assertions.assertEquals(excelFieldConfig.getHeadFormat(), \"@\");\n",
      "        Assertions.assertEquals(excelFieldConfig.getJavaFormat(), \"\");\n",
      "        Assertions.assertEquals(excelFieldConfig.getExcelFormat(), \"\");\n",
      "        Assertions.assertEquals(excelFieldConfig.getSort(), 0L);\n",
      "        Assertions.assertEquals(excelFieldConfig.getHeadStyle(), ExcelStyleConfig.getDefaultExcelStyleConfigHead());\n",
      "        Assertions.assertEquals(excelFieldConfig.getDataStyle(), ExcelStyleConfig.getDefaultExcelStyleConfigData());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getDefaultExcelFieldConfig() {\n",
      "        String propertyName = \"propertyNameTest\";\n",
      "        Class<?> javaType = DemoDefault.class;\n",
      "\n",
      "        ExcelFieldConfig excelFieldConfig = ExcelFieldConfig.getDefaultExcelFieldConfig(propertyName, javaType);\n",
      "\n",
      "        Assertions.assertEquals(excelFieldConfig.getTitle(), propertyName);\n",
      "        Assertions.assertEquals(excelFieldConfig.getPropertyName(), propertyName);\n",
      "        Assertions.assertEquals(excelFieldConfig.getJavaType(), javaType);\n",
      "        Assertions.assertEquals(excelFieldConfig.getExcelType(), ExcelType.BLANK);\n",
      "        Assertions.assertEquals(excelFieldConfig.getCellHandler().length, 0);\n",
      "        Assertions.assertEquals(excelFieldConfig.getColspan(), 1);\n",
      "        Assertions.assertEquals(excelFieldConfig.getHeadFormat(), \"@\");\n",
      "        Assertions.assertEquals(excelFieldConfig.getJavaFormat(), \"\");\n",
      "        Assertions.assertEquals(excelFieldConfig.getExcelFormat(), \"\");\n",
      "        Assertions.assertEquals(excelFieldConfig.getSort(), 0L);\n",
      "        Assertions.assertEquals(excelFieldConfig.getHeadStyle(), ExcelStyleConfig.getDefaultExcelStyleConfigHead());\n",
      "        Assertions.assertEquals(excelFieldConfig.getDataStyle(), ExcelStyleConfig.getDefaultExcelStyleConfigData());\n",
      "    }\n",
      "\n",
      "\n",
      "    @SuppressWarnings(\"unchecked\")\n",
      "    @RepeatedTest(10)\n",
      "    void buildByExcelFieldEmptyTitle() {\n",
      "        String propertyName = \"propertyNameTest\";\n",
      "        Class<?> javaType = DemoDefault.class;\n",
      "\n",
      "        ExcelField excelField = Mockito.mock(ExcelField.class);\n",
      "        mockExcelField(excelField, random);\n",
      "\n",
      "        Mockito.when(excelField.title()).thenReturn(\"\");\n",
      "        Mockito.when(excelField.cellHandler()).thenReturn(new Class[]{\n",
      "                StringStringHandler.class,\n",
      "                StringNumberHandler.class\n",
      "        });\n",
      "\n",
      "        ExcelFieldConfig excelFieldConfig = ExcelFieldConfig.buildByExcelField(excelField, propertyName, javaType);\n",
      "\n",
      "        Assertions.assertEquals(excelFieldConfig.getTitle(), propertyName);\n",
      "        Assertions.assertEquals(excelFieldConfig.getWidth(), excelField.width());\n",
      "        Assertions.assertEquals(excelFieldConfig.getPropertyName(), propertyName);\n",
      "        Assertions.assertEquals(excelFieldConfig.getJavaType(), javaType);\n",
      "        Assertions.assertEquals(excelFieldConfig.getExcelType(), excelField.excelType());\n",
      "        Assertions.assertEquals(excelFieldConfig.getCellHandler(), excelField.cellHandler());\n",
      "        Assertions.assertEquals(excelFieldConfig.getColspan(), excelField.colspan());\n",
      "        Assertions.assertEquals(excelFieldConfig.getHeadFormat(), excelField.headFormat());\n",
      "        Assertions.assertEquals(excelFieldConfig.getJavaFormat(), excelField.javaFormat());\n",
      "        Assertions.assertEquals(excelFieldConfig.getExcelFormat(), excelField.excelFormat());\n",
      "        Assertions.assertEquals(excelFieldConfig.getSort(), excelField.sort());\n",
      "        Assertions.assertEquals(excelFieldConfig.getHeadStyle(), ExcelStyleConfig.buildByExcelStyle(excelField.headStyle()));\n",
      "        Assertions.assertEquals(excelFieldConfig.getDataStyle(), ExcelStyleConfig.buildByExcelStyle(excelField.dataStyle()));\n",
      "    }\n",
      "\n",
      "    @RepeatedTest(10)\n",
      "    void buildByExcelField() {\n",
      "        String propertyName = \"propertyNameTest\";\n",
      "        Class<?> javaType = DemoDefault.class;\n",
      "\n",
      "        ExcelField excelField = Mockito.mock(ExcelField.class);\n",
      "        mockExcelField(excelField, random);\n",
      "\n",
      "\n",
      "        Mockito.when(excelField.title()).thenReturn(\"\" + random.nextDouble());\n",
      "        //noinspection unchecked\n",
      "        Mockito.when(excelField.cellHandler()).thenReturn(new Class[]{\n",
      "                StringStringHandler.class,\n",
      "                StringNumberHandler.class,\n",
      "                StringBooleanHandler.class\n",
      "        });\n",
      "\n",
      "\n",
      "        ExcelFieldConfig excelFieldConfig = ExcelFieldConfig.buildByExcelField(excelField, propertyName, javaType);\n",
      "\n",
      "        Assertions.assertEquals(excelFieldConfig.getTitle(), excelField.title());\n",
      "        Assertions.assertEquals(excelFieldConfig.getWidth(), excelField.width());\n",
      "        Assertions.assertEquals(excelFieldConfig.getPropertyName(), propertyName);\n",
      "        Assertions.assertEquals(excelFieldConfig.getJavaType(), javaType);\n",
      "        Assertions.assertEquals(excelFieldConfig.getExcelType(), excelField.excelType());\n",
      "        Assertions.assertEquals(excelFieldConfig.getCellHandler(), excelField.cellHandler());\n",
      "        Assertions.assertEquals(excelFieldConfig.getColspan(), excelField.colspan());\n",
      "        Assertions.assertEquals(excelFieldConfig.getHeadFormat(), excelField.headFormat());\n",
      "        Assertions.assertEquals(excelFieldConfig.getJavaFormat(), excelField.javaFormat());\n",
      "        Assertions.assertEquals(excelFieldConfig.getExcelFormat(), excelField.excelFormat());\n",
      "        Assertions.assertEquals(excelFieldConfig.getSort(), excelField.sort());\n",
      "        Assertions.assertEquals(excelFieldConfig.getHeadStyle(), ExcelStyleConfig.buildByExcelStyle(excelField.headStyle()));\n",
      "        Assertions.assertEquals(excelFieldConfig.getDataStyle(), ExcelStyleConfig.buildByExcelStyle(excelField.dataStyle()));\n",
      "    }\n",
      "\n",
      "\n",
      "}\n"
    ],
    "method_lines_dic": {
      "ExcelFieldConfig::::getDefaultExcelFieldConfig(java.lang.String,java.lang.Class<?>)": [
        78,
        84
      ],
      "ExcelFieldConfig::::buildByExcelField(io.github.zouzhiy.excel.annotation.ExcelField,java.lang.String,java.lang.Class<?>)": [
        87,
        104
      ]
    },
    "test_method_lines_dic": {
      "ExcelFieldConfigTest::::getExcelFieldConfig()": [
        47,
        64
      ],
      "ExcelFieldConfigTest::::getDefaultExcelFieldConfig()": [
        66,
        85
      ],
      "ExcelFieldConfigTest::::buildByExcelFieldEmptyTitle()": [
        88,
        118
      ],
      "ExcelFieldConfigTest::::buildByExcelField()": [
        120,
        153
      ]
    },
    "reverse_method_lines_dic": {
      "78": "ExcelFieldConfig::::getDefaultExcelFieldConfig(java.lang.String,java.lang.Class<?>)",
      "79": "ExcelFieldConfig::::getDefaultExcelFieldConfig(java.lang.String,java.lang.Class<?>)",
      "80": "ExcelFieldConfig::::getDefaultExcelFieldConfig(java.lang.String,java.lang.Class<?>)",
      "81": "ExcelFieldConfig::::getDefaultExcelFieldConfig(java.lang.String,java.lang.Class<?>)",
      "82": "ExcelFieldConfig::::getDefaultExcelFieldConfig(java.lang.String,java.lang.Class<?>)",
      "83": "ExcelFieldConfig::::getDefaultExcelFieldConfig(java.lang.String,java.lang.Class<?>)",
      "84": "ExcelFieldConfig::::getDefaultExcelFieldConfig(java.lang.String,java.lang.Class<?>)",
      "87": "ExcelFieldConfig::::buildByExcelField(io.github.zouzhiy.excel.annotation.ExcelField,java.lang.String,java.lang.Class<?>)",
      "88": "ExcelFieldConfig::::buildByExcelField(io.github.zouzhiy.excel.annotation.ExcelField,java.lang.String,java.lang.Class<?>)",
      "89": "ExcelFieldConfig::::buildByExcelField(io.github.zouzhiy.excel.annotation.ExcelField,java.lang.String,java.lang.Class<?>)",
      "90": "ExcelFieldConfig::::buildByExcelField(io.github.zouzhiy.excel.annotation.ExcelField,java.lang.String,java.lang.Class<?>)",
      "91": "ExcelFieldConfig::::buildByExcelField(io.github.zouzhiy.excel.annotation.ExcelField,java.lang.String,java.lang.Class<?>)",
      "92": "ExcelFieldConfig::::buildByExcelField(io.github.zouzhiy.excel.annotation.ExcelField,java.lang.String,java.lang.Class<?>)",
      "93": "ExcelFieldConfig::::buildByExcelField(io.github.zouzhiy.excel.annotation.ExcelField,java.lang.String,java.lang.Class<?>)",
      "94": "ExcelFieldConfig::::buildByExcelField(io.github.zouzhiy.excel.annotation.ExcelField,java.lang.String,java.lang.Class<?>)",
      "95": "ExcelFieldConfig::::buildByExcelField(io.github.zouzhiy.excel.annotation.ExcelField,java.lang.String,java.lang.Class<?>)",
      "96": "ExcelFieldConfig::::buildByExcelField(io.github.zouzhiy.excel.annotation.ExcelField,java.lang.String,java.lang.Class<?>)",
      "97": "ExcelFieldConfig::::buildByExcelField(io.github.zouzhiy.excel.annotation.ExcelField,java.lang.String,java.lang.Class<?>)",
      "98": "ExcelFieldConfig::::buildByExcelField(io.github.zouzhiy.excel.annotation.ExcelField,java.lang.String,java.lang.Class<?>)",
      "99": "ExcelFieldConfig::::buildByExcelField(io.github.zouzhiy.excel.annotation.ExcelField,java.lang.String,java.lang.Class<?>)",
      "100": "ExcelFieldConfig::::buildByExcelField(io.github.zouzhiy.excel.annotation.ExcelField,java.lang.String,java.lang.Class<?>)",
      "101": "ExcelFieldConfig::::buildByExcelField(io.github.zouzhiy.excel.annotation.ExcelField,java.lang.String,java.lang.Class<?>)",
      "102": "ExcelFieldConfig::::buildByExcelField(io.github.zouzhiy.excel.annotation.ExcelField,java.lang.String,java.lang.Class<?>)",
      "103": "ExcelFieldConfig::::buildByExcelField(io.github.zouzhiy.excel.annotation.ExcelField,java.lang.String,java.lang.Class<?>)",
      "104": "ExcelFieldConfig::::buildByExcelField(io.github.zouzhiy.excel.annotation.ExcelField,java.lang.String,java.lang.Class<?>)"
    },
    "test_reverse_method_lines_dic": {
      "47": "ExcelFieldConfigTest::::getExcelFieldConfig()",
      "48": "ExcelFieldConfigTest::::getExcelFieldConfig()",
      "49": "ExcelFieldConfigTest::::getExcelFieldConfig()",
      "50": "ExcelFieldConfigTest::::getExcelFieldConfig()",
      "51": "ExcelFieldConfigTest::::getExcelFieldConfig()",
      "52": "ExcelFieldConfigTest::::getExcelFieldConfig()",
      "53": "ExcelFieldConfigTest::::getExcelFieldConfig()",
      "54": "ExcelFieldConfigTest::::getExcelFieldConfig()",
      "55": "ExcelFieldConfigTest::::getExcelFieldConfig()",
      "56": "ExcelFieldConfigTest::::getExcelFieldConfig()",
      "57": "ExcelFieldConfigTest::::getExcelFieldConfig()",
      "58": "ExcelFieldConfigTest::::getExcelFieldConfig()",
      "59": "ExcelFieldConfigTest::::getExcelFieldConfig()",
      "60": "ExcelFieldConfigTest::::getExcelFieldConfig()",
      "61": "ExcelFieldConfigTest::::getExcelFieldConfig()",
      "62": "ExcelFieldConfigTest::::getExcelFieldConfig()",
      "63": "ExcelFieldConfigTest::::getExcelFieldConfig()",
      "64": "ExcelFieldConfigTest::::getExcelFieldConfig()",
      "66": "ExcelFieldConfigTest::::getDefaultExcelFieldConfig()",
      "67": "ExcelFieldConfigTest::::getDefaultExcelFieldConfig()",
      "68": "ExcelFieldConfigTest::::getDefaultExcelFieldConfig()",
      "69": "ExcelFieldConfigTest::::getDefaultExcelFieldConfig()",
      "70": "ExcelFieldConfigTest::::getDefaultExcelFieldConfig()",
      "71": "ExcelFieldConfigTest::::getDefaultExcelFieldConfig()",
      "72": "ExcelFieldConfigTest::::getDefaultExcelFieldConfig()",
      "73": "ExcelFieldConfigTest::::getDefaultExcelFieldConfig()",
      "74": "ExcelFieldConfigTest::::getDefaultExcelFieldConfig()",
      "75": "ExcelFieldConfigTest::::getDefaultExcelFieldConfig()",
      "76": "ExcelFieldConfigTest::::getDefaultExcelFieldConfig()",
      "77": "ExcelFieldConfigTest::::getDefaultExcelFieldConfig()",
      "78": "ExcelFieldConfigTest::::getDefaultExcelFieldConfig()",
      "79": "ExcelFieldConfigTest::::getDefaultExcelFieldConfig()",
      "80": "ExcelFieldConfigTest::::getDefaultExcelFieldConfig()",
      "81": "ExcelFieldConfigTest::::getDefaultExcelFieldConfig()",
      "82": "ExcelFieldConfigTest::::getDefaultExcelFieldConfig()",
      "83": "ExcelFieldConfigTest::::getDefaultExcelFieldConfig()",
      "84": "ExcelFieldConfigTest::::getDefaultExcelFieldConfig()",
      "85": "ExcelFieldConfigTest::::getDefaultExcelFieldConfig()",
      "88": "ExcelFieldConfigTest::::buildByExcelFieldEmptyTitle()",
      "89": "ExcelFieldConfigTest::::buildByExcelFieldEmptyTitle()",
      "90": "ExcelFieldConfigTest::::buildByExcelFieldEmptyTitle()",
      "91": "ExcelFieldConfigTest::::buildByExcelFieldEmptyTitle()",
      "92": "ExcelFieldConfigTest::::buildByExcelFieldEmptyTitle()",
      "93": "ExcelFieldConfigTest::::buildByExcelFieldEmptyTitle()",
      "94": "ExcelFieldConfigTest::::buildByExcelFieldEmptyTitle()",
      "95": "ExcelFieldConfigTest::::buildByExcelFieldEmptyTitle()",
      "96": "ExcelFieldConfigTest::::buildByExcelFieldEmptyTitle()",
      "97": "ExcelFieldConfigTest::::buildByExcelFieldEmptyTitle()",
      "98": "ExcelFieldConfigTest::::buildByExcelFieldEmptyTitle()",
      "99": "ExcelFieldConfigTest::::buildByExcelFieldEmptyTitle()",
      "100": "ExcelFieldConfigTest::::buildByExcelFieldEmptyTitle()",
      "101": "ExcelFieldConfigTest::::buildByExcelFieldEmptyTitle()",
      "102": "ExcelFieldConfigTest::::buildByExcelFieldEmptyTitle()",
      "103": "ExcelFieldConfigTest::::buildByExcelFieldEmptyTitle()",
      "104": "ExcelFieldConfigTest::::buildByExcelFieldEmptyTitle()",
      "105": "ExcelFieldConfigTest::::buildByExcelFieldEmptyTitle()",
      "106": "ExcelFieldConfigTest::::buildByExcelFieldEmptyTitle()",
      "107": "ExcelFieldConfigTest::::buildByExcelFieldEmptyTitle()",
      "108": "ExcelFieldConfigTest::::buildByExcelFieldEmptyTitle()",
      "109": "ExcelFieldConfigTest::::buildByExcelFieldEmptyTitle()",
      "110": "ExcelFieldConfigTest::::buildByExcelFieldEmptyTitle()",
      "111": "ExcelFieldConfigTest::::buildByExcelFieldEmptyTitle()",
      "112": "ExcelFieldConfigTest::::buildByExcelFieldEmptyTitle()",
      "113": "ExcelFieldConfigTest::::buildByExcelFieldEmptyTitle()",
      "114": "ExcelFieldConfigTest::::buildByExcelFieldEmptyTitle()",
      "115": "ExcelFieldConfigTest::::buildByExcelFieldEmptyTitle()",
      "116": "ExcelFieldConfigTest::::buildByExcelFieldEmptyTitle()",
      "117": "ExcelFieldConfigTest::::buildByExcelFieldEmptyTitle()",
      "118": "ExcelFieldConfigTest::::buildByExcelFieldEmptyTitle()",
      "120": "ExcelFieldConfigTest::::buildByExcelField()",
      "121": "ExcelFieldConfigTest::::buildByExcelField()",
      "122": "ExcelFieldConfigTest::::buildByExcelField()",
      "123": "ExcelFieldConfigTest::::buildByExcelField()",
      "124": "ExcelFieldConfigTest::::buildByExcelField()",
      "125": "ExcelFieldConfigTest::::buildByExcelField()",
      "126": "ExcelFieldConfigTest::::buildByExcelField()",
      "127": "ExcelFieldConfigTest::::buildByExcelField()",
      "128": "ExcelFieldConfigTest::::buildByExcelField()",
      "129": "ExcelFieldConfigTest::::buildByExcelField()",
      "130": "ExcelFieldConfigTest::::buildByExcelField()",
      "131": "ExcelFieldConfigTest::::buildByExcelField()",
      "132": "ExcelFieldConfigTest::::buildByExcelField()",
      "133": "ExcelFieldConfigTest::::buildByExcelField()",
      "134": "ExcelFieldConfigTest::::buildByExcelField()",
      "135": "ExcelFieldConfigTest::::buildByExcelField()",
      "136": "ExcelFieldConfigTest::::buildByExcelField()",
      "137": "ExcelFieldConfigTest::::buildByExcelField()",
      "138": "ExcelFieldConfigTest::::buildByExcelField()",
      "139": "ExcelFieldConfigTest::::buildByExcelField()",
      "140": "ExcelFieldConfigTest::::buildByExcelField()",
      "141": "ExcelFieldConfigTest::::buildByExcelField()",
      "142": "ExcelFieldConfigTest::::buildByExcelField()",
      "143": "ExcelFieldConfigTest::::buildByExcelField()",
      "144": "ExcelFieldConfigTest::::buildByExcelField()",
      "145": "ExcelFieldConfigTest::::buildByExcelField()",
      "146": "ExcelFieldConfigTest::::buildByExcelField()",
      "147": "ExcelFieldConfigTest::::buildByExcelField()",
      "148": "ExcelFieldConfigTest::::buildByExcelField()",
      "149": "ExcelFieldConfigTest::::buildByExcelField()",
      "150": "ExcelFieldConfigTest::::buildByExcelField()",
      "151": "ExcelFieldConfigTest::::buildByExcelField()",
      "152": "ExcelFieldConfigTest::::buildByExcelField()",
      "153": "ExcelFieldConfigTest::::buildByExcelField()"
    },
    "tests": [
      {
        "test_lines": [
          47,
          64
        ],
        "covered_lines": [
          34,
          38,
          44,
          47,
          50,
          54,
          57,
          60,
          63,
          66,
          69,
          72,
          75
        ]
      },
      {
        "test_lines": [
          66,
          85
        ],
        "covered_lines": [
          34,
          38,
          44,
          47,
          50,
          54,
          57,
          60,
          63,
          66,
          69,
          72,
          75,
          79,
          80,
          81,
          82,
          83
        ]
      },
      {
        "test_lines": [
          88,
          118
        ],
        "covered_lines": [
          34,
          38,
          41,
          44,
          47,
          50,
          54,
          57,
          60,
          63,
          66,
          69,
          72,
          75,
          88,
          89,
          90,
          91,
          92,
          93,
          94,
          95,
          96,
          97,
          98,
          99,
          100,
          101,
          102,
          103
        ]
      },
      {
        "test_lines": [
          120,
          153
        ],
        "covered_lines": [
          34,
          38,
          41,
          44,
          47,
          50,
          54,
          57,
          60,
          63,
          66,
          69,
          72,
          75,
          88,
          89,
          90,
          91,
          92,
          93,
          94,
          95,
          96,
          97,
          98,
          99,
          100,
          101,
          102,
          103
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/zouzhiy-excel/src/main/java/io/github/zouzhiy/excel/metadata/config/ExcelFontConfig.java": {
    "class_content": [
      "/*\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package io.github.zouzhiy.excel.metadata.config;\n",
      "\n",
      "import io.github.zouzhiy.excel.annotation.ExcelFont;\n",
      "import io.github.zouzhiy.excel.enums.FontTypeOffset;\n",
      "import lombok.Builder;\n",
      "import lombok.EqualsAndHashCode;\n",
      "import lombok.Getter;\n",
      "import lombok.ToString;\n",
      "import org.apache.poi.common.usermodel.fonts.FontCharset;\n",
      "import org.apache.poi.ss.usermodel.Font;\n",
      "import org.apache.poi.ss.usermodel.FontUnderline;\n",
      "\n",
      "/**\n",
      " * \u5b57\u4f53\u914d\u7f6e {@link io.github.zouzhiy.excel.annotation.ExcelFont}\n",
      " *\n",
      " * @author zouzhiy\n",
      " * @since 2022/7/2\n",
      " */\n",
      "@Getter\n",
      "@ToString\n",
      "@EqualsAndHashCode\n",
      "@Builder\n",
      "public class ExcelFontConfig {\n",
      "\n",
      "    /**\n",
      "     * \u5b57\u4f53\u540d\u79f0\n",
      "     */\n",
      "    @Builder.Default\n",
      "    private final String fontName = \"\u5b8b\u4f53\";\n",
      "\n",
      "    /**\n",
      "     * \u5b57\u4f53\u5927\u5c0f\u3002\u7279\u6b8a\u5355\u4f4d\n",
      "     */\n",
      "    @Builder.Default\n",
      "    private final short fontHeight = -1;\n",
      "\n",
      "    /**\n",
      "     * \u5b57\u4f53\u5927\u5c0f\u3002\u901a\u5e38\u770b\u5230\u7684\u5b57\u4f53\u5927\u5c0f\n",
      "     */\n",
      "    @Builder.Default\n",
      "    private final short fontHeightInPoints = -1;\n",
      "\n",
      "    /**\n",
      "     * \u659c\u4f53\n",
      "     */\n",
      "    @Builder.Default\n",
      "    private final boolean italic = false;\n",
      "\n",
      "    /**\n",
      "     * \u5220\u9664\u7ebf\n",
      "     */\n",
      "    @Builder.Default\n",
      "    private final boolean strikeout = false;\n",
      "\n",
      "    /**\n",
      "     * \u5b57\u4f53\u989c\u8272\n",
      "     */\n",
      "    @Builder.Default\n",
      "    private final short color = Font.COLOR_NORMAL;\n",
      "\n",
      "    /**\n",
      "     *\n",
      "     */\n",
      "    @Builder.Default\n",
      "    private final FontTypeOffset typeOffset = FontTypeOffset.NONE;\n",
      "\n",
      "    /**\n",
      "     * \u4e0b\u5212\u7ebf\n",
      "     */\n",
      "    @Builder.Default\n",
      "    private final FontUnderline underline = FontUnderline.NONE;\n",
      "\n",
      "    /**\n",
      "     * \u5b57\u7b26\n",
      "     */\n",
      "    @Builder.Default\n",
      "    private final FontCharset charset = FontCharset.DEFAULT;\n",
      "\n",
      "    /**\n",
      "     * \u52a0\u7c97\n",
      "     */\n",
      "    @Builder.Default\n",
      "    private final boolean bold = false;\n",
      "\n",
      "    public static ExcelFontConfig getDefaultExcelFontConfigTitle() {\n",
      "        return ExcelFontConfig.builder()\n",
      "                .fontHeightInPoints((short) 16)\n",
      "                .bold(true)\n",
      "                .build();\n",
      "\n",
      "    }\n",
      "\n",
      "    public static ExcelFontConfig getDefaultExcelFontConfigHead() {\n",
      "        return ExcelFontConfig.builder()\n",
      "                .fontHeightInPoints((short) 13)\n",
      "                .bold(true)\n",
      "                .build();\n",
      "    }\n",
      "\n",
      "    public static ExcelFontConfig getDefaultExcelFontConfigData() {\n",
      "        return ExcelFontConfig.builder()\n",
      "                .fontHeightInPoints((short) 10)\n",
      "                .build();\n",
      "    }\n",
      "\n",
      "    public static ExcelFontConfig buildByExcelFont(ExcelFont excelFont) {\n",
      "        return ExcelFontConfig.builder()\n",
      "                .fontName(excelFont.fontName())\n",
      "                .fontHeight(excelFont.fontHeight())\n",
      "                .fontHeightInPoints(excelFont.fontHeightInPoints())\n",
      "                .italic(excelFont.italic())\n",
      "                .strikeout(excelFont.strikeout())\n",
      "                .color(excelFont.color())\n",
      "                .typeOffset(excelFont.typeOffset())\n",
      "                .underline(excelFont.underline())\n",
      "                .charset(excelFont.charset())\n",
      "                .bold(excelFont.bold())\n",
      "                .build();\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package io.github.zouzhiy.excel.metadata.config;\n",
      "\n",
      "import io.github.zouzhiy.excel.annotation.ExcelFont;\n",
      "import io.github.zouzhiy.excel.enums.FontTypeOffset;\n",
      "import org.apache.poi.common.usermodel.fonts.FontCharset;\n",
      "import org.apache.poi.ss.usermodel.Font;\n",
      "import org.apache.poi.ss.usermodel.FontUnderline;\n",
      "import org.junit.jupiter.api.Assertions;\n",
      "import org.junit.jupiter.api.RepeatedTest;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.mockito.Mockito;\n",
      "\n",
      "import java.util.Random;\n",
      "\n",
      "class ExcelFontConfigTest {\n",
      "\n",
      "    private final Random random = new Random(System.currentTimeMillis());\n",
      "\n",
      "    static void mockExcelFont(ExcelFont excelFont, Random random) {\n",
      "        Mockito.when(excelFont.fontName()).thenReturn(\"\" + random.nextDouble());\n",
      "        Mockito.when(excelFont.fontHeight()).thenReturn((short) random.nextInt(Short.MAX_VALUE));\n",
      "        Mockito.when(excelFont.fontHeightInPoints()).thenReturn((short) random.nextInt(Short.MAX_VALUE));\n",
      "        Mockito.when(excelFont.italic()).thenReturn(random.nextBoolean());\n",
      "        Mockito.when(excelFont.strikeout()).thenReturn(random.nextBoolean());\n",
      "        Mockito.when(excelFont.color()).thenReturn((short) random.nextInt(Short.MAX_VALUE));\n",
      "        Mockito.when(excelFont.typeOffset()).thenReturn(FontTypeOffset.values()[random.nextInt(FontTypeOffset.values().length)]);\n",
      "        Mockito.when(excelFont.underline()).thenReturn(FontUnderline.values()[random.nextInt(FontUnderline.values().length)]);\n",
      "        Mockito.when(excelFont.charset()).thenReturn(FontCharset.values()[random.nextInt(FontCharset.values().length)]);\n",
      "        Mockito.when(excelFont.bold()).thenReturn(random.nextBoolean());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getDefaultExcelFontConfig() {\n",
      "        ExcelFontConfig excelFontConfig = ExcelFontConfig.builder().build();\n",
      "\n",
      "        Assertions.assertEquals(excelFontConfig.getFontName(), \"\u5b8b\u4f53\");\n",
      "        Assertions.assertEquals(excelFontConfig.getFontHeight(), -1);\n",
      "        Assertions.assertEquals(excelFontConfig.getFontHeightInPoints(), -1);\n",
      "        Assertions.assertFalse(excelFontConfig.isItalic());\n",
      "        Assertions.assertFalse(excelFontConfig.isStrikeout());\n",
      "        Assertions.assertEquals(excelFontConfig.getColor(), Font.COLOR_NORMAL);\n",
      "        Assertions.assertEquals(excelFontConfig.getTypeOffset(), FontTypeOffset.NONE);\n",
      "        Assertions.assertEquals(excelFontConfig.getUnderline(), FontUnderline.NONE);\n",
      "        Assertions.assertEquals(excelFontConfig.getCharset(), FontCharset.DEFAULT);\n",
      "        Assertions.assertFalse(excelFontConfig.isBold());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getDefaultExcelFontConfigTitle() {\n",
      "        ExcelFontConfig excelFontConfig = ExcelFontConfig.getDefaultExcelFontConfigTitle();\n",
      "\n",
      "        Assertions.assertEquals(excelFontConfig.getFontName(), \"\u5b8b\u4f53\");\n",
      "        Assertions.assertEquals(excelFontConfig.getFontHeight(), -1);\n",
      "        Assertions.assertEquals(excelFontConfig.getFontHeightInPoints(), 16);\n",
      "        Assertions.assertFalse(excelFontConfig.isItalic());\n",
      "        Assertions.assertFalse(excelFontConfig.isStrikeout());\n",
      "        Assertions.assertEquals(excelFontConfig.getColor(), Font.COLOR_NORMAL);\n",
      "        Assertions.assertEquals(excelFontConfig.getTypeOffset(), FontTypeOffset.NONE);\n",
      "        Assertions.assertEquals(excelFontConfig.getUnderline(), FontUnderline.NONE);\n",
      "        Assertions.assertEquals(excelFontConfig.getCharset(), FontCharset.DEFAULT);\n",
      "        Assertions.assertTrue(excelFontConfig.isBold());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getDefaultExcelFontConfigHead() {\n",
      "        ExcelFontConfig excelFontConfig = ExcelFontConfig.getDefaultExcelFontConfigHead();\n",
      "\n",
      "        Assertions.assertEquals(excelFontConfig.getFontName(), \"\u5b8b\u4f53\");\n",
      "        Assertions.assertEquals(excelFontConfig.getFontHeight(), -1);\n",
      "        Assertions.assertEquals(excelFontConfig.getFontHeightInPoints(), 13);\n",
      "        Assertions.assertFalse(excelFontConfig.isItalic());\n",
      "        Assertions.assertFalse(excelFontConfig.isStrikeout());\n",
      "        Assertions.assertEquals(excelFontConfig.getColor(), Font.COLOR_NORMAL);\n",
      "        Assertions.assertEquals(excelFontConfig.getTypeOffset(), FontTypeOffset.NONE);\n",
      "        Assertions.assertEquals(excelFontConfig.getUnderline(), FontUnderline.NONE);\n",
      "        Assertions.assertEquals(excelFontConfig.getCharset(), FontCharset.DEFAULT);\n",
      "        Assertions.assertTrue(excelFontConfig.isBold());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getDefaultExcelFontConfigData() {\n",
      "        ExcelFontConfig excelFontConfig = ExcelFontConfig.getDefaultExcelFontConfigData();\n",
      "\n",
      "        Assertions.assertEquals(excelFontConfig.getFontName(), \"\u5b8b\u4f53\");\n",
      "        Assertions.assertEquals(excelFontConfig.getFontHeight(), -1);\n",
      "        Assertions.assertEquals(excelFontConfig.getFontHeightInPoints(), 10);\n",
      "        Assertions.assertFalse(excelFontConfig.isItalic());\n",
      "        Assertions.assertFalse(excelFontConfig.isStrikeout());\n",
      "        Assertions.assertEquals(excelFontConfig.getColor(), Font.COLOR_NORMAL);\n",
      "        Assertions.assertEquals(excelFontConfig.getTypeOffset(), FontTypeOffset.NONE);\n",
      "        Assertions.assertEquals(excelFontConfig.getUnderline(), FontUnderline.NONE);\n",
      "        Assertions.assertEquals(excelFontConfig.getCharset(), FontCharset.DEFAULT);\n",
      "        Assertions.assertFalse(excelFontConfig.isBold());\n",
      "    }\n",
      "\n",
      "    @RepeatedTest(10)\n",
      "    void buildByExcelFont() {\n",
      "        ExcelFont excelFont = Mockito.mock(ExcelFont.class);\n",
      "\n",
      "        mockExcelFont(excelFont, random);\n",
      "\n",
      "        ExcelFontConfig excelFontConfig = ExcelFontConfig.buildByExcelFont(excelFont);\n",
      "\n",
      "        Assertions.assertEquals(excelFontConfig.getFontName(), excelFont.fontName());\n",
      "        Assertions.assertEquals(excelFontConfig.getFontHeight(), excelFont.fontHeight());\n",
      "        Assertions.assertEquals(excelFontConfig.getFontHeightInPoints(), excelFont.fontHeightInPoints());\n",
      "        Assertions.assertEquals(excelFontConfig.isItalic(), excelFont.italic());\n",
      "        Assertions.assertEquals(excelFontConfig.isStrikeout(), excelFont.strikeout());\n",
      "        Assertions.assertEquals(excelFontConfig.getColor(), excelFont.color());\n",
      "        Assertions.assertEquals(excelFontConfig.getTypeOffset(), excelFont.typeOffset());\n",
      "        Assertions.assertEquals(excelFontConfig.getUnderline(), excelFont.underline());\n",
      "        Assertions.assertEquals(excelFontConfig.getCharset(), excelFont.charset());\n",
      "        Assertions.assertEquals(excelFontConfig.isBold(), excelFont.bold());\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "ExcelFontConfig::::getDefaultExcelFontConfigTitle()": [
        98,
        104
      ],
      "ExcelFontConfig::::getDefaultExcelFontConfigHead()": [
        106,
        111
      ],
      "ExcelFontConfig::::getDefaultExcelFontConfigData()": [
        113,
        117
      ],
      "ExcelFontConfig::::buildByExcelFont(io.github.zouzhiy.excel.annotation.ExcelFont)": [
        119,
        132
      ]
    },
    "test_method_lines_dic": {
      "ExcelFontConfigTest::::getDefaultExcelFontConfig()": [
        32,
        46
      ],
      "ExcelFontConfigTest::::getDefaultExcelFontConfigTitle()": [
        48,
        62
      ],
      "ExcelFontConfigTest::::getDefaultExcelFontConfigHead()": [
        64,
        78
      ],
      "ExcelFontConfigTest::::getDefaultExcelFontConfigData()": [
        80,
        94
      ],
      "ExcelFontConfigTest::::buildByExcelFont()": [
        96,
        114
      ]
    },
    "reverse_method_lines_dic": {
      "98": "ExcelFontConfig::::getDefaultExcelFontConfigTitle()",
      "99": "ExcelFontConfig::::getDefaultExcelFontConfigTitle()",
      "100": "ExcelFontConfig::::getDefaultExcelFontConfigTitle()",
      "101": "ExcelFontConfig::::getDefaultExcelFontConfigTitle()",
      "102": "ExcelFontConfig::::getDefaultExcelFontConfigTitle()",
      "103": "ExcelFontConfig::::getDefaultExcelFontConfigTitle()",
      "104": "ExcelFontConfig::::getDefaultExcelFontConfigTitle()",
      "106": "ExcelFontConfig::::getDefaultExcelFontConfigHead()",
      "107": "ExcelFontConfig::::getDefaultExcelFontConfigHead()",
      "108": "ExcelFontConfig::::getDefaultExcelFontConfigHead()",
      "109": "ExcelFontConfig::::getDefaultExcelFontConfigHead()",
      "110": "ExcelFontConfig::::getDefaultExcelFontConfigHead()",
      "111": "ExcelFontConfig::::getDefaultExcelFontConfigHead()",
      "113": "ExcelFontConfig::::getDefaultExcelFontConfigData()",
      "114": "ExcelFontConfig::::getDefaultExcelFontConfigData()",
      "115": "ExcelFontConfig::::getDefaultExcelFontConfigData()",
      "116": "ExcelFontConfig::::getDefaultExcelFontConfigData()",
      "117": "ExcelFontConfig::::getDefaultExcelFontConfigData()",
      "119": "ExcelFontConfig::::buildByExcelFont(io.github.zouzhiy.excel.annotation.ExcelFont)",
      "120": "ExcelFontConfig::::buildByExcelFont(io.github.zouzhiy.excel.annotation.ExcelFont)",
      "121": "ExcelFontConfig::::buildByExcelFont(io.github.zouzhiy.excel.annotation.ExcelFont)",
      "122": "ExcelFontConfig::::buildByExcelFont(io.github.zouzhiy.excel.annotation.ExcelFont)",
      "123": "ExcelFontConfig::::buildByExcelFont(io.github.zouzhiy.excel.annotation.ExcelFont)",
      "124": "ExcelFontConfig::::buildByExcelFont(io.github.zouzhiy.excel.annotation.ExcelFont)",
      "125": "ExcelFontConfig::::buildByExcelFont(io.github.zouzhiy.excel.annotation.ExcelFont)",
      "126": "ExcelFontConfig::::buildByExcelFont(io.github.zouzhiy.excel.annotation.ExcelFont)",
      "127": "ExcelFontConfig::::buildByExcelFont(io.github.zouzhiy.excel.annotation.ExcelFont)",
      "128": "ExcelFontConfig::::buildByExcelFont(io.github.zouzhiy.excel.annotation.ExcelFont)",
      "129": "ExcelFontConfig::::buildByExcelFont(io.github.zouzhiy.excel.annotation.ExcelFont)",
      "130": "ExcelFontConfig::::buildByExcelFont(io.github.zouzhiy.excel.annotation.ExcelFont)",
      "131": "ExcelFontConfig::::buildByExcelFont(io.github.zouzhiy.excel.annotation.ExcelFont)",
      "132": "ExcelFontConfig::::buildByExcelFont(io.github.zouzhiy.excel.annotation.ExcelFont)"
    },
    "test_reverse_method_lines_dic": {
      "32": "ExcelFontConfigTest::::getDefaultExcelFontConfig()",
      "33": "ExcelFontConfigTest::::getDefaultExcelFontConfig()",
      "34": "ExcelFontConfigTest::::getDefaultExcelFontConfig()",
      "35": "ExcelFontConfigTest::::getDefaultExcelFontConfig()",
      "36": "ExcelFontConfigTest::::getDefaultExcelFontConfig()",
      "37": "ExcelFontConfigTest::::getDefaultExcelFontConfig()",
      "38": "ExcelFontConfigTest::::getDefaultExcelFontConfig()",
      "39": "ExcelFontConfigTest::::getDefaultExcelFontConfig()",
      "40": "ExcelFontConfigTest::::getDefaultExcelFontConfig()",
      "41": "ExcelFontConfigTest::::getDefaultExcelFontConfig()",
      "42": "ExcelFontConfigTest::::getDefaultExcelFontConfig()",
      "43": "ExcelFontConfigTest::::getDefaultExcelFontConfig()",
      "44": "ExcelFontConfigTest::::getDefaultExcelFontConfig()",
      "45": "ExcelFontConfigTest::::getDefaultExcelFontConfig()",
      "46": "ExcelFontConfigTest::::getDefaultExcelFontConfig()",
      "48": "ExcelFontConfigTest::::getDefaultExcelFontConfigTitle()",
      "49": "ExcelFontConfigTest::::getDefaultExcelFontConfigTitle()",
      "50": "ExcelFontConfigTest::::getDefaultExcelFontConfigTitle()",
      "51": "ExcelFontConfigTest::::getDefaultExcelFontConfigTitle()",
      "52": "ExcelFontConfigTest::::getDefaultExcelFontConfigTitle()",
      "53": "ExcelFontConfigTest::::getDefaultExcelFontConfigTitle()",
      "54": "ExcelFontConfigTest::::getDefaultExcelFontConfigTitle()",
      "55": "ExcelFontConfigTest::::getDefaultExcelFontConfigTitle()",
      "56": "ExcelFontConfigTest::::getDefaultExcelFontConfigTitle()",
      "57": "ExcelFontConfigTest::::getDefaultExcelFontConfigTitle()",
      "58": "ExcelFontConfigTest::::getDefaultExcelFontConfigTitle()",
      "59": "ExcelFontConfigTest::::getDefaultExcelFontConfigTitle()",
      "60": "ExcelFontConfigTest::::getDefaultExcelFontConfigTitle()",
      "61": "ExcelFontConfigTest::::getDefaultExcelFontConfigTitle()",
      "62": "ExcelFontConfigTest::::getDefaultExcelFontConfigTitle()",
      "64": "ExcelFontConfigTest::::getDefaultExcelFontConfigHead()",
      "65": "ExcelFontConfigTest::::getDefaultExcelFontConfigHead()",
      "66": "ExcelFontConfigTest::::getDefaultExcelFontConfigHead()",
      "67": "ExcelFontConfigTest::::getDefaultExcelFontConfigHead()",
      "68": "ExcelFontConfigTest::::getDefaultExcelFontConfigHead()",
      "69": "ExcelFontConfigTest::::getDefaultExcelFontConfigHead()",
      "70": "ExcelFontConfigTest::::getDefaultExcelFontConfigHead()",
      "71": "ExcelFontConfigTest::::getDefaultExcelFontConfigHead()",
      "72": "ExcelFontConfigTest::::getDefaultExcelFontConfigHead()",
      "73": "ExcelFontConfigTest::::getDefaultExcelFontConfigHead()",
      "74": "ExcelFontConfigTest::::getDefaultExcelFontConfigHead()",
      "75": "ExcelFontConfigTest::::getDefaultExcelFontConfigHead()",
      "76": "ExcelFontConfigTest::::getDefaultExcelFontConfigHead()",
      "77": "ExcelFontConfigTest::::getDefaultExcelFontConfigHead()",
      "78": "ExcelFontConfigTest::::getDefaultExcelFontConfigHead()",
      "80": "ExcelFontConfigTest::::getDefaultExcelFontConfigData()",
      "81": "ExcelFontConfigTest::::getDefaultExcelFontConfigData()",
      "82": "ExcelFontConfigTest::::getDefaultExcelFontConfigData()",
      "83": "ExcelFontConfigTest::::getDefaultExcelFontConfigData()",
      "84": "ExcelFontConfigTest::::getDefaultExcelFontConfigData()",
      "85": "ExcelFontConfigTest::::getDefaultExcelFontConfigData()",
      "86": "ExcelFontConfigTest::::getDefaultExcelFontConfigData()",
      "87": "ExcelFontConfigTest::::getDefaultExcelFontConfigData()",
      "88": "ExcelFontConfigTest::::getDefaultExcelFontConfigData()",
      "89": "ExcelFontConfigTest::::getDefaultExcelFontConfigData()",
      "90": "ExcelFontConfigTest::::getDefaultExcelFontConfigData()",
      "91": "ExcelFontConfigTest::::getDefaultExcelFontConfigData()",
      "92": "ExcelFontConfigTest::::getDefaultExcelFontConfigData()",
      "93": "ExcelFontConfigTest::::getDefaultExcelFontConfigData()",
      "94": "ExcelFontConfigTest::::getDefaultExcelFontConfigData()",
      "96": "ExcelFontConfigTest::::buildByExcelFont()",
      "97": "ExcelFontConfigTest::::buildByExcelFont()",
      "98": "ExcelFontConfigTest::::buildByExcelFont()",
      "99": "ExcelFontConfigTest::::buildByExcelFont()",
      "100": "ExcelFontConfigTest::::buildByExcelFont()",
      "101": "ExcelFontConfigTest::::buildByExcelFont()",
      "102": "ExcelFontConfigTest::::buildByExcelFont()",
      "103": "ExcelFontConfigTest::::buildByExcelFont()",
      "104": "ExcelFontConfigTest::::buildByExcelFont()",
      "105": "ExcelFontConfigTest::::buildByExcelFont()",
      "106": "ExcelFontConfigTest::::buildByExcelFont()",
      "107": "ExcelFontConfigTest::::buildByExcelFont()",
      "108": "ExcelFontConfigTest::::buildByExcelFont()",
      "109": "ExcelFontConfigTest::::buildByExcelFont()",
      "110": "ExcelFontConfigTest::::buildByExcelFont()",
      "111": "ExcelFontConfigTest::::buildByExcelFont()",
      "112": "ExcelFontConfigTest::::buildByExcelFont()",
      "113": "ExcelFontConfigTest::::buildByExcelFont()",
      "114": "ExcelFontConfigTest::::buildByExcelFont()"
    },
    "tests": [
      {
        "test_lines": [
          32,
          46
        ],
        "covered_lines": [
          35,
          42,
          48,
          54,
          60,
          66,
          72,
          78,
          84,
          90,
          96
        ]
      },
      {
        "test_lines": [
          48,
          62
        ],
        "covered_lines": [
          35,
          42,
          48,
          54,
          60,
          66,
          72,
          78,
          84,
          90,
          96,
          99,
          100,
          101,
          102
        ]
      },
      {
        "test_lines": [
          64,
          78
        ],
        "covered_lines": [
          35,
          42,
          48,
          54,
          60,
          66,
          72,
          78,
          84,
          90,
          96,
          107,
          108,
          109,
          110
        ]
      },
      {
        "test_lines": [
          80,
          94
        ],
        "covered_lines": [
          35,
          42,
          48,
          54,
          60,
          66,
          72,
          78,
          84,
          90,
          96,
          114,
          115,
          116
        ]
      },
      {
        "test_lines": [
          96,
          114
        ],
        "covered_lines": [
          35,
          42,
          48,
          54,
          60,
          66,
          72,
          78,
          84,
          90,
          96,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/zouzhiy-excel/src/main/java/io/github/zouzhiy/excel/metadata/result/RowResultSet.java": {
    "class_content": [
      "/*\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package io.github.zouzhiy.excel.metadata.result;\n",
      "\n",
      "import lombok.EqualsAndHashCode;\n",
      "import lombok.Getter;\n",
      "import lombok.ToString;\n",
      "\n",
      "/**\n",
      " * @author zouzhiy\n",
      " * @since 2022/7/2\n",
      " */\n",
      "@Getter\n",
      "@ToString\n",
      "@EqualsAndHashCode\n",
      "public class RowResultSet<T> {\n",
      "\n",
      "    /**\n",
      "     * \u884c\u6570\u636e\n",
      "     */\n",
      "    private final T data;\n",
      "    /**\n",
      "     * \u884c\u53f7\n",
      "     */\n",
      "    private final int rowIndex;\n",
      "    /**\n",
      "     * \u7eb5\u5411\u6240\u8de8\u7684\u884c\u6570\n",
      "     */\n",
      "    private final int rowspan;\n",
      "\n",
      "    private RowResultSet(T data, int rowIndex, int rowspan) {\n",
      "        this.data = data;\n",
      "        this.rowIndex = rowIndex;\n",
      "        this.rowspan = rowspan;\n",
      "    }\n",
      "\n",
      "    public static <T> RowResultSet<T> newInstance(T data, int rowIndex, int rowspan) {\n",
      "        return new RowResultSet<>(data, rowIndex, rowspan);\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package io.github.zouzhiy.excel.metadata.result;\n",
      "\n",
      "import io.github.zouzhiy.excel.support.metadata.DemoDefault;\n",
      "import org.junit.jupiter.api.Assertions;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.mockito.Mockito;\n",
      "\n",
      "import java.util.Random;\n",
      "\n",
      "class RowResultSetTest {\n",
      "\n",
      "    private final Random random = new Random(System.currentTimeMillis());\n",
      "\n",
      "    @Test\n",
      "    void newInstance() {\n",
      "        DemoDefault demoDefault = Mockito.mock(DemoDefault.class);\n",
      "        int rowIndex = random.nextInt();\n",
      "        int rowspan = random.nextInt();\n",
      "\n",
      "        RowResultSet<DemoDefault> rowResultSet = RowResultSet.newInstance(demoDefault, rowIndex, rowspan);\n",
      "\n",
      "        Assertions.assertEquals(rowResultSet.getData(), demoDefault);\n",
      "        Assertions.assertEquals(rowResultSet.getRowIndex(), rowIndex);\n",
      "        Assertions.assertEquals(rowResultSet.getRowspan(), rowspan);\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "RowResultSet::::newInstance(T,int,int)": [
        48,
        50
      ]
    },
    "test_method_lines_dic": {
      "RowResultSetTest::::newInstance()": [
        14,
        25
      ]
    },
    "reverse_method_lines_dic": {
      "48": "RowResultSet::::newInstance(T,int,int)",
      "49": "RowResultSet::::newInstance(T,int,int)",
      "50": "RowResultSet::::newInstance(T,int,int)"
    },
    "test_reverse_method_lines_dic": {
      "14": "RowResultSetTest::::newInstance()",
      "15": "RowResultSetTest::::newInstance()",
      "16": "RowResultSetTest::::newInstance()",
      "17": "RowResultSetTest::::newInstance()",
      "18": "RowResultSetTest::::newInstance()",
      "19": "RowResultSetTest::::newInstance()",
      "20": "RowResultSetTest::::newInstance()",
      "21": "RowResultSetTest::::newInstance()",
      "22": "RowResultSetTest::::newInstance()",
      "23": "RowResultSetTest::::newInstance()",
      "24": "RowResultSetTest::::newInstance()",
      "25": "RowResultSetTest::::newInstance()"
    },
    "tests": [
      {
        "test_lines": [
          14,
          25
        ],
        "covered_lines": [
          32,
          36,
          40,
          42,
          43,
          44,
          45,
          46,
          49
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/zouzhiy-excel/src/main/java/io/github/zouzhiy/excel/metadata/result/CellResultSet.java": {
    "class_content": [
      "/*\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package io.github.zouzhiy.excel.metadata.result;\n",
      "\n",
      "import io.github.zouzhiy.excel.enums.ExcelType;\n",
      "import io.github.zouzhiy.excel.exceptions.ExcelException;\n",
      "import lombok.EqualsAndHashCode;\n",
      "import lombok.Getter;\n",
      "import lombok.ToString;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.Collections;\n",
      "import java.util.List;\n",
      "\n",
      "/**\n",
      " * \u591a\u4e2a\u5355\u5143\u683c\u503c\u8bfb\u53d6\u7ed3\u679c\n",
      " * \u4e3a\u8de8\u884c\u8de8\u5217\u6570\u636e\u8bfb\u53d6\u63d0\u4f9b\u652f\u6301\n",
      " * * @author zouzhiy\n",
      " *\n",
      " * @since 2022/7/2\n",
      " */\n",
      "@ToString\n",
      "@EqualsAndHashCode\n",
      "public class CellResultSet {\n",
      "\n",
      "    /**\n",
      "     * List<\u6bcf\u4e00\u884c\u7684\u503cList<\u540c\u4e00\u884c\u4e0b\u4e0d\u540c\u5217\u7684\u503c>>\n",
      "     * row1col1, row2col2\n",
      "     * row2col1, row2cole2\n",
      "     * <p>\n",
      "     * \u6bcf\u4e00\u884c\u7684col\u6570\u91cf\u5fc5\u987b\u4e00\u81f4\n",
      "     */\n",
      "    @Getter\n",
      "    List<List<CellResult>> cellResultListList;\n",
      "\n",
      "    /**\n",
      "     * \u7a7a\u503c\n",
      "     *\n",
      "     * @return list\u957f\u5ea6\u4e3a0\n",
      "     */\n",
      "    public static CellResultSet none() {\n",
      "        CellResultSet cellResultSet = new CellResultSet();\n",
      "        cellResultSet.cellResultListList = Collections.emptyList();\n",
      "        return cellResultSet;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u76f4\u63a5\u521b\u5efa\u65b0\u5bf9\u8c61\n",
      "     *\n",
      "     * @param cellResultListList \u5355\u5143\u683c\u7ed3\u679c\u4e8c\u7ef4\u5217\u8868\n",
      "     * @return \u591a\u4e2a\u5355\u5143\u683c\u503c\u8bfb\u53d6\u7ed3\u679c\n",
      "     */\n",
      "    public static CellResultSet newInstance(List<List<CellResult>> cellResultListList) {\n",
      "        CellResultSet.validated(cellResultListList);\n",
      "        CellResultSet cellResultSet = new CellResultSet();\n",
      "        cellResultSet.cellResultListList = cellResultListList;\n",
      "        return cellResultSet;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u4e00\u822c\u60c5\u51b5\u4e0b\u7684\u7ed3\u679c\uff0c\u4e0d\u5b58\u5728\u5408\u5e76\u5355\u5143\u683c\u3002\u5219\u53ea\u6709\u4e00\u884c\u4e00\u5217\n",
      "     *\n",
      "     * @param cellResult \u5355\u4e2a\u5355\u5143\u683c\u503c\n",
      "     * @return \u5305\u88c5\u540e\u7684\u591a\u4e2a\u7ed3\u679c\u503c\n",
      "     */\n",
      "    public static CellResultSet firstCellResult(CellResult cellResult) {\n",
      "        CellResultSet cellResultSet = new CellResultSet();\n",
      "        List<List<CellResult>> cellResultListList = new ArrayList<>(1);\n",
      "        List<CellResult> cellResultList = new ArrayList<>(1);\n",
      "        cellResultList.add(cellResult);\n",
      "        cellResultListList.add(cellResultList);\n",
      "        cellResultSet.cellResultListList = cellResultListList;\n",
      "\n",
      "        return cellResultSet;\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u6821\u9a8c\u7ed3\u679c\u96c6\u662f\u5426\u5408\u6cd5\n",
      "     * \u6bcf\u4e00\u4e2arow\u7684col\u8981\u76f8\u7b49\n",
      "     */\n",
      "    private static void validated(List<List<CellResult>> cellResultListList) {\n",
      "        Integer preSize = null;\n",
      "        for (List<CellResult> cellResultList : cellResultListList) {\n",
      "            int size = cellResultList.size();\n",
      "            if (preSize == null) {\n",
      "                preSize = size;\n",
      "            } else if (preSize != size) {\n",
      "                throw new ExcelException(\"cellResultListList \u6570\u636e\u4e0d\u7b26\u5408\u9884\u671f\");\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8fd4\u56de\u7ed3\u679c\u96c6\u7684\u5355\u5143\u683c\u7c7b\u578b\u3002\n",
      "     * \u4ee5\u7b2c\u4e00\u4e2a\u5355\u5143\u683c\u7c7b\u578b\u4e3a\u51c6\u3002\n",
      "     *\n",
      "     * @return \u5355\u5143\u683c\u7c7b\u578b\n",
      "     */\n",
      "    public ExcelType getExcelType() {\n",
      "        return this.getFirstCellResult().getExcelType();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u7ed3\u679c\u4e3a\u7a7a \u5bf9\u5e94\u7684\u662f\u5355\u5143\u683c\u4e3anull\n",
      "     *\n",
      "     * @return \u662f\u5426\u4e3a\u7a7a\n",
      "     */\n",
      "    public boolean isNone() {\n",
      "        if (cellResultListList == null || cellResultListList.isEmpty()) {\n",
      "            return true;\n",
      "        }\n",
      "        for (List<CellResult> cellResultList : cellResultListList) {\n",
      "            if (cellResultList != null && !cellResultList.isEmpty()) {\n",
      "                return false;\n",
      "            }\n",
      "        }\n",
      "        return true;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u7ed3\u679c\u96c6\u7684\u7b2c\u4e00\u4e2a\u5355\u5143\u683c\u503c\u3002\n",
      "     * \u82e5\u6570\u636e\u4e0d\u8de8\u884c\u8de8\u5217\uff0c\u5219\u6b64\u7ed3\u679c\u5373\u4e3a\u5b9e\u9645\u7684\u8bfb\u53d6\u503c\n",
      "     *\n",
      "     * @return \u5355\u5143\u683c\u503c\n",
      "     */\n",
      "    public CellResult getFirstCellResult() {\n",
      "        if (cellResultListList == null || cellResultListList.isEmpty()) {\n",
      "            throw new ExcelException(\"cellResultListList \u7a7a\");\n",
      "        }\n",
      "        List<CellResult> cellResultList = cellResultListList.get(0);\n",
      "        if (cellResultList == null || cellResultList.isEmpty()) {\n",
      "            throw new ExcelException(\"cellResultListList \u7a7a\");\n",
      "        }\n",
      "\n",
      "        return cellResultList.get(0);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u7ed3\u679c\u96c6\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5355\u5143\u683c\u884c\u4e0b\u6807\n",
      "     *\n",
      "     * @return \u7b2c\u4e00\u4e2a\u5355\u5143\u683c\u884c\u4e0b\u6807\n",
      "     */\n",
      "    public int getFirstRowIndex() {\n",
      "        if (cellResultListList == null || cellResultListList.isEmpty()) {\n",
      "            return -1;\n",
      "        }\n",
      "        List<CellResult> cellResultList = cellResultListList.get(0);\n",
      "        if (cellResultList == null || cellResultList.isEmpty()) {\n",
      "            return -1;\n",
      "        }\n",
      "\n",
      "        return cellResultList.get(0).getRowIndex();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u7ed3\u679c\u96c6\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5355\u5143\u683c\u5217\u4e0b\u6807\n",
      "     *\n",
      "     * @return \u7b2c\u4e00\u4e2a\u5355\u5143\u683c\u5217\u4e0b\u6807\n",
      "     */\n",
      "    public int getFirstColIndex() {\n",
      "        if (cellResultListList == null || cellResultListList.isEmpty()) {\n",
      "            return -1;\n",
      "        }\n",
      "        List<CellResult> cellResultList = cellResultListList.get(0);\n",
      "        if (cellResultList == null || cellResultList.isEmpty()) {\n",
      "            return -1;\n",
      "        }\n",
      "\n",
      "        return cellResultList.get(0).getColumnIndex();\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package io.github.zouzhiy.excel.metadata.result;\n",
      "\n",
      "import io.github.zouzhiy.excel.enums.ExcelType;\n",
      "import io.github.zouzhiy.excel.exceptions.ExcelException;\n",
      "import org.junit.jupiter.api.Assertions;\n",
      "import org.junit.jupiter.api.RepeatedTest;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.junit.jupiter.api.extension.ExtendWith;\n",
      "import org.mockito.Mockito;\n",
      "import org.mockito.junit.jupiter.MockitoExtension;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.Collections;\n",
      "import java.util.List;\n",
      "import java.util.Random;\n",
      "\n",
      "@ExtendWith(MockitoExtension.class)\n",
      "public class CellResultSetTest {\n",
      "\n",
      "    private final Random random = new Random(System.currentTimeMillis());\n",
      "\n",
      "    @Test\n",
      "    void empty() {\n",
      "        CellResultSet cellResultSet = CellResultSet.none();\n",
      "        Assertions.assertTrue(cellResultSet.isNone());\n",
      "        Assertions.assertThrows(ExcelException.class, cellResultSet::getFirstCellResult);\n",
      "        Assertions.assertThrows(ExcelException.class, cellResultSet::getExcelType);\n",
      "        Assertions.assertTrue(cellResultSet.getCellResultListList().isEmpty());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void newInstance() {\n",
      "        List<List<CellResult>> cellResultListList = new ArrayList<>();\n",
      "\n",
      "        List<CellResult> cellResultList1 = new ArrayList<>();\n",
      "        CellResult cellResult1 = Mockito.mock(CellResult.class);\n",
      "        cellResultList1.add(cellResult1);\n",
      "\n",
      "        List<CellResult> cellResultList2 = new ArrayList<>();\n",
      "        CellResult cellResult2 = Mockito.mock(CellResult.class);\n",
      "        cellResultList2.add(cellResult2);\n",
      "\n",
      "        cellResultListList.add(cellResultList1);\n",
      "        cellResultListList.add(cellResultList2);\n",
      "\n",
      "        CellResultSet cellResultSet = CellResultSet.newInstance(cellResultListList);\n",
      "\n",
      "        Assertions.assertEquals(cellResultSet.getCellResultListList().size(), 2);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void validated() {\n",
      "        List<List<CellResult>> cellResultListList = new ArrayList<>();\n",
      "\n",
      "        List<CellResult> cellResultList1 = new ArrayList<>();\n",
      "        CellResult cellResult1 = Mockito.mock(CellResult.class);\n",
      "        CellResult cellResult2 = Mockito.mock(CellResult.class);\n",
      "        cellResultList1.add(cellResult1);\n",
      "        cellResultList1.add(cellResult2);\n",
      "\n",
      "        List<CellResult> cellResultList2 = new ArrayList<>();\n",
      "        CellResult cellResult21 = Mockito.mock(CellResult.class);\n",
      "        cellResultList2.add(cellResult21);\n",
      "\n",
      "        cellResultListList.add(cellResultList1);\n",
      "        cellResultListList.add(cellResultList2);\n",
      "\n",
      "        Assertions.assertThrows(ExcelException.class, () -> CellResultSet.newInstance(cellResultListList));\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getFirstCellResult1() {\n",
      "        CellResult cellResult = Mockito.mock(CellResult.class);\n",
      "        CellResultSet cellResultSet = CellResultSet.firstCellResult(cellResult);\n",
      "\n",
      "        Assertions.assertEquals(cellResultSet.getFirstCellResult(), cellResult);\n",
      "        Assertions.assertEquals(cellResultSet.getCellResultListList().size(), 1);\n",
      "        Assertions.assertEquals(cellResultSet.getCellResultListList().get(0).size(), 1);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getFirstCellResult2() {\n",
      "        List<List<CellResult>> cellResultListList = new ArrayList<>();\n",
      "\n",
      "        List<CellResult> cellResultList1 = new ArrayList<>();\n",
      "        List<CellResult> cellResultList2 = new ArrayList<>();\n",
      "\n",
      "        cellResultListList.add(cellResultList1);\n",
      "        cellResultListList.add(cellResultList2);\n",
      "        CellResultSet cellResultSet = CellResultSet.newInstance(cellResultListList);\n",
      "\n",
      "        Assertions.assertThrows(ExcelException.class, cellResultSet::getFirstCellResult);\n",
      "    }\n",
      "\n",
      "    @RepeatedTest(10)\n",
      "    void getExcelType() {\n",
      "        List<List<CellResult>> cellResultListList = new ArrayList<>();\n",
      "\n",
      "        List<CellResult> cellResultList1 = new ArrayList<>();\n",
      "        CellResult cellResult1 = Mockito.mock(CellResult.class);\n",
      "        CellResult cellResult2 = Mockito.mock(CellResult.class);\n",
      "        cellResultList1.add(cellResult1);\n",
      "        cellResultList1.add(cellResult2);\n",
      "\n",
      "        List<CellResult> cellResultList2 = new ArrayList<>();\n",
      "        CellResult cellResult21 = Mockito.mock(CellResult.class);\n",
      "        CellResult cellResult22 = Mockito.mock(CellResult.class);\n",
      "        cellResultList2.add(cellResult21);\n",
      "        cellResultList2.add(cellResult22);\n",
      "\n",
      "        cellResultListList.add(cellResultList1);\n",
      "        cellResultListList.add(cellResultList2);\n",
      "\n",
      "        CellResultSet cellResultSet = CellResultSet.newInstance(cellResultListList);\n",
      "\n",
      "        ExcelType excelType = ExcelType.values()[random.nextInt(ExcelType.values().length)];\n",
      "        Mockito.when(cellResultSet.getExcelType()).thenReturn(excelType);\n",
      "\n",
      "        Assertions.assertEquals(cellResultSet.getExcelType(), excelType);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void isNone() {\n",
      "        CellResultSet cellResultSet1 = CellResultSet.none();\n",
      "        Assertions.assertTrue(cellResultSet1.isNone());\n",
      "\n",
      "        CellResultSet cellResultSet2 = CellResultSet.newInstance(Collections.emptyList());\n",
      "        Assertions.assertTrue(cellResultSet2.isNone());\n",
      "\n",
      "        CellResultSet cellResultSet3 = CellResultSet.newInstance(Collections.singletonList(Collections.emptyList()));\n",
      "        Assertions.assertTrue(cellResultSet3.isNone());\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "CellResultSet::::none()": [
        52,
        56
      ],
      "CellResultSet::::newInstance(java.util.List<java.util.List<io.github.zouzhiy.excel.metadata.result.CellResult>>)": [
        64,
        69
      ],
      "CellResultSet::::firstCellResult(io.github.zouzhiy.excel.metadata.result.CellResult)": [
        77,
        86
      ],
      "CellResultSet::::validated(java.util.List<java.util.List<io.github.zouzhiy.excel.metadata.result.CellResult>>)": [
        93,
        103
      ],
      "CellResultSet::::getExcelType()": [
        111,
        113
      ],
      "CellResultSet::::isNone()": [
        120,
        130
      ],
      "CellResultSet::::getFirstCellResult()": [
        138,
        148
      ],
      "CellResultSet::::getFirstRowIndex()": [
        155,
        165
      ],
      "CellResultSet::::getFirstColIndex()": [
        172,
        182
      ]
    },
    "test_method_lines_dic": {
      "CellResultSetTest::::empty()": [
        22,
        29
      ],
      "CellResultSetTest::::newInstance()": [
        31,
        49
      ],
      "CellResultSetTest::::validated()": [
        51,
        70
      ],
      "CellResultSetTest::::getFirstCellResult1()": [
        72,
        80
      ],
      "CellResultSetTest::::getFirstCellResult2()": [
        82,
        94
      ],
      "CellResultSetTest::::getExcelType()": [
        96,
        121
      ],
      "CellResultSetTest::::isNone()": [
        123,
        133
      ]
    },
    "reverse_method_lines_dic": {
      "52": "CellResultSet::::none()",
      "53": "CellResultSet::::none()",
      "54": "CellResultSet::::none()",
      "55": "CellResultSet::::none()",
      "56": "CellResultSet::::none()",
      "64": "CellResultSet::::newInstance(java.util.List<java.util.List<io.github.zouzhiy.excel.metadata.result.CellResult>>)",
      "65": "CellResultSet::::newInstance(java.util.List<java.util.List<io.github.zouzhiy.excel.metadata.result.CellResult>>)",
      "66": "CellResultSet::::newInstance(java.util.List<java.util.List<io.github.zouzhiy.excel.metadata.result.CellResult>>)",
      "67": "CellResultSet::::newInstance(java.util.List<java.util.List<io.github.zouzhiy.excel.metadata.result.CellResult>>)",
      "68": "CellResultSet::::newInstance(java.util.List<java.util.List<io.github.zouzhiy.excel.metadata.result.CellResult>>)",
      "69": "CellResultSet::::newInstance(java.util.List<java.util.List<io.github.zouzhiy.excel.metadata.result.CellResult>>)",
      "77": "CellResultSet::::firstCellResult(io.github.zouzhiy.excel.metadata.result.CellResult)",
      "78": "CellResultSet::::firstCellResult(io.github.zouzhiy.excel.metadata.result.CellResult)",
      "79": "CellResultSet::::firstCellResult(io.github.zouzhiy.excel.metadata.result.CellResult)",
      "80": "CellResultSet::::firstCellResult(io.github.zouzhiy.excel.metadata.result.CellResult)",
      "81": "CellResultSet::::firstCellResult(io.github.zouzhiy.excel.metadata.result.CellResult)",
      "82": "CellResultSet::::firstCellResult(io.github.zouzhiy.excel.metadata.result.CellResult)",
      "83": "CellResultSet::::firstCellResult(io.github.zouzhiy.excel.metadata.result.CellResult)",
      "84": "CellResultSet::::firstCellResult(io.github.zouzhiy.excel.metadata.result.CellResult)",
      "85": "CellResultSet::::firstCellResult(io.github.zouzhiy.excel.metadata.result.CellResult)",
      "86": "CellResultSet::::firstCellResult(io.github.zouzhiy.excel.metadata.result.CellResult)",
      "93": "CellResultSet::::validated(java.util.List<java.util.List<io.github.zouzhiy.excel.metadata.result.CellResult>>)",
      "94": "CellResultSet::::validated(java.util.List<java.util.List<io.github.zouzhiy.excel.metadata.result.CellResult>>)",
      "95": "CellResultSet::::validated(java.util.List<java.util.List<io.github.zouzhiy.excel.metadata.result.CellResult>>)",
      "96": "CellResultSet::::validated(java.util.List<java.util.List<io.github.zouzhiy.excel.metadata.result.CellResult>>)",
      "97": "CellResultSet::::validated(java.util.List<java.util.List<io.github.zouzhiy.excel.metadata.result.CellResult>>)",
      "98": "CellResultSet::::validated(java.util.List<java.util.List<io.github.zouzhiy.excel.metadata.result.CellResult>>)",
      "99": "CellResultSet::::validated(java.util.List<java.util.List<io.github.zouzhiy.excel.metadata.result.CellResult>>)",
      "100": "CellResultSet::::validated(java.util.List<java.util.List<io.github.zouzhiy.excel.metadata.result.CellResult>>)",
      "101": "CellResultSet::::validated(java.util.List<java.util.List<io.github.zouzhiy.excel.metadata.result.CellResult>>)",
      "102": "CellResultSet::::validated(java.util.List<java.util.List<io.github.zouzhiy.excel.metadata.result.CellResult>>)",
      "103": "CellResultSet::::validated(java.util.List<java.util.List<io.github.zouzhiy.excel.metadata.result.CellResult>>)",
      "111": "CellResultSet::::getExcelType()",
      "112": "CellResultSet::::getExcelType()",
      "113": "CellResultSet::::getExcelType()",
      "120": "CellResultSet::::isNone()",
      "121": "CellResultSet::::isNone()",
      "122": "CellResultSet::::isNone()",
      "123": "CellResultSet::::isNone()",
      "124": "CellResultSet::::isNone()",
      "125": "CellResultSet::::isNone()",
      "126": "CellResultSet::::isNone()",
      "127": "CellResultSet::::isNone()",
      "128": "CellResultSet::::isNone()",
      "129": "CellResultSet::::isNone()",
      "130": "CellResultSet::::isNone()",
      "138": "CellResultSet::::getFirstCellResult()",
      "139": "CellResultSet::::getFirstCellResult()",
      "140": "CellResultSet::::getFirstCellResult()",
      "141": "CellResultSet::::getFirstCellResult()",
      "142": "CellResultSet::::getFirstCellResult()",
      "143": "CellResultSet::::getFirstCellResult()",
      "144": "CellResultSet::::getFirstCellResult()",
      "145": "CellResultSet::::getFirstCellResult()",
      "146": "CellResultSet::::getFirstCellResult()",
      "147": "CellResultSet::::getFirstCellResult()",
      "148": "CellResultSet::::getFirstCellResult()",
      "155": "CellResultSet::::getFirstRowIndex()",
      "156": "CellResultSet::::getFirstRowIndex()",
      "157": "CellResultSet::::getFirstRowIndex()",
      "158": "CellResultSet::::getFirstRowIndex()",
      "159": "CellResultSet::::getFirstRowIndex()",
      "160": "CellResultSet::::getFirstRowIndex()",
      "161": "CellResultSet::::getFirstRowIndex()",
      "162": "CellResultSet::::getFirstRowIndex()",
      "163": "CellResultSet::::getFirstRowIndex()",
      "164": "CellResultSet::::getFirstRowIndex()",
      "165": "CellResultSet::::getFirstRowIndex()",
      "172": "CellResultSet::::getFirstColIndex()",
      "173": "CellResultSet::::getFirstColIndex()",
      "174": "CellResultSet::::getFirstColIndex()",
      "175": "CellResultSet::::getFirstColIndex()",
      "176": "CellResultSet::::getFirstColIndex()",
      "177": "CellResultSet::::getFirstColIndex()",
      "178": "CellResultSet::::getFirstColIndex()",
      "179": "CellResultSet::::getFirstColIndex()",
      "180": "CellResultSet::::getFirstColIndex()",
      "181": "CellResultSet::::getFirstColIndex()",
      "182": "CellResultSet::::getFirstColIndex()"
    },
    "test_reverse_method_lines_dic": {
      "22": "CellResultSetTest::::empty()",
      "23": "CellResultSetTest::::empty()",
      "24": "CellResultSetTest::::empty()",
      "25": "CellResultSetTest::::empty()",
      "26": "CellResultSetTest::::empty()",
      "27": "CellResultSetTest::::empty()",
      "28": "CellResultSetTest::::empty()",
      "29": "CellResultSetTest::::empty()",
      "31": "CellResultSetTest::::newInstance()",
      "32": "CellResultSetTest::::newInstance()",
      "33": "CellResultSetTest::::newInstance()",
      "34": "CellResultSetTest::::newInstance()",
      "35": "CellResultSetTest::::newInstance()",
      "36": "CellResultSetTest::::newInstance()",
      "37": "CellResultSetTest::::newInstance()",
      "38": "CellResultSetTest::::newInstance()",
      "39": "CellResultSetTest::::newInstance()",
      "40": "CellResultSetTest::::newInstance()",
      "41": "CellResultSetTest::::newInstance()",
      "42": "CellResultSetTest::::newInstance()",
      "43": "CellResultSetTest::::newInstance()",
      "44": "CellResultSetTest::::newInstance()",
      "45": "CellResultSetTest::::newInstance()",
      "46": "CellResultSetTest::::newInstance()",
      "47": "CellResultSetTest::::newInstance()",
      "48": "CellResultSetTest::::newInstance()",
      "49": "CellResultSetTest::::newInstance()",
      "51": "CellResultSetTest::::validated()",
      "52": "CellResultSetTest::::validated()",
      "53": "CellResultSetTest::::validated()",
      "54": "CellResultSetTest::::validated()",
      "55": "CellResultSetTest::::validated()",
      "56": "CellResultSetTest::::validated()",
      "57": "CellResultSetTest::::validated()",
      "58": "CellResultSetTest::::validated()",
      "59": "CellResultSetTest::::validated()",
      "60": "CellResultSetTest::::validated()",
      "61": "CellResultSetTest::::validated()",
      "62": "CellResultSetTest::::validated()",
      "63": "CellResultSetTest::::validated()",
      "64": "CellResultSetTest::::validated()",
      "65": "CellResultSetTest::::validated()",
      "66": "CellResultSetTest::::validated()",
      "67": "CellResultSetTest::::validated()",
      "68": "CellResultSetTest::::validated()",
      "69": "CellResultSetTest::::validated()",
      "70": "CellResultSetTest::::validated()",
      "72": "CellResultSetTest::::getFirstCellResult1()",
      "73": "CellResultSetTest::::getFirstCellResult1()",
      "74": "CellResultSetTest::::getFirstCellResult1()",
      "75": "CellResultSetTest::::getFirstCellResult1()",
      "76": "CellResultSetTest::::getFirstCellResult1()",
      "77": "CellResultSetTest::::getFirstCellResult1()",
      "78": "CellResultSetTest::::getFirstCellResult1()",
      "79": "CellResultSetTest::::getFirstCellResult1()",
      "80": "CellResultSetTest::::getFirstCellResult1()",
      "82": "CellResultSetTest::::getFirstCellResult2()",
      "83": "CellResultSetTest::::getFirstCellResult2()",
      "84": "CellResultSetTest::::getFirstCellResult2()",
      "85": "CellResultSetTest::::getFirstCellResult2()",
      "86": "CellResultSetTest::::getFirstCellResult2()",
      "87": "CellResultSetTest::::getFirstCellResult2()",
      "88": "CellResultSetTest::::getFirstCellResult2()",
      "89": "CellResultSetTest::::getFirstCellResult2()",
      "90": "CellResultSetTest::::getFirstCellResult2()",
      "91": "CellResultSetTest::::getFirstCellResult2()",
      "92": "CellResultSetTest::::getFirstCellResult2()",
      "93": "CellResultSetTest::::getFirstCellResult2()",
      "94": "CellResultSetTest::::getFirstCellResult2()",
      "96": "CellResultSetTest::::getExcelType()",
      "97": "CellResultSetTest::::getExcelType()",
      "98": "CellResultSetTest::::getExcelType()",
      "99": "CellResultSetTest::::getExcelType()",
      "100": "CellResultSetTest::::getExcelType()",
      "101": "CellResultSetTest::::getExcelType()",
      "102": "CellResultSetTest::::getExcelType()",
      "103": "CellResultSetTest::::getExcelType()",
      "104": "CellResultSetTest::::getExcelType()",
      "105": "CellResultSetTest::::getExcelType()",
      "106": "CellResultSetTest::::getExcelType()",
      "107": "CellResultSetTest::::getExcelType()",
      "108": "CellResultSetTest::::getExcelType()",
      "109": "CellResultSetTest::::getExcelType()",
      "110": "CellResultSetTest::::getExcelType()",
      "111": "CellResultSetTest::::getExcelType()",
      "112": "CellResultSetTest::::getExcelType()",
      "113": "CellResultSetTest::::getExcelType()",
      "114": "CellResultSetTest::::getExcelType()",
      "115": "CellResultSetTest::::getExcelType()",
      "116": "CellResultSetTest::::getExcelType()",
      "117": "CellResultSetTest::::getExcelType()",
      "118": "CellResultSetTest::::getExcelType()",
      "119": "CellResultSetTest::::getExcelType()",
      "120": "CellResultSetTest::::getExcelType()",
      "121": "CellResultSetTest::::getExcelType()",
      "123": "CellResultSetTest::::isNone()",
      "124": "CellResultSetTest::::isNone()",
      "125": "CellResultSetTest::::isNone()",
      "126": "CellResultSetTest::::isNone()",
      "127": "CellResultSetTest::::isNone()",
      "128": "CellResultSetTest::::isNone()",
      "129": "CellResultSetTest::::isNone()",
      "130": "CellResultSetTest::::isNone()",
      "131": "CellResultSetTest::::isNone()",
      "132": "CellResultSetTest::::isNone()",
      "133": "CellResultSetTest::::isNone()"
    },
    "tests": [
      {
        "test_lines": [
          22,
          29
        ],
        "covered_lines": [
          35,
          44,
          53,
          54,
          55,
          121,
          122,
          139,
          140
        ]
      },
      {
        "test_lines": [
          31,
          49
        ],
        "covered_lines": [
          35,
          44,
          65,
          66,
          67,
          68,
          94,
          95,
          96,
          97,
          98,
          99,
          102,
          103
        ]
      },
      {
        "test_lines": [
          51,
          70
        ],
        "covered_lines": [
          94,
          95,
          96,
          97,
          98,
          99,
          100,
          102
        ]
      },
      {
        "test_lines": [
          72,
          80
        ],
        "covered_lines": [
          35,
          44,
          78,
          79,
          80,
          81,
          82,
          83,
          85,
          139,
          142,
          143,
          147
        ]
      },
      {
        "test_lines": [
          82,
          94
        ],
        "covered_lines": [
          35,
          65,
          66,
          67,
          68,
          94,
          95,
          96,
          97,
          98,
          99,
          102,
          103,
          139,
          142,
          143,
          144
        ]
      },
      {
        "test_lines": [
          96,
          121
        ],
        "covered_lines": [
          35,
          65,
          66,
          67,
          68,
          94,
          95,
          96,
          97,
          98,
          99,
          102,
          103,
          112,
          139,
          142,
          143,
          147
        ]
      },
      {
        "test_lines": [
          123,
          133
        ],
        "covered_lines": [
          35,
          53,
          54,
          55,
          65,
          66,
          67,
          68,
          94,
          95,
          96,
          97,
          98,
          102,
          103,
          121,
          122,
          124,
          125,
          128,
          129
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/zouzhiy-excel/src/main/java/io/github/zouzhiy/excel/metadata/result/CellResult.java": {
    "class_content": [
      "/*\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package io.github.zouzhiy.excel.metadata.result;\n",
      "\n",
      "import io.github.zouzhiy.excel.enums.ExcelType;\n",
      "import io.github.zouzhiy.excel.exceptions.ExcelException;\n",
      "import io.github.zouzhiy.excel.metadata.CellSpan;\n",
      "import io.github.zouzhiy.excel.utils.ExcelDateParseUtils;\n",
      "import lombok.EqualsAndHashCode;\n",
      "import lombok.Getter;\n",
      "import lombok.ToString;\n",
      "import org.apache.poi.ss.usermodel.Cell;\n",
      "\n",
      "import java.math.BigDecimal;\n",
      "import java.time.LocalDateTime;\n",
      "\n",
      "/**\n",
      " * \u5355\u4e2a\u5355\u5143\u683c\u503c\u8bfb\u53d6\u7ed3\u679c\n",
      " *\n",
      " * @author zouzhiy\n",
      " * @since 2022/7/2\n",
      " */\n",
      "@ToString\n",
      "@EqualsAndHashCode\n",
      "public class CellResult {\n",
      "\n",
      "    private final static BigDecimal TRUE_VALUE_BIG_DECIMAL = BigDecimal.ONE;\n",
      "    private final static BigDecimal FALSE_VALUE_BIG_DECIMAL = BigDecimal.ZERO;\n",
      "    /**\n",
      "     * \u5bf9\u5e94\u7684\u5355\u5143\u683c\n",
      "     */\n",
      "    @Getter\n",
      "    private final Cell cell;\n",
      "    /**\n",
      "     * \u6240\u5728\u884c\n",
      "     */\n",
      "    @Getter\n",
      "    private final Integer rowIndex;\n",
      "    /**\n",
      "     * \u6240\u5728\u5217\n",
      "     */\n",
      "    @Getter\n",
      "    private final Integer columnIndex;\n",
      "    /**\n",
      "     * \u7eb5\u5411\u8de8\u7684\u884c\u6570\u3002\u5408\u5e76\u5355\u5143\u683c\u65f6\uff0c\u503c\u53ef\u80fd\u5927\u4e8e1\n",
      "     */\n",
      "    @Getter\n",
      "    private final Integer rowspan;\n",
      "    /**\n",
      "     * \u6a2a\u5411\u8de8\u7684\u5217\u6570\u3002\u5408\u5e76\u5355\u5143\u683c\u65f6\uff0c\u503c\u53ef\u80fd\u5927\u4e8e1\n",
      "     */\n",
      "    @Getter\n",
      "    private final Integer colspan;\n",
      "    /**\n",
      "     * \u5355\u5143\u683c\u7c7b\u578b\n",
      "     */\n",
      "    @Getter\n",
      "    private final ExcelType excelType;\n",
      "    /**\n",
      "     * \u6587\u672c\u503c\n",
      "     */\n",
      "    private String stringValue;\n",
      "    /**\n",
      "     * \u662f\u5426\u5df2\u8ba1\u7b97\u8fc7stringValue\n",
      "     * \u5f53\u5355\u5143\u683c\u7c7b\u578b\u4e0d\u662f{@link ExcelType#STRING}\uff0c\u9700\u8981\u8f6c\u6362\n",
      "     */\n",
      "    private boolean stringValueFlag;\n",
      "    /**\n",
      "     * \u6570\u503c\n",
      "     */\n",
      "    private BigDecimal numberValue;\n",
      "    /**\n",
      "     * \u662f\u5426\u5df2\u8ba1\u7b97\u8fc7numberValue\n",
      "     * \u5f53\u5355\u5143\u683c\u7c7b\u578b\u4e0d\u662f{@link ExcelType#NUMERIC}\uff0c\u9700\u8981\u8f6c\u6362\n",
      "     */\n",
      "    private boolean numberValueFlag;\n",
      "    /**\n",
      "     * \u5e03\u5c14\u503c\n",
      "     */\n",
      "    private Boolean booleanValue;\n",
      "    /**\n",
      "     * \u662f\u5426\u5df2\u8ba1\u7b97\u8fc7booleanValue\n",
      "     * \u5f53\u5355\u5143\u683c\u7c7b\u578b\u4e0d\u662f{@link ExcelType#BOOLEAN}\uff0c\u9700\u8981\u8f6c\u6362\n",
      "     */\n",
      "    private boolean booleanValueFlag;\n",
      "    /**\n",
      "     * \u65e5\u671f\n",
      "     */\n",
      "    private LocalDateTime dateValue;\n",
      "    /**\n",
      "     * \u662f\u5426\u5df2\u8ba1\u7b97\u8fc7booleanValue\n",
      "     * \u65e5\u671f\u53ef\u4ecenumberValue\u6216\u8005StringValue\u8f6c\u6362\u800c\u6765\n",
      "     */\n",
      "    private boolean dateValueFlag;\n",
      "\n",
      "    public CellResult(Cell cell, CellSpan cellSpan, ExcelType excelType\n",
      "            , String stringValue, boolean stringValueFlag\n",
      "            , BigDecimal numberValue, boolean numberValueFlag\n",
      "            , Boolean booleanValue, boolean booleanValueFlag\n",
      "            , LocalDateTime dateValue, boolean dateValueFlag) {\n",
      "        this.cell = cell;\n",
      "        this.rowIndex = cell == null ? -1 : cell.getRowIndex();\n",
      "        this.columnIndex = cell == null ? -1 : cell.getColumnIndex();\n",
      "        this.rowspan = cellSpan.getRowspan();\n",
      "        this.colspan = cellSpan.getColspan();\n",
      "        this.excelType = excelType;\n",
      "        this.stringValue = stringValue;\n",
      "        this.stringValueFlag = stringValueFlag;\n",
      "        this.numberValue = numberValue;\n",
      "        this.numberValueFlag = numberValueFlag;\n",
      "        this.booleanValue = booleanValue;\n",
      "        this.booleanValueFlag = booleanValueFlag;\n",
      "        this.dateValue = dateValue;\n",
      "        this.dateValueFlag = dateValueFlag;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5355\u5143\u683c\u4e3a\u7a7a\n",
      "     *\n",
      "     * @return NULL\u7684CellResult\n",
      "     */\n",
      "    public static CellResult none() {\n",
      "        return new CellResult(null, CellSpan.NONE_CELL_SPAN, ExcelType.NONE\n",
      "                , null, true\n",
      "                , null, true\n",
      "                , null, true\n",
      "                , null, true);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * {@link org.apache.poi.ss.usermodel.CellType#BLANK}\n",
      "     * \u5355\u5143\u683c\u4e0d\u4e3a\u7a7a\uff0c\u4f46\u662f\u5355\u5143\u683c\u503c\u4e3a\u7a7a\n",
      "     *\n",
      "     * @param cell     \u5355\u5143\u683c\n",
      "     * @param cellSpan \u5408\u5e76\u4fe1\u606f\n",
      "     * @return CellResult\u7684\u503c\u90fd\u4e3anull\n",
      "     */\n",
      "    public static CellResult blank(Cell cell, CellSpan cellSpan) {\n",
      "        return new CellResult(cell, cellSpan, ExcelType.BLANK\n",
      "                , null, true\n",
      "                , null, true\n",
      "                , null, true\n",
      "                , null, true);\n",
      "\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6570\u503c\u578b {@link org.apache.poi.ss.usermodel.CellType#NUMERIC}\n",
      "     *\n",
      "     * @param cell        \u5355\u5143\u683c\n",
      "     * @param cellSpan    \u5408\u5e76\u4fe1\u606f\n",
      "     * @param numberValue \u5355\u5143\u683c\u503c\uff0c\u4e3a\u6570\u503c\u7c7b\u578b\n",
      "     * @return \u5355\u5143\u683c\u503c\n",
      "     */\n",
      "    public static CellResult valueOf(Cell cell, CellSpan cellSpan, double numberValue) {\n",
      "        return new CellResult(cell, cellSpan, ExcelType.NUMERIC\n",
      "                , null, false\n",
      "                , BigDecimal.valueOf(numberValue), true\n",
      "                , null, false\n",
      "                , null, false);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5e03\u5c14\u578b {@link org.apache.poi.ss.usermodel.CellType#BOOLEAN}\n",
      "     *\n",
      "     * @param cell         \u5355\u5143\u683c\n",
      "     * @param cellSpan     \u5408\u5e76\u4fe1\u606f\n",
      "     * @param booleanValue \u5355\u5143\u683c\u503c\uff0c\n",
      "     * @return \u5355\u5143\u683c\u503c\n",
      "     */\n",
      "    public static CellResult valueOf(Cell cell, CellSpan cellSpan, boolean booleanValue) {\n",
      "        return new CellResult(cell, cellSpan, ExcelType.BOOLEAN\n",
      "                , null, false\n",
      "                , null, false\n",
      "                , booleanValue, true\n",
      "                , null, false);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6587\u672c\u578b {@link org.apache.poi.ss.usermodel.CellType#BOOLEAN}\n",
      "     *\n",
      "     * @param cell        \u5355\u5143\u683c\n",
      "     * @param cellSpan    \u5408\u5e76\u4fe1\u606f\n",
      "     * @param stringValue \u5355\u5143\u683c\u503c\uff0c\n",
      "     * @return \u5355\u5143\u683c\u503c\n",
      "     */\n",
      "    public static CellResult valueOf(Cell cell, CellSpan cellSpan, String stringValue) {\n",
      "        return new CellResult(cell, cellSpan, ExcelType.STRING\n",
      "                , stringValue, true\n",
      "                , null, false\n",
      "                , null, false\n",
      "                , null, false);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u7a7a\u6570\u636e\n",
      "     *\n",
      "     * @return \u662f\u5426\u4e3a\u7a7a\u503c\n",
      "     */\n",
      "    public boolean isBlank() {\n",
      "        return excelType.equals(ExcelType.BLANK);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5355\u5143\u683c\u4e3a\u7a7a\n",
      "     * \u65e0\u6548\u6570\u636e\u3002\u4e00\u822c\u5c5e\u4e8e\u5408\u5e76\u5355\u5143\u683c\uff0c\u4f46\u662f\u4e0d\u662f\u7b2c\u4e00\u4e2a\u5355\u5143\u683c\u7684\u6570\u636e\u3002\u5373\u6b64\u6570\u636e\u65e0\u6548\n",
      "     *\n",
      "     * @return \u662f\u5426\u4e3anull\n",
      "     */\n",
      "    public boolean isNone() {\n",
      "        return excelType.equals(ExcelType.NONE);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5b57\u7b26\u578b\u503c\u3002\u82e5\u975e\u5b57\u7b26\u4e32\u578b\uff0c\u5219\u9700\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n",
      "     *\n",
      "     * @return \u5b57\u7b26\u4e32\u7ed3\u679c\n",
      "     */\n",
      "    public String getStringValue() {\n",
      "        if (!stringValueFlag) {\n",
      "            stringValue = this.recalculateStringValue();\n",
      "        }\n",
      "        return stringValue;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u82e5\u975e\u6570\u503c\u578b\uff0c\u5219\u9700\u8f6c\u6362\n",
      "     *\n",
      "     * @return \u6570\u503c\u7ed3\u679c\n",
      "     */\n",
      "    public BigDecimal getNumberValue() {\n",
      "        if (!numberValueFlag) {\n",
      "            numberValue = this.recalculateNumberValue();\n",
      "        }\n",
      "        return numberValue;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u82e5\u975e\u5e03\u5c14\u578b\uff0c\u5219\u9700\u8f6c\u6362\n",
      "     *\n",
      "     * @return \u5e03\u5c14\u503c\u7ed3\u679c\n",
      "     */\n",
      "    public Boolean getBooleanValue() {\n",
      "        if (!booleanValueFlag) {\n",
      "            booleanValue = this.recalculateBooleanValue();\n",
      "        }\n",
      "        return booleanValue;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u65f6\u95f4\u7c7b\u578b\u3002\u9700\u8981\u4ece\u5355\u5143\u683c\u8bfb\u53d6\u6216\u8005\u5b57\u7b26\u4e32\u8f6c\u6362\u800c\u6765\n",
      "     *\n",
      "     * @return \u65f6\u95f4\u7ed3\u679c\n",
      "     */\n",
      "    public LocalDateTime getDateValue(String format) {\n",
      "        if (!dateValueFlag) {\n",
      "            dateValue = this.recalculateDateValue(format);\n",
      "        }\n",
      "        return dateValue;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5b57\u7b26\u4e32\u8f6c\u6362\n",
      "     *\n",
      "     * @return \u7ed3\u679c\n",
      "     */\n",
      "    private String recalculateStringValue() {\n",
      "        String str;\n",
      "        switch (excelType) {\n",
      "            case NUMERIC:\n",
      "                str = numberValue.toString();\n",
      "                break;\n",
      "            case BOOLEAN:\n",
      "                str = Boolean.toString(booleanValue);\n",
      "                break;\n",
      "            default:\n",
      "                str = null;\n",
      "                break;\n",
      "        }\n",
      "        stringValueFlag = true;\n",
      "        return str;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6570\u503c\u8f6c\u6362\n",
      "     *\n",
      "     * @return \u7ed3\u679c\n",
      "     */\n",
      "    private BigDecimal recalculateNumberValue() {\n",
      "        BigDecimal bigDecimal;\n",
      "        switch (excelType) {\n",
      "            case STRING:\n",
      "                try {\n",
      "                    bigDecimal = stringValue.trim().length() == 0 ? null : new BigDecimal(stringValue);\n",
      "                } catch (NumberFormatException e) {\n",
      "                    throw new ExcelException(e, \"\u975e\u6570\u5b57\u5b57\u7b26\uff1a%s\", stringValue);\n",
      "                }\n",
      "                break;\n",
      "            case BOOLEAN:\n",
      "                bigDecimal = booleanValue ? TRUE_VALUE_BIG_DECIMAL : FALSE_VALUE_BIG_DECIMAL;\n",
      "                break;\n",
      "            default:\n",
      "                bigDecimal = null;\n",
      "                break;\n",
      "        }\n",
      "        numberValueFlag = true;\n",
      "        return bigDecimal;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5e03\u5c14\u503c\u8f6c\u6362\n",
      "     *\n",
      "     * @return \u7ed3\u679c\n",
      "     */\n",
      "    private Boolean recalculateBooleanValue() {\n",
      "        Boolean booleanValue;\n",
      "        switch (excelType) {\n",
      "            case NUMERIC:\n",
      "                booleanValue = TRUE_VALUE_BIG_DECIMAL.compareTo(numberValue) == 0;\n",
      "                break;\n",
      "            case STRING:\n",
      "                booleanValue = Boolean.valueOf(stringValue);\n",
      "                break;\n",
      "            default:\n",
      "                booleanValue = null;\n",
      "                break;\n",
      "        }\n",
      "        booleanValueFlag = true;\n",
      "        return booleanValue;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u65e5\u671f\u8f6c\u6362\n",
      "     *\n",
      "     * @param format \u65e5\u671f\u8f6c\u6362pattern,\u53ef\u4ee5\u4e3anull,\u4e3a\u7a7a\u5b57\u7b26\u4e32\u3002\u5916\u90e8\u914d\u7f6e\u4f20\u5165\n",
      "     * @return \u7ed3\u679c\n",
      "     */\n",
      "    private LocalDateTime recalculateDateValue(String format) {\n",
      "        LocalDateTime localDateTime;\n",
      "        switch (excelType) {\n",
      "            case NUMERIC:\n",
      "                localDateTime = cell.getLocalDateTimeCellValue();\n",
      "                break;\n",
      "            case STRING:\n",
      "                localDateTime = ExcelDateParseUtils.parseDateTime(stringValue, format);\n",
      "                break;\n",
      "            default:\n",
      "                localDateTime = null;\n",
      "                break;\n",
      "        }\n",
      "        dateValueFlag = true;\n",
      "        return localDateTime;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package io.github.zouzhiy.excel.metadata.result;\n",
      "\n",
      "import io.github.zouzhiy.excel.exceptions.ExcelException;\n",
      "import io.github.zouzhiy.excel.metadata.CellSpan;\n",
      "import org.apache.poi.ss.usermodel.Cell;\n",
      "import org.apache.poi.ss.usermodel.CellType;\n",
      "import org.apache.poi.ss.usermodel.WorkbookFactory;\n",
      "import org.junit.jupiter.api.Assertions;\n",
      "import org.junit.jupiter.api.BeforeEach;\n",
      "import org.junit.jupiter.api.RepeatedTest;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.junit.jupiter.api.extension.ExtendWith;\n",
      "import org.mockito.Mock;\n",
      "import org.mockito.Mockito;\n",
      "import org.mockito.Spy;\n",
      "import org.mockito.junit.jupiter.MockitoExtension;\n",
      "\n",
      "import java.io.IOException;\n",
      "import java.math.BigDecimal;\n",
      "import java.time.LocalDateTime;\n",
      "import java.util.Random;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.*;\n",
      "\n",
      "@ExtendWith(MockitoExtension.class)\n",
      "class CellResultTest {\n",
      "\n",
      "    private final Random random = new Random(System.currentTimeMillis());\n",
      "\n",
      "    @Spy\n",
      "    private Cell cell;\n",
      "\n",
      "    @Mock\n",
      "    private CellSpan cellSpan;\n",
      "\n",
      "    public CellResultTest() throws IOException {\n",
      "        cell = Mockito.spy(WorkbookFactory.create(true).createSheet().createRow(0).createCell(0));\n",
      "    }\n",
      "\n",
      "    @BeforeEach\n",
      "    void beforeEach() {\n",
      "        Mockito.when(cell.getColumnIndex()).thenReturn(random.nextInt());\n",
      "        Mockito.when(cell.getRowIndex()).thenReturn(random.nextInt());\n",
      "        Mockito.when(cellSpan.getRowspan()).thenReturn(random.nextInt());\n",
      "        Mockito.when(cellSpan.getColspan()).thenReturn(random.nextInt());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void none() {\n",
      "        CellResult cellResult = CellResult.none();\n",
      "\n",
      "        assertNull(cellResult.getCell());\n",
      "        assertEquals(cellResult.getRowIndex(), -1);\n",
      "        assertEquals(cellResult.getColumnIndex(), -1);\n",
      "        assertEquals(cellResult.getRowspan(), 1);\n",
      "        assertEquals(cellResult.getColspan(), 1);\n",
      "\n",
      "        assertNull(cellResult.getStringValue());\n",
      "        assertNull(cellResult.getNumberValue());\n",
      "        assertNull(cellResult.getBooleanValue());\n",
      "        assertNull(cellResult.getDateValue(null));\n",
      "\n",
      "        assertTrue(cellResult.isNone());\n",
      "        assertFalse(cellResult.isBlank());\n",
      "\n",
      "        CellResult.blank(cell, cellSpan);\n",
      "    }\n",
      "\n",
      "    @RepeatedTest(10)\n",
      "    void blank() {\n",
      "        CellResult cellResult = CellResult.blank(cell, cellSpan);\n",
      "\n",
      "        assertEquals(cell, cellResult.getCell());\n",
      "        assertEquals(cellResult.getRowIndex(), cell.getRowIndex());\n",
      "        assertEquals(cellResult.getColumnIndex(), cell.getColumnIndex());\n",
      "        assertEquals(cellResult.getRowspan(), cellSpan.getRowspan());\n",
      "        assertEquals(cellResult.getColspan(), cellSpan.getColspan());\n",
      "        assertNull(cellResult.getStringValue());\n",
      "        assertNull(cellResult.getNumberValue());\n",
      "        assertNull(cellResult.getBooleanValue());\n",
      "        assertNull(cellResult.getDateValue(null));\n",
      "\n",
      "        assertFalse(cellResult.isNone());\n",
      "        assertTrue(cellResult.isBlank());\n",
      "    }\n",
      "\n",
      "    @RepeatedTest(20)\n",
      "    void numberTest1() {\n",
      "        double numberValue = random.nextDouble();\n",
      "        CellResult cellResult = CellResult.valueOf(cell, cellSpan, numberValue);\n",
      "        Mockito.doReturn(numberValue).when(cell).getNumericCellValue();\n",
      "        Mockito.doReturn(CellType.NUMERIC).when(cell).getCellType();\n",
      "\n",
      "        assertEquals(cell, cellResult.getCell());\n",
      "        assertEquals(cellResult.getRowIndex(), cell.getRowIndex());\n",
      "        assertEquals(cellResult.getColumnIndex(), cell.getColumnIndex());\n",
      "        assertEquals(cellResult.getRowspan(), cellSpan.getRowspan());\n",
      "        assertEquals(cellResult.getColspan(), cellSpan.getColspan());\n",
      "        assertEquals(cellResult.getStringValue(), String.valueOf(numberValue));\n",
      "        assertEquals(cellResult.getNumberValue(), BigDecimal.valueOf(numberValue));\n",
      "        assertEquals(cellResult.getBooleanValue(), numberValue - 1 == 0);\n",
      "        assertEquals(cellResult.getDateValue(null), cell.getLocalDateTimeCellValue());\n",
      "\n",
      "        assertFalse(cellResult.isNone());\n",
      "        assertFalse(cellResult.isBlank());\n",
      "\n",
      "        assertEquals(cellResult.getStringValue(), cellResult.getStringValue());\n",
      "        assertEquals(cellResult.getNumberValue(), cellResult.getNumberValue());\n",
      "        assertEquals(cellResult.getBooleanValue(), cellResult.getBooleanValue());\n",
      "        assertEquals(cellResult.getDateValue(null), cellResult.getDateValue(null));\n",
      "    }\n",
      "\n",
      "    @RepeatedTest(20)\n",
      "    void numberTest2() {\n",
      "        double numberValue = random.nextDouble() * -1;\n",
      "        CellResult cellResult = CellResult.valueOf(cell, cellSpan, numberValue);\n",
      "        Mockito.doReturn(numberValue).when(cell).getNumericCellValue();\n",
      "        Mockito.doReturn(CellType.NUMERIC).when(cell).getCellType();\n",
      "\n",
      "        assertEquals(cell, cellResult.getCell());\n",
      "        assertEquals(cellResult.getRowIndex(), cell.getRowIndex());\n",
      "        assertEquals(cellResult.getColumnIndex(), cell.getColumnIndex());\n",
      "        assertEquals(cellResult.getRowspan(), cellSpan.getRowspan());\n",
      "        assertEquals(cellResult.getColspan(), cellSpan.getColspan());\n",
      "        assertEquals(cellResult.getStringValue(), String.valueOf(numberValue));\n",
      "        assertEquals(cellResult.getNumberValue(), BigDecimal.valueOf(numberValue));\n",
      "        assertEquals(cellResult.getBooleanValue(), numberValue - 1 == 0);\n",
      "        assertNull(cellResult.getDateValue(null));\n",
      "\n",
      "        assertFalse(cellResult.isNone());\n",
      "        assertFalse(cellResult.isBlank());\n",
      "\n",
      "        assertEquals(cellResult.getStringValue(), cellResult.getStringValue());\n",
      "        assertEquals(cellResult.getNumberValue(), cellResult.getNumberValue());\n",
      "        assertEquals(cellResult.getBooleanValue(), cellResult.getBooleanValue());\n",
      "        assertEquals(cellResult.getDateValue(null), cellResult.getDateValue(null));\n",
      "    }\n",
      "\n",
      "    @RepeatedTest(20)\n",
      "    void booleanTest() {\n",
      "        boolean booleanValue = random.nextBoolean();\n",
      "\n",
      "        CellResult cellResult = CellResult.valueOf(cell, cellSpan, booleanValue);\n",
      "        assertEquals(cell, cellResult.getCell());\n",
      "        assertEquals(cellResult.getRowIndex(), cell.getRowIndex());\n",
      "        assertEquals(cellResult.getColumnIndex(), cell.getColumnIndex());\n",
      "        assertEquals(cellResult.getRowspan(), cellSpan.getRowspan());\n",
      "        assertEquals(cellResult.getColspan(), cellSpan.getColspan());\n",
      "        assertEquals(cellResult.getStringValue(), String.valueOf(booleanValue));\n",
      "        assertEquals(cellResult.getNumberValue(), booleanValue ? BigDecimal.ONE : BigDecimal.ZERO);\n",
      "        assertEquals(cellResult.getBooleanValue(), booleanValue);\n",
      "        assertNull(cellResult.getDateValue(null));\n",
      "\n",
      "        assertFalse(cellResult.isNone());\n",
      "        assertFalse(cellResult.isBlank());\n",
      "\n",
      "        assertEquals(cellResult.getStringValue(), cellResult.getStringValue());\n",
      "        assertEquals(cellResult.getNumberValue(), cellResult.getNumberValue());\n",
      "        assertEquals(cellResult.getBooleanValue(), cellResult.getBooleanValue());\n",
      "        assertNull(cellResult.getDateValue(null));\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void stringString() {\n",
      "        String stringValue = \"test\" + random.nextInt();\n",
      "\n",
      "        CellResult cellResult = CellResult.valueOf(cell, cellSpan, stringValue);\n",
      "        assertEquals(cell, cellResult.getCell());\n",
      "        assertEquals(cellResult.getRowIndex(), cell.getRowIndex());\n",
      "        assertEquals(cellResult.getColumnIndex(), cell.getColumnIndex());\n",
      "        assertEquals(cellResult.getRowspan(), cellSpan.getRowspan());\n",
      "        assertEquals(cellResult.getColspan(), cellSpan.getColspan());\n",
      "\n",
      "        assertEquals(cellResult.getStringValue(), stringValue);\n",
      "        assertThrows(ExcelException.class, cellResult::getNumberValue);\n",
      "        assertEquals(cellResult.getBooleanValue(), Boolean.parseBoolean(stringValue));\n",
      "        assertThrows(ExcelException.class, () -> cellResult.getDateValue(null));\n",
      "\n",
      "        assertFalse(cellResult.isNone());\n",
      "        assertFalse(cellResult.isBlank());\n",
      "\n",
      "        assertEquals(cellResult.getStringValue(), cellResult.getStringValue());\n",
      "        assertEquals(cellResult.getBooleanValue(), cellResult.getBooleanValue());\n",
      "    }\n",
      "\n",
      "    @RepeatedTest(20)\n",
      "    void stringNumber() {\n",
      "        String stringValue = \"\" + random.nextInt();\n",
      "\n",
      "        CellResult cellResult = CellResult.valueOf(cell, cellSpan, stringValue);\n",
      "        assertEquals(cell, cellResult.getCell());\n",
      "        assertEquals(cellResult.getRowIndex(), cell.getRowIndex());\n",
      "        assertEquals(cellResult.getColumnIndex(), cell.getColumnIndex());\n",
      "        assertEquals(cellResult.getRowspan(), cellSpan.getRowspan());\n",
      "        assertEquals(cellResult.getColspan(), cellSpan.getColspan());\n",
      "\n",
      "        assertEquals(cellResult.getStringValue(), stringValue);\n",
      "        assertEquals(cellResult.getBooleanValue(), Boolean.parseBoolean(stringValue));\n",
      "        assertEquals(cellResult.getNumberValue(), new BigDecimal(stringValue));\n",
      "        assertThrows(ExcelException.class, () -> cellResult.getDateValue(null));\n",
      "\n",
      "        assertFalse(cellResult.isNone());\n",
      "        assertFalse(cellResult.isBlank());\n",
      "\n",
      "\n",
      "        assertEquals(cellResult.getStringValue(), cellResult.getStringValue());\n",
      "        assertEquals(cellResult.getNumberValue(), cellResult.getNumberValue());\n",
      "        assertEquals(cellResult.getBooleanValue(), cellResult.getBooleanValue());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void stringDate() {\n",
      "        String stringValue = \"2022,12,11,22,33,23\";\n",
      "        CellResult cellResult = CellResult.valueOf(cell, cellSpan, stringValue);\n",
      "\n",
      "        LocalDateTime localDateTime = LocalDateTime.of(2022, 12, 11, 22, 33, 23);\n",
      "\n",
      "        Assertions.assertEquals(localDateTime, cellResult.getDateValue(\"yyyy,MM,dd,HH,mm,ss\"));\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "method_lines_dic": {
      "CellResult::::none()": [
        133,
        139
      ],
      "CellResult::::isBlank()": [
        211,
        213
      ],
      "CellResult::::isNone()": [
        221,
        223
      ],
      "CellResult::::getStringValue()": [
        230,
        235
      ],
      "CellResult::::getNumberValue()": [
        242,
        247
      ],
      "CellResult::::getBooleanValue()": [
        254,
        259
      ],
      "CellResult::::getDateValue(java.lang.String)": [
        266,
        271
      ],
      "CellResult::::recalculateStringValue()": [
        278,
        293
      ],
      "CellResult::::recalculateNumberValue()": [
        300,
        319
      ],
      "CellResult::::recalculateBooleanValue()": [
        326,
        341
      ],
      "CellResult::::recalculateDateValue(java.lang.String)": [
        349,
        364
      ]
    },
    "test_method_lines_dic": {
      "CellResultTest::::beforeEach()": [
        40,
        46
      ],
      "CellResultTest::::none()": [
        48,
        67
      ],
      "CellResultTest::::blank()": [
        69,
        85
      ],
      "CellResultTest::::numberTest1()": [
        87,
        111
      ],
      "CellResultTest::::numberTest2()": [
        113,
        137
      ],
      "CellResultTest::::booleanTest()": [
        139,
        161
      ],
      "CellResultTest::::stringString()": [
        164,
        185
      ],
      "CellResultTest::::stringNumber()": [
        187,
        210
      ],
      "CellResultTest::::stringDate()": [
        212,
        220
      ]
    },
    "reverse_method_lines_dic": {
      "133": "CellResult::::none()",
      "134": "CellResult::::none()",
      "135": "CellResult::::none()",
      "136": "CellResult::::none()",
      "137": "CellResult::::none()",
      "138": "CellResult::::none()",
      "139": "CellResult::::none()",
      "211": "CellResult::::isBlank()",
      "212": "CellResult::::isBlank()",
      "213": "CellResult::::isBlank()",
      "221": "CellResult::::isNone()",
      "222": "CellResult::::isNone()",
      "223": "CellResult::::isNone()",
      "230": "CellResult::::getStringValue()",
      "231": "CellResult::::getStringValue()",
      "232": "CellResult::::getStringValue()",
      "233": "CellResult::::getStringValue()",
      "234": "CellResult::::getStringValue()",
      "235": "CellResult::::getStringValue()",
      "242": "CellResult::::getNumberValue()",
      "243": "CellResult::::getNumberValue()",
      "244": "CellResult::::getNumberValue()",
      "245": "CellResult::::getNumberValue()",
      "246": "CellResult::::getNumberValue()",
      "247": "CellResult::::getNumberValue()",
      "254": "CellResult::::getBooleanValue()",
      "255": "CellResult::::getBooleanValue()",
      "256": "CellResult::::getBooleanValue()",
      "257": "CellResult::::getBooleanValue()",
      "258": "CellResult::::getBooleanValue()",
      "259": "CellResult::::getBooleanValue()",
      "266": "CellResult::::getDateValue(java.lang.String)",
      "267": "CellResult::::getDateValue(java.lang.String)",
      "268": "CellResult::::getDateValue(java.lang.String)",
      "269": "CellResult::::getDateValue(java.lang.String)",
      "270": "CellResult::::getDateValue(java.lang.String)",
      "271": "CellResult::::getDateValue(java.lang.String)",
      "278": "CellResult::::recalculateStringValue()",
      "279": "CellResult::::recalculateStringValue()",
      "280": "CellResult::::recalculateStringValue()",
      "281": "CellResult::::recalculateStringValue()",
      "282": "CellResult::::recalculateStringValue()",
      "283": "CellResult::::recalculateStringValue()",
      "284": "CellResult::::recalculateStringValue()",
      "285": "CellResult::::recalculateStringValue()",
      "286": "CellResult::::recalculateStringValue()",
      "287": "CellResult::::recalculateStringValue()",
      "288": "CellResult::::recalculateStringValue()",
      "289": "CellResult::::recalculateStringValue()",
      "290": "CellResult::::recalculateStringValue()",
      "291": "CellResult::::recalculateStringValue()",
      "292": "CellResult::::recalculateStringValue()",
      "293": "CellResult::::recalculateStringValue()",
      "300": "CellResult::::recalculateNumberValue()",
      "301": "CellResult::::recalculateNumberValue()",
      "302": "CellResult::::recalculateNumberValue()",
      "303": "CellResult::::recalculateNumberValue()",
      "304": "CellResult::::recalculateNumberValue()",
      "305": "CellResult::::recalculateNumberValue()",
      "306": "CellResult::::recalculateNumberValue()",
      "307": "CellResult::::recalculateNumberValue()",
      "308": "CellResult::::recalculateNumberValue()",
      "309": "CellResult::::recalculateNumberValue()",
      "310": "CellResult::::recalculateNumberValue()",
      "311": "CellResult::::recalculateNumberValue()",
      "312": "CellResult::::recalculateNumberValue()",
      "313": "CellResult::::recalculateNumberValue()",
      "314": "CellResult::::recalculateNumberValue()",
      "315": "CellResult::::recalculateNumberValue()",
      "316": "CellResult::::recalculateNumberValue()",
      "317": "CellResult::::recalculateNumberValue()",
      "318": "CellResult::::recalculateNumberValue()",
      "319": "CellResult::::recalculateNumberValue()",
      "326": "CellResult::::recalculateBooleanValue()",
      "327": "CellResult::::recalculateBooleanValue()",
      "328": "CellResult::::recalculateBooleanValue()",
      "329": "CellResult::::recalculateBooleanValue()",
      "330": "CellResult::::recalculateBooleanValue()",
      "331": "CellResult::::recalculateBooleanValue()",
      "332": "CellResult::::recalculateBooleanValue()",
      "333": "CellResult::::recalculateBooleanValue()",
      "334": "CellResult::::recalculateBooleanValue()",
      "335": "CellResult::::recalculateBooleanValue()",
      "336": "CellResult::::recalculateBooleanValue()",
      "337": "CellResult::::recalculateBooleanValue()",
      "338": "CellResult::::recalculateBooleanValue()",
      "339": "CellResult::::recalculateBooleanValue()",
      "340": "CellResult::::recalculateBooleanValue()",
      "341": "CellResult::::recalculateBooleanValue()",
      "349": "CellResult::::recalculateDateValue(java.lang.String)",
      "350": "CellResult::::recalculateDateValue(java.lang.String)",
      "351": "CellResult::::recalculateDateValue(java.lang.String)",
      "352": "CellResult::::recalculateDateValue(java.lang.String)",
      "353": "CellResult::::recalculateDateValue(java.lang.String)",
      "354": "CellResult::::recalculateDateValue(java.lang.String)",
      "355": "CellResult::::recalculateDateValue(java.lang.String)",
      "356": "CellResult::::recalculateDateValue(java.lang.String)",
      "357": "CellResult::::recalculateDateValue(java.lang.String)",
      "358": "CellResult::::recalculateDateValue(java.lang.String)",
      "359": "CellResult::::recalculateDateValue(java.lang.String)",
      "360": "CellResult::::recalculateDateValue(java.lang.String)",
      "361": "CellResult::::recalculateDateValue(java.lang.String)",
      "362": "CellResult::::recalculateDateValue(java.lang.String)",
      "363": "CellResult::::recalculateDateValue(java.lang.String)",
      "364": "CellResult::::recalculateDateValue(java.lang.String)"
    },
    "test_reverse_method_lines_dic": {
      "40": "CellResultTest::::beforeEach()",
      "41": "CellResultTest::::beforeEach()",
      "42": "CellResultTest::::beforeEach()",
      "43": "CellResultTest::::beforeEach()",
      "44": "CellResultTest::::beforeEach()",
      "45": "CellResultTest::::beforeEach()",
      "46": "CellResultTest::::beforeEach()",
      "48": "CellResultTest::::none()",
      "49": "CellResultTest::::none()",
      "50": "CellResultTest::::none()",
      "51": "CellResultTest::::none()",
      "52": "CellResultTest::::none()",
      "53": "CellResultTest::::none()",
      "54": "CellResultTest::::none()",
      "55": "CellResultTest::::none()",
      "56": "CellResultTest::::none()",
      "57": "CellResultTest::::none()",
      "58": "CellResultTest::::none()",
      "59": "CellResultTest::::none()",
      "60": "CellResultTest::::none()",
      "61": "CellResultTest::::none()",
      "62": "CellResultTest::::none()",
      "63": "CellResultTest::::none()",
      "64": "CellResultTest::::none()",
      "65": "CellResultTest::::none()",
      "66": "CellResultTest::::none()",
      "67": "CellResultTest::::none()",
      "69": "CellResultTest::::blank()",
      "70": "CellResultTest::::blank()",
      "71": "CellResultTest::::blank()",
      "72": "CellResultTest::::blank()",
      "73": "CellResultTest::::blank()",
      "74": "CellResultTest::::blank()",
      "75": "CellResultTest::::blank()",
      "76": "CellResultTest::::blank()",
      "77": "CellResultTest::::blank()",
      "78": "CellResultTest::::blank()",
      "79": "CellResultTest::::blank()",
      "80": "CellResultTest::::blank()",
      "81": "CellResultTest::::blank()",
      "82": "CellResultTest::::blank()",
      "83": "CellResultTest::::blank()",
      "84": "CellResultTest::::blank()",
      "85": "CellResultTest::::blank()",
      "87": "CellResultTest::::numberTest1()",
      "88": "CellResultTest::::numberTest1()",
      "89": "CellResultTest::::numberTest1()",
      "90": "CellResultTest::::numberTest1()",
      "91": "CellResultTest::::numberTest1()",
      "92": "CellResultTest::::numberTest1()",
      "93": "CellResultTest::::numberTest1()",
      "94": "CellResultTest::::numberTest1()",
      "95": "CellResultTest::::numberTest1()",
      "96": "CellResultTest::::numberTest1()",
      "97": "CellResultTest::::numberTest1()",
      "98": "CellResultTest::::numberTest1()",
      "99": "CellResultTest::::numberTest1()",
      "100": "CellResultTest::::numberTest1()",
      "101": "CellResultTest::::numberTest1()",
      "102": "CellResultTest::::numberTest1()",
      "103": "CellResultTest::::numberTest1()",
      "104": "CellResultTest::::numberTest1()",
      "105": "CellResultTest::::numberTest1()",
      "106": "CellResultTest::::numberTest1()",
      "107": "CellResultTest::::numberTest1()",
      "108": "CellResultTest::::numberTest1()",
      "109": "CellResultTest::::numberTest1()",
      "110": "CellResultTest::::numberTest1()",
      "111": "CellResultTest::::numberTest1()",
      "113": "CellResultTest::::numberTest2()",
      "114": "CellResultTest::::numberTest2()",
      "115": "CellResultTest::::numberTest2()",
      "116": "CellResultTest::::numberTest2()",
      "117": "CellResultTest::::numberTest2()",
      "118": "CellResultTest::::numberTest2()",
      "119": "CellResultTest::::numberTest2()",
      "120": "CellResultTest::::numberTest2()",
      "121": "CellResultTest::::numberTest2()",
      "122": "CellResultTest::::numberTest2()",
      "123": "CellResultTest::::numberTest2()",
      "124": "CellResultTest::::numberTest2()",
      "125": "CellResultTest::::numberTest2()",
      "126": "CellResultTest::::numberTest2()",
      "127": "CellResultTest::::numberTest2()",
      "128": "CellResultTest::::numberTest2()",
      "129": "CellResultTest::::numberTest2()",
      "130": "CellResultTest::::numberTest2()",
      "131": "CellResultTest::::numberTest2()",
      "132": "CellResultTest::::numberTest2()",
      "133": "CellResultTest::::numberTest2()",
      "134": "CellResultTest::::numberTest2()",
      "135": "CellResultTest::::numberTest2()",
      "136": "CellResultTest::::numberTest2()",
      "137": "CellResultTest::::numberTest2()",
      "139": "CellResultTest::::booleanTest()",
      "140": "CellResultTest::::booleanTest()",
      "141": "CellResultTest::::booleanTest()",
      "142": "CellResultTest::::booleanTest()",
      "143": "CellResultTest::::booleanTest()",
      "144": "CellResultTest::::booleanTest()",
      "145": "CellResultTest::::booleanTest()",
      "146": "CellResultTest::::booleanTest()",
      "147": "CellResultTest::::booleanTest()",
      "148": "CellResultTest::::booleanTest()",
      "149": "CellResultTest::::booleanTest()",
      "150": "CellResultTest::::booleanTest()",
      "151": "CellResultTest::::booleanTest()",
      "152": "CellResultTest::::booleanTest()",
      "153": "CellResultTest::::booleanTest()",
      "154": "CellResultTest::::booleanTest()",
      "155": "CellResultTest::::booleanTest()",
      "156": "CellResultTest::::booleanTest()",
      "157": "CellResultTest::::booleanTest()",
      "158": "CellResultTest::::booleanTest()",
      "159": "CellResultTest::::booleanTest()",
      "160": "CellResultTest::::booleanTest()",
      "161": "CellResultTest::::booleanTest()",
      "164": "CellResultTest::::stringString()",
      "165": "CellResultTest::::stringString()",
      "166": "CellResultTest::::stringString()",
      "167": "CellResultTest::::stringString()",
      "168": "CellResultTest::::stringString()",
      "169": "CellResultTest::::stringString()",
      "170": "CellResultTest::::stringString()",
      "171": "CellResultTest::::stringString()",
      "172": "CellResultTest::::stringString()",
      "173": "CellResultTest::::stringString()",
      "174": "CellResultTest::::stringString()",
      "175": "CellResultTest::::stringString()",
      "176": "CellResultTest::::stringString()",
      "177": "CellResultTest::::stringString()",
      "178": "CellResultTest::::stringString()",
      "179": "CellResultTest::::stringString()",
      "180": "CellResultTest::::stringString()",
      "181": "CellResultTest::::stringString()",
      "182": "CellResultTest::::stringString()",
      "183": "CellResultTest::::stringString()",
      "184": "CellResultTest::::stringString()",
      "185": "CellResultTest::::stringString()",
      "187": "CellResultTest::::stringNumber()",
      "188": "CellResultTest::::stringNumber()",
      "189": "CellResultTest::::stringNumber()",
      "190": "CellResultTest::::stringNumber()",
      "191": "CellResultTest::::stringNumber()",
      "192": "CellResultTest::::stringNumber()",
      "193": "CellResultTest::::stringNumber()",
      "194": "CellResultTest::::stringNumber()",
      "195": "CellResultTest::::stringNumber()",
      "196": "CellResultTest::::stringNumber()",
      "197": "CellResultTest::::stringNumber()",
      "198": "CellResultTest::::stringNumber()",
      "199": "CellResultTest::::stringNumber()",
      "200": "CellResultTest::::stringNumber()",
      "201": "CellResultTest::::stringNumber()",
      "202": "CellResultTest::::stringNumber()",
      "203": "CellResultTest::::stringNumber()",
      "204": "CellResultTest::::stringNumber()",
      "205": "CellResultTest::::stringNumber()",
      "206": "CellResultTest::::stringNumber()",
      "207": "CellResultTest::::stringNumber()",
      "208": "CellResultTest::::stringNumber()",
      "209": "CellResultTest::::stringNumber()",
      "210": "CellResultTest::::stringNumber()",
      "212": "CellResultTest::::stringDate()",
      "213": "CellResultTest::::stringDate()",
      "214": "CellResultTest::::stringDate()",
      "215": "CellResultTest::::stringDate()",
      "216": "CellResultTest::::stringDate()",
      "217": "CellResultTest::::stringDate()",
      "218": "CellResultTest::::stringDate()",
      "219": "CellResultTest::::stringDate()",
      "220": "CellResultTest::::stringDate()"
    },
    "tests": [
      {
        "test_lines": [
          48,
          67
        ],
        "covered_lines": [
          38,
          39,
          43,
          48,
          53,
          58,
          63,
          111,
          112,
          113,
          114,
          115,
          116,
          117,
          118,
          119,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          134,
          150,
          212,
          222,
          231,
          234,
          243,
          246,
          255,
          258,
          267,
          270
        ]
      },
      {
        "test_lines": [
          69,
          85
        ],
        "covered_lines": [
          38,
          39,
          43,
          48,
          53,
          58,
          63,
          111,
          112,
          113,
          114,
          115,
          116,
          117,
          118,
          119,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          150,
          212,
          222,
          231,
          234,
          243,
          246,
          255,
          258,
          267,
          270
        ]
      },
      {
        "test_lines": [
          87,
          111
        ],
        "covered_lines": [
          38,
          39,
          43,
          48,
          53,
          58,
          63,
          111,
          112,
          113,
          114,
          115,
          116,
          117,
          118,
          119,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          167,
          169,
          212,
          222,
          231,
          232,
          234,
          243,
          246,
          255,
          256,
          258,
          267,
          268,
          270,
          280,
          282,
          283,
          291,
          292,
          328,
          330,
          331,
          339,
          340,
          351,
          353,
          354,
          362,
          363
        ]
      },
      {
        "test_lines": [
          113,
          137
        ],
        "covered_lines": [
          38,
          39,
          43,
          48,
          53,
          58,
          63,
          111,
          112,
          113,
          114,
          115,
          116,
          117,
          118,
          119,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          167,
          169,
          212,
          222,
          231,
          232,
          234,
          243,
          246,
          255,
          256,
          258,
          267,
          268,
          270,
          280,
          282,
          283,
          291,
          292,
          328,
          330,
          331,
          339,
          340,
          351,
          353,
          354,
          362,
          363
        ]
      },
      {
        "test_lines": [
          139,
          161
        ],
        "covered_lines": [
          38,
          39,
          43,
          48,
          53,
          58,
          63,
          111,
          112,
          113,
          114,
          115,
          116,
          117,
          118,
          119,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          183,
          186,
          212,
          222,
          231,
          232,
          234,
          243,
          244,
          246,
          255,
          258,
          267,
          268,
          270,
          280,
          285,
          286,
          291,
          292,
          302,
          311,
          312,
          317,
          318,
          351,
          359,
          362,
          363
        ]
      },
      {
        "test_lines": [
          164,
          185
        ],
        "covered_lines": [
          38,
          39,
          43,
          48,
          53,
          58,
          63,
          111,
          112,
          113,
          114,
          115,
          116,
          117,
          118,
          119,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          199,
          212,
          222,
          231,
          234,
          243,
          255,
          256,
          258,
          267,
          280,
          302,
          306,
          307,
          328,
          333,
          334,
          339,
          340
        ]
      },
      {
        "test_lines": [
          187,
          210
        ],
        "covered_lines": [
          38,
          39,
          43,
          48,
          53,
          58,
          63,
          111,
          112,
          113,
          114,
          115,
          116,
          117,
          118,
          119,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          199,
          212,
          222,
          231,
          234,
          243,
          244,
          246,
          255,
          256,
          258,
          267,
          280,
          302,
          305,
          308,
          317,
          318,
          328,
          333,
          334,
          339,
          340
        ]
      },
      {
        "test_lines": [
          212,
          220
        ],
        "covered_lines": [
          38,
          39,
          111,
          112,
          113,
          114,
          115,
          116,
          117,
          118,
          119,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          199,
          267,
          268,
          270,
          280,
          351,
          356,
          357,
          362,
          363
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/zouzhiy-excel/src/main/java/io/github/zouzhiy/excel/metadata/parameter/SheetParameter.java": {
    "class_content": [
      "/*\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package io.github.zouzhiy.excel.metadata.parameter;\n",
      "\n",
      "import io.github.zouzhiy.excel.callback.SheetReadConsumer;\n",
      "import io.github.zouzhiy.excel.callback.SheetWriteConsumer;\n",
      "import lombok.EqualsAndHashCode;\n",
      "import lombok.Getter;\n",
      "import lombok.Setter;\n",
      "import lombok.ToString;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.Collections;\n",
      "import java.util.List;\n",
      "\n",
      "/**\n",
      " * sheet\u8bfb\u5199\u914d\u7f6e\n",
      " *\n",
      " * @author zouzhiy\n",
      " * @since 2022/7/2\n",
      " */\n",
      "@Getter\n",
      "@Setter\n",
      "@ToString\n",
      "@EqualsAndHashCode\n",
      "public class SheetParameter {\n",
      "\n",
      "    /**\n",
      "     * sheet\u4e0b\u6807\n",
      "     */\n",
      "    private Integer sheetIndex;\n",
      "    /**\n",
      "     * sheet\u540d\u79f0\n",
      "     */\n",
      "    private String sheetName;\n",
      "\n",
      "    /**\n",
      "     * sheet\u6807\u9898\n",
      "     */\n",
      "    private String title;\n",
      "\n",
      "    /**\n",
      "     * \u6807\u9898\u8d77\u59cb\u884c\u4e0b\u6807\n",
      "     * -1 \u65f6\u8868\u793a\u4e0d\u5b58\u5728\u6807\u9898\u884c\n",
      "     * \u82e5\u4e0d\u8bbe\u7f6e\uff0c\u5219\u5f53{@link SheetParameter#headRowStartIndex}\u5927\u4e8e0\u65f6\u53d60\uff0c\u53cd\u4e4b\u53d6-1\n",
      "     */\n",
      "    private Integer titleRowStartIndex;\n",
      "\n",
      "    /**\n",
      "     * \u6807\u9898\u8d77\u59cb\u5217\n",
      "     * \u9ed8\u8ba4\uff1a0\n",
      "     */\n",
      "    private Integer titleColumnStartIndex;\n",
      "    /**\n",
      "     * \u8868\u5934\u8d77\u59cb\u884c\u4e0b\u6807\n",
      "     * -1 \u65f6\u8868\u793a\u4e0d\u5b58\u5728\u8868\u5934\u884c\n",
      "     * \u82e5\u4e0d\u8bbe\u7f6e\uff0c\u5219\u8ba1\u7b97\u5f97\uff1a{@link SheetParameter#dataRowStartIndex}-1\n",
      "     */\n",
      "    private Integer headRowStartIndex;\n",
      "\n",
      "    /**\n",
      "     * \u8868\u5934\u8d77\u59cb\u5217\n",
      "     * \u9ed8\u8ba4\uff1a0\n",
      "     */\n",
      "    private Integer headColumnStartIndex;\n",
      "\n",
      "    /**\n",
      "     * \u6570\u636e\u8d77\u59cb\u884c\n",
      "     * \u9ed8\u8ba4\uff1a0\n",
      "     */\n",
      "    private Integer dataRowStartIndex;\n",
      "\n",
      "    /**\n",
      "     * \u6570\u636e\u8d77\u59cb\u5217\n",
      "     * \u9ed8\u8ba4\uff1a0\n",
      "     */\n",
      "    private Integer dataColumnStartIndex;\n",
      "\n",
      "    /**\n",
      "     * sheet\u8bfb\u53d6\u56de\u8c03\u3002{@link SheetReadConsumer}\n",
      "     */\n",
      "    private List<SheetReadConsumer<?>> sheetReadConsumerList;\n",
      "\n",
      "    /**\n",
      "     * sheet\u5199\u5165\u56de\u8c03\u3002{@link SheetWriteConsumer}\n",
      "     */\n",
      "    private List<SheetWriteConsumer<?>> sheetWriteConsumerList;\n",
      "\n",
      "    private SheetParameter(Integer sheetIndex, String sheetName\n",
      "            , String title, Integer titleRowStartIndex, Integer titleColumnStartIndex\n",
      "            , Integer headRowStartIndex, Integer headColumnStartIndex\n",
      "            , Integer dataRowStartIndex, Integer dataColumnStartIndex\n",
      "            , List<SheetReadConsumer<?>> sheetReadConsumerList\n",
      "            , List<SheetWriteConsumer<?>> sheetWriteConsumerList) {\n",
      "        this.sheetIndex = sheetIndex;\n",
      "        this.sheetName = sheetName;\n",
      "        this.title = title;\n",
      "        this.titleRowStartIndex = titleRowStartIndex;\n",
      "        this.titleColumnStartIndex = titleColumnStartIndex;\n",
      "        this.headRowStartIndex = headRowStartIndex;\n",
      "        this.headColumnStartIndex = headColumnStartIndex;\n",
      "        this.dataRowStartIndex = dataRowStartIndex;\n",
      "        this.dataColumnStartIndex = dataColumnStartIndex;\n",
      "        this.sheetReadConsumerList = sheetReadConsumerList;\n",
      "        this.sheetWriteConsumerList = sheetWriteConsumerList;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u9ed8\u8ba4\u5bf9\u8c61 \u65e0\u6807\u9898 \u65e0\u6807\u9898\u3002sheet\u53d6\u7b2c\u4e00\u4e2a\n",
      "     *\n",
      "     * @return sheet\u8bfb\u5199\u914d\u7f6e\n",
      "     */\n",
      "    public static SheetParameter empty() {\n",
      "        return new SheetParameterBuilder().sheet(0).dataRowStartIndex(0).dataColumnStartIndex(0).build();\n",
      "    }\n",
      "\n",
      "    public static SheetParameterBuilder builder() {\n",
      "        return new SheetParameterBuilder();\n",
      "    }\n",
      "\n",
      "    public static class SheetParameterBuilder {\n",
      "\n",
      "        private Integer sheetIndex;\n",
      "\n",
      "        private String sheetName;\n",
      "\n",
      "        private String title;\n",
      "\n",
      "        private Integer titleRowStartIndex;\n",
      "\n",
      "        private Integer titleColumnStartIndex;\n",
      "\n",
      "        private Integer headRowStartIndex;\n",
      "\n",
      "        private Integer headColumnStartIndex;\n",
      "\n",
      "        private Integer dataRowStartIndex;\n",
      "\n",
      "        private Integer dataColumnStartIndex;\n",
      "\n",
      "        private List<SheetReadConsumer<?>> sheetReadConsumerList;\n",
      "\n",
      "        private List<SheetWriteConsumer<?>> sheetWriteConsumerList;\n",
      "\n",
      "        public SheetParameterBuilder sheet(String sheetName) {\n",
      "            this.sheetName = sheetName;\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public SheetParameterBuilder sheet(Integer sheetIndex) {\n",
      "            this.sheetIndex = sheetIndex;\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public SheetParameterBuilder title(String title) {\n",
      "            this.title = title;\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public SheetParameterBuilder titleRowStartIndex(Integer titleRowStartIndex) {\n",
      "            this.titleRowStartIndex = titleRowStartIndex;\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public SheetParameterBuilder titleColumnStartIndex(Integer titleColumnStartIndex) {\n",
      "            this.titleColumnStartIndex = titleColumnStartIndex;\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public SheetParameterBuilder headRowStartIndex(Integer headRowStartIndex) {\n",
      "            this.headRowStartIndex = headRowStartIndex;\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public SheetParameterBuilder headColumnStartIndex(Integer headColumnStartIndex) {\n",
      "            this.headColumnStartIndex = headColumnStartIndex;\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public SheetParameterBuilder dataRowStartIndex(Integer dataRowStartIndex) {\n",
      "            this.dataRowStartIndex = dataRowStartIndex;\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public SheetParameterBuilder dataColumnStartIndex(Integer dataColumnStartIndex) {\n",
      "            this.dataColumnStartIndex = dataColumnStartIndex;\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "\n",
      "        public SheetParameterBuilder sheetReadConsumer(SheetReadConsumer<?> sheetReadConsumer) {\n",
      "            if (sheetReadConsumerList == null) {\n",
      "                sheetReadConsumerList = new ArrayList<>();\n",
      "            }\n",
      "            if (!sheetReadConsumerList.contains(sheetReadConsumer)) {\n",
      "                sheetReadConsumerList.add(sheetReadConsumer);\n",
      "            }\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public SheetParameterBuilder sheetWriteConsumer(SheetWriteConsumer<?> sheetWriteConsumer) {\n",
      "            if (sheetWriteConsumerList == null) {\n",
      "                sheetWriteConsumerList = new ArrayList<>();\n",
      "            }\n",
      "            if (!sheetWriteConsumerList.contains(sheetWriteConsumer)) {\n",
      "                sheetWriteConsumerList.add(sheetWriteConsumer);\n",
      "            }\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        /**\n",
      "         * \u901a\u8fc7\u5224\u65ad\uff0c\u53d6\u503c\u521b\u5efa\u914d\u7f6e\u5bf9\u8c61\uff0c\u907f\u514d\u51fa\u73b0\u975e\u6cd5\u914d\u7f6e\n",
      "         *\n",
      "         * @return \u914d\u7f6e\u5bf9\u8c61\n",
      "         */\n",
      "        public SheetParameter build() {\n",
      "            return new SheetParameter(sheetIndex, sheetName, title\n",
      "                    , this.getTitleRowStartIndex()\n",
      "                    , this.getTitleColumnStartIndex()\n",
      "                    , this.getHeadRowStartIndex()\n",
      "                    , this.getHeadColumnStartIndex()\n",
      "                    , this.getDataRowStartIndex()\n",
      "                    , this.getDataColumnStartIndex()\n",
      "                    , this.getSheetReadConsumerList()\n",
      "                    , this.getSheetWriteConsumerList());\n",
      "        }\n",
      "\n",
      "        /**\n",
      "         * \u82e5\u4e3b\u52a8\u914d\u7f6e\u4e86\u503c\uff0c\u5219\u53d6\u914d\u7f6e\u503c\n",
      "         * \u5426\u5219\u6839\u636e {@link #getHeadRowStartIndex}\u7684\u503c\u505a\u5224\u65ad\uff0c\u53d60\u6216\u8005-1\n",
      "         *\n",
      "         * @return \u6807\u9898\u884c\u4e0b\u6807\n",
      "         */\n",
      "        private Integer getTitleRowStartIndex() {\n",
      "            if (titleRowStartIndex != null) {\n",
      "                return titleRowStartIndex;\n",
      "            } else if (this.getHeadRowStartIndex() >= 1) {\n",
      "                return 0;\n",
      "            } else {\n",
      "                return -1;\n",
      "            }\n",
      "        }\n",
      "\n",
      "        private Integer getTitleColumnStartIndex() {\n",
      "            return titleColumnStartIndex == null ? 0 : titleColumnStartIndex;\n",
      "        }\n",
      "\n",
      "        /**\n",
      "         * \u82e5\u4e3b\u52a8\u914d\u7f6e\u4e86\u503c\uff0c\u5219\u53d6\u914d\u7f6e\u503c\n",
      "         * \u5426\u5219\u6839\u636e {@link #getDataRowStartIndex}\u7684\u503c\u51cf1\n",
      "         *\n",
      "         * @return \u6807\u9898\u884c\u4e0b\u6807\n",
      "         */\n",
      "        private Integer getHeadRowStartIndex() {\n",
      "            if (headRowStartIndex != null) {\n",
      "                return headRowStartIndex;\n",
      "            } else if (this.getDataRowStartIndex() >= 1) {\n",
      "                return this.getDataRowStartIndex() - 1;\n",
      "            } else {\n",
      "                return -1;\n",
      "            }\n",
      "        }\n",
      "\n",
      "        private Integer getHeadColumnStartIndex() {\n",
      "            return headColumnStartIndex == null ? 0 : headColumnStartIndex;\n",
      "        }\n",
      "\n",
      "        private int getDataRowStartIndex() {\n",
      "            return dataRowStartIndex == null ? 0 : dataRowStartIndex;\n",
      "        }\n",
      "\n",
      "        private int getDataColumnStartIndex() {\n",
      "            return dataColumnStartIndex == null ? 0 : dataColumnStartIndex;\n",
      "        }\n",
      "\n",
      "\n",
      "        private List<SheetReadConsumer<?>> getSheetReadConsumerList() {\n",
      "            return sheetReadConsumerList == null ? Collections.emptyList() : sheetReadConsumerList;\n",
      "        }\n",
      "\n",
      "        private List<SheetWriteConsumer<?>> getSheetWriteConsumerList() {\n",
      "            return sheetWriteConsumerList == null ? Collections.emptyList() : sheetWriteConsumerList;\n",
      "        }\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package io.github.zouzhiy.excel.metadata.parameter;\n",
      "\n",
      "import io.github.zouzhiy.excel.callback.SheetReadConsumer;\n",
      "import io.github.zouzhiy.excel.callback.SheetWriteConsumer;\n",
      "import io.github.zouzhiy.excel.support.metadata.DemoDefault;\n",
      "import org.junit.jupiter.api.Assertions;\n",
      "import org.junit.jupiter.api.RepeatedTest;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import java.util.Random;\n",
      "\n",
      "public class SheetParameterTest {\n",
      "\n",
      "    private final Random random = new Random(System.currentTimeMillis());\n",
      "\n",
      "    @Test\n",
      "    void titleRowStartIndex1() {\n",
      "        SheetParameter sheetParameter = SheetParameter\n",
      "                .builder()\n",
      "                .build();\n",
      "        Assertions.assertEquals(sheetParameter.getTitleRowStartIndex(), -1);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void titleRowStartIndex2() {\n",
      "        SheetParameter sheetParameter = SheetParameter\n",
      "                .builder()\n",
      "                .headRowStartIndex(1)\n",
      "                .build();\n",
      "        Assertions.assertEquals(sheetParameter.getTitleRowStartIndex(), 0);\n",
      "    }\n",
      "\n",
      "    @RepeatedTest(10)\n",
      "    void titleRowStartIndex3() {\n",
      "        SheetParameter sheetParameter = SheetParameter\n",
      "                .builder()\n",
      "                .headRowStartIndex(1 + Math.abs(random.nextInt()))\n",
      "                .build();\n",
      "        Assertions.assertEquals(sheetParameter.getTitleRowStartIndex(), 0);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void titleRowStartIndex4() {\n",
      "        SheetParameter sheetParameter = SheetParameter\n",
      "                .builder()\n",
      "                .dataRowStartIndex(0)\n",
      "                .build();\n",
      "        Assertions.assertEquals(sheetParameter.getTitleRowStartIndex(), -1);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void titleRowStartIndex5() {\n",
      "        SheetParameter sheetParameter = SheetParameter\n",
      "                .builder()\n",
      "                .dataRowStartIndex(1)\n",
      "                .build();\n",
      "        Assertions.assertEquals(sheetParameter.getTitleRowStartIndex(), -1);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void titleRowStartIndex6() {\n",
      "        SheetParameter sheetParameter = SheetParameter\n",
      "                .builder()\n",
      "                .dataRowStartIndex(2 + Math.abs(random.nextInt()))\n",
      "                .build();\n",
      "        Assertions.assertEquals(sheetParameter.getTitleRowStartIndex(), 0);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void titleRowStartIndex7() {\n",
      "        SheetParameter sheetParameter = SheetParameter\n",
      "                .builder()\n",
      "                .headRowStartIndex(0)\n",
      "                .dataRowStartIndex(2 + Math.abs(random.nextInt()))\n",
      "                .build();\n",
      "        Assertions.assertEquals(sheetParameter.getTitleRowStartIndex(), -1);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void titleRowStartIndex8() {\n",
      "        SheetParameter sheetParameter = SheetParameter\n",
      "                .builder()\n",
      "                .headRowStartIndex(1)\n",
      "                .dataRowStartIndex(2 + Math.abs(random.nextInt()))\n",
      "                .build();\n",
      "        Assertions.assertEquals(sheetParameter.getTitleRowStartIndex(), 0);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void headRowStartIndex1() {\n",
      "        SheetParameter sheetParameter = SheetParameter\n",
      "                .builder()\n",
      "                .build();\n",
      "        Assertions.assertEquals(sheetParameter.getTitleRowStartIndex(), -1);\n",
      "    }\n",
      "\n",
      "    @RepeatedTest(100)\n",
      "    void headRowStartIndex2() {\n",
      "        int rowIndex = random.nextInt();\n",
      "        SheetParameter sheetParameter = SheetParameter\n",
      "                .builder()\n",
      "                .headRowStartIndex(rowIndex)\n",
      "                .build();\n",
      "        Assertions.assertEquals(sheetParameter.getHeadRowStartIndex(), rowIndex);\n",
      "    }\n",
      "\n",
      "    @RepeatedTest(100)\n",
      "    void headRowStartIndex3() {\n",
      "        int rowIndex = Math.abs(random.nextInt());\n",
      "        SheetParameter sheetParameter = SheetParameter\n",
      "                .builder()\n",
      "                .dataRowStartIndex(rowIndex)\n",
      "                .build();\n",
      "        Assertions.assertEquals(sheetParameter.getHeadRowStartIndex(), rowIndex - 1);\n",
      "    }\n",
      "\n",
      "    @RepeatedTest(100)\n",
      "    void headRowStartIndex4() {\n",
      "        int rowIndexHead = Math.abs(random.nextInt());\n",
      "        int rowIndex = Math.abs(random.nextInt());\n",
      "        SheetParameter sheetParameter = SheetParameter\n",
      "                .builder()\n",
      "                .headRowStartIndex(rowIndexHead)\n",
      "                .dataRowStartIndex(rowIndex)\n",
      "                .build();\n",
      "        Assertions.assertEquals(sheetParameter.getHeadRowStartIndex(), rowIndexHead);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void dataRowStartIndex1() {\n",
      "        SheetParameter sheetParameter = SheetParameter\n",
      "                .builder()\n",
      "                .build();\n",
      "        Assertions.assertEquals(sheetParameter.getDataRowStartIndex(), 0);\n",
      "    }\n",
      "\n",
      "    @RepeatedTest(100)\n",
      "    void dataRowStartIndex2() {\n",
      "        int index = Math.abs(random.nextInt());\n",
      "        SheetParameter sheetParameter = SheetParameter\n",
      "                .builder()\n",
      "                .dataRowStartIndex(index)\n",
      "                .build();\n",
      "        Assertions.assertEquals(sheetParameter.getDataRowStartIndex(), index);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getTitleColumnStartIndex1() {\n",
      "        SheetParameter sheetParameter = SheetParameter\n",
      "                .builder()\n",
      "                .build();\n",
      "        Assertions.assertEquals(sheetParameter.getTitleColumnStartIndex(), 0);\n",
      "    }\n",
      "\n",
      "    @RepeatedTest(10)\n",
      "    void getTitleColumnStartIndex2() {\n",
      "        int index = Math.abs(random.nextInt());\n",
      "        SheetParameter sheetParameter = SheetParameter\n",
      "                .builder()\n",
      "                .titleColumnStartIndex(index)\n",
      "                .build();\n",
      "        Assertions.assertEquals(sheetParameter.getTitleColumnStartIndex(), index);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getHeadColumnStartIndex1() {\n",
      "        SheetParameter sheetParameter = SheetParameter\n",
      "                .builder()\n",
      "                .build();\n",
      "        Assertions.assertEquals(sheetParameter.getHeadColumnStartIndex(), 0);\n",
      "    }\n",
      "\n",
      "    @RepeatedTest(10)\n",
      "    void getHeadColumnStartIndex2() {\n",
      "        int index = Math.abs(random.nextInt());\n",
      "        SheetParameter sheetParameter = SheetParameter\n",
      "                .builder()\n",
      "                .headColumnStartIndex(index)\n",
      "                .build();\n",
      "        Assertions.assertEquals(sheetParameter.getHeadColumnStartIndex(), index);\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void getDataColumnStartIndex1() {\n",
      "        SheetParameter sheetParameter = SheetParameter\n",
      "                .builder()\n",
      "                .build();\n",
      "        Assertions.assertEquals(sheetParameter.getDataColumnStartIndex(), 0);\n",
      "    }\n",
      "\n",
      "    @RepeatedTest(10)\n",
      "    void getDataColumnStartIndex2() {\n",
      "        int index = Math.abs(random.nextInt());\n",
      "        SheetParameter sheetParameter = SheetParameter\n",
      "                .builder()\n",
      "                .dataColumnStartIndex(index)\n",
      "                .build();\n",
      "        Assertions.assertEquals(sheetParameter.getDataColumnStartIndex(), index);\n",
      "    }\n",
      "\n",
      "    @RepeatedTest(10)\n",
      "    void sheet() {\n",
      "        Integer sheetIndex = random.nextInt();\n",
      "        String sheetName = \"\" + random.nextDouble();\n",
      "        String title = \"\" + random.nextDouble();\n",
      "\n",
      "        SheetParameter sheetParameter = SheetParameter.builder()\n",
      "                .sheet(sheetIndex)\n",
      "                .sheet(sheetName)\n",
      "                .title(title)\n",
      "                .build();\n",
      "\n",
      "        Assertions.assertEquals(sheetParameter.getSheetIndex(), sheetIndex);\n",
      "        Assertions.assertEquals(sheetParameter.getSheetName(), sheetName);\n",
      "        Assertions.assertEquals(sheetParameter.getTitle(), title);\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void sheetReadConsumer1() {\n",
      "        SheetParameter sheetParameter = SheetParameter.builder()\n",
      "                .build();\n",
      "\n",
      "        Assertions.assertEquals(sheetParameter.getSheetReadConsumerList().size(), 0);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void sheetReadConsumer2() {\n",
      "        SheetParameter sheetParameter = SheetParameter.builder()\n",
      "                .sheetReadConsumer(new SheetReadConsumer<DemoDefault>() {\n",
      "                })\n",
      "                .sheetReadConsumer(new SheetReadConsumer<DemoDefault>() {\n",
      "                })\n",
      "                .sheetReadConsumer(new SheetReadConsumer<DemoDefault>() {\n",
      "                })\n",
      "                .build();\n",
      "\n",
      "        Assertions.assertEquals(sheetParameter.getSheetReadConsumerList().size(), 3);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void sheetWriteConsumer1() {\n",
      "        SheetParameter sheetParameter = SheetParameter.builder()\n",
      "                .build();\n",
      "\n",
      "        Assertions.assertEquals(sheetParameter.getSheetWriteConsumerList().size(), 0);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void sheetWriteConsumer2() {\n",
      "        SheetParameter sheetParameter = SheetParameter.builder()\n",
      "                .sheetWriteConsumer(new SheetWriteConsumer<DemoDefault>() {\n",
      "                })\n",
      "                .sheetWriteConsumer(new SheetWriteConsumer<DemoDefault>() {\n",
      "                })\n",
      "                .sheetWriteConsumer(new SheetWriteConsumer<DemoDefault>() {\n",
      "                })\n",
      "                .build();\n",
      "\n",
      "        Assertions.assertEquals(sheetParameter.getSheetWriteConsumerList().size(), 3);\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "SheetParameter::::empty()": [
        124,
        126
      ],
      "SheetParameter::::builder()": [
        128,
        130
      ],
      "SheetParameter.SheetParameterBuilder::::sheet(java.lang.String)": [
        156,
        159
      ],
      "SheetParameter.SheetParameterBuilder::::sheet(java.lang.Integer)": [
        161,
        164
      ],
      "SheetParameter.SheetParameterBuilder::::title(java.lang.String)": [
        166,
        169
      ],
      "SheetParameter.SheetParameterBuilder::::titleRowStartIndex(java.lang.Integer)": [
        171,
        174
      ],
      "SheetParameter.SheetParameterBuilder::::titleColumnStartIndex(java.lang.Integer)": [
        176,
        179
      ],
      "SheetParameter.SheetParameterBuilder::::headRowStartIndex(java.lang.Integer)": [
        181,
        184
      ],
      "SheetParameter.SheetParameterBuilder::::headColumnStartIndex(java.lang.Integer)": [
        186,
        189
      ],
      "SheetParameter.SheetParameterBuilder::::dataRowStartIndex(java.lang.Integer)": [
        191,
        194
      ],
      "SheetParameter.SheetParameterBuilder::::dataColumnStartIndex(java.lang.Integer)": [
        196,
        199
      ],
      "SheetParameter.SheetParameterBuilder::::sheetReadConsumer(io.github.zouzhiy.excel.callback.SheetReadConsumer<?>)": [
        202,
        210
      ],
      "SheetParameter.SheetParameterBuilder::::sheetWriteConsumer(io.github.zouzhiy.excel.callback.SheetWriteConsumer<?>)": [
        212,
        220
      ],
      "SheetParameter.SheetParameterBuilder::::build()": [
        227,
        237
      ],
      "SheetParameter.SheetParameterBuilder::::getTitleRowStartIndex()": [
        245,
        253
      ],
      "SheetParameter.SheetParameterBuilder::::getTitleColumnStartIndex()": [
        255,
        257
      ],
      "SheetParameter.SheetParameterBuilder::::getHeadRowStartIndex()": [
        265,
        273
      ],
      "SheetParameter.SheetParameterBuilder::::getHeadColumnStartIndex()": [
        275,
        277
      ],
      "SheetParameter.SheetParameterBuilder::::getDataRowStartIndex()": [
        279,
        281
      ],
      "SheetParameter.SheetParameterBuilder::::getDataColumnStartIndex()": [
        283,
        285
      ],
      "SheetParameter.SheetParameterBuilder::::getSheetReadConsumerList()": [
        288,
        290
      ],
      "SheetParameter.SheetParameterBuilder::::getSheetWriteConsumerList()": [
        292,
        294
      ]
    },
    "test_method_lines_dic": {
      "SheetParameterTest::::titleRowStartIndex1()": [
        16,
        22
      ],
      "SheetParameterTest::::titleRowStartIndex2()": [
        24,
        31
      ],
      "SheetParameterTest::::titleRowStartIndex3()": [
        33,
        40
      ],
      "SheetParameterTest::::titleRowStartIndex4()": [
        42,
        49
      ],
      "SheetParameterTest::::titleRowStartIndex5()": [
        51,
        58
      ],
      "SheetParameterTest::::titleRowStartIndex6()": [
        60,
        67
      ],
      "SheetParameterTest::::titleRowStartIndex7()": [
        69,
        77
      ],
      "SheetParameterTest::::titleRowStartIndex8()": [
        79,
        87
      ],
      "SheetParameterTest::::headRowStartIndex1()": [
        89,
        95
      ],
      "SheetParameterTest::::headRowStartIndex2()": [
        97,
        105
      ],
      "SheetParameterTest::::headRowStartIndex3()": [
        107,
        115
      ],
      "SheetParameterTest::::headRowStartIndex4()": [
        117,
        127
      ],
      "SheetParameterTest::::dataRowStartIndex1()": [
        129,
        135
      ],
      "SheetParameterTest::::dataRowStartIndex2()": [
        137,
        145
      ],
      "SheetParameterTest::::getTitleColumnStartIndex1()": [
        147,
        153
      ],
      "SheetParameterTest::::getTitleColumnStartIndex2()": [
        155,
        163
      ],
      "SheetParameterTest::::getHeadColumnStartIndex1()": [
        165,
        171
      ],
      "SheetParameterTest::::getHeadColumnStartIndex2()": [
        173,
        181
      ],
      "SheetParameterTest::::getDataColumnStartIndex1()": [
        184,
        190
      ],
      "SheetParameterTest::::getDataColumnStartIndex2()": [
        192,
        200
      ],
      "SheetParameterTest::::sheet()": [
        202,
        217
      ],
      "SheetParameterTest::::sheetReadConsumer1()": [
        220,
        226
      ],
      "SheetParameterTest::::sheetReadConsumer2()": [
        228,
        240
      ],
      "SheetParameterTest::::sheetWriteConsumer1()": [
        242,
        248
      ],
      "SheetParameterTest::::sheetWriteConsumer2()": [
        250,
        262
      ]
    },
    "reverse_method_lines_dic": {
      "124": "SheetParameter::::empty()",
      "125": "SheetParameter::::empty()",
      "126": "SheetParameter::::empty()",
      "128": "SheetParameter::::builder()",
      "129": "SheetParameter::::builder()",
      "130": "SheetParameter::::builder()",
      "156": "SheetParameter.SheetParameterBuilder::::sheet(java.lang.String)",
      "157": "SheetParameter.SheetParameterBuilder::::sheet(java.lang.String)",
      "158": "SheetParameter.SheetParameterBuilder::::sheet(java.lang.String)",
      "159": "SheetParameter.SheetParameterBuilder::::sheet(java.lang.String)",
      "161": "SheetParameter.SheetParameterBuilder::::sheet(java.lang.Integer)",
      "162": "SheetParameter.SheetParameterBuilder::::sheet(java.lang.Integer)",
      "163": "SheetParameter.SheetParameterBuilder::::sheet(java.lang.Integer)",
      "164": "SheetParameter.SheetParameterBuilder::::sheet(java.lang.Integer)",
      "166": "SheetParameter.SheetParameterBuilder::::title(java.lang.String)",
      "167": "SheetParameter.SheetParameterBuilder::::title(java.lang.String)",
      "168": "SheetParameter.SheetParameterBuilder::::title(java.lang.String)",
      "169": "SheetParameter.SheetParameterBuilder::::title(java.lang.String)",
      "171": "SheetParameter.SheetParameterBuilder::::titleRowStartIndex(java.lang.Integer)",
      "172": "SheetParameter.SheetParameterBuilder::::titleRowStartIndex(java.lang.Integer)",
      "173": "SheetParameter.SheetParameterBuilder::::titleRowStartIndex(java.lang.Integer)",
      "174": "SheetParameter.SheetParameterBuilder::::titleRowStartIndex(java.lang.Integer)",
      "176": "SheetParameter.SheetParameterBuilder::::titleColumnStartIndex(java.lang.Integer)",
      "177": "SheetParameter.SheetParameterBuilder::::titleColumnStartIndex(java.lang.Integer)",
      "178": "SheetParameter.SheetParameterBuilder::::titleColumnStartIndex(java.lang.Integer)",
      "179": "SheetParameter.SheetParameterBuilder::::titleColumnStartIndex(java.lang.Integer)",
      "181": "SheetParameter.SheetParameterBuilder::::headRowStartIndex(java.lang.Integer)",
      "182": "SheetParameter.SheetParameterBuilder::::headRowStartIndex(java.lang.Integer)",
      "183": "SheetParameter.SheetParameterBuilder::::headRowStartIndex(java.lang.Integer)",
      "184": "SheetParameter.SheetParameterBuilder::::headRowStartIndex(java.lang.Integer)",
      "186": "SheetParameter.SheetParameterBuilder::::headColumnStartIndex(java.lang.Integer)",
      "187": "SheetParameter.SheetParameterBuilder::::headColumnStartIndex(java.lang.Integer)",
      "188": "SheetParameter.SheetParameterBuilder::::headColumnStartIndex(java.lang.Integer)",
      "189": "SheetParameter.SheetParameterBuilder::::headColumnStartIndex(java.lang.Integer)",
      "191": "SheetParameter.SheetParameterBuilder::::dataRowStartIndex(java.lang.Integer)",
      "192": "SheetParameter.SheetParameterBuilder::::dataRowStartIndex(java.lang.Integer)",
      "193": "SheetParameter.SheetParameterBuilder::::dataRowStartIndex(java.lang.Integer)",
      "194": "SheetParameter.SheetParameterBuilder::::dataRowStartIndex(java.lang.Integer)",
      "196": "SheetParameter.SheetParameterBuilder::::dataColumnStartIndex(java.lang.Integer)",
      "197": "SheetParameter.SheetParameterBuilder::::dataColumnStartIndex(java.lang.Integer)",
      "198": "SheetParameter.SheetParameterBuilder::::dataColumnStartIndex(java.lang.Integer)",
      "199": "SheetParameter.SheetParameterBuilder::::dataColumnStartIndex(java.lang.Integer)",
      "202": "SheetParameter.SheetParameterBuilder::::sheetReadConsumer(io.github.zouzhiy.excel.callback.SheetReadConsumer<?>)",
      "203": "SheetParameter.SheetParameterBuilder::::sheetReadConsumer(io.github.zouzhiy.excel.callback.SheetReadConsumer<?>)",
      "204": "SheetParameter.SheetParameterBuilder::::sheetReadConsumer(io.github.zouzhiy.excel.callback.SheetReadConsumer<?>)",
      "205": "SheetParameter.SheetParameterBuilder::::sheetReadConsumer(io.github.zouzhiy.excel.callback.SheetReadConsumer<?>)",
      "206": "SheetParameter.SheetParameterBuilder::::sheetReadConsumer(io.github.zouzhiy.excel.callback.SheetReadConsumer<?>)",
      "207": "SheetParameter.SheetParameterBuilder::::sheetReadConsumer(io.github.zouzhiy.excel.callback.SheetReadConsumer<?>)",
      "208": "SheetParameter.SheetParameterBuilder::::sheetReadConsumer(io.github.zouzhiy.excel.callback.SheetReadConsumer<?>)",
      "209": "SheetParameter.SheetParameterBuilder::::sheetReadConsumer(io.github.zouzhiy.excel.callback.SheetReadConsumer<?>)",
      "210": "SheetParameter.SheetParameterBuilder::::sheetReadConsumer(io.github.zouzhiy.excel.callback.SheetReadConsumer<?>)",
      "212": "SheetParameter.SheetParameterBuilder::::sheetWriteConsumer(io.github.zouzhiy.excel.callback.SheetWriteConsumer<?>)",
      "213": "SheetParameter.SheetParameterBuilder::::sheetWriteConsumer(io.github.zouzhiy.excel.callback.SheetWriteConsumer<?>)",
      "214": "SheetParameter.SheetParameterBuilder::::sheetWriteConsumer(io.github.zouzhiy.excel.callback.SheetWriteConsumer<?>)",
      "215": "SheetParameter.SheetParameterBuilder::::sheetWriteConsumer(io.github.zouzhiy.excel.callback.SheetWriteConsumer<?>)",
      "216": "SheetParameter.SheetParameterBuilder::::sheetWriteConsumer(io.github.zouzhiy.excel.callback.SheetWriteConsumer<?>)",
      "217": "SheetParameter.SheetParameterBuilder::::sheetWriteConsumer(io.github.zouzhiy.excel.callback.SheetWriteConsumer<?>)",
      "218": "SheetParameter.SheetParameterBuilder::::sheetWriteConsumer(io.github.zouzhiy.excel.callback.SheetWriteConsumer<?>)",
      "219": "SheetParameter.SheetParameterBuilder::::sheetWriteConsumer(io.github.zouzhiy.excel.callback.SheetWriteConsumer<?>)",
      "220": "SheetParameter.SheetParameterBuilder::::sheetWriteConsumer(io.github.zouzhiy.excel.callback.SheetWriteConsumer<?>)",
      "227": "SheetParameter.SheetParameterBuilder::::build()",
      "228": "SheetParameter.SheetParameterBuilder::::build()",
      "229": "SheetParameter.SheetParameterBuilder::::build()",
      "230": "SheetParameter.SheetParameterBuilder::::build()",
      "231": "SheetParameter.SheetParameterBuilder::::build()",
      "232": "SheetParameter.SheetParameterBuilder::::build()",
      "233": "SheetParameter.SheetParameterBuilder::::build()",
      "234": "SheetParameter.SheetParameterBuilder::::build()",
      "235": "SheetParameter.SheetParameterBuilder::::build()",
      "236": "SheetParameter.SheetParameterBuilder::::build()",
      "237": "SheetParameter.SheetParameterBuilder::::build()",
      "245": "SheetParameter.SheetParameterBuilder::::getTitleRowStartIndex()",
      "246": "SheetParameter.SheetParameterBuilder::::getTitleRowStartIndex()",
      "247": "SheetParameter.SheetParameterBuilder::::getTitleRowStartIndex()",
      "248": "SheetParameter.SheetParameterBuilder::::getTitleRowStartIndex()",
      "249": "SheetParameter.SheetParameterBuilder::::getTitleRowStartIndex()",
      "250": "SheetParameter.SheetParameterBuilder::::getTitleRowStartIndex()",
      "251": "SheetParameter.SheetParameterBuilder::::getTitleRowStartIndex()",
      "252": "SheetParameter.SheetParameterBuilder::::getTitleRowStartIndex()",
      "253": "SheetParameter.SheetParameterBuilder::::getTitleRowStartIndex()",
      "255": "SheetParameter.SheetParameterBuilder::::getTitleColumnStartIndex()",
      "256": "SheetParameter.SheetParameterBuilder::::getTitleColumnStartIndex()",
      "257": "SheetParameter.SheetParameterBuilder::::getTitleColumnStartIndex()",
      "265": "SheetParameter.SheetParameterBuilder::::getHeadRowStartIndex()",
      "266": "SheetParameter.SheetParameterBuilder::::getHeadRowStartIndex()",
      "267": "SheetParameter.SheetParameterBuilder::::getHeadRowStartIndex()",
      "268": "SheetParameter.SheetParameterBuilder::::getHeadRowStartIndex()",
      "269": "SheetParameter.SheetParameterBuilder::::getHeadRowStartIndex()",
      "270": "SheetParameter.SheetParameterBuilder::::getHeadRowStartIndex()",
      "271": "SheetParameter.SheetParameterBuilder::::getHeadRowStartIndex()",
      "272": "SheetParameter.SheetParameterBuilder::::getHeadRowStartIndex()",
      "273": "SheetParameter.SheetParameterBuilder::::getHeadRowStartIndex()",
      "275": "SheetParameter.SheetParameterBuilder::::getHeadColumnStartIndex()",
      "276": "SheetParameter.SheetParameterBuilder::::getHeadColumnStartIndex()",
      "277": "SheetParameter.SheetParameterBuilder::::getHeadColumnStartIndex()",
      "279": "SheetParameter.SheetParameterBuilder::::getDataRowStartIndex()",
      "280": "SheetParameter.SheetParameterBuilder::::getDataRowStartIndex()",
      "281": "SheetParameter.SheetParameterBuilder::::getDataRowStartIndex()",
      "283": "SheetParameter.SheetParameterBuilder::::getDataColumnStartIndex()",
      "284": "SheetParameter.SheetParameterBuilder::::getDataColumnStartIndex()",
      "285": "SheetParameter.SheetParameterBuilder::::getDataColumnStartIndex()",
      "288": "SheetParameter.SheetParameterBuilder::::getSheetReadConsumerList()",
      "289": "SheetParameter.SheetParameterBuilder::::getSheetReadConsumerList()",
      "290": "SheetParameter.SheetParameterBuilder::::getSheetReadConsumerList()",
      "292": "SheetParameter.SheetParameterBuilder::::getSheetWriteConsumerList()",
      "293": "SheetParameter.SheetParameterBuilder::::getSheetWriteConsumerList()",
      "294": "SheetParameter.SheetParameterBuilder::::getSheetWriteConsumerList()"
    },
    "test_reverse_method_lines_dic": {
      "16": "SheetParameterTest::::titleRowStartIndex1()",
      "17": "SheetParameterTest::::titleRowStartIndex1()",
      "18": "SheetParameterTest::::titleRowStartIndex1()",
      "19": "SheetParameterTest::::titleRowStartIndex1()",
      "20": "SheetParameterTest::::titleRowStartIndex1()",
      "21": "SheetParameterTest::::titleRowStartIndex1()",
      "22": "SheetParameterTest::::titleRowStartIndex1()",
      "24": "SheetParameterTest::::titleRowStartIndex2()",
      "25": "SheetParameterTest::::titleRowStartIndex2()",
      "26": "SheetParameterTest::::titleRowStartIndex2()",
      "27": "SheetParameterTest::::titleRowStartIndex2()",
      "28": "SheetParameterTest::::titleRowStartIndex2()",
      "29": "SheetParameterTest::::titleRowStartIndex2()",
      "30": "SheetParameterTest::::titleRowStartIndex2()",
      "31": "SheetParameterTest::::titleRowStartIndex2()",
      "33": "SheetParameterTest::::titleRowStartIndex3()",
      "34": "SheetParameterTest::::titleRowStartIndex3()",
      "35": "SheetParameterTest::::titleRowStartIndex3()",
      "36": "SheetParameterTest::::titleRowStartIndex3()",
      "37": "SheetParameterTest::::titleRowStartIndex3()",
      "38": "SheetParameterTest::::titleRowStartIndex3()",
      "39": "SheetParameterTest::::titleRowStartIndex3()",
      "40": "SheetParameterTest::::titleRowStartIndex3()",
      "42": "SheetParameterTest::::titleRowStartIndex4()",
      "43": "SheetParameterTest::::titleRowStartIndex4()",
      "44": "SheetParameterTest::::titleRowStartIndex4()",
      "45": "SheetParameterTest::::titleRowStartIndex4()",
      "46": "SheetParameterTest::::titleRowStartIndex4()",
      "47": "SheetParameterTest::::titleRowStartIndex4()",
      "48": "SheetParameterTest::::titleRowStartIndex4()",
      "49": "SheetParameterTest::::titleRowStartIndex4()",
      "51": "SheetParameterTest::::titleRowStartIndex5()",
      "52": "SheetParameterTest::::titleRowStartIndex5()",
      "53": "SheetParameterTest::::titleRowStartIndex5()",
      "54": "SheetParameterTest::::titleRowStartIndex5()",
      "55": "SheetParameterTest::::titleRowStartIndex5()",
      "56": "SheetParameterTest::::titleRowStartIndex5()",
      "57": "SheetParameterTest::::titleRowStartIndex5()",
      "58": "SheetParameterTest::::titleRowStartIndex5()",
      "60": "SheetParameterTest::::titleRowStartIndex6()",
      "61": "SheetParameterTest::::titleRowStartIndex6()",
      "62": "SheetParameterTest::::titleRowStartIndex6()",
      "63": "SheetParameterTest::::titleRowStartIndex6()",
      "64": "SheetParameterTest::::titleRowStartIndex6()",
      "65": "SheetParameterTest::::titleRowStartIndex6()",
      "66": "SheetParameterTest::::titleRowStartIndex6()",
      "67": "SheetParameterTest::::titleRowStartIndex6()",
      "69": "SheetParameterTest::::titleRowStartIndex7()",
      "70": "SheetParameterTest::::titleRowStartIndex7()",
      "71": "SheetParameterTest::::titleRowStartIndex7()",
      "72": "SheetParameterTest::::titleRowStartIndex7()",
      "73": "SheetParameterTest::::titleRowStartIndex7()",
      "74": "SheetParameterTest::::titleRowStartIndex7()",
      "75": "SheetParameterTest::::titleRowStartIndex7()",
      "76": "SheetParameterTest::::titleRowStartIndex7()",
      "77": "SheetParameterTest::::titleRowStartIndex7()",
      "79": "SheetParameterTest::::titleRowStartIndex8()",
      "80": "SheetParameterTest::::titleRowStartIndex8()",
      "81": "SheetParameterTest::::titleRowStartIndex8()",
      "82": "SheetParameterTest::::titleRowStartIndex8()",
      "83": "SheetParameterTest::::titleRowStartIndex8()",
      "84": "SheetParameterTest::::titleRowStartIndex8()",
      "85": "SheetParameterTest::::titleRowStartIndex8()",
      "86": "SheetParameterTest::::titleRowStartIndex8()",
      "87": "SheetParameterTest::::titleRowStartIndex8()",
      "89": "SheetParameterTest::::headRowStartIndex1()",
      "90": "SheetParameterTest::::headRowStartIndex1()",
      "91": "SheetParameterTest::::headRowStartIndex1()",
      "92": "SheetParameterTest::::headRowStartIndex1()",
      "93": "SheetParameterTest::::headRowStartIndex1()",
      "94": "SheetParameterTest::::headRowStartIndex1()",
      "95": "SheetParameterTest::::headRowStartIndex1()",
      "97": "SheetParameterTest::::headRowStartIndex2()",
      "98": "SheetParameterTest::::headRowStartIndex2()",
      "99": "SheetParameterTest::::headRowStartIndex2()",
      "100": "SheetParameterTest::::headRowStartIndex2()",
      "101": "SheetParameterTest::::headRowStartIndex2()",
      "102": "SheetParameterTest::::headRowStartIndex2()",
      "103": "SheetParameterTest::::headRowStartIndex2()",
      "104": "SheetParameterTest::::headRowStartIndex2()",
      "105": "SheetParameterTest::::headRowStartIndex2()",
      "107": "SheetParameterTest::::headRowStartIndex3()",
      "108": "SheetParameterTest::::headRowStartIndex3()",
      "109": "SheetParameterTest::::headRowStartIndex3()",
      "110": "SheetParameterTest::::headRowStartIndex3()",
      "111": "SheetParameterTest::::headRowStartIndex3()",
      "112": "SheetParameterTest::::headRowStartIndex3()",
      "113": "SheetParameterTest::::headRowStartIndex3()",
      "114": "SheetParameterTest::::headRowStartIndex3()",
      "115": "SheetParameterTest::::headRowStartIndex3()",
      "117": "SheetParameterTest::::headRowStartIndex4()",
      "118": "SheetParameterTest::::headRowStartIndex4()",
      "119": "SheetParameterTest::::headRowStartIndex4()",
      "120": "SheetParameterTest::::headRowStartIndex4()",
      "121": "SheetParameterTest::::headRowStartIndex4()",
      "122": "SheetParameterTest::::headRowStartIndex4()",
      "123": "SheetParameterTest::::headRowStartIndex4()",
      "124": "SheetParameterTest::::headRowStartIndex4()",
      "125": "SheetParameterTest::::headRowStartIndex4()",
      "126": "SheetParameterTest::::headRowStartIndex4()",
      "127": "SheetParameterTest::::headRowStartIndex4()",
      "129": "SheetParameterTest::::dataRowStartIndex1()",
      "130": "SheetParameterTest::::dataRowStartIndex1()",
      "131": "SheetParameterTest::::dataRowStartIndex1()",
      "132": "SheetParameterTest::::dataRowStartIndex1()",
      "133": "SheetParameterTest::::dataRowStartIndex1()",
      "134": "SheetParameterTest::::dataRowStartIndex1()",
      "135": "SheetParameterTest::::dataRowStartIndex1()",
      "137": "SheetParameterTest::::dataRowStartIndex2()",
      "138": "SheetParameterTest::::dataRowStartIndex2()",
      "139": "SheetParameterTest::::dataRowStartIndex2()",
      "140": "SheetParameterTest::::dataRowStartIndex2()",
      "141": "SheetParameterTest::::dataRowStartIndex2()",
      "142": "SheetParameterTest::::dataRowStartIndex2()",
      "143": "SheetParameterTest::::dataRowStartIndex2()",
      "144": "SheetParameterTest::::dataRowStartIndex2()",
      "145": "SheetParameterTest::::dataRowStartIndex2()",
      "147": "SheetParameterTest::::getTitleColumnStartIndex1()",
      "148": "SheetParameterTest::::getTitleColumnStartIndex1()",
      "149": "SheetParameterTest::::getTitleColumnStartIndex1()",
      "150": "SheetParameterTest::::getTitleColumnStartIndex1()",
      "151": "SheetParameterTest::::getTitleColumnStartIndex1()",
      "152": "SheetParameterTest::::getTitleColumnStartIndex1()",
      "153": "SheetParameterTest::::getTitleColumnStartIndex1()",
      "155": "SheetParameterTest::::getTitleColumnStartIndex2()",
      "156": "SheetParameterTest::::getTitleColumnStartIndex2()",
      "157": "SheetParameterTest::::getTitleColumnStartIndex2()",
      "158": "SheetParameterTest::::getTitleColumnStartIndex2()",
      "159": "SheetParameterTest::::getTitleColumnStartIndex2()",
      "160": "SheetParameterTest::::getTitleColumnStartIndex2()",
      "161": "SheetParameterTest::::getTitleColumnStartIndex2()",
      "162": "SheetParameterTest::::getTitleColumnStartIndex2()",
      "163": "SheetParameterTest::::getTitleColumnStartIndex2()",
      "165": "SheetParameterTest::::getHeadColumnStartIndex1()",
      "166": "SheetParameterTest::::getHeadColumnStartIndex1()",
      "167": "SheetParameterTest::::getHeadColumnStartIndex1()",
      "168": "SheetParameterTest::::getHeadColumnStartIndex1()",
      "169": "SheetParameterTest::::getHeadColumnStartIndex1()",
      "170": "SheetParameterTest::::getHeadColumnStartIndex1()",
      "171": "SheetParameterTest::::getHeadColumnStartIndex1()",
      "173": "SheetParameterTest::::getHeadColumnStartIndex2()",
      "174": "SheetParameterTest::::getHeadColumnStartIndex2()",
      "175": "SheetParameterTest::::getHeadColumnStartIndex2()",
      "176": "SheetParameterTest::::getHeadColumnStartIndex2()",
      "177": "SheetParameterTest::::getHeadColumnStartIndex2()",
      "178": "SheetParameterTest::::getHeadColumnStartIndex2()",
      "179": "SheetParameterTest::::getHeadColumnStartIndex2()",
      "180": "SheetParameterTest::::getHeadColumnStartIndex2()",
      "181": "SheetParameterTest::::getHeadColumnStartIndex2()",
      "184": "SheetParameterTest::::getDataColumnStartIndex1()",
      "185": "SheetParameterTest::::getDataColumnStartIndex1()",
      "186": "SheetParameterTest::::getDataColumnStartIndex1()",
      "187": "SheetParameterTest::::getDataColumnStartIndex1()",
      "188": "SheetParameterTest::::getDataColumnStartIndex1()",
      "189": "SheetParameterTest::::getDataColumnStartIndex1()",
      "190": "SheetParameterTest::::getDataColumnStartIndex1()",
      "192": "SheetParameterTest::::getDataColumnStartIndex2()",
      "193": "SheetParameterTest::::getDataColumnStartIndex2()",
      "194": "SheetParameterTest::::getDataColumnStartIndex2()",
      "195": "SheetParameterTest::::getDataColumnStartIndex2()",
      "196": "SheetParameterTest::::getDataColumnStartIndex2()",
      "197": "SheetParameterTest::::getDataColumnStartIndex2()",
      "198": "SheetParameterTest::::getDataColumnStartIndex2()",
      "199": "SheetParameterTest::::getDataColumnStartIndex2()",
      "200": "SheetParameterTest::::getDataColumnStartIndex2()",
      "202": "SheetParameterTest::::sheet()",
      "203": "SheetParameterTest::::sheet()",
      "204": "SheetParameterTest::::sheet()",
      "205": "SheetParameterTest::::sheet()",
      "206": "SheetParameterTest::::sheet()",
      "207": "SheetParameterTest::::sheet()",
      "208": "SheetParameterTest::::sheet()",
      "209": "SheetParameterTest::::sheet()",
      "210": "SheetParameterTest::::sheet()",
      "211": "SheetParameterTest::::sheet()",
      "212": "SheetParameterTest::::sheet()",
      "213": "SheetParameterTest::::sheet()",
      "214": "SheetParameterTest::::sheet()",
      "215": "SheetParameterTest::::sheet()",
      "216": "SheetParameterTest::::sheet()",
      "217": "SheetParameterTest::::sheet()",
      "220": "SheetParameterTest::::sheetReadConsumer1()",
      "221": "SheetParameterTest::::sheetReadConsumer1()",
      "222": "SheetParameterTest::::sheetReadConsumer1()",
      "223": "SheetParameterTest::::sheetReadConsumer1()",
      "224": "SheetParameterTest::::sheetReadConsumer1()",
      "225": "SheetParameterTest::::sheetReadConsumer1()",
      "226": "SheetParameterTest::::sheetReadConsumer1()",
      "228": "SheetParameterTest::::sheetReadConsumer2()",
      "229": "SheetParameterTest::::sheetReadConsumer2()",
      "230": "SheetParameterTest::::sheetReadConsumer2()",
      "231": "SheetParameterTest::::sheetReadConsumer2()",
      "232": "SheetParameterTest::::sheetReadConsumer2()",
      "233": "SheetParameterTest::::sheetReadConsumer2()",
      "234": "SheetParameterTest::::sheetReadConsumer2()",
      "235": "SheetParameterTest::::sheetReadConsumer2()",
      "236": "SheetParameterTest::::sheetReadConsumer2()",
      "237": "SheetParameterTest::::sheetReadConsumer2()",
      "238": "SheetParameterTest::::sheetReadConsumer2()",
      "239": "SheetParameterTest::::sheetReadConsumer2()",
      "240": "SheetParameterTest::::sheetReadConsumer2()",
      "242": "SheetParameterTest::::sheetWriteConsumer1()",
      "243": "SheetParameterTest::::sheetWriteConsumer1()",
      "244": "SheetParameterTest::::sheetWriteConsumer1()",
      "245": "SheetParameterTest::::sheetWriteConsumer1()",
      "246": "SheetParameterTest::::sheetWriteConsumer1()",
      "247": "SheetParameterTest::::sheetWriteConsumer1()",
      "248": "SheetParameterTest::::sheetWriteConsumer1()",
      "250": "SheetParameterTest::::sheetWriteConsumer2()",
      "251": "SheetParameterTest::::sheetWriteConsumer2()",
      "252": "SheetParameterTest::::sheetWriteConsumer2()",
      "253": "SheetParameterTest::::sheetWriteConsumer2()",
      "254": "SheetParameterTest::::sheetWriteConsumer2()",
      "255": "SheetParameterTest::::sheetWriteConsumer2()",
      "256": "SheetParameterTest::::sheetWriteConsumer2()",
      "257": "SheetParameterTest::::sheetWriteConsumer2()",
      "258": "SheetParameterTest::::sheetWriteConsumer2()",
      "259": "SheetParameterTest::::sheetWriteConsumer2()",
      "260": "SheetParameterTest::::sheetWriteConsumer2()",
      "261": "SheetParameterTest::::sheetWriteConsumer2()",
      "262": "SheetParameterTest::::sheetWriteConsumer2()"
    },
    "tests": [
      {
        "test_lines": [
          16,
          22
        ],
        "covered_lines": [
          58,
          105,
          106,
          107,
          108,
          109,
          110,
          111,
          112,
          113,
          114,
          115,
          116,
          117,
          129,
          132,
          228,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          236,
          246,
          248,
          251,
          256,
          266,
          268,
          271,
          276,
          280,
          284,
          289,
          293
        ]
      },
      {
        "test_lines": [
          24,
          31
        ],
        "covered_lines": [
          58,
          105,
          106,
          107,
          108,
          109,
          110,
          111,
          112,
          113,
          114,
          115,
          116,
          117,
          129,
          132,
          182,
          183,
          228,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          236,
          246,
          248,
          249,
          256,
          266,
          267,
          276,
          280,
          284,
          289,
          293
        ]
      },
      {
        "test_lines": [
          33,
          40
        ],
        "covered_lines": [
          58,
          105,
          106,
          107,
          108,
          109,
          110,
          111,
          112,
          113,
          114,
          115,
          116,
          117,
          129,
          132,
          182,
          183,
          228,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          236,
          246,
          248,
          249,
          256,
          266,
          267,
          276,
          280,
          284,
          289,
          293
        ]
      },
      {
        "test_lines": [
          42,
          49
        ],
        "covered_lines": [
          58,
          105,
          106,
          107,
          108,
          109,
          110,
          111,
          112,
          113,
          114,
          115,
          116,
          117,
          129,
          132,
          192,
          193,
          228,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          236,
          246,
          248,
          251,
          256,
          266,
          268,
          271,
          276,
          280,
          284,
          289,
          293
        ]
      },
      {
        "test_lines": [
          51,
          58
        ],
        "covered_lines": [
          58,
          105,
          106,
          107,
          108,
          109,
          110,
          111,
          112,
          113,
          114,
          115,
          116,
          117,
          129,
          132,
          192,
          193,
          228,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          236,
          246,
          248,
          251,
          256,
          266,
          268,
          269,
          276,
          280,
          284,
          289,
          293
        ]
      },
      {
        "test_lines": [
          60,
          67
        ],
        "covered_lines": [
          58,
          105,
          106,
          107,
          108,
          109,
          110,
          111,
          112,
          113,
          114,
          115,
          116,
          117,
          129,
          132,
          192,
          193,
          228,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          236,
          246,
          248,
          249,
          256,
          266,
          268,
          269,
          276,
          280,
          284,
          289,
          293
        ]
      },
      {
        "test_lines": [
          69,
          77
        ],
        "covered_lines": [
          58,
          105,
          106,
          107,
          108,
          109,
          110,
          111,
          112,
          113,
          114,
          115,
          116,
          117,
          129,
          132,
          182,
          183,
          192,
          193,
          228,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          236,
          246,
          248,
          251,
          256,
          266,
          267,
          276,
          280,
          284,
          289,
          293
        ]
      },
      {
        "test_lines": [
          79,
          87
        ],
        "covered_lines": [
          58,
          105,
          106,
          107,
          108,
          109,
          110,
          111,
          112,
          113,
          114,
          115,
          116,
          117,
          129,
          132,
          182,
          183,
          192,
          193,
          228,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          236,
          246,
          248,
          249,
          256,
          266,
          267,
          276,
          280,
          284,
          289,
          293
        ]
      },
      {
        "test_lines": [
          89,
          95
        ],
        "covered_lines": [
          58,
          105,
          106,
          107,
          108,
          109,
          110,
          111,
          112,
          113,
          114,
          115,
          116,
          117,
          129,
          132,
          228,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          236,
          246,
          248,
          251,
          256,
          266,
          268,
          271,
          276,
          280,
          284,
          289,
          293
        ]
      },
      {
        "test_lines": [
          97,
          105
        ],
        "covered_lines": [
          70,
          105,
          106,
          107,
          108,
          109,
          110,
          111,
          112,
          113,
          114,
          115,
          116,
          117,
          129,
          132,
          182,
          183,
          228,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          236,
          246,
          248,
          249,
          256,
          266,
          267,
          276,
          280,
          284,
          289,
          293
        ]
      },
      {
        "test_lines": [
          107,
          115
        ],
        "covered_lines": [
          70,
          105,
          106,
          107,
          108,
          109,
          110,
          111,
          112,
          113,
          114,
          115,
          116,
          117,
          129,
          132,
          192,
          193,
          228,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          236,
          246,
          248,
          249,
          256,
          266,
          268,
          269,
          276,
          280,
          284,
          289,
          293
        ]
      },
      {
        "test_lines": [
          117,
          127
        ],
        "covered_lines": [
          70,
          105,
          106,
          107,
          108,
          109,
          110,
          111,
          112,
          113,
          114,
          115,
          116,
          117,
          129,
          132,
          182,
          183,
          192,
          193,
          228,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          236,
          246,
          248,
          249,
          256,
          266,
          267,
          276,
          280,
          284,
          289,
          293
        ]
      },
      {
        "test_lines": [
          129,
          135
        ],
        "covered_lines": [
          82,
          105,
          106,
          107,
          108,
          109,
          110,
          111,
          112,
          113,
          114,
          115,
          116,
          117,
          129,
          132,
          228,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          236,
          246,
          248,
          251,
          256,
          266,
          268,
          271,
          276,
          280,
          284,
          289,
          293
        ]
      },
      {
        "test_lines": [
          137,
          145
        ],
        "covered_lines": [
          82,
          105,
          106,
          107,
          108,
          109,
          110,
          111,
          112,
          113,
          114,
          115,
          116,
          117,
          129,
          132,
          192,
          193,
          228,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          236,
          246,
          248,
          249,
          256,
          266,
          268,
          269,
          276,
          280,
          284,
          289,
          293
        ]
      },
      {
        "test_lines": [
          147,
          153
        ],
        "covered_lines": [
          64,
          105,
          106,
          107,
          108,
          109,
          110,
          111,
          112,
          113,
          114,
          115,
          116,
          117,
          129,
          132,
          228,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          236,
          246,
          248,
          251,
          256,
          266,
          268,
          271,
          276,
          280,
          284,
          289,
          293
        ]
      },
      {
        "test_lines": [
          155,
          163
        ],
        "covered_lines": [
          64,
          105,
          106,
          107,
          108,
          109,
          110,
          111,
          112,
          113,
          114,
          115,
          116,
          117,
          129,
          132,
          177,
          178,
          228,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          236,
          246,
          248,
          251,
          256,
          266,
          268,
          271,
          276,
          280,
          284,
          289,
          293
        ]
      },
      {
        "test_lines": [
          165,
          171
        ],
        "covered_lines": [
          76,
          105,
          106,
          107,
          108,
          109,
          110,
          111,
          112,
          113,
          114,
          115,
          116,
          117,
          129,
          132,
          228,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          236,
          246,
          248,
          251,
          256,
          266,
          268,
          271,
          276,
          280,
          284,
          289,
          293
        ]
      },
      {
        "test_lines": [
          173,
          181
        ],
        "covered_lines": [
          76,
          105,
          106,
          107,
          108,
          109,
          110,
          111,
          112,
          113,
          114,
          115,
          116,
          117,
          129,
          132,
          187,
          188,
          228,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          236,
          246,
          248,
          251,
          256,
          266,
          268,
          271,
          276,
          280,
          284,
          289,
          293
        ]
      },
      {
        "test_lines": [
          184,
          190
        ],
        "covered_lines": [
          88,
          105,
          106,
          107,
          108,
          109,
          110,
          111,
          112,
          113,
          114,
          115,
          116,
          117,
          129,
          132,
          228,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          236,
          246,
          248,
          251,
          256,
          266,
          268,
          271,
          276,
          280,
          284,
          289,
          293
        ]
      },
      {
        "test_lines": [
          192,
          200
        ],
        "covered_lines": [
          88,
          105,
          106,
          107,
          108,
          109,
          110,
          111,
          112,
          113,
          114,
          115,
          116,
          117,
          129,
          132,
          197,
          198,
          228,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          236,
          246,
          248,
          251,
          256,
          266,
          268,
          271,
          276,
          280,
          284,
          289,
          293
        ]
      },
      {
        "test_lines": [
          202,
          217
        ],
        "covered_lines": [
          42,
          46,
          51,
          105,
          106,
          107,
          108,
          109,
          110,
          111,
          112,
          113,
          114,
          115,
          116,
          117,
          129,
          132,
          157,
          158,
          162,
          163,
          167,
          168,
          228,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          236,
          246,
          248,
          251,
          256,
          266,
          268,
          271,
          276,
          280,
          284,
          289,
          293
        ]
      },
      {
        "test_lines": [
          220,
          226
        ],
        "covered_lines": [
          93,
          105,
          106,
          107,
          108,
          109,
          110,
          111,
          112,
          113,
          114,
          115,
          116,
          117,
          129,
          132,
          228,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          236,
          246,
          248,
          251,
          256,
          266,
          268,
          271,
          276,
          280,
          284,
          289,
          293
        ]
      },
      {
        "test_lines": [
          228,
          240
        ],
        "covered_lines": [
          93,
          105,
          106,
          107,
          108,
          109,
          110,
          111,
          112,
          113,
          114,
          115,
          116,
          117,
          129,
          132,
          203,
          204,
          206,
          207,
          209,
          228,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          236,
          246,
          248,
          251,
          256,
          266,
          268,
          271,
          276,
          280,
          284,
          289,
          293
        ]
      },
      {
        "test_lines": [
          242,
          248
        ],
        "covered_lines": [
          98,
          105,
          106,
          107,
          108,
          109,
          110,
          111,
          112,
          113,
          114,
          115,
          116,
          117,
          129,
          132,
          228,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          236,
          246,
          248,
          251,
          256,
          266,
          268,
          271,
          276,
          280,
          284,
          289,
          293
        ]
      },
      {
        "test_lines": [
          250,
          262
        ],
        "covered_lines": [
          98,
          105,
          106,
          107,
          108,
          109,
          110,
          111,
          112,
          113,
          114,
          115,
          116,
          117,
          129,
          132,
          213,
          214,
          216,
          217,
          219,
          228,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          236,
          246,
          248,
          251,
          256,
          266,
          268,
          271,
          276,
          280,
          284,
          289,
          293
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/zouzhiy-excel/src/main/java/io/github/zouzhiy/excel/metadata/parameter/WorkbookParameter.java": {
    "class_content": [
      "/*\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package io.github.zouzhiy.excel.metadata.parameter;\n",
      "\n",
      "import io.github.zouzhiy.excel.callback.CellStyleConsumer;\n",
      "import io.github.zouzhiy.excel.exceptions.ExcelException;\n",
      "import lombok.Getter;\n",
      "\n",
      "import java.io.*;\n",
      "import java.util.ArrayList;\n",
      "import java.util.Collections;\n",
      "import java.util.List;\n",
      "\n",
      "/**\n",
      " * @author zouzhiy\n",
      " * @since 2022/7/2\n",
      " */\n",
      "@Getter\n",
      "public class WorkbookParameter {\n",
      "\n",
      "    /**\n",
      "     * \u8f93\u5165\u6587\u4ef6\u540d\u79f0\u3002\uff08\u5bfc\u5165\u6587\u4ef6\u6216\u8005\u5bfc\u51fa\u65f6\u7684\u6a21\u677f\u6587\u4ef6\uff09\n",
      "     */\n",
      "    private final String inputFileName;\n",
      "    /**\n",
      "     * \u8f93\u5165\u6587\u4ef6\u7edd\u5bf9\u8def\u5f84\u3002\uff08\u5bfc\u5165\u6587\u4ef6\u6216\u8005\u5bfc\u51fa\u65f6\u7684\u6a21\u677f\u6587\u4ef6\uff09\n",
      "     */\n",
      "    private final String inputFilePath;\n",
      "    /**\n",
      "     * \u8f93\u5165\u6587\u4ef6\u3002\uff08\u5bfc\u5165\u6587\u4ef6\u6216\u8005\u5bfc\u51fa\u65f6\u7684\u6a21\u677f\u6587\u4ef6\uff09\n",
      "     */\n",
      "    private final File inputFile;\n",
      "\n",
      "    /**\n",
      "     * \u8f93\u5165\u6d41\u3002\uff08\u5bfc\u5165\u6d41\u6216\u8005\u5bfc\u51fa\u65f6\u7684\u6a21\u677f\u6d41\uff09\n",
      "     */\n",
      "    private final InputStream inputStream;\n",
      "\n",
      "    /**\n",
      "     * \u5bfc\u51fa\u6587\u4ef6\u540d\u79f0\n",
      "     */\n",
      "    private final String outputFileName;\n",
      "    /**\n",
      "     * \u5bfc\u51fa\u6587\u4ef6\u7edd\u5bf9\u8def\u5f84\n",
      "     */\n",
      "    private final String outputFilePath;\n",
      "    /**\n",
      "     * \u5bfc\u51fa\u6587\u4ef6\n",
      "     */\n",
      "    private final File outputFile;\n",
      "    /**\n",
      "     * \u5bfc\u51fa\u6d41\n",
      "     */\n",
      "    private final OutputStream outputStream;\n",
      "\n",
      "    /**\n",
      "     * \u662f\u5426xlsx.\u9ed8\u8ba4\u53d6True.\n",
      "     * \u4f1a\u6839\u636e\u8f93\u5165\u3001\u8f93\u51fa\u6587\u4ef6\u540d\u79f0\u540e\u7f00\u5224\u65ad\u3002\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8d4b\u503c\n",
      "     * \u4f46\u4e24\u8005\u4e0d\u53ef\u51b2\u7a81\uff0c\u5426\u5219\u629b\u51fa\u5f02\u5e38\n",
      "     */\n",
      "    private final boolean xssf;\n",
      "\n",
      "    /**\n",
      "     * sheet\u914d\u7f6e\u5217\u8868\u3002\n",
      "     * \u9884\u7559\u591asheet\u652f\u6301\u624d\u91c7\u7528\u5217\u8868\u7684\u5f62\u5f0f\u5b58\u50a8\n",
      "     */\n",
      "    private final List<SheetParameter> sheetParameterList;\n",
      "\n",
      "    /**\n",
      "     * \u5355\u5143\u683c\u7c7b\u578b\u5904\u7406\u56de\u8c03 {@link CellStyleConsumer}\n",
      "     */\n",
      "    private final List<CellStyleConsumer> cellStyleConsumerList;\n",
      "\n",
      "    private WorkbookParameter(String inputFileName, String inputFilePath, File inputFile\n",
      "            , InputStream inputStream\n",
      "            , String outputFileName, String outputFilePath, File outputFile\n",
      "            , OutputStream outputStream\n",
      "            , Boolean xssf\n",
      "            , List<SheetParameter> sheetParameterList\n",
      "            , List<CellStyleConsumer> cellStyleConsumerList) {\n",
      "        this.inputFileName = inputFileName;\n",
      "        this.inputFilePath = inputFilePath;\n",
      "        this.inputFile = inputFile;\n",
      "        this.inputStream = inputStream;\n",
      "        this.outputFileName = outputFileName;\n",
      "        this.outputFilePath = outputFilePath;\n",
      "        this.outputFile = outputFile;\n",
      "        this.outputStream = outputStream;\n",
      "        this.xssf = xssf;\n",
      "        this.sheetParameterList = sheetParameterList;\n",
      "        this.cellStyleConsumerList = cellStyleConsumerList;\n",
      "    }\n",
      "\n",
      "    public static WorkbookParameterBuilder builder() {\n",
      "        return new WorkbookParameterBuilder();\n",
      "    }\n",
      "\n",
      "    public SheetParameter getSheetParameter() {\n",
      "        return this.sheetParameterList.get(0);\n",
      "    }\n",
      "\n",
      "    public static class WorkbookParameterBuilder {\n",
      "        private String inputFileName;\n",
      "        private String inputFilePath;\n",
      "        private File inputFile;\n",
      "\n",
      "        private InputStream inputStream;\n",
      "\n",
      "        private String outputFileName;\n",
      "        private String outputFilePath;\n",
      "        private File outputFile;\n",
      "        private OutputStream outputStream;\n",
      "\n",
      "        private Boolean xssf;\n",
      "\n",
      "        private List<SheetParameter> sheetParameterList;\n",
      "\n",
      "        private List<CellStyleConsumer> cellStyleConsumerList;\n",
      "\n",
      "\n",
      "        public WorkbookParameterBuilder input(File inputFile) {\n",
      "            this.inputFileName = inputFile.getName();\n",
      "            this.inputFilePath = inputFile.getAbsolutePath();\n",
      "            this.inputFile = inputFile;\n",
      "            this.xssf(this.inputFileName);\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public WorkbookParameterBuilder input(InputStream inputStream) {\n",
      "            this.inputStream = inputStream;\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public WorkbookParameterBuilder output(String outputFileName) {\n",
      "            this.output(new File(outputFileName));\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public WorkbookParameterBuilder output(File outputFile) {\n",
      "            this.outputFileName = outputFile.getName();\n",
      "            this.outputFilePath = outputFile.getAbsolutePath();\n",
      "            this.outputFile = outputFile;\n",
      "            this.xssf(this.outputFileName);\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public WorkbookParameterBuilder output(OutputStream outputStream) {\n",
      "            this.outputStream = outputStream;\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public WorkbookParameterBuilder xssf(boolean newXssf) {\n",
      "            if (this.xssf == null) {\n",
      "                this.xssf = newXssf;\n",
      "            } else if (this.xssf != newXssf) {\n",
      "                throw new ExcelException(\"\u5df2\u7ecf\u6839\u636e\u8f93\u5165\u8f93\u51fa\u6587\u4ef6\u5339\u914d\uff0c\u8bf7\u52ff\u91cd\u590d\u8bbe\u7f6e\u9519\u8bef\u7684\u6587\u4ef6\u7c7b\u578b\");\n",
      "            }\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public WorkbookParameterBuilder sheetParameter(SheetParameter sheetParameter) {\n",
      "            if (sheetParameterList == null) {\n",
      "                this.sheetParameterList = new ArrayList<>(5);\n",
      "            }\n",
      "            this.sheetParameterList.add(sheetParameter);\n",
      "\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public WorkbookParameterBuilder cellStyleConsumer(CellStyleConsumer cellStyleConsumer) {\n",
      "            if (cellStyleConsumerList == null) {\n",
      "                cellStyleConsumerList = new ArrayList<>();\n",
      "            }\n",
      "            if (!cellStyleConsumerList.contains(cellStyleConsumer)) {\n",
      "                cellStyleConsumerList.add(cellStyleConsumer);\n",
      "            }\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        public WorkbookParameter build() {\n",
      "            return new WorkbookParameter(inputFileName, inputFilePath, inputFile\n",
      "                    , this.getInputStream()\n",
      "                    , outputFileName, outputFilePath, outputFile\n",
      "                    , this.getOutputStream()\n",
      "                    , this.isXssf()\n",
      "                    , this.getSheetParameterList()\n",
      "                    , this.getCellStyleConsumerList());\n",
      "        }\n",
      "\n",
      "        private void xssf(String fileName) {\n",
      "            boolean newXssf = fileName.endsWith(\".xlsx\");\n",
      "            if (this.xssf == null) {\n",
      "                this.xssf = newXssf;\n",
      "            } else if (this.xssf != newXssf) {\n",
      "                throw new ExcelException(\"\u8f93\u5165\u4e0e\u8f93\u51fa\u7684\u6587\u4ef6\u7c7b\u578b\u4e0d\u4e00\u81f4\");\n",
      "            }\n",
      "        }\n",
      "\n",
      "        private InputStream getInputStream() {\n",
      "            if (inputStream == null) {\n",
      "                this.inputStream = createInputStream();\n",
      "            }\n",
      "            return inputStream;\n",
      "        }\n",
      "\n",
      "        private InputStream createInputStream() {\n",
      "            if (inputFile == null) {\n",
      "                return null;\n",
      "            }\n",
      "            try {\n",
      "                return new FileInputStream(inputFile);\n",
      "            } catch (FileNotFoundException e) {\n",
      "                throw new ExcelException(\"\u521b\u5efa\u8f93\u5165\u6d41\u5931\u8d25\");\n",
      "            }\n",
      "        }\n",
      "\n",
      "        private OutputStream getOutputStream() {\n",
      "            if (outputStream == null) {\n",
      "                this.outputStream = createOutputStream();\n",
      "            }\n",
      "            return outputStream;\n",
      "        }\n",
      "\n",
      "\n",
      "        private OutputStream createOutputStream() {\n",
      "            if (outputFile == null) {\n",
      "                return null;\n",
      "            }\n",
      "            try {\n",
      "                File parentFile = outputFile.getParentFile();\n",
      "                if (!parentFile.exists()) {\n",
      "                    //noinspection ResultOfMethodCallIgnored\n",
      "                    parentFile.mkdirs();\n",
      "                }\n",
      "                return new FileOutputStream(outputFile);\n",
      "            } catch (FileNotFoundException e) {\n",
      "                throw new ExcelException(\"\u8f93\u51fa\u6587\u4ef6\u5939\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u8f93\u51fa\u6d41\u5931\u8d25\");\n",
      "            }\n",
      "        }\n",
      "\n",
      "        private boolean isXssf() {\n",
      "            return xssf == null || xssf;\n",
      "        }\n",
      "\n",
      "        public List<SheetParameter> getSheetParameterList() {\n",
      "            return sheetParameterList == null ? Collections.singletonList(SheetParameter.empty()) : sheetParameterList;\n",
      "        }\n",
      "\n",
      "        public List<CellStyleConsumer> getCellStyleConsumerList() {\n",
      "            return cellStyleConsumerList == null ? Collections.emptyList() : cellStyleConsumerList;\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package io.github.zouzhiy.excel.metadata.parameter;\n",
      "\n",
      "import io.github.zouzhiy.excel.exceptions.ExcelException;\n",
      "import org.junit.jupiter.api.Assertions;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import java.io.File;\n",
      "import java.io.FileInputStream;\n",
      "import java.io.FileOutputStream;\n",
      "import java.io.IOException;\n",
      "\n",
      "class WorkbookParameterTest {\n",
      "\n",
      "    @Test\n",
      "    void input1() {\n",
      "        WorkbookParameter workbookParameter = WorkbookParameter\n",
      "                .builder()\n",
      "                .build();\n",
      "\n",
      "        Assertions.assertNull(workbookParameter.getInputFileName());\n",
      "        Assertions.assertNull(workbookParameter.getInputFilePath());\n",
      "        Assertions.assertNull(workbookParameter.getInputFile());\n",
      "        Assertions.assertNull(workbookParameter.getInputStream());\n",
      "\n",
      "        Assertions.assertTrue(workbookParameter.isXssf());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void input2() {\n",
      "        String testPath = this.getClass().getResource(\"/\").getPath();\n",
      "        Assertions.assertThrows(ExcelException.class, () -> WorkbookParameter\n",
      "                .builder()\n",
      "                .input(new File(testPath))\n",
      "                .build());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void input3() throws IOException {\n",
      "        String testPath = this.getClass().getResource(\"/\").getPath();\n",
      "        String tmpFile = System.currentTimeMillis() + \".xlsx\";\n",
      "        File file = new File(testPath + File.separator + tmpFile);\n",
      "        if (!file.exists()) {\n",
      "            //noinspection ResultOfMethodCallIgnored\n",
      "            file.createNewFile();\n",
      "        }\n",
      "        WorkbookParameter workbookParameter = WorkbookParameter\n",
      "                .builder()\n",
      "                .input(file)\n",
      "                .build();\n",
      "\n",
      "        Assertions.assertEquals(workbookParameter.getInputFileName(), file.getName());\n",
      "        Assertions.assertEquals(workbookParameter.getInputFilePath(), file.getAbsolutePath());\n",
      "        Assertions.assertEquals(workbookParameter.getInputFile(), file);\n",
      "        Assertions.assertNotNull(workbookParameter.getInputStream());\n",
      "\n",
      "        Assertions.assertTrue(workbookParameter.isXssf());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void input4() throws IOException {\n",
      "        String testPath = this.getClass().getResource(\"/\").getPath();\n",
      "        String tmpFile = System.currentTimeMillis() + \".xls\";\n",
      "        File file = new File(testPath + File.separator + tmpFile);\n",
      "        if (!file.exists()) {\n",
      "            //noinspection ResultOfMethodCallIgnored\n",
      "            file.createNewFile();\n",
      "        }\n",
      "        WorkbookParameter workbookParameter = WorkbookParameter\n",
      "                .builder()\n",
      "                .input(new FileInputStream(file))\n",
      "                .build();\n",
      "\n",
      "        Assertions.assertNull(workbookParameter.getInputFileName());\n",
      "        Assertions.assertNull(workbookParameter.getInputFilePath());\n",
      "        Assertions.assertNull(workbookParameter.getInputFile());\n",
      "        Assertions.assertNotNull(workbookParameter.getInputStream());\n",
      "\n",
      "        Assertions.assertTrue(workbookParameter.isXssf());\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void output1() {\n",
      "        WorkbookParameter workbookParameter = WorkbookParameter\n",
      "                .builder()\n",
      "                .build();\n",
      "\n",
      "        Assertions.assertNull(workbookParameter.getOutputFileName());\n",
      "        Assertions.assertNull(workbookParameter.getOutputFilePath());\n",
      "        Assertions.assertNull(workbookParameter.getOutputFile());\n",
      "        Assertions.assertNull(workbookParameter.getOutputStream());\n",
      "\n",
      "        Assertions.assertTrue(workbookParameter.isXssf());\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void output2() {\n",
      "        String testPath = this.getClass().getResource(\"/\").getPath();\n",
      "        Assertions.assertThrows(ExcelException.class, () -> WorkbookParameter\n",
      "                .builder()\n",
      "                .output(new File(testPath))\n",
      "                .build());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void output3() throws IOException {\n",
      "        String testPath = this.getClass().getResource(\"/\").getPath();\n",
      "        String tmpFile = System.currentTimeMillis() + \".xls\";\n",
      "        File file = new File(testPath + File.separator + tmpFile);\n",
      "        if (!file.exists()) {\n",
      "            //noinspection ResultOfMethodCallIgnored\n",
      "            file.createNewFile();\n",
      "        }\n",
      "        WorkbookParameter workbookParameter = WorkbookParameter\n",
      "                .builder()\n",
      "                .output(file)\n",
      "                .build();\n",
      "\n",
      "        Assertions.assertEquals(workbookParameter.getOutputFileName(), file.getName());\n",
      "        Assertions.assertEquals(workbookParameter.getOutputFilePath(), file.getAbsolutePath());\n",
      "        Assertions.assertEquals(workbookParameter.getOutputFile(), file);\n",
      "        Assertions.assertNotNull(workbookParameter.getOutputStream());\n",
      "\n",
      "        Assertions.assertFalse(workbookParameter.isXssf());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void output4() throws IOException {\n",
      "        String testPath = this.getClass().getResource(\"/\").getPath();\n",
      "        String tmpFile = System.currentTimeMillis() + \".xls\";\n",
      "        File file = new File(testPath + File.separator + tmpFile);\n",
      "        if (!file.exists()) {\n",
      "            //noinspection ResultOfMethodCallIgnored\n",
      "            file.createNewFile();\n",
      "        }\n",
      "        WorkbookParameter workbookParameter = WorkbookParameter\n",
      "                .builder()\n",
      "                .output(new FileOutputStream(file))\n",
      "                .build();\n",
      "\n",
      "        Assertions.assertNull(workbookParameter.getOutputFileName());\n",
      "        Assertions.assertNull(workbookParameter.getOutputFilePath());\n",
      "        Assertions.assertNull(workbookParameter.getOutputFile());\n",
      "        Assertions.assertNotNull(workbookParameter.getOutputStream());\n",
      "\n",
      "        Assertions.assertTrue(workbookParameter.isXssf());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void xssf1() {\n",
      "        WorkbookParameter workbookParameter = WorkbookParameter.builder().build();\n",
      "        Assertions.assertTrue(workbookParameter.isXssf());\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void xssf2() throws IOException {\n",
      "        String testPath = this.getClass().getResource(\"/\").getPath();\n",
      "        String tmpFile = System.currentTimeMillis() + \".xls\";\n",
      "        File file = new File(testPath + File.separator + tmpFile);\n",
      "        if (!file.exists()) {\n",
      "            //noinspection ResultOfMethodCallIgnored\n",
      "            file.createNewFile();\n",
      "        }\n",
      "\n",
      "        WorkbookParameter workbookParameter = WorkbookParameter.builder().input(file).build();\n",
      "        Assertions.assertFalse(workbookParameter.isXssf());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void xssf3() throws IOException {\n",
      "        String testPath = this.getClass().getResource(\"/\").getPath();\n",
      "        String tmpFile = System.currentTimeMillis() + \".xlsx\";\n",
      "        File file = new File(testPath + File.separator + tmpFile);\n",
      "        if (!file.exists()) {\n",
      "            //noinspection ResultOfMethodCallIgnored\n",
      "            file.createNewFile();\n",
      "        }\n",
      "\n",
      "        WorkbookParameter workbookParameter = WorkbookParameter.builder().output(file).build();\n",
      "        Assertions.assertTrue(workbookParameter.isXssf());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void xssf4() throws IOException {\n",
      "        String testPath = this.getClass().getResource(\"/\").getPath();\n",
      "        String tmpFile = System.currentTimeMillis() + \".xlsx\";\n",
      "        File file = new File(testPath + File.separator + tmpFile);\n",
      "        if (!file.exists()) {\n",
      "            //noinspection ResultOfMethodCallIgnored\n",
      "            file.createNewFile();\n",
      "        }\n",
      "\n",
      "        Assertions.assertThrows(ExcelException.class, () -> WorkbookParameter\n",
      "                .builder()\n",
      "                .input(file)\n",
      "                .xssf(false)\n",
      "                .build());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void xssf5() throws IOException {\n",
      "        String testPath = this.getClass().getResource(\"/\").getPath();\n",
      "        String tmpFile = System.currentTimeMillis() + \".xls\";\n",
      "        File file = new File(testPath + File.separator + tmpFile);\n",
      "        if (!file.exists()) {\n",
      "            //noinspection ResultOfMethodCallIgnored\n",
      "            file.createNewFile();\n",
      "        }\n",
      "\n",
      "        Assertions.assertThrows(ExcelException.class, () -> WorkbookParameter\n",
      "                .builder()\n",
      "                .input(file)\n",
      "                .xssf(true)\n",
      "                .build());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void xssf6() throws IOException {\n",
      "        String testPath = this.getClass().getResource(\"/\").getPath();\n",
      "        String tmpFile = System.currentTimeMillis() + \".xls\";\n",
      "        File file = new File(testPath + File.separator + tmpFile);\n",
      "        if (!file.exists()) {\n",
      "            //noinspection ResultOfMethodCallIgnored\n",
      "            file.createNewFile();\n",
      "        }\n",
      "\n",
      "        Assertions.assertThrows(ExcelException.class, () -> WorkbookParameter\n",
      "                .builder()\n",
      "                .output(file)\n",
      "                .xssf(true)\n",
      "                .build());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void xssf7() throws IOException {\n",
      "        String testPath = this.getClass().getResource(\"/\").getPath();\n",
      "        String tmpFile = System.currentTimeMillis() + \".xlsx\";\n",
      "        File file = new File(testPath + File.separator + tmpFile);\n",
      "        if (!file.exists()) {\n",
      "            //noinspection ResultOfMethodCallIgnored\n",
      "            file.createNewFile();\n",
      "        }\n",
      "\n",
      "        Assertions.assertThrows(ExcelException.class, () -> WorkbookParameter\n",
      "                .builder()\n",
      "                .output(file)\n",
      "                .xssf(false)\n",
      "                .build());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void xssf8() throws IOException {\n",
      "        String testPath = this.getClass().getResource(\"/\").getPath();\n",
      "        String inputFileName = System.currentTimeMillis() + \".xlsx\";\n",
      "        File inputFile = new File(testPath + File.separator + inputFileName);\n",
      "        if (!inputFile.exists()) {\n",
      "            //noinspection ResultOfMethodCallIgnored\n",
      "            inputFile.createNewFile();\n",
      "        }\n",
      "\n",
      "        String outFileName = System.currentTimeMillis() + \".xls\";\n",
      "        File outputFile = new File(testPath + File.separator + outFileName);\n",
      "        if (!outputFile.exists()) {\n",
      "            //noinspection ResultOfMethodCallIgnored\n",
      "            outputFile.createNewFile();\n",
      "        }\n",
      "\n",
      "        Assertions.assertThrows(ExcelException.class, () -> WorkbookParameter\n",
      "                .builder()\n",
      "                .input(inputFile)\n",
      "                .output(outputFile)\n",
      "                .build());\n",
      "\n",
      "        Assertions.assertThrows(ExcelException.class, () -> WorkbookParameter\n",
      "                .builder()\n",
      "                .input(outputFile)\n",
      "                .output(inputFile)\n",
      "                .build());\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "WorkbookParameter::::builder()": [
        105,
        107
      ],
      "WorkbookParameter::::getSheetParameter()": [
        109,
        111
      ],
      "WorkbookParameter.WorkbookParameterBuilder::::input(java.io.File)": [
        132,
        138
      ],
      "WorkbookParameter.WorkbookParameterBuilder::::input(java.io.InputStream)": [
        140,
        143
      ],
      "WorkbookParameter.WorkbookParameterBuilder::::output(java.lang.String)": [
        145,
        148
      ],
      "WorkbookParameter.WorkbookParameterBuilder::::output(java.io.File)": [
        150,
        156
      ],
      "WorkbookParameter.WorkbookParameterBuilder::::output(java.io.OutputStream)": [
        158,
        161
      ],
      "WorkbookParameter.WorkbookParameterBuilder::::xssf(boolean)": [
        163,
        170
      ],
      "WorkbookParameter.WorkbookParameterBuilder::::sheetParameter(io.github.zouzhiy.excel.metadata.parameter.SheetParameter)": [
        172,
        179
      ],
      "WorkbookParameter.WorkbookParameterBuilder::::cellStyleConsumer(io.github.zouzhiy.excel.callback.CellStyleConsumer)": [
        181,
        189
      ],
      "WorkbookParameter.WorkbookParameterBuilder::::build()": [
        191,
        199
      ],
      "WorkbookParameter.WorkbookParameterBuilder::::xssf(java.lang.String)": [
        201,
        208
      ],
      "WorkbookParameter.WorkbookParameterBuilder::::getInputStream()": [
        210,
        215
      ],
      "WorkbookParameter.WorkbookParameterBuilder::::createInputStream()": [
        217,
        226
      ],
      "WorkbookParameter.WorkbookParameterBuilder::::getOutputStream()": [
        228,
        233
      ],
      "WorkbookParameter.WorkbookParameterBuilder::::createOutputStream()": [
        236,
        250
      ],
      "WorkbookParameter.WorkbookParameterBuilder::::isXssf()": [
        252,
        254
      ],
      "WorkbookParameter.WorkbookParameterBuilder::::getSheetParameterList()": [
        256,
        258
      ],
      "WorkbookParameter.WorkbookParameterBuilder::::getCellStyleConsumerList()": [
        260,
        262
      ]
    },
    "test_method_lines_dic": {
      "WorkbookParameterTest::::input1()": [
        14,
        26
      ],
      "WorkbookParameterTest::::input2()": [
        28,
        35
      ],
      "WorkbookParameterTest::::input3()": [
        37,
        57
      ],
      "WorkbookParameterTest::::input4()": [
        59,
        79
      ],
      "WorkbookParameterTest::::output1()": [
        82,
        95
      ],
      "WorkbookParameterTest::::output2()": [
        97,
        104
      ],
      "WorkbookParameterTest::::output3()": [
        106,
        126
      ],
      "WorkbookParameterTest::::output4()": [
        128,
        148
      ],
      "WorkbookParameterTest::::xssf1()": [
        150,
        154
      ],
      "WorkbookParameterTest::::xssf2()": [
        157,
        169
      ],
      "WorkbookParameterTest::::xssf3()": [
        171,
        183
      ],
      "WorkbookParameterTest::::xssf4()": [
        185,
        200
      ],
      "WorkbookParameterTest::::xssf5()": [
        202,
        217
      ],
      "WorkbookParameterTest::::xssf6()": [
        219,
        234
      ],
      "WorkbookParameterTest::::xssf7()": [
        236,
        251
      ],
      "WorkbookParameterTest::::xssf8()": [
        253,
        281
      ]
    },
    "reverse_method_lines_dic": {
      "105": "WorkbookParameter::::builder()",
      "106": "WorkbookParameter::::builder()",
      "107": "WorkbookParameter::::builder()",
      "109": "WorkbookParameter::::getSheetParameter()",
      "110": "WorkbookParameter::::getSheetParameter()",
      "111": "WorkbookParameter::::getSheetParameter()",
      "132": "WorkbookParameter.WorkbookParameterBuilder::::input(java.io.File)",
      "133": "WorkbookParameter.WorkbookParameterBuilder::::input(java.io.File)",
      "134": "WorkbookParameter.WorkbookParameterBuilder::::input(java.io.File)",
      "135": "WorkbookParameter.WorkbookParameterBuilder::::input(java.io.File)",
      "136": "WorkbookParameter.WorkbookParameterBuilder::::input(java.io.File)",
      "137": "WorkbookParameter.WorkbookParameterBuilder::::input(java.io.File)",
      "138": "WorkbookParameter.WorkbookParameterBuilder::::input(java.io.File)",
      "140": "WorkbookParameter.WorkbookParameterBuilder::::input(java.io.InputStream)",
      "141": "WorkbookParameter.WorkbookParameterBuilder::::input(java.io.InputStream)",
      "142": "WorkbookParameter.WorkbookParameterBuilder::::input(java.io.InputStream)",
      "143": "WorkbookParameter.WorkbookParameterBuilder::::input(java.io.InputStream)",
      "145": "WorkbookParameter.WorkbookParameterBuilder::::output(java.lang.String)",
      "146": "WorkbookParameter.WorkbookParameterBuilder::::output(java.lang.String)",
      "147": "WorkbookParameter.WorkbookParameterBuilder::::output(java.lang.String)",
      "148": "WorkbookParameter.WorkbookParameterBuilder::::output(java.lang.String)",
      "150": "WorkbookParameter.WorkbookParameterBuilder::::output(java.io.File)",
      "151": "WorkbookParameter.WorkbookParameterBuilder::::output(java.io.File)",
      "152": "WorkbookParameter.WorkbookParameterBuilder::::output(java.io.File)",
      "153": "WorkbookParameter.WorkbookParameterBuilder::::output(java.io.File)",
      "154": "WorkbookParameter.WorkbookParameterBuilder::::output(java.io.File)",
      "155": "WorkbookParameter.WorkbookParameterBuilder::::output(java.io.File)",
      "156": "WorkbookParameter.WorkbookParameterBuilder::::output(java.io.File)",
      "158": "WorkbookParameter.WorkbookParameterBuilder::::output(java.io.OutputStream)",
      "159": "WorkbookParameter.WorkbookParameterBuilder::::output(java.io.OutputStream)",
      "160": "WorkbookParameter.WorkbookParameterBuilder::::output(java.io.OutputStream)",
      "161": "WorkbookParameter.WorkbookParameterBuilder::::output(java.io.OutputStream)",
      "163": "WorkbookParameter.WorkbookParameterBuilder::::xssf(boolean)",
      "164": "WorkbookParameter.WorkbookParameterBuilder::::xssf(boolean)",
      "165": "WorkbookParameter.WorkbookParameterBuilder::::xssf(boolean)",
      "166": "WorkbookParameter.WorkbookParameterBuilder::::xssf(boolean)",
      "167": "WorkbookParameter.WorkbookParameterBuilder::::xssf(boolean)",
      "168": "WorkbookParameter.WorkbookParameterBuilder::::xssf(boolean)",
      "169": "WorkbookParameter.WorkbookParameterBuilder::::xssf(boolean)",
      "170": "WorkbookParameter.WorkbookParameterBuilder::::xssf(boolean)",
      "172": "WorkbookParameter.WorkbookParameterBuilder::::sheetParameter(io.github.zouzhiy.excel.metadata.parameter.SheetParameter)",
      "173": "WorkbookParameter.WorkbookParameterBuilder::::sheetParameter(io.github.zouzhiy.excel.metadata.parameter.SheetParameter)",
      "174": "WorkbookParameter.WorkbookParameterBuilder::::sheetParameter(io.github.zouzhiy.excel.metadata.parameter.SheetParameter)",
      "175": "WorkbookParameter.WorkbookParameterBuilder::::sheetParameter(io.github.zouzhiy.excel.metadata.parameter.SheetParameter)",
      "176": "WorkbookParameter.WorkbookParameterBuilder::::sheetParameter(io.github.zouzhiy.excel.metadata.parameter.SheetParameter)",
      "177": "WorkbookParameter.WorkbookParameterBuilder::::sheetParameter(io.github.zouzhiy.excel.metadata.parameter.SheetParameter)",
      "178": "WorkbookParameter.WorkbookParameterBuilder::::sheetParameter(io.github.zouzhiy.excel.metadata.parameter.SheetParameter)",
      "179": "WorkbookParameter.WorkbookParameterBuilder::::sheetParameter(io.github.zouzhiy.excel.metadata.parameter.SheetParameter)",
      "181": "WorkbookParameter.WorkbookParameterBuilder::::cellStyleConsumer(io.github.zouzhiy.excel.callback.CellStyleConsumer)",
      "182": "WorkbookParameter.WorkbookParameterBuilder::::cellStyleConsumer(io.github.zouzhiy.excel.callback.CellStyleConsumer)",
      "183": "WorkbookParameter.WorkbookParameterBuilder::::cellStyleConsumer(io.github.zouzhiy.excel.callback.CellStyleConsumer)",
      "184": "WorkbookParameter.WorkbookParameterBuilder::::cellStyleConsumer(io.github.zouzhiy.excel.callback.CellStyleConsumer)",
      "185": "WorkbookParameter.WorkbookParameterBuilder::::cellStyleConsumer(io.github.zouzhiy.excel.callback.CellStyleConsumer)",
      "186": "WorkbookParameter.WorkbookParameterBuilder::::cellStyleConsumer(io.github.zouzhiy.excel.callback.CellStyleConsumer)",
      "187": "WorkbookParameter.WorkbookParameterBuilder::::cellStyleConsumer(io.github.zouzhiy.excel.callback.CellStyleConsumer)",
      "188": "WorkbookParameter.WorkbookParameterBuilder::::cellStyleConsumer(io.github.zouzhiy.excel.callback.CellStyleConsumer)",
      "189": "WorkbookParameter.WorkbookParameterBuilder::::cellStyleConsumer(io.github.zouzhiy.excel.callback.CellStyleConsumer)",
      "191": "WorkbookParameter.WorkbookParameterBuilder::::build()",
      "192": "WorkbookParameter.WorkbookParameterBuilder::::build()",
      "193": "WorkbookParameter.WorkbookParameterBuilder::::build()",
      "194": "WorkbookParameter.WorkbookParameterBuilder::::build()",
      "195": "WorkbookParameter.WorkbookParameterBuilder::::build()",
      "196": "WorkbookParameter.WorkbookParameterBuilder::::build()",
      "197": "WorkbookParameter.WorkbookParameterBuilder::::build()",
      "198": "WorkbookParameter.WorkbookParameterBuilder::::build()",
      "199": "WorkbookParameter.WorkbookParameterBuilder::::build()",
      "201": "WorkbookParameter.WorkbookParameterBuilder::::xssf(java.lang.String)",
      "202": "WorkbookParameter.WorkbookParameterBuilder::::xssf(java.lang.String)",
      "203": "WorkbookParameter.WorkbookParameterBuilder::::xssf(java.lang.String)",
      "204": "WorkbookParameter.WorkbookParameterBuilder::::xssf(java.lang.String)",
      "205": "WorkbookParameter.WorkbookParameterBuilder::::xssf(java.lang.String)",
      "206": "WorkbookParameter.WorkbookParameterBuilder::::xssf(java.lang.String)",
      "207": "WorkbookParameter.WorkbookParameterBuilder::::xssf(java.lang.String)",
      "208": "WorkbookParameter.WorkbookParameterBuilder::::xssf(java.lang.String)",
      "210": "WorkbookParameter.WorkbookParameterBuilder::::getInputStream()",
      "211": "WorkbookParameter.WorkbookParameterBuilder::::getInputStream()",
      "212": "WorkbookParameter.WorkbookParameterBuilder::::getInputStream()",
      "213": "WorkbookParameter.WorkbookParameterBuilder::::getInputStream()",
      "214": "WorkbookParameter.WorkbookParameterBuilder::::getInputStream()",
      "215": "WorkbookParameter.WorkbookParameterBuilder::::getInputStream()",
      "217": "WorkbookParameter.WorkbookParameterBuilder::::createInputStream()",
      "218": "WorkbookParameter.WorkbookParameterBuilder::::createInputStream()",
      "219": "WorkbookParameter.WorkbookParameterBuilder::::createInputStream()",
      "220": "WorkbookParameter.WorkbookParameterBuilder::::createInputStream()",
      "221": "WorkbookParameter.WorkbookParameterBuilder::::createInputStream()",
      "222": "WorkbookParameter.WorkbookParameterBuilder::::createInputStream()",
      "223": "WorkbookParameter.WorkbookParameterBuilder::::createInputStream()",
      "224": "WorkbookParameter.WorkbookParameterBuilder::::createInputStream()",
      "225": "WorkbookParameter.WorkbookParameterBuilder::::createInputStream()",
      "226": "WorkbookParameter.WorkbookParameterBuilder::::createInputStream()",
      "228": "WorkbookParameter.WorkbookParameterBuilder::::getOutputStream()",
      "229": "WorkbookParameter.WorkbookParameterBuilder::::getOutputStream()",
      "230": "WorkbookParameter.WorkbookParameterBuilder::::getOutputStream()",
      "231": "WorkbookParameter.WorkbookParameterBuilder::::getOutputStream()",
      "232": "WorkbookParameter.WorkbookParameterBuilder::::getOutputStream()",
      "233": "WorkbookParameter.WorkbookParameterBuilder::::getOutputStream()",
      "236": "WorkbookParameter.WorkbookParameterBuilder::::createOutputStream()",
      "237": "WorkbookParameter.WorkbookParameterBuilder::::createOutputStream()",
      "238": "WorkbookParameter.WorkbookParameterBuilder::::createOutputStream()",
      "239": "WorkbookParameter.WorkbookParameterBuilder::::createOutputStream()",
      "240": "WorkbookParameter.WorkbookParameterBuilder::::createOutputStream()",
      "241": "WorkbookParameter.WorkbookParameterBuilder::::createOutputStream()",
      "242": "WorkbookParameter.WorkbookParameterBuilder::::createOutputStream()",
      "243": "WorkbookParameter.WorkbookParameterBuilder::::createOutputStream()",
      "244": "WorkbookParameter.WorkbookParameterBuilder::::createOutputStream()",
      "245": "WorkbookParameter.WorkbookParameterBuilder::::createOutputStream()",
      "246": "WorkbookParameter.WorkbookParameterBuilder::::createOutputStream()",
      "247": "WorkbookParameter.WorkbookParameterBuilder::::createOutputStream()",
      "248": "WorkbookParameter.WorkbookParameterBuilder::::createOutputStream()",
      "249": "WorkbookParameter.WorkbookParameterBuilder::::createOutputStream()",
      "250": "WorkbookParameter.WorkbookParameterBuilder::::createOutputStream()",
      "252": "WorkbookParameter.WorkbookParameterBuilder::::isXssf()",
      "253": "WorkbookParameter.WorkbookParameterBuilder::::isXssf()",
      "254": "WorkbookParameter.WorkbookParameterBuilder::::isXssf()",
      "256": "WorkbookParameter.WorkbookParameterBuilder::::getSheetParameterList()",
      "257": "WorkbookParameter.WorkbookParameterBuilder::::getSheetParameterList()",
      "258": "WorkbookParameter.WorkbookParameterBuilder::::getSheetParameterList()",
      "260": "WorkbookParameter.WorkbookParameterBuilder::::getCellStyleConsumerList()",
      "261": "WorkbookParameter.WorkbookParameterBuilder::::getCellStyleConsumerList()",
      "262": "WorkbookParameter.WorkbookParameterBuilder::::getCellStyleConsumerList()"
    },
    "test_reverse_method_lines_dic": {
      "14": "WorkbookParameterTest::::input1()",
      "15": "WorkbookParameterTest::::input1()",
      "16": "WorkbookParameterTest::::input1()",
      "17": "WorkbookParameterTest::::input1()",
      "18": "WorkbookParameterTest::::input1()",
      "19": "WorkbookParameterTest::::input1()",
      "20": "WorkbookParameterTest::::input1()",
      "21": "WorkbookParameterTest::::input1()",
      "22": "WorkbookParameterTest::::input1()",
      "23": "WorkbookParameterTest::::input1()",
      "24": "WorkbookParameterTest::::input1()",
      "25": "WorkbookParameterTest::::input1()",
      "26": "WorkbookParameterTest::::input1()",
      "28": "WorkbookParameterTest::::input2()",
      "29": "WorkbookParameterTest::::input2()",
      "30": "WorkbookParameterTest::::input2()",
      "31": "WorkbookParameterTest::::input2()",
      "32": "WorkbookParameterTest::::input2()",
      "33": "WorkbookParameterTest::::input2()",
      "34": "WorkbookParameterTest::::input2()",
      "35": "WorkbookParameterTest::::input2()",
      "37": "WorkbookParameterTest::::input3()",
      "38": "WorkbookParameterTest::::input3()",
      "39": "WorkbookParameterTest::::input3()",
      "40": "WorkbookParameterTest::::input3()",
      "41": "WorkbookParameterTest::::input3()",
      "42": "WorkbookParameterTest::::input3()",
      "43": "WorkbookParameterTest::::input3()",
      "44": "WorkbookParameterTest::::input3()",
      "45": "WorkbookParameterTest::::input3()",
      "46": "WorkbookParameterTest::::input3()",
      "47": "WorkbookParameterTest::::input3()",
      "48": "WorkbookParameterTest::::input3()",
      "49": "WorkbookParameterTest::::input3()",
      "50": "WorkbookParameterTest::::input3()",
      "51": "WorkbookParameterTest::::input3()",
      "52": "WorkbookParameterTest::::input3()",
      "53": "WorkbookParameterTest::::input3()",
      "54": "WorkbookParameterTest::::input3()",
      "55": "WorkbookParameterTest::::input3()",
      "56": "WorkbookParameterTest::::input3()",
      "57": "WorkbookParameterTest::::input3()",
      "59": "WorkbookParameterTest::::input4()",
      "60": "WorkbookParameterTest::::input4()",
      "61": "WorkbookParameterTest::::input4()",
      "62": "WorkbookParameterTest::::input4()",
      "63": "WorkbookParameterTest::::input4()",
      "64": "WorkbookParameterTest::::input4()",
      "65": "WorkbookParameterTest::::input4()",
      "66": "WorkbookParameterTest::::input4()",
      "67": "WorkbookParameterTest::::input4()",
      "68": "WorkbookParameterTest::::input4()",
      "69": "WorkbookParameterTest::::input4()",
      "70": "WorkbookParameterTest::::input4()",
      "71": "WorkbookParameterTest::::input4()",
      "72": "WorkbookParameterTest::::input4()",
      "73": "WorkbookParameterTest::::input4()",
      "74": "WorkbookParameterTest::::input4()",
      "75": "WorkbookParameterTest::::input4()",
      "76": "WorkbookParameterTest::::input4()",
      "77": "WorkbookParameterTest::::input4()",
      "78": "WorkbookParameterTest::::input4()",
      "79": "WorkbookParameterTest::::input4()",
      "82": "WorkbookParameterTest::::output1()",
      "83": "WorkbookParameterTest::::output1()",
      "84": "WorkbookParameterTest::::output1()",
      "85": "WorkbookParameterTest::::output1()",
      "86": "WorkbookParameterTest::::output1()",
      "87": "WorkbookParameterTest::::output1()",
      "88": "WorkbookParameterTest::::output1()",
      "89": "WorkbookParameterTest::::output1()",
      "90": "WorkbookParameterTest::::output1()",
      "91": "WorkbookParameterTest::::output1()",
      "92": "WorkbookParameterTest::::output1()",
      "93": "WorkbookParameterTest::::output1()",
      "94": "WorkbookParameterTest::::output1()",
      "95": "WorkbookParameterTest::::output1()",
      "97": "WorkbookParameterTest::::output2()",
      "98": "WorkbookParameterTest::::output2()",
      "99": "WorkbookParameterTest::::output2()",
      "100": "WorkbookParameterTest::::output2()",
      "101": "WorkbookParameterTest::::output2()",
      "102": "WorkbookParameterTest::::output2()",
      "103": "WorkbookParameterTest::::output2()",
      "104": "WorkbookParameterTest::::output2()",
      "106": "WorkbookParameterTest::::output3()",
      "107": "WorkbookParameterTest::::output3()",
      "108": "WorkbookParameterTest::::output3()",
      "109": "WorkbookParameterTest::::output3()",
      "110": "WorkbookParameterTest::::output3()",
      "111": "WorkbookParameterTest::::output3()",
      "112": "WorkbookParameterTest::::output3()",
      "113": "WorkbookParameterTest::::output3()",
      "114": "WorkbookParameterTest::::output3()",
      "115": "WorkbookParameterTest::::output3()",
      "116": "WorkbookParameterTest::::output3()",
      "117": "WorkbookParameterTest::::output3()",
      "118": "WorkbookParameterTest::::output3()",
      "119": "WorkbookParameterTest::::output3()",
      "120": "WorkbookParameterTest::::output3()",
      "121": "WorkbookParameterTest::::output3()",
      "122": "WorkbookParameterTest::::output3()",
      "123": "WorkbookParameterTest::::output3()",
      "124": "WorkbookParameterTest::::output3()",
      "125": "WorkbookParameterTest::::output3()",
      "126": "WorkbookParameterTest::::output3()",
      "128": "WorkbookParameterTest::::output4()",
      "129": "WorkbookParameterTest::::output4()",
      "130": "WorkbookParameterTest::::output4()",
      "131": "WorkbookParameterTest::::output4()",
      "132": "WorkbookParameterTest::::output4()",
      "133": "WorkbookParameterTest::::output4()",
      "134": "WorkbookParameterTest::::output4()",
      "135": "WorkbookParameterTest::::output4()",
      "136": "WorkbookParameterTest::::output4()",
      "137": "WorkbookParameterTest::::output4()",
      "138": "WorkbookParameterTest::::output4()",
      "139": "WorkbookParameterTest::::output4()",
      "140": "WorkbookParameterTest::::output4()",
      "141": "WorkbookParameterTest::::output4()",
      "142": "WorkbookParameterTest::::output4()",
      "143": "WorkbookParameterTest::::output4()",
      "144": "WorkbookParameterTest::::output4()",
      "145": "WorkbookParameterTest::::output4()",
      "146": "WorkbookParameterTest::::output4()",
      "147": "WorkbookParameterTest::::output4()",
      "148": "WorkbookParameterTest::::output4()",
      "150": "WorkbookParameterTest::::xssf1()",
      "151": "WorkbookParameterTest::::xssf1()",
      "152": "WorkbookParameterTest::::xssf1()",
      "153": "WorkbookParameterTest::::xssf1()",
      "154": "WorkbookParameterTest::::xssf1()",
      "157": "WorkbookParameterTest::::xssf2()",
      "158": "WorkbookParameterTest::::xssf2()",
      "159": "WorkbookParameterTest::::xssf2()",
      "160": "WorkbookParameterTest::::xssf2()",
      "161": "WorkbookParameterTest::::xssf2()",
      "162": "WorkbookParameterTest::::xssf2()",
      "163": "WorkbookParameterTest::::xssf2()",
      "164": "WorkbookParameterTest::::xssf2()",
      "165": "WorkbookParameterTest::::xssf2()",
      "166": "WorkbookParameterTest::::xssf2()",
      "167": "WorkbookParameterTest::::xssf2()",
      "168": "WorkbookParameterTest::::xssf2()",
      "169": "WorkbookParameterTest::::xssf2()",
      "171": "WorkbookParameterTest::::xssf3()",
      "172": "WorkbookParameterTest::::xssf3()",
      "173": "WorkbookParameterTest::::xssf3()",
      "174": "WorkbookParameterTest::::xssf3()",
      "175": "WorkbookParameterTest::::xssf3()",
      "176": "WorkbookParameterTest::::xssf3()",
      "177": "WorkbookParameterTest::::xssf3()",
      "178": "WorkbookParameterTest::::xssf3()",
      "179": "WorkbookParameterTest::::xssf3()",
      "180": "WorkbookParameterTest::::xssf3()",
      "181": "WorkbookParameterTest::::xssf3()",
      "182": "WorkbookParameterTest::::xssf3()",
      "183": "WorkbookParameterTest::::xssf3()",
      "185": "WorkbookParameterTest::::xssf4()",
      "186": "WorkbookParameterTest::::xssf4()",
      "187": "WorkbookParameterTest::::xssf4()",
      "188": "WorkbookParameterTest::::xssf4()",
      "189": "WorkbookParameterTest::::xssf4()",
      "190": "WorkbookParameterTest::::xssf4()",
      "191": "WorkbookParameterTest::::xssf4()",
      "192": "WorkbookParameterTest::::xssf4()",
      "193": "WorkbookParameterTest::::xssf4()",
      "194": "WorkbookParameterTest::::xssf4()",
      "195": "WorkbookParameterTest::::xssf4()",
      "196": "WorkbookParameterTest::::xssf4()",
      "197": "WorkbookParameterTest::::xssf4()",
      "198": "WorkbookParameterTest::::xssf4()",
      "199": "WorkbookParameterTest::::xssf4()",
      "200": "WorkbookParameterTest::::xssf4()",
      "202": "WorkbookParameterTest::::xssf5()",
      "203": "WorkbookParameterTest::::xssf5()",
      "204": "WorkbookParameterTest::::xssf5()",
      "205": "WorkbookParameterTest::::xssf5()",
      "206": "WorkbookParameterTest::::xssf5()",
      "207": "WorkbookParameterTest::::xssf5()",
      "208": "WorkbookParameterTest::::xssf5()",
      "209": "WorkbookParameterTest::::xssf5()",
      "210": "WorkbookParameterTest::::xssf5()",
      "211": "WorkbookParameterTest::::xssf5()",
      "212": "WorkbookParameterTest::::xssf5()",
      "213": "WorkbookParameterTest::::xssf5()",
      "214": "WorkbookParameterTest::::xssf5()",
      "215": "WorkbookParameterTest::::xssf5()",
      "216": "WorkbookParameterTest::::xssf5()",
      "217": "WorkbookParameterTest::::xssf5()",
      "219": "WorkbookParameterTest::::xssf6()",
      "220": "WorkbookParameterTest::::xssf6()",
      "221": "WorkbookParameterTest::::xssf6()",
      "222": "WorkbookParameterTest::::xssf6()",
      "223": "WorkbookParameterTest::::xssf6()",
      "224": "WorkbookParameterTest::::xssf6()",
      "225": "WorkbookParameterTest::::xssf6()",
      "226": "WorkbookParameterTest::::xssf6()",
      "227": "WorkbookParameterTest::::xssf6()",
      "228": "WorkbookParameterTest::::xssf6()",
      "229": "WorkbookParameterTest::::xssf6()",
      "230": "WorkbookParameterTest::::xssf6()",
      "231": "WorkbookParameterTest::::xssf6()",
      "232": "WorkbookParameterTest::::xssf6()",
      "233": "WorkbookParameterTest::::xssf6()",
      "234": "WorkbookParameterTest::::xssf6()",
      "236": "WorkbookParameterTest::::xssf7()",
      "237": "WorkbookParameterTest::::xssf7()",
      "238": "WorkbookParameterTest::::xssf7()",
      "239": "WorkbookParameterTest::::xssf7()",
      "240": "WorkbookParameterTest::::xssf7()",
      "241": "WorkbookParameterTest::::xssf7()",
      "242": "WorkbookParameterTest::::xssf7()",
      "243": "WorkbookParameterTest::::xssf7()",
      "244": "WorkbookParameterTest::::xssf7()",
      "245": "WorkbookParameterTest::::xssf7()",
      "246": "WorkbookParameterTest::::xssf7()",
      "247": "WorkbookParameterTest::::xssf7()",
      "248": "WorkbookParameterTest::::xssf7()",
      "249": "WorkbookParameterTest::::xssf7()",
      "250": "WorkbookParameterTest::::xssf7()",
      "251": "WorkbookParameterTest::::xssf7()",
      "253": "WorkbookParameterTest::::xssf8()",
      "254": "WorkbookParameterTest::::xssf8()",
      "255": "WorkbookParameterTest::::xssf8()",
      "256": "WorkbookParameterTest::::xssf8()",
      "257": "WorkbookParameterTest::::xssf8()",
      "258": "WorkbookParameterTest::::xssf8()",
      "259": "WorkbookParameterTest::::xssf8()",
      "260": "WorkbookParameterTest::::xssf8()",
      "261": "WorkbookParameterTest::::xssf8()",
      "262": "WorkbookParameterTest::::xssf8()",
      "263": "WorkbookParameterTest::::xssf8()",
      "264": "WorkbookParameterTest::::xssf8()",
      "265": "WorkbookParameterTest::::xssf8()",
      "266": "WorkbookParameterTest::::xssf8()",
      "267": "WorkbookParameterTest::::xssf8()",
      "268": "WorkbookParameterTest::::xssf8()",
      "269": "WorkbookParameterTest::::xssf8()",
      "270": "WorkbookParameterTest::::xssf8()",
      "271": "WorkbookParameterTest::::xssf8()",
      "272": "WorkbookParameterTest::::xssf8()",
      "273": "WorkbookParameterTest::::xssf8()",
      "274": "WorkbookParameterTest::::xssf8()",
      "275": "WorkbookParameterTest::::xssf8()",
      "276": "WorkbookParameterTest::::xssf8()",
      "277": "WorkbookParameterTest::::xssf8()",
      "278": "WorkbookParameterTest::::xssf8()",
      "279": "WorkbookParameterTest::::xssf8()",
      "280": "WorkbookParameterTest::::xssf8()",
      "281": "WorkbookParameterTest::::xssf8()"
    },
    "tests": [
      {
        "test_lines": [
          14,
          26
        ],
        "covered_lines": [
          35,
          39,
          43,
          48,
          72,
          91,
          92,
          93,
          94,
          95,
          96,
          97,
          98,
          99,
          100,
          101,
          102,
          103,
          106,
          113,
          192,
          193,
          195,
          196,
          197,
          198,
          211,
          212,
          214,
          218,
          219,
          229,
          230,
          232,
          237,
          238,
          253,
          257,
          261
        ]
      },
      {
        "test_lines": [
          28,
          35
        ],
        "covered_lines": [
          106,
          113,
          133,
          134,
          135,
          136,
          137,
          192,
          202,
          203,
          204,
          208,
          211,
          218,
          223,
          224
        ]
      },
      {
        "test_lines": [
          37,
          57
        ],
        "covered_lines": [
          35,
          39,
          43,
          48,
          72,
          91,
          92,
          93,
          94,
          95,
          96,
          97,
          98,
          99,
          100,
          101,
          102,
          103,
          106,
          113,
          133,
          134,
          135,
          136,
          137,
          192,
          193,
          195,
          196,
          197,
          198,
          202,
          203,
          204,
          208,
          211,
          212,
          214,
          218,
          222,
          229,
          230,
          232,
          237,
          238,
          253,
          257,
          261
        ]
      },
      {
        "test_lines": [
          59,
          79
        ],
        "covered_lines": [
          35,
          39,
          43,
          48,
          72,
          91,
          92,
          93,
          94,
          95,
          96,
          97,
          98,
          99,
          100,
          101,
          102,
          103,
          106,
          113,
          141,
          142,
          192,
          193,
          195,
          196,
          197,
          198,
          211,
          214,
          229,
          230,
          232,
          237,
          238,
          253,
          257,
          261
        ]
      },
      {
        "test_lines": [
          82,
          95
        ],
        "covered_lines": [
          53,
          57,
          61,
          65,
          72,
          91,
          92,
          93,
          94,
          95,
          96,
          97,
          98,
          99,
          100,
          101,
          102,
          103,
          106,
          113,
          192,
          193,
          195,
          196,
          197,
          198,
          211,
          212,
          214,
          218,
          219,
          229,
          230,
          232,
          237,
          238,
          253,
          257,
          261
        ]
      },
      {
        "test_lines": [
          97,
          104
        ],
        "covered_lines": [
          106,
          113,
          151,
          152,
          153,
          154,
          155,
          192,
          193,
          202,
          203,
          204,
          208,
          211,
          212,
          214,
          218,
          219,
          229,
          237,
          241,
          242,
          247,
          248
        ]
      },
      {
        "test_lines": [
          106,
          126
        ],
        "covered_lines": [
          53,
          57,
          61,
          65,
          72,
          91,
          92,
          93,
          94,
          95,
          96,
          97,
          98,
          99,
          100,
          101,
          102,
          103,
          106,
          113,
          151,
          152,
          153,
          154,
          155,
          192,
          193,
          195,
          196,
          197,
          198,
          202,
          203,
          204,
          208,
          211,
          212,
          214,
          218,
          219,
          229,
          230,
          232,
          237,
          241,
          242,
          246,
          253,
          257,
          261
        ]
      },
      {
        "test_lines": [
          128,
          148
        ],
        "covered_lines": [
          53,
          57,
          61,
          65,
          72,
          91,
          92,
          93,
          94,
          95,
          96,
          97,
          98,
          99,
          100,
          101,
          102,
          103,
          106,
          113,
          159,
          160,
          192,
          193,
          195,
          196,
          197,
          198,
          211,
          212,
          214,
          218,
          219,
          229,
          232,
          253,
          257,
          261
        ]
      },
      {
        "test_lines": [
          150,
          154
        ],
        "covered_lines": [
          72,
          91,
          92,
          93,
          94,
          95,
          96,
          97,
          98,
          99,
          100,
          101,
          102,
          103,
          106,
          113,
          192,
          193,
          195,
          196,
          197,
          198,
          211,
          212,
          214,
          218,
          219,
          229,
          230,
          232,
          237,
          238,
          253,
          257,
          261
        ]
      },
      {
        "test_lines": [
          157,
          169
        ],
        "covered_lines": [
          72,
          91,
          92,
          93,
          94,
          95,
          96,
          97,
          98,
          99,
          100,
          101,
          102,
          103,
          106,
          113,
          133,
          134,
          135,
          136,
          137,
          192,
          193,
          195,
          196,
          197,
          198,
          202,
          203,
          204,
          208,
          211,
          212,
          214,
          218,
          222,
          229,
          230,
          232,
          237,
          238,
          253,
          257,
          261
        ]
      },
      {
        "test_lines": [
          171,
          183
        ],
        "covered_lines": [
          72,
          91,
          92,
          93,
          94,
          95,
          96,
          97,
          98,
          99,
          100,
          101,
          102,
          103,
          106,
          113,
          151,
          152,
          153,
          154,
          155,
          192,
          193,
          195,
          196,
          197,
          198,
          202,
          203,
          204,
          208,
          211,
          212,
          214,
          218,
          219,
          229,
          230,
          232,
          237,
          241,
          242,
          246,
          253,
          257,
          261
        ]
      },
      {
        "test_lines": [
          185,
          200
        ],
        "covered_lines": [
          106,
          113,
          133,
          134,
          135,
          136,
          137,
          164,
          166,
          167,
          202,
          203,
          204,
          208
        ]
      },
      {
        "test_lines": [
          202,
          217
        ],
        "covered_lines": [
          106,
          113,
          133,
          134,
          135,
          136,
          137,
          164,
          166,
          167,
          202,
          203,
          204,
          208
        ]
      },
      {
        "test_lines": [
          219,
          234
        ],
        "covered_lines": [
          106,
          113,
          151,
          152,
          153,
          154,
          155,
          164,
          166,
          167,
          202,
          203,
          204,
          208
        ]
      },
      {
        "test_lines": [
          236,
          251
        ],
        "covered_lines": [
          106,
          113,
          151,
          152,
          153,
          154,
          155,
          164,
          166,
          167,
          202,
          203,
          204,
          208
        ]
      },
      {
        "test_lines": [
          253,
          281
        ],
        "covered_lines": [
          106,
          113,
          133,
          134,
          135,
          136,
          137,
          151,
          152,
          153,
          202,
          203,
          204,
          205,
          206,
          208
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/zouzhiy-excel/src/main/java/io/github/zouzhiy/excel/parsing/ExcelAnnotationParse.java": {
    "class_content": [
      "/*\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package io.github.zouzhiy.excel.parsing;\n",
      "\n",
      "import io.github.zouzhiy.excel.annotation.ExcelClass;\n",
      "import io.github.zouzhiy.excel.annotation.ExcelField;\n",
      "import io.github.zouzhiy.excel.metadata.Configuration;\n",
      "import io.github.zouzhiy.excel.metadata.config.ExcelClassConfig;\n",
      "import io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig;\n",
      "import lombok.Getter;\n",
      "import lombok.Setter;\n",
      "\n",
      "import java.lang.reflect.Field;\n",
      "import java.lang.reflect.Modifier;\n",
      "import java.util.*;\n",
      "import java.util.concurrent.ConcurrentHashMap;\n",
      "import java.util.stream.Collectors;\n",
      "\n",
      "/**\n",
      " * \u6ce8\u89e3\u914d\u7f6e\u89e3\u6790\n",
      " *\n",
      " * @author zouzhiy\n",
      " * @since 2022/7/2\n",
      " */\n",
      "public class ExcelAnnotationParse {\n",
      "\n",
      "    /**\n",
      "     * \u5168\u5c40\u914d\u7f6e\n",
      "     */\n",
      "    @Getter\n",
      "    private final Configuration configuration;\n",
      "    /**\n",
      "     * \u7f13\u5b58map\n",
      "     */\n",
      "    private final Map<Class<?>, ExcelClassConfig> excelClassConfigMap = new ConcurrentHashMap<>(32);\n",
      "\n",
      "    /**\n",
      "     * \u662f\u5426\u542f\u7528\u7f13\u5b58\n",
      "     */\n",
      "    @Setter\n",
      "    @Getter\n",
      "    private boolean configCacheEnabled = true;\n",
      "\n",
      "    public ExcelAnnotationParse(Configuration configuration) {\n",
      "        this.configuration = configuration;\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u89e3\u6790\u76ee\u6807\u5bf9\u8c61\u7684\u914d\u7f6e\u4fe1\u606f\n",
      "     *\n",
      "     * @param clazz \u76ee\u6807\u5bf9\u8c61\n",
      "     * @return \u914d\u7f6e\u4fe1\u606f\n",
      "     */\n",
      "    public ExcelClassConfig findForClass(Class<?> clazz) {\n",
      "        if (configCacheEnabled) {\n",
      "            // synchronized (type) removed see issue #461\n",
      "            return excelClassConfigMap.computeIfAbsent(clazz, this::parseForClass);\n",
      "        } else {\n",
      "            return this.parseForClass(clazz);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private ExcelClassConfig parseForClass(Class<?> clazz) {\n",
      "\n",
      "        List<Field> fieldList = this.listAllDeclaredField(clazz);\n",
      "        List<ExcelFieldConfig> excelFieldConfigList = fieldList\n",
      "                .stream()\n",
      "                .map(this::convert)\n",
      "                .filter(Objects::nonNull)\n",
      "                .sorted(Comparator.comparing(ExcelFieldConfig::getSort))\n",
      "                .collect(Collectors.toList());\n",
      "\n",
      "        ExcelClass excelClass = clazz.getAnnotation(ExcelClass.class);\n",
      "        if (excelClass == null) {\n",
      "            return ExcelClassConfig.getDefaultExcelClassConfig(excelFieldConfigList);\n",
      "        } else {\n",
      "            return ExcelClassConfig.buildByExcelClass(excelClass, excelFieldConfigList);\n",
      "        }\n",
      "    }\n",
      "\n",
      "\n",
      "    private List<Field> listAllDeclaredField(Class<?> clazz) {\n",
      "        List<Field> fieldList = new ArrayList<>();\n",
      "\n",
      "        Set<String> fieldNameSet = new TreeSet<>();\n",
      "\n",
      "        Class<?> superClazz = clazz;\n",
      "        while (superClazz != null) {\n",
      "            Field[] fields = listDeclaredField(superClazz);\n",
      "\n",
      "            for (int i = fields.length - 1; i >= 0; i--) {\n",
      "                Field field = fields[i];\n",
      "                if (Modifier.isStatic(field.getModifiers())) {\n",
      "                    continue;\n",
      "                }\n",
      "                String fieldName = field.getName();\n",
      "                if (fieldNameSet.contains(fieldName)) {\n",
      "                    continue;\n",
      "                }\n",
      "                fieldNameSet.add(fieldName);\n",
      "                fieldList.add(0, field);\n",
      "            }\n",
      "\n",
      "            superClazz = superClazz.getSuperclass();\n",
      "        }\n",
      "        return fieldList;\n",
      "    }\n",
      "\n",
      "    private Field[] listDeclaredField(Class<?> clazz) {\n",
      "        if (clazz.equals(Object.class)) {\n",
      "            return new Field[0];\n",
      "        }\n",
      "        return clazz.getDeclaredFields();\n",
      "    }\n",
      "\n",
      "\n",
      "    private ExcelFieldConfig convert(Field field) {\n",
      "        String propertyName = field.getName();\n",
      "        Class<?> javaType = field.getType();\n",
      "        ExcelField excelField = field.getAnnotation(ExcelField.class);\n",
      "        if (excelField != null && excelField.ignore()) {\n",
      "            return null;\n",
      "        }\n",
      "        if (excelField == null) {\n",
      "            return ExcelFieldConfig.getDefaultExcelFieldConfig(propertyName, javaType);\n",
      "        } else {\n",
      "            return ExcelFieldConfig.buildByExcelField(excelField, propertyName, javaType);\n",
      "        }\n",
      "    }\n",
      "\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package io.github.zouzhiy.excel.parsing;\n",
      "\n",
      "import io.github.zouzhiy.excel.annotation.ExcelClass;\n",
      "import io.github.zouzhiy.excel.annotation.ExcelField;\n",
      "import io.github.zouzhiy.excel.annotation.ExcelFont;\n",
      "import io.github.zouzhiy.excel.annotation.ExcelStyle;\n",
      "import io.github.zouzhiy.excel.cellstyle.RowStyleRead;\n",
      "import io.github.zouzhiy.excel.cellstyle.defaults.DefaultRowStyleRead;\n",
      "import io.github.zouzhiy.excel.enums.ExcelType;\n",
      "import io.github.zouzhiy.excel.enums.FontTypeOffset;\n",
      "import io.github.zouzhiy.excel.enums.StyleHorizontalAlignment;\n",
      "import io.github.zouzhiy.excel.enums.StyleVerticalAlignment;\n",
      "import io.github.zouzhiy.excel.handler.date.DateStringHandler;\n",
      "import io.github.zouzhiy.excel.metadata.Configuration;\n",
      "import io.github.zouzhiy.excel.metadata.config.ExcelClassConfig;\n",
      "import io.github.zouzhiy.excel.metadata.config.ExcelFieldConfig;\n",
      "import io.github.zouzhiy.excel.metadata.config.ExcelFontConfig;\n",
      "import io.github.zouzhiy.excel.metadata.config.ExcelStyleConfig;\n",
      "import io.github.zouzhiy.excel.read.RowFootRead;\n",
      "import io.github.zouzhiy.excel.read.RowHeadRead;\n",
      "import io.github.zouzhiy.excel.read.RowTitleRead;\n",
      "import io.github.zouzhiy.excel.read.defaults.DefaultRowFootRead;\n",
      "import io.github.zouzhiy.excel.read.defaults.DefaultRowHeadRead;\n",
      "import io.github.zouzhiy.excel.read.defaults.DefaultRowTitleRead;\n",
      "import io.github.zouzhiy.excel.write.RowFootWrite;\n",
      "import io.github.zouzhiy.excel.write.RowHeadWrite;\n",
      "import io.github.zouzhiy.excel.write.RowTitleWrite;\n",
      "import io.github.zouzhiy.excel.write.defaults.DefaultRowFootWrite;\n",
      "import io.github.zouzhiy.excel.write.defaults.DefaultRowHeadWrite;\n",
      "import io.github.zouzhiy.excel.write.defaults.DefaultRowTitleWrite;\n",
      "import org.apache.poi.common.usermodel.fonts.FontCharset;\n",
      "import org.apache.poi.ss.usermodel.BorderStyle;\n",
      "import org.apache.poi.ss.usermodel.FillPatternType;\n",
      "import org.apache.poi.ss.usermodel.Font;\n",
      "import org.apache.poi.ss.usermodel.FontUnderline;\n",
      "import org.junit.jupiter.api.Assertions;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import java.math.BigDecimal;\n",
      "import java.util.List;\n",
      "\n",
      "class ExcelAnnotationParseTest {\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void isConfigCacheEnabled() {\n",
      "        ExcelAnnotationParse excelAnnotationParse = new ExcelAnnotationParse(new Configuration());\n",
      "        Assertions.assertTrue(excelAnnotationParse.isConfigCacheEnabled());\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void setConfigCacheEnabled() {\n",
      "        ExcelAnnotationParse excelAnnotationParse = new ExcelAnnotationParse(new Configuration());\n",
      "        excelAnnotationParse.setConfigCacheEnabled(false);\n",
      "        Assertions.assertFalse(excelAnnotationParse.isConfigCacheEnabled());\n",
      "\n",
      "        excelAnnotationParse.setConfigCacheEnabled(true);\n",
      "        Assertions.assertTrue(excelAnnotationParse.isConfigCacheEnabled());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void findForClass1() {\n",
      "        ExcelAnnotationParse excelAnnotationParse = new ExcelAnnotationParse(new Configuration());\n",
      "        excelAnnotationParse.setConfigCacheEnabled(false);\n",
      "\n",
      "        ExcelClassConfig excelClassConfig = excelAnnotationParse.findForClass(Demo1.class);\n",
      "\n",
      "        Assertions.assertEquals(excelClassConfig.getRowTitleWrite(), DefaultRowTitleWrite.class);\n",
      "        Assertions.assertEquals(excelClassConfig.getRowHeadWrite(), DefaultRowHeadWrite.class);\n",
      "        Assertions.assertEquals(excelClassConfig.getRowFootWrite(), DefaultRowFootWrite.class);\n",
      "        Assertions.assertEquals(excelClassConfig.getRowTitleRead(), DefaultRowTitleRead.class);\n",
      "        Assertions.assertEquals(excelClassConfig.getRowHeadRead(), DefaultRowHeadRead.class);\n",
      "        Assertions.assertEquals(excelClassConfig.getRowFootRead(), DefaultRowFootRead.class);\n",
      "        Assertions.assertEquals(excelClassConfig.getTitleFormat(), \"@\");\n",
      "        Assertions.assertEquals(excelClassConfig.getTitleStyle(), ExcelStyleConfig.getDefaultExcelStyleConfigTitle());\n",
      "        Assertions.assertEquals(excelClassConfig.getRowStyleRead(), DefaultRowStyleRead.class);\n",
      "        Assertions.assertEquals(excelClassConfig.getItemList().size(), 3);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void findForClass2() {\n",
      "        ExcelAnnotationParse excelAnnotationParse = new ExcelAnnotationParse(new Configuration());\n",
      "        excelAnnotationParse.setConfigCacheEnabled(false);\n",
      "\n",
      "        ExcelClassConfig excelClassConfig = excelAnnotationParse.findForClass(Demo2.class);\n",
      "\n",
      "        Assertions.assertEquals(excelClassConfig.getRowTitleWrite(), RowTitleWrite.class);\n",
      "        Assertions.assertEquals(excelClassConfig.getRowHeadWrite(), RowHeadWrite.class);\n",
      "        Assertions.assertEquals(excelClassConfig.getRowFootWrite(), RowFootWrite.class);\n",
      "        Assertions.assertEquals(excelClassConfig.getRowTitleRead(), RowTitleRead.class);\n",
      "        Assertions.assertEquals(excelClassConfig.getRowHeadRead(), RowHeadRead.class);\n",
      "        Assertions.assertEquals(excelClassConfig.getRowFootRead(), RowFootRead.class);\n",
      "        Assertions.assertEquals(excelClassConfig.getTitleFormat(), \"@@\");\n",
      "        Assertions.assertEquals(excelClassConfig.getTitleStyle().getRotation(), 22);\n",
      "        Assertions.assertEquals(excelClassConfig.getRowStyleRead(), RowStyleRead.class);\n",
      "        Assertions.assertEquals(excelClassConfig.getItemList().size(), 4);\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void findForClassTestStyle1() {\n",
      "        ExcelAnnotationParse excelAnnotationParse = new ExcelAnnotationParse(new Configuration());\n",
      "        excelAnnotationParse.setConfigCacheEnabled(false);\n",
      "\n",
      "        ExcelClassConfig excelClassConfig = excelAnnotationParse.findForClass(Demo3.class);\n",
      "\n",
      "        ExcelStyleConfig excelStyleConfig = excelClassConfig.getTitleStyle();\n",
      "\n",
      "        Assertions.assertTrue(excelStyleConfig.isHidden());\n",
      "        Assertions.assertTrue(excelStyleConfig.isLocked());\n",
      "        Assertions.assertTrue(excelStyleConfig.isQuotePrefix());\n",
      "        Assertions.assertEquals(excelStyleConfig.getHorizontalAlignment(), StyleHorizontalAlignment.CENTER_SELECTION);\n",
      "        Assertions.assertFalse(excelStyleConfig.isWrapText());\n",
      "        Assertions.assertEquals(excelStyleConfig.getVerticalAlignment(), StyleVerticalAlignment.BOTTOM);\n",
      "        Assertions.assertEquals(excelStyleConfig.getRotation(), 33);\n",
      "        Assertions.assertEquals(excelStyleConfig.getIndent(), 10);\n",
      "\n",
      "        Assertions.assertEquals(excelStyleConfig.getBorderLeft(), BorderStyle.HAIR);\n",
      "        Assertions.assertEquals(excelStyleConfig.getBorderRight(), BorderStyle.DASH_DOT);\n",
      "        Assertions.assertEquals(excelStyleConfig.getBorderTop(), BorderStyle.DASHED);\n",
      "        Assertions.assertEquals(excelStyleConfig.getBorderBottom(), BorderStyle.MEDIUM_DASH_DOT);\n",
      "\n",
      "        Assertions.assertEquals(excelStyleConfig.getLeftBorderColor(), 11);\n",
      "        Assertions.assertEquals(excelStyleConfig.getRightBorderColor(), 111);\n",
      "        Assertions.assertEquals(excelStyleConfig.getTopBorderColor(), 1111);\n",
      "        Assertions.assertEquals(excelStyleConfig.getBottomBorderColor(), 11111);\n",
      "\n",
      "        Assertions.assertEquals(excelStyleConfig.getFillPattern(), FillPatternType.ALT_BARS);\n",
      "\n",
      "        Assertions.assertEquals(excelStyleConfig.getFillBackgroundColor(), 55);\n",
      "        Assertions.assertEquals(excelStyleConfig.getFillForegroundColor(), 66);\n",
      "\n",
      "        Assertions.assertTrue(excelStyleConfig.isShrinkToFit());\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void findForClassTestStyle2() {\n",
      "        ExcelAnnotationParse excelAnnotationParse = new ExcelAnnotationParse(new Configuration());\n",
      "        excelAnnotationParse.setConfigCacheEnabled(false);\n",
      "\n",
      "        ExcelClassConfig excelClassConfig = excelAnnotationParse.findForClass(Demo4.class);\n",
      "\n",
      "        ExcelStyleConfig excelStyleConfig = excelClassConfig.getTitleStyle();\n",
      "\n",
      "        Assertions.assertFalse(excelStyleConfig.isHidden());\n",
      "        Assertions.assertFalse(excelStyleConfig.isLocked());\n",
      "        Assertions.assertFalse(excelStyleConfig.isQuotePrefix());\n",
      "        Assertions.assertEquals(excelStyleConfig.getHorizontalAlignment(), StyleHorizontalAlignment.CENTER);\n",
      "        Assertions.assertTrue(excelStyleConfig.isWrapText());\n",
      "        Assertions.assertEquals(excelStyleConfig.getVerticalAlignment(), StyleVerticalAlignment.CENTER);\n",
      "        Assertions.assertEquals(excelStyleConfig.getRotation(), 0);\n",
      "        Assertions.assertEquals(excelStyleConfig.getIndent(), -1);\n",
      "\n",
      "\n",
      "        Assertions.assertEquals(excelStyleConfig.getBorderLeft(), BorderStyle.NONE);\n",
      "        Assertions.assertEquals(excelStyleConfig.getBorderRight(), BorderStyle.NONE);\n",
      "        Assertions.assertEquals(excelStyleConfig.getBorderTop(), BorderStyle.NONE);\n",
      "        Assertions.assertEquals(excelStyleConfig.getBorderBottom(), BorderStyle.NONE);\n",
      "\n",
      "        Assertions.assertEquals(excelStyleConfig.getLeftBorderColor(), -1);\n",
      "        Assertions.assertEquals(excelStyleConfig.getRightBorderColor(), -1);\n",
      "        Assertions.assertEquals(excelStyleConfig.getTopBorderColor(), -1);\n",
      "        Assertions.assertEquals(excelStyleConfig.getBottomBorderColor(), -1);\n",
      "\n",
      "        Assertions.assertEquals(excelStyleConfig.getFillPattern(), FillPatternType.NO_FILL);\n",
      "\n",
      "        Assertions.assertEquals(excelStyleConfig.getFillBackgroundColor(), -1);\n",
      "        Assertions.assertEquals(excelStyleConfig.getFillForegroundColor(), -1);\n",
      "\n",
      "        Assertions.assertFalse(excelStyleConfig.isShrinkToFit());\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void findForClassTestFont() {\n",
      "        ExcelAnnotationParse excelAnnotationParse = new ExcelAnnotationParse(new Configuration());\n",
      "        excelAnnotationParse.setConfigCacheEnabled(false);\n",
      "\n",
      "        ExcelClassConfig excelClassConfig = excelAnnotationParse.findForClass(Demo5.class);\n",
      "\n",
      "        ExcelStyleConfig excelStyleConfig = excelClassConfig.getTitleStyle();\n",
      "        ExcelFontConfig excelFontConfig = excelStyleConfig.getFont();\n",
      "\n",
      "        Assertions.assertEquals(excelFontConfig.getFontName(), \"test\");\n",
      "        Assertions.assertEquals(excelFontConfig.getFontHeight(), 11);\n",
      "        Assertions.assertEquals(excelFontConfig.getFontHeightInPoints(), 111);\n",
      "        Assertions.assertTrue(excelFontConfig.isItalic());\n",
      "        Assertions.assertTrue(excelFontConfig.isStrikeout());\n",
      "        Assertions.assertEquals(excelFontConfig.getColor(), Font.COLOR_RED);\n",
      "        Assertions.assertEquals(excelFontConfig.getTypeOffset(), FontTypeOffset.SUB);\n",
      "        Assertions.assertEquals(excelFontConfig.getUnderline(), FontUnderline.DOUBLE);\n",
      "        Assertions.assertEquals(excelFontConfig.getCharset(), FontCharset.ARABIC);\n",
      "        Assertions.assertTrue(excelFontConfig.isBold());\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void findForClassTestSort() {\n",
      "        ExcelAnnotationParse excelAnnotationParse = new ExcelAnnotationParse(new Configuration());\n",
      "        excelAnnotationParse.setConfigCacheEnabled(false);\n",
      "\n",
      "        ExcelClassConfig excelClassConfig = excelAnnotationParse.findForClass(Demo6.class);\n",
      "        List<ExcelFieldConfig> excelFieldConfigList = excelClassConfig.getItemList();\n",
      "        Assertions.assertEquals(excelFieldConfigList.get(0).getPropertyName(), \"title\");\n",
      "        Assertions.assertEquals(excelFieldConfigList.get(0).getSort(), 3);\n",
      "        Assertions.assertEquals(excelFieldConfigList.get(1).getPropertyName(), \"name\");\n",
      "        Assertions.assertEquals(excelFieldConfigList.get(1).getSort(), 5);\n",
      "        Assertions.assertEquals(excelFieldConfigList.get(2).getPropertyName(), \"bigDecimal\");\n",
      "        Assertions.assertEquals(excelFieldConfigList.get(2).getSort(), 7);\n",
      "        Assertions.assertEquals(excelFieldConfigList.get(3).getPropertyName(), \"bigDecimal2\");\n",
      "        Assertions.assertEquals(excelFieldConfigList.get(3).getSort(), 7);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void findForClassTestField() {\n",
      "        ExcelAnnotationParse excelAnnotationParse = new ExcelAnnotationParse(new Configuration());\n",
      "        excelAnnotationParse.setConfigCacheEnabled(false);\n",
      "\n",
      "        ExcelClassConfig excelClassConfig = excelAnnotationParse.findForClass(Demo7.class);\n",
      "        List<ExcelFieldConfig> excelFieldConfigList = excelClassConfig.getItemList();\n",
      "\n",
      "        Assertions.assertEquals(excelFieldConfigList.size(), 3);\n",
      "        ExcelFieldConfig excelFieldConfig = excelFieldConfigList.get(0);\n",
      "        Assertions.assertEquals(excelFieldConfig.getTitle(), \"name-title\");\n",
      "        Assertions.assertEquals(excelFieldConfig.getExcelType(), ExcelType.STRING);\n",
      "        Assertions.assertEquals(excelFieldConfig.getCellHandler().length, 1);\n",
      "        Assertions.assertEquals(excelFieldConfig.getCellHandler()[0], DateStringHandler.class);\n",
      "        Assertions.assertEquals(excelFieldConfig.getColspan(), 2);\n",
      "        Assertions.assertEquals(excelFieldConfig.getColspan(), 2);\n",
      "        Assertions.assertEquals(excelFieldConfig.getHeadFormat(), \"@@\");\n",
      "        Assertions.assertEquals(excelFieldConfig.getJavaFormat(), \"yyyy\");\n",
      "        Assertions.assertEquals(excelFieldConfig.getExcelFormat(), \"mm\");\n",
      "\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void findForClassTestFieldStyle() {\n",
      "        ExcelAnnotationParse excelAnnotationParse = new ExcelAnnotationParse(new Configuration());\n",
      "        excelAnnotationParse.setConfigCacheEnabled(false);\n",
      "\n",
      "        ExcelClassConfig excelClassConfig = excelAnnotationParse.findForClass(Demo8.class);\n",
      "        List<ExcelFieldConfig> excelFieldConfigList = excelClassConfig.getItemList();\n",
      "\n",
      "        Assertions.assertEquals(excelFieldConfigList.size(), 4);\n",
      "        ExcelFieldConfig excelFieldConfig = excelFieldConfigList.get(0);\n",
      "        ExcelStyleConfig headStyle = excelFieldConfig.getHeadStyle();\n",
      "        Assertions.assertTrue(headStyle.isHidden());\n",
      "\n",
      "        ExcelStyleConfig dataStyle = excelFieldConfig.getDataStyle();\n",
      "        Assertions.assertEquals(dataStyle.getRotation(), 22);\n",
      "\n",
      "    }\n",
      "\n",
      "    private static class Demo1 {\n",
      "\n",
      "        private String name;\n",
      "\n",
      "        private String title;\n",
      "\n",
      "        private BigDecimal bigDecimal;\n",
      "    }\n",
      "\n",
      "    @ExcelClass(rowTitleWrite = RowTitleWrite.class, rowHeadWrite = RowHeadWrite.class, rowFootWrite = RowFootWrite.class, rowTitleRead = RowTitleRead.class, rowHeadRead = RowHeadRead.class\n",
      "            , rowFootRead = RowFootRead.class, titleFormat = \"@@\", rowStyleRead = RowStyleRead.class, titleStyle = @ExcelStyle(rotation = 22))\n",
      "    private static class Demo2 {\n",
      "\n",
      "        @ExcelField\n",
      "        private String name;\n",
      "\n",
      "        @ExcelField\n",
      "        private String title;\n",
      "\n",
      "        @ExcelField\n",
      "        private BigDecimal bigDecimal;\n",
      "\n",
      "        @ExcelField\n",
      "        private BigDecimal bigDecimal2;\n",
      "    }\n",
      "\n",
      "    @ExcelClass(titleStyle = @ExcelStyle(\n",
      "            hidden = true,\n",
      "            locked = true,\n",
      "            quotePrefix = true\n",
      "            , horizontalAlignment = StyleHorizontalAlignment.CENTER_SELECTION\n",
      "            , wrapText = false\n",
      "            , verticalAlignment = StyleVerticalAlignment.BOTTOM\n",
      "            , rotation = 33\n",
      "            , indent = 10\n",
      "            , borderLeft = BorderStyle.HAIR\n",
      "            , borderRight = BorderStyle.DASH_DOT\n",
      "            , borderTop = BorderStyle.DASHED\n",
      "            , borderBottom = BorderStyle.MEDIUM_DASH_DOT\n",
      "            , leftBorderColor = 11\n",
      "            , rightBorderColor = 111\n",
      "            , topBorderColor = 1111\n",
      "            , bottomBorderColor = 11111\n",
      "            , fillPattern = FillPatternType.ALT_BARS\n",
      "            , fillBackgroundColor = 55\n",
      "            , fillForegroundColor = 66\n",
      "            , shrinkToFit = true\n",
      "\n",
      "    ))\n",
      "    private static class Demo3 {\n",
      "\n",
      "    }\n",
      "\n",
      "    private static class Demo4 {\n",
      "\n",
      "    }\n",
      "\n",
      "    @ExcelClass(titleStyle = @ExcelStyle(font = @ExcelFont(\n",
      "            fontName = \"test\"\n",
      "            , fontHeight = 11\n",
      "            , fontHeightInPoints = 111\n",
      "            , italic = true\n",
      "            , strikeout = true\n",
      "            , color = Font.COLOR_RED\n",
      "            , typeOffset = FontTypeOffset.SUB,\n",
      "            underline = FontUnderline.DOUBLE\n",
      "            , charset = FontCharset.ARABIC\n",
      "            , bold = true\n",
      "    )))\n",
      "    private static class Demo5 {\n",
      "\n",
      "    }\n",
      "\n",
      "    private static class Demo6 {\n",
      "\n",
      "        @ExcelField(sort = 5)\n",
      "        private String name;\n",
      "\n",
      "        @ExcelField(sort = 3)\n",
      "        private String title;\n",
      "\n",
      "        @ExcelField(sort = 7)\n",
      "        private BigDecimal bigDecimal;\n",
      "\n",
      "        @ExcelField(sort = 7)\n",
      "        private BigDecimal bigDecimal2;\n",
      "    }\n",
      "\n",
      "    private static class Demo7 {\n",
      "\n",
      "        @ExcelField(sort = 5\n",
      "                , title = \"name-title\"\n",
      "                , excelType = ExcelType.STRING\n",
      "                , cellHandler = DateStringHandler.class\n",
      "                , colspan = 2\n",
      "                , headFormat = \"@@\"\n",
      "                , javaFormat = \"yyyy\"\n",
      "                , excelFormat = \"mm\"\n",
      "        )\n",
      "        private String name;\n",
      "\n",
      "        @ExcelField(sort = 3, ignore = true)\n",
      "        private String title;\n",
      "\n",
      "        @ExcelField(sort = 7)\n",
      "        private BigDecimal bigDecimal;\n",
      "\n",
      "        @ExcelField(sort = 7)\n",
      "        private BigDecimal bigDecimal2;\n",
      "    }\n",
      "\n",
      "    private static class Demo8 {\n",
      "\n",
      "        @ExcelField(headStyle = @ExcelStyle(hidden = true), sort = 1,\n",
      "                dataStyle = @ExcelStyle(rotation = 22)\n",
      "        )\n",
      "        private String name;\n",
      "\n",
      "        @ExcelField(sort = 3)\n",
      "        private String title;\n",
      "\n",
      "        @ExcelField(sort = 7)\n",
      "        private BigDecimal bigDecimal;\n",
      "\n",
      "        @ExcelField(sort = 7)\n",
      "        private BigDecimal bigDecimal2;\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "ExcelAnnotationParse::::findForClass(java.lang.Class<?>)": [
        66,
        73
      ],
      "ExcelAnnotationParse::::parseForClass(java.lang.Class<?>)": [
        75,
        91
      ],
      "ExcelAnnotationParse::::listAllDeclaredField(java.lang.Class<?>)": [
        94,
        119
      ],
      "ExcelAnnotationParse::::listDeclaredField(java.lang.Class<?>)": [
        121,
        126
      ],
      "ExcelAnnotationParse::::convert(java.lang.reflect.Field)": [
        129,
        141
      ]
    },
    "test_method_lines_dic": {
      "ExcelAnnotationParseTest::::isConfigCacheEnabled()": [
        45,
        50
      ],
      "ExcelAnnotationParseTest::::setConfigCacheEnabled()": [
        52,
        60
      ],
      "ExcelAnnotationParseTest::::findForClass1()": [
        62,
        79
      ],
      "ExcelAnnotationParseTest::::findForClass2()": [
        81,
        98
      ],
      "ExcelAnnotationParseTest::::findForClassTestStyle1()": [
        101,
        136
      ],
      "ExcelAnnotationParseTest::::findForClassTestStyle2()": [
        138,
        174
      ],
      "ExcelAnnotationParseTest::::findForClassTestFont()": [
        176,
        197
      ],
      "ExcelAnnotationParseTest::::findForClassTestSort()": [
        199,
        214
      ],
      "ExcelAnnotationParseTest::::findForClassTestField()": [
        216,
        237
      ],
      "ExcelAnnotationParseTest::::findForClassTestFieldStyle()": [
        239,
        255
      ]
    },
    "reverse_method_lines_dic": {
      "66": "ExcelAnnotationParse::::findForClass(java.lang.Class<?>)",
      "67": "ExcelAnnotationParse::::findForClass(java.lang.Class<?>)",
      "68": "ExcelAnnotationParse::::findForClass(java.lang.Class<?>)",
      "69": "ExcelAnnotationParse::::findForClass(java.lang.Class<?>)",
      "70": "ExcelAnnotationParse::::findForClass(java.lang.Class<?>)",
      "71": "ExcelAnnotationParse::::findForClass(java.lang.Class<?>)",
      "72": "ExcelAnnotationParse::::findForClass(java.lang.Class<?>)",
      "73": "ExcelAnnotationParse::::findForClass(java.lang.Class<?>)",
      "75": "ExcelAnnotationParse::::parseForClass(java.lang.Class<?>)",
      "76": "ExcelAnnotationParse::::parseForClass(java.lang.Class<?>)",
      "77": "ExcelAnnotationParse::::parseForClass(java.lang.Class<?>)",
      "78": "ExcelAnnotationParse::::parseForClass(java.lang.Class<?>)",
      "79": "ExcelAnnotationParse::::parseForClass(java.lang.Class<?>)",
      "80": "ExcelAnnotationParse::::parseForClass(java.lang.Class<?>)",
      "81": "ExcelAnnotationParse::::parseForClass(java.lang.Class<?>)",
      "82": "ExcelAnnotationParse::::parseForClass(java.lang.Class<?>)",
      "83": "ExcelAnnotationParse::::parseForClass(java.lang.Class<?>)",
      "84": "ExcelAnnotationParse::::parseForClass(java.lang.Class<?>)",
      "85": "ExcelAnnotationParse::::parseForClass(java.lang.Class<?>)",
      "86": "ExcelAnnotationParse::::parseForClass(java.lang.Class<?>)",
      "87": "ExcelAnnotationParse::::parseForClass(java.lang.Class<?>)",
      "88": "ExcelAnnotationParse::::parseForClass(java.lang.Class<?>)",
      "89": "ExcelAnnotationParse::::parseForClass(java.lang.Class<?>)",
      "90": "ExcelAnnotationParse::::parseForClass(java.lang.Class<?>)",
      "91": "ExcelAnnotationParse::::parseForClass(java.lang.Class<?>)",
      "94": "ExcelAnnotationParse::::listAllDeclaredField(java.lang.Class<?>)",
      "95": "ExcelAnnotationParse::::listAllDeclaredField(java.lang.Class<?>)",
      "96": "ExcelAnnotationParse::::listAllDeclaredField(java.lang.Class<?>)",
      "97": "ExcelAnnotationParse::::listAllDeclaredField(java.lang.Class<?>)",
      "98": "ExcelAnnotationParse::::listAllDeclaredField(java.lang.Class<?>)",
      "99": "ExcelAnnotationParse::::listAllDeclaredField(java.lang.Class<?>)",
      "100": "ExcelAnnotationParse::::listAllDeclaredField(java.lang.Class<?>)",
      "101": "ExcelAnnotationParse::::listAllDeclaredField(java.lang.Class<?>)",
      "102": "ExcelAnnotationParse::::listAllDeclaredField(java.lang.Class<?>)",
      "103": "ExcelAnnotationParse::::listAllDeclaredField(java.lang.Class<?>)",
      "104": "ExcelAnnotationParse::::listAllDeclaredField(java.lang.Class<?>)",
      "105": "ExcelAnnotationParse::::listAllDeclaredField(java.lang.Class<?>)",
      "106": "ExcelAnnotationParse::::listAllDeclaredField(java.lang.Class<?>)",
      "107": "ExcelAnnotationParse::::listAllDeclaredField(java.lang.Class<?>)",
      "108": "ExcelAnnotationParse::::listAllDeclaredField(java.lang.Class<?>)",
      "109": "ExcelAnnotationParse::::listAllDeclaredField(java.lang.Class<?>)",
      "110": "ExcelAnnotationParse::::listAllDeclaredField(java.lang.Class<?>)",
      "111": "ExcelAnnotationParse::::listAllDeclaredField(java.lang.Class<?>)",
      "112": "ExcelAnnotationParse::::listAllDeclaredField(java.lang.Class<?>)",
      "113": "ExcelAnnotationParse::::listAllDeclaredField(java.lang.Class<?>)",
      "114": "ExcelAnnotationParse::::listAllDeclaredField(java.lang.Class<?>)",
      "115": "ExcelAnnotationParse::::listAllDeclaredField(java.lang.Class<?>)",
      "116": "ExcelAnnotationParse::::listAllDeclaredField(java.lang.Class<?>)",
      "117": "ExcelAnnotationParse::::listAllDeclaredField(java.lang.Class<?>)",
      "118": "ExcelAnnotationParse::::listAllDeclaredField(java.lang.Class<?>)",
      "119": "ExcelAnnotationParse::::listAllDeclaredField(java.lang.Class<?>)",
      "121": "ExcelAnnotationParse::::listDeclaredField(java.lang.Class<?>)",
      "122": "ExcelAnnotationParse::::listDeclaredField(java.lang.Class<?>)",
      "123": "ExcelAnnotationParse::::listDeclaredField(java.lang.Class<?>)",
      "124": "ExcelAnnotationParse::::listDeclaredField(java.lang.Class<?>)",
      "125": "ExcelAnnotationParse::::listDeclaredField(java.lang.Class<?>)",
      "126": "ExcelAnnotationParse::::listDeclaredField(java.lang.Class<?>)",
      "129": "ExcelAnnotationParse::::convert(java.lang.reflect.Field)",
      "130": "ExcelAnnotationParse::::convert(java.lang.reflect.Field)",
      "131": "ExcelAnnotationParse::::convert(java.lang.reflect.Field)",
      "132": "ExcelAnnotationParse::::convert(java.lang.reflect.Field)",
      "133": "ExcelAnnotationParse::::convert(java.lang.reflect.Field)",
      "134": "ExcelAnnotationParse::::convert(java.lang.reflect.Field)",
      "135": "ExcelAnnotationParse::::convert(java.lang.reflect.Field)",
      "136": "ExcelAnnotationParse::::convert(java.lang.reflect.Field)",
      "137": "ExcelAnnotationParse::::convert(java.lang.reflect.Field)",
      "138": "ExcelAnnotationParse::::convert(java.lang.reflect.Field)",
      "139": "ExcelAnnotationParse::::convert(java.lang.reflect.Field)",
      "140": "ExcelAnnotationParse::::convert(java.lang.reflect.Field)",
      "141": "ExcelAnnotationParse::::convert(java.lang.reflect.Field)"
    },
    "test_reverse_method_lines_dic": {
      "45": "ExcelAnnotationParseTest::::isConfigCacheEnabled()",
      "46": "ExcelAnnotationParseTest::::isConfigCacheEnabled()",
      "47": "ExcelAnnotationParseTest::::isConfigCacheEnabled()",
      "48": "ExcelAnnotationParseTest::::isConfigCacheEnabled()",
      "49": "ExcelAnnotationParseTest::::isConfigCacheEnabled()",
      "50": "ExcelAnnotationParseTest::::isConfigCacheEnabled()",
      "52": "ExcelAnnotationParseTest::::setConfigCacheEnabled()",
      "53": "ExcelAnnotationParseTest::::setConfigCacheEnabled()",
      "54": "ExcelAnnotationParseTest::::setConfigCacheEnabled()",
      "55": "ExcelAnnotationParseTest::::setConfigCacheEnabled()",
      "56": "ExcelAnnotationParseTest::::setConfigCacheEnabled()",
      "57": "ExcelAnnotationParseTest::::setConfigCacheEnabled()",
      "58": "ExcelAnnotationParseTest::::setConfigCacheEnabled()",
      "59": "ExcelAnnotationParseTest::::setConfigCacheEnabled()",
      "60": "ExcelAnnotationParseTest::::setConfigCacheEnabled()",
      "62": "ExcelAnnotationParseTest::::findForClass1()",
      "63": "ExcelAnnotationParseTest::::findForClass1()",
      "64": "ExcelAnnotationParseTest::::findForClass1()",
      "65": "ExcelAnnotationParseTest::::findForClass1()",
      "66": "ExcelAnnotationParseTest::::findForClass1()",
      "67": "ExcelAnnotationParseTest::::findForClass1()",
      "68": "ExcelAnnotationParseTest::::findForClass1()",
      "69": "ExcelAnnotationParseTest::::findForClass1()",
      "70": "ExcelAnnotationParseTest::::findForClass1()",
      "71": "ExcelAnnotationParseTest::::findForClass1()",
      "72": "ExcelAnnotationParseTest::::findForClass1()",
      "73": "ExcelAnnotationParseTest::::findForClass1()",
      "74": "ExcelAnnotationParseTest::::findForClass1()",
      "75": "ExcelAnnotationParseTest::::findForClass1()",
      "76": "ExcelAnnotationParseTest::::findForClass1()",
      "77": "ExcelAnnotationParseTest::::findForClass1()",
      "78": "ExcelAnnotationParseTest::::findForClass1()",
      "79": "ExcelAnnotationParseTest::::findForClass1()",
      "81": "ExcelAnnotationParseTest::::findForClass2()",
      "82": "ExcelAnnotationParseTest::::findForClass2()",
      "83": "ExcelAnnotationParseTest::::findForClass2()",
      "84": "ExcelAnnotationParseTest::::findForClass2()",
      "85": "ExcelAnnotationParseTest::::findForClass2()",
      "86": "ExcelAnnotationParseTest::::findForClass2()",
      "87": "ExcelAnnotationParseTest::::findForClass2()",
      "88": "ExcelAnnotationParseTest::::findForClass2()",
      "89": "ExcelAnnotationParseTest::::findForClass2()",
      "90": "ExcelAnnotationParseTest::::findForClass2()",
      "91": "ExcelAnnotationParseTest::::findForClass2()",
      "92": "ExcelAnnotationParseTest::::findForClass2()",
      "93": "ExcelAnnotationParseTest::::findForClass2()",
      "94": "ExcelAnnotationParseTest::::findForClass2()",
      "95": "ExcelAnnotationParseTest::::findForClass2()",
      "96": "ExcelAnnotationParseTest::::findForClass2()",
      "97": "ExcelAnnotationParseTest::::findForClass2()",
      "98": "ExcelAnnotationParseTest::::findForClass2()",
      "101": "ExcelAnnotationParseTest::::findForClassTestStyle1()",
      "102": "ExcelAnnotationParseTest::::findForClassTestStyle1()",
      "103": "ExcelAnnotationParseTest::::findForClassTestStyle1()",
      "104": "ExcelAnnotationParseTest::::findForClassTestStyle1()",
      "105": "ExcelAnnotationParseTest::::findForClassTestStyle1()",
      "106": "ExcelAnnotationParseTest::::findForClassTestStyle1()",
      "107": "ExcelAnnotationParseTest::::findForClassTestStyle1()",
      "108": "ExcelAnnotationParseTest::::findForClassTestStyle1()",
      "109": "ExcelAnnotationParseTest::::findForClassTestStyle1()",
      "110": "ExcelAnnotationParseTest::::findForClassTestStyle1()",
      "111": "ExcelAnnotationParseTest::::findForClassTestStyle1()",
      "112": "ExcelAnnotationParseTest::::findForClassTestStyle1()",
      "113": "ExcelAnnotationParseTest::::findForClassTestStyle1()",
      "114": "ExcelAnnotationParseTest::::findForClassTestStyle1()",
      "115": "ExcelAnnotationParseTest::::findForClassTestStyle1()",
      "116": "ExcelAnnotationParseTest::::findForClassTestStyle1()",
      "117": "ExcelAnnotationParseTest::::findForClassTestStyle1()",
      "118": "ExcelAnnotationParseTest::::findForClassTestStyle1()",
      "119": "ExcelAnnotationParseTest::::findForClassTestStyle1()",
      "120": "ExcelAnnotationParseTest::::findForClassTestStyle1()",
      "121": "ExcelAnnotationParseTest::::findForClassTestStyle1()",
      "122": "ExcelAnnotationParseTest::::findForClassTestStyle1()",
      "123": "ExcelAnnotationParseTest::::findForClassTestStyle1()",
      "124": "ExcelAnnotationParseTest::::findForClassTestStyle1()",
      "125": "ExcelAnnotationParseTest::::findForClassTestStyle1()",
      "126": "ExcelAnnotationParseTest::::findForClassTestStyle1()",
      "127": "ExcelAnnotationParseTest::::findForClassTestStyle1()",
      "128": "ExcelAnnotationParseTest::::findForClassTestStyle1()",
      "129": "ExcelAnnotationParseTest::::findForClassTestStyle1()",
      "130": "ExcelAnnotationParseTest::::findForClassTestStyle1()",
      "131": "ExcelAnnotationParseTest::::findForClassTestStyle1()",
      "132": "ExcelAnnotationParseTest::::findForClassTestStyle1()",
      "133": "ExcelAnnotationParseTest::::findForClassTestStyle1()",
      "134": "ExcelAnnotationParseTest::::findForClassTestStyle1()",
      "135": "ExcelAnnotationParseTest::::findForClassTestStyle1()",
      "136": "ExcelAnnotationParseTest::::findForClassTestStyle1()",
      "138": "ExcelAnnotationParseTest::::findForClassTestStyle2()",
      "139": "ExcelAnnotationParseTest::::findForClassTestStyle2()",
      "140": "ExcelAnnotationParseTest::::findForClassTestStyle2()",
      "141": "ExcelAnnotationParseTest::::findForClassTestStyle2()",
      "142": "ExcelAnnotationParseTest::::findForClassTestStyle2()",
      "143": "ExcelAnnotationParseTest::::findForClassTestStyle2()",
      "144": "ExcelAnnotationParseTest::::findForClassTestStyle2()",
      "145": "ExcelAnnotationParseTest::::findForClassTestStyle2()",
      "146": "ExcelAnnotationParseTest::::findForClassTestStyle2()",
      "147": "ExcelAnnotationParseTest::::findForClassTestStyle2()",
      "148": "ExcelAnnotationParseTest::::findForClassTestStyle2()",
      "149": "ExcelAnnotationParseTest::::findForClassTestStyle2()",
      "150": "ExcelAnnotationParseTest::::findForClassTestStyle2()",
      "151": "ExcelAnnotationParseTest::::findForClassTestStyle2()",
      "152": "ExcelAnnotationParseTest::::findForClassTestStyle2()",
      "153": "ExcelAnnotationParseTest::::findForClassTestStyle2()",
      "154": "ExcelAnnotationParseTest::::findForClassTestStyle2()",
      "155": "ExcelAnnotationParseTest::::findForClassTestStyle2()",
      "156": "ExcelAnnotationParseTest::::findForClassTestStyle2()",
      "157": "ExcelAnnotationParseTest::::findForClassTestStyle2()",
      "158": "ExcelAnnotationParseTest::::findForClassTestStyle2()",
      "159": "ExcelAnnotationParseTest::::findForClassTestStyle2()",
      "160": "ExcelAnnotationParseTest::::findForClassTestStyle2()",
      "161": "ExcelAnnotationParseTest::::findForClassTestStyle2()",
      "162": "ExcelAnnotationParseTest::::findForClassTestStyle2()",
      "163": "ExcelAnnotationParseTest::::findForClassTestStyle2()",
      "164": "ExcelAnnotationParseTest::::findForClassTestStyle2()",
      "165": "ExcelAnnotationParseTest::::findForClassTestStyle2()",
      "166": "ExcelAnnotationParseTest::::findForClassTestStyle2()",
      "167": "ExcelAnnotationParseTest::::findForClassTestStyle2()",
      "168": "ExcelAnnotationParseTest::::findForClassTestStyle2()",
      "169": "ExcelAnnotationParseTest::::findForClassTestStyle2()",
      "170": "ExcelAnnotationParseTest::::findForClassTestStyle2()",
      "171": "ExcelAnnotationParseTest::::findForClassTestStyle2()",
      "172": "ExcelAnnotationParseTest::::findForClassTestStyle2()",
      "173": "ExcelAnnotationParseTest::::findForClassTestStyle2()",
      "174": "ExcelAnnotationParseTest::::findForClassTestStyle2()",
      "176": "ExcelAnnotationParseTest::::findForClassTestFont()",
      "177": "ExcelAnnotationParseTest::::findForClassTestFont()",
      "178": "ExcelAnnotationParseTest::::findForClassTestFont()",
      "179": "ExcelAnnotationParseTest::::findForClassTestFont()",
      "180": "ExcelAnnotationParseTest::::findForClassTestFont()",
      "181": "ExcelAnnotationParseTest::::findForClassTestFont()",
      "182": "ExcelAnnotationParseTest::::findForClassTestFont()",
      "183": "ExcelAnnotationParseTest::::findForClassTestFont()",
      "184": "ExcelAnnotationParseTest::::findForClassTestFont()",
      "185": "ExcelAnnotationParseTest::::findForClassTestFont()",
      "186": "ExcelAnnotationParseTest::::findForClassTestFont()",
      "187": "ExcelAnnotationParseTest::::findForClassTestFont()",
      "188": "ExcelAnnotationParseTest::::findForClassTestFont()",
      "189": "ExcelAnnotationParseTest::::findForClassTestFont()",
      "190": "ExcelAnnotationParseTest::::findForClassTestFont()",
      "191": "ExcelAnnotationParseTest::::findForClassTestFont()",
      "192": "ExcelAnnotationParseTest::::findForClassTestFont()",
      "193": "ExcelAnnotationParseTest::::findForClassTestFont()",
      "194": "ExcelAnnotationParseTest::::findForClassTestFont()",
      "195": "ExcelAnnotationParseTest::::findForClassTestFont()",
      "196": "ExcelAnnotationParseTest::::findForClassTestFont()",
      "197": "ExcelAnnotationParseTest::::findForClassTestFont()",
      "199": "ExcelAnnotationParseTest::::findForClassTestSort()",
      "200": "ExcelAnnotationParseTest::::findForClassTestSort()",
      "201": "ExcelAnnotationParseTest::::findForClassTestSort()",
      "202": "ExcelAnnotationParseTest::::findForClassTestSort()",
      "203": "ExcelAnnotationParseTest::::findForClassTestSort()",
      "204": "ExcelAnnotationParseTest::::findForClassTestSort()",
      "205": "ExcelAnnotationParseTest::::findForClassTestSort()",
      "206": "ExcelAnnotationParseTest::::findForClassTestSort()",
      "207": "ExcelAnnotationParseTest::::findForClassTestSort()",
      "208": "ExcelAnnotationParseTest::::findForClassTestSort()",
      "209": "ExcelAnnotationParseTest::::findForClassTestSort()",
      "210": "ExcelAnnotationParseTest::::findForClassTestSort()",
      "211": "ExcelAnnotationParseTest::::findForClassTestSort()",
      "212": "ExcelAnnotationParseTest::::findForClassTestSort()",
      "213": "ExcelAnnotationParseTest::::findForClassTestSort()",
      "214": "ExcelAnnotationParseTest::::findForClassTestSort()",
      "216": "ExcelAnnotationParseTest::::findForClassTestField()",
      "217": "ExcelAnnotationParseTest::::findForClassTestField()",
      "218": "ExcelAnnotationParseTest::::findForClassTestField()",
      "219": "ExcelAnnotationParseTest::::findForClassTestField()",
      "220": "ExcelAnnotationParseTest::::findForClassTestField()",
      "221": "ExcelAnnotationParseTest::::findForClassTestField()",
      "222": "ExcelAnnotationParseTest::::findForClassTestField()",
      "223": "ExcelAnnotationParseTest::::findForClassTestField()",
      "224": "ExcelAnnotationParseTest::::findForClassTestField()",
      "225": "ExcelAnnotationParseTest::::findForClassTestField()",
      "226": "ExcelAnnotationParseTest::::findForClassTestField()",
      "227": "ExcelAnnotationParseTest::::findForClassTestField()",
      "228": "ExcelAnnotationParseTest::::findForClassTestField()",
      "229": "ExcelAnnotationParseTest::::findForClassTestField()",
      "230": "ExcelAnnotationParseTest::::findForClassTestField()",
      "231": "ExcelAnnotationParseTest::::findForClassTestField()",
      "232": "ExcelAnnotationParseTest::::findForClassTestField()",
      "233": "ExcelAnnotationParseTest::::findForClassTestField()",
      "234": "ExcelAnnotationParseTest::::findForClassTestField()",
      "235": "ExcelAnnotationParseTest::::findForClassTestField()",
      "236": "ExcelAnnotationParseTest::::findForClassTestField()",
      "237": "ExcelAnnotationParseTest::::findForClassTestField()",
      "239": "ExcelAnnotationParseTest::::findForClassTestFieldStyle()",
      "240": "ExcelAnnotationParseTest::::findForClassTestFieldStyle()",
      "241": "ExcelAnnotationParseTest::::findForClassTestFieldStyle()",
      "242": "ExcelAnnotationParseTest::::findForClassTestFieldStyle()",
      "243": "ExcelAnnotationParseTest::::findForClassTestFieldStyle()",
      "244": "ExcelAnnotationParseTest::::findForClassTestFieldStyle()",
      "245": "ExcelAnnotationParseTest::::findForClassTestFieldStyle()",
      "246": "ExcelAnnotationParseTest::::findForClassTestFieldStyle()",
      "247": "ExcelAnnotationParseTest::::findForClassTestFieldStyle()",
      "248": "ExcelAnnotationParseTest::::findForClassTestFieldStyle()",
      "249": "ExcelAnnotationParseTest::::findForClassTestFieldStyle()",
      "250": "ExcelAnnotationParseTest::::findForClassTestFieldStyle()",
      "251": "ExcelAnnotationParseTest::::findForClassTestFieldStyle()",
      "252": "ExcelAnnotationParseTest::::findForClassTestFieldStyle()",
      "253": "ExcelAnnotationParseTest::::findForClassTestFieldStyle()",
      "254": "ExcelAnnotationParseTest::::findForClassTestFieldStyle()",
      "255": "ExcelAnnotationParseTest::::findForClassTestFieldStyle()"
    },
    "tests": [
      {
        "test_lines": [
          45,
          50
        ],
        "covered_lines": [
          46,
          51,
          52,
          55,
          56,
          57
        ]
      },
      {
        "test_lines": [
          52,
          60
        ],
        "covered_lines": [
          46,
          51,
          52,
          55,
          56,
          57
        ]
      },
      {
        "test_lines": [
          62,
          79
        ],
        "covered_lines": [
          46,
          51,
          55,
          56,
          57,
          67,
          71,
          77,
          78,
          79,
          80,
          81,
          82,
          83,
          85,
          86,
          87,
          95,
          97,
          99,
          100,
          101,
          103,
          104,
          105,
          106,
          108,
          109,
          112,
          113,
          116,
          117,
          118,
          122,
          123,
          125,
          130,
          131,
          132,
          133,
          136,
          137
        ]
      },
      {
        "test_lines": [
          81,
          98
        ],
        "covered_lines": [
          46,
          51,
          55,
          56,
          57,
          67,
          71,
          77,
          78,
          79,
          80,
          81,
          82,
          83,
          85,
          86,
          89,
          95,
          97,
          99,
          100,
          101,
          103,
          104,
          105,
          106,
          108,
          109,
          112,
          113,
          116,
          117,
          118,
          122,
          123,
          125,
          130,
          131,
          132,
          133,
          136,
          139
        ]
      },
      {
        "test_lines": [
          101,
          136
        ],
        "covered_lines": [
          46,
          51,
          55,
          56,
          57,
          67,
          71,
          77,
          78,
          79,
          80,
          81,
          82,
          83,
          85,
          86,
          89,
          95,
          97,
          99,
          100,
          101,
          103,
          104,
          105,
          106,
          116,
          117,
          118,
          122,
          123,
          125
        ]
      },
      {
        "test_lines": [
          138,
          174
        ],
        "covered_lines": [
          46,
          51,
          55,
          56,
          57,
          67,
          71,
          77,
          78,
          79,
          80,
          81,
          82,
          83,
          85,
          86,
          87,
          95,
          97,
          99,
          100,
          101,
          103,
          104,
          105,
          106,
          116,
          117,
          118,
          122,
          123,
          125
        ]
      },
      {
        "test_lines": [
          176,
          197
        ],
        "covered_lines": [
          46,
          51,
          55,
          56,
          57,
          67,
          71,
          77,
          78,
          79,
          80,
          81,
          82,
          83,
          85,
          86,
          89,
          95,
          97,
          99,
          100,
          101,
          103,
          104,
          105,
          106,
          116,
          117,
          118,
          122,
          123,
          125
        ]
      },
      {
        "test_lines": [
          199,
          214
        ],
        "covered_lines": [
          46,
          51,
          55,
          56,
          57,
          67,
          71,
          77,
          78,
          79,
          80,
          81,
          82,
          83,
          85,
          86,
          87,
          95,
          97,
          99,
          100,
          101,
          103,
          104,
          105,
          106,
          108,
          109,
          112,
          113,
          116,
          117,
          118,
          122,
          123,
          125,
          130,
          131,
          132,
          133,
          136,
          139
        ]
      },
      {
        "test_lines": [
          216,
          237
        ],
        "covered_lines": [
          46,
          51,
          55,
          56,
          57,
          67,
          71,
          77,
          78,
          79,
          80,
          81,
          82,
          83,
          85,
          86,
          87,
          95,
          97,
          99,
          100,
          101,
          103,
          104,
          105,
          106,
          108,
          109,
          112,
          113,
          116,
          117,
          118,
          122,
          123,
          125,
          130,
          131,
          132,
          133,
          134,
          136,
          139
        ]
      },
      {
        "test_lines": [
          239,
          255
        ],
        "covered_lines": [
          46,
          51,
          55,
          56,
          57,
          67,
          71,
          77,
          78,
          79,
          80,
          81,
          82,
          83,
          85,
          86,
          87,
          95,
          97,
          99,
          100,
          101,
          103,
          104,
          105,
          106,
          108,
          109,
          112,
          113,
          116,
          117,
          118,
          122,
          123,
          125,
          130,
          131,
          132,
          133,
          136,
          139
        ]
      }
    ]
  }
}