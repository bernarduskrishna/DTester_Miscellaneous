{
  "/bernard/dataset_construction/prep/repos/RocketMQC/remoting/src/main/java/org/apache/rocketmq/remoting/netty/FileRegionEncoder.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package org.apache.rocketmq.remoting.netty;\n",
      "\n",
      "import io.netty.buffer.ByteBuf;\n",
      "import io.netty.channel.ChannelHandlerContext;\n",
      "import io.netty.channel.FileRegion;\n",
      "import io.netty.handler.codec.MessageToByteEncoder;\n",
      "\n",
      "import io.netty.handler.ssl.SslHandler;\n",
      "import java.io.IOException;\n",
      "import java.nio.ByteBuffer;\n",
      "import java.nio.channels.WritableByteChannel;\n",
      "\n",
      "/**\n",
      " * \u7ee7\u627f\u81eaMessageToByteEncoder\n",
      " * <p>\n",
      " *     By default, file region are directly transferred to socket channel which is known as zero copy. In case we need\n",
      " *     to encrypt transmission, data being sent should go through the {@link SslHandler}. This encoder ensures this\n",
      " *     process.\n",
      " * </p>\n",
      " */\n",
      "public class FileRegionEncoder extends MessageToByteEncoder<FileRegion> {\n",
      "\n",
      "    /**\n",
      "     * Encode a message into a {@link io.netty.buffer.ByteBuf}. This method will be called for each written message that\n",
      "     * can be handled by this encoder.\n",
      "     *\n",
      "     * @param ctx the {@link io.netty.channel.ChannelHandlerContext} which this {@link\n",
      "     * io.netty.handler.codec.MessageToByteEncoder} belongs to\n",
      "     * @param msg the message to encode\n",
      "     * @param out the {@link io.netty.buffer.ByteBuf} into which the encoded message will be written\n",
      "     * @throws Exception is thrown if an error occurs\n",
      "     */\n",
      "    @Override\n",
      "    protected void encode(ChannelHandlerContext ctx, FileRegion msg, final ByteBuf out) throws Exception {\n",
      "        WritableByteChannel writableByteChannel = new WritableByteChannel() {\n",
      "            @Override\n",
      "            public int write(ByteBuffer src) throws IOException {\n",
      "                out.writeBytes(src);\n",
      "                return out.capacity();\n",
      "            }\n",
      "\n",
      "            @Override\n",
      "            public boolean isOpen() {\n",
      "                return true;\n",
      "            }\n",
      "\n",
      "            @Override\n",
      "            public void close() throws IOException {\n",
      "            }\n",
      "        };\n",
      "\n",
      "        long toTransfer = msg.count();\n",
      "\n",
      "        while (true) {\n",
      "            long transferred = msg.transfered();\n",
      "            if (toTransfer - transferred <= 0) {\n",
      "                break;\n",
      "            }\n",
      "            msg.transferTo(writableByteChannel, transferred);\n",
      "        }\n",
      "    }\n",
      "}"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package org.apache.rocketmq.remoting.netty;\n",
      "\n",
      "import io.netty.buffer.ByteBuf;\n",
      "import io.netty.channel.DefaultFileRegion;\n",
      "import io.netty.channel.FileRegion;\n",
      "import io.netty.channel.embedded.EmbeddedChannel;\n",
      "import java.io.BufferedOutputStream;\n",
      "import java.io.File;\n",
      "import java.io.FileOutputStream;\n",
      "import java.io.IOException;\n",
      "import java.util.Random;\n",
      "import java.util.UUID;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "\n",
      "public class FileRegionEncoderTest {\n",
      "\n",
      "    /**\n",
      "     * This unit test case ensures that {@link FileRegionEncoder} indeed wraps {@link FileRegion} to\n",
      "     * {@link ByteBuf}.\n",
      "     * @throws IOException if there is an error.\n",
      "     */\n",
      "    @Test\n",
      "    public void testEncode() throws IOException {\n",
      "        FileRegionEncoder fileRegionEncoder = new FileRegionEncoder();\n",
      "        EmbeddedChannel channel = new EmbeddedChannel(fileRegionEncoder);\n",
      "        File file = File.createTempFile(UUID.randomUUID().toString(), \".data\");\n",
      "        file.deleteOnExit();\n",
      "        Random random = new Random(System.currentTimeMillis());\n",
      "        int dataLength = 1 << 10;\n",
      "        byte[] data = new byte[dataLength];\n",
      "        random.nextBytes(data);\n",
      "        write(file, data);\n",
      "        FileRegion fileRegion = new DefaultFileRegion(file, 0, dataLength);\n",
      "        Assert.assertEquals(0, fileRegion.transfered());\n",
      "        Assert.assertEquals(dataLength, fileRegion.count());\n",
      "        Assert.assertTrue(channel.writeOutbound(fileRegion));\n",
      "        ByteBuf out = (ByteBuf) channel.readOutbound();\n",
      "        byte[] arr = new byte[out.readableBytes()];\n",
      "        out.getBytes(0, arr);\n",
      "        Assert.assertArrayEquals(\"Data should be identical\", data, arr);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Write byte array to the specified file.\n",
      "     *\n",
      "     * @param file File to write to.\n",
      "     * @param data byte array to write.\n",
      "     * @throws IOException in case there is an exception.\n",
      "     */\n",
      "    private static void write(File file, byte[] data) throws IOException {\n",
      "        BufferedOutputStream bufferedOutputStream = null;\n",
      "        try {\n",
      "            bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(file, false));\n",
      "            bufferedOutputStream.write(data);\n",
      "            bufferedOutputStream.flush();\n",
      "        } finally {\n",
      "            if (null != bufferedOutputStream) {\n",
      "                bufferedOutputStream.close();\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {},
    "test_method_lines_dic": {
      "FileRegionEncoderTest::::testEncode()": [
        40,
        59
      ],
      "FileRegionEncoderTest::::write(java.io.File,byte[])": [
        68,
        79
      ]
    },
    "reverse_method_lines_dic": {},
    "test_reverse_method_lines_dic": {
      "40": "FileRegionEncoderTest::::testEncode()",
      "41": "FileRegionEncoderTest::::testEncode()",
      "42": "FileRegionEncoderTest::::testEncode()",
      "43": "FileRegionEncoderTest::::testEncode()",
      "44": "FileRegionEncoderTest::::testEncode()",
      "45": "FileRegionEncoderTest::::testEncode()",
      "46": "FileRegionEncoderTest::::testEncode()",
      "47": "FileRegionEncoderTest::::testEncode()",
      "48": "FileRegionEncoderTest::::testEncode()",
      "49": "FileRegionEncoderTest::::testEncode()",
      "50": "FileRegionEncoderTest::::testEncode()",
      "51": "FileRegionEncoderTest::::testEncode()",
      "52": "FileRegionEncoderTest::::testEncode()",
      "53": "FileRegionEncoderTest::::testEncode()",
      "54": "FileRegionEncoderTest::::testEncode()",
      "55": "FileRegionEncoderTest::::testEncode()",
      "56": "FileRegionEncoderTest::::testEncode()",
      "57": "FileRegionEncoderTest::::testEncode()",
      "58": "FileRegionEncoderTest::::testEncode()",
      "59": "FileRegionEncoderTest::::testEncode()",
      "68": "FileRegionEncoderTest::::write(java.io.File,byte[])",
      "69": "FileRegionEncoderTest::::write(java.io.File,byte[])",
      "70": "FileRegionEncoderTest::::write(java.io.File,byte[])",
      "71": "FileRegionEncoderTest::::write(java.io.File,byte[])",
      "72": "FileRegionEncoderTest::::write(java.io.File,byte[])",
      "73": "FileRegionEncoderTest::::write(java.io.File,byte[])",
      "74": "FileRegionEncoderTest::::write(java.io.File,byte[])",
      "75": "FileRegionEncoderTest::::write(java.io.File,byte[])",
      "76": "FileRegionEncoderTest::::write(java.io.File,byte[])",
      "77": "FileRegionEncoderTest::::write(java.io.File,byte[])",
      "78": "FileRegionEncoderTest::::write(java.io.File,byte[])",
      "79": "FileRegionEncoderTest::::write(java.io.File,byte[])"
    },
    "tests": [
      {
        "test_lines": [
          40,
          59
        ],
        "covered_lines": [
          38,
          52,
          55,
          56,
          61,
          69,
          72,
          73,
          74,
          76,
          77,
          78
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.remoting.netty;\n",
      "\n",
      "import io.netty.channel.Channel;\n",
      "import io.netty.channel.ChannelFuture;\n",
      "import io.netty.channel.ChannelFutureListener;\n",
      "import io.netty.channel.ChannelHandlerContext;\n",
      "import io.netty.handler.ssl.SslContext;\n",
      "import io.netty.handler.ssl.SslHandler;\n",
      "import java.net.SocketAddress;\n",
      "import java.util.ArrayList;\n",
      "import java.util.HashMap;\n",
      "import java.util.Iterator;\n",
      "import java.util.LinkedList;\n",
      "import java.util.List;\n",
      "import java.util.Map.Entry;\n",
      "import java.util.concurrent.ConcurrentHashMap;\n",
      "import java.util.concurrent.ConcurrentMap;\n",
      "import java.util.concurrent.ExecutorService;\n",
      "import java.util.concurrent.LinkedBlockingQueue;\n",
      "import java.util.concurrent.RejectedExecutionException;\n",
      "import java.util.concurrent.Semaphore;\n",
      "import java.util.concurrent.TimeUnit;\n",
      "\n",
      "import org.apache.rocketmq.logging.InternalLogger;\n",
      "import org.apache.rocketmq.logging.InternalLoggerFactory;\n",
      "import org.apache.rocketmq.remoting.ChannelEventListener;\n",
      "import org.apache.rocketmq.remoting.InvokeCallback;\n",
      "import org.apache.rocketmq.remoting.RPCHook;\n",
      "import org.apache.rocketmq.remoting.common.Pair;\n",
      "import org.apache.rocketmq.remoting.common.RemotingHelper;\n",
      "import org.apache.rocketmq.remoting.common.SemaphoreReleaseOnlyOnce;\n",
      "import org.apache.rocketmq.remoting.common.ServiceThread;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingTooMuchRequestException;\n",
      "import org.apache.rocketmq.remoting.protocol.RemotingCommand;\n",
      "import org.apache.rocketmq.remoting.protocol.RemotingSysResponseCode;\n",
      "\n",
      "public abstract class NettyRemotingAbstract {\n",
      "\n",
      "    /**\n",
      "     * Remoting logger instance.\n",
      "     */\n",
      "    private static final InternalLogger log = InternalLoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);\n",
      "\n",
      "    /**\n",
      "     * Semaphore to limit maximum number of on-going one-way requests, which protects system memory footprint.\n",
      "     */\n",
      "    protected final Semaphore semaphoreOneway;\n",
      "\n",
      "    /**\n",
      "     * Semaphore to limit maximum number of on-going asynchronous requests, which protects system memory footprint.\n",
      "     */\n",
      "    protected final Semaphore semaphoreAsync;\n",
      "\n",
      "    /**\n",
      "     * This map caches all on-going requests.\n",
      "     */\n",
      "    protected final ConcurrentMap<Integer /* opaque */, ResponseFuture> responseTable =\n",
      "        new ConcurrentHashMap<Integer, ResponseFuture>(256);\n",
      "\n",
      "    /**\n",
      "     * This container holds all processors per request code, aka, for each incoming request, we may look up the\n",
      "     * responding processor in this map to handle the request.\n",
      "     */\n",
      "    protected final HashMap<Integer/* request code */, Pair<NettyRequestProcessor, ExecutorService>> processorTable =\n",
      "        new HashMap<Integer, Pair<NettyRequestProcessor, ExecutorService>>(64);\n",
      "\n",
      "    /**\n",
      "     * Executor to feed netty events to user defined {@link ChannelEventListener}.\n",
      "     */\n",
      "    protected final NettyEventExecutor nettyEventExecutor = new NettyEventExecutor();\n",
      "\n",
      "    /**\n",
      "     * The default request processor to use in case there is no exact match in {@link #processorTable} per request code.\n",
      "     */\n",
      "    protected Pair<NettyRequestProcessor, ExecutorService> defaultRequestProcessor;\n",
      "\n",
      "    /**\n",
      "     * SSL context via which to create {@link SslHandler}.\n",
      "     */\n",
      "    protected volatile SslContext sslContext;\n",
      "\n",
      "    /**\n",
      "     * custom rpc hooks\n",
      "     */\n",
      "    protected List<RPCHook> rpcHooks = new ArrayList<RPCHook>();\n",
      "\n",
      "\n",
      "    static {\n",
      "        NettyLogger.initNettyLogger();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Constructor, specifying capacity of one-way and asynchronous semaphores.\n",
      "     *\n",
      "     * @param permitsOneway Number of permits for one-way requests.\n",
      "     * @param permitsAsync Number of permits for asynchronous requests.\n",
      "     */\n",
      "    public NettyRemotingAbstract(final int permitsOneway, final int permitsAsync) {\n",
      "        this.semaphoreOneway = new Semaphore(permitsOneway, true);\n",
      "        this.semaphoreAsync = new Semaphore(permitsAsync, true);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Custom channel event listener.\n",
      "     *\n",
      "     * @return custom channel event listener if defined; null otherwise.\n",
      "     */\n",
      "    public abstract ChannelEventListener getChannelEventListener();\n",
      "\n",
      "    /**\n",
      "     * Put a netty event to the executor.\n",
      "     *\n",
      "     * @param event Netty event instance.\n",
      "     */\n",
      "    public void putNettyEvent(final NettyEvent event) {\n",
      "        this.nettyEventExecutor.putNettyEvent(event);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Entry of incoming command processing.\n",
      "     *\n",
      "     * <p>\n",
      "     * <strong>Note:</strong>\n",
      "     * The incoming remoting command may be\n",
      "     * <ul>\n",
      "     * <li>An inquiry request from a remote peer component;</li>\n",
      "     * <li>A response to a previous request issued by this very participant.</li>\n",
      "     * </ul>\n",
      "     * </p>\n",
      "     *\n",
      "     * @param ctx Channel handler context.\n",
      "     * @param msg incoming remoting command.\n",
      "     * @throws Exception if there were any error while processing the incoming command.\n",
      "     */\n",
      "    public void processMessageReceived(ChannelHandlerContext ctx, RemotingCommand msg) throws Exception {\n",
      "        final RemotingCommand cmd = msg;\n",
      "        if (cmd != null) {\n",
      "            switch (cmd.getType()) {\n",
      "                case REQUEST_COMMAND:\n",
      "                    //\u8bf7\u6c42\u5904\u7406\n",
      "                    processRequestCommand(ctx, cmd);\n",
      "                    break;\n",
      "                case RESPONSE_COMMAND:\n",
      "                    //\u54cd\u5e94\u5904\u7406\n",
      "                    processResponseCommand(ctx, cmd);\n",
      "                    break;\n",
      "                default:\n",
      "                    break;\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    protected void doBeforeRpcHooks(String addr, RemotingCommand request) {\n",
      "        if (rpcHooks.size() > 0) {\n",
      "            for (RPCHook rpcHook: rpcHooks) {\n",
      "                rpcHook.doBeforeRequest(addr, request);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    protected void doAfterRpcHooks(String addr, RemotingCommand request, RemotingCommand response) {\n",
      "        if (rpcHooks.size() > 0) {\n",
      "            for (RPCHook rpcHook: rpcHooks) {\n",
      "                rpcHook.doAfterResponse(addr, request, response);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * Process incoming request command issued by remote peer.\n",
      "     *\n",
      "     * @param ctx channel handler context.\n",
      "     * @param cmd request command.\n",
      "     */\n",
      "    public void processRequestCommand(final ChannelHandlerContext ctx, final RemotingCommand cmd) {\n",
      "        final Pair<NettyRequestProcessor, ExecutorService> matched = this.processorTable.get(cmd.getCode());\n",
      "        final Pair<NettyRequestProcessor, ExecutorService> pair = null == matched ? this.defaultRequestProcessor : matched;\n",
      "        final int opaque = cmd.getOpaque();\n",
      "\n",
      "        if (pair != null) {\n",
      "            Runnable run = new Runnable() {\n",
      "                @Override\n",
      "                public void run() {\n",
      "                    try {\n",
      "                        doBeforeRpcHooks(RemotingHelper.parseChannelRemoteAddr(ctx.channel()), cmd);\n",
      "                        final RemotingResponseCallback callback = new RemotingResponseCallback() {\n",
      "                            @Override\n",
      "                            public void callback(RemotingCommand response) {\n",
      "                                doAfterRpcHooks(RemotingHelper.parseChannelRemoteAddr(ctx.channel()), cmd, response);\n",
      "                                if (!cmd.isOnewayRPC()) {\n",
      "                                    if (response != null) {\n",
      "                                        response.setOpaque(opaque);\n",
      "                                        response.markResponseType();\n",
      "                                        try {\n",
      "                                            //Netty\u7684write\u65b9\u6cd5\u5e76\u4e0d\u76f4\u63a5\u5c06\u6d88\u606f\u5199\u5165SocketChannel\u4e2d\uff0c\u53ea\u662f\u53d1\u9001\u5230\u7f13\u51b2\u6570\u7ec4\uff0c\u901a\u8fc7flush\u5199\u5165socketChannel\n",
      "                                            ctx.writeAndFlush(response);\n",
      "                                        } catch (Throwable e) {\n",
      "                                            log.error(\"process request over, but response failed\", e);\n",
      "                                            log.error(cmd.toString());\n",
      "                                            log.error(response.toString());\n",
      "                                        }\n",
      "                                    } else {\n",
      "                                    }\n",
      "                                }\n",
      "                            }\n",
      "                        };\n",
      "                        //\u5f02\u6b65\u6d88\u606f\u5904\u7406\n",
      "                        if (pair.getObject1() instanceof AsyncNettyRequestProcessor) {\n",
      "                            AsyncNettyRequestProcessor processor = (AsyncNettyRequestProcessor)pair.getObject1();\n",
      "                            processor.asyncProcessRequest(ctx, cmd, callback);\n",
      "                        } else {\n",
      "                            //\u5176\u4ed6\u6d88\u606f\u5904\u7406\n",
      "                            NettyRequestProcessor processor = pair.getObject1();\n",
      "                            RemotingCommand response = processor.processRequest(ctx, cmd);\n",
      "                            callback.callback(response);\n",
      "                        }\n",
      "                    } catch (Throwable e) {\n",
      "                        log.error(\"process request exception\", e);\n",
      "                        log.error(cmd.toString());\n",
      "\n",
      "                        if (!cmd.isOnewayRPC()) {\n",
      "                            final RemotingCommand response = RemotingCommand.createResponseCommand(RemotingSysResponseCode.SYSTEM_ERROR,\n",
      "                                RemotingHelper.exceptionSimpleDesc(e));\n",
      "                            response.setOpaque(opaque);\n",
      "                            //\u5c06\u6570\u636e\u8fd4\u56de\u7ed9\u670d\u52a1\u8c03\u7528\u7aef\n",
      "                            ctx.writeAndFlush(response);\n",
      "                        }\n",
      "                    }\n",
      "                }\n",
      "            };\n",
      "\n",
      "            if (pair.getObject1().rejectRequest()) {\n",
      "                final RemotingCommand response = RemotingCommand.createResponseCommand(RemotingSysResponseCode.SYSTEM_BUSY,\n",
      "                    \"[REJECTREQUEST]system busy, start flow control for a while\");\n",
      "                response.setOpaque(opaque);\n",
      "                ctx.writeAndFlush(response);\n",
      "                return;\n",
      "            }\n",
      "\n",
      "            try {\n",
      "                final RequestTask requestTask = new RequestTask(run, ctx.channel(), cmd);\n",
      "                pair.getObject2().submit(requestTask);\n",
      "            } catch (RejectedExecutionException e) {\n",
      "                if ((System.currentTimeMillis() % 10000) == 0) {\n",
      "                    log.warn(RemotingHelper.parseChannelRemoteAddr(ctx.channel())\n",
      "                        + \", too many requests and system thread pool busy, RejectedExecutionException \"\n",
      "                        + pair.getObject2().toString()\n",
      "                        + \" request code: \" + cmd.getCode());\n",
      "                }\n",
      "\n",
      "                if (!cmd.isOnewayRPC()) {\n",
      "                    final RemotingCommand response = RemotingCommand.createResponseCommand(RemotingSysResponseCode.SYSTEM_BUSY,\n",
      "                        \"[OVERLOAD]system busy, start flow control for a while\");\n",
      "                    response.setOpaque(opaque);\n",
      "                    ctx.writeAndFlush(response);\n",
      "                }\n",
      "            }\n",
      "        } else {\n",
      "            String error = \" request type \" + cmd.getCode() + \" not supported\";\n",
      "            final RemotingCommand response =\n",
      "                RemotingCommand.createResponseCommand(RemotingSysResponseCode.REQUEST_CODE_NOT_SUPPORTED, error);\n",
      "            response.setOpaque(opaque);\n",
      "            ctx.writeAndFlush(response);\n",
      "            log.error(RemotingHelper.parseChannelRemoteAddr(ctx.channel()) + error);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Process response from remote peer to the previous issued requests.\n",
      "     *\n",
      "     * @param ctx channel handler context.\n",
      "     * @param cmd response command instance.\n",
      "     */\n",
      "    public void processResponseCommand(ChannelHandlerContext ctx, RemotingCommand cmd) {\n",
      "        final int opaque = cmd.getOpaque();\n",
      "        final ResponseFuture responseFuture = responseTable.get(opaque);\n",
      "        if (responseFuture != null) {\n",
      "            responseFuture.setResponseCommand(cmd);\n",
      "\n",
      "            responseTable.remove(opaque);\n",
      "\n",
      "            if (responseFuture.getInvokeCallback() != null) {\n",
      "                executeInvokeCallback(responseFuture);\n",
      "            } else {\n",
      "                responseFuture.putResponse(cmd);\n",
      "                responseFuture.release();\n",
      "            }\n",
      "        } else {\n",
      "            log.warn(\"receive response, but not matched any request, \" + RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n",
      "            log.warn(cmd.toString());\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5728callback\u7684executor\u91cc\u6267\u884c\u5bf9\u5e94\u7684callback\uff0c\u5982\u679c\u4e3a\u7a7a\uff0c\u5219\u5728\u5f53\u524d\u7ebf\u7a0b\u91cc\u8fd0\u884c\n",
      "     * \u8c03\u7528invokeCallback.operationComplete\u65b9\u6cd5\uff0coperationComplete\u65b9\u6cd5\u5728pull\uff0cquery\uff0csend\u4e09\u4e2a\u6d88\u606f\u573a\u666f\u91cc\u90fd\u6709\u5bf9\u5e94\u7684\u5b9e\u73b0\n",
      "     */\n",
      "    private void executeInvokeCallback(final ResponseFuture responseFuture) {\n",
      "        boolean runInThisThread = false;\n",
      "        ExecutorService executor = this.getCallbackExecutor();\n",
      "        if (executor != null) {\n",
      "            try {\n",
      "                executor.submit(new Runnable() {\n",
      "                    @Override\n",
      "                    public void run() {\n",
      "                        try {\n",
      "                            responseFuture.executeInvokeCallback();\n",
      "                        } catch (Throwable e) {\n",
      "                            log.warn(\"execute callback in executor exception, and callback throw\", e);\n",
      "                        } finally {\n",
      "                            responseFuture.release();\n",
      "                        }\n",
      "                    }\n",
      "                });\n",
      "            } catch (Exception e) {\n",
      "                runInThisThread = true;\n",
      "                log.warn(\"execute callback in executor exception, maybe executor busy\", e);\n",
      "            }\n",
      "        } else {\n",
      "            runInThisThread = true;\n",
      "        }\n",
      "\n",
      "        if (runInThisThread) {\n",
      "            try {\n",
      "                responseFuture.executeInvokeCallback();\n",
      "            } catch (Throwable e) {\n",
      "                log.warn(\"executeInvokeCallback Exception\", e);\n",
      "            } finally {\n",
      "                responseFuture.release();\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "\n",
      "\n",
      "    /**\n",
      "     * Custom RPC hook.\n",
      "     * Just be compatible with the previous version, use getRPCHooks instead.\n",
      "     */\n",
      "    @Deprecated\n",
      "    protected RPCHook getRPCHook() {\n",
      "        if (rpcHooks.size() > 0) {\n",
      "            return rpcHooks.get(0);\n",
      "        }\n",
      "        return null;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Custom RPC hooks.\n",
      "     *\n",
      "     * @return RPC hooks if specified; null otherwise.\n",
      "     */\n",
      "    public List<RPCHook> getRPCHooks() {\n",
      "        return rpcHooks;\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * This method specifies thread pool to use while invoking callback methods.\n",
      "     *\n",
      "     * @return Dedicated thread pool instance if specified; or null if the callback is supposed to be executed in the\n",
      "     * netty event-loop thread.\n",
      "     */\n",
      "    public abstract ExecutorService getCallbackExecutor();\n",
      "\n",
      "    /**\n",
      "     * <p>\n",
      "     * This method is periodically invoked to scan and expire deprecated request.\n",
      "     * </p>\n",
      "     */\n",
      "    public void scanResponseTable() {\n",
      "        final List<ResponseFuture> rfList = new LinkedList<ResponseFuture>();\n",
      "        Iterator<Entry<Integer, ResponseFuture>> it = this.responseTable.entrySet().iterator();\n",
      "        while (it.hasNext()) {\n",
      "            Entry<Integer, ResponseFuture> next = it.next();\n",
      "            ResponseFuture rep = next.getValue();\n",
      "\n",
      "            if ((rep.getBeginTimestamp() + rep.getTimeoutMillis() + 1000) <= System.currentTimeMillis()) {\n",
      "                rep.release();\n",
      "                it.remove();\n",
      "                rfList.add(rep);\n",
      "                log.warn(\"remove timeout request, \" + rep);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        for (ResponseFuture rf : rfList) {\n",
      "            try {\n",
      "                executeInvokeCallback(rf);\n",
      "            } catch (Throwable e) {\n",
      "                log.warn(\"scanResponseTable, operationComplete Exception\", e);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public RemotingCommand invokeSyncImpl(final Channel channel, final RemotingCommand request,\n",
      "        final long timeoutMillis)\n",
      "        throws InterruptedException, RemotingSendRequestException, RemotingTimeoutException {\n",
      "        final int opaque = request.getOpaque();\n",
      "\n",
      "        try {\n",
      "            final ResponseFuture responseFuture = new ResponseFuture(channel, opaque, timeoutMillis, null, null);\n",
      "            this.responseTable.put(opaque, responseFuture); //opaque\u770b\u4f5c\u662f\u8bf7\u6c42id\uff0c\u653e\u5165\u5230responseTable\u4e2d\u4fdd\u5b58\uff0c\u7528\u4e8e\u63a5\u6536\u5230\u6d88\u606f\u65f6\u7684\u5904\u7406\n",
      "            final SocketAddress addr = channel.remoteAddress();\n",
      "            channel.writeAndFlush(request).addListener(new ChannelFutureListener() {\n",
      "                @Override\n",
      "                public void operationComplete(ChannelFuture f) throws Exception {\n",
      "                    if (f.isSuccess()) {\n",
      "                        responseFuture.setSendRequestOK(true);\n",
      "                        return;\n",
      "                    } else {\n",
      "                        responseFuture.setSendRequestOK(false);\n",
      "                    }\n",
      "\n",
      "                    responseTable.remove(opaque);\n",
      "                    responseFuture.setCause(f.cause());\n",
      "                    responseFuture.putResponse(null);\n",
      "                    log.warn(\"send a request command to channel <\" + addr + \"> failed.\");\n",
      "                }\n",
      "            });\n",
      "\n",
      "            //\u540c\u6b65\u7b49\u5f85\u7ed3\u679c\u8fd4\u56de\uff0c\u901a\u8fc7 countDownLatch.await(timeoutMillis);\u5b9e\u73b0\uff0c\u5bf9\u5e94 responseFuture.putResponse\u4f1a\u6267\u884c\u5bf9\u5e94\u5bf9\u7684countDownLatch.countDown();\n",
      "            //\u800c\u5bf9\u5e94\u7684\u6d88\u606f\u54cd\u5e94\u5904\u7406processResponseCommand(ChannelHandlerContext ctx, RemotingCommand cmd)\u4f1a\u8c03\u7528responseFuture.putResponse\n",
      "            RemotingCommand responseCommand = responseFuture.waitResponse(timeoutMillis);\n",
      "            if (null == responseCommand) {\n",
      "                if (responseFuture.isSendRequestOK()) {\n",
      "                    throw new RemotingTimeoutException(RemotingHelper.parseSocketAddressAddr(addr), timeoutMillis,\n",
      "                        responseFuture.getCause());\n",
      "                } else {\n",
      "                    throw new RemotingSendRequestException(RemotingHelper.parseSocketAddressAddr(addr), responseFuture.getCause());\n",
      "                }\n",
      "            }\n",
      "\n",
      "            return responseCommand;\n",
      "        } finally {\n",
      "            this.responseTable.remove(opaque);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Netty\u5c01\u88c5\u5f02\u6b65\u53d1\u9001\u6d88\u606f\uff0c\u901a\u8fc7ResponseFuture\u5f02\u6b65\u8fd4\u56de\u6d88\u606f\n",
      "     * @param channel\n",
      "     * @param request\n",
      "     * @param timeoutMillis\n",
      "     * @param invokeCallback\n",
      "     * @throws InterruptedException\n",
      "     * @throws RemotingTooMuchRequestException\n",
      "     * @throws RemotingTimeoutException\n",
      "     * @throws RemotingSendRequestException\n",
      "     */\n",
      "    public void invokeAsyncImpl(final Channel channel, final RemotingCommand request, final long timeoutMillis,\n",
      "        final InvokeCallback invokeCallback)\n",
      "        throws InterruptedException, RemotingTooMuchRequestException, RemotingTimeoutException, RemotingSendRequestException {\n",
      "        long beginStartTime = System.currentTimeMillis();\n",
      "        final int opaque = request.getOpaque();\n",
      "        //\u4fe1\u53f7\u91cf\u4f7f\u7528\u6765\u5904\u7406\u8d85\u65f6\u4e8b\u4ef6\uff0csemaphoreAsync\u7684\u503c\u9ed8\u8ba4\u662f64\n",
      "        boolean acquired = this.semaphoreAsync.tryAcquire(timeoutMillis, TimeUnit.MILLISECONDS);\n",
      "        if (acquired) {\n",
      "            final SemaphoreReleaseOnlyOnce once = new SemaphoreReleaseOnlyOnce(this.semaphoreAsync);\n",
      "            long costTime = System.currentTimeMillis() - beginStartTime;\n",
      "            if (timeoutMillis < costTime) {\n",
      "                once.release();\n",
      "                throw new RemotingTimeoutException(\"invokeAsyncImpl call timeout\");\n",
      "            }\n",
      "\n",
      "            final ResponseFuture responseFuture = new ResponseFuture(channel, opaque, timeoutMillis - costTime, invokeCallback, once);\n",
      "            this.responseTable.put(opaque, responseFuture);\n",
      "            try {\n",
      "                channel.writeAndFlush(request).addListener(new ChannelFutureListener() {\n",
      "                    @Override\n",
      "                    public void operationComplete(ChannelFuture f) throws Exception {\n",
      "                        if (f.isSuccess()) {\n",
      "                            responseFuture.setSendRequestOK(true);\n",
      "                            return;\n",
      "                        }\n",
      "                        requestFail(opaque);\n",
      "                        log.warn(\"send a request command to channel <{}> failed.\", RemotingHelper.parseChannelRemoteAddr(channel));\n",
      "                    }\n",
      "                });\n",
      "            } catch (Exception e) {\n",
      "                responseFuture.release();\n",
      "                log.warn(\"send a request command to channel <\" + RemotingHelper.parseChannelRemoteAddr(channel) + \"> Exception\", e);\n",
      "                throw new RemotingSendRequestException(RemotingHelper.parseChannelRemoteAddr(channel), e);\n",
      "            }\n",
      "        } else {\n",
      "            if (timeoutMillis <= 0) {\n",
      "                throw new RemotingTooMuchRequestException(\"invokeAsyncImpl invoke too fast\");\n",
      "            } else {\n",
      "                String info =\n",
      "                    String.format(\"invokeAsyncImpl tryAcquire semaphore timeout, %dms, waiting thread nums: %d semaphoreAsyncValue: %d\",\n",
      "                        timeoutMillis,\n",
      "                        this.semaphoreAsync.getQueueLength(),\n",
      "                        this.semaphoreAsync.availablePermits()\n",
      "                    );\n",
      "                log.warn(info);\n",
      "                throw new RemotingTimeoutException(info);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private void requestFail(final int opaque) {\n",
      "        ResponseFuture responseFuture = responseTable.remove(opaque);\n",
      "        if (responseFuture != null) {\n",
      "            responseFuture.setSendRequestOK(false);\n",
      "            responseFuture.putResponse(null);\n",
      "            try {\n",
      "                executeInvokeCallback(responseFuture);\n",
      "            } catch (Throwable e) {\n",
      "                log.warn(\"execute callback in requestFail, and callback throw\", e);\n",
      "            } finally {\n",
      "                responseFuture.release();\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * mark the request of the specified channel as fail and to invoke fail callback immediately\n",
      "     * @param channel the channel which is close already\n",
      "     */\n",
      "    protected void failFast(final Channel channel) {\n",
      "        Iterator<Entry<Integer, ResponseFuture>> it = responseTable.entrySet().iterator();\n",
      "        while (it.hasNext()) {\n",
      "            Entry<Integer, ResponseFuture> entry = it.next();\n",
      "            if (entry.getValue().getProcessChannel() == channel) {\n",
      "                Integer opaque = entry.getKey();\n",
      "                if (opaque != null) {\n",
      "                    requestFail(opaque);\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5355\u5411\u53d1\u9001\u6d88\u606f\uff0c\u4e0d\u5904\u7406response\n",
      "     * @param channel\n",
      "     * @param request\n",
      "     * @param timeoutMillis\n",
      "     * @throws InterruptedException\n",
      "     * @throws RemotingTooMuchRequestException\n",
      "     * @throws RemotingTimeoutException\n",
      "     * @throws RemotingSendRequestException\n",
      "     */\n",
      "    public void invokeOnewayImpl(final Channel channel, final RemotingCommand request, final long timeoutMillis)\n",
      "        throws InterruptedException, RemotingTooMuchRequestException, RemotingTimeoutException, RemotingSendRequestException {\n",
      "        request.markOnewayRPC();\n",
      "        boolean acquired = this.semaphoreOneway.tryAcquire(timeoutMillis, TimeUnit.MILLISECONDS);\n",
      "        if (acquired) {\n",
      "            //\u901a\u8fc7\u4fe1\u53f7\u91cf\u5904\u7406\u4e00\u6b21\u53d1\u9001\u6d88\u606f\u7684\u6d88\u606f\u6570\n",
      "            final SemaphoreReleaseOnlyOnce once = new SemaphoreReleaseOnlyOnce(this.semaphoreOneway);\n",
      "            try {\n",
      "                channel.writeAndFlush(request).addListener(new ChannelFutureListener() {\n",
      "                    @Override\n",
      "                    public void operationComplete(ChannelFuture f) throws Exception {\n",
      "                        once.release();\n",
      "                        if (!f.isSuccess()) {\n",
      "                            log.warn(\"send a request command to channel <\" + channel.remoteAddress() + \"> failed.\");\n",
      "                        }\n",
      "                    }\n",
      "                });\n",
      "            } catch (Exception e) {\n",
      "                once.release();\n",
      "                log.warn(\"write send a request command to channel <\" + channel.remoteAddress() + \"> failed.\");\n",
      "                throw new RemotingSendRequestException(RemotingHelper.parseChannelRemoteAddr(channel), e);\n",
      "            }\n",
      "        } else {\n",
      "            if (timeoutMillis <= 0) {\n",
      "                throw new RemotingTooMuchRequestException(\"invokeOnewayImpl invoke too fast\");\n",
      "            } else {\n",
      "                String info = String.format(\n",
      "                    \"invokeOnewayImpl tryAcquire semaphore timeout, %dms, waiting thread nums: %d semaphoreAsyncValue: %d\",\n",
      "                    timeoutMillis,\n",
      "                    this.semaphoreOneway.getQueueLength(),\n",
      "                    this.semaphoreOneway.availablePermits()\n",
      "                );\n",
      "                log.warn(info);\n",
      "                throw new RemotingTimeoutException(info);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    //\u901a\u8fc7\u5f53\u524d\u7ebf\u7a0b\uff0c\u76d1\u542cNetty\u94fe\u63a5\u65ad\u5f00\u7b49\u4e8b\u4ef6\uff0c\u9700\u8981\u8c03\u7528putNettyEvent\u653e\u5165\u76f8\u5173\u4e8b\u4ef6\n",
      "    class NettyEventExecutor extends ServiceThread {\n",
      "        private final LinkedBlockingQueue<NettyEvent> eventQueue = new LinkedBlockingQueue<NettyEvent>();\n",
      "        private final int maxSize = 10000;\n",
      "\n",
      "        public void putNettyEvent(final NettyEvent event) {\n",
      "            if (this.eventQueue.size() <= maxSize) {\n",
      "                this.eventQueue.add(event);\n",
      "            } else {\n",
      "                log.warn(\"event queue size[{}] enough, so drop this event {}\", this.eventQueue.size(), event.toString());\n",
      "            }\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public void run() {\n",
      "            log.info(this.getServiceName() + \" service started\");\n",
      "\n",
      "            final ChannelEventListener listener = NettyRemotingAbstract.this.getChannelEventListener();\n",
      "\n",
      "            while (!this.isStopped()) {\n",
      "                try {\n",
      "                    NettyEvent event = this.eventQueue.poll(3000, TimeUnit.MILLISECONDS);\n",
      "                    if (event != null && listener != null) {\n",
      "                        switch (event.getType()) {\n",
      "                            case IDLE:\n",
      "                                listener.onChannelIdle(event.getRemoteAddr(), event.getChannel());\n",
      "                                break;\n",
      "                            case CLOSE:\n",
      "                                listener.onChannelClose(event.getRemoteAddr(), event.getChannel());\n",
      "                                break;\n",
      "                            case CONNECT:\n",
      "                                listener.onChannelConnect(event.getRemoteAddr(), event.getChannel());\n",
      "                                break;\n",
      "                            case EXCEPTION:\n",
      "                                listener.onChannelException(event.getRemoteAddr(), event.getChannel());\n",
      "                                break;\n",
      "                            default:\n",
      "                                break;\n",
      "\n",
      "                        }\n",
      "                    }\n",
      "                } catch (Exception e) {\n",
      "                    log.warn(this.getServiceName() + \" service has exception. \", e);\n",
      "                }\n",
      "            }\n",
      "\n",
      "            log.info(this.getServiceName() + \" service end\");\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public String getServiceName() {\n",
      "            return NettyEventExecutor.class.getSimpleName();\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.remoting.netty;\n",
      "\n",
      "import java.util.concurrent.Semaphore;\n",
      "import org.apache.rocketmq.remoting.InvokeCallback;\n",
      "import org.apache.rocketmq.remoting.common.SemaphoreReleaseOnlyOnce;\n",
      "import org.apache.rocketmq.remoting.protocol.RemotingCommand;\n",
      "import org.junit.Test;\n",
      "import org.junit.runner.RunWith;\n",
      "import org.mockito.Spy;\n",
      "import org.mockito.junit.MockitoJUnitRunner;\n",
      "\n",
      "import static org.assertj.core.api.Assertions.assertThat;\n",
      "import static org.junit.Assert.assertNull;\n",
      "import static org.junit.Assert.assertTrue;\n",
      "import static org.mockito.ArgumentMatchers.notNull;\n",
      "import static org.mockito.Mockito.when;\n",
      "\n",
      "@RunWith(MockitoJUnitRunner.class)\n",
      "public class NettyRemotingAbstractTest {\n",
      "    @Spy\n",
      "    private NettyRemotingAbstract remotingAbstract = new NettyRemotingClient(new NettyClientConfig());\n",
      "\n",
      "    @Test\n",
      "    public void testProcessResponseCommand() throws InterruptedException {\n",
      "        final Semaphore semaphore = new Semaphore(0);\n",
      "        ResponseFuture responseFuture = new ResponseFuture(null,1, 3000, new InvokeCallback() {\n",
      "            @Override\n",
      "            public void operationComplete(final ResponseFuture responseFuture) {\n",
      "                assertThat(semaphore.availablePermits()).isEqualTo(0);\n",
      "            }\n",
      "        }, new SemaphoreReleaseOnlyOnce(semaphore));\n",
      "\n",
      "        remotingAbstract.responseTable.putIfAbsent(1, responseFuture);\n",
      "\n",
      "        RemotingCommand response = RemotingCommand.createResponseCommand(0, \"Foo\");\n",
      "        response.setOpaque(1);\n",
      "        remotingAbstract.processResponseCommand(null, response);\n",
      "\n",
      "        // Acquire the release permit after call back\n",
      "        semaphore.acquire(1);\n",
      "        assertThat(semaphore.availablePermits()).isEqualTo(0);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testProcessResponseCommand_NullCallBack() throws InterruptedException {\n",
      "        final Semaphore semaphore = new Semaphore(0);\n",
      "        ResponseFuture responseFuture = new ResponseFuture(null,1, 3000, null,\n",
      "            new SemaphoreReleaseOnlyOnce(semaphore));\n",
      "\n",
      "        remotingAbstract.responseTable.putIfAbsent(1, responseFuture);\n",
      "\n",
      "        RemotingCommand response = RemotingCommand.createResponseCommand(0, \"Foo\");\n",
      "        response.setOpaque(1);\n",
      "        remotingAbstract.processResponseCommand(null, response);\n",
      "\n",
      "        assertThat(semaphore.availablePermits()).isEqualTo(1);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testProcessResponseCommand_RunCallBackInCurrentThread() throws InterruptedException {\n",
      "        final Semaphore semaphore = new Semaphore(0);\n",
      "        ResponseFuture responseFuture = new ResponseFuture(null,1, 3000, new InvokeCallback() {\n",
      "            @Override\n",
      "            public void operationComplete(final ResponseFuture responseFuture) {\n",
      "                assertThat(semaphore.availablePermits()).isEqualTo(0);\n",
      "            }\n",
      "        }, new SemaphoreReleaseOnlyOnce(semaphore));\n",
      "\n",
      "        remotingAbstract.responseTable.putIfAbsent(1, responseFuture);\n",
      "        when(remotingAbstract.getCallbackExecutor()).thenReturn(null);\n",
      "\n",
      "        RemotingCommand response = RemotingCommand.createResponseCommand(0, \"Foo\");\n",
      "        response.setOpaque(1);\n",
      "        remotingAbstract.processResponseCommand(null, response);\n",
      "\n",
      "        // Acquire the release permit after call back finished in current thread\n",
      "        semaphore.acquire(1);\n",
      "        assertThat(semaphore.availablePermits()).isEqualTo(0);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testScanResponseTable() {\n",
      "        int dummyId = 1;\n",
      "        // mock timeout\n",
      "        ResponseFuture responseFuture = new ResponseFuture(null,dummyId, -1000, new InvokeCallback() {\n",
      "            @Override\n",
      "            public void operationComplete(final ResponseFuture responseFuture) {\n",
      "            }\n",
      "        }, null);\n",
      "        remotingAbstract.responseTable.putIfAbsent(dummyId, responseFuture);\n",
      "        remotingAbstract.scanResponseTable();\n",
      "        assertNull(remotingAbstract.responseTable.get(dummyId));\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "NettyRemotingAbstract::::getChannelEventListener()": [
        126,
        126
      ],
      "NettyRemotingAbstract::::putNettyEvent(org.apache.rocketmq.remoting.netty.NettyEvent)": [
        133,
        135
      ],
      "NettyRemotingAbstract::::doBeforeRpcHooks(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand)": [
        171,
        177
      ],
      "NettyRemotingAbstract::::doAfterRpcHooks(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,org.apache.rocketmq.remoting.protocol.RemotingCommand)": [
        179,
        185
      ],
      "NettyRemotingAbstract::::executeInvokeCallback(org.apache.rocketmq.remoting.netty.ResponseFuture)": [
        317,
        351
      ],
      "NettyRemotingAbstract::::getRPCHook()": [
        359,
        365
      ],
      "NettyRemotingAbstract::::getRPCHooks()": [
        372,
        374
      ],
      "NettyRemotingAbstract::::getCallbackExecutor()": [
        383,
        383
      ],
      "NettyRemotingAbstract::::scanResponseTable()": [
        390,
        412
      ],
      "NettyRemotingAbstract::::requestFail(int)": [
        519,
        532
      ],
      "NettyRemotingAbstract.NettyEventExecutor::::putNettyEvent(org.apache.rocketmq.remoting.netty.NettyEvent)": [
        604,
        610
      ],
      "NettyRemotingAbstract.NettyEventExecutor::::run()": [
        612,
        646
      ],
      "NettyRemotingAbstract.NettyEventExecutor::::getServiceName()": [
        648,
        651
      ]
    },
    "test_method_lines_dic": {
      "NettyRemotingAbstractTest::::testProcessResponseCommand()": [
        39,
        58
      ],
      "NettyRemotingAbstractTest::::testProcessResponseCommand_NullCallBack()": [
        60,
        73
      ],
      "NettyRemotingAbstractTest::::testProcessResponseCommand_RunCallBackInCurrentThread()": [
        75,
        95
      ],
      "NettyRemotingAbstractTest::::testScanResponseTable()": [
        97,
        109
      ]
    },
    "reverse_method_lines_dic": {
      "126": "NettyRemotingAbstract::::getChannelEventListener()",
      "133": "NettyRemotingAbstract::::putNettyEvent(org.apache.rocketmq.remoting.netty.NettyEvent)",
      "134": "NettyRemotingAbstract::::putNettyEvent(org.apache.rocketmq.remoting.netty.NettyEvent)",
      "135": "NettyRemotingAbstract::::putNettyEvent(org.apache.rocketmq.remoting.netty.NettyEvent)",
      "171": "NettyRemotingAbstract::::doBeforeRpcHooks(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "172": "NettyRemotingAbstract::::doBeforeRpcHooks(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "173": "NettyRemotingAbstract::::doBeforeRpcHooks(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "174": "NettyRemotingAbstract::::doBeforeRpcHooks(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "175": "NettyRemotingAbstract::::doBeforeRpcHooks(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "176": "NettyRemotingAbstract::::doBeforeRpcHooks(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "177": "NettyRemotingAbstract::::doBeforeRpcHooks(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "179": "NettyRemotingAbstract::::doAfterRpcHooks(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "180": "NettyRemotingAbstract::::doAfterRpcHooks(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "181": "NettyRemotingAbstract::::doAfterRpcHooks(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "182": "NettyRemotingAbstract::::doAfterRpcHooks(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "183": "NettyRemotingAbstract::::doAfterRpcHooks(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "184": "NettyRemotingAbstract::::doAfterRpcHooks(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "185": "NettyRemotingAbstract::::doAfterRpcHooks(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "317": "NettyRemotingAbstract::::executeInvokeCallback(org.apache.rocketmq.remoting.netty.ResponseFuture)",
      "318": "NettyRemotingAbstract::::executeInvokeCallback(org.apache.rocketmq.remoting.netty.ResponseFuture)",
      "319": "NettyRemotingAbstract::::executeInvokeCallback(org.apache.rocketmq.remoting.netty.ResponseFuture)",
      "320": "NettyRemotingAbstract::::executeInvokeCallback(org.apache.rocketmq.remoting.netty.ResponseFuture)",
      "321": "NettyRemotingAbstract::::executeInvokeCallback(org.apache.rocketmq.remoting.netty.ResponseFuture)",
      "322": "NettyRemotingAbstract::::executeInvokeCallback(org.apache.rocketmq.remoting.netty.ResponseFuture)",
      "323": "NettyRemotingAbstract::::executeInvokeCallback(org.apache.rocketmq.remoting.netty.ResponseFuture)",
      "324": "NettyRemotingAbstract::::executeInvokeCallback(org.apache.rocketmq.remoting.netty.ResponseFuture)",
      "325": "NettyRemotingAbstract::::executeInvokeCallback(org.apache.rocketmq.remoting.netty.ResponseFuture)",
      "326": "NettyRemotingAbstract::::executeInvokeCallback(org.apache.rocketmq.remoting.netty.ResponseFuture)",
      "327": "NettyRemotingAbstract::::executeInvokeCallback(org.apache.rocketmq.remoting.netty.ResponseFuture)",
      "328": "NettyRemotingAbstract::::executeInvokeCallback(org.apache.rocketmq.remoting.netty.ResponseFuture)",
      "329": "NettyRemotingAbstract::::executeInvokeCallback(org.apache.rocketmq.remoting.netty.ResponseFuture)",
      "330": "NettyRemotingAbstract::::executeInvokeCallback(org.apache.rocketmq.remoting.netty.ResponseFuture)",
      "331": "NettyRemotingAbstract::::executeInvokeCallback(org.apache.rocketmq.remoting.netty.ResponseFuture)",
      "332": "NettyRemotingAbstract::::executeInvokeCallback(org.apache.rocketmq.remoting.netty.ResponseFuture)",
      "333": "NettyRemotingAbstract::::executeInvokeCallback(org.apache.rocketmq.remoting.netty.ResponseFuture)",
      "334": "NettyRemotingAbstract::::executeInvokeCallback(org.apache.rocketmq.remoting.netty.ResponseFuture)",
      "335": "NettyRemotingAbstract::::executeInvokeCallback(org.apache.rocketmq.remoting.netty.ResponseFuture)",
      "336": "NettyRemotingAbstract::::executeInvokeCallback(org.apache.rocketmq.remoting.netty.ResponseFuture)",
      "337": "NettyRemotingAbstract::::executeInvokeCallback(org.apache.rocketmq.remoting.netty.ResponseFuture)",
      "338": "NettyRemotingAbstract::::executeInvokeCallback(org.apache.rocketmq.remoting.netty.ResponseFuture)",
      "339": "NettyRemotingAbstract::::executeInvokeCallback(org.apache.rocketmq.remoting.netty.ResponseFuture)",
      "340": "NettyRemotingAbstract::::executeInvokeCallback(org.apache.rocketmq.remoting.netty.ResponseFuture)",
      "341": "NettyRemotingAbstract::::executeInvokeCallback(org.apache.rocketmq.remoting.netty.ResponseFuture)",
      "342": "NettyRemotingAbstract::::executeInvokeCallback(org.apache.rocketmq.remoting.netty.ResponseFuture)",
      "343": "NettyRemotingAbstract::::executeInvokeCallback(org.apache.rocketmq.remoting.netty.ResponseFuture)",
      "344": "NettyRemotingAbstract::::executeInvokeCallback(org.apache.rocketmq.remoting.netty.ResponseFuture)",
      "345": "NettyRemotingAbstract::::executeInvokeCallback(org.apache.rocketmq.remoting.netty.ResponseFuture)",
      "346": "NettyRemotingAbstract::::executeInvokeCallback(org.apache.rocketmq.remoting.netty.ResponseFuture)",
      "347": "NettyRemotingAbstract::::executeInvokeCallback(org.apache.rocketmq.remoting.netty.ResponseFuture)",
      "348": "NettyRemotingAbstract::::executeInvokeCallback(org.apache.rocketmq.remoting.netty.ResponseFuture)",
      "349": "NettyRemotingAbstract::::executeInvokeCallback(org.apache.rocketmq.remoting.netty.ResponseFuture)",
      "350": "NettyRemotingAbstract::::executeInvokeCallback(org.apache.rocketmq.remoting.netty.ResponseFuture)",
      "351": "NettyRemotingAbstract::::executeInvokeCallback(org.apache.rocketmq.remoting.netty.ResponseFuture)",
      "359": "NettyRemotingAbstract::::getRPCHook()",
      "360": "NettyRemotingAbstract::::getRPCHook()",
      "361": "NettyRemotingAbstract::::getRPCHook()",
      "362": "NettyRemotingAbstract::::getRPCHook()",
      "363": "NettyRemotingAbstract::::getRPCHook()",
      "364": "NettyRemotingAbstract::::getRPCHook()",
      "365": "NettyRemotingAbstract::::getRPCHook()",
      "372": "NettyRemotingAbstract::::getRPCHooks()",
      "373": "NettyRemotingAbstract::::getRPCHooks()",
      "374": "NettyRemotingAbstract::::getRPCHooks()",
      "383": "NettyRemotingAbstract::::getCallbackExecutor()",
      "390": "NettyRemotingAbstract::::scanResponseTable()",
      "391": "NettyRemotingAbstract::::scanResponseTable()",
      "392": "NettyRemotingAbstract::::scanResponseTable()",
      "393": "NettyRemotingAbstract::::scanResponseTable()",
      "394": "NettyRemotingAbstract::::scanResponseTable()",
      "395": "NettyRemotingAbstract::::scanResponseTable()",
      "396": "NettyRemotingAbstract::::scanResponseTable()",
      "397": "NettyRemotingAbstract::::scanResponseTable()",
      "398": "NettyRemotingAbstract::::scanResponseTable()",
      "399": "NettyRemotingAbstract::::scanResponseTable()",
      "400": "NettyRemotingAbstract::::scanResponseTable()",
      "401": "NettyRemotingAbstract::::scanResponseTable()",
      "402": "NettyRemotingAbstract::::scanResponseTable()",
      "403": "NettyRemotingAbstract::::scanResponseTable()",
      "404": "NettyRemotingAbstract::::scanResponseTable()",
      "405": "NettyRemotingAbstract::::scanResponseTable()",
      "406": "NettyRemotingAbstract::::scanResponseTable()",
      "407": "NettyRemotingAbstract::::scanResponseTable()",
      "408": "NettyRemotingAbstract::::scanResponseTable()",
      "409": "NettyRemotingAbstract::::scanResponseTable()",
      "410": "NettyRemotingAbstract::::scanResponseTable()",
      "411": "NettyRemotingAbstract::::scanResponseTable()",
      "412": "NettyRemotingAbstract::::scanResponseTable()",
      "519": "NettyRemotingAbstract::::requestFail(int)",
      "520": "NettyRemotingAbstract::::requestFail(int)",
      "521": "NettyRemotingAbstract::::requestFail(int)",
      "522": "NettyRemotingAbstract::::requestFail(int)",
      "523": "NettyRemotingAbstract::::requestFail(int)",
      "524": "NettyRemotingAbstract::::requestFail(int)",
      "525": "NettyRemotingAbstract::::requestFail(int)",
      "526": "NettyRemotingAbstract::::requestFail(int)",
      "527": "NettyRemotingAbstract::::requestFail(int)",
      "528": "NettyRemotingAbstract::::requestFail(int)",
      "529": "NettyRemotingAbstract::::requestFail(int)",
      "530": "NettyRemotingAbstract::::requestFail(int)",
      "531": "NettyRemotingAbstract::::requestFail(int)",
      "532": "NettyRemotingAbstract::::requestFail(int)",
      "604": "NettyRemotingAbstract.NettyEventExecutor::::putNettyEvent(org.apache.rocketmq.remoting.netty.NettyEvent)",
      "605": "NettyRemotingAbstract.NettyEventExecutor::::putNettyEvent(org.apache.rocketmq.remoting.netty.NettyEvent)",
      "606": "NettyRemotingAbstract.NettyEventExecutor::::putNettyEvent(org.apache.rocketmq.remoting.netty.NettyEvent)",
      "607": "NettyRemotingAbstract.NettyEventExecutor::::putNettyEvent(org.apache.rocketmq.remoting.netty.NettyEvent)",
      "608": "NettyRemotingAbstract.NettyEventExecutor::::putNettyEvent(org.apache.rocketmq.remoting.netty.NettyEvent)",
      "609": "NettyRemotingAbstract.NettyEventExecutor::::putNettyEvent(org.apache.rocketmq.remoting.netty.NettyEvent)",
      "610": "NettyRemotingAbstract.NettyEventExecutor::::putNettyEvent(org.apache.rocketmq.remoting.netty.NettyEvent)",
      "612": "NettyRemotingAbstract.NettyEventExecutor::::run()",
      "613": "NettyRemotingAbstract.NettyEventExecutor::::run()",
      "614": "NettyRemotingAbstract.NettyEventExecutor::::run()",
      "615": "NettyRemotingAbstract.NettyEventExecutor::::run()",
      "616": "NettyRemotingAbstract.NettyEventExecutor::::run()",
      "617": "NettyRemotingAbstract.NettyEventExecutor::::run()",
      "618": "NettyRemotingAbstract.NettyEventExecutor::::run()",
      "619": "NettyRemotingAbstract.NettyEventExecutor::::run()",
      "620": "NettyRemotingAbstract.NettyEventExecutor::::run()",
      "621": "NettyRemotingAbstract.NettyEventExecutor::::run()",
      "622": "NettyRemotingAbstract.NettyEventExecutor::::run()",
      "623": "NettyRemotingAbstract.NettyEventExecutor::::run()",
      "624": "NettyRemotingAbstract.NettyEventExecutor::::run()",
      "625": "NettyRemotingAbstract.NettyEventExecutor::::run()",
      "626": "NettyRemotingAbstract.NettyEventExecutor::::run()",
      "627": "NettyRemotingAbstract.NettyEventExecutor::::run()",
      "628": "NettyRemotingAbstract.NettyEventExecutor::::run()",
      "629": "NettyRemotingAbstract.NettyEventExecutor::::run()",
      "630": "NettyRemotingAbstract.NettyEventExecutor::::run()",
      "631": "NettyRemotingAbstract.NettyEventExecutor::::run()",
      "632": "NettyRemotingAbstract.NettyEventExecutor::::run()",
      "633": "NettyRemotingAbstract.NettyEventExecutor::::run()",
      "634": "NettyRemotingAbstract.NettyEventExecutor::::run()",
      "635": "NettyRemotingAbstract.NettyEventExecutor::::run()",
      "636": "NettyRemotingAbstract.NettyEventExecutor::::run()",
      "637": "NettyRemotingAbstract.NettyEventExecutor::::run()",
      "638": "NettyRemotingAbstract.NettyEventExecutor::::run()",
      "639": "NettyRemotingAbstract.NettyEventExecutor::::run()",
      "640": "NettyRemotingAbstract.NettyEventExecutor::::run()",
      "641": "NettyRemotingAbstract.NettyEventExecutor::::run()",
      "642": "NettyRemotingAbstract.NettyEventExecutor::::run()",
      "643": "NettyRemotingAbstract.NettyEventExecutor::::run()",
      "644": "NettyRemotingAbstract.NettyEventExecutor::::run()",
      "645": "NettyRemotingAbstract.NettyEventExecutor::::run()",
      "646": "NettyRemotingAbstract.NettyEventExecutor::::run()",
      "648": "NettyRemotingAbstract.NettyEventExecutor::::getServiceName()",
      "649": "NettyRemotingAbstract.NettyEventExecutor::::getServiceName()",
      "650": "NettyRemotingAbstract.NettyEventExecutor::::getServiceName()",
      "651": "NettyRemotingAbstract.NettyEventExecutor::::getServiceName()"
    },
    "test_reverse_method_lines_dic": {
      "39": "NettyRemotingAbstractTest::::testProcessResponseCommand()",
      "40": "NettyRemotingAbstractTest::::testProcessResponseCommand()",
      "41": "NettyRemotingAbstractTest::::testProcessResponseCommand()",
      "42": "NettyRemotingAbstractTest::::testProcessResponseCommand()",
      "43": "NettyRemotingAbstractTest::::testProcessResponseCommand()",
      "44": "NettyRemotingAbstractTest::::testProcessResponseCommand()",
      "45": "NettyRemotingAbstractTest::::testProcessResponseCommand()",
      "46": "NettyRemotingAbstractTest::::testProcessResponseCommand()",
      "47": "NettyRemotingAbstractTest::::testProcessResponseCommand()",
      "48": "NettyRemotingAbstractTest::::testProcessResponseCommand()",
      "49": "NettyRemotingAbstractTest::::testProcessResponseCommand()",
      "50": "NettyRemotingAbstractTest::::testProcessResponseCommand()",
      "51": "NettyRemotingAbstractTest::::testProcessResponseCommand()",
      "52": "NettyRemotingAbstractTest::::testProcessResponseCommand()",
      "53": "NettyRemotingAbstractTest::::testProcessResponseCommand()",
      "54": "NettyRemotingAbstractTest::::testProcessResponseCommand()",
      "55": "NettyRemotingAbstractTest::::testProcessResponseCommand()",
      "56": "NettyRemotingAbstractTest::::testProcessResponseCommand()",
      "57": "NettyRemotingAbstractTest::::testProcessResponseCommand()",
      "58": "NettyRemotingAbstractTest::::testProcessResponseCommand()",
      "60": "NettyRemotingAbstractTest::::testProcessResponseCommand_NullCallBack()",
      "61": "NettyRemotingAbstractTest::::testProcessResponseCommand_NullCallBack()",
      "62": "NettyRemotingAbstractTest::::testProcessResponseCommand_NullCallBack()",
      "63": "NettyRemotingAbstractTest::::testProcessResponseCommand_NullCallBack()",
      "64": "NettyRemotingAbstractTest::::testProcessResponseCommand_NullCallBack()",
      "65": "NettyRemotingAbstractTest::::testProcessResponseCommand_NullCallBack()",
      "66": "NettyRemotingAbstractTest::::testProcessResponseCommand_NullCallBack()",
      "67": "NettyRemotingAbstractTest::::testProcessResponseCommand_NullCallBack()",
      "68": "NettyRemotingAbstractTest::::testProcessResponseCommand_NullCallBack()",
      "69": "NettyRemotingAbstractTest::::testProcessResponseCommand_NullCallBack()",
      "70": "NettyRemotingAbstractTest::::testProcessResponseCommand_NullCallBack()",
      "71": "NettyRemotingAbstractTest::::testProcessResponseCommand_NullCallBack()",
      "72": "NettyRemotingAbstractTest::::testProcessResponseCommand_NullCallBack()",
      "73": "NettyRemotingAbstractTest::::testProcessResponseCommand_NullCallBack()",
      "75": "NettyRemotingAbstractTest::::testProcessResponseCommand_RunCallBackInCurrentThread()",
      "76": "NettyRemotingAbstractTest::::testProcessResponseCommand_RunCallBackInCurrentThread()",
      "77": "NettyRemotingAbstractTest::::testProcessResponseCommand_RunCallBackInCurrentThread()",
      "78": "NettyRemotingAbstractTest::::testProcessResponseCommand_RunCallBackInCurrentThread()",
      "79": "NettyRemotingAbstractTest::::testProcessResponseCommand_RunCallBackInCurrentThread()",
      "80": "NettyRemotingAbstractTest::::testProcessResponseCommand_RunCallBackInCurrentThread()",
      "81": "NettyRemotingAbstractTest::::testProcessResponseCommand_RunCallBackInCurrentThread()",
      "82": "NettyRemotingAbstractTest::::testProcessResponseCommand_RunCallBackInCurrentThread()",
      "83": "NettyRemotingAbstractTest::::testProcessResponseCommand_RunCallBackInCurrentThread()",
      "84": "NettyRemotingAbstractTest::::testProcessResponseCommand_RunCallBackInCurrentThread()",
      "85": "NettyRemotingAbstractTest::::testProcessResponseCommand_RunCallBackInCurrentThread()",
      "86": "NettyRemotingAbstractTest::::testProcessResponseCommand_RunCallBackInCurrentThread()",
      "87": "NettyRemotingAbstractTest::::testProcessResponseCommand_RunCallBackInCurrentThread()",
      "88": "NettyRemotingAbstractTest::::testProcessResponseCommand_RunCallBackInCurrentThread()",
      "89": "NettyRemotingAbstractTest::::testProcessResponseCommand_RunCallBackInCurrentThread()",
      "90": "NettyRemotingAbstractTest::::testProcessResponseCommand_RunCallBackInCurrentThread()",
      "91": "NettyRemotingAbstractTest::::testProcessResponseCommand_RunCallBackInCurrentThread()",
      "92": "NettyRemotingAbstractTest::::testProcessResponseCommand_RunCallBackInCurrentThread()",
      "93": "NettyRemotingAbstractTest::::testProcessResponseCommand_RunCallBackInCurrentThread()",
      "94": "NettyRemotingAbstractTest::::testProcessResponseCommand_RunCallBackInCurrentThread()",
      "95": "NettyRemotingAbstractTest::::testProcessResponseCommand_RunCallBackInCurrentThread()",
      "97": "NettyRemotingAbstractTest::::testScanResponseTable()",
      "98": "NettyRemotingAbstractTest::::testScanResponseTable()",
      "99": "NettyRemotingAbstractTest::::testScanResponseTable()",
      "100": "NettyRemotingAbstractTest::::testScanResponseTable()",
      "101": "NettyRemotingAbstractTest::::testScanResponseTable()",
      "102": "NettyRemotingAbstractTest::::testScanResponseTable()",
      "103": "NettyRemotingAbstractTest::::testScanResponseTable()",
      "104": "NettyRemotingAbstractTest::::testScanResponseTable()",
      "105": "NettyRemotingAbstractTest::::testScanResponseTable()",
      "106": "NettyRemotingAbstractTest::::testScanResponseTable()",
      "107": "NettyRemotingAbstractTest::::testScanResponseTable()",
      "108": "NettyRemotingAbstractTest::::testScanResponseTable()",
      "109": "NettyRemotingAbstractTest::::testScanResponseTable()"
    },
    "tests": [
      {
        "test_lines": [
          39,
          58
        ],
        "covered_lines": [
          60,
          75,
          82,
          88,
          103,
          107,
          108,
          116,
          117,
          118,
          119,
          294,
          295,
          296,
          297,
          299,
          301,
          302,
          311,
          318,
          319,
          320,
          322,
          326,
          330,
          331,
          332,
          337,
          342,
          351,
          600,
          601,
          602,
          650
        ]
      },
      {
        "test_lines": [
          60,
          73
        ],
        "covered_lines": [
          60,
          75,
          82,
          88,
          103,
          107,
          108,
          116,
          117,
          118,
          119,
          294,
          295,
          296,
          297,
          299,
          301,
          304,
          305,
          311,
          600,
          601,
          602,
          650
        ]
      },
      {
        "test_lines": [
          75,
          95
        ],
        "covered_lines": [
          60,
          75,
          82,
          88,
          103,
          107,
          108,
          116,
          117,
          118,
          119,
          294,
          295,
          296,
          297,
          299,
          301,
          302,
          311,
          318,
          319,
          320,
          339,
          342,
          344,
          348,
          349,
          351,
          600,
          601,
          602,
          650
        ]
      },
      {
        "test_lines": [
          97,
          109
        ],
        "covered_lines": [
          60,
          75,
          82,
          88,
          103,
          107,
          108,
          116,
          117,
          118,
          119,
          318,
          319,
          320,
          322,
          326,
          330,
          331,
          332,
          337,
          342,
          351,
          391,
          392,
          393,
          394,
          395,
          397,
          398,
          399,
          400,
          401,
          403,
          405,
          407,
          410,
          411,
          412,
          600,
          601,
          602,
          650
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.remoting.netty;\n",
      "\n",
      "import io.netty.bootstrap.Bootstrap;\n",
      "import io.netty.channel.Channel;\n",
      "import io.netty.channel.ChannelDuplexHandler;\n",
      "import io.netty.channel.ChannelFuture;\n",
      "import io.netty.channel.ChannelHandlerContext;\n",
      "import io.netty.channel.ChannelInitializer;\n",
      "import io.netty.channel.ChannelOption;\n",
      "import io.netty.channel.ChannelPipeline;\n",
      "import io.netty.channel.ChannelPromise;\n",
      "import io.netty.channel.EventLoopGroup;\n",
      "import io.netty.channel.SimpleChannelInboundHandler;\n",
      "import io.netty.channel.nio.NioEventLoopGroup;\n",
      "import io.netty.channel.socket.SocketChannel;\n",
      "import io.netty.channel.socket.nio.NioSocketChannel;\n",
      "import io.netty.handler.timeout.IdleState;\n",
      "import io.netty.handler.timeout.IdleStateEvent;\n",
      "import io.netty.handler.timeout.IdleStateHandler;\n",
      "import io.netty.util.concurrent.DefaultEventExecutorGroup;\n",
      "import java.io.IOException;\n",
      "import java.net.SocketAddress;\n",
      "import java.security.cert.CertificateException;\n",
      "import java.util.Collections;\n",
      "import java.util.List;\n",
      "import java.util.Map;\n",
      "import java.util.Random;\n",
      "import java.util.Timer;\n",
      "import java.util.TimerTask;\n",
      "import java.util.concurrent.ConcurrentHashMap;\n",
      "import java.util.concurrent.ConcurrentMap;\n",
      "import java.util.concurrent.ExecutorService;\n",
      "import java.util.concurrent.Executors;\n",
      "import java.util.concurrent.ThreadFactory;\n",
      "import java.util.concurrent.TimeUnit;\n",
      "import java.util.concurrent.atomic.AtomicInteger;\n",
      "import java.util.concurrent.atomic.AtomicReference;\n",
      "import java.util.concurrent.locks.Lock;\n",
      "import java.util.concurrent.locks.ReentrantLock;\n",
      "import org.apache.rocketmq.logging.InternalLogger;\n",
      "import org.apache.rocketmq.logging.InternalLoggerFactory;\n",
      "import org.apache.rocketmq.remoting.ChannelEventListener;\n",
      "import org.apache.rocketmq.remoting.InvokeCallback;\n",
      "import org.apache.rocketmq.remoting.RPCHook;\n",
      "import org.apache.rocketmq.remoting.RemotingClient;\n",
      "import org.apache.rocketmq.remoting.common.Pair;\n",
      "import org.apache.rocketmq.remoting.common.RemotingHelper;\n",
      "import org.apache.rocketmq.remoting.common.RemotingUtil;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingConnectException;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingTooMuchRequestException;\n",
      "import org.apache.rocketmq.remoting.protocol.RemotingCommand;\n",
      "\n",
      "/**\n",
      " * NettyRemotingClient\u548cNettyRemotingServer\u662fnetty\u5904\u7406\u7684\u6838\u5fc3\uff1a\u7ee7\u627f\u7684NettyRemotingAbstract\u4e3b\u8981\u5b9e\u73b0\u4e86\u4e00\u4e9bNetty\u7684\u540c\u6b65\uff0c\u5f02\u6b65\u548c\u5355\u5411\u6d88\u606f\u7684\u5c01\u88c5\n",
      " * \u5b9e\u73b0\u7684RemotingClient\u662f\u5bf9\u5e94\u7684\u6240\u6709\u901a\u4fe1\u7684\u63a5\u53e3\n",
      " *\n",
      " */\n",
      "public class NettyRemotingClient extends NettyRemotingAbstract implements RemotingClient {\n",
      "    private static final InternalLogger log = InternalLoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);\n",
      "\n",
      "    private static final long LOCK_TIMEOUT_MILLIS = 3000;\n",
      "\n",
      "    private final NettyClientConfig nettyClientConfig;\n",
      "    private final Bootstrap bootstrap = new Bootstrap();\n",
      "    private final EventLoopGroup eventLoopGroupWorker;\n",
      "    private final Lock lockChannelTables = new ReentrantLock();\n",
      "    //\u4fdd\u5b58\u5bf9\u5e94\u5730\u5740\u548cchannel\u4fe1\u606f\u7684map\n",
      "    private final ConcurrentMap<String /* addr */, ChannelWrapper> channelTables = new ConcurrentHashMap<String, ChannelWrapper>();\n",
      "\n",
      "    private final Timer timer = new Timer(\"ClientHouseKeepingService\", true);\n",
      "\n",
      "    private final AtomicReference<List<String>> namesrvAddrList = new AtomicReference<List<String>>();\n",
      "    private final AtomicReference<String> namesrvAddrChoosed = new AtomicReference<String>();\n",
      "    private final AtomicInteger namesrvIndex = new AtomicInteger(initValueIndex());\n",
      "    private final Lock lockNamesrvChannel = new ReentrantLock();\n",
      "\n",
      "    private final ExecutorService publicExecutor;\n",
      "\n",
      "    /**\n",
      "     * Invoke the callback methods in this executor when process response.\n",
      "     */\n",
      "    private ExecutorService callbackExecutor;\n",
      "    private final ChannelEventListener channelEventListener;\n",
      "    private DefaultEventExecutorGroup defaultEventExecutorGroup;\n",
      "\n",
      "    public NettyRemotingClient(final NettyClientConfig nettyClientConfig) {\n",
      "        this(nettyClientConfig, null);\n",
      "    }\n",
      "\n",
      "    public NettyRemotingClient(final NettyClientConfig nettyClientConfig,\n",
      "        final ChannelEventListener channelEventListener) {\n",
      "        super(nettyClientConfig.getClientOnewaySemaphoreValue(), nettyClientConfig.getClientAsyncSemaphoreValue());\n",
      "        this.nettyClientConfig = nettyClientConfig;\n",
      "        this.channelEventListener = channelEventListener;\n",
      "\n",
      "        int publicThreadNums = nettyClientConfig.getClientCallbackExecutorThreads();\n",
      "        if (publicThreadNums <= 0) {\n",
      "            publicThreadNums = 4;\n",
      "        }\n",
      "\n",
      "        this.publicExecutor = Executors.newFixedThreadPool(publicThreadNums, new ThreadFactory() {\n",
      "            private AtomicInteger threadIndex = new AtomicInteger(0);\n",
      "\n",
      "            @Override\n",
      "            public Thread newThread(Runnable r) {\n",
      "                return new Thread(r, \"NettyClientPublicExecutor_\" + this.threadIndex.incrementAndGet());\n",
      "            }\n",
      "        });\n",
      "\n",
      "        this.eventLoopGroupWorker = new NioEventLoopGroup(1, new ThreadFactory() {\n",
      "            private AtomicInteger threadIndex = new AtomicInteger(0);\n",
      "\n",
      "            @Override\n",
      "            public Thread newThread(Runnable r) {\n",
      "                return new Thread(r, String.format(\"NettyClientSelector_%d\", this.threadIndex.incrementAndGet()));\n",
      "            }\n",
      "        });\n",
      "\n",
      "        if (nettyClientConfig.isUseTLS()) {\n",
      "            try {\n",
      "                sslContext = TlsHelper.buildSslContext(true);\n",
      "                log.info(\"SSL enabled for client\");\n",
      "            } catch (IOException e) {\n",
      "                log.error(\"Failed to create SSLContext\", e);\n",
      "            } catch (CertificateException e) {\n",
      "                log.error(\"Failed to create SSLContext\", e);\n",
      "                throw new RuntimeException(\"Failed to create SSLContext\", e);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private static int initValueIndex() {\n",
      "        Random r = new Random();\n",
      "\n",
      "        return Math.abs(r.nextInt() % 999) % 999;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u4e3b\u8981\u8fdb\u884cnetty\u521d\u59cb\u5316\n",
      "     */\n",
      "    @Override\n",
      "    public void start() {\n",
      "        this.defaultEventExecutorGroup = new DefaultEventExecutorGroup(\n",
      "            nettyClientConfig.getClientWorkerThreads(),\n",
      "            new ThreadFactory() {\n",
      "\n",
      "                private AtomicInteger threadIndex = new AtomicInteger(0);\n",
      "\n",
      "                @Override\n",
      "                public Thread newThread(Runnable r) {\n",
      "                    return new Thread(r, \"NettyClientWorkerThread_\" + this.threadIndex.incrementAndGet());\n",
      "                }\n",
      "            });\n",
      "\n",
      "        Bootstrap handler = this.bootstrap.group(this.eventLoopGroupWorker).channel(NioSocketChannel.class)\n",
      "            .option(ChannelOption.TCP_NODELAY, true)\n",
      "            .option(ChannelOption.SO_KEEPALIVE, false)\n",
      "            .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, nettyClientConfig.getConnectTimeoutMillis()) //3s\n",
      "            .option(ChannelOption.SO_SNDBUF, nettyClientConfig.getClientSocketSndBufSize()) //65535\n",
      "            .option(ChannelOption.SO_RCVBUF, nettyClientConfig.getClientSocketRcvBufSize()) //65535\n",
      "            .handler(new ChannelInitializer<SocketChannel>() {\n",
      "                @Override\n",
      "                public void initChannel(SocketChannel ch) throws Exception {\n",
      "                    ChannelPipeline pipeline = ch.pipeline();\n",
      "                    if (nettyClientConfig.isUseTLS()) {\n",
      "                        if (null != sslContext) {\n",
      "                            pipeline.addFirst(defaultEventExecutorGroup, \"sslHandler\", sslContext.newHandler(ch.alloc()));\n",
      "                            log.info(\"Prepend SSL handler\");\n",
      "                        } else {\n",
      "                            log.warn(\"Connections are insecure as SSLContext is null!\");\n",
      "                        }\n",
      "                    }\n",
      "                    //\u5355\u72ec\u5236\u5b9aexcutor\uff0c\u7528\u4e8e\u6267\u884chandler\n",
      "                    pipeline.addLast(\n",
      "                        defaultEventExecutorGroup,\n",
      "                        // \u6d88\u606f\u7f16\u7801\n",
      "                        new NettyEncoder(),\n",
      "                        // \u6d88\u606f\u89e3\u7801\n",
      "                        new NettyDecoder(),\n",
      "                        new IdleStateHandler(0, 0, nettyClientConfig.getClientChannelMaxIdleTimeSeconds()),\n",
      "                        new NettyConnectManageHandler(),\n",
      "                        //\u63a5\u6536\u6d88\u606f\uff1a\u6dfb\u52a0\u5bf9\u5e94\u7684ChannelInboundHandler\u5b50\u7c7b\u5230ChannelPipeline\n",
      "                        new NettyClientHandler());\n",
      "                }\n",
      "            });\n",
      "\n",
      "        this.timer.scheduleAtFixedRate(new TimerTask() {\n",
      "            @Override\n",
      "            public void run() {\n",
      "                try {\n",
      "                    NettyRemotingClient.this.scanResponseTable();\n",
      "                } catch (Throwable e) {\n",
      "                    log.error(\"scanResponseTable exception\", e);\n",
      "                }\n",
      "            }\n",
      "        }, 1000 * 3, 1000);\n",
      "\n",
      "        if (this.channelEventListener != null) {\n",
      "            this.nettyEventExecutor.start();\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void shutdown() {\n",
      "        try {\n",
      "            this.timer.cancel();\n",
      "\n",
      "            for (ChannelWrapper cw : this.channelTables.values()) {\n",
      "                this.closeChannel(null, cw.getChannel());\n",
      "            }\n",
      "\n",
      "            this.channelTables.clear();\n",
      "\n",
      "            this.eventLoopGroupWorker.shutdownGracefully();\n",
      "\n",
      "            if (this.nettyEventExecutor != null) {\n",
      "                this.nettyEventExecutor.shutdown();\n",
      "            }\n",
      "\n",
      "            if (this.defaultEventExecutorGroup != null) {\n",
      "                this.defaultEventExecutorGroup.shutdownGracefully();\n",
      "            }\n",
      "        } catch (Exception e) {\n",
      "            log.error(\"NettyRemotingClient shutdown exception, \", e);\n",
      "        }\n",
      "\n",
      "        if (this.publicExecutor != null) {\n",
      "            try {\n",
      "                this.publicExecutor.shutdown();\n",
      "            } catch (Exception e) {\n",
      "                log.error(\"NettyRemotingServer shutdown exception, \", e);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public void closeChannel(final String addr, final Channel channel) {\n",
      "        if (null == channel)\n",
      "            return;\n",
      "\n",
      "        final String addrRemote = null == addr ? RemotingHelper.parseChannelRemoteAddr(channel) : addr;\n",
      "\n",
      "        try {\n",
      "            if (this.lockChannelTables.tryLock(LOCK_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS)) {\n",
      "                try {\n",
      "                    boolean removeItemFromTable = true;\n",
      "                    final ChannelWrapper prevCW = this.channelTables.get(addrRemote);\n",
      "\n",
      "                    log.info(\"closeChannel: begin close the channel[{}] Found: {}\", addrRemote, prevCW != null);\n",
      "\n",
      "                    if (null == prevCW) {\n",
      "                        log.info(\"closeChannel: the channel[{}] has been removed from the channel table before\", addrRemote);\n",
      "                        removeItemFromTable = false;\n",
      "                    } else if (prevCW.getChannel() != channel) {\n",
      "                        log.info(\"closeChannel: the channel[{}] has been closed before, and has been created again, nothing to do.\",\n",
      "                            addrRemote);\n",
      "                        removeItemFromTable = false;\n",
      "                    }\n",
      "\n",
      "                    if (removeItemFromTable) {\n",
      "                        this.channelTables.remove(addrRemote);\n",
      "                        log.info(\"closeChannel: the channel[{}] was removed from channel table\", addrRemote);\n",
      "                    }\n",
      "\n",
      "                    RemotingUtil.closeChannel(channel);\n",
      "                } catch (Exception e) {\n",
      "                    log.error(\"closeChannel: close the channel exception\", e);\n",
      "                } finally {\n",
      "                    this.lockChannelTables.unlock();\n",
      "                }\n",
      "            } else {\n",
      "                log.warn(\"closeChannel: try to lock channel table, but timeout, {}ms\", LOCK_TIMEOUT_MILLIS);\n",
      "            }\n",
      "        } catch (InterruptedException e) {\n",
      "            log.error(\"closeChannel exception\", e);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void registerRPCHook(RPCHook rpcHook) {\n",
      "        if (rpcHook != null && !rpcHooks.contains(rpcHook)) {\n",
      "            rpcHooks.add(rpcHook);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public void closeChannel(final Channel channel) {\n",
      "        if (null == channel)\n",
      "            return;\n",
      "\n",
      "        try {\n",
      "            if (this.lockChannelTables.tryLock(LOCK_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS)) {\n",
      "                try {\n",
      "                    boolean removeItemFromTable = true;\n",
      "                    ChannelWrapper prevCW = null;\n",
      "                    String addrRemote = null;\n",
      "                    //\u4fdd\u5b58\u5bf9\u5e94\u5730\u5740\u548cchannel\u4fe1\u606f\u7684map\n",
      "                    for (Map.Entry<String, ChannelWrapper> entry : channelTables.entrySet()) {\n",
      "                        String key = entry.getKey();\n",
      "                        ChannelWrapper prev = entry.getValue();\n",
      "                        if (prev.getChannel() != null) {\n",
      "                            if (prev.getChannel() == channel) {\n",
      "                                prevCW = prev;\n",
      "                                addrRemote = key;\n",
      "                                break;\n",
      "                            }\n",
      "                        }\n",
      "                    }\n",
      "\n",
      "                    if (null == prevCW) {\n",
      "                        log.info(\"eventCloseChannel: the channel[{}] has been removed from the channel table before\", addrRemote);\n",
      "                        removeItemFromTable = false;\n",
      "                    }\n",
      "\n",
      "                    if (removeItemFromTable) {\n",
      "                        this.channelTables.remove(addrRemote);\n",
      "                        log.info(\"closeChannel: the channel[{}] was removed from channel table\", addrRemote);\n",
      "                        //\u8c03\u7528 channel.close()\n",
      "                        RemotingUtil.closeChannel(channel);\n",
      "                    }\n",
      "                } catch (Exception e) {\n",
      "                    log.error(\"closeChannel: close the channel exception\", e);\n",
      "                } finally {\n",
      "                    this.lockChannelTables.unlock();\n",
      "                }\n",
      "            } else {\n",
      "                log.warn(\"closeChannel: try to lock channel table, but timeout, {}ms\", LOCK_TIMEOUT_MILLIS);\n",
      "            }\n",
      "        } catch (InterruptedException e) {\n",
      "            log.error(\"closeChannel exception\", e);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void updateNameServerAddressList(List<String> addrs) {\n",
      "        List<String> old = this.namesrvAddrList.get();\n",
      "        boolean update = false;\n",
      "\n",
      "        if (!addrs.isEmpty()) {\n",
      "            if (null == old) {\n",
      "                update = true;\n",
      "            } else if (addrs.size() != old.size()) {\n",
      "                update = true;\n",
      "            } else {\n",
      "                for (int i = 0; i < addrs.size() && !update; i++) {\n",
      "                    if (!old.contains(addrs.get(i))) {\n",
      "                        update = true;\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "\n",
      "            if (update) {\n",
      "                Collections.shuffle(addrs);\n",
      "                log.info(\"name server address updated. NEW : {} , OLD: {}\", addrs, old);\n",
      "                this.namesrvAddrList.set(addrs);\n",
      "\n",
      "                if (!addrs.contains(this.namesrvAddrChoosed.get())) {\n",
      "                    this.namesrvAddrChoosed.set(null);\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u540c\u6b65\u53d1\u6d88\u606f\n",
      "     * @param addr\n",
      "     * @param request\n",
      "     * @param timeoutMillis\n",
      "     * @return\n",
      "     * @throws InterruptedException\n",
      "     * @throws RemotingConnectException\n",
      "     * @throws RemotingSendRequestException\n",
      "     * @throws RemotingTimeoutException\n",
      "     */\n",
      "    @Override\n",
      "    public RemotingCommand invokeSync(String addr, final RemotingCommand request, long timeoutMillis)\n",
      "        throws InterruptedException, RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException {\n",
      "        // \u540c\u6b65\u53d1\u6d88\u606f\n",
      "        long beginStartTime = System.currentTimeMillis();\n",
      "        // \u6839\u636eip\u5730\u5740\u83b7\u5f97netty\u7684channel\uff0c\u6b64\u65f6\u4f1a\u7528\u5230netty\u7684\u542f\u52a8Bootstrap\u5bf9\u8c61,\u8c03\u7528bootstrap.connect\uff08\u5728\u9879\u76ee\u542f\u52a8\u7684\u65f6\u5019bootstrap\u5df2\u7ecf\u521d\u59cb\u5316\uff09\n",
      "        final Channel channel = this.getAndCreateChannel(addr);\n",
      "        if (channel != null && channel.isActive()) {\n",
      "            try {\n",
      "                //\u524d\u7f6e\u5904\u7406\n",
      "                doBeforeRpcHooks(addr, request);\n",
      "                long costTime = System.currentTimeMillis() - beginStartTime;\n",
      "                if (timeoutMillis < costTime) {\n",
      "                    throw new RemotingTimeoutException(\"invokeSync call timeout\");\n",
      "                }\n",
      "                //\u5b9e\u9645\u7684\u8c03\u7528\n",
      "                RemotingCommand response = this.invokeSyncImpl(channel, request, timeoutMillis - costTime);\n",
      "               //\u540e\u7f6e\u5904\u7406\n",
      "                doAfterRpcHooks(RemotingHelper.parseChannelRemoteAddr(channel), request, response);\n",
      "                return response;\n",
      "            } catch (RemotingSendRequestException e) {\n",
      "                log.warn(\"invokeSync: send request exception, so close the channel[{}]\", addr);\n",
      "                this.closeChannel(addr, channel);\n",
      "                throw e;\n",
      "            } catch (RemotingTimeoutException e) {\n",
      "                if (nettyClientConfig.isClientCloseSocketIfTimeout()) {\n",
      "                    this.closeChannel(addr, channel);\n",
      "                    log.warn(\"invokeSync: close socket because of timeout, {}ms, {}\", timeoutMillis, addr);\n",
      "                }\n",
      "                log.warn(\"invokeSync: wait response timeout exception, the channel[{}]\", addr);\n",
      "                throw e;\n",
      "            }\n",
      "        } else {\n",
      "            this.closeChannel(addr, channel);\n",
      "            throw new RemotingConnectException(addr);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private Channel getAndCreateChannel(final String addr) throws RemotingConnectException, InterruptedException {\n",
      "        if (null == addr) {\n",
      "            return getAndCreateNameserverChannel();\n",
      "        }\n",
      "\n",
      "        ChannelWrapper cw = this.channelTables.get(addr);\n",
      "        if (cw != null && cw.isOK()) {\n",
      "            return cw.getChannel();\n",
      "        }\n",
      "\n",
      "        return this.createChannel(addr);\n",
      "    }\n",
      "\n",
      "    private Channel getAndCreateNameserverChannel() throws RemotingConnectException, InterruptedException {\n",
      "        String addr = this.namesrvAddrChoosed.get();\n",
      "        if (addr != null) {\n",
      "            ChannelWrapper cw = this.channelTables.get(addr);\n",
      "            if (cw != null && cw.isOK()) {\n",
      "                return cw.getChannel();\n",
      "            }\n",
      "        }\n",
      "\n",
      "        final List<String> addrList = this.namesrvAddrList.get();\n",
      "        if (this.lockNamesrvChannel.tryLock(LOCK_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS)) {\n",
      "            try {\n",
      "                addr = this.namesrvAddrChoosed.get();\n",
      "                if (addr != null) {\n",
      "                    ChannelWrapper cw = this.channelTables.get(addr);\n",
      "                    if (cw != null && cw.isOK()) {\n",
      "                        return cw.getChannel();\n",
      "                    }\n",
      "                }\n",
      "\n",
      "                if (addrList != null && !addrList.isEmpty()) {\n",
      "                    for (int i = 0; i < addrList.size(); i++) {\n",
      "                        int index = this.namesrvIndex.incrementAndGet();\n",
      "                        index = Math.abs(index);\n",
      "                        index = index % addrList.size();\n",
      "                        String newAddr = addrList.get(index);\n",
      "\n",
      "                        this.namesrvAddrChoosed.set(newAddr);\n",
      "                        log.info(\"new name server is chosen. OLD: {} , NEW: {}. namesrvIndex = {}\", addr, newAddr, namesrvIndex);\n",
      "                        Channel channelNew = this.createChannel(newAddr);\n",
      "                        if (channelNew != null) {\n",
      "                            return channelNew;\n",
      "                        }\n",
      "                    }\n",
      "                    throw new RemotingConnectException(addrList.toString());\n",
      "                }\n",
      "            } finally {\n",
      "                this.lockNamesrvChannel.unlock();\n",
      "            }\n",
      "        } else {\n",
      "            log.warn(\"getAndCreateNameserverChannel: try to lock name server, but timeout, {}ms\", LOCK_TIMEOUT_MILLIS);\n",
      "        }\n",
      "\n",
      "        return null;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u521b\u5efaChannel\u8fde\u63a5\uff0c\u5c01\u88c5\u5230ChannelWrapper\uff0c\u6240\u6709\u7684\u8fde\u63a5\u653e\u5165\u5230channelTables\u7684map\u91cc\u53bb\n",
      "     * \u5982\u679c\u662f\u65b0\u521b\u5efa\u7684channel\uff0c\u4f1a\u5bf9\u5e94connect\n",
      "     * @param addr\n",
      "     * @return\n",
      "     * @throws InterruptedException\n",
      "     */\n",
      "    private Channel createChannel(final String addr) throws InterruptedException {\n",
      "        ChannelWrapper cw = this.channelTables.get(addr);\n",
      "        if (cw != null && cw.isOK()) {\n",
      "            return cw.getChannel();\n",
      "        }\n",
      "\n",
      "        if (this.lockChannelTables.tryLock(LOCK_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS)) {\n",
      "            try {\n",
      "                boolean createNewConnection;\n",
      "                cw = this.channelTables.get(addr);\n",
      "                if (cw != null) {\n",
      "\n",
      "                    if (cw.isOK()) {\n",
      "                        return cw.getChannel();\n",
      "                    } else if (!cw.getChannelFuture().isDone()) {\n",
      "                        createNewConnection = false;\n",
      "                    } else {\n",
      "                        this.channelTables.remove(addr);\n",
      "                        createNewConnection = true;\n",
      "                    }\n",
      "                } else {\n",
      "                    createNewConnection = true;\n",
      "                }\n",
      "\n",
      "                if (createNewConnection) {\n",
      "                    //\u5f02\u6b65\u521b\u5efachannel\u94fe\u63a5\uff0c\u4e0b\u65b9\u9700\u8981\u540c\u6b65\u7b49\u5f85\u7684\u65b9\u5f0f\u8fd4\u56de\n",
      "                    ChannelFuture channelFuture = this.bootstrap.connect(RemotingHelper.string2SocketAddress(addr));\n",
      "                    log.info(\"createChannel: begin to connect remote host[{}] asynchronously\", addr);\n",
      "                    cw = new ChannelWrapper(channelFuture);\n",
      "                    this.channelTables.put(addr, cw);\n",
      "                }\n",
      "            } catch (Exception e) {\n",
      "                log.error(\"createChannel: create channel exception\", e);\n",
      "            } finally {\n",
      "                this.lockChannelTables.unlock();\n",
      "            }\n",
      "        } else {\n",
      "            log.warn(\"createChannel: try to lock channel table, but timeout, {}ms\", LOCK_TIMEOUT_MILLIS);\n",
      "        }\n",
      "\n",
      "        if (cw != null) {\n",
      "            ChannelFuture channelFuture = cw.getChannelFuture();\n",
      "            //\u540c\u6b65\u7b49\u5f85\uff0c\u9ed8\u8ba43s\u8d85\u65f6\n",
      "            if (channelFuture.awaitUninterruptibly(this.nettyClientConfig.getConnectTimeoutMillis())) {\n",
      "                if (cw.isOK()) {\n",
      "                    log.info(\"createChannel: connect remote host[{}] success, {}\", addr, channelFuture.toString());\n",
      "                    return cw.getChannel();\n",
      "                } else {\n",
      "                    log.warn(\"createChannel: connect remote host[\" + addr + \"] failed, \" + channelFuture.toString(), channelFuture.cause());\n",
      "                }\n",
      "            } else {\n",
      "                log.warn(\"createChannel: connect remote host[{}] timeout {}ms, {}\", addr, this.nettyClientConfig.getConnectTimeoutMillis(),\n",
      "                    channelFuture.toString());\n",
      "            }\n",
      "        }\n",
      "\n",
      "        return null;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5f02\u6b65\u53d1\u9001\u6d88\u606f\n",
      "     * @param addr\n",
      "     * @param request\n",
      "     * @param timeoutMillis\n",
      "     * @param invokeCallback\n",
      "     * @throws InterruptedException\n",
      "     * @throws RemotingConnectException\n",
      "     * @throws RemotingTooMuchRequestException\n",
      "     * @throws RemotingTimeoutException\n",
      "     * @throws RemotingSendRequestException\n",
      "     */\n",
      "    @Override\n",
      "    public void invokeAsync(String addr, RemotingCommand request, long timeoutMillis, InvokeCallback invokeCallback)\n",
      "        throws InterruptedException, RemotingConnectException, RemotingTooMuchRequestException, RemotingTimeoutException,\n",
      "        RemotingSendRequestException {\n",
      "        long beginStartTime = System.currentTimeMillis();\n",
      "        final Channel channel = this.getAndCreateChannel(addr);\n",
      "        if (channel != null && channel.isActive()) {\n",
      "            try {\n",
      "                doBeforeRpcHooks(addr, request);\n",
      "                long costTime = System.currentTimeMillis() - beginStartTime;\n",
      "                if (timeoutMillis < costTime) {\n",
      "                    throw new RemotingTooMuchRequestException(\"invokeAsync call timeout\");\n",
      "                }\n",
      "                this.invokeAsyncImpl(channel, request, timeoutMillis - costTime, invokeCallback);\n",
      "            } catch (RemotingSendRequestException e) {\n",
      "                log.warn(\"invokeAsync: send request exception, so close the channel[{}]\", addr);\n",
      "                this.closeChannel(addr, channel);\n",
      "                throw e;\n",
      "            }\n",
      "        } else {\n",
      "            this.closeChannel(addr, channel);\n",
      "            throw new RemotingConnectException(addr);\n",
      "        }\n",
      "    }\n",
      "\n",
      "\n",
      "    @Override\n",
      "    public void invokeOneway(String addr, RemotingCommand request, long timeoutMillis) throws InterruptedException,\n",
      "        RemotingConnectException, RemotingTooMuchRequestException, RemotingTimeoutException, RemotingSendRequestException {\n",
      "        final Channel channel = this.getAndCreateChannel(addr);\n",
      "        if (channel != null && channel.isActive()) {\n",
      "            try {\n",
      "                doBeforeRpcHooks(addr, request);\n",
      "                this.invokeOnewayImpl(channel, request, timeoutMillis);\n",
      "            } catch (RemotingSendRequestException e) {\n",
      "                log.warn(\"invokeOneway: send request exception, so close the channel[{}]\", addr);\n",
      "                this.closeChannel(addr, channel);\n",
      "                throw e;\n",
      "            }\n",
      "        } else {\n",
      "            this.closeChannel(addr, channel);\n",
      "            throw new RemotingConnectException(addr);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void registerProcessor(int requestCode, NettyRequestProcessor processor, ExecutorService executor) {\n",
      "        ExecutorService executorThis = executor;\n",
      "        if (null == executor) {\n",
      "            executorThis = this.publicExecutor;\n",
      "        }\n",
      "\n",
      "        Pair<NettyRequestProcessor, ExecutorService> pair = new Pair<NettyRequestProcessor, ExecutorService>(processor, executorThis);\n",
      "        this.processorTable.put(requestCode, pair);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public boolean isChannelWritable(String addr) {\n",
      "        ChannelWrapper cw = this.channelTables.get(addr);\n",
      "        if (cw != null && cw.isOK()) {\n",
      "            return cw.isWritable();\n",
      "        }\n",
      "        return true;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public List<String> getNameServerAddressList() {\n",
      "        return this.namesrvAddrList.get();\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public ChannelEventListener getChannelEventListener() {\n",
      "        return channelEventListener;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public ExecutorService getCallbackExecutor() {\n",
      "        return callbackExecutor != null ? callbackExecutor : publicExecutor;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void setCallbackExecutor(final ExecutorService callbackExecutor) {\n",
      "        this.callbackExecutor = callbackExecutor;\n",
      "    }\n",
      "\n",
      "    static class ChannelWrapper {\n",
      "        private final ChannelFuture channelFuture;\n",
      "\n",
      "        public ChannelWrapper(ChannelFuture channelFuture) {\n",
      "            this.channelFuture = channelFuture;\n",
      "        }\n",
      "\n",
      "        public boolean isOK() {\n",
      "            return this.channelFuture.channel() != null && this.channelFuture.channel().isActive();\n",
      "        }\n",
      "\n",
      "        public boolean isWritable() {\n",
      "            return this.channelFuture.channel().isWritable();\n",
      "        }\n",
      "\n",
      "        private Channel getChannel() {\n",
      "            return this.channelFuture.channel();\n",
      "        }\n",
      "\n",
      "        public ChannelFuture getChannelFuture() {\n",
      "            return channelFuture;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    class NettyClientHandler extends SimpleChannelInboundHandler<RemotingCommand> {\n",
      "\n",
      "        /**\n",
      "         * \u901a\u8fc7\u7ee7\u627fSimpleChannelInboundHandler\uff0c\u5c01\u88c5\u5c06message\u8f6c\u5316\u4e3aRemotingCommand\u7684\u5b9e\u73b0\n",
      "         * @param ctx\n",
      "         * @param msg\n",
      "         * @throws Exception\n",
      "         */\n",
      "        @Override\n",
      "        protected void channelRead0(ChannelHandlerContext ctx, RemotingCommand msg) throws Exception {\n",
      "            processMessageReceived(ctx, msg);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5904\u7406Netty\u8fde\u63a5\u7ba1\u7406\n",
      "     * ChannelDuplexHandler \u7ee7\u627f\u7ed3\u5408\u5b9e\u73b0\u4e86ChannelInboundHandler\u548cChannelOutboundHandler\uff0c\u53ef\u4ee5\u5904\u7406\u8fde\u63a5\u548c\u65ad\u5f00\u7b49\u4e8b\u4ef6\n",
      "     * \u8fd9\u91cc\u4e3b\u8981\u662f\u5c06Netty\u8fde\u63a5\u65ad\u5f00\u7b49\u4e8b\u4ef6\u653e\u5165LinkedBlockingQueue\u4e2d\uff0c\u7136\u540e\u89e6\u53d1\u5bf9\u5e94listener\u7684\u5bf9\u5e94\u4e8b\u4ef6\uff0c\u5982ChannelEventListener\u7684onChannelConnect\u4e8b\u4ef6\n",
      "     */\n",
      "    class NettyConnectManageHandler extends ChannelDuplexHandler {\n",
      "        @Override\n",
      "        public void connect(ChannelHandlerContext ctx, SocketAddress remoteAddress, SocketAddress localAddress,\n",
      "            ChannelPromise promise) throws Exception {\n",
      "            final String local = localAddress == null ? \"UNKNOWN\" : RemotingHelper.parseSocketAddressAddr(localAddress);\n",
      "            final String remote = remoteAddress == null ? \"UNKNOWN\" : RemotingHelper.parseSocketAddressAddr(remoteAddress);\n",
      "            log.info(\"NETTY CLIENT PIPELINE: CONNECT  {} => {}\", local, remote);\n",
      "\n",
      "            super.connect(ctx, remoteAddress, localAddress, promise);\n",
      "\n",
      "            if (NettyRemotingClient.this.channelEventListener != null) {\n",
      "                //\u5904\u7406\u56de\u8c03\n",
      "                NettyRemotingClient.this.putNettyEvent(new NettyEvent(NettyEventType.CONNECT, remote, ctx.channel()));\n",
      "            }\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public void disconnect(ChannelHandlerContext ctx, ChannelPromise promise) throws Exception {\n",
      "            final String remoteAddress = RemotingHelper.parseChannelRemoteAddr(ctx.channel());\n",
      "            log.info(\"NETTY CLIENT PIPELINE: DISCONNECT {}\", remoteAddress);\n",
      "            closeChannel(ctx.channel());\n",
      "            super.disconnect(ctx, promise);\n",
      "\n",
      "            if (NettyRemotingClient.this.channelEventListener != null) {\n",
      "                NettyRemotingClient.this.putNettyEvent(new NettyEvent(NettyEventType.CLOSE, remoteAddress, ctx.channel()));\n",
      "            }\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public void close(ChannelHandlerContext ctx, ChannelPromise promise) throws Exception {\n",
      "            final String remoteAddress = RemotingHelper.parseChannelRemoteAddr(ctx.channel());\n",
      "            log.info(\"NETTY CLIENT PIPELINE: CLOSE {}\", remoteAddress);\n",
      "            closeChannel(ctx.channel());\n",
      "            super.close(ctx, promise);\n",
      "            NettyRemotingClient.this.failFast(ctx.channel());\n",
      "            if (NettyRemotingClient.this.channelEventListener != null) {\n",
      "                NettyRemotingClient.this.putNettyEvent(new NettyEvent(NettyEventType.CLOSE, remoteAddress, ctx.channel()));\n",
      "            }\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n",
      "            if (evt instanceof IdleStateEvent) {\n",
      "                IdleStateEvent event = (IdleStateEvent) evt;\n",
      "                if (event.state().equals(IdleState.ALL_IDLE)) {\n",
      "                    final String remoteAddress = RemotingHelper.parseChannelRemoteAddr(ctx.channel());\n",
      "                    log.warn(\"NETTY CLIENT PIPELINE: IDLE exception [{}]\", remoteAddress);\n",
      "                    closeChannel(ctx.channel());\n",
      "                    if (NettyRemotingClient.this.channelEventListener != null) {\n",
      "                        NettyRemotingClient.this\n",
      "                            .putNettyEvent(new NettyEvent(NettyEventType.IDLE, remoteAddress, ctx.channel()));\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "\n",
      "            ctx.fireUserEventTriggered(evt);\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n",
      "            final String remoteAddress = RemotingHelper.parseChannelRemoteAddr(ctx.channel());\n",
      "            log.warn(\"NETTY CLIENT PIPELINE: exceptionCaught {}\", remoteAddress);\n",
      "            log.warn(\"NETTY CLIENT PIPELINE: exceptionCaught exception.\", cause);\n",
      "            closeChannel(ctx.channel());\n",
      "            if (NettyRemotingClient.this.channelEventListener != null) {\n",
      "                NettyRemotingClient.this.putNettyEvent(new NettyEvent(NettyEventType.EXCEPTION, remoteAddress, ctx.channel()));\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.remoting.netty;\n",
      "\n",
      "import java.lang.reflect.Field;\n",
      "import java.util.concurrent.ExecutorService;\n",
      "import java.util.concurrent.Executors;\n",
      "import org.junit.Test;\n",
      "import org.junit.runner.RunWith;\n",
      "import org.mockito.junit.MockitoJUnitRunner;\n",
      "\n",
      "import static org.assertj.core.api.Assertions.assertThat;\n",
      "\n",
      "@RunWith(MockitoJUnitRunner.class)\n",
      "public class NettyRemotingClientTest {\n",
      "    private NettyRemotingClient remotingClient = new NettyRemotingClient(new NettyClientConfig());\n",
      "\n",
      "    @Test\n",
      "    public void testSetCallbackExecutor() throws NoSuchFieldException, IllegalAccessException {        \n",
      "        ExecutorService customized = Executors.newCachedThreadPool();\n",
      "        remotingClient.setCallbackExecutor(customized);\n",
      "\n",
      "        assertThat(remotingClient.getCallbackExecutor()).isEqualTo(customized);\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "NettyRemotingClient::::newThread(java.lang.Runnable)": [
        131,
        134
      ],
      "NettyRemotingClient::::initValueIndex()": [
        150,
        154
      ],
      "NettyRemotingClient::::start()": [
        159,
        219
      ],
      "NettyRemotingClient::::shutdown()": [
        221,
        252
      ],
      "NettyRemotingClient::::registerRPCHook(org.apache.rocketmq.remoting.RPCHook)": [
        296,
        301
      ],
      "NettyRemotingClient::::updateNameServerAddressList(java.util.List<java.lang.String>)": [
        350,
        378
      ],
      "NettyRemotingClient::::invokeSync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)": [
        391,
        427
      ],
      "NettyRemotingClient::::getAndCreateChannel(java.lang.String)": [
        429,
        440
      ],
      "NettyRemotingClient::::getAndCreateNameserverChannel()": [
        442,
        486
      ],
      "NettyRemotingClient::::createChannel(java.lang.String)": [
        495,
        552
      ],
      "NettyRemotingClient::::invokeAsync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long,org.apache.rocketmq.remoting.InvokeCallback)": [
        566,
        589
      ],
      "NettyRemotingClient::::invokeOneway(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)": [
        592,
        609
      ],
      "NettyRemotingClient::::registerProcessor(int,org.apache.rocketmq.remoting.netty.NettyRequestProcessor,java.util.concurrent.ExecutorService)": [
        611,
        620
      ],
      "NettyRemotingClient::::isChannelWritable(java.lang.String)": [
        622,
        629
      ],
      "NettyRemotingClient::::getNameServerAddressList()": [
        631,
        634
      ],
      "NettyRemotingClient::::getChannelEventListener()": [
        636,
        639
      ],
      "NettyRemotingClient::::getCallbackExecutor()": [
        641,
        644
      ],
      "NettyRemotingClient::::setCallbackExecutor(java.util.concurrent.ExecutorService)": [
        646,
        649
      ],
      "NettyRemotingClient.ChannelWrapper::::isOK()": [
        658,
        660
      ],
      "NettyRemotingClient.ChannelWrapper::::isWritable()": [
        662,
        664
      ],
      "NettyRemotingClient.ChannelWrapper::::getChannel()": [
        666,
        668
      ],
      "NettyRemotingClient.ChannelWrapper::::getChannelFuture()": [
        670,
        672
      ]
    },
    "test_method_lines_dic": {
      "NettyRemotingClientTest::::testSetCallbackExecutor()": [
        32,
        38
      ]
    },
    "reverse_method_lines_dic": {
      "131": "NettyRemotingClient::::newThread(java.lang.Runnable)",
      "132": "NettyRemotingClient::::newThread(java.lang.Runnable)",
      "133": "NettyRemotingClient::::newThread(java.lang.Runnable)",
      "134": "NettyRemotingClient::::newThread(java.lang.Runnable)",
      "150": "NettyRemotingClient::::initValueIndex()",
      "151": "NettyRemotingClient::::initValueIndex()",
      "152": "NettyRemotingClient::::initValueIndex()",
      "153": "NettyRemotingClient::::initValueIndex()",
      "154": "NettyRemotingClient::::initValueIndex()",
      "159": "NettyRemotingClient::::start()",
      "160": "NettyRemotingClient::::start()",
      "161": "NettyRemotingClient::::start()",
      "162": "NettyRemotingClient::::start()",
      "163": "NettyRemotingClient::::start()",
      "164": "NettyRemotingClient::::start()",
      "165": "NettyRemotingClient::::start()",
      "166": "NettyRemotingClient::::start()",
      "167": "NettyRemotingClient::::start()",
      "168": "NettyRemotingClient::::start()",
      "169": "NettyRemotingClient::::start()",
      "170": "NettyRemotingClient::::start()",
      "171": "NettyRemotingClient::::start()",
      "172": "NettyRemotingClient::::start()",
      "173": "NettyRemotingClient::::start()",
      "174": "NettyRemotingClient::::start()",
      "175": "NettyRemotingClient::::start()",
      "176": "NettyRemotingClient::::start()",
      "177": "NettyRemotingClient::::start()",
      "178": "NettyRemotingClient::::start()",
      "179": "NettyRemotingClient::::start()",
      "180": "NettyRemotingClient::::start()",
      "181": "NettyRemotingClient::::start()",
      "182": "NettyRemotingClient::::start()",
      "183": "NettyRemotingClient::::start()",
      "184": "NettyRemotingClient::::start()",
      "185": "NettyRemotingClient::::start()",
      "186": "NettyRemotingClient::::start()",
      "187": "NettyRemotingClient::::start()",
      "188": "NettyRemotingClient::::start()",
      "189": "NettyRemotingClient::::start()",
      "190": "NettyRemotingClient::::start()",
      "191": "NettyRemotingClient::::start()",
      "192": "NettyRemotingClient::::start()",
      "193": "NettyRemotingClient::::start()",
      "194": "NettyRemotingClient::::start()",
      "195": "NettyRemotingClient::::start()",
      "196": "NettyRemotingClient::::start()",
      "197": "NettyRemotingClient::::start()",
      "198": "NettyRemotingClient::::start()",
      "199": "NettyRemotingClient::::start()",
      "200": "NettyRemotingClient::::start()",
      "201": "NettyRemotingClient::::start()",
      "202": "NettyRemotingClient::::start()",
      "203": "NettyRemotingClient::::start()",
      "204": "NettyRemotingClient::::start()",
      "205": "NettyRemotingClient::::start()",
      "206": "NettyRemotingClient::::start()",
      "207": "NettyRemotingClient::::start()",
      "208": "NettyRemotingClient::::start()",
      "209": "NettyRemotingClient::::start()",
      "210": "NettyRemotingClient::::start()",
      "211": "NettyRemotingClient::::start()",
      "212": "NettyRemotingClient::::start()",
      "213": "NettyRemotingClient::::start()",
      "214": "NettyRemotingClient::::start()",
      "215": "NettyRemotingClient::::start()",
      "216": "NettyRemotingClient::::start()",
      "217": "NettyRemotingClient::::start()",
      "218": "NettyRemotingClient::::start()",
      "219": "NettyRemotingClient::::start()",
      "221": "NettyRemotingClient::::shutdown()",
      "222": "NettyRemotingClient::::shutdown()",
      "223": "NettyRemotingClient::::shutdown()",
      "224": "NettyRemotingClient::::shutdown()",
      "225": "NettyRemotingClient::::shutdown()",
      "226": "NettyRemotingClient::::shutdown()",
      "227": "NettyRemotingClient::::shutdown()",
      "228": "NettyRemotingClient::::shutdown()",
      "229": "NettyRemotingClient::::shutdown()",
      "230": "NettyRemotingClient::::shutdown()",
      "231": "NettyRemotingClient::::shutdown()",
      "232": "NettyRemotingClient::::shutdown()",
      "233": "NettyRemotingClient::::shutdown()",
      "234": "NettyRemotingClient::::shutdown()",
      "235": "NettyRemotingClient::::shutdown()",
      "236": "NettyRemotingClient::::shutdown()",
      "237": "NettyRemotingClient::::shutdown()",
      "238": "NettyRemotingClient::::shutdown()",
      "239": "NettyRemotingClient::::shutdown()",
      "240": "NettyRemotingClient::::shutdown()",
      "241": "NettyRemotingClient::::shutdown()",
      "242": "NettyRemotingClient::::shutdown()",
      "243": "NettyRemotingClient::::shutdown()",
      "244": "NettyRemotingClient::::shutdown()",
      "245": "NettyRemotingClient::::shutdown()",
      "246": "NettyRemotingClient::::shutdown()",
      "247": "NettyRemotingClient::::shutdown()",
      "248": "NettyRemotingClient::::shutdown()",
      "249": "NettyRemotingClient::::shutdown()",
      "250": "NettyRemotingClient::::shutdown()",
      "251": "NettyRemotingClient::::shutdown()",
      "252": "NettyRemotingClient::::shutdown()",
      "296": "NettyRemotingClient::::registerRPCHook(org.apache.rocketmq.remoting.RPCHook)",
      "297": "NettyRemotingClient::::registerRPCHook(org.apache.rocketmq.remoting.RPCHook)",
      "298": "NettyRemotingClient::::registerRPCHook(org.apache.rocketmq.remoting.RPCHook)",
      "299": "NettyRemotingClient::::registerRPCHook(org.apache.rocketmq.remoting.RPCHook)",
      "300": "NettyRemotingClient::::registerRPCHook(org.apache.rocketmq.remoting.RPCHook)",
      "301": "NettyRemotingClient::::registerRPCHook(org.apache.rocketmq.remoting.RPCHook)",
      "350": "NettyRemotingClient::::updateNameServerAddressList(java.util.List<java.lang.String>)",
      "351": "NettyRemotingClient::::updateNameServerAddressList(java.util.List<java.lang.String>)",
      "352": "NettyRemotingClient::::updateNameServerAddressList(java.util.List<java.lang.String>)",
      "353": "NettyRemotingClient::::updateNameServerAddressList(java.util.List<java.lang.String>)",
      "354": "NettyRemotingClient::::updateNameServerAddressList(java.util.List<java.lang.String>)",
      "355": "NettyRemotingClient::::updateNameServerAddressList(java.util.List<java.lang.String>)",
      "356": "NettyRemotingClient::::updateNameServerAddressList(java.util.List<java.lang.String>)",
      "357": "NettyRemotingClient::::updateNameServerAddressList(java.util.List<java.lang.String>)",
      "358": "NettyRemotingClient::::updateNameServerAddressList(java.util.List<java.lang.String>)",
      "359": "NettyRemotingClient::::updateNameServerAddressList(java.util.List<java.lang.String>)",
      "360": "NettyRemotingClient::::updateNameServerAddressList(java.util.List<java.lang.String>)",
      "361": "NettyRemotingClient::::updateNameServerAddressList(java.util.List<java.lang.String>)",
      "362": "NettyRemotingClient::::updateNameServerAddressList(java.util.List<java.lang.String>)",
      "363": "NettyRemotingClient::::updateNameServerAddressList(java.util.List<java.lang.String>)",
      "364": "NettyRemotingClient::::updateNameServerAddressList(java.util.List<java.lang.String>)",
      "365": "NettyRemotingClient::::updateNameServerAddressList(java.util.List<java.lang.String>)",
      "366": "NettyRemotingClient::::updateNameServerAddressList(java.util.List<java.lang.String>)",
      "367": "NettyRemotingClient::::updateNameServerAddressList(java.util.List<java.lang.String>)",
      "368": "NettyRemotingClient::::updateNameServerAddressList(java.util.List<java.lang.String>)",
      "369": "NettyRemotingClient::::updateNameServerAddressList(java.util.List<java.lang.String>)",
      "370": "NettyRemotingClient::::updateNameServerAddressList(java.util.List<java.lang.String>)",
      "371": "NettyRemotingClient::::updateNameServerAddressList(java.util.List<java.lang.String>)",
      "372": "NettyRemotingClient::::updateNameServerAddressList(java.util.List<java.lang.String>)",
      "373": "NettyRemotingClient::::updateNameServerAddressList(java.util.List<java.lang.String>)",
      "374": "NettyRemotingClient::::updateNameServerAddressList(java.util.List<java.lang.String>)",
      "375": "NettyRemotingClient::::updateNameServerAddressList(java.util.List<java.lang.String>)",
      "376": "NettyRemotingClient::::updateNameServerAddressList(java.util.List<java.lang.String>)",
      "377": "NettyRemotingClient::::updateNameServerAddressList(java.util.List<java.lang.String>)",
      "378": "NettyRemotingClient::::updateNameServerAddressList(java.util.List<java.lang.String>)",
      "391": "NettyRemotingClient::::invokeSync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "392": "NettyRemotingClient::::invokeSync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "393": "NettyRemotingClient::::invokeSync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "394": "NettyRemotingClient::::invokeSync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "395": "NettyRemotingClient::::invokeSync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "396": "NettyRemotingClient::::invokeSync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "397": "NettyRemotingClient::::invokeSync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "398": "NettyRemotingClient::::invokeSync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "399": "NettyRemotingClient::::invokeSync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "400": "NettyRemotingClient::::invokeSync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "401": "NettyRemotingClient::::invokeSync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "402": "NettyRemotingClient::::invokeSync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "403": "NettyRemotingClient::::invokeSync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "404": "NettyRemotingClient::::invokeSync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "405": "NettyRemotingClient::::invokeSync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "406": "NettyRemotingClient::::invokeSync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "407": "NettyRemotingClient::::invokeSync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "408": "NettyRemotingClient::::invokeSync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "409": "NettyRemotingClient::::invokeSync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "410": "NettyRemotingClient::::invokeSync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "411": "NettyRemotingClient::::invokeSync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "412": "NettyRemotingClient::::invokeSync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "413": "NettyRemotingClient::::invokeSync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "414": "NettyRemotingClient::::invokeSync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "415": "NettyRemotingClient::::invokeSync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "416": "NettyRemotingClient::::invokeSync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "417": "NettyRemotingClient::::invokeSync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "418": "NettyRemotingClient::::invokeSync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "419": "NettyRemotingClient::::invokeSync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "420": "NettyRemotingClient::::invokeSync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "421": "NettyRemotingClient::::invokeSync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "422": "NettyRemotingClient::::invokeSync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "423": "NettyRemotingClient::::invokeSync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "424": "NettyRemotingClient::::invokeSync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "425": "NettyRemotingClient::::invokeSync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "426": "NettyRemotingClient::::invokeSync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "427": "NettyRemotingClient::::invokeSync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "429": "NettyRemotingClient::::getAndCreateChannel(java.lang.String)",
      "430": "NettyRemotingClient::::getAndCreateChannel(java.lang.String)",
      "431": "NettyRemotingClient::::getAndCreateChannel(java.lang.String)",
      "432": "NettyRemotingClient::::getAndCreateChannel(java.lang.String)",
      "433": "NettyRemotingClient::::getAndCreateChannel(java.lang.String)",
      "434": "NettyRemotingClient::::getAndCreateChannel(java.lang.String)",
      "435": "NettyRemotingClient::::getAndCreateChannel(java.lang.String)",
      "436": "NettyRemotingClient::::getAndCreateChannel(java.lang.String)",
      "437": "NettyRemotingClient::::getAndCreateChannel(java.lang.String)",
      "438": "NettyRemotingClient::::getAndCreateChannel(java.lang.String)",
      "439": "NettyRemotingClient::::getAndCreateChannel(java.lang.String)",
      "440": "NettyRemotingClient::::getAndCreateChannel(java.lang.String)",
      "442": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "443": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "444": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "445": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "446": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "447": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "448": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "449": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "450": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "451": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "452": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "453": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "454": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "455": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "456": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "457": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "458": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "459": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "460": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "461": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "462": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "463": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "464": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "465": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "466": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "467": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "468": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "469": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "470": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "471": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "472": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "473": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "474": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "475": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "476": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "477": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "478": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "479": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "480": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "481": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "482": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "483": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "484": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "485": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "486": "NettyRemotingClient::::getAndCreateNameserverChannel()",
      "495": "NettyRemotingClient::::createChannel(java.lang.String)",
      "496": "NettyRemotingClient::::createChannel(java.lang.String)",
      "497": "NettyRemotingClient::::createChannel(java.lang.String)",
      "498": "NettyRemotingClient::::createChannel(java.lang.String)",
      "499": "NettyRemotingClient::::createChannel(java.lang.String)",
      "500": "NettyRemotingClient::::createChannel(java.lang.String)",
      "501": "NettyRemotingClient::::createChannel(java.lang.String)",
      "502": "NettyRemotingClient::::createChannel(java.lang.String)",
      "503": "NettyRemotingClient::::createChannel(java.lang.String)",
      "504": "NettyRemotingClient::::createChannel(java.lang.String)",
      "505": "NettyRemotingClient::::createChannel(java.lang.String)",
      "506": "NettyRemotingClient::::createChannel(java.lang.String)",
      "507": "NettyRemotingClient::::createChannel(java.lang.String)",
      "508": "NettyRemotingClient::::createChannel(java.lang.String)",
      "509": "NettyRemotingClient::::createChannel(java.lang.String)",
      "510": "NettyRemotingClient::::createChannel(java.lang.String)",
      "511": "NettyRemotingClient::::createChannel(java.lang.String)",
      "512": "NettyRemotingClient::::createChannel(java.lang.String)",
      "513": "NettyRemotingClient::::createChannel(java.lang.String)",
      "514": "NettyRemotingClient::::createChannel(java.lang.String)",
      "515": "NettyRemotingClient::::createChannel(java.lang.String)",
      "516": "NettyRemotingClient::::createChannel(java.lang.String)",
      "517": "NettyRemotingClient::::createChannel(java.lang.String)",
      "518": "NettyRemotingClient::::createChannel(java.lang.String)",
      "519": "NettyRemotingClient::::createChannel(java.lang.String)",
      "520": "NettyRemotingClient::::createChannel(java.lang.String)",
      "521": "NettyRemotingClient::::createChannel(java.lang.String)",
      "522": "NettyRemotingClient::::createChannel(java.lang.String)",
      "523": "NettyRemotingClient::::createChannel(java.lang.String)",
      "524": "NettyRemotingClient::::createChannel(java.lang.String)",
      "525": "NettyRemotingClient::::createChannel(java.lang.String)",
      "526": "NettyRemotingClient::::createChannel(java.lang.String)",
      "527": "NettyRemotingClient::::createChannel(java.lang.String)",
      "528": "NettyRemotingClient::::createChannel(java.lang.String)",
      "529": "NettyRemotingClient::::createChannel(java.lang.String)",
      "530": "NettyRemotingClient::::createChannel(java.lang.String)",
      "531": "NettyRemotingClient::::createChannel(java.lang.String)",
      "532": "NettyRemotingClient::::createChannel(java.lang.String)",
      "533": "NettyRemotingClient::::createChannel(java.lang.String)",
      "534": "NettyRemotingClient::::createChannel(java.lang.String)",
      "535": "NettyRemotingClient::::createChannel(java.lang.String)",
      "536": "NettyRemotingClient::::createChannel(java.lang.String)",
      "537": "NettyRemotingClient::::createChannel(java.lang.String)",
      "538": "NettyRemotingClient::::createChannel(java.lang.String)",
      "539": "NettyRemotingClient::::createChannel(java.lang.String)",
      "540": "NettyRemotingClient::::createChannel(java.lang.String)",
      "541": "NettyRemotingClient::::createChannel(java.lang.String)",
      "542": "NettyRemotingClient::::createChannel(java.lang.String)",
      "543": "NettyRemotingClient::::createChannel(java.lang.String)",
      "544": "NettyRemotingClient::::createChannel(java.lang.String)",
      "545": "NettyRemotingClient::::createChannel(java.lang.String)",
      "546": "NettyRemotingClient::::createChannel(java.lang.String)",
      "547": "NettyRemotingClient::::createChannel(java.lang.String)",
      "548": "NettyRemotingClient::::createChannel(java.lang.String)",
      "549": "NettyRemotingClient::::createChannel(java.lang.String)",
      "550": "NettyRemotingClient::::createChannel(java.lang.String)",
      "551": "NettyRemotingClient::::createChannel(java.lang.String)",
      "552": "NettyRemotingClient::::createChannel(java.lang.String)",
      "566": "NettyRemotingClient::::invokeAsync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long,org.apache.rocketmq.remoting.InvokeCallback)",
      "567": "NettyRemotingClient::::invokeAsync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long,org.apache.rocketmq.remoting.InvokeCallback)",
      "568": "NettyRemotingClient::::invokeAsync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long,org.apache.rocketmq.remoting.InvokeCallback)",
      "569": "NettyRemotingClient::::invokeAsync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long,org.apache.rocketmq.remoting.InvokeCallback)",
      "570": "NettyRemotingClient::::invokeAsync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long,org.apache.rocketmq.remoting.InvokeCallback)",
      "571": "NettyRemotingClient::::invokeAsync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long,org.apache.rocketmq.remoting.InvokeCallback)",
      "572": "NettyRemotingClient::::invokeAsync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long,org.apache.rocketmq.remoting.InvokeCallback)",
      "573": "NettyRemotingClient::::invokeAsync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long,org.apache.rocketmq.remoting.InvokeCallback)",
      "574": "NettyRemotingClient::::invokeAsync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long,org.apache.rocketmq.remoting.InvokeCallback)",
      "575": "NettyRemotingClient::::invokeAsync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long,org.apache.rocketmq.remoting.InvokeCallback)",
      "576": "NettyRemotingClient::::invokeAsync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long,org.apache.rocketmq.remoting.InvokeCallback)",
      "577": "NettyRemotingClient::::invokeAsync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long,org.apache.rocketmq.remoting.InvokeCallback)",
      "578": "NettyRemotingClient::::invokeAsync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long,org.apache.rocketmq.remoting.InvokeCallback)",
      "579": "NettyRemotingClient::::invokeAsync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long,org.apache.rocketmq.remoting.InvokeCallback)",
      "580": "NettyRemotingClient::::invokeAsync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long,org.apache.rocketmq.remoting.InvokeCallback)",
      "581": "NettyRemotingClient::::invokeAsync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long,org.apache.rocketmq.remoting.InvokeCallback)",
      "582": "NettyRemotingClient::::invokeAsync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long,org.apache.rocketmq.remoting.InvokeCallback)",
      "583": "NettyRemotingClient::::invokeAsync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long,org.apache.rocketmq.remoting.InvokeCallback)",
      "584": "NettyRemotingClient::::invokeAsync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long,org.apache.rocketmq.remoting.InvokeCallback)",
      "585": "NettyRemotingClient::::invokeAsync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long,org.apache.rocketmq.remoting.InvokeCallback)",
      "586": "NettyRemotingClient::::invokeAsync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long,org.apache.rocketmq.remoting.InvokeCallback)",
      "587": "NettyRemotingClient::::invokeAsync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long,org.apache.rocketmq.remoting.InvokeCallback)",
      "588": "NettyRemotingClient::::invokeAsync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long,org.apache.rocketmq.remoting.InvokeCallback)",
      "589": "NettyRemotingClient::::invokeAsync(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long,org.apache.rocketmq.remoting.InvokeCallback)",
      "592": "NettyRemotingClient::::invokeOneway(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "593": "NettyRemotingClient::::invokeOneway(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "594": "NettyRemotingClient::::invokeOneway(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "595": "NettyRemotingClient::::invokeOneway(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "596": "NettyRemotingClient::::invokeOneway(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "597": "NettyRemotingClient::::invokeOneway(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "598": "NettyRemotingClient::::invokeOneway(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "599": "NettyRemotingClient::::invokeOneway(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "600": "NettyRemotingClient::::invokeOneway(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "601": "NettyRemotingClient::::invokeOneway(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "602": "NettyRemotingClient::::invokeOneway(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "603": "NettyRemotingClient::::invokeOneway(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "604": "NettyRemotingClient::::invokeOneway(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "605": "NettyRemotingClient::::invokeOneway(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "606": "NettyRemotingClient::::invokeOneway(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "607": "NettyRemotingClient::::invokeOneway(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "608": "NettyRemotingClient::::invokeOneway(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "609": "NettyRemotingClient::::invokeOneway(java.lang.String,org.apache.rocketmq.remoting.protocol.RemotingCommand,long)",
      "611": "NettyRemotingClient::::registerProcessor(int,org.apache.rocketmq.remoting.netty.NettyRequestProcessor,java.util.concurrent.ExecutorService)",
      "612": "NettyRemotingClient::::registerProcessor(int,org.apache.rocketmq.remoting.netty.NettyRequestProcessor,java.util.concurrent.ExecutorService)",
      "613": "NettyRemotingClient::::registerProcessor(int,org.apache.rocketmq.remoting.netty.NettyRequestProcessor,java.util.concurrent.ExecutorService)",
      "614": "NettyRemotingClient::::registerProcessor(int,org.apache.rocketmq.remoting.netty.NettyRequestProcessor,java.util.concurrent.ExecutorService)",
      "615": "NettyRemotingClient::::registerProcessor(int,org.apache.rocketmq.remoting.netty.NettyRequestProcessor,java.util.concurrent.ExecutorService)",
      "616": "NettyRemotingClient::::registerProcessor(int,org.apache.rocketmq.remoting.netty.NettyRequestProcessor,java.util.concurrent.ExecutorService)",
      "617": "NettyRemotingClient::::registerProcessor(int,org.apache.rocketmq.remoting.netty.NettyRequestProcessor,java.util.concurrent.ExecutorService)",
      "618": "NettyRemotingClient::::registerProcessor(int,org.apache.rocketmq.remoting.netty.NettyRequestProcessor,java.util.concurrent.ExecutorService)",
      "619": "NettyRemotingClient::::registerProcessor(int,org.apache.rocketmq.remoting.netty.NettyRequestProcessor,java.util.concurrent.ExecutorService)",
      "620": "NettyRemotingClient::::registerProcessor(int,org.apache.rocketmq.remoting.netty.NettyRequestProcessor,java.util.concurrent.ExecutorService)",
      "622": "NettyRemotingClient::::isChannelWritable(java.lang.String)",
      "623": "NettyRemotingClient::::isChannelWritable(java.lang.String)",
      "624": "NettyRemotingClient::::isChannelWritable(java.lang.String)",
      "625": "NettyRemotingClient::::isChannelWritable(java.lang.String)",
      "626": "NettyRemotingClient::::isChannelWritable(java.lang.String)",
      "627": "NettyRemotingClient::::isChannelWritable(java.lang.String)",
      "628": "NettyRemotingClient::::isChannelWritable(java.lang.String)",
      "629": "NettyRemotingClient::::isChannelWritable(java.lang.String)",
      "631": "NettyRemotingClient::::getNameServerAddressList()",
      "632": "NettyRemotingClient::::getNameServerAddressList()",
      "633": "NettyRemotingClient::::getNameServerAddressList()",
      "634": "NettyRemotingClient::::getNameServerAddressList()",
      "636": "NettyRemotingClient::::getChannelEventListener()",
      "637": "NettyRemotingClient::::getChannelEventListener()",
      "638": "NettyRemotingClient::::getChannelEventListener()",
      "639": "NettyRemotingClient::::getChannelEventListener()",
      "641": "NettyRemotingClient::::getCallbackExecutor()",
      "642": "NettyRemotingClient::::getCallbackExecutor()",
      "643": "NettyRemotingClient::::getCallbackExecutor()",
      "644": "NettyRemotingClient::::getCallbackExecutor()",
      "646": "NettyRemotingClient::::setCallbackExecutor(java.util.concurrent.ExecutorService)",
      "647": "NettyRemotingClient::::setCallbackExecutor(java.util.concurrent.ExecutorService)",
      "648": "NettyRemotingClient::::setCallbackExecutor(java.util.concurrent.ExecutorService)",
      "649": "NettyRemotingClient::::setCallbackExecutor(java.util.concurrent.ExecutorService)",
      "658": "NettyRemotingClient.ChannelWrapper::::isOK()",
      "659": "NettyRemotingClient.ChannelWrapper::::isOK()",
      "660": "NettyRemotingClient.ChannelWrapper::::isOK()",
      "662": "NettyRemotingClient.ChannelWrapper::::isWritable()",
      "663": "NettyRemotingClient.ChannelWrapper::::isWritable()",
      "664": "NettyRemotingClient.ChannelWrapper::::isWritable()",
      "666": "NettyRemotingClient.ChannelWrapper::::getChannel()",
      "667": "NettyRemotingClient.ChannelWrapper::::getChannel()",
      "668": "NettyRemotingClient.ChannelWrapper::::getChannel()",
      "670": "NettyRemotingClient.ChannelWrapper::::getChannelFuture()",
      "671": "NettyRemotingClient.ChannelWrapper::::getChannelFuture()",
      "672": "NettyRemotingClient.ChannelWrapper::::getChannelFuture()"
    },
    "test_reverse_method_lines_dic": {
      "32": "NettyRemotingClientTest::::testSetCallbackExecutor()",
      "33": "NettyRemotingClientTest::::testSetCallbackExecutor()",
      "34": "NettyRemotingClientTest::::testSetCallbackExecutor()",
      "35": "NettyRemotingClientTest::::testSetCallbackExecutor()",
      "36": "NettyRemotingClientTest::::testSetCallbackExecutor()",
      "37": "NettyRemotingClientTest::::testSetCallbackExecutor()",
      "38": "NettyRemotingClientTest::::testSetCallbackExecutor()"
    },
    "tests": [
      {
        "test_lines": [
          32,
          38
        ],
        "covered_lines": [
          77,
          82,
          84,
          86,
          88,
          90,
          91,
          92,
          93,
          105,
          106,
          110,
          111,
          112,
          114,
          115,
          119,
          120,
          128,
          129,
          133,
          137,
          148,
          151,
          153,
          643,
          648,
          649
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingSerializable.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.remoting.protocol;\n",
      "\n",
      "import com.alibaba.fastjson.JSON;\n",
      "import java.nio.charset.Charset;\n",
      "\n",
      "/**\n",
      " * json\u5e8f\u5217\u5316\u53cd\u5e8f\u5217\u5316\n",
      " */\n",
      "public abstract class RemotingSerializable {\n",
      "    private final static Charset CHARSET_UTF8 = Charset.forName(\"UTF-8\");\n",
      "\n",
      "    public static byte[] encode(final Object obj) {\n",
      "        final String json = toJson(obj, false);\n",
      "        if (json != null) {\n",
      "            return json.getBytes(CHARSET_UTF8);\n",
      "        }\n",
      "        return null;\n",
      "    }\n",
      "\n",
      "    public static String toJson(final Object obj, boolean prettyFormat) {\n",
      "        return JSON.toJSONString(obj, prettyFormat);\n",
      "    }\n",
      "\n",
      "    public static <T> T decode(final byte[] data, Class<T> classOfT) {\n",
      "        final String json = new String(data, CHARSET_UTF8);\n",
      "        return fromJson(json, classOfT);\n",
      "    }\n",
      "\n",
      "    public static <T> T fromJson(String json, Class<T> classOfT) {\n",
      "        return JSON.parseObject(json, classOfT);\n",
      "    }\n",
      "\n",
      "    public byte[] encode() {\n",
      "        final String json = this.toJson();\n",
      "        if (json != null) {\n",
      "            return json.getBytes(CHARSET_UTF8);\n",
      "        }\n",
      "        return null;\n",
      "    }\n",
      "\n",
      "    public String toJson() {\n",
      "        return toJson(false);\n",
      "    }\n",
      "\n",
      "    public String toJson(final boolean prettyFormat) {\n",
      "        return toJson(this, prettyFormat);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.remoting.protocol;\n",
      "\n",
      "import java.util.Arrays;\n",
      "import java.util.List;\n",
      "import org.junit.Test;\n",
      "\n",
      "import static org.assertj.core.api.Assertions.assertThat;\n",
      "\n",
      "public class RemotingSerializableTest {\n",
      "    @Test\n",
      "    public void testEncodeAndDecode_HeterogeneousClass() {\n",
      "        Sample sample = new Sample();\n",
      "\n",
      "        byte[] bytes = RemotingSerializable.encode(sample);\n",
      "        Sample decodedSample = RemotingSerializable.decode(bytes, Sample.class);\n",
      "\n",
      "        assertThat(decodedSample).isEqualTo(sample);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testToJson_normalString() {\n",
      "        RemotingSerializable serializable = new RemotingSerializable() {\n",
      "            private List<String> stringList = Arrays.asList(\"a\", \"o\", \"e\", \"i\", \"u\", \"v\");\n",
      "\n",
      "            public List<String> getStringList() {\n",
      "                return stringList;\n",
      "            }\n",
      "\n",
      "            public void setStringList(List<String> stringList) {\n",
      "                this.stringList = stringList;\n",
      "            }\n",
      "        };\n",
      "\n",
      "        String string = serializable.toJson();\n",
      "\n",
      "        assertThat(string).isEqualTo(\"{\\\"stringList\\\":[\\\"a\\\",\\\"o\\\",\\\"e\\\",\\\"i\\\",\\\"u\\\",\\\"v\\\"]}\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testToJson_prettyString() {\n",
      "        RemotingSerializable serializable = new RemotingSerializable() {\n",
      "            private List<String> stringList = Arrays.asList(\"a\", \"o\", \"e\", \"i\", \"u\", \"v\");\n",
      "\n",
      "            public List<String> getStringList() {\n",
      "                return stringList;\n",
      "            }\n",
      "\n",
      "            public void setStringList(List<String> stringList) {\n",
      "                this.stringList = stringList;\n",
      "            }\n",
      "        };\n",
      "\n",
      "        String prettyString = serializable.toJson(true);\n",
      "\n",
      "        assertThat(prettyString).isEqualTo(\"{\\n\" +\n",
      "            \"\\t\\\"stringList\\\":[\\n\" +\n",
      "            \"\\t\\t\\\"a\\\",\\n\" +\n",
      "            \"\\t\\t\\\"o\\\",\\n\" +\n",
      "            \"\\t\\t\\\"e\\\",\\n\" +\n",
      "            \"\\t\\t\\\"i\\\",\\n\" +\n",
      "            \"\\t\\t\\\"u\\\",\\n\" +\n",
      "            \"\\t\\t\\\"v\\\"\\n\" +\n",
      "            \"\\t]\\n\" +\n",
      "            \"}\");\n",
      "    }\n",
      "\n",
      "}\n",
      "\n",
      "class Sample {\n",
      "    private String stringValue = \"string\";\n",
      "    private int intValue = 2333;\n",
      "    private Integer integerValue = 666;\n",
      "    private double[] doubleArray = new double[] {0.618, 1.618};\n",
      "    private List<String> stringList = Arrays.asList(\"a\", \"o\", \"e\", \"i\", \"u\", \"v\");\n",
      "\n",
      "    public String getStringValue() {\n",
      "        return stringValue;\n",
      "    }\n",
      "\n",
      "    public void setStringValue(String stringValue) {\n",
      "        this.stringValue = stringValue;\n",
      "    }\n",
      "\n",
      "    public int getIntValue() {\n",
      "        return intValue;\n",
      "    }\n",
      "\n",
      "    public void setIntValue(int intValue) {\n",
      "        this.intValue = intValue;\n",
      "    }\n",
      "\n",
      "    public Integer getIntegerValue() {\n",
      "        return integerValue;\n",
      "    }\n",
      "\n",
      "    public void setIntegerValue(Integer integerValue) {\n",
      "        this.integerValue = integerValue;\n",
      "    }\n",
      "\n",
      "    public double[] getDoubleArray() {\n",
      "        return doubleArray;\n",
      "    }\n",
      "\n",
      "    public void setDoubleArray(double[] doubleArray) {\n",
      "        this.doubleArray = doubleArray;\n",
      "    }\n",
      "\n",
      "    public List<String> getStringList() {\n",
      "        return stringList;\n",
      "    }\n",
      "\n",
      "    public void setStringList(List<String> stringList) {\n",
      "        this.stringList = stringList;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public boolean equals(Object o) {\n",
      "        if (this == o)\n",
      "            return true;\n",
      "        if (o == null || getClass() != o.getClass())\n",
      "            return false;\n",
      "\n",
      "        Sample sample = (Sample) o;\n",
      "\n",
      "        if (intValue != sample.intValue)\n",
      "            return false;\n",
      "        if (stringValue != null ? !stringValue.equals(sample.stringValue) : sample.stringValue != null)\n",
      "            return false;\n",
      "        if (integerValue != null ? !integerValue.equals(sample.integerValue) : sample.integerValue != null)\n",
      "            return false;\n",
      "        if (!Arrays.equals(doubleArray, sample.doubleArray))\n",
      "            return false;\n",
      "        return stringList != null ? stringList.equals(sample.stringList) : sample.stringList == null;\n",
      "\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public int hashCode() {\n",
      "        int result = stringValue != null ? stringValue.hashCode() : 0;\n",
      "        result = 31 * result + intValue;\n",
      "        result = 31 * result + (integerValue != null ? integerValue.hashCode() : 0);\n",
      "        result = 31 * result + Arrays.hashCode(doubleArray);\n",
      "        result = 31 * result + (stringList != null ? stringList.hashCode() : 0);\n",
      "        return result;\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "RemotingSerializable::::encode(java.lang.Object)": [
        28,
        34
      ],
      "RemotingSerializable::::toJson(java.lang.Object,boolean)": [
        36,
        38
      ],
      "RemotingSerializable::::decode(byte[],java.lang.Class<T>)": [
        40,
        43
      ],
      "RemotingSerializable::::fromJson(java.lang.String,java.lang.Class<T>)": [
        45,
        47
      ],
      "RemotingSerializable::::encode()": [
        49,
        55
      ],
      "RemotingSerializable::::toJson()": [
        57,
        59
      ],
      "RemotingSerializable::::toJson(boolean)": [
        61,
        63
      ]
    },
    "test_method_lines_dic": {
      "RemotingSerializableTest::::testEncodeAndDecode_HeterogeneousClass()": [
        26,
        34
      ],
      "RemotingSerializableTest::::testToJson_normalString()": [
        36,
        53
      ],
      "RemotingSerializableTest::::testToJson_prettyString()": [
        55,
        81
      ],
      "Sample::::getStringValue()": [
        92,
        94
      ],
      "Sample::::setStringValue(java.lang.String)": [
        96,
        98
      ],
      "Sample::::getIntValue()": [
        100,
        102
      ],
      "Sample::::setIntValue(int)": [
        104,
        106
      ],
      "Sample::::getIntegerValue()": [
        108,
        110
      ],
      "Sample::::setIntegerValue(java.lang.Integer)": [
        112,
        114
      ],
      "Sample::::getDoubleArray()": [
        116,
        118
      ],
      "Sample::::setDoubleArray(double[])": [
        120,
        122
      ],
      "Sample::::getStringList()": [
        124,
        126
      ],
      "Sample::::setStringList(java.util.List<java.lang.String>)": [
        128,
        130
      ],
      "Sample::::equals(java.lang.Object)": [
        132,
        151
      ],
      "Sample::::hashCode()": [
        153,
        161
      ]
    },
    "reverse_method_lines_dic": {
      "28": "RemotingSerializable::::encode(java.lang.Object)",
      "29": "RemotingSerializable::::encode(java.lang.Object)",
      "30": "RemotingSerializable::::encode(java.lang.Object)",
      "31": "RemotingSerializable::::encode(java.lang.Object)",
      "32": "RemotingSerializable::::encode(java.lang.Object)",
      "33": "RemotingSerializable::::encode(java.lang.Object)",
      "34": "RemotingSerializable::::encode(java.lang.Object)",
      "36": "RemotingSerializable::::toJson(java.lang.Object,boolean)",
      "37": "RemotingSerializable::::toJson(java.lang.Object,boolean)",
      "38": "RemotingSerializable::::toJson(java.lang.Object,boolean)",
      "40": "RemotingSerializable::::decode(byte[],java.lang.Class<T>)",
      "41": "RemotingSerializable::::decode(byte[],java.lang.Class<T>)",
      "42": "RemotingSerializable::::decode(byte[],java.lang.Class<T>)",
      "43": "RemotingSerializable::::decode(byte[],java.lang.Class<T>)",
      "45": "RemotingSerializable::::fromJson(java.lang.String,java.lang.Class<T>)",
      "46": "RemotingSerializable::::fromJson(java.lang.String,java.lang.Class<T>)",
      "47": "RemotingSerializable::::fromJson(java.lang.String,java.lang.Class<T>)",
      "49": "RemotingSerializable::::encode()",
      "50": "RemotingSerializable::::encode()",
      "51": "RemotingSerializable::::encode()",
      "52": "RemotingSerializable::::encode()",
      "53": "RemotingSerializable::::encode()",
      "54": "RemotingSerializable::::encode()",
      "55": "RemotingSerializable::::encode()",
      "57": "RemotingSerializable::::toJson()",
      "58": "RemotingSerializable::::toJson()",
      "59": "RemotingSerializable::::toJson()",
      "61": "RemotingSerializable::::toJson(boolean)",
      "62": "RemotingSerializable::::toJson(boolean)",
      "63": "RemotingSerializable::::toJson(boolean)"
    },
    "test_reverse_method_lines_dic": {
      "26": "RemotingSerializableTest::::testEncodeAndDecode_HeterogeneousClass()",
      "27": "RemotingSerializableTest::::testEncodeAndDecode_HeterogeneousClass()",
      "28": "RemotingSerializableTest::::testEncodeAndDecode_HeterogeneousClass()",
      "29": "RemotingSerializableTest::::testEncodeAndDecode_HeterogeneousClass()",
      "30": "RemotingSerializableTest::::testEncodeAndDecode_HeterogeneousClass()",
      "31": "RemotingSerializableTest::::testEncodeAndDecode_HeterogeneousClass()",
      "32": "RemotingSerializableTest::::testEncodeAndDecode_HeterogeneousClass()",
      "33": "RemotingSerializableTest::::testEncodeAndDecode_HeterogeneousClass()",
      "34": "RemotingSerializableTest::::testEncodeAndDecode_HeterogeneousClass()",
      "36": "RemotingSerializableTest::::testToJson_normalString()",
      "37": "RemotingSerializableTest::::testToJson_normalString()",
      "38": "RemotingSerializableTest::::testToJson_normalString()",
      "39": "RemotingSerializableTest::::testToJson_normalString()",
      "40": "RemotingSerializableTest::::testToJson_normalString()",
      "41": "RemotingSerializableTest::::testToJson_normalString()",
      "42": "RemotingSerializableTest::::testToJson_normalString()",
      "43": "RemotingSerializableTest::::testToJson_normalString()",
      "44": "RemotingSerializableTest::::testToJson_normalString()",
      "45": "RemotingSerializableTest::::testToJson_normalString()",
      "46": "RemotingSerializableTest::::testToJson_normalString()",
      "47": "RemotingSerializableTest::::testToJson_normalString()",
      "48": "RemotingSerializableTest::::testToJson_normalString()",
      "49": "RemotingSerializableTest::::testToJson_normalString()",
      "50": "RemotingSerializableTest::::testToJson_normalString()",
      "51": "RemotingSerializableTest::::testToJson_normalString()",
      "52": "RemotingSerializableTest::::testToJson_normalString()",
      "53": "RemotingSerializableTest::::testToJson_normalString()",
      "55": "RemotingSerializableTest::::testToJson_prettyString()",
      "56": "RemotingSerializableTest::::testToJson_prettyString()",
      "57": "RemotingSerializableTest::::testToJson_prettyString()",
      "58": "RemotingSerializableTest::::testToJson_prettyString()",
      "59": "RemotingSerializableTest::::testToJson_prettyString()",
      "60": "RemotingSerializableTest::::testToJson_prettyString()",
      "61": "RemotingSerializableTest::::testToJson_prettyString()",
      "62": "RemotingSerializableTest::::testToJson_prettyString()",
      "63": "RemotingSerializableTest::::testToJson_prettyString()",
      "64": "RemotingSerializableTest::::testToJson_prettyString()",
      "65": "RemotingSerializableTest::::testToJson_prettyString()",
      "66": "RemotingSerializableTest::::testToJson_prettyString()",
      "67": "RemotingSerializableTest::::testToJson_prettyString()",
      "68": "RemotingSerializableTest::::testToJson_prettyString()",
      "69": "RemotingSerializableTest::::testToJson_prettyString()",
      "70": "RemotingSerializableTest::::testToJson_prettyString()",
      "71": "RemotingSerializableTest::::testToJson_prettyString()",
      "72": "RemotingSerializableTest::::testToJson_prettyString()",
      "73": "RemotingSerializableTest::::testToJson_prettyString()",
      "74": "RemotingSerializableTest::::testToJson_prettyString()",
      "75": "RemotingSerializableTest::::testToJson_prettyString()",
      "76": "RemotingSerializableTest::::testToJson_prettyString()",
      "77": "RemotingSerializableTest::::testToJson_prettyString()",
      "78": "RemotingSerializableTest::::testToJson_prettyString()",
      "79": "RemotingSerializableTest::::testToJson_prettyString()",
      "80": "RemotingSerializableTest::::testToJson_prettyString()",
      "81": "RemotingSerializableTest::::testToJson_prettyString()",
      "92": "Sample::::getStringValue()",
      "93": "Sample::::getStringValue()",
      "94": "Sample::::getStringValue()",
      "96": "Sample::::setStringValue(java.lang.String)",
      "97": "Sample::::setStringValue(java.lang.String)",
      "98": "Sample::::setStringValue(java.lang.String)",
      "100": "Sample::::getIntValue()",
      "101": "Sample::::getIntValue()",
      "102": "Sample::::getIntValue()",
      "104": "Sample::::setIntValue(int)",
      "105": "Sample::::setIntValue(int)",
      "106": "Sample::::setIntValue(int)",
      "108": "Sample::::getIntegerValue()",
      "109": "Sample::::getIntegerValue()",
      "110": "Sample::::getIntegerValue()",
      "112": "Sample::::setIntegerValue(java.lang.Integer)",
      "113": "Sample::::setIntegerValue(java.lang.Integer)",
      "114": "Sample::::setIntegerValue(java.lang.Integer)",
      "116": "Sample::::getDoubleArray()",
      "117": "Sample::::getDoubleArray()",
      "118": "Sample::::getDoubleArray()",
      "120": "Sample::::setDoubleArray(double[])",
      "121": "Sample::::setDoubleArray(double[])",
      "122": "Sample::::setDoubleArray(double[])",
      "124": "Sample::::getStringList()",
      "125": "Sample::::getStringList()",
      "126": "Sample::::getStringList()",
      "128": "Sample::::setStringList(java.util.List<java.lang.String>)",
      "129": "Sample::::setStringList(java.util.List<java.lang.String>)",
      "130": "Sample::::setStringList(java.util.List<java.lang.String>)",
      "132": "Sample::::equals(java.lang.Object)",
      "133": "Sample::::equals(java.lang.Object)",
      "134": "Sample::::equals(java.lang.Object)",
      "135": "Sample::::equals(java.lang.Object)",
      "136": "Sample::::equals(java.lang.Object)",
      "137": "Sample::::equals(java.lang.Object)",
      "138": "Sample::::equals(java.lang.Object)",
      "139": "Sample::::equals(java.lang.Object)",
      "140": "Sample::::equals(java.lang.Object)",
      "141": "Sample::::equals(java.lang.Object)",
      "142": "Sample::::equals(java.lang.Object)",
      "143": "Sample::::equals(java.lang.Object)",
      "144": "Sample::::equals(java.lang.Object)",
      "145": "Sample::::equals(java.lang.Object)",
      "146": "Sample::::equals(java.lang.Object)",
      "147": "Sample::::equals(java.lang.Object)",
      "148": "Sample::::equals(java.lang.Object)",
      "149": "Sample::::equals(java.lang.Object)",
      "150": "Sample::::equals(java.lang.Object)",
      "151": "Sample::::equals(java.lang.Object)",
      "153": "Sample::::hashCode()",
      "154": "Sample::::hashCode()",
      "155": "Sample::::hashCode()",
      "156": "Sample::::hashCode()",
      "157": "Sample::::hashCode()",
      "158": "Sample::::hashCode()",
      "159": "Sample::::hashCode()",
      "160": "Sample::::hashCode()",
      "161": "Sample::::hashCode()"
    },
    "tests": [
      {
        "test_lines": [
          26,
          34
        ],
        "covered_lines": [
          26,
          29,
          30,
          31,
          37,
          41,
          42,
          46
        ]
      },
      {
        "test_lines": [
          36,
          53
        ],
        "covered_lines": [
          25,
          26,
          37,
          58,
          62
        ]
      },
      {
        "test_lines": [
          55,
          81
        ],
        "covered_lines": [
          25,
          26,
          37,
          62
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RocketMQSerializable.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.remoting.protocol;\n",
      "\n",
      "import java.nio.ByteBuffer;\n",
      "import java.nio.charset.Charset;\n",
      "import java.util.HashMap;\n",
      "import java.util.Iterator;\n",
      "import java.util.Map;\n",
      "\n",
      "public class RocketMQSerializable {\n",
      "    private static final Charset CHARSET_UTF8 = Charset.forName(\"UTF-8\");\n",
      "\n",
      "    public static byte[] rocketMQProtocolEncode(RemotingCommand cmd) {\n",
      "        // String remark\n",
      "        byte[] remarkBytes = null;\n",
      "        int remarkLen = 0;\n",
      "        if (cmd.getRemark() != null && cmd.getRemark().length() > 0) {\n",
      "            remarkBytes = cmd.getRemark().getBytes(CHARSET_UTF8);\n",
      "            remarkLen = remarkBytes.length;\n",
      "        }\n",
      "\n",
      "        // HashMap<String, String> extFields\n",
      "        byte[] extFieldsBytes = null;\n",
      "        int extLen = 0;\n",
      "        if (cmd.getExtFields() != null && !cmd.getExtFields().isEmpty()) {\n",
      "            extFieldsBytes = mapSerialize(cmd.getExtFields());\n",
      "            extLen = extFieldsBytes.length;\n",
      "        }\n",
      "\n",
      "        int totalLen = calTotalLen(remarkLen, extLen);\n",
      "\n",
      "        ByteBuffer headerBuffer = ByteBuffer.allocate(totalLen);\n",
      "        // int code(~32767)\n",
      "        headerBuffer.putShort((short) cmd.getCode());\n",
      "        // LanguageCode language\n",
      "        headerBuffer.put(cmd.getLanguage().getCode());\n",
      "        // int version(~32767)\n",
      "        headerBuffer.putShort((short) cmd.getVersion());\n",
      "        // int opaque\n",
      "        headerBuffer.putInt(cmd.getOpaque());\n",
      "        // int flag\n",
      "        headerBuffer.putInt(cmd.getFlag());\n",
      "        // String remark\n",
      "        if (remarkBytes != null) {\n",
      "            headerBuffer.putInt(remarkBytes.length);\n",
      "            headerBuffer.put(remarkBytes);\n",
      "        } else {\n",
      "            headerBuffer.putInt(0);\n",
      "        }\n",
      "        // HashMap<String, String> extFields;\n",
      "        if (extFieldsBytes != null) {\n",
      "            headerBuffer.putInt(extFieldsBytes.length);\n",
      "            headerBuffer.put(extFieldsBytes);\n",
      "        } else {\n",
      "            headerBuffer.putInt(0);\n",
      "        }\n",
      "\n",
      "        return headerBuffer.array();\n",
      "    }\n",
      "\n",
      "    public static byte[] mapSerialize(HashMap<String, String> map) {\n",
      "        // keySize+key+valSize+val\n",
      "        if (null == map || map.isEmpty())\n",
      "            return null;\n",
      "\n",
      "        int totalLength = 0;\n",
      "        int kvLength;\n",
      "        Iterator<Map.Entry<String, String>> it = map.entrySet().iterator();\n",
      "        while (it.hasNext()) {\n",
      "            Map.Entry<String, String> entry = it.next();\n",
      "            if (entry.getKey() != null && entry.getValue() != null) {\n",
      "                kvLength =\n",
      "                    // keySize + Key\n",
      "                    2 + entry.getKey().getBytes(CHARSET_UTF8).length\n",
      "                        // valSize + val\n",
      "                        + 4 + entry.getValue().getBytes(CHARSET_UTF8).length;\n",
      "                totalLength += kvLength;\n",
      "            }\n",
      "        }\n",
      "\n",
      "        ByteBuffer content = ByteBuffer.allocate(totalLength);\n",
      "        byte[] key;\n",
      "        byte[] val;\n",
      "        it = map.entrySet().iterator();\n",
      "        while (it.hasNext()) {\n",
      "            Map.Entry<String, String> entry = it.next();\n",
      "            if (entry.getKey() != null && entry.getValue() != null) {\n",
      "                key = entry.getKey().getBytes(CHARSET_UTF8);\n",
      "                val = entry.getValue().getBytes(CHARSET_UTF8);\n",
      "\n",
      "                content.putShort((short) key.length);\n",
      "                content.put(key);\n",
      "\n",
      "                content.putInt(val.length);\n",
      "                content.put(val);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        return content.array();\n",
      "    }\n",
      "\n",
      "    private static int calTotalLen(int remark, int ext) {\n",
      "        // int code(~32767)\n",
      "        int length = 2\n",
      "            // LanguageCode language\n",
      "            + 1\n",
      "            // int version(~32767)\n",
      "            + 2\n",
      "            // int opaque\n",
      "            + 4\n",
      "            // int flag\n",
      "            + 4\n",
      "            // String remark\n",
      "            + 4 + remark\n",
      "            // HashMap<String, String> extFields\n",
      "            + 4 + ext;\n",
      "\n",
      "        return length;\n",
      "    }\n",
      "\n",
      "    public static RemotingCommand rocketMQProtocolDecode(final byte[] headerArray) {\n",
      "        RemotingCommand cmd = new RemotingCommand();\n",
      "        ByteBuffer headerBuffer = ByteBuffer.wrap(headerArray);\n",
      "        // int code(~32767)\n",
      "        cmd.setCode(headerBuffer.getShort());\n",
      "        // LanguageCode language\n",
      "        cmd.setLanguage(LanguageCode.valueOf(headerBuffer.get()));\n",
      "        // int version(~32767)\n",
      "        cmd.setVersion(headerBuffer.getShort());\n",
      "        // int opaque\n",
      "        cmd.setOpaque(headerBuffer.getInt());\n",
      "        // int flag\n",
      "        cmd.setFlag(headerBuffer.getInt());\n",
      "        // String remark\n",
      "        int remarkLength = headerBuffer.getInt();\n",
      "        if (remarkLength > 0) {\n",
      "            byte[] remarkContent = new byte[remarkLength];\n",
      "            headerBuffer.get(remarkContent);\n",
      "            cmd.setRemark(new String(remarkContent, CHARSET_UTF8));\n",
      "        }\n",
      "\n",
      "        // HashMap<String, String> extFields\n",
      "        int extFieldsLength = headerBuffer.getInt();\n",
      "        if (extFieldsLength > 0) {\n",
      "            byte[] extFieldsBytes = new byte[extFieldsLength];\n",
      "            headerBuffer.get(extFieldsBytes);\n",
      "            cmd.setExtFields(mapDeserialize(extFieldsBytes));\n",
      "        }\n",
      "        return cmd;\n",
      "    }\n",
      "\n",
      "    public static HashMap<String, String> mapDeserialize(byte[] bytes) {\n",
      "        if (bytes == null || bytes.length <= 0)\n",
      "            return null;\n",
      "\n",
      "        HashMap<String, String> map = new HashMap<String, String>();\n",
      "        ByteBuffer byteBuffer = ByteBuffer.wrap(bytes);\n",
      "\n",
      "        short keySize;\n",
      "        byte[] keyContent;\n",
      "        int valSize;\n",
      "        byte[] valContent;\n",
      "        while (byteBuffer.hasRemaining()) {\n",
      "            keySize = byteBuffer.getShort();\n",
      "            keyContent = new byte[keySize];\n",
      "            byteBuffer.get(keyContent);\n",
      "\n",
      "            valSize = byteBuffer.getInt();\n",
      "            valContent = new byte[valSize];\n",
      "            byteBuffer.get(valContent);\n",
      "\n",
      "            map.put(new String(keyContent, CHARSET_UTF8), new String(valContent, CHARSET_UTF8));\n",
      "        }\n",
      "        return map;\n",
      "    }\n",
      "\n",
      "    public static boolean isBlank(String str) {\n",
      "        int strLen;\n",
      "        if (str == null || (strLen = str.length()) == 0) {\n",
      "            return true;\n",
      "        }\n",
      "        for (int i = 0; i < strLen; i++) {\n",
      "            if (!Character.isWhitespace(str.charAt(i))) {\n",
      "                return false;\n",
      "            }\n",
      "        }\n",
      "        return true;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.remoting.protocol;\n",
      "\n",
      "import java.util.HashMap;\n",
      "import org.junit.Test;\n",
      "\n",
      "import static org.assertj.core.api.Assertions.assertThat;\n",
      "\n",
      "public class RocketMQSerializableTest {\n",
      "    @Test\n",
      "    public void testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithoutExtFields() {\n",
      "        System.setProperty(RemotingCommand.REMOTING_VERSION_KEY, \"2333\");\n",
      "\n",
      "        //org.apache.rocketmq.common.protocol.RequestCode.REGISTER_BROKER\n",
      "        int code = 103;\n",
      "        RemotingCommand cmd = RemotingCommand.createRequestCommand(code, new SampleCommandCustomHeader());\n",
      "        cmd.setSerializeTypeCurrentRPC(SerializeType.ROCKETMQ);\n",
      "\n",
      "        byte[] result = RocketMQSerializable.rocketMQProtocolEncode(cmd);\n",
      "        int opaque = cmd.getOpaque();\n",
      "\n",
      "        assertThat(result).hasSize(21);\n",
      "        assertThat(parseToShort(result, 0)).isEqualTo((short) code); //code\n",
      "        assertThat(result[2]).isEqualTo(LanguageCode.JAVA.getCode()); //language\n",
      "        assertThat(parseToShort(result, 3)).isEqualTo((short) 2333); //version\n",
      "        assertThat(parseToInt(result, 9)).isEqualTo(0); //flag\n",
      "        assertThat(parseToInt(result, 13)).isEqualTo(0); //empty remark\n",
      "        assertThat(parseToInt(result, 17)).isEqualTo(0); //empty extFields\n",
      "\n",
      "        RemotingCommand decodedCommand = RocketMQSerializable.rocketMQProtocolDecode(result);\n",
      "\n",
      "        assertThat(decodedCommand.getCode()).isEqualTo(code);\n",
      "        assertThat(decodedCommand.getLanguage()).isEqualTo(LanguageCode.JAVA);\n",
      "        assertThat(decodedCommand.getVersion()).isEqualTo(2333);\n",
      "        assertThat(decodedCommand.getOpaque()).isEqualTo(opaque);\n",
      "        assertThat(decodedCommand.getFlag()).isEqualTo(0);\n",
      "        assertThat(decodedCommand.getRemark()).isNull();\n",
      "        assertThat(decodedCommand.getExtFields()).isNull();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testRocketMQProtocolEncodeAndDecode_WithRemarkWithoutExtFields() {\n",
      "        System.setProperty(RemotingCommand.REMOTING_VERSION_KEY, \"2333\");\n",
      "\n",
      "        //org.apache.rocketmq.common.protocol.RequestCode.REGISTER_BROKER\n",
      "        int code = 103;\n",
      "        RemotingCommand cmd = RemotingCommand.createRequestCommand(code,\n",
      "            new SampleCommandCustomHeader());\n",
      "        cmd.setSerializeTypeCurrentRPC(SerializeType.ROCKETMQ);\n",
      "        cmd.setRemark(\"Sample Remark\");\n",
      "\n",
      "        byte[] result = RocketMQSerializable.rocketMQProtocolEncode(cmd);\n",
      "        int opaque = cmd.getOpaque();\n",
      "\n",
      "        assertThat(result).hasSize(34);\n",
      "        assertThat(parseToShort(result, 0)).isEqualTo((short) code); //code\n",
      "        assertThat(result[2]).isEqualTo(LanguageCode.JAVA.getCode()); //language\n",
      "        assertThat(parseToShort(result, 3)).isEqualTo((short) 2333); //version\n",
      "        assertThat(parseToInt(result, 9)).isEqualTo(0); //flag\n",
      "        assertThat(parseToInt(result, 13)).isEqualTo(13); //remark length\n",
      "\n",
      "        byte[] remarkArray = new byte[13];\n",
      "        System.arraycopy(result, 17, remarkArray, 0, 13);\n",
      "        assertThat(new String(remarkArray)).isEqualTo(\"Sample Remark\");\n",
      "\n",
      "        assertThat(parseToInt(result, 30)).isEqualTo(0); //empty extFields\n",
      "\n",
      "        RemotingCommand decodedCommand = RocketMQSerializable.rocketMQProtocolDecode(result);\n",
      "\n",
      "        assertThat(decodedCommand.getCode()).isEqualTo(code);\n",
      "        assertThat(decodedCommand.getLanguage()).isEqualTo(LanguageCode.JAVA);\n",
      "        assertThat(decodedCommand.getVersion()).isEqualTo(2333);\n",
      "        assertThat(decodedCommand.getOpaque()).isEqualTo(opaque);\n",
      "        assertThat(decodedCommand.getFlag()).isEqualTo(0);\n",
      "        assertThat(decodedCommand.getRemark()).contains(\"Sample Remark\");\n",
      "        assertThat(decodedCommand.getExtFields()).isNull();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithExtFields() {\n",
      "        System.setProperty(RemotingCommand.REMOTING_VERSION_KEY, \"2333\");\n",
      "\n",
      "        //org.apache.rocketmq.common.protocol.RequestCode.REGISTER_BROKER\n",
      "        int code = 103;\n",
      "        RemotingCommand cmd = RemotingCommand.createRequestCommand(code,\n",
      "            new SampleCommandCustomHeader());\n",
      "        cmd.setSerializeTypeCurrentRPC(SerializeType.ROCKETMQ);\n",
      "        cmd.addExtField(\"key\", \"value\");\n",
      "\n",
      "        byte[] result = RocketMQSerializable.rocketMQProtocolEncode(cmd);\n",
      "        int opaque = cmd.getOpaque();\n",
      "\n",
      "        assertThat(result).hasSize(35);\n",
      "        assertThat(parseToShort(result, 0)).isEqualTo((short) code); //code\n",
      "        assertThat(result[2]).isEqualTo(LanguageCode.JAVA.getCode()); //language\n",
      "        assertThat(parseToShort(result, 3)).isEqualTo((short) 2333); //version\n",
      "        assertThat(parseToInt(result, 9)).isEqualTo(0); //flag\n",
      "        assertThat(parseToInt(result, 13)).isEqualTo(0); //empty remark\n",
      "        assertThat(parseToInt(result, 17)).isEqualTo(14); //extFields length\n",
      "\n",
      "        byte[] extFieldsArray = new byte[14];\n",
      "        System.arraycopy(result, 21, extFieldsArray, 0, 14);\n",
      "        HashMap<String, String> extFields = RocketMQSerializable.mapDeserialize(extFieldsArray);\n",
      "        assertThat(extFields).contains(new HashMap.SimpleEntry(\"key\", \"value\"));\n",
      "\n",
      "        RemotingCommand decodedCommand = RocketMQSerializable.rocketMQProtocolDecode(result);\n",
      "\n",
      "        assertThat(decodedCommand.getCode()).isEqualTo(code);\n",
      "        assertThat(decodedCommand.getLanguage()).isEqualTo(LanguageCode.JAVA);\n",
      "        assertThat(decodedCommand.getVersion()).isEqualTo(2333);\n",
      "        assertThat(decodedCommand.getOpaque()).isEqualTo(opaque);\n",
      "        assertThat(decodedCommand.getFlag()).isEqualTo(0);\n",
      "        assertThat(decodedCommand.getRemark()).isNull();\n",
      "        assertThat(decodedCommand.getExtFields()).contains(new HashMap.SimpleEntry(\"key\", \"value\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testIsBlank_NotBlank() {\n",
      "        assertThat(RocketMQSerializable.isBlank(\"bar\")).isFalse();\n",
      "        assertThat(RocketMQSerializable.isBlank(\"  A  \")).isFalse();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testIsBlank_Blank() {\n",
      "        assertThat(RocketMQSerializable.isBlank(null)).isTrue();\n",
      "        assertThat(RocketMQSerializable.isBlank(\"\")).isTrue();\n",
      "        assertThat(RocketMQSerializable.isBlank(\"  \")).isTrue();\n",
      "    }\n",
      "\n",
      "    private short parseToShort(byte[] array, int index) {\n",
      "        return (short) (array[index] * 256 + array[++index]);\n",
      "    }\n",
      "\n",
      "    private int parseToInt(byte[] array, int index) {\n",
      "        return array[index] * 16777216 + array[++index] * 65536 + array[++index] * 256\n",
      "            + array[++index];\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)": [
        28,
        74
      ],
      "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)": [
        76,
        115
      ],
      "RocketMQSerializable::::calTotalLen(int,int)": [
        117,
        134
      ],
      "RocketMQSerializable::::rocketMQProtocolDecode(byte[])": [
        136,
        165
      ],
      "RocketMQSerializable::::mapDeserialize(byte[])": [
        167,
        190
      ],
      "RocketMQSerializable::::isBlank(java.lang.String)": [
        192,
        203
      ]
    },
    "test_method_lines_dic": {
      "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithoutExtFields()": [
        25,
        54
      ],
      "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithRemarkWithoutExtFields()": [
        56,
        92
      ],
      "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithExtFields()": [
        94,
        130
      ],
      "RocketMQSerializableTest::::testIsBlank_NotBlank()": [
        132,
        136
      ],
      "RocketMQSerializableTest::::testIsBlank_Blank()": [
        138,
        143
      ],
      "RocketMQSerializableTest::::parseToShort(byte[],int)": [
        145,
        147
      ],
      "RocketMQSerializableTest::::parseToInt(byte[],int)": [
        149,
        152
      ]
    },
    "reverse_method_lines_dic": {
      "28": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "29": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "30": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "31": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "32": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "33": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "34": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "35": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "36": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "37": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "38": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "39": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "40": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "41": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "42": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "43": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "44": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "45": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "46": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "47": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "48": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "49": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "50": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "51": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "52": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "53": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "54": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "55": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "56": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "57": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "58": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "59": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "60": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "61": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "62": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "63": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "64": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "65": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "66": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "67": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "68": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "69": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "70": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "71": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "72": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "73": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "74": "RocketMQSerializable::::rocketMQProtocolEncode(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "76": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "77": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "78": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "79": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "80": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "81": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "82": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "83": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "84": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "85": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "86": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "87": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "88": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "89": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "90": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "91": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "92": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "93": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "94": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "95": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "96": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "97": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "98": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "99": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "100": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "101": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "102": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "103": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "104": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "105": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "106": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "107": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "108": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "109": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "110": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "111": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "112": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "113": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "114": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "115": "RocketMQSerializable::::mapSerialize(java.util.HashMap<java.lang.String, java.lang.String>)",
      "117": "RocketMQSerializable::::calTotalLen(int,int)",
      "118": "RocketMQSerializable::::calTotalLen(int,int)",
      "119": "RocketMQSerializable::::calTotalLen(int,int)",
      "120": "RocketMQSerializable::::calTotalLen(int,int)",
      "121": "RocketMQSerializable::::calTotalLen(int,int)",
      "122": "RocketMQSerializable::::calTotalLen(int,int)",
      "123": "RocketMQSerializable::::calTotalLen(int,int)",
      "124": "RocketMQSerializable::::calTotalLen(int,int)",
      "125": "RocketMQSerializable::::calTotalLen(int,int)",
      "126": "RocketMQSerializable::::calTotalLen(int,int)",
      "127": "RocketMQSerializable::::calTotalLen(int,int)",
      "128": "RocketMQSerializable::::calTotalLen(int,int)",
      "129": "RocketMQSerializable::::calTotalLen(int,int)",
      "130": "RocketMQSerializable::::calTotalLen(int,int)",
      "131": "RocketMQSerializable::::calTotalLen(int,int)",
      "132": "RocketMQSerializable::::calTotalLen(int,int)",
      "133": "RocketMQSerializable::::calTotalLen(int,int)",
      "134": "RocketMQSerializable::::calTotalLen(int,int)",
      "136": "RocketMQSerializable::::rocketMQProtocolDecode(byte[])",
      "137": "RocketMQSerializable::::rocketMQProtocolDecode(byte[])",
      "138": "RocketMQSerializable::::rocketMQProtocolDecode(byte[])",
      "139": "RocketMQSerializable::::rocketMQProtocolDecode(byte[])",
      "140": "RocketMQSerializable::::rocketMQProtocolDecode(byte[])",
      "141": "RocketMQSerializable::::rocketMQProtocolDecode(byte[])",
      "142": "RocketMQSerializable::::rocketMQProtocolDecode(byte[])",
      "143": "RocketMQSerializable::::rocketMQProtocolDecode(byte[])",
      "144": "RocketMQSerializable::::rocketMQProtocolDecode(byte[])",
      "145": "RocketMQSerializable::::rocketMQProtocolDecode(byte[])",
      "146": "RocketMQSerializable::::rocketMQProtocolDecode(byte[])",
      "147": "RocketMQSerializable::::rocketMQProtocolDecode(byte[])",
      "148": "RocketMQSerializable::::rocketMQProtocolDecode(byte[])",
      "149": "RocketMQSerializable::::rocketMQProtocolDecode(byte[])",
      "150": "RocketMQSerializable::::rocketMQProtocolDecode(byte[])",
      "151": "RocketMQSerializable::::rocketMQProtocolDecode(byte[])",
      "152": "RocketMQSerializable::::rocketMQProtocolDecode(byte[])",
      "153": "RocketMQSerializable::::rocketMQProtocolDecode(byte[])",
      "154": "RocketMQSerializable::::rocketMQProtocolDecode(byte[])",
      "155": "RocketMQSerializable::::rocketMQProtocolDecode(byte[])",
      "156": "RocketMQSerializable::::rocketMQProtocolDecode(byte[])",
      "157": "RocketMQSerializable::::rocketMQProtocolDecode(byte[])",
      "158": "RocketMQSerializable::::rocketMQProtocolDecode(byte[])",
      "159": "RocketMQSerializable::::rocketMQProtocolDecode(byte[])",
      "160": "RocketMQSerializable::::rocketMQProtocolDecode(byte[])",
      "161": "RocketMQSerializable::::rocketMQProtocolDecode(byte[])",
      "162": "RocketMQSerializable::::rocketMQProtocolDecode(byte[])",
      "163": "RocketMQSerializable::::rocketMQProtocolDecode(byte[])",
      "164": "RocketMQSerializable::::rocketMQProtocolDecode(byte[])",
      "165": "RocketMQSerializable::::rocketMQProtocolDecode(byte[])",
      "167": "RocketMQSerializable::::mapDeserialize(byte[])",
      "168": "RocketMQSerializable::::mapDeserialize(byte[])",
      "169": "RocketMQSerializable::::mapDeserialize(byte[])",
      "170": "RocketMQSerializable::::mapDeserialize(byte[])",
      "171": "RocketMQSerializable::::mapDeserialize(byte[])",
      "172": "RocketMQSerializable::::mapDeserialize(byte[])",
      "173": "RocketMQSerializable::::mapDeserialize(byte[])",
      "174": "RocketMQSerializable::::mapDeserialize(byte[])",
      "175": "RocketMQSerializable::::mapDeserialize(byte[])",
      "176": "RocketMQSerializable::::mapDeserialize(byte[])",
      "177": "RocketMQSerializable::::mapDeserialize(byte[])",
      "178": "RocketMQSerializable::::mapDeserialize(byte[])",
      "179": "RocketMQSerializable::::mapDeserialize(byte[])",
      "180": "RocketMQSerializable::::mapDeserialize(byte[])",
      "181": "RocketMQSerializable::::mapDeserialize(byte[])",
      "182": "RocketMQSerializable::::mapDeserialize(byte[])",
      "183": "RocketMQSerializable::::mapDeserialize(byte[])",
      "184": "RocketMQSerializable::::mapDeserialize(byte[])",
      "185": "RocketMQSerializable::::mapDeserialize(byte[])",
      "186": "RocketMQSerializable::::mapDeserialize(byte[])",
      "187": "RocketMQSerializable::::mapDeserialize(byte[])",
      "188": "RocketMQSerializable::::mapDeserialize(byte[])",
      "189": "RocketMQSerializable::::mapDeserialize(byte[])",
      "190": "RocketMQSerializable::::mapDeserialize(byte[])",
      "192": "RocketMQSerializable::::isBlank(java.lang.String)",
      "193": "RocketMQSerializable::::isBlank(java.lang.String)",
      "194": "RocketMQSerializable::::isBlank(java.lang.String)",
      "195": "RocketMQSerializable::::isBlank(java.lang.String)",
      "196": "RocketMQSerializable::::isBlank(java.lang.String)",
      "197": "RocketMQSerializable::::isBlank(java.lang.String)",
      "198": "RocketMQSerializable::::isBlank(java.lang.String)",
      "199": "RocketMQSerializable::::isBlank(java.lang.String)",
      "200": "RocketMQSerializable::::isBlank(java.lang.String)",
      "201": "RocketMQSerializable::::isBlank(java.lang.String)",
      "202": "RocketMQSerializable::::isBlank(java.lang.String)",
      "203": "RocketMQSerializable::::isBlank(java.lang.String)"
    },
    "test_reverse_method_lines_dic": {
      "25": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithoutExtFields()",
      "26": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithoutExtFields()",
      "27": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithoutExtFields()",
      "28": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithoutExtFields()",
      "29": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithoutExtFields()",
      "30": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithoutExtFields()",
      "31": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithoutExtFields()",
      "32": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithoutExtFields()",
      "33": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithoutExtFields()",
      "34": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithoutExtFields()",
      "35": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithoutExtFields()",
      "36": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithoutExtFields()",
      "37": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithoutExtFields()",
      "38": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithoutExtFields()",
      "39": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithoutExtFields()",
      "40": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithoutExtFields()",
      "41": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithoutExtFields()",
      "42": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithoutExtFields()",
      "43": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithoutExtFields()",
      "44": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithoutExtFields()",
      "45": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithoutExtFields()",
      "46": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithoutExtFields()",
      "47": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithoutExtFields()",
      "48": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithoutExtFields()",
      "49": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithoutExtFields()",
      "50": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithoutExtFields()",
      "51": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithoutExtFields()",
      "52": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithoutExtFields()",
      "53": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithoutExtFields()",
      "54": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithoutExtFields()",
      "56": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithRemarkWithoutExtFields()",
      "57": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithRemarkWithoutExtFields()",
      "58": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithRemarkWithoutExtFields()",
      "59": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithRemarkWithoutExtFields()",
      "60": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithRemarkWithoutExtFields()",
      "61": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithRemarkWithoutExtFields()",
      "62": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithRemarkWithoutExtFields()",
      "63": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithRemarkWithoutExtFields()",
      "64": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithRemarkWithoutExtFields()",
      "65": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithRemarkWithoutExtFields()",
      "66": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithRemarkWithoutExtFields()",
      "67": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithRemarkWithoutExtFields()",
      "68": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithRemarkWithoutExtFields()",
      "69": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithRemarkWithoutExtFields()",
      "70": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithRemarkWithoutExtFields()",
      "71": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithRemarkWithoutExtFields()",
      "72": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithRemarkWithoutExtFields()",
      "73": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithRemarkWithoutExtFields()",
      "74": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithRemarkWithoutExtFields()",
      "75": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithRemarkWithoutExtFields()",
      "76": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithRemarkWithoutExtFields()",
      "77": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithRemarkWithoutExtFields()",
      "78": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithRemarkWithoutExtFields()",
      "79": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithRemarkWithoutExtFields()",
      "80": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithRemarkWithoutExtFields()",
      "81": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithRemarkWithoutExtFields()",
      "82": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithRemarkWithoutExtFields()",
      "83": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithRemarkWithoutExtFields()",
      "84": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithRemarkWithoutExtFields()",
      "85": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithRemarkWithoutExtFields()",
      "86": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithRemarkWithoutExtFields()",
      "87": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithRemarkWithoutExtFields()",
      "88": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithRemarkWithoutExtFields()",
      "89": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithRemarkWithoutExtFields()",
      "90": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithRemarkWithoutExtFields()",
      "91": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithRemarkWithoutExtFields()",
      "92": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithRemarkWithoutExtFields()",
      "94": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithExtFields()",
      "95": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithExtFields()",
      "96": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithExtFields()",
      "97": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithExtFields()",
      "98": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithExtFields()",
      "99": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithExtFields()",
      "100": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithExtFields()",
      "101": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithExtFields()",
      "102": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithExtFields()",
      "103": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithExtFields()",
      "104": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithExtFields()",
      "105": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithExtFields()",
      "106": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithExtFields()",
      "107": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithExtFields()",
      "108": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithExtFields()",
      "109": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithExtFields()",
      "110": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithExtFields()",
      "111": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithExtFields()",
      "112": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithExtFields()",
      "113": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithExtFields()",
      "114": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithExtFields()",
      "115": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithExtFields()",
      "116": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithExtFields()",
      "117": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithExtFields()",
      "118": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithExtFields()",
      "119": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithExtFields()",
      "120": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithExtFields()",
      "121": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithExtFields()",
      "122": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithExtFields()",
      "123": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithExtFields()",
      "124": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithExtFields()",
      "125": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithExtFields()",
      "126": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithExtFields()",
      "127": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithExtFields()",
      "128": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithExtFields()",
      "129": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithExtFields()",
      "130": "RocketMQSerializableTest::::testRocketMQProtocolEncodeAndDecode_WithoutRemarkWithExtFields()",
      "132": "RocketMQSerializableTest::::testIsBlank_NotBlank()",
      "133": "RocketMQSerializableTest::::testIsBlank_NotBlank()",
      "134": "RocketMQSerializableTest::::testIsBlank_NotBlank()",
      "135": "RocketMQSerializableTest::::testIsBlank_NotBlank()",
      "136": "RocketMQSerializableTest::::testIsBlank_NotBlank()",
      "138": "RocketMQSerializableTest::::testIsBlank_Blank()",
      "139": "RocketMQSerializableTest::::testIsBlank_Blank()",
      "140": "RocketMQSerializableTest::::testIsBlank_Blank()",
      "141": "RocketMQSerializableTest::::testIsBlank_Blank()",
      "142": "RocketMQSerializableTest::::testIsBlank_Blank()",
      "143": "RocketMQSerializableTest::::testIsBlank_Blank()",
      "145": "RocketMQSerializableTest::::parseToShort(byte[],int)",
      "146": "RocketMQSerializableTest::::parseToShort(byte[],int)",
      "147": "RocketMQSerializableTest::::parseToShort(byte[],int)",
      "149": "RocketMQSerializableTest::::parseToInt(byte[],int)",
      "150": "RocketMQSerializableTest::::parseToInt(byte[],int)",
      "151": "RocketMQSerializableTest::::parseToInt(byte[],int)",
      "152": "RocketMQSerializableTest::::parseToInt(byte[],int)"
    },
    "tests": [
      {
        "test_lines": [
          25,
          54
        ],
        "covered_lines": [
          26,
          30,
          31,
          32,
          38,
          39,
          40,
          45,
          47,
          49,
          51,
          53,
          55,
          57,
          59,
          63,
          66,
          70,
          73,
          119,
          133,
          137,
          138,
          140,
          142,
          144,
          146,
          148,
          150,
          151,
          158,
          159,
          164
        ]
      },
      {
        "test_lines": [
          56,
          92
        ],
        "covered_lines": [
          26,
          30,
          31,
          32,
          33,
          34,
          38,
          39,
          40,
          45,
          47,
          49,
          51,
          53,
          55,
          57,
          59,
          60,
          61,
          66,
          70,
          73,
          119,
          133,
          137,
          138,
          140,
          142,
          144,
          146,
          148,
          150,
          151,
          152,
          153,
          154,
          158,
          159,
          164
        ]
      },
      {
        "test_lines": [
          94,
          130
        ],
        "covered_lines": [
          26,
          30,
          31,
          32,
          38,
          39,
          40,
          41,
          42,
          45,
          47,
          49,
          51,
          53,
          55,
          57,
          59,
          63,
          66,
          67,
          68,
          73,
          78,
          81,
          83,
          84,
          85,
          86,
          87,
          89,
          91,
          92,
          94,
          96,
          99,
          100,
          101,
          102,
          103,
          104,
          106,
          107,
          109,
          110,
          112,
          114,
          119,
          133,
          137,
          138,
          140,
          142,
          144,
          146,
          148,
          150,
          151,
          158,
          159,
          160,
          161,
          162,
          164,
          168,
          171,
          172,
          178,
          179,
          180,
          181,
          183,
          184,
          185,
          187,
          189
        ]
      },
      {
        "test_lines": [
          132,
          136
        ],
        "covered_lines": [
          26,
          194,
          197,
          198,
          199
        ]
      },
      {
        "test_lines": [
          138,
          143
        ],
        "covered_lines": [
          26,
          194,
          195,
          197,
          198,
          202
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.remoting.protocol;\n",
      "\n",
      "import com.alibaba.fastjson.annotation.JSONField;\n",
      "import java.lang.annotation.Annotation;\n",
      "import java.lang.reflect.Field;\n",
      "import java.lang.reflect.Modifier;\n",
      "import java.nio.ByteBuffer;\n",
      "import java.util.HashMap;\n",
      "import java.util.Map;\n",
      "import java.util.concurrent.atomic.AtomicInteger;\n",
      "import org.apache.rocketmq.remoting.CommandCustomHeader;\n",
      "import org.apache.rocketmq.remoting.annotation.CFNotNull;\n",
      "import org.apache.rocketmq.remoting.common.RemotingHelper;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingCommandException;\n",
      "import org.apache.rocketmq.logging.InternalLogger;\n",
      "import org.apache.rocketmq.logging.InternalLoggerFactory;\n",
      "\n",
      "/**\n",
      " * RemotingCommand\u5728\u6d88\u606f\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u5bf9\u6240\u6709\u6570\u636e\u5185\u5bb9\u7684\u5c01\u88c5\uff0c\u4e0d\u4f46\u5305\u542b\u4e86\u6240\u6709\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8fd8\u5305\u542b\u4e86\u7f16\u7801\u89e3\u7801\u64cd\u4f5c\u3002\n",
      " */\n",
      "public class RemotingCommand {\n",
      "    public static final String SERIALIZE_TYPE_PROPERTY = \"rocketmq.serialize.type\";\n",
      "    public static final String SERIALIZE_TYPE_ENV = \"ROCKETMQ_SERIALIZE_TYPE\";\n",
      "    public static final String REMOTING_VERSION_KEY = \"rocketmq.remoting.version\";\n",
      "    private static final InternalLogger log = InternalLoggerFactory.getLogger(RemotingHelper.ROCKETMQ_REMOTING);\n",
      "    private static final int RPC_TYPE = 0; // 0, REQUEST_COMMAND\n",
      "    private static final int RPC_ONEWAY = 1; // 0, RPC\n",
      "    private static final Map<Class<? extends CommandCustomHeader>, Field[]> CLASS_HASH_MAP =\n",
      "        new HashMap<Class<? extends CommandCustomHeader>, Field[]>();\n",
      "    private static final Map<Class, String> CANONICAL_NAME_CACHE = new HashMap<Class, String>();\n",
      "    // 1, Oneway\n",
      "    // 1, RESPONSE_COMMAND\n",
      "    private static final Map<Field, Boolean> NULLABLE_FIELD_CACHE = new HashMap<Field, Boolean>();\n",
      "    private static final String STRING_CANONICAL_NAME = String.class.getCanonicalName();\n",
      "    private static final String DOUBLE_CANONICAL_NAME_1 = Double.class.getCanonicalName();\n",
      "    private static final String DOUBLE_CANONICAL_NAME_2 = double.class.getCanonicalName();\n",
      "    private static final String INTEGER_CANONICAL_NAME_1 = Integer.class.getCanonicalName();\n",
      "    private static final String INTEGER_CANONICAL_NAME_2 = int.class.getCanonicalName();\n",
      "    private static final String LONG_CANONICAL_NAME_1 = Long.class.getCanonicalName();\n",
      "    private static final String LONG_CANONICAL_NAME_2 = long.class.getCanonicalName();\n",
      "    private static final String BOOLEAN_CANONICAL_NAME_1 = Boolean.class.getCanonicalName();\n",
      "    private static final String BOOLEAN_CANONICAL_NAME_2 = boolean.class.getCanonicalName();\n",
      "    private static volatile int configVersion = -1;\n",
      "    private static AtomicInteger requestId = new AtomicInteger(0);\n",
      "\n",
      "    private static SerializeType serializeTypeConfigInThisServer = SerializeType.JSON;\n",
      "\n",
      "    static {\n",
      "        final String protocol = System.getProperty(SERIALIZE_TYPE_PROPERTY, System.getenv(SERIALIZE_TYPE_ENV));\n",
      "        if (!isBlank(protocol)) {\n",
      "            try {\n",
      "                serializeTypeConfigInThisServer = SerializeType.valueOf(protocol);\n",
      "            } catch (IllegalArgumentException e) {\n",
      "                throw new RuntimeException(\"parser specified protocol error. protocol=\" + protocol, e);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private int code;\n",
      "    private LanguageCode language = LanguageCode.JAVA;\n",
      "    private int version = 0;\n",
      "    private int opaque = requestId.getAndIncrement();\n",
      "    private int flag = 0;\n",
      "    private String remark;\n",
      "    private HashMap<String, String> extFields;\n",
      "    private transient CommandCustomHeader customHeader;\n",
      "\n",
      "    private SerializeType serializeTypeCurrentRPC = serializeTypeConfigInThisServer;\n",
      "\n",
      "    private transient byte[] body;\n",
      "\n",
      "    protected RemotingCommand() {\n",
      "    }\n",
      "\n",
      "    public static RemotingCommand createRequestCommand(int code, CommandCustomHeader customHeader) {\n",
      "        RemotingCommand cmd = new RemotingCommand();\n",
      "        cmd.setCode(code);\n",
      "        cmd.customHeader = customHeader;\n",
      "        setCmdVersion(cmd);\n",
      "        return cmd;\n",
      "    }\n",
      "\n",
      "    private static void setCmdVersion(RemotingCommand cmd) {\n",
      "        if (configVersion >= 0) {\n",
      "            cmd.setVersion(configVersion);\n",
      "        } else {\n",
      "            String v = System.getProperty(REMOTING_VERSION_KEY);\n",
      "            if (v != null) {\n",
      "                int value = Integer.parseInt(v);\n",
      "                cmd.setVersion(value);\n",
      "                configVersion = value;\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public static RemotingCommand createResponseCommand(Class<? extends CommandCustomHeader> classHeader) {\n",
      "        return createResponseCommand(RemotingSysResponseCode.SYSTEM_ERROR, \"not set any response code\", classHeader);\n",
      "    }\n",
      "\n",
      "    public static RemotingCommand createResponseCommand(int code, String remark,\n",
      "        Class<? extends CommandCustomHeader> classHeader) {\n",
      "        RemotingCommand cmd = new RemotingCommand();\n",
      "        cmd.markResponseType();\n",
      "        cmd.setCode(code);\n",
      "        cmd.setRemark(remark);\n",
      "        setCmdVersion(cmd);\n",
      "\n",
      "        if (classHeader != null) {\n",
      "            try {\n",
      "                CommandCustomHeader objectHeader = classHeader.newInstance();\n",
      "                cmd.customHeader = objectHeader;\n",
      "            } catch (InstantiationException e) {\n",
      "                return null;\n",
      "            } catch (IllegalAccessException e) {\n",
      "                return null;\n",
      "            }\n",
      "        }\n",
      "\n",
      "        return cmd;\n",
      "    }\n",
      "\n",
      "    public static RemotingCommand createResponseCommand(int code, String remark) {\n",
      "        return createResponseCommand(code, remark, null);\n",
      "    }\n",
      "\n",
      "    public static RemotingCommand decode(final byte[] array) {\n",
      "        ByteBuffer byteBuffer = ByteBuffer.wrap(array);\n",
      "        return decode(byteBuffer);\n",
      "    }\n",
      "\n",
      "    public static RemotingCommand decode(final ByteBuffer byteBuffer) {\n",
      "        int length = byteBuffer.limit();\n",
      "        int oriHeaderLen = byteBuffer.getInt();\n",
      "        int headerLength = getHeaderLength(oriHeaderLen);\n",
      "\n",
      "        byte[] headerData = new byte[headerLength];\n",
      "        byteBuffer.get(headerData);\n",
      "\n",
      "        RemotingCommand cmd = headerDecode(headerData, getProtocolType(oriHeaderLen));\n",
      "\n",
      "        int bodyLength = length - 4 - headerLength;\n",
      "        byte[] bodyData = null;\n",
      "        if (bodyLength > 0) {\n",
      "            bodyData = new byte[bodyLength];\n",
      "            byteBuffer.get(bodyData);\n",
      "        }\n",
      "        cmd.body = bodyData;\n",
      "\n",
      "        return cmd;\n",
      "    }\n",
      "\n",
      "    public static int getHeaderLength(int length) {\n",
      "        return length & 0xFFFFFF;\n",
      "    }\n",
      "\n",
      "    private static RemotingCommand headerDecode(byte[] headerData, SerializeType type) {\n",
      "        switch (type) {\n",
      "            case JSON:\n",
      "                RemotingCommand resultJson = RemotingSerializable.decode(headerData, RemotingCommand.class);\n",
      "                resultJson.setSerializeTypeCurrentRPC(type);\n",
      "                return resultJson;\n",
      "            case ROCKETMQ:\n",
      "                RemotingCommand resultRMQ = RocketMQSerializable.rocketMQProtocolDecode(headerData);\n",
      "                resultRMQ.setSerializeTypeCurrentRPC(type);\n",
      "                return resultRMQ;\n",
      "            default:\n",
      "                break;\n",
      "        }\n",
      "\n",
      "        return null;\n",
      "    }\n",
      "\n",
      "    public static SerializeType getProtocolType(int source) {\n",
      "        return SerializeType.valueOf((byte) ((source >> 24) & 0xFF));\n",
      "    }\n",
      "\n",
      "    public static int createNewRequestId() {\n",
      "        return requestId.getAndIncrement();\n",
      "    }\n",
      "\n",
      "    public static SerializeType getSerializeTypeConfigInThisServer() {\n",
      "        return serializeTypeConfigInThisServer;\n",
      "    }\n",
      "\n",
      "    private static boolean isBlank(String str) {\n",
      "        int strLen;\n",
      "        if (str == null || (strLen = str.length()) == 0) {\n",
      "            return true;\n",
      "        }\n",
      "        for (int i = 0; i < strLen; i++) {\n",
      "            if (!Character.isWhitespace(str.charAt(i))) {\n",
      "                return false;\n",
      "            }\n",
      "        }\n",
      "        return true;\n",
      "    }\n",
      "\n",
      "    public static byte[] markProtocolType(int source, SerializeType type) {\n",
      "        byte[] result = new byte[4];\n",
      "\n",
      "        result[0] = type.getCode();\n",
      "        result[1] = (byte) ((source >> 16) & 0xFF);\n",
      "        result[2] = (byte) ((source >> 8) & 0xFF);\n",
      "        result[3] = (byte) (source & 0xFF);\n",
      "        return result;\n",
      "    }\n",
      "\n",
      "    public void markResponseType() {\n",
      "        int bits = 1 << RPC_TYPE;\n",
      "        this.flag |= bits;\n",
      "    }\n",
      "\n",
      "    public CommandCustomHeader readCustomHeader() {\n",
      "        return customHeader;\n",
      "    }\n",
      "\n",
      "    public void writeCustomHeader(CommandCustomHeader customHeader) {\n",
      "        this.customHeader = customHeader;\n",
      "    }\n",
      "\n",
      "    public CommandCustomHeader decodeCommandCustomHeader(\n",
      "        Class<? extends CommandCustomHeader> classHeader) throws RemotingCommandException {\n",
      "        CommandCustomHeader objectHeader;\n",
      "        try {\n",
      "            objectHeader = classHeader.newInstance();\n",
      "        } catch (InstantiationException e) {\n",
      "            return null;\n",
      "        } catch (IllegalAccessException e) {\n",
      "            return null;\n",
      "        }\n",
      "\n",
      "        if (this.extFields != null) {\n",
      "\n",
      "            Field[] fields = getClazzFields(classHeader);\n",
      "            for (Field field : fields) {\n",
      "                if (!Modifier.isStatic(field.getModifiers())) {\n",
      "                    String fieldName = field.getName();\n",
      "                    if (!fieldName.startsWith(\"this\")) {\n",
      "                        try {\n",
      "                            String value = this.extFields.get(fieldName);\n",
      "                            if (null == value) {\n",
      "                                //\u89e3\u6790\u5b57\u6bb5\u662f\u5426\u4e3a\u7a7a\u903b\u8f91\u5904\u7406\n",
      "                                if (!isFieldNullable(field)) {\n",
      "                                    throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> is null\");\n",
      "                                }\n",
      "                                continue;\n",
      "                            }\n",
      "\n",
      "                            field.setAccessible(true);\n",
      "                            String type = getCanonicalName(field.getType());\n",
      "                            Object valueParsed;\n",
      "\n",
      "                            if (type.equals(STRING_CANONICAL_NAME)) {\n",
      "                                valueParsed = value;\n",
      "                            } else if (type.equals(INTEGER_CANONICAL_NAME_1) || type.equals(INTEGER_CANONICAL_NAME_2)) {\n",
      "                                valueParsed = Integer.parseInt(value);\n",
      "                            } else if (type.equals(LONG_CANONICAL_NAME_1) || type.equals(LONG_CANONICAL_NAME_2)) {\n",
      "                                valueParsed = Long.parseLong(value);\n",
      "                            } else if (type.equals(BOOLEAN_CANONICAL_NAME_1) || type.equals(BOOLEAN_CANONICAL_NAME_2)) {\n",
      "                                valueParsed = Boolean.parseBoolean(value);\n",
      "                            } else if (type.equals(DOUBLE_CANONICAL_NAME_1) || type.equals(DOUBLE_CANONICAL_NAME_2)) {\n",
      "                                valueParsed = Double.parseDouble(value);\n",
      "                            } else {\n",
      "                                throw new RemotingCommandException(\"the custom field <\" + fieldName + \"> type is not supported\");\n",
      "                            }\n",
      "\n",
      "                            field.set(objectHeader, valueParsed);\n",
      "\n",
      "                        } catch (Throwable e) {\n",
      "                            log.error(\"Failed field [{}] decoding\", fieldName, e);\n",
      "                        }\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "\n",
      "            objectHeader.checkFields();\n",
      "        }\n",
      "\n",
      "        return objectHeader;\n",
      "    }\n",
      "\n",
      "    private Field[] getClazzFields(Class<? extends CommandCustomHeader> classHeader) {\n",
      "        Field[] field = CLASS_HASH_MAP.get(classHeader);\n",
      "\n",
      "        if (field == null) {\n",
      "            field = classHeader.getDeclaredFields();\n",
      "            synchronized (CLASS_HASH_MAP) {\n",
      "                CLASS_HASH_MAP.put(classHeader, field);\n",
      "            }\n",
      "        }\n",
      "        return field;\n",
      "    }\n",
      "\n",
      "    private boolean isFieldNullable(Field field) {\n",
      "        if (!NULLABLE_FIELD_CACHE.containsKey(field)) {\n",
      "            Annotation annotation = field.getAnnotation(CFNotNull.class);\n",
      "            synchronized (NULLABLE_FIELD_CACHE) {\n",
      "                NULLABLE_FIELD_CACHE.put(field, annotation == null);\n",
      "            }\n",
      "        }\n",
      "        return NULLABLE_FIELD_CACHE.get(field);\n",
      "    }\n",
      "\n",
      "    private String getCanonicalName(Class clazz) {\n",
      "        String name = CANONICAL_NAME_CACHE.get(clazz);\n",
      "\n",
      "        if (name == null) {\n",
      "            name = clazz.getCanonicalName();\n",
      "            synchronized (CANONICAL_NAME_CACHE) {\n",
      "                CANONICAL_NAME_CACHE.put(clazz, name);\n",
      "            }\n",
      "        }\n",
      "        return name;\n",
      "    }\n",
      "\n",
      "    public ByteBuffer encode() {\n",
      "        // 1> header length size\n",
      "        int length = 4;\n",
      "\n",
      "        // 2> header data length\n",
      "        byte[] headerData = this.headerEncode();\n",
      "        length += headerData.length;\n",
      "\n",
      "        // 3> body data length\n",
      "        if (this.body != null) {\n",
      "            length += body.length;\n",
      "        }\n",
      "\n",
      "        ByteBuffer result = ByteBuffer.allocate(4 + length);\n",
      "\n",
      "        // length\n",
      "        result.putInt(length);\n",
      "\n",
      "        // header length\n",
      "        result.put(markProtocolType(headerData.length, serializeTypeCurrentRPC));\n",
      "\n",
      "        // header data\n",
      "        result.put(headerData);\n",
      "\n",
      "        // body data;\n",
      "        if (this.body != null) {\n",
      "            result.put(this.body);\n",
      "        }\n",
      "\n",
      "        result.flip();\n",
      "\n",
      "        return result;\n",
      "    }\n",
      "\n",
      "    private byte[] headerEncode() {\n",
      "        this.makeCustomHeaderToNet();\n",
      "        if (SerializeType.ROCKETMQ == serializeTypeCurrentRPC) {\n",
      "            return RocketMQSerializable.rocketMQProtocolEncode(this);\n",
      "        } else {\n",
      "            return RemotingSerializable.encode(this);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public void makeCustomHeaderToNet() {\n",
      "        if (this.customHeader != null) {\n",
      "            Field[] fields = getClazzFields(customHeader.getClass());\n",
      "            if (null == this.extFields) {\n",
      "                this.extFields = new HashMap<String, String>();\n",
      "            }\n",
      "\n",
      "            for (Field field : fields) {\n",
      "                if (!Modifier.isStatic(field.getModifiers())) {\n",
      "                    String name = field.getName();\n",
      "                    if (!name.startsWith(\"this\")) {\n",
      "                        Object value = null;\n",
      "                        try {\n",
      "                            field.setAccessible(true);\n",
      "                            value = field.get(this.customHeader);\n",
      "                        } catch (Exception e) {\n",
      "                            log.error(\"Failed to access field [{}]\", name, e);\n",
      "                        }\n",
      "\n",
      "                        if (value != null) {\n",
      "                            this.extFields.put(name, value.toString());\n",
      "                        }\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public ByteBuffer encodeHeader() {\n",
      "        return encodeHeader(this.body != null ? this.body.length : 0);\n",
      "    }\n",
      "\n",
      "    public ByteBuffer encodeHeader(final int bodyLength) {\n",
      "        // 1> header length size\n",
      "        int length = 4;\n",
      "\n",
      "        // 2> header data length\n",
      "        byte[] headerData;\n",
      "        headerData = this.headerEncode();\n",
      "\n",
      "        length += headerData.length;\n",
      "\n",
      "        // 3> body data length\n",
      "        length += bodyLength;\n",
      "\n",
      "        ByteBuffer result = ByteBuffer.allocate(4 + length - bodyLength);\n",
      "\n",
      "        // length\n",
      "        result.putInt(length);\n",
      "\n",
      "        // header length\n",
      "        result.put(markProtocolType(headerData.length, serializeTypeCurrentRPC));\n",
      "\n",
      "        // header data\n",
      "        result.put(headerData);\n",
      "\n",
      "        result.flip();\n",
      "\n",
      "        return result;\n",
      "    }\n",
      "\n",
      "    public void markOnewayRPC() {\n",
      "        int bits = 1 << RPC_ONEWAY;\n",
      "        this.flag |= bits;\n",
      "    }\n",
      "\n",
      "    @JSONField(serialize = false)\n",
      "    public boolean isOnewayRPC() {\n",
      "        int bits = 1 << RPC_ONEWAY;\n",
      "        return (this.flag & bits) == bits;\n",
      "    }\n",
      "\n",
      "    public int getCode() {\n",
      "        return code;\n",
      "    }\n",
      "\n",
      "    public void setCode(int code) {\n",
      "        this.code = code;\n",
      "    }\n",
      "\n",
      "    @JSONField(serialize = false)\n",
      "    public RemotingCommandType getType() {\n",
      "        if (this.isResponseType()) {\n",
      "            return RemotingCommandType.RESPONSE_COMMAND;\n",
      "        }\n",
      "\n",
      "        return RemotingCommandType.REQUEST_COMMAND;\n",
      "    }\n",
      "\n",
      "    @JSONField(serialize = false)\n",
      "    public boolean isResponseType() {\n",
      "        int bits = 1 << RPC_TYPE;\n",
      "        return (this.flag & bits) == bits;\n",
      "    }\n",
      "\n",
      "    public LanguageCode getLanguage() {\n",
      "        return language;\n",
      "    }\n",
      "\n",
      "    public void setLanguage(LanguageCode language) {\n",
      "        this.language = language;\n",
      "    }\n",
      "\n",
      "    public int getVersion() {\n",
      "        return version;\n",
      "    }\n",
      "\n",
      "    public void setVersion(int version) {\n",
      "        this.version = version;\n",
      "    }\n",
      "\n",
      "    public int getOpaque() {\n",
      "        return opaque;\n",
      "    }\n",
      "\n",
      "    public void setOpaque(int opaque) {\n",
      "        this.opaque = opaque;\n",
      "    }\n",
      "\n",
      "    public int getFlag() {\n",
      "        return flag;\n",
      "    }\n",
      "\n",
      "    public void setFlag(int flag) {\n",
      "        this.flag = flag;\n",
      "    }\n",
      "\n",
      "    public String getRemark() {\n",
      "        return remark;\n",
      "    }\n",
      "\n",
      "    public void setRemark(String remark) {\n",
      "        this.remark = remark;\n",
      "    }\n",
      "\n",
      "    public byte[] getBody() {\n",
      "        return body;\n",
      "    }\n",
      "\n",
      "    public void setBody(byte[] body) {\n",
      "        this.body = body;\n",
      "    }\n",
      "\n",
      "    public HashMap<String, String> getExtFields() {\n",
      "        return extFields;\n",
      "    }\n",
      "\n",
      "    public void setExtFields(HashMap<String, String> extFields) {\n",
      "        this.extFields = extFields;\n",
      "    }\n",
      "\n",
      "    public void addExtField(String key, String value) {\n",
      "        if (null == extFields) {\n",
      "            extFields = new HashMap<String, String>();\n",
      "        }\n",
      "        extFields.put(key, value);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return \"RemotingCommand [code=\" + code + \", language=\" + language + \", version=\" + version + \", opaque=\" + opaque + \", flag(B)=\"\n",
      "            + Integer.toBinaryString(flag) + \", remark=\" + remark + \", extFields=\" + extFields + \", serializeTypeCurrentRPC=\"\n",
      "            + serializeTypeCurrentRPC + \"]\";\n",
      "    }\n",
      "\n",
      "    public SerializeType getSerializeTypeCurrentRPC() {\n",
      "        return serializeTypeCurrentRPC;\n",
      "    }\n",
      "\n",
      "    public void setSerializeTypeCurrentRPC(SerializeType serializeTypeCurrentRPC) {\n",
      "        this.serializeTypeCurrentRPC = serializeTypeCurrentRPC;\n",
      "    }\n",
      "}"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.remoting.protocol;\n",
      "\n",
      "import java.lang.reflect.Field;\n",
      "import java.lang.reflect.Method;\n",
      "import java.nio.ByteBuffer;\n",
      "import org.apache.rocketmq.remoting.CommandCustomHeader;\n",
      "import org.apache.rocketmq.remoting.annotation.CFNotNull;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingCommandException;\n",
      "import org.junit.Test;\n",
      "\n",
      "import static org.assertj.core.api.Assertions.assertThat;\n",
      "\n",
      "public class RemotingCommandTest {\n",
      "    @Test\n",
      "    public void testMarkProtocolType_JSONProtocolType() {\n",
      "        int source = 261;\n",
      "        SerializeType type = SerializeType.JSON;\n",
      "        byte[] result = RemotingCommand.markProtocolType(source, type);\n",
      "        assertThat(result).isEqualTo(new byte[] {0, 0, 1, 5});\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testMarkProtocolType_ROCKETMQProtocolType() {\n",
      "        int source = 16777215;\n",
      "        SerializeType type = SerializeType.ROCKETMQ;\n",
      "        byte[] result = RemotingCommand.markProtocolType(source, type);\n",
      "        assertThat(result).isEqualTo(new byte[] {1, -1, -1, -1});\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testCreateRequestCommand_RegisterBroker() {\n",
      "        System.setProperty(RemotingCommand.REMOTING_VERSION_KEY, \"2333\");\n",
      "\n",
      "        int code = 103; //org.apache.rocketmq.common.protocol.RequestCode.REGISTER_BROKER\n",
      "        CommandCustomHeader header = new SampleCommandCustomHeader();\n",
      "        RemotingCommand cmd = RemotingCommand.createRequestCommand(code, header);\n",
      "        assertThat(cmd.getCode()).isEqualTo(code);\n",
      "        assertThat(cmd.getVersion()).isEqualTo(2333);\n",
      "        assertThat(cmd.getFlag() & 0x01).isEqualTo(0); //flag bit 0: 0 presents request\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testCreateResponseCommand_SuccessWithHeader() {\n",
      "        System.setProperty(RemotingCommand.REMOTING_VERSION_KEY, \"2333\");\n",
      "\n",
      "        int code = RemotingSysResponseCode.SUCCESS;\n",
      "        String remark = \"Sample remark\";\n",
      "        RemotingCommand cmd = RemotingCommand.createResponseCommand(code, remark, SampleCommandCustomHeader.class);\n",
      "        assertThat(cmd.getCode()).isEqualTo(code);\n",
      "        assertThat(cmd.getVersion()).isEqualTo(2333);\n",
      "        assertThat(cmd.getRemark()).isEqualTo(remark);\n",
      "        assertThat(cmd.getFlag() & 0x01).isEqualTo(1); //flag bit 0: 1 presents response\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testCreateResponseCommand_SuccessWithoutHeader() {\n",
      "        System.setProperty(RemotingCommand.REMOTING_VERSION_KEY, \"2333\");\n",
      "\n",
      "        int code = RemotingSysResponseCode.SUCCESS;\n",
      "        String remark = \"Sample remark\";\n",
      "        RemotingCommand cmd = RemotingCommand.createResponseCommand(code, remark);\n",
      "        assertThat(cmd.getCode()).isEqualTo(code);\n",
      "        assertThat(cmd.getVersion()).isEqualTo(2333);\n",
      "        assertThat(cmd.getRemark()).isEqualTo(remark);\n",
      "        assertThat(cmd.getFlag() & 0x01).isEqualTo(1); //flag bit 0: 1 presents response\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testCreateResponseCommand_FailToCreateCommand() {\n",
      "        System.setProperty(RemotingCommand.REMOTING_VERSION_KEY, \"2333\");\n",
      "\n",
      "        int code = RemotingSysResponseCode.SUCCESS;\n",
      "        String remark = \"Sample remark\";\n",
      "        RemotingCommand cmd = RemotingCommand.createResponseCommand(code, remark, CommandCustomHeader.class);\n",
      "        assertThat(cmd).isNull();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testCreateResponseCommand_SystemError() {\n",
      "        System.setProperty(RemotingCommand.REMOTING_VERSION_KEY, \"2333\");\n",
      "\n",
      "        RemotingCommand cmd = RemotingCommand.createResponseCommand(SampleCommandCustomHeader.class);\n",
      "        assertThat(cmd.getCode()).isEqualTo(RemotingSysResponseCode.SYSTEM_ERROR);\n",
      "        assertThat(cmd.getVersion()).isEqualTo(2333);\n",
      "        assertThat(cmd.getRemark()).contains(\"not set any response code\");\n",
      "        assertThat(cmd.getFlag() & 0x01).isEqualTo(1); //flag bit 0: 1 presents response\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEncodeAndDecode_EmptyBody() {\n",
      "        System.setProperty(RemotingCommand.REMOTING_VERSION_KEY, \"2333\");\n",
      "\n",
      "        int code = 103; //org.apache.rocketmq.common.protocol.RequestCode.REGISTER_BROKER\n",
      "        CommandCustomHeader header = new SampleCommandCustomHeader();\n",
      "        RemotingCommand cmd = RemotingCommand.createRequestCommand(code, header);\n",
      "\n",
      "        ByteBuffer buffer = cmd.encode();\n",
      "\n",
      "        //Simulate buffer being read in NettyDecoder\n",
      "        buffer.getInt();\n",
      "        byte[] bytes = new byte[buffer.limit() - 4];\n",
      "        buffer.get(bytes, 0, buffer.limit() - 4);\n",
      "        buffer = ByteBuffer.wrap(bytes);\n",
      "\n",
      "        RemotingCommand decodedCommand = RemotingCommand.decode(buffer);\n",
      "\n",
      "        assertThat(decodedCommand.getSerializeTypeCurrentRPC()).isEqualTo(SerializeType.JSON);\n",
      "        assertThat(decodedCommand.getBody()).isNull();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEncodeAndDecode_FilledBody() {\n",
      "        System.setProperty(RemotingCommand.REMOTING_VERSION_KEY, \"2333\");\n",
      "\n",
      "        int code = 103; //org.apache.rocketmq.common.protocol.RequestCode.REGISTER_BROKER\n",
      "        CommandCustomHeader header = new SampleCommandCustomHeader();\n",
      "        RemotingCommand cmd = RemotingCommand.createRequestCommand(code, header);\n",
      "        cmd.setBody(new byte[] {0, 1, 2, 3, 4});\n",
      "\n",
      "        ByteBuffer buffer = cmd.encode();\n",
      "\n",
      "        //Simulate buffer being read in NettyDecoder\n",
      "        buffer.getInt();\n",
      "        byte[] bytes = new byte[buffer.limit() - 4];\n",
      "        buffer.get(bytes, 0, buffer.limit() - 4);\n",
      "        buffer = ByteBuffer.wrap(bytes);\n",
      "\n",
      "        RemotingCommand decodedCommand = RemotingCommand.decode(buffer);\n",
      "\n",
      "        assertThat(decodedCommand.getSerializeTypeCurrentRPC()).isEqualTo(SerializeType.JSON);\n",
      "        assertThat(decodedCommand.getBody()).isEqualTo(new byte[] {0, 1, 2, 3, 4});\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEncodeAndDecode_FilledBodyWithExtFields() throws RemotingCommandException {\n",
      "        System.setProperty(RemotingCommand.REMOTING_VERSION_KEY, \"2333\");\n",
      "\n",
      "        int code = 103; //org.apache.rocketmq.common.protocol.RequestCode.REGISTER_BROKER\n",
      "        CommandCustomHeader header = new ExtFieldsHeader();\n",
      "        RemotingCommand cmd = RemotingCommand.createRequestCommand(code, header);\n",
      "\n",
      "        cmd.addExtField(\"key\", \"value\");\n",
      "\n",
      "        ByteBuffer buffer = cmd.encode();\n",
      "\n",
      "        //Simulate buffer being read in NettyDecoder\n",
      "        buffer.getInt();\n",
      "        byte[] bytes = new byte[buffer.limit() - 4];\n",
      "        buffer.get(bytes, 0, buffer.limit() - 4);\n",
      "        buffer = ByteBuffer.wrap(bytes);\n",
      "\n",
      "        RemotingCommand decodedCommand = RemotingCommand.decode(buffer);\n",
      "\n",
      "        assertThat(decodedCommand.getExtFields().get(\"stringValue\")).isEqualTo(\"bilibili\");\n",
      "        assertThat(decodedCommand.getExtFields().get(\"intValue\")).isEqualTo(\"2333\");\n",
      "        assertThat(decodedCommand.getExtFields().get(\"longValue\")).isEqualTo(\"23333333\");\n",
      "        assertThat(decodedCommand.getExtFields().get(\"booleanValue\")).isEqualTo(\"true\");\n",
      "        assertThat(decodedCommand.getExtFields().get(\"doubleValue\")).isEqualTo(\"0.618\");\n",
      "\n",
      "        assertThat(decodedCommand.getExtFields().get(\"key\")).isEqualTo(\"value\");\n",
      "\n",
      "        CommandCustomHeader decodedHeader = decodedCommand.decodeCommandCustomHeader(ExtFieldsHeader.class);\n",
      "        assertThat(((ExtFieldsHeader) decodedHeader).getStringValue()).isEqualTo(\"bilibili\");\n",
      "        assertThat(((ExtFieldsHeader) decodedHeader).getIntValue()).isEqualTo(2333);\n",
      "        assertThat(((ExtFieldsHeader) decodedHeader).getLongValue()).isEqualTo(23333333l);\n",
      "        assertThat(((ExtFieldsHeader) decodedHeader).isBooleanValue()).isEqualTo(true);\n",
      "        assertThat(((ExtFieldsHeader) decodedHeader).getDoubleValue()).isBetween(0.617, 0.619);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testNotNullField() throws Exception {\n",
      "        RemotingCommand remotingCommand = new RemotingCommand();\n",
      "        Method method = RemotingCommand.class.getDeclaredMethod(\"isFieldNullable\", Field.class);\n",
      "        method.setAccessible(true);\n",
      "\n",
      "        Field nullString = FieldTestClass.class.getDeclaredField(\"nullString\");\n",
      "        assertThat(method.invoke(remotingCommand, nullString)).isEqualTo(false);\n",
      "\n",
      "        Field nullableString = FieldTestClass.class.getDeclaredField(\"nullable\");\n",
      "        assertThat(method.invoke(remotingCommand, nullableString)).isEqualTo(true);\n",
      "\n",
      "        Field value = FieldTestClass.class.getDeclaredField(\"value\");\n",
      "        assertThat(method.invoke(remotingCommand, value)).isEqualTo(false);\n",
      "    }\n",
      "}\n",
      "\n",
      "class FieldTestClass {\n",
      "    @CFNotNull\n",
      "    String nullString = null;\n",
      "\n",
      "    String nullable = null;\n",
      "\n",
      "    @CFNotNull\n",
      "    String value = \"NotNull\";\n",
      "}\n",
      "\n",
      "class SampleCommandCustomHeader implements CommandCustomHeader {\n",
      "    @Override\n",
      "    public void checkFields() throws RemotingCommandException {\n",
      "    }\n",
      "}\n",
      "\n",
      "class ExtFieldsHeader implements CommandCustomHeader {\n",
      "    private String stringValue = \"bilibili\";\n",
      "    private int intValue = 2333;\n",
      "    private long longValue = 23333333l;\n",
      "    private boolean booleanValue = true;\n",
      "    private double doubleValue = 0.618;\n",
      "\n",
      "    @Override\n",
      "    public void checkFields() throws RemotingCommandException {\n",
      "    }\n",
      "\n",
      "    public String getStringValue() {\n",
      "        return stringValue;\n",
      "    }\n",
      "\n",
      "    public int getIntValue() {\n",
      "        return intValue;\n",
      "    }\n",
      "\n",
      "    public long getLongValue() {\n",
      "        return longValue;\n",
      "    }\n",
      "\n",
      "    public boolean isBooleanValue() {\n",
      "        return booleanValue;\n",
      "    }\n",
      "\n",
      "    public double getDoubleValue() {\n",
      "        return doubleValue;\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "RemotingCommand::::createRequestCommand(int,org.apache.rocketmq.remoting.CommandCustomHeader)": [
        91,
        97
      ],
      "RemotingCommand::::setCmdVersion(org.apache.rocketmq.remoting.protocol.RemotingCommand)": [
        99,
        110
      ],
      "RemotingCommand::::createResponseCommand(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)": [
        112,
        114
      ],
      "RemotingCommand::::createResponseCommand(int,java.lang.String,java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)": [
        116,
        136
      ],
      "RemotingCommand::::createResponseCommand(int,java.lang.String)": [
        138,
        140
      ],
      "RemotingCommand::::decode(byte[])": [
        142,
        145
      ],
      "RemotingCommand::::decode(java.nio.ByteBuffer)": [
        147,
        166
      ],
      "RemotingCommand::::getHeaderLength(int)": [
        168,
        170
      ],
      "RemotingCommand::::headerDecode(byte[],org.apache.rocketmq.remoting.protocol.SerializeType)": [
        172,
        187
      ],
      "RemotingCommand::::getProtocolType(int)": [
        189,
        191
      ],
      "RemotingCommand::::createNewRequestId()": [
        193,
        195
      ],
      "RemotingCommand::::getSerializeTypeConfigInThisServer()": [
        197,
        199
      ],
      "RemotingCommand::::isBlank(java.lang.String)": [
        201,
        212
      ],
      "RemotingCommand::::markProtocolType(int,org.apache.rocketmq.remoting.protocol.SerializeType)": [
        214,
        222
      ],
      "RemotingCommand::::markResponseType()": [
        224,
        227
      ],
      "RemotingCommand::::readCustomHeader()": [
        229,
        231
      ],
      "RemotingCommand::::writeCustomHeader(org.apache.rocketmq.remoting.CommandCustomHeader)": [
        233,
        235
      ],
      "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)": [
        237,
        296
      ],
      "RemotingCommand::::getClazzFields(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)": [
        298,
        308
      ],
      "RemotingCommand::::isFieldNullable(java.lang.reflect.Field)": [
        310,
        318
      ],
      "RemotingCommand::::getCanonicalName(java.lang.Class)": [
        320,
        330
      ],
      "RemotingCommand::::encode()": [
        332,
        364
      ],
      "RemotingCommand::::headerEncode()": [
        366,
        373
      ],
      "RemotingCommand::::makeCustomHeaderToNet()": [
        375,
        401
      ],
      "RemotingCommand::::encodeHeader()": [
        403,
        405
      ],
      "RemotingCommand::::encodeHeader(int)": [
        407,
        434
      ],
      "RemotingCommand::::markOnewayRPC()": [
        436,
        439
      ],
      "RemotingCommand::::isOnewayRPC()": [
        441,
        445
      ],
      "RemotingCommand::::getCode()": [
        447,
        449
      ],
      "RemotingCommand::::setCode(int)": [
        451,
        453
      ],
      "RemotingCommand::::getType()": [
        455,
        462
      ],
      "RemotingCommand::::isResponseType()": [
        464,
        468
      ],
      "RemotingCommand::::getLanguage()": [
        470,
        472
      ],
      "RemotingCommand::::setLanguage(org.apache.rocketmq.remoting.protocol.LanguageCode)": [
        474,
        476
      ],
      "RemotingCommand::::getVersion()": [
        478,
        480
      ],
      "RemotingCommand::::setVersion(int)": [
        482,
        484
      ],
      "RemotingCommand::::getOpaque()": [
        486,
        488
      ],
      "RemotingCommand::::setOpaque(int)": [
        490,
        492
      ],
      "RemotingCommand::::getFlag()": [
        494,
        496
      ],
      "RemotingCommand::::setFlag(int)": [
        498,
        500
      ],
      "RemotingCommand::::getRemark()": [
        502,
        504
      ],
      "RemotingCommand::::setRemark(java.lang.String)": [
        506,
        508
      ],
      "RemotingCommand::::getBody()": [
        510,
        512
      ],
      "RemotingCommand::::setBody(byte[])": [
        514,
        516
      ],
      "RemotingCommand::::getExtFields()": [
        518,
        520
      ],
      "RemotingCommand::::setExtFields(java.util.HashMap<java.lang.String, java.lang.String>)": [
        522,
        524
      ],
      "RemotingCommand::::addExtField(java.lang.String,java.lang.String)": [
        526,
        531
      ],
      "RemotingCommand::::toString()": [
        533,
        538
      ],
      "RemotingCommand::::getSerializeTypeCurrentRPC()": [
        540,
        542
      ],
      "RemotingCommand::::setSerializeTypeCurrentRPC(org.apache.rocketmq.remoting.protocol.SerializeType)": [
        544,
        546
      ]
    },
    "test_method_lines_dic": {
      "RemotingCommandTest::::testMarkProtocolType_JSONProtocolType()": [
        30,
        36
      ],
      "RemotingCommandTest::::testMarkProtocolType_ROCKETMQProtocolType()": [
        38,
        44
      ],
      "RemotingCommandTest::::testCreateRequestCommand_RegisterBroker()": [
        46,
        56
      ],
      "RemotingCommandTest::::testCreateResponseCommand_SuccessWithHeader()": [
        58,
        69
      ],
      "RemotingCommandTest::::testCreateResponseCommand_SuccessWithoutHeader()": [
        71,
        82
      ],
      "RemotingCommandTest::::testCreateResponseCommand_FailToCreateCommand()": [
        84,
        92
      ],
      "RemotingCommandTest::::testCreateResponseCommand_SystemError()": [
        94,
        103
      ],
      "RemotingCommandTest::::testEncodeAndDecode_EmptyBody()": [
        105,
        125
      ],
      "RemotingCommandTest::::testEncodeAndDecode_FilledBody()": [
        127,
        148
      ],
      "RemotingCommandTest::::testEncodeAndDecode_FilledBodyWithExtFields()": [
        150,
        184
      ],
      "RemotingCommandTest::::testNotNullField()": [
        186,
        200
      ],
      "SampleCommandCustomHeader::::checkFields()": [
        214,
        216
      ],
      "ExtFieldsHeader::::checkFields()": [
        226,
        228
      ],
      "ExtFieldsHeader::::getStringValue()": [
        230,
        232
      ],
      "ExtFieldsHeader::::getIntValue()": [
        234,
        236
      ],
      "ExtFieldsHeader::::getLongValue()": [
        238,
        240
      ],
      "ExtFieldsHeader::::isBooleanValue()": [
        242,
        244
      ],
      "ExtFieldsHeader::::getDoubleValue()": [
        246,
        248
      ]
    },
    "reverse_method_lines_dic": {
      "91": "RemotingCommand::::createRequestCommand(int,org.apache.rocketmq.remoting.CommandCustomHeader)",
      "92": "RemotingCommand::::createRequestCommand(int,org.apache.rocketmq.remoting.CommandCustomHeader)",
      "93": "RemotingCommand::::createRequestCommand(int,org.apache.rocketmq.remoting.CommandCustomHeader)",
      "94": "RemotingCommand::::createRequestCommand(int,org.apache.rocketmq.remoting.CommandCustomHeader)",
      "95": "RemotingCommand::::createRequestCommand(int,org.apache.rocketmq.remoting.CommandCustomHeader)",
      "96": "RemotingCommand::::createRequestCommand(int,org.apache.rocketmq.remoting.CommandCustomHeader)",
      "97": "RemotingCommand::::createRequestCommand(int,org.apache.rocketmq.remoting.CommandCustomHeader)",
      "99": "RemotingCommand::::setCmdVersion(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "100": "RemotingCommand::::setCmdVersion(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "101": "RemotingCommand::::setCmdVersion(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "102": "RemotingCommand::::setCmdVersion(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "103": "RemotingCommand::::setCmdVersion(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "104": "RemotingCommand::::setCmdVersion(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "105": "RemotingCommand::::setCmdVersion(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "106": "RemotingCommand::::setCmdVersion(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "107": "RemotingCommand::::setCmdVersion(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "108": "RemotingCommand::::setCmdVersion(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "109": "RemotingCommand::::setCmdVersion(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "110": "RemotingCommand::::setCmdVersion(org.apache.rocketmq.remoting.protocol.RemotingCommand)",
      "112": "RemotingCommand::::createResponseCommand(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "113": "RemotingCommand::::createResponseCommand(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "114": "RemotingCommand::::createResponseCommand(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "116": "RemotingCommand::::createResponseCommand(int,java.lang.String,java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "117": "RemotingCommand::::createResponseCommand(int,java.lang.String,java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "118": "RemotingCommand::::createResponseCommand(int,java.lang.String,java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "119": "RemotingCommand::::createResponseCommand(int,java.lang.String,java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "120": "RemotingCommand::::createResponseCommand(int,java.lang.String,java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "121": "RemotingCommand::::createResponseCommand(int,java.lang.String,java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "122": "RemotingCommand::::createResponseCommand(int,java.lang.String,java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "123": "RemotingCommand::::createResponseCommand(int,java.lang.String,java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "124": "RemotingCommand::::createResponseCommand(int,java.lang.String,java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "125": "RemotingCommand::::createResponseCommand(int,java.lang.String,java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "126": "RemotingCommand::::createResponseCommand(int,java.lang.String,java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "127": "RemotingCommand::::createResponseCommand(int,java.lang.String,java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "128": "RemotingCommand::::createResponseCommand(int,java.lang.String,java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "129": "RemotingCommand::::createResponseCommand(int,java.lang.String,java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "130": "RemotingCommand::::createResponseCommand(int,java.lang.String,java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "131": "RemotingCommand::::createResponseCommand(int,java.lang.String,java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "132": "RemotingCommand::::createResponseCommand(int,java.lang.String,java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "133": "RemotingCommand::::createResponseCommand(int,java.lang.String,java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "134": "RemotingCommand::::createResponseCommand(int,java.lang.String,java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "135": "RemotingCommand::::createResponseCommand(int,java.lang.String,java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "136": "RemotingCommand::::createResponseCommand(int,java.lang.String,java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "138": "RemotingCommand::::createResponseCommand(int,java.lang.String)",
      "139": "RemotingCommand::::createResponseCommand(int,java.lang.String)",
      "140": "RemotingCommand::::createResponseCommand(int,java.lang.String)",
      "142": "RemotingCommand::::decode(byte[])",
      "143": "RemotingCommand::::decode(byte[])",
      "144": "RemotingCommand::::decode(byte[])",
      "145": "RemotingCommand::::decode(byte[])",
      "147": "RemotingCommand::::decode(java.nio.ByteBuffer)",
      "148": "RemotingCommand::::decode(java.nio.ByteBuffer)",
      "149": "RemotingCommand::::decode(java.nio.ByteBuffer)",
      "150": "RemotingCommand::::decode(java.nio.ByteBuffer)",
      "151": "RemotingCommand::::decode(java.nio.ByteBuffer)",
      "152": "RemotingCommand::::decode(java.nio.ByteBuffer)",
      "153": "RemotingCommand::::decode(java.nio.ByteBuffer)",
      "154": "RemotingCommand::::decode(java.nio.ByteBuffer)",
      "155": "RemotingCommand::::decode(java.nio.ByteBuffer)",
      "156": "RemotingCommand::::decode(java.nio.ByteBuffer)",
      "157": "RemotingCommand::::decode(java.nio.ByteBuffer)",
      "158": "RemotingCommand::::decode(java.nio.ByteBuffer)",
      "159": "RemotingCommand::::decode(java.nio.ByteBuffer)",
      "160": "RemotingCommand::::decode(java.nio.ByteBuffer)",
      "161": "RemotingCommand::::decode(java.nio.ByteBuffer)",
      "162": "RemotingCommand::::decode(java.nio.ByteBuffer)",
      "163": "RemotingCommand::::decode(java.nio.ByteBuffer)",
      "164": "RemotingCommand::::decode(java.nio.ByteBuffer)",
      "165": "RemotingCommand::::decode(java.nio.ByteBuffer)",
      "166": "RemotingCommand::::decode(java.nio.ByteBuffer)",
      "168": "RemotingCommand::::getHeaderLength(int)",
      "169": "RemotingCommand::::getHeaderLength(int)",
      "170": "RemotingCommand::::getHeaderLength(int)",
      "172": "RemotingCommand::::headerDecode(byte[],org.apache.rocketmq.remoting.protocol.SerializeType)",
      "173": "RemotingCommand::::headerDecode(byte[],org.apache.rocketmq.remoting.protocol.SerializeType)",
      "174": "RemotingCommand::::headerDecode(byte[],org.apache.rocketmq.remoting.protocol.SerializeType)",
      "175": "RemotingCommand::::headerDecode(byte[],org.apache.rocketmq.remoting.protocol.SerializeType)",
      "176": "RemotingCommand::::headerDecode(byte[],org.apache.rocketmq.remoting.protocol.SerializeType)",
      "177": "RemotingCommand::::headerDecode(byte[],org.apache.rocketmq.remoting.protocol.SerializeType)",
      "178": "RemotingCommand::::headerDecode(byte[],org.apache.rocketmq.remoting.protocol.SerializeType)",
      "179": "RemotingCommand::::headerDecode(byte[],org.apache.rocketmq.remoting.protocol.SerializeType)",
      "180": "RemotingCommand::::headerDecode(byte[],org.apache.rocketmq.remoting.protocol.SerializeType)",
      "181": "RemotingCommand::::headerDecode(byte[],org.apache.rocketmq.remoting.protocol.SerializeType)",
      "182": "RemotingCommand::::headerDecode(byte[],org.apache.rocketmq.remoting.protocol.SerializeType)",
      "183": "RemotingCommand::::headerDecode(byte[],org.apache.rocketmq.remoting.protocol.SerializeType)",
      "184": "RemotingCommand::::headerDecode(byte[],org.apache.rocketmq.remoting.protocol.SerializeType)",
      "185": "RemotingCommand::::headerDecode(byte[],org.apache.rocketmq.remoting.protocol.SerializeType)",
      "186": "RemotingCommand::::headerDecode(byte[],org.apache.rocketmq.remoting.protocol.SerializeType)",
      "187": "RemotingCommand::::headerDecode(byte[],org.apache.rocketmq.remoting.protocol.SerializeType)",
      "189": "RemotingCommand::::getProtocolType(int)",
      "190": "RemotingCommand::::getProtocolType(int)",
      "191": "RemotingCommand::::getProtocolType(int)",
      "193": "RemotingCommand::::createNewRequestId()",
      "194": "RemotingCommand::::createNewRequestId()",
      "195": "RemotingCommand::::createNewRequestId()",
      "197": "RemotingCommand::::getSerializeTypeConfigInThisServer()",
      "198": "RemotingCommand::::getSerializeTypeConfigInThisServer()",
      "199": "RemotingCommand::::getSerializeTypeConfigInThisServer()",
      "201": "RemotingCommand::::isBlank(java.lang.String)",
      "202": "RemotingCommand::::isBlank(java.lang.String)",
      "203": "RemotingCommand::::isBlank(java.lang.String)",
      "204": "RemotingCommand::::isBlank(java.lang.String)",
      "205": "RemotingCommand::::isBlank(java.lang.String)",
      "206": "RemotingCommand::::isBlank(java.lang.String)",
      "207": "RemotingCommand::::isBlank(java.lang.String)",
      "208": "RemotingCommand::::isBlank(java.lang.String)",
      "209": "RemotingCommand::::isBlank(java.lang.String)",
      "210": "RemotingCommand::::isBlank(java.lang.String)",
      "211": "RemotingCommand::::isBlank(java.lang.String)",
      "212": "RemotingCommand::::isBlank(java.lang.String)",
      "214": "RemotingCommand::::markProtocolType(int,org.apache.rocketmq.remoting.protocol.SerializeType)",
      "215": "RemotingCommand::::markProtocolType(int,org.apache.rocketmq.remoting.protocol.SerializeType)",
      "216": "RemotingCommand::::markProtocolType(int,org.apache.rocketmq.remoting.protocol.SerializeType)",
      "217": "RemotingCommand::::markProtocolType(int,org.apache.rocketmq.remoting.protocol.SerializeType)",
      "218": "RemotingCommand::::markProtocolType(int,org.apache.rocketmq.remoting.protocol.SerializeType)",
      "219": "RemotingCommand::::markProtocolType(int,org.apache.rocketmq.remoting.protocol.SerializeType)",
      "220": "RemotingCommand::::markProtocolType(int,org.apache.rocketmq.remoting.protocol.SerializeType)",
      "221": "RemotingCommand::::markProtocolType(int,org.apache.rocketmq.remoting.protocol.SerializeType)",
      "222": "RemotingCommand::::markProtocolType(int,org.apache.rocketmq.remoting.protocol.SerializeType)",
      "224": "RemotingCommand::::markResponseType()",
      "225": "RemotingCommand::::markResponseType()",
      "226": "RemotingCommand::::markResponseType()",
      "227": "RemotingCommand::::markResponseType()",
      "229": "RemotingCommand::::readCustomHeader()",
      "230": "RemotingCommand::::readCustomHeader()",
      "231": "RemotingCommand::::readCustomHeader()",
      "233": "RemotingCommand::::writeCustomHeader(org.apache.rocketmq.remoting.CommandCustomHeader)",
      "234": "RemotingCommand::::writeCustomHeader(org.apache.rocketmq.remoting.CommandCustomHeader)",
      "235": "RemotingCommand::::writeCustomHeader(org.apache.rocketmq.remoting.CommandCustomHeader)",
      "237": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "238": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "239": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "240": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "241": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "242": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "243": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "244": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "245": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "246": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "247": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "248": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "249": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "250": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "251": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "252": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "253": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "254": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "255": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "256": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "257": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "258": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "259": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "260": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "261": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "262": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "263": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "264": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "265": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "266": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "267": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "268": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "269": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "270": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "271": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "272": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "273": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "274": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "275": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "276": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "277": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "278": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "279": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "280": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "281": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "282": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "283": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "284": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "285": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "286": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "287": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "288": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "289": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "290": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "291": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "292": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "293": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "294": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "295": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "296": "RemotingCommand::::decodeCommandCustomHeader(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "298": "RemotingCommand::::getClazzFields(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "299": "RemotingCommand::::getClazzFields(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "300": "RemotingCommand::::getClazzFields(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "301": "RemotingCommand::::getClazzFields(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "302": "RemotingCommand::::getClazzFields(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "303": "RemotingCommand::::getClazzFields(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "304": "RemotingCommand::::getClazzFields(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "305": "RemotingCommand::::getClazzFields(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "306": "RemotingCommand::::getClazzFields(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "307": "RemotingCommand::::getClazzFields(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "308": "RemotingCommand::::getClazzFields(java.lang.Class<? extends org.apache.rocketmq.remoting.CommandCustomHeader>)",
      "310": "RemotingCommand::::isFieldNullable(java.lang.reflect.Field)",
      "311": "RemotingCommand::::isFieldNullable(java.lang.reflect.Field)",
      "312": "RemotingCommand::::isFieldNullable(java.lang.reflect.Field)",
      "313": "RemotingCommand::::isFieldNullable(java.lang.reflect.Field)",
      "314": "RemotingCommand::::isFieldNullable(java.lang.reflect.Field)",
      "315": "RemotingCommand::::isFieldNullable(java.lang.reflect.Field)",
      "316": "RemotingCommand::::isFieldNullable(java.lang.reflect.Field)",
      "317": "RemotingCommand::::isFieldNullable(java.lang.reflect.Field)",
      "318": "RemotingCommand::::isFieldNullable(java.lang.reflect.Field)",
      "320": "RemotingCommand::::getCanonicalName(java.lang.Class)",
      "321": "RemotingCommand::::getCanonicalName(java.lang.Class)",
      "322": "RemotingCommand::::getCanonicalName(java.lang.Class)",
      "323": "RemotingCommand::::getCanonicalName(java.lang.Class)",
      "324": "RemotingCommand::::getCanonicalName(java.lang.Class)",
      "325": "RemotingCommand::::getCanonicalName(java.lang.Class)",
      "326": "RemotingCommand::::getCanonicalName(java.lang.Class)",
      "327": "RemotingCommand::::getCanonicalName(java.lang.Class)",
      "328": "RemotingCommand::::getCanonicalName(java.lang.Class)",
      "329": "RemotingCommand::::getCanonicalName(java.lang.Class)",
      "330": "RemotingCommand::::getCanonicalName(java.lang.Class)",
      "332": "RemotingCommand::::encode()",
      "333": "RemotingCommand::::encode()",
      "334": "RemotingCommand::::encode()",
      "335": "RemotingCommand::::encode()",
      "336": "RemotingCommand::::encode()",
      "337": "RemotingCommand::::encode()",
      "338": "RemotingCommand::::encode()",
      "339": "RemotingCommand::::encode()",
      "340": "RemotingCommand::::encode()",
      "341": "RemotingCommand::::encode()",
      "342": "RemotingCommand::::encode()",
      "343": "RemotingCommand::::encode()",
      "344": "RemotingCommand::::encode()",
      "345": "RemotingCommand::::encode()",
      "346": "RemotingCommand::::encode()",
      "347": "RemotingCommand::::encode()",
      "348": "RemotingCommand::::encode()",
      "349": "RemotingCommand::::encode()",
      "350": "RemotingCommand::::encode()",
      "351": "RemotingCommand::::encode()",
      "352": "RemotingCommand::::encode()",
      "353": "RemotingCommand::::encode()",
      "354": "RemotingCommand::::encode()",
      "355": "RemotingCommand::::encode()",
      "356": "RemotingCommand::::encode()",
      "357": "RemotingCommand::::encode()",
      "358": "RemotingCommand::::encode()",
      "359": "RemotingCommand::::encode()",
      "360": "RemotingCommand::::encode()",
      "361": "RemotingCommand::::encode()",
      "362": "RemotingCommand::::encode()",
      "363": "RemotingCommand::::encode()",
      "364": "RemotingCommand::::encode()",
      "366": "RemotingCommand::::headerEncode()",
      "367": "RemotingCommand::::headerEncode()",
      "368": "RemotingCommand::::headerEncode()",
      "369": "RemotingCommand::::headerEncode()",
      "370": "RemotingCommand::::headerEncode()",
      "371": "RemotingCommand::::headerEncode()",
      "372": "RemotingCommand::::headerEncode()",
      "373": "RemotingCommand::::headerEncode()",
      "375": "RemotingCommand::::makeCustomHeaderToNet()",
      "376": "RemotingCommand::::makeCustomHeaderToNet()",
      "377": "RemotingCommand::::makeCustomHeaderToNet()",
      "378": "RemotingCommand::::makeCustomHeaderToNet()",
      "379": "RemotingCommand::::makeCustomHeaderToNet()",
      "380": "RemotingCommand::::makeCustomHeaderToNet()",
      "381": "RemotingCommand::::makeCustomHeaderToNet()",
      "382": "RemotingCommand::::makeCustomHeaderToNet()",
      "383": "RemotingCommand::::makeCustomHeaderToNet()",
      "384": "RemotingCommand::::makeCustomHeaderToNet()",
      "385": "RemotingCommand::::makeCustomHeaderToNet()",
      "386": "RemotingCommand::::makeCustomHeaderToNet()",
      "387": "RemotingCommand::::makeCustomHeaderToNet()",
      "388": "RemotingCommand::::makeCustomHeaderToNet()",
      "389": "RemotingCommand::::makeCustomHeaderToNet()",
      "390": "RemotingCommand::::makeCustomHeaderToNet()",
      "391": "RemotingCommand::::makeCustomHeaderToNet()",
      "392": "RemotingCommand::::makeCustomHeaderToNet()",
      "393": "RemotingCommand::::makeCustomHeaderToNet()",
      "394": "RemotingCommand::::makeCustomHeaderToNet()",
      "395": "RemotingCommand::::makeCustomHeaderToNet()",
      "396": "RemotingCommand::::makeCustomHeaderToNet()",
      "397": "RemotingCommand::::makeCustomHeaderToNet()",
      "398": "RemotingCommand::::makeCustomHeaderToNet()",
      "399": "RemotingCommand::::makeCustomHeaderToNet()",
      "400": "RemotingCommand::::makeCustomHeaderToNet()",
      "401": "RemotingCommand::::makeCustomHeaderToNet()",
      "403": "RemotingCommand::::encodeHeader()",
      "404": "RemotingCommand::::encodeHeader()",
      "405": "RemotingCommand::::encodeHeader()",
      "407": "RemotingCommand::::encodeHeader(int)",
      "408": "RemotingCommand::::encodeHeader(int)",
      "409": "RemotingCommand::::encodeHeader(int)",
      "410": "RemotingCommand::::encodeHeader(int)",
      "411": "RemotingCommand::::encodeHeader(int)",
      "412": "RemotingCommand::::encodeHeader(int)",
      "413": "RemotingCommand::::encodeHeader(int)",
      "414": "RemotingCommand::::encodeHeader(int)",
      "415": "RemotingCommand::::encodeHeader(int)",
      "416": "RemotingCommand::::encodeHeader(int)",
      "417": "RemotingCommand::::encodeHeader(int)",
      "418": "RemotingCommand::::encodeHeader(int)",
      "419": "RemotingCommand::::encodeHeader(int)",
      "420": "RemotingCommand::::encodeHeader(int)",
      "421": "RemotingCommand::::encodeHeader(int)",
      "422": "RemotingCommand::::encodeHeader(int)",
      "423": "RemotingCommand::::encodeHeader(int)",
      "424": "RemotingCommand::::encodeHeader(int)",
      "425": "RemotingCommand::::encodeHeader(int)",
      "426": "RemotingCommand::::encodeHeader(int)",
      "427": "RemotingCommand::::encodeHeader(int)",
      "428": "RemotingCommand::::encodeHeader(int)",
      "429": "RemotingCommand::::encodeHeader(int)",
      "430": "RemotingCommand::::encodeHeader(int)",
      "431": "RemotingCommand::::encodeHeader(int)",
      "432": "RemotingCommand::::encodeHeader(int)",
      "433": "RemotingCommand::::encodeHeader(int)",
      "434": "RemotingCommand::::encodeHeader(int)",
      "436": "RemotingCommand::::markOnewayRPC()",
      "437": "RemotingCommand::::markOnewayRPC()",
      "438": "RemotingCommand::::markOnewayRPC()",
      "439": "RemotingCommand::::markOnewayRPC()",
      "441": "RemotingCommand::::isOnewayRPC()",
      "442": "RemotingCommand::::isOnewayRPC()",
      "443": "RemotingCommand::::isOnewayRPC()",
      "444": "RemotingCommand::::isOnewayRPC()",
      "445": "RemotingCommand::::isOnewayRPC()",
      "447": "RemotingCommand::::getCode()",
      "448": "RemotingCommand::::getCode()",
      "449": "RemotingCommand::::getCode()",
      "451": "RemotingCommand::::setCode(int)",
      "452": "RemotingCommand::::setCode(int)",
      "453": "RemotingCommand::::setCode(int)",
      "455": "RemotingCommand::::getType()",
      "456": "RemotingCommand::::getType()",
      "457": "RemotingCommand::::getType()",
      "458": "RemotingCommand::::getType()",
      "459": "RemotingCommand::::getType()",
      "460": "RemotingCommand::::getType()",
      "461": "RemotingCommand::::getType()",
      "462": "RemotingCommand::::getType()",
      "464": "RemotingCommand::::isResponseType()",
      "465": "RemotingCommand::::isResponseType()",
      "466": "RemotingCommand::::isResponseType()",
      "467": "RemotingCommand::::isResponseType()",
      "468": "RemotingCommand::::isResponseType()",
      "470": "RemotingCommand::::getLanguage()",
      "471": "RemotingCommand::::getLanguage()",
      "472": "RemotingCommand::::getLanguage()",
      "474": "RemotingCommand::::setLanguage(org.apache.rocketmq.remoting.protocol.LanguageCode)",
      "475": "RemotingCommand::::setLanguage(org.apache.rocketmq.remoting.protocol.LanguageCode)",
      "476": "RemotingCommand::::setLanguage(org.apache.rocketmq.remoting.protocol.LanguageCode)",
      "478": "RemotingCommand::::getVersion()",
      "479": "RemotingCommand::::getVersion()",
      "480": "RemotingCommand::::getVersion()",
      "482": "RemotingCommand::::setVersion(int)",
      "483": "RemotingCommand::::setVersion(int)",
      "484": "RemotingCommand::::setVersion(int)",
      "486": "RemotingCommand::::getOpaque()",
      "487": "RemotingCommand::::getOpaque()",
      "488": "RemotingCommand::::getOpaque()",
      "490": "RemotingCommand::::setOpaque(int)",
      "491": "RemotingCommand::::setOpaque(int)",
      "492": "RemotingCommand::::setOpaque(int)",
      "494": "RemotingCommand::::getFlag()",
      "495": "RemotingCommand::::getFlag()",
      "496": "RemotingCommand::::getFlag()",
      "498": "RemotingCommand::::setFlag(int)",
      "499": "RemotingCommand::::setFlag(int)",
      "500": "RemotingCommand::::setFlag(int)",
      "502": "RemotingCommand::::getRemark()",
      "503": "RemotingCommand::::getRemark()",
      "504": "RemotingCommand::::getRemark()",
      "506": "RemotingCommand::::setRemark(java.lang.String)",
      "507": "RemotingCommand::::setRemark(java.lang.String)",
      "508": "RemotingCommand::::setRemark(java.lang.String)",
      "510": "RemotingCommand::::getBody()",
      "511": "RemotingCommand::::getBody()",
      "512": "RemotingCommand::::getBody()",
      "514": "RemotingCommand::::setBody(byte[])",
      "515": "RemotingCommand::::setBody(byte[])",
      "516": "RemotingCommand::::setBody(byte[])",
      "518": "RemotingCommand::::getExtFields()",
      "519": "RemotingCommand::::getExtFields()",
      "520": "RemotingCommand::::getExtFields()",
      "522": "RemotingCommand::::setExtFields(java.util.HashMap<java.lang.String, java.lang.String>)",
      "523": "RemotingCommand::::setExtFields(java.util.HashMap<java.lang.String, java.lang.String>)",
      "524": "RemotingCommand::::setExtFields(java.util.HashMap<java.lang.String, java.lang.String>)",
      "526": "RemotingCommand::::addExtField(java.lang.String,java.lang.String)",
      "527": "RemotingCommand::::addExtField(java.lang.String,java.lang.String)",
      "528": "RemotingCommand::::addExtField(java.lang.String,java.lang.String)",
      "529": "RemotingCommand::::addExtField(java.lang.String,java.lang.String)",
      "530": "RemotingCommand::::addExtField(java.lang.String,java.lang.String)",
      "531": "RemotingCommand::::addExtField(java.lang.String,java.lang.String)",
      "533": "RemotingCommand::::toString()",
      "534": "RemotingCommand::::toString()",
      "535": "RemotingCommand::::toString()",
      "536": "RemotingCommand::::toString()",
      "537": "RemotingCommand::::toString()",
      "538": "RemotingCommand::::toString()",
      "540": "RemotingCommand::::getSerializeTypeCurrentRPC()",
      "541": "RemotingCommand::::getSerializeTypeCurrentRPC()",
      "542": "RemotingCommand::::getSerializeTypeCurrentRPC()",
      "544": "RemotingCommand::::setSerializeTypeCurrentRPC(org.apache.rocketmq.remoting.protocol.SerializeType)",
      "545": "RemotingCommand::::setSerializeTypeCurrentRPC(org.apache.rocketmq.remoting.protocol.SerializeType)",
      "546": "RemotingCommand::::setSerializeTypeCurrentRPC(org.apache.rocketmq.remoting.protocol.SerializeType)"
    },
    "test_reverse_method_lines_dic": {
      "30": "RemotingCommandTest::::testMarkProtocolType_JSONProtocolType()",
      "31": "RemotingCommandTest::::testMarkProtocolType_JSONProtocolType()",
      "32": "RemotingCommandTest::::testMarkProtocolType_JSONProtocolType()",
      "33": "RemotingCommandTest::::testMarkProtocolType_JSONProtocolType()",
      "34": "RemotingCommandTest::::testMarkProtocolType_JSONProtocolType()",
      "35": "RemotingCommandTest::::testMarkProtocolType_JSONProtocolType()",
      "36": "RemotingCommandTest::::testMarkProtocolType_JSONProtocolType()",
      "38": "RemotingCommandTest::::testMarkProtocolType_ROCKETMQProtocolType()",
      "39": "RemotingCommandTest::::testMarkProtocolType_ROCKETMQProtocolType()",
      "40": "RemotingCommandTest::::testMarkProtocolType_ROCKETMQProtocolType()",
      "41": "RemotingCommandTest::::testMarkProtocolType_ROCKETMQProtocolType()",
      "42": "RemotingCommandTest::::testMarkProtocolType_ROCKETMQProtocolType()",
      "43": "RemotingCommandTest::::testMarkProtocolType_ROCKETMQProtocolType()",
      "44": "RemotingCommandTest::::testMarkProtocolType_ROCKETMQProtocolType()",
      "46": "RemotingCommandTest::::testCreateRequestCommand_RegisterBroker()",
      "47": "RemotingCommandTest::::testCreateRequestCommand_RegisterBroker()",
      "48": "RemotingCommandTest::::testCreateRequestCommand_RegisterBroker()",
      "49": "RemotingCommandTest::::testCreateRequestCommand_RegisterBroker()",
      "50": "RemotingCommandTest::::testCreateRequestCommand_RegisterBroker()",
      "51": "RemotingCommandTest::::testCreateRequestCommand_RegisterBroker()",
      "52": "RemotingCommandTest::::testCreateRequestCommand_RegisterBroker()",
      "53": "RemotingCommandTest::::testCreateRequestCommand_RegisterBroker()",
      "54": "RemotingCommandTest::::testCreateRequestCommand_RegisterBroker()",
      "55": "RemotingCommandTest::::testCreateRequestCommand_RegisterBroker()",
      "56": "RemotingCommandTest::::testCreateRequestCommand_RegisterBroker()",
      "58": "RemotingCommandTest::::testCreateResponseCommand_SuccessWithHeader()",
      "59": "RemotingCommandTest::::testCreateResponseCommand_SuccessWithHeader()",
      "60": "RemotingCommandTest::::testCreateResponseCommand_SuccessWithHeader()",
      "61": "RemotingCommandTest::::testCreateResponseCommand_SuccessWithHeader()",
      "62": "RemotingCommandTest::::testCreateResponseCommand_SuccessWithHeader()",
      "63": "RemotingCommandTest::::testCreateResponseCommand_SuccessWithHeader()",
      "64": "RemotingCommandTest::::testCreateResponseCommand_SuccessWithHeader()",
      "65": "RemotingCommandTest::::testCreateResponseCommand_SuccessWithHeader()",
      "66": "RemotingCommandTest::::testCreateResponseCommand_SuccessWithHeader()",
      "67": "RemotingCommandTest::::testCreateResponseCommand_SuccessWithHeader()",
      "68": "RemotingCommandTest::::testCreateResponseCommand_SuccessWithHeader()",
      "69": "RemotingCommandTest::::testCreateResponseCommand_SuccessWithHeader()",
      "71": "RemotingCommandTest::::testCreateResponseCommand_SuccessWithoutHeader()",
      "72": "RemotingCommandTest::::testCreateResponseCommand_SuccessWithoutHeader()",
      "73": "RemotingCommandTest::::testCreateResponseCommand_SuccessWithoutHeader()",
      "74": "RemotingCommandTest::::testCreateResponseCommand_SuccessWithoutHeader()",
      "75": "RemotingCommandTest::::testCreateResponseCommand_SuccessWithoutHeader()",
      "76": "RemotingCommandTest::::testCreateResponseCommand_SuccessWithoutHeader()",
      "77": "RemotingCommandTest::::testCreateResponseCommand_SuccessWithoutHeader()",
      "78": "RemotingCommandTest::::testCreateResponseCommand_SuccessWithoutHeader()",
      "79": "RemotingCommandTest::::testCreateResponseCommand_SuccessWithoutHeader()",
      "80": "RemotingCommandTest::::testCreateResponseCommand_SuccessWithoutHeader()",
      "81": "RemotingCommandTest::::testCreateResponseCommand_SuccessWithoutHeader()",
      "82": "RemotingCommandTest::::testCreateResponseCommand_SuccessWithoutHeader()",
      "84": "RemotingCommandTest::::testCreateResponseCommand_FailToCreateCommand()",
      "85": "RemotingCommandTest::::testCreateResponseCommand_FailToCreateCommand()",
      "86": "RemotingCommandTest::::testCreateResponseCommand_FailToCreateCommand()",
      "87": "RemotingCommandTest::::testCreateResponseCommand_FailToCreateCommand()",
      "88": "RemotingCommandTest::::testCreateResponseCommand_FailToCreateCommand()",
      "89": "RemotingCommandTest::::testCreateResponseCommand_FailToCreateCommand()",
      "90": "RemotingCommandTest::::testCreateResponseCommand_FailToCreateCommand()",
      "91": "RemotingCommandTest::::testCreateResponseCommand_FailToCreateCommand()",
      "92": "RemotingCommandTest::::testCreateResponseCommand_FailToCreateCommand()",
      "94": "RemotingCommandTest::::testCreateResponseCommand_SystemError()",
      "95": "RemotingCommandTest::::testCreateResponseCommand_SystemError()",
      "96": "RemotingCommandTest::::testCreateResponseCommand_SystemError()",
      "97": "RemotingCommandTest::::testCreateResponseCommand_SystemError()",
      "98": "RemotingCommandTest::::testCreateResponseCommand_SystemError()",
      "99": "RemotingCommandTest::::testCreateResponseCommand_SystemError()",
      "100": "RemotingCommandTest::::testCreateResponseCommand_SystemError()",
      "101": "RemotingCommandTest::::testCreateResponseCommand_SystemError()",
      "102": "RemotingCommandTest::::testCreateResponseCommand_SystemError()",
      "103": "RemotingCommandTest::::testCreateResponseCommand_SystemError()",
      "105": "RemotingCommandTest::::testEncodeAndDecode_EmptyBody()",
      "106": "RemotingCommandTest::::testEncodeAndDecode_EmptyBody()",
      "107": "RemotingCommandTest::::testEncodeAndDecode_EmptyBody()",
      "108": "RemotingCommandTest::::testEncodeAndDecode_EmptyBody()",
      "109": "RemotingCommandTest::::testEncodeAndDecode_EmptyBody()",
      "110": "RemotingCommandTest::::testEncodeAndDecode_EmptyBody()",
      "111": "RemotingCommandTest::::testEncodeAndDecode_EmptyBody()",
      "112": "RemotingCommandTest::::testEncodeAndDecode_EmptyBody()",
      "113": "RemotingCommandTest::::testEncodeAndDecode_EmptyBody()",
      "114": "RemotingCommandTest::::testEncodeAndDecode_EmptyBody()",
      "115": "RemotingCommandTest::::testEncodeAndDecode_EmptyBody()",
      "116": "RemotingCommandTest::::testEncodeAndDecode_EmptyBody()",
      "117": "RemotingCommandTest::::testEncodeAndDecode_EmptyBody()",
      "118": "RemotingCommandTest::::testEncodeAndDecode_EmptyBody()",
      "119": "RemotingCommandTest::::testEncodeAndDecode_EmptyBody()",
      "120": "RemotingCommandTest::::testEncodeAndDecode_EmptyBody()",
      "121": "RemotingCommandTest::::testEncodeAndDecode_EmptyBody()",
      "122": "RemotingCommandTest::::testEncodeAndDecode_EmptyBody()",
      "123": "RemotingCommandTest::::testEncodeAndDecode_EmptyBody()",
      "124": "RemotingCommandTest::::testEncodeAndDecode_EmptyBody()",
      "125": "RemotingCommandTest::::testEncodeAndDecode_EmptyBody()",
      "127": "RemotingCommandTest::::testEncodeAndDecode_FilledBody()",
      "128": "RemotingCommandTest::::testEncodeAndDecode_FilledBody()",
      "129": "RemotingCommandTest::::testEncodeAndDecode_FilledBody()",
      "130": "RemotingCommandTest::::testEncodeAndDecode_FilledBody()",
      "131": "RemotingCommandTest::::testEncodeAndDecode_FilledBody()",
      "132": "RemotingCommandTest::::testEncodeAndDecode_FilledBody()",
      "133": "RemotingCommandTest::::testEncodeAndDecode_FilledBody()",
      "134": "RemotingCommandTest::::testEncodeAndDecode_FilledBody()",
      "135": "RemotingCommandTest::::testEncodeAndDecode_FilledBody()",
      "136": "RemotingCommandTest::::testEncodeAndDecode_FilledBody()",
      "137": "RemotingCommandTest::::testEncodeAndDecode_FilledBody()",
      "138": "RemotingCommandTest::::testEncodeAndDecode_FilledBody()",
      "139": "RemotingCommandTest::::testEncodeAndDecode_FilledBody()",
      "140": "RemotingCommandTest::::testEncodeAndDecode_FilledBody()",
      "141": "RemotingCommandTest::::testEncodeAndDecode_FilledBody()",
      "142": "RemotingCommandTest::::testEncodeAndDecode_FilledBody()",
      "143": "RemotingCommandTest::::testEncodeAndDecode_FilledBody()",
      "144": "RemotingCommandTest::::testEncodeAndDecode_FilledBody()",
      "145": "RemotingCommandTest::::testEncodeAndDecode_FilledBody()",
      "146": "RemotingCommandTest::::testEncodeAndDecode_FilledBody()",
      "147": "RemotingCommandTest::::testEncodeAndDecode_FilledBody()",
      "148": "RemotingCommandTest::::testEncodeAndDecode_FilledBody()",
      "150": "RemotingCommandTest::::testEncodeAndDecode_FilledBodyWithExtFields()",
      "151": "RemotingCommandTest::::testEncodeAndDecode_FilledBodyWithExtFields()",
      "152": "RemotingCommandTest::::testEncodeAndDecode_FilledBodyWithExtFields()",
      "153": "RemotingCommandTest::::testEncodeAndDecode_FilledBodyWithExtFields()",
      "154": "RemotingCommandTest::::testEncodeAndDecode_FilledBodyWithExtFields()",
      "155": "RemotingCommandTest::::testEncodeAndDecode_FilledBodyWithExtFields()",
      "156": "RemotingCommandTest::::testEncodeAndDecode_FilledBodyWithExtFields()",
      "157": "RemotingCommandTest::::testEncodeAndDecode_FilledBodyWithExtFields()",
      "158": "RemotingCommandTest::::testEncodeAndDecode_FilledBodyWithExtFields()",
      "159": "RemotingCommandTest::::testEncodeAndDecode_FilledBodyWithExtFields()",
      "160": "RemotingCommandTest::::testEncodeAndDecode_FilledBodyWithExtFields()",
      "161": "RemotingCommandTest::::testEncodeAndDecode_FilledBodyWithExtFields()",
      "162": "RemotingCommandTest::::testEncodeAndDecode_FilledBodyWithExtFields()",
      "163": "RemotingCommandTest::::testEncodeAndDecode_FilledBodyWithExtFields()",
      "164": "RemotingCommandTest::::testEncodeAndDecode_FilledBodyWithExtFields()",
      "165": "RemotingCommandTest::::testEncodeAndDecode_FilledBodyWithExtFields()",
      "166": "RemotingCommandTest::::testEncodeAndDecode_FilledBodyWithExtFields()",
      "167": "RemotingCommandTest::::testEncodeAndDecode_FilledBodyWithExtFields()",
      "168": "RemotingCommandTest::::testEncodeAndDecode_FilledBodyWithExtFields()",
      "169": "RemotingCommandTest::::testEncodeAndDecode_FilledBodyWithExtFields()",
      "170": "RemotingCommandTest::::testEncodeAndDecode_FilledBodyWithExtFields()",
      "171": "RemotingCommandTest::::testEncodeAndDecode_FilledBodyWithExtFields()",
      "172": "RemotingCommandTest::::testEncodeAndDecode_FilledBodyWithExtFields()",
      "173": "RemotingCommandTest::::testEncodeAndDecode_FilledBodyWithExtFields()",
      "174": "RemotingCommandTest::::testEncodeAndDecode_FilledBodyWithExtFields()",
      "175": "RemotingCommandTest::::testEncodeAndDecode_FilledBodyWithExtFields()",
      "176": "RemotingCommandTest::::testEncodeAndDecode_FilledBodyWithExtFields()",
      "177": "RemotingCommandTest::::testEncodeAndDecode_FilledBodyWithExtFields()",
      "178": "RemotingCommandTest::::testEncodeAndDecode_FilledBodyWithExtFields()",
      "179": "RemotingCommandTest::::testEncodeAndDecode_FilledBodyWithExtFields()",
      "180": "RemotingCommandTest::::testEncodeAndDecode_FilledBodyWithExtFields()",
      "181": "RemotingCommandTest::::testEncodeAndDecode_FilledBodyWithExtFields()",
      "182": "RemotingCommandTest::::testEncodeAndDecode_FilledBodyWithExtFields()",
      "183": "RemotingCommandTest::::testEncodeAndDecode_FilledBodyWithExtFields()",
      "184": "RemotingCommandTest::::testEncodeAndDecode_FilledBodyWithExtFields()",
      "186": "RemotingCommandTest::::testNotNullField()",
      "187": "RemotingCommandTest::::testNotNullField()",
      "188": "RemotingCommandTest::::testNotNullField()",
      "189": "RemotingCommandTest::::testNotNullField()",
      "190": "RemotingCommandTest::::testNotNullField()",
      "191": "RemotingCommandTest::::testNotNullField()",
      "192": "RemotingCommandTest::::testNotNullField()",
      "193": "RemotingCommandTest::::testNotNullField()",
      "194": "RemotingCommandTest::::testNotNullField()",
      "195": "RemotingCommandTest::::testNotNullField()",
      "196": "RemotingCommandTest::::testNotNullField()",
      "197": "RemotingCommandTest::::testNotNullField()",
      "198": "RemotingCommandTest::::testNotNullField()",
      "199": "RemotingCommandTest::::testNotNullField()",
      "200": "RemotingCommandTest::::testNotNullField()",
      "214": "SampleCommandCustomHeader::::checkFields()",
      "215": "SampleCommandCustomHeader::::checkFields()",
      "216": "SampleCommandCustomHeader::::checkFields()",
      "226": "ExtFieldsHeader::::checkFields()",
      "227": "ExtFieldsHeader::::checkFields()",
      "228": "ExtFieldsHeader::::checkFields()",
      "230": "ExtFieldsHeader::::getStringValue()",
      "231": "ExtFieldsHeader::::getStringValue()",
      "232": "ExtFieldsHeader::::getStringValue()",
      "234": "ExtFieldsHeader::::getIntValue()",
      "235": "ExtFieldsHeader::::getIntValue()",
      "236": "ExtFieldsHeader::::getIntValue()",
      "238": "ExtFieldsHeader::::getLongValue()",
      "239": "ExtFieldsHeader::::getLongValue()",
      "240": "ExtFieldsHeader::::getLongValue()",
      "242": "ExtFieldsHeader::::isBooleanValue()",
      "243": "ExtFieldsHeader::::isBooleanValue()",
      "244": "ExtFieldsHeader::::isBooleanValue()",
      "246": "ExtFieldsHeader::::getDoubleValue()",
      "247": "ExtFieldsHeader::::getDoubleValue()",
      "248": "ExtFieldsHeader::::getDoubleValue()"
    },
    "tests": [
      {
        "test_lines": [
          30,
          36
        ],
        "covered_lines": [
          41,
          44,
          46,
          49,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          59,
          60,
          62,
          65,
          66,
          73,
          203,
          204,
          215,
          217,
          218,
          219,
          220,
          221
        ]
      },
      {
        "test_lines": [
          38,
          44
        ],
        "covered_lines": [
          41,
          44,
          46,
          49,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          59,
          60,
          62,
          65,
          66,
          73,
          203,
          204,
          215,
          217,
          218,
          219,
          220,
          221
        ]
      },
      {
        "test_lines": [
          46,
          56
        ],
        "covered_lines": [
          41,
          44,
          46,
          49,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          59,
          60,
          62,
          65,
          66,
          73,
          76,
          77,
          78,
          79,
          84,
          88,
          89,
          92,
          93,
          94,
          95,
          96,
          100,
          103,
          104,
          105,
          106,
          107,
          110,
          203,
          204,
          448,
          452,
          453,
          479,
          483,
          484,
          495
        ]
      },
      {
        "test_lines": [
          58,
          69
        ],
        "covered_lines": [
          41,
          44,
          46,
          49,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          59,
          60,
          62,
          65,
          66,
          73,
          76,
          77,
          78,
          79,
          84,
          88,
          89,
          100,
          103,
          104,
          105,
          106,
          107,
          110,
          118,
          119,
          120,
          121,
          122,
          124,
          126,
          127,
          132,
          135,
          203,
          204,
          225,
          226,
          227,
          448,
          452,
          453,
          479,
          483,
          484,
          495,
          503,
          507,
          508
        ]
      },
      {
        "test_lines": [
          71,
          82
        ],
        "covered_lines": [
          41,
          44,
          46,
          49,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          59,
          60,
          62,
          65,
          66,
          73,
          76,
          77,
          78,
          79,
          84,
          88,
          89,
          100,
          103,
          104,
          105,
          106,
          107,
          110,
          118,
          119,
          120,
          121,
          122,
          124,
          135,
          139,
          203,
          204,
          225,
          226,
          227,
          448,
          452,
          453,
          479,
          483,
          484,
          495,
          503,
          507,
          508
        ]
      },
      {
        "test_lines": [
          84,
          92
        ],
        "covered_lines": [
          41,
          44,
          46,
          49,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          59,
          60,
          62,
          65,
          66,
          73,
          76,
          77,
          78,
          79,
          84,
          88,
          89,
          100,
          103,
          104,
          105,
          106,
          107,
          110,
          118,
          119,
          120,
          121,
          122,
          124,
          128,
          129,
          203,
          204,
          225,
          226,
          227,
          452,
          453,
          483,
          484,
          507,
          508
        ]
      },
      {
        "test_lines": [
          94,
          103
        ],
        "covered_lines": [
          41,
          44,
          46,
          49,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          59,
          60,
          62,
          65,
          66,
          73,
          76,
          77,
          78,
          79,
          84,
          88,
          89,
          100,
          103,
          104,
          105,
          106,
          107,
          110,
          113,
          118,
          119,
          120,
          121,
          122,
          124,
          126,
          127,
          132,
          135,
          203,
          204,
          225,
          226,
          227,
          448,
          452,
          453,
          479,
          483,
          484,
          495,
          503,
          507,
          508
        ]
      },
      {
        "test_lines": [
          105,
          125
        ],
        "covered_lines": [
          41,
          44,
          46,
          49,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          59,
          60,
          62,
          65,
          66,
          73,
          76,
          77,
          78,
          79,
          84,
          88,
          89,
          92,
          93,
          94,
          95,
          96,
          100,
          103,
          104,
          105,
          106,
          107,
          110,
          148,
          149,
          150,
          152,
          153,
          155,
          157,
          158,
          159,
          163,
          165,
          169,
          173,
          175,
          176,
          177,
          190,
          203,
          204,
          215,
          217,
          218,
          219,
          220,
          221,
          299,
          301,
          302,
          303,
          304,
          305,
          307,
          334,
          337,
          338,
          341,
          345,
          348,
          351,
          354,
          357,
          361,
          363,
          367,
          368,
          371,
          376,
          377,
          378,
          379,
          382,
          383,
          401,
          448,
          452,
          453,
          471,
          475,
          476,
          479,
          483,
          484,
          487,
          491,
          492,
          495,
          499,
          500,
          503,
          511,
          519,
          523,
          524,
          541,
          545,
          546
        ]
      },
      {
        "test_lines": [
          127,
          148
        ],
        "covered_lines": [
          41,
          44,
          46,
          49,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          59,
          60,
          62,
          65,
          66,
          73,
          76,
          77,
          78,
          79,
          84,
          88,
          89,
          92,
          93,
          94,
          95,
          96,
          100,
          103,
          104,
          105,
          106,
          107,
          110,
          148,
          149,
          150,
          152,
          153,
          155,
          157,
          158,
          159,
          160,
          161,
          163,
          165,
          169,
          173,
          175,
          176,
          177,
          190,
          203,
          204,
          215,
          217,
          218,
          219,
          220,
          221,
          299,
          301,
          302,
          303,
          304,
          305,
          307,
          334,
          337,
          338,
          341,
          342,
          345,
          348,
          351,
          354,
          357,
          358,
          361,
          363,
          367,
          368,
          371,
          376,
          377,
          378,
          379,
          382,
          383,
          401,
          448,
          452,
          453,
          471,
          475,
          476,
          479,
          483,
          484,
          487,
          491,
          492,
          495,
          499,
          500,
          503,
          511,
          515,
          516,
          519,
          523,
          524,
          541,
          545,
          546
        ]
      },
      {
        "test_lines": [
          150,
          184
        ],
        "covered_lines": [
          41,
          44,
          46,
          49,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          59,
          60,
          62,
          65,
          66,
          73,
          76,
          77,
          78,
          79,
          84,
          88,
          89,
          92,
          93,
          94,
          95,
          96,
          100,
          103,
          104,
          105,
          106,
          107,
          110,
          148,
          149,
          150,
          152,
          153,
          155,
          157,
          158,
          159,
          163,
          165,
          169,
          173,
          175,
          176,
          177,
          190,
          203,
          204,
          215,
          217,
          218,
          219,
          220,
          221,
          241,
          246,
          248,
          250,
          251,
          252,
          253,
          254,
          256,
          257,
          265,
          266,
          269,
          270,
          271,
          272,
          273,
          274,
          275,
          276,
          277,
          278,
          283,
          287,
          292,
          295,
          299,
          301,
          302,
          303,
          304,
          305,
          307,
          321,
          323,
          324,
          325,
          326,
          327,
          329,
          334,
          337,
          338,
          341,
          345,
          348,
          351,
          354,
          357,
          361,
          363,
          367,
          368,
          371,
          376,
          377,
          378,
          382,
          383,
          384,
          385,
          386,
          388,
          389,
          392,
          394,
          395,
          401,
          448,
          452,
          453,
          471,
          475,
          476,
          479,
          483,
          484,
          487,
          491,
          492,
          495,
          499,
          500,
          503,
          511,
          519,
          523,
          524,
          527,
          528,
          530,
          531,
          541,
          545,
          546
        ]
      },
      {
        "test_lines": [
          186,
          200
        ],
        "covered_lines": [
          41,
          44,
          46,
          49,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          59,
          60,
          62,
          65,
          66,
          73,
          76,
          77,
          78,
          79,
          84,
          88,
          89,
          203,
          204,
          311,
          312,
          313,
          314,
          315,
          317
        ]
      }
    ]
  }
}