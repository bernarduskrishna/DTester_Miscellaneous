{"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functor/Profunctor.java":{"class_content":["package com.jnape.palatable.lambda.functor;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Id.id;\n","\n","/**\n"," * A dually-parametric functor that maps contravariantly over the left parameter and covariantly over the right.\n"," * <p>\n"," * For more information, read about <a href=\"https://en.wikipedia.org/wiki/Profunctor\" target=\"_top\">Profunctors</a>.\n"," *\n"," * @param <A>  The type of the left parameter\n"," * @param <B>  The type of the right parameter\n"," * @param <PF> The unification parameter\n"," * @see Functor\n"," * @see Bifunctor\n"," * @see Contravariant\n"," * @see Fn1\n"," * @see com.jnape.palatable.lambda.optics.Optic\n"," */\n","@FunctionalInterface\n","public interface Profunctor<A, B, PF extends Profunctor<?, ?, PF>> extends Contravariant<A, Profunctor<?, B, PF>> {\n","\n","    /**\n","     * Dually map contravariantly over the left parameter and covariantly over the right parameter. This is isomorphic\n","     * to <code>diMapL(lFn).diMapR(rFn)</code>.\n","     *\n","     * @param <Z> the new left parameter type\n","     * @param <C> the new right parameter type\n","     * @param lFn the left parameter mapping function\n","     * @param rFn the right parameter mapping function\n","     * @return a profunctor over Z (the new left parameter type) and C (the new right parameter type)\n","     */\n","    <Z, C> Profunctor<Z, C, PF> diMap(Fn1<? super Z, ? extends A> lFn, Fn1<? super B, ? extends C> rFn);\n","\n","    /**\n","     * Contravariantly map over the left parameter.\n","     *\n","     * @param <Z> the new left parameter type\n","     * @param fn  the mapping function\n","     * @return a profunctor over Z (the new left parameter type) and C (the same right parameter type)\n","     */\n","    default <Z> Profunctor<Z, B, PF> diMapL(Fn1<? super Z, ? extends A> fn) {\n","        return diMap(fn, id());\n","    }\n","\n","    /**\n","     * Covariantly map over the right parameter. For all profunctors that are also functors, it should hold that\n","     * <code>diMapR(f) == fmap(f)</code>.\n","     *\n","     * @param <C> the new right parameter type\n","     * @param fn  the mapping function\n","     * @return a profunctor over A (the same left parameter type) and C (the new right parameter type)\n","     */\n","    default <C> Profunctor<A, C, PF> diMapR(Fn1<? super B, ? extends C> fn) {\n","        return diMap(id(), fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    default <Z> Profunctor<Z, B, PF> contraMap(Fn1<? super Z, ? extends A> fn) {\n","        return diMapL(fn);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functor;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import org.junit.Test;\n","import testsupport.applicatives.InvocationRecordingProfunctor;\n","\n","import java.util.concurrent.atomic.AtomicReference;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Id.id;\n","import static org.hamcrest.CoreMatchers.is;\n","import static org.junit.Assert.assertThat;\n","\n","public class ProfunctorTest {\n","\n","    @Test\n","    public void diMapLUsesIdentityForRightDiMapFunction() {\n","        AtomicReference<Fn1<?, ?>> rightInvocation = new AtomicReference<>();\n","        Profunctor<String, Integer, InvocationRecordingProfunctor<?, ?>> profunctor =\n","                new InvocationRecordingProfunctor<>(new AtomicReference<>(), rightInvocation);\n","        profunctor.diMapL(Object::toString);\n","        assertThat(rightInvocation.get(), is(id()));\n","    }\n","\n","    @Test\n","    public void diMapRUsesIdentityForLeftDiMapFunction() {\n","        AtomicReference<Fn1<?, ?>> leftInvocation = new AtomicReference<>();\n","        Profunctor<String, Integer, InvocationRecordingProfunctor<?, ?>> profunctor =\n","                new InvocationRecordingProfunctor<>(leftInvocation, new AtomicReference<>());\n","        profunctor.diMapR(String::valueOf);\n","        assertThat(leftInvocation.get(), is(id()));\n","    }\n","}"],"method_lines_dic":{"Profunctor::::diMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)":[34,34],"Profunctor::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)":[43,45],"Profunctor::::diMapR(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)":[55,57],"Profunctor::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)":[62,65]},"test_method_lines_dic":{"ProfunctorTest::::diMapLUsesIdentityForRightDiMapFunction()":[15,22],"ProfunctorTest::::diMapRUsesIdentityForLeftDiMapFunction()":[24,31]},"reverse_method_lines_dic":{"34":"Profunctor::::diMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","43":"Profunctor::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","44":"Profunctor::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","45":"Profunctor::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","55":"Profunctor::::diMapR(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","56":"Profunctor::::diMapR(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","57":"Profunctor::::diMapR(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","62":"Profunctor::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","63":"Profunctor::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","64":"Profunctor::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","65":"Profunctor::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)"},"test_reverse_method_lines_dic":{"15":"ProfunctorTest::::diMapLUsesIdentityForRightDiMapFunction()","16":"ProfunctorTest::::diMapLUsesIdentityForRightDiMapFunction()","17":"ProfunctorTest::::diMapLUsesIdentityForRightDiMapFunction()","18":"ProfunctorTest::::diMapLUsesIdentityForRightDiMapFunction()","19":"ProfunctorTest::::diMapLUsesIdentityForRightDiMapFunction()","20":"ProfunctorTest::::diMapLUsesIdentityForRightDiMapFunction()","21":"ProfunctorTest::::diMapLUsesIdentityForRightDiMapFunction()","22":"ProfunctorTest::::diMapLUsesIdentityForRightDiMapFunction()","24":"ProfunctorTest::::diMapRUsesIdentityForLeftDiMapFunction()","25":"ProfunctorTest::::diMapRUsesIdentityForLeftDiMapFunction()","26":"ProfunctorTest::::diMapRUsesIdentityForLeftDiMapFunction()","27":"ProfunctorTest::::diMapRUsesIdentityForLeftDiMapFunction()","28":"ProfunctorTest::::diMapRUsesIdentityForLeftDiMapFunction()","29":"ProfunctorTest::::diMapRUsesIdentityForLeftDiMapFunction()","30":"ProfunctorTest::::diMapRUsesIdentityForLeftDiMapFunction()","31":"ProfunctorTest::::diMapRUsesIdentityForLeftDiMapFunction()"},"tests":[{"test_lines":[15,22],"covered_lines":[44]},{"test_lines":[24,31],"covered_lines":[56]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functor/Bifunctor.java":{"class_content":["package com.jnape.palatable.lambda.functor;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Id.id;\n","\n","/**\n"," * A dually-parametric functor that maps covariantly over both parameters.\n"," * <p>\n"," * For more information, read about <a href=\"https://en.wikipedia.org/wiki/Bifunctor\" target=\"_top\">Bifunctors</a>.\n"," *\n"," * @param <A>  The type of the left parameter\n"," * @param <B>  The type of the right parameter\n"," * @param <BF> The unification parameter\n"," * @see Functor\n"," * @see Profunctor\n"," * @see com.jnape.palatable.lambda.adt.hlist.Tuple2\n"," */\n","@FunctionalInterface\n","public interface Bifunctor<A, B, BF extends Bifunctor<?, ?, BF>> extends BoundedBifunctor<A, B, Object, Object, BF> {\n","\n","    /**\n","     * Covariantly map over the left parameter.\n","     *\n","     * @param <C> the new left parameter type\n","     * @param fn  the mapping function\n","     * @return a bifunctor over C (the new left parameter) and B (the same right parameter)\n","     */\n","    default <C> Bifunctor<C, B, BF> biMapL(Fn1<? super A, ? extends C> fn) {\n","        return biMap(fn, id());\n","    }\n","\n","    /**\n","     * Covariantly map over the right parameter. For all bifunctors that are also functors, it should hold that\n","     * <code>biMapR(f) == fmap(f)</code>.\n","     *\n","     * @param <C> the new right parameter type\n","     * @param fn  the mapping function\n","     * @return a bifunctor over A (the same left parameter) and C (the new right parameter)\n","     */\n","    default <C> Bifunctor<A, C, BF> biMapR(Fn1<? super B, ? extends C> fn) {\n","        return biMap(id(), fn);\n","    }\n","\n","    /**\n","     * Dually map covariantly over both the left and right parameters. This is isomorphic to\n","     * <code>biMapL(lFn).biMapR(rFn)</code>.\n","     *\n","     * @param <C> the new left parameter type\n","     * @param <D> the new right parameter type\n","     * @param lFn the left parameter mapping function\n","     * @param rFn the right parameter mapping function\n","     * @return a bifunctor over C (the new left parameter type) and D (the new right parameter type)\n","     */\n","    <C, D> Bifunctor<C, D, BF> biMap(Fn1<? super A, ? extends C> lFn, Fn1<? super B, ? extends D> rFn);\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functor;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import org.junit.Test;\n","import testsupport.applicatives.InvocationRecordingBifunctor;\n","\n","import java.util.concurrent.atomic.AtomicReference;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Id.id;\n","import static org.hamcrest.CoreMatchers.is;\n","import static org.junit.Assert.assertThat;\n","\n","public class BifunctorTest {\n","\n","    @Test\n","    public void biMapLUsesIdentityForRightBiMapFunction() {\n","        AtomicReference<Fn1<?, ?>> rightInvocation = new AtomicReference<>();\n","        Bifunctor<String, Integer, InvocationRecordingBifunctor<?, ?>> bifunctor =\n","                new InvocationRecordingBifunctor<>(new AtomicReference<>(), rightInvocation);\n","        bifunctor.biMapL(String::toUpperCase);\n","        assertThat(rightInvocation.get(), is(id()));\n","    }\n","\n","    @Test\n","    public void biMapRUsesIdentityForLeftBiMapFunction() {\n","        AtomicReference<Fn1<?, ?>> leftInvocation = new AtomicReference<>();\n","        Bifunctor<String, Integer, InvocationRecordingBifunctor<?, ?>> bifunctor =\n","                new InvocationRecordingBifunctor<>(leftInvocation, new AtomicReference<>());\n","        bifunctor.biMapR(String::valueOf);\n","        assertThat(leftInvocation.get(), is(id()));\n","    }\n","}"],"method_lines_dic":{"Bifunctor::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>)":[29,31],"Bifunctor::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)":[41,43],"Bifunctor::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends D>)":[55,55]},"test_method_lines_dic":{"BifunctorTest::::biMapLUsesIdentityForRightBiMapFunction()":[15,22],"BifunctorTest::::biMapRUsesIdentityForLeftBiMapFunction()":[24,31]},"reverse_method_lines_dic":{"29":"Bifunctor::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>)","30":"Bifunctor::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>)","31":"Bifunctor::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>)","41":"Bifunctor::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","42":"Bifunctor::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","43":"Bifunctor::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","55":"Bifunctor::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends D>)"},"test_reverse_method_lines_dic":{"15":"BifunctorTest::::biMapLUsesIdentityForRightBiMapFunction()","16":"BifunctorTest::::biMapLUsesIdentityForRightBiMapFunction()","17":"BifunctorTest::::biMapLUsesIdentityForRightBiMapFunction()","18":"BifunctorTest::::biMapLUsesIdentityForRightBiMapFunction()","19":"BifunctorTest::::biMapLUsesIdentityForRightBiMapFunction()","20":"BifunctorTest::::biMapLUsesIdentityForRightBiMapFunction()","21":"BifunctorTest::::biMapLUsesIdentityForRightBiMapFunction()","22":"BifunctorTest::::biMapLUsesIdentityForRightBiMapFunction()","24":"BifunctorTest::::biMapRUsesIdentityForLeftBiMapFunction()","25":"BifunctorTest::::biMapRUsesIdentityForLeftBiMapFunction()","26":"BifunctorTest::::biMapRUsesIdentityForLeftBiMapFunction()","27":"BifunctorTest::::biMapRUsesIdentityForLeftBiMapFunction()","28":"BifunctorTest::::biMapRUsesIdentityForLeftBiMapFunction()","29":"BifunctorTest::::biMapRUsesIdentityForLeftBiMapFunction()","30":"BifunctorTest::::biMapRUsesIdentityForLeftBiMapFunction()","31":"BifunctorTest::::biMapRUsesIdentityForLeftBiMapFunction()"},"tests":[{"test_lines":[15,22],"covered_lines":[30]},{"test_lines":[24,31],"covered_lines":[42]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functor/builtin/Compose.java":{"class_content":["package com.jnape.palatable.lambda.functor.builtin;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.specialized.Pure;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","\n","import java.util.Objects;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Upcast.upcast;\n","\n","/**\n"," * A functor representing the type-level composition of two {@link Applicative} functors; useful for preserving nested\n"," * type-level transformations during traversal of a {@link com.jnape.palatable.lambda.traversable.Traversable}.\n"," *\n"," * @param <F> The outer applicative\n"," * @param <G> The inner applicative\n"," * @param <A> The carrier type\n"," */\n","public final class Compose<F extends Applicative<?, F>, G extends Applicative<?, G>, A> implements\n","        Applicative<A, Compose<F, G, ?>> {\n","\n","    private final Applicative<? extends Applicative<A, G>, F> fga;\n","\n","    public Compose(Applicative<? extends Applicative<A, G>, F> fga) {\n","        this.fga = fga;\n","    }\n","\n","    @SuppressWarnings(\"RedundantTypeArguments\")\n","    public <GA extends Applicative<A, G>, FGA extends Applicative<GA, F>> FGA getCompose() {\n","        return fga.<GA>fmap(Applicative<A, G>::coerce).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> Compose<F, G, B> fmap(Fn1<? super A, ? extends B> fn) {\n","        return new Compose<>(fga.fmap(g -> g.fmap(fn)));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> Compose<F, G, B> pure(B b) {\n","        return new Compose<>(fga.fmap(g -> g.pure(b)));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> Compose<F, G, B> zip(Applicative<Fn1<? super A, ? extends B>, Compose<F, G, ?>> appFn) {\n","        return new Compose<>(fga.zip(appFn.<Compose<F, G, Fn1<? super A, ? extends B>>>coerce()\n","                                             .getCompose().fmap(gFn -> g -> g.zip(gFn))));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> Lazy<Compose<F, G, B>> lazyZip(\n","            Lazy<? extends Applicative<Fn1<? super A, ? extends B>, Compose<F, G, ?>>> lazyAppFn) {\n","        @SuppressWarnings(\"RedundantTypeArguments\")\n","        Lazy<Applicative<Applicative<Fn1<? super A, ? extends B>, G>, F>> lazyAppFnCoerced =\n","                lazyAppFn\n","                        .<Compose<F, G, Fn1<? super A, ? extends B>>>fmap(\n","                                Applicative<Fn1<? super A, ? extends B>, Compose<F, G, ?>>::coerce)\n","                        .fmap(Compose<F, G, Fn1<? super A, ? extends B>>::getCompose);\n","\n","        return fga.<Applicative<A, G>>fmap(upcast())\n","                .<Applicative<B, G>>lazyZip(lazyAppFnCoerced.fmap(fgf -> fgf.fmap(gf -> ga -> ga.zip(gf))))\n","                .fmap(Compose::new);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> Compose<F, G, B> discardL(Applicative<B, Compose<F, G, ?>> appB) {\n","        return Applicative.super.discardL(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> Compose<F, G, A> discardR(Applicative<B, Compose<F, G, ?>> appB) {\n","        return Applicative.super.discardR(appB).coerce();\n","    }\n","\n","    @Override\n","    public boolean equals(Object other) {\n","        return other instanceof Compose && Objects.equals(fga, ((Compose) other).fga);\n","    }\n","\n","    @Override\n","    public int hashCode() {\n","        return Objects.hash(fga);\n","    }\n","\n","    @Override\n","    public String toString() {\n","        return \"Compose{fga=\" + fga + '}';\n","    }\n","\n","    /**\n","     * The canonical {@link Pure} instance for {@link Compose}.\n","     *\n","     * @param pureF the {@link Pure} constructor for the outer {@link Applicative}\n","     * @param pureG the {@link Pure} constructor for the inner {@link Applicative}\n","     * @param <F>   the outer {@link Applicative} type\n","     * @param <G>   the inner {@link Applicative} type\n","     * @return the {@link Pure} instance\n","     */\n","    public static <F extends Applicative<?, F>, G extends Applicative<?, G>> Pure<Compose<F, G, ?>> pureCompose(\n","            Pure<F> pureF, Pure<G> pureG) {\n","        return new Pure<Compose<F, G, ?>>() {\n","            @Override\n","            public <A> Compose<F, G, A> checkedApply(A a) throws Throwable {\n","                return new Compose<>(pureF.<Applicative<A, G>, Applicative<Applicative<A, G>, F>>apply(pureG.apply(a)));\n","            }\n","        };\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functor.builtin;\n","\n","import com.jnape.palatable.lambda.adt.Either;\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.ApplicativeLaws;\n","import testsupport.traits.FunctorLaws;\n","\n","import static com.jnape.palatable.lambda.adt.Either.left;\n","import static com.jnape.palatable.lambda.adt.Either.right;\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.Maybe.pureMaybe;\n","import static com.jnape.palatable.lambda.functor.builtin.Compose.pureCompose;\n","import static com.jnape.palatable.lambda.functor.builtin.Identity.pureIdentity;\n","import static com.jnape.palatable.lambda.functor.builtin.Lazy.lazy;\n","import static org.junit.Assert.assertEquals;\n","\n","@RunWith(Traits.class)\n","public class ComposeTest {\n","\n","    @TestTraits({FunctorLaws.class, ApplicativeLaws.class})\n","    public Compose<Identity<?>, Identity<?>, Integer> testSubject() {\n","        return new Compose<>(new Identity<>(new Identity<>(1)));\n","    }\n","\n","    @Test\n","    public void inference() {\n","        Either<Object, Maybe<Integer>> a = new Compose<>(right(just(1))).fmap(x -> x + 1).getCompose();\n","        assertEquals(right(just(2)), a);\n","    }\n","\n","    @Test\n","    public void lazyZip() {\n","        assertEquals(new Compose<>(right(just(2))),\n","                     new Compose<>(right(just(1))).lazyZip(lazy(new Compose<>(right(just(x -> x + 1))))).value());\n","        assertEquals(new Compose<>(left(\"foo\")),\n","                     new Compose<>(left(\"foo\")).lazyZip(lazy(() -> {\n","                         throw new AssertionError();\n","                     })).value());\n","    }\n","\n","    @Test\n","    public void staticPure() {\n","        Compose<Identity<?>, Maybe<?>, Integer> compose = pureCompose(pureIdentity(), pureMaybe()).apply(1);\n","        assertEquals(new Compose<>(new Identity<>(just(1))), compose);\n","    }\n","}"],"method_lines_dic":{"Compose::::getCompose()":[28,31],"Compose::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)":[36,39],"Compose::::pure(B)":[44,47],"Compose::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Compose<F, G, ?>>)":[52,56],"Compose::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Compose<F, G, ?>>>)":[61,74],"Compose::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Compose<F, G, ?>>)":[79,82],"Compose::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Compose<F, G, ?>>)":[87,90],"Compose::::equals(java.lang.Object)":[92,95],"Compose::::hashCode()":[97,100],"Compose::::toString()":[102,105],"Compose::::pureCompose(com.jnape.palatable.lambda.functions.specialized.Pure<F>,com.jnape.palatable.lambda.functions.specialized.Pure<G>)":[116,124]},"test_method_lines_dic":{"ComposeTest::::testSubject()":[24,27],"ComposeTest::::inference()":[29,33],"ComposeTest::::lazyZip()":[35,43],"ComposeTest::::staticPure()":[45,49]},"reverse_method_lines_dic":{"28":"Compose::::getCompose()","29":"Compose::::getCompose()","30":"Compose::::getCompose()","31":"Compose::::getCompose()","36":"Compose::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","37":"Compose::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","38":"Compose::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","39":"Compose::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","44":"Compose::::pure(B)","45":"Compose::::pure(B)","46":"Compose::::pure(B)","47":"Compose::::pure(B)","52":"Compose::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Compose<F, G, ?>>)","53":"Compose::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Compose<F, G, ?>>)","54":"Compose::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Compose<F, G, ?>>)","55":"Compose::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Compose<F, G, ?>>)","56":"Compose::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Compose<F, G, ?>>)","61":"Compose::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Compose<F, G, ?>>>)","62":"Compose::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Compose<F, G, ?>>>)","63":"Compose::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Compose<F, G, ?>>>)","64":"Compose::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Compose<F, G, ?>>>)","65":"Compose::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Compose<F, G, ?>>>)","66":"Compose::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Compose<F, G, ?>>>)","67":"Compose::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Compose<F, G, ?>>>)","68":"Compose::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Compose<F, G, ?>>>)","69":"Compose::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Compose<F, G, ?>>>)","70":"Compose::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Compose<F, G, ?>>>)","71":"Compose::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Compose<F, G, ?>>>)","72":"Compose::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Compose<F, G, ?>>>)","73":"Compose::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Compose<F, G, ?>>>)","74":"Compose::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Compose<F, G, ?>>>)","79":"Compose::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Compose<F, G, ?>>)","80":"Compose::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Compose<F, G, ?>>)","81":"Compose::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Compose<F, G, ?>>)","82":"Compose::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Compose<F, G, ?>>)","87":"Compose::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Compose<F, G, ?>>)","88":"Compose::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Compose<F, G, ?>>)","89":"Compose::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Compose<F, G, ?>>)","90":"Compose::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Compose<F, G, ?>>)","92":"Compose::::equals(java.lang.Object)","93":"Compose::::equals(java.lang.Object)","94":"Compose::::equals(java.lang.Object)","95":"Compose::::equals(java.lang.Object)","97":"Compose::::hashCode()","98":"Compose::::hashCode()","99":"Compose::::hashCode()","100":"Compose::::hashCode()","102":"Compose::::toString()","103":"Compose::::toString()","104":"Compose::::toString()","105":"Compose::::toString()","116":"Compose::::pureCompose(com.jnape.palatable.lambda.functions.specialized.Pure<F>,com.jnape.palatable.lambda.functions.specialized.Pure<G>)","117":"Compose::::pureCompose(com.jnape.palatable.lambda.functions.specialized.Pure<F>,com.jnape.palatable.lambda.functions.specialized.Pure<G>)","118":"Compose::::pureCompose(com.jnape.palatable.lambda.functions.specialized.Pure<F>,com.jnape.palatable.lambda.functions.specialized.Pure<G>)","119":"Compose::::pureCompose(com.jnape.palatable.lambda.functions.specialized.Pure<F>,com.jnape.palatable.lambda.functions.specialized.Pure<G>)","120":"Compose::::pureCompose(com.jnape.palatable.lambda.functions.specialized.Pure<F>,com.jnape.palatable.lambda.functions.specialized.Pure<G>)","121":"Compose::::pureCompose(com.jnape.palatable.lambda.functions.specialized.Pure<F>,com.jnape.palatable.lambda.functions.specialized.Pure<G>)","122":"Compose::::pureCompose(com.jnape.palatable.lambda.functions.specialized.Pure<F>,com.jnape.palatable.lambda.functions.specialized.Pure<G>)","123":"Compose::::pureCompose(com.jnape.palatable.lambda.functions.specialized.Pure<F>,com.jnape.palatable.lambda.functions.specialized.Pure<G>)","124":"Compose::::pureCompose(com.jnape.palatable.lambda.functions.specialized.Pure<F>,com.jnape.palatable.lambda.functions.specialized.Pure<G>)"},"test_reverse_method_lines_dic":{"24":"ComposeTest::::testSubject()","25":"ComposeTest::::testSubject()","26":"ComposeTest::::testSubject()","27":"ComposeTest::::testSubject()","29":"ComposeTest::::inference()","30":"ComposeTest::::inference()","31":"ComposeTest::::inference()","32":"ComposeTest::::inference()","33":"ComposeTest::::inference()","35":"ComposeTest::::lazyZip()","36":"ComposeTest::::lazyZip()","37":"ComposeTest::::lazyZip()","38":"ComposeTest::::lazyZip()","39":"ComposeTest::::lazyZip()","40":"ComposeTest::::lazyZip()","41":"ComposeTest::::lazyZip()","42":"ComposeTest::::lazyZip()","43":"ComposeTest::::lazyZip()","45":"ComposeTest::::staticPure()","46":"ComposeTest::::staticPure()","47":"ComposeTest::::staticPure()","48":"ComposeTest::::staticPure()","49":"ComposeTest::::staticPure()"},"tests":[{"test_lines":[24,27],"covered_lines":[24,25,26]},{"test_lines":[29,33],"covered_lines":[24,25,26,30,38]},{"test_lines":[35,43],"covered_lines":[24,25,26,30,65,67,69,71,72,73,94]},{"test_lines":[45,49],"covered_lines":[24,25,26,94,118,121]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functor/builtin/State.java":{"class_content":["package com.jnape.palatable.lambda.functor.builtin;\n","\n","import com.jnape.palatable.lambda.adt.Unit;\n","import com.jnape.palatable.lambda.adt.hlist.Tuple2;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.recursion.RecursiveResult;\n","import com.jnape.palatable.lambda.functions.specialized.Pure;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","import com.jnape.palatable.lambda.monad.Monad;\n","import com.jnape.palatable.lambda.monad.MonadReader;\n","import com.jnape.palatable.lambda.monad.MonadRec;\n","import com.jnape.palatable.lambda.monad.MonadWriter;\n","import com.jnape.palatable.lambda.monad.transformer.builtin.StateT;\n","\n","import static com.jnape.palatable.lambda.adt.Unit.UNIT;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.Fn1.fn1;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Id.id;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Both.both;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Into.into;\n","import static com.jnape.palatable.lambda.functions.recursion.Trampoline.trampoline;\n","import static com.jnape.palatable.lambda.monad.transformer.builtin.StateT.stateT;\n","\n","/**\n"," * The state {@link Monad}, useful for iteratively building up state and state-contextualized result.\n"," * <p>\n"," * For more information, read about the\n"," * <a href=\"https://en.wikibooks.org/wiki/Haskell/Understanding_monads/State\" target=\"_blank\">state monad</a>.\n"," *\n"," * @param <S> the state type\n"," * @param <A> the result type\n"," */\n","public final class State<S, A> implements\n","        MonadRec<A, State<S,?>>,\n","        MonadReader<S, A, State<S, ?>>,\n","        MonadWriter<S, A, State<S, ?>> {\n","\n","    private final StateT<S, Identity<?>, A> stateFn;\n","\n","    private State(StateT<S, Identity<?>, A> stateFn) {\n","        this.stateFn = stateFn;\n","    }\n","\n","    /**\n","     * Run the stateful computation, returning a {@link Tuple2} of the result and the final state.\n","     *\n","     * @param s the initial state\n","     * @return a {@link Tuple2} of the result and the final state.\n","     */\n","    public Tuple2<A, S> run(S s) {\n","        return stateFn.<Identity<Tuple2<A, S>>>runStateT(s).runIdentity();\n","    }\n","\n","    /**\n","     * Run the stateful computation, returning the result.\n","     *\n","     * @param s the initial state\n","     * @return the result\n","     */\n","    public A eval(S s) {\n","        return run(s)._1();\n","    }\n","\n","    /**\n","     * Run the stateful computation, returning the final state.\n","     *\n","     * @param s the initial state\n","     * @return the final state\n","     */\n","    public S exec(S s) {\n","        return run(s)._2();\n","    }\n","\n","    /**\n","     * Map both the result and the final state to a new result and final state.\n","     *\n","     * @param fn  the mapping function\n","     * @param <B> the new state type\n","     * @return the mapped {@link State}\n","     */\n","    public <B> State<S, B> mapState(Fn1<? super Tuple2<A, S>, ? extends Tuple2<B, S>> fn) {\n","        return state(s -> fn.apply(run(s)));\n","    }\n","\n","    /**\n","     * Map the final state to a new final state using the provided function.\n","     *\n","     * @param fn the state-mapping function\n","     * @return the mapped {@link State}\n","     */\n","    public State<S, A> withState(Fn1<? super S, ? extends S> fn) {\n","        return state(s -> run(fn.apply(s)));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public State<S, A> local(Fn1<? super S, ? extends S> fn) {\n","        return state(s -> run(fn.apply(s)));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> State<S, Tuple2<A, B>> listens(Fn1<? super S, ? extends B> fn) {\n","        return state(s -> run(s).biMapL(both(id(), constantly(fn.apply(s)))));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public State<S, A> censor(Fn1<? super S, ? extends S> fn) {\n","        return local(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> State<S, B> flatMap(Fn1<? super A, ? extends Monad<B, State<S, ?>>> f) {\n","        return state(s -> run(s).into((a, s2) -> f.apply(a).<State<S, B>>coerce().run(s2)));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> State<S, B> pure(B b) {\n","        return state(s -> tuple(b, s));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> State<S, B> fmap(Fn1<? super A, ? extends B> fn) {\n","        return MonadRec.super.<B>fmap(fn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> State<S, B> zip(Applicative<Fn1<? super A, ? extends B>, State<S, ?>> appFn) {\n","        return MonadRec.super.zip(appFn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> Lazy<State<S, B>> lazyZip(\n","            Lazy<? extends Applicative<Fn1<? super A, ? extends B>, State<S, ?>>> lazyAppFn) {\n","        return MonadRec.super.lazyZip(lazyAppFn).fmap(Monad<B, State<S, ?>>::coerce);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> State<S, A> discardR(Applicative<B, State<S, ?>> appB) {\n","        return MonadRec.super.discardR(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> State<S, B> discardL(Applicative<B, State<S, ?>> appB) {\n","        return MonadRec.super.discardL(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> State<S, B> trampolineM(Fn1<? super A, ? extends MonadRec<RecursiveResult<A, B>, State<S, ?>>> fn) {\n","        return state(fn1(this::run).fmap(trampoline(into((a, s) -> fn.apply(a)\n","                .<State<S, RecursiveResult<A, B>>>coerce().run(s)\n","                .into((aOrB, s_) -> aOrB.biMap(a_ -> tuple(a_, s_), b -> tuple(b, s_)))))));\n","    }\n","\n","    /**\n","     * Create a {@link State} that simply returns back the initial state as both the result and the final state\n","     *\n","     * @param <A> the state and result type\n","     * @return the new {@link State} instance\n","     */\n","    @SuppressWarnings(\"RedundantTypeArguments\")\n","    public static <A> State<A, A> get() {\n","        return state(Tuple2::<A>fill);\n","    }\n","\n","    /**\n","     * Create a {@link State} that ignores its initial state, returning a {@link Unit} result and <code>s</code> as its\n","     * final state.\n","     *\n","     * @param s   the final state\n","     * @param <S> the state type\n","     * @return the new {@link State} instance\n","     */\n","    public static <S> State<S, Unit> put(S s) {\n","        return modify(constantly(s));\n","    }\n","\n","    /**\n","     * Create a {@link State} that maps its initial state into its result, but leaves the initial state unchanged.\n","     *\n","     * @param fn  the mapping function\n","     * @param <S> the state type\n","     * @param <A> the result type\n","     * @return the new {@link State} instance\n","     */\n","    public static <S, A> State<S, A> gets(Fn1<? super S, ? extends A> fn) {\n","        return state(both(fn, id()));\n","    }\n","\n","    /**\n","     * Create a {@link State} that maps its initial state into its final state, returning a {@link Unit} result type.\n","     *\n","     * @param fn  the mapping function\n","     * @param <S> the state type\n","     * @return the new {@link State} instance\n","     */\n","    public static <S> State<S, Unit> modify(Fn1<? super S, ? extends S> fn) {\n","        return state(both(constantly(UNIT), fn));\n","    }\n","\n","    /**\n","     * Create a {@link State} that returns <code>a</code> as its result and its initial state as its final state.\n","     *\n","     * @param a   the result\n","     * @param <S> the state type\n","     * @param <A> the result type\n","     * @return the new {@link State} instance\n","     */\n","    public static <S, A> State<S, A> state(A a) {\n","        return gets(constantly(a));\n","    }\n","\n","    /**\n","     * Create a {@link State} from <code>stateFn</code>, a function that maps an initial state into a result and a final\n","     * state.\n","     *\n","     * @param stateFn the state function\n","     * @param <S>     the state type\n","     * @param <A>     the result type\n","     * @return the new {@link State} instance\n","     */\n","    public static <S, A> State<S, A> state(Fn1<? super S, ? extends Tuple2<A, S>> stateFn) {\n","        return new State<>(stateT(s -> new Identity<>(stateFn.apply(s))));\n","    }\n","\n","    /**\n","     * The canonical {@link Pure} instance for {@link State}.\n","     *\n","     * @param <S> the state type\n","     * @return the {@link Pure} instance\n","     */\n","    public static <S> Pure<State<S, ?>> pureState() {\n","        return new Pure<State<S, ?>>() {\n","            @Override\n","            public <A> State<S, A> checkedApply(A a) throws Throwable {\n","                return state(s -> tuple(a, s));\n","            }\n","        };\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functor.builtin;\n","\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.ApplicativeLaws;\n","import testsupport.traits.Equivalence;\n","import testsupport.traits.FunctorLaws;\n","import testsupport.traits.MonadLaws;\n","import testsupport.traits.MonadReaderLaws;\n","import testsupport.traits.MonadRecLaws;\n","import testsupport.traits.MonadWriterLaws;\n","\n","import static com.jnape.palatable.lambda.adt.Unit.UNIT;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Id.id;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Into.into;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.StateMatcher.whenEvaluated;\n","import static testsupport.matchers.StateMatcher.whenExecuted;\n","import static testsupport.matchers.StateMatcher.whenRun;\n","import static testsupport.traits.Equivalence.equivalence;\n","\n","@RunWith(Traits.class)\n","public class StateTest {\n","\n","    @TestTraits({FunctorLaws.class,\n","                 ApplicativeLaws.class,\n","                 MonadLaws.class,\n","                 MonadRecLaws.class,\n","                 MonadReaderLaws.class,\n","                 MonadWriterLaws.class})\n","    public Equivalence<State<String, Integer>> testSubject() {\n","        return equivalence(State.gets(String::length), s -> s.run(\"foo\"));\n","    }\n","\n","    @Test\n","    public void eval() {\n","        assertThat(State.gets(id()), whenEvaluated(1, 1));\n","    }\n","\n","    @Test\n","    public void exec() {\n","        assertThat(State.modify(x -> x + 1), whenExecuted(1, 2));\n","    }\n","\n","    @Test\n","    public void get() {\n","        assertThat(State.get(), whenRun(1, 1, 1));\n","    }\n","\n","    @Test\n","    public void put() {\n","        assertThat(State.put(1), whenRun(1, UNIT, 1));\n","    }\n","\n","    @Test\n","    public void gets() {\n","        assertThat(State.gets(Integer::parseInt), whenRun(\"0\", 0, \"0\"));\n","    }\n","\n","    @Test\n","    public void modify() {\n","        assertThat(State.modify(x -> x + 1), whenRun(0, UNIT, 1));\n","    }\n","\n","    @Test\n","    public void state() {\n","        assertThat(State.state(1), whenRun(UNIT, 1, UNIT));\n","        assertThat(State.state(x -> tuple(x + 1, x - 1)), whenRun(0, 1, -1));\n","    }\n","\n","    @Test\n","    public void stateAccumulation() {\n","        assertThat(State.<Integer>get().flatMap(i -> State.put(i + 1).discardL(State.state(i))),\n","                   whenRun(0, 0, 1));\n","    }\n","\n","    @Test\n","    public void zipOrdering() {\n","        assertThat(State.<String, Integer>state(s -> tuple(0, s + \"1\"))\n","                           .zip(State.state(s -> tuple(x -> x + 1, s + \"2\"))),\n","                   whenRun(\"_\", 1, \"_12\"));\n","    }\n","\n","    @Test\n","    public void withState() {\n","        assertThat(State.<Integer>get().withState(x -> x + 1), whenRun(0, 1, 1));\n","    }\n","\n","    @Test\n","    public void mapState() {\n","        assertThat(State.<Integer>get().mapState(into((a, s) -> tuple(a + 1, s + 2))), whenRun(0, 1, 2));\n","    }\n","\n","    @Test\n","    public void staticPure() {\n","        assertThat(State.<String>pureState().apply(1), whenRun(\"foo\", 1, \"foo\"));\n","    }\n","}"],"method_lines_dic":{"State::::run(S)":[51,53],"State::::eval(S)":[61,63],"State::::exec(S)":[71,73],"State::::mapState(com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.hlist.Tuple2<A, S>, ? extends com.jnape.palatable.lambda.adt.hlist.Tuple2<B, S>>)":[82,84],"State::::withState(com.jnape.palatable.lambda.functions.Fn1<? super S, ? extends S>)":[92,94],"State::::local(com.jnape.palatable.lambda.functions.Fn1<? super S, ? extends S>)":[99,102],"State::::listens(com.jnape.palatable.lambda.functions.Fn1<? super S, ? extends B>)":[107,110],"State::::censor(com.jnape.palatable.lambda.functions.Fn1<? super S, ? extends S>)":[115,118],"State::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.functor.builtin.State<S, ?>>>)":[123,126],"State::::pure(B)":[131,134],"State::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)":[139,142],"State::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.State<S, ?>>)":[147,150],"State::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.State<S, ?>>>)":[155,159],"State::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.State<S, ?>>)":[164,167],"State::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.State<S, ?>>)":[172,175],"State::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.functor.builtin.State<S, ?>>>)":[180,185],"State::::get()":[193,196],"State::::put(S)":[206,208],"State::::gets(com.jnape.palatable.lambda.functions.Fn1<? super S, ? extends A>)":[218,220],"State::::modify(com.jnape.palatable.lambda.functions.Fn1<? super S, ? extends S>)":[229,231],"State::::state(A)":[241,243],"State::::state(com.jnape.palatable.lambda.functions.Fn1<? super S, ? extends com.jnape.palatable.lambda.adt.hlist.Tuple2<A, S>>)":[254,256],"State::::pureState()":[264,271]},"test_method_lines_dic":{"StateTest::::testSubject()":[28,36],"StateTest::::eval()":[38,41],"StateTest::::exec()":[43,46],"StateTest::::get()":[48,51],"StateTest::::put()":[53,56],"StateTest::::gets()":[58,61],"StateTest::::modify()":[63,66],"StateTest::::state()":[68,72],"StateTest::::stateAccumulation()":[74,78],"StateTest::::zipOrdering()":[80,85],"StateTest::::withState()":[87,90],"StateTest::::mapState()":[92,95],"StateTest::::staticPure()":[97,100]},"reverse_method_lines_dic":{"51":"State::::run(S)","52":"State::::run(S)","53":"State::::run(S)","61":"State::::eval(S)","62":"State::::eval(S)","63":"State::::eval(S)","71":"State::::exec(S)","72":"State::::exec(S)","73":"State::::exec(S)","82":"State::::mapState(com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.hlist.Tuple2<A, S>, ? extends com.jnape.palatable.lambda.adt.hlist.Tuple2<B, S>>)","83":"State::::mapState(com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.hlist.Tuple2<A, S>, ? extends com.jnape.palatable.lambda.adt.hlist.Tuple2<B, S>>)","84":"State::::mapState(com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.hlist.Tuple2<A, S>, ? extends com.jnape.palatable.lambda.adt.hlist.Tuple2<B, S>>)","92":"State::::withState(com.jnape.palatable.lambda.functions.Fn1<? super S, ? extends S>)","93":"State::::withState(com.jnape.palatable.lambda.functions.Fn1<? super S, ? extends S>)","94":"State::::withState(com.jnape.palatable.lambda.functions.Fn1<? super S, ? extends S>)","99":"State::::local(com.jnape.palatable.lambda.functions.Fn1<? super S, ? extends S>)","100":"State::::local(com.jnape.palatable.lambda.functions.Fn1<? super S, ? extends S>)","101":"State::::local(com.jnape.palatable.lambda.functions.Fn1<? super S, ? extends S>)","102":"State::::local(com.jnape.palatable.lambda.functions.Fn1<? super S, ? extends S>)","107":"State::::listens(com.jnape.palatable.lambda.functions.Fn1<? super S, ? extends B>)","108":"State::::listens(com.jnape.palatable.lambda.functions.Fn1<? super S, ? extends B>)","109":"State::::listens(com.jnape.palatable.lambda.functions.Fn1<? super S, ? extends B>)","110":"State::::listens(com.jnape.palatable.lambda.functions.Fn1<? super S, ? extends B>)","115":"State::::censor(com.jnape.palatable.lambda.functions.Fn1<? super S, ? extends S>)","116":"State::::censor(com.jnape.palatable.lambda.functions.Fn1<? super S, ? extends S>)","117":"State::::censor(com.jnape.palatable.lambda.functions.Fn1<? super S, ? extends S>)","118":"State::::censor(com.jnape.palatable.lambda.functions.Fn1<? super S, ? extends S>)","123":"State::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.functor.builtin.State<S, ?>>>)","124":"State::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.functor.builtin.State<S, ?>>>)","125":"State::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.functor.builtin.State<S, ?>>>)","126":"State::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.functor.builtin.State<S, ?>>>)","131":"State::::pure(B)","132":"State::::pure(B)","133":"State::::pure(B)","134":"State::::pure(B)","139":"State::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","140":"State::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","141":"State::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","142":"State::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","147":"State::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.State<S, ?>>)","148":"State::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.State<S, ?>>)","149":"State::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.State<S, ?>>)","150":"State::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.State<S, ?>>)","155":"State::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.State<S, ?>>>)","156":"State::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.State<S, ?>>>)","157":"State::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.State<S, ?>>>)","158":"State::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.State<S, ?>>>)","159":"State::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.State<S, ?>>>)","164":"State::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.State<S, ?>>)","165":"State::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.State<S, ?>>)","166":"State::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.State<S, ?>>)","167":"State::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.State<S, ?>>)","172":"State::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.State<S, ?>>)","173":"State::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.State<S, ?>>)","174":"State::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.State<S, ?>>)","175":"State::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.State<S, ?>>)","180":"State::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.functor.builtin.State<S, ?>>>)","181":"State::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.functor.builtin.State<S, ?>>>)","182":"State::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.functor.builtin.State<S, ?>>>)","183":"State::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.functor.builtin.State<S, ?>>>)","184":"State::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.functor.builtin.State<S, ?>>>)","185":"State::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.functor.builtin.State<S, ?>>>)","193":"State::::get()","194":"State::::get()","195":"State::::get()","196":"State::::get()","206":"State::::put(S)","207":"State::::put(S)","208":"State::::put(S)","218":"State::::gets(com.jnape.palatable.lambda.functions.Fn1<? super S, ? extends A>)","219":"State::::gets(com.jnape.palatable.lambda.functions.Fn1<? super S, ? extends A>)","220":"State::::gets(com.jnape.palatable.lambda.functions.Fn1<? super S, ? extends A>)","229":"State::::modify(com.jnape.palatable.lambda.functions.Fn1<? super S, ? extends S>)","230":"State::::modify(com.jnape.palatable.lambda.functions.Fn1<? super S, ? extends S>)","231":"State::::modify(com.jnape.palatable.lambda.functions.Fn1<? super S, ? extends S>)","241":"State::::state(A)","242":"State::::state(A)","243":"State::::state(A)","254":"State::::state(com.jnape.palatable.lambda.functions.Fn1<? super S, ? extends com.jnape.palatable.lambda.adt.hlist.Tuple2<A, S>>)","255":"State::::state(com.jnape.palatable.lambda.functions.Fn1<? super S, ? extends com.jnape.palatable.lambda.adt.hlist.Tuple2<A, S>>)","256":"State::::state(com.jnape.palatable.lambda.functions.Fn1<? super S, ? extends com.jnape.palatable.lambda.adt.hlist.Tuple2<A, S>>)","264":"State::::pureState()","265":"State::::pureState()","266":"State::::pureState()","267":"State::::pureState()","268":"State::::pureState()","269":"State::::pureState()","270":"State::::pureState()","271":"State::::pureState()"},"test_reverse_method_lines_dic":{"28":"StateTest::::testSubject()","29":"StateTest::::testSubject()","30":"StateTest::::testSubject()","31":"StateTest::::testSubject()","32":"StateTest::::testSubject()","33":"StateTest::::testSubject()","34":"StateTest::::testSubject()","35":"StateTest::::testSubject()","36":"StateTest::::testSubject()","38":"StateTest::::eval()","39":"StateTest::::eval()","40":"StateTest::::eval()","41":"StateTest::::eval()","43":"StateTest::::exec()","44":"StateTest::::exec()","45":"StateTest::::exec()","46":"StateTest::::exec()","48":"StateTest::::get()","49":"StateTest::::get()","50":"StateTest::::get()","51":"StateTest::::get()","53":"StateTest::::put()","54":"StateTest::::put()","55":"StateTest::::put()","56":"StateTest::::put()","58":"StateTest::::gets()","59":"StateTest::::gets()","60":"StateTest::::gets()","61":"StateTest::::gets()","63":"StateTest::::modify()","64":"StateTest::::modify()","65":"StateTest::::modify()","66":"StateTest::::modify()","68":"StateTest::::state()","69":"StateTest::::state()","70":"StateTest::::state()","71":"StateTest::::state()","72":"StateTest::::state()","74":"StateTest::::stateAccumulation()","75":"StateTest::::stateAccumulation()","76":"StateTest::::stateAccumulation()","77":"StateTest::::stateAccumulation()","78":"StateTest::::stateAccumulation()","80":"StateTest::::zipOrdering()","81":"StateTest::::zipOrdering()","82":"StateTest::::zipOrdering()","83":"StateTest::::zipOrdering()","84":"StateTest::::zipOrdering()","85":"StateTest::::zipOrdering()","87":"StateTest::::withState()","88":"StateTest::::withState()","89":"StateTest::::withState()","90":"StateTest::::withState()","92":"StateTest::::mapState()","93":"StateTest::::mapState()","94":"StateTest::::mapState()","95":"StateTest::::mapState()","97":"StateTest::::staticPure()","98":"StateTest::::staticPure()","99":"StateTest::::staticPure()","100":"StateTest::::staticPure()"},"tests":[{"test_lines":[28,36],"covered_lines":[41,42,43,219,255]},{"test_lines":[38,41],"covered_lines":[41,42,43,52,219,255]},{"test_lines":[43,46],"covered_lines":[41,42,43,52,219,230,255]},{"test_lines":[48,51],"covered_lines":[41,42,43,52,195,219,255]},{"test_lines":[53,56],"covered_lines":[41,42,43,52,207,219,230,255]},{"test_lines":[58,61],"covered_lines":[41,42,43,52,219,255]},{"test_lines":[63,66],"covered_lines":[41,42,43,52,219,230,255]},{"test_lines":[68,72],"covered_lines":[41,42,43,52,219,242,255]},{"test_lines":[74,78],"covered_lines":[41,42,43,52,125,133,141,149,174,195,207,219,230,242,255]},{"test_lines":[80,85],"covered_lines":[41,42,43,52,125,133,141,149,219,255]},{"test_lines":[87,90],"covered_lines":[41,42,43,52,93,195,219,255]},{"test_lines":[92,95],"covered_lines":[41,42,43,52,83,195,219,255]},{"test_lines":[97,100],"covered_lines":[41,42,43,52,219,255,265,268]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functor/builtin/Lazy.java":{"class_content":["package com.jnape.palatable.lambda.functor.builtin;\n","\n","import com.jnape.palatable.lambda.adt.hlist.Tuple2;\n","import com.jnape.palatable.lambda.functions.Fn0;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.recursion.RecursiveResult;\n","import com.jnape.palatable.lambda.functions.specialized.Pure;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","import com.jnape.palatable.lambda.monad.Monad;\n","import com.jnape.palatable.lambda.monad.MonadRec;\n","import com.jnape.palatable.lambda.traversable.Traversable;\n","\n","import java.util.LinkedList;\n","import java.util.Objects;\n","\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Into.into;\n","import static com.jnape.palatable.lambda.functions.recursion.RecursiveResult.recurse;\n","import static com.jnape.palatable.lambda.functions.recursion.RecursiveResult.terminate;\n","import static com.jnape.palatable.lambda.functions.recursion.Trampoline.trampoline;\n","\n","/**\n"," * A {@link Monad} representing a lazily-computed value. Stack-safe.\n"," *\n"," * @param <A> the value type\n"," */\n","public abstract class Lazy<A> implements MonadRec<A, Lazy<?>>, Traversable<A, Lazy<?>> {\n","\n","    private Lazy() {\n","    }\n","\n","    /**\n","     * Returns the value represented by this lazy computation.\n","     *\n","     * @return the value\n","     */\n","    public abstract A value();\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> Lazy<B> flatMap(Fn1<? super A, ? extends Monad<B, Lazy<?>>> f) {\n","        @SuppressWarnings(\"unchecked\") Lazy<Object> source = (Lazy<Object>) this;\n","        @SuppressWarnings({\"unchecked\", \"RedundantCast\"})\n","        Fn1<Object, Lazy<Object>> flatMap = (Fn1<Object, Lazy<Object>>) (Object) f;\n","        return new Compose<>(source, flatMap);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    @SuppressWarnings(\"unchecked\")\n","    public <B, App extends Applicative<?, App>, TravB extends Traversable<B, Lazy<?>>,\n","            AppTrav extends Applicative<TravB, App>> AppTrav traverse(Fn1<? super A, ? extends Applicative<B, App>> fn,\n","                                                                      Fn1<? super TravB, ? extends AppTrav> pure) {\n","        return fn.apply(value()).fmap(b -> (TravB) lazy(b)).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final <B> Lazy<B> pure(B b) {\n","        return lazy(b);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final <B> Lazy<B> fmap(Fn1<? super A, ? extends B> fn) {\n","        return MonadRec.super.<B>fmap(fn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> Lazy<B> zip(Applicative<Fn1<? super A, ? extends B>, Lazy<?>> appFn) {\n","        return MonadRec.super.zip(appFn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final <B> Lazy<B> discardL(Applicative<B, Lazy<?>> appB) {\n","        return MonadRec.super.discardL(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final <B> Lazy<A> discardR(Applicative<B, Lazy<?>> appB) {\n","        return MonadRec.super.discardR(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> Lazy<B> trampolineM(Fn1<? super A, ? extends MonadRec<RecursiveResult<A, B>, Lazy<?>>> fn) {\n","        return flatMap(a -> fn.apply(a).<Lazy<RecursiveResult<A, B>>>coerce()\n","                .flatMap(aOrB -> aOrB.match(a_ -> lazy(a_).trampolineM(fn), Lazy::lazy)));\n","    }\n","\n","    @Override\n","    public boolean equals(Object other) {\n","        return other instanceof Lazy<?> && Objects.equals(value(), ((Lazy<?>) other).value());\n","    }\n","\n","    @Override\n","    public int hashCode() {\n","        return Objects.hash(value());\n","    }\n","\n","    @Override\n","    public String toString() {\n","        return \"Lazy{value=\" + value() + \"}\";\n","    }\n","\n","    /**\n","     * Lift a pure value into a lazy computation.\n","     *\n","     * @param value the value\n","     * @param <A>   the value type\n","     * @return the new {@link Lazy}\n","     */\n","    public static <A> Lazy<A> lazy(A value) {\n","        return lazy(() -> value);\n","    }\n","\n","    /**\n","     * Wrap a computation in a lazy computation.\n","     *\n","     * @param <A> the value type\n","     * @param fn0 the computation\n","     * @return the new {@link Lazy}\n","     */\n","    public static <A> Lazy<A> lazy(Fn0<A> fn0) {\n","        return new Later<>(fn0);\n","    }\n","\n","    /**\n","     * The canonical {@link Pure} instance for {@link Lazy}.\n","     *\n","     * @return the {@link Pure} instance\n","     */\n","    public static Pure<Lazy<?>> pureLazy() {\n","        return Lazy::lazy;\n","    }\n","\n","    private static final class Later<A> extends Lazy<A> {\n","        private final Fn0<A> fn0;\n","\n","        private Later(Fn0<A> fn0) {\n","            this.fn0 = fn0;\n","        }\n","\n","        @Override\n","        public A value() {\n","            return fn0.apply();\n","        }\n","    }\n","\n","    private static final class Compose<A> extends Lazy<A> {\n","        private final Lazy<Object>              source;\n","        private final Fn1<Object, Lazy<Object>> flatMap;\n","\n","        private Compose(Lazy<Object> source,\n","                        Fn1<Object, Lazy<Object>> flatMap) {\n","            this.source = source;\n","            this.flatMap = flatMap;\n","        }\n","\n","        @Override\n","        public A value() {\n","            @SuppressWarnings(\"unchecked\") Tuple2<Lazy<Object>, LinkedList<Fn1<Object, Lazy<Object>>>> tuple =\n","                    tuple((Lazy<Object>) this, new LinkedList<>());\n","            @SuppressWarnings(\"unchecked\")\n","            A a = (A) trampoline(into((source, flatMaps) -> {\n","                if (source instanceof Compose<?>) {\n","                    Compose<?> nested = (Compose<?>) source;\n","                    flatMaps.push(nested.flatMap);\n","                    return recurse(tuple(nested.source, flatMaps));\n","                }\n","\n","                if (flatMaps.isEmpty())\n","                    return terminate(source.value());\n","\n","                return recurse(tuple(flatMaps.pop().apply(source.value()), flatMaps));\n","            }), tuple);\n","\n","            return a;\n","        }\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functor.builtin;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.ApplicativeLaws;\n","import testsupport.traits.Equivalence;\n","import testsupport.traits.FunctorLaws;\n","import testsupport.traits.MonadLaws;\n","import testsupport.traits.MonadRecLaws;\n","\n","import java.util.concurrent.atomic.AtomicBoolean;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn3.Times.times;\n","import static com.jnape.palatable.lambda.functor.builtin.Lazy.lazy;\n","import static com.jnape.palatable.lambda.functor.builtin.Lazy.pureLazy;\n","import static org.junit.Assert.assertEquals;\n","import static org.junit.Assert.assertFalse;\n","import static org.junit.Assert.assertTrue;\n","import static testsupport.Constants.STACK_EXPLODING_NUMBER;\n","import static testsupport.traits.Equivalence.equivalence;\n","\n","@RunWith(Traits.class)\n","public class LazyTest {\n","\n","    @TestTraits({FunctorLaws.class, ApplicativeLaws.class, MonadLaws.class, MonadRecLaws.class})\n","    public Equivalence<Lazy<Integer>> testSubject() {\n","        return equivalence(lazy(0), Lazy::value);\n","    }\n","\n","    @Test\n","    public void valueExtraction() {\n","        assertEquals(\"foo\", lazy(\"foo\").value());\n","        assertEquals(\"foo\", lazy(() -> \"foo\").value());\n","    }\n","\n","    @Test\n","    public void lazyEvaluation() {\n","        AtomicBoolean invoked = new AtomicBoolean(false);\n","        Lazy<Integer> lazy = lazy(0).flatMap(x -> {\n","            invoked.set(true);\n","            return lazy(x + 1);\n","        });\n","        assertFalse(invoked.get());\n","        assertEquals((Integer) 1, lazy.value());\n","        assertTrue(invoked.get());\n","    }\n","\n","    @Test\n","    public void linearStackSafety() {\n","        assertEquals(STACK_EXPLODING_NUMBER,\n","                     times(STACK_EXPLODING_NUMBER, f -> f.fmap(x -> x + 1), lazy(0)).value());\n","    }\n","\n","    @Test\n","    public void recursiveStackSafety() {\n","        assertEquals(STACK_EXPLODING_NUMBER,\n","                     new Fn1<Lazy<Integer>, Lazy<Integer>>() {\n","                         @Override\n","                         public Lazy<Integer> checkedApply(Lazy<Integer> lazyX) {\n","                             return lazyX.flatMap(x -> x < STACK_EXPLODING_NUMBER\n","                                                       ? apply(lazy(x + 1))\n","                                                       : lazy(x));\n","                         }\n","                     }.apply(lazy(0)).value());\n","    }\n","\n","    @Test\n","    public void staticPure() {\n","        Lazy<Integer> lazy = pureLazy().apply(1);\n","        assertEquals(lazy(1), lazy);\n","    }\n","}"],"method_lines_dic":{"Lazy::::value()":[37,37],"Lazy::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.functor.builtin.Lazy<?>>>)":[42,48],"Lazy::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)":[53,59],"Lazy::::pure(B)":[64,67],"Lazy::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)":[72,75],"Lazy::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Lazy<?>>)":[80,83],"Lazy::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Lazy<?>>)":[88,91],"Lazy::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Lazy<?>>)":[96,99],"Lazy::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.functor.builtin.Lazy<?>>>)":[104,108],"Lazy::::equals(java.lang.Object)":[110,113],"Lazy::::hashCode()":[115,118],"Lazy::::toString()":[120,123],"Lazy::::lazy(A)":[132,134],"Lazy::::lazy(com.jnape.palatable.lambda.functions.Fn0<A>)":[143,145],"Lazy::::pureLazy()":[152,154],"Lazy.Later::::value()":[163,166],"Lazy.Compose::::value()":[179,198]},"test_method_lines_dic":{"LazyTest::::testSubject()":[28,31],"LazyTest::::valueExtraction()":[33,37],"LazyTest::::lazyEvaluation()":[39,49],"LazyTest::::linearStackSafety()":[51,55],"LazyTest::::recursiveStackSafety()":[57,68],"LazyTest::::staticPure()":[70,74]},"reverse_method_lines_dic":{"37":"Lazy::::value()","42":"Lazy::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.functor.builtin.Lazy<?>>>)","43":"Lazy::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.functor.builtin.Lazy<?>>>)","44":"Lazy::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.functor.builtin.Lazy<?>>>)","45":"Lazy::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.functor.builtin.Lazy<?>>>)","46":"Lazy::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.functor.builtin.Lazy<?>>>)","47":"Lazy::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.functor.builtin.Lazy<?>>>)","48":"Lazy::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.functor.builtin.Lazy<?>>>)","53":"Lazy::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","54":"Lazy::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","55":"Lazy::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","56":"Lazy::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","57":"Lazy::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","58":"Lazy::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","59":"Lazy::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","64":"Lazy::::pure(B)","65":"Lazy::::pure(B)","66":"Lazy::::pure(B)","67":"Lazy::::pure(B)","72":"Lazy::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","73":"Lazy::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","74":"Lazy::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","75":"Lazy::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","80":"Lazy::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Lazy<?>>)","81":"Lazy::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Lazy<?>>)","82":"Lazy::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Lazy<?>>)","83":"Lazy::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Lazy<?>>)","88":"Lazy::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Lazy<?>>)","89":"Lazy::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Lazy<?>>)","90":"Lazy::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Lazy<?>>)","91":"Lazy::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Lazy<?>>)","96":"Lazy::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Lazy<?>>)","97":"Lazy::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Lazy<?>>)","98":"Lazy::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Lazy<?>>)","99":"Lazy::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Lazy<?>>)","104":"Lazy::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.functor.builtin.Lazy<?>>>)","105":"Lazy::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.functor.builtin.Lazy<?>>>)","106":"Lazy::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.functor.builtin.Lazy<?>>>)","107":"Lazy::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.functor.builtin.Lazy<?>>>)","108":"Lazy::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.functor.builtin.Lazy<?>>>)","110":"Lazy::::equals(java.lang.Object)","111":"Lazy::::equals(java.lang.Object)","112":"Lazy::::equals(java.lang.Object)","113":"Lazy::::equals(java.lang.Object)","115":"Lazy::::hashCode()","116":"Lazy::::hashCode()","117":"Lazy::::hashCode()","118":"Lazy::::hashCode()","120":"Lazy::::toString()","121":"Lazy::::toString()","122":"Lazy::::toString()","123":"Lazy::::toString()","132":"Lazy::::lazy(A)","133":"Lazy::::lazy(A)","134":"Lazy::::lazy(A)","143":"Lazy::::lazy(com.jnape.palatable.lambda.functions.Fn0<A>)","144":"Lazy::::lazy(com.jnape.palatable.lambda.functions.Fn0<A>)","145":"Lazy::::lazy(com.jnape.palatable.lambda.functions.Fn0<A>)","152":"Lazy::::pureLazy()","153":"Lazy::::pureLazy()","154":"Lazy::::pureLazy()","163":"Lazy.Later::::value()","164":"Lazy.Later::::value()","165":"Lazy.Later::::value()","166":"Lazy.Later::::value()","179":"Lazy.Compose::::value()","180":"Lazy.Compose::::value()","181":"Lazy.Compose::::value()","182":"Lazy.Compose::::value()","183":"Lazy.Compose::::value()","184":"Lazy.Compose::::value()","185":"Lazy.Compose::::value()","186":"Lazy.Compose::::value()","187":"Lazy.Compose::::value()","188":"Lazy.Compose::::value()","189":"Lazy.Compose::::value()","190":"Lazy.Compose::::value()","191":"Lazy.Compose::::value()","192":"Lazy.Compose::::value()","193":"Lazy.Compose::::value()","194":"Lazy.Compose::::value()","195":"Lazy.Compose::::value()","196":"Lazy.Compose::::value()","197":"Lazy.Compose::::value()","198":"Lazy.Compose::::value()"},"test_reverse_method_lines_dic":{"28":"LazyTest::::testSubject()","29":"LazyTest::::testSubject()","30":"LazyTest::::testSubject()","31":"LazyTest::::testSubject()","33":"LazyTest::::valueExtraction()","34":"LazyTest::::valueExtraction()","35":"LazyTest::::valueExtraction()","36":"LazyTest::::valueExtraction()","37":"LazyTest::::valueExtraction()","39":"LazyTest::::lazyEvaluation()","40":"LazyTest::::lazyEvaluation()","41":"LazyTest::::lazyEvaluation()","42":"LazyTest::::lazyEvaluation()","43":"LazyTest::::lazyEvaluation()","44":"LazyTest::::lazyEvaluation()","45":"LazyTest::::lazyEvaluation()","46":"LazyTest::::lazyEvaluation()","47":"LazyTest::::lazyEvaluation()","48":"LazyTest::::lazyEvaluation()","49":"LazyTest::::lazyEvaluation()","51":"LazyTest::::linearStackSafety()","52":"LazyTest::::linearStackSafety()","53":"LazyTest::::linearStackSafety()","54":"LazyTest::::linearStackSafety()","55":"LazyTest::::linearStackSafety()","57":"LazyTest::::recursiveStackSafety()","58":"LazyTest::::recursiveStackSafety()","59":"LazyTest::::recursiveStackSafety()","60":"LazyTest::::recursiveStackSafety()","61":"LazyTest::::recursiveStackSafety()","62":"LazyTest::::recursiveStackSafety()","63":"LazyTest::::recursiveStackSafety()","64":"LazyTest::::recursiveStackSafety()","65":"LazyTest::::recursiveStackSafety()","66":"LazyTest::::recursiveStackSafety()","67":"LazyTest::::recursiveStackSafety()","68":"LazyTest::::recursiveStackSafety()","70":"LazyTest::::staticPure()","71":"LazyTest::::staticPure()","72":"LazyTest::::staticPure()","73":"LazyTest::::staticPure()","74":"LazyTest::::staticPure()"},"tests":[{"test_lines":[28,31],"covered_lines":[29,30,133,144,159,160,161]},{"test_lines":[33,37],"covered_lines":[29,30,133,144,159,160,161,165]},{"test_lines":[39,49],"covered_lines":[29,30,44,46,47,133,144,159,160,161,165,174,175,176,177,181,182,184,185,186,187,188,191,192,194,197]},{"test_lines":[51,55],"covered_lines":[29,30,44,46,47,66,74,133,144,159,160,161,165,174,175,176,177,181,182,184,185,186,187,188,191,192,194,197]},{"test_lines":[57,68],"covered_lines":[29,30,44,46,47,133,144,159,160,161,165,174,175,176,177,181,182,184,185,186,187,188,191,192,194,197]},{"test_lines":[70,74],"covered_lines":[29,30,112,133,144,153,159,160,161,165]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functor/builtin/Market.java":{"class_content":["package com.jnape.palatable.lambda.functor.builtin;\n","\n","import com.jnape.palatable.lambda.adt.Either;\n","import com.jnape.palatable.lambda.adt.choice.Choice2;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.specialized.Pure;\n","import com.jnape.palatable.lambda.functions.recursion.RecursiveResult;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","import com.jnape.palatable.lambda.functor.Cocartesian;\n","import com.jnape.palatable.lambda.monad.Monad;\n","import com.jnape.palatable.lambda.monad.MonadRec;\n","import com.jnape.palatable.lambda.optics.Prism;\n","\n","import static com.jnape.palatable.lambda.adt.Either.left;\n","import static com.jnape.palatable.lambda.adt.Either.right;\n","import static com.jnape.palatable.lambda.adt.choice.Choice2.a;\n","import static com.jnape.palatable.lambda.adt.choice.Choice2.b;\n","import static com.jnape.palatable.lambda.functions.Fn1.fn1;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","import static com.jnape.palatable.lambda.functions.recursion.RecursiveResult.terminate;\n","import static com.jnape.palatable.lambda.functions.recursion.Trampoline.trampoline;\n","\n","/**\n"," * A profunctor used to extract the isomorphic functions a {@link Prism} is composed of.\n"," *\n"," * @param <A> the output that might fail to be produced\n"," * @param <B> the input that guarantees its output\n"," * @param <S> the input that might fail to map to its output\n"," * @param <T> the guaranteed output\n"," */\n","public final class Market<A, B, S, T> implements\n","        MonadRec<T, Market<A, B, S, ?>>,\n","        Cocartesian<S, T, Market<A, B, ?, ?>> {\n","\n","    private final Fn1<? super B, ? extends T>            bt;\n","    private final Fn1<? super S, ? extends Either<T, A>> sta;\n","\n","    public Market(Fn1<? super B, ? extends T> bt, Fn1<? super S, ? extends Either<T, A>> sta) {\n","        this.bt = fn1(bt);\n","        this.sta = fn1(sta);\n","    }\n","\n","    /**\n","     * Extract the mapping <code>B -&gt; T</code>.\n","     *\n","     * @return a <code>{@link Fn1}&lt;B, T&gt;</code>\n","     */\n","    public Fn1<? super B, ? extends T> bt() {\n","        return bt;\n","    }\n","\n","    /**\n","     * Extract the mapping <code>S -&gt; {@link Either}&lt;T, A&gt;</code>.\n","     *\n","     * @return a <code>{@link Fn1}&lt;S, {@link Either}&lt;T, A&gt;&gt;</code>\n","     */\n","    public Fn1<? super S, ? extends Either<T, A>> sta() {\n","        return sta;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <U> Market<A, B, S, U> pure(U u) {\n","        return new Market<>(constantly(u), constantly(left(u)));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <U> Market<A, B, S, U> flatMap(Fn1<? super T, ? extends Monad<U, Market<A, B, S, ?>>> f) {\n","        return new Market<>(b -> f.apply(bt().apply(b)).<Market<A, B, S, U>>coerce().bt().apply(b),\n","                            s -> sta().apply(s).invert()\n","                                    .flatMap(t -> f.apply(t).<Market<A, B, S, U>>coerce().sta()\n","                                            .apply(s).invert()).invert());\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <U> Market<A, B, S, U> trampolineM(\n","            Fn1<? super T, ? extends MonadRec<RecursiveResult<T, U>, Market<A, B, S, ?>>> fn) {\n","        Fn1<B, U> bu = Fn1.<B, T>fn1(bt).trampolineM(t -> fn1(fn.apply(t).<Market<A, B, S, RecursiveResult<T, U>>>coerce().bt));\n","        Fn1<S, Either<U, A>> sua = Fn1.<S, Either<T, A>>fn1(sta)\n","                .flatMap(tOrA -> fn1(s -> tOrA.match(\n","                        trampoline(t -> fn.apply(t).<Market<A, B, S, RecursiveResult<T, U>>>coerce()\n","                                .sta.apply(s)\n","                                .match(tOrU -> tOrU.match(RecursiveResult::recurse, u -> terminate(left(u))),\n","                                       a -> terminate(right(a)))),\n","                        Either::right)));\n","        return new Market<>(bu, sua);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <U> Market<A, B, S, U> zip(Applicative<Fn1<? super T, ? extends U>, Market<A, B, S, ?>> appFn) {\n","        Market<A, B, S, Fn1<? super T, ? extends U>> marketF = appFn.coerce();\n","        return new Market<>(b -> marketF.bt().apply(b).apply(bt().apply(b)),\n","                            s -> sta().apply(s).invert().zip(marketF.sta().apply(s).invert()).invert());\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <U> Market<A, B, S, U> fmap(Fn1<? super T, ? extends U> fn) {\n","        return diMapR(fn::apply);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C> Market<A, B, Choice2<C, S>, Choice2<C, T>> cocartesian() {\n","        return new Market<>(bt.fmap(Choice2::b),\n","                            cs -> cs.fmap(sta).match(c -> left(a(c)),\n","                                                     tOrA -> tOrA.match(t -> left(b(t)), Either::right)));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <R, U> Market<A, B, R, U> diMap(Fn1<? super R, ? extends S> lFn,\n","                                           Fn1<? super T, ? extends U> rFn) {\n","        return new Market<>(bt.fmap(rFn), sta.diMapL(lFn).diMapR(c -> c.biMapL(rFn)));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <R> Market<A, B, R, T> diMapL(Fn1<? super R, ? extends S> fn) {\n","        return (Market<A, B, R, T>) Cocartesian.super.<R>diMapL(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <U> Market<A, B, S, U> diMapR(Fn1<? super T, ? extends U> fn) {\n","        return (Market<A, B, S, U>) Cocartesian.super.<U>diMapR(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <R> Market<A, B, R, T> contraMap(Fn1<? super R, ? extends S> fn) {\n","        return (Market<A, B, R, T>) Cocartesian.super.<R>contraMap(fn);\n","    }\n","\n","    /**\n","     * The canonical {@link Pure} instance for {@link Market}.\n","     *\n","     * @param <A> the output that might fail to be produced\n","     * @param <B> the input that guarantees its output\n","     * @param <S> the input that might fail to map to its output\n","     * @return the {@link Pure} instance\n","     */\n","    public static <A, B, S> Pure<Market<A, B, S, ?>> pureMarket() {\n","        return new Pure<Market<A, B, S, ?>>() {\n","            @Override\n","            public <T> Market<A, B, S, T> checkedApply(T t) {\n","                return new Market<>(constantly(t), constantly(left(t)));\n","            }\n","        };\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functor.builtin;\n","\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.framework.Subjects;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.ApplicativeLaws;\n","import testsupport.traits.Equivalence;\n","import testsupport.traits.FunctorLaws;\n","import testsupport.traits.MonadLaws;\n","import testsupport.traits.MonadRecLaws;\n","\n","import static com.jnape.palatable.lambda.adt.Either.left;\n","import static com.jnape.palatable.lambda.adt.Either.trying;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Id.id;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Both.both;\n","import static com.jnape.palatable.traitor.framework.Subjects.subjects;\n","import static java.lang.Integer.parseInt;\n","import static org.junit.Assert.assertEquals;\n","import static testsupport.traits.Equivalence.equivalence;\n","\n","@RunWith(Traits.class)\n","public class MarketTest {\n","\n","    @TestTraits({FunctorLaws.class, ApplicativeLaws.class, MonadLaws.class, MonadRecLaws.class})\n","    public Subjects<Equivalence<Market<Integer, String, String, String>>> testSubject() {\n","        Market<Integer, String, String, String> market = new Market<>(id(), str -> trying(() -> parseInt(str),\n","                                                                                          constantly(str)));\n","        return subjects(equivalence(market, m -> both(m.bt(), m.sta(), \"123\")),\n","                        equivalence(market, m -> both(m.bt(), m.sta(), \"foo\")));\n","    }\n","\n","    @Test\n","    public void staticPure() {\n","        Market<Boolean, Character, String, Integer> market = Market.<Boolean, Character, String>pureMarket().apply(1);\n","        assertEquals((Integer) 1, market.bt().apply('a'));\n","        assertEquals(left(1), market.sta().apply(\"foo\"));\n","    }\n","}"],"method_lines_dic":{"Market::::bt()":[48,50],"Market::::sta()":[57,59],"Market::::pure(U)":[64,67],"Market::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends com.jnape.palatable.lambda.monad.Monad<U, com.jnape.palatable.lambda.functor.builtin.Market<A, B, S, ?>>>)":[72,78],"Market::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<T, U>, com.jnape.palatable.lambda.functor.builtin.Market<A, B, S, ?>>>)":[83,95],"Market::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends U>, com.jnape.palatable.lambda.functor.builtin.Market<A, B, S, ?>>)":[100,105],"Market::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends U>)":[110,113],"Market::::cocartesian()":[118,123],"Market::::diMap(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends S>,com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends U>)":[128,132],"Market::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends S>)":[137,140],"Market::::diMapR(com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends U>)":[145,148],"Market::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends S>)":[153,156],"Market::::pureMarket()":[166,173]},"test_method_lines_dic":{"MarketTest::::testSubject()":[27,33],"MarketTest::::staticPure()":[35,40]},"reverse_method_lines_dic":{"48":"Market::::bt()","49":"Market::::bt()","50":"Market::::bt()","57":"Market::::sta()","58":"Market::::sta()","59":"Market::::sta()","64":"Market::::pure(U)","65":"Market::::pure(U)","66":"Market::::pure(U)","67":"Market::::pure(U)","72":"Market::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends com.jnape.palatable.lambda.monad.Monad<U, com.jnape.palatable.lambda.functor.builtin.Market<A, B, S, ?>>>)","73":"Market::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends com.jnape.palatable.lambda.monad.Monad<U, com.jnape.palatable.lambda.functor.builtin.Market<A, B, S, ?>>>)","74":"Market::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends com.jnape.palatable.lambda.monad.Monad<U, com.jnape.palatable.lambda.functor.builtin.Market<A, B, S, ?>>>)","75":"Market::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends com.jnape.palatable.lambda.monad.Monad<U, com.jnape.palatable.lambda.functor.builtin.Market<A, B, S, ?>>>)","76":"Market::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends com.jnape.palatable.lambda.monad.Monad<U, com.jnape.palatable.lambda.functor.builtin.Market<A, B, S, ?>>>)","77":"Market::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends com.jnape.palatable.lambda.monad.Monad<U, com.jnape.palatable.lambda.functor.builtin.Market<A, B, S, ?>>>)","78":"Market::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends com.jnape.palatable.lambda.monad.Monad<U, com.jnape.palatable.lambda.functor.builtin.Market<A, B, S, ?>>>)","83":"Market::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<T, U>, com.jnape.palatable.lambda.functor.builtin.Market<A, B, S, ?>>>)","84":"Market::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<T, U>, com.jnape.palatable.lambda.functor.builtin.Market<A, B, S, ?>>>)","85":"Market::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<T, U>, com.jnape.palatable.lambda.functor.builtin.Market<A, B, S, ?>>>)","86":"Market::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<T, U>, com.jnape.palatable.lambda.functor.builtin.Market<A, B, S, ?>>>)","87":"Market::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<T, U>, com.jnape.palatable.lambda.functor.builtin.Market<A, B, S, ?>>>)","88":"Market::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<T, U>, com.jnape.palatable.lambda.functor.builtin.Market<A, B, S, ?>>>)","89":"Market::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<T, U>, com.jnape.palatable.lambda.functor.builtin.Market<A, B, S, ?>>>)","90":"Market::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<T, U>, com.jnape.palatable.lambda.functor.builtin.Market<A, B, S, ?>>>)","91":"Market::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<T, U>, com.jnape.palatable.lambda.functor.builtin.Market<A, B, S, ?>>>)","92":"Market::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<T, U>, com.jnape.palatable.lambda.functor.builtin.Market<A, B, S, ?>>>)","93":"Market::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<T, U>, com.jnape.palatable.lambda.functor.builtin.Market<A, B, S, ?>>>)","94":"Market::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<T, U>, com.jnape.palatable.lambda.functor.builtin.Market<A, B, S, ?>>>)","95":"Market::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<T, U>, com.jnape.palatable.lambda.functor.builtin.Market<A, B, S, ?>>>)","100":"Market::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends U>, com.jnape.palatable.lambda.functor.builtin.Market<A, B, S, ?>>)","101":"Market::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends U>, com.jnape.palatable.lambda.functor.builtin.Market<A, B, S, ?>>)","102":"Market::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends U>, com.jnape.palatable.lambda.functor.builtin.Market<A, B, S, ?>>)","103":"Market::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends U>, com.jnape.palatable.lambda.functor.builtin.Market<A, B, S, ?>>)","104":"Market::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends U>, com.jnape.palatable.lambda.functor.builtin.Market<A, B, S, ?>>)","105":"Market::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends U>, com.jnape.palatable.lambda.functor.builtin.Market<A, B, S, ?>>)","110":"Market::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends U>)","111":"Market::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends U>)","112":"Market::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends U>)","113":"Market::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends U>)","118":"Market::::cocartesian()","119":"Market::::cocartesian()","120":"Market::::cocartesian()","121":"Market::::cocartesian()","122":"Market::::cocartesian()","123":"Market::::cocartesian()","128":"Market::::diMap(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends S>,com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends U>)","129":"Market::::diMap(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends S>,com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends U>)","130":"Market::::diMap(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends S>,com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends U>)","131":"Market::::diMap(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends S>,com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends U>)","132":"Market::::diMap(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends S>,com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends U>)","137":"Market::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends S>)","138":"Market::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends S>)","139":"Market::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends S>)","140":"Market::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends S>)","145":"Market::::diMapR(com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends U>)","146":"Market::::diMapR(com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends U>)","147":"Market::::diMapR(com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends U>)","148":"Market::::diMapR(com.jnape.palatable.lambda.functions.Fn1<? super T, ? extends U>)","153":"Market::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends S>)","154":"Market::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends S>)","155":"Market::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends S>)","156":"Market::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends S>)","166":"Market::::pureMarket()","167":"Market::::pureMarket()","168":"Market::::pureMarket()","169":"Market::::pureMarket()","170":"Market::::pureMarket()","171":"Market::::pureMarket()","172":"Market::::pureMarket()","173":"Market::::pureMarket()"},"test_reverse_method_lines_dic":{"27":"MarketTest::::testSubject()","28":"MarketTest::::testSubject()","29":"MarketTest::::testSubject()","30":"MarketTest::::testSubject()","31":"MarketTest::::testSubject()","32":"MarketTest::::testSubject()","33":"MarketTest::::testSubject()","35":"MarketTest::::staticPure()","36":"MarketTest::::staticPure()","37":"MarketTest::::staticPure()","38":"MarketTest::::staticPure()","39":"MarketTest::::staticPure()","40":"MarketTest::::staticPure()"},"tests":[{"test_lines":[27,33],"covered_lines":[38,39,40,41]},{"test_lines":[35,40],"covered_lines":[38,39,40,41,49,58,167,170]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functor/builtin/Writer.java":{"class_content":["package com.jnape.palatable.lambda.functor.builtin;\n","\n","import com.jnape.palatable.lambda.adt.Unit;\n","import com.jnape.palatable.lambda.adt.hlist.Tuple2;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.recursion.RecursiveResult;\n","import com.jnape.palatable.lambda.functions.specialized.Pure;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","import com.jnape.palatable.lambda.monad.Monad;\n","import com.jnape.palatable.lambda.monad.MonadRec;\n","import com.jnape.palatable.lambda.monad.MonadWriter;\n","import com.jnape.palatable.lambda.monad.transformer.builtin.WriterT;\n","import com.jnape.palatable.lambda.monoid.Monoid;\n","\n","import static com.jnape.palatable.lambda.adt.Unit.UNIT;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Both.both;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Into.into;\n","import static com.jnape.palatable.lambda.functions.recursion.Trampoline.trampoline;\n","\n","/**\n"," * The lazy writer monad, a monad capturing some accumulation (eventually to be folded in terms of a given monoid) and\n"," * a value. Note that unlike the {@link State} monad, the {@link Writer} monad does not allow the value to be fully\n"," * derived from the accumulation.\n"," *\n"," * @param <W> the accumulation type\n"," * @param <A> the value type\n"," */\n","public final class Writer<W, A> implements\n","        MonadWriter<W, A, Writer<W, ?>>,\n","        MonadRec<A, Writer<W, ?>> {\n","\n","    private final Fn1<? super Monoid<W>, ? extends Tuple2<A, W>> writerFn;\n","\n","    private Writer(Fn1<? super Monoid<W>, ? extends Tuple2<A, W>> writerFn) {\n","        this.writerFn = writerFn;\n","    }\n","\n","    /**\n","     * Given a {@link Monoid} for the accumulation, run the computation represented by this {@link Writer}, accumulate\n","     * the written output in terms of the {@link Monoid}, and produce the accumulation and the value.\n","     *\n","     * @param monoid the accumulation {@link Monoid}\n","     * @return the accumulation with the value\n","     */\n","    public Tuple2<A, W> runWriter(Monoid<W> monoid) {\n","        return writerFn.apply(monoid);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> Writer<W, Tuple2<A, B>> listens(Fn1<? super W, ? extends B> fn) {\n","        return new Writer<>(monoid -> runWriter(monoid).into((a, w) -> tuple(both(constantly(a), fn, w), w)));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Writer<W, A> censor(Fn1<? super W, ? extends W> fn) {\n","        return new Writer<>(monoid -> runWriter(monoid).fmap(fn));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> Writer<W, B> trampolineM(Fn1<? super A, ? extends MonadRec<RecursiveResult<A, B>, Writer<W, ?>>> fn) {\n","        return new Writer<>(monoid -> trampoline(into((a, w) -> fn.apply(a).<Writer<W, RecursiveResult<A, B>>>coerce()\n","                .runWriter(monoid)\n","                .fmap(monoid.apply(w))\n","                .into((aOrB, w_) -> aOrB.biMap(a_ -> tuple(a_, w_), b -> tuple(b, w_)))), runWriter(monoid)));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> Writer<W, B> flatMap(Fn1<? super A, ? extends Monad<B, Writer<W, ?>>> f) {\n","        return new Writer<>(monoid -> writerFn.apply(monoid)\n","                .into((a, w) -> f.apply(a).<Writer<W, B>>coerce().runWriter(monoid).fmap(monoid.apply(w))));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> Writer<W, B> pure(B b) {\n","        return listen(b);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> Writer<W, B> fmap(Fn1<? super A, ? extends B> fn) {\n","        return MonadRec.super.<B>fmap(fn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> Writer<W, B> zip(Applicative<Fn1<? super A, ? extends B>, Writer<W, ?>> appFn) {\n","        return MonadRec.super.zip(appFn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> Lazy<Writer<W, B>> lazyZip(\n","            Lazy<? extends Applicative<Fn1<? super A, ? extends B>, Writer<W, ?>>> lazyAppFn) {\n","        return MonadRec.super.lazyZip(lazyAppFn).fmap(MonadRec<B, Writer<W, ?>>::coerce);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> Writer<W, B> discardL(Applicative<B, Writer<W, ?>> appB) {\n","        return MonadRec.super.discardL(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> Writer<W, A> discardR(Applicative<B, Writer<W, ?>> appB) {\n","        return MonadRec.super.discardR(appB).coerce();\n","    }\n","\n","    /**\n","     * Construct a {@link Writer} from an accumulation.\n","     *\n","     * @param w   the accumulation\n","     * @param <W> the accumulation type\n","     * @return the {@link Writer}\n","     */\n","    public static <W> Writer<W, Unit> tell(W w) {\n","        return writer(tuple(UNIT, w));\n","    }\n","\n","    /**\n","     * Construct a {@link Writer} from a value.\n","     *\n","     * @param a   the output value\n","     * @param <W> the accumulation type\n","     * @param <A> the value type\n","     * @return the {@link Writer}\n","     */\n","    public static <W, A> Writer<W, A> listen(A a) {\n","        return Writer.<W>pureWriter().apply(a);\n","    }\n","\n","    /**\n","     * Construct a {@link Writer} from an accumulation and a value.\n","     *\n","     * @param aw  the output value and accumulation\n","     * @param <W> the accumulation type\n","     * @param <A> the value type\n","     * @return the {@link WriterT}\n","     */\n","    public static <W, A> Writer<W, A> writer(Tuple2<A, W> aw) {\n","        return new Writer<>(constantly(aw));\n","    }\n","\n","    /**\n","     * The canonical {@link Pure} instance for {@link Writer}.\n","     *\n","     * @param <W> the accumulation type\n","     * @return the {@link Pure} instance\n","     */\n","    public static <W> Pure<Writer<W, ?>> pureWriter() {\n","        return new Pure<Writer<W, ?>>() {\n","            @Override\n","            public <A> Writer<W, A> checkedApply(A a) {\n","                return new Writer<>(monoid -> tuple(a, monoid.identity()));\n","            }\n","        };\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functor.builtin;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.framework.Subjects;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.ApplicativeLaws;\n","import testsupport.traits.Equivalence;\n","import testsupport.traits.FunctorLaws;\n","import testsupport.traits.MonadLaws;\n","import testsupport.traits.MonadRecLaws;\n","import testsupport.traits.MonadWriterLaws;\n","\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functor.builtin.Writer.listen;\n","import static com.jnape.palatable.lambda.functor.builtin.Writer.tell;\n","import static com.jnape.palatable.lambda.functor.builtin.Writer.writer;\n","import static com.jnape.palatable.lambda.monoid.builtin.Join.join;\n","import static com.jnape.palatable.traitor.framework.Subjects.subjects;\n","import static org.junit.Assert.assertEquals;\n","import static testsupport.traits.Equivalence.equivalence;\n","\n","@RunWith(Traits.class)\n","public class WriterTest {\n","\n","    @TestTraits({FunctorLaws.class, ApplicativeLaws.class, MonadLaws.class, MonadRecLaws.class, MonadWriterLaws.class})\n","    public Subjects<Equivalence<Writer<String, ?>>> testSubject() {\n","        Fn1<Writer<String, ?>, Object> runWriter = w -> w.runWriter(join());\n","        return subjects(equivalence(tell(\"foo\"), runWriter),\n","                        equivalence(listen(1), runWriter),\n","                        equivalence(writer(tuple(1, \"foo\")), runWriter));\n","    }\n","\n","    @Test\n","    public void tellListenInteraction() {\n","        assertEquals(tuple(1, \"hello, world!\"),\n","                     tell(\"hello, \")\n","                             .discardL(listen(1))\n","                             .discardR(tell(\"world!\"))\n","                             .runWriter(join()));\n","    }\n","}"],"method_lines_dic":{"Writer::::runWriter(com.jnape.palatable.lambda.monoid.Monoid<W>)":[47,49],"Writer::::listens(com.jnape.palatable.lambda.functions.Fn1<? super W, ? extends B>)":[54,57],"Writer::::censor(com.jnape.palatable.lambda.functions.Fn1<? super W, ? extends W>)":[62,65],"Writer::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.functor.builtin.Writer<W, ?>>>)":[70,76],"Writer::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.functor.builtin.Writer<W, ?>>>)":[81,85],"Writer::::pure(B)":[90,93],"Writer::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)":[98,101],"Writer::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Writer<W, ?>>)":[106,109],"Writer::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Writer<W, ?>>>)":[114,118],"Writer::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Writer<W, ?>>)":[123,126],"Writer::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Writer<W, ?>>)":[131,134],"Writer::::tell(W)":[143,145],"Writer::::listen(A)":[155,157],"Writer::::writer(com.jnape.palatable.lambda.adt.hlist.Tuple2<A, W>)":[167,169],"Writer::::pureWriter()":[177,184]},"test_method_lines_dic":{"WriterTest::::testSubject()":[28,34],"WriterTest::::tellListenInteraction()":[36,43]},"reverse_method_lines_dic":{"47":"Writer::::runWriter(com.jnape.palatable.lambda.monoid.Monoid<W>)","48":"Writer::::runWriter(com.jnape.palatable.lambda.monoid.Monoid<W>)","49":"Writer::::runWriter(com.jnape.palatable.lambda.monoid.Monoid<W>)","54":"Writer::::listens(com.jnape.palatable.lambda.functions.Fn1<? super W, ? extends B>)","55":"Writer::::listens(com.jnape.palatable.lambda.functions.Fn1<? super W, ? extends B>)","56":"Writer::::listens(com.jnape.palatable.lambda.functions.Fn1<? super W, ? extends B>)","57":"Writer::::listens(com.jnape.palatable.lambda.functions.Fn1<? super W, ? extends B>)","62":"Writer::::censor(com.jnape.palatable.lambda.functions.Fn1<? super W, ? extends W>)","63":"Writer::::censor(com.jnape.palatable.lambda.functions.Fn1<? super W, ? extends W>)","64":"Writer::::censor(com.jnape.palatable.lambda.functions.Fn1<? super W, ? extends W>)","65":"Writer::::censor(com.jnape.palatable.lambda.functions.Fn1<? super W, ? extends W>)","70":"Writer::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.functor.builtin.Writer<W, ?>>>)","71":"Writer::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.functor.builtin.Writer<W, ?>>>)","72":"Writer::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.functor.builtin.Writer<W, ?>>>)","73":"Writer::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.functor.builtin.Writer<W, ?>>>)","74":"Writer::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.functor.builtin.Writer<W, ?>>>)","75":"Writer::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.functor.builtin.Writer<W, ?>>>)","76":"Writer::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.functor.builtin.Writer<W, ?>>>)","81":"Writer::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.functor.builtin.Writer<W, ?>>>)","82":"Writer::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.functor.builtin.Writer<W, ?>>>)","83":"Writer::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.functor.builtin.Writer<W, ?>>>)","84":"Writer::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.functor.builtin.Writer<W, ?>>>)","85":"Writer::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.functor.builtin.Writer<W, ?>>>)","90":"Writer::::pure(B)","91":"Writer::::pure(B)","92":"Writer::::pure(B)","93":"Writer::::pure(B)","98":"Writer::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","99":"Writer::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","100":"Writer::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","101":"Writer::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","106":"Writer::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Writer<W, ?>>)","107":"Writer::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Writer<W, ?>>)","108":"Writer::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Writer<W, ?>>)","109":"Writer::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Writer<W, ?>>)","114":"Writer::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Writer<W, ?>>>)","115":"Writer::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Writer<W, ?>>>)","116":"Writer::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Writer<W, ?>>>)","117":"Writer::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Writer<W, ?>>>)","118":"Writer::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Writer<W, ?>>>)","123":"Writer::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Writer<W, ?>>)","124":"Writer::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Writer<W, ?>>)","125":"Writer::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Writer<W, ?>>)","126":"Writer::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Writer<W, ?>>)","131":"Writer::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Writer<W, ?>>)","132":"Writer::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Writer<W, ?>>)","133":"Writer::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Writer<W, ?>>)","134":"Writer::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Writer<W, ?>>)","143":"Writer::::tell(W)","144":"Writer::::tell(W)","145":"Writer::::tell(W)","155":"Writer::::listen(A)","156":"Writer::::listen(A)","157":"Writer::::listen(A)","167":"Writer::::writer(com.jnape.palatable.lambda.adt.hlist.Tuple2<A, W>)","168":"Writer::::writer(com.jnape.palatable.lambda.adt.hlist.Tuple2<A, W>)","169":"Writer::::writer(com.jnape.palatable.lambda.adt.hlist.Tuple2<A, W>)","177":"Writer::::pureWriter()","178":"Writer::::pureWriter()","179":"Writer::::pureWriter()","180":"Writer::::pureWriter()","181":"Writer::::pureWriter()","182":"Writer::::pureWriter()","183":"Writer::::pureWriter()","184":"Writer::::pureWriter()"},"test_reverse_method_lines_dic":{"28":"WriterTest::::testSubject()","29":"WriterTest::::testSubject()","30":"WriterTest::::testSubject()","31":"WriterTest::::testSubject()","32":"WriterTest::::testSubject()","33":"WriterTest::::testSubject()","34":"WriterTest::::testSubject()","36":"WriterTest::::tellListenInteraction()","37":"WriterTest::::tellListenInteraction()","38":"WriterTest::::tellListenInteraction()","39":"WriterTest::::tellListenInteraction()","40":"WriterTest::::tellListenInteraction()","41":"WriterTest::::tellListenInteraction()","42":"WriterTest::::tellListenInteraction()","43":"WriterTest::::tellListenInteraction()"},"tests":[{"test_lines":[28,34],"covered_lines":[36,37,38,144,156,168,178,181]},{"test_lines":[36,43],"covered_lines":[36,37,38,48,83,84,92,100,108,125,133,144,156,168,178,181]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functor/builtin/Const.java":{"class_content":["package com.jnape.palatable.lambda.functor.builtin;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.recursion.RecursiveResult;\n","import com.jnape.palatable.lambda.functions.specialized.Pure;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","import com.jnape.palatable.lambda.functor.Bifunctor;\n","import com.jnape.palatable.lambda.monad.Monad;\n","import com.jnape.palatable.lambda.monad.MonadRec;\n","import com.jnape.palatable.lambda.traversable.Traversable;\n","\n","import java.util.Objects;\n","\n","/**\n"," * A (surprisingly useful) functor over some phantom type <code>B</code>, retaining a value of type <code>A</code> that\n"," * can be retrieved later. This is useful in situations where it is desirable to retain constant information throughout\n"," * arbitrary functor transformations, such that at the end of the chain, regardless of how <code>B</code> has been\n"," * altered, <code>A</code> is still pristine and retrievable.\n"," *\n"," * @param <A> the left parameter type, and the type of the stored value\n"," * @param <B> the right (phantom) parameter type\n"," */\n","public final class Const<A, B> implements\n","        MonadRec<B, Const<A, ?>>,\n","        Bifunctor<A, B, Const<?, ?>>,\n","        Traversable<B, Const<A, ?>> {\n","\n","    private final A a;\n","\n","    public Const(A a) {\n","        this.a = a;\n","    }\n","\n","    /**\n","     * Retrieve the stored value.\n","     *\n","     * @return the value\n","     */\n","    public A runConst() {\n","        return a;\n","    }\n","\n","    /**\n","     * Map over the right parameter. Note that because <code>B</code> is never actually known quantity outside of a type\n","     * signature, this is effectively a no-op that serves only to alter <code>Const's</code> type signature.\n","     *\n","     * @param fn  the mapping function\n","     * @param <C> the new right parameter type\n","     * @return a Const over A (the same value) and C (the new phantom parameter)\n","     */\n","    @Override\n","    public <C> Const<A, C> fmap(Fn1<? super B, ? extends C> fn) {\n","        return MonadRec.super.<C>fmap(fn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    @SuppressWarnings(\"unchecked\")\n","    public <C> Const<A, C> pure(C c) {\n","        return (Const<A, C>) this;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C> Const<A, C> zip(Applicative<Fn1<? super B, ? extends C>, Const<A, ?>> appFn) {\n","        return MonadRec.super.zip(appFn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C> Lazy<Const<A, C>> lazyZip(\n","            Lazy<? extends Applicative<Fn1<? super B, ? extends C>, Const<A, ?>>> lazyAppFn) {\n","        return MonadRec.super.lazyZip(lazyAppFn).fmap(Monad<C, Const<A, ?>>::coerce);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C> Const<A, C> discardL(Applicative<C, Const<A, ?>> appB) {\n","        return MonadRec.super.discardL(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C> Const<A, B> discardR(Applicative<C, Const<A, ?>> appB) {\n","        return MonadRec.super.discardR(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    @SuppressWarnings(\"unchecked\")\n","    public <C> Const<A, C> flatMap(Fn1<? super B, ? extends Monad<C, Const<A, ?>>> f) {\n","        return (Const<A, C>) this;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    @SuppressWarnings(\"unchecked\")\n","    public <C> Const<A, C> trampolineM(Fn1<? super B, ? extends MonadRec<RecursiveResult<B, C>, Const<A, ?>>> fn) {\n","        return (Const<A, C>) this;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C, App extends Applicative<?, App>, TravB extends Traversable<C, Const<A, ?>>,\n","            AppTrav extends Applicative<TravB, App>> AppTrav traverse(Fn1<? super B, ? extends Applicative<C, App>> fn,\n","                                                                      Fn1<? super TravB, ? extends AppTrav> pure) {\n","        return pure.apply(coerce());\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <Z> Const<Z, B> biMapL(Fn1<? super A, ? extends Z> fn) {\n","        return (Const<Z, B>) Bifunctor.super.<Z>biMapL(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C> Const<A, C> biMapR(Fn1<? super B, ? extends C> fn) {\n","        return (Const<A, C>) Bifunctor.super.<C>biMapR(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C, D> Const<C, D> biMap(Fn1<? super A, ? extends C> lFn,\n","                                    Fn1<? super B, ? extends D> rFn) {\n","        return new Const<>(lFn.apply(a));\n","    }\n","\n","    @Override\n","    public boolean equals(Object other) {\n","        return other instanceof Const && Objects.equals(a, ((Const) other).a);\n","    }\n","\n","    @Override\n","    public int hashCode() {\n","        return Objects.hash(a);\n","    }\n","\n","    @Override\n","    public String toString() {\n","        return \"Const{\" +\n","                \"a=\" + a +\n","                '}';\n","    }\n","\n","    /**\n","     * The canonical {@link Pure} instance for {@link Const}.\n","     *\n","     * @param a   the stored value\n","     * @param <A> the left parameter type, and the type of the stored value\n","     * @return the {@link Pure} instance\n","     */\n","    public static <A> Pure<Const<A, ?>> pureConst(A a) {\n","        return new Pure<Const<A, ?>>() {\n","            @Override\n","            public <B> Const<A, B> checkedApply(B b) {\n","                return new Const<>(a);\n","            }\n","        };\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functor.builtin;\n","\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.ApplicativeLaws;\n","import testsupport.traits.BifunctorLaws;\n","import testsupport.traits.FunctorLaws;\n","import testsupport.traits.MonadLaws;\n","import testsupport.traits.MonadRecLaws;\n","import testsupport.traits.TraversableLaws;\n","\n","import static com.jnape.palatable.lambda.functor.builtin.Const.pureConst;\n","import static org.junit.Assert.assertEquals;\n","\n","@RunWith(Traits.class)\n","public class ConstTest {\n","\n","    @TestTraits({\n","            FunctorLaws.class,\n","            ApplicativeLaws.class,\n","            MonadLaws.class,\n","            MonadRecLaws.class,\n","            BifunctorLaws.class,\n","            TraversableLaws.class})\n","    public Const<?, ?> testSubject() {\n","        return new Const<>(1);\n","    }\n","\n","    @Test\n","    public void staticPure() {\n","        Const<Integer, String> constInt = pureConst(1).apply(\"foo\");\n","        assertEquals(new Const<>(1), constInt);\n","    }\n","}"],"method_lines_dic":{"Const::::runConst()":[39,41],"Const::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)":[51,54],"Const::::pure(C)":[59,63],"Const::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.functor.builtin.Const<A, ?>>)":[68,71],"Const::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.functor.builtin.Const<A, ?>>>)":[76,80],"Const::::discardL(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functor.builtin.Const<A, ?>>)":[85,88],"Const::::discardR(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functor.builtin.Const<A, ?>>)":[93,96],"Const::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.Monad<C, com.jnape.palatable.lambda.functor.builtin.Const<A, ?>>>)":[101,105],"Const::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.functor.builtin.Const<A, ?>>>)":[110,114],"Const::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)":[119,124],"Const::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends Z>)":[129,132],"Const::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)":[137,140],"Const::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends D>)":[145,149],"Const::::equals(java.lang.Object)":[151,154],"Const::::hashCode()":[156,159],"Const::::toString()":[161,166],"Const::::pureConst(A)":[175,182]},"test_method_lines_dic":{"ConstTest::::testSubject()":[20,29],"ConstTest::::staticPure()":[31,35]},"reverse_method_lines_dic":{"39":"Const::::runConst()","40":"Const::::runConst()","41":"Const::::runConst()","51":"Const::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","52":"Const::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","53":"Const::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","54":"Const::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","59":"Const::::pure(C)","60":"Const::::pure(C)","61":"Const::::pure(C)","62":"Const::::pure(C)","63":"Const::::pure(C)","68":"Const::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.functor.builtin.Const<A, ?>>)","69":"Const::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.functor.builtin.Const<A, ?>>)","70":"Const::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.functor.builtin.Const<A, ?>>)","71":"Const::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.functor.builtin.Const<A, ?>>)","76":"Const::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.functor.builtin.Const<A, ?>>>)","77":"Const::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.functor.builtin.Const<A, ?>>>)","78":"Const::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.functor.builtin.Const<A, ?>>>)","79":"Const::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.functor.builtin.Const<A, ?>>>)","80":"Const::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.functor.builtin.Const<A, ?>>>)","85":"Const::::discardL(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functor.builtin.Const<A, ?>>)","86":"Const::::discardL(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functor.builtin.Const<A, ?>>)","87":"Const::::discardL(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functor.builtin.Const<A, ?>>)","88":"Const::::discardL(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functor.builtin.Const<A, ?>>)","93":"Const::::discardR(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functor.builtin.Const<A, ?>>)","94":"Const::::discardR(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functor.builtin.Const<A, ?>>)","95":"Const::::discardR(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functor.builtin.Const<A, ?>>)","96":"Const::::discardR(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functor.builtin.Const<A, ?>>)","101":"Const::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.Monad<C, com.jnape.palatable.lambda.functor.builtin.Const<A, ?>>>)","102":"Const::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.Monad<C, com.jnape.palatable.lambda.functor.builtin.Const<A, ?>>>)","103":"Const::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.Monad<C, com.jnape.palatable.lambda.functor.builtin.Const<A, ?>>>)","104":"Const::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.Monad<C, com.jnape.palatable.lambda.functor.builtin.Const<A, ?>>>)","105":"Const::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.Monad<C, com.jnape.palatable.lambda.functor.builtin.Const<A, ?>>>)","110":"Const::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.functor.builtin.Const<A, ?>>>)","111":"Const::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.functor.builtin.Const<A, ?>>>)","112":"Const::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.functor.builtin.Const<A, ?>>>)","113":"Const::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.functor.builtin.Const<A, ?>>>)","114":"Const::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.functor.builtin.Const<A, ?>>>)","119":"Const::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","120":"Const::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","121":"Const::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","122":"Const::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","123":"Const::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","124":"Const::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","129":"Const::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends Z>)","130":"Const::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends Z>)","131":"Const::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends Z>)","132":"Const::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends Z>)","137":"Const::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","138":"Const::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","139":"Const::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","140":"Const::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","145":"Const::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends D>)","146":"Const::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends D>)","147":"Const::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends D>)","148":"Const::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends D>)","149":"Const::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends D>)","151":"Const::::equals(java.lang.Object)","152":"Const::::equals(java.lang.Object)","153":"Const::::equals(java.lang.Object)","154":"Const::::equals(java.lang.Object)","156":"Const::::hashCode()","157":"Const::::hashCode()","158":"Const::::hashCode()","159":"Const::::hashCode()","161":"Const::::toString()","162":"Const::::toString()","163":"Const::::toString()","164":"Const::::toString()","165":"Const::::toString()","166":"Const::::toString()","175":"Const::::pureConst(A)","176":"Const::::pureConst(A)","177":"Const::::pureConst(A)","178":"Const::::pureConst(A)","179":"Const::::pureConst(A)","180":"Const::::pureConst(A)","181":"Const::::pureConst(A)","182":"Const::::pureConst(A)"},"test_reverse_method_lines_dic":{"20":"ConstTest::::testSubject()","21":"ConstTest::::testSubject()","22":"ConstTest::::testSubject()","23":"ConstTest::::testSubject()","24":"ConstTest::::testSubject()","25":"ConstTest::::testSubject()","26":"ConstTest::::testSubject()","27":"ConstTest::::testSubject()","28":"ConstTest::::testSubject()","29":"ConstTest::::testSubject()","31":"ConstTest::::staticPure()","32":"ConstTest::::staticPure()","33":"ConstTest::::staticPure()","34":"ConstTest::::staticPure()","35":"ConstTest::::staticPure()"},"tests":[{"test_lines":[20,29],"covered_lines":[30,31,32]},{"test_lines":[31,35],"covered_lines":[30,31,32,153,176,179]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functor/builtin/Tagged.java":{"class_content":["package com.jnape.palatable.lambda.functor.builtin;\n","\n","import com.jnape.palatable.lambda.adt.choice.Choice2;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.builtin.fn1.Downcast;\n","import com.jnape.palatable.lambda.functions.recursion.RecursiveResult;\n","import com.jnape.palatable.lambda.functions.specialized.Pure;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","import com.jnape.palatable.lambda.functor.Cocartesian;\n","import com.jnape.palatable.lambda.monad.Monad;\n","import com.jnape.palatable.lambda.monad.MonadRec;\n","import com.jnape.palatable.lambda.traversable.Traversable;\n","\n","import java.util.Objects;\n","\n","import static com.jnape.palatable.lambda.adt.choice.Choice2.b;\n","import static com.jnape.palatable.lambda.functions.recursion.Trampoline.trampoline;\n","\n","/**\n"," * Like {@link Const}, but the phantom parameter is in the contravariant position, and the value is in covariant\n"," * position.\n"," *\n"," * @param <S> the phantom type\n"," * @param <B> the value type\n"," */\n","public final class Tagged<S, B> implements\n","        MonadRec<B, Tagged<S, ?>>,\n","        Traversable<B, Tagged<S, ?>>, Cocartesian<S, B, Tagged<?, ?>> {\n","\n","    private final B b;\n","\n","    public Tagged(B b) {\n","        this.b = b;\n","    }\n","\n","    /**\n","     * Extract the contained value.\n","     *\n","     * @return the value\n","     */\n","    public B unTagged() {\n","        return b;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C> Tagged<S, C> flatMap(Fn1<? super B, ? extends Monad<C, Tagged<S, ?>>> f) {\n","        return f.apply(b).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C> Tagged<S, C> trampolineM(Fn1<? super B, ? extends MonadRec<RecursiveResult<B, C>, Tagged<S, ?>>> fn) {\n","        return new Tagged<>(trampoline(b -> fn.apply(b).<Tagged<S, RecursiveResult<B, C>>>coerce().unTagged(),\n","                                       unTagged()));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C> Tagged<S, C> pure(C c) {\n","        return new Tagged<>(c);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C> Tagged<S, C> fmap(Fn1<? super B, ? extends C> fn) {\n","        return MonadRec.super.<C>fmap(fn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C> Tagged<S, C> zip(Applicative<Fn1<? super B, ? extends C>, Tagged<S, ?>> appFn) {\n","        return MonadRec.super.zip(appFn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C> Tagged<S, C> discardL(Applicative<C, Tagged<S, ?>> appB) {\n","        return MonadRec.super.discardL(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C> Tagged<S, B> discardR(Applicative<C, Tagged<S, ?>> appB) {\n","        return MonadRec.super.discardR(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C, App extends Applicative<?, App>, TravC extends Traversable<C, Tagged<S, ?>>,\n","            AppTrav extends Applicative<TravC, App>> AppTrav traverse(Fn1<? super B, ? extends Applicative<C, App>> fn,\n","                                                                      Fn1<? super TravC, ? extends AppTrav> pure) {\n","        return fn.apply(b)\n","                .<TravC>fmap(c -> Downcast.<TravC, Traversable<C, Tagged<S, ?>>>downcast(new Tagged<>(c)))\n","                .coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C> Tagged<Choice2<C, S>, Choice2<C, B>> cocartesian() {\n","        return new Tagged<>(b(b));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <Z, C> Tagged<Z, C> diMap(Fn1<? super Z, ? extends S> lFn, Fn1<? super B, ? extends C> rFn) {\n","        return new Tagged<>(rFn.apply(b));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <Z> Tagged<Z, B> diMapL(Fn1<? super Z, ? extends S> fn) {\n","        return (Tagged<Z, B>) Cocartesian.super.<Z>diMapL(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C> Tagged<S, C> diMapR(Fn1<? super B, ? extends C> fn) {\n","        return (Tagged<S, C>) Cocartesian.super.<C>diMapR(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <Z> Tagged<Z, B> contraMap(Fn1<? super Z, ? extends S> fn) {\n","        return (Tagged<Z, B>) Cocartesian.super.<Z>contraMap(fn);\n","    }\n","\n","    @Override\n","    public boolean equals(Object other) {\n","        return other instanceof Tagged<?, ?> && Objects.equals(b, ((Tagged<?, ?>) other).b);\n","    }\n","\n","    @Override\n","    public int hashCode() {\n","        return Objects.hash(b);\n","    }\n","\n","    @Override\n","    public String toString() {\n","        return \"Tagged{b=\" + b + '}';\n","    }\n","\n","    /**\n","     * The canonical {@link Pure} instance for {@link Tagged}.\n","     *\n","     * @param <S> the phantom type\n","     * @return the {@link Pure} instance\n","     */\n","    public static <S> Pure<Tagged<S, ?>> pureTagged() {\n","        return Tagged::new;\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functor.builtin;\n","\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.ApplicativeLaws;\n","import testsupport.traits.FunctorLaws;\n","import testsupport.traits.MonadLaws;\n","import testsupport.traits.TraversableLaws;\n","\n","import static org.junit.Assert.assertEquals;\n","import testsupport.traits.MonadRecLaws;\n","\n","@RunWith(Traits.class)\n","public class TaggedTest {\n","\n","    @TestTraits({FunctorLaws.class, ApplicativeLaws.class, MonadLaws.class, TraversableLaws.class, MonadRecLaws.class})\n","    public Tagged<String, Integer> testSubject() {\n","        return new Tagged<>(1);\n","    }\n","\n","    @Test\n","    public void staticPure() {\n","        Tagged<String, Integer> tagged = Tagged.<String>pureTagged().apply(1);\n","        assertEquals(new Tagged<>(1), tagged);\n","    }\n","}"],"method_lines_dic":{"Tagged::::unTagged()":[41,43],"Tagged::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.Monad<C, com.jnape.palatable.lambda.functor.builtin.Tagged<S, ?>>>)":[48,51],"Tagged::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.functor.builtin.Tagged<S, ?>>>)":[56,60],"Tagged::::pure(C)":[65,68],"Tagged::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)":[73,76],"Tagged::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.functor.builtin.Tagged<S, ?>>)":[81,84],"Tagged::::discardL(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functor.builtin.Tagged<S, ?>>)":[89,92],"Tagged::::discardR(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functor.builtin.Tagged<S, ?>>)":[97,100],"Tagged::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravC, ? extends AppTrav>)":[105,112],"Tagged::::cocartesian()":[117,120],"Tagged::::diMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends S>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)":[125,128],"Tagged::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends S>)":[133,136],"Tagged::::diMapR(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)":[141,144],"Tagged::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends S>)":[149,152],"Tagged::::equals(java.lang.Object)":[154,157],"Tagged::::hashCode()":[159,162],"Tagged::::toString()":[164,167],"Tagged::::pureTagged()":[175,177]},"test_method_lines_dic":{"TaggedTest::::testSubject()":[18,21],"TaggedTest::::staticPure()":[23,27]},"reverse_method_lines_dic":{"41":"Tagged::::unTagged()","42":"Tagged::::unTagged()","43":"Tagged::::unTagged()","48":"Tagged::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.Monad<C, com.jnape.palatable.lambda.functor.builtin.Tagged<S, ?>>>)","49":"Tagged::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.Monad<C, com.jnape.palatable.lambda.functor.builtin.Tagged<S, ?>>>)","50":"Tagged::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.Monad<C, com.jnape.palatable.lambda.functor.builtin.Tagged<S, ?>>>)","51":"Tagged::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.Monad<C, com.jnape.palatable.lambda.functor.builtin.Tagged<S, ?>>>)","56":"Tagged::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.functor.builtin.Tagged<S, ?>>>)","57":"Tagged::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.functor.builtin.Tagged<S, ?>>>)","58":"Tagged::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.functor.builtin.Tagged<S, ?>>>)","59":"Tagged::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.functor.builtin.Tagged<S, ?>>>)","60":"Tagged::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.functor.builtin.Tagged<S, ?>>>)","65":"Tagged::::pure(C)","66":"Tagged::::pure(C)","67":"Tagged::::pure(C)","68":"Tagged::::pure(C)","73":"Tagged::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","74":"Tagged::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","75":"Tagged::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","76":"Tagged::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","81":"Tagged::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.functor.builtin.Tagged<S, ?>>)","82":"Tagged::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.functor.builtin.Tagged<S, ?>>)","83":"Tagged::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.functor.builtin.Tagged<S, ?>>)","84":"Tagged::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.functor.builtin.Tagged<S, ?>>)","89":"Tagged::::discardL(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functor.builtin.Tagged<S, ?>>)","90":"Tagged::::discardL(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functor.builtin.Tagged<S, ?>>)","91":"Tagged::::discardL(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functor.builtin.Tagged<S, ?>>)","92":"Tagged::::discardL(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functor.builtin.Tagged<S, ?>>)","97":"Tagged::::discardR(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functor.builtin.Tagged<S, ?>>)","98":"Tagged::::discardR(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functor.builtin.Tagged<S, ?>>)","99":"Tagged::::discardR(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functor.builtin.Tagged<S, ?>>)","100":"Tagged::::discardR(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functor.builtin.Tagged<S, ?>>)","105":"Tagged::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravC, ? extends AppTrav>)","106":"Tagged::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravC, ? extends AppTrav>)","107":"Tagged::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravC, ? extends AppTrav>)","108":"Tagged::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravC, ? extends AppTrav>)","109":"Tagged::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravC, ? extends AppTrav>)","110":"Tagged::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravC, ? extends AppTrav>)","111":"Tagged::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravC, ? extends AppTrav>)","112":"Tagged::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravC, ? extends AppTrav>)","117":"Tagged::::cocartesian()","118":"Tagged::::cocartesian()","119":"Tagged::::cocartesian()","120":"Tagged::::cocartesian()","125":"Tagged::::diMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends S>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","126":"Tagged::::diMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends S>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","127":"Tagged::::diMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends S>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","128":"Tagged::::diMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends S>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","133":"Tagged::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends S>)","134":"Tagged::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends S>)","135":"Tagged::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends S>)","136":"Tagged::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends S>)","141":"Tagged::::diMapR(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","142":"Tagged::::diMapR(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","143":"Tagged::::diMapR(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","144":"Tagged::::diMapR(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","149":"Tagged::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends S>)","150":"Tagged::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends S>)","151":"Tagged::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends S>)","152":"Tagged::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends S>)","154":"Tagged::::equals(java.lang.Object)","155":"Tagged::::equals(java.lang.Object)","156":"Tagged::::equals(java.lang.Object)","157":"Tagged::::equals(java.lang.Object)","159":"Tagged::::hashCode()","160":"Tagged::::hashCode()","161":"Tagged::::hashCode()","162":"Tagged::::hashCode()","164":"Tagged::::toString()","165":"Tagged::::toString()","166":"Tagged::::toString()","167":"Tagged::::toString()","175":"Tagged::::pureTagged()","176":"Tagged::::pureTagged()","177":"Tagged::::pureTagged()"},"test_reverse_method_lines_dic":{"18":"TaggedTest::::testSubject()","19":"TaggedTest::::testSubject()","20":"TaggedTest::::testSubject()","21":"TaggedTest::::testSubject()","23":"TaggedTest::::staticPure()","24":"TaggedTest::::staticPure()","25":"TaggedTest::::staticPure()","26":"TaggedTest::::staticPure()","27":"TaggedTest::::staticPure()"},"tests":[{"test_lines":[18,21],"covered_lines":[32,33,34]},{"test_lines":[23,27],"covered_lines":[32,33,34,156,176]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functor/builtin/Identity.java":{"class_content":["package com.jnape.palatable.lambda.functor.builtin;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.recursion.RecursiveResult;\n","import com.jnape.palatable.lambda.functions.specialized.Pure;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","import com.jnape.palatable.lambda.monad.Monad;\n","import com.jnape.palatable.lambda.monad.MonadRec;\n","import com.jnape.palatable.lambda.traversable.Traversable;\n","\n","import java.util.Objects;\n","\n","import static com.jnape.palatable.lambda.functions.recursion.Trampoline.trampoline;\n","\n","/**\n"," * A functor over some value of type <code>A</code> that can be mapped over and retrieved later.\n"," *\n"," * @param <A> the value type\n"," */\n","public final class Identity<A> implements MonadRec<A, Identity<?>>, Traversable<A, Identity<?>> {\n","\n","    private final A a;\n","\n","    public Identity(A a) {\n","        this.a = a;\n","    }\n","\n","    /**\n","     * Retrieve the value.\n","     *\n","     * @return the value\n","     */\n","    public A runIdentity() {\n","        return a;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> Identity<B> flatMap(Fn1<? super A, ? extends Monad<B, Identity<?>>> f) {\n","        return f.apply(runIdentity()).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> Identity<B> fmap(Fn1<? super A, ? extends B> fn) {\n","        return MonadRec.super.<B>fmap(fn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> Identity<B> pure(B b) {\n","        return new Identity<>(b);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> Identity<B> zip(Applicative<Fn1<? super A, ? extends B>, Identity<?>> appFn) {\n","        return new Identity<>(appFn.<Identity<Fn1<? super A, ? extends B>>>coerce().runIdentity().apply(a));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> Lazy<Identity<B>> lazyZip(\n","            Lazy<? extends Applicative<Fn1<? super A, ? extends B>, Identity<?>>> lazyAppFn) {\n","        return MonadRec.super.lazyZip(lazyAppFn).fmap(Monad<B, Identity<?>>::coerce);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> Identity<B> discardL(Applicative<B, Identity<?>> appB) {\n","        return MonadRec.super.discardL(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> Identity<A> discardR(Applicative<B, Identity<?>> appB) {\n","        return MonadRec.super.discardR(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    @SuppressWarnings(\"unchecked\")\n","    public <B, App extends Applicative<?, App>, TravB extends Traversable<B, Identity<?>>,\n","            AppTrav extends Applicative<TravB, App>> AppTrav traverse(Fn1<? super A, ? extends Applicative<B, App>> fn,\n","                                                                      Fn1<? super TravB, ? extends AppTrav> pure) {\n","        return (AppTrav) fn.apply(runIdentity()).fmap(Identity::new);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> Identity<B> trampolineM(Fn1<? super A, ? extends MonadRec<RecursiveResult<A, B>, Identity<?>>> fn) {\n","        return new Identity<>(trampoline(a -> fn.apply(a).<Identity<RecursiveResult<A, B>>>coerce().runIdentity(),\n","                                         runIdentity()));\n","    }\n","\n","    @Override\n","    public boolean equals(Object other) {\n","        return other instanceof Identity && Objects.equals(a, ((Identity) other).a);\n","    }\n","\n","    @Override\n","    public int hashCode() {\n","        return Objects.hash(a);\n","    }\n","\n","    @Override\n","    public String toString() {\n","        return \"Identity{\" +\n","                \"a=\" + a +\n","                '}';\n","    }\n","\n","    /**\n","     * The canonical {@link Pure} instance for {@link Identity}.\n","     *\n","     * @return the {@link Pure} instance\n","     */\n","    public static Pure<Identity<?>> pureIdentity() {\n","        return Identity::new;\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functor.builtin;\n","\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.ApplicativeLaws;\n","import testsupport.traits.FunctorLaws;\n","import testsupport.traits.MonadLaws;\n","import testsupport.traits.MonadRecLaws;\n","import testsupport.traits.TraversableLaws;\n","\n","import static com.jnape.palatable.lambda.functor.builtin.Identity.pureIdentity;\n","import static org.junit.Assert.assertEquals;\n","\n","@RunWith(Traits.class)\n","public class IdentityTest {\n","\n","    @TestTraits({FunctorLaws.class, ApplicativeLaws.class, MonadLaws.class, TraversableLaws.class, MonadRecLaws.class})\n","    public Identity<?> testSubject() {\n","        return new Identity<>(\"\");\n","    }\n","\n","    @Test\n","    public void staticPure() {\n","        Identity<Integer> identity = pureIdentity().apply(1);\n","        assertEquals(new Identity<>(1), identity);\n","    }\n","}"],"method_lines_dic":{"Identity::::runIdentity()":[33,35],"Identity::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.functor.builtin.Identity<?>>>)":[40,43],"Identity::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)":[48,51],"Identity::::pure(B)":[56,59],"Identity::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Identity<?>>)":[64,67],"Identity::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Identity<?>>>)":[72,76],"Identity::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Identity<?>>)":[81,84],"Identity::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Identity<?>>)":[89,92],"Identity::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)":[97,103],"Identity::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.functor.builtin.Identity<?>>>)":[108,112],"Identity::::equals(java.lang.Object)":[114,117],"Identity::::hashCode()":[119,122],"Identity::::toString()":[124,129],"Identity::::pureIdentity()":[136,138]},"test_method_lines_dic":{"IdentityTest::::testSubject()":[19,22],"IdentityTest::::staticPure()":[24,28]},"reverse_method_lines_dic":{"33":"Identity::::runIdentity()","34":"Identity::::runIdentity()","35":"Identity::::runIdentity()","40":"Identity::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.functor.builtin.Identity<?>>>)","41":"Identity::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.functor.builtin.Identity<?>>>)","42":"Identity::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.functor.builtin.Identity<?>>>)","43":"Identity::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.functor.builtin.Identity<?>>>)","48":"Identity::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","49":"Identity::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","50":"Identity::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","51":"Identity::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","56":"Identity::::pure(B)","57":"Identity::::pure(B)","58":"Identity::::pure(B)","59":"Identity::::pure(B)","64":"Identity::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Identity<?>>)","65":"Identity::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Identity<?>>)","66":"Identity::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Identity<?>>)","67":"Identity::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Identity<?>>)","72":"Identity::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Identity<?>>>)","73":"Identity::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Identity<?>>>)","74":"Identity::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Identity<?>>>)","75":"Identity::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Identity<?>>>)","76":"Identity::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functor.builtin.Identity<?>>>)","81":"Identity::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Identity<?>>)","82":"Identity::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Identity<?>>)","83":"Identity::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Identity<?>>)","84":"Identity::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Identity<?>>)","89":"Identity::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Identity<?>>)","90":"Identity::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Identity<?>>)","91":"Identity::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Identity<?>>)","92":"Identity::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functor.builtin.Identity<?>>)","97":"Identity::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","98":"Identity::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","99":"Identity::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","100":"Identity::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","101":"Identity::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","102":"Identity::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","103":"Identity::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","108":"Identity::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.functor.builtin.Identity<?>>>)","109":"Identity::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.functor.builtin.Identity<?>>>)","110":"Identity::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.functor.builtin.Identity<?>>>)","111":"Identity::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.functor.builtin.Identity<?>>>)","112":"Identity::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.functor.builtin.Identity<?>>>)","114":"Identity::::equals(java.lang.Object)","115":"Identity::::equals(java.lang.Object)","116":"Identity::::equals(java.lang.Object)","117":"Identity::::equals(java.lang.Object)","119":"Identity::::hashCode()","120":"Identity::::hashCode()","121":"Identity::::hashCode()","122":"Identity::::hashCode()","124":"Identity::::toString()","125":"Identity::::toString()","126":"Identity::::toString()","127":"Identity::::toString()","128":"Identity::::toString()","129":"Identity::::toString()","136":"Identity::::pureIdentity()","137":"Identity::::pureIdentity()","138":"Identity::::pureIdentity()"},"test_reverse_method_lines_dic":{"19":"IdentityTest::::testSubject()","20":"IdentityTest::::testSubject()","21":"IdentityTest::::testSubject()","22":"IdentityTest::::testSubject()","24":"IdentityTest::::staticPure()","25":"IdentityTest::::staticPure()","26":"IdentityTest::::staticPure()","27":"IdentityTest::::staticPure()","28":"IdentityTest::::staticPure()"},"tests":[{"test_lines":[19,22],"covered_lines":[24,25,26]},{"test_lines":[24,28],"covered_lines":[24,25,26,116,137]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/adt/These.java":{"class_content":["package com.jnape.palatable.lambda.adt;\n","\n","import com.jnape.palatable.lambda.adt.coproduct.CoProduct2;\n","import com.jnape.palatable.lambda.adt.coproduct.CoProduct3;\n","import com.jnape.palatable.lambda.adt.hlist.Tuple2;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.recursion.RecursiveResult;\n","import com.jnape.palatable.lambda.functions.recursion.Trampoline;\n","import com.jnape.palatable.lambda.functions.specialized.Pure;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","import com.jnape.palatable.lambda.functor.Bifunctor;\n","import com.jnape.palatable.lambda.functor.builtin.Lazy;\n","import com.jnape.palatable.lambda.monad.Monad;\n","import com.jnape.palatable.lambda.monad.MonadRec;\n","import com.jnape.palatable.lambda.traversable.Traversable;\n","\n","import java.util.Objects;\n","\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Into.into;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Sequence.sequence;\n","import static com.jnape.palatable.lambda.functor.builtin.Lazy.lazy;\n","\n","/**\n"," * The coproduct of a coproduct (<code>{@link CoProduct2}&lt;A, B&gt;</code>) and its product (<code>{@link\n"," * Tuple2}&lt;A, B&gt;</code>), represented as a <code>{@link CoProduct3}&lt;A, B, {@link Tuple2}&lt;A,\n"," * B&gt;&gt;</code>.\n"," *\n"," * @param <A> the first possible type\n"," * @param <B> the second possible type\n"," */\n","public abstract class These<A, B> implements\n","        CoProduct3<A, B, Tuple2<A, B>, These<A, B>>,\n","        MonadRec<B, These<A, ?>>,\n","        Bifunctor<A, B, These<?, ?>>,\n","        Traversable<B, These<A, ?>> {\n","\n","    private These() {\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final <C, D> These<C, D> biMap(Fn1<? super A, ? extends C> lFn,\n","                                          Fn1<? super B, ? extends D> rFn) {\n","        return match(a -> a(lFn.apply(a)), b -> b(rFn.apply(b)), into((a, b) -> both(lFn.apply(a), rFn.apply(b))));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final <C> These<A, C> flatMap(Fn1<? super B, ? extends Monad<C, These<A, ?>>> f) {\n","        return match(These::a,\n","                     b -> f.apply(b).coerce(),\n","                     into((a, b) -> f.apply(b)\n","                             .<These<A, C>>coerce()\n","                             .match(constantly(a(a)),\n","                                    c -> both(a, c),\n","                                    into((__, c) -> both(a, c)))));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C> These<A, C> trampolineM(\n","            Fn1<? super B, ? extends MonadRec<RecursiveResult<B, C>, These<A, ?>>> fn) {\n","        return flatMap(Trampoline.<B, These<A, C>>trampoline(\n","                b -> sequence(fn.apply(b).<These<A, RecursiveResult<B, C>>>coerce(),\n","                              RecursiveResult::terminate)));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final <C> These<A, C> pure(C c) {\n","        return match(a -> both(a, c), b -> b(c), into((a, b) -> both(a, c)));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C, App extends Applicative<?, App>, TravC extends Traversable<C, These<A, ?>>,\n","            AppTrav extends Applicative<TravC, App>>\n","    AppTrav traverse(Fn1<? super B, ? extends Applicative<C, App>> fn, Fn1<? super TravC, ? extends AppTrav> pure) {\n","        return match(a -> pure.apply(These.<A, C>a(a).<TravC>coerce()),\n","                     b -> fn.apply(b).fmap(this::pure).<TravC>fmap(Applicative::coerce).coerce(),\n","                     into((a, b) -> fn.apply(b).fmap(c -> both(a, c)).<TravC>fmap(Applicative::coerce).coerce()));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final <Z> These<Z, B> biMapL(Fn1<? super A, ? extends Z> fn) {\n","        return (These<Z, B>) Bifunctor.super.<Z>biMapL(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final <C> These<A, C> biMapR(Fn1<? super B, ? extends C> fn) {\n","        return (These<A, C>) Bifunctor.super.<C>biMapR(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final <C> These<A, C> fmap(Fn1<? super B, ? extends C> fn) {\n","        return MonadRec.super.<C>fmap(fn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final <C> These<A, C> zip(Applicative<Fn1<? super B, ? extends C>, These<A, ?>> appFn) {\n","        return MonadRec.super.zip(appFn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C> Lazy<These<A, C>> lazyZip(\n","            Lazy<? extends Applicative<Fn1<? super B, ? extends C>, These<A, ?>>> lazyAppFn) {\n","        return projectA().<Lazy<These<A, C>>>fmap(a -> lazy(a(a)))\n","                .orElseGet(() -> MonadRec.super.lazyZip(lazyAppFn).fmap(Monad<C, These<A, ?>>::coerce));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final <C> These<A, C> discardL(Applicative<C, These<A, ?>> appB) {\n","        return MonadRec.super.discardL(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final <C> These<A, B> discardR(Applicative<C, These<A, ?>> appB) {\n","        return MonadRec.super.discardR(appB).coerce();\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a value of type <code>A</code> in a {@link These}.\n","     *\n","     * @param a   the value\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @return the wrapped value as a <code>{@link These}&lt;A,B&gt;</code>\n","     */\n","    public static <A, B> These<A, B> a(A a) {\n","        return new _A<>(a);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a value of type <code>B</code> in a {@link These}.\n","     *\n","     * @param b   the value\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @return the wrapped value as a <code>{@link These}&lt;A,B&gt;</code>\n","     */\n","    public static <A, B> These<A, B> b(B b) {\n","        return new _B<>(b);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a value of type <code>A</code> and a value of type <code>B</code> in a {@link\n","     * These}.\n","     *\n","     * @param a   the first value\n","     * @param b   the second value\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @return the wrapped values as a <code>{@link These}&lt;A,B&gt;</code>\n","     */\n","    public static <A, B> These<A, B> both(A a, B b) {\n","        return new Both<>(tuple(a, b));\n","    }\n","\n","    /**\n","     * Convenience method for converting a pair of {@link Maybe}s into a {@link Maybe} of {@link These}. If both\n","     * {@link Maybe}s are {@link Maybe#just} then the result is a {@link Maybe#just} {@link These#both}. If only one\n","     * {@link Maybe} is {@link Maybe#just} then it will be {@link Maybe#just} {@link These#a} or\n","     * {@link Maybe#just} {@link These#b}. If both  {@link Maybe}s are {@link Maybe#nothing} then the result will be\n","     * {@link Maybe#nothing}.\n","     *\n","     * @param maybeA   the first optional value\n","     * @param maybeB   the second optional value\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @return the wrapped values as a <code>{@link Maybe}&lt;{@link These}&lt;A,B&gt;&gt;</code>\n","     */\n","    public static <A, B> Maybe<These<A, B>> fromMaybes(Maybe<A> maybeA, Maybe<B> maybeB) {\n","        return maybeA.fmap(a -> maybeB.fmap(b -> both(a, b)).orElse(a(a)))\n","                .fmap(Maybe::just)\n","                .orElse(maybeB.fmap(These::b));\n","    }\n","\n","    /**\n","     * The canonical {@link Pure} instance for {@link These}.\n","     *\n","     * @param <A> the first possible type\n","     * @return the {@link Pure} instance\n","     */\n","    public static <A> Pure<These<A, ?>> pureThese() {\n","        return These::b;\n","    }\n","\n","    private static final class _A<A, B> extends These<A, B> {\n","\n","        private final A a;\n","\n","        private _A(A a) {\n","            this.a = a;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                           Fn1<? super Tuple2<A, B>, ? extends R> cFn) {\n","            return aFn.apply(a);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof These._A && Objects.equals(a, ((_A) other).a);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(a);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"These{a=\" + a + '}';\n","        }\n","    }\n","\n","    private static final class _B<A, B> extends These<A, B> {\n","        private final B b;\n","\n","        private _B(B b) {\n","            this.b = b;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                           Fn1<? super Tuple2<A, B>, ? extends R> cFn) {\n","            return bFn.apply(b);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof These._B && Objects.equals(b, ((_B) other).b);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(b);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"These{b=\" + b + '}';\n","        }\n","    }\n","\n","    private static final class Both<A, B> extends These<A, B> {\n","        private final Tuple2<A, B> both;\n","\n","        private Both(Tuple2<A, B> tuple) {\n","            this.both = tuple;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                           Fn1<? super Tuple2<A, B>, ? extends R> cFn) {\n","            return cFn.apply(both);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof Both && Objects.equals(both, ((Both) other).both);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(both);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"These{both=\" + both + '}';\n","        }\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.adt;\n","\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.framework.Subjects;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.ApplicativeLaws;\n","import testsupport.traits.BifunctorLaws;\n","import testsupport.traits.FunctorLaws;\n","import testsupport.traits.MonadLaws;\n","import testsupport.traits.MonadRecLaws;\n","import testsupport.traits.TraversableLaws;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","import static com.jnape.palatable.lambda.adt.These.a;\n","import static com.jnape.palatable.lambda.adt.These.b;\n","import static com.jnape.palatable.lambda.adt.These.both;\n","import static com.jnape.palatable.lambda.adt.These.fromMaybes;\n","import static com.jnape.palatable.lambda.functor.builtin.Lazy.lazy;\n","import static com.jnape.palatable.traitor.framework.Subjects.subjects;\n","import static org.junit.Assert.assertEquals;\n","\n","@RunWith(Traits.class)\n","public class TheseTest {\n","\n","    @TestTraits({FunctorLaws.class,\n","                 ApplicativeLaws.class,\n","                 MonadLaws.class,\n","                 MonadRecLaws.class,\n","                 TraversableLaws.class,\n","                 BifunctorLaws.class})\n","    public Subjects<These<String, Integer>> testSubject() {\n","        return subjects(a(\"foo\"), b(1), both(\"foo\", 1));\n","    }\n","\n","    @Test\n","    public void lazyZip() {\n","        assertEquals(b(2), b(1).lazyZip(lazy(b(x -> x + 1))).value());\n","        assertEquals(both(\"foo\", 2), b(1).lazyZip(lazy(both(\"foo\", x -> x + 1))).value());\n","        assertEquals(both(\"foo\", 2), both(\"foo\", 1).lazyZip(lazy(both(\"bar\", x -> x + 1))).value());\n","        assertEquals(both(\"foo\", 2), both(\"foo\", 1).lazyZip(lazy(b(x -> x + 1))).value());\n","        assertEquals(a(1), a(1).lazyZip(lazy(() -> {\n","            throw new AssertionError();\n","        })).value());\n","    }\n","\n","    @Test\n","    public void staticPure() {\n","        These<String, Integer> these = These.<String>pureThese().apply(1);\n","        assertEquals(b(1), these);\n","    }\n","\n","    @Test\n","    public void fromMaybesPermutations() {\n","        assertEquals(nothing(), fromMaybes(nothing(), nothing()));\n","        assertEquals(just(These.a(1)), fromMaybes(just(1), nothing()));\n","        assertEquals(just(These.b(1)), fromMaybes(nothing(), just(1)));\n","        assertEquals(just(These.both(1, \"hello\")), fromMaybes(just(1), just(\"hello\")));\n","    }\n","}"],"method_lines_dic":{"These::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends D>)":[45,49],"These::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.Monad<C, com.jnape.palatable.lambda.adt.These<A, ?>>>)":[54,63],"These::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.adt.These<A, ?>>>)":[68,74],"These::::pure(C)":[79,82],"These::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravC, ? extends AppTrav>)":[87,94],"These::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends Z>)":[99,102],"These::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)":[107,110],"These::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)":[115,118],"These::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.adt.These<A, ?>>)":[123,126],"These::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.adt.These<A, ?>>>)":[131,136],"These::::discardL(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.adt.These<A, ?>>)":[141,144],"These::::discardR(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.adt.These<A, ?>>)":[149,152],"These::::a(A)":[162,164],"These::::b(B)":[174,176],"These::::both(A,B)":[188,190],"These::::fromMaybes(com.jnape.palatable.lambda.adt.Maybe<A>,com.jnape.palatable.lambda.adt.Maybe<B>)":[205,209],"These::::pureThese()":[217,219],"These._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.hlist.Tuple2<A, B>, ? extends R>)":[229,233],"These._A::::equals(java.lang.Object)":[235,238],"These._A::::hashCode()":[240,243],"These._A::::toString()":[245,248],"These._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.hlist.Tuple2<A, B>, ? extends R>)":[258,262],"These._B::::equals(java.lang.Object)":[264,267],"These._B::::hashCode()":[269,272],"These._B::::toString()":[274,277],"These.Both::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.hlist.Tuple2<A, B>, ? extends R>)":[287,291],"These.Both::::equals(java.lang.Object)":[293,296],"These.Both::::hashCode()":[298,301],"These.Both::::toString()":[303,306]},"test_method_lines_dic":{"TheseTest::::testSubject()":[28,36],"TheseTest::::lazyZip()":[38,47],"TheseTest::::staticPure()":[49,53],"TheseTest::::fromMaybesPermutations()":[55,61]},"reverse_method_lines_dic":{"45":"These::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends D>)","46":"These::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends D>)","47":"These::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends D>)","48":"These::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends D>)","49":"These::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends D>)","54":"These::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.Monad<C, com.jnape.palatable.lambda.adt.These<A, ?>>>)","55":"These::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.Monad<C, com.jnape.palatable.lambda.adt.These<A, ?>>>)","56":"These::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.Monad<C, com.jnape.palatable.lambda.adt.These<A, ?>>>)","57":"These::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.Monad<C, com.jnape.palatable.lambda.adt.These<A, ?>>>)","58":"These::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.Monad<C, com.jnape.palatable.lambda.adt.These<A, ?>>>)","59":"These::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.Monad<C, com.jnape.palatable.lambda.adt.These<A, ?>>>)","60":"These::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.Monad<C, com.jnape.palatable.lambda.adt.These<A, ?>>>)","61":"These::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.Monad<C, com.jnape.palatable.lambda.adt.These<A, ?>>>)","62":"These::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.Monad<C, com.jnape.palatable.lambda.adt.These<A, ?>>>)","63":"These::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.Monad<C, com.jnape.palatable.lambda.adt.These<A, ?>>>)","68":"These::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.adt.These<A, ?>>>)","69":"These::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.adt.These<A, ?>>>)","70":"These::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.adt.These<A, ?>>>)","71":"These::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.adt.These<A, ?>>>)","72":"These::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.adt.These<A, ?>>>)","73":"These::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.adt.These<A, ?>>>)","74":"These::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.adt.These<A, ?>>>)","79":"These::::pure(C)","80":"These::::pure(C)","81":"These::::pure(C)","82":"These::::pure(C)","87":"These::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravC, ? extends AppTrav>)","88":"These::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravC, ? extends AppTrav>)","89":"These::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravC, ? extends AppTrav>)","90":"These::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravC, ? extends AppTrav>)","91":"These::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravC, ? extends AppTrav>)","92":"These::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravC, ? extends AppTrav>)","93":"These::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravC, ? extends AppTrav>)","94":"These::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravC, ? extends AppTrav>)","99":"These::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends Z>)","100":"These::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends Z>)","101":"These::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends Z>)","102":"These::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends Z>)","107":"These::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","108":"These::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","109":"These::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","110":"These::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","115":"These::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","116":"These::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","117":"These::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","118":"These::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","123":"These::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.adt.These<A, ?>>)","124":"These::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.adt.These<A, ?>>)","125":"These::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.adt.These<A, ?>>)","126":"These::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.adt.These<A, ?>>)","131":"These::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.adt.These<A, ?>>>)","132":"These::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.adt.These<A, ?>>>)","133":"These::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.adt.These<A, ?>>>)","134":"These::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.adt.These<A, ?>>>)","135":"These::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.adt.These<A, ?>>>)","136":"These::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.adt.These<A, ?>>>)","141":"These::::discardL(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.adt.These<A, ?>>)","142":"These::::discardL(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.adt.These<A, ?>>)","143":"These::::discardL(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.adt.These<A, ?>>)","144":"These::::discardL(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.adt.These<A, ?>>)","149":"These::::discardR(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.adt.These<A, ?>>)","150":"These::::discardR(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.adt.These<A, ?>>)","151":"These::::discardR(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.adt.These<A, ?>>)","152":"These::::discardR(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.adt.These<A, ?>>)","162":"These::::a(A)","163":"These::::a(A)","164":"These::::a(A)","174":"These::::b(B)","175":"These::::b(B)","176":"These::::b(B)","188":"These::::both(A,B)","189":"These::::both(A,B)","190":"These::::both(A,B)","205":"These::::fromMaybes(com.jnape.palatable.lambda.adt.Maybe<A>,com.jnape.palatable.lambda.adt.Maybe<B>)","206":"These::::fromMaybes(com.jnape.palatable.lambda.adt.Maybe<A>,com.jnape.palatable.lambda.adt.Maybe<B>)","207":"These::::fromMaybes(com.jnape.palatable.lambda.adt.Maybe<A>,com.jnape.palatable.lambda.adt.Maybe<B>)","208":"These::::fromMaybes(com.jnape.palatable.lambda.adt.Maybe<A>,com.jnape.palatable.lambda.adt.Maybe<B>)","209":"These::::fromMaybes(com.jnape.palatable.lambda.adt.Maybe<A>,com.jnape.palatable.lambda.adt.Maybe<B>)","217":"These::::pureThese()","218":"These::::pureThese()","219":"These::::pureThese()","229":"These._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.hlist.Tuple2<A, B>, ? extends R>)","230":"These._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.hlist.Tuple2<A, B>, ? extends R>)","231":"These._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.hlist.Tuple2<A, B>, ? extends R>)","232":"These._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.hlist.Tuple2<A, B>, ? extends R>)","233":"These._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.hlist.Tuple2<A, B>, ? extends R>)","235":"These._A::::equals(java.lang.Object)","236":"These._A::::equals(java.lang.Object)","237":"These._A::::equals(java.lang.Object)","238":"These._A::::equals(java.lang.Object)","240":"These._A::::hashCode()","241":"These._A::::hashCode()","242":"These._A::::hashCode()","243":"These._A::::hashCode()","245":"These._A::::toString()","246":"These._A::::toString()","247":"These._A::::toString()","248":"These._A::::toString()","258":"These._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.hlist.Tuple2<A, B>, ? extends R>)","259":"These._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.hlist.Tuple2<A, B>, ? extends R>)","260":"These._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.hlist.Tuple2<A, B>, ? extends R>)","261":"These._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.hlist.Tuple2<A, B>, ? extends R>)","262":"These._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.hlist.Tuple2<A, B>, ? extends R>)","264":"These._B::::equals(java.lang.Object)","265":"These._B::::equals(java.lang.Object)","266":"These._B::::equals(java.lang.Object)","267":"These._B::::equals(java.lang.Object)","269":"These._B::::hashCode()","270":"These._B::::hashCode()","271":"These._B::::hashCode()","272":"These._B::::hashCode()","274":"These._B::::toString()","275":"These._B::::toString()","276":"These._B::::toString()","277":"These._B::::toString()","287":"These.Both::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.hlist.Tuple2<A, B>, ? extends R>)","288":"These.Both::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.hlist.Tuple2<A, B>, ? extends R>)","289":"These.Both::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.hlist.Tuple2<A, B>, ? extends R>)","290":"These.Both::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.hlist.Tuple2<A, B>, ? extends R>)","291":"These.Both::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.hlist.Tuple2<A, B>, ? extends R>)","293":"These.Both::::equals(java.lang.Object)","294":"These.Both::::equals(java.lang.Object)","295":"These.Both::::equals(java.lang.Object)","296":"These.Both::::equals(java.lang.Object)","298":"These.Both::::hashCode()","299":"These.Both::::hashCode()","300":"These.Both::::hashCode()","301":"These.Both::::hashCode()","303":"These.Both::::toString()","304":"These.Both::::toString()","305":"These.Both::::toString()","306":"These.Both::::toString()"},"test_reverse_method_lines_dic":{"28":"TheseTest::::testSubject()","29":"TheseTest::::testSubject()","30":"TheseTest::::testSubject()","31":"TheseTest::::testSubject()","32":"TheseTest::::testSubject()","33":"TheseTest::::testSubject()","34":"TheseTest::::testSubject()","35":"TheseTest::::testSubject()","36":"TheseTest::::testSubject()","38":"TheseTest::::lazyZip()","39":"TheseTest::::lazyZip()","40":"TheseTest::::lazyZip()","41":"TheseTest::::lazyZip()","42":"TheseTest::::lazyZip()","43":"TheseTest::::lazyZip()","44":"TheseTest::::lazyZip()","45":"TheseTest::::lazyZip()","46":"TheseTest::::lazyZip()","47":"TheseTest::::lazyZip()","49":"TheseTest::::staticPure()","50":"TheseTest::::staticPure()","51":"TheseTest::::staticPure()","52":"TheseTest::::staticPure()","53":"TheseTest::::staticPure()","55":"TheseTest::::fromMaybesPermutations()","56":"TheseTest::::fromMaybesPermutations()","57":"TheseTest::::fromMaybesPermutations()","58":"TheseTest::::fromMaybesPermutations()","59":"TheseTest::::fromMaybesPermutations()","60":"TheseTest::::fromMaybesPermutations()","61":"TheseTest::::fromMaybesPermutations()"},"tests":[{"test_lines":[28,36],"covered_lines":[39,40,163,175,189,225,226,227,254,255,256,283,284,285]},{"test_lines":[38,47],"covered_lines":[39,40,56,57,58,59,60,61,62,81,117,125,134,135,163,175,189,225,226,227,232,237,254,255,256,261,266,283,284,285,290,295]},{"test_lines":[49,53],"covered_lines":[39,40,163,175,189,218,225,226,227,254,255,256,266,283,284,285]},{"test_lines":[55,61],"covered_lines":[39,40,163,175,189,206,207,208,225,226,227,237,254,255,256,266,283,284,285,295]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/adt/Either.java":{"class_content":["package com.jnape.palatable.lambda.adt;\n","\n","import com.jnape.palatable.lambda.adt.choice.Choice3;\n","import com.jnape.palatable.lambda.adt.coproduct.CoProduct2;\n","import com.jnape.palatable.lambda.functions.Fn0;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","import com.jnape.palatable.lambda.functions.recursion.RecursiveResult;\n","import com.jnape.palatable.lambda.functions.specialized.Pure;\n","import com.jnape.palatable.lambda.functions.specialized.SideEffect;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","import com.jnape.palatable.lambda.functor.Bifunctor;\n","import com.jnape.palatable.lambda.functor.Functor;\n","import com.jnape.palatable.lambda.functor.builtin.Lazy;\n","import com.jnape.palatable.lambda.io.IO;\n","import com.jnape.palatable.lambda.monad.Monad;\n","import com.jnape.palatable.lambda.monad.MonadError;\n","import com.jnape.palatable.lambda.monad.MonadRec;\n","import com.jnape.palatable.lambda.traversable.Traversable;\n","\n","import java.util.Objects;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Id.id;\n","import static com.jnape.palatable.lambda.functions.builtin.fn3.FoldLeft.foldLeft;\n","import static com.jnape.palatable.lambda.functions.recursion.RecursiveResult.terminate;\n","import static com.jnape.palatable.lambda.functions.recursion.Trampoline.trampoline;\n","import static com.jnape.palatable.lambda.functor.builtin.Lazy.lazy;\n","import static com.jnape.palatable.lambda.io.IO.io;\n","import static java.util.Arrays.asList;\n","\n","/**\n"," * The binary tagged union, implemented as a specialized {@link CoProduct2}. General semantics tend to connote \"success\"\n"," * values via the right value and \"failure\" values via the left values. {@link Either}s are both {@link Monad}s and\n"," * {@link Traversable}s over their right value and are {@link Bifunctor}s over both values.\n"," *\n"," * @param <L> The left parameter type\n"," * @param <R> The right parameter type\n"," */\n","public abstract class Either<L, R> implements\n","        CoProduct2<L, R, Either<L, R>>,\n","        MonadError<L, R, Either<L, ?>>,\n","        MonadRec<R, Either<L, ?>>,\n","        Traversable<R, Either<L, ?>>,\n","        Bifunctor<L, R, Either<?, ?>> {\n","\n","    private Either() {\n","    }\n","\n","    /**\n","     * Return the value wrapped by this <code>Either</code> if it's a right value; otherwise, return defaultValue.\n","     *\n","     * @param defaultValue the value to return if this is a left\n","     * @return the value wrapped by this Either if right; otherwise, defaultValue\n","     */\n","    public final R or(R defaultValue) {\n","        return recover(l -> defaultValue);\n","    }\n","\n","    /**\n","     * \"Recover\" from a left value by applying a recoveryFn to the wrapped value and returning it in the case of a left\n","     * value; otherwise, return the wrapped right value.\n","     *\n","     * @param recoveryFn a function from L to R\n","     * @return either the wrapped value (if right) or the result of the left value applied to recoveryFn\n","     */\n","    public final R recover(Fn1<? super L, ? extends R> recoveryFn) {\n","        return match(recoveryFn, id());\n","    }\n","\n","    /**\n","     * Inverse of recover. If this is a right value, apply the wrapped value to <code>forfeitFn</code> and return it;\n","     * otherwise, return the wrapped left value.\n","     *\n","     * @param forfeitFn a function from R to L\n","     * @return either the wrapped value (if left) or the result of the right value applied to forfeitFn\n","     */\n","    public final L forfeit(Fn1<? super R, ? extends L> forfeitFn) {\n","        return match(id(), forfeitFn);\n","    }\n","\n","    /**\n","     * Return the wrapped value if this is a right; otherwise, map the wrapped left value to a <code>T</code> and throw\n","     * it.\n","     *\n","     * @param <T>         the left parameter type (the throwable type)\n","     * @param throwableFn a function from L to T\n","     * @return the wrapped value if this is a right\n","     * @throws T the result of applying the wrapped left value to throwableFn, if this is a left\n","     */\n","    public final <T extends Throwable> R orThrow(Fn1<? super L, ? extends T> throwableFn) throws T {\n","        return match(l -> {\n","            throw throwableFn.apply(l);\n","        }, id());\n","    }\n","\n","    /**\n","     * If this is a right value, apply <code>pred</code> to it. If the result is <code>true</code>, return the same\n","     * value; otherwise, return the result of <code>leftSupplier</code> wrapped as a left value.\n","     * <p>\n","     * If this is a left value, return it.\n","     *\n","     * @param pred    the predicate to apply to a right value\n","     * @param leftFn0 the supplier of a left value if pred fails\n","     * @return this if a left value or a right value that pred matches; otherwise, the result of leftSupplier wrapped in\n","     * a left\n","     */\n","    public final Either<L, R> filter(Fn1<? super R, ? extends Boolean> pred, Fn0<L> leftFn0) {\n","        return filter(pred, __ -> leftFn0.apply());\n","    }\n","\n","    /**\n","     * If this is a right value, apply <code>pred</code> to it. If the result is <code>true</code>, return the same\n","     * value; otherwise, return the results of applying the right value to <code>leftFn</code> wrapped as a left value.\n","     *\n","     * @param pred   the predicate to apply to a right value\n","     * @param leftFn the function from the right value to a left value if pred fails\n","     * @return this is a left value or a right value that pred matches; otherwise, the result of leftFn applied to the\n","     * right value, wrapped in a left\n","     */\n","    public final Either<L, R> filter(Fn1<? super R, ? extends Boolean> pred,\n","                                     Fn1<? super R, ? extends L> leftFn) {\n","        return flatMap(r -> pred.apply(r) ? right(r) : left(leftFn.apply(r)));\n","    }\n","\n","    /**\n","     * If a right value, unwrap it and apply it to <code>rightFn</code>, returning the resulting\n","     * <code>Either&lt;L ,R&gt;</code>. Otherwise, return the left value.\n","     * <p>\n","     * Note that because this monadic form of <code>flatMap</code> only supports mapping over a theoretical right value,\n","     * the resulting <code>Either</code> must be invariant on the same left value to flatten properly.\n","     *\n","     * @param rightFn the function to apply to a right value\n","     * @param <R2>    the new right parameter type\n","     * @return the Either resulting from applying rightFn to this right value, or this left value if left\n","     */\n","    @Override\n","    @SuppressWarnings(\"RedundantTypeArguments\")\n","    public <R2> Either<L, R2> flatMap(Fn1<? super R, ? extends Monad<R2, Either<L, ?>>> rightFn) {\n","        return match(Either::left, rightFn.fmap(Monad<R2, Either<L, ?>>::coerce));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> Either<L, B> trampolineM(Fn1<? super R, ? extends MonadRec<RecursiveResult<R, B>, Either<L, ?>>> fn) {\n","        return match(Either::left, trampoline(a -> fn.apply(a).<Either<L, RecursiveResult<R, B>>>coerce()\n","                .match(l -> terminate(left(l)),\n","                       aOrB -> aOrB.fmap(Either::right))));\n","    }\n","\n","    @Override\n","    public final Either<R, L> invert() {\n","        return match(Either::right, Either::left);\n","    }\n","\n","    /**\n","     * Given two binary operators over L and R, merge multiple <code>Either&lt;L, R&gt;</code>s into a single\n","     * <code>Either&lt;L, R&gt;</code>. Note that <code>merge</code> biases towards left values; that is, if any left\n","     * value exists, the result will be a left value, such that only unanimous right values result in an ultimate right\n","     * value.\n","     *\n","     * @param leftFn  the binary operator for L\n","     * @param rightFn the binary operator for R\n","     * @param others  the other Eithers to merge into this one\n","     * @return the merged Either\n","     */\n","    @SafeVarargs\n","    @SuppressWarnings(\"varargs\")\n","    public final Either<L, R> merge(Fn2<? super L, ? super L, ? extends L> leftFn,\n","                                    Fn2<? super R, ? super R, ? extends R> rightFn,\n","                                    Either<L, R>... others) {\n","        return foldLeft((x, y) -> x.match(l1 -> y.match(l2 -> left(leftFn.apply(l1, l2)), r -> left(l1)),\n","                                          r1 -> y.match(Either::left, r2 -> right(rightFn.apply(r1, r2)))),\n","                        this,\n","                        asList(others));\n","    }\n","\n","    /**\n","     * Perform side-effects against a wrapped right value, returning back the <code>Either</code> unaltered.\n","     *\n","     * @param effect the effecting consumer\n","     * @return the Either, unaltered\n","     * @deprecated in favor of {@link Either#match(Fn1, Fn1) matching} into an {@link IO} and explicitly running it\n","     */\n","    @Deprecated\n","    public Either<L, R> peek(Fn1<? super R, ? extends IO<?>> effect) {\n","        return match(l -> io(Either.<L, R>left(l)),\n","                     r -> effect.apply(r).fmap(constantly(this)))\n","                .unsafePerformIO();\n","    }\n","\n","    /**\n","     * Perform side-effects against a wrapped right or left value, returning back the <code>Either</code> unaltered.\n","     *\n","     * @param leftEffect  the effecting consumer for left values\n","     * @param rightEffect the effecting consumer for right values\n","     * @return the Either, unaltered\n","     * @deprecated in favor of {@link Either#match(Fn1, Fn1) matching} into an {@link IO} and explicitly running it\n","     */\n","    @Deprecated\n","    public Either<L, R> peek(Fn1<? super L, ? extends IO<?>> leftEffect, Fn1<? super R, ? extends IO<?>> rightEffect) {\n","        return match(leftEffect, rightEffect).fmap(constantly(this)).unsafePerformIO();\n","    }\n","\n","    /**\n","     * Given two mapping functions (one from an <code>L</code> to a <code>V</code>, one from an <code>R</code> to a\n","     * <code>V</code>), unwrap the value stored in this <code>Either</code>, apply the appropriate mapping function,\n","     * and return the result.\n","     *\n","     * @param <V>     the result type\n","     * @param leftFn  the left value mapping function\n","     * @param rightFn the right value mapping function\n","     * @return the result of applying the appropriate mapping function to the wrapped value\n","     */\n","    @Override\n","    public abstract <V> V match(Fn1<? super L, ? extends V> leftFn, Fn1<? super R, ? extends V> rightFn);\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C> Choice3<L, R, C> diverge() {\n","        return match(Choice3::a, Choice3::b);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final <R2> Either<L, R2> fmap(Fn1<? super R, ? extends R2> fn) {\n","        return MonadError.super.<R2>fmap(fn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final <L2> Either<L2, R> biMapL(Fn1<? super L, ? extends L2> fn) {\n","        return (Either<L2, R>) Bifunctor.super.<L2>biMapL(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final <R2> Either<L, R2> biMapR(Fn1<? super R, ? extends R2> fn) {\n","        return (Either<L, R2>) Bifunctor.super.<R2>biMapR(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final <L2, R2> Either<L2, R2> biMap(Fn1<? super L, ? extends L2> leftFn,\n","                                               Fn1<? super R, ? extends R2> rightFn) {\n","        return match(l -> left(leftFn.apply(l)), r -> right(rightFn.apply(r)));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final <R2> Either<L, R2> pure(R2 r2) {\n","        return right(r2);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final <R2> Either<L, R2> zip(Applicative<Fn1<? super R, ? extends R2>, Either<L, ?>> appFn) {\n","        return MonadError.super.zip(appFn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <R2> Lazy<Either<L, R2>> lazyZip(\n","            Lazy<? extends Applicative<Fn1<? super R, ? extends R2>, Either<L, ?>>> lazyAppFn) {\n","        return match(l -> lazy(left(l)),\n","                     r -> lazyAppFn.fmap(eitherLF -> eitherLF.<R2>fmap(f -> f.apply(r)).coerce()));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final <R2> Either<L, R2> discardL(Applicative<R2, Either<L, ?>> appB) {\n","        return MonadError.super.discardL(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final <R2> Either<L, R> discardR(Applicative<R2, Either<L, ?>> appB) {\n","        return MonadError.super.discardR(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Either<L, R> throwError(L l) {\n","        return left(l);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    @SuppressWarnings(\"RedundantTypeArguments\")\n","    public Either<L, R> catchError(Fn1<? super L, ? extends Monad<R, Either<L, ?>>> recoveryFn) {\n","        return match(recoveryFn.fmap(Monad<R, Either<L, ?>>::coerce), Either::right);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final <R2, App extends Applicative<?, App>, TravB extends Traversable<R2, Either<L, ?>>,\n","            AppTrav extends Applicative<TravB, App>> AppTrav traverse(Fn1<? super R, ? extends Applicative<R2, App>> fn,\n","                                                                      Fn1<? super TravB, ? extends AppTrav> pure) {\n","        return match(l -> pure.apply(Either.<L, R2>left(l).<TravB>coerce()),\n","                     r -> fn.apply(r).<Either<L, R2>>fmap(Either::right).<TravB>fmap(Functor::coerce))\n","                .coerce();\n","    }\n","\n","    /**\n","     * In the left case, returns a {@link Maybe#nothing()}; otherwise, returns {@link Maybe#maybe} around the right\n","     * value.\n","     *\n","     * @return Maybe the right value\n","     */\n","    public final Maybe<R> toMaybe() {\n","        return projectB();\n","    }\n","\n","    /**\n","     * Convert a {@link Maybe}&lt;R&gt; into an <code>Either&lt;L, R&gt;</code>, supplying the left value from\n","     * <code>leftFn</code> in the case of {@link Maybe#nothing()}.\n","     *\n","     * @param <L>     the left parameter type\n","     * @param <R>     the right parameter type\n","     * @param maybe   the maybe\n","     * @param leftFn0 the supplier to use for left values\n","     * @return a right value of the contained maybe value, or a left value of leftFn's result\n","     */\n","    public static <L, R> Either<L, R> fromMaybe(Maybe<R> maybe, Fn0<L> leftFn0) {\n","        return maybe.<Either<L, R>>fmap(Either::right)\n","                .orElseGet(() -> left(leftFn0.apply()));\n","    }\n","\n","    /**\n","     * Attempt to execute the {@link Fn0}, returning its result in a right value. If the supplier throws an\n","     * exception, apply leftFn to it, wrap it in a left value and return it.\n","     *\n","     * @param <L>    the left parameter type\n","     * @param <R>    the right parameter type\n","     * @param fn0    the supplier of the right value\n","     * @param leftFn a function mapping E to L\n","     * @return the supplier result as a right value, or leftFn's mapping result as a left value\n","     */\n","    public static <L, R> Either<L, R> trying(Fn0<? extends R> fn0, Fn1<? super Throwable, ? extends L> leftFn) {\n","        return Try.<R>trying(fn0).toEither(leftFn);\n","    }\n","\n","    /**\n","     * Attempt to execute the {@link Fn0}, returning its result in a right value. If the supplier throws an\n","     * exception, wrap it in a left value and return it.\n","     *\n","     * @param fn0 the supplier of the right value\n","     * @param <R> the right parameter type\n","     * @return the supplier result as a right value, or a left value of the thrown exception\n","     */\n","    public static <R> Either<Throwable, R> trying(Fn0<? extends R> fn0) {\n","        return trying(fn0, id());\n","    }\n","\n","    /**\n","     * Attempt to execute the {@link SideEffect}, returning {@link Unit} in a right value. If the runnable throws\n","     * an exception, apply <code>leftFn</code> to it, wrap it in a left value, and return it.\n","     *\n","     * @param <L>        the left parameter type\n","     * @param sideEffect the runnable\n","     * @param leftFn     a function mapping E to L\n","     * @return {@link Unit} as a right value, or leftFn's mapping result as a left value\n","     */\n","    public static <L> Either<L, Unit> trying(SideEffect sideEffect, Fn1<? super Throwable, ? extends L> leftFn) {\n","        return Try.trying(sideEffect).toEither(leftFn);\n","    }\n","\n","    /**\n","     * Attempt to execute the {@link SideEffect}, returning {@link Unit} in a right value. If the runnable throws\n","     * exception, wrap it in a left value and return it.\n","     *\n","     * @param sideEffect the runnable\n","     * @return {@link Unit} as a right value, or a left value of the thrown exception\n","     */\n","    public static Either<Throwable, Unit> trying(SideEffect sideEffect) {\n","        return trying(sideEffect, id());\n","    }\n","\n","    /**\n","     * Static factory method for creating a left value.\n","     *\n","     * @param l   the wrapped value\n","     * @param <L> the left parameter type\n","     * @param <R> the right parameter type\n","     * @return a left value of l\n","     */\n","    public static <L, R> Either<L, R> left(L l) {\n","        return new Left<>(l);\n","    }\n","\n","    /**\n","     * Static factory method for creating a right value.\n","     *\n","     * @param r   the wrapped value\n","     * @param <L> the left parameter type\n","     * @param <R> the right parameter type\n","     * @return a right value of r\n","     */\n","    public static <L, R> Either<L, R> right(R r) {\n","        return new Right<>(r);\n","    }\n","\n","    /**\n","     * The canonical {@link Pure} instance for {@link Either}.\n","     *\n","     * @param <L> the left type\n","     * @return the {@link Pure} instance\n","     */\n","    public static <L> Pure<Either<L, ?>> pureEither() {\n","        return Either::right;\n","    }\n","\n","    private static final class Left<L, R> extends Either<L, R> {\n","        private final L l;\n","\n","        private Left(L l) {\n","            this.l = l;\n","        }\n","\n","        @Override\n","        public <V> V match(Fn1<? super L, ? extends V> leftFn, Fn1<? super R, ? extends V> rightFn) {\n","            return leftFn.apply(l);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof Left && Objects.equals(l, ((Left) other).l);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(l);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Left{\" +\n","                    \"l=\" + l +\n","                    '}';\n","        }\n","    }\n","\n","    private static final class Right<L, R> extends Either<L, R> {\n","        private final R r;\n","\n","        private Right(R r) {\n","            this.r = r;\n","        }\n","\n","        @Override\n","        public <V> V match(Fn1<? super L, ? extends V> leftFn, Fn1<? super R, ? extends V> rightFn) {\n","            return rightFn.apply(r);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof Right && Objects.equals(r, ((Right) other).r);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(r);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Right{\" +\n","                    \"r=\" + r +\n","                    '}';\n","        }\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.adt;\n","\n","import com.jnape.palatable.lambda.functions.Fn2;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.framework.Subjects;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Rule;\n","import org.junit.Test;\n","import org.junit.rules.ExpectedException;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.ApplicativeLaws;\n","import testsupport.traits.BifunctorLaws;\n","import testsupport.traits.FunctorLaws;\n","import testsupport.traits.MonadLaws;\n","import testsupport.traits.MonadRecLaws;\n","import testsupport.traits.TraversableLaws;\n","\n","import java.util.concurrent.atomic.AtomicInteger;\n","\n","import static com.jnape.palatable.lambda.adt.Either.fromMaybe;\n","import static com.jnape.palatable.lambda.adt.Either.left;\n","import static com.jnape.palatable.lambda.adt.Either.right;\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","import static com.jnape.palatable.lambda.adt.Unit.UNIT;\n","import static com.jnape.palatable.lambda.functor.builtin.Lazy.lazy;\n","import static com.jnape.palatable.traitor.framework.Subjects.subjects;\n","import static org.hamcrest.core.Is.is;\n","import static org.junit.Assert.assertEquals;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.assertion.MonadErrorAssert.assertLaws;\n","\n","@RunWith(Traits.class)\n","public class EitherTest {\n","\n","    @Rule\n","    public ExpectedException thrown = ExpectedException.none();\n","\n","    @TestTraits({\n","            FunctorLaws.class,\n","            ApplicativeLaws.class,\n","            MonadLaws.class,\n","            BifunctorLaws.class,\n","            TraversableLaws.class,\n","            MonadRecLaws.class})\n","    public Subjects<Either<String, Integer>> testSubjects() {\n","        return subjects(left(\"foo\"), right(1));\n","    }\n","\n","    @Test\n","    public void monadError() {\n","        assertLaws(subjects(left(\"a\"), right(1)), \"bar\", e -> right(e.length()));\n","    }\n","\n","    @Test\n","    public void recoverLiftsLeftAndFlattensRight() {\n","        Either<String, Integer> left  = left(\"foo\");\n","        Either<String, Integer> right = right(1);\n","\n","        assertThat(left.recover(l -> -1), is(-1));\n","        assertThat(right.recover(l -> -1), is(1));\n","    }\n","\n","    @Test\n","    public void forfeitLiftsRightAndFlattensLeft() {\n","        Either<String, Integer> left  = left(\"foo\");\n","        Either<String, Integer> right = right(1);\n","\n","        assertThat(left.forfeit(r -> \"bar\"), is(\"foo\"));\n","        assertThat(right.forfeit(r -> \"bar\"), is(\"bar\"));\n","    }\n","\n","    @Test\n","    public void orReplacesLeftAndFlattensRight() {\n","        Either<String, Integer> left  = left(\"foo\");\n","        Either<String, Integer> right = right(1);\n","\n","        assertThat(left.or(-1), is(-1));\n","        assertThat(right.or(-1), is(1));\n","    }\n","\n","    @Test\n","    public void orThrowFlattensRightOrThrowsException() {\n","        Either<String, Integer> left  = left(\"foo\");\n","        Either<String, Integer> right = right(1);\n","\n","        assertThat(right.orThrow(IllegalStateException::new), is(1));\n","\n","        thrown.expect(IllegalStateException.class);\n","        thrown.expectMessage(\"foo\");\n","\n","        left.orThrow(IllegalStateException::new);\n","    }\n","\n","    @Test\n","    public void filterLiftsRight() {\n","        Either<String, Integer> left  = left(\"foo\");\n","        Either<String, Integer> right = right(1);\n","\n","        assertThat(left.filter(x -> true, () -> \"bar\"), is(left));\n","        assertThat(left.filter(x -> false, () -> \"bar\"), is(left));\n","        assertThat(right.filter(x -> true, () -> \"bar\"), is(right));\n","        assertThat(right.filter(x -> false, () -> \"bar\"), is(left(\"bar\")));\n","    }\n","\n","    @Test\n","    public void filterSupportsFunctionFromRToL() {\n","        Either<String, Integer> left  = left(\"foo\");\n","        Either<String, Integer> right = right(1);\n","\n","        assertThat(left.filter(x -> true, Object::toString), is(left));\n","        assertThat(left.filter(x -> false, Object::toString), is(left));\n","        assertThat(right.filter(x -> true, Object::toString), is(right));\n","        assertThat(right.filter(x -> false, Object::toString), is(left(\"1\")));\n","    }\n","\n","    @Test\n","    public void monadicFlatMapLiftsRightAndFlattensBackToEither() {\n","        Either<String, Integer> left  = left(\"foo\");\n","        Either<String, Integer> right = right(1);\n","\n","        assertThat(left.flatMap(r -> right(r + 1)), is(left(\"foo\")));\n","        assertThat(right.flatMap(r -> right(r + 1)), is(right(2)));\n","    }\n","\n","    @Test\n","    public void mergeDuallyLiftsAndCombinesBiasingLeft() {\n","        Either<String, Integer> left1  = left(\"foo\");\n","        Either<String, Integer> right1 = right(1);\n","\n","        Either<String, Integer> left2  = left(\"bar\");\n","        Either<String, Integer> right2 = right(2);\n","\n","        Fn2<String, String, String>    concat = String::concat;\n","        Fn2<Integer, Integer, Integer> add    = Integer::sum;\n","\n","        assertThat(left1.merge(concat, add, left2), is(left(\"foobar\")));\n","        assertThat(left1.merge(concat, add, right2), is(left1));\n","        assertThat(right1.merge(concat, add, left2), is(left2));\n","        assertThat(right1.merge(concat, add, right1), is(right(2)));\n","    }\n","\n","    @Test\n","    public void matchDuallyLiftsAndFlattens() {\n","        Either<String, Integer> left  = left(\"foo\");\n","        Either<String, Integer> right = right(1);\n","\n","        assertThat(left.match(l -> l + \"bar\", r -> r + 1), is(\"foobar\"));\n","        assertThat(right.match(l -> l + \"bar\", r -> r + 1), is(2));\n","    }\n","\n","    @Test\n","    public void toMaybeMapsEitherToOptional() {\n","        assertEquals(just(1), Either.<String, Integer>right(1).toMaybe());\n","        assertEquals(nothing(), Either.<String, Integer>left(\"fail\").toMaybe());\n","    }\n","\n","    @Test\n","    public void fromMaybeMapsMaybeToEither() {\n","        Maybe<Integer> just    = just(1);\n","        Maybe<Integer> nothing = nothing();\n","\n","        assertThat(fromMaybe(just, () -> \"fail\"), is(right(1)));\n","        assertThat(fromMaybe(nothing, () -> \"fail\"), is(left(\"fail\")));\n","    }\n","\n","    @Test\n","    public void fromMaybeDoesNotEvaluateLeftFnForRight() {\n","        Maybe<Integer> just          = just(1);\n","        AtomicInteger  atomicInteger = new AtomicInteger(0);\n","        fromMaybe(just, atomicInteger::incrementAndGet);\n","\n","        assertThat(atomicInteger.get(), is(0));\n","    }\n","\n","    @Test\n","    public void monadicTryingLiftsCheckedSupplier() {\n","        assertEquals(right(1), Either.trying(() -> 1));\n","\n","        Exception checkedException = new Exception(\"expected\");\n","        assertEquals(left(checkedException), Either.trying(() -> {\n","            throw checkedException;\n","        }));\n","    }\n","\n","    @Test\n","    public void dyadicTryingLiftsCheckedSupplierMappingAnyThrownExceptions() {\n","        assertEquals(right(1), Either.trying(() -> 1, Throwable::getMessage));\n","        assertEquals(left(\"expected\"), Either.trying(() -> {\n","            throw new Exception(\"expected\");\n","        }, Throwable::getMessage));\n","    }\n","\n","    @Test\n","    public void dyadicTryingWithRunnable() {\n","        assertEquals(right(UNIT), Either.trying(() -> {}, Throwable::getMessage));\n","        assertEquals(left(\"expected\"), Either.trying(() -> {\n","            throw new IllegalStateException(\"expected\");\n","        }, Throwable::getMessage));\n","    }\n","\n","    @Test\n","    public void monadTryingWithRunnable() {\n","        assertEquals(right(UNIT), Either.trying(() -> {}));\n","        IllegalStateException expected = new IllegalStateException(\"expected\");\n","        assertEquals(left(expected), Either.trying(() -> {throw expected;}));\n","    }\n","\n","    @Test\n","    public void lazyZip() {\n","        assertEquals(right(2), right(1).lazyZip(lazy(right(x -> x + 1))).value());\n","        assertEquals(left(\"foo\"), left(\"foo\").lazyZip(lazy(() -> {\n","            throw new AssertionError();\n","        })).value());\n","    }\n","\n","    @Test\n","    public void staticPure() {\n","        Either<String, Integer> either = Either.<String>pureEither().apply(1);\n","        assertEquals(right(1), either);\n","    }\n","}"],"method_lines_dic":{"Either::::or(R)":[56,58],"Either::::recover(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends R>)":[67,69],"Either::::forfeit(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends L>)":[78,80],"Either::::orThrow(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends T>)":[91,95],"Either::::filter(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.functions.Fn0<L>)":[108,110],"Either::::filter(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends L>)":[121,124],"Either::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends com.jnape.palatable.lambda.monad.Monad<R2, com.jnape.palatable.lambda.adt.Either<L, ?>>>)":[137,141],"Either::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<R, B>, com.jnape.palatable.lambda.adt.Either<L, ?>>>)":[146,151],"Either::::invert()":[153,156],"Either::::merge(com.jnape.palatable.lambda.functions.Fn2<? super L, ? super L, ? extends L>,com.jnape.palatable.lambda.functions.Fn2<? super R, ? super R, ? extends R>,com.jnape.palatable.lambda.adt.Either<L, R>[])":[169,178],"Either::::peek(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends com.jnape.palatable.lambda.io.IO<?>>)":[187,192],"Either::::peek(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends com.jnape.palatable.lambda.io.IO<?>>,com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends com.jnape.palatable.lambda.io.IO<?>>)":[202,205],"Either::::match(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends V>,com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends V>)":[217,218],"Either::::diverge()":[223,226],"Either::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends R2>)":[231,234],"Either::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends L2>)":[239,242],"Either::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends R2>)":[247,250],"Either::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends L2>,com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends R2>)":[255,259],"Either::::pure(R2)":[264,267],"Either::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends R2>, com.jnape.palatable.lambda.adt.Either<L, ?>>)":[272,275],"Either::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends R2>, com.jnape.palatable.lambda.adt.Either<L, ?>>>)":[280,285],"Either::::discardL(com.jnape.palatable.lambda.functor.Applicative<R2, com.jnape.palatable.lambda.adt.Either<L, ?>>)":[290,293],"Either::::discardR(com.jnape.palatable.lambda.functor.Applicative<R2, com.jnape.palatable.lambda.adt.Either<L, ?>>)":[298,301],"Either::::throwError(L)":[306,309],"Either::::catchError(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends com.jnape.palatable.lambda.monad.Monad<R, com.jnape.palatable.lambda.adt.Either<L, ?>>>)":[314,318],"Either::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends com.jnape.palatable.lambda.functor.Applicative<R2, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)":[323,330],"Either::::toMaybe()":[338,340],"Either::::fromMaybe(com.jnape.palatable.lambda.adt.Maybe<R>,com.jnape.palatable.lambda.functions.Fn0<L>)":[352,355],"Either::::trying(com.jnape.palatable.lambda.functions.Fn0<? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends L>)":[367,369],"Either::::trying(com.jnape.palatable.lambda.functions.Fn0<? extends R>)":[379,381],"Either::::trying(com.jnape.palatable.lambda.functions.specialized.SideEffect,com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends L>)":[392,394],"Either::::trying(com.jnape.palatable.lambda.functions.specialized.SideEffect)":[403,405],"Either::::left(L)":[415,417],"Either::::right(R)":[427,429],"Either::::pureEither()":[437,439],"Either.Left::::match(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends V>,com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends V>)":[448,451],"Either.Left::::equals(java.lang.Object)":[453,456],"Either.Left::::hashCode()":[458,461],"Either.Left::::toString()":[463,468],"Either.Right::::match(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends V>,com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends V>)":[478,481],"Either.Right::::equals(java.lang.Object)":[483,486],"Either.Right::::hashCode()":[488,491],"Either.Right::::toString()":[493,498]},"test_method_lines_dic":{"EitherTest::::testSubjects()":[39,48],"EitherTest::::monadError()":[50,53],"EitherTest::::recoverLiftsLeftAndFlattensRight()":[55,62],"EitherTest::::forfeitLiftsRightAndFlattensLeft()":[64,71],"EitherTest::::orReplacesLeftAndFlattensRight()":[73,80],"EitherTest::::orThrowFlattensRightOrThrowsException()":[82,93],"EitherTest::::filterLiftsRight()":[95,104],"EitherTest::::filterSupportsFunctionFromRToL()":[106,115],"EitherTest::::monadicFlatMapLiftsRightAndFlattensBackToEither()":[117,124],"EitherTest::::mergeDuallyLiftsAndCombinesBiasingLeft()":[126,141],"EitherTest::::matchDuallyLiftsAndFlattens()":[143,150],"EitherTest::::toMaybeMapsEitherToOptional()":[152,156],"EitherTest::::fromMaybeMapsMaybeToEither()":[158,165],"EitherTest::::fromMaybeDoesNotEvaluateLeftFnForRight()":[167,174],"EitherTest::::monadicTryingLiftsCheckedSupplier()":[176,184],"EitherTest::::dyadicTryingLiftsCheckedSupplierMappingAnyThrownExceptions()":[186,192],"EitherTest::::dyadicTryingWithRunnable()":[194,200],"EitherTest::::monadTryingWithRunnable()":[202,207],"EitherTest::::lazyZip()":[209,215],"EitherTest::::staticPure()":[217,221]},"reverse_method_lines_dic":{"56":"Either::::or(R)","57":"Either::::or(R)","58":"Either::::or(R)","67":"Either::::recover(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends R>)","68":"Either::::recover(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends R>)","69":"Either::::recover(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends R>)","78":"Either::::forfeit(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends L>)","79":"Either::::forfeit(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends L>)","80":"Either::::forfeit(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends L>)","91":"Either::::orThrow(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends T>)","92":"Either::::orThrow(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends T>)","93":"Either::::orThrow(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends T>)","94":"Either::::orThrow(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends T>)","95":"Either::::orThrow(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends T>)","108":"Either::::filter(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.functions.Fn0<L>)","109":"Either::::filter(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.functions.Fn0<L>)","110":"Either::::filter(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.functions.Fn0<L>)","121":"Either::::filter(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends L>)","122":"Either::::filter(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends L>)","123":"Either::::filter(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends L>)","124":"Either::::filter(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends L>)","137":"Either::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends com.jnape.palatable.lambda.monad.Monad<R2, com.jnape.palatable.lambda.adt.Either<L, ?>>>)","138":"Either::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends com.jnape.palatable.lambda.monad.Monad<R2, com.jnape.palatable.lambda.adt.Either<L, ?>>>)","139":"Either::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends com.jnape.palatable.lambda.monad.Monad<R2, com.jnape.palatable.lambda.adt.Either<L, ?>>>)","140":"Either::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends com.jnape.palatable.lambda.monad.Monad<R2, com.jnape.palatable.lambda.adt.Either<L, ?>>>)","141":"Either::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends com.jnape.palatable.lambda.monad.Monad<R2, com.jnape.palatable.lambda.adt.Either<L, ?>>>)","146":"Either::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<R, B>, com.jnape.palatable.lambda.adt.Either<L, ?>>>)","147":"Either::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<R, B>, com.jnape.palatable.lambda.adt.Either<L, ?>>>)","148":"Either::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<R, B>, com.jnape.palatable.lambda.adt.Either<L, ?>>>)","149":"Either::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<R, B>, com.jnape.palatable.lambda.adt.Either<L, ?>>>)","150":"Either::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<R, B>, com.jnape.palatable.lambda.adt.Either<L, ?>>>)","151":"Either::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<R, B>, com.jnape.palatable.lambda.adt.Either<L, ?>>>)","153":"Either::::invert()","154":"Either::::invert()","155":"Either::::invert()","156":"Either::::invert()","169":"Either::::merge(com.jnape.palatable.lambda.functions.Fn2<? super L, ? super L, ? extends L>,com.jnape.palatable.lambda.functions.Fn2<? super R, ? super R, ? extends R>,com.jnape.palatable.lambda.adt.Either<L, R>[])","170":"Either::::merge(com.jnape.palatable.lambda.functions.Fn2<? super L, ? super L, ? extends L>,com.jnape.palatable.lambda.functions.Fn2<? super R, ? super R, ? extends R>,com.jnape.palatable.lambda.adt.Either<L, R>[])","171":"Either::::merge(com.jnape.palatable.lambda.functions.Fn2<? super L, ? super L, ? extends L>,com.jnape.palatable.lambda.functions.Fn2<? super R, ? super R, ? extends R>,com.jnape.palatable.lambda.adt.Either<L, R>[])","172":"Either::::merge(com.jnape.palatable.lambda.functions.Fn2<? super L, ? super L, ? extends L>,com.jnape.palatable.lambda.functions.Fn2<? super R, ? super R, ? extends R>,com.jnape.palatable.lambda.adt.Either<L, R>[])","173":"Either::::merge(com.jnape.palatable.lambda.functions.Fn2<? super L, ? super L, ? extends L>,com.jnape.palatable.lambda.functions.Fn2<? super R, ? super R, ? extends R>,com.jnape.palatable.lambda.adt.Either<L, R>[])","174":"Either::::merge(com.jnape.palatable.lambda.functions.Fn2<? super L, ? super L, ? extends L>,com.jnape.palatable.lambda.functions.Fn2<? super R, ? super R, ? extends R>,com.jnape.palatable.lambda.adt.Either<L, R>[])","175":"Either::::merge(com.jnape.palatable.lambda.functions.Fn2<? super L, ? super L, ? extends L>,com.jnape.palatable.lambda.functions.Fn2<? super R, ? super R, ? extends R>,com.jnape.palatable.lambda.adt.Either<L, R>[])","176":"Either::::merge(com.jnape.palatable.lambda.functions.Fn2<? super L, ? super L, ? extends L>,com.jnape.palatable.lambda.functions.Fn2<? super R, ? super R, ? extends R>,com.jnape.palatable.lambda.adt.Either<L, R>[])","177":"Either::::merge(com.jnape.palatable.lambda.functions.Fn2<? super L, ? super L, ? extends L>,com.jnape.palatable.lambda.functions.Fn2<? super R, ? super R, ? extends R>,com.jnape.palatable.lambda.adt.Either<L, R>[])","178":"Either::::merge(com.jnape.palatable.lambda.functions.Fn2<? super L, ? super L, ? extends L>,com.jnape.palatable.lambda.functions.Fn2<? super R, ? super R, ? extends R>,com.jnape.palatable.lambda.adt.Either<L, R>[])","187":"Either::::peek(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends com.jnape.palatable.lambda.io.IO<?>>)","188":"Either::::peek(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends com.jnape.palatable.lambda.io.IO<?>>)","189":"Either::::peek(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends com.jnape.palatable.lambda.io.IO<?>>)","190":"Either::::peek(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends com.jnape.palatable.lambda.io.IO<?>>)","191":"Either::::peek(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends com.jnape.palatable.lambda.io.IO<?>>)","192":"Either::::peek(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends com.jnape.palatable.lambda.io.IO<?>>)","202":"Either::::peek(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends com.jnape.palatable.lambda.io.IO<?>>,com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends com.jnape.palatable.lambda.io.IO<?>>)","203":"Either::::peek(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends com.jnape.palatable.lambda.io.IO<?>>,com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends com.jnape.palatable.lambda.io.IO<?>>)","204":"Either::::peek(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends com.jnape.palatable.lambda.io.IO<?>>,com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends com.jnape.palatable.lambda.io.IO<?>>)","205":"Either::::peek(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends com.jnape.palatable.lambda.io.IO<?>>,com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends com.jnape.palatable.lambda.io.IO<?>>)","217":"Either::::match(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends V>,com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends V>)","218":"Either::::match(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends V>,com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends V>)","223":"Either::::diverge()","224":"Either::::diverge()","225":"Either::::diverge()","226":"Either::::diverge()","231":"Either::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends R2>)","232":"Either::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends R2>)","233":"Either::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends R2>)","234":"Either::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends R2>)","239":"Either::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends L2>)","240":"Either::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends L2>)","241":"Either::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends L2>)","242":"Either::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends L2>)","247":"Either::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends R2>)","248":"Either::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends R2>)","249":"Either::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends R2>)","250":"Either::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends R2>)","255":"Either::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends L2>,com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends R2>)","256":"Either::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends L2>,com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends R2>)","257":"Either::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends L2>,com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends R2>)","258":"Either::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends L2>,com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends R2>)","259":"Either::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends L2>,com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends R2>)","264":"Either::::pure(R2)","265":"Either::::pure(R2)","266":"Either::::pure(R2)","267":"Either::::pure(R2)","272":"Either::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends R2>, com.jnape.palatable.lambda.adt.Either<L, ?>>)","273":"Either::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends R2>, com.jnape.palatable.lambda.adt.Either<L, ?>>)","274":"Either::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends R2>, com.jnape.palatable.lambda.adt.Either<L, ?>>)","275":"Either::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends R2>, com.jnape.palatable.lambda.adt.Either<L, ?>>)","280":"Either::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends R2>, com.jnape.palatable.lambda.adt.Either<L, ?>>>)","281":"Either::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends R2>, com.jnape.palatable.lambda.adt.Either<L, ?>>>)","282":"Either::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends R2>, com.jnape.palatable.lambda.adt.Either<L, ?>>>)","283":"Either::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends R2>, com.jnape.palatable.lambda.adt.Either<L, ?>>>)","284":"Either::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends R2>, com.jnape.palatable.lambda.adt.Either<L, ?>>>)","285":"Either::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends R2>, com.jnape.palatable.lambda.adt.Either<L, ?>>>)","290":"Either::::discardL(com.jnape.palatable.lambda.functor.Applicative<R2, com.jnape.palatable.lambda.adt.Either<L, ?>>)","291":"Either::::discardL(com.jnape.palatable.lambda.functor.Applicative<R2, com.jnape.palatable.lambda.adt.Either<L, ?>>)","292":"Either::::discardL(com.jnape.palatable.lambda.functor.Applicative<R2, com.jnape.palatable.lambda.adt.Either<L, ?>>)","293":"Either::::discardL(com.jnape.palatable.lambda.functor.Applicative<R2, com.jnape.palatable.lambda.adt.Either<L, ?>>)","298":"Either::::discardR(com.jnape.palatable.lambda.functor.Applicative<R2, com.jnape.palatable.lambda.adt.Either<L, ?>>)","299":"Either::::discardR(com.jnape.palatable.lambda.functor.Applicative<R2, com.jnape.palatable.lambda.adt.Either<L, ?>>)","300":"Either::::discardR(com.jnape.palatable.lambda.functor.Applicative<R2, com.jnape.palatable.lambda.adt.Either<L, ?>>)","301":"Either::::discardR(com.jnape.palatable.lambda.functor.Applicative<R2, com.jnape.palatable.lambda.adt.Either<L, ?>>)","306":"Either::::throwError(L)","307":"Either::::throwError(L)","308":"Either::::throwError(L)","309":"Either::::throwError(L)","314":"Either::::catchError(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends com.jnape.palatable.lambda.monad.Monad<R, com.jnape.palatable.lambda.adt.Either<L, ?>>>)","315":"Either::::catchError(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends com.jnape.palatable.lambda.monad.Monad<R, com.jnape.palatable.lambda.adt.Either<L, ?>>>)","316":"Either::::catchError(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends com.jnape.palatable.lambda.monad.Monad<R, com.jnape.palatable.lambda.adt.Either<L, ?>>>)","317":"Either::::catchError(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends com.jnape.palatable.lambda.monad.Monad<R, com.jnape.palatable.lambda.adt.Either<L, ?>>>)","318":"Either::::catchError(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends com.jnape.palatable.lambda.monad.Monad<R, com.jnape.palatable.lambda.adt.Either<L, ?>>>)","323":"Either::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends com.jnape.palatable.lambda.functor.Applicative<R2, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","324":"Either::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends com.jnape.palatable.lambda.functor.Applicative<R2, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","325":"Either::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends com.jnape.palatable.lambda.functor.Applicative<R2, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","326":"Either::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends com.jnape.palatable.lambda.functor.Applicative<R2, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","327":"Either::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends com.jnape.palatable.lambda.functor.Applicative<R2, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","328":"Either::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends com.jnape.palatable.lambda.functor.Applicative<R2, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","329":"Either::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends com.jnape.palatable.lambda.functor.Applicative<R2, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","330":"Either::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends com.jnape.palatable.lambda.functor.Applicative<R2, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","338":"Either::::toMaybe()","339":"Either::::toMaybe()","340":"Either::::toMaybe()","352":"Either::::fromMaybe(com.jnape.palatable.lambda.adt.Maybe<R>,com.jnape.palatable.lambda.functions.Fn0<L>)","353":"Either::::fromMaybe(com.jnape.palatable.lambda.adt.Maybe<R>,com.jnape.palatable.lambda.functions.Fn0<L>)","354":"Either::::fromMaybe(com.jnape.palatable.lambda.adt.Maybe<R>,com.jnape.palatable.lambda.functions.Fn0<L>)","355":"Either::::fromMaybe(com.jnape.palatable.lambda.adt.Maybe<R>,com.jnape.palatable.lambda.functions.Fn0<L>)","367":"Either::::trying(com.jnape.palatable.lambda.functions.Fn0<? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends L>)","368":"Either::::trying(com.jnape.palatable.lambda.functions.Fn0<? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends L>)","369":"Either::::trying(com.jnape.palatable.lambda.functions.Fn0<? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends L>)","379":"Either::::trying(com.jnape.palatable.lambda.functions.Fn0<? extends R>)","380":"Either::::trying(com.jnape.palatable.lambda.functions.Fn0<? extends R>)","381":"Either::::trying(com.jnape.palatable.lambda.functions.Fn0<? extends R>)","392":"Either::::trying(com.jnape.palatable.lambda.functions.specialized.SideEffect,com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends L>)","393":"Either::::trying(com.jnape.palatable.lambda.functions.specialized.SideEffect,com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends L>)","394":"Either::::trying(com.jnape.palatable.lambda.functions.specialized.SideEffect,com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends L>)","403":"Either::::trying(com.jnape.palatable.lambda.functions.specialized.SideEffect)","404":"Either::::trying(com.jnape.palatable.lambda.functions.specialized.SideEffect)","405":"Either::::trying(com.jnape.palatable.lambda.functions.specialized.SideEffect)","415":"Either::::left(L)","416":"Either::::left(L)","417":"Either::::left(L)","427":"Either::::right(R)","428":"Either::::right(R)","429":"Either::::right(R)","437":"Either::::pureEither()","438":"Either::::pureEither()","439":"Either::::pureEither()","448":"Either.Left::::match(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends V>,com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends V>)","449":"Either.Left::::match(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends V>,com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends V>)","450":"Either.Left::::match(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends V>,com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends V>)","451":"Either.Left::::match(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends V>,com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends V>)","453":"Either.Left::::equals(java.lang.Object)","454":"Either.Left::::equals(java.lang.Object)","455":"Either.Left::::equals(java.lang.Object)","456":"Either.Left::::equals(java.lang.Object)","458":"Either.Left::::hashCode()","459":"Either.Left::::hashCode()","460":"Either.Left::::hashCode()","461":"Either.Left::::hashCode()","463":"Either.Left::::toString()","464":"Either.Left::::toString()","465":"Either.Left::::toString()","466":"Either.Left::::toString()","467":"Either.Left::::toString()","468":"Either.Left::::toString()","478":"Either.Right::::match(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends V>,com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends V>)","479":"Either.Right::::match(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends V>,com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends V>)","480":"Either.Right::::match(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends V>,com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends V>)","481":"Either.Right::::match(com.jnape.palatable.lambda.functions.Fn1<? super L, ? extends V>,com.jnape.palatable.lambda.functions.Fn1<? super R, ? extends V>)","483":"Either.Right::::equals(java.lang.Object)","484":"Either.Right::::equals(java.lang.Object)","485":"Either.Right::::equals(java.lang.Object)","486":"Either.Right::::equals(java.lang.Object)","488":"Either.Right::::hashCode()","489":"Either.Right::::hashCode()","490":"Either.Right::::hashCode()","491":"Either.Right::::hashCode()","493":"Either.Right::::toString()","494":"Either.Right::::toString()","495":"Either.Right::::toString()","496":"Either.Right::::toString()","497":"Either.Right::::toString()","498":"Either.Right::::toString()"},"test_reverse_method_lines_dic":{"39":"EitherTest::::testSubjects()","40":"EitherTest::::testSubjects()","41":"EitherTest::::testSubjects()","42":"EitherTest::::testSubjects()","43":"EitherTest::::testSubjects()","44":"EitherTest::::testSubjects()","45":"EitherTest::::testSubjects()","46":"EitherTest::::testSubjects()","47":"EitherTest::::testSubjects()","48":"EitherTest::::testSubjects()","50":"EitherTest::::monadError()","51":"EitherTest::::monadError()","52":"EitherTest::::monadError()","53":"EitherTest::::monadError()","55":"EitherTest::::recoverLiftsLeftAndFlattensRight()","56":"EitherTest::::recoverLiftsLeftAndFlattensRight()","57":"EitherTest::::recoverLiftsLeftAndFlattensRight()","58":"EitherTest::::recoverLiftsLeftAndFlattensRight()","59":"EitherTest::::recoverLiftsLeftAndFlattensRight()","60":"EitherTest::::recoverLiftsLeftAndFlattensRight()","61":"EitherTest::::recoverLiftsLeftAndFlattensRight()","62":"EitherTest::::recoverLiftsLeftAndFlattensRight()","64":"EitherTest::::forfeitLiftsRightAndFlattensLeft()","65":"EitherTest::::forfeitLiftsRightAndFlattensLeft()","66":"EitherTest::::forfeitLiftsRightAndFlattensLeft()","67":"EitherTest::::forfeitLiftsRightAndFlattensLeft()","68":"EitherTest::::forfeitLiftsRightAndFlattensLeft()","69":"EitherTest::::forfeitLiftsRightAndFlattensLeft()","70":"EitherTest::::forfeitLiftsRightAndFlattensLeft()","71":"EitherTest::::forfeitLiftsRightAndFlattensLeft()","73":"EitherTest::::orReplacesLeftAndFlattensRight()","74":"EitherTest::::orReplacesLeftAndFlattensRight()","75":"EitherTest::::orReplacesLeftAndFlattensRight()","76":"EitherTest::::orReplacesLeftAndFlattensRight()","77":"EitherTest::::orReplacesLeftAndFlattensRight()","78":"EitherTest::::orReplacesLeftAndFlattensRight()","79":"EitherTest::::orReplacesLeftAndFlattensRight()","80":"EitherTest::::orReplacesLeftAndFlattensRight()","82":"EitherTest::::orThrowFlattensRightOrThrowsException()","83":"EitherTest::::orThrowFlattensRightOrThrowsException()","84":"EitherTest::::orThrowFlattensRightOrThrowsException()","85":"EitherTest::::orThrowFlattensRightOrThrowsException()","86":"EitherTest::::orThrowFlattensRightOrThrowsException()","87":"EitherTest::::orThrowFlattensRightOrThrowsException()","88":"EitherTest::::orThrowFlattensRightOrThrowsException()","89":"EitherTest::::orThrowFlattensRightOrThrowsException()","90":"EitherTest::::orThrowFlattensRightOrThrowsException()","91":"EitherTest::::orThrowFlattensRightOrThrowsException()","92":"EitherTest::::orThrowFlattensRightOrThrowsException()","93":"EitherTest::::orThrowFlattensRightOrThrowsException()","95":"EitherTest::::filterLiftsRight()","96":"EitherTest::::filterLiftsRight()","97":"EitherTest::::filterLiftsRight()","98":"EitherTest::::filterLiftsRight()","99":"EitherTest::::filterLiftsRight()","100":"EitherTest::::filterLiftsRight()","101":"EitherTest::::filterLiftsRight()","102":"EitherTest::::filterLiftsRight()","103":"EitherTest::::filterLiftsRight()","104":"EitherTest::::filterLiftsRight()","106":"EitherTest::::filterSupportsFunctionFromRToL()","107":"EitherTest::::filterSupportsFunctionFromRToL()","108":"EitherTest::::filterSupportsFunctionFromRToL()","109":"EitherTest::::filterSupportsFunctionFromRToL()","110":"EitherTest::::filterSupportsFunctionFromRToL()","111":"EitherTest::::filterSupportsFunctionFromRToL()","112":"EitherTest::::filterSupportsFunctionFromRToL()","113":"EitherTest::::filterSupportsFunctionFromRToL()","114":"EitherTest::::filterSupportsFunctionFromRToL()","115":"EitherTest::::filterSupportsFunctionFromRToL()","117":"EitherTest::::monadicFlatMapLiftsRightAndFlattensBackToEither()","118":"EitherTest::::monadicFlatMapLiftsRightAndFlattensBackToEither()","119":"EitherTest::::monadicFlatMapLiftsRightAndFlattensBackToEither()","120":"EitherTest::::monadicFlatMapLiftsRightAndFlattensBackToEither()","121":"EitherTest::::monadicFlatMapLiftsRightAndFlattensBackToEither()","122":"EitherTest::::monadicFlatMapLiftsRightAndFlattensBackToEither()","123":"EitherTest::::monadicFlatMapLiftsRightAndFlattensBackToEither()","124":"EitherTest::::monadicFlatMapLiftsRightAndFlattensBackToEither()","126":"EitherTest::::mergeDuallyLiftsAndCombinesBiasingLeft()","127":"EitherTest::::mergeDuallyLiftsAndCombinesBiasingLeft()","128":"EitherTest::::mergeDuallyLiftsAndCombinesBiasingLeft()","129":"EitherTest::::mergeDuallyLiftsAndCombinesBiasingLeft()","130":"EitherTest::::mergeDuallyLiftsAndCombinesBiasingLeft()","131":"EitherTest::::mergeDuallyLiftsAndCombinesBiasingLeft()","132":"EitherTest::::mergeDuallyLiftsAndCombinesBiasingLeft()","133":"EitherTest::::mergeDuallyLiftsAndCombinesBiasingLeft()","134":"EitherTest::::mergeDuallyLiftsAndCombinesBiasingLeft()","135":"EitherTest::::mergeDuallyLiftsAndCombinesBiasingLeft()","136":"EitherTest::::mergeDuallyLiftsAndCombinesBiasingLeft()","137":"EitherTest::::mergeDuallyLiftsAndCombinesBiasingLeft()","138":"EitherTest::::mergeDuallyLiftsAndCombinesBiasingLeft()","139":"EitherTest::::mergeDuallyLiftsAndCombinesBiasingLeft()","140":"EitherTest::::mergeDuallyLiftsAndCombinesBiasingLeft()","141":"EitherTest::::mergeDuallyLiftsAndCombinesBiasingLeft()","143":"EitherTest::::matchDuallyLiftsAndFlattens()","144":"EitherTest::::matchDuallyLiftsAndFlattens()","145":"EitherTest::::matchDuallyLiftsAndFlattens()","146":"EitherTest::::matchDuallyLiftsAndFlattens()","147":"EitherTest::::matchDuallyLiftsAndFlattens()","148":"EitherTest::::matchDuallyLiftsAndFlattens()","149":"EitherTest::::matchDuallyLiftsAndFlattens()","150":"EitherTest::::matchDuallyLiftsAndFlattens()","152":"EitherTest::::toMaybeMapsEitherToOptional()","153":"EitherTest::::toMaybeMapsEitherToOptional()","154":"EitherTest::::toMaybeMapsEitherToOptional()","155":"EitherTest::::toMaybeMapsEitherToOptional()","156":"EitherTest::::toMaybeMapsEitherToOptional()","158":"EitherTest::::fromMaybeMapsMaybeToEither()","159":"EitherTest::::fromMaybeMapsMaybeToEither()","160":"EitherTest::::fromMaybeMapsMaybeToEither()","161":"EitherTest::::fromMaybeMapsMaybeToEither()","162":"EitherTest::::fromMaybeMapsMaybeToEither()","163":"EitherTest::::fromMaybeMapsMaybeToEither()","164":"EitherTest::::fromMaybeMapsMaybeToEither()","165":"EitherTest::::fromMaybeMapsMaybeToEither()","167":"EitherTest::::fromMaybeDoesNotEvaluateLeftFnForRight()","168":"EitherTest::::fromMaybeDoesNotEvaluateLeftFnForRight()","169":"EitherTest::::fromMaybeDoesNotEvaluateLeftFnForRight()","170":"EitherTest::::fromMaybeDoesNotEvaluateLeftFnForRight()","171":"EitherTest::::fromMaybeDoesNotEvaluateLeftFnForRight()","172":"EitherTest::::fromMaybeDoesNotEvaluateLeftFnForRight()","173":"EitherTest::::fromMaybeDoesNotEvaluateLeftFnForRight()","174":"EitherTest::::fromMaybeDoesNotEvaluateLeftFnForRight()","176":"EitherTest::::monadicTryingLiftsCheckedSupplier()","177":"EitherTest::::monadicTryingLiftsCheckedSupplier()","178":"EitherTest::::monadicTryingLiftsCheckedSupplier()","179":"EitherTest::::monadicTryingLiftsCheckedSupplier()","180":"EitherTest::::monadicTryingLiftsCheckedSupplier()","181":"EitherTest::::monadicTryingLiftsCheckedSupplier()","182":"EitherTest::::monadicTryingLiftsCheckedSupplier()","183":"EitherTest::::monadicTryingLiftsCheckedSupplier()","184":"EitherTest::::monadicTryingLiftsCheckedSupplier()","186":"EitherTest::::dyadicTryingLiftsCheckedSupplierMappingAnyThrownExceptions()","187":"EitherTest::::dyadicTryingLiftsCheckedSupplierMappingAnyThrownExceptions()","188":"EitherTest::::dyadicTryingLiftsCheckedSupplierMappingAnyThrownExceptions()","189":"EitherTest::::dyadicTryingLiftsCheckedSupplierMappingAnyThrownExceptions()","190":"EitherTest::::dyadicTryingLiftsCheckedSupplierMappingAnyThrownExceptions()","191":"EitherTest::::dyadicTryingLiftsCheckedSupplierMappingAnyThrownExceptions()","192":"EitherTest::::dyadicTryingLiftsCheckedSupplierMappingAnyThrownExceptions()","194":"EitherTest::::dyadicTryingWithRunnable()","195":"EitherTest::::dyadicTryingWithRunnable()","196":"EitherTest::::dyadicTryingWithRunnable()","197":"EitherTest::::dyadicTryingWithRunnable()","198":"EitherTest::::dyadicTryingWithRunnable()","199":"EitherTest::::dyadicTryingWithRunnable()","200":"EitherTest::::dyadicTryingWithRunnable()","202":"EitherTest::::monadTryingWithRunnable()","203":"EitherTest::::monadTryingWithRunnable()","204":"EitherTest::::monadTryingWithRunnable()","205":"EitherTest::::monadTryingWithRunnable()","206":"EitherTest::::monadTryingWithRunnable()","207":"EitherTest::::monadTryingWithRunnable()","209":"EitherTest::::lazyZip()","210":"EitherTest::::lazyZip()","211":"EitherTest::::lazyZip()","212":"EitherTest::::lazyZip()","213":"EitherTest::::lazyZip()","214":"EitherTest::::lazyZip()","215":"EitherTest::::lazyZip()","217":"EitherTest::::staticPure()","218":"EitherTest::::staticPure()","219":"EitherTest::::staticPure()","220":"EitherTest::::staticPure()","221":"EitherTest::::staticPure()"},"tests":[{"test_lines":[39,48],"covered_lines":[47,48,416,428,444,445,446,474,475,476]},{"test_lines":[50,53],"covered_lines":[47,48,308,317,416,428,444,445,446,450,474,475,476,485]},{"test_lines":[55,62],"covered_lines":[47,48,68,416,428,444,445,446,450,474,475,476,480]},{"test_lines":[64,71],"covered_lines":[47,48,79,416,428,444,445,446,450,474,475,476,480]},{"test_lines":[73,80],"covered_lines":[47,48,57,68,416,428,444,445,446,450,474,475,476,480]},{"test_lines":[82,93],"covered_lines":[47,48,92,93,94,416,428,444,445,446,474,475,476,480]},{"test_lines":[95,104],"covered_lines":[47,48,109,123,140,416,428,444,445,446,450,455,474,475,476,480,485]},{"test_lines":[106,115],"covered_lines":[47,48,123,140,416,428,444,445,446,450,455,474,475,476,480,485]},{"test_lines":[117,124],"covered_lines":[47,48,140,416,428,444,445,446,450,455,474,475,476,480,485]},{"test_lines":[126,141],"covered_lines":[47,48,174,175,177,416,428,444,445,446,450,455,474,475,476,480,485]},{"test_lines":[143,150],"covered_lines":[47,48,416,428,444,445,446,450,474,475,476,480]},{"test_lines":[152,156],"covered_lines":[47,48,339,416,428,444,445,446,450,474,475,476,480]},{"test_lines":[158,165],"covered_lines":[47,48,353,354,416,428,444,445,446,455,474,475,476,485]},{"test_lines":[167,174],"covered_lines":[47,48,353,354,416,428,444,445,446,474,475,476]},{"test_lines":[176,184],"covered_lines":[47,48,368,380,416,428,444,445,446,455,474,475,476,485]},{"test_lines":[186,192],"covered_lines":[47,48,368,416,428,444,445,446,455,474,475,476,485]},{"test_lines":[194,200],"covered_lines":[47,48,368,393,416,428,444,445,446,455,474,475,476,485]},{"test_lines":[202,207],"covered_lines":[47,48,368,380,393,404,416,428,444,445,446,455,474,475,476,485]},{"test_lines":[209,215],"covered_lines":[47,48,140,233,266,283,284,416,428,444,445,446,450,455,474,475,476,480,485]},{"test_lines":[217,221],"covered_lines":[47,48,416,428,438,444,445,446,474,475,476,485]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/adt/Try.java":{"class_content":["package com.jnape.palatable.lambda.adt;\n","\n","import com.jnape.palatable.lambda.adt.coproduct.CoProduct2;\n","import com.jnape.palatable.lambda.functions.Fn0;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.recursion.RecursiveResult;\n","import com.jnape.palatable.lambda.functions.builtin.fn1.Downcast;\n","import com.jnape.palatable.lambda.functions.specialized.Pure;\n","import com.jnape.palatable.lambda.functions.specialized.SideEffect;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","import com.jnape.palatable.lambda.functor.builtin.Lazy;\n","import com.jnape.palatable.lambda.io.IO;\n","import com.jnape.palatable.lambda.monad.Monad;\n","import com.jnape.palatable.lambda.monad.MonadError;\n","import com.jnape.palatable.lambda.monad.MonadRec;\n","import com.jnape.palatable.lambda.traversable.Traversable;\n","\n","import java.util.Objects;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","import static com.jnape.palatable.lambda.adt.Unit.UNIT;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Id.id;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Upcast.upcast;\n","import static com.jnape.palatable.lambda.functions.recursion.RecursiveResult.terminate;\n","import static com.jnape.palatable.lambda.functions.recursion.Trampoline.trampoline;\n","import static com.jnape.palatable.lambda.functor.builtin.Lazy.lazy;\n","import static com.jnape.palatable.lambda.internal.Runtime.throwChecked;\n","\n","/**\n"," * A {@link Monad} of the evaluation outcome of an expression that might throw. Try/catch/finally semantics map to\n"," * <code>trying</code>/<code>catching</code>/<code>ensuring</code>, respectively.\n"," *\n"," * @param <A> the possibly successful expression result\n"," * @see Either\n"," */\n","public abstract class Try<A> implements\n","        MonadError<Throwable, A, Try<?>>,\n","        MonadRec<A, Try<?>>,\n","        Traversable<A, Try<?>>,\n","        CoProduct2<Throwable, A, Try<A>> {\n","\n","    private Try() {\n","    }\n","\n","    /**\n","     * Catch any instance of <code>throwableType</code> and map it to a success value.\n","     *\n","     * @param <S>           the {@link Throwable} (sub)type\n","     * @param throwableType the {@link Throwable} (sub)type to be caught\n","     * @param recoveryFn    the function mapping the {@link Throwable} to the result\n","     * @return a new {@link Try} instance around either the original successful result or the mapped result\n","     */\n","    public final <S extends Throwable> Try<A> catching(Class<S> throwableType,\n","                                                       Fn1<? super S, ? extends A> recoveryFn) {\n","        return catching(throwableType::isInstance, t -> recoveryFn.apply(Downcast.<S, Throwable>downcast(t)));\n","    }\n","\n","    /**\n","     * Catch any thrown <code>T</code> satisfying <code>predicate</code> and map it to a success value.\n","     *\n","     * @param predicate  the predicate\n","     * @param recoveryFn the function mapping the {@link Throwable} to the result\n","     * @return a new {@link Try} instance around either the original successful result or the mapped result\n","     */\n","    public final Try<A> catching(Fn1<? super Throwable, ? extends Boolean> predicate,\n","                                 Fn1<? super Throwable, ? extends A> recoveryFn) {\n","        return match(t -> predicate.apply(t) ? success(recoveryFn.apply(t)) : failure(t), Try::success);\n","    }\n","\n","    /**\n","     * Run the provided runnable regardless of whether this is a success or a failure (the {@link Try} analog to\n","     * <code>finally</code>.\n","     * <p>\n","     * If the runnable runs successfully, the result is preserved as is. If the runnable itself throws, and the result\n","     * was a success, the result becomes a failure over the newly-thrown {@link Throwable}. If the result was a failure\n","     * over some {@link Throwable} <code>t1</code>, and the runnable throws a new {@link Throwable} <code>t2</code>, the\n","     * result is a failure over <code>t1</code> with <code>t2</code> added to <code>t1</code> as a suppressed exception.\n","     *\n","     * @param sideEffect the runnable block of code to execute\n","     * @return the same {@link Try} instance if runnable completes successfully; otherwise, a {@link Try} conforming to\n","     * rules above\n","     */\n","    public final Try<A> ensuring(SideEffect sideEffect) {\n","        return this.<Try<A>>match(t -> trying(sideEffect)\n","                                          .<Try<A>>fmap(constantly(failure(t)))\n","                                          .recover(t2 -> {\n","                                              t.addSuppressed(t2);\n","                                              return failure(t);\n","                                          }),\n","                                  a -> trying(sideEffect).fmap(constantly(a)));\n","    }\n","\n","    /**\n","     * If this is a success, return the wrapped value. Otherwise, apply the {@link Throwable} to <code>fn</code> and\n","     * return the result.\n","     *\n","     * @param fn the function mapping the potential {@link Throwable} <code>T</code> to <code>A</code>\n","     * @return a success value\n","     */\n","    public final A recover(Fn1<? super Throwable, ? extends A> fn) {\n","        return match(fn, id());\n","    }\n","\n","    /**\n","     * If this is a failure, return the wrapped value. Otherwise, apply the success value to <code>fn</code> and return\n","     * the result.\n","     *\n","     * @param fn the function mapping the potential <code>A</code> to <code>T</code>\n","     * @return a failure value\n","     */\n","    public final Throwable forfeit(Fn1<? super A, ? extends Throwable> fn) {\n","        return match(id(), fn);\n","    }\n","\n","    /**\n","     * If this is a success value, return it. Otherwise, rethrow the captured failure.\n","     *\n","     * @param <T> a declarable exception type used for catching checked exceptions\n","     * @return possibly the success value\n","     * @throws T anything that the call site may want to explicitly catch or indicate could be thrown\n","     */\n","    public final <T extends Throwable> A orThrow() throws T {\n","        try {\n","            return orThrow(id());\n","        } catch (Throwable t) {\n","            throw throwChecked(t);\n","        }\n","    }\n","\n","    /**\n","     * If this is a success value, return it. Otherwise, transform the captured failure with <code>fn</code> and throw\n","     * the result.\n","     *\n","     * @param fn  the {@link Throwable} transformation\n","     * @param <T> the type of the thrown {@link Throwable}\n","     * @return possibly the success value\n","     * @throws T the transformation output\n","     */\n","    public abstract <T extends Throwable> A orThrow(Fn1<? super Throwable, ? extends T> fn) throws T;\n","\n","    /**\n","     * If this is a success, wrap the value in a {@link Maybe#just} and return it. Otherwise, return {@link\n","     * Maybe#nothing()}.\n","     *\n","     * @return {@link Maybe} the success value\n","     */\n","    public final Maybe<A> toMaybe() {\n","        return match(__ -> nothing(), Maybe::just);\n","    }\n","\n","    /**\n","     * If this is a success, wrap the value in a {@link Either#right} and return it. Otherwise, return the {@link\n","     * Throwable} in an {@link Either#left}.\n","     *\n","     * @return {@link Either} the success value or the {@link Throwable}\n","     */\n","    public final Either<Throwable, A> toEither() {\n","        return toEither(id());\n","    }\n","\n","    /**\n","     * If this is a success, wrap the value in a {@link Either#right} and return it. Otherwise, apply the mapping\n","     * function to the failure {@link Throwable}, re-wrap it in an {@link Either#left}, and return it.\n","     *\n","     * @param <L> the {@link Either} left parameter type\n","     * @param fn  the mapping function\n","     * @return {@link Either} the success value or the mapped left value\n","     */\n","    public final <L> Either<L, A> toEither(Fn1<? super Throwable, ? extends L> fn) {\n","        return match(fn.fmap(Either::left), Either::right);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Try<A> throwError(Throwable throwable) {\n","        return failure(throwable);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Try<A> catchError(Fn1<? super Throwable, ? extends Monad<A, Try<?>>> recoveryFn) {\n","        return match(t -> recoveryFn.apply(t).coerce(), Try::success);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> Try<B> fmap(Fn1<? super A, ? extends B> fn) {\n","        return MonadError.super.<B>fmap(fn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> Try<B> flatMap(Fn1<? super A, ? extends Monad<B, Try<?>>> f) {\n","        return match(Try::failure, a -> f.apply(a).coerce());\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> Try<B> pure(B b) {\n","        return success(b);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> Try<B> zip(Applicative<Fn1<? super A, ? extends B>, Try<?>> appFn) {\n","        return MonadError.super.zip(appFn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> Lazy<Try<B>> lazyZip(Lazy<? extends Applicative<Fn1<? super A, ? extends B>, Try<?>>> lazyAppFn) {\n","        return match(f -> lazy(failure(f)),\n","                     s -> lazyAppFn.fmap(tryF -> tryF.<B>fmap(f -> f.apply(s)).coerce()));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> Try<B> discardL(Applicative<B, Try<?>> appB) {\n","        return MonadError.super.discardL(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> Try<A> discardR(Applicative<B, Try<?>> appB) {\n","        return MonadError.super.discardR(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> Try<B> trampolineM(Fn1<? super A, ? extends MonadRec<RecursiveResult<A, B>, Try<?>>> fn) {\n","        return flatMap(trampoline(a -> fn.apply(a).<Try<RecursiveResult<A, B>>>coerce().match(\n","                t -> terminate(failure(t)),\n","                aOrB -> aOrB.fmap(Try::success)\n","        )));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    @SuppressWarnings(\"unchecked\")\n","    public <B, App extends Applicative<?, App>, TravB extends Traversable<B, Try<?>>,\n","            AppTrav extends Applicative<TravB, App>> AppTrav traverse(Fn1<? super A, ? extends Applicative<B, App>> fn,\n","                                                                      Fn1<? super TravB, ? extends AppTrav> pure) {\n","        return match(t -> pure.apply((TravB) failure(t)),\n","                     a -> fn.apply(a).fmap(Try::success).<TravB>fmap(Applicative::coerce).coerce());\n","    }\n","\n","    /**\n","     * Static factory method for creating a success value.\n","     *\n","     * @param a   the wrapped value\n","     * @param <A> the success parameter type\n","     * @return a success value of a\n","     */\n","    public static <A> Try<A> success(A a) {\n","        return new Success<>(a);\n","    }\n","\n","    /**\n","     * Static factory method for creating a failure value.\n","     *\n","     * @param t   the {@link Throwable}\n","     * @param <A> the success parameter type\n","     * @return a failure value of t\n","     */\n","    public static <A> Try<A> failure(Throwable t) {\n","        return new Failure<>(t);\n","    }\n","\n","    /**\n","     * Execute <code>supplier</code>, returning a success <code>A</code> or a failure of the thrown {@link Throwable}.\n","     *\n","     * @param supplier the supplier\n","     * @param <A>      the possible success type\n","     * @return a new {@link Try} around either a successful A result or the thrown {@link Throwable}\n","     */\n","    public static <A> Try<A> trying(Fn0<? extends A> supplier) {\n","        try {\n","            return success(supplier.apply());\n","        } catch (Throwable t) {\n","            return failure(t);\n","        }\n","    }\n","\n","    /**\n","     * Execute <code>runnable</code>, returning a success {@link Unit} or a failure of the thrown {@link Throwable}.\n","     *\n","     * @param sideEffect the runnable\n","     * @return a new {@link Try} around either a successful {@link Unit} result or the thrown {@link Throwable}\n","     */\n","    public static Try<Unit> trying(SideEffect sideEffect) {\n","        return trying(() -> {\n","            IO.io(sideEffect).unsafePerformIO();\n","            return UNIT;\n","        });\n","    }\n","\n","    /**\n","     * Given a <code>{@link Fn0}&lt;{@link AutoCloseable}&gt;</code> <code>aSupplier</code> and an {@link Fn1}\n","     * <code>fn</code>, apply <code>fn</code> to the result of <code>aSupplier</code>, ensuring that the result has its\n","     * {@link AutoCloseable#close() close} method invoked, regardless of the outcome.\n","     * <p>\n","     * If the resource creation process throws, the function body throws, or the\n","     * {@link AutoCloseable#close() close method} throws, the result is a failure. If both the function body and the\n","     * {@link AutoCloseable#close() close method} throw, the result is a failure over the function body\n","     * {@link Throwable} with the {@link AutoCloseable#close() close method} {@link Throwable} added as a\n","     * {@link Throwable#addSuppressed(Throwable) suppressed} {@link Throwable}. If only the\n","     * {@link AutoCloseable#close() close method} throws, the result is a failure over that {@link Throwable}.\n","     * <p>\n","     * Note that <code>withResources</code> calls can be nested, in which case all of the above specified exception\n","     * handling applies, where closing the previously created resource is considered part of the body of the next\n","     * <code>withResources</code> calls, and {@link Throwable Throwables} are considered suppressed in the same manner.\n","     * Additionally, {@link AutoCloseable#close() close methods} are invoked in the inverse order of resource creation.\n","     * <p>\n","     * This is {@link Try}'s equivalent of\n","     * <a href=\"https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html\" target=\"_top\">\n","     * try-with-resources</a>, introduced in Java 7.\n","     *\n","     * @param fn0 the resource supplier\n","     * @param fn  the function body\n","     * @param <A> the resource type\n","     * @param <B> the function return type\n","     * @return a {@link Try} representing the result of the function's application to the resource\n","     */\n","    @SuppressWarnings(\"try\")\n","    public static <A extends AutoCloseable, B> Try<B> withResources(\n","            Fn0<? extends A> fn0,\n","            Fn1<? super A, ? extends Try<? extends B>> fn) {\n","        return trying(() -> {\n","            try (A resource = fn0.apply()) {\n","                return fn.apply(resource).<B>fmap(upcast());\n","            }\n","        }).flatMap(id());\n","    }\n","\n","    /**\n","     * Convenience overload of {@link Try#withResources(Fn0, Fn1) withResources} that cascades dependent resource\n","     * creation via nested calls.\n","     *\n","     * @param fn0 the first resource supplier\n","     * @param bFn the dependent resource function\n","     * @param fn  the function body\n","     * @param <A> the first resource type\n","     * @param <B> the second resource type\n","     * @param <C> the function return type\n","     * @return a {@link Try} representing the result of the function's application to the dependent resource\n","     */\n","    public static <A extends AutoCloseable, B extends AutoCloseable, C> Try<C> withResources(\n","            Fn0<? extends A> fn0,\n","            Fn1<? super A, ? extends B> bFn,\n","            Fn1<? super B, ? extends Try<? extends C>> fn) {\n","        return withResources(fn0, a -> withResources(() -> bFn.apply(a), fn::apply));\n","    }\n","\n","    /**\n","     * Convenience overload of {@link Try#withResources(Fn0, Fn1, Fn1) withResources} that\n","     * cascades\n","     * two dependent resource creations via nested calls.\n","     *\n","     * @param fn0 the first resource supplier\n","     * @param bFn the second resource function\n","     * @param cFn the final resource function\n","     * @param fn  the function body\n","     * @param <A> the first resource type\n","     * @param <B> the second resource type\n","     * @param <C> the final resource type\n","     * @param <D> the function return type\n","     * @return a {@link Try} representing the result of the function's application to the final dependent resource\n","     */\n","    public static <A extends AutoCloseable, B extends AutoCloseable, C extends AutoCloseable, D> Try<D> withResources(\n","            Fn0<? extends A> fn0,\n","            Fn1<? super A, ? extends B> bFn,\n","            Fn1<? super B, ? extends C> cFn,\n","            Fn1<? super C, ? extends Try<? extends D>> fn) {\n","        return withResources(fn0, bFn, b -> withResources(() -> cFn.apply(b), fn::apply));\n","    }\n","\n","    /**\n","     * The canonical {@link Pure} instance for {@link Try}.\n","     *\n","     * @return the {@link Pure} instance\n","     */\n","    public static Pure<Try<?>> pureTry() {\n","        return Try::success;\n","    }\n","\n","    private static final class Failure<A> extends Try<A> {\n","        private final Throwable t;\n","\n","        private Failure(Throwable t) {\n","            this.t = t;\n","        }\n","\n","        @Override\n","        public <T extends Throwable> A orThrow(Fn1<? super Throwable, ? extends T> fn) throws T {\n","            throw fn.apply(t);\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super Throwable, ? extends R> aFn, Fn1<? super A, ? extends R> bFn) {\n","            return aFn.apply(t);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof Failure && Objects.equals(t, ((Failure) other).t);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(t);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Failure{\" +\n","                    \"t=\" + t +\n","                    '}';\n","        }\n","    }\n","\n","    private static final class Success<A> extends Try<A> {\n","        private final A a;\n","\n","        private Success(A a) {\n","            this.a = a;\n","        }\n","\n","        @Override\n","        public <T extends Throwable> A orThrow(Fn1<? super Throwable, ? extends T> fn) {\n","            return a;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super Throwable, ? extends R> aFn, Fn1<? super A, ? extends R> bFn) {\n","            return bFn.apply(a);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof Success && Objects.equals(a, ((Success) other).a);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(a);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Success{\" +\n","                    \"a=\" + a +\n","                    '}';\n","        }\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.adt;\n","\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.framework.Subjects;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Rule;\n","import org.junit.Test;\n","import org.junit.rules.ExpectedException;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.ApplicativeLaws;\n","import testsupport.traits.FunctorLaws;\n","import testsupport.traits.MonadLaws;\n","import testsupport.traits.MonadRecLaws;\n","import testsupport.traits.TraversableLaws;\n","\n","import java.io.IOException;\n","import java.util.ArrayList;\n","import java.util.List;\n","import java.util.concurrent.atomic.AtomicBoolean;\n","import java.util.concurrent.atomic.AtomicInteger;\n","\n","import static com.jnape.palatable.lambda.adt.Either.left;\n","import static com.jnape.palatable.lambda.adt.Either.right;\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","import static com.jnape.palatable.lambda.adt.Try.failure;\n","import static com.jnape.palatable.lambda.adt.Try.pureTry;\n","import static com.jnape.palatable.lambda.adt.Try.success;\n","import static com.jnape.palatable.lambda.adt.Try.trying;\n","import static com.jnape.palatable.lambda.adt.Try.withResources;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Id.id;\n","import static com.jnape.palatable.lambda.functor.builtin.Lazy.lazy;\n","import static com.jnape.palatable.traitor.framework.Subjects.subjects;\n","import static java.util.Arrays.asList;\n","import static org.hamcrest.CoreMatchers.equalTo;\n","import static org.hamcrest.CoreMatchers.instanceOf;\n","import static org.junit.Assert.assertArrayEquals;\n","import static org.junit.Assert.assertEquals;\n","import static org.junit.Assert.assertThat;\n","import static org.junit.Assert.assertTrue;\n","import static org.junit.Assert.fail;\n","import static testsupport.assertion.MonadErrorAssert.assertLaws;\n","import static testsupport.matchers.EitherMatcher.isLeftThat;\n","\n","@RunWith(Traits.class)\n","public class TryTest {\n","\n","    @Rule public ExpectedException thrown = ExpectedException.none();\n","\n","    @TestTraits({FunctorLaws.class, ApplicativeLaws.class, MonadLaws.class, TraversableLaws.class, MonadRecLaws.class})\n","    public Subjects<Try<Integer>> testSubject() {\n","        return subjects(failure(new IllegalStateException()), success(1));\n","    }\n","\n","    @Test\n","    public void monadError() {\n","        assertLaws(subjects(failure(new IllegalStateException(\"a\")),\n","                            success(1)),\n","                   new IOException(\"bar\"),\n","                   t -> success(t.getMessage().length()));\n","    }\n","\n","    @Test\n","    public void catchingWithGenericPredicate() {\n","        Try<String> caught = Try.<String>failure(new RuntimeException())\n","                .catching(__ -> false, r -> \"caught first\")\n","                .catching(__ -> true, r -> \"caught second\");\n","\n","        assertEquals(success(\"caught second\"), caught);\n","    }\n","\n","    @Test\n","    public void catchingIsANoOpForSuccess() {\n","        Try<String> caught = success(\"success\")\n","                .catching(__ -> true, __ -> \"caught\");\n","\n","        assertEquals(success(\"success\"), caught);\n","    }\n","\n","    @Test\n","    public void firstMatchingCatchBlockWins() {\n","        Try<String> caught = Try.<String>failure(new IllegalStateException())\n","                .catching(__ -> true, __ -> \"first\")\n","                .catching(__ -> true, __ -> \"second\");\n","\n","        assertEquals(success(\"first\"), caught);\n","    }\n","\n","    @Test\n","    public void catchBasedOnExceptionType() {\n","        Try<String> caught = Try.<String>failure(new IllegalStateException())\n","                .catching(IllegalArgumentException.class, __ -> \"illegal argument exception\")\n","                .catching(IllegalStateException.class, __ -> \"illegal state exception\")\n","                .catching(RuntimeException.class, __ -> \"runtime exception\");\n","\n","        assertEquals(success(\"illegal state exception\"), caught);\n","    }\n","\n","    @Test\n","    public void ensureIfSuccess() {\n","        AtomicInteger invocations = new AtomicInteger(0);\n","        success(1).ensuring((invocations::incrementAndGet));\n","        assertEquals(1, invocations.get());\n","    }\n","\n","    @Test\n","    public void ensureIfFailure() {\n","        AtomicInteger invocations = new AtomicInteger(0);\n","        Try.failure(new IllegalStateException()).ensuring((invocations::incrementAndGet));\n","        assertEquals(1, invocations.get());\n","    }\n","\n","    @Test\n","    public void exceptionThrownInEnsuringBlockIsCaught() {\n","        IllegalStateException expected = new IllegalStateException();\n","        assertEquals(Try.failure(expected), success(1).ensuring(() -> {throw expected;}));\n","\n","        Either<Throwable, Object> actual = Try.failure(new IllegalArgumentException())\n","                .ensuring(() -> { throw expected;})\n","                .toEither();\n","        assertThat(actual, isLeftThat(instanceOf(IllegalArgumentException.class)));\n","        assertEquals(left(expected), actual.biMapL(t -> t.getSuppressed()[0]));\n","    }\n","\n","    @Test\n","    public void forfeitEnsuresFailure() {\n","        IllegalStateException expected = new IllegalStateException();\n","        assertEquals(expected, Try.failure(expected).forfeit(__ -> new IllegalArgumentException()));\n","        assertEquals(expected, Try.<Object>success(1).forfeit(__ -> expected));\n","    }\n","\n","    @Test\n","    public void recoverEnsuresSuccess() {\n","        assertEquals((Integer) 1, Try.success(1).recover(constantly(1)));\n","        assertEquals((Integer) 1, Try.<Integer>failure(new IllegalArgumentException()).recover(constantly(1)));\n","    }\n","\n","    @Test\n","    public void orThrow() throws Throwable {\n","        assertEquals((Integer) 1, trying(() -> 1).orThrow());\n","\n","        Throwable expected = new Exception(\"expected\");\n","        thrown.expect(equalTo(expected));\n","        trying(() -> {throw expected;}).orThrow();\n","    }\n","\n","    @Test\n","    public void toMaybe() {\n","        assertEquals(just(\"foo\"), success(\"foo\").toMaybe());\n","        assertEquals(nothing(), Try.failure(new IllegalStateException()).toMaybe());\n","    }\n","\n","    @Test\n","    public void toEither() {\n","        assertEquals(right(\"foo\"), success(\"foo\").toEither());\n","\n","        IllegalStateException exception = new IllegalStateException();\n","        assertEquals(left(exception), Try.failure(exception).toEither());\n","    }\n","\n","    @Test\n","    public void toEitherWithLeftMappingFunction() {\n","        assertEquals(right(1), success(1).toEither(__ -> \"fail\"));\n","        assertEquals(left(\"fail\"), Try.failure(new IllegalStateException(\"fail\")).toEither(Throwable::getMessage));\n","    }\n","\n","    @Test\n","    public void tryingCatchesAnyThrowableThrownDuringEvaluation() {\n","        IllegalStateException expected = new IllegalStateException();\n","        assertEquals(failure(expected), trying(() -> {throw expected;}));\n","\n","        assertEquals(success(\"foo\"), trying(() -> \"foo\"));\n","    }\n","\n","    @Test\n","    public void withResourcesCleansUpAutoCloseableInSuccessCase() {\n","        AtomicBoolean closed = new AtomicBoolean(false);\n","        assertEquals(success(1), withResources(() -> (AutoCloseable) () -> closed.set(true), resource -> success(1)));\n","        assertTrue(closed.get());\n","    }\n","\n","    @Test\n","    public void withResourcesCleansUpAutoCloseableInFailureCase() {\n","        AtomicBoolean    closed    = new AtomicBoolean(false);\n","        RuntimeException exception = new RuntimeException();\n","        assertEquals(Try.failure(exception), withResources(() -> (AutoCloseable) () -> closed.set(true),\n","                                                           resource -> { throw exception; }));\n","        assertTrue(closed.get());\n","    }\n","\n","    @Test\n","    public void withResourcesExposesResourceCreationFailure() {\n","        IOException ioException = new IOException();\n","        assertEquals(Try.failure(ioException), withResources(() -> { throw ioException; }, resource -> success(1)));\n","    }\n","\n","    @Test\n","    public void withResourcesExposesResourceCloseFailure() {\n","        IOException ioException = new IOException();\n","        assertEquals(Try.failure(ioException), withResources(() -> (AutoCloseable) () -> { throw ioException; },\n","                                                             resource -> success(1)));\n","    }\n","\n","    @Test\n","    public void withResourcesPreservesSuppressedExceptionThrownDuringClose() {\n","        RuntimeException rootException     = new RuntimeException();\n","        IOException      nestedIOException = new IOException();\n","        Try<Throwable> failure = withResources(() -> (AutoCloseable) () -> { throw nestedIOException; },\n","                                               resource -> { throw rootException; });\n","        Throwable thrown = failure.recover(id());\n","\n","        assertEquals(thrown, rootException);\n","        assertArrayEquals(new Throwable[]{nestedIOException}, thrown.getSuppressed());\n","    }\n","\n","    @Test\n","    public void cascadingWithResourcesClosesInInverseOrder() {\n","        List<String> closeMessages = new ArrayList<>();\n","        assertEquals(success(1), withResources(() -> (AutoCloseable) () -> closeMessages.add(\"close a\"),\n","                                               a -> () -> closeMessages.add(\"close b\"),\n","                                               b -> () -> closeMessages.add(\"close c\"),\n","                                               c -> success(1)));\n","        assertEquals(asList(\"close c\", \"close b\", \"close a\"), closeMessages);\n","    }\n","\n","    @Test\n","    public void lazyZip() {\n","        assertEquals(success(2), success(1).lazyZip(lazy(success(x -> x + 1))).value());\n","        IllegalStateException e = new IllegalStateException();\n","        assertEquals(failure(e), failure(e).lazyZip(lazy(() -> {\n","            throw new AssertionError();\n","        })).value());\n","    }\n","\n","    @Test\n","    public void orThrowCanStillThrowCheckedExceptions() {\n","        try {\n","            Try.trying(() -> {\n","                throw new RuntimeException();\n","            }).<IOException>orThrow();\n","            fail(\"Expected RuntimeException to be thrown, but nothing was\");\n","        } catch (IOException ioException) {\n","            fail(\"Expected thrown exception to not be IOException, but merely proving it can still be caught\");\n","        } catch (Exception expected) {\n","        }\n","    }\n","\n","    @Test\n","    public void orThrowCanTransformFirst() {\n","        try {\n","            Try.trying(() -> {\n","                throw new IllegalStateException();\n","            }).<Exception>orThrow(IllegalArgumentException::new);\n","            fail(\"Expected RuntimeException to be thrown, but nothing was\");\n","        } catch (IllegalStateException ioException) {\n","            fail(\"Expected thrown exception to not be IllegalStateException, but it was\");\n","        } catch (IllegalArgumentException expected) {\n","        } catch (Exception e) {\n","            fail(\"A different exception altogether was thrown.\");\n","        }\n","    }\n","\n","    @Test\n","    public void staticPure() {\n","        Try<Integer> try_ = pureTry().apply(1);\n","        assertEquals(success(1), try_);\n","    }\n","}"],"method_lines_dic":{"Try::::catching(java.lang.Class<S>,com.jnape.palatable.lambda.functions.Fn1<? super S, ? extends A>)":[54,57],"Try::::catching(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends A>)":[66,69],"Try::::ensuring(com.jnape.palatable.lambda.functions.specialized.SideEffect)":[84,92],"Try::::recover(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends A>)":[101,103],"Try::::forfeit(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Throwable>)":[112,114],"Try::::orThrow()":[123,129],"Try::::orThrow(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends T>)":[140,140],"Try::::toMaybe()":[148,150],"Try::::toEither()":[158,160],"Try::::toEither(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends L>)":[170,172],"Try::::throwError(java.lang.Throwable)":[177,180],"Try::::catchError(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends com.jnape.palatable.lambda.monad.Monad<A, com.jnape.palatable.lambda.adt.Try<?>>>)":[185,188],"Try::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)":[193,196],"Try::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.adt.Try<?>>>)":[201,204],"Try::::pure(B)":[209,212],"Try::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.adt.Try<?>>)":[217,220],"Try::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.adt.Try<?>>>)":[225,229],"Try::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.adt.Try<?>>)":[234,237],"Try::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.adt.Try<?>>)":[242,245],"Try::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.adt.Try<?>>>)":[250,256],"Try::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)":[261,268],"Try::::success(A)":[277,279],"Try::::failure(java.lang.Throwable)":[288,290],"Try::::trying(com.jnape.palatable.lambda.functions.Fn0<? extends A>)":[299,305],"Try::::trying(com.jnape.palatable.lambda.functions.specialized.SideEffect)":[313,318],"Try::::withResources(com.jnape.palatable.lambda.functions.Fn0<? extends A>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.adt.Try<? extends B>>)":[347,356],"Try::::withResources(com.jnape.palatable.lambda.functions.Fn0<? extends A>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.adt.Try<? extends C>>)":[370,375],"Try::::withResources(com.jnape.palatable.lambda.functions.Fn0<? extends A>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.adt.Try<? extends D>>)":[392,398],"Try::::pureTry()":[405,407],"Try.Failure::::orThrow(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends T>)":[416,419],"Try.Failure::::match(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>)":[421,424],"Try.Failure::::equals(java.lang.Object)":[426,429],"Try.Failure::::hashCode()":[431,434],"Try.Failure::::toString()":[436,441],"Try.Success::::orThrow(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends T>)":[451,454],"Try.Success::::match(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>)":[456,459],"Try.Success::::equals(java.lang.Object)":[461,464],"Try.Success::::hashCode()":[466,469],"Try.Success::::toString()":[471,476]},"test_method_lines_dic":{"TryTest::::testSubject()":[51,54],"TryTest::::monadError()":[56,62],"TryTest::::catchingWithGenericPredicate()":[64,71],"TryTest::::catchingIsANoOpForSuccess()":[73,79],"TryTest::::firstMatchingCatchBlockWins()":[81,88],"TryTest::::catchBasedOnExceptionType()":[90,98],"TryTest::::ensureIfSuccess()":[100,105],"TryTest::::ensureIfFailure()":[107,112],"TryTest::::exceptionThrownInEnsuringBlockIsCaught()":[114,124],"TryTest::::forfeitEnsuresFailure()":[126,131],"TryTest::::recoverEnsuresSuccess()":[133,137],"TryTest::::orThrow()":[139,146],"TryTest::::toMaybe()":[148,152],"TryTest::::toEither()":[154,160],"TryTest::::toEitherWithLeftMappingFunction()":[162,166],"TryTest::::tryingCatchesAnyThrowableThrownDuringEvaluation()":[168,174],"TryTest::::withResourcesCleansUpAutoCloseableInSuccessCase()":[176,181],"TryTest::::withResourcesCleansUpAutoCloseableInFailureCase()":[183,190],"TryTest::::withResourcesExposesResourceCreationFailure()":[192,196],"TryTest::::withResourcesExposesResourceCloseFailure()":[198,203],"TryTest::::withResourcesPreservesSuppressedExceptionThrownDuringClose()":[205,215],"TryTest::::cascadingWithResourcesClosesInInverseOrder()":[217,225],"TryTest::::lazyZip()":[227,234],"TryTest::::orThrowCanStillThrowCheckedExceptions()":[236,247],"TryTest::::orThrowCanTransformFirst()":[249,262],"TryTest::::staticPure()":[264,268]},"reverse_method_lines_dic":{"54":"Try::::catching(java.lang.Class<S>,com.jnape.palatable.lambda.functions.Fn1<? super S, ? extends A>)","55":"Try::::catching(java.lang.Class<S>,com.jnape.palatable.lambda.functions.Fn1<? super S, ? extends A>)","56":"Try::::catching(java.lang.Class<S>,com.jnape.palatable.lambda.functions.Fn1<? super S, ? extends A>)","57":"Try::::catching(java.lang.Class<S>,com.jnape.palatable.lambda.functions.Fn1<? super S, ? extends A>)","66":"Try::::catching(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends A>)","67":"Try::::catching(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends A>)","68":"Try::::catching(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends A>)","69":"Try::::catching(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends A>)","84":"Try::::ensuring(com.jnape.palatable.lambda.functions.specialized.SideEffect)","85":"Try::::ensuring(com.jnape.palatable.lambda.functions.specialized.SideEffect)","86":"Try::::ensuring(com.jnape.palatable.lambda.functions.specialized.SideEffect)","87":"Try::::ensuring(com.jnape.palatable.lambda.functions.specialized.SideEffect)","88":"Try::::ensuring(com.jnape.palatable.lambda.functions.specialized.SideEffect)","89":"Try::::ensuring(com.jnape.palatable.lambda.functions.specialized.SideEffect)","90":"Try::::ensuring(com.jnape.palatable.lambda.functions.specialized.SideEffect)","91":"Try::::ensuring(com.jnape.palatable.lambda.functions.specialized.SideEffect)","92":"Try::::ensuring(com.jnape.palatable.lambda.functions.specialized.SideEffect)","101":"Try::::recover(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends A>)","102":"Try::::recover(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends A>)","103":"Try::::recover(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends A>)","112":"Try::::forfeit(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Throwable>)","113":"Try::::forfeit(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Throwable>)","114":"Try::::forfeit(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Throwable>)","123":"Try::::orThrow()","124":"Try::::orThrow()","125":"Try::::orThrow()","126":"Try::::orThrow()","127":"Try::::orThrow()","128":"Try::::orThrow()","129":"Try::::orThrow()","140":"Try::::orThrow(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends T>)","148":"Try::::toMaybe()","149":"Try::::toMaybe()","150":"Try::::toMaybe()","158":"Try::::toEither()","159":"Try::::toEither()","160":"Try::::toEither()","170":"Try::::toEither(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends L>)","171":"Try::::toEither(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends L>)","172":"Try::::toEither(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends L>)","177":"Try::::throwError(java.lang.Throwable)","178":"Try::::throwError(java.lang.Throwable)","179":"Try::::throwError(java.lang.Throwable)","180":"Try::::throwError(java.lang.Throwable)","185":"Try::::catchError(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends com.jnape.palatable.lambda.monad.Monad<A, com.jnape.palatable.lambda.adt.Try<?>>>)","186":"Try::::catchError(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends com.jnape.palatable.lambda.monad.Monad<A, com.jnape.palatable.lambda.adt.Try<?>>>)","187":"Try::::catchError(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends com.jnape.palatable.lambda.monad.Monad<A, com.jnape.palatable.lambda.adt.Try<?>>>)","188":"Try::::catchError(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends com.jnape.palatable.lambda.monad.Monad<A, com.jnape.palatable.lambda.adt.Try<?>>>)","193":"Try::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","194":"Try::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","195":"Try::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","196":"Try::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","201":"Try::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.adt.Try<?>>>)","202":"Try::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.adt.Try<?>>>)","203":"Try::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.adt.Try<?>>>)","204":"Try::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.adt.Try<?>>>)","209":"Try::::pure(B)","210":"Try::::pure(B)","211":"Try::::pure(B)","212":"Try::::pure(B)","217":"Try::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.adt.Try<?>>)","218":"Try::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.adt.Try<?>>)","219":"Try::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.adt.Try<?>>)","220":"Try::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.adt.Try<?>>)","225":"Try::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.adt.Try<?>>>)","226":"Try::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.adt.Try<?>>>)","227":"Try::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.adt.Try<?>>>)","228":"Try::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.adt.Try<?>>>)","229":"Try::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.adt.Try<?>>>)","234":"Try::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.adt.Try<?>>)","235":"Try::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.adt.Try<?>>)","236":"Try::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.adt.Try<?>>)","237":"Try::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.adt.Try<?>>)","242":"Try::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.adt.Try<?>>)","243":"Try::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.adt.Try<?>>)","244":"Try::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.adt.Try<?>>)","245":"Try::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.adt.Try<?>>)","250":"Try::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.adt.Try<?>>>)","251":"Try::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.adt.Try<?>>>)","252":"Try::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.adt.Try<?>>>)","253":"Try::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.adt.Try<?>>>)","254":"Try::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.adt.Try<?>>>)","255":"Try::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.adt.Try<?>>>)","256":"Try::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.adt.Try<?>>>)","261":"Try::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","262":"Try::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","263":"Try::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","264":"Try::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","265":"Try::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","266":"Try::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","267":"Try::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","268":"Try::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","277":"Try::::success(A)","278":"Try::::success(A)","279":"Try::::success(A)","288":"Try::::failure(java.lang.Throwable)","289":"Try::::failure(java.lang.Throwable)","290":"Try::::failure(java.lang.Throwable)","299":"Try::::trying(com.jnape.palatable.lambda.functions.Fn0<? extends A>)","300":"Try::::trying(com.jnape.palatable.lambda.functions.Fn0<? extends A>)","301":"Try::::trying(com.jnape.palatable.lambda.functions.Fn0<? extends A>)","302":"Try::::trying(com.jnape.palatable.lambda.functions.Fn0<? extends A>)","303":"Try::::trying(com.jnape.palatable.lambda.functions.Fn0<? extends A>)","304":"Try::::trying(com.jnape.palatable.lambda.functions.Fn0<? extends A>)","305":"Try::::trying(com.jnape.palatable.lambda.functions.Fn0<? extends A>)","313":"Try::::trying(com.jnape.palatable.lambda.functions.specialized.SideEffect)","314":"Try::::trying(com.jnape.palatable.lambda.functions.specialized.SideEffect)","315":"Try::::trying(com.jnape.palatable.lambda.functions.specialized.SideEffect)","316":"Try::::trying(com.jnape.palatable.lambda.functions.specialized.SideEffect)","317":"Try::::trying(com.jnape.palatable.lambda.functions.specialized.SideEffect)","318":"Try::::trying(com.jnape.palatable.lambda.functions.specialized.SideEffect)","347":"Try::::withResources(com.jnape.palatable.lambda.functions.Fn0<? extends A>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.adt.Try<? extends B>>)","348":"Try::::withResources(com.jnape.palatable.lambda.functions.Fn0<? extends A>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.adt.Try<? extends B>>)","349":"Try::::withResources(com.jnape.palatable.lambda.functions.Fn0<? extends A>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.adt.Try<? extends B>>)","350":"Try::::withResources(com.jnape.palatable.lambda.functions.Fn0<? extends A>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.adt.Try<? extends B>>)","351":"Try::::withResources(com.jnape.palatable.lambda.functions.Fn0<? extends A>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.adt.Try<? extends B>>)","352":"Try::::withResources(com.jnape.palatable.lambda.functions.Fn0<? extends A>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.adt.Try<? extends B>>)","353":"Try::::withResources(com.jnape.palatable.lambda.functions.Fn0<? extends A>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.adt.Try<? extends B>>)","354":"Try::::withResources(com.jnape.palatable.lambda.functions.Fn0<? extends A>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.adt.Try<? extends B>>)","355":"Try::::withResources(com.jnape.palatable.lambda.functions.Fn0<? extends A>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.adt.Try<? extends B>>)","356":"Try::::withResources(com.jnape.palatable.lambda.functions.Fn0<? extends A>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.adt.Try<? extends B>>)","370":"Try::::withResources(com.jnape.palatable.lambda.functions.Fn0<? extends A>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.adt.Try<? extends C>>)","371":"Try::::withResources(com.jnape.palatable.lambda.functions.Fn0<? extends A>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.adt.Try<? extends C>>)","372":"Try::::withResources(com.jnape.palatable.lambda.functions.Fn0<? extends A>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.adt.Try<? extends C>>)","373":"Try::::withResources(com.jnape.palatable.lambda.functions.Fn0<? extends A>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.adt.Try<? extends C>>)","374":"Try::::withResources(com.jnape.palatable.lambda.functions.Fn0<? extends A>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.adt.Try<? extends C>>)","375":"Try::::withResources(com.jnape.palatable.lambda.functions.Fn0<? extends A>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.adt.Try<? extends C>>)","392":"Try::::withResources(com.jnape.palatable.lambda.functions.Fn0<? extends A>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.adt.Try<? extends D>>)","393":"Try::::withResources(com.jnape.palatable.lambda.functions.Fn0<? extends A>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.adt.Try<? extends D>>)","394":"Try::::withResources(com.jnape.palatable.lambda.functions.Fn0<? extends A>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.adt.Try<? extends D>>)","395":"Try::::withResources(com.jnape.palatable.lambda.functions.Fn0<? extends A>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.adt.Try<? extends D>>)","396":"Try::::withResources(com.jnape.palatable.lambda.functions.Fn0<? extends A>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.adt.Try<? extends D>>)","397":"Try::::withResources(com.jnape.palatable.lambda.functions.Fn0<? extends A>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.adt.Try<? extends D>>)","398":"Try::::withResources(com.jnape.palatable.lambda.functions.Fn0<? extends A>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.adt.Try<? extends D>>)","405":"Try::::pureTry()","406":"Try::::pureTry()","407":"Try::::pureTry()","416":"Try.Failure::::orThrow(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends T>)","417":"Try.Failure::::orThrow(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends T>)","418":"Try.Failure::::orThrow(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends T>)","419":"Try.Failure::::orThrow(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends T>)","421":"Try.Failure::::match(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>)","422":"Try.Failure::::match(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>)","423":"Try.Failure::::match(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>)","424":"Try.Failure::::match(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>)","426":"Try.Failure::::equals(java.lang.Object)","427":"Try.Failure::::equals(java.lang.Object)","428":"Try.Failure::::equals(java.lang.Object)","429":"Try.Failure::::equals(java.lang.Object)","431":"Try.Failure::::hashCode()","432":"Try.Failure::::hashCode()","433":"Try.Failure::::hashCode()","434":"Try.Failure::::hashCode()","436":"Try.Failure::::toString()","437":"Try.Failure::::toString()","438":"Try.Failure::::toString()","439":"Try.Failure::::toString()","440":"Try.Failure::::toString()","441":"Try.Failure::::toString()","451":"Try.Success::::orThrow(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends T>)","452":"Try.Success::::orThrow(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends T>)","453":"Try.Success::::orThrow(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends T>)","454":"Try.Success::::orThrow(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends T>)","456":"Try.Success::::match(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>)","457":"Try.Success::::match(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>)","458":"Try.Success::::match(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>)","459":"Try.Success::::match(com.jnape.palatable.lambda.functions.Fn1<? super java.lang.Throwable, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>)","461":"Try.Success::::equals(java.lang.Object)","462":"Try.Success::::equals(java.lang.Object)","463":"Try.Success::::equals(java.lang.Object)","464":"Try.Success::::equals(java.lang.Object)","466":"Try.Success::::hashCode()","467":"Try.Success::::hashCode()","468":"Try.Success::::hashCode()","469":"Try.Success::::hashCode()","471":"Try.Success::::toString()","472":"Try.Success::::toString()","473":"Try.Success::::toString()","474":"Try.Success::::toString()","475":"Try.Success::::toString()","476":"Try.Success::::toString()"},"test_reverse_method_lines_dic":{"51":"TryTest::::testSubject()","52":"TryTest::::testSubject()","53":"TryTest::::testSubject()","54":"TryTest::::testSubject()","56":"TryTest::::monadError()","57":"TryTest::::monadError()","58":"TryTest::::monadError()","59":"TryTest::::monadError()","60":"TryTest::::monadError()","61":"TryTest::::monadError()","62":"TryTest::::monadError()","64":"TryTest::::catchingWithGenericPredicate()","65":"TryTest::::catchingWithGenericPredicate()","66":"TryTest::::catchingWithGenericPredicate()","67":"TryTest::::catchingWithGenericPredicate()","68":"TryTest::::catchingWithGenericPredicate()","69":"TryTest::::catchingWithGenericPredicate()","70":"TryTest::::catchingWithGenericPredicate()","71":"TryTest::::catchingWithGenericPredicate()","73":"TryTest::::catchingIsANoOpForSuccess()","74":"TryTest::::catchingIsANoOpForSuccess()","75":"TryTest::::catchingIsANoOpForSuccess()","76":"TryTest::::catchingIsANoOpForSuccess()","77":"TryTest::::catchingIsANoOpForSuccess()","78":"TryTest::::catchingIsANoOpForSuccess()","79":"TryTest::::catchingIsANoOpForSuccess()","81":"TryTest::::firstMatchingCatchBlockWins()","82":"TryTest::::firstMatchingCatchBlockWins()","83":"TryTest::::firstMatchingCatchBlockWins()","84":"TryTest::::firstMatchingCatchBlockWins()","85":"TryTest::::firstMatchingCatchBlockWins()","86":"TryTest::::firstMatchingCatchBlockWins()","87":"TryTest::::firstMatchingCatchBlockWins()","88":"TryTest::::firstMatchingCatchBlockWins()","90":"TryTest::::catchBasedOnExceptionType()","91":"TryTest::::catchBasedOnExceptionType()","92":"TryTest::::catchBasedOnExceptionType()","93":"TryTest::::catchBasedOnExceptionType()","94":"TryTest::::catchBasedOnExceptionType()","95":"TryTest::::catchBasedOnExceptionType()","96":"TryTest::::catchBasedOnExceptionType()","97":"TryTest::::catchBasedOnExceptionType()","98":"TryTest::::catchBasedOnExceptionType()","100":"TryTest::::ensureIfSuccess()","101":"TryTest::::ensureIfSuccess()","102":"TryTest::::ensureIfSuccess()","103":"TryTest::::ensureIfSuccess()","104":"TryTest::::ensureIfSuccess()","105":"TryTest::::ensureIfSuccess()","107":"TryTest::::ensureIfFailure()","108":"TryTest::::ensureIfFailure()","109":"TryTest::::ensureIfFailure()","110":"TryTest::::ensureIfFailure()","111":"TryTest::::ensureIfFailure()","112":"TryTest::::ensureIfFailure()","114":"TryTest::::exceptionThrownInEnsuringBlockIsCaught()","115":"TryTest::::exceptionThrownInEnsuringBlockIsCaught()","116":"TryTest::::exceptionThrownInEnsuringBlockIsCaught()","117":"TryTest::::exceptionThrownInEnsuringBlockIsCaught()","118":"TryTest::::exceptionThrownInEnsuringBlockIsCaught()","119":"TryTest::::exceptionThrownInEnsuringBlockIsCaught()","120":"TryTest::::exceptionThrownInEnsuringBlockIsCaught()","121":"TryTest::::exceptionThrownInEnsuringBlockIsCaught()","122":"TryTest::::exceptionThrownInEnsuringBlockIsCaught()","123":"TryTest::::exceptionThrownInEnsuringBlockIsCaught()","124":"TryTest::::exceptionThrownInEnsuringBlockIsCaught()","126":"TryTest::::forfeitEnsuresFailure()","127":"TryTest::::forfeitEnsuresFailure()","128":"TryTest::::forfeitEnsuresFailure()","129":"TryTest::::forfeitEnsuresFailure()","130":"TryTest::::forfeitEnsuresFailure()","131":"TryTest::::forfeitEnsuresFailure()","133":"TryTest::::recoverEnsuresSuccess()","134":"TryTest::::recoverEnsuresSuccess()","135":"TryTest::::recoverEnsuresSuccess()","136":"TryTest::::recoverEnsuresSuccess()","137":"TryTest::::recoverEnsuresSuccess()","139":"TryTest::::orThrow()","140":"TryTest::::orThrow()","141":"TryTest::::orThrow()","142":"TryTest::::orThrow()","143":"TryTest::::orThrow()","144":"TryTest::::orThrow()","145":"TryTest::::orThrow()","146":"TryTest::::orThrow()","148":"TryTest::::toMaybe()","149":"TryTest::::toMaybe()","150":"TryTest::::toMaybe()","151":"TryTest::::toMaybe()","152":"TryTest::::toMaybe()","154":"TryTest::::toEither()","155":"TryTest::::toEither()","156":"TryTest::::toEither()","157":"TryTest::::toEither()","158":"TryTest::::toEither()","159":"TryTest::::toEither()","160":"TryTest::::toEither()","162":"TryTest::::toEitherWithLeftMappingFunction()","163":"TryTest::::toEitherWithLeftMappingFunction()","164":"TryTest::::toEitherWithLeftMappingFunction()","165":"TryTest::::toEitherWithLeftMappingFunction()","166":"TryTest::::toEitherWithLeftMappingFunction()","168":"TryTest::::tryingCatchesAnyThrowableThrownDuringEvaluation()","169":"TryTest::::tryingCatchesAnyThrowableThrownDuringEvaluation()","170":"TryTest::::tryingCatchesAnyThrowableThrownDuringEvaluation()","171":"TryTest::::tryingCatchesAnyThrowableThrownDuringEvaluation()","172":"TryTest::::tryingCatchesAnyThrowableThrownDuringEvaluation()","173":"TryTest::::tryingCatchesAnyThrowableThrownDuringEvaluation()","174":"TryTest::::tryingCatchesAnyThrowableThrownDuringEvaluation()","176":"TryTest::::withResourcesCleansUpAutoCloseableInSuccessCase()","177":"TryTest::::withResourcesCleansUpAutoCloseableInSuccessCase()","178":"TryTest::::withResourcesCleansUpAutoCloseableInSuccessCase()","179":"TryTest::::withResourcesCleansUpAutoCloseableInSuccessCase()","180":"TryTest::::withResourcesCleansUpAutoCloseableInSuccessCase()","181":"TryTest::::withResourcesCleansUpAutoCloseableInSuccessCase()","183":"TryTest::::withResourcesCleansUpAutoCloseableInFailureCase()","184":"TryTest::::withResourcesCleansUpAutoCloseableInFailureCase()","185":"TryTest::::withResourcesCleansUpAutoCloseableInFailureCase()","186":"TryTest::::withResourcesCleansUpAutoCloseableInFailureCase()","187":"TryTest::::withResourcesCleansUpAutoCloseableInFailureCase()","188":"TryTest::::withResourcesCleansUpAutoCloseableInFailureCase()","189":"TryTest::::withResourcesCleansUpAutoCloseableInFailureCase()","190":"TryTest::::withResourcesCleansUpAutoCloseableInFailureCase()","192":"TryTest::::withResourcesExposesResourceCreationFailure()","193":"TryTest::::withResourcesExposesResourceCreationFailure()","194":"TryTest::::withResourcesExposesResourceCreationFailure()","195":"TryTest::::withResourcesExposesResourceCreationFailure()","196":"TryTest::::withResourcesExposesResourceCreationFailure()","198":"TryTest::::withResourcesExposesResourceCloseFailure()","199":"TryTest::::withResourcesExposesResourceCloseFailure()","200":"TryTest::::withResourcesExposesResourceCloseFailure()","201":"TryTest::::withResourcesExposesResourceCloseFailure()","202":"TryTest::::withResourcesExposesResourceCloseFailure()","203":"TryTest::::withResourcesExposesResourceCloseFailure()","205":"TryTest::::withResourcesPreservesSuppressedExceptionThrownDuringClose()","206":"TryTest::::withResourcesPreservesSuppressedExceptionThrownDuringClose()","207":"TryTest::::withResourcesPreservesSuppressedExceptionThrownDuringClose()","208":"TryTest::::withResourcesPreservesSuppressedExceptionThrownDuringClose()","209":"TryTest::::withResourcesPreservesSuppressedExceptionThrownDuringClose()","210":"TryTest::::withResourcesPreservesSuppressedExceptionThrownDuringClose()","211":"TryTest::::withResourcesPreservesSuppressedExceptionThrownDuringClose()","212":"TryTest::::withResourcesPreservesSuppressedExceptionThrownDuringClose()","213":"TryTest::::withResourcesPreservesSuppressedExceptionThrownDuringClose()","214":"TryTest::::withResourcesPreservesSuppressedExceptionThrownDuringClose()","215":"TryTest::::withResourcesPreservesSuppressedExceptionThrownDuringClose()","217":"TryTest::::cascadingWithResourcesClosesInInverseOrder()","218":"TryTest::::cascadingWithResourcesClosesInInverseOrder()","219":"TryTest::::cascadingWithResourcesClosesInInverseOrder()","220":"TryTest::::cascadingWithResourcesClosesInInverseOrder()","221":"TryTest::::cascadingWithResourcesClosesInInverseOrder()","222":"TryTest::::cascadingWithResourcesClosesInInverseOrder()","223":"TryTest::::cascadingWithResourcesClosesInInverseOrder()","224":"TryTest::::cascadingWithResourcesClosesInInverseOrder()","225":"TryTest::::cascadingWithResourcesClosesInInverseOrder()","227":"TryTest::::lazyZip()","228":"TryTest::::lazyZip()","229":"TryTest::::lazyZip()","230":"TryTest::::lazyZip()","231":"TryTest::::lazyZip()","232":"TryTest::::lazyZip()","233":"TryTest::::lazyZip()","234":"TryTest::::lazyZip()","236":"TryTest::::orThrowCanStillThrowCheckedExceptions()","237":"TryTest::::orThrowCanStillThrowCheckedExceptions()","238":"TryTest::::orThrowCanStillThrowCheckedExceptions()","239":"TryTest::::orThrowCanStillThrowCheckedExceptions()","240":"TryTest::::orThrowCanStillThrowCheckedExceptions()","241":"TryTest::::orThrowCanStillThrowCheckedExceptions()","242":"TryTest::::orThrowCanStillThrowCheckedExceptions()","243":"TryTest::::orThrowCanStillThrowCheckedExceptions()","244":"TryTest::::orThrowCanStillThrowCheckedExceptions()","245":"TryTest::::orThrowCanStillThrowCheckedExceptions()","246":"TryTest::::orThrowCanStillThrowCheckedExceptions()","247":"TryTest::::orThrowCanStillThrowCheckedExceptions()","249":"TryTest::::orThrowCanTransformFirst()","250":"TryTest::::orThrowCanTransformFirst()","251":"TryTest::::orThrowCanTransformFirst()","252":"TryTest::::orThrowCanTransformFirst()","253":"TryTest::::orThrowCanTransformFirst()","254":"TryTest::::orThrowCanTransformFirst()","255":"TryTest::::orThrowCanTransformFirst()","256":"TryTest::::orThrowCanTransformFirst()","257":"TryTest::::orThrowCanTransformFirst()","258":"TryTest::::orThrowCanTransformFirst()","259":"TryTest::::orThrowCanTransformFirst()","260":"TryTest::::orThrowCanTransformFirst()","261":"TryTest::::orThrowCanTransformFirst()","262":"TryTest::::orThrowCanTransformFirst()","264":"TryTest::::staticPure()","265":"TryTest::::staticPure()","266":"TryTest::::staticPure()","267":"TryTest::::staticPure()","268":"TryTest::::staticPure()"},"tests":[{"test_lines":[51,54],"covered_lines":[43,44,278,289,412,413,414,447,448,449]},{"test_lines":[56,62],"covered_lines":[43,44,179,187,278,289,412,413,414,423,447,448,449,463]},{"test_lines":[64,71],"covered_lines":[43,44,68,278,289,412,413,414,423,447,448,449,463]},{"test_lines":[73,79],"covered_lines":[43,44,68,278,289,412,413,414,447,448,449,458,463]},{"test_lines":[81,88],"covered_lines":[43,44,68,278,289,412,413,414,423,447,448,449,458,463]},{"test_lines":[90,98],"covered_lines":[43,44,56,68,278,289,412,413,414,423,447,448,449,458,463]},{"test_lines":[100,105],"covered_lines":[43,44,85,91,195,203,211,278,289,301,314,315,316,412,413,414,447,448,449,458]},{"test_lines":[107,112],"covered_lines":[43,44,85,86,87,102,195,203,211,278,289,301,314,315,316,412,413,414,423,447,448,449,458]},{"test_lines":[114,124],"covered_lines":[43,44,85,86,87,88,89,91,102,159,171,195,203,278,289,302,303,314,412,413,414,423,428,447,448,449,458]},{"test_lines":[126,131],"covered_lines":[43,44,113,278,289,412,413,414,423,447,448,449,458]},{"test_lines":[133,137],"covered_lines":[43,44,102,278,289,412,413,414,423,447,448,449,458]},{"test_lines":[139,146],"covered_lines":[43,44,125,126,278,289,301,302,303,412,413,414,418,447,448,449,453]},{"test_lines":[148,152],"covered_lines":[43,44,149,278,289,412,413,414,423,447,448,449,458]},{"test_lines":[154,160],"covered_lines":[43,44,159,171,278,289,412,413,414,423,447,448,449,458]},{"test_lines":[162,166],"covered_lines":[43,44,171,278,289,412,413,414,423,447,448,449,458]},{"test_lines":[168,174],"covered_lines":[43,44,278,289,301,302,303,412,413,414,428,447,448,449,463]},{"test_lines":[176,181],"covered_lines":[43,44,195,203,211,278,289,301,351,352,353,354,355,412,413,414,447,448,449,458,463]},{"test_lines":[183,190],"covered_lines":[43,44,203,278,289,302,303,351,352,354,355,412,413,414,423,428,447,448,449]},{"test_lines":[192,196],"covered_lines":[43,44,203,278,289,302,303,351,355,412,413,414,423,428,447,448,449]},{"test_lines":[198,203],"covered_lines":[43,44,195,203,211,278,289,302,303,351,352,353,355,412,413,414,423,428,447,448,449,458]},{"test_lines":[205,215],"covered_lines":[43,44,102,203,278,289,302,303,351,352,354,355,412,413,414,423,447,448,449]},{"test_lines":[217,225],"covered_lines":[43,44,195,203,211,278,289,301,351,352,353,354,355,374,397,412,413,414,447,448,449,458,463]},{"test_lines":[227,234],"covered_lines":[43,44,195,203,211,227,228,278,289,412,413,414,423,428,447,448,449,458,463]},{"test_lines":[236,247],"covered_lines":[43,44,126,278,289,302,303,412,413,414,418,447,448,449]},{"test_lines":[249,262],"covered_lines":[43,44,278,289,302,303,412,413,414,418,447,448,449]},{"test_lines":[264,268],"covered_lines":[43,44,278,289,406,412,413,414,447,448,449,463]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/adt/Maybe.java":{"class_content":["package com.jnape.palatable.lambda.adt;\n","\n","import com.jnape.palatable.lambda.adt.choice.Choice2;\n","import com.jnape.palatable.lambda.adt.choice.Choice3;\n","import com.jnape.palatable.lambda.adt.coproduct.CoProduct2;\n","import com.jnape.palatable.lambda.adt.hlist.HList;\n","import com.jnape.palatable.lambda.adt.hlist.Tuple2;\n","import com.jnape.palatable.lambda.functions.Fn0;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.recursion.RecursiveResult;\n","import com.jnape.palatable.lambda.functions.specialized.Pure;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","import com.jnape.palatable.lambda.functor.Functor;\n","import com.jnape.palatable.lambda.functor.builtin.Lazy;\n","import com.jnape.palatable.lambda.io.IO;\n","import com.jnape.palatable.lambda.monad.Monad;\n","import com.jnape.palatable.lambda.monad.MonadError;\n","import com.jnape.palatable.lambda.monad.MonadRec;\n","import com.jnape.palatable.lambda.traversable.Traversable;\n","\n","import java.util.Objects;\n","import java.util.Optional;\n","\n","import static com.jnape.palatable.lambda.adt.Either.left;\n","import static com.jnape.palatable.lambda.adt.Unit.UNIT;\n","import static com.jnape.palatable.lambda.functions.Fn0.fn0;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Id.id;\n","import static com.jnape.palatable.lambda.functions.recursion.RecursiveResult.terminate;\n","import static com.jnape.palatable.lambda.functions.recursion.Trampoline.trampoline;\n","import static com.jnape.palatable.lambda.functor.builtin.Lazy.lazy;\n","import static com.jnape.palatable.lambda.io.IO.io;\n","\n","/**\n"," * The optional type, representing a potentially absent value. This is lambda's analog of {@link Optional}, supporting\n"," * all the usual suspects like {@link Functor}, {@link Applicative}, {@link Traversable}, etc.\n"," *\n"," * @param <A> the optional parameter type\n"," * @see Optional\n"," */\n","public abstract class Maybe<A> implements\n","        CoProduct2<Unit, A, Maybe<A>>,\n","        MonadError<Unit, A, Maybe<?>>,\n","        MonadRec<A, Maybe<?>>,\n","        Traversable<A, Maybe<?>> {\n","\n","    private Maybe() {\n","    }\n","\n","    /**\n","     * If the value is present, return it; otherwise, return the value supplied by <code>otherSupplier</code>.\n","     *\n","     * @param otherFn0 the supplier for the other value\n","     * @return this value, or the supplied other value\n","     */\n","    public final A orElseGet(Fn0<A> otherFn0) {\n","        return match(__ -> otherFn0.apply(), id());\n","    }\n","\n","    /**\n","     * If the value is present, return it; otherwise, return <code>other</code>.\n","     *\n","     * @param other the other value\n","     * @return this value, or the other value\n","     */\n","    public final A orElse(A other) {\n","        return orElseGet(() -> other);\n","    }\n","\n","    /**\n","     * If the value is present, return it; otherwise, throw the {@link Throwable} supplied by\n","     * <code>throwableSupplier</code>.\n","     *\n","     * @param throwableSupplier the supplier of the potentially thrown {@link Throwable}\n","     * @param <E>               the Throwable type\n","     * @return the value, if present\n","     * @throws E the throwable, if the value is absent\n","     */\n","    public final <E extends Throwable> A orElseThrow(Fn0<? extends E> throwableSupplier) throws E {\n","        return orElseGet(fn0(() -> {\n","            throw throwableSupplier.apply();\n","        }));\n","    }\n","\n","    /**\n","     * If this value is present and satisfies <code>predicate</code>, return <code>just</code> the value; otherwise,\n","     * return <code>nothing</code>.\n","     *\n","     * @param predicate the predicate to apply to the possibly absent value\n","     * @return maybe the present value that satisfied the predicate\n","     */\n","    public final Maybe<A> filter(Fn1<? super A, ? extends Boolean> predicate) {\n","        return flatMap(a -> predicate.apply(a) ? just(a) : nothing());\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Maybe<A> throwError(Unit unit) {\n","        return nothing();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Maybe<A> catchError(Fn1<? super Unit, ? extends Monad<A, Maybe<?>>> recoveryFn) {\n","        return match(recoveryFn, Maybe::just).coerce();\n","    }\n","\n","    /**\n","     * If this value is absent, return the value supplied by <code>lSupplier</code> wrapped in <code>Either.left</code>.\n","     * Otherwise, wrap the value in <code>Either.right</code> and return it.\n","     *\n","     * @param <L>  the left parameter type\n","     * @param lFn0 the supplier for the left value\n","     * @return this value wrapped in an Either.right, or an Either.left around the result of lSupplier\n","     */\n","    public final <L> Either<L, A> toEither(Fn0<L> lFn0) {\n","        return fmap(Either::<L, A>right).orElseGet(() -> left(lFn0.apply()));\n","    }\n","\n","    /**\n","     * Convert to {@link Optional}.\n","     *\n","     * @return the Optional\n","     */\n","    public final Optional<A> toOptional() {\n","        return fmap(Optional::of).orElseGet(Optional::empty);\n","    }\n","\n","    /**\n","     * Lift the value into the {@link Maybe} monad\n","     *\n","     * @param b   the value\n","     * @param <B> the value type\n","     * @return Just b\n","     */\n","    @Override\n","    public final <B> Maybe<B> pure(B b) {\n","        return just(b);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     * <p>\n","     * If the value is present, return {@link Maybe#just} <code>fn</code> applied to the value; otherwise, return\n","     * {@link Maybe#nothing}.\n","     */\n","    @Override\n","    public final <B> Maybe<B> fmap(Fn1<? super A, ? extends B> fn) {\n","        return MonadError.super.<B>fmap(fn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final <B> Maybe<B> zip(Applicative<Fn1<? super A, ? extends B>, Maybe<?>> appFn) {\n","        return MonadError.super.zip(appFn).coerce();\n","    }\n","\n","    /**\n","     * Terminate early if this is a {@link Nothing}; otherwise, continue the {@link Applicative#zip zip}.\n","     *\n","     * @param <B>       the result type\n","     * @param lazyAppFn the lazy other applicative instance\n","     * @return the zipped {@link Maybe}\n","     */\n","    @Override\n","    public <B> Lazy<Maybe<B>> lazyZip(Lazy<? extends Applicative<Fn1<? super A, ? extends B>, Maybe<?>>> lazyAppFn) {\n","        return match(constantly(lazy(nothing())),\n","                     a -> lazyAppFn.fmap(maybeF -> maybeF.<B>fmap(f -> f.apply(a)).coerce()));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final <B> Maybe<B> discardL(Applicative<B, Maybe<?>> appB) {\n","        return MonadError.super.discardL(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final <B> Maybe<A> discardR(Applicative<B, Maybe<?>> appB) {\n","        return MonadError.super.discardR(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @SuppressWarnings(\"RedundantTypeArguments\")\n","    @Override\n","    public final <B> Maybe<B> flatMap(Fn1<? super A, ? extends Monad<B, Maybe<?>>> f) {\n","        return match(constantly(nothing()), f.fmap(Monad<B, Maybe<?>>::coerce));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> Maybe<B> trampolineM(Fn1<? super A, ? extends MonadRec<RecursiveResult<A, B>, Maybe<?>>> fn) {\n","        return match(constantly(nothing()), trampoline(a -> fn.apply(a).<Maybe<RecursiveResult<A, B>>>coerce()\n","                .match(constantly(terminate(nothing())),\n","                       aOrB -> aOrB.fmap(Maybe::just))));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B> Choice3<Unit, A, B> diverge() {\n","        return match(Choice3::a, Choice3::b);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple2<Maybe<Unit>, Maybe<A>> project() {\n","        return CoProduct2.super.project().into(HList::tuple);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Choice2<A, Unit> invert() {\n","        return match(Choice2::b, Choice2::a);\n","    }\n","\n","    /**\n","     * If this value is present, accept it by <code>consumer</code>; otherwise, do nothing.\n","     *\n","     * @param effect the consumer\n","     * @return the same Maybe instance\n","     * @deprecated in favor of {@link Maybe#match(Fn1, Fn1) matching} into an {@link IO} and explicitly running it\n","     */\n","    @Deprecated\n","    public final Maybe<A> peek(Fn1<? super A, ? extends IO<?>> effect) {\n","        return match(constantly(io(this)), a -> effect.apply(a).fmap(constantly(this))).unsafePerformIO();\n","    }\n","\n","    @Override\n","    @SuppressWarnings(\"unchecked\")\n","    public final <B, App extends Applicative<?, App>, TravB extends Traversable<B, Maybe<?>>,\n","            AppTrav extends Applicative<TravB, App>> AppTrav traverse(Fn1<? super A, ? extends Applicative<B, App>> fn,\n","                                                                      Fn1<? super TravB, ? extends AppTrav> pure) {\n","        return match(__ -> pure.apply((TravB) Maybe.<B>nothing()), a -> (AppTrav) fn.apply(a).fmap(Maybe::just));\n","    }\n","\n","    /**\n","     * Convenience static factory method for creating a {@link Maybe} from an {@link Either}. If <code>either</code> is\n","     * a right value, wrap the value in a <code>just</code> and return it; otherwise, return {@link #nothing()}.\n","     *\n","     * @param either the either instance\n","     * @param <A>    the potential right value\n","     * @return \"Just\" the right value, or nothing\n","     */\n","    public static <A> Maybe<A> fromEither(Either<?, A> either) {\n","        return either.toMaybe();\n","    }\n","\n","    /**\n","     * Convenience static factory method for creating a {@link Maybe} from an {@link Optional}.\n","     *\n","     * @param optional the optional\n","     * @param <A>      the optional parameter type\n","     * @return the equivalent Maybe instance\n","     */\n","    public static <A> Maybe<A> fromOptional(Optional<? extends A> optional) {\n","        return optional.map(Maybe::<A>just).orElse(Maybe.nothing());\n","    }\n","\n","    /**\n","     * Lift a potentially null value into {@link Maybe}. If <code>a</code> is not null, returns <code>just(a)</code>;\n","     * otherwise, returns {@link #nothing()}.\n","     *\n","     * @param a   the potentially null value\n","     * @param <A> the value parameter type\n","     * @return \"Just\" the value, or nothing\n","     */\n","    public static <A> Maybe<A> maybe(A a) {\n","        return a == null ? nothing() : just(a);\n","    }\n","\n","    /**\n","     * Lift a non-null value into {@link Maybe}. This differs from {@link Maybe#maybe} in that the value *must* be\n","     * non-null; if it is null, a {@link NullPointerException} is thrown.\n","     *\n","     * @param a   the non-null value\n","     * @param <A> the value parameter type\n","     * @return \"Just\" the value\n","     * @throws NullPointerException if a is null\n","     */\n","    public static <A> Maybe<A> just(A a) {\n","        if (a == null)\n","            throw new NullPointerException();\n","        return new Just<>(a);\n","    }\n","\n","    /**\n","     * Return nothing.\n","     *\n","     * @param <A> the type of the value, if there was one\n","     * @return nothing\n","     */\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> Maybe<A> nothing() {\n","        return (Maybe<A>) Nothing.INSTANCE;\n","    }\n","\n","    /**\n","     * The canonical {@link Pure} instance for {@link Maybe}.\n","     *\n","     * @return the {@link Pure} instance\n","     */\n","    public static Pure<Maybe<?>> pureMaybe() {\n","        return Maybe::just;\n","    }\n","\n","    private static final class Nothing<A> extends Maybe<A> {\n","        private static final Nothing<?> INSTANCE = new Nothing<>();\n","\n","        private Nothing() {\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super Unit, ? extends R> aFn, Fn1<? super A, ? extends R> bFn) {\n","            return aFn.apply(UNIT);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Nothing\";\n","        }\n","    }\n","\n","    private static final class Just<A> extends Maybe<A> {\n","\n","        private final A a;\n","\n","        private Just(A a) {\n","            this.a = a;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super Unit, ? extends R> aFn, Fn1<? super A, ? extends R> bFn) {\n","            return bFn.apply(a);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof Just && Objects.equals(this.a, ((Just) other).a);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(a);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Just \" + a;\n","        }\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.adt;\n","\n","import com.jnape.palatable.lambda.adt.choice.Choice2;\n","import com.jnape.palatable.lambda.adt.choice.Choice3;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.framework.Subjects;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.ApplicativeLaws;\n","import testsupport.traits.FunctorLaws;\n","import testsupport.traits.MonadLaws;\n","import testsupport.traits.MonadRecLaws;\n","import testsupport.traits.TraversableLaws;\n","\n","import java.util.Optional;\n","\n","import static com.jnape.palatable.lambda.adt.Either.left;\n","import static com.jnape.palatable.lambda.adt.Either.right;\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","import static com.jnape.palatable.lambda.adt.Maybe.pureMaybe;\n","import static com.jnape.palatable.lambda.adt.Unit.UNIT;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Eq.eq;\n","import static com.jnape.palatable.lambda.functor.builtin.Lazy.lazy;\n","import static com.jnape.palatable.traitor.framework.Subjects.subjects;\n","import static org.junit.Assert.assertEquals;\n","import static org.junit.Assert.assertSame;\n","import static testsupport.assertion.MonadErrorAssert.assertLaws;\n","\n","@RunWith(Traits.class)\n","public class MaybeTest {\n","\n","    @TestTraits({FunctorLaws.class, ApplicativeLaws.class, TraversableLaws.class, MonadLaws.class, MonadRecLaws.class})\n","    public Subjects<Maybe<Integer>> testSubject() {\n","        return subjects(Maybe.nothing(), just(1));\n","    }\n","\n","    @Test\n","    public void monadError() {\n","        assertLaws(subjects(nothing(), just(1)), UNIT, constantly(just(2)));\n","    }\n","\n","    @Test(expected = NullPointerException.class)\n","    public void justMustBeNonNull() {\n","        just(null);\n","    }\n","\n","    @Test\n","    public void nothingReusesInstance() {\n","        assertSame(Maybe.nothing(), Maybe.nothing());\n","    }\n","\n","    @Test\n","    public void maybeAllowsNull() {\n","        assertEquals(just(1), Maybe.maybe(1));\n","        assertEquals(Maybe.nothing(), Maybe.maybe(null));\n","    }\n","\n","    @Test\n","    public void orElseGet() {\n","        assertEquals((Integer) 1, just(1).orElseGet(() -> -1));\n","        assertEquals(-1, Maybe.nothing().orElseGet(() -> -1));\n","    }\n","\n","    @Test\n","    public void orElse() {\n","        assertEquals((Integer) 1, just(1).orElse(-1));\n","        assertEquals(-1, Maybe.nothing().orElse(-1));\n","    }\n","\n","    @Test\n","    public void filter() {\n","        assertEquals(just(1), just(1).filter(eq(1)));\n","        assertEquals(nothing(), just(0).filter(eq(1)));\n","        assertEquals(nothing(), nothing().filter(eq(1)));\n","    }\n","\n","    @Test\n","    public void toOptional() {\n","        assertEquals(Optional.of(1), just(1).toOptional());\n","        assertEquals(Optional.empty(), Maybe.nothing().toOptional());\n","    }\n","\n","    @Test\n","    public void fromOptional() {\n","        assertEquals(just(1), Maybe.fromOptional(Optional.of(1)));\n","        assertEquals(Maybe.nothing(), Maybe.fromOptional(Optional.empty()));\n","    }\n","\n","    @Test\n","    public void toEither() {\n","        assertEquals(right(1), just(1).toEither(() -> \"empty\"));\n","        assertEquals(left(\"empty\"), nothing().toEither(() -> \"empty\"));\n","    }\n","\n","    @Test\n","    public void fromEither() {\n","        assertEquals(just(1), Maybe.fromEither(right(1)));\n","        assertEquals(nothing(), Maybe.fromEither(left(\"failure\")));\n","    }\n","\n","    @Test\n","    public void justOrThrow() {\n","        just(1).orElseThrow(IllegalStateException::new);\n","    }\n","\n","    @Test(expected = IllegalStateException.class)\n","    public void nothingOrThrow() {\n","        nothing().orElseThrow(IllegalStateException::new);\n","    }\n","\n","    @Test\n","    public void divergesIntoChoice3() {\n","        assertEquals(Choice3.a(UNIT), nothing().diverge());\n","        assertEquals(Choice3.<Unit, Integer, Object>b(1), just(1).diverge());\n","    }\n","\n","    @Test\n","    public void projectsIntoTuple2() {\n","        assertEquals(tuple(just(UNIT), nothing()), nothing().project());\n","        assertEquals(tuple(nothing(), just(1)), just(1).project());\n","    }\n","\n","    @Test\n","    public void invertsIntoChoice2() {\n","        assertEquals(Choice2.b(UNIT), nothing().invert());\n","        assertEquals(Choice2.a(1), just(1).invert());\n","    }\n","\n","    @Test\n","    public void lazyZip() {\n","        assertEquals(just(2), just(1).<Integer>lazyZip(lazy(() -> just(x -> x + 1))).value());\n","        assertEquals(nothing(), nothing().lazyZip(lazy(() -> {\n","            throw new AssertionError();\n","        })).value());\n","    }\n","\n","    @Test\n","    public void staticPure() {\n","        Maybe<Integer> maybe = pureMaybe().apply(1);\n","        assertEquals(just(1), maybe);\n","    }\n","}"],"method_lines_dic":{"Maybe::::orElseGet(com.jnape.palatable.lambda.functions.Fn0<A>)":[56,58],"Maybe::::orElse(A)":[66,68],"Maybe::::orElseThrow(com.jnape.palatable.lambda.functions.Fn0<? extends E>)":[79,83],"Maybe::::filter(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)":[92,94],"Maybe::::throwError(com.jnape.palatable.lambda.adt.Unit)":[99,102],"Maybe::::catchError(com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.Unit, ? extends com.jnape.palatable.lambda.monad.Monad<A, com.jnape.palatable.lambda.adt.Maybe<?>>>)":[107,110],"Maybe::::toEither(com.jnape.palatable.lambda.functions.Fn0<L>)":[120,122],"Maybe::::toOptional()":[129,131],"Maybe::::pure(B)":[140,143],"Maybe::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)":[151,154],"Maybe::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.adt.Maybe<?>>)":[159,162],"Maybe::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.adt.Maybe<?>>>)":[171,175],"Maybe::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.adt.Maybe<?>>)":[180,183],"Maybe::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.adt.Maybe<?>>)":[188,191],"Maybe::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.adt.Maybe<?>>>)":[196,200],"Maybe::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.adt.Maybe<?>>>)":[205,210],"Maybe::::diverge()":[215,218],"Maybe::::project()":[223,226],"Maybe::::invert()":[231,234],"Maybe::::peek(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.io.IO<?>>)":[243,246],"Maybe::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)":[248,254],"Maybe::::fromEither(com.jnape.palatable.lambda.adt.Either<?, A>)":[264,266],"Maybe::::fromOptional(java.util.Optional<? extends A>)":[275,277],"Maybe::::maybe(A)":[287,289],"Maybe::::just(A)":[300,304],"Maybe::::nothing()":[312,315],"Maybe::::pureMaybe()":[322,324],"Maybe.Nothing::::match(com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.Unit, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>)":[332,335],"Maybe.Nothing::::toString()":[337,340],"Maybe.Just::::match(com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.Unit, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>)":[351,354],"Maybe.Just::::equals(java.lang.Object)":[356,359],"Maybe.Just::::hashCode()":[361,364],"Maybe.Just::::toString()":[366,369]},"test_method_lines_dic":{"MaybeTest::::testSubject()":[36,39],"MaybeTest::::monadError()":[41,44],"MaybeTest::::justMustBeNonNull()":[46,49],"MaybeTest::::nothingReusesInstance()":[51,54],"MaybeTest::::maybeAllowsNull()":[56,60],"MaybeTest::::orElseGet()":[62,66],"MaybeTest::::orElse()":[68,72],"MaybeTest::::filter()":[74,79],"MaybeTest::::toOptional()":[81,85],"MaybeTest::::fromOptional()":[87,91],"MaybeTest::::toEither()":[93,97],"MaybeTest::::fromEither()":[99,103],"MaybeTest::::justOrThrow()":[105,108],"MaybeTest::::nothingOrThrow()":[110,113],"MaybeTest::::divergesIntoChoice3()":[115,119],"MaybeTest::::projectsIntoTuple2()":[121,125],"MaybeTest::::invertsIntoChoice2()":[127,131],"MaybeTest::::lazyZip()":[133,139],"MaybeTest::::staticPure()":[141,145]},"reverse_method_lines_dic":{"56":"Maybe::::orElseGet(com.jnape.palatable.lambda.functions.Fn0<A>)","57":"Maybe::::orElseGet(com.jnape.palatable.lambda.functions.Fn0<A>)","58":"Maybe::::orElseGet(com.jnape.palatable.lambda.functions.Fn0<A>)","66":"Maybe::::orElse(A)","67":"Maybe::::orElse(A)","68":"Maybe::::orElse(A)","79":"Maybe::::orElseThrow(com.jnape.palatable.lambda.functions.Fn0<? extends E>)","80":"Maybe::::orElseThrow(com.jnape.palatable.lambda.functions.Fn0<? extends E>)","81":"Maybe::::orElseThrow(com.jnape.palatable.lambda.functions.Fn0<? extends E>)","82":"Maybe::::orElseThrow(com.jnape.palatable.lambda.functions.Fn0<? extends E>)","83":"Maybe::::orElseThrow(com.jnape.palatable.lambda.functions.Fn0<? extends E>)","92":"Maybe::::filter(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)","93":"Maybe::::filter(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)","94":"Maybe::::filter(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)","99":"Maybe::::throwError(com.jnape.palatable.lambda.adt.Unit)","100":"Maybe::::throwError(com.jnape.palatable.lambda.adt.Unit)","101":"Maybe::::throwError(com.jnape.palatable.lambda.adt.Unit)","102":"Maybe::::throwError(com.jnape.palatable.lambda.adt.Unit)","107":"Maybe::::catchError(com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.Unit, ? extends com.jnape.palatable.lambda.monad.Monad<A, com.jnape.palatable.lambda.adt.Maybe<?>>>)","108":"Maybe::::catchError(com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.Unit, ? extends com.jnape.palatable.lambda.monad.Monad<A, com.jnape.palatable.lambda.adt.Maybe<?>>>)","109":"Maybe::::catchError(com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.Unit, ? extends com.jnape.palatable.lambda.monad.Monad<A, com.jnape.palatable.lambda.adt.Maybe<?>>>)","110":"Maybe::::catchError(com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.Unit, ? extends com.jnape.palatable.lambda.monad.Monad<A, com.jnape.palatable.lambda.adt.Maybe<?>>>)","120":"Maybe::::toEither(com.jnape.palatable.lambda.functions.Fn0<L>)","121":"Maybe::::toEither(com.jnape.palatable.lambda.functions.Fn0<L>)","122":"Maybe::::toEither(com.jnape.palatable.lambda.functions.Fn0<L>)","129":"Maybe::::toOptional()","130":"Maybe::::toOptional()","131":"Maybe::::toOptional()","140":"Maybe::::pure(B)","141":"Maybe::::pure(B)","142":"Maybe::::pure(B)","143":"Maybe::::pure(B)","151":"Maybe::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","152":"Maybe::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","153":"Maybe::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","154":"Maybe::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","159":"Maybe::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.adt.Maybe<?>>)","160":"Maybe::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.adt.Maybe<?>>)","161":"Maybe::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.adt.Maybe<?>>)","162":"Maybe::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.adt.Maybe<?>>)","171":"Maybe::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.adt.Maybe<?>>>)","172":"Maybe::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.adt.Maybe<?>>>)","173":"Maybe::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.adt.Maybe<?>>>)","174":"Maybe::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.adt.Maybe<?>>>)","175":"Maybe::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.adt.Maybe<?>>>)","180":"Maybe::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.adt.Maybe<?>>)","181":"Maybe::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.adt.Maybe<?>>)","182":"Maybe::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.adt.Maybe<?>>)","183":"Maybe::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.adt.Maybe<?>>)","188":"Maybe::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.adt.Maybe<?>>)","189":"Maybe::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.adt.Maybe<?>>)","190":"Maybe::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.adt.Maybe<?>>)","191":"Maybe::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.adt.Maybe<?>>)","196":"Maybe::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.adt.Maybe<?>>>)","197":"Maybe::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.adt.Maybe<?>>>)","198":"Maybe::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.adt.Maybe<?>>>)","199":"Maybe::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.adt.Maybe<?>>>)","200":"Maybe::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.adt.Maybe<?>>>)","205":"Maybe::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.adt.Maybe<?>>>)","206":"Maybe::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.adt.Maybe<?>>>)","207":"Maybe::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.adt.Maybe<?>>>)","208":"Maybe::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.adt.Maybe<?>>>)","209":"Maybe::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.adt.Maybe<?>>>)","210":"Maybe::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>, com.jnape.palatable.lambda.adt.Maybe<?>>>)","215":"Maybe::::diverge()","216":"Maybe::::diverge()","217":"Maybe::::diverge()","218":"Maybe::::diverge()","223":"Maybe::::project()","224":"Maybe::::project()","225":"Maybe::::project()","226":"Maybe::::project()","231":"Maybe::::invert()","232":"Maybe::::invert()","233":"Maybe::::invert()","234":"Maybe::::invert()","243":"Maybe::::peek(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.io.IO<?>>)","244":"Maybe::::peek(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.io.IO<?>>)","245":"Maybe::::peek(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.io.IO<?>>)","246":"Maybe::::peek(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.io.IO<?>>)","248":"Maybe::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","249":"Maybe::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","250":"Maybe::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","251":"Maybe::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","252":"Maybe::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","253":"Maybe::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","254":"Maybe::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","264":"Maybe::::fromEither(com.jnape.palatable.lambda.adt.Either<?, A>)","265":"Maybe::::fromEither(com.jnape.palatable.lambda.adt.Either<?, A>)","266":"Maybe::::fromEither(com.jnape.palatable.lambda.adt.Either<?, A>)","275":"Maybe::::fromOptional(java.util.Optional<? extends A>)","276":"Maybe::::fromOptional(java.util.Optional<? extends A>)","277":"Maybe::::fromOptional(java.util.Optional<? extends A>)","287":"Maybe::::maybe(A)","288":"Maybe::::maybe(A)","289":"Maybe::::maybe(A)","300":"Maybe::::just(A)","301":"Maybe::::just(A)","302":"Maybe::::just(A)","303":"Maybe::::just(A)","304":"Maybe::::just(A)","312":"Maybe::::nothing()","313":"Maybe::::nothing()","314":"Maybe::::nothing()","315":"Maybe::::nothing()","322":"Maybe::::pureMaybe()","323":"Maybe::::pureMaybe()","324":"Maybe::::pureMaybe()","332":"Maybe.Nothing::::match(com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.Unit, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>)","333":"Maybe.Nothing::::match(com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.Unit, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>)","334":"Maybe.Nothing::::match(com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.Unit, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>)","335":"Maybe.Nothing::::match(com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.Unit, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>)","337":"Maybe.Nothing::::toString()","338":"Maybe.Nothing::::toString()","339":"Maybe.Nothing::::toString()","340":"Maybe.Nothing::::toString()","351":"Maybe.Just::::match(com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.Unit, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>)","352":"Maybe.Just::::match(com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.Unit, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>)","353":"Maybe.Just::::match(com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.Unit, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>)","354":"Maybe.Just::::match(com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.Unit, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>)","356":"Maybe.Just::::equals(java.lang.Object)","357":"Maybe.Just::::equals(java.lang.Object)","358":"Maybe.Just::::equals(java.lang.Object)","359":"Maybe.Just::::equals(java.lang.Object)","361":"Maybe.Just::::hashCode()","362":"Maybe.Just::::hashCode()","363":"Maybe.Just::::hashCode()","364":"Maybe.Just::::hashCode()","366":"Maybe.Just::::toString()","367":"Maybe.Just::::toString()","368":"Maybe.Just::::toString()","369":"Maybe.Just::::toString()"},"test_reverse_method_lines_dic":{"36":"MaybeTest::::testSubject()","37":"MaybeTest::::testSubject()","38":"MaybeTest::::testSubject()","39":"MaybeTest::::testSubject()","41":"MaybeTest::::monadError()","42":"MaybeTest::::monadError()","43":"MaybeTest::::monadError()","44":"MaybeTest::::monadError()","46":"MaybeTest::::justMustBeNonNull()","47":"MaybeTest::::justMustBeNonNull()","48":"MaybeTest::::justMustBeNonNull()","49":"MaybeTest::::justMustBeNonNull()","51":"MaybeTest::::nothingReusesInstance()","52":"MaybeTest::::nothingReusesInstance()","53":"MaybeTest::::nothingReusesInstance()","54":"MaybeTest::::nothingReusesInstance()","56":"MaybeTest::::maybeAllowsNull()","57":"MaybeTest::::maybeAllowsNull()","58":"MaybeTest::::maybeAllowsNull()","59":"MaybeTest::::maybeAllowsNull()","60":"MaybeTest::::maybeAllowsNull()","62":"MaybeTest::::orElseGet()","63":"MaybeTest::::orElseGet()","64":"MaybeTest::::orElseGet()","65":"MaybeTest::::orElseGet()","66":"MaybeTest::::orElseGet()","68":"MaybeTest::::orElse()","69":"MaybeTest::::orElse()","70":"MaybeTest::::orElse()","71":"MaybeTest::::orElse()","72":"MaybeTest::::orElse()","74":"MaybeTest::::filter()","75":"MaybeTest::::filter()","76":"MaybeTest::::filter()","77":"MaybeTest::::filter()","78":"MaybeTest::::filter()","79":"MaybeTest::::filter()","81":"MaybeTest::::toOptional()","82":"MaybeTest::::toOptional()","83":"MaybeTest::::toOptional()","84":"MaybeTest::::toOptional()","85":"MaybeTest::::toOptional()","87":"MaybeTest::::fromOptional()","88":"MaybeTest::::fromOptional()","89":"MaybeTest::::fromOptional()","90":"MaybeTest::::fromOptional()","91":"MaybeTest::::fromOptional()","93":"MaybeTest::::toEither()","94":"MaybeTest::::toEither()","95":"MaybeTest::::toEither()","96":"MaybeTest::::toEither()","97":"MaybeTest::::toEither()","99":"MaybeTest::::fromEither()","100":"MaybeTest::::fromEither()","101":"MaybeTest::::fromEither()","102":"MaybeTest::::fromEither()","103":"MaybeTest::::fromEither()","105":"MaybeTest::::justOrThrow()","106":"MaybeTest::::justOrThrow()","107":"MaybeTest::::justOrThrow()","108":"MaybeTest::::justOrThrow()","110":"MaybeTest::::nothingOrThrow()","111":"MaybeTest::::nothingOrThrow()","112":"MaybeTest::::nothingOrThrow()","113":"MaybeTest::::nothingOrThrow()","115":"MaybeTest::::divergesIntoChoice3()","116":"MaybeTest::::divergesIntoChoice3()","117":"MaybeTest::::divergesIntoChoice3()","118":"MaybeTest::::divergesIntoChoice3()","119":"MaybeTest::::divergesIntoChoice3()","121":"MaybeTest::::projectsIntoTuple2()","122":"MaybeTest::::projectsIntoTuple2()","123":"MaybeTest::::projectsIntoTuple2()","124":"MaybeTest::::projectsIntoTuple2()","125":"MaybeTest::::projectsIntoTuple2()","127":"MaybeTest::::invertsIntoChoice2()","128":"MaybeTest::::invertsIntoChoice2()","129":"MaybeTest::::invertsIntoChoice2()","130":"MaybeTest::::invertsIntoChoice2()","131":"MaybeTest::::invertsIntoChoice2()","133":"MaybeTest::::lazyZip()","134":"MaybeTest::::lazyZip()","135":"MaybeTest::::lazyZip()","136":"MaybeTest::::lazyZip()","137":"MaybeTest::::lazyZip()","138":"MaybeTest::::lazyZip()","139":"MaybeTest::::lazyZip()","141":"MaybeTest::::staticPure()","142":"MaybeTest::::staticPure()","143":"MaybeTest::::staticPure()","144":"MaybeTest::::staticPure()","145":"MaybeTest::::staticPure()"},"tests":[{"test_lines":[36,39],"covered_lines":[47,48,301,303,314,327,329,330,347,348,349]},{"test_lines":[41,44],"covered_lines":[47,48,101,109,301,303,314,327,329,330,334,347,348,349]},{"test_lines":[46,49],"covered_lines":[47,48,301,302,303,314,327,329,330,347,348,349]},{"test_lines":[51,54],"covered_lines":[47,48,301,303,314,327,329,330,347,348,349]},{"test_lines":[56,60],"covered_lines":[47,48,288,301,303,314,327,329,330,347,348,349,358]},{"test_lines":[62,66],"covered_lines":[47,48,57,301,303,314,327,329,330,334,347,348,349,353]},{"test_lines":[68,72],"covered_lines":[47,48,57,67,301,303,314,327,329,330,334,347,348,349,353]},{"test_lines":[74,79],"covered_lines":[47,48,93,199,301,303,314,327,329,330,334,347,348,349,353,358]},{"test_lines":[81,85],"covered_lines":[47,48,57,130,142,153,199,301,303,314,327,329,330,334,347,348,349,353]},{"test_lines":[87,91],"covered_lines":[47,48,276,301,303,314,327,329,330,347,348,349,358]},{"test_lines":[93,97],"covered_lines":[47,48,57,121,142,153,199,301,303,314,327,329,330,334,347,348,349,353]},{"test_lines":[99,103],"covered_lines":[47,48,265,301,303,314,327,329,330,347,348,349,358]},{"test_lines":[105,108],"covered_lines":[47,48,57,80,301,303,314,327,329,330,347,348,349,353]},{"test_lines":[110,113],"covered_lines":[47,48,81,301,303,314,327,329,330,347,348,349]},{"test_lines":[115,119],"covered_lines":[47,48,217,301,303,314,327,329,330,334,347,348,349,353]},{"test_lines":[121,125],"covered_lines":[47,48,225,301,303,314,327,329,330,334,347,348,349,353,358]},{"test_lines":[127,131],"covered_lines":[47,48,233,301,303,314,327,329,330,334,347,348,349,353]},{"test_lines":[133,139],"covered_lines":[47,48,142,153,173,174,199,301,303,314,327,329,330,334,347,348,349,353,358]},{"test_lines":[141,145],"covered_lines":[47,48,301,303,314,323,327,329,330,347,348,349,358]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/adt/choice/Choice5.java":{"class_content":["package com.jnape.palatable.lambda.adt.choice;\n","\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.adt.coproduct.CoProduct4;\n","import com.jnape.palatable.lambda.adt.coproduct.CoProduct5;\n","import com.jnape.palatable.lambda.adt.hlist.HList;\n","import com.jnape.palatable.lambda.adt.hlist.Tuple5;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.recursion.RecursiveResult;\n","import com.jnape.palatable.lambda.functions.specialized.Pure;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","import com.jnape.palatable.lambda.functor.Bifunctor;\n","import com.jnape.palatable.lambda.functor.builtin.Lazy;\n","import com.jnape.palatable.lambda.monad.Monad;\n","import com.jnape.palatable.lambda.monad.MonadRec;\n","import com.jnape.palatable.lambda.traversable.Traversable;\n","\n","import java.util.Objects;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Into5.into5;\n","import static com.jnape.palatable.lambda.functions.recursion.RecursiveResult.terminate;\n","import static com.jnape.palatable.lambda.functions.recursion.Trampoline.trampoline;\n","import static com.jnape.palatable.lambda.functor.builtin.Lazy.lazy;\n","\n","/**\n"," * Canonical ADT representation of {@link CoProduct5}.\n"," *\n"," * @param <A> the first possible type\n"," * @param <B> the second possible type\n"," * @param <C> the third possible type\n"," * @param <D> the fourth possible type\n"," * @param <E> the fifth possible type\n"," * @see Choice4\n"," * @see Choice6\n"," */\n","public abstract class Choice5<A, B, C, D, E> implements\n","        CoProduct5<A, B, C, D, E, Choice5<A, B, C, D, E>>,\n","        MonadRec<E, Choice5<A, B, C, D, ?>>,\n","        Bifunctor<D, E, Choice5<A, B, C, ?, ?>>,\n","        Traversable<E, Choice5<A, B, C, D, ?>> {\n","\n","    private Choice5() {\n","    }\n","\n","    /**\n","     * Specialize this choice's projection to a {@link Tuple5}.\n","     *\n","     * @return a {@link Tuple5}\n","     */\n","    @Override\n","    public Tuple5<Maybe<A>, Maybe<B>, Maybe<C>, Maybe<D>, Maybe<E>> project() {\n","        return into5(HList::tuple, CoProduct5.super.project());\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <F> Choice6<A, B, C, D, E, F> diverge() {\n","        return match(Choice6::a, Choice6::b, Choice6::c, Choice6::d, Choice6::e);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Choice4<A, B, C, D> converge(Fn1<? super E, ? extends CoProduct4<A, B, C, D, ?>> convergenceFn) {\n","        return match(Choice4::a, Choice4::b, Choice4::c, Choice4::d,\n","                     convergenceFn.fmap(cp4 -> cp4.match(Choice4::a, Choice4::b, Choice4::c, Choice4::d)));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <F> Choice5<A, B, C, D, F> fmap(Fn1<? super E, ? extends F> fn) {\n","        return MonadRec.super.<F>fmap(fn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <F> Choice5<A, B, C, F, E> biMapL(Fn1<? super D, ? extends F> fn) {\n","        return (Choice5<A, B, C, F, E>) Bifunctor.super.<F>biMapL(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <F> Choice5<A, B, C, D, F> biMapR(Fn1<? super E, ? extends F> fn) {\n","        return (Choice5<A, B, C, D, F>) Bifunctor.super.<F>biMapR(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <F, G> Choice5<A, B, C, F, G> biMap(Fn1<? super D, ? extends F> lFn,\n","                                               Fn1<? super E, ? extends G> rFn) {\n","        return match(Choice5::a, Choice5::b, Choice5::c, d -> d(lFn.apply(d)), e -> e(rFn.apply(e)));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <F> Choice5<A, B, C, D, F> pure(F f) {\n","        return e(f);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <F> Choice5<A, B, C, D, F> zip(Applicative<Fn1<? super E, ? extends F>, Choice5<A, B, C, D, ?>> appFn) {\n","        return MonadRec.super.zip(appFn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <F> Lazy<Choice5<A, B, C, D, F>> lazyZip(\n","            Lazy<? extends Applicative<Fn1<? super E, ? extends F>, Choice5<A, B, C, D, ?>>> lazyAppFn) {\n","        return match(a -> lazy(a(a)),\n","                     b -> lazy(b(b)),\n","                     c -> lazy(c(c)),\n","                     d -> lazy(d(d)),\n","                     e -> lazyAppFn.fmap(choiceF -> choiceF.<F>fmap(f -> f.apply(e)).coerce()));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <F> Choice5<A, B, C, D, F> discardL(Applicative<F, Choice5<A, B, C, D, ?>> appB) {\n","        return MonadRec.super.discardL(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <F> Choice5<A, B, C, D, E> discardR(Applicative<F, Choice5<A, B, C, D, ?>> appB) {\n","        return MonadRec.super.discardR(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <F> Choice5<A, B, C, D, F> flatMap(Fn1<? super E, ? extends Monad<F, Choice5<A, B, C, D, ?>>> f) {\n","        return match(Choice5::a, Choice5::b, Choice5::c, Choice5::d, e -> f.apply(e).coerce());\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <F> Choice5<A, B, C, D, F> trampolineM(\n","            Fn1<? super E, ? extends MonadRec<RecursiveResult<E, F>, Choice5<A, B, C, D, ?>>> fn) {\n","        return flatMap(trampoline(e -> fn.apply(e).<Choice5<A, B, C, D, RecursiveResult<E, F>>>coerce().match(\n","                a -> terminate(Choice5.a(a)),\n","                b -> terminate(Choice5.b(b)),\n","                c -> terminate(Choice5.c(c)),\n","                d -> terminate(Choice5.d(d)),\n","                eRec -> eRec.fmap(Choice5::e))));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <F, App extends Applicative<?, App>, TravB extends Traversable<F, Choice5<A, B, C, D, ?>>,\n","            AppTrav extends Applicative<TravB, App>> AppTrav traverse(Fn1<? super E, ? extends Applicative<F, App>> fn,\n","                                                                      Fn1<? super TravB, ? extends AppTrav> pure) {\n","        return match(a -> pure.apply(Choice5.<A, B, C, D, F>a(a).<TravB>coerce()),\n","                     b -> pure.apply(Choice5.<A, B, C, D, F>b(b).<TravB>coerce()),\n","                     c -> pure.apply(Choice5.<A, B, C, D, F>c(c).<TravB>coerce()),\n","                     d -> pure.apply(Choice5.<A, B, C, D, F>d(d).<TravB>coerce()),\n","                     e -> fn.apply(e).<Choice5<A, B, C, D, F>>fmap(Choice5::e)\n","                             .<TravB>fmap(Applicative::coerce))\n","                .coerce();\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a value of type <code>A</code> in a {@link Choice5}.\n","     *\n","     * @param a   the value\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @param <C> the third possible type\n","     * @param <D> the fourth possible type\n","     * @param <E> the fifth possible type\n","     * @return the wrapped value as a {@link Choice5}&lt;A, B, C, D, E&gt;\n","     */\n","    public static <A, B, C, D, E> Choice5<A, B, C, D, E> a(A a) {\n","        return new _A<>(a);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a value of type <code>B</code> in a {@link Choice5}.\n","     *\n","     * @param b   the value\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @param <C> the third possible type\n","     * @param <D> the fourth possible type\n","     * @param <E> the fifth possible type\n","     * @return the wrapped value as a {@link Choice5}&lt;A, B, C, D, E&gt;\n","     */\n","    public static <A, B, C, D, E> Choice5<A, B, C, D, E> b(B b) {\n","        return new _B<>(b);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a value of type <code>C</code> in a {@link Choice5}.\n","     *\n","     * @param c   the value\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @param <C> the third possible type\n","     * @param <D> the fourth possible type\n","     * @param <E> the fifth possible type\n","     * @return the wrapped value as a {@link Choice5}&lt;A, B, C, D, E&gt;\n","     */\n","    public static <A, B, C, D, E> Choice5<A, B, C, D, E> c(C c) {\n","        return new _C<>(c);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a value of type <code>D</code> in a {@link Choice5}.\n","     *\n","     * @param d   the value\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @param <C> the third possible type\n","     * @param <D> the fourth possible type\n","     * @param <E> the fifth possible type\n","     * @return the wrapped value as a {@link Choice5}&lt;A, B, C, D, E&gt;\n","     */\n","    public static <A, B, C, D, E> Choice5<A, B, C, D, E> d(D d) {\n","        return new _D<>(d);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a value of type <code>E</code> in a {@link Choice5}.\n","     *\n","     * @param e   the value\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @param <C> the third possible type\n","     * @param <D> the fourth possible type\n","     * @param <E> the fifth possible type\n","     * @return the wrapped value as a {@link Choice5}&lt;A, B, C, D, E&gt;\n","     */\n","    public static <A, B, C, D, E> Choice5<A, B, C, D, E> e(E e) {\n","        return new _E<>(e);\n","    }\n","\n","    /**\n","     * The canonical {@link Pure} instance for {@link Choice5}.\n","     *\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @param <C> the third possible type\n","     * @param <D> the fourth possible type\n","     * @return the {@link Pure} instance\n","     */\n","    public static <A, B, C, D> Pure<Choice5<A, B, C, D, ?>> pureChoice() {\n","        return Choice5::e;\n","    }\n","\n","    private static final class _A<A, B, C, D, E> extends Choice5<A, B, C, D, E> {\n","\n","        private final A a;\n","\n","        private _A(A a) {\n","            this.a = a;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                           Fn1<? super C, ? extends R> cFn, Fn1<? super D, ? extends R> dFn,\n","                           Fn1<? super E, ? extends R> eFn) {\n","            return aFn.apply(a);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof _A\n","                    && Objects.equals(a, ((_A) other).a);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(a);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Choice5{\" +\n","                    \"a=\" + a +\n","                    '}';\n","        }\n","    }\n","\n","    private static final class _B<A, B, C, D, E> extends Choice5<A, B, C, D, E> {\n","\n","        private final B b;\n","\n","        private _B(B b) {\n","            this.b = b;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                           Fn1<? super C, ? extends R> cFn, Fn1<? super D, ? extends R> dFn,\n","                           Fn1<? super E, ? extends R> eFn) {\n","            return bFn.apply(b);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof _B\n","                    && Objects.equals(b, ((_B) other).b);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(b);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Choice5{\" +\n","                    \"b=\" + b +\n","                    '}';\n","        }\n","    }\n","\n","    private static final class _C<A, B, C, D, E> extends Choice5<A, B, C, D, E> {\n","\n","        private final C c;\n","\n","        private _C(C c) {\n","            this.c = c;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                           Fn1<? super C, ? extends R> cFn, Fn1<? super D, ? extends R> dFn,\n","                           Fn1<? super E, ? extends R> eFn) {\n","            return cFn.apply(c);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof _C\n","                    && Objects.equals(c, ((_C) other).c);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(c);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Choice5{\" +\n","                    \"c=\" + c +\n","                    '}';\n","        }\n","    }\n","\n","    private static final class _D<A, B, C, D, E> extends Choice5<A, B, C, D, E> {\n","\n","        private final D d;\n","\n","        private _D(D d) {\n","            this.d = d;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                           Fn1<? super C, ? extends R> cFn, Fn1<? super D, ? extends R> dFn,\n","                           Fn1<? super E, ? extends R> eFn) {\n","            return dFn.apply(d);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof _D\n","                    && Objects.equals(d, ((_D) other).d);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(d);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Choice5{\" +\n","                    \"d=\" + d +\n","                    '}';\n","        }\n","    }\n","\n","    private static final class _E<A, B, C, D, E> extends Choice5<A, B, C, D, E> {\n","\n","        private final E e;\n","\n","        private _E(E e) {\n","            this.e = e;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                           Fn1<? super C, ? extends R> cFn, Fn1<? super D, ? extends R> dFn,\n","                           Fn1<? super E, ? extends R> eFn) {\n","            return eFn.apply(e);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof _E\n","                    && Objects.equals(e, ((_E) other).e);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(e);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Choice5{\" +\n","                    \"e=\" + e +\n","                    '}';\n","        }\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.adt.choice;\n","\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.framework.Subjects;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Before;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.*;\n","\n","import static com.jnape.palatable.lambda.adt.choice.Choice5.*;\n","import static com.jnape.palatable.lambda.functor.builtin.Lazy.lazy;\n","import static com.jnape.palatable.traitor.framework.Subjects.subjects;\n","import static org.junit.Assert.assertEquals;\n","\n","@RunWith(Traits.class)\n","public class Choice5Test {\n","\n","    private Choice5<Integer, String, Boolean, Double, Character> a;\n","    private Choice5<Integer, String, Boolean, Double, Character> b;\n","    private Choice5<Integer, String, Boolean, Double, Character> c;\n","    private Choice5<Integer, String, Boolean, Double, Character> d;\n","    private Choice5<Integer, String, Boolean, Double, Character> e;\n","\n","    @Before\n","    public void setUp() {\n","        a = a(1);\n","        b = b(\"two\");\n","        c = c(true);\n","        d = d(4d);\n","        e = e('z');\n","    }\n","\n","    @TestTraits({FunctorLaws.class,\n","                 ApplicativeLaws.class,\n","                 MonadLaws.class,\n","                 BifunctorLaws.class,\n","                 TraversableLaws.class,\n","                 MonadRecLaws.class})\n","    public Subjects<Choice5<String, Integer, Boolean, Character, Double>> testSubjects() {\n","        return subjects(Choice5.a(\"foo\"), Choice5.b(1), Choice5.c(true), Choice5.d('a'), Choice5.e(2d));\n","    }\n","\n","    @Test\n","    public void convergeStaysInChoice() {\n","        assertEquals(Choice4.a(1), a.converge(e -> Choice4.b(e.toString())));\n","        assertEquals(Choice4.b(\"two\"), b.converge(e -> Choice4.b(e.toString())));\n","        assertEquals(Choice4.c(true), c.converge(e -> Choice4.b(e.toString())));\n","        assertEquals(Choice4.d(4d), d.converge(e -> Choice4.b(e.toString())));\n","        assertEquals(Choice4.b(\"z\"), e.converge(e -> Choice4.b(e.toString())));\n","    }\n","\n","    @Test\n","    public void divergeStaysInChoice() {\n","        assertEquals(Choice6.a(1), a.diverge());\n","        assertEquals(Choice6.b(\"two\"), b.diverge());\n","        assertEquals(Choice6.c(true), c.diverge());\n","        assertEquals(Choice6.d(4D), d.diverge());\n","        assertEquals(Choice6.e('z'), e.diverge());\n","    }\n","\n","    @Test\n","    public void lazyZip() {\n","        assertEquals(e(2), e(1).lazyZip(lazy(e(x -> x + 1))).value());\n","        assertEquals(a(1), a(1).lazyZip(lazy(() -> {\n","            throw new AssertionError();\n","        })).value());\n","        assertEquals(b(1), b(1).lazyZip(lazy(() -> {\n","            throw new AssertionError();\n","        })).value());\n","        assertEquals(c(1), c(1).lazyZip(lazy(() -> {\n","            throw new AssertionError();\n","        })).value());\n","        assertEquals(d(1), d(1).lazyZip(lazy(() -> {\n","            throw new AssertionError();\n","        })).value());\n","    }\n","\n","    @Test\n","    public void staticPure() {\n","        Choice5<Byte, Short, Integer, Long, Float> choice = Choice5.<Byte, Short, Integer, Long>pureChoice().apply(5f);\n","        assertEquals(e(5f), choice);\n","    }\n","}"],"method_lines_dic":{"Choice5::::project()":[50,53],"Choice5::::diverge()":[58,61],"Choice5::::converge(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct4<A, B, C, D, ?>>)":[66,70],"Choice5::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends F>)":[75,78],"Choice5::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends F>)":[83,86],"Choice5::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends F>)":[91,94],"Choice5::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends F>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends G>)":[99,103],"Choice5::::pure(F)":[108,111],"Choice5::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends F>, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>)":[116,119],"Choice5::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends F>, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>>)":[124,132],"Choice5::::discardL(com.jnape.palatable.lambda.functor.Applicative<F, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>)":[137,140],"Choice5::::discardR(com.jnape.palatable.lambda.functor.Applicative<F, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>)":[145,148],"Choice5::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.monad.Monad<F, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>>)":[153,156],"Choice5::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<E, F>, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>>)":[161,170],"Choice5::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.functor.Applicative<F, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)":[175,186],"Choice5::::a(A)":[199,201],"Choice5::::b(B)":[214,216],"Choice5::::c(C)":[229,231],"Choice5::::d(D)":[244,246],"Choice5::::e(E)":[259,261],"Choice5::::pureChoice()":[272,274],"Choice5._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)":[284,289],"Choice5._A::::equals(java.lang.Object)":[291,295],"Choice5._A::::hashCode()":[297,300],"Choice5._A::::toString()":[302,307],"Choice5._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)":[318,323],"Choice5._B::::equals(java.lang.Object)":[325,329],"Choice5._B::::hashCode()":[331,334],"Choice5._B::::toString()":[336,341],"Choice5._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)":[352,357],"Choice5._C::::equals(java.lang.Object)":[359,363],"Choice5._C::::hashCode()":[365,368],"Choice5._C::::toString()":[370,375],"Choice5._D::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)":[386,391],"Choice5._D::::equals(java.lang.Object)":[393,397],"Choice5._D::::hashCode()":[399,402],"Choice5._D::::toString()":[404,409],"Choice5._E::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)":[420,425],"Choice5._E::::equals(java.lang.Object)":[427,431],"Choice5._E::::hashCode()":[433,436],"Choice5._E::::toString()":[438,443]},"test_method_lines_dic":{"Choice5Test::::setUp()":[25,32],"Choice5Test::::testSubjects()":[34,42],"Choice5Test::::convergeStaysInChoice()":[44,51],"Choice5Test::::divergeStaysInChoice()":[53,60],"Choice5Test::::lazyZip()":[62,77],"Choice5Test::::staticPure()":[79,83]},"reverse_method_lines_dic":{"50":"Choice5::::project()","51":"Choice5::::project()","52":"Choice5::::project()","53":"Choice5::::project()","58":"Choice5::::diverge()","59":"Choice5::::diverge()","60":"Choice5::::diverge()","61":"Choice5::::diverge()","66":"Choice5::::converge(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct4<A, B, C, D, ?>>)","67":"Choice5::::converge(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct4<A, B, C, D, ?>>)","68":"Choice5::::converge(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct4<A, B, C, D, ?>>)","69":"Choice5::::converge(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct4<A, B, C, D, ?>>)","70":"Choice5::::converge(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct4<A, B, C, D, ?>>)","75":"Choice5::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends F>)","76":"Choice5::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends F>)","77":"Choice5::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends F>)","78":"Choice5::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends F>)","83":"Choice5::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends F>)","84":"Choice5::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends F>)","85":"Choice5::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends F>)","86":"Choice5::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends F>)","91":"Choice5::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends F>)","92":"Choice5::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends F>)","93":"Choice5::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends F>)","94":"Choice5::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends F>)","99":"Choice5::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends F>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends G>)","100":"Choice5::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends F>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends G>)","101":"Choice5::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends F>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends G>)","102":"Choice5::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends F>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends G>)","103":"Choice5::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends F>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends G>)","108":"Choice5::::pure(F)","109":"Choice5::::pure(F)","110":"Choice5::::pure(F)","111":"Choice5::::pure(F)","116":"Choice5::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends F>, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>)","117":"Choice5::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends F>, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>)","118":"Choice5::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends F>, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>)","119":"Choice5::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends F>, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>)","124":"Choice5::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends F>, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>>)","125":"Choice5::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends F>, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>>)","126":"Choice5::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends F>, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>>)","127":"Choice5::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends F>, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>>)","128":"Choice5::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends F>, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>>)","129":"Choice5::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends F>, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>>)","130":"Choice5::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends F>, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>>)","131":"Choice5::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends F>, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>>)","132":"Choice5::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends F>, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>>)","137":"Choice5::::discardL(com.jnape.palatable.lambda.functor.Applicative<F, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>)","138":"Choice5::::discardL(com.jnape.palatable.lambda.functor.Applicative<F, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>)","139":"Choice5::::discardL(com.jnape.palatable.lambda.functor.Applicative<F, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>)","140":"Choice5::::discardL(com.jnape.palatable.lambda.functor.Applicative<F, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>)","145":"Choice5::::discardR(com.jnape.palatable.lambda.functor.Applicative<F, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>)","146":"Choice5::::discardR(com.jnape.palatable.lambda.functor.Applicative<F, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>)","147":"Choice5::::discardR(com.jnape.palatable.lambda.functor.Applicative<F, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>)","148":"Choice5::::discardR(com.jnape.palatable.lambda.functor.Applicative<F, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>)","153":"Choice5::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.monad.Monad<F, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>>)","154":"Choice5::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.monad.Monad<F, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>>)","155":"Choice5::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.monad.Monad<F, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>>)","156":"Choice5::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.monad.Monad<F, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>>)","161":"Choice5::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<E, F>, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>>)","162":"Choice5::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<E, F>, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>>)","163":"Choice5::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<E, F>, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>>)","164":"Choice5::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<E, F>, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>>)","165":"Choice5::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<E, F>, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>>)","166":"Choice5::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<E, F>, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>>)","167":"Choice5::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<E, F>, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>>)","168":"Choice5::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<E, F>, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>>)","169":"Choice5::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<E, F>, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>>)","170":"Choice5::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<E, F>, com.jnape.palatable.lambda.adt.choice.Choice5<A, B, C, D, ?>>>)","175":"Choice5::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.functor.Applicative<F, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","176":"Choice5::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.functor.Applicative<F, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","177":"Choice5::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.functor.Applicative<F, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","178":"Choice5::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.functor.Applicative<F, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","179":"Choice5::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.functor.Applicative<F, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","180":"Choice5::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.functor.Applicative<F, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","181":"Choice5::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.functor.Applicative<F, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","182":"Choice5::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.functor.Applicative<F, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","183":"Choice5::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.functor.Applicative<F, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","184":"Choice5::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.functor.Applicative<F, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","185":"Choice5::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.functor.Applicative<F, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","186":"Choice5::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.functor.Applicative<F, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","199":"Choice5::::a(A)","200":"Choice5::::a(A)","201":"Choice5::::a(A)","214":"Choice5::::b(B)","215":"Choice5::::b(B)","216":"Choice5::::b(B)","229":"Choice5::::c(C)","230":"Choice5::::c(C)","231":"Choice5::::c(C)","244":"Choice5::::d(D)","245":"Choice5::::d(D)","246":"Choice5::::d(D)","259":"Choice5::::e(E)","260":"Choice5::::e(E)","261":"Choice5::::e(E)","272":"Choice5::::pureChoice()","273":"Choice5::::pureChoice()","274":"Choice5::::pureChoice()","284":"Choice5._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)","285":"Choice5._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)","286":"Choice5._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)","287":"Choice5._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)","288":"Choice5._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)","289":"Choice5._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)","291":"Choice5._A::::equals(java.lang.Object)","292":"Choice5._A::::equals(java.lang.Object)","293":"Choice5._A::::equals(java.lang.Object)","294":"Choice5._A::::equals(java.lang.Object)","295":"Choice5._A::::equals(java.lang.Object)","297":"Choice5._A::::hashCode()","298":"Choice5._A::::hashCode()","299":"Choice5._A::::hashCode()","300":"Choice5._A::::hashCode()","302":"Choice5._A::::toString()","303":"Choice5._A::::toString()","304":"Choice5._A::::toString()","305":"Choice5._A::::toString()","306":"Choice5._A::::toString()","307":"Choice5._A::::toString()","318":"Choice5._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)","319":"Choice5._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)","320":"Choice5._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)","321":"Choice5._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)","322":"Choice5._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)","323":"Choice5._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)","325":"Choice5._B::::equals(java.lang.Object)","326":"Choice5._B::::equals(java.lang.Object)","327":"Choice5._B::::equals(java.lang.Object)","328":"Choice5._B::::equals(java.lang.Object)","329":"Choice5._B::::equals(java.lang.Object)","331":"Choice5._B::::hashCode()","332":"Choice5._B::::hashCode()","333":"Choice5._B::::hashCode()","334":"Choice5._B::::hashCode()","336":"Choice5._B::::toString()","337":"Choice5._B::::toString()","338":"Choice5._B::::toString()","339":"Choice5._B::::toString()","340":"Choice5._B::::toString()","341":"Choice5._B::::toString()","352":"Choice5._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)","353":"Choice5._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)","354":"Choice5._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)","355":"Choice5._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)","356":"Choice5._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)","357":"Choice5._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)","359":"Choice5._C::::equals(java.lang.Object)","360":"Choice5._C::::equals(java.lang.Object)","361":"Choice5._C::::equals(java.lang.Object)","362":"Choice5._C::::equals(java.lang.Object)","363":"Choice5._C::::equals(java.lang.Object)","365":"Choice5._C::::hashCode()","366":"Choice5._C::::hashCode()","367":"Choice5._C::::hashCode()","368":"Choice5._C::::hashCode()","370":"Choice5._C::::toString()","371":"Choice5._C::::toString()","372":"Choice5._C::::toString()","373":"Choice5._C::::toString()","374":"Choice5._C::::toString()","375":"Choice5._C::::toString()","386":"Choice5._D::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)","387":"Choice5._D::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)","388":"Choice5._D::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)","389":"Choice5._D::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)","390":"Choice5._D::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)","391":"Choice5._D::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)","393":"Choice5._D::::equals(java.lang.Object)","394":"Choice5._D::::equals(java.lang.Object)","395":"Choice5._D::::equals(java.lang.Object)","396":"Choice5._D::::equals(java.lang.Object)","397":"Choice5._D::::equals(java.lang.Object)","399":"Choice5._D::::hashCode()","400":"Choice5._D::::hashCode()","401":"Choice5._D::::hashCode()","402":"Choice5._D::::hashCode()","404":"Choice5._D::::toString()","405":"Choice5._D::::toString()","406":"Choice5._D::::toString()","407":"Choice5._D::::toString()","408":"Choice5._D::::toString()","409":"Choice5._D::::toString()","420":"Choice5._E::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)","421":"Choice5._E::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)","422":"Choice5._E::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)","423":"Choice5._E::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)","424":"Choice5._E::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)","425":"Choice5._E::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)","427":"Choice5._E::::equals(java.lang.Object)","428":"Choice5._E::::equals(java.lang.Object)","429":"Choice5._E::::equals(java.lang.Object)","430":"Choice5._E::::equals(java.lang.Object)","431":"Choice5._E::::equals(java.lang.Object)","433":"Choice5._E::::hashCode()","434":"Choice5._E::::hashCode()","435":"Choice5._E::::hashCode()","436":"Choice5._E::::hashCode()","438":"Choice5._E::::toString()","439":"Choice5._E::::toString()","440":"Choice5._E::::toString()","441":"Choice5._E::::toString()","442":"Choice5._E::::toString()","443":"Choice5._E::::toString()"},"test_reverse_method_lines_dic":{"25":"Choice5Test::::setUp()","26":"Choice5Test::::setUp()","27":"Choice5Test::::setUp()","28":"Choice5Test::::setUp()","29":"Choice5Test::::setUp()","30":"Choice5Test::::setUp()","31":"Choice5Test::::setUp()","32":"Choice5Test::::setUp()","34":"Choice5Test::::testSubjects()","35":"Choice5Test::::testSubjects()","36":"Choice5Test::::testSubjects()","37":"Choice5Test::::testSubjects()","38":"Choice5Test::::testSubjects()","39":"Choice5Test::::testSubjects()","40":"Choice5Test::::testSubjects()","41":"Choice5Test::::testSubjects()","42":"Choice5Test::::testSubjects()","44":"Choice5Test::::convergeStaysInChoice()","45":"Choice5Test::::convergeStaysInChoice()","46":"Choice5Test::::convergeStaysInChoice()","47":"Choice5Test::::convergeStaysInChoice()","48":"Choice5Test::::convergeStaysInChoice()","49":"Choice5Test::::convergeStaysInChoice()","50":"Choice5Test::::convergeStaysInChoice()","51":"Choice5Test::::convergeStaysInChoice()","53":"Choice5Test::::divergeStaysInChoice()","54":"Choice5Test::::divergeStaysInChoice()","55":"Choice5Test::::divergeStaysInChoice()","56":"Choice5Test::::divergeStaysInChoice()","57":"Choice5Test::::divergeStaysInChoice()","58":"Choice5Test::::divergeStaysInChoice()","59":"Choice5Test::::divergeStaysInChoice()","60":"Choice5Test::::divergeStaysInChoice()","62":"Choice5Test::::lazyZip()","63":"Choice5Test::::lazyZip()","64":"Choice5Test::::lazyZip()","65":"Choice5Test::::lazyZip()","66":"Choice5Test::::lazyZip()","67":"Choice5Test::::lazyZip()","68":"Choice5Test::::lazyZip()","69":"Choice5Test::::lazyZip()","70":"Choice5Test::::lazyZip()","71":"Choice5Test::::lazyZip()","72":"Choice5Test::::lazyZip()","73":"Choice5Test::::lazyZip()","74":"Choice5Test::::lazyZip()","75":"Choice5Test::::lazyZip()","76":"Choice5Test::::lazyZip()","77":"Choice5Test::::lazyZip()","79":"Choice5Test::::staticPure()","80":"Choice5Test::::staticPure()","81":"Choice5Test::::staticPure()","82":"Choice5Test::::staticPure()","83":"Choice5Test::::staticPure()"},"tests":[{"test_lines":[25,32],"covered_lines":[42,43,200,215,230,245,260,280,281,282,314,315,316,348,349,350,382,383,384,416,417,418]},{"test_lines":[34,42],"covered_lines":[42,43,200,215,230,245,260,280,281,282,314,315,316,348,349,350,382,383,384,416,417,418]},{"test_lines":[44,51],"covered_lines":[42,43,68,69,200,215,230,245,260,280,281,282,288,314,315,316,322,348,349,350,356,382,383,384,390,416,417,418,424]},{"test_lines":[53,60],"covered_lines":[42,43,60,200,215,230,245,260,280,281,282,288,314,315,316,322,348,349,350,356,382,383,384,390,416,417,418,424]},{"test_lines":[62,77],"covered_lines":[42,43,77,110,127,128,129,130,131,155,200,215,230,245,260,280,281,282,288,293,294,314,315,316,322,327,328,348,349,350,356,361,362,382,383,384,390,395,396,416,417,418,424,429,430]},{"test_lines":[79,83],"covered_lines":[42,43,200,215,230,245,260,273,280,281,282,314,315,316,348,349,350,382,383,384,416,417,418,429,430]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/adt/choice/Choice8.java":{"class_content":["package com.jnape.palatable.lambda.adt.choice;\n","\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.adt.coproduct.CoProduct7;\n","import com.jnape.palatable.lambda.adt.coproduct.CoProduct8;\n","import com.jnape.palatable.lambda.adt.hlist.HList;\n","import com.jnape.palatable.lambda.adt.hlist.Tuple8;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.recursion.RecursiveResult;\n","import com.jnape.palatable.lambda.functions.specialized.Pure;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","import com.jnape.palatable.lambda.functor.Bifunctor;\n","import com.jnape.palatable.lambda.functor.builtin.Lazy;\n","import com.jnape.palatable.lambda.monad.Monad;\n","import com.jnape.palatable.lambda.monad.MonadRec;\n","import com.jnape.palatable.lambda.traversable.Traversable;\n","\n","import java.util.Objects;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Into8.into8;\n","import static com.jnape.palatable.lambda.functions.recursion.RecursiveResult.terminate;\n","import static com.jnape.palatable.lambda.functions.recursion.Trampoline.trampoline;\n","import static com.jnape.palatable.lambda.functor.builtin.Lazy.lazy;\n","\n","/**\n"," * Canonical ADT representation of {@link CoProduct8}.\n"," *\n"," * @param <A> the first possible type\n"," * @param <B> the second possible type\n"," * @param <C> the third possible type\n"," * @param <D> the fourth possible type\n"," * @param <E> the fifth possible type\n"," * @param <F> the sixth possible type\n"," * @param <G> the seventh possible type\n"," * @param <H> the eighth possible type\n"," * @see Choice7\n"," */\n","public abstract class Choice8<A, B, C, D, E, F, G, H> implements\n","        CoProduct8<A, B, C, D, E, F, G, H, Choice8<A, B, C, D, E, F, G, H>>,\n","        MonadRec<H, Choice8<A, B, C, D, E, F, G, ?>>,\n","        Bifunctor<G, H, Choice8<A, B, C, D, E, F, ?, ?>>,\n","        Traversable<H, Choice8<A, B, C, D, E, F, G, ?>> {\n","\n","    private Choice8() {\n","    }\n","\n","    /**\n","     * Specialize this choice's projection to a {@link Tuple8}.\n","     *\n","     * @return a {@link Tuple8}\n","     */\n","    @Override\n","    public Tuple8<Maybe<A>, Maybe<B>, Maybe<C>, Maybe<D>, Maybe<E>, Maybe<F>, Maybe<G>, Maybe<H>> project() {\n","        return into8(HList::tuple, CoProduct8.super.project());\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Choice7<A, B, C, D, E, F, G> converge(\n","            Fn1<? super H, ? extends CoProduct7<A, B, C, D, E, F, G, ?>> convergenceFn) {\n","        return match(Choice7::a, Choice7::b, Choice7::c, Choice7::d, Choice7::e, Choice7::f, Choice7::g,\n","                     convergenceFn.fmap(cp7 -> cp7.match(Choice7::a, Choice7::b, Choice7::c, Choice7::d, Choice7::e,\n","                                                         Choice7::f, Choice7::g)));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <I> Choice8<A, B, C, D, E, F, G, I> fmap(Fn1<? super H, ? extends I> fn) {\n","        return MonadRec.super.<I>fmap(fn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <I> Choice8<A, B, C, D, E, F, I, H> biMapL(Fn1<? super G, ? extends I> fn) {\n","        return (Choice8<A, B, C, D, E, F, I, H>) Bifunctor.super.<I>biMapL(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <I> Choice8<A, B, C, D, E, F, G, I> biMapR(Fn1<? super H, ? extends I> fn) {\n","        return (Choice8<A, B, C, D, E, F, G, I>) Bifunctor.super.<I>biMapR(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <I, J> Choice8<A, B, C, D, E, F, I, J> biMap(Fn1<? super G, ? extends I> lFn,\n","                                                        Fn1<? super H, ? extends J> rFn) {\n","        return match(Choice8::a, Choice8::b, Choice8::c, Choice8::d, Choice8::e, Choice8::f, g -> g(lFn.apply(g)), h -> h(rFn.apply(h)));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <I> Choice8<A, B, C, D, E, F, G, I> pure(I i) {\n","        return h(i);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <I> Choice8<A, B, C, D, E, F, G, I> zip(\n","            Applicative<Fn1<? super H, ? extends I>, Choice8<A, B, C, D, E, F, G, ?>> appFn) {\n","        return MonadRec.super.zip(appFn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <I> Lazy<Choice8<A, B, C, D, E, F, G, I>> lazyZip(\n","            Lazy<? extends Applicative<Fn1<? super H, ? extends I>, Choice8<A, B, C, D, E, F, G, ?>>> lazyAppFn) {\n","        return match(a -> lazy(a(a)),\n","                     b -> lazy(b(b)),\n","                     c -> lazy(c(c)),\n","                     d -> lazy(d(d)),\n","                     e -> lazy(e(e)),\n","                     f -> lazy(f(f)),\n","                     g -> lazy(g(g)),\n","                     h -> lazyAppFn.fmap(choiceF -> choiceF.<I>fmap(f -> f.apply(h)).coerce()));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <I> Choice8<A, B, C, D, E, F, G, I> discardL(Applicative<I, Choice8<A, B, C, D, E, F, G, ?>> appB) {\n","        return MonadRec.super.discardL(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <I> Choice8<A, B, C, D, E, F, G, H> discardR(Applicative<I, Choice8<A, B, C, D, E, F, G, ?>> appB) {\n","        return MonadRec.super.discardR(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <I> Choice8<A, B, C, D, E, F, G, I> flatMap(\n","            Fn1<? super H, ? extends Monad<I, Choice8<A, B, C, D, E, F, G, ?>>> fn) {\n","        return match(Choice8::a, Choice8::b, Choice8::c, Choice8::d, Choice8::e, Choice8::f, Choice8::g, h -> fn.apply(h).coerce());\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <I> Choice8<A, B, C, D, E, F, G, I> trampolineM(\n","            Fn1<? super H, ? extends MonadRec<RecursiveResult<H, I>, Choice8<A, B, C, D, E, F, G, ?>>> fn) {\n","        return flatMap(trampoline(h -> fn.apply(h).<Choice8<A, B, C, D, E, F, G, RecursiveResult<H, I>>>coerce().match(\n","                a -> terminate(a(a)),\n","                b -> terminate(b(b)),\n","                c -> terminate(c(c)),\n","                d -> terminate(d(d)),\n","                e -> terminate(e(e)),\n","                f -> terminate(f(f)),\n","                g -> terminate(g(g)),\n","                hRec -> hRec.fmap(Choice8::h))));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <I, App extends Applicative<?, App>, TravB extends Traversable<I, Choice8<A, B, C, D, E, F, G, ?>>,\n","            AppTrav extends Applicative<TravB, App>> AppTrav traverse(Fn1<? super H, ? extends Applicative<I, App>> fn,\n","                                                                      Fn1<? super TravB, ? extends AppTrav> pure) {\n","        return match(a -> pure.apply(Choice8.<A, B, C, D, E, F, G, I>a(a).<TravB>coerce()),\n","                     b -> pure.apply(Choice8.<A, B, C, D, E, F, G, I>b(b).<TravB>coerce()),\n","                     c -> pure.apply(Choice8.<A, B, C, D, E, F, G, I>c(c).<TravB>coerce()),\n","                     d -> pure.apply(Choice8.<A, B, C, D, E, F, G, I>d(d).<TravB>coerce()),\n","                     e -> pure.apply(Choice8.<A, B, C, D, E, F, G, I>e(e).<TravB>coerce()),\n","                     f -> pure.apply(Choice8.<A, B, C, D, E, F, G, I>f(f).<TravB>coerce()),\n","                     g -> pure.apply(Choice8.<A, B, C, D, E, F, G, I>g(g).<TravB>coerce()),\n","                     h -> fn.apply(h).<Choice8<A, B, C, D, E, F, G, I>>fmap(Choice8::h)\n","                             .<TravB>fmap(Applicative::coerce))\n","                .coerce();\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a value of type <code>A</code> in a {@link Choice8}.\n","     *\n","     * @param a   the value\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @param <C> the third possible type\n","     * @param <D> the fourth possible type\n","     * @param <E> the fifth possible type\n","     * @param <F> the sixth possible type\n","     * @param <G> the seventh possible type\n","     * @param <H> the eighth possible type\n","     * @return the wrapped value as a {@link Choice8}&lt;A, B, C, D, E, F, G, H&gt;\n","     */\n","    public static <A, B, C, D, E, F, G, H> Choice8<A, B, C, D, E, F, G, H> a(A a) {\n","        return new _A<>(a);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a value of type <code>B</code> in a {@link Choice8}.\n","     *\n","     * @param b   the value\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @param <C> the third possible type\n","     * @param <D> the fourth possible type\n","     * @param <E> the fifth possible type\n","     * @param <F> the sixth possible type\n","     * @param <G> the seventh possible type\n","     * @param <H> the eighth possible type\n","     * @return the wrapped value as a {@link Choice8}&lt;A, B, C, D, E, F, G, H&gt;\n","     */\n","    public static <A, B, C, D, E, F, G, H> Choice8<A, B, C, D, E, F, G, H> b(B b) {\n","        return new _B<>(b);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a value of type <code>C</code> in a {@link Choice8}.\n","     *\n","     * @param c   the value\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @param <C> the third possible type\n","     * @param <D> the fourth possible type\n","     * @param <E> the fifth possible type\n","     * @param <F> the sixth possible type\n","     * @param <G> the seventh possible type\n","     * @param <H> the eighth possible type\n","     * @return the wrapped value as a {@link Choice8}&lt;A, B, C, D, E, F, G, H&gt;\n","     */\n","    public static <A, B, C, D, E, F, G, H> Choice8<A, B, C, D, E, F, G, H> c(C c) {\n","        return new _C<>(c);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a value of type <code>D</code> in a {@link Choice8}.\n","     *\n","     * @param d   the value\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @param <C> the third possible type\n","     * @param <D> the fourth possible type\n","     * @param <E> the fifth possible type\n","     * @param <F> the sixth possible type\n","     * @param <G> the seventh possible type\n","     * @param <H> the eighth possible type\n","     * @return the wrapped value as a {@link Choice8}&lt;A, B, C, D, E, F, G, H&gt;\n","     */\n","    public static <A, B, C, D, E, F, G, H> Choice8<A, B, C, D, E, F, G, H> d(D d) {\n","        return new _D<>(d);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a value of type <code>E</code> in a {@link Choice8}.\n","     *\n","     * @param e   the value\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @param <C> the third possible type\n","     * @param <D> the fourth possible type\n","     * @param <E> the fifth possible type\n","     * @param <F> the sixth possible type\n","     * @param <G> the seventh possible type\n","     * @param <H> the eighth possible type\n","     * @return the wrapped value as a {@link Choice8}&lt;A, B, C, D, E, F, G, H&gt;\n","     */\n","    public static <A, B, C, D, E, F, G, H> Choice8<A, B, C, D, E, F, G, H> e(E e) {\n","        return new _E<>(e);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a value of type <code>F</code> in a {@link Choice8}.\n","     *\n","     * @param f   the value\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @param <C> the third possible type\n","     * @param <D> the fourth possible type\n","     * @param <E> the fifth possible type\n","     * @param <F> the sixth possible type\n","     * @param <G> the seventh possible type\n","     * @param <H> the eighth possible type\n","     * @return the wrapped value as a {@link Choice8}&lt;A, B, C, D, E, F, G, H&gt;\n","     */\n","    public static <A, B, C, D, E, F, G, H> Choice8<A, B, C, D, E, F, G, H> f(F f) {\n","        return new _F<>(f);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a value of type <code>G</code> in a {@link Choice8}.\n","     *\n","     * @param g   the value\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @param <C> the third possible type\n","     * @param <D> the fourth possible type\n","     * @param <E> the fifth possible type\n","     * @param <F> the sixth possible type\n","     * @param <G> the seventh possible type\n","     * @param <H> the eighth possible type\n","     * @return the wrapped value as a {@link Choice8}&lt;A, B, C, D, E, F, G, H&gt;\n","     */\n","    public static <A, B, C, D, E, F, G, H> Choice8<A, B, C, D, E, F, G, H> g(G g) {\n","        return new _G<>(g);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a value of type <code>H</code> in a {@link Choice8}.\n","     *\n","     * @param h   the value\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @param <C> the third possible type\n","     * @param <D> the fourth possible type\n","     * @param <E> the fifth possible type\n","     * @param <F> the sixth possible type\n","     * @param <G> the seventh possible type\n","     * @param <H> the eighth possible type\n","     * @return the wrapped value as a {@link Choice8}&lt;A, B, C, D, E, F, G, H&gt;\n","     */\n","    public static <A, B, C, D, E, F, G, H> Choice8<A, B, C, D, E, F, G, H> h(H h) {\n","        return new _H<>(h);\n","    }\n","\n","    /**\n","     * The canonical {@link Pure} instance for {@link Choice8}.\n","     *\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @param <C> the third possible type\n","     * @param <D> the fourth possible type\n","     * @param <E> the fifth possible type\n","     * @param <F> the sixth possible type\n","     * @param <G> the seventh possible type\n","     * @return the {@link Pure} instance\n","     */\n","    public static <A, B, C, D, E, F, G> Pure<Choice8<A, B, C, D, E, F, G, ?>> pureChoice() {\n","        return Choice8::h;\n","    }\n","\n","    private static final class _A<A, B, C, D, E, F, G, H> extends Choice8<A, B, C, D, E, F, G, H> {\n","\n","        private final A a;\n","\n","        private _A(A a) {\n","            this.a = a;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                           Fn1<? super C, ? extends R> cFn, Fn1<? super D, ? extends R> dFn,\n","                           Fn1<? super E, ? extends R> eFn, Fn1<? super F, ? extends R> fFn,\n","                           Fn1<? super G, ? extends R> gFn, Fn1<? super H, ? extends R> hFn) {\n","            return aFn.apply(a);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof _A\n","                    && Objects.equals(a, ((_A) other).a);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(a);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Choice8{a=\" + a + '}';\n","        }\n","    }\n","\n","    private static final class _B<A, B, C, D, E, F, G, H> extends Choice8<A, B, C, D, E, F, G, H> {\n","\n","        private final B b;\n","\n","        private _B(B b) {\n","            this.b = b;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                           Fn1<? super C, ? extends R> cFn, Fn1<? super D, ? extends R> dFn,\n","                           Fn1<? super E, ? extends R> eFn, Fn1<? super F, ? extends R> fFn,\n","                           Fn1<? super G, ? extends R> gFn, Fn1<? super H, ? extends R> hFn) {\n","            return bFn.apply(b);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof _B\n","                    && Objects.equals(b, ((_B) other).b);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(b);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Choice8{b=\" + b + '}';\n","        }\n","    }\n","\n","    private static final class _C<A, B, C, D, E, F, G, H> extends Choice8<A, B, C, D, E, F, G, H> {\n","\n","        private final C c;\n","\n","        private _C(C c) {\n","            this.c = c;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                           Fn1<? super C, ? extends R> cFn, Fn1<? super D, ? extends R> dFn,\n","                           Fn1<? super E, ? extends R> eFn, Fn1<? super F, ? extends R> fFn,\n","                           Fn1<? super G, ? extends R> gFn, Fn1<? super H, ? extends R> hFn) {\n","            return cFn.apply(c);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof _C\n","                    && Objects.equals(c, ((_C) other).c);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(c);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Choice8{c=\" + c + '}';\n","        }\n","    }\n","\n","    private static final class _D<A, B, C, D, E, F, G, H> extends Choice8<A, B, C, D, E, F, G, H> {\n","\n","        private final D d;\n","\n","        private _D(D d) {\n","            this.d = d;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                           Fn1<? super C, ? extends R> cFn, Fn1<? super D, ? extends R> dFn,\n","                           Fn1<? super E, ? extends R> eFn, Fn1<? super F, ? extends R> fFn,\n","                           Fn1<? super G, ? extends R> gFn, Fn1<? super H, ? extends R> hFn) {\n","            return dFn.apply(d);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof _D\n","                    && Objects.equals(d, ((_D) other).d);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(d);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Choice8{d=\" + d + '}';\n","        }\n","    }\n","\n","    private static final class _E<A, B, C, D, E, F, G, H> extends Choice8<A, B, C, D, E, F, G, H> {\n","\n","        private final E e;\n","\n","        private _E(E e) {\n","            this.e = e;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                           Fn1<? super C, ? extends R> cFn, Fn1<? super D, ? extends R> dFn,\n","                           Fn1<? super E, ? extends R> eFn, Fn1<? super F, ? extends R> fFn,\n","                           Fn1<? super G, ? extends R> gFn, Fn1<? super H, ? extends R> hFn) {\n","            return eFn.apply(e);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof _E\n","                    && Objects.equals(e, ((_E) other).e);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(e);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Choice8{e=\" + e + '}';\n","        }\n","    }\n","\n","    private static final class _F<A, B, C, D, E, F, G, H> extends Choice8<A, B, C, D, E, F, G, H> {\n","\n","        private final F f;\n","\n","        private _F(F f) {\n","            this.f = f;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                           Fn1<? super C, ? extends R> cFn, Fn1<? super D, ? extends R> dFn,\n","                           Fn1<? super E, ? extends R> eFn, Fn1<? super F, ? extends R> fFn,\n","                           Fn1<? super G, ? extends R> gFn, Fn1<? super H, ? extends R> hFn) {\n","            return fFn.apply(f);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof _F\n","                    && Objects.equals(f, ((_F) other).f);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(f);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Choice8{f=\" + f + '}';\n","        }\n","    }\n","\n","    private static final class _G<A, B, C, D, E, F, G, H> extends Choice8<A, B, C, D, E, F, G, H> {\n","\n","        private final G g;\n","\n","        private _G(G g) {\n","            this.g = g;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                           Fn1<? super C, ? extends R> cFn, Fn1<? super D, ? extends R> dFn,\n","                           Fn1<? super E, ? extends R> eFn, Fn1<? super F, ? extends R> fFn,\n","                           Fn1<? super G, ? extends R> gFn, Fn1<? super H, ? extends R> hFn) {\n","            return gFn.apply(g);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof _G\n","                    && Objects.equals(g, ((_G) other).g);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(g);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Choice8{g=\" + g + '}';\n","        }\n","    }\n","\n","    private static final class _H<A, B, C, D, E, F, G, H> extends Choice8<A, B, C, D, E, F, G, H> {\n","\n","        private final H h;\n","\n","        private _H(H h) {\n","            this.h = h;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                           Fn1<? super C, ? extends R> cFn, Fn1<? super D, ? extends R> dFn,\n","                           Fn1<? super E, ? extends R> eFn, Fn1<? super F, ? extends R> fFn,\n","                           Fn1<? super G, ? extends R> gFn, Fn1<? super H, ? extends R> hFn) {\n","            return hFn.apply(h);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof _H\n","                    && Objects.equals(h, ((_H) other).h);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(h);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Choice8{h=\" + h + '}';\n","        }\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.adt.choice;\n","\n","import com.jnape.palatable.lambda.adt.coproduct.CoProduct7;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.framework.Subjects;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Before;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.ApplicativeLaws;\n","import testsupport.traits.BifunctorLaws;\n","import testsupport.traits.FunctorLaws;\n","import testsupport.traits.MonadLaws;\n","import testsupport.traits.MonadRecLaws;\n","import testsupport.traits.TraversableLaws;\n","\n","import static com.jnape.palatable.lambda.adt.choice.Choice8.a;\n","import static com.jnape.palatable.lambda.adt.choice.Choice8.b;\n","import static com.jnape.palatable.lambda.adt.choice.Choice8.c;\n","import static com.jnape.palatable.lambda.adt.choice.Choice8.d;\n","import static com.jnape.palatable.lambda.adt.choice.Choice8.e;\n","import static com.jnape.palatable.lambda.adt.choice.Choice8.f;\n","import static com.jnape.palatable.lambda.adt.choice.Choice8.g;\n","import static com.jnape.palatable.lambda.adt.choice.Choice8.h;\n","import static com.jnape.palatable.lambda.functor.builtin.Lazy.lazy;\n","import static com.jnape.palatable.traitor.framework.Subjects.subjects;\n","import static org.junit.Assert.assertEquals;\n","\n","@RunWith(Traits.class)\n","public class Choice8Test {\n","\n","    private Choice8<Integer, String, Boolean, Double, Character, Long, Float, Short> a;\n","    private Choice8<Integer, String, Boolean, Double, Character, Long, Float, Short> b;\n","    private Choice8<Integer, String, Boolean, Double, Character, Long, Float, Short> c;\n","    private Choice8<Integer, String, Boolean, Double, Character, Long, Float, Short> d;\n","    private Choice8<Integer, String, Boolean, Double, Character, Long, Float, Short> e;\n","    private Choice8<Integer, String, Boolean, Double, Character, Long, Float, Short> f;\n","    private Choice8<Integer, String, Boolean, Double, Character, Long, Float, Short> g;\n","    private Choice8<Integer, String, Boolean, Double, Character, Long, Float, Short> h;\n","\n","    @Before\n","    public void setUp() {\n","        a = a(1);\n","        b = b(\"two\");\n","        c = c(true);\n","        d = d(4d);\n","        e = e('z');\n","        f = f(5L);\n","        g = g(6F);\n","        h = h((short) 7);\n","    }\n","\n","    @TestTraits({\n","            FunctorLaws.class,\n","            ApplicativeLaws.class,\n","            MonadLaws.class,\n","            BifunctorLaws.class,\n","            TraversableLaws.class,\n","            MonadRecLaws.class})\n","    public Subjects<Choice8<String, Integer, Boolean, Character, Double, Long, Float, Short>> testSubjects() {\n","        return subjects(a(\"foo\"), b(1), c(true), d('a'), e(2d), f(5L), g(6F), h((short) 7));\n","    }\n","\n","    @Test\n","    public void convergeStaysInChoice() {\n","        Fn1<Short, CoProduct7<Integer, String, Boolean, Double, Character, Long, Float, ?>> convergenceFn =\n","                h -> Choice7.b(h.toString());\n","\n","        assertEquals(Choice7.a(1), a.converge(convergenceFn));\n","        assertEquals(Choice7.b(\"two\"), b.converge(convergenceFn));\n","        assertEquals(Choice7.c(true), c.converge(convergenceFn));\n","        assertEquals(Choice7.d(4d), d.converge(convergenceFn));\n","        assertEquals(Choice7.e('z'), e.converge(convergenceFn));\n","        assertEquals(Choice7.f(5L), f.converge(convergenceFn));\n","        assertEquals(Choice7.g(6F), g.converge(convergenceFn));\n","        assertEquals(Choice7.b(\"7\"), h.converge(convergenceFn));\n","    }\n","\n","    @Test\n","    public void lazyZip() {\n","        assertEquals(h(2), h(1).lazyZip(lazy(h(x -> x + 1))).value());\n","        assertEquals(a(1), a(1).lazyZip(lazy(() -> {\n","            throw new AssertionError();\n","        })).value());\n","        assertEquals(b(1), b(1).lazyZip(lazy(() -> {\n","            throw new AssertionError();\n","        })).value());\n","        assertEquals(c(1), c(1).lazyZip(lazy(() -> {\n","            throw new AssertionError();\n","        })).value());\n","        assertEquals(d(1), d(1).lazyZip(lazy(() -> {\n","            throw new AssertionError();\n","        })).value());\n","        assertEquals(e(1), e(1).lazyZip(lazy(() -> {\n","            throw new AssertionError();\n","        })).value());\n","        assertEquals(f(1), f(1).lazyZip(lazy(() -> {\n","            throw new AssertionError();\n","        })).value());\n","        assertEquals(g(1), g(1).lazyZip(lazy(() -> {\n","            throw new AssertionError();\n","        })).value());\n","    }\n","\n","    @Test\n","    public void staticPure() {\n","        Choice8<Byte, Short, Integer, Long, Float, Double, Boolean, Character> choice =\n","                Choice8.<Byte, Short, Integer, Long, Float, Double, Boolean>pureChoice().apply('c');\n","        assertEquals(h('c'), choice);\n","    }\n","}"],"method_lines_dic":{"Choice8::::project()":[52,55],"Choice8::::converge(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct7<A, B, C, D, E, F, G, ?>>)":[60,66],"Choice8::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends I>)":[71,74],"Choice8::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends I>)":[79,82],"Choice8::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends I>)":[87,90],"Choice8::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends I>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends J>)":[95,99],"Choice8::::pure(I)":[104,107],"Choice8::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends I>, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>)":[112,116],"Choice8::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends I>, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>>)":[121,132],"Choice8::::discardL(com.jnape.palatable.lambda.functor.Applicative<I, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>)":[137,140],"Choice8::::discardR(com.jnape.palatable.lambda.functor.Applicative<I, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>)":[145,148],"Choice8::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.monad.Monad<I, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>>)":[153,157],"Choice8::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<H, I>, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>>)":[162,174],"Choice8::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.functor.Applicative<I, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)":[179,193],"Choice8::::a(A)":[209,211],"Choice8::::b(B)":[227,229],"Choice8::::c(C)":[245,247],"Choice8::::d(D)":[263,265],"Choice8::::e(E)":[281,283],"Choice8::::f(F)":[299,301],"Choice8::::g(G)":[317,319],"Choice8::::h(H)":[335,337],"Choice8::::pureChoice()":[351,353],"Choice8._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)":[363,369],"Choice8._A::::equals(java.lang.Object)":[371,375],"Choice8._A::::hashCode()":[377,380],"Choice8._A::::toString()":[382,385],"Choice8._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)":[396,402],"Choice8._B::::equals(java.lang.Object)":[404,408],"Choice8._B::::hashCode()":[410,413],"Choice8._B::::toString()":[415,418],"Choice8._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)":[429,435],"Choice8._C::::equals(java.lang.Object)":[437,441],"Choice8._C::::hashCode()":[443,446],"Choice8._C::::toString()":[448,451],"Choice8._D::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)":[462,468],"Choice8._D::::equals(java.lang.Object)":[470,474],"Choice8._D::::hashCode()":[476,479],"Choice8._D::::toString()":[481,484],"Choice8._E::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)":[495,501],"Choice8._E::::equals(java.lang.Object)":[503,507],"Choice8._E::::hashCode()":[509,512],"Choice8._E::::toString()":[514,517],"Choice8._F::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)":[528,534],"Choice8._F::::equals(java.lang.Object)":[536,540],"Choice8._F::::hashCode()":[542,545],"Choice8._F::::toString()":[547,550],"Choice8._G::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)":[561,567],"Choice8._G::::equals(java.lang.Object)":[569,573],"Choice8._G::::hashCode()":[575,578],"Choice8._G::::toString()":[580,583],"Choice8._H::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)":[594,600],"Choice8._H::::equals(java.lang.Object)":[602,606],"Choice8._H::::hashCode()":[608,611],"Choice8._H::::toString()":[613,616]},"test_method_lines_dic":{"Choice8Test::::setUp()":[42,52],"Choice8Test::::testSubjects()":[54,63],"Choice8Test::::convergeStaysInChoice()":[65,78],"Choice8Test::::lazyZip()":[80,104],"Choice8Test::::staticPure()":[106,111]},"reverse_method_lines_dic":{"52":"Choice8::::project()","53":"Choice8::::project()","54":"Choice8::::project()","55":"Choice8::::project()","60":"Choice8::::converge(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct7<A, B, C, D, E, F, G, ?>>)","61":"Choice8::::converge(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct7<A, B, C, D, E, F, G, ?>>)","62":"Choice8::::converge(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct7<A, B, C, D, E, F, G, ?>>)","63":"Choice8::::converge(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct7<A, B, C, D, E, F, G, ?>>)","64":"Choice8::::converge(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct7<A, B, C, D, E, F, G, ?>>)","65":"Choice8::::converge(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct7<A, B, C, D, E, F, G, ?>>)","66":"Choice8::::converge(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct7<A, B, C, D, E, F, G, ?>>)","71":"Choice8::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends I>)","72":"Choice8::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends I>)","73":"Choice8::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends I>)","74":"Choice8::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends I>)","79":"Choice8::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends I>)","80":"Choice8::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends I>)","81":"Choice8::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends I>)","82":"Choice8::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends I>)","87":"Choice8::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends I>)","88":"Choice8::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends I>)","89":"Choice8::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends I>)","90":"Choice8::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends I>)","95":"Choice8::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends I>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends J>)","96":"Choice8::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends I>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends J>)","97":"Choice8::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends I>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends J>)","98":"Choice8::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends I>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends J>)","99":"Choice8::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends I>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends J>)","104":"Choice8::::pure(I)","105":"Choice8::::pure(I)","106":"Choice8::::pure(I)","107":"Choice8::::pure(I)","112":"Choice8::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends I>, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>)","113":"Choice8::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends I>, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>)","114":"Choice8::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends I>, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>)","115":"Choice8::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends I>, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>)","116":"Choice8::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends I>, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>)","121":"Choice8::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends I>, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>>)","122":"Choice8::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends I>, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>>)","123":"Choice8::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends I>, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>>)","124":"Choice8::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends I>, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>>)","125":"Choice8::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends I>, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>>)","126":"Choice8::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends I>, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>>)","127":"Choice8::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends I>, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>>)","128":"Choice8::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends I>, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>>)","129":"Choice8::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends I>, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>>)","130":"Choice8::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends I>, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>>)","131":"Choice8::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends I>, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>>)","132":"Choice8::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends I>, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>>)","137":"Choice8::::discardL(com.jnape.palatable.lambda.functor.Applicative<I, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>)","138":"Choice8::::discardL(com.jnape.palatable.lambda.functor.Applicative<I, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>)","139":"Choice8::::discardL(com.jnape.palatable.lambda.functor.Applicative<I, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>)","140":"Choice8::::discardL(com.jnape.palatable.lambda.functor.Applicative<I, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>)","145":"Choice8::::discardR(com.jnape.palatable.lambda.functor.Applicative<I, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>)","146":"Choice8::::discardR(com.jnape.palatable.lambda.functor.Applicative<I, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>)","147":"Choice8::::discardR(com.jnape.palatable.lambda.functor.Applicative<I, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>)","148":"Choice8::::discardR(com.jnape.palatable.lambda.functor.Applicative<I, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>)","153":"Choice8::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.monad.Monad<I, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>>)","154":"Choice8::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.monad.Monad<I, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>>)","155":"Choice8::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.monad.Monad<I, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>>)","156":"Choice8::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.monad.Monad<I, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>>)","157":"Choice8::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.monad.Monad<I, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>>)","162":"Choice8::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<H, I>, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>>)","163":"Choice8::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<H, I>, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>>)","164":"Choice8::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<H, I>, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>>)","165":"Choice8::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<H, I>, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>>)","166":"Choice8::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<H, I>, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>>)","167":"Choice8::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<H, I>, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>>)","168":"Choice8::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<H, I>, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>>)","169":"Choice8::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<H, I>, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>>)","170":"Choice8::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<H, I>, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>>)","171":"Choice8::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<H, I>, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>>)","172":"Choice8::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<H, I>, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>>)","173":"Choice8::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<H, I>, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>>)","174":"Choice8::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<H, I>, com.jnape.palatable.lambda.adt.choice.Choice8<A, B, C, D, E, F, G, ?>>>)","179":"Choice8::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.functor.Applicative<I, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","180":"Choice8::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.functor.Applicative<I, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","181":"Choice8::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.functor.Applicative<I, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","182":"Choice8::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.functor.Applicative<I, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","183":"Choice8::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.functor.Applicative<I, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","184":"Choice8::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.functor.Applicative<I, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","185":"Choice8::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.functor.Applicative<I, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","186":"Choice8::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.functor.Applicative<I, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","187":"Choice8::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.functor.Applicative<I, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","188":"Choice8::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.functor.Applicative<I, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","189":"Choice8::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.functor.Applicative<I, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","190":"Choice8::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.functor.Applicative<I, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","191":"Choice8::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.functor.Applicative<I, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","192":"Choice8::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.functor.Applicative<I, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","193":"Choice8::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.functor.Applicative<I, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","209":"Choice8::::a(A)","210":"Choice8::::a(A)","211":"Choice8::::a(A)","227":"Choice8::::b(B)","228":"Choice8::::b(B)","229":"Choice8::::b(B)","245":"Choice8::::c(C)","246":"Choice8::::c(C)","247":"Choice8::::c(C)","263":"Choice8::::d(D)","264":"Choice8::::d(D)","265":"Choice8::::d(D)","281":"Choice8::::e(E)","282":"Choice8::::e(E)","283":"Choice8::::e(E)","299":"Choice8::::f(F)","300":"Choice8::::f(F)","301":"Choice8::::f(F)","317":"Choice8::::g(G)","318":"Choice8::::g(G)","319":"Choice8::::g(G)","335":"Choice8::::h(H)","336":"Choice8::::h(H)","337":"Choice8::::h(H)","351":"Choice8::::pureChoice()","352":"Choice8::::pureChoice()","353":"Choice8::::pureChoice()","363":"Choice8._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","364":"Choice8._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","365":"Choice8._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","366":"Choice8._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","367":"Choice8._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","368":"Choice8._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","369":"Choice8._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","371":"Choice8._A::::equals(java.lang.Object)","372":"Choice8._A::::equals(java.lang.Object)","373":"Choice8._A::::equals(java.lang.Object)","374":"Choice8._A::::equals(java.lang.Object)","375":"Choice8._A::::equals(java.lang.Object)","377":"Choice8._A::::hashCode()","378":"Choice8._A::::hashCode()","379":"Choice8._A::::hashCode()","380":"Choice8._A::::hashCode()","382":"Choice8._A::::toString()","383":"Choice8._A::::toString()","384":"Choice8._A::::toString()","385":"Choice8._A::::toString()","396":"Choice8._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","397":"Choice8._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","398":"Choice8._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","399":"Choice8._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","400":"Choice8._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","401":"Choice8._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","402":"Choice8._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","404":"Choice8._B::::equals(java.lang.Object)","405":"Choice8._B::::equals(java.lang.Object)","406":"Choice8._B::::equals(java.lang.Object)","407":"Choice8._B::::equals(java.lang.Object)","408":"Choice8._B::::equals(java.lang.Object)","410":"Choice8._B::::hashCode()","411":"Choice8._B::::hashCode()","412":"Choice8._B::::hashCode()","413":"Choice8._B::::hashCode()","415":"Choice8._B::::toString()","416":"Choice8._B::::toString()","417":"Choice8._B::::toString()","418":"Choice8._B::::toString()","429":"Choice8._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","430":"Choice8._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","431":"Choice8._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","432":"Choice8._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","433":"Choice8._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","434":"Choice8._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","435":"Choice8._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","437":"Choice8._C::::equals(java.lang.Object)","438":"Choice8._C::::equals(java.lang.Object)","439":"Choice8._C::::equals(java.lang.Object)","440":"Choice8._C::::equals(java.lang.Object)","441":"Choice8._C::::equals(java.lang.Object)","443":"Choice8._C::::hashCode()","444":"Choice8._C::::hashCode()","445":"Choice8._C::::hashCode()","446":"Choice8._C::::hashCode()","448":"Choice8._C::::toString()","449":"Choice8._C::::toString()","450":"Choice8._C::::toString()","451":"Choice8._C::::toString()","462":"Choice8._D::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","463":"Choice8._D::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","464":"Choice8._D::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","465":"Choice8._D::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","466":"Choice8._D::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","467":"Choice8._D::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","468":"Choice8._D::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","470":"Choice8._D::::equals(java.lang.Object)","471":"Choice8._D::::equals(java.lang.Object)","472":"Choice8._D::::equals(java.lang.Object)","473":"Choice8._D::::equals(java.lang.Object)","474":"Choice8._D::::equals(java.lang.Object)","476":"Choice8._D::::hashCode()","477":"Choice8._D::::hashCode()","478":"Choice8._D::::hashCode()","479":"Choice8._D::::hashCode()","481":"Choice8._D::::toString()","482":"Choice8._D::::toString()","483":"Choice8._D::::toString()","484":"Choice8._D::::toString()","495":"Choice8._E::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","496":"Choice8._E::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","497":"Choice8._E::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","498":"Choice8._E::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","499":"Choice8._E::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","500":"Choice8._E::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","501":"Choice8._E::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","503":"Choice8._E::::equals(java.lang.Object)","504":"Choice8._E::::equals(java.lang.Object)","505":"Choice8._E::::equals(java.lang.Object)","506":"Choice8._E::::equals(java.lang.Object)","507":"Choice8._E::::equals(java.lang.Object)","509":"Choice8._E::::hashCode()","510":"Choice8._E::::hashCode()","511":"Choice8._E::::hashCode()","512":"Choice8._E::::hashCode()","514":"Choice8._E::::toString()","515":"Choice8._E::::toString()","516":"Choice8._E::::toString()","517":"Choice8._E::::toString()","528":"Choice8._F::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","529":"Choice8._F::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","530":"Choice8._F::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","531":"Choice8._F::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","532":"Choice8._F::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","533":"Choice8._F::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","534":"Choice8._F::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","536":"Choice8._F::::equals(java.lang.Object)","537":"Choice8._F::::equals(java.lang.Object)","538":"Choice8._F::::equals(java.lang.Object)","539":"Choice8._F::::equals(java.lang.Object)","540":"Choice8._F::::equals(java.lang.Object)","542":"Choice8._F::::hashCode()","543":"Choice8._F::::hashCode()","544":"Choice8._F::::hashCode()","545":"Choice8._F::::hashCode()","547":"Choice8._F::::toString()","548":"Choice8._F::::toString()","549":"Choice8._F::::toString()","550":"Choice8._F::::toString()","561":"Choice8._G::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","562":"Choice8._G::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","563":"Choice8._G::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","564":"Choice8._G::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","565":"Choice8._G::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","566":"Choice8._G::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","567":"Choice8._G::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","569":"Choice8._G::::equals(java.lang.Object)","570":"Choice8._G::::equals(java.lang.Object)","571":"Choice8._G::::equals(java.lang.Object)","572":"Choice8._G::::equals(java.lang.Object)","573":"Choice8._G::::equals(java.lang.Object)","575":"Choice8._G::::hashCode()","576":"Choice8._G::::hashCode()","577":"Choice8._G::::hashCode()","578":"Choice8._G::::hashCode()","580":"Choice8._G::::toString()","581":"Choice8._G::::toString()","582":"Choice8._G::::toString()","583":"Choice8._G::::toString()","594":"Choice8._H::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","595":"Choice8._H::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","596":"Choice8._H::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","597":"Choice8._H::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","598":"Choice8._H::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","599":"Choice8._H::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","600":"Choice8._H::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","602":"Choice8._H::::equals(java.lang.Object)","603":"Choice8._H::::equals(java.lang.Object)","604":"Choice8._H::::equals(java.lang.Object)","605":"Choice8._H::::equals(java.lang.Object)","606":"Choice8._H::::equals(java.lang.Object)","608":"Choice8._H::::hashCode()","609":"Choice8._H::::hashCode()","610":"Choice8._H::::hashCode()","611":"Choice8._H::::hashCode()","613":"Choice8._H::::toString()","614":"Choice8._H::::toString()","615":"Choice8._H::::toString()","616":"Choice8._H::::toString()"},"test_reverse_method_lines_dic":{"42":"Choice8Test::::setUp()","43":"Choice8Test::::setUp()","44":"Choice8Test::::setUp()","45":"Choice8Test::::setUp()","46":"Choice8Test::::setUp()","47":"Choice8Test::::setUp()","48":"Choice8Test::::setUp()","49":"Choice8Test::::setUp()","50":"Choice8Test::::setUp()","51":"Choice8Test::::setUp()","52":"Choice8Test::::setUp()","54":"Choice8Test::::testSubjects()","55":"Choice8Test::::testSubjects()","56":"Choice8Test::::testSubjects()","57":"Choice8Test::::testSubjects()","58":"Choice8Test::::testSubjects()","59":"Choice8Test::::testSubjects()","60":"Choice8Test::::testSubjects()","61":"Choice8Test::::testSubjects()","62":"Choice8Test::::testSubjects()","63":"Choice8Test::::testSubjects()","65":"Choice8Test::::convergeStaysInChoice()","66":"Choice8Test::::convergeStaysInChoice()","67":"Choice8Test::::convergeStaysInChoice()","68":"Choice8Test::::convergeStaysInChoice()","69":"Choice8Test::::convergeStaysInChoice()","70":"Choice8Test::::convergeStaysInChoice()","71":"Choice8Test::::convergeStaysInChoice()","72":"Choice8Test::::convergeStaysInChoice()","73":"Choice8Test::::convergeStaysInChoice()","74":"Choice8Test::::convergeStaysInChoice()","75":"Choice8Test::::convergeStaysInChoice()","76":"Choice8Test::::convergeStaysInChoice()","77":"Choice8Test::::convergeStaysInChoice()","78":"Choice8Test::::convergeStaysInChoice()","80":"Choice8Test::::lazyZip()","81":"Choice8Test::::lazyZip()","82":"Choice8Test::::lazyZip()","83":"Choice8Test::::lazyZip()","84":"Choice8Test::::lazyZip()","85":"Choice8Test::::lazyZip()","86":"Choice8Test::::lazyZip()","87":"Choice8Test::::lazyZip()","88":"Choice8Test::::lazyZip()","89":"Choice8Test::::lazyZip()","90":"Choice8Test::::lazyZip()","91":"Choice8Test::::lazyZip()","92":"Choice8Test::::lazyZip()","93":"Choice8Test::::lazyZip()","94":"Choice8Test::::lazyZip()","95":"Choice8Test::::lazyZip()","96":"Choice8Test::::lazyZip()","97":"Choice8Test::::lazyZip()","98":"Choice8Test::::lazyZip()","99":"Choice8Test::::lazyZip()","100":"Choice8Test::::lazyZip()","101":"Choice8Test::::lazyZip()","102":"Choice8Test::::lazyZip()","103":"Choice8Test::::lazyZip()","104":"Choice8Test::::lazyZip()","106":"Choice8Test::::staticPure()","107":"Choice8Test::::staticPure()","108":"Choice8Test::::staticPure()","109":"Choice8Test::::staticPure()","110":"Choice8Test::::staticPure()","111":"Choice8Test::::staticPure()"},"tests":[{"test_lines":[42,52],"covered_lines":[44,45,210,228,246,264,282,300,318,336,359,360,361,392,393,394,425,426,427,458,459,460,491,492,493,524,525,526,557,558,559,590,591,592]},{"test_lines":[54,63],"covered_lines":[44,45,210,228,246,264,282,300,318,336,359,360,361,392,393,394,425,426,427,458,459,460,491,492,493,524,525,526,557,558,559,590,591,592]},{"test_lines":[65,78],"covered_lines":[44,45,63,64,210,228,246,264,282,300,318,336,359,360,361,368,392,393,394,401,425,426,427,434,458,459,460,467,491,492,493,500,524,525,526,533,557,558,559,566,590,591,592,599]},{"test_lines":[80,104],"covered_lines":[44,45,73,106,124,125,126,127,128,129,130,131,156,210,228,246,264,282,300,318,336,359,360,361,368,373,374,392,393,394,401,406,407,425,426,427,434,439,440,458,459,460,467,472,473,491,492,493,500,505,506,524,525,526,533,538,539,557,558,559,566,571,572,590,591,592,599,604,605]},{"test_lines":[106,111],"covered_lines":[44,45,210,228,246,264,282,300,318,336,352,359,360,361,392,393,394,425,426,427,458,459,460,491,492,493,524,525,526,557,558,559,590,591,592,604,605]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/adt/choice/Choice2.java":{"class_content":["package com.jnape.palatable.lambda.adt.choice;\n","\n","import com.jnape.palatable.lambda.adt.Either;\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.adt.coproduct.CoProduct2;\n","import com.jnape.palatable.lambda.adt.hlist.HList;\n","import com.jnape.palatable.lambda.adt.hlist.Tuple2;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.recursion.RecursiveResult;\n","import com.jnape.palatable.lambda.functions.specialized.Pure;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","import com.jnape.palatable.lambda.functor.Bifunctor;\n","import com.jnape.palatable.lambda.functor.Functor;\n","import com.jnape.palatable.lambda.functor.builtin.Lazy;\n","import com.jnape.palatable.lambda.monad.Monad;\n","import com.jnape.palatable.lambda.monad.MonadRec;\n","import com.jnape.palatable.lambda.traversable.Traversable;\n","\n","import java.util.Objects;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Into.into;\n","import static com.jnape.palatable.lambda.functions.recursion.RecursiveResult.terminate;\n","import static com.jnape.palatable.lambda.functions.recursion.Trampoline.trampoline;\n","import static com.jnape.palatable.lambda.functor.builtin.Lazy.lazy;\n","\n","/**\n"," * Canonical ADT representation of {@link CoProduct2}. Unlike {@link Either}, there is no concept of \"success\" or\n"," * \"failure\", so the domain of reasonable function semantics is more limited.\n"," *\n"," * @param <A> the first possible type\n"," * @param <B> the second possible type\n"," * @see Either\n"," * @see Choice3\n"," */\n","public abstract class Choice2<A, B> implements\n","        CoProduct2<A, B, Choice2<A, B>>,\n","        MonadRec<B, Choice2<A, ?>>,\n","        Bifunctor<A, B, Choice2<?, ?>>,\n","        Traversable<B, Choice2<A, ?>> {\n","\n","    private Choice2() {\n","    }\n","\n","    /**\n","     * Specialize this choice's projection to a {@link Tuple2}.\n","     *\n","     * @return a {@link Tuple2}\n","     */\n","    @Override\n","    public Tuple2<Maybe<A>, Maybe<B>> project() {\n","        return into(HList::tuple, CoProduct2.super.project());\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final <C> Choice3<A, B, C> diverge() {\n","        return match(Choice3::a, Choice3::b);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Choice2<B, A> invert() {\n","        return match(Choice2::b, Choice2::a);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final <C> Choice2<A, C> fmap(Fn1<? super B, ? extends C> fn) {\n","        return MonadRec.super.<C>fmap(fn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final <C> Choice2<C, B> biMapL(Fn1<? super A, ? extends C> fn) {\n","        return (Choice2<C, B>) Bifunctor.super.<C>biMapL(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final <C> Choice2<A, C> biMapR(Fn1<? super B, ? extends C> fn) {\n","        return (Choice2<A, C>) Bifunctor.super.<C>biMapR(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final <C, D> Choice2<C, D> biMap(Fn1<? super A, ? extends C> lFn,\n","                                            Fn1<? super B, ? extends D> rFn) {\n","        return match(a -> a(lFn.apply(a)), b -> b(rFn.apply(b)));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C> Choice2<A, C> pure(C c) {\n","        return b(c);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C> Choice2<A, C> zip(Applicative<Fn1<? super B, ? extends C>, Choice2<A, ?>> appFn) {\n","        return MonadRec.super.zip(appFn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C> Lazy<Choice2<A, C>> lazyZip(\n","            Lazy<? extends Applicative<Fn1<? super B, ? extends C>, Choice2<A, ?>>> lazyAppFn) {\n","        return match(a -> lazy(a(a)),\n","                     b -> lazyAppFn.fmap(choiceF -> choiceF.<C>fmap(f -> f.apply(b)).coerce()));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C> Choice2<A, C> discardL(Applicative<C, Choice2<A, ?>> appB) {\n","        return MonadRec.super.discardL(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C> Choice2<A, B> discardR(Applicative<C, Choice2<A, ?>> appB) {\n","        return MonadRec.super.discardR(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final <C> Choice2<A, C> flatMap(Fn1<? super B, ? extends Monad<C, Choice2<A, ?>>> f) {\n","        return match(Choice2::a, b -> f.apply(b).coerce());\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C> Choice2<A, C> trampolineM(Fn1<? super B, ? extends MonadRec<RecursiveResult<B, C>, Choice2<A, ?>>> fn) {\n","        return match(Choice2::a,\n","                     trampoline(b -> fn.apply(b).<Choice2<A, RecursiveResult<B, C>>>coerce()\n","                             .match(a -> terminate(a(a)),\n","                                    bOrC -> bOrC.fmap(Choice2::b))));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C, App extends Applicative<?, App>, TravB extends Traversable<C, Choice2<A, ?>>,\n","            AppTrav extends Applicative<TravB, App>> AppTrav traverse(Fn1<? super B, ? extends Applicative<C, App>> fn,\n","                                                                      Fn1<? super TravB, ? extends AppTrav> pure) {\n","        return match(a -> pure.apply(Choice2.<A, C>a(a).<TravB>coerce()),\n","                     b -> fn.apply(b).<Choice2<A, C>>fmap(Choice2::b).<TravB>fmap(Functor::coerce).coerce());\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a value of type <code>A</code> in a {@link Choice2}.\n","     *\n","     * @param a   the value\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @return the wrapped value as a {@link Choice2}&lt;A, B&gt;\n","     */\n","    public static <A, B> Choice2<A, B> a(A a) {\n","        return new _A<>(a);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a value of type <code>B</code> in a {@link Choice2}.\n","     *\n","     * @param b   the value\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @return the wrapped value as a {@link Choice2}&lt;A, B&gt;\n","     */\n","    public static <A, B> Choice2<A, B> b(B b) {\n","        return new _B<>(b);\n","    }\n","\n","    /**\n","     * The canonical {@link Pure} instance for {@link Choice2}.\n","     *\n","     * @param <A> the first possible type\n","     * @return the {@link Pure} instance\n","     */\n","    public static <A> Pure<Choice2<A, ?>> pureChoice() {\n","        return Choice2::b;\n","    }\n","\n","    private static final class _A<A, B> extends Choice2<A, B> {\n","\n","        private final A a;\n","\n","        private _A(A a) {\n","            this.a = a;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn) {\n","            return aFn.apply(a);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof _A\n","                    && Objects.equals(a, ((_A) other).a);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(a);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Choice2{\" +\n","                    \"a=\" + a +\n","                    '}';\n","        }\n","    }\n","\n","    private static final class _B<A, B> extends Choice2<A, B> {\n","\n","        private final B b;\n","\n","        private _B(B b) {\n","            this.b = b;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn) {\n","            return bFn.apply(b);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof _B\n","                    && Objects.equals(b, ((_B) other).b);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(b);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Choice2{\" +\n","                    \"b=\" + b +\n","                    '}';\n","        }\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.adt.choice;\n","\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.framework.Subjects;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Before;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.*;\n","\n","import static com.jnape.palatable.lambda.adt.choice.Choice2.a;\n","import static com.jnape.palatable.lambda.adt.choice.Choice2.b;\n","import static com.jnape.palatable.lambda.functor.builtin.Lazy.lazy;\n","import static com.jnape.palatable.traitor.framework.Subjects.subjects;\n","import static org.junit.Assert.assertEquals;\n","\n","@RunWith(Traits.class)\n","public class Choice2Test {\n","\n","    private Choice2<Integer, Boolean> a;\n","    private Choice2<Integer, Boolean> b;\n","\n","    @Before\n","    public void setUp() {\n","        a = a(1);\n","        b = b(true);\n","    }\n","\n","    @TestTraits({FunctorLaws.class,\n","            ApplicativeLaws.class,\n","            MonadLaws.class,\n","            BifunctorLaws.class,\n","            TraversableLaws.class,\n","            MonadRecLaws.class})\n","    public Subjects<Choice2<String, Integer>> testSubjects() {\n","        return subjects(a(\"foo\"), b(1));\n","    }\n","\n","    @Test\n","    public void divergeStaysInChoice() {\n","        assertEquals(Choice3.<Integer, Boolean, Object>a(1), a.diverge());\n","        assertEquals(Choice3.<Integer, Boolean, Object>b(true), b.diverge());\n","    }\n","\n","    @Test\n","    public void lazyZip() {\n","        assertEquals(b(2), b(1).lazyZip(lazy(b(x -> x + 1))).value());\n","        assertEquals(a(\"foo\"), a(\"foo\").lazyZip(lazy(() -> {\n","            throw new AssertionError();\n","        })).value());\n","    }\n","\n","    @Test\n","    public void staticPure() {\n","        Choice2<Byte, Short> choice = Choice2.<Byte>pureChoice().apply((short) 2);\n","        assertEquals(b((short) 2), choice);\n","    }\n","}"],"method_lines_dic":{"Choice2::::project()":[49,52],"Choice2::::diverge()":[57,60],"Choice2::::invert()":[65,68],"Choice2::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)":[73,76],"Choice2::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>)":[81,84],"Choice2::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)":[89,92],"Choice2::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends D>)":[97,101],"Choice2::::pure(C)":[106,109],"Choice2::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.adt.choice.Choice2<A, ?>>)":[114,117],"Choice2::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.adt.choice.Choice2<A, ?>>>)":[122,127],"Choice2::::discardL(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.adt.choice.Choice2<A, ?>>)":[132,135],"Choice2::::discardR(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.adt.choice.Choice2<A, ?>>)":[140,143],"Choice2::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.Monad<C, com.jnape.palatable.lambda.adt.choice.Choice2<A, ?>>>)":[148,151],"Choice2::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.adt.choice.Choice2<A, ?>>>)":[156,162],"Choice2::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)":[167,173],"Choice2::::a(A)":[183,185],"Choice2::::b(B)":[195,197],"Choice2::::pureChoice()":[205,207],"Choice2._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>)":[217,220],"Choice2._A::::equals(java.lang.Object)":[222,226],"Choice2._A::::hashCode()":[228,231],"Choice2._A::::toString()":[233,238],"Choice2._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>)":[249,252],"Choice2._B::::equals(java.lang.Object)":[254,258],"Choice2._B::::hashCode()":[260,263],"Choice2._B::::toString()":[265,270]},"test_method_lines_dic":{"Choice2Test::::setUp()":[23,27],"Choice2Test::::testSubjects()":[29,37],"Choice2Test::::divergeStaysInChoice()":[39,43],"Choice2Test::::lazyZip()":[45,51],"Choice2Test::::staticPure()":[53,57]},"reverse_method_lines_dic":{"49":"Choice2::::project()","50":"Choice2::::project()","51":"Choice2::::project()","52":"Choice2::::project()","57":"Choice2::::diverge()","58":"Choice2::::diverge()","59":"Choice2::::diverge()","60":"Choice2::::diverge()","65":"Choice2::::invert()","66":"Choice2::::invert()","67":"Choice2::::invert()","68":"Choice2::::invert()","73":"Choice2::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","74":"Choice2::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","75":"Choice2::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","76":"Choice2::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","81":"Choice2::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>)","82":"Choice2::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>)","83":"Choice2::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>)","84":"Choice2::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>)","89":"Choice2::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","90":"Choice2::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","91":"Choice2::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","92":"Choice2::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","97":"Choice2::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends D>)","98":"Choice2::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends D>)","99":"Choice2::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends D>)","100":"Choice2::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends D>)","101":"Choice2::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends D>)","106":"Choice2::::pure(C)","107":"Choice2::::pure(C)","108":"Choice2::::pure(C)","109":"Choice2::::pure(C)","114":"Choice2::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.adt.choice.Choice2<A, ?>>)","115":"Choice2::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.adt.choice.Choice2<A, ?>>)","116":"Choice2::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.adt.choice.Choice2<A, ?>>)","117":"Choice2::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.adt.choice.Choice2<A, ?>>)","122":"Choice2::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.adt.choice.Choice2<A, ?>>>)","123":"Choice2::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.adt.choice.Choice2<A, ?>>>)","124":"Choice2::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.adt.choice.Choice2<A, ?>>>)","125":"Choice2::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.adt.choice.Choice2<A, ?>>>)","126":"Choice2::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.adt.choice.Choice2<A, ?>>>)","127":"Choice2::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.adt.choice.Choice2<A, ?>>>)","132":"Choice2::::discardL(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.adt.choice.Choice2<A, ?>>)","133":"Choice2::::discardL(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.adt.choice.Choice2<A, ?>>)","134":"Choice2::::discardL(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.adt.choice.Choice2<A, ?>>)","135":"Choice2::::discardL(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.adt.choice.Choice2<A, ?>>)","140":"Choice2::::discardR(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.adt.choice.Choice2<A, ?>>)","141":"Choice2::::discardR(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.adt.choice.Choice2<A, ?>>)","142":"Choice2::::discardR(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.adt.choice.Choice2<A, ?>>)","143":"Choice2::::discardR(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.adt.choice.Choice2<A, ?>>)","148":"Choice2::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.Monad<C, com.jnape.palatable.lambda.adt.choice.Choice2<A, ?>>>)","149":"Choice2::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.Monad<C, com.jnape.palatable.lambda.adt.choice.Choice2<A, ?>>>)","150":"Choice2::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.Monad<C, com.jnape.palatable.lambda.adt.choice.Choice2<A, ?>>>)","151":"Choice2::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.Monad<C, com.jnape.palatable.lambda.adt.choice.Choice2<A, ?>>>)","156":"Choice2::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.adt.choice.Choice2<A, ?>>>)","157":"Choice2::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.adt.choice.Choice2<A, ?>>>)","158":"Choice2::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.adt.choice.Choice2<A, ?>>>)","159":"Choice2::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.adt.choice.Choice2<A, ?>>>)","160":"Choice2::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.adt.choice.Choice2<A, ?>>>)","161":"Choice2::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.adt.choice.Choice2<A, ?>>>)","162":"Choice2::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.adt.choice.Choice2<A, ?>>>)","167":"Choice2::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","168":"Choice2::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","169":"Choice2::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","170":"Choice2::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","171":"Choice2::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","172":"Choice2::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","173":"Choice2::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","183":"Choice2::::a(A)","184":"Choice2::::a(A)","185":"Choice2::::a(A)","195":"Choice2::::b(B)","196":"Choice2::::b(B)","197":"Choice2::::b(B)","205":"Choice2::::pureChoice()","206":"Choice2::::pureChoice()","207":"Choice2::::pureChoice()","217":"Choice2._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>)","218":"Choice2._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>)","219":"Choice2._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>)","220":"Choice2._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>)","222":"Choice2._A::::equals(java.lang.Object)","223":"Choice2._A::::equals(java.lang.Object)","224":"Choice2._A::::equals(java.lang.Object)","225":"Choice2._A::::equals(java.lang.Object)","226":"Choice2._A::::equals(java.lang.Object)","228":"Choice2._A::::hashCode()","229":"Choice2._A::::hashCode()","230":"Choice2._A::::hashCode()","231":"Choice2._A::::hashCode()","233":"Choice2._A::::toString()","234":"Choice2._A::::toString()","235":"Choice2._A::::toString()","236":"Choice2._A::::toString()","237":"Choice2._A::::toString()","238":"Choice2._A::::toString()","249":"Choice2._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>)","250":"Choice2._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>)","251":"Choice2._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>)","252":"Choice2._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>)","254":"Choice2._B::::equals(java.lang.Object)","255":"Choice2._B::::equals(java.lang.Object)","256":"Choice2._B::::equals(java.lang.Object)","257":"Choice2._B::::equals(java.lang.Object)","258":"Choice2._B::::equals(java.lang.Object)","260":"Choice2._B::::hashCode()","261":"Choice2._B::::hashCode()","262":"Choice2._B::::hashCode()","263":"Choice2._B::::hashCode()","265":"Choice2._B::::toString()","266":"Choice2._B::::toString()","267":"Choice2._B::::toString()","268":"Choice2._B::::toString()","269":"Choice2._B::::toString()","270":"Choice2._B::::toString()"},"test_reverse_method_lines_dic":{"23":"Choice2Test::::setUp()","24":"Choice2Test::::setUp()","25":"Choice2Test::::setUp()","26":"Choice2Test::::setUp()","27":"Choice2Test::::setUp()","29":"Choice2Test::::testSubjects()","30":"Choice2Test::::testSubjects()","31":"Choice2Test::::testSubjects()","32":"Choice2Test::::testSubjects()","33":"Choice2Test::::testSubjects()","34":"Choice2Test::::testSubjects()","35":"Choice2Test::::testSubjects()","36":"Choice2Test::::testSubjects()","37":"Choice2Test::::testSubjects()","39":"Choice2Test::::divergeStaysInChoice()","40":"Choice2Test::::divergeStaysInChoice()","41":"Choice2Test::::divergeStaysInChoice()","42":"Choice2Test::::divergeStaysInChoice()","43":"Choice2Test::::divergeStaysInChoice()","45":"Choice2Test::::lazyZip()","46":"Choice2Test::::lazyZip()","47":"Choice2Test::::lazyZip()","48":"Choice2Test::::lazyZip()","49":"Choice2Test::::lazyZip()","50":"Choice2Test::::lazyZip()","51":"Choice2Test::::lazyZip()","53":"Choice2Test::::staticPure()","54":"Choice2Test::::staticPure()","55":"Choice2Test::::staticPure()","56":"Choice2Test::::staticPure()","57":"Choice2Test::::staticPure()"},"tests":[{"test_lines":[23,27],"covered_lines":[41,42,184,196,213,214,215,245,246,247]},{"test_lines":[29,37],"covered_lines":[41,42,184,196,213,214,215,245,246,247]},{"test_lines":[39,43],"covered_lines":[41,42,59,184,196,213,214,215,219,245,246,247,251]},{"test_lines":[45,51],"covered_lines":[41,42,75,108,125,126,150,184,196,213,214,215,219,224,225,245,246,247,251,256,257]},{"test_lines":[53,57],"covered_lines":[41,42,184,196,206,213,214,215,245,246,247,256,257]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/adt/choice/Choice7.java":{"class_content":["package com.jnape.palatable.lambda.adt.choice;\n","\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.adt.coproduct.CoProduct6;\n","import com.jnape.palatable.lambda.adt.coproduct.CoProduct7;\n","import com.jnape.palatable.lambda.adt.hlist.HList;\n","import com.jnape.palatable.lambda.adt.hlist.Tuple7;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.recursion.RecursiveResult;\n","import com.jnape.palatable.lambda.functions.specialized.Pure;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","import com.jnape.palatable.lambda.functor.Bifunctor;\n","import com.jnape.palatable.lambda.functor.builtin.Lazy;\n","import com.jnape.palatable.lambda.monad.Monad;\n","import com.jnape.palatable.lambda.monad.MonadRec;\n","import com.jnape.palatable.lambda.traversable.Traversable;\n","\n","import java.util.Objects;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Into7.into7;\n","import static com.jnape.palatable.lambda.functions.recursion.RecursiveResult.terminate;\n","import static com.jnape.palatable.lambda.functions.recursion.Trampoline.trampoline;\n","import static com.jnape.palatable.lambda.functor.builtin.Lazy.lazy;\n","\n","/**\n"," * Canonical ADT representation of {@link CoProduct7}.\n"," *\n"," * @param <A> the first possible type\n"," * @param <B> the second possible type\n"," * @param <C> the third possible type\n"," * @param <D> the fourth possible type\n"," * @param <E> the fifth possible type\n"," * @param <F> the sixth possible type\n"," * @param <G> the seventh possible type\n"," * @see Choice6\n"," * @see Choice8\n"," */\n","public abstract class Choice7<A, B, C, D, E, F, G> implements\n","        CoProduct7<A, B, C, D, E, F, G, Choice7<A, B, C, D, E, F, G>>,\n","        MonadRec<G, Choice7<A, B, C, D, E, F, ?>>,\n","        Bifunctor<F, G, Choice7<A, B, C, D, E, ?, ?>>,\n","        Traversable<G, Choice7<A, B, C, D, E, F, ?>> {\n","\n","    private Choice7() {\n","    }\n","\n","    /**\n","     * Specialize this choice's projection to a {@link Tuple7}.\n","     *\n","     * @return a {@link Tuple7}\n","     */\n","    @Override\n","    public Tuple7<Maybe<A>, Maybe<B>, Maybe<C>, Maybe<D>, Maybe<E>, Maybe<F>, Maybe<G>> project() {\n","        return into7(HList::tuple, CoProduct7.super.project());\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <H> Choice8<A, B, C, D, E, F, G, H> diverge() {\n","        return match(Choice8::a, Choice8::b, Choice8::c, Choice8::d, Choice8::e, Choice8::f, Choice8::g);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Choice6<A, B, C, D, E, F> converge(Fn1<? super G, ? extends CoProduct6<A, B, C, D, E, F, ?>> convergenceFn) {\n","        return match(Choice6::a, Choice6::b, Choice6::c, Choice6::d, Choice6::e, Choice6::f,\n","                     convergenceFn.fmap(cp6 -> cp6.match(Choice6::a, Choice6::b, Choice6::c, Choice6::d, Choice6::e,\n","                                                         Choice6::f)));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <H> Choice7<A, B, C, D, E, F, H> fmap(Fn1<? super G, ? extends H> fn) {\n","        return MonadRec.super.<H>fmap(fn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <H> Choice7<A, B, C, D, E, H, G> biMapL(Fn1<? super F, ? extends H> fn) {\n","        return (Choice7<A, B, C, D, E, H, G>) Bifunctor.super.<H>biMapL(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <H> Choice7<A, B, C, D, E, F, H> biMapR(Fn1<? super G, ? extends H> fn) {\n","        return (Choice7<A, B, C, D, E, F, H>) Bifunctor.super.<H>biMapR(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <H, I> Choice7<A, B, C, D, E, H, I> biMap(Fn1<? super F, ? extends H> lFn,\n","                                                     Fn1<? super G, ? extends I> rFn) {\n","        return match(Choice7::a, Choice7::b, Choice7::c, Choice7::d, Choice7::e, f -> f(lFn.apply(f)), g -> g(rFn.apply(g)));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <H> Choice7<A, B, C, D, E, F, H> pure(H h) {\n","        return g(h);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <H> Choice7<A, B, C, D, E, F, H> zip(\n","            Applicative<Fn1<? super G, ? extends H>, Choice7<A, B, C, D, E, F, ?>> appFn) {\n","        return MonadRec.super.zip(appFn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <H> Lazy<Choice7<A, B, C, D, E, F, H>> lazyZip(\n","            Lazy<? extends Applicative<Fn1<? super G, ? extends H>, Choice7<A, B, C, D, E, F, ?>>> lazyAppFn) {\n","        return match(a -> lazy(a(a)),\n","                     b -> lazy(b(b)),\n","                     c -> lazy(c(c)),\n","                     d -> lazy(d(d)),\n","                     e -> lazy(e(e)),\n","                     f -> lazy(f(f)),\n","                     g -> lazyAppFn.fmap(choiceF -> choiceF.<H>fmap(f -> f.apply(g)).coerce()));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <H> Choice7<A, B, C, D, E, F, H> discardL(Applicative<H, Choice7<A, B, C, D, E, F, ?>> appB) {\n","        return MonadRec.super.discardL(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <H> Choice7<A, B, C, D, E, F, G> discardR(Applicative<H, Choice7<A, B, C, D, E, F, ?>> appB) {\n","        return MonadRec.super.discardR(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <H> Choice7<A, B, C, D, E, F, H> flatMap(\n","            Fn1<? super G, ? extends Monad<H, Choice7<A, B, C, D, E, F, ?>>> fn) {\n","        return match(Choice7::a, Choice7::b, Choice7::c, Choice7::d, Choice7::e, Choice7::f, g -> fn.apply(g).coerce());\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <H> Choice7<A, B, C, D, E, F, H> trampolineM(\n","            Fn1<? super G, ? extends MonadRec<RecursiveResult<G, H>, Choice7<A, B, C, D, E, F, ?>>> fn) {\n","        return flatMap(trampoline(g -> fn.apply(g).<Choice7<A, B, C, D, E, F, RecursiveResult<G, H>>>coerce().match(\n","                a -> terminate(a(a)),\n","                b -> terminate(b(b)),\n","                c -> terminate(c(c)),\n","                d -> terminate(d(d)),\n","                e -> terminate(e(e)),\n","                f -> terminate(f(f)),\n","                gRec -> gRec.fmap(Choice7::g))));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <H, App extends Applicative<?, App>, TravB extends Traversable<H, Choice7<A, B, C, D, E, F, ?>>,\n","            AppTrav extends Applicative<TravB, App>> AppTrav traverse(Fn1<? super G, ? extends Applicative<H, App>> fn,\n","                                                                      Fn1<? super TravB, ? extends AppTrav> pure) {\n","        return match(a -> pure.apply(Choice7.<A, B, C, D, E, F, H>a(a).<TravB>coerce()),\n","                     b -> pure.apply(Choice7.<A, B, C, D, E, F, H>b(b).<TravB>coerce()),\n","                     c -> pure.apply(Choice7.<A, B, C, D, E, F, H>c(c).<TravB>coerce()),\n","                     d -> pure.apply(Choice7.<A, B, C, D, E, F, H>d(d).<TravB>coerce()),\n","                     e -> pure.apply(Choice7.<A, B, C, D, E, F, H>e(e).<TravB>coerce()),\n","                     f -> pure.apply(Choice7.<A, B, C, D, E, F, H>f(f).<TravB>coerce()),\n","                     g -> fn.apply(g).<Choice7<A, B, C, D, E, F, H>>fmap(Choice7::g)\n","                             .<TravB>fmap(Applicative::coerce))\n","                .coerce();\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a value of type <code>A</code> in a {@link Choice7}.\n","     *\n","     * @param a   the value\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @param <C> the third possible type\n","     * @param <D> the fourth possible type\n","     * @param <E> the fifth possible type\n","     * @param <F> the sixth possible type\n","     * @param <G> the seventh possible type\n","     * @return the wrapped value as a {@link Choice7}&lt;A, B, C, D, E, F, G&gt;\n","     */\n","    public static <A, B, C, D, E, F, G> Choice7<A, B, C, D, E, F, G> a(A a) {\n","        return new _A<>(a);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a value of type <code>B</code> in a {@link Choice7}.\n","     *\n","     * @param b   the value\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @param <C> the third possible type\n","     * @param <D> the fourth possible type\n","     * @param <E> the fifth possible type\n","     * @param <F> the sixth possible type\n","     * @param <G> the seventh possible type\n","     * @return the wrapped value as a {@link Choice7}&lt;A, B, C, D, E, F, G&gt;\n","     */\n","    public static <A, B, C, D, E, F, G> Choice7<A, B, C, D, E, F, G> b(B b) {\n","        return new _B<>(b);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a value of type <code>C</code> in a {@link Choice7}.\n","     *\n","     * @param c   the value\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @param <C> the third possible type\n","     * @param <D> the fourth possible type\n","     * @param <E> the fifth possible type\n","     * @param <F> the sixth possible type\n","     * @param <G> the seventh possible type\n","     * @return the wrapped value as a {@link Choice7}&lt;A, B, C, D, E, F, G&gt;\n","     */\n","    public static <A, B, C, D, E, F, G> Choice7<A, B, C, D, E, F, G> c(C c) {\n","        return new _C<>(c);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a value of type <code>D</code> in a {@link Choice7}.\n","     *\n","     * @param d   the value\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @param <C> the third possible type\n","     * @param <D> the fourth possible type\n","     * @param <E> the fifth possible type\n","     * @param <F> the sixth possible type\n","     * @param <G> the seventh possible type\n","     * @return the wrapped value as a {@link Choice7}&lt;A, B, C, D, E, F, G&gt;\n","     */\n","    public static <A, B, C, D, E, F, G> Choice7<A, B, C, D, E, F, G> d(D d) {\n","        return new _D<>(d);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a value of type <code>E</code> in a {@link Choice7}.\n","     *\n","     * @param e   the value\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @param <C> the third possible type\n","     * @param <D> the fourth possible type\n","     * @param <E> the fifth possible type\n","     * @param <F> the sixth possible type\n","     * @param <G> the seventh possible type\n","     * @return the wrapped value as a {@link Choice7}&lt;A, B, C, D, E, F, G&gt;\n","     */\n","    public static <A, B, C, D, E, F, G> Choice7<A, B, C, D, E, F, G> e(E e) {\n","        return new _E<>(e);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a value of type <code>F</code> in a {@link Choice7}.\n","     *\n","     * @param f   the value\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @param <C> the third possible type\n","     * @param <D> the fourth possible type\n","     * @param <E> the fifth possible type\n","     * @param <F> the sixth possible type\n","     * @param <G> the seventh possible type\n","     * @return the wrapped value as a {@link Choice7}&lt;A, B, C, D, E, F, G&gt;\n","     */\n","    public static <A, B, C, D, E, F, G> Choice7<A, B, C, D, E, F, G> f(F f) {\n","        return new _F<>(f);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a value of type <code>G</code> in a {@link Choice7}.\n","     *\n","     * @param g   the value\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @param <C> the third possible type\n","     * @param <D> the fourth possible type\n","     * @param <E> the fifth possible type\n","     * @param <F> the sixth possible type\n","     * @param <G> the seventh possible type\n","     * @return the wrapped value as a {@link Choice7}&lt;A, B, C, D, E, F, G&gt;\n","     */\n","    public static <A, B, C, D, E, F, G> Choice7<A, B, C, D, E, F, G> g(G g) {\n","        return new _G<>(g);\n","    }\n","\n","    /**\n","     * The canonical {@link Pure} instance for {@link Choice7}.\n","     *\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @param <C> the third possible type\n","     * @param <D> the fourth possible type\n","     * @param <E> the fifth possible type\n","     * @param <F> the sixth possible type\n","     * @return the {@link Pure} instance\n","     */\n","    public static <A, B, C, D, E, F> Pure<Choice7<A, B, C, D, E, F, ?>> pureChoice() {\n","        return Choice7::g;\n","    }\n","\n","    private static final class _A<A, B, C, D, E, F, G> extends Choice7<A, B, C, D, E, F, G> {\n","\n","        private final A a;\n","\n","        private _A(A a) {\n","            this.a = a;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                           Fn1<? super C, ? extends R> cFn, Fn1<? super D, ? extends R> dFn,\n","                           Fn1<? super E, ? extends R> eFn, Fn1<? super F, ? extends R> fFn,\n","                           Fn1<? super G, ? extends R> gFn) {\n","            return aFn.apply(a);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof _A\n","                    && Objects.equals(a, ((_A) other).a);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(a);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Choice7{a=\" + a + '}';\n","        }\n","    }\n","\n","    private static final class _B<A, B, C, D, E, F, G> extends Choice7<A, B, C, D, E, F, G> {\n","\n","        private final B b;\n","\n","        private _B(B b) {\n","            this.b = b;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                           Fn1<? super C, ? extends R> cFn, Fn1<? super D, ? extends R> dFn,\n","                           Fn1<? super E, ? extends R> eFn, Fn1<? super F, ? extends R> fFn,\n","                           Fn1<? super G, ? extends R> gFn) {\n","            return bFn.apply(b);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof _B\n","                    && Objects.equals(b, ((_B) other).b);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(b);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Choice7{b=\" + b + '}';\n","        }\n","    }\n","\n","    private static final class _C<A, B, C, D, E, F, G> extends Choice7<A, B, C, D, E, F, G> {\n","\n","        private final C c;\n","\n","        private _C(C c) {\n","            this.c = c;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                           Fn1<? super C, ? extends R> cFn, Fn1<? super D, ? extends R> dFn,\n","                           Fn1<? super E, ? extends R> eFn, Fn1<? super F, ? extends R> fFn,\n","                           Fn1<? super G, ? extends R> gFn) {\n","            return cFn.apply(c);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof _C\n","                    && Objects.equals(c, ((_C) other).c);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(c);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Choice7{c=\" + c + '}';\n","        }\n","    }\n","\n","    private static final class _D<A, B, C, D, E, F, G> extends Choice7<A, B, C, D, E, F, G> {\n","\n","        private final D d;\n","\n","        private _D(D d) {\n","            this.d = d;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                           Fn1<? super C, ? extends R> cFn, Fn1<? super D, ? extends R> dFn,\n","                           Fn1<? super E, ? extends R> eFn, Fn1<? super F, ? extends R> fFn,\n","                           Fn1<? super G, ? extends R> gFn) {\n","            return dFn.apply(d);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof _D\n","                    && Objects.equals(d, ((_D) other).d);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(d);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Choice7{d=\" + d + '}';\n","        }\n","    }\n","\n","    private static final class _E<A, B, C, D, E, F, G> extends Choice7<A, B, C, D, E, F, G> {\n","\n","        private final E e;\n","\n","        private _E(E e) {\n","            this.e = e;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                           Fn1<? super C, ? extends R> cFn, Fn1<? super D, ? extends R> dFn,\n","                           Fn1<? super E, ? extends R> eFn, Fn1<? super F, ? extends R> fFn,\n","                           Fn1<? super G, ? extends R> gFn) {\n","            return eFn.apply(e);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof _E\n","                    && Objects.equals(e, ((_E) other).e);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(e);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Choice7{e=\" + e + '}';\n","        }\n","    }\n","\n","    private static final class _F<A, B, C, D, E, F, G> extends Choice7<A, B, C, D, E, F, G> {\n","\n","        private final F f;\n","\n","        private _F(F f) {\n","            this.f = f;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                           Fn1<? super C, ? extends R> cFn, Fn1<? super D, ? extends R> dFn,\n","                           Fn1<? super E, ? extends R> eFn, Fn1<? super F, ? extends R> fFn,\n","                           Fn1<? super G, ? extends R> gFn) {\n","            return fFn.apply(f);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof _F\n","                    && Objects.equals(f, ((_F) other).f);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(f);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Choice7{f=\" + f + '}';\n","        }\n","    }\n","\n","    private static final class _G<A, B, C, D, E, F, G> extends Choice7<A, B, C, D, E, F, G> {\n","\n","        private final G g;\n","\n","        private _G(G g) {\n","            this.g = g;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                           Fn1<? super C, ? extends R> cFn, Fn1<? super D, ? extends R> dFn,\n","                           Fn1<? super E, ? extends R> eFn, Fn1<? super F, ? extends R> fFn,\n","                           Fn1<? super G, ? extends R> gFn) {\n","            return gFn.apply(g);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof _G\n","                    && Objects.equals(g, ((_G) other).g);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(g);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Choice7{g=\" + g + '}';\n","        }\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.adt.choice;\n","\n","import com.jnape.palatable.lambda.adt.coproduct.CoProduct6;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.framework.Subjects;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Before;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.ApplicativeLaws;\n","import testsupport.traits.BifunctorLaws;\n","import testsupport.traits.FunctorLaws;\n","import testsupport.traits.MonadLaws;\n","import testsupport.traits.MonadRecLaws;\n","import testsupport.traits.TraversableLaws;\n","\n","import static com.jnape.palatable.lambda.adt.choice.Choice7.a;\n","import static com.jnape.palatable.lambda.adt.choice.Choice7.b;\n","import static com.jnape.palatable.lambda.adt.choice.Choice7.c;\n","import static com.jnape.palatable.lambda.adt.choice.Choice7.d;\n","import static com.jnape.palatable.lambda.adt.choice.Choice7.e;\n","import static com.jnape.palatable.lambda.adt.choice.Choice7.f;\n","import static com.jnape.palatable.lambda.adt.choice.Choice7.g;\n","import static com.jnape.palatable.lambda.functor.builtin.Lazy.lazy;\n","import static com.jnape.palatable.traitor.framework.Subjects.subjects;\n","import static org.junit.Assert.assertEquals;\n","\n","@RunWith(Traits.class)\n","public class Choice7Test {\n","\n","    private Choice7<Integer, String, Boolean, Double, Character, Long, Float> a;\n","    private Choice7<Integer, String, Boolean, Double, Character, Long, Float> b;\n","    private Choice7<Integer, String, Boolean, Double, Character, Long, Float> c;\n","    private Choice7<Integer, String, Boolean, Double, Character, Long, Float> d;\n","    private Choice7<Integer, String, Boolean, Double, Character, Long, Float> e;\n","    private Choice7<Integer, String, Boolean, Double, Character, Long, Float> f;\n","    private Choice7<Integer, String, Boolean, Double, Character, Long, Float> g;\n","\n","    @Before\n","    public void setUp() {\n","        a = a(1);\n","        b = b(\"two\");\n","        c = c(true);\n","        d = d(4d);\n","        e = e('z');\n","        f = f(5L);\n","        g = g(6F);\n","    }\n","\n","    @TestTraits({\n","            FunctorLaws.class,\n","            ApplicativeLaws.class,\n","            MonadLaws.class,\n","            BifunctorLaws.class,\n","            TraversableLaws.class,\n","            MonadRecLaws.class})\n","    public Subjects<Choice7<String, Integer, Boolean, Character, Double, Long, Float>> testSubjects() {\n","        return subjects(a(\"foo\"), b(1), c(true), d('a'), e(2d), f(5L), g(6F));\n","    }\n","\n","    @Test\n","    public void convergeStaysInChoice() {\n","        Fn1<Float, CoProduct6<Integer, String, Boolean, Double, Character, Long, ?>> convergenceFn = g -> Choice6.b(g.toString());\n","\n","        assertEquals(Choice6.a(1), a.converge(convergenceFn));\n","        assertEquals(Choice6.b(\"two\"), b.converge(convergenceFn));\n","        assertEquals(Choice6.c(true), c.converge(convergenceFn));\n","        assertEquals(Choice6.d(4d), d.converge(convergenceFn));\n","        assertEquals(Choice6.e('z'), e.converge(convergenceFn));\n","        assertEquals(Choice6.f(5L), f.converge(convergenceFn));\n","        assertEquals(Choice6.b(\"6.0\"), g.converge(convergenceFn));\n","    }\n","\n","    @Test\n","    public void divergeStaysInChoice() {\n","        assertEquals(Choice8.a(1), a.diverge());\n","        assertEquals(Choice8.b(\"two\"), b.diverge());\n","        assertEquals(Choice8.c(true), c.diverge());\n","        assertEquals(Choice8.d(4D), d.diverge());\n","        assertEquals(Choice8.e('z'), e.diverge());\n","        assertEquals(Choice8.f(5L), f.diverge());\n","        assertEquals(Choice8.g(6F), g.diverge());\n","    }\n","\n","    @Test\n","    public void lazyZip() {\n","        assertEquals(g(2), g(1).lazyZip(lazy(g(x -> x + 1))).value());\n","        assertEquals(a(1), a(1).lazyZip(lazy(() -> {\n","            throw new AssertionError();\n","        })).value());\n","        assertEquals(b(1), b(1).lazyZip(lazy(() -> {\n","            throw new AssertionError();\n","        })).value());\n","        assertEquals(c(1), c(1).lazyZip(lazy(() -> {\n","            throw new AssertionError();\n","        })).value());\n","        assertEquals(d(1), d(1).lazyZip(lazy(() -> {\n","            throw new AssertionError();\n","        })).value());\n","        assertEquals(e(1), e(1).lazyZip(lazy(() -> {\n","            throw new AssertionError();\n","        })).value());\n","        assertEquals(f(1), f(1).lazyZip(lazy(() -> {\n","            throw new AssertionError();\n","        })).value());\n","    }\n","\n","    @Test\n","    public void staticPure() {\n","        Choice7<Byte, Short, Integer, Long, Float, Double, Boolean> choice =\n","                Choice7.<Byte, Short, Integer, Long, Float, Double>pureChoice().apply(true);\n","        assertEquals(g(true), choice);\n","    }\n","}"],"method_lines_dic":{"Choice7::::project()":[52,55],"Choice7::::diverge()":[60,63],"Choice7::::converge(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct6<A, B, C, D, E, F, ?>>)":[68,73],"Choice7::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends H>)":[78,81],"Choice7::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends H>)":[86,89],"Choice7::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends H>)":[94,97],"Choice7::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends H>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends I>)":[102,106],"Choice7::::pure(H)":[111,114],"Choice7::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends H>, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>)":[119,123],"Choice7::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends H>, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>>)":[128,138],"Choice7::::discardL(com.jnape.palatable.lambda.functor.Applicative<H, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>)":[143,146],"Choice7::::discardR(com.jnape.palatable.lambda.functor.Applicative<H, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>)":[151,154],"Choice7::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.monad.Monad<H, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>>)":[159,163],"Choice7::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<G, H>, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>>)":[168,179],"Choice7::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.functor.Applicative<H, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)":[184,197],"Choice7::::a(A)":[212,214],"Choice7::::b(B)":[229,231],"Choice7::::c(C)":[246,248],"Choice7::::d(D)":[263,265],"Choice7::::e(E)":[280,282],"Choice7::::f(F)":[297,299],"Choice7::::g(G)":[314,316],"Choice7::::pureChoice()":[329,331],"Choice7._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)":[341,347],"Choice7._A::::equals(java.lang.Object)":[349,353],"Choice7._A::::hashCode()":[355,358],"Choice7._A::::toString()":[360,363],"Choice7._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)":[374,380],"Choice7._B::::equals(java.lang.Object)":[382,386],"Choice7._B::::hashCode()":[388,391],"Choice7._B::::toString()":[393,396],"Choice7._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)":[407,413],"Choice7._C::::equals(java.lang.Object)":[415,419],"Choice7._C::::hashCode()":[421,424],"Choice7._C::::toString()":[426,429],"Choice7._D::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)":[440,446],"Choice7._D::::equals(java.lang.Object)":[448,452],"Choice7._D::::hashCode()":[454,457],"Choice7._D::::toString()":[459,462],"Choice7._E::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)":[473,479],"Choice7._E::::equals(java.lang.Object)":[481,485],"Choice7._E::::hashCode()":[487,490],"Choice7._E::::toString()":[492,495],"Choice7._F::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)":[506,512],"Choice7._F::::equals(java.lang.Object)":[514,518],"Choice7._F::::hashCode()":[520,523],"Choice7._F::::toString()":[525,528],"Choice7._G::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)":[539,545],"Choice7._G::::equals(java.lang.Object)":[547,551],"Choice7._G::::hashCode()":[553,556],"Choice7._G::::toString()":[558,561]},"test_method_lines_dic":{"Choice7Test::::setUp()":[40,49],"Choice7Test::::testSubjects()":[51,60],"Choice7Test::::convergeStaysInChoice()":[62,73],"Choice7Test::::divergeStaysInChoice()":[75,84],"Choice7Test::::lazyZip()":[86,107],"Choice7Test::::staticPure()":[109,114]},"reverse_method_lines_dic":{"52":"Choice7::::project()","53":"Choice7::::project()","54":"Choice7::::project()","55":"Choice7::::project()","60":"Choice7::::diverge()","61":"Choice7::::diverge()","62":"Choice7::::diverge()","63":"Choice7::::diverge()","68":"Choice7::::converge(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct6<A, B, C, D, E, F, ?>>)","69":"Choice7::::converge(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct6<A, B, C, D, E, F, ?>>)","70":"Choice7::::converge(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct6<A, B, C, D, E, F, ?>>)","71":"Choice7::::converge(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct6<A, B, C, D, E, F, ?>>)","72":"Choice7::::converge(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct6<A, B, C, D, E, F, ?>>)","73":"Choice7::::converge(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct6<A, B, C, D, E, F, ?>>)","78":"Choice7::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends H>)","79":"Choice7::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends H>)","80":"Choice7::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends H>)","81":"Choice7::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends H>)","86":"Choice7::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends H>)","87":"Choice7::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends H>)","88":"Choice7::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends H>)","89":"Choice7::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends H>)","94":"Choice7::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends H>)","95":"Choice7::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends H>)","96":"Choice7::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends H>)","97":"Choice7::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends H>)","102":"Choice7::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends H>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends I>)","103":"Choice7::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends H>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends I>)","104":"Choice7::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends H>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends I>)","105":"Choice7::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends H>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends I>)","106":"Choice7::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends H>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends I>)","111":"Choice7::::pure(H)","112":"Choice7::::pure(H)","113":"Choice7::::pure(H)","114":"Choice7::::pure(H)","119":"Choice7::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends H>, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>)","120":"Choice7::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends H>, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>)","121":"Choice7::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends H>, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>)","122":"Choice7::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends H>, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>)","123":"Choice7::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends H>, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>)","128":"Choice7::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends H>, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>>)","129":"Choice7::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends H>, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>>)","130":"Choice7::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends H>, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>>)","131":"Choice7::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends H>, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>>)","132":"Choice7::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends H>, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>>)","133":"Choice7::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends H>, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>>)","134":"Choice7::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends H>, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>>)","135":"Choice7::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends H>, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>>)","136":"Choice7::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends H>, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>>)","137":"Choice7::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends H>, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>>)","138":"Choice7::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends H>, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>>)","143":"Choice7::::discardL(com.jnape.palatable.lambda.functor.Applicative<H, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>)","144":"Choice7::::discardL(com.jnape.palatable.lambda.functor.Applicative<H, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>)","145":"Choice7::::discardL(com.jnape.palatable.lambda.functor.Applicative<H, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>)","146":"Choice7::::discardL(com.jnape.palatable.lambda.functor.Applicative<H, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>)","151":"Choice7::::discardR(com.jnape.palatable.lambda.functor.Applicative<H, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>)","152":"Choice7::::discardR(com.jnape.palatable.lambda.functor.Applicative<H, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>)","153":"Choice7::::discardR(com.jnape.palatable.lambda.functor.Applicative<H, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>)","154":"Choice7::::discardR(com.jnape.palatable.lambda.functor.Applicative<H, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>)","159":"Choice7::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.monad.Monad<H, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>>)","160":"Choice7::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.monad.Monad<H, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>>)","161":"Choice7::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.monad.Monad<H, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>>)","162":"Choice7::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.monad.Monad<H, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>>)","163":"Choice7::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.monad.Monad<H, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>>)","168":"Choice7::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<G, H>, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>>)","169":"Choice7::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<G, H>, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>>)","170":"Choice7::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<G, H>, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>>)","171":"Choice7::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<G, H>, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>>)","172":"Choice7::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<G, H>, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>>)","173":"Choice7::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<G, H>, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>>)","174":"Choice7::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<G, H>, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>>)","175":"Choice7::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<G, H>, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>>)","176":"Choice7::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<G, H>, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>>)","177":"Choice7::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<G, H>, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>>)","178":"Choice7::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<G, H>, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>>)","179":"Choice7::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<G, H>, com.jnape.palatable.lambda.adt.choice.Choice7<A, B, C, D, E, F, ?>>>)","184":"Choice7::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.functor.Applicative<H, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","185":"Choice7::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.functor.Applicative<H, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","186":"Choice7::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.functor.Applicative<H, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","187":"Choice7::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.functor.Applicative<H, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","188":"Choice7::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.functor.Applicative<H, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","189":"Choice7::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.functor.Applicative<H, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","190":"Choice7::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.functor.Applicative<H, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","191":"Choice7::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.functor.Applicative<H, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","192":"Choice7::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.functor.Applicative<H, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","193":"Choice7::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.functor.Applicative<H, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","194":"Choice7::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.functor.Applicative<H, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","195":"Choice7::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.functor.Applicative<H, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","196":"Choice7::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.functor.Applicative<H, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","197":"Choice7::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.functor.Applicative<H, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","212":"Choice7::::a(A)","213":"Choice7::::a(A)","214":"Choice7::::a(A)","229":"Choice7::::b(B)","230":"Choice7::::b(B)","231":"Choice7::::b(B)","246":"Choice7::::c(C)","247":"Choice7::::c(C)","248":"Choice7::::c(C)","263":"Choice7::::d(D)","264":"Choice7::::d(D)","265":"Choice7::::d(D)","280":"Choice7::::e(E)","281":"Choice7::::e(E)","282":"Choice7::::e(E)","297":"Choice7::::f(F)","298":"Choice7::::f(F)","299":"Choice7::::f(F)","314":"Choice7::::g(G)","315":"Choice7::::g(G)","316":"Choice7::::g(G)","329":"Choice7::::pureChoice()","330":"Choice7::::pureChoice()","331":"Choice7::::pureChoice()","341":"Choice7._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","342":"Choice7._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","343":"Choice7._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","344":"Choice7._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","345":"Choice7._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","346":"Choice7._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","347":"Choice7._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","349":"Choice7._A::::equals(java.lang.Object)","350":"Choice7._A::::equals(java.lang.Object)","351":"Choice7._A::::equals(java.lang.Object)","352":"Choice7._A::::equals(java.lang.Object)","353":"Choice7._A::::equals(java.lang.Object)","355":"Choice7._A::::hashCode()","356":"Choice7._A::::hashCode()","357":"Choice7._A::::hashCode()","358":"Choice7._A::::hashCode()","360":"Choice7._A::::toString()","361":"Choice7._A::::toString()","362":"Choice7._A::::toString()","363":"Choice7._A::::toString()","374":"Choice7._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","375":"Choice7._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","376":"Choice7._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","377":"Choice7._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","378":"Choice7._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","379":"Choice7._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","380":"Choice7._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","382":"Choice7._B::::equals(java.lang.Object)","383":"Choice7._B::::equals(java.lang.Object)","384":"Choice7._B::::equals(java.lang.Object)","385":"Choice7._B::::equals(java.lang.Object)","386":"Choice7._B::::equals(java.lang.Object)","388":"Choice7._B::::hashCode()","389":"Choice7._B::::hashCode()","390":"Choice7._B::::hashCode()","391":"Choice7._B::::hashCode()","393":"Choice7._B::::toString()","394":"Choice7._B::::toString()","395":"Choice7._B::::toString()","396":"Choice7._B::::toString()","407":"Choice7._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","408":"Choice7._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","409":"Choice7._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","410":"Choice7._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","411":"Choice7._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","412":"Choice7._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","413":"Choice7._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","415":"Choice7._C::::equals(java.lang.Object)","416":"Choice7._C::::equals(java.lang.Object)","417":"Choice7._C::::equals(java.lang.Object)","418":"Choice7._C::::equals(java.lang.Object)","419":"Choice7._C::::equals(java.lang.Object)","421":"Choice7._C::::hashCode()","422":"Choice7._C::::hashCode()","423":"Choice7._C::::hashCode()","424":"Choice7._C::::hashCode()","426":"Choice7._C::::toString()","427":"Choice7._C::::toString()","428":"Choice7._C::::toString()","429":"Choice7._C::::toString()","440":"Choice7._D::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","441":"Choice7._D::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","442":"Choice7._D::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","443":"Choice7._D::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","444":"Choice7._D::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","445":"Choice7._D::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","446":"Choice7._D::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","448":"Choice7._D::::equals(java.lang.Object)","449":"Choice7._D::::equals(java.lang.Object)","450":"Choice7._D::::equals(java.lang.Object)","451":"Choice7._D::::equals(java.lang.Object)","452":"Choice7._D::::equals(java.lang.Object)","454":"Choice7._D::::hashCode()","455":"Choice7._D::::hashCode()","456":"Choice7._D::::hashCode()","457":"Choice7._D::::hashCode()","459":"Choice7._D::::toString()","460":"Choice7._D::::toString()","461":"Choice7._D::::toString()","462":"Choice7._D::::toString()","473":"Choice7._E::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","474":"Choice7._E::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","475":"Choice7._E::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","476":"Choice7._E::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","477":"Choice7._E::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","478":"Choice7._E::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","479":"Choice7._E::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","481":"Choice7._E::::equals(java.lang.Object)","482":"Choice7._E::::equals(java.lang.Object)","483":"Choice7._E::::equals(java.lang.Object)","484":"Choice7._E::::equals(java.lang.Object)","485":"Choice7._E::::equals(java.lang.Object)","487":"Choice7._E::::hashCode()","488":"Choice7._E::::hashCode()","489":"Choice7._E::::hashCode()","490":"Choice7._E::::hashCode()","492":"Choice7._E::::toString()","493":"Choice7._E::::toString()","494":"Choice7._E::::toString()","495":"Choice7._E::::toString()","506":"Choice7._F::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","507":"Choice7._F::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","508":"Choice7._F::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","509":"Choice7._F::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","510":"Choice7._F::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","511":"Choice7._F::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","512":"Choice7._F::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","514":"Choice7._F::::equals(java.lang.Object)","515":"Choice7._F::::equals(java.lang.Object)","516":"Choice7._F::::equals(java.lang.Object)","517":"Choice7._F::::equals(java.lang.Object)","518":"Choice7._F::::equals(java.lang.Object)","520":"Choice7._F::::hashCode()","521":"Choice7._F::::hashCode()","522":"Choice7._F::::hashCode()","523":"Choice7._F::::hashCode()","525":"Choice7._F::::toString()","526":"Choice7._F::::toString()","527":"Choice7._F::::toString()","528":"Choice7._F::::toString()","539":"Choice7._G::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","540":"Choice7._G::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","541":"Choice7._G::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","542":"Choice7._G::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","543":"Choice7._G::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","544":"Choice7._G::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","545":"Choice7._G::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","547":"Choice7._G::::equals(java.lang.Object)","548":"Choice7._G::::equals(java.lang.Object)","549":"Choice7._G::::equals(java.lang.Object)","550":"Choice7._G::::equals(java.lang.Object)","551":"Choice7._G::::equals(java.lang.Object)","553":"Choice7._G::::hashCode()","554":"Choice7._G::::hashCode()","555":"Choice7._G::::hashCode()","556":"Choice7._G::::hashCode()","558":"Choice7._G::::toString()","559":"Choice7._G::::toString()","560":"Choice7._G::::toString()","561":"Choice7._G::::toString()"},"test_reverse_method_lines_dic":{"40":"Choice7Test::::setUp()","41":"Choice7Test::::setUp()","42":"Choice7Test::::setUp()","43":"Choice7Test::::setUp()","44":"Choice7Test::::setUp()","45":"Choice7Test::::setUp()","46":"Choice7Test::::setUp()","47":"Choice7Test::::setUp()","48":"Choice7Test::::setUp()","49":"Choice7Test::::setUp()","51":"Choice7Test::::testSubjects()","52":"Choice7Test::::testSubjects()","53":"Choice7Test::::testSubjects()","54":"Choice7Test::::testSubjects()","55":"Choice7Test::::testSubjects()","56":"Choice7Test::::testSubjects()","57":"Choice7Test::::testSubjects()","58":"Choice7Test::::testSubjects()","59":"Choice7Test::::testSubjects()","60":"Choice7Test::::testSubjects()","62":"Choice7Test::::convergeStaysInChoice()","63":"Choice7Test::::convergeStaysInChoice()","64":"Choice7Test::::convergeStaysInChoice()","65":"Choice7Test::::convergeStaysInChoice()","66":"Choice7Test::::convergeStaysInChoice()","67":"Choice7Test::::convergeStaysInChoice()","68":"Choice7Test::::convergeStaysInChoice()","69":"Choice7Test::::convergeStaysInChoice()","70":"Choice7Test::::convergeStaysInChoice()","71":"Choice7Test::::convergeStaysInChoice()","72":"Choice7Test::::convergeStaysInChoice()","73":"Choice7Test::::convergeStaysInChoice()","75":"Choice7Test::::divergeStaysInChoice()","76":"Choice7Test::::divergeStaysInChoice()","77":"Choice7Test::::divergeStaysInChoice()","78":"Choice7Test::::divergeStaysInChoice()","79":"Choice7Test::::divergeStaysInChoice()","80":"Choice7Test::::divergeStaysInChoice()","81":"Choice7Test::::divergeStaysInChoice()","82":"Choice7Test::::divergeStaysInChoice()","83":"Choice7Test::::divergeStaysInChoice()","84":"Choice7Test::::divergeStaysInChoice()","86":"Choice7Test::::lazyZip()","87":"Choice7Test::::lazyZip()","88":"Choice7Test::::lazyZip()","89":"Choice7Test::::lazyZip()","90":"Choice7Test::::lazyZip()","91":"Choice7Test::::lazyZip()","92":"Choice7Test::::lazyZip()","93":"Choice7Test::::lazyZip()","94":"Choice7Test::::lazyZip()","95":"Choice7Test::::lazyZip()","96":"Choice7Test::::lazyZip()","97":"Choice7Test::::lazyZip()","98":"Choice7Test::::lazyZip()","99":"Choice7Test::::lazyZip()","100":"Choice7Test::::lazyZip()","101":"Choice7Test::::lazyZip()","102":"Choice7Test::::lazyZip()","103":"Choice7Test::::lazyZip()","104":"Choice7Test::::lazyZip()","105":"Choice7Test::::lazyZip()","106":"Choice7Test::::lazyZip()","107":"Choice7Test::::lazyZip()","109":"Choice7Test::::staticPure()","110":"Choice7Test::::staticPure()","111":"Choice7Test::::staticPure()","112":"Choice7Test::::staticPure()","113":"Choice7Test::::staticPure()","114":"Choice7Test::::staticPure()"},"tests":[{"test_lines":[40,49],"covered_lines":[44,45,213,230,247,264,281,298,315,337,338,339,370,371,372,403,404,405,436,437,438,469,470,471,502,503,504,535,536,537]},{"test_lines":[51,60],"covered_lines":[44,45,213,230,247,264,281,298,315,337,338,339,370,371,372,403,404,405,436,437,438,469,470,471,502,503,504,535,536,537]},{"test_lines":[62,73],"covered_lines":[44,45,70,71,213,230,247,264,281,298,315,337,338,339,346,370,371,372,379,403,404,405,412,436,437,438,445,469,470,471,478,502,503,504,511,535,536,537,544]},{"test_lines":[75,84],"covered_lines":[44,45,62,213,230,247,264,281,298,315,337,338,339,346,370,371,372,379,403,404,405,412,436,437,438,445,469,470,471,478,502,503,504,511,535,536,537,544]},{"test_lines":[86,107],"covered_lines":[44,45,80,113,131,132,133,134,135,136,137,162,213,230,247,264,281,298,315,337,338,339,346,351,352,370,371,372,379,384,385,403,404,405,412,417,418,436,437,438,445,450,451,469,470,471,478,483,484,502,503,504,511,516,517,535,536,537,544,549,550]},{"test_lines":[109,114],"covered_lines":[44,45,213,230,247,264,281,298,315,330,337,338,339,370,371,372,403,404,405,436,437,438,469,470,471,502,503,504,535,536,537,549,550]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/adt/choice/Choice4.java":{"class_content":["package com.jnape.palatable.lambda.adt.choice;\n","\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.adt.coproduct.CoProduct3;\n","import com.jnape.palatable.lambda.adt.coproduct.CoProduct4;\n","import com.jnape.palatable.lambda.adt.hlist.HList;\n","import com.jnape.palatable.lambda.adt.hlist.Tuple4;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.recursion.RecursiveResult;\n","import com.jnape.palatable.lambda.functions.specialized.Pure;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","import com.jnape.palatable.lambda.functor.Bifunctor;\n","import com.jnape.palatable.lambda.functor.Functor;\n","import com.jnape.palatable.lambda.functor.builtin.Lazy;\n","import com.jnape.palatable.lambda.monad.Monad;\n","import com.jnape.palatable.lambda.monad.MonadRec;\n","import com.jnape.palatable.lambda.traversable.Traversable;\n","\n","import java.util.Objects;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Into4.into4;\n","import static com.jnape.palatable.lambda.functions.recursion.RecursiveResult.terminate;\n","import static com.jnape.palatable.lambda.functions.recursion.Trampoline.trampoline;\n","import static com.jnape.palatable.lambda.functor.builtin.Lazy.lazy;\n","\n","/**\n"," * Canonical ADT representation of {@link CoProduct4}.\n"," *\n"," * @param <A> the first possible type\n"," * @param <B> the second possible type\n"," * @param <C> the third possible type\n"," * @param <D> the fourth possible type\n"," * @see Choice3\n"," * @see Choice5\n"," */\n","public abstract class Choice4<A, B, C, D> implements\n","        CoProduct4<A, B, C, D, Choice4<A, B, C, D>>,\n","        MonadRec<D, Choice4<A, B, C, ?>>,\n","        Bifunctor<C, D, Choice4<A, B, ?, ?>>,\n","        Traversable<D, Choice4<A, B, C, ?>> {\n","\n","    private Choice4() {\n","    }\n","\n","    /**\n","     * Specialize this choice's projection to a {@link Tuple4}.\n","     *\n","     * @return a {@link Tuple4}\n","     */\n","    @Override\n","    public Tuple4<Maybe<A>, Maybe<B>, Maybe<C>, Maybe<D>> project() {\n","        return into4(HList::tuple, CoProduct4.super.project());\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <E> Choice5<A, B, C, D, E> diverge() {\n","        return match(Choice5::a, Choice5::b, Choice5::c, Choice5::d);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Choice3<A, B, C> converge(Fn1<? super D, ? extends CoProduct3<A, B, C, ?>> convergenceFn) {\n","        return match(Choice3::a, Choice3::b, Choice3::c,\n","                     convergenceFn.fmap(cp3 -> cp3.match(Choice3::a, Choice3::b, Choice3::c)));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final <E> Choice4<A, B, C, E> fmap(Fn1<? super D, ? extends E> fn) {\n","        return MonadRec.super.<E>fmap(fn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final <E> Choice4<A, B, E, D> biMapL(Fn1<? super C, ? extends E> fn) {\n","        return (Choice4<A, B, E, D>) Bifunctor.super.<E>biMapL(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final <E> Choice4<A, B, C, E> biMapR(Fn1<? super D, ? extends E> fn) {\n","        return (Choice4<A, B, C, E>) Bifunctor.super.<E>biMapR(fn);\n","    }\n","\n","    @Override\n","    public final <E, F> Choice4<A, B, E, F> biMap(Fn1<? super C, ? extends E> lFn,\n","                                                  Fn1<? super D, ? extends F> rFn) {\n","        return match(Choice4::a, Choice4::b, c -> c(lFn.apply(c)), d -> d(rFn.apply(d)));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <E> Choice4<A, B, C, E> pure(E e) {\n","        return d(e);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <E> Choice4<A, B, C, E> zip(Applicative<Fn1<? super D, ? extends E>, Choice4<A, B, C, ?>> appFn) {\n","        return MonadRec.super.zip(appFn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <E> Lazy<Choice4<A, B, C, E>> lazyZip(\n","            Lazy<? extends Applicative<Fn1<? super D, ? extends E>, Choice4<A, B, C, ?>>> lazyAppFn) {\n","        return match(a -> lazy(a(a)),\n","                     b -> lazy(b(b)),\n","                     c -> lazy(c(c)),\n","                     d -> lazyAppFn.fmap(choiceF -> choiceF.<E>fmap(f -> f.apply(d)).coerce()));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <E> Choice4<A, B, C, E> discardL(Applicative<E, Choice4<A, B, C, ?>> appB) {\n","        return MonadRec.super.discardL(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <E> Choice4<A, B, C, D> discardR(Applicative<E, Choice4<A, B, C, ?>> appB) {\n","        return MonadRec.super.discardR(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <E> Choice4<A, B, C, E> flatMap(Fn1<? super D, ? extends Monad<E, Choice4<A, B, C, ?>>> f) {\n","        return match(Choice4::a, Choice4::b, Choice4::c, d -> f.apply(d).coerce());\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <E> Choice4<A, B, C, E> trampolineM(\n","            Fn1<? super D, ? extends MonadRec<RecursiveResult<D, E>, Choice4<A, B, C, ?>>> fn) {\n","        return match(Choice4::a,\n","                     Choice4::b,\n","                     Choice4::c,\n","                     trampoline(d -> fn.apply(d).<Choice4<A, B, C, RecursiveResult<D, E>>>coerce()\n","                             .match(a -> terminate(a(a)),\n","                                    b -> terminate(b(b)),\n","                                    c -> terminate(c(c)),\n","                                    dOrE -> dOrE.fmap(Choice4::d))));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <E, App extends Applicative<?, App>, TravB extends Traversable<E, Choice4<A, B, C, ?>>,\n","            AppTrav extends Applicative<TravB, App>> AppTrav traverse(Fn1<? super D, ? extends Applicative<E, App>> fn,\n","                                                                      Fn1<? super TravB, ? extends AppTrav> pure) {\n","        return match(a -> pure.apply(Choice4.<A, B, C, E>a(a).<TravB>coerce()),\n","                     b -> pure.apply(Choice4.<A, B, C, E>b(b).<TravB>coerce()),\n","                     c -> pure.apply(Choice4.<A, B, C, E>c(c).<TravB>coerce()),\n","                     d -> fn.apply(d).<Choice4<A, B, C, E>>fmap(Choice4::d).<TravB>fmap(Functor::coerce))\n","                .coerce();\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a value of type <code>A</code> in a {@link Choice4}.\n","     *\n","     * @param a   the value\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @param <C> the third possible type\n","     * @param <D> the fourth possible type\n","     * @return the wrapped value as a {@link Choice4}&lt;A, B, C, D&gt;\n","     */\n","    public static <A, B, C, D> Choice4<A, B, C, D> a(A a) {\n","        return new _A<>(a);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a value of type <code>B</code> in a {@link Choice4}.\n","     *\n","     * @param b   the value\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @param <C> the third possible type\n","     * @param <D> the fourth possible type\n","     * @return the wrapped value as a {@link Choice4}&lt;A, B, C, D&gt;\n","     */\n","    public static <A, B, C, D> Choice4<A, B, C, D> b(B b) {\n","        return new _B<>(b);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a value of type <code>C</code> in a {@link Choice4}.\n","     *\n","     * @param c   the value\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @param <C> the third possible type\n","     * @param <D> the fourth possible type\n","     * @return the wrapped value as a {@link Choice4}&lt;A, B, C, D&gt;\n","     */\n","    public static <A, B, C, D> Choice4<A, B, C, D> c(C c) {\n","        return new _C<>(c);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a value of type <code>D</code> in a {@link Choice4}.\n","     *\n","     * @param d   the value\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @param <C> the third possible type\n","     * @param <D> the fourth possible type\n","     * @return the wrapped value as a {@link Choice4}&lt;A, B, C, D&gt;\n","     */\n","    public static <A, B, C, D> Choice4<A, B, C, D> d(D d) {\n","        return new _D<>(d);\n","    }\n","\n","    /**\n","     * The canonical {@link Pure} instance for {@link Choice4}.\n","     *\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @param <C> the third possible type\n","     * @return the {@link Pure} instance\n","     */\n","    public static <A, B, C> Pure<Choice4<A, B, C, ?>> pureChoice() {\n","        return Choice4::d;\n","    }\n","\n","    private static final class _A<A, B, C, D> extends Choice4<A, B, C, D> {\n","\n","        private final A a;\n","\n","        private _A(A a) {\n","            this.a = a;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                           Fn1<? super C, ? extends R> cFn, Fn1<? super D, ? extends R> dFn) {\n","            return aFn.apply(a);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof _A\n","                    && Objects.equals(a, ((_A) other).a);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(a);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Choice4{\" +\n","                    \"a=\" + a +\n","                    '}';\n","        }\n","    }\n","\n","    private static final class _B<A, B, C, D> extends Choice4<A, B, C, D> {\n","\n","        private final B b;\n","\n","        private _B(B b) {\n","            this.b = b;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                           Fn1<? super C, ? extends R> cFn, Fn1<? super D, ? extends R> dFn) {\n","            return bFn.apply(b);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof _B\n","                    && Objects.equals(b, ((_B) other).b);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(b);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Choice4{\" +\n","                    \"b=\" + b +\n","                    '}';\n","        }\n","    }\n","\n","    private static final class _C<A, B, C, D> extends Choice4<A, B, C, D> {\n","\n","        private final C c;\n","\n","        private _C(C c) {\n","            this.c = c;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                           Fn1<? super C, ? extends R> cFn, Fn1<? super D, ? extends R> dFn) {\n","            return cFn.apply(c);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof _C\n","                    && Objects.equals(c, ((_C) other).c);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(c);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Choice4{\" +\n","                    \"c=\" + c +\n","                    '}';\n","        }\n","    }\n","\n","    private static final class _D<A, B, C, D> extends Choice4<A, B, C, D> {\n","\n","        private final D d;\n","\n","        private _D(D d) {\n","            this.d = d;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                           Fn1<? super C, ? extends R> cFn, Fn1<? super D, ? extends R> dFn) {\n","            return dFn.apply(d);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof _D\n","                    && Objects.equals(d, ((_D) other).d);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(d);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Choice4{\" +\n","                    \"d=\" + d +\n","                    '}';\n","        }\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.adt.choice;\n","\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.framework.Subjects;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Before;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.ApplicativeLaws;\n","import testsupport.traits.BifunctorLaws;\n","import testsupport.traits.FunctorLaws;\n","import testsupport.traits.MonadLaws;\n","import testsupport.traits.MonadRecLaws;\n","import testsupport.traits.TraversableLaws;\n","\n","import static com.jnape.palatable.lambda.adt.choice.Choice4.a;\n","import static com.jnape.palatable.lambda.adt.choice.Choice4.b;\n","import static com.jnape.palatable.lambda.adt.choice.Choice4.c;\n","import static com.jnape.palatable.lambda.adt.choice.Choice4.d;\n","import static com.jnape.palatable.lambda.functor.builtin.Lazy.lazy;\n","import static com.jnape.palatable.traitor.framework.Subjects.subjects;\n","import static org.junit.Assert.assertEquals;\n","\n","@RunWith(Traits.class)\n","public class Choice4Test {\n","\n","    private Choice4<Integer, String, Boolean, Double> a;\n","    private Choice4<Integer, String, Boolean, Double> b;\n","    private Choice4<Integer, String, Boolean, Double> c;\n","    private Choice4<Integer, String, Boolean, Double> d;\n","\n","    @Before\n","    public void setUp() {\n","        a = a(1);\n","        b = b(\"two\");\n","        c = c(true);\n","        d = d(4D);\n","    }\n","\n","    @TestTraits({FunctorLaws.class,\n","                 ApplicativeLaws.class,\n","                 MonadLaws.class,\n","                 BifunctorLaws.class,\n","                 TraversableLaws.class,\n","                 MonadRecLaws.class})\n","    public Subjects<Choice4<String, Integer, Boolean, Character>> testSubjects() {\n","        return subjects(a(\"foo\"), b(1), c(true), d('a'));\n","    }\n","\n","    @Test\n","    public void convergeStaysInChoice() {\n","        assertEquals(Choice3.<Integer, String, Boolean>a(1), a.converge(d -> Choice3.b(d.toString())));\n","        assertEquals(Choice3.<Integer, String, Boolean>b(\"two\"), b.converge(d -> Choice3.b(d.toString())));\n","        assertEquals(Choice3.<Integer, String, Boolean>c(true), c.converge(d -> Choice3.b(d.toString())));\n","        assertEquals(Choice3.<Integer, String, Boolean>b(\"4.0\"), d.converge(d -> Choice3.b(d.toString())));\n","    }\n","\n","    @Test\n","    public void divergeStaysInChoice() {\n","        assertEquals(Choice5.<Integer, String, Boolean, Double, Object>a(1), a.diverge());\n","        assertEquals(Choice5.<Integer, String, Boolean, Double, Object>b(\"two\"), b.diverge());\n","        assertEquals(Choice5.<Integer, String, Boolean, Double, Object>c(true), c.diverge());\n","        assertEquals(Choice5.<Integer, String, Boolean, Double, Object>d(4D), d.diverge());\n","    }\n","\n","    @Test\n","    public void lazyZip() {\n","        assertEquals(d(2), d(1).lazyZip(lazy(d(x -> x + 1))).value());\n","        assertEquals(a(1), a(1).lazyZip(lazy(() -> {\n","            throw new AssertionError();\n","        })).value());\n","        assertEquals(b(1), b(1).lazyZip(lazy(() -> {\n","            throw new AssertionError();\n","        })).value());\n","        assertEquals(c(1), c(1).lazyZip(lazy(() -> {\n","            throw new AssertionError();\n","        })).value());\n","    }\n","\n","    @Test\n","    public void staticPure() {\n","        Choice4<Byte, Short, Integer, Long> choice = Choice4.<Byte, Short, Integer>pureChoice().apply(4L);\n","        assertEquals(d(4L), choice);\n","    }\n","}"],"method_lines_dic":{"Choice4::::project()":[50,53],"Choice4::::diverge()":[58,61],"Choice4::::converge(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct3<A, B, C, ?>>)":[66,70],"Choice4::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends E>)":[75,78],"Choice4::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends E>)":[83,86],"Choice4::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends E>)":[91,94],"Choice4::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends E>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends F>)":[96,100],"Choice4::::pure(E)":[105,108],"Choice4::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends E>, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>)":[113,116],"Choice4::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends E>, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>>)":[121,128],"Choice4::::discardL(com.jnape.palatable.lambda.functor.Applicative<E, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>)":[133,136],"Choice4::::discardR(com.jnape.palatable.lambda.functor.Applicative<E, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>)":[141,144],"Choice4::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.monad.Monad<E, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>>)":[149,152],"Choice4::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<D, E>, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>>)":[157,168],"Choice4::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.functor.Applicative<E, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)":[173,182],"Choice4::::a(A)":[194,196],"Choice4::::b(B)":[208,210],"Choice4::::c(C)":[222,224],"Choice4::::d(D)":[236,238],"Choice4::::pureChoice()":[248,250],"Choice4._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>)":[260,264],"Choice4._A::::equals(java.lang.Object)":[266,270],"Choice4._A::::hashCode()":[272,275],"Choice4._A::::toString()":[277,282],"Choice4._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>)":[293,297],"Choice4._B::::equals(java.lang.Object)":[299,303],"Choice4._B::::hashCode()":[305,308],"Choice4._B::::toString()":[310,315],"Choice4._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>)":[326,330],"Choice4._C::::equals(java.lang.Object)":[332,336],"Choice4._C::::hashCode()":[338,341],"Choice4._C::::toString()":[343,348],"Choice4._D::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>)":[359,363],"Choice4._D::::equals(java.lang.Object)":[365,369],"Choice4._D::::hashCode()":[371,374],"Choice4._D::::toString()":[376,381]},"test_method_lines_dic":{"Choice4Test::::setUp()":[32,38],"Choice4Test::::testSubjects()":[40,48],"Choice4Test::::convergeStaysInChoice()":[50,56],"Choice4Test::::divergeStaysInChoice()":[58,64],"Choice4Test::::lazyZip()":[66,78],"Choice4Test::::staticPure()":[80,84]},"reverse_method_lines_dic":{"50":"Choice4::::project()","51":"Choice4::::project()","52":"Choice4::::project()","53":"Choice4::::project()","58":"Choice4::::diverge()","59":"Choice4::::diverge()","60":"Choice4::::diverge()","61":"Choice4::::diverge()","66":"Choice4::::converge(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct3<A, B, C, ?>>)","67":"Choice4::::converge(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct3<A, B, C, ?>>)","68":"Choice4::::converge(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct3<A, B, C, ?>>)","69":"Choice4::::converge(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct3<A, B, C, ?>>)","70":"Choice4::::converge(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct3<A, B, C, ?>>)","75":"Choice4::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends E>)","76":"Choice4::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends E>)","77":"Choice4::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends E>)","78":"Choice4::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends E>)","83":"Choice4::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends E>)","84":"Choice4::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends E>)","85":"Choice4::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends E>)","86":"Choice4::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends E>)","91":"Choice4::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends E>)","92":"Choice4::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends E>)","93":"Choice4::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends E>)","94":"Choice4::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends E>)","96":"Choice4::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends E>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends F>)","97":"Choice4::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends E>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends F>)","98":"Choice4::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends E>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends F>)","99":"Choice4::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends E>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends F>)","100":"Choice4::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends E>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends F>)","105":"Choice4::::pure(E)","106":"Choice4::::pure(E)","107":"Choice4::::pure(E)","108":"Choice4::::pure(E)","113":"Choice4::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends E>, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>)","114":"Choice4::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends E>, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>)","115":"Choice4::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends E>, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>)","116":"Choice4::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends E>, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>)","121":"Choice4::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends E>, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>>)","122":"Choice4::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends E>, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>>)","123":"Choice4::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends E>, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>>)","124":"Choice4::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends E>, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>>)","125":"Choice4::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends E>, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>>)","126":"Choice4::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends E>, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>>)","127":"Choice4::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends E>, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>>)","128":"Choice4::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends E>, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>>)","133":"Choice4::::discardL(com.jnape.palatable.lambda.functor.Applicative<E, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>)","134":"Choice4::::discardL(com.jnape.palatable.lambda.functor.Applicative<E, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>)","135":"Choice4::::discardL(com.jnape.palatable.lambda.functor.Applicative<E, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>)","136":"Choice4::::discardL(com.jnape.palatable.lambda.functor.Applicative<E, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>)","141":"Choice4::::discardR(com.jnape.palatable.lambda.functor.Applicative<E, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>)","142":"Choice4::::discardR(com.jnape.palatable.lambda.functor.Applicative<E, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>)","143":"Choice4::::discardR(com.jnape.palatable.lambda.functor.Applicative<E, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>)","144":"Choice4::::discardR(com.jnape.palatable.lambda.functor.Applicative<E, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>)","149":"Choice4::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.monad.Monad<E, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>>)","150":"Choice4::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.monad.Monad<E, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>>)","151":"Choice4::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.monad.Monad<E, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>>)","152":"Choice4::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.monad.Monad<E, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>>)","157":"Choice4::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<D, E>, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>>)","158":"Choice4::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<D, E>, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>>)","159":"Choice4::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<D, E>, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>>)","160":"Choice4::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<D, E>, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>>)","161":"Choice4::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<D, E>, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>>)","162":"Choice4::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<D, E>, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>>)","163":"Choice4::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<D, E>, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>>)","164":"Choice4::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<D, E>, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>>)","165":"Choice4::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<D, E>, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>>)","166":"Choice4::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<D, E>, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>>)","167":"Choice4::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<D, E>, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>>)","168":"Choice4::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<D, E>, com.jnape.palatable.lambda.adt.choice.Choice4<A, B, C, ?>>>)","173":"Choice4::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.functor.Applicative<E, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","174":"Choice4::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.functor.Applicative<E, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","175":"Choice4::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.functor.Applicative<E, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","176":"Choice4::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.functor.Applicative<E, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","177":"Choice4::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.functor.Applicative<E, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","178":"Choice4::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.functor.Applicative<E, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","179":"Choice4::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.functor.Applicative<E, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","180":"Choice4::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.functor.Applicative<E, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","181":"Choice4::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.functor.Applicative<E, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","182":"Choice4::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.functor.Applicative<E, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","194":"Choice4::::a(A)","195":"Choice4::::a(A)","196":"Choice4::::a(A)","208":"Choice4::::b(B)","209":"Choice4::::b(B)","210":"Choice4::::b(B)","222":"Choice4::::c(C)","223":"Choice4::::c(C)","224":"Choice4::::c(C)","236":"Choice4::::d(D)","237":"Choice4::::d(D)","238":"Choice4::::d(D)","248":"Choice4::::pureChoice()","249":"Choice4::::pureChoice()","250":"Choice4::::pureChoice()","260":"Choice4._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>)","261":"Choice4._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>)","262":"Choice4._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>)","263":"Choice4._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>)","264":"Choice4._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>)","266":"Choice4._A::::equals(java.lang.Object)","267":"Choice4._A::::equals(java.lang.Object)","268":"Choice4._A::::equals(java.lang.Object)","269":"Choice4._A::::equals(java.lang.Object)","270":"Choice4._A::::equals(java.lang.Object)","272":"Choice4._A::::hashCode()","273":"Choice4._A::::hashCode()","274":"Choice4._A::::hashCode()","275":"Choice4._A::::hashCode()","277":"Choice4._A::::toString()","278":"Choice4._A::::toString()","279":"Choice4._A::::toString()","280":"Choice4._A::::toString()","281":"Choice4._A::::toString()","282":"Choice4._A::::toString()","293":"Choice4._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>)","294":"Choice4._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>)","295":"Choice4._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>)","296":"Choice4._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>)","297":"Choice4._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>)","299":"Choice4._B::::equals(java.lang.Object)","300":"Choice4._B::::equals(java.lang.Object)","301":"Choice4._B::::equals(java.lang.Object)","302":"Choice4._B::::equals(java.lang.Object)","303":"Choice4._B::::equals(java.lang.Object)","305":"Choice4._B::::hashCode()","306":"Choice4._B::::hashCode()","307":"Choice4._B::::hashCode()","308":"Choice4._B::::hashCode()","310":"Choice4._B::::toString()","311":"Choice4._B::::toString()","312":"Choice4._B::::toString()","313":"Choice4._B::::toString()","314":"Choice4._B::::toString()","315":"Choice4._B::::toString()","326":"Choice4._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>)","327":"Choice4._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>)","328":"Choice4._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>)","329":"Choice4._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>)","330":"Choice4._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>)","332":"Choice4._C::::equals(java.lang.Object)","333":"Choice4._C::::equals(java.lang.Object)","334":"Choice4._C::::equals(java.lang.Object)","335":"Choice4._C::::equals(java.lang.Object)","336":"Choice4._C::::equals(java.lang.Object)","338":"Choice4._C::::hashCode()","339":"Choice4._C::::hashCode()","340":"Choice4._C::::hashCode()","341":"Choice4._C::::hashCode()","343":"Choice4._C::::toString()","344":"Choice4._C::::toString()","345":"Choice4._C::::toString()","346":"Choice4._C::::toString()","347":"Choice4._C::::toString()","348":"Choice4._C::::toString()","359":"Choice4._D::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>)","360":"Choice4._D::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>)","361":"Choice4._D::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>)","362":"Choice4._D::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>)","363":"Choice4._D::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>)","365":"Choice4._D::::equals(java.lang.Object)","366":"Choice4._D::::equals(java.lang.Object)","367":"Choice4._D::::equals(java.lang.Object)","368":"Choice4._D::::equals(java.lang.Object)","369":"Choice4._D::::equals(java.lang.Object)","371":"Choice4._D::::hashCode()","372":"Choice4._D::::hashCode()","373":"Choice4._D::::hashCode()","374":"Choice4._D::::hashCode()","376":"Choice4._D::::toString()","377":"Choice4._D::::toString()","378":"Choice4._D::::toString()","379":"Choice4._D::::toString()","380":"Choice4._D::::toString()","381":"Choice4._D::::toString()"},"test_reverse_method_lines_dic":{"32":"Choice4Test::::setUp()","33":"Choice4Test::::setUp()","34":"Choice4Test::::setUp()","35":"Choice4Test::::setUp()","36":"Choice4Test::::setUp()","37":"Choice4Test::::setUp()","38":"Choice4Test::::setUp()","40":"Choice4Test::::testSubjects()","41":"Choice4Test::::testSubjects()","42":"Choice4Test::::testSubjects()","43":"Choice4Test::::testSubjects()","44":"Choice4Test::::testSubjects()","45":"Choice4Test::::testSubjects()","46":"Choice4Test::::testSubjects()","47":"Choice4Test::::testSubjects()","48":"Choice4Test::::testSubjects()","50":"Choice4Test::::convergeStaysInChoice()","51":"Choice4Test::::convergeStaysInChoice()","52":"Choice4Test::::convergeStaysInChoice()","53":"Choice4Test::::convergeStaysInChoice()","54":"Choice4Test::::convergeStaysInChoice()","55":"Choice4Test::::convergeStaysInChoice()","56":"Choice4Test::::convergeStaysInChoice()","58":"Choice4Test::::divergeStaysInChoice()","59":"Choice4Test::::divergeStaysInChoice()","60":"Choice4Test::::divergeStaysInChoice()","61":"Choice4Test::::divergeStaysInChoice()","62":"Choice4Test::::divergeStaysInChoice()","63":"Choice4Test::::divergeStaysInChoice()","64":"Choice4Test::::divergeStaysInChoice()","66":"Choice4Test::::lazyZip()","67":"Choice4Test::::lazyZip()","68":"Choice4Test::::lazyZip()","69":"Choice4Test::::lazyZip()","70":"Choice4Test::::lazyZip()","71":"Choice4Test::::lazyZip()","72":"Choice4Test::::lazyZip()","73":"Choice4Test::::lazyZip()","74":"Choice4Test::::lazyZip()","75":"Choice4Test::::lazyZip()","76":"Choice4Test::::lazyZip()","77":"Choice4Test::::lazyZip()","78":"Choice4Test::::lazyZip()","80":"Choice4Test::::staticPure()","81":"Choice4Test::::staticPure()","82":"Choice4Test::::staticPure()","83":"Choice4Test::::staticPure()","84":"Choice4Test::::staticPure()"},"tests":[{"test_lines":[32,38],"covered_lines":[42,43,195,209,223,237,256,257,258,289,290,291,322,323,324,355,356,357]},{"test_lines":[40,48],"covered_lines":[42,43,195,209,223,237,256,257,258,289,290,291,322,323,324,355,356,357]},{"test_lines":[50,56],"covered_lines":[42,43,68,69,195,209,223,237,256,257,258,263,289,290,291,296,322,323,324,329,355,356,357,362]},{"test_lines":[58,64],"covered_lines":[42,43,60,195,209,223,237,256,257,258,263,289,290,291,296,322,323,324,329,355,356,357,362]},{"test_lines":[66,78],"covered_lines":[42,43,77,107,124,125,126,127,151,195,209,223,237,256,257,258,263,268,269,289,290,291,296,301,302,322,323,324,329,334,335,355,356,357,362,367,368]},{"test_lines":[80,84],"covered_lines":[42,43,195,209,223,237,249,256,257,258,289,290,291,322,323,324,355,356,357,367,368]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/adt/choice/Choice3.java":{"class_content":["package com.jnape.palatable.lambda.adt.choice;\n","\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.adt.coproduct.CoProduct2;\n","import com.jnape.palatable.lambda.adt.coproduct.CoProduct3;\n","import com.jnape.palatable.lambda.adt.hlist.HList;\n","import com.jnape.palatable.lambda.adt.hlist.Tuple3;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.recursion.RecursiveResult;\n","import com.jnape.palatable.lambda.functions.specialized.Pure;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","import com.jnape.palatable.lambda.functor.Bifunctor;\n","import com.jnape.palatable.lambda.functor.Functor;\n","import com.jnape.palatable.lambda.functor.builtin.Lazy;\n","import com.jnape.palatable.lambda.monad.Monad;\n","import com.jnape.palatable.lambda.monad.MonadRec;\n","import com.jnape.palatable.lambda.traversable.Traversable;\n","\n","import java.util.Objects;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Into3.into3;\n","import static com.jnape.palatable.lambda.functions.recursion.RecursiveResult.terminate;\n","import static com.jnape.palatable.lambda.functions.recursion.Trampoline.trampoline;\n","import static com.jnape.palatable.lambda.functor.builtin.Lazy.lazy;\n","\n","/**\n"," * Canonical ADT representation of {@link CoProduct3}.\n"," *\n"," * @param <A> the first possible type\n"," * @param <B> the second possible type\n"," * @param <C> the third possible type\n"," * @see Choice2\n"," * @see Choice4\n"," */\n","public abstract class Choice3<A, B, C> implements\n","        CoProduct3<A, B, C, Choice3<A, B, C>>,\n","        MonadRec<C, Choice3<A, B, ?>>,\n","        Bifunctor<B, C, Choice3<A, ?, ?>>,\n","        Traversable<C, Choice3<A, B, ?>> {\n","\n","    private Choice3() {\n","    }\n","\n","    /**\n","     * Specialize this choice's projection to a {@link Tuple3}.\n","     *\n","     * @return a {@link Tuple3}\n","     */\n","    @Override\n","    public Tuple3<Maybe<A>, Maybe<B>, Maybe<C>> project() {\n","        return into3(HList::tuple, CoProduct3.super.project());\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final <D> Choice4<A, B, C, D> diverge() {\n","        return match(Choice4::a, Choice4::b, Choice4::c);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final Choice2<A, B> converge(Fn1<? super C, ? extends CoProduct2<A, B, ?>> convergenceFn) {\n","        return match(Choice2::a, Choice2::b, convergenceFn.fmap(cp2 -> cp2.match(Choice2::a, Choice2::b)));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final <D> Choice3<A, B, D> fmap(Fn1<? super C, ? extends D> fn) {\n","        return MonadRec.super.<D>fmap(fn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final <D> Choice3<A, D, C> biMapL(Fn1<? super B, ? extends D> fn) {\n","        return (Choice3<A, D, C>) Bifunctor.super.<D>biMapL(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final <D> Choice3<A, B, D> biMapR(Fn1<? super C, ? extends D> fn) {\n","        return (Choice3<A, B, D>) Bifunctor.super.<D>biMapR(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public final <D, E> Choice3<A, D, E> biMap(Fn1<? super B, ? extends D> lFn,\n","                                               Fn1<? super C, ? extends E> rFn) {\n","        return match(Choice3::a, b -> b(lFn.apply(b)), c -> c(rFn.apply(c)));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <D> Choice3<A, B, D> pure(D d) {\n","        return c(d);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <D> Choice3<A, B, D> zip(Applicative<Fn1<? super C, ? extends D>, Choice3<A, B, ?>> appFn) {\n","        return MonadRec.super.zip(appFn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <D> Lazy<Choice3<A, B, D>> lazyZip(\n","            Lazy<? extends Applicative<Fn1<? super C, ? extends D>, Choice3<A, B, ?>>> lazyAppFn) {\n","        return match(a -> lazy(a(a)),\n","                     b -> lazy(b(b)),\n","                     c -> lazyAppFn.fmap(choiceF -> choiceF.<D>fmap(f -> f.apply(c)).coerce()));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <D> Choice3<A, B, D> discardL(Applicative<D, Choice3<A, B, ?>> appB) {\n","        return MonadRec.super.discardL(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <D> Choice3<A, B, C> discardR(Applicative<D, Choice3<A, B, ?>> appB) {\n","        return MonadRec.super.discardR(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <D> Choice3<A, B, D> flatMap(Fn1<? super C, ? extends Monad<D, Choice3<A, B, ?>>> f) {\n","        return match(Choice3::a, Choice3::b, c -> f.apply(c).coerce());\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <D> Choice3<A, B, D> trampolineM(\n","            Fn1<? super C, ? extends MonadRec<RecursiveResult<C, D>, Choice3<A, B, ?>>> fn) {\n","        return flatMap(trampoline(c -> fn.apply(c).<Choice3<A, B, RecursiveResult<C, D>>>coerce()\n","                .match(a -> terminate(a(a)),\n","                       b -> terminate(b(b)),\n","                       r -> r.fmap(Choice3::c))));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <D, App extends Applicative<?, App>, TravB extends Traversable<D, Choice3<A, B, ?>>,\n","            AppTrav extends Applicative<TravB, App>> AppTrav traverse(Fn1<? super C, ? extends Applicative<D, App>> fn,\n","                                                                      Fn1<? super TravB, ? extends AppTrav> pure) {\n","        return match(a -> pure.apply(Choice3.<A, B, D>a(a).<TravB>coerce()),\n","                     b -> pure.apply(Choice3.<A, B, D>b(b).<TravB>coerce()),\n","                     c -> fn.apply(c).<Choice3<A, B, D>>fmap(Choice3::c).<TravB>fmap(Functor::coerce))\n","                .coerce();\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a value of type <code>A</code> in a {@link Choice3}.\n","     *\n","     * @param a   the value\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @param <C> the third possible type\n","     * @return the wrapped value as a {@link Choice3}&lt;A, B, C&gt;\n","     */\n","    public static <A, B, C> Choice3<A, B, C> a(A a) {\n","        return new _A<>(a);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a value of type <code>A</code> in a {@link Choice3}.\n","     *\n","     * @param b   the value\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @param <C> the third possible type\n","     * @return the wrapped value as a {@link Choice3}&lt;A, B, C&gt;\n","     */\n","    public static <A, B, C> Choice3<A, B, C> b(B b) {\n","        return new _B<>(b);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a value of type <code>A</code> in a {@link Choice3}.\n","     *\n","     * @param c   the value\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @param <C> the third possible type\n","     * @return the wrapped value as a {@link Choice3}&lt;A, B, C&gt;\n","     */\n","    public static <A, B, C> Choice3<A, B, C> c(C c) {\n","        return new _C<>(c);\n","    }\n","\n","    /**\n","     * The canonical {@link Pure} instance for {@link Choice3}.\n","     *\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @return the {@link Pure} instance\n","     */\n","    public static <A, B> Pure<Choice3<A, B, ?>> pureChoice() {\n","        return Choice3::c;\n","    }\n","\n","    private static final class _A<A, B, C> extends Choice3<A, B, C> {\n","\n","        private final A a;\n","\n","        private _A(A a) {\n","            this.a = a;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                           Fn1<? super C, ? extends R> cFn) {\n","            return aFn.apply(a);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof _A\n","                    && Objects.equals(a, ((_A) other).a);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(a);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Choice3{\" +\n","                    \"a=\" + a +\n","                    '}';\n","        }\n","    }\n","\n","    private static final class _B<A, B, C> extends Choice3<A, B, C> {\n","\n","        private final B b;\n","\n","        private _B(B b) {\n","            this.b = b;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                           Fn1<? super C, ? extends R> cFn) {\n","            return bFn.apply(b);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof _B\n","                    && Objects.equals(b, ((_B) other).b);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(b);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Choice3{\" +\n","                    \"b=\" + b +\n","                    '}';\n","        }\n","    }\n","\n","    private static final class _C<A, B, C> extends Choice3<A, B, C> {\n","\n","        private final C c;\n","\n","        private _C(C c) {\n","            this.c = c;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                           Fn1<? super C, ? extends R> cFn) {\n","            return cFn.apply(c);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof _C\n","                    && Objects.equals(c, ((_C) other).c);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(c);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Choice3{\" +\n","                    \"c=\" + c +\n","                    '}';\n","        }\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.adt.choice;\n","\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.framework.Subjects;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Before;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.*;\n","\n","import static com.jnape.palatable.lambda.adt.choice.Choice3.a;\n","import static com.jnape.palatable.lambda.adt.choice.Choice3.b;\n","import static com.jnape.palatable.lambda.adt.choice.Choice3.c;\n","import static com.jnape.palatable.lambda.functor.builtin.Lazy.lazy;\n","import static com.jnape.palatable.traitor.framework.Subjects.subjects;\n","import static org.junit.Assert.assertEquals;\n","\n","@RunWith(Traits.class)\n","public class Choice3Test {\n","\n","    private Choice3<Integer, String, Boolean> a;\n","    private Choice3<Integer, String, Boolean> b;\n","    private Choice3<Integer, String, Boolean> c;\n","\n","    @Before\n","    public void setUp() {\n","        a = Choice3.a(1);\n","        b = Choice3.b(\"two\");\n","        c = Choice3.c(true);\n","    }\n","\n","    @TestTraits({FunctorLaws.class, ApplicativeLaws.class, MonadLaws.class, BifunctorLaws.class, TraversableLaws.class, MonadRecLaws.class})\n","    public Subjects<Choice3<String, Integer, Boolean>> testSubjects() {\n","        return subjects(a(\"foo\"), b(1), c(true));\n","    }\n","\n","    @Test\n","    public void convergeStaysInChoice() {\n","        assertEquals(Choice2.a(1), a.converge(c -> Choice2.b(c.toString())));\n","        assertEquals(Choice2.b(\"two\"), b.converge(c -> Choice2.b(c.toString())));\n","        assertEquals(Choice2.b(\"true\"), c.converge(c -> Choice2.b(c.toString())));\n","    }\n","\n","    @Test\n","    public void divergeStaysInChoice() {\n","        assertEquals(Choice4.a(1), a.diverge());\n","        assertEquals(Choice4.b(\"two\"), b.diverge());\n","        assertEquals(Choice4.c(true), c.diverge());\n","    }\n","\n","    @Test\n","    public void lazyZip() {\n","        assertEquals(Choice3.c(2), c(1).lazyZip(lazy(c(x -> x + 1))).value());\n","        assertEquals(Choice3.b(1), b(1).lazyZip(lazy(() -> {\n","            throw new AssertionError();\n","        })).value());\n","        assertEquals(Choice3.a(1), a(1).lazyZip(lazy(() -> {\n","            throw new AssertionError();\n","        })).value());\n","    }\n","\n","    @Test\n","    public void staticPure() {\n","        Choice3<Byte, Short, Integer> choice = Choice3.<Byte, Short>pureChoice().apply(3);\n","        assertEquals(c(3), choice);\n","    }\n","}"],"method_lines_dic":{"Choice3::::project()":[49,52],"Choice3::::diverge()":[57,60],"Choice3::::converge(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct2<A, B, ?>>)":[65,68],"Choice3::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends D>)":[73,76],"Choice3::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends D>)":[81,84],"Choice3::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends D>)":[89,92],"Choice3::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends D>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends E>)":[97,101],"Choice3::::pure(D)":[106,109],"Choice3::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends D>, com.jnape.palatable.lambda.adt.choice.Choice3<A, B, ?>>)":[114,117],"Choice3::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends D>, com.jnape.palatable.lambda.adt.choice.Choice3<A, B, ?>>>)":[122,128],"Choice3::::discardL(com.jnape.palatable.lambda.functor.Applicative<D, com.jnape.palatable.lambda.adt.choice.Choice3<A, B, ?>>)":[133,136],"Choice3::::discardR(com.jnape.palatable.lambda.functor.Applicative<D, com.jnape.palatable.lambda.adt.choice.Choice3<A, B, ?>>)":[141,144],"Choice3::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.monad.Monad<D, com.jnape.palatable.lambda.adt.choice.Choice3<A, B, ?>>>)":[149,152],"Choice3::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<C, D>, com.jnape.palatable.lambda.adt.choice.Choice3<A, B, ?>>>)":[157,164],"Choice3::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.functor.Applicative<D, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)":[169,177],"Choice3::::a(A)":[188,190],"Choice3::::b(B)":[201,203],"Choice3::::c(C)":[214,216],"Choice3::::pureChoice()":[225,227],"Choice3._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>)":[237,241],"Choice3._A::::equals(java.lang.Object)":[243,247],"Choice3._A::::hashCode()":[249,252],"Choice3._A::::toString()":[254,259],"Choice3._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>)":[270,274],"Choice3._B::::equals(java.lang.Object)":[276,280],"Choice3._B::::hashCode()":[282,285],"Choice3._B::::toString()":[287,292],"Choice3._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>)":[303,307],"Choice3._C::::equals(java.lang.Object)":[309,313],"Choice3._C::::hashCode()":[315,318],"Choice3._C::::toString()":[320,325]},"test_method_lines_dic":{"Choice3Test::::setUp()":[25,30],"Choice3Test::::testSubjects()":[32,35],"Choice3Test::::convergeStaysInChoice()":[37,42],"Choice3Test::::divergeStaysInChoice()":[44,49],"Choice3Test::::lazyZip()":[51,60],"Choice3Test::::staticPure()":[62,66]},"reverse_method_lines_dic":{"49":"Choice3::::project()","50":"Choice3::::project()","51":"Choice3::::project()","52":"Choice3::::project()","57":"Choice3::::diverge()","58":"Choice3::::diverge()","59":"Choice3::::diverge()","60":"Choice3::::diverge()","65":"Choice3::::converge(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct2<A, B, ?>>)","66":"Choice3::::converge(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct2<A, B, ?>>)","67":"Choice3::::converge(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct2<A, B, ?>>)","68":"Choice3::::converge(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct2<A, B, ?>>)","73":"Choice3::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends D>)","74":"Choice3::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends D>)","75":"Choice3::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends D>)","76":"Choice3::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends D>)","81":"Choice3::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends D>)","82":"Choice3::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends D>)","83":"Choice3::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends D>)","84":"Choice3::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends D>)","89":"Choice3::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends D>)","90":"Choice3::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends D>)","91":"Choice3::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends D>)","92":"Choice3::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends D>)","97":"Choice3::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends D>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends E>)","98":"Choice3::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends D>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends E>)","99":"Choice3::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends D>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends E>)","100":"Choice3::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends D>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends E>)","101":"Choice3::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends D>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends E>)","106":"Choice3::::pure(D)","107":"Choice3::::pure(D)","108":"Choice3::::pure(D)","109":"Choice3::::pure(D)","114":"Choice3::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends D>, com.jnape.palatable.lambda.adt.choice.Choice3<A, B, ?>>)","115":"Choice3::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends D>, com.jnape.palatable.lambda.adt.choice.Choice3<A, B, ?>>)","116":"Choice3::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends D>, com.jnape.palatable.lambda.adt.choice.Choice3<A, B, ?>>)","117":"Choice3::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends D>, com.jnape.palatable.lambda.adt.choice.Choice3<A, B, ?>>)","122":"Choice3::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends D>, com.jnape.palatable.lambda.adt.choice.Choice3<A, B, ?>>>)","123":"Choice3::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends D>, com.jnape.palatable.lambda.adt.choice.Choice3<A, B, ?>>>)","124":"Choice3::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends D>, com.jnape.palatable.lambda.adt.choice.Choice3<A, B, ?>>>)","125":"Choice3::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends D>, com.jnape.palatable.lambda.adt.choice.Choice3<A, B, ?>>>)","126":"Choice3::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends D>, com.jnape.palatable.lambda.adt.choice.Choice3<A, B, ?>>>)","127":"Choice3::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends D>, com.jnape.palatable.lambda.adt.choice.Choice3<A, B, ?>>>)","128":"Choice3::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends D>, com.jnape.palatable.lambda.adt.choice.Choice3<A, B, ?>>>)","133":"Choice3::::discardL(com.jnape.palatable.lambda.functor.Applicative<D, com.jnape.palatable.lambda.adt.choice.Choice3<A, B, ?>>)","134":"Choice3::::discardL(com.jnape.palatable.lambda.functor.Applicative<D, com.jnape.palatable.lambda.adt.choice.Choice3<A, B, ?>>)","135":"Choice3::::discardL(com.jnape.palatable.lambda.functor.Applicative<D, com.jnape.palatable.lambda.adt.choice.Choice3<A, B, ?>>)","136":"Choice3::::discardL(com.jnape.palatable.lambda.functor.Applicative<D, com.jnape.palatable.lambda.adt.choice.Choice3<A, B, ?>>)","141":"Choice3::::discardR(com.jnape.palatable.lambda.functor.Applicative<D, com.jnape.palatable.lambda.adt.choice.Choice3<A, B, ?>>)","142":"Choice3::::discardR(com.jnape.palatable.lambda.functor.Applicative<D, com.jnape.palatable.lambda.adt.choice.Choice3<A, B, ?>>)","143":"Choice3::::discardR(com.jnape.palatable.lambda.functor.Applicative<D, com.jnape.palatable.lambda.adt.choice.Choice3<A, B, ?>>)","144":"Choice3::::discardR(com.jnape.palatable.lambda.functor.Applicative<D, com.jnape.palatable.lambda.adt.choice.Choice3<A, B, ?>>)","149":"Choice3::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.monad.Monad<D, com.jnape.palatable.lambda.adt.choice.Choice3<A, B, ?>>>)","150":"Choice3::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.monad.Monad<D, com.jnape.palatable.lambda.adt.choice.Choice3<A, B, ?>>>)","151":"Choice3::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.monad.Monad<D, com.jnape.palatable.lambda.adt.choice.Choice3<A, B, ?>>>)","152":"Choice3::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.monad.Monad<D, com.jnape.palatable.lambda.adt.choice.Choice3<A, B, ?>>>)","157":"Choice3::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<C, D>, com.jnape.palatable.lambda.adt.choice.Choice3<A, B, ?>>>)","158":"Choice3::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<C, D>, com.jnape.palatable.lambda.adt.choice.Choice3<A, B, ?>>>)","159":"Choice3::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<C, D>, com.jnape.palatable.lambda.adt.choice.Choice3<A, B, ?>>>)","160":"Choice3::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<C, D>, com.jnape.palatable.lambda.adt.choice.Choice3<A, B, ?>>>)","161":"Choice3::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<C, D>, com.jnape.palatable.lambda.adt.choice.Choice3<A, B, ?>>>)","162":"Choice3::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<C, D>, com.jnape.palatable.lambda.adt.choice.Choice3<A, B, ?>>>)","163":"Choice3::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<C, D>, com.jnape.palatable.lambda.adt.choice.Choice3<A, B, ?>>>)","164":"Choice3::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<C, D>, com.jnape.palatable.lambda.adt.choice.Choice3<A, B, ?>>>)","169":"Choice3::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.functor.Applicative<D, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","170":"Choice3::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.functor.Applicative<D, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","171":"Choice3::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.functor.Applicative<D, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","172":"Choice3::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.functor.Applicative<D, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","173":"Choice3::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.functor.Applicative<D, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","174":"Choice3::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.functor.Applicative<D, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","175":"Choice3::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.functor.Applicative<D, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","176":"Choice3::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.functor.Applicative<D, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","177":"Choice3::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.functor.Applicative<D, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","188":"Choice3::::a(A)","189":"Choice3::::a(A)","190":"Choice3::::a(A)","201":"Choice3::::b(B)","202":"Choice3::::b(B)","203":"Choice3::::b(B)","214":"Choice3::::c(C)","215":"Choice3::::c(C)","216":"Choice3::::c(C)","225":"Choice3::::pureChoice()","226":"Choice3::::pureChoice()","227":"Choice3::::pureChoice()","237":"Choice3._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>)","238":"Choice3._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>)","239":"Choice3._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>)","240":"Choice3._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>)","241":"Choice3._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>)","243":"Choice3._A::::equals(java.lang.Object)","244":"Choice3._A::::equals(java.lang.Object)","245":"Choice3._A::::equals(java.lang.Object)","246":"Choice3._A::::equals(java.lang.Object)","247":"Choice3._A::::equals(java.lang.Object)","249":"Choice3._A::::hashCode()","250":"Choice3._A::::hashCode()","251":"Choice3._A::::hashCode()","252":"Choice3._A::::hashCode()","254":"Choice3._A::::toString()","255":"Choice3._A::::toString()","256":"Choice3._A::::toString()","257":"Choice3._A::::toString()","258":"Choice3._A::::toString()","259":"Choice3._A::::toString()","270":"Choice3._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>)","271":"Choice3._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>)","272":"Choice3._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>)","273":"Choice3._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>)","274":"Choice3._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>)","276":"Choice3._B::::equals(java.lang.Object)","277":"Choice3._B::::equals(java.lang.Object)","278":"Choice3._B::::equals(java.lang.Object)","279":"Choice3._B::::equals(java.lang.Object)","280":"Choice3._B::::equals(java.lang.Object)","282":"Choice3._B::::hashCode()","283":"Choice3._B::::hashCode()","284":"Choice3._B::::hashCode()","285":"Choice3._B::::hashCode()","287":"Choice3._B::::toString()","288":"Choice3._B::::toString()","289":"Choice3._B::::toString()","290":"Choice3._B::::toString()","291":"Choice3._B::::toString()","292":"Choice3._B::::toString()","303":"Choice3._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>)","304":"Choice3._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>)","305":"Choice3._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>)","306":"Choice3._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>)","307":"Choice3._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>)","309":"Choice3._C::::equals(java.lang.Object)","310":"Choice3._C::::equals(java.lang.Object)","311":"Choice3._C::::equals(java.lang.Object)","312":"Choice3._C::::equals(java.lang.Object)","313":"Choice3._C::::equals(java.lang.Object)","315":"Choice3._C::::hashCode()","316":"Choice3._C::::hashCode()","317":"Choice3._C::::hashCode()","318":"Choice3._C::::hashCode()","320":"Choice3._C::::toString()","321":"Choice3._C::::toString()","322":"Choice3._C::::toString()","323":"Choice3._C::::toString()","324":"Choice3._C::::toString()","325":"Choice3._C::::toString()"},"test_reverse_method_lines_dic":{"25":"Choice3Test::::setUp()","26":"Choice3Test::::setUp()","27":"Choice3Test::::setUp()","28":"Choice3Test::::setUp()","29":"Choice3Test::::setUp()","30":"Choice3Test::::setUp()","32":"Choice3Test::::testSubjects()","33":"Choice3Test::::testSubjects()","34":"Choice3Test::::testSubjects()","35":"Choice3Test::::testSubjects()","37":"Choice3Test::::convergeStaysInChoice()","38":"Choice3Test::::convergeStaysInChoice()","39":"Choice3Test::::convergeStaysInChoice()","40":"Choice3Test::::convergeStaysInChoice()","41":"Choice3Test::::convergeStaysInChoice()","42":"Choice3Test::::convergeStaysInChoice()","44":"Choice3Test::::divergeStaysInChoice()","45":"Choice3Test::::divergeStaysInChoice()","46":"Choice3Test::::divergeStaysInChoice()","47":"Choice3Test::::divergeStaysInChoice()","48":"Choice3Test::::divergeStaysInChoice()","49":"Choice3Test::::divergeStaysInChoice()","51":"Choice3Test::::lazyZip()","52":"Choice3Test::::lazyZip()","53":"Choice3Test::::lazyZip()","54":"Choice3Test::::lazyZip()","55":"Choice3Test::::lazyZip()","56":"Choice3Test::::lazyZip()","57":"Choice3Test::::lazyZip()","58":"Choice3Test::::lazyZip()","59":"Choice3Test::::lazyZip()","60":"Choice3Test::::lazyZip()","62":"Choice3Test::::staticPure()","63":"Choice3Test::::staticPure()","64":"Choice3Test::::staticPure()","65":"Choice3Test::::staticPure()","66":"Choice3Test::::staticPure()"},"tests":[{"test_lines":[25,30],"covered_lines":[41,42,189,202,215,233,234,235,266,267,268,299,300,301]},{"test_lines":[32,35],"covered_lines":[41,42,189,202,215,233,234,235,266,267,268,299,300,301]},{"test_lines":[37,42],"covered_lines":[41,42,67,189,202,215,233,234,235,240,266,267,268,273,299,300,301,306]},{"test_lines":[44,49],"covered_lines":[41,42,59,189,202,215,233,234,235,240,266,267,268,273,299,300,301,306]},{"test_lines":[51,60],"covered_lines":[41,42,75,108,125,126,127,151,189,202,215,233,234,235,240,245,246,266,267,268,273,278,279,299,300,301,306,311,312]},{"test_lines":[62,66],"covered_lines":[41,42,189,202,215,226,233,234,235,266,267,268,299,300,301,311,312]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/adt/choice/Choice6.java":{"class_content":["package com.jnape.palatable.lambda.adt.choice;\n","\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.adt.coproduct.CoProduct5;\n","import com.jnape.palatable.lambda.adt.coproduct.CoProduct6;\n","import com.jnape.palatable.lambda.adt.hlist.HList;\n","import com.jnape.palatable.lambda.adt.hlist.Tuple6;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.recursion.RecursiveResult;\n","import com.jnape.palatable.lambda.functions.specialized.Pure;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","import com.jnape.palatable.lambda.functor.Bifunctor;\n","import com.jnape.palatable.lambda.functor.builtin.Lazy;\n","import com.jnape.palatable.lambda.monad.Monad;\n","import com.jnape.palatable.lambda.monad.MonadRec;\n","import com.jnape.palatable.lambda.traversable.Traversable;\n","\n","import java.util.Objects;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Into6.into6;\n","import static com.jnape.palatable.lambda.functions.recursion.RecursiveResult.terminate;\n","import static com.jnape.palatable.lambda.functions.recursion.Trampoline.trampoline;\n","import static com.jnape.palatable.lambda.functor.builtin.Lazy.lazy;\n","\n","/**\n"," * Canonical ADT representation of {@link CoProduct6}.\n"," *\n"," * @param <A> the first possible type\n"," * @param <B> the second possible type\n"," * @param <C> the third possible type\n"," * @param <D> the fourth possible type\n"," * @param <E> the fifth possible type\n"," * @param <F> the sixth possible type\n"," * @see Choice5\n"," * @see Choice7\n"," */\n","public abstract class Choice6<A, B, C, D, E, F> implements\n","        CoProduct6<A, B, C, D, E, F, Choice6<A, B, C, D, E, F>>,\n","        MonadRec<F, Choice6<A, B, C, D, E, ?>>,\n","        Bifunctor<E, F, Choice6<A, B, C, D, ?, ?>>,\n","        Traversable<F, Choice6<A, B, C, D, E, ?>> {\n","\n","    private Choice6() {\n","    }\n","\n","    /**\n","     * Specialize this choice's projection to a {@link Tuple6}.\n","     *\n","     * @return a {@link Tuple6}\n","     */\n","    @Override\n","    public Tuple6<Maybe<A>, Maybe<B>, Maybe<C>, Maybe<D>, Maybe<E>, Maybe<F>> project() {\n","        return into6(HList::tuple, CoProduct6.super.project());\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <G> Choice7<A, B, C, D, E, F, G> diverge() {\n","        return match(Choice7::a, Choice7::b, Choice7::c, Choice7::d, Choice7::e, Choice7::f);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Choice5<A, B, C, D, E> converge(Fn1<? super F, ? extends CoProduct5<A, B, C, D, E, ?>> convergenceFn) {\n","        return match(Choice5::a, Choice5::b, Choice5::c, Choice5::d, Choice5::e,\n","                     convergenceFn.fmap(cp5 -> cp5.match(Choice5::a, Choice5::b, Choice5::c, Choice5::d, Choice5::e)));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <G> Choice6<A, B, C, D, E, G> fmap(Fn1<? super F, ? extends G> fn) {\n","        return MonadRec.super.<G>fmap(fn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <G> Choice6<A, B, C, D, G, F> biMapL(Fn1<? super E, ? extends G> fn) {\n","        return (Choice6<A, B, C, D, G, F>) Bifunctor.super.<G>biMapL(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <G> Choice6<A, B, C, D, E, G> biMapR(Fn1<? super F, ? extends G> fn) {\n","        return (Choice6<A, B, C, D, E, G>) Bifunctor.super.<G>biMapR(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <G, H> Choice6<A, B, C, D, G, H> biMap(Fn1<? super E, ? extends G> lFn,\n","                                                  Fn1<? super F, ? extends H> rFn) {\n","        return match(Choice6::a, Choice6::b, Choice6::c, Choice6::d, e -> e(lFn.apply(e)), f -> f(rFn.apply(f)));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <G> Choice6<A, B, C, D, E, G> pure(G g) {\n","        return f(g);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <G> Choice6<A, B, C, D, E, G> zip(\n","            Applicative<Fn1<? super F, ? extends G>, Choice6<A, B, C, D, E, ?>> appFn) {\n","        return MonadRec.super.zip(appFn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <G> Lazy<Choice6<A, B, C, D, E, G>> lazyZip(\n","            Lazy<? extends Applicative<Fn1<? super F, ? extends G>, Choice6<A, B, C, D, E, ?>>> lazyAppFn) {\n","        return match(a -> lazy(a(a)),\n","                     b -> lazy(b(b)),\n","                     c -> lazy(c(c)),\n","                     d -> lazy(d(d)),\n","                     e -> lazy(e(e)),\n","                     f -> lazyAppFn.fmap(choiceFn -> choiceFn.<G>fmap(fn -> fn.apply(f)).coerce()));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <G> Choice6<A, B, C, D, E, G> discardL(Applicative<G, Choice6<A, B, C, D, E, ?>> appB) {\n","        return MonadRec.super.discardL(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <G> Choice6<A, B, C, D, E, F> discardR(Applicative<G, Choice6<A, B, C, D, E, ?>> appB) {\n","        return MonadRec.super.discardR(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <G> Choice6<A, B, C, D, E, G> flatMap(Fn1<? super F, ? extends Monad<G, Choice6<A, B, C, D, E, ?>>> fn) {\n","        return match(Choice6::a, Choice6::b, Choice6::c, Choice6::d, Choice6::e, f -> fn.apply(f).coerce());\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <G> Choice6<A, B, C, D, E, G> trampolineM(\n","            Fn1<? super F, ? extends MonadRec<RecursiveResult<F, G>, Choice6<A, B, C, D, E, ?>>> fn) {\n","        return flatMap(trampoline(f -> fn.apply(f).<Choice6<A, B, C, D, E, RecursiveResult<F, G>>>coerce().match(\n","                a -> terminate(Choice6.a(a)),\n","                b -> terminate(Choice6.b(b)),\n","                c -> terminate(Choice6.c(c)),\n","                d -> terminate(Choice6.d(d)),\n","                e -> terminate(Choice6.e(e)),\n","                fRec -> fRec.fmap(Choice6::f))));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <G, App extends Applicative<?, App>, TravB extends Traversable<G, Choice6<A, B, C, D, E, ?>>,\n","            AppTrav extends Applicative<TravB, App>> AppTrav traverse(Fn1<? super F, ? extends Applicative<G, App>> fn,\n","                                                                      Fn1<? super TravB, ? extends AppTrav> pure) {\n","        return match(a -> pure.apply(Choice6.<A, B, C, D, E, G>a(a).<TravB>coerce()),\n","                     b -> pure.apply(Choice6.<A, B, C, D, E, G>b(b).<TravB>coerce()),\n","                     c -> pure.apply(Choice6.<A, B, C, D, E, G>c(c).<TravB>coerce()),\n","                     d -> pure.apply(Choice6.<A, B, C, D, E, G>d(d).<TravB>coerce()),\n","                     e -> pure.apply(Choice6.<A, B, C, D, E, G>e(e).<TravB>coerce()),\n","                     f -> fn.apply(f).<Choice6<A, B, C, D, E, G>>fmap(Choice6::f)\n","                             .<TravB>fmap(Applicative::coerce))\n","                .coerce();\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a value of type <code>A</code> in a {@link Choice6}.\n","     *\n","     * @param a   the value\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @param <C> the third possible type\n","     * @param <D> the fourth possible type\n","     * @param <E> the fifth possible type\n","     * @param <F> the sixth possible type\n","     * @return the wrapped value as a {@link Choice6}&lt;A, B, C, D, E, F&gt;\n","     */\n","    public static <A, B, C, D, E, F> Choice6<A, B, C, D, E, F> a(A a) {\n","        return new _A<>(a);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a value of type <code>B</code> in a {@link Choice6}.\n","     *\n","     * @param b   the value\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @param <C> the third possible type\n","     * @param <D> the fourth possible type\n","     * @param <E> the fifth possible type\n","     * @param <F> the sixth possible type\n","     * @return the wrapped value as a {@link Choice6}&lt;A, B, C, D, E, F&gt;\n","     */\n","    public static <A, B, C, D, E, F> Choice6<A, B, C, D, E, F> b(B b) {\n","        return new _B<>(b);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a value of type <code>C</code> in a {@link Choice6}.\n","     *\n","     * @param c   the value\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @param <C> the third possible type\n","     * @param <D> the fourth possible type\n","     * @param <E> the fifth possible type\n","     * @param <F> the sixth possible type\n","     * @return the wrapped value as a {@link Choice6}&lt;A, B, C, D, E, F&gt;\n","     */\n","    public static <A, B, C, D, E, F> Choice6<A, B, C, D, E, F> c(C c) {\n","        return new _C<>(c);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a value of type <code>D</code> in a {@link Choice6}.\n","     *\n","     * @param d   the value\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @param <C> the third possible type\n","     * @param <D> the fourth possible type\n","     * @param <E> the fifth possible type\n","     * @param <F> the sixth possible type\n","     * @return the wrapped value as a {@link Choice6}&lt;A, B, C, D, E, F&gt;\n","     */\n","    public static <A, B, C, D, E, F> Choice6<A, B, C, D, E, F> d(D d) {\n","        return new _D<>(d);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a value of type <code>E</code> in a {@link Choice6}.\n","     *\n","     * @param e   the value\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @param <C> the third possible type\n","     * @param <D> the fourth possible type\n","     * @param <E> the fifth possible type\n","     * @param <F> the sixth possible type\n","     * @return the wrapped value as a {@link Choice6}&lt;A, B, C, D, E, F&gt;\n","     */\n","    public static <A, B, C, D, E, F> Choice6<A, B, C, D, E, F> e(E e) {\n","        return new _E<>(e);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a value of type <code>F</code> in a {@link Choice6}.\n","     *\n","     * @param f   the value\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @param <C> the third possible type\n","     * @param <D> the fourth possible type\n","     * @param <E> the fifth possible type\n","     * @param <F> the sixth possible type\n","     * @return the wrapped value as a {@link Choice6}&lt;A, B, C, D, E, F&gt;\n","     */\n","    public static <A, B, C, D, E, F> Choice6<A, B, C, D, E, F> f(F f) {\n","        return new _F<>(f);\n","    }\n","\n","    /**\n","     * The canonical {@link Pure} instance for {@link Choice6}.\n","     *\n","     * @param <A> the first possible type\n","     * @param <B> the second possible type\n","     * @param <C> the third possible type\n","     * @param <D> the fourth possible type\n","     * @param <E> the fifth possible type\n","     * @return the {@link Pure} instance\n","     */\n","    public static <A, B, C, D, E> Pure<Choice6<A, B, C, D, E, ?>> pureChoice() {\n","        return Choice6::f;\n","    }\n","\n","    private static final class _A<A, B, C, D, E, F> extends Choice6<A, B, C, D, E, F> {\n","\n","        private final A a;\n","\n","        private _A(A a) {\n","            this.a = a;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                           Fn1<? super C, ? extends R> cFn, Fn1<? super D, ? extends R> dFn,\n","                           Fn1<? super E, ? extends R> eFn, Fn1<? super F, ? extends R> fFn) {\n","            return aFn.apply(a);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof _A\n","                    && Objects.equals(a, ((_A) other).a);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(a);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Choice6{a=\" + a + '}';\n","        }\n","    }\n","\n","    private static final class _B<A, B, C, D, E, F> extends Choice6<A, B, C, D, E, F> {\n","\n","        private final B b;\n","\n","        private _B(B b) {\n","            this.b = b;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                           Fn1<? super C, ? extends R> cFn, Fn1<? super D, ? extends R> dFn,\n","                           Fn1<? super E, ? extends R> eFn, Fn1<? super F, ? extends R> fFn) {\n","            return bFn.apply(b);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof _B\n","                    && Objects.equals(b, ((_B) other).b);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(b);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Choice6{b=\" + b + '}';\n","        }\n","    }\n","\n","    private static final class _C<A, B, C, D, E, F> extends Choice6<A, B, C, D, E, F> {\n","\n","        private final C c;\n","\n","        private _C(C c) {\n","            this.c = c;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                           Fn1<? super C, ? extends R> cFn, Fn1<? super D, ? extends R> dFn,\n","                           Fn1<? super E, ? extends R> eFn, Fn1<? super F, ? extends R> fFn) {\n","            return cFn.apply(c);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof _C\n","                    && Objects.equals(c, ((_C) other).c);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(c);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Choice6{c=\" + c + '}';\n","        }\n","    }\n","\n","    private static final class _D<A, B, C, D, E, F> extends Choice6<A, B, C, D, E, F> {\n","\n","        private final D d;\n","\n","        private _D(D d) {\n","            this.d = d;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                           Fn1<? super C, ? extends R> cFn, Fn1<? super D, ? extends R> dFn,\n","                           Fn1<? super E, ? extends R> eFn, Fn1<? super F, ? extends R> fFn) {\n","            return dFn.apply(d);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof _D\n","                    && Objects.equals(d, ((_D) other).d);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(d);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Choice6{d=\" + d + '}';\n","        }\n","    }\n","\n","    private static final class _E<A, B, C, D, E, F> extends Choice6<A, B, C, D, E, F> {\n","\n","        private final E e;\n","\n","        private _E(E e) {\n","            this.e = e;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                           Fn1<? super C, ? extends R> cFn, Fn1<? super D, ? extends R> dFn,\n","                           Fn1<? super E, ? extends R> eFn, Fn1<? super F, ? extends R> fFn) {\n","            return eFn.apply(e);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof _E\n","                    && Objects.equals(e, ((_E) other).e);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(e);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Choice6{e=\" + e + '}';\n","        }\n","    }\n","\n","    private static final class _F<A, B, C, D, E, F> extends Choice6<A, B, C, D, E, F> {\n","\n","        private final F f;\n","\n","        private _F(F f) {\n","            this.f = f;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                           Fn1<? super C, ? extends R> cFn, Fn1<? super D, ? extends R> dFn,\n","                           Fn1<? super E, ? extends R> eFn, Fn1<? super F, ? extends R> fFn) {\n","            return fFn.apply(f);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof _F\n","                    && Objects.equals(f, ((_F) other).f);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(f);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Choice6{f=\" + f + '}';\n","        }\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.adt.choice;\n","\n","import com.jnape.palatable.lambda.adt.coproduct.CoProduct5;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.framework.Subjects;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Before;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.ApplicativeLaws;\n","import testsupport.traits.BifunctorLaws;\n","import testsupport.traits.FunctorLaws;\n","import testsupport.traits.MonadLaws;\n","import testsupport.traits.MonadRecLaws;\n","import testsupport.traits.TraversableLaws;\n","\n","import static com.jnape.palatable.lambda.adt.choice.Choice6.a;\n","import static com.jnape.palatable.lambda.adt.choice.Choice6.b;\n","import static com.jnape.palatable.lambda.adt.choice.Choice6.c;\n","import static com.jnape.palatable.lambda.adt.choice.Choice6.d;\n","import static com.jnape.palatable.lambda.adt.choice.Choice6.e;\n","import static com.jnape.palatable.lambda.adt.choice.Choice6.f;\n","import static com.jnape.palatable.lambda.functor.builtin.Lazy.lazy;\n","import static com.jnape.palatable.traitor.framework.Subjects.subjects;\n","import static org.junit.Assert.assertEquals;\n","\n","@RunWith(Traits.class)\n","public class Choice6Test {\n","\n","    private Choice6<Integer, String, Boolean, Double, Character, Long> a;\n","    private Choice6<Integer, String, Boolean, Double, Character, Long> b;\n","    private Choice6<Integer, String, Boolean, Double, Character, Long> c;\n","    private Choice6<Integer, String, Boolean, Double, Character, Long> d;\n","    private Choice6<Integer, String, Boolean, Double, Character, Long> e;\n","    private Choice6<Integer, String, Boolean, Double, Character, Long> f;\n","\n","    @Before\n","    public void setUp() {\n","        a = a(1);\n","        b = b(\"two\");\n","        c = c(true);\n","        d = d(4d);\n","        e = e('z');\n","        f = f(5L);\n","    }\n","\n","    @TestTraits({\n","            FunctorLaws.class,\n","            ApplicativeLaws.class,\n","            MonadLaws.class,\n","            BifunctorLaws.class,\n","            TraversableLaws.class,\n","            MonadRecLaws.class})\n","    public Subjects<Choice6<String, Integer, Boolean, Character, Double, Long>> testSubjects() {\n","        return subjects(a(\"foo\"), b(1), c(true), d('a'), e(2d), f(5L));\n","    }\n","\n","    @Test\n","    public void convergeStaysInChoice() {\n","        Fn1<Long, CoProduct5<Integer, String, Boolean, Double, Character, ?>> convergenceFn = f -> Choice5.b(f.toString());\n","\n","        assertEquals(Choice5.a(1), a.converge(convergenceFn));\n","        assertEquals(Choice5.b(\"two\"), b.converge(convergenceFn));\n","        assertEquals(Choice5.c(true), c.converge(convergenceFn));\n","        assertEquals(Choice5.d(4d), d.converge(convergenceFn));\n","        assertEquals(Choice5.e('z'), e.converge(convergenceFn));\n","        assertEquals(Choice5.b(\"5\"), f.converge(convergenceFn));\n","    }\n","\n","    @Test\n","    public void divergeStaysInChoice() {\n","        assertEquals(Choice7.a(1), a.diverge());\n","        assertEquals(Choice7.b(\"two\"), b.diverge());\n","        assertEquals(Choice7.c(true), c.diverge());\n","        assertEquals(Choice7.d(4D), d.diverge());\n","        assertEquals(Choice7.e('z'), e.diverge());\n","        assertEquals(Choice7.f(5L), f.diverge());\n","    }\n","\n","    @Test\n","    public void lazyZip() {\n","        assertEquals(f(2), f(1).lazyZip(lazy(f(x -> x + 1))).value());\n","        assertEquals(a(1), a(1).lazyZip(lazy(() -> {\n","            throw new AssertionError();\n","        })).value());\n","        assertEquals(b(1), b(1).lazyZip(lazy(() -> {\n","            throw new AssertionError();\n","        })).value());\n","        assertEquals(c(1), c(1).lazyZip(lazy(() -> {\n","            throw new AssertionError();\n","        })).value());\n","        assertEquals(d(1), d(1).lazyZip(lazy(() -> {\n","            throw new AssertionError();\n","        })).value());\n","        assertEquals(e(1), e(1).lazyZip(lazy(() -> {\n","            throw new AssertionError();\n","        })).value());\n","    }\n","\n","    @Test\n","    public void staticPure() {\n","        Choice6<Byte, Short, Integer, Long, Float, Double> choice =\n","                Choice6.<Byte, Short, Integer, Long, Float>pureChoice().apply(6d);\n","        assertEquals(f(6d), choice);\n","    }\n","}"],"method_lines_dic":{"Choice6::::project()":[51,54],"Choice6::::diverge()":[59,62],"Choice6::::converge(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct5<A, B, C, D, E, ?>>)":[67,71],"Choice6::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends G>)":[76,79],"Choice6::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends G>)":[84,87],"Choice6::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends G>)":[92,95],"Choice6::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends G>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends H>)":[100,104],"Choice6::::pure(G)":[109,112],"Choice6::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends G>, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>)":[117,121],"Choice6::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends G>, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>>)":[126,135],"Choice6::::discardL(com.jnape.palatable.lambda.functor.Applicative<G, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>)":[140,143],"Choice6::::discardR(com.jnape.palatable.lambda.functor.Applicative<G, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>)":[148,151],"Choice6::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.monad.Monad<G, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>>)":[156,159],"Choice6::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<F, G>, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>>)":[164,174],"Choice6::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.functor.Applicative<G, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)":[179,191],"Choice6::::a(A)":[205,207],"Choice6::::b(B)":[221,223],"Choice6::::c(C)":[237,239],"Choice6::::d(D)":[253,255],"Choice6::::e(E)":[269,271],"Choice6::::f(F)":[285,287],"Choice6::::pureChoice()":[299,301],"Choice6._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)":[311,316],"Choice6._A::::equals(java.lang.Object)":[318,322],"Choice6._A::::hashCode()":[324,327],"Choice6._A::::toString()":[329,332],"Choice6._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)":[343,348],"Choice6._B::::equals(java.lang.Object)":[350,354],"Choice6._B::::hashCode()":[356,359],"Choice6._B::::toString()":[361,364],"Choice6._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)":[375,380],"Choice6._C::::equals(java.lang.Object)":[382,386],"Choice6._C::::hashCode()":[388,391],"Choice6._C::::toString()":[393,396],"Choice6._D::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)":[407,412],"Choice6._D::::equals(java.lang.Object)":[414,418],"Choice6._D::::hashCode()":[420,423],"Choice6._D::::toString()":[425,428],"Choice6._E::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)":[439,444],"Choice6._E::::equals(java.lang.Object)":[446,450],"Choice6._E::::hashCode()":[452,455],"Choice6._E::::toString()":[457,460],"Choice6._F::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)":[471,476],"Choice6._F::::equals(java.lang.Object)":[478,482],"Choice6._F::::hashCode()":[484,487],"Choice6._F::::toString()":[489,492]},"test_method_lines_dic":{"Choice6Test::::setUp()":[38,46],"Choice6Test::::testSubjects()":[48,57],"Choice6Test::::convergeStaysInChoice()":[59,69],"Choice6Test::::divergeStaysInChoice()":[71,79],"Choice6Test::::lazyZip()":[81,99],"Choice6Test::::staticPure()":[101,106]},"reverse_method_lines_dic":{"51":"Choice6::::project()","52":"Choice6::::project()","53":"Choice6::::project()","54":"Choice6::::project()","59":"Choice6::::diverge()","60":"Choice6::::diverge()","61":"Choice6::::diverge()","62":"Choice6::::diverge()","67":"Choice6::::converge(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct5<A, B, C, D, E, ?>>)","68":"Choice6::::converge(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct5<A, B, C, D, E, ?>>)","69":"Choice6::::converge(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct5<A, B, C, D, E, ?>>)","70":"Choice6::::converge(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct5<A, B, C, D, E, ?>>)","71":"Choice6::::converge(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct5<A, B, C, D, E, ?>>)","76":"Choice6::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends G>)","77":"Choice6::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends G>)","78":"Choice6::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends G>)","79":"Choice6::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends G>)","84":"Choice6::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends G>)","85":"Choice6::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends G>)","86":"Choice6::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends G>)","87":"Choice6::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends G>)","92":"Choice6::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends G>)","93":"Choice6::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends G>)","94":"Choice6::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends G>)","95":"Choice6::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends G>)","100":"Choice6::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends G>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends H>)","101":"Choice6::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends G>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends H>)","102":"Choice6::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends G>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends H>)","103":"Choice6::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends G>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends H>)","104":"Choice6::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends G>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends H>)","109":"Choice6::::pure(G)","110":"Choice6::::pure(G)","111":"Choice6::::pure(G)","112":"Choice6::::pure(G)","117":"Choice6::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends G>, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>)","118":"Choice6::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends G>, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>)","119":"Choice6::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends G>, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>)","120":"Choice6::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends G>, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>)","121":"Choice6::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends G>, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>)","126":"Choice6::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends G>, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>>)","127":"Choice6::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends G>, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>>)","128":"Choice6::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends G>, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>>)","129":"Choice6::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends G>, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>>)","130":"Choice6::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends G>, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>>)","131":"Choice6::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends G>, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>>)","132":"Choice6::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends G>, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>>)","133":"Choice6::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends G>, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>>)","134":"Choice6::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends G>, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>>)","135":"Choice6::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends G>, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>>)","140":"Choice6::::discardL(com.jnape.palatable.lambda.functor.Applicative<G, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>)","141":"Choice6::::discardL(com.jnape.palatable.lambda.functor.Applicative<G, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>)","142":"Choice6::::discardL(com.jnape.palatable.lambda.functor.Applicative<G, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>)","143":"Choice6::::discardL(com.jnape.palatable.lambda.functor.Applicative<G, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>)","148":"Choice6::::discardR(com.jnape.palatable.lambda.functor.Applicative<G, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>)","149":"Choice6::::discardR(com.jnape.palatable.lambda.functor.Applicative<G, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>)","150":"Choice6::::discardR(com.jnape.palatable.lambda.functor.Applicative<G, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>)","151":"Choice6::::discardR(com.jnape.palatable.lambda.functor.Applicative<G, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>)","156":"Choice6::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.monad.Monad<G, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>>)","157":"Choice6::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.monad.Monad<G, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>>)","158":"Choice6::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.monad.Monad<G, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>>)","159":"Choice6::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.monad.Monad<G, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>>)","164":"Choice6::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<F, G>, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>>)","165":"Choice6::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<F, G>, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>>)","166":"Choice6::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<F, G>, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>>)","167":"Choice6::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<F, G>, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>>)","168":"Choice6::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<F, G>, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>>)","169":"Choice6::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<F, G>, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>>)","170":"Choice6::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<F, G>, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>>)","171":"Choice6::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<F, G>, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>>)","172":"Choice6::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<F, G>, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>>)","173":"Choice6::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<F, G>, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>>)","174":"Choice6::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<F, G>, com.jnape.palatable.lambda.adt.choice.Choice6<A, B, C, D, E, ?>>>)","179":"Choice6::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.functor.Applicative<G, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","180":"Choice6::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.functor.Applicative<G, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","181":"Choice6::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.functor.Applicative<G, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","182":"Choice6::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.functor.Applicative<G, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","183":"Choice6::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.functor.Applicative<G, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","184":"Choice6::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.functor.Applicative<G, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","185":"Choice6::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.functor.Applicative<G, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","186":"Choice6::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.functor.Applicative<G, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","187":"Choice6::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.functor.Applicative<G, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","188":"Choice6::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.functor.Applicative<G, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","189":"Choice6::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.functor.Applicative<G, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","190":"Choice6::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.functor.Applicative<G, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","191":"Choice6::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.functor.Applicative<G, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","205":"Choice6::::a(A)","206":"Choice6::::a(A)","207":"Choice6::::a(A)","221":"Choice6::::b(B)","222":"Choice6::::b(B)","223":"Choice6::::b(B)","237":"Choice6::::c(C)","238":"Choice6::::c(C)","239":"Choice6::::c(C)","253":"Choice6::::d(D)","254":"Choice6::::d(D)","255":"Choice6::::d(D)","269":"Choice6::::e(E)","270":"Choice6::::e(E)","271":"Choice6::::e(E)","285":"Choice6::::f(F)","286":"Choice6::::f(F)","287":"Choice6::::f(F)","299":"Choice6::::pureChoice()","300":"Choice6::::pureChoice()","301":"Choice6::::pureChoice()","311":"Choice6._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","312":"Choice6._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","313":"Choice6._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","314":"Choice6._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","315":"Choice6._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","316":"Choice6._A::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","318":"Choice6._A::::equals(java.lang.Object)","319":"Choice6._A::::equals(java.lang.Object)","320":"Choice6._A::::equals(java.lang.Object)","321":"Choice6._A::::equals(java.lang.Object)","322":"Choice6._A::::equals(java.lang.Object)","324":"Choice6._A::::hashCode()","325":"Choice6._A::::hashCode()","326":"Choice6._A::::hashCode()","327":"Choice6._A::::hashCode()","329":"Choice6._A::::toString()","330":"Choice6._A::::toString()","331":"Choice6._A::::toString()","332":"Choice6._A::::toString()","343":"Choice6._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","344":"Choice6._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","345":"Choice6._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","346":"Choice6._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","347":"Choice6._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","348":"Choice6._B::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","350":"Choice6._B::::equals(java.lang.Object)","351":"Choice6._B::::equals(java.lang.Object)","352":"Choice6._B::::equals(java.lang.Object)","353":"Choice6._B::::equals(java.lang.Object)","354":"Choice6._B::::equals(java.lang.Object)","356":"Choice6._B::::hashCode()","357":"Choice6._B::::hashCode()","358":"Choice6._B::::hashCode()","359":"Choice6._B::::hashCode()","361":"Choice6._B::::toString()","362":"Choice6._B::::toString()","363":"Choice6._B::::toString()","364":"Choice6._B::::toString()","375":"Choice6._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","376":"Choice6._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","377":"Choice6._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","378":"Choice6._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","379":"Choice6._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","380":"Choice6._C::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","382":"Choice6._C::::equals(java.lang.Object)","383":"Choice6._C::::equals(java.lang.Object)","384":"Choice6._C::::equals(java.lang.Object)","385":"Choice6._C::::equals(java.lang.Object)","386":"Choice6._C::::equals(java.lang.Object)","388":"Choice6._C::::hashCode()","389":"Choice6._C::::hashCode()","390":"Choice6._C::::hashCode()","391":"Choice6._C::::hashCode()","393":"Choice6._C::::toString()","394":"Choice6._C::::toString()","395":"Choice6._C::::toString()","396":"Choice6._C::::toString()","407":"Choice6._D::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","408":"Choice6._D::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","409":"Choice6._D::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","410":"Choice6._D::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","411":"Choice6._D::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","412":"Choice6._D::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","414":"Choice6._D::::equals(java.lang.Object)","415":"Choice6._D::::equals(java.lang.Object)","416":"Choice6._D::::equals(java.lang.Object)","417":"Choice6._D::::equals(java.lang.Object)","418":"Choice6._D::::equals(java.lang.Object)","420":"Choice6._D::::hashCode()","421":"Choice6._D::::hashCode()","422":"Choice6._D::::hashCode()","423":"Choice6._D::::hashCode()","425":"Choice6._D::::toString()","426":"Choice6._D::::toString()","427":"Choice6._D::::toString()","428":"Choice6._D::::toString()","439":"Choice6._E::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","440":"Choice6._E::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","441":"Choice6._E::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","442":"Choice6._E::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","443":"Choice6._E::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","444":"Choice6._E::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","446":"Choice6._E::::equals(java.lang.Object)","447":"Choice6._E::::equals(java.lang.Object)","448":"Choice6._E::::equals(java.lang.Object)","449":"Choice6._E::::equals(java.lang.Object)","450":"Choice6._E::::equals(java.lang.Object)","452":"Choice6._E::::hashCode()","453":"Choice6._E::::hashCode()","454":"Choice6._E::::hashCode()","455":"Choice6._E::::hashCode()","457":"Choice6._E::::toString()","458":"Choice6._E::::toString()","459":"Choice6._E::::toString()","460":"Choice6._E::::toString()","471":"Choice6._F::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","472":"Choice6._F::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","473":"Choice6._F::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","474":"Choice6._F::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","475":"Choice6._F::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","476":"Choice6._F::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","478":"Choice6._F::::equals(java.lang.Object)","479":"Choice6._F::::equals(java.lang.Object)","480":"Choice6._F::::equals(java.lang.Object)","481":"Choice6._F::::equals(java.lang.Object)","482":"Choice6._F::::equals(java.lang.Object)","484":"Choice6._F::::hashCode()","485":"Choice6._F::::hashCode()","486":"Choice6._F::::hashCode()","487":"Choice6._F::::hashCode()","489":"Choice6._F::::toString()","490":"Choice6._F::::toString()","491":"Choice6._F::::toString()","492":"Choice6._F::::toString()"},"test_reverse_method_lines_dic":{"38":"Choice6Test::::setUp()","39":"Choice6Test::::setUp()","40":"Choice6Test::::setUp()","41":"Choice6Test::::setUp()","42":"Choice6Test::::setUp()","43":"Choice6Test::::setUp()","44":"Choice6Test::::setUp()","45":"Choice6Test::::setUp()","46":"Choice6Test::::setUp()","48":"Choice6Test::::testSubjects()","49":"Choice6Test::::testSubjects()","50":"Choice6Test::::testSubjects()","51":"Choice6Test::::testSubjects()","52":"Choice6Test::::testSubjects()","53":"Choice6Test::::testSubjects()","54":"Choice6Test::::testSubjects()","55":"Choice6Test::::testSubjects()","56":"Choice6Test::::testSubjects()","57":"Choice6Test::::testSubjects()","59":"Choice6Test::::convergeStaysInChoice()","60":"Choice6Test::::convergeStaysInChoice()","61":"Choice6Test::::convergeStaysInChoice()","62":"Choice6Test::::convergeStaysInChoice()","63":"Choice6Test::::convergeStaysInChoice()","64":"Choice6Test::::convergeStaysInChoice()","65":"Choice6Test::::convergeStaysInChoice()","66":"Choice6Test::::convergeStaysInChoice()","67":"Choice6Test::::convergeStaysInChoice()","68":"Choice6Test::::convergeStaysInChoice()","69":"Choice6Test::::convergeStaysInChoice()","71":"Choice6Test::::divergeStaysInChoice()","72":"Choice6Test::::divergeStaysInChoice()","73":"Choice6Test::::divergeStaysInChoice()","74":"Choice6Test::::divergeStaysInChoice()","75":"Choice6Test::::divergeStaysInChoice()","76":"Choice6Test::::divergeStaysInChoice()","77":"Choice6Test::::divergeStaysInChoice()","78":"Choice6Test::::divergeStaysInChoice()","79":"Choice6Test::::divergeStaysInChoice()","81":"Choice6Test::::lazyZip()","82":"Choice6Test::::lazyZip()","83":"Choice6Test::::lazyZip()","84":"Choice6Test::::lazyZip()","85":"Choice6Test::::lazyZip()","86":"Choice6Test::::lazyZip()","87":"Choice6Test::::lazyZip()","88":"Choice6Test::::lazyZip()","89":"Choice6Test::::lazyZip()","90":"Choice6Test::::lazyZip()","91":"Choice6Test::::lazyZip()","92":"Choice6Test::::lazyZip()","93":"Choice6Test::::lazyZip()","94":"Choice6Test::::lazyZip()","95":"Choice6Test::::lazyZip()","96":"Choice6Test::::lazyZip()","97":"Choice6Test::::lazyZip()","98":"Choice6Test::::lazyZip()","99":"Choice6Test::::lazyZip()","101":"Choice6Test::::staticPure()","102":"Choice6Test::::staticPure()","103":"Choice6Test::::staticPure()","104":"Choice6Test::::staticPure()","105":"Choice6Test::::staticPure()","106":"Choice6Test::::staticPure()"},"tests":[{"test_lines":[38,46],"covered_lines":[43,44,206,222,238,254,270,286,307,308,309,339,340,341,371,372,373,403,404,405,435,436,437,467,468,469]},{"test_lines":[48,57],"covered_lines":[43,44,206,222,238,254,270,286,307,308,309,339,340,341,371,372,373,403,404,405,435,436,437,467,468,469]},{"test_lines":[59,69],"covered_lines":[43,44,69,70,206,222,238,254,270,286,307,308,309,315,339,340,341,347,371,372,373,379,403,404,405,411,435,436,437,443,467,468,469,475]},{"test_lines":[71,79],"covered_lines":[43,44,61,206,222,238,254,270,286,307,308,309,315,339,340,341,347,371,372,373,379,403,404,405,411,435,436,437,443,467,468,469,475]},{"test_lines":[81,99],"covered_lines":[43,44,78,111,129,130,131,132,133,134,158,206,222,238,254,270,286,307,308,309,315,320,321,339,340,341,347,352,353,371,372,373,379,384,385,403,404,405,411,416,417,435,436,437,443,448,449,467,468,469,475,480,481]},{"test_lines":[101,106],"covered_lines":[43,44,206,222,238,254,270,286,300,307,308,309,339,340,341,371,372,373,403,404,405,435,436,437,467,468,469,480,481]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/adt/hmap/TypeSafeKey.java":{"class_content":["package com.jnape.palatable.lambda.adt.hmap;\n","\n","import com.jnape.palatable.lambda.functor.Applicative;\n","import com.jnape.palatable.lambda.functor.Functor;\n","import com.jnape.palatable.lambda.functor.Profunctor;\n","import com.jnape.palatable.lambda.optics.Iso;\n","import com.jnape.palatable.lambda.optics.Optic;\n","\n","import java.util.Objects;\n","\n","/**\n"," * An interface representing a parametrized key for use in {@link HMap}s. Additionally, every {@link TypeSafeKey} is an\n"," * {@link Iso} from the type the value is stored as to the type it's viewed and set as (on the way in / on the way out).\n"," * This allows multiple keys to map to the same value, but to view the value as different types.\n"," * <p>\n"," * This is intentionally an interface so user-defined implementations are possible; however, it's important to note\n"," * that all hopes of type-safety hinge on equality being implemented such that no two {@link TypeSafeKey}s with\n"," * differing value-type parameters may be considered equal. Reference equality is used here as the default, as that is\n"," * sufficient.\n"," *\n"," * @param <A> The raw type of the value that this key maps to inside an {@link HMap}\n"," * @param <B> The mapped type of the value that this key maps to inside an {@link HMap}\n"," */\n","public interface TypeSafeKey<A, B> extends Iso.Simple<A, B> {\n","\n","    @Override\n","    default <U> TypeSafeKey<A, B> discardR(Applicative<U, Iso<A, ?, B, B>> appB) {\n","        Iso.Simple<A, B> discarded = Iso.Simple.super.discardR(appB);\n","        return new TypeSafeKey<A, B>() {\n","            @Override\n","            public <CoP extends Profunctor<?, ?, ? extends Profunctor<?, ?, ?>>,\n","                    CoF extends Functor<?, ? extends Functor<?, ?>>,\n","                    FB extends Functor<B, ? extends CoF>,\n","                    FT extends Functor<A, ? extends CoF>,\n","                    PAFB extends Profunctor<B, FB, ? extends CoP>,\n","                    PSFT extends Profunctor<A, FT, ? extends CoP>> PSFT apply(PAFB pafb) {\n","                return discarded.apply(pafb);\n","            }\n","\n","            @Override\n","            public int hashCode() {\n","                return TypeSafeKey.this.hashCode();\n","            }\n","\n","            @Override\n","            public boolean equals(Object obj) {\n","                return TypeSafeKey.this.equals(obj);\n","            }\n","        };\n","    }\n","\n","    /**\n","     * Left-to-right composition of this {@link TypeSafeKey} with some other {@link Iso}. Because the first parameter\n","     * fundamentally represents an already stored value type, this is the only composition that is possible for\n","     * {@link TypeSafeKey}, which is why only this (and not {@link Iso#compose(Optic)}) is overridden.\n","     * <p>\n","     * Particularly of note is the fact that values stored at this key are still stored as their original manifest\n","     * type, and are not duplicated - which is to say, putting a value at a key, yielding a new key via composition,\n","     * and putting a new value at the new key still only results in a single entry in the {@link HMap}. Additionally,\n","     * all previous keys involved in the new key's composition are still able to resolve the value in their native type.\n","     *\n","     * @param f   the other simple iso\n","     * @param <C> the new value type\n","     * @return the new {@link TypeSafeKey}\n","     */\n","    @Override\n","    default <C> TypeSafeKey<A, C> andThen(Iso.Simple<B, C> f) {\n","        Iso.Simple<A, C> composed = Iso.Simple.super.andThen(f);\n","        return new TypeSafeKey<A, C>() {\n","            @Override\n","            public <CoP extends Profunctor<?, ?, ? extends Profunctor<?, ?, ?>>,\n","                    CoF extends Functor<?, ? extends Functor<?, ?>>,\n","                    FB extends Functor<C, ? extends CoF>,\n","                    FT extends Functor<A, ? extends CoF>,\n","                    PAFB extends Profunctor<C, FB, ? extends CoP>,\n","                    PSFT extends Profunctor<A, FT, ? extends CoP>> PSFT apply(PAFB pafb) {\n","                return composed.apply(pafb);\n","            }\n","\n","            @Override\n","            public int hashCode() {\n","                return TypeSafeKey.this.hashCode();\n","            }\n","\n","            @Override\n","            public boolean equals(Object obj) {\n","                return TypeSafeKey.this.equals(obj);\n","            }\n","        };\n","    }\n","\n","    /**\n","     * Static factory method for creating a simple type-safe key\n","     *\n","     * @param <A> the type of value stored at this key\n","     * @return a unique type-safe key\n","     */\n","    static <A> Simple<A> typeSafeKey() {\n","        return new TypeSafeKey.Simple<A>() {\n","            @Override\n","            public boolean equals(Object obj) {\n","                return obj instanceof Simple ? this == obj : Objects.equals(obj, this);\n","            }\n","\n","            @Override\n","            public int hashCode() {\n","                return super.hashCode();\n","            }\n","        };\n","    }\n","\n","    /**\n","     * A simplified {@link TypeSafeKey} that can only view a value of type <code>A</code> as an <code>A</code>.\n","     *\n","     * @param <A> The type of the value that this key maps to inside an {@link HMap}\n","     */\n","    interface Simple<A> extends TypeSafeKey<A, A> {\n","\n","        @Override\n","        @SuppressWarnings(\"unchecked\")\n","        default <CoP extends Profunctor<?, ?, ? extends Profunctor<?, ?, ?>>,\n","                CoF extends Functor<?, ? extends Functor<?, ?>>,\n","                FB extends Functor<A, ? extends CoF>,\n","                FT extends Functor<A, ? extends CoF>,\n","                PAFB extends Profunctor<A, FB, ? extends CoP>,\n","                PSFT extends Profunctor<A, FT, ? extends CoP>> PSFT apply(\n","                PAFB pafb) {\n","            return (PSFT) pafb;\n","        }\n","    }\n","}"],"test_content":["package com.jnape.palatable.lambda.adt.hmap;\n","\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.hmap.HMap.emptyHMap;\n","import static com.jnape.palatable.lambda.adt.hmap.TypeSafeKey.typeSafeKey;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Id.id;\n","import static com.jnape.palatable.lambda.optics.Iso.simpleIso;\n","import static java.util.Arrays.asList;\n","import static org.junit.Assert.assertEquals;\n","import static org.junit.Assert.assertNotEquals;\n","import static testsupport.assertion.LensAssert.assertLensLawfulness;\n","\n","\n","public class TypeSafeKeyTest {\n","\n","    @Test\n","    public void lensLawfulness() {\n","        assertLensLawfulness(TypeSafeKey.<String>typeSafeKey().andThen(simpleIso(Integer::parseInt, Object::toString)),\n","                             asList(\"123\", \"0\"),\n","                             asList(456, -1));\n","    }\n","\n","    @Test\n","    public void compositionMapsOriginalValueInAndOutOfHMap() {\n","        TypeSafeKey.Simple<String>   stringKey = typeSafeKey();\n","        TypeSafeKey<String, Integer> intKey    = stringKey.andThen(simpleIso(Integer::parseInt, Object::toString));\n","        HMap                         map       = emptyHMap().put(stringKey, \"123\");\n","\n","        assertEquals(just(\"123\"), map.get(stringKey));\n","        assertEquals(just(123), map.get(intKey));\n","\n","        HMap updated = map.put(intKey, 456);\n","        assertEquals(just(\"456\"), updated.get(stringKey));\n","        assertEquals(just(456), updated.get(intKey));\n","\n","        assertEquals(1, updated.keys().size());\n","    }\n","\n","    @Test\n","    public void discardRPreservesTypeSafeKey() {\n","        TypeSafeKey.Simple<String>  stringKey    = typeSafeKey();\n","        TypeSafeKey<String, String> discardedKey = stringKey.discardR(simpleIso(id(), id()));\n","        HMap                        map          = emptyHMap().put(stringKey, \"123\");\n","\n","        assertEquals(just(\"123\"), map.get(discardedKey));\n","    }\n","\n","    @Test\n","    public void defaultEquality() {\n","        TypeSafeKey.Simple<Object>  keyA       = typeSafeKey();\n","        TypeSafeKey<Object, Object> mappedKeyA = keyA.andThen(simpleIso(id(), id()));\n","\n","        assertEquals(keyA, keyA);\n","        assertEquals(keyA, mappedKeyA);\n","        assertEquals(mappedKeyA, keyA);\n","        assertEquals(keyA.hashCode(), mappedKeyA.hashCode());\n","\n","        TypeSafeKey.Simple<Object> keyB = typeSafeKey();\n","        assertNotEquals(keyA, keyB);\n","        assertNotEquals(keyB, keyA);\n","        assertNotEquals(keyB, mappedKeyA);\n","        assertNotEquals(mappedKeyA, keyB);\n","\n","        TypeSafeKey<Object, Object> differentMappedKeyA = keyA.andThen(simpleIso(id(), id()));\n","        assertEquals(keyA, differentMappedKeyA);\n","        assertEquals(differentMappedKeyA, keyA);\n","        assertEquals(mappedKeyA, differentMappedKeyA);\n","        assertEquals(differentMappedKeyA, mappedKeyA);\n","        assertEquals(keyA.hashCode(), differentMappedKeyA.hashCode());\n","        assertEquals(mappedKeyA.hashCode(), differentMappedKeyA.hashCode());\n","    }\n","}"],"method_lines_dic":{"TypeSafeKey::::discardR(com.jnape.palatable.lambda.functor.Applicative<U, com.jnape.palatable.lambda.optics.Iso<A, ?, B, B>>)":[26,50],"TypeSafeKey::::andThen(com.jnape.palatable.lambda.optics.Iso.Simple<B, C>)":[66,90],"TypeSafeKey::::typeSafeKey()":[98,110],"TypeSafeKey.Simple::::apply(PAFB)":[119,129]},"test_method_lines_dic":{"TypeSafeKeyTest::::lensLawfulness()":[18,23],"TypeSafeKeyTest::::compositionMapsOriginalValueInAndOutOfHMap()":[25,39],"TypeSafeKeyTest::::discardRPreservesTypeSafeKey()":[41,48],"TypeSafeKeyTest::::defaultEquality()":[50,73]},"reverse_method_lines_dic":{"26":"TypeSafeKey::::discardR(com.jnape.palatable.lambda.functor.Applicative<U, com.jnape.palatable.lambda.optics.Iso<A, ?, B, B>>)","27":"TypeSafeKey::::discardR(com.jnape.palatable.lambda.functor.Applicative<U, com.jnape.palatable.lambda.optics.Iso<A, ?, B, B>>)","28":"TypeSafeKey::::discardR(com.jnape.palatable.lambda.functor.Applicative<U, com.jnape.palatable.lambda.optics.Iso<A, ?, B, B>>)","29":"TypeSafeKey::::discardR(com.jnape.palatable.lambda.functor.Applicative<U, com.jnape.palatable.lambda.optics.Iso<A, ?, B, B>>)","30":"TypeSafeKey::::discardR(com.jnape.palatable.lambda.functor.Applicative<U, com.jnape.palatable.lambda.optics.Iso<A, ?, B, B>>)","31":"TypeSafeKey::::discardR(com.jnape.palatable.lambda.functor.Applicative<U, com.jnape.palatable.lambda.optics.Iso<A, ?, B, B>>)","32":"TypeSafeKey::::discardR(com.jnape.palatable.lambda.functor.Applicative<U, com.jnape.palatable.lambda.optics.Iso<A, ?, B, B>>)","33":"TypeSafeKey::::discardR(com.jnape.palatable.lambda.functor.Applicative<U, com.jnape.palatable.lambda.optics.Iso<A, ?, B, B>>)","34":"TypeSafeKey::::discardR(com.jnape.palatable.lambda.functor.Applicative<U, com.jnape.palatable.lambda.optics.Iso<A, ?, B, B>>)","35":"TypeSafeKey::::discardR(com.jnape.palatable.lambda.functor.Applicative<U, com.jnape.palatable.lambda.optics.Iso<A, ?, B, B>>)","36":"TypeSafeKey::::discardR(com.jnape.palatable.lambda.functor.Applicative<U, com.jnape.palatable.lambda.optics.Iso<A, ?, B, B>>)","37":"TypeSafeKey::::discardR(com.jnape.palatable.lambda.functor.Applicative<U, com.jnape.palatable.lambda.optics.Iso<A, ?, B, B>>)","38":"TypeSafeKey::::discardR(com.jnape.palatable.lambda.functor.Applicative<U, com.jnape.palatable.lambda.optics.Iso<A, ?, B, B>>)","39":"TypeSafeKey::::discardR(com.jnape.palatable.lambda.functor.Applicative<U, com.jnape.palatable.lambda.optics.Iso<A, ?, B, B>>)","40":"TypeSafeKey::::discardR(com.jnape.palatable.lambda.functor.Applicative<U, com.jnape.palatable.lambda.optics.Iso<A, ?, B, B>>)","41":"TypeSafeKey::::discardR(com.jnape.palatable.lambda.functor.Applicative<U, com.jnape.palatable.lambda.optics.Iso<A, ?, B, B>>)","42":"TypeSafeKey::::discardR(com.jnape.palatable.lambda.functor.Applicative<U, com.jnape.palatable.lambda.optics.Iso<A, ?, B, B>>)","43":"TypeSafeKey::::discardR(com.jnape.palatable.lambda.functor.Applicative<U, com.jnape.palatable.lambda.optics.Iso<A, ?, B, B>>)","44":"TypeSafeKey::::discardR(com.jnape.palatable.lambda.functor.Applicative<U, com.jnape.palatable.lambda.optics.Iso<A, ?, B, B>>)","45":"TypeSafeKey::::discardR(com.jnape.palatable.lambda.functor.Applicative<U, com.jnape.palatable.lambda.optics.Iso<A, ?, B, B>>)","46":"TypeSafeKey::::discardR(com.jnape.palatable.lambda.functor.Applicative<U, com.jnape.palatable.lambda.optics.Iso<A, ?, B, B>>)","47":"TypeSafeKey::::discardR(com.jnape.palatable.lambda.functor.Applicative<U, com.jnape.palatable.lambda.optics.Iso<A, ?, B, B>>)","48":"TypeSafeKey::::discardR(com.jnape.palatable.lambda.functor.Applicative<U, com.jnape.palatable.lambda.optics.Iso<A, ?, B, B>>)","49":"TypeSafeKey::::discardR(com.jnape.palatable.lambda.functor.Applicative<U, com.jnape.palatable.lambda.optics.Iso<A, ?, B, B>>)","50":"TypeSafeKey::::discardR(com.jnape.palatable.lambda.functor.Applicative<U, com.jnape.palatable.lambda.optics.Iso<A, ?, B, B>>)","66":"TypeSafeKey::::andThen(com.jnape.palatable.lambda.optics.Iso.Simple<B, C>)","67":"TypeSafeKey::::andThen(com.jnape.palatable.lambda.optics.Iso.Simple<B, C>)","68":"TypeSafeKey::::andThen(com.jnape.palatable.lambda.optics.Iso.Simple<B, C>)","69":"TypeSafeKey::::andThen(com.jnape.palatable.lambda.optics.Iso.Simple<B, C>)","70":"TypeSafeKey::::andThen(com.jnape.palatable.lambda.optics.Iso.Simple<B, C>)","71":"TypeSafeKey::::andThen(com.jnape.palatable.lambda.optics.Iso.Simple<B, C>)","72":"TypeSafeKey::::andThen(com.jnape.palatable.lambda.optics.Iso.Simple<B, C>)","73":"TypeSafeKey::::andThen(com.jnape.palatable.lambda.optics.Iso.Simple<B, C>)","74":"TypeSafeKey::::andThen(com.jnape.palatable.lambda.optics.Iso.Simple<B, C>)","75":"TypeSafeKey::::andThen(com.jnape.palatable.lambda.optics.Iso.Simple<B, C>)","76":"TypeSafeKey::::andThen(com.jnape.palatable.lambda.optics.Iso.Simple<B, C>)","77":"TypeSafeKey::::andThen(com.jnape.palatable.lambda.optics.Iso.Simple<B, C>)","78":"TypeSafeKey::::andThen(com.jnape.palatable.lambda.optics.Iso.Simple<B, C>)","79":"TypeSafeKey::::andThen(com.jnape.palatable.lambda.optics.Iso.Simple<B, C>)","80":"TypeSafeKey::::andThen(com.jnape.palatable.lambda.optics.Iso.Simple<B, C>)","81":"TypeSafeKey::::andThen(com.jnape.palatable.lambda.optics.Iso.Simple<B, C>)","82":"TypeSafeKey::::andThen(com.jnape.palatable.lambda.optics.Iso.Simple<B, C>)","83":"TypeSafeKey::::andThen(com.jnape.palatable.lambda.optics.Iso.Simple<B, C>)","84":"TypeSafeKey::::andThen(com.jnape.palatable.lambda.optics.Iso.Simple<B, C>)","85":"TypeSafeKey::::andThen(com.jnape.palatable.lambda.optics.Iso.Simple<B, C>)","86":"TypeSafeKey::::andThen(com.jnape.palatable.lambda.optics.Iso.Simple<B, C>)","87":"TypeSafeKey::::andThen(com.jnape.palatable.lambda.optics.Iso.Simple<B, C>)","88":"TypeSafeKey::::andThen(com.jnape.palatable.lambda.optics.Iso.Simple<B, C>)","89":"TypeSafeKey::::andThen(com.jnape.palatable.lambda.optics.Iso.Simple<B, C>)","90":"TypeSafeKey::::andThen(com.jnape.palatable.lambda.optics.Iso.Simple<B, C>)","98":"TypeSafeKey::::typeSafeKey()","99":"TypeSafeKey::::typeSafeKey()","100":"TypeSafeKey::::typeSafeKey()","101":"TypeSafeKey::::typeSafeKey()","102":"TypeSafeKey::::typeSafeKey()","103":"TypeSafeKey::::typeSafeKey()","104":"TypeSafeKey::::typeSafeKey()","105":"TypeSafeKey::::typeSafeKey()","106":"TypeSafeKey::::typeSafeKey()","107":"TypeSafeKey::::typeSafeKey()","108":"TypeSafeKey::::typeSafeKey()","109":"TypeSafeKey::::typeSafeKey()","110":"TypeSafeKey::::typeSafeKey()","119":"TypeSafeKey.Simple::::apply(PAFB)","120":"TypeSafeKey.Simple::::apply(PAFB)","121":"TypeSafeKey.Simple::::apply(PAFB)","122":"TypeSafeKey.Simple::::apply(PAFB)","123":"TypeSafeKey.Simple::::apply(PAFB)","124":"TypeSafeKey.Simple::::apply(PAFB)","125":"TypeSafeKey.Simple::::apply(PAFB)","126":"TypeSafeKey.Simple::::apply(PAFB)","127":"TypeSafeKey.Simple::::apply(PAFB)","128":"TypeSafeKey.Simple::::apply(PAFB)","129":"TypeSafeKey.Simple::::apply(PAFB)"},"test_reverse_method_lines_dic":{"18":"TypeSafeKeyTest::::lensLawfulness()","19":"TypeSafeKeyTest::::lensLawfulness()","20":"TypeSafeKeyTest::::lensLawfulness()","21":"TypeSafeKeyTest::::lensLawfulness()","22":"TypeSafeKeyTest::::lensLawfulness()","23":"TypeSafeKeyTest::::lensLawfulness()","25":"TypeSafeKeyTest::::compositionMapsOriginalValueInAndOutOfHMap()","26":"TypeSafeKeyTest::::compositionMapsOriginalValueInAndOutOfHMap()","27":"TypeSafeKeyTest::::compositionMapsOriginalValueInAndOutOfHMap()","28":"TypeSafeKeyTest::::compositionMapsOriginalValueInAndOutOfHMap()","29":"TypeSafeKeyTest::::compositionMapsOriginalValueInAndOutOfHMap()","30":"TypeSafeKeyTest::::compositionMapsOriginalValueInAndOutOfHMap()","31":"TypeSafeKeyTest::::compositionMapsOriginalValueInAndOutOfHMap()","32":"TypeSafeKeyTest::::compositionMapsOriginalValueInAndOutOfHMap()","33":"TypeSafeKeyTest::::compositionMapsOriginalValueInAndOutOfHMap()","34":"TypeSafeKeyTest::::compositionMapsOriginalValueInAndOutOfHMap()","35":"TypeSafeKeyTest::::compositionMapsOriginalValueInAndOutOfHMap()","36":"TypeSafeKeyTest::::compositionMapsOriginalValueInAndOutOfHMap()","37":"TypeSafeKeyTest::::compositionMapsOriginalValueInAndOutOfHMap()","38":"TypeSafeKeyTest::::compositionMapsOriginalValueInAndOutOfHMap()","39":"TypeSafeKeyTest::::compositionMapsOriginalValueInAndOutOfHMap()","41":"TypeSafeKeyTest::::discardRPreservesTypeSafeKey()","42":"TypeSafeKeyTest::::discardRPreservesTypeSafeKey()","43":"TypeSafeKeyTest::::discardRPreservesTypeSafeKey()","44":"TypeSafeKeyTest::::discardRPreservesTypeSafeKey()","45":"TypeSafeKeyTest::::discardRPreservesTypeSafeKey()","46":"TypeSafeKeyTest::::discardRPreservesTypeSafeKey()","47":"TypeSafeKeyTest::::discardRPreservesTypeSafeKey()","48":"TypeSafeKeyTest::::discardRPreservesTypeSafeKey()","50":"TypeSafeKeyTest::::defaultEquality()","51":"TypeSafeKeyTest::::defaultEquality()","52":"TypeSafeKeyTest::::defaultEquality()","53":"TypeSafeKeyTest::::defaultEquality()","54":"TypeSafeKeyTest::::defaultEquality()","55":"TypeSafeKeyTest::::defaultEquality()","56":"TypeSafeKeyTest::::defaultEquality()","57":"TypeSafeKeyTest::::defaultEquality()","58":"TypeSafeKeyTest::::defaultEquality()","59":"TypeSafeKeyTest::::defaultEquality()","60":"TypeSafeKeyTest::::defaultEquality()","61":"TypeSafeKeyTest::::defaultEquality()","62":"TypeSafeKeyTest::::defaultEquality()","63":"TypeSafeKeyTest::::defaultEquality()","64":"TypeSafeKeyTest::::defaultEquality()","65":"TypeSafeKeyTest::::defaultEquality()","66":"TypeSafeKeyTest::::defaultEquality()","67":"TypeSafeKeyTest::::defaultEquality()","68":"TypeSafeKeyTest::::defaultEquality()","69":"TypeSafeKeyTest::::defaultEquality()","70":"TypeSafeKeyTest::::defaultEquality()","71":"TypeSafeKeyTest::::defaultEquality()","72":"TypeSafeKeyTest::::defaultEquality()","73":"TypeSafeKeyTest::::defaultEquality()"},"tests":[{"test_lines":[18,23],"covered_lines":[68,69,77,99,128]},{"test_lines":[25,39],"covered_lines":[68,69,77,82,87,99,102,107,128]},{"test_lines":[41,48],"covered_lines":[28,29,37,42,47,99,102,107,128]},{"test_lines":[50,73],"covered_lines":[68,69,82,87,99,102,107]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/adt/hmap/HMap.java":{"class_content":["package com.jnape.palatable.lambda.adt.hmap;\n","\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.adt.hlist.Tuple2;\n","import com.jnape.palatable.lambda.functions.builtin.fn1.Downcast;\n","\n","import java.util.ArrayList;\n","import java.util.Collection;\n","import java.util.HashMap;\n","import java.util.HashSet;\n","import java.util.Iterator;\n","import java.util.List;\n","import java.util.Map;\n","import java.util.NoSuchElementException;\n","import java.util.Objects;\n","import java.util.Set;\n","import java.util.function.Consumer;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.maybe;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Map.map;\n","import static com.jnape.palatable.lambda.optics.functions.View.view;\n","import static java.util.Collections.emptyMap;\n","\n","/**\n"," * An immutable heterogeneous mapping from a parametrized type-safe key to any value, supporting a minimal mapping\n"," * interface.\n"," *\n"," * @see TypeSafeKey\n"," * @see com.jnape.palatable.lambda.adt.hlist.HList\n"," */\n","public final class HMap implements Iterable<Tuple2<TypeSafeKey<?, ?>, Object>> {\n","\n","    private static final HMap EMPTY = new HMap(emptyMap());\n","\n","    private final Map<TypeSafeKey<?, ?>, Object> table;\n","\n","    private HMap(Map<TypeSafeKey<?, ?>, Object> table) {\n","        this.table = table;\n","    }\n","\n","    /**\n","     * Retrieve the value at this key.\n","     *\n","     * @param key the key\n","     * @param <A> the value type\n","     * @param <B> the value type\n","     * @return Maybe the value at this key\n","     */\n","    public <A, B> Maybe<B> get(TypeSafeKey<A, B> key) {\n","        return maybe(Downcast.<A, Object>downcast(table.get(key))).fmap(view(key));\n","    }\n","\n","    /**\n","     * Retrieve the value at this key, throwing a {@link NoSuchElementException} if this key is unmapped.\n","     *\n","     * @param key the key\n","     * @param <V> the value type\n","     * @return the value at this key\n","     * @throws NoSuchElementException if the key is unmapped\n","     */\n","    public <V> V demand(TypeSafeKey<?, V> key) throws NoSuchElementException {\n","        return get(key).orElseThrow(() -> new NoSuchElementException(\"Demanded value for key \" + key\n","                                                                             + \", but couldn't find one.\"));\n","    }\n","\n","    /**\n","     * Store a value for the given key.\n","     *\n","     * @param key   the key\n","     * @param value the value\n","     * @param <V>   the value type\n","     * @return the updated HMap\n","     */\n","    public <V> HMap put(TypeSafeKey<?, V> key, V value) {\n","        return alter(t -> t.put(key, view(key.mirror(), value)));\n","    }\n","\n","    /**\n","     * Store all the key/value mappings in <code>hMap</code> in this HMap.\n","     *\n","     * @param hMap the other HMap\n","     * @return the updated HMap\n","     */\n","    public HMap putAll(HMap hMap) {\n","        return alter(t -> t.putAll(hMap.table));\n","    }\n","\n","    /**\n","     * Determine if a key is mapped.\n","     *\n","     * @param key the key\n","     * @return true if the key is mapped; false otherwise\n","     */\n","    public boolean containsKey(TypeSafeKey<?, ?> key) {\n","        return table.containsKey(key);\n","    }\n","\n","    /**\n","     * Remove a mapping from this HMap.\n","     *\n","     * @param key the key\n","     * @return the updated HMap\n","     */\n","    public HMap remove(TypeSafeKey<?, ?> key) {\n","        return alter(t -> t.remove(key));\n","    }\n","\n","    /**\n","     * Remove all the key/value mappings in <code>hMap</code> from this HMap.\n","     *\n","     * @param hMap the other HMap\n","     * @return the updated HMap\n","     */\n","    public HMap removeAll(HMap hMap) {\n","        return alter(t -> t.keySet().removeAll(hMap.table.keySet()));\n","    }\n","\n","    /**\n","     * Test whether this {@link HMap} is empty.\n","     *\n","     * @return true if the {@link HMap} is empty; false otherwise.\n","     */\n","    public boolean isEmpty() {\n","        return table.isEmpty();\n","    }\n","\n","    /**\n","     * Retrieve all the mapped keys.\n","     * <p>\n","     * Note that unlike with {@link Map#keySet()}, the resulting key set is not \"live\"; in fact\n","     * that is, alterations to the resulting key set have no effect on the backing {@link HMap}.\n","     *\n","     * @return a {@link Set} of all the mapped keys\n","     */\n","    public Set<TypeSafeKey<?, ?>> keys() {\n","        return new HashSet<>(table.keySet());\n","    }\n","\n","    /**\n","     * Retrieve all the mapped values.\n","     *\n","     * @return a {@link List} of all the mapped values\n","     */\n","    public Collection<Object> values() {\n","        return new ArrayList<>(table.values());\n","    }\n","\n","    /**\n","     * Return a standard {@link Map} view of the current snapshot of this {@link HMap}. Note that updates to either the\n","     * {@link Map} view or to the original {@link HMap} do not propagate to the other.\n","     *\n","     * @return the map view\n","     */\n","    public Map<TypeSafeKey<?, ?>, Object> toMap() {\n","        return new HashMap<>(table);\n","    }\n","\n","    @Override\n","    public Iterator<Tuple2<TypeSafeKey<?, ?>, Object>> iterator() {\n","        return map(Tuple2::fromEntry, table.entrySet()).iterator();\n","    }\n","\n","    @Override\n","    public boolean equals(Object other) {\n","        if (other instanceof HMap) {\n","            HMap that = (HMap) other;\n","            return Objects.equals(this.table, that.table);\n","        }\n","        return false;\n","    }\n","\n","    @Override\n","    public int hashCode() {\n","        return 31 * Objects.hashCode(table);\n","    }\n","\n","    @Override\n","    public String toString() {\n","        return \"HMap{\" +\n","                \"table=\" + table +\n","                '}';\n","    }\n","\n","    private HMap alter(Consumer<Map<TypeSafeKey<?, ?>, Object>> alterFn) {\n","        HashMap<TypeSafeKey<?, ?>, Object> copy = new HashMap<>(table);\n","        alterFn.accept(copy);\n","        return new HMap(copy);\n","    }\n","\n","    /**\n","     * Static factory method for creating an empty HMap.\n","     *\n","     * @return an empty HMap\n","     */\n","    public static HMap emptyHMap() {\n","        return EMPTY;\n","    }\n","\n","    /**\n","     * Static factory method for creating a singleton HMap.\n","     *\n","     * @param key   the only mapped key\n","     * @param value the only mapped value\n","     * @param <V>   the only mapped value type\n","     * @return a singleton HMap\n","     */\n","    public static <V> HMap singletonHMap(TypeSafeKey<?, V> key, V value) {\n","        return emptyHMap().put(key, value);\n","    }\n","\n","    /**\n","     * Static factory method for creating an HMap from two given associations.\n","     *\n","     * @param key1   the first mapped key\n","     * @param value1 the value mapped at key1\n","     * @param key2   the second mapped key\n","     * @param value2 the value mapped at key2\n","     * @param <V1>   value1's type\n","     * @param <V2>   value2's type\n","     * @return an HMap with the given associations\n","     */\n","    public static <V1, V2> HMap hMap(TypeSafeKey<?, V1> key1, V1 value1,\n","                                     TypeSafeKey<?, V2> key2, V2 value2) {\n","        return singletonHMap(key1, value1).put(key2, value2);\n","    }\n","\n","    /**\n","     * Static factory method for creating an HMap from three given associations.\n","     *\n","     * @param key1   the first mapped key\n","     * @param value1 the value mapped at key1\n","     * @param key2   the second mapped key\n","     * @param value2 the value mapped at key2\n","     * @param key3   the third mapped key\n","     * @param value3 the value mapped at key3\n","     * @param <V1>   value1's type\n","     * @param <V2>   value2's type\n","     * @param <V3>   value3's type\n","     * @return an HMap with the given associations\n","     */\n","    public static <V1, V2, V3> HMap hMap(TypeSafeKey<?, V1> key1, V1 value1,\n","                                         TypeSafeKey<?, V2> key2, V2 value2,\n","                                         TypeSafeKey<?, V3> key3, V3 value3) {\n","        return hMap(key1, value1,\n","                    key2, value2)\n","                .put(key3, value3);\n","    }\n","\n","    /**\n","     * Static factory method for creating an HMap from four given associations.\n","     *\n","     * @param key1   the first mapped key\n","     * @param value1 the value mapped at key1\n","     * @param key2   the second mapped key\n","     * @param value2 the value mapped at key2\n","     * @param key3   the third mapped key\n","     * @param value3 the value mapped at key3\n","     * @param key4   the fourth mapped key\n","     * @param value4 the value mapped at key4\n","     * @param <V1>   value1's type\n","     * @param <V2>   value2's type\n","     * @param <V3>   value3's type\n","     * @param <V4>   value4's type\n","     * @return an HMap with the given associations\n","     */\n","    public static <V1, V2, V3, V4> HMap hMap(TypeSafeKey<?, V1> key1, V1 value1,\n","                                             TypeSafeKey<?, V2> key2, V2 value2,\n","                                             TypeSafeKey<?, V3> key3, V3 value3,\n","                                             TypeSafeKey<?, V4> key4, V4 value4) {\n","        return hMap(key1, value1,\n","                    key2, value2,\n","                    key3, value3)\n","                .put(key4, value4);\n","    }\n","\n","    /**\n","     * Static factory method for creating an HMap from five given associations.\n","     *\n","     * @param key1   the first mapped key\n","     * @param value1 the value mapped at key1\n","     * @param key2   the second mapped key\n","     * @param value2 the value mapped at key2\n","     * @param key3   the third mapped key\n","     * @param value3 the value mapped at key3\n","     * @param key4   the fourth mapped key\n","     * @param value4 the value mapped at key4\n","     * @param key5   the fifth mapped key\n","     * @param value5 the value mapped at key5\n","     * @param <V1>   value1's type\n","     * @param <V2>   value2's type\n","     * @param <V3>   value3's type\n","     * @param <V4>   value4's type\n","     * @param <V5>   value5's type\n","     * @return an HMap with the given associations\n","     */\n","    public static <V1, V2, V3, V4, V5> HMap hMap(TypeSafeKey<?, V1> key1, V1 value1,\n","                                                 TypeSafeKey<?, V2> key2, V2 value2,\n","                                                 TypeSafeKey<?, V3> key3, V3 value3,\n","                                                 TypeSafeKey<?, V4> key4, V4 value4,\n","                                                 TypeSafeKey<?, V5> key5, V5 value5) {\n","        return hMap(key1, value1,\n","                    key2, value2,\n","                    key3, value3,\n","                    key4, value4)\n","                .put(key5, value5);\n","    }\n","\n","    /**\n","     * Static factory method for creating an HMap from six given associations.\n","     *\n","     * @param key1   the first mapped key\n","     * @param value1 the value mapped at key1\n","     * @param key2   the second mapped key\n","     * @param value2 the value mapped at key2\n","     * @param key3   the third mapped key\n","     * @param value3 the value mapped at key3\n","     * @param key4   the fourth mapped key\n","     * @param value4 the value mapped at key4\n","     * @param key5   the fifth mapped key\n","     * @param value5 the value mapped at key5\n","     * @param key6   the sixth mapped key\n","     * @param value6 the value mapped at key6\n","     * @param <V1>   value1's type\n","     * @param <V2>   value2's type\n","     * @param <V3>   value3's type\n","     * @param <V4>   value4's type\n","     * @param <V5>   value5's type\n","     * @param <V6>   value6's type\n","     * @return an HMap with the given associations\n","     */\n","    public static <V1, V2, V3, V4, V5, V6> HMap hMap(TypeSafeKey<?, V1> key1, V1 value1,\n","                                                     TypeSafeKey<?, V2> key2, V2 value2,\n","                                                     TypeSafeKey<?, V3> key3, V3 value3,\n","                                                     TypeSafeKey<?, V4> key4, V4 value4,\n","                                                     TypeSafeKey<?, V5> key5, V5 value5,\n","                                                     TypeSafeKey<?, V6> key6, V6 value6) {\n","        return hMap(key1, value1,\n","                    key2, value2,\n","                    key3, value3,\n","                    key4, value4,\n","                    key5, value5)\n","                .put(key6, value6);\n","    }\n","\n","    /**\n","     * Static factory method for creating an HMap from seven given associations.\n","     *\n","     * @param key1   the first mapped key\n","     * @param value1 the value mapped at key1\n","     * @param key2   the second mapped key\n","     * @param value2 the value mapped at key2\n","     * @param key3   the third mapped key\n","     * @param value3 the value mapped at key3\n","     * @param key4   the fourth mapped key\n","     * @param value4 the value mapped at key4\n","     * @param key5   the fifth mapped key\n","     * @param value5 the value mapped at key5\n","     * @param key6   the sixth mapped key\n","     * @param value6 the value mapped at key6\n","     * @param key7   the seventh mapped key\n","     * @param value7 the value mapped at key7\n","     * @param <V1>   value1's type\n","     * @param <V2>   value2's type\n","     * @param <V3>   value3's type\n","     * @param <V4>   value4's type\n","     * @param <V5>   value5's type\n","     * @param <V6>   value6's type\n","     * @param <V7>   value7's type\n","     * @return an HMap with the given associations\n","     */\n","    public static <V1, V2, V3, V4, V5, V6, V7> HMap hMap(TypeSafeKey<?, V1> key1, V1 value1,\n","                                                         TypeSafeKey<?, V2> key2, V2 value2,\n","                                                         TypeSafeKey<?, V3> key3, V3 value3,\n","                                                         TypeSafeKey<?, V4> key4, V4 value4,\n","                                                         TypeSafeKey<?, V5> key5, V5 value5,\n","                                                         TypeSafeKey<?, V6> key6, V6 value6,\n","                                                         TypeSafeKey<?, V7> key7, V7 value7) {\n","        return hMap(key1, value1,\n","                    key2, value2,\n","                    key3, value3,\n","                    key4, value4,\n","                    key5, value5,\n","                    key6, value6)\n","                .put(key7, value7);\n","    }\n","\n","    /**\n","     * Static factory method for creating an HMap from eight given associations.\n","     *\n","     * @param key1   the first mapped key\n","     * @param value1 the value mapped at key1\n","     * @param key2   the second mapped key\n","     * @param value2 the value mapped at key2\n","     * @param key3   the third mapped key\n","     * @param value3 the value mapped at key3\n","     * @param key4   the fourth mapped key\n","     * @param value4 the value mapped at key4\n","     * @param key5   the fifth mapped key\n","     * @param value5 the value mapped at key5\n","     * @param key6   the sixth mapped key\n","     * @param value6 the value mapped at key6\n","     * @param key7   the seventh mapped key\n","     * @param value7 the value mapped at key7\n","     * @param key8   the eighth mapped key\n","     * @param value8 the value mapped at key8\n","     * @param <V1>   value1's type\n","     * @param <V2>   value2's type\n","     * @param <V3>   value3's type\n","     * @param <V4>   value4's type\n","     * @param <V5>   value5's type\n","     * @param <V6>   value6's type\n","     * @param <V7>   value7's type\n","     * @param <V8>   value8's type\n","     * @return an HMap with the given associations\n","     */\n","    public static <V1, V2, V3, V4, V5, V6, V7, V8> HMap hMap(TypeSafeKey<?, V1> key1, V1 value1,\n","                                                             TypeSafeKey<?, V2> key2, V2 value2,\n","                                                             TypeSafeKey<?, V3> key3, V3 value3,\n","                                                             TypeSafeKey<?, V4> key4, V4 value4,\n","                                                             TypeSafeKey<?, V5> key5, V5 value5,\n","                                                             TypeSafeKey<?, V6> key6, V6 value6,\n","                                                             TypeSafeKey<?, V7> key7, V7 value7,\n","                                                             TypeSafeKey<?, V8> key8, V8 value8) {\n","        return hMap(key1, value1,\n","                    key2, value2,\n","                    key3, value3,\n","                    key4, value4,\n","                    key5, value5,\n","                    key6, value6,\n","                    key7, value7)\n","                .put(key8, value8);\n","    }\n","\n","}\n"],"test_content":["package com.jnape.palatable.lambda.adt.hmap;\n","\n","import org.junit.Test;\n","\n","import java.math.BigInteger;\n","import java.util.HashMap;\n","import java.util.NoSuchElementException;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.adt.hmap.HMap.emptyHMap;\n","import static com.jnape.palatable.lambda.adt.hmap.HMap.hMap;\n","import static com.jnape.palatable.lambda.adt.hmap.HMap.singletonHMap;\n","import static com.jnape.palatable.lambda.adt.hmap.TypeSafeKey.typeSafeKey;\n","import static com.jnape.palatable.lambda.optics.Iso.simpleIso;\n","import static java.math.BigInteger.ONE;\n","import static org.junit.Assert.assertEquals;\n","import static org.junit.Assert.assertFalse;\n","import static org.junit.Assert.assertNotEquals;\n","import static org.junit.Assert.assertSame;\n","import static org.junit.Assert.assertThat;\n","import static org.junit.Assert.assertTrue;\n","import static testsupport.matchers.IterableMatcher.iterates;\n","\n","public class HMapTest {\n","\n","    @Test\n","    public void getForPresentKey() {\n","        TypeSafeKey<String, String> stringKey = typeSafeKey();\n","        assertEquals(just(\"string value\"),\n","                     singletonHMap(stringKey, \"string value\").get(stringKey));\n","    }\n","\n","    @Test\n","    public void getForAbsentKey() {\n","        assertEquals(nothing(),\n","                     singletonHMap(typeSafeKey(), \"string value\")\n","                             .get(typeSafeKey()));\n","    }\n","\n","    @Test\n","    public void isEmpty() {\n","        assertTrue(emptyHMap().isEmpty());\n","        assertFalse(singletonHMap(typeSafeKey(), \"foo\").isEmpty());\n","    }\n","\n","    @Test\n","    public void storesTypeSafeKeyBaseValue() {\n","        TypeSafeKey.Simple<String> stringKey = typeSafeKey();\n","        TypeSafeKey<String, Long> longKey = stringKey.andThen(simpleIso(Long::parseLong,\n","                                                                        String::valueOf));\n","        TypeSafeKey<String, BigInteger> bigIntegerKey = longKey.andThen(simpleIso(BigInteger::valueOf,\n","                                                                                  BigInteger::longValue));\n","\n","        HMap hMap = singletonHMap(stringKey, \"1\");\n","        assertEquals(just(\"1\"), hMap.get(stringKey));\n","        assertEquals(just(1L), hMap.get(longKey));\n","        assertEquals(just(ONE), hMap.get(bigIntegerKey));\n","\n","        assertNotEquals(typeSafeKey(), typeSafeKey());\n","\n","        assertEquals(emptyHMap().put(longKey, 1L).get(longKey), emptyHMap().put(stringKey, \"1\").get(longKey));\n","        assertEquals(emptyHMap().put(stringKey, \"1\").get(stringKey), emptyHMap().put(longKey, 1L).get(stringKey));\n","        assertEquals(emptyHMap().put(stringKey, \"1\").get(stringKey),\n","                     emptyHMap().put(bigIntegerKey, ONE).get(stringKey));\n","\n","        assertEquals(singletonHMap(stringKey, \"1\"), singletonHMap(longKey, 1L));\n","        assertEquals(singletonHMap(stringKey, \"1\"), singletonHMap(bigIntegerKey, ONE));\n","        assertEquals(singletonHMap(longKey, 1L), singletonHMap(bigIntegerKey, ONE));\n","    }\n","\n","    @Test\n","    public void getForPresentKeyWithNullValue() {\n","        TypeSafeKey<String, String> stringKey = typeSafeKey();\n","        assertEquals(nothing(),\n","                     singletonHMap(stringKey, null).get(stringKey));\n","    }\n","\n","    @Test\n","    public void put() {\n","        TypeSafeKey<String, String> stringKey = typeSafeKey();\n","        assertEquals(singletonHMap(stringKey, \"string value\"),\n","                     emptyHMap().put(stringKey, \"string value\"));\n","\n","        assertEquals(singletonHMap(stringKey, \"new value\"),\n","                     emptyHMap()\n","                             .put(stringKey, \"string value\")\n","                             .put(stringKey, \"new value\"));\n","    }\n","\n","    @Test\n","    public void putAll() {\n","        TypeSafeKey<String, String>   stringKey1 = typeSafeKey();\n","        TypeSafeKey<String, String>   stringKey2 = typeSafeKey();\n","        TypeSafeKey<Integer, Integer> intKey     = typeSafeKey();\n","\n","        HMap left = hMap(stringKey1, \"string value\",\n","                         intKey, 1);\n","        HMap right = hMap(stringKey2, \"another string value\",\n","                          intKey, 2);\n","\n","        assertEquals(hMap(stringKey1, \"string value\",\n","                          stringKey2, \"another string value\",\n","                          intKey, 2),\n","                     left.putAll(right));\n","        assertEquals(hMap(stringKey1, \"string value\",\n","                          stringKey2, \"another string value\",\n","                          intKey, 1),\n","                     right.putAll(left));\n","    }\n","\n","    @Test\n","    public void remove() {\n","        TypeSafeKey<String, String> stringKey1 = typeSafeKey();\n","        TypeSafeKey<String, String> stringKey2 = typeSafeKey();\n","        assertEquals(emptyHMap(),\n","                     emptyHMap()\n","                             .put(stringKey1, \"string value\")\n","                             .remove(stringKey1));\n","\n","        assertEquals(singletonHMap(stringKey2, \"another string value\"),\n","                     emptyHMap()\n","                             .put(stringKey1, \"string value\")\n","                             .put(stringKey2, \"another string value\")\n","                             .remove(stringKey1));\n","    }\n","\n","    @Test\n","    public void removeAll() {\n","        TypeSafeKey<String, String> stringKey1 = typeSafeKey();\n","        TypeSafeKey<String, String> stringKey2 = typeSafeKey();\n","\n","        HMap hMap1 = hMap(stringKey1, \"foo\",\n","                          stringKey2, \"bar\");\n","        HMap hMap2 = singletonHMap(stringKey1, \"foo\");\n","\n","        assertEquals(singletonHMap(stringKey2, \"bar\"),\n","                     hMap1.removeAll(hMap2));\n","    }\n","\n","    @Test\n","    public void containsKey() {\n","        TypeSafeKey<String, String>   stringKey1 = typeSafeKey();\n","        TypeSafeKey<String, String>   stringKey2 = typeSafeKey();\n","        TypeSafeKey<Integer, Integer> intKey     = typeSafeKey();\n","\n","        HMap hMap = singletonHMap(stringKey1, \"string\");\n","\n","        assertTrue(hMap.containsKey(stringKey1));\n","        assertFalse(hMap.containsKey(stringKey2));\n","        assertFalse(hMap.containsKey(intKey));\n","    }\n","\n","    @Test\n","    public void demandForPresentKey() {\n","        TypeSafeKey<String, String> stringKey = typeSafeKey();\n","        assertEquals(\"string value\",\n","                     singletonHMap(stringKey, \"string value\").demand(stringKey));\n","    }\n","\n","    @Test(expected = NoSuchElementException.class)\n","    public void demandForAbsentKey() {\n","        emptyHMap().demand(typeSafeKey());\n","    }\n","\n","    @Test\n","    @SuppressWarnings(\"serial\")\n","    public void toMap() {\n","        TypeSafeKey<String, String>   stringKey = typeSafeKey();\n","        TypeSafeKey<Integer, Integer> intKey    = typeSafeKey();\n","\n","        assertEquals(new HashMap<TypeSafeKey<?, ?>, Object>() {{\n","            put(stringKey, \"string\");\n","            put(intKey, 1);\n","        }}, hMap(stringKey, \"string\",\n","                 intKey, 1).toMap());\n","    }\n","\n","    @Test\n","    public void iteratesKVPairsAsTuples() {\n","        TypeSafeKey<String, String> stringKey = typeSafeKey();\n","\n","        assertThat(singletonHMap(stringKey, \"string value\"),\n","                   iterates(tuple(stringKey, \"string value\")));\n","    }\n","\n","    @Test\n","    public void keys() {\n","        TypeSafeKey<String, String> stringKey = typeSafeKey();\n","\n","        assertThat(singletonHMap(stringKey, \"string value\").keys(),\n","                   iterates(stringKey));\n","    }\n","\n","    @Test\n","    public void values() {\n","        assertThat(singletonHMap(typeSafeKey(), \"string value\").values(),\n","                   iterates(\"string value\"));\n","    }\n","\n","    @Test\n","    public void convenienceStaticFactoryMethods() {\n","        TypeSafeKey.Simple<String>    stringKey = typeSafeKey();\n","        TypeSafeKey.Simple<Integer>   intKey    = typeSafeKey();\n","        TypeSafeKey.Simple<Float>     floatKey  = typeSafeKey();\n","        TypeSafeKey.Simple<Byte>      byteKey   = typeSafeKey();\n","        TypeSafeKey.Simple<Short>     shortKey  = typeSafeKey();\n","        TypeSafeKey.Simple<Long>      longKey   = typeSafeKey();\n","        TypeSafeKey.Simple<Double>    doubleKey = typeSafeKey();\n","        TypeSafeKey.Simple<Character> charKey   = typeSafeKey();\n","\n","        HMap m1 = emptyHMap().put(stringKey, \"string value\");\n","        HMap m2 = m1.put(intKey, 1);\n","        HMap m3 = m2.put(floatKey, 1f);\n","        HMap m4 = m3.put(byteKey, (byte) 1);\n","        HMap m5 = m4.put(shortKey, (short) 1);\n","        HMap m6 = m5.put(longKey, 1L);\n","        HMap m7 = m6.put(doubleKey, 1D);\n","        HMap m8 = m7.put(charKey, '1');\n","\n","        assertEquals(m1,\n","                     singletonHMap(stringKey, \"string value\"));\n","\n","        assertEquals(m2,\n","                     hMap(stringKey, \"string value\",\n","                          intKey, 1));\n","\n","        assertEquals(m3,\n","                     hMap(stringKey, \"string value\",\n","                          intKey, 1,\n","                          floatKey, 1f));\n","\n","        assertEquals(m4,\n","                     hMap(stringKey, \"string value\",\n","                          intKey, 1,\n","                          floatKey, 1f,\n","                          byteKey, (byte) 1));\n","\n","        assertEquals(m5,\n","                     hMap(stringKey, \"string value\",\n","                          intKey, 1,\n","                          floatKey, 1f,\n","                          byteKey, (byte) 1,\n","                          shortKey, (short) 1));\n","\n","        assertEquals(m6,\n","                     hMap(stringKey, \"string value\",\n","                          intKey, 1,\n","                          floatKey, 1f,\n","                          byteKey, (byte) 1,\n","                          shortKey, (short) 1,\n","                          longKey, 1L));\n","\n","        assertEquals(m7,\n","                     hMap(stringKey, \"string value\",\n","                          intKey, 1,\n","                          floatKey, 1f,\n","                          byteKey, (byte) 1,\n","                          shortKey, (short) 1,\n","                          longKey, 1L,\n","                          doubleKey, 1D));\n","\n","        assertEquals(m8,\n","                     hMap(stringKey, \"string value\",\n","                          intKey, 1,\n","                          floatKey, 1f,\n","                          byteKey, (byte) 1,\n","                          shortKey, (short) 1,\n","                          longKey, 1L,\n","                          doubleKey, 1D,\n","                          charKey, '1'));\n","    }\n","\n","    @Test\n","    public void equality() {\n","        assertEquals(emptyHMap(), emptyHMap());\n","\n","        TypeSafeKey<String, String> stringKey = typeSafeKey();\n","        assertEquals(emptyHMap().put(stringKey, \"one\"), emptyHMap().put(stringKey, \"one\"));\n","\n","        assertNotEquals(emptyHMap(), emptyHMap().put(stringKey, \"string key\"));\n","        assertNotEquals(emptyHMap().put(stringKey, \"string key\"), emptyHMap());\n","        assertNotEquals(emptyHMap().put(typeSafeKey(), \"one\"), emptyHMap().put(typeSafeKey(), \"one\"));\n","        assertNotEquals(emptyHMap().put(typeSafeKey(), \"one\"), emptyHMap().put(typeSafeKey(), 1));\n","        assertNotEquals(emptyHMap().put(typeSafeKey(), 1), emptyHMap().put(typeSafeKey(), \"one\"));\n","    }\n","\n","    @Test\n","    public void hashCodeUsesDecentDistribution() {\n","        assertEquals(emptyHMap().hashCode(), emptyHMap().hashCode());\n","        TypeSafeKey<String, String> stringKey = typeSafeKey();\n","        assertEquals(singletonHMap(stringKey, \"string value\").hashCode(),\n","                     singletonHMap(stringKey, \"string value\").hashCode());\n","\n","        assertNotEquals(emptyHMap(), singletonHMap(stringKey, \"string value\"));\n","        assertNotEquals(singletonHMap(stringKey, \"string value\"),\n","                        singletonHMap(stringKey, \"another string value\"));\n","    }\n","\n","    @Test\n","    public void emptyHMapReusesInstance() {\n","        assertSame(emptyHMap(), emptyHMap());\n","    }\n","}"],"method_lines_dic":{"HMap::::get(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<A, B>)":[49,51],"HMap::::demand(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V>)":[61,64],"HMap::::put(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V>,V)":[74,76],"HMap::::putAll(com.jnape.palatable.lambda.adt.hmap.HMap)":[84,86],"HMap::::containsKey(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, ?>)":[94,96],"HMap::::remove(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, ?>)":[104,106],"HMap::::removeAll(com.jnape.palatable.lambda.adt.hmap.HMap)":[114,116],"HMap::::isEmpty()":[123,125],"HMap::::keys()":[135,137],"HMap::::values()":[144,146],"HMap::::toMap()":[154,156],"HMap::::iterator()":[158,161],"HMap::::equals(java.lang.Object)":[163,170],"HMap::::hashCode()":[172,175],"HMap::::toString()":[177,182],"HMap::::alter(java.util.function.Consumer<java.util.Map<com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, ?>, java.lang.Object>>)":[184,188],"HMap::::emptyHMap()":[195,197],"HMap::::singletonHMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V>,V)":[207,209],"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2)":[222,225],"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3)":[241,247],"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4)":[266,274],"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5)":[296,306],"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6)":[331,343],"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V7>,V7)":[371,385],"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V7>,V7,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V8>,V8)":[416,432]},"test_method_lines_dic":{"HMapTest::::getForPresentKey()":[28,33],"HMapTest::::getForAbsentKey()":[35,40],"HMapTest::::isEmpty()":[42,46],"HMapTest::::storesTypeSafeKeyBaseValue()":[48,71],"HMapTest::::getForPresentKeyWithNullValue()":[73,78],"HMapTest::::put()":[80,90],"HMapTest::::putAll()":[92,111],"HMapTest::::remove()":[113,127],"HMapTest::::removeAll()":[129,140],"HMapTest::::containsKey()":[142,153],"HMapTest::::demandForPresentKey()":[155,160],"HMapTest::::demandForAbsentKey()":[162,165],"HMapTest::::toMap()":[167,178],"HMapTest::::iteratesKVPairsAsTuples()":[180,186],"HMapTest::::keys()":[188,194],"HMapTest::::values()":[196,200],"HMapTest::::convenienceStaticFactoryMethods()":[202,273],"HMapTest::::equality()":[275,287],"HMapTest::::hashCodeUsesDecentDistribution()":[289,299],"HMapTest::::emptyHMapReusesInstance()":[301,304]},"reverse_method_lines_dic":{"49":"HMap::::get(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<A, B>)","50":"HMap::::get(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<A, B>)","51":"HMap::::get(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<A, B>)","61":"HMap::::demand(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V>)","62":"HMap::::demand(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V>)","63":"HMap::::demand(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V>)","64":"HMap::::demand(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V>)","74":"HMap::::put(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V>,V)","75":"HMap::::put(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V>,V)","76":"HMap::::put(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V>,V)","84":"HMap::::putAll(com.jnape.palatable.lambda.adt.hmap.HMap)","85":"HMap::::putAll(com.jnape.palatable.lambda.adt.hmap.HMap)","86":"HMap::::putAll(com.jnape.palatable.lambda.adt.hmap.HMap)","94":"HMap::::containsKey(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, ?>)","95":"HMap::::containsKey(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, ?>)","96":"HMap::::containsKey(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, ?>)","104":"HMap::::remove(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, ?>)","105":"HMap::::remove(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, ?>)","106":"HMap::::remove(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, ?>)","114":"HMap::::removeAll(com.jnape.palatable.lambda.adt.hmap.HMap)","115":"HMap::::removeAll(com.jnape.palatable.lambda.adt.hmap.HMap)","116":"HMap::::removeAll(com.jnape.palatable.lambda.adt.hmap.HMap)","123":"HMap::::isEmpty()","124":"HMap::::isEmpty()","125":"HMap::::isEmpty()","135":"HMap::::keys()","136":"HMap::::keys()","137":"HMap::::keys()","144":"HMap::::values()","145":"HMap::::values()","146":"HMap::::values()","154":"HMap::::toMap()","155":"HMap::::toMap()","156":"HMap::::toMap()","158":"HMap::::iterator()","159":"HMap::::iterator()","160":"HMap::::iterator()","161":"HMap::::iterator()","163":"HMap::::equals(java.lang.Object)","164":"HMap::::equals(java.lang.Object)","165":"HMap::::equals(java.lang.Object)","166":"HMap::::equals(java.lang.Object)","167":"HMap::::equals(java.lang.Object)","168":"HMap::::equals(java.lang.Object)","169":"HMap::::equals(java.lang.Object)","170":"HMap::::equals(java.lang.Object)","172":"HMap::::hashCode()","173":"HMap::::hashCode()","174":"HMap::::hashCode()","175":"HMap::::hashCode()","177":"HMap::::toString()","178":"HMap::::toString()","179":"HMap::::toString()","180":"HMap::::toString()","181":"HMap::::toString()","182":"HMap::::toString()","184":"HMap::::alter(java.util.function.Consumer<java.util.Map<com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, ?>, java.lang.Object>>)","185":"HMap::::alter(java.util.function.Consumer<java.util.Map<com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, ?>, java.lang.Object>>)","186":"HMap::::alter(java.util.function.Consumer<java.util.Map<com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, ?>, java.lang.Object>>)","187":"HMap::::alter(java.util.function.Consumer<java.util.Map<com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, ?>, java.lang.Object>>)","188":"HMap::::alter(java.util.function.Consumer<java.util.Map<com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, ?>, java.lang.Object>>)","195":"HMap::::emptyHMap()","196":"HMap::::emptyHMap()","197":"HMap::::emptyHMap()","207":"HMap::::singletonHMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V>,V)","208":"HMap::::singletonHMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V>,V)","209":"HMap::::singletonHMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V>,V)","222":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2)","223":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2)","224":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2)","225":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2)","241":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3)","242":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3)","243":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3)","244":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3)","245":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3)","246":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3)","247":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3)","266":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4)","267":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4)","268":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4)","269":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4)","270":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4)","271":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4)","272":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4)","273":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4)","274":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4)","296":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5)","297":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5)","298":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5)","299":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5)","300":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5)","301":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5)","302":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5)","303":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5)","304":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5)","305":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5)","306":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5)","331":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6)","332":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6)","333":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6)","334":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6)","335":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6)","336":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6)","337":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6)","338":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6)","339":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6)","340":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6)","341":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6)","342":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6)","343":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6)","371":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V7>,V7)","372":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V7>,V7)","373":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V7>,V7)","374":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V7>,V7)","375":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V7>,V7)","376":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V7>,V7)","377":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V7>,V7)","378":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V7>,V7)","379":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V7>,V7)","380":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V7>,V7)","381":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V7>,V7)","382":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V7>,V7)","383":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V7>,V7)","384":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V7>,V7)","385":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V7>,V7)","416":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V7>,V7,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V8>,V8)","417":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V7>,V7,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V8>,V8)","418":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V7>,V7,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V8>,V8)","419":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V7>,V7,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V8>,V8)","420":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V7>,V7,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V8>,V8)","421":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V7>,V7,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V8>,V8)","422":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V7>,V7,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V8>,V8)","423":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V7>,V7,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V8>,V8)","424":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V7>,V7,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V8>,V8)","425":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V7>,V7,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V8>,V8)","426":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V7>,V7,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V8>,V8)","427":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V7>,V7,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V8>,V8)","428":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V7>,V7,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V8>,V8)","429":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V7>,V7,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V8>,V8)","430":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V7>,V7,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V8>,V8)","431":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V7>,V7,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V8>,V8)","432":"HMap::::hMap(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V1>,V1,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V2>,V2,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V3>,V3,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V4>,V4,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V5>,V5,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V6>,V6,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V7>,V7,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, V8>,V8)"},"test_reverse_method_lines_dic":{"28":"HMapTest::::getForPresentKey()","29":"HMapTest::::getForPresentKey()","30":"HMapTest::::getForPresentKey()","31":"HMapTest::::getForPresentKey()","32":"HMapTest::::getForPresentKey()","33":"HMapTest::::getForPresentKey()","35":"HMapTest::::getForAbsentKey()","36":"HMapTest::::getForAbsentKey()","37":"HMapTest::::getForAbsentKey()","38":"HMapTest::::getForAbsentKey()","39":"HMapTest::::getForAbsentKey()","40":"HMapTest::::getForAbsentKey()","42":"HMapTest::::isEmpty()","43":"HMapTest::::isEmpty()","44":"HMapTest::::isEmpty()","45":"HMapTest::::isEmpty()","46":"HMapTest::::isEmpty()","48":"HMapTest::::storesTypeSafeKeyBaseValue()","49":"HMapTest::::storesTypeSafeKeyBaseValue()","50":"HMapTest::::storesTypeSafeKeyBaseValue()","51":"HMapTest::::storesTypeSafeKeyBaseValue()","52":"HMapTest::::storesTypeSafeKeyBaseValue()","53":"HMapTest::::storesTypeSafeKeyBaseValue()","54":"HMapTest::::storesTypeSafeKeyBaseValue()","55":"HMapTest::::storesTypeSafeKeyBaseValue()","56":"HMapTest::::storesTypeSafeKeyBaseValue()","57":"HMapTest::::storesTypeSafeKeyBaseValue()","58":"HMapTest::::storesTypeSafeKeyBaseValue()","59":"HMapTest::::storesTypeSafeKeyBaseValue()","60":"HMapTest::::storesTypeSafeKeyBaseValue()","61":"HMapTest::::storesTypeSafeKeyBaseValue()","62":"HMapTest::::storesTypeSafeKeyBaseValue()","63":"HMapTest::::storesTypeSafeKeyBaseValue()","64":"HMapTest::::storesTypeSafeKeyBaseValue()","65":"HMapTest::::storesTypeSafeKeyBaseValue()","66":"HMapTest::::storesTypeSafeKeyBaseValue()","67":"HMapTest::::storesTypeSafeKeyBaseValue()","68":"HMapTest::::storesTypeSafeKeyBaseValue()","69":"HMapTest::::storesTypeSafeKeyBaseValue()","70":"HMapTest::::storesTypeSafeKeyBaseValue()","71":"HMapTest::::storesTypeSafeKeyBaseValue()","73":"HMapTest::::getForPresentKeyWithNullValue()","74":"HMapTest::::getForPresentKeyWithNullValue()","75":"HMapTest::::getForPresentKeyWithNullValue()","76":"HMapTest::::getForPresentKeyWithNullValue()","77":"HMapTest::::getForPresentKeyWithNullValue()","78":"HMapTest::::getForPresentKeyWithNullValue()","80":"HMapTest::::put()","81":"HMapTest::::put()","82":"HMapTest::::put()","83":"HMapTest::::put()","84":"HMapTest::::put()","85":"HMapTest::::put()","86":"HMapTest::::put()","87":"HMapTest::::put()","88":"HMapTest::::put()","89":"HMapTest::::put()","90":"HMapTest::::put()","92":"HMapTest::::putAll()","93":"HMapTest::::putAll()","94":"HMapTest::::putAll()","95":"HMapTest::::putAll()","96":"HMapTest::::putAll()","97":"HMapTest::::putAll()","98":"HMapTest::::putAll()","99":"HMapTest::::putAll()","100":"HMapTest::::putAll()","101":"HMapTest::::putAll()","102":"HMapTest::::putAll()","103":"HMapTest::::putAll()","104":"HMapTest::::putAll()","105":"HMapTest::::putAll()","106":"HMapTest::::putAll()","107":"HMapTest::::putAll()","108":"HMapTest::::putAll()","109":"HMapTest::::putAll()","110":"HMapTest::::putAll()","111":"HMapTest::::putAll()","113":"HMapTest::::remove()","114":"HMapTest::::remove()","115":"HMapTest::::remove()","116":"HMapTest::::remove()","117":"HMapTest::::remove()","118":"HMapTest::::remove()","119":"HMapTest::::remove()","120":"HMapTest::::remove()","121":"HMapTest::::remove()","122":"HMapTest::::remove()","123":"HMapTest::::remove()","124":"HMapTest::::remove()","125":"HMapTest::::remove()","126":"HMapTest::::remove()","127":"HMapTest::::remove()","129":"HMapTest::::removeAll()","130":"HMapTest::::removeAll()","131":"HMapTest::::removeAll()","132":"HMapTest::::removeAll()","133":"HMapTest::::removeAll()","134":"HMapTest::::removeAll()","135":"HMapTest::::removeAll()","136":"HMapTest::::removeAll()","137":"HMapTest::::removeAll()","138":"HMapTest::::removeAll()","139":"HMapTest::::removeAll()","140":"HMapTest::::removeAll()","142":"HMapTest::::containsKey()","143":"HMapTest::::containsKey()","144":"HMapTest::::containsKey()","145":"HMapTest::::containsKey()","146":"HMapTest::::containsKey()","147":"HMapTest::::containsKey()","148":"HMapTest::::containsKey()","149":"HMapTest::::containsKey()","150":"HMapTest::::containsKey()","151":"HMapTest::::containsKey()","152":"HMapTest::::containsKey()","153":"HMapTest::::containsKey()","155":"HMapTest::::demandForPresentKey()","156":"HMapTest::::demandForPresentKey()","157":"HMapTest::::demandForPresentKey()","158":"HMapTest::::demandForPresentKey()","159":"HMapTest::::demandForPresentKey()","160":"HMapTest::::demandForPresentKey()","162":"HMapTest::::demandForAbsentKey()","163":"HMapTest::::demandForAbsentKey()","164":"HMapTest::::demandForAbsentKey()","165":"HMapTest::::demandForAbsentKey()","167":"HMapTest::::toMap()","168":"HMapTest::::toMap()","169":"HMapTest::::toMap()","170":"HMapTest::::toMap()","171":"HMapTest::::toMap()","172":"HMapTest::::toMap()","173":"HMapTest::::toMap()","174":"HMapTest::::toMap()","175":"HMapTest::::toMap()","176":"HMapTest::::toMap()","177":"HMapTest::::toMap()","178":"HMapTest::::toMap()","180":"HMapTest::::iteratesKVPairsAsTuples()","181":"HMapTest::::iteratesKVPairsAsTuples()","182":"HMapTest::::iteratesKVPairsAsTuples()","183":"HMapTest::::iteratesKVPairsAsTuples()","184":"HMapTest::::iteratesKVPairsAsTuples()","185":"HMapTest::::iteratesKVPairsAsTuples()","186":"HMapTest::::iteratesKVPairsAsTuples()","188":"HMapTest::::keys()","189":"HMapTest::::keys()","190":"HMapTest::::keys()","191":"HMapTest::::keys()","192":"HMapTest::::keys()","193":"HMapTest::::keys()","194":"HMapTest::::keys()","196":"HMapTest::::values()","197":"HMapTest::::values()","198":"HMapTest::::values()","199":"HMapTest::::values()","200":"HMapTest::::values()","202":"HMapTest::::convenienceStaticFactoryMethods()","203":"HMapTest::::convenienceStaticFactoryMethods()","204":"HMapTest::::convenienceStaticFactoryMethods()","205":"HMapTest::::convenienceStaticFactoryMethods()","206":"HMapTest::::convenienceStaticFactoryMethods()","207":"HMapTest::::convenienceStaticFactoryMethods()","208":"HMapTest::::convenienceStaticFactoryMethods()","209":"HMapTest::::convenienceStaticFactoryMethods()","210":"HMapTest::::convenienceStaticFactoryMethods()","211":"HMapTest::::convenienceStaticFactoryMethods()","212":"HMapTest::::convenienceStaticFactoryMethods()","213":"HMapTest::::convenienceStaticFactoryMethods()","214":"HMapTest::::convenienceStaticFactoryMethods()","215":"HMapTest::::convenienceStaticFactoryMethods()","216":"HMapTest::::convenienceStaticFactoryMethods()","217":"HMapTest::::convenienceStaticFactoryMethods()","218":"HMapTest::::convenienceStaticFactoryMethods()","219":"HMapTest::::convenienceStaticFactoryMethods()","220":"HMapTest::::convenienceStaticFactoryMethods()","221":"HMapTest::::convenienceStaticFactoryMethods()","222":"HMapTest::::convenienceStaticFactoryMethods()","223":"HMapTest::::convenienceStaticFactoryMethods()","224":"HMapTest::::convenienceStaticFactoryMethods()","225":"HMapTest::::convenienceStaticFactoryMethods()","226":"HMapTest::::convenienceStaticFactoryMethods()","227":"HMapTest::::convenienceStaticFactoryMethods()","228":"HMapTest::::convenienceStaticFactoryMethods()","229":"HMapTest::::convenienceStaticFactoryMethods()","230":"HMapTest::::convenienceStaticFactoryMethods()","231":"HMapTest::::convenienceStaticFactoryMethods()","232":"HMapTest::::convenienceStaticFactoryMethods()","233":"HMapTest::::convenienceStaticFactoryMethods()","234":"HMapTest::::convenienceStaticFactoryMethods()","235":"HMapTest::::convenienceStaticFactoryMethods()","236":"HMapTest::::convenienceStaticFactoryMethods()","237":"HMapTest::::convenienceStaticFactoryMethods()","238":"HMapTest::::convenienceStaticFactoryMethods()","239":"HMapTest::::convenienceStaticFactoryMethods()","240":"HMapTest::::convenienceStaticFactoryMethods()","241":"HMapTest::::convenienceStaticFactoryMethods()","242":"HMapTest::::convenienceStaticFactoryMethods()","243":"HMapTest::::convenienceStaticFactoryMethods()","244":"HMapTest::::convenienceStaticFactoryMethods()","245":"HMapTest::::convenienceStaticFactoryMethods()","246":"HMapTest::::convenienceStaticFactoryMethods()","247":"HMapTest::::convenienceStaticFactoryMethods()","248":"HMapTest::::convenienceStaticFactoryMethods()","249":"HMapTest::::convenienceStaticFactoryMethods()","250":"HMapTest::::convenienceStaticFactoryMethods()","251":"HMapTest::::convenienceStaticFactoryMethods()","252":"HMapTest::::convenienceStaticFactoryMethods()","253":"HMapTest::::convenienceStaticFactoryMethods()","254":"HMapTest::::convenienceStaticFactoryMethods()","255":"HMapTest::::convenienceStaticFactoryMethods()","256":"HMapTest::::convenienceStaticFactoryMethods()","257":"HMapTest::::convenienceStaticFactoryMethods()","258":"HMapTest::::convenienceStaticFactoryMethods()","259":"HMapTest::::convenienceStaticFactoryMethods()","260":"HMapTest::::convenienceStaticFactoryMethods()","261":"HMapTest::::convenienceStaticFactoryMethods()","262":"HMapTest::::convenienceStaticFactoryMethods()","263":"HMapTest::::convenienceStaticFactoryMethods()","264":"HMapTest::::convenienceStaticFactoryMethods()","265":"HMapTest::::convenienceStaticFactoryMethods()","266":"HMapTest::::convenienceStaticFactoryMethods()","267":"HMapTest::::convenienceStaticFactoryMethods()","268":"HMapTest::::convenienceStaticFactoryMethods()","269":"HMapTest::::convenienceStaticFactoryMethods()","270":"HMapTest::::convenienceStaticFactoryMethods()","271":"HMapTest::::convenienceStaticFactoryMethods()","272":"HMapTest::::convenienceStaticFactoryMethods()","273":"HMapTest::::convenienceStaticFactoryMethods()","275":"HMapTest::::equality()","276":"HMapTest::::equality()","277":"HMapTest::::equality()","278":"HMapTest::::equality()","279":"HMapTest::::equality()","280":"HMapTest::::equality()","281":"HMapTest::::equality()","282":"HMapTest::::equality()","283":"HMapTest::::equality()","284":"HMapTest::::equality()","285":"HMapTest::::equality()","286":"HMapTest::::equality()","287":"HMapTest::::equality()","289":"HMapTest::::hashCodeUsesDecentDistribution()","290":"HMapTest::::hashCodeUsesDecentDistribution()","291":"HMapTest::::hashCodeUsesDecentDistribution()","292":"HMapTest::::hashCodeUsesDecentDistribution()","293":"HMapTest::::hashCodeUsesDecentDistribution()","294":"HMapTest::::hashCodeUsesDecentDistribution()","295":"HMapTest::::hashCodeUsesDecentDistribution()","296":"HMapTest::::hashCodeUsesDecentDistribution()","297":"HMapTest::::hashCodeUsesDecentDistribution()","298":"HMapTest::::hashCodeUsesDecentDistribution()","299":"HMapTest::::hashCodeUsesDecentDistribution()","301":"HMapTest::::emptyHMapReusesInstance()","302":"HMapTest::::emptyHMapReusesInstance()","303":"HMapTest::::emptyHMapReusesInstance()","304":"HMapTest::::emptyHMapReusesInstance()"},"tests":[{"test_lines":[28,33],"covered_lines":[33,37,38,39,50,75,185,186,187,196,208]},{"test_lines":[35,40],"covered_lines":[33,37,38,39,50,75,185,186,187,196,208]},{"test_lines":[42,46],"covered_lines":[33,37,38,39,75,124,185,186,187,196,208]},{"test_lines":[48,71],"covered_lines":[33,37,38,39,50,75,165,166,167,185,186,187,196,208]},{"test_lines":[73,78],"covered_lines":[33,37,38,39,50,75,185,186,187,196,208]},{"test_lines":[80,90],"covered_lines":[33,37,38,39,75,165,166,167,185,186,187,196,208]},{"test_lines":[92,111],"covered_lines":[33,37,38,39,75,85,165,166,167,185,186,187,196,208,224,244,246]},{"test_lines":[113,127],"covered_lines":[33,37,38,39,75,105,165,166,167,185,186,187,196,208]},{"test_lines":[129,140],"covered_lines":[33,37,38,39,75,115,165,166,167,185,186,187,196,208,224]},{"test_lines":[142,153],"covered_lines":[33,37,38,39,75,95,185,186,187,196,208]},{"test_lines":[155,160],"covered_lines":[33,37,38,39,50,62,75,185,186,187,196,208]},{"test_lines":[162,165],"covered_lines":[33,37,38,39,50,62,196]},{"test_lines":[167,178],"covered_lines":[33,37,38,39,75,155,185,186,187,196,208,224]},{"test_lines":[180,186],"covered_lines":[33,37,38,39,75,160,185,186,187,196,208]},{"test_lines":[188,194],"covered_lines":[33,37,38,39,75,136,185,186,187,196,208]},{"test_lines":[196,200],"covered_lines":[33,37,38,39,75,145,185,186,187,196,208]},{"test_lines":[202,273],"covered_lines":[33,37,38,39,75,165,166,167,185,186,187,196,208,224,244,246,270,273,301,305,337,342,378,384,424,431]},{"test_lines":[275,287],"covered_lines":[33,37,38,39,75,165,166,167,185,186,187,196]},{"test_lines":[289,299],"covered_lines":[33,37,38,39,75,165,166,167,174,185,186,187,196,208]},{"test_lines":[301,304],"covered_lines":[33,37,38,39,196]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/adt/hmap/Schema.java":{"class_content":["package com.jnape.palatable.lambda.adt.hmap;\n","\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.adt.hlist.HList;\n","import com.jnape.palatable.lambda.adt.hlist.HList.HCons;\n","import com.jnape.palatable.lambda.adt.hlist.SingletonHList;\n","import com.jnape.palatable.lambda.adt.hlist.Tuple2;\n","import com.jnape.palatable.lambda.adt.hlist.Tuple3;\n","import com.jnape.palatable.lambda.adt.hlist.Tuple4;\n","import com.jnape.palatable.lambda.adt.hlist.Tuple5;\n","import com.jnape.palatable.lambda.adt.hlist.Tuple6;\n","import com.jnape.palatable.lambda.adt.hlist.Tuple7;\n","import com.jnape.palatable.lambda.adt.hlist.Tuple8;\n","import com.jnape.palatable.lambda.functions.builtin.fn2.Both;\n","import com.jnape.palatable.lambda.functor.Cartesian;\n","import com.jnape.palatable.lambda.functor.Functor;\n","import com.jnape.palatable.lambda.functor.Profunctor;\n","import com.jnape.palatable.lambda.optics.Lens;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Into.into;\n","import static com.jnape.palatable.lambda.optics.lenses.HMapLens.valueAt;\n","\n","/**\n"," * A lens that focuses on the {@link HList heterogeneous list} of values pointed at by one or more\n"," * {@link TypeSafeKey typesafe keys} that must all exist in the same {@link HMap} to be collectively extracted. Note\n"," * that if any of the keys is absent in the map, the result will be {@link Maybe#nothing()}.\n"," *\n"," * @param <Values> the {@link HList} of values to focus on\n"," * @see TypeSafeKey\n"," */\n","public interface Schema<Values extends HList> extends Lens.Simple<HMap, Maybe<Values>> {\n","\n","    /**\n","     * Add a new {@link TypeSafeKey} to the head of this {@link Schema}.\n","     *\n","     * @param key         the new head key\n","     * @param <A>         the value the head key focuses on\n","     * @param <NewValues> the new {@link HCons} of values\n","     * @return the updated {@link Schema}\n","     */\n","    @SuppressWarnings({\"unchecked\", \"RedundantTypeArguments\"})\n","    default <A, NewValues extends HCons<A, Values>> Schema<NewValues> add(TypeSafeKey<?, A> key) {\n","        Lens<HMap, HMap, Maybe<NewValues>, Maybe<NewValues>> lens = Lens.both(this, valueAt(key))\n","                .<Maybe<NewValues>>mapA(into((maybeValues, maybeA) -> maybeValues\n","                        .zip(maybeA.fmap(a -> values -> (NewValues) values.cons(a)))))\n","                .<Maybe<NewValues>>mapB(Both.both(maybeNewValues -> maybeNewValues.fmap(HCons<A, Values>::tail),\n","                                                  maybeNewValues -> maybeNewValues.fmap(HCons<A, Values>::head)));\n","        return new Schema<NewValues>() {\n","            @Override\n","            public <CoP extends Profunctor<?, ?, ? extends Cartesian<?, ?, ?>>,\n","                    CoF extends Functor<?, ? extends Functor<?, ?>>,\n","                    FB extends Functor<Maybe<NewValues>, ? extends CoF>,\n","                    FT extends Functor<HMap, ? extends CoF>,\n","                    PAFB extends Profunctor<Maybe<NewValues>, FB, ? extends CoP>,\n","                    PSFT extends Profunctor<HMap, FT, ? extends CoP>> PSFT apply(PAFB pafb) {\n","                return lens.apply(pafb);\n","            }\n","        };\n","    }\n","\n","    /**\n","     * Create a {@link Schema} from a single {@link TypeSafeKey}.\n","     *\n","     * @param key the {@link TypeSafeKey}\n","     * @param <A> the type of value the key focuses on\n","     * @return the {@link Schema}\n","     */\n","    static <A> Schema<SingletonHList<A>> schema(TypeSafeKey<?, A> key) {\n","        Lens<HMap, HMap, Maybe<SingletonHList<A>>, Maybe<SingletonHList<A>>> lens = valueAt(key)\n","                .mapA(ma -> ma.fmap(HList::singletonHList))\n","                .mapB(maybeSingletonA -> maybeSingletonA.fmap(HCons::head));\n","        return new Schema<SingletonHList<A>>() {\n","            @Override\n","            public <CoP extends Profunctor<?, ?, ? extends Cartesian<?, ?, ?>>,\n","                    CoF extends Functor<?, ? extends Functor<?, ?>>,\n","                    FB extends Functor<Maybe<SingletonHList<A>>, ? extends CoF>,\n","                    FT extends Functor<HMap, ? extends CoF>,\n","                    PAFB extends Profunctor<Maybe<SingletonHList<A>>, FB, ? extends CoP>,\n","                    PSFT extends Profunctor<HMap, FT, ? extends CoP>> PSFT apply(PAFB pafb) {\n","                return lens.apply(pafb);\n","            }\n","        };\n","    }\n","\n","    /**\n","     * Create a {@link Schema} from two {@link TypeSafeKey TypeSafeKeys}.\n","     *\n","     * @param aKey the first {@link TypeSafeKey}\n","     * @param bKey the second {@link TypeSafeKey}\n","     * @param <A>  the type of value the first key focuses on\n","     * @param <B>  the type of value the second key focuses on\n","     * @return the {@link Schema}\n","     */\n","    static <A, B> Schema<Tuple2<A, B>> schema(TypeSafeKey<?, A> aKey,\n","                                              TypeSafeKey<?, B> bKey) {\n","        return schema(bKey).add(aKey);\n","    }\n","\n","    /**\n","     * Create a {@link Schema} from three {@link TypeSafeKey TypeSafeKeys}.\n","     *\n","     * @param aKey the first {@link TypeSafeKey}\n","     * @param bKey the second {@link TypeSafeKey}\n","     * @param cKey the third {@link TypeSafeKey}\n","     * @param <A>  the type of value the first key focuses on\n","     * @param <B>  the type of value the second key focuses on\n","     * @param <C>  the type of value the third key focuses on\n","     * @return the {@link Schema}\n","     */\n","    static <A, B, C> Schema<Tuple3<A, B, C>> schema(TypeSafeKey<?, A> aKey,\n","                                                    TypeSafeKey<?, B> bKey,\n","                                                    TypeSafeKey<?, C> cKey) {\n","        return schema(bKey, cKey).add(aKey);\n","    }\n","\n","    /**\n","     * Create a {@link Schema} from four {@link TypeSafeKey TypeSafeKeys}.\n","     *\n","     * @param aKey the first {@link TypeSafeKey}\n","     * @param bKey the second {@link TypeSafeKey}\n","     * @param cKey the third {@link TypeSafeKey}\n","     * @param dKey the fourth {@link TypeSafeKey}\n","     * @param <A>  the type of value the first key focuses on\n","     * @param <B>  the type of value the second key focuses on\n","     * @param <C>  the type of value the third key focuses on\n","     * @param <D>  the type of value the fourth key focuses on\n","     * @return the {@link Schema}\n","     */\n","    static <A, B, C, D> Schema<Tuple4<A, B, C, D>> schema(TypeSafeKey<?, A> aKey,\n","                                                          TypeSafeKey<?, B> bKey,\n","                                                          TypeSafeKey<?, C> cKey,\n","                                                          TypeSafeKey<?, D> dKey) {\n","        return schema(bKey, cKey, dKey).add(aKey);\n","    }\n","\n","    /**\n","     * Create a {@link Schema} from five {@link TypeSafeKey TypeSafeKeys}.\n","     *\n","     * @param aKey the first {@link TypeSafeKey}\n","     * @param bKey the second {@link TypeSafeKey}\n","     * @param cKey the third {@link TypeSafeKey}\n","     * @param dKey the fourth {@link TypeSafeKey}\n","     * @param eKey the fifth {@link TypeSafeKey}\n","     * @param <A>  the type of value the first key focuses on\n","     * @param <B>  the type of value the second key focuses on\n","     * @param <C>  the type of value the third key focuses on\n","     * @param <D>  the type of value the fourth key focuses on\n","     * @param <E>  the type of value the fifth key focuses on\n","     * @return the {@link Schema}\n","     */\n","    static <A, B, C, D, E> Schema<Tuple5<A, B, C, D, E>> schema(TypeSafeKey<?, A> aKey,\n","                                                                TypeSafeKey<?, B> bKey,\n","                                                                TypeSafeKey<?, C> cKey,\n","                                                                TypeSafeKey<?, D> dKey,\n","                                                                TypeSafeKey<?, E> eKey) {\n","        return schema(bKey, cKey, dKey, eKey).add(aKey);\n","    }\n","\n","    /**\n","     * Create a {@link Schema} from six {@link TypeSafeKey TypeSafeKeys}.\n","     *\n","     * @param aKey the first {@link TypeSafeKey}\n","     * @param bKey the second {@link TypeSafeKey}\n","     * @param cKey the third {@link TypeSafeKey}\n","     * @param dKey the fourth {@link TypeSafeKey}\n","     * @param eKey the fifth {@link TypeSafeKey}\n","     * @param fKey the sixth {@link TypeSafeKey}\n","     * @param <A>  the type of value the first key focuses on\n","     * @param <B>  the type of value the second key focuses on\n","     * @param <C>  the type of value the third key focuses on\n","     * @param <D>  the type of value the fourth key focuses on\n","     * @param <E>  the type of value the fifth key focuses on\n","     * @param <F>  the type of value the sixth key focuses on\n","     * @return the {@link Schema}\n","     */\n","    static <A, B, C, D, E, F> Schema<Tuple6<A, B, C, D, E, F>> schema(TypeSafeKey<?, A> aKey,\n","                                                                      TypeSafeKey<?, B> bKey,\n","                                                                      TypeSafeKey<?, C> cKey,\n","                                                                      TypeSafeKey<?, D> dKey,\n","                                                                      TypeSafeKey<?, E> eKey,\n","                                                                      TypeSafeKey<?, F> fKey) {\n","        return schema(bKey, cKey, dKey, eKey, fKey).add(aKey);\n","    }\n","\n","    /**\n","     * Create a {@link Schema} from seven {@link TypeSafeKey TypeSafeKeys}.\n","     *\n","     * @param aKey the first {@link TypeSafeKey}\n","     * @param bKey the second {@link TypeSafeKey}\n","     * @param cKey the third {@link TypeSafeKey}\n","     * @param dKey the fourth {@link TypeSafeKey}\n","     * @param eKey the fifth {@link TypeSafeKey}\n","     * @param fKey the sixth {@link TypeSafeKey}\n","     * @param gKey the seventh {@link TypeSafeKey}\n","     * @param <A>  the type of value the first key focuses on\n","     * @param <B>  the type of value the second key focuses on\n","     * @param <C>  the type of value the third key focuses on\n","     * @param <D>  the type of value the fourth key focuses on\n","     * @param <E>  the type of value the fifth key focuses on\n","     * @param <F>  the type of value the sixth key focuses on\n","     * @param <G>  the type of value the seventh key focuses on\n","     * @return the {@link Schema}\n","     */\n","    static <A, B, C, D, E, F, G> Schema<Tuple7<A, B, C, D, E, F, G>> schema(TypeSafeKey<?, A> aKey,\n","                                                                            TypeSafeKey<?, B> bKey,\n","                                                                            TypeSafeKey<?, C> cKey,\n","                                                                            TypeSafeKey<?, D> dKey,\n","                                                                            TypeSafeKey<?, E> eKey,\n","                                                                            TypeSafeKey<?, F> fKey,\n","                                                                            TypeSafeKey<?, G> gKey) {\n","        return schema(bKey, cKey, dKey, eKey, fKey, gKey).add(aKey);\n","    }\n","\n","    /**\n","     * Create a {@link Schema} from eight {@link TypeSafeKey TypeSafeKeys}.\n","     *\n","     * @param aKey the first {@link TypeSafeKey}\n","     * @param bKey the second {@link TypeSafeKey}\n","     * @param cKey the third {@link TypeSafeKey}\n","     * @param dKey the fourth {@link TypeSafeKey}\n","     * @param eKey the fifth {@link TypeSafeKey}\n","     * @param fKey the sixth {@link TypeSafeKey}\n","     * @param gKey the seventh {@link TypeSafeKey}\n","     * @param hKey the eighth {@link TypeSafeKey}\n","     * @param <A>  the type of value the first key focuses on\n","     * @param <B>  the type of value the second key focuses on\n","     * @param <C>  the type of value the third key focuses on\n","     * @param <D>  the type of value the fourth key focuses on\n","     * @param <E>  the type of value the fifth key focuses on\n","     * @param <F>  the type of value the sixth key focuses on\n","     * @param <G>  the type of value the seventh key focuses on\n","     * @param <H>  the type of value the eighth key focuses on\n","     * @return the {@link Schema}\n","     */\n","    static <A, B, C, D, E, F, G, H> Schema<Tuple8<A, B, C, D, E, F, G, H>> schema(TypeSafeKey<?, A> aKey,\n","                                                                                  TypeSafeKey<?, B> bKey,\n","                                                                                  TypeSafeKey<?, C> cKey,\n","                                                                                  TypeSafeKey<?, D> dKey,\n","                                                                                  TypeSafeKey<?, E> eKey,\n","                                                                                  TypeSafeKey<?, F> fKey,\n","                                                                                  TypeSafeKey<?, G> gKey,\n","                                                                                  TypeSafeKey<?, H> hKey) {\n","        return schema(bKey, cKey, dKey, eKey, fKey, gKey, hKey).add(aKey);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.adt.hmap;\n","\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.adt.hmap.HMap.emptyHMap;\n","import static com.jnape.palatable.lambda.adt.hmap.HMap.hMap;\n","import static com.jnape.palatable.lambda.adt.hmap.Schema.schema;\n","import static com.jnape.palatable.lambda.adt.hmap.TypeSafeKey.typeSafeKey;\n","import static com.jnape.palatable.lambda.optics.functions.View.view;\n","import static java.util.Arrays.asList;\n","import static org.junit.Assert.assertEquals;\n","import static testsupport.assertion.LensAssert.assertLensLawfulness;\n","\n","public class SchemaTest {\n","\n","    @Test\n","    public void extractsValuesAtKeysFromMap() {\n","        TypeSafeKey.Simple<Byte>      byteKey    = typeSafeKey();\n","        TypeSafeKey.Simple<Short>     shortKey   = typeSafeKey();\n","        TypeSafeKey.Simple<Integer>   intKey     = typeSafeKey();\n","        TypeSafeKey.Simple<Long>      longKey    = typeSafeKey();\n","        TypeSafeKey.Simple<Float>     floatKey   = typeSafeKey();\n","        TypeSafeKey.Simple<Double>    doubleKey  = typeSafeKey();\n","        TypeSafeKey.Simple<Character> charKey    = typeSafeKey();\n","        TypeSafeKey.Simple<Boolean>   booleanKey = typeSafeKey();\n","\n","        HMap m = hMap(byteKey, (byte) 1,\n","                      shortKey, (short) 2,\n","                      intKey, 3,\n","                      longKey, 4L,\n","                      floatKey, 5F,\n","                      doubleKey, 6D,\n","                      charKey, '7',\n","                      booleanKey, true);\n","\n","        assertLensLawfulness(schema(byteKey, shortKey, intKey, longKey, floatKey, doubleKey, charKey, booleanKey),\n","                             asList(emptyHMap(),\n","                                    m),\n","                             asList(nothing(),\n","                                    just(tuple((byte) 1, (short) 2, 3, 4L, 5F, 6D, '7', true))));\n","    }\n","\n","    @Test\n","    public void extractsNothingIfAnyKeysMissing() {\n","        assertEquals(nothing(), view(schema(typeSafeKey()), emptyHMap()));\n","    }\n","}"],"method_lines_dic":{"Schema::::add(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>)":[41,59],"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>)":[68,83],"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>)":[94,97],"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>)":[110,114],"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>)":[129,134],"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, E>)":[151,157],"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, E>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, F>)":[176,183],"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, E>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, F>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, G>)":[204,212],"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, E>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, F>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, G>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, H>)":[235,244]},"test_method_lines_dic":{"SchemaTest::::extractsValuesAtKeysFromMap()":[19,44],"SchemaTest::::extractsNothingIfAnyKeysMissing()":[46,49]},"reverse_method_lines_dic":{"41":"Schema::::add(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>)","42":"Schema::::add(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>)","43":"Schema::::add(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>)","44":"Schema::::add(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>)","45":"Schema::::add(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>)","46":"Schema::::add(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>)","47":"Schema::::add(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>)","48":"Schema::::add(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>)","49":"Schema::::add(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>)","50":"Schema::::add(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>)","51":"Schema::::add(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>)","52":"Schema::::add(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>)","53":"Schema::::add(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>)","54":"Schema::::add(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>)","55":"Schema::::add(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>)","56":"Schema::::add(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>)","57":"Schema::::add(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>)","58":"Schema::::add(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>)","59":"Schema::::add(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>)","68":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>)","69":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>)","70":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>)","71":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>)","72":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>)","73":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>)","74":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>)","75":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>)","76":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>)","77":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>)","78":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>)","79":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>)","80":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>)","81":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>)","82":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>)","83":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>)","94":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>)","95":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>)","96":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>)","97":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>)","110":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>)","111":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>)","112":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>)","113":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>)","114":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>)","129":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>)","130":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>)","131":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>)","132":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>)","133":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>)","134":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>)","151":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, E>)","152":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, E>)","153":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, E>)","154":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, E>)","155":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, E>)","156":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, E>)","157":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, E>)","176":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, E>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, F>)","177":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, E>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, F>)","178":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, E>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, F>)","179":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, E>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, F>)","180":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, E>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, F>)","181":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, E>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, F>)","182":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, E>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, F>)","183":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, E>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, F>)","204":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, E>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, F>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, G>)","205":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, E>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, F>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, G>)","206":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, E>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, F>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, G>)","207":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, E>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, F>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, G>)","208":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, E>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, F>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, G>)","209":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, E>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, F>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, G>)","210":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, E>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, F>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, G>)","211":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, E>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, F>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, G>)","212":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, E>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, F>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, G>)","235":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, E>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, F>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, G>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, H>)","236":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, E>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, F>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, G>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, H>)","237":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, E>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, F>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, G>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, H>)","238":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, E>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, F>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, G>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, H>)","239":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, E>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, F>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, G>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, H>)","240":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, E>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, F>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, G>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, H>)","241":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, E>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, F>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, G>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, H>)","242":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, E>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, F>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, G>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, H>)","243":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, E>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, F>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, G>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, H>)","244":"Schema::::schema(com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, A>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, B>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, C>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, D>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, E>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, F>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, G>,com.jnape.palatable.lambda.adt.hmap.TypeSafeKey<?, H>)"},"test_reverse_method_lines_dic":{"19":"SchemaTest::::extractsValuesAtKeysFromMap()","20":"SchemaTest::::extractsValuesAtKeysFromMap()","21":"SchemaTest::::extractsValuesAtKeysFromMap()","22":"SchemaTest::::extractsValuesAtKeysFromMap()","23":"SchemaTest::::extractsValuesAtKeysFromMap()","24":"SchemaTest::::extractsValuesAtKeysFromMap()","25":"SchemaTest::::extractsValuesAtKeysFromMap()","26":"SchemaTest::::extractsValuesAtKeysFromMap()","27":"SchemaTest::::extractsValuesAtKeysFromMap()","28":"SchemaTest::::extractsValuesAtKeysFromMap()","29":"SchemaTest::::extractsValuesAtKeysFromMap()","30":"SchemaTest::::extractsValuesAtKeysFromMap()","31":"SchemaTest::::extractsValuesAtKeysFromMap()","32":"SchemaTest::::extractsValuesAtKeysFromMap()","33":"SchemaTest::::extractsValuesAtKeysFromMap()","34":"SchemaTest::::extractsValuesAtKeysFromMap()","35":"SchemaTest::::extractsValuesAtKeysFromMap()","36":"SchemaTest::::extractsValuesAtKeysFromMap()","37":"SchemaTest::::extractsValuesAtKeysFromMap()","38":"SchemaTest::::extractsValuesAtKeysFromMap()","39":"SchemaTest::::extractsValuesAtKeysFromMap()","40":"SchemaTest::::extractsValuesAtKeysFromMap()","41":"SchemaTest::::extractsValuesAtKeysFromMap()","42":"SchemaTest::::extractsValuesAtKeysFromMap()","43":"SchemaTest::::extractsValuesAtKeysFromMap()","44":"SchemaTest::::extractsValuesAtKeysFromMap()","46":"SchemaTest::::extractsNothingIfAnyKeysMissing()","47":"SchemaTest::::extractsNothingIfAnyKeysMissing()","48":"SchemaTest::::extractsNothingIfAnyKeysMissing()","49":"SchemaTest::::extractsNothingIfAnyKeysMissing()"},"tests":[{"test_lines":[19,44],"covered_lines":[43,44,45,46,47,48,56,69,70,71,72,80,96,113,133,156,182,211,243]},{"test_lines":[46,49],"covered_lines":[69,70,71,72,80]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/adt/coproduct/CoProduct5.java":{"class_content":["package com.jnape.palatable.lambda.adt.coproduct;\n","\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.adt.choice.Choice4;\n","import com.jnape.palatable.lambda.adt.product.Product5;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.Fn1.fn1;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","\n","/**\n"," * A generalization of the coproduct of five types.\n"," *\n"," * @param <A>   the first possible type\n"," * @param <B>   the second possible type\n"," * @param <C>   the third possible type\n"," * @param <D>   the fourth possible type\n"," * @param <E>   the fifth possible type\n"," * @param <CP5> the recursive type of this coproduct (used for embedding)\n"," * @see CoProduct2\n"," */\n","@FunctionalInterface\n","public interface CoProduct5<A, B, C, D, E, CP5 extends CoProduct5<A, B, C, D, E, ?>> {\n","\n","    /**\n","     * Type-safe convergence requiring a match against all potential types.\n","     *\n","     * @param <R> result type\n","     * @param aFn morphism <code>A -&gt; R</code>\n","     * @param bFn morphism <code>B -&gt; R</code>\n","     * @param cFn morphism <code>C -&gt; R</code>\n","     * @param dFn morphism <code>D -&gt; R</code>\n","     * @param eFn morphism <code>E -&gt; R</code>\n","     * @return the result of applying the appropriate morphism from whichever type is represented by this coproduct to R\n","     * @see CoProduct2#match(Fn1, Fn1)\n","     */\n","    <R> R match(Fn1<? super A, ? extends R> aFn,\n","                Fn1<? super B, ? extends R> bFn,\n","                Fn1<? super C, ? extends R> cFn,\n","                Fn1<? super D, ? extends R> dFn,\n","                Fn1<? super E, ? extends R> eFn);\n","\n","    /**\n","     * Diverge this coproduct by introducing another possible type that it could represent.\n","     *\n","     * @param <F> the additional possible type of this coproduct\n","     * @return a Coproduct6&lt;A, B, C, D, E, F&gt;\n","     * @see CoProduct2#diverge()\n","     */\n","    default <F> CoProduct6<A, B, C, D, E, F, ? extends CoProduct6<A, B, C, D, E, F, ?>> diverge() {\n","        return new CoProduct6<A, B, C, D, E, F, CoProduct6<A, B, C, D, E, F, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                               Fn1<? super C, ? extends R> cFn, Fn1<? super D, ? extends R> dFn,\n","                               Fn1<? super E, ? extends R> eFn, Fn1<? super F, ? extends R> fFn) {\n","                return CoProduct5.this.match(aFn, bFn, cFn, dFn, eFn);\n","            }\n","        };\n","    }\n","\n","    /**\n","     * Converge this coproduct down to a lower order coproduct by mapping the last possible type into an earlier\n","     * possible type.\n","     *\n","     * @param convergenceFn morphism <code>E -&gt; {@link CoProduct4}&lt;A, B, C, D&gt;</code>\n","     * @return a {@link CoProduct4}&lt;A, B, C, D&gt;\n","     */\n","    default CoProduct4<A, B, C, D, ? extends CoProduct4<A, B, C, D, ?>> converge(\n","            Fn1<? super E, ? extends CoProduct4<A, B, C, D, ?>> convergenceFn) {\n","        return match(Choice4::a, Choice4::b, Choice4::c, Choice4::d, convergenceFn::apply);\n","    }\n","\n","    /**\n","     * Project this coproduct onto a product.\n","     *\n","     * @return a product of the coproduct projection\n","     * @see CoProduct2#project()\n","     */\n","    default Product5<Maybe<A>, Maybe<B>, Maybe<C>, Maybe<D>, Maybe<E>> project() {\n","        return match(a -> tuple(just(a), nothing(), nothing(), nothing(), nothing()),\n","                     b -> tuple(nothing(), just(b), nothing(), nothing(), nothing()),\n","                     c -> tuple(nothing(), nothing(), just(c), nothing(), nothing()),\n","                     d -> tuple(nothing(), nothing(), nothing(), just(d), nothing()),\n","                     e -> tuple(nothing(), nothing(), nothing(), nothing(), just(e)));\n","    }\n","\n","    /**\n","     * Convenience method for projecting this coproduct onto a product and then extracting the first slot value.\n","     *\n","     * @return an optional value representing the projection of the \"a\" type index\n","     */\n","    default Maybe<A> projectA() {\n","        return project()._1();\n","    }\n","\n","    /**\n","     * Convenience method for projecting this coproduct onto a product and then extracting the second slot value.\n","     *\n","     * @return an optional value representing the projection of the \"b\" type index\n","     */\n","    default Maybe<B> projectB() {\n","        return project()._2();\n","    }\n","\n","    /**\n","     * Convenience method for projecting this coproduct onto a product and then extracting the third slot value.\n","     *\n","     * @return an optional value representing the projection of the \"c\" type index\n","     */\n","    default Maybe<C> projectC() {\n","        return project()._3();\n","    }\n","\n","    /**\n","     * Convenience method for projecting this coproduct onto a product and then extracting the fourth slot value.\n","     *\n","     * @return an optional value representing the projection of the \"d\" type index\n","     */\n","    default Maybe<D> projectD() {\n","        return project()._4();\n","    }\n","\n","    /**\n","     * Convenience method for projecting this coproduct onto a product and then extracting the fifth slot value.\n","     *\n","     * @return an optional value representing the projection of the \"e\" type index\n","     */\n","    default Maybe<E> projectE() {\n","        return project()._5();\n","    }\n","\n","    /**\n","     * Embed this coproduct inside another value; that is, given morphisms from this coproduct to <code>R</code>, apply\n","     * the appropriate morphism to this coproduct as a whole. Like {@link CoProduct5#match}, but without unwrapping the\n","     * value.\n","     *\n","     * @param <R> result type\n","     * @param aFn morphism <code>A v B v C v D v E -&gt; R</code>, applied in the <code>A</code> case\n","     * @param bFn morphism <code>A v B v C v D v E -&gt; R</code>, applied in the <code>B</code> case\n","     * @param cFn morphism <code>A v B v C v D v E -&gt; R</code>, applied in the <code>C</code> case\n","     * @param dFn morphism <code>A v B v C v D v E -&gt; R</code>, applied in the <code>D</code> case\n","     * @param eFn morphism <code>A v B v C v D v E -&gt; R</code>, applied in the <code>E</code> case\n","     * @return the result of applying the appropriate morphism to this coproduct\n","     */\n","    @SuppressWarnings(\"unchecked\")\n","    default <R> R embed(Fn1<? super CP5, ? extends R> aFn,\n","                        Fn1<? super CP5, ? extends R> bFn,\n","                        Fn1<? super CP5, ? extends R> cFn,\n","                        Fn1<? super CP5, ? extends R> dFn,\n","                        Fn1<? super CP5, ? extends R> eFn) {\n","        return this.<Fn1<CP5, R>>match(constantly(fn1(aFn)),\n","                                       constantly(fn1(bFn)),\n","                                       constantly(fn1(cFn)),\n","                                       constantly(fn1(dFn)),\n","                                       constantly(fn1(eFn)))\n","                .apply((CP5) this);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.adt.coproduct;\n","\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.adt.choice.Choice4;\n","import com.jnape.palatable.lambda.adt.choice.Choice5;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import org.junit.Before;\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Id.id;\n","import static org.junit.Assert.assertEquals;\n","\n","public class CoProduct5Test {\n","\n","    private CoProduct5<Integer, String, Boolean, Double, Character, ?> a;\n","    private CoProduct5<Integer, String, Boolean, Double, Character, ?> b;\n","    private CoProduct5<Integer, String, Boolean, Double, Character, ?> c;\n","    private CoProduct5<Integer, String, Boolean, Double, Character, ?> d;\n","    private CoProduct5<Integer, String, Boolean, Double, Character, ?> e;\n","\n","    @Before\n","    public void setUp() {\n","        a = new CoProduct5<Integer, String, Boolean, Double, Character, CoProduct5<Integer, String, Boolean, Double, Character, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super Integer, ? extends R> aFn, Fn1<? super String, ? extends R> bFn,\n","                               Fn1<? super Boolean, ? extends R> cFn, Fn1<? super Double, ? extends R> dFn,\n","                               Fn1<? super Character, ? extends R> eFn) {\n","                return aFn.apply(1);\n","            }\n","        };\n","        b = new CoProduct5<Integer, String, Boolean, Double, Character, CoProduct5<Integer, String, Boolean, Double, Character, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super Integer, ? extends R> aFn, Fn1<? super String, ? extends R> bFn,\n","                               Fn1<? super Boolean, ? extends R> cFn, Fn1<? super Double, ? extends R> dFn,\n","                               Fn1<? super Character, ? extends R> eFn) {\n","                return bFn.apply(\"two\");\n","            }\n","        };\n","        c = new CoProduct5<Integer, String, Boolean, Double, Character, CoProduct5<Integer, String, Boolean, Double, Character, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super Integer, ? extends R> aFn, Fn1<? super String, ? extends R> bFn,\n","                               Fn1<? super Boolean, ? extends R> cFn, Fn1<? super Double, ? extends R> dFn,\n","                               Fn1<? super Character, ? extends R> eFn) {\n","                return cFn.apply(true);\n","            }\n","        };\n","        d = new CoProduct5<Integer, String, Boolean, Double, Character, CoProduct5<Integer, String, Boolean, Double, Character, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super Integer, ? extends R> aFn, Fn1<? super String, ? extends R> bFn,\n","                               Fn1<? super Boolean, ? extends R> cFn, Fn1<? super Double, ? extends R> dFn,\n","                               Fn1<? super Character, ? extends R> eFn) {\n","                return dFn.apply(4d);\n","            }\n","        };\n","        e = new CoProduct5<Integer, String, Boolean, Double, Character, CoProduct5<Integer, String, Boolean, Double, Character, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super Integer, ? extends R> aFn, Fn1<? super String, ? extends R> bFn,\n","                               Fn1<? super Boolean, ? extends R> cFn, Fn1<? super Double, ? extends R> dFn,\n","                               Fn1<? super Character, ? extends R> eFn) {\n","                return eFn.apply('z');\n","            }\n","        };\n","    }\n","\n","    @Test\n","    public void match() {\n","        assertEquals(1, a.match(id(), id(), id(), id(), id()));\n","        assertEquals(\"two\", b.match(id(), id(), id(), id(), id()));\n","        assertEquals(true, c.match(id(), id(), id(), id(), id()));\n","        assertEquals(4D, d.match(id(), id(), id(), id(), id()));\n","        assertEquals('z', e.match(id(), id(), id(), id(), id()));\n","    }\n","\n","    @Test\n","    public void diverge() {\n","        assertEquals(1, a.diverge().match(id(), id(), id(), id(), id(), id()));\n","        assertEquals(\"two\", b.diverge().match(id(), id(), id(), id(), id(), id()));\n","        assertEquals(true, c.diverge().match(id(), id(), id(), id(), id(), id()));\n","        assertEquals(4D, d.diverge().match(id(), id(), id(), id(), id(), id()));\n","        assertEquals('z', e.diverge().match(id(), id(), id(), id(), id(), id()));\n","    }\n","\n","    @Test\n","    public void converge() {\n","        Fn1<Character, CoProduct4<Integer, String, Boolean, Double, ?>> convergenceFn = x -> x.equals('a')\n","                                                                                             ? Choice4.a(1)\n","                                                                                             : x.equals('b')\n","                                                                                               ? Choice4.b(\"b\")\n","                                                                                               : x.equals('c')\n","                                                                                                 ? Choice4.c(false)\n","                                                                                                 : Choice4.d(1D);\n","        assertEquals(1, a.converge(convergenceFn).match(id(), id(), id(), id()));\n","        assertEquals(\"two\", b.converge(convergenceFn).match(id(), id(), id(), id()));\n","        assertEquals(true, c.converge(convergenceFn).match(id(), id(), id(), id()));\n","        assertEquals(4D, d.converge(convergenceFn).match(id(), id(), id(), id()));\n","        assertEquals(1, Choice5.<Integer, String, Boolean, Double, Character>e('a').converge(convergenceFn).match(id(), id(), id(), id()));\n","        assertEquals(\"b\", Choice5.<Integer, String, Boolean, Double, Character>e('b').converge(convergenceFn).match(id(), id(), id(), id()));\n","        assertEquals(false, Choice5.<Integer, String, Boolean, Double, Character>e('c').converge(convergenceFn).match(id(), id(), id(), id()));\n","        assertEquals(1d, Choice5.<Integer, String, Boolean, Double, Character>e('d').converge(convergenceFn).match(id(), id(), id(), id()));\n","    }\n","\n","    @Test\n","    public void projections() {\n","        assertEquals(tuple(just(1), nothing(), nothing(), nothing(), nothing()), a.project());\n","        assertEquals(tuple(nothing(), just(\"two\"), nothing(), nothing(), nothing()), b.project());\n","        assertEquals(tuple(nothing(), nothing(), just(true), nothing(), nothing()), c.project());\n","        assertEquals(tuple(nothing(), nothing(), nothing(), just(4D), nothing()), d.project());\n","        assertEquals(tuple(nothing(), nothing(), nothing(), nothing(), just('z')), e.project());\n","\n","        assertEquals(tuple(a.projectA(), a.projectB(), a.projectC(), a.projectD(), a.projectE()), a.project());\n","        assertEquals(tuple(b.projectA(), b.projectB(), b.projectC(), b.projectD(), b.projectE()), b.project());\n","        assertEquals(tuple(c.projectA(), c.projectB(), c.projectC(), c.projectD(), c.projectE()), c.project());\n","        assertEquals(tuple(d.projectA(), d.projectB(), d.projectC(), d.projectD(), d.projectE()), d.project());\n","        assertEquals(tuple(e.projectA(), e.projectB(), e.projectC(), e.projectD(), e.projectE()), e.project());\n","    }\n","\n","    @Test\n","    public void embed() {\n","        assertEquals(just(a), a.embed(Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just));\n","        assertEquals(just(b), b.embed(Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just));\n","        assertEquals(just(c), c.embed(Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just));\n","        assertEquals(just(d), d.embed(Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just));\n","        assertEquals(just(e), e.embed(Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just));\n","    }\n","}"],"method_lines_dic":{"CoProduct5::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)":[40,44],"CoProduct5::::diverge()":[53,62],"CoProduct5::::converge(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct4<A, B, C, D, ?>>)":[71,74],"CoProduct5::::project()":[82,88],"CoProduct5::::projectA()":[95,97],"CoProduct5::::projectB()":[104,106],"CoProduct5::::projectC()":[113,115],"CoProduct5::::projectD()":[122,124],"CoProduct5::::projectE()":[131,133],"CoProduct5::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>)":[148,160]},"test_method_lines_dic":{"CoProduct5Test::::setUp()":[24,66],"CoProduct5Test::::match()":[68,75],"CoProduct5Test::::diverge()":[77,84],"CoProduct5Test::::converge()":[86,103],"CoProduct5Test::::projections()":[105,118],"CoProduct5Test::::embed()":[120,127]},"reverse_method_lines_dic":{"40":"CoProduct5::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)","41":"CoProduct5::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)","42":"CoProduct5::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)","43":"CoProduct5::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)","44":"CoProduct5::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>)","53":"CoProduct5::::diverge()","54":"CoProduct5::::diverge()","55":"CoProduct5::::diverge()","56":"CoProduct5::::diverge()","57":"CoProduct5::::diverge()","58":"CoProduct5::::diverge()","59":"CoProduct5::::diverge()","60":"CoProduct5::::diverge()","61":"CoProduct5::::diverge()","62":"CoProduct5::::diverge()","71":"CoProduct5::::converge(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct4<A, B, C, D, ?>>)","72":"CoProduct5::::converge(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct4<A, B, C, D, ?>>)","73":"CoProduct5::::converge(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct4<A, B, C, D, ?>>)","74":"CoProduct5::::converge(com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct4<A, B, C, D, ?>>)","82":"CoProduct5::::project()","83":"CoProduct5::::project()","84":"CoProduct5::::project()","85":"CoProduct5::::project()","86":"CoProduct5::::project()","87":"CoProduct5::::project()","88":"CoProduct5::::project()","95":"CoProduct5::::projectA()","96":"CoProduct5::::projectA()","97":"CoProduct5::::projectA()","104":"CoProduct5::::projectB()","105":"CoProduct5::::projectB()","106":"CoProduct5::::projectB()","113":"CoProduct5::::projectC()","114":"CoProduct5::::projectC()","115":"CoProduct5::::projectC()","122":"CoProduct5::::projectD()","123":"CoProduct5::::projectD()","124":"CoProduct5::::projectD()","131":"CoProduct5::::projectE()","132":"CoProduct5::::projectE()","133":"CoProduct5::::projectE()","148":"CoProduct5::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>)","149":"CoProduct5::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>)","150":"CoProduct5::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>)","151":"CoProduct5::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>)","152":"CoProduct5::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>)","153":"CoProduct5::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>)","154":"CoProduct5::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>)","155":"CoProduct5::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>)","156":"CoProduct5::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>)","157":"CoProduct5::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>)","158":"CoProduct5::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>)","159":"CoProduct5::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>)","160":"CoProduct5::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP5, ? extends R>)"},"test_reverse_method_lines_dic":{"24":"CoProduct5Test::::setUp()","25":"CoProduct5Test::::setUp()","26":"CoProduct5Test::::setUp()","27":"CoProduct5Test::::setUp()","28":"CoProduct5Test::::setUp()","29":"CoProduct5Test::::setUp()","30":"CoProduct5Test::::setUp()","31":"CoProduct5Test::::setUp()","32":"CoProduct5Test::::setUp()","33":"CoProduct5Test::::setUp()","34":"CoProduct5Test::::setUp()","35":"CoProduct5Test::::setUp()","36":"CoProduct5Test::::setUp()","37":"CoProduct5Test::::setUp()","38":"CoProduct5Test::::setUp()","39":"CoProduct5Test::::setUp()","40":"CoProduct5Test::::setUp()","41":"CoProduct5Test::::setUp()","42":"CoProduct5Test::::setUp()","43":"CoProduct5Test::::setUp()","44":"CoProduct5Test::::setUp()","45":"CoProduct5Test::::setUp()","46":"CoProduct5Test::::setUp()","47":"CoProduct5Test::::setUp()","48":"CoProduct5Test::::setUp()","49":"CoProduct5Test::::setUp()","50":"CoProduct5Test::::setUp()","51":"CoProduct5Test::::setUp()","52":"CoProduct5Test::::setUp()","53":"CoProduct5Test::::setUp()","54":"CoProduct5Test::::setUp()","55":"CoProduct5Test::::setUp()","56":"CoProduct5Test::::setUp()","57":"CoProduct5Test::::setUp()","58":"CoProduct5Test::::setUp()","59":"CoProduct5Test::::setUp()","60":"CoProduct5Test::::setUp()","61":"CoProduct5Test::::setUp()","62":"CoProduct5Test::::setUp()","63":"CoProduct5Test::::setUp()","64":"CoProduct5Test::::setUp()","65":"CoProduct5Test::::setUp()","66":"CoProduct5Test::::setUp()","68":"CoProduct5Test::::match()","69":"CoProduct5Test::::match()","70":"CoProduct5Test::::match()","71":"CoProduct5Test::::match()","72":"CoProduct5Test::::match()","73":"CoProduct5Test::::match()","74":"CoProduct5Test::::match()","75":"CoProduct5Test::::match()","77":"CoProduct5Test::::diverge()","78":"CoProduct5Test::::diverge()","79":"CoProduct5Test::::diverge()","80":"CoProduct5Test::::diverge()","81":"CoProduct5Test::::diverge()","82":"CoProduct5Test::::diverge()","83":"CoProduct5Test::::diverge()","84":"CoProduct5Test::::diverge()","86":"CoProduct5Test::::converge()","87":"CoProduct5Test::::converge()","88":"CoProduct5Test::::converge()","89":"CoProduct5Test::::converge()","90":"CoProduct5Test::::converge()","91":"CoProduct5Test::::converge()","92":"CoProduct5Test::::converge()","93":"CoProduct5Test::::converge()","94":"CoProduct5Test::::converge()","95":"CoProduct5Test::::converge()","96":"CoProduct5Test::::converge()","97":"CoProduct5Test::::converge()","98":"CoProduct5Test::::converge()","99":"CoProduct5Test::::converge()","100":"CoProduct5Test::::converge()","101":"CoProduct5Test::::converge()","102":"CoProduct5Test::::converge()","103":"CoProduct5Test::::converge()","105":"CoProduct5Test::::projections()","106":"CoProduct5Test::::projections()","107":"CoProduct5Test::::projections()","108":"CoProduct5Test::::projections()","109":"CoProduct5Test::::projections()","110":"CoProduct5Test::::projections()","111":"CoProduct5Test::::projections()","112":"CoProduct5Test::::projections()","113":"CoProduct5Test::::projections()","114":"CoProduct5Test::::projections()","115":"CoProduct5Test::::projections()","116":"CoProduct5Test::::projections()","117":"CoProduct5Test::::projections()","118":"CoProduct5Test::::projections()","120":"CoProduct5Test::::embed()","121":"CoProduct5Test::::embed()","122":"CoProduct5Test::::embed()","123":"CoProduct5Test::::embed()","124":"CoProduct5Test::::embed()","125":"CoProduct5Test::::embed()","126":"CoProduct5Test::::embed()","127":"CoProduct5Test::::embed()"},"tests":[{"test_lines":[77,84],"covered_lines":[54,59]},{"test_lines":[86,103],"covered_lines":[73]},{"test_lines":[105,118],"covered_lines":[83,84,85,86,87,96,105,114,123,132]},{"test_lines":[120,127],"covered_lines":[154,155,156,157,158,159]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/adt/coproduct/CoProduct2.java":{"class_content":["package com.jnape.palatable.lambda.adt.coproduct;\n","\n","import com.jnape.palatable.lambda.adt.Either;\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.adt.choice.Choice2;\n","import com.jnape.palatable.lambda.adt.product.Product2;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.Fn1.fn1;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","\n","/**\n"," * A generalization of the coproduct of two types. Coproducts represent the disjoint union of two or more distinct\n"," * types, and provides an interface for specifying morphisms from those types to a common result type.\n"," * <p>\n"," * Learn more about <a href=\"https://en.wikipedia.org/wiki/Coproduct\">Coproducts</a>.\n"," *\n"," * @param <A>   the first possible type\n"," * @param <B>   the second possible type\n"," * @param <CP2> the recursive type of this coproduct (used for embedding)\n"," * @see Choice2\n"," * @see Either\n"," */\n","@FunctionalInterface\n","public interface CoProduct2<A, B, CP2 extends CoProduct2<A, B, ?>> {\n","\n","    /**\n","     * Type-safe convergence requiring a match against all potential types.\n","     *\n","     * @param <R> result type\n","     * @param aFn morphism <code>A -&gt; R</code>\n","     * @param bFn morphism <code>B -&gt; R</code>\n","     * @return the result of applying the appropriate morphism to this coproduct's unwrapped value\n","     */\n","    <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn);\n","\n","    /**\n","     * Diverge this coproduct by introducing another possible type that it could represent. As no morphisms can be\n","     * provided mapping current types to the new type, this operation merely acts as a convenience method to allow the\n","     * use of a more convergent coproduct with a more divergent one; that is, if a <code>CoProduct3&lt;String, Integer,\n","     * Boolean&gt;</code> is expected, a <code>CoProduct2&lt;String, Integer&gt;</code> should suffice.\n","     * <p>\n","     * Generally, we use inheritance to make this a non-issue; however, with coproducts of differing magnitudes, we\n","     * cannot guarantee variance compatibility in one direction conveniently at construction time, and in the other\n","     * direction, at all. A {@link CoProduct2} could not be a {@link CoProduct3} without specifying all type parameters\n","     * that are possible for a {@link CoProduct3} - more specifically, the third possible type - which is not\n","     * necessarily known at construction time, or even useful if never used in the context of a {@link CoProduct3}. The\n","     * inverse inheritance relationship - {@link CoProduct3} &lt; {@link CoProduct2} - is inherently unsound, as a\n","     * {@link CoProduct3} cannot correctly implement {@link CoProduct2#match}, given that the third type <code>C</code>\n","     * is always possible.\n","     * <p>\n","     * For this reason, there is a <code>diverge</code> method supported between all <code>CoProduct</code> types of\n","     * single magnitude difference.\n","     *\n","     * @param <C> the additional possible type of this coproduct\n","     * @return a {@link CoProduct3}&lt;A, B, C&gt;\n","     */\n","    default <C> CoProduct3<A, B, C, ? extends CoProduct3<A, B, C, ?>> diverge() {\n","        return new CoProduct3<A, B, C, CoProduct3<A, B, C, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                               Fn1<? super C, ? extends R> cFn) {\n","                return CoProduct2.this.match(aFn, bFn);\n","            }\n","        };\n","    }\n","\n","    /**\n","     * Project this coproduct onto a product, such that the index in the product that corresponds to this coproduct's\n","     * value is present, while the other indices are absent.\n","     *\n","     * @return a product of the coproduct projection\n","     */\n","    default Product2<Maybe<A>, Maybe<B>> project() {\n","        return match(a -> tuple(just(a), nothing()),\n","                     b -> tuple(nothing(), just(b)));\n","    }\n","\n","    /**\n","     * Convenience method for projecting this coproduct onto a product and then extracting the first slot value.\n","     *\n","     * @return an optional value representing the projection of the \"a\" type index\n","     */\n","    default Maybe<A> projectA() {\n","        return project()._1();\n","    }\n","\n","    /**\n","     * Convenience method for projecting this coproduct onto a product and then extracting the second slot value.\n","     *\n","     * @return an optional value representing the projection of the \"b\" type index\n","     */\n","    default Maybe<B> projectB() {\n","        return project()._2();\n","    }\n","\n","    /**\n","     * Swap the type parameters.\n","     *\n","     * @return The inverted coproduct\n","     */\n","    default CoProduct2<B, A, ? extends CoProduct2<B, A, ?>> invert() {\n","        return new CoProduct2<B, A, CoProduct2<B, A, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super B, ? extends R> aFn, Fn1<? super A, ? extends R> bFn) {\n","                return CoProduct2.this.match(bFn, aFn);\n","            }\n","        };\n","    }\n","\n","    /**\n","     * Embed this coproduct inside another value; that is, given morphisms from this coproduct to <code>R</code>, apply\n","     * the appropriate morphism to this coproduct as a whole. Like {@link CoProduct2#match}, but without unwrapping the\n","     * value.\n","     *\n","     * @param <R> result type\n","     * @param aFn morphism <code>A v B -&gt; R</code>, applied in the <code>A</code> case\n","     * @param bFn morphism <code>A v B -&gt; R</code>, applied in the <code>B</code> case\n","     * @return the result of applying the appropriate morphism to this coproduct\n","     */\n","    @SuppressWarnings(\"unchecked\")\n","    default <R> R embed(Fn1<? super CP2, ? extends R> aFn, Fn1<? super CP2, ? extends R> bFn) {\n","        return this.<Fn1<CP2, R>>match(constantly(fn1(aFn)),\n","                                       constantly(fn1(bFn)))\n","                .apply((CP2) this);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.adt.coproduct;\n","\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import org.junit.Before;\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Id.id;\n","import static org.junit.Assert.assertEquals;\n","\n","public class CoProduct2Test {\n","\n","    private CoProduct2<Integer, Boolean, ?> a;\n","    private CoProduct2<Integer, Boolean, ?> b;\n","\n","    @Before\n","    public void setUp() {\n","        a = new CoProduct2<Integer, Boolean, CoProduct2<Integer, Boolean, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super Integer, ? extends R> aFn, Fn1<? super Boolean, ? extends R> bFn) {\n","                return aFn.apply(1);\n","            }\n","        };\n","        b = new CoProduct2<Integer, Boolean, CoProduct2<Integer, Boolean, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super Integer, ? extends R> aFn, Fn1<? super Boolean, ? extends R> bFn) {\n","                return bFn.apply(true);\n","            }\n","        };\n","    }\n","\n","    @Test\n","    public void diverge() {\n","        CoProduct3<Integer, Boolean, String, ?> divergeA = a.diverge();\n","        assertEquals(1, divergeA.match(id(), id(), id()));\n","\n","        CoProduct3<Integer, Boolean, String, ?> divergeB = b.diverge();\n","        assertEquals(true, divergeB.match(id(), id(), id()));\n","    }\n","\n","    @Test\n","    public void projections() {\n","        assertEquals(tuple(just(1), nothing()), a.project());\n","        assertEquals(tuple(nothing(), just(true)), b.project());\n","\n","        assertEquals(tuple(a.projectA(), a.projectB()), a.project());\n","        assertEquals(tuple(b.projectA(), b.projectB()), b.project());\n","    }\n","\n","    @Test\n","    public void invert() {\n","        assertEquals(just(1), a.invert().projectB());\n","        assertEquals(just(true), b.invert().projectA());\n","    }\n","\n","    @Test\n","    public void embed() {\n","        assertEquals(just(a), a.embed(Maybe::just, Maybe::just));\n","        assertEquals(just(b), b.embed(Maybe::just, Maybe::just));\n","    }\n","}"],"method_lines_dic":{"CoProduct2::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>)":[38,38],"CoProduct2::::diverge()":[61,69],"CoProduct2::::project()":[77,80],"CoProduct2::::projectA()":[87,89],"CoProduct2::::projectB()":[96,98],"CoProduct2::::invert()":[105,112],"CoProduct2::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP2, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP2, ? extends R>)":[124,129]},"test_method_lines_dic":{"CoProduct2Test::::setUp()":[19,33],"CoProduct2Test::::diverge()":[35,42],"CoProduct2Test::::projections()":[44,51],"CoProduct2Test::::invert()":[53,57],"CoProduct2Test::::embed()":[59,63]},"reverse_method_lines_dic":{"38":"CoProduct2::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>)","61":"CoProduct2::::diverge()","62":"CoProduct2::::diverge()","63":"CoProduct2::::diverge()","64":"CoProduct2::::diverge()","65":"CoProduct2::::diverge()","66":"CoProduct2::::diverge()","67":"CoProduct2::::diverge()","68":"CoProduct2::::diverge()","69":"CoProduct2::::diverge()","77":"CoProduct2::::project()","78":"CoProduct2::::project()","79":"CoProduct2::::project()","80":"CoProduct2::::project()","87":"CoProduct2::::projectA()","88":"CoProduct2::::projectA()","89":"CoProduct2::::projectA()","96":"CoProduct2::::projectB()","97":"CoProduct2::::projectB()","98":"CoProduct2::::projectB()","105":"CoProduct2::::invert()","106":"CoProduct2::::invert()","107":"CoProduct2::::invert()","108":"CoProduct2::::invert()","109":"CoProduct2::::invert()","110":"CoProduct2::::invert()","111":"CoProduct2::::invert()","112":"CoProduct2::::invert()","124":"CoProduct2::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP2, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP2, ? extends R>)","125":"CoProduct2::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP2, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP2, ? extends R>)","126":"CoProduct2::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP2, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP2, ? extends R>)","127":"CoProduct2::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP2, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP2, ? extends R>)","128":"CoProduct2::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP2, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP2, ? extends R>)","129":"CoProduct2::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP2, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP2, ? extends R>)"},"test_reverse_method_lines_dic":{"19":"CoProduct2Test::::setUp()","20":"CoProduct2Test::::setUp()","21":"CoProduct2Test::::setUp()","22":"CoProduct2Test::::setUp()","23":"CoProduct2Test::::setUp()","24":"CoProduct2Test::::setUp()","25":"CoProduct2Test::::setUp()","26":"CoProduct2Test::::setUp()","27":"CoProduct2Test::::setUp()","28":"CoProduct2Test::::setUp()","29":"CoProduct2Test::::setUp()","30":"CoProduct2Test::::setUp()","31":"CoProduct2Test::::setUp()","32":"CoProduct2Test::::setUp()","33":"CoProduct2Test::::setUp()","35":"CoProduct2Test::::diverge()","36":"CoProduct2Test::::diverge()","37":"CoProduct2Test::::diverge()","38":"CoProduct2Test::::diverge()","39":"CoProduct2Test::::diverge()","40":"CoProduct2Test::::diverge()","41":"CoProduct2Test::::diverge()","42":"CoProduct2Test::::diverge()","44":"CoProduct2Test::::projections()","45":"CoProduct2Test::::projections()","46":"CoProduct2Test::::projections()","47":"CoProduct2Test::::projections()","48":"CoProduct2Test::::projections()","49":"CoProduct2Test::::projections()","50":"CoProduct2Test::::projections()","51":"CoProduct2Test::::projections()","53":"CoProduct2Test::::invert()","54":"CoProduct2Test::::invert()","55":"CoProduct2Test::::invert()","56":"CoProduct2Test::::invert()","57":"CoProduct2Test::::invert()","59":"CoProduct2Test::::embed()","60":"CoProduct2Test::::embed()","61":"CoProduct2Test::::embed()","62":"CoProduct2Test::::embed()","63":"CoProduct2Test::::embed()"},"tests":[{"test_lines":[35,42],"covered_lines":[62,66]},{"test_lines":[44,51],"covered_lines":[78,79,88,97]},{"test_lines":[53,57],"covered_lines":[78,79,88,97,106,109]},{"test_lines":[59,63],"covered_lines":[126,127,128]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/adt/coproduct/CoProduct7.java":{"class_content":["package com.jnape.palatable.lambda.adt.coproduct;\n","\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.adt.choice.Choice6;\n","import com.jnape.palatable.lambda.adt.product.Product7;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.Fn1.fn1;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","\n","/**\n"," * A generalization of the coproduct of seven types.\n"," *\n"," * @param <A>   the first possible type\n"," * @param <B>   the second possible type\n"," * @param <C>   the third possible type\n"," * @param <D>   the fourth possible type\n"," * @param <E>   the fifth possible type\n"," * @param <F>   the sixth possible type\n"," * @param <G>   the seventh possible type\n"," * @param <CP7> the recursive type of this coproduct (used for embedding)\n"," * @see CoProduct2\n"," */\n","@FunctionalInterface\n","public interface CoProduct7<A, B, C, D, E, F, G, CP7 extends CoProduct7<A, B, C, D, E, F, G, ?>> {\n","\n","    /**\n","     * Type-safe convergence requiring a match against all potential types.\n","     *\n","     * @param <R> result type\n","     * @param aFn morphism <code>A -&gt; R</code>\n","     * @param bFn morphism <code>B -&gt; R</code>\n","     * @param cFn morphism <code>C -&gt; R</code>\n","     * @param dFn morphism <code>D -&gt; R</code>\n","     * @param eFn morphism <code>E -&gt; R</code>\n","     * @param fFn morphism <code>F -&gt; R</code>\n","     * @param gFn morphism <code>G -&gt; R</code>\n","     * @return the result of applying the appropriate morphism from whichever type is represented by this coproduct to R\n","     * @see CoProduct2#match(Fn1, Fn1)\n","     */\n","    <R> R match(Fn1<? super A, ? extends R> aFn,\n","                Fn1<? super B, ? extends R> bFn,\n","                Fn1<? super C, ? extends R> cFn,\n","                Fn1<? super D, ? extends R> dFn,\n","                Fn1<? super E, ? extends R> eFn,\n","                Fn1<? super F, ? extends R> fFn,\n","                Fn1<? super G, ? extends R> gFn);\n","\n","    /**\n","     * Diverge this coproduct by introducing another possible type that it could represent.\n","     *\n","     * @param <H> the additional possible type of this coproduct\n","     * @return a Coproduct8&lt;A, B, C, D, E, F, G, H&gt;\n","     * @see CoProduct2#diverge()\n","     */\n","    default <H> CoProduct8<A, B, C, D, E, F, G, H, ? extends CoProduct8<A, B, C, D, E, F, G, H, ?>> diverge() {\n","        return new CoProduct8<A, B, C, D, E, F, G, H, CoProduct8<A, B, C, D, E, F, G, H, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                               Fn1<? super C, ? extends R> cFn, Fn1<? super D, ? extends R> dFn,\n","                               Fn1<? super E, ? extends R> eFn, Fn1<? super F, ? extends R> fFn,\n","                               Fn1<? super G, ? extends R> gFn, Fn1<? super H, ? extends R> hFn) {\n","                return CoProduct7.this.match(aFn, bFn, cFn, dFn, eFn, fFn, gFn);\n","            }\n","        };\n","    }\n","\n","    /**\n","     * Converge this coproduct down to a lower order coproduct by mapping the last possible type into an earlier\n","     * possible type.\n","     *\n","     * @param convergenceFn morphism <code>G -&gt; {@link CoProduct6}&lt;A, B, C, D, E, F&gt;</code>\n","     * @return a {@link CoProduct6}&lt;A, B, C, D, E, F&gt;\n","     */\n","    default CoProduct6<A, B, C, D, E, F, ? extends CoProduct6<A, B, C, D, E, F, ?>> converge(\n","            Fn1<? super G, ? extends CoProduct6<A, B, C, D, E, F, ?>> convergenceFn) {\n","        return match(Choice6::a, Choice6::b, Choice6::c, Choice6::d, Choice6::e, Choice6::f, convergenceFn::apply);\n","    }\n","\n","    /**\n","     * Project this coproduct onto a product.\n","     *\n","     * @return a product of the coproduct projection\n","     * @see CoProduct2#project()\n","     */\n","    default Product7<Maybe<A>, Maybe<B>, Maybe<C>, Maybe<D>, Maybe<E>, Maybe<F>, Maybe<G>> project() {\n","        return match(a -> tuple(just(a), nothing(), nothing(), nothing(), nothing(), nothing(), nothing()),\n","                     b -> tuple(nothing(), just(b), nothing(), nothing(), nothing(), nothing(), nothing()),\n","                     c -> tuple(nothing(), nothing(), just(c), nothing(), nothing(), nothing(), nothing()),\n","                     d -> tuple(nothing(), nothing(), nothing(), just(d), nothing(), nothing(), nothing()),\n","                     e -> tuple(nothing(), nothing(), nothing(), nothing(), just(e), nothing(), nothing()),\n","                     f -> tuple(nothing(), nothing(), nothing(), nothing(), nothing(), just(f), nothing()),\n","                     g -> tuple(nothing(), nothing(), nothing(), nothing(), nothing(), nothing(), just(g)));\n","    }\n","\n","    /**\n","     * Convenience method for projecting this coproduct onto a product and then extracting the first slot value.\n","     *\n","     * @return an optional value representing the projection of the \"a\" type index\n","     */\n","    default Maybe<A> projectA() {\n","        return project()._1();\n","    }\n","\n","    /**\n","     * Convenience method for projecting this coproduct onto a product and then extracting the second slot value.\n","     *\n","     * @return an optional value representing the projection of the \"b\" type index\n","     */\n","    default Maybe<B> projectB() {\n","        return project()._2();\n","    }\n","\n","    /**\n","     * Convenience method for projecting this coproduct onto a product and then extracting the third slot value.\n","     *\n","     * @return an optional value representing the projection of the \"c\" type index\n","     */\n","    default Maybe<C> projectC() {\n","        return project()._3();\n","    }\n","\n","    /**\n","     * Convenience method for projecting this coproduct onto a product and then extracting the fourth slot value.\n","     *\n","     * @return an optional value representing the projection of the \"d\" type index\n","     */\n","    default Maybe<D> projectD() {\n","        return project()._4();\n","    }\n","\n","    /**\n","     * Convenience method for projecting this coproduct onto a product and then extracting the fifth slot value.\n","     *\n","     * @return an optional value representing the projection of the \"e\" type index\n","     */\n","    default Maybe<E> projectE() {\n","        return project()._5();\n","    }\n","\n","    /**\n","     * Convenience method for projecting this coproduct onto a product and then extracting the sixth slot value.\n","     *\n","     * @return an optional value representing the projection of the \"f\" type index\n","     */\n","    default Maybe<F> projectF() {\n","        return project()._6();\n","    }\n","\n","    /**\n","     * Convenience method for projecting this coproduct onto a product and then extracting the seventh slot value.\n","     *\n","     * @return an optional value representing the projection of the \"g\" type index\n","     */\n","    default Maybe<G> projectG() {\n","        return project()._7();\n","    }\n","\n","    /**\n","     * Embed this coproduct inside another value; that is, given morphisms from this coproduct to <code>R</code>, apply\n","     * the appropriate morphism to this coproduct as a whole. Like {@link CoProduct7#match}, but without unwrapping the\n","     * value.\n","     *\n","     * @param <R> result type\n","     * @param aFn morphism <code>A v B v C v D v E v F v G -&gt; R</code>, applied in the <code>A</code> case\n","     * @param bFn morphism <code>A v B v C v D v E v F v G -&gt; R</code>, applied in the <code>B</code> case\n","     * @param cFn morphism <code>A v B v C v D v E v F v G -&gt; R</code>, applied in the <code>C</code> case\n","     * @param dFn morphism <code>A v B v C v D v E v F v G -&gt; R</code>, applied in the <code>D</code> case\n","     * @param eFn morphism <code>A v B v C v D v E v F v G -&gt; R</code>, applied in the <code>E</code> case\n","     * @param fFn morphism <code>A v B v C v D v E v F v G -&gt; R</code>, applied in the <code>F</code> case\n","     * @param gFn morphism <code>A v B v C v D v E v F v G -&gt; R</code>, applied in the <code>G</code> case\n","     * @return the result of applying the appropriate morphism to this coproduct\n","     */\n","    @SuppressWarnings(\"unchecked\")\n","    default <R> R embed(Fn1<? super CP7, ? extends R> aFn,\n","                        Fn1<? super CP7, ? extends R> bFn,\n","                        Fn1<? super CP7, ? extends R> cFn,\n","                        Fn1<? super CP7, ? extends R> dFn,\n","                        Fn1<? super CP7, ? extends R> eFn,\n","                        Fn1<? super CP7, ? extends R> fFn,\n","                        Fn1<? super CP7, ? extends R> gFn) {\n","        return this.<Fn1<CP7, R>>match(constantly(fn1(aFn)),\n","                                       constantly(fn1(bFn)),\n","                                       constantly(fn1(cFn)),\n","                                       constantly(fn1(dFn)),\n","                                       constantly(fn1(eFn)),\n","                                       constantly(fn1(fFn)),\n","                                       constantly(fn1(gFn)))\n","                .apply((CP7) this);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.adt.coproduct;\n","\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.adt.choice.Choice6;\n","import com.jnape.palatable.lambda.adt.choice.Choice7;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import org.junit.Before;\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Id.id;\n","import static org.junit.Assert.assertEquals;\n","\n","public class CoProduct7Test {\n","\n","    private CoProduct7<Integer, String, Boolean, Double, Character, Long, Float, ?> a;\n","    private CoProduct7<Integer, String, Boolean, Double, Character, Long, Float, ?> b;\n","    private CoProduct7<Integer, String, Boolean, Double, Character, Long, Float, ?> c;\n","    private CoProduct7<Integer, String, Boolean, Double, Character, Long, Float, ?> d;\n","    private CoProduct7<Integer, String, Boolean, Double, Character, Long, Float, ?> e;\n","    private CoProduct7<Integer, String, Boolean, Double, Character, Long, Float, ?> f;\n","    private CoProduct7<Integer, String, Boolean, Double, Character, Long, Float, ?> g;\n","\n","    @Before\n","    public void setUp() {\n","        a = new CoProduct7<Integer, String, Boolean, Double, Character, Long, Float, CoProduct7<Integer, String, Boolean, Double, Character, Long, Float, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super Integer, ? extends R> aFn, Fn1<? super String, ? extends R> bFn,\n","                               Fn1<? super Boolean, ? extends R> cFn, Fn1<? super Double, ? extends R> dFn,\n","                               Fn1<? super Character, ? extends R> eFn, Fn1<? super Long, ? extends R> fFn,\n","                               Fn1<? super Float, ? extends R> gFn) {\n","                return aFn.apply(1);\n","            }\n","        };\n","        b = new CoProduct7<Integer, String, Boolean, Double, Character, Long, Float, CoProduct7<Integer, String, Boolean, Double, Character, Long, Float, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super Integer, ? extends R> aFn, Fn1<? super String, ? extends R> bFn,\n","                               Fn1<? super Boolean, ? extends R> cFn, Fn1<? super Double, ? extends R> dFn,\n","                               Fn1<? super Character, ? extends R> eFn, Fn1<? super Long, ? extends R> fFn,\n","                               Fn1<? super Float, ? extends R> gFn) {\n","                return bFn.apply(\"two\");\n","            }\n","        };\n","        c = new CoProduct7<Integer, String, Boolean, Double, Character, Long, Float, CoProduct7<Integer, String, Boolean, Double, Character, Long, Float, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super Integer, ? extends R> aFn, Fn1<? super String, ? extends R> bFn,\n","                               Fn1<? super Boolean, ? extends R> cFn, Fn1<? super Double, ? extends R> dFn,\n","                               Fn1<? super Character, ? extends R> eFn, Fn1<? super Long, ? extends R> fFn,\n","                               Fn1<? super Float, ? extends R> gFn) {\n","                return cFn.apply(true);\n","            }\n","        };\n","        d = new CoProduct7<Integer, String, Boolean, Double, Character, Long, Float, CoProduct7<Integer, String, Boolean, Double, Character, Long, Float, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super Integer, ? extends R> aFn, Fn1<? super String, ? extends R> bFn,\n","                               Fn1<? super Boolean, ? extends R> cFn, Fn1<? super Double, ? extends R> dFn,\n","                               Fn1<? super Character, ? extends R> eFn, Fn1<? super Long, ? extends R> fFn,\n","                               Fn1<? super Float, ? extends R> gFn) {\n","                return dFn.apply(4D);\n","            }\n","        };\n","        e = new CoProduct7<Integer, String, Boolean, Double, Character, Long, Float, CoProduct7<Integer, String, Boolean, Double, Character, Long, Float, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super Integer, ? extends R> aFn, Fn1<? super String, ? extends R> bFn,\n","                               Fn1<? super Boolean, ? extends R> cFn, Fn1<? super Double, ? extends R> dFn,\n","                               Fn1<? super Character, ? extends R> eFn, Fn1<? super Long, ? extends R> fFn,\n","                               Fn1<? super Float, ? extends R> gFn) {\n","                return eFn.apply('z');\n","            }\n","        };\n","        f = new CoProduct7<Integer, String, Boolean, Double, Character, Long, Float, CoProduct7<Integer, String, Boolean, Double, Character, Long, Float, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super Integer, ? extends R> aFn, Fn1<? super String, ? extends R> bFn,\n","                               Fn1<? super Boolean, ? extends R> cFn, Fn1<? super Double, ? extends R> dFn,\n","                               Fn1<? super Character, ? extends R> eFn, Fn1<? super Long, ? extends R> fFn,\n","                               Fn1<? super Float, ? extends R> gFn) {\n","                return fFn.apply(5L);\n","            }\n","        };\n","        g = new CoProduct7<Integer, String, Boolean, Double, Character, Long, Float, CoProduct7<Integer, String, Boolean, Double, Character, Long, Float, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super Integer, ? extends R> aFn, Fn1<? super String, ? extends R> bFn,\n","                               Fn1<? super Boolean, ? extends R> cFn, Fn1<? super Double, ? extends R> dFn,\n","                               Fn1<? super Character, ? extends R> eFn, Fn1<? super Long, ? extends R> fFn,\n","                               Fn1<? super Float, ? extends R> gFn) {\n","                return gFn.apply(6f);\n","            }\n","        };\n","    }\n","\n","    @Test\n","    public void match() {\n","        assertEquals(1, a.match(id(), id(), id(), id(), id(), id(), id()));\n","        assertEquals(\"two\", b.match(id(), id(), id(), id(), id(), id(), id()));\n","        assertEquals(true, c.match(id(), id(), id(), id(), id(), id(), id()));\n","        assertEquals(4D, d.match(id(), id(), id(), id(), id(), id(), id()));\n","        assertEquals('z', e.match(id(), id(), id(), id(), id(), id(), id()));\n","        assertEquals(5L, f.match(id(), id(), id(), id(), id(), id(), id()));\n","        assertEquals(6f, g.match(id(), id(), id(), id(), id(), id(), id()));\n","    }\n","\n","    @Test\n","    public void diverge() {\n","        assertEquals(1, a.diverge().match(id(), id(), id(), id(), id(), id(), id(), id()));\n","        assertEquals(\"two\", b.diverge().match(id(), id(), id(), id(), id(), id(), id(), id()));\n","        assertEquals(true, c.diverge().match(id(), id(), id(), id(), id(), id(), id(), id()));\n","        assertEquals(4D, d.diverge().match(id(), id(), id(), id(), id(), id(), id(), id()));\n","        assertEquals('z', e.diverge().match(id(), id(), id(), id(), id(), id(), id(), id()));\n","        assertEquals(5L, f.diverge().match(id(), id(), id(), id(), id(), id(), id(), id()));\n","        assertEquals(6F, g.diverge().match(id(), id(), id(), id(), id(), id(), id(), id()));\n","    }\n","\n","    @Test\n","    public void converge() {\n","        Fn1<Float, CoProduct6<Integer, String, Boolean, Double, Character, Long, ?>> convergenceFn = x ->\n","                x.equals(1f)\n","                ? Choice6.a(1)\n","                : x.equals(2f)\n","                  ? Choice6.b(\"b\")\n","                  : x.equals(3f)\n","                    ? Choice6.c(false)\n","                    : x.equals(4f)\n","                      ? Choice6.d(1D)\n","                      : x.equals(5f)\n","                        ? Choice6.e('a')\n","                        : Choice6.f(5L);\n","        assertEquals(1, a.converge(convergenceFn).match(id(), id(), id(), id(), id(), id()));\n","        assertEquals(\"two\", b.converge(convergenceFn).match(id(), id(), id(), id(), id(), id()));\n","        assertEquals(true, c.converge(convergenceFn).match(id(), id(), id(), id(), id(), id()));\n","        assertEquals(4D, d.converge(convergenceFn).match(id(), id(), id(), id(), id(), id()));\n","        assertEquals('z', e.converge(convergenceFn).match(id(), id(), id(), id(), id(), id()));\n","        assertEquals(5L, f.converge(convergenceFn).match(id(), id(), id(), id(), id(), id()));\n","        assertEquals(1, Choice7.<Integer, String, Boolean, Double, Character, Long, Float>g(1F).converge(convergenceFn).match(id(), id(), id(), id(), id(), id()));\n","        assertEquals(\"b\", Choice7.<Integer, String, Boolean, Double, Character, Long, Float>g(2F).converge(convergenceFn).match(id(), id(), id(), id(), id(), id()));\n","        assertEquals(false, Choice7.<Integer, String, Boolean, Double, Character, Long, Float>g(3F).converge(convergenceFn).match(id(), id(), id(), id(), id(), id()));\n","        assertEquals(1d, Choice7.<Integer, String, Boolean, Double, Character, Long, Float>g(4F).converge(convergenceFn).match(id(), id(), id(), id(), id(), id()));\n","        assertEquals('a', Choice7.<Integer, String, Boolean, Double, Character, Long, Float>g(5F).converge(convergenceFn).match(id(), id(), id(), id(), id(), id()));\n","        assertEquals(5L, Choice7.<Integer, String, Boolean, Double, Character, Long, Float>g(6F).converge(convergenceFn).match(id(), id(), id(), id(), id(), id()));\n","    }\n","\n","    @Test\n","    public void projections() {\n","        assertEquals(tuple(just(1), nothing(), nothing(), nothing(), nothing(), nothing(), nothing()), a.project());\n","        assertEquals(tuple(nothing(), just(\"two\"), nothing(), nothing(), nothing(), nothing(), nothing()), b.project());\n","        assertEquals(tuple(nothing(), nothing(), just(true), nothing(), nothing(), nothing(), nothing()), c.project());\n","        assertEquals(tuple(nothing(), nothing(), nothing(), just(4D), nothing(), nothing(), nothing()), d.project());\n","        assertEquals(tuple(nothing(), nothing(), nothing(), nothing(), just('z'), nothing(), nothing()), e.project());\n","        assertEquals(tuple(nothing(), nothing(), nothing(), nothing(), nothing(), just(5L), nothing()), f.project());\n","        assertEquals(tuple(nothing(), nothing(), nothing(), nothing(), nothing(), nothing(), just(6F)), g.project());\n","\n","        assertEquals(tuple(a.projectA(), a.projectB(), a.projectC(), a.projectD(), a.projectE(), a.projectF(), a.projectG()), a.project());\n","        assertEquals(tuple(b.projectA(), b.projectB(), b.projectC(), b.projectD(), b.projectE(), b.projectF(), b.projectG()), b.project());\n","        assertEquals(tuple(c.projectA(), c.projectB(), c.projectC(), c.projectD(), c.projectE(), c.projectF(), c.projectG()), c.project());\n","        assertEquals(tuple(d.projectA(), d.projectB(), d.projectC(), d.projectD(), d.projectE(), d.projectF(), d.projectG()), d.project());\n","        assertEquals(tuple(e.projectA(), e.projectB(), e.projectC(), e.projectD(), e.projectE(), e.projectF(), e.projectG()), e.project());\n","        assertEquals(tuple(f.projectA(), f.projectB(), f.projectC(), f.projectD(), f.projectE(), f.projectF(), f.projectG()), f.project());\n","        assertEquals(tuple(g.projectA(), g.projectB(), g.projectC(), g.projectD(), g.projectE(), g.projectF(), g.projectG()), g.project());\n","    }\n","\n","    @Test\n","    public void embed() {\n","        assertEquals(just(a), a.embed(Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just));\n","        assertEquals(just(b), b.embed(Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just));\n","        assertEquals(just(c), c.embed(Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just));\n","        assertEquals(just(d), d.embed(Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just));\n","        assertEquals(just(e), e.embed(Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just));\n","        assertEquals(just(f), f.embed(Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just));\n","        assertEquals(just(g), g.embed(Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just));\n","    }\n","}"],"method_lines_dic":{"CoProduct7::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)":[44,50],"CoProduct7::::diverge()":[59,69],"CoProduct7::::converge(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct6<A, B, C, D, E, F, ?>>)":[78,81],"CoProduct7::::project()":[89,97],"CoProduct7::::projectA()":[104,106],"CoProduct7::::projectB()":[113,115],"CoProduct7::::projectC()":[122,124],"CoProduct7::::projectD()":[131,133],"CoProduct7::::projectE()":[140,142],"CoProduct7::::projectF()":[149,151],"CoProduct7::::projectG()":[158,160],"CoProduct7::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>)":[177,193]},"test_method_lines_dic":{"CoProduct7Test::::setUp()":[26,91],"CoProduct7Test::::match()":[93,102],"CoProduct7Test::::diverge()":[104,113],"CoProduct7Test::::converge()":[115,141],"CoProduct7Test::::projections()":[143,160],"CoProduct7Test::::embed()":[162,171]},"reverse_method_lines_dic":{"44":"CoProduct7::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","45":"CoProduct7::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","46":"CoProduct7::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","47":"CoProduct7::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","48":"CoProduct7::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","49":"CoProduct7::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","50":"CoProduct7::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>)","59":"CoProduct7::::diverge()","60":"CoProduct7::::diverge()","61":"CoProduct7::::diverge()","62":"CoProduct7::::diverge()","63":"CoProduct7::::diverge()","64":"CoProduct7::::diverge()","65":"CoProduct7::::diverge()","66":"CoProduct7::::diverge()","67":"CoProduct7::::diverge()","68":"CoProduct7::::diverge()","69":"CoProduct7::::diverge()","78":"CoProduct7::::converge(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct6<A, B, C, D, E, F, ?>>)","79":"CoProduct7::::converge(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct6<A, B, C, D, E, F, ?>>)","80":"CoProduct7::::converge(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct6<A, B, C, D, E, F, ?>>)","81":"CoProduct7::::converge(com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct6<A, B, C, D, E, F, ?>>)","89":"CoProduct7::::project()","90":"CoProduct7::::project()","91":"CoProduct7::::project()","92":"CoProduct7::::project()","93":"CoProduct7::::project()","94":"CoProduct7::::project()","95":"CoProduct7::::project()","96":"CoProduct7::::project()","97":"CoProduct7::::project()","104":"CoProduct7::::projectA()","105":"CoProduct7::::projectA()","106":"CoProduct7::::projectA()","113":"CoProduct7::::projectB()","114":"CoProduct7::::projectB()","115":"CoProduct7::::projectB()","122":"CoProduct7::::projectC()","123":"CoProduct7::::projectC()","124":"CoProduct7::::projectC()","131":"CoProduct7::::projectD()","132":"CoProduct7::::projectD()","133":"CoProduct7::::projectD()","140":"CoProduct7::::projectE()","141":"CoProduct7::::projectE()","142":"CoProduct7::::projectE()","149":"CoProduct7::::projectF()","150":"CoProduct7::::projectF()","151":"CoProduct7::::projectF()","158":"CoProduct7::::projectG()","159":"CoProduct7::::projectG()","160":"CoProduct7::::projectG()","177":"CoProduct7::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>)","178":"CoProduct7::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>)","179":"CoProduct7::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>)","180":"CoProduct7::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>)","181":"CoProduct7::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>)","182":"CoProduct7::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>)","183":"CoProduct7::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>)","184":"CoProduct7::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>)","185":"CoProduct7::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>)","186":"CoProduct7::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>)","187":"CoProduct7::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>)","188":"CoProduct7::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>)","189":"CoProduct7::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>)","190":"CoProduct7::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>)","191":"CoProduct7::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>)","192":"CoProduct7::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>)","193":"CoProduct7::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP7, ? extends R>)"},"test_reverse_method_lines_dic":{"26":"CoProduct7Test::::setUp()","27":"CoProduct7Test::::setUp()","28":"CoProduct7Test::::setUp()","29":"CoProduct7Test::::setUp()","30":"CoProduct7Test::::setUp()","31":"CoProduct7Test::::setUp()","32":"CoProduct7Test::::setUp()","33":"CoProduct7Test::::setUp()","34":"CoProduct7Test::::setUp()","35":"CoProduct7Test::::setUp()","36":"CoProduct7Test::::setUp()","37":"CoProduct7Test::::setUp()","38":"CoProduct7Test::::setUp()","39":"CoProduct7Test::::setUp()","40":"CoProduct7Test::::setUp()","41":"CoProduct7Test::::setUp()","42":"CoProduct7Test::::setUp()","43":"CoProduct7Test::::setUp()","44":"CoProduct7Test::::setUp()","45":"CoProduct7Test::::setUp()","46":"CoProduct7Test::::setUp()","47":"CoProduct7Test::::setUp()","48":"CoProduct7Test::::setUp()","49":"CoProduct7Test::::setUp()","50":"CoProduct7Test::::setUp()","51":"CoProduct7Test::::setUp()","52":"CoProduct7Test::::setUp()","53":"CoProduct7Test::::setUp()","54":"CoProduct7Test::::setUp()","55":"CoProduct7Test::::setUp()","56":"CoProduct7Test::::setUp()","57":"CoProduct7Test::::setUp()","58":"CoProduct7Test::::setUp()","59":"CoProduct7Test::::setUp()","60":"CoProduct7Test::::setUp()","61":"CoProduct7Test::::setUp()","62":"CoProduct7Test::::setUp()","63":"CoProduct7Test::::setUp()","64":"CoProduct7Test::::setUp()","65":"CoProduct7Test::::setUp()","66":"CoProduct7Test::::setUp()","67":"CoProduct7Test::::setUp()","68":"CoProduct7Test::::setUp()","69":"CoProduct7Test::::setUp()","70":"CoProduct7Test::::setUp()","71":"CoProduct7Test::::setUp()","72":"CoProduct7Test::::setUp()","73":"CoProduct7Test::::setUp()","74":"CoProduct7Test::::setUp()","75":"CoProduct7Test::::setUp()","76":"CoProduct7Test::::setUp()","77":"CoProduct7Test::::setUp()","78":"CoProduct7Test::::setUp()","79":"CoProduct7Test::::setUp()","80":"CoProduct7Test::::setUp()","81":"CoProduct7Test::::setUp()","82":"CoProduct7Test::::setUp()","83":"CoProduct7Test::::setUp()","84":"CoProduct7Test::::setUp()","85":"CoProduct7Test::::setUp()","86":"CoProduct7Test::::setUp()","87":"CoProduct7Test::::setUp()","88":"CoProduct7Test::::setUp()","89":"CoProduct7Test::::setUp()","90":"CoProduct7Test::::setUp()","91":"CoProduct7Test::::setUp()","93":"CoProduct7Test::::match()","94":"CoProduct7Test::::match()","95":"CoProduct7Test::::match()","96":"CoProduct7Test::::match()","97":"CoProduct7Test::::match()","98":"CoProduct7Test::::match()","99":"CoProduct7Test::::match()","100":"CoProduct7Test::::match()","101":"CoProduct7Test::::match()","102":"CoProduct7Test::::match()","104":"CoProduct7Test::::diverge()","105":"CoProduct7Test::::diverge()","106":"CoProduct7Test::::diverge()","107":"CoProduct7Test::::diverge()","108":"CoProduct7Test::::diverge()","109":"CoProduct7Test::::diverge()","110":"CoProduct7Test::::diverge()","111":"CoProduct7Test::::diverge()","112":"CoProduct7Test::::diverge()","113":"CoProduct7Test::::diverge()","115":"CoProduct7Test::::converge()","116":"CoProduct7Test::::converge()","117":"CoProduct7Test::::converge()","118":"CoProduct7Test::::converge()","119":"CoProduct7Test::::converge()","120":"CoProduct7Test::::converge()","121":"CoProduct7Test::::converge()","122":"CoProduct7Test::::converge()","123":"CoProduct7Test::::converge()","124":"CoProduct7Test::::converge()","125":"CoProduct7Test::::converge()","126":"CoProduct7Test::::converge()","127":"CoProduct7Test::::converge()","128":"CoProduct7Test::::converge()","129":"CoProduct7Test::::converge()","130":"CoProduct7Test::::converge()","131":"CoProduct7Test::::converge()","132":"CoProduct7Test::::converge()","133":"CoProduct7Test::::converge()","134":"CoProduct7Test::::converge()","135":"CoProduct7Test::::converge()","136":"CoProduct7Test::::converge()","137":"CoProduct7Test::::converge()","138":"CoProduct7Test::::converge()","139":"CoProduct7Test::::converge()","140":"CoProduct7Test::::converge()","141":"CoProduct7Test::::converge()","143":"CoProduct7Test::::projections()","144":"CoProduct7Test::::projections()","145":"CoProduct7Test::::projections()","146":"CoProduct7Test::::projections()","147":"CoProduct7Test::::projections()","148":"CoProduct7Test::::projections()","149":"CoProduct7Test::::projections()","150":"CoProduct7Test::::projections()","151":"CoProduct7Test::::projections()","152":"CoProduct7Test::::projections()","153":"CoProduct7Test::::projections()","154":"CoProduct7Test::::projections()","155":"CoProduct7Test::::projections()","156":"CoProduct7Test::::projections()","157":"CoProduct7Test::::projections()","158":"CoProduct7Test::::projections()","159":"CoProduct7Test::::projections()","160":"CoProduct7Test::::projections()","162":"CoProduct7Test::::embed()","163":"CoProduct7Test::::embed()","164":"CoProduct7Test::::embed()","165":"CoProduct7Test::::embed()","166":"CoProduct7Test::::embed()","167":"CoProduct7Test::::embed()","168":"CoProduct7Test::::embed()","169":"CoProduct7Test::::embed()","170":"CoProduct7Test::::embed()","171":"CoProduct7Test::::embed()"},"tests":[{"test_lines":[104,113],"covered_lines":[60,66]},{"test_lines":[115,141],"covered_lines":[80]},{"test_lines":[143,160],"covered_lines":[90,91,92,93,94,95,96,105,114,123,132,141,150,159]},{"test_lines":[162,171],"covered_lines":[185,186,187,188,189,190,191,192]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/adt/coproduct/CoProduct4.java":{"class_content":["package com.jnape.palatable.lambda.adt.coproduct;\n","\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.adt.choice.Choice3;\n","import com.jnape.palatable.lambda.adt.product.Product4;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.Fn1.fn1;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","\n","/**\n"," * A generalization of the coproduct of four types.\n"," *\n"," * @param <A>   the first possible type\n"," * @param <B>   the second possible type\n"," * @param <C>   the third possible type\n"," * @param <D>   the fourth possible type\n"," * @param <CP4> the recursive type of this coproduct (used for embedding)\n"," * @see CoProduct2\n"," */\n","@FunctionalInterface\n","public interface CoProduct4<A, B, C, D, CP4 extends CoProduct4<A, B, C, D, ?>> {\n","\n","    /**\n","     * Type-safe convergence requiring a match against all potential types.\n","     *\n","     * @param <R> result type\n","     * @param aFn morphism <code>A -&gt; R</code>\n","     * @param bFn morphism <code>B -&gt; R</code>\n","     * @param cFn morphism <code>C -&gt; R</code>\n","     * @param dFn morphism <code>D -&gt; R</code>\n","     * @return the result of applying the appropriate morphism from whichever type is represented by this coproduct to R\n","     * @see CoProduct2#match(Fn1, Fn1)\n","     */\n","    <R> R match(Fn1<? super A, ? extends R> aFn,\n","                Fn1<? super B, ? extends R> bFn,\n","                Fn1<? super C, ? extends R> cFn,\n","                Fn1<? super D, ? extends R> dFn);\n","\n","    /**\n","     * Diverge this coproduct by introducing another possible type that it could represent.\n","     *\n","     * @param <E> the additional possible type of this coproduct\n","     * @return a Coproduct5&lt;A, B, C, D, E&gt;\n","     * @see CoProduct2#diverge()\n","     */\n","    default <E> CoProduct5<A, B, C, D, E, ? extends CoProduct5<A, B, C, D, E, ?>> diverge() {\n","        return new CoProduct5<A, B, C, D, E, CoProduct5<A, B, C, D, E, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                               Fn1<? super C, ? extends R> cFn, Fn1<? super D, ? extends R> dFn,\n","                               Fn1<? super E, ? extends R> eFn) {\n","                return CoProduct4.this.match(aFn, bFn, cFn, dFn);\n","            }\n","        };\n","    }\n","\n","    /**\n","     * Converge this coproduct down to a lower order coproduct by mapping the last possible type into an earlier\n","     * possible type.\n","     *\n","     * @param convergenceFn function from last possible type to earlier type\n","     * @return a {@link CoProduct3}&lt;A, B, C&gt;\n","     * @see CoProduct3#converge\n","     */\n","    default CoProduct3<A, B, C, ? extends CoProduct3<A, B, C, ?>> converge(\n","            Fn1<? super D, ? extends CoProduct3<A, B, C, ?>> convergenceFn) {\n","        return match(Choice3::a, Choice3::b, Choice3::c, convergenceFn::apply);\n","    }\n","\n","    /**\n","     * Project this coproduct onto a product.\n","     *\n","     * @return a product of the coproduct projection\n","     * @see CoProduct2#project()\n","     */\n","    default Product4<Maybe<A>, Maybe<B>, Maybe<C>, Maybe<D>> project() {\n","        return match(a -> tuple(just(a), nothing(), nothing(), nothing()),\n","                     b -> tuple(nothing(), just(b), nothing(), nothing()),\n","                     c -> tuple(nothing(), nothing(), just(c), nothing()),\n","                     d -> tuple(nothing(), nothing(), nothing(), just(d)));\n","    }\n","\n","    /**\n","     * Convenience method for projecting this coproduct onto a product and then extracting the first slot value.\n","     *\n","     * @return an optional value representing the projection of the \"a\" type index\n","     */\n","    default Maybe<A> projectA() {\n","        return project()._1();\n","    }\n","\n","    /**\n","     * Convenience method for projecting this coproduct onto a product and then extracting the second slot value.\n","     *\n","     * @return an optional value representing the projection of the \"b\" type index\n","     */\n","    default Maybe<B> projectB() {\n","        return project()._2();\n","    }\n","\n","    /**\n","     * Convenience method for projecting this coproduct onto a product and then extracting the third slot value.\n","     *\n","     * @return an optional value representing the projection of the \"c\" type index\n","     */\n","    default Maybe<C> projectC() {\n","        return project()._3();\n","    }\n","\n","    /**\n","     * Convenience method for projecting this coproduct onto a product and then extracting the fourth slot value.\n","     *\n","     * @return an optional value representing the projection of the \"d\" type index\n","     */\n","    default Maybe<D> projectD() {\n","        return project()._4();\n","    }\n","\n","    /**\n","     * Embed this coproduct inside another value; that is, given morphisms from this coproduct to <code>R</code>, apply\n","     * the appropriate morphism to this coproduct as a whole. Like {@link CoProduct4#match}, but without unwrapping the\n","     * value.\n","     *\n","     * @param <R> result type\n","     * @param aFn morphism <code>A v B v C v D -&gt; R</code>, applied in the <code>A</code> case\n","     * @param bFn morphism <code>A v B v C v D -&gt; R</code>, applied in the <code>B</code> case\n","     * @param cFn morphism <code>A v B v C v D -&gt; R</code>, applied in the <code>C</code> case\n","     * @param dFn morphism <code>A v B v C v D -&gt; R</code>, applied in the <code>D</code> case\n","     * @return the result of applying the appropriate morphism to this coproduct\n","     */\n","    @SuppressWarnings(\"unchecked\")\n","    default <R> R embed(Fn1<? super CP4, ? extends R> aFn,\n","                        Fn1<? super CP4, ? extends R> bFn,\n","                        Fn1<? super CP4, ? extends R> cFn,\n","                        Fn1<? super CP4, ? extends R> dFn) {\n","        return this.<Fn1<CP4, R>>match(constantly(fn1(aFn)),\n","                                       constantly(fn1(bFn)),\n","                                       constantly(fn1(cFn)),\n","                                       constantly(fn1(dFn)))\n","                .apply((CP4) this);\n","    }\n","\n","}\n"],"test_content":["package com.jnape.palatable.lambda.adt.coproduct;\n","\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.adt.choice.Choice3;\n","import com.jnape.palatable.lambda.adt.choice.Choice4;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import org.junit.Before;\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Id.id;\n","import static org.junit.Assert.assertEquals;\n","\n","public class CoProduct4Test {\n","\n","    private CoProduct4<Integer, String, Boolean, Double, ?> a;\n","    private CoProduct4<Integer, String, Boolean, Double, ?> b;\n","    private CoProduct4<Integer, String, Boolean, Double, ?> c;\n","    private CoProduct4<Integer, String, Boolean, Double, ?> d;\n","\n","    @Before\n","    public void setUp() {\n","        a = new CoProduct4<Integer, String, Boolean, Double, CoProduct4<Integer, String, Boolean, Double, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super Integer, ? extends R> aFn, Fn1<? super String, ? extends R> bFn,\n","                               Fn1<? super Boolean, ? extends R> cFn, Fn1<? super Double, ? extends R> dFn) {\n","                return aFn.apply(1);\n","            }\n","        };\n","        b = new CoProduct4<Integer, String, Boolean, Double, CoProduct4<Integer, String, Boolean, Double, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super Integer, ? extends R> aFn, Fn1<? super String, ? extends R> bFn,\n","                               Fn1<? super Boolean, ? extends R> cFn, Fn1<? super Double, ? extends R> dFn) {\n","                return bFn.apply(\"two\");\n","            }\n","        };\n","        c = new CoProduct4<Integer, String, Boolean, Double, CoProduct4<Integer, String, Boolean, Double, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super Integer, ? extends R> aFn, Fn1<? super String, ? extends R> bFn,\n","                               Fn1<? super Boolean, ? extends R> cFn, Fn1<? super Double, ? extends R> dFn) {\n","                return cFn.apply(true);\n","            }\n","        };\n","        d = new CoProduct4<Integer, String, Boolean, Double, CoProduct4<Integer, String, Boolean, Double, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super Integer, ? extends R> aFn, Fn1<? super String, ? extends R> bFn,\n","                               Fn1<? super Boolean, ? extends R> cFn, Fn1<? super Double, ? extends R> dFn) {\n","                return dFn.apply(4D);\n","            }\n","        };\n","    }\n","\n","    @Test\n","    public void match() {\n","        assertEquals(1, a.match(id(), id(), id(), id()));\n","        assertEquals(\"two\", b.match(id(), id(), id(), id()));\n","        assertEquals(true, c.match(id(), id(), id(), id()));\n","        assertEquals(4D, d.match(id(), id(), id(), id()));\n","    }\n","\n","    @Test\n","    public void diverge() {\n","        assertEquals(1, a.diverge().match(id(), id(), id(), id(), id()));\n","        assertEquals(\"two\", b.diverge().match(id(), id(), id(), id(), id()));\n","        assertEquals(true, c.diverge().match(id(), id(), id(), id(), id()));\n","        assertEquals(4D, d.diverge().match(id(), id(), id(), id(), id()));\n","    }\n","\n","    @Test\n","    public void converge() {\n","        Fn1<Double, CoProduct3<Integer, String, Boolean, ?>> convergenceFn = x ->\n","                x.equals(1d)\n","                ? Choice3.a(1)\n","                : x.equals(2d)\n","                  ? Choice3.b(\"b\")\n","                  : Choice3.c(false);\n","        assertEquals(1, a.converge(convergenceFn).match(id(), id(), id()));\n","        assertEquals(\"two\", b.converge(convergenceFn).match(id(), id(), id()));\n","        assertEquals(true, c.converge(convergenceFn).match(id(), id(), id()));\n","        assertEquals(1, Choice4.<Integer, String, Boolean, Double>d(1D).converge(convergenceFn).match(id(), id(), id()));\n","        assertEquals(\"b\", Choice4.<Integer, String, Boolean, Double>d(2D).converge(convergenceFn).match(id(), id(), id()));\n","        assertEquals(false, Choice4.<Integer, String, Boolean, Double>d(3D).converge(convergenceFn).match(id(), id(), id()));\n","    }\n","\n","    @Test\n","    public void projections() {\n","        assertEquals(tuple(just(1), nothing(), nothing(), nothing()), a.project());\n","        assertEquals(tuple(nothing(), just(\"two\"), nothing(), nothing()), b.project());\n","        assertEquals(tuple(nothing(), nothing(), just(true), nothing()), c.project());\n","        assertEquals(tuple(nothing(), nothing(), nothing(), just(4D)), d.project());\n","\n","        assertEquals(tuple(a.projectA(), a.projectB(), a.projectC(), a.projectD()), a.project());\n","        assertEquals(tuple(b.projectA(), b.projectB(), b.projectC(), b.projectD()), b.project());\n","        assertEquals(tuple(c.projectA(), c.projectB(), c.projectC(), c.projectD()), c.project());\n","        assertEquals(tuple(d.projectA(), d.projectB(), d.projectC(), d.projectD()), d.project());\n","    }\n","\n","    @Test\n","    public void embed() {\n","        assertEquals(just(a), a.embed(Maybe::just, Maybe::just, Maybe::just, Maybe::just));\n","        assertEquals(just(b), b.embed(Maybe::just, Maybe::just, Maybe::just, Maybe::just));\n","        assertEquals(just(c), c.embed(Maybe::just, Maybe::just, Maybe::just, Maybe::just));\n","        assertEquals(just(d), d.embed(Maybe::just, Maybe::just, Maybe::just, Maybe::just));\n","    }\n","}"],"method_lines_dic":{"CoProduct4::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>)":[38,41],"CoProduct4::::diverge()":[50,59],"CoProduct4::::converge(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct3<A, B, C, ?>>)":[69,72],"CoProduct4::::project()":[80,85],"CoProduct4::::projectA()":[92,94],"CoProduct4::::projectB()":[101,103],"CoProduct4::::projectC()":[110,112],"CoProduct4::::projectD()":[119,121],"CoProduct4::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>)":[135,145]},"test_method_lines_dic":{"CoProduct4Test::::setUp()":[23,53],"CoProduct4Test::::match()":[55,61],"CoProduct4Test::::diverge()":[63,69],"CoProduct4Test::::converge()":[71,85],"CoProduct4Test::::projections()":[87,98],"CoProduct4Test::::embed()":[100,106]},"reverse_method_lines_dic":{"38":"CoProduct4::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>)","39":"CoProduct4::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>)","40":"CoProduct4::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>)","41":"CoProduct4::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>)","50":"CoProduct4::::diverge()","51":"CoProduct4::::diverge()","52":"CoProduct4::::diverge()","53":"CoProduct4::::diverge()","54":"CoProduct4::::diverge()","55":"CoProduct4::::diverge()","56":"CoProduct4::::diverge()","57":"CoProduct4::::diverge()","58":"CoProduct4::::diverge()","59":"CoProduct4::::diverge()","69":"CoProduct4::::converge(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct3<A, B, C, ?>>)","70":"CoProduct4::::converge(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct3<A, B, C, ?>>)","71":"CoProduct4::::converge(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct3<A, B, C, ?>>)","72":"CoProduct4::::converge(com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct3<A, B, C, ?>>)","80":"CoProduct4::::project()","81":"CoProduct4::::project()","82":"CoProduct4::::project()","83":"CoProduct4::::project()","84":"CoProduct4::::project()","85":"CoProduct4::::project()","92":"CoProduct4::::projectA()","93":"CoProduct4::::projectA()","94":"CoProduct4::::projectA()","101":"CoProduct4::::projectB()","102":"CoProduct4::::projectB()","103":"CoProduct4::::projectB()","110":"CoProduct4::::projectC()","111":"CoProduct4::::projectC()","112":"CoProduct4::::projectC()","119":"CoProduct4::::projectD()","120":"CoProduct4::::projectD()","121":"CoProduct4::::projectD()","135":"CoProduct4::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>)","136":"CoProduct4::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>)","137":"CoProduct4::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>)","138":"CoProduct4::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>)","139":"CoProduct4::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>)","140":"CoProduct4::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>)","141":"CoProduct4::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>)","142":"CoProduct4::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>)","143":"CoProduct4::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>)","144":"CoProduct4::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>)","145":"CoProduct4::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP4, ? extends R>)"},"test_reverse_method_lines_dic":{"23":"CoProduct4Test::::setUp()","24":"CoProduct4Test::::setUp()","25":"CoProduct4Test::::setUp()","26":"CoProduct4Test::::setUp()","27":"CoProduct4Test::::setUp()","28":"CoProduct4Test::::setUp()","29":"CoProduct4Test::::setUp()","30":"CoProduct4Test::::setUp()","31":"CoProduct4Test::::setUp()","32":"CoProduct4Test::::setUp()","33":"CoProduct4Test::::setUp()","34":"CoProduct4Test::::setUp()","35":"CoProduct4Test::::setUp()","36":"CoProduct4Test::::setUp()","37":"CoProduct4Test::::setUp()","38":"CoProduct4Test::::setUp()","39":"CoProduct4Test::::setUp()","40":"CoProduct4Test::::setUp()","41":"CoProduct4Test::::setUp()","42":"CoProduct4Test::::setUp()","43":"CoProduct4Test::::setUp()","44":"CoProduct4Test::::setUp()","45":"CoProduct4Test::::setUp()","46":"CoProduct4Test::::setUp()","47":"CoProduct4Test::::setUp()","48":"CoProduct4Test::::setUp()","49":"CoProduct4Test::::setUp()","50":"CoProduct4Test::::setUp()","51":"CoProduct4Test::::setUp()","52":"CoProduct4Test::::setUp()","53":"CoProduct4Test::::setUp()","55":"CoProduct4Test::::match()","56":"CoProduct4Test::::match()","57":"CoProduct4Test::::match()","58":"CoProduct4Test::::match()","59":"CoProduct4Test::::match()","60":"CoProduct4Test::::match()","61":"CoProduct4Test::::match()","63":"CoProduct4Test::::diverge()","64":"CoProduct4Test::::diverge()","65":"CoProduct4Test::::diverge()","66":"CoProduct4Test::::diverge()","67":"CoProduct4Test::::diverge()","68":"CoProduct4Test::::diverge()","69":"CoProduct4Test::::diverge()","71":"CoProduct4Test::::converge()","72":"CoProduct4Test::::converge()","73":"CoProduct4Test::::converge()","74":"CoProduct4Test::::converge()","75":"CoProduct4Test::::converge()","76":"CoProduct4Test::::converge()","77":"CoProduct4Test::::converge()","78":"CoProduct4Test::::converge()","79":"CoProduct4Test::::converge()","80":"CoProduct4Test::::converge()","81":"CoProduct4Test::::converge()","82":"CoProduct4Test::::converge()","83":"CoProduct4Test::::converge()","84":"CoProduct4Test::::converge()","85":"CoProduct4Test::::converge()","87":"CoProduct4Test::::projections()","88":"CoProduct4Test::::projections()","89":"CoProduct4Test::::projections()","90":"CoProduct4Test::::projections()","91":"CoProduct4Test::::projections()","92":"CoProduct4Test::::projections()","93":"CoProduct4Test::::projections()","94":"CoProduct4Test::::projections()","95":"CoProduct4Test::::projections()","96":"CoProduct4Test::::projections()","97":"CoProduct4Test::::projections()","98":"CoProduct4Test::::projections()","100":"CoProduct4Test::::embed()","101":"CoProduct4Test::::embed()","102":"CoProduct4Test::::embed()","103":"CoProduct4Test::::embed()","104":"CoProduct4Test::::embed()","105":"CoProduct4Test::::embed()","106":"CoProduct4Test::::embed()"},"tests":[{"test_lines":[63,69],"covered_lines":[51,56]},{"test_lines":[71,85],"covered_lines":[71]},{"test_lines":[87,98],"covered_lines":[81,82,83,84,93,102,111,120]},{"test_lines":[100,106],"covered_lines":[140,141,142,143,144]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/adt/coproduct/CoProduct6.java":{"class_content":["package com.jnape.palatable.lambda.adt.coproduct;\n","\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.adt.choice.Choice5;\n","import com.jnape.palatable.lambda.adt.product.Product6;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.Fn1.fn1;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","\n","/**\n"," * A generalization of the coproduct of six types.\n"," *\n"," * @param <A>   the first possible type\n"," * @param <B>   the second possible type\n"," * @param <C>   the third possible type\n"," * @param <D>   the fourth possible type\n"," * @param <E>   the fifth possible type\n"," * @param <F>   the sixth possible type\n"," * @param <CP6> the recursive type of this coproduct (used for embedding)\n"," * @see CoProduct2\n"," */\n","@FunctionalInterface\n","public interface CoProduct6<A, B, C, D, E, F, CP6 extends CoProduct6<A, B, C, D, E, F, ?>> {\n","\n","    /**\n","     * Type-safe convergence requiring a match against all potential types.\n","     *\n","     * @param <R> result type\n","     * @param aFn morphism <code>A -&gt; R</code>\n","     * @param bFn morphism <code>B -&gt; R</code>\n","     * @param cFn morphism <code>C -&gt; R</code>\n","     * @param dFn morphism <code>D -&gt; R</code>\n","     * @param eFn morphism <code>E -&gt; R</code>\n","     * @param fFn morphism <code>F -&gt; R</code>\n","     * @return the result of applying the appropriate morphism from whichever type is represented by this coproduct to R\n","     * @see CoProduct2#match(Fn1, Fn1)\n","     */\n","    <R> R match(Fn1<? super A, ? extends R> aFn,\n","                Fn1<? super B, ? extends R> bFn,\n","                Fn1<? super C, ? extends R> cFn,\n","                Fn1<? super D, ? extends R> dFn,\n","                Fn1<? super E, ? extends R> eFn,\n","                Fn1<? super F, ? extends R> fFn);\n","\n","    /**\n","     * Diverge this coproduct by introducing another possible type that it could represent.\n","     *\n","     * @param <G> the additional possible type of this coproduct\n","     * @return a Coproduct7&lt;A, B, C, D, E, F, G&gt;\n","     * @see CoProduct2#diverge()\n","     */\n","    default <G> CoProduct7<A, B, C, D, E, F, G, ? extends CoProduct7<A, B, C, D, E, F, G, ?>> diverge() {\n","        return new CoProduct7<A, B, C, D, E, F, G, CoProduct7<A, B, C, D, E, F, G, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                               Fn1<? super C, ? extends R> cFn, Fn1<? super D, ? extends R> dFn,\n","                               Fn1<? super E, ? extends R> eFn, Fn1<? super F, ? extends R> fFn,\n","                               Fn1<? super G, ? extends R> gFn) {\n","                return CoProduct6.this.match(aFn, bFn, cFn, dFn, eFn, fFn);\n","            }\n","        };\n","    }\n","\n","    /**\n","     * Converge this coproduct down to a lower order coproduct by mapping the last possible type into an earlier\n","     * possible type.\n","     *\n","     * @param convergenceFn morphism <code>F -&gt; {@link CoProduct5}&lt;A, B, C, D, E&gt;</code>\n","     * @return a {@link CoProduct5}&lt;A, B, C, D, E&gt;\n","     */\n","    default CoProduct5<A, B, C, D, E, ? extends CoProduct5<A, B, C, D, E, ?>> converge(\n","            Fn1<? super F, ? extends CoProduct5<A, B, C, D, E, ?>> convergenceFn) {\n","        return match(Choice5::a, Choice5::b, Choice5::c, Choice5::d, Choice5::e, convergenceFn::apply);\n","    }\n","\n","    /**\n","     * Project this coproduct onto a product.\n","     *\n","     * @return a product of the coproduct projection\n","     * @see CoProduct2#project()\n","     */\n","    default Product6<Maybe<A>, Maybe<B>, Maybe<C>, Maybe<D>, Maybe<E>, Maybe<F>> project() {\n","        return match(a -> tuple(just(a), nothing(), nothing(), nothing(), nothing(), nothing()),\n","                     b -> tuple(nothing(), just(b), nothing(), nothing(), nothing(), nothing()),\n","                     c -> tuple(nothing(), nothing(), just(c), nothing(), nothing(), nothing()),\n","                     d -> tuple(nothing(), nothing(), nothing(), just(d), nothing(), nothing()),\n","                     e -> tuple(nothing(), nothing(), nothing(), nothing(), just(e), nothing()),\n","                     f -> tuple(nothing(), nothing(), nothing(), nothing(), nothing(), just(f)));\n","    }\n","\n","    /**\n","     * Convenience method for projecting this coproduct onto a product and then extracting the first slot value.\n","     *\n","     * @return an optional value representing the projection of the \"a\" type index\n","     */\n","    default Maybe<A> projectA() {\n","        return project()._1();\n","    }\n","\n","    /**\n","     * Convenience method for projecting this coproduct onto a product and then extracting the second slot value.\n","     *\n","     * @return an optional value representing the projection of the \"b\" type index\n","     */\n","    default Maybe<B> projectB() {\n","        return project()._2();\n","    }\n","\n","    /**\n","     * Convenience method for projecting this coproduct onto a product and then extracting the third slot value.\n","     *\n","     * @return an optional value representing the projection of the \"c\" type index\n","     */\n","    default Maybe<C> projectC() {\n","        return project()._3();\n","    }\n","\n","    /**\n","     * Convenience method for projecting this coproduct onto a product and then extracting the fourth slot value.\n","     *\n","     * @return an optional value representing the projection of the \"d\" type index\n","     */\n","    default Maybe<D> projectD() {\n","        return project()._4();\n","    }\n","\n","    /**\n","     * Convenience method for projecting this coproduct onto a product and then extracting the fifth slot value.\n","     *\n","     * @return an optional value representing the projection of the \"e\" type index\n","     */\n","    default Maybe<E> projectE() {\n","        return project()._5();\n","    }\n","\n","    /**\n","     * Convenience method for projecting this coproduct onto a product and then extracting the sixth slot value.\n","     *\n","     * @return an optional value representing the projection of the \"f\" type index\n","     */\n","    default Maybe<F> projectF() {\n","        return project()._6();\n","    }\n","\n","    /**\n","     * Embed this coproduct inside another value; that is, given morphisms from this coproduct to <code>R</code>, apply\n","     * the appropriate morphism to this coproduct as a whole. Like {@link CoProduct6#match}, but without unwrapping the\n","     * value.\n","     *\n","     * @param <R> result type\n","     * @param aFn morphism <code>A v B v C v D v E v F -&gt; R</code>, applied in the <code>A</code> case\n","     * @param bFn morphism <code>A v B v C v D v E v F -&gt; R</code>, applied in the <code>B</code> case\n","     * @param cFn morphism <code>A v B v C v D v E v F -&gt; R</code>, applied in the <code>C</code> case\n","     * @param dFn morphism <code>A v B v C v D v E v F -&gt; R</code>, applied in the <code>D</code> case\n","     * @param eFn morphism <code>A v B v C v D v E v F -&gt; R</code>, applied in the <code>E</code> case\n","     * @param fFn morphism <code>A v B v C v D v E v F -&gt; R</code>, applied in the <code>F</code> case\n","     * @return the result of applying the appropriate morphism to this coproduct\n","     */\n","    @SuppressWarnings(\"unchecked\")\n","    default <R> R embed(Fn1<? super CP6, ? extends R> aFn,\n","                        Fn1<? super CP6, ? extends R> bFn,\n","                        Fn1<? super CP6, ? extends R> cFn,\n","                        Fn1<? super CP6, ? extends R> dFn,\n","                        Fn1<? super CP6, ? extends R> eFn,\n","                        Fn1<? super CP6, ? extends R> fFn) {\n","        return this.<Fn1<CP6, R>>match(constantly(fn1(aFn)),\n","                                       constantly(fn1(bFn)),\n","                                       constantly(fn1(cFn)),\n","                                       constantly(fn1(dFn)),\n","                                       constantly(fn1(eFn)),\n","                                       constantly(fn1(fFn)))\n","                .apply((CP6) this);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.adt.coproduct;\n","\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.adt.choice.Choice5;\n","import com.jnape.palatable.lambda.adt.choice.Choice6;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import org.junit.Before;\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Id.id;\n","import static org.junit.Assert.assertEquals;\n","\n","public class CoProduct6Test {\n","\n","    private CoProduct6<Integer, String, Boolean, Double, Character, Long, ?> a;\n","    private CoProduct6<Integer, String, Boolean, Double, Character, Long, ?> b;\n","    private CoProduct6<Integer, String, Boolean, Double, Character, Long, ?> c;\n","    private CoProduct6<Integer, String, Boolean, Double, Character, Long, ?> d;\n","    private CoProduct6<Integer, String, Boolean, Double, Character, Long, ?> e;\n","    private CoProduct6<Integer, String, Boolean, Double, Character, Long, ?> f;\n","\n","    @Before\n","    public void setUp() {\n","        a = new CoProduct6<Integer, String, Boolean, Double, Character, Long, CoProduct6<Integer, String, Boolean, Double, Character, Long, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super Integer, ? extends R> aFn, Fn1<? super String, ? extends R> bFn,\n","                               Fn1<? super Boolean, ? extends R> cFn, Fn1<? super Double, ? extends R> dFn,\n","                               Fn1<? super Character, ? extends R> eFn, Fn1<? super Long, ? extends R> fFn) {\n","                return aFn.apply(1);\n","            }\n","        };\n","        b = new CoProduct6<Integer, String, Boolean, Double, Character, Long, CoProduct6<Integer, String, Boolean, Double, Character, Long, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super Integer, ? extends R> aFn, Fn1<? super String, ? extends R> bFn,\n","                               Fn1<? super Boolean, ? extends R> cFn, Fn1<? super Double, ? extends R> dFn,\n","                               Fn1<? super Character, ? extends R> eFn, Fn1<? super Long, ? extends R> fFn) {\n","                return bFn.apply(\"two\");\n","            }\n","        };\n","        c = new CoProduct6<Integer, String, Boolean, Double, Character, Long, CoProduct6<Integer, String, Boolean, Double, Character, Long, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super Integer, ? extends R> aFn, Fn1<? super String, ? extends R> bFn,\n","                               Fn1<? super Boolean, ? extends R> cFn, Fn1<? super Double, ? extends R> dFn,\n","                               Fn1<? super Character, ? extends R> eFn, Fn1<? super Long, ? extends R> fFn) {\n","                return cFn.apply(true);\n","            }\n","        };\n","        d = new CoProduct6<Integer, String, Boolean, Double, Character, Long, CoProduct6<Integer, String, Boolean, Double, Character, Long, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super Integer, ? extends R> aFn, Fn1<? super String, ? extends R> bFn,\n","                               Fn1<? super Boolean, ? extends R> cFn, Fn1<? super Double, ? extends R> dFn,\n","                               Fn1<? super Character, ? extends R> eFn, Fn1<? super Long, ? extends R> fFn) {\n","                return dFn.apply(4D);\n","            }\n","        };\n","        e = new CoProduct6<Integer, String, Boolean, Double, Character, Long, CoProduct6<Integer, String, Boolean, Double, Character, Long, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super Integer, ? extends R> aFn, Fn1<? super String, ? extends R> bFn,\n","                               Fn1<? super Boolean, ? extends R> cFn, Fn1<? super Double, ? extends R> dFn,\n","                               Fn1<? super Character, ? extends R> eFn, Fn1<? super Long, ? extends R> fFn) {\n","                return eFn.apply('z');\n","            }\n","        };\n","        f = new CoProduct6<Integer, String, Boolean, Double, Character, Long, CoProduct6<Integer, String, Boolean, Double, Character, Long, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super Integer, ? extends R> aFn, Fn1<? super String, ? extends R> bFn,\n","                               Fn1<? super Boolean, ? extends R> cFn, Fn1<? super Double, ? extends R> dFn,\n","                               Fn1<? super Character, ? extends R> eFn, Fn1<? super Long, ? extends R> fFn) {\n","                return fFn.apply(5L);\n","            }\n","        };\n","    }\n","\n","    @Test\n","    public void match() {\n","        assertEquals(1, a.match(id(), id(), id(), id(), id(), id()));\n","        assertEquals(\"two\", b.match(id(), id(), id(), id(), id(), id()));\n","        assertEquals(true, c.match(id(), id(), id(), id(), id(), id()));\n","        assertEquals(4D, d.match(id(), id(), id(), id(), id(), id()));\n","        assertEquals('z', e.match(id(), id(), id(), id(), id(), id()));\n","        assertEquals(5L, f.match(id(), id(), id(), id(), id(), id()));\n","    }\n","\n","    @Test\n","    public void diverge() {\n","        assertEquals(1, a.diverge().match(id(), id(), id(), id(), id(), id(), id()));\n","        assertEquals(\"two\", b.diverge().match(id(), id(), id(), id(), id(), id(), id()));\n","        assertEquals(true, c.diverge().match(id(), id(), id(), id(), id(), id(), id()));\n","        assertEquals(4D, d.diverge().match(id(), id(), id(), id(), id(), id(), id()));\n","        assertEquals('z', e.diverge().match(id(), id(), id(), id(), id(), id(), id()));\n","        assertEquals(5L, f.diverge().match(id(), id(), id(), id(), id(), id(), id()));\n","    }\n","\n","    @Test\n","    public void converge() {\n","        Fn1<Long, CoProduct5<Integer, String, Boolean, Double, Character, ?>> convergenceFn = x ->\n","                x.equals(1L)\n","                ? Choice5.a(1)\n","                : x.equals(2L)\n","                  ? Choice5.b(\"b\")\n","                  : x.equals(3L)\n","                    ? Choice5.c(false)\n","                    : x.equals(4L)\n","                      ? Choice5.d(1D)\n","                      : Choice5.e('a');\n","        assertEquals(1, a.converge(convergenceFn).match(id(), id(), id(), id(), id()));\n","        assertEquals(\"two\", b.converge(convergenceFn).match(id(), id(), id(), id(), id()));\n","        assertEquals(true, c.converge(convergenceFn).match(id(), id(), id(), id(), id()));\n","        assertEquals(4D, d.converge(convergenceFn).match(id(), id(), id(), id(), id()));\n","        assertEquals('z', e.converge(convergenceFn).match(id(), id(), id(), id(), id()));\n","        assertEquals(1, Choice6.<Integer, String, Boolean, Double, Character, Long>f(1L).converge(convergenceFn).match(id(), id(), id(), id(), id()));\n","        assertEquals(\"b\", Choice6.<Integer, String, Boolean, Double, Character, Long>f(2L).converge(convergenceFn).match(id(), id(), id(), id(), id()));\n","        assertEquals(false, Choice6.<Integer, String, Boolean, Double, Character, Long>f(3L).converge(convergenceFn).match(id(), id(), id(), id(), id()));\n","        assertEquals(1d, Choice6.<Integer, String, Boolean, Double, Character, Long>f(4L).converge(convergenceFn).match(id(), id(), id(), id(), id()));\n","        assertEquals('a', Choice6.<Integer, String, Boolean, Double, Character, Long>f(5L).converge(convergenceFn).match(id(), id(), id(), id(), id()));\n","    }\n","\n","    @Test\n","    public void projections() {\n","        assertEquals(tuple(just(1), nothing(), nothing(), nothing(), nothing(), nothing()), a.project());\n","        assertEquals(tuple(nothing(), just(\"two\"), nothing(), nothing(), nothing(), nothing()), b.project());\n","        assertEquals(tuple(nothing(), nothing(), just(true), nothing(), nothing(), nothing()), c.project());\n","        assertEquals(tuple(nothing(), nothing(), nothing(), just(4D), nothing(), nothing()), d.project());\n","        assertEquals(tuple(nothing(), nothing(), nothing(), nothing(), just('z'), nothing()), e.project());\n","        assertEquals(tuple(nothing(), nothing(), nothing(), nothing(), nothing(), just(5L)), f.project());\n","\n","        assertEquals(tuple(a.projectA(), a.projectB(), a.projectC(), a.projectD(), a.projectE(), a.projectF()), a.project());\n","        assertEquals(tuple(b.projectA(), b.projectB(), b.projectC(), b.projectD(), b.projectE(), b.projectF()), b.project());\n","        assertEquals(tuple(c.projectA(), c.projectB(), c.projectC(), c.projectD(), c.projectE(), c.projectF()), c.project());\n","        assertEquals(tuple(d.projectA(), d.projectB(), d.projectC(), d.projectD(), d.projectE(), d.projectF()), d.project());\n","        assertEquals(tuple(e.projectA(), e.projectB(), e.projectC(), e.projectD(), e.projectE(), e.projectF()), e.project());\n","        assertEquals(tuple(f.projectA(), f.projectB(), f.projectC(), f.projectD(), f.projectE(), f.projectF()), f.project());\n","    }\n","\n","    @Test\n","    public void embed() {\n","        assertEquals(just(a), a.embed(Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just));\n","        assertEquals(just(b), b.embed(Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just));\n","        assertEquals(just(c), c.embed(Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just));\n","        assertEquals(just(d), d.embed(Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just));\n","        assertEquals(just(e), e.embed(Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just));\n","        assertEquals(just(f), f.embed(Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just));\n","    }\n","}"],"method_lines_dic":{"CoProduct6::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)":[42,47],"CoProduct6::::diverge()":[56,66],"CoProduct6::::converge(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct5<A, B, C, D, E, ?>>)":[75,78],"CoProduct6::::project()":[86,93],"CoProduct6::::projectA()":[100,102],"CoProduct6::::projectB()":[109,111],"CoProduct6::::projectC()":[118,120],"CoProduct6::::projectD()":[127,129],"CoProduct6::::projectE()":[136,138],"CoProduct6::::projectF()":[145,147],"CoProduct6::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>)":[163,177]},"test_method_lines_dic":{"CoProduct6Test::::setUp()":[25,75],"CoProduct6Test::::match()":[77,85],"CoProduct6Test::::diverge()":[87,95],"CoProduct6Test::::converge()":[97,119],"CoProduct6Test::::projections()":[121,136],"CoProduct6Test::::embed()":[138,146]},"reverse_method_lines_dic":{"42":"CoProduct6::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","43":"CoProduct6::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","44":"CoProduct6::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","45":"CoProduct6::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","46":"CoProduct6::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","47":"CoProduct6::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>)","56":"CoProduct6::::diverge()","57":"CoProduct6::::diverge()","58":"CoProduct6::::diverge()","59":"CoProduct6::::diverge()","60":"CoProduct6::::diverge()","61":"CoProduct6::::diverge()","62":"CoProduct6::::diverge()","63":"CoProduct6::::diverge()","64":"CoProduct6::::diverge()","65":"CoProduct6::::diverge()","66":"CoProduct6::::diverge()","75":"CoProduct6::::converge(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct5<A, B, C, D, E, ?>>)","76":"CoProduct6::::converge(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct5<A, B, C, D, E, ?>>)","77":"CoProduct6::::converge(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct5<A, B, C, D, E, ?>>)","78":"CoProduct6::::converge(com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct5<A, B, C, D, E, ?>>)","86":"CoProduct6::::project()","87":"CoProduct6::::project()","88":"CoProduct6::::project()","89":"CoProduct6::::project()","90":"CoProduct6::::project()","91":"CoProduct6::::project()","92":"CoProduct6::::project()","93":"CoProduct6::::project()","100":"CoProduct6::::projectA()","101":"CoProduct6::::projectA()","102":"CoProduct6::::projectA()","109":"CoProduct6::::projectB()","110":"CoProduct6::::projectB()","111":"CoProduct6::::projectB()","118":"CoProduct6::::projectC()","119":"CoProduct6::::projectC()","120":"CoProduct6::::projectC()","127":"CoProduct6::::projectD()","128":"CoProduct6::::projectD()","129":"CoProduct6::::projectD()","136":"CoProduct6::::projectE()","137":"CoProduct6::::projectE()","138":"CoProduct6::::projectE()","145":"CoProduct6::::projectF()","146":"CoProduct6::::projectF()","147":"CoProduct6::::projectF()","163":"CoProduct6::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>)","164":"CoProduct6::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>)","165":"CoProduct6::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>)","166":"CoProduct6::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>)","167":"CoProduct6::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>)","168":"CoProduct6::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>)","169":"CoProduct6::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>)","170":"CoProduct6::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>)","171":"CoProduct6::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>)","172":"CoProduct6::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>)","173":"CoProduct6::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>)","174":"CoProduct6::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>)","175":"CoProduct6::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>)","176":"CoProduct6::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>)","177":"CoProduct6::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP6, ? extends R>)"},"test_reverse_method_lines_dic":{"25":"CoProduct6Test::::setUp()","26":"CoProduct6Test::::setUp()","27":"CoProduct6Test::::setUp()","28":"CoProduct6Test::::setUp()","29":"CoProduct6Test::::setUp()","30":"CoProduct6Test::::setUp()","31":"CoProduct6Test::::setUp()","32":"CoProduct6Test::::setUp()","33":"CoProduct6Test::::setUp()","34":"CoProduct6Test::::setUp()","35":"CoProduct6Test::::setUp()","36":"CoProduct6Test::::setUp()","37":"CoProduct6Test::::setUp()","38":"CoProduct6Test::::setUp()","39":"CoProduct6Test::::setUp()","40":"CoProduct6Test::::setUp()","41":"CoProduct6Test::::setUp()","42":"CoProduct6Test::::setUp()","43":"CoProduct6Test::::setUp()","44":"CoProduct6Test::::setUp()","45":"CoProduct6Test::::setUp()","46":"CoProduct6Test::::setUp()","47":"CoProduct6Test::::setUp()","48":"CoProduct6Test::::setUp()","49":"CoProduct6Test::::setUp()","50":"CoProduct6Test::::setUp()","51":"CoProduct6Test::::setUp()","52":"CoProduct6Test::::setUp()","53":"CoProduct6Test::::setUp()","54":"CoProduct6Test::::setUp()","55":"CoProduct6Test::::setUp()","56":"CoProduct6Test::::setUp()","57":"CoProduct6Test::::setUp()","58":"CoProduct6Test::::setUp()","59":"CoProduct6Test::::setUp()","60":"CoProduct6Test::::setUp()","61":"CoProduct6Test::::setUp()","62":"CoProduct6Test::::setUp()","63":"CoProduct6Test::::setUp()","64":"CoProduct6Test::::setUp()","65":"CoProduct6Test::::setUp()","66":"CoProduct6Test::::setUp()","67":"CoProduct6Test::::setUp()","68":"CoProduct6Test::::setUp()","69":"CoProduct6Test::::setUp()","70":"CoProduct6Test::::setUp()","71":"CoProduct6Test::::setUp()","72":"CoProduct6Test::::setUp()","73":"CoProduct6Test::::setUp()","74":"CoProduct6Test::::setUp()","75":"CoProduct6Test::::setUp()","77":"CoProduct6Test::::match()","78":"CoProduct6Test::::match()","79":"CoProduct6Test::::match()","80":"CoProduct6Test::::match()","81":"CoProduct6Test::::match()","82":"CoProduct6Test::::match()","83":"CoProduct6Test::::match()","84":"CoProduct6Test::::match()","85":"CoProduct6Test::::match()","87":"CoProduct6Test::::diverge()","88":"CoProduct6Test::::diverge()","89":"CoProduct6Test::::diverge()","90":"CoProduct6Test::::diverge()","91":"CoProduct6Test::::diverge()","92":"CoProduct6Test::::diverge()","93":"CoProduct6Test::::diverge()","94":"CoProduct6Test::::diverge()","95":"CoProduct6Test::::diverge()","97":"CoProduct6Test::::converge()","98":"CoProduct6Test::::converge()","99":"CoProduct6Test::::converge()","100":"CoProduct6Test::::converge()","101":"CoProduct6Test::::converge()","102":"CoProduct6Test::::converge()","103":"CoProduct6Test::::converge()","104":"CoProduct6Test::::converge()","105":"CoProduct6Test::::converge()","106":"CoProduct6Test::::converge()","107":"CoProduct6Test::::converge()","108":"CoProduct6Test::::converge()","109":"CoProduct6Test::::converge()","110":"CoProduct6Test::::converge()","111":"CoProduct6Test::::converge()","112":"CoProduct6Test::::converge()","113":"CoProduct6Test::::converge()","114":"CoProduct6Test::::converge()","115":"CoProduct6Test::::converge()","116":"CoProduct6Test::::converge()","117":"CoProduct6Test::::converge()","118":"CoProduct6Test::::converge()","119":"CoProduct6Test::::converge()","121":"CoProduct6Test::::projections()","122":"CoProduct6Test::::projections()","123":"CoProduct6Test::::projections()","124":"CoProduct6Test::::projections()","125":"CoProduct6Test::::projections()","126":"CoProduct6Test::::projections()","127":"CoProduct6Test::::projections()","128":"CoProduct6Test::::projections()","129":"CoProduct6Test::::projections()","130":"CoProduct6Test::::projections()","131":"CoProduct6Test::::projections()","132":"CoProduct6Test::::projections()","133":"CoProduct6Test::::projections()","134":"CoProduct6Test::::projections()","135":"CoProduct6Test::::projections()","136":"CoProduct6Test::::projections()","138":"CoProduct6Test::::embed()","139":"CoProduct6Test::::embed()","140":"CoProduct6Test::::embed()","141":"CoProduct6Test::::embed()","142":"CoProduct6Test::::embed()","143":"CoProduct6Test::::embed()","144":"CoProduct6Test::::embed()","145":"CoProduct6Test::::embed()","146":"CoProduct6Test::::embed()"},"tests":[{"test_lines":[87,95],"covered_lines":[57,63]},{"test_lines":[97,119],"covered_lines":[77]},{"test_lines":[121,136],"covered_lines":[87,88,89,90,91,92,101,110,119,128,137,146]},{"test_lines":[138,146],"covered_lines":[170,171,172,173,174,175,176]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/adt/coproduct/CoProduct8.java":{"class_content":["package com.jnape.palatable.lambda.adt.coproduct;\n","\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.adt.choice.Choice7;\n","import com.jnape.palatable.lambda.adt.product.Product8;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.Fn1.fn1;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","\n","/**\n"," * A generalization of the coproduct of eight types.\n"," *\n"," * @param <A>   the first possible type\n"," * @param <B>   the second possible type\n"," * @param <C>   the third possible type\n"," * @param <D>   the fourth possible type\n"," * @param <E>   the fifth possible type\n"," * @param <F>   the sixth possible type\n"," * @param <G>   the seventh possible type\n"," * @param <H>   the eighth possible type\n"," * @param <CP8> the recursive type of this coproduct (used for embedding)\n"," * @see CoProduct2\n"," */\n","@FunctionalInterface\n","public interface CoProduct8<A, B, C, D, E, F, G, H, CP8 extends CoProduct8<A, B, C, D, E, F, G, H, ?>> {\n","\n","    /**\n","     * Type-safe convergence requiring a match against all potential types.\n","     *\n","     * @param <R> result type\n","     * @param aFn morphism <code>A -&gt; R</code>\n","     * @param bFn morphism <code>B -&gt; R</code>\n","     * @param cFn morphism <code>C -&gt; R</code>\n","     * @param dFn morphism <code>D -&gt; R</code>\n","     * @param eFn morphism <code>E -&gt; R</code>\n","     * @param fFn morphism <code>F -&gt; R</code>\n","     * @param gFn morphism <code>G -&gt; R</code>\n","     * @param hFn morphism <code>H -&gt; R</code>\n","     * @return the result of applying the appropriate morphism from whichever type is represented by this coproduct to R\n","     * @see CoProduct2#match(Fn1, Fn1)\n","     */\n","    <R> R match(Fn1<? super A, ? extends R> aFn,\n","                Fn1<? super B, ? extends R> bFn,\n","                Fn1<? super C, ? extends R> cFn,\n","                Fn1<? super D, ? extends R> dFn,\n","                Fn1<? super E, ? extends R> eFn,\n","                Fn1<? super F, ? extends R> fFn,\n","                Fn1<? super G, ? extends R> gFn,\n","                Fn1<? super H, ? extends R> hFn);\n","\n","    /**\n","     * Converge this coproduct down to a lower order coproduct by mapping the last possible type into an earlier\n","     * possible type.\n","     *\n","     * @param convergenceFn morphism <code>G -&gt; {@link CoProduct6}&lt;A, B, C, D, E, F, G&gt;</code>\n","     * @return a {@link CoProduct7}&lt;A, B, C, D, E, F, G&gt;\n","     */\n","    default CoProduct7<A, B, C, D, E, F, G, ? extends CoProduct7<A, B, C, D, E, F, G, ?>> converge(\n","            Fn1<? super H, ? extends CoProduct7<A, B, C, D, E, F, G, ?>> convergenceFn) {\n","        return match(Choice7::a, Choice7::b, Choice7::c, Choice7::d, Choice7::e, Choice7::f, Choice7::g,\n","                     convergenceFn::apply);\n","    }\n","\n","    /**\n","     * Project this coproduct onto a product.\n","     *\n","     * @return a product of the coproduct projection\n","     * @see CoProduct2#project()\n","     */\n","    default Product8<Maybe<A>, Maybe<B>, Maybe<C>, Maybe<D>, Maybe<E>, Maybe<F>, Maybe<G>, Maybe<H>> project() {\n","        return match(a -> tuple(just(a), nothing(), nothing(), nothing(), nothing(), nothing(), nothing(), nothing()),\n","                     b -> tuple(nothing(), just(b), nothing(), nothing(), nothing(), nothing(), nothing(), nothing()),\n","                     c -> tuple(nothing(), nothing(), just(c), nothing(), nothing(), nothing(), nothing(), nothing()),\n","                     d -> tuple(nothing(), nothing(), nothing(), just(d), nothing(), nothing(), nothing(), nothing()),\n","                     e -> tuple(nothing(), nothing(), nothing(), nothing(), just(e), nothing(), nothing(), nothing()),\n","                     f -> tuple(nothing(), nothing(), nothing(), nothing(), nothing(), just(f), nothing(), nothing()),\n","                     g -> tuple(nothing(), nothing(), nothing(), nothing(), nothing(), nothing(), just(g), nothing()),\n","                     h -> tuple(nothing(), nothing(), nothing(), nothing(), nothing(), nothing(), nothing(), just(h)));\n","    }\n","\n","    /**\n","     * Convenience method for projecting this coproduct onto a product and then extracting the first slot value.\n","     *\n","     * @return an optional value representing the projection of the \"a\" type index\n","     */\n","    default Maybe<A> projectA() {\n","        return project()._1();\n","    }\n","\n","    /**\n","     * Convenience method for projecting this coproduct onto a product and then extracting the second slot value.\n","     *\n","     * @return an optional value representing the projection of the \"b\" type index\n","     */\n","    default Maybe<B> projectB() {\n","        return project()._2();\n","    }\n","\n","    /**\n","     * Convenience method for projecting this coproduct onto a product and then extracting the third slot value.\n","     *\n","     * @return an optional value representing the projection of the \"c\" type index\n","     */\n","    default Maybe<C> projectC() {\n","        return project()._3();\n","    }\n","\n","    /**\n","     * Convenience method for projecting this coproduct onto a product and then extracting the fourth slot value.\n","     *\n","     * @return an optional value representing the projection of the \"d\" type index\n","     */\n","    default Maybe<D> projectD() {\n","        return project()._4();\n","    }\n","\n","    /**\n","     * Convenience method for projecting this coproduct onto a product and then extracting the fifth slot value.\n","     *\n","     * @return an optional value representing the projection of the \"e\" type index\n","     */\n","    default Maybe<E> projectE() {\n","        return project()._5();\n","    }\n","\n","    /**\n","     * Convenience method for projecting this coproduct onto a product and then extracting the sixth slot value.\n","     *\n","     * @return an optional value representing the projection of the \"f\" type index\n","     */\n","    default Maybe<F> projectF() {\n","        return project()._6();\n","    }\n","\n","    /**\n","     * Convenience method for projecting this coproduct onto a product and then extracting the seventh slot value.\n","     *\n","     * @return an optional value representing the projection of the \"g\" type index\n","     */\n","    default Maybe<G> projectG() {\n","        return project()._7();\n","    }\n","\n","    /**\n","     * Convenience method for projecting this coproduct onto a product and then extracting the eighth slot value.\n","     *\n","     * @return an optional value representing the projection of the \"h\" type index\n","     */\n","    default Maybe<H> projectH() {\n","        return project()._8();\n","    }\n","\n","    /**\n","     * Embed this coproduct inside another value; that is, given morphisms from this coproduct to <code>R</code>, apply\n","     * the appropriate morphism to this coproduct as a whole. Like {@link CoProduct8#match}, but without unwrapping the\n","     * value.\n","     *\n","     * @param <R> result type\n","     * @param aFn morphism <code>A v B v C v D v E v F v G v H -&gt; R</code>, applied in the <code>A</code> case\n","     * @param bFn morphism <code>A v B v C v D v E v F v G v H -&gt; R</code>, applied in the <code>B</code> case\n","     * @param cFn morphism <code>A v B v C v D v E v F v G v H -&gt; R</code>, applied in the <code>C</code> case\n","     * @param dFn morphism <code>A v B v C v D v E v F v G v H -&gt; R</code>, applied in the <code>D</code> case\n","     * @param eFn morphism <code>A v B v C v D v E v F v G v H -&gt; R</code>, applied in the <code>E</code> case\n","     * @param fFn morphism <code>A v B v C v D v E v F v G v H -&gt; R</code>, applied in the <code>F</code> case\n","     * @param gFn morphism <code>A v B v C v D v E v F v G v H -&gt; R</code>, applied in the <code>G</code> case\n","     * @param hFn morphism <code>A v B v C v D v E v F v G v H -&gt; R</code>, applied in the <code>H</code> case\n","     * @return the result of applying the appropriate morphism to this coproduct\n","     */\n","    @SuppressWarnings(\"unchecked\")\n","    default <R> R embed(Fn1<? super CP8, ? extends R> aFn,\n","                        Fn1<? super CP8, ? extends R> bFn,\n","                        Fn1<? super CP8, ? extends R> cFn,\n","                        Fn1<? super CP8, ? extends R> dFn,\n","                        Fn1<? super CP8, ? extends R> eFn,\n","                        Fn1<? super CP8, ? extends R> fFn,\n","                        Fn1<? super CP8, ? extends R> gFn,\n","                        Fn1<? super CP8, ? extends R> hFn) {\n","        return this.<Fn1<CP8, R>>match(constantly(fn1(aFn)),\n","                                       constantly(fn1(bFn)),\n","                                       constantly(fn1(cFn)),\n","                                       constantly(fn1(dFn)),\n","                                       constantly(fn1(eFn)),\n","                                       constantly(fn1(fFn)),\n","                                       constantly(fn1(gFn)),\n","                                       constantly(fn1(hFn)))\n","                .apply((CP8) this);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.adt.coproduct;\n","\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.adt.choice.Choice7;\n","import com.jnape.palatable.lambda.adt.choice.Choice8;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import org.junit.Before;\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Id.id;\n","import static org.junit.Assert.assertEquals;\n","\n","public class CoProduct8Test {\n","\n","    private CoProduct8<Integer, String, Boolean, Double, Character, Long, Float, Short, ?> a;\n","    private CoProduct8<Integer, String, Boolean, Double, Character, Long, Float, Short, ?> b;\n","    private CoProduct8<Integer, String, Boolean, Double, Character, Long, Float, Short, ?> c;\n","    private CoProduct8<Integer, String, Boolean, Double, Character, Long, Float, Short, ?> d;\n","    private CoProduct8<Integer, String, Boolean, Double, Character, Long, Float, Short, ?> e;\n","    private CoProduct8<Integer, String, Boolean, Double, Character, Long, Float, Short, ?> f;\n","    private CoProduct8<Integer, String, Boolean, Double, Character, Long, Float, Short, ?> g;\n","    private CoProduct8<Integer, String, Boolean, Double, Character, Long, Float, Short, ?> h;\n","\n","    @Before\n","    public void setUp() {\n","        a = new CoProduct8<Integer, String, Boolean, Double, Character, Long, Float, Short, CoProduct8<Integer, String, Boolean, Double, Character, Long, Float, Short, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super Integer, ? extends R> aFn, Fn1<? super String, ? extends R> bFn,\n","                               Fn1<? super Boolean, ? extends R> cFn, Fn1<? super Double, ? extends R> dFn,\n","                               Fn1<? super Character, ? extends R> eFn, Fn1<? super Long, ? extends R> fFn,\n","                               Fn1<? super Float, ? extends R> gFn, Fn1<? super Short, ? extends R> hFn) {\n","                return aFn.apply(1);\n","            }\n","        };\n","        b = new CoProduct8<Integer, String, Boolean, Double, Character, Long, Float, Short, CoProduct8<Integer, String, Boolean, Double, Character, Long, Float, Short, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super Integer, ? extends R> aFn, Fn1<? super String, ? extends R> bFn,\n","                               Fn1<? super Boolean, ? extends R> cFn, Fn1<? super Double, ? extends R> dFn,\n","                               Fn1<? super Character, ? extends R> eFn, Fn1<? super Long, ? extends R> fFn,\n","                               Fn1<? super Float, ? extends R> gFn, Fn1<? super Short, ? extends R> hFn) {\n","                return bFn.apply(\"two\");\n","            }\n","        };\n","        c = new CoProduct8<Integer, String, Boolean, Double, Character, Long, Float, Short, CoProduct8<Integer, String, Boolean, Double, Character, Long, Float, Short, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super Integer, ? extends R> aFn, Fn1<? super String, ? extends R> bFn,\n","                               Fn1<? super Boolean, ? extends R> cFn, Fn1<? super Double, ? extends R> dFn,\n","                               Fn1<? super Character, ? extends R> eFn, Fn1<? super Long, ? extends R> fFn,\n","                               Fn1<? super Float, ? extends R> gFn, Fn1<? super Short, ? extends R> hFn) {\n","                return cFn.apply(true);\n","            }\n","        };\n","        d = new CoProduct8<Integer, String, Boolean, Double, Character, Long, Float, Short, CoProduct8<Integer, String, Boolean, Double, Character, Long, Float, Short, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super Integer, ? extends R> aFn, Fn1<? super String, ? extends R> bFn,\n","                               Fn1<? super Boolean, ? extends R> cFn, Fn1<? super Double, ? extends R> dFn,\n","                               Fn1<? super Character, ? extends R> eFn, Fn1<? super Long, ? extends R> fFn,\n","                               Fn1<? super Float, ? extends R> gFn, Fn1<? super Short, ? extends R> hFn) {\n","                return dFn.apply(4D);\n","            }\n","        };\n","        e = new CoProduct8<Integer, String, Boolean, Double, Character, Long, Float, Short, CoProduct8<Integer, String, Boolean, Double, Character, Long, Float, Short, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super Integer, ? extends R> aFn, Fn1<? super String, ? extends R> bFn,\n","                               Fn1<? super Boolean, ? extends R> cFn, Fn1<? super Double, ? extends R> dFn,\n","                               Fn1<? super Character, ? extends R> eFn, Fn1<? super Long, ? extends R> fFn,\n","                               Fn1<? super Float, ? extends R> gFn, Fn1<? super Short, ? extends R> hFn) {\n","                return eFn.apply('z');\n","            }\n","        };\n","        f = new CoProduct8<Integer, String, Boolean, Double, Character, Long, Float, Short, CoProduct8<Integer, String, Boolean, Double, Character, Long, Float, Short, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super Integer, ? extends R> aFn, Fn1<? super String, ? extends R> bFn,\n","                               Fn1<? super Boolean, ? extends R> cFn, Fn1<? super Double, ? extends R> dFn,\n","                               Fn1<? super Character, ? extends R> eFn, Fn1<? super Long, ? extends R> fFn,\n","                               Fn1<? super Float, ? extends R> gFn, Fn1<? super Short, ? extends R> hFn) {\n","                return fFn.apply(5L);\n","            }\n","        };\n","        g = new CoProduct8<Integer, String, Boolean, Double, Character, Long, Float, Short, CoProduct8<Integer, String, Boolean, Double, Character, Long, Float, Short, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super Integer, ? extends R> aFn, Fn1<? super String, ? extends R> bFn,\n","                               Fn1<? super Boolean, ? extends R> cFn, Fn1<? super Double, ? extends R> dFn,\n","                               Fn1<? super Character, ? extends R> eFn, Fn1<? super Long, ? extends R> fFn,\n","                               Fn1<? super Float, ? extends R> gFn, Fn1<? super Short, ? extends R> hFn) {\n","                return gFn.apply(6f);\n","            }\n","        };\n","        h = new CoProduct8<Integer, String, Boolean, Double, Character, Long, Float, Short, CoProduct8<Integer, String, Boolean, Double, Character, Long, Float, Short, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super Integer, ? extends R> aFn, Fn1<? super String, ? extends R> bFn,\n","                               Fn1<? super Boolean, ? extends R> cFn, Fn1<? super Double, ? extends R> dFn,\n","                               Fn1<? super Character, ? extends R> eFn, Fn1<? super Long, ? extends R> fFn,\n","                               Fn1<? super Float, ? extends R> gFn, Fn1<? super Short, ? extends R> hFn) {\n","                return hFn.apply((short) 7);\n","            }\n","        };\n","    }\n","\n","    @Test\n","    public void match() {\n","        assertEquals(1, a.match(id(), id(), id(), id(), id(), id(), id(), id()));\n","        assertEquals(\"two\", b.match(id(), id(), id(), id(), id(), id(), id(), id()));\n","        assertEquals(true, c.match(id(), id(), id(), id(), id(), id(), id(), id()));\n","        assertEquals(4D, d.match(id(), id(), id(), id(), id(), id(), id(), id()));\n","        assertEquals('z', e.match(id(), id(), id(), id(), id(), id(), id(), id()));\n","        assertEquals(5L, f.match(id(), id(), id(), id(), id(), id(), id(), id()));\n","        assertEquals(6f, g.match(id(), id(), id(), id(), id(), id(), id(), id()));\n","        assertEquals((short) 7, h.match(id(), id(), id(), id(), id(), id(), id(), id()));\n","    }\n","\n","    @Test\n","    public void converge() {\n","        Fn1<Short, CoProduct7<Integer, String, Boolean, Double, Character, Long, Float, ?>> convergenceFn = x ->\n","                x.equals((short) 1)\n","                ? Choice7.a(1)\n","                : x.equals((short) 2)\n","                  ? Choice7.b(\"b\")\n","                  : x.equals((short) 3)\n","                    ? Choice7.c(false)\n","                    : x.equals((short) 4)\n","                      ? Choice7.d(1D)\n","                      : x.equals((short) 5)\n","                        ? Choice7.e('a')\n","                        : x.equals((short) 6)\n","                          ? Choice7.f(5L)\n","                          : Choice7.g(6F);\n","        assertEquals(1, a.converge(convergenceFn).match(id(), id(), id(), id(), id(), id(), id()));\n","        assertEquals(\"two\", b.converge(convergenceFn).match(id(), id(), id(), id(), id(), id(), id()));\n","        assertEquals(true, c.converge(convergenceFn).match(id(), id(), id(), id(), id(), id(), id()));\n","        assertEquals(4D, d.converge(convergenceFn).match(id(), id(), id(), id(), id(), id(), id()));\n","        assertEquals('z', e.converge(convergenceFn).match(id(), id(), id(), id(), id(), id(), id()));\n","        assertEquals(5L, f.converge(convergenceFn).match(id(), id(), id(), id(), id(), id(), id()));\n","        assertEquals(6F, g.converge(convergenceFn).match(id(), id(), id(), id(), id(), id(), id()));\n","        assertEquals(1, Choice8.<Integer, String, Boolean, Double, Character, Long, Float, Short>h((short) 1).converge(convergenceFn).match(id(), id(), id(), id(), id(), id(), id()));\n","        assertEquals(\"b\", Choice8.<Integer, String, Boolean, Double, Character, Long, Float, Short>h((short) 2).converge(convergenceFn).match(id(), id(), id(), id(), id(), id(), id()));\n","        assertEquals(false, Choice8.<Integer, String, Boolean, Double, Character, Long, Float, Short>h((short) 3).converge(convergenceFn).match(id(), id(), id(), id(), id(), id(), id()));\n","        assertEquals(1d, Choice8.<Integer, String, Boolean, Double, Character, Long, Float, Short>h((short) 4).converge(convergenceFn).match(id(), id(), id(), id(), id(), id(), id()));\n","        assertEquals('a', Choice8.<Integer, String, Boolean, Double, Character, Long, Float, Short>h((short) 5).converge(convergenceFn).match(id(), id(), id(), id(), id(), id(), id()));\n","        assertEquals(5L, Choice8.<Integer, String, Boolean, Double, Character, Long, Float, Short>h((short) 6).converge(convergenceFn).match(id(), id(), id(), id(), id(), id(), id()));\n","        assertEquals(6F, Choice8.<Integer, String, Boolean, Double, Character, Long, Float, Short>h((short) 7).converge(convergenceFn).match(id(), id(), id(), id(), id(), id(), id()));\n","    }\n","\n","    @Test\n","    public void projections() {\n","        assertEquals(tuple(just(1), nothing(), nothing(), nothing(), nothing(), nothing(), nothing(), nothing()), a.project());\n","        assertEquals(tuple(nothing(), just(\"two\"), nothing(), nothing(), nothing(), nothing(), nothing(), nothing()), b.project());\n","        assertEquals(tuple(nothing(), nothing(), just(true), nothing(), nothing(), nothing(), nothing(), nothing()), c.project());\n","        assertEquals(tuple(nothing(), nothing(), nothing(), just(4D), nothing(), nothing(), nothing(), nothing()), d.project());\n","        assertEquals(tuple(nothing(), nothing(), nothing(), nothing(), just('z'), nothing(), nothing(), nothing()), e.project());\n","        assertEquals(tuple(nothing(), nothing(), nothing(), nothing(), nothing(), just(5L), nothing(), nothing()), f.project());\n","        assertEquals(tuple(nothing(), nothing(), nothing(), nothing(), nothing(), nothing(), just(6F), nothing()), g.project());\n","        assertEquals(tuple(nothing(), nothing(), nothing(), nothing(), nothing(), nothing(), nothing(), just((short) 7)), h.project());\n","\n","        assertEquals(tuple(a.projectA(), a.projectB(), a.projectC(), a.projectD(), a.projectE(), a.projectF(), a.projectG(), a.projectH()), a.project());\n","        assertEquals(tuple(b.projectA(), b.projectB(), b.projectC(), b.projectD(), b.projectE(), b.projectF(), b.projectG(), b.projectH()), b.project());\n","        assertEquals(tuple(c.projectA(), c.projectB(), c.projectC(), c.projectD(), c.projectE(), c.projectF(), c.projectG(), c.projectH()), c.project());\n","        assertEquals(tuple(d.projectA(), d.projectB(), d.projectC(), d.projectD(), d.projectE(), d.projectF(), d.projectG(), d.projectH()), d.project());\n","        assertEquals(tuple(e.projectA(), e.projectB(), e.projectC(), e.projectD(), e.projectE(), e.projectF(), e.projectG(), e.projectH()), e.project());\n","        assertEquals(tuple(f.projectA(), f.projectB(), f.projectC(), f.projectD(), f.projectE(), f.projectF(), f.projectG(), f.projectH()), f.project());\n","        assertEquals(tuple(g.projectA(), g.projectB(), g.projectC(), g.projectD(), g.projectE(), g.projectF(), g.projectG(), g.projectH()), g.project());\n","        assertEquals(tuple(h.projectA(), h.projectB(), h.projectC(), h.projectD(), h.projectE(), h.projectF(), h.projectG(), h.projectH()), h.project());\n","    }\n","\n","    @Test\n","    public void embed() {\n","        assertEquals(just(a), a.embed(Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just));\n","        assertEquals(just(b), b.embed(Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just));\n","        assertEquals(just(c), c.embed(Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just));\n","        assertEquals(just(d), d.embed(Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just));\n","        assertEquals(just(e), e.embed(Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just));\n","        assertEquals(just(f), f.embed(Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just));\n","        assertEquals(just(g), g.embed(Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just));\n","        assertEquals(just(h), h.embed(Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just, Maybe::just));\n","    }\n","}"],"method_lines_dic":{"CoProduct8::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)":[46,53],"CoProduct8::::converge(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct7<A, B, C, D, E, F, G, ?>>)":[62,66],"CoProduct8::::project()":[74,83],"CoProduct8::::projectA()":[90,92],"CoProduct8::::projectB()":[99,101],"CoProduct8::::projectC()":[108,110],"CoProduct8::::projectD()":[117,119],"CoProduct8::::projectE()":[126,128],"CoProduct8::::projectF()":[135,137],"CoProduct8::::projectG()":[144,146],"CoProduct8::::projectH()":[153,155],"CoProduct8::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>)":[173,191]},"test_method_lines_dic":{"CoProduct8Test::::setUp()":[27,101],"CoProduct8Test::::match()":[103,113],"CoProduct8Test::::converge()":[115,145],"CoProduct8Test::::projections()":[147,166],"CoProduct8Test::::embed()":[168,178]},"reverse_method_lines_dic":{"46":"CoProduct8::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","47":"CoProduct8::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","48":"CoProduct8::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","49":"CoProduct8::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","50":"CoProduct8::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","51":"CoProduct8::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","52":"CoProduct8::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","53":"CoProduct8::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super D, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super E, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super F, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super G, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends R>)","62":"CoProduct8::::converge(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct7<A, B, C, D, E, F, G, ?>>)","63":"CoProduct8::::converge(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct7<A, B, C, D, E, F, G, ?>>)","64":"CoProduct8::::converge(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct7<A, B, C, D, E, F, G, ?>>)","65":"CoProduct8::::converge(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct7<A, B, C, D, E, F, G, ?>>)","66":"CoProduct8::::converge(com.jnape.palatable.lambda.functions.Fn1<? super H, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct7<A, B, C, D, E, F, G, ?>>)","74":"CoProduct8::::project()","75":"CoProduct8::::project()","76":"CoProduct8::::project()","77":"CoProduct8::::project()","78":"CoProduct8::::project()","79":"CoProduct8::::project()","80":"CoProduct8::::project()","81":"CoProduct8::::project()","82":"CoProduct8::::project()","83":"CoProduct8::::project()","90":"CoProduct8::::projectA()","91":"CoProduct8::::projectA()","92":"CoProduct8::::projectA()","99":"CoProduct8::::projectB()","100":"CoProduct8::::projectB()","101":"CoProduct8::::projectB()","108":"CoProduct8::::projectC()","109":"CoProduct8::::projectC()","110":"CoProduct8::::projectC()","117":"CoProduct8::::projectD()","118":"CoProduct8::::projectD()","119":"CoProduct8::::projectD()","126":"CoProduct8::::projectE()","127":"CoProduct8::::projectE()","128":"CoProduct8::::projectE()","135":"CoProduct8::::projectF()","136":"CoProduct8::::projectF()","137":"CoProduct8::::projectF()","144":"CoProduct8::::projectG()","145":"CoProduct8::::projectG()","146":"CoProduct8::::projectG()","153":"CoProduct8::::projectH()","154":"CoProduct8::::projectH()","155":"CoProduct8::::projectH()","173":"CoProduct8::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>)","174":"CoProduct8::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>)","175":"CoProduct8::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>)","176":"CoProduct8::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>)","177":"CoProduct8::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>)","178":"CoProduct8::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>)","179":"CoProduct8::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>)","180":"CoProduct8::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>)","181":"CoProduct8::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>)","182":"CoProduct8::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>)","183":"CoProduct8::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>)","184":"CoProduct8::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>)","185":"CoProduct8::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>)","186":"CoProduct8::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>)","187":"CoProduct8::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>)","188":"CoProduct8::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>)","189":"CoProduct8::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>)","190":"CoProduct8::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>)","191":"CoProduct8::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP8, ? extends R>)"},"test_reverse_method_lines_dic":{"27":"CoProduct8Test::::setUp()","28":"CoProduct8Test::::setUp()","29":"CoProduct8Test::::setUp()","30":"CoProduct8Test::::setUp()","31":"CoProduct8Test::::setUp()","32":"CoProduct8Test::::setUp()","33":"CoProduct8Test::::setUp()","34":"CoProduct8Test::::setUp()","35":"CoProduct8Test::::setUp()","36":"CoProduct8Test::::setUp()","37":"CoProduct8Test::::setUp()","38":"CoProduct8Test::::setUp()","39":"CoProduct8Test::::setUp()","40":"CoProduct8Test::::setUp()","41":"CoProduct8Test::::setUp()","42":"CoProduct8Test::::setUp()","43":"CoProduct8Test::::setUp()","44":"CoProduct8Test::::setUp()","45":"CoProduct8Test::::setUp()","46":"CoProduct8Test::::setUp()","47":"CoProduct8Test::::setUp()","48":"CoProduct8Test::::setUp()","49":"CoProduct8Test::::setUp()","50":"CoProduct8Test::::setUp()","51":"CoProduct8Test::::setUp()","52":"CoProduct8Test::::setUp()","53":"CoProduct8Test::::setUp()","54":"CoProduct8Test::::setUp()","55":"CoProduct8Test::::setUp()","56":"CoProduct8Test::::setUp()","57":"CoProduct8Test::::setUp()","58":"CoProduct8Test::::setUp()","59":"CoProduct8Test::::setUp()","60":"CoProduct8Test::::setUp()","61":"CoProduct8Test::::setUp()","62":"CoProduct8Test::::setUp()","63":"CoProduct8Test::::setUp()","64":"CoProduct8Test::::setUp()","65":"CoProduct8Test::::setUp()","66":"CoProduct8Test::::setUp()","67":"CoProduct8Test::::setUp()","68":"CoProduct8Test::::setUp()","69":"CoProduct8Test::::setUp()","70":"CoProduct8Test::::setUp()","71":"CoProduct8Test::::setUp()","72":"CoProduct8Test::::setUp()","73":"CoProduct8Test::::setUp()","74":"CoProduct8Test::::setUp()","75":"CoProduct8Test::::setUp()","76":"CoProduct8Test::::setUp()","77":"CoProduct8Test::::setUp()","78":"CoProduct8Test::::setUp()","79":"CoProduct8Test::::setUp()","80":"CoProduct8Test::::setUp()","81":"CoProduct8Test::::setUp()","82":"CoProduct8Test::::setUp()","83":"CoProduct8Test::::setUp()","84":"CoProduct8Test::::setUp()","85":"CoProduct8Test::::setUp()","86":"CoProduct8Test::::setUp()","87":"CoProduct8Test::::setUp()","88":"CoProduct8Test::::setUp()","89":"CoProduct8Test::::setUp()","90":"CoProduct8Test::::setUp()","91":"CoProduct8Test::::setUp()","92":"CoProduct8Test::::setUp()","93":"CoProduct8Test::::setUp()","94":"CoProduct8Test::::setUp()","95":"CoProduct8Test::::setUp()","96":"CoProduct8Test::::setUp()","97":"CoProduct8Test::::setUp()","98":"CoProduct8Test::::setUp()","99":"CoProduct8Test::::setUp()","100":"CoProduct8Test::::setUp()","101":"CoProduct8Test::::setUp()","103":"CoProduct8Test::::match()","104":"CoProduct8Test::::match()","105":"CoProduct8Test::::match()","106":"CoProduct8Test::::match()","107":"CoProduct8Test::::match()","108":"CoProduct8Test::::match()","109":"CoProduct8Test::::match()","110":"CoProduct8Test::::match()","111":"CoProduct8Test::::match()","112":"CoProduct8Test::::match()","113":"CoProduct8Test::::match()","115":"CoProduct8Test::::converge()","116":"CoProduct8Test::::converge()","117":"CoProduct8Test::::converge()","118":"CoProduct8Test::::converge()","119":"CoProduct8Test::::converge()","120":"CoProduct8Test::::converge()","121":"CoProduct8Test::::converge()","122":"CoProduct8Test::::converge()","123":"CoProduct8Test::::converge()","124":"CoProduct8Test::::converge()","125":"CoProduct8Test::::converge()","126":"CoProduct8Test::::converge()","127":"CoProduct8Test::::converge()","128":"CoProduct8Test::::converge()","129":"CoProduct8Test::::converge()","130":"CoProduct8Test::::converge()","131":"CoProduct8Test::::converge()","132":"CoProduct8Test::::converge()","133":"CoProduct8Test::::converge()","134":"CoProduct8Test::::converge()","135":"CoProduct8Test::::converge()","136":"CoProduct8Test::::converge()","137":"CoProduct8Test::::converge()","138":"CoProduct8Test::::converge()","139":"CoProduct8Test::::converge()","140":"CoProduct8Test::::converge()","141":"CoProduct8Test::::converge()","142":"CoProduct8Test::::converge()","143":"CoProduct8Test::::converge()","144":"CoProduct8Test::::converge()","145":"CoProduct8Test::::converge()","147":"CoProduct8Test::::projections()","148":"CoProduct8Test::::projections()","149":"CoProduct8Test::::projections()","150":"CoProduct8Test::::projections()","151":"CoProduct8Test::::projections()","152":"CoProduct8Test::::projections()","153":"CoProduct8Test::::projections()","154":"CoProduct8Test::::projections()","155":"CoProduct8Test::::projections()","156":"CoProduct8Test::::projections()","157":"CoProduct8Test::::projections()","158":"CoProduct8Test::::projections()","159":"CoProduct8Test::::projections()","160":"CoProduct8Test::::projections()","161":"CoProduct8Test::::projections()","162":"CoProduct8Test::::projections()","163":"CoProduct8Test::::projections()","164":"CoProduct8Test::::projections()","165":"CoProduct8Test::::projections()","166":"CoProduct8Test::::projections()","168":"CoProduct8Test::::embed()","169":"CoProduct8Test::::embed()","170":"CoProduct8Test::::embed()","171":"CoProduct8Test::::embed()","172":"CoProduct8Test::::embed()","173":"CoProduct8Test::::embed()","174":"CoProduct8Test::::embed()","175":"CoProduct8Test::::embed()","176":"CoProduct8Test::::embed()","177":"CoProduct8Test::::embed()","178":"CoProduct8Test::::embed()"},"tests":[{"test_lines":[115,145],"covered_lines":[64]},{"test_lines":[147,166],"covered_lines":[75,76,77,78,79,80,81,82,91,100,109,118,127,136,145,154]},{"test_lines":[168,178],"covered_lines":[182,183,184,185,186,187,188,189,190]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/adt/coproduct/CoProduct3.java":{"class_content":["package com.jnape.palatable.lambda.adt.coproduct;\n","\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.adt.choice.Choice2;\n","import com.jnape.palatable.lambda.adt.product.Product3;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.Fn1.fn1;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","\n","/**\n"," * A generalization of the coproduct of three types.\n"," *\n"," * @param <A>   the first possible type\n"," * @param <B>   the second possible type\n"," * @param <C>   the third possible type\n"," * @param <CP3> the recursive type of this coproduct (used for embedding)\n"," * @see CoProduct2\n"," */\n","@FunctionalInterface\n","public interface CoProduct3<A, B, C, CP3 extends CoProduct3<A, B, C, ?>> {\n","\n","    /**\n","     * Type-safe convergence requiring a match against all potential types.\n","     *\n","     * @param <R> result type\n","     * @param aFn morphism <code>A -&gt; R</code>\n","     * @param bFn morphism <code>B -&gt; R</code>\n","     * @param cFn morphism <code>C -&gt; R</code>\n","     * @return the result of applying the appropriate morphism to this coproduct's unwrapped value\n","     * @see CoProduct2#match(Fn1, Fn1)\n","     */\n","    <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn, Fn1<? super C, ? extends R> cFn);\n","\n","    /**\n","     * Diverge this coproduct by introducing another possible type that it could represent.\n","     *\n","     * @param <D> the additional possible type of this coproduct\n","     * @return a {@link CoProduct4}&lt;A, B, C, D&gt;\n","     * @see CoProduct2#diverge()\n","     */\n","    default <D> CoProduct4<A, B, C, D, ? extends CoProduct4<A, B, C, D, ?>> diverge() {\n","        return new CoProduct4<A, B, C, D, CoProduct4<A, B, C, D, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn,\n","                               Fn1<? super C, ? extends R> cFn, Fn1<? super D, ? extends R> dFn) {\n","                return CoProduct3.this.match(aFn, bFn, cFn);\n","            }\n","        };\n","    }\n","\n","    /**\n","     * Converge this coproduct down to a lower order coproduct by mapping the last possible type into an earlier\n","     * possible type. This is the categorical dual of {@link CoProduct2#diverge}, which introduces the type\n","     * <code>C</code> and raises the order from 2 to 3.\n","     * <p>\n","     * The following laws hold for any two coproducts of single order difference:\n","     * <ul>\n","     * <li><em>Cancellation</em>: <code>coProductN.diverge().converge(CoProductN::a) == coProductN</code></li>\n","     * </ul>\n","     *\n","     * @param convergenceFn function from last possible type to earlier type\n","     * @return a {@link CoProduct2}&lt;A, B&gt;\n","     */\n","    default CoProduct2<A, B, ? extends CoProduct2<A, B, ?>> converge(\n","            Fn1<? super C, ? extends CoProduct2<A, B, ?>> convergenceFn) {\n","        return match(Choice2::a, Choice2::b, convergenceFn::apply);\n","    }\n","\n","    /**\n","     * Project this coproduct onto a product.\n","     *\n","     * @return a product of the coproduct projection\n","     * @see CoProduct2#project()\n","     */\n","    default Product3<Maybe<A>, Maybe<B>, Maybe<C>> project() {\n","        return match(a -> tuple(just(a), nothing(), nothing()),\n","                     b -> tuple(nothing(), just(b), nothing()),\n","                     c -> tuple(nothing(), nothing(), just(c)));\n","    }\n","\n","    /**\n","     * Convenience method for projecting this coproduct onto a product and then extracting the first slot value.\n","     *\n","     * @return an optional value representing the projection of the \"a\" type index\n","     */\n","    default Maybe<A> projectA() {\n","        return project()._1();\n","    }\n","\n","    /**\n","     * Convenience method for projecting this coproduct onto a product and then extracting the second slot value.\n","     *\n","     * @return an optional value representing the projection of the \"b\" type index\n","     */\n","    default Maybe<B> projectB() {\n","        return project()._2();\n","    }\n","\n","    /**\n","     * Convenience method for projecting this coproduct onto a product and then extracting the third slot value.\n","     *\n","     * @return an optional value representing the projection of the \"c\" type index\n","     */\n","    default Maybe<C> projectC() {\n","        return project()._3();\n","    }\n","\n","    /**\n","     * Embed this coproduct inside another value; that is, given morphisms from this coproduct to <code>R</code>, apply\n","     * the appropriate morphism to this coproduct as a whole. Like {@link CoProduct3#match}, but without unwrapping the\n","     * value.\n","     *\n","     * @param <R> result type\n","     * @param aFn morphism <code>A v B v C -&gt; R</code>, applied in the <code>A</code> case\n","     * @param bFn morphism <code>A v B v C -&gt; R</code>, applied in the <code>B</code> case\n","     * @param cFn morphism <code>A v B v C -&gt; R</code>, applied in the <code>C</code> case\n","     * @return the result of applying the appropriate morphism to this coproduct\n","     */\n","    @SuppressWarnings(\"unchecked\")\n","    default <R> R embed(Fn1<? super CP3, ? extends R> aFn, Fn1<? super CP3, ? extends R> bFn,\n","                        Fn1<? super CP3, ? extends R> cFn) {\n","        return this.<Fn1<CP3, R>>match(constantly(fn1(aFn)),\n","                                       constantly(fn1(bFn)),\n","                                       constantly(fn1(cFn)))\n","                .apply((CP3) this);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.adt.coproduct;\n","\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.adt.choice.Choice2;\n","import com.jnape.palatable.lambda.adt.choice.Choice3;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import org.junit.Before;\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Id.id;\n","import static org.junit.Assert.assertEquals;\n","\n","public class CoProduct3Test {\n","\n","    private CoProduct3<Integer, String, Boolean, ?> a;\n","    private CoProduct3<Integer, String, Boolean, ?> b;\n","    private CoProduct3<Integer, String, Boolean, ?> c;\n","\n","    @Before\n","    public void setUp() {\n","        a = new CoProduct3<Integer, String, Boolean, CoProduct3<Integer, String, Boolean, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super Integer, ? extends R> aFn, Fn1<? super String, ? extends R> bFn,\n","                               Fn1<? super Boolean, ? extends R> cFn) {\n","                return aFn.apply(1);\n","            }\n","        };\n","        b = new CoProduct3<Integer, String, Boolean, CoProduct3<Integer, String, Boolean, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super Integer, ? extends R> aFn, Fn1<? super String, ? extends R> bFn,\n","                               Fn1<? super Boolean, ? extends R> cFn) {\n","                return bFn.apply(\"two\");\n","            }\n","        };\n","        c = new CoProduct3<Integer, String, Boolean, CoProduct3<Integer, String, Boolean, ?>>() {\n","            @Override\n","            public <R> R match(Fn1<? super Integer, ? extends R> aFn, Fn1<? super String, ? extends R> bFn,\n","                               Fn1<? super Boolean, ? extends R> cFn) {\n","                return cFn.apply(true);\n","            }\n","        };\n","    }\n","\n","    @Test\n","    public void match() {\n","        assertEquals(1, a.match(id(), id(), id()));\n","        assertEquals(\"two\", b.match(id(), id(), id()));\n","        assertEquals(true, c.match(id(), id(), id()));\n","    }\n","\n","    @Test\n","    public void diverge() {\n","        assertEquals(1, a.diverge().match(id(), id(), id(), id()));\n","        assertEquals(\"two\", b.diverge().match(id(), id(), id(), id()));\n","        assertEquals(true, c.diverge().match(id(), id(), id(), id()));\n","    }\n","\n","    @Test\n","    public void converge() {\n","        Fn1<Boolean, CoProduct2<Integer, String, ?>> convergenceFn = x -> x ? Choice2.a(-1) : Choice2.b(\"false\");\n","        assertEquals(1, a.converge(convergenceFn).match(id(), id()));\n","        assertEquals(\"two\", b.converge(convergenceFn).match(id(), id()));\n","        assertEquals(-1, c.converge(convergenceFn).match(id(), id()));\n","        assertEquals(\"false\", Choice3.<Integer, String, Boolean>c(false).converge(convergenceFn).match(id(), id()));\n","    }\n","\n","    @Test\n","    public void projections() {\n","        assertEquals(tuple(just(1), nothing(), nothing()), a.project());\n","        assertEquals(tuple(nothing(), just(\"two\"), nothing()), b.project());\n","        assertEquals(tuple(nothing(), nothing(), just(true)), c.project());\n","\n","        assertEquals(tuple(a.projectA(), a.projectB(), a.projectC()), a.project());\n","        assertEquals(tuple(b.projectA(), b.projectB(), b.projectC()), b.project());\n","        assertEquals(tuple(c.projectA(), c.projectB(), c.projectC()), c.project());\n","    }\n","\n","    @Test\n","    public void embed() {\n","        assertEquals(just(a), a.embed(Maybe::just, Maybe::just, Maybe::just));\n","        assertEquals(just(b), b.embed(Maybe::just, Maybe::just, Maybe::just));\n","        assertEquals(just(c), c.embed(Maybe::just, Maybe::just, Maybe::just));\n","    }\n","}"],"method_lines_dic":{"CoProduct3::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>)":[36,36],"CoProduct3::::diverge()":[45,53],"CoProduct3::::converge(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct2<A, B, ?>>)":[68,71],"CoProduct3::::project()":[79,83],"CoProduct3::::projectA()":[90,92],"CoProduct3::::projectB()":[99,101],"CoProduct3::::projectC()":[108,110],"CoProduct3::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP3, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP3, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP3, ? extends R>)":[123,130]},"test_method_lines_dic":{"CoProduct3Test::::setUp()":[22,45],"CoProduct3Test::::match()":[47,52],"CoProduct3Test::::diverge()":[54,59],"CoProduct3Test::::converge()":[61,68],"CoProduct3Test::::projections()":[70,79],"CoProduct3Test::::embed()":[81,86]},"reverse_method_lines_dic":{"36":"CoProduct3::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends R>)","45":"CoProduct3::::diverge()","46":"CoProduct3::::diverge()","47":"CoProduct3::::diverge()","48":"CoProduct3::::diverge()","49":"CoProduct3::::diverge()","50":"CoProduct3::::diverge()","51":"CoProduct3::::diverge()","52":"CoProduct3::::diverge()","53":"CoProduct3::::diverge()","68":"CoProduct3::::converge(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct2<A, B, ?>>)","69":"CoProduct3::::converge(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct2<A, B, ?>>)","70":"CoProduct3::::converge(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct2<A, B, ?>>)","71":"CoProduct3::::converge(com.jnape.palatable.lambda.functions.Fn1<? super C, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct2<A, B, ?>>)","79":"CoProduct3::::project()","80":"CoProduct3::::project()","81":"CoProduct3::::project()","82":"CoProduct3::::project()","83":"CoProduct3::::project()","90":"CoProduct3::::projectA()","91":"CoProduct3::::projectA()","92":"CoProduct3::::projectA()","99":"CoProduct3::::projectB()","100":"CoProduct3::::projectB()","101":"CoProduct3::::projectB()","108":"CoProduct3::::projectC()","109":"CoProduct3::::projectC()","110":"CoProduct3::::projectC()","123":"CoProduct3::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP3, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP3, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP3, ? extends R>)","124":"CoProduct3::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP3, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP3, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP3, ? extends R>)","125":"CoProduct3::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP3, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP3, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP3, ? extends R>)","126":"CoProduct3::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP3, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP3, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP3, ? extends R>)","127":"CoProduct3::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP3, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP3, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP3, ? extends R>)","128":"CoProduct3::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP3, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP3, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP3, ? extends R>)","129":"CoProduct3::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP3, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP3, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP3, ? extends R>)","130":"CoProduct3::::embed(com.jnape.palatable.lambda.functions.Fn1<? super CP3, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP3, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super CP3, ? extends R>)"},"test_reverse_method_lines_dic":{"22":"CoProduct3Test::::setUp()","23":"CoProduct3Test::::setUp()","24":"CoProduct3Test::::setUp()","25":"CoProduct3Test::::setUp()","26":"CoProduct3Test::::setUp()","27":"CoProduct3Test::::setUp()","28":"CoProduct3Test::::setUp()","29":"CoProduct3Test::::setUp()","30":"CoProduct3Test::::setUp()","31":"CoProduct3Test::::setUp()","32":"CoProduct3Test::::setUp()","33":"CoProduct3Test::::setUp()","34":"CoProduct3Test::::setUp()","35":"CoProduct3Test::::setUp()","36":"CoProduct3Test::::setUp()","37":"CoProduct3Test::::setUp()","38":"CoProduct3Test::::setUp()","39":"CoProduct3Test::::setUp()","40":"CoProduct3Test::::setUp()","41":"CoProduct3Test::::setUp()","42":"CoProduct3Test::::setUp()","43":"CoProduct3Test::::setUp()","44":"CoProduct3Test::::setUp()","45":"CoProduct3Test::::setUp()","47":"CoProduct3Test::::match()","48":"CoProduct3Test::::match()","49":"CoProduct3Test::::match()","50":"CoProduct3Test::::match()","51":"CoProduct3Test::::match()","52":"CoProduct3Test::::match()","54":"CoProduct3Test::::diverge()","55":"CoProduct3Test::::diverge()","56":"CoProduct3Test::::diverge()","57":"CoProduct3Test::::diverge()","58":"CoProduct3Test::::diverge()","59":"CoProduct3Test::::diverge()","61":"CoProduct3Test::::converge()","62":"CoProduct3Test::::converge()","63":"CoProduct3Test::::converge()","64":"CoProduct3Test::::converge()","65":"CoProduct3Test::::converge()","66":"CoProduct3Test::::converge()","67":"CoProduct3Test::::converge()","68":"CoProduct3Test::::converge()","70":"CoProduct3Test::::projections()","71":"CoProduct3Test::::projections()","72":"CoProduct3Test::::projections()","73":"CoProduct3Test::::projections()","74":"CoProduct3Test::::projections()","75":"CoProduct3Test::::projections()","76":"CoProduct3Test::::projections()","77":"CoProduct3Test::::projections()","78":"CoProduct3Test::::projections()","79":"CoProduct3Test::::projections()","81":"CoProduct3Test::::embed()","82":"CoProduct3Test::::embed()","83":"CoProduct3Test::::embed()","84":"CoProduct3Test::::embed()","85":"CoProduct3Test::::embed()","86":"CoProduct3Test::::embed()"},"tests":[{"test_lines":[54,59],"covered_lines":[46,50]},{"test_lines":[61,68],"covered_lines":[70]},{"test_lines":[70,79],"covered_lines":[80,81,82,91,100,109]},{"test_lines":[81,86],"covered_lines":[126,127,128,129]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/adt/hlist/SingletonHList.java":{"class_content":["package com.jnape.palatable.lambda.adt.hlist;\n","\n","import com.jnape.palatable.lambda.adt.hlist.HList.HCons;\n","import com.jnape.palatable.lambda.adt.hlist.HList.HNil;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.recursion.RecursiveResult;\n","import com.jnape.palatable.lambda.functions.specialized.Pure;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","import com.jnape.palatable.lambda.functor.builtin.Lazy;\n","import com.jnape.palatable.lambda.monad.Monad;\n","import com.jnape.palatable.lambda.monad.MonadRec;\n","import com.jnape.palatable.lambda.traversable.Traversable;\n","\n","import static com.jnape.palatable.lambda.functions.recursion.Trampoline.trampoline;\n","\n","/**\n"," * A singleton HList. Supports random access.\n"," *\n"," * @param <_1> The single slot element type\n"," * @see HList\n"," * @see Tuple2\n"," * @see Tuple3\n"," * @see Tuple4\n"," * @see Tuple5\n"," */\n","public class SingletonHList<_1> extends HCons<_1, HNil> implements\n","        MonadRec<_1, SingletonHList<?>>,\n","        Traversable<_1, SingletonHList<?>> {\n","\n","    SingletonHList(_1 _1) {\n","        super(_1, nil());\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_0> Tuple2<_0, _1> cons(_0 _0) {\n","        return new Tuple2<>(_0, this);\n","    }\n","\n","\n","    /**\n","     * Snoc an element onto the back of this {@link SingletonHList}.\n","     *\n","     * @param _2   the new last element\n","     * @param <_2> the new last element type\n","     * @return the new {@link Tuple2}\n","     */\n","    public <_2> Tuple2<_1, _2> snoc(_2 _2) {\n","        return tuple(head(), _2);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_1Prime> SingletonHList<_1Prime> fmap(Fn1<? super _1, ? extends _1Prime> fn) {\n","        return MonadRec.super.<_1Prime>fmap(fn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_1Prime> SingletonHList<_1Prime> pure(_1Prime _1Prime) {\n","        return singletonHList(_1Prime);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_1Prime> SingletonHList<_1Prime> zip(\n","            Applicative<Fn1<? super _1, ? extends _1Prime>, SingletonHList<?>> appFn) {\n","        return MonadRec.super.zip(appFn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_1Prime> Lazy<SingletonHList<_1Prime>> lazyZip(\n","            Lazy<? extends Applicative<Fn1<? super _1, ? extends _1Prime>, SingletonHList<?>>> lazyAppFn) {\n","        return MonadRec.super.lazyZip(lazyAppFn).fmap(Monad<_1Prime, SingletonHList<?>>::coerce);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_1Prime> SingletonHList<_1Prime> discardL(Applicative<_1Prime, SingletonHList<?>> appB) {\n","        return MonadRec.super.discardL(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_1Prime> SingletonHList<_1> discardR(Applicative<_1Prime, SingletonHList<?>> appB) {\n","        return MonadRec.super.discardR(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_1Prime> SingletonHList<_1Prime> flatMap(Fn1<? super _1, ? extends Monad<_1Prime, SingletonHList<?>>> f) {\n","        return f.apply(head()).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_1Prime> SingletonHList<_1Prime> trampolineM(\n","            Fn1<? super _1, ? extends MonadRec<RecursiveResult<_1, _1Prime>, SingletonHList<?>>> fn) {\n","        return fmap(trampoline(head -> fn.apply(head).<SingletonHList<RecursiveResult<_1, _1Prime>>>coerce().head()));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <B, App extends Applicative<?, App>, TravB extends Traversable<B, SingletonHList<?>>,\n","            AppTrav extends Applicative<TravB, App>> AppTrav traverse(Fn1<? super _1, ? extends Applicative<B, App>> fn,\n","                                                                      Fn1<? super TravB, ? extends AppTrav> pure) {\n","        return fn.apply(head()).fmap(SingletonHList::new).<TravB>fmap(Applicative::coerce).coerce();\n","    }\n","\n","    /**\n","     * Apply {@link SingletonHList#head()} to <code>fn</code> and return the result.\n","     *\n","     * @param fn  the function to apply\n","     * @param <R> the return type of the function\n","     * @return the result of applying the head to the function\n","     */\n","    public <R> R into(Fn1<? super _1, ? extends R> fn) {\n","        return fn.apply(head());\n","    }\n","\n","    /**\n","     * The canonical {@link Pure} instance for {@link SingletonHList}.\n","     *\n","     * @return the {@link Pure} instance\n","     */\n","    public static Pure<SingletonHList<?>> pureSingletonHList() {\n","        return HList::singletonHList;\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.adt.hlist;\n","\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Before;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.ApplicativeLaws;\n","import testsupport.traits.FunctorLaws;\n","import testsupport.traits.MonadLaws;\n","import testsupport.traits.MonadRecLaws;\n","import testsupport.traits.TraversableLaws;\n","\n","import static com.jnape.palatable.lambda.adt.hlist.HList.nil;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.singletonHList;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.adt.hlist.SingletonHList.pureSingletonHList;\n","import static org.junit.Assert.assertEquals;\n","\n","@RunWith(Traits.class)\n","public class SingletonHListTest {\n","\n","    private SingletonHList<Integer> singletonHList;\n","\n","    @Before\n","    public void setUp() {\n","        singletonHList = new SingletonHList<>(1);\n","    }\n","\n","    @TestTraits({FunctorLaws.class, ApplicativeLaws.class, MonadLaws.class, TraversableLaws.class, MonadRecLaws.class})\n","    public SingletonHList<?> testSubject() {\n","        return singletonHList(\"one\");\n","    }\n","\n","    @Test\n","    public void head() {\n","        assertEquals((Integer) 1, singletonHList.head());\n","    }\n","\n","    @Test\n","    public void tail() {\n","        assertEquals(nil(), singletonHList.tail());\n","    }\n","\n","    @Test\n","    public void cons() {\n","        assertEquals(new Tuple2<>(\"0\", singletonHList), singletonHList.cons(\"0\"));\n","    }\n","\n","    @Test\n","    public void snoc() {\n","        assertEquals(tuple((byte) 127, 'x'), singletonHList((byte) 127).snoc('x'));\n","    }\n","\n","    @Test\n","    public void intoAppliesHeadToFn() {\n","        assertEquals(\"FOO\", singletonHList(\"foo\").into(String::toUpperCase));\n","    }\n","\n","    @Test\n","    public void staticPure() {\n","        SingletonHList<Integer> singletonHList = pureSingletonHList().apply(1);\n","        assertEquals(singletonHList(1), singletonHList);\n","    }\n","}"],"method_lines_dic":{"SingletonHList::::cons(_0)":[37,40],"SingletonHList::::snoc(_2)":[50,52],"SingletonHList::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends _1Prime>)":[57,60],"SingletonHList::::pure(_1Prime)":[65,68],"SingletonHList::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends _1Prime>, com.jnape.palatable.lambda.adt.hlist.SingletonHList<?>>)":[73,77],"SingletonHList::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends _1Prime>, com.jnape.palatable.lambda.adt.hlist.SingletonHList<?>>>)":[82,86],"SingletonHList::::discardL(com.jnape.palatable.lambda.functor.Applicative<_1Prime, com.jnape.palatable.lambda.adt.hlist.SingletonHList<?>>)":[91,94],"SingletonHList::::discardR(com.jnape.palatable.lambda.functor.Applicative<_1Prime, com.jnape.palatable.lambda.adt.hlist.SingletonHList<?>>)":[99,102],"SingletonHList::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends com.jnape.palatable.lambda.monad.Monad<_1Prime, com.jnape.palatable.lambda.adt.hlist.SingletonHList<?>>>)":[107,110],"SingletonHList::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_1, _1Prime>, com.jnape.palatable.lambda.adt.hlist.SingletonHList<?>>>)":[115,119],"SingletonHList::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)":[124,129],"SingletonHList::::into(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends R>)":[138,140],"SingletonHList::::pureSingletonHList()":[147,149]},"test_method_lines_dic":{"SingletonHListTest::::setUp()":[25,28],"SingletonHListTest::::testSubject()":[30,33],"SingletonHListTest::::head()":[35,38],"SingletonHListTest::::tail()":[40,43],"SingletonHListTest::::cons()":[45,48],"SingletonHListTest::::snoc()":[50,53],"SingletonHListTest::::intoAppliesHeadToFn()":[55,58],"SingletonHListTest::::staticPure()":[60,64]},"reverse_method_lines_dic":{"37":"SingletonHList::::cons(_0)","38":"SingletonHList::::cons(_0)","39":"SingletonHList::::cons(_0)","40":"SingletonHList::::cons(_0)","50":"SingletonHList::::snoc(_2)","51":"SingletonHList::::snoc(_2)","52":"SingletonHList::::snoc(_2)","57":"SingletonHList::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends _1Prime>)","58":"SingletonHList::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends _1Prime>)","59":"SingletonHList::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends _1Prime>)","60":"SingletonHList::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends _1Prime>)","65":"SingletonHList::::pure(_1Prime)","66":"SingletonHList::::pure(_1Prime)","67":"SingletonHList::::pure(_1Prime)","68":"SingletonHList::::pure(_1Prime)","73":"SingletonHList::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends _1Prime>, com.jnape.palatable.lambda.adt.hlist.SingletonHList<?>>)","74":"SingletonHList::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends _1Prime>, com.jnape.palatable.lambda.adt.hlist.SingletonHList<?>>)","75":"SingletonHList::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends _1Prime>, com.jnape.palatable.lambda.adt.hlist.SingletonHList<?>>)","76":"SingletonHList::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends _1Prime>, com.jnape.palatable.lambda.adt.hlist.SingletonHList<?>>)","77":"SingletonHList::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends _1Prime>, com.jnape.palatable.lambda.adt.hlist.SingletonHList<?>>)","82":"SingletonHList::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends _1Prime>, com.jnape.palatable.lambda.adt.hlist.SingletonHList<?>>>)","83":"SingletonHList::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends _1Prime>, com.jnape.palatable.lambda.adt.hlist.SingletonHList<?>>>)","84":"SingletonHList::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends _1Prime>, com.jnape.palatable.lambda.adt.hlist.SingletonHList<?>>>)","85":"SingletonHList::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends _1Prime>, com.jnape.palatable.lambda.adt.hlist.SingletonHList<?>>>)","86":"SingletonHList::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends _1Prime>, com.jnape.palatable.lambda.adt.hlist.SingletonHList<?>>>)","91":"SingletonHList::::discardL(com.jnape.palatable.lambda.functor.Applicative<_1Prime, com.jnape.palatable.lambda.adt.hlist.SingletonHList<?>>)","92":"SingletonHList::::discardL(com.jnape.palatable.lambda.functor.Applicative<_1Prime, com.jnape.palatable.lambda.adt.hlist.SingletonHList<?>>)","93":"SingletonHList::::discardL(com.jnape.palatable.lambda.functor.Applicative<_1Prime, com.jnape.palatable.lambda.adt.hlist.SingletonHList<?>>)","94":"SingletonHList::::discardL(com.jnape.palatable.lambda.functor.Applicative<_1Prime, com.jnape.palatable.lambda.adt.hlist.SingletonHList<?>>)","99":"SingletonHList::::discardR(com.jnape.palatable.lambda.functor.Applicative<_1Prime, com.jnape.palatable.lambda.adt.hlist.SingletonHList<?>>)","100":"SingletonHList::::discardR(com.jnape.palatable.lambda.functor.Applicative<_1Prime, com.jnape.palatable.lambda.adt.hlist.SingletonHList<?>>)","101":"SingletonHList::::discardR(com.jnape.palatable.lambda.functor.Applicative<_1Prime, com.jnape.palatable.lambda.adt.hlist.SingletonHList<?>>)","102":"SingletonHList::::discardR(com.jnape.palatable.lambda.functor.Applicative<_1Prime, com.jnape.palatable.lambda.adt.hlist.SingletonHList<?>>)","107":"SingletonHList::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends com.jnape.palatable.lambda.monad.Monad<_1Prime, com.jnape.palatable.lambda.adt.hlist.SingletonHList<?>>>)","108":"SingletonHList::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends com.jnape.palatable.lambda.monad.Monad<_1Prime, com.jnape.palatable.lambda.adt.hlist.SingletonHList<?>>>)","109":"SingletonHList::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends com.jnape.palatable.lambda.monad.Monad<_1Prime, com.jnape.palatable.lambda.adt.hlist.SingletonHList<?>>>)","110":"SingletonHList::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends com.jnape.palatable.lambda.monad.Monad<_1Prime, com.jnape.palatable.lambda.adt.hlist.SingletonHList<?>>>)","115":"SingletonHList::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_1, _1Prime>, com.jnape.palatable.lambda.adt.hlist.SingletonHList<?>>>)","116":"SingletonHList::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_1, _1Prime>, com.jnape.palatable.lambda.adt.hlist.SingletonHList<?>>>)","117":"SingletonHList::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_1, _1Prime>, com.jnape.palatable.lambda.adt.hlist.SingletonHList<?>>>)","118":"SingletonHList::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_1, _1Prime>, com.jnape.palatable.lambda.adt.hlist.SingletonHList<?>>>)","119":"SingletonHList::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_1, _1Prime>, com.jnape.palatable.lambda.adt.hlist.SingletonHList<?>>>)","124":"SingletonHList::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","125":"SingletonHList::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","126":"SingletonHList::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","127":"SingletonHList::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","128":"SingletonHList::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","129":"SingletonHList::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","138":"SingletonHList::::into(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends R>)","139":"SingletonHList::::into(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends R>)","140":"SingletonHList::::into(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends R>)","147":"SingletonHList::::pureSingletonHList()","148":"SingletonHList::::pureSingletonHList()","149":"SingletonHList::::pureSingletonHList()"},"test_reverse_method_lines_dic":{"25":"SingletonHListTest::::setUp()","26":"SingletonHListTest::::setUp()","27":"SingletonHListTest::::setUp()","28":"SingletonHListTest::::setUp()","30":"SingletonHListTest::::testSubject()","31":"SingletonHListTest::::testSubject()","32":"SingletonHListTest::::testSubject()","33":"SingletonHListTest::::testSubject()","35":"SingletonHListTest::::head()","36":"SingletonHListTest::::head()","37":"SingletonHListTest::::head()","38":"SingletonHListTest::::head()","40":"SingletonHListTest::::tail()","41":"SingletonHListTest::::tail()","42":"SingletonHListTest::::tail()","43":"SingletonHListTest::::tail()","45":"SingletonHListTest::::cons()","46":"SingletonHListTest::::cons()","47":"SingletonHListTest::::cons()","48":"SingletonHListTest::::cons()","50":"SingletonHListTest::::snoc()","51":"SingletonHListTest::::snoc()","52":"SingletonHListTest::::snoc()","53":"SingletonHListTest::::snoc()","55":"SingletonHListTest::::intoAppliesHeadToFn()","56":"SingletonHListTest::::intoAppliesHeadToFn()","57":"SingletonHListTest::::intoAppliesHeadToFn()","58":"SingletonHListTest::::intoAppliesHeadToFn()","60":"SingletonHListTest::::staticPure()","61":"SingletonHListTest::::staticPure()","62":"SingletonHListTest::::staticPure()","63":"SingletonHListTest::::staticPure()","64":"SingletonHListTest::::staticPure()"},"tests":[{"test_lines":[25,28],"covered_lines":[31,32]},{"test_lines":[30,33],"covered_lines":[31,32]},{"test_lines":[35,38],"covered_lines":[31,32]},{"test_lines":[40,43],"covered_lines":[31,32]},{"test_lines":[45,48],"covered_lines":[31,32,39]},{"test_lines":[50,53],"covered_lines":[31,32,39,51]},{"test_lines":[55,58],"covered_lines":[31,32,139]},{"test_lines":[60,64],"covered_lines":[31,32,148]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/adt/hlist/Index.java":{"class_content":["package com.jnape.palatable.lambda.adt.hlist;\n","\n","import com.jnape.palatable.lambda.adt.hlist.HList.HCons;\n","\n","/**\n"," * HList indexes representing a value at arbitrary depth in some compatible HList. HList compatibility requires\n"," * identical element types up to and including the target element, but thereafter is unconstrained in length and element\n"," * type.\n"," *\n"," * @param <Target>     the target element type\n"," * @param <TargetList> type of compatible HList\n"," */\n","public abstract class Index<Target, TargetList extends HCons<?, ?>> {\n","\n","    private Index() {\n","    }\n","\n","    /**\n","     * Nest this index deeper by one element.\n","     *\n","     * @param <NewHead> the type of the preceding element\n","     * @return an index at the same Target, nested one level deep\n","     */\n","    public final <NewHead> Index<Target, HCons<NewHead, ? extends TargetList>> after() {\n","        return new N<>(this);\n","    }\n","\n","    /**\n","     * Retrieve the value at this index in hList.\n","     *\n","     * @param hList the hList\n","     * @return the value at this index\n","     */\n","    public abstract Target get(TargetList hList);\n","\n","    /**\n","     * Set a new value of the same type at this index in an {@link HList}.\n","     *\n","     * @param newElement the new value\n","     * @param hList      the HList\n","     * @param <L>        the inferred tail type of the HList\n","     * @return the updated HList\n","     */\n","    public abstract <L extends TargetList> L set(Target newElement, L hList);\n","\n","    /**\n","     * Create a root index for a head value of type <code>Target</code>.\n","     *\n","     * @param <Target> the type of the value to get\n","     * @return the root index\n","     */\n","    public static <Target> Index<Target, HCons<Target, ?>> index() {\n","        return Z.instance();\n","    }\n","\n","    private static final class Z<Target> extends Index<Target, HCons<Target, ?>> {\n","\n","        private static final Z<?> INSTANCE = new Z<>();\n","\n","        @Override\n","        public Target get(HCons<Target, ?> hList) {\n","            return hList.head();\n","        }\n","\n","        @Override\n","        @SuppressWarnings(\"unchecked\")\n","        public <L extends HCons<Target, ?>> L set(Target newElement, L hList) {\n","            return (L) hList.tail().cons(newElement);\n","        }\n","\n","        @SuppressWarnings(\"unchecked\")\n","        public static <Target> Z<Target> instance() {\n","            return (Z<Target>) INSTANCE;\n","        }\n","    }\n","\n","    private static final class N<Target, Head, List extends HCons<?, ?>, PreviousIndex extends Index<Target, List>> extends Index<Target, HCons<Head, ? extends List>> {\n","\n","        private final PreviousIndex previousIndex;\n","\n","        private N(PreviousIndex previousIndex) {\n","            this.previousIndex = previousIndex;\n","        }\n","\n","        @Override\n","        public Target get(HCons<Head, ? extends List> hList) {\n","            return previousIndex.get(hList.tail());\n","        }\n","\n","        @Override\n","        @SuppressWarnings(\"unchecked\")\n","        public <L extends HCons<Head, ? extends List>> L set(Target newElement, L hList) {\n","            return (L) previousIndex.set(newElement, hList.tail()).cons(hList.head());\n","        }\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.adt.hlist;\n","\n","import com.jnape.palatable.lambda.adt.hlist.HList.HCons;\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.hlist.HList.cons;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.nil;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.singletonHList;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.adt.hlist.Index.index;\n","import static org.junit.Assert.assertEquals;\n","\n","public class IndexTest {\n","\n","    @Test\n","    public void getHeadAcrossHListTypes() {\n","        Index<String, HCons<String, ?>> stringAtHead = index();\n","\n","        assertEquals(\"nil cons\", stringAtHead.get(nil().cons(\"nil cons\")));\n","        assertEquals(\"cons nil\", stringAtHead.get(cons(\"cons nil\", nil())));\n","        assertEquals(\"cons cons nil\", stringAtHead.get(cons(\"cons cons nil\", cons(\"\", nil()))));\n","        assertEquals(\"singletonHList\", stringAtHead.get(singletonHList(\"singletonHList\")));\n","        assertEquals(\"2-tuple\", stringAtHead.get(tuple(\"2-tuple\", 1)));\n","        assertEquals(\"3-tuple\", stringAtHead.get(tuple(\"3-tuple\", 1, 1)));\n","        assertEquals(\"4-tuple\", stringAtHead.get(tuple(\"4-tuple\", 1, 1, 1)));\n","        assertEquals(\"5-tuple\", stringAtHead.get(tuple(\"5-tuple\", 1, 1, 1, 1)));\n","    }\n","\n","    @Test\n","    public void deepGetAcrossHListTypes() {\n","        Index<String, HCons<Character, ? extends HCons<Boolean, ? extends HCons<Double, ? extends HCons<Integer, ? extends HCons<String, ?>>>>>> string5Deep =\n","                Index.<String>index()\n","                        .<Integer>after()\n","                        .<Double>after()\n","                        .<Boolean>after()\n","                        .after();\n","\n","        assertEquals(\"plain cons\", string5Deep.get(cons('c', cons(true, cons(1d, cons(2, cons(\"plain cons\", nil())))))));\n","        assertEquals(\"consing nil\", string5Deep.get(nil().cons(\"consing nil\").cons(2).cons(1d).cons(true).cons('c')));\n","        assertEquals(\"consing cons\", string5Deep.get(cons(\"consing cons\", nil()).cons(2).cons(1d).cons(true).cons('c')));\n","        assertEquals(\"consing singletonHList\", string5Deep.get(singletonHList(\"consing singletonHList\").cons(2).cons(1d).cons(true).cons('c')));\n","        assertEquals(\"consing 2-tuple\", string5Deep.get(tuple(2, \"consing 2-tuple\").cons(1d).cons(true).cons('c')));\n","        assertEquals(\"consing 3-tuple\", string5Deep.get(tuple(1d, 2, \"consing 3-tuple\").cons(true).cons('c')));\n","        assertEquals(\"consing 4-tuple\", string5Deep.get(tuple(true, 1d, 2, \"consing 4-tuple\").cons('c')));\n","        assertEquals(\"5-tuple\", string5Deep.get(tuple('c', true, 1d, 2, \"5-tuple\")));\n","        assertEquals(\"unnecessarily deep HList\", string5Deep.get(tuple(1d, 2, \"unnecessarily deep HList\", \"deeper\", \"deeper still\").cons(true).cons('c')));\n","    }\n","\n","    @Test\n","    public void setHeadAcrossHListTypes() {\n","        Index<String, HCons<String, ?>> stringAtHead = index();\n","\n","        assertEquals(singletonHList(\"nil cons\"), stringAtHead.set(\"nil cons\", nil().cons(\"\")));\n","        assertEquals(tuple(\"tuple2\", 1), stringAtHead.set(\"tuple2\", nil().cons(1).cons(\"\")));\n","        assertEquals(tuple(\"tuple3\", 2, 1), stringAtHead.set(\"tuple3\", nil().cons(1).cons(2).cons(\"\")));\n","        assertEquals(tuple(\"tuple4\", 3, 2, 1), stringAtHead.set(\"tuple4\", nil().cons(1).cons(2).cons(3).cons(\"\")));\n","        assertEquals(tuple(\"tuple5\", 4, 3, 2, 1), stringAtHead.set(\"tuple5\", nil().cons(1).cons(2).cons(3).cons(4).cons(\"\")));\n","    }\n","\n","    @Test\n","    public void deepSetAcrossHListTypes() {\n","        Index<String, HCons<Character, ? extends HCons<Boolean, ? extends HCons<Double, ? extends HCons<Integer, ? extends HCons<String, ?>>>>>> string5Deep =\n","                Index.<String>index()\n","                        .<Integer>after()\n","                        .<Double>after()\n","                        .<Boolean>after()\n","                        .after();\n","\n","        assertEquals(cons('c', cons(true, cons(1d, cons(2, cons(\"plain cons\", nil()))))),\n","                     string5Deep.set(\"plain cons\", cons('c', cons(true, cons(1d, cons(2, cons(\"\", nil())))))));\n","\n","        assertEquals(nil().cons(\"consing nil\").cons(2).cons(1d).cons(true).cons('c'),\n","                     string5Deep.set(\"consing nil\", nil().cons(\"\").cons(2).cons(1d).cons(true).cons('c')));\n","\n","        assertEquals(cons(\"consing cons\", nil()).cons(2).cons(1d).cons(true).cons('c'),\n","                     string5Deep.set(\"consing cons\", cons(\"\", nil()).cons(2).cons(1d).cons(true).cons('c')));\n","\n","        assertEquals(tuple('c', true, 1d, 2, \"5-tuple\"), string5Deep.set(\"5-tuple\", tuple('c', true, 1d, 2, \"\")));\n","\n","        assertEquals(tuple(1d, 2, \"deep list\", \"deeper\", \"deeper still\").cons(true).cons('c'),\n","                     string5Deep.set(\"deep list\", tuple(1d, 2, \"\", \"deeper\", \"deeper still\").cons(true).cons('c')));\n","    }\n","}"],"method_lines_dic":{"Index::::after()":[24,26],"Index::::get(TargetList)":[34,34],"Index::::set(Target,L)":[44,44],"Index::::index()":[52,54],"Index.Z::::get(com.jnape.palatable.lambda.adt.hlist.HList.HCons<Target, ?>)":[60,63],"Index.Z::::set(Target,L)":[65,69],"Index.Z::::instance()":[71,74],"Index.N::::get(com.jnape.palatable.lambda.adt.hlist.HList.HCons<Head, ? extends List>)":[85,88],"Index.N::::set(Target,L)":[90,94]},"test_method_lines_dic":{"IndexTest::::getHeadAcrossHListTypes()":[15,27],"IndexTest::::deepGetAcrossHListTypes()":[29,47],"IndexTest::::setHeadAcrossHListTypes()":[49,58],"IndexTest::::deepSetAcrossHListTypes()":[60,82]},"reverse_method_lines_dic":{"24":"Index::::after()","25":"Index::::after()","26":"Index::::after()","34":"Index::::get(TargetList)","44":"Index::::set(Target,L)","52":"Index::::index()","53":"Index::::index()","54":"Index::::index()","60":"Index.Z::::get(com.jnape.palatable.lambda.adt.hlist.HList.HCons<Target, ?>)","61":"Index.Z::::get(com.jnape.palatable.lambda.adt.hlist.HList.HCons<Target, ?>)","62":"Index.Z::::get(com.jnape.palatable.lambda.adt.hlist.HList.HCons<Target, ?>)","63":"Index.Z::::get(com.jnape.palatable.lambda.adt.hlist.HList.HCons<Target, ?>)","65":"Index.Z::::set(Target,L)","66":"Index.Z::::set(Target,L)","67":"Index.Z::::set(Target,L)","68":"Index.Z::::set(Target,L)","69":"Index.Z::::set(Target,L)","71":"Index.Z::::instance()","72":"Index.Z::::instance()","73":"Index.Z::::instance()","74":"Index.Z::::instance()","85":"Index.N::::get(com.jnape.palatable.lambda.adt.hlist.HList.HCons<Head, ? extends List>)","86":"Index.N::::get(com.jnape.palatable.lambda.adt.hlist.HList.HCons<Head, ? extends List>)","87":"Index.N::::get(com.jnape.palatable.lambda.adt.hlist.HList.HCons<Head, ? extends List>)","88":"Index.N::::get(com.jnape.palatable.lambda.adt.hlist.HList.HCons<Head, ? extends List>)","90":"Index.N::::set(Target,L)","91":"Index.N::::set(Target,L)","92":"Index.N::::set(Target,L)","93":"Index.N::::set(Target,L)","94":"Index.N::::set(Target,L)"},"test_reverse_method_lines_dic":{"15":"IndexTest::::getHeadAcrossHListTypes()","16":"IndexTest::::getHeadAcrossHListTypes()","17":"IndexTest::::getHeadAcrossHListTypes()","18":"IndexTest::::getHeadAcrossHListTypes()","19":"IndexTest::::getHeadAcrossHListTypes()","20":"IndexTest::::getHeadAcrossHListTypes()","21":"IndexTest::::getHeadAcrossHListTypes()","22":"IndexTest::::getHeadAcrossHListTypes()","23":"IndexTest::::getHeadAcrossHListTypes()","24":"IndexTest::::getHeadAcrossHListTypes()","25":"IndexTest::::getHeadAcrossHListTypes()","26":"IndexTest::::getHeadAcrossHListTypes()","27":"IndexTest::::getHeadAcrossHListTypes()","29":"IndexTest::::deepGetAcrossHListTypes()","30":"IndexTest::::deepGetAcrossHListTypes()","31":"IndexTest::::deepGetAcrossHListTypes()","32":"IndexTest::::deepGetAcrossHListTypes()","33":"IndexTest::::deepGetAcrossHListTypes()","34":"IndexTest::::deepGetAcrossHListTypes()","35":"IndexTest::::deepGetAcrossHListTypes()","36":"IndexTest::::deepGetAcrossHListTypes()","37":"IndexTest::::deepGetAcrossHListTypes()","38":"IndexTest::::deepGetAcrossHListTypes()","39":"IndexTest::::deepGetAcrossHListTypes()","40":"IndexTest::::deepGetAcrossHListTypes()","41":"IndexTest::::deepGetAcrossHListTypes()","42":"IndexTest::::deepGetAcrossHListTypes()","43":"IndexTest::::deepGetAcrossHListTypes()","44":"IndexTest::::deepGetAcrossHListTypes()","45":"IndexTest::::deepGetAcrossHListTypes()","46":"IndexTest::::deepGetAcrossHListTypes()","47":"IndexTest::::deepGetAcrossHListTypes()","49":"IndexTest::::setHeadAcrossHListTypes()","50":"IndexTest::::setHeadAcrossHListTypes()","51":"IndexTest::::setHeadAcrossHListTypes()","52":"IndexTest::::setHeadAcrossHListTypes()","53":"IndexTest::::setHeadAcrossHListTypes()","54":"IndexTest::::setHeadAcrossHListTypes()","55":"IndexTest::::setHeadAcrossHListTypes()","56":"IndexTest::::setHeadAcrossHListTypes()","57":"IndexTest::::setHeadAcrossHListTypes()","58":"IndexTest::::setHeadAcrossHListTypes()","60":"IndexTest::::deepSetAcrossHListTypes()","61":"IndexTest::::deepSetAcrossHListTypes()","62":"IndexTest::::deepSetAcrossHListTypes()","63":"IndexTest::::deepSetAcrossHListTypes()","64":"IndexTest::::deepSetAcrossHListTypes()","65":"IndexTest::::deepSetAcrossHListTypes()","66":"IndexTest::::deepSetAcrossHListTypes()","67":"IndexTest::::deepSetAcrossHListTypes()","68":"IndexTest::::deepSetAcrossHListTypes()","69":"IndexTest::::deepSetAcrossHListTypes()","70":"IndexTest::::deepSetAcrossHListTypes()","71":"IndexTest::::deepSetAcrossHListTypes()","72":"IndexTest::::deepSetAcrossHListTypes()","73":"IndexTest::::deepSetAcrossHListTypes()","74":"IndexTest::::deepSetAcrossHListTypes()","75":"IndexTest::::deepSetAcrossHListTypes()","76":"IndexTest::::deepSetAcrossHListTypes()","77":"IndexTest::::deepSetAcrossHListTypes()","78":"IndexTest::::deepSetAcrossHListTypes()","79":"IndexTest::::deepSetAcrossHListTypes()","80":"IndexTest::::deepSetAcrossHListTypes()","81":"IndexTest::::deepSetAcrossHListTypes()","82":"IndexTest::::deepSetAcrossHListTypes()"},"tests":[{"test_lines":[15,27],"covered_lines":[15,16,53,56,58,62,73]},{"test_lines":[29,47],"covered_lines":[15,16,25,53,56,58,62,73,81,82,83,87]},{"test_lines":[49,58],"covered_lines":[15,16,53,56,58,68,73]},{"test_lines":[60,82],"covered_lines":[15,16,25,53,56,58,68,73,81,82,83,93]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/adt/hlist/Tuple8.java":{"class_content":["package com.jnape.palatable.lambda.adt.hlist;\n","\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.adt.hlist.HList.HCons;\n","import com.jnape.palatable.lambda.adt.product.Product8;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.builtin.fn2.Into;\n","import com.jnape.palatable.lambda.functions.recursion.RecursiveResult;\n","import com.jnape.palatable.lambda.functions.specialized.Pure;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","import com.jnape.palatable.lambda.functor.Bifunctor;\n","import com.jnape.palatable.lambda.functor.builtin.Lazy;\n","import com.jnape.palatable.lambda.monad.Monad;\n","import com.jnape.palatable.lambda.monad.MonadRec;\n","import com.jnape.palatable.lambda.traversable.Traversable;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Uncons.uncons;\n","import static com.jnape.palatable.lambda.functions.recursion.Trampoline.trampoline;\n","\n","/**\n"," * An 8-element tuple product type, implemented as a specialized HList. Supports random access.\n"," *\n"," * @param <_1> The first slot element type\n"," * @param <_2> The second slot element type\n"," * @param <_3> The third slot element type\n"," * @param <_4> The fourth slot element type\n"," * @param <_5> The fifth slot element type\n"," * @param <_6> The sixth slot element type\n"," * @param <_7> The seventh slot element type\n"," * @param <_8> The eighth slot element type\n"," * @see Product8\n"," * @see HList\n"," * @see SingletonHList\n"," * @see Tuple2\n"," * @see Tuple3\n"," * @see Tuple4\n"," * @see Tuple5\n"," * @see Tuple6\n"," * @see Tuple7\n"," */\n","public class Tuple8<_1, _2, _3, _4, _5, _6, _7, _8> extends HCons<_1, Tuple7<_2, _3, _4, _5, _6, _7, _8>> implements\n","        Product8<_1, _2, _3, _4, _5, _6, _7, _8>,\n","        MonadRec<_8, Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>,\n","        Bifunctor<_7, _8, Tuple8<_1, _2, _3, _4, _5, _6, ?, ?>>,\n","        Traversable<_8, Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>> {\n","\n","    private final _1 _1;\n","    private final _2 _2;\n","    private final _3 _3;\n","    private final _4 _4;\n","    private final _5 _5;\n","    private final _6 _6;\n","    private final _7 _7;\n","    private final _8 _8;\n","\n","    Tuple8(_1 _1, Tuple7<_2, _3, _4, _5, _6, _7, _8> tail) {\n","        super(_1, tail);\n","        this._1 = _1;\n","        _2      = tail._1();\n","        _3      = tail._2();\n","        _4      = tail._3();\n","        _5      = tail._4();\n","        _6      = tail._5();\n","        _7      = tail._6();\n","        _8      = tail._7();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_0> HCons<_0, Tuple8<_1, _2, _3, _4, _5, _6, _7, _8>> cons(_0 _0) {\n","        return new HCons<>(_0, this);\n","    }\n","\n","    /**\n","     * Snoc an element onto the back of this {@link Tuple8}.\n","     *\n","     * @param _9   the new last element\n","     * @param <_9> the new last element type\n","     * @return the new {@link HCons consed} {@link Tuple8}\n","     */\n","    public <_9> HCons<_1, Tuple8<_2, _3, _4, _5, _6, _7, _8, _9>> snoc(_9 _9) {\n","        return singletonHList(_9).cons(_8).cons(_7).cons(_6).cons(_5).cons(_4).cons(_3).cons(_2).cons(_1);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public _1 _1() {\n","        return _1;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public _2 _2() {\n","        return _2;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public _3 _3() {\n","        return _3;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public _4 _4() {\n","        return _4;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public _5 _5() {\n","        return _5;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public _6 _6() {\n","        return _6;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public _7 _7() {\n","        return _7;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public _8 _8() {\n","        return _8;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple8<_2, _3, _4, _5, _6, _7, _8, _1> rotateL8() {\n","        return tuple(_2, _3, _4, _5, _6, _7, _8, _1);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple8<_8, _1, _2, _3, _4, _5, _6, _7> rotateR8() {\n","        return tuple(_8, _1, _2, _3, _4, _5, _6, _7);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple8<_2, _3, _4, _5, _6, _7, _1, _8> rotateL7() {\n","        return tuple(_2, _3, _4, _5, _6, _7, _1, _8);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple8<_7, _1, _2, _3, _4, _5, _6, _8> rotateR7() {\n","        return tuple(_7, _1, _2, _3, _4, _5, _6, _8);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple8<_2, _3, _4, _5, _6, _1, _7, _8> rotateL6() {\n","        return tuple(_2, _3, _4, _5, _6, _1, _7, _8);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple8<_6, _1, _2, _3, _4, _5, _7, _8> rotateR6() {\n","        return tuple(_6, _1, _2, _3, _4, _5, _7, _8);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple8<_2, _3, _4, _5, _1, _6, _7, _8> rotateL5() {\n","        return tuple(_2, _3, _4, _5, _1, _6, _7, _8);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple8<_5, _1, _2, _3, _4, _6, _7, _8> rotateR5() {\n","        return tuple(_5, _1, _2, _3, _4, _6, _7, _8);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple8<_2, _3, _4, _1, _5, _6, _7, _8> rotateL4() {\n","        return tuple(_2, _3, _4, _1, _5, _6, _7, _8);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple8<_4, _1, _2, _3, _5, _6, _7, _8> rotateR4() {\n","        return tuple(_4, _1, _2, _3, _5, _6, _7, _8);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple8<_2, _3, _1, _4, _5, _6, _7, _8> rotateL3() {\n","        return tuple(_2, _3, _1, _4, _5, _6, _7, _8);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple8<_3, _1, _2, _4, _5, _6, _7, _8> rotateR3() {\n","        return tuple(_3, _1, _2, _4, _5, _6, _7, _8);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple8<_2, _1, _3, _4, _5, _6, _7, _8> invert() {\n","        return tuple(_2, _1, _3, _4, _5, _6, _7, _8);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_8Prime> Tuple8<_1, _2, _3, _4, _5, _6, _7, _8Prime> fmap(Fn1<? super _8, ? extends _8Prime> fn) {\n","        return MonadRec.super.<_8Prime>fmap(fn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_7Prime> Tuple8<_1, _2, _3, _4, _5, _6, _7Prime, _8> biMapL(Fn1<? super _7, ? extends _7Prime> fn) {\n","        return (Tuple8<_1, _2, _3, _4, _5, _6, _7Prime, _8>) Bifunctor.super.<_7Prime>biMapL(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_8Prime> Tuple8<_1, _2, _3, _4, _5, _6, _7, _8Prime> biMapR(Fn1<? super _8, ? extends _8Prime> fn) {\n","        return (Tuple8<_1, _2, _3, _4, _5, _6, _7, _8Prime>) Bifunctor.super.<_8Prime>biMapR(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_7Prime, _8Prime> Tuple8<_1, _2, _3, _4, _5, _6, _7Prime, _8Prime> biMap(\n","            Fn1<? super _7, ? extends _7Prime> lFn,\n","            Fn1<? super _8, ? extends _8Prime> rFn) {\n","        return new Tuple8<>(_1(), tail().biMap(lFn, rFn));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_8Prime> Tuple8<_1, _2, _3, _4, _5, _6, _7, _8Prime> pure(_8Prime _8Prime) {\n","        return tuple(_1, _2, _3, _4, _5, _6, _7, _8Prime);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_8Prime> Tuple8<_1, _2, _3, _4, _5, _6, _7, _8Prime> zip(\n","            Applicative<Fn1<? super _8, ? extends _8Prime>, Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>> appFn) {\n","        return MonadRec.super.zip(appFn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_8Prime> Lazy<Tuple8<_1, _2, _3, _4, _5, _6, _7, _8Prime>> lazyZip(\n","            Lazy<? extends Applicative<Fn1<? super _8, ? extends _8Prime>,\n","                    Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>> lazyAppFn) {\n","        return MonadRec.super.lazyZip(lazyAppFn).fmap(Monad<_8Prime, Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>::coerce);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_8Prime> Tuple8<_1, _2, _3, _4, _5, _6, _7, _8Prime> discardL(\n","            Applicative<_8Prime, Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>> appB) {\n","        return MonadRec.super.discardL(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_8Prime> Tuple8<_1, _2, _3, _4, _5, _6, _7, _8> discardR(\n","            Applicative<_8Prime, Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>> appB) {\n","        return MonadRec.super.discardR(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_8Prime> Tuple8<_1, _2, _3, _4, _5, _6, _7, _8Prime> flatMap(\n","            Fn1<? super _8, ? extends Monad<_8Prime, Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>> f) {\n","        return pure(f.apply(_8).<Tuple8<_1, _2, _3, _4, _5, _6, _7, _8Prime>>coerce()._8());\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_8Prime> Tuple8<_1, _2, _3, _4, _5, _6, _7, _8Prime> trampolineM(\n","            Fn1<? super _8, ? extends MonadRec<RecursiveResult<_8, _8Prime>, Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>> fn) {\n","        return fmap(trampoline(x -> fn.apply(x)\n","                .<Tuple8<_1, _2, _3, _4, _5, _6, _7, RecursiveResult<_8, _8Prime>>>coerce()\n","                ._8()));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_8Prime, App extends Applicative<?, App>,\n","            TravB extends Traversable<_8Prime, Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>,\n","            AppTrav extends Applicative<TravB, App>> AppTrav traverse(\n","            Fn1<? super _8, ? extends Applicative<_8Prime, App>> fn,\n","            Fn1<? super TravB, ? extends AppTrav> pure) {\n","        return fn.apply(_8).fmap(_8Prime -> fmap(constantly(_8Prime))).<TravB>fmap(Applicative::coerce).coerce();\n","    }\n","\n","    /**\n","     * Returns a <code>{@link Tuple7}&lt;_1, _2, _3, _4, _5, _6, _7&gt;</code> of all the elements of this\n","     * <code>{@link Tuple8}&lt;_1, _2, _3, _4, _5, _6, _7, _8&gt;</code> except the last.\n","     *\n","     * @return The {@link Tuple7}&lt;_1, _2, _3, _4, _5, _6, _7&gt; representing all but the last element\n","     */\n","    public Tuple7<_1, _2, _3, _4, _5, _6, _7> init() {\n","        return rotateR8().tail();\n","    }\n","\n","    /**\n","     * Given a value of type <code>A</code>, produced an instance of this tuple with each slot set to that value.\n","     *\n","     * @param a   the value to fill the tuple with\n","     * @param <A> the value type\n","     * @return the filled tuple\n","     * @see Tuple2#fill\n","     */\n","    public static <A> Tuple8<A, A, A, A, A, A, A, A> fill(A a) {\n","        return tuple(a, a, a, a, a, a, a, a);\n","    }\n","\n","    /**\n","     * Return {@link Maybe#just(Object) just} the first eight elements from the given {@link Iterable}, or\n","     * {@link Maybe#nothing() nothing} if there are less than eight elements.\n","     *\n","     * @param as  the {@link Iterable}\n","     * @param <A> the {@link Iterable} element type\n","     * @return {@link Maybe} the first seven elements of the given {@link Iterable}\n","     */\n","    public static <A> Maybe<Tuple8<A, A, A, A, A, A, A, A>> fromIterable(Iterable<A> as) {\n","        return uncons(as).flatMap(Into.into((head, tail) -> Tuple7.fromIterable(tail).fmap(t -> t.cons(head))));\n","    }\n","\n","    /**\n","     * The canonical {@link Pure} instance for {@link Tuple8}.\n","     *\n","     * @param _1   the head element\n","     * @param _2   the second element\n","     * @param _3   the third element\n","     * @param _4   the fourth element\n","     * @param _5   the fifth element\n","     * @param _6   the sixth element\n","     * @param _7   the seventh element\n","     * @param <_1> the head element type\n","     * @param <_2> the second element type\n","     * @param <_3> the third element type\n","     * @param <_4> the fourth element type\n","     * @param <_5> the fifth element type\n","     * @param <_6> the sixth element type\n","     * @param <_7> the seventh element type\n","     * @return the {@link Pure} instance\n","     */\n","    public static <_1, _2, _3, _4, _5, _6, _7> Pure<Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>> pureTuple(_1 _1, _2 _2,\n","                                                                                                     _3 _3, _4 _4,\n","                                                                                                     _5 _5, _6 _6,\n","                                                                                                     _7 _7) {\n","        return new Pure<Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>() {\n","            @Override\n","            public <_8> Tuple8<_1, _2, _3, _4, _5, _6, _7, _8> checkedApply(_8 _8) throws Throwable {\n","                return tuple(_1, _2, _3, _4, _5, _6, _7, _8);\n","            }\n","        };\n","    }\n","\n","}\n"],"test_content":["package com.jnape.palatable.lambda.adt.hlist;\n","\n","import com.jnape.palatable.lambda.adt.hlist.HList.HCons;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Before;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.ApplicativeLaws;\n","import testsupport.traits.BifunctorLaws;\n","import testsupport.traits.FunctorLaws;\n","import testsupport.traits.MonadLaws;\n","import testsupport.traits.MonadRecLaws;\n","import testsupport.traits.TraversableLaws;\n","\n","import java.time.LocalDate;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.adt.hlist.Tuple8.pureTuple;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Repeat.repeat;\n","import static java.util.Collections.emptyList;\n","import static java.util.Collections.singletonList;\n","import static org.junit.Assert.assertEquals;\n","import static org.mockito.Mockito.spy;\n","import static org.mockito.Mockito.times;\n","import static org.mockito.Mockito.verify;\n","import static org.mockito.Mockito.verifyNoMoreInteractions;\n","\n","@RunWith(Traits.class)\n","public class Tuple8Test {\n","\n","    private Tuple8<Short, Byte, Float, Integer, String, Character, Boolean, Long> tuple8;\n","\n","    @Before\n","    public void setUp() {\n","        Tuple2<Boolean, Long>                    tuple2 = new Tuple2<>(false, new SingletonHList<>(5L));\n","        Tuple4<String, Character, Boolean, Long> tuple4 = new Tuple4<>(\"2\", new Tuple3<>('3', tuple2));\n","        tuple8 = new Tuple8<>((short) 65535, new Tuple7<>((byte) 127, new Tuple6<>(2.0f, new Tuple5<>(1, tuple4))));\n","    }\n","\n","    @TestTraits({\n","            FunctorLaws.class,\n","            ApplicativeLaws.class,\n","            MonadLaws.class,\n","            MonadRecLaws.class,\n","            BifunctorLaws.class,\n","            TraversableLaws.class})\n","    public Tuple8<?, ?, ?, ?, ?, ?, ?, ?> testSubject() {\n","        return tuple(\"one\", 2, 3d, 4f, '5', (byte) 6, 7L, (short) 65535);\n","    }\n","\n","    @Test\n","    public void head() {\n","        assertEquals((Short) (short) 65535, tuple8.head());\n","    }\n","\n","    @Test\n","    public void tail() {\n","        Tuple2<Boolean, Long>                    tuple2 = new Tuple2<>(false, new SingletonHList<>(5L));\n","        Tuple4<String, Character, Boolean, Long> tuple4 = new Tuple4<>(\"2\", new Tuple3<>('3', tuple2));\n","        assertEquals(new Tuple7<>((byte) 127, new Tuple6<>(2.0f, new Tuple5<>(1, tuple4))), tuple8.tail());\n","    }\n","\n","    @Test\n","    public void cons() {\n","        assertEquals(new HCons<>(0, tuple8), tuple8.cons(0));\n","    }\n","\n","    @Test\n","    public void snoc() {\n","        LocalDate last = LocalDate.of(2020, 4, 14);\n","        HCons<String, Tuple8<Long, String, Integer, String, Integer, String, Long, LocalDate>> actual =\n","                tuple(\"b\", 7L, \"c\", 11, \"d\", 13, \"e\", 15L).snoc(last);\n","        assertEquals(\"b\", actual.head());\n","        assertEquals(actual.tail(), tuple(7L, \"c\", 11, \"d\", 13, \"e\", 15L, last));\n","    }\n","\n","    @Test\n","    public void accessors() {\n","        assertEquals((Short) (short) 65535, tuple8._1());\n","        assertEquals((Byte) (byte) 127, tuple8._2());\n","        assertEquals((Float) 2.0f, tuple8._3());\n","        assertEquals((Integer) 1, tuple8._4());\n","        assertEquals(\"2\", tuple8._5());\n","        assertEquals((Character) '3', tuple8._6());\n","        assertEquals(false, tuple8._7());\n","        assertEquals((Long) 5L, tuple8._8());\n","    }\n","\n","    @Test\n","    public void randomAccess() {\n","        Tuple7<String, String, String, String, String, String, String> spiedTail =\n","                spy(tuple(\"second\", \"third\", \"fourth\", \"fifth\", \"sixth\", \"seventh\", \"eighth\"));\n","        Tuple8<String, String, String, String, String, String, String, String> tuple8 =\n","                new Tuple8<>(\"first\", spiedTail);\n","\n","        verify(spiedTail, times(1))._1();\n","        verify(spiedTail, times(1))._2();\n","        verify(spiedTail, times(1))._3();\n","        verify(spiedTail, times(1))._4();\n","        verify(spiedTail, times(1))._5();\n","        verify(spiedTail, times(1))._6();\n","        verify(spiedTail, times(1))._7();\n","        tuple8._1();\n","        tuple8._2();\n","        tuple8._3();\n","        tuple8._4();\n","        tuple8._5();\n","        tuple8._6();\n","        tuple8._7();\n","        tuple8._8();\n","        verifyNoMoreInteractions(spiedTail);\n","    }\n","\n","    @Test\n","    public void fill() {\n","        assertEquals(tuple(\"foo\", \"foo\", \"foo\", \"foo\", \"foo\", \"foo\", \"foo\", \"foo\"), Tuple8.fill(\"foo\"));\n","    }\n","\n","    @Test\n","    public void into() {\n","        Tuple8<String, Integer, Double, Boolean, Float, Short, Byte, Long> tuple =\n","                tuple(\"foo\", 1, 2.0d, false, 3f, (short) 4, (byte) 5, 6L);\n","        assertEquals(\"foo12.0false3.0456\", tuple.into((s, i, d, b, f, sh, by, l) -> s + i + d + b + f + sh + by + l));\n","    }\n","\n","    @Test\n","    public void zipPrecedence() {\n","        Tuple8<String, Integer, Integer, Integer, Integer, Integer, Integer, Integer> a\n","                = tuple(\"foo\", 1, 2, 3, 4, 5, 6, 7);\n","        Tuple8<String, Integer, Integer, Integer, Integer, Integer, Integer, Fn1<? super Integer, ? extends Integer>> b\n","                = tuple(\"bar\", 2, 3, 4, 5, 6, 7, x -> x + 1);\n","        assertEquals(tuple(\"foo\", 1, 2, 3, 4, 5, 6, 8), a.zip(b));\n","    }\n","\n","    @Test\n","    public void flatMapPrecedence() {\n","        Tuple8<String, Integer, Integer, Integer, Integer, Integer, Integer, Integer> a =\n","                tuple(\"foo\", 1, 2, 3, 4, 5, 6, 7);\n","        Fn1<Integer, Tuple8<String, Integer, Integer, Integer, Integer, Integer, Integer, Integer>> b =\n","                x -> tuple(\"bar\", 2, 3, 4, 5, 6, 7, x + 1);\n","        assertEquals(tuple(\"foo\", 1, 2, 3, 4, 5, 6, 8), a.flatMap(b));\n","    }\n","\n","    @Test\n","    public void fromIterable() {\n","        assertEquals(nothing(), Tuple8.fromIterable(emptyList()));\n","        assertEquals(nothing(), Tuple8.fromIterable(singletonList(1)));\n","        assertEquals(just(tuple(1, 1, 1, 1, 1, 1, 1, 1)), Tuple8.fromIterable(repeat(1)));\n","    }\n","\n","    @Test\n","    public void staticPure() {\n","        Tuple8<Byte, Short, Integer, Long, Float, Double, Boolean, Character> tuple =\n","                pureTuple((byte) 1, (short) 2, 3, 4L, 5F, 6D, true).apply('8');\n","        assertEquals(tuple((byte) 1, (short) 2, 3, 4L, 5F, 6D, true, '8'), tuple);\n","    }\n","\n","    @Test\n","    public void init() {\n","        assertEquals(tuple(1, 2, 3, 4, 5, 6, 7),\n","                     tuple(1, 2, 3, 4, 5, 6, 7, 8).init());\n","    }\n","}"],"method_lines_dic":{"Tuple8::::cons(_0)":[72,75],"Tuple8::::snoc(_9)":[84,86],"Tuple8::::_1()":[91,94],"Tuple8::::_2()":[99,102],"Tuple8::::_3()":[107,110],"Tuple8::::_4()":[115,118],"Tuple8::::_5()":[123,126],"Tuple8::::_6()":[131,134],"Tuple8::::_7()":[139,142],"Tuple8::::_8()":[147,150],"Tuple8::::rotateL8()":[155,158],"Tuple8::::rotateR8()":[163,166],"Tuple8::::rotateL7()":[171,174],"Tuple8::::rotateR7()":[179,182],"Tuple8::::rotateL6()":[187,190],"Tuple8::::rotateR6()":[195,198],"Tuple8::::rotateL5()":[203,206],"Tuple8::::rotateR5()":[211,214],"Tuple8::::rotateL4()":[219,222],"Tuple8::::rotateR4()":[227,230],"Tuple8::::rotateL3()":[235,238],"Tuple8::::rotateR3()":[243,246],"Tuple8::::invert()":[251,254],"Tuple8::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends _8Prime>)":[259,262],"Tuple8::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>)":[267,270],"Tuple8::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends _8Prime>)":[275,278],"Tuple8::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends _8Prime>)":[283,288],"Tuple8::::pure(_8Prime)":[293,296],"Tuple8::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends _8Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>)":[301,305],"Tuple8::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends _8Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>>)":[310,315],"Tuple8::::discardL(com.jnape.palatable.lambda.functor.Applicative<_8Prime, com.jnape.palatable.lambda.adt.hlist.Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>)":[320,324],"Tuple8::::discardR(com.jnape.palatable.lambda.functor.Applicative<_8Prime, com.jnape.palatable.lambda.adt.hlist.Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>)":[329,333],"Tuple8::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends com.jnape.palatable.lambda.monad.Monad<_8Prime, com.jnape.palatable.lambda.adt.hlist.Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>>)":[338,342],"Tuple8::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_8, _8Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>>)":[347,353],"Tuple8::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends com.jnape.palatable.lambda.functor.Applicative<_8Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)":[358,365],"Tuple8::::init()":[373,375],"Tuple8::::fill(A)":[385,387],"Tuple8::::fromIterable(java.lang.Iterable<A>)":[397,399],"Tuple8::::pureTuple(_1,_2,_3,_4,_5,_6,_7)":[420,430]},"test_method_lines_dic":{"Tuple8Test::::setUp()":[37,42],"Tuple8Test::::testSubject()":[44,53],"Tuple8Test::::head()":[55,58],"Tuple8Test::::tail()":[60,65],"Tuple8Test::::cons()":[67,70],"Tuple8Test::::snoc()":[72,79],"Tuple8Test::::accessors()":[81,91],"Tuple8Test::::randomAccess()":[93,116],"Tuple8Test::::fill()":[118,121],"Tuple8Test::::into()":[123,128],"Tuple8Test::::zipPrecedence()":[130,137],"Tuple8Test::::flatMapPrecedence()":[139,146],"Tuple8Test::::fromIterable()":[148,153],"Tuple8Test::::staticPure()":[155,160],"Tuple8Test::::init()":[162,166]},"reverse_method_lines_dic":{"72":"Tuple8::::cons(_0)","73":"Tuple8::::cons(_0)","74":"Tuple8::::cons(_0)","75":"Tuple8::::cons(_0)","84":"Tuple8::::snoc(_9)","85":"Tuple8::::snoc(_9)","86":"Tuple8::::snoc(_9)","91":"Tuple8::::_1()","92":"Tuple8::::_1()","93":"Tuple8::::_1()","94":"Tuple8::::_1()","99":"Tuple8::::_2()","100":"Tuple8::::_2()","101":"Tuple8::::_2()","102":"Tuple8::::_2()","107":"Tuple8::::_3()","108":"Tuple8::::_3()","109":"Tuple8::::_3()","110":"Tuple8::::_3()","115":"Tuple8::::_4()","116":"Tuple8::::_4()","117":"Tuple8::::_4()","118":"Tuple8::::_4()","123":"Tuple8::::_5()","124":"Tuple8::::_5()","125":"Tuple8::::_5()","126":"Tuple8::::_5()","131":"Tuple8::::_6()","132":"Tuple8::::_6()","133":"Tuple8::::_6()","134":"Tuple8::::_6()","139":"Tuple8::::_7()","140":"Tuple8::::_7()","141":"Tuple8::::_7()","142":"Tuple8::::_7()","147":"Tuple8::::_8()","148":"Tuple8::::_8()","149":"Tuple8::::_8()","150":"Tuple8::::_8()","155":"Tuple8::::rotateL8()","156":"Tuple8::::rotateL8()","157":"Tuple8::::rotateL8()","158":"Tuple8::::rotateL8()","163":"Tuple8::::rotateR8()","164":"Tuple8::::rotateR8()","165":"Tuple8::::rotateR8()","166":"Tuple8::::rotateR8()","171":"Tuple8::::rotateL7()","172":"Tuple8::::rotateL7()","173":"Tuple8::::rotateL7()","174":"Tuple8::::rotateL7()","179":"Tuple8::::rotateR7()","180":"Tuple8::::rotateR7()","181":"Tuple8::::rotateR7()","182":"Tuple8::::rotateR7()","187":"Tuple8::::rotateL6()","188":"Tuple8::::rotateL6()","189":"Tuple8::::rotateL6()","190":"Tuple8::::rotateL6()","195":"Tuple8::::rotateR6()","196":"Tuple8::::rotateR6()","197":"Tuple8::::rotateR6()","198":"Tuple8::::rotateR6()","203":"Tuple8::::rotateL5()","204":"Tuple8::::rotateL5()","205":"Tuple8::::rotateL5()","206":"Tuple8::::rotateL5()","211":"Tuple8::::rotateR5()","212":"Tuple8::::rotateR5()","213":"Tuple8::::rotateR5()","214":"Tuple8::::rotateR5()","219":"Tuple8::::rotateL4()","220":"Tuple8::::rotateL4()","221":"Tuple8::::rotateL4()","222":"Tuple8::::rotateL4()","227":"Tuple8::::rotateR4()","228":"Tuple8::::rotateR4()","229":"Tuple8::::rotateR4()","230":"Tuple8::::rotateR4()","235":"Tuple8::::rotateL3()","236":"Tuple8::::rotateL3()","237":"Tuple8::::rotateL3()","238":"Tuple8::::rotateL3()","243":"Tuple8::::rotateR3()","244":"Tuple8::::rotateR3()","245":"Tuple8::::rotateR3()","246":"Tuple8::::rotateR3()","251":"Tuple8::::invert()","252":"Tuple8::::invert()","253":"Tuple8::::invert()","254":"Tuple8::::invert()","259":"Tuple8::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends _8Prime>)","260":"Tuple8::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends _8Prime>)","261":"Tuple8::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends _8Prime>)","262":"Tuple8::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends _8Prime>)","267":"Tuple8::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>)","268":"Tuple8::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>)","269":"Tuple8::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>)","270":"Tuple8::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>)","275":"Tuple8::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends _8Prime>)","276":"Tuple8::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends _8Prime>)","277":"Tuple8::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends _8Prime>)","278":"Tuple8::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends _8Prime>)","283":"Tuple8::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends _8Prime>)","284":"Tuple8::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends _8Prime>)","285":"Tuple8::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends _8Prime>)","286":"Tuple8::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends _8Prime>)","287":"Tuple8::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends _8Prime>)","288":"Tuple8::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends _8Prime>)","293":"Tuple8::::pure(_8Prime)","294":"Tuple8::::pure(_8Prime)","295":"Tuple8::::pure(_8Prime)","296":"Tuple8::::pure(_8Prime)","301":"Tuple8::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends _8Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>)","302":"Tuple8::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends _8Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>)","303":"Tuple8::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends _8Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>)","304":"Tuple8::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends _8Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>)","305":"Tuple8::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends _8Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>)","310":"Tuple8::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends _8Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>>)","311":"Tuple8::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends _8Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>>)","312":"Tuple8::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends _8Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>>)","313":"Tuple8::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends _8Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>>)","314":"Tuple8::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends _8Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>>)","315":"Tuple8::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends _8Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>>)","320":"Tuple8::::discardL(com.jnape.palatable.lambda.functor.Applicative<_8Prime, com.jnape.palatable.lambda.adt.hlist.Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>)","321":"Tuple8::::discardL(com.jnape.palatable.lambda.functor.Applicative<_8Prime, com.jnape.palatable.lambda.adt.hlist.Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>)","322":"Tuple8::::discardL(com.jnape.palatable.lambda.functor.Applicative<_8Prime, com.jnape.palatable.lambda.adt.hlist.Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>)","323":"Tuple8::::discardL(com.jnape.palatable.lambda.functor.Applicative<_8Prime, com.jnape.palatable.lambda.adt.hlist.Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>)","324":"Tuple8::::discardL(com.jnape.palatable.lambda.functor.Applicative<_8Prime, com.jnape.palatable.lambda.adt.hlist.Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>)","329":"Tuple8::::discardR(com.jnape.palatable.lambda.functor.Applicative<_8Prime, com.jnape.palatable.lambda.adt.hlist.Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>)","330":"Tuple8::::discardR(com.jnape.palatable.lambda.functor.Applicative<_8Prime, com.jnape.palatable.lambda.adt.hlist.Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>)","331":"Tuple8::::discardR(com.jnape.palatable.lambda.functor.Applicative<_8Prime, com.jnape.palatable.lambda.adt.hlist.Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>)","332":"Tuple8::::discardR(com.jnape.palatable.lambda.functor.Applicative<_8Prime, com.jnape.palatable.lambda.adt.hlist.Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>)","333":"Tuple8::::discardR(com.jnape.palatable.lambda.functor.Applicative<_8Prime, com.jnape.palatable.lambda.adt.hlist.Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>)","338":"Tuple8::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends com.jnape.palatable.lambda.monad.Monad<_8Prime, com.jnape.palatable.lambda.adt.hlist.Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>>)","339":"Tuple8::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends com.jnape.palatable.lambda.monad.Monad<_8Prime, com.jnape.palatable.lambda.adt.hlist.Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>>)","340":"Tuple8::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends com.jnape.palatable.lambda.monad.Monad<_8Prime, com.jnape.palatable.lambda.adt.hlist.Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>>)","341":"Tuple8::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends com.jnape.palatable.lambda.monad.Monad<_8Prime, com.jnape.palatable.lambda.adt.hlist.Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>>)","342":"Tuple8::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends com.jnape.palatable.lambda.monad.Monad<_8Prime, com.jnape.palatable.lambda.adt.hlist.Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>>)","347":"Tuple8::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_8, _8Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>>)","348":"Tuple8::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_8, _8Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>>)","349":"Tuple8::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_8, _8Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>>)","350":"Tuple8::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_8, _8Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>>)","351":"Tuple8::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_8, _8Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>>)","352":"Tuple8::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_8, _8Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>>)","353":"Tuple8::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_8, _8Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple8<_1, _2, _3, _4, _5, _6, _7, ?>>>)","358":"Tuple8::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends com.jnape.palatable.lambda.functor.Applicative<_8Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","359":"Tuple8::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends com.jnape.palatable.lambda.functor.Applicative<_8Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","360":"Tuple8::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends com.jnape.palatable.lambda.functor.Applicative<_8Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","361":"Tuple8::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends com.jnape.palatable.lambda.functor.Applicative<_8Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","362":"Tuple8::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends com.jnape.palatable.lambda.functor.Applicative<_8Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","363":"Tuple8::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends com.jnape.palatable.lambda.functor.Applicative<_8Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","364":"Tuple8::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends com.jnape.palatable.lambda.functor.Applicative<_8Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","365":"Tuple8::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _8, ? extends com.jnape.palatable.lambda.functor.Applicative<_8Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","373":"Tuple8::::init()","374":"Tuple8::::init()","375":"Tuple8::::init()","385":"Tuple8::::fill(A)","386":"Tuple8::::fill(A)","387":"Tuple8::::fill(A)","397":"Tuple8::::fromIterable(java.lang.Iterable<A>)","398":"Tuple8::::fromIterable(java.lang.Iterable<A>)","399":"Tuple8::::fromIterable(java.lang.Iterable<A>)","420":"Tuple8::::pureTuple(_1,_2,_3,_4,_5,_6,_7)","421":"Tuple8::::pureTuple(_1,_2,_3,_4,_5,_6,_7)","422":"Tuple8::::pureTuple(_1,_2,_3,_4,_5,_6,_7)","423":"Tuple8::::pureTuple(_1,_2,_3,_4,_5,_6,_7)","424":"Tuple8::::pureTuple(_1,_2,_3,_4,_5,_6,_7)","425":"Tuple8::::pureTuple(_1,_2,_3,_4,_5,_6,_7)","426":"Tuple8::::pureTuple(_1,_2,_3,_4,_5,_6,_7)","427":"Tuple8::::pureTuple(_1,_2,_3,_4,_5,_6,_7)","428":"Tuple8::::pureTuple(_1,_2,_3,_4,_5,_6,_7)","429":"Tuple8::::pureTuple(_1,_2,_3,_4,_5,_6,_7)","430":"Tuple8::::pureTuple(_1,_2,_3,_4,_5,_6,_7)"},"test_reverse_method_lines_dic":{"37":"Tuple8Test::::setUp()","38":"Tuple8Test::::setUp()","39":"Tuple8Test::::setUp()","40":"Tuple8Test::::setUp()","41":"Tuple8Test::::setUp()","42":"Tuple8Test::::setUp()","44":"Tuple8Test::::testSubject()","45":"Tuple8Test::::testSubject()","46":"Tuple8Test::::testSubject()","47":"Tuple8Test::::testSubject()","48":"Tuple8Test::::testSubject()","49":"Tuple8Test::::testSubject()","50":"Tuple8Test::::testSubject()","51":"Tuple8Test::::testSubject()","52":"Tuple8Test::::testSubject()","53":"Tuple8Test::::testSubject()","55":"Tuple8Test::::head()","56":"Tuple8Test::::head()","57":"Tuple8Test::::head()","58":"Tuple8Test::::head()","60":"Tuple8Test::::tail()","61":"Tuple8Test::::tail()","62":"Tuple8Test::::tail()","63":"Tuple8Test::::tail()","64":"Tuple8Test::::tail()","65":"Tuple8Test::::tail()","67":"Tuple8Test::::cons()","68":"Tuple8Test::::cons()","69":"Tuple8Test::::cons()","70":"Tuple8Test::::cons()","72":"Tuple8Test::::snoc()","73":"Tuple8Test::::snoc()","74":"Tuple8Test::::snoc()","75":"Tuple8Test::::snoc()","76":"Tuple8Test::::snoc()","77":"Tuple8Test::::snoc()","78":"Tuple8Test::::snoc()","79":"Tuple8Test::::snoc()","81":"Tuple8Test::::accessors()","82":"Tuple8Test::::accessors()","83":"Tuple8Test::::accessors()","84":"Tuple8Test::::accessors()","85":"Tuple8Test::::accessors()","86":"Tuple8Test::::accessors()","87":"Tuple8Test::::accessors()","88":"Tuple8Test::::accessors()","89":"Tuple8Test::::accessors()","90":"Tuple8Test::::accessors()","91":"Tuple8Test::::accessors()","93":"Tuple8Test::::randomAccess()","94":"Tuple8Test::::randomAccess()","95":"Tuple8Test::::randomAccess()","96":"Tuple8Test::::randomAccess()","97":"Tuple8Test::::randomAccess()","98":"Tuple8Test::::randomAccess()","99":"Tuple8Test::::randomAccess()","100":"Tuple8Test::::randomAccess()","101":"Tuple8Test::::randomAccess()","102":"Tuple8Test::::randomAccess()","103":"Tuple8Test::::randomAccess()","104":"Tuple8Test::::randomAccess()","105":"Tuple8Test::::randomAccess()","106":"Tuple8Test::::randomAccess()","107":"Tuple8Test::::randomAccess()","108":"Tuple8Test::::randomAccess()","109":"Tuple8Test::::randomAccess()","110":"Tuple8Test::::randomAccess()","111":"Tuple8Test::::randomAccess()","112":"Tuple8Test::::randomAccess()","113":"Tuple8Test::::randomAccess()","114":"Tuple8Test::::randomAccess()","115":"Tuple8Test::::randomAccess()","116":"Tuple8Test::::randomAccess()","118":"Tuple8Test::::fill()","119":"Tuple8Test::::fill()","120":"Tuple8Test::::fill()","121":"Tuple8Test::::fill()","123":"Tuple8Test::::into()","124":"Tuple8Test::::into()","125":"Tuple8Test::::into()","126":"Tuple8Test::::into()","127":"Tuple8Test::::into()","128":"Tuple8Test::::into()","130":"Tuple8Test::::zipPrecedence()","131":"Tuple8Test::::zipPrecedence()","132":"Tuple8Test::::zipPrecedence()","133":"Tuple8Test::::zipPrecedence()","134":"Tuple8Test::::zipPrecedence()","135":"Tuple8Test::::zipPrecedence()","136":"Tuple8Test::::zipPrecedence()","137":"Tuple8Test::::zipPrecedence()","139":"Tuple8Test::::flatMapPrecedence()","140":"Tuple8Test::::flatMapPrecedence()","141":"Tuple8Test::::flatMapPrecedence()","142":"Tuple8Test::::flatMapPrecedence()","143":"Tuple8Test::::flatMapPrecedence()","144":"Tuple8Test::::flatMapPrecedence()","145":"Tuple8Test::::flatMapPrecedence()","146":"Tuple8Test::::flatMapPrecedence()","148":"Tuple8Test::::fromIterable()","149":"Tuple8Test::::fromIterable()","150":"Tuple8Test::::fromIterable()","151":"Tuple8Test::::fromIterable()","152":"Tuple8Test::::fromIterable()","153":"Tuple8Test::::fromIterable()","155":"Tuple8Test::::staticPure()","156":"Tuple8Test::::staticPure()","157":"Tuple8Test::::staticPure()","158":"Tuple8Test::::staticPure()","159":"Tuple8Test::::staticPure()","160":"Tuple8Test::::staticPure()","162":"Tuple8Test::::init()","163":"Tuple8Test::::init()","164":"Tuple8Test::::init()","165":"Tuple8Test::::init()","166":"Tuple8Test::::init()"},"tests":[{"test_lines":[37,42],"covered_lines":[58,59,60,61,62,63,64,65,66,67]},{"test_lines":[44,53],"covered_lines":[58,59,60,61,62,63,64,65,66,67]},{"test_lines":[55,58],"covered_lines":[58,59,60,61,62,63,64,65,66,67]},{"test_lines":[60,65],"covered_lines":[58,59,60,61,62,63,64,65,66,67]},{"test_lines":[67,70],"covered_lines":[58,59,60,61,62,63,64,65,66,67,74]},{"test_lines":[72,79],"covered_lines":[58,59,60,61,62,63,64,65,66,67,74,85]},{"test_lines":[81,91],"covered_lines":[58,59,60,61,62,63,64,65,66,67,93,101,109,117,125,133,141,149]},{"test_lines":[93,116],"covered_lines":[58,59,60,61,62,63,64,65,66,67,93,101,109,117,125,133,141,149]},{"test_lines":[118,121],"covered_lines":[58,59,60,61,62,63,64,65,66,67,386]},{"test_lines":[123,128],"covered_lines":[58,59,60,61,62,63,64,65,66,67,93,101,109,117,125,133,141,149]},{"test_lines":[130,137],"covered_lines":[58,59,60,61,62,63,64,65,66,67,149,261,295,304,341]},{"test_lines":[139,146],"covered_lines":[58,59,60,61,62,63,64,65,66,67,149,295,341]},{"test_lines":[148,153],"covered_lines":[58,59,60,61,62,63,64,65,66,67,398]},{"test_lines":[155,160],"covered_lines":[58,59,60,61,62,63,64,65,66,67,424,427]},{"test_lines":[162,166],"covered_lines":[58,59,60,61,62,63,64,65,66,67,165,374]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/adt/hlist/Tuple7.java":{"class_content":["package com.jnape.palatable.lambda.adt.hlist;\n","\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.adt.hlist.HList.HCons;\n","import com.jnape.palatable.lambda.adt.product.Product7;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.builtin.fn2.Into;\n","import com.jnape.palatable.lambda.functions.recursion.RecursiveResult;\n","import com.jnape.palatable.lambda.functions.specialized.Pure;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","import com.jnape.palatable.lambda.functor.Bifunctor;\n","import com.jnape.palatable.lambda.functor.builtin.Lazy;\n","import com.jnape.palatable.lambda.monad.Monad;\n","import com.jnape.palatable.lambda.monad.MonadRec;\n","import com.jnape.palatable.lambda.traversable.Traversable;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Uncons.uncons;\n","import static com.jnape.palatable.lambda.functions.recursion.Trampoline.trampoline;\n","\n","/**\n"," * A 7-element tuple product type, implemented as a specialized HList. Supports random access.\n"," *\n"," * @param <_1> The first slot element type\n"," * @param <_2> The second slot element type\n"," * @param <_3> The third slot element type\n"," * @param <_4> The fourth slot element type\n"," * @param <_5> The fifth slot element type\n"," * @param <_6> The sixth slot element type\n"," * @param <_7> The seventh slot element type\n"," * @see Product7\n"," * @see HList\n"," * @see SingletonHList\n"," * @see Tuple2\n"," * @see Tuple3\n"," * @see Tuple4\n"," * @see Tuple5\n"," * @see Tuple6\n"," */\n","public class Tuple7<_1, _2, _3, _4, _5, _6, _7> extends HCons<_1, Tuple6<_2, _3, _4, _5, _6, _7>> implements\n","        Product7<_1, _2, _3, _4, _5, _6, _7>,\n","        MonadRec<_7, Tuple7<_1, _2, _3, _4, _5, _6, ?>>,\n","        Bifunctor<_6, _7, Tuple7<_1, _2, _3, _4, _5, ?, ?>>,\n","        Traversable<_7, Tuple7<_1, _2, _3, _4, _5, _6, ?>> {\n","\n","    private final _1 _1;\n","    private final _2 _2;\n","    private final _3 _3;\n","    private final _4 _4;\n","    private final _5 _5;\n","    private final _6 _6;\n","    private final _7 _7;\n","\n","    Tuple7(_1 _1, Tuple6<_2, _3, _4, _5, _6, _7> tail) {\n","        super(_1, tail);\n","        this._1 = _1;\n","        _2      = tail._1();\n","        _3      = tail._2();\n","        _4      = tail._3();\n","        _5      = tail._4();\n","        _6      = tail._5();\n","        _7      = tail._6();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_0> Tuple8<_0, _1, _2, _3, _4, _5, _6, _7> cons(_0 _0) {\n","        return new Tuple8<>(_0, this);\n","    }\n","\n","    /**\n","     * Snoc an element onto the back of this {@link Tuple7}.\n","     *\n","     * @param _8   the new last element\n","     * @param <_8> the new last element type\n","     * @return the new {@link Tuple8}\n","     */\n","    public <_8> Tuple8<_1, _2, _3, _4, _5, _6, _7, _8> snoc(_8 _8) {\n","        return tuple(_1, _2, _3, _4, _5, _6, _7, _8);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public _1 _1() {\n","        return _1;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public _2 _2() {\n","        return _2;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public _3 _3() {\n","        return _3;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public _4 _4() {\n","        return _4;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public _5 _5() {\n","        return _5;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public _6 _6() {\n","        return _6;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public _7 _7() {\n","        return _7;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple7<_2, _3, _4, _5, _6, _7, _1> rotateL7() {\n","        return tuple(_2, _3, _4, _5, _6, _7, _1);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple7<_7, _1, _2, _3, _4, _5, _6> rotateR7() {\n","        return tuple(_7, _1, _2, _3, _4, _5, _6);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple7<_2, _3, _4, _5, _6, _1, _7> rotateL6() {\n","        return tuple(_2, _3, _4, _5, _6, _1, _7);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple7<_6, _1, _2, _3, _4, _5, _7> rotateR6() {\n","        return tuple(_6, _1, _2, _3, _4, _5, _7);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple7<_2, _3, _4, _5, _1, _6, _7> rotateL5() {\n","        return tuple(_2, _3, _4, _5, _1, _6, _7);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple7<_5, _1, _2, _3, _4, _6, _7> rotateR5() {\n","        return tuple(_5, _1, _2, _3, _4, _6, _7);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple7<_2, _3, _4, _1, _5, _6, _7> rotateL4() {\n","        return tuple(_2, _3, _4, _1, _5, _6, _7);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple7<_4, _1, _2, _3, _5, _6, _7> rotateR4() {\n","        return tuple(_4, _1, _2, _3, _5, _6, _7);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple7<_2, _3, _1, _4, _5, _6, _7> rotateL3() {\n","        return tuple(_2, _3, _1, _4, _5, _6, _7);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple7<_3, _1, _2, _4, _5, _6, _7> rotateR3() {\n","        return tuple(_3, _1, _2, _4, _5, _6, _7);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple7<_2, _1, _3, _4, _5, _6, _7> invert() {\n","        return tuple(_2, _1, _3, _4, _5, _6, _7);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_7Prime> Tuple7<_1, _2, _3, _4, _5, _6, _7Prime> fmap(Fn1<? super _7, ? extends _7Prime> fn) {\n","        return MonadRec.super.<_7Prime>fmap(fn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_6Prime> Tuple7<_1, _2, _3, _4, _5, _6Prime, _7> biMapL(Fn1<? super _6, ? extends _6Prime> fn) {\n","        return (Tuple7<_1, _2, _3, _4, _5, _6Prime, _7>) Bifunctor.super.<_6Prime>biMapL(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_7Prime> Tuple7<_1, _2, _3, _4, _5, _6, _7Prime> biMapR(Fn1<? super _7, ? extends _7Prime> fn) {\n","        return (Tuple7<_1, _2, _3, _4, _5, _6, _7Prime>) Bifunctor.super.<_7Prime>biMapR(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_6Prime, _7Prime> Tuple7<_1, _2, _3, _4, _5, _6Prime, _7Prime> biMap(\n","            Fn1<? super _6, ? extends _6Prime> lFn,\n","            Fn1<? super _7, ? extends _7Prime> rFn) {\n","        return new Tuple7<>(_1(), tail().biMap(lFn, rFn));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_7Prime> Tuple7<_1, _2, _3, _4, _5, _6, _7Prime> pure(_7Prime _7Prime) {\n","        return tuple(_1, _2, _3, _4, _5, _6, _7Prime);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_7Prime> Tuple7<_1, _2, _3, _4, _5, _6, _7Prime> zip(\n","            Applicative<Fn1<? super _7, ? extends _7Prime>, Tuple7<_1, _2, _3, _4, _5, _6, ?>> appFn) {\n","        return MonadRec.super.zip(appFn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_7Prime> Lazy<Tuple7<_1, _2, _3, _4, _5, _6, _7Prime>> lazyZip(\n","            Lazy<? extends Applicative<Fn1<? super _7, ? extends _7Prime>, Tuple7<_1, _2, _3, _4, _5, _6, ?>>> lazyAppFn) {\n","        return MonadRec.super.lazyZip(lazyAppFn).fmap(Monad<_7Prime, Tuple7<_1, _2, _3, _4, _5, _6, ?>>::coerce);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_7Prime> Tuple7<_1, _2, _3, _4, _5, _6, _7Prime> discardL(\n","            Applicative<_7Prime, Tuple7<_1, _2, _3, _4, _5, _6, ?>> appB) {\n","        return MonadRec.super.discardL(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_7Prime> Tuple7<_1, _2, _3, _4, _5, _6, _7> discardR(\n","            Applicative<_7Prime, Tuple7<_1, _2, _3, _4, _5, _6, ?>> appB) {\n","        return MonadRec.super.discardR(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_7Prime> Tuple7<_1, _2, _3, _4, _5, _6, _7Prime> flatMap(\n","            Fn1<? super _7, ? extends Monad<_7Prime, Tuple7<_1, _2, _3, _4, _5, _6, ?>>> f) {\n","        return pure(f.apply(_7).<Tuple7<_1, _2, _3, _4, _5, _6, _7Prime>>coerce()._7());\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_7Prime> Tuple7<_1, _2, _3, _4, _5, _6, _7Prime> trampolineM(\n","            Fn1<? super _7, ? extends MonadRec<RecursiveResult<_7, _7Prime>, Tuple7<_1, _2, _3, _4, _5, _6, ?>>> fn) {\n","        return fmap(trampoline(x -> fn.apply(x).<Tuple7<_1, _2, _3, _4, _5, _6, RecursiveResult<_7, _7Prime>>>coerce()\n","                ._7()));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_7Prime, App extends Applicative<?, App>,\n","            TravB extends Traversable<_7Prime, Tuple7<_1, _2, _3, _4, _5, _6, ?>>,\n","            AppTrav extends Applicative<TravB, App>> AppTrav traverse(\n","            Fn1<? super _7, ? extends Applicative<_7Prime, App>> fn,\n","            Fn1<? super TravB, ? extends AppTrav> pure) {\n","        return fn.apply(_7).fmap(_7Prime -> fmap(constantly(_7Prime))).<TravB>fmap(Applicative::coerce).coerce();\n","    }\n","\n","    /**\n","     * Returns a <code>{@link Tuple6}&lt;_1, _2, _3, _4, _5, _6&gt;</code> of all the elements of this\n","     * <code>{@link Tuple7}&lt;_1, _2, _3, _4, _5, _6, _7&gt;</code> except the last.\n","     *\n","     * @return The {@link Tuple6}&lt;_1, _2, _3, _4, _5, _6&gt; representing all but the last element\n","     */\n","    public Tuple6<_1, _2, _3, _4, _5, _6> init() {\n","        return rotateR7().tail();\n","    }\n","\n","    /**\n","     * Given a value of type <code>A</code>, produced an instance of this tuple with each slot set to that value.\n","     *\n","     * @param a   the value to fill the tuple with\n","     * @param <A> the value type\n","     * @return the filled tuple\n","     * @see Tuple2#fill\n","     */\n","    public static <A> Tuple7<A, A, A, A, A, A, A> fill(A a) {\n","        return tuple(a, a, a, a, a, a, a);\n","    }\n","\n","    /**\n","     * Return {@link Maybe#just(Object) just} the first seven elements from the given {@link Iterable}, or\n","     * {@link Maybe#nothing() nothing} if there are less than seven elements.\n","     *\n","     * @param as  the {@link Iterable}\n","     * @param <A> the {@link Iterable} element type\n","     * @return {@link Maybe} the first seven elements of the given {@link Iterable}\n","     */\n","    public static <A> Maybe<Tuple7<A, A, A, A, A, A, A>> fromIterable(Iterable<A> as) {\n","        return uncons(as).flatMap(Into.into((head, tail) -> Tuple6.fromIterable(tail).fmap(t -> t.cons(head))));\n","    }\n","\n","    /**\n","     * The canonical {@link Pure} instance for {@link Tuple7}.\n","     *\n","     * @param _1   the head element\n","     * @param _2   the second element\n","     * @param _3   the third element\n","     * @param _4   the fourth element\n","     * @param _5   the fifth element\n","     * @param _6   the sixth element\n","     * @param <_1> the head element type\n","     * @param <_2> the second element type\n","     * @param <_3> the third element type\n","     * @param <_4> the fourth element type\n","     * @param <_5> the fifth element type\n","     * @param <_6> the sixth element type\n","     * @return the {@link Pure} instance\n","     */\n","    public static <_1, _2, _3, _4, _5, _6> Pure<Tuple7<_1, _2, _3, _4, _5, _6, ?>> pureTuple(_1 _1, _2 _2, _3 _3, _4 _4,\n","                                                                                             _5 _5, _6 _6) {\n","        return new Pure<Tuple7<_1, _2, _3, _4, _5, _6, ?>>() {\n","            @Override\n","            public <_7> Tuple7<_1, _2, _3, _4, _5, _6, _7> checkedApply(_7 _7) throws Throwable {\n","                return tuple(_1, _2, _3, _4, _5, _6, _7);\n","            }\n","        };\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.adt.hlist;\n","\n","import com.jnape.palatable.lambda.adt.hlist.HList.HCons;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Before;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.ApplicativeLaws;\n","import testsupport.traits.BifunctorLaws;\n","import testsupport.traits.FunctorLaws;\n","import testsupport.traits.MonadLaws;\n","import testsupport.traits.MonadRecLaws;\n","import testsupport.traits.TraversableLaws;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.adt.hlist.Tuple7.pureTuple;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Repeat.repeat;\n","import static java.util.Collections.emptyList;\n","import static java.util.Collections.singletonList;\n","import static org.junit.Assert.assertEquals;\n","import static org.mockito.Mockito.spy;\n","import static org.mockito.Mockito.times;\n","import static org.mockito.Mockito.verify;\n","import static org.mockito.Mockito.verifyNoMoreInteractions;\n","\n","@RunWith(Traits.class)\n","public class Tuple7Test {\n","\n","    private Tuple7<Byte, Float, Integer, String, Character, Boolean, Long> tuple7;\n","\n","    @Before\n","    public void setUp() {\n","        tuple7 = new Tuple7<>((byte) 127, new Tuple6<>(2.0f, new Tuple5<>(1, new Tuple4<>(\"2\", new Tuple3<>('3', new Tuple2<>(false, new SingletonHList<>(5L)))))));\n","    }\n","\n","    @TestTraits({\n","            FunctorLaws.class,\n","            ApplicativeLaws.class,\n","            MonadLaws.class,\n","            MonadRecLaws.class,\n","            BifunctorLaws.class,\n","            TraversableLaws.class})\n","    public Tuple7<?, ?, ?, ?, ?, ?, ?> testSubject() {\n","        return tuple(\"one\", 2, 3d, 4f, '5', (byte) 6, 7L);\n","    }\n","\n","    @Test\n","    public void head() {\n","        assertEquals((Byte) (byte) 127, tuple7.head());\n","    }\n","\n","    @Test\n","    public void tail() {\n","        assertEquals(new Tuple6<>(2.0f, new Tuple5<>(1, new Tuple4<>(\"2\", new Tuple3<>('3', new Tuple2<>(false, new SingletonHList<>(5L)))))),\n","                     tuple7.tail());\n","    }\n","\n","    @Test\n","    public void cons() {\n","        assertEquals(new HCons<>(0, tuple7), tuple7.cons(0));\n","    }\n","\n","    @Test\n","    public void snoc() {\n","        assertEquals(tuple(\"b\", 7L, \"c\", 11, \"d\", 13, \"e\", 'f'), tuple(\"b\", 7L, \"c\", 11, \"d\", 13, \"e\").snoc('f'));\n","    }\n","\n","    @Test\n","    public void accessors() {\n","        assertEquals((Byte) (byte) 127, tuple7._1());\n","        assertEquals((Float) 2.0f, tuple7._2());\n","        assertEquals((Integer) 1, tuple7._3());\n","        assertEquals(\"2\", tuple7._4());\n","        assertEquals((Character) '3', tuple7._5());\n","        assertEquals(false, tuple7._6());\n","        assertEquals((Long) 5L, tuple7._7());\n","    }\n","\n","    @Test\n","    public void randomAccess() {\n","        Tuple6<String, String, String, String, String, String>         spiedTail = spy(tuple(\"second\", \"third\", \"fourth\", \"fifth\", \"sixth\", \"seventh\"));\n","        Tuple7<String, String, String, String, String, String, String> tuple7    = new Tuple7<>(\"first\", spiedTail);\n","\n","        verify(spiedTail, times(1))._1();\n","        verify(spiedTail, times(1))._2();\n","        verify(spiedTail, times(1))._3();\n","        verify(spiedTail, times(1))._4();\n","        verify(spiedTail, times(1))._5();\n","        verify(spiedTail, times(1))._6();\n","        tuple7._1();\n","        tuple7._2();\n","        tuple7._3();\n","        tuple7._4();\n","        tuple7._5();\n","        tuple7._6();\n","        tuple7._7();\n","        verifyNoMoreInteractions(spiedTail);\n","    }\n","\n","    @Test\n","    public void fill() {\n","        assertEquals(tuple(\"foo\", \"foo\", \"foo\", \"foo\", \"foo\", \"foo\", \"foo\"), Tuple7.fill(\"foo\"));\n","    }\n","\n","    @Test\n","    public void into() {\n","        Tuple7<String, Integer, Double, Boolean, Float, Short, Byte> tuple = tuple(\"foo\", 1, 2.0d, false, 3f, (short) 4, (byte) 5);\n","        assertEquals(\"foo12.0false3.045\", tuple.into((s, i, d, b, f, sh, by) -> s + i + d + b + f + sh + by));\n","    }\n","\n","    @Test\n","    public void zipPrecedence() {\n","        Tuple7<String, Integer, Integer, Integer, Integer, Integer, Integer> a =\n","                tuple(\"foo\", 1, 2, 3, 4, 5, 6);\n","        Tuple7<String, Integer, Integer, Integer, Integer, Integer, Fn1<? super Integer, ? extends Integer>> b =\n","                tuple(\"bar\", 2, 3, 4, 5, 6, x -> x + 1);\n","        assertEquals(tuple(\"foo\", 1, 2, 3, 4, 5, 7), a.zip(b));\n","    }\n","\n","    @Test\n","    public void flatMapPrecedence() {\n","        Tuple7<String, Integer, Integer, Integer, Integer, Integer, Integer>               a = tuple(\"foo\", 1, 2, 3, 4, 5, 6);\n","        Fn1<Integer, Tuple7<String, Integer, Integer, Integer, Integer, Integer, Integer>> b = x -> tuple(\"bar\", 2, 3, 4, 5, 6, x + 1);\n","        assertEquals(tuple(\"foo\", 1, 2, 3, 4, 5, 7), a.flatMap(b));\n","    }\n","\n","    @Test\n","    public void fromIterable() {\n","        assertEquals(nothing(), Tuple7.fromIterable(emptyList()));\n","        assertEquals(nothing(), Tuple7.fromIterable(singletonList(1)));\n","        assertEquals(just(tuple(1, 1, 1, 1, 1, 1, 1)), Tuple7.fromIterable(repeat(1)));\n","    }\n","\n","    @Test\n","    public void staticPure() {\n","        Tuple7<Byte, Short, Integer, Long, Float, Double, Boolean> tuple =\n","                pureTuple((byte) 1, (short) 2, 3, 4L, 5F, 6D).apply(true);\n","        assertEquals(tuple((byte) 1, (short) 2, 3, 4L, 5F, 6D, true), tuple);\n","    }\n","\n","    @Test\n","    public void init() {\n","        assertEquals(tuple(1, 2, 3, 4, 5, 6),\n","                     tuple(1, 2, 3, 4, 5, 6, 7).init());\n","    }\n","}"],"method_lines_dic":{"Tuple7::::cons(_0)":[68,71],"Tuple7::::snoc(_8)":[80,82],"Tuple7::::_1()":[87,90],"Tuple7::::_2()":[95,98],"Tuple7::::_3()":[103,106],"Tuple7::::_4()":[111,114],"Tuple7::::_5()":[119,122],"Tuple7::::_6()":[127,130],"Tuple7::::_7()":[135,138],"Tuple7::::rotateL7()":[143,146],"Tuple7::::rotateR7()":[151,154],"Tuple7::::rotateL6()":[159,162],"Tuple7::::rotateR6()":[167,170],"Tuple7::::rotateL5()":[175,178],"Tuple7::::rotateR5()":[183,186],"Tuple7::::rotateL4()":[191,194],"Tuple7::::rotateR4()":[199,202],"Tuple7::::rotateL3()":[207,210],"Tuple7::::rotateR3()":[215,218],"Tuple7::::invert()":[223,226],"Tuple7::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>)":[231,234],"Tuple7::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>)":[239,242],"Tuple7::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>)":[247,250],"Tuple7::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>)":[255,260],"Tuple7::::pure(_7Prime)":[265,268],"Tuple7::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple7<_1, _2, _3, _4, _5, _6, ?>>)":[273,277],"Tuple7::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple7<_1, _2, _3, _4, _5, _6, ?>>>)":[282,286],"Tuple7::::discardL(com.jnape.palatable.lambda.functor.Applicative<_7Prime, com.jnape.palatable.lambda.adt.hlist.Tuple7<_1, _2, _3, _4, _5, _6, ?>>)":[291,295],"Tuple7::::discardR(com.jnape.palatable.lambda.functor.Applicative<_7Prime, com.jnape.palatable.lambda.adt.hlist.Tuple7<_1, _2, _3, _4, _5, _6, ?>>)":[300,304],"Tuple7::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends com.jnape.palatable.lambda.monad.Monad<_7Prime, com.jnape.palatable.lambda.adt.hlist.Tuple7<_1, _2, _3, _4, _5, _6, ?>>>)":[309,313],"Tuple7::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_7, _7Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple7<_1, _2, _3, _4, _5, _6, ?>>>)":[318,323],"Tuple7::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends com.jnape.palatable.lambda.functor.Applicative<_7Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)":[328,335],"Tuple7::::init()":[343,345],"Tuple7::::fill(A)":[355,357],"Tuple7::::fromIterable(java.lang.Iterable<A>)":[367,369],"Tuple7::::pureTuple(_1,_2,_3,_4,_5,_6)":[388,396]},"test_method_lines_dic":{"Tuple7Test::::setUp()":[35,38],"Tuple7Test::::testSubject()":[40,49],"Tuple7Test::::head()":[51,54],"Tuple7Test::::tail()":[56,60],"Tuple7Test::::cons()":[62,65],"Tuple7Test::::snoc()":[67,70],"Tuple7Test::::accessors()":[72,81],"Tuple7Test::::randomAccess()":[83,102],"Tuple7Test::::fill()":[104,107],"Tuple7Test::::into()":[109,113],"Tuple7Test::::zipPrecedence()":[115,122],"Tuple7Test::::flatMapPrecedence()":[124,129],"Tuple7Test::::fromIterable()":[131,136],"Tuple7Test::::staticPure()":[138,143],"Tuple7Test::::init()":[145,149]},"reverse_method_lines_dic":{"68":"Tuple7::::cons(_0)","69":"Tuple7::::cons(_0)","70":"Tuple7::::cons(_0)","71":"Tuple7::::cons(_0)","80":"Tuple7::::snoc(_8)","81":"Tuple7::::snoc(_8)","82":"Tuple7::::snoc(_8)","87":"Tuple7::::_1()","88":"Tuple7::::_1()","89":"Tuple7::::_1()","90":"Tuple7::::_1()","95":"Tuple7::::_2()","96":"Tuple7::::_2()","97":"Tuple7::::_2()","98":"Tuple7::::_2()","103":"Tuple7::::_3()","104":"Tuple7::::_3()","105":"Tuple7::::_3()","106":"Tuple7::::_3()","111":"Tuple7::::_4()","112":"Tuple7::::_4()","113":"Tuple7::::_4()","114":"Tuple7::::_4()","119":"Tuple7::::_5()","120":"Tuple7::::_5()","121":"Tuple7::::_5()","122":"Tuple7::::_5()","127":"Tuple7::::_6()","128":"Tuple7::::_6()","129":"Tuple7::::_6()","130":"Tuple7::::_6()","135":"Tuple7::::_7()","136":"Tuple7::::_7()","137":"Tuple7::::_7()","138":"Tuple7::::_7()","143":"Tuple7::::rotateL7()","144":"Tuple7::::rotateL7()","145":"Tuple7::::rotateL7()","146":"Tuple7::::rotateL7()","151":"Tuple7::::rotateR7()","152":"Tuple7::::rotateR7()","153":"Tuple7::::rotateR7()","154":"Tuple7::::rotateR7()","159":"Tuple7::::rotateL6()","160":"Tuple7::::rotateL6()","161":"Tuple7::::rotateL6()","162":"Tuple7::::rotateL6()","167":"Tuple7::::rotateR6()","168":"Tuple7::::rotateR6()","169":"Tuple7::::rotateR6()","170":"Tuple7::::rotateR6()","175":"Tuple7::::rotateL5()","176":"Tuple7::::rotateL5()","177":"Tuple7::::rotateL5()","178":"Tuple7::::rotateL5()","183":"Tuple7::::rotateR5()","184":"Tuple7::::rotateR5()","185":"Tuple7::::rotateR5()","186":"Tuple7::::rotateR5()","191":"Tuple7::::rotateL4()","192":"Tuple7::::rotateL4()","193":"Tuple7::::rotateL4()","194":"Tuple7::::rotateL4()","199":"Tuple7::::rotateR4()","200":"Tuple7::::rotateR4()","201":"Tuple7::::rotateR4()","202":"Tuple7::::rotateR4()","207":"Tuple7::::rotateL3()","208":"Tuple7::::rotateL3()","209":"Tuple7::::rotateL3()","210":"Tuple7::::rotateL3()","215":"Tuple7::::rotateR3()","216":"Tuple7::::rotateR3()","217":"Tuple7::::rotateR3()","218":"Tuple7::::rotateR3()","223":"Tuple7::::invert()","224":"Tuple7::::invert()","225":"Tuple7::::invert()","226":"Tuple7::::invert()","231":"Tuple7::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>)","232":"Tuple7::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>)","233":"Tuple7::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>)","234":"Tuple7::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>)","239":"Tuple7::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>)","240":"Tuple7::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>)","241":"Tuple7::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>)","242":"Tuple7::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>)","247":"Tuple7::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>)","248":"Tuple7::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>)","249":"Tuple7::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>)","250":"Tuple7::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>)","255":"Tuple7::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>)","256":"Tuple7::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>)","257":"Tuple7::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>)","258":"Tuple7::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>)","259":"Tuple7::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>)","260":"Tuple7::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>)","265":"Tuple7::::pure(_7Prime)","266":"Tuple7::::pure(_7Prime)","267":"Tuple7::::pure(_7Prime)","268":"Tuple7::::pure(_7Prime)","273":"Tuple7::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple7<_1, _2, _3, _4, _5, _6, ?>>)","274":"Tuple7::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple7<_1, _2, _3, _4, _5, _6, ?>>)","275":"Tuple7::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple7<_1, _2, _3, _4, _5, _6, ?>>)","276":"Tuple7::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple7<_1, _2, _3, _4, _5, _6, ?>>)","277":"Tuple7::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple7<_1, _2, _3, _4, _5, _6, ?>>)","282":"Tuple7::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple7<_1, _2, _3, _4, _5, _6, ?>>>)","283":"Tuple7::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple7<_1, _2, _3, _4, _5, _6, ?>>>)","284":"Tuple7::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple7<_1, _2, _3, _4, _5, _6, ?>>>)","285":"Tuple7::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple7<_1, _2, _3, _4, _5, _6, ?>>>)","286":"Tuple7::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends _7Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple7<_1, _2, _3, _4, _5, _6, ?>>>)","291":"Tuple7::::discardL(com.jnape.palatable.lambda.functor.Applicative<_7Prime, com.jnape.palatable.lambda.adt.hlist.Tuple7<_1, _2, _3, _4, _5, _6, ?>>)","292":"Tuple7::::discardL(com.jnape.palatable.lambda.functor.Applicative<_7Prime, com.jnape.palatable.lambda.adt.hlist.Tuple7<_1, _2, _3, _4, _5, _6, ?>>)","293":"Tuple7::::discardL(com.jnape.palatable.lambda.functor.Applicative<_7Prime, com.jnape.palatable.lambda.adt.hlist.Tuple7<_1, _2, _3, _4, _5, _6, ?>>)","294":"Tuple7::::discardL(com.jnape.palatable.lambda.functor.Applicative<_7Prime, com.jnape.palatable.lambda.adt.hlist.Tuple7<_1, _2, _3, _4, _5, _6, ?>>)","295":"Tuple7::::discardL(com.jnape.palatable.lambda.functor.Applicative<_7Prime, com.jnape.palatable.lambda.adt.hlist.Tuple7<_1, _2, _3, _4, _5, _6, ?>>)","300":"Tuple7::::discardR(com.jnape.palatable.lambda.functor.Applicative<_7Prime, com.jnape.palatable.lambda.adt.hlist.Tuple7<_1, _2, _3, _4, _5, _6, ?>>)","301":"Tuple7::::discardR(com.jnape.palatable.lambda.functor.Applicative<_7Prime, com.jnape.palatable.lambda.adt.hlist.Tuple7<_1, _2, _3, _4, _5, _6, ?>>)","302":"Tuple7::::discardR(com.jnape.palatable.lambda.functor.Applicative<_7Prime, com.jnape.palatable.lambda.adt.hlist.Tuple7<_1, _2, _3, _4, _5, _6, ?>>)","303":"Tuple7::::discardR(com.jnape.palatable.lambda.functor.Applicative<_7Prime, com.jnape.palatable.lambda.adt.hlist.Tuple7<_1, _2, _3, _4, _5, _6, ?>>)","304":"Tuple7::::discardR(com.jnape.palatable.lambda.functor.Applicative<_7Prime, com.jnape.palatable.lambda.adt.hlist.Tuple7<_1, _2, _3, _4, _5, _6, ?>>)","309":"Tuple7::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends com.jnape.palatable.lambda.monad.Monad<_7Prime, com.jnape.palatable.lambda.adt.hlist.Tuple7<_1, _2, _3, _4, _5, _6, ?>>>)","310":"Tuple7::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends com.jnape.palatable.lambda.monad.Monad<_7Prime, com.jnape.palatable.lambda.adt.hlist.Tuple7<_1, _2, _3, _4, _5, _6, ?>>>)","311":"Tuple7::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends com.jnape.palatable.lambda.monad.Monad<_7Prime, com.jnape.palatable.lambda.adt.hlist.Tuple7<_1, _2, _3, _4, _5, _6, ?>>>)","312":"Tuple7::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends com.jnape.palatable.lambda.monad.Monad<_7Prime, com.jnape.palatable.lambda.adt.hlist.Tuple7<_1, _2, _3, _4, _5, _6, ?>>>)","313":"Tuple7::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends com.jnape.palatable.lambda.monad.Monad<_7Prime, com.jnape.palatable.lambda.adt.hlist.Tuple7<_1, _2, _3, _4, _5, _6, ?>>>)","318":"Tuple7::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_7, _7Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple7<_1, _2, _3, _4, _5, _6, ?>>>)","319":"Tuple7::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_7, _7Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple7<_1, _2, _3, _4, _5, _6, ?>>>)","320":"Tuple7::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_7, _7Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple7<_1, _2, _3, _4, _5, _6, ?>>>)","321":"Tuple7::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_7, _7Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple7<_1, _2, _3, _4, _5, _6, ?>>>)","322":"Tuple7::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_7, _7Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple7<_1, _2, _3, _4, _5, _6, ?>>>)","323":"Tuple7::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_7, _7Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple7<_1, _2, _3, _4, _5, _6, ?>>>)","328":"Tuple7::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends com.jnape.palatable.lambda.functor.Applicative<_7Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","329":"Tuple7::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends com.jnape.palatable.lambda.functor.Applicative<_7Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","330":"Tuple7::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends com.jnape.palatable.lambda.functor.Applicative<_7Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","331":"Tuple7::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends com.jnape.palatable.lambda.functor.Applicative<_7Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","332":"Tuple7::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends com.jnape.palatable.lambda.functor.Applicative<_7Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","333":"Tuple7::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends com.jnape.palatable.lambda.functor.Applicative<_7Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","334":"Tuple7::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends com.jnape.palatable.lambda.functor.Applicative<_7Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","335":"Tuple7::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _7, ? extends com.jnape.palatable.lambda.functor.Applicative<_7Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","343":"Tuple7::::init()","344":"Tuple7::::init()","345":"Tuple7::::init()","355":"Tuple7::::fill(A)","356":"Tuple7::::fill(A)","357":"Tuple7::::fill(A)","367":"Tuple7::::fromIterable(java.lang.Iterable<A>)","368":"Tuple7::::fromIterable(java.lang.Iterable<A>)","369":"Tuple7::::fromIterable(java.lang.Iterable<A>)","388":"Tuple7::::pureTuple(_1,_2,_3,_4,_5,_6)","389":"Tuple7::::pureTuple(_1,_2,_3,_4,_5,_6)","390":"Tuple7::::pureTuple(_1,_2,_3,_4,_5,_6)","391":"Tuple7::::pureTuple(_1,_2,_3,_4,_5,_6)","392":"Tuple7::::pureTuple(_1,_2,_3,_4,_5,_6)","393":"Tuple7::::pureTuple(_1,_2,_3,_4,_5,_6)","394":"Tuple7::::pureTuple(_1,_2,_3,_4,_5,_6)","395":"Tuple7::::pureTuple(_1,_2,_3,_4,_5,_6)","396":"Tuple7::::pureTuple(_1,_2,_3,_4,_5,_6)"},"test_reverse_method_lines_dic":{"35":"Tuple7Test::::setUp()","36":"Tuple7Test::::setUp()","37":"Tuple7Test::::setUp()","38":"Tuple7Test::::setUp()","40":"Tuple7Test::::testSubject()","41":"Tuple7Test::::testSubject()","42":"Tuple7Test::::testSubject()","43":"Tuple7Test::::testSubject()","44":"Tuple7Test::::testSubject()","45":"Tuple7Test::::testSubject()","46":"Tuple7Test::::testSubject()","47":"Tuple7Test::::testSubject()","48":"Tuple7Test::::testSubject()","49":"Tuple7Test::::testSubject()","51":"Tuple7Test::::head()","52":"Tuple7Test::::head()","53":"Tuple7Test::::head()","54":"Tuple7Test::::head()","56":"Tuple7Test::::tail()","57":"Tuple7Test::::tail()","58":"Tuple7Test::::tail()","59":"Tuple7Test::::tail()","60":"Tuple7Test::::tail()","62":"Tuple7Test::::cons()","63":"Tuple7Test::::cons()","64":"Tuple7Test::::cons()","65":"Tuple7Test::::cons()","67":"Tuple7Test::::snoc()","68":"Tuple7Test::::snoc()","69":"Tuple7Test::::snoc()","70":"Tuple7Test::::snoc()","72":"Tuple7Test::::accessors()","73":"Tuple7Test::::accessors()","74":"Tuple7Test::::accessors()","75":"Tuple7Test::::accessors()","76":"Tuple7Test::::accessors()","77":"Tuple7Test::::accessors()","78":"Tuple7Test::::accessors()","79":"Tuple7Test::::accessors()","80":"Tuple7Test::::accessors()","81":"Tuple7Test::::accessors()","83":"Tuple7Test::::randomAccess()","84":"Tuple7Test::::randomAccess()","85":"Tuple7Test::::randomAccess()","86":"Tuple7Test::::randomAccess()","87":"Tuple7Test::::randomAccess()","88":"Tuple7Test::::randomAccess()","89":"Tuple7Test::::randomAccess()","90":"Tuple7Test::::randomAccess()","91":"Tuple7Test::::randomAccess()","92":"Tuple7Test::::randomAccess()","93":"Tuple7Test::::randomAccess()","94":"Tuple7Test::::randomAccess()","95":"Tuple7Test::::randomAccess()","96":"Tuple7Test::::randomAccess()","97":"Tuple7Test::::randomAccess()","98":"Tuple7Test::::randomAccess()","99":"Tuple7Test::::randomAccess()","100":"Tuple7Test::::randomAccess()","101":"Tuple7Test::::randomAccess()","102":"Tuple7Test::::randomAccess()","104":"Tuple7Test::::fill()","105":"Tuple7Test::::fill()","106":"Tuple7Test::::fill()","107":"Tuple7Test::::fill()","109":"Tuple7Test::::into()","110":"Tuple7Test::::into()","111":"Tuple7Test::::into()","112":"Tuple7Test::::into()","113":"Tuple7Test::::into()","115":"Tuple7Test::::zipPrecedence()","116":"Tuple7Test::::zipPrecedence()","117":"Tuple7Test::::zipPrecedence()","118":"Tuple7Test::::zipPrecedence()","119":"Tuple7Test::::zipPrecedence()","120":"Tuple7Test::::zipPrecedence()","121":"Tuple7Test::::zipPrecedence()","122":"Tuple7Test::::zipPrecedence()","124":"Tuple7Test::::flatMapPrecedence()","125":"Tuple7Test::::flatMapPrecedence()","126":"Tuple7Test::::flatMapPrecedence()","127":"Tuple7Test::::flatMapPrecedence()","128":"Tuple7Test::::flatMapPrecedence()","129":"Tuple7Test::::flatMapPrecedence()","131":"Tuple7Test::::fromIterable()","132":"Tuple7Test::::fromIterable()","133":"Tuple7Test::::fromIterable()","134":"Tuple7Test::::fromIterable()","135":"Tuple7Test::::fromIterable()","136":"Tuple7Test::::fromIterable()","138":"Tuple7Test::::staticPure()","139":"Tuple7Test::::staticPure()","140":"Tuple7Test::::staticPure()","141":"Tuple7Test::::staticPure()","142":"Tuple7Test::::staticPure()","143":"Tuple7Test::::staticPure()","145":"Tuple7Test::::init()","146":"Tuple7Test::::init()","147":"Tuple7Test::::init()","148":"Tuple7Test::::init()","149":"Tuple7Test::::init()"},"tests":[{"test_lines":[35,38],"covered_lines":[55,56,57,58,59,60,61,62,63]},{"test_lines":[40,49],"covered_lines":[55,56,57,58,59,60,61,62,63]},{"test_lines":[51,54],"covered_lines":[55,56,57,58,59,60,61,62,63]},{"test_lines":[56,60],"covered_lines":[55,56,57,58,59,60,61,62,63]},{"test_lines":[62,65],"covered_lines":[55,56,57,58,59,60,61,62,63,70,89,97,105,113,121,129,137]},{"test_lines":[67,70],"covered_lines":[55,56,57,58,59,60,61,62,63,70,81,89,97,105,113,121,129,137]},{"test_lines":[72,81],"covered_lines":[55,56,57,58,59,60,61,62,63,89,97,105,113,121,129,137]},{"test_lines":[83,102],"covered_lines":[55,56,57,58,59,60,61,62,63,89,97,105,113,121,129,137]},{"test_lines":[104,107],"covered_lines":[55,56,57,58,59,60,61,62,63,356]},{"test_lines":[109,113],"covered_lines":[55,56,57,58,59,60,61,62,63,89,97,105,113,121,129,137]},{"test_lines":[115,122],"covered_lines":[55,56,57,58,59,60,61,62,63,137,233,267,276,312]},{"test_lines":[124,129],"covered_lines":[55,56,57,58,59,60,61,62,63,137,267,312]},{"test_lines":[131,136],"covered_lines":[55,56,57,58,59,60,61,62,63,368]},{"test_lines":[138,143],"covered_lines":[55,56,57,58,59,60,61,62,63,390,393]},{"test_lines":[145,149],"covered_lines":[55,56,57,58,59,60,61,62,63,153,344]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/adt/hlist/Tuple4.java":{"class_content":["package com.jnape.palatable.lambda.adt.hlist;\n","\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.adt.hlist.HList.HCons;\n","import com.jnape.palatable.lambda.adt.product.Product4;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.builtin.fn2.Into;\n","import com.jnape.palatable.lambda.functions.recursion.RecursiveResult;\n","import com.jnape.palatable.lambda.functions.specialized.Pure;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","import com.jnape.palatable.lambda.functor.Bifunctor;\n","import com.jnape.palatable.lambda.functor.builtin.Lazy;\n","import com.jnape.palatable.lambda.monad.Monad;\n","import com.jnape.palatable.lambda.monad.MonadRec;\n","import com.jnape.palatable.lambda.traversable.Traversable;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Uncons.uncons;\n","import static com.jnape.palatable.lambda.functions.recursion.Trampoline.trampoline;\n","\n","/**\n"," * A 4-element tuple product type, implemented as a specialized HList. Supports random access.\n"," *\n"," * @param <_1> The first slot element type\n"," * @param <_2> The second slot element type\n"," * @param <_3> The third slot element type\n"," * @param <_4> The fourth slot element type\n"," * @see Product4\n"," * @see HList\n"," * @see SingletonHList\n"," * @see Tuple2\n"," * @see Tuple3\n"," * @see Tuple5\n"," */\n","public class Tuple4<_1, _2, _3, _4> extends HCons<_1, Tuple3<_2, _3, _4>> implements\n","        Product4<_1, _2, _3, _4>,\n","        MonadRec<_4, Tuple4<_1, _2, _3, ?>>,\n","        Bifunctor<_3, _4, Tuple4<_1, _2, ?, ?>>,\n","        Traversable<_4, Tuple4<_1, _2, _3, ?>> {\n","\n","    private final _1 _1;\n","    private final _2 _2;\n","    private final _3 _3;\n","    private final _4 _4;\n","\n","    Tuple4(_1 _1, Tuple3<_2, _3, _4> tail) {\n","        super(_1, tail);\n","        this._1 = _1;\n","        _2      = tail._1();\n","        _3      = tail._2();\n","        _4      = tail._3();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_0> Tuple5<_0, _1, _2, _3, _4> cons(_0 _0) {\n","        return new Tuple5<>(_0, this);\n","    }\n","\n","    /**\n","     * Snoc an element onto the back of this {@link Tuple4}.\n","     *\n","     * @param _5   the new last element\n","     * @param <_5> the new last element type\n","     * @return the new {@link Tuple5}\n","     */\n","    public <_5> Tuple5<_1, _2, _3, _4, _5> snoc(_5 _5) {\n","        return tuple(_1, _2, _3, _4, _5);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public _1 _1() {\n","        return _1;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public _2 _2() {\n","        return _2;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public _3 _3() {\n","        return _3;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public _4 _4() {\n","        return _4;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple4<_2, _3, _4, _1> rotateL4() {\n","        return tuple(_2, _3, _4, _1);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple4<_4, _1, _2, _3> rotateR4() {\n","        return tuple(_4, _1, _2, _3);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple4<_2, _3, _1, _4> rotateL3() {\n","        return tuple(_2, _3, _1, _4);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple4<_3, _1, _2, _4> rotateR3() {\n","        return tuple(_3, _1, _2, _4);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple4<_2, _1, _3, _4> invert() {\n","        return tuple(_2, _1, _3, _4);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_4Prime> Tuple4<_1, _2, _3, _4Prime> fmap(Fn1<? super _4, ? extends _4Prime> fn) {\n","        return (Tuple4<_1, _2, _3, _4Prime>) MonadRec.super.<_4Prime>fmap(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_3Prime> Tuple4<_1, _2, _3Prime, _4> biMapL(Fn1<? super _3, ? extends _3Prime> fn) {\n","        return (Tuple4<_1, _2, _3Prime, _4>) Bifunctor.super.<_3Prime>biMapL(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_4Prime> Tuple4<_1, _2, _3, _4Prime> biMapR(Fn1<? super _4, ? extends _4Prime> fn) {\n","        return (Tuple4<_1, _2, _3, _4Prime>) Bifunctor.super.<_4Prime>biMapR(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_3Prime, _4Prime> Tuple4<_1, _2, _3Prime, _4Prime> biMap(Fn1<? super _3, ? extends _3Prime> lFn,\n","                                                                     Fn1<? super _4, ? extends _4Prime> rFn) {\n","        return new Tuple4<>(_1(), tail().biMap(lFn, rFn));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_4Prime> Tuple4<_1, _2, _3, _4Prime> pure(_4Prime _4Prime) {\n","        return tuple(_1, _2, _3, _4Prime);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_4Prime> Tuple4<_1, _2, _3, _4Prime> zip(\n","            Applicative<Fn1<? super _4, ? extends _4Prime>, Tuple4<_1, _2, _3, ?>> appFn) {\n","        return biMapR(appFn.<Tuple4<_1, _2, _3, Fn1<? super _4, ? extends _4Prime>>>coerce()._4()::apply);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_4Prime> Lazy<Tuple4<_1, _2, _3, _4Prime>> lazyZip(\n","            Lazy<? extends Applicative<Fn1<? super _4, ? extends _4Prime>, Tuple4<_1, _2, _3, ?>>> lazyAppFn) {\n","        return MonadRec.super.lazyZip(lazyAppFn).fmap(Monad<_4Prime, Tuple4<_1, _2, _3, ?>>::coerce);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_4Prime> Tuple4<_1, _2, _3, _4Prime> discardL(Applicative<_4Prime, Tuple4<_1, _2, _3, ?>> appB) {\n","        return MonadRec.super.discardL(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_4Prime> Tuple4<_1, _2, _3, _4> discardR(Applicative<_4Prime, Tuple4<_1, _2, _3, ?>> appB) {\n","        return MonadRec.super.discardR(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_4Prime> Tuple4<_1, _2, _3, _4Prime> flatMap(\n","            Fn1<? super _4, ? extends Monad<_4Prime, Tuple4<_1, _2, _3, ?>>> f) {\n","        return pure(f.apply(_4).<Tuple4<_1, _2, _3, _4Prime>>coerce()._4);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_4Prime> Tuple4<_1, _2, _3, _4Prime> trampolineM(\n","            Fn1<? super _4, ? extends MonadRec<RecursiveResult<_4, _4Prime>, Tuple4<_1, _2, _3, ?>>> fn) {\n","        return fmap(trampoline(x -> fn.apply(x).<Tuple4<_1, _2, _3, RecursiveResult<_4, _4Prime>>>coerce()._4()));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_4Prime, App extends Applicative<?, App>, TravB extends Traversable<_4Prime, Tuple4<_1, _2, _3, ?>>,\n","            AppTrav extends Applicative<TravB, App>> AppTrav traverse(\n","            Fn1<? super _4, ? extends Applicative<_4Prime, App>> fn,\n","            Fn1<? super TravB, ? extends AppTrav> pure) {\n","        return fn.apply(_4).fmap(_4Prime -> fmap(constantly(_4Prime))).<TravB>fmap(Applicative::coerce).coerce();\n","    }\n","\n","    /**\n","     * Returns a <code>{@link Tuple3}&lt;_1, _2, _3&gt;</code> of all the elements of this\n","     * <code>{@link Tuple4}&lt;_1, _2, _3, _4&gt;</code> except the last.\n","     *\n","     * @return The {@link Tuple3}&lt;_1, _2, _3&gt; representing all but the last element\n","     */\n","    public Tuple3<_1, _2, _3> init() {\n","        return rotateR4().tail();\n","    }\n","\n","    /**\n","     * Given a value of type <code>A</code>, produced an instance of this tuple with each slot set to that value.\n","     *\n","     * @param a   the value to fill the tuple with\n","     * @param <A> the value type\n","     * @return the filled tuple\n","     * @see Tuple2#fill\n","     */\n","    public static <A> Tuple4<A, A, A, A> fill(A a) {\n","        return tuple(a, a, a, a);\n","    }\n","\n","    /**\n","     * Return {@link Maybe#just(Object) just} the first four elements from the given {@link Iterable}, or\n","     * {@link Maybe#nothing() nothing} if there are less than four elements.\n","     *\n","     * @param as  the {@link Iterable}\n","     * @param <A> the {@link Iterable} element type\n","     * @return {@link Maybe} the first four elements of the given {@link Iterable}\n","     */\n","    public static <A> Maybe<Tuple4<A, A, A, A>> fromIterable(Iterable<A> as) {\n","        return uncons(as).flatMap(Into.into((head, tail) -> Tuple3.fromIterable(tail).fmap(t -> t.cons(head))));\n","    }\n","\n","    /**\n","     * The canonical {@link Pure} instance for {@link Tuple4}.\n","     *\n","     * @param _1   the head element\n","     * @param _2   the second element\n","     * @param _3   the third element\n","     * @param <_1> the head element type\n","     * @param <_2> the second element type\n","     * @param <_3> the third element type\n","     * @return the {@link Pure} instance\n","     */\n","    public static <_1, _2, _3> Pure<Tuple4<_1, _2, _3, ?>> pureTuple(_1 _1, _2 _2, _3 _3) {\n","        return new Pure<Tuple4<_1, _2, _3, ?>>() {\n","            @Override\n","            public <_4> Tuple4<_1, _2, _3, _4> checkedApply(_4 _4) throws Throwable {\n","                return tuple(_1, _2, _3, _4);\n","            }\n","        };\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.adt.hlist;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Before;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.ApplicativeLaws;\n","import testsupport.traits.BifunctorLaws;\n","import testsupport.traits.FunctorLaws;\n","import testsupport.traits.MonadLaws;\n","import testsupport.traits.MonadRecLaws;\n","import testsupport.traits.TraversableLaws;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.adt.hlist.Tuple4.pureTuple;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Repeat.repeat;\n","import static java.util.Collections.emptyList;\n","import static java.util.Collections.singletonList;\n","import static org.junit.Assert.assertEquals;\n","import static org.mockito.Mockito.spy;\n","import static org.mockito.Mockito.times;\n","import static org.mockito.Mockito.verify;\n","import static org.mockito.Mockito.verifyNoMoreInteractions;\n","\n","@RunWith(Traits.class)\n","public class Tuple4Test {\n","\n","    private Tuple4<Integer, String, Character, Boolean> tuple4;\n","\n","    @Before\n","    public void setUp() {\n","        tuple4 = new Tuple4<>(1, new Tuple3<>(\"2\", new Tuple2<>('3', new SingletonHList<>(false))));\n","    }\n","\n","    @TestTraits({\n","            FunctorLaws.class,\n","            ApplicativeLaws.class,\n","            MonadLaws.class,\n","            MonadRecLaws.class,\n","            BifunctorLaws.class,\n","            TraversableLaws.class})\n","    public Tuple4<?, ?, ?, ?> testSubject() {\n","        return tuple(\"one\", 2, 3d, 4f);\n","    }\n","\n","    @Test\n","    public void head() {\n","        assertEquals((Integer) 1, tuple4.head());\n","    }\n","\n","    @Test\n","    public void tail() {\n","        assertEquals(new Tuple3<>(\"2\", new Tuple2<>('3', new SingletonHList<>(false))), tuple4.tail());\n","    }\n","\n","    @Test\n","    public void cons() {\n","        assertEquals(new Tuple5<>(0, tuple4), tuple4.cons(0));\n","    }\n","\n","    @Test\n","    public void snoc() {\n","        assertEquals(tuple(\"qux\", 7, \"foo\", 13L, 17), tuple(\"qux\", 7, \"foo\", 13L).snoc(17));\n","    }\n","\n","    @Test\n","    public void accessors() {\n","        assertEquals((Integer) 1, tuple4._1());\n","        assertEquals(\"2\", tuple4._2());\n","        assertEquals((Character) '3', tuple4._3());\n","        assertEquals(false, tuple4._4());\n","    }\n","\n","    @Test\n","    public void randomAccess() {\n","        Tuple3<String, String, String>         spiedTail = spy(tuple(\"second\", \"third\", \"fourth\"));\n","        Tuple4<String, String, String, String> tuple4    = new Tuple4<>(\"first\", spiedTail);\n","\n","        verify(spiedTail, times(1))._1();\n","        verify(spiedTail, times(1))._2();\n","        verify(spiedTail, times(1))._3();\n","        tuple4._1();\n","        tuple4._2();\n","        tuple4._3();\n","        tuple4._4();\n","        verifyNoMoreInteractions(spiedTail);\n","    }\n","\n","    @Test\n","    public void into() {\n","        Tuple4<String, Integer, Double, Boolean> tuple = tuple(\"foo\", 1, 2.0d, false);\n","        assertEquals(\"foo12.0false\", tuple.into((s, i, d, b) -> s + i + d + b));\n","    }\n","\n","    @Test\n","    public void fill() {\n","        assertEquals(tuple(\"foo\", \"foo\", \"foo\", \"foo\"), Tuple4.fill(\"foo\"));\n","    }\n","\n","    @Test\n","    public void zipPrecedence() {\n","        Tuple4<String, Integer, Integer, Integer>                                 a = tuple(\"foo\", 1, 2, 3);\n","        Tuple4<String, Integer, Integer, Fn1<? super Integer, ? extends Integer>> b = tuple(\"foo\", 1, 2, x -> x + 1);\n","        assertEquals(tuple(\"foo\", 1, 2, 4), a.zip(b));\n","    }\n","\n","    @Test\n","    public void flatMapPrecedence() {\n","        Tuple4<String, Integer, Integer, Integer>               a = tuple(\"foo\", 1, 2, 3);\n","        Fn1<Integer, Tuple4<String, Integer, Integer, Integer>> b = x -> tuple(\"bar\", 2, 3, x + 1);\n","        assertEquals(tuple(\"foo\", 1, 2, 4), a.flatMap(b));\n","    }\n","\n","    @Test\n","    public void fromIterable() {\n","        assertEquals(nothing(), Tuple4.fromIterable(emptyList()));\n","        assertEquals(nothing(), Tuple4.fromIterable(singletonList(1)));\n","        assertEquals(just(tuple(1, 1, 1, 1)), Tuple4.fromIterable(repeat(1)));\n","    }\n","\n","    @Test\n","    public void staticPure() {\n","        Tuple4<Integer, String, Character, Boolean> tuple = pureTuple(1, \"2\", '3').apply(true);\n","        assertEquals(tuple(1, \"2\", '3', true), tuple);\n","    }\n","\n","    @Test\n","    public void init() {\n","        assertEquals(tuple(1, 2, 3),\n","                     tuple(1, 2, 3, 4).init());\n","    }\n","}"],"method_lines_dic":{"Tuple4::::cons(_0)":[57,60],"Tuple4::::snoc(_5)":[69,71],"Tuple4::::_1()":[76,79],"Tuple4::::_2()":[84,87],"Tuple4::::_3()":[92,95],"Tuple4::::_4()":[100,103],"Tuple4::::rotateL4()":[108,111],"Tuple4::::rotateR4()":[116,119],"Tuple4::::rotateL3()":[124,127],"Tuple4::::rotateR3()":[132,135],"Tuple4::::invert()":[140,143],"Tuple4::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends _4Prime>)":[148,151],"Tuple4::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends _3Prime>)":[156,159],"Tuple4::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends _4Prime>)":[164,167],"Tuple4::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends _3Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends _4Prime>)":[172,176],"Tuple4::::pure(_4Prime)":[181,184],"Tuple4::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends _4Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple4<_1, _2, _3, ?>>)":[189,193],"Tuple4::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends _4Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple4<_1, _2, _3, ?>>>)":[198,202],"Tuple4::::discardL(com.jnape.palatable.lambda.functor.Applicative<_4Prime, com.jnape.palatable.lambda.adt.hlist.Tuple4<_1, _2, _3, ?>>)":[207,210],"Tuple4::::discardR(com.jnape.palatable.lambda.functor.Applicative<_4Prime, com.jnape.palatable.lambda.adt.hlist.Tuple4<_1, _2, _3, ?>>)":[215,218],"Tuple4::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends com.jnape.palatable.lambda.monad.Monad<_4Prime, com.jnape.palatable.lambda.adt.hlist.Tuple4<_1, _2, _3, ?>>>)":[223,227],"Tuple4::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_4, _4Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple4<_1, _2, _3, ?>>>)":[232,236],"Tuple4::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends com.jnape.palatable.lambda.functor.Applicative<_4Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)":[241,247],"Tuple4::::init()":[255,257],"Tuple4::::fill(A)":[267,269],"Tuple4::::fromIterable(java.lang.Iterable<A>)":[279,281],"Tuple4::::pureTuple(_1,_2,_3)":[294,301]},"test_method_lines_dic":{"Tuple4Test::::setUp()":[34,37],"Tuple4Test::::testSubject()":[39,48],"Tuple4Test::::head()":[50,53],"Tuple4Test::::tail()":[55,58],"Tuple4Test::::cons()":[60,63],"Tuple4Test::::snoc()":[65,68],"Tuple4Test::::accessors()":[70,76],"Tuple4Test::::randomAccess()":[78,91],"Tuple4Test::::into()":[93,97],"Tuple4Test::::fill()":[99,102],"Tuple4Test::::zipPrecedence()":[104,109],"Tuple4Test::::flatMapPrecedence()":[111,116],"Tuple4Test::::fromIterable()":[118,123],"Tuple4Test::::staticPure()":[125,129],"Tuple4Test::::init()":[131,135]},"reverse_method_lines_dic":{"57":"Tuple4::::cons(_0)","58":"Tuple4::::cons(_0)","59":"Tuple4::::cons(_0)","60":"Tuple4::::cons(_0)","69":"Tuple4::::snoc(_5)","70":"Tuple4::::snoc(_5)","71":"Tuple4::::snoc(_5)","76":"Tuple4::::_1()","77":"Tuple4::::_1()","78":"Tuple4::::_1()","79":"Tuple4::::_1()","84":"Tuple4::::_2()","85":"Tuple4::::_2()","86":"Tuple4::::_2()","87":"Tuple4::::_2()","92":"Tuple4::::_3()","93":"Tuple4::::_3()","94":"Tuple4::::_3()","95":"Tuple4::::_3()","100":"Tuple4::::_4()","101":"Tuple4::::_4()","102":"Tuple4::::_4()","103":"Tuple4::::_4()","108":"Tuple4::::rotateL4()","109":"Tuple4::::rotateL4()","110":"Tuple4::::rotateL4()","111":"Tuple4::::rotateL4()","116":"Tuple4::::rotateR4()","117":"Tuple4::::rotateR4()","118":"Tuple4::::rotateR4()","119":"Tuple4::::rotateR4()","124":"Tuple4::::rotateL3()","125":"Tuple4::::rotateL3()","126":"Tuple4::::rotateL3()","127":"Tuple4::::rotateL3()","132":"Tuple4::::rotateR3()","133":"Tuple4::::rotateR3()","134":"Tuple4::::rotateR3()","135":"Tuple4::::rotateR3()","140":"Tuple4::::invert()","141":"Tuple4::::invert()","142":"Tuple4::::invert()","143":"Tuple4::::invert()","148":"Tuple4::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends _4Prime>)","149":"Tuple4::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends _4Prime>)","150":"Tuple4::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends _4Prime>)","151":"Tuple4::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends _4Prime>)","156":"Tuple4::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends _3Prime>)","157":"Tuple4::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends _3Prime>)","158":"Tuple4::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends _3Prime>)","159":"Tuple4::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends _3Prime>)","164":"Tuple4::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends _4Prime>)","165":"Tuple4::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends _4Prime>)","166":"Tuple4::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends _4Prime>)","167":"Tuple4::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends _4Prime>)","172":"Tuple4::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends _3Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends _4Prime>)","173":"Tuple4::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends _3Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends _4Prime>)","174":"Tuple4::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends _3Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends _4Prime>)","175":"Tuple4::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends _3Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends _4Prime>)","176":"Tuple4::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends _3Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends _4Prime>)","181":"Tuple4::::pure(_4Prime)","182":"Tuple4::::pure(_4Prime)","183":"Tuple4::::pure(_4Prime)","184":"Tuple4::::pure(_4Prime)","189":"Tuple4::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends _4Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple4<_1, _2, _3, ?>>)","190":"Tuple4::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends _4Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple4<_1, _2, _3, ?>>)","191":"Tuple4::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends _4Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple4<_1, _2, _3, ?>>)","192":"Tuple4::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends _4Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple4<_1, _2, _3, ?>>)","193":"Tuple4::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends _4Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple4<_1, _2, _3, ?>>)","198":"Tuple4::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends _4Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple4<_1, _2, _3, ?>>>)","199":"Tuple4::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends _4Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple4<_1, _2, _3, ?>>>)","200":"Tuple4::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends _4Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple4<_1, _2, _3, ?>>>)","201":"Tuple4::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends _4Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple4<_1, _2, _3, ?>>>)","202":"Tuple4::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends _4Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple4<_1, _2, _3, ?>>>)","207":"Tuple4::::discardL(com.jnape.palatable.lambda.functor.Applicative<_4Prime, com.jnape.palatable.lambda.adt.hlist.Tuple4<_1, _2, _3, ?>>)","208":"Tuple4::::discardL(com.jnape.palatable.lambda.functor.Applicative<_4Prime, com.jnape.palatable.lambda.adt.hlist.Tuple4<_1, _2, _3, ?>>)","209":"Tuple4::::discardL(com.jnape.palatable.lambda.functor.Applicative<_4Prime, com.jnape.palatable.lambda.adt.hlist.Tuple4<_1, _2, _3, ?>>)","210":"Tuple4::::discardL(com.jnape.palatable.lambda.functor.Applicative<_4Prime, com.jnape.palatable.lambda.adt.hlist.Tuple4<_1, _2, _3, ?>>)","215":"Tuple4::::discardR(com.jnape.palatable.lambda.functor.Applicative<_4Prime, com.jnape.palatable.lambda.adt.hlist.Tuple4<_1, _2, _3, ?>>)","216":"Tuple4::::discardR(com.jnape.palatable.lambda.functor.Applicative<_4Prime, com.jnape.palatable.lambda.adt.hlist.Tuple4<_1, _2, _3, ?>>)","217":"Tuple4::::discardR(com.jnape.palatable.lambda.functor.Applicative<_4Prime, com.jnape.palatable.lambda.adt.hlist.Tuple4<_1, _2, _3, ?>>)","218":"Tuple4::::discardR(com.jnape.palatable.lambda.functor.Applicative<_4Prime, com.jnape.palatable.lambda.adt.hlist.Tuple4<_1, _2, _3, ?>>)","223":"Tuple4::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends com.jnape.palatable.lambda.monad.Monad<_4Prime, com.jnape.palatable.lambda.adt.hlist.Tuple4<_1, _2, _3, ?>>>)","224":"Tuple4::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends com.jnape.palatable.lambda.monad.Monad<_4Prime, com.jnape.palatable.lambda.adt.hlist.Tuple4<_1, _2, _3, ?>>>)","225":"Tuple4::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends com.jnape.palatable.lambda.monad.Monad<_4Prime, com.jnape.palatable.lambda.adt.hlist.Tuple4<_1, _2, _3, ?>>>)","226":"Tuple4::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends com.jnape.palatable.lambda.monad.Monad<_4Prime, com.jnape.palatable.lambda.adt.hlist.Tuple4<_1, _2, _3, ?>>>)","227":"Tuple4::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends com.jnape.palatable.lambda.monad.Monad<_4Prime, com.jnape.palatable.lambda.adt.hlist.Tuple4<_1, _2, _3, ?>>>)","232":"Tuple4::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_4, _4Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple4<_1, _2, _3, ?>>>)","233":"Tuple4::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_4, _4Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple4<_1, _2, _3, ?>>>)","234":"Tuple4::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_4, _4Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple4<_1, _2, _3, ?>>>)","235":"Tuple4::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_4, _4Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple4<_1, _2, _3, ?>>>)","236":"Tuple4::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_4, _4Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple4<_1, _2, _3, ?>>>)","241":"Tuple4::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends com.jnape.palatable.lambda.functor.Applicative<_4Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","242":"Tuple4::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends com.jnape.palatable.lambda.functor.Applicative<_4Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","243":"Tuple4::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends com.jnape.palatable.lambda.functor.Applicative<_4Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","244":"Tuple4::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends com.jnape.palatable.lambda.functor.Applicative<_4Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","245":"Tuple4::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends com.jnape.palatable.lambda.functor.Applicative<_4Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","246":"Tuple4::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends com.jnape.palatable.lambda.functor.Applicative<_4Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","247":"Tuple4::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends com.jnape.palatable.lambda.functor.Applicative<_4Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","255":"Tuple4::::init()","256":"Tuple4::::init()","257":"Tuple4::::init()","267":"Tuple4::::fill(A)","268":"Tuple4::::fill(A)","269":"Tuple4::::fill(A)","279":"Tuple4::::fromIterable(java.lang.Iterable<A>)","280":"Tuple4::::fromIterable(java.lang.Iterable<A>)","281":"Tuple4::::fromIterable(java.lang.Iterable<A>)","294":"Tuple4::::pureTuple(_1,_2,_3)","295":"Tuple4::::pureTuple(_1,_2,_3)","296":"Tuple4::::pureTuple(_1,_2,_3)","297":"Tuple4::::pureTuple(_1,_2,_3)","298":"Tuple4::::pureTuple(_1,_2,_3)","299":"Tuple4::::pureTuple(_1,_2,_3)","300":"Tuple4::::pureTuple(_1,_2,_3)","301":"Tuple4::::pureTuple(_1,_2,_3)"},"test_reverse_method_lines_dic":{"34":"Tuple4Test::::setUp()","35":"Tuple4Test::::setUp()","36":"Tuple4Test::::setUp()","37":"Tuple4Test::::setUp()","39":"Tuple4Test::::testSubject()","40":"Tuple4Test::::testSubject()","41":"Tuple4Test::::testSubject()","42":"Tuple4Test::::testSubject()","43":"Tuple4Test::::testSubject()","44":"Tuple4Test::::testSubject()","45":"Tuple4Test::::testSubject()","46":"Tuple4Test::::testSubject()","47":"Tuple4Test::::testSubject()","48":"Tuple4Test::::testSubject()","50":"Tuple4Test::::head()","51":"Tuple4Test::::head()","52":"Tuple4Test::::head()","53":"Tuple4Test::::head()","55":"Tuple4Test::::tail()","56":"Tuple4Test::::tail()","57":"Tuple4Test::::tail()","58":"Tuple4Test::::tail()","60":"Tuple4Test::::cons()","61":"Tuple4Test::::cons()","62":"Tuple4Test::::cons()","63":"Tuple4Test::::cons()","65":"Tuple4Test::::snoc()","66":"Tuple4Test::::snoc()","67":"Tuple4Test::::snoc()","68":"Tuple4Test::::snoc()","70":"Tuple4Test::::accessors()","71":"Tuple4Test::::accessors()","72":"Tuple4Test::::accessors()","73":"Tuple4Test::::accessors()","74":"Tuple4Test::::accessors()","75":"Tuple4Test::::accessors()","76":"Tuple4Test::::accessors()","78":"Tuple4Test::::randomAccess()","79":"Tuple4Test::::randomAccess()","80":"Tuple4Test::::randomAccess()","81":"Tuple4Test::::randomAccess()","82":"Tuple4Test::::randomAccess()","83":"Tuple4Test::::randomAccess()","84":"Tuple4Test::::randomAccess()","85":"Tuple4Test::::randomAccess()","86":"Tuple4Test::::randomAccess()","87":"Tuple4Test::::randomAccess()","88":"Tuple4Test::::randomAccess()","89":"Tuple4Test::::randomAccess()","90":"Tuple4Test::::randomAccess()","91":"Tuple4Test::::randomAccess()","93":"Tuple4Test::::into()","94":"Tuple4Test::::into()","95":"Tuple4Test::::into()","96":"Tuple4Test::::into()","97":"Tuple4Test::::into()","99":"Tuple4Test::::fill()","100":"Tuple4Test::::fill()","101":"Tuple4Test::::fill()","102":"Tuple4Test::::fill()","104":"Tuple4Test::::zipPrecedence()","105":"Tuple4Test::::zipPrecedence()","106":"Tuple4Test::::zipPrecedence()","107":"Tuple4Test::::zipPrecedence()","108":"Tuple4Test::::zipPrecedence()","109":"Tuple4Test::::zipPrecedence()","111":"Tuple4Test::::flatMapPrecedence()","112":"Tuple4Test::::flatMapPrecedence()","113":"Tuple4Test::::flatMapPrecedence()","114":"Tuple4Test::::flatMapPrecedence()","115":"Tuple4Test::::flatMapPrecedence()","116":"Tuple4Test::::flatMapPrecedence()","118":"Tuple4Test::::fromIterable()","119":"Tuple4Test::::fromIterable()","120":"Tuple4Test::::fromIterable()","121":"Tuple4Test::::fromIterable()","122":"Tuple4Test::::fromIterable()","123":"Tuple4Test::::fromIterable()","125":"Tuple4Test::::staticPure()","126":"Tuple4Test::::staticPure()","127":"Tuple4Test::::staticPure()","128":"Tuple4Test::::staticPure()","129":"Tuple4Test::::staticPure()","131":"Tuple4Test::::init()","132":"Tuple4Test::::init()","133":"Tuple4Test::::init()","134":"Tuple4Test::::init()","135":"Tuple4Test::::init()"},"tests":[{"test_lines":[34,37],"covered_lines":[47,48,49,50,51,52]},{"test_lines":[39,48],"covered_lines":[47,48,49,50,51,52]},{"test_lines":[50,53],"covered_lines":[47,48,49,50,51,52]},{"test_lines":[55,58],"covered_lines":[47,48,49,50,51,52]},{"test_lines":[60,63],"covered_lines":[47,48,49,50,51,52,59,78,86,94,102]},{"test_lines":[65,68],"covered_lines":[47,48,49,50,51,52,59,70,78,86,94,102]},{"test_lines":[70,76],"covered_lines":[47,48,49,50,51,52,78,86,94,102]},{"test_lines":[78,91],"covered_lines":[47,48,49,50,51,52,78,86,94,102]},{"test_lines":[93,97],"covered_lines":[47,48,49,50,51,52,78,86,94,102]},{"test_lines":[99,102],"covered_lines":[47,48,49,50,51,52,268]},{"test_lines":[104,109],"covered_lines":[47,48,49,50,51,52,78,102,166,175,192]},{"test_lines":[111,116],"covered_lines":[47,48,49,50,51,52,183,226]},{"test_lines":[118,123],"covered_lines":[47,48,49,50,51,52,280]},{"test_lines":[125,129],"covered_lines":[47,48,49,50,51,52,295,298]},{"test_lines":[131,135],"covered_lines":[47,48,49,50,51,52,118,256]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/adt/hlist/HList.java":{"class_content":["package com.jnape.palatable.lambda.adt.hlist;\n","\n","import com.jnape.palatable.lambda.functions.builtin.fn1.Downcast;\n","\n","import java.util.Objects;\n","\n","/**\n"," * An immutable heterogeneous list supporting arbitrary depth type-safety via a linearly recursive type signature. Note\n"," * that due to its rapidly expanding type signature, specializations exist up to certain depths to minimize typing\n"," * overhead.\n"," *\n"," * @see SingletonHList\n"," * @see Tuple2\n"," * @see Tuple3\n"," * @see Tuple4\n"," * @see Tuple5\n"," * @see Tuple6\n"," */\n","public abstract class HList {\n","\n","    private HList() {\n","    }\n","\n","    /**\n","     * Cons an element onto the front of this HList.\n","     *\n","     * @param newHead   the new head element\n","     * @param <NewHead> the new head type\n","     * @return the updated HList\n","     */\n","    public abstract <NewHead> HCons<NewHead, ? extends HList> cons(NewHead newHead);\n","\n","    @Override\n","    public final String toString() {\n","        StringBuilder body = new StringBuilder(\"HList{\");\n","\n","        HList next = this;\n","        while (next != HNil.INSTANCE) {\n","            HCons<?, ?> hCons = (HCons<?, ?>) next;\n","            body.append(\" \").append(hCons.head).append(\" \");\n","            next = hCons.tail;\n","            if (next != HNil.INSTANCE)\n","                body.append(\"::\");\n","        }\n","\n","        return body.append(\"}\").toString();\n","    }\n","\n","    /**\n","     * Static factory method for creating empty HLists.\n","     *\n","     * @return an empty HList\n","     */\n","    public static HNil nil() {\n","        return HNil.INSTANCE;\n","    }\n","\n","    /**\n","     * Static factory method for creating an HList from the given head and tail.\n","     *\n","     * @param head   the head element\n","     * @param tail   the tail HList\n","     * @param <Head> the head type\n","     * @param <Tail> the tail type\n","     * @return the newly created HList\n","     */\n","    public static <Head, Tail extends HList> HCons<Head, Tail> cons(Head head, Tail tail) {\n","        return Downcast.<HCons<Head, Tail>, HCons<Head, ? extends HList>>downcast(tail.cons(head));\n","    }\n","\n","    /**\n","     * Static factory method for creating a singleton HList.\n","     *\n","     * @param head   the head element\n","     * @param <Head> the head element type\n","     * @return the singleton HList\n","     */\n","    public static <Head> SingletonHList<Head> singletonHList(Head head) {\n","        return new SingletonHList<>(head);\n","    }\n","\n","    /**\n","     * Static factory method for creating a 2-element HList.\n","     *\n","     * @param _1   the head element\n","     * @param _2   the second element\n","     * @param <_1> the head element type\n","     * @param <_2> the second element type\n","     * @return the 2-element HList\n","     * @see Tuple2\n","     */\n","    public static <_1, _2> Tuple2<_1, _2> tuple(_1 _1, _2 _2) {\n","        return singletonHList(_2).cons(_1);\n","    }\n","\n","    /**\n","     * Static factory method for creating a 3-element HList.\n","     *\n","     * @param _1   the head element\n","     * @param _2   the second element\n","     * @param _3   the third element\n","     * @param <_1> the head element type\n","     * @param <_2> the second element type\n","     * @param <_3> the third element type\n","     * @return the 3-element HList\n","     * @see Tuple3\n","     */\n","    public static <_1, _2, _3> Tuple3<_1, _2, _3> tuple(_1 _1, _2 _2, _3 _3) {\n","        return tuple(_2, _3).cons(_1);\n","    }\n","\n","    /**\n","     * Static factory method for creating a 4-element HList.\n","     *\n","     * @param _1   the head element\n","     * @param _2   the second element\n","     * @param _3   the third element\n","     * @param _4   the fourth element\n","     * @param <_1> the head element type\n","     * @param <_2> the second element type\n","     * @param <_3> the third element type\n","     * @param <_4> the fourth element type\n","     * @return the 4-element HList\n","     * @see Tuple4\n","     */\n","    public static <_1, _2, _3, _4> Tuple4<_1, _2, _3, _4> tuple(_1 _1, _2 _2, _3 _3, _4 _4) {\n","        return tuple(_2, _3, _4).cons(_1);\n","    }\n","\n","    /**\n","     * Static factory method for creating a 5-element HList.\n","     *\n","     * @param _1   the head element\n","     * @param _2   the second element\n","     * @param _3   the third element\n","     * @param _4   the fourth element\n","     * @param _5   the fifth element\n","     * @param <_1> the head element type\n","     * @param <_2> the second element type\n","     * @param <_3> the third element type\n","     * @param <_4> the fourth element type\n","     * @param <_5> the fifth element type\n","     * @return the 5-element HList\n","     * @see Tuple5\n","     */\n","    public static <_1, _2, _3, _4, _5> Tuple5<_1, _2, _3, _4, _5> tuple(_1 _1, _2 _2, _3 _3, _4 _4, _5 _5) {\n","        return tuple(_2, _3, _4, _5).cons(_1);\n","    }\n","\n","    /**\n","     * Static factory method for creating a 6-element HList.\n","     *\n","     * @param _1   the head element\n","     * @param _2   the second element\n","     * @param _3   the third element\n","     * @param _4   the fourth element\n","     * @param _5   the fifth element\n","     * @param _6   the sixth element\n","     * @param <_1> the head element type\n","     * @param <_2> the second element type\n","     * @param <_3> the third element type\n","     * @param <_4> the fourth element type\n","     * @param <_5> the fifth element type\n","     * @param <_6> the sixth element type\n","     * @return the 6-element HList\n","     * @see Tuple6\n","     */\n","    public static <_1, _2, _3, _4, _5, _6> Tuple6<_1, _2, _3, _4, _5, _6> tuple(_1 _1, _2 _2, _3 _3, _4 _4, _5 _5,\n","                                                                                _6 _6) {\n","        return tuple(_2, _3, _4, _5, _6).cons(_1);\n","    }\n","\n","    /**\n","     * Static factory method for creating a 7-element HList.\n","     *\n","     * @param _1   the head element\n","     * @param _2   the second element\n","     * @param _3   the third element\n","     * @param _4   the fourth element\n","     * @param _5   the fifth element\n","     * @param _6   the sixth element\n","     * @param _7   the seventh element\n","     * @param <_1> the head element type\n","     * @param <_2> the second element type\n","     * @param <_3> the third element type\n","     * @param <_4> the fourth element type\n","     * @param <_5> the fifth element type\n","     * @param <_6> the sixth element type\n","     * @param <_7> the seventh element type\n","     * @return the 7-element HList\n","     * @see Tuple7\n","     */\n","    public static <_1, _2, _3, _4, _5, _6, _7> Tuple7<_1, _2, _3, _4, _5, _6, _7> tuple(_1 _1, _2 _2, _3 _3, _4 _4,\n","                                                                                        _5 _5, _6 _6, _7 _7) {\n","        return tuple(_2, _3, _4, _5, _6, _7).cons(_1);\n","    }\n","\n","    /**\n","     * Static factory method for creating an 8-element HList.\n","     *\n","     * @param _1   the head element\n","     * @param _2   the second element\n","     * @param _3   the third element\n","     * @param _4   the fourth element\n","     * @param _5   the fifth element\n","     * @param _6   the sixth element\n","     * @param _7   the seventh element\n","     * @param _8   the eighth element\n","     * @param <_1> the head element type\n","     * @param <_2> the second element type\n","     * @param <_3> the third element type\n","     * @param <_4> the fourth element type\n","     * @param <_5> the fifth element type\n","     * @param <_6> the sixth element type\n","     * @param <_7> the seventh element type\n","     * @param <_8> the eighth element type\n","     * @return the 8-element HList\n","     * @see Tuple8\n","     */\n","    public static <_1, _2, _3, _4, _5, _6, _7, _8> Tuple8<_1, _2, _3, _4, _5, _6, _7, _8> tuple(_1 _1, _2 _2, _3 _3,\n","                                                                                                _4 _4, _5 _5, _6 _6,\n","                                                                                                _7 _7, _8 _8) {\n","        return tuple(_2, _3, _4, _5, _6, _7, _8).cons(_1);\n","    }\n","\n","    /**\n","     * The consing of a head element to a tail <code>HList</code>.\n","     *\n","     * @param <Head> the head element type\n","     * @param <Tail> the HList tail type\n","     */\n","    public static class HCons<Head, Tail extends HList> extends HList {\n","        private final Head head;\n","        private final Tail tail;\n","\n","        HCons(Head head, Tail tail) {\n","            this.head = head;\n","            this.tail = tail;\n","        }\n","\n","        /**\n","         * The head element of the <code>HList</code>.\n","         *\n","         * @return the head element\n","         */\n","        public Head head() {\n","            return head;\n","        }\n","\n","        /**\n","         * The remaining tail of the <code>HList</code>; returns an HNil if this is the last element.\n","         *\n","         * @return the tail\n","         */\n","        public Tail tail() {\n","            return tail;\n","        }\n","\n","        @Override\n","        public <NewHead> HCons<NewHead, ? extends HCons<Head, Tail>> cons(NewHead newHead) {\n","            return new HCons<>(newHead, this);\n","        }\n","\n","        @Override\n","        public final boolean equals(Object other) {\n","            if (other instanceof HCons) {\n","                HCons<?, ?> that = (HCons<?, ?>) other;\n","                return this.head.equals(that.head)\n","                        && this.tail.equals(that.tail);\n","            }\n","            return false;\n","        }\n","\n","        @Override\n","        public final int hashCode() {\n","            return 31 * Objects.hashCode(head) + tail.hashCode();\n","        }\n","    }\n","\n","    /**\n","     * The empty <code>HList</code>.\n","     */\n","    public static final class HNil extends HList {\n","        private static final HNil INSTANCE = new HNil();\n","\n","        private HNil() {\n","        }\n","\n","        @Override\n","        public <Head> SingletonHList<Head> cons(Head head) {\n","            return new SingletonHList<>(head);\n","        }\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.adt.hlist;\n","\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.hlist.HList.cons;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.nil;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.singletonHList;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static org.hamcrest.CoreMatchers.instanceOf;\n","import static org.junit.Assert.assertEquals;\n","import static org.junit.Assert.assertNotEquals;\n","import static org.junit.Assert.assertSame;\n","import static org.junit.Assert.assertThat;\n","\n","public class HListTest {\n","\n","    @Test\n","    public void head() {\n","        assertEquals(\"head\", nil().cons(\"head\").head());\n","        assertEquals(\"new head\", nil().cons(\"old head\").cons(\"new head\").head());\n","    }\n","\n","    @Test\n","    public void tail() {\n","        assertEquals(nil(), nil().cons(\"head\").tail());\n","        assertEquals(nil().cons(\"old head\"), nil().cons(\"old head\").cons(\"new head\").tail());\n","    }\n","\n","    @Test\n","    public void convenienceStaticFactoryMethods() {\n","        assertEquals(nil().cons(1), cons(1, nil()));\n","        assertEquals(nil().cons(1), singletonHList(1));\n","        assertEquals(nil().cons('2').cons(1), tuple(1, '2'));\n","        assertEquals(nil().cons(\"3\").cons('2').cons(1), tuple(1, '2', \"3\"));\n","        assertEquals(nil().cons(4.0).cons(\"3\").cons('2').cons(1), tuple(1, '2', \"3\", 4.0));\n","        assertEquals(nil().cons(false).cons(4.0).cons(\"3\").cons('2').cons(1), tuple(1, '2', \"3\", 4.0, false));\n","    }\n","\n","    @Test\n","    public void autoPromotion() {\n","        assertThat(cons(1, nil()), instanceOf(SingletonHList.class));\n","        assertThat(cons(1, singletonHList(1)), instanceOf(Tuple2.class));\n","        assertThat(cons(1, tuple(1, 1)), instanceOf(Tuple3.class));\n","        assertThat(cons(1, tuple(1, 1, 1)), instanceOf(Tuple4.class));\n","        assertThat(cons(1, tuple(1, 1, 1, 1)), instanceOf(Tuple5.class));\n","        assertThat(cons(1, tuple(1, 1, 1, 1, 1)), instanceOf(Tuple6.class));\n","        assertThat(cons(1, tuple(1, 1, 1, 1, 1, 1)), instanceOf(Tuple7.class));\n","        assertThat(cons(1, tuple(1, 1, 1, 1, 1, 1, 1)), instanceOf(Tuple8.class));\n","    }\n","\n","    @Test\n","    public void nilReusesInstance() {\n","        assertSame(nil(), nil());\n","    }\n","\n","    @Test\n","    public void equality() {\n","        assertEquals(nil(), nil());\n","        assertEquals(cons(1, nil()), cons(1, nil()));\n","\n","        assertNotEquals(cons(1, nil()), nil());\n","        assertNotEquals(nil(), cons(1, nil()));\n","\n","        assertNotEquals(cons(1, cons(2, nil())), cons(1, nil()));\n","        assertNotEquals(cons(1, nil()), cons(1, cons(2, nil())));\n","    }\n","\n","    @Test\n","    public void hashCodeUsesDecentDistribution() {\n","        assertEquals(nil().hashCode(), nil().hashCode());\n","        assertEquals(nil().cons(1).hashCode(), nil().cons(1).hashCode());\n","\n","        assertNotEquals(nil().cons(1).hashCode(), nil().cons(2).hashCode());\n","        assertNotEquals(nil().cons(1).cons(2).hashCode(), nil().cons(1).cons(3).hashCode());\n","    }\n","}"],"method_lines_dic":{"HList::::cons(NewHead)":[31,31],"HList::::toString()":[33,47],"HList::::nil()":[54,56],"HList::::cons(Head,Tail)":[67,69],"HList::::singletonHList(Head)":[78,80],"HList::::tuple(_1,_2)":[92,94],"HList::::tuple(_1,_2,_3)":[108,110],"HList::::tuple(_1,_2,_3,_4)":[126,128],"HList::::tuple(_1,_2,_3,_4,_5)":[146,148],"HList::::tuple(_1,_2,_3,_4,_5,_6)":[168,171],"HList::::tuple(_1,_2,_3,_4,_5,_6,_7)":[193,196],"HList::::tuple(_1,_2,_3,_4,_5,_6,_7,_8)":[220,224],"HList.HCons::::head()":[246,248],"HList.HCons::::tail()":[255,257],"HList.HCons::::cons(NewHead)":[259,262],"HList.HCons::::equals(java.lang.Object)":[264,272],"HList.HCons::::hashCode()":[274,277],"HList.HNil::::cons(Head)":[289,292]},"test_method_lines_dic":{"HListTest::::head()":[17,21],"HListTest::::tail()":[23,27],"HListTest::::convenienceStaticFactoryMethods()":[29,37],"HListTest::::autoPromotion()":[39,49],"HListTest::::nilReusesInstance()":[51,54],"HListTest::::equality()":[56,66],"HListTest::::hashCodeUsesDecentDistribution()":[68,75]},"reverse_method_lines_dic":{"31":"HList::::cons(NewHead)","33":"HList::::toString()","34":"HList::::toString()","35":"HList::::toString()","36":"HList::::toString()","37":"HList::::toString()","38":"HList::::toString()","39":"HList::::toString()","40":"HList::::toString()","41":"HList::::toString()","42":"HList::::toString()","43":"HList::::toString()","44":"HList::::toString()","45":"HList::::toString()","46":"HList::::toString()","47":"HList::::toString()","54":"HList::::nil()","55":"HList::::nil()","56":"HList::::nil()","67":"HList::::cons(Head,Tail)","68":"HList::::cons(Head,Tail)","69":"HList::::cons(Head,Tail)","78":"HList::::singletonHList(Head)","79":"HList::::singletonHList(Head)","80":"HList::::singletonHList(Head)","92":"HList::::tuple(_1,_2)","93":"HList::::tuple(_1,_2)","94":"HList::::tuple(_1,_2)","108":"HList::::tuple(_1,_2,_3)","109":"HList::::tuple(_1,_2,_3)","110":"HList::::tuple(_1,_2,_3)","126":"HList::::tuple(_1,_2,_3,_4)","127":"HList::::tuple(_1,_2,_3,_4)","128":"HList::::tuple(_1,_2,_3,_4)","146":"HList::::tuple(_1,_2,_3,_4,_5)","147":"HList::::tuple(_1,_2,_3,_4,_5)","148":"HList::::tuple(_1,_2,_3,_4,_5)","168":"HList::::tuple(_1,_2,_3,_4,_5,_6)","169":"HList::::tuple(_1,_2,_3,_4,_5,_6)","170":"HList::::tuple(_1,_2,_3,_4,_5,_6)","171":"HList::::tuple(_1,_2,_3,_4,_5,_6)","193":"HList::::tuple(_1,_2,_3,_4,_5,_6,_7)","194":"HList::::tuple(_1,_2,_3,_4,_5,_6,_7)","195":"HList::::tuple(_1,_2,_3,_4,_5,_6,_7)","196":"HList::::tuple(_1,_2,_3,_4,_5,_6,_7)","220":"HList::::tuple(_1,_2,_3,_4,_5,_6,_7,_8)","221":"HList::::tuple(_1,_2,_3,_4,_5,_6,_7,_8)","222":"HList::::tuple(_1,_2,_3,_4,_5,_6,_7,_8)","223":"HList::::tuple(_1,_2,_3,_4,_5,_6,_7,_8)","224":"HList::::tuple(_1,_2,_3,_4,_5,_6,_7,_8)","246":"HList.HCons::::head()","247":"HList.HCons::::head()","248":"HList.HCons::::head()","255":"HList.HCons::::tail()","256":"HList.HCons::::tail()","257":"HList.HCons::::tail()","259":"HList.HCons::::cons(NewHead)","260":"HList.HCons::::cons(NewHead)","261":"HList.HCons::::cons(NewHead)","262":"HList.HCons::::cons(NewHead)","264":"HList.HCons::::equals(java.lang.Object)","265":"HList.HCons::::equals(java.lang.Object)","266":"HList.HCons::::equals(java.lang.Object)","267":"HList.HCons::::equals(java.lang.Object)","268":"HList.HCons::::equals(java.lang.Object)","269":"HList.HCons::::equals(java.lang.Object)","270":"HList.HCons::::equals(java.lang.Object)","271":"HList.HCons::::equals(java.lang.Object)","272":"HList.HCons::::equals(java.lang.Object)","274":"HList.HCons::::hashCode()","275":"HList.HCons::::hashCode()","276":"HList.HCons::::hashCode()","277":"HList.HCons::::hashCode()","289":"HList.HNil::::cons(Head)","290":"HList.HNil::::cons(Head)","291":"HList.HNil::::cons(Head)","292":"HList.HNil::::cons(Head)"},"test_reverse_method_lines_dic":{"17":"HListTest::::head()","18":"HListTest::::head()","19":"HListTest::::head()","20":"HListTest::::head()","21":"HListTest::::head()","23":"HListTest::::tail()","24":"HListTest::::tail()","25":"HListTest::::tail()","26":"HListTest::::tail()","27":"HListTest::::tail()","29":"HListTest::::convenienceStaticFactoryMethods()","30":"HListTest::::convenienceStaticFactoryMethods()","31":"HListTest::::convenienceStaticFactoryMethods()","32":"HListTest::::convenienceStaticFactoryMethods()","33":"HListTest::::convenienceStaticFactoryMethods()","34":"HListTest::::convenienceStaticFactoryMethods()","35":"HListTest::::convenienceStaticFactoryMethods()","36":"HListTest::::convenienceStaticFactoryMethods()","37":"HListTest::::convenienceStaticFactoryMethods()","39":"HListTest::::autoPromotion()","40":"HListTest::::autoPromotion()","41":"HListTest::::autoPromotion()","42":"HListTest::::autoPromotion()","43":"HListTest::::autoPromotion()","44":"HListTest::::autoPromotion()","45":"HListTest::::autoPromotion()","46":"HListTest::::autoPromotion()","47":"HListTest::::autoPromotion()","48":"HListTest::::autoPromotion()","49":"HListTest::::autoPromotion()","51":"HListTest::::nilReusesInstance()","52":"HListTest::::nilReusesInstance()","53":"HListTest::::nilReusesInstance()","54":"HListTest::::nilReusesInstance()","56":"HListTest::::equality()","57":"HListTest::::equality()","58":"HListTest::::equality()","59":"HListTest::::equality()","60":"HListTest::::equality()","61":"HListTest::::equality()","62":"HListTest::::equality()","63":"HListTest::::equality()","64":"HListTest::::equality()","65":"HListTest::::equality()","66":"HListTest::::equality()","68":"HListTest::::hashCodeUsesDecentDistribution()","69":"HListTest::::hashCodeUsesDecentDistribution()","70":"HListTest::::hashCodeUsesDecentDistribution()","71":"HListTest::::hashCodeUsesDecentDistribution()","72":"HListTest::::hashCodeUsesDecentDistribution()","73":"HListTest::::hashCodeUsesDecentDistribution()","74":"HListTest::::hashCodeUsesDecentDistribution()","75":"HListTest::::hashCodeUsesDecentDistribution()"},"tests":[{"test_lines":[17,21],"covered_lines":[21,22,55,236,237,238,239,247,284,286,287,291]},{"test_lines":[23,27],"covered_lines":[21,22,55,236,237,238,239,247,256,266,267,268,269,284,286,287,291]},{"test_lines":[29,37],"covered_lines":[21,22,55,68,79,93,109,127,147,236,237,238,239,247,266,267,268,269,284,286,287,291]},{"test_lines":[39,49],"covered_lines":[21,22,55,68,79,93,109,127,147,170,195,236,237,238,239,247,284,286,287,291]},{"test_lines":[51,54],"covered_lines":[21,22,55,284,286,287]},{"test_lines":[56,66],"covered_lines":[21,22,55,68,236,237,238,239,247,266,267,268,269,271,284,286,287,291]},{"test_lines":[68,75],"covered_lines":[21,22,55,236,237,238,239,247,276,284,286,287,291]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/adt/hlist/Tuple3.java":{"class_content":["package com.jnape.palatable.lambda.adt.hlist;\n","\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.adt.hlist.HList.HCons;\n","import com.jnape.palatable.lambda.adt.product.Product3;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.builtin.fn2.Into;\n","import com.jnape.palatable.lambda.functions.recursion.RecursiveResult;\n","import com.jnape.palatable.lambda.functions.specialized.Pure;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","import com.jnape.palatable.lambda.functor.Bifunctor;\n","import com.jnape.palatable.lambda.functor.builtin.Lazy;\n","import com.jnape.palatable.lambda.monad.Monad;\n","import com.jnape.palatable.lambda.monad.MonadRec;\n","import com.jnape.palatable.lambda.traversable.Traversable;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Uncons.uncons;\n","import static com.jnape.palatable.lambda.functions.recursion.Trampoline.trampoline;\n","\n","/**\n"," * A 3-element tuple product type, implemented as a specialized HList. Supports random access.\n"," *\n"," * @param <_1> The first slot element type\n"," * @param <_2> The second slot element type\n"," * @param <_3> The third slot element type\n"," * @see Product3\n"," * @see HList\n"," * @see SingletonHList\n"," * @see Tuple2\n"," * @see Tuple4\n"," * @see Tuple5\n"," */\n","public class Tuple3<_1, _2, _3> extends HCons<_1, Tuple2<_2, _3>> implements\n","        Product3<_1, _2, _3>,\n","        MonadRec<_3, Tuple3<_1, _2, ?>>,\n","        Bifunctor<_2, _3, Tuple3<_1, ?, ?>>,\n","        Traversable<_3, Tuple3<_1, _2, ?>> {\n","\n","    private final _1 _1;\n","    private final _2 _2;\n","    private final _3 _3;\n","\n","    Tuple3(_1 _1, Tuple2<_2, _3> tail) {\n","        super(_1, tail);\n","        this._1 = _1;\n","        _2      = tail._1();\n","        _3      = tail._2();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_0> Tuple4<_0, _1, _2, _3> cons(_0 _0) {\n","        return new Tuple4<>(_0, this);\n","    }\n","\n","    /**\n","     * Snoc an element onto the back of this {@link Tuple3}.\n","     *\n","     * @param _4   the new last element\n","     * @param <_4> the new last element type\n","     * @return the new {@link Tuple4}\n","     */\n","    public <_4> Tuple4<_1, _2, _3, _4> snoc(_4 _4) {\n","        return tuple(_1, _2, _3, _4);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public _1 _1() {\n","        return _1;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public _2 _2() {\n","        return _2;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public _3 _3() {\n","        return _3;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple3<_2, _3, _1> rotateL3() {\n","        return tuple(_2, _3, _1);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple3<_3, _1, _2> rotateR3() {\n","        return tuple(_3, _1, _2);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple3<_2, _1, _3> invert() {\n","        return tuple(_2, _1, _3);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_3Prime> Tuple3<_1, _2, _3Prime> fmap(Fn1<? super _3, ? extends _3Prime> fn) {\n","        return (Tuple3<_1, _2, _3Prime>) MonadRec.super.<_3Prime>fmap(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_2Prime> Tuple3<_1, _2Prime, _3> biMapL(Fn1<? super _2, ? extends _2Prime> fn) {\n","        return (Tuple3<_1, _2Prime, _3>) Bifunctor.super.<_2Prime>biMapL(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_3Prime> Tuple3<_1, _2, _3Prime> biMapR(Fn1<? super _3, ? extends _3Prime> fn) {\n","        return (Tuple3<_1, _2, _3Prime>) Bifunctor.super.<_3Prime>biMapR(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_2Prime, _3Prime> Tuple3<_1, _2Prime, _3Prime> biMap(Fn1<? super _2, ? extends _2Prime> lFn,\n","                                                                 Fn1<? super _3, ? extends _3Prime> rFn) {\n","        return new Tuple3<>(_1(), tail().biMap(lFn, rFn));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_3Prime> Tuple3<_1, _2, _3Prime> pure(_3Prime _3Prime) {\n","        return tuple(_1, _2, _3Prime);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_3Prime> Tuple3<_1, _2, _3Prime> zip(\n","            Applicative<Fn1<? super _3, ? extends _3Prime>, Tuple3<_1, _2, ?>> appFn) {\n","        return biMapR(appFn.<Tuple3<_1, _2, Fn1<? super _3, ? extends _3Prime>>>coerce()._3()::apply);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_3Prime> Lazy<Tuple3<_1, _2, _3Prime>> lazyZip(\n","            Lazy<? extends Applicative<Fn1<? super _3, ? extends _3Prime>, Tuple3<_1, _2, ?>>> lazyAppFn) {\n","        return MonadRec.super.lazyZip(lazyAppFn).fmap(Monad<_3Prime, Tuple3<_1, _2, ?>>::coerce);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_3Prime> Tuple3<_1, _2, _3Prime> discardL(Applicative<_3Prime, Tuple3<_1, _2, ?>> appB) {\n","        return MonadRec.super.discardL(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_3Prime> Tuple3<_1, _2, _3> discardR(Applicative<_3Prime, Tuple3<_1, _2, ?>> appB) {\n","        return MonadRec.super.discardR(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_3Prime> Tuple3<_1, _2, _3Prime> flatMap(\n","            Fn1<? super _3, ? extends Monad<_3Prime, Tuple3<_1, _2, ?>>> f) {\n","        return pure(f.apply(_3).<Tuple3<_1, _2, _3Prime>>coerce()._3);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_3Prime> Tuple3<_1, _2, _3Prime> trampolineM(\n","            Fn1<? super _3, ? extends MonadRec<RecursiveResult<_3, _3Prime>, Tuple3<_1, _2, ?>>> fn) {\n","        return fmap(trampoline(x -> fn.apply(x).<Tuple3<_1, _2, RecursiveResult<_3, _3Prime>>>coerce()._3()));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_3Prime, App extends Applicative<?, App>, TravB extends Traversable<_3Prime, Tuple3<_1, _2, ?>>,\n","            AppTrav extends Applicative<TravB, App>> AppTrav traverse(\n","            Fn1<? super _3, ? extends Applicative<_3Prime, App>> fn,\n","            Fn1<? super TravB, ? extends AppTrav> pure) {\n","        return fn.apply(_3).fmap(_3Prime -> fmap(constantly(_3Prime))).<TravB>fmap(Applicative::coerce).coerce();\n","    }\n","\n","    /**\n","     * Returns a <code>{@link Tuple2}&lt;_1, _2&gt;</code> of all the elements of this\n","     * <code>{@link Tuple3}&lt;_1, _2, _3&gt;</code> except the last.\n","     *\n","     * @return The {@link Tuple2}&lt;_1, _2&gt; representing all but the last element\n","     */\n","    public Tuple2<_1, _2> init() {\n","        return rotateR3().tail();\n","    }\n","\n","    /**\n","     * Given a value of type <code>A</code>, produced an instance of this tuple with each slot set to that value.\n","     *\n","     * @param a   the value to fill the tuple with\n","     * @param <A> the value type\n","     * @return the filled tuple\n","     * @see Tuple2#fill\n","     */\n","    public static <A> Tuple3<A, A, A> fill(A a) {\n","        return tuple(a, a, a);\n","    }\n","\n","    /**\n","     * Return {@link Maybe#just(Object) just} the first three elements from the given {@link Iterable}, or\n","     * {@link Maybe#nothing() nothing} if there are less than three elements.\n","     *\n","     * @param as  the {@link Iterable}\n","     * @param <A> the {@link Iterable} element type\n","     * @return {@link Maybe} the first three elements of the given {@link Iterable}\n","     */\n","    public static <A> Maybe<Tuple3<A, A, A>> fromIterable(Iterable<A> as) {\n","        return uncons(as).flatMap(Into.into((head, tail) -> Tuple2.fromIterable(tail).fmap(t -> t.cons(head))));\n","    }\n","\n","    /**\n","     * The canonical {@link Pure} instance for {@link Tuple3}.\n","     *\n","     * @param _1   the head element\n","     * @param _2   the second element\n","     * @param <_1> the head element type\n","     * @param <_2> the second element type\n","     * @return the {@link Pure} instance\n","     */\n","    public static <_1, _2> Pure<Tuple3<_1, _2, ?>> pureTuple(_1 _1, _2 _2) {\n","        return new Pure<Tuple3<_1, _2, ?>>() {\n","            @Override\n","            public <_3> Tuple3<_1, _2, _3> checkedApply(_3 _3) throws Throwable {\n","                return tuple(_1, _2, _3);\n","            }\n","        };\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.adt.hlist;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Before;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.ApplicativeLaws;\n","import testsupport.traits.BifunctorLaws;\n","import testsupport.traits.FunctorLaws;\n","import testsupport.traits.MonadLaws;\n","import testsupport.traits.MonadRecLaws;\n","import testsupport.traits.TraversableLaws;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.adt.hlist.Tuple3.pureTuple;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Repeat.repeat;\n","import static java.time.Duration.ofSeconds;\n","import static java.util.Collections.emptyList;\n","import static java.util.Collections.singletonList;\n","import static org.junit.Assert.assertEquals;\n","import static org.mockito.Mockito.spy;\n","import static org.mockito.Mockito.times;\n","import static org.mockito.Mockito.verify;\n","import static org.mockito.Mockito.verifyNoMoreInteractions;\n","\n","@RunWith(Traits.class)\n","public class Tuple3Test {\n","\n","    private Tuple3<Integer, String, Character> tuple3;\n","\n","    @Before\n","    public void setUp() {\n","        tuple3 = new Tuple3<>(1, new Tuple2<>(\"2\", new SingletonHList<>('3')));\n","    }\n","\n","    @TestTraits({\n","            FunctorLaws.class,\n","            ApplicativeLaws.class,\n","            MonadLaws.class,\n","            MonadRecLaws.class,\n","            BifunctorLaws.class,\n","            TraversableLaws.class})\n","    public Tuple3<?, ?, ?> testSubject() {\n","        return tuple(\"one\", 2, 3d);\n","    }\n","\n","    @Test\n","    public void head() {\n","        assertEquals((Integer) 1, tuple3.head());\n","    }\n","\n","    @Test\n","    public void tail() {\n","        assertEquals(new Tuple2<>(\"2\", new SingletonHList<>('3')), tuple3.tail());\n","    }\n","\n","    @Test\n","    public void cons() {\n","        assertEquals(new Tuple4<>(0, tuple3), tuple3.cons(0));\n","    }\n","\n","    @Test\n","    public void snoc() {\n","        assertEquals(tuple(\"qux\", Long.MIN_VALUE, 7, ofSeconds(13)),\n","                     tuple(\"qux\", Long.MIN_VALUE, 7).snoc(ofSeconds(13)));\n","    }\n","\n","    @Test\n","    public void accessors() {\n","        assertEquals((Integer) 1, tuple3._1());\n","        assertEquals(\"2\", tuple3._2());\n","        assertEquals((Character) '3', tuple3._3());\n","    }\n","\n","    @Test\n","    public void randomAccess() {\n","        Tuple2<String, String>         spiedTail = spy(tuple(\"second\", \"third\"));\n","        Tuple3<String, String, String> tuple3    = new Tuple3<>(\"first\", spiedTail);\n","\n","        verify(spiedTail, times(1))._1();\n","        verify(spiedTail, times(1))._2();\n","        tuple3._1();\n","        tuple3._2();\n","        tuple3._3();\n","        verifyNoMoreInteractions(spiedTail);\n","    }\n","\n","    @Test\n","    public void into() {\n","        Tuple3<String, Integer, Double> tuple = tuple(\"foo\", 1, 2.0d);\n","        assertEquals(\"foo12.0\", tuple.into((s, i, d) -> s + i + d));\n","    }\n","\n","    @Test\n","    public void fill() {\n","        assertEquals(tuple(\"foo\", \"foo\", \"foo\"), Tuple3.fill(\"foo\"));\n","    }\n","\n","    @Test\n","    public void zipPrecedence() {\n","        Tuple3<String, Integer, Integer>                                 a = tuple(\"foo\", 1, 2);\n","        Tuple3<String, Integer, Fn1<? super Integer, ? extends Integer>> b = tuple(\"bar\", 2, x -> x + 1);\n","        assertEquals(tuple(\"foo\", 1, 3), a.zip(b));\n","    }\n","\n","    @Test\n","    public void flatMapPrecedence() {\n","        Tuple3<String, Integer, Integer>               a = tuple(\"foo\", 1, 2);\n","        Fn1<Integer, Tuple3<String, Integer, Integer>> b = x -> tuple(\"bar\", 2, x + 1);\n","        assertEquals(tuple(\"foo\", 1, 3), a.flatMap(b));\n","    }\n","\n","    @Test\n","    public void fromIterable() {\n","        assertEquals(nothing(), Tuple3.fromIterable(emptyList()));\n","        assertEquals(nothing(), Tuple3.fromIterable(singletonList(1)));\n","        assertEquals(just(tuple(1, 1, 1)), Tuple3.fromIterable(repeat(1)));\n","    }\n","\n","    @Test\n","    public void staticPure() {\n","        Tuple3<Integer, String, Character> tuple = pureTuple(1, \"2\").apply('3');\n","        assertEquals(tuple(1, \"2\", '3'), tuple);\n","    }\n","\n","    @Test\n","    public void init() {\n","        assertEquals(tuple(1, 2),\n","                     tuple(1, 2, 3).init());\n","    }\n","}\n"],"method_lines_dic":{"Tuple3::::cons(_0)":[54,57],"Tuple3::::snoc(_4)":[66,68],"Tuple3::::_1()":[73,76],"Tuple3::::_2()":[81,84],"Tuple3::::_3()":[89,92],"Tuple3::::rotateL3()":[97,100],"Tuple3::::rotateR3()":[105,108],"Tuple3::::invert()":[113,116],"Tuple3::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends _3Prime>)":[121,124],"Tuple3::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends _2Prime>)":[129,132],"Tuple3::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends _3Prime>)":[137,140],"Tuple3::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends _2Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends _3Prime>)":[145,149],"Tuple3::::pure(_3Prime)":[154,157],"Tuple3::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends _3Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple3<_1, _2, ?>>)":[162,166],"Tuple3::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends _3Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple3<_1, _2, ?>>>)":[171,175],"Tuple3::::discardL(com.jnape.palatable.lambda.functor.Applicative<_3Prime, com.jnape.palatable.lambda.adt.hlist.Tuple3<_1, _2, ?>>)":[180,183],"Tuple3::::discardR(com.jnape.palatable.lambda.functor.Applicative<_3Prime, com.jnape.palatable.lambda.adt.hlist.Tuple3<_1, _2, ?>>)":[188,191],"Tuple3::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends com.jnape.palatable.lambda.monad.Monad<_3Prime, com.jnape.palatable.lambda.adt.hlist.Tuple3<_1, _2, ?>>>)":[196,200],"Tuple3::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_3, _3Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple3<_1, _2, ?>>>)":[205,209],"Tuple3::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends com.jnape.palatable.lambda.functor.Applicative<_3Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)":[214,220],"Tuple3::::init()":[228,230],"Tuple3::::fill(A)":[240,242],"Tuple3::::fromIterable(java.lang.Iterable<A>)":[252,254],"Tuple3::::pureTuple(_1,_2)":[265,272]},"test_method_lines_dic":{"Tuple3Test::::setUp()":[35,38],"Tuple3Test::::testSubject()":[40,49],"Tuple3Test::::head()":[51,54],"Tuple3Test::::tail()":[56,59],"Tuple3Test::::cons()":[61,64],"Tuple3Test::::snoc()":[66,70],"Tuple3Test::::accessors()":[72,77],"Tuple3Test::::randomAccess()":[79,90],"Tuple3Test::::into()":[92,96],"Tuple3Test::::fill()":[98,101],"Tuple3Test::::zipPrecedence()":[103,108],"Tuple3Test::::flatMapPrecedence()":[110,115],"Tuple3Test::::fromIterable()":[117,122],"Tuple3Test::::staticPure()":[124,128],"Tuple3Test::::init()":[130,134]},"reverse_method_lines_dic":{"54":"Tuple3::::cons(_0)","55":"Tuple3::::cons(_0)","56":"Tuple3::::cons(_0)","57":"Tuple3::::cons(_0)","66":"Tuple3::::snoc(_4)","67":"Tuple3::::snoc(_4)","68":"Tuple3::::snoc(_4)","73":"Tuple3::::_1()","74":"Tuple3::::_1()","75":"Tuple3::::_1()","76":"Tuple3::::_1()","81":"Tuple3::::_2()","82":"Tuple3::::_2()","83":"Tuple3::::_2()","84":"Tuple3::::_2()","89":"Tuple3::::_3()","90":"Tuple3::::_3()","91":"Tuple3::::_3()","92":"Tuple3::::_3()","97":"Tuple3::::rotateL3()","98":"Tuple3::::rotateL3()","99":"Tuple3::::rotateL3()","100":"Tuple3::::rotateL3()","105":"Tuple3::::rotateR3()","106":"Tuple3::::rotateR3()","107":"Tuple3::::rotateR3()","108":"Tuple3::::rotateR3()","113":"Tuple3::::invert()","114":"Tuple3::::invert()","115":"Tuple3::::invert()","116":"Tuple3::::invert()","121":"Tuple3::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends _3Prime>)","122":"Tuple3::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends _3Prime>)","123":"Tuple3::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends _3Prime>)","124":"Tuple3::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends _3Prime>)","129":"Tuple3::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends _2Prime>)","130":"Tuple3::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends _2Prime>)","131":"Tuple3::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends _2Prime>)","132":"Tuple3::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends _2Prime>)","137":"Tuple3::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends _3Prime>)","138":"Tuple3::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends _3Prime>)","139":"Tuple3::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends _3Prime>)","140":"Tuple3::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends _3Prime>)","145":"Tuple3::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends _2Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends _3Prime>)","146":"Tuple3::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends _2Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends _3Prime>)","147":"Tuple3::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends _2Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends _3Prime>)","148":"Tuple3::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends _2Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends _3Prime>)","149":"Tuple3::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends _2Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends _3Prime>)","154":"Tuple3::::pure(_3Prime)","155":"Tuple3::::pure(_3Prime)","156":"Tuple3::::pure(_3Prime)","157":"Tuple3::::pure(_3Prime)","162":"Tuple3::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends _3Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple3<_1, _2, ?>>)","163":"Tuple3::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends _3Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple3<_1, _2, ?>>)","164":"Tuple3::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends _3Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple3<_1, _2, ?>>)","165":"Tuple3::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends _3Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple3<_1, _2, ?>>)","166":"Tuple3::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends _3Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple3<_1, _2, ?>>)","171":"Tuple3::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends _3Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple3<_1, _2, ?>>>)","172":"Tuple3::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends _3Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple3<_1, _2, ?>>>)","173":"Tuple3::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends _3Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple3<_1, _2, ?>>>)","174":"Tuple3::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends _3Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple3<_1, _2, ?>>>)","175":"Tuple3::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends _3Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple3<_1, _2, ?>>>)","180":"Tuple3::::discardL(com.jnape.palatable.lambda.functor.Applicative<_3Prime, com.jnape.palatable.lambda.adt.hlist.Tuple3<_1, _2, ?>>)","181":"Tuple3::::discardL(com.jnape.palatable.lambda.functor.Applicative<_3Prime, com.jnape.palatable.lambda.adt.hlist.Tuple3<_1, _2, ?>>)","182":"Tuple3::::discardL(com.jnape.palatable.lambda.functor.Applicative<_3Prime, com.jnape.palatable.lambda.adt.hlist.Tuple3<_1, _2, ?>>)","183":"Tuple3::::discardL(com.jnape.palatable.lambda.functor.Applicative<_3Prime, com.jnape.palatable.lambda.adt.hlist.Tuple3<_1, _2, ?>>)","188":"Tuple3::::discardR(com.jnape.palatable.lambda.functor.Applicative<_3Prime, com.jnape.palatable.lambda.adt.hlist.Tuple3<_1, _2, ?>>)","189":"Tuple3::::discardR(com.jnape.palatable.lambda.functor.Applicative<_3Prime, com.jnape.palatable.lambda.adt.hlist.Tuple3<_1, _2, ?>>)","190":"Tuple3::::discardR(com.jnape.palatable.lambda.functor.Applicative<_3Prime, com.jnape.palatable.lambda.adt.hlist.Tuple3<_1, _2, ?>>)","191":"Tuple3::::discardR(com.jnape.palatable.lambda.functor.Applicative<_3Prime, com.jnape.palatable.lambda.adt.hlist.Tuple3<_1, _2, ?>>)","196":"Tuple3::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends com.jnape.palatable.lambda.monad.Monad<_3Prime, com.jnape.palatable.lambda.adt.hlist.Tuple3<_1, _2, ?>>>)","197":"Tuple3::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends com.jnape.palatable.lambda.monad.Monad<_3Prime, com.jnape.palatable.lambda.adt.hlist.Tuple3<_1, _2, ?>>>)","198":"Tuple3::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends com.jnape.palatable.lambda.monad.Monad<_3Prime, com.jnape.palatable.lambda.adt.hlist.Tuple3<_1, _2, ?>>>)","199":"Tuple3::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends com.jnape.palatable.lambda.monad.Monad<_3Prime, com.jnape.palatable.lambda.adt.hlist.Tuple3<_1, _2, ?>>>)","200":"Tuple3::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends com.jnape.palatable.lambda.monad.Monad<_3Prime, com.jnape.palatable.lambda.adt.hlist.Tuple3<_1, _2, ?>>>)","205":"Tuple3::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_3, _3Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple3<_1, _2, ?>>>)","206":"Tuple3::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_3, _3Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple3<_1, _2, ?>>>)","207":"Tuple3::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_3, _3Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple3<_1, _2, ?>>>)","208":"Tuple3::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_3, _3Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple3<_1, _2, ?>>>)","209":"Tuple3::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_3, _3Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple3<_1, _2, ?>>>)","214":"Tuple3::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends com.jnape.palatable.lambda.functor.Applicative<_3Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","215":"Tuple3::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends com.jnape.palatable.lambda.functor.Applicative<_3Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","216":"Tuple3::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends com.jnape.palatable.lambda.functor.Applicative<_3Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","217":"Tuple3::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends com.jnape.palatable.lambda.functor.Applicative<_3Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","218":"Tuple3::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends com.jnape.palatable.lambda.functor.Applicative<_3Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","219":"Tuple3::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends com.jnape.palatable.lambda.functor.Applicative<_3Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","220":"Tuple3::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _3, ? extends com.jnape.palatable.lambda.functor.Applicative<_3Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","228":"Tuple3::::init()","229":"Tuple3::::init()","230":"Tuple3::::init()","240":"Tuple3::::fill(A)","241":"Tuple3::::fill(A)","242":"Tuple3::::fill(A)","252":"Tuple3::::fromIterable(java.lang.Iterable<A>)","253":"Tuple3::::fromIterable(java.lang.Iterable<A>)","254":"Tuple3::::fromIterable(java.lang.Iterable<A>)","265":"Tuple3::::pureTuple(_1,_2)","266":"Tuple3::::pureTuple(_1,_2)","267":"Tuple3::::pureTuple(_1,_2)","268":"Tuple3::::pureTuple(_1,_2)","269":"Tuple3::::pureTuple(_1,_2)","270":"Tuple3::::pureTuple(_1,_2)","271":"Tuple3::::pureTuple(_1,_2)","272":"Tuple3::::pureTuple(_1,_2)"},"test_reverse_method_lines_dic":{"35":"Tuple3Test::::setUp()","36":"Tuple3Test::::setUp()","37":"Tuple3Test::::setUp()","38":"Tuple3Test::::setUp()","40":"Tuple3Test::::testSubject()","41":"Tuple3Test::::testSubject()","42":"Tuple3Test::::testSubject()","43":"Tuple3Test::::testSubject()","44":"Tuple3Test::::testSubject()","45":"Tuple3Test::::testSubject()","46":"Tuple3Test::::testSubject()","47":"Tuple3Test::::testSubject()","48":"Tuple3Test::::testSubject()","49":"Tuple3Test::::testSubject()","51":"Tuple3Test::::head()","52":"Tuple3Test::::head()","53":"Tuple3Test::::head()","54":"Tuple3Test::::head()","56":"Tuple3Test::::tail()","57":"Tuple3Test::::tail()","58":"Tuple3Test::::tail()","59":"Tuple3Test::::tail()","61":"Tuple3Test::::cons()","62":"Tuple3Test::::cons()","63":"Tuple3Test::::cons()","64":"Tuple3Test::::cons()","66":"Tuple3Test::::snoc()","67":"Tuple3Test::::snoc()","68":"Tuple3Test::::snoc()","69":"Tuple3Test::::snoc()","70":"Tuple3Test::::snoc()","72":"Tuple3Test::::accessors()","73":"Tuple3Test::::accessors()","74":"Tuple3Test::::accessors()","75":"Tuple3Test::::accessors()","76":"Tuple3Test::::accessors()","77":"Tuple3Test::::accessors()","79":"Tuple3Test::::randomAccess()","80":"Tuple3Test::::randomAccess()","81":"Tuple3Test::::randomAccess()","82":"Tuple3Test::::randomAccess()","83":"Tuple3Test::::randomAccess()","84":"Tuple3Test::::randomAccess()","85":"Tuple3Test::::randomAccess()","86":"Tuple3Test::::randomAccess()","87":"Tuple3Test::::randomAccess()","88":"Tuple3Test::::randomAccess()","89":"Tuple3Test::::randomAccess()","90":"Tuple3Test::::randomAccess()","92":"Tuple3Test::::into()","93":"Tuple3Test::::into()","94":"Tuple3Test::::into()","95":"Tuple3Test::::into()","96":"Tuple3Test::::into()","98":"Tuple3Test::::fill()","99":"Tuple3Test::::fill()","100":"Tuple3Test::::fill()","101":"Tuple3Test::::fill()","103":"Tuple3Test::::zipPrecedence()","104":"Tuple3Test::::zipPrecedence()","105":"Tuple3Test::::zipPrecedence()","106":"Tuple3Test::::zipPrecedence()","107":"Tuple3Test::::zipPrecedence()","108":"Tuple3Test::::zipPrecedence()","110":"Tuple3Test::::flatMapPrecedence()","111":"Tuple3Test::::flatMapPrecedence()","112":"Tuple3Test::::flatMapPrecedence()","113":"Tuple3Test::::flatMapPrecedence()","114":"Tuple3Test::::flatMapPrecedence()","115":"Tuple3Test::::flatMapPrecedence()","117":"Tuple3Test::::fromIterable()","118":"Tuple3Test::::fromIterable()","119":"Tuple3Test::::fromIterable()","120":"Tuple3Test::::fromIterable()","121":"Tuple3Test::::fromIterable()","122":"Tuple3Test::::fromIterable()","124":"Tuple3Test::::staticPure()","125":"Tuple3Test::::staticPure()","126":"Tuple3Test::::staticPure()","127":"Tuple3Test::::staticPure()","128":"Tuple3Test::::staticPure()","130":"Tuple3Test::::init()","131":"Tuple3Test::::init()","132":"Tuple3Test::::init()","133":"Tuple3Test::::init()","134":"Tuple3Test::::init()"},"tests":[{"test_lines":[35,38],"covered_lines":[45,46,47,48,49]},{"test_lines":[40,49],"covered_lines":[45,46,47,48,49]},{"test_lines":[51,54],"covered_lines":[45,46,47,48,49]},{"test_lines":[56,59],"covered_lines":[45,46,47,48,49]},{"test_lines":[61,64],"covered_lines":[45,46,47,48,49,56,75,83,91]},{"test_lines":[66,70],"covered_lines":[45,46,47,48,49,56,67,75,83,91]},{"test_lines":[72,77],"covered_lines":[45,46,47,48,49,75,83,91]},{"test_lines":[79,90],"covered_lines":[45,46,47,48,49,75,83,91]},{"test_lines":[92,96],"covered_lines":[45,46,47,48,49,75,83,91]},{"test_lines":[98,101],"covered_lines":[45,46,47,48,49,241]},{"test_lines":[103,108],"covered_lines":[45,46,47,48,49,75,91,139,148,165]},{"test_lines":[110,115],"covered_lines":[45,46,47,48,49,156,199]},{"test_lines":[117,122],"covered_lines":[45,46,47,48,49,253]},{"test_lines":[124,128],"covered_lines":[45,46,47,48,49,266,269]},{"test_lines":[130,134],"covered_lines":[45,46,47,48,49,107,229]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/adt/hlist/Tuple6.java":{"class_content":["package com.jnape.palatable.lambda.adt.hlist;\n","\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.adt.hlist.HList.HCons;\n","import com.jnape.palatable.lambda.adt.product.Product6;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.builtin.fn2.Into;\n","import com.jnape.palatable.lambda.functions.recursion.RecursiveResult;\n","import com.jnape.palatable.lambda.functions.specialized.Pure;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","import com.jnape.palatable.lambda.functor.Bifunctor;\n","import com.jnape.palatable.lambda.functor.builtin.Lazy;\n","import com.jnape.palatable.lambda.monad.Monad;\n","import com.jnape.palatable.lambda.monad.MonadRec;\n","import com.jnape.palatable.lambda.traversable.Traversable;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Uncons.uncons;\n","import static com.jnape.palatable.lambda.functions.recursion.Trampoline.trampoline;\n","\n","/**\n"," * A 6-element tuple product type, implemented as a specialized HList. Supports random access.\n"," *\n"," * @param <_1> The first slot element type\n"," * @param <_2> The second slot element type\n"," * @param <_3> The third slot element type\n"," * @param <_4> The fourth slot element type\n"," * @param <_5> The fifth slot element type\n"," * @param <_6> The sixth slot element type\n"," * @see Product6\n"," * @see HList\n"," * @see SingletonHList\n"," * @see Tuple2\n"," * @see Tuple3\n"," * @see Tuple4\n"," * @see Tuple5\n"," */\n","public class Tuple6<_1, _2, _3, _4, _5, _6> extends HCons<_1, Tuple5<_2, _3, _4, _5, _6>> implements\n","        Product6<_1, _2, _3, _4, _5, _6>,\n","        MonadRec<_6, Tuple6<_1, _2, _3, _4, _5, ?>>,\n","        Bifunctor<_5, _6, Tuple6<_1, _2, _3, _4, ?, ?>>,\n","        Traversable<_6, Tuple6<_1, _2, _3, _4, _5, ?>> {\n","\n","    private final _1 _1;\n","    private final _2 _2;\n","    private final _3 _3;\n","    private final _4 _4;\n","    private final _5 _5;\n","    private final _6 _6;\n","\n","    Tuple6(_1 _1, Tuple5<_2, _3, _4, _5, _6> tail) {\n","        super(_1, tail);\n","        this._1 = _1;\n","        _2      = tail._1();\n","        _3      = tail._2();\n","        _4      = tail._3();\n","        _5      = tail._4();\n","        _6      = tail._5();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_0> Tuple7<_0, _1, _2, _3, _4, _5, _6> cons(_0 _0) {\n","        return new Tuple7<>(_0, this);\n","    }\n","\n","    /**\n","     * Snoc an element onto the back of this {@link Tuple6}.\n","     *\n","     * @param _7   the new last element\n","     * @param <_7> the new last element type\n","     * @return the new {@link Tuple7}\n","     */\n","    public <_7> Tuple7<_1, _2, _3, _4, _5, _6, _7> snoc(_7 _7) {\n","        return tuple(_1, _2, _3, _4, _5, _6, _7);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public _1 _1() {\n","        return _1;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public _2 _2() {\n","        return _2;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public _3 _3() {\n","        return _3;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public _4 _4() {\n","        return _4;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public _5 _5() {\n","        return _5;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public _6 _6() {\n","        return _6;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple6<_2, _3, _4, _5, _6, _1> rotateL6() {\n","        return tuple(_2, _3, _4, _5, _6, _1);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple6<_6, _1, _2, _3, _4, _5> rotateR6() {\n","        return tuple(_6, _1, _2, _3, _4, _5);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple6<_2, _3, _4, _5, _1, _6> rotateL5() {\n","        return tuple(_2, _3, _4, _5, _1, _6);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple6<_5, _1, _2, _3, _4, _6> rotateR5() {\n","        return tuple(_5, _1, _2, _3, _4, _6);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple6<_2, _3, _4, _1, _5, _6> rotateL4() {\n","        return tuple(_2, _3, _4, _1, _5, _6);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple6<_4, _1, _2, _3, _5, _6> rotateR4() {\n","        return tuple(_4, _1, _2, _3, _5, _6);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple6<_2, _3, _1, _4, _5, _6> rotateL3() {\n","        return tuple(_2, _3, _1, _4, _5, _6);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple6<_3, _1, _2, _4, _5, _6> rotateR3() {\n","        return tuple(_3, _1, _2, _4, _5, _6);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple6<_2, _1, _3, _4, _5, _6> invert() {\n","        return tuple(_2, _1, _3, _4, _5, _6);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_6Prime> Tuple6<_1, _2, _3, _4, _5, _6Prime> fmap(Fn1<? super _6, ? extends _6Prime> fn) {\n","        return MonadRec.super.<_6Prime>fmap(fn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_5Prime> Tuple6<_1, _2, _3, _4, _5Prime, _6> biMapL(Fn1<? super _5, ? extends _5Prime> fn) {\n","        return (Tuple6<_1, _2, _3, _4, _5Prime, _6>) Bifunctor.super.<_5Prime>biMapL(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_6Prime> Tuple6<_1, _2, _3, _4, _5, _6Prime> biMapR(Fn1<? super _6, ? extends _6Prime> fn) {\n","        return (Tuple6<_1, _2, _3, _4, _5, _6Prime>) Bifunctor.super.<_6Prime>biMapR(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_5Prime, _6Prime> Tuple6<_1, _2, _3, _4, _5Prime, _6Prime> biMap(\n","            Fn1<? super _5, ? extends _5Prime> lFn,\n","            Fn1<? super _6, ? extends _6Prime> rFn) {\n","        return new Tuple6<>(_1(), tail().biMap(lFn, rFn));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_6Prime> Tuple6<_1, _2, _3, _4, _5, _6Prime> pure(_6Prime _6Prime) {\n","        return tuple(_1, _2, _3, _4, _5, _6Prime);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_6Prime> Tuple6<_1, _2, _3, _4, _5, _6Prime> zip(\n","            Applicative<Fn1<? super _6, ? extends _6Prime>, Tuple6<_1, _2, _3, _4, _5, ?>> appFn) {\n","        return MonadRec.super.zip(appFn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_6Prime> Lazy<Tuple6<_1, _2, _3, _4, _5, _6Prime>> lazyZip(\n","            Lazy<? extends Applicative<Fn1<? super _6, ? extends _6Prime>, Tuple6<_1, _2, _3, _4, _5, ?>>> lazyAppFn) {\n","        return MonadRec.super.lazyZip(lazyAppFn).fmap(Monad<_6Prime, Tuple6<_1, _2, _3, _4, _5, ?>>::coerce);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_6Prime> Tuple6<_1, _2, _3, _4, _5, _6Prime> discardL(\n","            Applicative<_6Prime, Tuple6<_1, _2, _3, _4, _5, ?>> appB) {\n","        return MonadRec.super.discardL(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_6Prime> Tuple6<_1, _2, _3, _4, _5, _6> discardR(Applicative<_6Prime, Tuple6<_1, _2, _3, _4, _5, ?>> appB) {\n","        return MonadRec.super.discardR(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_6Prime> Tuple6<_1, _2, _3, _4, _5, _6Prime> flatMap(\n","            Fn1<? super _6, ? extends Monad<_6Prime, Tuple6<_1, _2, _3, _4, _5, ?>>> f) {\n","        return pure(f.apply(_6).<Tuple6<_1, _2, _3, _4, _5, _6Prime>>coerce()._6());\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_6Prime> Tuple6<_1, _2, _3, _4, _5, _6Prime> trampolineM(\n","            Fn1<? super _6, ? extends MonadRec<RecursiveResult<_6, _6Prime>, Tuple6<_1, _2, _3, _4, _5, ?>>> fn) {\n","        return fmap(trampoline(x -> fn.apply(x).<Tuple6<_1, _2, _3, _4, _5, RecursiveResult<_6, _6Prime>>>coerce()\n","                ._6()));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_6Prime, App extends Applicative<?, App>, TravB extends Traversable<_6Prime, Tuple6<_1, _2, _3, _4, _5, ?>>,\n","            AppTrav extends Applicative<TravB, App>> AppTrav traverse(\n","            Fn1<? super _6, ? extends Applicative<_6Prime, App>> fn,\n","            Fn1<? super TravB, ? extends AppTrav> pure) {\n","        return fn.apply(_6).fmap(_6Prime -> fmap(constantly(_6Prime))).<TravB>fmap(Applicative::coerce).coerce();\n","    }\n","\n","    /**\n","     * Returns a <code>{@link Tuple5}&lt;_1, _2, _3, _4, _5&gt;</code> of all the elements of this\n","     * <code>{@link Tuple6}&lt;_1, _2, _3, _4, _5, _6&gt;</code> except the last.\n","     *\n","     * @return The {@link Tuple5}&lt;_1, _2, _3, _4, _5&gt; representing all but the last element\n","     */\n","    public Tuple5<_1, _2, _3, _4, _5> init() {\n","        return rotateR6().tail();\n","    }\n","\n","    /**\n","     * Given a value of type <code>A</code>, produced an instance of this tuple with each slot set to that value.\n","     *\n","     * @param a   the value to fill the tuple with\n","     * @param <A> the value type\n","     * @return the filled tuple\n","     * @see Tuple2#fill\n","     */\n","    public static <A> Tuple6<A, A, A, A, A, A> fill(A a) {\n","        return tuple(a, a, a, a, a, a);\n","    }\n","\n","    /**\n","     * Return {@link Maybe#just(Object) just} the first six elements from the given {@link Iterable}, or\n","     * {@link Maybe#nothing() nothing} if there are less than six elements.\n","     *\n","     * @param as  the {@link Iterable}\n","     * @param <A> the {@link Iterable} element type\n","     * @return {@link Maybe} the first six elements of the given {@link Iterable}\n","     */\n","    public static <A> Maybe<Tuple6<A, A, A, A, A, A>> fromIterable(Iterable<A> as) {\n","        return uncons(as).flatMap(Into.into((head, tail) -> Tuple5.fromIterable(tail).fmap(t -> t.cons(head))));\n","    }\n","\n","    /**\n","     * The canonical {@link Pure} instance for {@link Tuple6}.\n","     *\n","     * @param _1   the head element\n","     * @param _2   the second element\n","     * @param _3   the third element\n","     * @param _4   the fourth element\n","     * @param _5   the fifth element\n","     * @param <_1> the head element type\n","     * @param <_2> the second element type\n","     * @param <_3> the third element type\n","     * @param <_4> the fourth element type\n","     * @param <_5> the fifth element type\n","     * @return the {@link Pure} instance\n","     */\n","    public static <_1, _2, _3, _4, _5> Pure<Tuple6<_1, _2, _3, _4, _5, ?>> pureTuple(_1 _1, _2 _2, _3 _3, _4 _4,\n","                                                                                     _5 _5) {\n","        return new Pure<Tuple6<_1, _2, _3, _4, _5, ?>>() {\n","            @Override\n","            public <_6> Tuple6<_1, _2, _3, _4, _5, _6> checkedApply(_6 _6) {\n","                return tuple(_1, _2, _3, _4, _5, _6);\n","            }\n","        };\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.adt.hlist;\n","\n","import com.jnape.palatable.lambda.adt.hlist.HList.HCons;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Before;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.ApplicativeLaws;\n","import testsupport.traits.BifunctorLaws;\n","import testsupport.traits.FunctorLaws;\n","import testsupport.traits.MonadLaws;\n","import testsupport.traits.MonadRecLaws;\n","import testsupport.traits.TraversableLaws;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.adt.hlist.Tuple6.pureTuple;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Repeat.repeat;\n","import static java.util.Collections.emptyList;\n","import static java.util.Collections.singletonList;\n","import static org.junit.Assert.assertEquals;\n","import static org.mockito.Mockito.spy;\n","import static org.mockito.Mockito.times;\n","import static org.mockito.Mockito.verify;\n","import static org.mockito.Mockito.verifyNoMoreInteractions;\n","\n","@RunWith(Traits.class)\n","public class Tuple6Test {\n","\n","    private Tuple6<Float, Integer, String, Character, Boolean, Long> tuple6;\n","\n","    @Before\n","    public void setUp() {\n","        tuple6 = new Tuple6<>(2.0f, new Tuple5<>(1, new Tuple4<>(\"2\", new Tuple3<>('3', new Tuple2<>(false, new SingletonHList<>(5L))))));\n","    }\n","\n","    @TestTraits({\n","            FunctorLaws.class,\n","            ApplicativeLaws.class,\n","            MonadLaws.class,\n","            MonadRecLaws.class,\n","            BifunctorLaws.class,\n","            TraversableLaws.class})\n","    public Tuple6<?, ?, ?, ?, ?, ?> testSubject() {\n","        return tuple(\"one\", 2, 3d, 4f, '5', (byte) 6);\n","    }\n","\n","    @Test\n","    public void head() {\n","        assertEquals((Float) 2.0F, tuple6.head());\n","    }\n","\n","    @Test\n","    public void tail() {\n","        assertEquals(new Tuple5<>(1, new Tuple4<>(\"2\", new Tuple3<>('3', new Tuple2<>(false, new SingletonHList<>(5L))))),\n","                     tuple6.tail());\n","    }\n","\n","    @Test\n","    public void cons() {\n","        assertEquals(new HCons<>(0, tuple6), tuple6.cons(0));\n","    }\n","\n","    @Test\n","    public void snoc() {\n","        assertEquals(tuple(5L, \"a\", 7, \"b\", 11, \"c\", 13), tuple(5L, \"a\", 7, \"b\", 11, \"c\").snoc(13));\n","    }\n","\n","    @Test\n","    public void accessors() {\n","        assertEquals((Float) 2.0f, tuple6._1());\n","        assertEquals((Integer) 1, tuple6._2());\n","        assertEquals(\"2\", tuple6._3());\n","        assertEquals((Character) '3', tuple6._4());\n","        assertEquals(false, tuple6._5());\n","        assertEquals((Long) 5L, tuple6._6());\n","    }\n","\n","    @Test\n","    public void randomAccess() {\n","        Tuple5<String, String, String, String, String>         spiedTail = spy(tuple(\"second\", \"third\", \"fourth\", \"fifth\", \"sixth\"));\n","        Tuple6<String, String, String, String, String, String> tuple6    = new Tuple6<>(\"first\", spiedTail);\n","\n","        verify(spiedTail, times(1))._1();\n","        verify(spiedTail, times(1))._2();\n","        verify(spiedTail, times(1))._3();\n","        verify(spiedTail, times(1))._4();\n","        verify(spiedTail, times(1))._5();\n","        tuple6._1();\n","        tuple6._2();\n","        tuple6._3();\n","        tuple6._4();\n","        tuple6._5();\n","        tuple6._6();\n","        verifyNoMoreInteractions(spiedTail);\n","    }\n","\n","    @Test\n","    public void into() {\n","        Tuple6<String, Integer, Double, Boolean, Float, Short> tuple = tuple(\"foo\", 1, 2.0d, false, 3f, (short) 4);\n","        assertEquals(\"foo12.0false3.04\", tuple.into((s, i, d, b, f, sh) -> s + i + d + b + f + sh));\n","    }\n","\n","    @Test\n","    public void fill() {\n","        assertEquals(tuple(\"foo\", \"foo\", \"foo\", \"foo\", \"foo\", \"foo\"), Tuple6.fill(\"foo\"));\n","    }\n","\n","    @Test\n","    public void zipPrecedence() {\n","        Tuple6<String, Integer, Integer, Integer, Integer, Integer> a =\n","                tuple(\"foo\", 1, 2, 3, 4, 5);\n","        Tuple6<String, Integer, Integer, Integer, Integer, Fn1<? super Integer, ? extends Integer>> b =\n","                tuple(\"bar\", 2, 3, 4, 5, x -> x + 1);\n","        assertEquals(tuple(\"foo\", 1, 2, 3, 4, 6), a.zip(b));\n","    }\n","\n","    @Test\n","    public void flatMapPrecedence() {\n","        Tuple6<String, Integer, Integer, Integer, Integer, Integer>               a = tuple(\"foo\", 1, 2, 3, 4, 5);\n","        Fn1<Integer, Tuple6<String, Integer, Integer, Integer, Integer, Integer>> b = x -> tuple(\"bar\", 2, 3, 4, 5, x + 1);\n","        assertEquals(tuple(\"foo\", 1, 2, 3, 4, 6), a.flatMap(b));\n","    }\n","\n","    @Test\n","    public void fromIterable() {\n","        assertEquals(nothing(), Tuple6.fromIterable(emptyList()));\n","        assertEquals(nothing(), Tuple6.fromIterable(singletonList(1)));\n","        assertEquals(just(tuple(1, 1, 1, 1, 1, 1)), Tuple6.fromIterable(repeat(1)));\n","    }\n","\n","    @Test\n","    public void staticPure() {\n","        Tuple6<Integer, String, Character, Boolean, Float, Byte> tuple = pureTuple(1, \"2\", '3', true, 5f).apply((byte) 6);\n","        assertEquals(tuple(1, \"2\", '3', true, 5f, (byte) 6), tuple);\n","    }\n","\n","    @Test\n","    public void init() {\n","        assertEquals(tuple(1, 2, 3, 4, 5),\n","                     tuple(1, 2, 3, 4, 5, 6).init());\n","    }\n","}"],"method_lines_dic":{"Tuple6::::cons(_0)":[64,67],"Tuple6::::snoc(_7)":[76,78],"Tuple6::::_1()":[83,86],"Tuple6::::_2()":[91,94],"Tuple6::::_3()":[99,102],"Tuple6::::_4()":[107,110],"Tuple6::::_5()":[115,118],"Tuple6::::_6()":[123,126],"Tuple6::::rotateL6()":[131,134],"Tuple6::::rotateR6()":[139,142],"Tuple6::::rotateL5()":[147,150],"Tuple6::::rotateR5()":[155,158],"Tuple6::::rotateL4()":[163,166],"Tuple6::::rotateR4()":[171,174],"Tuple6::::rotateL3()":[179,182],"Tuple6::::rotateR3()":[187,190],"Tuple6::::invert()":[195,198],"Tuple6::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>)":[203,206],"Tuple6::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>)":[211,214],"Tuple6::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>)":[219,222],"Tuple6::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>)":[227,232],"Tuple6::::pure(_6Prime)":[237,240],"Tuple6::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple6<_1, _2, _3, _4, _5, ?>>)":[245,249],"Tuple6::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple6<_1, _2, _3, _4, _5, ?>>>)":[254,258],"Tuple6::::discardL(com.jnape.palatable.lambda.functor.Applicative<_6Prime, com.jnape.palatable.lambda.adt.hlist.Tuple6<_1, _2, _3, _4, _5, ?>>)":[263,267],"Tuple6::::discardR(com.jnape.palatable.lambda.functor.Applicative<_6Prime, com.jnape.palatable.lambda.adt.hlist.Tuple6<_1, _2, _3, _4, _5, ?>>)":[272,275],"Tuple6::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends com.jnape.palatable.lambda.monad.Monad<_6Prime, com.jnape.palatable.lambda.adt.hlist.Tuple6<_1, _2, _3, _4, _5, ?>>>)":[280,284],"Tuple6::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_6, _6Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple6<_1, _2, _3, _4, _5, ?>>>)":[289,294],"Tuple6::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends com.jnape.palatable.lambda.functor.Applicative<_6Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)":[299,305],"Tuple6::::init()":[313,315],"Tuple6::::fill(A)":[325,327],"Tuple6::::fromIterable(java.lang.Iterable<A>)":[337,339],"Tuple6::::pureTuple(_1,_2,_3,_4,_5)":[356,364]},"test_method_lines_dic":{"Tuple6Test::::setUp()":[35,38],"Tuple6Test::::testSubject()":[40,49],"Tuple6Test::::head()":[51,54],"Tuple6Test::::tail()":[56,60],"Tuple6Test::::cons()":[62,65],"Tuple6Test::::snoc()":[67,70],"Tuple6Test::::accessors()":[72,80],"Tuple6Test::::randomAccess()":[82,99],"Tuple6Test::::into()":[101,105],"Tuple6Test::::fill()":[107,110],"Tuple6Test::::zipPrecedence()":[112,119],"Tuple6Test::::flatMapPrecedence()":[121,126],"Tuple6Test::::fromIterable()":[128,133],"Tuple6Test::::staticPure()":[135,139],"Tuple6Test::::init()":[141,145]},"reverse_method_lines_dic":{"64":"Tuple6::::cons(_0)","65":"Tuple6::::cons(_0)","66":"Tuple6::::cons(_0)","67":"Tuple6::::cons(_0)","76":"Tuple6::::snoc(_7)","77":"Tuple6::::snoc(_7)","78":"Tuple6::::snoc(_7)","83":"Tuple6::::_1()","84":"Tuple6::::_1()","85":"Tuple6::::_1()","86":"Tuple6::::_1()","91":"Tuple6::::_2()","92":"Tuple6::::_2()","93":"Tuple6::::_2()","94":"Tuple6::::_2()","99":"Tuple6::::_3()","100":"Tuple6::::_3()","101":"Tuple6::::_3()","102":"Tuple6::::_3()","107":"Tuple6::::_4()","108":"Tuple6::::_4()","109":"Tuple6::::_4()","110":"Tuple6::::_4()","115":"Tuple6::::_5()","116":"Tuple6::::_5()","117":"Tuple6::::_5()","118":"Tuple6::::_5()","123":"Tuple6::::_6()","124":"Tuple6::::_6()","125":"Tuple6::::_6()","126":"Tuple6::::_6()","131":"Tuple6::::rotateL6()","132":"Tuple6::::rotateL6()","133":"Tuple6::::rotateL6()","134":"Tuple6::::rotateL6()","139":"Tuple6::::rotateR6()","140":"Tuple6::::rotateR6()","141":"Tuple6::::rotateR6()","142":"Tuple6::::rotateR6()","147":"Tuple6::::rotateL5()","148":"Tuple6::::rotateL5()","149":"Tuple6::::rotateL5()","150":"Tuple6::::rotateL5()","155":"Tuple6::::rotateR5()","156":"Tuple6::::rotateR5()","157":"Tuple6::::rotateR5()","158":"Tuple6::::rotateR5()","163":"Tuple6::::rotateL4()","164":"Tuple6::::rotateL4()","165":"Tuple6::::rotateL4()","166":"Tuple6::::rotateL4()","171":"Tuple6::::rotateR4()","172":"Tuple6::::rotateR4()","173":"Tuple6::::rotateR4()","174":"Tuple6::::rotateR4()","179":"Tuple6::::rotateL3()","180":"Tuple6::::rotateL3()","181":"Tuple6::::rotateL3()","182":"Tuple6::::rotateL3()","187":"Tuple6::::rotateR3()","188":"Tuple6::::rotateR3()","189":"Tuple6::::rotateR3()","190":"Tuple6::::rotateR3()","195":"Tuple6::::invert()","196":"Tuple6::::invert()","197":"Tuple6::::invert()","198":"Tuple6::::invert()","203":"Tuple6::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>)","204":"Tuple6::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>)","205":"Tuple6::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>)","206":"Tuple6::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>)","211":"Tuple6::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>)","212":"Tuple6::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>)","213":"Tuple6::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>)","214":"Tuple6::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>)","219":"Tuple6::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>)","220":"Tuple6::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>)","221":"Tuple6::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>)","222":"Tuple6::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>)","227":"Tuple6::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>)","228":"Tuple6::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>)","229":"Tuple6::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>)","230":"Tuple6::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>)","231":"Tuple6::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>)","232":"Tuple6::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>)","237":"Tuple6::::pure(_6Prime)","238":"Tuple6::::pure(_6Prime)","239":"Tuple6::::pure(_6Prime)","240":"Tuple6::::pure(_6Prime)","245":"Tuple6::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple6<_1, _2, _3, _4, _5, ?>>)","246":"Tuple6::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple6<_1, _2, _3, _4, _5, ?>>)","247":"Tuple6::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple6<_1, _2, _3, _4, _5, ?>>)","248":"Tuple6::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple6<_1, _2, _3, _4, _5, ?>>)","249":"Tuple6::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple6<_1, _2, _3, _4, _5, ?>>)","254":"Tuple6::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple6<_1, _2, _3, _4, _5, ?>>>)","255":"Tuple6::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple6<_1, _2, _3, _4, _5, ?>>>)","256":"Tuple6::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple6<_1, _2, _3, _4, _5, ?>>>)","257":"Tuple6::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple6<_1, _2, _3, _4, _5, ?>>>)","258":"Tuple6::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends _6Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple6<_1, _2, _3, _4, _5, ?>>>)","263":"Tuple6::::discardL(com.jnape.palatable.lambda.functor.Applicative<_6Prime, com.jnape.palatable.lambda.adt.hlist.Tuple6<_1, _2, _3, _4, _5, ?>>)","264":"Tuple6::::discardL(com.jnape.palatable.lambda.functor.Applicative<_6Prime, com.jnape.palatable.lambda.adt.hlist.Tuple6<_1, _2, _3, _4, _5, ?>>)","265":"Tuple6::::discardL(com.jnape.palatable.lambda.functor.Applicative<_6Prime, com.jnape.palatable.lambda.adt.hlist.Tuple6<_1, _2, _3, _4, _5, ?>>)","266":"Tuple6::::discardL(com.jnape.palatable.lambda.functor.Applicative<_6Prime, com.jnape.palatable.lambda.adt.hlist.Tuple6<_1, _2, _3, _4, _5, ?>>)","267":"Tuple6::::discardL(com.jnape.palatable.lambda.functor.Applicative<_6Prime, com.jnape.palatable.lambda.adt.hlist.Tuple6<_1, _2, _3, _4, _5, ?>>)","272":"Tuple6::::discardR(com.jnape.palatable.lambda.functor.Applicative<_6Prime, com.jnape.palatable.lambda.adt.hlist.Tuple6<_1, _2, _3, _4, _5, ?>>)","273":"Tuple6::::discardR(com.jnape.palatable.lambda.functor.Applicative<_6Prime, com.jnape.palatable.lambda.adt.hlist.Tuple6<_1, _2, _3, _4, _5, ?>>)","274":"Tuple6::::discardR(com.jnape.palatable.lambda.functor.Applicative<_6Prime, com.jnape.palatable.lambda.adt.hlist.Tuple6<_1, _2, _3, _4, _5, ?>>)","275":"Tuple6::::discardR(com.jnape.palatable.lambda.functor.Applicative<_6Prime, com.jnape.palatable.lambda.adt.hlist.Tuple6<_1, _2, _3, _4, _5, ?>>)","280":"Tuple6::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends com.jnape.palatable.lambda.monad.Monad<_6Prime, com.jnape.palatable.lambda.adt.hlist.Tuple6<_1, _2, _3, _4, _5, ?>>>)","281":"Tuple6::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends com.jnape.palatable.lambda.monad.Monad<_6Prime, com.jnape.palatable.lambda.adt.hlist.Tuple6<_1, _2, _3, _4, _5, ?>>>)","282":"Tuple6::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends com.jnape.palatable.lambda.monad.Monad<_6Prime, com.jnape.palatable.lambda.adt.hlist.Tuple6<_1, _2, _3, _4, _5, ?>>>)","283":"Tuple6::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends com.jnape.palatable.lambda.monad.Monad<_6Prime, com.jnape.palatable.lambda.adt.hlist.Tuple6<_1, _2, _3, _4, _5, ?>>>)","284":"Tuple6::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends com.jnape.palatable.lambda.monad.Monad<_6Prime, com.jnape.palatable.lambda.adt.hlist.Tuple6<_1, _2, _3, _4, _5, ?>>>)","289":"Tuple6::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_6, _6Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple6<_1, _2, _3, _4, _5, ?>>>)","290":"Tuple6::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_6, _6Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple6<_1, _2, _3, _4, _5, ?>>>)","291":"Tuple6::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_6, _6Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple6<_1, _2, _3, _4, _5, ?>>>)","292":"Tuple6::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_6, _6Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple6<_1, _2, _3, _4, _5, ?>>>)","293":"Tuple6::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_6, _6Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple6<_1, _2, _3, _4, _5, ?>>>)","294":"Tuple6::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_6, _6Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple6<_1, _2, _3, _4, _5, ?>>>)","299":"Tuple6::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends com.jnape.palatable.lambda.functor.Applicative<_6Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","300":"Tuple6::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends com.jnape.palatable.lambda.functor.Applicative<_6Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","301":"Tuple6::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends com.jnape.palatable.lambda.functor.Applicative<_6Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","302":"Tuple6::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends com.jnape.palatable.lambda.functor.Applicative<_6Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","303":"Tuple6::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends com.jnape.palatable.lambda.functor.Applicative<_6Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","304":"Tuple6::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends com.jnape.palatable.lambda.functor.Applicative<_6Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","305":"Tuple6::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _6, ? extends com.jnape.palatable.lambda.functor.Applicative<_6Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","313":"Tuple6::::init()","314":"Tuple6::::init()","315":"Tuple6::::init()","325":"Tuple6::::fill(A)","326":"Tuple6::::fill(A)","327":"Tuple6::::fill(A)","337":"Tuple6::::fromIterable(java.lang.Iterable<A>)","338":"Tuple6::::fromIterable(java.lang.Iterable<A>)","339":"Tuple6::::fromIterable(java.lang.Iterable<A>)","356":"Tuple6::::pureTuple(_1,_2,_3,_4,_5)","357":"Tuple6::::pureTuple(_1,_2,_3,_4,_5)","358":"Tuple6::::pureTuple(_1,_2,_3,_4,_5)","359":"Tuple6::::pureTuple(_1,_2,_3,_4,_5)","360":"Tuple6::::pureTuple(_1,_2,_3,_4,_5)","361":"Tuple6::::pureTuple(_1,_2,_3,_4,_5)","362":"Tuple6::::pureTuple(_1,_2,_3,_4,_5)","363":"Tuple6::::pureTuple(_1,_2,_3,_4,_5)","364":"Tuple6::::pureTuple(_1,_2,_3,_4,_5)"},"test_reverse_method_lines_dic":{"35":"Tuple6Test::::setUp()","36":"Tuple6Test::::setUp()","37":"Tuple6Test::::setUp()","38":"Tuple6Test::::setUp()","40":"Tuple6Test::::testSubject()","41":"Tuple6Test::::testSubject()","42":"Tuple6Test::::testSubject()","43":"Tuple6Test::::testSubject()","44":"Tuple6Test::::testSubject()","45":"Tuple6Test::::testSubject()","46":"Tuple6Test::::testSubject()","47":"Tuple6Test::::testSubject()","48":"Tuple6Test::::testSubject()","49":"Tuple6Test::::testSubject()","51":"Tuple6Test::::head()","52":"Tuple6Test::::head()","53":"Tuple6Test::::head()","54":"Tuple6Test::::head()","56":"Tuple6Test::::tail()","57":"Tuple6Test::::tail()","58":"Tuple6Test::::tail()","59":"Tuple6Test::::tail()","60":"Tuple6Test::::tail()","62":"Tuple6Test::::cons()","63":"Tuple6Test::::cons()","64":"Tuple6Test::::cons()","65":"Tuple6Test::::cons()","67":"Tuple6Test::::snoc()","68":"Tuple6Test::::snoc()","69":"Tuple6Test::::snoc()","70":"Tuple6Test::::snoc()","72":"Tuple6Test::::accessors()","73":"Tuple6Test::::accessors()","74":"Tuple6Test::::accessors()","75":"Tuple6Test::::accessors()","76":"Tuple6Test::::accessors()","77":"Tuple6Test::::accessors()","78":"Tuple6Test::::accessors()","79":"Tuple6Test::::accessors()","80":"Tuple6Test::::accessors()","82":"Tuple6Test::::randomAccess()","83":"Tuple6Test::::randomAccess()","84":"Tuple6Test::::randomAccess()","85":"Tuple6Test::::randomAccess()","86":"Tuple6Test::::randomAccess()","87":"Tuple6Test::::randomAccess()","88":"Tuple6Test::::randomAccess()","89":"Tuple6Test::::randomAccess()","90":"Tuple6Test::::randomAccess()","91":"Tuple6Test::::randomAccess()","92":"Tuple6Test::::randomAccess()","93":"Tuple6Test::::randomAccess()","94":"Tuple6Test::::randomAccess()","95":"Tuple6Test::::randomAccess()","96":"Tuple6Test::::randomAccess()","97":"Tuple6Test::::randomAccess()","98":"Tuple6Test::::randomAccess()","99":"Tuple6Test::::randomAccess()","101":"Tuple6Test::::into()","102":"Tuple6Test::::into()","103":"Tuple6Test::::into()","104":"Tuple6Test::::into()","105":"Tuple6Test::::into()","107":"Tuple6Test::::fill()","108":"Tuple6Test::::fill()","109":"Tuple6Test::::fill()","110":"Tuple6Test::::fill()","112":"Tuple6Test::::zipPrecedence()","113":"Tuple6Test::::zipPrecedence()","114":"Tuple6Test::::zipPrecedence()","115":"Tuple6Test::::zipPrecedence()","116":"Tuple6Test::::zipPrecedence()","117":"Tuple6Test::::zipPrecedence()","118":"Tuple6Test::::zipPrecedence()","119":"Tuple6Test::::zipPrecedence()","121":"Tuple6Test::::flatMapPrecedence()","122":"Tuple6Test::::flatMapPrecedence()","123":"Tuple6Test::::flatMapPrecedence()","124":"Tuple6Test::::flatMapPrecedence()","125":"Tuple6Test::::flatMapPrecedence()","126":"Tuple6Test::::flatMapPrecedence()","128":"Tuple6Test::::fromIterable()","129":"Tuple6Test::::fromIterable()","130":"Tuple6Test::::fromIterable()","131":"Tuple6Test::::fromIterable()","132":"Tuple6Test::::fromIterable()","133":"Tuple6Test::::fromIterable()","135":"Tuple6Test::::staticPure()","136":"Tuple6Test::::staticPure()","137":"Tuple6Test::::staticPure()","138":"Tuple6Test::::staticPure()","139":"Tuple6Test::::staticPure()","141":"Tuple6Test::::init()","142":"Tuple6Test::::init()","143":"Tuple6Test::::init()","144":"Tuple6Test::::init()","145":"Tuple6Test::::init()"},"tests":[{"test_lines":[35,38],"covered_lines":[52,53,54,55,56,57,58,59]},{"test_lines":[40,49],"covered_lines":[52,53,54,55,56,57,58,59]},{"test_lines":[51,54],"covered_lines":[52,53,54,55,56,57,58,59]},{"test_lines":[56,60],"covered_lines":[52,53,54,55,56,57,58,59]},{"test_lines":[62,65],"covered_lines":[52,53,54,55,56,57,58,59,66,85,93,101,109,117,125]},{"test_lines":[67,70],"covered_lines":[52,53,54,55,56,57,58,59,66,77,85,93,101,109,117,125]},{"test_lines":[72,80],"covered_lines":[52,53,54,55,56,57,58,59,85,93,101,109,117,125]},{"test_lines":[82,99],"covered_lines":[52,53,54,55,56,57,58,59,85,93,101,109,117,125]},{"test_lines":[101,105],"covered_lines":[52,53,54,55,56,57,58,59,85,93,101,109,117,125]},{"test_lines":[107,110],"covered_lines":[52,53,54,55,56,57,58,59,326]},{"test_lines":[112,119],"covered_lines":[52,53,54,55,56,57,58,59,125,205,239,248,283]},{"test_lines":[121,126],"covered_lines":[52,53,54,55,56,57,58,59,125,239,283]},{"test_lines":[128,133],"covered_lines":[52,53,54,55,56,57,58,59,338]},{"test_lines":[135,139],"covered_lines":[52,53,54,55,56,57,58,59,358,361]},{"test_lines":[141,145],"covered_lines":[52,53,54,55,56,57,58,59,141,314]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/adt/hlist/Tuple2.java":{"class_content":["package com.jnape.palatable.lambda.adt.hlist;\n","\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.adt.hlist.HList.HCons;\n","import com.jnape.palatable.lambda.adt.product.Product2;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.builtin.fn1.Head;\n","import com.jnape.palatable.lambda.functions.recursion.RecursiveResult;\n","import com.jnape.palatable.lambda.functions.specialized.Pure;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","import com.jnape.palatable.lambda.functor.Bifunctor;\n","import com.jnape.palatable.lambda.functor.builtin.Lazy;\n","import com.jnape.palatable.lambda.monad.Monad;\n","import com.jnape.palatable.lambda.monad.MonadRec;\n","import com.jnape.palatable.lambda.monad.MonadWriter;\n","import com.jnape.palatable.lambda.traversable.Traversable;\n","\n","import java.util.Map;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Id.id;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Uncons.uncons;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Both.both;\n","import static com.jnape.palatable.lambda.functions.recursion.Trampoline.trampoline;\n","\n","/**\n"," * A 2-element tuple product type, implemented as a specialized HList. Supports random access.\n"," *\n"," * @param <_1> The first slot element type\n"," * @param <_2> The second slot element type\n"," * @see Product2\n"," * @see HList\n"," * @see SingletonHList\n"," * @see Tuple3\n"," * @see Tuple4\n"," * @see Tuple5\n"," */\n","public class Tuple2<_1, _2> extends HCons<_1, SingletonHList<_2>> implements\n","        Product2<_1, _2>,\n","        MonadRec<_2, Tuple2<_1, ?>>,\n","        MonadWriter<_1, _2, Tuple2<_1, ?>>,\n","        Bifunctor<_1, _2, Tuple2<?, ?>>,\n","        Traversable<_2, Tuple2<_1, ?>> {\n","\n","    private final _1 _1;\n","    private final _2 _2;\n","\n","    Tuple2(_1 _1, SingletonHList<_2> tail) {\n","        super(_1, tail);\n","        this._1 = _1;\n","        _2      = tail.head();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_3> Tuple2<_1, Tuple2<_2, _3>> listens(Fn1<? super _1, ? extends _3> fn) {\n","        return fmap(both(id(), constantly(fn.apply(_1))));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple2<_1, _2> censor(Fn1<? super _1, ? extends _1> fn) {\n","        return biMapL(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_0> Tuple3<_0, _1, _2> cons(_0 _0) {\n","        return new Tuple3<>(_0, this);\n","    }\n","\n","    /**\n","     * Snoc an element onto the back of this {@link Tuple2}.\n","     *\n","     * @param _3   the new last element\n","     * @param <_3> the new last element type\n","     * @return the new {@link Tuple3}\n","     */\n","    public <_3> Tuple3<_1, _2, _3> snoc(_3 _3) {\n","        return tuple(_1, _2, _3);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public _1 _1() {\n","        return _1;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public _2 _2() {\n","        return _2;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public _1 getKey() {\n","        return _1();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public _2 getValue() {\n","        return _2();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public _2 setValue(_2 value) {\n","        throw new UnsupportedOperationException();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple2<_2, _1> invert() {\n","        return tuple(_2, _1);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_2Prime> Tuple2<_1, _2Prime> fmap(Fn1<? super _2, ? extends _2Prime> fn) {\n","        return MonadRec.super.<_2Prime>fmap(fn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_1Prime> Tuple2<_1Prime, _2> biMapL(Fn1<? super _1, ? extends _1Prime> fn) {\n","        return (Tuple2<_1Prime, _2>) Bifunctor.super.<_1Prime>biMapL(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_2Prime> Tuple2<_1, _2Prime> biMapR(Fn1<? super _2, ? extends _2Prime> fn) {\n","        return (Tuple2<_1, _2Prime>) Bifunctor.super.<_2Prime>biMapR(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_1Prime, _2Prime> Tuple2<_1Prime, _2Prime> biMap(Fn1<? super _1, ? extends _1Prime> lFn,\n","                                                             Fn1<? super _2, ? extends _2Prime> rFn) {\n","        return new Tuple2<>(lFn.apply(_1()), tail().fmap(rFn));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_2Prime> Tuple2<_1, _2Prime> pure(_2Prime _2Prime) {\n","        return tuple(_1, _2Prime);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_2Prime> Tuple2<_1, _2Prime> zip(\n","            Applicative<Fn1<? super _2, ? extends _2Prime>, Tuple2<_1, ?>> appFn) {\n","        return MonadRec.super.zip(appFn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_2Prime> Lazy<Tuple2<_1, _2Prime>> lazyZip(\n","            Lazy<? extends Applicative<Fn1<? super _2, ? extends _2Prime>, Tuple2<_1, ?>>> lazyAppFn) {\n","        return MonadRec.super.lazyZip(lazyAppFn).fmap(Monad<_2Prime, Tuple2<_1, ?>>::coerce);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_2Prime> Tuple2<_1, _2Prime> discardL(Applicative<_2Prime, Tuple2<_1, ?>> appB) {\n","        return MonadRec.super.discardL(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_2Prime> Tuple2<_1, _2> discardR(Applicative<_2Prime, Tuple2<_1, ?>> appB) {\n","        return MonadRec.super.discardR(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_2Prime> Tuple2<_1, _2Prime> flatMap(Fn1<? super _2, ? extends Monad<_2Prime, Tuple2<_1, ?>>> f) {\n","        return pure(f.apply(_2).<Tuple2<_1, _2Prime>>coerce()._2());\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_2Prime> Tuple2<_1, _2Prime> trampolineM(\n","            Fn1<? super _2, ? extends MonadRec<RecursiveResult<_2, _2Prime>, Tuple2<_1, ?>>> fn) {\n","        return fmap(trampoline(x -> fn.apply(x).<Tuple2<_1, RecursiveResult<_2, _2Prime>>>coerce()._2()));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_2Prime, App extends Applicative<?, App>, TravB extends Traversable<_2Prime, Tuple2<_1, ?>>,\n","            AppTrav extends Applicative<TravB, App>> AppTrav traverse(\n","            Fn1<? super _2, ? extends Applicative<_2Prime, App>> fn,\n","            Fn1<? super TravB, ? extends AppTrav> pure) {\n","        return fn.apply(_2).fmap(_2Prime -> fmap(constantly(_2Prime))).<TravB>fmap(Applicative::coerce).coerce();\n","    }\n","\n","    /**\n","     * Returns a <code>{@link SingletonHList}&lt;_1&gt;</code> of the first element.\n","     *\n","     * @return The {@link SingletonHList}&lt;_1&gt;\n","     */\n","    public SingletonHList<_1> init() {\n","        return invert().tail();\n","    }\n","\n","    /**\n","     * Static factory method for creating <code>Tuple2</code>s from {@link java.util.Map.Entry}s.\n","     *\n","     * @param entry the map entry\n","     * @param <K>   the key parameter type, and first (head) element type\n","     * @param <V>   the value parameter type, and second element type\n","     * @return the newly created Tuple2\n","     */\n","    public static <K, V> Tuple2<K, V> fromEntry(Map.Entry<K, V> entry) {\n","        return new Tuple2<>(entry.getKey(), singletonHList(entry.getValue()));\n","    }\n","\n","    /**\n","     * Given a value of type <code>A</code>, produce an instance of this tuple with each slot set to that value.\n","     *\n","     * @param a   the value to fill the tuple with\n","     * @param <A> the value type\n","     * @return the filled tuple\n","     */\n","    public static <A> Tuple2<A, A> fill(A a) {\n","        return tuple(a, a);\n","    }\n","\n","    /**\n","     * Return {@link Maybe#just(Object) just} the first two elements from the given {@link Iterable}, or\n","     * {@link Maybe#nothing() nothing} if there are less than two elements.\n","     *\n","     * @param as  the {@link Iterable}\n","     * @param <A> the {@link Iterable} element type\n","     * @return {@link Maybe} the first two elements of the given {@link Iterable}\n","     */\n","    public static <A> Maybe<Tuple2<A, A>> fromIterable(Iterable<A> as) {\n","        return uncons(as).flatMap(tail -> tail.traverse(Head::head, Maybe::just));\n","    }\n","\n","    /**\n","     * The canonical {@link Pure} instance for {@link Tuple2}.\n","     *\n","     * @param _1   the head element\n","     * @param <_1> the head element type\n","     * @return the {@link Pure} instance\n","     */\n","    public static <_1> Pure<Tuple2<_1, ?>> pureTuple(_1 _1) {\n","        return new Pure<Tuple2<_1, ?>>() {\n","            @Override\n","            public <_2> Tuple2<_1, _2> checkedApply(_2 _2) {\n","                return tuple(_1, _2);\n","            }\n","        };\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.adt.hlist;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Before;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.ApplicativeLaws;\n","import testsupport.traits.BifunctorLaws;\n","import testsupport.traits.FunctorLaws;\n","import testsupport.traits.MonadLaws;\n","import testsupport.traits.MonadRecLaws;\n","import testsupport.traits.MonadWriterLaws;\n","import testsupport.traits.TraversableLaws;\n","\n","import java.util.HashMap;\n","import java.util.Map;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.singletonHList;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.adt.hlist.Tuple2.pureTuple;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Repeat.repeat;\n","import static java.util.Collections.emptyList;\n","import static java.util.Collections.singletonList;\n","import static org.junit.Assert.assertEquals;\n","import static org.mockito.Mockito.only;\n","import static org.mockito.Mockito.spy;\n","import static org.mockito.Mockito.verify;\n","import static org.mockito.Mockito.verifyNoMoreInteractions;\n","\n","@RunWith(Traits.class)\n","public class Tuple2Test {\n","\n","    private Tuple2<Integer, Integer> tuple2;\n","\n","    @Before\n","    public void setUp() {\n","        tuple2 = new Tuple2<>(1, new SingletonHList<>(2));\n","    }\n","\n","    @TestTraits({\n","            FunctorLaws.class,\n","            ApplicativeLaws.class,\n","            MonadLaws.class,\n","            MonadRecLaws.class,\n","            MonadWriterLaws.class,\n","            BifunctorLaws.class,\n","            TraversableLaws.class})\n","    public Tuple2<?, ?> testSubject() {\n","        return tuple(\"one\", 2);\n","    }\n","\n","    @Test\n","    public void head() {\n","        assertEquals((Integer) 1, tuple2.head());\n","    }\n","\n","    @Test\n","    public void tail() {\n","        assertEquals(new SingletonHList<>(2), tuple2.tail());\n","    }\n","\n","    @Test\n","    public void init() {\n","        assertEquals(new SingletonHList<>(1), tuple2.init());\n","    }\n","\n","    @Test\n","    public void cons() {\n","        assertEquals(new Tuple3<>(0, tuple2), tuple2.cons(0));\n","    }\n","\n","    @Test\n","    public void snoc() {\n","        assertEquals(tuple(Long.MAX_VALUE, 123, \"hi\"), tuple(Long.MAX_VALUE, 123).snoc(\"hi\"));\n","    }\n","\n","    @Test\n","    public void accessors() {\n","        assertEquals((Integer) 1, tuple2._1());\n","        assertEquals((Integer) 2, tuple2._2());\n","    }\n","\n","    @Test\n","    public void randomAccess() {\n","        SingletonHList<String> spiedTail = spy(singletonHList(\"second\"));\n","        Tuple2<String, String> tuple2    = new Tuple2<>(\"first\", spiedTail);\n","\n","        verify(spiedTail, only()).head();\n","        tuple2._1();\n","        tuple2._2();\n","        verifyNoMoreInteractions(spiedTail);\n","    }\n","\n","    @Test\n","    public void into() {\n","        Tuple2<String, Integer> tuple = tuple(\"foo\", 1);\n","        assertEquals(\"foo1\", tuple.into((s, i) -> s + i));\n","    }\n","\n","    @Test\n","    public void fill() {\n","        assertEquals(tuple(\"foo\", \"foo\"), Tuple2.fill(\"foo\"));\n","    }\n","\n","    @Test\n","    public void mapEntryProperties() {\n","        assertEquals((Integer) 1, tuple2.getKey());\n","        assertEquals((Integer) 2, tuple2.getValue());\n","    }\n","\n","    @Test(expected = UnsupportedOperationException.class)\n","    public void setValueIsNotSupported() {\n","        tuple2.setValue(3);\n","    }\n","\n","    @Test\n","    @SuppressWarnings(\"serial\")\n","    public void staticFactoryMethodFromMapEntry() {\n","        Map.Entry<String, Integer> stringIntEntry = new HashMap<String, Integer>() {{\n","            put(\"string\", 1);\n","        }}.entrySet().iterator().next();\n","\n","        assertEquals(tuple(\"string\", 1), Tuple2.fromEntry(stringIntEntry));\n","    }\n","\n","    @Test\n","    public void zipPrecedence() {\n","        Tuple2<String, Integer>                                 a = tuple(\"foo\", 1);\n","        Tuple2<String, Fn1<? super Integer, ? extends Integer>> b = tuple(\"bar\", x -> x + 1);\n","        assertEquals(tuple(\"foo\", 2), a.zip(b));\n","    }\n","\n","    @Test\n","    public void flatMapPrecedence() {\n","        Tuple2<String, Integer>               a = tuple(\"foo\", 1);\n","        Fn1<Integer, Tuple2<String, Integer>> b = x -> tuple(\"bar\", x + 1);\n","        assertEquals(tuple(\"foo\", 2), a.flatMap(b));\n","    }\n","\n","    @Test\n","    public void fromIterable() {\n","        assertEquals(nothing(), Tuple2.fromIterable(emptyList()));\n","        assertEquals(nothing(), Tuple2.fromIterable(singletonList(1)));\n","        assertEquals(just(tuple(1, 1)), Tuple2.fromIterable(repeat(1)));\n","    }\n","\n","    @Test\n","    public void staticPure() {\n","        Tuple2<Integer, String> tuple = pureTuple(1).apply(\"two\");\n","        assertEquals(tuple(1, \"two\"), tuple);\n","    }\n","}"],"method_lines_dic":{"Tuple2::::listens(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends _3>)":[57,60],"Tuple2::::censor(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends _1>)":[65,68],"Tuple2::::cons(_0)":[73,76],"Tuple2::::snoc(_3)":[85,87],"Tuple2::::_1()":[92,95],"Tuple2::::_2()":[100,103],"Tuple2::::getKey()":[108,111],"Tuple2::::getValue()":[116,119],"Tuple2::::setValue(_2)":[124,127],"Tuple2::::invert()":[132,135],"Tuple2::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends _2Prime>)":[140,143],"Tuple2::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends _1Prime>)":[148,151],"Tuple2::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends _2Prime>)":[156,159],"Tuple2::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends _1Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends _2Prime>)":[164,168],"Tuple2::::pure(_2Prime)":[173,176],"Tuple2::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends _2Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple2<_1, ?>>)":[181,185],"Tuple2::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends _2Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple2<_1, ?>>>)":[190,194],"Tuple2::::discardL(com.jnape.palatable.lambda.functor.Applicative<_2Prime, com.jnape.palatable.lambda.adt.hlist.Tuple2<_1, ?>>)":[199,202],"Tuple2::::discardR(com.jnape.palatable.lambda.functor.Applicative<_2Prime, com.jnape.palatable.lambda.adt.hlist.Tuple2<_1, ?>>)":[207,210],"Tuple2::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends com.jnape.palatable.lambda.monad.Monad<_2Prime, com.jnape.palatable.lambda.adt.hlist.Tuple2<_1, ?>>>)":[215,218],"Tuple2::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_2, _2Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple2<_1, ?>>>)":[223,227],"Tuple2::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends com.jnape.palatable.lambda.functor.Applicative<_2Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)":[232,238],"Tuple2::::init()":[245,247],"Tuple2::::fromEntry(java.util.Map.Entry<K, V>)":[257,259],"Tuple2::::fill(A)":[268,270],"Tuple2::::fromIterable(java.lang.Iterable<A>)":[280,282],"Tuple2::::pureTuple(_1)":[291,298]},"test_method_lines_dic":{"Tuple2Test::::setUp()":[39,42],"Tuple2Test::::testSubject()":[44,54],"Tuple2Test::::head()":[56,59],"Tuple2Test::::tail()":[61,64],"Tuple2Test::::init()":[66,69],"Tuple2Test::::cons()":[71,74],"Tuple2Test::::snoc()":[76,79],"Tuple2Test::::accessors()":[81,85],"Tuple2Test::::randomAccess()":[87,96],"Tuple2Test::::into()":[98,102],"Tuple2Test::::fill()":[104,107],"Tuple2Test::::mapEntryProperties()":[109,113],"Tuple2Test::::setValueIsNotSupported()":[115,118],"Tuple2Test::::staticFactoryMethodFromMapEntry()":[120,128],"Tuple2Test::::zipPrecedence()":[130,135],"Tuple2Test::::flatMapPrecedence()":[137,142],"Tuple2Test::::fromIterable()":[144,149],"Tuple2Test::::staticPure()":[151,155]},"reverse_method_lines_dic":{"57":"Tuple2::::listens(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends _3>)","58":"Tuple2::::listens(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends _3>)","59":"Tuple2::::listens(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends _3>)","60":"Tuple2::::listens(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends _3>)","65":"Tuple2::::censor(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends _1>)","66":"Tuple2::::censor(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends _1>)","67":"Tuple2::::censor(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends _1>)","68":"Tuple2::::censor(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends _1>)","73":"Tuple2::::cons(_0)","74":"Tuple2::::cons(_0)","75":"Tuple2::::cons(_0)","76":"Tuple2::::cons(_0)","85":"Tuple2::::snoc(_3)","86":"Tuple2::::snoc(_3)","87":"Tuple2::::snoc(_3)","92":"Tuple2::::_1()","93":"Tuple2::::_1()","94":"Tuple2::::_1()","95":"Tuple2::::_1()","100":"Tuple2::::_2()","101":"Tuple2::::_2()","102":"Tuple2::::_2()","103":"Tuple2::::_2()","108":"Tuple2::::getKey()","109":"Tuple2::::getKey()","110":"Tuple2::::getKey()","111":"Tuple2::::getKey()","116":"Tuple2::::getValue()","117":"Tuple2::::getValue()","118":"Tuple2::::getValue()","119":"Tuple2::::getValue()","124":"Tuple2::::setValue(_2)","125":"Tuple2::::setValue(_2)","126":"Tuple2::::setValue(_2)","127":"Tuple2::::setValue(_2)","132":"Tuple2::::invert()","133":"Tuple2::::invert()","134":"Tuple2::::invert()","135":"Tuple2::::invert()","140":"Tuple2::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends _2Prime>)","141":"Tuple2::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends _2Prime>)","142":"Tuple2::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends _2Prime>)","143":"Tuple2::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends _2Prime>)","148":"Tuple2::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends _1Prime>)","149":"Tuple2::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends _1Prime>)","150":"Tuple2::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends _1Prime>)","151":"Tuple2::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends _1Prime>)","156":"Tuple2::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends _2Prime>)","157":"Tuple2::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends _2Prime>)","158":"Tuple2::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends _2Prime>)","159":"Tuple2::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends _2Prime>)","164":"Tuple2::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends _1Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends _2Prime>)","165":"Tuple2::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends _1Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends _2Prime>)","166":"Tuple2::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends _1Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends _2Prime>)","167":"Tuple2::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends _1Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends _2Prime>)","168":"Tuple2::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _1, ? extends _1Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends _2Prime>)","173":"Tuple2::::pure(_2Prime)","174":"Tuple2::::pure(_2Prime)","175":"Tuple2::::pure(_2Prime)","176":"Tuple2::::pure(_2Prime)","181":"Tuple2::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends _2Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple2<_1, ?>>)","182":"Tuple2::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends _2Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple2<_1, ?>>)","183":"Tuple2::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends _2Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple2<_1, ?>>)","184":"Tuple2::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends _2Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple2<_1, ?>>)","185":"Tuple2::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends _2Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple2<_1, ?>>)","190":"Tuple2::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends _2Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple2<_1, ?>>>)","191":"Tuple2::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends _2Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple2<_1, ?>>>)","192":"Tuple2::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends _2Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple2<_1, ?>>>)","193":"Tuple2::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends _2Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple2<_1, ?>>>)","194":"Tuple2::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends _2Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple2<_1, ?>>>)","199":"Tuple2::::discardL(com.jnape.palatable.lambda.functor.Applicative<_2Prime, com.jnape.palatable.lambda.adt.hlist.Tuple2<_1, ?>>)","200":"Tuple2::::discardL(com.jnape.palatable.lambda.functor.Applicative<_2Prime, com.jnape.palatable.lambda.adt.hlist.Tuple2<_1, ?>>)","201":"Tuple2::::discardL(com.jnape.palatable.lambda.functor.Applicative<_2Prime, com.jnape.palatable.lambda.adt.hlist.Tuple2<_1, ?>>)","202":"Tuple2::::discardL(com.jnape.palatable.lambda.functor.Applicative<_2Prime, com.jnape.palatable.lambda.adt.hlist.Tuple2<_1, ?>>)","207":"Tuple2::::discardR(com.jnape.palatable.lambda.functor.Applicative<_2Prime, com.jnape.palatable.lambda.adt.hlist.Tuple2<_1, ?>>)","208":"Tuple2::::discardR(com.jnape.palatable.lambda.functor.Applicative<_2Prime, com.jnape.palatable.lambda.adt.hlist.Tuple2<_1, ?>>)","209":"Tuple2::::discardR(com.jnape.palatable.lambda.functor.Applicative<_2Prime, com.jnape.palatable.lambda.adt.hlist.Tuple2<_1, ?>>)","210":"Tuple2::::discardR(com.jnape.palatable.lambda.functor.Applicative<_2Prime, com.jnape.palatable.lambda.adt.hlist.Tuple2<_1, ?>>)","215":"Tuple2::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends com.jnape.palatable.lambda.monad.Monad<_2Prime, com.jnape.palatable.lambda.adt.hlist.Tuple2<_1, ?>>>)","216":"Tuple2::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends com.jnape.palatable.lambda.monad.Monad<_2Prime, com.jnape.palatable.lambda.adt.hlist.Tuple2<_1, ?>>>)","217":"Tuple2::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends com.jnape.palatable.lambda.monad.Monad<_2Prime, com.jnape.palatable.lambda.adt.hlist.Tuple2<_1, ?>>>)","218":"Tuple2::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends com.jnape.palatable.lambda.monad.Monad<_2Prime, com.jnape.palatable.lambda.adt.hlist.Tuple2<_1, ?>>>)","223":"Tuple2::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_2, _2Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple2<_1, ?>>>)","224":"Tuple2::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_2, _2Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple2<_1, ?>>>)","225":"Tuple2::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_2, _2Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple2<_1, ?>>>)","226":"Tuple2::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_2, _2Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple2<_1, ?>>>)","227":"Tuple2::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_2, _2Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple2<_1, ?>>>)","232":"Tuple2::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends com.jnape.palatable.lambda.functor.Applicative<_2Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","233":"Tuple2::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends com.jnape.palatable.lambda.functor.Applicative<_2Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","234":"Tuple2::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends com.jnape.palatable.lambda.functor.Applicative<_2Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","235":"Tuple2::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends com.jnape.palatable.lambda.functor.Applicative<_2Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","236":"Tuple2::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends com.jnape.palatable.lambda.functor.Applicative<_2Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","237":"Tuple2::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends com.jnape.palatable.lambda.functor.Applicative<_2Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","238":"Tuple2::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _2, ? extends com.jnape.palatable.lambda.functor.Applicative<_2Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","245":"Tuple2::::init()","246":"Tuple2::::init()","247":"Tuple2::::init()","257":"Tuple2::::fromEntry(java.util.Map.Entry<K, V>)","258":"Tuple2::::fromEntry(java.util.Map.Entry<K, V>)","259":"Tuple2::::fromEntry(java.util.Map.Entry<K, V>)","268":"Tuple2::::fill(A)","269":"Tuple2::::fill(A)","270":"Tuple2::::fill(A)","280":"Tuple2::::fromIterable(java.lang.Iterable<A>)","281":"Tuple2::::fromIterable(java.lang.Iterable<A>)","282":"Tuple2::::fromIterable(java.lang.Iterable<A>)","291":"Tuple2::::pureTuple(_1)","292":"Tuple2::::pureTuple(_1)","293":"Tuple2::::pureTuple(_1)","294":"Tuple2::::pureTuple(_1)","295":"Tuple2::::pureTuple(_1)","296":"Tuple2::::pureTuple(_1)","297":"Tuple2::::pureTuple(_1)","298":"Tuple2::::pureTuple(_1)"},"test_reverse_method_lines_dic":{"39":"Tuple2Test::::setUp()","40":"Tuple2Test::::setUp()","41":"Tuple2Test::::setUp()","42":"Tuple2Test::::setUp()","44":"Tuple2Test::::testSubject()","45":"Tuple2Test::::testSubject()","46":"Tuple2Test::::testSubject()","47":"Tuple2Test::::testSubject()","48":"Tuple2Test::::testSubject()","49":"Tuple2Test::::testSubject()","50":"Tuple2Test::::testSubject()","51":"Tuple2Test::::testSubject()","52":"Tuple2Test::::testSubject()","53":"Tuple2Test::::testSubject()","54":"Tuple2Test::::testSubject()","56":"Tuple2Test::::head()","57":"Tuple2Test::::head()","58":"Tuple2Test::::head()","59":"Tuple2Test::::head()","61":"Tuple2Test::::tail()","62":"Tuple2Test::::tail()","63":"Tuple2Test::::tail()","64":"Tuple2Test::::tail()","66":"Tuple2Test::::init()","67":"Tuple2Test::::init()","68":"Tuple2Test::::init()","69":"Tuple2Test::::init()","71":"Tuple2Test::::cons()","72":"Tuple2Test::::cons()","73":"Tuple2Test::::cons()","74":"Tuple2Test::::cons()","76":"Tuple2Test::::snoc()","77":"Tuple2Test::::snoc()","78":"Tuple2Test::::snoc()","79":"Tuple2Test::::snoc()","81":"Tuple2Test::::accessors()","82":"Tuple2Test::::accessors()","83":"Tuple2Test::::accessors()","84":"Tuple2Test::::accessors()","85":"Tuple2Test::::accessors()","87":"Tuple2Test::::randomAccess()","88":"Tuple2Test::::randomAccess()","89":"Tuple2Test::::randomAccess()","90":"Tuple2Test::::randomAccess()","91":"Tuple2Test::::randomAccess()","92":"Tuple2Test::::randomAccess()","93":"Tuple2Test::::randomAccess()","94":"Tuple2Test::::randomAccess()","95":"Tuple2Test::::randomAccess()","96":"Tuple2Test::::randomAccess()","98":"Tuple2Test::::into()","99":"Tuple2Test::::into()","100":"Tuple2Test::::into()","101":"Tuple2Test::::into()","102":"Tuple2Test::::into()","104":"Tuple2Test::::fill()","105":"Tuple2Test::::fill()","106":"Tuple2Test::::fill()","107":"Tuple2Test::::fill()","109":"Tuple2Test::::mapEntryProperties()","110":"Tuple2Test::::mapEntryProperties()","111":"Tuple2Test::::mapEntryProperties()","112":"Tuple2Test::::mapEntryProperties()","113":"Tuple2Test::::mapEntryProperties()","115":"Tuple2Test::::setValueIsNotSupported()","116":"Tuple2Test::::setValueIsNotSupported()","117":"Tuple2Test::::setValueIsNotSupported()","118":"Tuple2Test::::setValueIsNotSupported()","120":"Tuple2Test::::staticFactoryMethodFromMapEntry()","121":"Tuple2Test::::staticFactoryMethodFromMapEntry()","122":"Tuple2Test::::staticFactoryMethodFromMapEntry()","123":"Tuple2Test::::staticFactoryMethodFromMapEntry()","124":"Tuple2Test::::staticFactoryMethodFromMapEntry()","125":"Tuple2Test::::staticFactoryMethodFromMapEntry()","126":"Tuple2Test::::staticFactoryMethodFromMapEntry()","127":"Tuple2Test::::staticFactoryMethodFromMapEntry()","128":"Tuple2Test::::staticFactoryMethodFromMapEntry()","130":"Tuple2Test::::zipPrecedence()","131":"Tuple2Test::::zipPrecedence()","132":"Tuple2Test::::zipPrecedence()","133":"Tuple2Test::::zipPrecedence()","134":"Tuple2Test::::zipPrecedence()","135":"Tuple2Test::::zipPrecedence()","137":"Tuple2Test::::flatMapPrecedence()","138":"Tuple2Test::::flatMapPrecedence()","139":"Tuple2Test::::flatMapPrecedence()","140":"Tuple2Test::::flatMapPrecedence()","141":"Tuple2Test::::flatMapPrecedence()","142":"Tuple2Test::::flatMapPrecedence()","144":"Tuple2Test::::fromIterable()","145":"Tuple2Test::::fromIterable()","146":"Tuple2Test::::fromIterable()","147":"Tuple2Test::::fromIterable()","148":"Tuple2Test::::fromIterable()","149":"Tuple2Test::::fromIterable()","151":"Tuple2Test::::staticPure()","152":"Tuple2Test::::staticPure()","153":"Tuple2Test::::staticPure()","154":"Tuple2Test::::staticPure()","155":"Tuple2Test::::staticPure()"},"tests":[{"test_lines":[39,42],"covered_lines":[49,50,51,52]},{"test_lines":[44,54],"covered_lines":[49,50,51,52]},{"test_lines":[56,59],"covered_lines":[49,50,51,52]},{"test_lines":[61,64],"covered_lines":[49,50,51,52]},{"test_lines":[66,69],"covered_lines":[49,50,51,52,134,246]},{"test_lines":[71,74],"covered_lines":[49,50,51,52,75,94,102]},{"test_lines":[76,79],"covered_lines":[49,50,51,52,75,86,94,102]},{"test_lines":[81,85],"covered_lines":[49,50,51,52,94,102]},{"test_lines":[87,96],"covered_lines":[49,50,51,52,94,102]},{"test_lines":[98,102],"covered_lines":[49,50,51,52,94,102]},{"test_lines":[104,107],"covered_lines":[49,50,51,52,269]},{"test_lines":[109,113],"covered_lines":[49,50,51,52,94,102,110,118]},{"test_lines":[115,118],"covered_lines":[49,50,51,52,126]},{"test_lines":[120,128],"covered_lines":[49,50,51,52,258]},{"test_lines":[130,135],"covered_lines":[49,50,51,52,102,142,175,184,217]},{"test_lines":[137,142],"covered_lines":[49,50,51,52,102,175,217]},{"test_lines":[144,149],"covered_lines":[49,50,51,52,102,142,175,217,237,281]},{"test_lines":[151,155],"covered_lines":[49,50,51,52,292,295]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/adt/hlist/Tuple5.java":{"class_content":["package com.jnape.palatable.lambda.adt.hlist;\n","\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.adt.hlist.HList.HCons;\n","import com.jnape.palatable.lambda.adt.product.Product5;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.builtin.fn2.Into;\n","import com.jnape.palatable.lambda.functions.recursion.RecursiveResult;\n","import com.jnape.palatable.lambda.functions.specialized.Pure;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","import com.jnape.palatable.lambda.functor.Bifunctor;\n","import com.jnape.palatable.lambda.functor.builtin.Lazy;\n","import com.jnape.palatable.lambda.monad.Monad;\n","import com.jnape.palatable.lambda.monad.MonadRec;\n","import com.jnape.palatable.lambda.traversable.Traversable;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Uncons.uncons;\n","import static com.jnape.palatable.lambda.functions.recursion.Trampoline.trampoline;\n","\n","/**\n"," * A 5-element tuple product type, implemented as a specialized HList. Supports random access.\n"," *\n"," * @param <_1> The first slot element type\n"," * @param <_2> The second slot element type\n"," * @param <_3> The third slot element type\n"," * @param <_4> The fourth slot element type\n"," * @param <_5> The fifth slot element type\n"," * @see Product5\n"," * @see HList\n"," * @see SingletonHList\n"," * @see Tuple2\n"," * @see Tuple3\n"," * @see Tuple4\n"," */\n","public class Tuple5<_1, _2, _3, _4, _5> extends HCons<_1, Tuple4<_2, _3, _4, _5>> implements\n","        Product5<_1, _2, _3, _4, _5>,\n","        MonadRec<_5, Tuple5<_1, _2, _3, _4, ?>>,\n","        Bifunctor<_4, _5, Tuple5<_1, _2, _3, ?, ?>>,\n","        Traversable<_5, Tuple5<_1, _2, _3, _4, ?>> {\n","\n","    private final _1 _1;\n","    private final _2 _2;\n","    private final _3 _3;\n","    private final _4 _4;\n","    private final _5 _5;\n","\n","    Tuple5(_1 _1, Tuple4<_2, _3, _4, _5> tail) {\n","        super(_1, tail);\n","        this._1 = _1;\n","        _2      = tail._1();\n","        _3      = tail._2();\n","        _4      = tail._3();\n","        _5      = tail._4();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_0> Tuple6<_0, _1, _2, _3, _4, _5> cons(_0 _0) {\n","        return new Tuple6<>(_0, this);\n","    }\n","\n","    /**\n","     * Snoc an element onto the back of this {@link Tuple5}.\n","     *\n","     * @param _6   the new last element\n","     * @param <_6> the new last element type\n","     * @return the new {@link Tuple6}\n","     */\n","    public <_6> Tuple6<_1, _2, _3, _4, _5, _6> snoc(_6 _6) {\n","        return tuple(_1, _2, _3, _4, _5, _6);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public _1 _1() {\n","        return _1;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public _2 _2() {\n","        return _2;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public _3 _3() {\n","        return _3;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public _4 _4() {\n","        return _4;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public _5 _5() {\n","        return _5;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple5<_2, _3, _4, _5, _1> rotateL5() {\n","        return tuple(_2, _3, _4, _5, _1);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple5<_5, _1, _2, _3, _4> rotateR5() {\n","        return tuple(_5, _1, _2, _3, _4);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple5<_2, _3, _4, _1, _5> rotateL4() {\n","        return tuple(_2, _3, _4, _1, _5);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple5<_4, _1, _2, _3, _5> rotateR4() {\n","        return tuple(_4, _1, _2, _3, _5);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple5<_2, _3, _1, _4, _5> rotateL3() {\n","        return tuple(_2, _3, _1, _4, _5);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple5<_3, _1, _2, _4, _5> rotateR3() {\n","        return tuple(_3, _1, _2, _4, _5);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Tuple5<_2, _1, _3, _4, _5> invert() {\n","        return tuple(_2, _1, _3, _4, _5);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_5Prime> Tuple5<_1, _2, _3, _4, _5Prime> fmap(Fn1<? super _5, ? extends _5Prime> fn) {\n","        return MonadRec.super.<_5Prime>fmap(fn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_4Prime> Tuple5<_1, _2, _3, _4Prime, _5> biMapL(Fn1<? super _4, ? extends _4Prime> fn) {\n","        return (Tuple5<_1, _2, _3, _4Prime, _5>) Bifunctor.super.<_4Prime>biMapL(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_5Prime> Tuple5<_1, _2, _3, _4, _5Prime> biMapR(Fn1<? super _5, ? extends _5Prime> fn) {\n","        return (Tuple5<_1, _2, _3, _4, _5Prime>) Bifunctor.super.<_5Prime>biMapR(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_4Prime, _5Prime> Tuple5<_1, _2, _3, _4Prime, _5Prime> biMap(Fn1<? super _4, ? extends _4Prime> lFn,\n","                                                                         Fn1<? super _5, ? extends _5Prime> rFn) {\n","        return new Tuple5<>(_1(), tail().biMap(lFn, rFn));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_5Prime> Tuple5<_1, _2, _3, _4, _5Prime> pure(_5Prime _5Prime) {\n","        return tuple(_1, _2, _3, _4, _5Prime);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_5Prime> Tuple5<_1, _2, _3, _4, _5Prime> zip(\n","            Applicative<Fn1<? super _5, ? extends _5Prime>, Tuple5<_1, _2, _3, _4, ?>> appFn) {\n","        return MonadRec.super.zip(appFn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_5Prime> Lazy<Tuple5<_1, _2, _3, _4, _5Prime>> lazyZip(\n","            Lazy<? extends Applicative<Fn1<? super _5, ? extends _5Prime>, Tuple5<_1, _2, _3, _4, ?>>> lazyAppFn) {\n","        return MonadRec.super.lazyZip(lazyAppFn).fmap(Monad<_5Prime, Tuple5<_1, _2, _3, _4, ?>>::coerce);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_5Prime> Tuple5<_1, _2, _3, _4, _5Prime> discardL(Applicative<_5Prime, Tuple5<_1, _2, _3, _4, ?>> appB) {\n","        return MonadRec.super.discardL(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_5Prime> Tuple5<_1, _2, _3, _4, _5> discardR(Applicative<_5Prime, Tuple5<_1, _2, _3, _4, ?>> appB) {\n","        return MonadRec.super.discardR(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_5Prime> Tuple5<_1, _2, _3, _4, _5Prime> flatMap(\n","            Fn1<? super _5, ? extends Monad<_5Prime, Tuple5<_1, _2, _3, _4, ?>>> f) {\n","        return pure(f.apply(_5).<Tuple5<_1, _2, _3, _4, _5Prime>>coerce()._5());\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_5Prime> Tuple5<_1, _2, _3, _4, _5Prime> trampolineM(\n","            Fn1<? super _5, ? extends MonadRec<RecursiveResult<_5, _5Prime>, Tuple5<_1, _2, _3, _4, ?>>> fn) {\n","        return fmap(trampoline(x -> fn.apply(x).<Tuple5<_1, _2, _3, _4, RecursiveResult<_5, _5Prime>>>coerce()._5()));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <_5Prime, App extends Applicative<?, App>, TravB extends Traversable<_5Prime, Tuple5<_1, _2, _3, _4, ?>>,\n","            AppTrav extends Applicative<TravB, App>> AppTrav traverse(\n","            Fn1<? super _5, ? extends Applicative<_5Prime, App>> fn,\n","            Fn1<? super TravB, ? extends AppTrav> pure) {\n","        return fn.apply(_5).fmap(_3Prime -> fmap(constantly(_3Prime))).<TravB>fmap(Applicative::coerce).coerce();\n","    }\n","\n","    /**\n","     * Returns a <code>{@link Tuple4}&lt;_1, _2, _3, _4&gt;</code> of all the elements of this\n","     * <code>{@link Tuple5}&lt;_1, _2, _3, _4, _5&gt;</code> except the last.\n","     *\n","     * @return The {@link Tuple4}&lt;_1, _2, _3, _4&gt; representing all but the last element\n","     */\n","    public Tuple4<_1, _2, _3, _4> init() {\n","        return rotateR5().tail();\n","    }\n","\n","    /**\n","     * Given a value of type <code>A</code>, produced an instance of this tuple with each slot set to that value.\n","     *\n","     * @param a   the value to fill the tuple with\n","     * @param <A> the value type\n","     * @return the filled tuple\n","     * @see Tuple2#fill\n","     */\n","    public static <A> Tuple5<A, A, A, A, A> fill(A a) {\n","        return tuple(a, a, a, a, a);\n","    }\n","\n","    /**\n","     * Return {@link Maybe#just(Object) just} the first five elements from the given {@link Iterable}, or\n","     * {@link Maybe#nothing() nothing} if there are less than five elements.\n","     *\n","     * @param as  the {@link Iterable}\n","     * @param <A> the {@link Iterable} element type\n","     * @return {@link Maybe} the first five elements of the given {@link Iterable}\n","     */\n","    public static <A> Maybe<Tuple5<A, A, A, A, A>> fromIterable(Iterable<A> as) {\n","        return uncons(as).flatMap(Into.into((head, tail) -> Tuple4.fromIterable(tail).fmap(t -> t.cons(head))));\n","    }\n","\n","    /**\n","     * The canonical {@link Pure} instance for {@link Tuple5}.\n","     *\n","     * @param _1   the head element\n","     * @param _2   the second element\n","     * @param _3   the third element\n","     * @param _4   the fourth element\n","     * @param <_1> the head element type\n","     * @param <_2> the second element type\n","     * @param <_3> the third element type\n","     * @param <_4> the fourth element type\n","     * @return the {@link Pure} instance\n","     */\n","    public static <_1, _2, _3, _4> Pure<Tuple5<_1, _2, _3, _4, ?>> pureTuple(_1 _1, _2 _2, _3 _3, _4 _4) {\n","        return new Pure<Tuple5<_1, _2, _3, _4, ?>>() {\n","            @Override\n","            public <_5> Tuple5<_1, _2, _3, _4, _5> checkedApply(_5 _5) throws Throwable {\n","                return tuple(_1, _2, _3, _4, _5);\n","            }\n","        };\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.adt.hlist;\n","\n","import com.jnape.palatable.lambda.adt.hlist.HList.HCons;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Before;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.ApplicativeLaws;\n","import testsupport.traits.BifunctorLaws;\n","import testsupport.traits.FunctorLaws;\n","import testsupport.traits.MonadLaws;\n","import testsupport.traits.MonadRecLaws;\n","import testsupport.traits.TraversableLaws;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.adt.hlist.Tuple5.pureTuple;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Repeat.repeat;\n","import static java.util.Collections.emptyList;\n","import static java.util.Collections.singletonList;\n","import static org.junit.Assert.assertEquals;\n","import static org.mockito.Mockito.spy;\n","import static org.mockito.Mockito.times;\n","import static org.mockito.Mockito.verify;\n","import static org.mockito.Mockito.verifyNoMoreInteractions;\n","\n","@RunWith(Traits.class)\n","public class Tuple5Test {\n","\n","    private Tuple5<Integer, String, Character, Boolean, Long> tuple5;\n","\n","    @Before\n","    public void setUp() {\n","        tuple5 = new Tuple5<>(1, new Tuple4<>(\"2\", new Tuple3<>('3', new Tuple2<>(false, new SingletonHList<>(5L)))));\n","    }\n","\n","    @TestTraits({\n","            FunctorLaws.class,\n","            ApplicativeLaws.class,\n","            MonadLaws.class,\n","            MonadRecLaws.class,\n","            BifunctorLaws.class,\n","            TraversableLaws.class})\n","    public Tuple5<?, ?, ?, ?, ?> testSubject() {\n","        return tuple(\"one\", 2, 3d, 4f, '5');\n","    }\n","\n","    @Test\n","    public void head() {\n","        assertEquals((Integer) 1, tuple5.head());\n","    }\n","\n","    @Test\n","    public void tail() {\n","        assertEquals(new Tuple4<>(\"2\", new Tuple3<>('3', new Tuple2<>(false, new SingletonHList<>(5L)))), tuple5.tail());\n","    }\n","\n","    @Test\n","    public void cons() {\n","        assertEquals(new HCons<>(0, tuple5), tuple5.cons(0));\n","    }\n","\n","    @Test\n","    public void snoc() {\n","        assertEquals(tuple(\"a\", 5, \"b\", 7, \"c\", 11), tuple(\"a\", 5, \"b\", 7, \"c\").snoc(11));\n","    }\n","\n","    @Test\n","    public void accessors() {\n","        assertEquals((Integer) 1, tuple5._1());\n","        assertEquals(\"2\", tuple5._2());\n","        assertEquals((Character) '3', tuple5._3());\n","        assertEquals(false, tuple5._4());\n","        assertEquals((Long) 5L, tuple5._5());\n","    }\n","\n","    @Test\n","    public void randomAccess() {\n","        Tuple4<String, String, String, String>         spiedTail = spy(tuple(\"second\", \"third\", \"fourth\", \"fifth\"));\n","        Tuple5<String, String, String, String, String> tuple5    = new Tuple5<>(\"first\", spiedTail);\n","\n","        verify(spiedTail, times(1))._1();\n","        verify(spiedTail, times(1))._2();\n","        verify(spiedTail, times(1))._3();\n","        verify(spiedTail, times(1))._4();\n","        tuple5._1();\n","        tuple5._2();\n","        tuple5._3();\n","        tuple5._4();\n","        tuple5._5();\n","        verifyNoMoreInteractions(spiedTail);\n","    }\n","\n","    @Test\n","    public void into() {\n","        Tuple5<String, Integer, Double, Boolean, Float> tuple = tuple(\"foo\", 1, 2.0d, false, 3f);\n","        assertEquals(\"foo12.0false3.0\", tuple.into((s, i, d, b, f) -> s + i + d + b + f));\n","    }\n","\n","    @Test\n","    public void fill() {\n","        assertEquals(tuple(\"foo\", \"foo\", \"foo\", \"foo\", \"foo\"), Tuple5.fill(\"foo\"));\n","    }\n","\n","    @Test\n","    public void zipPrecedence() {\n","        Tuple5<String, Integer, Integer, Integer, Integer> a =\n","                tuple(\"foo\", 1, 2, 3, 4);\n","        Tuple5<String, Integer, Integer, Integer, Fn1<? super Integer, ? extends Integer>> b =\n","                tuple(\"bar\", 2, 3, 4, x -> x + 1);\n","        assertEquals(tuple(\"foo\", 1, 2, 3, 5), a.zip(b));\n","    }\n","\n","    @Test\n","    public void flatMapPrecedence() {\n","        Tuple5<String, Integer, Integer, Integer, Integer>               a = tuple(\"foo\", 1, 2, 3, 4);\n","        Fn1<Integer, Tuple5<String, Integer, Integer, Integer, Integer>> b = x -> tuple(\"bar\", 2, 3, 4, x + 1);\n","        assertEquals(tuple(\"foo\", 1, 2, 3, 5), a.flatMap(b));\n","    }\n","\n","    @Test\n","    public void fromIterable() {\n","        assertEquals(nothing(), Tuple5.fromIterable(emptyList()));\n","        assertEquals(nothing(), Tuple5.fromIterable(singletonList(1)));\n","        assertEquals(just(tuple(1, 1, 1, 1, 1)), Tuple5.fromIterable(repeat(1)));\n","    }\n","\n","    @Test\n","    public void staticPure() {\n","        Tuple5<Integer, String, Character, Boolean, Float> tuple = pureTuple(1, \"2\", '3', true).apply(5f);\n","        assertEquals(tuple(1, \"2\", '3', true, 5f), tuple);\n","    }\n","\n","    @Test\n","    public void init() {\n","        assertEquals(tuple(1, 2, 3, 4),\n","                     tuple(1, 2, 3, 4, 5).init());\n","    }\n","}"],"method_lines_dic":{"Tuple5::::cons(_0)":[60,63],"Tuple5::::snoc(_6)":[72,74],"Tuple5::::_1()":[79,82],"Tuple5::::_2()":[87,90],"Tuple5::::_3()":[95,98],"Tuple5::::_4()":[103,106],"Tuple5::::_5()":[111,114],"Tuple5::::rotateL5()":[119,122],"Tuple5::::rotateR5()":[127,130],"Tuple5::::rotateL4()":[135,138],"Tuple5::::rotateR4()":[143,146],"Tuple5::::rotateL3()":[151,154],"Tuple5::::rotateR3()":[159,162],"Tuple5::::invert()":[167,170],"Tuple5::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>)":[175,178],"Tuple5::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends _4Prime>)":[183,186],"Tuple5::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>)":[191,194],"Tuple5::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends _4Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>)":[199,203],"Tuple5::::pure(_5Prime)":[208,211],"Tuple5::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple5<_1, _2, _3, _4, ?>>)":[216,220],"Tuple5::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple5<_1, _2, _3, _4, ?>>>)":[225,229],"Tuple5::::discardL(com.jnape.palatable.lambda.functor.Applicative<_5Prime, com.jnape.palatable.lambda.adt.hlist.Tuple5<_1, _2, _3, _4, ?>>)":[234,237],"Tuple5::::discardR(com.jnape.palatable.lambda.functor.Applicative<_5Prime, com.jnape.palatable.lambda.adt.hlist.Tuple5<_1, _2, _3, _4, ?>>)":[242,245],"Tuple5::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends com.jnape.palatable.lambda.monad.Monad<_5Prime, com.jnape.palatable.lambda.adt.hlist.Tuple5<_1, _2, _3, _4, ?>>>)":[250,254],"Tuple5::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_5, _5Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple5<_1, _2, _3, _4, ?>>>)":[259,263],"Tuple5::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends com.jnape.palatable.lambda.functor.Applicative<_5Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)":[268,274],"Tuple5::::init()":[282,284],"Tuple5::::fill(A)":[294,296],"Tuple5::::fromIterable(java.lang.Iterable<A>)":[306,308],"Tuple5::::pureTuple(_1,_2,_3,_4)":[323,330]},"test_method_lines_dic":{"Tuple5Test::::setUp()":[35,38],"Tuple5Test::::testSubject()":[40,49],"Tuple5Test::::head()":[51,54],"Tuple5Test::::tail()":[56,59],"Tuple5Test::::cons()":[61,64],"Tuple5Test::::snoc()":[66,69],"Tuple5Test::::accessors()":[71,78],"Tuple5Test::::randomAccess()":[80,95],"Tuple5Test::::into()":[97,101],"Tuple5Test::::fill()":[103,106],"Tuple5Test::::zipPrecedence()":[108,115],"Tuple5Test::::flatMapPrecedence()":[117,122],"Tuple5Test::::fromIterable()":[124,129],"Tuple5Test::::staticPure()":[131,135],"Tuple5Test::::init()":[137,141]},"reverse_method_lines_dic":{"60":"Tuple5::::cons(_0)","61":"Tuple5::::cons(_0)","62":"Tuple5::::cons(_0)","63":"Tuple5::::cons(_0)","72":"Tuple5::::snoc(_6)","73":"Tuple5::::snoc(_6)","74":"Tuple5::::snoc(_6)","79":"Tuple5::::_1()","80":"Tuple5::::_1()","81":"Tuple5::::_1()","82":"Tuple5::::_1()","87":"Tuple5::::_2()","88":"Tuple5::::_2()","89":"Tuple5::::_2()","90":"Tuple5::::_2()","95":"Tuple5::::_3()","96":"Tuple5::::_3()","97":"Tuple5::::_3()","98":"Tuple5::::_3()","103":"Tuple5::::_4()","104":"Tuple5::::_4()","105":"Tuple5::::_4()","106":"Tuple5::::_4()","111":"Tuple5::::_5()","112":"Tuple5::::_5()","113":"Tuple5::::_5()","114":"Tuple5::::_5()","119":"Tuple5::::rotateL5()","120":"Tuple5::::rotateL5()","121":"Tuple5::::rotateL5()","122":"Tuple5::::rotateL5()","127":"Tuple5::::rotateR5()","128":"Tuple5::::rotateR5()","129":"Tuple5::::rotateR5()","130":"Tuple5::::rotateR5()","135":"Tuple5::::rotateL4()","136":"Tuple5::::rotateL4()","137":"Tuple5::::rotateL4()","138":"Tuple5::::rotateL4()","143":"Tuple5::::rotateR4()","144":"Tuple5::::rotateR4()","145":"Tuple5::::rotateR4()","146":"Tuple5::::rotateR4()","151":"Tuple5::::rotateL3()","152":"Tuple5::::rotateL3()","153":"Tuple5::::rotateL3()","154":"Tuple5::::rotateL3()","159":"Tuple5::::rotateR3()","160":"Tuple5::::rotateR3()","161":"Tuple5::::rotateR3()","162":"Tuple5::::rotateR3()","167":"Tuple5::::invert()","168":"Tuple5::::invert()","169":"Tuple5::::invert()","170":"Tuple5::::invert()","175":"Tuple5::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>)","176":"Tuple5::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>)","177":"Tuple5::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>)","178":"Tuple5::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>)","183":"Tuple5::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends _4Prime>)","184":"Tuple5::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends _4Prime>)","185":"Tuple5::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends _4Prime>)","186":"Tuple5::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends _4Prime>)","191":"Tuple5::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>)","192":"Tuple5::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>)","193":"Tuple5::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>)","194":"Tuple5::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>)","199":"Tuple5::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends _4Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>)","200":"Tuple5::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends _4Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>)","201":"Tuple5::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends _4Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>)","202":"Tuple5::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends _4Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>)","203":"Tuple5::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super _4, ? extends _4Prime>,com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>)","208":"Tuple5::::pure(_5Prime)","209":"Tuple5::::pure(_5Prime)","210":"Tuple5::::pure(_5Prime)","211":"Tuple5::::pure(_5Prime)","216":"Tuple5::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple5<_1, _2, _3, _4, ?>>)","217":"Tuple5::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple5<_1, _2, _3, _4, ?>>)","218":"Tuple5::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple5<_1, _2, _3, _4, ?>>)","219":"Tuple5::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple5<_1, _2, _3, _4, ?>>)","220":"Tuple5::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple5<_1, _2, _3, _4, ?>>)","225":"Tuple5::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple5<_1, _2, _3, _4, ?>>>)","226":"Tuple5::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple5<_1, _2, _3, _4, ?>>>)","227":"Tuple5::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple5<_1, _2, _3, _4, ?>>>)","228":"Tuple5::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple5<_1, _2, _3, _4, ?>>>)","229":"Tuple5::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends _5Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple5<_1, _2, _3, _4, ?>>>)","234":"Tuple5::::discardL(com.jnape.palatable.lambda.functor.Applicative<_5Prime, com.jnape.palatable.lambda.adt.hlist.Tuple5<_1, _2, _3, _4, ?>>)","235":"Tuple5::::discardL(com.jnape.palatable.lambda.functor.Applicative<_5Prime, com.jnape.palatable.lambda.adt.hlist.Tuple5<_1, _2, _3, _4, ?>>)","236":"Tuple5::::discardL(com.jnape.palatable.lambda.functor.Applicative<_5Prime, com.jnape.palatable.lambda.adt.hlist.Tuple5<_1, _2, _3, _4, ?>>)","237":"Tuple5::::discardL(com.jnape.palatable.lambda.functor.Applicative<_5Prime, com.jnape.palatable.lambda.adt.hlist.Tuple5<_1, _2, _3, _4, ?>>)","242":"Tuple5::::discardR(com.jnape.palatable.lambda.functor.Applicative<_5Prime, com.jnape.palatable.lambda.adt.hlist.Tuple5<_1, _2, _3, _4, ?>>)","243":"Tuple5::::discardR(com.jnape.palatable.lambda.functor.Applicative<_5Prime, com.jnape.palatable.lambda.adt.hlist.Tuple5<_1, _2, _3, _4, ?>>)","244":"Tuple5::::discardR(com.jnape.palatable.lambda.functor.Applicative<_5Prime, com.jnape.palatable.lambda.adt.hlist.Tuple5<_1, _2, _3, _4, ?>>)","245":"Tuple5::::discardR(com.jnape.palatable.lambda.functor.Applicative<_5Prime, com.jnape.palatable.lambda.adt.hlist.Tuple5<_1, _2, _3, _4, ?>>)","250":"Tuple5::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends com.jnape.palatable.lambda.monad.Monad<_5Prime, com.jnape.palatable.lambda.adt.hlist.Tuple5<_1, _2, _3, _4, ?>>>)","251":"Tuple5::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends com.jnape.palatable.lambda.monad.Monad<_5Prime, com.jnape.palatable.lambda.adt.hlist.Tuple5<_1, _2, _3, _4, ?>>>)","252":"Tuple5::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends com.jnape.palatable.lambda.monad.Monad<_5Prime, com.jnape.palatable.lambda.adt.hlist.Tuple5<_1, _2, _3, _4, ?>>>)","253":"Tuple5::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends com.jnape.palatable.lambda.monad.Monad<_5Prime, com.jnape.palatable.lambda.adt.hlist.Tuple5<_1, _2, _3, _4, ?>>>)","254":"Tuple5::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends com.jnape.palatable.lambda.monad.Monad<_5Prime, com.jnape.palatable.lambda.adt.hlist.Tuple5<_1, _2, _3, _4, ?>>>)","259":"Tuple5::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_5, _5Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple5<_1, _2, _3, _4, ?>>>)","260":"Tuple5::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_5, _5Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple5<_1, _2, _3, _4, ?>>>)","261":"Tuple5::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_5, _5Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple5<_1, _2, _3, _4, ?>>>)","262":"Tuple5::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_5, _5Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple5<_1, _2, _3, _4, ?>>>)","263":"Tuple5::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<_5, _5Prime>, com.jnape.palatable.lambda.adt.hlist.Tuple5<_1, _2, _3, _4, ?>>>)","268":"Tuple5::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends com.jnape.palatable.lambda.functor.Applicative<_5Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","269":"Tuple5::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends com.jnape.palatable.lambda.functor.Applicative<_5Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","270":"Tuple5::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends com.jnape.palatable.lambda.functor.Applicative<_5Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","271":"Tuple5::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends com.jnape.palatable.lambda.functor.Applicative<_5Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","272":"Tuple5::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends com.jnape.palatable.lambda.functor.Applicative<_5Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","273":"Tuple5::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends com.jnape.palatable.lambda.functor.Applicative<_5Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","274":"Tuple5::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super _5, ? extends com.jnape.palatable.lambda.functor.Applicative<_5Prime, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","282":"Tuple5::::init()","283":"Tuple5::::init()","284":"Tuple5::::init()","294":"Tuple5::::fill(A)","295":"Tuple5::::fill(A)","296":"Tuple5::::fill(A)","306":"Tuple5::::fromIterable(java.lang.Iterable<A>)","307":"Tuple5::::fromIterable(java.lang.Iterable<A>)","308":"Tuple5::::fromIterable(java.lang.Iterable<A>)","323":"Tuple5::::pureTuple(_1,_2,_3,_4)","324":"Tuple5::::pureTuple(_1,_2,_3,_4)","325":"Tuple5::::pureTuple(_1,_2,_3,_4)","326":"Tuple5::::pureTuple(_1,_2,_3,_4)","327":"Tuple5::::pureTuple(_1,_2,_3,_4)","328":"Tuple5::::pureTuple(_1,_2,_3,_4)","329":"Tuple5::::pureTuple(_1,_2,_3,_4)","330":"Tuple5::::pureTuple(_1,_2,_3,_4)"},"test_reverse_method_lines_dic":{"35":"Tuple5Test::::setUp()","36":"Tuple5Test::::setUp()","37":"Tuple5Test::::setUp()","38":"Tuple5Test::::setUp()","40":"Tuple5Test::::testSubject()","41":"Tuple5Test::::testSubject()","42":"Tuple5Test::::testSubject()","43":"Tuple5Test::::testSubject()","44":"Tuple5Test::::testSubject()","45":"Tuple5Test::::testSubject()","46":"Tuple5Test::::testSubject()","47":"Tuple5Test::::testSubject()","48":"Tuple5Test::::testSubject()","49":"Tuple5Test::::testSubject()","51":"Tuple5Test::::head()","52":"Tuple5Test::::head()","53":"Tuple5Test::::head()","54":"Tuple5Test::::head()","56":"Tuple5Test::::tail()","57":"Tuple5Test::::tail()","58":"Tuple5Test::::tail()","59":"Tuple5Test::::tail()","61":"Tuple5Test::::cons()","62":"Tuple5Test::::cons()","63":"Tuple5Test::::cons()","64":"Tuple5Test::::cons()","66":"Tuple5Test::::snoc()","67":"Tuple5Test::::snoc()","68":"Tuple5Test::::snoc()","69":"Tuple5Test::::snoc()","71":"Tuple5Test::::accessors()","72":"Tuple5Test::::accessors()","73":"Tuple5Test::::accessors()","74":"Tuple5Test::::accessors()","75":"Tuple5Test::::accessors()","76":"Tuple5Test::::accessors()","77":"Tuple5Test::::accessors()","78":"Tuple5Test::::accessors()","80":"Tuple5Test::::randomAccess()","81":"Tuple5Test::::randomAccess()","82":"Tuple5Test::::randomAccess()","83":"Tuple5Test::::randomAccess()","84":"Tuple5Test::::randomAccess()","85":"Tuple5Test::::randomAccess()","86":"Tuple5Test::::randomAccess()","87":"Tuple5Test::::randomAccess()","88":"Tuple5Test::::randomAccess()","89":"Tuple5Test::::randomAccess()","90":"Tuple5Test::::randomAccess()","91":"Tuple5Test::::randomAccess()","92":"Tuple5Test::::randomAccess()","93":"Tuple5Test::::randomAccess()","94":"Tuple5Test::::randomAccess()","95":"Tuple5Test::::randomAccess()","97":"Tuple5Test::::into()","98":"Tuple5Test::::into()","99":"Tuple5Test::::into()","100":"Tuple5Test::::into()","101":"Tuple5Test::::into()","103":"Tuple5Test::::fill()","104":"Tuple5Test::::fill()","105":"Tuple5Test::::fill()","106":"Tuple5Test::::fill()","108":"Tuple5Test::::zipPrecedence()","109":"Tuple5Test::::zipPrecedence()","110":"Tuple5Test::::zipPrecedence()","111":"Tuple5Test::::zipPrecedence()","112":"Tuple5Test::::zipPrecedence()","113":"Tuple5Test::::zipPrecedence()","114":"Tuple5Test::::zipPrecedence()","115":"Tuple5Test::::zipPrecedence()","117":"Tuple5Test::::flatMapPrecedence()","118":"Tuple5Test::::flatMapPrecedence()","119":"Tuple5Test::::flatMapPrecedence()","120":"Tuple5Test::::flatMapPrecedence()","121":"Tuple5Test::::flatMapPrecedence()","122":"Tuple5Test::::flatMapPrecedence()","124":"Tuple5Test::::fromIterable()","125":"Tuple5Test::::fromIterable()","126":"Tuple5Test::::fromIterable()","127":"Tuple5Test::::fromIterable()","128":"Tuple5Test::::fromIterable()","129":"Tuple5Test::::fromIterable()","131":"Tuple5Test::::staticPure()","132":"Tuple5Test::::staticPure()","133":"Tuple5Test::::staticPure()","134":"Tuple5Test::::staticPure()","135":"Tuple5Test::::staticPure()","137":"Tuple5Test::::init()","138":"Tuple5Test::::init()","139":"Tuple5Test::::init()","140":"Tuple5Test::::init()","141":"Tuple5Test::::init()"},"tests":[{"test_lines":[35,38],"covered_lines":[49,50,51,52,53,54,55]},{"test_lines":[40,49],"covered_lines":[49,50,51,52,53,54,55]},{"test_lines":[51,54],"covered_lines":[49,50,51,52,53,54,55]},{"test_lines":[56,59],"covered_lines":[49,50,51,52,53,54,55]},{"test_lines":[61,64],"covered_lines":[49,50,51,52,53,54,55,62,81,89,97,105,113]},{"test_lines":[66,69],"covered_lines":[49,50,51,52,53,54,55,62,73,81,89,97,105,113]},{"test_lines":[71,78],"covered_lines":[49,50,51,52,53,54,55,81,89,97,105,113]},{"test_lines":[80,95],"covered_lines":[49,50,51,52,53,54,55,81,89,97,105,113]},{"test_lines":[97,101],"covered_lines":[49,50,51,52,53,54,55,81,89,97,105,113]},{"test_lines":[103,106],"covered_lines":[49,50,51,52,53,54,55,295]},{"test_lines":[108,115],"covered_lines":[49,50,51,52,53,54,55,113,177,210,219,253]},{"test_lines":[117,122],"covered_lines":[49,50,51,52,53,54,55,113,210,253]},{"test_lines":[124,129],"covered_lines":[49,50,51,52,53,54,55,307]},{"test_lines":[131,135],"covered_lines":[49,50,51,52,53,54,55,324,327]},{"test_lines":[137,141],"covered_lines":[49,50,51,52,53,54,55,129,283]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/adt/product/Product4.java":{"class_content":["package com.jnape.palatable.lambda.adt.product;\n","\n","import com.jnape.palatable.lambda.adt.hlist.Tuple4;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn4;\n","\n","/**\n"," * A product with four values.\n"," *\n"," * @param <_1> The first element type\n"," * @param <_2> The second element type\n"," * @param <_3> The third element type\n"," * @param <_4> The fourth element type\n"," * @see Product2\n"," * @see Tuple4\n"," */\n","public interface Product4<_1, _2, _3, _4> extends Product3<_1, _2, _3> {\n","\n","    /**\n","     * Retrieve the fourth element.\n","     *\n","     * @return the fourth element\n","     */\n","    _4 _4();\n","\n","    /**\n","     * Destructure and apply this product to a function accepting the same number of arguments as this product's\n","     * slots. This can be thought of as a kind of dual to uncurrying a function and applying a product to it.\n","     *\n","     * @param fn  the function to apply\n","     * @param <R> the return type of the function\n","     * @return the result of applying the destructured product to the function\n","     */\n","    default <R> R into(Fn4<? super _1, ? super _2, ? super _3, ? super _4, ? extends R> fn) {\n","        return Product3.super.<Fn1<? super _4, ? extends R>>into(fn).apply(_4());\n","    }\n","\n","    /**\n","     * Rotate the first four values of this product one slot to the left.\n","     *\n","     * @return the left-rotated product\n","     */\n","    default Product4<_2, _3, _4, _1> rotateL4() {\n","        return into((_1, _2, _3, _4) -> product(_2, _3, _4, _1));\n","    }\n","\n","    /**\n","     * Rotate the first four values of this product one slot to the right.\n","     *\n","     * @return the right-rotated product\n","     */\n","    default Product4<_4, _1, _2, _3> rotateR4() {\n","        return into((_1, _2, _3, _4) -> product(_4, _1, _2, _3));\n","    }\n","\n","    @Override\n","    default Product4<_2, _3, _1, _4> rotateL3() {\n","        return into((_1, _2, _3, _4) -> product(_2, _3, _1, _4));\n","    }\n","\n","    @Override\n","    default Product4<_3, _1, _2, _4> rotateR3() {\n","        return into((_1, _2, _3, _4) -> product(_3, _1, _2, _4));\n","    }\n","\n","    @Override\n","    default Product4<_2, _1, _3, _4> invert() {\n","        return into((_1, _2, _3, _4) -> product(_2, _1, _3, _4));\n","    }\n","\n","    /**\n","     * Static factory method for creating a generic {@link Product4}.\n","     *\n","     * @param _1   the first slot\n","     * @param _2   the second slot\n","     * @param _3   the third slot\n","     * @param _4   the fourth slot\n","     * @param <_1> the first slot type\n","     * @param <_2> the second slot type\n","     * @param <_3> the third slot type\n","     * @param <_4> the fourth slot type\n","     * @return the {@link Product4}\n","     */\n","    static <_1, _2, _3, _4> Product4<_1, _2, _3, _4> product(_1 _1, _2 _2, _3 _3, _4 _4) {\n","        return new Product4<_1, _2, _3, _4>() {\n","            @Override\n","            public _1 _1() {\n","                return _1;\n","            }\n","\n","            @Override\n","            public _2 _2() {\n","                return _2;\n","            }\n","\n","            @Override\n","            public _3 _3() {\n","                return _3;\n","            }\n","\n","            @Override\n","            public _4 _4() {\n","                return _4;\n","            }\n","        };\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.adt.product;\n","\n","import org.junit.Before;\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.product.Product4.product;\n","import static org.junit.Assert.assertEquals;\n","\n","public class Product4Test {\n","\n","    private Product4<String, String, String, String> product;\n","\n","    @Before\n","    public void setUp() {\n","        product = product(\"a\", \"b\", \"c\", \"d\");\n","    }\n","\n","    @Test\n","    public void staticFactoryMethod() {\n","        assertEquals(\"a\", product._1());\n","        assertEquals(\"b\", product._2());\n","        assertEquals(\"c\", product._3());\n","        assertEquals(\"d\", product._4());\n","    }\n","\n","    @Test\n","    public void rotations() {\n","        assertEquals(\"bacd\", product.invert().into((a, b, c, d) -> a + b + c + d));\n","        assertEquals(\"bcad\", product.rotateL3().into((a, b, c, d) -> a + b + c + d));\n","        assertEquals(\"cabd\", product.rotateR3().into((a, b, c, d) -> a + b + c + d));\n","        assertEquals(\"bcda\", product.rotateL4().into((a, b, c, d) -> a + b + c + d));\n","        assertEquals(\"dabc\", product.rotateR4().into((a, b, c, d) -> a + b + c + d));\n","    }\n","}"],"method_lines_dic":{"Product4::::_4()":[24,24],"Product4::::into(com.jnape.palatable.lambda.functions.Fn4<? super _1, ? super _2, ? super _3, ? super _4, ? extends R>)":[34,36],"Product4::::rotateL4()":[43,45],"Product4::::rotateR4()":[52,54],"Product4::::rotateL3()":[56,59],"Product4::::rotateR3()":[61,64],"Product4::::invert()":[66,69],"Product4::::product(_1,_2,_3,_4)":[84,106]},"test_method_lines_dic":{"Product4Test::::setUp()":[13,16],"Product4Test::::staticFactoryMethod()":[18,24],"Product4Test::::rotations()":[26,33]},"reverse_method_lines_dic":{"24":"Product4::::_4()","34":"Product4::::into(com.jnape.palatable.lambda.functions.Fn4<? super _1, ? super _2, ? super _3, ? super _4, ? extends R>)","35":"Product4::::into(com.jnape.palatable.lambda.functions.Fn4<? super _1, ? super _2, ? super _3, ? super _4, ? extends R>)","36":"Product4::::into(com.jnape.palatable.lambda.functions.Fn4<? super _1, ? super _2, ? super _3, ? super _4, ? extends R>)","43":"Product4::::rotateL4()","44":"Product4::::rotateL4()","45":"Product4::::rotateL4()","52":"Product4::::rotateR4()","53":"Product4::::rotateR4()","54":"Product4::::rotateR4()","56":"Product4::::rotateL3()","57":"Product4::::rotateL3()","58":"Product4::::rotateL3()","59":"Product4::::rotateL3()","61":"Product4::::rotateR3()","62":"Product4::::rotateR3()","63":"Product4::::rotateR3()","64":"Product4::::rotateR3()","66":"Product4::::invert()","67":"Product4::::invert()","68":"Product4::::invert()","69":"Product4::::invert()","84":"Product4::::product(_1,_2,_3,_4)","85":"Product4::::product(_1,_2,_3,_4)","86":"Product4::::product(_1,_2,_3,_4)","87":"Product4::::product(_1,_2,_3,_4)","88":"Product4::::product(_1,_2,_3,_4)","89":"Product4::::product(_1,_2,_3,_4)","90":"Product4::::product(_1,_2,_3,_4)","91":"Product4::::product(_1,_2,_3,_4)","92":"Product4::::product(_1,_2,_3,_4)","93":"Product4::::product(_1,_2,_3,_4)","94":"Product4::::product(_1,_2,_3,_4)","95":"Product4::::product(_1,_2,_3,_4)","96":"Product4::::product(_1,_2,_3,_4)","97":"Product4::::product(_1,_2,_3,_4)","98":"Product4::::product(_1,_2,_3,_4)","99":"Product4::::product(_1,_2,_3,_4)","100":"Product4::::product(_1,_2,_3,_4)","101":"Product4::::product(_1,_2,_3,_4)","102":"Product4::::product(_1,_2,_3,_4)","103":"Product4::::product(_1,_2,_3,_4)","104":"Product4::::product(_1,_2,_3,_4)","105":"Product4::::product(_1,_2,_3,_4)","106":"Product4::::product(_1,_2,_3,_4)"},"test_reverse_method_lines_dic":{"13":"Product4Test::::setUp()","14":"Product4Test::::setUp()","15":"Product4Test::::setUp()","16":"Product4Test::::setUp()","18":"Product4Test::::staticFactoryMethod()","19":"Product4Test::::staticFactoryMethod()","20":"Product4Test::::staticFactoryMethod()","21":"Product4Test::::staticFactoryMethod()","22":"Product4Test::::staticFactoryMethod()","23":"Product4Test::::staticFactoryMethod()","24":"Product4Test::::staticFactoryMethod()","26":"Product4Test::::rotations()","27":"Product4Test::::rotations()","28":"Product4Test::::rotations()","29":"Product4Test::::rotations()","30":"Product4Test::::rotations()","31":"Product4Test::::rotations()","32":"Product4Test::::rotations()","33":"Product4Test::::rotations()"},"tests":[{"test_lines":[18,24],"covered_lines":[85,88,93,98,103]},{"test_lines":[26,33],"covered_lines":[35,44,53,58,63,68,85,88,93,98,103]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/adt/product/Product5.java":{"class_content":["package com.jnape.palatable.lambda.adt.product;\n","\n","import com.jnape.palatable.lambda.adt.hlist.Tuple5;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn5;\n","\n","/**\n"," * A product with five values.\n"," *\n"," * @param <_1> The first element type\n"," * @param <_2> The second element type\n"," * @param <_3> The third element type\n"," * @param <_4> The fourth element type\n"," * @param <_5> The fifth element type\n"," * @see Product2\n"," * @see Tuple5\n"," */\n","public interface Product5<_1, _2, _3, _4, _5> extends Product4<_1, _2, _3, _4> {\n","\n","    /**\n","     * Retrieve the fifth element.\n","     *\n","     * @return the fifth element\n","     */\n","    _5 _5();\n","\n","    /**\n","     * Destructure and apply this product to a function accepting the same number of arguments as this product's\n","     * slots. This can be thought of as a kind of dual to uncurrying a function and applying a product to it.\n","     *\n","     * @param fn  the function to apply\n","     * @param <R> the return type of the function\n","     * @return the result of applying the destructured product to the function\n","     */\n","    default <R> R into(Fn5<? super _1, ? super _2, ? super _3, ? super _4, ? super _5, ? extends R> fn) {\n","        return Product4.super.<Fn1<? super _5, ? extends R>>into(fn).apply(_5());\n","    }\n","\n","    /**\n","     * Rotate the first five values of this product one slot to the left.\n","     *\n","     * @return the left-rotated product\n","     */\n","    default Product5<_2, _3, _4, _5, _1> rotateL5() {\n","        return into((_1, _2, _3, _4, _5) -> product(_2, _3, _4, _5, _1));\n","    }\n","\n","    /**\n","     * Rotate the first five values of this product one slot to the right.\n","     *\n","     * @return the right-rotated product\n","     */\n","    default Product5<_5, _1, _2, _3, _4> rotateR5() {\n","        return into((_1, _2, _3, _4, _5) -> product(_5, _1, _2, _3, _4));\n","    }\n","\n","    @Override\n","    default Product5<_2, _3, _4, _1, _5> rotateL4() {\n","        return into((_1, _2, _3, _4, _5) -> product(_2, _3, _4, _1, _5));\n","    }\n","\n","    @Override\n","    default Product5<_4, _1, _2, _3, _5> rotateR4() {\n","        return into((_1, _2, _3, _4, _5) -> product(_4, _1, _2, _3, _5));\n","    }\n","\n","    @Override\n","    default Product5<_2, _3, _1, _4, _5> rotateL3() {\n","        return into((_1, _2, _3, _4, _5) -> product(_2, _3, _1, _4, _5));\n","    }\n","\n","    @Override\n","    default Product5<_3, _1, _2, _4, _5> rotateR3() {\n","        return into((_1, _2, _3, _4, _5) -> product(_3, _1, _2, _4, _5));\n","    }\n","\n","    @Override\n","    default Product5<_2, _1, _3, _4, _5> invert() {\n","        return into((_1, _2, _3, _4, _5) -> product(_2, _1, _3, _4, _5));\n","    }\n","\n","    /**\n","     * Static factory method for creating a generic {@link Product5}.\n","     *\n","     * @param _1   the first slot\n","     * @param _2   the second slot\n","     * @param _3   the third slot\n","     * @param _4   the fourth slot\n","     * @param _5   the fifth slot\n","     * @param <_1> the first slot type\n","     * @param <_2> the second slot type\n","     * @param <_3> the third slot type\n","     * @param <_4> the fourth slot type\n","     * @param <_5> the fifth slot type\n","     * @return the {@link Product5}\n","     */\n","    static <_1, _2, _3, _4, _5> Product5<_1, _2, _3, _4, _5> product(_1 _1, _2 _2, _3 _3, _4 _4, _5 _5) {\n","        return new Product5<_1, _2, _3, _4, _5>() {\n","            @Override\n","            public _1 _1() {\n","                return _1;\n","            }\n","\n","            @Override\n","            public _2 _2() {\n","                return _2;\n","            }\n","\n","            @Override\n","            public _3 _3() {\n","                return _3;\n","            }\n","\n","            @Override\n","            public _4 _4() {\n","                return _4;\n","            }\n","\n","            @Override\n","            public _5 _5() {\n","                return _5;\n","            }\n","        };\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.adt.product;\n","\n","import org.junit.Before;\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.product.Product5.product;\n","import static org.junit.Assert.assertEquals;\n","\n","public class Product5Test {\n","\n","    private Product5<String, String, String, String, String> product;\n","\n","    @Before\n","    public void setUp() {\n","        product = product(\"a\", \"b\", \"c\", \"d\", \"e\");\n","    }\n","\n","    @Test\n","    public void staticFactoryMethod() {\n","        assertEquals(\"a\", product._1());\n","        assertEquals(\"b\", product._2());\n","        assertEquals(\"c\", product._3());\n","        assertEquals(\"d\", product._4());\n","        assertEquals(\"e\", product._5());\n","    }\n","\n","    @Test\n","    public void rotations() {\n","        assertEquals(\"bacde\", product.invert().into((a, b, c, d, e) -> a + b + c + d + e));\n","        assertEquals(\"bcade\", product.rotateL3().into((a, b, c, d, e) -> a + b + c + d + e));\n","        assertEquals(\"cabde\", product.rotateR3().into((a, b, c, d, e) -> a + b + c + d + e));\n","        assertEquals(\"bcdae\", product.rotateL4().into((a, b, c, d, e) -> a + b + c + d + e));\n","        assertEquals(\"dabce\", product.rotateR4().into((a, b, c, d, e) -> a + b + c + d + e));\n","        assertEquals(\"bcdea\", product.rotateL5().into((a, b, c, d, e) -> a + b + c + d + e));\n","        assertEquals(\"eabcd\", product.rotateR5().into((a, b, c, d, e) -> a + b + c + d + e));\n","    }\n","}"],"method_lines_dic":{"Product5::::_5()":[25,25],"Product5::::into(com.jnape.palatable.lambda.functions.Fn5<? super _1, ? super _2, ? super _3, ? super _4, ? super _5, ? extends R>)":[35,37],"Product5::::rotateL5()":[44,46],"Product5::::rotateR5()":[53,55],"Product5::::rotateL4()":[57,60],"Product5::::rotateR4()":[62,65],"Product5::::rotateL3()":[67,70],"Product5::::rotateR3()":[72,75],"Product5::::invert()":[77,80],"Product5::::product(_1,_2,_3,_4,_5)":[97,124]},"test_method_lines_dic":{"Product5Test::::setUp()":[13,16],"Product5Test::::staticFactoryMethod()":[18,25],"Product5Test::::rotations()":[27,36]},"reverse_method_lines_dic":{"25":"Product5::::_5()","35":"Product5::::into(com.jnape.palatable.lambda.functions.Fn5<? super _1, ? super _2, ? super _3, ? super _4, ? super _5, ? extends R>)","36":"Product5::::into(com.jnape.palatable.lambda.functions.Fn5<? super _1, ? super _2, ? super _3, ? super _4, ? super _5, ? extends R>)","37":"Product5::::into(com.jnape.palatable.lambda.functions.Fn5<? super _1, ? super _2, ? super _3, ? super _4, ? super _5, ? extends R>)","44":"Product5::::rotateL5()","45":"Product5::::rotateL5()","46":"Product5::::rotateL5()","53":"Product5::::rotateR5()","54":"Product5::::rotateR5()","55":"Product5::::rotateR5()","57":"Product5::::rotateL4()","58":"Product5::::rotateL4()","59":"Product5::::rotateL4()","60":"Product5::::rotateL4()","62":"Product5::::rotateR4()","63":"Product5::::rotateR4()","64":"Product5::::rotateR4()","65":"Product5::::rotateR4()","67":"Product5::::rotateL3()","68":"Product5::::rotateL3()","69":"Product5::::rotateL3()","70":"Product5::::rotateL3()","72":"Product5::::rotateR3()","73":"Product5::::rotateR3()","74":"Product5::::rotateR3()","75":"Product5::::rotateR3()","77":"Product5::::invert()","78":"Product5::::invert()","79":"Product5::::invert()","80":"Product5::::invert()","97":"Product5::::product(_1,_2,_3,_4,_5)","98":"Product5::::product(_1,_2,_3,_4,_5)","99":"Product5::::product(_1,_2,_3,_4,_5)","100":"Product5::::product(_1,_2,_3,_4,_5)","101":"Product5::::product(_1,_2,_3,_4,_5)","102":"Product5::::product(_1,_2,_3,_4,_5)","103":"Product5::::product(_1,_2,_3,_4,_5)","104":"Product5::::product(_1,_2,_3,_4,_5)","105":"Product5::::product(_1,_2,_3,_4,_5)","106":"Product5::::product(_1,_2,_3,_4,_5)","107":"Product5::::product(_1,_2,_3,_4,_5)","108":"Product5::::product(_1,_2,_3,_4,_5)","109":"Product5::::product(_1,_2,_3,_4,_5)","110":"Product5::::product(_1,_2,_3,_4,_5)","111":"Product5::::product(_1,_2,_3,_4,_5)","112":"Product5::::product(_1,_2,_3,_4,_5)","113":"Product5::::product(_1,_2,_3,_4,_5)","114":"Product5::::product(_1,_2,_3,_4,_5)","115":"Product5::::product(_1,_2,_3,_4,_5)","116":"Product5::::product(_1,_2,_3,_4,_5)","117":"Product5::::product(_1,_2,_3,_4,_5)","118":"Product5::::product(_1,_2,_3,_4,_5)","119":"Product5::::product(_1,_2,_3,_4,_5)","120":"Product5::::product(_1,_2,_3,_4,_5)","121":"Product5::::product(_1,_2,_3,_4,_5)","122":"Product5::::product(_1,_2,_3,_4,_5)","123":"Product5::::product(_1,_2,_3,_4,_5)","124":"Product5::::product(_1,_2,_3,_4,_5)"},"test_reverse_method_lines_dic":{"13":"Product5Test::::setUp()","14":"Product5Test::::setUp()","15":"Product5Test::::setUp()","16":"Product5Test::::setUp()","18":"Product5Test::::staticFactoryMethod()","19":"Product5Test::::staticFactoryMethod()","20":"Product5Test::::staticFactoryMethod()","21":"Product5Test::::staticFactoryMethod()","22":"Product5Test::::staticFactoryMethod()","23":"Product5Test::::staticFactoryMethod()","24":"Product5Test::::staticFactoryMethod()","25":"Product5Test::::staticFactoryMethod()","27":"Product5Test::::rotations()","28":"Product5Test::::rotations()","29":"Product5Test::::rotations()","30":"Product5Test::::rotations()","31":"Product5Test::::rotations()","32":"Product5Test::::rotations()","33":"Product5Test::::rotations()","34":"Product5Test::::rotations()","35":"Product5Test::::rotations()","36":"Product5Test::::rotations()"},"tests":[{"test_lines":[18,25],"covered_lines":[98,101,106,111,116,121]},{"test_lines":[27,36],"covered_lines":[36,45,54,59,64,69,74,79,98,101,106,111,116,121]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/adt/product/Product3.java":{"class_content":["package com.jnape.palatable.lambda.adt.product;\n","\n","import com.jnape.palatable.lambda.adt.hlist.Tuple3;\n","import com.jnape.palatable.lambda.functions.Fn3;\n","\n","/**\n"," * A product with three values.\n"," *\n"," * @param <_1> The first element type\n"," * @param <_2> The second element type\n"," * @param <_3> The third element type\n"," * @see Product2\n"," * @see Tuple3\n"," */\n","public interface Product3<_1, _2, _3> extends Product2<_1, _2> {\n","\n","    /**\n","     * Retrieve the third element.\n","     *\n","     * @return the third element\n","     */\n","    _3 _3();\n","\n","    /**\n","     * Destructure and apply this product to a function accepting the same number of arguments as this product's\n","     * slots. This can be thought of as a kind of dual to uncurrying a function and applying a product to it.\n","     *\n","     * @param fn  the function to apply\n","     * @param <R> the return type of the function\n","     * @return the result of applying the destructured product to the function\n","     */\n","    default <R> R into(Fn3<? super _1, ? super _2, ? super _3, ? extends R> fn) {\n","        return Product2.super.into(fn).apply(_3());\n","    }\n","\n","    /**\n","     * Rotate the first three values of this product one slot to the left.\n","     *\n","     * @return the left-rotated product\n","     */\n","    default Product3<_2, _3, _1> rotateL3() {\n","        return into((_1, _2, _3) -> product(_2, _3, _1));\n","    }\n","\n","    /**\n","     * Rotate the first three values of this product one slot to the right.\n","     *\n","     * @return the right-rotated product\n","     */\n","    default Product3<_3, _1, _2> rotateR3() {\n","        return into((_1, _2, _3) -> product(_3, _1, _2));\n","    }\n","\n","    @Override\n","    default Product3<_2, _1, _3> invert() {\n","        return into((_1, _2, _3) -> product(_2, _1, _3));\n","    }\n","\n","    /**\n","     * Static factory method for creating a generic {@link Product3}.\n","     *\n","     * @param _1   the first slot\n","     * @param _2   the second slot\n","     * @param _3   the third slot\n","     * @param <_1> the first slot type\n","     * @param <_2> the second slot type\n","     * @param <_3> the third slot type\n","     * @return the {@link Product3}\n","     */\n","    static <_1, _2, _3> Product3<_1, _2, _3> product(_1 _1, _2 _2, _3 _3) {\n","        return new Product3<_1, _2, _3>() {\n","            @Override\n","            public _1 _1() {\n","                return _1;\n","            }\n","\n","            @Override\n","            public _2 _2() {\n","                return _2;\n","            }\n","\n","            @Override\n","            public _3 _3() {\n","                return _3;\n","            }\n","        };\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.adt.product;\n","\n","import org.junit.Before;\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.product.Product3.product;\n","import static org.junit.Assert.assertEquals;\n","\n","public class Product3Test {\n","\n","    private Product3<String, String, String> product;\n","\n","    @Before\n","    public void setUp() {\n","        product = product(\"a\", \"b\", \"c\");\n","    }\n","\n","    @Test\n","    public void staticFactoryMethod() {\n","        assertEquals(\"a\", product._1());\n","        assertEquals(\"b\", product._2());\n","        assertEquals(\"c\", product._3());\n","    }\n","\n","    @Test\n","    public void rotations() {\n","        assertEquals(\"bac\", product.invert().into((a, b, c) -> a + b + c));\n","        assertEquals(\"bca\", product.rotateL3().into((a, b, c) -> a + b + c));\n","        assertEquals(\"cab\", product.rotateR3().into((a, b, c) -> a + b + c));\n","    }\n","}"],"method_lines_dic":{"Product3::::_3()":[22,22],"Product3::::into(com.jnape.palatable.lambda.functions.Fn3<? super _1, ? super _2, ? super _3, ? extends R>)":[32,34],"Product3::::rotateL3()":[41,43],"Product3::::rotateR3()":[50,52],"Product3::::invert()":[54,57],"Product3::::product(_1,_2,_3)":[70,87]},"test_method_lines_dic":{"Product3Test::::setUp()":[13,16],"Product3Test::::staticFactoryMethod()":[18,23],"Product3Test::::rotations()":[25,30]},"reverse_method_lines_dic":{"22":"Product3::::_3()","32":"Product3::::into(com.jnape.palatable.lambda.functions.Fn3<? super _1, ? super _2, ? super _3, ? extends R>)","33":"Product3::::into(com.jnape.palatable.lambda.functions.Fn3<? super _1, ? super _2, ? super _3, ? extends R>)","34":"Product3::::into(com.jnape.palatable.lambda.functions.Fn3<? super _1, ? super _2, ? super _3, ? extends R>)","41":"Product3::::rotateL3()","42":"Product3::::rotateL3()","43":"Product3::::rotateL3()","50":"Product3::::rotateR3()","51":"Product3::::rotateR3()","52":"Product3::::rotateR3()","54":"Product3::::invert()","55":"Product3::::invert()","56":"Product3::::invert()","57":"Product3::::invert()","70":"Product3::::product(_1,_2,_3)","71":"Product3::::product(_1,_2,_3)","72":"Product3::::product(_1,_2,_3)","73":"Product3::::product(_1,_2,_3)","74":"Product3::::product(_1,_2,_3)","75":"Product3::::product(_1,_2,_3)","76":"Product3::::product(_1,_2,_3)","77":"Product3::::product(_1,_2,_3)","78":"Product3::::product(_1,_2,_3)","79":"Product3::::product(_1,_2,_3)","80":"Product3::::product(_1,_2,_3)","81":"Product3::::product(_1,_2,_3)","82":"Product3::::product(_1,_2,_3)","83":"Product3::::product(_1,_2,_3)","84":"Product3::::product(_1,_2,_3)","85":"Product3::::product(_1,_2,_3)","86":"Product3::::product(_1,_2,_3)","87":"Product3::::product(_1,_2,_3)"},"test_reverse_method_lines_dic":{"13":"Product3Test::::setUp()","14":"Product3Test::::setUp()","15":"Product3Test::::setUp()","16":"Product3Test::::setUp()","18":"Product3Test::::staticFactoryMethod()","19":"Product3Test::::staticFactoryMethod()","20":"Product3Test::::staticFactoryMethod()","21":"Product3Test::::staticFactoryMethod()","22":"Product3Test::::staticFactoryMethod()","23":"Product3Test::::staticFactoryMethod()","25":"Product3Test::::rotations()","26":"Product3Test::::rotations()","27":"Product3Test::::rotations()","28":"Product3Test::::rotations()","29":"Product3Test::::rotations()","30":"Product3Test::::rotations()"},"tests":[{"test_lines":[18,23],"covered_lines":[71,74,79,84]},{"test_lines":[25,30],"covered_lines":[33,42,51,56,71,74,79,84]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/adt/product/Product7.java":{"class_content":["package com.jnape.palatable.lambda.adt.product;\n","\n","import com.jnape.palatable.lambda.adt.hlist.Tuple7;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn7;\n","\n","/**\n"," * A product with seven values.\n"," *\n"," * @param <_1> The first element type\n"," * @param <_2> The second element type\n"," * @param <_3> The third element type\n"," * @param <_4> The fourth element type\n"," * @param <_5> The fifth element type\n"," * @param <_6> The sixth element type\n"," * @param <_7> The seventh element type\n"," * @see Product2\n"," * @see Tuple7\n"," */\n","public interface Product7<_1, _2, _3, _4, _5, _6, _7> extends Product6<_1, _2, _3, _4, _5, _6> {\n","\n","    /**\n","     * Retrieve the seventh element.\n","     *\n","     * @return the seventh element\n","     */\n","    _7 _7();\n","\n","    /**\n","     * Destructure and apply this product to a function accepting the same number of arguments as this product's\n","     * slots. This can be thought of as a kind of dual to uncurrying a function and applying a product to it.\n","     *\n","     * @param fn  the function to apply\n","     * @param <R> the return type of the function\n","     * @return the result of applying the destructured product to the function\n","     */\n","    default <R> R into(\n","            Fn7<? super _1, ? super _2, ? super _3, ? super _4, ? super _5, ? super _6, ? super _7, ? extends R> fn) {\n","        return Product6.super.<Fn1<? super _7, ? extends R>>into(fn).apply(_7());\n","    }\n","\n","    /**\n","     * Rotate the first seven values of this product one slot to the left.\n","     *\n","     * @return the left-rotated product\n","     */\n","    default Product7<_2, _3, _4, _5, _6, _7, _1> rotateL7() {\n","        return into((_1, _2, _3, _4, _5, _6, _7) -> product(_2, _3, _4, _5, _6, _7, _1));\n","    }\n","\n","    /**\n","     * Rotate the first seven values of this product one slot to the right.\n","     *\n","     * @return the right-rotated product\n","     */\n","    default Product7<_7, _1, _2, _3, _4, _5, _6> rotateR7() {\n","        return into((_1, _2, _3, _4, _5, _6, _7) -> product(_7, _1, _2, _3, _4, _5, _6));\n","    }\n","\n","    @Override\n","    default Product7<_2, _3, _4, _5, _6, _1, _7> rotateL6() {\n","        return into((_1, _2, _3, _4, _5, _6, _7) -> product(_2, _3, _4, _5, _6, _1, _7));\n","    }\n","\n","    @Override\n","    default Product7<_6, _1, _2, _3, _4, _5, _7> rotateR6() {\n","        return into((_1, _2, _3, _4, _5, _6, _7) -> product(_6, _1, _2, _3, _4, _5, _7));\n","    }\n","\n","    @Override\n","    default Product7<_2, _3, _4, _5, _1, _6, _7> rotateL5() {\n","        return into((_1, _2, _3, _4, _5, _6, _7) -> product(_2, _3, _4, _5, _1, _6, _7));\n","    }\n","\n","    @Override\n","    default Product7<_5, _1, _2, _3, _4, _6, _7> rotateR5() {\n","        return into((_1, _2, _3, _4, _5, _6, _7) -> product(_5, _1, _2, _3, _4, _6, _7));\n","    }\n","\n","    @Override\n","    default Product7<_2, _3, _4, _1, _5, _6, _7> rotateL4() {\n","        return into((_1, _2, _3, _4, _5, _6, _7) -> product(_2, _3, _4, _1, _5, _6, _7));\n","    }\n","\n","    @Override\n","    default Product7<_4, _1, _2, _3, _5, _6, _7> rotateR4() {\n","        return into((_1, _2, _3, _4, _5, _6, _7) -> product(_4, _1, _2, _3, _5, _6, _7));\n","    }\n","\n","    @Override\n","    default Product7<_2, _3, _1, _4, _5, _6, _7> rotateL3() {\n","        return into((_1, _2, _3, _4, _5, _6, _7) -> product(_2, _3, _1, _4, _5, _6, _7));\n","    }\n","\n","    @Override\n","    default Product7<_3, _1, _2, _4, _5, _6, _7> rotateR3() {\n","        return into((_1, _2, _3, _4, _5, _6, _7) -> product(_3, _1, _2, _4, _5, _6, _7));\n","    }\n","\n","    @Override\n","    default Product7<_2, _1, _3, _4, _5, _6, _7> invert() {\n","        return into((_1, _2, _3, _4, _5, _6, _7) -> product(_2, _1, _3, _4, _5, _6, _7));\n","    }\n","\n","    /**\n","     * Static factory method for creating a generic {@link Product7}.\n","     *\n","     * @param _1   the first slot\n","     * @param _2   the second slot\n","     * @param _3   the third slot\n","     * @param _4   the fourth slot\n","     * @param _5   the fifth slot\n","     * @param _6   the sixth slot\n","     * @param _7   the seventh slot\n","     * @param <_1> the first slot type\n","     * @param <_2> the second slot type\n","     * @param <_3> the third slot type\n","     * @param <_4> the fourth slot type\n","     * @param <_5> the fifth slot type\n","     * @param <_6> the sixth slot type\n","     * @param <_7> the seventh slot type\n","     * @return the {@link Product7}\n","     */\n","    static <_1, _2, _3, _4, _5, _6, _7> Product7<_1, _2, _3, _4, _5, _6, _7> product(_1 _1, _2 _2, _3 _3, _4 _4, _5 _5,\n","                                                                                     _6 _6, _7 _7) {\n","        return new Product7<_1, _2, _3, _4, _5, _6, _7>() {\n","            @Override\n","            public _1 _1() {\n","                return _1;\n","            }\n","\n","            @Override\n","            public _2 _2() {\n","                return _2;\n","            }\n","\n","            @Override\n","            public _3 _3() {\n","                return _3;\n","            }\n","\n","            @Override\n","            public _4 _4() {\n","                return _4;\n","            }\n","\n","            @Override\n","            public _5 _5() {\n","                return _5;\n","            }\n","\n","            @Override\n","            public _6 _6() {\n","                return _6;\n","            }\n","\n","            @Override\n","            public _7 _7() {\n","                return _7;\n","            }\n","        };\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.adt.product;\n","\n","import org.junit.Before;\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.product.Product7.product;\n","import static org.junit.Assert.assertEquals;\n","\n","public class Product7Test {\n","\n","    private Product7<String, String, String, String, String, String, String> product;\n","\n","    @Before\n","    public void setUp() {\n","        product = product(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\");\n","    }\n","\n","    @Test\n","    public void staticFactoryMethod() {\n","        assertEquals(\"a\", product._1());\n","        assertEquals(\"b\", product._2());\n","        assertEquals(\"c\", product._3());\n","        assertEquals(\"d\", product._4());\n","        assertEquals(\"e\", product._5());\n","        assertEquals(\"f\", product._6());\n","        assertEquals(\"g\", product._7());\n","    }\n","\n","    @Test\n","    public void rotations() {\n","        assertEquals(\"bacdefg\", product.invert().into((a, b, c, d, e, f, g) -> a + b + c + d + e + f + g));\n","        assertEquals(\"bcadefg\", product.rotateL3().into((a, b, c, d, e, f, g) -> a + b + c + d + e + f + g));\n","        assertEquals(\"cabdefg\", product.rotateR3().into((a, b, c, d, e, f, g) -> a + b + c + d + e + f + g));\n","        assertEquals(\"bcdaefg\", product.rotateL4().into((a, b, c, d, e, f, g) -> a + b + c + d + e + f + g));\n","        assertEquals(\"dabcefg\", product.rotateR4().into((a, b, c, d, e, f, g) -> a + b + c + d + e + f + g));\n","        assertEquals(\"bcdeafg\", product.rotateL5().into((a, b, c, d, e, f, g) -> a + b + c + d + e + f + g));\n","        assertEquals(\"eabcdfg\", product.rotateR5().into((a, b, c, d, e, f, g) -> a + b + c + d + e + f + g));\n","        assertEquals(\"bcdefag\", product.rotateL6().into((a, b, c, d, e, f, g) -> a + b + c + d + e + f + g));\n","        assertEquals(\"fabcdeg\", product.rotateR6().into((a, b, c, d, e, f, g) -> a + b + c + d + e + f + g));\n","        assertEquals(\"bcdefga\", product.rotateL7().into((a, b, c, d, e, f, g) -> a + b + c + d + e + f + g));\n","        assertEquals(\"gabcdef\", product.rotateR7().into((a, b, c, d, e, f, g) -> a + b + c + d + e + f + g));\n","    }\n","}"],"method_lines_dic":{"Product7::::_7()":[27,27],"Product7::::into(com.jnape.palatable.lambda.functions.Fn7<? super _1, ? super _2, ? super _3, ? super _4, ? super _5, ? super _6, ? super _7, ? extends R>)":[37,40],"Product7::::rotateL7()":[47,49],"Product7::::rotateR7()":[56,58],"Product7::::rotateL6()":[60,63],"Product7::::rotateR6()":[65,68],"Product7::::rotateL5()":[70,73],"Product7::::rotateR5()":[75,78],"Product7::::rotateL4()":[80,83],"Product7::::rotateR4()":[85,88],"Product7::::rotateL3()":[90,93],"Product7::::rotateR3()":[95,98],"Product7::::invert()":[100,103],"Product7::::product(_1,_2,_3,_4,_5,_6,_7)":[124,162]},"test_method_lines_dic":{"Product7Test::::setUp()":[13,16],"Product7Test::::staticFactoryMethod()":[18,27],"Product7Test::::rotations()":[29,42]},"reverse_method_lines_dic":{"27":"Product7::::_7()","37":"Product7::::into(com.jnape.palatable.lambda.functions.Fn7<? super _1, ? super _2, ? super _3, ? super _4, ? super _5, ? super _6, ? super _7, ? extends R>)","38":"Product7::::into(com.jnape.palatable.lambda.functions.Fn7<? super _1, ? super _2, ? super _3, ? super _4, ? super _5, ? super _6, ? super _7, ? extends R>)","39":"Product7::::into(com.jnape.palatable.lambda.functions.Fn7<? super _1, ? super _2, ? super _3, ? super _4, ? super _5, ? super _6, ? super _7, ? extends R>)","40":"Product7::::into(com.jnape.palatable.lambda.functions.Fn7<? super _1, ? super _2, ? super _3, ? super _4, ? super _5, ? super _6, ? super _7, ? extends R>)","47":"Product7::::rotateL7()","48":"Product7::::rotateL7()","49":"Product7::::rotateL7()","56":"Product7::::rotateR7()","57":"Product7::::rotateR7()","58":"Product7::::rotateR7()","60":"Product7::::rotateL6()","61":"Product7::::rotateL6()","62":"Product7::::rotateL6()","63":"Product7::::rotateL6()","65":"Product7::::rotateR6()","66":"Product7::::rotateR6()","67":"Product7::::rotateR6()","68":"Product7::::rotateR6()","70":"Product7::::rotateL5()","71":"Product7::::rotateL5()","72":"Product7::::rotateL5()","73":"Product7::::rotateL5()","75":"Product7::::rotateR5()","76":"Product7::::rotateR5()","77":"Product7::::rotateR5()","78":"Product7::::rotateR5()","80":"Product7::::rotateL4()","81":"Product7::::rotateL4()","82":"Product7::::rotateL4()","83":"Product7::::rotateL4()","85":"Product7::::rotateR4()","86":"Product7::::rotateR4()","87":"Product7::::rotateR4()","88":"Product7::::rotateR4()","90":"Product7::::rotateL3()","91":"Product7::::rotateL3()","92":"Product7::::rotateL3()","93":"Product7::::rotateL3()","95":"Product7::::rotateR3()","96":"Product7::::rotateR3()","97":"Product7::::rotateR3()","98":"Product7::::rotateR3()","100":"Product7::::invert()","101":"Product7::::invert()","102":"Product7::::invert()","103":"Product7::::invert()","124":"Product7::::product(_1,_2,_3,_4,_5,_6,_7)","125":"Product7::::product(_1,_2,_3,_4,_5,_6,_7)","126":"Product7::::product(_1,_2,_3,_4,_5,_6,_7)","127":"Product7::::product(_1,_2,_3,_4,_5,_6,_7)","128":"Product7::::product(_1,_2,_3,_4,_5,_6,_7)","129":"Product7::::product(_1,_2,_3,_4,_5,_6,_7)","130":"Product7::::product(_1,_2,_3,_4,_5,_6,_7)","131":"Product7::::product(_1,_2,_3,_4,_5,_6,_7)","132":"Product7::::product(_1,_2,_3,_4,_5,_6,_7)","133":"Product7::::product(_1,_2,_3,_4,_5,_6,_7)","134":"Product7::::product(_1,_2,_3,_4,_5,_6,_7)","135":"Product7::::product(_1,_2,_3,_4,_5,_6,_7)","136":"Product7::::product(_1,_2,_3,_4,_5,_6,_7)","137":"Product7::::product(_1,_2,_3,_4,_5,_6,_7)","138":"Product7::::product(_1,_2,_3,_4,_5,_6,_7)","139":"Product7::::product(_1,_2,_3,_4,_5,_6,_7)","140":"Product7::::product(_1,_2,_3,_4,_5,_6,_7)","141":"Product7::::product(_1,_2,_3,_4,_5,_6,_7)","142":"Product7::::product(_1,_2,_3,_4,_5,_6,_7)","143":"Product7::::product(_1,_2,_3,_4,_5,_6,_7)","144":"Product7::::product(_1,_2,_3,_4,_5,_6,_7)","145":"Product7::::product(_1,_2,_3,_4,_5,_6,_7)","146":"Product7::::product(_1,_2,_3,_4,_5,_6,_7)","147":"Product7::::product(_1,_2,_3,_4,_5,_6,_7)","148":"Product7::::product(_1,_2,_3,_4,_5,_6,_7)","149":"Product7::::product(_1,_2,_3,_4,_5,_6,_7)","150":"Product7::::product(_1,_2,_3,_4,_5,_6,_7)","151":"Product7::::product(_1,_2,_3,_4,_5,_6,_7)","152":"Product7::::product(_1,_2,_3,_4,_5,_6,_7)","153":"Product7::::product(_1,_2,_3,_4,_5,_6,_7)","154":"Product7::::product(_1,_2,_3,_4,_5,_6,_7)","155":"Product7::::product(_1,_2,_3,_4,_5,_6,_7)","156":"Product7::::product(_1,_2,_3,_4,_5,_6,_7)","157":"Product7::::product(_1,_2,_3,_4,_5,_6,_7)","158":"Product7::::product(_1,_2,_3,_4,_5,_6,_7)","159":"Product7::::product(_1,_2,_3,_4,_5,_6,_7)","160":"Product7::::product(_1,_2,_3,_4,_5,_6,_7)","161":"Product7::::product(_1,_2,_3,_4,_5,_6,_7)","162":"Product7::::product(_1,_2,_3,_4,_5,_6,_7)"},"test_reverse_method_lines_dic":{"13":"Product7Test::::setUp()","14":"Product7Test::::setUp()","15":"Product7Test::::setUp()","16":"Product7Test::::setUp()","18":"Product7Test::::staticFactoryMethod()","19":"Product7Test::::staticFactoryMethod()","20":"Product7Test::::staticFactoryMethod()","21":"Product7Test::::staticFactoryMethod()","22":"Product7Test::::staticFactoryMethod()","23":"Product7Test::::staticFactoryMethod()","24":"Product7Test::::staticFactoryMethod()","25":"Product7Test::::staticFactoryMethod()","26":"Product7Test::::staticFactoryMethod()","27":"Product7Test::::staticFactoryMethod()","29":"Product7Test::::rotations()","30":"Product7Test::::rotations()","31":"Product7Test::::rotations()","32":"Product7Test::::rotations()","33":"Product7Test::::rotations()","34":"Product7Test::::rotations()","35":"Product7Test::::rotations()","36":"Product7Test::::rotations()","37":"Product7Test::::rotations()","38":"Product7Test::::rotations()","39":"Product7Test::::rotations()","40":"Product7Test::::rotations()","41":"Product7Test::::rotations()","42":"Product7Test::::rotations()"},"tests":[{"test_lines":[18,27],"covered_lines":[126,129,134,139,144,149,154,159]},{"test_lines":[29,42],"covered_lines":[39,48,57,62,67,72,77,82,87,92,97,102,126,129,134,139,144,149,154,159]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/adt/product/Product2.java":{"class_content":["package com.jnape.palatable.lambda.adt.product;\n","\n","import com.jnape.palatable.lambda.adt.hlist.Tuple2;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","\n","import java.util.Map;\n","\n","/**\n"," * The minimal shape of the combination of two potentially distinctly typed values, supporting destructuring via\n"," * explicitly named indexing methods, as well as via a combining function.\n"," * <p>\n"," * For more information, read about <a href=\"https://en.wikipedia.org/wiki/Product_type\">products</a>.\n"," *\n"," * @param <_1> The first element type\n"," * @param <_2> The second element type\n"," * @see Tuple2\n"," */\n","public interface Product2<_1, _2> extends Map.Entry<_1, _2> {\n","\n","    /**\n","     * Retrieve the first element.\n","     *\n","     * @return the first element\n","     */\n","    _1 _1();\n","\n","    /**\n","     * Retrieve the second element.\n","     *\n","     * @return the second element\n","     */\n","    _2 _2();\n","\n","    /**\n","     * Destructure and apply this product to a function accepting the same number of arguments as this product's\n","     * slots. This can be thought of as a kind of dual to uncurrying a function and applying a product to it.\n","     *\n","     * @param <R> the return type of the function\n","     * @param fn  the function to apply\n","     * @return the result of applying the destructured product to the function\n","     */\n","    default <R> R into(Fn2<? super _1, ? super _2, ? extends R> fn) {\n","        return fn.apply(_1(), _2());\n","    }\n","\n","    /**\n","     * Rotate the first two slots of this product.\n","     *\n","     * @return the rotated product\n","     */\n","    default Product2<_2, _1> invert() {\n","        return into((_1, _2) -> product(_2, _1));\n","    }\n","\n","    @Override\n","    default _1 getKey() {\n","        return _1();\n","    }\n","\n","    @Override\n","    default _2 getValue() {\n","        return _2();\n","    }\n","\n","    @Override\n","    default _2 setValue(_2 value) {\n","        throw new UnsupportedOperationException();\n","    }\n","\n","    /**\n","     * Static factory method for creating a generic {@link Product2}.\n","     *\n","     * @param _1   the first slot\n","     * @param _2   the second slot\n","     * @param <_1> the first slot type\n","     * @param <_2> the second slot type\n","     * @return the {@link Product2}\n","     */\n","    static <_1, _2> Product2<_1, _2> product(_1 _1, _2 _2) {\n","        return new Product2<_1, _2>() {\n","            @Override\n","            public _1 _1() {\n","                return _1;\n","            }\n","\n","            @Override\n","            public _2 _2() {\n","                return _2;\n","            }\n","        };\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.adt.product;\n","\n","import org.junit.Before;\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.product.Product2.product;\n","import static org.junit.Assert.assertEquals;\n","\n","public class Product2Test {\n","\n","    private Product2<String, String> product;\n","\n","    @Before\n","    public void setUp() {\n","        product = product(\"a\", \"b\");\n","    }\n","\n","    @Test\n","    public void staticFactoryMethod() {\n","        assertEquals(\"a\", product._1());\n","        assertEquals(\"b\", product._2());\n","    }\n","\n","    @Test\n","    public void invert() {\n","        assertEquals(\"ba\", product.invert().into((a, b) -> a + b));\n","    }\n","}"],"method_lines_dic":{"Product2::::_1()":[25,25],"Product2::::_2()":[32,32],"Product2::::into(com.jnape.palatable.lambda.functions.Fn2<? super _1, ? super _2, ? extends R>)":[42,44],"Product2::::invert()":[51,53],"Product2::::getKey()":[55,58],"Product2::::getValue()":[60,63],"Product2::::setValue(_2)":[65,68],"Product2::::product(_1,_2)":[79,91]},"test_method_lines_dic":{"Product2Test::::setUp()":[13,16],"Product2Test::::staticFactoryMethod()":[18,22],"Product2Test::::invert()":[24,27]},"reverse_method_lines_dic":{"25":"Product2::::_1()","32":"Product2::::_2()","42":"Product2::::into(com.jnape.palatable.lambda.functions.Fn2<? super _1, ? super _2, ? extends R>)","43":"Product2::::into(com.jnape.palatable.lambda.functions.Fn2<? super _1, ? super _2, ? extends R>)","44":"Product2::::into(com.jnape.palatable.lambda.functions.Fn2<? super _1, ? super _2, ? extends R>)","51":"Product2::::invert()","52":"Product2::::invert()","53":"Product2::::invert()","55":"Product2::::getKey()","56":"Product2::::getKey()","57":"Product2::::getKey()","58":"Product2::::getKey()","60":"Product2::::getValue()","61":"Product2::::getValue()","62":"Product2::::getValue()","63":"Product2::::getValue()","65":"Product2::::setValue(_2)","66":"Product2::::setValue(_2)","67":"Product2::::setValue(_2)","68":"Product2::::setValue(_2)","79":"Product2::::product(_1,_2)","80":"Product2::::product(_1,_2)","81":"Product2::::product(_1,_2)","82":"Product2::::product(_1,_2)","83":"Product2::::product(_1,_2)","84":"Product2::::product(_1,_2)","85":"Product2::::product(_1,_2)","86":"Product2::::product(_1,_2)","87":"Product2::::product(_1,_2)","88":"Product2::::product(_1,_2)","89":"Product2::::product(_1,_2)","90":"Product2::::product(_1,_2)","91":"Product2::::product(_1,_2)"},"test_reverse_method_lines_dic":{"13":"Product2Test::::setUp()","14":"Product2Test::::setUp()","15":"Product2Test::::setUp()","16":"Product2Test::::setUp()","18":"Product2Test::::staticFactoryMethod()","19":"Product2Test::::staticFactoryMethod()","20":"Product2Test::::staticFactoryMethod()","21":"Product2Test::::staticFactoryMethod()","22":"Product2Test::::staticFactoryMethod()","24":"Product2Test::::invert()","25":"Product2Test::::invert()","26":"Product2Test::::invert()","27":"Product2Test::::invert()"},"tests":[{"test_lines":[18,22],"covered_lines":[80,83,88]},{"test_lines":[24,27],"covered_lines":[43,52,80,83,88]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/adt/product/Product8.java":{"class_content":["package com.jnape.palatable.lambda.adt.product;\n","\n","import com.jnape.palatable.lambda.adt.hlist.Tuple8;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn8;\n","\n","/**\n"," * A product with eight values.\n"," *\n"," * @param <_1> The first element type\n"," * @param <_2> The second element type\n"," * @param <_3> The third element type\n"," * @param <_4> The fourth element type\n"," * @param <_5> The fifth element type\n"," * @param <_6> The sixth element type\n"," * @param <_7> The seventh element type\n"," * @param <_8> The eighth element type\n"," * @see Product2\n"," * @see Tuple8\n"," */\n","public interface Product8<_1, _2, _3, _4, _5, _6, _7, _8> extends Product7<_1, _2, _3, _4, _5, _6, _7> {\n","\n","    /**\n","     * Retrieve the eighth element.\n","     *\n","     * @return the eighth element\n","     */\n","    _8 _8();\n","\n","    /**\n","     * Destructure and apply this product to a function accepting the same number of arguments as this product's\n","     * slots. This can be thought of as a kind of dual to uncurrying a function and applying a product to it.\n","     *\n","     * @param fn  the function to apply\n","     * @param <R> the return type of the function\n","     * @return the result of applying the destructured product to the function\n","     */\n","    default <R> R into(\n","            Fn8<? super _1, ? super _2, ? super _3, ? super _4, ? super _5, ? super _6, ? super _7, ? super _8, ? extends R> fn) {\n","        return Product7.super.<Fn1<? super _8, ? extends R>>into(fn).apply(_8());\n","    }\n","\n","    /**\n","     * Rotate all eight values of this product one slot to the left.\n","     *\n","     * @return the left-rotated product\n","     */\n","    default Product8<_2, _3, _4, _5, _6, _7, _8, _1> rotateL8() {\n","        return into((_1, _2, _3, _4, _5, _6, _7, _8) -> product(_2, _3, _4, _5, _6, _7, _8, _1));\n","    }\n","\n","    /**\n","     * Rotate all eight values of this product one slot to the right.\n","     *\n","     * @return the right-rotated product\n","     */\n","    default Product8<_8, _1, _2, _3, _4, _5, _6, _7> rotateR8() {\n","        return into((_1, _2, _3, _4, _5, _6, _7, _8) -> product(_8, _1, _2, _3, _4, _5, _6, _7));\n","    }\n","\n","    @Override\n","    default Product8<_2, _3, _4, _5, _6, _7, _1, _8> rotateL7() {\n","        return into((_1, _2, _3, _4, _5, _6, _7, _8) -> product(_2, _3, _4, _5, _6, _7, _1, _8));\n","    }\n","\n","    @Override\n","    default Product8<_7, _1, _2, _3, _4, _5, _6, _8> rotateR7() {\n","        return into((_1, _2, _3, _4, _5, _6, _7, _8) -> product(_7, _1, _2, _3, _4, _5, _6, _8));\n","    }\n","\n","    @Override\n","    default Product8<_2, _3, _4, _5, _6, _1, _7, _8> rotateL6() {\n","        return into((_1, _2, _3, _4, _5, _6, _7, _8) -> product(_2, _3, _4, _5, _6, _1, _7, _8));\n","    }\n","\n","    @Override\n","    default Product8<_6, _1, _2, _3, _4, _5, _7, _8> rotateR6() {\n","        return into((_1, _2, _3, _4, _5, _6, _7, _8) -> product(_6, _1, _2, _3, _4, _5, _7, _8));\n","    }\n","\n","    @Override\n","    default Product8<_2, _3, _4, _5, _1, _6, _7, _8> rotateL5() {\n","        return into((_1, _2, _3, _4, _5, _6, _7, _8) -> product(_2, _3, _4, _5, _1, _6, _7, _8));\n","    }\n","\n","    @Override\n","    default Product8<_5, _1, _2, _3, _4, _6, _7, _8> rotateR5() {\n","        return into((_1, _2, _3, _4, _5, _6, _7, _8) -> product(_5, _1, _2, _3, _4, _6, _7, _8));\n","    }\n","\n","    @Override\n","    default Product8<_2, _3, _4, _1, _5, _6, _7, _8> rotateL4() {\n","        return into((_1, _2, _3, _4, _5, _6, _7, _8) -> product(_2, _3, _4, _1, _5, _6, _7, _8));\n","    }\n","\n","    @Override\n","    default Product8<_4, _1, _2, _3, _5, _6, _7, _8> rotateR4() {\n","        return into((_1, _2, _3, _4, _5, _6, _7, _8) -> product(_4, _1, _2, _3, _5, _6, _7, _8));\n","    }\n","\n","    @Override\n","    default Product8<_2, _3, _1, _4, _5, _6, _7, _8> rotateL3() {\n","        return into((_1, _2, _3, _4, _5, _6, _7, _8) -> product(_2, _3, _1, _4, _5, _6, _7, _8));\n","    }\n","\n","    @Override\n","    default Product8<_3, _1, _2, _4, _5, _6, _7, _8> rotateR3() {\n","        return into((_1, _2, _3, _4, _5, _6, _7, _8) -> product(_3, _1, _2, _4, _5, _6, _7, _8));\n","    }\n","\n","    @Override\n","    default Product8<_2, _1, _3, _4, _5, _6, _7, _8> invert() {\n","        return into((_1, _2, _3, _4, _5, _6, _7, _8) -> product(_2, _1, _3, _4, _5, _6, _7, _8));\n","    }\n","\n","    /**\n","     * Static factory method for creating a generic {@link Product8}.\n","     *\n","     * @param _1   the first slot\n","     * @param _2   the second slot\n","     * @param _3   the third slot\n","     * @param _4   the fourth slot\n","     * @param _5   the fifth slot\n","     * @param _6   the sixth slot\n","     * @param _7   the seventh slot\n","     * @param _8   the eighth slot\n","     * @param <_1> the first slot type\n","     * @param <_2> the second slot type\n","     * @param <_3> the third slot type\n","     * @param <_4> the fourth slot type\n","     * @param <_5> the fifth slot type\n","     * @param <_6> the sixth slot type\n","     * @param <_7> the seventh slot type\n","     * @param <_8> the eighth slot type\n","     * @return the {@link Product8}\n","     */\n","    static <_1, _2, _3, _4, _5, _6, _7, _8> Product8<_1, _2, _3, _4, _5, _6, _7, _8> product(_1 _1, _2 _2, _3 _3, _4 _4,\n","                                                                                             _5 _5, _6 _6, _7 _7,\n","                                                                                             _8 _8) {\n","        return new Product8<_1, _2, _3, _4, _5, _6, _7, _8>() {\n","            @Override\n","            public _1 _1() {\n","                return _1;\n","            }\n","\n","            @Override\n","            public _2 _2() {\n","                return _2;\n","            }\n","\n","            @Override\n","            public _3 _3() {\n","                return _3;\n","            }\n","\n","            @Override\n","            public _4 _4() {\n","                return _4;\n","            }\n","\n","            @Override\n","            public _5 _5() {\n","                return _5;\n","            }\n","\n","            @Override\n","            public _6 _6() {\n","                return _6;\n","            }\n","\n","            @Override\n","            public _7 _7() {\n","                return _7;\n","            }\n","\n","            @Override\n","            public _8 _8() {\n","                return _8;\n","            }\n","        };\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.adt.product;\n","\n","import org.junit.Before;\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.product.Product8.product;\n","import static org.junit.Assert.assertEquals;\n","\n","public class Product8Test {\n","\n","    private Product8<String, String, String, String, String, String, String, String> product;\n","\n","    @Before\n","    public void setUp() {\n","        product = product(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\");\n","    }\n","\n","    @Test\n","    public void staticFactoryMethod() {\n","        assertEquals(\"a\", product._1());\n","        assertEquals(\"b\", product._2());\n","        assertEquals(\"c\", product._3());\n","        assertEquals(\"d\", product._4());\n","        assertEquals(\"e\", product._5());\n","        assertEquals(\"f\", product._6());\n","        assertEquals(\"g\", product._7());\n","        assertEquals(\"h\", product._8());\n","    }\n","\n","    @Test\n","    public void rotations() {\n","        assertEquals(\"bacdefgh\", product.invert().into((a, b, c, d, e, f, g, h) -> a + b + c + d + e + f + g + h));\n","        assertEquals(\"bcadefgh\", product.rotateL3().into((a, b, c, d, e, f, g, h) -> a + b + c + d + e + f + g + h));\n","        assertEquals(\"cabdefgh\", product.rotateR3().into((a, b, c, d, e, f, g, h) -> a + b + c + d + e + f + g + h));\n","        assertEquals(\"bcdaefgh\", product.rotateL4().into((a, b, c, d, e, f, g, h) -> a + b + c + d + e + f + g + h));\n","        assertEquals(\"dabcefgh\", product.rotateR4().into((a, b, c, d, e, f, g, h) -> a + b + c + d + e + f + g + h));\n","        assertEquals(\"bcdeafgh\", product.rotateL5().into((a, b, c, d, e, f, g, h) -> a + b + c + d + e + f + g + h));\n","        assertEquals(\"eabcdfgh\", product.rotateR5().into((a, b, c, d, e, f, g, h) -> a + b + c + d + e + f + g + h));\n","        assertEquals(\"bcdefagh\", product.rotateL6().into((a, b, c, d, e, f, g, h) -> a + b + c + d + e + f + g + h));\n","        assertEquals(\"fabcdegh\", product.rotateR6().into((a, b, c, d, e, f, g, h) -> a + b + c + d + e + f + g + h));\n","        assertEquals(\"bcdefgah\", product.rotateL7().into((a, b, c, d, e, f, g, h) -> a + b + c + d + e + f + g + h));\n","        assertEquals(\"gabcdefh\", product.rotateR7().into((a, b, c, d, e, f, g, h) -> a + b + c + d + e + f + g + h));\n","        assertEquals(\"bcdefgha\", product.rotateL8().into((a, b, c, d, e, f, g, h) -> a + b + c + d + e + f + g + h));\n","        assertEquals(\"habcdefg\", product.rotateR8().into((a, b, c, d, e, f, g, h) -> a + b + c + d + e + f + g + h));\n","    }\n","}"],"method_lines_dic":{"Product8::::_8()":[28,28],"Product8::::into(com.jnape.palatable.lambda.functions.Fn8<? super _1, ? super _2, ? super _3, ? super _4, ? super _5, ? super _6, ? super _7, ? super _8, ? extends R>)":[38,41],"Product8::::rotateL8()":[48,50],"Product8::::rotateR8()":[57,59],"Product8::::rotateL7()":[61,64],"Product8::::rotateR7()":[66,69],"Product8::::rotateL6()":[71,74],"Product8::::rotateR6()":[76,79],"Product8::::rotateL5()":[81,84],"Product8::::rotateR5()":[86,89],"Product8::::rotateL4()":[91,94],"Product8::::rotateR4()":[96,99],"Product8::::rotateL3()":[101,104],"Product8::::rotateR3()":[106,109],"Product8::::invert()":[111,114],"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)":[137,181]},"test_method_lines_dic":{"Product8Test::::setUp()":[13,16],"Product8Test::::staticFactoryMethod()":[18,28],"Product8Test::::rotations()":[30,45]},"reverse_method_lines_dic":{"28":"Product8::::_8()","38":"Product8::::into(com.jnape.palatable.lambda.functions.Fn8<? super _1, ? super _2, ? super _3, ? super _4, ? super _5, ? super _6, ? super _7, ? super _8, ? extends R>)","39":"Product8::::into(com.jnape.palatable.lambda.functions.Fn8<? super _1, ? super _2, ? super _3, ? super _4, ? super _5, ? super _6, ? super _7, ? super _8, ? extends R>)","40":"Product8::::into(com.jnape.palatable.lambda.functions.Fn8<? super _1, ? super _2, ? super _3, ? super _4, ? super _5, ? super _6, ? super _7, ? super _8, ? extends R>)","41":"Product8::::into(com.jnape.palatable.lambda.functions.Fn8<? super _1, ? super _2, ? super _3, ? super _4, ? super _5, ? super _6, ? super _7, ? super _8, ? extends R>)","48":"Product8::::rotateL8()","49":"Product8::::rotateL8()","50":"Product8::::rotateL8()","57":"Product8::::rotateR8()","58":"Product8::::rotateR8()","59":"Product8::::rotateR8()","61":"Product8::::rotateL7()","62":"Product8::::rotateL7()","63":"Product8::::rotateL7()","64":"Product8::::rotateL7()","66":"Product8::::rotateR7()","67":"Product8::::rotateR7()","68":"Product8::::rotateR7()","69":"Product8::::rotateR7()","71":"Product8::::rotateL6()","72":"Product8::::rotateL6()","73":"Product8::::rotateL6()","74":"Product8::::rotateL6()","76":"Product8::::rotateR6()","77":"Product8::::rotateR6()","78":"Product8::::rotateR6()","79":"Product8::::rotateR6()","81":"Product8::::rotateL5()","82":"Product8::::rotateL5()","83":"Product8::::rotateL5()","84":"Product8::::rotateL5()","86":"Product8::::rotateR5()","87":"Product8::::rotateR5()","88":"Product8::::rotateR5()","89":"Product8::::rotateR5()","91":"Product8::::rotateL4()","92":"Product8::::rotateL4()","93":"Product8::::rotateL4()","94":"Product8::::rotateL4()","96":"Product8::::rotateR4()","97":"Product8::::rotateR4()","98":"Product8::::rotateR4()","99":"Product8::::rotateR4()","101":"Product8::::rotateL3()","102":"Product8::::rotateL3()","103":"Product8::::rotateL3()","104":"Product8::::rotateL3()","106":"Product8::::rotateR3()","107":"Product8::::rotateR3()","108":"Product8::::rotateR3()","109":"Product8::::rotateR3()","111":"Product8::::invert()","112":"Product8::::invert()","113":"Product8::::invert()","114":"Product8::::invert()","137":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","138":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","139":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","140":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","141":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","142":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","143":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","144":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","145":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","146":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","147":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","148":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","149":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","150":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","151":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","152":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","153":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","154":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","155":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","156":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","157":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","158":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","159":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","160":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","161":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","162":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","163":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","164":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","165":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","166":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","167":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","168":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","169":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","170":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","171":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","172":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","173":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","174":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","175":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","176":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","177":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","178":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","179":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","180":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)","181":"Product8::::product(_1,_2,_3,_4,_5,_6,_7,_8)"},"test_reverse_method_lines_dic":{"13":"Product8Test::::setUp()","14":"Product8Test::::setUp()","15":"Product8Test::::setUp()","16":"Product8Test::::setUp()","18":"Product8Test::::staticFactoryMethod()","19":"Product8Test::::staticFactoryMethod()","20":"Product8Test::::staticFactoryMethod()","21":"Product8Test::::staticFactoryMethod()","22":"Product8Test::::staticFactoryMethod()","23":"Product8Test::::staticFactoryMethod()","24":"Product8Test::::staticFactoryMethod()","25":"Product8Test::::staticFactoryMethod()","26":"Product8Test::::staticFactoryMethod()","27":"Product8Test::::staticFactoryMethod()","28":"Product8Test::::staticFactoryMethod()","30":"Product8Test::::rotations()","31":"Product8Test::::rotations()","32":"Product8Test::::rotations()","33":"Product8Test::::rotations()","34":"Product8Test::::rotations()","35":"Product8Test::::rotations()","36":"Product8Test::::rotations()","37":"Product8Test::::rotations()","38":"Product8Test::::rotations()","39":"Product8Test::::rotations()","40":"Product8Test::::rotations()","41":"Product8Test::::rotations()","42":"Product8Test::::rotations()","43":"Product8Test::::rotations()","44":"Product8Test::::rotations()","45":"Product8Test::::rotations()"},"tests":[{"test_lines":[18,28],"covered_lines":[140,143,148,153,158,163,168,173,178]},{"test_lines":[30,45],"covered_lines":[40,49,58,63,68,73,78,83,88,93,98,103,108,113,140,143,148,153,158,163,168,173,178]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/adt/product/Product6.java":{"class_content":["package com.jnape.palatable.lambda.adt.product;\n","\n","import com.jnape.palatable.lambda.adt.hlist.Tuple6;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn6;\n","\n","/**\n"," * A product with six values.\n"," *\n"," * @param <_1> The first element type\n"," * @param <_2> The second element type\n"," * @param <_3> The third element type\n"," * @param <_4> The fourth element type\n"," * @param <_5> The fifth element type\n"," * @param <_6> The sixth element type\n"," * @see Product2\n"," * @see Tuple6\n"," */\n","public interface Product6<_1, _2, _3, _4, _5, _6> extends Product5<_1, _2, _3, _4, _5> {\n","\n","    /**\n","     * Retrieve the sixth element.\n","     *\n","     * @return the sixth element\n","     */\n","    _6 _6();\n","\n","    /**\n","     * Destructure and apply this product to a function accepting the same number of arguments as this product's\n","     * slots. This can be thought of as a kind of dual to uncurrying a function and applying a product to it.\n","     *\n","     * @param fn  the function to apply\n","     * @param <R> the return type of the function\n","     * @return the result of applying the destructured product to the function\n","     */\n","    default <R> R into(Fn6<? super _1, ? super _2, ? super _3, ? super _4, ? super _5, ? super _6, ? extends R> fn) {\n","        return Product5.super.<Fn1<? super _6, ? extends R>>into(fn).apply(_6());\n","    }\n","\n","    /**\n","     * Rotate the first six values of this product one slot to the left.\n","     *\n","     * @return the left-rotated product\n","     */\n","    default Product6<_2, _3, _4, _5, _6, _1> rotateL6() {\n","        return into((_1, _2, _3, _4, _5, _6) -> product(_2, _3, _4, _5, _6, _1));\n","    }\n","\n","    /**\n","     * Rotate the first six values of this product one slot to the right.\n","     *\n","     * @return the right-rotated product\n","     */\n","    default Product6<_6, _1, _2, _3, _4, _5> rotateR6() {\n","        return into((_1, _2, _3, _4, _5, _6) -> product(_6, _1, _2, _3, _4, _5));\n","    }\n","\n","    @Override\n","    default Product6<_2, _3, _4, _5, _1, _6> rotateL5() {\n","        return into((_1, _2, _3, _4, _5, _6) -> product(_2, _3, _4, _5, _1, _6));\n","    }\n","\n","    @Override\n","    default Product6<_5, _1, _2, _3, _4, _6> rotateR5() {\n","        return into((_1, _2, _3, _4, _5, _6) -> product(_5, _1, _2, _3, _4, _6));\n","    }\n","\n","    @Override\n","    default Product6<_2, _3, _4, _1, _5, _6> rotateL4() {\n","        return into((_1, _2, _3, _4, _5, _6) -> product(_2, _3, _4, _1, _5, _6));\n","    }\n","\n","    @Override\n","    default Product6<_4, _1, _2, _3, _5, _6> rotateR4() {\n","        return into((_1, _2, _3, _4, _5, _6) -> product(_4, _1, _2, _3, _5, _6));\n","    }\n","\n","    @Override\n","    default Product6<_2, _3, _1, _4, _5, _6> rotateL3() {\n","        return into((_1, _2, _3, _4, _5, _6) -> product(_2, _3, _1, _4, _5, _6));\n","    }\n","\n","    @Override\n","    default Product6<_3, _1, _2, _4, _5, _6> rotateR3() {\n","        return into((_1, _2, _3, _4, _5, _6) -> product(_3, _1, _2, _4, _5, _6));\n","    }\n","\n","    @Override\n","    default Product6<_2, _1, _3, _4, _5, _6> invert() {\n","        return into((_1, _2, _3, _4, _5, _6) -> product(_2, _1, _3, _4, _5, _6));\n","    }\n","\n","    /**\n","     * Static factory method for creating a generic {@link Product6}.\n","     *\n","     * @param _1   the first slot\n","     * @param _2   the second slot\n","     * @param _3   the third slot\n","     * @param _4   the fourth slot\n","     * @param _5   the fifth slot\n","     * @param _6   the sixth slot\n","     * @param <_1> the first slot type\n","     * @param <_2> the second slot type\n","     * @param <_3> the third slot type\n","     * @param <_4> the fourth slot type\n","     * @param <_5> the fifth slot type\n","     * @param <_6> the sixth slot type\n","     * @return the {@link Product6}\n","     */\n","    static <_1, _2, _3, _4, _5, _6> Product6<_1, _2, _3, _4, _5, _6> product(_1 _1, _2 _2, _3 _3, _4 _4, _5 _5,\n","                                                                             _6 _6) {\n","        return new Product6<_1, _2, _3, _4, _5, _6>() {\n","            @Override\n","            public _1 _1() {\n","                return _1;\n","            }\n","\n","            @Override\n","            public _2 _2() {\n","                return _2;\n","            }\n","\n","            @Override\n","            public _3 _3() {\n","                return _3;\n","            }\n","\n","            @Override\n","            public _4 _4() {\n","                return _4;\n","            }\n","\n","            @Override\n","            public _5 _5() {\n","                return _5;\n","            }\n","\n","            @Override\n","            public _6 _6() {\n","                return _6;\n","            }\n","        };\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.adt.product;\n","\n","import org.junit.Before;\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.product.Product6.product;\n","import static org.junit.Assert.assertEquals;\n","\n","public class Product6Test {\n","\n","    private Product6<String, String, String, String, String, String> product;\n","\n","    @Before\n","    public void setUp() {\n","        product = product(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\");\n","    }\n","\n","    @Test\n","    public void staticFactoryMethod() {\n","        assertEquals(\"a\", product._1());\n","        assertEquals(\"b\", product._2());\n","        assertEquals(\"c\", product._3());\n","        assertEquals(\"d\", product._4());\n","        assertEquals(\"e\", product._5());\n","        assertEquals(\"f\", product._6());\n","    }\n","\n","    @Test\n","    public void rotations() {\n","        assertEquals(\"bacdef\", product.invert().into((a, b, c, d, e, f) -> a + b + c + d + e + f));\n","        assertEquals(\"bcadef\", product.rotateL3().into((a, b, c, d, e, f) -> a + b + c + d + e + f));\n","        assertEquals(\"cabdef\", product.rotateR3().into((a, b, c, d, e, f) -> a + b + c + d + e + f));\n","        assertEquals(\"bcdaef\", product.rotateL4().into((a, b, c, d, e, f) -> a + b + c + d + e + f));\n","        assertEquals(\"dabcef\", product.rotateR4().into((a, b, c, d, e, f) -> a + b + c + d + e + f));\n","        assertEquals(\"bcdeaf\", product.rotateL5().into((a, b, c, d, e, f) -> a + b + c + d + e + f));\n","        assertEquals(\"eabcdf\", product.rotateR5().into((a, b, c, d, e, f) -> a + b + c + d + e + f));\n","        assertEquals(\"bcdefa\", product.rotateL6().into((a, b, c, d, e, f) -> a + b + c + d + e + f));\n","        assertEquals(\"fabcde\", product.rotateR6().into((a, b, c, d, e, f) -> a + b + c + d + e + f));\n","    }\n","}"],"method_lines_dic":{"Product6::::_6()":[26,26],"Product6::::into(com.jnape.palatable.lambda.functions.Fn6<? super _1, ? super _2, ? super _3, ? super _4, ? super _5, ? super _6, ? extends R>)":[36,38],"Product6::::rotateL6()":[45,47],"Product6::::rotateR6()":[54,56],"Product6::::rotateL5()":[58,61],"Product6::::rotateR5()":[63,66],"Product6::::rotateL4()":[68,71],"Product6::::rotateR4()":[73,76],"Product6::::rotateL3()":[78,81],"Product6::::rotateR3()":[83,86],"Product6::::invert()":[88,91],"Product6::::product(_1,_2,_3,_4,_5,_6)":[110,143]},"test_method_lines_dic":{"Product6Test::::setUp()":[13,16],"Product6Test::::staticFactoryMethod()":[18,26],"Product6Test::::rotations()":[28,39]},"reverse_method_lines_dic":{"26":"Product6::::_6()","36":"Product6::::into(com.jnape.palatable.lambda.functions.Fn6<? super _1, ? super _2, ? super _3, ? super _4, ? super _5, ? super _6, ? extends R>)","37":"Product6::::into(com.jnape.palatable.lambda.functions.Fn6<? super _1, ? super _2, ? super _3, ? super _4, ? super _5, ? super _6, ? extends R>)","38":"Product6::::into(com.jnape.palatable.lambda.functions.Fn6<? super _1, ? super _2, ? super _3, ? super _4, ? super _5, ? super _6, ? extends R>)","45":"Product6::::rotateL6()","46":"Product6::::rotateL6()","47":"Product6::::rotateL6()","54":"Product6::::rotateR6()","55":"Product6::::rotateR6()","56":"Product6::::rotateR6()","58":"Product6::::rotateL5()","59":"Product6::::rotateL5()","60":"Product6::::rotateL5()","61":"Product6::::rotateL5()","63":"Product6::::rotateR5()","64":"Product6::::rotateR5()","65":"Product6::::rotateR5()","66":"Product6::::rotateR5()","68":"Product6::::rotateL4()","69":"Product6::::rotateL4()","70":"Product6::::rotateL4()","71":"Product6::::rotateL4()","73":"Product6::::rotateR4()","74":"Product6::::rotateR4()","75":"Product6::::rotateR4()","76":"Product6::::rotateR4()","78":"Product6::::rotateL3()","79":"Product6::::rotateL3()","80":"Product6::::rotateL3()","81":"Product6::::rotateL3()","83":"Product6::::rotateR3()","84":"Product6::::rotateR3()","85":"Product6::::rotateR3()","86":"Product6::::rotateR3()","88":"Product6::::invert()","89":"Product6::::invert()","90":"Product6::::invert()","91":"Product6::::invert()","110":"Product6::::product(_1,_2,_3,_4,_5,_6)","111":"Product6::::product(_1,_2,_3,_4,_5,_6)","112":"Product6::::product(_1,_2,_3,_4,_5,_6)","113":"Product6::::product(_1,_2,_3,_4,_5,_6)","114":"Product6::::product(_1,_2,_3,_4,_5,_6)","115":"Product6::::product(_1,_2,_3,_4,_5,_6)","116":"Product6::::product(_1,_2,_3,_4,_5,_6)","117":"Product6::::product(_1,_2,_3,_4,_5,_6)","118":"Product6::::product(_1,_2,_3,_4,_5,_6)","119":"Product6::::product(_1,_2,_3,_4,_5,_6)","120":"Product6::::product(_1,_2,_3,_4,_5,_6)","121":"Product6::::product(_1,_2,_3,_4,_5,_6)","122":"Product6::::product(_1,_2,_3,_4,_5,_6)","123":"Product6::::product(_1,_2,_3,_4,_5,_6)","124":"Product6::::product(_1,_2,_3,_4,_5,_6)","125":"Product6::::product(_1,_2,_3,_4,_5,_6)","126":"Product6::::product(_1,_2,_3,_4,_5,_6)","127":"Product6::::product(_1,_2,_3,_4,_5,_6)","128":"Product6::::product(_1,_2,_3,_4,_5,_6)","129":"Product6::::product(_1,_2,_3,_4,_5,_6)","130":"Product6::::product(_1,_2,_3,_4,_5,_6)","131":"Product6::::product(_1,_2,_3,_4,_5,_6)","132":"Product6::::product(_1,_2,_3,_4,_5,_6)","133":"Product6::::product(_1,_2,_3,_4,_5,_6)","134":"Product6::::product(_1,_2,_3,_4,_5,_6)","135":"Product6::::product(_1,_2,_3,_4,_5,_6)","136":"Product6::::product(_1,_2,_3,_4,_5,_6)","137":"Product6::::product(_1,_2,_3,_4,_5,_6)","138":"Product6::::product(_1,_2,_3,_4,_5,_6)","139":"Product6::::product(_1,_2,_3,_4,_5,_6)","140":"Product6::::product(_1,_2,_3,_4,_5,_6)","141":"Product6::::product(_1,_2,_3,_4,_5,_6)","142":"Product6::::product(_1,_2,_3,_4,_5,_6)","143":"Product6::::product(_1,_2,_3,_4,_5,_6)"},"test_reverse_method_lines_dic":{"13":"Product6Test::::setUp()","14":"Product6Test::::setUp()","15":"Product6Test::::setUp()","16":"Product6Test::::setUp()","18":"Product6Test::::staticFactoryMethod()","19":"Product6Test::::staticFactoryMethod()","20":"Product6Test::::staticFactoryMethod()","21":"Product6Test::::staticFactoryMethod()","22":"Product6Test::::staticFactoryMethod()","23":"Product6Test::::staticFactoryMethod()","24":"Product6Test::::staticFactoryMethod()","25":"Product6Test::::staticFactoryMethod()","26":"Product6Test::::staticFactoryMethod()","28":"Product6Test::::rotations()","29":"Product6Test::::rotations()","30":"Product6Test::::rotations()","31":"Product6Test::::rotations()","32":"Product6Test::::rotations()","33":"Product6Test::::rotations()","34":"Product6Test::::rotations()","35":"Product6Test::::rotations()","36":"Product6Test::::rotations()","37":"Product6Test::::rotations()","38":"Product6Test::::rotations()","39":"Product6Test::::rotations()"},"tests":[{"test_lines":[18,26],"covered_lines":[112,115,120,125,130,135,140]},{"test_lines":[28,39],"covered_lines":[37,46,55,60,65,70,75,80,85,90,112,115,120,125,130,135,140]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/Fn1.java":{"class_content":["package com.jnape.palatable.lambda.functions;\n","\n","import com.jnape.palatable.lambda.adt.Either;\n","import com.jnape.palatable.lambda.adt.choice.Choice2;\n","import com.jnape.palatable.lambda.adt.hlist.Tuple2;\n","import com.jnape.palatable.lambda.functions.builtin.fn1.Constantly;\n","import com.jnape.palatable.lambda.functions.recursion.RecursiveResult;\n","import com.jnape.palatable.lambda.functions.specialized.Pure;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","import com.jnape.palatable.lambda.functor.Cartesian;\n","import com.jnape.palatable.lambda.functor.Cocartesian;\n","import com.jnape.palatable.lambda.functor.builtin.Lazy;\n","import com.jnape.palatable.lambda.internal.Runtime;\n","import com.jnape.palatable.lambda.monad.Monad;\n","import com.jnape.palatable.lambda.monad.MonadReader;\n","import com.jnape.palatable.lambda.monad.MonadRec;\n","import com.jnape.palatable.lambda.monad.MonadWriter;\n","\n","import java.util.function.Function;\n","\n","import static com.jnape.palatable.lambda.functions.Fn2.curried;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","import static com.jnape.palatable.lambda.functions.recursion.Trampoline.trampoline;\n","\n","/**\n"," * A function taking a single argument. This is the core function type that all other function types extend and\n"," * auto-curry with.\n"," *\n"," * @param <A> The argument type\n"," * @param <B> The result type\n"," */\n","@FunctionalInterface\n","public interface Fn1<A, B> extends\n","        MonadRec<B, Fn1<A, ?>>,\n","        MonadReader<A, B, Fn1<A, ?>>,\n","        MonadWriter<A, B, Fn1<A, ?>>,\n","        Cartesian<A, B, Fn1<?, ?>>,\n","        Cocartesian<A, B, Fn1<?, ?>> {\n","\n","    /**\n","     * Invoke this function explosively with the given argument.\n","     *\n","     * @param a the argument\n","     * @return the result of the function application\n","     */\n","    default B apply(A a) {\n","        try {\n","            return checkedApply(a);\n","        } catch (Throwable t) {\n","            throw Runtime.throwChecked(t);\n","        }\n","    }\n","\n","    /**\n","     * Invoke this function with the given argument, potentially throwing any {@link Throwable}.\n","     *\n","     * @param a the argument\n","     * @return the result of the function application\n","     * @throws Throwable anything possibly thrown by the function\n","     */\n","    B checkedApply(A a) throws Throwable;\n","\n","    /**\n","     * Convert this {@link Fn1} to an {@link Fn0} by supplying an argument to this function. Useful for fixing an\n","     * argument now, but deferring application until a later time.\n","     *\n","     * @param a the argument\n","     * @return an {@link Fn0}\n","     */\n","    default Fn0<B> thunk(A a) {\n","        return () -> apply(a);\n","    }\n","\n","    /**\n","     * Widen this function's argument list by prepending an ignored argument of any type to the front.\n","     *\n","     * @param <Z> the new first argument type\n","     * @return the widened function\n","     */\n","    default <Z> Fn2<Z, A, B> widen() {\n","        return curried(constantly(this));\n","    }\n","\n","    /**\n","     * Convert this {@link Fn1} to a java {@link Function}.\n","     *\n","     * @return the {@link Function}\n","     */\n","    default Function<A, B> toFunction() {\n","        return this::apply;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    default Fn1<A, B> local(Fn1<? super A, ? extends A> fn) {\n","        return contraMap(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    default <C> Fn1<A, Tuple2<B, C>> listens(Fn1<? super A, ? extends C> fn) {\n","        return carry().fmap(t -> t.<C>biMapL(fn).invert());\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    default Fn1<A, B> censor(Fn1<? super A, ? extends A> fn) {\n","        return a -> apply(fn.apply(a));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    default <C> Fn1<A, C> flatMap(Fn1<? super B, ? extends Monad<C, Fn1<A, ?>>> f) {\n","        return a -> f.apply(apply(a)).<Fn1<A, C>>coerce().apply(a);\n","    }\n","\n","    /**\n","     * Left-to-right composition.\n","     *\n","     * @param <C> the return type of the next function to invoke\n","     * @param f   the function to invoke with this function's return value\n","     * @return a function representing the composition of this function and f\n","     */\n","    @Override\n","    default <C> Fn1<A, C> fmap(Fn1<? super B, ? extends C> f) {\n","        return a -> f.apply(apply(a));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    default <C> Fn1<A, C> pure(C c) {\n","        return __ -> c;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    default <C> Fn1<A, C> zip(Applicative<Fn1<? super B, ? extends C>, Fn1<A, ?>> appFn) {\n","        return MonadRec.super.zip(appFn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @SuppressWarnings(\"unchecked\")\n","    default <C> Fn1<A, C> zip(Fn2<A, B, C> appFn) {\n","        return zip((Fn1<A, Fn1<? super B, ? extends C>>) (Object) appFn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    default <C> Lazy<Fn1<A, C>> lazyZip(Lazy<? extends Applicative<Fn1<? super B, ? extends C>, Fn1<A, ?>>> lazyAppFn) {\n","        return MonadRec.super.lazyZip(lazyAppFn).fmap(Monad<C, Fn1<A, ?>>::coerce);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    default <C> Fn1<A, C> trampolineM(Fn1<? super B, ? extends MonadRec<RecursiveResult<B, C>, Fn1<A, ?>>> fn) {\n","        return a -> trampoline(b -> fn.apply(b).<Fn1<A, RecursiveResult<B, C>>>coerce().apply(a), apply(a));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    default <C> Fn1<A, C> discardL(Applicative<C, Fn1<A, ?>> appB) {\n","        return MonadRec.super.discardL(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    default <C> Fn1<A, B> discardR(Applicative<C, Fn1<A, ?>> appB) {\n","        return MonadRec.super.discardR(appB).coerce();\n","    }\n","\n","    /**\n","     * Contravariantly map over the argument to this function, producing a function that takes the new argument type,\n","     * and produces the same result.\n","     *\n","     * @param <Z> the new argument type\n","     * @param fn  the contravariant argument mapping function\n","     * @return an {@link Fn1}&lt;Z, B&gt;\n","     */\n","    @Override\n","    default <Z> Fn1<Z, B> diMapL(Fn1<? super Z, ? extends A> fn) {\n","        return (Fn1<Z, B>) Cartesian.super.<Z>diMapL(fn);\n","    }\n","\n","    /**\n","     * Covariantly map over the return value of this function, producing a function that takes the same argument, and\n","     * produces the new result type.\n","     *\n","     * @param <C> the new result type\n","     * @param fn  the covariant result mapping function\n","     * @return an {@link Fn1}&lt;A, C&gt;\n","     */\n","    @Override\n","    default <C> Fn1<A, C> diMapR(Fn1<? super B, ? extends C> fn) {\n","        return (Fn1<A, C>) Cartesian.super.<C>diMapR(fn);\n","    }\n","\n","    /**\n","     * Exercise both <code>diMapL</code> and <code>diMapR</code> over this function in the same invocation.\n","     *\n","     * @param <Z> the new argument type\n","     * @param <C> the new result type\n","     * @param lFn the contravariant argument mapping function\n","     * @param rFn the covariant result mapping function\n","     * @return an {@link Fn1}&lt;Z, C&gt;\n","     */\n","    @Override\n","    default <Z, C> Fn1<Z, C> diMap(Fn1<? super Z, ? extends A> lFn, Fn1<? super B, ? extends C> rFn) {\n","        return lFn.fmap(this).fmap(rFn)::apply;\n","    }\n","\n","    /**\n","     * Pair a value with the input to this function, and preserve the paired value through to the output.\n","     *\n","     * @param <C> the paired value\n","     * @return the strengthened {@link Fn1}\n","     */\n","    @Override\n","    default <C> Fn1<Tuple2<C, A>, Tuple2<C, B>> cartesian() {\n","        return t -> t.fmap(this);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    default Fn1<A, Tuple2<A, B>> carry() {\n","        return (Fn1<A, Tuple2<A, B>>) Cartesian.super.carry();\n","    }\n","\n","    /**\n","     * Choose between either applying this function or returning back a different result altogether.\n","     *\n","     * @param <C> the potentially different result\n","     * @return teh strengthened {@link Fn1}\n","     */\n","    @Override\n","    default <C> Fn1<Choice2<C, A>, Choice2<C, B>> cocartesian() {\n","        return a -> a.fmap(this);\n","    }\n","\n","    /**\n","     * Choose between a successful result <code>b</code> or returning back the input, <code>a</code>.\n","     *\n","     * @return an {@link Fn1} that chooses between its input (in case of failure) or its output.\n","     */\n","    @Override\n","    default Fn1<A, Choice2<A, B>> choose() {\n","        return a -> Either.trying(() -> apply(a), constantly(a)).match(Choice2::a, Choice2::b);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    default <Z> Fn1<Z, B> contraMap(Fn1<? super Z, ? extends A> fn) {\n","        return (Fn1<Z, B>) Cartesian.super.<Z>contraMap(fn);\n","    }\n","\n","    /**\n","     * Right-to-left composition between different arity functions. Preserves highest arity in the return type.\n","     *\n","     * @param before the function to pass its return value to this function's input\n","     * @param <Y>    the resulting function's first argument type\n","     * @param <Z>    the resulting function's second argument type\n","     * @return an {@link Fn2}&lt;Y, Z, B&gt;\n","     */\n","    default <Y, Z> Fn2<Y, Z, B> compose(Fn2<? super Y, ? super Z, ? extends A> before) {\n","        return curried(before.fmap(this::contraMap))::apply;\n","    }\n","\n","    /**\n","     * Left-to-right composition between different arity functions. Preserves highest arity in the return type.\n","     *\n","     * @param after the function to invoke on this function's return value\n","     * @param <C>   the resulting function's second argument type\n","     * @param <D>   the resulting function's return type\n","     * @return an {@link Fn2}&lt;A, C, D&gt;\n","     */\n","    default <C, D> Fn2<A, C, D> andThen(Fn2<? super B, ? super C, ? extends D> after) {\n","        return (a, c) -> after.apply(apply(a), c);\n","    }\n","\n","    default Fn1<A, B> self() {\n","        return this;\n","    }\n","\n","    /**\n","     * Static factory method for avoid explicit casting when using method references as {@link Fn1}s.\n","     *\n","     * @param fn  the function to adapt\n","     * @param <A> the input type\n","     * @param <B> the output type\n","     * @return the {@link Fn1}\n","     */\n","    static <A, B> Fn1<A, B> fn1(Fn1<? super A, ? extends B> fn) {\n","        return fn::apply;\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a java {@link Function} in an {@link Fn1}.\n","     *\n","     * @param function the function\n","     * @param <A>      the input type\n","     * @param <B>      the output type\n","     * @return the {@link Fn1}\n","     */\n","    static <A, B> Fn1<A, B> fromFunction(Function<? super A, ? extends B> function) {\n","        return function::apply;\n","    }\n","\n","    /**\n","     * The canonical {@link Pure} instance for {@link Fn1}.\n","     *\n","     * @param <A> the input type\n","     * @return the {@link Pure} instance\n","     */\n","    static <A> Pure<Fn1<A, ?>> pureFn1() {\n","        return Constantly::constantly;\n","    }\n","\n","    /**\n","     * Construct an {@link Fn1} that has a reference to itself in scope at the time it is executed (presumably for\n","     * recursive invocations).\n","     *\n","     * @param fn  the body of the function, with access to itself\n","     * @param <A> the input type\n","     * @param <B> the output type\n","     * @return the {@link Fn1}\n","     */\n","    static <A, B> Fn1<A, B> withSelf(Fn2<? super Fn1<? super A, ? extends B>, ? super A, ? extends B> fn) {\n","        return a -> fn.apply(withSelf(fn), a);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions;\n","\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.ApplicativeLaws;\n","import testsupport.traits.Equivalence;\n","import testsupport.traits.FunctorLaws;\n","import testsupport.traits.MonadLaws;\n","import testsupport.traits.MonadReaderLaws;\n","import testsupport.traits.MonadRecLaws;\n","import testsupport.traits.MonadWriterLaws;\n","\n","import java.util.function.Function;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.choice.Choice2.a;\n","import static com.jnape.palatable.lambda.adt.choice.Choice2.b;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.Fn1.fn1;\n","import static com.jnape.palatable.lambda.functions.Fn1.fromFunction;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.ReduceLeft.reduceLeft;\n","import static java.util.Arrays.asList;\n","import static org.junit.Assert.assertEquals;\n","import static testsupport.traits.Equivalence.equivalence;\n","\n","@RunWith(Traits.class)\n","public class Fn1Test {\n","\n","    @TestTraits({FunctorLaws.class,\n","                 ApplicativeLaws.class,\n","                 MonadLaws.class,\n","                 MonadRecLaws.class,\n","                 MonadReaderLaws.class,\n","                 MonadWriterLaws.class})\n","    public Equivalence<Fn1<String, Object>> testSubject() {\n","        return equivalence(fn1(Integer::parseInt), f -> f.apply(\"1\"));\n","    }\n","\n","    @Test\n","    public void profunctorProperties() {\n","        Fn1<Integer, Integer> add2 = integer -> integer + 2;\n","\n","        assertEquals((Integer) 3, add2.<String>diMapL(Integer::parseInt).apply(\"1\"));\n","        assertEquals(\"3\", add2.diMapR(Object::toString).apply(1));\n","        assertEquals(\"3\", add2.<String, String>diMap(Integer::parseInt, Object::toString).apply(\"1\"));\n","    }\n","\n","    @Test\n","    public void staticFactoryMethod() {\n","        assertEquals((Integer) 1, Fn1.<String, Integer>fn1(Integer::parseInt).apply(\"1\"));\n","        Function<String, Integer> function = Integer::parseInt;\n","        Fn1<String, Integer>      fn1      = fromFunction(function);\n","        assertEquals((Integer) 1, fn1.apply(\"1\"));\n","    }\n","\n","    @Test\n","    public void thunk() {\n","        Fn1<Integer, String> toString = Object::toString;\n","        assertEquals(\"1\", toString.thunk(1).apply());\n","    }\n","\n","    @Test\n","    public void widen() {\n","        Fn1<Integer, Integer> addOne = x -> x + 1;\n","        assertEquals(just(4), reduceLeft(addOne.widen(), asList(1, 2, 3)));\n","    }\n","\n","    @Test\n","    public void cartesian() {\n","        Fn1<Integer, Integer> add1 = x -> x + 1;\n","        assertEquals(tuple(\"a\", 2), add1.<String>cartesian().apply(tuple(\"a\", 1)));\n","    }\n","\n","    @Test\n","    public void carry() {\n","        Fn1<Integer, Integer> add1 = x -> x + 1;\n","        assertEquals(tuple(1, 2), add1.carry().apply(1));\n","    }\n","\n","    @Test\n","    public void cocartesian() {\n","        Fn1<Integer, Integer> add1 = x -> x + 1;\n","        assertEquals(a(\"foo\"), add1.<String>cocartesian().apply(a(\"foo\")));\n","        assertEquals(b(2), add1.<String>cocartesian().apply(b(1)));\n","    }\n","\n","    @Test\n","    public void choose() {\n","        Fn1<String, Integer> add1 = Integer::parseInt;\n","        assertEquals(b(123), add1.choose().apply(\"123\"));\n","        assertEquals(a(\"foo\"), add1.choose().apply(\"foo\"));\n","    }\n","\n","    @Test\n","    public void toFunction() {\n","        Fn1<Integer, Integer>      add1     = x -> x + 1;\n","        Function<Integer, Integer> function = add1.toFunction();\n","        assertEquals((Integer) 2, function.apply(1));\n","    }\n","\n","    @Test\n","    public void staticPure() {\n","        Fn1<String, Integer> fn1 = Fn1.<String>pureFn1().apply(1);\n","        assertEquals((Integer) 1, fn1.apply(\"anything\"));\n","    }\n","\n","    @Test\n","    public void withSelf() {\n","        assertEquals((Integer) 15, Fn1.<Integer, Integer>withSelf((f, x) -> x > 1 ? x + f.apply(x - 1) : x).apply(5));\n","    }\n","}\n"],"method_lines_dic":{"Fn1::::apply(A)":[46,52],"Fn1::::checkedApply(A)":[61,61],"Fn1::::thunk(A)":[70,72],"Fn1::::widen()":[80,82],"Fn1::::toFunction()":[89,91],"Fn1::::local(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends A>)":[96,99],"Fn1::::listens(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>)":[104,107],"Fn1::::censor(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends A>)":[112,115],"Fn1::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.Monad<C, com.jnape.palatable.lambda.functions.Fn1<A, ?>>>)":[120,123],"Fn1::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)":[132,135],"Fn1::::pure(C)":[140,143],"Fn1::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)":[148,151],"Fn1::::zip(com.jnape.palatable.lambda.functions.Fn2<A, B, C>)":[156,159],"Fn1::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.functions.Fn1<A, ?>>>)":[164,167],"Fn1::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.functions.Fn1<A, ?>>>)":[172,175],"Fn1::::discardL(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)":[180,183],"Fn1::::discardR(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)":[188,191],"Fn1::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)":[201,204],"Fn1::::diMapR(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)":[214,217],"Fn1::::diMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)":[228,231],"Fn1::::cartesian()":[239,242],"Fn1::::carry()":[247,250],"Fn1::::cocartesian()":[258,261],"Fn1::::choose()":[268,271],"Fn1::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)":[276,279],"Fn1::::compose(com.jnape.palatable.lambda.functions.Fn2<? super Y, ? super Z, ? extends A>)":[289,291],"Fn1::::andThen(com.jnape.palatable.lambda.functions.Fn2<? super B, ? super C, ? extends D>)":[301,303],"Fn1::::self()":[305,307],"Fn1::::fn1(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)":[317,319],"Fn1::::fromFunction(java.util.function.Function<? super A, ? extends B>)":[329,331],"Fn1::::pureFn1()":[339,341],"Fn1::::withSelf(com.jnape.palatable.lambda.functions.Fn2<? super com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, ? super A, ? extends B>)":[352,354]},"test_method_lines_dic":{"Fn1Test::::testSubject()":[31,39],"Fn1Test::::profunctorProperties()":[41,48],"Fn1Test::::staticFactoryMethod()":[50,56],"Fn1Test::::thunk()":[58,62],"Fn1Test::::widen()":[64,68],"Fn1Test::::cartesian()":[70,74],"Fn1Test::::carry()":[76,80],"Fn1Test::::cocartesian()":[82,87],"Fn1Test::::choose()":[89,94],"Fn1Test::::toFunction()":[96,101],"Fn1Test::::staticPure()":[103,107],"Fn1Test::::withSelf()":[109,112]},"reverse_method_lines_dic":{"46":"Fn1::::apply(A)","47":"Fn1::::apply(A)","48":"Fn1::::apply(A)","49":"Fn1::::apply(A)","50":"Fn1::::apply(A)","51":"Fn1::::apply(A)","52":"Fn1::::apply(A)","61":"Fn1::::checkedApply(A)","70":"Fn1::::thunk(A)","71":"Fn1::::thunk(A)","72":"Fn1::::thunk(A)","80":"Fn1::::widen()","81":"Fn1::::widen()","82":"Fn1::::widen()","89":"Fn1::::toFunction()","90":"Fn1::::toFunction()","91":"Fn1::::toFunction()","96":"Fn1::::local(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends A>)","97":"Fn1::::local(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends A>)","98":"Fn1::::local(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends A>)","99":"Fn1::::local(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends A>)","104":"Fn1::::listens(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>)","105":"Fn1::::listens(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>)","106":"Fn1::::listens(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>)","107":"Fn1::::listens(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>)","112":"Fn1::::censor(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends A>)","113":"Fn1::::censor(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends A>)","114":"Fn1::::censor(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends A>)","115":"Fn1::::censor(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends A>)","120":"Fn1::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.Monad<C, com.jnape.palatable.lambda.functions.Fn1<A, ?>>>)","121":"Fn1::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.Monad<C, com.jnape.palatable.lambda.functions.Fn1<A, ?>>>)","122":"Fn1::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.Monad<C, com.jnape.palatable.lambda.functions.Fn1<A, ?>>>)","123":"Fn1::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.Monad<C, com.jnape.palatable.lambda.functions.Fn1<A, ?>>>)","132":"Fn1::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","133":"Fn1::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","134":"Fn1::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","135":"Fn1::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","140":"Fn1::::pure(C)","141":"Fn1::::pure(C)","142":"Fn1::::pure(C)","143":"Fn1::::pure(C)","148":"Fn1::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","149":"Fn1::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","150":"Fn1::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","151":"Fn1::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","156":"Fn1::::zip(com.jnape.palatable.lambda.functions.Fn2<A, B, C>)","157":"Fn1::::zip(com.jnape.palatable.lambda.functions.Fn2<A, B, C>)","158":"Fn1::::zip(com.jnape.palatable.lambda.functions.Fn2<A, B, C>)","159":"Fn1::::zip(com.jnape.palatable.lambda.functions.Fn2<A, B, C>)","164":"Fn1::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.functions.Fn1<A, ?>>>)","165":"Fn1::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.functions.Fn1<A, ?>>>)","166":"Fn1::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.functions.Fn1<A, ?>>>)","167":"Fn1::::lazyZip(com.jnape.palatable.lambda.functor.builtin.Lazy<? extends com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.functions.Fn1<A, ?>>>)","172":"Fn1::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.functions.Fn1<A, ?>>>)","173":"Fn1::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.functions.Fn1<A, ?>>>)","174":"Fn1::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.functions.Fn1<A, ?>>>)","175":"Fn1::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.functions.Fn1<A, ?>>>)","180":"Fn1::::discardL(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","181":"Fn1::::discardL(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","182":"Fn1::::discardL(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","183":"Fn1::::discardL(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","188":"Fn1::::discardR(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","189":"Fn1::::discardR(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","190":"Fn1::::discardR(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","191":"Fn1::::discardR(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","201":"Fn1::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","202":"Fn1::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","203":"Fn1::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","204":"Fn1::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","214":"Fn1::::diMapR(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","215":"Fn1::::diMapR(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","216":"Fn1::::diMapR(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","217":"Fn1::::diMapR(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","228":"Fn1::::diMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","229":"Fn1::::diMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","230":"Fn1::::diMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","231":"Fn1::::diMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","239":"Fn1::::cartesian()","240":"Fn1::::cartesian()","241":"Fn1::::cartesian()","242":"Fn1::::cartesian()","247":"Fn1::::carry()","248":"Fn1::::carry()","249":"Fn1::::carry()","250":"Fn1::::carry()","258":"Fn1::::cocartesian()","259":"Fn1::::cocartesian()","260":"Fn1::::cocartesian()","261":"Fn1::::cocartesian()","268":"Fn1::::choose()","269":"Fn1::::choose()","270":"Fn1::::choose()","271":"Fn1::::choose()","276":"Fn1::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","277":"Fn1::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","278":"Fn1::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","279":"Fn1::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","289":"Fn1::::compose(com.jnape.palatable.lambda.functions.Fn2<? super Y, ? super Z, ? extends A>)","290":"Fn1::::compose(com.jnape.palatable.lambda.functions.Fn2<? super Y, ? super Z, ? extends A>)","291":"Fn1::::compose(com.jnape.palatable.lambda.functions.Fn2<? super Y, ? super Z, ? extends A>)","301":"Fn1::::andThen(com.jnape.palatable.lambda.functions.Fn2<? super B, ? super C, ? extends D>)","302":"Fn1::::andThen(com.jnape.palatable.lambda.functions.Fn2<? super B, ? super C, ? extends D>)","303":"Fn1::::andThen(com.jnape.palatable.lambda.functions.Fn2<? super B, ? super C, ? extends D>)","305":"Fn1::::self()","306":"Fn1::::self()","307":"Fn1::::self()","317":"Fn1::::fn1(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","318":"Fn1::::fn1(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","319":"Fn1::::fn1(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","329":"Fn1::::fromFunction(java.util.function.Function<? super A, ? extends B>)","330":"Fn1::::fromFunction(java.util.function.Function<? super A, ? extends B>)","331":"Fn1::::fromFunction(java.util.function.Function<? super A, ? extends B>)","339":"Fn1::::pureFn1()","340":"Fn1::::pureFn1()","341":"Fn1::::pureFn1()","352":"Fn1::::withSelf(com.jnape.palatable.lambda.functions.Fn2<? super com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, ? super A, ? extends B>)","353":"Fn1::::withSelf(com.jnape.palatable.lambda.functions.Fn2<? super com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, ? super A, ? extends B>)","354":"Fn1::::withSelf(com.jnape.palatable.lambda.functions.Fn2<? super com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, ? super A, ? extends B>)"},"test_reverse_method_lines_dic":{"31":"Fn1Test::::testSubject()","32":"Fn1Test::::testSubject()","33":"Fn1Test::::testSubject()","34":"Fn1Test::::testSubject()","35":"Fn1Test::::testSubject()","36":"Fn1Test::::testSubject()","37":"Fn1Test::::testSubject()","38":"Fn1Test::::testSubject()","39":"Fn1Test::::testSubject()","41":"Fn1Test::::profunctorProperties()","42":"Fn1Test::::profunctorProperties()","43":"Fn1Test::::profunctorProperties()","44":"Fn1Test::::profunctorProperties()","45":"Fn1Test::::profunctorProperties()","46":"Fn1Test::::profunctorProperties()","47":"Fn1Test::::profunctorProperties()","48":"Fn1Test::::profunctorProperties()","50":"Fn1Test::::staticFactoryMethod()","51":"Fn1Test::::staticFactoryMethod()","52":"Fn1Test::::staticFactoryMethod()","53":"Fn1Test::::staticFactoryMethod()","54":"Fn1Test::::staticFactoryMethod()","55":"Fn1Test::::staticFactoryMethod()","56":"Fn1Test::::staticFactoryMethod()","58":"Fn1Test::::thunk()","59":"Fn1Test::::thunk()","60":"Fn1Test::::thunk()","61":"Fn1Test::::thunk()","62":"Fn1Test::::thunk()","64":"Fn1Test::::widen()","65":"Fn1Test::::widen()","66":"Fn1Test::::widen()","67":"Fn1Test::::widen()","68":"Fn1Test::::widen()","70":"Fn1Test::::cartesian()","71":"Fn1Test::::cartesian()","72":"Fn1Test::::cartesian()","73":"Fn1Test::::cartesian()","74":"Fn1Test::::cartesian()","76":"Fn1Test::::carry()","77":"Fn1Test::::carry()","78":"Fn1Test::::carry()","79":"Fn1Test::::carry()","80":"Fn1Test::::carry()","82":"Fn1Test::::cocartesian()","83":"Fn1Test::::cocartesian()","84":"Fn1Test::::cocartesian()","85":"Fn1Test::::cocartesian()","86":"Fn1Test::::cocartesian()","87":"Fn1Test::::cocartesian()","89":"Fn1Test::::choose()","90":"Fn1Test::::choose()","91":"Fn1Test::::choose()","92":"Fn1Test::::choose()","93":"Fn1Test::::choose()","94":"Fn1Test::::choose()","96":"Fn1Test::::toFunction()","97":"Fn1Test::::toFunction()","98":"Fn1Test::::toFunction()","99":"Fn1Test::::toFunction()","100":"Fn1Test::::toFunction()","101":"Fn1Test::::toFunction()","103":"Fn1Test::::staticPure()","104":"Fn1Test::::staticPure()","105":"Fn1Test::::staticPure()","106":"Fn1Test::::staticPure()","107":"Fn1Test::::staticPure()","109":"Fn1Test::::withSelf()","110":"Fn1Test::::withSelf()","111":"Fn1Test::::withSelf()","112":"Fn1Test::::withSelf()"},"tests":[{"test_lines":[31,39],"covered_lines":[318]},{"test_lines":[41,48],"covered_lines":[48,134,203,216,230,318]},{"test_lines":[50,56],"covered_lines":[48,318,330]},{"test_lines":[58,62],"covered_lines":[48,71,318]},{"test_lines":[64,68],"covered_lines":[48,81,318]},{"test_lines":[70,74],"covered_lines":[48,134,241,318]},{"test_lines":[76,80],"covered_lines":[48,134,203,230,241,249,278,318]},{"test_lines":[82,87],"covered_lines":[48,134,260,318]},{"test_lines":[89,94],"covered_lines":[48,49,134,270,318]},{"test_lines":[96,101],"covered_lines":[48,90,318]},{"test_lines":[103,107],"covered_lines":[48,318,340]},{"test_lines":[109,112],"covered_lines":[48,318,353]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/Fn0.java":{"class_content":["package com.jnape.palatable.lambda.functions;\n","\n","import com.jnape.palatable.lambda.adt.Unit;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","import com.jnape.palatable.lambda.monad.Monad;\n","\n","import java.util.concurrent.Callable;\n","import java.util.function.Supplier;\n","\n","import static com.jnape.palatable.lambda.adt.Unit.UNIT;\n","\n","/**\n"," * A function taking \"no arguments\", implemented as an <code>{@link Fn1}&lt;{@link Unit}, A&gt;</code>.\n"," *\n"," * @param <A> the result type\n"," * @see Fn1\n"," * @see Callable\n"," */\n","@FunctionalInterface\n","public interface Fn0<A> extends Fn1<Unit, A> {\n","\n","    A checkedApply() throws Throwable;\n","\n","    /**\n","     * Convenience method for applying this {@link Fn0} without providing an explicit {@link Unit}.\n","     *\n","     * @return the result\n","     */\n","    default A apply() {\n","        return apply(UNIT);\n","    }\n","\n","    /**\n","     * Convert this {@link Fn0} to a java {@link Supplier}\n","     *\n","     * @return the {@link Supplier}\n","     */\n","    default Supplier<A> toSupplier() {\n","        return this::apply;\n","    }\n","\n","    /**\n","     * Convert this {@link Fn0} to a java {@link Callable}\n","     *\n","     * @return the {@link Callable}\n","     */\n","    default Callable<A> toCallable() {\n","        return this::apply;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    default A checkedApply(Unit unit) throws Throwable {\n","        return checkedApply();\n","    }\n","\n","    @Override\n","    default <B> Fn0<B> flatMap(Fn1<? super A, ? extends Monad<B, Fn1<Unit, ?>>> f) {\n","        return Fn1.super.flatMap(f).thunk(UNIT);\n","    }\n","\n","    @Override\n","    default <B> Fn0<B> fmap(Fn1<? super A, ? extends B> f) {\n","        return Fn1.super.<B>fmap(f).thunk(UNIT);\n","    }\n","\n","    @Override\n","    default <B> Fn0<B> pure(B b) {\n","        return Fn1.super.pure(b).thunk(UNIT);\n","    }\n","\n","    @Override\n","    default <B> Fn0<B> zip(Applicative<Fn1<? super A, ? extends B>, Fn1<Unit, ?>> appFn) {\n","        return Fn1.super.zip(appFn).thunk(UNIT);\n","    }\n","\n","    @Override\n","    default <B> Fn0<B> zip(Fn2<Unit, A, B> appFn) {\n","        return Fn1.super.zip(appFn).thunk(UNIT);\n","    }\n","\n","    @Override\n","    default <B> Fn0<B> discardL(Applicative<B, Fn1<Unit, ?>> appB) {\n","        return Fn1.super.discardL(appB).thunk(UNIT);\n","    }\n","\n","    @Override\n","    default <B> Fn0<A> discardR(Applicative<B, Fn1<Unit, ?>> appB) {\n","        return Fn1.super.discardR(appB).thunk(UNIT);\n","    }\n","\n","    @Override\n","    default <B> Fn0<B> diMapR(Fn1<? super A, ? extends B> fn) {\n","        return Fn1.super.<B>diMapR(fn).thunk(UNIT);\n","    }\n","\n","    /**\n","     * Convenience method for converting a {@link Supplier} to an {@link Fn0}.\n","     *\n","     * @param supplier the supplier\n","     * @param <A>      the output type\n","     * @return the {@link Fn0}\n","     */\n","    static <A> Fn0<A> fromSupplier(Supplier<A> supplier) {\n","        return supplier::get;\n","    }\n","\n","    /**\n","     * Convenience method for converting a {@link Callable} to an {@link Fn0}.\n","     *\n","     * @param callable the callable\n","     * @param <A>      the output type\n","     * @return the {@link Fn0}\n","     */\n","    static <A> Fn0<A> fromCallable(Callable<A> callable) {\n","        return callable::call;\n","    }\n","\n","    /**\n","     * Static factory method for coercing a lambda to an {@link Fn0}.\n","     *\n","     * @param fn  the lambda to coerce\n","     * @param <A> the output type\n","     * @return the {@link Fn0}\n","     */\n","    static <A> Fn0<A> fn0(Fn0<A> fn) {\n","        return fn;\n","    }\n","\n","    /**\n","     * Static factory method for adapting an <code>{@link Fn1}&lt;Unit, A&gt;</code> to an\n","     * <code>{@link Fn0}&lt;A&gt;</code>.\n","     *\n","     * @param fn  the {@link Fn1}\n","     * @param <A> the output type\n","     * @return the {@link Fn0}\n","     */\n","    static <A> Fn0<A> fn0(Fn1<Unit, A> fn) {\n","        return fn0(() -> fn.apply(UNIT));\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions;\n","\n","import org.junit.Test;\n","\n","import java.util.concurrent.Callable;\n","import java.util.function.Supplier;\n","\n","import static org.junit.Assert.assertEquals;\n","\n","public class Fn0Test {\n","\n","    @Test\n","    public void fromSupplier() {\n","        Supplier<Integer> supplier = () -> 1;\n","        Fn0<Integer>      fn0      = Fn0.fromSupplier(supplier);\n","        assertEquals((Integer) 1, fn0.apply());\n","    }\n","\n","    @Test\n","    public void fromCallable() {\n","        Callable<Integer> callable = () -> 1;\n","        Fn0<Integer>      fn0      = Fn0.fromCallable(callable);\n","        assertEquals((Integer) 1, fn0.apply());\n","    }\n","\n","    @Test\n","    public void toSupplier() {\n","        Fn0<Integer>      fn0      = () -> 1;\n","        Supplier<Integer> supplier = fn0.toSupplier();\n","        assertEquals((Integer) 1, supplier.get());\n","    }\n","\n","    @Test\n","    public void toCallable() throws Exception {\n","        Fn0<Integer>      fn0      = () -> 1;\n","        Callable<Integer> callable = fn0.toCallable();\n","        assertEquals((Integer) 1, callable.call());\n","    }\n","}"],"method_lines_dic":{"Fn0::::checkedApply()":[22,22],"Fn0::::apply()":[29,31],"Fn0::::toSupplier()":[38,40],"Fn0::::toCallable()":[47,49],"Fn0::::checkedApply(com.jnape.palatable.lambda.adt.Unit)":[54,57],"Fn0::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.functions.Fn1<com.jnape.palatable.lambda.adt.Unit, ?>>>)":[59,62],"Fn0::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)":[64,67],"Fn0::::pure(B)":[69,72],"Fn0::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functions.Fn1<com.jnape.palatable.lambda.adt.Unit, ?>>)":[74,77],"Fn0::::zip(com.jnape.palatable.lambda.functions.Fn2<com.jnape.palatable.lambda.adt.Unit, A, B>)":[79,82],"Fn0::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functions.Fn1<com.jnape.palatable.lambda.adt.Unit, ?>>)":[84,87],"Fn0::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functions.Fn1<com.jnape.palatable.lambda.adt.Unit, ?>>)":[89,92],"Fn0::::diMapR(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)":[94,97],"Fn0::::fromSupplier(java.util.function.Supplier<A>)":[106,108],"Fn0::::fromCallable(java.util.concurrent.Callable<A>)":[117,119],"Fn0::::fn0(com.jnape.palatable.lambda.functions.Fn0<A>)":[128,130],"Fn0::::fn0(com.jnape.palatable.lambda.functions.Fn1<com.jnape.palatable.lambda.adt.Unit, A>)":[140,142]},"test_method_lines_dic":{"Fn0Test::::fromSupplier()":[12,17],"Fn0Test::::fromCallable()":[19,24],"Fn0Test::::toSupplier()":[26,31],"Fn0Test::::toCallable()":[33,38]},"reverse_method_lines_dic":{"22":"Fn0::::checkedApply()","29":"Fn0::::apply()","30":"Fn0::::apply()","31":"Fn0::::apply()","38":"Fn0::::toSupplier()","39":"Fn0::::toSupplier()","40":"Fn0::::toSupplier()","47":"Fn0::::toCallable()","48":"Fn0::::toCallable()","49":"Fn0::::toCallable()","54":"Fn0::::checkedApply(com.jnape.palatable.lambda.adt.Unit)","55":"Fn0::::checkedApply(com.jnape.palatable.lambda.adt.Unit)","56":"Fn0::::checkedApply(com.jnape.palatable.lambda.adt.Unit)","57":"Fn0::::checkedApply(com.jnape.palatable.lambda.adt.Unit)","59":"Fn0::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.functions.Fn1<com.jnape.palatable.lambda.adt.Unit, ?>>>)","60":"Fn0::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.functions.Fn1<com.jnape.palatable.lambda.adt.Unit, ?>>>)","61":"Fn0::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.functions.Fn1<com.jnape.palatable.lambda.adt.Unit, ?>>>)","62":"Fn0::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.monad.Monad<B, com.jnape.palatable.lambda.functions.Fn1<com.jnape.palatable.lambda.adt.Unit, ?>>>)","64":"Fn0::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","65":"Fn0::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","66":"Fn0::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","67":"Fn0::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","69":"Fn0::::pure(B)","70":"Fn0::::pure(B)","71":"Fn0::::pure(B)","72":"Fn0::::pure(B)","74":"Fn0::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functions.Fn1<com.jnape.palatable.lambda.adt.Unit, ?>>)","75":"Fn0::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functions.Fn1<com.jnape.palatable.lambda.adt.Unit, ?>>)","76":"Fn0::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functions.Fn1<com.jnape.palatable.lambda.adt.Unit, ?>>)","77":"Fn0::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>, com.jnape.palatable.lambda.functions.Fn1<com.jnape.palatable.lambda.adt.Unit, ?>>)","79":"Fn0::::zip(com.jnape.palatable.lambda.functions.Fn2<com.jnape.palatable.lambda.adt.Unit, A, B>)","80":"Fn0::::zip(com.jnape.palatable.lambda.functions.Fn2<com.jnape.palatable.lambda.adt.Unit, A, B>)","81":"Fn0::::zip(com.jnape.palatable.lambda.functions.Fn2<com.jnape.palatable.lambda.adt.Unit, A, B>)","82":"Fn0::::zip(com.jnape.palatable.lambda.functions.Fn2<com.jnape.palatable.lambda.adt.Unit, A, B>)","84":"Fn0::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functions.Fn1<com.jnape.palatable.lambda.adt.Unit, ?>>)","85":"Fn0::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functions.Fn1<com.jnape.palatable.lambda.adt.Unit, ?>>)","86":"Fn0::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functions.Fn1<com.jnape.palatable.lambda.adt.Unit, ?>>)","87":"Fn0::::discardL(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functions.Fn1<com.jnape.palatable.lambda.adt.Unit, ?>>)","89":"Fn0::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functions.Fn1<com.jnape.palatable.lambda.adt.Unit, ?>>)","90":"Fn0::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functions.Fn1<com.jnape.palatable.lambda.adt.Unit, ?>>)","91":"Fn0::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functions.Fn1<com.jnape.palatable.lambda.adt.Unit, ?>>)","92":"Fn0::::discardR(com.jnape.palatable.lambda.functor.Applicative<B, com.jnape.palatable.lambda.functions.Fn1<com.jnape.palatable.lambda.adt.Unit, ?>>)","94":"Fn0::::diMapR(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","95":"Fn0::::diMapR(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","96":"Fn0::::diMapR(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","97":"Fn0::::diMapR(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","106":"Fn0::::fromSupplier(java.util.function.Supplier<A>)","107":"Fn0::::fromSupplier(java.util.function.Supplier<A>)","108":"Fn0::::fromSupplier(java.util.function.Supplier<A>)","117":"Fn0::::fromCallable(java.util.concurrent.Callable<A>)","118":"Fn0::::fromCallable(java.util.concurrent.Callable<A>)","119":"Fn0::::fromCallable(java.util.concurrent.Callable<A>)","128":"Fn0::::fn0(com.jnape.palatable.lambda.functions.Fn0<A>)","129":"Fn0::::fn0(com.jnape.palatable.lambda.functions.Fn0<A>)","130":"Fn0::::fn0(com.jnape.palatable.lambda.functions.Fn0<A>)","140":"Fn0::::fn0(com.jnape.palatable.lambda.functions.Fn1<com.jnape.palatable.lambda.adt.Unit, A>)","141":"Fn0::::fn0(com.jnape.palatable.lambda.functions.Fn1<com.jnape.palatable.lambda.adt.Unit, A>)","142":"Fn0::::fn0(com.jnape.palatable.lambda.functions.Fn1<com.jnape.palatable.lambda.adt.Unit, A>)"},"test_reverse_method_lines_dic":{"12":"Fn0Test::::fromSupplier()","13":"Fn0Test::::fromSupplier()","14":"Fn0Test::::fromSupplier()","15":"Fn0Test::::fromSupplier()","16":"Fn0Test::::fromSupplier()","17":"Fn0Test::::fromSupplier()","19":"Fn0Test::::fromCallable()","20":"Fn0Test::::fromCallable()","21":"Fn0Test::::fromCallable()","22":"Fn0Test::::fromCallable()","23":"Fn0Test::::fromCallable()","24":"Fn0Test::::fromCallable()","26":"Fn0Test::::toSupplier()","27":"Fn0Test::::toSupplier()","28":"Fn0Test::::toSupplier()","29":"Fn0Test::::toSupplier()","30":"Fn0Test::::toSupplier()","31":"Fn0Test::::toSupplier()","33":"Fn0Test::::toCallable()","34":"Fn0Test::::toCallable()","35":"Fn0Test::::toCallable()","36":"Fn0Test::::toCallable()","37":"Fn0Test::::toCallable()","38":"Fn0Test::::toCallable()"},"tests":[{"test_lines":[12,17],"covered_lines":[30,56,107]},{"test_lines":[19,24],"covered_lines":[30,56,118]},{"test_lines":[26,31],"covered_lines":[30,39,56]},{"test_lines":[33,38],"covered_lines":[30,48,56]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/Fn5.java":{"class_content":["package com.jnape.palatable.lambda.functions;\n","\n","import com.jnape.palatable.lambda.adt.product.Product2;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","import com.jnape.palatable.lambda.internal.Runtime;\n","\n","import static com.jnape.palatable.lambda.functions.Fn6.fn6;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","\n","/**\n"," * A function taking five arguments. Defined in terms of {@link Fn4}, so similarly auto-curried.\n"," *\n"," * @param <A> The first argument type\n"," * @param <B> The second argument type\n"," * @param <C> The third argument type\n"," * @param <D> The fourth argument type\n"," * @param <E> The fifth argument type\n"," * @param <F> The return type\n"," * @see Fn4\n"," */\n","@FunctionalInterface\n","public interface Fn5<A, B, C, D, E, F> extends Fn4<A, B, C, D, Fn1<E, F>> {\n","\n","    F checkedApply(A a, B b, C c, D d, E e) throws Throwable;\n","\n","    /**\n","     * Invoke this function with the given arguments.\n","     *\n","     * @param a the first argument\n","     * @param b the second argument\n","     * @param c the third argument\n","     * @param d the fourth argument\n","     * @param e the fifth argument\n","     * @return the result of the function application\n","     */\n","    default F apply(A a, B b, C c, D d, E e) {\n","        try {\n","            return checkedApply(a, b, c, d, e);\n","        } catch (Throwable t) {\n","            throw Runtime.throwChecked(t);\n","        }\n","\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    default Fn1<E, F> checkedApply(A a, B b, C c, D d) throws Throwable {\n","        return e -> checkedApply(a, b, c, d, e);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    default <Z> Fn6<Z, A, B, C, D, E, F> widen() {\n","        return fn6(constantly(this));\n","    }\n","\n","    /**\n","     * Partially apply this function by taking its first argument.\n","     *\n","     * @param a the first argument\n","     * @return an {@link Fn5} that takes the remaining arguments and returns the result\n","     */\n","    @Override\n","    default Fn4<B, C, D, E, F> apply(A a) {\n","        return (b, c, d, e) -> apply(a, b, c, d, e);\n","    }\n","\n","    /**\n","     * Partially apply this function by taking its first two arguments.\n","     *\n","     * @param a the first argument\n","     * @param b the second argument\n","     * @return an {@link Fn3} that takes the remaining arguments and returns the result\n","     */\n","    @Override\n","    default Fn3<C, D, E, F> apply(A a, B b) {\n","        return (c, d, e) -> apply(a, b, c, d, e);\n","    }\n","\n","    /**\n","     * Partially apply this function by taking its first three arguments.\n","     *\n","     * @param a the first argument\n","     * @param b the second argument\n","     * @param c the third argument\n","     * @return an {@link Fn2} that takes remaining arguments and returns the result\n","     */\n","    @Override\n","    default Fn2<D, E, F> apply(A a, B b, C c) {\n","        return (d, e) -> apply(a, b, c, d, e);\n","    }\n","\n","    /**\n","     * Partially apply this function by taking its first four arguments.\n","     *\n","     * @param a the first argument\n","     * @param b the second argument\n","     * @param c the third argument\n","     * @param d the fourth argument\n","     * @return an {@link Fn1} that takes the remaining argument and returns the result\n","     */\n","    @Override\n","    default Fn1<E, F> apply(A a, B b, C c, D d) {\n","        return (e) -> apply(a, b, c, d, e);\n","    }\n","\n","    /**\n","     * Flip the order of the first two arguments.\n","     *\n","     * @return an {@link Fn5} that takes the first and second arguments in reversed order\n","     */\n","    @Override\n","    default Fn5<B, A, C, D, E, F> flip() {\n","        return (b, a, c, d, e) -> apply(a, b, c, d, e);\n","    }\n","\n","    /**\n","     * Returns an {@link Fn4} that takes the first two arguments as a <code>{@link Product2}&lt;A, B&gt;</code> and the\n","     * remaining arguments.\n","     *\n","     * @return an {@link Fn4} taking a {@link Product2} and the remaining arguments\n","     */\n","    @Override\n","    default Fn4<? super Product2<? extends A, ? extends B>, C, D, E, F> uncurry() {\n","        return (ab, c, d, e) -> apply(ab._1(), ab._2(), c, d, e);\n","    }\n","\n","    @Override\n","    default <G> Fn5<A, B, C, D, E, F> discardR(Applicative<G, Fn1<A, ?>> appB) {\n","        return fn5(Fn4.super.discardR(appB));\n","    }\n","\n","    @Override\n","    default <Z> Fn5<Z, B, C, D, E, F> diMapL(Fn1<? super Z, ? extends A> fn) {\n","        return fn5(Fn4.super.diMapL(fn));\n","    }\n","\n","    @Override\n","    default <Z> Fn5<Z, B, C, D, E, F> contraMap(Fn1<? super Z, ? extends A> fn) {\n","        return fn5(Fn4.super.contraMap(fn));\n","    }\n","\n","    @Override\n","    default <Y, Z> Fn6<Y, Z, B, C, D, E, F> compose(Fn2<? super Y, ? super Z, ? extends A> before) {\n","        return fn6(Fn4.super.compose(before));\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a curried {@link Fn1} in an {@link Fn5}.\n","     *\n","     * @param curriedFn1 the curried fn1 to adapt\n","     * @param <A>        the first input argument type\n","     * @param <B>        the second input argument type\n","     * @param <C>        the third input argument type\n","     * @param <D>        the fourth input argument type\n","     * @param <E>        the fifth input argument type\n","     * @param <F>        the output type\n","     * @return the {@link Fn5}\n","     */\n","    static <A, B, C, D, E, F> Fn5<A, B, C, D, E, F> fn5(Fn1<A, Fn4<B, C, D, E, F>> curriedFn1) {\n","        return (a, b, c, d, e) -> curriedFn1.apply(a).apply(b, c, d, e);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a curried {@link Fn2} in an {@link Fn5}.\n","     *\n","     * @param curriedFn2 the curried fn2 to adapt\n","     * @param <A>        the first input argument type\n","     * @param <B>        the second input argument type\n","     * @param <C>        the third input argument type\n","     * @param <D>        the fourth input argument type\n","     * @param <E>        the fifth input argument type\n","     * @param <F>        the output type\n","     * @return the {@link Fn5}\n","     */\n","    static <A, B, C, D, E, F> Fn5<A, B, C, D, E, F> fn5(Fn2<A, B, Fn3<C, D, E, F>> curriedFn2) {\n","        return (a, b, c, d, e) -> curriedFn2.apply(a, b).apply(c, d, e);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a curried {@link Fn3} in an {@link Fn5}.\n","     *\n","     * @param curriedFn3 the curried fn3 to adapt\n","     * @param <A>        the first input argument type\n","     * @param <B>        the second input argument type\n","     * @param <C>        the third input argument type\n","     * @param <D>        the fourth input argument type\n","     * @param <E>        the fifth input argument type\n","     * @param <F>        the output type\n","     * @return the {@link Fn5}\n","     */\n","    static <A, B, C, D, E, F> Fn5<A, B, C, D, E, F> fn5(Fn3<A, B, C, Fn2<D, E, F>> curriedFn3) {\n","        return (a, b, c, d, e) -> curriedFn3.apply(a, b, c).apply(d, e);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a curried {@link Fn4} in an {@link Fn5}.\n","     *\n","     * @param curriedFn4 the curried fn4 to adapt\n","     * @param <A>        the first input argument type\n","     * @param <B>        the second input argument type\n","     * @param <C>        the third input argument type\n","     * @param <D>        the fourth input argument type\n","     * @param <E>        the fifth input argument type\n","     * @param <F>        the output type\n","     * @return the {@link Fn5}\n","     */\n","    static <A, B, C, D, E, F> Fn5<A, B, C, D, E, F> fn5(Fn4<A, B, C, D, Fn1<E, F>> curriedFn4) {\n","        return (a, b, c, d, e) -> curriedFn4.apply(a, b, c, d).apply(e);\n","    }\n","\n","    /**\n","     * Static factory method for coercing a lambda to an {@link Fn5}.\n","     *\n","     * @param fn  the lambda to coerce\n","     * @param <A> the first input argument type\n","     * @param <B> the second input argument type\n","     * @param <C> the third input argument type\n","     * @param <D> the fourth input argument type\n","     * @param <E> the fifth input argument type\n","     * @param <F> the output type\n","     * @return the {@link Fn5}\n","     */\n","    static <A, B, C, D, E, F> Fn5<A, B, C, D, E, F> fn5(Fn5<A, B, C, D, E, F> fn) {\n","        return fn;\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions;\n","\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.Fn5.fn5;\n","import static org.hamcrest.core.Is.is;\n","import static org.junit.Assert.assertEquals;\n","import static org.junit.Assert.assertThat;\n","\n","public class Fn5Test {\n","\n","    private static final Fn5<String, String, String, String, String, String> APPEND =\n","            (s1, s2, s3, s4, s5) -> s1 + s2 + s3 + s4 + s5;\n","\n","    @Test\n","    public void canBePartiallyApplied() {\n","        assertThat(APPEND.apply(\"a\").apply(\"b\").apply(\"c\").apply(\"d\").apply(\"e\"), is(\"abcde\"));\n","        assertThat(APPEND.apply(\"a\").apply(\"b\").apply(\"c\").apply(\"d\", \"e\"), is(\"abcde\"));\n","        assertThat(APPEND.apply(\"a\").apply(\"b\").apply(\"c\", \"d\", \"e\"), is(\"abcde\"));\n","        assertThat(APPEND.apply(\"a\").apply(\"b\", \"c\", \"d\", \"e\"), is(\"abcde\"));\n","        assertThat(APPEND.apply(\"a\", \"b\", \"c\", \"d\", \"e\"), is(\"abcde\"));\n","    }\n","\n","    @Test\n","    public void flipsFirstAndSecondArgument() {\n","        assertThat(APPEND.flip().apply(\"a\", \"b\", \"c\", \"d\", \"e\"), is(\"bacde\"));\n","    }\n","\n","    @Test\n","    public void uncurries() {\n","        assertThat(APPEND.uncurry().apply(tuple(\"a\", \"b\"), \"c\", \"d\", \"e\"), is(\"abcde\"));\n","    }\n","\n","    @Test\n","    public void staticFactoryMethods() {\n","        Fn1<String, Fn4<String, String, String, String, String>> fn1 = a -> (b, c, d, e) -> a + b + c + d + e;\n","        assertEquals(\"abcde\", fn5(fn1).apply(\"a\", \"b\", \"c\", \"d\", \"e\"));\n","\n","        Fn2<String, String, Fn3<String, String, String, String>> fn2 = (a, b) -> (c, d, e) -> a + b + c + d + e;\n","        assertEquals(\"abcde\", fn5(fn2).apply(\"a\", \"b\", \"c\", \"d\", \"e\"));\n","\n","        Fn3<String, String, String, Fn2<String, String, String>> fn3 = (a, b, c) -> (d, e) -> a + b + c + d + e;\n","        assertEquals(\"abcde\", fn5(fn3).apply(\"a\", \"b\", \"c\", \"d\", \"e\"));\n","\n","        Fn4<String, String, String, String, Fn1<String, String>> fn4 = (a, b, c, d) -> (e) -> a + b + c + d + e;\n","        assertEquals(\"abcde\", fn5(fn4).apply(\"a\", \"b\", \"c\", \"d\", \"e\"));\n","\n","        assertEquals(\"abcde\", Fn5.<String, String, String, String, String, String>fn5((a, b, c, d, e) -> a + b + c + d + e).apply(\"a\", \"b\", \"c\", \"d\", \"e\"));\n","    }\n","}\n"],"method_lines_dic":{"Fn5::::checkedApply(A,B,C,D,E)":[24,24],"Fn5::::apply(A,B,C,D,E)":[36,43],"Fn5::::checkedApply(A,B,C,D)":[48,51],"Fn5::::widen()":[56,59],"Fn5::::apply(A)":[67,70],"Fn5::::apply(A,B)":[79,82],"Fn5::::apply(A,B,C)":[92,95],"Fn5::::apply(A,B,C,D)":[106,109],"Fn5::::flip()":[116,119],"Fn5::::uncurry()":[127,130],"Fn5::::discardR(com.jnape.palatable.lambda.functor.Applicative<G, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)":[132,135],"Fn5::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)":[137,140],"Fn5::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)":[142,145],"Fn5::::compose(com.jnape.palatable.lambda.functions.Fn2<? super Y, ? super Z, ? extends A>)":[147,150],"Fn5::::fn5(com.jnape.palatable.lambda.functions.Fn1<A, com.jnape.palatable.lambda.functions.Fn4<B, C, D, E, F>>)":[164,166],"Fn5::::fn5(com.jnape.palatable.lambda.functions.Fn2<A, B, com.jnape.palatable.lambda.functions.Fn3<C, D, E, F>>)":[180,182],"Fn5::::fn5(com.jnape.palatable.lambda.functions.Fn3<A, B, C, com.jnape.palatable.lambda.functions.Fn2<D, E, F>>)":[196,198],"Fn5::::fn5(com.jnape.palatable.lambda.functions.Fn4<A, B, C, D, com.jnape.palatable.lambda.functions.Fn1<E, F>>)":[212,214],"Fn5::::fn5(com.jnape.palatable.lambda.functions.Fn5<A, B, C, D, E, F>)":[228,230]},"test_method_lines_dic":{"Fn5Test::::canBePartiallyApplied()":[16,23],"Fn5Test::::flipsFirstAndSecondArgument()":[25,28],"Fn5Test::::uncurries()":[30,33],"Fn5Test::::staticFactoryMethods()":[35,50]},"reverse_method_lines_dic":{"24":"Fn5::::checkedApply(A,B,C,D,E)","36":"Fn5::::apply(A,B,C,D,E)","37":"Fn5::::apply(A,B,C,D,E)","38":"Fn5::::apply(A,B,C,D,E)","39":"Fn5::::apply(A,B,C,D,E)","40":"Fn5::::apply(A,B,C,D,E)","41":"Fn5::::apply(A,B,C,D,E)","42":"Fn5::::apply(A,B,C,D,E)","43":"Fn5::::apply(A,B,C,D,E)","48":"Fn5::::checkedApply(A,B,C,D)","49":"Fn5::::checkedApply(A,B,C,D)","50":"Fn5::::checkedApply(A,B,C,D)","51":"Fn5::::checkedApply(A,B,C,D)","56":"Fn5::::widen()","57":"Fn5::::widen()","58":"Fn5::::widen()","59":"Fn5::::widen()","67":"Fn5::::apply(A)","68":"Fn5::::apply(A)","69":"Fn5::::apply(A)","70":"Fn5::::apply(A)","79":"Fn5::::apply(A,B)","80":"Fn5::::apply(A,B)","81":"Fn5::::apply(A,B)","82":"Fn5::::apply(A,B)","92":"Fn5::::apply(A,B,C)","93":"Fn5::::apply(A,B,C)","94":"Fn5::::apply(A,B,C)","95":"Fn5::::apply(A,B,C)","106":"Fn5::::apply(A,B,C,D)","107":"Fn5::::apply(A,B,C,D)","108":"Fn5::::apply(A,B,C,D)","109":"Fn5::::apply(A,B,C,D)","116":"Fn5::::flip()","117":"Fn5::::flip()","118":"Fn5::::flip()","119":"Fn5::::flip()","127":"Fn5::::uncurry()","128":"Fn5::::uncurry()","129":"Fn5::::uncurry()","130":"Fn5::::uncurry()","132":"Fn5::::discardR(com.jnape.palatable.lambda.functor.Applicative<G, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","133":"Fn5::::discardR(com.jnape.palatable.lambda.functor.Applicative<G, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","134":"Fn5::::discardR(com.jnape.palatable.lambda.functor.Applicative<G, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","135":"Fn5::::discardR(com.jnape.palatable.lambda.functor.Applicative<G, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","137":"Fn5::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","138":"Fn5::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","139":"Fn5::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","140":"Fn5::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","142":"Fn5::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","143":"Fn5::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","144":"Fn5::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","145":"Fn5::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","147":"Fn5::::compose(com.jnape.palatable.lambda.functions.Fn2<? super Y, ? super Z, ? extends A>)","148":"Fn5::::compose(com.jnape.palatable.lambda.functions.Fn2<? super Y, ? super Z, ? extends A>)","149":"Fn5::::compose(com.jnape.palatable.lambda.functions.Fn2<? super Y, ? super Z, ? extends A>)","150":"Fn5::::compose(com.jnape.palatable.lambda.functions.Fn2<? super Y, ? super Z, ? extends A>)","164":"Fn5::::fn5(com.jnape.palatable.lambda.functions.Fn1<A, com.jnape.palatable.lambda.functions.Fn4<B, C, D, E, F>>)","165":"Fn5::::fn5(com.jnape.palatable.lambda.functions.Fn1<A, com.jnape.palatable.lambda.functions.Fn4<B, C, D, E, F>>)","166":"Fn5::::fn5(com.jnape.palatable.lambda.functions.Fn1<A, com.jnape.palatable.lambda.functions.Fn4<B, C, D, E, F>>)","180":"Fn5::::fn5(com.jnape.palatable.lambda.functions.Fn2<A, B, com.jnape.palatable.lambda.functions.Fn3<C, D, E, F>>)","181":"Fn5::::fn5(com.jnape.palatable.lambda.functions.Fn2<A, B, com.jnape.palatable.lambda.functions.Fn3<C, D, E, F>>)","182":"Fn5::::fn5(com.jnape.palatable.lambda.functions.Fn2<A, B, com.jnape.palatable.lambda.functions.Fn3<C, D, E, F>>)","196":"Fn5::::fn5(com.jnape.palatable.lambda.functions.Fn3<A, B, C, com.jnape.palatable.lambda.functions.Fn2<D, E, F>>)","197":"Fn5::::fn5(com.jnape.palatable.lambda.functions.Fn3<A, B, C, com.jnape.palatable.lambda.functions.Fn2<D, E, F>>)","198":"Fn5::::fn5(com.jnape.palatable.lambda.functions.Fn3<A, B, C, com.jnape.palatable.lambda.functions.Fn2<D, E, F>>)","212":"Fn5::::fn5(com.jnape.palatable.lambda.functions.Fn4<A, B, C, D, com.jnape.palatable.lambda.functions.Fn1<E, F>>)","213":"Fn5::::fn5(com.jnape.palatable.lambda.functions.Fn4<A, B, C, D, com.jnape.palatable.lambda.functions.Fn1<E, F>>)","214":"Fn5::::fn5(com.jnape.palatable.lambda.functions.Fn4<A, B, C, D, com.jnape.palatable.lambda.functions.Fn1<E, F>>)","228":"Fn5::::fn5(com.jnape.palatable.lambda.functions.Fn5<A, B, C, D, E, F>)","229":"Fn5::::fn5(com.jnape.palatable.lambda.functions.Fn5<A, B, C, D, E, F>)","230":"Fn5::::fn5(com.jnape.palatable.lambda.functions.Fn5<A, B, C, D, E, F>)"},"test_reverse_method_lines_dic":{"16":"Fn5Test::::canBePartiallyApplied()","17":"Fn5Test::::canBePartiallyApplied()","18":"Fn5Test::::canBePartiallyApplied()","19":"Fn5Test::::canBePartiallyApplied()","20":"Fn5Test::::canBePartiallyApplied()","21":"Fn5Test::::canBePartiallyApplied()","22":"Fn5Test::::canBePartiallyApplied()","23":"Fn5Test::::canBePartiallyApplied()","25":"Fn5Test::::flipsFirstAndSecondArgument()","26":"Fn5Test::::flipsFirstAndSecondArgument()","27":"Fn5Test::::flipsFirstAndSecondArgument()","28":"Fn5Test::::flipsFirstAndSecondArgument()","30":"Fn5Test::::uncurries()","31":"Fn5Test::::uncurries()","32":"Fn5Test::::uncurries()","33":"Fn5Test::::uncurries()","35":"Fn5Test::::staticFactoryMethods()","36":"Fn5Test::::staticFactoryMethods()","37":"Fn5Test::::staticFactoryMethods()","38":"Fn5Test::::staticFactoryMethods()","39":"Fn5Test::::staticFactoryMethods()","40":"Fn5Test::::staticFactoryMethods()","41":"Fn5Test::::staticFactoryMethods()","42":"Fn5Test::::staticFactoryMethods()","43":"Fn5Test::::staticFactoryMethods()","44":"Fn5Test::::staticFactoryMethods()","45":"Fn5Test::::staticFactoryMethods()","46":"Fn5Test::::staticFactoryMethods()","47":"Fn5Test::::staticFactoryMethods()","48":"Fn5Test::::staticFactoryMethods()","49":"Fn5Test::::staticFactoryMethods()","50":"Fn5Test::::staticFactoryMethods()"},"tests":[{"test_lines":[16,23],"covered_lines":[38,69]},{"test_lines":[25,28],"covered_lines":[38,118]},{"test_lines":[30,33],"covered_lines":[38,129]},{"test_lines":[35,50],"covered_lines":[38,165,181,197,213,229]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/Fn4.java":{"class_content":["package com.jnape.palatable.lambda.functions;\n","\n","import com.jnape.palatable.lambda.adt.product.Product2;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","import com.jnape.palatable.lambda.internal.Runtime;\n","\n","import static com.jnape.palatable.lambda.functions.Fn5.fn5;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","\n","/**\n"," * A function taking four arguments. Defined in terms of {@link Fn3}, so similarly auto-curried.\n"," *\n"," * @param <A> The first argument type\n"," * @param <B> The second argument type\n"," * @param <C> The third argument type\n"," * @param <D> The fourth argument type\n"," * @param <E> The return type\n"," * @see Fn3\n"," */\n","@FunctionalInterface\n","public interface Fn4<A, B, C, D, E> extends Fn3<A, B, C, Fn1<D, E>> {\n","\n","    E checkedApply(A a, B b, C c, D d) throws Throwable;\n","\n","    /**\n","     * Invoke this function with the given arguments.\n","     *\n","     * @param a the first argument\n","     * @param b the second argument\n","     * @param c the third argument\n","     * @param d the fourth argument\n","     * @return the result of the function application\n","     */\n","    default E apply(A a, B b, C c, D d) {\n","        try {\n","            return checkedApply(a, b, c, d);\n","        } catch (Throwable t) {\n","            throw Runtime.throwChecked(t);\n","        }\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    default Fn1<D, E> checkedApply(A a, B b, C c) throws Throwable {\n","        return d -> checkedApply(a, b, c, d);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    default <Z> Fn5<Z, A, B, C, D, E> widen() {\n","        return fn5(constantly(this));\n","    }\n","\n","    /**\n","     * Partially apply this function by taking its first argument.\n","     *\n","     * @param a the first argument\n","     * @return an {@link Fn3}&lt;B, C, D, E&gt;\n","     */\n","    @Override\n","    default Fn3<B, C, D, E> apply(A a) {\n","        return (b, c, d) -> apply(a, b, c, d);\n","    }\n","\n","    /**\n","     * Partially apply this function by taking its first two arguments.\n","     *\n","     * @param a the first argument\n","     * @param b the second argument\n","     * @return an {@link Fn2}&lt;C, D, E&gt;\n","     */\n","    @Override\n","    default Fn2<C, D, E> apply(A a, B b) {\n","        return (c, d) -> apply(a, b, c, d);\n","    }\n","\n","    /**\n","     * Partially apply this function by taking its first three arguments.\n","     *\n","     * @param a the first argument\n","     * @param b the second argument\n","     * @param c the third argument\n","     * @return an {@link Fn1}&lt;D, E&gt;\n","     */\n","    @Override\n","    default Fn1<D, E> apply(A a, B b, C c) {\n","        return (d) -> apply(a, b, c, d);\n","    }\n","\n","    /**\n","     * Flip the order of the first two arguments.\n","     *\n","     * @return an {@link Fn4}&lt;B, A, C, D, E&gt;\n","     */\n","    @Override\n","    default Fn4<B, A, C, D, E> flip() {\n","        return (b, a, c, d) -> apply(a, b, c, d);\n","    }\n","\n","    /**\n","     * Returns an {@link Fn3} that takes the first two arguments as a <code>{@link Product2}&lt;A, B&gt;</code> and the\n","     * third and fourth arguments.\n","     *\n","     * @return an {@link Fn3} taking a {@link Product2} and the third and fourth arguments\n","     */\n","    @Override\n","    default Fn3<? super Product2<? extends A, ? extends B>, C, D, E> uncurry() {\n","        return (ab, c, d) -> apply(ab._1(), ab._2(), c, d);\n","    }\n","\n","    @Override\n","    default <F> Fn4<A, B, C, D, E> discardR(Applicative<F, Fn1<A, ?>> appB) {\n","        return fn4(Fn3.super.discardR(appB));\n","    }\n","\n","    @Override\n","    default <Z> Fn4<Z, B, C, D, E> diMapL(Fn1<? super Z, ? extends A> fn) {\n","        return fn4(Fn3.super.diMapL(fn));\n","    }\n","\n","    @Override\n","    default <Z> Fn4<Z, B, C, D, E> contraMap(Fn1<? super Z, ? extends A> fn) {\n","        return fn4(Fn3.super.contraMap(fn));\n","    }\n","\n","    @Override\n","    default <Y, Z> Fn5<Y, Z, B, C, D, E> compose(Fn2<? super Y, ? super Z, ? extends A> before) {\n","        return fn5(Fn3.super.compose(before));\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a curried {@link Fn1} in an {@link Fn4}.\n","     *\n","     * @param curriedFn1 the curried fn1 to adapt\n","     * @param <A>        the first input argument type\n","     * @param <B>        the second input argument type\n","     * @param <C>        the third input argument type\n","     * @param <D>        the fourth input argument type\n","     * @param <E>        the output type\n","     * @return the {@link Fn4}\n","     */\n","    static <A, B, C, D, E> Fn4<A, B, C, D, E> fn4(Fn1<A, Fn3<B, C, D, E>> curriedFn1) {\n","        return (a, b, c, d) -> curriedFn1.apply(a).apply(b, c, d);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a curried {@link Fn2} in an {@link Fn4}.\n","     *\n","     * @param curriedFn2 the curried fn2 to adapt\n","     * @param <A>        the first input argument type\n","     * @param <B>        the second input argument type\n","     * @param <C>        the third input argument type\n","     * @param <D>        the fourth input argument type\n","     * @param <E>        the output type\n","     * @return the {@link Fn4}\n","     */\n","    static <A, B, C, D, E> Fn4<A, B, C, D, E> fn4(Fn2<A, B, Fn2<C, D, E>> curriedFn2) {\n","        return (a, b, c, d) -> curriedFn2.apply(a, b).apply(c, d);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a curried {@link Fn3} in an {@link Fn4}.\n","     *\n","     * @param curriedFn3 the curried fn3 to adapt\n","     * @param <A>        the first input argument type\n","     * @param <B>        the second input argument type\n","     * @param <C>        the third input argument type\n","     * @param <D>        the fourth input argument type\n","     * @param <E>        the output type\n","     * @return the {@link Fn4}\n","     */\n","    static <A, B, C, D, E> Fn4<A, B, C, D, E> fn4(Fn3<A, B, C, Fn1<D, E>> curriedFn3) {\n","        return (a, b, c, d) -> curriedFn3.apply(a, b, c).apply(d);\n","    }\n","\n","    /**\n","     * Static factory method for coercing a lambda to an {@link Fn4}.\n","     *\n","     * @param fn  the lambda to coerce\n","     * @param <A> the first input argument type\n","     * @param <B> the second input argument type\n","     * @param <C> the third input argument type\n","     * @param <D> the fourth input argument type\n","     * @param <E> the output type\n","     * @return the {@link Fn4}\n","     */\n","    static <A, B, C, D, E> Fn4<A, B, C, D, E> fn4(Fn4<A, B, C, D, E> fn) {\n","        return fn;\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions;\n","\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.Fn4.fn4;\n","import static org.hamcrest.core.Is.is;\n","import static org.junit.Assert.assertEquals;\n","import static org.junit.Assert.assertThat;\n","\n","public class Fn4Test {\n","\n","    private static final Fn4<String, String, String, String, String> APPEND =\n","            (s1, s2, s3, s4) -> s1 + s2 + s3 + s4;\n","\n","    @Test\n","    public void canBePartiallyApplied() {\n","        assertThat(APPEND.apply(\"a\").apply(\"b\").apply(\"c\").apply(\"d\"), is(\"abcd\"));\n","        assertThat(APPEND.apply(\"a\").apply(\"b\").apply(\"c\", \"d\"), is(\"abcd\"));\n","        assertThat(APPEND.apply(\"a\").apply(\"b\", \"c\", \"d\"), is(\"abcd\"));\n","        assertThat(APPEND.apply(\"a\", \"b\", \"c\", \"d\"), is(\"abcd\"));\n","    }\n","\n","    @Test\n","    public void flipsFirstAndSecondArgument() {\n","        assertThat(APPEND.flip().apply(\"a\", \"b\", \"c\", \"d\"), is(\"bacd\"));\n","    }\n","\n","    @Test\n","    public void uncurries() {\n","        assertThat(APPEND.uncurry().apply(tuple(\"a\", \"b\"), \"c\", \"d\"), is(\"abcd\"));\n","    }\n","\n","    @Test\n","    public void staticFactoryMethods() {\n","        Fn1<String, Fn3<String, String, String, String>> fn1 = a -> (b, c, d) -> a + b + c + d;\n","        assertEquals(\"abcd\", fn4(fn1).apply(\"a\", \"b\", \"c\", \"d\"));\n","\n","        Fn2<String, String, Fn2<String, String, String>> fn2 = (a, b) -> (c, d) -> a + b + c + d;\n","        assertEquals(\"abcd\", fn4(fn2).apply(\"a\", \"b\", \"c\", \"d\"));\n","\n","        Fn3<String, String, String, Fn1<String, String>> fn3 = (a, b, c) -> (d) -> a + b + c + d;\n","        assertEquals(\"abcd\", fn4(fn3).apply(\"a\", \"b\", \"c\", \"d\"));\n","\n","        assertEquals(\"abcd\", Fn4.<String, String, String, String, String>fn4((a, b, c, d) -> a + b + c + d).apply(\"a\", \"b\", \"c\", \"d\"));\n","    }\n","}\n"],"method_lines_dic":{"Fn4::::checkedApply(A,B,C,D)":[23,23],"Fn4::::apply(A,B,C,D)":[34,40],"Fn4::::checkedApply(A,B,C)":[45,48],"Fn4::::widen()":[53,56],"Fn4::::apply(A)":[64,67],"Fn4::::apply(A,B)":[76,79],"Fn4::::apply(A,B,C)":[89,92],"Fn4::::flip()":[99,102],"Fn4::::uncurry()":[110,113],"Fn4::::discardR(com.jnape.palatable.lambda.functor.Applicative<F, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)":[115,118],"Fn4::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)":[120,123],"Fn4::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)":[125,128],"Fn4::::compose(com.jnape.palatable.lambda.functions.Fn2<? super Y, ? super Z, ? extends A>)":[130,133],"Fn4::::fn4(com.jnape.palatable.lambda.functions.Fn1<A, com.jnape.palatable.lambda.functions.Fn3<B, C, D, E>>)":[146,148],"Fn4::::fn4(com.jnape.palatable.lambda.functions.Fn2<A, B, com.jnape.palatable.lambda.functions.Fn2<C, D, E>>)":[161,163],"Fn4::::fn4(com.jnape.palatable.lambda.functions.Fn3<A, B, C, com.jnape.palatable.lambda.functions.Fn1<D, E>>)":[176,178],"Fn4::::fn4(com.jnape.palatable.lambda.functions.Fn4<A, B, C, D, E>)":[191,193]},"test_method_lines_dic":{"Fn4Test::::canBePartiallyApplied()":[16,22],"Fn4Test::::flipsFirstAndSecondArgument()":[24,27],"Fn4Test::::uncurries()":[29,32],"Fn4Test::::staticFactoryMethods()":[34,46]},"reverse_method_lines_dic":{"23":"Fn4::::checkedApply(A,B,C,D)","34":"Fn4::::apply(A,B,C,D)","35":"Fn4::::apply(A,B,C,D)","36":"Fn4::::apply(A,B,C,D)","37":"Fn4::::apply(A,B,C,D)","38":"Fn4::::apply(A,B,C,D)","39":"Fn4::::apply(A,B,C,D)","40":"Fn4::::apply(A,B,C,D)","45":"Fn4::::checkedApply(A,B,C)","46":"Fn4::::checkedApply(A,B,C)","47":"Fn4::::checkedApply(A,B,C)","48":"Fn4::::checkedApply(A,B,C)","53":"Fn4::::widen()","54":"Fn4::::widen()","55":"Fn4::::widen()","56":"Fn4::::widen()","64":"Fn4::::apply(A)","65":"Fn4::::apply(A)","66":"Fn4::::apply(A)","67":"Fn4::::apply(A)","76":"Fn4::::apply(A,B)","77":"Fn4::::apply(A,B)","78":"Fn4::::apply(A,B)","79":"Fn4::::apply(A,B)","89":"Fn4::::apply(A,B,C)","90":"Fn4::::apply(A,B,C)","91":"Fn4::::apply(A,B,C)","92":"Fn4::::apply(A,B,C)","99":"Fn4::::flip()","100":"Fn4::::flip()","101":"Fn4::::flip()","102":"Fn4::::flip()","110":"Fn4::::uncurry()","111":"Fn4::::uncurry()","112":"Fn4::::uncurry()","113":"Fn4::::uncurry()","115":"Fn4::::discardR(com.jnape.palatable.lambda.functor.Applicative<F, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","116":"Fn4::::discardR(com.jnape.palatable.lambda.functor.Applicative<F, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","117":"Fn4::::discardR(com.jnape.palatable.lambda.functor.Applicative<F, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","118":"Fn4::::discardR(com.jnape.palatable.lambda.functor.Applicative<F, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","120":"Fn4::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","121":"Fn4::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","122":"Fn4::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","123":"Fn4::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","125":"Fn4::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","126":"Fn4::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","127":"Fn4::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","128":"Fn4::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","130":"Fn4::::compose(com.jnape.palatable.lambda.functions.Fn2<? super Y, ? super Z, ? extends A>)","131":"Fn4::::compose(com.jnape.palatable.lambda.functions.Fn2<? super Y, ? super Z, ? extends A>)","132":"Fn4::::compose(com.jnape.palatable.lambda.functions.Fn2<? super Y, ? super Z, ? extends A>)","133":"Fn4::::compose(com.jnape.palatable.lambda.functions.Fn2<? super Y, ? super Z, ? extends A>)","146":"Fn4::::fn4(com.jnape.palatable.lambda.functions.Fn1<A, com.jnape.palatable.lambda.functions.Fn3<B, C, D, E>>)","147":"Fn4::::fn4(com.jnape.palatable.lambda.functions.Fn1<A, com.jnape.palatable.lambda.functions.Fn3<B, C, D, E>>)","148":"Fn4::::fn4(com.jnape.palatable.lambda.functions.Fn1<A, com.jnape.palatable.lambda.functions.Fn3<B, C, D, E>>)","161":"Fn4::::fn4(com.jnape.palatable.lambda.functions.Fn2<A, B, com.jnape.palatable.lambda.functions.Fn2<C, D, E>>)","162":"Fn4::::fn4(com.jnape.palatable.lambda.functions.Fn2<A, B, com.jnape.palatable.lambda.functions.Fn2<C, D, E>>)","163":"Fn4::::fn4(com.jnape.palatable.lambda.functions.Fn2<A, B, com.jnape.palatable.lambda.functions.Fn2<C, D, E>>)","176":"Fn4::::fn4(com.jnape.palatable.lambda.functions.Fn3<A, B, C, com.jnape.palatable.lambda.functions.Fn1<D, E>>)","177":"Fn4::::fn4(com.jnape.palatable.lambda.functions.Fn3<A, B, C, com.jnape.palatable.lambda.functions.Fn1<D, E>>)","178":"Fn4::::fn4(com.jnape.palatable.lambda.functions.Fn3<A, B, C, com.jnape.palatable.lambda.functions.Fn1<D, E>>)","191":"Fn4::::fn4(com.jnape.palatable.lambda.functions.Fn4<A, B, C, D, E>)","192":"Fn4::::fn4(com.jnape.palatable.lambda.functions.Fn4<A, B, C, D, E>)","193":"Fn4::::fn4(com.jnape.palatable.lambda.functions.Fn4<A, B, C, D, E>)"},"test_reverse_method_lines_dic":{"16":"Fn4Test::::canBePartiallyApplied()","17":"Fn4Test::::canBePartiallyApplied()","18":"Fn4Test::::canBePartiallyApplied()","19":"Fn4Test::::canBePartiallyApplied()","20":"Fn4Test::::canBePartiallyApplied()","21":"Fn4Test::::canBePartiallyApplied()","22":"Fn4Test::::canBePartiallyApplied()","24":"Fn4Test::::flipsFirstAndSecondArgument()","25":"Fn4Test::::flipsFirstAndSecondArgument()","26":"Fn4Test::::flipsFirstAndSecondArgument()","27":"Fn4Test::::flipsFirstAndSecondArgument()","29":"Fn4Test::::uncurries()","30":"Fn4Test::::uncurries()","31":"Fn4Test::::uncurries()","32":"Fn4Test::::uncurries()","34":"Fn4Test::::staticFactoryMethods()","35":"Fn4Test::::staticFactoryMethods()","36":"Fn4Test::::staticFactoryMethods()","37":"Fn4Test::::staticFactoryMethods()","38":"Fn4Test::::staticFactoryMethods()","39":"Fn4Test::::staticFactoryMethods()","40":"Fn4Test::::staticFactoryMethods()","41":"Fn4Test::::staticFactoryMethods()","42":"Fn4Test::::staticFactoryMethods()","43":"Fn4Test::::staticFactoryMethods()","44":"Fn4Test::::staticFactoryMethods()","45":"Fn4Test::::staticFactoryMethods()","46":"Fn4Test::::staticFactoryMethods()"},"tests":[{"test_lines":[16,22],"covered_lines":[36,66]},{"test_lines":[24,27],"covered_lines":[36,101]},{"test_lines":[29,32],"covered_lines":[36,112]},{"test_lines":[34,46],"covered_lines":[36,147,162,177,192]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/Effect.java":{"class_content":["package com.jnape.palatable.lambda.functions;\n","\n","import com.jnape.palatable.lambda.adt.Unit;\n","import com.jnape.palatable.lambda.functions.specialized.SideEffect;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","import com.jnape.palatable.lambda.internal.Runtime;\n","import com.jnape.palatable.lambda.io.IO;\n","\n","import java.util.function.Consumer;\n","\n","import static com.jnape.palatable.lambda.adt.Unit.UNIT;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","import static com.jnape.palatable.lambda.functions.specialized.SideEffect.NOOP;\n","import static com.jnape.palatable.lambda.io.IO.io;\n","\n","/**\n"," * A function returning \"no result\", and therefore only useful as a side-effect.\n"," *\n"," * @param <A> the argument type\n"," * @see Fn0\n"," */\n","@FunctionalInterface\n","public interface Effect<A> extends Fn1<A, IO<Unit>> {\n","\n","    @Override\n","    IO<Unit> checkedApply(A a) throws Throwable;\n","\n","    /**\n","     * Convert this {@link Effect} to a java {@link Consumer}\n","     *\n","     * @return the {@link Consumer}\n","     */\n","    default Consumer<A> toConsumer() {\n","        return a -> apply(a).unsafePerformIO();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    default IO<Unit> apply(A a) {\n","        try {\n","            return checkedApply(a);\n","        } catch (Throwable t) {\n","            throw Runtime.throwChecked(t);\n","        }\n","    }\n","\n","    /**\n","     * Left-to-right composition of {@link Effect Effects}.\n","     *\n","     * @param effect the other {@link Effect}\n","     * @return the composed {@link Effect}\n","     */\n","    default Effect<A> andThen(Effect<A> effect) {\n","        return a -> apply(a).flatMap(constantly(effect.apply(a)));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    default <Z> Effect<Z> diMapL(Fn1<? super Z, ? extends A> fn) {\n","        return effect(Fn1.super.diMapL(fn));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    default <Z> Effect<Z> contraMap(Fn1<? super Z, ? extends A> fn) {\n","        return effect(Fn1.super.contraMap(fn));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    default <C> Effect<A> discardR(Applicative<C, Fn1<A, ?>> appB) {\n","        return effect(Fn1.super.discardR(appB));\n","    }\n","\n","    /**\n","     * Static factory method to create an {@link Effect} from a java {@link Consumer}.\n","     *\n","     * @param consumer the {@link Consumer}\n","     * @param <A>      the input type\n","     * @return the {@link Effect}\n","     */\n","    static <A> Effect<A> fromConsumer(Consumer<A> consumer) {\n","        return a -> io(() -> consumer.accept(a));\n","    }\n","\n","    /**\n","     * Create an {@link Effect} from a {@link SideEffect};\n","     *\n","     * @param sideEffect the {@link SideEffect}\n","     * @param <A>        any desired input type\n","     * @return the {@link Effect}\n","     */\n","    static <A> Effect<A> effect(SideEffect sideEffect) {\n","        return effect(constantly(io(sideEffect)));\n","    }\n","\n","    /**\n","     * Create an {@link Effect} that accepts an input and does nothing;\n","     *\n","     * @param <A> any desired input type\n","     * @return the noop {@link Effect}\n","     */\n","    @SuppressWarnings(\"unused\")\n","    static <A> Effect<A> noop() {\n","        return effect(NOOP);\n","    }\n","\n","    /**\n","     * Create an {@link Effect} from an {@link Fn1} that yields an {@link IO}.\n","     *\n","     * @param fn  the function\n","     * @param <A> the effect argument type\n","     * @return the effect\n","     */\n","    static <A> Effect<A> effect(Fn1<? super A, ? extends IO<?>> fn) {\n","        return fn.fmap(io -> io.fmap(constantly(UNIT)))::apply;\n","    }\n","}"],"test_content":["package com.jnape.palatable.lambda.functions;\n","\n","import com.jnape.palatable.lambda.adt.Unit;\n","import com.jnape.palatable.lambda.io.IO;\n","import org.junit.Test;\n","\n","import java.util.ArrayList;\n","import java.util.List;\n","import java.util.concurrent.atomic.AtomicInteger;\n","import java.util.function.Consumer;\n","\n","import static com.jnape.palatable.lambda.functions.Effect.effect;\n","import static com.jnape.palatable.lambda.functions.Effect.fromConsumer;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Alter.alter;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Sequence.sequence;\n","import static com.jnape.palatable.lambda.functions.specialized.SideEffect.sideEffect;\n","import static com.jnape.palatable.lambda.io.IO.io;\n","import static java.util.Arrays.asList;\n","import static java.util.Collections.singletonList;\n","import static org.hamcrest.CoreMatchers.equalTo;\n","import static org.junit.Assert.assertEquals;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IOMatcher.yieldsValue;\n","\n","public class EffectTest {\n","\n","    @Test\n","    public void covariantReturns() {\n","        List<Object> results = new ArrayList<>();\n","\n","        Effect<String> effect       = fromConsumer(results::add);\n","        Effect<String> diMapL       = effect.diMapL(Object::toString);\n","        Effect<String> contraMap    = effect.contraMap(Object::toString);\n","        Effect<String> stringEffect = effect.discardR(constantly(\"1\"));\n","\n","        assertThat(sequence(asList(effect.apply(\"1\"),\n","                                   diMapL.apply(\"2\"),\n","                                   contraMap.apply(\"3\"),\n","                                   stringEffect.apply(\"4\")),\n","                            IO::io)\n","                           .fmap(constantly(results)),\n","                   yieldsValue(equalTo(asList(\"1\", \"2\", \"3\", \"4\"))));\n","    }\n","\n","    @Test\n","    public void andThen() {\n","        AtomicInteger         counter = new AtomicInteger();\n","        Effect<AtomicInteger> inc     = c -> io(sideEffect(c::incrementAndGet));\n","\n","        assertThat(alter(inc.andThen(inc), counter).fmap(AtomicInteger::get),\n","                   yieldsValue(equalTo(2)));\n","    }\n","\n","    @Test\n","    public void staticFactoryMethods() {\n","        AtomicInteger counter = new AtomicInteger();\n","\n","        Effect<String> sideEffect = effect(counter::incrementAndGet);\n","        assertThat(sideEffect.apply(\"foo\").flatMap(constantly(io(counter::get))),\n","                   yieldsValue(equalTo(1)));\n","\n","        Effect<AtomicInteger> fnEffect = Effect.fromConsumer(AtomicInteger::incrementAndGet);\n","        assertThat(fnEffect.apply(counter).flatMap(constantly(io(counter::get))),\n","                   yieldsValue(equalTo(2)));\n","    }\n","\n","    @Test\n","    public void toConsumer() {\n","        @SuppressWarnings(\"RedundantTypeArguments\") Effect<List<String>> addFoo   = l -> IO.<Unit>io(() -> l.add(\"foo\"));\n","        Consumer<List<String>>                                           consumer = addFoo.toConsumer();\n","        ArrayList<String>                                                list     = new ArrayList<>();\n","        consumer.accept(list);\n","        assertEquals(singletonList(\"foo\"), list);\n","    }\n","}"],"method_lines_dic":{"Effect::::checkedApply(A)":[25,26],"Effect::::toConsumer()":[33,35],"Effect::::apply(A)":[40,47],"Effect::::andThen(com.jnape.palatable.lambda.functions.Effect<A>)":[55,57],"Effect::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)":[62,65],"Effect::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)":[70,73],"Effect::::discardR(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)":[78,81],"Effect::::fromConsumer(java.util.function.Consumer<A>)":[90,92],"Effect::::effect(com.jnape.palatable.lambda.functions.specialized.SideEffect)":[101,103],"Effect::::noop()":[111,114],"Effect::::effect(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.io.IO<?>>)":[123,125]},"test_method_lines_dic":{"EffectTest::::covariantReturns()":[28,44],"EffectTest::::andThen()":[46,53],"EffectTest::::staticFactoryMethods()":[55,66],"EffectTest::::toConsumer()":[68,75]},"reverse_method_lines_dic":{"25":"Effect::::checkedApply(A)","26":"Effect::::checkedApply(A)","33":"Effect::::toConsumer()","34":"Effect::::toConsumer()","35":"Effect::::toConsumer()","40":"Effect::::apply(A)","41":"Effect::::apply(A)","42":"Effect::::apply(A)","43":"Effect::::apply(A)","44":"Effect::::apply(A)","45":"Effect::::apply(A)","46":"Effect::::apply(A)","47":"Effect::::apply(A)","55":"Effect::::andThen(com.jnape.palatable.lambda.functions.Effect<A>)","56":"Effect::::andThen(com.jnape.palatable.lambda.functions.Effect<A>)","57":"Effect::::andThen(com.jnape.palatable.lambda.functions.Effect<A>)","62":"Effect::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","63":"Effect::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","64":"Effect::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","65":"Effect::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","70":"Effect::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","71":"Effect::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","72":"Effect::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","73":"Effect::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","78":"Effect::::discardR(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","79":"Effect::::discardR(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","80":"Effect::::discardR(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","81":"Effect::::discardR(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","90":"Effect::::fromConsumer(java.util.function.Consumer<A>)","91":"Effect::::fromConsumer(java.util.function.Consumer<A>)","92":"Effect::::fromConsumer(java.util.function.Consumer<A>)","101":"Effect::::effect(com.jnape.palatable.lambda.functions.specialized.SideEffect)","102":"Effect::::effect(com.jnape.palatable.lambda.functions.specialized.SideEffect)","103":"Effect::::effect(com.jnape.palatable.lambda.functions.specialized.SideEffect)","111":"Effect::::noop()","112":"Effect::::noop()","113":"Effect::::noop()","114":"Effect::::noop()","123":"Effect::::effect(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.io.IO<?>>)","124":"Effect::::effect(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.io.IO<?>>)","125":"Effect::::effect(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.io.IO<?>>)"},"test_reverse_method_lines_dic":{"28":"EffectTest::::covariantReturns()","29":"EffectTest::::covariantReturns()","30":"EffectTest::::covariantReturns()","31":"EffectTest::::covariantReturns()","32":"EffectTest::::covariantReturns()","33":"EffectTest::::covariantReturns()","34":"EffectTest::::covariantReturns()","35":"EffectTest::::covariantReturns()","36":"EffectTest::::covariantReturns()","37":"EffectTest::::covariantReturns()","38":"EffectTest::::covariantReturns()","39":"EffectTest::::covariantReturns()","40":"EffectTest::::covariantReturns()","41":"EffectTest::::covariantReturns()","42":"EffectTest::::covariantReturns()","43":"EffectTest::::covariantReturns()","44":"EffectTest::::covariantReturns()","46":"EffectTest::::andThen()","47":"EffectTest::::andThen()","48":"EffectTest::::andThen()","49":"EffectTest::::andThen()","50":"EffectTest::::andThen()","51":"EffectTest::::andThen()","52":"EffectTest::::andThen()","53":"EffectTest::::andThen()","55":"EffectTest::::staticFactoryMethods()","56":"EffectTest::::staticFactoryMethods()","57":"EffectTest::::staticFactoryMethods()","58":"EffectTest::::staticFactoryMethods()","59":"EffectTest::::staticFactoryMethods()","60":"EffectTest::::staticFactoryMethods()","61":"EffectTest::::staticFactoryMethods()","62":"EffectTest::::staticFactoryMethods()","63":"EffectTest::::staticFactoryMethods()","64":"EffectTest::::staticFactoryMethods()","65":"EffectTest::::staticFactoryMethods()","66":"EffectTest::::staticFactoryMethods()","68":"EffectTest::::toConsumer()","69":"EffectTest::::toConsumer()","70":"EffectTest::::toConsumer()","71":"EffectTest::::toConsumer()","72":"EffectTest::::toConsumer()","73":"EffectTest::::toConsumer()","74":"EffectTest::::toConsumer()","75":"EffectTest::::toConsumer()"},"tests":[{"test_lines":[28,44],"covered_lines":[43,64,72,80,91,124]},{"test_lines":[46,53],"covered_lines":[43,56]},{"test_lines":[55,66],"covered_lines":[43,91,102,124]},{"test_lines":[68,75],"covered_lines":[34,43]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/Fn6.java":{"class_content":["package com.jnape.palatable.lambda.functions;\n","\n","import com.jnape.palatable.lambda.adt.product.Product2;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","import com.jnape.palatable.lambda.internal.Runtime;\n","\n","import static com.jnape.palatable.lambda.functions.Fn7.fn7;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","\n","/**\n"," * A function taking six arguments. Defined in terms of {@link Fn5}, so similarly auto-curried.\n"," *\n"," * @param <A> The first argument type\n"," * @param <B> The second argument type\n"," * @param <C> The third argument type\n"," * @param <D> The fourth argument type\n"," * @param <E> The fifth argument type\n"," * @param <F> The sixth argument type\n"," * @param <G> The return type\n"," * @see Fn5\n"," */\n","@FunctionalInterface\n","public interface Fn6<A, B, C, D, E, F, G> extends Fn5<A, B, C, D, E, Fn1<F, G>> {\n","\n","    G checkedApply(A a, B b, C c, D d, E e, F f) throws Throwable;\n","\n","    /**\n","     * Invoke this function with the given arguments.\n","     *\n","     * @param a the first argument\n","     * @param b the second argument\n","     * @param c the third argument\n","     * @param d the fourth argument\n","     * @param e the fifth argument\n","     * @param f the sixth argument\n","     * @return the result of the function application\n","     */\n","    default G apply(A a, B b, C c, D d, E e, F f) {\n","        try {\n","            return checkedApply(a, b, c, d, e, f);\n","        } catch (Throwable t) {\n","            throw Runtime.throwChecked(t);\n","        }\n","\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    default Fn1<F, G> checkedApply(A a, B b, C c, D d, E e) throws Throwable {\n","        return f -> checkedApply(a, b, c, d, e, f);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    default <Z> Fn7<Z, A, B, C, D, E, F, G> widen() {\n","        return fn7(constantly(this));\n","    }\n","\n","    /**\n","     * Partially apply this function by taking its first argument.\n","     *\n","     * @param a the first argument\n","     * @return an {@link Fn5} that takes the remaining arguments and returns the result\n","     */\n","    @Override\n","    default Fn5<B, C, D, E, F, G> apply(A a) {\n","        return (b, c, d, e, f) -> apply(a, b, c, d, e, f);\n","    }\n","\n","    /**\n","     * Partially apply this function by taking its first two arguments.\n","     *\n","     * @param a the first argument\n","     * @param b the second argument\n","     * @return an {@link Fn4} that takes the remaining arguments and returns the result\n","     */\n","    @Override\n","    default Fn4<C, D, E, F, G> apply(A a, B b) {\n","        return (c, d, e, f) -> apply(a, b, c, d, e, f);\n","    }\n","\n","    /**\n","     * Partially apply this function by taking its first three arguments.\n","     *\n","     * @param a the first argument\n","     * @param b the second argument\n","     * @param c the third argument\n","     * @return an {@link Fn3} that takes remaining arguments and returns the result\n","     */\n","    @Override\n","    default Fn3<D, E, F, G> apply(A a, B b, C c) {\n","        return (d, e, f) -> apply(a, b, c, d, e, f);\n","    }\n","\n","    /**\n","     * Partially apply this function by taking its first four arguments.\n","     *\n","     * @param a the first argument\n","     * @param b the second argument\n","     * @param c the third argument\n","     * @param d the fourth argument\n","     * @return an {@link Fn2} that takes the remaining arguments and returns the result\n","     */\n","    @Override\n","    default Fn2<E, F, G> apply(A a, B b, C c, D d) {\n","        return (e, f) -> apply(a, b, c, d, e, f);\n","    }\n","\n","    /**\n","     * Partially apply this function by taking its first five arguments.\n","     *\n","     * @param a the first argument\n","     * @param b the second argument\n","     * @param c the third argument\n","     * @param d the fourth argument\n","     * @param e the fifth argument\n","     * @return an {@link Fn1} that takes the remaining argument and returns the result\n","     */\n","    @Override\n","    default Fn1<F, G> apply(A a, B b, C c, D d, E e) {\n","        return (f) -> apply(a, b, c, d, e, f);\n","    }\n","\n","    /**\n","     * Flip the order of the first two arguments.\n","     *\n","     * @return an {@link Fn6} that takes the first and second arguments in reversed order\n","     */\n","    @Override\n","    default Fn6<B, A, C, D, E, F, G> flip() {\n","        return (b, a, c, d, e, f) -> apply(a, b, c, d, e, f);\n","    }\n","\n","    /**\n","     * Returns an {@link Fn5} that takes the first two arguments as a <code>{@link Product2}&lt;A, B&gt;</code> and the\n","     * remaining arguments.\n","     *\n","     * @return an {@link Fn5} taking a {@link Product2} and the remaining arguments\n","     */\n","    @Override\n","    default Fn5<? super Product2<? extends A, ? extends B>, C, D, E, F, G> uncurry() {\n","        return (ab, c, d, e, f) -> apply(ab._1(), ab._2(), c, d, e, f);\n","    }\n","\n","    @Override\n","    default <H> Fn6<A, B, C, D, E, F, G> discardR(Applicative<H, Fn1<A, ?>> appB) {\n","        return fn6(Fn5.super.discardR(appB));\n","    }\n","\n","    @Override\n","    default <Z> Fn6<Z, B, C, D, E, F, G> diMapL(Fn1<? super Z, ? extends A> fn) {\n","        return fn6(Fn5.super.diMapL(fn));\n","    }\n","\n","    @Override\n","    default <Z> Fn6<Z, B, C, D, E, F, G> contraMap(Fn1<? super Z, ? extends A> fn) {\n","        return fn6(Fn5.super.contraMap(fn));\n","    }\n","\n","    @Override\n","    default <Y, Z> Fn7<Y, Z, B, C, D, E, F, G> compose(Fn2<? super Y, ? super Z, ? extends A> before) {\n","        return fn7(Fn5.super.compose(before));\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a curried {@link Fn1} in an {@link Fn6}.\n","     *\n","     * @param curriedFn1 the curried fn1 to adapt\n","     * @param <A>        the first input argument type\n","     * @param <B>        the second input argument type\n","     * @param <C>        the third input argument type\n","     * @param <D>        the fourth input argument type\n","     * @param <E>        the fifth input argument type\n","     * @param <F>        the sixth input argument type\n","     * @param <G>        the output type\n","     * @return the {@link Fn6}\n","     */\n","    static <A, B, C, D, E, F, G> Fn6<A, B, C, D, E, F, G> fn6(Fn1<A, Fn5<B, C, D, E, F, G>> curriedFn1) {\n","        return (a, b, c, d, e, f) -> curriedFn1.apply(a).apply(b, c, d, e, f);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a curried {@link Fn2} in an {@link Fn6}.\n","     *\n","     * @param curriedFn2 the curried fn2 to adapt\n","     * @param <A>        the first input argument type\n","     * @param <B>        the second input argument type\n","     * @param <C>        the third input argument type\n","     * @param <D>        the fourth input argument type\n","     * @param <E>        the fifth input argument type\n","     * @param <F>        the sixth input argument type\n","     * @param <G>        the output type\n","     * @return the {@link Fn6}\n","     */\n","    static <A, B, C, D, E, F, G> Fn6<A, B, C, D, E, F, G> fn6(Fn2<A, B, Fn4<C, D, E, F, G>> curriedFn2) {\n","        return (a, b, c, d, e, f) -> curriedFn2.apply(a, b).apply(c, d, e, f);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a curried {@link Fn3} in an {@link Fn6}.\n","     *\n","     * @param curriedFn3 the curried fn3 to adapt\n","     * @param <A>        the first input argument type\n","     * @param <B>        the second input argument type\n","     * @param <C>        the third input argument type\n","     * @param <D>        the fourth input argument type\n","     * @param <E>        the fifth input argument type\n","     * @param <F>        the sixth input argument type\n","     * @param <G>        the output type\n","     * @return the {@link Fn6}\n","     */\n","    static <A, B, C, D, E, F, G> Fn6<A, B, C, D, E, F, G> fn6(Fn3<A, B, C, Fn3<D, E, F, G>> curriedFn3) {\n","        return (a, b, c, d, e, f) -> curriedFn3.apply(a, b, c).apply(d, e, f);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a curried {@link Fn4} in an {@link Fn6}.\n","     *\n","     * @param curriedFn4 the curried fn4 to adapt\n","     * @param <A>        the first input argument type\n","     * @param <B>        the second input argument type\n","     * @param <C>        the third input argument type\n","     * @param <D>        the fourth input argument type\n","     * @param <E>        the fifth input argument type\n","     * @param <F>        the sixth input argument type\n","     * @param <G>        the output type\n","     * @return the {@link Fn6}\n","     */\n","    static <A, B, C, D, E, F, G> Fn6<A, B, C, D, E, F, G> fn6(Fn4<A, B, C, D, Fn2<E, F, G>> curriedFn4) {\n","        return (a, b, c, d, e, f) -> curriedFn4.apply(a, b, c, d).apply(e, f);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a curried {@link Fn5} in an {@link Fn6}.\n","     *\n","     * @param curriedFn5 the curried fn4 to adapt\n","     * @param <A>        the first input argument type\n","     * @param <B>        the second input argument type\n","     * @param <C>        the third input argument type\n","     * @param <D>        the fourth input argument type\n","     * @param <E>        the fifth input argument type\n","     * @param <F>        the sixth input argument type\n","     * @param <G>        the output type\n","     * @return the {@link Fn6}\n","     */\n","    static <A, B, C, D, E, F, G> Fn6<A, B, C, D, E, F, G> fn6(Fn5<A, B, C, D, E, Fn1<F, G>> curriedFn5) {\n","        return (a, b, c, d, e, f) -> curriedFn5.apply(a, b, c, d, e).apply(f);\n","    }\n","\n","    /**\n","     * Static factory method for coercing a lambda to an {@link Fn6}.\n","     *\n","     * @param fn  the lambda to coerce\n","     * @param <A> the first input argument type\n","     * @param <B> the second input argument type\n","     * @param <C> the third input argument type\n","     * @param <D> the fourth input argument type\n","     * @param <E> the fifth input argument type\n","     * @param <F> the sixth input argument type\n","     * @param <G> the output type\n","     * @return the {@link Fn6}\n","     */\n","    static <A, B, C, D, E, F, G> Fn6<A, B, C, D, E, F, G> fn6(Fn6<A, B, C, D, E, F, G> fn) {\n","        return fn;\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions;\n","\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static org.hamcrest.core.Is.is;\n","import static org.junit.Assert.assertEquals;\n","import static org.junit.Assert.assertThat;\n","\n","public class Fn6Test {\n","\n","    private static final Fn6<String, String, String, String, String, String, String> APPEND =\n","            (s1, s2, s3, s4, s5, s6) -> s1 + s2 + s3 + s4 + s5 + s6;\n","\n","    @Test\n","    public void canBePartiallyApplied() {\n","        assertThat(APPEND.apply(\"a\").apply(\"b\").apply(\"c\").apply(\"d\").apply(\"e\").apply(\"f\"), is(\"abcdef\"));\n","        assertThat(APPEND.apply(\"a\").apply(\"b\").apply(\"c\").apply(\"d\").apply(\"e\", \"f\"), is(\"abcdef\"));\n","        assertThat(APPEND.apply(\"a\").apply(\"b\").apply(\"c\").apply(\"d\", \"e\", \"f\"), is(\"abcdef\"));\n","        assertThat(APPEND.apply(\"a\").apply(\"b\").apply(\"c\", \"d\", \"e\", \"f\"), is(\"abcdef\"));\n","        assertThat(APPEND.apply(\"a\").apply(\"b\", \"c\", \"d\", \"e\", \"f\"), is(\"abcdef\"));\n","        assertThat(APPEND.apply(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"), is(\"abcdef\"));\n","    }\n","\n","    @Test\n","    public void flipsFirstAndSecondArgument() {\n","        assertThat(APPEND.flip().apply(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"), is(\"bacdef\"));\n","    }\n","\n","    @Test\n","    public void uncurries() {\n","        assertThat(APPEND.uncurry().apply(tuple(\"a\", \"b\"), \"c\", \"d\", \"e\", \"f\"), is(\"abcdef\"));\n","    }\n","\n","    @Test\n","    public void staticFactoryMethods() {\n","        Fn1<String, Fn5<String, String, String, String, String, String>> fn1 = a -> (b, c, d, e, f) -> a + b + c + d + e + f;\n","        assertEquals(\"abcdef\", Fn6.fn6(fn1).apply(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n","\n","        Fn2<String, String, Fn4<String, String, String, String, String>> fn2 = (a, b) -> (c, d, e, f) -> a + b + c + d + e + f;\n","        assertEquals(\"abcdef\", Fn6.fn6(fn2).apply(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n","\n","        Fn3<String, String, String, Fn3<String, String, String, String>> fn3 = (a, b, c) -> (d, e, f) -> a + b + c + d + e + f;\n","        assertEquals(\"abcdef\", Fn6.fn6(fn3).apply(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n","\n","        Fn4<String, String, String, String, Fn2<String, String, String>> fn4 = (a, b, c, d) -> (e, f) -> a + b + c + d + e + f;\n","        assertEquals(\"abcdef\", Fn6.fn6(fn4).apply(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n","\n","        Fn5<String, String, String, String, String, Fn1<String, String>> fn5 = (a, b, c, d, e) -> (f) -> a + b + c + d + e + f;\n","        assertEquals(\"abcdef\", Fn6.fn6(fn5).apply(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n","\n","        assertEquals(\"abcdef\", Fn6.<String, String, String, String, String, String, String>fn6((a, b, c, d, e, f) -> a + b + c + d + e + f).apply(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n","    }\n","}\n"],"method_lines_dic":{"Fn6::::checkedApply(A,B,C,D,E,F)":[25,25],"Fn6::::apply(A,B,C,D,E,F)":[38,45],"Fn6::::checkedApply(A,B,C,D,E)":[50,53],"Fn6::::widen()":[58,61],"Fn6::::apply(A)":[69,72],"Fn6::::apply(A,B)":[81,84],"Fn6::::apply(A,B,C)":[94,97],"Fn6::::apply(A,B,C,D)":[108,111],"Fn6::::apply(A,B,C,D,E)":[123,126],"Fn6::::flip()":[133,136],"Fn6::::uncurry()":[144,147],"Fn6::::discardR(com.jnape.palatable.lambda.functor.Applicative<H, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)":[149,152],"Fn6::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)":[154,157],"Fn6::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)":[159,162],"Fn6::::compose(com.jnape.palatable.lambda.functions.Fn2<? super Y, ? super Z, ? extends A>)":[164,167],"Fn6::::fn6(com.jnape.palatable.lambda.functions.Fn1<A, com.jnape.palatable.lambda.functions.Fn5<B, C, D, E, F, G>>)":[182,184],"Fn6::::fn6(com.jnape.palatable.lambda.functions.Fn2<A, B, com.jnape.palatable.lambda.functions.Fn4<C, D, E, F, G>>)":[199,201],"Fn6::::fn6(com.jnape.palatable.lambda.functions.Fn3<A, B, C, com.jnape.palatable.lambda.functions.Fn3<D, E, F, G>>)":[216,218],"Fn6::::fn6(com.jnape.palatable.lambda.functions.Fn4<A, B, C, D, com.jnape.palatable.lambda.functions.Fn2<E, F, G>>)":[233,235],"Fn6::::fn6(com.jnape.palatable.lambda.functions.Fn5<A, B, C, D, E, com.jnape.palatable.lambda.functions.Fn1<F, G>>)":[250,252],"Fn6::::fn6(com.jnape.palatable.lambda.functions.Fn6<A, B, C, D, E, F, G>)":[267,269]},"test_method_lines_dic":{"Fn6Test::::canBePartiallyApplied()":[15,23],"Fn6Test::::flipsFirstAndSecondArgument()":[25,28],"Fn6Test::::uncurries()":[30,33],"Fn6Test::::staticFactoryMethods()":[35,53]},"reverse_method_lines_dic":{"25":"Fn6::::checkedApply(A,B,C,D,E,F)","38":"Fn6::::apply(A,B,C,D,E,F)","39":"Fn6::::apply(A,B,C,D,E,F)","40":"Fn6::::apply(A,B,C,D,E,F)","41":"Fn6::::apply(A,B,C,D,E,F)","42":"Fn6::::apply(A,B,C,D,E,F)","43":"Fn6::::apply(A,B,C,D,E,F)","44":"Fn6::::apply(A,B,C,D,E,F)","45":"Fn6::::apply(A,B,C,D,E,F)","50":"Fn6::::checkedApply(A,B,C,D,E)","51":"Fn6::::checkedApply(A,B,C,D,E)","52":"Fn6::::checkedApply(A,B,C,D,E)","53":"Fn6::::checkedApply(A,B,C,D,E)","58":"Fn6::::widen()","59":"Fn6::::widen()","60":"Fn6::::widen()","61":"Fn6::::widen()","69":"Fn6::::apply(A)","70":"Fn6::::apply(A)","71":"Fn6::::apply(A)","72":"Fn6::::apply(A)","81":"Fn6::::apply(A,B)","82":"Fn6::::apply(A,B)","83":"Fn6::::apply(A,B)","84":"Fn6::::apply(A,B)","94":"Fn6::::apply(A,B,C)","95":"Fn6::::apply(A,B,C)","96":"Fn6::::apply(A,B,C)","97":"Fn6::::apply(A,B,C)","108":"Fn6::::apply(A,B,C,D)","109":"Fn6::::apply(A,B,C,D)","110":"Fn6::::apply(A,B,C,D)","111":"Fn6::::apply(A,B,C,D)","123":"Fn6::::apply(A,B,C,D,E)","124":"Fn6::::apply(A,B,C,D,E)","125":"Fn6::::apply(A,B,C,D,E)","126":"Fn6::::apply(A,B,C,D,E)","133":"Fn6::::flip()","134":"Fn6::::flip()","135":"Fn6::::flip()","136":"Fn6::::flip()","144":"Fn6::::uncurry()","145":"Fn6::::uncurry()","146":"Fn6::::uncurry()","147":"Fn6::::uncurry()","149":"Fn6::::discardR(com.jnape.palatable.lambda.functor.Applicative<H, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","150":"Fn6::::discardR(com.jnape.palatable.lambda.functor.Applicative<H, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","151":"Fn6::::discardR(com.jnape.palatable.lambda.functor.Applicative<H, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","152":"Fn6::::discardR(com.jnape.palatable.lambda.functor.Applicative<H, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","154":"Fn6::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","155":"Fn6::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","156":"Fn6::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","157":"Fn6::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","159":"Fn6::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","160":"Fn6::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","161":"Fn6::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","162":"Fn6::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","164":"Fn6::::compose(com.jnape.palatable.lambda.functions.Fn2<? super Y, ? super Z, ? extends A>)","165":"Fn6::::compose(com.jnape.palatable.lambda.functions.Fn2<? super Y, ? super Z, ? extends A>)","166":"Fn6::::compose(com.jnape.palatable.lambda.functions.Fn2<? super Y, ? super Z, ? extends A>)","167":"Fn6::::compose(com.jnape.palatable.lambda.functions.Fn2<? super Y, ? super Z, ? extends A>)","182":"Fn6::::fn6(com.jnape.palatable.lambda.functions.Fn1<A, com.jnape.palatable.lambda.functions.Fn5<B, C, D, E, F, G>>)","183":"Fn6::::fn6(com.jnape.palatable.lambda.functions.Fn1<A, com.jnape.palatable.lambda.functions.Fn5<B, C, D, E, F, G>>)","184":"Fn6::::fn6(com.jnape.palatable.lambda.functions.Fn1<A, com.jnape.palatable.lambda.functions.Fn5<B, C, D, E, F, G>>)","199":"Fn6::::fn6(com.jnape.palatable.lambda.functions.Fn2<A, B, com.jnape.palatable.lambda.functions.Fn4<C, D, E, F, G>>)","200":"Fn6::::fn6(com.jnape.palatable.lambda.functions.Fn2<A, B, com.jnape.palatable.lambda.functions.Fn4<C, D, E, F, G>>)","201":"Fn6::::fn6(com.jnape.palatable.lambda.functions.Fn2<A, B, com.jnape.palatable.lambda.functions.Fn4<C, D, E, F, G>>)","216":"Fn6::::fn6(com.jnape.palatable.lambda.functions.Fn3<A, B, C, com.jnape.palatable.lambda.functions.Fn3<D, E, F, G>>)","217":"Fn6::::fn6(com.jnape.palatable.lambda.functions.Fn3<A, B, C, com.jnape.palatable.lambda.functions.Fn3<D, E, F, G>>)","218":"Fn6::::fn6(com.jnape.palatable.lambda.functions.Fn3<A, B, C, com.jnape.palatable.lambda.functions.Fn3<D, E, F, G>>)","233":"Fn6::::fn6(com.jnape.palatable.lambda.functions.Fn4<A, B, C, D, com.jnape.palatable.lambda.functions.Fn2<E, F, G>>)","234":"Fn6::::fn6(com.jnape.palatable.lambda.functions.Fn4<A, B, C, D, com.jnape.palatable.lambda.functions.Fn2<E, F, G>>)","235":"Fn6::::fn6(com.jnape.palatable.lambda.functions.Fn4<A, B, C, D, com.jnape.palatable.lambda.functions.Fn2<E, F, G>>)","250":"Fn6::::fn6(com.jnape.palatable.lambda.functions.Fn5<A, B, C, D, E, com.jnape.palatable.lambda.functions.Fn1<F, G>>)","251":"Fn6::::fn6(com.jnape.palatable.lambda.functions.Fn5<A, B, C, D, E, com.jnape.palatable.lambda.functions.Fn1<F, G>>)","252":"Fn6::::fn6(com.jnape.palatable.lambda.functions.Fn5<A, B, C, D, E, com.jnape.palatable.lambda.functions.Fn1<F, G>>)","267":"Fn6::::fn6(com.jnape.palatable.lambda.functions.Fn6<A, B, C, D, E, F, G>)","268":"Fn6::::fn6(com.jnape.palatable.lambda.functions.Fn6<A, B, C, D, E, F, G>)","269":"Fn6::::fn6(com.jnape.palatable.lambda.functions.Fn6<A, B, C, D, E, F, G>)"},"test_reverse_method_lines_dic":{"15":"Fn6Test::::canBePartiallyApplied()","16":"Fn6Test::::canBePartiallyApplied()","17":"Fn6Test::::canBePartiallyApplied()","18":"Fn6Test::::canBePartiallyApplied()","19":"Fn6Test::::canBePartiallyApplied()","20":"Fn6Test::::canBePartiallyApplied()","21":"Fn6Test::::canBePartiallyApplied()","22":"Fn6Test::::canBePartiallyApplied()","23":"Fn6Test::::canBePartiallyApplied()","25":"Fn6Test::::flipsFirstAndSecondArgument()","26":"Fn6Test::::flipsFirstAndSecondArgument()","27":"Fn6Test::::flipsFirstAndSecondArgument()","28":"Fn6Test::::flipsFirstAndSecondArgument()","30":"Fn6Test::::uncurries()","31":"Fn6Test::::uncurries()","32":"Fn6Test::::uncurries()","33":"Fn6Test::::uncurries()","35":"Fn6Test::::staticFactoryMethods()","36":"Fn6Test::::staticFactoryMethods()","37":"Fn6Test::::staticFactoryMethods()","38":"Fn6Test::::staticFactoryMethods()","39":"Fn6Test::::staticFactoryMethods()","40":"Fn6Test::::staticFactoryMethods()","41":"Fn6Test::::staticFactoryMethods()","42":"Fn6Test::::staticFactoryMethods()","43":"Fn6Test::::staticFactoryMethods()","44":"Fn6Test::::staticFactoryMethods()","45":"Fn6Test::::staticFactoryMethods()","46":"Fn6Test::::staticFactoryMethods()","47":"Fn6Test::::staticFactoryMethods()","48":"Fn6Test::::staticFactoryMethods()","49":"Fn6Test::::staticFactoryMethods()","50":"Fn6Test::::staticFactoryMethods()","51":"Fn6Test::::staticFactoryMethods()","52":"Fn6Test::::staticFactoryMethods()","53":"Fn6Test::::staticFactoryMethods()"},"tests":[{"test_lines":[15,23],"covered_lines":[40,71]},{"test_lines":[25,28],"covered_lines":[40,135]},{"test_lines":[30,33],"covered_lines":[40,146]},{"test_lines":[35,53],"covered_lines":[40,183,200,217,234,251,268]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/Fn3.java":{"class_content":["package com.jnape.palatable.lambda.functions;\n","\n","import com.jnape.palatable.lambda.adt.product.Product2;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","import com.jnape.palatable.lambda.internal.Runtime;\n","\n","import static com.jnape.palatable.lambda.functions.Fn4.fn4;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","\n","/**\n"," * A function taking three arguments. Defined in terms of {@link Fn2}, so similarly auto-curried.\n"," *\n"," * @param <A> The first argument type\n"," * @param <B> The second argument type\n"," * @param <C> The third argument type\n"," * @param <D> The return type\n"," * @see Fn2\n"," */\n","@FunctionalInterface\n","public interface Fn3<A, B, C, D> extends Fn2<A, B, Fn1<C, D>> {\n","\n","    D checkedApply(A a, B b, C c) throws Throwable;\n","\n","    /**\n","     * Invoke this function with the given arguments.\n","     *\n","     * @param a the first argument\n","     * @param b the second argument\n","     * @param c the third argument\n","     * @return the result of the function application\n","     */\n","    default D apply(A a, B b, C c) {\n","        try {\n","            return checkedApply(a, b, c);\n","        } catch (Throwable t) {\n","            throw Runtime.throwChecked(t);\n","        }\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    default Fn1<C, D> checkedApply(A a, B b) throws Throwable {\n","        return c -> checkedApply(a, b, c);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    default <Z> Fn4<Z, A, B, C, D> widen() {\n","        return fn4(constantly(this));\n","    }\n","\n","    /**\n","     * Partially apply this function by taking its first argument.\n","     *\n","     * @param a the first argument\n","     * @return an {@link Fn2}&lt;B, C, D&gt;\n","     */\n","    @Override\n","    default Fn2<B, C, D> apply(A a) {\n","        return (b, c) -> apply(a, b, c);\n","    }\n","\n","    /**\n","     * Partially apply this function by taking its first two arguments.\n","     *\n","     * @param a the first argument\n","     * @param b the second argument\n","     * @return an {@link Fn1}&lt;C, D&gt;\n","     */\n","    @Override\n","    default Fn1<C, D> apply(A a, B b) {\n","        return (c) -> apply(a, b, c);\n","    }\n","\n","    /**\n","     * Flip the order of the first two arguments.\n","     *\n","     * @return an {@link Fn3}&lt;B, A, C, D&gt;\n","     */\n","    @Override\n","    default Fn3<B, A, C, D> flip() {\n","        return (b, a, c) -> apply(a, b, c);\n","    }\n","\n","    /**\n","     * Returns an {@link Fn2} that takes the first two arguments as a <code>{@link Product2}&lt;A, B&gt;</code> and the\n","     * third argument.\n","     *\n","     * @return an {@link Fn2} taking a {@link Product2} and the third argument\n","     */\n","    @Override\n","    default Fn2<? super Product2<? extends A, ? extends B>, C, D> uncurry() {\n","        return (ab, c) -> apply(ab._1(), ab._2(), c);\n","    }\n","\n","    @Override\n","    default <E> Fn3<A, B, C, D> discardR(Applicative<E, Fn1<A, ?>> appB) {\n","        return fn3(Fn2.super.discardR(appB));\n","    }\n","\n","    @Override\n","    default <Z> Fn3<Z, B, C, D> diMapL(Fn1<? super Z, ? extends A> fn) {\n","        return fn3(Fn2.super.diMapL(fn));\n","    }\n","\n","    @Override\n","    default <Z> Fn3<Z, B, C, D> contraMap(Fn1<? super Z, ? extends A> fn) {\n","        return fn3(Fn2.super.contraMap(fn));\n","    }\n","\n","    @Override\n","    default <Y, Z> Fn4<Y, Z, B, C, D> compose(Fn2<? super Y, ? super Z, ? extends A> before) {\n","        return fn4(Fn2.super.compose(before));\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a curried {@link Fn1} in an {@link Fn3}.\n","     *\n","     * @param curriedFn1 the curried fn1 to adapt\n","     * @param <A>        the first input argument type\n","     * @param <B>        the second input argument type\n","     * @param <C>        the third input argument type\n","     * @param <D>        the output type\n","     * @return the {@link Fn3}\n","     */\n","    static <A, B, C, D> Fn3<A, B, C, D> fn3(Fn1<A, Fn2<B, C, D>> curriedFn1) {\n","        return (a, b, c) -> curriedFn1.apply(a).apply(b, c);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a curried {@link Fn2} in an {@link Fn3}.\n","     *\n","     * @param curriedFn2 the curried fn2 to adapt\n","     * @param <A>        the first input argument type\n","     * @param <B>        the second input argument type\n","     * @param <C>        the third input argument type\n","     * @param <D>        the output type\n","     * @return the {@link Fn3}\n","     */\n","    static <A, B, C, D> Fn3<A, B, C, D> fn3(Fn2<A, B, Fn1<C, D>> curriedFn2) {\n","        return (a, b, c) -> curriedFn2.apply(a, b).apply(c);\n","    }\n","\n","    /**\n","     * Static factory method for coercing a lambda to an {@link Fn3}.\n","     *\n","     * @param fn  the lambda to coerce\n","     * @param <A> the first input argument type\n","     * @param <B> the second input argument type\n","     * @param <C> the third input argument type\n","     * @param <D> the output type\n","     * @return the {@link Fn3}\n","     */\n","    static <A, B, C, D> Fn3<A, B, C, D> fn3(Fn3<A, B, C, D> fn) {\n","        return fn;\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions;\n","\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.Fn3.fn3;\n","import static org.hamcrest.core.Is.is;\n","import static org.junit.Assert.assertEquals;\n","import static org.junit.Assert.assertThat;\n","\n","public class Fn3Test {\n","\n","    private static final Fn3<Integer, Integer, Integer, Boolean> CHECK_MULTIPLICATION =\n","            (multiplicand, multiplier, guessResult) -> multiplicand * multiplier == guessResult;\n","\n","    @Test\n","    public void canBePartiallyApplied() {\n","        assertThat(CHECK_MULTIPLICATION.apply(2).apply(4).apply(8), is(true));\n","        assertThat(CHECK_MULTIPLICATION.apply(2).apply(4, 8), is(true));\n","        assertThat(CHECK_MULTIPLICATION.apply(2, 4).apply(8), is(true));\n","    }\n","\n","    @Test\n","    public void flipsFirstAndSecondArgument() {\n","        Fn3<String, Integer, String, String> concat3 = (a, b, c) -> a + b.toString() + c;\n","        assertThat(concat3.flip().apply(1, \"2\", \"3\"), is(\"213\"));\n","    }\n","\n","    @Test\n","    public void uncurries() {\n","        assertThat(CHECK_MULTIPLICATION.uncurry().apply(tuple(2, 3), 6), is(true));\n","    }\n","\n","    @Test\n","    public void staticFactoryMethods() {\n","        Fn1<String, Fn2<String, String, String>> fn1 = a -> (b, c) -> a + b + c;\n","        assertEquals(\"abc\", fn3(fn1).apply(\"a\", \"b\", \"c\"));\n","\n","        Fn2<String, String, Fn1<String, String>> fn2 = (a, b) -> c -> a + b + c;\n","        assertEquals(\"abc\", fn3(fn2).apply(\"a\", \"b\", \"c\"));\n","\n","        assertEquals(\"abc\", Fn3.<String, String, String, String>fn3((a, b, c) -> a + b + c).apply(\"a\", \"b\", \"c\"));\n","    }\n","}\n"],"method_lines_dic":{"Fn3::::checkedApply(A,B,C)":[22,22],"Fn3::::apply(A,B,C)":[32,38],"Fn3::::checkedApply(A,B)":[43,46],"Fn3::::widen()":[51,54],"Fn3::::apply(A)":[62,65],"Fn3::::apply(A,B)":[74,77],"Fn3::::flip()":[84,87],"Fn3::::uncurry()":[95,98],"Fn3::::discardR(com.jnape.palatable.lambda.functor.Applicative<E, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)":[100,103],"Fn3::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)":[105,108],"Fn3::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)":[110,113],"Fn3::::compose(com.jnape.palatable.lambda.functions.Fn2<? super Y, ? super Z, ? extends A>)":[115,118],"Fn3::::fn3(com.jnape.palatable.lambda.functions.Fn1<A, com.jnape.palatable.lambda.functions.Fn2<B, C, D>>)":[130,132],"Fn3::::fn3(com.jnape.palatable.lambda.functions.Fn2<A, B, com.jnape.palatable.lambda.functions.Fn1<C, D>>)":[144,146],"Fn3::::fn3(com.jnape.palatable.lambda.functions.Fn3<A, B, C, D>)":[158,160]},"test_method_lines_dic":{"Fn3Test::::canBePartiallyApplied()":[16,21],"Fn3Test::::flipsFirstAndSecondArgument()":[23,27],"Fn3Test::::uncurries()":[29,32],"Fn3Test::::staticFactoryMethods()":[34,43]},"reverse_method_lines_dic":{"22":"Fn3::::checkedApply(A,B,C)","32":"Fn3::::apply(A,B,C)","33":"Fn3::::apply(A,B,C)","34":"Fn3::::apply(A,B,C)","35":"Fn3::::apply(A,B,C)","36":"Fn3::::apply(A,B,C)","37":"Fn3::::apply(A,B,C)","38":"Fn3::::apply(A,B,C)","43":"Fn3::::checkedApply(A,B)","44":"Fn3::::checkedApply(A,B)","45":"Fn3::::checkedApply(A,B)","46":"Fn3::::checkedApply(A,B)","51":"Fn3::::widen()","52":"Fn3::::widen()","53":"Fn3::::widen()","54":"Fn3::::widen()","62":"Fn3::::apply(A)","63":"Fn3::::apply(A)","64":"Fn3::::apply(A)","65":"Fn3::::apply(A)","74":"Fn3::::apply(A,B)","75":"Fn3::::apply(A,B)","76":"Fn3::::apply(A,B)","77":"Fn3::::apply(A,B)","84":"Fn3::::flip()","85":"Fn3::::flip()","86":"Fn3::::flip()","87":"Fn3::::flip()","95":"Fn3::::uncurry()","96":"Fn3::::uncurry()","97":"Fn3::::uncurry()","98":"Fn3::::uncurry()","100":"Fn3::::discardR(com.jnape.palatable.lambda.functor.Applicative<E, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","101":"Fn3::::discardR(com.jnape.palatable.lambda.functor.Applicative<E, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","102":"Fn3::::discardR(com.jnape.palatable.lambda.functor.Applicative<E, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","103":"Fn3::::discardR(com.jnape.palatable.lambda.functor.Applicative<E, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","105":"Fn3::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","106":"Fn3::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","107":"Fn3::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","108":"Fn3::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","110":"Fn3::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","111":"Fn3::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","112":"Fn3::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","113":"Fn3::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","115":"Fn3::::compose(com.jnape.palatable.lambda.functions.Fn2<? super Y, ? super Z, ? extends A>)","116":"Fn3::::compose(com.jnape.palatable.lambda.functions.Fn2<? super Y, ? super Z, ? extends A>)","117":"Fn3::::compose(com.jnape.palatable.lambda.functions.Fn2<? super Y, ? super Z, ? extends A>)","118":"Fn3::::compose(com.jnape.palatable.lambda.functions.Fn2<? super Y, ? super Z, ? extends A>)","130":"Fn3::::fn3(com.jnape.palatable.lambda.functions.Fn1<A, com.jnape.palatable.lambda.functions.Fn2<B, C, D>>)","131":"Fn3::::fn3(com.jnape.palatable.lambda.functions.Fn1<A, com.jnape.palatable.lambda.functions.Fn2<B, C, D>>)","132":"Fn3::::fn3(com.jnape.palatable.lambda.functions.Fn1<A, com.jnape.palatable.lambda.functions.Fn2<B, C, D>>)","144":"Fn3::::fn3(com.jnape.palatable.lambda.functions.Fn2<A, B, com.jnape.palatable.lambda.functions.Fn1<C, D>>)","145":"Fn3::::fn3(com.jnape.palatable.lambda.functions.Fn2<A, B, com.jnape.palatable.lambda.functions.Fn1<C, D>>)","146":"Fn3::::fn3(com.jnape.palatable.lambda.functions.Fn2<A, B, com.jnape.palatable.lambda.functions.Fn1<C, D>>)","158":"Fn3::::fn3(com.jnape.palatable.lambda.functions.Fn3<A, B, C, D>)","159":"Fn3::::fn3(com.jnape.palatable.lambda.functions.Fn3<A, B, C, D>)","160":"Fn3::::fn3(com.jnape.palatable.lambda.functions.Fn3<A, B, C, D>)"},"test_reverse_method_lines_dic":{"16":"Fn3Test::::canBePartiallyApplied()","17":"Fn3Test::::canBePartiallyApplied()","18":"Fn3Test::::canBePartiallyApplied()","19":"Fn3Test::::canBePartiallyApplied()","20":"Fn3Test::::canBePartiallyApplied()","21":"Fn3Test::::canBePartiallyApplied()","23":"Fn3Test::::flipsFirstAndSecondArgument()","24":"Fn3Test::::flipsFirstAndSecondArgument()","25":"Fn3Test::::flipsFirstAndSecondArgument()","26":"Fn3Test::::flipsFirstAndSecondArgument()","27":"Fn3Test::::flipsFirstAndSecondArgument()","29":"Fn3Test::::uncurries()","30":"Fn3Test::::uncurries()","31":"Fn3Test::::uncurries()","32":"Fn3Test::::uncurries()","34":"Fn3Test::::staticFactoryMethods()","35":"Fn3Test::::staticFactoryMethods()","36":"Fn3Test::::staticFactoryMethods()","37":"Fn3Test::::staticFactoryMethods()","38":"Fn3Test::::staticFactoryMethods()","39":"Fn3Test::::staticFactoryMethods()","40":"Fn3Test::::staticFactoryMethods()","41":"Fn3Test::::staticFactoryMethods()","42":"Fn3Test::::staticFactoryMethods()","43":"Fn3Test::::staticFactoryMethods()"},"tests":[{"test_lines":[16,21],"covered_lines":[34,64,76]},{"test_lines":[23,27],"covered_lines":[34,86]},{"test_lines":[29,32],"covered_lines":[34,97]},{"test_lines":[34,43],"covered_lines":[34,131,145,159]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/Fn7.java":{"class_content":["package com.jnape.palatable.lambda.functions;\n","\n","import com.jnape.palatable.lambda.adt.product.Product2;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","import com.jnape.palatable.lambda.internal.Runtime;\n","\n","import static com.jnape.palatable.lambda.functions.Fn8.fn8;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","\n","/**\n"," * A function taking seven arguments. Defined in terms of {@link Fn6}, so similarly auto-curried.\n"," *\n"," * @param <A> The first argument type\n"," * @param <B> The second argument type\n"," * @param <C> The third argument type\n"," * @param <D> The fourth argument type\n"," * @param <E> The fifth argument type\n"," * @param <F> The sixth argument type\n"," * @param <G> The seventh argument type\n"," * @param <H> The return type\n"," * @see Fn6\n"," */\n","@FunctionalInterface\n","public interface Fn7<A, B, C, D, E, F, G, H> extends Fn6<A, B, C, D, E, F, Fn1<G, H>> {\n","\n","    H checkedApply(A a, B b, C c, D d, E e, F f, G g) throws Throwable;\n","\n","    /**\n","     * Invoke this function with the given arguments.\n","     *\n","     * @param a the first argument\n","     * @param b the second argument\n","     * @param c the third argument\n","     * @param d the fourth argument\n","     * @param e the fifth argument\n","     * @param f the sixth argument\n","     * @param g the seventh argument\n","     * @return the result of the function application\n","     */\n","    default H apply(A a, B b, C c, D d, E e, F f, G g) {\n","        try {\n","            return checkedApply(a, b, c, d, e, f, g);\n","        } catch (Throwable t) {\n","            throw Runtime.throwChecked(t);\n","        }\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    default Fn1<G, H> checkedApply(A a, B b, C c, D d, E e, F f) throws Throwable {\n","        return g -> checkedApply(a, b, c, d, e, f, g);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    default <Z> Fn8<Z, A, B, C, D, E, F, G, H> widen() {\n","        return fn8(constantly(this));\n","    }\n","\n","    /**\n","     * Partially apply this function by taking its first argument.\n","     *\n","     * @param a the first argument\n","     * @return an {@link Fn6} that takes the remaining arguments and returns the result\n","     */\n","    @Override\n","    default Fn6<B, C, D, E, F, G, H> apply(A a) {\n","        return (b, c, d, e, f, g) -> apply(a, b, c, d, e, f, g);\n","    }\n","\n","    /**\n","     * Partially apply this function by taking its first two arguments.\n","     *\n","     * @param a the first argument\n","     * @param b the second argument\n","     * @return an {@link Fn5} that takes the remaining arguments and returns the result\n","     */\n","    @Override\n","    default Fn5<C, D, E, F, G, H> apply(A a, B b) {\n","        return (c, d, e, f, g) -> apply(a, b, c, d, e, f, g);\n","    }\n","\n","    /**\n","     * Partially apply this function by taking its first three arguments.\n","     *\n","     * @param a the first argument\n","     * @param b the second argument\n","     * @param c the third argument\n","     * @return an {@link Fn4} that takes remaining arguments and returns the result\n","     */\n","    @Override\n","    default Fn4<D, E, F, G, H> apply(A a, B b, C c) {\n","        return (d, e, f, g) -> apply(a, b, c, d, e, f, g);\n","    }\n","\n","    /**\n","     * Partially apply this function by taking its first four arguments.\n","     *\n","     * @param a the first argument\n","     * @param b the second argument\n","     * @param c the third argument\n","     * @param d the fourth argument\n","     * @return an {@link Fn3} that takes the remaining arguments and returns the result\n","     */\n","    @Override\n","    default Fn3<E, F, G, H> apply(A a, B b, C c, D d) {\n","        return (e, f, g) -> apply(a, b, c, d, e, f, g);\n","    }\n","\n","    /**\n","     * Partially apply this function by taking its first five arguments.\n","     *\n","     * @param a the first argument\n","     * @param b the second argument\n","     * @param c the third argument\n","     * @param d the fourth argument\n","     * @param e the fifth argument\n","     * @return an {@link Fn2} that takes the remaining arguments and returns the result\n","     */\n","    @Override\n","    default Fn2<F, G, H> apply(A a, B b, C c, D d, E e) {\n","        return (f, g) -> apply(a, b, c, d, e, f, g);\n","    }\n","\n","    /**\n","     * Partially apply this function by taking its first six arguments.\n","     *\n","     * @param a the first argument\n","     * @param b the second argument\n","     * @param c the third argument\n","     * @param d the fourth argument\n","     * @param e the fifth argument\n","     * @param f the sixth argument\n","     * @return an {@link Fn1} that takes the remaining argument and returns the result\n","     */\n","    @Override\n","    default Fn1<G, H> apply(A a, B b, C c, D d, E e, F f) {\n","        return (g) -> apply(a, b, c, d, e, f, g);\n","    }\n","\n","    /**\n","     * Flip the order of the first two arguments.\n","     *\n","     * @return an {@link Fn7} that takes the first and second arguments in reversed order\n","     */\n","    @Override\n","    default Fn7<B, A, C, D, E, F, G, H> flip() {\n","        return (b, a, c, d, e, f, g) -> apply(a, b, c, d, e, f, g);\n","    }\n","\n","    /**\n","     * Returns an {@link Fn6} that takes the first two arguments as a <code>{@link Product2}&lt;A, B&gt;</code> and the\n","     * remaining arguments.\n","     *\n","     * @return an {@link Fn6} taking a {@link Product2} and the remaining arguments\n","     */\n","    @Override\n","    default Fn6<? super Product2<? extends A, ? extends B>, C, D, E, F, G, H> uncurry() {\n","        return (ab, c, d, e, f, g) -> apply(ab._1(), ab._2(), c, d, e, f, g);\n","    }\n","\n","    @Override\n","    default <I> Fn7<A, B, C, D, E, F, G, H> discardR(Applicative<I, Fn1<A, ?>> appB) {\n","        return fn7(Fn6.super.discardR(appB));\n","    }\n","\n","    @Override\n","    default <Z> Fn7<Z, B, C, D, E, F, G, H> diMapL(Fn1<? super Z, ? extends A> fn) {\n","        return fn7(Fn6.super.diMapL(fn));\n","    }\n","\n","    @Override\n","    default <Z> Fn7<Z, B, C, D, E, F, G, H> contraMap(Fn1<? super Z, ? extends A> fn) {\n","        return fn7(Fn6.super.contraMap(fn));\n","    }\n","\n","    @Override\n","    default <Y, Z> Fn8<Y, Z, B, C, D, E, F, G, H> compose(Fn2<? super Y, ? super Z, ? extends A> before) {\n","        return fn8(Fn6.super.compose(before));\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a curried {@link Fn1} in an {@link Fn7}.\n","     *\n","     * @param curriedFn1 the curried fn1 to adapt\n","     * @param <A>        the first input argument type\n","     * @param <B>        the second input argument type\n","     * @param <C>        the third input argument type\n","     * @param <D>        the fourth input argument type\n","     * @param <E>        the fifth input argument type\n","     * @param <F>        the sixth input argument type\n","     * @param <G>        the seventh input argument type\n","     * @param <H>        the output type\n","     * @return the {@link Fn7}\n","     */\n","    static <A, B, C, D, E, F, G, H> Fn7<A, B, C, D, E, F, G, H> fn7(Fn1<A, Fn6<B, C, D, E, F, G, H>> curriedFn1) {\n","        return (a, b, c, d, e, f, g) -> curriedFn1.apply(a).apply(b, c, d, e, f, g);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a curried {@link Fn2} in an {@link Fn7}.\n","     *\n","     * @param curriedFn2 the curried fn2 to adapt\n","     * @param <A>        the first input argument type\n","     * @param <B>        the second input argument type\n","     * @param <C>        the third input argument type\n","     * @param <D>        the fourth input argument type\n","     * @param <E>        the fifth input argument type\n","     * @param <F>        the sixth input argument type\n","     * @param <G>        the seventh input argument type\n","     * @param <H>        the output type\n","     * @return the {@link Fn7}\n","     */\n","    static <A, B, C, D, E, F, G, H> Fn7<A, B, C, D, E, F, G, H> fn7(Fn2<A, B, Fn5<C, D, E, F, G, H>> curriedFn2) {\n","        return (a, b, c, d, e, f, g) -> curriedFn2.apply(a, b).apply(c, d, e, f, g);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a curried {@link Fn3} in an {@link Fn7}.\n","     *\n","     * @param curriedFn3 the curried fn3 to adapt\n","     * @param <A>        the first input argument type\n","     * @param <B>        the second input argument type\n","     * @param <C>        the third input argument type\n","     * @param <D>        the fourth input argument type\n","     * @param <E>        the fifth input argument type\n","     * @param <F>        the sixth input argument type\n","     * @param <G>        the seventh input argument type\n","     * @param <H>        the output type\n","     * @return the {@link Fn7}\n","     */\n","    static <A, B, C, D, E, F, G, H> Fn7<A, B, C, D, E, F, G, H> fn7(Fn3<A, B, C, Fn4<D, E, F, G, H>> curriedFn3) {\n","        return (a, b, c, d, e, f, g) -> curriedFn3.apply(a, b, c).apply(d, e, f, g);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a curried {@link Fn4} in an {@link Fn7}.\n","     *\n","     * @param curriedFn4 the curried fn4 to adapt\n","     * @param <A>        the first input argument type\n","     * @param <B>        the second input argument type\n","     * @param <C>        the third input argument type\n","     * @param <D>        the fourth input argument type\n","     * @param <E>        the fifth input argument type\n","     * @param <F>        the sixth input argument type\n","     * @param <G>        the seventh input argument type\n","     * @param <H>        the output type\n","     * @return the {@link Fn7}\n","     */\n","    static <A, B, C, D, E, F, G, H> Fn7<A, B, C, D, E, F, G, H> fn7(Fn4<A, B, C, D, Fn3<E, F, G, H>> curriedFn4) {\n","        return (a, b, c, d, e, f, g) -> curriedFn4.apply(a, b, c, d).apply(e, f, g);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a curried {@link Fn5} in an {@link Fn7}.\n","     *\n","     * @param curriedFn5 the curried fn5 to adapt\n","     * @param <A>        the first input argument type\n","     * @param <B>        the second input argument type\n","     * @param <C>        the third input argument type\n","     * @param <D>        the fourth input argument type\n","     * @param <E>        the fifth input argument type\n","     * @param <F>        the sixth input argument type\n","     * @param <G>        the seventh input argument type\n","     * @param <H>        the output type\n","     * @return the {@link Fn7}\n","     */\n","    static <A, B, C, D, E, F, G, H> Fn7<A, B, C, D, E, F, G, H> fn7(Fn5<A, B, C, D, E, Fn2<F, G, H>> curriedFn5) {\n","        return (a, b, c, d, e, f, g) -> curriedFn5.apply(a, b, c, d, e).apply(f, g);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a curried {@link Fn6} in an {@link Fn7}.\n","     *\n","     * @param curriedFn6 the curried fn6 to adapt\n","     * @param <A>        the first input argument type\n","     * @param <B>        the second input argument type\n","     * @param <C>        the third input argument type\n","     * @param <D>        the fourth input argument type\n","     * @param <E>        the fifth input argument type\n","     * @param <F>        the sixth input argument type\n","     * @param <G>        the seventh input argument type\n","     * @param <H>        the output type\n","     * @return the {@link Fn7}\n","     */\n","    static <A, B, C, D, E, F, G, H> Fn7<A, B, C, D, E, F, G, H> fn7(Fn6<A, B, C, D, E, F, Fn1<G, H>> curriedFn6) {\n","        return (a, b, c, d, e, f, g) -> curriedFn6.apply(a, b, c, d, e, f).apply(g);\n","    }\n","\n","    /**\n","     * Static factory method for coercing a lambda to an {@link Fn7}.\n","     *\n","     * @param fn  the lambda to coerce\n","     * @param <A> the first input argument type\n","     * @param <B> the second input argument type\n","     * @param <C> the third input argument type\n","     * @param <D> the fourth input argument type\n","     * @param <E> the fifth input argument type\n","     * @param <F> the sixth input argument type\n","     * @param <G> the seventh input argument type\n","     * @param <H> the output type\n","     * @return the {@link Fn7}\n","     */\n","    static <A, B, C, D, E, F, G, H> Fn7<A, B, C, D, E, F, G, H> fn7(Fn7<A, B, C, D, E, F, G, H> fn) {\n","        return fn;\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions;\n","\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static org.hamcrest.core.Is.is;\n","import static org.junit.Assert.assertEquals;\n","import static org.junit.Assert.assertThat;\n","\n","public class Fn7Test {\n","\n","    private static final Fn7<String, String, String, String, String, String, String, String> APPEND =\n","            (s1, s2, s3, s4, s5, s6, s7) -> s1 + s2 + s3 + s4 + s5 + s6 + s7;\n","\n","    @Test\n","    public void canBePartiallyApplied() {\n","        assertThat(APPEND.apply(\"a\").apply(\"b\").apply(\"c\").apply(\"d\").apply(\"e\").apply(\"f\").apply(\"g\"), is(\"abcdefg\"));\n","        assertThat(APPEND.apply(\"a\").apply(\"b\").apply(\"c\").apply(\"d\").apply(\"e\").apply(\"f\", \"g\"), is(\"abcdefg\"));\n","        assertThat(APPEND.apply(\"a\").apply(\"b\").apply(\"c\").apply(\"d\").apply(\"e\", \"f\", \"g\"), is(\"abcdefg\"));\n","        assertThat(APPEND.apply(\"a\").apply(\"b\").apply(\"c\").apply(\"d\", \"e\", \"f\", \"g\"), is(\"abcdefg\"));\n","        assertThat(APPEND.apply(\"a\").apply(\"b\").apply(\"c\", \"d\", \"e\", \"f\", \"g\"), is(\"abcdefg\"));\n","        assertThat(APPEND.apply(\"a\").apply(\"b\", \"c\", \"d\", \"e\", \"f\", \"g\"), is(\"abcdefg\"));\n","        assertThat(APPEND.apply(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"), is(\"abcdefg\"));\n","    }\n","\n","    @Test\n","    public void flipsFirstAndSecondArgument() {\n","        assertThat(APPEND.flip().apply(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"), is(\"bacdefg\"));\n","    }\n","\n","    @Test\n","    public void uncurries() {\n","        assertThat(APPEND.uncurry().apply(tuple(\"a\", \"b\"), \"c\", \"d\", \"e\", \"f\", \"g\"), is(\"abcdefg\"));\n","    }\n","\n","    @Test\n","    public void staticFactoryMethod() {\n","        Fn1<String, Fn6<String, String, String, String, String, String, String>> fn1 = a -> (b, c, d, e, f, g) -> a + b + c + d + e + f + g;\n","        assertEquals(\"abcdefg\", Fn7.fn7(fn1).apply(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"));\n","\n","        Fn2<String, String, Fn5<String, String, String, String, String, String>> fn2 = (a, b) -> (c, d, e, f, g) -> a + b + c + d + e + f + g;\n","        assertEquals(\"abcdefg\", Fn7.fn7(fn2).apply(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"));\n","\n","        Fn3<String, String, String, Fn4<String, String, String, String, String>> fn3 = (a, b, c) -> (d, e, f, g) -> a + b + c + d + e + f + g;\n","        assertEquals(\"abcdefg\", Fn7.fn7(fn3).apply(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"));\n","\n","        Fn4<String, String, String, String, Fn3<String, String, String, String>> fn4 = (a, b, c, d) -> (e, f, g) -> a + b + c + d + e + f + g;\n","        assertEquals(\"abcdefg\", Fn7.fn7(fn4).apply(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"));\n","\n","        Fn5<String, String, String, String, String, Fn2<String, String, String>> fn5 = (a, b, c, d, e) -> (f, g) -> a + b + c + d + e + f + g;\n","        assertEquals(\"abcdefg\", Fn7.fn7(fn5).apply(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"));\n","\n","        Fn6<String, String, String, String, String, String, Fn1<String, String>> fn6 = (a, b, c, d, e, f) -> (g) -> a + b + c + d + e + f + g;\n","        assertEquals(\"abcdefg\", Fn7.fn7(fn6).apply(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"));\n","\n","        assertEquals(\"abcdefg\", Fn7.<String, String, String, String, String, String, String, String>fn7((a, b, c, d, e, f, g) -> a + b + c + d + e + f + g).apply(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"));\n","    }\n","}\n"],"method_lines_dic":{"Fn7::::checkedApply(A,B,C,D,E,F,G)":[26,26],"Fn7::::apply(A,B,C,D,E,F,G)":[40,46],"Fn7::::checkedApply(A,B,C,D,E,F)":[51,54],"Fn7::::widen()":[59,62],"Fn7::::apply(A)":[70,73],"Fn7::::apply(A,B)":[82,85],"Fn7::::apply(A,B,C)":[95,98],"Fn7::::apply(A,B,C,D)":[109,112],"Fn7::::apply(A,B,C,D,E)":[124,127],"Fn7::::apply(A,B,C,D,E,F)":[140,143],"Fn7::::flip()":[150,153],"Fn7::::uncurry()":[161,164],"Fn7::::discardR(com.jnape.palatable.lambda.functor.Applicative<I, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)":[166,169],"Fn7::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)":[171,174],"Fn7::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)":[176,179],"Fn7::::compose(com.jnape.palatable.lambda.functions.Fn2<? super Y, ? super Z, ? extends A>)":[181,184],"Fn7::::fn7(com.jnape.palatable.lambda.functions.Fn1<A, com.jnape.palatable.lambda.functions.Fn6<B, C, D, E, F, G, H>>)":[200,202],"Fn7::::fn7(com.jnape.palatable.lambda.functions.Fn2<A, B, com.jnape.palatable.lambda.functions.Fn5<C, D, E, F, G, H>>)":[218,220],"Fn7::::fn7(com.jnape.palatable.lambda.functions.Fn3<A, B, C, com.jnape.palatable.lambda.functions.Fn4<D, E, F, G, H>>)":[236,238],"Fn7::::fn7(com.jnape.palatable.lambda.functions.Fn4<A, B, C, D, com.jnape.palatable.lambda.functions.Fn3<E, F, G, H>>)":[254,256],"Fn7::::fn7(com.jnape.palatable.lambda.functions.Fn5<A, B, C, D, E, com.jnape.palatable.lambda.functions.Fn2<F, G, H>>)":[272,274],"Fn7::::fn7(com.jnape.palatable.lambda.functions.Fn6<A, B, C, D, E, F, com.jnape.palatable.lambda.functions.Fn1<G, H>>)":[290,292],"Fn7::::fn7(com.jnape.palatable.lambda.functions.Fn7<A, B, C, D, E, F, G, H>)":[308,310]},"test_method_lines_dic":{"Fn7Test::::canBePartiallyApplied()":[15,24],"Fn7Test::::flipsFirstAndSecondArgument()":[26,29],"Fn7Test::::uncurries()":[31,34],"Fn7Test::::staticFactoryMethod()":[36,57]},"reverse_method_lines_dic":{"26":"Fn7::::checkedApply(A,B,C,D,E,F,G)","40":"Fn7::::apply(A,B,C,D,E,F,G)","41":"Fn7::::apply(A,B,C,D,E,F,G)","42":"Fn7::::apply(A,B,C,D,E,F,G)","43":"Fn7::::apply(A,B,C,D,E,F,G)","44":"Fn7::::apply(A,B,C,D,E,F,G)","45":"Fn7::::apply(A,B,C,D,E,F,G)","46":"Fn7::::apply(A,B,C,D,E,F,G)","51":"Fn7::::checkedApply(A,B,C,D,E,F)","52":"Fn7::::checkedApply(A,B,C,D,E,F)","53":"Fn7::::checkedApply(A,B,C,D,E,F)","54":"Fn7::::checkedApply(A,B,C,D,E,F)","59":"Fn7::::widen()","60":"Fn7::::widen()","61":"Fn7::::widen()","62":"Fn7::::widen()","70":"Fn7::::apply(A)","71":"Fn7::::apply(A)","72":"Fn7::::apply(A)","73":"Fn7::::apply(A)","82":"Fn7::::apply(A,B)","83":"Fn7::::apply(A,B)","84":"Fn7::::apply(A,B)","85":"Fn7::::apply(A,B)","95":"Fn7::::apply(A,B,C)","96":"Fn7::::apply(A,B,C)","97":"Fn7::::apply(A,B,C)","98":"Fn7::::apply(A,B,C)","109":"Fn7::::apply(A,B,C,D)","110":"Fn7::::apply(A,B,C,D)","111":"Fn7::::apply(A,B,C,D)","112":"Fn7::::apply(A,B,C,D)","124":"Fn7::::apply(A,B,C,D,E)","125":"Fn7::::apply(A,B,C,D,E)","126":"Fn7::::apply(A,B,C,D,E)","127":"Fn7::::apply(A,B,C,D,E)","140":"Fn7::::apply(A,B,C,D,E,F)","141":"Fn7::::apply(A,B,C,D,E,F)","142":"Fn7::::apply(A,B,C,D,E,F)","143":"Fn7::::apply(A,B,C,D,E,F)","150":"Fn7::::flip()","151":"Fn7::::flip()","152":"Fn7::::flip()","153":"Fn7::::flip()","161":"Fn7::::uncurry()","162":"Fn7::::uncurry()","163":"Fn7::::uncurry()","164":"Fn7::::uncurry()","166":"Fn7::::discardR(com.jnape.palatable.lambda.functor.Applicative<I, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","167":"Fn7::::discardR(com.jnape.palatable.lambda.functor.Applicative<I, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","168":"Fn7::::discardR(com.jnape.palatable.lambda.functor.Applicative<I, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","169":"Fn7::::discardR(com.jnape.palatable.lambda.functor.Applicative<I, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","171":"Fn7::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","172":"Fn7::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","173":"Fn7::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","174":"Fn7::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","176":"Fn7::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","177":"Fn7::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","178":"Fn7::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","179":"Fn7::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","181":"Fn7::::compose(com.jnape.palatable.lambda.functions.Fn2<? super Y, ? super Z, ? extends A>)","182":"Fn7::::compose(com.jnape.palatable.lambda.functions.Fn2<? super Y, ? super Z, ? extends A>)","183":"Fn7::::compose(com.jnape.palatable.lambda.functions.Fn2<? super Y, ? super Z, ? extends A>)","184":"Fn7::::compose(com.jnape.palatable.lambda.functions.Fn2<? super Y, ? super Z, ? extends A>)","200":"Fn7::::fn7(com.jnape.palatable.lambda.functions.Fn1<A, com.jnape.palatable.lambda.functions.Fn6<B, C, D, E, F, G, H>>)","201":"Fn7::::fn7(com.jnape.palatable.lambda.functions.Fn1<A, com.jnape.palatable.lambda.functions.Fn6<B, C, D, E, F, G, H>>)","202":"Fn7::::fn7(com.jnape.palatable.lambda.functions.Fn1<A, com.jnape.palatable.lambda.functions.Fn6<B, C, D, E, F, G, H>>)","218":"Fn7::::fn7(com.jnape.palatable.lambda.functions.Fn2<A, B, com.jnape.palatable.lambda.functions.Fn5<C, D, E, F, G, H>>)","219":"Fn7::::fn7(com.jnape.palatable.lambda.functions.Fn2<A, B, com.jnape.palatable.lambda.functions.Fn5<C, D, E, F, G, H>>)","220":"Fn7::::fn7(com.jnape.palatable.lambda.functions.Fn2<A, B, com.jnape.palatable.lambda.functions.Fn5<C, D, E, F, G, H>>)","236":"Fn7::::fn7(com.jnape.palatable.lambda.functions.Fn3<A, B, C, com.jnape.palatable.lambda.functions.Fn4<D, E, F, G, H>>)","237":"Fn7::::fn7(com.jnape.palatable.lambda.functions.Fn3<A, B, C, com.jnape.palatable.lambda.functions.Fn4<D, E, F, G, H>>)","238":"Fn7::::fn7(com.jnape.palatable.lambda.functions.Fn3<A, B, C, com.jnape.palatable.lambda.functions.Fn4<D, E, F, G, H>>)","254":"Fn7::::fn7(com.jnape.palatable.lambda.functions.Fn4<A, B, C, D, com.jnape.palatable.lambda.functions.Fn3<E, F, G, H>>)","255":"Fn7::::fn7(com.jnape.palatable.lambda.functions.Fn4<A, B, C, D, com.jnape.palatable.lambda.functions.Fn3<E, F, G, H>>)","256":"Fn7::::fn7(com.jnape.palatable.lambda.functions.Fn4<A, B, C, D, com.jnape.palatable.lambda.functions.Fn3<E, F, G, H>>)","272":"Fn7::::fn7(com.jnape.palatable.lambda.functions.Fn5<A, B, C, D, E, com.jnape.palatable.lambda.functions.Fn2<F, G, H>>)","273":"Fn7::::fn7(com.jnape.palatable.lambda.functions.Fn5<A, B, C, D, E, com.jnape.palatable.lambda.functions.Fn2<F, G, H>>)","274":"Fn7::::fn7(com.jnape.palatable.lambda.functions.Fn5<A, B, C, D, E, com.jnape.palatable.lambda.functions.Fn2<F, G, H>>)","290":"Fn7::::fn7(com.jnape.palatable.lambda.functions.Fn6<A, B, C, D, E, F, com.jnape.palatable.lambda.functions.Fn1<G, H>>)","291":"Fn7::::fn7(com.jnape.palatable.lambda.functions.Fn6<A, B, C, D, E, F, com.jnape.palatable.lambda.functions.Fn1<G, H>>)","292":"Fn7::::fn7(com.jnape.palatable.lambda.functions.Fn6<A, B, C, D, E, F, com.jnape.palatable.lambda.functions.Fn1<G, H>>)","308":"Fn7::::fn7(com.jnape.palatable.lambda.functions.Fn7<A, B, C, D, E, F, G, H>)","309":"Fn7::::fn7(com.jnape.palatable.lambda.functions.Fn7<A, B, C, D, E, F, G, H>)","310":"Fn7::::fn7(com.jnape.palatable.lambda.functions.Fn7<A, B, C, D, E, F, G, H>)"},"test_reverse_method_lines_dic":{"15":"Fn7Test::::canBePartiallyApplied()","16":"Fn7Test::::canBePartiallyApplied()","17":"Fn7Test::::canBePartiallyApplied()","18":"Fn7Test::::canBePartiallyApplied()","19":"Fn7Test::::canBePartiallyApplied()","20":"Fn7Test::::canBePartiallyApplied()","21":"Fn7Test::::canBePartiallyApplied()","22":"Fn7Test::::canBePartiallyApplied()","23":"Fn7Test::::canBePartiallyApplied()","24":"Fn7Test::::canBePartiallyApplied()","26":"Fn7Test::::flipsFirstAndSecondArgument()","27":"Fn7Test::::flipsFirstAndSecondArgument()","28":"Fn7Test::::flipsFirstAndSecondArgument()","29":"Fn7Test::::flipsFirstAndSecondArgument()","31":"Fn7Test::::uncurries()","32":"Fn7Test::::uncurries()","33":"Fn7Test::::uncurries()","34":"Fn7Test::::uncurries()","36":"Fn7Test::::staticFactoryMethod()","37":"Fn7Test::::staticFactoryMethod()","38":"Fn7Test::::staticFactoryMethod()","39":"Fn7Test::::staticFactoryMethod()","40":"Fn7Test::::staticFactoryMethod()","41":"Fn7Test::::staticFactoryMethod()","42":"Fn7Test::::staticFactoryMethod()","43":"Fn7Test::::staticFactoryMethod()","44":"Fn7Test::::staticFactoryMethod()","45":"Fn7Test::::staticFactoryMethod()","46":"Fn7Test::::staticFactoryMethod()","47":"Fn7Test::::staticFactoryMethod()","48":"Fn7Test::::staticFactoryMethod()","49":"Fn7Test::::staticFactoryMethod()","50":"Fn7Test::::staticFactoryMethod()","51":"Fn7Test::::staticFactoryMethod()","52":"Fn7Test::::staticFactoryMethod()","53":"Fn7Test::::staticFactoryMethod()","54":"Fn7Test::::staticFactoryMethod()","55":"Fn7Test::::staticFactoryMethod()","56":"Fn7Test::::staticFactoryMethod()","57":"Fn7Test::::staticFactoryMethod()"},"tests":[{"test_lines":[15,24],"covered_lines":[42,72]},{"test_lines":[26,29],"covered_lines":[42,152]},{"test_lines":[31,34],"covered_lines":[42,163]},{"test_lines":[36,57],"covered_lines":[42,201,219,237,255,273,291,309]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/Fn2.java":{"class_content":["package com.jnape.palatable.lambda.functions;\n","\n","import com.jnape.palatable.lambda.adt.hlist.Tuple2;\n","import com.jnape.palatable.lambda.adt.product.Product2;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","import com.jnape.palatable.lambda.internal.Runtime;\n","\n","import java.util.function.BiFunction;\n","\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.Fn3.fn3;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","\n","/**\n"," * A function taking two arguments.\n"," * <p>\n"," * Note that defining {@link Fn2} in terms of <code>Fn1</code> provides a reasonable approximation of currying in the\n"," * form of multiple {@link Fn2#apply} overloads that take different numbers of arguments.\n"," *\n"," * @param <A> The first argument type\n"," * @param <B> The second argument type\n"," * @param <C> The return type\n"," * @see Fn1\n"," */\n","@FunctionalInterface\n","public interface Fn2<A, B, C> extends Fn1<A, Fn1<B, C>> {\n","\n","    C checkedApply(A a, B b) throws Throwable;\n","\n","    /**\n","     * Invoke this function with the given arguments.\n","     *\n","     * @param a the first argument\n","     * @param b the second argument\n","     * @return the result of the function application\n","     */\n","    default C apply(A a, B b) {\n","        try {\n","            return checkedApply(a, b);\n","        } catch (Throwable t) {\n","            throw Runtime.throwChecked(t);\n","        }\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    default Fn1<B, C> checkedApply(A a) throws Throwable {\n","        return b -> checkedApply(a, b);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    default <Z> Fn3<Z, A, B, C> widen() {\n","        return fn3(constantly(this));\n","    }\n","\n","    /**\n","     * Partially apply this function by passing its first argument.\n","     *\n","     * @param a the first argument\n","     * @return an {@link Fn1}&lt;B, C&gt;\n","     */\n","    @Override\n","    default Fn1<B, C> apply(A a) {\n","        return (b) -> apply(a, b);\n","    }\n","\n","    /**\n","     * Flip the order of the arguments.\n","     *\n","     * @return an {@link Fn2}&lt;B, A, C&gt;\n","     */\n","    default Fn2<B, A, C> flip() {\n","        return (b, a) -> apply(a, b);\n","    }\n","\n","    /**\n","     * Returns an {@link Fn1} that takes the arguments as a <code>{@link Product2}&lt;A, B&gt;</code>.\n","     *\n","     * @return an {@link Fn1} taking a {@link Product2}\n","     */\n","    default Fn1<? super Product2<? extends A, ? extends B>, C> uncurry() {\n","        return (ab) -> apply(ab._1(), ab._2());\n","    }\n","\n","    /**\n","     * View this {@link Fn2} as a {@link BiFunction}.\n","     *\n","     * @return the same logic as a {@link BiFunction}\n","     * @see BiFunction\n","     */\n","    default BiFunction<A, B, C> toBiFunction() {\n","        return this::apply;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    default <D> Fn2<A, B, C> discardR(Applicative<D, Fn1<A, ?>> appB) {\n","        return curried(Fn1.super.discardR(appB));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    default <Z> Fn2<Z, B, C> diMapL(Fn1<? super Z, ? extends A> fn) {\n","        return curried(Fn1.super.diMapL(fn));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    default <Z> Fn2<Z, B, C> contraMap(Fn1<? super Z, ? extends A> fn) {\n","        return curried(Fn1.super.contraMap(fn));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    default <Y, Z> Fn3<Y, Z, B, C> compose(Fn2<? super Y, ? super Z, ? extends A> before) {\n","        return fn3(Fn1.super.compose(before));\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a {@link BiFunction} in an {@link Fn2}.\n","     *\n","     * @param biFunction the biFunction to adapt\n","     * @param <A>        the first input argument type\n","     * @param <B>        the second input argument type\n","     * @param <C>        the output type\n","     * @return the {@link Fn2}\n","     */\n","    static <A, B, C> Fn2<A, B, C> fromBiFunction(BiFunction<? super A, ? super B, ? extends C> biFunction) {\n","        return biFunction::apply;\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a curried {@link Fn1} in an {@link Fn2}.\n","     *\n","     * @param curriedFn1 the curried fn1 to adapt\n","     * @param <A>        the first input argument type\n","     * @param <B>        the second input argument type\n","     * @param <C>        the output type\n","     * @return the {@link Fn2}\n","     */\n","    static <A, B, C> Fn2<A, B, C> curried(Fn1<A, Fn1<B, C>> curriedFn1) {\n","        return (a, b) -> curriedFn1.apply(a).apply(b);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping an uncurried {@link Fn1} in an {@link Fn2}.\n","     *\n","     * @param uncurriedFn1 the uncurried {@link Fn1} to adapt\n","     * @param <A>          the first input argument type\n","     * @param <B>          the second input argument type\n","     * @param <C>          the output type\n","     * @return the {@link Fn2}\n","     */\n","    static <A, B, C> Fn2<A, B, C> curry(Fn1<? super Tuple2<A, B>, ? extends C> uncurriedFn1) {\n","        return (a, b) -> uncurriedFn1.apply(tuple(a, b));\n","    }\n","\n","    /**\n","     * Static method to aid inference.\n","     *\n","     * @param fn2 the {@link Fn2}\n","     * @param <A> the first input type\n","     * @param <B> the second input type\n","     * @param <C> the output type\n","     * @return the {@link Fn2}\n","     */\n","    static <A, B, C> Fn2<A, B, C> fn2(Fn2<A, B, C> fn2) {\n","        return fn2;\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions;\n","\n","import org.junit.Test;\n","\n","import java.util.Map;\n","import java.util.function.BiFunction;\n","\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Into.into;\n","import static org.hamcrest.core.Is.is;\n","import static org.junit.Assert.assertEquals;\n","import static org.junit.Assert.assertThat;\n","\n","public class Fn2Test {\n","\n","    private static final Fn2<String, Integer, Boolean> CHECK_LENGTH\n","            = (string, length) -> string.length() == length;\n","\n","    @Test\n","    public void flipSwapsArguments() {\n","        assertThat(CHECK_LENGTH.flip().apply(3, \"foo\"), is(true));\n","    }\n","\n","    @Test\n","    public void canBePartiallyApplied() {\n","        assertThat(CHECK_LENGTH.apply(\"quux\").apply(4), is(true));\n","    }\n","\n","    @Test\n","    public void uncurries() {\n","        assertThat(CHECK_LENGTH.uncurry().apply(tuple(\"abc\", 3)), is(true));\n","    }\n","\n","    @Test\n","    public void toBiFunction() {\n","        BiFunction<String, Integer, Boolean> biFunction = CHECK_LENGTH.toBiFunction();\n","        assertEquals(true, biFunction.apply(\"abc\", 3));\n","    }\n","\n","    @Test\n","    public void curried() {\n","        Fn1<String, Fn1<String, String>> curriedFn1 = (x) -> (y) -> String.format(x, y);\n","        assertEquals(\"foo bar\", Fn2.curried(curriedFn1).apply(\"foo %s\", \"bar\"));\n","    }\n","\n","    @Test\n","    public void fn2() {\n","        Fn2<String, String, String> fn2 = Fn2.fn2(String::format);\n","        assertEquals(\"foo bar\", fn2.apply(\"foo %s\", \"bar\"));\n","    }\n","\n","    @Test\n","    public void fromBiFunction() {\n","        BiFunction<String, String, String> biFunction = String::format;\n","        assertEquals(\"foo bar\", Fn2.fromBiFunction(biFunction).apply(\"foo %s\", \"bar\"));\n","    }\n","\n","    @Test\n","    public void curry() {\n","        Fn1<Map.Entry<String, String>, String> uncurried = into((a, b) -> a + b);\n","        assertEquals(\"foobar\", Fn2.curry(uncurried).apply(\"foo\", \"bar\"));\n","    }\n","}\n"],"method_lines_dic":{"Fn2::::checkedApply(A,B)":[28,28],"Fn2::::apply(A,B)":[37,43],"Fn2::::checkedApply(A)":[48,51],"Fn2::::widen()":[56,59],"Fn2::::apply(A)":[67,70],"Fn2::::flip()":[77,79],"Fn2::::uncurry()":[86,88],"Fn2::::toBiFunction()":[96,98],"Fn2::::discardR(com.jnape.palatable.lambda.functor.Applicative<D, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)":[103,106],"Fn2::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)":[111,114],"Fn2::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)":[119,122],"Fn2::::compose(com.jnape.palatable.lambda.functions.Fn2<? super Y, ? super Z, ? extends A>)":[127,130],"Fn2::::fromBiFunction(java.util.function.BiFunction<? super A, ? super B, ? extends C>)":[141,143],"Fn2::::curried(com.jnape.palatable.lambda.functions.Fn1<A, com.jnape.palatable.lambda.functions.Fn1<B, C>>)":[154,156],"Fn2::::curry(com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.hlist.Tuple2<A, B>, ? extends C>)":[167,169],"Fn2::::fn2(com.jnape.palatable.lambda.functions.Fn2<A, B, C>)":[180,182]},"test_method_lines_dic":{"Fn2Test::::flipSwapsArguments()":[19,22],"Fn2Test::::canBePartiallyApplied()":[24,27],"Fn2Test::::uncurries()":[29,32],"Fn2Test::::toBiFunction()":[34,38],"Fn2Test::::curried()":[40,44],"Fn2Test::::fn2()":[46,50],"Fn2Test::::fromBiFunction()":[52,56],"Fn2Test::::curry()":[58,62]},"reverse_method_lines_dic":{"28":"Fn2::::checkedApply(A,B)","37":"Fn2::::apply(A,B)","38":"Fn2::::apply(A,B)","39":"Fn2::::apply(A,B)","40":"Fn2::::apply(A,B)","41":"Fn2::::apply(A,B)","42":"Fn2::::apply(A,B)","43":"Fn2::::apply(A,B)","48":"Fn2::::checkedApply(A)","49":"Fn2::::checkedApply(A)","50":"Fn2::::checkedApply(A)","51":"Fn2::::checkedApply(A)","56":"Fn2::::widen()","57":"Fn2::::widen()","58":"Fn2::::widen()","59":"Fn2::::widen()","67":"Fn2::::apply(A)","68":"Fn2::::apply(A)","69":"Fn2::::apply(A)","70":"Fn2::::apply(A)","77":"Fn2::::flip()","78":"Fn2::::flip()","79":"Fn2::::flip()","86":"Fn2::::uncurry()","87":"Fn2::::uncurry()","88":"Fn2::::uncurry()","96":"Fn2::::toBiFunction()","97":"Fn2::::toBiFunction()","98":"Fn2::::toBiFunction()","103":"Fn2::::discardR(com.jnape.palatable.lambda.functor.Applicative<D, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","104":"Fn2::::discardR(com.jnape.palatable.lambda.functor.Applicative<D, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","105":"Fn2::::discardR(com.jnape.palatable.lambda.functor.Applicative<D, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","106":"Fn2::::discardR(com.jnape.palatable.lambda.functor.Applicative<D, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","111":"Fn2::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","112":"Fn2::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","113":"Fn2::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","114":"Fn2::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","119":"Fn2::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","120":"Fn2::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","121":"Fn2::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","122":"Fn2::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","127":"Fn2::::compose(com.jnape.palatable.lambda.functions.Fn2<? super Y, ? super Z, ? extends A>)","128":"Fn2::::compose(com.jnape.palatable.lambda.functions.Fn2<? super Y, ? super Z, ? extends A>)","129":"Fn2::::compose(com.jnape.palatable.lambda.functions.Fn2<? super Y, ? super Z, ? extends A>)","130":"Fn2::::compose(com.jnape.palatable.lambda.functions.Fn2<? super Y, ? super Z, ? extends A>)","141":"Fn2::::fromBiFunction(java.util.function.BiFunction<? super A, ? super B, ? extends C>)","142":"Fn2::::fromBiFunction(java.util.function.BiFunction<? super A, ? super B, ? extends C>)","143":"Fn2::::fromBiFunction(java.util.function.BiFunction<? super A, ? super B, ? extends C>)","154":"Fn2::::curried(com.jnape.palatable.lambda.functions.Fn1<A, com.jnape.palatable.lambda.functions.Fn1<B, C>>)","155":"Fn2::::curried(com.jnape.palatable.lambda.functions.Fn1<A, com.jnape.palatable.lambda.functions.Fn1<B, C>>)","156":"Fn2::::curried(com.jnape.palatable.lambda.functions.Fn1<A, com.jnape.palatable.lambda.functions.Fn1<B, C>>)","167":"Fn2::::curry(com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.hlist.Tuple2<A, B>, ? extends C>)","168":"Fn2::::curry(com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.hlist.Tuple2<A, B>, ? extends C>)","169":"Fn2::::curry(com.jnape.palatable.lambda.functions.Fn1<? super com.jnape.palatable.lambda.adt.hlist.Tuple2<A, B>, ? extends C>)","180":"Fn2::::fn2(com.jnape.palatable.lambda.functions.Fn2<A, B, C>)","181":"Fn2::::fn2(com.jnape.palatable.lambda.functions.Fn2<A, B, C>)","182":"Fn2::::fn2(com.jnape.palatable.lambda.functions.Fn2<A, B, C>)"},"test_reverse_method_lines_dic":{"19":"Fn2Test::::flipSwapsArguments()","20":"Fn2Test::::flipSwapsArguments()","21":"Fn2Test::::flipSwapsArguments()","22":"Fn2Test::::flipSwapsArguments()","24":"Fn2Test::::canBePartiallyApplied()","25":"Fn2Test::::canBePartiallyApplied()","26":"Fn2Test::::canBePartiallyApplied()","27":"Fn2Test::::canBePartiallyApplied()","29":"Fn2Test::::uncurries()","30":"Fn2Test::::uncurries()","31":"Fn2Test::::uncurries()","32":"Fn2Test::::uncurries()","34":"Fn2Test::::toBiFunction()","35":"Fn2Test::::toBiFunction()","36":"Fn2Test::::toBiFunction()","37":"Fn2Test::::toBiFunction()","38":"Fn2Test::::toBiFunction()","40":"Fn2Test::::curried()","41":"Fn2Test::::curried()","42":"Fn2Test::::curried()","43":"Fn2Test::::curried()","44":"Fn2Test::::curried()","46":"Fn2Test::::fn2()","47":"Fn2Test::::fn2()","48":"Fn2Test::::fn2()","49":"Fn2Test::::fn2()","50":"Fn2Test::::fn2()","52":"Fn2Test::::fromBiFunction()","53":"Fn2Test::::fromBiFunction()","54":"Fn2Test::::fromBiFunction()","55":"Fn2Test::::fromBiFunction()","56":"Fn2Test::::fromBiFunction()","58":"Fn2Test::::curry()","59":"Fn2Test::::curry()","60":"Fn2Test::::curry()","61":"Fn2Test::::curry()","62":"Fn2Test::::curry()"},"tests":[{"test_lines":[19,22],"covered_lines":[39,78]},{"test_lines":[24,27],"covered_lines":[39,69]},{"test_lines":[29,32],"covered_lines":[39,87]},{"test_lines":[34,38],"covered_lines":[39,97]},{"test_lines":[40,44],"covered_lines":[39,155]},{"test_lines":[46,50],"covered_lines":[39,181]},{"test_lines":[52,56],"covered_lines":[39,142]},{"test_lines":[58,62],"covered_lines":[39,69,168]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/Fn8.java":{"class_content":["package com.jnape.palatable.lambda.functions;\n","\n","import com.jnape.palatable.lambda.adt.product.Product2;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","import com.jnape.palatable.lambda.internal.Runtime;\n","\n","/**\n"," * A function taking eight arguments. Defined in terms of {@link Fn7}, so similarly auto-curried.\n"," *\n"," * @param <A> The first argument type\n"," * @param <B> The second argument type\n"," * @param <C> The third argument type\n"," * @param <D> The fourth argument type\n"," * @param <E> The fifth argument type\n"," * @param <F> The sixth argument type\n"," * @param <G> The seventh argument type\n"," * @param <H> The eighth argument type\n"," * @param <I> The return type\n"," * @see Fn7\n"," */\n","@FunctionalInterface\n","public interface Fn8<A, B, C, D, E, F, G, H, I> extends Fn7<A, B, C, D, E, F, G, Fn1<H, I>> {\n","\n","    I checkedApply(A a, B b, C c, D d, E e, F f, G g, H h) throws Throwable;\n","\n","    /**\n","     * Invoke this function with the given arguments.\n","     *\n","     * @param a the first argument\n","     * @param b the second argument\n","     * @param c the third argument\n","     * @param d the fourth argument\n","     * @param e the fifth argument\n","     * @param f the sixth argument\n","     * @param g the seventh argument\n","     * @param h the eighth argument\n","     * @return the result of the function application\n","     */\n","    default I apply(A a, B b, C c, D d, E e, F f, G g, H h) {\n","        try {\n","            return checkedApply(a, b, c, d, e, f, g, h);\n","        } catch (Throwable t) {\n","            throw Runtime.throwChecked(t);\n","        }\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    default Fn1<H, I> checkedApply(A a, B b, C c, D d, E e, F f, G g) throws Throwable {\n","        return h -> checkedApply(a, b, c, d, e, f, g, h);\n","    }\n","\n","    /**\n","     * Partially apply this function by taking its first argument.\n","     *\n","     * @param a the first argument\n","     * @return an {@link Fn7} that takes the remaining arguments and returns the result\n","     */\n","    @Override\n","    default Fn7<B, C, D, E, F, G, H, I> apply(A a) {\n","        return (b, c, d, e, f, g, h) -> apply(a, b, c, d, e, f, g, h);\n","    }\n","\n","    /**\n","     * Partially apply this function by taking its first two arguments.\n","     *\n","     * @param a the first argument\n","     * @param b the second argument\n","     * @return an {@link Fn6} that takes the remaining arguments and returns the result\n","     */\n","    @Override\n","    default Fn6<C, D, E, F, G, H, I> apply(A a, B b) {\n","        return (c, d, e, f, g, h) -> apply(a, b, c, d, e, f, g, h);\n","    }\n","\n","    /**\n","     * Partially apply this function by taking its first three arguments.\n","     *\n","     * @param a the first argument\n","     * @param b the second argument\n","     * @param c the third argument\n","     * @return an {@link Fn5} that takes remaining arguments and returns the result\n","     */\n","    @Override\n","    default Fn5<D, E, F, G, H, I> apply(A a, B b, C c) {\n","        return (d, e, f, g, h) -> apply(a, b, c, d, e, f, g, h);\n","    }\n","\n","    /**\n","     * Partially apply this function by taking its first four arguments.\n","     *\n","     * @param a the first argument\n","     * @param b the second argument\n","     * @param c the third argument\n","     * @param d the fourth argument\n","     * @return an {@link Fn4} that takes the remaining arguments and returns the result\n","     */\n","    @Override\n","    default Fn4<E, F, G, H, I> apply(A a, B b, C c, D d) {\n","        return (e, f, g, h) -> apply(a, b, c, d, e, f, g, h);\n","    }\n","\n","    /**\n","     * Partially apply this function by taking its first five arguments.\n","     *\n","     * @param a the first argument\n","     * @param b the second argument\n","     * @param c the third argument\n","     * @param d the fourth argument\n","     * @param e the fifth argument\n","     * @return an {@link Fn3} that takes the remaining arguments and returns the result\n","     */\n","    @Override\n","    default Fn3<F, G, H, I> apply(A a, B b, C c, D d, E e) {\n","        return (f, g, h) -> apply(a, b, c, d, e, f, g, h);\n","    }\n","\n","    /**\n","     * Partially apply this function by taking its first six arguments.\n","     *\n","     * @param a the first argument\n","     * @param b the second argument\n","     * @param c the third argument\n","     * @param d the fourth argument\n","     * @param e the fifth argument\n","     * @param f the sixth argument\n","     * @return an {@link Fn2} that takes the remaining arguments and returns the result\n","     */\n","    @Override\n","    default Fn2<G, H, I> apply(A a, B b, C c, D d, E e, F f) {\n","        return (g, h) -> apply(a, b, c, d, e, f, g, h);\n","    }\n","\n","    /**\n","     * Partially apply this function by taking its first seven arguments.\n","     *\n","     * @param a the first argument\n","     * @param b the second argument\n","     * @param c the third argument\n","     * @param d the fourth argument\n","     * @param e the fifth argument\n","     * @param f the sixth argument\n","     * @param g the seventh argument\n","     * @return an {@link Fn1} that takes the remaining argument and returns the result\n","     */\n","    @Override\n","    default Fn1<H, I> apply(A a, B b, C c, D d, E e, F f, G g) {\n","        return (h) -> apply(a, b, c, d, e, f, g, h);\n","    }\n","\n","    /**\n","     * Flip the order of the first two arguments.\n","     *\n","     * @return an {@link Fn8} that takes the first and second arguments in reversed order\n","     */\n","    @Override\n","    default Fn8<B, A, C, D, E, F, G, H, I> flip() {\n","        return (b, a, c, d, e, f, g, h) -> apply(a, b, c, d, e, f, g, h);\n","    }\n","\n","    /**\n","     * Returns an {@link Fn7} that takes the first two arguments as a <code>{@link Product2}&lt;A, B&gt;</code> and the\n","     * remaining arguments.\n","     *\n","     * @return an {@link Fn7} taking a {@link Product2} and the remaining arguments\n","     */\n","    @Override\n","    default Fn7<? super Product2<? extends A, ? extends B>, C, D, E, F, G, H, I> uncurry() {\n","        return (ab, c, d, e, f, g, h) -> apply(ab._1(), ab._2(), c, d, e, f, g, h);\n","    }\n","\n","    @Override\n","    default <J> Fn8<A, B, C, D, E, F, G, H, I> discardR(Applicative<J, Fn1<A, ?>> appB) {\n","        return fn8(Fn7.super.discardR(appB));\n","    }\n","\n","    @Override\n","    default <Z> Fn8<Z, B, C, D, E, F, G, H, I> diMapL(Fn1<? super Z, ? extends A> fn) {\n","        return fn8(Fn7.super.diMapL(fn));\n","    }\n","\n","    @Override\n","    default <Z> Fn8<Z, B, C, D, E, F, G, H, I> contraMap(Fn1<? super Z, ? extends A> fn) {\n","        return fn8(Fn7.super.contraMap(fn));\n","    }\n","\n","    @Override\n","    default <Y, Z> Fn8<Y, Z, B, C, D, E, F, G, Fn1<H, I>> compose(Fn2<? super Y, ? super Z, ? extends A> before) {\n","        return Fn7.super.compose(before);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a curried {@link Fn1} in an {@link Fn8}.\n","     *\n","     * @param curriedFn1 the curried fn1 to adapt\n","     * @param <A>        the first input argument type\n","     * @param <B>        the second input argument type\n","     * @param <C>        the third input argument type\n","     * @param <D>        the fourth input argument type\n","     * @param <E>        the fifth input argument type\n","     * @param <F>        the sixth input argument type\n","     * @param <G>        the seventh input argument type\n","     * @param <H>        the eighth input argument type\n","     * @param <I>        the output type\n","     * @return the {@link Fn8}\n","     */\n","    static <A, B, C, D, E, F, G, H, I> Fn8<A, B, C, D, E, F, G, H, I> fn8(\n","            Fn1<A, Fn7<B, C, D, E, F, G, H, I>> curriedFn1) {\n","        return (a, b, c, d, e, f, g, h) -> curriedFn1.apply(a).apply(b, c, d, e, f, g, h);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a curried {@link Fn2} in an {@link Fn8}.\n","     *\n","     * @param curriedFn2 the curried fn2 to adapt\n","     * @param <A>        the first input argument type\n","     * @param <B>        the second input argument type\n","     * @param <C>        the third input argument type\n","     * @param <D>        the fourth input argument type\n","     * @param <E>        the fifth input argument type\n","     * @param <F>        the sixth input argument type\n","     * @param <G>        the seventh input argument type\n","     * @param <H>        the eighth input argument type\n","     * @param <I>        the output type\n","     * @return the {@link Fn8}\n","     */\n","    static <A, B, C, D, E, F, G, H, I> Fn8<A, B, C, D, E, F, G, H, I> fn8(\n","            Fn2<A, B, Fn6<C, D, E, F, G, H, I>> curriedFn2) {\n","        return (a, b, c, d, e, f, g, h) -> curriedFn2.apply(a, b).apply(c, d, e, f, g, h);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a curried {@link Fn3} in an {@link Fn8}.\n","     *\n","     * @param curriedFn3 the curried fn3 to adapt\n","     * @param <A>        the first input argument type\n","     * @param <B>        the second input argument type\n","     * @param <C>        the third input argument type\n","     * @param <D>        the fourth input argument type\n","     * @param <E>        the fifth input argument type\n","     * @param <F>        the sixth input argument type\n","     * @param <G>        the seventh input argument type\n","     * @param <H>        the eighth input argument type\n","     * @param <I>        the output type\n","     * @return the {@link Fn8}\n","     */\n","    static <A, B, C, D, E, F, G, H, I> Fn8<A, B, C, D, E, F, G, H, I> fn8(\n","            Fn3<A, B, C, Fn5<D, E, F, G, H, I>> curriedFn3) {\n","        return (a, b, c, d, e, f, g, h) -> curriedFn3.apply(a, b, c).apply(d, e, f, g, h);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a curried {@link Fn4} in an {@link Fn8}.\n","     *\n","     * @param curriedFn4 the curried fn4 to adapt\n","     * @param <A>        the first input argument type\n","     * @param <B>        the second input argument type\n","     * @param <C>        the third input argument type\n","     * @param <D>        the fourth input argument type\n","     * @param <E>        the fifth input argument type\n","     * @param <F>        the sixth input argument type\n","     * @param <G>        the seventh input argument type\n","     * @param <H>        the eighth input argument type\n","     * @param <I>        the output type\n","     * @return the {@link Fn8}\n","     */\n","    static <A, B, C, D, E, F, G, H, I> Fn8<A, B, C, D, E, F, G, H, I> fn8(\n","            Fn4<A, B, C, D, Fn4<E, F, G, H, I>> curriedFn4) {\n","        return (a, b, c, d, e, f, g, h) -> curriedFn4.apply(a, b, c, d).apply(e, f, g, h);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a curried {@link Fn5} in an {@link Fn8}.\n","     *\n","     * @param curriedFn5 the curried fn5 to adapt\n","     * @param <A>        the first input argument type\n","     * @param <B>        the second input argument type\n","     * @param <C>        the third input argument type\n","     * @param <D>        the fourth input argument type\n","     * @param <E>        the fifth input argument type\n","     * @param <F>        the sixth input argument type\n","     * @param <G>        the seventh input argument type\n","     * @param <H>        the eighth input argument type\n","     * @param <I>        the output type\n","     * @return the {@link Fn8}\n","     */\n","    static <A, B, C, D, E, F, G, H, I> Fn8<A, B, C, D, E, F, G, H, I> fn8(\n","            Fn5<A, B, C, D, E, Fn3<F, G, H, I>> curriedFn5) {\n","        return (a, b, c, d, e, f, g, h) -> curriedFn5.apply(a, b, c, d, e).apply(f, g, h);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a curried {@link Fn6} in an {@link Fn8}.\n","     *\n","     * @param curriedFn6 the curried fn6 to adapt\n","     * @param <A>        the first input argument type\n","     * @param <B>        the second input argument type\n","     * @param <C>        the third input argument type\n","     * @param <D>        the fourth input argument type\n","     * @param <E>        the fifth input argument type\n","     * @param <F>        the sixth input argument type\n","     * @param <G>        the seventh input argument type\n","     * @param <H>        the eighth input argument type\n","     * @param <I>        the output type\n","     * @return the {@link Fn8}\n","     */\n","    static <A, B, C, D, E, F, G, H, I> Fn8<A, B, C, D, E, F, G, H, I> fn8(\n","            Fn6<A, B, C, D, E, F, Fn2<G, H, I>> curriedFn6) {\n","        return (a, b, c, d, e, f, g, h) -> curriedFn6.apply(a, b, c, d, e, f).apply(g, h);\n","    }\n","\n","    /**\n","     * Static factory method for wrapping a curried {@link Fn7} in an {@link Fn8}.\n","     *\n","     * @param curriedFn7 the curried fn7 to adapt\n","     * @param <A>        the first input argument type\n","     * @param <B>        the second input argument type\n","     * @param <C>        the third input argument type\n","     * @param <D>        the fourth input argument type\n","     * @param <E>        the fifth input argument type\n","     * @param <F>        the sixth input argument type\n","     * @param <G>        the seventh input argument type\n","     * @param <H>        the eighth input argument type\n","     * @param <I>        the output type\n","     * @return the {@link Fn8}\n","     */\n","    static <A, B, C, D, E, F, G, H, I> Fn8<A, B, C, D, E, F, G, H, I> fn8(\n","            Fn7<A, B, C, D, E, F, G, Fn1<H, I>> curriedFn7) {\n","        return (a, b, c, d, e, f, g, h) -> curriedFn7.apply(a, b, c, d, e, f, g).apply(h);\n","    }\n","\n","    /**\n","     * Static factory method for coercing a lambda to an {@link Fn8}.\n","     *\n","     * @param fn  the lambda to coerce\n","     * @param <A> the first input argument type\n","     * @param <B> the second input argument type\n","     * @param <C> the third input argument type\n","     * @param <D> the fourth input argument type\n","     * @param <E> the fifth input argument type\n","     * @param <F> the sixth input argument type\n","     * @param <G> the seventh input argument type\n","     * @param <H> the eighth input argument type\n","     * @param <I> the output type\n","     * @return the {@link Fn8}\n","     */\n","    static <A, B, C, D, E, F, G, H, I> Fn8<A, B, C, D, E, F, G, H, I> fn8(Fn8<A, B, C, D, E, F, G, H, I> fn) {\n","        return fn;\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions;\n","\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.Fn8.fn8;\n","import static org.hamcrest.core.Is.is;\n","import static org.junit.Assert.assertEquals;\n","import static org.junit.Assert.assertThat;\n","\n","public class Fn8Test {\n","\n","    private static final Fn8<String, String, String, String, String, String, String, String, String> APPEND =\n","            (s1, s2, s3, s4, s5, s6, s7, s8) -> s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8;\n","\n","    @Test\n","    public void canBePartiallyApplied() {\n","        assertThat(APPEND.apply(\"a\").apply(\"b\").apply(\"c\").apply(\"d\").apply(\"e\").apply(\"f\").apply(\"g\").apply(\"h\"), is(\"abcdefgh\"));\n","        assertThat(APPEND.apply(\"a\").apply(\"b\").apply(\"c\").apply(\"d\").apply(\"e\").apply(\"f\").apply(\"g\", \"h\"), is(\"abcdefgh\"));\n","        assertThat(APPEND.apply(\"a\").apply(\"b\").apply(\"c\").apply(\"d\").apply(\"e\").apply(\"f\", \"g\", \"h\"), is(\"abcdefgh\"));\n","        assertThat(APPEND.apply(\"a\").apply(\"b\").apply(\"c\").apply(\"d\").apply(\"e\", \"f\", \"g\", \"h\"), is(\"abcdefgh\"));\n","        assertThat(APPEND.apply(\"a\").apply(\"b\").apply(\"c\").apply(\"d\", \"e\", \"f\", \"g\", \"h\"), is(\"abcdefgh\"));\n","        assertThat(APPEND.apply(\"a\").apply(\"b\").apply(\"c\", \"d\", \"e\", \"f\", \"g\", \"h\"), is(\"abcdefgh\"));\n","        assertThat(APPEND.apply(\"a\").apply(\"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"), is(\"abcdefgh\"));\n","        assertThat(APPEND.apply(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"), is(\"abcdefgh\"));\n","    }\n","\n","    @Test\n","    public void flipsFirstAndSecondArgument() {\n","        assertThat(APPEND.flip().apply(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"), is(\"bacdefgh\"));\n","    }\n","\n","    @Test\n","    public void uncurries() {\n","        assertThat(APPEND.uncurry().apply(tuple(\"a\", \"b\"), \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"), is(\"abcdefgh\"));\n","    }\n","\n","    @Test\n","    public void staticFactoryMethods() {\n","        Fn1<String, Fn7<String, String, String, String, String, String, String, String>> fn1 = a -> (b, c, d, e, f, g, h) -> a + b + c + d + e + f + g + h;\n","        assertEquals(\"abcdefgh\", fn8(fn1).apply(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"));\n","\n","        Fn2<String, String, Fn6<String, String, String, String, String, String, String>> fn2 = (a, b) -> (c, d, e, f, g, h) -> a + b + c + d + e + f + g + h;\n","        assertEquals(\"abcdefgh\", fn8(fn2).apply(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"));\n","\n","        Fn3<String, String, String, Fn5<String, String, String, String, String, String>> fn3 = (a, b, c) -> (d, e, f, g, h) -> a + b + c + d + e + f + g + h;\n","        assertEquals(\"abcdefgh\", fn8(fn3).apply(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"));\n","\n","        Fn4<String, String, String, String, Fn4<String, String, String, String, String>> fn4 = (a, b, c, d) -> (e, f, g, h) -> a + b + c + d + e + f + g + h;\n","        assertEquals(\"abcdefgh\", fn8(fn4).apply(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"));\n","\n","        Fn5<String, String, String, String, String, Fn3<String, String, String, String>> fn5 = (a, b, c, d, e) -> (f, g, h) -> a + b + c + d + e + f + g + h;\n","        assertEquals(\"abcdefgh\", fn8(fn5).apply(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"));\n","\n","        Fn6<String, String, String, String, String, String, Fn2<String, String, String>> fn6 = (a, b, c, d, e, f) -> (g, h) -> a + b + c + d + e + f + g + h;\n","        assertEquals(\"abcdefgh\", fn8(fn6).apply(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"));\n","\n","        Fn7<String, String, String, String, String, String, String, Fn1<String, String>> fn7 = (a, b, c, d, e, f, g) -> (h) -> a + b + c + d + e + f + g + h;\n","        assertEquals(\"abcdefgh\", fn8(fn7).apply(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"));\n","\n","        assertEquals(\"abcdefgh\", Fn8.<String, String, String, String, String, String, String, String, String>fn8((a, b, c, d, e, f, g, h) -> a + b + c + d + e + f + g + h).apply(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"));\n","    }\n","}\n"],"method_lines_dic":{"Fn8::::checkedApply(A,B,C,D,E,F,G,H)":[24,24],"Fn8::::apply(A,B,C,D,E,F,G,H)":[39,45],"Fn8::::checkedApply(A,B,C,D,E,F,G)":[50,53],"Fn8::::apply(A)":[61,64],"Fn8::::apply(A,B)":[73,76],"Fn8::::apply(A,B,C)":[86,89],"Fn8::::apply(A,B,C,D)":[100,103],"Fn8::::apply(A,B,C,D,E)":[115,118],"Fn8::::apply(A,B,C,D,E,F)":[131,134],"Fn8::::apply(A,B,C,D,E,F,G)":[148,151],"Fn8::::flip()":[158,161],"Fn8::::uncurry()":[169,172],"Fn8::::discardR(com.jnape.palatable.lambda.functor.Applicative<J, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)":[174,177],"Fn8::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)":[179,182],"Fn8::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)":[184,187],"Fn8::::compose(com.jnape.palatable.lambda.functions.Fn2<? super Y, ? super Z, ? extends A>)":[189,192],"Fn8::::fn8(com.jnape.palatable.lambda.functions.Fn1<A, com.jnape.palatable.lambda.functions.Fn7<B, C, D, E, F, G, H, I>>)":[209,212],"Fn8::::fn8(com.jnape.palatable.lambda.functions.Fn2<A, B, com.jnape.palatable.lambda.functions.Fn6<C, D, E, F, G, H, I>>)":[229,232],"Fn8::::fn8(com.jnape.palatable.lambda.functions.Fn3<A, B, C, com.jnape.palatable.lambda.functions.Fn5<D, E, F, G, H, I>>)":[249,252],"Fn8::::fn8(com.jnape.palatable.lambda.functions.Fn4<A, B, C, D, com.jnape.palatable.lambda.functions.Fn4<E, F, G, H, I>>)":[269,272],"Fn8::::fn8(com.jnape.palatable.lambda.functions.Fn5<A, B, C, D, E, com.jnape.palatable.lambda.functions.Fn3<F, G, H, I>>)":[289,292],"Fn8::::fn8(com.jnape.palatable.lambda.functions.Fn6<A, B, C, D, E, F, com.jnape.palatable.lambda.functions.Fn2<G, H, I>>)":[309,312],"Fn8::::fn8(com.jnape.palatable.lambda.functions.Fn7<A, B, C, D, E, F, G, com.jnape.palatable.lambda.functions.Fn1<H, I>>)":[329,332],"Fn8::::fn8(com.jnape.palatable.lambda.functions.Fn8<A, B, C, D, E, F, G, H, I>)":[349,351]},"test_method_lines_dic":{"Fn8Test::::canBePartiallyApplied()":[16,26],"Fn8Test::::flipsFirstAndSecondArgument()":[28,31],"Fn8Test::::uncurries()":[33,36],"Fn8Test::::staticFactoryMethods()":[38,62]},"reverse_method_lines_dic":{"24":"Fn8::::checkedApply(A,B,C,D,E,F,G,H)","39":"Fn8::::apply(A,B,C,D,E,F,G,H)","40":"Fn8::::apply(A,B,C,D,E,F,G,H)","41":"Fn8::::apply(A,B,C,D,E,F,G,H)","42":"Fn8::::apply(A,B,C,D,E,F,G,H)","43":"Fn8::::apply(A,B,C,D,E,F,G,H)","44":"Fn8::::apply(A,B,C,D,E,F,G,H)","45":"Fn8::::apply(A,B,C,D,E,F,G,H)","50":"Fn8::::checkedApply(A,B,C,D,E,F,G)","51":"Fn8::::checkedApply(A,B,C,D,E,F,G)","52":"Fn8::::checkedApply(A,B,C,D,E,F,G)","53":"Fn8::::checkedApply(A,B,C,D,E,F,G)","61":"Fn8::::apply(A)","62":"Fn8::::apply(A)","63":"Fn8::::apply(A)","64":"Fn8::::apply(A)","73":"Fn8::::apply(A,B)","74":"Fn8::::apply(A,B)","75":"Fn8::::apply(A,B)","76":"Fn8::::apply(A,B)","86":"Fn8::::apply(A,B,C)","87":"Fn8::::apply(A,B,C)","88":"Fn8::::apply(A,B,C)","89":"Fn8::::apply(A,B,C)","100":"Fn8::::apply(A,B,C,D)","101":"Fn8::::apply(A,B,C,D)","102":"Fn8::::apply(A,B,C,D)","103":"Fn8::::apply(A,B,C,D)","115":"Fn8::::apply(A,B,C,D,E)","116":"Fn8::::apply(A,B,C,D,E)","117":"Fn8::::apply(A,B,C,D,E)","118":"Fn8::::apply(A,B,C,D,E)","131":"Fn8::::apply(A,B,C,D,E,F)","132":"Fn8::::apply(A,B,C,D,E,F)","133":"Fn8::::apply(A,B,C,D,E,F)","134":"Fn8::::apply(A,B,C,D,E,F)","148":"Fn8::::apply(A,B,C,D,E,F,G)","149":"Fn8::::apply(A,B,C,D,E,F,G)","150":"Fn8::::apply(A,B,C,D,E,F,G)","151":"Fn8::::apply(A,B,C,D,E,F,G)","158":"Fn8::::flip()","159":"Fn8::::flip()","160":"Fn8::::flip()","161":"Fn8::::flip()","169":"Fn8::::uncurry()","170":"Fn8::::uncurry()","171":"Fn8::::uncurry()","172":"Fn8::::uncurry()","174":"Fn8::::discardR(com.jnape.palatable.lambda.functor.Applicative<J, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","175":"Fn8::::discardR(com.jnape.palatable.lambda.functor.Applicative<J, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","176":"Fn8::::discardR(com.jnape.palatable.lambda.functor.Applicative<J, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","177":"Fn8::::discardR(com.jnape.palatable.lambda.functor.Applicative<J, com.jnape.palatable.lambda.functions.Fn1<A, ?>>)","179":"Fn8::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","180":"Fn8::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","181":"Fn8::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","182":"Fn8::::diMapL(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","184":"Fn8::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","185":"Fn8::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","186":"Fn8::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","187":"Fn8::::contraMap(com.jnape.palatable.lambda.functions.Fn1<? super Z, ? extends A>)","189":"Fn8::::compose(com.jnape.palatable.lambda.functions.Fn2<? super Y, ? super Z, ? extends A>)","190":"Fn8::::compose(com.jnape.palatable.lambda.functions.Fn2<? super Y, ? super Z, ? extends A>)","191":"Fn8::::compose(com.jnape.palatable.lambda.functions.Fn2<? super Y, ? super Z, ? extends A>)","192":"Fn8::::compose(com.jnape.palatable.lambda.functions.Fn2<? super Y, ? super Z, ? extends A>)","209":"Fn8::::fn8(com.jnape.palatable.lambda.functions.Fn1<A, com.jnape.palatable.lambda.functions.Fn7<B, C, D, E, F, G, H, I>>)","210":"Fn8::::fn8(com.jnape.palatable.lambda.functions.Fn1<A, com.jnape.palatable.lambda.functions.Fn7<B, C, D, E, F, G, H, I>>)","211":"Fn8::::fn8(com.jnape.palatable.lambda.functions.Fn1<A, com.jnape.palatable.lambda.functions.Fn7<B, C, D, E, F, G, H, I>>)","212":"Fn8::::fn8(com.jnape.palatable.lambda.functions.Fn1<A, com.jnape.palatable.lambda.functions.Fn7<B, C, D, E, F, G, H, I>>)","229":"Fn8::::fn8(com.jnape.palatable.lambda.functions.Fn2<A, B, com.jnape.palatable.lambda.functions.Fn6<C, D, E, F, G, H, I>>)","230":"Fn8::::fn8(com.jnape.palatable.lambda.functions.Fn2<A, B, com.jnape.palatable.lambda.functions.Fn6<C, D, E, F, G, H, I>>)","231":"Fn8::::fn8(com.jnape.palatable.lambda.functions.Fn2<A, B, com.jnape.palatable.lambda.functions.Fn6<C, D, E, F, G, H, I>>)","232":"Fn8::::fn8(com.jnape.palatable.lambda.functions.Fn2<A, B, com.jnape.palatable.lambda.functions.Fn6<C, D, E, F, G, H, I>>)","249":"Fn8::::fn8(com.jnape.palatable.lambda.functions.Fn3<A, B, C, com.jnape.palatable.lambda.functions.Fn5<D, E, F, G, H, I>>)","250":"Fn8::::fn8(com.jnape.palatable.lambda.functions.Fn3<A, B, C, com.jnape.palatable.lambda.functions.Fn5<D, E, F, G, H, I>>)","251":"Fn8::::fn8(com.jnape.palatable.lambda.functions.Fn3<A, B, C, com.jnape.palatable.lambda.functions.Fn5<D, E, F, G, H, I>>)","252":"Fn8::::fn8(com.jnape.palatable.lambda.functions.Fn3<A, B, C, com.jnape.palatable.lambda.functions.Fn5<D, E, F, G, H, I>>)","269":"Fn8::::fn8(com.jnape.palatable.lambda.functions.Fn4<A, B, C, D, com.jnape.palatable.lambda.functions.Fn4<E, F, G, H, I>>)","270":"Fn8::::fn8(com.jnape.palatable.lambda.functions.Fn4<A, B, C, D, com.jnape.palatable.lambda.functions.Fn4<E, F, G, H, I>>)","271":"Fn8::::fn8(com.jnape.palatable.lambda.functions.Fn4<A, B, C, D, com.jnape.palatable.lambda.functions.Fn4<E, F, G, H, I>>)","272":"Fn8::::fn8(com.jnape.palatable.lambda.functions.Fn4<A, B, C, D, com.jnape.palatable.lambda.functions.Fn4<E, F, G, H, I>>)","289":"Fn8::::fn8(com.jnape.palatable.lambda.functions.Fn5<A, B, C, D, E, com.jnape.palatable.lambda.functions.Fn3<F, G, H, I>>)","290":"Fn8::::fn8(com.jnape.palatable.lambda.functions.Fn5<A, B, C, D, E, com.jnape.palatable.lambda.functions.Fn3<F, G, H, I>>)","291":"Fn8::::fn8(com.jnape.palatable.lambda.functions.Fn5<A, B, C, D, E, com.jnape.palatable.lambda.functions.Fn3<F, G, H, I>>)","292":"Fn8::::fn8(com.jnape.palatable.lambda.functions.Fn5<A, B, C, D, E, com.jnape.palatable.lambda.functions.Fn3<F, G, H, I>>)","309":"Fn8::::fn8(com.jnape.palatable.lambda.functions.Fn6<A, B, C, D, E, F, com.jnape.palatable.lambda.functions.Fn2<G, H, I>>)","310":"Fn8::::fn8(com.jnape.palatable.lambda.functions.Fn6<A, B, C, D, E, F, com.jnape.palatable.lambda.functions.Fn2<G, H, I>>)","311":"Fn8::::fn8(com.jnape.palatable.lambda.functions.Fn6<A, B, C, D, E, F, com.jnape.palatable.lambda.functions.Fn2<G, H, I>>)","312":"Fn8::::fn8(com.jnape.palatable.lambda.functions.Fn6<A, B, C, D, E, F, com.jnape.palatable.lambda.functions.Fn2<G, H, I>>)","329":"Fn8::::fn8(com.jnape.palatable.lambda.functions.Fn7<A, B, C, D, E, F, G, com.jnape.palatable.lambda.functions.Fn1<H, I>>)","330":"Fn8::::fn8(com.jnape.palatable.lambda.functions.Fn7<A, B, C, D, E, F, G, com.jnape.palatable.lambda.functions.Fn1<H, I>>)","331":"Fn8::::fn8(com.jnape.palatable.lambda.functions.Fn7<A, B, C, D, E, F, G, com.jnape.palatable.lambda.functions.Fn1<H, I>>)","332":"Fn8::::fn8(com.jnape.palatable.lambda.functions.Fn7<A, B, C, D, E, F, G, com.jnape.palatable.lambda.functions.Fn1<H, I>>)","349":"Fn8::::fn8(com.jnape.palatable.lambda.functions.Fn8<A, B, C, D, E, F, G, H, I>)","350":"Fn8::::fn8(com.jnape.palatable.lambda.functions.Fn8<A, B, C, D, E, F, G, H, I>)","351":"Fn8::::fn8(com.jnape.palatable.lambda.functions.Fn8<A, B, C, D, E, F, G, H, I>)"},"test_reverse_method_lines_dic":{"16":"Fn8Test::::canBePartiallyApplied()","17":"Fn8Test::::canBePartiallyApplied()","18":"Fn8Test::::canBePartiallyApplied()","19":"Fn8Test::::canBePartiallyApplied()","20":"Fn8Test::::canBePartiallyApplied()","21":"Fn8Test::::canBePartiallyApplied()","22":"Fn8Test::::canBePartiallyApplied()","23":"Fn8Test::::canBePartiallyApplied()","24":"Fn8Test::::canBePartiallyApplied()","25":"Fn8Test::::canBePartiallyApplied()","26":"Fn8Test::::canBePartiallyApplied()","28":"Fn8Test::::flipsFirstAndSecondArgument()","29":"Fn8Test::::flipsFirstAndSecondArgument()","30":"Fn8Test::::flipsFirstAndSecondArgument()","31":"Fn8Test::::flipsFirstAndSecondArgument()","33":"Fn8Test::::uncurries()","34":"Fn8Test::::uncurries()","35":"Fn8Test::::uncurries()","36":"Fn8Test::::uncurries()","38":"Fn8Test::::staticFactoryMethods()","39":"Fn8Test::::staticFactoryMethods()","40":"Fn8Test::::staticFactoryMethods()","41":"Fn8Test::::staticFactoryMethods()","42":"Fn8Test::::staticFactoryMethods()","43":"Fn8Test::::staticFactoryMethods()","44":"Fn8Test::::staticFactoryMethods()","45":"Fn8Test::::staticFactoryMethods()","46":"Fn8Test::::staticFactoryMethods()","47":"Fn8Test::::staticFactoryMethods()","48":"Fn8Test::::staticFactoryMethods()","49":"Fn8Test::::staticFactoryMethods()","50":"Fn8Test::::staticFactoryMethods()","51":"Fn8Test::::staticFactoryMethods()","52":"Fn8Test::::staticFactoryMethods()","53":"Fn8Test::::staticFactoryMethods()","54":"Fn8Test::::staticFactoryMethods()","55":"Fn8Test::::staticFactoryMethods()","56":"Fn8Test::::staticFactoryMethods()","57":"Fn8Test::::staticFactoryMethods()","58":"Fn8Test::::staticFactoryMethods()","59":"Fn8Test::::staticFactoryMethods()","60":"Fn8Test::::staticFactoryMethods()","61":"Fn8Test::::staticFactoryMethods()","62":"Fn8Test::::staticFactoryMethods()"},"tests":[{"test_lines":[16,26],"covered_lines":[41,63]},{"test_lines":[28,31],"covered_lines":[41,160]},{"test_lines":[33,36],"covered_lines":[41,171]},{"test_lines":[38,62],"covered_lines":[41,211,231,251,271,291,311,331,350]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/recursion/RecursiveResult.java":{"class_content":["package com.jnape.palatable.lambda.functions.recursion;\n","\n","import com.jnape.palatable.lambda.adt.coproduct.CoProduct2;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.specialized.Pure;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","import com.jnape.palatable.lambda.functor.Bifunctor;\n","import com.jnape.palatable.lambda.monad.Monad;\n","import com.jnape.palatable.lambda.monad.MonadRec;\n","import com.jnape.palatable.lambda.traversable.Traversable;\n","\n","import java.util.Objects;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Sequence.sequence;\n","\n","/**\n"," * Specialized {@link CoProduct2} representing the possible results of a primitive recursive function.\n"," * Used by {@link Trampoline} to cheat around {@link CoProduct2#match} and quickly unpack values via\n"," * <code>instanceof</code> checks to package private inner subtypes.\n"," *\n"," * @param <A> the recursive function's input type\n"," * @param <B> the recursive function's output type\n"," * @see Trampoline\n"," */\n","public abstract class RecursiveResult<A, B> implements\n","        CoProduct2<A, B, RecursiveResult<A, B>>,\n","        Bifunctor<A, B, RecursiveResult<?, ?>>,\n","        MonadRec<B, RecursiveResult<A, ?>>,\n","        Traversable<B, RecursiveResult<A, ?>> {\n","\n","    private RecursiveResult() {\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public RecursiveResult<B, A> invert() {\n","        return match(RecursiveResult::terminate, RecursiveResult::recurse);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C> RecursiveResult<C, B> biMapL(Fn1<? super A, ? extends C> fn) {\n","        return (RecursiveResult<C, B>) Bifunctor.super.<C>biMapL(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C> RecursiveResult<A, C> biMapR(Fn1<? super B, ? extends C> fn) {\n","        return (RecursiveResult<A, C>) Bifunctor.super.<C>biMapR(fn);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C, D> RecursiveResult<C, D> biMap(Fn1<? super A, ? extends C> lFn,\n","                                              Fn1<? super B, ? extends D> rFn) {\n","        return match(a -> recurse(lFn.apply(a)), b -> terminate(rFn.apply(b)));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C> RecursiveResult<A, C> flatMap(Fn1<? super B, ? extends Monad<C, RecursiveResult<A, ?>>> f) {\n","        return match(RecursiveResult::recurse, b -> f.apply(b).coerce());\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C> RecursiveResult<A, C> pure(C c) {\n","        return terminate(c);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C> RecursiveResult<A, C> fmap(Fn1<? super B, ? extends C> fn) {\n","        return MonadRec.super.<C>fmap(fn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C> RecursiveResult<A, C> zip(Applicative<Fn1<? super B, ? extends C>, RecursiveResult<A, ?>> appFn) {\n","        return MonadRec.super.zip(appFn).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C> RecursiveResult<A, C> discardL(Applicative<C, RecursiveResult<A, ?>> appB) {\n","        return MonadRec.super.discardL(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C> RecursiveResult<A, B> discardR(Applicative<C, RecursiveResult<A, ?>> appB) {\n","        return MonadRec.super.discardR(appB).coerce();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C> RecursiveResult<A, C> trampolineM(\n","            Fn1<? super B, ? extends MonadRec<RecursiveResult<B, C>, RecursiveResult<A, ?>>> fn) {\n","        return flatMap(Trampoline.<B, RecursiveResult<A, C>>trampoline(\n","                b -> sequence(fn.apply(b).<RecursiveResult<A, RecursiveResult<B, C>>>coerce(),\n","                              RecursiveResult::terminate)));\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public <C, App extends Applicative<?, App>, TravB extends Traversable<C, RecursiveResult<A, ?>>,\n","            AppTrav extends Applicative<TravB, App>> AppTrav traverse(Fn1<? super B, ? extends Applicative<C, App>> fn,\n","                                                                      Fn1<? super TravB, ? extends AppTrav> pure) {\n","        return match(__ -> pure.apply(coerce()),\n","                     b -> fn.apply(b).fmap(this::pure).<TravB>fmap(RecursiveResult::coerce).coerce());\n","    }\n","\n","    /**\n","     * Static factory method for creating a \"recurse\" value.\n","     *\n","     * @param a   the value\n","     * @param <A> the recurse type\n","     * @param <B> the terminate type\n","     * @return the {@link RecursiveResult}\n","     */\n","    public static <A, B> RecursiveResult<A, B> recurse(A a) {\n","        return new Recurse<>(a);\n","    }\n","\n","    /**\n","     * Static factory method for creating a \"terminate\" value.\n","     *\n","     * @param b   the value\n","     * @param <A> the recurse type\n","     * @param <B> the terminate type\n","     * @return the {@link RecursiveResult}\n","     */\n","    public static <A, B> RecursiveResult<A, B> terminate(B b) {\n","        return new Terminate<>(b);\n","    }\n","\n","    /**\n","     * The canonical {@link Pure} instance for {@link RecursiveResult}.\n","     *\n","     * @param <A> the recursive function's input type\n","     * @return the {@link Pure} instance\n","     */\n","    public static <A> Pure<RecursiveResult<A, ?>> pureRecursiveResult() {\n","        return RecursiveResult::terminate;\n","    }\n","\n","    static final class Recurse<A, B> extends RecursiveResult<A, B> {\n","        final A a;\n","\n","        private Recurse(A a) {\n","            this.a = a;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn) {\n","            return aFn.apply(a);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof Recurse && Objects.equals(a, ((Recurse) other).a);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(a);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Recurse{\" +\n","                    \"a=\" + a +\n","                    '}';\n","        }\n","    }\n","\n","    static final class Terminate<A, B> extends RecursiveResult<A, B> {\n","        final B b;\n","\n","        private Terminate(B b) {\n","            this.b = b;\n","        }\n","\n","        @Override\n","        public <R> R match(Fn1<? super A, ? extends R> aFn, Fn1<? super B, ? extends R> bFn) {\n","            return bFn.apply(b);\n","        }\n","\n","        @Override\n","        public boolean equals(Object other) {\n","            return other instanceof Terminate && Objects.equals(b, ((Terminate) other).b);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            return Objects.hash(b);\n","        }\n","\n","        @Override\n","        public String toString() {\n","            return \"Terminate{\" +\n","                    \"b=\" + b +\n","                    '}';\n","        }\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.recursion;\n","\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.framework.Subjects;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.ApplicativeLaws;\n","import testsupport.traits.FunctorLaws;\n","import testsupport.traits.MonadLaws;\n","import testsupport.traits.MonadRecLaws;\n","import testsupport.traits.TraversableLaws;\n","\n","import static com.jnape.palatable.lambda.functions.recursion.RecursiveResult.recurse;\n","import static com.jnape.palatable.lambda.functions.recursion.RecursiveResult.terminate;\n","import static com.jnape.palatable.traitor.framework.Subjects.subjects;\n","import static org.junit.Assert.assertEquals;\n","\n","@RunWith(Traits.class)\n","public class RecursiveResultTest {\n","\n","    @TestTraits({FunctorLaws.class, ApplicativeLaws.class, MonadLaws.class, TraversableLaws.class, MonadRecLaws.class})\n","    public Subjects<RecursiveResult<String, Integer>> testSubject() {\n","        return subjects(recurse(\"foo\"), terminate(1));\n","    }\n","\n","    @Test\n","    public void staticPure() {\n","        RecursiveResult<String, Integer> recursiveResult = RecursiveResult.<String>pureRecursiveResult().apply(1);\n","        assertEquals(terminate(1), recursiveResult);\n","    }\n","}"],"method_lines_dic":{"RecursiveResult::::invert()":[37,40],"RecursiveResult::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>)":[45,48],"RecursiveResult::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)":[53,56],"RecursiveResult::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends D>)":[61,65],"RecursiveResult::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.Monad<C, com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, ?>>>)":[70,73],"RecursiveResult::::pure(C)":[78,81],"RecursiveResult::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)":[86,89],"RecursiveResult::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, ?>>)":[94,97],"RecursiveResult::::discardL(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, ?>>)":[102,105],"RecursiveResult::::discardR(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, ?>>)":[110,113],"RecursiveResult::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, ?>>>)":[118,124],"RecursiveResult::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)":[129,135],"RecursiveResult::::recurse(A)":[145,147],"RecursiveResult::::terminate(B)":[157,159],"RecursiveResult::::pureRecursiveResult()":[167,169],"RecursiveResult.Recurse::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>)":[178,181],"RecursiveResult.Recurse::::equals(java.lang.Object)":[183,186],"RecursiveResult.Recurse::::hashCode()":[188,191],"RecursiveResult.Recurse::::toString()":[193,198],"RecursiveResult.Terminate::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>)":[208,211],"RecursiveResult.Terminate::::equals(java.lang.Object)":[213,216],"RecursiveResult.Terminate::::hashCode()":[218,221],"RecursiveResult.Terminate::::toString()":[223,228]},"test_method_lines_dic":{"RecursiveResultTest::::testSubject()":[22,25],"RecursiveResultTest::::staticPure()":[27,31]},"reverse_method_lines_dic":{"37":"RecursiveResult::::invert()","38":"RecursiveResult::::invert()","39":"RecursiveResult::::invert()","40":"RecursiveResult::::invert()","45":"RecursiveResult::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>)","46":"RecursiveResult::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>)","47":"RecursiveResult::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>)","48":"RecursiveResult::::biMapL(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>)","53":"RecursiveResult::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","54":"RecursiveResult::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","55":"RecursiveResult::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","56":"RecursiveResult::::biMapR(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","61":"RecursiveResult::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends D>)","62":"RecursiveResult::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends D>)","63":"RecursiveResult::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends D>)","64":"RecursiveResult::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends D>)","65":"RecursiveResult::::biMap(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends D>)","70":"RecursiveResult::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.Monad<C, com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, ?>>>)","71":"RecursiveResult::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.Monad<C, com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, ?>>>)","72":"RecursiveResult::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.Monad<C, com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, ?>>>)","73":"RecursiveResult::::flatMap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.Monad<C, com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, ?>>>)","78":"RecursiveResult::::pure(C)","79":"RecursiveResult::::pure(C)","80":"RecursiveResult::::pure(C)","81":"RecursiveResult::::pure(C)","86":"RecursiveResult::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","87":"RecursiveResult::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","88":"RecursiveResult::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","89":"RecursiveResult::::fmap(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>)","94":"RecursiveResult::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, ?>>)","95":"RecursiveResult::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, ?>>)","96":"RecursiveResult::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, ?>>)","97":"RecursiveResult::::zip(com.jnape.palatable.lambda.functor.Applicative<com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends C>, com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, ?>>)","102":"RecursiveResult::::discardL(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, ?>>)","103":"RecursiveResult::::discardL(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, ?>>)","104":"RecursiveResult::::discardL(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, ?>>)","105":"RecursiveResult::::discardL(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, ?>>)","110":"RecursiveResult::::discardR(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, ?>>)","111":"RecursiveResult::::discardR(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, ?>>)","112":"RecursiveResult::::discardR(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, ?>>)","113":"RecursiveResult::::discardR(com.jnape.palatable.lambda.functor.Applicative<C, com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, ?>>)","118":"RecursiveResult::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, ?>>>)","119":"RecursiveResult::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, ?>>>)","120":"RecursiveResult::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, ?>>>)","121":"RecursiveResult::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, ?>>>)","122":"RecursiveResult::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, ?>>>)","123":"RecursiveResult::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, ?>>>)","124":"RecursiveResult::::trampolineM(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.monad.MonadRec<com.jnape.palatable.lambda.functions.recursion.RecursiveResult<B, C>, com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, ?>>>)","129":"RecursiveResult::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","130":"RecursiveResult::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","131":"RecursiveResult::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","132":"RecursiveResult::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","133":"RecursiveResult::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","134":"RecursiveResult::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","135":"RecursiveResult::::traverse(com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends com.jnape.palatable.lambda.functor.Applicative<C, App>>,com.jnape.palatable.lambda.functions.Fn1<? super TravB, ? extends AppTrav>)","145":"RecursiveResult::::recurse(A)","146":"RecursiveResult::::recurse(A)","147":"RecursiveResult::::recurse(A)","157":"RecursiveResult::::terminate(B)","158":"RecursiveResult::::terminate(B)","159":"RecursiveResult::::terminate(B)","167":"RecursiveResult::::pureRecursiveResult()","168":"RecursiveResult::::pureRecursiveResult()","169":"RecursiveResult::::pureRecursiveResult()","178":"RecursiveResult.Recurse::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>)","179":"RecursiveResult.Recurse::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>)","180":"RecursiveResult.Recurse::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>)","181":"RecursiveResult.Recurse::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>)","183":"RecursiveResult.Recurse::::equals(java.lang.Object)","184":"RecursiveResult.Recurse::::equals(java.lang.Object)","185":"RecursiveResult.Recurse::::equals(java.lang.Object)","186":"RecursiveResult.Recurse::::equals(java.lang.Object)","188":"RecursiveResult.Recurse::::hashCode()","189":"RecursiveResult.Recurse::::hashCode()","190":"RecursiveResult.Recurse::::hashCode()","191":"RecursiveResult.Recurse::::hashCode()","193":"RecursiveResult.Recurse::::toString()","194":"RecursiveResult.Recurse::::toString()","195":"RecursiveResult.Recurse::::toString()","196":"RecursiveResult.Recurse::::toString()","197":"RecursiveResult.Recurse::::toString()","198":"RecursiveResult.Recurse::::toString()","208":"RecursiveResult.Terminate::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>)","209":"RecursiveResult.Terminate::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>)","210":"RecursiveResult.Terminate::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>)","211":"RecursiveResult.Terminate::::match(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends R>,com.jnape.palatable.lambda.functions.Fn1<? super B, ? extends R>)","213":"RecursiveResult.Terminate::::equals(java.lang.Object)","214":"RecursiveResult.Terminate::::equals(java.lang.Object)","215":"RecursiveResult.Terminate::::equals(java.lang.Object)","216":"RecursiveResult.Terminate::::equals(java.lang.Object)","218":"RecursiveResult.Terminate::::hashCode()","219":"RecursiveResult.Terminate::::hashCode()","220":"RecursiveResult.Terminate::::hashCode()","221":"RecursiveResult.Terminate::::hashCode()","223":"RecursiveResult.Terminate::::toString()","224":"RecursiveResult.Terminate::::toString()","225":"RecursiveResult.Terminate::::toString()","226":"RecursiveResult.Terminate::::toString()","227":"RecursiveResult.Terminate::::toString()","228":"RecursiveResult.Terminate::::toString()"},"test_reverse_method_lines_dic":{"22":"RecursiveResultTest::::testSubject()","23":"RecursiveResultTest::::testSubject()","24":"RecursiveResultTest::::testSubject()","25":"RecursiveResultTest::::testSubject()","27":"RecursiveResultTest::::staticPure()","28":"RecursiveResultTest::::staticPure()","29":"RecursiveResultTest::::staticPure()","30":"RecursiveResultTest::::staticPure()","31":"RecursiveResultTest::::staticPure()"},"tests":[{"test_lines":[22,25],"covered_lines":[31,32,146,158,174,175,176,204,205,206]},{"test_lines":[27,31],"covered_lines":[31,32,146,158,168,174,175,176,204,205,206,215]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/recursion/Trampoline.java":{"class_content":["package com.jnape.palatable.lambda.functions.recursion;\n","\n","import com.jnape.palatable.lambda.adt.coproduct.CoProduct2;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","import com.jnape.palatable.lambda.functions.builtin.fn2.Unfoldr;\n","import com.jnape.palatable.lambda.functions.recursion.RecursiveResult.Recurse;\n","import com.jnape.palatable.lambda.functions.recursion.RecursiveResult.Terminate;\n","\n","/**\n"," * Given an <code>{@link Fn1}&lt;A, {@link CoProduct2}&lt;A, B, ?&gt;&gt;</code> (analogous to \"recurse\" and \"return\"\n"," * tail position instructions, respectively), produce a <code>{@link Fn1}&lt;A, B&gt;</code> that unrolls the original\n"," * function by iteratively passing each result that matches the input (<code>A</code>) back to the original function,\n"," * and then terminating on and returning the first output (<code>B</code>).\n"," * <p>\n"," * This is isomorphic to - though presumably faster than - taking the last element of an {@link Unfoldr} call.\n"," *\n"," * @param <A> the trampolined function's input type\n"," * @param <B> the trampolined function's output type\n"," */\n","public final class Trampoline<A, B> implements Fn2<Fn1<? super A, ? extends RecursiveResult<A, B>>, A, B> {\n","\n","    private static final Trampoline<?, ?> INSTANCE = new Trampoline<>();\n","\n","    @Override\n","    public B checkedApply(Fn1<? super A, ? extends RecursiveResult<A, B>> fn, A a) {\n","        RecursiveResult<A, B> next = fn.apply(a);\n","        while (next instanceof Recurse)\n","            next = fn.apply(((Recurse<A, B>) next).a);\n","        return ((Terminate<A, B>) next).b;\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A, B> Trampoline<A, B> trampoline() {\n","        return (Trampoline<A, B>) INSTANCE;\n","    }\n","\n","    public static <A, B> Fn1<A, B> trampoline(Fn1<? super A, ? extends RecursiveResult<A, B>> fn) {\n","        return Trampoline.<A, B>trampoline().apply(fn);\n","    }\n","\n","    public static <A, B> B trampoline(Fn1<? super A, ? extends RecursiveResult<A, B>> fn, A a) {\n","        return trampoline(fn).apply(a);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.recursion;\n","\n","import com.jnape.palatable.lambda.adt.hlist.Tuple2;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import org.junit.Test;\n","\n","import java.math.BigInteger;\n","import java.util.Map;\n","\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Into.into;\n","import static com.jnape.palatable.lambda.functions.recursion.RecursiveResult.recurse;\n","import static com.jnape.palatable.lambda.functions.recursion.RecursiveResult.terminate;\n","import static com.jnape.palatable.lambda.functions.recursion.Trampoline.trampoline;\n","import static java.math.BigInteger.ONE;\n","import static org.junit.Assert.assertEquals;\n","\n","public class TrampolineTest {\n","\n","    private static final\n","    Fn1<Map.Entry<BigInteger, BigInteger>, RecursiveResult<Tuple2<BigInteger, BigInteger>, BigInteger>> FACTORIAL =\n","            into((x, acc) -> x.compareTo(ONE) > 0 ? recurse(tuple(x.subtract(ONE), x.multiply(acc))) : terminate(acc));\n","\n","    @Test\n","    public void trampolinesCompatibleFunctionIntoResult() {\n","        assertEquals(BigInteger.valueOf(3628800), trampoline(FACTORIAL, tuple(BigInteger.valueOf(10), ONE)));\n","    }\n","\n","    @Test\n","    public void stackSafety() {\n","        trampoline(FACTORIAL, tuple(BigInteger.valueOf(10000), ONE));\n","    }\n","}"],"method_lines_dic":{"Trampoline::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>>,A)":[25,31],"Trampoline::::trampoline()":[33,36],"Trampoline::::trampoline(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>>)":[38,40],"Trampoline::::trampoline(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>>,A)":[42,44]},"test_method_lines_dic":{"TrampolineTest::::trampolinesCompatibleFunctionIntoResult()":[24,27],"TrampolineTest::::stackSafety()":[29,32]},"reverse_method_lines_dic":{"25":"Trampoline::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>>,A)","26":"Trampoline::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>>,A)","27":"Trampoline::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>>,A)","28":"Trampoline::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>>,A)","29":"Trampoline::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>>,A)","30":"Trampoline::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>>,A)","31":"Trampoline::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>>,A)","33":"Trampoline::::trampoline()","34":"Trampoline::::trampoline()","35":"Trampoline::::trampoline()","36":"Trampoline::::trampoline()","38":"Trampoline::::trampoline(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>>)","39":"Trampoline::::trampoline(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>>)","40":"Trampoline::::trampoline(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>>)","42":"Trampoline::::trampoline(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>>,A)","43":"Trampoline::::trampoline(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>>,A)","44":"Trampoline::::trampoline(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.functions.recursion.RecursiveResult<A, B>>,A)"},"test_reverse_method_lines_dic":{"24":"TrampolineTest::::trampolinesCompatibleFunctionIntoResult()","25":"TrampolineTest::::trampolinesCompatibleFunctionIntoResult()","26":"TrampolineTest::::trampolinesCompatibleFunctionIntoResult()","27":"TrampolineTest::::trampolinesCompatibleFunctionIntoResult()","29":"TrampolineTest::::stackSafety()","30":"TrampolineTest::::stackSafety()","31":"TrampolineTest::::stackSafety()","32":"TrampolineTest::::stackSafety()"},"tests":[{"test_lines":[24,27],"covered_lines":[21,23,27,28,29,30,35,39,43]},{"test_lines":[29,32],"covered_lines":[21,23,27,28,29,30,35,39,43]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn1/Constantly.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","\n","/**\n"," * A function that takes two arguments and always returns the first argument.\n"," *\n"," * @param <A> The first argument type, and the the function's return type\n"," * @param <B> The second (ignored) argument type\n"," */\n","public final class Constantly<A, B> implements Fn2<A, B, A> {\n","\n","    private static final Constantly<?, ?> INSTANCE = new Constantly<>();\n","\n","    private Constantly() {\n","    }\n","\n","    @Override\n","    public A checkedApply(A a, B b) {\n","        return a;\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A, B> Constantly<A, B> constantly() {\n","        return (Constantly<A, B>) INSTANCE;\n","    }\n","\n","    public static <A, B> Fn1<B, A> constantly(A a) {\n","        return Constantly.<A, B>constantly().apply(a);\n","    }\n","\n","    public static <A, B> A constantly(A a, B b) {\n","        return constantly(a).apply(b);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","import static org.hamcrest.core.Is.is;\n","import static org.junit.Assert.assertThat;\n","\n","public class ConstantlyTest {\n","\n","    @Test\n","    public void returnsConstantOutputRegardlessOfInput() {\n","        Object anything = \"doesn't matter\";\n","        assertThat(constantly(\"yes\").apply(anything), is(\"yes\"));\n","    }\n","}\n"],"method_lines_dic":{"Constantly::::checkedApply(A,B)":[19,22],"Constantly::::constantly()":[24,27],"Constantly::::constantly(A)":[29,31],"Constantly::::constantly(A,B)":[33,35]},"test_method_lines_dic":{"ConstantlyTest::::returnsConstantOutputRegardlessOfInput()":[11,15]},"reverse_method_lines_dic":{"19":"Constantly::::checkedApply(A,B)","20":"Constantly::::checkedApply(A,B)","21":"Constantly::::checkedApply(A,B)","22":"Constantly::::checkedApply(A,B)","24":"Constantly::::constantly()","25":"Constantly::::constantly()","26":"Constantly::::constantly()","27":"Constantly::::constantly()","29":"Constantly::::constantly(A)","30":"Constantly::::constantly(A)","31":"Constantly::::constantly(A)","33":"Constantly::::constantly(A,B)","34":"Constantly::::constantly(A,B)","35":"Constantly::::constantly(A,B)"},"test_reverse_method_lines_dic":{"11":"ConstantlyTest::::returnsConstantOutputRegardlessOfInput()","12":"ConstantlyTest::::returnsConstantOutputRegardlessOfInput()","13":"ConstantlyTest::::returnsConstantOutputRegardlessOfInput()","14":"ConstantlyTest::::returnsConstantOutputRegardlessOfInput()","15":"ConstantlyTest::::returnsConstantOutputRegardlessOfInput()"},"tests":[{"test_lines":[11,15],"covered_lines":[14,16,17,21,26,30]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn1/Flatten.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.internal.iteration.FlatteningIterator;\n","\n","/**\n"," * Given a nested {@link Iterable} of {@link Iterable}s, return a lazily flattening {@link Iterable}\n"," * of the nested elements.\n"," *\n"," * @param <A> the nested Iterable element type\n"," */\n","public final class Flatten<A> implements Fn1<Iterable<? extends Iterable<? extends A>>, Iterable<A>> {\n","    private static final Flatten<?> INSTANCE = new Flatten<>();\n","\n","    private Flatten() {\n","    }\n","\n","    @Override\n","    public Iterable<A> checkedApply(Iterable<? extends Iterable<? extends A>> iterables) {\n","        return () -> new FlatteningIterator<>(iterables.iterator());\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> Flatten<A> flatten() {\n","        return (Flatten<A>) INSTANCE;\n","    }\n","\n","    public static <A> Iterable<A> flatten(Iterable<? extends Iterable<? extends A>> as) {\n","        return Flatten.<A>flatten().apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.builtin.fn2.Map;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.EmptyIterableSupport;\n","import testsupport.traits.FiniteIteration;\n","import testsupport.traits.InfiniteIterableSupport;\n","import testsupport.traits.Laziness;\n","\n","import java.util.Collection;\n","import java.util.Collections;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Flatten.flatten;\n","import static java.util.Arrays.asList;\n","import static java.util.Collections.emptyList;\n","import static java.util.Collections.singleton;\n","import static java.util.Collections.singletonList;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IterableMatcher.isEmpty;\n","import static testsupport.matchers.IterableMatcher.iterates;\n","\n","@RunWith(Traits.class)\n","public class FlattenTest {\n","\n","    @TestTraits({Laziness.class, InfiniteIterableSupport.class, EmptyIterableSupport.class, FiniteIteration.class})\n","    public Fn1<Iterable<Integer>, Iterable<Integer>> testSubject() {\n","        return Flatten.<Integer>flatten().contraMap(Map.<Integer, Collection<Integer>>map(Collections::singletonList));\n","    }\n","\n","    @Test\n","    public void flattensIterableOfEmptyIterables() {\n","        assertThat(flatten(asList(emptyList(), emptyList())), isEmpty());\n","    }\n","\n","    @Test\n","    public void flattensSparseIterableOfPopulatedIterables() {\n","        assertThat(flatten(asList(emptyList(), asList(1, 2, 3), emptyList(), emptyList(), singleton(4), asList(5, 6), emptyList())),\n","                   iterates(1, 2, 3, 4, 5, 6));\n","    }\n","\n","    @Test\n","    public void flattenMultipleLevelsOfNesting() {\n","        assertThat(flatten(asList(asList(asList(1, 2, 3), asList(4, 5)), singletonList(asList(6, 7)))),\n","                   iterates(asList(1, 2, 3), asList(4, 5), asList(6, 7)));\n","    }\n","}"],"method_lines_dic":{"Flatten::::checkedApply(java.lang.Iterable<? extends java.lang.Iterable<? extends A>>)":[18,21],"Flatten::::flatten()":[23,26],"Flatten::::flatten(java.lang.Iterable<? extends java.lang.Iterable<? extends A>>)":[28,30]},"test_method_lines_dic":{"FlattenTest::::testSubject()":[29,32],"FlattenTest::::flattensIterableOfEmptyIterables()":[34,37],"FlattenTest::::flattensSparseIterableOfPopulatedIterables()":[39,43],"FlattenTest::::flattenMultipleLevelsOfNesting()":[45,49]},"reverse_method_lines_dic":{"18":"Flatten::::checkedApply(java.lang.Iterable<? extends java.lang.Iterable<? extends A>>)","19":"Flatten::::checkedApply(java.lang.Iterable<? extends java.lang.Iterable<? extends A>>)","20":"Flatten::::checkedApply(java.lang.Iterable<? extends java.lang.Iterable<? extends A>>)","21":"Flatten::::checkedApply(java.lang.Iterable<? extends java.lang.Iterable<? extends A>>)","23":"Flatten::::flatten()","24":"Flatten::::flatten()","25":"Flatten::::flatten()","26":"Flatten::::flatten()","28":"Flatten::::flatten(java.lang.Iterable<? extends java.lang.Iterable<? extends A>>)","29":"Flatten::::flatten(java.lang.Iterable<? extends java.lang.Iterable<? extends A>>)","30":"Flatten::::flatten(java.lang.Iterable<? extends java.lang.Iterable<? extends A>>)"},"test_reverse_method_lines_dic":{"29":"FlattenTest::::testSubject()","30":"FlattenTest::::testSubject()","31":"FlattenTest::::testSubject()","32":"FlattenTest::::testSubject()","34":"FlattenTest::::flattensIterableOfEmptyIterables()","35":"FlattenTest::::flattensIterableOfEmptyIterables()","36":"FlattenTest::::flattensIterableOfEmptyIterables()","37":"FlattenTest::::flattensIterableOfEmptyIterables()","39":"FlattenTest::::flattensSparseIterableOfPopulatedIterables()","40":"FlattenTest::::flattensSparseIterableOfPopulatedIterables()","41":"FlattenTest::::flattensSparseIterableOfPopulatedIterables()","42":"FlattenTest::::flattensSparseIterableOfPopulatedIterables()","43":"FlattenTest::::flattensSparseIterableOfPopulatedIterables()","45":"FlattenTest::::flattenMultipleLevelsOfNesting()","46":"FlattenTest::::flattenMultipleLevelsOfNesting()","47":"FlattenTest::::flattenMultipleLevelsOfNesting()","48":"FlattenTest::::flattenMultipleLevelsOfNesting()","49":"FlattenTest::::flattenMultipleLevelsOfNesting()"},"tests":[{"test_lines":[29,32],"covered_lines":[13,15,16,25]},{"test_lines":[34,37],"covered_lines":[13,15,16,20,25,29]},{"test_lines":[39,43],"covered_lines":[13,15,16,20,25,29]},{"test_lines":[45,49],"covered_lines":[13,15,16,20,25,29]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn1/Upcast.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","\n","/**\n"," * Upcast a value of type <code>B</code> to a value of type <code>A</code> that <code>B</code> extends. This is\n"," * principally useful when dealing with parametric types that are invariant in their parameters and a cast is\n"," * necessary for compatibility purposes.\n"," * <p>\n"," * Example:\n"," * <pre>\n"," * {@code\n"," * Iterable<String> have = new ArrayList<>();\n"," * Iterable<CharSequence> want = map(upcast(), have); // necessary due to invariance in parameter\n"," * }\n"," * </pre>\n"," * <p>\n"," * Note that this is universally safe.\n"," *\n"," * @param <A> the covariant type\n"," * @param <B> the contravariant type\n"," */\n","public final class Upcast<A extends B, B> implements Fn1<A, B> {\n","\n","    private static final Upcast<?, ?> INSTANCE = new Upcast<>();\n","\n","    private Upcast() {\n","    }\n","\n","    @Override\n","    public B checkedApply(A a) {\n","        return a;\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A extends B, B> Upcast<A, B> upcast() {\n","        return (Upcast<A, B>) INSTANCE;\n","    }\n","\n","    public static <A extends B, B> B upcast(A a) {\n","        return Upcast.<A, B>upcast().apply(a);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Upcast.upcast;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Map.map;\n","import static java.util.Arrays.asList;\n","\n","public class UpcastTest {\n","\n","    @Test\n","    @SuppressWarnings(\"unused\")\n","    public void castsUp() {\n","        Upcast<String, CharSequence> upcast        = upcast();\n","        Iterable<String>             strings       = asList(\"foo\", \"bar\");\n","        Iterable<CharSequence>       charSequences = map(upcast, strings);\n","    }\n","}"],"method_lines_dic":{"Upcast::::checkedApply(A)":[30,33],"Upcast::::upcast()":[35,38],"Upcast::::upcast(A)":[40,42]},"test_method_lines_dic":{"UpcastTest::::castsUp()":[11,17]},"reverse_method_lines_dic":{"30":"Upcast::::checkedApply(A)","31":"Upcast::::checkedApply(A)","32":"Upcast::::checkedApply(A)","33":"Upcast::::checkedApply(A)","35":"Upcast::::upcast()","36":"Upcast::::upcast()","37":"Upcast::::upcast()","38":"Upcast::::upcast()","40":"Upcast::::upcast(A)","41":"Upcast::::upcast(A)","42":"Upcast::::upcast(A)"},"test_reverse_method_lines_dic":{"11":"UpcastTest::::castsUp()","12":"UpcastTest::::castsUp()","13":"UpcastTest::::castsUp()","14":"UpcastTest::::castsUp()","15":"UpcastTest::::castsUp()","16":"UpcastTest::::castsUp()","17":"UpcastTest::::castsUp()"},"tests":[{"test_lines":[11,17],"covered_lines":[25,27,28,37]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn1/Empty.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.lambda.functions.specialized.Predicate;\n","\n","/**\n"," * A predicate that returns true if <code>as</code> is empty; false otherwise.\n"," *\n"," * @param <A> the iterable element type\n"," */\n","public final class Empty<A> implements Predicate<Iterable<A>> {\n","\n","    private static final Empty<?> INSTANCE = new Empty<>();\n","\n","    private Empty() {\n","    }\n","\n","    @Override\n","    public Boolean checkedApply(Iterable<A> as) {\n","        return !as.iterator().hasNext();\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> Empty<A> empty() {\n","        return (Empty<A>) INSTANCE;\n","    }\n","\n","    public static <A> Boolean empty(Iterable<A> as) {\n","        return Empty.<A>empty().apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Empty.empty;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Repeat.repeat;\n","import static java.util.Collections.emptySet;\n","import static java.util.Collections.singleton;\n","import static org.junit.Assert.assertFalse;\n","import static org.junit.Assert.assertTrue;\n","\n","public class EmptyTest {\n","\n","    @Test\n","    public void emptiness() {\n","        Empty<Object> empty = empty();\n","\n","        assertTrue(empty.apply(emptySet()));\n","        assertFalse(empty.apply(singleton(1)));\n","        assertFalse(empty.apply(repeat(1)));\n","    }\n","}"],"method_lines_dic":{"Empty::::checkedApply(java.lang.Iterable<A>)":[17,20],"Empty::::empty()":[22,25],"Empty::::empty(java.lang.Iterable<A>)":[27,29]},"test_method_lines_dic":{"EmptyTest::::emptiness()":[14,21]},"reverse_method_lines_dic":{"17":"Empty::::checkedApply(java.lang.Iterable<A>)","18":"Empty::::checkedApply(java.lang.Iterable<A>)","19":"Empty::::checkedApply(java.lang.Iterable<A>)","20":"Empty::::checkedApply(java.lang.Iterable<A>)","22":"Empty::::empty()","23":"Empty::::empty()","24":"Empty::::empty()","25":"Empty::::empty()","27":"Empty::::empty(java.lang.Iterable<A>)","28":"Empty::::empty(java.lang.Iterable<A>)","29":"Empty::::empty(java.lang.Iterable<A>)"},"test_reverse_method_lines_dic":{"14":"EmptyTest::::emptiness()","15":"EmptyTest::::emptiness()","16":"EmptyTest::::emptiness()","17":"EmptyTest::::emptiness()","18":"EmptyTest::::emptiness()","19":"EmptyTest::::emptiness()","20":"EmptyTest::::emptiness()","21":"EmptyTest::::emptiness()"},"tests":[{"test_lines":[14,21],"covered_lines":[12,14,15,19,24]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn1/Uncons.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.adt.hlist.Tuple2;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Head.head;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Tail.tail;\n","\n","/**\n"," * Destructure an {@link Iterable} into a {@link Tuple2} of its head and tail, wrapped in an {@link Maybe}. If the\n"," * {@link Iterable} is empty, returns {@link Maybe#nothing()}.\n"," *\n"," * @param <A> the Iterable element type\n"," */\n","public final class Uncons<A> implements Fn1<Iterable<A>, Maybe<Tuple2<A, Iterable<A>>>> {\n","\n","    private static final Uncons<?> INSTANCE = new Uncons<>();\n","\n","    private Uncons() {\n","    }\n","\n","    @Override\n","    public Maybe<Tuple2<A, Iterable<A>>> checkedApply(Iterable<A> as) {\n","        return head(as).fmap(a -> tuple(a, tail(as)));\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> Uncons<A> uncons() {\n","        return (Uncons<A>) INSTANCE;\n","    }\n","\n","    public static <A> Maybe<Tuple2<A, Iterable<A>>> uncons(Iterable<A> as) {\n","        return Uncons.<A>uncons().apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.lambda.adt.hlist.Tuple2;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.EmptyIterableSupport;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Uncons.uncons;\n","import static java.util.Arrays.asList;\n","import static java.util.Collections.emptyList;\n","import static org.junit.Assert.assertEquals;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IterableMatcher.iterates;\n","\n","@RunWith(Traits.class)\n","public class UnconsTest {\n","\n","    @TestTraits({EmptyIterableSupport.class})\n","    public Uncons<?> testSubject() {\n","        return uncons();\n","    }\n","\n","    @Test\n","    public void nonEmptyIterable() {\n","        Iterable<Integer>                  numbers     = asList(1, 2, 3);\n","        Tuple2<Integer, Iterable<Integer>> headAndTail = uncons(numbers).orElseThrow(AssertionError::new);\n","\n","        assertEquals((Integer) 1, headAndTail._1());\n","        assertThat(headAndTail._2(), iterates(2, 3));\n","    }\n","\n","    @Test\n","    public void emptyIterable() {\n","        assertEquals(nothing(), uncons(emptyList()));\n","    }\n","}"],"method_lines_dic":{"Uncons::::checkedApply(java.lang.Iterable<A>)":[24,27],"Uncons::::uncons()":[29,32],"Uncons::::uncons(java.lang.Iterable<A>)":[34,36]},"test_method_lines_dic":{"UnconsTest::::testSubject()":[21,24],"UnconsTest::::nonEmptyIterable()":[26,33],"UnconsTest::::emptyIterable()":[35,38]},"reverse_method_lines_dic":{"24":"Uncons::::checkedApply(java.lang.Iterable<A>)","25":"Uncons::::checkedApply(java.lang.Iterable<A>)","26":"Uncons::::checkedApply(java.lang.Iterable<A>)","27":"Uncons::::checkedApply(java.lang.Iterable<A>)","29":"Uncons::::uncons()","30":"Uncons::::uncons()","31":"Uncons::::uncons()","32":"Uncons::::uncons()","34":"Uncons::::uncons(java.lang.Iterable<A>)","35":"Uncons::::uncons(java.lang.Iterable<A>)","36":"Uncons::::uncons(java.lang.Iterable<A>)"},"test_reverse_method_lines_dic":{"21":"UnconsTest::::testSubject()","22":"UnconsTest::::testSubject()","23":"UnconsTest::::testSubject()","24":"UnconsTest::::testSubject()","26":"UnconsTest::::nonEmptyIterable()","27":"UnconsTest::::nonEmptyIterable()","28":"UnconsTest::::nonEmptyIterable()","29":"UnconsTest::::nonEmptyIterable()","30":"UnconsTest::::nonEmptyIterable()","31":"UnconsTest::::nonEmptyIterable()","32":"UnconsTest::::nonEmptyIterable()","33":"UnconsTest::::nonEmptyIterable()","35":"UnconsTest::::emptyIterable()","36":"UnconsTest::::emptyIterable()","37":"UnconsTest::::emptyIterable()","38":"UnconsTest::::emptyIterable()"},"tests":[{"test_lines":[21,24],"covered_lines":[19,21,22,31]},{"test_lines":[26,33],"covered_lines":[19,21,22,26,31,35]},{"test_lines":[35,38],"covered_lines":[19,21,22,26,31,35]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn1/Init.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.internal.iteration.InitIterator;\n","\n","/**\n"," * Given an <code>{@link Iterable}&lt;A&gt;</code>, produce an\n"," * <code>{@link Iterable}&lt;A&gt;</code> of all elements but the last one.\n"," *\n"," * @param <A> the Iterable element type\n"," */\n","public final class Init<A> implements Fn1<Iterable<A>, Iterable<A>> {\n","\n","    private static final Init<?> INSTANCE = new Init<>();\n","\n","    private Init() {\n","    }\n","\n","    @Override\n","    public Iterable<A> checkedApply(Iterable<A> as) {\n","        return () -> new InitIterator<>(as);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> Init<A> init() {\n","        return (Init<A>) INSTANCE;\n","    }\n","\n","    public static <A> Iterable<A> init(Iterable<A> as) {\n","        return Init.<A>init().apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.EmptyIterableSupport;\n","import testsupport.traits.FiniteIteration;\n","import testsupport.traits.ImmutableIteration;\n","import testsupport.traits.InfiniteIterableSupport;\n","import testsupport.traits.Laziness;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Init.init;\n","import static java.util.Arrays.asList;\n","import static java.util.Collections.emptyList;\n","import static java.util.Collections.singletonList;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IterableMatcher.isEmpty;\n","import static testsupport.matchers.IterableMatcher.iterates;\n","\n","@RunWith(Traits.class)\n","public class InitTest {\n","\n","    @TestTraits({EmptyIterableSupport.class, InfiniteIterableSupport.class, Laziness.class, ImmutableIteration.class, FiniteIteration.class})\n","    public Fn1<? extends Iterable<?>, ? extends Iterable<?>> testSubject() {\n","        return init();\n","    }\n","\n","    @Test\n","    public void empty() {\n","        assertThat(init(emptyList()), isEmpty());\n","    }\n","\n","    @Test\n","    public void nonEmpty() {\n","        assertThat(init(singletonList(1)), isEmpty());\n","        assertThat(init(asList(1, 2, 3)), iterates(1, 2));\n","    }\n","}"],"method_lines_dic":{"Init::::checkedApply(java.lang.Iterable<A>)":[19,22],"Init::::init()":[24,27],"Init::::init(java.lang.Iterable<A>)":[29,31]},"test_method_lines_dic":{"InitTest::::testSubject()":[25,28],"InitTest::::empty()":[30,33],"InitTest::::nonEmpty()":[35,39]},"reverse_method_lines_dic":{"19":"Init::::checkedApply(java.lang.Iterable<A>)","20":"Init::::checkedApply(java.lang.Iterable<A>)","21":"Init::::checkedApply(java.lang.Iterable<A>)","22":"Init::::checkedApply(java.lang.Iterable<A>)","24":"Init::::init()","25":"Init::::init()","26":"Init::::init()","27":"Init::::init()","29":"Init::::init(java.lang.Iterable<A>)","30":"Init::::init(java.lang.Iterable<A>)","31":"Init::::init(java.lang.Iterable<A>)"},"test_reverse_method_lines_dic":{"25":"InitTest::::testSubject()","26":"InitTest::::testSubject()","27":"InitTest::::testSubject()","28":"InitTest::::testSubject()","30":"InitTest::::empty()","31":"InitTest::::empty()","32":"InitTest::::empty()","33":"InitTest::::empty()","35":"InitTest::::nonEmpty()","36":"InitTest::::nonEmpty()","37":"InitTest::::nonEmpty()","38":"InitTest::::nonEmpty()","39":"InitTest::::nonEmpty()"},"tests":[{"test_lines":[25,28],"covered_lines":[14,16,17,26]},{"test_lines":[30,33],"covered_lines":[14,16,17,21,26,30]},{"test_lines":[35,39],"covered_lines":[14,16,17,21,26,30]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn1/Head.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","\n","import java.util.Iterator;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","\n","/**\n"," * Retrieve the head element of an {@link Iterable}, wrapped in an {@link Maybe}. If the {@link Iterable} is empty, the\n"," * result is {@link Maybe#nothing()}.\n"," *\n"," * @param <A> the Iterable element type\n"," */\n","public final class Head<A> implements Fn1<Iterable<A>, Maybe<A>> {\n","\n","    private static final Head<?> INSTANCE = new Head<>();\n","\n","    private Head() {\n","    }\n","\n","    @Override\n","    public Maybe<A> checkedApply(Iterable<A> as) {\n","        Iterator<A> iterator = as.iterator();\n","        return iterator.hasNext() ? just(iterator.next()) : nothing();\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> Head<A> head() {\n","        return (Head<A>) INSTANCE;\n","    }\n","\n","    public static <A> Maybe<A> head(Iterable<A> as) {\n","        return Head.<A>head().apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Head.head;\n","import static java.util.Arrays.asList;\n","import static java.util.Collections.emptyList;\n","import static org.junit.Assert.assertEquals;\n","\n","@RunWith(Traits.class)\n","public class HeadTest {\n","\n","    @Test\n","    public void returnsTheHeadOfNonEmptyIterable() {\n","        assertEquals(just(1), head(asList(1, 2, 3)));\n","    }\n","\n","    @Test\n","    public void isEmptyForEmptyIterable() {\n","        assertEquals(nothing(), head(emptyList()));\n","    }\n","}"],"method_lines_dic":{"Head::::checkedApply(java.lang.Iterable<A>)":[24,28],"Head::::head()":[30,33],"Head::::head(java.lang.Iterable<A>)":[35,37]},"test_method_lines_dic":{"HeadTest::::returnsTheHeadOfNonEmptyIterable()":[17,20],"HeadTest::::isEmptyForEmptyIterable()":[22,25]},"reverse_method_lines_dic":{"24":"Head::::checkedApply(java.lang.Iterable<A>)","25":"Head::::checkedApply(java.lang.Iterable<A>)","26":"Head::::checkedApply(java.lang.Iterable<A>)","27":"Head::::checkedApply(java.lang.Iterable<A>)","28":"Head::::checkedApply(java.lang.Iterable<A>)","30":"Head::::head()","31":"Head::::head()","32":"Head::::head()","33":"Head::::head()","35":"Head::::head(java.lang.Iterable<A>)","36":"Head::::head(java.lang.Iterable<A>)","37":"Head::::head(java.lang.Iterable<A>)"},"test_reverse_method_lines_dic":{"17":"HeadTest::::returnsTheHeadOfNonEmptyIterable()","18":"HeadTest::::returnsTheHeadOfNonEmptyIterable()","19":"HeadTest::::returnsTheHeadOfNonEmptyIterable()","20":"HeadTest::::returnsTheHeadOfNonEmptyIterable()","22":"HeadTest::::isEmptyForEmptyIterable()","23":"HeadTest::::isEmptyForEmptyIterable()","24":"HeadTest::::isEmptyForEmptyIterable()","25":"HeadTest::::isEmptyForEmptyIterable()"},"tests":[{"test_lines":[17,20],"covered_lines":[19,21,22,26,27,32,36]},{"test_lines":[22,25],"covered_lines":[19,21,22,26,27,32,36]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn1/Not.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.specialized.BiPredicate;\n","import com.jnape.palatable.lambda.functions.specialized.Predicate;\n","\n","/**\n"," * Negate a predicate function.\n"," *\n"," * @param <A> the input argument type\n"," */\n","public final class Not<A> implements BiPredicate<Fn1<? super A, ? extends Boolean>, A> {\n","    private static final Not<?> INSTANCE = new Not<>();\n","\n","    private Not() {\n","    }\n","\n","    @Override\n","    public Boolean checkedApply(Fn1<? super A, ? extends Boolean> pred, A a) {\n","        return !pred.apply(a);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> Not<A> not() {\n","        return (Not<A>) INSTANCE;\n","    }\n","\n","    public static <A> Predicate<A> not(Fn1<? super A, ? extends Boolean> pred) {\n","        return Not.<A>not().apply(pred);\n","    }\n","\n","    public static <A> Boolean not(Fn1<? super A, ? extends Boolean> pred, A a) {\n","        return not(pred).apply(a);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.lambda.functions.specialized.Predicate;\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Not.not;\n","import static org.junit.Assert.assertFalse;\n","import static org.junit.Assert.assertTrue;\n","\n","public class NotTest {\n","\n","    @Test\n","    public void negatesPredicate() {\n","        Predicate<Boolean> isTrue = not(a -> !a);\n","        assertTrue(isTrue.apply(true));\n","        assertFalse(isTrue.apply(false));\n","    }\n","}"],"method_lines_dic":{"Not::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,A)":[18,21],"Not::::not()":[23,26],"Not::::not(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)":[28,30],"Not::::not(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,A)":[32,34]},"test_method_lines_dic":{"NotTest::::negatesPredicate()":[12,17]},"reverse_method_lines_dic":{"18":"Not::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,A)","19":"Not::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,A)","20":"Not::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,A)","21":"Not::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,A)","23":"Not::::not()","24":"Not::::not()","25":"Not::::not()","26":"Not::::not()","28":"Not::::not(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)","29":"Not::::not(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)","30":"Not::::not(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)","32":"Not::::not(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,A)","33":"Not::::not(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,A)","34":"Not::::not(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,A)"},"test_reverse_method_lines_dic":{"12":"NotTest::::negatesPredicate()","13":"NotTest::::negatesPredicate()","14":"NotTest::::negatesPredicate()","15":"NotTest::::negatesPredicate()","16":"NotTest::::negatesPredicate()","17":"NotTest::::negatesPredicate()"},"tests":[{"test_lines":[12,17],"covered_lines":[13,15,16,20,25,29]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn1/Sort.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.builtin.fn2.SortBy;\n","import com.jnape.palatable.lambda.functions.builtin.fn2.SortWith;\n","\n","import java.util.List;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Id.id;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.SortBy.sortBy;\n","\n","/**\n"," * Given an {@link Iterable} of {@link Comparable} elements, return a {@link List} of the sorted elements. Note that\n"," * this is both eager and monolithic.\n"," *\n"," * @param <A> the input Iterable and output List element type\n"," * @see SortBy\n"," * @see SortWith\n"," */\n","public final class Sort<A extends Comparable<A>> implements Fn1<Iterable<A>, List<A>> {\n","\n","    private static final Sort<?> INSTANCE = new Sort<>();\n","\n","    private Sort() {\n","    }\n","\n","    @Override\n","    public List<A> checkedApply(Iterable<A> as) {\n","        return sortBy(id(), as);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A extends Comparable<A>> Sort<A> sort() {\n","        return (Sort<A>) INSTANCE;\n","    }\n","\n","    public static <A extends Comparable<A>> List<A> sort(Iterable<A> as) {\n","        return Sort.<A>sort().apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import org.junit.Test;\n","import testsupport.traits.EmptyIterableSupport;\n","import testsupport.traits.FiniteIteration;\n","\n","import java.util.List;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Sort.sort;\n","import static java.util.Arrays.asList;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IterableMatcher.iterates;\n","\n","public class SortTest {\n","\n","    @TestTraits({FiniteIteration.class, EmptyIterableSupport.class})\n","    public Fn1<Iterable<Integer>, List<Integer>> testSubject() {\n","        return sort();\n","    }\n","\n","    @Test\n","    public void sortsIterable() {\n","        assertThat(sort(asList(2, 1, 3)), iterates(1, 2, 3));\n","    }\n","}"],"method_lines_dic":{"Sort::::checkedApply(java.lang.Iterable<A>)":[27,30],"Sort::::sort()":[32,35],"Sort::::sort(java.lang.Iterable<A>)":[37,39]},"test_method_lines_dic":{"SortTest::::testSubject()":[18,21],"SortTest::::sortsIterable()":[23,26]},"reverse_method_lines_dic":{"27":"Sort::::checkedApply(java.lang.Iterable<A>)","28":"Sort::::checkedApply(java.lang.Iterable<A>)","29":"Sort::::checkedApply(java.lang.Iterable<A>)","30":"Sort::::checkedApply(java.lang.Iterable<A>)","32":"Sort::::sort()","33":"Sort::::sort()","34":"Sort::::sort()","35":"Sort::::sort()","37":"Sort::::sort(java.lang.Iterable<A>)","38":"Sort::::sort(java.lang.Iterable<A>)","39":"Sort::::sort(java.lang.Iterable<A>)"},"test_reverse_method_lines_dic":{"18":"SortTest::::testSubject()","19":"SortTest::::testSubject()","20":"SortTest::::testSubject()","21":"SortTest::::testSubject()","23":"SortTest::::sortsIterable()","24":"SortTest::::sortsIterable()","25":"SortTest::::sortsIterable()","26":"SortTest::::sortsIterable()"},"tests":[{"test_lines":[23,26],"covered_lines":[22,24,25,29,34,38]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn1/Last.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.maybe;\n","\n","/**\n"," * Retrieve the last element of an {@link Iterable}, wrapped in a {@link Maybe}. If the {@link Iterable} is empty, the\n"," * result is {@link Maybe#nothing()}.\n"," *\n"," * @param <A> the Iterable element type\n"," */\n","public final class Last<A> implements Fn1<Iterable<A>, Maybe<A>> {\n","\n","    private static final Last<?> INSTANCE = new Last<>();\n","\n","    private Last() {\n","    }\n","\n","    @Override\n","    public Maybe<A> checkedApply(Iterable<A> as) {\n","        A last = null;\n","        for (A a : as) {\n","            last = a;\n","        }\n","        return maybe(last);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> Last<A> last() {\n","        return (Last<A>) INSTANCE;\n","    }\n","\n","    public static <A> Maybe<A> last(Iterable<A> as) {\n","        return Last.<A>last().apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Last.last;\n","import static java.util.Arrays.asList;\n","import static java.util.Collections.emptyList;\n","import static org.junit.Assert.assertEquals;\n","\n","public class LastTest {\n","\n","    @Test\n","    public void presentForNonEmptyIterable() {\n","        assertEquals(just(3), last(asList(1, 2, 3)));\n","    }\n","\n","    @Test\n","    public void emptyForEmptyIterables() {\n","        assertEquals(nothing(), last(emptyList()));\n","    }\n","}"],"method_lines_dic":{"Last::::checkedApply(java.lang.Iterable<A>)":[21,28],"Last::::last()":[30,33],"Last::::last(java.lang.Iterable<A>)":[35,37]},"test_method_lines_dic":{"LastTest::::presentForNonEmptyIterable()":[14,17],"LastTest::::emptyForEmptyIterables()":[19,22]},"reverse_method_lines_dic":{"21":"Last::::checkedApply(java.lang.Iterable<A>)","22":"Last::::checkedApply(java.lang.Iterable<A>)","23":"Last::::checkedApply(java.lang.Iterable<A>)","24":"Last::::checkedApply(java.lang.Iterable<A>)","25":"Last::::checkedApply(java.lang.Iterable<A>)","26":"Last::::checkedApply(java.lang.Iterable<A>)","27":"Last::::checkedApply(java.lang.Iterable<A>)","28":"Last::::checkedApply(java.lang.Iterable<A>)","30":"Last::::last()","31":"Last::::last()","32":"Last::::last()","33":"Last::::last()","35":"Last::::last(java.lang.Iterable<A>)","36":"Last::::last(java.lang.Iterable<A>)","37":"Last::::last(java.lang.Iterable<A>)"},"test_reverse_method_lines_dic":{"14":"LastTest::::presentForNonEmptyIterable()","15":"LastTest::::presentForNonEmptyIterable()","16":"LastTest::::presentForNonEmptyIterable()","17":"LastTest::::presentForNonEmptyIterable()","19":"LastTest::::emptyForEmptyIterables()","20":"LastTest::::emptyForEmptyIterables()","21":"LastTest::::emptyForEmptyIterables()","22":"LastTest::::emptyForEmptyIterables()"},"tests":[{"test_lines":[14,17],"covered_lines":[16,18,19,23,24,25,26,27,32,36]},{"test_lines":[19,22],"covered_lines":[16,18,19,23,24,27,32,36]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn1/Inits.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.builtin.fn2.Snoc;\n","\n","import java.util.Collections;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn3.ScanLeft.scanLeft;\n","\n","/**\n"," * Given an <code>{@link Iterable}&lt;A&gt;</code>, produce an\n"," * <code>{@link Iterable}&lt;{@link Iterable}&lt;A&gt;&gt;</code>, representing all of the subsequences of initial\n"," * elements, ordered by size, starting with the empty {@link Iterable}.\n"," * <p>\n"," * For example, <code>inits(asList(1,2,3))</code> would iterate <code>[]</code>, <code>[1]</code>, <code>[1,2]</code>,\n"," * and <code>[1,2,3]</code>.\n"," *\n"," * @param <A> the Iterable element type\n"," */\n","public final class Inits<A> implements Fn1<Iterable<A>, Iterable<Iterable<A>>> {\n","\n","    private static final Inits<?> INSTANCE = new Inits<>();\n","\n","    private Inits() {\n","    }\n","\n","    @Override\n","    public Iterable<Iterable<A>> checkedApply(Iterable<A> as) {\n","        return scanLeft(Snoc.<A>snoc().flip(), Collections::emptyIterator, as);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> Inits<A> inits() {\n","        return (Inits<A>) INSTANCE;\n","    }\n","\n","    public static <A> Iterable<Iterable<A>> inits(Iterable<A> as) {\n","        return Inits.<A>inits().apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.EmptyIterableSupport;\n","import testsupport.traits.FiniteIteration;\n","import testsupport.traits.ImmutableIteration;\n","import testsupport.traits.InfiniteIterableSupport;\n","import testsupport.traits.Laziness;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Inits.inits;\n","import static java.util.Arrays.asList;\n","import static java.util.Collections.emptyList;\n","import static java.util.Collections.singletonList;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IterableMatcher.iterates;\n","\n","@RunWith(Traits.class)\n","public class InitsTest {\n","\n","    @TestTraits({Laziness.class, EmptyIterableSupport.class, InfiniteIterableSupport.class, FiniteIteration.class, ImmutableIteration.class})\n","    public Fn1<? extends Iterable<?>, ? extends Iterable<?>> testSubject() {\n","        return inits();\n","    }\n","\n","    @Test\n","    public void empty() {\n","        assertThat(inits(emptyList()), iterates(emptyList()));\n","    }\n","\n","    @Test\n","    public void nonEmpty() {\n","        assertThat(inits(singletonList(1)), iterates(emptyList(), singletonList(1)));\n","        assertThat(inits(asList(1, 2, 3, 4, 5)), iterates(emptyList(),\n","                                                          singletonList(1),\n","                                                          asList(1, 2),\n","                                                          asList(1, 2, 3),\n","                                                          asList(1, 2, 3, 4),\n","                                                          asList(1, 2, 3, 4, 5)));\n","    }\n","}"],"method_lines_dic":{"Inits::::checkedApply(java.lang.Iterable<A>)":[27,30],"Inits::::inits()":[32,35],"Inits::::inits(java.lang.Iterable<A>)":[37,39]},"test_method_lines_dic":{"InitsTest::::testSubject()":[24,27],"InitsTest::::empty()":[29,32],"InitsTest::::nonEmpty()":[34,43]},"reverse_method_lines_dic":{"27":"Inits::::checkedApply(java.lang.Iterable<A>)","28":"Inits::::checkedApply(java.lang.Iterable<A>)","29":"Inits::::checkedApply(java.lang.Iterable<A>)","30":"Inits::::checkedApply(java.lang.Iterable<A>)","32":"Inits::::inits()","33":"Inits::::inits()","34":"Inits::::inits()","35":"Inits::::inits()","37":"Inits::::inits(java.lang.Iterable<A>)","38":"Inits::::inits(java.lang.Iterable<A>)","39":"Inits::::inits(java.lang.Iterable<A>)"},"test_reverse_method_lines_dic":{"24":"InitsTest::::testSubject()","25":"InitsTest::::testSubject()","26":"InitsTest::::testSubject()","27":"InitsTest::::testSubject()","29":"InitsTest::::empty()","30":"InitsTest::::empty()","31":"InitsTest::::empty()","32":"InitsTest::::empty()","34":"InitsTest::::nonEmpty()","35":"InitsTest::::nonEmpty()","36":"InitsTest::::nonEmpty()","37":"InitsTest::::nonEmpty()","38":"InitsTest::::nonEmpty()","39":"InitsTest::::nonEmpty()","40":"InitsTest::::nonEmpty()","41":"InitsTest::::nonEmpty()","42":"InitsTest::::nonEmpty()","43":"InitsTest::::nonEmpty()"},"tests":[{"test_lines":[24,27],"covered_lines":[22,24,25,34]},{"test_lines":[29,32],"covered_lines":[22,24,25,29,34,38]},{"test_lines":[34,43],"covered_lines":[22,24,25,29,34,38]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn1/Distinct.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.internal.iteration.DistinctIterable;\n","\n","/**\n"," * Return an {@link Iterable} of the distinct values from the given input {@link Iterable}.\n"," *\n"," * @param <A> the Iterable element type\n"," */\n","public final class Distinct<A> implements Fn1<Iterable<A>, Iterable<A>> {\n","    private static final Distinct<?> INSTANCE = new Distinct<>();\n","\n","    private Distinct() {\n","    }\n","\n","    @Override\n","    public Iterable<A> checkedApply(Iterable<A> as) {\n","        return new DistinctIterable<>(as);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> Distinct<A> distinct() {\n","        return (Distinct<A>) INSTANCE;\n","    }\n","\n","    public static <A> Iterable<A> distinct(Iterable<A> as) {\n","        return Distinct.<A>distinct().apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.EmptyIterableSupport;\n","import testsupport.traits.FiniteIteration;\n","import testsupport.traits.ImmutableIteration;\n","import testsupport.traits.InfiniteIterableSupport;\n","import testsupport.traits.Laziness;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Distinct.distinct;\n","import static java.util.Arrays.asList;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IterableMatcher.iterates;\n","\n","@RunWith(Traits.class)\n","public class DistinctTest {\n","\n","    @TestTraits({Laziness.class, InfiniteIterableSupport.class, EmptyIterableSupport.class, FiniteIteration.class, ImmutableIteration.class})\n","    public Distinct<?> testSubject() {\n","        return distinct();\n","    }\n","\n","    @Test\n","    public void producesIterableOfOnlySingleElementOccurrences() {\n","        assertThat(distinct(asList(1, 2, 2, 3, 3, 3)), iterates(1, 2, 3));\n","    }\n","}"],"method_lines_dic":{"Distinct::::checkedApply(java.lang.Iterable<A>)":[17,20],"Distinct::::distinct()":[22,25],"Distinct::::distinct(java.lang.Iterable<A>)":[27,29]},"test_method_lines_dic":{"DistinctTest::::testSubject()":[21,24],"DistinctTest::::producesIterableOfOnlySingleElementOccurrences()":[26,29]},"reverse_method_lines_dic":{"17":"Distinct::::checkedApply(java.lang.Iterable<A>)","18":"Distinct::::checkedApply(java.lang.Iterable<A>)","19":"Distinct::::checkedApply(java.lang.Iterable<A>)","20":"Distinct::::checkedApply(java.lang.Iterable<A>)","22":"Distinct::::distinct()","23":"Distinct::::distinct()","24":"Distinct::::distinct()","25":"Distinct::::distinct()","27":"Distinct::::distinct(java.lang.Iterable<A>)","28":"Distinct::::distinct(java.lang.Iterable<A>)","29":"Distinct::::distinct(java.lang.Iterable<A>)"},"test_reverse_method_lines_dic":{"21":"DistinctTest::::testSubject()","22":"DistinctTest::::testSubject()","23":"DistinctTest::::testSubject()","24":"DistinctTest::::testSubject()","26":"DistinctTest::::producesIterableOfOnlySingleElementOccurrences()","27":"DistinctTest::::producesIterableOfOnlySingleElementOccurrences()","28":"DistinctTest::::producesIterableOfOnlySingleElementOccurrences()","29":"DistinctTest::::producesIterableOfOnlySingleElementOccurrences()"},"tests":[{"test_lines":[21,24],"covered_lines":[12,14,15,24]},{"test_lines":[26,29],"covered_lines":[12,14,15,19,24,28]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn1/Magnetize.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Eq.eq;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.MagnetizeBy.magnetizeBy;\n","\n","/**\n"," * {@link Magnetize} an {@link Iterable} using value equality as the magnetizing function.\n"," *\n"," * @param <A> the Iterable element type\n"," */\n","public final class Magnetize<A> implements Fn1<Iterable<A>, Iterable<Iterable<A>>> {\n","\n","    private static final Magnetize<?> INSTANCE = new Magnetize<>();\n","\n","    private Magnetize() {\n","    }\n","\n","    @Override\n","    public Iterable<Iterable<A>> checkedApply(Iterable<A> as) {\n","        return magnetizeBy(eq(), as);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> Magnetize<A> magnetize() {\n","        return (Magnetize<A>) INSTANCE;\n","    }\n","\n","    public static <A> Iterable<Iterable<A>> magnetize(Iterable<A> as) {\n","        return Magnetize.<A>magnetize().apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.EmptyIterableSupport;\n","import testsupport.traits.FiniteIteration;\n","import testsupport.traits.ImmutableIteration;\n","import testsupport.traits.InfiniteIterableSupport;\n","import testsupport.traits.Laziness;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Magnetize.magnetize;\n","import static java.util.Arrays.asList;\n","import static org.hamcrest.collection.IsIterableContainingInOrder.contains;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IterableMatcher.iterates;\n","\n","@RunWith(Traits.class)\n","public class MagnetizeTest {\n","\n","    @TestTraits({EmptyIterableSupport.class, InfiniteIterableSupport.class, FiniteIteration.class, ImmutableIteration.class, Laziness.class})\n","    public Fn1<Iterable<Object>, Iterable<Iterable<Object>>> testSubject() {\n","        return magnetize();\n","    }\n","\n","    @Test\n","    public void magnetizesElementsByPredicateOutcome() {\n","        assertThat(magnetize(asList(1, 1, 2, 3, 3, 3, 2, 2, 1)),\n","                   contains(iterates(1, 1),\n","                            iterates(2),\n","                            iterates(3, 3, 3),\n","                            iterates(2, 2),\n","                            iterates(1)));\n","    }\n","}"],"method_lines_dic":{"Magnetize::::checkedApply(java.lang.Iterable<A>)":[20,23],"Magnetize::::magnetize()":[25,28],"Magnetize::::magnetize(java.lang.Iterable<A>)":[30,32]},"test_method_lines_dic":{"MagnetizeTest::::testSubject()":[23,26],"MagnetizeTest::::magnetizesElementsByPredicateOutcome()":[28,36]},"reverse_method_lines_dic":{"20":"Magnetize::::checkedApply(java.lang.Iterable<A>)","21":"Magnetize::::checkedApply(java.lang.Iterable<A>)","22":"Magnetize::::checkedApply(java.lang.Iterable<A>)","23":"Magnetize::::checkedApply(java.lang.Iterable<A>)","25":"Magnetize::::magnetize()","26":"Magnetize::::magnetize()","27":"Magnetize::::magnetize()","28":"Magnetize::::magnetize()","30":"Magnetize::::magnetize(java.lang.Iterable<A>)","31":"Magnetize::::magnetize(java.lang.Iterable<A>)","32":"Magnetize::::magnetize(java.lang.Iterable<A>)"},"test_reverse_method_lines_dic":{"23":"MagnetizeTest::::testSubject()","24":"MagnetizeTest::::testSubject()","25":"MagnetizeTest::::testSubject()","26":"MagnetizeTest::::testSubject()","28":"MagnetizeTest::::magnetizesElementsByPredicateOutcome()","29":"MagnetizeTest::::magnetizesElementsByPredicateOutcome()","30":"MagnetizeTest::::magnetizesElementsByPredicateOutcome()","31":"MagnetizeTest::::magnetizesElementsByPredicateOutcome()","32":"MagnetizeTest::::magnetizesElementsByPredicateOutcome()","33":"MagnetizeTest::::magnetizesElementsByPredicateOutcome()","34":"MagnetizeTest::::magnetizesElementsByPredicateOutcome()","35":"MagnetizeTest::::magnetizesElementsByPredicateOutcome()","36":"MagnetizeTest::::magnetizesElementsByPredicateOutcome()"},"tests":[{"test_lines":[23,26],"covered_lines":[15,17,18,27]},{"test_lines":[28,36],"covered_lines":[15,17,18,22,27,31]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn1/Id.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","\n","/**\n"," * The identity function.\n"," *\n"," * @param <A> The input/output type\n"," */\n","public final class Id<A> implements Fn1<A, A> {\n","\n","    private static final Id<?> INSTANCE = new Id<>();\n","\n","    private Id() {\n","    }\n","\n","    @Override\n","    public A checkedApply(A a) {\n","        return a;\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> Id<A> id() {\n","        return (Id<A>) INSTANCE;\n","    }\n","\n","    public static <A> A id(A a) {\n","        return Id.<A>id().apply(a);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Id.id;\n","import static org.hamcrest.core.Is.is;\n","import static org.junit.Assert.assertThat;\n","\n","public class IdTest {\n","\n","    @Test\n","    public void returnsInput() {\n","        assertThat(id().apply(\"anything\"), is(\"anything\"));\n","    }\n","}\n"],"method_lines_dic":{"Id::::checkedApply(A)":[17,20],"Id::::id()":[22,25],"Id::::id(A)":[27,29]},"test_method_lines_dic":{"IdTest::::returnsInput()":[11,14]},"reverse_method_lines_dic":{"17":"Id::::checkedApply(A)","18":"Id::::checkedApply(A)","19":"Id::::checkedApply(A)","20":"Id::::checkedApply(A)","22":"Id::::id()","23":"Id::::id()","24":"Id::::id()","25":"Id::::id()","27":"Id::::id(A)","28":"Id::::id(A)","29":"Id::::id(A)"},"test_reverse_method_lines_dic":{"11":"IdTest::::returnsInput()","12":"IdTest::::returnsInput()","13":"IdTest::::returnsInput()","14":"IdTest::::returnsInput()"},"tests":[{"test_lines":[11,14],"covered_lines":[12,14,15,19,24]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn1/Coalesce.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.lambda.adt.Either;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.builtin.fn2.Snoc;\n","import com.jnape.palatable.lambda.monoid.builtin.Merge;\n","\n","import java.util.Collections;\n","\n","import static com.jnape.palatable.lambda.adt.Either.right;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","import static com.jnape.palatable.lambda.functions.builtin.fn3.FoldLeft.foldLeft;\n","\n","/**\n"," * Fold an <code>{@link Iterable}&lt;{@link Either}&lt;L, R&gt;&gt;</code> into an <code>{@link Either}&lt;{@link\n"," * Iterable}&lt;L&gt;, {@link Iterable}&lt;R&gt;&gt;</code>, preserving all results of the side that's returned. That\n"," * is, if the result is a <code>left</code>, it will contain all left values; if it is a <code>right</code>, it will\n"," * contain all right values.\n"," * <p>\n"," * It may be useful to think of this as a more efficient version of <code>{@link Merge}&lt;{@link Iterable}&lt;L&gt;,\n"," * {@link Iterable}&lt;R&gt;&gt;</code>.\n"," *\n"," * @param <L> the left parameter type\n"," * @param <R> the right parameter type\n"," */\n","public final class Coalesce<L, R> implements Fn1<Iterable<Either<L, R>>, Either<Iterable<L>, Iterable<R>>> {\n","\n","    private static final Coalesce<?, ?> INSTANCE = new Coalesce<>();\n","\n","    private Coalesce() {\n","    }\n","\n","    @Override\n","    public Either<Iterable<L>, Iterable<R>> checkedApply(Iterable<Either<L, R>> eithers) {\n","        return foldLeft((acc, e) -> acc\n","                                .biMapL(ls -> e.match(Snoc.<L>snoc().flip().apply(ls), constantly(ls)))\n","                                .flatMap(rs -> e.biMap(Collections::singletonList,\n","                                                       Snoc.<R>snoc().flip().apply(rs))),\n","                        right(Collections::emptyIterator),\n","                        eithers);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A, B> Coalesce<A, B> coalesce() {\n","        return (Coalesce<A, B>) INSTANCE;\n","    }\n","\n","    public static <A, B> Either<Iterable<A>, Iterable<B>> coalesce(Iterable<Either<A, B>> eithers) {\n","        return Coalesce.<A, B>coalesce().apply(eithers);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.Either.left;\n","import static com.jnape.palatable.lambda.adt.Either.right;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Coalesce.coalesce;\n","import static java.util.Arrays.asList;\n","import static java.util.Collections.emptyList;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.EitherMatcher.isLeftThat;\n","import static testsupport.matchers.EitherMatcher.isRightThat;\n","import static testsupport.matchers.IterableMatcher.isEmpty;\n","import static testsupport.matchers.IterableMatcher.iterates;\n","\n","public class CoalesceTest {\n","\n","    @Test\n","    public void empty() {\n","        assertThat(coalesce(emptyList()), isRightThat(isEmpty()));\n","    }\n","\n","    @Test\n","    public void allRights() {\n","        assertThat(coalesce(asList(right(1), right(2), right(3))), isRightThat(iterates(1, 2, 3)));\n","    }\n","\n","    @Test\n","    public void allLefts() {\n","        assertThat(coalesce(asList(left(\"foo\"), left(\"bar\"), left(\"baz\"))), isLeftThat(iterates(\"foo\", \"bar\", \"baz\")));\n","    }\n","\n","    @Test\n","    public void someRightsAndLefts() {\n","        assertThat(coalesce(asList(right(1), left(\"foo\"), right(2), left(\"bar\"), right(3), left(\"baz\"))),\n","                   isLeftThat(iterates(\"foo\", \"bar\", \"baz\")));\n","    }\n","}"],"method_lines_dic":{"Coalesce::::checkedApply(java.lang.Iterable<com.jnape.palatable.lambda.adt.Either<L, R>>)":[33,41],"Coalesce::::coalesce()":[43,46],"Coalesce::::coalesce(java.lang.Iterable<com.jnape.palatable.lambda.adt.Either<A, B>>)":[48,50]},"test_method_lines_dic":{"CoalesceTest::::empty()":[18,21],"CoalesceTest::::allRights()":[23,26],"CoalesceTest::::allLefts()":[28,31],"CoalesceTest::::someRightsAndLefts()":[33,37]},"reverse_method_lines_dic":{"33":"Coalesce::::checkedApply(java.lang.Iterable<com.jnape.palatable.lambda.adt.Either<L, R>>)","34":"Coalesce::::checkedApply(java.lang.Iterable<com.jnape.palatable.lambda.adt.Either<L, R>>)","35":"Coalesce::::checkedApply(java.lang.Iterable<com.jnape.palatable.lambda.adt.Either<L, R>>)","36":"Coalesce::::checkedApply(java.lang.Iterable<com.jnape.palatable.lambda.adt.Either<L, R>>)","37":"Coalesce::::checkedApply(java.lang.Iterable<com.jnape.palatable.lambda.adt.Either<L, R>>)","38":"Coalesce::::checkedApply(java.lang.Iterable<com.jnape.palatable.lambda.adt.Either<L, R>>)","39":"Coalesce::::checkedApply(java.lang.Iterable<com.jnape.palatable.lambda.adt.Either<L, R>>)","40":"Coalesce::::checkedApply(java.lang.Iterable<com.jnape.palatable.lambda.adt.Either<L, R>>)","41":"Coalesce::::checkedApply(java.lang.Iterable<com.jnape.palatable.lambda.adt.Either<L, R>>)","43":"Coalesce::::coalesce()","44":"Coalesce::::coalesce()","45":"Coalesce::::coalesce()","46":"Coalesce::::coalesce()","48":"Coalesce::::coalesce(java.lang.Iterable<com.jnape.palatable.lambda.adt.Either<A, B>>)","49":"Coalesce::::coalesce(java.lang.Iterable<com.jnape.palatable.lambda.adt.Either<A, B>>)","50":"Coalesce::::coalesce(java.lang.Iterable<com.jnape.palatable.lambda.adt.Either<A, B>>)"},"test_reverse_method_lines_dic":{"18":"CoalesceTest::::empty()","19":"CoalesceTest::::empty()","20":"CoalesceTest::::empty()","21":"CoalesceTest::::empty()","23":"CoalesceTest::::allRights()","24":"CoalesceTest::::allRights()","25":"CoalesceTest::::allRights()","26":"CoalesceTest::::allRights()","28":"CoalesceTest::::allLefts()","29":"CoalesceTest::::allLefts()","30":"CoalesceTest::::allLefts()","31":"CoalesceTest::::allLefts()","33":"CoalesceTest::::someRightsAndLefts()","34":"CoalesceTest::::someRightsAndLefts()","35":"CoalesceTest::::someRightsAndLefts()","36":"CoalesceTest::::someRightsAndLefts()","37":"CoalesceTest::::someRightsAndLefts()"},"tests":[{"test_lines":[18,21],"covered_lines":[28,30,31,35,39,45,49]},{"test_lines":[23,26],"covered_lines":[28,30,31,35,36,37,38,39,45,49]},{"test_lines":[28,31],"covered_lines":[28,30,31,35,36,37,38,39,45,49]},{"test_lines":[33,37],"covered_lines":[28,30,31,35,36,37,38,39,45,49]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn1/CatMaybes.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","\n","import java.util.Collections;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Flatten.flatten;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Map.map;\n","\n","/**\n"," * Given an <code>{@link Iterable}&lt;{@link Maybe}&lt;A&gt;&gt;</code>, return an\n"," * <code>{@link Iterable}&lt;A&gt;</code> of only the present values.\n"," *\n"," * @param <A> the {@link Maybe} element type, as well as the resulting {@link Iterable} element type\n"," */\n","public final class CatMaybes<A> implements Fn1<Iterable<Maybe<A>>, Iterable<A>> {\n","    private static final CatMaybes<?> INSTANCE = new CatMaybes<>();\n","\n","    private CatMaybes() {\n","    }\n","\n","    @Override\n","    public Iterable<A> checkedApply(Iterable<Maybe<A>> maybes) {\n","        return flatten(map(m -> m.<Iterable<A>>fmap(Collections::singletonList)\n","                .orElse(Collections::emptyIterator), maybes));\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> CatMaybes<A> catMaybes() {\n","        return (CatMaybes<A>) INSTANCE;\n","    }\n","\n","    public static <A> Iterable<A> catMaybes(Iterable<Maybe<A>> as) {\n","        return CatMaybes.<A>catMaybes().apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.CatMaybes.catMaybes;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Repeat.repeat;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Take.take;\n","import static java.util.Arrays.asList;\n","import static java.util.Collections.emptyList;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IterableMatcher.isEmpty;\n","import static testsupport.matchers.IterableMatcher.iterates;\n","\n","@RunWith(Traits.class)\n","public class CatMaybesTest {\n","\n","    @Test\n","    public void empty() {\n","        assertThat(catMaybes(emptyList()), isEmpty());\n","    }\n","\n","    @Test\n","    public void onlyNothingsIsEquivalentToEmpty() {\n","        assertThat(catMaybes(asList(nothing(), nothing(), nothing())), isEmpty());\n","    }\n","\n","    @Test\n","    public void nonEmpty() {\n","        assertThat(catMaybes(asList(nothing(), just(1), just(2), nothing(), just(3))), iterates(1, 2, 3));\n","    }\n","\n","    @Test\n","    public void infiniteIterableSupport() {\n","        assertThat(take(3, catMaybes(repeat(just(1)))), iterates(1, 1, 1));\n","    }\n","}"],"method_lines_dic":{"CatMaybes::::checkedApply(java.lang.Iterable<com.jnape.palatable.lambda.adt.Maybe<A>>)":[23,27],"CatMaybes::::catMaybes()":[29,32],"CatMaybes::::catMaybes(java.lang.Iterable<com.jnape.palatable.lambda.adt.Maybe<A>>)":[34,36]},"test_method_lines_dic":{"CatMaybesTest::::empty()":[21,24],"CatMaybesTest::::onlyNothingsIsEquivalentToEmpty()":[26,29],"CatMaybesTest::::nonEmpty()":[31,34],"CatMaybesTest::::infiniteIterableSupport()":[36,39]},"reverse_method_lines_dic":{"23":"CatMaybes::::checkedApply(java.lang.Iterable<com.jnape.palatable.lambda.adt.Maybe<A>>)","24":"CatMaybes::::checkedApply(java.lang.Iterable<com.jnape.palatable.lambda.adt.Maybe<A>>)","25":"CatMaybes::::checkedApply(java.lang.Iterable<com.jnape.palatable.lambda.adt.Maybe<A>>)","26":"CatMaybes::::checkedApply(java.lang.Iterable<com.jnape.palatable.lambda.adt.Maybe<A>>)","27":"CatMaybes::::checkedApply(java.lang.Iterable<com.jnape.palatable.lambda.adt.Maybe<A>>)","29":"CatMaybes::::catMaybes()","30":"CatMaybes::::catMaybes()","31":"CatMaybes::::catMaybes()","32":"CatMaybes::::catMaybes()","34":"CatMaybes::::catMaybes(java.lang.Iterable<com.jnape.palatable.lambda.adt.Maybe<A>>)","35":"CatMaybes::::catMaybes(java.lang.Iterable<com.jnape.palatable.lambda.adt.Maybe<A>>)","36":"CatMaybes::::catMaybes(java.lang.Iterable<com.jnape.palatable.lambda.adt.Maybe<A>>)"},"test_reverse_method_lines_dic":{"21":"CatMaybesTest::::empty()","22":"CatMaybesTest::::empty()","23":"CatMaybesTest::::empty()","24":"CatMaybesTest::::empty()","26":"CatMaybesTest::::onlyNothingsIsEquivalentToEmpty()","27":"CatMaybesTest::::onlyNothingsIsEquivalentToEmpty()","28":"CatMaybesTest::::onlyNothingsIsEquivalentToEmpty()","29":"CatMaybesTest::::onlyNothingsIsEquivalentToEmpty()","31":"CatMaybesTest::::nonEmpty()","32":"CatMaybesTest::::nonEmpty()","33":"CatMaybesTest::::nonEmpty()","34":"CatMaybesTest::::nonEmpty()","36":"CatMaybesTest::::infiniteIterableSupport()","37":"CatMaybesTest::::infiniteIterableSupport()","38":"CatMaybesTest::::infiniteIterableSupport()","39":"CatMaybesTest::::infiniteIterableSupport()"},"tests":[{"test_lines":[21,24],"covered_lines":[18,20,21,25,31,35]},{"test_lines":[26,29],"covered_lines":[18,20,21,25,26,31,35]},{"test_lines":[31,34],"covered_lines":[18,20,21,25,26,31,35]},{"test_lines":[36,39],"covered_lines":[18,20,21,25,26,31,35]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn1/Tails.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Drop.drop;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Snoc.snoc;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Unfoldr.unfoldr;\n","import static com.jnape.palatable.lambda.functions.builtin.fn3.ZipWith.zipWith;\n","import static java.util.Collections.emptyList;\n","\n","/**\n"," * Given an <code>{@link Iterable}&lt;A&gt;</code>, produce an\n"," * <code>{@link Iterable}&lt;{@link Iterable}&lt;A&gt;&gt;</code>, representing all of the subsequences of tail\n"," * elements, ordered by size, starting with the full {@link Iterable}.\n"," * <p>\n"," * For example, <code>tails(asList(1,2,3))</code> would iterate <code>[1,2,3]</code>, <code>[2,3]</code>,\n"," * <code>[3]</code>, and <code>[]</code>.\n"," *\n"," * @param <A> the Iterable element type\n"," */\n","public final class Tails<A> implements Fn1<Iterable<A>, Iterable<Iterable<A>>> {\n","\n","    private static final Tails<?> INSTANCE = new Tails<>();\n","\n","    private Tails() {\n","    }\n","\n","    @Override\n","    public Iterable<Iterable<A>> checkedApply(Iterable<A> as) {\n","        return snoc(emptyList(), zipWith((a, __) -> a, unfoldr(k -> just(tuple(drop(k, as), k + 1)), 0), as));\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> Tails<A> tails() {\n","        return (Tails<A>) INSTANCE;\n","    }\n","\n","    public static <A> Iterable<Iterable<A>> tails(Iterable<A> as) {\n","        return Tails.<A>tails().apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.EmptyIterableSupport;\n","import testsupport.traits.FiniteIteration;\n","import testsupport.traits.ImmutableIteration;\n","import testsupport.traits.InfiniteIterableSupport;\n","import testsupport.traits.Laziness;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Last.last;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Repeat.repeat;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Tails.tails;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Take.take;\n","import static java.util.Arrays.asList;\n","import static java.util.Collections.emptyList;\n","import static java.util.Collections.singletonList;\n","import static org.junit.Assert.assertEquals;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IterableMatcher.iterates;\n","\n","@RunWith(Traits.class)\n","public class TailsTest {\n","\n","    @TestTraits({EmptyIterableSupport.class, InfiniteIterableSupport.class, FiniteIteration.class, ImmutableIteration.class, Laziness.class})\n","    public Fn1<? extends Iterable<?>, ? extends Iterable<?>> testSubject() {\n","        return tails();\n","    }\n","\n","    @Test\n","    public void empty() {\n","        assertThat(tails(emptyList()), iterates(emptyList()));\n","    }\n","\n","    @Test\n","    public void nonEmpty() {\n","        assertThat(tails(singletonList(1)), iterates(singletonList(1), emptyList()));\n","        assertThat(tails(asList(1, 2, 3, 4, 5)), iterates(asList(1, 2, 3, 4, 5),\n","                                                          asList(2, 3, 4, 5),\n","                                                          asList(3, 4, 5),\n","                                                          asList(4, 5),\n","                                                          singletonList(5),\n","                                                          emptyList()));\n","    }\n","\n","    @Test\n","    public void largeNumberOfElements() {\n","        assertEquals(just(emptyList()), last(tails(take(10_000, repeat(1)))));\n","    }\n","}"],"method_lines_dic":{"Tails::::checkedApply(java.lang.Iterable<A>)":[30,33],"Tails::::tails()":[35,38],"Tails::::tails(java.lang.Iterable<A>)":[40,42]},"test_method_lines_dic":{"TailsTest::::testSubject()":[29,32],"TailsTest::::empty()":[34,37],"TailsTest::::nonEmpty()":[39,48],"TailsTest::::largeNumberOfElements()":[50,53]},"reverse_method_lines_dic":{"30":"Tails::::checkedApply(java.lang.Iterable<A>)","31":"Tails::::checkedApply(java.lang.Iterable<A>)","32":"Tails::::checkedApply(java.lang.Iterable<A>)","33":"Tails::::checkedApply(java.lang.Iterable<A>)","35":"Tails::::tails()","36":"Tails::::tails()","37":"Tails::::tails()","38":"Tails::::tails()","40":"Tails::::tails(java.lang.Iterable<A>)","41":"Tails::::tails(java.lang.Iterable<A>)","42":"Tails::::tails(java.lang.Iterable<A>)"},"test_reverse_method_lines_dic":{"29":"TailsTest::::testSubject()","30":"TailsTest::::testSubject()","31":"TailsTest::::testSubject()","32":"TailsTest::::testSubject()","34":"TailsTest::::empty()","35":"TailsTest::::empty()","36":"TailsTest::::empty()","37":"TailsTest::::empty()","39":"TailsTest::::nonEmpty()","40":"TailsTest::::nonEmpty()","41":"TailsTest::::nonEmpty()","42":"TailsTest::::nonEmpty()","43":"TailsTest::::nonEmpty()","44":"TailsTest::::nonEmpty()","45":"TailsTest::::nonEmpty()","46":"TailsTest::::nonEmpty()","47":"TailsTest::::nonEmpty()","48":"TailsTest::::nonEmpty()","50":"TailsTest::::largeNumberOfElements()","51":"TailsTest::::largeNumberOfElements()","52":"TailsTest::::largeNumberOfElements()","53":"TailsTest::::largeNumberOfElements()"},"tests":[{"test_lines":[29,32],"covered_lines":[25,27,28,37]},{"test_lines":[34,37],"covered_lines":[25,27,28,32,37,41]},{"test_lines":[39,48],"covered_lines":[25,27,28,32,37,41]},{"test_lines":[50,53],"covered_lines":[25,27,28,32,37,41]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn1/Size.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","\n","import java.util.Collection;\n","\n","public final class Size implements Fn1<Iterable<?>, Long> {\n","\n","    private static final Size INSTANCE = new Size();\n","\n","    private Size() {\n","    }\n","\n","    @Override\n","    public Long checkedApply(Iterable<?> iterable) {\n","        if (iterable instanceof Collection)\n","            return (long) ((Collection) iterable).size();\n","\n","        long size = 0L;\n","        for (Object ignored : iterable) {\n","            size++;\n","        }\n","        return size;\n","    }\n","\n","    public static Size size() {\n","        return INSTANCE;\n","    }\n","\n","    public static Long size(Iterable<?> iterable) {\n","        return size().apply(iterable);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import org.junit.Test;\n","\n","import java.util.ArrayList;\n","import java.util.Collection;\n","import java.util.Iterator;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Size.size;\n","import static java.util.Arrays.asList;\n","import static java.util.Collections.emptyList;\n","import static org.junit.Assert.assertEquals;\n","\n","public class SizeTest {\n","\n","    @Test\n","    public void countsElementsInIterable() {\n","        assertEquals((Long) 0L, size(emptyList()));\n","        assertEquals((Long) 3L, size(asList(1, 2, 3)));\n","    }\n","\n","    @Test\n","    @SuppressWarnings(\"serial\")\n","    public void optimizesForCollections() {\n","        Collection<Integer> collection = new ArrayList<Integer>() {\n","            @Override\n","            public Iterator<Integer> iterator() {\n","                throw new IllegalStateException(\"should not be using the iterator\");\n","            }\n","\n","            {\n","                add(1);\n","                add(2);\n","                add(3);\n","            }\n","        };\n","        assertEquals((Long) 3L, size(collection));\n","    }\n","}"],"method_lines_dic":{"Size::::checkedApply(java.lang.Iterable<?>)":[14,24],"Size::::size()":[26,28],"Size::::size(java.lang.Iterable<?>)":[30,32]},"test_method_lines_dic":{"SizeTest::::countsElementsInIterable()":[16,20],"SizeTest::::optimizesForCollections()":[22,38]},"reverse_method_lines_dic":{"14":"Size::::checkedApply(java.lang.Iterable<?>)","15":"Size::::checkedApply(java.lang.Iterable<?>)","16":"Size::::checkedApply(java.lang.Iterable<?>)","17":"Size::::checkedApply(java.lang.Iterable<?>)","18":"Size::::checkedApply(java.lang.Iterable<?>)","19":"Size::::checkedApply(java.lang.Iterable<?>)","20":"Size::::checkedApply(java.lang.Iterable<?>)","21":"Size::::checkedApply(java.lang.Iterable<?>)","22":"Size::::checkedApply(java.lang.Iterable<?>)","23":"Size::::checkedApply(java.lang.Iterable<?>)","24":"Size::::checkedApply(java.lang.Iterable<?>)","26":"Size::::size()","27":"Size::::size()","28":"Size::::size()","30":"Size::::size(java.lang.Iterable<?>)","31":"Size::::size(java.lang.Iterable<?>)","32":"Size::::size(java.lang.Iterable<?>)"},"test_reverse_method_lines_dic":{"16":"SizeTest::::countsElementsInIterable()","17":"SizeTest::::countsElementsInIterable()","18":"SizeTest::::countsElementsInIterable()","19":"SizeTest::::countsElementsInIterable()","20":"SizeTest::::countsElementsInIterable()","22":"SizeTest::::optimizesForCollections()","23":"SizeTest::::optimizesForCollections()","24":"SizeTest::::optimizesForCollections()","25":"SizeTest::::optimizesForCollections()","26":"SizeTest::::optimizesForCollections()","27":"SizeTest::::optimizesForCollections()","28":"SizeTest::::optimizesForCollections()","29":"SizeTest::::optimizesForCollections()","30":"SizeTest::::optimizesForCollections()","31":"SizeTest::::optimizesForCollections()","32":"SizeTest::::optimizesForCollections()","33":"SizeTest::::optimizesForCollections()","34":"SizeTest::::optimizesForCollections()","35":"SizeTest::::optimizesForCollections()","36":"SizeTest::::optimizesForCollections()","37":"SizeTest::::optimizesForCollections()","38":"SizeTest::::optimizesForCollections()"},"tests":[{"test_lines":[16,20],"covered_lines":[9,11,12,16,17,27,31]},{"test_lines":[22,38],"covered_lines":[9,11,12,16,17,27,31]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn1/Occurrences.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","\n","import java.util.HashMap;\n","import java.util.Map;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn3.FoldLeft.foldLeft;\n","\n","/**\n"," * Given an <code>{@link Iterable}&lt;A&gt;</code>, return a <code>{@link Map}&lt;A, Long&gt;</code> representing each\n"," * unique element in the {@link Iterable} paired with its number of occurrences.\n"," *\n"," * @param <A> the {@link Iterable} element type\n"," */\n","public final class Occurrences<A> implements Fn1<Iterable<A>, Map<A, Long>> {\n","    private static final Occurrences<?> INSTANCE = new Occurrences<>();\n","\n","    private Occurrences() {\n","    }\n","\n","    @Override\n","    public Map<A, Long> checkedApply(Iterable<A> as) {\n","        return foldLeft((occurrences, a) -> {\n","            occurrences.put(a, occurrences.getOrDefault(a, 0L) + 1);\n","            return occurrences;\n","        }, new HashMap<>(), as);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> Occurrences<A> occurrences() {\n","        return (Occurrences<A>) INSTANCE;\n","    }\n","\n","    public static <A> Map<A, Long> occurrences(Iterable<A> as) {\n","        return Occurrences.<A>occurrences().apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import org.junit.Test;\n","\n","import java.util.Collections;\n","import java.util.HashMap;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Occurrences.occurrences;\n","import static java.util.Arrays.asList;\n","import static java.util.Collections.emptyList;\n","import static org.junit.Assert.assertEquals;\n","\n","public class OccurrencesTest {\n","\n","    @Test\n","    @SuppressWarnings(\"serial\")\n","    public void occurrencesOfIndividualElements() {\n","        assertEquals(new HashMap<String, Long>() {{\n","            put(\"foo\", 2L);\n","            put(\"bar\", 2L);\n","            put(\"baz\", 1L);\n","        }}, occurrences(asList(\"foo\", \"bar\", \"foo\", \"baz\", \"bar\")));\n","    }\n","\n","    @Test\n","    public void emptyIterableHasNoOccurrences() {\n","        assertEquals(Collections.<Object, Long>emptyMap(), occurrences(emptyList()));\n","    }\n","}\n"],"method_lines_dic":{"Occurrences::::checkedApply(java.lang.Iterable<A>)":[22,28],"Occurrences::::occurrences()":[30,33],"Occurrences::::occurrences(java.lang.Iterable<A>)":[35,37]},"test_method_lines_dic":{"OccurrencesTest::::occurrencesOfIndividualElements()":[15,23],"OccurrencesTest::::emptyIterableHasNoOccurrences()":[25,28]},"reverse_method_lines_dic":{"22":"Occurrences::::checkedApply(java.lang.Iterable<A>)","23":"Occurrences::::checkedApply(java.lang.Iterable<A>)","24":"Occurrences::::checkedApply(java.lang.Iterable<A>)","25":"Occurrences::::checkedApply(java.lang.Iterable<A>)","26":"Occurrences::::checkedApply(java.lang.Iterable<A>)","27":"Occurrences::::checkedApply(java.lang.Iterable<A>)","28":"Occurrences::::checkedApply(java.lang.Iterable<A>)","30":"Occurrences::::occurrences()","31":"Occurrences::::occurrences()","32":"Occurrences::::occurrences()","33":"Occurrences::::occurrences()","35":"Occurrences::::occurrences(java.lang.Iterable<A>)","36":"Occurrences::::occurrences(java.lang.Iterable<A>)","37":"Occurrences::::occurrences(java.lang.Iterable<A>)"},"test_reverse_method_lines_dic":{"15":"OccurrencesTest::::occurrencesOfIndividualElements()","16":"OccurrencesTest::::occurrencesOfIndividualElements()","17":"OccurrencesTest::::occurrencesOfIndividualElements()","18":"OccurrencesTest::::occurrencesOfIndividualElements()","19":"OccurrencesTest::::occurrencesOfIndividualElements()","20":"OccurrencesTest::::occurrencesOfIndividualElements()","21":"OccurrencesTest::::occurrencesOfIndividualElements()","22":"OccurrencesTest::::occurrencesOfIndividualElements()","23":"OccurrencesTest::::occurrencesOfIndividualElements()","25":"OccurrencesTest::::emptyIterableHasNoOccurrences()","26":"OccurrencesTest::::emptyIterableHasNoOccurrences()","27":"OccurrencesTest::::emptyIterableHasNoOccurrences()","28":"OccurrencesTest::::emptyIterableHasNoOccurrences()"},"tests":[{"test_lines":[15,23],"covered_lines":[17,19,20,24,25,26,32,36]},{"test_lines":[25,28],"covered_lines":[17,19,20,24,32,36]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn1/Cycle.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.internal.iteration.CyclicIterable;\n","\n","import static java.util.Arrays.asList;\n","\n","/**\n"," * Given an <code>Iterable</code>, return an infinite <code>Iterable</code> that repeatedly cycles its elements, in\n"," * order.\n"," *\n"," * @param <A> The Iterable element type\n"," */\n","public final class Cycle<A> implements Fn1<Iterable<A>, Iterable<A>> {\n","\n","    private static final Cycle<?> INSTANCE = new Cycle<>();\n","\n","    private Cycle() {\n","    }\n","\n","    @Override\n","    public Iterable<A> checkedApply(Iterable<A> as) {\n","        return new CyclicIterable<>(as);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> Cycle<A> cycle() {\n","        return (Cycle<A>) INSTANCE;\n","    }\n","\n","    public static <A> Iterable<A> cycle(Iterable<A> as) {\n","        return Cycle.<A>cycle().apply(as);\n","    }\n","\n","    @SafeVarargs\n","    @SuppressWarnings(\"varargs\")\n","    public static <A> Iterable<A> cycle(A... as) {\n","        return cycle(asList(as));\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.ImmutableIteration;\n","import testsupport.traits.InfiniteIteration;\n","import testsupport.traits.Laziness;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Cycle.cycle;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Take.take;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IterableMatcher.iterates;\n","\n","@RunWith(Traits.class)\n","public class CycleTest {\n","\n","    @TestTraits({Laziness.class, ImmutableIteration.class, InfiniteIteration.class})\n","    public Cycle<?> createTestSubject() {\n","        return cycle();\n","    }\n","\n","    @Test\n","    public void cyclesTheSameSequenceForever() {\n","        assertThat(take(9, cycle(1, 2, 3)), iterates(1, 2, 3, 1, 2, 3, 1, 2, 3));\n","    }\n","}\n"],"method_lines_dic":{"Cycle::::checkedApply(java.lang.Iterable<A>)":[21,24],"Cycle::::cycle()":[26,29],"Cycle::::cycle(java.lang.Iterable<A>)":[31,33],"Cycle::::cycle(A[])":[35,39]},"test_method_lines_dic":{"CycleTest::::createTestSubject()":[19,22],"CycleTest::::cyclesTheSameSequenceForever()":[24,27]},"reverse_method_lines_dic":{"21":"Cycle::::checkedApply(java.lang.Iterable<A>)","22":"Cycle::::checkedApply(java.lang.Iterable<A>)","23":"Cycle::::checkedApply(java.lang.Iterable<A>)","24":"Cycle::::checkedApply(java.lang.Iterable<A>)","26":"Cycle::::cycle()","27":"Cycle::::cycle()","28":"Cycle::::cycle()","29":"Cycle::::cycle()","31":"Cycle::::cycle(java.lang.Iterable<A>)","32":"Cycle::::cycle(java.lang.Iterable<A>)","33":"Cycle::::cycle(java.lang.Iterable<A>)","35":"Cycle::::cycle(A[])","36":"Cycle::::cycle(A[])","37":"Cycle::::cycle(A[])","38":"Cycle::::cycle(A[])","39":"Cycle::::cycle(A[])"},"test_reverse_method_lines_dic":{"19":"CycleTest::::createTestSubject()","20":"CycleTest::::createTestSubject()","21":"CycleTest::::createTestSubject()","22":"CycleTest::::createTestSubject()","24":"CycleTest::::cyclesTheSameSequenceForever()","25":"CycleTest::::cyclesTheSameSequenceForever()","26":"CycleTest::::cyclesTheSameSequenceForever()","27":"CycleTest::::cyclesTheSameSequenceForever()"},"tests":[{"test_lines":[19,22],"covered_lines":[16,18,19,28]},{"test_lines":[24,27],"covered_lines":[16,18,19,23,28,32,38]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn1/Downcast.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","\n","/**\n"," * Covariantly cast a value of type <code>B</code> to a value of subtype <code>A</code>. Unsafe.\n"," *\n"," * @param <A> the subtype\n"," * @param <B> the supertype\n"," */\n","public final class Downcast<A extends B, B> implements Fn1<B, A> {\n","\n","    private static final Downcast<?, ?> INSTANCE = new Downcast<>();\n","\n","    private Downcast() {\n","    }\n","\n","    @Override\n","    @SuppressWarnings(\"unchecked\")\n","    public A checkedApply(B b) {\n","        return (A) b;\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A extends B, B> Downcast<A, B> downcast() {\n","        return (Downcast<A, B>) INSTANCE;\n","    }\n","\n","    public static <A extends B, B> A downcast(B b) {\n","        return Downcast.<A, B>downcast().apply(b);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.functor.Functor;\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Downcast.downcast;\n","\n","public class DowncastTest {\n","\n","    @Test\n","    @SuppressWarnings(\"unused\")\n","    public void safeDowncast() {\n","        CharSequence charSequence = \"123\";\n","        String       s            = downcast(charSequence);\n","\n","        Functor<Integer, Maybe<?>> maybeInt = nothing();\n","        Maybe<Integer>             cast     = downcast(maybeInt);\n","    }\n","\n","    @Test(expected = ClassCastException.class)\n","    @SuppressWarnings({\"JavacQuirks\", \"unused\"})\n","    public void unsafeDowncast() {\n","        CharSequence charSequence = \"123\";\n","        Integer      explosion    = downcast(charSequence);\n","    }\n","}"],"method_lines_dic":{"Downcast::::checkedApply(B)":[18,22],"Downcast::::downcast()":[24,27],"Downcast::::downcast(B)":[29,31]},"test_method_lines_dic":{"DowncastTest::::safeDowncast()":[12,20],"DowncastTest::::unsafeDowncast()":[22,27]},"reverse_method_lines_dic":{"18":"Downcast::::checkedApply(B)","19":"Downcast::::checkedApply(B)","20":"Downcast::::checkedApply(B)","21":"Downcast::::checkedApply(B)","22":"Downcast::::checkedApply(B)","24":"Downcast::::downcast()","25":"Downcast::::downcast()","26":"Downcast::::downcast()","27":"Downcast::::downcast()","29":"Downcast::::downcast(B)","30":"Downcast::::downcast(B)","31":"Downcast::::downcast(B)"},"test_reverse_method_lines_dic":{"12":"DowncastTest::::safeDowncast()","13":"DowncastTest::::safeDowncast()","14":"DowncastTest::::safeDowncast()","15":"DowncastTest::::safeDowncast()","16":"DowncastTest::::safeDowncast()","17":"DowncastTest::::safeDowncast()","18":"DowncastTest::::safeDowncast()","19":"DowncastTest::::safeDowncast()","20":"DowncastTest::::safeDowncast()","22":"DowncastTest::::unsafeDowncast()","23":"DowncastTest::::unsafeDowncast()","24":"DowncastTest::::unsafeDowncast()","25":"DowncastTest::::unsafeDowncast()","26":"DowncastTest::::unsafeDowncast()","27":"DowncastTest::::unsafeDowncast()"},"tests":[{"test_lines":[12,20],"covered_lines":[13,15,16,21,26,30]},{"test_lines":[22,27],"covered_lines":[13,15,16,21,26,30]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn1/Reverse.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.internal.iteration.ReversingIterable;\n","\n","/**\n"," * Given an <code>Iterable</code>, return a reversed representation of that <code>Iterable</code>. Note that reversing\n"," * is deferred until the returned <code>Iterable</code> is iterated.\n"," *\n"," * @param <A> The Iterable element type\n"," */\n","public final class Reverse<A> implements Fn1<Iterable<A>, Iterable<A>> {\n","\n","    private static final Reverse<?> INSTANCE = new Reverse<>();\n","\n","    private Reverse() {\n","    }\n","\n","    @Override\n","    public Iterable<A> checkedApply(Iterable<A> as) {\n","        return new ReversingIterable<>(as);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> Reverse<A> reverse() {\n","        return (Reverse<A>) INSTANCE;\n","    }\n","\n","    public static <A> Iterable<A> reverse(Iterable<A> as) {\n","        return Reverse.<A>reverse().apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.EmptyIterableSupport;\n","import testsupport.traits.FiniteIteration;\n","import testsupport.traits.ImmutableIteration;\n","import testsupport.traits.Laziness;\n","\n","import java.util.Iterator;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Reverse.reverse;\n","import static java.util.Arrays.asList;\n","import static org.junit.Assert.assertThat;\n","import static org.mockito.Mockito.mock;\n","import static org.mockito.Mockito.never;\n","import static org.mockito.Mockito.verify;\n","import static org.mockito.Mockito.when;\n","import static testsupport.matchers.IterableMatcher.iterates;\n","\n","@RunWith(Traits.class)\n","public class ReverseTest {\n","\n","    @TestTraits({Laziness.class, ImmutableIteration.class, FiniteIteration.class, EmptyIterableSupport.class})\n","    public Reverse<?> createTestSubject() {\n","        return reverse();\n","    }\n","\n","    @Test\n","    public void iteratesElementsOfAnIterableBackwards() {\n","        Iterable<String> words    = asList(\"the\", \"rain\", \"in\", \"Spain\");\n","        Iterable<String> reversed = reverse(words);\n","\n","        assertThat(reversed, iterates(\"Spain\", \"in\", \"rain\", \"the\"));\n","    }\n","\n","    @Test\n","    @SuppressWarnings({\"unchecked\", \"ResultOfMethodCallIgnored\"})\n","    public void doesNotBeginReversingUntilIterated() {\n","        Iterable<Integer> mockIterable = mock(Iterable.class);\n","        Iterator<Integer> mockIterator = mock(Iterator.class);\n","\n","        when(mockIterable.iterator()).thenReturn(mockIterator);\n","\n","        Iterator<Integer> lazyIterable = reverse(mockIterable).iterator();\n","        lazyIterable.hasNext();\n","\n","        verify(mockIterator).hasNext();\n","        verify(mockIterator, never()).next();\n","    }\n","\n","    @Test\n","    public void doubleReverseIsNoOp() {\n","        assertThat(reverse(reverse(asList(1, 2, 3))), iterates(1, 2, 3));\n","    }\n","}\n"],"method_lines_dic":{"Reverse::::checkedApply(java.lang.Iterable<A>)":[19,22],"Reverse::::reverse()":[24,27],"Reverse::::reverse(java.lang.Iterable<A>)":[29,31]},"test_method_lines_dic":{"ReverseTest::::createTestSubject()":[26,29],"ReverseTest::::iteratesElementsOfAnIterableBackwards()":[31,37],"ReverseTest::::doesNotBeginReversingUntilIterated()":[39,52],"ReverseTest::::doubleReverseIsNoOp()":[54,57]},"reverse_method_lines_dic":{"19":"Reverse::::checkedApply(java.lang.Iterable<A>)","20":"Reverse::::checkedApply(java.lang.Iterable<A>)","21":"Reverse::::checkedApply(java.lang.Iterable<A>)","22":"Reverse::::checkedApply(java.lang.Iterable<A>)","24":"Reverse::::reverse()","25":"Reverse::::reverse()","26":"Reverse::::reverse()","27":"Reverse::::reverse()","29":"Reverse::::reverse(java.lang.Iterable<A>)","30":"Reverse::::reverse(java.lang.Iterable<A>)","31":"Reverse::::reverse(java.lang.Iterable<A>)"},"test_reverse_method_lines_dic":{"26":"ReverseTest::::createTestSubject()","27":"ReverseTest::::createTestSubject()","28":"ReverseTest::::createTestSubject()","29":"ReverseTest::::createTestSubject()","31":"ReverseTest::::iteratesElementsOfAnIterableBackwards()","32":"ReverseTest::::iteratesElementsOfAnIterableBackwards()","33":"ReverseTest::::iteratesElementsOfAnIterableBackwards()","34":"ReverseTest::::iteratesElementsOfAnIterableBackwards()","35":"ReverseTest::::iteratesElementsOfAnIterableBackwards()","36":"ReverseTest::::iteratesElementsOfAnIterableBackwards()","37":"ReverseTest::::iteratesElementsOfAnIterableBackwards()","39":"ReverseTest::::doesNotBeginReversingUntilIterated()","40":"ReverseTest::::doesNotBeginReversingUntilIterated()","41":"ReverseTest::::doesNotBeginReversingUntilIterated()","42":"ReverseTest::::doesNotBeginReversingUntilIterated()","43":"ReverseTest::::doesNotBeginReversingUntilIterated()","44":"ReverseTest::::doesNotBeginReversingUntilIterated()","45":"ReverseTest::::doesNotBeginReversingUntilIterated()","46":"ReverseTest::::doesNotBeginReversingUntilIterated()","47":"ReverseTest::::doesNotBeginReversingUntilIterated()","48":"ReverseTest::::doesNotBeginReversingUntilIterated()","49":"ReverseTest::::doesNotBeginReversingUntilIterated()","50":"ReverseTest::::doesNotBeginReversingUntilIterated()","51":"ReverseTest::::doesNotBeginReversingUntilIterated()","52":"ReverseTest::::doesNotBeginReversingUntilIterated()","54":"ReverseTest::::doubleReverseIsNoOp()","55":"ReverseTest::::doubleReverseIsNoOp()","56":"ReverseTest::::doubleReverseIsNoOp()","57":"ReverseTest::::doubleReverseIsNoOp()"},"tests":[{"test_lines":[26,29],"covered_lines":[14,16,17,26]},{"test_lines":[31,37],"covered_lines":[14,16,17,21,26,30]},{"test_lines":[39,52],"covered_lines":[14,16,17,21,26,30]},{"test_lines":[54,57],"covered_lines":[14,16,17,21,26,30]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn1/Repeat.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.internal.iteration.RepetitiousIterator;\n","\n","/**\n"," * Given a value, return an infinite <code>Iterable</code> that repeatedly iterates that value.\n"," *\n"," * @param <A> The Iterable element type\n"," */\n","public final class Repeat<A> implements Fn1<A, Iterable<A>> {\n","\n","    private static final Repeat<?> INSTANCE = new Repeat<>();\n","\n","    private Repeat() {\n","    }\n","\n","    @Override\n","    public Iterable<A> checkedApply(A a) {\n","        return () -> new RepetitiousIterator<>(a);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> Repeat<A> repeat() {\n","        return (Repeat<A>) INSTANCE;\n","    }\n","\n","    public static <A> Iterable<A> repeat(A a) {\n","        return Repeat.<A>repeat().apply(a);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.ImmutableIteration;\n","import testsupport.traits.InfiniteIteration;\n","import testsupport.traits.Laziness;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Repeat.repeat;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Take.take;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IterableMatcher.iterates;\n","\n","@RunWith(Traits.class)\n","public class RepeatTest {\n","\n","    @TestTraits({Laziness.class, ImmutableIteration.class, InfiniteIteration.class})\n","    public Repeat<?> createTestSubject() {\n","        return repeat();\n","    }\n","\n","    @Test\n","    public void repeatsTheSameValueForever() {\n","        assertThat(take(10, repeat(1)), iterates(1, 1, 1, 1, 1, 1, 1, 1, 1, 1));\n","    }\n","}\n"],"method_lines_dic":{"Repeat::::checkedApply(A)":[18,21],"Repeat::::repeat()":[23,26],"Repeat::::repeat(A)":[28,30]},"test_method_lines_dic":{"RepeatTest::::createTestSubject()":[19,22],"RepeatTest::::repeatsTheSameValueForever()":[24,27]},"reverse_method_lines_dic":{"18":"Repeat::::checkedApply(A)","19":"Repeat::::checkedApply(A)","20":"Repeat::::checkedApply(A)","21":"Repeat::::checkedApply(A)","23":"Repeat::::repeat()","24":"Repeat::::repeat()","25":"Repeat::::repeat()","26":"Repeat::::repeat()","28":"Repeat::::repeat(A)","29":"Repeat::::repeat(A)","30":"Repeat::::repeat(A)"},"test_reverse_method_lines_dic":{"19":"RepeatTest::::createTestSubject()","20":"RepeatTest::::createTestSubject()","21":"RepeatTest::::createTestSubject()","22":"RepeatTest::::createTestSubject()","24":"RepeatTest::::repeatsTheSameValueForever()","25":"RepeatTest::::repeatsTheSameValueForever()","26":"RepeatTest::::repeatsTheSameValueForever()","27":"RepeatTest::::repeatsTheSameValueForever()"},"tests":[{"test_lines":[19,22],"covered_lines":[13,15,16,25]},{"test_lines":[24,27],"covered_lines":[13,15,16,20,25,29]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn1/Tail.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Drop.drop;\n","\n","/**\n"," * Returns the tail of an <code>Iterable</code>; the is, an <code>Iterable</code> of all the elements except for the\n"," * head element. If the input <code>Iterable</code> is empty, the result is also an empty <code>Iterable</code>;\n"," *\n"," * @param <A> the Iterable element type\n"," */\n","public final class Tail<A> implements Fn1<Iterable<A>, Iterable<A>> {\n","\n","    private static final Tail<?> INSTANCE = new Tail<>();\n","\n","    private Tail() {\n","    }\n","\n","    @Override\n","    public Iterable<A> checkedApply(Iterable<A> as) {\n","        return drop(1, as);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> Tail<A> tail() {\n","        return (Tail<A>) INSTANCE;\n","    }\n","\n","    public static <A> Iterable<A> tail(Iterable<A> as) {\n","        return Tail.<A>tail().apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn1;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.EmptyIterableSupport;\n","import testsupport.traits.FiniteIteration;\n","import testsupport.traits.ImmutableIteration;\n","import testsupport.traits.Laziness;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Tail.tail;\n","import static java.util.Arrays.asList;\n","import static java.util.Collections.emptyList;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IterableMatcher.iterates;\n","\n","@RunWith(Traits.class)\n","public class TailTest {\n","\n","    @TestTraits({Laziness.class, EmptyIterableSupport.class, FiniteIteration.class, ImmutableIteration.class})\n","    public Fn1<? extends Iterable<?>, ?> createTraitsTestSubject() {\n","        return tail();\n","    }\n","\n","    @Test\n","    public void skipsFirstElementOfNonEmptyList() {\n","        assertThat(tail(asList(1, 2, 3)), iterates(2, 3));\n","    }\n","\n","    @Test\n","    public void isEmptyIfEmptyIterable() {\n","        assertThat(tail(emptyList()), iterates());\n","    }\n","}"],"method_lines_dic":{"Tail::::checkedApply(java.lang.Iterable<A>)":[20,23],"Tail::::tail()":[25,28],"Tail::::tail(java.lang.Iterable<A>)":[30,32]},"test_method_lines_dic":{"TailTest::::createTraitsTestSubject()":[22,25],"TailTest::::skipsFirstElementOfNonEmptyList()":[27,30],"TailTest::::isEmptyIfEmptyIterable()":[32,35]},"reverse_method_lines_dic":{"20":"Tail::::checkedApply(java.lang.Iterable<A>)","21":"Tail::::checkedApply(java.lang.Iterable<A>)","22":"Tail::::checkedApply(java.lang.Iterable<A>)","23":"Tail::::checkedApply(java.lang.Iterable<A>)","25":"Tail::::tail()","26":"Tail::::tail()","27":"Tail::::tail()","28":"Tail::::tail()","30":"Tail::::tail(java.lang.Iterable<A>)","31":"Tail::::tail(java.lang.Iterable<A>)","32":"Tail::::tail(java.lang.Iterable<A>)"},"test_reverse_method_lines_dic":{"22":"TailTest::::createTraitsTestSubject()","23":"TailTest::::createTraitsTestSubject()","24":"TailTest::::createTraitsTestSubject()","25":"TailTest::::createTraitsTestSubject()","27":"TailTest::::skipsFirstElementOfNonEmptyList()","28":"TailTest::::skipsFirstElementOfNonEmptyList()","29":"TailTest::::skipsFirstElementOfNonEmptyList()","30":"TailTest::::skipsFirstElementOfNonEmptyList()","32":"TailTest::::isEmptyIfEmptyIterable()","33":"TailTest::::isEmptyIfEmptyIterable()","34":"TailTest::::isEmptyIfEmptyIterable()","35":"TailTest::::isEmptyIfEmptyIterable()"},"tests":[{"test_lines":[22,25],"covered_lines":[15,17,18,27]},{"test_lines":[27,30],"covered_lines":[15,17,18,22,27,31]},{"test_lines":[32,35],"covered_lines":[15,17,18,22,27,31]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/ToArray.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","\n","import java.lang.reflect.Array;\n","import java.util.Collection;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Size.size;\n","\n","/**\n"," * Write all the elements of an {@link Iterable} directly into an array of the specified type. If the {@link Iterable}\n"," * is an instance of {@link Collection}, use {@link Collection#toArray(Object[])}.\n"," *\n"," * @param <A> the {@link Iterable} element type\n"," */\n","public final class ToArray<A> implements Fn2<Class<A[]>, Iterable<? extends A>, A[]> {\n","\n","    private static final ToArray<?> INSTANCE = new ToArray<>();\n","\n","    private ToArray() {\n","    }\n","\n","    @Override\n","    @SuppressWarnings(\"unchecked\")\n","    public A[] checkedApply(Class<A[]> arrayType, Iterable<? extends A> as) {\n","        A[] array = (A[]) Array.newInstance(arrayType.getComponentType(), size(as).intValue());\n","        if (as instanceof Collection)\n","            return ((Collection<A>) as).toArray(array);\n","\n","        int index = 0;\n","        for (A a : as) {\n","            array[index++] = a;\n","        }\n","        return array;\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> ToArray<A> toArray() {\n","        return (ToArray<A>) INSTANCE;\n","    }\n","\n","    public static <A> Fn1<Iterable<? extends A>, A[]> toArray(Class<A[]> arrayType) {\n","        return ToArray.<A>toArray().apply(arrayType);\n","    }\n","\n","    public static <A> A[] toArray(Class<A[]> arrayType, Iterable<? extends A> as) {\n","        return toArray(arrayType).apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import org.junit.Test;\n","\n","import java.util.AbstractCollection;\n","import java.util.Arrays;\n","import java.util.Iterator;\n","import java.util.List;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.ToArray.toArray;\n","import static java.util.Arrays.asList;\n","import static java.util.Collections.emptyIterator;\n","import static org.junit.Assert.assertArrayEquals;\n","\n","public class ToArrayTest {\n","\n","    @Test\n","    public void writesIterableToArray() {\n","        assertArrayEquals(new Integer[]{1, 2, 3}, toArray(Integer[].class, asList(1, 2, 3)));\n","\n","        List<? extends Integer> variance = asList(1, 2, 3);\n","        assertArrayEquals(new Object[]{1, 2, 3}, toArray(Object[].class, variance));\n","    }\n","\n","    @Test\n","    public void usesCollectionToArrayIfPossible() {\n","        Object sentinel = new Object();\n","        class CustomCollection extends AbstractCollection<Object> {\n","            @Override\n","            public Iterator<Object> iterator() {\n","                return emptyIterator();\n","            }\n","\n","            @Override\n","            public int size() {\n","                return 0;\n","            }\n","\n","            @Override\n","            @SuppressWarnings(\"unchecked\")\n","            public <T> T[] toArray(T[] a) {\n","                T[] result = Arrays.copyOf(a, 1);\n","                result[0] = (T) sentinel;\n","                return result;\n","            }\n","        }\n","\n","        assertArrayEquals(new Object[]{sentinel}, toArray(Object[].class, new CustomCollection()));\n","    }\n","}"],"method_lines_dic":{"ToArray::::checkedApply(java.lang.Class<A[]>,java.lang.Iterable<? extends A>)":[24,36],"ToArray::::toArray()":[38,41],"ToArray::::toArray(java.lang.Class<A[]>)":[43,45],"ToArray::::toArray(java.lang.Class<A[]>,java.lang.Iterable<? extends A>)":[47,49]},"test_method_lines_dic":{"ToArrayTest::::writesIterableToArray()":[17,23],"ToArrayTest::::usesCollectionToArrayIfPossible()":[25,49]},"reverse_method_lines_dic":{"24":"ToArray::::checkedApply(java.lang.Class<A[]>,java.lang.Iterable<? extends A>)","25":"ToArray::::checkedApply(java.lang.Class<A[]>,java.lang.Iterable<? extends A>)","26":"ToArray::::checkedApply(java.lang.Class<A[]>,java.lang.Iterable<? extends A>)","27":"ToArray::::checkedApply(java.lang.Class<A[]>,java.lang.Iterable<? extends A>)","28":"ToArray::::checkedApply(java.lang.Class<A[]>,java.lang.Iterable<? extends A>)","29":"ToArray::::checkedApply(java.lang.Class<A[]>,java.lang.Iterable<? extends A>)","30":"ToArray::::checkedApply(java.lang.Class<A[]>,java.lang.Iterable<? extends A>)","31":"ToArray::::checkedApply(java.lang.Class<A[]>,java.lang.Iterable<? extends A>)","32":"ToArray::::checkedApply(java.lang.Class<A[]>,java.lang.Iterable<? extends A>)","33":"ToArray::::checkedApply(java.lang.Class<A[]>,java.lang.Iterable<? extends A>)","34":"ToArray::::checkedApply(java.lang.Class<A[]>,java.lang.Iterable<? extends A>)","35":"ToArray::::checkedApply(java.lang.Class<A[]>,java.lang.Iterable<? extends A>)","36":"ToArray::::checkedApply(java.lang.Class<A[]>,java.lang.Iterable<? extends A>)","38":"ToArray::::toArray()","39":"ToArray::::toArray()","40":"ToArray::::toArray()","41":"ToArray::::toArray()","43":"ToArray::::toArray(java.lang.Class<A[]>)","44":"ToArray::::toArray(java.lang.Class<A[]>)","45":"ToArray::::toArray(java.lang.Class<A[]>)","47":"ToArray::::toArray(java.lang.Class<A[]>,java.lang.Iterable<? extends A>)","48":"ToArray::::toArray(java.lang.Class<A[]>,java.lang.Iterable<? extends A>)","49":"ToArray::::toArray(java.lang.Class<A[]>,java.lang.Iterable<? extends A>)"},"test_reverse_method_lines_dic":{"17":"ToArrayTest::::writesIterableToArray()","18":"ToArrayTest::::writesIterableToArray()","19":"ToArrayTest::::writesIterableToArray()","20":"ToArrayTest::::writesIterableToArray()","21":"ToArrayTest::::writesIterableToArray()","22":"ToArrayTest::::writesIterableToArray()","23":"ToArrayTest::::writesIterableToArray()","25":"ToArrayTest::::usesCollectionToArrayIfPossible()","26":"ToArrayTest::::usesCollectionToArrayIfPossible()","27":"ToArrayTest::::usesCollectionToArrayIfPossible()","28":"ToArrayTest::::usesCollectionToArrayIfPossible()","29":"ToArrayTest::::usesCollectionToArrayIfPossible()","30":"ToArrayTest::::usesCollectionToArrayIfPossible()","31":"ToArrayTest::::usesCollectionToArrayIfPossible()","32":"ToArrayTest::::usesCollectionToArrayIfPossible()","33":"ToArrayTest::::usesCollectionToArrayIfPossible()","34":"ToArrayTest::::usesCollectionToArrayIfPossible()","35":"ToArrayTest::::usesCollectionToArrayIfPossible()","36":"ToArrayTest::::usesCollectionToArrayIfPossible()","37":"ToArrayTest::::usesCollectionToArrayIfPossible()","38":"ToArrayTest::::usesCollectionToArrayIfPossible()","39":"ToArrayTest::::usesCollectionToArrayIfPossible()","40":"ToArrayTest::::usesCollectionToArrayIfPossible()","41":"ToArrayTest::::usesCollectionToArrayIfPossible()","42":"ToArrayTest::::usesCollectionToArrayIfPossible()","43":"ToArrayTest::::usesCollectionToArrayIfPossible()","44":"ToArrayTest::::usesCollectionToArrayIfPossible()","45":"ToArrayTest::::usesCollectionToArrayIfPossible()","46":"ToArrayTest::::usesCollectionToArrayIfPossible()","47":"ToArrayTest::::usesCollectionToArrayIfPossible()","48":"ToArrayTest::::usesCollectionToArrayIfPossible()","49":"ToArrayTest::::usesCollectionToArrayIfPossible()"},"tests":[{"test_lines":[17,23],"covered_lines":[19,21,22,27,28,29,40,44,48]},{"test_lines":[25,49],"covered_lines":[19,21,22,27,28,29,40,44,48]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/Snoc.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","import com.jnape.palatable.lambda.internal.iteration.SnocIterable;\n","\n","/**\n"," * Opposite of {@link Cons}: lazily append an element to the end of the given {@link Iterable}.\n"," * <p>\n"," * Note that obtaining both laziness and stack-safety is particularly tricky here, and requires an initial eager\n"," * deforestation of <code>O(k)</code> traversals where <code>k</code> is the number of contiguously nested\n"," * {@link Snoc}s.\n"," *\n"," * @param <A> the Iterable element type\n"," */\n","public final class Snoc<A> implements Fn2<A, Iterable<A>, Iterable<A>> {\n","\n","    private static final Snoc<?> INSTANCE = new Snoc<>();\n","\n","    private Snoc() {\n","    }\n","\n","    @Override\n","    public Iterable<A> checkedApply(A a, Iterable<A> as) {\n","        return new SnocIterable<>(a, as);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> Snoc<A> snoc() {\n","        return (Snoc<A>) INSTANCE;\n","    }\n","\n","    public static <A> Fn1<Iterable<A>, Iterable<A>> snoc(A a) {\n","        return Snoc.<A>snoc().apply(a);\n","    }\n","\n","    public static <A> Iterable<A> snoc(A a, Iterable<A> as) {\n","        return snoc(a).apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.EmptyIterableSupport;\n","import testsupport.traits.FiniteIteration;\n","import testsupport.traits.ImmutableIteration;\n","import testsupport.traits.InfiniteIterableSupport;\n","import testsupport.traits.Laziness;\n","\n","import java.util.Collections;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Snoc.snoc;\n","import static java.util.Arrays.asList;\n","import static java.util.Collections.emptyList;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IterableMatcher.iterates;\n","\n","@RunWith(Traits.class)\n","public class SnocTest {\n","\n","    @TestTraits({Laziness.class, EmptyIterableSupport.class, ImmutableIteration.class, FiniteIteration.class, InfiniteIterableSupport.class})\n","    public Fn1<Iterable<Object>, Iterable<Object>> testSubject() {\n","        return snoc(1);\n","    }\n","\n","    @Test\n","    public void appendToEmptyIterable() {\n","        assertThat(snoc(1, Collections::emptyIterator), iterates(1));\n","    }\n","\n","    @Test\n","    public void appendToNonEmptyIterable() {\n","        assertThat(snoc(4, asList(1, 2, 3)), iterates(1, 2, 3, 4));\n","    }\n","\n","    @Test\n","    public void deforestingOrder() {\n","        assertThat(snoc(3, snoc(2, snoc(1, emptyList()))), iterates(1, 2, 3));\n","    }\n","}"],"method_lines_dic":{"Snoc::::checkedApply(A,java.lang.Iterable<A>)":[23,26],"Snoc::::snoc()":[28,31],"Snoc::::snoc(A)":[33,35],"Snoc::::snoc(A,java.lang.Iterable<A>)":[37,39]},"test_method_lines_dic":{"SnocTest::::testSubject()":[25,28],"SnocTest::::appendToEmptyIterable()":[30,33],"SnocTest::::appendToNonEmptyIterable()":[35,38],"SnocTest::::deforestingOrder()":[40,43]},"reverse_method_lines_dic":{"23":"Snoc::::checkedApply(A,java.lang.Iterable<A>)","24":"Snoc::::checkedApply(A,java.lang.Iterable<A>)","25":"Snoc::::checkedApply(A,java.lang.Iterable<A>)","26":"Snoc::::checkedApply(A,java.lang.Iterable<A>)","28":"Snoc::::snoc()","29":"Snoc::::snoc()","30":"Snoc::::snoc()","31":"Snoc::::snoc()","33":"Snoc::::snoc(A)","34":"Snoc::::snoc(A)","35":"Snoc::::snoc(A)","37":"Snoc::::snoc(A,java.lang.Iterable<A>)","38":"Snoc::::snoc(A,java.lang.Iterable<A>)","39":"Snoc::::snoc(A,java.lang.Iterable<A>)"},"test_reverse_method_lines_dic":{"25":"SnocTest::::testSubject()","26":"SnocTest::::testSubject()","27":"SnocTest::::testSubject()","28":"SnocTest::::testSubject()","30":"SnocTest::::appendToEmptyIterable()","31":"SnocTest::::appendToEmptyIterable()","32":"SnocTest::::appendToEmptyIterable()","33":"SnocTest::::appendToEmptyIterable()","35":"SnocTest::::appendToNonEmptyIterable()","36":"SnocTest::::appendToNonEmptyIterable()","37":"SnocTest::::appendToNonEmptyIterable()","38":"SnocTest::::appendToNonEmptyIterable()","40":"SnocTest::::deforestingOrder()","41":"SnocTest::::deforestingOrder()","42":"SnocTest::::deforestingOrder()","43":"SnocTest::::deforestingOrder()"},"tests":[{"test_lines":[25,28],"covered_lines":[18,20,21,30,34]},{"test_lines":[30,33],"covered_lines":[18,20,21,25,30,34,38]},{"test_lines":[35,38],"covered_lines":[18,20,21,25,30,34,38]},{"test_lines":[40,43],"covered_lines":[18,20,21,25,30,34,38]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/TakeWhile.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","import com.jnape.palatable.lambda.internal.iteration.PredicatedTakingIterable;\n","\n","/**\n"," * Lazily limit the <code>Iterable</code> to the first group of contiguous elements that satisfy the predicate by\n"," * iterating up to, but not including, the first element for which the predicate evaluates to <code>false</code>.\n"," *\n"," * @param <A> The Iterable element type\n"," * @see Take\n"," * @see Filter\n"," * @see DropWhile\n"," */\n","public final class TakeWhile<A> implements Fn2<Fn1<? super A, ? extends Boolean>, Iterable<A>, Iterable<A>> {\n","\n","    private static final TakeWhile<?> INSTANCE = new TakeWhile<>();\n","\n","    private TakeWhile() {\n","    }\n","\n","    @Override\n","    public Iterable<A> checkedApply(Fn1<? super A, ? extends Boolean> predicate, Iterable<A> as) {\n","        return new PredicatedTakingIterable<>(predicate, as);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> TakeWhile<A> takeWhile() {\n","        return (TakeWhile<A>) INSTANCE;\n","    }\n","\n","    public static <A> Fn1<Iterable<A>, Iterable<A>> takeWhile(Fn1<? super A, ? extends Boolean> predicate) {\n","        return TakeWhile.<A>takeWhile().apply(predicate);\n","    }\n","\n","    public static <A> Iterable<A> takeWhile(Fn1<? super A, ? extends Boolean> predicate, Iterable<A> as) {\n","        return TakeWhile.<A>takeWhile(predicate).apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.specialized.Predicate;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.EmptyIterableSupport;\n","import testsupport.traits.FiniteIteration;\n","import testsupport.traits.ImmutableIteration;\n","import testsupport.traits.Laziness;\n","\n","import java.util.ArrayList;\n","import java.util.List;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.TakeWhile.takeWhile;\n","import static java.util.Arrays.asList;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IterableMatcher.isEmpty;\n","import static testsupport.matchers.IterableMatcher.iterates;\n","\n","@RunWith(Traits.class)\n","public class TakeWhileTest {\n","\n","    @TestTraits({FiniteIteration.class, EmptyIterableSupport.class, ImmutableIteration.class, Laziness.class})\n","    public Fn1<Iterable<Object>, Iterable<Object>> createTestObject() {\n","        return takeWhile(constantly(true));\n","    }\n","\n","    @Test\n","    public void takesElementsWhilePredicateIsTrue() {\n","        Predicate<Integer> lessThan3 = integer -> integer < 3;\n","        Iterable<Integer>  numbers   = takeWhile(lessThan3, asList(1, 2, 3, 4, 5));\n","        assertThat(numbers, iterates(1, 2));\n","    }\n","\n","    @Test\n","    public void takesAllElementsIfPredicateNeverFails() {\n","        String[] requirements = {\"fast\", \"good\", \"cheap\"};\n","        assertThat(\n","                takeWhile(constantly(true), asList(requirements)),\n","                iterates(requirements)\n","        );\n","    }\n","\n","    @Test\n","    public void takesNoElementsIfPredicateImmediatelyFails() {\n","        assertThat(takeWhile(constantly(false), asList(1, 2, 3)), isEmpty());\n","    }\n","\n","    @Test\n","    public void deforestingExecutesPredicatesInOrder() {\n","        List<Integer> innerInvocations = new ArrayList<>();\n","        List<Integer> outerInvocations = new ArrayList<>();\n","        takeWhile(y -> {\n","            outerInvocations.add(y);\n","            return true;\n","        }, takeWhile(x -> {\n","            innerInvocations.add(x);\n","            return x < 3;\n","        }, asList(1, 2, 3))).forEach(__ -> {});\n","        assertThat(innerInvocations, iterates(1, 2, 3));\n","        assertThat(outerInvocations, iterates(1, 2));\n","    }\n","}\n"],"method_lines_dic":{"TakeWhile::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)":[23,26],"TakeWhile::::takeWhile()":[28,31],"TakeWhile::::takeWhile(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)":[33,35],"TakeWhile::::takeWhile(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)":[37,39]},"test_method_lines_dic":{"TakeWhileTest::::createTestObject()":[27,30],"TakeWhileTest::::takesElementsWhilePredicateIsTrue()":[32,37],"TakeWhileTest::::takesAllElementsIfPredicateNeverFails()":[39,46],"TakeWhileTest::::takesNoElementsIfPredicateImmediatelyFails()":[48,51],"TakeWhileTest::::deforestingExecutesPredicatesInOrder()":[53,66]},"reverse_method_lines_dic":{"23":"TakeWhile::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","24":"TakeWhile::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","25":"TakeWhile::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","26":"TakeWhile::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","28":"TakeWhile::::takeWhile()","29":"TakeWhile::::takeWhile()","30":"TakeWhile::::takeWhile()","31":"TakeWhile::::takeWhile()","33":"TakeWhile::::takeWhile(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)","34":"TakeWhile::::takeWhile(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)","35":"TakeWhile::::takeWhile(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)","37":"TakeWhile::::takeWhile(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","38":"TakeWhile::::takeWhile(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","39":"TakeWhile::::takeWhile(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)"},"test_reverse_method_lines_dic":{"27":"TakeWhileTest::::createTestObject()","28":"TakeWhileTest::::createTestObject()","29":"TakeWhileTest::::createTestObject()","30":"TakeWhileTest::::createTestObject()","32":"TakeWhileTest::::takesElementsWhilePredicateIsTrue()","33":"TakeWhileTest::::takesElementsWhilePredicateIsTrue()","34":"TakeWhileTest::::takesElementsWhilePredicateIsTrue()","35":"TakeWhileTest::::takesElementsWhilePredicateIsTrue()","36":"TakeWhileTest::::takesElementsWhilePredicateIsTrue()","37":"TakeWhileTest::::takesElementsWhilePredicateIsTrue()","39":"TakeWhileTest::::takesAllElementsIfPredicateNeverFails()","40":"TakeWhileTest::::takesAllElementsIfPredicateNeverFails()","41":"TakeWhileTest::::takesAllElementsIfPredicateNeverFails()","42":"TakeWhileTest::::takesAllElementsIfPredicateNeverFails()","43":"TakeWhileTest::::takesAllElementsIfPredicateNeverFails()","44":"TakeWhileTest::::takesAllElementsIfPredicateNeverFails()","45":"TakeWhileTest::::takesAllElementsIfPredicateNeverFails()","46":"TakeWhileTest::::takesAllElementsIfPredicateNeverFails()","48":"TakeWhileTest::::takesNoElementsIfPredicateImmediatelyFails()","49":"TakeWhileTest::::takesNoElementsIfPredicateImmediatelyFails()","50":"TakeWhileTest::::takesNoElementsIfPredicateImmediatelyFails()","51":"TakeWhileTest::::takesNoElementsIfPredicateImmediatelyFails()","53":"TakeWhileTest::::deforestingExecutesPredicatesInOrder()","54":"TakeWhileTest::::deforestingExecutesPredicatesInOrder()","55":"TakeWhileTest::::deforestingExecutesPredicatesInOrder()","56":"TakeWhileTest::::deforestingExecutesPredicatesInOrder()","57":"TakeWhileTest::::deforestingExecutesPredicatesInOrder()","58":"TakeWhileTest::::deforestingExecutesPredicatesInOrder()","59":"TakeWhileTest::::deforestingExecutesPredicatesInOrder()","60":"TakeWhileTest::::deforestingExecutesPredicatesInOrder()","61":"TakeWhileTest::::deforestingExecutesPredicatesInOrder()","62":"TakeWhileTest::::deforestingExecutesPredicatesInOrder()","63":"TakeWhileTest::::deforestingExecutesPredicatesInOrder()","64":"TakeWhileTest::::deforestingExecutesPredicatesInOrder()","65":"TakeWhileTest::::deforestingExecutesPredicatesInOrder()","66":"TakeWhileTest::::deforestingExecutesPredicatesInOrder()"},"tests":[{"test_lines":[27,30],"covered_lines":[18,20,21,30,34]},{"test_lines":[32,37],"covered_lines":[18,20,21,25,30,34,38]},{"test_lines":[39,46],"covered_lines":[18,20,21,25,30,34,38]},{"test_lines":[48,51],"covered_lines":[18,20,21,25,30,34,38]},{"test_lines":[53,66],"covered_lines":[18,20,21,25,30,34,38]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/Into.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","\n","import java.util.Map;\n","\n","/**\n"," * Given an <code>{@link Fn2}&lt;A, B, C&gt;</code> and a <code>{@link Map.Entry}&lt;A, B&gt;</code>, destructure the\n"," * entry and apply the key and value as arguments to the function, returning the result.\n"," *\n"," * @param <A> the first argument type\n"," * @param <B> the second argument type\n"," * @param <C> the result type\n"," */\n","public final class Into<A, B, C> implements Fn2<Fn2<? super A, ? super B, ? extends C>, Map.Entry<A, B>, C> {\n","\n","    private static final Into<?, ?, ?> INSTANCE = new Into<>();\n","\n","    private Into() {\n","    }\n","\n","    @Override\n","    public C checkedApply(Fn2<? super A, ? super B, ? extends C> fn, Map.Entry<A, B> entry) {\n","        return fn.apply(entry.getKey(), entry.getValue());\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A, B, C> Into<A, B, C> into() {\n","        return (Into<A, B, C>) INSTANCE;\n","    }\n","\n","    public static <A, B, C> Fn1<Map.Entry<A, B>, C> into(\n","            Fn2<? super A, ? super B, ? extends C> fn) {\n","        return Into.<A, B, C>into().apply(fn);\n","    }\n","\n","    public static <A, B, C> C into(Fn2<? super A, ? super B, ? extends C> fn,\n","                                   Map.Entry<A, B> entry) {\n","        return Into.<A, B, C>into(fn).apply(entry);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Into.into;\n","import static org.junit.Assert.assertEquals;\n","\n","public class IntoTest {\n","\n","    @Test\n","    public void appliesTupleToFunction() {\n","        assertEquals((Integer) 3, into((a, b) -> a + b, tuple(1, 2)));\n","    }\n","}"],"method_lines_dic":{"Into::::checkedApply(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super B, ? extends C>,java.util.Map.Entry<A, B>)":[23,26],"Into::::into()":[28,31],"Into::::into(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super B, ? extends C>)":[33,36],"Into::::into(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super B, ? extends C>,java.util.Map.Entry<A, B>)":[38,41]},"test_method_lines_dic":{"IntoTest::::appliesTupleToFunction()":[11,14]},"reverse_method_lines_dic":{"23":"Into::::checkedApply(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super B, ? extends C>,java.util.Map.Entry<A, B>)","24":"Into::::checkedApply(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super B, ? extends C>,java.util.Map.Entry<A, B>)","25":"Into::::checkedApply(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super B, ? extends C>,java.util.Map.Entry<A, B>)","26":"Into::::checkedApply(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super B, ? extends C>,java.util.Map.Entry<A, B>)","28":"Into::::into()","29":"Into::::into()","30":"Into::::into()","31":"Into::::into()","33":"Into::::into(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super B, ? extends C>)","34":"Into::::into(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super B, ? extends C>)","35":"Into::::into(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super B, ? extends C>)","36":"Into::::into(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super B, ? extends C>)","38":"Into::::into(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super B, ? extends C>,java.util.Map.Entry<A, B>)","39":"Into::::into(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super B, ? extends C>,java.util.Map.Entry<A, B>)","40":"Into::::into(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super B, ? extends C>,java.util.Map.Entry<A, B>)","41":"Into::::into(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super B, ? extends C>,java.util.Map.Entry<A, B>)"},"test_reverse_method_lines_dic":{"11":"IntoTest::::appliesTupleToFunction()","12":"IntoTest::::appliesTupleToFunction()","13":"IntoTest::::appliesTupleToFunction()","14":"IntoTest::::appliesTupleToFunction()"},"tests":[{"test_lines":[11,14],"covered_lines":[18,20,21,25,30,35,40]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/ReduceLeft.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","import com.jnape.palatable.lambda.functions.builtin.fn3.FoldLeft;\n","\n","import java.util.Iterator;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","import static com.jnape.palatable.lambda.functions.builtin.fn3.FoldLeft.foldLeft;\n","\n","/**\n"," * Given an <code>{@link Iterable}&lt;A&gt;</code> and a <code>{@link Fn2}&lt;A, A, A&gt;</code>, iteratively\n"," * accumulate over the {@link Iterable}, returning <code>{@link Maybe}&lt;A&gt;</code>. If the {@link Iterable} is\n"," * empty, the result is {@link Maybe#nothing()}; otherwise, the result is wrapped in {@link Maybe#just}. For this\n"," * reason, <code>null</code> accumulation results are considered erroneous and will throw.\n"," * <p>\n"," * This function is isomorphic to a left fold over the {@link Iterable} where the head element is the starting\n"," * accumulation value and the result is lifted into {@link Maybe}.\n"," *\n"," * @param <A> The input Iterable element type, as well as the accumulation type\n"," * @see ReduceRight\n"," * @see FoldLeft\n"," */\n","public final class ReduceLeft<A> implements Fn2<Fn2<? super A, ? super A, ? extends A>, Iterable<A>, Maybe<A>> {\n","\n","    private static final ReduceLeft<?> INSTANCE = new ReduceLeft<>();\n","\n","    private ReduceLeft() {\n","    }\n","\n","    @Override\n","    public Maybe<A> checkedApply(Fn2<? super A, ? super A, ? extends A> fn, Iterable<A> as) {\n","        Iterator<A> iterator = as.iterator();\n","        return !iterator.hasNext() ? nothing() : just(foldLeft(fn, iterator.next(), () -> iterator));\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> ReduceLeft<A> reduceLeft() {\n","        return (ReduceLeft<A>) INSTANCE;\n","    }\n","\n","    public static <A> Fn1<Iterable<A>, Maybe<A>> reduceLeft(Fn2<? super A, ? super A, ? extends A> fn) {\n","        return ReduceLeft.<A>reduceLeft().apply(fn);\n","    }\n","\n","    public static <A> Maybe<A> reduceLeft(Fn2<? super A, ? super A, ? extends A> fn, Iterable<A> as) {\n","        return ReduceLeft.<A>reduceLeft(fn).apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.ReduceLeft.reduceLeft;\n","import static java.util.Arrays.asList;\n","import static java.util.Collections.emptyList;\n","import static org.hamcrest.core.Is.is;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.functions.ExplainFold.explainFold;\n","\n","public class ReduceLeftTest {\n","\n","    @Test\n","    public void reduceLeftAccumulatesLeftToRightUsingFirstElementAsStartingAccumulation() {\n","        assertThat(reduceLeft(explainFold(), asList(\"1\", \"2\", \"3\", \"4\", \"5\")), is(just(\"((((1 + 2) + 3) + 4) + 5)\")));\n","    }\n","\n","    @Test\n","    public void isEmptyIfIterableIsEmpty() {\n","        assertThat(reduceLeft(explainFold(), emptyList()), is(nothing()));\n","    }\n","}\n"],"method_lines_dic":{"ReduceLeft::::checkedApply(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends A>,java.lang.Iterable<A>)":[34,38],"ReduceLeft::::reduceLeft()":[40,43],"ReduceLeft::::reduceLeft(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends A>)":[45,47],"ReduceLeft::::reduceLeft(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends A>,java.lang.Iterable<A>)":[49,51]},"test_method_lines_dic":{"ReduceLeftTest::::reduceLeftAccumulatesLeftToRightUsingFirstElementAsStartingAccumulation()":[16,19],"ReduceLeftTest::::isEmptyIfIterableIsEmpty()":[21,24]},"reverse_method_lines_dic":{"34":"ReduceLeft::::checkedApply(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends A>,java.lang.Iterable<A>)","35":"ReduceLeft::::checkedApply(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends A>,java.lang.Iterable<A>)","36":"ReduceLeft::::checkedApply(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends A>,java.lang.Iterable<A>)","37":"ReduceLeft::::checkedApply(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends A>,java.lang.Iterable<A>)","38":"ReduceLeft::::checkedApply(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends A>,java.lang.Iterable<A>)","40":"ReduceLeft::::reduceLeft()","41":"ReduceLeft::::reduceLeft()","42":"ReduceLeft::::reduceLeft()","43":"ReduceLeft::::reduceLeft()","45":"ReduceLeft::::reduceLeft(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends A>)","46":"ReduceLeft::::reduceLeft(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends A>)","47":"ReduceLeft::::reduceLeft(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends A>)","49":"ReduceLeft::::reduceLeft(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends A>,java.lang.Iterable<A>)","50":"ReduceLeft::::reduceLeft(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends A>,java.lang.Iterable<A>)","51":"ReduceLeft::::reduceLeft(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends A>,java.lang.Iterable<A>)"},"test_reverse_method_lines_dic":{"16":"ReduceLeftTest::::reduceLeftAccumulatesLeftToRightUsingFirstElementAsStartingAccumulation()","17":"ReduceLeftTest::::reduceLeftAccumulatesLeftToRightUsingFirstElementAsStartingAccumulation()","18":"ReduceLeftTest::::reduceLeftAccumulatesLeftToRightUsingFirstElementAsStartingAccumulation()","19":"ReduceLeftTest::::reduceLeftAccumulatesLeftToRightUsingFirstElementAsStartingAccumulation()","21":"ReduceLeftTest::::isEmptyIfIterableIsEmpty()","22":"ReduceLeftTest::::isEmptyIfIterableIsEmpty()","23":"ReduceLeftTest::::isEmptyIfIterableIsEmpty()","24":"ReduceLeftTest::::isEmptyIfIterableIsEmpty()"},"tests":[{"test_lines":[16,19],"covered_lines":[29,31,32,36,37,42,46,50]},{"test_lines":[21,24],"covered_lines":[29,31,32,36,37,42,46,50]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/Until.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","import com.jnape.palatable.lambda.io.IO;\n","\n","import static com.jnape.palatable.lambda.io.IO.io;\n","\n","/**\n"," * Given a {@link Fn1 predicate function} for a value of some type <code>A</code> and an {@link IO} that yields a value\n"," * of type <code>A</code>, produce an {@link IO} that repeatedly executes the original {@link IO} until the predicate\n"," * returns true when applied to the yielded value.\n"," *\n"," * @param <A> the {@link IO} value type\n"," */\n","public final class Until<A> implements Fn2<Fn1<? super A, ? extends Boolean>, IO<A>, IO<A>> {\n","\n","    private static final Until<?> INSTANCE = new Until<>();\n","\n","    private Until() {\n","    }\n","\n","    @Override\n","    public IO<A> checkedApply(Fn1<? super A, ? extends Boolean> pred, IO<A> io) {\n","        return io.flatMap(a -> pred.apply(a) ? io(a) : until(pred, io));\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> Until<A> until() {\n","        return (Until<A>) INSTANCE;\n","    }\n","\n","    public static <A> Fn1<IO<A>, IO<A>> until(Fn1<? super A, ? extends Boolean> pred) {\n","        return Until.<A>until().apply(pred);\n","    }\n","\n","    public static <A> IO<A> until(Fn1<? super A, ? extends Boolean> pred, IO<A> io) {\n","        return Until.<A>until(pred).apply(io);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import org.junit.Test;\n","\n","import java.util.concurrent.atomic.AtomicInteger;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Until.until;\n","import static com.jnape.palatable.lambda.io.IO.io;\n","import static org.hamcrest.CoreMatchers.equalTo;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IOMatcher.yieldsValue;\n","\n","public class UntilTest {\n","\n","    @Test\n","    public void repeatedlyExecutesUntilPredicateMatches() {\n","        AtomicInteger counter = new AtomicInteger(0);\n","        assertThat(until(x -> x == 10, io(counter::getAndIncrement)),\n","                   yieldsValue(equalTo(10)));\n","    }\n","\n","    @Test\n","    public void predicateThatImmediatelyMatchesDoesNotChangeIO() {\n","        assertThat(until(constantly(true), io(0)), yieldsValue(equalTo(0)));\n","    }\n","}"],"method_lines_dic":{"Until::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.io.IO<A>)":[23,26],"Until::::until()":[28,31],"Until::::until(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)":[33,35],"Until::::until(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.io.IO<A>)":[37,39]},"test_method_lines_dic":{"UntilTest::::repeatedlyExecutesUntilPredicateMatches()":[16,21],"UntilTest::::predicateThatImmediatelyMatchesDoesNotChangeIO()":[23,26]},"reverse_method_lines_dic":{"23":"Until::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.io.IO<A>)","24":"Until::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.io.IO<A>)","25":"Until::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.io.IO<A>)","26":"Until::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.io.IO<A>)","28":"Until::::until()","29":"Until::::until()","30":"Until::::until()","31":"Until::::until()","33":"Until::::until(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)","34":"Until::::until(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)","35":"Until::::until(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)","37":"Until::::until(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.io.IO<A>)","38":"Until::::until(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.io.IO<A>)","39":"Until::::until(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.io.IO<A>)"},"test_reverse_method_lines_dic":{"16":"UntilTest::::repeatedlyExecutesUntilPredicateMatches()","17":"UntilTest::::repeatedlyExecutesUntilPredicateMatches()","18":"UntilTest::::repeatedlyExecutesUntilPredicateMatches()","19":"UntilTest::::repeatedlyExecutesUntilPredicateMatches()","20":"UntilTest::::repeatedlyExecutesUntilPredicateMatches()","21":"UntilTest::::repeatedlyExecutesUntilPredicateMatches()","23":"UntilTest::::predicateThatImmediatelyMatchesDoesNotChangeIO()","24":"UntilTest::::predicateThatImmediatelyMatchesDoesNotChangeIO()","25":"UntilTest::::predicateThatImmediatelyMatchesDoesNotChangeIO()","26":"UntilTest::::predicateThatImmediatelyMatchesDoesNotChangeIO()"},"tests":[{"test_lines":[16,21],"covered_lines":[18,20,21,25,30,34,38]},{"test_lines":[23,26],"covered_lines":[18,20,21,25,30,34,38]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/ToMap.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn0;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","\n","import java.util.Map;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn3.FoldLeft.foldLeft;\n","\n","/**\n"," * Given an {@link Fn0} of some {@link Map} <code>M</code>, create an instance of <code>M</code> and put all of the\n"," * entries in the provided <code>Iterable</code> into the instance. Note that instances of <code>M</code> must support\n"," * {@link java.util.Map#put} (which is to say, must not throw on invocation).\n"," *\n"," * @param <K> the key element type\n"," * @param <V> the value element type\n"," * @param <M> the resulting map type\n"," */\n","public final class ToMap<K, V, M extends Map<K, V>> implements Fn2<Fn0<M>, Iterable<? extends Map.Entry<K, V>>, M> {\n","\n","    private static final ToMap<?, ?, ?> INSTANCE = new ToMap<>();\n","\n","    private ToMap() {\n","    }\n","\n","    @Override\n","    public M checkedApply(Fn0<M> mFn0, Iterable<? extends Map.Entry<K, V>> entries) {\n","        return foldLeft((m, kv) -> {\n","            m.put(kv.getKey(), kv.getValue());\n","            return m;\n","        }, mFn0.apply(), entries);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <K, V, M extends Map<K, V>> ToMap<K, V, M> toMap() {\n","        return (ToMap<K, V, M>) INSTANCE;\n","    }\n","\n","    public static <K, V, M extends Map<K, V>> Fn1<Iterable<? extends Map.Entry<K, V>>, M> toMap(Fn0<M> mFn0) {\n","        return ToMap.<K, V, M>toMap().apply(mFn0);\n","    }\n","\n","    public static <K, V, M extends Map<K, V>> M toMap(Fn0<M> mFn0,\n","                                                      Iterable<? extends Map.Entry<K, V>> entries) {\n","        return toMap(mFn0).apply(entries);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import org.junit.Test;\n","\n","import java.util.HashMap;\n","import java.util.Map;\n","\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.ToMap.toMap;\n","import static java.util.Arrays.asList;\n","import static org.junit.Assert.assertEquals;\n","\n","public class ToMapTest {\n","\n","    @Test\n","    @SuppressWarnings(\"serial\")\n","    public void collectsEntriesIntoMap() {\n","        Map<String, Integer> expected = new HashMap<String, Integer>() {{\n","            put(\"foo\", 1);\n","            put(\"bar\", 2);\n","            put(\"baz\", 3);\n","        }};\n","\n","        assertEquals(expected, toMap().apply(HashMap::new, asList(tuple(\"foo\", 1), tuple(\"bar\", 2), tuple(\"baz\", 3))));\n","    }\n","}"],"method_lines_dic":{"ToMap::::checkedApply(com.jnape.palatable.lambda.functions.Fn0<M>,java.lang.Iterable<? extends java.util.Map.Entry<K, V>>)":[27,33],"ToMap::::toMap()":[35,38],"ToMap::::toMap(com.jnape.palatable.lambda.functions.Fn0<M>)":[40,42],"ToMap::::toMap(com.jnape.palatable.lambda.functions.Fn0<M>,java.lang.Iterable<? extends java.util.Map.Entry<K, V>>)":[44,47]},"test_method_lines_dic":{"ToMapTest::::collectsEntriesIntoMap()":[15,25]},"reverse_method_lines_dic":{"27":"ToMap::::checkedApply(com.jnape.palatable.lambda.functions.Fn0<M>,java.lang.Iterable<? extends java.util.Map.Entry<K, V>>)","28":"ToMap::::checkedApply(com.jnape.palatable.lambda.functions.Fn0<M>,java.lang.Iterable<? extends java.util.Map.Entry<K, V>>)","29":"ToMap::::checkedApply(com.jnape.palatable.lambda.functions.Fn0<M>,java.lang.Iterable<? extends java.util.Map.Entry<K, V>>)","30":"ToMap::::checkedApply(com.jnape.palatable.lambda.functions.Fn0<M>,java.lang.Iterable<? extends java.util.Map.Entry<K, V>>)","31":"ToMap::::checkedApply(com.jnape.palatable.lambda.functions.Fn0<M>,java.lang.Iterable<? extends java.util.Map.Entry<K, V>>)","32":"ToMap::::checkedApply(com.jnape.palatable.lambda.functions.Fn0<M>,java.lang.Iterable<? extends java.util.Map.Entry<K, V>>)","33":"ToMap::::checkedApply(com.jnape.palatable.lambda.functions.Fn0<M>,java.lang.Iterable<? extends java.util.Map.Entry<K, V>>)","35":"ToMap::::toMap()","36":"ToMap::::toMap()","37":"ToMap::::toMap()","38":"ToMap::::toMap()","40":"ToMap::::toMap(com.jnape.palatable.lambda.functions.Fn0<M>)","41":"ToMap::::toMap(com.jnape.palatable.lambda.functions.Fn0<M>)","42":"ToMap::::toMap(com.jnape.palatable.lambda.functions.Fn0<M>)","44":"ToMap::::toMap(com.jnape.palatable.lambda.functions.Fn0<M>,java.lang.Iterable<? extends java.util.Map.Entry<K, V>>)","45":"ToMap::::toMap(com.jnape.palatable.lambda.functions.Fn0<M>,java.lang.Iterable<? extends java.util.Map.Entry<K, V>>)","46":"ToMap::::toMap(com.jnape.palatable.lambda.functions.Fn0<M>,java.lang.Iterable<? extends java.util.Map.Entry<K, V>>)","47":"ToMap::::toMap(com.jnape.palatable.lambda.functions.Fn0<M>,java.lang.Iterable<? extends java.util.Map.Entry<K, V>>)"},"test_reverse_method_lines_dic":{"15":"ToMapTest::::collectsEntriesIntoMap()","16":"ToMapTest::::collectsEntriesIntoMap()","17":"ToMapTest::::collectsEntriesIntoMap()","18":"ToMapTest::::collectsEntriesIntoMap()","19":"ToMapTest::::collectsEntriesIntoMap()","20":"ToMapTest::::collectsEntriesIntoMap()","21":"ToMapTest::::collectsEntriesIntoMap()","22":"ToMapTest::::collectsEntriesIntoMap()","23":"ToMapTest::::collectsEntriesIntoMap()","24":"ToMapTest::::collectsEntriesIntoMap()","25":"ToMapTest::::collectsEntriesIntoMap()"},"tests":[{"test_lines":[15,25],"covered_lines":[22,24,25,29,30,31,32,37]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/Slide.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Init.init;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Tails.tails;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Map.map;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Take.take;\n","import static com.jnape.palatable.lambda.functions.builtin.fn3.Times.times;\n","\n","/**\n"," * Given an <code>{@link Iterable}&lt;A&gt;</code>, \"slide\" a window of <code>k</code> elements across the {@link\n"," * Iterable} by one element at a time, returning an <code>{@link Iterable}&lt;{@link Iterable}&lt;A&gt;&gt;</code>.\n"," * <p>\n"," * Example:\n"," *\n"," * <code>slide(2, asList(1, 2, 3, 4, 5)); // [[1, 2], [2, 3], [3, 4], [4, 5]]</code>\n"," *\n"," * @param <A> the Iterable element type\n"," */\n","public final class Slide<A> implements Fn2<Integer, Iterable<A>, Iterable<Iterable<A>>> {\n","\n","    private static final Slide<?> INSTANCE = new Slide<>();\n","\n","    private Slide() {\n","    }\n","\n","    @Override\n","    public Iterable<Iterable<A>> checkedApply(Integer k, Iterable<A> as) {\n","        if (k == 0)\n","            throw new IllegalArgumentException(\"k must be greater than 0\");\n","\n","        return times(k, init(), map(take(k), tails(as)));\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> Slide<A> slide() {\n","        return (Slide<A>) INSTANCE;\n","    }\n","\n","    public static <A> Fn1<Iterable<A>, Iterable<Iterable<A>>> slide(Integer k) {\n","        return Slide.<A>slide().apply(k);\n","    }\n","\n","    public static <A> Iterable<Iterable<A>> slide(Integer k, Iterable<A> as) {\n","        return Slide.<A>slide(k).apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.EmptyIterableSupport;\n","import testsupport.traits.FiniteIteration;\n","import testsupport.traits.ImmutableIteration;\n","import testsupport.traits.InfiniteIterableSupport;\n","import testsupport.traits.Laziness;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Drop.drop;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Iterate.iterate;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Slide.slide;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Take.take;\n","import static java.util.Arrays.asList;\n","import static java.util.Collections.emptyList;\n","import static java.util.Collections.singletonList;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IterableMatcher.isEmpty;\n","import static testsupport.matchers.IterableMatcher.iterates;\n","\n","@RunWith(Traits.class)\n","public class SlideTest {\n","\n","    @TestTraits({ImmutableIteration.class, EmptyIterableSupport.class, FiniteIteration.class, InfiniteIterableSupport.class, Laziness.class})\n","    public Fn1<Iterable<Object>, Iterable<Iterable<Object>>> testSubject() {\n","        return slide(2);\n","    }\n","\n","    @Test\n","    public void slidesAcrossIterable() {\n","        assertThat(slide(1, asList(1, 2, 3)), iterates(singletonList(1), singletonList(2), singletonList(3)));\n","        assertThat(slide(2, asList(1, 2, 3)), iterates(asList(1, 2), asList(2, 3)));\n","        assertThat(slide(3, asList(1, 2, 3)), iterates(asList(1, 2, 3)));\n","        assertThat(slide(4, asList(1, 2, 3)), isEmpty());\n","    }\n","\n","    @Test(expected = IllegalArgumentException.class)\n","    public void kMustBeGreaterThan0() {\n","        slide(0, emptyList());\n","    }\n","\n","    @Test\n","    public void stackSafety() {\n","        int                         stackBlowingNumber = 50_000;\n","        Iterable<Iterable<Integer>> xss                = slide(2, take(stackBlowingNumber, iterate(x -> x + 1, 1)));\n","        assertThat(drop(stackBlowingNumber - 2, xss), iterates(asList(49999, 50000)));\n","    }\n","}"],"method_lines_dic":{"Slide::::checkedApply(java.lang.Integer,java.lang.Iterable<A>)":[29,35],"Slide::::slide()":[37,40],"Slide::::slide(java.lang.Integer)":[42,44],"Slide::::slide(java.lang.Integer,java.lang.Iterable<A>)":[46,48]},"test_method_lines_dic":{"SlideTest::::testSubject()":[28,31],"SlideTest::::slidesAcrossIterable()":[33,39],"SlideTest::::kMustBeGreaterThan0()":[41,44],"SlideTest::::stackSafety()":[46,51]},"reverse_method_lines_dic":{"29":"Slide::::checkedApply(java.lang.Integer,java.lang.Iterable<A>)","30":"Slide::::checkedApply(java.lang.Integer,java.lang.Iterable<A>)","31":"Slide::::checkedApply(java.lang.Integer,java.lang.Iterable<A>)","32":"Slide::::checkedApply(java.lang.Integer,java.lang.Iterable<A>)","33":"Slide::::checkedApply(java.lang.Integer,java.lang.Iterable<A>)","34":"Slide::::checkedApply(java.lang.Integer,java.lang.Iterable<A>)","35":"Slide::::checkedApply(java.lang.Integer,java.lang.Iterable<A>)","37":"Slide::::slide()","38":"Slide::::slide()","39":"Slide::::slide()","40":"Slide::::slide()","42":"Slide::::slide(java.lang.Integer)","43":"Slide::::slide(java.lang.Integer)","44":"Slide::::slide(java.lang.Integer)","46":"Slide::::slide(java.lang.Integer,java.lang.Iterable<A>)","47":"Slide::::slide(java.lang.Integer,java.lang.Iterable<A>)","48":"Slide::::slide(java.lang.Integer,java.lang.Iterable<A>)"},"test_reverse_method_lines_dic":{"28":"SlideTest::::testSubject()","29":"SlideTest::::testSubject()","30":"SlideTest::::testSubject()","31":"SlideTest::::testSubject()","33":"SlideTest::::slidesAcrossIterable()","34":"SlideTest::::slidesAcrossIterable()","35":"SlideTest::::slidesAcrossIterable()","36":"SlideTest::::slidesAcrossIterable()","37":"SlideTest::::slidesAcrossIterable()","38":"SlideTest::::slidesAcrossIterable()","39":"SlideTest::::slidesAcrossIterable()","41":"SlideTest::::kMustBeGreaterThan0()","42":"SlideTest::::kMustBeGreaterThan0()","43":"SlideTest::::kMustBeGreaterThan0()","44":"SlideTest::::kMustBeGreaterThan0()","46":"SlideTest::::stackSafety()","47":"SlideTest::::stackSafety()","48":"SlideTest::::stackSafety()","49":"SlideTest::::stackSafety()","50":"SlideTest::::stackSafety()","51":"SlideTest::::stackSafety()"},"tests":[{"test_lines":[28,31],"covered_lines":[24,26,27,39,43]},{"test_lines":[33,39],"covered_lines":[24,26,27,31,34,39,43,47]},{"test_lines":[41,44],"covered_lines":[24,26,27,31,32,39,43]},{"test_lines":[46,51],"covered_lines":[24,26,27,31,34,39,43,47]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/ToCollection.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn0;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","\n","import java.util.Collection;\n","\n","/**\n"," * Given an {@link Fn0} of some {@link Collection} <code>C</code>, create an instance of <code>C</code> and add all of\n"," * the elements in the provided <code>Iterable</code> to the instance. Note that instances of <code>C</code> must\n"," * support {@link Collection#add} (which is to say, must not throw on invocation).\n"," *\n"," * @param <A> the iterable element type\n"," * @param <C> the resulting collection type\n"," */\n","public final class ToCollection<A, C extends Collection<A>> implements Fn2<Fn0<C>, Iterable<A>, C> {\n","\n","    private static final ToCollection<?, ?> INSTANCE = new ToCollection<>();\n","\n","    private ToCollection() {\n","    }\n","\n","    @Override\n","    public C checkedApply(Fn0<C> cFn0, Iterable<A> as) {\n","        C c = cFn0.apply();\n","        as.forEach(c::add);\n","        return c;\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A, C extends Collection<A>> ToCollection<A, C> toCollection() {\n","        return (ToCollection<A, C>) INSTANCE;\n","    }\n","\n","    public static <A, C extends Collection<A>> Fn1<Iterable<A>, C> toCollection(Fn0<C> cFn0) {\n","        return ToCollection.<A, C>toCollection().apply(cFn0);\n","    }\n","\n","    public static <A, C extends Collection<A>> C toCollection(Fn0<C> cFn0, Iterable<A> as) {\n","        return toCollection(cFn0).apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import org.junit.Test;\n","\n","import java.util.ArrayList;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.ToCollection.toCollection;\n","import static java.util.Arrays.asList;\n","import static org.junit.Assert.assertEquals;\n","\n","public class ToCollectionTest {\n","\n","    @Test\n","    public void convertsIterablesToCollectionInstance() {\n","        assertEquals(asList(1, 2, 3), toCollection(ArrayList::new, asList(1, 2, 3)));\n","    }\n","}"],"method_lines_dic":{"ToCollection::::checkedApply(com.jnape.palatable.lambda.functions.Fn0<C>,java.lang.Iterable<A>)":[24,29],"ToCollection::::toCollection()":[31,34],"ToCollection::::toCollection(com.jnape.palatable.lambda.functions.Fn0<C>)":[36,38],"ToCollection::::toCollection(com.jnape.palatable.lambda.functions.Fn0<C>,java.lang.Iterable<A>)":[40,42]},"test_method_lines_dic":{"ToCollectionTest::::convertsIterablesToCollectionInstance()":[13,16]},"reverse_method_lines_dic":{"24":"ToCollection::::checkedApply(com.jnape.palatable.lambda.functions.Fn0<C>,java.lang.Iterable<A>)","25":"ToCollection::::checkedApply(com.jnape.palatable.lambda.functions.Fn0<C>,java.lang.Iterable<A>)","26":"ToCollection::::checkedApply(com.jnape.palatable.lambda.functions.Fn0<C>,java.lang.Iterable<A>)","27":"ToCollection::::checkedApply(com.jnape.palatable.lambda.functions.Fn0<C>,java.lang.Iterable<A>)","28":"ToCollection::::checkedApply(com.jnape.palatable.lambda.functions.Fn0<C>,java.lang.Iterable<A>)","29":"ToCollection::::checkedApply(com.jnape.palatable.lambda.functions.Fn0<C>,java.lang.Iterable<A>)","31":"ToCollection::::toCollection()","32":"ToCollection::::toCollection()","33":"ToCollection::::toCollection()","34":"ToCollection::::toCollection()","36":"ToCollection::::toCollection(com.jnape.palatable.lambda.functions.Fn0<C>)","37":"ToCollection::::toCollection(com.jnape.palatable.lambda.functions.Fn0<C>)","38":"ToCollection::::toCollection(com.jnape.palatable.lambda.functions.Fn0<C>)","40":"ToCollection::::toCollection(com.jnape.palatable.lambda.functions.Fn0<C>,java.lang.Iterable<A>)","41":"ToCollection::::toCollection(com.jnape.palatable.lambda.functions.Fn0<C>,java.lang.Iterable<A>)","42":"ToCollection::::toCollection(com.jnape.palatable.lambda.functions.Fn0<C>,java.lang.Iterable<A>)"},"test_reverse_method_lines_dic":{"13":"ToCollectionTest::::convertsIterablesToCollectionInstance()","14":"ToCollectionTest::::convertsIterablesToCollectionInstance()","15":"ToCollectionTest::::convertsIterablesToCollectionInstance()","16":"ToCollectionTest::::convertsIterablesToCollectionInstance()"},"tests":[{"test_lines":[13,16],"covered_lines":[19,21,22,26,27,28,33,37,41]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/PrependAll.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","import com.jnape.palatable.lambda.internal.iteration.PrependingIterator;\n","\n","/**\n"," * Lazily prepend each value with of the <code>Iterable</code> with the supplied separator value. An empty\n"," * <code>Iterable</code> is left untouched.\n"," *\n"," * @param <A> the Iterable parameter type\n"," * @see Intersperse\n"," */\n","public final class PrependAll<A> implements Fn2<A, Iterable<A>, Iterable<A>> {\n","\n","    private static final PrependAll<?> INSTANCE = new PrependAll<>();\n","\n","    private PrependAll() {\n","    }\n","\n","    @Override\n","    public Iterable<A> checkedApply(A a, Iterable<A> as) {\n","        return () -> new PrependingIterator<>(a, as.iterator());\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> PrependAll<A> prependAll() {\n","        return (PrependAll<A>) INSTANCE;\n","    }\n","\n","    public static <A> Fn1<Iterable<A>, Iterable<A>> prependAll(A a) {\n","        return PrependAll.<A>prependAll().apply(a);\n","    }\n","\n","    public static <A> Iterable<A> prependAll(A a, Iterable<A> as) {\n","        return prependAll(a).apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.EmptyIterableSupport;\n","import testsupport.traits.FiniteIteration;\n","import testsupport.traits.ImmutableIteration;\n","import testsupport.traits.InfiniteIterableSupport;\n","import testsupport.traits.Laziness;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.PrependAll.prependAll;\n","import static java.util.Arrays.asList;\n","import static java.util.Collections.emptyList;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IterableMatcher.isEmpty;\n","import static testsupport.matchers.IterableMatcher.iterates;\n","\n","@RunWith(Traits.class)\n","public class PrependAllTest {\n","\n","    @TestTraits({Laziness.class, FiniteIteration.class, EmptyIterableSupport.class, ImmutableIteration.class, InfiniteIterableSupport.class})\n","    public Fn1<Iterable<Object>, Iterable<Object>> testSubject() {\n","        return prependAll(0);\n","    }\n","\n","    @Test\n","    public void prependsValueToAllElementsInIterable() {\n","        Iterable<Integer> ints = asList(1, 2, 3);\n","        assertThat(prependAll(0, ints), iterates(0, 1, 0, 2, 0, 3));\n","    }\n","\n","    @Test\n","    public void prependingToEmptyIterableIsStillEmpty() {\n","        assertThat(prependAll(0, emptyList()), isEmpty());\n","    }\n","}"],"method_lines_dic":{"PrependAll::::checkedApply(A,java.lang.Iterable<A>)":[21,24],"PrependAll::::prependAll()":[26,29],"PrependAll::::prependAll(A)":[31,33],"PrependAll::::prependAll(A,java.lang.Iterable<A>)":[35,37]},"test_method_lines_dic":{"PrependAllTest::::testSubject()":[24,27],"PrependAllTest::::prependsValueToAllElementsInIterable()":[29,33],"PrependAllTest::::prependingToEmptyIterableIsStillEmpty()":[35,38]},"reverse_method_lines_dic":{"21":"PrependAll::::checkedApply(A,java.lang.Iterable<A>)","22":"PrependAll::::checkedApply(A,java.lang.Iterable<A>)","23":"PrependAll::::checkedApply(A,java.lang.Iterable<A>)","24":"PrependAll::::checkedApply(A,java.lang.Iterable<A>)","26":"PrependAll::::prependAll()","27":"PrependAll::::prependAll()","28":"PrependAll::::prependAll()","29":"PrependAll::::prependAll()","31":"PrependAll::::prependAll(A)","32":"PrependAll::::prependAll(A)","33":"PrependAll::::prependAll(A)","35":"PrependAll::::prependAll(A,java.lang.Iterable<A>)","36":"PrependAll::::prependAll(A,java.lang.Iterable<A>)","37":"PrependAll::::prependAll(A,java.lang.Iterable<A>)"},"test_reverse_method_lines_dic":{"24":"PrependAllTest::::testSubject()","25":"PrependAllTest::::testSubject()","26":"PrependAllTest::::testSubject()","27":"PrependAllTest::::testSubject()","29":"PrependAllTest::::prependsValueToAllElementsInIterable()","30":"PrependAllTest::::prependsValueToAllElementsInIterable()","31":"PrependAllTest::::prependsValueToAllElementsInIterable()","32":"PrependAllTest::::prependsValueToAllElementsInIterable()","33":"PrependAllTest::::prependsValueToAllElementsInIterable()","35":"PrependAllTest::::prependingToEmptyIterableIsStillEmpty()","36":"PrependAllTest::::prependingToEmptyIterableIsStillEmpty()","37":"PrependAllTest::::prependingToEmptyIterableIsStillEmpty()","38":"PrependAllTest::::prependingToEmptyIterableIsStillEmpty()"},"tests":[{"test_lines":[24,27],"covered_lines":[16,18,19,28,32]},{"test_lines":[29,33],"covered_lines":[16,18,19,23,28,32,36]},{"test_lines":[35,38],"covered_lines":[16,18,19,23,28,32,36]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/Intersperse.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Tail.tail;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.PrependAll.prependAll;\n","\n","/**\n"," * Lazily inject the provided separator value between each value in the supplied <code>Iterable</code>. An\n"," * <code>Iterable</code> with fewer than two elements is left untouched.\n"," *\n"," * @param <A> the Iterable parameter type\n"," * @see PrependAll\n"," */\n","public final class Intersperse<A> implements Fn2<A, Iterable<A>, Iterable<A>> {\n","\n","    private static final Intersperse<?> INSTANCE = new Intersperse<>();\n","\n","    private Intersperse() {\n","    }\n","\n","    @Override\n","    public Iterable<A> checkedApply(A a, Iterable<A> as) {\n","        return tail(prependAll(a, as));\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> Intersperse<A> intersperse() {\n","        return (Intersperse<A>) INSTANCE;\n","    }\n","\n","    public static <A> Fn1<Iterable<A>, Iterable<A>> intersperse(A a) {\n","        return Intersperse.<A>intersperse().apply(a);\n","    }\n","\n","    public static <A> Iterable<A> intersperse(A a, Iterable<A> as) {\n","        return intersperse(a).apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.FiniteIteration;\n","import testsupport.traits.ImmutableIteration;\n","import testsupport.traits.InfiniteIterableSupport;\n","import testsupport.traits.Laziness;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Intersperse.intersperse;\n","import static java.util.Arrays.asList;\n","import static java.util.Collections.emptyList;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IterableMatcher.isEmpty;\n","import static testsupport.matchers.IterableMatcher.iterates;\n","\n","@RunWith(Traits.class)\n","public class IntersperseTest {\n","\n","    @TestTraits({Laziness.class, FiniteIteration.class, ImmutableIteration.class, InfiniteIterableSupport.class})\n","    public Fn1<Iterable<Object>, Iterable<Object>> testSubject() {\n","        return intersperse(0);\n","    }\n","\n","    @Test\n","    public void interspersesBetweenElementsInIterable() {\n","        assertThat(intersperse(0, asList(1, 2, 3)), iterates(1, 0, 2, 0, 3));\n","    }\n","\n","    @Test\n","    public void doesNotIntersperseSingletonIterable() {\n","        assertThat(intersperse(0, asList(1)), iterates(1));\n","    }\n","\n","    @Test\n","    public void doesNotIntersperseEmptyIterable() {\n","        assertThat(intersperse(0, emptyList()), isEmpty());\n","    }\n","}"],"method_lines_dic":{"Intersperse::::checkedApply(A,java.lang.Iterable<A>)":[23,26],"Intersperse::::intersperse()":[28,31],"Intersperse::::intersperse(A)":[33,35],"Intersperse::::intersperse(A,java.lang.Iterable<A>)":[37,39]},"test_method_lines_dic":{"IntersperseTest::::testSubject()":[23,26],"IntersperseTest::::interspersesBetweenElementsInIterable()":[28,31],"IntersperseTest::::doesNotIntersperseSingletonIterable()":[33,36],"IntersperseTest::::doesNotIntersperseEmptyIterable()":[38,41]},"reverse_method_lines_dic":{"23":"Intersperse::::checkedApply(A,java.lang.Iterable<A>)","24":"Intersperse::::checkedApply(A,java.lang.Iterable<A>)","25":"Intersperse::::checkedApply(A,java.lang.Iterable<A>)","26":"Intersperse::::checkedApply(A,java.lang.Iterable<A>)","28":"Intersperse::::intersperse()","29":"Intersperse::::intersperse()","30":"Intersperse::::intersperse()","31":"Intersperse::::intersperse()","33":"Intersperse::::intersperse(A)","34":"Intersperse::::intersperse(A)","35":"Intersperse::::intersperse(A)","37":"Intersperse::::intersperse(A,java.lang.Iterable<A>)","38":"Intersperse::::intersperse(A,java.lang.Iterable<A>)","39":"Intersperse::::intersperse(A,java.lang.Iterable<A>)"},"test_reverse_method_lines_dic":{"23":"IntersperseTest::::testSubject()","24":"IntersperseTest::::testSubject()","25":"IntersperseTest::::testSubject()","26":"IntersperseTest::::testSubject()","28":"IntersperseTest::::interspersesBetweenElementsInIterable()","29":"IntersperseTest::::interspersesBetweenElementsInIterable()","30":"IntersperseTest::::interspersesBetweenElementsInIterable()","31":"IntersperseTest::::interspersesBetweenElementsInIterable()","33":"IntersperseTest::::doesNotIntersperseSingletonIterable()","34":"IntersperseTest::::doesNotIntersperseSingletonIterable()","35":"IntersperseTest::::doesNotIntersperseSingletonIterable()","36":"IntersperseTest::::doesNotIntersperseSingletonIterable()","38":"IntersperseTest::::doesNotIntersperseEmptyIterable()","39":"IntersperseTest::::doesNotIntersperseEmptyIterable()","40":"IntersperseTest::::doesNotIntersperseEmptyIterable()","41":"IntersperseTest::::doesNotIntersperseEmptyIterable()"},"tests":[{"test_lines":[23,26],"covered_lines":[18,20,21,30,34]},{"test_lines":[28,31],"covered_lines":[18,20,21,25,30,34,38]},{"test_lines":[33,36],"covered_lines":[18,20,21,25,30,34,38]},{"test_lines":[38,41],"covered_lines":[18,20,21,25,30,34,38]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/DropWhile.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","import com.jnape.palatable.lambda.internal.iteration.PredicatedDroppingIterable;\n","\n","/**\n"," * Lazily limit the <code>Iterable</code> by skipping the first contiguous group of elements that satisfy the predicate,\n"," * beginning iteration at the first element for which the predicate evaluates to <code>false</code>.\n"," *\n"," * @param <A> The Iterable element type\n"," * @see Drop\n"," * @see Filter\n"," * @see TakeWhile\n"," */\n","\n","public final class DropWhile<A> implements Fn2<Fn1<? super A, ? extends Boolean>, Iterable<A>, Iterable<A>> {\n","\n","    private static final DropWhile<?> INSTANCE = new DropWhile<>();\n","\n","    private DropWhile() {\n","    }\n","\n","    @Override\n","    public Iterable<A> checkedApply(Fn1<? super A, ? extends Boolean> predicate, Iterable<A> as) {\n","        return new PredicatedDroppingIterable<>(predicate, as);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> DropWhile<A> dropWhile() {\n","        return (DropWhile<A>) INSTANCE;\n","    }\n","\n","    public static <A> Fn1<Iterable<A>, Iterable<A>> dropWhile(Fn1<? super A, ? extends Boolean> predicate) {\n","        return DropWhile.<A>dropWhile().apply(predicate);\n","    }\n","\n","    public static <A> Iterable<A> dropWhile(Fn1<? super A, ? extends Boolean> predicate, Iterable<A> as) {\n","        return DropWhile.<A>dropWhile(predicate).apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.specialized.Predicate;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.EmptyIterableSupport;\n","import testsupport.traits.FiniteIteration;\n","import testsupport.traits.ImmutableIteration;\n","import testsupport.traits.Laziness;\n","\n","import java.util.ArrayList;\n","import java.util.List;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.DropWhile.dropWhile;\n","import static java.util.Arrays.asList;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IterableMatcher.isEmpty;\n","import static testsupport.matchers.IterableMatcher.iterates;\n","\n","@RunWith(Traits.class)\n","public class DropWhileTest {\n","\n","    @TestTraits({Laziness.class, ImmutableIteration.class, FiniteIteration.class, EmptyIterableSupport.class})\n","    public Fn1<Iterable<Object>, Iterable<Object>> createTestSubject() {\n","        return dropWhile(constantly(false));\n","    }\n","\n","    @Test\n","    public void dropsElementsWhilePredicateIsTrue() {\n","        Predicate<Integer> lessThan3 = integer -> integer < 3;\n","        assertThat(dropWhile(lessThan3, asList(1, 2, 3)), iterates(3));\n","    }\n","\n","    @Test\n","    public void dropsAllElementsIfPredicateNeverFails() {\n","        assertThat(dropWhile(constantly(true), asList(1, 2, 3)), isEmpty());\n","    }\n","\n","    @Test\n","    public void dropsNoElementsIfPredicateImmediatelyFails() {\n","        assertThat(dropWhile(constantly(false), asList(1, 2, 3)), iterates(1, 2, 3));\n","    }\n","\n","    @Test\n","    public void deforestingExecutesPredicatesInOrder() {\n","        List<Integer> innerInvocations = new ArrayList<>();\n","        List<Integer> outerInvocations = new ArrayList<>();\n","        dropWhile(y -> {\n","            outerInvocations.add(y);\n","            return true;\n","        }, dropWhile(x -> {\n","            innerInvocations.add(x);\n","            return x > 2;\n","        }, asList(1, 2, 3))).forEach(__ -> {});\n","        assertThat(innerInvocations, iterates(1));\n","        assertThat(outerInvocations, iterates(1, 2, 3));\n","    }\n","\n","    @Test\n","    public void eachLayerIsAppliedOnce() {\n","        assertThat(dropWhile(i -> i % 2 == 0, dropWhile(i -> i % 2 == 1, asList(1, 2, 3))),\n","                   iterates(3));\n","    }\n","}\n"],"method_lines_dic":{"DropWhile::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)":[24,27],"DropWhile::::dropWhile()":[29,32],"DropWhile::::dropWhile(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)":[34,36],"DropWhile::::dropWhile(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)":[38,40]},"test_method_lines_dic":{"DropWhileTest::::createTestSubject()":[27,30],"DropWhileTest::::dropsElementsWhilePredicateIsTrue()":[32,36],"DropWhileTest::::dropsAllElementsIfPredicateNeverFails()":[38,41],"DropWhileTest::::dropsNoElementsIfPredicateImmediatelyFails()":[43,46],"DropWhileTest::::deforestingExecutesPredicatesInOrder()":[48,61],"DropWhileTest::::eachLayerIsAppliedOnce()":[63,67]},"reverse_method_lines_dic":{"24":"DropWhile::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","25":"DropWhile::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","26":"DropWhile::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","27":"DropWhile::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","29":"DropWhile::::dropWhile()","30":"DropWhile::::dropWhile()","31":"DropWhile::::dropWhile()","32":"DropWhile::::dropWhile()","34":"DropWhile::::dropWhile(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)","35":"DropWhile::::dropWhile(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)","36":"DropWhile::::dropWhile(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)","38":"DropWhile::::dropWhile(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","39":"DropWhile::::dropWhile(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","40":"DropWhile::::dropWhile(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)"},"test_reverse_method_lines_dic":{"27":"DropWhileTest::::createTestSubject()","28":"DropWhileTest::::createTestSubject()","29":"DropWhileTest::::createTestSubject()","30":"DropWhileTest::::createTestSubject()","32":"DropWhileTest::::dropsElementsWhilePredicateIsTrue()","33":"DropWhileTest::::dropsElementsWhilePredicateIsTrue()","34":"DropWhileTest::::dropsElementsWhilePredicateIsTrue()","35":"DropWhileTest::::dropsElementsWhilePredicateIsTrue()","36":"DropWhileTest::::dropsElementsWhilePredicateIsTrue()","38":"DropWhileTest::::dropsAllElementsIfPredicateNeverFails()","39":"DropWhileTest::::dropsAllElementsIfPredicateNeverFails()","40":"DropWhileTest::::dropsAllElementsIfPredicateNeverFails()","41":"DropWhileTest::::dropsAllElementsIfPredicateNeverFails()","43":"DropWhileTest::::dropsNoElementsIfPredicateImmediatelyFails()","44":"DropWhileTest::::dropsNoElementsIfPredicateImmediatelyFails()","45":"DropWhileTest::::dropsNoElementsIfPredicateImmediatelyFails()","46":"DropWhileTest::::dropsNoElementsIfPredicateImmediatelyFails()","48":"DropWhileTest::::deforestingExecutesPredicatesInOrder()","49":"DropWhileTest::::deforestingExecutesPredicatesInOrder()","50":"DropWhileTest::::deforestingExecutesPredicatesInOrder()","51":"DropWhileTest::::deforestingExecutesPredicatesInOrder()","52":"DropWhileTest::::deforestingExecutesPredicatesInOrder()","53":"DropWhileTest::::deforestingExecutesPredicatesInOrder()","54":"DropWhileTest::::deforestingExecutesPredicatesInOrder()","55":"DropWhileTest::::deforestingExecutesPredicatesInOrder()","56":"DropWhileTest::::deforestingExecutesPredicatesInOrder()","57":"DropWhileTest::::deforestingExecutesPredicatesInOrder()","58":"DropWhileTest::::deforestingExecutesPredicatesInOrder()","59":"DropWhileTest::::deforestingExecutesPredicatesInOrder()","60":"DropWhileTest::::deforestingExecutesPredicatesInOrder()","61":"DropWhileTest::::deforestingExecutesPredicatesInOrder()","63":"DropWhileTest::::eachLayerIsAppliedOnce()","64":"DropWhileTest::::eachLayerIsAppliedOnce()","65":"DropWhileTest::::eachLayerIsAppliedOnce()","66":"DropWhileTest::::eachLayerIsAppliedOnce()","67":"DropWhileTest::::eachLayerIsAppliedOnce()"},"tests":[{"test_lines":[27,30],"covered_lines":[19,21,22,31,35]},{"test_lines":[32,36],"covered_lines":[19,21,22,26,31,35,39]},{"test_lines":[38,41],"covered_lines":[19,21,22,26,31,35,39]},{"test_lines":[43,46],"covered_lines":[19,21,22,26,31,35,39]},{"test_lines":[48,61],"covered_lines":[19,21,22,26,31,35,39]},{"test_lines":[63,67],"covered_lines":[19,21,22,26,31,35,39]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/GroupBy.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","\n","import java.util.ArrayList;\n","import java.util.HashMap;\n","import java.util.List;\n","import java.util.Map;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn3.FoldLeft.foldLeft;\n","\n","/**\n"," * Given an <code>Iterable&lt;V&gt;</code> <code>vs</code> and a key function <code>V -&gt; K</code> <code>f</code>,\n"," * fold <code>vs</code> into a <code>Map&lt;K, List&lt;V&gt;&gt;</code> by applying <code>f</code> to each element of\n"," * <code>vs</code>, retaining values that map to the same key in a list, in the order they were iterated in.\n"," *\n"," * @param <K> the Map key type\n"," * @param <V> the Map value type\n"," * @see InGroupsOf\n"," */\n","public final class GroupBy<K, V> implements Fn2<Fn1<? super V, ? extends K>, Iterable<V>, Map<K, List<V>>> {\n","\n","    private static final GroupBy<?, ?> INSTANCE = new GroupBy<>();\n","\n","    private GroupBy() {\n","    }\n","\n","    @Override\n","    public Map<K, List<V>> checkedApply(Fn1<? super V, ? extends K> keyFn, Iterable<V> vs) {\n","        return foldLeft((m, v) -> {\n","            m.computeIfAbsent(keyFn.apply(v), __ -> new ArrayList<>()).add(v);\n","            return m;\n","        }, new HashMap<>(), vs);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <K, V> GroupBy<K, V> groupBy() {\n","        return (GroupBy<K, V>) INSTANCE;\n","    }\n","\n","    public static <K, V> Fn1<Iterable<V>, Map<K, List<V>>> groupBy(Fn1<? super V, ? extends K> keyFn) {\n","        return GroupBy.<K, V>groupBy().apply(keyFn);\n","    }\n","\n","    public static <K, V> Map<K, List<V>> groupBy(Fn1<? super V, ? extends K> keyFn, Iterable<V> vs) {\n","        return GroupBy.<K, V>groupBy(keyFn).apply(vs);\n","    }\n","}"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import org.junit.Test;\n","\n","import java.util.Collections;\n","import java.util.HashMap;\n","import java.util.List;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Id.id;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.GroupBy.groupBy;\n","import static java.util.Arrays.asList;\n","import static java.util.Collections.emptyList;\n","import static java.util.Collections.singletonList;\n","import static org.junit.Assert.assertEquals;\n","\n","@SuppressWarnings(\"serial\")\n","public class GroupByTest {\n","\n","    @Test\n","    public void grouping() {\n","        assertEquals(new HashMap<Integer, List<String>>() {{\n","            put(3, asList(\"one\", \"two\"));\n","            put(5, singletonList(\"three\"));\n","        }}, groupBy(String::length, asList(\"one\", \"two\", \"three\")));\n","    }\n","\n","    @Test\n","    public void emptyIterableProducesEmptyMap() {\n","        assertEquals(Collections.<Object, List<Object>>emptyMap(), groupBy(id(), emptyList()));\n","    }\n","}"],"method_lines_dic":{"GroupBy::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super V, ? extends K>,java.lang.Iterable<V>)":[29,35],"GroupBy::::groupBy()":[37,40],"GroupBy::::groupBy(com.jnape.palatable.lambda.functions.Fn1<? super V, ? extends K>)":[42,44],"GroupBy::::groupBy(com.jnape.palatable.lambda.functions.Fn1<? super V, ? extends K>,java.lang.Iterable<V>)":[46,48]},"test_method_lines_dic":{"GroupByTest::::grouping()":[19,25],"GroupByTest::::emptyIterableProducesEmptyMap()":[27,30]},"reverse_method_lines_dic":{"29":"GroupBy::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super V, ? extends K>,java.lang.Iterable<V>)","30":"GroupBy::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super V, ? extends K>,java.lang.Iterable<V>)","31":"GroupBy::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super V, ? extends K>,java.lang.Iterable<V>)","32":"GroupBy::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super V, ? extends K>,java.lang.Iterable<V>)","33":"GroupBy::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super V, ? extends K>,java.lang.Iterable<V>)","34":"GroupBy::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super V, ? extends K>,java.lang.Iterable<V>)","35":"GroupBy::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super V, ? extends K>,java.lang.Iterable<V>)","37":"GroupBy::::groupBy()","38":"GroupBy::::groupBy()","39":"GroupBy::::groupBy()","40":"GroupBy::::groupBy()","42":"GroupBy::::groupBy(com.jnape.palatable.lambda.functions.Fn1<? super V, ? extends K>)","43":"GroupBy::::groupBy(com.jnape.palatable.lambda.functions.Fn1<? super V, ? extends K>)","44":"GroupBy::::groupBy(com.jnape.palatable.lambda.functions.Fn1<? super V, ? extends K>)","46":"GroupBy::::groupBy(com.jnape.palatable.lambda.functions.Fn1<? super V, ? extends K>,java.lang.Iterable<V>)","47":"GroupBy::::groupBy(com.jnape.palatable.lambda.functions.Fn1<? super V, ? extends K>,java.lang.Iterable<V>)","48":"GroupBy::::groupBy(com.jnape.palatable.lambda.functions.Fn1<? super V, ? extends K>,java.lang.Iterable<V>)"},"test_reverse_method_lines_dic":{"19":"GroupByTest::::grouping()","20":"GroupByTest::::grouping()","21":"GroupByTest::::grouping()","22":"GroupByTest::::grouping()","23":"GroupByTest::::grouping()","24":"GroupByTest::::grouping()","25":"GroupByTest::::grouping()","27":"GroupByTest::::emptyIterableProducesEmptyMap()","28":"GroupByTest::::emptyIterableProducesEmptyMap()","29":"GroupByTest::::emptyIterableProducesEmptyMap()","30":"GroupByTest::::emptyIterableProducesEmptyMap()"},"tests":[{"test_lines":[19,25],"covered_lines":[24,26,27,31,32,33,39,43,47]},{"test_lines":[27,30],"covered_lines":[24,26,27,31,39,43,47]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/Span.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.adt.hlist.Tuple2;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.DropWhile.dropWhile;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.TakeWhile.takeWhile;\n","\n","/**\n"," * Given a predicate, return a {@link Tuple2} where the first slot is the front contiguous elements of an {@link\n"," * Iterable} matching the predicate and the second slot is all the remaining elements.\n"," *\n"," * @param <A> the {@link Iterable} element type\n"," */\n","public final class Span<A> implements\n","        Fn2<Fn1<? super A, ? extends Boolean>, Iterable<A>, Tuple2<Iterable<A>, Iterable<A>>> {\n","\n","    private static final Span<?> INSTANCE = new Span<>();\n","\n","    private Span() {\n","    }\n","\n","    @Override\n","    public Tuple2<Iterable<A>, Iterable<A>> checkedApply(Fn1<? super A, ? extends Boolean> predicate, Iterable<A> as) {\n","        return Tuple2.fill(as).biMap(takeWhile(predicate), dropWhile(predicate));\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> Span<A> span() {\n","        return (Span<A>) INSTANCE;\n","    }\n","\n","    public static <A> Fn1<Iterable<A>, Tuple2<Iterable<A>, Iterable<A>>> span(\n","            Fn1<? super A, ? extends Boolean> predicate) {\n","        return Span.<A>span().apply(predicate);\n","    }\n","\n","    public static <A> Tuple2<Iterable<A>, Iterable<A>> span(Fn1<? super A, ? extends Boolean> predicate,\n","                                                            Iterable<A> as) {\n","        return Span.<A>span(predicate).apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.adt.hlist.Tuple2;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.monoid.builtin.Concat;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.EmptyIterableSupport;\n","import testsupport.traits.FiniteIteration;\n","import testsupport.traits.ImmutableIteration;\n","import testsupport.traits.InfiniteIterableSupport;\n","import testsupport.traits.Laziness;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Eq.eq;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Into.into;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Span.span;\n","import static java.util.Arrays.asList;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IterableMatcher.iterates;\n","\n","@RunWith(Traits.class)\n","public class SpanTest {\n","\n","    @TestTraits({EmptyIterableSupport.class, InfiniteIterableSupport.class, FiniteIteration.class, ImmutableIteration.class, Laziness.class})\n","    public Fn1<Iterable<Integer>, Iterable<Integer>> testSubject() {\n","        return span(eq(0)).fmap(into(Concat::concat));\n","    }\n","\n","    @Test\n","    public void splitsIterableAfterPredicateFailure() {\n","        Tuple2<Iterable<Integer>, Iterable<Integer>> spanned = span(eq(1), asList(1, 1, 1, 2, 3, 1));\n","        assertThat(spanned._1(), iterates(1, 1, 1));\n","        assertThat(spanned._2(), iterates(2, 3, 1));\n","    }\n","}"],"method_lines_dic":{"Span::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)":[24,27],"Span::::span()":[29,32],"Span::::span(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)":[34,37],"Span::::span(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)":[39,42]},"test_method_lines_dic":{"SpanTest::::testSubject()":[26,29],"SpanTest::::splitsIterableAfterPredicateFailure()":[31,36]},"reverse_method_lines_dic":{"24":"Span::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","25":"Span::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","26":"Span::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","27":"Span::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","29":"Span::::span()","30":"Span::::span()","31":"Span::::span()","32":"Span::::span()","34":"Span::::span(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)","35":"Span::::span(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)","36":"Span::::span(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)","37":"Span::::span(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)","39":"Span::::span(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","40":"Span::::span(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","41":"Span::::span(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","42":"Span::::span(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)"},"test_reverse_method_lines_dic":{"26":"SpanTest::::testSubject()","27":"SpanTest::::testSubject()","28":"SpanTest::::testSubject()","29":"SpanTest::::testSubject()","31":"SpanTest::::splitsIterableAfterPredicateFailure()","32":"SpanTest::::splitsIterableAfterPredicateFailure()","33":"SpanTest::::splitsIterableAfterPredicateFailure()","34":"SpanTest::::splitsIterableAfterPredicateFailure()","35":"SpanTest::::splitsIterableAfterPredicateFailure()","36":"SpanTest::::splitsIterableAfterPredicateFailure()"},"tests":[{"test_lines":[26,29],"covered_lines":[19,21,22,31,36]},{"test_lines":[31,36],"covered_lines":[19,21,22,26,31,36,41]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/CmpEq.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.builtin.fn3.CmpEqBy;\n","import com.jnape.palatable.lambda.functions.specialized.BiPredicate;\n","import com.jnape.palatable.lambda.functions.specialized.Predicate;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Id.id;\n","import static com.jnape.palatable.lambda.functions.builtin.fn3.CmpEqBy.cmpEqBy;\n","\n","/**\n"," * Given two {@link Comparable} values of type <code>A</code>, return <code>true</code> if the first value is strictly\n"," * equal to the second value (according to {@link Comparable#compareTo(Object)}; otherwise, return false.\n"," *\n"," * @param <A> the value type\n"," * @see CmpEqBy\n"," * @see LT\n"," * @see GT\n"," */\n","public final class CmpEq<A extends Comparable<A>> implements BiPredicate<A, A> {\n","\n","    private static final CmpEq<?> INSTANCE = new CmpEq<>();\n","\n","    private CmpEq() {\n","    }\n","\n","    @Override\n","    public Boolean checkedApply(A x, A y) {\n","        return cmpEqBy(id(), x, y);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A extends Comparable<A>> CmpEq<A> cmpEq() {\n","        return (CmpEq<A>) INSTANCE;\n","    }\n","\n","    public static <A extends Comparable<A>> Predicate<A> cmpEq(A x) {\n","        return CmpEq.<A>cmpEq().apply(x);\n","    }\n","\n","    public static <A extends Comparable<A>> Boolean cmpEq(A x, A y) {\n","        return cmpEq(x).apply(y);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.CmpEq.cmpEq;\n","import static org.junit.Assert.assertFalse;\n","import static org.junit.Assert.assertTrue;\n","\n","public class CmpEqTest {\n","\n","    @Test\n","    public void comparisons() {\n","        assertTrue(cmpEq(1, 1));\n","        assertFalse(cmpEq(1, 2));\n","        assertFalse(cmpEq(2, 1));\n","    }\n","}"],"method_lines_dic":{"CmpEq::::checkedApply(A,A)":[26,29],"CmpEq::::cmpEq()":[31,34],"CmpEq::::cmpEq(A)":[36,38],"CmpEq::::cmpEq(A,A)":[40,42]},"test_method_lines_dic":{"CmpEqTest::::comparisons()":[11,16]},"reverse_method_lines_dic":{"26":"CmpEq::::checkedApply(A,A)","27":"CmpEq::::checkedApply(A,A)","28":"CmpEq::::checkedApply(A,A)","29":"CmpEq::::checkedApply(A,A)","31":"CmpEq::::cmpEq()","32":"CmpEq::::cmpEq()","33":"CmpEq::::cmpEq()","34":"CmpEq::::cmpEq()","36":"CmpEq::::cmpEq(A)","37":"CmpEq::::cmpEq(A)","38":"CmpEq::::cmpEq(A)","40":"CmpEq::::cmpEq(A,A)","41":"CmpEq::::cmpEq(A,A)","42":"CmpEq::::cmpEq(A,A)"},"test_reverse_method_lines_dic":{"11":"CmpEqTest::::comparisons()","12":"CmpEqTest::::comparisons()","13":"CmpEqTest::::comparisons()","14":"CmpEqTest::::comparisons()","15":"CmpEqTest::::comparisons()","16":"CmpEqTest::::comparisons()"},"tests":[{"test_lines":[11,16],"covered_lines":[21,23,24,28,33,37,41]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/Into3.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.adt.product.Product3;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","import com.jnape.palatable.lambda.functions.Fn3;\n","\n","/**\n"," * Given an <code>{@link Fn3}&lt;A, B, C, D&gt;</code> and a <code>{@link Product3}&lt;A, B, C&gt;</code>, destructure\n"," * the product and apply the slots as arguments to the function, returning the result.\n"," *\n"," * @param <A> the first argument type\n"," * @param <B> the second argument type\n"," * @param <C> the third argument type\n"," * @param <D> the result type\n"," */\n","public final class Into3<A, B, C, D> implements Fn2<Fn3<? super A, ? super B, ? super C, ? extends D>, Product3<A, B, C>, D> {\n","\n","    private static final Into3<?, ?, ?, ?> INSTANCE = new Into3<>();\n","\n","    @Override\n","    public D checkedApply(Fn3<? super A, ? super B, ? super C, ? extends D> fn, Product3<A, B, C> product) {\n","        return product.<D>into(fn);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A, B, C, D> Into3<A, B, C, D> into3() {\n","        return (Into3<A, B, C, D>) INSTANCE;\n","    }\n","\n","    public static <A, B, C, D> Fn1<Product3<A, B, C>, D> into3(Fn3<? super A, ? super B, ? super C, ? extends D> fn) {\n","        return Into3.<A, B, C, D>into3().apply(fn);\n","    }\n","\n","    public static <A, B, C, D> D into3(Fn3<? super A, ? super B, ? super C, ? extends D> fn,\n","                                       Product3<A, B, C> product) {\n","        return Into3.<A, B, C, D>into3(fn).apply(product);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Into3.into3;\n","import static org.junit.Assert.assertEquals;\n","\n","public class Into3Test {\n","\n","    @Test\n","    public void appliesTupleToFunction() {\n","        assertEquals((Integer) 6, into3((a, b, c) -> a + b + c, tuple(1, 2, 3)));\n","    }\n","}"],"method_lines_dic":{"Into3::::checkedApply(com.jnape.palatable.lambda.functions.Fn3<? super A, ? super B, ? super C, ? extends D>,com.jnape.palatable.lambda.adt.product.Product3<A, B, C>)":[21,24],"Into3::::into3()":[26,29],"Into3::::into3(com.jnape.palatable.lambda.functions.Fn3<? super A, ? super B, ? super C, ? extends D>)":[31,33],"Into3::::into3(com.jnape.palatable.lambda.functions.Fn3<? super A, ? super B, ? super C, ? extends D>,com.jnape.palatable.lambda.adt.product.Product3<A, B, C>)":[35,38]},"test_method_lines_dic":{"Into3Test::::appliesTupleToFunction()":[11,14]},"reverse_method_lines_dic":{"21":"Into3::::checkedApply(com.jnape.palatable.lambda.functions.Fn3<? super A, ? super B, ? super C, ? extends D>,com.jnape.palatable.lambda.adt.product.Product3<A, B, C>)","22":"Into3::::checkedApply(com.jnape.palatable.lambda.functions.Fn3<? super A, ? super B, ? super C, ? extends D>,com.jnape.palatable.lambda.adt.product.Product3<A, B, C>)","23":"Into3::::checkedApply(com.jnape.palatable.lambda.functions.Fn3<? super A, ? super B, ? super C, ? extends D>,com.jnape.palatable.lambda.adt.product.Product3<A, B, C>)","24":"Into3::::checkedApply(com.jnape.palatable.lambda.functions.Fn3<? super A, ? super B, ? super C, ? extends D>,com.jnape.palatable.lambda.adt.product.Product3<A, B, C>)","26":"Into3::::into3()","27":"Into3::::into3()","28":"Into3::::into3()","29":"Into3::::into3()","31":"Into3::::into3(com.jnape.palatable.lambda.functions.Fn3<? super A, ? super B, ? super C, ? extends D>)","32":"Into3::::into3(com.jnape.palatable.lambda.functions.Fn3<? super A, ? super B, ? super C, ? extends D>)","33":"Into3::::into3(com.jnape.palatable.lambda.functions.Fn3<? super A, ? super B, ? super C, ? extends D>)","35":"Into3::::into3(com.jnape.palatable.lambda.functions.Fn3<? super A, ? super B, ? super C, ? extends D>,com.jnape.palatable.lambda.adt.product.Product3<A, B, C>)","36":"Into3::::into3(com.jnape.palatable.lambda.functions.Fn3<? super A, ? super B, ? super C, ? extends D>,com.jnape.palatable.lambda.adt.product.Product3<A, B, C>)","37":"Into3::::into3(com.jnape.palatable.lambda.functions.Fn3<? super A, ? super B, ? super C, ? extends D>,com.jnape.palatable.lambda.adt.product.Product3<A, B, C>)","38":"Into3::::into3(com.jnape.palatable.lambda.functions.Fn3<? super A, ? super B, ? super C, ? extends D>,com.jnape.palatable.lambda.adt.product.Product3<A, B, C>)"},"test_reverse_method_lines_dic":{"11":"Into3Test::::appliesTupleToFunction()","12":"Into3Test::::appliesTupleToFunction()","13":"Into3Test::::appliesTupleToFunction()","14":"Into3Test::::appliesTupleToFunction()"},"tests":[{"test_lines":[11,14],"covered_lines":[17,19,23,28,32,37]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/Partition.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.adt.coproduct.CoProduct2;\n","import com.jnape.palatable.lambda.adt.hlist.Tuple2;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","\n","import java.util.Collections;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Flatten.flatten;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Map.map;\n","import static java.util.Collections.emptySet;\n","\n","/**\n"," * Given an <code>Iterable&lt;A&gt;</code> <code>as</code> and a disjoint mapping function <code>a -&gt;\n"," * CoProduct2&lt;A, B&gt;</code>, return a {@link Tuple2} over the lazily unwrapped left <code>A</code> and right\n"," * <code>B</code> values in the first and second slots, respectively. Note that while the tuple must be constructed\n"," * eagerly, the left and right iterables contained therein are both lazy, so comprehension over infinite iterables is\n"," * supported.\n"," *\n"," * @param <A> A type contravariant to the input Iterable element type\n"," * @param <B> The output left Iterable element type, as well as the CoProduct2 A type\n"," * @param <C> The output right Iterable element type, as well as the CoProduct2 B type\n"," * @see CoProduct2\n"," */\n","public final class Partition<A, B, C> implements Fn2<Fn1<? super A, ? extends CoProduct2<B, C, ?>>, Iterable<A>, Tuple2<Iterable<B>, Iterable<C>>> {\n","\n","    private static final Partition<?, ?, ?> INSTANCE = new Partition<>();\n","\n","    private Partition() {\n","    }\n","\n","    @Override\n","    public Tuple2<Iterable<B>, Iterable<C>> checkedApply(Fn1<? super A, ? extends CoProduct2<B, C, ?>> function,\n","                                                         Iterable<A> as) {\n","        return Tuple2.<Iterable<CoProduct2<B, C, ?>>>fill(map(function, as))\n","                .biMap(Map.<CoProduct2<B, C, ?>, Iterable<B>>map(cp -> cp.match(Collections::singleton, __ -> emptySet())),\n","                       Map.<CoProduct2<B, C, ?>, Iterable<C>>map(cp -> cp.match(__ -> emptySet(), Collections::singleton)))\n","                .biMap(flatten(), flatten());\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A, B, C> Partition<A, B, C> partition() {\n","        return (Partition<A, B, C>) INSTANCE;\n","    }\n","\n","    public static <A, B, C> Fn1<Iterable<A>, Tuple2<Iterable<B>, Iterable<C>>> partition(\n","            Fn1<? super A, ? extends CoProduct2<B, C, ?>> function) {\n","        return Partition.<A, B, C>partition().apply(function);\n","    }\n","\n","    public static <A, B, C> Tuple2<Iterable<B>, Iterable<C>> partition(\n","            Fn1<? super A, ? extends CoProduct2<B, C, ?>> function,\n","            Iterable<A> as) {\n","        return Partition.<A, B, C>partition(function).apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.adt.coproduct.CoProduct2;\n","import com.jnape.palatable.lambda.adt.hlist.Tuple2;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.framework.Subjects;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.EmptyIterableSupport;\n","import testsupport.traits.FiniteIteration;\n","import testsupport.traits.ImmutableIteration;\n","import testsupport.traits.Laziness;\n","\n","import static com.jnape.palatable.lambda.adt.choice.Choice2.a;\n","import static com.jnape.palatable.lambda.adt.choice.Choice2.b;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Cycle.cycle;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Id.id;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Partition.partition;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Take.take;\n","import static com.jnape.palatable.traitor.framework.Subjects.subjects;\n","import static java.util.Arrays.asList;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IterableMatcher.iterates;\n","\n","@RunWith(Traits.class)\n","public class PartitionTest {\n","\n","    @TestTraits({Laziness.class, EmptyIterableSupport.class, FiniteIteration.class, ImmutableIteration.class})\n","    public Subjects<Fn1<? extends Iterable<?>, ?>> createTraitsTestSubject() {\n","        return subjects(partition(constantly(a(1))).fmap(Tuple2::_1),\n","                        partition(constantly(b(1))).fmap(Tuple2::_2));\n","    }\n","\n","    @Test\n","    public void partitionsIterableIntoAsAndBs() {\n","        Iterable<String>                            strings   = asList(\"one\", \"two\", \"three\", \"four\", \"five\");\n","        Tuple2<Iterable<String>, Iterable<Integer>> partition = partition(s -> s.length() % 2 == 1 ? a(s) : b(s.length()), strings);\n","\n","        assertThat(partition._1(), iterates(\"one\", \"two\", \"three\"));\n","        assertThat(partition._2(), iterates(4, 4));\n","    }\n","\n","    @Test\n","    public void infiniteListSupport() {\n","        Iterable<CoProduct2<String, Integer, ?>>    coproducts = cycle(a(\"left\"), b(1));\n","        Tuple2<Iterable<String>, Iterable<Integer>> partition  = partition(id(), coproducts);\n","\n","        assertThat(take(3, partition._1()), iterates(\"left\", \"left\", \"left\"));\n","        assertThat(take(3, partition._2()), iterates(1, 1, 1));\n","    }\n","}"],"method_lines_dic":{"Partition::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct2<B, C, ?>>,java.lang.Iterable<A>)":[33,40],"Partition::::partition()":[42,45],"Partition::::partition(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct2<B, C, ?>>)":[47,50],"Partition::::partition(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct2<B, C, ?>>,java.lang.Iterable<A>)":[52,56]},"test_method_lines_dic":{"PartitionTest::::createTraitsTestSubject()":[31,35],"PartitionTest::::partitionsIterableIntoAsAndBs()":[37,44],"PartitionTest::::infiniteListSupport()":[46,53]},"reverse_method_lines_dic":{"33":"Partition::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct2<B, C, ?>>,java.lang.Iterable<A>)","34":"Partition::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct2<B, C, ?>>,java.lang.Iterable<A>)","35":"Partition::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct2<B, C, ?>>,java.lang.Iterable<A>)","36":"Partition::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct2<B, C, ?>>,java.lang.Iterable<A>)","37":"Partition::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct2<B, C, ?>>,java.lang.Iterable<A>)","38":"Partition::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct2<B, C, ?>>,java.lang.Iterable<A>)","39":"Partition::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct2<B, C, ?>>,java.lang.Iterable<A>)","40":"Partition::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct2<B, C, ?>>,java.lang.Iterable<A>)","42":"Partition::::partition()","43":"Partition::::partition()","44":"Partition::::partition()","45":"Partition::::partition()","47":"Partition::::partition(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct2<B, C, ?>>)","48":"Partition::::partition(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct2<B, C, ?>>)","49":"Partition::::partition(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct2<B, C, ?>>)","50":"Partition::::partition(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct2<B, C, ?>>)","52":"Partition::::partition(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct2<B, C, ?>>,java.lang.Iterable<A>)","53":"Partition::::partition(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct2<B, C, ?>>,java.lang.Iterable<A>)","54":"Partition::::partition(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct2<B, C, ?>>,java.lang.Iterable<A>)","55":"Partition::::partition(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct2<B, C, ?>>,java.lang.Iterable<A>)","56":"Partition::::partition(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.adt.coproduct.CoProduct2<B, C, ?>>,java.lang.Iterable<A>)"},"test_reverse_method_lines_dic":{"31":"PartitionTest::::createTraitsTestSubject()","32":"PartitionTest::::createTraitsTestSubject()","33":"PartitionTest::::createTraitsTestSubject()","34":"PartitionTest::::createTraitsTestSubject()","35":"PartitionTest::::createTraitsTestSubject()","37":"PartitionTest::::partitionsIterableIntoAsAndBs()","38":"PartitionTest::::partitionsIterableIntoAsAndBs()","39":"PartitionTest::::partitionsIterableIntoAsAndBs()","40":"PartitionTest::::partitionsIterableIntoAsAndBs()","41":"PartitionTest::::partitionsIterableIntoAsAndBs()","42":"PartitionTest::::partitionsIterableIntoAsAndBs()","43":"PartitionTest::::partitionsIterableIntoAsAndBs()","44":"PartitionTest::::partitionsIterableIntoAsAndBs()","46":"PartitionTest::::infiniteListSupport()","47":"PartitionTest::::infiniteListSupport()","48":"PartitionTest::::infiniteListSupport()","49":"PartitionTest::::infiniteListSupport()","50":"PartitionTest::::infiniteListSupport()","51":"PartitionTest::::infiniteListSupport()","52":"PartitionTest::::infiniteListSupport()","53":"PartitionTest::::infiniteListSupport()"},"tests":[{"test_lines":[31,35],"covered_lines":[28,30,31,44,49]},{"test_lines":[37,44],"covered_lines":[28,30,31,36,37,38,39,44,49,55]},{"test_lines":[46,53],"covered_lines":[28,30,31,36,37,38,39,44,49,55]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/LazyRec.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn2;\n","import com.jnape.palatable.lambda.functions.specialized.Kleisli;\n","import com.jnape.palatable.lambda.functor.builtin.Lazy;\n","\n","import static com.jnape.palatable.lambda.functions.specialized.Kleisli.kleisli;\n","import static com.jnape.palatable.lambda.functor.builtin.Lazy.lazy;\n","\n","/**\n"," * Given a {@link Fn2} that receives a recursive function and an input and yields a {@link Lazy lazy} result, and an\n"," * input, produce a {@link Lazy lazy} result that, when forced, will recursively invoke the function until it terminates\n"," * in a stack-safe way.\n"," * <p>\n"," * Example:\n"," * <pre>\n"," * {@code\n"," * Lazy<BigInteger> lazyFactorial = lazyRec((fact, x) -&gt; x.equals(ONE)\n"," *                                                       ? lazy(x)\n"," *                                                       : fact.apply(x.subtract(ONE)).fmap(y -&gt; y.multiply(x)),\n"," *                                                  BigInteger.valueOf(50_000));\n"," * BigInteger value = lazyFactorial.value(); // 3.34732050959714483691547609407148647791277322381045 x 10^213236\n"," * }\n"," * </pre>\n"," *\n"," * @param <A> the input type\n"," * @param <B> the output type\n"," */\n","public final class LazyRec<A, B> implements\n","        Fn2<Fn2<Kleisli<? super A, ? extends B, Lazy<?>, Lazy<B>>, A, Lazy<B>>, A, Lazy<B>> {\n","\n","    private static final LazyRec<?, ?> INSTANCE = new LazyRec<>();\n","\n","    private LazyRec() {\n","    }\n","\n","    @Override\n","    public Lazy<B> checkedApply(Fn2<Kleisli<? super A, ? extends B, Lazy<?>, Lazy<B>>, A, Lazy<B>> fn, A a) {\n","        return lazy(a).flatMap(fn.apply(lazyRec(fn)));\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A, B> LazyRec<A, B> lazyRec() {\n","        return (LazyRec<A, B>) INSTANCE;\n","    }\n","\n","    public static <A, B> Kleisli<? super A, ? extends B, Lazy<?>, Lazy<B>> lazyRec(\n","            Fn2<Kleisli<? super A, ? extends B, Lazy<?>, Lazy<B>>, A, Lazy<B>> fn) {\n","        return kleisli(LazyRec.<A, B>lazyRec().apply(fn));\n","    }\n","\n","    public static <A, B> Lazy<B> lazyRec(Fn2<Kleisli<? super A, ? extends B, Lazy<?>, Lazy<B>>, A, Lazy<B>> fn, A a) {\n","        return lazyRec(fn).apply(a);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import org.junit.Test;\n","\n","import java.util.concurrent.atomic.AtomicBoolean;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.LazyRec.lazyRec;\n","import static com.jnape.palatable.lambda.functor.builtin.Lazy.lazy;\n","import static org.junit.Assert.assertEquals;\n","import static org.junit.Assert.assertFalse;\n","import static testsupport.Constants.STACK_EXPLODING_NUMBER;\n","\n","public class LazyRecTest {\n","\n","    @Test\n","    public void recursivelyComputesValue() {\n","        assertEquals(STACK_EXPLODING_NUMBER,\n","                     LazyRec.<Integer, Integer>lazyRec((f, x) -> x < STACK_EXPLODING_NUMBER\n","                                                                 ? f.apply(x + 1)\n","                                                                 : lazy(x),\n","                                                       0)\n","                             .value());\n","    }\n","\n","    @Test\n","    public void defersAllComputationUntilForced() {\n","        AtomicBoolean invoked = new AtomicBoolean(false);\n","        lazyRec((f, x) -> {\n","                    invoked.set(true);\n","                    return lazy(x);\n","                },\n","                0);\n","\n","        assertFalse(invoked.get());\n","    }\n","\n","}"],"method_lines_dic":{"LazyRec::::checkedApply(com.jnape.palatable.lambda.functions.Fn2<com.jnape.palatable.lambda.functions.specialized.Kleisli<? super A, ? extends B, com.jnape.palatable.lambda.functor.builtin.Lazy<?>, com.jnape.palatable.lambda.functor.builtin.Lazy<B>>, A, com.jnape.palatable.lambda.functor.builtin.Lazy<B>>,A)":[37,40],"LazyRec::::lazyRec()":[42,45],"LazyRec::::lazyRec(com.jnape.palatable.lambda.functions.Fn2<com.jnape.palatable.lambda.functions.specialized.Kleisli<? super A, ? extends B, com.jnape.palatable.lambda.functor.builtin.Lazy<?>, com.jnape.palatable.lambda.functor.builtin.Lazy<B>>, A, com.jnape.palatable.lambda.functor.builtin.Lazy<B>>)":[47,50],"LazyRec::::lazyRec(com.jnape.palatable.lambda.functions.Fn2<com.jnape.palatable.lambda.functions.specialized.Kleisli<? super A, ? extends B, com.jnape.palatable.lambda.functor.builtin.Lazy<?>, com.jnape.palatable.lambda.functor.builtin.Lazy<B>>, A, com.jnape.palatable.lambda.functor.builtin.Lazy<B>>,A)":[52,54]},"test_method_lines_dic":{"LazyRecTest::::recursivelyComputesValue()":[15,23],"LazyRecTest::::defersAllComputationUntilForced()":[25,35]},"reverse_method_lines_dic":{"37":"LazyRec::::checkedApply(com.jnape.palatable.lambda.functions.Fn2<com.jnape.palatable.lambda.functions.specialized.Kleisli<? super A, ? extends B, com.jnape.palatable.lambda.functor.builtin.Lazy<?>, com.jnape.palatable.lambda.functor.builtin.Lazy<B>>, A, com.jnape.palatable.lambda.functor.builtin.Lazy<B>>,A)","38":"LazyRec::::checkedApply(com.jnape.palatable.lambda.functions.Fn2<com.jnape.palatable.lambda.functions.specialized.Kleisli<? super A, ? extends B, com.jnape.palatable.lambda.functor.builtin.Lazy<?>, com.jnape.palatable.lambda.functor.builtin.Lazy<B>>, A, com.jnape.palatable.lambda.functor.builtin.Lazy<B>>,A)","39":"LazyRec::::checkedApply(com.jnape.palatable.lambda.functions.Fn2<com.jnape.palatable.lambda.functions.specialized.Kleisli<? super A, ? extends B, com.jnape.palatable.lambda.functor.builtin.Lazy<?>, com.jnape.palatable.lambda.functor.builtin.Lazy<B>>, A, com.jnape.palatable.lambda.functor.builtin.Lazy<B>>,A)","40":"LazyRec::::checkedApply(com.jnape.palatable.lambda.functions.Fn2<com.jnape.palatable.lambda.functions.specialized.Kleisli<? super A, ? extends B, com.jnape.palatable.lambda.functor.builtin.Lazy<?>, com.jnape.palatable.lambda.functor.builtin.Lazy<B>>, A, com.jnape.palatable.lambda.functor.builtin.Lazy<B>>,A)","42":"LazyRec::::lazyRec()","43":"LazyRec::::lazyRec()","44":"LazyRec::::lazyRec()","45":"LazyRec::::lazyRec()","47":"LazyRec::::lazyRec(com.jnape.palatable.lambda.functions.Fn2<com.jnape.palatable.lambda.functions.specialized.Kleisli<? super A, ? extends B, com.jnape.palatable.lambda.functor.builtin.Lazy<?>, com.jnape.palatable.lambda.functor.builtin.Lazy<B>>, A, com.jnape.palatable.lambda.functor.builtin.Lazy<B>>)","48":"LazyRec::::lazyRec(com.jnape.palatable.lambda.functions.Fn2<com.jnape.palatable.lambda.functions.specialized.Kleisli<? super A, ? extends B, com.jnape.palatable.lambda.functor.builtin.Lazy<?>, com.jnape.palatable.lambda.functor.builtin.Lazy<B>>, A, com.jnape.palatable.lambda.functor.builtin.Lazy<B>>)","49":"LazyRec::::lazyRec(com.jnape.palatable.lambda.functions.Fn2<com.jnape.palatable.lambda.functions.specialized.Kleisli<? super A, ? extends B, com.jnape.palatable.lambda.functor.builtin.Lazy<?>, com.jnape.palatable.lambda.functor.builtin.Lazy<B>>, A, com.jnape.palatable.lambda.functor.builtin.Lazy<B>>)","50":"LazyRec::::lazyRec(com.jnape.palatable.lambda.functions.Fn2<com.jnape.palatable.lambda.functions.specialized.Kleisli<? super A, ? extends B, com.jnape.palatable.lambda.functor.builtin.Lazy<?>, com.jnape.palatable.lambda.functor.builtin.Lazy<B>>, A, com.jnape.palatable.lambda.functor.builtin.Lazy<B>>)","52":"LazyRec::::lazyRec(com.jnape.palatable.lambda.functions.Fn2<com.jnape.palatable.lambda.functions.specialized.Kleisli<? super A, ? extends B, com.jnape.palatable.lambda.functor.builtin.Lazy<?>, com.jnape.palatable.lambda.functor.builtin.Lazy<B>>, A, com.jnape.palatable.lambda.functor.builtin.Lazy<B>>,A)","53":"LazyRec::::lazyRec(com.jnape.palatable.lambda.functions.Fn2<com.jnape.palatable.lambda.functions.specialized.Kleisli<? super A, ? extends B, com.jnape.palatable.lambda.functor.builtin.Lazy<?>, com.jnape.palatable.lambda.functor.builtin.Lazy<B>>, A, com.jnape.palatable.lambda.functor.builtin.Lazy<B>>,A)","54":"LazyRec::::lazyRec(com.jnape.palatable.lambda.functions.Fn2<com.jnape.palatable.lambda.functions.specialized.Kleisli<? super A, ? extends B, com.jnape.palatable.lambda.functor.builtin.Lazy<?>, com.jnape.palatable.lambda.functor.builtin.Lazy<B>>, A, com.jnape.palatable.lambda.functor.builtin.Lazy<B>>,A)"},"test_reverse_method_lines_dic":{"15":"LazyRecTest::::recursivelyComputesValue()","16":"LazyRecTest::::recursivelyComputesValue()","17":"LazyRecTest::::recursivelyComputesValue()","18":"LazyRecTest::::recursivelyComputesValue()","19":"LazyRecTest::::recursivelyComputesValue()","20":"LazyRecTest::::recursivelyComputesValue()","21":"LazyRecTest::::recursivelyComputesValue()","22":"LazyRecTest::::recursivelyComputesValue()","23":"LazyRecTest::::recursivelyComputesValue()","25":"LazyRecTest::::defersAllComputationUntilForced()","26":"LazyRecTest::::defersAllComputationUntilForced()","27":"LazyRecTest::::defersAllComputationUntilForced()","28":"LazyRecTest::::defersAllComputationUntilForced()","29":"LazyRecTest::::defersAllComputationUntilForced()","30":"LazyRecTest::::defersAllComputationUntilForced()","31":"LazyRecTest::::defersAllComputationUntilForced()","32":"LazyRecTest::::defersAllComputationUntilForced()","33":"LazyRecTest::::defersAllComputationUntilForced()","34":"LazyRecTest::::defersAllComputationUntilForced()","35":"LazyRecTest::::defersAllComputationUntilForced()"},"tests":[{"test_lines":[15,23],"covered_lines":[32,34,35,39,44,49,53]},{"test_lines":[25,35],"covered_lines":[32,34,35,39,44,49,53]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/Difference.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","import com.jnape.palatable.lambda.functions.builtin.fn1.Distinct;\n","\n","import java.util.HashSet;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Distinct.distinct;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Empty.empty;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Filter.filter;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.ToCollection.toCollection;\n","\n","/**\n"," * Given two {@link Iterable Iterables} <code>xs</code> and <code>ys</code>, return the {@link Distinct distinct}\n"," * elements of <code>xs</code> that are not in <code>ys</code>. Note that this is <strong>not</strong> symmetric\n"," * difference.\n"," * <p>\n"," * This operation preserves order, so the resulting elements from <code>xs</code> are iterated in the order that\n"," * they uniquely occur in.\n"," *\n"," * @param <A> the {@link Iterable} element type\n"," */\n","public final class Difference<A> implements Fn2<Iterable<A>, Iterable<A>, Iterable<A>> {\n","\n","    private static final Difference<?> INSTANCE = new Difference<>();\n","\n","    private Difference() {\n","    }\n","\n","    @Override\n","    public Iterable<A> checkedApply(Iterable<A> xs, Iterable<A> ys) {\n","        return () -> {\n","            if (empty(xs))\n","                return xs.iterator();\n","\n","            if (empty(ys))\n","                return distinct(xs).iterator();\n","\n","            //todo: a pre-order depth-first fold of the expression tree would make this stack-safe\n","            HashSet<A> uniqueYs = toCollection(HashSet::new, ys);\n","            return distinct(filter(a -> !uniqueYs.contains(a), xs)).iterator();\n","        };\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> Difference<A> difference() {\n","        return (Difference<A>) INSTANCE;\n","    }\n","\n","    public static <A> Fn1<Iterable<A>, Iterable<A>> difference(Iterable<A> xs) {\n","        return Difference.<A>difference().apply(xs);\n","    }\n","\n","    public static <A> Iterable<A> difference(Iterable<A> xs, Iterable<A> ys) {\n","        return difference(xs).apply(ys);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.EmptyIterableSupport;\n","import testsupport.traits.FiniteIteration;\n","import testsupport.traits.ImmutableIteration;\n","import testsupport.traits.InfiniteIterableSupport;\n","import testsupport.traits.Laziness;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Difference.difference;\n","import static java.util.Arrays.asList;\n","import static java.util.Collections.emptyList;\n","import static java.util.Collections.singletonList;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IterableMatcher.isEmpty;\n","import static testsupport.matchers.IterableMatcher.iterates;\n","\n","@RunWith(Traits.class)\n","public class DifferenceTest {\n","\n","    @TestTraits({Laziness.class, InfiniteIterableSupport.class, EmptyIterableSupport.class, FiniteIteration.class, ImmutableIteration.class})\n","    public Fn1<Iterable<Integer>, Iterable<Integer>> testSubject() {\n","        return Difference.<Integer>difference().flip().apply(asList(1, 2, 3));\n","    }\n","\n","    @Test\n","    public void semigroup() {\n","        assertThat(difference(emptyList(), emptyList()), isEmpty());\n","        assertThat(difference(asList(1, 2, 3), emptyList()), iterates(1, 2, 3));\n","        assertThat(difference(asList(1, 2, 2, 3), emptyList()), iterates(1, 2, 3));\n","        assertThat(difference(emptyList(), asList(1, 2, 3)), isEmpty());\n","        assertThat(difference(asList(1, 2, 3), singletonList(4)), iterates(1, 2, 3));\n","        assertThat(difference(asList(1, 2, 3), asList(2, 4)), iterates(1, 3));\n","    }\n","}"],"method_lines_dic":{"Difference::::checkedApply(java.lang.Iterable<A>,java.lang.Iterable<A>)":[31,44],"Difference::::difference()":[46,49],"Difference::::difference(java.lang.Iterable<A>)":[51,53],"Difference::::difference(java.lang.Iterable<A>,java.lang.Iterable<A>)":[55,57]},"test_method_lines_dic":{"DifferenceTest::::testSubject()":[25,28],"DifferenceTest::::semigroup()":[30,38]},"reverse_method_lines_dic":{"31":"Difference::::checkedApply(java.lang.Iterable<A>,java.lang.Iterable<A>)","32":"Difference::::checkedApply(java.lang.Iterable<A>,java.lang.Iterable<A>)","33":"Difference::::checkedApply(java.lang.Iterable<A>,java.lang.Iterable<A>)","34":"Difference::::checkedApply(java.lang.Iterable<A>,java.lang.Iterable<A>)","35":"Difference::::checkedApply(java.lang.Iterable<A>,java.lang.Iterable<A>)","36":"Difference::::checkedApply(java.lang.Iterable<A>,java.lang.Iterable<A>)","37":"Difference::::checkedApply(java.lang.Iterable<A>,java.lang.Iterable<A>)","38":"Difference::::checkedApply(java.lang.Iterable<A>,java.lang.Iterable<A>)","39":"Difference::::checkedApply(java.lang.Iterable<A>,java.lang.Iterable<A>)","40":"Difference::::checkedApply(java.lang.Iterable<A>,java.lang.Iterable<A>)","41":"Difference::::checkedApply(java.lang.Iterable<A>,java.lang.Iterable<A>)","42":"Difference::::checkedApply(java.lang.Iterable<A>,java.lang.Iterable<A>)","43":"Difference::::checkedApply(java.lang.Iterable<A>,java.lang.Iterable<A>)","44":"Difference::::checkedApply(java.lang.Iterable<A>,java.lang.Iterable<A>)","46":"Difference::::difference()","47":"Difference::::difference()","48":"Difference::::difference()","49":"Difference::::difference()","51":"Difference::::difference(java.lang.Iterable<A>)","52":"Difference::::difference(java.lang.Iterable<A>)","53":"Difference::::difference(java.lang.Iterable<A>)","55":"Difference::::difference(java.lang.Iterable<A>,java.lang.Iterable<A>)","56":"Difference::::difference(java.lang.Iterable<A>,java.lang.Iterable<A>)","57":"Difference::::difference(java.lang.Iterable<A>,java.lang.Iterable<A>)"},"test_reverse_method_lines_dic":{"25":"DifferenceTest::::testSubject()","26":"DifferenceTest::::testSubject()","27":"DifferenceTest::::testSubject()","28":"DifferenceTest::::testSubject()","30":"DifferenceTest::::semigroup()","31":"DifferenceTest::::semigroup()","32":"DifferenceTest::::semigroup()","33":"DifferenceTest::::semigroup()","34":"DifferenceTest::::semigroup()","35":"DifferenceTest::::semigroup()","36":"DifferenceTest::::semigroup()","37":"DifferenceTest::::semigroup()","38":"DifferenceTest::::semigroup()"},"tests":[{"test_lines":[25,28],"covered_lines":[26,28,29,48]},{"test_lines":[30,38],"covered_lines":[26,28,29,33,34,35,37,38,41,42,48,52,56]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/Unfoldr.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.adt.hlist.Tuple2;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","import com.jnape.palatable.lambda.internal.iteration.UnfoldingIterator;\n","\n","/**\n"," * Given an initial seed value and a function that takes the seed type and produces an <code>{@link Maybe}&lt;{@link\n"," * Tuple2}&lt;X, Seed&gt;&gt;</code>, where the tuple's first slot represents the next <code>Iterable</code> element,\n"," * and the second slot represents the next input to the unfolding function, unfold an <code>Iterable</code> of\n"," * <code>X</code>s. Returning {@link Maybe#nothing()} from the unfolding function is a signal that the {@link Iterable}\n"," * is fully unfolded.\n"," * <p>\n"," * For more information, read about <a href=\"https://en.wikipedia.org/wiki/Anamorphism\" target=\"_top\">Anamorphisms</a>.\n"," * <p>\n"," * Example:\n"," * <pre>\n"," * {@code\n"," * Iterable<Integer> zeroThroughTenInclusive = unfoldr(x -> x <= 10\n"," *         ? Maybe.just(tuple(x, x + 1))\n"," *         : Maybe.nothing(), 0);\n"," * }\n"," * </pre>\n"," *\n"," * @param <A> The output Iterable element type\n"," * @param <B> The unfolding function input type\n"," */\n","public final class Unfoldr<A, B> implements Fn2<Fn1<? super B, Maybe<Tuple2<A, B>>>, B, Iterable<A>> {\n","\n","    private static final Unfoldr<?, ?> INSTANCE = new Unfoldr<>();\n","\n","    private Unfoldr() {\n","    }\n","\n","    @Override\n","    public Iterable<A> checkedApply(Fn1<? super B, Maybe<Tuple2<A, B>>> fn, B b) {\n","        return () -> new UnfoldingIterator<>(fn, b);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A, B> Unfoldr<A, B> unfoldr() {\n","        return (Unfoldr<A, B>) INSTANCE;\n","    }\n","\n","    public static <A, B> Fn1<B, Iterable<A>> unfoldr(Fn1<? super B, Maybe<Tuple2<A, B>>> fn) {\n","        return Unfoldr.<A, B>unfoldr().apply(fn);\n","    }\n","\n","    public static <A, B> Iterable<A> unfoldr(Fn1<? super B, Maybe<Tuple2<A, B>>> fn, B b) {\n","        return unfoldr(fn).apply(b);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.ImmutableIteration;\n","import testsupport.traits.InfiniteIteration;\n","import testsupport.traits.Laziness;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Take.take;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Unfoldr.unfoldr;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IterableMatcher.isEmpty;\n","import static testsupport.matchers.IterableMatcher.iterates;\n","\n","@RunWith(Traits.class)\n","public class UnfoldrTest {\n","\n","    @TestTraits({Laziness.class, InfiniteIteration.class, ImmutableIteration.class})\n","    public Fn1<? extends Iterable<?>, ? extends Iterable<?>> createTestSubject() {\n","        return unfoldr(x -> just(tuple(x, x)));\n","    }\n","\n","    @Test\n","    public void iteratesIterableFromSeedValueAndSuccessiveFunctionApplications() {\n","        assertThat(take(5, unfoldr(x -> just(tuple(x, x + 1)), 0)), iterates(0, 1, 2, 3, 4));\n","    }\n","\n","    @Test\n","    public void emptyIteration() {\n","        assertThat(unfoldr(constantly(nothing()), 1), isEmpty());\n","    }\n","}\n"],"method_lines_dic":{"Unfoldr::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super B, com.jnape.palatable.lambda.adt.Maybe<com.jnape.palatable.lambda.adt.hlist.Tuple2<A, B>>>,B)":[37,40],"Unfoldr::::unfoldr()":[42,45],"Unfoldr::::unfoldr(com.jnape.palatable.lambda.functions.Fn1<? super B, com.jnape.palatable.lambda.adt.Maybe<com.jnape.palatable.lambda.adt.hlist.Tuple2<A, B>>>)":[47,49],"Unfoldr::::unfoldr(com.jnape.palatable.lambda.functions.Fn1<? super B, com.jnape.palatable.lambda.adt.Maybe<com.jnape.palatable.lambda.adt.hlist.Tuple2<A, B>>>,B)":[51,53]},"test_method_lines_dic":{"UnfoldrTest::::createTestSubject()":[25,28],"UnfoldrTest::::iteratesIterableFromSeedValueAndSuccessiveFunctionApplications()":[30,33],"UnfoldrTest::::emptyIteration()":[35,38]},"reverse_method_lines_dic":{"37":"Unfoldr::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super B, com.jnape.palatable.lambda.adt.Maybe<com.jnape.palatable.lambda.adt.hlist.Tuple2<A, B>>>,B)","38":"Unfoldr::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super B, com.jnape.palatable.lambda.adt.Maybe<com.jnape.palatable.lambda.adt.hlist.Tuple2<A, B>>>,B)","39":"Unfoldr::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super B, com.jnape.palatable.lambda.adt.Maybe<com.jnape.palatable.lambda.adt.hlist.Tuple2<A, B>>>,B)","40":"Unfoldr::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super B, com.jnape.palatable.lambda.adt.Maybe<com.jnape.palatable.lambda.adt.hlist.Tuple2<A, B>>>,B)","42":"Unfoldr::::unfoldr()","43":"Unfoldr::::unfoldr()","44":"Unfoldr::::unfoldr()","45":"Unfoldr::::unfoldr()","47":"Unfoldr::::unfoldr(com.jnape.palatable.lambda.functions.Fn1<? super B, com.jnape.palatable.lambda.adt.Maybe<com.jnape.palatable.lambda.adt.hlist.Tuple2<A, B>>>)","48":"Unfoldr::::unfoldr(com.jnape.palatable.lambda.functions.Fn1<? super B, com.jnape.palatable.lambda.adt.Maybe<com.jnape.palatable.lambda.adt.hlist.Tuple2<A, B>>>)","49":"Unfoldr::::unfoldr(com.jnape.palatable.lambda.functions.Fn1<? super B, com.jnape.palatable.lambda.adt.Maybe<com.jnape.palatable.lambda.adt.hlist.Tuple2<A, B>>>)","51":"Unfoldr::::unfoldr(com.jnape.palatable.lambda.functions.Fn1<? super B, com.jnape.palatable.lambda.adt.Maybe<com.jnape.palatable.lambda.adt.hlist.Tuple2<A, B>>>,B)","52":"Unfoldr::::unfoldr(com.jnape.palatable.lambda.functions.Fn1<? super B, com.jnape.palatable.lambda.adt.Maybe<com.jnape.palatable.lambda.adt.hlist.Tuple2<A, B>>>,B)","53":"Unfoldr::::unfoldr(com.jnape.palatable.lambda.functions.Fn1<? super B, com.jnape.palatable.lambda.adt.Maybe<com.jnape.palatable.lambda.adt.hlist.Tuple2<A, B>>>,B)"},"test_reverse_method_lines_dic":{"25":"UnfoldrTest::::createTestSubject()","26":"UnfoldrTest::::createTestSubject()","27":"UnfoldrTest::::createTestSubject()","28":"UnfoldrTest::::createTestSubject()","30":"UnfoldrTest::::iteratesIterableFromSeedValueAndSuccessiveFunctionApplications()","31":"UnfoldrTest::::iteratesIterableFromSeedValueAndSuccessiveFunctionApplications()","32":"UnfoldrTest::::iteratesIterableFromSeedValueAndSuccessiveFunctionApplications()","33":"UnfoldrTest::::iteratesIterableFromSeedValueAndSuccessiveFunctionApplications()","35":"UnfoldrTest::::emptyIteration()","36":"UnfoldrTest::::emptyIteration()","37":"UnfoldrTest::::emptyIteration()","38":"UnfoldrTest::::emptyIteration()"},"tests":[{"test_lines":[25,28],"covered_lines":[32,34,35,44,48]},{"test_lines":[30,33],"covered_lines":[32,34,35,39,44,48,52]},{"test_lines":[35,38],"covered_lines":[32,34,35,39,44,48,52]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/MagnetizeBy.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","\n","import java.util.Collections;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Size.size;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Uncons.uncons;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Cons.cons;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Drop.drop;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Into.into;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Unfoldr.unfoldr;\n","\n","/**\n"," * Given a binary predicate and an <code>{@link Iterable}&lt;A&gt;</code>, return an <code>{@link Iterable}&lt;{@link\n"," * Iterable}&lt;A&gt;&gt;</code> of the contiguous groups of elements that match the predicate pairwise.\n"," * <p>\n"," * Example: <code>magnetizeBy((x, y) -&gt; x &lt;= y, asList(1, 2, 3, 2, 2, 3, 2, 1)); // [[1, 2, 3], [2, 2, 3], [2],\n"," * [1]]</code>\n"," *\n"," * @param <A> the {@link Iterable} element type\n"," */\n","public final class MagnetizeBy<A> implements Fn2<Fn2<? super A, ? super A, ? extends Boolean>, Iterable<A>, Iterable<Iterable<A>>> {\n","\n","    private static final MagnetizeBy<?> INSTANCE = new MagnetizeBy<>();\n","\n","    private MagnetizeBy() {\n","    }\n","\n","    @Override\n","    public Iterable<Iterable<A>> checkedApply(Fn2<? super A, ? super A, ? extends Boolean> predicate,\n","                                              Iterable<A> as) {\n","        return () -> uncons(as).fmap(into((A head, Iterable<A> tail) -> {\n","            Iterable<A> group = cons(head, unfoldr(into((pivot, ys) -> uncons(ys)\n","                    .flatMap(into((y, recurse) -> predicate.apply(pivot, y)\n","                                                  ? just(tuple(y, tuple(y, recurse)))\n","                                                  : nothing()))), tuple(head, tail)));\n","            return cons(group, () -> apply(predicate, drop(size(group).intValue(), as)).iterator());\n","        })).orElseGet(() -> Collections::emptyIterator).iterator();\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> MagnetizeBy<A> magnetizeBy() {\n","        return (MagnetizeBy<A>) INSTANCE;\n","    }\n","\n","    public static <A> Fn1<Iterable<A>, Iterable<Iterable<A>>> magnetizeBy(\n","            Fn2<? super A, ? super A, ? extends Boolean> predicate) {\n","        return MagnetizeBy.<A>magnetizeBy().apply(predicate);\n","    }\n","\n","    public static <A> Iterable<Iterable<A>> magnetizeBy(\n","            Fn2<? super A, ? super A, ? extends Boolean> predicate,\n","            Iterable<A> as) {\n","        return MagnetizeBy.<A>magnetizeBy(predicate).apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.EmptyIterableSupport;\n","import testsupport.traits.FiniteIteration;\n","import testsupport.traits.ImmutableIteration;\n","import testsupport.traits.InfiniteIterableSupport;\n","import testsupport.traits.Laziness;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Last.last;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Repeat.repeat;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Eq.eq;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.GTE.gte;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.MagnetizeBy.magnetizeBy;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Take.take;\n","import static java.util.Arrays.asList;\n","import static java.util.Collections.emptyList;\n","import static java.util.Collections.singletonList;\n","import static org.hamcrest.collection.IsIterableContainingInOrder.contains;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IterableMatcher.isEmpty;\n","import static testsupport.matchers.IterableMatcher.iterates;\n","\n","@RunWith(Traits.class)\n","public class MagnetizeByTest {\n","\n","    @TestTraits({EmptyIterableSupport.class, InfiniteIterableSupport.class, FiniteIteration.class, ImmutableIteration.class, Laziness.class})\n","    public Fn1<Iterable<Object>, Iterable<Iterable<Object>>> testSubject() {\n","        return magnetizeBy(eq());\n","    }\n","\n","    @Test\n","    @SuppressWarnings(\"unchecked\")\n","    public void magnetizesElementsByPredicateOutcome() {\n","        assertThat(magnetizeBy(GTE.<Integer>gte(), emptyList()), isEmpty());\n","        assertThat(magnetizeBy(gte(), singletonList(1)), contains(iterates(1)));\n","        assertThat(magnetizeBy(gte(), asList(1, 2, 3, 2, 2, 3, 2, 1)),\n","                   contains(iterates(1, 2, 3),\n","                            iterates(2, 2, 3),\n","                            iterates(2),\n","                            iterates(1)));\n","    }\n","\n","    @Test\n","    public void stackSafety() {\n","        int stackBlowingNumber = 10_000;\n","        assertThat(last(magnetizeBy((x, y) -> false, take(stackBlowingNumber, repeat(1)))).orElseThrow(AssertionError::new),\n","                   iterates(1));\n","    }\n","}"],"method_lines_dic":{"MagnetizeBy::::checkedApply(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)":[34,44],"MagnetizeBy::::magnetizeBy()":[46,49],"MagnetizeBy::::magnetizeBy(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends java.lang.Boolean>)":[51,54],"MagnetizeBy::::magnetizeBy(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)":[56,60]},"test_method_lines_dic":{"MagnetizeByTest::::testSubject()":[31,34],"MagnetizeByTest::::magnetizesElementsByPredicateOutcome()":[36,46],"MagnetizeByTest::::stackSafety()":[48,53]},"reverse_method_lines_dic":{"34":"MagnetizeBy::::checkedApply(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","35":"MagnetizeBy::::checkedApply(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","36":"MagnetizeBy::::checkedApply(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","37":"MagnetizeBy::::checkedApply(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","38":"MagnetizeBy::::checkedApply(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","39":"MagnetizeBy::::checkedApply(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","40":"MagnetizeBy::::checkedApply(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","41":"MagnetizeBy::::checkedApply(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","42":"MagnetizeBy::::checkedApply(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","43":"MagnetizeBy::::checkedApply(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","44":"MagnetizeBy::::checkedApply(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","46":"MagnetizeBy::::magnetizeBy()","47":"MagnetizeBy::::magnetizeBy()","48":"MagnetizeBy::::magnetizeBy()","49":"MagnetizeBy::::magnetizeBy()","51":"MagnetizeBy::::magnetizeBy(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends java.lang.Boolean>)","52":"MagnetizeBy::::magnetizeBy(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends java.lang.Boolean>)","53":"MagnetizeBy::::magnetizeBy(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends java.lang.Boolean>)","54":"MagnetizeBy::::magnetizeBy(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends java.lang.Boolean>)","56":"MagnetizeBy::::magnetizeBy(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","57":"MagnetizeBy::::magnetizeBy(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","58":"MagnetizeBy::::magnetizeBy(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","59":"MagnetizeBy::::magnetizeBy(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","60":"MagnetizeBy::::magnetizeBy(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)"},"test_reverse_method_lines_dic":{"31":"MagnetizeByTest::::testSubject()","32":"MagnetizeByTest::::testSubject()","33":"MagnetizeByTest::::testSubject()","34":"MagnetizeByTest::::testSubject()","36":"MagnetizeByTest::::magnetizesElementsByPredicateOutcome()","37":"MagnetizeByTest::::magnetizesElementsByPredicateOutcome()","38":"MagnetizeByTest::::magnetizesElementsByPredicateOutcome()","39":"MagnetizeByTest::::magnetizesElementsByPredicateOutcome()","40":"MagnetizeByTest::::magnetizesElementsByPredicateOutcome()","41":"MagnetizeByTest::::magnetizesElementsByPredicateOutcome()","42":"MagnetizeByTest::::magnetizesElementsByPredicateOutcome()","43":"MagnetizeByTest::::magnetizesElementsByPredicateOutcome()","44":"MagnetizeByTest::::magnetizesElementsByPredicateOutcome()","45":"MagnetizeByTest::::magnetizesElementsByPredicateOutcome()","46":"MagnetizeByTest::::magnetizesElementsByPredicateOutcome()","48":"MagnetizeByTest::::stackSafety()","49":"MagnetizeByTest::::stackSafety()","50":"MagnetizeByTest::::stackSafety()","51":"MagnetizeByTest::::stackSafety()","52":"MagnetizeByTest::::stackSafety()","53":"MagnetizeByTest::::stackSafety()"},"tests":[{"test_lines":[31,34],"covered_lines":[29,31,32,48,53]},{"test_lines":[36,46],"covered_lines":[29,31,32,37,38,39,40,41,42,43,48,53,59]},{"test_lines":[48,53],"covered_lines":[29,31,32,37,38,39,41,42,43,48,53,59]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/SortWith.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","import com.jnape.palatable.lambda.functions.builtin.fn1.Sort;\n","\n","import java.util.ArrayList;\n","import java.util.Comparator;\n","import java.util.List;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.ToCollection.toCollection;\n","\n","/**\n"," * Given an {@link Iterable} and a {@link java.util.Comparator} over the {@link Iterable} element type, produce a\n"," * sorted {@link List} of the original elements based on sorting applied by the {@link java.util.Comparator}. Note that\n"," * this is both eager and monolithic.\n"," *\n"," * @param <A> the input Iterable and output List element type\n"," * @see Sort\n"," * @see SortBy\n"," */\n","public final class SortWith<A> implements Fn2<Comparator<? super A>, Iterable<A>, List<A>> {\n","\n","    private static final SortWith<?> INSTANCE = new SortWith<>();\n","\n","    private SortWith() {\n","    }\n","\n","    @Override\n","    public List<A> checkedApply(Comparator<? super A> comparator, Iterable<A> as) {\n","        List<A> result = toCollection(ArrayList::new, as);\n","        result.sort(comparator);\n","        return result;\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> SortWith<A> sortWith() {\n","        return (SortWith<A>) INSTANCE;\n","    }\n","\n","    public static <A> Fn1<Iterable<A>, List<A>> sortWith(Comparator<? super A> comparator) {\n","        return SortWith.<A>sortWith().apply(comparator);\n","    }\n","\n","    public static <A> List<A> sortWith(Comparator<? super A> comparator, Iterable<A> as) {\n","        return SortWith.<A>sortWith(comparator).apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.adt.hlist.Tuple2;\n","import org.junit.Test;\n","\n","import java.util.Comparator;\n","\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.SortWith.sortWith;\n","import static java.util.Arrays.asList;\n","import static org.junit.Assert.assertEquals;\n","\n","public class SortWithTest {\n","\n","    @Test\n","    public void sortsWithGivenComparator() {\n","        assertEquals(asList(tuple(\"bar\", 4), tuple(\"baz\", 3), tuple(\"foo\", 1), tuple(\"foo\", 2)),\n","                     sortWith(Comparator.<Tuple2<String, Integer>, String>comparing(Tuple2::_1)\n","                                      .thenComparing(Tuple2::_2),\n","                              asList(tuple(\"foo\", 1), tuple(\"foo\", 2), tuple(\"bar\", 4), tuple(\"baz\", 3))));\n","    }\n","}"],"method_lines_dic":{"SortWith::::checkedApply(java.util.Comparator<? super A>,java.lang.Iterable<A>)":[29,34],"SortWith::::sortWith()":[36,39],"SortWith::::sortWith(java.util.Comparator<? super A>)":[41,43],"SortWith::::sortWith(java.util.Comparator<? super A>,java.lang.Iterable<A>)":[45,47]},"test_method_lines_dic":{"SortWithTest::::sortsWithGivenComparator()":[15,21]},"reverse_method_lines_dic":{"29":"SortWith::::checkedApply(java.util.Comparator<? super A>,java.lang.Iterable<A>)","30":"SortWith::::checkedApply(java.util.Comparator<? super A>,java.lang.Iterable<A>)","31":"SortWith::::checkedApply(java.util.Comparator<? super A>,java.lang.Iterable<A>)","32":"SortWith::::checkedApply(java.util.Comparator<? super A>,java.lang.Iterable<A>)","33":"SortWith::::checkedApply(java.util.Comparator<? super A>,java.lang.Iterable<A>)","34":"SortWith::::checkedApply(java.util.Comparator<? super A>,java.lang.Iterable<A>)","36":"SortWith::::sortWith()","37":"SortWith::::sortWith()","38":"SortWith::::sortWith()","39":"SortWith::::sortWith()","41":"SortWith::::sortWith(java.util.Comparator<? super A>)","42":"SortWith::::sortWith(java.util.Comparator<? super A>)","43":"SortWith::::sortWith(java.util.Comparator<? super A>)","45":"SortWith::::sortWith(java.util.Comparator<? super A>,java.lang.Iterable<A>)","46":"SortWith::::sortWith(java.util.Comparator<? super A>,java.lang.Iterable<A>)","47":"SortWith::::sortWith(java.util.Comparator<? super A>,java.lang.Iterable<A>)"},"test_reverse_method_lines_dic":{"15":"SortWithTest::::sortsWithGivenComparator()","16":"SortWithTest::::sortsWithGivenComparator()","17":"SortWithTest::::sortsWithGivenComparator()","18":"SortWithTest::::sortsWithGivenComparator()","19":"SortWithTest::::sortsWithGivenComparator()","20":"SortWithTest::::sortsWithGivenComparator()","21":"SortWithTest::::sortsWithGivenComparator()"},"tests":[{"test_lines":[15,21],"covered_lines":[24,26,27,31,32,33,38,42,46]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/Sequence.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","import com.jnape.palatable.lambda.traversable.LambdaIterable;\n","import com.jnape.palatable.lambda.traversable.LambdaMap;\n","import com.jnape.palatable.lambda.traversable.Traversable;\n","\n","import java.util.Map;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Id.id;\n","\n","/**\n"," * Given a {@link Traversable} of {@link Applicative}s and a pure {@link Applicative} constructor, traverse the\n"," * elements from left to right, zipping the {@link Applicative}s together and collecting the results. If the\n"," * {@link Traversable} is empty, simply wrap it in the {@link Applicative} by calling <code>pure</code>.\n"," * <p>\n"," * Modulo any type-level coercion, this is equivalent to <code>traversable.traverse(id(), pure)</code>.\n"," * <p>\n"," * Note that specialized overloads exist for certain built-in JDK types that would otherwise be instances\n"," * {@link Traversable} if it weren't for the extensibility problem.\n"," *\n"," * @param <A>       the Traversable element type\n"," * @param <App>     the Applicative unification parameter\n"," * @param <Trav>    the Traversable unification parameter\n"," * @param <TravA>   the Traversable instance wrapped in the output Applicative\n"," * @param <AppTrav> the concrete parametrized output Applicative type\n"," */\n","public final class Sequence<A, App extends Applicative<?, App>, Trav extends Traversable<?, Trav>,\n","        TravA extends Traversable<A, Trav>,\n","        AppTrav extends Applicative<TravA, App>> implements\n","        Fn2<Traversable<? extends Applicative<A, App>, Trav>, Fn1<TravA, ? extends AppTrav>, AppTrav> {\n","\n","    private static final Sequence<?, ?, ?, ?, ?> INSTANCE = new Sequence<>();\n","\n","    private Sequence() {\n","    }\n","\n","    @Override\n","    public AppTrav checkedApply(Traversable<? extends Applicative<A, App>, Trav> traversable,\n","                                Fn1<TravA, ? extends AppTrav> pure) {\n","        return traversable.traverse(id(), pure);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A, App extends Applicative<?, App>, Trav extends Traversable<?, Trav>,\n","            TravA extends Traversable<A, Trav>,\n","            AppTrav extends Applicative<TravA, App>> Sequence<A, App, Trav, TravA, AppTrav> sequence() {\n","        return (Sequence<A, App, Trav, TravA, AppTrav>) INSTANCE;\n","    }\n","\n","    public static <A, App extends Applicative<?, App>, Trav extends Traversable<?, Trav>,\n","            TravA extends Traversable<A, Trav>,\n","            AppTrav extends Applicative<TravA, App>> Fn1<Fn1<TravA, ? extends AppTrav>, AppTrav> sequence(\n","            Traversable<? extends Applicative<A, App>, Trav> traversable) {\n","        return Sequence.<A, App, Trav, TravA, AppTrav>sequence().apply(traversable);\n","    }\n","\n","    public static <A, App extends Applicative<?, App>, Trav extends Traversable<?, Trav>,\n","            TravA extends Traversable<A, Trav>,\n","            AppTrav extends Applicative<TravA, App>> AppTrav sequence(\n","            Traversable<? extends Applicative<A, App>, Trav> traversable,\n","            Fn1<TravA, ? extends AppTrav> pure) {\n","        return Sequence.<A, App, Trav, TravA, AppTrav>sequence(traversable).apply(pure);\n","    }\n","\n","    @SuppressWarnings({\"unchecked\", \"RedundantTypeArguments\"})\n","    public static <A, App extends Applicative<?, App>, AppIterable extends Applicative<Iterable<A>, App>>\n","    Fn1<Fn1<Iterable<A>, ? extends AppIterable>, AppIterable> sequence(\n","            Iterable<? extends Applicative<A, App>> iterableApp) {\n","        return pure -> (AppIterable) Sequence.<A, App, LambdaIterable<?>, LambdaIterable<A>, Applicative<LambdaIterable<A>, App>>sequence(\n","                LambdaIterable.wrap(iterableApp), x -> pure.apply(x.unwrap()).fmap(LambdaIterable::wrap))\n","                .fmap(LambdaIterable::unwrap);\n","    }\n","\n","    public static <A, App extends Applicative<?, App>, AppIterable extends Applicative<Iterable<A>, App>>\n","    AppIterable sequence(Iterable<? extends Applicative<A, App>> iterableApp,\n","                         Fn1<Iterable<A>, ? extends AppIterable> pure) {\n","        return Sequence.<A, App, AppIterable>sequence(iterableApp).apply(pure);\n","    }\n","\n","    @SuppressWarnings({\"unchecked\", \"RedundantTypeArguments\"})\n","    public static <A, B, App extends Applicative<?, App>, AppMap extends Applicative<Map<A, B>, App>>\n","    Fn1<Fn1<Map<A, B>, ? extends AppMap>, AppMap> sequence(Map<A, ? extends Applicative<B, App>> mapApp) {\n","        return pure -> (AppMap) Sequence.<B, App, LambdaMap<A, ?>, LambdaMap<A, B>, Applicative<LambdaMap<A, B>, App>>sequence(\n","                LambdaMap.wrap(mapApp), x -> pure.apply(x.unwrap()).fmap(LambdaMap::wrap))\n","                .fmap(LambdaMap::unwrap);\n","    }\n","\n","    public static <A, B, App extends Applicative<?, App>, AppMap extends Applicative<Map<A, B>, App>>\n","    AppMap sequence(Map<A, ? extends Applicative<B, App>> mapApp, Fn1<Map<A, B>, ? extends AppMap> pure) {\n","        return Sequence.<A, B, App, AppMap>sequence(mapApp).apply(pure);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.adt.Either;\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functor.builtin.Compose;\n","import com.jnape.palatable.lambda.functor.builtin.Identity;\n","import org.junit.Test;\n","\n","import java.util.Map;\n","\n","import static com.jnape.palatable.lambda.adt.Either.right;\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Id.id;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Sequence.sequence;\n","import static java.util.Arrays.asList;\n","import static java.util.Collections.singletonMap;\n","import static org.junit.Assert.assertEquals;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IterableMatcher.iterates;\n","\n","public class SequenceTest {\n","\n","    @Test\n","    public void naturality() {\n","        Fn1<Identity<?>, Either<String, Object>> t           = id -> right(id.runIdentity());\n","        Either<String, Identity<Integer>>        traversable = right(new Identity<>(1));\n","\n","        assertEquals(t.apply(sequence(traversable, Identity::new).fmap(id())),\n","                     sequence(traversable.fmap(t), Either::right));\n","    }\n","\n","    @Test\n","    public void identity() {\n","        Either<String, Identity<Integer>> traversable = right(new Identity<>(1));\n","        assertEquals(new Identity<>(traversable),\n","                     sequence(traversable.fmap(Identity::new), Identity::new));\n","    }\n","\n","    @Test\n","    public void composition() {\n","        Either<String, Identity<Either<String, Integer>>> traversable = right(new Identity<>(right(1)));\n","        assertEquals(new Compose<>(sequence(traversable, Identity::new).fmap(x -> sequence(x, Either::right)).fmap(id())),\n","                     sequence(traversable.fmap(x -> new Compose<>(x.fmap(id()))), x -> new Compose<>(new Identity<>(right(x)))));\n","    }\n","\n","    @Test\n","    public void iterableSpecialization() {\n","        assertThat(sequence(asList(right(1), right(2)), Either::right)\n","                           .orThrow(l -> new AssertionError(\"Expected a right value, but was a left value of <\" + l + \">\")),\n","                   iterates(1, 2));\n","    }\n","\n","    @Test\n","    public void mapSpecialization() {\n","        assertEquals(right(singletonMap(\"foo\", 1)),\n","                     sequence(singletonMap(\"foo\", right(1)), Either::right));\n","    }\n","\n","    @Test\n","    public void compilation() {\n","        Either<String, Maybe<Integer>> a = sequence(just(right(1)), Either::right);\n","        assertEquals(right(just(1)), a);\n","\n","        Maybe<Either<String, Integer>> b = sequence(right(just(1)), Maybe::just);\n","        assertEquals(just(right(1)), b);\n","\n","        Either<String, Maybe<Integer>> c = sequence(b, Either::right);\n","        assertEquals(a, c);\n","\n","        Maybe<Iterable<Integer>> d = sequence(asList(just(1), just(2)), Maybe::just);\n","        assertThat(d.orElseThrow(AssertionError::new), iterates(1, 2));\n","\n","        Either<String, Map<String, Integer>> e = sequence(singletonMap(\"foo\", right(1)), Either::right);\n","        assertEquals(right(singletonMap(\"foo\", 1)), e);\n","    }\n","}"],"method_lines_dic":{"Sequence::::checkedApply(com.jnape.palatable.lambda.traversable.Traversable<? extends com.jnape.palatable.lambda.functor.Applicative<A, App>, Trav>,com.jnape.palatable.lambda.functions.Fn1<TravA, ? extends AppTrav>)":[40,44],"Sequence::::sequence()":[46,51],"Sequence::::sequence(com.jnape.palatable.lambda.traversable.Traversable<? extends com.jnape.palatable.lambda.functor.Applicative<A, App>, Trav>)":[53,58],"Sequence::::sequence(com.jnape.palatable.lambda.traversable.Traversable<? extends com.jnape.palatable.lambda.functor.Applicative<A, App>, Trav>,com.jnape.palatable.lambda.functions.Fn1<TravA, ? extends AppTrav>)":[60,66],"Sequence::::sequence(java.lang.Iterable<? extends com.jnape.palatable.lambda.functor.Applicative<A, App>>)":[68,75],"Sequence::::sequence(java.lang.Iterable<? extends com.jnape.palatable.lambda.functor.Applicative<A, App>>,com.jnape.palatable.lambda.functions.Fn1<java.lang.Iterable<A>, ? extends AppIterable>)":[77,81],"Sequence::::sequence(java.util.Map<A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>)":[83,89],"Sequence::::sequence(java.util.Map<A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<java.util.Map<A, B>, ? extends AppMap>)":[91,94]},"test_method_lines_dic":{"SequenceTest::::naturality()":[24,31],"SequenceTest::::identity()":[33,38],"SequenceTest::::composition()":[40,45],"SequenceTest::::iterableSpecialization()":[47,52],"SequenceTest::::mapSpecialization()":[54,58],"SequenceTest::::compilation()":[60,76]},"reverse_method_lines_dic":{"40":"Sequence::::checkedApply(com.jnape.palatable.lambda.traversable.Traversable<? extends com.jnape.palatable.lambda.functor.Applicative<A, App>, Trav>,com.jnape.palatable.lambda.functions.Fn1<TravA, ? extends AppTrav>)","41":"Sequence::::checkedApply(com.jnape.palatable.lambda.traversable.Traversable<? extends com.jnape.palatable.lambda.functor.Applicative<A, App>, Trav>,com.jnape.palatable.lambda.functions.Fn1<TravA, ? extends AppTrav>)","42":"Sequence::::checkedApply(com.jnape.palatable.lambda.traversable.Traversable<? extends com.jnape.palatable.lambda.functor.Applicative<A, App>, Trav>,com.jnape.palatable.lambda.functions.Fn1<TravA, ? extends AppTrav>)","43":"Sequence::::checkedApply(com.jnape.palatable.lambda.traversable.Traversable<? extends com.jnape.palatable.lambda.functor.Applicative<A, App>, Trav>,com.jnape.palatable.lambda.functions.Fn1<TravA, ? extends AppTrav>)","44":"Sequence::::checkedApply(com.jnape.palatable.lambda.traversable.Traversable<? extends com.jnape.palatable.lambda.functor.Applicative<A, App>, Trav>,com.jnape.palatable.lambda.functions.Fn1<TravA, ? extends AppTrav>)","46":"Sequence::::sequence()","47":"Sequence::::sequence()","48":"Sequence::::sequence()","49":"Sequence::::sequence()","50":"Sequence::::sequence()","51":"Sequence::::sequence()","53":"Sequence::::sequence(com.jnape.palatable.lambda.traversable.Traversable<? extends com.jnape.palatable.lambda.functor.Applicative<A, App>, Trav>)","54":"Sequence::::sequence(com.jnape.palatable.lambda.traversable.Traversable<? extends com.jnape.palatable.lambda.functor.Applicative<A, App>, Trav>)","55":"Sequence::::sequence(com.jnape.palatable.lambda.traversable.Traversable<? extends com.jnape.palatable.lambda.functor.Applicative<A, App>, Trav>)","56":"Sequence::::sequence(com.jnape.palatable.lambda.traversable.Traversable<? extends com.jnape.palatable.lambda.functor.Applicative<A, App>, Trav>)","57":"Sequence::::sequence(com.jnape.palatable.lambda.traversable.Traversable<? extends com.jnape.palatable.lambda.functor.Applicative<A, App>, Trav>)","58":"Sequence::::sequence(com.jnape.palatable.lambda.traversable.Traversable<? extends com.jnape.palatable.lambda.functor.Applicative<A, App>, Trav>)","60":"Sequence::::sequence(com.jnape.palatable.lambda.traversable.Traversable<? extends com.jnape.palatable.lambda.functor.Applicative<A, App>, Trav>,com.jnape.palatable.lambda.functions.Fn1<TravA, ? extends AppTrav>)","61":"Sequence::::sequence(com.jnape.palatable.lambda.traversable.Traversable<? extends com.jnape.palatable.lambda.functor.Applicative<A, App>, Trav>,com.jnape.palatable.lambda.functions.Fn1<TravA, ? extends AppTrav>)","62":"Sequence::::sequence(com.jnape.palatable.lambda.traversable.Traversable<? extends com.jnape.palatable.lambda.functor.Applicative<A, App>, Trav>,com.jnape.palatable.lambda.functions.Fn1<TravA, ? extends AppTrav>)","63":"Sequence::::sequence(com.jnape.palatable.lambda.traversable.Traversable<? extends com.jnape.palatable.lambda.functor.Applicative<A, App>, Trav>,com.jnape.palatable.lambda.functions.Fn1<TravA, ? extends AppTrav>)","64":"Sequence::::sequence(com.jnape.palatable.lambda.traversable.Traversable<? extends com.jnape.palatable.lambda.functor.Applicative<A, App>, Trav>,com.jnape.palatable.lambda.functions.Fn1<TravA, ? extends AppTrav>)","65":"Sequence::::sequence(com.jnape.palatable.lambda.traversable.Traversable<? extends com.jnape.palatable.lambda.functor.Applicative<A, App>, Trav>,com.jnape.palatable.lambda.functions.Fn1<TravA, ? extends AppTrav>)","66":"Sequence::::sequence(com.jnape.palatable.lambda.traversable.Traversable<? extends com.jnape.palatable.lambda.functor.Applicative<A, App>, Trav>,com.jnape.palatable.lambda.functions.Fn1<TravA, ? extends AppTrav>)","68":"Sequence::::sequence(java.lang.Iterable<? extends com.jnape.palatable.lambda.functor.Applicative<A, App>>)","69":"Sequence::::sequence(java.lang.Iterable<? extends com.jnape.palatable.lambda.functor.Applicative<A, App>>)","70":"Sequence::::sequence(java.lang.Iterable<? extends com.jnape.palatable.lambda.functor.Applicative<A, App>>)","71":"Sequence::::sequence(java.lang.Iterable<? extends com.jnape.palatable.lambda.functor.Applicative<A, App>>)","72":"Sequence::::sequence(java.lang.Iterable<? extends com.jnape.palatable.lambda.functor.Applicative<A, App>>)","73":"Sequence::::sequence(java.lang.Iterable<? extends com.jnape.palatable.lambda.functor.Applicative<A, App>>)","74":"Sequence::::sequence(java.lang.Iterable<? extends com.jnape.palatable.lambda.functor.Applicative<A, App>>)","75":"Sequence::::sequence(java.lang.Iterable<? extends com.jnape.palatable.lambda.functor.Applicative<A, App>>)","77":"Sequence::::sequence(java.lang.Iterable<? extends com.jnape.palatable.lambda.functor.Applicative<A, App>>,com.jnape.palatable.lambda.functions.Fn1<java.lang.Iterable<A>, ? extends AppIterable>)","78":"Sequence::::sequence(java.lang.Iterable<? extends com.jnape.palatable.lambda.functor.Applicative<A, App>>,com.jnape.palatable.lambda.functions.Fn1<java.lang.Iterable<A>, ? extends AppIterable>)","79":"Sequence::::sequence(java.lang.Iterable<? extends com.jnape.palatable.lambda.functor.Applicative<A, App>>,com.jnape.palatable.lambda.functions.Fn1<java.lang.Iterable<A>, ? extends AppIterable>)","80":"Sequence::::sequence(java.lang.Iterable<? extends com.jnape.palatable.lambda.functor.Applicative<A, App>>,com.jnape.palatable.lambda.functions.Fn1<java.lang.Iterable<A>, ? extends AppIterable>)","81":"Sequence::::sequence(java.lang.Iterable<? extends com.jnape.palatable.lambda.functor.Applicative<A, App>>,com.jnape.palatable.lambda.functions.Fn1<java.lang.Iterable<A>, ? extends AppIterable>)","83":"Sequence::::sequence(java.util.Map<A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>)","84":"Sequence::::sequence(java.util.Map<A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>)","85":"Sequence::::sequence(java.util.Map<A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>)","86":"Sequence::::sequence(java.util.Map<A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>)","87":"Sequence::::sequence(java.util.Map<A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>)","88":"Sequence::::sequence(java.util.Map<A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>)","89":"Sequence::::sequence(java.util.Map<A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>)","91":"Sequence::::sequence(java.util.Map<A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<java.util.Map<A, B>, ? extends AppMap>)","92":"Sequence::::sequence(java.util.Map<A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<java.util.Map<A, B>, ? extends AppMap>)","93":"Sequence::::sequence(java.util.Map<A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<java.util.Map<A, B>, ? extends AppMap>)","94":"Sequence::::sequence(java.util.Map<A, ? extends com.jnape.palatable.lambda.functor.Applicative<B, App>>,com.jnape.palatable.lambda.functions.Fn1<java.util.Map<A, B>, ? extends AppMap>)"},"test_reverse_method_lines_dic":{"24":"SequenceTest::::naturality()","25":"SequenceTest::::naturality()","26":"SequenceTest::::naturality()","27":"SequenceTest::::naturality()","28":"SequenceTest::::naturality()","29":"SequenceTest::::naturality()","30":"SequenceTest::::naturality()","31":"SequenceTest::::naturality()","33":"SequenceTest::::identity()","34":"SequenceTest::::identity()","35":"SequenceTest::::identity()","36":"SequenceTest::::identity()","37":"SequenceTest::::identity()","38":"SequenceTest::::identity()","40":"SequenceTest::::composition()","41":"SequenceTest::::composition()","42":"SequenceTest::::composition()","43":"SequenceTest::::composition()","44":"SequenceTest::::composition()","45":"SequenceTest::::composition()","47":"SequenceTest::::iterableSpecialization()","48":"SequenceTest::::iterableSpecialization()","49":"SequenceTest::::iterableSpecialization()","50":"SequenceTest::::iterableSpecialization()","51":"SequenceTest::::iterableSpecialization()","52":"SequenceTest::::iterableSpecialization()","54":"SequenceTest::::mapSpecialization()","55":"SequenceTest::::mapSpecialization()","56":"SequenceTest::::mapSpecialization()","57":"SequenceTest::::mapSpecialization()","58":"SequenceTest::::mapSpecialization()","60":"SequenceTest::::compilation()","61":"SequenceTest::::compilation()","62":"SequenceTest::::compilation()","63":"SequenceTest::::compilation()","64":"SequenceTest::::compilation()","65":"SequenceTest::::compilation()","66":"SequenceTest::::compilation()","67":"SequenceTest::::compilation()","68":"SequenceTest::::compilation()","69":"SequenceTest::::compilation()","70":"SequenceTest::::compilation()","71":"SequenceTest::::compilation()","72":"SequenceTest::::compilation()","73":"SequenceTest::::compilation()","74":"SequenceTest::::compilation()","75":"SequenceTest::::compilation()","76":"SequenceTest::::compilation()"},"tests":[{"test_lines":[24,31],"covered_lines":[35,37,38,43,50,57,65]},{"test_lines":[33,38],"covered_lines":[35,37,38,43,50,57,65]},{"test_lines":[40,45],"covered_lines":[35,37,38,43,50,57,65]},{"test_lines":[47,52],"covered_lines":[35,37,38,43,50,57,65,72,73,74,80]},{"test_lines":[54,58],"covered_lines":[35,37,38,43,50,57,65,86,87,88,93]},{"test_lines":[60,76],"covered_lines":[35,37,38,43,50,57,65,72,73,74,80,86,87,88,93]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/Into7.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.adt.product.Product7;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","import com.jnape.palatable.lambda.functions.Fn7;\n","\n","/**\n"," * Given an <code>{@link Fn7}&lt;A, B, C, D, E, F, G, H&gt;</code> and a\n"," * <code>{@link Product7}&lt;A, B, C, D, E, F, G&gt;</code>, destructure the product and apply the slots as arguments to\n"," * the function, returning the result.\n"," *\n"," * @param <A> the first argument type\n"," * @param <B> the second argument type\n"," * @param <C> the third argument type\n"," * @param <D> the fourth argument type\n"," * @param <E> the fifth argument type\n"," * @param <F> the sixth argument type\n"," * @param <G> the seventh argument type\n"," * @param <H> the result type\n"," */\n","public final class Into7<A, B, C, D, E, F, G, H> implements Fn2<Fn7<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? extends H>, Product7<A, B, C, D, E, F, G>, H> {\n","\n","    private static final Into7<?, ?, ?, ?, ?, ?, ?, ?> INSTANCE = new Into7<>();\n","\n","    @Override\n","    public H checkedApply(\n","            Fn7<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? extends H> fn,\n","            Product7<A, B, C, D, E, F, G> product) {\n","        return product.<H>into(fn);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A, B, C, D, E, F, G, H> Into7<A, B, C, D, E, F, G, H> into7() {\n","        return (Into7<A, B, C, D, E, F, G, H>) INSTANCE;\n","    }\n","\n","    public static <A, B, C, D, E, F, G, H> Fn1<Product7<A, B, C, D, E, F, G>, H> into7(\n","            Fn7<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? extends H> fn) {\n","        return Into7.<A, B, C, D, E, F, G, H>into7().apply(fn);\n","    }\n","\n","    public static <A, B, C, D, E, F, G, H> H into7(\n","            Fn7<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? extends H> fn,\n","            Product7<A, B, C, D, E, F, G> product) {\n","        return Into7.<A, B, C, D, E, F, G, H>into7(fn).apply(product);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Into7.into7;\n","import static org.junit.Assert.assertEquals;\n","\n","public class Into7Test {\n","\n","    @Test\n","    public void appliesTupleToFunction() {\n","        assertEquals((Integer) 28, into7((a, b, c, d, e, f, g) -> a + b + c + d + e + f + g, tuple(1, 2, 3, 4, 5, 6, 7)));\n","    }\n","}"],"method_lines_dic":{"Into7::::checkedApply(com.jnape.palatable.lambda.functions.Fn7<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? extends H>,com.jnape.palatable.lambda.adt.product.Product7<A, B, C, D, E, F, G>)":[26,31],"Into7::::into7()":[33,36],"Into7::::into7(com.jnape.palatable.lambda.functions.Fn7<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? extends H>)":[38,41],"Into7::::into7(com.jnape.palatable.lambda.functions.Fn7<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? extends H>,com.jnape.palatable.lambda.adt.product.Product7<A, B, C, D, E, F, G>)":[43,47]},"test_method_lines_dic":{"Into7Test::::appliesTupleToFunction()":[11,14]},"reverse_method_lines_dic":{"26":"Into7::::checkedApply(com.jnape.palatable.lambda.functions.Fn7<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? extends H>,com.jnape.palatable.lambda.adt.product.Product7<A, B, C, D, E, F, G>)","27":"Into7::::checkedApply(com.jnape.palatable.lambda.functions.Fn7<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? extends H>,com.jnape.palatable.lambda.adt.product.Product7<A, B, C, D, E, F, G>)","28":"Into7::::checkedApply(com.jnape.palatable.lambda.functions.Fn7<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? extends H>,com.jnape.palatable.lambda.adt.product.Product7<A, B, C, D, E, F, G>)","29":"Into7::::checkedApply(com.jnape.palatable.lambda.functions.Fn7<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? extends H>,com.jnape.palatable.lambda.adt.product.Product7<A, B, C, D, E, F, G>)","30":"Into7::::checkedApply(com.jnape.palatable.lambda.functions.Fn7<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? extends H>,com.jnape.palatable.lambda.adt.product.Product7<A, B, C, D, E, F, G>)","31":"Into7::::checkedApply(com.jnape.palatable.lambda.functions.Fn7<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? extends H>,com.jnape.palatable.lambda.adt.product.Product7<A, B, C, D, E, F, G>)","33":"Into7::::into7()","34":"Into7::::into7()","35":"Into7::::into7()","36":"Into7::::into7()","38":"Into7::::into7(com.jnape.palatable.lambda.functions.Fn7<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? extends H>)","39":"Into7::::into7(com.jnape.palatable.lambda.functions.Fn7<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? extends H>)","40":"Into7::::into7(com.jnape.palatable.lambda.functions.Fn7<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? extends H>)","41":"Into7::::into7(com.jnape.palatable.lambda.functions.Fn7<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? extends H>)","43":"Into7::::into7(com.jnape.palatable.lambda.functions.Fn7<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? extends H>,com.jnape.palatable.lambda.adt.product.Product7<A, B, C, D, E, F, G>)","44":"Into7::::into7(com.jnape.palatable.lambda.functions.Fn7<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? extends H>,com.jnape.palatable.lambda.adt.product.Product7<A, B, C, D, E, F, G>)","45":"Into7::::into7(com.jnape.palatable.lambda.functions.Fn7<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? extends H>,com.jnape.palatable.lambda.adt.product.Product7<A, B, C, D, E, F, G>)","46":"Into7::::into7(com.jnape.palatable.lambda.functions.Fn7<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? extends H>,com.jnape.palatable.lambda.adt.product.Product7<A, B, C, D, E, F, G>)","47":"Into7::::into7(com.jnape.palatable.lambda.functions.Fn7<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? extends H>,com.jnape.palatable.lambda.adt.product.Product7<A, B, C, D, E, F, G>)"},"test_reverse_method_lines_dic":{"11":"Into7Test::::appliesTupleToFunction()","12":"Into7Test::::appliesTupleToFunction()","13":"Into7Test::::appliesTupleToFunction()","14":"Into7Test::::appliesTupleToFunction()"},"tests":[{"test_lines":[11,14],"covered_lines":[22,24,30,35,40,46]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/GT.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.builtin.fn3.GTBy;\n","import com.jnape.palatable.lambda.functions.specialized.BiPredicate;\n","import com.jnape.palatable.lambda.functions.specialized.Predicate;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Id.id;\n","import static com.jnape.palatable.lambda.functions.builtin.fn3.GTBy.gtBy;\n","\n","/**\n"," * Given two {@link Comparable} values of type <code>A</code>, return <code>true</code> if the second value is strictly\n"," * greater than the first value; otherwise, return false.\n"," *\n"," * @param <A> the value type\n"," * @see GTBy\n"," * @see LT\n"," */\n","public final class GT<A extends Comparable<A>> implements BiPredicate<A, A> {\n","\n","    private static final GT<?> INSTANCE = new GT<>();\n","\n","    private GT() {\n","    }\n","\n","    @Override\n","    public Boolean checkedApply(A y, A x) {\n","        return gtBy(id(), y, x);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A extends Comparable<A>> GT<A> gt() {\n","        return (GT<A>) INSTANCE;\n","    }\n","\n","    public static <A extends Comparable<A>> Predicate<A> gt(A y) {\n","        return GT.<A>gt().apply(y);\n","    }\n","\n","    public static <A extends Comparable<A>> Boolean gt(A y, A x) {\n","        return gt(y).apply(x);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.GT.gt;\n","import static org.junit.Assert.assertFalse;\n","import static org.junit.Assert.assertTrue;\n","\n","public class GTTest {\n","\n","    @Test\n","    public void comparisons() {\n","        assertTrue(gt(1, 2));\n","        assertFalse(gt(1, 1));\n","        assertFalse(gt(2, 1));\n","    }\n","}"],"method_lines_dic":{"GT::::checkedApply(A,A)":[25,28],"GT::::gt()":[30,33],"GT::::gt(A)":[35,37],"GT::::gt(A,A)":[39,41]},"test_method_lines_dic":{"GTTest::::comparisons()":[11,16]},"reverse_method_lines_dic":{"25":"GT::::checkedApply(A,A)","26":"GT::::checkedApply(A,A)","27":"GT::::checkedApply(A,A)","28":"GT::::checkedApply(A,A)","30":"GT::::gt()","31":"GT::::gt()","32":"GT::::gt()","33":"GT::::gt()","35":"GT::::gt(A)","36":"GT::::gt(A)","37":"GT::::gt(A)","39":"GT::::gt(A,A)","40":"GT::::gt(A,A)","41":"GT::::gt(A,A)"},"test_reverse_method_lines_dic":{"11":"GTTest::::comparisons()","12":"GTTest::::comparisons()","13":"GTTest::::comparisons()","14":"GTTest::::comparisons()","15":"GTTest::::comparisons()","16":"GTTest::::comparisons()"},"tests":[{"test_lines":[11,16],"covered_lines":[20,22,23,27,32,36,40]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/Alter.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Effect;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","import com.jnape.palatable.lambda.io.IO;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","\n","/**\n"," * Given an <code>{@link Effect}&lt;A&gt;</code> and some <code>A</code>, produce an {@link IO} that, when run, performs\n"," * the effect on <code>A</code> and returns it.\n"," *\n"," * @param <A> the input and output\n"," */\n","public final class Alter<A> implements Fn2<Fn1<? super A, ? extends IO<?>>, A, IO<A>> {\n","\n","    private static final Alter<?> INSTANCE = new Alter<>();\n","\n","    private Alter() {\n","    }\n","\n","    @Override\n","    public IO<A> checkedApply(Fn1<? super A, ? extends IO<?>> effect, A a) {\n","        return effect.fmap(io -> io.fmap(constantly(a))).apply(a);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> Alter<A> alter() {\n","        return (Alter<A>) INSTANCE;\n","    }\n","\n","    public static <A> Fn1<A, IO<A>> alter(Effect<? super A> effect) {\n","        return Alter.<A>alter().apply(effect);\n","    }\n","\n","    public static <A> IO<A> alter(Effect<? super A> effect, A a) {\n","        return Alter.<A>alter(effect).apply(a);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import org.junit.Test;\n","\n","import java.util.ArrayList;\n","\n","import static com.jnape.palatable.lambda.functions.Effect.fromConsumer;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Alter.alter;\n","import static java.util.Collections.singletonList;\n","import static org.hamcrest.CoreMatchers.allOf;\n","import static org.hamcrest.CoreMatchers.equalTo;\n","import static org.hamcrest.CoreMatchers.sameInstance;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IOMatcher.yieldsValue;\n","\n","public class AlterTest {\n","\n","    @Test\n","    public void altersInput() {\n","        ArrayList<String> input = new ArrayList<>();\n","        assertThat(alter(fromConsumer(xs -> xs.add(\"foo\")), input),\n","                   yieldsValue(allOf(sameInstance(input),\n","                                     equalTo(singletonList(\"foo\")))));\n","    }\n","}"],"method_lines_dic":{"Alter::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.io.IO<?>>,A)":[23,26],"Alter::::alter()":[28,31],"Alter::::alter(com.jnape.palatable.lambda.functions.Effect<? super A>)":[33,35],"Alter::::alter(com.jnape.palatable.lambda.functions.Effect<? super A>,A)":[37,39]},"test_method_lines_dic":{"AlterTest::::altersInput()":[18,24]},"reverse_method_lines_dic":{"23":"Alter::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.io.IO<?>>,A)","24":"Alter::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.io.IO<?>>,A)","25":"Alter::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.io.IO<?>>,A)","26":"Alter::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.io.IO<?>>,A)","28":"Alter::::alter()","29":"Alter::::alter()","30":"Alter::::alter()","31":"Alter::::alter()","33":"Alter::::alter(com.jnape.palatable.lambda.functions.Effect<? super A>)","34":"Alter::::alter(com.jnape.palatable.lambda.functions.Effect<? super A>)","35":"Alter::::alter(com.jnape.palatable.lambda.functions.Effect<? super A>)","37":"Alter::::alter(com.jnape.palatable.lambda.functions.Effect<? super A>,A)","38":"Alter::::alter(com.jnape.palatable.lambda.functions.Effect<? super A>,A)","39":"Alter::::alter(com.jnape.palatable.lambda.functions.Effect<? super A>,A)"},"test_reverse_method_lines_dic":{"18":"AlterTest::::altersInput()","19":"AlterTest::::altersInput()","20":"AlterTest::::altersInput()","21":"AlterTest::::altersInput()","22":"AlterTest::::altersInput()","23":"AlterTest::::altersInput()","24":"AlterTest::::altersInput()"},"tests":[{"test_lines":[18,24],"covered_lines":[18,20,21,25,30,34,38]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/Into5.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.adt.product.Product5;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","import com.jnape.palatable.lambda.functions.Fn5;\n","\n","/**\n"," * Given an <code>{@link Fn5}&lt;A, B, C, D, E, F&gt;</code> and a <code>{@link Product5}&lt;A, B, C, D, E&gt;</code>,\n"," * destructure the product and apply the slots as arguments to the function, returning the result.\n"," *\n"," * @param <A> the first argument type\n"," * @param <B> the second argument type\n"," * @param <C> the third argument type\n"," * @param <D> the fourth argument type\n"," * @param <E> the fifth argument type\n"," * @param <F> the result type\n"," */\n","public final class Into5<A, B, C, D, E, F> implements Fn2<Fn5<? super A, ? super B, ? super C, ? super D, ? super E, ? extends F>, Product5<A, B, C, D, E>, F> {\n","\n","    private static final Into5<?, ?, ?, ?, ?, ?> INSTANCE = new Into5<>();\n","\n","    @Override\n","    public F checkedApply(Fn5<? super A, ? super B, ? super C, ? super D, ? super E, ? extends F> fn,\n","                          Product5<A, B, C, D, E> product) {\n","        return product.<F>into(fn);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A, B, C, D, E, F> Into5<A, B, C, D, E, F> into5() {\n","        return (Into5<A, B, C, D, E, F>) INSTANCE;\n","    }\n","\n","    public static <A, B, C, D, E, F> Fn1<Product5<A, B, C, D, E>, F> into5(\n","            Fn5<? super A, ? super B, ? super C, ? super D, ? super E, ? extends F> fn) {\n","        return Into5.<A, B, C, D, E, F>into5().apply(fn);\n","    }\n","\n","    public static <A, B, C, D, E, F> F into5(Fn5<? super A, ? super B, ? super C, ? super D, ? super E, ? extends F> fn,\n","                                             Product5<A, B, C, D, E> product) {\n","        return Into5.<A, B, C, D, E, F>into5(fn).apply(product);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Into5.into5;\n","import static org.junit.Assert.assertEquals;\n","\n","public class Into5Test {\n","\n","    @Test\n","    public void appliesTupleToFunction() {\n","        assertEquals((Integer) 15, into5((a, b, c, d, e) -> a + b + c + d + e, tuple(1, 2, 3, 4, 5)));\n","    }\n","}"],"method_lines_dic":{"Into5::::checkedApply(com.jnape.palatable.lambda.functions.Fn5<? super A, ? super B, ? super C, ? super D, ? super E, ? extends F>,com.jnape.palatable.lambda.adt.product.Product5<A, B, C, D, E>)":[23,27],"Into5::::into5()":[29,32],"Into5::::into5(com.jnape.palatable.lambda.functions.Fn5<? super A, ? super B, ? super C, ? super D, ? super E, ? extends F>)":[34,37],"Into5::::into5(com.jnape.palatable.lambda.functions.Fn5<? super A, ? super B, ? super C, ? super D, ? super E, ? extends F>,com.jnape.palatable.lambda.adt.product.Product5<A, B, C, D, E>)":[39,42]},"test_method_lines_dic":{"Into5Test::::appliesTupleToFunction()":[11,14]},"reverse_method_lines_dic":{"23":"Into5::::checkedApply(com.jnape.palatable.lambda.functions.Fn5<? super A, ? super B, ? super C, ? super D, ? super E, ? extends F>,com.jnape.palatable.lambda.adt.product.Product5<A, B, C, D, E>)","24":"Into5::::checkedApply(com.jnape.palatable.lambda.functions.Fn5<? super A, ? super B, ? super C, ? super D, ? super E, ? extends F>,com.jnape.palatable.lambda.adt.product.Product5<A, B, C, D, E>)","25":"Into5::::checkedApply(com.jnape.palatable.lambda.functions.Fn5<? super A, ? super B, ? super C, ? super D, ? super E, ? extends F>,com.jnape.palatable.lambda.adt.product.Product5<A, B, C, D, E>)","26":"Into5::::checkedApply(com.jnape.palatable.lambda.functions.Fn5<? super A, ? super B, ? super C, ? super D, ? super E, ? extends F>,com.jnape.palatable.lambda.adt.product.Product5<A, B, C, D, E>)","27":"Into5::::checkedApply(com.jnape.palatable.lambda.functions.Fn5<? super A, ? super B, ? super C, ? super D, ? super E, ? extends F>,com.jnape.palatable.lambda.adt.product.Product5<A, B, C, D, E>)","29":"Into5::::into5()","30":"Into5::::into5()","31":"Into5::::into5()","32":"Into5::::into5()","34":"Into5::::into5(com.jnape.palatable.lambda.functions.Fn5<? super A, ? super B, ? super C, ? super D, ? super E, ? extends F>)","35":"Into5::::into5(com.jnape.palatable.lambda.functions.Fn5<? super A, ? super B, ? super C, ? super D, ? super E, ? extends F>)","36":"Into5::::into5(com.jnape.palatable.lambda.functions.Fn5<? super A, ? super B, ? super C, ? super D, ? super E, ? extends F>)","37":"Into5::::into5(com.jnape.palatable.lambda.functions.Fn5<? super A, ? super B, ? super C, ? super D, ? super E, ? extends F>)","39":"Into5::::into5(com.jnape.palatable.lambda.functions.Fn5<? super A, ? super B, ? super C, ? super D, ? super E, ? extends F>,com.jnape.palatable.lambda.adt.product.Product5<A, B, C, D, E>)","40":"Into5::::into5(com.jnape.palatable.lambda.functions.Fn5<? super A, ? super B, ? super C, ? super D, ? super E, ? extends F>,com.jnape.palatable.lambda.adt.product.Product5<A, B, C, D, E>)","41":"Into5::::into5(com.jnape.palatable.lambda.functions.Fn5<? super A, ? super B, ? super C, ? super D, ? super E, ? extends F>,com.jnape.palatable.lambda.adt.product.Product5<A, B, C, D, E>)","42":"Into5::::into5(com.jnape.palatable.lambda.functions.Fn5<? super A, ? super B, ? super C, ? super D, ? super E, ? extends F>,com.jnape.palatable.lambda.adt.product.Product5<A, B, C, D, E>)"},"test_reverse_method_lines_dic":{"11":"Into5Test::::appliesTupleToFunction()","12":"Into5Test::::appliesTupleToFunction()","13":"Into5Test::::appliesTupleToFunction()","14":"Into5Test::::appliesTupleToFunction()"},"tests":[{"test_lines":[11,14],"covered_lines":[19,21,26,31,36,41]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/Tupler2.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.adt.hlist.Tuple2;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","\n","/**\n"," * Creates a <code>Tuple2</code> from two values.\n"," *\n"," * @param <A> The type of the first value; also the first slot type of returned Tuple2\n"," * @param <B> The type of the second value; also the second slot type of returned Tuple2\n"," * @see com.jnape.palatable.lambda.adt.hlist.Tuple2\n"," */\n","public final class Tupler2<A, B> implements Fn2<A, B, Tuple2<A, B>> {\n","\n","    private static final Tupler2<?, ?> INSTANCE = new Tupler2<>();\n","\n","    private Tupler2() {\n","    }\n","\n","    @Override\n","    public Tuple2<A, B> checkedApply(A a, B b) {\n","        return tuple(a, b);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A, B> Tupler2<A, B> tupler() {\n","        return (Tupler2<A, B>) INSTANCE;\n","    }\n","\n","    public static <A, B> Fn1<B, Tuple2<A, B>> tupler(A a) {\n","        return Tupler2.<A, B>tupler().apply(a);\n","    }\n","\n","    public static <A, B> Tuple2<A, B> tupler(A a, B b) {\n","        return Tupler2.<A, B>tupler(a).apply(b);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Tupler2.tupler;\n","import static org.hamcrest.core.Is.is;\n","import static org.junit.Assert.assertThat;\n","\n","public class Tupler2Test {\n","\n","    @Test\n","    public void createsTupleOfTwoThings() {\n","        assertThat(tupler(\"a\", 1), is(tuple(\"a\", 1)));\n","    }\n","}\n"],"method_lines_dic":{"Tupler2::::checkedApply(A,B)":[23,26],"Tupler2::::tupler()":[28,31],"Tupler2::::tupler(A)":[33,35],"Tupler2::::tupler(A,B)":[37,39]},"test_method_lines_dic":{"Tupler2Test::::createsTupleOfTwoThings()":[12,15]},"reverse_method_lines_dic":{"23":"Tupler2::::checkedApply(A,B)","24":"Tupler2::::checkedApply(A,B)","25":"Tupler2::::checkedApply(A,B)","26":"Tupler2::::checkedApply(A,B)","28":"Tupler2::::tupler()","29":"Tupler2::::tupler()","30":"Tupler2::::tupler()","31":"Tupler2::::tupler()","33":"Tupler2::::tupler(A)","34":"Tupler2::::tupler(A)","35":"Tupler2::::tupler(A)","37":"Tupler2::::tupler(A,B)","38":"Tupler2::::tupler(A,B)","39":"Tupler2::::tupler(A,B)"},"test_reverse_method_lines_dic":{"12":"Tupler2Test::::createsTupleOfTwoThings()","13":"Tupler2Test::::createsTupleOfTwoThings()","14":"Tupler2Test::::createsTupleOfTwoThings()","15":"Tupler2Test::::createsTupleOfTwoThings()"},"tests":[{"test_lines":[12,15],"covered_lines":[18,20,21,25,30,34,38]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/Any.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.specialized.BiPredicate;\n","import com.jnape.palatable.lambda.functions.specialized.Predicate;\n","\n","/**\n"," * Eagerly apply a predicate to each element in an <code>Iterable</code>, returning <code>true</code> if any element\n"," * satisfies the predicate, and <code>false</code> otherwise. This method short-circuits on the first <code>true</code>\n"," * evaluation.\n"," *\n"," * @param <A> The input Iterable element type\n"," * @see All\n"," */\n","public final class Any<A> implements BiPredicate<Fn1<? super A, ? extends Boolean>, Iterable<A>> {\n","\n","    private static final Any<?> INSTANCE = new Any<>();\n","\n","    private Any() {\n","    }\n","\n","    @Override\n","    public Boolean checkedApply(Fn1<? super A, ? extends Boolean> predicate, Iterable<A> as) {\n","        for (A a : as)\n","            if (predicate.apply(a))\n","                return true;\n","\n","        return false;\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> Any<A> any() {\n","        return (Any<A>) INSTANCE;\n","    }\n","\n","    public static <A> Predicate<Iterable<A>> any(Fn1<? super A, ? extends Boolean> predicate) {\n","        return Any.<A>any().apply(predicate);\n","    }\n","\n","    public static <A> Boolean any(Fn1<? super A, ? extends Boolean> predicate, Iterable<A> as) {\n","        return Any.<A>any(predicate).apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.EmptyIterableSupport;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Repeat.repeat;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Any.any;\n","import static java.util.Arrays.asList;\n","import static org.hamcrest.core.Is.is;\n","import static org.junit.Assert.assertThat;\n","\n","@RunWith(Traits.class)\n","public class AnyTest {\n","\n","    public static final Fn1<? super Integer, ? extends Boolean> EVEN = x -> x % 2 == 0;\n","\n","    @TestTraits({EmptyIterableSupport.class})\n","    public Fn1<Iterable<Object>, Boolean> createTestSubject() {\n","        return any(constantly(true));\n","    }\n","\n","    @Test\n","    public void trueIfAnyElementsMatchPredicate() {\n","        assertThat(any(EVEN, asList(1, 2)), is(true));\n","    }\n","\n","    @Test\n","    public void falseIfNoElementsMatchPredicate() {\n","        assertThat(any(EVEN, asList(1, 3, 5)), is(false));\n","    }\n","\n","    @Test\n","    public void terminatesIterationImmediatelyUponPredicateSuccess() {\n","        assertThat(any(EVEN, repeat(2)), is(true));\n","    }\n","}\n"],"method_lines_dic":{"Any::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)":[22,29],"Any::::any()":[31,34],"Any::::any(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)":[36,38],"Any::::any(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)":[40,42]},"test_method_lines_dic":{"AnyTest::::createTestSubject()":[22,25],"AnyTest::::trueIfAnyElementsMatchPredicate()":[27,30],"AnyTest::::falseIfNoElementsMatchPredicate()":[32,35],"AnyTest::::terminatesIterationImmediatelyUponPredicateSuccess()":[37,40]},"reverse_method_lines_dic":{"22":"Any::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","23":"Any::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","24":"Any::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","25":"Any::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","26":"Any::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","27":"Any::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","28":"Any::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","29":"Any::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","31":"Any::::any()","32":"Any::::any()","33":"Any::::any()","34":"Any::::any()","36":"Any::::any(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)","37":"Any::::any(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)","38":"Any::::any(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)","40":"Any::::any(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","41":"Any::::any(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","42":"Any::::any(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)"},"test_reverse_method_lines_dic":{"22":"AnyTest::::createTestSubject()","23":"AnyTest::::createTestSubject()","24":"AnyTest::::createTestSubject()","25":"AnyTest::::createTestSubject()","27":"AnyTest::::trueIfAnyElementsMatchPredicate()","28":"AnyTest::::trueIfAnyElementsMatchPredicate()","29":"AnyTest::::trueIfAnyElementsMatchPredicate()","30":"AnyTest::::trueIfAnyElementsMatchPredicate()","32":"AnyTest::::falseIfNoElementsMatchPredicate()","33":"AnyTest::::falseIfNoElementsMatchPredicate()","34":"AnyTest::::falseIfNoElementsMatchPredicate()","35":"AnyTest::::falseIfNoElementsMatchPredicate()","37":"AnyTest::::terminatesIterationImmediatelyUponPredicateSuccess()","38":"AnyTest::::terminatesIterationImmediatelyUponPredicateSuccess()","39":"AnyTest::::terminatesIterationImmediatelyUponPredicateSuccess()","40":"AnyTest::::terminatesIterationImmediatelyUponPredicateSuccess()"},"tests":[{"test_lines":[22,25],"covered_lines":[17,19,20,33,37]},{"test_lines":[27,30],"covered_lines":[17,19,20,24,25,26,33,37,41]},{"test_lines":[32,35],"covered_lines":[17,19,20,24,25,28,33,37,41]},{"test_lines":[37,40],"covered_lines":[17,19,20,24,25,26,33,37,41]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/Replicate.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Repeat.repeat;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Take.take;\n","\n","/**\n"," * Produce an {@link Iterable} of a value <code>n</code> times.\n"," *\n"," * @param <A> the output Iterable element type\n"," */\n","public final class Replicate<A> implements Fn2<Integer, A, Iterable<A>> {\n","\n","    private static final Replicate<?> INSTANCE = new Replicate<>();\n","\n","    private Replicate() {\n","    }\n","\n","    @Override\n","    public Iterable<A> checkedApply(Integer n, A a) {\n","        return take(n, repeat(a));\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> Replicate<A> replicate() {\n","        return (Replicate<A>) INSTANCE;\n","    }\n","\n","    public static <A> Fn1<A, Iterable<A>> replicate(Integer n) {\n","        return Replicate.<A>replicate().apply(n);\n","    }\n","\n","    public static <A> Iterable<A> replicate(Integer n, A a) {\n","        return Replicate.<A>replicate(n).apply(a);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Replicate.replicate;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IterableMatcher.isEmpty;\n","import static testsupport.matchers.IterableMatcher.iterates;\n","\n","public class ReplicateTest {\n","\n","    @Test\n","    public void replicate0TimesProducesEmptyIterable() {\n","        assertThat(replicate(0, 1), isEmpty());\n","    }\n","\n","    @Test\n","    public void replicateMoreThan0TimesProducesPopulatedIterable() {\n","        assertThat(replicate(3, '1'), iterates('1', '1', '1'));\n","    }\n","}"],"method_lines_dic":{"Replicate::::checkedApply(java.lang.Integer,A)":[21,24],"Replicate::::replicate()":[26,29],"Replicate::::replicate(java.lang.Integer)":[31,33],"Replicate::::replicate(java.lang.Integer,A)":[35,37]},"test_method_lines_dic":{"ReplicateTest::::replicate0TimesProducesEmptyIterable()":[12,15],"ReplicateTest::::replicateMoreThan0TimesProducesPopulatedIterable()":[17,20]},"reverse_method_lines_dic":{"21":"Replicate::::checkedApply(java.lang.Integer,A)","22":"Replicate::::checkedApply(java.lang.Integer,A)","23":"Replicate::::checkedApply(java.lang.Integer,A)","24":"Replicate::::checkedApply(java.lang.Integer,A)","26":"Replicate::::replicate()","27":"Replicate::::replicate()","28":"Replicate::::replicate()","29":"Replicate::::replicate()","31":"Replicate::::replicate(java.lang.Integer)","32":"Replicate::::replicate(java.lang.Integer)","33":"Replicate::::replicate(java.lang.Integer)","35":"Replicate::::replicate(java.lang.Integer,A)","36":"Replicate::::replicate(java.lang.Integer,A)","37":"Replicate::::replicate(java.lang.Integer,A)"},"test_reverse_method_lines_dic":{"12":"ReplicateTest::::replicate0TimesProducesEmptyIterable()","13":"ReplicateTest::::replicate0TimesProducesEmptyIterable()","14":"ReplicateTest::::replicate0TimesProducesEmptyIterable()","15":"ReplicateTest::::replicate0TimesProducesEmptyIterable()","17":"ReplicateTest::::replicateMoreThan0TimesProducesPopulatedIterable()","18":"ReplicateTest::::replicateMoreThan0TimesProducesPopulatedIterable()","19":"ReplicateTest::::replicateMoreThan0TimesProducesPopulatedIterable()","20":"ReplicateTest::::replicateMoreThan0TimesProducesPopulatedIterable()"},"tests":[{"test_lines":[12,15],"covered_lines":[16,18,19,23,28,32,36]},{"test_lines":[17,20],"covered_lines":[16,18,19,23,28,32,36]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/Iterate.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Unfoldr.unfoldr;\n","\n","/**\n"," * Lazily generate an infinite {@link Iterable} from the successive applications of the function first to the initial\n"," * seed value, then to the result, and so on; i.e., the result of <code>iterate(x -&gt; x + 1, 0)</code> would produce\n"," * an infinite {@link Iterable} over the elements <code>0, 1, 2, 3, ... </code> and so on.\n"," *\n"," * @param <A> The Iterable element type\n"," */\n","public final class Iterate<A> implements Fn2<Fn1<? super A, ? extends A>, A, Iterable<A>> {\n","\n","    private static final Iterate<?> INSTANCE = new Iterate<>();\n","\n","    private Iterate() {\n","    }\n","\n","    @Override\n","    public Iterable<A> checkedApply(Fn1<? super A, ? extends A> fn, A seed) {\n","        return unfoldr(a -> just(tuple(a, fn.apply(a))), seed);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> Iterate<A> iterate() {\n","        return (Iterate<A>) INSTANCE;\n","    }\n","\n","    public static <A> Fn1<A, Iterable<A>> iterate(Fn1<? super A, ? extends A> fn) {\n","        return Iterate.<A>iterate().apply(fn);\n","    }\n","\n","    public static <A> Iterable<A> iterate(Fn1<? super A, ? extends A> fn, A seed) {\n","        return Iterate.<A>iterate(fn).apply(seed);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.ImmutableIteration;\n","import testsupport.traits.InfiniteIteration;\n","import testsupport.traits.Laziness;\n","\n","import java.util.ArrayList;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Iterate.iterate;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Take.take;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IterableMatcher.iterates;\n","\n","@RunWith(Traits.class)\n","public class IterateTest {\n","\n","    @TestTraits({Laziness.class, InfiniteIteration.class, ImmutableIteration.class})\n","    public Fn1<? extends Iterable<?>, ? extends Iterable<?>> createTestSubject() {\n","        return iterate(constantly(new ArrayList<>()));\n","    }\n","\n","    @Test\n","    public void iteratesIterableFromSeedValueAndSuccessiveFunctionApplications() {\n","        assertThat(take(5, iterate(x -> x + 1, 0)), iterates(0, 1, 2, 3, 4));\n","    }\n","}\n"],"method_lines_dic":{"Iterate::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends A>,A)":[24,27],"Iterate::::iterate()":[29,32],"Iterate::::iterate(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends A>)":[34,36],"Iterate::::iterate(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends A>,A)":[38,40]},"test_method_lines_dic":{"IterateTest::::createTestSubject()":[23,26],"IterateTest::::iteratesIterableFromSeedValueAndSuccessiveFunctionApplications()":[28,31]},"reverse_method_lines_dic":{"24":"Iterate::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends A>,A)","25":"Iterate::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends A>,A)","26":"Iterate::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends A>,A)","27":"Iterate::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends A>,A)","29":"Iterate::::iterate()","30":"Iterate::::iterate()","31":"Iterate::::iterate()","32":"Iterate::::iterate()","34":"Iterate::::iterate(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends A>)","35":"Iterate::::iterate(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends A>)","36":"Iterate::::iterate(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends A>)","38":"Iterate::::iterate(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends A>,A)","39":"Iterate::::iterate(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends A>,A)","40":"Iterate::::iterate(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends A>,A)"},"test_reverse_method_lines_dic":{"23":"IterateTest::::createTestSubject()","24":"IterateTest::::createTestSubject()","25":"IterateTest::::createTestSubject()","26":"IterateTest::::createTestSubject()","28":"IterateTest::::iteratesIterableFromSeedValueAndSuccessiveFunctionApplications()","29":"IterateTest::::iteratesIterableFromSeedValueAndSuccessiveFunctionApplications()","30":"IterateTest::::iteratesIterableFromSeedValueAndSuccessiveFunctionApplications()","31":"IterateTest::::iteratesIterableFromSeedValueAndSuccessiveFunctionApplications()"},"tests":[{"test_lines":[23,26],"covered_lines":[19,21,22,31,35]},{"test_lines":[28,31],"covered_lines":[19,21,22,26,31,35,39]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/Into4.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.adt.product.Product4;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","import com.jnape.palatable.lambda.functions.Fn4;\n","\n","/**\n"," * Given an <code>{@link Fn4}&lt;A, B, C, D, E&gt;</code> and a <code>{@link Product4}&lt;A, B, C, D&gt;</code>,\n"," * destructure the product and apply the slots as arguments to the function, returning the result.\n"," *\n"," * @param <A> the first argument type\n"," * @param <B> the second argument type\n"," * @param <C> the third argument type\n"," * @param <D> the fourth argument type\n"," * @param <E> the result type\n"," */\n","public final class Into4<A, B, C, D, E> implements Fn2<Fn4<? super A, ? super B, ? super C, ? super D, ? extends E>, Product4<A, B, C, D>, E> {\n","\n","    private static final Into4<?, ?, ?, ?, ?> INSTANCE = new Into4<>();\n","\n","    @Override\n","    public E checkedApply(Fn4<? super A, ? super B, ? super C, ? super D, ? extends E> fn,\n","                          Product4<A, B, C, D> product) {\n","        return product.<E>into(fn);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A, B, C, D, E> Into4<A, B, C, D, E> into4() {\n","        return (Into4<A, B, C, D, E>) INSTANCE;\n","    }\n","\n","    public static <A, B, C, D, E> Fn1<Product4<A, B, C, D>, E> into4(\n","            Fn4<? super A, ? super B, ? super C, ? super D, ? extends E> fn) {\n","        return Into4.<A, B, C, D, E>into4().apply(fn);\n","    }\n","\n","    public static <A, B, C, D, E> E into4(Fn4<? super A, ? super B, ? super C, ? super D, ? extends E> fn,\n","                                          Product4<A, B, C, D> product) {\n","        return Into4.<A, B, C, D, E>into4(fn).apply(product);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Into4.into4;\n","import static org.junit.Assert.assertEquals;\n","\n","public class Into4Test {\n","\n","    @Test\n","    public void appliesTupleToFunction() {\n","        assertEquals((Integer) 10, into4((a, b, c, d) -> a + b + c + d, tuple(1, 2, 3, 4)));\n","    }\n","}"],"method_lines_dic":{"Into4::::checkedApply(com.jnape.palatable.lambda.functions.Fn4<? super A, ? super B, ? super C, ? super D, ? extends E>,com.jnape.palatable.lambda.adt.product.Product4<A, B, C, D>)":[22,26],"Into4::::into4()":[28,31],"Into4::::into4(com.jnape.palatable.lambda.functions.Fn4<? super A, ? super B, ? super C, ? super D, ? extends E>)":[33,36],"Into4::::into4(com.jnape.palatable.lambda.functions.Fn4<? super A, ? super B, ? super C, ? super D, ? extends E>,com.jnape.palatable.lambda.adt.product.Product4<A, B, C, D>)":[38,41]},"test_method_lines_dic":{"Into4Test::::appliesTupleToFunction()":[11,14]},"reverse_method_lines_dic":{"22":"Into4::::checkedApply(com.jnape.palatable.lambda.functions.Fn4<? super A, ? super B, ? super C, ? super D, ? extends E>,com.jnape.palatable.lambda.adt.product.Product4<A, B, C, D>)","23":"Into4::::checkedApply(com.jnape.palatable.lambda.functions.Fn4<? super A, ? super B, ? super C, ? super D, ? extends E>,com.jnape.palatable.lambda.adt.product.Product4<A, B, C, D>)","24":"Into4::::checkedApply(com.jnape.palatable.lambda.functions.Fn4<? super A, ? super B, ? super C, ? super D, ? extends E>,com.jnape.palatable.lambda.adt.product.Product4<A, B, C, D>)","25":"Into4::::checkedApply(com.jnape.palatable.lambda.functions.Fn4<? super A, ? super B, ? super C, ? super D, ? extends E>,com.jnape.palatable.lambda.adt.product.Product4<A, B, C, D>)","26":"Into4::::checkedApply(com.jnape.palatable.lambda.functions.Fn4<? super A, ? super B, ? super C, ? super D, ? extends E>,com.jnape.palatable.lambda.adt.product.Product4<A, B, C, D>)","28":"Into4::::into4()","29":"Into4::::into4()","30":"Into4::::into4()","31":"Into4::::into4()","33":"Into4::::into4(com.jnape.palatable.lambda.functions.Fn4<? super A, ? super B, ? super C, ? super D, ? extends E>)","34":"Into4::::into4(com.jnape.palatable.lambda.functions.Fn4<? super A, ? super B, ? super C, ? super D, ? extends E>)","35":"Into4::::into4(com.jnape.palatable.lambda.functions.Fn4<? super A, ? super B, ? super C, ? super D, ? extends E>)","36":"Into4::::into4(com.jnape.palatable.lambda.functions.Fn4<? super A, ? super B, ? super C, ? super D, ? extends E>)","38":"Into4::::into4(com.jnape.palatable.lambda.functions.Fn4<? super A, ? super B, ? super C, ? super D, ? extends E>,com.jnape.palatable.lambda.adt.product.Product4<A, B, C, D>)","39":"Into4::::into4(com.jnape.palatable.lambda.functions.Fn4<? super A, ? super B, ? super C, ? super D, ? extends E>,com.jnape.palatable.lambda.adt.product.Product4<A, B, C, D>)","40":"Into4::::into4(com.jnape.palatable.lambda.functions.Fn4<? super A, ? super B, ? super C, ? super D, ? extends E>,com.jnape.palatable.lambda.adt.product.Product4<A, B, C, D>)","41":"Into4::::into4(com.jnape.palatable.lambda.functions.Fn4<? super A, ? super B, ? super C, ? super D, ? extends E>,com.jnape.palatable.lambda.adt.product.Product4<A, B, C, D>)"},"test_reverse_method_lines_dic":{"11":"Into4Test::::appliesTupleToFunction()","12":"Into4Test::::appliesTupleToFunction()","13":"Into4Test::::appliesTupleToFunction()","14":"Into4Test::::appliesTupleToFunction()"},"tests":[{"test_lines":[11,14],"covered_lines":[18,20,25,30,35,40]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/$.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","\n","/**\n"," * Function application, represented as a higher-order {@link Fn2} that receives an {@link Fn1} and its argument, and\n"," * applies it. Useful for treating application as a combinator, e.g.:\n"," * <pre>\n"," * {@code\n"," * List<Fn1<Integer, Integer>> fns     = asList(x -> x + 1, x -> x, x -> x - 1);\n"," * List<Integer>               args    = asList(0, 1, 2);\n"," * Iterable<Integer>           results = zipWith($(), fns, args); // [1, 1, 1]\n"," * }\n"," * </pre>\n"," *\n"," * @param <A> the applied {@link Fn1 Fn1's} input type\n"," * @param <B> the applied {@link Fn1 Fn1's} output type\n"," */\n","public final class $<A, B> implements Fn2<Fn1<? super A, ? extends B>, A, B> {\n","    private static final $<?, ?> INSTANCE = new $<>();\n","\n","    private $() {\n","    }\n","\n","    @Override\n","    public B checkedApply(Fn1<? super A, ? extends B> fn, A a) {\n","        return fn.apply(a);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A, B> $<A, B> $() {\n","        return ($<A, B>) INSTANCE;\n","    }\n","\n","    public static <A, B> Fn1<A, B> $(Fn1<? super A, ? extends B> fn) {\n","        return $.<A, B>$().apply(fn);\n","    }\n","\n","    public static <A, B> B $(Fn1<? super A, ? extends B> fn, A a) {\n","        return $.<A, B>$(fn).apply(a);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.functions.Fn2.fn2;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.$.$;\n","import static org.junit.Assert.assertEquals;\n","\n","public class $Test {\n","\n","    @Test\n","    public void application() {\n","        assertEquals((Integer) 1, $(x -> x + 1, 0));\n","        assertEquals((Integer) 1, $.<Integer, Integer>$(x -> x + 1).apply(0));\n","    }\n","\n","    @Test\n","    public void curryingInference() {\n","        assertEquals((Integer) 1, $($(fn2(Integer::sum), 0), 1));\n","    }\n","}"],"method_lines_dic":{"$::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,A)":[26,29],"$::::$()":[31,34],"$::::$(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)":[36,38],"$::::$(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,A)":[40,42]},"test_method_lines_dic":{"$Test::::application()":[11,15],"$Test::::curryingInference()":[17,20]},"reverse_method_lines_dic":{"26":"$::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,A)","27":"$::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,A)","28":"$::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,A)","29":"$::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,A)","31":"$::::$()","32":"$::::$()","33":"$::::$()","34":"$::::$()","36":"$::::$(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","37":"$::::$(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","38":"$::::$(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","40":"$::::$(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,A)","41":"$::::$(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,A)","42":"$::::$(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,A)"},"test_reverse_method_lines_dic":{"11":"$Test::::application()","12":"$Test::::application()","13":"$Test::::application()","14":"$Test::::application()","15":"$Test::::application()","17":"$Test::::curryingInference()","18":"$Test::::curryingInference()","19":"$Test::::curryingInference()","20":"$Test::::curryingInference()"},"tests":[{"test_lines":[11,15],"covered_lines":[21,23,24,28,33,37,41]},{"test_lines":[17,20],"covered_lines":[21,23,24,28,33,37,41]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/InGroupsOf.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","import com.jnape.palatable.lambda.internal.iteration.GroupingIterator;\n","\n","/**\n"," * Lazily group the <code>Iterable</code> by returning an <code>Iterable</code> of smaller <code>Iterable</code>s of\n"," * size <code>k</code>. Note that groups are <em>not</em> padded; that is, if <code>k &gt;= n</code>, where\n"," * <code>n</code> is the number of remaining elements, the final <code>Iterable</code> will have only <code>n</code>\n"," * elements.\n"," *\n"," * @param <A> The Iterable element type\n"," */\n","public final class InGroupsOf<A> implements Fn2<Integer, Iterable<A>, Iterable<Iterable<A>>> {\n","\n","    private static final InGroupsOf<?> INSTANCE = new InGroupsOf<>();\n","\n","    private InGroupsOf() {\n","    }\n","\n","    @Override\n","    public Iterable<Iterable<A>> checkedApply(Integer k, Iterable<A> as) {\n","        return () -> new GroupingIterator<>(k, as.iterator());\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> InGroupsOf<A> inGroupsOf() {\n","        return (InGroupsOf<A>) INSTANCE;\n","    }\n","\n","    public static <A> Fn1<Iterable<A>, Iterable<Iterable<A>>> inGroupsOf(Integer k) {\n","        return InGroupsOf.<A>inGroupsOf().apply(k);\n","    }\n","\n","    public static <A> Iterable<Iterable<A>> inGroupsOf(Integer k, Iterable<A> as) {\n","        return InGroupsOf.<A>inGroupsOf(k).apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.EmptyIterableSupport;\n","import testsupport.traits.FiniteIteration;\n","import testsupport.traits.ImmutableIteration;\n","import testsupport.traits.Laziness;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.InGroupsOf.inGroupsOf;\n","import static java.util.Arrays.asList;\n","import static java.util.Collections.singletonList;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IterableMatcher.iterates;\n","\n","@RunWith(Traits.class)\n","public class InGroupsOfTest {\n","\n","    @TestTraits({Laziness.class, EmptyIterableSupport.class, FiniteIteration.class, ImmutableIteration.class})\n","    public Fn1<Iterable<Object>, Iterable<Iterable<Object>>> createTestSubject() {\n","        return inGroupsOf(2);\n","    }\n","\n","    @Test\n","    public void evenlyDistributesGroupedElementsOverIterable() {\n","        Iterable<Integer>           oneThroughSix = asList(1, 2, 3, 4, 5, 6);\n","        Iterable<Iterable<Integer>> groups        = inGroupsOf(2, oneThroughSix);\n","        assertThat(groups, iterates(asList(1, 2), asList(3, 4), asList(5, 6)));\n","    }\n","\n","    @Test\n","    public void lastGroupIsUnfinishedIfIterableSizeNotEvenlyDivisibleByK() {\n","        Iterable<Integer>           oneThroughFive = asList(1, 2, 3, 4, 5);\n","        Iterable<Iterable<Integer>> groups         = inGroupsOf(2, oneThroughFive);\n","        assertThat(groups, iterates(asList(1, 2), asList(3, 4), singletonList(5)));\n","    }\n","}\n"],"method_lines_dic":{"InGroupsOf::::checkedApply(java.lang.Integer,java.lang.Iterable<A>)":[22,25],"InGroupsOf::::inGroupsOf()":[27,30],"InGroupsOf::::inGroupsOf(java.lang.Integer)":[32,34],"InGroupsOf::::inGroupsOf(java.lang.Integer,java.lang.Iterable<A>)":[36,38]},"test_method_lines_dic":{"InGroupsOfTest::::createTestSubject()":[22,25],"InGroupsOfTest::::evenlyDistributesGroupedElementsOverIterable()":[27,32],"InGroupsOfTest::::lastGroupIsUnfinishedIfIterableSizeNotEvenlyDivisibleByK()":[34,39]},"reverse_method_lines_dic":{"22":"InGroupsOf::::checkedApply(java.lang.Integer,java.lang.Iterable<A>)","23":"InGroupsOf::::checkedApply(java.lang.Integer,java.lang.Iterable<A>)","24":"InGroupsOf::::checkedApply(java.lang.Integer,java.lang.Iterable<A>)","25":"InGroupsOf::::checkedApply(java.lang.Integer,java.lang.Iterable<A>)","27":"InGroupsOf::::inGroupsOf()","28":"InGroupsOf::::inGroupsOf()","29":"InGroupsOf::::inGroupsOf()","30":"InGroupsOf::::inGroupsOf()","32":"InGroupsOf::::inGroupsOf(java.lang.Integer)","33":"InGroupsOf::::inGroupsOf(java.lang.Integer)","34":"InGroupsOf::::inGroupsOf(java.lang.Integer)","36":"InGroupsOf::::inGroupsOf(java.lang.Integer,java.lang.Iterable<A>)","37":"InGroupsOf::::inGroupsOf(java.lang.Integer,java.lang.Iterable<A>)","38":"InGroupsOf::::inGroupsOf(java.lang.Integer,java.lang.Iterable<A>)"},"test_reverse_method_lines_dic":{"22":"InGroupsOfTest::::createTestSubject()","23":"InGroupsOfTest::::createTestSubject()","24":"InGroupsOfTest::::createTestSubject()","25":"InGroupsOfTest::::createTestSubject()","27":"InGroupsOfTest::::evenlyDistributesGroupedElementsOverIterable()","28":"InGroupsOfTest::::evenlyDistributesGroupedElementsOverIterable()","29":"InGroupsOfTest::::evenlyDistributesGroupedElementsOverIterable()","30":"InGroupsOfTest::::evenlyDistributesGroupedElementsOverIterable()","31":"InGroupsOfTest::::evenlyDistributesGroupedElementsOverIterable()","32":"InGroupsOfTest::::evenlyDistributesGroupedElementsOverIterable()","34":"InGroupsOfTest::::lastGroupIsUnfinishedIfIterableSizeNotEvenlyDivisibleByK()","35":"InGroupsOfTest::::lastGroupIsUnfinishedIfIterableSizeNotEvenlyDivisibleByK()","36":"InGroupsOfTest::::lastGroupIsUnfinishedIfIterableSizeNotEvenlyDivisibleByK()","37":"InGroupsOfTest::::lastGroupIsUnfinishedIfIterableSizeNotEvenlyDivisibleByK()","38":"InGroupsOfTest::::lastGroupIsUnfinishedIfIterableSizeNotEvenlyDivisibleByK()","39":"InGroupsOfTest::::lastGroupIsUnfinishedIfIterableSizeNotEvenlyDivisibleByK()"},"tests":[{"test_lines":[22,25],"covered_lines":[17,19,20,29,33]},{"test_lines":[27,32],"covered_lines":[17,19,20,24,29,33,37]},{"test_lines":[34,39],"covered_lines":[17,19,20,24,29,33,37]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/Drop.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","import com.jnape.palatable.lambda.internal.iteration.DroppingIterable;\n","\n","/**\n"," * Lazily skip the first <code>n</code> elements from an <code>Iterable</code> by returning an <code>Iterable</code>\n"," * that begins iteration after the <code>nth</code> element. If <code>n</code> is greater than or equal to the length of\n"," * the <code>Iterable</code>, an empty <code>Iterable</code> is returned.\n"," *\n"," * @param <A> The Iterable element type\n"," * @see DropWhile\n"," * @see Take\n"," */\n","public final class Drop<A> implements Fn2<Integer, Iterable<A>, Iterable<A>> {\n","\n","    private static final Drop<?> INSTANCE = new Drop<>();\n","\n","    private Drop() {\n","    }\n","\n","    @Override\n","    public Iterable<A> checkedApply(Integer n, Iterable<A> as) {\n","        return new DroppingIterable<>(n, as);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> Drop<A> drop() {\n","        return (Drop<A>) INSTANCE;\n","    }\n","\n","    public static <A> Fn1<Iterable<A>, Iterable<A>> drop(int n) {\n","        return Drop.<A>drop().apply(n);\n","    }\n","\n","    public static <A> Iterable<A> drop(int n, Iterable<A> as) {\n","        return Drop.<A>drop(n).apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.EmptyIterableSupport;\n","import testsupport.traits.FiniteIteration;\n","import testsupport.traits.ImmutableIteration;\n","import testsupport.traits.Laziness;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Head.head;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Repeat.repeat;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Drop.drop;\n","import static com.jnape.palatable.lambda.functions.builtin.fn3.Times.times;\n","import static java.util.Arrays.asList;\n","import static org.junit.Assert.assertEquals;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IterableMatcher.iterates;\n","\n","@RunWith(Traits.class)\n","public class DropTest {\n","\n","    @TestTraits({Laziness.class, ImmutableIteration.class, FiniteIteration.class, EmptyIterableSupport.class})\n","    public Fn1<Iterable<Object>, Iterable<Object>> createTestSubject() {\n","        return drop(5);\n","    }\n","\n","    @Test\n","    public void dropsElementsUpToLimit() {\n","        assertThat(drop(2, asList(1, 2, 3, 4)), iterates(3, 4));\n","    }\n","\n","    @Test\n","    public void stackSafety() {\n","        int stackBlowingNumber = 10_000;\n","        assertEquals(just(1), head(times(stackBlowingNumber, drop(1), repeat(1))));\n","    }\n","}\n"],"method_lines_dic":{"Drop::::checkedApply(java.lang.Integer,java.lang.Iterable<A>)":[23,26],"Drop::::drop()":[28,31],"Drop::::drop(int)":[33,35],"Drop::::drop(int,java.lang.Iterable<A>)":[37,39]},"test_method_lines_dic":{"DropTest::::createTestSubject()":[26,29],"DropTest::::dropsElementsUpToLimit()":[31,34],"DropTest::::stackSafety()":[36,40]},"reverse_method_lines_dic":{"23":"Drop::::checkedApply(java.lang.Integer,java.lang.Iterable<A>)","24":"Drop::::checkedApply(java.lang.Integer,java.lang.Iterable<A>)","25":"Drop::::checkedApply(java.lang.Integer,java.lang.Iterable<A>)","26":"Drop::::checkedApply(java.lang.Integer,java.lang.Iterable<A>)","28":"Drop::::drop()","29":"Drop::::drop()","30":"Drop::::drop()","31":"Drop::::drop()","33":"Drop::::drop(int)","34":"Drop::::drop(int)","35":"Drop::::drop(int)","37":"Drop::::drop(int,java.lang.Iterable<A>)","38":"Drop::::drop(int,java.lang.Iterable<A>)","39":"Drop::::drop(int,java.lang.Iterable<A>)"},"test_reverse_method_lines_dic":{"26":"DropTest::::createTestSubject()","27":"DropTest::::createTestSubject()","28":"DropTest::::createTestSubject()","29":"DropTest::::createTestSubject()","31":"DropTest::::dropsElementsUpToLimit()","32":"DropTest::::dropsElementsUpToLimit()","33":"DropTest::::dropsElementsUpToLimit()","34":"DropTest::::dropsElementsUpToLimit()","36":"DropTest::::stackSafety()","37":"DropTest::::stackSafety()","38":"DropTest::::stackSafety()","39":"DropTest::::stackSafety()","40":"DropTest::::stackSafety()"},"tests":[{"test_lines":[26,29],"covered_lines":[18,20,21,30,34]},{"test_lines":[31,34],"covered_lines":[18,20,21,25,30,34,38]},{"test_lines":[36,40],"covered_lines":[18,20,21,25,30,34]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/Into8.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.adt.product.Product8;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","import com.jnape.palatable.lambda.functions.Fn8;\n","\n","/**\n"," * Given an <code>{@link Fn8}&lt;A, B, C, D, E, F, G, H, I&gt;</code> and a\n"," * <code>{@link Product8}&lt;A, B, C, D, E, F, G, H&gt;</code>, destructure the product and apply the slots as arguments\n"," * to the function, returning the result.\n"," *\n"," * @param <A> the first argument type\n"," * @param <B> the second argument type\n"," * @param <C> the third argument type\n"," * @param <D> the fourth argument type\n"," * @param <E> the fifth argument type\n"," * @param <F> the sixth argument type\n"," * @param <G> the seventh argument type\n"," * @param <H> the eighth argument type\n"," * @param <I> the result type\n"," */\n","public final class Into8<A, B, C, D, E, F, G, H, I> implements Fn2<Fn8<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? extends I>, Product8<A, B, C, D, E, F, G, H>, I> {\n","\n","    private static final Into8<?, ?, ?, ?, ?, ?, ?, ?, ?> INSTANCE = new Into8<>();\n","\n","    @Override\n","    public I checkedApply(\n","            Fn8<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? extends I> fn,\n","            Product8<A, B, C, D, E, F, G, H> product) {\n","        return product.<I>into(fn);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A, B, C, D, E, F, G, H, I> Into8<A, B, C, D, E, F, G, H, I> into8() {\n","        return (Into8<A, B, C, D, E, F, G, H, I>) INSTANCE;\n","    }\n","\n","    public static <A, B, C, D, E, F, G, H, I> Fn1<Product8<A, B, C, D, E, F, G, H>, I> into8(\n","            Fn8<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? extends I> fn) {\n","        return Into8.<A, B, C, D, E, F, G, H, I>into8().apply(fn);\n","    }\n","\n","    public static <A, B, C, D, E, F, G, H, I> I into8(\n","            Fn8<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? extends I> fn,\n","            Product8<A, B, C, D, E, F, G, H> product) {\n","        return Into8.<A, B, C, D, E, F, G, H, I>into8(fn).apply(product);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Into8.into8;\n","import static org.junit.Assert.assertEquals;\n","\n","public class Into8Test {\n","\n","    @Test\n","    public void appliesTupleToFunction() {\n","        assertEquals((Integer) 36, into8((a, b, c, d, e, f, g, h) -> a + b + c + d + e + f + g + h, tuple(1, 2, 3, 4, 5, 6, 7, 8)));\n","    }\n","}"],"method_lines_dic":{"Into8::::checkedApply(com.jnape.palatable.lambda.functions.Fn8<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? extends I>,com.jnape.palatable.lambda.adt.product.Product8<A, B, C, D, E, F, G, H>)":[27,32],"Into8::::into8()":[34,37],"Into8::::into8(com.jnape.palatable.lambda.functions.Fn8<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? extends I>)":[39,42],"Into8::::into8(com.jnape.palatable.lambda.functions.Fn8<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? extends I>,com.jnape.palatable.lambda.adt.product.Product8<A, B, C, D, E, F, G, H>)":[44,48]},"test_method_lines_dic":{"Into8Test::::appliesTupleToFunction()":[11,14]},"reverse_method_lines_dic":{"27":"Into8::::checkedApply(com.jnape.palatable.lambda.functions.Fn8<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? extends I>,com.jnape.palatable.lambda.adt.product.Product8<A, B, C, D, E, F, G, H>)","28":"Into8::::checkedApply(com.jnape.palatable.lambda.functions.Fn8<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? extends I>,com.jnape.palatable.lambda.adt.product.Product8<A, B, C, D, E, F, G, H>)","29":"Into8::::checkedApply(com.jnape.palatable.lambda.functions.Fn8<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? extends I>,com.jnape.palatable.lambda.adt.product.Product8<A, B, C, D, E, F, G, H>)","30":"Into8::::checkedApply(com.jnape.palatable.lambda.functions.Fn8<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? extends I>,com.jnape.palatable.lambda.adt.product.Product8<A, B, C, D, E, F, G, H>)","31":"Into8::::checkedApply(com.jnape.palatable.lambda.functions.Fn8<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? extends I>,com.jnape.palatable.lambda.adt.product.Product8<A, B, C, D, E, F, G, H>)","32":"Into8::::checkedApply(com.jnape.palatable.lambda.functions.Fn8<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? extends I>,com.jnape.palatable.lambda.adt.product.Product8<A, B, C, D, E, F, G, H>)","34":"Into8::::into8()","35":"Into8::::into8()","36":"Into8::::into8()","37":"Into8::::into8()","39":"Into8::::into8(com.jnape.palatable.lambda.functions.Fn8<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? extends I>)","40":"Into8::::into8(com.jnape.palatable.lambda.functions.Fn8<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? extends I>)","41":"Into8::::into8(com.jnape.palatable.lambda.functions.Fn8<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? extends I>)","42":"Into8::::into8(com.jnape.palatable.lambda.functions.Fn8<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? extends I>)","44":"Into8::::into8(com.jnape.palatable.lambda.functions.Fn8<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? extends I>,com.jnape.palatable.lambda.adt.product.Product8<A, B, C, D, E, F, G, H>)","45":"Into8::::into8(com.jnape.palatable.lambda.functions.Fn8<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? extends I>,com.jnape.palatable.lambda.adt.product.Product8<A, B, C, D, E, F, G, H>)","46":"Into8::::into8(com.jnape.palatable.lambda.functions.Fn8<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? extends I>,com.jnape.palatable.lambda.adt.product.Product8<A, B, C, D, E, F, G, H>)","47":"Into8::::into8(com.jnape.palatable.lambda.functions.Fn8<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? extends I>,com.jnape.palatable.lambda.adt.product.Product8<A, B, C, D, E, F, G, H>)","48":"Into8::::into8(com.jnape.palatable.lambda.functions.Fn8<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? extends I>,com.jnape.palatable.lambda.adt.product.Product8<A, B, C, D, E, F, G, H>)"},"test_reverse_method_lines_dic":{"11":"Into8Test::::appliesTupleToFunction()","12":"Into8Test::::appliesTupleToFunction()","13":"Into8Test::::appliesTupleToFunction()","14":"Into8Test::::appliesTupleToFunction()"},"tests":[{"test_lines":[11,14],"covered_lines":[23,25,31,36,41,47]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/Eq.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.specialized.BiPredicate;\n","import com.jnape.palatable.lambda.functions.specialized.Predicate;\n","\n","import java.util.Objects;\n","\n","/**\n"," * Type-safe equality in function form; uses {@link Object#equals}, not <code>==</code>.\n"," *\n"," * @param <A> the type to compare for equality\n"," */\n","public final class Eq<A> implements BiPredicate<A, A> {\n","\n","    private static final Eq<?> INSTANCE = new Eq<>();\n","\n","    private Eq() {\n","    }\n","\n","    @Override\n","    public Boolean checkedApply(A x, A y) {\n","        return Objects.equals(x, y);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> Eq<A> eq() {\n","        return (Eq<A>) INSTANCE;\n","    }\n","\n","    public static <A> Predicate<A> eq(A x) {\n","        return Eq.<A>eq().apply(x);\n","    }\n","\n","    public static <A> Boolean eq(A x, A y) {\n","        return eq(x).apply(y);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Eq.eq;\n","import static org.junit.Assert.assertFalse;\n","import static org.junit.Assert.assertTrue;\n","\n","public class EqTest {\n","\n","    @Test\n","    public void testsValueEquality() {\n","        Eq<String> stringEq = eq();\n","\n","        assertTrue(stringEq.apply(\"a\", \"a\"));\n","        assertFalse(stringEq.apply(\"a\", \"b\"));\n","        assertFalse(stringEq.apply(\"b\", \"a\"));\n","        assertTrue(stringEq.apply(null, null));\n","        assertFalse(stringEq.apply(\"a\", null));\n","        assertFalse(stringEq.apply(null, \"a\"));\n","    }\n","}"],"method_lines_dic":{"Eq::::checkedApply(A,A)":[20,23],"Eq::::eq()":[25,28],"Eq::::eq(A)":[30,32],"Eq::::eq(A,A)":[34,36]},"test_method_lines_dic":{"EqTest::::testsValueEquality()":[11,21]},"reverse_method_lines_dic":{"20":"Eq::::checkedApply(A,A)","21":"Eq::::checkedApply(A,A)","22":"Eq::::checkedApply(A,A)","23":"Eq::::checkedApply(A,A)","25":"Eq::::eq()","26":"Eq::::eq()","27":"Eq::::eq()","28":"Eq::::eq()","30":"Eq::::eq(A)","31":"Eq::::eq(A)","32":"Eq::::eq(A)","34":"Eq::::eq(A,A)","35":"Eq::::eq(A,A)","36":"Eq::::eq(A,A)"},"test_reverse_method_lines_dic":{"11":"EqTest::::testsValueEquality()","12":"EqTest::::testsValueEquality()","13":"EqTest::::testsValueEquality()","14":"EqTest::::testsValueEquality()","15":"EqTest::::testsValueEquality()","16":"EqTest::::testsValueEquality()","17":"EqTest::::testsValueEquality()","18":"EqTest::::testsValueEquality()","19":"EqTest::::testsValueEquality()","20":"EqTest::::testsValueEquality()","21":"EqTest::::testsValueEquality()"},"tests":[{"test_lines":[11,21],"covered_lines":[15,17,18,22,27]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/LTE.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.builtin.fn3.LTEBy;\n","import com.jnape.palatable.lambda.functions.specialized.BiPredicate;\n","import com.jnape.palatable.lambda.functions.specialized.Predicate;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Id.id;\n","import static com.jnape.palatable.lambda.functions.builtin.fn3.LTEBy.lteBy;\n","\n","/**\n"," * Given two {@link Comparable} values of type <code>A</code>, return <code>true</code> if the second value is less than\n"," * or equal to the first value according to {@link Comparable#compareTo(Object)} otherwise, return false.\n"," *\n"," * @param <A> the value typ\n"," * @see LTEBy\n"," * @see GTE\n"," */\n","public final class LTE<A extends Comparable<A>> implements BiPredicate<A, A> {\n","\n","    private static final LTE<?> INSTANCE = new LTE<>();\n","\n","    private LTE() {\n","    }\n","\n","    @Override\n","    public Boolean checkedApply(A y, A x) {\n","        return lteBy(id(), y, x);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A extends Comparable<A>> LTE<A> lte() {\n","        return (LTE<A>) INSTANCE;\n","    }\n","\n","    public static <A extends Comparable<A>> Predicate<A> lte(A y) {\n","        return LTE.<A>lte().apply(y);\n","    }\n","\n","    public static <A extends Comparable<A>> Boolean lte(A y, A x) {\n","        return lte(y).apply(x);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.LTE.lte;\n","import static org.junit.Assert.assertFalse;\n","import static org.junit.Assert.assertTrue;\n","\n","public class LTETest {\n","\n","    @Test\n","    public void comparisons() {\n","        assertTrue(lte(2, 1));\n","        assertTrue(lte(1, 1));\n","        assertFalse(lte(1, 2));\n","    }\n","}"],"method_lines_dic":{"LTE::::checkedApply(A,A)":[25,28],"LTE::::lte()":[30,33],"LTE::::lte(A)":[35,37],"LTE::::lte(A,A)":[39,41]},"test_method_lines_dic":{"LTETest::::comparisons()":[11,16]},"reverse_method_lines_dic":{"25":"LTE::::checkedApply(A,A)","26":"LTE::::checkedApply(A,A)","27":"LTE::::checkedApply(A,A)","28":"LTE::::checkedApply(A,A)","30":"LTE::::lte()","31":"LTE::::lte()","32":"LTE::::lte()","33":"LTE::::lte()","35":"LTE::::lte(A)","36":"LTE::::lte(A)","37":"LTE::::lte(A)","39":"LTE::::lte(A,A)","40":"LTE::::lte(A,A)","41":"LTE::::lte(A,A)"},"test_reverse_method_lines_dic":{"11":"LTETest::::comparisons()","12":"LTETest::::comparisons()","13":"LTETest::::comparisons()","14":"LTETest::::comparisons()","15":"LTETest::::comparisons()","16":"LTETest::::comparisons()"},"tests":[{"test_lines":[11,16],"covered_lines":[20,22,23,27,32,36,40]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/Filter.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","import com.jnape.palatable.lambda.internal.iteration.FilteringIterable;\n","\n","/**\n"," * Lazily apply a predicate to each element in an <code>Iterable</code>, returning an <code>Iterable</code> of just the\n"," * elements for which the predicate evaluated to <code>true</code>.\n"," *\n"," * @param <A> A type contravariant to the input Iterable element type\n"," * @see TakeWhile\n"," * @see DropWhile\n"," */\n","public final class Filter<A> implements Fn2<Fn1<? super A, ? extends Boolean>, Iterable<A>, Iterable<A>> {\n","\n","    private static final Filter<?> INSTANCE = new Filter<>();\n","\n","    private Filter() {\n","    }\n","\n","    @Override\n","    public Iterable<A> checkedApply(Fn1<? super A, ? extends Boolean> predicate, Iterable<A> as) {\n","        return new FilteringIterable<>(predicate, as);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> Filter<A> filter() {\n","        return (Filter<A>) INSTANCE;\n","    }\n","\n","    public static <A> Fn1<Iterable<A>, Iterable<A>> filter(Fn1<? super A, ? extends Boolean> predicate) {\n","        return Filter.<A>filter().apply(predicate);\n","    }\n","\n","    public static <A> Iterable<A> filter(Fn1<? super A, ? extends Boolean> predicate, Iterable<A> as) {\n","        return Filter.<A>filter(predicate).apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.specialized.Predicate;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.EmptyIterableSupport;\n","import testsupport.traits.FiniteIteration;\n","import testsupport.traits.ImmutableIteration;\n","import testsupport.traits.Laziness;\n","\n","import java.util.ArrayList;\n","import java.util.List;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Filter.filter;\n","import static java.util.Arrays.asList;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IterableMatcher.iterates;\n","\n","@RunWith(Traits.class)\n","public class FilterTest {\n","\n","    @TestTraits({Laziness.class, EmptyIterableSupport.class, FiniteIteration.class, ImmutableIteration.class})\n","    public Fn1<? extends Iterable<?>, ?> testSubject() {\n","        return filter(constantly(true));\n","    }\n","\n","    @Test\n","    public void filtersOutMatchingElements() {\n","        Predicate<Integer> evens = integer -> integer % 2 == 0;\n","        assertThat(\n","                filter(evens, asList(1, 2, 3, 4, 5, 6)),\n","                iterates(2, 4, 6)\n","        );\n","    }\n","\n","    @Test\n","    public void deforestingExecutesPredicatesInOrder() {\n","        List<Integer> innerInvocations = new ArrayList<>();\n","        List<Integer> outerInvocations = new ArrayList<>();\n","        filter(y -> {\n","            outerInvocations.add(y);\n","            return true;\n","        }, filter(x -> {\n","            innerInvocations.add(x);\n","            return x % 2 == 0;\n","        }, asList(1, 2, 3))).forEach(__ -> {});\n","        assertThat(innerInvocations, iterates(1, 2, 3));\n","        assertThat(outerInvocations, iterates(2));\n","    }\n","}\n"],"method_lines_dic":{"Filter::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)":[22,25],"Filter::::filter()":[27,30],"Filter::::filter(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)":[32,34],"Filter::::filter(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)":[36,38]},"test_method_lines_dic":{"FilterTest::::testSubject()":[26,29],"FilterTest::::filtersOutMatchingElements()":[31,38],"FilterTest::::deforestingExecutesPredicatesInOrder()":[40,53]},"reverse_method_lines_dic":{"22":"Filter::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","23":"Filter::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","24":"Filter::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","25":"Filter::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","27":"Filter::::filter()","28":"Filter::::filter()","29":"Filter::::filter()","30":"Filter::::filter()","32":"Filter::::filter(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)","33":"Filter::::filter(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)","34":"Filter::::filter(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)","36":"Filter::::filter(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","37":"Filter::::filter(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","38":"Filter::::filter(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)"},"test_reverse_method_lines_dic":{"26":"FilterTest::::testSubject()","27":"FilterTest::::testSubject()","28":"FilterTest::::testSubject()","29":"FilterTest::::testSubject()","31":"FilterTest::::filtersOutMatchingElements()","32":"FilterTest::::filtersOutMatchingElements()","33":"FilterTest::::filtersOutMatchingElements()","34":"FilterTest::::filtersOutMatchingElements()","35":"FilterTest::::filtersOutMatchingElements()","36":"FilterTest::::filtersOutMatchingElements()","37":"FilterTest::::filtersOutMatchingElements()","38":"FilterTest::::filtersOutMatchingElements()","40":"FilterTest::::deforestingExecutesPredicatesInOrder()","41":"FilterTest::::deforestingExecutesPredicatesInOrder()","42":"FilterTest::::deforestingExecutesPredicatesInOrder()","43":"FilterTest::::deforestingExecutesPredicatesInOrder()","44":"FilterTest::::deforestingExecutesPredicatesInOrder()","45":"FilterTest::::deforestingExecutesPredicatesInOrder()","46":"FilterTest::::deforestingExecutesPredicatesInOrder()","47":"FilterTest::::deforestingExecutesPredicatesInOrder()","48":"FilterTest::::deforestingExecutesPredicatesInOrder()","49":"FilterTest::::deforestingExecutesPredicatesInOrder()","50":"FilterTest::::deforestingExecutesPredicatesInOrder()","51":"FilterTest::::deforestingExecutesPredicatesInOrder()","52":"FilterTest::::deforestingExecutesPredicatesInOrder()","53":"FilterTest::::deforestingExecutesPredicatesInOrder()"},"tests":[{"test_lines":[26,29],"covered_lines":[17,19,20,29,33]},{"test_lines":[31,38],"covered_lines":[17,19,20,24,29,33,37]},{"test_lines":[40,53],"covered_lines":[17,19,20,24,29,33,37]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/Map.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","import com.jnape.palatable.lambda.internal.iteration.MappingIterable;\n","\n","/**\n"," * Lazily apply a function to each element in an <code>Iterable</code>, producing an <code>Iterable</code> of the mapped\n"," * results.\n"," *\n"," * @param <A> A type contravariant to the input Iterable element type\n"," * @param <B> A type covariant to the output Iterable element type\n"," */\n","public final class Map<A, B> implements Fn2<Fn1<? super A, ? extends B>, Iterable<A>, Iterable<B>> {\n","\n","    private static final Map<?, ?> INSTANCE = new Map<>();\n","\n","    private Map() {\n","    }\n","\n","    @Override\n","    public Iterable<B> checkedApply(Fn1<? super A, ? extends B> fn, Iterable<A> as) {\n","        return new MappingIterable<>(fn, as);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A, B> Map<A, B> map() {\n","        return (Map<A, B>) INSTANCE;\n","    }\n","\n","    public static <A, B> Fn1<Iterable<A>, Iterable<B>> map(Fn1<? super A, ? extends B> fn) {\n","        return Map.<A, B>map().apply(fn);\n","    }\n","\n","    public static <A, B> Iterable<B> map(Fn1<? super A, ? extends B> fn, Iterable<A> as) {\n","        return Map.<A, B>map(fn).apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.EmptyIterableSupport;\n","import testsupport.traits.FiniteIteration;\n","import testsupport.traits.ImmutableIteration;\n","import testsupport.traits.InfiniteIterableSupport;\n","import testsupport.traits.Laziness;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Id.id;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Map.map;\n","import static java.util.Arrays.asList;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IterableMatcher.iterates;\n","\n","@RunWith(Traits.class)\n","public class MapTest {\n","\n","    @TestTraits({Laziness.class, EmptyIterableSupport.class, InfiniteIterableSupport.class, FiniteIteration.class, ImmutableIteration.class})\n","    public Fn1<? extends Iterable<?>, ?> createTraitsTestSubject() {\n","        return map(id());\n","    }\n","\n","    @Test\n","    public void mapsInputsIntoOutputs() {\n","        Fn1<String, Integer> length = String::length;\n","        assertThat(\n","                map(length, asList(\"one\", \"two\", \"three\")),\n","                iterates(3, 3, 5)\n","        );\n","    }\n","}\n"],"method_lines_dic":{"Map::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,java.lang.Iterable<A>)":[21,24],"Map::::map()":[26,29],"Map::::map(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)":[31,33],"Map::::map(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,java.lang.Iterable<A>)":[35,37]},"test_method_lines_dic":{"MapTest::::createTraitsTestSubject()":[23,26],"MapTest::::mapsInputsIntoOutputs()":[28,35]},"reverse_method_lines_dic":{"21":"Map::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,java.lang.Iterable<A>)","22":"Map::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,java.lang.Iterable<A>)","23":"Map::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,java.lang.Iterable<A>)","24":"Map::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,java.lang.Iterable<A>)","26":"Map::::map()","27":"Map::::map()","28":"Map::::map()","29":"Map::::map()","31":"Map::::map(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","32":"Map::::map(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","33":"Map::::map(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","35":"Map::::map(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,java.lang.Iterable<A>)","36":"Map::::map(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,java.lang.Iterable<A>)","37":"Map::::map(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,java.lang.Iterable<A>)"},"test_reverse_method_lines_dic":{"23":"MapTest::::createTraitsTestSubject()","24":"MapTest::::createTraitsTestSubject()","25":"MapTest::::createTraitsTestSubject()","26":"MapTest::::createTraitsTestSubject()","28":"MapTest::::mapsInputsIntoOutputs()","29":"MapTest::::mapsInputsIntoOutputs()","30":"MapTest::::mapsInputsIntoOutputs()","31":"MapTest::::mapsInputsIntoOutputs()","32":"MapTest::::mapsInputsIntoOutputs()","33":"MapTest::::mapsInputsIntoOutputs()","34":"MapTest::::mapsInputsIntoOutputs()","35":"MapTest::::mapsInputsIntoOutputs()"},"tests":[{"test_lines":[23,26],"covered_lines":[16,18,19,28,32]},{"test_lines":[28,35],"covered_lines":[16,18,19,23,28,32,36]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/CartesianProduct.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.adt.hlist.Tuple2;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","import com.jnape.palatable.lambda.internal.iteration.CombinatorialIterator;\n","\n","/**\n"," * Lazily compute the cartesian product of an <code>Iterable&lt;A&gt;</code> and <code>Iterable&lt;B&gt;</code>,\n"," * returning an <code>Iterable&lt;Tuple2&lt;A, B&gt;&gt;</code>, the <em>products</em> as tuples of\n"," * <em>multiplicand</em> <code>A</code>s and <em>multiplier</em> <code>B</code>s.\n"," * <p>\n"," * Note that this algorithm exhaustively pairs all elements from <code>Iterable&lt;B&gt;</code> to the first element of\n"," * <code>Iterable&lt;A&gt;</code> before advancing to the next element of <code>Iterable&lt;A&gt;</code>, <strong>so if\n"," * <code>Iterable&lt;B&gt;</code> is infinite, only one element from <code>Iterable&lt;A&gt;</code> will ever be\n"," * paired</strong>.\n"," *\n"," * @param <A> The multiplicand Iterable element type\n"," * @param <B> The multiplier Iterable element type\n"," * @see Zip\n"," */\n","public final class CartesianProduct<A, B> implements Fn2<Iterable<A>, Iterable<B>, Iterable<Tuple2<A, B>>> {\n","\n","    private static final CartesianProduct<?, ?> INSTANCE = new CartesianProduct<>();\n","\n","    private CartesianProduct() {\n","    }\n","\n","    @Override\n","    public Iterable<Tuple2<A, B>> checkedApply(Iterable<A> as, Iterable<B> bs) {\n","        return () -> new CombinatorialIterator<>(as.iterator(), bs.iterator());\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A, B> CartesianProduct<A, B> cartesianProduct() {\n","        return (CartesianProduct<A, B>) INSTANCE;\n","    }\n","\n","    public static <A, B> Fn1<Iterable<B>, Iterable<Tuple2<A, B>>> cartesianProduct(Iterable<A> as) {\n","        return CartesianProduct.<A, B>cartesianProduct().apply(as);\n","    }\n","\n","    public static <A, B> Iterable<Tuple2<A, B>> cartesianProduct(Iterable<A> as, Iterable<B> bs) {\n","        return CartesianProduct.<A, B>cartesianProduct(as).apply(bs);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.adt.hlist.Tuple2;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.EmptyIterableSupport;\n","import testsupport.traits.FiniteIteration;\n","import testsupport.traits.ImmutableIteration;\n","import testsupport.traits.Laziness;\n","\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.CartesianProduct.cartesianProduct;\n","import static java.util.Arrays.asList;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IterableMatcher.iterates;\n","\n","@RunWith(Traits.class)\n","public class CartesianProductTest {\n","\n","    @TestTraits({Laziness.class, ImmutableIteration.class, EmptyIterableSupport.class, FiniteIteration.class})\n","    public Fn1<Iterable<Object>, Iterable<Tuple2<Integer, Object>>> createTestSubject() {\n","        return cartesianProduct(asList(1, 2, 3));\n","    }\n","\n","    @Test\n","    public void computesCartesianProductOfTwoEquallySizedIterables() {\n","        Iterable<Integer> numbers = asList(1, 2, 3);\n","        Iterable<String>  letters = asList(\"a\", \"b\", \"c\");\n","\n","        assertThat(\n","                cartesianProduct(numbers, letters),\n","                iterates(\n","                        tuple(1, \"a\"),\n","                        tuple(1, \"b\"),\n","                        tuple(1, \"c\"),\n","                        tuple(2, \"a\"),\n","                        tuple(2, \"b\"),\n","                        tuple(2, \"c\"),\n","                        tuple(3, \"a\"),\n","                        tuple(3, \"b\"),\n","                        tuple(3, \"c\")\n","                )\n","        );\n","    }\n","\n","    @Test\n","    public void worksForTwoUnequallySizedIterables() {\n","        Iterable<Integer> oneThroughThree = asList(1, 2, 3);\n","        Iterable<String>  aAndB           = asList(\"a\", \"b\");\n","\n","        assertThat(\n","                cartesianProduct(oneThroughThree, aAndB),\n","                iterates(\n","                        tuple(1, \"a\"),\n","                        tuple(1, \"b\"),\n","                        tuple(2, \"a\"),\n","                        tuple(2, \"b\"),\n","                        tuple(3, \"a\"),\n","                        tuple(3, \"b\")\n","                )\n","        );\n","    }\n","}\n"],"method_lines_dic":{"CartesianProduct::::checkedApply(java.lang.Iterable<A>,java.lang.Iterable<B>)":[29,32],"CartesianProduct::::cartesianProduct()":[34,37],"CartesianProduct::::cartesianProduct(java.lang.Iterable<A>)":[39,41],"CartesianProduct::::cartesianProduct(java.lang.Iterable<A>,java.lang.Iterable<B>)":[43,45]},"test_method_lines_dic":{"CartesianProductTest::::createTestSubject()":[23,26],"CartesianProductTest::::computesCartesianProductOfTwoEquallySizedIterables()":[28,47],"CartesianProductTest::::worksForTwoUnequallySizedIterables()":[49,65]},"reverse_method_lines_dic":{"29":"CartesianProduct::::checkedApply(java.lang.Iterable<A>,java.lang.Iterable<B>)","30":"CartesianProduct::::checkedApply(java.lang.Iterable<A>,java.lang.Iterable<B>)","31":"CartesianProduct::::checkedApply(java.lang.Iterable<A>,java.lang.Iterable<B>)","32":"CartesianProduct::::checkedApply(java.lang.Iterable<A>,java.lang.Iterable<B>)","34":"CartesianProduct::::cartesianProduct()","35":"CartesianProduct::::cartesianProduct()","36":"CartesianProduct::::cartesianProduct()","37":"CartesianProduct::::cartesianProduct()","39":"CartesianProduct::::cartesianProduct(java.lang.Iterable<A>)","40":"CartesianProduct::::cartesianProduct(java.lang.Iterable<A>)","41":"CartesianProduct::::cartesianProduct(java.lang.Iterable<A>)","43":"CartesianProduct::::cartesianProduct(java.lang.Iterable<A>,java.lang.Iterable<B>)","44":"CartesianProduct::::cartesianProduct(java.lang.Iterable<A>,java.lang.Iterable<B>)","45":"CartesianProduct::::cartesianProduct(java.lang.Iterable<A>,java.lang.Iterable<B>)"},"test_reverse_method_lines_dic":{"23":"CartesianProductTest::::createTestSubject()","24":"CartesianProductTest::::createTestSubject()","25":"CartesianProductTest::::createTestSubject()","26":"CartesianProductTest::::createTestSubject()","28":"CartesianProductTest::::computesCartesianProductOfTwoEquallySizedIterables()","29":"CartesianProductTest::::computesCartesianProductOfTwoEquallySizedIterables()","30":"CartesianProductTest::::computesCartesianProductOfTwoEquallySizedIterables()","31":"CartesianProductTest::::computesCartesianProductOfTwoEquallySizedIterables()","32":"CartesianProductTest::::computesCartesianProductOfTwoEquallySizedIterables()","33":"CartesianProductTest::::computesCartesianProductOfTwoEquallySizedIterables()","34":"CartesianProductTest::::computesCartesianProductOfTwoEquallySizedIterables()","35":"CartesianProductTest::::computesCartesianProductOfTwoEquallySizedIterables()","36":"CartesianProductTest::::computesCartesianProductOfTwoEquallySizedIterables()","37":"CartesianProductTest::::computesCartesianProductOfTwoEquallySizedIterables()","38":"CartesianProductTest::::computesCartesianProductOfTwoEquallySizedIterables()","39":"CartesianProductTest::::computesCartesianProductOfTwoEquallySizedIterables()","40":"CartesianProductTest::::computesCartesianProductOfTwoEquallySizedIterables()","41":"CartesianProductTest::::computesCartesianProductOfTwoEquallySizedIterables()","42":"CartesianProductTest::::computesCartesianProductOfTwoEquallySizedIterables()","43":"CartesianProductTest::::computesCartesianProductOfTwoEquallySizedIterables()","44":"CartesianProductTest::::computesCartesianProductOfTwoEquallySizedIterables()","45":"CartesianProductTest::::computesCartesianProductOfTwoEquallySizedIterables()","46":"CartesianProductTest::::computesCartesianProductOfTwoEquallySizedIterables()","47":"CartesianProductTest::::computesCartesianProductOfTwoEquallySizedIterables()","49":"CartesianProductTest::::worksForTwoUnequallySizedIterables()","50":"CartesianProductTest::::worksForTwoUnequallySizedIterables()","51":"CartesianProductTest::::worksForTwoUnequallySizedIterables()","52":"CartesianProductTest::::worksForTwoUnequallySizedIterables()","53":"CartesianProductTest::::worksForTwoUnequallySizedIterables()","54":"CartesianProductTest::::worksForTwoUnequallySizedIterables()","55":"CartesianProductTest::::worksForTwoUnequallySizedIterables()","56":"CartesianProductTest::::worksForTwoUnequallySizedIterables()","57":"CartesianProductTest::::worksForTwoUnequallySizedIterables()","58":"CartesianProductTest::::worksForTwoUnequallySizedIterables()","59":"CartesianProductTest::::worksForTwoUnequallySizedIterables()","60":"CartesianProductTest::::worksForTwoUnequallySizedIterables()","61":"CartesianProductTest::::worksForTwoUnequallySizedIterables()","62":"CartesianProductTest::::worksForTwoUnequallySizedIterables()","63":"CartesianProductTest::::worksForTwoUnequallySizedIterables()","64":"CartesianProductTest::::worksForTwoUnequallySizedIterables()","65":"CartesianProductTest::::worksForTwoUnequallySizedIterables()"},"tests":[{"test_lines":[23,26],"covered_lines":[24,26,27,36,40]},{"test_lines":[28,47],"covered_lines":[24,26,27,31,36,40,44]},{"test_lines":[49,65],"covered_lines":[24,26,27,31,36,40,44]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/SortBy.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","import com.jnape.palatable.lambda.functions.builtin.fn1.Sort;\n","\n","import java.util.List;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.SortWith.sortWith;\n","import static java.util.Comparator.comparing;\n","\n","/**\n"," * Given an {@link Iterable} and some mapping function from the {@link Iterable} element type to some\n"," * {@link Comparable} type, produce a sorted {@link List} of the original elements based on sorting applied to the\n"," * result of the mapping function. Note that this is both eager and monolithic.\n"," *\n"," * @param <A> the input Iterable and output List element type\n"," * @param <B> the mapped Comparable type\n"," * @see Sort\n"," * @see SortWith\n"," */\n","public final class SortBy<A, B extends Comparable<B>> implements Fn2<Fn1<? super A, ? extends B>, Iterable<A>, List<A>> {\n","\n","    private static final SortBy<?, ?> INSTANCE = new SortBy<>();\n","\n","    private SortBy() {\n","    }\n","\n","    @Override\n","    public List<A> checkedApply(Fn1<? super A, ? extends B> fn, Iterable<A> as) {\n","        return sortWith(comparing(fn.toFunction()), as);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A, B extends Comparable<B>> SortBy<A, B> sortBy() {\n","        return (SortBy<A, B>) INSTANCE;\n","    }\n","\n","    public static <A, B extends Comparable<B>> Fn1<Iterable<A>, List<A>> sortBy(Fn1<? super A, ? extends B> fn) {\n","        return SortBy.<A, B>sortBy().apply(fn);\n","    }\n","\n","    public static <A, B extends Comparable<B>> List<A> sortBy(Fn1<? super A, ? extends B> fn, Iterable<A> as) {\n","        return SortBy.<A, B>sortBy(fn).apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.EmptyIterableSupport;\n","import testsupport.traits.FiniteIteration;\n","\n","import java.util.List;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Id.id;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.SortBy.sortBy;\n","import static java.util.Arrays.asList;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IterableMatcher.iterates;\n","\n","@RunWith(Traits.class)\n","public class SortByTest {\n","\n","    @TestTraits({FiniteIteration.class, EmptyIterableSupport.class})\n","    public Fn1<Iterable<Integer>, List<Integer>> testSubject() {\n","        return sortBy(id());\n","    }\n","\n","    @Test\n","    public void sortsIterable() {\n","        assertThat(sortBy(id(), asList(2, 1, 3)), iterates(1, 2, 3));\n","    }\n","}"],"method_lines_dic":{"SortBy::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,java.lang.Iterable<A>)":[29,32],"SortBy::::sortBy()":[34,37],"SortBy::::sortBy(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)":[39,41],"SortBy::::sortBy(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,java.lang.Iterable<A>)":[43,45]},"test_method_lines_dic":{"SortByTest::::testSubject()":[22,25],"SortByTest::::sortsIterable()":[27,30]},"reverse_method_lines_dic":{"29":"SortBy::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,java.lang.Iterable<A>)","30":"SortBy::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,java.lang.Iterable<A>)","31":"SortBy::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,java.lang.Iterable<A>)","32":"SortBy::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,java.lang.Iterable<A>)","34":"SortBy::::sortBy()","35":"SortBy::::sortBy()","36":"SortBy::::sortBy()","37":"SortBy::::sortBy()","39":"SortBy::::sortBy(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","40":"SortBy::::sortBy(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","41":"SortBy::::sortBy(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","43":"SortBy::::sortBy(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,java.lang.Iterable<A>)","44":"SortBy::::sortBy(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,java.lang.Iterable<A>)","45":"SortBy::::sortBy(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,java.lang.Iterable<A>)"},"test_reverse_method_lines_dic":{"22":"SortByTest::::testSubject()","23":"SortByTest::::testSubject()","24":"SortByTest::::testSubject()","25":"SortByTest::::testSubject()","27":"SortByTest::::sortsIterable()","28":"SortByTest::::sortsIterable()","29":"SortByTest::::sortsIterable()","30":"SortByTest::::sortsIterable()"},"tests":[{"test_lines":[22,25],"covered_lines":[24,26,27,36,40]},{"test_lines":[27,30],"covered_lines":[24,26,27,31,36,40,44]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/Into1.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.adt.hlist.SingletonHList;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","\n","/**\n"," * Given an <code>{@link Fn1}&lt;A, B&gt;</code> and a <code>{@link SingletonHList}&lt;A&gt;</code>, pop the head and\n"," * apply it to the function, returning the result.\n"," *\n"," * @param <A> the first argument type\n"," * @param <B> the result type\n"," */\n","public final class Into1<A, B> implements Fn2<Fn1<? super A, ? extends B>, SingletonHList<A>, B> {\n","\n","    private static final Into1<?, ?> INSTANCE = new Into1<>();\n","\n","    @Override\n","    public B checkedApply(Fn1<? super A, ? extends B> fn, SingletonHList<A> singletonHList) {\n","        return fn.apply(singletonHList.head());\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A, B> Into1<A, B> into1() {\n","        return (Into1<A, B>) INSTANCE;\n","    }\n","\n","    public static <A, B> Fn1<SingletonHList<A>, B> into1(Fn1<? super A, ? extends B> fn) {\n","        return Into1.<A, B>into1().apply(fn);\n","    }\n","\n","    public static <A, B> B into1(Fn1<? super A, ? extends B> fn, SingletonHList<A> singletonHList) {\n","        return Into1.<A, B>into1(fn).apply(singletonHList);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.hlist.HList.singletonHList;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Into1.into1;\n","import static org.junit.Assert.assertEquals;\n","\n","public class Into1Test {\n","\n","    @Test\n","    public void appliesSingletonHListHeadToFunction() {\n","        assertEquals(\"FOO\", into1(String::toUpperCase, singletonHList(\"foo\")));\n","    }\n","}"],"method_lines_dic":{"Into1::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.adt.hlist.SingletonHList<A>)":[18,21],"Into1::::into1()":[23,26],"Into1::::into1(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)":[28,30],"Into1::::into1(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.adt.hlist.SingletonHList<A>)":[32,34]},"test_method_lines_dic":{"Into1Test::::appliesSingletonHListHeadToFunction()":[11,14]},"reverse_method_lines_dic":{"18":"Into1::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.adt.hlist.SingletonHList<A>)","19":"Into1::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.adt.hlist.SingletonHList<A>)","20":"Into1::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.adt.hlist.SingletonHList<A>)","21":"Into1::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.adt.hlist.SingletonHList<A>)","23":"Into1::::into1()","24":"Into1::::into1()","25":"Into1::::into1()","26":"Into1::::into1()","28":"Into1::::into1(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","29":"Into1::::into1(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","30":"Into1::::into1(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","32":"Into1::::into1(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.adt.hlist.SingletonHList<A>)","33":"Into1::::into1(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.adt.hlist.SingletonHList<A>)","34":"Into1::::into1(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.adt.hlist.SingletonHList<A>)"},"test_reverse_method_lines_dic":{"11":"Into1Test::::appliesSingletonHListHeadToFunction()","12":"Into1Test::::appliesSingletonHListHeadToFunction()","13":"Into1Test::::appliesSingletonHListHeadToFunction()","14":"Into1Test::::appliesSingletonHListHeadToFunction()"},"tests":[{"test_lines":[11,14],"covered_lines":[14,16,20,25,29,33]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/Zip.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.adt.hlist.Tuple2;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Tupler2.tupler;\n","import static com.jnape.palatable.lambda.functions.builtin.fn3.ZipWith.zipWith;\n","\n","/**\n"," * Zip together two <code>Iterable</code>s into a single <code>Iterable</code> of <code>Tuple2&lt;A, B&gt;</code>. If\n"," * the input <code>Iterable</code>s differ in size, the resulting <code>Iterable</code> contains only as many pairs as\n"," * the smallest input <code>Iterable</code>'s elements.\n"," *\n"," * @param <A> The first input Iterable element type, and the type of the first tuple slot in the output Iterable\n"," * @param <B> The second input Iterable element type, and the type of the second tuple slot in the output Iterable\n"," * @see com.jnape.palatable.lambda.functions.builtin.fn3.ZipWith\n"," */\n","public final class Zip<A, B> implements Fn2<Iterable<A>, Iterable<B>, Iterable<Tuple2<A, B>>> {\n","\n","    private static final Zip<?, ?> INSTANCE = new Zip<>();\n","\n","    private Zip() {\n","    }\n","\n","    @Override\n","    public Iterable<Tuple2<A, B>> checkedApply(Iterable<A> as, Iterable<B> bs) {\n","        return zipWith(tupler(), as, bs);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A, B> Zip<A, B> zip() {\n","        return (Zip<A, B>) INSTANCE;\n","    }\n","\n","    public static <A, B> Fn1<Iterable<B>, Iterable<Tuple2<A, B>>> zip(Iterable<A> as) {\n","        return Zip.<A, B>zip().apply(as);\n","    }\n","\n","    public static <A, B> Iterable<Tuple2<A, B>> zip(Iterable<A> as, Iterable<B> bs) {\n","        return Zip.<A, B>zip(as).apply(bs);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.adt.hlist.Tuple2;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.FiniteIteration;\n","import testsupport.traits.ImmutableIteration;\n","import testsupport.traits.Laziness;\n","\n","import java.util.Arrays;\n","\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Zip.zip;\n","import static java.util.Arrays.asList;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IterableMatcher.iterates;\n","\n","@RunWith(Traits.class)\n","public class ZipTest {\n","\n","    @TestTraits({Laziness.class, FiniteIteration.class, ImmutableIteration.class})\n","    public Fn1<Iterable<Object>, Iterable<Tuple2<Object, Object>>> createTestSubject() {\n","        return zip(Arrays.asList(1, 2, 3));\n","    }\n","\n","    @Test\n","    public void zipsTwoIterablesTogether() {\n","        Iterable<Integer> odds  = asList(1, 3, 5);\n","        Iterable<Integer> evens = asList(2, 4, 6);\n","\n","        Iterable<Tuple2<Integer, Integer>> numbers = zip(odds, evens);\n","        assertThat(numbers, iterates(tuple(1, 2), tuple(3, 4), tuple(5, 6)));\n","    }\n","}\n"],"method_lines_dic":{"Zip::::checkedApply(java.lang.Iterable<A>,java.lang.Iterable<B>)":[26,29],"Zip::::zip()":[31,34],"Zip::::zip(java.lang.Iterable<A>)":[36,38],"Zip::::zip(java.lang.Iterable<A>,java.lang.Iterable<B>)":[40,42]},"test_method_lines_dic":{"ZipTest::::createTestSubject()":[24,27],"ZipTest::::zipsTwoIterablesTogether()":[29,36]},"reverse_method_lines_dic":{"26":"Zip::::checkedApply(java.lang.Iterable<A>,java.lang.Iterable<B>)","27":"Zip::::checkedApply(java.lang.Iterable<A>,java.lang.Iterable<B>)","28":"Zip::::checkedApply(java.lang.Iterable<A>,java.lang.Iterable<B>)","29":"Zip::::checkedApply(java.lang.Iterable<A>,java.lang.Iterable<B>)","31":"Zip::::zip()","32":"Zip::::zip()","33":"Zip::::zip()","34":"Zip::::zip()","36":"Zip::::zip(java.lang.Iterable<A>)","37":"Zip::::zip(java.lang.Iterable<A>)","38":"Zip::::zip(java.lang.Iterable<A>)","40":"Zip::::zip(java.lang.Iterable<A>,java.lang.Iterable<B>)","41":"Zip::::zip(java.lang.Iterable<A>,java.lang.Iterable<B>)","42":"Zip::::zip(java.lang.Iterable<A>,java.lang.Iterable<B>)"},"test_reverse_method_lines_dic":{"24":"ZipTest::::createTestSubject()","25":"ZipTest::::createTestSubject()","26":"ZipTest::::createTestSubject()","27":"ZipTest::::createTestSubject()","29":"ZipTest::::zipsTwoIterablesTogether()","30":"ZipTest::::zipsTwoIterablesTogether()","31":"ZipTest::::zipsTwoIterablesTogether()","32":"ZipTest::::zipsTwoIterablesTogether()","33":"ZipTest::::zipsTwoIterablesTogether()","34":"ZipTest::::zipsTwoIterablesTogether()","35":"ZipTest::::zipsTwoIterablesTogether()","36":"ZipTest::::zipsTwoIterablesTogether()"},"tests":[{"test_lines":[24,27],"covered_lines":[21,23,24,33,37]},{"test_lines":[29,36],"covered_lines":[21,23,24,28,33,37,41]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/Cons.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","import com.jnape.palatable.lambda.internal.iteration.ConsingIterator;\n","\n","/**\n"," * Prepend an element to an <code>Iterable</code>.\n"," *\n"," * @param <A> the Iterable element type\n"," */\n","public final class Cons<A> implements Fn2<A, Iterable<A>, Iterable<A>> {\n","\n","    private static final Cons<?> INSTANCE = new Cons<>();\n","\n","    private Cons() {\n","    }\n","\n","    @Override\n","    public Iterable<A> checkedApply(A a, Iterable<A> as) {\n","        return () -> new ConsingIterator<>(a, as);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> Cons<A> cons() {\n","        return (Cons<A>) INSTANCE;\n","    }\n","\n","    public static <A> Fn1<Iterable<A>, Iterable<A>> cons(A a) {\n","        return Cons.<A>cons().apply(a);\n","    }\n","\n","    public static <A> Iterable<A> cons(A a, Iterable<A> as) {\n","        return cons(a).apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.EmptyIterableSupport;\n","import testsupport.traits.FiniteIteration;\n","import testsupport.traits.ImmutableIteration;\n","import testsupport.traits.Laziness;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Cons.cons;\n","import static java.util.Arrays.asList;\n","import static java.util.Collections.emptyList;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IterableMatcher.iterates;\n","\n","@RunWith(Traits.class)\n","public class ConsTest {\n","\n","    @TestTraits({Laziness.class, ImmutableIteration.class, FiniteIteration.class, EmptyIterableSupport.class})\n","    public Fn1<Iterable<Object>, Iterable<Object>> createTestSubject() {\n","        return cons(0);\n","    }\n","\n","    @Test\n","    public void consingElementToHeadOfIterable() {\n","        assertThat(cons(0, asList(1, 2, 3)), iterates(0, 1, 2, 3));\n","    }\n","\n","    @Test\n","    public void consingToEmptyIterable() {\n","        assertThat(cons(\"foo\", emptyList()), iterates(\"foo\"));\n","    }\n","}\n"],"method_lines_dic":{"Cons::::checkedApply(A,java.lang.Iterable<A>)":[19,22],"Cons::::cons()":[24,27],"Cons::::cons(A)":[29,31],"Cons::::cons(A,java.lang.Iterable<A>)":[33,35]},"test_method_lines_dic":{"ConsTest::::createTestSubject()":[22,25],"ConsTest::::consingElementToHeadOfIterable()":[27,30],"ConsTest::::consingToEmptyIterable()":[32,35]},"reverse_method_lines_dic":{"19":"Cons::::checkedApply(A,java.lang.Iterable<A>)","20":"Cons::::checkedApply(A,java.lang.Iterable<A>)","21":"Cons::::checkedApply(A,java.lang.Iterable<A>)","22":"Cons::::checkedApply(A,java.lang.Iterable<A>)","24":"Cons::::cons()","25":"Cons::::cons()","26":"Cons::::cons()","27":"Cons::::cons()","29":"Cons::::cons(A)","30":"Cons::::cons(A)","31":"Cons::::cons(A)","33":"Cons::::cons(A,java.lang.Iterable<A>)","34":"Cons::::cons(A,java.lang.Iterable<A>)","35":"Cons::::cons(A,java.lang.Iterable<A>)"},"test_reverse_method_lines_dic":{"22":"ConsTest::::createTestSubject()","23":"ConsTest::::createTestSubject()","24":"ConsTest::::createTestSubject()","25":"ConsTest::::createTestSubject()","27":"ConsTest::::consingElementToHeadOfIterable()","28":"ConsTest::::consingElementToHeadOfIterable()","29":"ConsTest::::consingElementToHeadOfIterable()","30":"ConsTest::::consingElementToHeadOfIterable()","32":"ConsTest::::consingToEmptyIterable()","33":"ConsTest::::consingToEmptyIterable()","34":"ConsTest::::consingToEmptyIterable()","35":"ConsTest::::consingToEmptyIterable()"},"tests":[{"test_lines":[22,25],"covered_lines":[14,16,17,26,30]},{"test_lines":[27,30],"covered_lines":[14,16,17,21,26,30,34]},{"test_lines":[32,35],"covered_lines":[14,16,17,21,26,30,34]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/LT.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.builtin.fn3.LTBy;\n","import com.jnape.palatable.lambda.functions.specialized.BiPredicate;\n","import com.jnape.palatable.lambda.functions.specialized.Predicate;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Id.id;\n","import static com.jnape.palatable.lambda.functions.builtin.fn3.LTBy.ltBy;\n","\n","/**\n"," * Given two {@link Comparable} values of type <code>A</code>, return <code>true</code> if the second value is strictly\n"," * less than the first value; otherwise, return false.\n"," *\n"," * @param <A> the value type\n"," * @see LTBy\n"," * @see GT\n"," */\n","public final class LT<A extends Comparable<A>> implements BiPredicate<A, A> {\n","\n","    private static final LT<?> INSTANCE = new LT<>();\n","\n","    private LT() {\n","    }\n","\n","    @Override\n","    public Boolean checkedApply(A y, A x) {\n","        return ltBy(id(), y, x);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A extends Comparable<A>> LT<A> lt() {\n","        return (LT<A>) INSTANCE;\n","    }\n","\n","    public static <A extends Comparable<A>> Predicate<A> lt(A y) {\n","        return LT.<A>lt().apply(y);\n","    }\n","\n","    public static <A extends Comparable<A>> Boolean lt(A y, A x) {\n","        return lt(y).apply(x);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.LT.lt;\n","import static org.junit.Assert.assertFalse;\n","import static org.junit.Assert.assertTrue;\n","\n","public class LTTest {\n","\n","    @Test\n","    public void comparisons() {\n","        assertTrue(lt(2, 1));\n","        assertFalse(lt(1, 1));\n","        assertFalse(lt(1, 2));\n","    }\n","}"],"method_lines_dic":{"LT::::checkedApply(A,A)":[25,28],"LT::::lt()":[30,33],"LT::::lt(A)":[35,37],"LT::::lt(A,A)":[39,41]},"test_method_lines_dic":{"LTTest::::comparisons()":[11,16]},"reverse_method_lines_dic":{"25":"LT::::checkedApply(A,A)","26":"LT::::checkedApply(A,A)","27":"LT::::checkedApply(A,A)","28":"LT::::checkedApply(A,A)","30":"LT::::lt()","31":"LT::::lt()","32":"LT::::lt()","33":"LT::::lt()","35":"LT::::lt(A)","36":"LT::::lt(A)","37":"LT::::lt(A)","39":"LT::::lt(A,A)","40":"LT::::lt(A,A)","41":"LT::::lt(A,A)"},"test_reverse_method_lines_dic":{"11":"LTTest::::comparisons()","12":"LTTest::::comparisons()","13":"LTTest::::comparisons()","14":"LTTest::::comparisons()","15":"LTTest::::comparisons()","16":"LTTest::::comparisons()"},"tests":[{"test_lines":[11,16],"covered_lines":[20,22,23,27,32,36,40]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/ReduceRight.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","import com.jnape.palatable.lambda.functions.builtin.fn3.FoldRight;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Reverse.reverse;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.ReduceLeft.reduceLeft;\n","\n","/**\n"," * Given an <code>{@link Iterable}&lt;A&gt;</code> and a <code>{@link Fn2}&lt;A, A, A&gt;</code>, iteratively\n"," * accumulate over the {@link Iterable}, returning <code>{@link Maybe}&lt;A&gt;</code>. If the {@link Iterable} is\n"," * empty, the result is {@link Maybe#nothing()}; otherwise, the result is wrapped in {@link Maybe#just}. For this\n"," * reason, <code>null</code> accumulation results are considered erroneous and will throw.\n"," * <p>\n"," * This function is isomorphic to a right fold over the {@link Iterable} where the tail element is the starting\n"," * accumulation value and the result is lifted into {@link Maybe}.\n"," *\n"," * @param <A> The input Iterable element type, as well as the accumulation type\n"," * @see ReduceLeft\n"," * @see FoldRight\n"," */\n","public final class ReduceRight<A> implements Fn2<Fn2<? super A, ? super A, ? extends A>, Iterable<A>, Maybe<A>> {\n","\n","    private static final ReduceRight<?> INSTANCE = new ReduceRight<>();\n","\n","    private ReduceRight() {\n","    }\n","\n","    @Override\n","    public final Maybe<A> checkedApply(Fn2<? super A, ? super A, ? extends A> fn, Iterable<A> as) {\n","        return reduceLeft((b, a) -> fn.apply(a, b), reverse(as));\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> ReduceRight<A> reduceRight() {\n","        return (ReduceRight<A>) INSTANCE;\n","    }\n","\n","    public static <A> Fn1<Iterable<A>, Maybe<A>> reduceRight(Fn2<? super A, ? super A, ? extends A> fn) {\n","        return ReduceRight.<A>reduceRight().apply(fn);\n","    }\n","\n","    public static <A> Maybe<A> reduceRight(Fn2<? super A, ? super A, ? extends A> fn, Iterable<A> as) {\n","        return ReduceRight.<A>reduceRight(fn).apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.ReduceRight.reduceRight;\n","import static java.util.Arrays.asList;\n","import static java.util.Collections.emptyList;\n","import static org.hamcrest.core.Is.is;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.functions.ExplainFold.explainFold;\n","\n","public class ReduceRightTest {\n","\n","    @Test\n","    public void accumulatesRightToLeftUsingLastElementAsStartingAccumulation() {\n","        assertThat(reduceRight(explainFold(), asList(\"1\", \"2\", \"3\", \"4\", \"5\")), is(just(\"(1 + (2 + (3 + (4 + 5))))\")));\n","    }\n","\n","    @Test\n","    public void isEmptyIfIterableIsEmpty() {\n","        assertThat(reduceRight(explainFold(), emptyList()), is(nothing()));\n","    }\n","}\n"],"method_lines_dic":{"ReduceRight::::checkedApply(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends A>,java.lang.Iterable<A>)":[31,34],"ReduceRight::::reduceRight()":[36,39],"ReduceRight::::reduceRight(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends A>)":[41,43],"ReduceRight::::reduceRight(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends A>,java.lang.Iterable<A>)":[45,47]},"test_method_lines_dic":{"ReduceRightTest::::accumulatesRightToLeftUsingLastElementAsStartingAccumulation()":[16,19],"ReduceRightTest::::isEmptyIfIterableIsEmpty()":[21,24]},"reverse_method_lines_dic":{"31":"ReduceRight::::checkedApply(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends A>,java.lang.Iterable<A>)","32":"ReduceRight::::checkedApply(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends A>,java.lang.Iterable<A>)","33":"ReduceRight::::checkedApply(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends A>,java.lang.Iterable<A>)","34":"ReduceRight::::checkedApply(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends A>,java.lang.Iterable<A>)","36":"ReduceRight::::reduceRight()","37":"ReduceRight::::reduceRight()","38":"ReduceRight::::reduceRight()","39":"ReduceRight::::reduceRight()","41":"ReduceRight::::reduceRight(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends A>)","42":"ReduceRight::::reduceRight(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends A>)","43":"ReduceRight::::reduceRight(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends A>)","45":"ReduceRight::::reduceRight(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends A>,java.lang.Iterable<A>)","46":"ReduceRight::::reduceRight(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends A>,java.lang.Iterable<A>)","47":"ReduceRight::::reduceRight(com.jnape.palatable.lambda.functions.Fn2<? super A, ? super A, ? extends A>,java.lang.Iterable<A>)"},"test_reverse_method_lines_dic":{"16":"ReduceRightTest::::accumulatesRightToLeftUsingLastElementAsStartingAccumulation()","17":"ReduceRightTest::::accumulatesRightToLeftUsingLastElementAsStartingAccumulation()","18":"ReduceRightTest::::accumulatesRightToLeftUsingLastElementAsStartingAccumulation()","19":"ReduceRightTest::::accumulatesRightToLeftUsingLastElementAsStartingAccumulation()","21":"ReduceRightTest::::isEmptyIfIterableIsEmpty()","22":"ReduceRightTest::::isEmptyIfIterableIsEmpty()","23":"ReduceRightTest::::isEmptyIfIterableIsEmpty()","24":"ReduceRightTest::::isEmptyIfIterableIsEmpty()"},"tests":[{"test_lines":[16,19],"covered_lines":[26,28,29,33,38,42,46]},{"test_lines":[21,24],"covered_lines":[26,28,29,33,38,42,46]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/AutoBracket.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","import com.jnape.palatable.lambda.functions.builtin.fn3.Bracket;\n","import com.jnape.palatable.lambda.io.IO;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn3.Bracket.bracket;\n","import static com.jnape.palatable.lambda.io.IO.io;\n","\n","/**\n"," * Given an {@link IO} yielding some {@link AutoCloseable} type <code>A</code> and a kleisli arrow from that type to a\n"," * new {@link IO} of type <code>B</code>, attempt to provision the <code>A</code>, applying the body operation if\n"," * provisioning was successful and ensuring that {@link AutoCloseable#close} is called regardless of whether the body\n"," * succeeds or fails.\n"," * <p>\n"," * This is the canonical {@link Bracket bracketing} operation for {@link AutoCloseable AutoCloseables}.\n"," *\n"," * @param <A> the initial {@link AutoCloseable} value type to map and clean up\n"," * @param <B> the resulting type\n"," * @see Bracket\n"," */\n","public final class AutoBracket<A extends AutoCloseable, B> implements\n","        Fn2<IO<A>, Fn1<? super A, ? extends IO<B>>, IO<B>> {\n","\n","    private static final AutoBracket<?, ?> INSTANCE = new AutoBracket<>();\n","\n","    private AutoBracket() {\n","    }\n","\n","    @Override\n","    public IO<B> checkedApply(IO<A> io, Fn1<? super A, ? extends IO<B>> bodyIO) {\n","        return bracket(io, a -> io(a::close), bodyIO);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A extends AutoCloseable, B> AutoBracket<A, B> autoBracket() {\n","        return (AutoBracket<A, B>) INSTANCE;\n","    }\n","\n","    public static <A extends AutoCloseable, B> Fn1<Fn1<? super A, ? extends IO<B>>, IO<B>> autoBracket(IO<A> io) {\n","        return AutoBracket.<A, B>autoBracket().apply(io);\n","    }\n","\n","    public static <A extends AutoCloseable, B> IO<B> autoBracket(IO<A> io, Fn1<? super A, ? extends IO<B>> bodyIO) {\n","        return AutoBracket.<A, B>autoBracket(io).apply(bodyIO);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.adt.Unit;\n","import com.jnape.palatable.lambda.io.IO;\n","import org.junit.Before;\n","import org.junit.Test;\n","\n","import java.util.concurrent.atomic.AtomicInteger;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.AutoBracket.autoBracket;\n","import static com.jnape.palatable.lambda.io.IO.io;\n","import static org.hamcrest.CoreMatchers.equalTo;\n","import static org.junit.Assert.assertEquals;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IOMatcher.throwsException;\n","import static testsupport.matchers.IOMatcher.yieldsValue;\n","\n","public class AutoBracketTest {\n","\n","    private AtomicInteger closedCounter;\n","    private AutoCloseable autoCloseable;\n","\n","    @Before\n","    public void setUp() {\n","        closedCounter = new AtomicInteger(0);\n","        autoCloseable = closedCounter::incrementAndGet;\n","    }\n","\n","    @Test\n","    public void closeWhenDone() {\n","        IO<Integer> bracketed = autoBracket(io(autoCloseable), closeable -> io(1));\n","\n","        assertEquals(0, closedCounter.get());\n","        assertThat(bracketed, yieldsValue(equalTo(1)));\n","        assertEquals(1, closedCounter.get());\n","    }\n","\n","    @Test\n","    public void closeOnException() {\n","        RuntimeException cause = new RuntimeException();\n","\n","        IO<Unit> bracketed = autoBracket(io(autoCloseable), closeable -> IO.throwing(cause));\n","\n","        assertEquals(0, closedCounter.get());\n","        assertThat(bracketed, throwsException(equalTo(cause)));\n","        assertEquals(1, closedCounter.get());\n","    }\n","}"],"method_lines_dic":{"AutoBracket::::checkedApply(com.jnape.palatable.lambda.io.IO<A>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.io.IO<B>>)":[31,34],"AutoBracket::::autoBracket()":[36,39],"AutoBracket::::autoBracket(com.jnape.palatable.lambda.io.IO<A>)":[41,43],"AutoBracket::::autoBracket(com.jnape.palatable.lambda.io.IO<A>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.io.IO<B>>)":[45,47]},"test_method_lines_dic":{"AutoBracketTest::::setUp()":[23,27],"AutoBracketTest::::closeWhenDone()":[29,36],"AutoBracketTest::::closeOnException()":[38,47]},"reverse_method_lines_dic":{"31":"AutoBracket::::checkedApply(com.jnape.palatable.lambda.io.IO<A>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.io.IO<B>>)","32":"AutoBracket::::checkedApply(com.jnape.palatable.lambda.io.IO<A>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.io.IO<B>>)","33":"AutoBracket::::checkedApply(com.jnape.palatable.lambda.io.IO<A>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.io.IO<B>>)","34":"AutoBracket::::checkedApply(com.jnape.palatable.lambda.io.IO<A>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.io.IO<B>>)","36":"AutoBracket::::autoBracket()","37":"AutoBracket::::autoBracket()","38":"AutoBracket::::autoBracket()","39":"AutoBracket::::autoBracket()","41":"AutoBracket::::autoBracket(com.jnape.palatable.lambda.io.IO<A>)","42":"AutoBracket::::autoBracket(com.jnape.palatable.lambda.io.IO<A>)","43":"AutoBracket::::autoBracket(com.jnape.palatable.lambda.io.IO<A>)","45":"AutoBracket::::autoBracket(com.jnape.palatable.lambda.io.IO<A>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.io.IO<B>>)","46":"AutoBracket::::autoBracket(com.jnape.palatable.lambda.io.IO<A>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.io.IO<B>>)","47":"AutoBracket::::autoBracket(com.jnape.palatable.lambda.io.IO<A>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends com.jnape.palatable.lambda.io.IO<B>>)"},"test_reverse_method_lines_dic":{"23":"AutoBracketTest::::setUp()","24":"AutoBracketTest::::setUp()","25":"AutoBracketTest::::setUp()","26":"AutoBracketTest::::setUp()","27":"AutoBracketTest::::setUp()","29":"AutoBracketTest::::closeWhenDone()","30":"AutoBracketTest::::closeWhenDone()","31":"AutoBracketTest::::closeWhenDone()","32":"AutoBracketTest::::closeWhenDone()","33":"AutoBracketTest::::closeWhenDone()","34":"AutoBracketTest::::closeWhenDone()","35":"AutoBracketTest::::closeWhenDone()","36":"AutoBracketTest::::closeWhenDone()","38":"AutoBracketTest::::closeOnException()","39":"AutoBracketTest::::closeOnException()","40":"AutoBracketTest::::closeOnException()","41":"AutoBracketTest::::closeOnException()","42":"AutoBracketTest::::closeOnException()","43":"AutoBracketTest::::closeOnException()","44":"AutoBracketTest::::closeOnException()","45":"AutoBracketTest::::closeOnException()","46":"AutoBracketTest::::closeOnException()","47":"AutoBracketTest::::closeOnException()"},"tests":[{"test_lines":[29,36],"covered_lines":[26,28,29,33,38,42,46]},{"test_lines":[38,47],"covered_lines":[26,28,29,33,38,42,46]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/Into6.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.adt.product.Product6;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","import com.jnape.palatable.lambda.functions.Fn6;\n","\n","/**\n"," * Given an <code>{@link Fn6}&lt;A, B, C, D, E, F, G&gt;</code> and a\n"," * <code>{@link Product6}&lt;A, B, C, D, E, F&gt;</code>, destructure the product and apply the slots as arguments to\n"," * the function, returning the result.\n"," *\n"," * @param <A> the first argument type\n"," * @param <B> the second argument type\n"," * @param <C> the third argument type\n"," * @param <D> the fourth argument type\n"," * @param <E> the fifth argument type\n"," * @param <F> the sixth argument type\n"," * @param <G> the result type\n"," */\n","public final class Into6<A, B, C, D, E, F, G> implements Fn2<Fn6<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? extends G>, Product6<A, B, C, D, E, F>, G> {\n","\n","    private static final Into6<?, ?, ?, ?, ?, ?, ?> INSTANCE = new Into6<>();\n","\n","    @Override\n","    public G checkedApply(Fn6<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? extends G> fn,\n","                          Product6<A, B, C, D, E, F> product) {\n","        return product.<G>into(fn);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A, B, C, D, E, F, G> Into6<A, B, C, D, E, F, G> into6() {\n","        return (Into6<A, B, C, D, E, F, G>) INSTANCE;\n","    }\n","\n","    public static <A, B, C, D, E, F, G> Fn1<Product6<A, B, C, D, E, F>, G> into6(\n","            Fn6<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? extends G> fn) {\n","        return Into6.<A, B, C, D, E, F, G>into6().apply(fn);\n","    }\n","\n","    public static <A, B, C, D, E, F, G> G into6(\n","            Fn6<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? extends G> fn,\n","            Product6<A, B, C, D, E, F> product) {\n","        return Into6.<A, B, C, D, E, F, G>into6(fn).apply(product);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Into6.into6;\n","import static org.junit.Assert.assertEquals;\n","\n","public class Into6Test {\n","\n","    @Test\n","    public void appliesTupleToFunction() {\n","        assertEquals((Integer) 21, into6((a, b, c, d, e, f) -> a + b + c + d + e + f, tuple(1, 2, 3, 4, 5, 6)));\n","    }\n","}"],"method_lines_dic":{"Into6::::checkedApply(com.jnape.palatable.lambda.functions.Fn6<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? extends G>,com.jnape.palatable.lambda.adt.product.Product6<A, B, C, D, E, F>)":[25,29],"Into6::::into6()":[31,34],"Into6::::into6(com.jnape.palatable.lambda.functions.Fn6<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? extends G>)":[36,39],"Into6::::into6(com.jnape.palatable.lambda.functions.Fn6<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? extends G>,com.jnape.palatable.lambda.adt.product.Product6<A, B, C, D, E, F>)":[41,45]},"test_method_lines_dic":{"Into6Test::::appliesTupleToFunction()":[11,14]},"reverse_method_lines_dic":{"25":"Into6::::checkedApply(com.jnape.palatable.lambda.functions.Fn6<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? extends G>,com.jnape.palatable.lambda.adt.product.Product6<A, B, C, D, E, F>)","26":"Into6::::checkedApply(com.jnape.palatable.lambda.functions.Fn6<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? extends G>,com.jnape.palatable.lambda.adt.product.Product6<A, B, C, D, E, F>)","27":"Into6::::checkedApply(com.jnape.palatable.lambda.functions.Fn6<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? extends G>,com.jnape.palatable.lambda.adt.product.Product6<A, B, C, D, E, F>)","28":"Into6::::checkedApply(com.jnape.palatable.lambda.functions.Fn6<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? extends G>,com.jnape.palatable.lambda.adt.product.Product6<A, B, C, D, E, F>)","29":"Into6::::checkedApply(com.jnape.palatable.lambda.functions.Fn6<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? extends G>,com.jnape.palatable.lambda.adt.product.Product6<A, B, C, D, E, F>)","31":"Into6::::into6()","32":"Into6::::into6()","33":"Into6::::into6()","34":"Into6::::into6()","36":"Into6::::into6(com.jnape.palatable.lambda.functions.Fn6<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? extends G>)","37":"Into6::::into6(com.jnape.palatable.lambda.functions.Fn6<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? extends G>)","38":"Into6::::into6(com.jnape.palatable.lambda.functions.Fn6<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? extends G>)","39":"Into6::::into6(com.jnape.palatable.lambda.functions.Fn6<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? extends G>)","41":"Into6::::into6(com.jnape.palatable.lambda.functions.Fn6<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? extends G>,com.jnape.palatable.lambda.adt.product.Product6<A, B, C, D, E, F>)","42":"Into6::::into6(com.jnape.palatable.lambda.functions.Fn6<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? extends G>,com.jnape.palatable.lambda.adt.product.Product6<A, B, C, D, E, F>)","43":"Into6::::into6(com.jnape.palatable.lambda.functions.Fn6<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? extends G>,com.jnape.palatable.lambda.adt.product.Product6<A, B, C, D, E, F>)","44":"Into6::::into6(com.jnape.palatable.lambda.functions.Fn6<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? extends G>,com.jnape.palatable.lambda.adt.product.Product6<A, B, C, D, E, F>)","45":"Into6::::into6(com.jnape.palatable.lambda.functions.Fn6<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? extends G>,com.jnape.palatable.lambda.adt.product.Product6<A, B, C, D, E, F>)"},"test_reverse_method_lines_dic":{"11":"Into6Test::::appliesTupleToFunction()","12":"Into6Test::::appliesTupleToFunction()","13":"Into6Test::::appliesTupleToFunction()","14":"Into6Test::::appliesTupleToFunction()"},"tests":[{"test_lines":[11,14],"covered_lines":[21,23,28,33,38,44]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/Take.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","import com.jnape.palatable.lambda.internal.iteration.TakingIterable;\n","\n","/**\n"," * Lazily limit the <code>Iterable</code> to <code>n</code> elements by returning an <code>Iterable</code> that stops\n"," * iteration after the <code>nth</code> element, or the last element of the <code>Iterable</code>, whichever comes\n"," * first.\n"," *\n"," * @param <A> The Iterable element type\n"," * @see TakeWhile\n"," * @see Drop\n"," */\n","public final class Take<A> implements Fn2<Integer, Iterable<A>, Iterable<A>> {\n","\n","    private static final Take<?> INSTANCE = new Take<>();\n","\n","    private Take() {\n","    }\n","\n","    @Override\n","    public Iterable<A> checkedApply(Integer n, Iterable<A> as) {\n","        return new TakingIterable<>(n, as);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> Take<A> take() {\n","        return (Take<A>) INSTANCE;\n","    }\n","\n","    public static <A> Fn1<Iterable<A>, Iterable<A>> take(int n) {\n","        return Take.<A>take().apply(n);\n","    }\n","\n","    public static <A> Iterable<A> take(int n, Iterable<A> as) {\n","        return Take.<A>take(n).apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.EmptyIterableSupport;\n","import testsupport.traits.FiniteIteration;\n","import testsupport.traits.ImmutableIteration;\n","import testsupport.traits.Laziness;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Take.take;\n","import static java.util.Arrays.asList;\n","import static java.util.Collections.emptyList;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IterableMatcher.iterates;\n","\n","@RunWith(Traits.class)\n","public class TakeTest {\n","\n","    @TestTraits({FiniteIteration.class, EmptyIterableSupport.class, ImmutableIteration.class, Laziness.class})\n","    public Fn1<Iterable<Object>, Iterable<Object>> createTestSubject() {\n","        return take(10);\n","    }\n","\n","    @Test\n","    public void takesElementsUpToLimit() {\n","        Iterable<String> names = asList(\"Moe\", \"Larry\", \"Curly\", \"Shemp\");\n","        assertThat(take(3, names), iterates(\"Moe\", \"Larry\", \"Curly\"));\n","    }\n","\n","    @Test\n","    public void iteratesEntireIterableIfLessElementsThanLimit() {\n","        Iterable<Integer> oneTwoThree = asList(1, 2, 3);\n","        assertThat(take(4, oneTwoThree), iterates(1, 2, 3));\n","    }\n","\n","    @Test\n","    public void takesNothingFromEmptyIterable() {\n","        assertThat(take(1, emptyList()), iterates());\n","    }\n","}\n"],"method_lines_dic":{"Take::::checkedApply(java.lang.Integer,java.lang.Iterable<A>)":[23,26],"Take::::take()":[28,31],"Take::::take(int)":[33,35],"Take::::take(int,java.lang.Iterable<A>)":[37,39]},"test_method_lines_dic":{"TakeTest::::createTestSubject()":[22,25],"TakeTest::::takesElementsUpToLimit()":[27,31],"TakeTest::::iteratesEntireIterableIfLessElementsThanLimit()":[33,37],"TakeTest::::takesNothingFromEmptyIterable()":[39,42]},"reverse_method_lines_dic":{"23":"Take::::checkedApply(java.lang.Integer,java.lang.Iterable<A>)","24":"Take::::checkedApply(java.lang.Integer,java.lang.Iterable<A>)","25":"Take::::checkedApply(java.lang.Integer,java.lang.Iterable<A>)","26":"Take::::checkedApply(java.lang.Integer,java.lang.Iterable<A>)","28":"Take::::take()","29":"Take::::take()","30":"Take::::take()","31":"Take::::take()","33":"Take::::take(int)","34":"Take::::take(int)","35":"Take::::take(int)","37":"Take::::take(int,java.lang.Iterable<A>)","38":"Take::::take(int,java.lang.Iterable<A>)","39":"Take::::take(int,java.lang.Iterable<A>)"},"test_reverse_method_lines_dic":{"22":"TakeTest::::createTestSubject()","23":"TakeTest::::createTestSubject()","24":"TakeTest::::createTestSubject()","25":"TakeTest::::createTestSubject()","27":"TakeTest::::takesElementsUpToLimit()","28":"TakeTest::::takesElementsUpToLimit()","29":"TakeTest::::takesElementsUpToLimit()","30":"TakeTest::::takesElementsUpToLimit()","31":"TakeTest::::takesElementsUpToLimit()","33":"TakeTest::::iteratesEntireIterableIfLessElementsThanLimit()","34":"TakeTest::::iteratesEntireIterableIfLessElementsThanLimit()","35":"TakeTest::::iteratesEntireIterableIfLessElementsThanLimit()","36":"TakeTest::::iteratesEntireIterableIfLessElementsThanLimit()","37":"TakeTest::::iteratesEntireIterableIfLessElementsThanLimit()","39":"TakeTest::::takesNothingFromEmptyIterable()","40":"TakeTest::::takesNothingFromEmptyIterable()","41":"TakeTest::::takesNothingFromEmptyIterable()","42":"TakeTest::::takesNothingFromEmptyIterable()"},"tests":[{"test_lines":[22,25],"covered_lines":[18,20,21,30,34]},{"test_lines":[27,31],"covered_lines":[18,20,21,25,30,34,38]},{"test_lines":[33,37],"covered_lines":[18,20,21,25,30,34,38]},{"test_lines":[39,42],"covered_lines":[18,20,21,25,30,34,38]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/Both.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.adt.hlist.Tuple2;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn3;\n","\n","/**\n"," * Given two functions <code>f</code> and <code>g</code>, produce a\n"," * <code>{@link Fn1}&lt;A, {@link Tuple2}&lt;B, C&gt;&gt;</code> (the dual application of both functions).\n"," *\n"," * @param <A> both function's input type\n"," * @param <B> the first function return type\n"," * @param <C> the second function return type\n"," */\n","public final class Both<A, B, C> implements\n","        Fn3<Fn1<? super A, ? extends B>, Fn1<? super A, ? extends C>, A, Tuple2<B, C>> {\n","\n","    private static final Both<?, ?, ?> INSTANCE = new Both<>();\n","\n","    private Both() {\n","    }\n","\n","    @Override\n","    public Tuple2<B, C> checkedApply(Fn1<? super A, ? extends B> f, Fn1<? super A, ? extends C> g, A a) {\n","        return Tuple2.fill(a).biMap(f::apply, g::apply);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A, B, C> Both<A, B, C> both() {\n","        return (Both<A, B, C>) INSTANCE;\n","    }\n","\n","    public static <A, B, C> Fn1<Fn1<? super A, ? extends C>, Fn1<A, Tuple2<B, C>>> both(Fn1<? super A, ? extends B> f) {\n","        return Both.<A, B, C>both().apply(f);\n","    }\n","\n","    public static <A, B, C> Fn1<A, Tuple2<B, C>> both(Fn1<? super A, ? extends B> f, Fn1<? super A, ? extends C> g) {\n","        return Both.<A, B, C>both(f).apply(g);\n","    }\n","\n","    public static <A, B, C> Tuple2<B, C> both(Fn1<? super A, ? extends B> f, Fn1<? super A, ? extends C> g, A a) {\n","        return Both.<A, B, C>both(f, g).apply(a);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Both.both;\n","import static org.junit.Assert.assertEquals;\n","\n","public class BothTest {\n","\n","    @Test\n","    public void duallyAppliesTwoFunctionsToSameInput() {\n","        assertEquals(tuple(1, -1), both(x -> x + 1, x -> x - 1, 0));\n","    }\n","}"],"method_lines_dic":{"Both::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>,A)":[23,26],"Both::::both()":[28,31],"Both::::both(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)":[33,35],"Both::::both(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>)":[37,39],"Both::::both(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>,A)":[41,43]},"test_method_lines_dic":{"BothTest::::duallyAppliesTwoFunctionsToSameInput()":[11,14]},"reverse_method_lines_dic":{"23":"Both::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>,A)","24":"Both::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>,A)","25":"Both::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>,A)","26":"Both::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>,A)","28":"Both::::both()","29":"Both::::both()","30":"Both::::both()","31":"Both::::both()","33":"Both::::both(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","34":"Both::::both(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","35":"Both::::both(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","37":"Both::::both(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>)","38":"Both::::both(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>)","39":"Both::::both(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>)","41":"Both::::both(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>,A)","42":"Both::::both(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>,A)","43":"Both::::both(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends C>,A)"},"test_reverse_method_lines_dic":{"11":"BothTest::::duallyAppliesTwoFunctionsToSameInput()","12":"BothTest::::duallyAppliesTwoFunctionsToSameInput()","13":"BothTest::::duallyAppliesTwoFunctionsToSameInput()","14":"BothTest::::duallyAppliesTwoFunctionsToSameInput()"},"tests":[{"test_lines":[11,14],"covered_lines":[18,20,21,25,30,34,38,42]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/GTE.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.builtin.fn3.GTEBy;\n","import com.jnape.palatable.lambda.functions.specialized.BiPredicate;\n","import com.jnape.palatable.lambda.functions.specialized.Predicate;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Id.id;\n","import static com.jnape.palatable.lambda.functions.builtin.fn3.GTEBy.gteBy;\n","\n","/**\n"," * Given two {@link Comparable} values of type <code>A</code>, return <code>true</code> if the second value is greater\n"," * than or equal to the first value according to {@link Comparable#compareTo(Object)}; otherwise, return false.\n"," *\n"," * @param <A> the value type\n"," * @see GTEBy\n"," * @see LTE\n"," */\n","public final class GTE<A extends Comparable<A>> implements BiPredicate<A, A> {\n","\n","    private static final GTE<?> INSTANCE = new GTE<>();\n","\n","    private GTE() {\n","    }\n","\n","    @Override\n","    public Boolean checkedApply(A y, A x) {\n","        return gteBy(id(), y, x);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A extends Comparable<A>> GTE<A> gte() {\n","        return (GTE<A>) INSTANCE;\n","    }\n","\n","    public static <A extends Comparable<A>> Predicate<A> gte(A y) {\n","        return GTE.<A>gte().apply(y);\n","    }\n","\n","    public static <A extends Comparable<A>> Boolean gte(A y, A x) {\n","        return gte(y).apply(x);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.GTE.gte;\n","import static org.junit.Assert.assertFalse;\n","import static org.junit.Assert.assertTrue;\n","\n","public class GTETest {\n","\n","    @Test\n","    public void comparisons() {\n","        assertTrue(gte(1, 2));\n","        assertTrue(gte(1, 1));\n","        assertFalse(gte(2, 1));\n","    }\n","}"],"method_lines_dic":{"GTE::::checkedApply(A,A)":[25,28],"GTE::::gte()":[30,33],"GTE::::gte(A)":[35,37],"GTE::::gte(A,A)":[39,41]},"test_method_lines_dic":{"GTETest::::comparisons()":[11,16]},"reverse_method_lines_dic":{"25":"GTE::::checkedApply(A,A)","26":"GTE::::checkedApply(A,A)","27":"GTE::::checkedApply(A,A)","28":"GTE::::checkedApply(A,A)","30":"GTE::::gte()","31":"GTE::::gte()","32":"GTE::::gte()","33":"GTE::::gte()","35":"GTE::::gte(A)","36":"GTE::::gte(A)","37":"GTE::::gte(A)","39":"GTE::::gte(A,A)","40":"GTE::::gte(A,A)","41":"GTE::::gte(A,A)"},"test_reverse_method_lines_dic":{"11":"GTETest::::comparisons()","12":"GTETest::::comparisons()","13":"GTETest::::comparisons()","14":"GTETest::::comparisons()","15":"GTETest::::comparisons()","16":"GTETest::::comparisons()"},"tests":[{"test_lines":[11,16],"covered_lines":[20,22,23,27,32,36,40]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/Find.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.adt.Maybe;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Head.head;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Not.not;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.DropWhile.dropWhile;\n","\n","/**\n"," * Iterate the elements in an <code>Iterable</code>, applying a predicate to each one, returning the first element that\n"," * matches the predicate, wrapped in a {@link Maybe}. If no elements match the predicate, the result is\n"," * {@link Maybe#nothing()}. This function short-circuits, and so is safe to use on potentially infinite {@link Iterable}\n"," * instances that guarantee to have an eventually matching element.\n"," *\n"," * @param <A> the Iterable element type\n"," */\n","public final class Find<A> implements Fn2<Fn1<? super A, ? extends Boolean>, Iterable<A>, Maybe<A>> {\n","\n","    private static final Find<?> INSTANCE = new Find<>();\n","\n","    private Find() {\n","    }\n","\n","    @Override\n","    public Maybe<A> checkedApply(Fn1<? super A, ? extends Boolean> predicate, Iterable<A> as) {\n","        return head(dropWhile(not(predicate), as));\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> Find<A> find() {\n","        return (Find<A>) INSTANCE;\n","    }\n","\n","    public static <A> Fn1<Iterable<A>, Maybe<A>> find(Fn1<? super A, ? extends Boolean> predicate) {\n","        return Find.<A>find().apply(predicate);\n","    }\n","\n","    public static <A> Maybe<A> find(Fn1<? super A, ? extends Boolean> predicate, Iterable<A> as) {\n","        return Find.<A>find(predicate).apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.adt.Maybe.nothing;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Find.find;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.Iterate.iterate;\n","import static java.util.Arrays.asList;\n","import static org.junit.Assert.assertEquals;\n","\n","public class FindTest {\n","\n","    @Test\n","    public void findsFirstElementMatchingPredicate() {\n","        assertEquals(just(\"three\"), find(s -> s.length() > 3, asList(\"one\", \"two\", \"three\", \"four\")));\n","    }\n","\n","    @Test\n","    public void isEmptyIfNoElementsMatchPredicate() {\n","        assertEquals(nothing(), find(s -> s.length() > 5, asList(\"one\", \"two\", \"three\", \"four\")));\n","    }\n","\n","    @Test\n","    public void shortCircuitsOnMatch() {\n","        assertEquals(just(0), find(constantly(true), iterate(x -> x + 1, 0)));\n","    }\n","}"],"method_lines_dic":{"Find::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)":[26,29],"Find::::find()":[31,34],"Find::::find(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)":[36,38],"Find::::find(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)":[40,42]},"test_method_lines_dic":{"FindTest::::findsFirstElementMatchingPredicate()":[15,18],"FindTest::::isEmptyIfNoElementsMatchPredicate()":[20,23],"FindTest::::shortCircuitsOnMatch()":[25,28]},"reverse_method_lines_dic":{"26":"Find::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","27":"Find::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","28":"Find::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","29":"Find::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","31":"Find::::find()","32":"Find::::find()","33":"Find::::find()","34":"Find::::find()","36":"Find::::find(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)","37":"Find::::find(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)","38":"Find::::find(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)","40":"Find::::find(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","41":"Find::::find(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","42":"Find::::find(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)"},"test_reverse_method_lines_dic":{"15":"FindTest::::findsFirstElementMatchingPredicate()","16":"FindTest::::findsFirstElementMatchingPredicate()","17":"FindTest::::findsFirstElementMatchingPredicate()","18":"FindTest::::findsFirstElementMatchingPredicate()","20":"FindTest::::isEmptyIfNoElementsMatchPredicate()","21":"FindTest::::isEmptyIfNoElementsMatchPredicate()","22":"FindTest::::isEmptyIfNoElementsMatchPredicate()","23":"FindTest::::isEmptyIfNoElementsMatchPredicate()","25":"FindTest::::shortCircuitsOnMatch()","26":"FindTest::::shortCircuitsOnMatch()","27":"FindTest::::shortCircuitsOnMatch()","28":"FindTest::::shortCircuitsOnMatch()"},"tests":[{"test_lines":[15,18],"covered_lines":[21,23,24,28,33,37,41]},{"test_lines":[20,23],"covered_lines":[21,23,24,28,33,37,41]},{"test_lines":[25,28],"covered_lines":[21,23,24,28,33,37,41]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn2/All.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.specialized.BiPredicate;\n","\n","/**\n"," * Eagerly apply a predicate to each element in an <code>Iterable</code>, returning <code>true</code> if every element\n"," * satisfies the predicate, and <code>false</code> otherwise. This method short-circuits on the first <code>false</code>\n"," * evaluation.\n"," *\n"," * @param <A> The input Iterable element type\n"," * @see Any\n"," */\n","public final class All<A> implements BiPredicate<Fn1<? super A, ? extends Boolean>, Iterable<A>> {\n","\n","    private static final All<?> INSTANCE = new All<>();\n","\n","    private All() {\n","    }\n","\n","    @Override\n","    public Boolean checkedApply(Fn1<? super A, ? extends Boolean> predicate, Iterable<A> as) {\n","        for (A a : as)\n","            if (!predicate.apply(a))\n","                return false;\n","\n","        return true;\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> All<A> all() {\n","        return (All<A>) INSTANCE;\n","    }\n","\n","    public static <A> Fn1<Iterable<A>, ? extends Boolean> all(Fn1<? super A, ? extends Boolean> predicate) {\n","        return All.<A>all().apply(predicate);\n","    }\n","\n","    public static <A> Boolean all(Fn1<? super A, ? extends Boolean> predicate, Iterable<A> as) {\n","        return All.<A>all(predicate).apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn2;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.traits.EmptyIterableSupport;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Constantly.constantly;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Repeat.repeat;\n","import static com.jnape.palatable.lambda.functions.builtin.fn2.All.all;\n","import static java.util.Arrays.asList;\n","import static org.hamcrest.core.Is.is;\n","import static org.junit.Assert.assertThat;\n","\n","@RunWith(Traits.class)\n","public class AllTest {\n","\n","    private static final Fn1<? super Number, ? extends Boolean> EVEN = x -> x.doubleValue() % 2 == 0;\n","\n","    @TestTraits({EmptyIterableSupport.class})\n","    public Fn1<Iterable<Object>, ? extends Boolean> createTestSubject() {\n","        return all(constantly(true));\n","    }\n","\n","    @Test\n","    public void trueIfAllElementsMatchPredicate() {\n","        assertThat(all(EVEN, asList(2, 4, 6, 8)), is(true));\n","    }\n","\n","    @Test\n","    public void falseIfAnyElementsFailPredicate() {\n","        assertThat(all(EVEN, asList(1, 2, 4, 6, 8)), is(false));\n","    }\n","\n","    @Test\n","    public void terminatesIterationImmediatelyUponPredicateFailure() {\n","        assertThat(all(EVEN, repeat(1)), is(false));\n","    }\n","}\n"],"method_lines_dic":{"All::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)":[21,28],"All::::all()":[30,33],"All::::all(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)":[35,37],"All::::all(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)":[39,41]},"test_method_lines_dic":{"AllTest::::createTestSubject()":[22,25],"AllTest::::trueIfAllElementsMatchPredicate()":[27,30],"AllTest::::falseIfAnyElementsFailPredicate()":[32,35],"AllTest::::terminatesIterationImmediatelyUponPredicateFailure()":[37,40]},"reverse_method_lines_dic":{"21":"All::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","22":"All::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","23":"All::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","24":"All::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","25":"All::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","26":"All::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","27":"All::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","28":"All::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","30":"All::::all()","31":"All::::all()","32":"All::::all()","33":"All::::all()","35":"All::::all(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)","36":"All::::all(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)","37":"All::::all(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)","39":"All::::all(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","40":"All::::all(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)","41":"All::::all(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,java.lang.Iterable<A>)"},"test_reverse_method_lines_dic":{"22":"AllTest::::createTestSubject()","23":"AllTest::::createTestSubject()","24":"AllTest::::createTestSubject()","25":"AllTest::::createTestSubject()","27":"AllTest::::trueIfAllElementsMatchPredicate()","28":"AllTest::::trueIfAllElementsMatchPredicate()","29":"AllTest::::trueIfAllElementsMatchPredicate()","30":"AllTest::::trueIfAllElementsMatchPredicate()","32":"AllTest::::falseIfAnyElementsFailPredicate()","33":"AllTest::::falseIfAnyElementsFailPredicate()","34":"AllTest::::falseIfAnyElementsFailPredicate()","35":"AllTest::::falseIfAnyElementsFailPredicate()","37":"AllTest::::terminatesIterationImmediatelyUponPredicateFailure()","38":"AllTest::::terminatesIterationImmediatelyUponPredicateFailure()","39":"AllTest::::terminatesIterationImmediatelyUponPredicateFailure()","40":"AllTest::::terminatesIterationImmediatelyUponPredicateFailure()"},"tests":[{"test_lines":[22,25],"covered_lines":[16,18,19,32,36]},{"test_lines":[27,30],"covered_lines":[16,18,19,23,24,27,32,36,40]},{"test_lines":[32,35],"covered_lines":[16,18,19,23,24,25,32,36,40]},{"test_lines":[37,40],"covered_lines":[16,18,19,23,24,25,32,36,40]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn4/IfThenElse.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn4;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","import com.jnape.palatable.lambda.functions.Fn3;\n","import com.jnape.palatable.lambda.functions.Fn4;\n","\n","public final class IfThenElse<A, B> implements\n","        Fn4<Fn1<? super A, ? extends Boolean>, Fn1<? super A, ? extends B>, Fn1<? super A, ? extends B>, A, B> {\n","\n","    private static final IfThenElse<?, ?> INSTANCE = new IfThenElse<>();\n","\n","    private IfThenElse() {\n","    }\n","\n","    @Override\n","    public B checkedApply(Fn1<? super A, ? extends Boolean> predicate, Fn1<? super A, ? extends B> thenCase,\n","                          Fn1<? super A, ? extends B> elseCase, A a) {\n","        return predicate.apply(a) ? thenCase.apply(a) : elseCase.apply(a);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A, B> IfThenElse<A, B> ifThenElse() {\n","        return (IfThenElse<A, B>) INSTANCE;\n","    }\n","\n","    public static <A, B> Fn3<Fn1<? super A, ? extends B>, Fn1<? super A, ? extends B>, A, B> ifThenElse(\n","            Fn1<? super A, ? extends Boolean> predicate) {\n","        return IfThenElse.<A, B>ifThenElse().apply(predicate);\n","    }\n","\n","    public static <A, B> Fn2<Fn1<? super A, ? extends B>, A, B> ifThenElse(Fn1<? super A, ? extends Boolean> predicate,\n","                                                                           Fn1<? super A, ? extends B> thenCase) {\n","        return IfThenElse.<A, B>ifThenElse(predicate).apply(thenCase);\n","    }\n","\n","    public static <A, B> Fn1<A, B> ifThenElse(Fn1<? super A, ? extends Boolean> predicate,\n","                                              Fn1<? super A, ? extends B> thenCase,\n","                                              Fn1<? super A, ? extends B> elseCase) {\n","        return IfThenElse.<A, B>ifThenElse(predicate, thenCase).apply(elseCase);\n","    }\n","\n","    public static <A, B> B ifThenElse(Fn1<? super A, ? extends Boolean> predicate, Fn1<? super A, ? extends B> thenCase,\n","                                      Fn1<? super A, ? extends B> elseCase, A a) {\n","        return ifThenElse(predicate, thenCase, elseCase).apply(a);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn4;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.specialized.Predicate;\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.functions.builtin.fn4.IfThenElse.ifThenElse;\n","import static org.junit.Assert.assertEquals;\n","\n","public class IfThenElseTest {\n","\n","    @Test\n","    public void standardLogic() {\n","        Predicate<Integer>    even = x -> x % 2 == 0;\n","        Fn1<Integer, Integer> inc  = x -> x + 1;\n","        Fn1<Integer, Integer> dec  = x -> x - 1;\n","\n","        assertEquals((Integer) 3, ifThenElse(even, inc, dec, 2));\n","        assertEquals((Integer) 0, ifThenElse(even, inc, dec, 1));\n","    }\n","}"],"method_lines_dic":{"IfThenElse::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,A)":[16,20],"IfThenElse::::ifThenElse()":[22,25],"IfThenElse::::ifThenElse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)":[27,30],"IfThenElse::::ifThenElse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)":[32,35],"IfThenElse::::ifThenElse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)":[37,41],"IfThenElse::::ifThenElse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,A)":[43,46]},"test_method_lines_dic":{"IfThenElseTest::::standardLogic()":[12,20]},"reverse_method_lines_dic":{"16":"IfThenElse::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,A)","17":"IfThenElse::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,A)","18":"IfThenElse::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,A)","19":"IfThenElse::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,A)","20":"IfThenElse::::checkedApply(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,A)","22":"IfThenElse::::ifThenElse()","23":"IfThenElse::::ifThenElse()","24":"IfThenElse::::ifThenElse()","25":"IfThenElse::::ifThenElse()","27":"IfThenElse::::ifThenElse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)","28":"IfThenElse::::ifThenElse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)","29":"IfThenElse::::ifThenElse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)","30":"IfThenElse::::ifThenElse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>)","32":"IfThenElse::::ifThenElse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","33":"IfThenElse::::ifThenElse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","34":"IfThenElse::::ifThenElse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","35":"IfThenElse::::ifThenElse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","37":"IfThenElse::::ifThenElse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","38":"IfThenElse::::ifThenElse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","39":"IfThenElse::::ifThenElse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","40":"IfThenElse::::ifThenElse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","41":"IfThenElse::::ifThenElse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>)","43":"IfThenElse::::ifThenElse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,A)","44":"IfThenElse::::ifThenElse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,A)","45":"IfThenElse::::ifThenElse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,A)","46":"IfThenElse::::ifThenElse(com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends java.lang.Boolean>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,com.jnape.palatable.lambda.functions.Fn1<? super A, ? extends B>,A)"},"test_reverse_method_lines_dic":{"12":"IfThenElseTest::::standardLogic()","13":"IfThenElseTest::::standardLogic()","14":"IfThenElseTest::::standardLogic()","15":"IfThenElseTest::::standardLogic()","16":"IfThenElseTest::::standardLogic()","17":"IfThenElseTest::::standardLogic()","18":"IfThenElseTest::::standardLogic()","19":"IfThenElseTest::::standardLogic()","20":"IfThenElseTest::::standardLogic()"},"tests":[{"test_lines":[12,20],"covered_lines":[11,13,14,19,24,29,34,40,45]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn4/RateLimit.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn4;\n","\n","import com.jnape.palatable.lambda.functions.Fn0;\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","import com.jnape.palatable.lambda.functions.Fn3;\n","import com.jnape.palatable.lambda.functions.Fn4;\n","import com.jnape.palatable.lambda.internal.iteration.IterationInterruptedException;\n","import com.jnape.palatable.lambda.internal.iteration.RateLimitingIterable;\n","\n","import java.time.Duration;\n","import java.time.Instant;\n","\n","import static com.jnape.palatable.lambda.adt.hlist.HList.tuple;\n","import static java.util.Collections.singleton;\n","\n","/**\n"," * Given an {@link Fn0} of {@link Instant Instants} (presumably backed by a clock), a <code>limit</code>, a\n"," * {@link Duration}, and an {@link Iterable} <code>as</code>, return an {@link Iterable} that iterates <code>as</code>\n"," * according to the threshold specified by the limit per duration, using the {@link Fn0} to advance time.\n"," * <p>\n"," * As an example, the following will print at most 10 elements per second:\n"," * <pre><code>\n"," * rateLimit(Clock.systemUTC()::instant, 10L, Duration.ofSeconds(1), iterate(x -&gt; x + 1, 1))\n"," *     .forEach(System.out::println);\n"," * </code></pre>\n"," * Currying allows different rate limits to be combined naturally:\n"," * <pre><code>\n"," * Iterable&lt;Integer&gt; elements = iterate(x -&gt; x + 1, 1);\n"," *\n"," * Supplier&lt;Instant&gt; instantFn0 = Clock.systemUTC()::instant;\n"," * Fn1&lt;Iterable&lt;Integer&gt;, Iterable&lt;Integer&gt;&gt; tenPerSecond =\n"," *     rateLimit(instantFn0, 10L, Duration.ofSeconds(1));\n"," * Fn1&lt;Iterable&lt;Integer&gt;, Iterable&lt;Integer&gt;&gt; oneHundredEveryTwoMinutes =\n"," *     rateLimit(instantFn0, 100L, Duration.ofMinutes(2));\n"," *\n"," * tenPerSecond.fmap(oneHundredEveryTwoMinutes).apply(elements).forEach(System.out::println);\n"," * </code></pre>\n"," * In the preceding example, the elements will be printed at most 10 elements per second and 100 elements per 120\n"," * seconds.\n"," * <p>\n"," * If the host {@link Thread} is {@link Thread#interrupt() interrupted} while the returned {@link Iterable} is waiting\n"," * for the next available time slice, an {@link IterationInterruptedException} will immediately be thrown.\n"," * <p>\n"," * Note that the returned {@link Iterable} will never iterate faster than the specified rate limit, but the earliest\n"," * the next element is available will be dependent on the precision of the underlying instant supplier as well as any\n"," * overhead involved in producing the element from the original {@link Iterable}.\n"," *\n"," * @param <A> the {@link Iterable} element type\n"," */\n","public final class RateLimit<A> implements Fn4<Fn0<Instant>, Long, Duration, Iterable<A>, Iterable<A>> {\n","\n","    private static final RateLimit<?> INSTANCE = new RateLimit<>();\n","\n","    private RateLimit() {\n","    }\n","\n","    @Override\n","    public Iterable<A> checkedApply(Fn0<Instant> instantFn0, Long limit, Duration duration, Iterable<A> as) {\n","        if (limit < 1)\n","            throw new IllegalArgumentException(\"Limit must be greater than 0: \" + limit);\n","\n","        return new RateLimitingIterable<>(as, singleton(tuple(limit, duration, instantFn0)));\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A> RateLimit<A> rateLimit() {\n","        return (RateLimit<A>) INSTANCE;\n","    }\n","\n","    public static <A> Fn3<Long, Duration, Iterable<A>, Iterable<A>> rateLimit(Fn0<Instant> instantFn0) {\n","        return RateLimit.<A>rateLimit().apply(instantFn0);\n","    }\n","\n","    public static <A> Fn2<Duration, Iterable<A>, Iterable<A>> rateLimit(Fn0<Instant> instantFn0, Long limit) {\n","        return RateLimit.<A>rateLimit(instantFn0).apply(limit);\n","    }\n","\n","    public static <A> Fn1<Iterable<A>, Iterable<A>> rateLimit(Fn0<Instant> instantFn0, Long limit, Duration duration) {\n","        return RateLimit.<A>rateLimit(instantFn0, limit).apply(duration);\n","    }\n","\n","    public static <A> Iterable<A> rateLimit(Fn0<Instant> instantFn0, Long limit, Duration duration, Iterable<A> as) {\n","        return RateLimit.<A>rateLimit(instantFn0, limit, duration).apply(as);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn4;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.internal.iteration.IterationInterruptedException;\n","import com.jnape.palatable.traitor.annotations.TestTraits;\n","import com.jnape.palatable.traitor.runners.Traits;\n","import org.junit.Before;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import testsupport.time.InstantRecordingClock;\n","import testsupport.traits.Deforesting;\n","import testsupport.traits.EmptyIterableSupport;\n","import testsupport.traits.InfiniteIterableSupport;\n","import testsupport.traits.Laziness;\n","\n","import java.time.Duration;\n","import java.util.concurrent.CountDownLatch;\n","\n","import static com.jnape.palatable.lambda.adt.Try.trying;\n","import static com.jnape.palatable.lambda.functions.builtin.fn1.Repeat.repeat;\n","import static com.jnape.palatable.lambda.functions.builtin.fn4.RateLimit.rateLimit;\n","import static com.jnape.palatable.lambda.functions.specialized.SideEffect.sideEffect;\n","import static java.time.Clock.systemUTC;\n","import static java.time.Duration.ZERO;\n","import static java.util.Arrays.asList;\n","import static java.util.Collections.emptyList;\n","import static org.junit.Assert.assertThat;\n","import static testsupport.matchers.IterableMatcher.iterates;\n","import static testsupport.matchers.RateLimitedIterationMatcher.iteratesAccordingToRateLimit;\n","\n","@RunWith(Traits.class)\n","public class RateLimitTest {\n","\n","    private InstantRecordingClock clock;\n","\n","    @Before\n","    public void setUp() throws Exception {\n","        clock = new InstantRecordingClock(systemUTC());\n","    }\n","\n","    @TestTraits({Laziness.class, InfiniteIterableSupport.class, EmptyIterableSupport.class, Deforesting.class})\n","    public Fn1<Iterable<Object>, Iterable<Object>> testSubject() {\n","        return rateLimit(systemUTC()::instant, 1L, ZERO);\n","    }\n","\n","    @Test(expected = IllegalArgumentException.class)\n","    public void lessThanOneLimitIsInvalid() {\n","        rateLimit(clock::instant, 0L, ZERO, emptyList());\n","    }\n","\n","    @Test\n","    public void zeroDurationJustIteratesElements() {\n","        assertThat(rateLimit(clock::instant, 1L, ZERO, asList(1, 2, 3)), iterates(1, 2, 3));\n","    }\n","\n","    @Test\n","    public void limitPerDurationIsHonoredAccordingToClock() {\n","        Duration duration = Duration.ofMillis(10);\n","        long     limit    = 2L;\n","        assertThat(rateLimit(clock::instant, limit, duration, asList(1, 2, 3, 4)),\n","                   iteratesAccordingToRateLimit(limit, duration, asList(1, 2, 3, 4), clock));\n","    }\n","\n","    @Test(timeout = 100, expected = IterationInterruptedException.class)\n","    public void rateLimitingDelayIsInterruptible() throws InterruptedException {\n","        Thread         testThread = Thread.currentThread();\n","        CountDownLatch latch      = new CountDownLatch(1);\n","        new Thread(() -> {\n","            trying(sideEffect(latch::await)).orThrow();\n","            testThread.interrupt();\n","        }) {{\n","            start();\n","        }};\n","\n","        rateLimit(clock::instant, 1L, Duration.ofSeconds(1), repeat(1)).forEach(xs -> latch.countDown());\n","    }\n","}"],"method_lines_dic":{"RateLimit::::checkedApply(com.jnape.palatable.lambda.functions.Fn0<java.time.Instant>,java.lang.Long,java.time.Duration,java.lang.Iterable<A>)":[58,64],"RateLimit::::rateLimit()":[66,69],"RateLimit::::rateLimit(com.jnape.palatable.lambda.functions.Fn0<java.time.Instant>)":[71,73],"RateLimit::::rateLimit(com.jnape.palatable.lambda.functions.Fn0<java.time.Instant>,java.lang.Long)":[75,77],"RateLimit::::rateLimit(com.jnape.palatable.lambda.functions.Fn0<java.time.Instant>,java.lang.Long,java.time.Duration)":[79,81],"RateLimit::::rateLimit(com.jnape.palatable.lambda.functions.Fn0<java.time.Instant>,java.lang.Long,java.time.Duration,java.lang.Iterable<A>)":[83,85]},"test_method_lines_dic":{"RateLimitTest::::setUp()":[36,39],"RateLimitTest::::testSubject()":[41,44],"RateLimitTest::::lessThanOneLimitIsInvalid()":[46,49],"RateLimitTest::::zeroDurationJustIteratesElements()":[51,54],"RateLimitTest::::limitPerDurationIsHonoredAccordingToClock()":[56,62],"RateLimitTest::::rateLimitingDelayIsInterruptible()":[64,76]},"reverse_method_lines_dic":{"58":"RateLimit::::checkedApply(com.jnape.palatable.lambda.functions.Fn0<java.time.Instant>,java.lang.Long,java.time.Duration,java.lang.Iterable<A>)","59":"RateLimit::::checkedApply(com.jnape.palatable.lambda.functions.Fn0<java.time.Instant>,java.lang.Long,java.time.Duration,java.lang.Iterable<A>)","60":"RateLimit::::checkedApply(com.jnape.palatable.lambda.functions.Fn0<java.time.Instant>,java.lang.Long,java.time.Duration,java.lang.Iterable<A>)","61":"RateLimit::::checkedApply(com.jnape.palatable.lambda.functions.Fn0<java.time.Instant>,java.lang.Long,java.time.Duration,java.lang.Iterable<A>)","62":"RateLimit::::checkedApply(com.jnape.palatable.lambda.functions.Fn0<java.time.Instant>,java.lang.Long,java.time.Duration,java.lang.Iterable<A>)","63":"RateLimit::::checkedApply(com.jnape.palatable.lambda.functions.Fn0<java.time.Instant>,java.lang.Long,java.time.Duration,java.lang.Iterable<A>)","64":"RateLimit::::checkedApply(com.jnape.palatable.lambda.functions.Fn0<java.time.Instant>,java.lang.Long,java.time.Duration,java.lang.Iterable<A>)","66":"RateLimit::::rateLimit()","67":"RateLimit::::rateLimit()","68":"RateLimit::::rateLimit()","69":"RateLimit::::rateLimit()","71":"RateLimit::::rateLimit(com.jnape.palatable.lambda.functions.Fn0<java.time.Instant>)","72":"RateLimit::::rateLimit(com.jnape.palatable.lambda.functions.Fn0<java.time.Instant>)","73":"RateLimit::::rateLimit(com.jnape.palatable.lambda.functions.Fn0<java.time.Instant>)","75":"RateLimit::::rateLimit(com.jnape.palatable.lambda.functions.Fn0<java.time.Instant>,java.lang.Long)","76":"RateLimit::::rateLimit(com.jnape.palatable.lambda.functions.Fn0<java.time.Instant>,java.lang.Long)","77":"RateLimit::::rateLimit(com.jnape.palatable.lambda.functions.Fn0<java.time.Instant>,java.lang.Long)","79":"RateLimit::::rateLimit(com.jnape.palatable.lambda.functions.Fn0<java.time.Instant>,java.lang.Long,java.time.Duration)","80":"RateLimit::::rateLimit(com.jnape.palatable.lambda.functions.Fn0<java.time.Instant>,java.lang.Long,java.time.Duration)","81":"RateLimit::::rateLimit(com.jnape.palatable.lambda.functions.Fn0<java.time.Instant>,java.lang.Long,java.time.Duration)","83":"RateLimit::::rateLimit(com.jnape.palatable.lambda.functions.Fn0<java.time.Instant>,java.lang.Long,java.time.Duration,java.lang.Iterable<A>)","84":"RateLimit::::rateLimit(com.jnape.palatable.lambda.functions.Fn0<java.time.Instant>,java.lang.Long,java.time.Duration,java.lang.Iterable<A>)","85":"RateLimit::::rateLimit(com.jnape.palatable.lambda.functions.Fn0<java.time.Instant>,java.lang.Long,java.time.Duration,java.lang.Iterable<A>)"},"test_reverse_method_lines_dic":{"36":"RateLimitTest::::setUp()","37":"RateLimitTest::::setUp()","38":"RateLimitTest::::setUp()","39":"RateLimitTest::::setUp()","41":"RateLimitTest::::testSubject()","42":"RateLimitTest::::testSubject()","43":"RateLimitTest::::testSubject()","44":"RateLimitTest::::testSubject()","46":"RateLimitTest::::lessThanOneLimitIsInvalid()","47":"RateLimitTest::::lessThanOneLimitIsInvalid()","48":"RateLimitTest::::lessThanOneLimitIsInvalid()","49":"RateLimitTest::::lessThanOneLimitIsInvalid()","51":"RateLimitTest::::zeroDurationJustIteratesElements()","52":"RateLimitTest::::zeroDurationJustIteratesElements()","53":"RateLimitTest::::zeroDurationJustIteratesElements()","54":"RateLimitTest::::zeroDurationJustIteratesElements()","56":"RateLimitTest::::limitPerDurationIsHonoredAccordingToClock()","57":"RateLimitTest::::limitPerDurationIsHonoredAccordingToClock()","58":"RateLimitTest::::limitPerDurationIsHonoredAccordingToClock()","59":"RateLimitTest::::limitPerDurationIsHonoredAccordingToClock()","60":"RateLimitTest::::limitPerDurationIsHonoredAccordingToClock()","61":"RateLimitTest::::limitPerDurationIsHonoredAccordingToClock()","62":"RateLimitTest::::limitPerDurationIsHonoredAccordingToClock()","64":"RateLimitTest::::rateLimitingDelayIsInterruptible()","65":"RateLimitTest::::rateLimitingDelayIsInterruptible()","66":"RateLimitTest::::rateLimitingDelayIsInterruptible()","67":"RateLimitTest::::rateLimitingDelayIsInterruptible()","68":"RateLimitTest::::rateLimitingDelayIsInterruptible()","69":"RateLimitTest::::rateLimitingDelayIsInterruptible()","70":"RateLimitTest::::rateLimitingDelayIsInterruptible()","71":"RateLimitTest::::rateLimitingDelayIsInterruptible()","72":"RateLimitTest::::rateLimitingDelayIsInterruptible()","73":"RateLimitTest::::rateLimitingDelayIsInterruptible()","74":"RateLimitTest::::rateLimitingDelayIsInterruptible()","75":"RateLimitTest::::rateLimitingDelayIsInterruptible()","76":"RateLimitTest::::rateLimitingDelayIsInterruptible()"},"tests":[{"test_lines":[36,39],"covered_lines":[53,55,56,68,72,76,80]},{"test_lines":[41,44],"covered_lines":[53,55,56,68,72,76,80]},{"test_lines":[46,49],"covered_lines":[53,55,56,60,61,68,72,76,80]},{"test_lines":[51,54],"covered_lines":[53,55,56,60,63,68,72,76,80,84]},{"test_lines":[56,62],"covered_lines":[53,55,56,60,63,68,72,76,80,84]},{"test_lines":[64,76],"covered_lines":[53,55,56,60,63,68,72,76,80,84]}]},"/bernard/dataset_construction/prep/repos/lambda/src/main/java/com/jnape/palatable/lambda/functions/builtin/fn4/LiftA3.java":{"class_content":["package com.jnape.palatable.lambda.functions.builtin.fn4;\n","\n","import com.jnape.palatable.lambda.functions.Fn1;\n","import com.jnape.palatable.lambda.functions.Fn2;\n","import com.jnape.palatable.lambda.functions.Fn3;\n","import com.jnape.palatable.lambda.functions.Fn4;\n","import com.jnape.palatable.lambda.functor.Applicative;\n","\n","/**\n"," * Lift into and apply an {@link Fn3} to three {@link Applicative} values, returning the result inside the same\n"," * {@link Applicative} context.\n"," *\n"," * @param <A>    the function's first argument type\n"," * @param <B>    the function's second argument type\n"," * @param <C>    the function's third argument type\n"," * @param <D>    the function's return type\n"," * @param <App>  the applicative witness\n"," * @param <AppD> the inferred applicative return type\n"," * @see Applicative#zip(Applicative)\n"," */\n","public final class LiftA3<A, B, C, D, App extends Applicative<?, App>, AppD extends Applicative<D, App>> implements\n","        Fn4<Fn3<A, B, C, D>, Applicative<A, App>, Applicative<B, App>, Applicative<C, App>, AppD> {\n","\n","    private static final LiftA3<?, ?, ?, ?, ?, ?> INSTANCE = new LiftA3<>();\n","\n","    private LiftA3() {\n","    }\n","\n","    @Override\n","    public AppD checkedApply(Fn3<A, B, C, D> fn,\n","                             Applicative<A, App> appA,\n","                             Applicative<B, App> appB,\n","                             Applicative<C, App> appC) {\n","        return appA.<D>zip(appB.zip(appC.fmap(c -> b -> a -> fn.apply(a, b, c)))).coerce();\n","    }\n","\n","    @SuppressWarnings(\"unchecked\")\n","    public static <A, B, C, D, App extends Applicative<?, App>, AppD extends Applicative<D, App>>\n","    LiftA3<A, B, C, D, App, AppD> liftA3() {\n","        return (LiftA3<A, B, C, D, App, AppD>) INSTANCE;\n","    }\n","\n","    public static <A, B, C, D, App extends Applicative<?, App>, AppD extends Applicative<D, App>>\n","    Fn3<Applicative<A, App>, Applicative<B, App>, Applicative<C, App>, AppD> liftA3(Fn3<A, B, C, D> fn) {\n","        return LiftA3.<A, B, C, D, App, AppD>liftA3().apply(fn);\n","    }\n","\n","    public static <A, B, C, D, App extends Applicative<?, App>, AppD extends Applicative<D, App>>\n","    Fn2<Applicative<B, App>, Applicative<C, App>, AppD> liftA3(Fn3<A, B, C, D> fn, Applicative<A, App> appA) {\n","        return LiftA3.<A, B, C, D, App, AppD>liftA3(fn).apply(appA);\n","    }\n","\n","    public static <A, B, C, D, App extends Applicative<?, App>, AppD extends Applicative<D, App>>\n","    Fn1<Applicative<C, App>, AppD> liftA3(Fn3<A, B, C, D> fn, Applicative<A, App> appA, Applicative<B, App> appB) {\n","        return LiftA3.<A, B, C, D, App, AppD>liftA3(fn, appA).apply(appB);\n","    }\n","\n","    public static <A, B, C, D, App extends Applicative<?, App>, AppD extends Applicative<D, App>>\n","    AppD liftA3(Fn3<A, B, C, D> fn, Applicative<A, App> appA, Applicative<B, App> appB, Applicative<C, App> appC) {\n","        return LiftA3.<A, B, C, D, App, AppD>liftA3(fn, appA, appB).apply(appC);\n","    }\n","}\n"],"test_content":["package com.jnape.palatable.lambda.functions.builtin.fn4;\n","\n","import org.junit.Test;\n","\n","import static com.jnape.palatable.lambda.adt.Maybe.just;\n","import static com.jnape.palatable.lambda.functions.builtin.fn4.LiftA3.liftA3;\n","import static org.junit.Assert.assertEquals;\n","\n","public class LiftA3Test {\n","\n","    @Test\n","    public void lifting() {\n","        assertEquals(just(6), liftA3((a, b, c) -> a + b + c, just(1), just(2), just(3)));\n","    }\n","}"],"method_lines_dic":{"LiftA3::::checkedApply(com.jnape.palatable.lambda.functions.Fn3<A, B, C, D>,com.jnape.palatable.lambda.functor.Applicative<A, App>,com.jnape.palatable.lambda.functor.Applicative<B, App>,com.jnape.palatable.lambda.functor.Applicative<C, App>)":[29,35],"LiftA3::::liftA3()":[37,41],"LiftA3::::liftA3(com.jnape.palatable.lambda.functions.Fn3<A, B, C, D>)":[43,46],"LiftA3::::liftA3(com.jnape.palatable.lambda.functions.Fn3<A, B, C, D>,com.jnape.palatable.lambda.functor.Applicative<A, App>)":[48,51],"LiftA3::::liftA3(com.jnape.palatable.lambda.functions.Fn3<A, B, C, D>,com.jnape.palatable.lambda.functor.Applicative<A, App>,com.jnape.palatable.lambda.functor.Applicative<B, App>)":[53,56],"LiftA3::::liftA3(com.jnape.palatable.lambda.functions.Fn3<A, B, C, D>,com.jnape.palatable.lambda.functor.Applicative<A, App>,com.jnape.palatable.lambda.functor.Applicative<B, App>,com.jnape.palatable.lambda.functor.Applicative<C, App>)":[58,61]},"test_method_lines_dic":{"LiftA3Test::::lifting()":[11,14]},"reverse_method_lines_dic":{"29":"LiftA3::::checkedApply(com.jnape.palatable.lambda.functions.Fn3<A, B, C, D>,com.jnape.palatable.lambda.functor.Applicative<A, App>,com.jnape.palatable.lambda.functor.Applicative<B, App>,com.jnape.palatable.lambda.functor.Applicative<C, App>)","30":"LiftA3::::checkedApply(com.jnape.palatable.lambda.functions.Fn3<A, B, C, D>,com.jnape.palatable.lambda.functor.Applicative<A, App>,com.jnape.palatable.lambda.functor.Applicative<B, App>,com.jnape.palatable.lambda.functor.Applicative<C, App>)","31":"LiftA3::::checkedApply(com.jnape.palatable.lambda.functions.Fn3<A, B, C, D>,com.jnape.palatable.lambda.functor.Applicative<A, App>,com.jnape.palatable.lambda.functor.Applicative<B, App>,com.jnape.palatable.lambda.functor.Applicative<C, App>)","32":"LiftA3::::checkedApply(com.jnape.palatable.lambda.functions.Fn3<A, B, C, D>,com.jnape.palatable.lambda.functor.Applicative<A, App>,com.jnape.palatable.lambda.functor.Applicative<B, App>,com.jnape.palatable.lambda.functor.Applicative<C, App>)","33":"LiftA3::::checkedApply(com.jnape.palatable.lambda.functions.Fn3<A, B, C, D>,com.jnape.palatable.lambda.functor.Applicative<A, App>,com.jnape.palatable.lambda.functor.Applicative<B, App>,com.jnape.palatable.lambda.functor.Applicative<C, App>)","34":"LiftA3::::checkedApply(com.jnape.palatable.lambda.functions.Fn3<A, B, C, D>,com.jnape.palatable.lambda.functor.Applicative<A, App>,com.jnape.palatable.lambda.functor.Applicative<B, App>,com.jnape.palatable.lambda.functor.Applicative<C, App>)","35":"LiftA3::::checkedApply(com.jnape.palatable.lambda.functions.Fn3<A, B, C, D>,com.jnape.palatable.lambda.functor.Applicative<A, App>,com.jnape.palatable.lambda.functor.Applicative<B, App>,com.jnape.palatable.lambda.functor.Applicative<C, App>)","37":"LiftA3::::liftA3()","38":"LiftA3::::liftA3()","39":"LiftA3::::liftA3()","40":"LiftA3::::liftA3()","41":"LiftA3::::liftA3()","43":"LiftA3::::liftA3(com.jnape.palatable.lambda.functions.Fn3<A, B, C, D>)","44":"LiftA3::::liftA3(com.jnape.palatable.lambda.functions.Fn3<A, B, C, D>)","45":"LiftA3::::liftA3(com.jnape.palatable.lambda.functions.Fn3<A, B, C, D>)","46":"LiftA3::::liftA3(com.jnape.palatable.lambda.functions.Fn3<A, B, C, D>)","48":"LiftA3::::liftA3(com.jnape.palatable.lambda.functions.Fn3<A, B, C, D>,com.jnape.palatable.lambda.functor.Applicative<A, App>)","49":"LiftA3::::liftA3(com.jnape.palatable.lambda.functions.Fn3<A, B, C, D>,com.jnape.palatable.lambda.functor.Applicative<A, App>)","50":"LiftA3::::liftA3(com.jnape.palatable.lambda.functions.Fn3<A, B, C, D>,com.jnape.palatable.lambda.functor.Applicative<A, App>)","51":"LiftA3::::liftA3(com.jnape.palatable.lambda.functions.Fn3<A, B, C, D>,com.jnape.palatable.lambda.functor.Applicative<A, App>)","53":"LiftA3::::liftA3(com.jnape.palatable.lambda.functions.Fn3<A, B, C, D>,com.jnape.palatable.lambda.functor.Applicative<A, App>,com.jnape.palatable.lambda.functor.Applicative<B, App>)","54":"LiftA3::::liftA3(com.jnape.palatable.lambda.functions.Fn3<A, B, C, D>,com.jnape.palatable.lambda.functor.Applicative<A, App>,com.jnape.palatable.lambda.functor.Applicative<B, App>)","55":"LiftA3::::liftA3(com.jnape.palatable.lambda.functions.Fn3<A, B, C, D>,com.jnape.palatable.lambda.functor.Applicative<A, App>,com.jnape.palatable.lambda.functor.Applicative<B, App>)","56":"LiftA3::::liftA3(com.jnape.palatable.lambda.functions.Fn3<A, B, C, D>,com.jnape.palatable.lambda.functor.Applicative<A, App>,com.jnape.palatable.lambda.functor.Applicative<B, App>)","58":"LiftA3::::liftA3(com.jnape.palatable.lambda.functions.Fn3<A, B, C, D>,com.jnape.palatable.lambda.functor.Applicative<A, App>,com.jnape.palatable.lambda.functor.Applicative<B, App>,com.jnape.palatable.lambda.functor.Applicative<C, App>)","59":"LiftA3::::liftA3(com.jnape.palatable.lambda.functions.Fn3<A, B, C, D>,com.jnape.palatable.lambda.functor.Applicative<A, App>,com.jnape.palatable.lambda.functor.Applicative<B, App>,com.jnape.palatable.lambda.functor.Applicative<C, App>)","60":"LiftA3::::liftA3(com.jnape.palatable.lambda.functions.Fn3<A, B, C, D>,com.jnape.palatable.lambda.functor.Applicative<A, App>,com.jnape.palatable.lambda.functor.Applicative<B, App>,com.jnape.palatable.lambda.functor.Applicative<C, App>)","61":"LiftA3::::liftA3(com.jnape.palatable.lambda.functions.Fn3<A, B, C, D>,com.jnape.palatable.lambda.functor.Applicative<A, App>,com.jnape.palatable.lambda.functor.Applicative<B, App>,com.jnape.palatable.lambda.functor.Applicative<C, App>)"},"test_reverse_method_lines_dic":{"11":"LiftA3Test::::lifting()","12":"LiftA3Test::::lifting()","13":"LiftA3Test::::lifting()","14":"LiftA3Test::::lifting()"},"tests":[{"test_lines":[11,14],"covered_lines":[24,26,27,34,40,45,50,55,60]}]}}