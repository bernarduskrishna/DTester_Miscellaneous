{"/bernard/dataset_construction/prep/repos/truth/core/src/main/java/com/google/common/truth/Fact.java":{"class_content":["/*\n"," * Copyright (c) 2018 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","\n","package com.google.common.truth;\n","\n","import static com.google.common.base.Preconditions.checkNotNull;\n","import static com.google.common.base.Strings.padEnd;\n","import static java.lang.Math.max;\n","\n","import com.google.common.collect.ImmutableList;\n","import java.io.Serializable;\n","import org.checkerframework.checker.nullness.qual.Nullable;\n","\n","/**\n"," * A string key-value pair in a failure message, such as \"expected: abc\" or \"but was: xyz.\"\n"," *\n"," * <p>Most Truth users will never interact with this type. It appears in the Truth API only as a\n"," * parameter to methods like {@link Subject#failWithActual(Fact, Fact...)}, which are used only by\n"," * custom {@code Subject} implementations.\n"," *\n"," * <p>If you are writing a custom {@code Subject}, see <a\n"," * href=\"https://truth.dev/failure_messages\">our tips on writing failure messages</a>.\n"," */\n","public final class Fact implements Serializable {\n","  /**\n","   * Creates a fact with the given key and value, which will be printed in a format like \"key:\n","   * value.\" The value is converted to a string by calling {@code String.valueOf} on it.\n","   */\n","  public static Fact fact(String key, @Nullable Object value) {\n","    return new Fact(key, String.valueOf(value));\n","  }\n","\n","  /**\n","   * Creates a fact with no value, which will be printed in the format \"key\" (with no colon or\n","   * value).\n","   *\n","   * <p>In most cases, prefer {@linkplain #fact key-value facts}, which give Truth more flexibility\n","   * in how to format the fact for display. {@code simpleFact} is useful primarily for:\n","   *\n","   * <ul>\n","   *   <li>messages from no-arg assertions. For example, {@code isNotEmpty()} would generate the\n","   *       fact \"expected not to be empty\"\n","   *   <li>prose that is part of a larger message. For example, {@code contains()} sometimes\n","   *       displays facts like \"expected to contain: ...\" <i>\"but did not\"</i> \"though it did\n","   *       contain: ...\"\n","   * </ul>\n","   */\n","  public static Fact simpleFact(String key) {\n","    return new Fact(key, null);\n","  }\n","\n","  final String key;\n","  final @Nullable String value;\n","\n","  private Fact(String key, @Nullable String value) {\n","    this.key = checkNotNull(key);\n","    this.value = value;\n","  }\n","\n","  /**\n","   * Returns a simple string representation for the fact. While this is used in the output of {@code\n","   * TruthFailureSubject}, it's not used in normal failure messages, which automatically align facts\n","   * horizontally and indent multiline values.\n","   */\n","  @Override\n","  public String toString() {\n","    return value == null ? key : key + \": \" + value;\n","  }\n","\n","  /**\n","   * Formats the given messages and facts into a string for use as the message of a test failure. In\n","   * particular, this method horizontally aligns the beginning of fact values.\n","   */\n","  static String makeMessage(ImmutableList<String> messages, ImmutableList<Fact> facts) {\n","    int longestKeyLength = 0;\n","    boolean seenNewlineInValue = false;\n","    for (Fact fact : facts) {\n","      if (fact.value != null) {\n","        longestKeyLength = max(longestKeyLength, fact.key.length());\n","        // TODO(cpovirk): Look for other kinds of newlines.\n","        seenNewlineInValue |= fact.value.contains(\"\\n\");\n","      }\n","    }\n","\n","    StringBuilder builder = new StringBuilder();\n","    for (String message : messages) {\n","      builder.append(message);\n","      builder.append('\\n');\n","    }\n","\n","    /*\n","     * *Usually* the first fact is printed at the beginning of a new line. However, when this\n","     * exception is the cause of another exception, that exception will print it starting after\n","     * \"Caused by: \" on the same line. The other exception sometimes also reuses this message as its\n","     * own message. In both of those scenarios, the first line doesn't start at column 0, so the\n","     * horizontal alignment is thrown off.\n","     *\n","     * There's not much we can do about this, short of always starting with a newline (which would\n","     * leave a blank line at the beginning of the message in the normal case).\n","     */\n","    for (Fact fact : facts) {\n","      if (fact.value == null) {\n","        builder.append(fact.key);\n","      } else if (seenNewlineInValue) {\n","        builder.append(fact.key);\n","        builder.append(\":\\n\");\n","        builder.append(indent(fact.value));\n","      } else {\n","        builder.append(padEnd(fact.key, longestKeyLength, ' '));\n","        builder.append(\": \");\n","        builder.append(fact.value);\n","      }\n","      builder.append('\\n');\n","    }\n","    if (builder.length() > 0) {\n","      builder.setLength(builder.length() - 1); // remove trailing \\n\n","    }\n","    return builder.toString();\n","  }\n","\n","  private static String indent(String value) {\n","    // We don't want to indent with \\t because the text would align exactly with the stack trace.\n","    // We don't want to indent with \\t\\t because it would be very far for people with 8-space tabs.\n","    // Let's compromise and indent by 4 spaces, which is different than both 2- and 8-space tabs.\n","    return \"    \" + value.replace(\"\\n\", \"\\n    \");\n","  }\n","}\n"],"test_content":["/*\n"," * Copyright (c) 2018 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","\n","package com.google.common.truth;\n","\n","import static com.google.common.truth.Fact.fact;\n","import static com.google.common.truth.Fact.makeMessage;\n","import static com.google.common.truth.Fact.simpleFact;\n","import static com.google.common.truth.Truth.assertThat;\n","\n","import com.google.common.collect.ImmutableList;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import org.junit.runners.JUnit4;\n","\n","/** Tests for {@link Fact}. */\n","@RunWith(JUnit4.class)\n","public class FactTest {\n","  @Test\n","  public void string() {\n","    assertThat(fact(\"foo\", \"bar\").toString()).isEqualTo(\"foo: bar\");\n","  }\n","\n","  @Test\n","  public void stringWithoutValue() {\n","    assertThat(simpleFact(\"foo\").toString()).isEqualTo(\"foo\");\n","  }\n","\n","  @Test\n","  public void oneFacts() {\n","    assertThat(makeMessage(ImmutableList.<String>of(), ImmutableList.of(fact(\"foo\", \"bar\"))))\n","        .isEqualTo(\"foo: bar\");\n","  }\n","\n","  @Test\n","  public void twoFacts() {\n","    assertThat(\n","            makeMessage(\n","                ImmutableList.<String>of(),\n","                ImmutableList.of(fact(\"foo\", \"bar\"), fact(\"longer name\", \"other value\"))))\n","        .isEqualTo(\"foo        : bar\\nlonger name: other value\");\n","  }\n","\n","  @Test\n","  public void oneFactWithoutValue() {\n","    assertThat(makeMessage(ImmutableList.<String>of(), ImmutableList.of(simpleFact(\"foo\"))))\n","        .isEqualTo(\"foo\");\n","  }\n","\n","  @Test\n","  public void twoFactsOneWithoutValue() {\n","    assertThat(\n","            makeMessage(\n","                ImmutableList.<String>of(),\n","                ImmutableList.of(fact(\"hello\", \"there\"), simpleFact(\"foo\"))))\n","        .isEqualTo(\"hello: there\\nfoo\");\n","  }\n","\n","  @Test\n","  public void newline() {\n","    assertThat(makeMessage(ImmutableList.<String>of(), ImmutableList.of(fact(\"foo\", \"bar\\nbaz\"))))\n","        .isEqualTo(\"foo:\\n    bar\\n    baz\");\n","  }\n","\n","  @Test\n","  public void newlineWithoutValue() {\n","    assertThat(\n","            makeMessage(\n","                ImmutableList.<String>of(),\n","                ImmutableList.of(fact(\"hello\", \"there\\neveryone\"), simpleFact(\"xyz\"))))\n","        .isEqualTo(\"hello:\\n    there\\n    everyone\\nxyz\");\n","  }\n","\n","  @Test\n","  public void withMessage() {\n","    assertThat(makeMessage(ImmutableList.<String>of(\"hello\"), ImmutableList.of(fact(\"foo\", \"bar\"))))\n","        .isEqualTo(\"hello\\nfoo: bar\");\n","  }\n","}\n"],"method_lines_dic":{"Fact::::fact(java.lang.String,java.lang.Object)":[42,44],"Fact::::simpleFact(java.lang.String)":[61,63],"Fact::::toString()":[78,81],"Fact::::indent(java.lang.String)":[134,139]},"test_method_lines_dic":{"FactTest::::string()":[32,35],"FactTest::::stringWithoutValue()":[37,40],"FactTest::::oneFacts()":[42,46],"FactTest::::twoFacts()":[48,55],"FactTest::::oneFactWithoutValue()":[57,61],"FactTest::::twoFactsOneWithoutValue()":[63,70],"FactTest::::newline()":[72,76],"FactTest::::newlineWithoutValue()":[78,85],"FactTest::::withMessage()":[87,91]},"reverse_method_lines_dic":{"42":"Fact::::fact(java.lang.String,java.lang.Object)","43":"Fact::::fact(java.lang.String,java.lang.Object)","44":"Fact::::fact(java.lang.String,java.lang.Object)","61":"Fact::::simpleFact(java.lang.String)","62":"Fact::::simpleFact(java.lang.String)","63":"Fact::::simpleFact(java.lang.String)","78":"Fact::::toString()","79":"Fact::::toString()","80":"Fact::::toString()","81":"Fact::::toString()","134":"Fact::::indent(java.lang.String)","135":"Fact::::indent(java.lang.String)","136":"Fact::::indent(java.lang.String)","137":"Fact::::indent(java.lang.String)","138":"Fact::::indent(java.lang.String)","139":"Fact::::indent(java.lang.String)"},"test_reverse_method_lines_dic":{"32":"FactTest::::string()","33":"FactTest::::string()","34":"FactTest::::string()","35":"FactTest::::string()","37":"FactTest::::stringWithoutValue()","38":"FactTest::::stringWithoutValue()","39":"FactTest::::stringWithoutValue()","40":"FactTest::::stringWithoutValue()","42":"FactTest::::oneFacts()","43":"FactTest::::oneFacts()","44":"FactTest::::oneFacts()","45":"FactTest::::oneFacts()","46":"FactTest::::oneFacts()","48":"FactTest::::twoFacts()","49":"FactTest::::twoFacts()","50":"FactTest::::twoFacts()","51":"FactTest::::twoFacts()","52":"FactTest::::twoFacts()","53":"FactTest::::twoFacts()","54":"FactTest::::twoFacts()","55":"FactTest::::twoFacts()","57":"FactTest::::oneFactWithoutValue()","58":"FactTest::::oneFactWithoutValue()","59":"FactTest::::oneFactWithoutValue()","60":"FactTest::::oneFactWithoutValue()","61":"FactTest::::oneFactWithoutValue()","63":"FactTest::::twoFactsOneWithoutValue()","64":"FactTest::::twoFactsOneWithoutValue()","65":"FactTest::::twoFactsOneWithoutValue()","66":"FactTest::::twoFactsOneWithoutValue()","67":"FactTest::::twoFactsOneWithoutValue()","68":"FactTest::::twoFactsOneWithoutValue()","69":"FactTest::::twoFactsOneWithoutValue()","70":"FactTest::::twoFactsOneWithoutValue()","72":"FactTest::::newline()","73":"FactTest::::newline()","74":"FactTest::::newline()","75":"FactTest::::newline()","76":"FactTest::::newline()","78":"FactTest::::newlineWithoutValue()","79":"FactTest::::newlineWithoutValue()","80":"FactTest::::newlineWithoutValue()","81":"FactTest::::newlineWithoutValue()","82":"FactTest::::newlineWithoutValue()","83":"FactTest::::newlineWithoutValue()","84":"FactTest::::newlineWithoutValue()","85":"FactTest::::newlineWithoutValue()","87":"FactTest::::withMessage()","88":"FactTest::::withMessage()","89":"FactTest::::withMessage()","90":"FactTest::::withMessage()","91":"FactTest::::withMessage()"},"tests":[{"test_lines":[32,35],"covered_lines":[43,68,69,70,71,80],"label":"Fact::::toString()"},{"test_lines":[37,40],"covered_lines":[62,68,69,70,71,80],"label":"Fact::::toString()"},{"test_lines":[42,46],"covered_lines":[43,68,69,70,71,88,89,90,91,92,94,96,98,99,114,115,117,122,123,124,126,127,128,129,131],"label":"<<UNRECOGNISED_METHOD>>"},{"test_lines":[48,55],"covered_lines":[43,68,69,70,71,88,89,90,91,92,94,96,98,99,114,115,117,122,123,124,126,127,128,129,131],"label":"<<UNRECOGNISED_METHOD>>"},{"test_lines":[57,61],"covered_lines":[62,68,69,70,71,88,89,90,91,96,98,99,114,115,116,126,127,128,129,131],"label":"<<UNRECOGNISED_METHOD>>"},{"test_lines":[63,70],"covered_lines":[43,62,68,69,70,71,88,89,90,91,92,94,96,98,99,114,115,116,117,122,123,124,126,127,128,129,131],"label":"<<UNRECOGNISED_METHOD>>"},{"test_lines":[72,76],"covered_lines":[43,68,69,70,71,88,89,90,91,92,94,96,98,99,114,115,117,118,119,120,126,127,128,129,131,138],"label":"<<UNRECOGNISED_METHOD>>"},{"test_lines":[78,85],"covered_lines":[43,62,68,69,70,71,88,89,90,91,92,94,96,98,99,114,115,116,117,118,119,120,126,127,128,129,131,138],"label":"<<UNRECOGNISED_METHOD>>"},{"test_lines":[87,91],"covered_lines":[43,68,69,70,71,88,89,90,91,92,94,96,98,99,100,101,102,114,115,117,122,123,124,126,127,128,129,131],"label":"<<UNRECOGNISED_METHOD>>"}]},"/bernard/dataset_construction/prep/repos/truth/core/src/main/java/com/google/common/truth/ExpectFailure.java":{"class_content":["/*\n"," * Copyright (c) 2017 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.base.Preconditions.checkNotNull;\n","import static com.google.common.base.Preconditions.checkState;\n","import static com.google.common.base.Strings.lenientFormat;\n","import static com.google.common.truth.Truth.assertAbout;\n","import static com.google.common.truth.TruthFailureSubject.truthFailures;\n","\n","import com.google.common.annotations.GwtIncompatible;\n","import com.google.common.truth.Truth.SimpleAssertionError;\n","import com.google.errorprone.annotations.CanIgnoreReturnValue;\n","import org.checkerframework.checker.nullness.qual.Nullable;\n","import org.junit.runner.Description;\n","import org.junit.runners.model.Statement;\n","\n","/**\n"," * A utility for testing that assertions against a custom {@link Subject} fail when they should,\n"," * plus a utility to assert about parts of the resulting failure messages.\n"," *\n"," * <p>Usage:\n"," *\n"," * <pre>{@code\n"," *   AssertionError failure =\n"," *       expectFailure(whenTesting -> whenTesting.that(cancelButton).isVisible());\n"," *   assertThat(failure).factKeys().containsExactly(\"expected to be visible\");\n"," *\n"," * ...\n"," *\n"," * private static AssertionError expectFailure(\n"," *     ExpectFailure.SimpleSubjectBuilderCallback<UiElementSubject, UiElement> assertionCallback) {\n"," *   return ExpectFailure.expectFailureAbout(uiElements(), assertionCallback);\n"," * }\n"," * }</pre>\n"," *\n"," * Or, if you can't use lambdas:\n"," *\n"," * <pre>\n"," * {@code @Rule public final ExpectFailure expectFailure = new ExpectFailure();}\n"," *\n"," * {@code ...\n"," *\n"," *     expectFailure.whenTesting().about(uiElements()).that(cancelButton).isVisible();\n"," *     assertThat(failure).factKeys().containsExactly(\"expected to be visible\");\n"," * }</pre>\n"," *\n"," * <p>{@code ExpectFailure} is similar to JUnit's {@code assertThrows} (<a\n"," * href=\"https://junit.org/junit4/javadoc/latest/org/junit/Assert.html#assertThrows%28java.lang.Class,%20org.junit.function.ThrowingRunnable%29\">JUnit\n"," * 4</a>, <a\n"," * href=\"https://junit.org/junit5/docs/current/api/org/junit/jupiter/api/Assertions.html#assertThrows%28java.lang.Class,org.junit.jupiter.api.function.Executable%29\">JUnit\n"," * 5</a>). We recommend it over {@code assertThrows} when you're testing a Truth subject because it\n"," * also checks that the assertion you're testing uses the supplied {@link FailureStrategy} and calls\n"," * {@link FailureStrategy#fail} only once.\n"," */\n","public final class ExpectFailure implements Platform.JUnitTestRule {\n","  private boolean inRuleContext = false;\n","  private boolean failureExpected = false;\n","  private @Nullable AssertionError failure = null;\n","\n","  /**\n","   * Creates a new instance for use as a {@code @Rule}. See the class documentation for details, and\n","   * consider using {@linkplain #expectFailure the lambda version} instead.\n","   */\n","  public ExpectFailure() {}\n","\n","  /**\n","   * Returns a test verb that expects the chained assertion to fail, and makes the failure available\n","   * via {@link #getFailure}.\n","   *\n","   * <p>An instance of {@code ExpectFailure} supports only one {@code whenTesting} call per test\n","   * method. The static {@link #expectFailure} method, by contrast, does not have this limitation.\n","   */\n","  public StandardSubjectBuilder whenTesting() {\n","    checkState(inRuleContext, \"ExpectFailure must be used as a JUnit @Rule\");\n","    if (failure != null) {\n","      throw SimpleAssertionError.create(\"ExpectFailure already captured a failure\", failure);\n","    }\n","    if (failureExpected) {\n","      throw new AssertionError(\n","          \"ExpectFailure.whenTesting() called previously, but did not capture a failure.\");\n","    }\n","    failureExpected = true;\n","    return StandardSubjectBuilder.forCustomFailureStrategy(this::captureFailure);\n","  }\n","\n","  /**\n","   * Enters rule context to be ready to capture failures.\n","   *\n","   * <p>This should be rarely used directly, except if this class is as a long living object but not\n","   * as a JUnit rule, like truth subject tests where for GWT compatible reasons.\n","   */\n","  void enterRuleContext() {\n","    this.inRuleContext = true;\n","  }\n","\n","  /** Leaves rule context and verify if a failure has been caught if it's expected. */\n","  void leaveRuleContext() {\n","    this.inRuleContext = false;\n","  }\n","\n","  /**\n","   * Ensures a failure is caught if it's expected (i.e., {@link #whenTesting} is called) and throws\n","   * error if not.\n","   */\n","  void ensureFailureCaught() {\n","    if (failureExpected && failure == null) {\n","      throw new AssertionError(\n","          \"ExpectFailure.whenTesting() invoked, but no failure was caught.\"\n","              + Platform.EXPECT_FAILURE_WARNING_IF_GWT);\n","    }\n","  }\n","\n","  /** Returns the captured failure, if one occurred. */\n","  public AssertionError getFailure() {\n","    if (failure == null) {\n","      throw new AssertionError(\"ExpectFailure did not capture a failure.\");\n","    }\n","    return failure;\n","  }\n","\n","  /**\n","   * Captures the provided failure, or throws an {@link AssertionError} if a failure had previously\n","   * been captured.\n","   */\n","  private void captureFailure(AssertionError captured) {\n","    if (failure != null) {\n","      // TODO(diamondm) is it worthwhile to add the failures as suppressed exceptions?\n","      throw new AssertionError(\n","          lenientFormat(\n","              \"ExpectFailure.whenTesting() caught multiple failures:\\n\\n%s\\n\\n%s\\n\",\n","              Platform.getStackTraceAsString(failure), Platform.getStackTraceAsString(captured)));\n","    }\n","    failure = captured;\n","  }\n","\n","  /**\n","   * Static alternative that directly returns the triggered failure. This is intended to be used in\n","   * Java 8+ tests similar to {@code expectThrows()}:\n","   *\n","   * <p>{@code AssertionError failure = expectFailure(whenTesting ->\n","   * whenTesting.that(4).isNotEqualTo(4));}\n","   */\n","  @CanIgnoreReturnValue\n","  public static AssertionError expectFailure(StandardSubjectBuilderCallback assertionCallback) {\n","    ExpectFailure expectFailure = new ExpectFailure();\n","    expectFailure.enterRuleContext(); // safe since this instance doesn't leave this method\n","    assertionCallback.invokeAssertion(expectFailure.whenTesting());\n","    return expectFailure.getFailure();\n","  }\n","\n","  /**\n","   * Static alternative that directly returns the triggered failure. This is intended to be used in\n","   * Java 8+ tests similar to {@code expectThrows()}:\n","   *\n","   * <p>{@code AssertionError failure = expectFailureAbout(myTypes(), whenTesting ->\n","   * whenTesting.that(myType).hasProperty());}\n","   */\n","  @CanIgnoreReturnValue\n","  public static <S extends Subject, A> AssertionError expectFailureAbout(\n","      Subject.Factory<S, A> factory, SimpleSubjectBuilderCallback<S, A> assertionCallback) {\n","    return expectFailure(\n","        whenTesting -> assertionCallback.invokeAssertion(whenTesting.about(factory)));\n","  }\n","\n","  /**\n","   * Creates a subject for asserting about the given {@link AssertionError}, usually one produced by\n","   * Truth.\n","   */\n","  public static TruthFailureSubject assertThat(@Nullable AssertionError actual) {\n","    return assertAbout(truthFailures()).that(actual);\n","  }\n","\n","  @Override\n","  @GwtIncompatible(\"org.junit.rules.TestRule\")\n","  @J2ktIncompatible\n","  public Statement apply(Statement base, Description description) {\n","    checkNotNull(base);\n","    checkNotNull(description);\n","    return new Statement() {\n","      @Override\n","      public void evaluate() throws Throwable {\n","        enterRuleContext();\n","        try {\n","          base.evaluate();\n","        } finally {\n","          leaveRuleContext();\n","        }\n","        ensureFailureCaught();\n","      }\n","    };\n","  }\n","\n","  /**\n","   * A \"functional interface\" for {@link #expectFailure expectFailure()} to invoke and capture\n","   * failures.\n","   *\n","   * <p>Java 8+ users should pass a lambda to {@code .expectFailure()} rather than directly\n","   * implement this interface. Java 7+ users can define an {@code @Rule ExpectFailure} instance\n","   * instead, however if you prefer the {@code .expectFailure()} pattern you can use this interface\n","   * to pass in an anonymous class.\n","   */\n","  public interface StandardSubjectBuilderCallback {\n","    void invokeAssertion(StandardSubjectBuilder whenTesting);\n","  }\n","\n","  /**\n","   * A \"functional interface\" for {@link #expectFailureAbout expectFailureAbout()} to invoke and\n","   * capture failures.\n","   *\n","   * <p>Java 8+ users should pass a lambda to {@code .expectFailureAbout()} rather than directly\n","   * implement this interface. Java 7+ users can define an {@code @Rule ExpectFailure} instance\n","   * instead, however if you prefer the {@code .expectFailureAbout()} pattern you can use this\n","   * interface to pass in an anonymous class.\n","   */\n","  public interface SimpleSubjectBuilderCallback<S extends Subject, A> {\n","    void invokeAssertion(SimpleSubjectBuilder<S, A> whenTesting);\n","  }\n","}\n"],"test_content":["/*\n"," * Copyright (c) 2011 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.base.Strings.lenientFormat;\n","import static com.google.common.truth.Fact.simpleFact;\n","import static com.google.common.truth.Truth.assertThat;\n","\n","import org.junit.Before;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import org.junit.runners.JUnit4;\n","\n","/** Tests for {@link ExpectFailure} */\n","@RunWith(JUnit4.class)\n","public class ExpectFailureTest {\n","  private final ExpectFailure expectFailure = new ExpectFailure();\n","\n","  @Before\n","  public void setupExpectFailure() {\n","    expectFailure.enterRuleContext();\n","  }\n","\n","  @Test\n","  public void expectFail() {\n","    expectFailure.whenTesting().withMessage(\"abc\").fail();\n","    assertThat(expectFailure.getFailure()).hasMessageThat().isEqualTo(\"abc\");\n","  }\n","\n","  @Test\n","  public void expectFail_withCause() {\n","    expectFailure.whenTesting().that(new NullPointerException()).isNull();\n","    assertThat(expectFailure.getFailure()).hasMessageThat().contains(\"NullPointerException\");\n","    assertThat(expectFailure.getFailure()).hasCauseThat().isInstanceOf(NullPointerException.class);\n","  }\n","\n","  @Test\n","  public void expectFail_about() {\n","    expectFailure.whenTesting().about(strings()).that(\"foo\").isEqualTo(\"bar\");\n","    assertThat(expectFailure.getFailure()).hasMessageThat().contains(\"foo\");\n","  }\n","\n","  @Test\n","  @SuppressWarnings(\"TruthSelfEquals\")\n","  public void expectFail_passesIfUnused() {\n","    assertThat(4).isEqualTo(4);\n","  }\n","\n","  @Test\n","  @SuppressWarnings(\"TruthSelfEquals\")\n","  public void expectFail_failsOnSuccess() {\n","    expectFailure.whenTesting().that(4).isEqualTo(4);\n","    try {\n","      @SuppressWarnings(\"unused\")\n","      AssertionError unused = expectFailure.getFailure();\n","      throw new Error(\"Expected to fail\");\n","    } catch (AssertionError expected) {\n","      assertThat(expected).hasMessageThat().contains(\"ExpectFailure did not capture a failure.\");\n","    }\n","  }\n","\n","  @Test\n","  public void expectFail_failsOnMultipleFailures() {\n","    try {\n","      expectFailure.whenTesting().about(BadSubject.badSubject()).that(5).isEqualTo(4);\n","      throw new Error(\"Expected to fail\");\n","    } catch (AssertionError expected) {\n","      assertThat(expected).hasMessageThat().contains(\"caught multiple failures\");\n","      assertThat(expected).hasMessageThat().contains(\"<4> is equal to <5>\");\n","      assertThat(expected).hasMessageThat().contains(\"<5> is equal to <4>\");\n","    }\n","  }\n","\n","  @Test\n","  @SuppressWarnings(\"TruthSelfEquals\")\n","  public void expectFail_failsOnMultiplewhenTestings() {\n","    try {\n","      expectFailure.whenTesting().that(4).isEqualTo(4);\n","      StandardSubjectBuilder unused = expectFailure.whenTesting();\n","      throw new Error(\"Expected to fail\");\n","    } catch (AssertionError expected) {\n","      assertThat(expected)\n","          .hasMessageThat()\n","          .contains(\n","              \"ExpectFailure.whenTesting() called previously, but did not capture a failure.\");\n","    }\n","  }\n","\n","  @Test\n","  public void expectFail_failsOnMultiplewhenTestings_thatFail() {\n","    expectFailure.whenTesting().that(5).isEqualTo(4);\n","    try {\n","      StandardSubjectBuilder unused = expectFailure.whenTesting();\n","      throw new Error(\"Expected to fail\");\n","    } catch (AssertionError expected) {\n","      assertThat(expected).hasMessageThat().contains(\"ExpectFailure already captured a failure\");\n","    }\n","  }\n","\n","  @Test\n","  @SuppressWarnings(\"TruthSelfEquals\")\n","  public void expectFail_failsAfterTest() {\n","    try {\n","      expectFailure.whenTesting().that(4).isEqualTo(4);\n","      expectFailure.ensureFailureCaught();\n","      throw new Error(\"Expected to fail\");\n","    } catch (AssertionError expected) {\n","      assertThat(expected)\n","          .hasMessageThat()\n","          .contains(\"ExpectFailure.whenTesting() invoked, but no failure was caught.\");\n","    }\n","  }\n","\n","  @Test\n","  @SuppressWarnings(\"TruthSelfEquals\")\n","  public void expectFail_whenTestingWithoutInContext_shouldFail() {\n","    ExpectFailure expectFailure = new ExpectFailure();\n","    try {\n","      expectFailure.whenTesting().that(4).isEqualTo(4);\n","      throw new Error(\"Expected to fail\");\n","    } catch (IllegalStateException expected) {\n","      assertThat(expected).hasMessageThat().contains(\"ExpectFailure must be used as a JUnit @Rule\");\n","    }\n","  }\n","\n","  private static Subject.Factory<StringSubject, String> strings() {\n","    return new Subject.Factory<StringSubject, String>() {\n","      @Override\n","      public StringSubject createSubject(FailureMetadata fm, String that) {\n","        return new StringSubject(fm, that);\n","      }\n","    };\n","  }\n","\n","  private static class BadSubject extends Subject {\n","    private final Integer actual;\n","\n","    BadSubject(FailureMetadata failureMetadat, Integer actual) {\n","      super(failureMetadat, actual);\n","      this.actual = actual;\n","    }\n","\n","    @Override\n","    public void isEqualTo(Object expected) {\n","      if (!actual.equals(expected)) {\n","        failWithoutActual(\n","            simpleFact(lenientFormat(\"expected <%s> is equal to <%s>\", actual, expected)));\n","        failWithoutActual(\n","            simpleFact(lenientFormat(\"expected <%s> is equal to <%s>\", expected, actual)));\n","      }\n","    }\n","\n","    private static Subject.Factory<BadSubject, Integer> badSubject() {\n","      return new Subject.Factory<BadSubject, Integer>() {\n","        @Override\n","        public BadSubject createSubject(FailureMetadata fm, Integer that) {\n","          return new BadSubject(fm, that);\n","        }\n","      };\n","    }\n","  }\n","}\n"],"method_lines_dic":{"ExpectFailure::::whenTesting()":[87,98],"ExpectFailure::::enterRuleContext()":[106,108],"ExpectFailure::::leaveRuleContext()":[111,113],"ExpectFailure::::ensureFailureCaught()":[119,125],"ExpectFailure::::getFailure()":[128,133],"ExpectFailure::::captureFailure(java.lang.AssertionError)":[139,148],"ExpectFailure::::expectFailure(com.google.common.truth.ExpectFailure.StandardSubjectBuilderCallback)":[157,163],"ExpectFailure::::expectFailureAbout(com.google.common.truth.Subject.Factory<S, A>,com.google.common.truth.ExpectFailure.SimpleSubjectBuilderCallback<S, A>)":[172,177],"ExpectFailure::::assertThat(java.lang.AssertionError)":[183,185],"ExpectFailure.StandardSubjectBuilderCallback::::invokeAssertion(com.google.common.truth.StandardSubjectBuilder)":[217,217],"ExpectFailure.SimpleSubjectBuilderCallback::::invokeAssertion(com.google.common.truth.SimpleSubjectBuilder<S, A>)":[230,230]},"test_method_lines_dic":{"ExpectFailureTest::::setupExpectFailure()":[32,35],"ExpectFailureTest::::expectFail()":[37,41],"ExpectFailureTest::::expectFail_withCause()":[43,48],"ExpectFailureTest::::expectFail_about()":[50,54],"ExpectFailureTest::::expectFail_passesIfUnused()":[56,60],"ExpectFailureTest::::expectFail_failsOnSuccess()":[62,73],"ExpectFailureTest::::expectFail_failsOnMultipleFailures()":[75,85],"ExpectFailureTest::::expectFail_failsOnMultiplewhenTestings()":[87,100],"ExpectFailureTest::::expectFail_failsOnMultiplewhenTestings_thatFail()":[102,111],"ExpectFailureTest::::expectFail_failsAfterTest()":[113,125],"ExpectFailureTest::::expectFail_whenTestingWithoutInContext_shouldFail()":[127,137],"ExpectFailureTest::::strings()":[139,146],"ExpectFailureTest.BadSubject::::isEqualTo(java.lang.Object)":[156,164],"ExpectFailureTest.BadSubject::::badSubject()":[166,173]},"reverse_method_lines_dic":{"87":"ExpectFailure::::whenTesting()","88":"ExpectFailure::::whenTesting()","89":"ExpectFailure::::whenTesting()","90":"ExpectFailure::::whenTesting()","91":"ExpectFailure::::whenTesting()","92":"ExpectFailure::::whenTesting()","93":"ExpectFailure::::whenTesting()","94":"ExpectFailure::::whenTesting()","95":"ExpectFailure::::whenTesting()","96":"ExpectFailure::::whenTesting()","97":"ExpectFailure::::whenTesting()","98":"ExpectFailure::::whenTesting()","106":"ExpectFailure::::enterRuleContext()","107":"ExpectFailure::::enterRuleContext()","108":"ExpectFailure::::enterRuleContext()","111":"ExpectFailure::::leaveRuleContext()","112":"ExpectFailure::::leaveRuleContext()","113":"ExpectFailure::::leaveRuleContext()","119":"ExpectFailure::::ensureFailureCaught()","120":"ExpectFailure::::ensureFailureCaught()","121":"ExpectFailure::::ensureFailureCaught()","122":"ExpectFailure::::ensureFailureCaught()","123":"ExpectFailure::::ensureFailureCaught()","124":"ExpectFailure::::ensureFailureCaught()","125":"ExpectFailure::::ensureFailureCaught()","128":"ExpectFailure::::getFailure()","129":"ExpectFailure::::getFailure()","130":"ExpectFailure::::getFailure()","131":"ExpectFailure::::getFailure()","132":"ExpectFailure::::getFailure()","133":"ExpectFailure::::getFailure()","139":"ExpectFailure::::captureFailure(java.lang.AssertionError)","140":"ExpectFailure::::captureFailure(java.lang.AssertionError)","141":"ExpectFailure::::captureFailure(java.lang.AssertionError)","142":"ExpectFailure::::captureFailure(java.lang.AssertionError)","143":"ExpectFailure::::captureFailure(java.lang.AssertionError)","144":"ExpectFailure::::captureFailure(java.lang.AssertionError)","145":"ExpectFailure::::captureFailure(java.lang.AssertionError)","146":"ExpectFailure::::captureFailure(java.lang.AssertionError)","147":"ExpectFailure::::captureFailure(java.lang.AssertionError)","148":"ExpectFailure::::captureFailure(java.lang.AssertionError)","157":"ExpectFailure::::expectFailure(com.google.common.truth.ExpectFailure.StandardSubjectBuilderCallback)","158":"ExpectFailure::::expectFailure(com.google.common.truth.ExpectFailure.StandardSubjectBuilderCallback)","159":"ExpectFailure::::expectFailure(com.google.common.truth.ExpectFailure.StandardSubjectBuilderCallback)","160":"ExpectFailure::::expectFailure(com.google.common.truth.ExpectFailure.StandardSubjectBuilderCallback)","161":"ExpectFailure::::expectFailure(com.google.common.truth.ExpectFailure.StandardSubjectBuilderCallback)","162":"ExpectFailure::::expectFailure(com.google.common.truth.ExpectFailure.StandardSubjectBuilderCallback)","163":"ExpectFailure::::expectFailure(com.google.common.truth.ExpectFailure.StandardSubjectBuilderCallback)","172":"ExpectFailure::::expectFailureAbout(com.google.common.truth.Subject.Factory<S, A>,com.google.common.truth.ExpectFailure.SimpleSubjectBuilderCallback<S, A>)","173":"ExpectFailure::::expectFailureAbout(com.google.common.truth.Subject.Factory<S, A>,com.google.common.truth.ExpectFailure.SimpleSubjectBuilderCallback<S, A>)","174":"ExpectFailure::::expectFailureAbout(com.google.common.truth.Subject.Factory<S, A>,com.google.common.truth.ExpectFailure.SimpleSubjectBuilderCallback<S, A>)","175":"ExpectFailure::::expectFailureAbout(com.google.common.truth.Subject.Factory<S, A>,com.google.common.truth.ExpectFailure.SimpleSubjectBuilderCallback<S, A>)","176":"ExpectFailure::::expectFailureAbout(com.google.common.truth.Subject.Factory<S, A>,com.google.common.truth.ExpectFailure.SimpleSubjectBuilderCallback<S, A>)","177":"ExpectFailure::::expectFailureAbout(com.google.common.truth.Subject.Factory<S, A>,com.google.common.truth.ExpectFailure.SimpleSubjectBuilderCallback<S, A>)","183":"ExpectFailure::::assertThat(java.lang.AssertionError)","184":"ExpectFailure::::assertThat(java.lang.AssertionError)","185":"ExpectFailure::::assertThat(java.lang.AssertionError)","217":"ExpectFailure.StandardSubjectBuilderCallback::::invokeAssertion(com.google.common.truth.StandardSubjectBuilder)","230":"ExpectFailure.SimpleSubjectBuilderCallback::::invokeAssertion(com.google.common.truth.SimpleSubjectBuilder<S, A>)"},"test_reverse_method_lines_dic":{"32":"ExpectFailureTest::::setupExpectFailure()","33":"ExpectFailureTest::::setupExpectFailure()","34":"ExpectFailureTest::::setupExpectFailure()","35":"ExpectFailureTest::::setupExpectFailure()","37":"ExpectFailureTest::::expectFail()","38":"ExpectFailureTest::::expectFail()","39":"ExpectFailureTest::::expectFail()","40":"ExpectFailureTest::::expectFail()","41":"ExpectFailureTest::::expectFail()","43":"ExpectFailureTest::::expectFail_withCause()","44":"ExpectFailureTest::::expectFail_withCause()","45":"ExpectFailureTest::::expectFail_withCause()","46":"ExpectFailureTest::::expectFail_withCause()","47":"ExpectFailureTest::::expectFail_withCause()","48":"ExpectFailureTest::::expectFail_withCause()","50":"ExpectFailureTest::::expectFail_about()","51":"ExpectFailureTest::::expectFail_about()","52":"ExpectFailureTest::::expectFail_about()","53":"ExpectFailureTest::::expectFail_about()","54":"ExpectFailureTest::::expectFail_about()","56":"ExpectFailureTest::::expectFail_passesIfUnused()","57":"ExpectFailureTest::::expectFail_passesIfUnused()","58":"ExpectFailureTest::::expectFail_passesIfUnused()","59":"ExpectFailureTest::::expectFail_passesIfUnused()","60":"ExpectFailureTest::::expectFail_passesIfUnused()","62":"ExpectFailureTest::::expectFail_failsOnSuccess()","63":"ExpectFailureTest::::expectFail_failsOnSuccess()","64":"ExpectFailureTest::::expectFail_failsOnSuccess()","65":"ExpectFailureTest::::expectFail_failsOnSuccess()","66":"ExpectFailureTest::::expectFail_failsOnSuccess()","67":"ExpectFailureTest::::expectFail_failsOnSuccess()","68":"ExpectFailureTest::::expectFail_failsOnSuccess()","69":"ExpectFailureTest::::expectFail_failsOnSuccess()","70":"ExpectFailureTest::::expectFail_failsOnSuccess()","71":"ExpectFailureTest::::expectFail_failsOnSuccess()","72":"ExpectFailureTest::::expectFail_failsOnSuccess()","73":"ExpectFailureTest::::expectFail_failsOnSuccess()","75":"ExpectFailureTest::::expectFail_failsOnMultipleFailures()","76":"ExpectFailureTest::::expectFail_failsOnMultipleFailures()","77":"ExpectFailureTest::::expectFail_failsOnMultipleFailures()","78":"ExpectFailureTest::::expectFail_failsOnMultipleFailures()","79":"ExpectFailureTest::::expectFail_failsOnMultipleFailures()","80":"ExpectFailureTest::::expectFail_failsOnMultipleFailures()","81":"ExpectFailureTest::::expectFail_failsOnMultipleFailures()","82":"ExpectFailureTest::::expectFail_failsOnMultipleFailures()","83":"ExpectFailureTest::::expectFail_failsOnMultipleFailures()","84":"ExpectFailureTest::::expectFail_failsOnMultipleFailures()","85":"ExpectFailureTest::::expectFail_failsOnMultipleFailures()","87":"ExpectFailureTest::::expectFail_failsOnMultiplewhenTestings()","88":"ExpectFailureTest::::expectFail_failsOnMultiplewhenTestings()","89":"ExpectFailureTest::::expectFail_failsOnMultiplewhenTestings()","90":"ExpectFailureTest::::expectFail_failsOnMultiplewhenTestings()","91":"ExpectFailureTest::::expectFail_failsOnMultiplewhenTestings()","92":"ExpectFailureTest::::expectFail_failsOnMultiplewhenTestings()","93":"ExpectFailureTest::::expectFail_failsOnMultiplewhenTestings()","94":"ExpectFailureTest::::expectFail_failsOnMultiplewhenTestings()","95":"ExpectFailureTest::::expectFail_failsOnMultiplewhenTestings()","96":"ExpectFailureTest::::expectFail_failsOnMultiplewhenTestings()","97":"ExpectFailureTest::::expectFail_failsOnMultiplewhenTestings()","98":"ExpectFailureTest::::expectFail_failsOnMultiplewhenTestings()","99":"ExpectFailureTest::::expectFail_failsOnMultiplewhenTestings()","100":"ExpectFailureTest::::expectFail_failsOnMultiplewhenTestings()","102":"ExpectFailureTest::::expectFail_failsOnMultiplewhenTestings_thatFail()","103":"ExpectFailureTest::::expectFail_failsOnMultiplewhenTestings_thatFail()","104":"ExpectFailureTest::::expectFail_failsOnMultiplewhenTestings_thatFail()","105":"ExpectFailureTest::::expectFail_failsOnMultiplewhenTestings_thatFail()","106":"ExpectFailureTest::::expectFail_failsOnMultiplewhenTestings_thatFail()","107":"ExpectFailureTest::::expectFail_failsOnMultiplewhenTestings_thatFail()","108":"ExpectFailureTest::::expectFail_failsOnMultiplewhenTestings_thatFail()","109":"ExpectFailureTest::::expectFail_failsOnMultiplewhenTestings_thatFail()","110":"ExpectFailureTest::::expectFail_failsOnMultiplewhenTestings_thatFail()","111":"ExpectFailureTest::::expectFail_failsOnMultiplewhenTestings_thatFail()","113":"ExpectFailureTest::::expectFail_failsAfterTest()","114":"ExpectFailureTest::::expectFail_failsAfterTest()","115":"ExpectFailureTest::::expectFail_failsAfterTest()","116":"ExpectFailureTest::::expectFail_failsAfterTest()","117":"ExpectFailureTest::::expectFail_failsAfterTest()","118":"ExpectFailureTest::::expectFail_failsAfterTest()","119":"ExpectFailureTest::::expectFail_failsAfterTest()","120":"ExpectFailureTest::::expectFail_failsAfterTest()","121":"ExpectFailureTest::::expectFail_failsAfterTest()","122":"ExpectFailureTest::::expectFail_failsAfterTest()","123":"ExpectFailureTest::::expectFail_failsAfterTest()","124":"ExpectFailureTest::::expectFail_failsAfterTest()","125":"ExpectFailureTest::::expectFail_failsAfterTest()","127":"ExpectFailureTest::::expectFail_whenTestingWithoutInContext_shouldFail()","128":"ExpectFailureTest::::expectFail_whenTestingWithoutInContext_shouldFail()","129":"ExpectFailureTest::::expectFail_whenTestingWithoutInContext_shouldFail()","130":"ExpectFailureTest::::expectFail_whenTestingWithoutInContext_shouldFail()","131":"ExpectFailureTest::::expectFail_whenTestingWithoutInContext_shouldFail()","132":"ExpectFailureTest::::expectFail_whenTestingWithoutInContext_shouldFail()","133":"ExpectFailureTest::::expectFail_whenTestingWithoutInContext_shouldFail()","134":"ExpectFailureTest::::expectFail_whenTestingWithoutInContext_shouldFail()","135":"ExpectFailureTest::::expectFail_whenTestingWithoutInContext_shouldFail()","136":"ExpectFailureTest::::expectFail_whenTestingWithoutInContext_shouldFail()","137":"ExpectFailureTest::::expectFail_whenTestingWithoutInContext_shouldFail()","139":"ExpectFailureTest::::strings()","140":"ExpectFailureTest::::strings()","141":"ExpectFailureTest::::strings()","142":"ExpectFailureTest::::strings()","143":"ExpectFailureTest::::strings()","144":"ExpectFailureTest::::strings()","145":"ExpectFailureTest::::strings()","146":"ExpectFailureTest::::strings()","156":"ExpectFailureTest.BadSubject::::isEqualTo(java.lang.Object)","157":"ExpectFailureTest.BadSubject::::isEqualTo(java.lang.Object)","158":"ExpectFailureTest.BadSubject::::isEqualTo(java.lang.Object)","159":"ExpectFailureTest.BadSubject::::isEqualTo(java.lang.Object)","160":"ExpectFailureTest.BadSubject::::isEqualTo(java.lang.Object)","161":"ExpectFailureTest.BadSubject::::isEqualTo(java.lang.Object)","162":"ExpectFailureTest.BadSubject::::isEqualTo(java.lang.Object)","163":"ExpectFailureTest.BadSubject::::isEqualTo(java.lang.Object)","164":"ExpectFailureTest.BadSubject::::isEqualTo(java.lang.Object)","166":"ExpectFailureTest.BadSubject::::badSubject()","167":"ExpectFailureTest.BadSubject::::badSubject()","168":"ExpectFailureTest.BadSubject::::badSubject()","169":"ExpectFailureTest.BadSubject::::badSubject()","170":"ExpectFailureTest.BadSubject::::badSubject()","171":"ExpectFailureTest.BadSubject::::badSubject()","172":"ExpectFailureTest.BadSubject::::badSubject()","173":"ExpectFailureTest.BadSubject::::badSubject()"},"tests":[{"test_lines":[37,41],"covered_lines":[70,71,72,78,88,89,92,96,97,107,108,129,132,140,147,148],"label":"ExpectFailure::::getFailure()"},{"test_lines":[43,48],"covered_lines":[70,71,72,78,88,89,92,96,97,107,108,129,132,140,147,148],"label":"ExpectFailure::::getFailure()"},{"test_lines":[50,54],"covered_lines":[70,71,72,78,88,89,92,96,97,107,108,129,132,140,147,148],"label":"ExpectFailure::::getFailure()"},{"test_lines":[56,60],"covered_lines":[70,71,72,78,107,108],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[62,73],"covered_lines":[70,71,72,78,88,89,92,96,97,107,108,129,130],"label":"ExpectFailure::::getFailure()"},{"test_lines":[75,85],"covered_lines":[70,71,72,78,88,89,92,96,97,107,108,140,142,143,145,147,148],"label":"ExpectFailure::::captureFailure(java.lang.AssertionError)"},{"test_lines":[87,100],"covered_lines":[70,71,72,78,88,89,92,93,96,97,107,108],"label":"ExpectFailure::::whenTesting()"},{"test_lines":[102,111],"covered_lines":[70,71,72,78,88,89,90,92,96,97,107,108,140,147,148],"label":"ExpectFailure::::whenTesting()"},{"test_lines":[113,125],"covered_lines":[70,71,72,78,88,89,92,96,97,107,108,120,121],"label":"ExpectFailure::::ensureFailureCaught()"},{"test_lines":[127,137],"covered_lines":[70,71,72,78,107,108],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/truth/core/src/main/java/com/google/common/truth/PrimitiveDoubleArraySubject.java":{"class_content":["/*\n"," * Copyright (c) 2014 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","\n","package com.google.common.truth;\n","\n","import static com.google.common.base.Preconditions.checkArgument;\n","import static com.google.common.base.Preconditions.checkNotNull;\n","import static com.google.common.truth.Correspondence.tolerance;\n","\n","import com.google.common.primitives.Doubles;\n","import com.google.errorprone.annotations.CanIgnoreReturnValue;\n","import java.util.Arrays;\n","import org.checkerframework.checker.nullness.qual.Nullable;\n","\n","/**\n"," * A Subject for {@code double[]}.\n"," *\n"," * @author Christian Gruber (cgruber@israfil.net)\n"," */\n","public final class PrimitiveDoubleArraySubject extends AbstractArraySubject {\n","  private final double @Nullable [] actual;\n","\n","  PrimitiveDoubleArraySubject(\n","      FailureMetadata metadata, double @Nullable [] o, @Nullable String typeDescription) {\n","    super(metadata, o, typeDescription);\n","    this.actual = o;\n","  }\n","\n","  /**\n","   * A check that the actual array and {@code expected} are arrays of the same length and type,\n","   * containing elements such that each element in {@code expected} is equal to each element in the\n","   * actual array, and in the same position, with element equality defined the same way that {@link\n","   * Arrays#equals(double[], double[])} and {@link Double#equals(Object)} define it (which is\n","   * different to the way that the {@code ==} operator on primitive {@code double} defines it). This\n","   * method is <i>not</i> recommended when the code under test is doing any kind of arithmetic: use\n","   * {@link #usingTolerance} with a suitable tolerance in that case, e.g. {@code\n","   * assertThat(actualArray).usingTolerance(1.0e-10).containsExactly(expectedArray).inOrder()}.\n","   * (Remember that the exact result of floating point arithmetic is sensitive to apparently trivial\n","   * changes such as replacing {@code (a + b) + c} with {@code a + (b + c)}, and that unless {@code\n","   * strictfp} is in force even the result of {@code (a + b) + c} is sensitive to the JVM's choice\n","   * of precision for the intermediate result.) This method is recommended when the code under test\n","   * is specified as either copying values without modification from its input or returning\n","   * well-defined literal or constant values.\n","   *\n","   * <ul>\n","   *   <li>It considers {@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, and\n","   *       {@link Double#NaN} to be equal to themselves (contrast with {@code usingTolerance(0.0)}\n","   *       which does not).\n","   *   <li>It does <i>not</i> consider {@code -0.0} to be equal to {@code 0.0} (contrast with {@code\n","   *       usingTolerance(0.0)} which does).\n","   * </ul>\n","   */\n","  // TODO(cpovirk): Move some or all of this Javadoc to the supertype, maybe deleting this override?\n","  @Override\n","  public void isEqualTo(@Nullable Object expected) {\n","    super.isEqualTo(expected);\n","  }\n","\n","  /**\n","   * A check that the actual array and {@code expected} are not arrays of the same length and type,\n","   * containing elements such that each element in {@code expected} is equal to each element in the\n","   * actual array, and in the same position, with element equality defined the same way that {@link\n","   * Arrays#equals(double[], double[])} and {@link Double#equals(Object)} define it (which is\n","   * different to the way that the {@code ==} operator on primitive {@code double} defines it). See\n","   * {@link #isEqualTo(Object)} for advice on when exact equality is recommended.\n","   *\n","   * <ul>\n","   *   <li>It considers {@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, and\n","   *       {@link Double#NaN} to be equal to themselves.\n","   *   <li>It does <i>not</i> consider {@code -0.0} to be equal to {@code 0.0}.\n","   * </ul>\n","   */\n","  @Override\n","  public void isNotEqualTo(@Nullable Object expected) {\n","    super.isNotEqualTo(expected);\n","  }\n","\n","  /**\n","   * Starts a method chain for a check in which the actual values (i.e. the elements of the array\n","   * under test) are compared to expected elements using a {@link Correspondence} which considers\n","   * values to correspond if they are finite values within {@code tolerance} of each other. The\n","   * check is actually executed by continuing the method chain. For example:\n","   *\n","   * <pre>{@code\n","   * assertThat(actualDoubleArray).usingTolerance(1.0e-5).contains(3.14159);\n","   * }</pre>\n","   *\n","   * <ul>\n","   *   <li>It does not consider values to correspond if either value is infinite or NaN.\n","   *   <li>It considers {@code -0.0} to be within any tolerance of {@code 0.0}.\n","   *   <li>The expected values provided later in the chain will be {@link Number} instances which\n","   *       will be converted to doubles, which may result in a loss of precision for some numeric\n","   *       types.\n","   *   <li>The subsequent methods in the chain may throw a {@link NullPointerException} if any\n","   *       expected {@link Number} instance is null.\n","   * </ul>\n","   *\n","   * @param tolerance an inclusive upper bound on the difference between the double values of the\n","   *     actual and expected numbers, which must be a non-negative finite value, i.e. not {@link\n","   *     Double#NaN}, {@link Double#POSITIVE_INFINITY}, or negative, including {@code -0.0}\n","   */\n","  public DoubleArrayAsIterable usingTolerance(double tolerance) {\n","    return new DoubleArrayAsIterable(tolerance(tolerance), iterableSubject());\n","  }\n","\n","  private static final Correspondence<Double, Number> EXACT_EQUALITY_CORRESPONDENCE =\n","      Correspondence.from(\n","          // If we were allowed lambdas, this would be:\n","          // (a, e) -> Double.doubleToLongBits(a) == Double.doubleToLongBits(checkedToDouble(e)),\n","          new Correspondence.BinaryPredicate<Double, Number>() {\n","            @Override\n","            public boolean apply(Double actual, Number expected) {\n","              return Double.doubleToLongBits(actual)\n","                  == Double.doubleToLongBits(checkedToDouble(expected));\n","            }\n","          },\n","          \"is exactly equal to\");\n","\n","  private static double checkedToDouble(Number expected) {\n","    checkNotNull(expected);\n","    checkArgument(\n","        expected instanceof Double\n","            || expected instanceof Float\n","            || expected instanceof Integer\n","            || expected instanceof Long,\n","        \"Expected value in assertion using exact double equality was of unsupported type %s \"\n","            + \"(it may not have an exact double representation)\",\n","        expected.getClass());\n","    if (expected instanceof Long) {\n","      checkArgument(\n","          Math.abs((Long) expected) <= 1L << 53,\n","          \"Expected value %s in assertion using exact double equality was a long with an absolute \"\n","              + \"value greater than 2^52 which has no exact double representation\",\n","          expected);\n","    }\n","    return expected.doubleValue();\n","  }\n","\n","  /**\n","   * Starts a method chain for a check in which the actual values (i.e. the elements of the array\n","   * under test) are compared to expected elements using a {@link Correspondence} which considers\n","   * values to correspond if they are exactly equal, with equality defined by {@link Double#equals}.\n","   * This method is <i>not</i> recommended when the code under test is doing any kind of arithmetic:\n","   * use {@link #usingTolerance} with a suitable tolerance in that case. (Remember that the exact\n","   * result of floating point arithmetic is sensitive to apparently trivial changes such as\n","   * replacing {@code (a + b) + c} with {@code a + (b + c)}, and that unless {@code strictfp} is in\n","   * force even the result of {@code (a + b) + c} is sensitive to the JVM's choice of precision for\n","   * the intermediate result.) This method is recommended when the code under test is specified as\n","   * either copying a value without modification from its input or returning a well-defined literal\n","   * or constant value. The check is actually executed by continuing the method chain. For example:\n","   *\n","   * <pre>{@code\n","   * assertThat(actualDoubleArray).usingExactEquality().contains(3.14159);\n","   * }</pre>\n","   *\n","   * <p>For convenience, some subsequent methods accept expected values as {@link Number} instances.\n","   * These numbers must be either of type {@link Double}, {@link Float}, {@link Integer}, or {@link\n","   * Long}, and if they are {@link Long} then their absolute values must not exceed 2^53 which is\n","   * just over 9e15. (This restriction ensures that the expected values have exact {@link Double}\n","   * representations: using exact equality makes no sense if they do not.)\n","   *\n","   * <ul>\n","   *   <li>It considers {@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, and\n","   *       {@link Double#NaN} to be equal to themselves (contrast with {@code usingTolerance(0.0)}\n","   *       which does not).\n","   *   <li>It does <i>not</i> consider {@code -0.0} to be equal to {@code 0.0} (contrast with {@code\n","   *       usingTolerance(0.0)} which does).\n","   *   <li>The subsequent methods in the chain may throw a {@link NullPointerException} if any\n","   *       expected {@link Double} instance is null.\n","   * </ul>\n","   */\n","  public DoubleArrayAsIterable usingExactEquality() {\n","    return new DoubleArrayAsIterable(EXACT_EQUALITY_CORRESPONDENCE, iterableSubject());\n","  }\n","\n","  /**\n","   * A partially specified check for doing assertions on the array similar to the assertions\n","   * supported for {@link Iterable} subjects, in which the elements of the array under test are\n","   * compared to expected elements using either exact or tolerant double equality: see {@link\n","   * #usingExactEquality} and {@link #usingTolerance}. Call methods on this object to actually\n","   * execute the check.\n","   *\n","   * <p>In the exact equality case, the methods on this class which take {@link Number} arguments\n","   * only accept certain instances: again, see {@link #usingExactEquality} for details.\n","   */\n","  public static final class DoubleArrayAsIterable\n","      extends IterableSubject.UsingCorrespondence<Double, Number> {\n","\n","    DoubleArrayAsIterable(\n","        Correspondence<? super Double, Number> correspondence, IterableSubject subject) {\n","      super(subject, correspondence);\n","    }\n","\n","    /**\n","     * As {@link #containsAtLeast(Object, Object, Object...)} but taking a primitive double array.\n","     */\n","    @CanIgnoreReturnValue\n","    public Ordered containsAtLeast(double[] expected) {\n","      return containsAtLeastElementsIn(Doubles.asList(expected));\n","    }\n","\n","    /** As {@link #containsAnyOf(Object, Object, Object...)} but taking a primitive double array. */\n","    public void containsAnyOf(double[] expected) {\n","      containsAnyIn(Doubles.asList(expected));\n","    }\n","\n","    /** As {@link #containsExactly(Object...)} but taking a primitive double array. */\n","    @CanIgnoreReturnValue\n","    public Ordered containsExactly(double[] expected) {\n","      return containsExactlyElementsIn(Doubles.asList(expected));\n","    }\n","\n","    /**\n","     * As {@link #containsNoneOf(Object, Object, Object...)} but taking a primitive double array.\n","     */\n","    public void containsNoneOf(double[] excluded) {\n","      containsNoneIn(Doubles.asList(excluded));\n","    }\n","  }\n","\n","  private IterableSubject iterableSubject() {\n","    return checkNoNeedToDisplayBothValues(\"asList()\")\n","        .about(iterablesWithCustomDoubleToString())\n","        .that(Doubles.asList(checkNotNull(actual)));\n","  }\n","\n","  /*\n","   * TODO(cpovirk): Should we make Doubles.asList().toString() smarter rather than do all this?\n","   *\n","   * TODO(cpovirk): Or find a general solution for this and MultimapSubject.IterableEntries. But\n","   * note that here we don't use _exactly_ PrimitiveDoubleArraySubject.this.toString(), as that\n","   * contains \"double[].\" Or maybe we should stop including that in\n","   * PrimitiveDoubleArraySubject.this.toString(), too, someday?\n","   */\n","  private Factory<IterableSubject, Iterable<?>> iterablesWithCustomDoubleToString() {\n","    return new Factory<IterableSubject, Iterable<?>>() {\n","      @Override\n","      public IterableSubject createSubject(FailureMetadata metadata, @Nullable Iterable<?> actual) {\n","        return new IterableSubjectWithInheritedToString(metadata, actual);\n","      }\n","    };\n","  }\n","\n","  private final class IterableSubjectWithInheritedToString extends IterableSubject {\n","\n","    IterableSubjectWithInheritedToString(FailureMetadata metadata, @Nullable Iterable<?> actual) {\n","      super(metadata, actual);\n","    }\n","\n","    @Override\n","    protected String actualCustomStringRepresentation() {\n","      return PrimitiveDoubleArraySubject.this\n","          .actualCustomStringRepresentationForPackageMembersToCall();\n","    }\n","  }\n","}\n"],"test_content":["/*\n"," * Copyright (c) 2014 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.truth.Truth.assertThat;\n","import static java.lang.Double.NEGATIVE_INFINITY;\n","import static java.lang.Double.NaN;\n","import static java.lang.Double.POSITIVE_INFINITY;\n","import static java.lang.Math.nextAfter;\n","import static org.junit.Assert.fail;\n","\n","import com.google.common.annotations.GwtIncompatible;\n","import java.math.BigDecimal;\n","import java.math.BigInteger;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import org.junit.runners.JUnit4;\n","\n","/**\n"," * Tests for {@link PrimitiveDoubleArraySubject}.\n"," *\n"," * @author Christian Gruber (cgruber@israfil.net)\n"," */\n","@RunWith(JUnit4.class)\n","public class PrimitiveDoubleArraySubjectTest extends BaseSubjectTestCase {\n","  private static final double DEFAULT_TOLERANCE = 0.000005d;\n","\n","  private static final double OVER_2POINT2 = 2.2000000000000006d;\n","  private static final double TOLERABLE_2 = 2.0000049999999994d;\n","  private static final double TOLERABLE_2POINT2 = 2.2000049999999995d;\n","  private static final double INTOLERABLE_2POINT2 = 2.2000050000000004d;\n","  private static final double TOLERABLE_3POINT3 = 3.300004999999999d;\n","  private static final double INTOLERABLE_3POINT3 = 3.300005d;\n","  private static final double UNDER_MIN_OF_LONG = -9.223372036854778E18d;\n","\n","  @Test\n","  @GwtIncompatible(\"Math.nextAfter\")\n","  public void testDoubleConstants_matchNextAfter() {\n","    assertThat(nextAfter(2.0 + DEFAULT_TOLERANCE, NEGATIVE_INFINITY)).isEqualTo(TOLERABLE_2);\n","    assertThat(nextAfter(2.2 + DEFAULT_TOLERANCE, NEGATIVE_INFINITY)).isEqualTo(TOLERABLE_2POINT2);\n","    assertThat(nextAfter(2.2 + DEFAULT_TOLERANCE, POSITIVE_INFINITY))\n","        .isEqualTo(INTOLERABLE_2POINT2);\n","    assertThat(nextAfter(2.2, POSITIVE_INFINITY)).isEqualTo(OVER_2POINT2);\n","    assertThat(nextAfter(3.3 + DEFAULT_TOLERANCE, NEGATIVE_INFINITY)).isEqualTo(TOLERABLE_3POINT3);\n","    assertThat(nextAfter(3.3 + DEFAULT_TOLERANCE, POSITIVE_INFINITY))\n","        .isEqualTo(INTOLERABLE_3POINT3);\n","    assertThat(nextAfter((double) Long.MIN_VALUE, NEGATIVE_INFINITY)).isEqualTo(UNDER_MIN_OF_LONG);\n","  }\n","\n","  @Test\n","  public void isEqualTo_WithoutToleranceParameter_Success() {\n","    assertThat(array(2.2d, 5.4d, POSITIVE_INFINITY, NEGATIVE_INFINITY, 0.0, -0.0))\n","        .isEqualTo(array(2.2d, 5.4d, POSITIVE_INFINITY, NEGATIVE_INFINITY, 0.0, -0.0));\n","  }\n","\n","  @Test\n","  @GwtIncompatible(\"gwt Arrays.equals(double[], double[])\")\n","  public void isEqualTo_WithoutToleranceParameter_NaN_Success() {\n","    assertThat(array(2.2d, 5.4d, POSITIVE_INFINITY, NEGATIVE_INFINITY, NaN, 0.0, -0.0))\n","        .isEqualTo(array(2.2d, 5.4d, POSITIVE_INFINITY, NEGATIVE_INFINITY, NaN, 0.0, -0.0));\n","  }\n","\n","  @Test\n","  public void isEqualTo_WithoutToleranceParameter_Fail_NotEqual() {\n","    expectFailureWhenTestingThat(array(2.2d)).isEqualTo(array(OVER_2POINT2));\n","    assertFailureValue(\"expected\", \"[2.2000000000000006]\");\n","    assertFailureValue(\"but was\", \"[2.2]\");\n","    assertFailureValue(\"differs at index\", \"[0]\");\n","  }\n","\n","  @Test\n","  public void isEqualTo_WithoutToleranceParameter_Fail_DifferentOrder() {\n","    expectFailureWhenTestingThat(array(2.2d, 3.3d)).isEqualTo(array(3.3d, 2.2d));\n","  }\n","\n","  @Test\n","  public void isEqualTo_WithoutToleranceParameter_Fail_Longer() {\n","    expectFailureWhenTestingThat(array(2.2d, 3.3d)).isEqualTo(array(2.2d, 3.3d, 4.4d));\n","    assertFailureKeys(\"expected\", \"but was\", \"wrong length\", \"expected\", \"but was\");\n","    assertFailureValueIndexed(\"expected\", 1, \"3\");\n","    assertFailureValueIndexed(\"but was\", 1, \"2\");\n","  }\n","\n","  @Test\n","  public void isEqualTo_WithoutToleranceParameter_Fail_Shorter() {\n","    expectFailureWhenTestingThat(array(2.2d, 3.3d)).isEqualTo(array(2.2d));\n","  }\n","\n","  @Test\n","  public void isEqualTo_WithoutToleranceParameter_Fail_PlusMinusZero() {\n","    expectFailureWhenTestingThat(array(0.0d)).isEqualTo(array(-0.0d));\n","    assertFailureValue(\"expected\", \"[-0.0]\");\n","    assertFailureValue(\"but was\", \"[0.0]\");\n","  }\n","\n","  @Test\n","  public void isEqualTo_WithoutToleranceParameter_Fail_NotAnArray() {\n","    expectFailureWhenTestingThat(array(2.2d, 3.3d, 4.4d)).isEqualTo(new Object());\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_WithoutToleranceParameter_FailEquals() {\n","    expectFailureWhenTestingThat(array(2.2d, 5.4d, POSITIVE_INFINITY, NEGATIVE_INFINITY))\n","        .isNotEqualTo(array(2.2d, 5.4d, POSITIVE_INFINITY, NEGATIVE_INFINITY));\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_WithoutToleranceParameter_NaN_plusZero_FailEquals() {\n","    expectFailureWhenTestingThat(\n","            array(2.2d, 5.4d, POSITIVE_INFINITY, NEGATIVE_INFINITY, NaN, 0.0, -0.0))\n","        .isNotEqualTo(array(2.2d, 5.4d, POSITIVE_INFINITY, NEGATIVE_INFINITY, NaN, 0.0, -0.0));\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_WithoutToleranceParameter_Success_NotEqual() {\n","    assertThat(array(2.2d)).isNotEqualTo(array(OVER_2POINT2));\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_WithoutToleranceParameter_Success_DifferentOrder() {\n","    assertThat(array(2.2d, 3.3d)).isNotEqualTo(array(3.3d, 2.2d));\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_WithoutToleranceParameter_Success_Longer() {\n","    assertThat(array(2.2d, 3.3d)).isNotEqualTo(array(2.2d, 3.3d, 4.4d));\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_WithoutToleranceParameter_Success_Shorter() {\n","    assertThat(array(2.2d, 3.3d)).isNotEqualTo(array(2.2d));\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_WithoutToleranceParameter_Success_PlusMinusZero() {\n","    assertThat(array(0.0d)).isNotEqualTo(array(-0.0d));\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_WithoutToleranceParameter_Success_NotAnArray() {\n","    assertThat(array(2.2d, 3.3d, 4.4d)).isNotEqualTo(new Object());\n","  }\n","\n","  @Test\n","  public void usingTolerance_contains_success() {\n","    assertThat(array(1.1, TOLERABLE_2POINT2, 3.3)).usingTolerance(DEFAULT_TOLERANCE).contains(2.2);\n","  }\n","\n","  @Test\n","  public void usingTolerance_contains_successWithExpectedLong() {\n","    assertThat(array(1.0, TOLERABLE_2, 3.0)).usingTolerance(DEFAULT_TOLERANCE).contains(2L);\n","  }\n","\n","  @Test\n","  public void usingTolerance_contains_failure() {\n","    expectFailureWhenTestingThat(array(1.1, INTOLERABLE_2POINT2, 3.3))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .contains(2.2);\n","    assertFailureKeys(\"value of\", \"expected to contain\", \"testing whether\", \"but was\");\n","    assertFailureValue(\"value of\", \"array.asList()\");\n","    assertFailureValue(\"expected to contain\", \"2.2\");\n","    assertFailureValue(\n","        \"testing whether\",\n","        \"actual element is a finite number within \" + DEFAULT_TOLERANCE + \" of expected element\");\n","    assertFailureValue(\"but was\", \"[1.1, \" + INTOLERABLE_2POINT2 + \", 3.3]\");\n","  }\n","\n","  @Test\n","  public void usingTolerance_contains_failureWithInfinity() {\n","    expectFailureWhenTestingThat(array(1.1, POSITIVE_INFINITY, 3.3))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .contains(POSITIVE_INFINITY);\n","    assertFailureKeys(\"value of\", \"expected to contain\", \"testing whether\", \"but was\");\n","    assertFailureValue(\"expected to contain\", \"Infinity\");\n","    assertFailureValue(\"but was\", \"[1.1, Infinity, 3.3]\");\n","  }\n","\n","  @Test\n","  public void usingTolerance_contains_failureWithNaN() {\n","    expectFailureWhenTestingThat(array(1.1, NaN, 3.3))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .contains(NaN);\n","    assertFailureKeys(\"value of\", \"expected to contain\", \"testing whether\", \"but was\");\n","    assertFailureValue(\"expected to contain\", \"NaN\");\n","    assertFailureValue(\"but was\", \"[1.1, NaN, 3.3]\");\n","  }\n","\n","  @Test\n","  public void usingTolerance_contains_successWithNegativeZero() {\n","    assertThat(array(1.1, -0.0, 3.3)).usingTolerance(0.0).contains(0.0);\n","  }\n","\n","  @Test\n","  public void usingTolerance_contains_otherTypes() {\n","    // Expected value is Float\n","    assertThat(array(1.0, 2.0 + 0.5 * DEFAULT_TOLERANCE, 3.0))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .contains(2.0f);\n","    // Expected value is Integer\n","    assertThat(array(1.0, 2.0 + 0.5 * DEFAULT_TOLERANCE, 3.0))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .contains(2);\n","    // Expected value is Integer.MAX_VALUE\n","    assertThat(array(1.0, Integer.MAX_VALUE + 0.5 * DEFAULT_TOLERANCE, 3.0))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .contains(Integer.MAX_VALUE);\n","    // Expected value is Long\n","    assertThat(array(1.0, 2.0 + 0.5 * DEFAULT_TOLERANCE, 3.0))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .contains(2L);\n","    // Expected value is Long.MIN_VALUE. This is -1*2^63, which has an exact double representation.\n","    // For the actual value we use the next value down, which is is 2^11 smaller (because the\n","    // resolution of doubles with absolute values between 2^63 and 2^64 is 2^11). So we'll make the\n","    // assertion with a tolerance of 2^12.\n","    assertThat(array(1.0, UNDER_MIN_OF_LONG, 3.0)).usingTolerance(1 << 12).contains(Long.MIN_VALUE);\n","    // Expected value is BigInteger\n","    assertThat(array(1.0, 2.0 + 0.5 * DEFAULT_TOLERANCE, 3.0))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .contains(BigInteger.valueOf(2));\n","    // Expected value is BigDecimal\n","    assertThat(array(1.0, 2.0 + 0.5 * DEFAULT_TOLERANCE, 3.0))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .contains(BigDecimal.valueOf(2.0));\n","  }\n","\n","  @Test\n","  public void usingTolerance_contains_nullExpected() {\n","    expectFailureWhenTestingThat(array(1.1, 2.2, 3.3))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .contains(null);\n","    assertFailureKeys(\n","        \"value of\",\n","        \"expected to contain\",\n","        \"testing whether\",\n","        \"but was\",\n","        \"additionally, one or more exceptions were thrown while comparing elements\",\n","        \"first exception\");\n","    assertThatFailure()\n","        .factValue(\"first exception\")\n","        .startsWith(\"compare(1.1, null) threw java.lang.NullPointerException\");\n","  }\n","\n","  @Test\n","  public void usingTolerance_contains_negativeTolerance() {\n","    try {\n","      assertThat(array(1.1, 2.2, 3.3)).usingTolerance(-1.1 * DEFAULT_TOLERANCE).contains(2.0f);\n","      fail(\"Expected IllegalArgumentException to be thrown but wasn't\");\n","    } catch (IllegalArgumentException expected) {\n","      assertThat(expected)\n","          .hasMessageThat()\n","          .isEqualTo(\"tolerance (\" + -1.1 * DEFAULT_TOLERANCE + \") cannot be negative\");\n","    }\n","  }\n","\n","  @Test\n","  public void usingTolerance_containsAtLeast_primitiveDoubleArray_success() {\n","    assertThat(array(1.1, TOLERABLE_2POINT2, 3.3))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .containsAtLeast(array(2.2, 1.1));\n","  }\n","\n","  @Test\n","  public void usingTolerance_containsAtLeast_primitiveDoubleArray_failure() {\n","    expectFailureWhenTestingThat(array(1.1, TOLERABLE_2POINT2, 3.3))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .containsAtLeast(array(2.2, 99.99));\n","    assertFailureKeys(\n","        \"value of\",\n","        \"missing (1)\",\n","        \"---\",\n","        \"expected to contain at least\",\n","        \"testing whether\",\n","        \"but was\");\n","    assertFailureValue(\"missing (1)\", \"99.99\");\n","  }\n","\n","  @Test\n","  public void usingTolerance_containsAtLeast_primitiveDoubleArray_inOrder_success() {\n","    assertThat(array(1.1, TOLERABLE_2POINT2, 3.3))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .containsAtLeast(array(1.1, 2.2))\n","        .inOrder();\n","  }\n","\n","  @Test\n","  public void usingTolerance_containsAtLeast_primitiveDoubleArray_inOrder_failure() {\n","    expectFailureWhenTestingThat(array(1.1, TOLERABLE_2POINT2, 3.3))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .containsAtLeast(array(2.2, 1.1))\n","        .inOrder();\n","    assertFailureKeys(\n","        \"value of\",\n","        \"required elements were all found, but order was wrong\",\n","        \"expected order for required elements\",\n","        \"testing whether\",\n","        \"but was\");\n","    assertFailureValue(\"expected order for required elements\", \"[2.2, 1.1]\");\n","  }\n","\n","  @Test\n","  public void usingTolerance_containsAnyOf_primitiveDoubleArray_success() {\n","    assertThat(array(1.1, TOLERABLE_2POINT2, 3.3))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .containsAnyOf(array(99.99, 2.2));\n","  }\n","\n","  @Test\n","  public void usingTolerance_containsAnyOf_primitiveDoubleArray_failure() {\n","    expectFailureWhenTestingThat(array(1.1, TOLERABLE_2POINT2, 3.3))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .containsAnyOf(array(99.99, 999.999));\n","    assertFailureKeys(\"value of\", \"expected to contain any of\", \"testing whether\", \"but was\");\n","    assertFailureValue(\"expected to contain any of\", \"[99.99, 999.999]\");\n","  }\n","\n","  @Test\n","  public void usingTolerance_containsExactly_primitiveDoubleArray_success() {\n","    assertThat(array(1.1, TOLERABLE_2POINT2, 3.3))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .containsExactly(array(2.2, 1.1, 3.3));\n","  }\n","\n","  @Test\n","  public void usingTolerance_containsExactly_primitiveDoubleArray_failure() {\n","    expectFailureWhenTestingThat(array(1.1, TOLERABLE_2POINT2, 3.3))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .containsExactly(array(2.2, 1.1));\n","    assertFailureKeys(\n","        \"value of\", \"unexpected (1)\", \"---\", \"expected\", \"testing whether\", \"but was\");\n","    assertFailureValue(\"unexpected (1)\", \"3.3\");\n","  }\n","\n","  @Test\n","  public void usingTolerance_containsExactly_primitiveDoubleArray_inOrder_success() {\n","    assertThat(array(1.1, TOLERABLE_2POINT2, 3.3))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .containsExactly(array(1.1, 2.2, 3.3))\n","        .inOrder();\n","  }\n","\n","  @Test\n","  public void usingTolerance_containsExactly_primitiveDoubleArray_inOrder_failure() {\n","    expectFailureWhenTestingThat(array(1.1, TOLERABLE_2POINT2, 3.3))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .containsExactly(array(2.2, 1.1, 3.3))\n","        .inOrder();\n","    assertFailureKeys(\n","        \"value of\",\n","        \"contents match, but order was wrong\",\n","        \"expected\",\n","        \"testing whether\",\n","        \"but was\");\n","    assertFailureValue(\"expected\", \"[2.2, 1.1, 3.3]\");\n","  }\n","\n","  @Test\n","  public void usingTolerance_containsNoneOf_primitiveDoubleArray_success() {\n","    assertThat(array(1.1, TOLERABLE_2POINT2, 3.3))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .containsNoneOf(array(99.99, 999.999));\n","  }\n","\n","  @Test\n","  public void usingTolerance_containsNoneOf_primitiveDoubleArray_failure() {\n","    expectFailureWhenTestingThat(array(1.1, TOLERABLE_2POINT2, 3.3))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .containsNoneOf(array(99.99, 2.2));\n","    assertFailureKeys(\n","        \"value of\",\n","        \"expected not to contain any of\",\n","        \"testing whether\",\n","        \"but contained\",\n","        \"corresponding to\",\n","        \"---\",\n","        \"full contents\");\n","    assertFailureValue(\"expected not to contain any of\", \"[99.99, 2.2]\");\n","    assertFailureValue(\"but contained\", \"[\" + TOLERABLE_2POINT2 + \"]\");\n","    assertFailureValue(\"corresponding to\", \"2.2\");\n","  }\n","\n","  @Test\n","  public void usingExactEquality_contains_success() {\n","    assertThat(array(1.1, 2.2, 3.3)).usingExactEquality().contains(2.2);\n","  }\n","\n","  @Test\n","  public void usingExactEquality_contains_failure() {\n","    expectFailureWhenTestingThat(array(1.1, OVER_2POINT2, 3.3)).usingExactEquality().contains(2.2);\n","    assertFailureKeys(\"value of\", \"expected to contain\", \"testing whether\", \"but was\");\n","    assertFailureValue(\"expected to contain\", \"2.2\");\n","    assertFailureValue(\"testing whether\", \"actual element is exactly equal to expected element\");\n","    assertFailureValue(\"but was\", \"[1.1, \" + OVER_2POINT2 + \", 3.3]\");\n","  }\n","\n","  @Test\n","  public void usingExactEquality_contains_otherTypes() {\n","    // Expected value is Float\n","    assertThat(array(1.0, 2.0, 3.0)).usingExactEquality().contains(2.0f);\n","    // Expected value is Integer\n","    assertThat(array(1.0, 2.0, 3.0)).usingExactEquality().contains(2);\n","    assertThat(array(1.0, Integer.MAX_VALUE, 3.0)).usingExactEquality().contains(Integer.MAX_VALUE);\n","    // Expected value is Long - supported up to +/- 2^53\n","    assertThat(array(1.0, 2.0, 3.0)).usingExactEquality().contains(2L);\n","    assertThat(array(1.0, 1L << 53, 3.0)).usingExactEquality().contains(1L << 53);\n","  }\n","\n","  @Test\n","  public void usingExactEquality_contains_otherTypes_longOutOfRange() {\n","    long expected = (1L << 53) + 1L;\n","    expectFailureWhenTestingThat(array(1.1, 2.2, 3.3)).usingExactEquality().contains(expected);\n","    assertFailureKeys(\n","        \"value of\",\n","        \"expected to contain\",\n","        \"testing whether\",\n","        \"but was\",\n","        \"additionally, one or more exceptions were thrown while comparing elements\",\n","        \"first exception\");\n","    assertFailureValue(\"expected to contain\", Long.toString(expected));\n","    assertThatFailure()\n","        .factValue(\"first exception\")\n","        .startsWith(\"compare(1.1, \" + expected + \") threw java.lang.IllegalArgumentException\");\n","    assertThatFailure()\n","        .factValue(\"first exception\")\n","        .contains(\n","            \"Expected value \"\n","                + expected\n","                + \" in assertion using exact double equality was a long with an absolute value \"\n","                + \"greater than 2^52 which has no exact double representation\");\n","  }\n","\n","  @Test\n","  public void usingExactEquality_contains_otherTypes_bigIntegerNotSupported() {\n","    BigInteger expected = BigInteger.valueOf(2);\n","    expectFailureWhenTestingThat(array(1.1, 2.2, 3.3)).usingExactEquality().contains(expected);\n","    assertFailureKeys(\n","        \"value of\",\n","        \"expected to contain\",\n","        \"testing whether\",\n","        \"but was\",\n","        \"additionally, one or more exceptions were thrown while comparing elements\",\n","        \"first exception\");\n","    assertFailureValue(\"expected to contain\", \"2\");\n","    assertThatFailure()\n","        .factValue(\"first exception\")\n","        .startsWith(\"compare(1.1, \" + expected + \") threw java.lang.IllegalArgumentException\");\n","    assertThatFailure()\n","        .factValue(\"first exception\")\n","        .contains(\n","            \"Expected value in assertion using exact double equality was of unsupported type \"\n","                + BigInteger.class\n","                + \" (it may not have an exact double representation)\");\n","  }\n","\n","  @Test\n","  public void usingExactEquality_contains_otherTypes_bigDecimalNotSupported() {\n","    BigDecimal expected = BigDecimal.valueOf(2.0);\n","    expectFailureWhenTestingThat(array(1.1, 2.2, 3.3)).usingExactEquality().contains(expected);\n","    assertFailureKeys(\n","        \"value of\",\n","        \"expected to contain\",\n","        \"testing whether\",\n","        \"but was\",\n","        \"additionally, one or more exceptions were thrown while comparing elements\",\n","        \"first exception\");\n","    assertFailureValue(\"expected to contain\", expected.toString());\n","    assertThatFailure()\n","        .factValue(\"first exception\")\n","        .startsWith(\"compare(1.1, \" + expected + \") threw java.lang.IllegalArgumentException\");\n","    assertThatFailure()\n","        .factValue(\"first exception\")\n","        .contains(\n","            \"Expected value in assertion using exact double equality was of unsupported type \"\n","                + BigDecimal.class\n","                + \" (it may not have an exact double representation)\");\n","  }\n","\n","  @Test\n","  public void usingExactEquality_contains_successWithInfinity() {\n","    assertThat(array(1.1, POSITIVE_INFINITY, 3.3)).usingExactEquality().contains(POSITIVE_INFINITY);\n","  }\n","\n","  @Test\n","  public void usingExactEquality_contains_successWithNaN() {\n","    assertThat(array(1.1, NaN, 3.3)).usingExactEquality().contains(NaN);\n","  }\n","\n","  @Test\n","  public void usingExactEquality_contains_failureWithNegativeZero() {\n","    expectFailureWhenTestingThat(array(1.1, -0.0, 3.3)).usingExactEquality().contains(0.0);\n","    assertFailureKeys(\"value of\", \"expected to contain\", \"testing whether\", \"but was\");\n","    /*\n","     * TODO(cpovirk): Find a way to print \"0.0\" rather than 0 in the error, even under GWT. One\n","     * easy(?) hack would be to make UsingCorrespondence use Platform.doubleToString() when\n","     * applicable. Or maybe Correspondence implementations should be able to provide custom string\n","     * conversions, similar to how we plan to let them render their own diffs.\n","     */\n","    assertFailureValue(\"expected to contain\", Double.toString(0.0));\n","  }\n","\n","  @Test\n","  public void usingExactEquality_contains_nullExpected() {\n","    expectFailureWhenTestingThat(array(1.1, 2.2, 3.3)).usingExactEquality().contains(null);\n","    assertFailureKeys(\n","        \"value of\",\n","        \"expected to contain\",\n","        \"testing whether\",\n","        \"but was\",\n","        \"additionally, one or more exceptions were thrown while comparing elements\",\n","        \"first exception\");\n","    assertFailureValue(\"expected to contain\", \"null\");\n","    assertThatFailure()\n","        .factValue(\"first exception\")\n","        .startsWith(\"compare(1.1, null) threw java.lang.NullPointerException\");\n","  }\n","\n","  @Test\n","  public void usingExactEquality_containsAtLeast_primitiveDoubleArray_success() {\n","    assertThat(array(1.1, 2.2, 3.3)).usingExactEquality().containsAtLeast(array(2.2, 1.1));\n","  }\n","\n","  @Test\n","  public void usingExactEquality_containsAtLeast_primitiveDoubleArray_failure() {\n","    expectFailureWhenTestingThat(array(1.1, 2.2, 3.3))\n","        .usingExactEquality()\n","        .containsAtLeast(array(2.2, 99.99));\n","    assertFailureKeys(\n","        \"value of\",\n","        \"missing (1)\",\n","        \"---\",\n","        \"expected to contain at least\",\n","        \"testing whether\",\n","        \"but was\");\n","    assertFailureValue(\"missing (1)\", \"99.99\");\n","  }\n","\n","  @Test\n","  public void usingExactEquality_containsAtLeast_primitiveDoubleArray_inOrder_success() {\n","    assertThat(array(1.1, 2.2, 3.3))\n","        .usingExactEquality()\n","        .containsAtLeast(array(1.1, 2.2))\n","        .inOrder();\n","  }\n","\n","  @Test\n","  public void usingExactEquality_containsAtLeast_primitiveDoubleArray_inOrder_failure() {\n","    expectFailureWhenTestingThat(array(1.1, 2.2, 3.3))\n","        .usingExactEquality()\n","        .containsAtLeast(array(2.2, 1.1))\n","        .inOrder();\n","    assertFailureKeys(\n","        \"value of\",\n","        \"required elements were all found, but order was wrong\",\n","        \"expected order for required elements\",\n","        \"testing whether\",\n","        \"but was\");\n","    assertFailureValue(\"expected order for required elements\", \"[2.2, 1.1]\");\n","  }\n","\n","  @Test\n","  public void usingExactEquality_containsAnyOf_primitiveDoubleArray_success() {\n","    assertThat(array(1.1, 2.2, 3.3)).usingExactEquality().containsAnyOf(array(99.99, 2.2));\n","  }\n","\n","  @Test\n","  public void usingExactEquality_containsAnyOf_primitiveDoubleArray_failure() {\n","    expectFailureWhenTestingThat(array(1.1, 2.2, 3.3))\n","        .usingExactEquality()\n","        .containsAnyOf(array(99.99, 999.999));\n","    assertFailureKeys(\"value of\", \"expected to contain any of\", \"testing whether\", \"but was\");\n","  }\n","\n","  @Test\n","  public void usingExactEquality_containsExactly_primitiveDoubleArray_success() {\n","    assertThat(array(1.1, 2.2, 3.3)).usingExactEquality().containsExactly(array(2.2, 1.1, 3.3));\n","  }\n","\n","  @Test\n","  public void usingExactEquality_containsExactly_primitiveDoubleArray_failure() {\n","    expectFailureWhenTestingThat(array(1.1, 2.2, 3.3))\n","        .usingExactEquality()\n","        .containsExactly(array(2.2, 1.1));\n","    assertFailureKeys(\n","        \"value of\", \"unexpected (1)\", \"---\", \"expected\", \"testing whether\", \"but was\");\n","    assertFailureValue(\"unexpected (1)\", \"3.3\");\n","  }\n","\n","  @Test\n","  public void usingExactEquality_containsExactly_primitiveDoubleArray_inOrder_success() {\n","    assertThat(array(1.1, 2.2, 3.3))\n","        .usingExactEquality()\n","        .containsExactly(array(1.1, 2.2, 3.3))\n","        .inOrder();\n","  }\n","\n","  @Test\n","  public void usingExactEquality_containsExactly_primitiveDoubleArray_inOrder_failure() {\n","    expectFailureWhenTestingThat(array(1.1, 2.2, 3.3))\n","        .usingExactEquality()\n","        .containsExactly(array(2.2, 1.1, 3.3))\n","        .inOrder();\n","    assertFailureKeys(\n","        \"value of\",\n","        \"contents match, but order was wrong\",\n","        \"expected\",\n","        \"testing whether\",\n","        \"but was\");\n","    assertFailureValue(\"expected\", \"[2.2, 1.1, 3.3]\");\n","  }\n","\n","  @Test\n","  public void usingExactEquality_containsNoneOf_primitiveDoubleArray_success() {\n","    assertThat(array(1.1, 2.2, 3.3)).usingExactEquality().containsNoneOf(array(99.99, 999.999));\n","  }\n","\n","  @Test\n","  public void usingExactEquality_containsNoneOf_primitiveDoubleArray_failure() {\n","    expectFailureWhenTestingThat(array(1.1, 2.2, 3.3))\n","        .usingExactEquality()\n","        .containsNoneOf(array(99.99, 2.2));\n","    assertFailureKeys(\n","        \"value of\",\n","        \"expected not to contain any of\",\n","        \"testing whether\",\n","        \"but contained\",\n","        \"corresponding to\",\n","        \"---\",\n","        \"full contents\");\n","    assertFailureValue(\"expected not to contain any of\", \"[99.99, 2.2]\");\n","    assertFailureValue(\"but contained\", \"[2.2]\");\n","    assertFailureValue(\"corresponding to\", \"2.2\");\n","  }\n","\n","  @Test\n","  public void smallDifferenceInLongRepresentation() {\n","    expectFailureWhenTestingThat(array(-4.4501477170144023E-308))\n","        .isEqualTo(array(-4.450147717014402E-308));\n","  }\n","\n","  @Test\n","  public void noCommas() {\n","    // Maybe we should include commas, but we don't yet, so make sure we don't under GWT, either.\n","    expectFailureWhenTestingThat(array(10000.0)).isEqualTo(array(20000.0));\n","    assertFailureValue(\"expected\", \"[20000.0]\");\n","    assertFailureValue(\"but was\", \"[10000.0]\");\n","  }\n","\n","  private static double[] array(double... primitives) {\n","    return primitives;\n","  }\n","\n","  private PrimitiveDoubleArraySubject expectFailureWhenTestingThat(double[] actual) {\n","    return expectFailure.whenTesting().that(actual);\n","  }\n","}\n"],"method_lines_dic":{"PrimitiveDoubleArraySubject::::isEqualTo(java.lang.Object)":[67,70],"PrimitiveDoubleArraySubject::::isNotEqualTo(java.lang.Object)":[86,89],"PrimitiveDoubleArraySubject::::usingTolerance(double)":[115,117],"PrimitiveDoubleArraySubject::::apply(java.lang.Double,java.lang.Number)":[124,128],"PrimitiveDoubleArraySubject::::checkedToDouble(java.lang.Number)":[132,150],"PrimitiveDoubleArraySubject::::usingExactEquality()":[185,187],"PrimitiveDoubleArraySubject.DoubleArrayAsIterable::::containsAtLeast(double[])":[210,213],"PrimitiveDoubleArraySubject.DoubleArrayAsIterable::::containsAnyOf(double[])":[216,218],"PrimitiveDoubleArraySubject.DoubleArrayAsIterable::::containsExactly(double[])":[221,224],"PrimitiveDoubleArraySubject.DoubleArrayAsIterable::::containsNoneOf(double[])":[229,231],"PrimitiveDoubleArraySubject::::iterableSubject()":[234,238],"PrimitiveDoubleArraySubject::::iterablesWithCustomDoubleToString()":[248,255],"PrimitiveDoubleArraySubject.IterableSubjectWithInheritedToString::::actualCustomStringRepresentation()":[263,267]},"test_method_lines_dic":{"PrimitiveDoubleArraySubjectTest::::testDoubleConstants_matchNextAfter()":[49,61],"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Success()":[63,67],"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_NaN_Success()":[69,74],"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_NotEqual()":[76,82],"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_DifferentOrder()":[84,87],"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_Longer()":[89,95],"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_Shorter()":[97,100],"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_PlusMinusZero()":[102,107],"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_NotAnArray()":[109,112],"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_FailEquals()":[114,118],"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_NaN_plusZero_FailEquals()":[120,125],"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_NotEqual()":[127,130],"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_DifferentOrder()":[132,135],"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_Longer()":[137,140],"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_Shorter()":[142,145],"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_PlusMinusZero()":[147,150],"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_NotAnArray()":[152,155],"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_success()":[157,160],"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_successWithExpectedLong()":[162,165],"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_failure()":[167,179],"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_failureWithInfinity()":[181,189],"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_failureWithNaN()":[191,199],"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_successWithNegativeZero()":[201,204],"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_otherTypes()":[206,237],"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_nullExpected()":[239,254],"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_negativeTolerance()":[256,266],"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_success()":[268,273],"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_failure()":[275,288],"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_inOrder_success()":[290,296],"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_inOrder_failure()":[298,311],"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAnyOf_primitiveDoubleArray_success()":[313,318],"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAnyOf_primitiveDoubleArray_failure()":[320,327],"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_success()":[329,334],"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_failure()":[336,344],"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_inOrder_success()":[346,352],"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_inOrder_failure()":[354,367],"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsNoneOf_primitiveDoubleArray_success()":[369,374],"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsNoneOf_primitiveDoubleArray_failure()":[376,392],"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_success()":[394,397],"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_failure()":[399,406],"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes()":[408,418],"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()":[420,442],"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()":[444,465],"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()":[467,488],"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_successWithInfinity()":[490,493],"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_successWithNaN()":[495,498],"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_failureWithNegativeZero()":[500,511],"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_nullExpected()":[513,527],"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_success()":[529,532],"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_failure()":[534,547],"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_inOrder_success()":[549,555],"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_inOrder_failure()":[557,570],"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAnyOf_primitiveDoubleArray_success()":[572,575],"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAnyOf_primitiveDoubleArray_failure()":[577,583],"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsExactly_primitiveDoubleArray_success()":[585,588],"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsExactly_primitiveDoubleArray_failure()":[590,598],"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsExactly_primitiveDoubleArray_inOrder_success()":[600,606],"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsExactly_primitiveDoubleArray_inOrder_failure()":[608,621],"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveDoubleArray_success()":[623,626],"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveDoubleArray_failure()":[628,644],"PrimitiveDoubleArraySubjectTest::::smallDifferenceInLongRepresentation()":[646,650],"PrimitiveDoubleArraySubjectTest::::noCommas()":[652,658],"PrimitiveDoubleArraySubjectTest::::array(double[])":[660,662],"PrimitiveDoubleArraySubjectTest::::expectFailureWhenTestingThat(double[])":[664,666]},"reverse_method_lines_dic":{"67":"PrimitiveDoubleArraySubject::::isEqualTo(java.lang.Object)","68":"PrimitiveDoubleArraySubject::::isEqualTo(java.lang.Object)","69":"PrimitiveDoubleArraySubject::::isEqualTo(java.lang.Object)","70":"PrimitiveDoubleArraySubject::::isEqualTo(java.lang.Object)","86":"PrimitiveDoubleArraySubject::::isNotEqualTo(java.lang.Object)","87":"PrimitiveDoubleArraySubject::::isNotEqualTo(java.lang.Object)","88":"PrimitiveDoubleArraySubject::::isNotEqualTo(java.lang.Object)","89":"PrimitiveDoubleArraySubject::::isNotEqualTo(java.lang.Object)","115":"PrimitiveDoubleArraySubject::::usingTolerance(double)","116":"PrimitiveDoubleArraySubject::::usingTolerance(double)","117":"PrimitiveDoubleArraySubject::::usingTolerance(double)","124":"PrimitiveDoubleArraySubject::::apply(java.lang.Double,java.lang.Number)","125":"PrimitiveDoubleArraySubject::::apply(java.lang.Double,java.lang.Number)","126":"PrimitiveDoubleArraySubject::::apply(java.lang.Double,java.lang.Number)","127":"PrimitiveDoubleArraySubject::::apply(java.lang.Double,java.lang.Number)","128":"PrimitiveDoubleArraySubject::::apply(java.lang.Double,java.lang.Number)","132":"PrimitiveDoubleArraySubject::::checkedToDouble(java.lang.Number)","133":"PrimitiveDoubleArraySubject::::checkedToDouble(java.lang.Number)","134":"PrimitiveDoubleArraySubject::::checkedToDouble(java.lang.Number)","135":"PrimitiveDoubleArraySubject::::checkedToDouble(java.lang.Number)","136":"PrimitiveDoubleArraySubject::::checkedToDouble(java.lang.Number)","137":"PrimitiveDoubleArraySubject::::checkedToDouble(java.lang.Number)","138":"PrimitiveDoubleArraySubject::::checkedToDouble(java.lang.Number)","139":"PrimitiveDoubleArraySubject::::checkedToDouble(java.lang.Number)","140":"PrimitiveDoubleArraySubject::::checkedToDouble(java.lang.Number)","141":"PrimitiveDoubleArraySubject::::checkedToDouble(java.lang.Number)","142":"PrimitiveDoubleArraySubject::::checkedToDouble(java.lang.Number)","143":"PrimitiveDoubleArraySubject::::checkedToDouble(java.lang.Number)","144":"PrimitiveDoubleArraySubject::::checkedToDouble(java.lang.Number)","145":"PrimitiveDoubleArraySubject::::checkedToDouble(java.lang.Number)","146":"PrimitiveDoubleArraySubject::::checkedToDouble(java.lang.Number)","147":"PrimitiveDoubleArraySubject::::checkedToDouble(java.lang.Number)","148":"PrimitiveDoubleArraySubject::::checkedToDouble(java.lang.Number)","149":"PrimitiveDoubleArraySubject::::checkedToDouble(java.lang.Number)","150":"PrimitiveDoubleArraySubject::::checkedToDouble(java.lang.Number)","185":"PrimitiveDoubleArraySubject::::usingExactEquality()","186":"PrimitiveDoubleArraySubject::::usingExactEquality()","187":"PrimitiveDoubleArraySubject::::usingExactEquality()","210":"PrimitiveDoubleArraySubject.DoubleArrayAsIterable::::containsAtLeast(double[])","211":"PrimitiveDoubleArraySubject.DoubleArrayAsIterable::::containsAtLeast(double[])","212":"PrimitiveDoubleArraySubject.DoubleArrayAsIterable::::containsAtLeast(double[])","213":"PrimitiveDoubleArraySubject.DoubleArrayAsIterable::::containsAtLeast(double[])","216":"PrimitiveDoubleArraySubject.DoubleArrayAsIterable::::containsAnyOf(double[])","217":"PrimitiveDoubleArraySubject.DoubleArrayAsIterable::::containsAnyOf(double[])","218":"PrimitiveDoubleArraySubject.DoubleArrayAsIterable::::containsAnyOf(double[])","221":"PrimitiveDoubleArraySubject.DoubleArrayAsIterable::::containsExactly(double[])","222":"PrimitiveDoubleArraySubject.DoubleArrayAsIterable::::containsExactly(double[])","223":"PrimitiveDoubleArraySubject.DoubleArrayAsIterable::::containsExactly(double[])","224":"PrimitiveDoubleArraySubject.DoubleArrayAsIterable::::containsExactly(double[])","229":"PrimitiveDoubleArraySubject.DoubleArrayAsIterable::::containsNoneOf(double[])","230":"PrimitiveDoubleArraySubject.DoubleArrayAsIterable::::containsNoneOf(double[])","231":"PrimitiveDoubleArraySubject.DoubleArrayAsIterable::::containsNoneOf(double[])","234":"PrimitiveDoubleArraySubject::::iterableSubject()","235":"PrimitiveDoubleArraySubject::::iterableSubject()","236":"PrimitiveDoubleArraySubject::::iterableSubject()","237":"PrimitiveDoubleArraySubject::::iterableSubject()","238":"PrimitiveDoubleArraySubject::::iterableSubject()","248":"PrimitiveDoubleArraySubject::::iterablesWithCustomDoubleToString()","249":"PrimitiveDoubleArraySubject::::iterablesWithCustomDoubleToString()","250":"PrimitiveDoubleArraySubject::::iterablesWithCustomDoubleToString()","251":"PrimitiveDoubleArraySubject::::iterablesWithCustomDoubleToString()","252":"PrimitiveDoubleArraySubject::::iterablesWithCustomDoubleToString()","253":"PrimitiveDoubleArraySubject::::iterablesWithCustomDoubleToString()","254":"PrimitiveDoubleArraySubject::::iterablesWithCustomDoubleToString()","255":"PrimitiveDoubleArraySubject::::iterablesWithCustomDoubleToString()","263":"PrimitiveDoubleArraySubject.IterableSubjectWithInheritedToString::::actualCustomStringRepresentation()","264":"PrimitiveDoubleArraySubject.IterableSubjectWithInheritedToString::::actualCustomStringRepresentation()","265":"PrimitiveDoubleArraySubject.IterableSubjectWithInheritedToString::::actualCustomStringRepresentation()","266":"PrimitiveDoubleArraySubject.IterableSubjectWithInheritedToString::::actualCustomStringRepresentation()","267":"PrimitiveDoubleArraySubject.IterableSubjectWithInheritedToString::::actualCustomStringRepresentation()"},"test_reverse_method_lines_dic":{"49":"PrimitiveDoubleArraySubjectTest::::testDoubleConstants_matchNextAfter()","50":"PrimitiveDoubleArraySubjectTest::::testDoubleConstants_matchNextAfter()","51":"PrimitiveDoubleArraySubjectTest::::testDoubleConstants_matchNextAfter()","52":"PrimitiveDoubleArraySubjectTest::::testDoubleConstants_matchNextAfter()","53":"PrimitiveDoubleArraySubjectTest::::testDoubleConstants_matchNextAfter()","54":"PrimitiveDoubleArraySubjectTest::::testDoubleConstants_matchNextAfter()","55":"PrimitiveDoubleArraySubjectTest::::testDoubleConstants_matchNextAfter()","56":"PrimitiveDoubleArraySubjectTest::::testDoubleConstants_matchNextAfter()","57":"PrimitiveDoubleArraySubjectTest::::testDoubleConstants_matchNextAfter()","58":"PrimitiveDoubleArraySubjectTest::::testDoubleConstants_matchNextAfter()","59":"PrimitiveDoubleArraySubjectTest::::testDoubleConstants_matchNextAfter()","60":"PrimitiveDoubleArraySubjectTest::::testDoubleConstants_matchNextAfter()","61":"PrimitiveDoubleArraySubjectTest::::testDoubleConstants_matchNextAfter()","63":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Success()","64":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Success()","65":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Success()","66":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Success()","67":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Success()","69":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_NaN_Success()","70":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_NaN_Success()","71":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_NaN_Success()","72":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_NaN_Success()","73":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_NaN_Success()","74":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_NaN_Success()","76":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_NotEqual()","77":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_NotEqual()","78":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_NotEqual()","79":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_NotEqual()","80":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_NotEqual()","81":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_NotEqual()","82":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_NotEqual()","84":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_DifferentOrder()","85":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_DifferentOrder()","86":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_DifferentOrder()","87":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_DifferentOrder()","89":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_Longer()","90":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_Longer()","91":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_Longer()","92":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_Longer()","93":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_Longer()","94":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_Longer()","95":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_Longer()","97":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_Shorter()","98":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_Shorter()","99":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_Shorter()","100":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_Shorter()","102":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_PlusMinusZero()","103":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_PlusMinusZero()","104":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_PlusMinusZero()","105":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_PlusMinusZero()","106":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_PlusMinusZero()","107":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_PlusMinusZero()","109":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_NotAnArray()","110":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_NotAnArray()","111":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_NotAnArray()","112":"PrimitiveDoubleArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_NotAnArray()","114":"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_FailEquals()","115":"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_FailEquals()","116":"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_FailEquals()","117":"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_FailEquals()","118":"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_FailEquals()","120":"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_NaN_plusZero_FailEquals()","121":"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_NaN_plusZero_FailEquals()","122":"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_NaN_plusZero_FailEquals()","123":"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_NaN_plusZero_FailEquals()","124":"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_NaN_plusZero_FailEquals()","125":"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_NaN_plusZero_FailEquals()","127":"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_NotEqual()","128":"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_NotEqual()","129":"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_NotEqual()","130":"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_NotEqual()","132":"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_DifferentOrder()","133":"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_DifferentOrder()","134":"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_DifferentOrder()","135":"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_DifferentOrder()","137":"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_Longer()","138":"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_Longer()","139":"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_Longer()","140":"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_Longer()","142":"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_Shorter()","143":"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_Shorter()","144":"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_Shorter()","145":"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_Shorter()","147":"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_PlusMinusZero()","148":"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_PlusMinusZero()","149":"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_PlusMinusZero()","150":"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_PlusMinusZero()","152":"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_NotAnArray()","153":"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_NotAnArray()","154":"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_NotAnArray()","155":"PrimitiveDoubleArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_NotAnArray()","157":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_success()","158":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_success()","159":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_success()","160":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_success()","162":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_successWithExpectedLong()","163":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_successWithExpectedLong()","164":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_successWithExpectedLong()","165":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_successWithExpectedLong()","167":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_failure()","168":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_failure()","169":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_failure()","170":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_failure()","171":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_failure()","172":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_failure()","173":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_failure()","174":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_failure()","175":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_failure()","176":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_failure()","177":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_failure()","178":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_failure()","179":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_failure()","181":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_failureWithInfinity()","182":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_failureWithInfinity()","183":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_failureWithInfinity()","184":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_failureWithInfinity()","185":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_failureWithInfinity()","186":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_failureWithInfinity()","187":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_failureWithInfinity()","188":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_failureWithInfinity()","189":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_failureWithInfinity()","191":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_failureWithNaN()","192":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_failureWithNaN()","193":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_failureWithNaN()","194":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_failureWithNaN()","195":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_failureWithNaN()","196":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_failureWithNaN()","197":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_failureWithNaN()","198":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_failureWithNaN()","199":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_failureWithNaN()","201":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_successWithNegativeZero()","202":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_successWithNegativeZero()","203":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_successWithNegativeZero()","204":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_successWithNegativeZero()","206":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_otherTypes()","207":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_otherTypes()","208":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_otherTypes()","209":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_otherTypes()","210":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_otherTypes()","211":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_otherTypes()","212":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_otherTypes()","213":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_otherTypes()","214":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_otherTypes()","215":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_otherTypes()","216":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_otherTypes()","217":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_otherTypes()","218":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_otherTypes()","219":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_otherTypes()","220":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_otherTypes()","221":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_otherTypes()","222":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_otherTypes()","223":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_otherTypes()","224":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_otherTypes()","225":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_otherTypes()","226":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_otherTypes()","227":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_otherTypes()","228":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_otherTypes()","229":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_otherTypes()","230":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_otherTypes()","231":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_otherTypes()","232":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_otherTypes()","233":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_otherTypes()","234":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_otherTypes()","235":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_otherTypes()","236":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_otherTypes()","237":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_otherTypes()","239":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_nullExpected()","240":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_nullExpected()","241":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_nullExpected()","242":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_nullExpected()","243":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_nullExpected()","244":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_nullExpected()","245":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_nullExpected()","246":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_nullExpected()","247":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_nullExpected()","248":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_nullExpected()","249":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_nullExpected()","250":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_nullExpected()","251":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_nullExpected()","252":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_nullExpected()","253":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_nullExpected()","254":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_nullExpected()","256":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_negativeTolerance()","257":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_negativeTolerance()","258":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_negativeTolerance()","259":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_negativeTolerance()","260":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_negativeTolerance()","261":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_negativeTolerance()","262":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_negativeTolerance()","263":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_negativeTolerance()","264":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_negativeTolerance()","265":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_negativeTolerance()","266":"PrimitiveDoubleArraySubjectTest::::usingTolerance_contains_negativeTolerance()","268":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_success()","269":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_success()","270":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_success()","271":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_success()","272":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_success()","273":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_success()","275":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_failure()","276":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_failure()","277":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_failure()","278":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_failure()","279":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_failure()","280":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_failure()","281":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_failure()","282":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_failure()","283":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_failure()","284":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_failure()","285":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_failure()","286":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_failure()","287":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_failure()","288":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_failure()","290":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_inOrder_success()","291":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_inOrder_success()","292":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_inOrder_success()","293":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_inOrder_success()","294":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_inOrder_success()","295":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_inOrder_success()","296":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_inOrder_success()","298":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_inOrder_failure()","299":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_inOrder_failure()","300":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_inOrder_failure()","301":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_inOrder_failure()","302":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_inOrder_failure()","303":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_inOrder_failure()","304":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_inOrder_failure()","305":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_inOrder_failure()","306":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_inOrder_failure()","307":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_inOrder_failure()","308":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_inOrder_failure()","309":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_inOrder_failure()","310":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_inOrder_failure()","311":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAtLeast_primitiveDoubleArray_inOrder_failure()","313":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAnyOf_primitiveDoubleArray_success()","314":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAnyOf_primitiveDoubleArray_success()","315":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAnyOf_primitiveDoubleArray_success()","316":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAnyOf_primitiveDoubleArray_success()","317":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAnyOf_primitiveDoubleArray_success()","318":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAnyOf_primitiveDoubleArray_success()","320":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAnyOf_primitiveDoubleArray_failure()","321":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAnyOf_primitiveDoubleArray_failure()","322":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAnyOf_primitiveDoubleArray_failure()","323":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAnyOf_primitiveDoubleArray_failure()","324":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAnyOf_primitiveDoubleArray_failure()","325":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAnyOf_primitiveDoubleArray_failure()","326":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAnyOf_primitiveDoubleArray_failure()","327":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsAnyOf_primitiveDoubleArray_failure()","329":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_success()","330":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_success()","331":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_success()","332":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_success()","333":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_success()","334":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_success()","336":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_failure()","337":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_failure()","338":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_failure()","339":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_failure()","340":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_failure()","341":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_failure()","342":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_failure()","343":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_failure()","344":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_failure()","346":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_inOrder_success()","347":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_inOrder_success()","348":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_inOrder_success()","349":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_inOrder_success()","350":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_inOrder_success()","351":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_inOrder_success()","352":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_inOrder_success()","354":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_inOrder_failure()","355":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_inOrder_failure()","356":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_inOrder_failure()","357":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_inOrder_failure()","358":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_inOrder_failure()","359":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_inOrder_failure()","360":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_inOrder_failure()","361":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_inOrder_failure()","362":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_inOrder_failure()","363":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_inOrder_failure()","364":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_inOrder_failure()","365":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_inOrder_failure()","366":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_inOrder_failure()","367":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsExactly_primitiveDoubleArray_inOrder_failure()","369":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsNoneOf_primitiveDoubleArray_success()","370":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsNoneOf_primitiveDoubleArray_success()","371":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsNoneOf_primitiveDoubleArray_success()","372":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsNoneOf_primitiveDoubleArray_success()","373":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsNoneOf_primitiveDoubleArray_success()","374":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsNoneOf_primitiveDoubleArray_success()","376":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsNoneOf_primitiveDoubleArray_failure()","377":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsNoneOf_primitiveDoubleArray_failure()","378":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsNoneOf_primitiveDoubleArray_failure()","379":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsNoneOf_primitiveDoubleArray_failure()","380":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsNoneOf_primitiveDoubleArray_failure()","381":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsNoneOf_primitiveDoubleArray_failure()","382":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsNoneOf_primitiveDoubleArray_failure()","383":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsNoneOf_primitiveDoubleArray_failure()","384":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsNoneOf_primitiveDoubleArray_failure()","385":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsNoneOf_primitiveDoubleArray_failure()","386":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsNoneOf_primitiveDoubleArray_failure()","387":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsNoneOf_primitiveDoubleArray_failure()","388":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsNoneOf_primitiveDoubleArray_failure()","389":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsNoneOf_primitiveDoubleArray_failure()","390":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsNoneOf_primitiveDoubleArray_failure()","391":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsNoneOf_primitiveDoubleArray_failure()","392":"PrimitiveDoubleArraySubjectTest::::usingTolerance_containsNoneOf_primitiveDoubleArray_failure()","394":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_success()","395":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_success()","396":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_success()","397":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_success()","399":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_failure()","400":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_failure()","401":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_failure()","402":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_failure()","403":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_failure()","404":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_failure()","405":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_failure()","406":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_failure()","408":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes()","409":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes()","410":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes()","411":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes()","412":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes()","413":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes()","414":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes()","415":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes()","416":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes()","417":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes()","418":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes()","420":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","421":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","422":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","423":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","424":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","425":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","426":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","427":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","428":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","429":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","430":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","431":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","432":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","433":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","434":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","435":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","436":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","437":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","438":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","439":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","440":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","441":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","442":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","444":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","445":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","446":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","447":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","448":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","449":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","450":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","451":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","452":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","453":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","454":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","455":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","456":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","457":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","458":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","459":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","460":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","461":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","462":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","463":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","464":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","465":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","467":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","468":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","469":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","470":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","471":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","472":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","473":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","474":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","475":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","476":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","477":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","478":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","479":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","480":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","481":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","482":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","483":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","484":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","485":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","486":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","487":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","488":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","490":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_successWithInfinity()","491":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_successWithInfinity()","492":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_successWithInfinity()","493":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_successWithInfinity()","495":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_successWithNaN()","496":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_successWithNaN()","497":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_successWithNaN()","498":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_successWithNaN()","500":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_failureWithNegativeZero()","501":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_failureWithNegativeZero()","502":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_failureWithNegativeZero()","503":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_failureWithNegativeZero()","504":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_failureWithNegativeZero()","505":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_failureWithNegativeZero()","506":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_failureWithNegativeZero()","507":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_failureWithNegativeZero()","508":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_failureWithNegativeZero()","509":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_failureWithNegativeZero()","510":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_failureWithNegativeZero()","511":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_failureWithNegativeZero()","513":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_nullExpected()","514":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_nullExpected()","515":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_nullExpected()","516":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_nullExpected()","517":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_nullExpected()","518":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_nullExpected()","519":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_nullExpected()","520":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_nullExpected()","521":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_nullExpected()","522":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_nullExpected()","523":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_nullExpected()","524":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_nullExpected()","525":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_nullExpected()","526":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_nullExpected()","527":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_contains_nullExpected()","529":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_success()","530":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_success()","531":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_success()","532":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_success()","534":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_failure()","535":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_failure()","536":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_failure()","537":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_failure()","538":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_failure()","539":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_failure()","540":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_failure()","541":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_failure()","542":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_failure()","543":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_failure()","544":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_failure()","545":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_failure()","546":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_failure()","547":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_failure()","549":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_inOrder_success()","550":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_inOrder_success()","551":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_inOrder_success()","552":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_inOrder_success()","553":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_inOrder_success()","554":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_inOrder_success()","555":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_inOrder_success()","557":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_inOrder_failure()","558":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_inOrder_failure()","559":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_inOrder_failure()","560":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_inOrder_failure()","561":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_inOrder_failure()","562":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_inOrder_failure()","563":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_inOrder_failure()","564":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_inOrder_failure()","565":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_inOrder_failure()","566":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_inOrder_failure()","567":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_inOrder_failure()","568":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_inOrder_failure()","569":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_inOrder_failure()","570":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveDoubleArray_inOrder_failure()","572":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAnyOf_primitiveDoubleArray_success()","573":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAnyOf_primitiveDoubleArray_success()","574":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAnyOf_primitiveDoubleArray_success()","575":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAnyOf_primitiveDoubleArray_success()","577":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAnyOf_primitiveDoubleArray_failure()","578":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAnyOf_primitiveDoubleArray_failure()","579":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAnyOf_primitiveDoubleArray_failure()","580":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAnyOf_primitiveDoubleArray_failure()","581":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAnyOf_primitiveDoubleArray_failure()","582":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAnyOf_primitiveDoubleArray_failure()","583":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsAnyOf_primitiveDoubleArray_failure()","585":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsExactly_primitiveDoubleArray_success()","586":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsExactly_primitiveDoubleArray_success()","587":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsExactly_primitiveDoubleArray_success()","588":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsExactly_primitiveDoubleArray_success()","590":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsExactly_primitiveDoubleArray_failure()","591":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsExactly_primitiveDoubleArray_failure()","592":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsExactly_primitiveDoubleArray_failure()","593":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsExactly_primitiveDoubleArray_failure()","594":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsExactly_primitiveDoubleArray_failure()","595":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsExactly_primitiveDoubleArray_failure()","596":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsExactly_primitiveDoubleArray_failure()","597":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsExactly_primitiveDoubleArray_failure()","598":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsExactly_primitiveDoubleArray_failure()","600":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsExactly_primitiveDoubleArray_inOrder_success()","601":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsExactly_primitiveDoubleArray_inOrder_success()","602":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsExactly_primitiveDoubleArray_inOrder_success()","603":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsExactly_primitiveDoubleArray_inOrder_success()","604":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsExactly_primitiveDoubleArray_inOrder_success()","605":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsExactly_primitiveDoubleArray_inOrder_success()","606":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsExactly_primitiveDoubleArray_inOrder_success()","608":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsExactly_primitiveDoubleArray_inOrder_failure()","609":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsExactly_primitiveDoubleArray_inOrder_failure()","610":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsExactly_primitiveDoubleArray_inOrder_failure()","611":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsExactly_primitiveDoubleArray_inOrder_failure()","612":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsExactly_primitiveDoubleArray_inOrder_failure()","613":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsExactly_primitiveDoubleArray_inOrder_failure()","614":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsExactly_primitiveDoubleArray_inOrder_failure()","615":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsExactly_primitiveDoubleArray_inOrder_failure()","616":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsExactly_primitiveDoubleArray_inOrder_failure()","617":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsExactly_primitiveDoubleArray_inOrder_failure()","618":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsExactly_primitiveDoubleArray_inOrder_failure()","619":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsExactly_primitiveDoubleArray_inOrder_failure()","620":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsExactly_primitiveDoubleArray_inOrder_failure()","621":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsExactly_primitiveDoubleArray_inOrder_failure()","623":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveDoubleArray_success()","624":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveDoubleArray_success()","625":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveDoubleArray_success()","626":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveDoubleArray_success()","628":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveDoubleArray_failure()","629":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveDoubleArray_failure()","630":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveDoubleArray_failure()","631":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveDoubleArray_failure()","632":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveDoubleArray_failure()","633":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveDoubleArray_failure()","634":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveDoubleArray_failure()","635":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveDoubleArray_failure()","636":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveDoubleArray_failure()","637":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveDoubleArray_failure()","638":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveDoubleArray_failure()","639":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveDoubleArray_failure()","640":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveDoubleArray_failure()","641":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveDoubleArray_failure()","642":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveDoubleArray_failure()","643":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveDoubleArray_failure()","644":"PrimitiveDoubleArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveDoubleArray_failure()","646":"PrimitiveDoubleArraySubjectTest::::smallDifferenceInLongRepresentation()","647":"PrimitiveDoubleArraySubjectTest::::smallDifferenceInLongRepresentation()","648":"PrimitiveDoubleArraySubjectTest::::smallDifferenceInLongRepresentation()","649":"PrimitiveDoubleArraySubjectTest::::smallDifferenceInLongRepresentation()","650":"PrimitiveDoubleArraySubjectTest::::smallDifferenceInLongRepresentation()","652":"PrimitiveDoubleArraySubjectTest::::noCommas()","653":"PrimitiveDoubleArraySubjectTest::::noCommas()","654":"PrimitiveDoubleArraySubjectTest::::noCommas()","655":"PrimitiveDoubleArraySubjectTest::::noCommas()","656":"PrimitiveDoubleArraySubjectTest::::noCommas()","657":"PrimitiveDoubleArraySubjectTest::::noCommas()","658":"PrimitiveDoubleArraySubjectTest::::noCommas()","660":"PrimitiveDoubleArraySubjectTest::::array(double[])","661":"PrimitiveDoubleArraySubjectTest::::array(double[])","662":"PrimitiveDoubleArraySubjectTest::::array(double[])","664":"PrimitiveDoubleArraySubjectTest::::expectFailureWhenTestingThat(double[])","665":"PrimitiveDoubleArraySubjectTest::::expectFailureWhenTestingThat(double[])","666":"PrimitiveDoubleArraySubjectTest::::expectFailureWhenTestingThat(double[])"},"tests":[{"test_lines":[63,67],"covered_lines":[38,39,40,69,70,119,120,123],"label":"PrimitiveDoubleArraySubject::::isEqualTo(java.lang.Object)"},{"test_lines":[69,74],"covered_lines":[38,39,40,69,70,119,120,123],"label":"PrimitiveDoubleArraySubject::::isEqualTo(java.lang.Object)"},{"test_lines":[76,82],"covered_lines":[38,39,40,69,70,119,120,123],"label":"PrimitiveDoubleArraySubject::::isEqualTo(java.lang.Object)"},{"test_lines":[84,87],"covered_lines":[38,39,40,69,70,119,120,123],"label":"PrimitiveDoubleArraySubject::::isEqualTo(java.lang.Object)"},{"test_lines":[89,95],"covered_lines":[38,39,40,69,70,119,120,123],"label":"PrimitiveDoubleArraySubject::::isEqualTo(java.lang.Object)"},{"test_lines":[97,100],"covered_lines":[38,39,40,69,70,119,120,123],"label":"PrimitiveDoubleArraySubject::::isEqualTo(java.lang.Object)"},{"test_lines":[102,107],"covered_lines":[38,39,40,69,70,119,120,123],"label":"PrimitiveDoubleArraySubject::::isEqualTo(java.lang.Object)"},{"test_lines":[109,112],"covered_lines":[38,39,40,69,70,119,120,123],"label":"PrimitiveDoubleArraySubject::::isEqualTo(java.lang.Object)"},{"test_lines":[114,118],"covered_lines":[38,39,40,88,89,119,120,123],"label":"PrimitiveDoubleArraySubject::::isNotEqualTo(java.lang.Object)"},{"test_lines":[120,125],"covered_lines":[38,39,40,88,89,119,120,123],"label":"PrimitiveDoubleArraySubject::::isNotEqualTo(java.lang.Object)"},{"test_lines":[127,130],"covered_lines":[38,39,40,88,89,119,120,123],"label":"PrimitiveDoubleArraySubject::::isNotEqualTo(java.lang.Object)"},{"test_lines":[132,135],"covered_lines":[38,39,40,88,89,119,120,123],"label":"PrimitiveDoubleArraySubject::::isNotEqualTo(java.lang.Object)"},{"test_lines":[137,140],"covered_lines":[38,39,40,88,89,119,120,123],"label":"PrimitiveDoubleArraySubject::::isNotEqualTo(java.lang.Object)"},{"test_lines":[142,145],"covered_lines":[38,39,40,88,89,119,120,123],"label":"PrimitiveDoubleArraySubject::::isNotEqualTo(java.lang.Object)"},{"test_lines":[147,150],"covered_lines":[38,39,40,88,89,119,120,123],"label":"PrimitiveDoubleArraySubject::::isNotEqualTo(java.lang.Object)"},{"test_lines":[152,155],"covered_lines":[38,39,40,88,89,119,120,123],"label":"PrimitiveDoubleArraySubject::::isNotEqualTo(java.lang.Object)"},{"test_lines":[157,160],"covered_lines":[38,39,40,116,119,120,123,204,205,235,236,237,249,252,259,260,261],"label":"PrimitiveDoubleArraySubject::::usingTolerance(double)"},{"test_lines":[162,165],"covered_lines":[38,39,40,116,119,120,123,204,205,235,236,237,249,252,259,260,261],"label":"PrimitiveDoubleArraySubject::::usingTolerance(double)"},{"test_lines":[167,179],"covered_lines":[38,39,40,116,119,120,123,204,205,235,236,237,249,252,259,260,261,265,266],"label":"PrimitiveDoubleArraySubject::::usingTolerance(double)"},{"test_lines":[181,189],"covered_lines":[38,39,40,116,119,120,123,204,205,235,236,237,249,252,259,260,261,265,266],"label":"PrimitiveDoubleArraySubject::::usingTolerance(double)"},{"test_lines":[191,199],"covered_lines":[38,39,40,116,119,120,123,204,205,235,236,237,249,252,259,260,261,265,266],"label":"PrimitiveDoubleArraySubject::::usingTolerance(double)"},{"test_lines":[201,204],"covered_lines":[38,39,40,116,119,120,123,204,205,235,236,237,249,252,259,260,261],"label":"PrimitiveDoubleArraySubject::::usingTolerance(double)"},{"test_lines":[206,237],"covered_lines":[38,39,40,116,119,120,123,204,205,235,236,237,249,252,259,260,261],"label":"PrimitiveDoubleArraySubject::::usingTolerance(double)"},{"test_lines":[239,254],"covered_lines":[38,39,40,116,119,120,123,204,205,235,236,237,249,252,259,260,261,265,266],"label":"PrimitiveDoubleArraySubject::::usingTolerance(double)"},{"test_lines":[256,266],"covered_lines":[38,39,40,119,120,123],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[268,273],"covered_lines":[38,39,40,116,119,120,123,204,205,212,235,236,237,249,252,259,260,261],"label":"PrimitiveDoubleArraySubject::::usingTolerance(double)"},{"test_lines":[275,288],"covered_lines":[38,39,40,116,119,120,123,204,205,212,235,236,237,249,252,259,260,261,265,266],"label":"PrimitiveDoubleArraySubject::::usingTolerance(double)"},{"test_lines":[290,296],"covered_lines":[38,39,40,116,119,120,123,204,205,212,235,236,237,249,252,259,260,261],"label":"PrimitiveDoubleArraySubject::::usingTolerance(double)"},{"test_lines":[298,311],"covered_lines":[38,39,40,116,119,120,123,204,205,212,235,236,237,249,252,259,260,261,265,266],"label":"PrimitiveDoubleArraySubject::::usingTolerance(double)"},{"test_lines":[313,318],"covered_lines":[38,39,40,116,119,120,123,204,205,217,218,235,236,237,249,252,259,260,261],"label":"PrimitiveDoubleArraySubject::::usingTolerance(double)"},{"test_lines":[320,327],"covered_lines":[38,39,40,116,119,120,123,204,205,217,218,235,236,237,249,252,259,260,261,265,266],"label":"PrimitiveDoubleArraySubject::::usingTolerance(double)"},{"test_lines":[329,334],"covered_lines":[38,39,40,116,119,120,123,204,205,223,235,236,237,249,252,259,260,261],"label":"PrimitiveDoubleArraySubject::::usingTolerance(double)"},{"test_lines":[336,344],"covered_lines":[38,39,40,116,119,120,123,204,205,223,235,236,237,249,252,259,260,261,265,266],"label":"PrimitiveDoubleArraySubject::::usingTolerance(double)"},{"test_lines":[346,352],"covered_lines":[38,39,40,116,119,120,123,204,205,223,235,236,237,249,252,259,260,261],"label":"PrimitiveDoubleArraySubject::::usingTolerance(double)"},{"test_lines":[354,367],"covered_lines":[38,39,40,116,119,120,123,204,205,223,235,236,237,249,252,259,260,261,265,266],"label":"PrimitiveDoubleArraySubject::::usingTolerance(double)"},{"test_lines":[369,374],"covered_lines":[38,39,40,116,119,120,123,204,205,230,231,235,236,237,249,252,259,260,261],"label":"PrimitiveDoubleArraySubject::::usingTolerance(double)"},{"test_lines":[376,392],"covered_lines":[38,39,40,116,119,120,123,204,205,230,231,235,236,237,249,252,259,260,261,265,266],"label":"PrimitiveDoubleArraySubject::::usingTolerance(double)"},{"test_lines":[394,397],"covered_lines":[38,39,40,119,120,123,126,127,133,134,141,142,149,186,204,205,235,236,237,249,252,259,260,261],"label":"PrimitiveDoubleArraySubject::::usingExactEquality()"},{"test_lines":[399,406],"covered_lines":[38,39,40,119,120,123,126,127,133,134,141,142,149,186,204,205,235,236,237,249,252,259,260,261,265,266],"label":"PrimitiveDoubleArraySubject::::usingExactEquality()"},{"test_lines":[408,418],"covered_lines":[38,39,40,119,120,123,126,127,133,134,141,142,143,144,149,186,204,205,235,236,237,249,252,259,260,261],"label":"PrimitiveDoubleArraySubject::::usingExactEquality()"},{"test_lines":[420,442],"covered_lines":[38,39,40,119,120,123,126,133,134,141,142,143,144,186,204,205,235,236,237,249,252,259,260,261,265,266],"label":"PrimitiveDoubleArraySubject::::usingExactEquality()"},{"test_lines":[444,465],"covered_lines":[38,39,40,119,120,123,126,133,134,141,186,204,205,235,236,237,249,252,259,260,261,265,266],"label":"PrimitiveDoubleArraySubject::::usingExactEquality()"},{"test_lines":[467,488],"covered_lines":[38,39,40,119,120,123,126,133,134,141,186,204,205,235,236,237,249,252,259,260,261,265,266],"label":"PrimitiveDoubleArraySubject::::usingExactEquality()"},{"test_lines":[490,493],"covered_lines":[38,39,40,119,120,123,126,127,133,134,141,142,149,186,204,205,235,236,237,249,252,259,260,261],"label":"PrimitiveDoubleArraySubject::::usingExactEquality()"},{"test_lines":[495,498],"covered_lines":[38,39,40,119,120,123,126,127,133,134,141,142,149,186,204,205,235,236,237,249,252,259,260,261],"label":"PrimitiveDoubleArraySubject::::usingExactEquality()"},{"test_lines":[500,511],"covered_lines":[38,39,40,119,120,123,126,127,133,134,141,142,149,186,204,205,235,236,237,249,252,259,260,261,265,266],"label":"PrimitiveDoubleArraySubject::::usingExactEquality()"},{"test_lines":[513,527],"covered_lines":[38,39,40,119,120,123,126,186,204,205,235,236,237,249,252,259,260,261,265,266],"label":"PrimitiveDoubleArraySubject::::usingExactEquality()"},{"test_lines":[529,532],"covered_lines":[38,39,40,119,120,123,126,127,133,134,141,142,149,186,204,205,212,235,236,237,249,252,259,260,261],"label":"PrimitiveDoubleArraySubject::::usingExactEquality()"},{"test_lines":[534,547],"covered_lines":[38,39,40,119,120,123,126,127,133,134,141,142,149,186,204,205,212,235,236,237,249,252,259,260,261,265,266],"label":"PrimitiveDoubleArraySubject::::usingExactEquality()"},{"test_lines":[549,555],"covered_lines":[38,39,40,119,120,123,126,127,133,134,141,142,149,186,204,205,212,235,236,237,249,252,259,260,261],"label":"PrimitiveDoubleArraySubject::::usingExactEquality()"},{"test_lines":[557,570],"covered_lines":[38,39,40,119,120,123,126,127,133,134,141,142,149,186,204,205,212,235,236,237,249,252,259,260,261,265,266],"label":"PrimitiveDoubleArraySubject::::usingExactEquality()"},{"test_lines":[572,575],"covered_lines":[38,39,40,119,120,123,126,127,133,134,141,142,149,186,204,205,217,218,235,236,237,249,252,259,260,261],"label":"PrimitiveDoubleArraySubject::::usingExactEquality()"},{"test_lines":[577,583],"covered_lines":[38,39,40,119,120,123,126,127,133,134,141,142,149,186,204,205,217,218,235,236,237,249,252,259,260,261,265,266],"label":"PrimitiveDoubleArraySubject::::usingExactEquality()"},{"test_lines":[585,588],"covered_lines":[38,39,40,119,120,123,126,127,133,134,141,142,149,186,204,205,223,235,236,237,249,252,259,260,261],"label":"PrimitiveDoubleArraySubject::::usingExactEquality()"},{"test_lines":[590,598],"covered_lines":[38,39,40,119,120,123,126,127,133,134,141,142,149,186,204,205,223,235,236,237,249,252,259,260,261,265,266],"label":"PrimitiveDoubleArraySubject::::usingExactEquality()"},{"test_lines":[600,606],"covered_lines":[38,39,40,119,120,123,126,127,133,134,141,142,149,186,204,205,223,235,236,237,249,252,259,260,261],"label":"PrimitiveDoubleArraySubject::::usingExactEquality()"},{"test_lines":[608,621],"covered_lines":[38,39,40,119,120,123,126,127,133,134,141,142,149,186,204,205,223,235,236,237,249,252,259,260,261,265,266],"label":"PrimitiveDoubleArraySubject::::usingExactEquality()"},{"test_lines":[623,626],"covered_lines":[38,39,40,119,120,123,126,127,133,134,141,142,149,186,204,205,230,231,235,236,237,249,252,259,260,261],"label":"PrimitiveDoubleArraySubject::::usingExactEquality()"},{"test_lines":[628,644],"covered_lines":[38,39,40,119,120,123,126,127,133,134,141,142,149,186,204,205,230,231,235,236,237,249,252,259,260,261,265,266],"label":"PrimitiveDoubleArraySubject::::usingExactEquality()"},{"test_lines":[646,650],"covered_lines":[38,39,40,69,70,119,120,123],"label":"PrimitiveDoubleArraySubject::::isEqualTo(java.lang.Object)"},{"test_lines":[652,658],"covered_lines":[38,39,40,69,70,119,120,123],"label":"PrimitiveDoubleArraySubject::::isEqualTo(java.lang.Object)"}]},"/bernard/dataset_construction/prep/repos/truth/core/src/main/java/com/google/common/truth/PrimitiveFloatArraySubject.java":{"class_content":["/*\n"," * Copyright (c) 2014 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","\n","package com.google.common.truth;\n","\n","import static com.google.common.base.Preconditions.checkArgument;\n","import static com.google.common.base.Preconditions.checkNotNull;\n","import static com.google.common.truth.Correspondence.tolerance;\n","\n","import com.google.common.primitives.Floats;\n","import com.google.errorprone.annotations.CanIgnoreReturnValue;\n","import java.util.Arrays;\n","import org.checkerframework.checker.nullness.qual.Nullable;\n","\n","/**\n"," * A Subject for {@code float[]}.\n"," *\n"," * @author Christian Gruber (cgruber@israfil.net)\n"," */\n","public final class PrimitiveFloatArraySubject extends AbstractArraySubject {\n","  private final float @Nullable [] actual;\n","\n","  PrimitiveFloatArraySubject(\n","      FailureMetadata metadata, float @Nullable [] o, @Nullable String typeDescription) {\n","    super(metadata, o, typeDescription);\n","    this.actual = o;\n","  }\n","\n","  /**\n","   * A check that the actual array and {@code expected} are arrays of the same length and type,\n","   * containing elements such that each element in {@code expected} is equal to each element in the\n","   * actual array, and in the same position, with element equality defined the same way that {@link\n","   * Arrays#equals(float[], float[])} and {@link Float#equals(Object)} define it (which is different\n","   * to the way that the {@code ==} operator on primitive {@code float} defines it). This method is\n","   * <i>not</i> recommended when the code under test is doing any kind of arithmetic: use {@link\n","   * #usingTolerance} with a suitable tolerance in that case, e.g. {@code\n","   * assertThat(actualArray).usingTolerance(1.0e-5).containsExactly(expectedArray).inOrder()}.\n","   * (Remember that the exact result of floating point arithmetic is sensitive to apparently trivial\n","   * changes such as replacing {@code (a + b) + c} with {@code a + (b + c)}, and that unless {@code\n","   * strictfp} is in force even the result of {@code (a + b) + c} is sensitive to the JVM's choice\n","   * of precision for the intermediate result.) This method is recommended when the code under test\n","   * is specified as either copying values without modification from its input or returning\n","   * well-defined literal or constant values.\n","   *\n","   * <ul>\n","   *   <li>It considers {@link Float#POSITIVE_INFINITY}, {@link Float#NEGATIVE_INFINITY}, and {@link\n","   *       Float#NaN} to be equal to themselves (contrast with {@code usingTolerance(0.0)} which\n","   *       does not).\n","   *   <li>It does <i>not</i> consider {@code -0.0f} to be equal to {@code 0.0f} (contrast with\n","   *       {@code usingTolerance(0.0)} which does).\n","   * </ul>\n","   */\n","  @Override\n","  public void isEqualTo(@Nullable Object expected) {\n","    super.isEqualTo(expected);\n","  }\n","\n","  /**\n","   * A check that the actual array and {@code expected} are not arrays of the same length and type,\n","   * containing elements such that each element in {@code expected} is equal to each element in the\n","   * actual array, and in the same position, with element equality defined the same way that {@link\n","   * Arrays#equals(float[], float[])} and {@link Float#equals(Object)} define it (which is different\n","   * to the way that the {@code ==} operator on primitive {@code float} defines it). See {@link\n","   * #isEqualTo(Object)} for advice on when exact equality is recommended.\n","   *\n","   * <ul>\n","   *   <li>It considers {@link Float#POSITIVE_INFINITY}, {@link Float#NEGATIVE_INFINITY}, and {@link\n","   *       Float#NaN} to be equal to themselves.\n","   *   <li>It does <i>not</i> consider {@code -0.0} to be equal to {@code 0.0}.\n","   * </ul>\n","   */\n","  @Override\n","  public void isNotEqualTo(@Nullable Object expected) {\n","    super.isNotEqualTo(expected);\n","  }\n","\n","  /**\n","   * Starts a method chain for a check in which the actual values (i.e. the elements of the array\n","   * under test) are compared to expected elements using a {@link Correspondence} which considers\n","   * values to correspond if they are finite values within {@code tolerance} of each other. The\n","   * check is actually executed by continuing the method chain. For example:\n","   *\n","   * <pre>{@code\n","   * assertThat(actualFloatArray).usingTolerance(1.0e-5f).contains(3.14159f);\n","   * }</pre>\n","   *\n","   * <ul>\n","   *   <li>It does not consider values to correspond if either value is infinite or NaN.\n","   *   <li>It considers {@code -0.0f} to be within any tolerance of {@code 0.0f}.\n","   *   <li>The expected values provided later in the chain will be {@link Number} instances which\n","   *       will be converted to floats, which may result in a loss of precision for some numeric\n","   *       types.\n","   *   <li>The subsequent methods in the chain may throw a {@link NullPointerException} if any\n","   *       expected {@link Number} instance is null.\n","   * </ul>\n","   *\n","   * @param tolerance an inclusive upper bound on the difference between the float values of the\n","   *     actual and expected numbers, which must be a non-negative finite value, i.e. not {@link\n","   *     Float#NaN}, {@link Float#POSITIVE_INFINITY}, or negative, including {@code -0.0f}\n","   */\n","  public FloatArrayAsIterable usingTolerance(double tolerance) {\n","    return new FloatArrayAsIterable(tolerance(tolerance), iterableSubject());\n","  }\n","\n","  private static final Correspondence<Float, Number> EXACT_EQUALITY_CORRESPONDENCE =\n","      Correspondence.from(\n","          // If we were allowed lambdas, this would be:\n","          // (a, e) -> Float.floatToIntBits(a) == Float.floatToIntBits(checkedToFloat(e)),\n","          new Correspondence.BinaryPredicate<Float, Number>() {\n","\n","            @Override\n","            public boolean apply(Float actual, Number expected) {\n","              return Float.floatToIntBits(actual) == Float.floatToIntBits(checkedToFloat(expected));\n","            }\n","          },\n","          \"is exactly equal to\");\n","\n","  private static float checkedToFloat(Number expected) {\n","    checkNotNull(expected);\n","    checkArgument(\n","        !(expected instanceof Double),\n","        \"Expected value in assertion using exact float equality was a double, which is not \"\n","            + \"supported as a double may not have an exact float representation\");\n","    checkArgument(\n","        expected instanceof Float || expected instanceof Integer || expected instanceof Long,\n","        \"Expected value in assertion using exact float equality was of unsupported type %s \"\n","            + \"(it may not have an exact float representation)\",\n","        expected.getClass());\n","    if (expected instanceof Integer) {\n","      checkArgument(\n","          Math.abs((Integer) expected) <= 1 << 24,\n","          \"Expected value %s in assertion using exact float equality was an int with an absolute \"\n","              + \"value greater than 2^24 which has no exact float representation\",\n","          expected);\n","    }\n","    if (expected instanceof Long) {\n","      checkArgument(\n","          Math.abs((Long) expected) <= 1L << 24,\n","          \"Expected value %s in assertion using exact float equality was a long with an absolute \"\n","              + \"value greater than 2^24 which has no exact float representation\",\n","          expected);\n","    }\n","    return expected.floatValue();\n","  }\n","\n","  /**\n","   * Starts a method chain for a check in which the actual values (i.e. the elements of the array\n","   * under test) are compared to expected elements using a {@link Correspondence} which considers\n","   * values to correspond if they are exactly equal, with equality defined by {@link Float#equals}.\n","   * This method is <i>not</i> recommended when the code under test is doing any kind of arithmetic:\n","   * use {@link #usingTolerance} with a suitable tolerance in that case. (Remember that the exact\n","   * result of floating point arithmetic is sensitive to apparently trivial changes such as\n","   * replacing {@code (a + b) + c} with {@code a + (b + c)}, and that unless {@code strictfp} is in\n","   * force even the result of {@code (a + b) + c} is sensitive to the JVM's choice of precision for\n","   * the intermediate result.) This method is recommended when the code under test is specified as\n","   * either copying a value without modification from its input or returning a well-defined literal\n","   * or constant value. The check is actually executed by continuing the method chain. For example:\n","   *\n","   * <pre>{@code\n","   * assertThat(actualFloatArray).usingExactEquality().contains(3.14159f);\n","   * }</pre>\n","   *\n","   * <p>For convenience, some subsequent methods accept expected values as {@link Number} instances.\n","   * These numbers must be either of type {@link Float}, {@link Integer}, or {@link Long}, and if\n","   * they are {@link Integer} or {@link Long} then their absolute values must not exceed 2^24 which\n","   * is 16,777,216. (This restriction ensures that the expected values have exact {@link Float}\n","   * representations: using exact equality makes no sense if they do not.)\n","   *\n","   * <ul>\n","   *   <li>It considers {@link Float#POSITIVE_INFINITY}, {@link Float#NEGATIVE_INFINITY}, and {@link\n","   *       Float#NaN} to be equal to themselves (contrast with {@code usingTolerance(0.0)} which\n","   *       does not).\n","   *   <li>It does <i>not</i> consider {@code -0.0f} to be equal to {@code 0.0f} (contrast with\n","   *       {@code usingTolerance(0.0)} which does).\n","   *   <li>The subsequent methods in the chain may throw a {@link NullPointerException} if any\n","   *       expected {@link Float} instance is null.\n","   * </ul>\n","   */\n","  public FloatArrayAsIterable usingExactEquality() {\n","    return new FloatArrayAsIterable(EXACT_EQUALITY_CORRESPONDENCE, iterableSubject());\n","  }\n","\n","  /**\n","   * A partially specified check for doing assertions on the array similar to the assertions\n","   * supported for {@link Iterable} subjects, in which the elements of the array under test are\n","   * compared to expected elements using either exact or tolerant float equality: see {@link\n","   * #usingExactEquality} and {@link #usingTolerance}. Call methods on this object to actually\n","   * execute the check.\n","   *\n","   * <p>In the exact equality case, the methods on this class which take {@link Number} arguments\n","   * only accept certain instances: again, see {@link #usingExactEquality} for details.\n","   */\n","  public static final class FloatArrayAsIterable\n","      extends IterableSubject.UsingCorrespondence<Float, Number> {\n","\n","    FloatArrayAsIterable(\n","        Correspondence<? super Float, Number> correspondence, IterableSubject subject) {\n","      super(subject, correspondence);\n","    }\n","\n","    /**\n","     * As {@link #containsAtLeast(Object, Object, Object...)} but taking a primitive float array.\n","     */\n","    @CanIgnoreReturnValue\n","    public Ordered containsAtLeast(float[] expected) {\n","      return containsAtLeastElementsIn(Floats.asList(expected));\n","    }\n","\n","    /** As {@link #containsAnyOf(Object, Object, Object...)} but taking a primitive float array. */\n","    public void containsAnyOf(float[] expected) {\n","      containsAnyIn(Floats.asList(expected));\n","    }\n","\n","    /** As {@link #containsExactly(Object...)} but taking a primitive float array. */\n","    @CanIgnoreReturnValue\n","    public Ordered containsExactly(float[] expected) {\n","      return containsExactlyElementsIn(Floats.asList(expected));\n","    }\n","\n","    /** As {@link #containsNoneOf(Object, Object, Object...)} but taking a primitive float array. */\n","    public void containsNoneOf(float[] excluded) {\n","      containsNoneIn(Floats.asList(excluded));\n","    }\n","  }\n","\n","  private IterableSubject iterableSubject() {\n","    return checkNoNeedToDisplayBothValues(\"asList()\")\n","        .about(iterablesWithCustomFloatToString())\n","        .that(Floats.asList(checkNotNull(actual)));\n","  }\n","\n","  /*\n","   * TODO(cpovirk): Should we make Floats.asList().toString() smarter rather than do all this?\n","   *\n","   * TODO(cpovirk): Or find a general solution for this and MultimapSubject.IterableEntries. But\n","   * note that here we don't use _exactly_ PrimitiveFloatArraySubject.this.toString(), as that\n","   * contains \"float[].\" Or maybe we should stop including that in\n","   * PrimitiveFloatArraySubject.this.toString(), too, someday?\n","   */\n","  private Factory<IterableSubject, Iterable<?>> iterablesWithCustomFloatToString() {\n","    return new Factory<IterableSubject, Iterable<?>>() {\n","      @Override\n","      public IterableSubject createSubject(FailureMetadata metadata, @Nullable Iterable<?> actual) {\n","        return new IterableSubjectWithInheritedToString(metadata, actual);\n","      }\n","    };\n","  }\n","\n","  private final class IterableSubjectWithInheritedToString extends IterableSubject {\n","\n","    IterableSubjectWithInheritedToString(FailureMetadata metadata, @Nullable Iterable<?> actual) {\n","      super(metadata, actual);\n","    }\n","\n","    @Override\n","    protected String actualCustomStringRepresentation() {\n","      return PrimitiveFloatArraySubject.this\n","          .actualCustomStringRepresentationForPackageMembersToCall();\n","    }\n","  }\n","}\n"],"test_content":["/*\n"," * Copyright (c) 2014 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.base.Strings.lenientFormat;\n","import static com.google.common.truth.Platform.floatToString;\n","import static com.google.common.truth.Truth.assertThat;\n","import static java.lang.Float.NEGATIVE_INFINITY;\n","import static java.lang.Float.NaN;\n","import static java.lang.Float.POSITIVE_INFINITY;\n","import static java.lang.Math.nextAfter;\n","import static org.junit.Assert.fail;\n","\n","import com.google.common.annotations.GwtIncompatible;\n","import java.math.BigDecimal;\n","import java.math.BigInteger;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import org.junit.runners.JUnit4;\n","\n","/**\n"," * Tests for {@link PrimitiveFloatArraySubject}.\n"," *\n"," * @author Christian Gruber (cgruber@israfil.net)\n"," */\n","@RunWith(JUnit4.class)\n","public class PrimitiveFloatArraySubjectTest extends BaseSubjectTestCase {\n","  private static final float DEFAULT_TOLERANCE = 0.000005f;\n","\n","  private static final float JUST_OVER_2POINT2 = 2.2000003f;\n","  private static final float JUST_OVER_3POINT3 = 3.3000002f;\n","  private static final float TOLERABLE_3POINT3 = 3.3000047f;\n","  private static final float INTOLERABLE_3POINT3 = 3.3000052f;\n","  private static final float UNDER_LONG_MIN = -9.223373E18f;\n","  private static final float TOLERABLE_TWO = 2.0000048f;\n","  private static final float TOLERABLE_2POINT2 = 2.2000048f;\n","  private static final float INTOLERABLE_2POINT2 = 2.2000053f;\n","\n","  @Test\n","  @GwtIncompatible(\"Math.nextAfter\")\n","  public void testFloatConstants_matchNextAfter() {\n","    assertThat(nextAfter(2.2f, POSITIVE_INFINITY)).isEqualTo(JUST_OVER_2POINT2);\n","    assertThat(nextAfter(3.3f, POSITIVE_INFINITY)).isEqualTo(JUST_OVER_3POINT3);\n","    assertThat(nextAfter(3.3f + DEFAULT_TOLERANCE, NEGATIVE_INFINITY)).isEqualTo(TOLERABLE_3POINT3);\n","    assertThat(nextAfter(3.3f + DEFAULT_TOLERANCE, POSITIVE_INFINITY))\n","        .isEqualTo(INTOLERABLE_3POINT3);\n","    assertThat(nextAfter(Long.MIN_VALUE, NEGATIVE_INFINITY)).isEqualTo(UNDER_LONG_MIN);\n","    assertThat(nextAfter(2.2f + DEFAULT_TOLERANCE, NEGATIVE_INFINITY)).isEqualTo(TOLERABLE_2POINT2);\n","    assertThat(nextAfter(2.2f + DEFAULT_TOLERANCE, POSITIVE_INFINITY))\n","        .isEqualTo(INTOLERABLE_2POINT2);\n","  }\n","\n","  @Test\n","  public void isEqualTo_WithoutToleranceParameter_Success() {\n","    assertThat(array(2.2f, 5.4f, POSITIVE_INFINITY, NEGATIVE_INFINITY, NaN, 0.0f, -0.0f))\n","        .isEqualTo(array(2.2f, 5.4f, POSITIVE_INFINITY, NEGATIVE_INFINITY, NaN, 0.0f, -0.0f));\n","  }\n","\n","  @Test\n","  public void isEqualTo_WithoutToleranceParameter_Fail_NotEqual() {\n","    expectFailureWhenTestingThat(array(2.2f)).isEqualTo(array(JUST_OVER_2POINT2));\n","    assertFailureKeys(\"expected\", \"but was\", \"differs at index\");\n","    assertFailureValue(\"expected\", \"[\" + floatToString(JUST_OVER_2POINT2) + \"]\");\n","    assertFailureValue(\"but was\", \"[\" + floatToString(2.2f) + \"]\");\n","    assertFailureValue(\"differs at index\", \"[0]\");\n","  }\n","\n","  @Test\n","  public void isEqualTo_WithoutToleranceParameter_Fail_DifferentOrder() {\n","    expectFailureWhenTestingThat(array(2.2f, 3.3f)).isEqualTo(array(3.3f, 2.2f));\n","  }\n","\n","  @Test\n","  public void isEqualTo_WithoutToleranceParameter_Fail_Longer() {\n","    expectFailureWhenTestingThat(array(2.2f, 3.3f)).isEqualTo(array(2.2f, 3.3f, 4.4f));\n","    assertFailureKeys(\"expected\", \"but was\", \"wrong length\", \"expected\", \"but was\");\n","    assertFailureValueIndexed(\"expected\", 1, \"3\");\n","    assertFailureValueIndexed(\"but was\", 1, \"2\");\n","  }\n","\n","  @Test\n","  public void isEqualTo_WithoutToleranceParameter_Fail_Shorter() {\n","    expectFailureWhenTestingThat(array(2.2f, 3.3f)).isEqualTo(array(2.2f));\n","  }\n","\n","  @Test\n","  public void isEqualTo_WithoutToleranceParameter_Fail_PlusMinusZero() {\n","    expectFailureWhenTestingThat(array(0.0f)).isEqualTo(array(-0.0f));\n","    assertFailureValue(\"expected\", \"[-0.0]\");\n","    assertFailureValue(\"but was\", \"[0.0]\");\n","  }\n","\n","  @Test\n","  public void isEqualTo_WithoutToleranceParameter_Fail_NotAnArray() {\n","    expectFailureWhenTestingThat(array(2.2f, 3.3f, 4.4f)).isEqualTo(new Object());\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_WithoutToleranceParameter_FailEquals() {\n","    expectFailureWhenTestingThat(\n","            array(2.2f, 5.4f, POSITIVE_INFINITY, NEGATIVE_INFINITY, NaN, 0.0f, -0.0f))\n","        .isNotEqualTo(array(2.2f, 5.4f, POSITIVE_INFINITY, NEGATIVE_INFINITY, NaN, 0.0f, -0.0f));\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_WithoutToleranceParameter_Success_NotEqual() {\n","    assertThat(array(2.2f)).isNotEqualTo(array(JUST_OVER_2POINT2));\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_WithoutToleranceParameter_Success_DifferentOrder() {\n","    assertThat(array(2.2f, 3.3f)).isNotEqualTo(array(3.3f, 2.2f));\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_WithoutToleranceParameter_Success_Longer() {\n","    assertThat(array(2.2f, 3.3f)).isNotEqualTo(array(2.2f, 3.3f, 4.4f));\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_WithoutToleranceParameter_Success_Shorter() {\n","    assertThat(array(2.2f, 3.3f)).isNotEqualTo(array(2.2f));\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_WithoutToleranceParameter_Success_PlusMinusZero() {\n","    assertThat(array(0.0f)).isNotEqualTo(array(-0.0f));\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_WithoutToleranceParameter_Success_NotAnArray() {\n","    assertThat(array(2.2f, 3.3f, 4.4f)).isNotEqualTo(new Object());\n","  }\n","\n","  @Test\n","  public void usingTolerance_contains_success() {\n","    assertThat(array(1.1f, TOLERABLE_2POINT2, 3.2f))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .contains(2.2f);\n","  }\n","\n","  @Test\n","  public void usingTolerance_contains_successWithExpectedLong() {\n","    assertThat(array(1.0f, TOLERABLE_TWO, 3.0f)).usingTolerance(DEFAULT_TOLERANCE).contains(2L);\n","  }\n","\n","  @Test\n","  public void usingTolerance_contains_failure() {\n","    expectFailureWhenTestingThat(array(1.1f, INTOLERABLE_2POINT2, 3.3f))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .contains(2.0f);\n","    assertFailureKeys(\"value of\", \"expected to contain\", \"testing whether\", \"but was\");\n","    assertFailureValue(\"expected to contain\", Float.toString(2.0f));\n","    assertFailureValue(\n","        \"testing whether\",\n","        \"actual element is a finite number within \"\n","            + (double) DEFAULT_TOLERANCE\n","            + \" of expected element\");\n","    assertFailureValue(\"but was\", \"[\" + 1.1f + \", \" + INTOLERABLE_2POINT2 + \", \" + 3.3f + \"]\");\n","  }\n","\n","  @Test\n","  public void usingTolerance_contains_failureWithInfinity() {\n","    expectFailureWhenTestingThat(array(1.1f, POSITIVE_INFINITY, 3.3f))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .contains(POSITIVE_INFINITY);\n","    assertFailureKeys(\"value of\", \"expected to contain\", \"testing whether\", \"but was\");\n","    assertFailureValue(\"expected to contain\", \"Infinity\");\n","    assertFailureValue(\"but was\", \"[\" + 1.1f + \", Infinity, \" + 3.3f + \"]\");\n","  }\n","\n","  @Test\n","  public void usingTolerance_contains_failureWithNaN() {\n","    expectFailureWhenTestingThat(array(1.1f, NaN, 3.3f))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .contains(NaN);\n","    assertFailureKeys(\"value of\", \"expected to contain\", \"testing whether\", \"but was\");\n","    assertFailureValue(\"expected to contain\", \"NaN\");\n","    assertFailureValue(\"but was\", \"[\" + 1.1f + \", NaN, \" + 3.3f + \"]\");\n","  }\n","\n","  @Test\n","  public void usingTolerance_contains_successWithNegativeZero() {\n","    assertThat(array(1.0f, -0.0f, 3.0f)).usingTolerance(0.0f).contains(0.0f);\n","  }\n","\n","  @Test\n","  public void usingTolerance_contains_otherTypes() {\n","    // Expected value is Double\n","    assertThat(array(1.0f, 2.0f + 0.5f * DEFAULT_TOLERANCE, 3.0f))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .contains(2.0);\n","    // Expected value is Integer\n","    assertThat(array(1.0f, 2.0f + 0.5f * DEFAULT_TOLERANCE, 3.0f))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .contains(2);\n","    // Expected value is Integer.MIN_VALUE. This is -1*2^31, which has an exact float\n","    // representation. For the actual value we use the next value down, which is 2^8 smaller\n","    // (because the resolution of floats with absolute values between 2^31 and 2^32 is 2^8). So\n","    // we'll make the assertion with a tolerance of 2^9.\n","    assertThat(array(1.0f, Integer.MIN_VALUE + 0.5f * DEFAULT_TOLERANCE, 3.0f))\n","        .usingTolerance(1 << 9)\n","        .contains(Integer.MIN_VALUE);\n","    // Expected value is Long\n","    assertThat(array(1.0f, 2.0f + 0.5f * DEFAULT_TOLERANCE, 3.0f))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .contains(2L);\n","    // Expected value is Long.MIN_VALUE. This is -1*2^63, which has an exact float representation.\n","    // For the actual value we use the next value down, which is is 2^40 smaller (because the\n","    // resolution of floats with absolute values between 2^63 and 2^64 is 2^40). So we'll make the\n","    // assertion with a tolerance of 2^41.\n","    assertThat(array(1.0f, UNDER_LONG_MIN, 3.0f)).usingTolerance(1L << 41).contains(Long.MIN_VALUE);\n","    // Expected value is BigInteger\n","    assertThat(array(1.0f, 2.0f + 0.5f * DEFAULT_TOLERANCE, 3.0f))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .contains(BigInteger.valueOf(2));\n","    // Expected value is BigDecimal\n","    assertThat(array(1.0f, 2.0f + 0.5f * DEFAULT_TOLERANCE, 3.0f))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .contains(BigDecimal.valueOf(2.0));\n","  }\n","\n","  @Test\n","  public void usingTolerance_contains_nullExpected() {\n","    float[] actual = array(1.0f, 2.0f, 3.0f);\n","    expectFailureWhenTestingThat(actual).usingTolerance(DEFAULT_TOLERANCE).contains(null);\n","    assertFailureKeys(\n","        \"value of\",\n","        \"expected to contain\",\n","        \"testing whether\",\n","        \"but was\",\n","        \"additionally, one or more exceptions were thrown while comparing elements\",\n","        \"first exception\");\n","    assertThatFailure()\n","        .factValue(\"first exception\")\n","        .startsWith(\"compare(\" + actual[0] + \", null) threw java.lang.NullPointerException\");\n","  }\n","\n","  @Test\n","  public void usingTolerance_contains_negativeTolerance() {\n","    try {\n","      assertThat(array(1.0f, 2.0f, 3.0f)).usingTolerance(-1.0f * DEFAULT_TOLERANCE).contains(2.0f);\n","      fail(\"Expected IllegalArgumentException to be thrown but wasn't\");\n","    } catch (IllegalArgumentException expected) {\n","      assertThat(expected)\n","          .hasMessageThat()\n","          .isEqualTo(\"tolerance (\" + -1.0 * DEFAULT_TOLERANCE + \") cannot be negative\");\n","    }\n","  }\n","\n","  @Test\n","  public void usingTolerance_containsAtLeast_primitiveFloatArray_success() {\n","    assertThat(array(1.1f, TOLERABLE_2POINT2, 3.3f))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .containsAtLeast(array(2.2f, 1.1f));\n","  }\n","\n","  @Test\n","  public void usingTolerance_containsAtLeast_primitiveFloatArray_failure() {\n","    expectFailureWhenTestingThat(array(1.1f, TOLERABLE_2POINT2, 3.3f))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .containsAtLeast(array(2.2f, 99.99f));\n","    assertFailureKeys(\n","        \"value of\",\n","        \"missing (1)\",\n","        \"---\",\n","        \"expected to contain at least\",\n","        \"testing whether\",\n","        \"but was\");\n","    assertFailureValue(\"missing (1)\", Float.toString(99.99f));\n","  }\n","\n","  @Test\n","  public void usingTolerance_containsAtLeast_primitiveFloatArray_inOrder_success() {\n","    assertThat(array(1.1f, TOLERABLE_2POINT2, 3.3f))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .containsAtLeast(array(1.1f, 2.2f))\n","        .inOrder();\n","  }\n","\n","  @Test\n","  public void usingTolerance_containsAtLeast_primitiveFloatArray_inOrder_failure() {\n","    expectFailureWhenTestingThat(array(1.1f, TOLERABLE_2POINT2, 3.3f))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .containsAtLeast(array(2.2f, 1.1f))\n","        .inOrder();\n","    assertFailureKeys(\n","        \"value of\",\n","        \"required elements were all found, but order was wrong\",\n","        \"expected order for required elements\",\n","        \"testing whether\",\n","        \"but was\");\n","    assertFailureValue(\n","        \"expected order for required elements\", lenientFormat(\"[%s, %s]\", 2.2f, 1.1f));\n","  }\n","\n","  @Test\n","  public void usingTolerance_containsAnyOf_primitiveFloatArray_success() {\n","    assertThat(array(1.0f, TOLERABLE_2POINT2, 3.0f))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .containsAnyOf(array(99.99f, 2.2f));\n","  }\n","\n","  @Test\n","  public void usingTolerance_containsAnyOf_primitiveFloatArray_failure() {\n","    expectFailureWhenTestingThat(array(1.1f, TOLERABLE_2POINT2, 3.3f))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .containsAnyOf(array(99.99f, 999.999f));\n","    assertFailureKeys(\"value of\", \"expected to contain any of\", \"testing whether\", \"but was\");\n","    assertFailureValue(\"expected to contain any of\", \"[\" + 99.99f + \", \" + 999.999f + \"]\");\n","  }\n","\n","  @Test\n","  public void usingTolerance_containsExactly_primitiveFloatArray_success() {\n","    assertThat(array(1.1f, TOLERABLE_2POINT2, 3.3f))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .containsExactly(array(2.2f, 1.1f, 3.3f));\n","  }\n","\n","  @Test\n","  public void usingTolerance_containsExactly_primitiveFloatArray_failure() {\n","    expectFailureWhenTestingThat(array(1.1f, TOLERABLE_2POINT2, 3.3f))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .containsExactly(array(2.2f, 1.1f));\n","    assertFailureKeys(\n","        \"value of\", \"unexpected (1)\", \"---\", \"expected\", \"testing whether\", \"but was\");\n","    assertFailureValue(\"unexpected (1)\", Float.toString(3.3f));\n","  }\n","\n","  @Test\n","  public void usingTolerance_containsExactly_primitiveFloatArray_inOrder_success() {\n","    assertThat(array(1.1f, TOLERABLE_2POINT2, 3.3f))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .containsExactly(array(1.1f, 2.2f, 3.3f))\n","        .inOrder();\n","  }\n","\n","  @Test\n","  public void usingTolerance_containsExactly_primitiveFloatArray_inOrder_failure() {\n","    expectFailureWhenTestingThat(array(1.1f, TOLERABLE_2POINT2, 3.3f))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .containsExactly(array(2.2f, 1.1f, 3.3f))\n","        .inOrder();\n","    assertFailureKeys(\n","        \"value of\",\n","        \"contents match, but order was wrong\",\n","        \"expected\",\n","        \"testing whether\",\n","        \"but was\");\n","    assertFailureValue(\"expected\", lenientFormat(\"[%s, %s, %s]\", 2.2f, 1.1f, 3.3f));\n","  }\n","\n","  @Test\n","  public void usingTolerance_containsNoneOf_primitiveFloatArray_success() {\n","    assertThat(array(1.1f, TOLERABLE_2POINT2, 3.3f))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .containsNoneOf(array(99.99f, 999.999f));\n","  }\n","\n","  @Test\n","  public void usingTolerance_containsNoneOf_primitiveFloatArray_failure() {\n","    expectFailureWhenTestingThat(array(1.1f, TOLERABLE_2POINT2, 3.3f))\n","        .usingTolerance(DEFAULT_TOLERANCE)\n","        .containsNoneOf(array(99.99f, 2.2f));\n","    assertFailureKeys(\n","        \"value of\",\n","        \"expected not to contain any of\",\n","        \"testing whether\",\n","        \"but contained\",\n","        \"corresponding to\",\n","        \"---\",\n","        \"full contents\");\n","    assertFailureValue(\"expected not to contain any of\", \"[\" + 99.99f + \", \" + 2.2f + \"]\");\n","    assertFailureValue(\"but contained\", \"[\" + TOLERABLE_2POINT2 + \"]\");\n","    assertFailureValue(\"corresponding to\", Float.toString(2.2f));\n","  }\n","\n","  @Test\n","  public void usingExactEquality_contains_success() {\n","    assertThat(array(1.0f, 2.0f, 3.0f)).usingExactEquality().contains(2.0f);\n","  }\n","\n","  @Test\n","  public void usingExactEquality_contains_failure() {\n","    expectFailureWhenTestingThat(array(1.1f, JUST_OVER_2POINT2, 3.3f))\n","        .usingExactEquality()\n","        .contains(2.2f);\n","    assertFailureKeys(\"value of\", \"expected to contain\", \"testing whether\", \"but was\");\n","    assertFailureValue(\"expected to contain\", Float.toString(2.2f));\n","    assertFailureValue(\"testing whether\", \"actual element is exactly equal to expected element\");\n","    assertFailureValue(\"but was\", \"[\" + 1.1f + \", \" + JUST_OVER_2POINT2 + \", \" + 3.3f + \"]\");\n","  }\n","\n","  @Test\n","  public void usingExactEquality_contains_otherTypes() {\n","    // Expected value is Integer - supported up to +/- 2^24\n","    assertThat(array(1.0f, 2.0f, 3.0f)).usingExactEquality().contains(2);\n","    assertThat(array(1.0f, 1 << 24, 3.0f)).usingExactEquality().contains(1 << 24);\n","    // Expected value is Long - supported up to +/- 2^24\n","    assertThat(array(1.0f, 2.0f, 3.0f)).usingExactEquality().contains(2L);\n","    assertThat(array(1.0f, 1 << 24, 3.0f)).usingExactEquality().contains(1L << 24);\n","  }\n","\n","  @Test\n","  public void usingExactEquality_contains_otherTypes_intOutOfRange() {\n","    int expected = (1 << 24) + 1;\n","    float[] actual = array(1.0f, 2.0f, 3.0f);\n","    expectFailureWhenTestingThat(actual).usingExactEquality().contains(expected);\n","    assertFailureKeys(\n","        \"value of\",\n","        \"expected to contain\",\n","        \"testing whether\",\n","        \"but was\",\n","        \"additionally, one or more exceptions were thrown while comparing elements\",\n","        \"first exception\");\n","    assertThatFailure()\n","        .factValue(\"first exception\")\n","        .startsWith(\n","            \"compare(\"\n","                + actual[0]\n","                + \", \"\n","                + expected\n","                + \") threw java.lang.IllegalArgumentException\");\n","    assertThatFailure()\n","        .factValue(\"first exception\")\n","        .contains(\n","            \"Expected value \"\n","                + expected\n","                + \" in assertion using exact float equality was an int with an absolute value \"\n","                + \"greater than 2^24 which has no exact float representation\");\n","  }\n","\n","  @Test\n","  public void usingExactEquality_contains_otherTypes_longOutOfRange() {\n","    long expected = (1L << 24) + 1L;\n","    float[] actual = array(1.0f, 2.0f, 3.0f);\n","    expectFailureWhenTestingThat(actual).usingExactEquality().contains(expected);\n","    assertFailureKeys(\n","        \"value of\",\n","        \"expected to contain\",\n","        \"testing whether\",\n","        \"but was\",\n","        \"additionally, one or more exceptions were thrown while comparing elements\",\n","        \"first exception\");\n","    assertFailureValue(\"expected to contain\", Long.toString(expected));\n","    assertThatFailure()\n","        .factValue(\"first exception\")\n","        .startsWith(\n","            \"compare(\"\n","                + actual[0]\n","                + \", \"\n","                + expected\n","                + \") threw java.lang.IllegalArgumentException\");\n","    assertThatFailure()\n","        .factValue(\"first exception\")\n","        .contains(\n","            \"Expected value \"\n","                + expected\n","                + \" in assertion using exact float equality was a long with an absolute value \"\n","                + \"greater than 2^24 which has no exact float representation\");\n","  }\n","\n","  @Test\n","  public void usingExactEquality_contains_otherTypes_doubleNotSupported() {\n","    double expected = 2.0;\n","    float[] actual = array(1.0f, 2.0f, 3.0f);\n","    expectFailureWhenTestingThat(actual).usingExactEquality().contains(expected);\n","    assertFailureKeys(\n","        \"value of\",\n","        \"expected to contain\",\n","        \"testing whether\",\n","        \"but was\",\n","        \"additionally, one or more exceptions were thrown while comparing elements\",\n","        \"first exception\");\n","    assertThatFailure()\n","        .factValue(\"first exception\")\n","        .startsWith(\n","            \"compare(\"\n","                + actual[0]\n","                + \", \"\n","                + expected\n","                + \") threw java.lang.IllegalArgumentException\");\n","    assertThatFailure()\n","        .factValue(\"first exception\")\n","        .contains(\n","            \"Expected value in assertion using exact float equality was a double, which is not \"\n","                + \"supported as a double may not have an exact float representation\");\n","  }\n","\n","  @Test\n","  public void usingExactEquality_contains_otherTypes_bigIntegerNotSupported() {\n","    BigInteger expected = BigInteger.valueOf(2);\n","    float[] actual = array(1.0f, 2.0f, 3.0f);\n","    expectFailureWhenTestingThat(actual).usingExactEquality().contains(expected);\n","    assertFailureKeys(\n","        \"value of\",\n","        \"expected to contain\",\n","        \"testing whether\",\n","        \"but was\",\n","        \"additionally, one or more exceptions were thrown while comparing elements\",\n","        \"first exception\");\n","    assertFailureValue(\"expected to contain\", \"2\");\n","    assertThatFailure()\n","        .factValue(\"first exception\")\n","        .startsWith(\n","            \"compare(\"\n","                + actual[0]\n","                + \", \"\n","                + expected\n","                + \") threw java.lang.IllegalArgumentException\");\n","    assertThatFailure()\n","        .factValue(\"first exception\")\n","        .contains(\n","            \"Expected value in assertion using exact float equality was of unsupported type \"\n","                + BigInteger.class\n","                + \" (it may not have an exact float representation)\");\n","  }\n","\n","  @Test\n","  public void usingExactEquality_contains_otherTypes_bigDecimalNotSupported() {\n","    BigDecimal expected = BigDecimal.valueOf(2.0);\n","    float[] actual = array(1.0f, 2.0f, 3.0f);\n","    expectFailureWhenTestingThat(actual).usingExactEquality().contains(expected);\n","    assertFailureKeys(\n","        \"value of\",\n","        \"expected to contain\",\n","        \"testing whether\",\n","        \"but was\",\n","        \"additionally, one or more exceptions were thrown while comparing elements\",\n","        \"first exception\");\n","    assertFailureValue(\"expected to contain\", expected.toString());\n","    assertThatFailure()\n","        .factValue(\"first exception\")\n","        .startsWith(\n","            \"compare(\"\n","                + actual[0]\n","                + \", \"\n","                + expected\n","                + \") threw java.lang.IllegalArgumentException\");\n","    assertThatFailure()\n","        .factValue(\"first exception\")\n","        .contains(\n","            \"Expected value in assertion using exact float equality was of unsupported type \"\n","                + BigDecimal.class\n","                + \" (it may not have an exact float representation)\");\n","  }\n","\n","  @Test\n","  public void usingExactEquality_contains_successWithInfinity() {\n","    assertThat(array(1.0f, POSITIVE_INFINITY, 3.0f))\n","        .usingExactEquality()\n","        .contains(POSITIVE_INFINITY);\n","  }\n","\n","  @Test\n","  public void usingExactEquality_contains_successWithNaN() {\n","    assertThat(array(1.0f, NaN, 3.0f)).usingExactEquality().contains(NaN);\n","  }\n","\n","  @Test\n","  public void usingExactEquality_contains_failureWithNegativeZero() {\n","    expectFailureWhenTestingThat(array(1.0f, -0.0f, 3.0f)).usingExactEquality().contains(0.0f);\n","    assertFailureKeys(\"value of\", \"expected to contain\", \"testing whether\", \"but was\");\n","    assertFailureValue(\"expected to contain\", Float.toString(0.0f));\n","  }\n","\n","  @Test\n","  public void usingExactEquality_contains_nullExpected() {\n","    float[] actual = array(1.0f, 2.0f, 3.0f);\n","    expectFailureWhenTestingThat(actual).usingExactEquality().contains(null);\n","    assertFailureKeys(\n","        \"value of\",\n","        \"expected to contain\",\n","        \"testing whether\",\n","        \"but was\",\n","        \"additionally, one or more exceptions were thrown while comparing elements\",\n","        \"first exception\");\n","    assertFailureValue(\"expected to contain\", \"null\");\n","    assertThatFailure()\n","        .factValue(\"first exception\")\n","        .startsWith(\"compare(\" + actual[0] + \", null) threw java.lang.NullPointerException\");\n","  }\n","\n","  @Test\n","  public void usingExactEquality_containsAtLeast_primitiveFloatArray_success() {\n","    assertThat(array(1.0f, 2.0f, 3.0f)).usingExactEquality().containsAtLeast(array(2.0f, 1.0f));\n","  }\n","\n","  @Test\n","  public void usingExactEquality_containsAtLeast_primitiveFloatArray_failure() {\n","    expectFailureWhenTestingThat(array(1.1f, 2.2f, 3.3f))\n","        .usingExactEquality()\n","        .containsAtLeast(array(2.2f, 99.99f));\n","    assertFailureKeys(\n","        \"value of\",\n","        \"missing (1)\",\n","        \"---\",\n","        \"expected to contain at least\",\n","        \"testing whether\",\n","        \"but was\");\n","    assertFailureValue(\"missing (1)\", Float.toString(99.99f));\n","  }\n","\n","  @Test\n","  public void usingExactEquality_containsAtLeast_primitiveFloatArray_inOrder_success() {\n","    assertThat(array(1.0f, 2.0f, 3.0f))\n","        .usingExactEquality()\n","        .containsAtLeast(array(1.0f, 2.0f))\n","        .inOrder();\n","  }\n","\n","  @Test\n","  public void usingExactEquality_containsAtLeast_primitiveFloatArray_inOrder_failure() {\n","    expectFailureWhenTestingThat(array(1.1f, 2.2f, 3.3f))\n","        .usingExactEquality()\n","        .containsAtLeast(array(2.2f, 1.1f))\n","        .inOrder();\n","    assertFailureKeys(\n","        \"value of\",\n","        \"required elements were all found, but order was wrong\",\n","        \"expected order for required elements\",\n","        \"testing whether\",\n","        \"but was\");\n","    assertFailureValue(\n","        \"expected order for required elements\", lenientFormat(\"[%s, %s]\", 2.2f, 1.1f));\n","  }\n","\n","  @Test\n","  public void usingExactEquality_containsAnyOf_primitiveFloatArray_success() {\n","    assertThat(array(1.0f, 2.0f, 3.0f)).usingExactEquality().containsAnyOf(array(99.99f, 2.0f));\n","  }\n","\n","  @Test\n","  public void usingExactEquality_containsAnyOf_primitiveFloatArray_failure() {\n","    expectFailureWhenTestingThat(array(1.1f, 2.2f, 3.3f))\n","        .usingExactEquality()\n","        .containsAnyOf(array(99.99f, 999.999f));\n","    assertFailureKeys(\"value of\", \"expected to contain any of\", \"testing whether\", \"but was\");\n","  }\n","\n","  @Test\n","  public void usingExactEquality_containsExactly_primitiveFloatArray_success() {\n","    assertThat(array(1.0f, 2.0f, 3.0f))\n","        .usingExactEquality()\n","        .containsExactly(array(2.0f, 1.0f, 3.0f));\n","  }\n","\n","  @Test\n","  public void usingExactEquality_containsExactly_primitiveFloatArray_failure() {\n","    expectFailureWhenTestingThat(array(1.1f, 2.2f, 3.3f))\n","        .usingExactEquality()\n","        .containsExactly(array(2.2f, 1.1f));\n","    assertFailureKeys(\n","        \"value of\", \"unexpected (1)\", \"---\", \"expected\", \"testing whether\", \"but was\");\n","    assertFailureValue(\"unexpected (1)\", Float.toString(3.3f));\n","  }\n","\n","  @Test\n","  public void usingExactEquality_containsExactly_primitiveFloatArray_inOrder_success() {\n","    assertThat(array(1.0f, 2.0f, 3.0f))\n","        .usingExactEquality()\n","        .containsExactly(array(1.0f, 2.0f, 3.0f))\n","        .inOrder();\n","  }\n","\n","  @Test\n","  public void usingExactEquality_containsExactly_primitiveFloatArray_inOrder_failure() {\n","    expectFailureWhenTestingThat(array(1.1f, 2.2f, 3.3f))\n","        .usingExactEquality()\n","        .containsExactly(array(2.2f, 1.1f, 3.3f))\n","        .inOrder();\n","    assertFailureKeys(\n","        \"value of\",\n","        \"contents match, but order was wrong\",\n","        \"expected\",\n","        \"testing whether\",\n","        \"but was\");\n","    assertFailureValue(\"expected\", lenientFormat(\"[%s, %s, %s]\", 2.2f, 1.1f, 3.3f));\n","  }\n","\n","  @Test\n","  public void usingExactEquality_containsNoneOf_primitiveFloatArray_success() {\n","    assertThat(array(1.0f, 2.0f, 3.0f))\n","        .usingExactEquality()\n","        .containsNoneOf(array(99.99f, 999.999f));\n","  }\n","\n","  @Test\n","  public void usingExactEquality_containsNoneOf_primitiveFloatArray_failure() {\n","    expectFailureWhenTestingThat(array(1.1f, 2.2f, 3.3f))\n","        .usingExactEquality()\n","        .containsNoneOf(array(99.99f, 2.2f));\n","    assertFailureKeys(\n","        \"value of\",\n","        \"expected not to contain any of\",\n","        \"testing whether\",\n","        \"but contained\",\n","        \"corresponding to\",\n","        \"---\",\n","        \"full contents\");\n","    assertFailureValue(\"expected not to contain any of\", \"[\" + 99.99f + \", \" + 2.2f + \"]\");\n","    assertFailureValue(\"but contained\", \"[\" + 2.2f + \"]\");\n","    assertFailureValue(\"corresponding to\", Float.toString(2.2f));\n","  }\n","\n","  private static float[] array(float... primitives) {\n","    return primitives;\n","  }\n","\n","  private PrimitiveFloatArraySubject expectFailureWhenTestingThat(float[] actual) {\n","    return expectFailure.whenTesting().that(actual);\n","  }\n","}\n"],"method_lines_dic":{"PrimitiveFloatArraySubject::::isEqualTo(java.lang.Object)":[66,69],"PrimitiveFloatArraySubject::::isNotEqualTo(java.lang.Object)":[85,88],"PrimitiveFloatArraySubject::::usingTolerance(double)":[114,116],"PrimitiveFloatArraySubject::::apply(java.lang.Float,java.lang.Number)":[124,127],"PrimitiveFloatArraySubject::::checkedToFloat(java.lang.Number)":[131,157],"PrimitiveFloatArraySubject::::usingExactEquality()":[192,194],"PrimitiveFloatArraySubject.FloatArrayAsIterable::::containsAtLeast(float[])":[217,220],"PrimitiveFloatArraySubject.FloatArrayAsIterable::::containsAnyOf(float[])":[223,225],"PrimitiveFloatArraySubject.FloatArrayAsIterable::::containsExactly(float[])":[228,231],"PrimitiveFloatArraySubject.FloatArrayAsIterable::::containsNoneOf(float[])":[234,236],"PrimitiveFloatArraySubject::::iterableSubject()":[239,243],"PrimitiveFloatArraySubject::::iterablesWithCustomFloatToString()":[253,260],"PrimitiveFloatArraySubject.IterableSubjectWithInheritedToString::::actualCustomStringRepresentation()":[268,272]},"test_method_lines_dic":{"PrimitiveFloatArraySubjectTest::::testFloatConstants_matchNextAfter()":[52,64],"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Success()":[66,70],"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_NotEqual()":[72,79],"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_DifferentOrder()":[81,84],"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_Longer()":[86,92],"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_Shorter()":[94,97],"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_PlusMinusZero()":[99,104],"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_NotAnArray()":[106,109],"PrimitiveFloatArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_FailEquals()":[111,116],"PrimitiveFloatArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_NotEqual()":[118,121],"PrimitiveFloatArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_DifferentOrder()":[123,126],"PrimitiveFloatArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_Longer()":[128,131],"PrimitiveFloatArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_Shorter()":[133,136],"PrimitiveFloatArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_PlusMinusZero()":[138,141],"PrimitiveFloatArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_NotAnArray()":[143,146],"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_success()":[148,153],"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_successWithExpectedLong()":[155,158],"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_failure()":[160,173],"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_failureWithInfinity()":[175,183],"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_failureWithNaN()":[185,193],"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_successWithNegativeZero()":[195,198],"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_otherTypes()":[200,234],"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_nullExpected()":[236,250],"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_negativeTolerance()":[252,262],"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_success()":[264,269],"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_failure()":[271,284],"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_inOrder_success()":[286,292],"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_inOrder_failure()":[294,308],"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAnyOf_primitiveFloatArray_success()":[310,315],"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAnyOf_primitiveFloatArray_failure()":[317,324],"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_success()":[326,331],"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_failure()":[333,341],"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_inOrder_success()":[343,349],"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_inOrder_failure()":[351,364],"PrimitiveFloatArraySubjectTest::::usingTolerance_containsNoneOf_primitiveFloatArray_success()":[366,371],"PrimitiveFloatArraySubjectTest::::usingTolerance_containsNoneOf_primitiveFloatArray_failure()":[373,389],"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_success()":[391,394],"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_failure()":[396,405],"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes()":[407,415],"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_intOutOfRange()":[417,444],"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()":[446,474],"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_doubleNotSupported()":[476,501],"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()":[503,530],"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()":[532,559],"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_successWithInfinity()":[561,566],"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_successWithNaN()":[568,571],"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_failureWithNegativeZero()":[573,578],"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_nullExpected()":[580,595],"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_success()":[597,600],"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_failure()":[602,615],"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_inOrder_success()":[617,623],"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_inOrder_failure()":[625,639],"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAnyOf_primitiveFloatArray_success()":[641,644],"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAnyOf_primitiveFloatArray_failure()":[646,652],"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_success()":[654,659],"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_failure()":[661,669],"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_inOrder_success()":[671,677],"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_inOrder_failure()":[679,692],"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveFloatArray_success()":[694,699],"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveFloatArray_failure()":[701,717],"PrimitiveFloatArraySubjectTest::::array(float[])":[719,721],"PrimitiveFloatArraySubjectTest::::expectFailureWhenTestingThat(float[])":[723,725]},"reverse_method_lines_dic":{"66":"PrimitiveFloatArraySubject::::isEqualTo(java.lang.Object)","67":"PrimitiveFloatArraySubject::::isEqualTo(java.lang.Object)","68":"PrimitiveFloatArraySubject::::isEqualTo(java.lang.Object)","69":"PrimitiveFloatArraySubject::::isEqualTo(java.lang.Object)","85":"PrimitiveFloatArraySubject::::isNotEqualTo(java.lang.Object)","86":"PrimitiveFloatArraySubject::::isNotEqualTo(java.lang.Object)","87":"PrimitiveFloatArraySubject::::isNotEqualTo(java.lang.Object)","88":"PrimitiveFloatArraySubject::::isNotEqualTo(java.lang.Object)","114":"PrimitiveFloatArraySubject::::usingTolerance(double)","115":"PrimitiveFloatArraySubject::::usingTolerance(double)","116":"PrimitiveFloatArraySubject::::usingTolerance(double)","124":"PrimitiveFloatArraySubject::::apply(java.lang.Float,java.lang.Number)","125":"PrimitiveFloatArraySubject::::apply(java.lang.Float,java.lang.Number)","126":"PrimitiveFloatArraySubject::::apply(java.lang.Float,java.lang.Number)","127":"PrimitiveFloatArraySubject::::apply(java.lang.Float,java.lang.Number)","131":"PrimitiveFloatArraySubject::::checkedToFloat(java.lang.Number)","132":"PrimitiveFloatArraySubject::::checkedToFloat(java.lang.Number)","133":"PrimitiveFloatArraySubject::::checkedToFloat(java.lang.Number)","134":"PrimitiveFloatArraySubject::::checkedToFloat(java.lang.Number)","135":"PrimitiveFloatArraySubject::::checkedToFloat(java.lang.Number)","136":"PrimitiveFloatArraySubject::::checkedToFloat(java.lang.Number)","137":"PrimitiveFloatArraySubject::::checkedToFloat(java.lang.Number)","138":"PrimitiveFloatArraySubject::::checkedToFloat(java.lang.Number)","139":"PrimitiveFloatArraySubject::::checkedToFloat(java.lang.Number)","140":"PrimitiveFloatArraySubject::::checkedToFloat(java.lang.Number)","141":"PrimitiveFloatArraySubject::::checkedToFloat(java.lang.Number)","142":"PrimitiveFloatArraySubject::::checkedToFloat(java.lang.Number)","143":"PrimitiveFloatArraySubject::::checkedToFloat(java.lang.Number)","144":"PrimitiveFloatArraySubject::::checkedToFloat(java.lang.Number)","145":"PrimitiveFloatArraySubject::::checkedToFloat(java.lang.Number)","146":"PrimitiveFloatArraySubject::::checkedToFloat(java.lang.Number)","147":"PrimitiveFloatArraySubject::::checkedToFloat(java.lang.Number)","148":"PrimitiveFloatArraySubject::::checkedToFloat(java.lang.Number)","149":"PrimitiveFloatArraySubject::::checkedToFloat(java.lang.Number)","150":"PrimitiveFloatArraySubject::::checkedToFloat(java.lang.Number)","151":"PrimitiveFloatArraySubject::::checkedToFloat(java.lang.Number)","152":"PrimitiveFloatArraySubject::::checkedToFloat(java.lang.Number)","153":"PrimitiveFloatArraySubject::::checkedToFloat(java.lang.Number)","154":"PrimitiveFloatArraySubject::::checkedToFloat(java.lang.Number)","155":"PrimitiveFloatArraySubject::::checkedToFloat(java.lang.Number)","156":"PrimitiveFloatArraySubject::::checkedToFloat(java.lang.Number)","157":"PrimitiveFloatArraySubject::::checkedToFloat(java.lang.Number)","192":"PrimitiveFloatArraySubject::::usingExactEquality()","193":"PrimitiveFloatArraySubject::::usingExactEquality()","194":"PrimitiveFloatArraySubject::::usingExactEquality()","217":"PrimitiveFloatArraySubject.FloatArrayAsIterable::::containsAtLeast(float[])","218":"PrimitiveFloatArraySubject.FloatArrayAsIterable::::containsAtLeast(float[])","219":"PrimitiveFloatArraySubject.FloatArrayAsIterable::::containsAtLeast(float[])","220":"PrimitiveFloatArraySubject.FloatArrayAsIterable::::containsAtLeast(float[])","223":"PrimitiveFloatArraySubject.FloatArrayAsIterable::::containsAnyOf(float[])","224":"PrimitiveFloatArraySubject.FloatArrayAsIterable::::containsAnyOf(float[])","225":"PrimitiveFloatArraySubject.FloatArrayAsIterable::::containsAnyOf(float[])","228":"PrimitiveFloatArraySubject.FloatArrayAsIterable::::containsExactly(float[])","229":"PrimitiveFloatArraySubject.FloatArrayAsIterable::::containsExactly(float[])","230":"PrimitiveFloatArraySubject.FloatArrayAsIterable::::containsExactly(float[])","231":"PrimitiveFloatArraySubject.FloatArrayAsIterable::::containsExactly(float[])","234":"PrimitiveFloatArraySubject.FloatArrayAsIterable::::containsNoneOf(float[])","235":"PrimitiveFloatArraySubject.FloatArrayAsIterable::::containsNoneOf(float[])","236":"PrimitiveFloatArraySubject.FloatArrayAsIterable::::containsNoneOf(float[])","239":"PrimitiveFloatArraySubject::::iterableSubject()","240":"PrimitiveFloatArraySubject::::iterableSubject()","241":"PrimitiveFloatArraySubject::::iterableSubject()","242":"PrimitiveFloatArraySubject::::iterableSubject()","243":"PrimitiveFloatArraySubject::::iterableSubject()","253":"PrimitiveFloatArraySubject::::iterablesWithCustomFloatToString()","254":"PrimitiveFloatArraySubject::::iterablesWithCustomFloatToString()","255":"PrimitiveFloatArraySubject::::iterablesWithCustomFloatToString()","256":"PrimitiveFloatArraySubject::::iterablesWithCustomFloatToString()","257":"PrimitiveFloatArraySubject::::iterablesWithCustomFloatToString()","258":"PrimitiveFloatArraySubject::::iterablesWithCustomFloatToString()","259":"PrimitiveFloatArraySubject::::iterablesWithCustomFloatToString()","260":"PrimitiveFloatArraySubject::::iterablesWithCustomFloatToString()","268":"PrimitiveFloatArraySubject.IterableSubjectWithInheritedToString::::actualCustomStringRepresentation()","269":"PrimitiveFloatArraySubject.IterableSubjectWithInheritedToString::::actualCustomStringRepresentation()","270":"PrimitiveFloatArraySubject.IterableSubjectWithInheritedToString::::actualCustomStringRepresentation()","271":"PrimitiveFloatArraySubject.IterableSubjectWithInheritedToString::::actualCustomStringRepresentation()","272":"PrimitiveFloatArraySubject.IterableSubjectWithInheritedToString::::actualCustomStringRepresentation()"},"test_reverse_method_lines_dic":{"52":"PrimitiveFloatArraySubjectTest::::testFloatConstants_matchNextAfter()","53":"PrimitiveFloatArraySubjectTest::::testFloatConstants_matchNextAfter()","54":"PrimitiveFloatArraySubjectTest::::testFloatConstants_matchNextAfter()","55":"PrimitiveFloatArraySubjectTest::::testFloatConstants_matchNextAfter()","56":"PrimitiveFloatArraySubjectTest::::testFloatConstants_matchNextAfter()","57":"PrimitiveFloatArraySubjectTest::::testFloatConstants_matchNextAfter()","58":"PrimitiveFloatArraySubjectTest::::testFloatConstants_matchNextAfter()","59":"PrimitiveFloatArraySubjectTest::::testFloatConstants_matchNextAfter()","60":"PrimitiveFloatArraySubjectTest::::testFloatConstants_matchNextAfter()","61":"PrimitiveFloatArraySubjectTest::::testFloatConstants_matchNextAfter()","62":"PrimitiveFloatArraySubjectTest::::testFloatConstants_matchNextAfter()","63":"PrimitiveFloatArraySubjectTest::::testFloatConstants_matchNextAfter()","64":"PrimitiveFloatArraySubjectTest::::testFloatConstants_matchNextAfter()","66":"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Success()","67":"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Success()","68":"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Success()","69":"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Success()","70":"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Success()","72":"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_NotEqual()","73":"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_NotEqual()","74":"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_NotEqual()","75":"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_NotEqual()","76":"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_NotEqual()","77":"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_NotEqual()","78":"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_NotEqual()","79":"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_NotEqual()","81":"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_DifferentOrder()","82":"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_DifferentOrder()","83":"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_DifferentOrder()","84":"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_DifferentOrder()","86":"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_Longer()","87":"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_Longer()","88":"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_Longer()","89":"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_Longer()","90":"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_Longer()","91":"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_Longer()","92":"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_Longer()","94":"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_Shorter()","95":"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_Shorter()","96":"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_Shorter()","97":"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_Shorter()","99":"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_PlusMinusZero()","100":"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_PlusMinusZero()","101":"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_PlusMinusZero()","102":"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_PlusMinusZero()","103":"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_PlusMinusZero()","104":"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_PlusMinusZero()","106":"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_NotAnArray()","107":"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_NotAnArray()","108":"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_NotAnArray()","109":"PrimitiveFloatArraySubjectTest::::isEqualTo_WithoutToleranceParameter_Fail_NotAnArray()","111":"PrimitiveFloatArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_FailEquals()","112":"PrimitiveFloatArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_FailEquals()","113":"PrimitiveFloatArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_FailEquals()","114":"PrimitiveFloatArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_FailEquals()","115":"PrimitiveFloatArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_FailEquals()","116":"PrimitiveFloatArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_FailEquals()","118":"PrimitiveFloatArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_NotEqual()","119":"PrimitiveFloatArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_NotEqual()","120":"PrimitiveFloatArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_NotEqual()","121":"PrimitiveFloatArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_NotEqual()","123":"PrimitiveFloatArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_DifferentOrder()","124":"PrimitiveFloatArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_DifferentOrder()","125":"PrimitiveFloatArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_DifferentOrder()","126":"PrimitiveFloatArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_DifferentOrder()","128":"PrimitiveFloatArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_Longer()","129":"PrimitiveFloatArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_Longer()","130":"PrimitiveFloatArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_Longer()","131":"PrimitiveFloatArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_Longer()","133":"PrimitiveFloatArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_Shorter()","134":"PrimitiveFloatArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_Shorter()","135":"PrimitiveFloatArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_Shorter()","136":"PrimitiveFloatArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_Shorter()","138":"PrimitiveFloatArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_PlusMinusZero()","139":"PrimitiveFloatArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_PlusMinusZero()","140":"PrimitiveFloatArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_PlusMinusZero()","141":"PrimitiveFloatArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_PlusMinusZero()","143":"PrimitiveFloatArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_NotAnArray()","144":"PrimitiveFloatArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_NotAnArray()","145":"PrimitiveFloatArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_NotAnArray()","146":"PrimitiveFloatArraySubjectTest::::isNotEqualTo_WithoutToleranceParameter_Success_NotAnArray()","148":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_success()","149":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_success()","150":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_success()","151":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_success()","152":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_success()","153":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_success()","155":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_successWithExpectedLong()","156":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_successWithExpectedLong()","157":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_successWithExpectedLong()","158":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_successWithExpectedLong()","160":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_failure()","161":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_failure()","162":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_failure()","163":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_failure()","164":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_failure()","165":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_failure()","166":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_failure()","167":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_failure()","168":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_failure()","169":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_failure()","170":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_failure()","171":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_failure()","172":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_failure()","173":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_failure()","175":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_failureWithInfinity()","176":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_failureWithInfinity()","177":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_failureWithInfinity()","178":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_failureWithInfinity()","179":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_failureWithInfinity()","180":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_failureWithInfinity()","181":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_failureWithInfinity()","182":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_failureWithInfinity()","183":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_failureWithInfinity()","185":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_failureWithNaN()","186":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_failureWithNaN()","187":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_failureWithNaN()","188":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_failureWithNaN()","189":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_failureWithNaN()","190":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_failureWithNaN()","191":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_failureWithNaN()","192":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_failureWithNaN()","193":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_failureWithNaN()","195":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_successWithNegativeZero()","196":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_successWithNegativeZero()","197":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_successWithNegativeZero()","198":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_successWithNegativeZero()","200":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_otherTypes()","201":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_otherTypes()","202":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_otherTypes()","203":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_otherTypes()","204":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_otherTypes()","205":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_otherTypes()","206":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_otherTypes()","207":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_otherTypes()","208":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_otherTypes()","209":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_otherTypes()","210":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_otherTypes()","211":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_otherTypes()","212":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_otherTypes()","213":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_otherTypes()","214":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_otherTypes()","215":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_otherTypes()","216":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_otherTypes()","217":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_otherTypes()","218":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_otherTypes()","219":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_otherTypes()","220":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_otherTypes()","221":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_otherTypes()","222":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_otherTypes()","223":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_otherTypes()","224":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_otherTypes()","225":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_otherTypes()","226":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_otherTypes()","227":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_otherTypes()","228":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_otherTypes()","229":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_otherTypes()","230":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_otherTypes()","231":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_otherTypes()","232":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_otherTypes()","233":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_otherTypes()","234":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_otherTypes()","236":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_nullExpected()","237":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_nullExpected()","238":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_nullExpected()","239":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_nullExpected()","240":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_nullExpected()","241":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_nullExpected()","242":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_nullExpected()","243":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_nullExpected()","244":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_nullExpected()","245":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_nullExpected()","246":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_nullExpected()","247":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_nullExpected()","248":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_nullExpected()","249":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_nullExpected()","250":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_nullExpected()","252":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_negativeTolerance()","253":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_negativeTolerance()","254":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_negativeTolerance()","255":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_negativeTolerance()","256":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_negativeTolerance()","257":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_negativeTolerance()","258":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_negativeTolerance()","259":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_negativeTolerance()","260":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_negativeTolerance()","261":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_negativeTolerance()","262":"PrimitiveFloatArraySubjectTest::::usingTolerance_contains_negativeTolerance()","264":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_success()","265":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_success()","266":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_success()","267":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_success()","268":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_success()","269":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_success()","271":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_failure()","272":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_failure()","273":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_failure()","274":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_failure()","275":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_failure()","276":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_failure()","277":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_failure()","278":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_failure()","279":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_failure()","280":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_failure()","281":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_failure()","282":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_failure()","283":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_failure()","284":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_failure()","286":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_inOrder_success()","287":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_inOrder_success()","288":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_inOrder_success()","289":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_inOrder_success()","290":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_inOrder_success()","291":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_inOrder_success()","292":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_inOrder_success()","294":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_inOrder_failure()","295":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_inOrder_failure()","296":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_inOrder_failure()","297":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_inOrder_failure()","298":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_inOrder_failure()","299":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_inOrder_failure()","300":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_inOrder_failure()","301":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_inOrder_failure()","302":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_inOrder_failure()","303":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_inOrder_failure()","304":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_inOrder_failure()","305":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_inOrder_failure()","306":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_inOrder_failure()","307":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_inOrder_failure()","308":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAtLeast_primitiveFloatArray_inOrder_failure()","310":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAnyOf_primitiveFloatArray_success()","311":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAnyOf_primitiveFloatArray_success()","312":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAnyOf_primitiveFloatArray_success()","313":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAnyOf_primitiveFloatArray_success()","314":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAnyOf_primitiveFloatArray_success()","315":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAnyOf_primitiveFloatArray_success()","317":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAnyOf_primitiveFloatArray_failure()","318":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAnyOf_primitiveFloatArray_failure()","319":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAnyOf_primitiveFloatArray_failure()","320":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAnyOf_primitiveFloatArray_failure()","321":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAnyOf_primitiveFloatArray_failure()","322":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAnyOf_primitiveFloatArray_failure()","323":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAnyOf_primitiveFloatArray_failure()","324":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsAnyOf_primitiveFloatArray_failure()","326":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_success()","327":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_success()","328":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_success()","329":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_success()","330":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_success()","331":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_success()","333":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_failure()","334":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_failure()","335":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_failure()","336":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_failure()","337":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_failure()","338":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_failure()","339":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_failure()","340":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_failure()","341":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_failure()","343":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_inOrder_success()","344":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_inOrder_success()","345":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_inOrder_success()","346":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_inOrder_success()","347":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_inOrder_success()","348":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_inOrder_success()","349":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_inOrder_success()","351":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_inOrder_failure()","352":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_inOrder_failure()","353":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_inOrder_failure()","354":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_inOrder_failure()","355":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_inOrder_failure()","356":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_inOrder_failure()","357":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_inOrder_failure()","358":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_inOrder_failure()","359":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_inOrder_failure()","360":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_inOrder_failure()","361":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_inOrder_failure()","362":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_inOrder_failure()","363":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_inOrder_failure()","364":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsExactly_primitiveFloatArray_inOrder_failure()","366":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsNoneOf_primitiveFloatArray_success()","367":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsNoneOf_primitiveFloatArray_success()","368":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsNoneOf_primitiveFloatArray_success()","369":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsNoneOf_primitiveFloatArray_success()","370":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsNoneOf_primitiveFloatArray_success()","371":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsNoneOf_primitiveFloatArray_success()","373":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsNoneOf_primitiveFloatArray_failure()","374":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsNoneOf_primitiveFloatArray_failure()","375":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsNoneOf_primitiveFloatArray_failure()","376":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsNoneOf_primitiveFloatArray_failure()","377":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsNoneOf_primitiveFloatArray_failure()","378":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsNoneOf_primitiveFloatArray_failure()","379":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsNoneOf_primitiveFloatArray_failure()","380":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsNoneOf_primitiveFloatArray_failure()","381":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsNoneOf_primitiveFloatArray_failure()","382":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsNoneOf_primitiveFloatArray_failure()","383":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsNoneOf_primitiveFloatArray_failure()","384":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsNoneOf_primitiveFloatArray_failure()","385":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsNoneOf_primitiveFloatArray_failure()","386":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsNoneOf_primitiveFloatArray_failure()","387":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsNoneOf_primitiveFloatArray_failure()","388":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsNoneOf_primitiveFloatArray_failure()","389":"PrimitiveFloatArraySubjectTest::::usingTolerance_containsNoneOf_primitiveFloatArray_failure()","391":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_success()","392":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_success()","393":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_success()","394":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_success()","396":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_failure()","397":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_failure()","398":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_failure()","399":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_failure()","400":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_failure()","401":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_failure()","402":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_failure()","403":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_failure()","404":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_failure()","405":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_failure()","407":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes()","408":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes()","409":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes()","410":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes()","411":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes()","412":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes()","413":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes()","414":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes()","415":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes()","417":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_intOutOfRange()","418":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_intOutOfRange()","419":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_intOutOfRange()","420":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_intOutOfRange()","421":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_intOutOfRange()","422":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_intOutOfRange()","423":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_intOutOfRange()","424":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_intOutOfRange()","425":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_intOutOfRange()","426":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_intOutOfRange()","427":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_intOutOfRange()","428":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_intOutOfRange()","429":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_intOutOfRange()","430":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_intOutOfRange()","431":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_intOutOfRange()","432":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_intOutOfRange()","433":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_intOutOfRange()","434":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_intOutOfRange()","435":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_intOutOfRange()","436":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_intOutOfRange()","437":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_intOutOfRange()","438":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_intOutOfRange()","439":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_intOutOfRange()","440":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_intOutOfRange()","441":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_intOutOfRange()","442":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_intOutOfRange()","443":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_intOutOfRange()","444":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_intOutOfRange()","446":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","447":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","448":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","449":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","450":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","451":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","452":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","453":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","454":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","455":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","456":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","457":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","458":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","459":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","460":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","461":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","462":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","463":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","464":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","465":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","466":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","467":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","468":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","469":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","470":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","471":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","472":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","473":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","474":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_longOutOfRange()","476":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_doubleNotSupported()","477":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_doubleNotSupported()","478":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_doubleNotSupported()","479":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_doubleNotSupported()","480":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_doubleNotSupported()","481":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_doubleNotSupported()","482":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_doubleNotSupported()","483":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_doubleNotSupported()","484":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_doubleNotSupported()","485":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_doubleNotSupported()","486":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_doubleNotSupported()","487":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_doubleNotSupported()","488":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_doubleNotSupported()","489":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_doubleNotSupported()","490":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_doubleNotSupported()","491":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_doubleNotSupported()","492":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_doubleNotSupported()","493":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_doubleNotSupported()","494":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_doubleNotSupported()","495":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_doubleNotSupported()","496":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_doubleNotSupported()","497":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_doubleNotSupported()","498":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_doubleNotSupported()","499":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_doubleNotSupported()","500":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_doubleNotSupported()","501":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_doubleNotSupported()","503":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","504":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","505":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","506":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","507":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","508":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","509":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","510":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","511":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","512":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","513":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","514":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","515":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","516":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","517":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","518":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","519":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","520":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","521":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","522":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","523":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","524":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","525":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","526":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","527":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","528":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","529":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","530":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigIntegerNotSupported()","532":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","533":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","534":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","535":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","536":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","537":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","538":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","539":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","540":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","541":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","542":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","543":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","544":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","545":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","546":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","547":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","548":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","549":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","550":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","551":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","552":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","553":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","554":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","555":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","556":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","557":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","558":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","559":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_otherTypes_bigDecimalNotSupported()","561":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_successWithInfinity()","562":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_successWithInfinity()","563":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_successWithInfinity()","564":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_successWithInfinity()","565":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_successWithInfinity()","566":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_successWithInfinity()","568":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_successWithNaN()","569":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_successWithNaN()","570":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_successWithNaN()","571":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_successWithNaN()","573":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_failureWithNegativeZero()","574":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_failureWithNegativeZero()","575":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_failureWithNegativeZero()","576":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_failureWithNegativeZero()","577":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_failureWithNegativeZero()","578":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_failureWithNegativeZero()","580":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_nullExpected()","581":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_nullExpected()","582":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_nullExpected()","583":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_nullExpected()","584":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_nullExpected()","585":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_nullExpected()","586":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_nullExpected()","587":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_nullExpected()","588":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_nullExpected()","589":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_nullExpected()","590":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_nullExpected()","591":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_nullExpected()","592":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_nullExpected()","593":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_nullExpected()","594":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_nullExpected()","595":"PrimitiveFloatArraySubjectTest::::usingExactEquality_contains_nullExpected()","597":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_success()","598":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_success()","599":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_success()","600":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_success()","602":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_failure()","603":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_failure()","604":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_failure()","605":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_failure()","606":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_failure()","607":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_failure()","608":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_failure()","609":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_failure()","610":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_failure()","611":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_failure()","612":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_failure()","613":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_failure()","614":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_failure()","615":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_failure()","617":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_inOrder_success()","618":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_inOrder_success()","619":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_inOrder_success()","620":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_inOrder_success()","621":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_inOrder_success()","622":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_inOrder_success()","623":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_inOrder_success()","625":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_inOrder_failure()","626":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_inOrder_failure()","627":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_inOrder_failure()","628":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_inOrder_failure()","629":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_inOrder_failure()","630":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_inOrder_failure()","631":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_inOrder_failure()","632":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_inOrder_failure()","633":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_inOrder_failure()","634":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_inOrder_failure()","635":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_inOrder_failure()","636":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_inOrder_failure()","637":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_inOrder_failure()","638":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_inOrder_failure()","639":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAtLeast_primitiveFloatArray_inOrder_failure()","641":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAnyOf_primitiveFloatArray_success()","642":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAnyOf_primitiveFloatArray_success()","643":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAnyOf_primitiveFloatArray_success()","644":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAnyOf_primitiveFloatArray_success()","646":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAnyOf_primitiveFloatArray_failure()","647":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAnyOf_primitiveFloatArray_failure()","648":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAnyOf_primitiveFloatArray_failure()","649":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAnyOf_primitiveFloatArray_failure()","650":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAnyOf_primitiveFloatArray_failure()","651":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAnyOf_primitiveFloatArray_failure()","652":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsAnyOf_primitiveFloatArray_failure()","654":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_success()","655":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_success()","656":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_success()","657":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_success()","658":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_success()","659":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_success()","661":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_failure()","662":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_failure()","663":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_failure()","664":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_failure()","665":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_failure()","666":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_failure()","667":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_failure()","668":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_failure()","669":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_failure()","671":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_inOrder_success()","672":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_inOrder_success()","673":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_inOrder_success()","674":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_inOrder_success()","675":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_inOrder_success()","676":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_inOrder_success()","677":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_inOrder_success()","679":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_inOrder_failure()","680":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_inOrder_failure()","681":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_inOrder_failure()","682":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_inOrder_failure()","683":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_inOrder_failure()","684":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_inOrder_failure()","685":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_inOrder_failure()","686":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_inOrder_failure()","687":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_inOrder_failure()","688":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_inOrder_failure()","689":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_inOrder_failure()","690":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_inOrder_failure()","691":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_inOrder_failure()","692":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsExactly_primitiveFloatArray_inOrder_failure()","694":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveFloatArray_success()","695":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveFloatArray_success()","696":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveFloatArray_success()","697":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveFloatArray_success()","698":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveFloatArray_success()","699":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveFloatArray_success()","701":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveFloatArray_failure()","702":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveFloatArray_failure()","703":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveFloatArray_failure()","704":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveFloatArray_failure()","705":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveFloatArray_failure()","706":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveFloatArray_failure()","707":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveFloatArray_failure()","708":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveFloatArray_failure()","709":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveFloatArray_failure()","710":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveFloatArray_failure()","711":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveFloatArray_failure()","712":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveFloatArray_failure()","713":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveFloatArray_failure()","714":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveFloatArray_failure()","715":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveFloatArray_failure()","716":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveFloatArray_failure()","717":"PrimitiveFloatArraySubjectTest::::usingExactEquality_containsNoneOf_primitiveFloatArray_failure()","719":"PrimitiveFloatArraySubjectTest::::array(float[])","720":"PrimitiveFloatArraySubjectTest::::array(float[])","721":"PrimitiveFloatArraySubjectTest::::array(float[])","723":"PrimitiveFloatArraySubjectTest::::expectFailureWhenTestingThat(float[])","724":"PrimitiveFloatArraySubjectTest::::expectFailureWhenTestingThat(float[])","725":"PrimitiveFloatArraySubjectTest::::expectFailureWhenTestingThat(float[])"},"tests":[{"test_lines":[66,70],"covered_lines":[38,39,40,68,69,118,119,122],"label":"PrimitiveFloatArraySubject::::isEqualTo(java.lang.Object)"},{"test_lines":[72,79],"covered_lines":[38,39,40,68,69,118,119,122],"label":"PrimitiveFloatArraySubject::::isEqualTo(java.lang.Object)"},{"test_lines":[81,84],"covered_lines":[38,39,40,68,69,118,119,122],"label":"PrimitiveFloatArraySubject::::isEqualTo(java.lang.Object)"},{"test_lines":[86,92],"covered_lines":[38,39,40,68,69,118,119,122],"label":"PrimitiveFloatArraySubject::::isEqualTo(java.lang.Object)"},{"test_lines":[94,97],"covered_lines":[38,39,40,68,69,118,119,122],"label":"PrimitiveFloatArraySubject::::isEqualTo(java.lang.Object)"},{"test_lines":[99,104],"covered_lines":[38,39,40,68,69,118,119,122],"label":"PrimitiveFloatArraySubject::::isEqualTo(java.lang.Object)"},{"test_lines":[106,109],"covered_lines":[38,39,40,68,69,118,119,122],"label":"PrimitiveFloatArraySubject::::isEqualTo(java.lang.Object)"},{"test_lines":[111,116],"covered_lines":[38,39,40,87,88,118,119,122],"label":"PrimitiveFloatArraySubject::::isNotEqualTo(java.lang.Object)"},{"test_lines":[118,121],"covered_lines":[38,39,40,87,88,118,119,122],"label":"PrimitiveFloatArraySubject::::isNotEqualTo(java.lang.Object)"},{"test_lines":[123,126],"covered_lines":[38,39,40,87,88,118,119,122],"label":"PrimitiveFloatArraySubject::::isNotEqualTo(java.lang.Object)"},{"test_lines":[128,131],"covered_lines":[38,39,40,87,88,118,119,122],"label":"PrimitiveFloatArraySubject::::isNotEqualTo(java.lang.Object)"},{"test_lines":[133,136],"covered_lines":[38,39,40,87,88,118,119,122],"label":"PrimitiveFloatArraySubject::::isNotEqualTo(java.lang.Object)"},{"test_lines":[138,141],"covered_lines":[38,39,40,87,88,118,119,122],"label":"PrimitiveFloatArraySubject::::isNotEqualTo(java.lang.Object)"},{"test_lines":[143,146],"covered_lines":[38,39,40,87,88,118,119,122],"label":"PrimitiveFloatArraySubject::::isNotEqualTo(java.lang.Object)"},{"test_lines":[148,153],"covered_lines":[38,39,40,115,118,119,122,211,212,240,241,242,254,257,264,265,266],"label":"PrimitiveFloatArraySubject::::usingTolerance(double)"},{"test_lines":[155,158],"covered_lines":[38,39,40,115,118,119,122,211,212,240,241,242,254,257,264,265,266],"label":"PrimitiveFloatArraySubject::::usingTolerance(double)"},{"test_lines":[160,173],"covered_lines":[38,39,40,115,118,119,122,211,212,240,241,242,254,257,264,265,266,270,271],"label":"PrimitiveFloatArraySubject::::usingTolerance(double)"},{"test_lines":[175,183],"covered_lines":[38,39,40,115,118,119,122,211,212,240,241,242,254,257,264,265,266,270,271],"label":"PrimitiveFloatArraySubject::::usingTolerance(double)"},{"test_lines":[185,193],"covered_lines":[38,39,40,115,118,119,122,211,212,240,241,242,254,257,264,265,266,270,271],"label":"PrimitiveFloatArraySubject::::usingTolerance(double)"},{"test_lines":[195,198],"covered_lines":[38,39,40,115,118,119,122,211,212,240,241,242,254,257,264,265,266],"label":"PrimitiveFloatArraySubject::::usingTolerance(double)"},{"test_lines":[200,234],"covered_lines":[38,39,40,115,118,119,122,211,212,240,241,242,254,257,264,265,266],"label":"PrimitiveFloatArraySubject::::usingTolerance(double)"},{"test_lines":[236,250],"covered_lines":[38,39,40,115,118,119,122,211,212,240,241,242,254,257,264,265,266,270,271],"label":"PrimitiveFloatArraySubject::::usingTolerance(double)"},{"test_lines":[252,262],"covered_lines":[38,39,40,118,119,122],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[264,269],"covered_lines":[38,39,40,115,118,119,122,211,212,219,240,241,242,254,257,264,265,266],"label":"PrimitiveFloatArraySubject::::usingTolerance(double)"},{"test_lines":[271,284],"covered_lines":[38,39,40,115,118,119,122,211,212,219,240,241,242,254,257,264,265,266,270,271],"label":"PrimitiveFloatArraySubject::::usingTolerance(double)"},{"test_lines":[286,292],"covered_lines":[38,39,40,115,118,119,122,211,212,219,240,241,242,254,257,264,265,266],"label":"PrimitiveFloatArraySubject::::usingTolerance(double)"},{"test_lines":[294,308],"covered_lines":[38,39,40,115,118,119,122,211,212,219,240,241,242,254,257,264,265,266,270,271],"label":"PrimitiveFloatArraySubject::::usingTolerance(double)"},{"test_lines":[310,315],"covered_lines":[38,39,40,115,118,119,122,211,212,224,225,240,241,242,254,257,264,265,266],"label":"PrimitiveFloatArraySubject::::usingTolerance(double)"},{"test_lines":[317,324],"covered_lines":[38,39,40,115,118,119,122,211,212,224,225,240,241,242,254,257,264,265,266,270,271],"label":"PrimitiveFloatArraySubject::::usingTolerance(double)"},{"test_lines":[326,331],"covered_lines":[38,39,40,115,118,119,122,211,212,230,240,241,242,254,257,264,265,266],"label":"PrimitiveFloatArraySubject::::usingTolerance(double)"},{"test_lines":[333,341],"covered_lines":[38,39,40,115,118,119,122,211,212,230,240,241,242,254,257,264,265,266,270,271],"label":"PrimitiveFloatArraySubject::::usingTolerance(double)"},{"test_lines":[343,349],"covered_lines":[38,39,40,115,118,119,122,211,212,230,240,241,242,254,257,264,265,266],"label":"PrimitiveFloatArraySubject::::usingTolerance(double)"},{"test_lines":[351,364],"covered_lines":[38,39,40,115,118,119,122,211,212,230,240,241,242,254,257,264,265,266,270,271],"label":"PrimitiveFloatArraySubject::::usingTolerance(double)"},{"test_lines":[366,371],"covered_lines":[38,39,40,115,118,119,122,211,212,235,236,240,241,242,254,257,264,265,266],"label":"PrimitiveFloatArraySubject::::usingTolerance(double)"},{"test_lines":[373,389],"covered_lines":[38,39,40,115,118,119,122,211,212,235,236,240,241,242,254,257,264,265,266,270,271],"label":"PrimitiveFloatArraySubject::::usingTolerance(double)"},{"test_lines":[391,394],"covered_lines":[38,39,40,118,119,122,126,132,133,137,141,142,149,156,193,211,212,240,241,242,254,257,264,265,266],"label":"PrimitiveFloatArraySubject::::usingExactEquality()"},{"test_lines":[396,405],"covered_lines":[38,39,40,118,119,122,126,132,133,137,141,142,149,156,193,211,212,240,241,242,254,257,264,265,266,270,271],"label":"PrimitiveFloatArraySubject::::usingExactEquality()"},{"test_lines":[407,415],"covered_lines":[38,39,40,118,119,122,126,132,133,137,141,142,143,144,149,150,151,156,193,211,212,240,241,242,254,257,264,265,266],"label":"PrimitiveFloatArraySubject::::usingExactEquality()"},{"test_lines":[417,444],"covered_lines":[38,39,40,118,119,122,132,133,137,141,142,143,144,193,211,212,240,241,242,254,257,264,265,266,270,271],"label":"PrimitiveFloatArraySubject::::usingExactEquality()"},{"test_lines":[446,474],"covered_lines":[38,39,40,118,119,122,132,133,137,141,142,149,150,151,193,211,212,240,241,242,254,257,264,265,266,270,271],"label":"PrimitiveFloatArraySubject::::usingExactEquality()"},{"test_lines":[476,501],"covered_lines":[38,39,40,118,119,122,132,133,193,211,212,240,241,242,254,257,264,265,266,270,271],"label":"PrimitiveFloatArraySubject::::usingExactEquality()"},{"test_lines":[503,530],"covered_lines":[38,39,40,118,119,122,132,133,137,141,193,211,212,240,241,242,254,257,264,265,266,270,271],"label":"PrimitiveFloatArraySubject::::usingExactEquality()"},{"test_lines":[532,559],"covered_lines":[38,39,40,118,119,122,132,133,137,141,193,211,212,240,241,242,254,257,264,265,266,270,271],"label":"PrimitiveFloatArraySubject::::usingExactEquality()"},{"test_lines":[561,566],"covered_lines":[38,39,40,118,119,122,126,132,133,137,141,142,149,156,193,211,212,240,241,242,254,257,264,265,266],"label":"PrimitiveFloatArraySubject::::usingExactEquality()"},{"test_lines":[568,571],"covered_lines":[38,39,40,118,119,122,126,132,133,137,141,142,149,156,193,211,212,240,241,242,254,257,264,265,266],"label":"PrimitiveFloatArraySubject::::usingExactEquality()"},{"test_lines":[573,578],"covered_lines":[38,39,40,118,119,122,126,132,133,137,141,142,149,156,193,211,212,240,241,242,254,257,264,265,266,270,271],"label":"PrimitiveFloatArraySubject::::usingExactEquality()"},{"test_lines":[580,595],"covered_lines":[38,39,40,118,119,122,193,211,212,240,241,242,254,257,264,265,266,270,271],"label":"PrimitiveFloatArraySubject::::usingExactEquality()"},{"test_lines":[597,600],"covered_lines":[38,39,40,118,119,122,126,132,133,137,141,142,149,156,193,211,212,219,240,241,242,254,257,264,265,266],"label":"PrimitiveFloatArraySubject::::usingExactEquality()"},{"test_lines":[602,615],"covered_lines":[38,39,40,118,119,122,126,132,133,137,141,142,149,156,193,211,212,219,240,241,242,254,257,264,265,266,270,271],"label":"PrimitiveFloatArraySubject::::usingExactEquality()"},{"test_lines":[617,623],"covered_lines":[38,39,40,118,119,122,126,132,133,137,141,142,149,156,193,211,212,219,240,241,242,254,257,264,265,266],"label":"PrimitiveFloatArraySubject::::usingExactEquality()"},{"test_lines":[625,639],"covered_lines":[38,39,40,118,119,122,126,132,133,137,141,142,149,156,193,211,212,219,240,241,242,254,257,264,265,266,270,271],"label":"PrimitiveFloatArraySubject::::usingExactEquality()"},{"test_lines":[641,644],"covered_lines":[38,39,40,118,119,122,126,132,133,137,141,142,149,156,193,211,212,224,225,240,241,242,254,257,264,265,266],"label":"PrimitiveFloatArraySubject::::usingExactEquality()"},{"test_lines":[646,652],"covered_lines":[38,39,40,118,119,122,126,132,133,137,141,142,149,156,193,211,212,224,225,240,241,242,254,257,264,265,266,270,271],"label":"PrimitiveFloatArraySubject::::usingExactEquality()"},{"test_lines":[654,659],"covered_lines":[38,39,40,118,119,122,126,132,133,137,141,142,149,156,193,211,212,230,240,241,242,254,257,264,265,266],"label":"PrimitiveFloatArraySubject::::usingExactEquality()"},{"test_lines":[661,669],"covered_lines":[38,39,40,118,119,122,126,132,133,137,141,142,149,156,193,211,212,230,240,241,242,254,257,264,265,266,270,271],"label":"PrimitiveFloatArraySubject::::usingExactEquality()"},{"test_lines":[671,677],"covered_lines":[38,39,40,118,119,122,126,132,133,137,141,142,149,156,193,211,212,230,240,241,242,254,257,264,265,266],"label":"PrimitiveFloatArraySubject::::usingExactEquality()"},{"test_lines":[679,692],"covered_lines":[38,39,40,118,119,122,126,132,133,137,141,142,149,156,193,211,212,230,240,241,242,254,257,264,265,266,270,271],"label":"PrimitiveFloatArraySubject::::usingExactEquality()"},{"test_lines":[694,699],"covered_lines":[38,39,40,118,119,122,126,132,133,137,141,142,149,156,193,211,212,235,236,240,241,242,254,257,264,265,266],"label":"PrimitiveFloatArraySubject::::usingExactEquality()"},{"test_lines":[701,717],"covered_lines":[38,39,40,118,119,122,126,132,133,137,141,142,149,156,193,211,212,235,236,240,241,242,254,257,264,265,266,270,271],"label":"PrimitiveFloatArraySubject::::usingExactEquality()"}]},"/bernard/dataset_construction/prep/repos/truth/core/src/main/java/com/google/common/truth/TruthFailureSubject.java":{"class_content":["/*\n"," * Copyright (c) 2018 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","\n","package com.google.common.truth;\n","\n","import static com.google.common.base.MoreObjects.firstNonNull;\n","import static com.google.common.base.Preconditions.checkArgument;\n","import static com.google.common.base.Preconditions.checkNotNull;\n","import static com.google.common.truth.Fact.fact;\n","import static com.google.common.truth.Fact.simpleFact;\n","\n","import com.google.common.collect.ImmutableList;\n","import org.checkerframework.checker.nullness.qual.Nullable;\n","\n","/**\n"," * Subject for {@link AssertionError} objects thrown by Truth. {@code TruthFailureSubject} contains\n"," * methods for asserting about the individual \"facts\" of those failures. This allows tests to avoid\n"," * asserting about the same fact more often than necessary, including avoiding asserting about facts\n"," * that are set by other subjects that the main subject delegates to. This keeps tests shorter and\n"," * less fragile.\n"," *\n"," * <p>To create an instance, call {@link ExpectFailure#assertThat}. Or, if you're using a custom\n"," * message or failure strategy, pass {@link #truthFailures} to your {@code about(...)} call.\n"," *\n"," * <p>This class accepts any {@code AssertionError} value, but it will throw an exception if a\n"," * caller tries to access the facts of an error that wasn't produced by Truth.\n"," */\n","public final class TruthFailureSubject extends ThrowableSubject {\n","  static final Fact HOW_TO_TEST_KEYS_WITHOUT_VALUES =\n","      simpleFact(\n","          \"To test that a key is present without a value, \"\n","              + \"use factKeys().contains(...) or a similar method.\");\n","\n","  /**\n","   * Factory for creating {@link TruthFailureSubject} instances. Most users will just use {@link\n","   * ExpectFailure#assertThat}.\n","   */\n","  public static Factory<TruthFailureSubject, AssertionError> truthFailures() {\n","    return FACTORY;\n","  }\n","\n","  private static final Factory<TruthFailureSubject, AssertionError> FACTORY =\n","      new Factory<TruthFailureSubject, AssertionError>() {\n","        @Override\n","        public TruthFailureSubject createSubject(\n","            FailureMetadata metadata, @Nullable AssertionError actual) {\n","          return new TruthFailureSubject(metadata, actual, \"failure\");\n","        }\n","      };\n","\n","  private final @Nullable AssertionError actual;\n","\n","  TruthFailureSubject(\n","      FailureMetadata metadata, @Nullable AssertionError actual, @Nullable String typeDescription) {\n","    super(metadata, actual, typeDescription);\n","    this.actual = actual;\n","  }\n","\n","  /** Returns a subject for the list of fact keys. */\n","  public IterableSubject factKeys() {\n","    if (!(actual instanceof ErrorWithFacts)) {\n","      failWithActual(simpleFact(\"expected a failure thrown by Truth's failure API\"));\n","      return ignoreCheck().that(ImmutableList.of());\n","    }\n","    ErrorWithFacts error = (ErrorWithFacts) actual;\n","    return check(\"factKeys()\").that(getFactKeys(error));\n","  }\n","\n","  private static ImmutableList<String> getFactKeys(ErrorWithFacts error) {\n","    ImmutableList.Builder<String> facts = ImmutableList.builder();\n","    for (Fact fact : error.facts()) {\n","      facts.add(fact.key);\n","    }\n","    return facts.build();\n","  }\n","\n","  /**\n","   * Returns a subject for the value with the given name.\n","   *\n","   * <p>The value is always a string, the {@code String.valueOf} representation of the value passed\n","   * to {@link Fact#fact}.\n","   *\n","   * <p>The value is never null:\n","   *\n","   * <ul>\n","   *   <li>In the case of {@linkplain Fact#simpleFact facts that have no value}, {@code factValue}\n","   *       throws an exception. To test for such facts, use {@link #factKeys()}{@code\n","   *       .contains(...)} or a similar method.\n","   *   <li>In the case of facts that have a value that is rendered as \"null\" (such as those created\n","   *       with {@code fact(\"key\", null)}), {@code factValue} considers them have a string value,\n","   *       the string \"null.\"\n","   * </ul>\n","   *\n","   * <p>If the failure under test contains more than one fact with the given key, this method will\n","   * fail the test. To assert about such a failure, use {@linkplain #factValue(String, int) the\n","   * other overload} of {@code factValue}.\n","   */\n","  public StringSubject factValue(String key) {\n","    return doFactValue(key, null);\n","  }\n","\n","  /**\n","   * Returns a subject for the value of the {@code index}-th instance of the fact with the given\n","   * name. Most Truth failures do not contain multiple facts with the same key, so most tests should\n","   * use {@linkplain #factValue(String) the other overload} of {@code factValue}.\n","   */\n","  public StringSubject factValue(String key, int index) {\n","    checkArgument(index >= 0, \"index must be nonnegative: %s\", index);\n","    return doFactValue(key, index);\n","  }\n","\n","  private StringSubject doFactValue(String key, @Nullable Integer index) {\n","    checkNotNull(key);\n","    if (!(actual instanceof ErrorWithFacts)) {\n","      failWithActual(simpleFact(\"expected a failure thrown by Truth's failure API\"));\n","      return ignoreCheck().that(\"\");\n","    }\n","    ErrorWithFacts error = (ErrorWithFacts) actual;\n","\n","    /*\n","     * We don't care as much about including the actual AssertionError and its facts in these\n","     * because the AssertionError will be attached as a cause in nearly all cases.\n","     */\n","    ImmutableList<Fact> factsWithName = factsWithName(error, key);\n","    if (factsWithName.isEmpty()) {\n","      failWithoutActual(\n","          fact(\"expected to contain fact\", key), fact(\"but contained only\", getFactKeys(error)));\n","      return ignoreCheck().that(\"\");\n","    }\n","    if (index == null && factsWithName.size() > 1) {\n","      failWithoutActual(\n","          fact(\"expected to contain a single fact with key\", key),\n","          fact(\"but contained multiple\", factsWithName));\n","      return ignoreCheck().that(\"\");\n","    }\n","    if (index != null && index > factsWithName.size()) {\n","      failWithoutActual(\n","          fact(\"for key\", key),\n","          fact(\"index too high\", index),\n","          fact(\"fact count was\", factsWithName.size()));\n","      return ignoreCheck().that(\"\");\n","    }\n","    String value = factsWithName.get(firstNonNull(index, 0)).value;\n","    if (value == null) {\n","      if (index == null) {\n","        failWithoutActual(\n","            simpleFact(\"expected to have a value\"),\n","            fact(\"for key\", key),\n","            simpleFact(\"but the key was present with no value\"),\n","            HOW_TO_TEST_KEYS_WITHOUT_VALUES);\n","      } else {\n","        failWithoutActual(\n","            simpleFact(\"expected to have a value\"),\n","            fact(\"for key\", key),\n","            fact(\"and index\", index),\n","            simpleFact(\"but the key was present with no value\"),\n","            HOW_TO_TEST_KEYS_WITHOUT_VALUES);\n","      }\n","      return ignoreCheck().that(\"\");\n","    }\n","    StandardSubjectBuilder check =\n","        index == null ? check(\"factValue(%s)\", key) : check(\"factValue(%s, %s)\", key, index);\n","    return check.that(value);\n","  }\n","\n","  private static ImmutableList<Fact> factsWithName(ErrorWithFacts error, String key) {\n","    ImmutableList.Builder<Fact> facts = ImmutableList.builder();\n","    for (Fact fact : error.facts()) {\n","      if (fact.key.equals(key)) {\n","        facts.add(fact);\n","      }\n","    }\n","    return facts.build();\n","  }\n","}\n"],"test_content":["/*\n"," * Copyright (c) 2018 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","\n","package com.google.common.truth;\n","\n","import static com.google.common.truth.Fact.fact;\n","import static com.google.common.truth.Fact.simpleFact;\n","import static com.google.common.truth.TruthFailureSubject.HOW_TO_TEST_KEYS_WITHOUT_VALUES;\n","import static com.google.common.truth.TruthFailureSubject.truthFailures;\n","import static org.junit.Assert.fail;\n","\n","import com.google.common.collect.ImmutableList;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import org.junit.runners.JUnit4;\n","\n","/** Tests for {@link TruthFailureSubject}. */\n","@RunWith(JUnit4.class)\n","public class TruthFailureSubjectTest extends BaseSubjectTestCase {\n","  // factKeys()\n","\n","  @Test\n","  public void factKeys() {\n","    assertThat(fact(\"foo\", \"the foo\")).factKeys().containsExactly(\"foo\");\n","  }\n","\n","  @Test\n","  public void factKeysNoValue() {\n","    assertThat(simpleFact(\"foo\")).factKeys().containsExactly(\"foo\");\n","  }\n","\n","  @Test\n","  public void factKeysFail() {\n","    expectFailureWhenTestingThat(fact(\"foo\", \"the foo\")).factKeys().containsExactly(\"bar\");\n","    Truth.assertThat(expectFailure.getFailure())\n","        .hasMessageThat()\n","        .contains(\"value of: failure.factKeys()\");\n","    // TODO(cpovirk): Switch to using fact-based assertions once IterableSubject uses them.\n","  }\n","\n","  // factValue(String)\n","\n","  @Test\n","  public void factValue() {\n","    assertThat(fact(\"foo\", \"the foo\")).factValue(\"foo\").isEqualTo(\"the foo\");\n","  }\n","\n","  @Test\n","  public void factValueFailWrongValue() {\n","    expectFailureWhenTestingThat(fact(\"foo\", \"the foo\")).factValue(\"foo\").isEqualTo(\"the bar\");\n","    assertFailureValue(\"value of\", \"failure.factValue(foo)\");\n","  }\n","\n","  @Test\n","  public void factValueFailNoSuchKey() {\n","    Object unused = expectFailureWhenTestingThat(fact(\"foo\", \"the foo\")).factValue(\"bar\");\n","    assertFailureKeys(\"expected to contain fact\", \"but contained only\");\n","    assertFailureValue(\"expected to contain fact\", \"bar\");\n","    assertFailureValue(\"but contained only\", \"[foo]\");\n","  }\n","\n","  @Test\n","  public void factValueFailMultipleKeys() {\n","    Object unused =\n","        expectFailureWhenTestingThat(fact(\"foo\", \"the foo\"), fact(\"foo\", \"the other foo\"))\n","            .factValue(\"foo\");\n","    assertFailureKeys(\"expected to contain a single fact with key\", \"but contained multiple\");\n","    assertFailureValue(\"expected to contain a single fact with key\", \"foo\");\n","    assertFailureValue(\"but contained multiple\", \"[foo: the foo, foo: the other foo]\");\n","  }\n","\n","  @Test\n","  public void factValueFailNoValue() {\n","    Object unused = expectFailureWhenTestingThat(simpleFact(\"foo\")).factValue(\"foo\");\n","    assertFailureKeys(\n","        \"expected to have a value\",\n","        \"for key\",\n","        \"but the key was present with no value\",\n","        HOW_TO_TEST_KEYS_WITHOUT_VALUES.key);\n","    assertFailureValue(\"for key\", \"foo\");\n","  }\n","\n","  // factValue(String, int)\n","\n","  @Test\n","  public void factValueInt() {\n","    assertThat(fact(\"foo\", \"the foo\")).factValue(\"foo\", 0).isEqualTo(\"the foo\");\n","  }\n","\n","  @Test\n","  public void factValueIntMultipleKeys() {\n","    assertThat(fact(\"foo\", \"the foo\"), fact(\"foo\", \"the other foo\"))\n","        .factValue(\"foo\", 1)\n","        .isEqualTo(\"the other foo\");\n","  }\n","\n","  @Test\n","  public void factValueIntFailNegative() {\n","    try {\n","      assertThat(fact(\"foo\", \"the foo\")).factValue(\"foo\", -1);\n","      fail();\n","    } catch (IllegalArgumentException expected) {\n","    }\n","  }\n","\n","  @Test\n","  public void factValueIntFailWrongValue() {\n","    expectFailureWhenTestingThat(fact(\"foo\", \"the foo\")).factValue(\"foo\", 0).isEqualTo(\"the bar\");\n","    assertFailureValue(\"value of\", \"failure.factValue(foo, 0)\");\n","  }\n","\n","  @Test\n","  public void factValueIntFailNoSuchKey() {\n","    Object unused = expectFailureWhenTestingThat(fact(\"foo\", \"the foo\")).factValue(\"bar\", 0);\n","    assertFailureKeys(\"expected to contain fact\", \"but contained only\");\n","    assertFailureValue(\"expected to contain fact\", \"bar\");\n","    assertFailureValue(\"but contained only\", \"[foo]\");\n","  }\n","\n","  @Test\n","  public void factValueIntFailNotEnoughWithKey() {\n","    Object unused = expectFailureWhenTestingThat(fact(\"foo\", \"the foo\")).factValue(\"foo\", 5);\n","    assertFailureKeys(\"for key\", \"index too high\", \"fact count was\");\n","    assertFailureValue(\"for key\", \"foo\");\n","    assertFailureValue(\"index too high\", \"5\");\n","    assertFailureValue(\"fact count was\", \"1\");\n","  }\n","\n","  @Test\n","  public void factValueIntFailNoValue() {\n","    Object unused = expectFailureWhenTestingThat(simpleFact(\"foo\")).factValue(\"foo\", 0);\n","    assertFailureKeys(\n","        \"expected to have a value\",\n","        \"for key\",\n","        \"and index\",\n","        \"but the key was present with no value\",\n","        HOW_TO_TEST_KEYS_WITHOUT_VALUES.key);\n","    assertFailureValue(\"for key\", \"foo\");\n","    assertFailureValue(\"and index\", \"0\");\n","  }\n","\n","  // other tests\n","\n","  @Test\n","  public void nonTruthErrorFactKeys() {\n","    Object unused = expectFailureWhenTestingThat(new AssertionError()).factKeys();\n","    assertFailureKeys(\"expected a failure thrown by Truth's failure API\", \"but was\");\n","  }\n","\n","  @Test\n","  public void nonTruthErrorFactValue() {\n","    Object unused = expectFailureWhenTestingThat(new AssertionError()).factValue(\"foo\");\n","    assertFailureKeys(\"expected a failure thrown by Truth's failure API\", \"but was\");\n","  }\n","\n","  private TruthFailureSubject assertThat(Fact... facts) {\n","    return ExpectFailure.assertThat(failure(facts));\n","  }\n","\n","  private TruthFailureSubject expectFailureWhenTestingThat(Fact... facts) {\n","    return expectFailureWhenTestingThat(failure(facts));\n","  }\n","\n","  private TruthFailureSubject expectFailureWhenTestingThat(AssertionError failure) {\n","    return (TruthFailureSubject) expectFailure.whenTesting().about(truthFailures()).that(failure);\n","  }\n","\n","  private AssertionErrorWithFacts failure(Fact... facts) {\n","    return new AssertionErrorWithFacts(\n","        ImmutableList.<String>of(), ImmutableList.copyOf(facts), /* cause= */ null);\n","  }\n","}\n"],"method_lines_dic":{"TruthFailureSubject::::truthFailures()":[51,53],"TruthFailureSubject::::createSubject(com.google.common.truth.FailureMetadata,java.lang.AssertionError)":[57,61],"TruthFailureSubject::::factKeys()":[73,80],"TruthFailureSubject::::getFactKeys(com.google.common.truth.ErrorWithFacts)":[82,88],"TruthFailureSubject::::factValue(java.lang.String)":[111,113],"TruthFailureSubject::::factValue(java.lang.String,int)":[120,123],"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)":[125,177],"TruthFailureSubject::::factsWithName(com.google.common.truth.ErrorWithFacts,java.lang.String)":[179,187]},"test_method_lines_dic":{"TruthFailureSubjectTest::::factKeys()":[35,38],"TruthFailureSubjectTest::::factKeysNoValue()":[40,43],"TruthFailureSubjectTest::::factKeysFail()":[45,52],"TruthFailureSubjectTest::::factValue()":[56,59],"TruthFailureSubjectTest::::factValueFailWrongValue()":[61,65],"TruthFailureSubjectTest::::factValueFailNoSuchKey()":[67,73],"TruthFailureSubjectTest::::factValueFailMultipleKeys()":[75,83],"TruthFailureSubjectTest::::factValueFailNoValue()":[85,94],"TruthFailureSubjectTest::::factValueInt()":[98,101],"TruthFailureSubjectTest::::factValueIntMultipleKeys()":[103,108],"TruthFailureSubjectTest::::factValueIntFailNegative()":[110,117],"TruthFailureSubjectTest::::factValueIntFailWrongValue()":[119,123],"TruthFailureSubjectTest::::factValueIntFailNoSuchKey()":[125,131],"TruthFailureSubjectTest::::factValueIntFailNotEnoughWithKey()":[133,140],"TruthFailureSubjectTest::::factValueIntFailNoValue()":[142,153],"TruthFailureSubjectTest::::nonTruthErrorFactKeys()":[157,161],"TruthFailureSubjectTest::::nonTruthErrorFactValue()":[163,167],"TruthFailureSubjectTest::::expectFailureWhenTestingThat(java.lang.AssertionError)":[177,179]},"reverse_method_lines_dic":{"51":"TruthFailureSubject::::truthFailures()","52":"TruthFailureSubject::::truthFailures()","53":"TruthFailureSubject::::truthFailures()","57":"TruthFailureSubject::::createSubject(com.google.common.truth.FailureMetadata,java.lang.AssertionError)","58":"TruthFailureSubject::::createSubject(com.google.common.truth.FailureMetadata,java.lang.AssertionError)","59":"TruthFailureSubject::::createSubject(com.google.common.truth.FailureMetadata,java.lang.AssertionError)","60":"TruthFailureSubject::::createSubject(com.google.common.truth.FailureMetadata,java.lang.AssertionError)","61":"TruthFailureSubject::::createSubject(com.google.common.truth.FailureMetadata,java.lang.AssertionError)","73":"TruthFailureSubject::::factKeys()","74":"TruthFailureSubject::::factKeys()","75":"TruthFailureSubject::::factKeys()","76":"TruthFailureSubject::::factKeys()","77":"TruthFailureSubject::::factKeys()","78":"TruthFailureSubject::::factKeys()","79":"TruthFailureSubject::::factKeys()","80":"TruthFailureSubject::::factKeys()","82":"TruthFailureSubject::::getFactKeys(com.google.common.truth.ErrorWithFacts)","83":"TruthFailureSubject::::getFactKeys(com.google.common.truth.ErrorWithFacts)","84":"TruthFailureSubject::::getFactKeys(com.google.common.truth.ErrorWithFacts)","85":"TruthFailureSubject::::getFactKeys(com.google.common.truth.ErrorWithFacts)","86":"TruthFailureSubject::::getFactKeys(com.google.common.truth.ErrorWithFacts)","87":"TruthFailureSubject::::getFactKeys(com.google.common.truth.ErrorWithFacts)","88":"TruthFailureSubject::::getFactKeys(com.google.common.truth.ErrorWithFacts)","111":"TruthFailureSubject::::factValue(java.lang.String)","112":"TruthFailureSubject::::factValue(java.lang.String)","113":"TruthFailureSubject::::factValue(java.lang.String)","120":"TruthFailureSubject::::factValue(java.lang.String,int)","121":"TruthFailureSubject::::factValue(java.lang.String,int)","122":"TruthFailureSubject::::factValue(java.lang.String,int)","123":"TruthFailureSubject::::factValue(java.lang.String,int)","125":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","126":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","127":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","128":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","129":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","130":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","131":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","132":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","133":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","134":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","135":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","136":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","137":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","138":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","139":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","140":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","141":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","142":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","143":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","144":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","145":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","146":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","147":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","148":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","149":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","150":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","151":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","152":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","153":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","154":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","155":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","156":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","157":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","158":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","159":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","160":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","161":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","162":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","163":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","164":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","165":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","166":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","167":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","168":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","169":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","170":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","171":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","172":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","173":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","174":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","175":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","176":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","177":"TruthFailureSubject::::doFactValue(java.lang.String,java.lang.Integer)","179":"TruthFailureSubject::::factsWithName(com.google.common.truth.ErrorWithFacts,java.lang.String)","180":"TruthFailureSubject::::factsWithName(com.google.common.truth.ErrorWithFacts,java.lang.String)","181":"TruthFailureSubject::::factsWithName(com.google.common.truth.ErrorWithFacts,java.lang.String)","182":"TruthFailureSubject::::factsWithName(com.google.common.truth.ErrorWithFacts,java.lang.String)","183":"TruthFailureSubject::::factsWithName(com.google.common.truth.ErrorWithFacts,java.lang.String)","184":"TruthFailureSubject::::factsWithName(com.google.common.truth.ErrorWithFacts,java.lang.String)","185":"TruthFailureSubject::::factsWithName(com.google.common.truth.ErrorWithFacts,java.lang.String)","186":"TruthFailureSubject::::factsWithName(com.google.common.truth.ErrorWithFacts,java.lang.String)","187":"TruthFailureSubject::::factsWithName(com.google.common.truth.ErrorWithFacts,java.lang.String)"},"test_reverse_method_lines_dic":{"35":"TruthFailureSubjectTest::::factKeys()","36":"TruthFailureSubjectTest::::factKeys()","37":"TruthFailureSubjectTest::::factKeys()","38":"TruthFailureSubjectTest::::factKeys()","40":"TruthFailureSubjectTest::::factKeysNoValue()","41":"TruthFailureSubjectTest::::factKeysNoValue()","42":"TruthFailureSubjectTest::::factKeysNoValue()","43":"TruthFailureSubjectTest::::factKeysNoValue()","45":"TruthFailureSubjectTest::::factKeysFail()","46":"TruthFailureSubjectTest::::factKeysFail()","47":"TruthFailureSubjectTest::::factKeysFail()","48":"TruthFailureSubjectTest::::factKeysFail()","49":"TruthFailureSubjectTest::::factKeysFail()","50":"TruthFailureSubjectTest::::factKeysFail()","51":"TruthFailureSubjectTest::::factKeysFail()","52":"TruthFailureSubjectTest::::factKeysFail()","56":"TruthFailureSubjectTest::::factValue()","57":"TruthFailureSubjectTest::::factValue()","58":"TruthFailureSubjectTest::::factValue()","59":"TruthFailureSubjectTest::::factValue()","61":"TruthFailureSubjectTest::::factValueFailWrongValue()","62":"TruthFailureSubjectTest::::factValueFailWrongValue()","63":"TruthFailureSubjectTest::::factValueFailWrongValue()","64":"TruthFailureSubjectTest::::factValueFailWrongValue()","65":"TruthFailureSubjectTest::::factValueFailWrongValue()","67":"TruthFailureSubjectTest::::factValueFailNoSuchKey()","68":"TruthFailureSubjectTest::::factValueFailNoSuchKey()","69":"TruthFailureSubjectTest::::factValueFailNoSuchKey()","70":"TruthFailureSubjectTest::::factValueFailNoSuchKey()","71":"TruthFailureSubjectTest::::factValueFailNoSuchKey()","72":"TruthFailureSubjectTest::::factValueFailNoSuchKey()","73":"TruthFailureSubjectTest::::factValueFailNoSuchKey()","75":"TruthFailureSubjectTest::::factValueFailMultipleKeys()","76":"TruthFailureSubjectTest::::factValueFailMultipleKeys()","77":"TruthFailureSubjectTest::::factValueFailMultipleKeys()","78":"TruthFailureSubjectTest::::factValueFailMultipleKeys()","79":"TruthFailureSubjectTest::::factValueFailMultipleKeys()","80":"TruthFailureSubjectTest::::factValueFailMultipleKeys()","81":"TruthFailureSubjectTest::::factValueFailMultipleKeys()","82":"TruthFailureSubjectTest::::factValueFailMultipleKeys()","83":"TruthFailureSubjectTest::::factValueFailMultipleKeys()","85":"TruthFailureSubjectTest::::factValueFailNoValue()","86":"TruthFailureSubjectTest::::factValueFailNoValue()","87":"TruthFailureSubjectTest::::factValueFailNoValue()","88":"TruthFailureSubjectTest::::factValueFailNoValue()","89":"TruthFailureSubjectTest::::factValueFailNoValue()","90":"TruthFailureSubjectTest::::factValueFailNoValue()","91":"TruthFailureSubjectTest::::factValueFailNoValue()","92":"TruthFailureSubjectTest::::factValueFailNoValue()","93":"TruthFailureSubjectTest::::factValueFailNoValue()","94":"TruthFailureSubjectTest::::factValueFailNoValue()","98":"TruthFailureSubjectTest::::factValueInt()","99":"TruthFailureSubjectTest::::factValueInt()","100":"TruthFailureSubjectTest::::factValueInt()","101":"TruthFailureSubjectTest::::factValueInt()","103":"TruthFailureSubjectTest::::factValueIntMultipleKeys()","104":"TruthFailureSubjectTest::::factValueIntMultipleKeys()","105":"TruthFailureSubjectTest::::factValueIntMultipleKeys()","106":"TruthFailureSubjectTest::::factValueIntMultipleKeys()","107":"TruthFailureSubjectTest::::factValueIntMultipleKeys()","108":"TruthFailureSubjectTest::::factValueIntMultipleKeys()","110":"TruthFailureSubjectTest::::factValueIntFailNegative()","111":"TruthFailureSubjectTest::::factValueIntFailNegative()","112":"TruthFailureSubjectTest::::factValueIntFailNegative()","113":"TruthFailureSubjectTest::::factValueIntFailNegative()","114":"TruthFailureSubjectTest::::factValueIntFailNegative()","115":"TruthFailureSubjectTest::::factValueIntFailNegative()","116":"TruthFailureSubjectTest::::factValueIntFailNegative()","117":"TruthFailureSubjectTest::::factValueIntFailNegative()","119":"TruthFailureSubjectTest::::factValueIntFailWrongValue()","120":"TruthFailureSubjectTest::::factValueIntFailWrongValue()","121":"TruthFailureSubjectTest::::factValueIntFailWrongValue()","122":"TruthFailureSubjectTest::::factValueIntFailWrongValue()","123":"TruthFailureSubjectTest::::factValueIntFailWrongValue()","125":"TruthFailureSubjectTest::::factValueIntFailNoSuchKey()","126":"TruthFailureSubjectTest::::factValueIntFailNoSuchKey()","127":"TruthFailureSubjectTest::::factValueIntFailNoSuchKey()","128":"TruthFailureSubjectTest::::factValueIntFailNoSuchKey()","129":"TruthFailureSubjectTest::::factValueIntFailNoSuchKey()","130":"TruthFailureSubjectTest::::factValueIntFailNoSuchKey()","131":"TruthFailureSubjectTest::::factValueIntFailNoSuchKey()","133":"TruthFailureSubjectTest::::factValueIntFailNotEnoughWithKey()","134":"TruthFailureSubjectTest::::factValueIntFailNotEnoughWithKey()","135":"TruthFailureSubjectTest::::factValueIntFailNotEnoughWithKey()","136":"TruthFailureSubjectTest::::factValueIntFailNotEnoughWithKey()","137":"TruthFailureSubjectTest::::factValueIntFailNotEnoughWithKey()","138":"TruthFailureSubjectTest::::factValueIntFailNotEnoughWithKey()","139":"TruthFailureSubjectTest::::factValueIntFailNotEnoughWithKey()","140":"TruthFailureSubjectTest::::factValueIntFailNotEnoughWithKey()","142":"TruthFailureSubjectTest::::factValueIntFailNoValue()","143":"TruthFailureSubjectTest::::factValueIntFailNoValue()","144":"TruthFailureSubjectTest::::factValueIntFailNoValue()","145":"TruthFailureSubjectTest::::factValueIntFailNoValue()","146":"TruthFailureSubjectTest::::factValueIntFailNoValue()","147":"TruthFailureSubjectTest::::factValueIntFailNoValue()","148":"TruthFailureSubjectTest::::factValueIntFailNoValue()","149":"TruthFailureSubjectTest::::factValueIntFailNoValue()","150":"TruthFailureSubjectTest::::factValueIntFailNoValue()","151":"TruthFailureSubjectTest::::factValueIntFailNoValue()","152":"TruthFailureSubjectTest::::factValueIntFailNoValue()","153":"TruthFailureSubjectTest::::factValueIntFailNoValue()","157":"TruthFailureSubjectTest::::nonTruthErrorFactKeys()","158":"TruthFailureSubjectTest::::nonTruthErrorFactKeys()","159":"TruthFailureSubjectTest::::nonTruthErrorFactKeys()","160":"TruthFailureSubjectTest::::nonTruthErrorFactKeys()","161":"TruthFailureSubjectTest::::nonTruthErrorFactKeys()","163":"TruthFailureSubjectTest::::nonTruthErrorFactValue()","164":"TruthFailureSubjectTest::::nonTruthErrorFactValue()","165":"TruthFailureSubjectTest::::nonTruthErrorFactValue()","166":"TruthFailureSubjectTest::::nonTruthErrorFactValue()","167":"TruthFailureSubjectTest::::nonTruthErrorFactValue()","177":"TruthFailureSubjectTest::::expectFailureWhenTestingThat(java.lang.AssertionError)","178":"TruthFailureSubjectTest::::expectFailureWhenTestingThat(java.lang.AssertionError)","179":"TruthFailureSubjectTest::::expectFailureWhenTestingThat(java.lang.AssertionError)"},"tests":[{"test_lines":[35,38],"covered_lines":[42,43,52,55,56,60,68,69,70,74,78,79,83,84,85,86,87],"label":"TruthFailureSubject::::factKeys()"},{"test_lines":[40,43],"covered_lines":[42,43,52,55,56,60,68,69,70,74,78,79,83,84,85,86,87],"label":"TruthFailureSubject::::factKeys()"},{"test_lines":[45,52],"covered_lines":[42,43,52,55,56,60,68,69,70,74,78,79,83,84,85,86,87],"label":"TruthFailureSubject::::factKeys()"},{"test_lines":[56,59],"covered_lines":[42,43,52,55,56,60,68,69,70,112,126,127,131,137,138,143,149,156,157,174,175,176,180,181,182,183,185,186],"label":"TruthFailureSubject::::factValue(java.lang.String)"},{"test_lines":[61,65],"covered_lines":[42,43,52,55,56,60,68,69,70,112,126,127,131,137,138,143,149,156,157,174,175,176,180,181,182,183,185,186],"label":"TruthFailureSubject::::factValue(java.lang.String)"},{"test_lines":[67,73],"covered_lines":[42,43,52,55,56,60,68,69,70,74,78,79,83,84,85,86,87,112,126,127,131,137,138,139,140,141,143,149,156,157,174,175,176,180,181,182,183,185,186],"label":"TruthFailureSubject::::factValue(java.lang.String)"},{"test_lines":[75,83],"covered_lines":[42,43,52,55,56,60,68,69,70,74,78,79,83,84,85,86,87,112,126,127,131,137,138,143,144,145,146,147,149,156,157,174,175,176,180,181,182,183,185,186],"label":"TruthFailureSubject::::factValue(java.lang.String)"},{"test_lines":[85,94],"covered_lines":[42,43,52,55,56,60,68,69,70,74,78,79,83,84,85,86,87,112,126,127,131,137,138,143,149,156,157,158,159,160,161,162,172,174,175,176,180,181,182,183,185,186],"label":"TruthFailureSubject::::factValue(java.lang.String)"},{"test_lines":[98,101],"covered_lines":[42,43,52,55,56,60,68,69,70,121,122,126,127,131,137,138,143,149,156,157,174,175,176,180,181,182,183,185,186],"label":"TruthFailureSubject::::factValue(java.lang.String,int)"},{"test_lines":[103,108],"covered_lines":[42,43,52,55,56,60,68,69,70,121,122,126,127,131,137,138,143,149,156,157,174,175,176,180,181,182,183,185,186],"label":"TruthFailureSubject::::factValue(java.lang.String,int)"},{"test_lines":[110,117],"covered_lines":[42,43,52,55,56,60,68,69,70,121],"label":"TruthFailureSubject::::factValue(java.lang.String,int)"},{"test_lines":[119,123],"covered_lines":[42,43,52,55,56,60,68,69,70,112,121,122,126,127,131,137,138,143,149,156,157,174,175,176,180,181,182,183,185,186],"label":"TruthFailureSubject::::factValue(java.lang.String,int)"},{"test_lines":[125,131],"covered_lines":[42,43,52,55,56,60,68,69,70,74,78,79,83,84,85,86,87,112,121,122,126,127,131,137,138,139,140,141,143,149,156,157,174,175,176,180,181,182,183,185,186],"label":"TruthFailureSubject::::factValue(java.lang.String,int)"},{"test_lines":[133,140],"covered_lines":[42,43,52,55,56,60,68,69,70,74,78,79,83,84,85,86,87,112,121,122,126,127,131,137,138,143,149,150,151,152,153,154,156,157,174,175,176,180,181,182,183,185,186],"label":"TruthFailureSubject::::factValue(java.lang.String,int)"},{"test_lines":[142,153],"covered_lines":[42,43,52,55,56,60,68,69,70,74,78,79,83,84,85,86,87,112,121,122,126,127,131,137,138,143,149,156,157,158,165,166,167,168,169,172,174,175,176,180,181,182,183,185,186],"label":"TruthFailureSubject::::factValue(java.lang.String,int)"},{"test_lines":[157,161],"covered_lines":[42,43,52,55,56,60,68,69,70,74,75,76,78,79,83,84,85,86,87],"label":"TruthFailureSubject::::factKeys()"},{"test_lines":[163,167],"covered_lines":[42,43,52,55,56,60,68,69,70,74,78,79,83,84,85,86,87,112,126,127,128,129],"label":"TruthFailureSubject::::factValue(java.lang.String)"}]},"/bernard/dataset_construction/prep/repos/truth/core/src/main/java/com/google/common/truth/Subject.java":{"class_content":["/*\n"," * Copyright (c) 2011 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.base.CaseFormat.LOWER_CAMEL;\n","import static com.google.common.base.CaseFormat.UPPER_CAMEL;\n","import static com.google.common.base.CharMatcher.whitespace;\n","import static com.google.common.base.MoreObjects.firstNonNull;\n","import static com.google.common.base.Preconditions.checkArgument;\n","import static com.google.common.base.Preconditions.checkNotNull;\n","import static com.google.common.base.Strings.lenientFormat;\n","import static com.google.common.truth.Fact.fact;\n","import static com.google.common.truth.Fact.simpleFact;\n","import static com.google.common.truth.Platform.doubleToString;\n","import static com.google.common.truth.Platform.floatToString;\n","import static com.google.common.truth.Platform.isKotlinRange;\n","import static com.google.common.truth.Platform.kotlinRangeContains;\n","import static com.google.common.truth.Platform.stringValueOfNonFloatingPoint;\n","import static com.google.common.truth.Subject.EqualityCheck.SAME_INSTANCE;\n","import static com.google.common.truth.SubjectUtils.accumulate;\n","import static com.google.common.truth.SubjectUtils.append;\n","import static com.google.common.truth.SubjectUtils.concat;\n","import static com.google.common.truth.SubjectUtils.sandwich;\n","import static java.util.Arrays.asList;\n","\n","import com.google.common.base.Objects;\n","import com.google.common.collect.ImmutableList;\n","import com.google.common.collect.Iterables;\n","import com.google.common.collect.Lists;\n","import com.google.common.primitives.Booleans;\n","import com.google.common.primitives.Bytes;\n","import com.google.common.primitives.Chars;\n","import com.google.common.primitives.Ints;\n","import com.google.common.primitives.Longs;\n","import com.google.common.primitives.Shorts;\n","import com.google.common.truth.FailureMetadata.OldAndNewValuesAreSimilar;\n","import com.google.errorprone.annotations.DoNotCall;\n","import com.google.errorprone.annotations.ForOverride;\n","import java.lang.reflect.Array;\n","import java.util.ArrayList;\n","import java.util.Arrays;\n","import java.util.List;\n","import org.checkerframework.checker.nullness.qual.Nullable;\n","\n","/**\n"," * An object that lets you perform checks on the value under test. For example, {@code Subject}\n"," * contains {@link #isEqualTo(Object)} and {@link #isInstanceOf(Class)}, and {@link StringSubject}\n"," * contains {@link StringSubject#startsWith startsWith(String)}.\n"," *\n"," * <p>To create a {@code Subject} instance, most users will call an {@link Truth#assertThat\n"," * assertThat} method. For information about other ways to create an instance, see <a\n"," * href=\"https://truth.dev/faq#full-chain\">this FAQ entry</a>.\n"," *\n"," * <h3>For people extending Truth</h3>\n"," *\n"," * <p>For information about writing a custom {@link Subject}, see <a\n"," * href=\"https://truth.dev/extension\">our doc on extensions</a>.\n"," *\n"," * @author David Saff\n"," * @author Christian Gruber\n"," */\n","public class Subject {\n","  /**\n","   * In a fluent assertion chain, the argument to the common overload of {@link\n","   * StandardSubjectBuilder#about(Subject.Factory) about}, the method that specifies what kind of\n","   * {@link Subject} to create.\n","   *\n","   * <p>For more information about the fluent chain, see <a\n","   * href=\"https://truth.dev/faq#full-chain\">this FAQ entry</a>.\n","   *\n","   * <h3>For people extending Truth</h3>\n","   *\n","   * <p>When you write a custom subject, see <a href=\"https://truth.dev/extension\">our doc on\n","   * extensions</a>. It explains where {@code Subject.Factory} fits into the process.\n","   */\n","  public interface Factory<SubjectT extends Subject, ActualT> {\n","    /** Creates a new {@link Subject}. */\n","    SubjectT createSubject(FailureMetadata metadata, @Nullable ActualT actual);\n","  }\n","\n","  private final @Nullable FailureMetadata metadata;\n","  private final @Nullable Object actual;\n","  private final @Nullable String typeDescriptionOverride;\n","\n","  /**\n","   * Constructor for use by subclasses. If you want to create an instance of this class itself, call\n","   * {@link Subject#check(String, Object...) check(...)}{@code .that(actual)}.\n","   */\n","  protected Subject(FailureMetadata metadata, @Nullable Object actual) {\n","    this(metadata, actual, /* typeDescriptionOverride= */ null);\n","  }\n","\n","  /**\n","   * Special constructor that lets subclasses provide a description of the type they're testing. For\n","   * example, {@link ThrowableSubject} passes the description \"throwable.\" Normally, Truth is able\n","   * to infer this name from the class name. However, if we lack runtime type information (notably,\n","   * under j2cl with class metadata off), we might not have access to the original class name.\n","   *\n","   * <p>We don't expect to make this a public API: Class names are nearly always available. It's\n","   * just that we want to be able to run Truth's own tests run with class metadata off, and it's\n","   * easier to tweak the subjects to know their own names rather than generalize the tests to accept\n","   * obfuscated names.\n","   */\n","  Subject(\n","      @Nullable FailureMetadata metadata,\n","      @Nullable Object actual,\n","      @Nullable String typeDescriptionOverride) {\n","    this.metadata = metadata == null ? null : metadata.updateForSubject(this);\n","    this.actual = actual;\n","    this.typeDescriptionOverride = typeDescriptionOverride;\n","  }\n","\n","  /** Fails if the subject is not null. */\n","  public void isNull() {\n","    standardIsEqualTo(null);\n","  }\n","\n","  /** Fails if the subject is null. */\n","  public void isNotNull() {\n","    standardIsNotEqualTo(null);\n","  }\n","\n","  /**\n","   * Fails if the subject is not equal to the given object. For the purposes of this comparison, two\n","   * objects are equal if any of the following is true:\n","   *\n","   * <ul>\n","   *   <li>they are equal according to {@link Objects#equal}\n","   *   <li>they are arrays and are considered equal by the appropriate {@link Arrays#equals}\n","   *       overload\n","   *   <li>they are boxed integer types ({@code Byte}, {@code Short}, {@code Character}, {@code\n","   *       Integer}, or {@code Long}) and they are numerically equal when converted to {@code Long}.\n","   *   <li>the actual value is a boxed floating-point type ({@code Double} or {@code Float}), the\n","   *       expected value is an {@code Integer}, and the two are numerically equal when converted to\n","   *       {@code Double}. (This allows {@code assertThat(someDouble).isEqualTo(0)} to pass.)\n","   * </ul>\n","   *\n","   * <p><b>Note:</b> This method does not test the {@link Object#equals} implementation itself; it\n","   * <i>assumes</i> that method is functioning correctly according to its contract. Testing an\n","   * {@code equals} implementation requires a utility such as <a\n","   * href=\"https://mvnrepository.com/artifact/com.google.guava/guava-testlib\">guava-testlib</a>'s <a\n","   * href=\"https://static.javadoc.io/com.google.guava/guava-testlib/23.0/com/google/common/testing/EqualsTester.html\">EqualsTester</a>.\n","   *\n","   * <p>In some cases, this method might not even call {@code equals}. It may instead perform other\n","   * tests that will return the same result as long as {@code equals} is implemented according to\n","   * the contract for its type.\n","   */\n","  /*\n","   * TODO(cpovirk): Possibly ban overriding isEqualTo+isNotEqualTo in favor of a\n","   * compareForEquality(Object, Object) method. That way, people would need to override only one\n","   * method, they would get a ComparisonFailure and other message niceties, and they'd have less to\n","   * test.\n","   */\n","  public void isEqualTo(@Nullable Object expected) {\n","    standardIsEqualTo(expected);\n","  }\n","\n","  private void standardIsEqualTo(@Nullable Object expected) {\n","    ComparisonResult difference = compareForEquality(expected);\n","    if (!difference.valuesAreEqual()) {\n","      failEqualityCheck(EqualityCheck.EQUAL, expected, difference);\n","    }\n","  }\n","\n","  /**\n","   * Fails if the subject is equal to the given object. The meaning of equality is the same as for\n","   * the {@link #isEqualTo} method.\n","   */\n","  public void isNotEqualTo(@Nullable Object unexpected) {\n","    standardIsNotEqualTo(unexpected);\n","  }\n","\n","  private void standardIsNotEqualTo(@Nullable Object unexpected) {\n","    ComparisonResult difference = compareForEquality(unexpected);\n","    if (difference.valuesAreEqual()) {\n","      String unexpectedAsString = formatActualOrExpected(unexpected);\n","      if (actualCustomStringRepresentation().equals(unexpectedAsString)) {\n","        failWithoutActual(fact(\"expected not to be\", unexpectedAsString));\n","      } else {\n","        failWithoutActual(\n","            fact(\"expected not to be\", unexpectedAsString),\n","            fact(\n","                \"but was; string representation of actual value\",\n","                actualCustomStringRepresentation()));\n","      }\n","    }\n","  }\n","\n","  /**\n","   * Returns whether {@code actual} equals {@code expected} differ and, in some cases, a description\n","   * of how they differ.\n","   *\n","   * <p>The equality check follows the rules described on {@link #isEqualTo}.\n","   */\n","  private ComparisonResult compareForEquality(@Nullable Object expected) {\n","    if (actual == null && expected == null) {\n","      return ComparisonResult.equal();\n","    } else if (actual == null || expected == null) {\n","      return ComparisonResult.differentNoDescription();\n","    } else if (actual instanceof byte[] && expected instanceof byte[]) {\n","      /*\n","       * For a special error message and to use faster Arrays.equals to avoid at least one timeout.\n","       *\n","       * TODO(cpovirk): For performance, use Arrays.equals for other array types (here and/or in\n","       * checkArrayEqualsRecursive)? Exception: double[] and float[], whose GWT implementations I\n","       * think may have both false positives and false negatives (so we can't even use Arrays.equals\n","       * as a fast path for them, nor deepEquals for an Object[] that might contain them). We would\n","       * still fall back to the slower checkArrayEqualsRecursive to produce a nicer failure message\n","       * -- but naturally only for tests that are about to fail, when performance matters less.\n","       */\n","      return checkByteArrayEquals((byte[]) expected, (byte[]) actual);\n","    } else if (actual.getClass().isArray() && expected.getClass().isArray()) {\n","      return checkArrayEqualsRecursive(expected, actual, \"\");\n","    } else if (isIntegralBoxedPrimitive(actual) && isIntegralBoxedPrimitive(expected)) {\n","      return ComparisonResult.fromEqualsResult(integralValue(actual) == integralValue(expected));\n","    } else if (actual instanceof Double && expected instanceof Double) {\n","      return ComparisonResult.fromEqualsResult(\n","          Double.compare((Double) actual, (Double) expected) == 0);\n","    } else if (actual instanceof Float && expected instanceof Float) {\n","      return ComparisonResult.fromEqualsResult(\n","          Float.compare((Float) actual, (Float) expected) == 0);\n","    } else if (actual instanceof Double && expected instanceof Integer) {\n","      return ComparisonResult.fromEqualsResult(\n","          Double.compare((Double) actual, (Integer) expected) == 0);\n","    } else if (actual instanceof Float && expected instanceof Integer) {\n","      return ComparisonResult.fromEqualsResult(\n","          Double.compare((Float) actual, (Integer) expected) == 0);\n","    } else {\n","      return ComparisonResult.fromEqualsResult(actual == expected || actual.equals(expected));\n","    }\n","  }\n","\n","  private static boolean isIntegralBoxedPrimitive(@Nullable Object o) {\n","    return o instanceof Byte\n","        || o instanceof Short\n","        || o instanceof Character\n","        || o instanceof Integer\n","        || o instanceof Long;\n","  }\n","\n","  private static long integralValue(Object o) {\n","    if (o instanceof Character) {\n","      return (long) ((Character) o).charValue();\n","    } else if (o instanceof Number) {\n","      return ((Number) o).longValue();\n","    } else {\n","      throw new AssertionError(o + \" must be either a Character or a Number.\");\n","    }\n","  }\n","\n","  /** Fails if the subject is not the same instance as the given object. */\n","  public final void isSameInstanceAs(@Nullable Object expected) {\n","    if (actual != expected) {\n","      failEqualityCheck(\n","          SAME_INSTANCE,\n","          expected,\n","          /*\n","           * Pass through *whether* the values are equal so that failEqualityCheck() can print that\n","           * information. But remove the description of the difference, which is always about\n","           * content, since people calling isSameInstanceAs() are explicitly not interested in\n","           * content, only object identity.\n","           */\n","          compareForEquality(expected).withoutDescription());\n","    }\n","  }\n","\n","  /** Fails if the subject is the same instance as the given object. */\n","  public final void isNotSameInstanceAs(@Nullable Object unexpected) {\n","    if (actual == unexpected) {\n","      /*\n","       * We use actualCustomStringRepresentation() because it might be overridden to be better than\n","       * actual.toString()/unexpected.toString().\n","       */\n","      failWithoutActual(\n","          fact(\"expected not to be specific instance\", actualCustomStringRepresentation()));\n","    }\n","  }\n","\n","  /** Fails if the subject is not an instance of the given class. */\n","  public void isInstanceOf(Class<?> clazz) {\n","    if (clazz == null) {\n","      throw new NullPointerException(\"clazz\");\n","    }\n","    if (actual == null) {\n","      failWithActual(\"expected instance of\", clazz.getName());\n","      return;\n","    }\n","    if (!isInstanceOfType(actual, clazz)) {\n","      if (Platform.classMetadataUnsupported()) {\n","        throw new UnsupportedOperationException(\n","            actualCustomStringRepresentation()\n","                + \", an instance of \"\n","                + actual.getClass().getName()\n","                + \", may or may not be an instance of \"\n","                + clazz.getName()\n","                + \". Under -XdisableClassMetadata, we do not have enough information to tell.\");\n","      }\n","      failWithoutActual(\n","          fact(\"expected instance of\", clazz.getName()),\n","          fact(\"but was instance of\", actual.getClass().getName()),\n","          fact(\"with value\", actualCustomStringRepresentation()));\n","    }\n","  }\n","\n","  /** Fails if the subject is an instance of the given class. */\n","  public void isNotInstanceOf(Class<?> clazz) {\n","    if (clazz == null) {\n","      throw new NullPointerException(\"clazz\");\n","    }\n","    if (Platform.classMetadataUnsupported()) {\n","      throw new UnsupportedOperationException(\n","          \"isNotInstanceOf is not supported under -XdisableClassMetadata\");\n","    }\n","    if (actual == null) {\n","      return; // null is not an instance of clazz.\n","    }\n","    if (isInstanceOfType(actual, clazz)) {\n","      failWithActual(\"expected not to be an instance of\", clazz.getName());\n","      /*\n","       * TODO(cpovirk): Consider including actual.getClass() if it's not clazz itself but only a\n","       * subtype.\n","       */\n","    }\n","  }\n","\n","  private static boolean isInstanceOfType(Object instance, Class<?> clazz) {\n","    checkArgument(\n","        !clazz.isPrimitive(),\n","        \"Cannot check instanceof for primitive type %s. Pass the wrapper class instead.\",\n","        clazz.getSimpleName());\n","    /*\n","     * TODO(cpovirk): Make the message include `Primitives.wrap(clazz).getSimpleName()` once that\n","     * method is available in a public guava-gwt release that we depend on.\n","     */\n","    return Platform.isInstanceOfType(instance, clazz);\n","  }\n","\n","  /** Fails unless the subject is equal to any element in the given iterable. */\n","  public void isIn(@Nullable Iterable<?> iterable) {\n","    checkNotNull(iterable);\n","    if (!contains(iterable, actual)) {\n","      failWithActual(\"expected any of\", iterable);\n","    }\n","  }\n","\n","  private static boolean contains(Iterable<?> haystack, @Nullable Object needle) {\n","    if (isKotlinRange(haystack)) {\n","      return kotlinRangeContains(haystack, needle);\n","    }\n","    return Iterables.contains(haystack, needle);\n","  }\n","\n","  /** Fails unless the subject is equal to any of the given elements. */\n","  public void isAnyOf(\n","      @Nullable Object first, @Nullable Object second, @Nullable Object @Nullable ... rest) {\n","    isIn(accumulate(first, second, rest));\n","  }\n","\n","  /** Fails if the subject is equal to any element in the given iterable. */\n","  public void isNotIn(@Nullable Iterable<?> iterable) {\n","    checkNotNull(iterable);\n","    if (Iterables.contains(iterable, actual)) {\n","      failWithActual(\"expected not to be any of\", iterable);\n","    }\n","  }\n","\n","  /** Fails if the subject is equal to any of the given elements. */\n","  public void isNoneOf(\n","      @Nullable Object first, @Nullable Object second, @Nullable Object @Nullable ... rest) {\n","    isNotIn(accumulate(first, second, rest));\n","  }\n","\n","  /** Returns the actual value under test. */\n","  final @Nullable Object actual() {\n","    return actual;\n","  }\n","\n","  /**\n","   * Supplies the direct string representation of the actual value to other methods which may prefix\n","   * or otherwise position it in an error message. This should only be overridden to provide an\n","   * improved string representation of the value under test, as it would appear in any given error\n","   * message, and should not be used for additional prefixing.\n","   *\n","   * <p>Subjects should override this with care.\n","   *\n","   * <p>By default, this returns {@code String.ValueOf(getActualValue())}.\n","   */\n","  /*\n","   * TODO(cpovirk): Consider whether this API pulls its weight. If users want to format the actual\n","   * value, maybe they should do so themselves? Of course, they won't have a chance to use a custom\n","   * format for inherited implementations like isEqualTo(). But if they want to format the actual\n","   * value specially, then it seems likely that they'll want to format the expected value specially,\n","   * too. And that applies just as well to APIs like isIn(). Maybe we'll want an API that supports\n","   * formatting those values, too (like formatActualOrExpected below)? See also the related\n","   * b/70930431. But note that we are likely to use this from FailureMetadata, at least in the short\n","   * term, for better or for worse.\n","   */\n","  @ForOverride\n","  protected String actualCustomStringRepresentation() {\n","    return formatActualOrExpected(actual);\n","  }\n","\n","  final String actualCustomStringRepresentationForPackageMembersToCall() {\n","    return actualCustomStringRepresentation();\n","  }\n","\n","  private String formatActualOrExpected(@Nullable Object o) {\n","    if (o instanceof byte[]) {\n","      return base16((byte[]) o);\n","    } else if (o != null && o.getClass().isArray()) {\n","      return String.valueOf(arrayAsListRecursively(o));\n","    } else if (o instanceof Double) {\n","      return doubleToString((Double) o);\n","    } else if (o instanceof Float) {\n","      return floatToString((Float) o);\n","    } else {\n","      // TODO(cpovirk): Consider renaming the called method to mention \"NonArray.\"\n","      /*\n","       * TODO(cpovirk): Should the called method and arrayAsListRecursively(...) both call back into\n","       * formatActualOrExpected for its handling of byte[] and float/double? Or is there some other\n","       * restructuring of this set of methods that we should undertake?\n","       */\n","      return stringValueOfNonFloatingPoint(o);\n","    }\n","  }\n","\n","  // We could add a dep on com.google.common.io, but that seems overkill for base16 encoding\n","  private static String base16(byte[] bytes) {\n","    StringBuilder sb = new StringBuilder(2 * bytes.length);\n","    for (byte b : bytes) {\n","      sb.append(hexDigits[(b >> 4) & 0xf]).append(hexDigits[b & 0xf]);\n","    }\n","    return sb.toString();\n","  }\n","\n","  private static final char[] hexDigits = \"0123456789ABCDEF\".toCharArray();\n","\n","  private static @Nullable Object arrayAsListRecursively(@Nullable Object input) {\n","    if (input instanceof Object[]) {\n","      return Lists.<@Nullable Object, @Nullable Object>transform(\n","          asList((@Nullable Object[]) input), Subject::arrayAsListRecursively);\n","    } else if (input instanceof boolean[]) {\n","      return Booleans.asList((boolean[]) input);\n","    } else if (input instanceof int[]) {\n","      return Ints.asList((int[]) input);\n","    } else if (input instanceof long[]) {\n","      return Longs.asList((long[]) input);\n","    } else if (input instanceof short[]) {\n","      return Shorts.asList((short[]) input);\n","    } else if (input instanceof byte[]) {\n","      return Bytes.asList((byte[]) input);\n","    } else if (input instanceof double[]) {\n","      return doubleArrayAsString((double[]) input);\n","    } else if (input instanceof float[]) {\n","      return floatArrayAsString((float[]) input);\n","    } else if (input instanceof char[]) {\n","      return Chars.asList((char[]) input);\n","    } else {\n","      return input;\n","    }\n","  }\n","\n","  /**\n","   * The result of comparing two objects for equality. This includes both the \"equal\"/\"not-equal\"\n","   * bit and, in the case of \"not equal,\" optional facts describing the difference.\n","   */\n","  private static final class ComparisonResult {\n","    /**\n","     * If {@code equal} is true, returns an equal result; if false, a non-equal result with no\n","     * description.\n","     */\n","    static ComparisonResult fromEqualsResult(boolean equal) {\n","      return equal ? EQUAL : DIFFERENT_NO_DESCRIPTION;\n","    }\n","\n","    /** Returns a non-equal result with the given description. */\n","    static ComparisonResult differentWithDescription(Fact... facts) {\n","      return new ComparisonResult(ImmutableList.copyOf(facts));\n","    }\n","\n","    /** Returns an equal result. */\n","    static ComparisonResult equal() {\n","      return EQUAL;\n","    }\n","\n","    /** Returns a non-equal result with no description. */\n","    static ComparisonResult differentNoDescription() {\n","      return DIFFERENT_NO_DESCRIPTION;\n","    }\n","\n","    private static final ComparisonResult EQUAL = new ComparisonResult(null);\n","    private static final ComparisonResult DIFFERENT_NO_DESCRIPTION =\n","        new ComparisonResult(ImmutableList.<Fact>of());\n","\n","    private final @Nullable ImmutableList<Fact> facts;\n","\n","    private ComparisonResult(@Nullable ImmutableList<Fact> facts) {\n","      this.facts = facts;\n","    }\n","\n","    boolean valuesAreEqual() {\n","      return facts == null;\n","    }\n","\n","    ImmutableList<Fact> factsOrEmpty() {\n","      return firstNonNull(facts, ImmutableList.<Fact>of());\n","    }\n","\n","    /** Returns an instance with the same \"equal\"/\"not-equal\" bit but with no description. */\n","    ComparisonResult withoutDescription() {\n","      return fromEqualsResult(valuesAreEqual());\n","    }\n","  }\n","\n","  /**\n","   * Returns null if the arrays are equal. If not equal, returns a string comparing the two arrays,\n","   * displaying them in the style \"[1, 2, 3]\" to supplement the main failure message, which uses the\n","   * style \"010203.\"\n","   */\n","  private static ComparisonResult checkByteArrayEquals(byte[] expected, byte[] actual) {\n","    if (Arrays.equals(expected, actual)) {\n","      return ComparisonResult.equal();\n","    }\n","    return ComparisonResult.differentWithDescription(\n","        fact(\"expected\", Arrays.toString(expected)), fact(\"but was\", Arrays.toString(actual)));\n","  }\n","\n","  /**\n","   * Returns null if the arrays are equal, recursively. If not equal, returns the string of the\n","   * index at which they're different.\n","   */\n","  /*\n","   * TODO(cpovirk): Decide whether it's worthwhile to go to this trouble to display the index at\n","   * which the arrays differ. If we were to stop doing that, we could mostly delegate to\n","   * Arrays.equals() and our float/double arrayEquals methods. (We'd use deepEquals, but it doesn't\n","   * have our special double/float handling for GWT.)\n","   */\n","  private static ComparisonResult checkArrayEqualsRecursive(\n","      Object expectedArray, Object actualArray, String lastIndex) {\n","    if (expectedArray == actualArray) {\n","      return ComparisonResult.equal();\n","    }\n","    String expectedType = arrayType(expectedArray);\n","    String actualType = arrayType(actualArray);\n","    if (!expectedType.equals(actualType)) {\n","      Fact indexFact =\n","          lastIndex.isEmpty() ? simpleFact(\"wrong type\") : fact(\"wrong type for index\", lastIndex);\n","      return ComparisonResult.differentWithDescription(\n","          indexFact, fact(\"expected\", expectedType), fact(\"but was\", actualType));\n","    }\n","    int actualLength = Array.getLength(actualArray);\n","    int expectedLength = Array.getLength(expectedArray);\n","    if (expectedLength != actualLength) {\n","      Fact indexFact =\n","          lastIndex.isEmpty()\n","              ? simpleFact(\"wrong length\")\n","              : fact(\"wrong length for index\", lastIndex);\n","      return ComparisonResult.differentWithDescription(\n","          indexFact, fact(\"expected\", expectedLength), fact(\"but was\", actualLength));\n","    }\n","    for (int i = 0; i < actualLength; i++) {\n","      String index = lastIndex + \"[\" + i + \"]\";\n","      Object expected = Array.get(expectedArray, i);\n","      Object actual = Array.get(actualArray, i);\n","      if (actual != null\n","          && actual.getClass().isArray()\n","          && expected != null\n","          && expected.getClass().isArray()) {\n","        ComparisonResult result = checkArrayEqualsRecursive(expected, actual, index);\n","        if (!result.valuesAreEqual()) {\n","          return result;\n","        }\n","      } else if (!gwtSafeObjectEquals(actual, expected)) {\n","        return ComparisonResult.differentWithDescription(fact(\"differs at index\", index));\n","      }\n","    }\n","    return ComparisonResult.equal();\n","  }\n","\n","  private static String arrayType(Object array) {\n","    if (array.getClass() == boolean[].class) {\n","      return \"boolean[]\";\n","    } else if (array.getClass() == int[].class) {\n","      return \"int[]\";\n","    } else if (array.getClass() == long[].class) {\n","      return \"long[]\";\n","    } else if (array.getClass() == short[].class) {\n","      return \"short[]\";\n","    } else if (array.getClass() == byte[].class) {\n","      return \"byte[]\";\n","    } else if (array.getClass() == double[].class) {\n","      return \"double[]\";\n","    } else if (array.getClass() == float[].class) {\n","      return \"float[]\";\n","    } else if (array.getClass() == char[].class) {\n","      return \"char[]\";\n","    } else {\n","      return \"Object[]\";\n","    }\n","  }\n","\n","  private static boolean gwtSafeObjectEquals(@Nullable Object actual, @Nullable Object expected) {\n","    if (actual instanceof Double && expected instanceof Double) {\n","      return Double.doubleToLongBits((Double) actual) == Double.doubleToLongBits((Double) expected);\n","    } else if (actual instanceof Float && expected instanceof Float) {\n","      return Float.floatToIntBits((Float) actual) == Float.floatToIntBits((Float) expected);\n","    } else {\n","      return Objects.equal(actual, expected);\n","    }\n","  }\n","\n","  private static List<String> doubleArrayAsString(double[] items) {\n","    List<String> itemAsStrings = new ArrayList<>(items.length);\n","    for (double item : items) {\n","      itemAsStrings.add(doubleToString(item));\n","    }\n","    return itemAsStrings;\n","  }\n","\n","  private static List<String> floatArrayAsString(float[] items) {\n","    List<String> itemAsStrings = new ArrayList<>(items.length);\n","    for (float item : items) {\n","      itemAsStrings.add(floatToString(item));\n","    }\n","    return itemAsStrings;\n","  }\n","\n","  /**\n","   * Returns a builder for creating a derived subject but without providing information about how\n","   * the derived subject will relate to the current subject. In most cases, you should provide such\n","   * information by using {@linkplain #check(String, Object...) the other overload}.\n","   *\n","   * @deprecated Use {@linkplain #check(String, Object...) the other overload}, which requires you\n","   *     to supply more information to include in any failure messages.\n","   */\n","  @Deprecated\n","  final StandardSubjectBuilder check() {\n","    return new StandardSubjectBuilder(checkNotNull(metadata).updateForCheckCall());\n","  }\n","\n","  /**\n","   * Returns a builder for creating a derived subject.\n","   *\n","   * <p>Derived subjects retain the {@link FailureStrategy} and {@linkplain\n","   * StandardSubjectBuilder#withMessage messages} of the current subject, and in some cases, they\n","   * automatically supplement their failure message with information about the original subject.\n","   *\n","   * <p>For example, {@link ThrowableSubject#hasMessageThat}, which returns a {@link StringSubject},\n","   * is implemented with {@code check(\"getMessage()\").that(actual.getMessage())}.\n","   *\n","   * <p>The arguments to {@code check} describe how the new subject was derived from the old,\n","   * formatted like a chained method call. This allows Truth to include that information in its\n","   * failure messages. For example, {@code assertThat(caught).hasCauseThat().hasMessageThat()} will\n","   * produce a failure message that includes the string \"throwable.getCause().getMessage(),\" thanks\n","   * to internal {@code check} calls that supplied \"getCause()\" and \"getMessage()\" as arguments.\n","   *\n","   * <p>If the method you're delegating to accepts parameters, you can pass {@code check} a format\n","   * string. For example, {@link MultimapSubject#valuesForKey} calls {@code\n","   * check(\"valuesForKey(%s)\", key)}.\n","   *\n","   * <p>If you aren't really delegating to an instance method on the actual value -- maybe you're\n","   * calling a static method, or you're calling a chain of several methods -- you can supply\n","   * whatever string will be most useful to users. For example, if you're delegating to {@code\n","   * getOnlyElement(actual.colors())}, you might call {@code check(\"onlyColor()\")}.\n","   *\n","   * @param format a template with {@code %s} placeholders\n","   * @param args the arguments to be inserted into those placeholders\n","   */\n","  protected final StandardSubjectBuilder check(String format, @Nullable Object... args) {\n","    return doCheck(OldAndNewValuesAreSimilar.DIFFERENT, format, args);\n","  }\n","\n","  // TODO(b/134064106): Figure out a public API for this.\n","\n","  final StandardSubjectBuilder checkNoNeedToDisplayBothValues(\n","      String format, @Nullable Object... args) {\n","    return doCheck(OldAndNewValuesAreSimilar.SIMILAR, format, args);\n","  }\n","\n","  private StandardSubjectBuilder doCheck(\n","      OldAndNewValuesAreSimilar valuesAreSimilar, String format, @Nullable Object[] args) {\n","    LazyMessage message = new LazyMessage(format, args);\n","    return new StandardSubjectBuilder(\n","        checkNotNull(metadata)\n","            .updateForCheckCall(\n","                valuesAreSimilar, /* descriptionUpdate= */ input -> input + \".\" + message));\n","  }\n","\n","  /**\n","   * Begins a new call chain that ignores any failures. This is useful for subjects that normally\n","   * delegate with to other subjects by using {@link #check} but have already reported a failure. In\n","   * such cases it may still be necessary to return a {@code Subject} instance even though any\n","   * subsequent assertions are meaningless. For example, if a user chains together more {@link\n","   * ThrowableSubject#hasCauseThat} calls than the actual exception has causes, {@code hasCauseThat}\n","   * returns {@code ignoreCheck().that(... a dummy exception ...)}.\n","   */\n","  protected final StandardSubjectBuilder ignoreCheck() {\n","    return StandardSubjectBuilder.forCustomFailureStrategy(failure -> {});\n","  }\n","\n","  /**\n","   * Fails, reporting a message with two \"{@linkplain Fact facts}\":\n","   *\n","   * <ul>\n","   *   <li><i>key</i>: <i>value</i>\n","   *   <li>but was: <i>actual value</i>.\n","   * </ul>\n","   *\n","   * <p>This is the simplest failure API. For more advanced needs, see {@linkplain\n","   * #failWithActual(Fact, Fact...) the other overload} and {@link #failWithoutActual(Fact, Fact...)\n","   * failWithoutActual}.\n","   *\n","   * <p>Example usage: The check {@code contains(String)} calls {@code failWithActual(\"expected to\n","   * contain\", string)}.\n","   */\n","  protected final void failWithActual(String key, @Nullable Object value) {\n","    failWithActual(fact(key, value));\n","  }\n","\n","  /**\n","   * Fails, reporting a message with the given facts, followed by an automatically added fact of the\n","   * form:\n","   *\n","   * <ul>\n","   *   <li>but was: <i>actual value</i>.\n","   * </ul>\n","   *\n","   * <p>If you have only one fact to report (and it's a {@linkplain Fact#fact key-value fact}),\n","   * prefer {@linkplain #failWithActual(String, Object) the simpler overload}.\n","   *\n","   * <p>Example usage: The check {@code isEmpty()} calls {@code failWithActual(simpleFact(\"expected\n","   * to be empty\"))}.\n","   */\n","  protected final void failWithActual(Fact first, Fact... rest) {\n","    doFail(sandwich(first, rest, butWas()));\n","  }\n","\n","  // TODO(cpovirk): Consider making this protected if there's a need for it.\n","  final void failWithActual(Iterable<Fact> facts) {\n","    doFail(append(ImmutableList.copyOf(facts), butWas()));\n","  }\n","\n","  /**\n","   * Reports a failure constructing a message from a simple verb.\n","   *\n","   * @param check the check being asserted\n","   * @deprecated Prefer to construct {@link Fact}-style methods, typically by using {@link\n","   *     #failWithActual(Fact, Fact...) failWithActual}{@code (}{@link Fact#simpleFact\n","   *     simpleFact(...)}{@code )}. However, if you want to preserve your exact failure message as a\n","   *     migration aid, you can inline this method (and then inline the resulting method call, as\n","   *     well).\n","   */\n","  @Deprecated\n","  final void fail(String check) {\n","    fail(check, new Object[0]);\n","  }\n","\n","  /**\n","   * Assembles a failure message and passes such to the FailureStrategy\n","   *\n","   * @param verb the check being asserted\n","   * @param other the value against which the subject is compared\n","   * @deprecated Prefer to construct {@link Fact}-style methods, typically by using {@link\n","   *     #failWithActual(String, Object)}. However, if you want to preserve your exact failure\n","   *     message as a migration aid, you can inline this method (and then inline the resulting\n","   *     method call, as well).\n","   */\n","  @Deprecated\n","  final void fail(String verb, Object other) {\n","    fail(verb, new Object[] {other});\n","  }\n","\n","  /**\n","   * Assembles a failure message and passes such to the FailureStrategy\n","   *\n","   * @param verb the check being asserted\n","   * @param messageParts the expectations against which the subject is compared\n","   * @deprecated Prefer to construct {@link Fact}-style methods, typically by using {@link\n","   *     #failWithActual(Fact, Fact...)}. However, if you want to preserve your exact failure\n","   *     message as a migration aid, you can inline this method.\n","   */\n","  @Deprecated\n","  final void fail(String verb, @Nullable Object... messageParts) {\n","    StringBuilder message = new StringBuilder(\"Not true that <\");\n","    message.append(actualCustomStringRepresentation()).append(\"> \").append(verb);\n","    for (Object part : messageParts) {\n","      message.append(\" <\").append(part).append(\">\");\n","    }\n","    failWithoutActual(simpleFact(message.toString()));\n","  }\n","\n","  enum EqualityCheck {\n","    EQUAL(\"expected\"),\n","    SAME_INSTANCE(\"expected specific instance\");\n","\n","    final String keyForExpected;\n","\n","    EqualityCheck(String keyForExpected) {\n","      this.keyForExpected = keyForExpected;\n","    }\n","  }\n","\n","  /**\n","   * Special version of {@link #failEqualityCheck} for use from {@link IterableSubject}, documented\n","   * further there.\n","   */\n","  final void failEqualityCheckForEqualsWithoutDescription(@Nullable Object expected) {\n","    failEqualityCheck(EqualityCheck.EQUAL, expected, ComparisonResult.differentNoDescription());\n","  }\n","\n","  private void failEqualityCheck(\n","      EqualityCheck equalityCheck, @Nullable Object expected, ComparisonResult difference) {\n","    String actualString = actualCustomStringRepresentation();\n","    String expectedString = formatActualOrExpected(expected);\n","    String actualClass = actual == null ? \"(null reference)\" : actual.getClass().getName();\n","    String expectedClass = expected == null ? \"(null reference)\" : expected.getClass().getName();\n","\n","    /*\n","     * It's a little odd for expectedString to be formatActualOrExpected(expected) but actualString\n","     * *not* to be formatActualOrExpected(actual), since we're going to compare the two. Instead,\n","     * actualString is actualCustomStringRepresentation() -- as it is for other assertions, since\n","     * users may have overridden that method. While actualCustomStringRepresentation() defaults to\n","     * formatActualOrExpected(actual), it's only a default.\n","     *\n","     * What we really want here is probably to delete actualCustomStringRepresentation() and migrate\n","     * users to formatActualOrExpected(actual).\n","     */\n","    boolean sameToStrings = actualString.equals(expectedString);\n","    boolean sameClassNames = actualClass.equals(expectedClass);\n","    // TODO(cpovirk): Handle \"same class name, different class loader.\"\n","    // `equal` is always false for isEqualTo, but it varies for isSameInstanceAs:\n","    boolean equal = difference.valuesAreEqual();\n","\n","    if (equalityCheck == EqualityCheck.EQUAL\n","        && (tryFailForTrailingWhitespaceOnly(expected) || tryFailForEmptyString(expected))) {\n","      // tryFailForTrailingWhitespaceOnly or tryFailForEmptyString reported a failure, so we're done\n","      return;\n","    }\n","\n","    if (sameToStrings) {\n","      if (sameClassNames) {\n","        String doppelgangerDescription =\n","            equal\n","                ? \"(different but equal instance of same class with same string representation)\"\n","                : \"(non-equal instance of same class with same string representation)\";\n","        failEqualityCheckNoComparisonFailure(\n","            difference,\n","            fact(equalityCheck.keyForExpected, expectedString),\n","            fact(\"but was\", doppelgangerDescription));\n","      } else {\n","        failEqualityCheckNoComparisonFailure(\n","            difference,\n","            fact(equalityCheck.keyForExpected, expectedString),\n","            fact(\"an instance of\", expectedClass),\n","            fact(\"but was\", \"(non-equal value with same string representation)\"),\n","            fact(\"an instance of\", actualClass));\n","      }\n","    } else {\n","      if (equalityCheck == EqualityCheck.EQUAL && actual != null && expected != null) {\n","        checkNotNull(metadata)\n","            .failEqualityCheck(difference.factsOrEmpty(), expectedString, actualString);\n","      } else {\n","        failEqualityCheckNoComparisonFailure(\n","            difference,\n","            fact(equalityCheck.keyForExpected, expectedString),\n","            fact(\"but was\", actualString));\n","      }\n","    }\n","  }\n","\n","  /**\n","   * Checks whether the actual and expected values are strings that match except for trailing\n","   * whitespace. If so, reports a failure and returns true.\n","   */\n","  private boolean tryFailForTrailingWhitespaceOnly(@Nullable Object expected) {\n","    if (!(actual instanceof String) || !(expected instanceof String)) {\n","      return false;\n","    }\n","\n","    /*\n","     * TODO(cpovirk): Consider applying this for non-String types. The danger there is that we don't\n","     * know whether toString() (or actualCustomStringRepresentation/formatActualOrExpected) and\n","     * equals() are consistent for those types.\n","     */\n","    String actualString = (String) actual;\n","    String expectedString = (String) expected;\n","    String actualNoTrailing = whitespace().trimTrailingFrom(actualString);\n","    String expectedNoTrailing = whitespace().trimTrailingFrom(expectedString);\n","    String expectedTrailing =\n","        escapeWhitespace(expectedString.substring(expectedNoTrailing.length()));\n","    String actualTrailing = escapeWhitespace(actualString.substring(actualNoTrailing.length()));\n","\n","    if (!actualNoTrailing.equals(expectedNoTrailing)) {\n","      return false;\n","    }\n","\n","    if (actualString.startsWith(expectedString)) {\n","      failWithoutActual(\n","          fact(\"expected\", expectedString),\n","          fact(\"but contained extra trailing whitespace\", actualTrailing));\n","    } else if (expectedString.startsWith(actualString)) {\n","      failWithoutActual(\n","          fact(\"expected\", expectedString),\n","          fact(\"but was missing trailing whitespace\", expectedTrailing));\n","    } else {\n","      failWithoutActual(\n","          fact(\"expected\", expectedString),\n","          fact(\"with trailing whitespace\", expectedTrailing),\n","          fact(\"but trailing whitespace was\", actualTrailing));\n","    }\n","\n","    return true;\n","  }\n","\n","  private static String escapeWhitespace(String in) {\n","    StringBuilder out = new StringBuilder();\n","    for (char c : in.toCharArray()) {\n","      out.append(escapeWhitespace(c));\n","    }\n","    return out.toString();\n","  }\n","\n","  private static String escapeWhitespace(char c) {\n","    switch (c) {\n","      case '\\t':\n","        return \"\\\\t\";\n","      case '\\n':\n","        return \"\\\\n\";\n","      case '\\f':\n","        return \"\\\\f\";\n","      case '\\r':\n","        return \"\\\\r\";\n","      case ' ':\n","        return \"␣\";\n","      default:\n","        return new String(asUnicodeHexEscape(c));\n","    }\n","  }\n","\n","  /**\n","   * Checks whether the actual and expected values are empty strings. If so, reports a failure and\n","   * returns true.\n","   */\n","  private boolean tryFailForEmptyString(@Nullable Object expected) {\n","    if (!(actual instanceof String) || !(expected instanceof String)) {\n","      return false;\n","    }\n","\n","    String actualString = (String) actual;\n","    String expectedString = (String) expected;\n","    if (actualString.isEmpty()) {\n","      failWithoutActual(fact(\"expected\", expectedString), simpleFact(\"but was an empty string\"));\n","      return true;\n","    } else if (expectedString.isEmpty()) {\n","      failWithoutActual(simpleFact(\"expected an empty string\"), fact(\"but was\", actualString));\n","      return true;\n","    }\n","\n","    // Neither string was empty\n","    return false;\n","  }\n","\n","  // From SourceCodeEscapers:\n","\n","  private static final char[] HEX_DIGITS = \"0123456789abcdef\".toCharArray();\n","\n","  private static char[] asUnicodeHexEscape(char c) {\n","    // Equivalent to String.format(\"\\\\u%04x\", (int) c);\n","    char[] r = new char[6];\n","    r[0] = '\\\\';\n","    r[1] = 'u';\n","    r[5] = HEX_DIGITS[c & 0xF];\n","    c = (char) (c >>> 4);\n","    r[4] = HEX_DIGITS[c & 0xF];\n","    c = (char) (c >>> 4);\n","    r[3] = HEX_DIGITS[c & 0xF];\n","    c = (char) (c >>> 4);\n","    r[2] = HEX_DIGITS[c & 0xF];\n","    return r;\n","  }\n","\n","  private void failEqualityCheckNoComparisonFailure(ComparisonResult difference, Fact... facts) {\n","    // TODO(cpovirk): Is it possible for difference.factsOrEmpty() to be nonempty? If not, remove.\n","    doFail(concat(asList(facts), difference.factsOrEmpty()));\n","  }\n","\n","  /**\n","   * Assembles a failure message and passes it to the FailureStrategy\n","   *\n","   * @param verb the check being asserted\n","   * @param expected the expectations against which the subject is compared\n","   * @param failVerb the failure of the check being asserted\n","   * @param actual the actual value the subject was compared against\n","   * @deprecated Prefer to construct {@link Fact}-style methods, typically by using {@link\n","   *     #failWithActual(Fact, Fact...)}. However, if you want to preserve your exact failure\n","   *     message as a migration aid, you can inline this method.\n","   */\n","  @Deprecated\n","  final void failWithBadResults(String verb, Object expected, String failVerb, Object actual) {\n","    String message =\n","        lenientFormat(\n","            \"Not true that <%s> %s <%s>. It %s <%s>\",\n","            actualCustomStringRepresentation(),\n","            verb,\n","            expected,\n","            failVerb,\n","            (actual == null) ? \"null reference\" : actual);\n","    failWithoutActual(simpleFact(message));\n","  }\n","\n","  /**\n","   * Assembles a failure message with an alternative representation of the wrapped subject and\n","   * passes it to the FailureStrategy\n","   *\n","   * @param verb the check being asserted\n","   * @param expected the expected value of the check\n","   * @param actual the custom representation of the subject to be reported in the failure.\n","   * @deprecated Prefer to construct {@link Fact}-style methods, typically by using {@link\n","   *     #failWithoutActual(Fact, Fact...)}. However, if you want to preserve your exact failure\n","   *     message as a migration aid, you can inline this method.\n","   */\n","  @Deprecated\n","  final void failWithCustomSubject(String verb, Object expected, Object actual) {\n","    String message =\n","        lenientFormat(\n","            \"Not true that <%s> %s <%s>\",\n","            (actual == null) ? \"null reference\" : actual, verb, expected);\n","    failWithoutActual(simpleFact(message));\n","  }\n","\n","  /**\n","   * @deprecated Prefer to construct {@link Fact}-style methods, typically by using {@link\n","   *     #failWithoutActual(Fact, Fact...) failWithoutActual}{@code (}{@link Fact#simpleFact\n","   *     simpleFact(...)}{@code )}. However, if you want to preserve your exact failure message as a\n","   *     migration aid, you can inline this method.\n","   */\n","  @Deprecated\n","  final void failWithoutSubject(String check) {\n","    failWithoutActual(simpleFact(lenientFormat(\"Not true that the subject %s\", check)));\n","  }\n","\n","  /**\n","   * Fails, reporting a message with the given facts, <i>without automatically adding the actual\n","   * value.</i>\n","   *\n","   * <p>Most failure messages should report the actual value, so most checks should call {@link\n","   * #failWithActual(Fact, Fact...) failWithActual} instead. However, {@code failWithoutActual} is\n","   * useful in some cases:\n","   *\n","   * <ul>\n","   *   <li>when the actual value is obvious from the rest of the message. For example, {@code\n","   *       isNotEmpty()} calls {@code failWithoutActual(simpleFact(\"expected not to be empty\")}.\n","   *   <li>when the actual value shouldn't come last or should have a different key than the default\n","   *       of \"but was.\" For example, {@code isNotWithin(...).of(...)} calls {@code\n","   *       failWithoutActual} so that it can put the expected and actual values together, followed\n","   *       by the tolerance.\n","   * </ul>\n","   *\n","   * <p>Example usage: The check {@code isEmpty()} calls {@code failWithActual(simpleFact(\"expected\n","   * to be empty\"))}.\n","   */\n","  protected final void failWithoutActual(Fact first, Fact... rest) {\n","    doFail(ImmutableList.copyOf(Lists.asList(first, rest)));\n","  }\n","\n","  // TODO(cpovirk): Consider making this protected if there's a need for it.\n","  final void failWithoutActual(Iterable<Fact> facts) {\n","    doFail(ImmutableList.copyOf(facts));\n","  }\n","\n","  /**\n","   * Assembles a failure message without a given subject and passes it to the FailureStrategy\n","   *\n","   * @param check the check being asserted\n","   * @deprecated Prefer to construct {@link Fact}-style methods, typically by using {@link\n","   *     #failWithoutActual(Fact, Fact...) failWithoutActual}{@code (}{@link Fact#simpleFact\n","   *     simpleFact(...)}{@code )}. However, if you want to preserve your exact failure message as a\n","   *     migration aid, you can inline this method (and then inline the resulting method call, as\n","   *     well).\n","   */\n","  @Deprecated\n","  final void failWithoutActual(String check) {\n","    failWithoutSubject(check);\n","  }\n","\n","  /**\n","   * @throws UnsupportedOperationException always\n","   * @deprecated {@link Object#equals(Object)} is not supported on Truth subjects. If you are\n","   *     writing a test assertion (actual vs. expected), use {@link #isEqualTo(Object)} instead.\n","   */\n","  @DoNotCall(\n","      \"Subject.equals() is not supported. Did you mean to call\"\n","          + \" assertThat(actual).isEqualTo(expected) instead of\"\n","          + \" assertThat(actual).equals(expected)?\")\n","  @Deprecated\n","  @Override\n","  public final boolean equals(@Nullable Object o) {\n","    throw new UnsupportedOperationException(\n","        \"Subject.equals() is not supported. Did you mean to call\"\n","            + \" assertThat(actual).isEqualTo(expected) instead of\"\n","            + \" assertThat(actual).equals(expected)?\");\n","  }\n","\n","  /**\n","   * @throws UnsupportedOperationException always\n","   * @deprecated {@link Object#hashCode()} is not supported on Truth subjects.\n","   */\n","  @DoNotCall(\"Subject.hashCode() is not supported.\")\n","  @Deprecated\n","  @Override\n","  public final int hashCode() {\n","    throw new UnsupportedOperationException(\"Subject.hashCode() is not supported.\");\n","  }\n","\n","  /**\n","   * @throws UnsupportedOperationException always\n","   * @deprecated {@link Object#toString()} is not supported on Truth subjects.\n","   */\n","  @Deprecated\n","  @Override\n","  public\n","  String toString() {\n","    throw new UnsupportedOperationException(\n","        \"Subject.toString() is not supported. Did you mean to call assertThat(foo.toString())\"\n","            + \" instead of assertThat(foo).toString()?\");\n","  }\n","\n","  /**\n","   * Returns a \"but was: <actual value>\" string. This method should be rarely needed, since Truth\n","   * inserts a \"but was\" fact by default for assertions. However, it's occasionally useful for calls\n","   * to {@code failWithoutActual} that want a \"but was\" fact but don't want it to come last, where\n","   * Truth inserts it by default.\n","   */\n","  /*\n","   * TODO(cpovirk): Consider giving this protected access.\n","   *\n","   * It is likely better than what users would otherwise do -- `fact(\"but was\", actual)`, which\n","   * ignores actualCustomStringRepresentation() (which is inaccessible outside the package).\n","   *\n","   * But I want to think more about this. In particular, if people use this to reimplement\n","   * isEqualTo(), I would be sad that they're missing out on its normal special handling. That's\n","   * probably not enough reason to avoid adding this, but we can hold it back for now.\n","   */\n","  final Fact butWas() {\n","    return fact(\"but was\", actualCustomStringRepresentation());\n","  }\n","\n","  /*\n","   * Computed lazily so that we're not doing expensive string operations during every assertion,\n","   * only during every failure.\n","   */\n","  final String typeDescription() {\n","    return typeDescriptionOrGuess(getClass(), typeDescriptionOverride);\n","  }\n","\n","  private static String typeDescriptionOrGuess(\n","      Class<? extends Subject> clazz, @Nullable String typeDescriptionOverride) {\n","    if (typeDescriptionOverride != null) {\n","      return typeDescriptionOverride;\n","    }\n","    /*\n","     * j2cl doesn't store enough metadata to know whether \"Foo$BarSubject\" is a nested class, so it\n","     * can't tell whether the simple name is \"Foo$BarSubject\" or just \"BarSubject\": b/71808768. It\n","     * returns \"Foo$BarSubject\" to err on the side of preserving information. We want just\n","     * \"BarSubject,\" so we strip any likely enclosing type ourselves.\n","     */\n","    String subjectClass = clazz.getSimpleName().replaceFirst(\".*[$]\", \"\");\n","    String actualClass =\n","        (subjectClass.endsWith(\"Subject\") && !subjectClass.equals(\"Subject\"))\n","            ? subjectClass.substring(0, subjectClass.length() - \"Subject\".length())\n","            : \"Object\";\n","    return UPPER_CAMEL.to(LOWER_CAMEL, actualClass);\n","  }\n","\n","  private void doFail(ImmutableList<Fact> facts) {\n","    checkNotNull(metadata).fail(facts);\n","  }\n","}\n"],"test_content":["/*\n"," * Copyright (c) 2011 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.base.Preconditions.checkNotNull;\n","import static com.google.common.truth.ExpectFailure.assertThat;\n","import static com.google.common.truth.Fact.simpleFact;\n","import static com.google.common.truth.SubjectTest.ForbidsEqualityChecksSubject.objectsForbiddingEqualityCheck;\n","import static com.google.common.truth.TestPlatform.isGwt;\n","import static com.google.common.truth.Truth.assertAbout;\n","import static com.google.common.truth.Truth.assertThat;\n","import static com.google.common.truth.TruthJUnit.assume;\n","import static org.junit.Assert.fail;\n","\n","import com.google.common.annotations.GwtIncompatible;\n","import com.google.common.base.Optional;\n","import com.google.common.collect.ImmutableList;\n","import com.google.common.collect.ImmutableListMultimap;\n","import com.google.common.collect.ImmutableMap;\n","import com.google.common.collect.ImmutableMultimap;\n","import com.google.common.collect.ImmutableMultiset;\n","import com.google.common.collect.ImmutableSetMultimap;\n","import com.google.common.collect.ImmutableTable;\n","import com.google.common.collect.Iterators;\n","import com.google.common.primitives.UnsignedInteger;\n","import com.google.common.testing.NullPointerTester;\n","import java.lang.reflect.Method;\n","import java.lang.reflect.Modifier;\n","import java.math.BigDecimal;\n","import java.util.Arrays;\n","import java.util.Iterator;\n","import org.checkerframework.checker.nullness.qual.Nullable;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import org.junit.runners.JUnit4;\n","\n","/**\n"," * Tests for generic Subject behavior.\n"," *\n"," * @author David Saff\n"," * @author Christian Gruber\n"," */\n","@RunWith(JUnit4.class)\n","public class SubjectTest extends BaseSubjectTestCase {\n","\n","  @Test\n","  @GwtIncompatible(\"NullPointerTester\")\n","  @SuppressWarnings(\"GoogleInternalApi\")\n","  /*\n","   * TODO(cpovirk): Reenable these tests publicly. Currently, we depend on guava-android, whose\n","   * NullPointerTester doesn't yet recognize type-use @Nullable annotations. And we can't mix the\n","   * -jre version of guava-testlib with the -android version of guava because the NullPointerTester\n","   *  feature we need requires a -jre-only API.\n","   */\n","  @org.junit.Ignore\n","  public void nullPointerTester() {\n","    assume().that(isAndroid()).isFalse(); // type-annotation @Nullable is not available\n","\n","    NullPointerTester npTester = new NullPointerTester();\n","    npTester.setDefault(Fact.class, simpleFact(\"fact\"));\n","\n","    // TODO(kak): Automatically generate this list with reflection,\n","    // or maybe use AbstractPackageSanityTests?\n","    npTester.testAllPublicInstanceMethods(assertThat(BigDecimal.TEN));\n","    npTester.testAllPublicInstanceMethods(assertThat(false));\n","    npTester.testAllPublicInstanceMethods(assertThat(String.class));\n","    npTester.testAllPublicInstanceMethods(assertThat((Comparable<String>) \"hello\"));\n","    npTester.testAllPublicInstanceMethods(assertThat(2d));\n","    npTester.testAllPublicInstanceMethods(assertThat(2f));\n","    npTester.testAllPublicInstanceMethods(assertThat(Optional.absent()));\n","    npTester.testAllPublicInstanceMethods(assertThat(1));\n","    npTester.testAllPublicInstanceMethods(assertThat(ImmutableList.of()));\n","    npTester.testAllPublicInstanceMethods(assertThat(ImmutableListMultimap.of()));\n","    npTester.testAllPublicInstanceMethods(assertThat(1L));\n","    npTester.testAllPublicInstanceMethods(assertThat(ImmutableMap.of()));\n","    npTester.testAllPublicInstanceMethods(assertThat(ImmutableMultimap.of()));\n","    npTester.testAllPublicInstanceMethods(assertThat(ImmutableMultiset.of()));\n","    npTester.testAllPublicInstanceMethods(assertThat(new Object[0]));\n","    npTester.testAllPublicInstanceMethods(assertThat(ImmutableSetMultimap.of()));\n","    npTester.testAllPublicInstanceMethods(assertThat(\"hello\"));\n","    npTester.testAllPublicInstanceMethods(assertThat(new Object()));\n","    npTester.testAllPublicInstanceMethods(assertThat(ImmutableTable.of()));\n","    npTester.testAllPublicInstanceMethods(assertThat(new Exception()));\n","  }\n","\n","  @Test\n","  @GwtIncompatible(\"NullPointerTester\")\n","  @org.junit.Ignore // TODO(cpovirk): Reenable publicly. (See nullPointerTester().)\n","  public void allAssertThatOverloadsAcceptNull() throws Exception {\n","    assume().that(isAndroid()).isFalse(); // type-annotation @Nullable is not available\n","\n","    NullPointerTester npTester = new NullPointerTester();\n","    npTester.setDefault(Fact.class, simpleFact(\"fact\"));\n","    for (Method method : Truth.class.getDeclaredMethods()) {\n","      if (Modifier.isPublic(method.getModifiers())\n","          && method.getName().equals(\"assertThat\")\n","          && method.getParameterTypes().length == 1) {\n","        Object actual = null;\n","        Subject subject = (Subject) method.invoke(Truth.class, actual);\n","\n","        subject.isNull();\n","        try {\n","          subject.isNotNull(); // should throw\n","          throw new Error(\"assertThat(null).isNotNull() should throw an exception!\");\n","        } catch (AssertionError expected) {\n","          assertThat(expected).factKeys().containsExactly(\"expected not to be\");\n","          assertThat(expected).factValue(\"expected not to be\").isEqualTo(\"null\");\n","        }\n","\n","        subject.isEqualTo(null);\n","        try {\n","          subject.isNotEqualTo(null); // should throw\n","          throw new Error(\"assertThat(null).isNotEqualTo(null) should throw an exception!\");\n","        } catch (AssertionError expected) {\n","        }\n","\n","        subject.isSameInstanceAs(null);\n","        subject.isNotSameInstanceAs(new Object());\n","\n","        if (!(subject instanceof IterableSubject)) { // b/36000148\n","          subject.isNotIn(ImmutableList.<Object>of());\n","          subject.isNoneOf(new Object(), new Object());\n","        }\n","\n","        try {\n","          subject.isIn(ImmutableList.of());\n","          throw new Error(\"Expected to fail\");\n","        } catch (AssertionError expected) {\n","          assertThat(expected).factKeys().contains(\"expected any of\");\n","        }\n","\n","        // TODO(cpovirk): Fix bug.\n","        if (!(subject instanceof AbstractArraySubject)) {\n","          // check all public assertion methods for correct null handling\n","          npTester.testAllPublicInstanceMethods(subject);\n","        }\n","\n","        subject.isNotEqualTo(new Object());\n","        subject.isEqualTo(null);\n","        try {\n","          subject.isEqualTo(new Object()); // should throw\n","          throw new Error(\"assertThat(null).isEqualTo(<non-null>) should throw an exception!\");\n","        } catch (AssertionError expected) {\n","          assertThat(expected).factKeys().containsExactly(\"expected\", \"but was\").inOrder();\n","        }\n","      }\n","    }\n","  }\n","\n","  private static final Object OBJECT_1 =\n","      new Object() {\n","        @Override\n","        public String toString() {\n","          return \"Object 1\";\n","        }\n","      };\n","  private static final Object OBJECT_2 =\n","      new Object() {\n","        @Override\n","        public String toString() {\n","          return \"Object 2\";\n","        }\n","      };\n","\n","  @SuppressWarnings(\"TruthIncompatibleType\") // Intentional for testing purposes.\n","  @Test\n","  public void toStringsAreIdentical() {\n","    IntWrapper wrapper = new IntWrapper();\n","    wrapper.wrapped = 5;\n","    expectFailure.whenTesting().that(5).isEqualTo(wrapper);\n","    assertFailureKeys(\"expected\", \"an instance of\", \"but was\", \"an instance of\");\n","    assertFailureValue(\"expected\", \"5\");\n","    assertFailureValueIndexed(\n","        \"an instance of\", 0, \"com.google.common.truth.SubjectTest$IntWrapper\");\n","    assertFailureValue(\"but was\", \"(non-equal value with same string representation)\");\n","    assertFailureValueIndexed(\"an instance of\", 1, \"java.lang.Integer\");\n","  }\n","\n","  private static class IntWrapper {\n","    int wrapped;\n","\n","    @Override\n","    public String toString() {\n","      return Integer.toString(wrapped);\n","    }\n","  }\n","\n","  @Test\n","  public void isSameInstanceAsWithNulls() {\n","    Object o = null;\n","    assertThat(o).isSameInstanceAs(null);\n","  }\n","\n","  @Test\n","  public void isSameInstanceAsFailureWithNulls() {\n","    Object o = null;\n","    expectFailure.whenTesting().that(o).isSameInstanceAs(\"a\");\n","    assertFailureKeys(\"expected specific instance\", \"but was\");\n","    assertFailureValue(\"expected specific instance\", \"a\");\n","  }\n","\n","  @Test\n","  public void isSameInstanceAsWithSameObject() {\n","    Object a = new Object();\n","    Object b = a;\n","    assertThat(a).isSameInstanceAs(b);\n","  }\n","\n","  @Test\n","  public void isSameInstanceAsFailureWithObjects() {\n","    Object a = OBJECT_1;\n","    Object b = OBJECT_2;\n","    expectFailure.whenTesting().that(a).isSameInstanceAs(b);\n","    assertThat(expectFailure.getFailure()).isNotInstanceOf(ComparisonFailureWithFacts.class);\n","  }\n","\n","  @Test\n","  public void isSameInstanceAsFailureWithComparableObjects_nonString() {\n","    Object a = UnsignedInteger.valueOf(42);\n","    Object b = UnsignedInteger.fromIntBits(42);\n","    expectFailure.whenTesting().that(a).isSameInstanceAs(b);\n","    assertFailureKeys(\"expected specific instance\", \"but was\");\n","    assertFailureValue(\"expected specific instance\", \"42\");\n","    assertFailureValue(\n","        \"but was\", \"(different but equal instance of same class with same string representation)\");\n","  }\n","\n","  @Test\n","  @GwtIncompatible(\"String equality under JS\")\n","  public void isSameInstanceAsFailureWithComparableObjects() {\n","    Object a = \"ab\";\n","    Object b = new StringBuilder(\"ab\").toString();\n","    expectFailure.whenTesting().that(a).isSameInstanceAs(b);\n","  }\n","\n","  @Test\n","  public void isSameInstanceAsFailureWithDifferentTypesAndSameToString() {\n","    Object a = \"true\";\n","    Object b = true;\n","    expectFailure.whenTesting().that(a).isSameInstanceAs(b);\n","    assertFailureKeys(\"expected specific instance\", \"an instance of\", \"but was\", \"an instance of\");\n","    assertFailureValue(\"expected specific instance\", \"true\");\n","    assertFailureValueIndexed(\"an instance of\", 0, \"java.lang.Boolean\");\n","    assertFailureValue(\"but was\", \"(non-equal value with same string representation)\");\n","    assertFailureValueIndexed(\"an instance of\", 1, \"java.lang.String\");\n","  }\n","\n","  @Test\n","  public void isNotSameInstanceAsWithNulls() {\n","    Object o = null;\n","    assertThat(o).isNotSameInstanceAs(\"a\");\n","  }\n","\n","  @Test\n","  public void isNotSameInstanceAsFailureWithNulls() {\n","    Object o = null;\n","    expectFailure.whenTesting().that(o).isNotSameInstanceAs(null);\n","    assertFailureKeys(\"expected not to be specific instance\");\n","    assertFailureValue(\"expected not to be specific instance\", \"null\");\n","  }\n","\n","  @Test\n","  public void isNotSameInstanceAsWithObjects() {\n","    Object a = new Object();\n","    Object b = new Object();\n","    assertThat(a).isNotSameInstanceAs(b);\n","  }\n","\n","  @Test\n","  public void isNotSameInstanceAsFailureWithSameObject() {\n","    Object a = OBJECT_1;\n","    Object b = a;\n","    expectFailure.whenTesting().that(a).isNotSameInstanceAs(b);\n","    assertFailureKeys(\"expected not to be specific instance\");\n","    assertFailureValue(\"expected not to be specific instance\", \"Object 1\");\n","  }\n","\n","  @Test\n","  public void isNotSameInstanceAsWithComparableObjects_nonString() {\n","    Object a = UnsignedInteger.valueOf(42);\n","    Object b = UnsignedInteger.fromIntBits(42);\n","    assertThat(a).isNotSameInstanceAs(b);\n","  }\n","\n","  @Test\n","  @GwtIncompatible(\"String equality under JS\")\n","  public void isNotSameInstanceAsWithComparableObjects() {\n","    Object a = \"ab\";\n","    Object b = new StringBuilder(\"ab\").toString();\n","    assertThat(a).isNotSameInstanceAs(b);\n","  }\n","\n","  @Test\n","  public void isNotSameInstanceAsWithDifferentTypesAndSameToString() {\n","    Object a = \"true\";\n","    Object b = true;\n","    assertThat(a).isNotSameInstanceAs(b);\n","  }\n","\n","  @Test\n","  public void isNull() {\n","    Object o = null;\n","    assertThat(o).isNull();\n","  }\n","\n","  @Test\n","  public void isNullFail() {\n","    Object o = new Object();\n","    expectFailure.whenTesting().that(o).isNull();\n","    assertFailureKeys(\"expected\", \"but was\");\n","    assertFailureValue(\"expected\", \"null\");\n","  }\n","\n","  @Test\n","  public void isNullWhenSubjectForbidsIsEqualTo() {\n","    assertAbout(objectsForbiddingEqualityCheck()).that(null).isNull();\n","  }\n","\n","  @Test\n","  public void isNullWhenSubjectForbidsIsEqualToFail() {\n","    expectFailure.whenTesting().about(objectsForbiddingEqualityCheck()).that(new Object()).isNull();\n","  }\n","\n","  @Test\n","  public void stringIsNullFail() {\n","    expectFailure.whenTesting().that(\"foo\").isNull();\n","  }\n","\n","  @Test\n","  public void isNullBadEqualsImplementation() {\n","    expectFailure.whenTesting().that(new ThrowsOnEqualsNull()).isNull();\n","  }\n","\n","  @Test\n","  public void isNotNull() {\n","    Object o = new Object();\n","    assertThat(o).isNotNull();\n","  }\n","\n","  @Test\n","  public void isNotNullFail() {\n","    Object o = null;\n","    expectFailure.whenTesting().that(o).isNotNull();\n","    assertFailureKeys(\"expected not to be\");\n","    assertFailureValue(\"expected not to be\", \"null\");\n","  }\n","\n","  @Test\n","  public void isNotNullBadEqualsImplementation() {\n","    assertThat(new ThrowsOnEqualsNull()).isNotNull();\n","  }\n","\n","  @Test\n","  public void isNotNullWhenSubjectForbidsIsEqualTo() {\n","    assertAbout(objectsForbiddingEqualityCheck()).that(new Object()).isNotNull();\n","  }\n","\n","  @Test\n","  public void isNotNullWhenSubjectForbidsIsEqualToFail() {\n","    expectFailure.whenTesting().about(objectsForbiddingEqualityCheck()).that(null).isNotNull();\n","  }\n","\n","  @Test\n","  public void isEqualToWithNulls() {\n","    Object o = null;\n","    assertThat(o).isEqualTo(null);\n","  }\n","\n","  @Test\n","  public void isEqualToFailureWithNulls() {\n","    Object o = null;\n","    expectFailure.whenTesting().that(o).isEqualTo(\"a\");\n","    assertFailureKeys(\"expected\", \"but was\");\n","    assertFailureValue(\"expected\", \"a\");\n","    assertFailureValue(\"but was\", \"null\");\n","  }\n","\n","  @Test\n","  public void isEqualToStringWithNullVsNull() {\n","    expectFailure.whenTesting().that(\"null\").isEqualTo(null);\n","    assertFailureKeys(\"expected\", \"an instance of\", \"but was\", \"an instance of\");\n","    assertFailureValue(\"expected\", \"null\");\n","    assertFailureValueIndexed(\"an instance of\", 0, \"(null reference)\");\n","    assertFailureValue(\"but was\", \"(non-equal value with same string representation)\");\n","    assertFailureValueIndexed(\"an instance of\", 1, \"java.lang.String\");\n","  }\n","\n","  @Test\n","  public void isEqualToWithSameObject() {\n","    Object a = new Object();\n","    Object b = a;\n","    assertThat(a).isEqualTo(b);\n","  }\n","\n","  @Test\n","  public void isEqualToFailureWithObjects() {\n","    Object a = OBJECT_1;\n","    Object b = OBJECT_2;\n","    expectFailure.whenTesting().that(a).isEqualTo(b);\n","    assertFailureKeys(\"expected\", \"but was\");\n","    assertFailureValue(\"expected\", \"Object 2\");\n","    assertFailureValue(\"but was\", \"Object 1\");\n","  }\n","\n","  @Test\n","  public void isEqualToFailureWithDifferentTypesAndSameToString() {\n","    Object a = \"true\";\n","    Object b = true;\n","    expectFailure.whenTesting().that(a).isEqualTo(b);\n","    assertFailureKeys(\"expected\", \"an instance of\", \"but was\", \"an instance of\");\n","    assertFailureValue(\"expected\", \"true\");\n","    assertFailureValueIndexed(\"an instance of\", 0, \"java.lang.Boolean\");\n","    assertFailureValue(\"but was\", \"(non-equal value with same string representation)\");\n","    assertFailureValueIndexed(\"an instance of\", 1, \"java.lang.String\");\n","  }\n","\n","  @Test\n","  public void isEqualToNullBadEqualsImplementation() {\n","    expectFailure.whenTesting().that(new ThrowsOnEqualsNull()).isEqualTo(null);\n","  }\n","\n","  @SuppressWarnings(\"TruthSelfEquals\")\n","  @Test\n","  public void isEqualToSameInstanceBadEqualsImplementation() {\n","    Object o = new ThrowsOnEquals();\n","    assertThat(o).isEqualTo(o);\n","  }\n","\n","  @Test\n","  public void isNotEqualToWithNulls() {\n","    Object o = null;\n","    assertThat(o).isNotEqualTo(\"a\");\n","  }\n","\n","  @Test\n","  public void isNotEqualToFailureWithNulls() {\n","    Object o = null;\n","    expectFailure.whenTesting().that(o).isNotEqualTo(null);\n","    assertFailureKeys(\"expected not to be\");\n","    assertFailureValue(\"expected not to be\", \"null\");\n","  }\n","\n","  @Test\n","  public void isNotEqualToWithObjects() {\n","    Object a = new Object();\n","    Object b = new Object();\n","    assertThat(a).isNotEqualTo(b);\n","  }\n","\n","  @SuppressWarnings({\n","    \"BoxedPrimitiveConstructor\",\n","    \"deprecation\"\n","  }) // intentional check on non-identity objects\n","  @Test\n","  public void isNotEqualToFailureWithObjects() {\n","    Object o = new Integer(1);\n","    expectFailure.whenTesting().that(o).isNotEqualTo(new Integer(1));\n","    assertFailureKeys(\"expected not to be\");\n","    assertFailureValue(\"expected not to be\", \"1\");\n","  }\n","\n","  @Test\n","  public void isNotEqualToFailureWithSameObject() {\n","    Object a = OBJECT_1;\n","    Object b = a;\n","    expectFailure.whenTesting().that(a).isNotEqualTo(b);\n","  }\n","\n","  @Test\n","  public void isNotEqualToWithDifferentTypesAndSameToString() {\n","    Object a = \"true\";\n","    Object b = true;\n","    assertThat(a).isNotEqualTo(b);\n","  }\n","\n","  @Test\n","  public void isNotEqualToNullBadEqualsImplementation() {\n","    assertThat(new ThrowsOnEqualsNull()).isNotEqualTo(null);\n","  }\n","\n","  @SuppressWarnings(\"TruthSelfEquals\")\n","  @Test\n","  public void isNotEqualToSameInstanceBadEqualsImplementation() {\n","    Object o = new ThrowsOnEquals();\n","    expectFailure.whenTesting().that(o).isNotEqualTo(o);\n","  }\n","\n","  @SuppressWarnings(\"IsInstanceString\") // test is an intentional trivially true check\n","  @Test\n","  public void isInstanceOfExactType() {\n","    assertThat(\"a\").isInstanceOf(String.class);\n","  }\n","\n","  @SuppressWarnings(\"IsInstanceInteger\") // test is an intentional trivially true check\n","  @Test\n","  public void isInstanceOfSuperclass() {\n","    assertThat(3).isInstanceOf(Number.class);\n","  }\n","\n","  @SuppressWarnings(\"IsInstanceString\") // test is an intentional trivially true check\n","  @Test\n","  public void isInstanceOfImplementedInterface() {\n","    if (isGwt()) {\n","      try {\n","        assertThat(\"a\").isInstanceOf(CharSequence.class);\n","        fail();\n","      } catch (UnsupportedOperationException expected) {\n","      }\n","      return;\n","    }\n","\n","    assertThat(\"a\").isInstanceOf(CharSequence.class);\n","  }\n","\n","  @Test\n","  public void isInstanceOfUnrelatedClass() {\n","    expectFailure.whenTesting().that(4.5).isInstanceOf(Long.class);\n","    assertFailureKeys(\"expected instance of\", \"but was instance of\", \"with value\");\n","    assertFailureValue(\"expected instance of\", \"java.lang.Long\");\n","    assertFailureValue(\"but was instance of\", \"java.lang.Double\");\n","    assertFailureValue(\"with value\", \"4.5\");\n","  }\n","\n","  @Test\n","  public void isInstanceOfUnrelatedInterface() {\n","    if (isGwt()) {\n","      try {\n","        assertThat(4.5).isInstanceOf(CharSequence.class);\n","        fail();\n","      } catch (UnsupportedOperationException expected) {\n","      }\n","      return;\n","    }\n","\n","    expectFailure.whenTesting().that(4.5).isInstanceOf(CharSequence.class);\n","  }\n","\n","  @Test\n","  public void isInstanceOfClassForNull() {\n","    expectFailure.whenTesting().that((Object) null).isInstanceOf(Long.class);\n","    assertFailureKeys(\"expected instance of\", \"but was\");\n","    assertFailureValue(\"expected instance of\", \"java.lang.Long\");\n","  }\n","\n","  @Test\n","  public void isInstanceOfInterfaceForNull() {\n","    expectFailure.whenTesting().that((Object) null).isInstanceOf(CharSequence.class);\n","  }\n","\n","  // false positive; actually an intentional trivially *false* check\n","  @SuppressWarnings(\"IsInstanceInteger\")\n","  @Test\n","  public void isInstanceOfPrimitiveType() {\n","    try {\n","      assertThat(1).isInstanceOf(int.class);\n","      fail();\n","    } catch (IllegalArgumentException expected) {\n","    }\n","  }\n","\n","  @Test\n","  public void isNotInstanceOfUnrelatedClass() {\n","    assertThat(\"a\").isNotInstanceOf(Long.class);\n","  }\n","\n","  @Test\n","  public void isNotInstanceOfUnrelatedInterface() {\n","    if (isGwt()) {\n","      try {\n","        assertThat(5).isNotInstanceOf(CharSequence.class);\n","        fail();\n","      } catch (UnsupportedOperationException expected) {\n","      }\n","      return;\n","    }\n","\n","    assertThat(5).isNotInstanceOf(CharSequence.class);\n","  }\n","\n","  @Test\n","  public void isNotInstanceOfExactType() {\n","    expectFailure.whenTesting().that(5).isNotInstanceOf(Integer.class);\n","    assertFailureKeys(\"expected not to be an instance of\", \"but was\");\n","    assertFailureValue(\"expected not to be an instance of\", \"java.lang.Integer\");\n","  }\n","\n","  @Test\n","  public void isNotInstanceOfSuperclass() {\n","    expectFailure.whenTesting().that(5).isNotInstanceOf(Number.class);\n","  }\n","\n","  @Test\n","  public void isNotInstanceOfImplementedInterface() {\n","    if (isGwt()) {\n","      try {\n","        assertThat(\"a\").isNotInstanceOf(CharSequence.class);\n","        fail();\n","      } catch (UnsupportedOperationException expected) {\n","      }\n","      return;\n","    }\n","\n","    expectFailure.whenTesting().that(\"a\").isNotInstanceOf(CharSequence.class);\n","  }\n","\n","  @Test\n","  public void isNotInstanceOfPrimitiveType() {\n","    try {\n","      assertThat(1).isNotInstanceOf(int.class);\n","      fail();\n","    } catch (IllegalArgumentException expected) {\n","    }\n","  }\n","\n","  @Test\n","  public void isIn() {\n","    assertThat(\"b\").isIn(oneShotIterable(\"a\", \"b\", \"c\"));\n","  }\n","\n","  @Test\n","  public void isInJustTwo() {\n","    assertThat(\"b\").isIn(oneShotIterable(\"a\", \"b\"));\n","  }\n","\n","  @Test\n","  public void isInFailure() {\n","    expectFailure.whenTesting().that(\"x\").isIn(oneShotIterable(\"a\", \"b\", \"c\"));\n","    assertFailureKeys(\"expected any of\", \"but was\");\n","    assertFailureValue(\"expected any of\", \"[a, b, c]\");\n","  }\n","\n","  @Test\n","  public void isInNullInListWithNull() {\n","    assertThat((String) null).isIn(oneShotIterable(\"a\", \"b\", (String) null));\n","  }\n","\n","  @Test\n","  public void isInNonnullInListWithNull() {\n","    assertThat(\"b\").isIn(oneShotIterable(\"a\", \"b\", (String) null));\n","  }\n","\n","  @Test\n","  public void isInNullFailure() {\n","    expectFailure.whenTesting().that((String) null).isIn(oneShotIterable(\"a\", \"b\", \"c\"));\n","  }\n","\n","  @Test\n","  public void isInEmptyFailure() {\n","    expectFailure.whenTesting().that(\"b\").isIn(ImmutableList.<String>of());\n","  }\n","\n","  @Test\n","  public void isAnyOf() {\n","    assertThat(\"b\").isAnyOf(\"a\", \"b\", \"c\");\n","  }\n","\n","  @Test\n","  public void isAnyOfJustTwo() {\n","    assertThat(\"b\").isAnyOf(\"a\", \"b\");\n","  }\n","\n","  @Test\n","  public void isAnyOfFailure() {\n","    expectFailure.whenTesting().that(\"x\").isAnyOf(\"a\", \"b\", \"c\");\n","    assertFailureKeys(\"expected any of\", \"but was\");\n","    assertFailureValue(\"expected any of\", \"[a, b, c]\");\n","  }\n","\n","  @Test\n","  public void isAnyOfNullInListWithNull() {\n","    assertThat((String) null).isAnyOf(\"a\", \"b\", (String) null);\n","  }\n","\n","  @Test\n","  public void isAnyOfNonnullInListWithNull() {\n","    assertThat(\"b\").isAnyOf(\"a\", \"b\", (String) null);\n","  }\n","\n","  @Test\n","  public void isAnyOfNullFailure() {\n","    expectFailure.whenTesting().that((String) null).isAnyOf(\"a\", \"b\", \"c\");\n","  }\n","\n","  @Test\n","  public void isNotIn() {\n","    assertThat(\"x\").isNotIn(oneShotIterable(\"a\", \"b\", \"c\"));\n","  }\n","\n","  @Test\n","  public void isNotInFailure() {\n","    expectFailure.whenTesting().that(\"b\").isNotIn(oneShotIterable(\"a\", \"b\", \"c\"));\n","    assertFailureKeys(\"expected not to be any of\", \"but was\");\n","    assertFailureValue(\"expected not to be any of\", \"[a, b, c]\");\n","  }\n","\n","  @Test\n","  public void isNotInNull() {\n","    assertThat((String) null).isNotIn(oneShotIterable(\"a\", \"b\", \"c\"));\n","  }\n","\n","  @Test\n","  public void isNotInNullFailure() {\n","    expectFailure\n","        .whenTesting()\n","        .that((String) null)\n","        .isNotIn(oneShotIterable(\"a\", \"b\", (String) null));\n","  }\n","\n","  @Test\n","  public void isNotInEmpty() {\n","    assertThat(\"b\").isNotIn(ImmutableList.<String>of());\n","  }\n","\n","  @Test\n","  public void isNoneOf() {\n","    assertThat(\"x\").isNoneOf(\"a\", \"b\", \"c\");\n","  }\n","\n","  @Test\n","  public void isNoneOfFailure() {\n","    expectFailure.whenTesting().that(\"b\").isNoneOf(\"a\", \"b\", \"c\");\n","    assertFailureKeys(\"expected not to be any of\", \"but was\");\n","    assertFailureValue(\"expected not to be any of\", \"[a, b, c]\");\n","  }\n","\n","  @Test\n","  public void isNoneOfNull() {\n","    assertThat((String) null).isNoneOf(\"a\", \"b\", \"c\");\n","  }\n","\n","  @Test\n","  public void isNoneOfNullFailure() {\n","    expectFailure.whenTesting().that((String) null).isNoneOf(\"a\", \"b\", (String) null);\n","  }\n","\n","  @Test\n","  // test of a mistaken call\n","  @SuppressWarnings({\"EqualsIncompatibleType\", \"DoNotCall\", \"deprecation\"})\n","  public void equalsThrowsUSOE() {\n","    try {\n","      boolean unused = assertThat(5).equals(5);\n","    } catch (UnsupportedOperationException expected) {\n","      assertThat(expected)\n","          .hasMessageThat()\n","          .isEqualTo(\n","              \"Subject.equals() is not supported. Did you mean to call\"\n","                  + \" assertThat(actual).isEqualTo(expected) instead of\"\n","                  + \" assertThat(actual).equals(expected)?\");\n","      return;\n","    }\n","    fail(\"Should have thrown.\");\n","  }\n","\n","  @Test\n","  // test of a mistaken call\n","  @SuppressWarnings({\"DoNotCall\", \"deprecation\"})\n","  public void hashCodeThrowsUSOE() {\n","    try {\n","      int unused = assertThat(5).hashCode();\n","    } catch (UnsupportedOperationException expected) {\n","      assertThat(expected).hasMessageThat().isEqualTo(\"Subject.hashCode() is not supported.\");\n","      return;\n","    }\n","    fail(\"Should have thrown.\");\n","  }\n","\n","  @Test\n","  public void ignoreCheckDiscardsFailures() {\n","    assertThat((Object) null).ignoreCheck().that(\"foo\").isNull();\n","  }\n","\n","  private static <T> Iterable<T> oneShotIterable(T... values) {\n","    Iterator<T> iterator = Iterators.forArray(values);\n","    return new Iterable<T>() {\n","      @Override\n","      public Iterator<T> iterator() {\n","        return iterator;\n","      }\n","\n","      @Override\n","      public String toString() {\n","        return Arrays.toString(values);\n","      }\n","    };\n","  }\n","\n","  @Test\n","  @SuppressWarnings(\"TruthIncompatibleType\") // test of a mistaken call\n","  public void disambiguationWithSameToString() {\n","    expectFailure.whenTesting().that(new StringBuilder(\"foo\")).isEqualTo(new StringBuilder(\"foo\"));\n","    assertFailureKeys(\"expected\", \"but was\");\n","    assertFailureValue(\"expected\", \"foo\");\n","    assertFailureValue(\n","        \"but was\", \"(non-equal instance of same class with same string representation)\");\n","  }\n","\n","  private static final class ThrowsOnEqualsNull {\n","\n","    @SuppressWarnings(\"EqualsHashCode\")\n","    @Override\n","    public boolean equals(Object obj) {\n","      checkNotNull(obj); // buggy implementation but one that we're working around, at least for now\n","      return super.equals(obj);\n","    }\n","  }\n","\n","  private static final class ThrowsOnEquals {\n","\n","    @SuppressWarnings(\"EqualsHashCode\")\n","    @Override\n","    public boolean equals(Object obj) {\n","      throw new UnsupportedOperationException();\n","      // buggy implementation but one that we're working around, at least for now\n","    }\n","  }\n","\n","  static final class ForbidsEqualityChecksSubject extends Subject {\n","    static Factory<ForbidsEqualityChecksSubject, Object> objectsForbiddingEqualityCheck() {\n","      return ForbidsEqualityChecksSubject::new;\n","    }\n","\n","    ForbidsEqualityChecksSubject(FailureMetadata metadata, @Nullable Object actual) {\n","      super(metadata, actual);\n","    }\n","\n","    // Not sure how to feel about this, but people do it:\n","\n","    @Override\n","    public void isEqualTo(@Nullable Object expected) {\n","      throw new UnsupportedOperationException();\n","    }\n","\n","    @Override\n","    public void isNotEqualTo(@Nullable Object unexpected) {\n","      throw new UnsupportedOperationException();\n","    }\n","  }\n","\n","  private static boolean isAndroid() {\n","    return System.getProperty(\"java.runtime.name\").contains(\"Android\");\n","  }\n","}\n"],"method_lines_dic":{"Subject.Factory::::createSubject(com.google.common.truth.FailureMetadata,ActualT)":[91,91],"Subject::::isNull()":[127,129],"Subject::::isNotNull()":[132,134],"Subject::::isEqualTo(java.lang.Object)":[167,169],"Subject::::standardIsEqualTo(java.lang.Object)":[171,176],"Subject::::isNotEqualTo(java.lang.Object)":[182,184],"Subject::::standardIsNotEqualTo(java.lang.Object)":[186,200],"Subject::::compareForEquality(java.lang.Object)":[208,244],"Subject::::isIntegralBoxedPrimitive(java.lang.Object)":[246,252],"Subject::::integralValue(java.lang.Object)":[254,262],"Subject::::isSameInstanceAs(java.lang.Object)":[265,278],"Subject::::isNotSameInstanceAs(java.lang.Object)":[281,290],"Subject::::isInstanceOf(java.lang.Class<?>)":[293,316],"Subject::::isNotInstanceOf(java.lang.Class<?>)":[319,337],"Subject::::isInstanceOfType(java.lang.Object,java.lang.Class<?>)":[339,349],"Subject::::isIn(java.lang.Iterable<?>)":[352,357],"Subject::::contains(java.lang.Iterable<?>,java.lang.Object)":[359,364],"Subject::::isAnyOf(java.lang.Object,java.lang.Object,java.lang.Object[])":[367,370],"Subject::::isNotIn(java.lang.Iterable<?>)":[373,378],"Subject::::isNoneOf(java.lang.Object,java.lang.Object,java.lang.Object[])":[381,384],"Subject::::actual()":[387,389],"Subject::::actualCustomStringRepresentation()":[411,414],"Subject::::actualCustomStringRepresentationForPackageMembersToCall()":[416,418],"Subject::::formatActualOrExpected(java.lang.Object)":[420,438],"Subject::::base16(byte[])":[441,447],"Subject::::arrayAsListRecursively(java.lang.Object)":[451,474],"Subject.ComparisonResult::::fromEqualsResult(boolean)":[485,487],"Subject.ComparisonResult::::differentWithDescription(com.google.common.truth.Fact[])":[490,492],"Subject.ComparisonResult::::equal()":[495,497],"Subject.ComparisonResult::::differentNoDescription()":[500,502],"Subject.ComparisonResult::::valuesAreEqual()":[514,516],"Subject.ComparisonResult::::factsOrEmpty()":[518,520],"Subject.ComparisonResult::::withoutDescription()":[523,525],"Subject::::checkByteArrayEquals(byte[],byte[])":[533,539],"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)":[551,591],"Subject::::arrayType(java.lang.Object)":[593,613],"Subject::::gwtSafeObjectEquals(java.lang.Object,java.lang.Object)":[615,623],"Subject::::doubleArrayAsString(double[])":[625,631],"Subject::::floatArrayAsString(float[])":[633,639],"Subject::::check()":[649,652],"Subject::::check(java.lang.String,java.lang.Object[])":[682,684],"Subject::::checkNoNeedToDisplayBothValues(java.lang.String,java.lang.Object[])":[688,691],"Subject::::doCheck(com.google.common.truth.FailureMetadata.OldAndNewValuesAreSimilar,java.lang.String,java.lang.Object[])":[693,700],"Subject::::ignoreCheck()":[710,712],"Subject::::failWithActual(java.lang.String,java.lang.Object)":[729,731],"Subject::::failWithActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])":[747,749],"Subject::::failWithActual(java.lang.Iterable<com.google.common.truth.Fact>)":[752,754],"Subject::::fail(java.lang.String)":[766,769],"Subject::::fail(java.lang.String,java.lang.Object)":[781,784],"Subject::::fail(java.lang.String,java.lang.Object[])":[795,803],"Subject::::failEqualityCheckForEqualsWithoutDescription(java.lang.Object)":[820,822],"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)":[824,882],"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)":[888,926],"Subject::::escapeWhitespace(java.lang.String)":[928,934],"Subject::::escapeWhitespace(char)":[936,951],"Subject::::tryFailForEmptyString(java.lang.Object)":[957,974],"Subject::::asUnicodeHexEscape(char)":[980,993],"Subject::::failEqualityCheckNoComparisonFailure(com.google.common.truth.Subject.ComparisonResult,com.google.common.truth.Fact[])":[995,998],"Subject::::failWithBadResults(java.lang.String,java.lang.Object,java.lang.String,java.lang.Object)":[1011,1022],"Subject::::failWithCustomSubject(java.lang.String,java.lang.Object,java.lang.Object)":[1035,1042],"Subject::::failWithoutSubject(java.lang.String)":[1050,1053],"Subject::::failWithoutActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])":[1075,1077],"Subject::::failWithoutActual(java.lang.Iterable<com.google.common.truth.Fact>)":[1080,1082],"Subject::::failWithoutActual(java.lang.String)":[1094,1097],"Subject::::equals(java.lang.Object)":[1104,1115],"Subject::::hashCode()":[1121,1126],"Subject::::toString()":[1132,1139],"Subject::::butWas()":[1157,1159],"Subject::::typeDescription()":[1165,1167],"Subject::::typeDescriptionOrGuess(java.lang.Class<? extends com.google.common.truth.Subject>,java.lang.String)":[1169,1186]},"test_method_lines_dic":{"SubjectTest::::nullPointerTester()":[59,97],"SubjectTest::::allAssertThatOverloadsAcceptNull()":[99,161],"SubjectTest::::toString()":[172,175],"SubjectTest::::toStringsAreIdentical()":[178,190],"SubjectTest.IntWrapper::::toString()":[195,198],"SubjectTest::::isSameInstanceAsWithNulls()":[201,205],"SubjectTest::::isSameInstanceAsFailureWithNulls()":[207,213],"SubjectTest::::isSameInstanceAsWithSameObject()":[215,220],"SubjectTest::::isSameInstanceAsFailureWithObjects()":[222,228],"SubjectTest::::isSameInstanceAsFailureWithComparableObjects_nonString()":[230,239],"SubjectTest::::isSameInstanceAsFailureWithComparableObjects()":[241,247],"SubjectTest::::isSameInstanceAsFailureWithDifferentTypesAndSameToString()":[249,259],"SubjectTest::::isNotSameInstanceAsWithNulls()":[261,265],"SubjectTest::::isNotSameInstanceAsFailureWithNulls()":[267,273],"SubjectTest::::isNotSameInstanceAsWithObjects()":[275,280],"SubjectTest::::isNotSameInstanceAsFailureWithSameObject()":[282,289],"SubjectTest::::isNotSameInstanceAsWithComparableObjects_nonString()":[291,296],"SubjectTest::::isNotSameInstanceAsWithComparableObjects()":[298,304],"SubjectTest::::isNotSameInstanceAsWithDifferentTypesAndSameToString()":[306,311],"SubjectTest::::isNull()":[313,317],"SubjectTest::::isNullFail()":[319,325],"SubjectTest::::isNullWhenSubjectForbidsIsEqualTo()":[327,330],"SubjectTest::::isNullWhenSubjectForbidsIsEqualToFail()":[332,335],"SubjectTest::::stringIsNullFail()":[337,340],"SubjectTest::::isNullBadEqualsImplementation()":[342,345],"SubjectTest::::isNotNull()":[347,351],"SubjectTest::::isNotNullFail()":[353,359],"SubjectTest::::isNotNullBadEqualsImplementation()":[361,364],"SubjectTest::::isNotNullWhenSubjectForbidsIsEqualTo()":[366,369],"SubjectTest::::isNotNullWhenSubjectForbidsIsEqualToFail()":[371,374],"SubjectTest::::isEqualToWithNulls()":[376,380],"SubjectTest::::isEqualToFailureWithNulls()":[382,389],"SubjectTest::::isEqualToStringWithNullVsNull()":[391,399],"SubjectTest::::isEqualToWithSameObject()":[401,406],"SubjectTest::::isEqualToFailureWithObjects()":[408,416],"SubjectTest::::isEqualToFailureWithDifferentTypesAndSameToString()":[418,428],"SubjectTest::::isEqualToNullBadEqualsImplementation()":[430,433],"SubjectTest::::isEqualToSameInstanceBadEqualsImplementation()":[435,440],"SubjectTest::::isNotEqualToWithNulls()":[442,446],"SubjectTest::::isNotEqualToFailureWithNulls()":[448,454],"SubjectTest::::isNotEqualToWithObjects()":[456,461],"SubjectTest::::isNotEqualToFailureWithObjects()":[463,473],"SubjectTest::::isNotEqualToFailureWithSameObject()":[475,480],"SubjectTest::::isNotEqualToWithDifferentTypesAndSameToString()":[482,487],"SubjectTest::::isNotEqualToNullBadEqualsImplementation()":[489,492],"SubjectTest::::isNotEqualToSameInstanceBadEqualsImplementation()":[494,499],"SubjectTest::::isInstanceOfExactType()":[501,505],"SubjectTest::::isInstanceOfSuperclass()":[507,511],"SubjectTest::::isInstanceOfImplementedInterface()":[513,526],"SubjectTest::::isInstanceOfUnrelatedClass()":[528,535],"SubjectTest::::isInstanceOfUnrelatedInterface()":[537,549],"SubjectTest::::isInstanceOfClassForNull()":[551,556],"SubjectTest::::isInstanceOfInterfaceForNull()":[558,561],"SubjectTest::::isInstanceOfPrimitiveType()":[564,572],"SubjectTest::::isNotInstanceOfUnrelatedClass()":[574,577],"SubjectTest::::isNotInstanceOfUnrelatedInterface()":[579,591],"SubjectTest::::isNotInstanceOfExactType()":[593,598],"SubjectTest::::isNotInstanceOfSuperclass()":[600,603],"SubjectTest::::isNotInstanceOfImplementedInterface()":[605,617],"SubjectTest::::isNotInstanceOfPrimitiveType()":[619,626],"SubjectTest::::isIn()":[628,631],"SubjectTest::::isInJustTwo()":[633,636],"SubjectTest::::isInFailure()":[638,643],"SubjectTest::::isInNullInListWithNull()":[645,648],"SubjectTest::::isInNonnullInListWithNull()":[650,653],"SubjectTest::::isInNullFailure()":[655,658],"SubjectTest::::isInEmptyFailure()":[660,663],"SubjectTest::::isAnyOf()":[665,668],"SubjectTest::::isAnyOfJustTwo()":[670,673],"SubjectTest::::isAnyOfFailure()":[675,680],"SubjectTest::::isAnyOfNullInListWithNull()":[682,685],"SubjectTest::::isAnyOfNonnullInListWithNull()":[687,690],"SubjectTest::::isAnyOfNullFailure()":[692,695],"SubjectTest::::isNotIn()":[697,700],"SubjectTest::::isNotInFailure()":[702,707],"SubjectTest::::isNotInNull()":[709,712],"SubjectTest::::isNotInNullFailure()":[714,720],"SubjectTest::::isNotInEmpty()":[722,725],"SubjectTest::::isNoneOf()":[727,730],"SubjectTest::::isNoneOfFailure()":[732,737],"SubjectTest::::isNoneOfNull()":[739,742],"SubjectTest::::isNoneOfNullFailure()":[744,747],"SubjectTest::::equalsThrowsUSOE()":[749,765],"SubjectTest::::hashCodeThrowsUSOE()":[767,778],"SubjectTest::::ignoreCheckDiscardsFailures()":[780,783],"SubjectTest::::oneShotIterable(T[])":[785,798],"SubjectTest::::disambiguationWithSameToString()":[800,808],"SubjectTest.ThrowsOnEqualsNull::::equals(java.lang.Object)":[812,817],"SubjectTest.ThrowsOnEquals::::equals(java.lang.Object)":[822,827],"SubjectTest.ForbidsEqualityChecksSubject::::objectsForbiddingEqualityCheck()":[831,833],"SubjectTest.ForbidsEqualityChecksSubject::::isEqualTo(java.lang.Object)":[841,844],"SubjectTest.ForbidsEqualityChecksSubject::::isNotEqualTo(java.lang.Object)":[846,849],"SubjectTest::::isAndroid()":[852,854]},"reverse_method_lines_dic":{"91":"Subject.Factory::::createSubject(com.google.common.truth.FailureMetadata,ActualT)","127":"Subject::::isNull()","128":"Subject::::isNull()","129":"Subject::::isNull()","132":"Subject::::isNotNull()","133":"Subject::::isNotNull()","134":"Subject::::isNotNull()","167":"Subject::::isEqualTo(java.lang.Object)","168":"Subject::::isEqualTo(java.lang.Object)","169":"Subject::::isEqualTo(java.lang.Object)","171":"Subject::::standardIsEqualTo(java.lang.Object)","172":"Subject::::standardIsEqualTo(java.lang.Object)","173":"Subject::::standardIsEqualTo(java.lang.Object)","174":"Subject::::standardIsEqualTo(java.lang.Object)","175":"Subject::::standardIsEqualTo(java.lang.Object)","176":"Subject::::standardIsEqualTo(java.lang.Object)","182":"Subject::::isNotEqualTo(java.lang.Object)","183":"Subject::::isNotEqualTo(java.lang.Object)","184":"Subject::::isNotEqualTo(java.lang.Object)","186":"Subject::::standardIsNotEqualTo(java.lang.Object)","187":"Subject::::standardIsNotEqualTo(java.lang.Object)","188":"Subject::::standardIsNotEqualTo(java.lang.Object)","189":"Subject::::standardIsNotEqualTo(java.lang.Object)","190":"Subject::::standardIsNotEqualTo(java.lang.Object)","191":"Subject::::standardIsNotEqualTo(java.lang.Object)","192":"Subject::::standardIsNotEqualTo(java.lang.Object)","193":"Subject::::standardIsNotEqualTo(java.lang.Object)","194":"Subject::::standardIsNotEqualTo(java.lang.Object)","195":"Subject::::standardIsNotEqualTo(java.lang.Object)","196":"Subject::::standardIsNotEqualTo(java.lang.Object)","197":"Subject::::standardIsNotEqualTo(java.lang.Object)","198":"Subject::::standardIsNotEqualTo(java.lang.Object)","199":"Subject::::standardIsNotEqualTo(java.lang.Object)","200":"Subject::::standardIsNotEqualTo(java.lang.Object)","208":"Subject::::compareForEquality(java.lang.Object)","209":"Subject::::compareForEquality(java.lang.Object)","210":"Subject::::compareForEquality(java.lang.Object)","211":"Subject::::compareForEquality(java.lang.Object)","212":"Subject::::compareForEquality(java.lang.Object)","213":"Subject::::compareForEquality(java.lang.Object)","214":"Subject::::compareForEquality(java.lang.Object)","215":"Subject::::compareForEquality(java.lang.Object)","216":"Subject::::compareForEquality(java.lang.Object)","217":"Subject::::compareForEquality(java.lang.Object)","218":"Subject::::compareForEquality(java.lang.Object)","219":"Subject::::compareForEquality(java.lang.Object)","220":"Subject::::compareForEquality(java.lang.Object)","221":"Subject::::compareForEquality(java.lang.Object)","222":"Subject::::compareForEquality(java.lang.Object)","223":"Subject::::compareForEquality(java.lang.Object)","224":"Subject::::compareForEquality(java.lang.Object)","225":"Subject::::compareForEquality(java.lang.Object)","226":"Subject::::compareForEquality(java.lang.Object)","227":"Subject::::compareForEquality(java.lang.Object)","228":"Subject::::compareForEquality(java.lang.Object)","229":"Subject::::compareForEquality(java.lang.Object)","230":"Subject::::compareForEquality(java.lang.Object)","231":"Subject::::compareForEquality(java.lang.Object)","232":"Subject::::compareForEquality(java.lang.Object)","233":"Subject::::compareForEquality(java.lang.Object)","234":"Subject::::compareForEquality(java.lang.Object)","235":"Subject::::compareForEquality(java.lang.Object)","236":"Subject::::compareForEquality(java.lang.Object)","237":"Subject::::compareForEquality(java.lang.Object)","238":"Subject::::compareForEquality(java.lang.Object)","239":"Subject::::compareForEquality(java.lang.Object)","240":"Subject::::compareForEquality(java.lang.Object)","241":"Subject::::compareForEquality(java.lang.Object)","242":"Subject::::compareForEquality(java.lang.Object)","243":"Subject::::compareForEquality(java.lang.Object)","244":"Subject::::compareForEquality(java.lang.Object)","246":"Subject::::isIntegralBoxedPrimitive(java.lang.Object)","247":"Subject::::isIntegralBoxedPrimitive(java.lang.Object)","248":"Subject::::isIntegralBoxedPrimitive(java.lang.Object)","249":"Subject::::isIntegralBoxedPrimitive(java.lang.Object)","250":"Subject::::isIntegralBoxedPrimitive(java.lang.Object)","251":"Subject::::isIntegralBoxedPrimitive(java.lang.Object)","252":"Subject::::isIntegralBoxedPrimitive(java.lang.Object)","254":"Subject::::integralValue(java.lang.Object)","255":"Subject::::integralValue(java.lang.Object)","256":"Subject::::integralValue(java.lang.Object)","257":"Subject::::integralValue(java.lang.Object)","258":"Subject::::integralValue(java.lang.Object)","259":"Subject::::integralValue(java.lang.Object)","260":"Subject::::integralValue(java.lang.Object)","261":"Subject::::integralValue(java.lang.Object)","262":"Subject::::integralValue(java.lang.Object)","265":"Subject::::isSameInstanceAs(java.lang.Object)","266":"Subject::::isSameInstanceAs(java.lang.Object)","267":"Subject::::isSameInstanceAs(java.lang.Object)","268":"Subject::::isSameInstanceAs(java.lang.Object)","269":"Subject::::isSameInstanceAs(java.lang.Object)","270":"Subject::::isSameInstanceAs(java.lang.Object)","271":"Subject::::isSameInstanceAs(java.lang.Object)","272":"Subject::::isSameInstanceAs(java.lang.Object)","273":"Subject::::isSameInstanceAs(java.lang.Object)","274":"Subject::::isSameInstanceAs(java.lang.Object)","275":"Subject::::isSameInstanceAs(java.lang.Object)","276":"Subject::::isSameInstanceAs(java.lang.Object)","277":"Subject::::isSameInstanceAs(java.lang.Object)","278":"Subject::::isSameInstanceAs(java.lang.Object)","281":"Subject::::isNotSameInstanceAs(java.lang.Object)","282":"Subject::::isNotSameInstanceAs(java.lang.Object)","283":"Subject::::isNotSameInstanceAs(java.lang.Object)","284":"Subject::::isNotSameInstanceAs(java.lang.Object)","285":"Subject::::isNotSameInstanceAs(java.lang.Object)","286":"Subject::::isNotSameInstanceAs(java.lang.Object)","287":"Subject::::isNotSameInstanceAs(java.lang.Object)","288":"Subject::::isNotSameInstanceAs(java.lang.Object)","289":"Subject::::isNotSameInstanceAs(java.lang.Object)","290":"Subject::::isNotSameInstanceAs(java.lang.Object)","293":"Subject::::isInstanceOf(java.lang.Class<?>)","294":"Subject::::isInstanceOf(java.lang.Class<?>)","295":"Subject::::isInstanceOf(java.lang.Class<?>)","296":"Subject::::isInstanceOf(java.lang.Class<?>)","297":"Subject::::isInstanceOf(java.lang.Class<?>)","298":"Subject::::isInstanceOf(java.lang.Class<?>)","299":"Subject::::isInstanceOf(java.lang.Class<?>)","300":"Subject::::isInstanceOf(java.lang.Class<?>)","301":"Subject::::isInstanceOf(java.lang.Class<?>)","302":"Subject::::isInstanceOf(java.lang.Class<?>)","303":"Subject::::isInstanceOf(java.lang.Class<?>)","304":"Subject::::isInstanceOf(java.lang.Class<?>)","305":"Subject::::isInstanceOf(java.lang.Class<?>)","306":"Subject::::isInstanceOf(java.lang.Class<?>)","307":"Subject::::isInstanceOf(java.lang.Class<?>)","308":"Subject::::isInstanceOf(java.lang.Class<?>)","309":"Subject::::isInstanceOf(java.lang.Class<?>)","310":"Subject::::isInstanceOf(java.lang.Class<?>)","311":"Subject::::isInstanceOf(java.lang.Class<?>)","312":"Subject::::isInstanceOf(java.lang.Class<?>)","313":"Subject::::isInstanceOf(java.lang.Class<?>)","314":"Subject::::isInstanceOf(java.lang.Class<?>)","315":"Subject::::isInstanceOf(java.lang.Class<?>)","316":"Subject::::isInstanceOf(java.lang.Class<?>)","319":"Subject::::isNotInstanceOf(java.lang.Class<?>)","320":"Subject::::isNotInstanceOf(java.lang.Class<?>)","321":"Subject::::isNotInstanceOf(java.lang.Class<?>)","322":"Subject::::isNotInstanceOf(java.lang.Class<?>)","323":"Subject::::isNotInstanceOf(java.lang.Class<?>)","324":"Subject::::isNotInstanceOf(java.lang.Class<?>)","325":"Subject::::isNotInstanceOf(java.lang.Class<?>)","326":"Subject::::isNotInstanceOf(java.lang.Class<?>)","327":"Subject::::isNotInstanceOf(java.lang.Class<?>)","328":"Subject::::isNotInstanceOf(java.lang.Class<?>)","329":"Subject::::isNotInstanceOf(java.lang.Class<?>)","330":"Subject::::isNotInstanceOf(java.lang.Class<?>)","331":"Subject::::isNotInstanceOf(java.lang.Class<?>)","332":"Subject::::isNotInstanceOf(java.lang.Class<?>)","333":"Subject::::isNotInstanceOf(java.lang.Class<?>)","334":"Subject::::isNotInstanceOf(java.lang.Class<?>)","335":"Subject::::isNotInstanceOf(java.lang.Class<?>)","336":"Subject::::isNotInstanceOf(java.lang.Class<?>)","337":"Subject::::isNotInstanceOf(java.lang.Class<?>)","339":"Subject::::isInstanceOfType(java.lang.Object,java.lang.Class<?>)","340":"Subject::::isInstanceOfType(java.lang.Object,java.lang.Class<?>)","341":"Subject::::isInstanceOfType(java.lang.Object,java.lang.Class<?>)","342":"Subject::::isInstanceOfType(java.lang.Object,java.lang.Class<?>)","343":"Subject::::isInstanceOfType(java.lang.Object,java.lang.Class<?>)","344":"Subject::::isInstanceOfType(java.lang.Object,java.lang.Class<?>)","345":"Subject::::isInstanceOfType(java.lang.Object,java.lang.Class<?>)","346":"Subject::::isInstanceOfType(java.lang.Object,java.lang.Class<?>)","347":"Subject::::isInstanceOfType(java.lang.Object,java.lang.Class<?>)","348":"Subject::::isInstanceOfType(java.lang.Object,java.lang.Class<?>)","349":"Subject::::isInstanceOfType(java.lang.Object,java.lang.Class<?>)","352":"Subject::::isIn(java.lang.Iterable<?>)","353":"Subject::::isIn(java.lang.Iterable<?>)","354":"Subject::::isIn(java.lang.Iterable<?>)","355":"Subject::::isIn(java.lang.Iterable<?>)","356":"Subject::::isIn(java.lang.Iterable<?>)","357":"Subject::::isIn(java.lang.Iterable<?>)","359":"Subject::::contains(java.lang.Iterable<?>,java.lang.Object)","360":"Subject::::contains(java.lang.Iterable<?>,java.lang.Object)","361":"Subject::::contains(java.lang.Iterable<?>,java.lang.Object)","362":"Subject::::contains(java.lang.Iterable<?>,java.lang.Object)","363":"Subject::::contains(java.lang.Iterable<?>,java.lang.Object)","364":"Subject::::contains(java.lang.Iterable<?>,java.lang.Object)","367":"Subject::::isAnyOf(java.lang.Object,java.lang.Object,java.lang.Object[])","368":"Subject::::isAnyOf(java.lang.Object,java.lang.Object,java.lang.Object[])","369":"Subject::::isAnyOf(java.lang.Object,java.lang.Object,java.lang.Object[])","370":"Subject::::isAnyOf(java.lang.Object,java.lang.Object,java.lang.Object[])","373":"Subject::::isNotIn(java.lang.Iterable<?>)","374":"Subject::::isNotIn(java.lang.Iterable<?>)","375":"Subject::::isNotIn(java.lang.Iterable<?>)","376":"Subject::::isNotIn(java.lang.Iterable<?>)","377":"Subject::::isNotIn(java.lang.Iterable<?>)","378":"Subject::::isNotIn(java.lang.Iterable<?>)","381":"Subject::::isNoneOf(java.lang.Object,java.lang.Object,java.lang.Object[])","382":"Subject::::isNoneOf(java.lang.Object,java.lang.Object,java.lang.Object[])","383":"Subject::::isNoneOf(java.lang.Object,java.lang.Object,java.lang.Object[])","384":"Subject::::isNoneOf(java.lang.Object,java.lang.Object,java.lang.Object[])","387":"Subject::::actual()","388":"Subject::::actual()","389":"Subject::::actual()","411":"Subject::::actualCustomStringRepresentation()","412":"Subject::::actualCustomStringRepresentation()","413":"Subject::::actualCustomStringRepresentation()","414":"Subject::::actualCustomStringRepresentation()","416":"Subject::::actualCustomStringRepresentationForPackageMembersToCall()","417":"Subject::::actualCustomStringRepresentationForPackageMembersToCall()","418":"Subject::::actualCustomStringRepresentationForPackageMembersToCall()","420":"Subject::::formatActualOrExpected(java.lang.Object)","421":"Subject::::formatActualOrExpected(java.lang.Object)","422":"Subject::::formatActualOrExpected(java.lang.Object)","423":"Subject::::formatActualOrExpected(java.lang.Object)","424":"Subject::::formatActualOrExpected(java.lang.Object)","425":"Subject::::formatActualOrExpected(java.lang.Object)","426":"Subject::::formatActualOrExpected(java.lang.Object)","427":"Subject::::formatActualOrExpected(java.lang.Object)","428":"Subject::::formatActualOrExpected(java.lang.Object)","429":"Subject::::formatActualOrExpected(java.lang.Object)","430":"Subject::::formatActualOrExpected(java.lang.Object)","431":"Subject::::formatActualOrExpected(java.lang.Object)","432":"Subject::::formatActualOrExpected(java.lang.Object)","433":"Subject::::formatActualOrExpected(java.lang.Object)","434":"Subject::::formatActualOrExpected(java.lang.Object)","435":"Subject::::formatActualOrExpected(java.lang.Object)","436":"Subject::::formatActualOrExpected(java.lang.Object)","437":"Subject::::formatActualOrExpected(java.lang.Object)","438":"Subject::::formatActualOrExpected(java.lang.Object)","441":"Subject::::base16(byte[])","442":"Subject::::base16(byte[])","443":"Subject::::base16(byte[])","444":"Subject::::base16(byte[])","445":"Subject::::base16(byte[])","446":"Subject::::base16(byte[])","447":"Subject::::base16(byte[])","451":"Subject::::arrayAsListRecursively(java.lang.Object)","452":"Subject::::arrayAsListRecursively(java.lang.Object)","453":"Subject::::arrayAsListRecursively(java.lang.Object)","454":"Subject::::arrayAsListRecursively(java.lang.Object)","455":"Subject::::arrayAsListRecursively(java.lang.Object)","456":"Subject::::arrayAsListRecursively(java.lang.Object)","457":"Subject::::arrayAsListRecursively(java.lang.Object)","458":"Subject::::arrayAsListRecursively(java.lang.Object)","459":"Subject::::arrayAsListRecursively(java.lang.Object)","460":"Subject::::arrayAsListRecursively(java.lang.Object)","461":"Subject::::arrayAsListRecursively(java.lang.Object)","462":"Subject::::arrayAsListRecursively(java.lang.Object)","463":"Subject::::arrayAsListRecursively(java.lang.Object)","464":"Subject::::arrayAsListRecursively(java.lang.Object)","465":"Subject::::arrayAsListRecursively(java.lang.Object)","466":"Subject::::arrayAsListRecursively(java.lang.Object)","467":"Subject::::arrayAsListRecursively(java.lang.Object)","468":"Subject::::arrayAsListRecursively(java.lang.Object)","469":"Subject::::arrayAsListRecursively(java.lang.Object)","470":"Subject::::arrayAsListRecursively(java.lang.Object)","471":"Subject::::arrayAsListRecursively(java.lang.Object)","472":"Subject::::arrayAsListRecursively(java.lang.Object)","473":"Subject::::arrayAsListRecursively(java.lang.Object)","474":"Subject::::arrayAsListRecursively(java.lang.Object)","485":"Subject.ComparisonResult::::fromEqualsResult(boolean)","486":"Subject.ComparisonResult::::fromEqualsResult(boolean)","487":"Subject.ComparisonResult::::fromEqualsResult(boolean)","490":"Subject.ComparisonResult::::differentWithDescription(com.google.common.truth.Fact[])","491":"Subject.ComparisonResult::::differentWithDescription(com.google.common.truth.Fact[])","492":"Subject.ComparisonResult::::differentWithDescription(com.google.common.truth.Fact[])","495":"Subject.ComparisonResult::::equal()","496":"Subject.ComparisonResult::::equal()","497":"Subject.ComparisonResult::::equal()","500":"Subject.ComparisonResult::::differentNoDescription()","501":"Subject.ComparisonResult::::differentNoDescription()","502":"Subject.ComparisonResult::::differentNoDescription()","514":"Subject.ComparisonResult::::valuesAreEqual()","515":"Subject.ComparisonResult::::valuesAreEqual()","516":"Subject.ComparisonResult::::valuesAreEqual()","518":"Subject.ComparisonResult::::factsOrEmpty()","519":"Subject.ComparisonResult::::factsOrEmpty()","520":"Subject.ComparisonResult::::factsOrEmpty()","523":"Subject.ComparisonResult::::withoutDescription()","524":"Subject.ComparisonResult::::withoutDescription()","525":"Subject.ComparisonResult::::withoutDescription()","533":"Subject::::checkByteArrayEquals(byte[],byte[])","534":"Subject::::checkByteArrayEquals(byte[],byte[])","535":"Subject::::checkByteArrayEquals(byte[],byte[])","536":"Subject::::checkByteArrayEquals(byte[],byte[])","537":"Subject::::checkByteArrayEquals(byte[],byte[])","538":"Subject::::checkByteArrayEquals(byte[],byte[])","539":"Subject::::checkByteArrayEquals(byte[],byte[])","551":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","552":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","553":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","554":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","555":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","556":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","557":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","558":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","559":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","560":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","561":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","562":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","563":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","564":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","565":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","566":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","567":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","568":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","569":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","570":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","571":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","572":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","573":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","574":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","575":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","576":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","577":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","578":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","579":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","580":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","581":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","582":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","583":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","584":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","585":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","586":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","587":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","588":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","589":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","590":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","591":"Subject::::checkArrayEqualsRecursive(java.lang.Object,java.lang.Object,java.lang.String)","593":"Subject::::arrayType(java.lang.Object)","594":"Subject::::arrayType(java.lang.Object)","595":"Subject::::arrayType(java.lang.Object)","596":"Subject::::arrayType(java.lang.Object)","597":"Subject::::arrayType(java.lang.Object)","598":"Subject::::arrayType(java.lang.Object)","599":"Subject::::arrayType(java.lang.Object)","600":"Subject::::arrayType(java.lang.Object)","601":"Subject::::arrayType(java.lang.Object)","602":"Subject::::arrayType(java.lang.Object)","603":"Subject::::arrayType(java.lang.Object)","604":"Subject::::arrayType(java.lang.Object)","605":"Subject::::arrayType(java.lang.Object)","606":"Subject::::arrayType(java.lang.Object)","607":"Subject::::arrayType(java.lang.Object)","608":"Subject::::arrayType(java.lang.Object)","609":"Subject::::arrayType(java.lang.Object)","610":"Subject::::arrayType(java.lang.Object)","611":"Subject::::arrayType(java.lang.Object)","612":"Subject::::arrayType(java.lang.Object)","613":"Subject::::arrayType(java.lang.Object)","615":"Subject::::gwtSafeObjectEquals(java.lang.Object,java.lang.Object)","616":"Subject::::gwtSafeObjectEquals(java.lang.Object,java.lang.Object)","617":"Subject::::gwtSafeObjectEquals(java.lang.Object,java.lang.Object)","618":"Subject::::gwtSafeObjectEquals(java.lang.Object,java.lang.Object)","619":"Subject::::gwtSafeObjectEquals(java.lang.Object,java.lang.Object)","620":"Subject::::gwtSafeObjectEquals(java.lang.Object,java.lang.Object)","621":"Subject::::gwtSafeObjectEquals(java.lang.Object,java.lang.Object)","622":"Subject::::gwtSafeObjectEquals(java.lang.Object,java.lang.Object)","623":"Subject::::gwtSafeObjectEquals(java.lang.Object,java.lang.Object)","625":"Subject::::doubleArrayAsString(double[])","626":"Subject::::doubleArrayAsString(double[])","627":"Subject::::doubleArrayAsString(double[])","628":"Subject::::doubleArrayAsString(double[])","629":"Subject::::doubleArrayAsString(double[])","630":"Subject::::doubleArrayAsString(double[])","631":"Subject::::doubleArrayAsString(double[])","633":"Subject::::floatArrayAsString(float[])","634":"Subject::::floatArrayAsString(float[])","635":"Subject::::floatArrayAsString(float[])","636":"Subject::::floatArrayAsString(float[])","637":"Subject::::floatArrayAsString(float[])","638":"Subject::::floatArrayAsString(float[])","639":"Subject::::floatArrayAsString(float[])","649":"Subject::::check()","650":"Subject::::check()","651":"Subject::::check()","652":"Subject::::check()","682":"Subject::::check(java.lang.String,java.lang.Object[])","683":"Subject::::check(java.lang.String,java.lang.Object[])","684":"Subject::::check(java.lang.String,java.lang.Object[])","688":"Subject::::checkNoNeedToDisplayBothValues(java.lang.String,java.lang.Object[])","689":"Subject::::checkNoNeedToDisplayBothValues(java.lang.String,java.lang.Object[])","690":"Subject::::checkNoNeedToDisplayBothValues(java.lang.String,java.lang.Object[])","691":"Subject::::checkNoNeedToDisplayBothValues(java.lang.String,java.lang.Object[])","693":"Subject::::doCheck(com.google.common.truth.FailureMetadata.OldAndNewValuesAreSimilar,java.lang.String,java.lang.Object[])","694":"Subject::::doCheck(com.google.common.truth.FailureMetadata.OldAndNewValuesAreSimilar,java.lang.String,java.lang.Object[])","695":"Subject::::doCheck(com.google.common.truth.FailureMetadata.OldAndNewValuesAreSimilar,java.lang.String,java.lang.Object[])","696":"Subject::::doCheck(com.google.common.truth.FailureMetadata.OldAndNewValuesAreSimilar,java.lang.String,java.lang.Object[])","697":"Subject::::doCheck(com.google.common.truth.FailureMetadata.OldAndNewValuesAreSimilar,java.lang.String,java.lang.Object[])","698":"Subject::::doCheck(com.google.common.truth.FailureMetadata.OldAndNewValuesAreSimilar,java.lang.String,java.lang.Object[])","699":"Subject::::doCheck(com.google.common.truth.FailureMetadata.OldAndNewValuesAreSimilar,java.lang.String,java.lang.Object[])","700":"Subject::::doCheck(com.google.common.truth.FailureMetadata.OldAndNewValuesAreSimilar,java.lang.String,java.lang.Object[])","710":"Subject::::ignoreCheck()","711":"Subject::::ignoreCheck()","712":"Subject::::ignoreCheck()","729":"Subject::::failWithActual(java.lang.String,java.lang.Object)","730":"Subject::::failWithActual(java.lang.String,java.lang.Object)","731":"Subject::::failWithActual(java.lang.String,java.lang.Object)","747":"Subject::::failWithActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])","748":"Subject::::failWithActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])","749":"Subject::::failWithActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])","752":"Subject::::failWithActual(java.lang.Iterable<com.google.common.truth.Fact>)","753":"Subject::::failWithActual(java.lang.Iterable<com.google.common.truth.Fact>)","754":"Subject::::failWithActual(java.lang.Iterable<com.google.common.truth.Fact>)","766":"Subject::::fail(java.lang.String)","767":"Subject::::fail(java.lang.String)","768":"Subject::::fail(java.lang.String)","769":"Subject::::fail(java.lang.String)","781":"Subject::::fail(java.lang.String,java.lang.Object)","782":"Subject::::fail(java.lang.String,java.lang.Object)","783":"Subject::::fail(java.lang.String,java.lang.Object)","784":"Subject::::fail(java.lang.String,java.lang.Object)","795":"Subject::::fail(java.lang.String,java.lang.Object[])","796":"Subject::::fail(java.lang.String,java.lang.Object[])","797":"Subject::::fail(java.lang.String,java.lang.Object[])","798":"Subject::::fail(java.lang.String,java.lang.Object[])","799":"Subject::::fail(java.lang.String,java.lang.Object[])","800":"Subject::::fail(java.lang.String,java.lang.Object[])","801":"Subject::::fail(java.lang.String,java.lang.Object[])","802":"Subject::::fail(java.lang.String,java.lang.Object[])","803":"Subject::::fail(java.lang.String,java.lang.Object[])","820":"Subject::::failEqualityCheckForEqualsWithoutDescription(java.lang.Object)","821":"Subject::::failEqualityCheckForEqualsWithoutDescription(java.lang.Object)","822":"Subject::::failEqualityCheckForEqualsWithoutDescription(java.lang.Object)","824":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","825":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","826":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","827":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","828":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","829":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","830":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","831":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","832":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","833":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","834":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","835":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","836":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","837":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","838":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","839":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","840":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","841":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","842":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","843":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","844":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","845":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","846":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","847":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","848":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","849":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","850":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","851":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","852":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","853":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","854":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","855":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","856":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","857":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","858":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","859":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","860":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","861":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","862":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","863":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","864":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","865":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","866":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","867":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","868":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","869":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","870":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","871":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","872":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","873":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","874":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","875":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","876":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","877":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","878":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","879":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","880":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","881":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","882":"Subject::::failEqualityCheck(com.google.common.truth.Subject.EqualityCheck,java.lang.Object,com.google.common.truth.Subject.ComparisonResult)","888":"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)","889":"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)","890":"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)","891":"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)","892":"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)","893":"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)","894":"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)","895":"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)","896":"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)","897":"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)","898":"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)","899":"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)","900":"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)","901":"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)","902":"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)","903":"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)","904":"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)","905":"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)","906":"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)","907":"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)","908":"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)","909":"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)","910":"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)","911":"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)","912":"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)","913":"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)","914":"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)","915":"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)","916":"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)","917":"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)","918":"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)","919":"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)","920":"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)","921":"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)","922":"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)","923":"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)","924":"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)","925":"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)","926":"Subject::::tryFailForTrailingWhitespaceOnly(java.lang.Object)","928":"Subject::::escapeWhitespace(java.lang.String)","929":"Subject::::escapeWhitespace(java.lang.String)","930":"Subject::::escapeWhitespace(java.lang.String)","931":"Subject::::escapeWhitespace(java.lang.String)","932":"Subject::::escapeWhitespace(java.lang.String)","933":"Subject::::escapeWhitespace(java.lang.String)","934":"Subject::::escapeWhitespace(java.lang.String)","936":"Subject::::escapeWhitespace(char)","937":"Subject::::escapeWhitespace(char)","938":"Subject::::escapeWhitespace(char)","939":"Subject::::escapeWhitespace(char)","940":"Subject::::escapeWhitespace(char)","941":"Subject::::escapeWhitespace(char)","942":"Subject::::escapeWhitespace(char)","943":"Subject::::escapeWhitespace(char)","944":"Subject::::escapeWhitespace(char)","945":"Subject::::escapeWhitespace(char)","946":"Subject::::escapeWhitespace(char)","947":"Subject::::escapeWhitespace(char)","948":"Subject::::escapeWhitespace(char)","949":"Subject::::escapeWhitespace(char)","950":"Subject::::escapeWhitespace(char)","951":"Subject::::escapeWhitespace(char)","957":"Subject::::tryFailForEmptyString(java.lang.Object)","958":"Subject::::tryFailForEmptyString(java.lang.Object)","959":"Subject::::tryFailForEmptyString(java.lang.Object)","960":"Subject::::tryFailForEmptyString(java.lang.Object)","961":"Subject::::tryFailForEmptyString(java.lang.Object)","962":"Subject::::tryFailForEmptyString(java.lang.Object)","963":"Subject::::tryFailForEmptyString(java.lang.Object)","964":"Subject::::tryFailForEmptyString(java.lang.Object)","965":"Subject::::tryFailForEmptyString(java.lang.Object)","966":"Subject::::tryFailForEmptyString(java.lang.Object)","967":"Subject::::tryFailForEmptyString(java.lang.Object)","968":"Subject::::tryFailForEmptyString(java.lang.Object)","969":"Subject::::tryFailForEmptyString(java.lang.Object)","970":"Subject::::tryFailForEmptyString(java.lang.Object)","971":"Subject::::tryFailForEmptyString(java.lang.Object)","972":"Subject::::tryFailForEmptyString(java.lang.Object)","973":"Subject::::tryFailForEmptyString(java.lang.Object)","974":"Subject::::tryFailForEmptyString(java.lang.Object)","980":"Subject::::asUnicodeHexEscape(char)","981":"Subject::::asUnicodeHexEscape(char)","982":"Subject::::asUnicodeHexEscape(char)","983":"Subject::::asUnicodeHexEscape(char)","984":"Subject::::asUnicodeHexEscape(char)","985":"Subject::::asUnicodeHexEscape(char)","986":"Subject::::asUnicodeHexEscape(char)","987":"Subject::::asUnicodeHexEscape(char)","988":"Subject::::asUnicodeHexEscape(char)","989":"Subject::::asUnicodeHexEscape(char)","990":"Subject::::asUnicodeHexEscape(char)","991":"Subject::::asUnicodeHexEscape(char)","992":"Subject::::asUnicodeHexEscape(char)","993":"Subject::::asUnicodeHexEscape(char)","995":"Subject::::failEqualityCheckNoComparisonFailure(com.google.common.truth.Subject.ComparisonResult,com.google.common.truth.Fact[])","996":"Subject::::failEqualityCheckNoComparisonFailure(com.google.common.truth.Subject.ComparisonResult,com.google.common.truth.Fact[])","997":"Subject::::failEqualityCheckNoComparisonFailure(com.google.common.truth.Subject.ComparisonResult,com.google.common.truth.Fact[])","998":"Subject::::failEqualityCheckNoComparisonFailure(com.google.common.truth.Subject.ComparisonResult,com.google.common.truth.Fact[])","1011":"Subject::::failWithBadResults(java.lang.String,java.lang.Object,java.lang.String,java.lang.Object)","1012":"Subject::::failWithBadResults(java.lang.String,java.lang.Object,java.lang.String,java.lang.Object)","1013":"Subject::::failWithBadResults(java.lang.String,java.lang.Object,java.lang.String,java.lang.Object)","1014":"Subject::::failWithBadResults(java.lang.String,java.lang.Object,java.lang.String,java.lang.Object)","1015":"Subject::::failWithBadResults(java.lang.String,java.lang.Object,java.lang.String,java.lang.Object)","1016":"Subject::::failWithBadResults(java.lang.String,java.lang.Object,java.lang.String,java.lang.Object)","1017":"Subject::::failWithBadResults(java.lang.String,java.lang.Object,java.lang.String,java.lang.Object)","1018":"Subject::::failWithBadResults(java.lang.String,java.lang.Object,java.lang.String,java.lang.Object)","1019":"Subject::::failWithBadResults(java.lang.String,java.lang.Object,java.lang.String,java.lang.Object)","1020":"Subject::::failWithBadResults(java.lang.String,java.lang.Object,java.lang.String,java.lang.Object)","1021":"Subject::::failWithBadResults(java.lang.String,java.lang.Object,java.lang.String,java.lang.Object)","1022":"Subject::::failWithBadResults(java.lang.String,java.lang.Object,java.lang.String,java.lang.Object)","1035":"Subject::::failWithCustomSubject(java.lang.String,java.lang.Object,java.lang.Object)","1036":"Subject::::failWithCustomSubject(java.lang.String,java.lang.Object,java.lang.Object)","1037":"Subject::::failWithCustomSubject(java.lang.String,java.lang.Object,java.lang.Object)","1038":"Subject::::failWithCustomSubject(java.lang.String,java.lang.Object,java.lang.Object)","1039":"Subject::::failWithCustomSubject(java.lang.String,java.lang.Object,java.lang.Object)","1040":"Subject::::failWithCustomSubject(java.lang.String,java.lang.Object,java.lang.Object)","1041":"Subject::::failWithCustomSubject(java.lang.String,java.lang.Object,java.lang.Object)","1042":"Subject::::failWithCustomSubject(java.lang.String,java.lang.Object,java.lang.Object)","1050":"Subject::::failWithoutSubject(java.lang.String)","1051":"Subject::::failWithoutSubject(java.lang.String)","1052":"Subject::::failWithoutSubject(java.lang.String)","1053":"Subject::::failWithoutSubject(java.lang.String)","1075":"Subject::::failWithoutActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])","1076":"Subject::::failWithoutActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])","1077":"Subject::::failWithoutActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])","1080":"Subject::::failWithoutActual(java.lang.Iterable<com.google.common.truth.Fact>)","1081":"Subject::::failWithoutActual(java.lang.Iterable<com.google.common.truth.Fact>)","1082":"Subject::::failWithoutActual(java.lang.Iterable<com.google.common.truth.Fact>)","1094":"Subject::::failWithoutActual(java.lang.String)","1095":"Subject::::failWithoutActual(java.lang.String)","1096":"Subject::::failWithoutActual(java.lang.String)","1097":"Subject::::failWithoutActual(java.lang.String)","1104":"Subject::::equals(java.lang.Object)","1105":"Subject::::equals(java.lang.Object)","1106":"Subject::::equals(java.lang.Object)","1107":"Subject::::equals(java.lang.Object)","1108":"Subject::::equals(java.lang.Object)","1109":"Subject::::equals(java.lang.Object)","1110":"Subject::::equals(java.lang.Object)","1111":"Subject::::equals(java.lang.Object)","1112":"Subject::::equals(java.lang.Object)","1113":"Subject::::equals(java.lang.Object)","1114":"Subject::::equals(java.lang.Object)","1115":"Subject::::equals(java.lang.Object)","1121":"Subject::::hashCode()","1122":"Subject::::hashCode()","1123":"Subject::::hashCode()","1124":"Subject::::hashCode()","1125":"Subject::::hashCode()","1126":"Subject::::hashCode()","1132":"Subject::::toString()","1133":"Subject::::toString()","1134":"Subject::::toString()","1135":"Subject::::toString()","1136":"Subject::::toString()","1137":"Subject::::toString()","1138":"Subject::::toString()","1139":"Subject::::toString()","1157":"Subject::::butWas()","1158":"Subject::::butWas()","1159":"Subject::::butWas()","1165":"Subject::::typeDescription()","1166":"Subject::::typeDescription()","1167":"Subject::::typeDescription()","1169":"Subject::::typeDescriptionOrGuess(java.lang.Class<? extends com.google.common.truth.Subject>,java.lang.String)","1170":"Subject::::typeDescriptionOrGuess(java.lang.Class<? extends com.google.common.truth.Subject>,java.lang.String)","1171":"Subject::::typeDescriptionOrGuess(java.lang.Class<? extends com.google.common.truth.Subject>,java.lang.String)","1172":"Subject::::typeDescriptionOrGuess(java.lang.Class<? extends com.google.common.truth.Subject>,java.lang.String)","1173":"Subject::::typeDescriptionOrGuess(java.lang.Class<? extends com.google.common.truth.Subject>,java.lang.String)","1174":"Subject::::typeDescriptionOrGuess(java.lang.Class<? extends com.google.common.truth.Subject>,java.lang.String)","1175":"Subject::::typeDescriptionOrGuess(java.lang.Class<? extends com.google.common.truth.Subject>,java.lang.String)","1176":"Subject::::typeDescriptionOrGuess(java.lang.Class<? extends com.google.common.truth.Subject>,java.lang.String)","1177":"Subject::::typeDescriptionOrGuess(java.lang.Class<? extends com.google.common.truth.Subject>,java.lang.String)","1178":"Subject::::typeDescriptionOrGuess(java.lang.Class<? extends com.google.common.truth.Subject>,java.lang.String)","1179":"Subject::::typeDescriptionOrGuess(java.lang.Class<? extends com.google.common.truth.Subject>,java.lang.String)","1180":"Subject::::typeDescriptionOrGuess(java.lang.Class<? extends com.google.common.truth.Subject>,java.lang.String)","1181":"Subject::::typeDescriptionOrGuess(java.lang.Class<? extends com.google.common.truth.Subject>,java.lang.String)","1182":"Subject::::typeDescriptionOrGuess(java.lang.Class<? extends com.google.common.truth.Subject>,java.lang.String)","1183":"Subject::::typeDescriptionOrGuess(java.lang.Class<? extends com.google.common.truth.Subject>,java.lang.String)","1184":"Subject::::typeDescriptionOrGuess(java.lang.Class<? extends com.google.common.truth.Subject>,java.lang.String)","1185":"Subject::::typeDescriptionOrGuess(java.lang.Class<? extends com.google.common.truth.Subject>,java.lang.String)","1186":"Subject::::typeDescriptionOrGuess(java.lang.Class<? extends com.google.common.truth.Subject>,java.lang.String)"},"test_reverse_method_lines_dic":{"59":"SubjectTest::::nullPointerTester()","60":"SubjectTest::::nullPointerTester()","61":"SubjectTest::::nullPointerTester()","62":"SubjectTest::::nullPointerTester()","63":"SubjectTest::::nullPointerTester()","64":"SubjectTest::::nullPointerTester()","65":"SubjectTest::::nullPointerTester()","66":"SubjectTest::::nullPointerTester()","67":"SubjectTest::::nullPointerTester()","68":"SubjectTest::::nullPointerTester()","69":"SubjectTest::::nullPointerTester()","70":"SubjectTest::::nullPointerTester()","71":"SubjectTest::::nullPointerTester()","72":"SubjectTest::::nullPointerTester()","73":"SubjectTest::::nullPointerTester()","74":"SubjectTest::::nullPointerTester()","75":"SubjectTest::::nullPointerTester()","76":"SubjectTest::::nullPointerTester()","77":"SubjectTest::::nullPointerTester()","78":"SubjectTest::::nullPointerTester()","79":"SubjectTest::::nullPointerTester()","80":"SubjectTest::::nullPointerTester()","81":"SubjectTest::::nullPointerTester()","82":"SubjectTest::::nullPointerTester()","83":"SubjectTest::::nullPointerTester()","84":"SubjectTest::::nullPointerTester()","85":"SubjectTest::::nullPointerTester()","86":"SubjectTest::::nullPointerTester()","87":"SubjectTest::::nullPointerTester()","88":"SubjectTest::::nullPointerTester()","89":"SubjectTest::::nullPointerTester()","90":"SubjectTest::::nullPointerTester()","91":"SubjectTest::::nullPointerTester()","92":"SubjectTest::::nullPointerTester()","93":"SubjectTest::::nullPointerTester()","94":"SubjectTest::::nullPointerTester()","95":"SubjectTest::::nullPointerTester()","96":"SubjectTest::::nullPointerTester()","97":"SubjectTest::::nullPointerTester()","99":"SubjectTest::::allAssertThatOverloadsAcceptNull()","100":"SubjectTest::::allAssertThatOverloadsAcceptNull()","101":"SubjectTest::::allAssertThatOverloadsAcceptNull()","102":"SubjectTest::::allAssertThatOverloadsAcceptNull()","103":"SubjectTest::::allAssertThatOverloadsAcceptNull()","104":"SubjectTest::::allAssertThatOverloadsAcceptNull()","105":"SubjectTest::::allAssertThatOverloadsAcceptNull()","106":"SubjectTest::::allAssertThatOverloadsAcceptNull()","107":"SubjectTest::::allAssertThatOverloadsAcceptNull()","108":"SubjectTest::::allAssertThatOverloadsAcceptNull()","109":"SubjectTest::::allAssertThatOverloadsAcceptNull()","110":"SubjectTest::::allAssertThatOverloadsAcceptNull()","111":"SubjectTest::::allAssertThatOverloadsAcceptNull()","112":"SubjectTest::::allAssertThatOverloadsAcceptNull()","113":"SubjectTest::::allAssertThatOverloadsAcceptNull()","114":"SubjectTest::::allAssertThatOverloadsAcceptNull()","115":"SubjectTest::::allAssertThatOverloadsAcceptNull()","116":"SubjectTest::::allAssertThatOverloadsAcceptNull()","117":"SubjectTest::::allAssertThatOverloadsAcceptNull()","118":"SubjectTest::::allAssertThatOverloadsAcceptNull()","119":"SubjectTest::::allAssertThatOverloadsAcceptNull()","120":"SubjectTest::::allAssertThatOverloadsAcceptNull()","121":"SubjectTest::::allAssertThatOverloadsAcceptNull()","122":"SubjectTest::::allAssertThatOverloadsAcceptNull()","123":"SubjectTest::::allAssertThatOverloadsAcceptNull()","124":"SubjectTest::::allAssertThatOverloadsAcceptNull()","125":"SubjectTest::::allAssertThatOverloadsAcceptNull()","126":"SubjectTest::::allAssertThatOverloadsAcceptNull()","127":"SubjectTest::::allAssertThatOverloadsAcceptNull()","128":"SubjectTest::::allAssertThatOverloadsAcceptNull()","129":"SubjectTest::::allAssertThatOverloadsAcceptNull()","130":"SubjectTest::::allAssertThatOverloadsAcceptNull()","131":"SubjectTest::::allAssertThatOverloadsAcceptNull()","132":"SubjectTest::::allAssertThatOverloadsAcceptNull()","133":"SubjectTest::::allAssertThatOverloadsAcceptNull()","134":"SubjectTest::::allAssertThatOverloadsAcceptNull()","135":"SubjectTest::::allAssertThatOverloadsAcceptNull()","136":"SubjectTest::::allAssertThatOverloadsAcceptNull()","137":"SubjectTest::::allAssertThatOverloadsAcceptNull()","138":"SubjectTest::::allAssertThatOverloadsAcceptNull()","139":"SubjectTest::::allAssertThatOverloadsAcceptNull()","140":"SubjectTest::::allAssertThatOverloadsAcceptNull()","141":"SubjectTest::::allAssertThatOverloadsAcceptNull()","142":"SubjectTest::::allAssertThatOverloadsAcceptNull()","143":"SubjectTest::::allAssertThatOverloadsAcceptNull()","144":"SubjectTest::::allAssertThatOverloadsAcceptNull()","145":"SubjectTest::::allAssertThatOverloadsAcceptNull()","146":"SubjectTest::::allAssertThatOverloadsAcceptNull()","147":"SubjectTest::::allAssertThatOverloadsAcceptNull()","148":"SubjectTest::::allAssertThatOverloadsAcceptNull()","149":"SubjectTest::::allAssertThatOverloadsAcceptNull()","150":"SubjectTest::::allAssertThatOverloadsAcceptNull()","151":"SubjectTest::::allAssertThatOverloadsAcceptNull()","152":"SubjectTest::::allAssertThatOverloadsAcceptNull()","153":"SubjectTest::::allAssertThatOverloadsAcceptNull()","154":"SubjectTest::::allAssertThatOverloadsAcceptNull()","155":"SubjectTest::::allAssertThatOverloadsAcceptNull()","156":"SubjectTest::::allAssertThatOverloadsAcceptNull()","157":"SubjectTest::::allAssertThatOverloadsAcceptNull()","158":"SubjectTest::::allAssertThatOverloadsAcceptNull()","159":"SubjectTest::::allAssertThatOverloadsAcceptNull()","160":"SubjectTest::::allAssertThatOverloadsAcceptNull()","161":"SubjectTest::::allAssertThatOverloadsAcceptNull()","172":"SubjectTest::::toString()","173":"SubjectTest::::toString()","174":"SubjectTest::::toString()","175":"SubjectTest::::toString()","178":"SubjectTest::::toStringsAreIdentical()","179":"SubjectTest::::toStringsAreIdentical()","180":"SubjectTest::::toStringsAreIdentical()","181":"SubjectTest::::toStringsAreIdentical()","182":"SubjectTest::::toStringsAreIdentical()","183":"SubjectTest::::toStringsAreIdentical()","184":"SubjectTest::::toStringsAreIdentical()","185":"SubjectTest::::toStringsAreIdentical()","186":"SubjectTest::::toStringsAreIdentical()","187":"SubjectTest::::toStringsAreIdentical()","188":"SubjectTest::::toStringsAreIdentical()","189":"SubjectTest::::toStringsAreIdentical()","190":"SubjectTest::::toStringsAreIdentical()","195":"SubjectTest.IntWrapper::::toString()","196":"SubjectTest.IntWrapper::::toString()","197":"SubjectTest.IntWrapper::::toString()","198":"SubjectTest.IntWrapper::::toString()","201":"SubjectTest::::isSameInstanceAsWithNulls()","202":"SubjectTest::::isSameInstanceAsWithNulls()","203":"SubjectTest::::isSameInstanceAsWithNulls()","204":"SubjectTest::::isSameInstanceAsWithNulls()","205":"SubjectTest::::isSameInstanceAsWithNulls()","207":"SubjectTest::::isSameInstanceAsFailureWithNulls()","208":"SubjectTest::::isSameInstanceAsFailureWithNulls()","209":"SubjectTest::::isSameInstanceAsFailureWithNulls()","210":"SubjectTest::::isSameInstanceAsFailureWithNulls()","211":"SubjectTest::::isSameInstanceAsFailureWithNulls()","212":"SubjectTest::::isSameInstanceAsFailureWithNulls()","213":"SubjectTest::::isSameInstanceAsFailureWithNulls()","215":"SubjectTest::::isSameInstanceAsWithSameObject()","216":"SubjectTest::::isSameInstanceAsWithSameObject()","217":"SubjectTest::::isSameInstanceAsWithSameObject()","218":"SubjectTest::::isSameInstanceAsWithSameObject()","219":"SubjectTest::::isSameInstanceAsWithSameObject()","220":"SubjectTest::::isSameInstanceAsWithSameObject()","222":"SubjectTest::::isSameInstanceAsFailureWithObjects()","223":"SubjectTest::::isSameInstanceAsFailureWithObjects()","224":"SubjectTest::::isSameInstanceAsFailureWithObjects()","225":"SubjectTest::::isSameInstanceAsFailureWithObjects()","226":"SubjectTest::::isSameInstanceAsFailureWithObjects()","227":"SubjectTest::::isSameInstanceAsFailureWithObjects()","228":"SubjectTest::::isSameInstanceAsFailureWithObjects()","230":"SubjectTest::::isSameInstanceAsFailureWithComparableObjects_nonString()","231":"SubjectTest::::isSameInstanceAsFailureWithComparableObjects_nonString()","232":"SubjectTest::::isSameInstanceAsFailureWithComparableObjects_nonString()","233":"SubjectTest::::isSameInstanceAsFailureWithComparableObjects_nonString()","234":"SubjectTest::::isSameInstanceAsFailureWithComparableObjects_nonString()","235":"SubjectTest::::isSameInstanceAsFailureWithComparableObjects_nonString()","236":"SubjectTest::::isSameInstanceAsFailureWithComparableObjects_nonString()","237":"SubjectTest::::isSameInstanceAsFailureWithComparableObjects_nonString()","238":"SubjectTest::::isSameInstanceAsFailureWithComparableObjects_nonString()","239":"SubjectTest::::isSameInstanceAsFailureWithComparableObjects_nonString()","241":"SubjectTest::::isSameInstanceAsFailureWithComparableObjects()","242":"SubjectTest::::isSameInstanceAsFailureWithComparableObjects()","243":"SubjectTest::::isSameInstanceAsFailureWithComparableObjects()","244":"SubjectTest::::isSameInstanceAsFailureWithComparableObjects()","245":"SubjectTest::::isSameInstanceAsFailureWithComparableObjects()","246":"SubjectTest::::isSameInstanceAsFailureWithComparableObjects()","247":"SubjectTest::::isSameInstanceAsFailureWithComparableObjects()","249":"SubjectTest::::isSameInstanceAsFailureWithDifferentTypesAndSameToString()","250":"SubjectTest::::isSameInstanceAsFailureWithDifferentTypesAndSameToString()","251":"SubjectTest::::isSameInstanceAsFailureWithDifferentTypesAndSameToString()","252":"SubjectTest::::isSameInstanceAsFailureWithDifferentTypesAndSameToString()","253":"SubjectTest::::isSameInstanceAsFailureWithDifferentTypesAndSameToString()","254":"SubjectTest::::isSameInstanceAsFailureWithDifferentTypesAndSameToString()","255":"SubjectTest::::isSameInstanceAsFailureWithDifferentTypesAndSameToString()","256":"SubjectTest::::isSameInstanceAsFailureWithDifferentTypesAndSameToString()","257":"SubjectTest::::isSameInstanceAsFailureWithDifferentTypesAndSameToString()","258":"SubjectTest::::isSameInstanceAsFailureWithDifferentTypesAndSameToString()","259":"SubjectTest::::isSameInstanceAsFailureWithDifferentTypesAndSameToString()","261":"SubjectTest::::isNotSameInstanceAsWithNulls()","262":"SubjectTest::::isNotSameInstanceAsWithNulls()","263":"SubjectTest::::isNotSameInstanceAsWithNulls()","264":"SubjectTest::::isNotSameInstanceAsWithNulls()","265":"SubjectTest::::isNotSameInstanceAsWithNulls()","267":"SubjectTest::::isNotSameInstanceAsFailureWithNulls()","268":"SubjectTest::::isNotSameInstanceAsFailureWithNulls()","269":"SubjectTest::::isNotSameInstanceAsFailureWithNulls()","270":"SubjectTest::::isNotSameInstanceAsFailureWithNulls()","271":"SubjectTest::::isNotSameInstanceAsFailureWithNulls()","272":"SubjectTest::::isNotSameInstanceAsFailureWithNulls()","273":"SubjectTest::::isNotSameInstanceAsFailureWithNulls()","275":"SubjectTest::::isNotSameInstanceAsWithObjects()","276":"SubjectTest::::isNotSameInstanceAsWithObjects()","277":"SubjectTest::::isNotSameInstanceAsWithObjects()","278":"SubjectTest::::isNotSameInstanceAsWithObjects()","279":"SubjectTest::::isNotSameInstanceAsWithObjects()","280":"SubjectTest::::isNotSameInstanceAsWithObjects()","282":"SubjectTest::::isNotSameInstanceAsFailureWithSameObject()","283":"SubjectTest::::isNotSameInstanceAsFailureWithSameObject()","284":"SubjectTest::::isNotSameInstanceAsFailureWithSameObject()","285":"SubjectTest::::isNotSameInstanceAsFailureWithSameObject()","286":"SubjectTest::::isNotSameInstanceAsFailureWithSameObject()","287":"SubjectTest::::isNotSameInstanceAsFailureWithSameObject()","288":"SubjectTest::::isNotSameInstanceAsFailureWithSameObject()","289":"SubjectTest::::isNotSameInstanceAsFailureWithSameObject()","291":"SubjectTest::::isNotSameInstanceAsWithComparableObjects_nonString()","292":"SubjectTest::::isNotSameInstanceAsWithComparableObjects_nonString()","293":"SubjectTest::::isNotSameInstanceAsWithComparableObjects_nonString()","294":"SubjectTest::::isNotSameInstanceAsWithComparableObjects_nonString()","295":"SubjectTest::::isNotSameInstanceAsWithComparableObjects_nonString()","296":"SubjectTest::::isNotSameInstanceAsWithComparableObjects_nonString()","298":"SubjectTest::::isNotSameInstanceAsWithComparableObjects()","299":"SubjectTest::::isNotSameInstanceAsWithComparableObjects()","300":"SubjectTest::::isNotSameInstanceAsWithComparableObjects()","301":"SubjectTest::::isNotSameInstanceAsWithComparableObjects()","302":"SubjectTest::::isNotSameInstanceAsWithComparableObjects()","303":"SubjectTest::::isNotSameInstanceAsWithComparableObjects()","304":"SubjectTest::::isNotSameInstanceAsWithComparableObjects()","306":"SubjectTest::::isNotSameInstanceAsWithDifferentTypesAndSameToString()","307":"SubjectTest::::isNotSameInstanceAsWithDifferentTypesAndSameToString()","308":"SubjectTest::::isNotSameInstanceAsWithDifferentTypesAndSameToString()","309":"SubjectTest::::isNotSameInstanceAsWithDifferentTypesAndSameToString()","310":"SubjectTest::::isNotSameInstanceAsWithDifferentTypesAndSameToString()","311":"SubjectTest::::isNotSameInstanceAsWithDifferentTypesAndSameToString()","313":"SubjectTest::::isNull()","314":"SubjectTest::::isNull()","315":"SubjectTest::::isNull()","316":"SubjectTest::::isNull()","317":"SubjectTest::::isNull()","319":"SubjectTest::::isNullFail()","320":"SubjectTest::::isNullFail()","321":"SubjectTest::::isNullFail()","322":"SubjectTest::::isNullFail()","323":"SubjectTest::::isNullFail()","324":"SubjectTest::::isNullFail()","325":"SubjectTest::::isNullFail()","327":"SubjectTest::::isNullWhenSubjectForbidsIsEqualTo()","328":"SubjectTest::::isNullWhenSubjectForbidsIsEqualTo()","329":"SubjectTest::::isNullWhenSubjectForbidsIsEqualTo()","330":"SubjectTest::::isNullWhenSubjectForbidsIsEqualTo()","332":"SubjectTest::::isNullWhenSubjectForbidsIsEqualToFail()","333":"SubjectTest::::isNullWhenSubjectForbidsIsEqualToFail()","334":"SubjectTest::::isNullWhenSubjectForbidsIsEqualToFail()","335":"SubjectTest::::isNullWhenSubjectForbidsIsEqualToFail()","337":"SubjectTest::::stringIsNullFail()","338":"SubjectTest::::stringIsNullFail()","339":"SubjectTest::::stringIsNullFail()","340":"SubjectTest::::stringIsNullFail()","342":"SubjectTest::::isNullBadEqualsImplementation()","343":"SubjectTest::::isNullBadEqualsImplementation()","344":"SubjectTest::::isNullBadEqualsImplementation()","345":"SubjectTest::::isNullBadEqualsImplementation()","347":"SubjectTest::::isNotNull()","348":"SubjectTest::::isNotNull()","349":"SubjectTest::::isNotNull()","350":"SubjectTest::::isNotNull()","351":"SubjectTest::::isNotNull()","353":"SubjectTest::::isNotNullFail()","354":"SubjectTest::::isNotNullFail()","355":"SubjectTest::::isNotNullFail()","356":"SubjectTest::::isNotNullFail()","357":"SubjectTest::::isNotNullFail()","358":"SubjectTest::::isNotNullFail()","359":"SubjectTest::::isNotNullFail()","361":"SubjectTest::::isNotNullBadEqualsImplementation()","362":"SubjectTest::::isNotNullBadEqualsImplementation()","363":"SubjectTest::::isNotNullBadEqualsImplementation()","364":"SubjectTest::::isNotNullBadEqualsImplementation()","366":"SubjectTest::::isNotNullWhenSubjectForbidsIsEqualTo()","367":"SubjectTest::::isNotNullWhenSubjectForbidsIsEqualTo()","368":"SubjectTest::::isNotNullWhenSubjectForbidsIsEqualTo()","369":"SubjectTest::::isNotNullWhenSubjectForbidsIsEqualTo()","371":"SubjectTest::::isNotNullWhenSubjectForbidsIsEqualToFail()","372":"SubjectTest::::isNotNullWhenSubjectForbidsIsEqualToFail()","373":"SubjectTest::::isNotNullWhenSubjectForbidsIsEqualToFail()","374":"SubjectTest::::isNotNullWhenSubjectForbidsIsEqualToFail()","376":"SubjectTest::::isEqualToWithNulls()","377":"SubjectTest::::isEqualToWithNulls()","378":"SubjectTest::::isEqualToWithNulls()","379":"SubjectTest::::isEqualToWithNulls()","380":"SubjectTest::::isEqualToWithNulls()","382":"SubjectTest::::isEqualToFailureWithNulls()","383":"SubjectTest::::isEqualToFailureWithNulls()","384":"SubjectTest::::isEqualToFailureWithNulls()","385":"SubjectTest::::isEqualToFailureWithNulls()","386":"SubjectTest::::isEqualToFailureWithNulls()","387":"SubjectTest::::isEqualToFailureWithNulls()","388":"SubjectTest::::isEqualToFailureWithNulls()","389":"SubjectTest::::isEqualToFailureWithNulls()","391":"SubjectTest::::isEqualToStringWithNullVsNull()","392":"SubjectTest::::isEqualToStringWithNullVsNull()","393":"SubjectTest::::isEqualToStringWithNullVsNull()","394":"SubjectTest::::isEqualToStringWithNullVsNull()","395":"SubjectTest::::isEqualToStringWithNullVsNull()","396":"SubjectTest::::isEqualToStringWithNullVsNull()","397":"SubjectTest::::isEqualToStringWithNullVsNull()","398":"SubjectTest::::isEqualToStringWithNullVsNull()","399":"SubjectTest::::isEqualToStringWithNullVsNull()","401":"SubjectTest::::isEqualToWithSameObject()","402":"SubjectTest::::isEqualToWithSameObject()","403":"SubjectTest::::isEqualToWithSameObject()","404":"SubjectTest::::isEqualToWithSameObject()","405":"SubjectTest::::isEqualToWithSameObject()","406":"SubjectTest::::isEqualToWithSameObject()","408":"SubjectTest::::isEqualToFailureWithObjects()","409":"SubjectTest::::isEqualToFailureWithObjects()","410":"SubjectTest::::isEqualToFailureWithObjects()","411":"SubjectTest::::isEqualToFailureWithObjects()","412":"SubjectTest::::isEqualToFailureWithObjects()","413":"SubjectTest::::isEqualToFailureWithObjects()","414":"SubjectTest::::isEqualToFailureWithObjects()","415":"SubjectTest::::isEqualToFailureWithObjects()","416":"SubjectTest::::isEqualToFailureWithObjects()","418":"SubjectTest::::isEqualToFailureWithDifferentTypesAndSameToString()","419":"SubjectTest::::isEqualToFailureWithDifferentTypesAndSameToString()","420":"SubjectTest::::isEqualToFailureWithDifferentTypesAndSameToString()","421":"SubjectTest::::isEqualToFailureWithDifferentTypesAndSameToString()","422":"SubjectTest::::isEqualToFailureWithDifferentTypesAndSameToString()","423":"SubjectTest::::isEqualToFailureWithDifferentTypesAndSameToString()","424":"SubjectTest::::isEqualToFailureWithDifferentTypesAndSameToString()","425":"SubjectTest::::isEqualToFailureWithDifferentTypesAndSameToString()","426":"SubjectTest::::isEqualToFailureWithDifferentTypesAndSameToString()","427":"SubjectTest::::isEqualToFailureWithDifferentTypesAndSameToString()","428":"SubjectTest::::isEqualToFailureWithDifferentTypesAndSameToString()","430":"SubjectTest::::isEqualToNullBadEqualsImplementation()","431":"SubjectTest::::isEqualToNullBadEqualsImplementation()","432":"SubjectTest::::isEqualToNullBadEqualsImplementation()","433":"SubjectTest::::isEqualToNullBadEqualsImplementation()","435":"SubjectTest::::isEqualToSameInstanceBadEqualsImplementation()","436":"SubjectTest::::isEqualToSameInstanceBadEqualsImplementation()","437":"SubjectTest::::isEqualToSameInstanceBadEqualsImplementation()","438":"SubjectTest::::isEqualToSameInstanceBadEqualsImplementation()","439":"SubjectTest::::isEqualToSameInstanceBadEqualsImplementation()","440":"SubjectTest::::isEqualToSameInstanceBadEqualsImplementation()","442":"SubjectTest::::isNotEqualToWithNulls()","443":"SubjectTest::::isNotEqualToWithNulls()","444":"SubjectTest::::isNotEqualToWithNulls()","445":"SubjectTest::::isNotEqualToWithNulls()","446":"SubjectTest::::isNotEqualToWithNulls()","448":"SubjectTest::::isNotEqualToFailureWithNulls()","449":"SubjectTest::::isNotEqualToFailureWithNulls()","450":"SubjectTest::::isNotEqualToFailureWithNulls()","451":"SubjectTest::::isNotEqualToFailureWithNulls()","452":"SubjectTest::::isNotEqualToFailureWithNulls()","453":"SubjectTest::::isNotEqualToFailureWithNulls()","454":"SubjectTest::::isNotEqualToFailureWithNulls()","456":"SubjectTest::::isNotEqualToWithObjects()","457":"SubjectTest::::isNotEqualToWithObjects()","458":"SubjectTest::::isNotEqualToWithObjects()","459":"SubjectTest::::isNotEqualToWithObjects()","460":"SubjectTest::::isNotEqualToWithObjects()","461":"SubjectTest::::isNotEqualToWithObjects()","463":"SubjectTest::::isNotEqualToFailureWithObjects()","464":"SubjectTest::::isNotEqualToFailureWithObjects()","465":"SubjectTest::::isNotEqualToFailureWithObjects()","466":"SubjectTest::::isNotEqualToFailureWithObjects()","467":"SubjectTest::::isNotEqualToFailureWithObjects()","468":"SubjectTest::::isNotEqualToFailureWithObjects()","469":"SubjectTest::::isNotEqualToFailureWithObjects()","470":"SubjectTest::::isNotEqualToFailureWithObjects()","471":"SubjectTest::::isNotEqualToFailureWithObjects()","472":"SubjectTest::::isNotEqualToFailureWithObjects()","473":"SubjectTest::::isNotEqualToFailureWithObjects()","475":"SubjectTest::::isNotEqualToFailureWithSameObject()","476":"SubjectTest::::isNotEqualToFailureWithSameObject()","477":"SubjectTest::::isNotEqualToFailureWithSameObject()","478":"SubjectTest::::isNotEqualToFailureWithSameObject()","479":"SubjectTest::::isNotEqualToFailureWithSameObject()","480":"SubjectTest::::isNotEqualToFailureWithSameObject()","482":"SubjectTest::::isNotEqualToWithDifferentTypesAndSameToString()","483":"SubjectTest::::isNotEqualToWithDifferentTypesAndSameToString()","484":"SubjectTest::::isNotEqualToWithDifferentTypesAndSameToString()","485":"SubjectTest::::isNotEqualToWithDifferentTypesAndSameToString()","486":"SubjectTest::::isNotEqualToWithDifferentTypesAndSameToString()","487":"SubjectTest::::isNotEqualToWithDifferentTypesAndSameToString()","489":"SubjectTest::::isNotEqualToNullBadEqualsImplementation()","490":"SubjectTest::::isNotEqualToNullBadEqualsImplementation()","491":"SubjectTest::::isNotEqualToNullBadEqualsImplementation()","492":"SubjectTest::::isNotEqualToNullBadEqualsImplementation()","494":"SubjectTest::::isNotEqualToSameInstanceBadEqualsImplementation()","495":"SubjectTest::::isNotEqualToSameInstanceBadEqualsImplementation()","496":"SubjectTest::::isNotEqualToSameInstanceBadEqualsImplementation()","497":"SubjectTest::::isNotEqualToSameInstanceBadEqualsImplementation()","498":"SubjectTest::::isNotEqualToSameInstanceBadEqualsImplementation()","499":"SubjectTest::::isNotEqualToSameInstanceBadEqualsImplementation()","501":"SubjectTest::::isInstanceOfExactType()","502":"SubjectTest::::isInstanceOfExactType()","503":"SubjectTest::::isInstanceOfExactType()","504":"SubjectTest::::isInstanceOfExactType()","505":"SubjectTest::::isInstanceOfExactType()","507":"SubjectTest::::isInstanceOfSuperclass()","508":"SubjectTest::::isInstanceOfSuperclass()","509":"SubjectTest::::isInstanceOfSuperclass()","510":"SubjectTest::::isInstanceOfSuperclass()","511":"SubjectTest::::isInstanceOfSuperclass()","513":"SubjectTest::::isInstanceOfImplementedInterface()","514":"SubjectTest::::isInstanceOfImplementedInterface()","515":"SubjectTest::::isInstanceOfImplementedInterface()","516":"SubjectTest::::isInstanceOfImplementedInterface()","517":"SubjectTest::::isInstanceOfImplementedInterface()","518":"SubjectTest::::isInstanceOfImplementedInterface()","519":"SubjectTest::::isInstanceOfImplementedInterface()","520":"SubjectTest::::isInstanceOfImplementedInterface()","521":"SubjectTest::::isInstanceOfImplementedInterface()","522":"SubjectTest::::isInstanceOfImplementedInterface()","523":"SubjectTest::::isInstanceOfImplementedInterface()","524":"SubjectTest::::isInstanceOfImplementedInterface()","525":"SubjectTest::::isInstanceOfImplementedInterface()","526":"SubjectTest::::isInstanceOfImplementedInterface()","528":"SubjectTest::::isInstanceOfUnrelatedClass()","529":"SubjectTest::::isInstanceOfUnrelatedClass()","530":"SubjectTest::::isInstanceOfUnrelatedClass()","531":"SubjectTest::::isInstanceOfUnrelatedClass()","532":"SubjectTest::::isInstanceOfUnrelatedClass()","533":"SubjectTest::::isInstanceOfUnrelatedClass()","534":"SubjectTest::::isInstanceOfUnrelatedClass()","535":"SubjectTest::::isInstanceOfUnrelatedClass()","537":"SubjectTest::::isInstanceOfUnrelatedInterface()","538":"SubjectTest::::isInstanceOfUnrelatedInterface()","539":"SubjectTest::::isInstanceOfUnrelatedInterface()","540":"SubjectTest::::isInstanceOfUnrelatedInterface()","541":"SubjectTest::::isInstanceOfUnrelatedInterface()","542":"SubjectTest::::isInstanceOfUnrelatedInterface()","543":"SubjectTest::::isInstanceOfUnrelatedInterface()","544":"SubjectTest::::isInstanceOfUnrelatedInterface()","545":"SubjectTest::::isInstanceOfUnrelatedInterface()","546":"SubjectTest::::isInstanceOfUnrelatedInterface()","547":"SubjectTest::::isInstanceOfUnrelatedInterface()","548":"SubjectTest::::isInstanceOfUnrelatedInterface()","549":"SubjectTest::::isInstanceOfUnrelatedInterface()","551":"SubjectTest::::isInstanceOfClassForNull()","552":"SubjectTest::::isInstanceOfClassForNull()","553":"SubjectTest::::isInstanceOfClassForNull()","554":"SubjectTest::::isInstanceOfClassForNull()","555":"SubjectTest::::isInstanceOfClassForNull()","556":"SubjectTest::::isInstanceOfClassForNull()","558":"SubjectTest::::isInstanceOfInterfaceForNull()","559":"SubjectTest::::isInstanceOfInterfaceForNull()","560":"SubjectTest::::isInstanceOfInterfaceForNull()","561":"SubjectTest::::isInstanceOfInterfaceForNull()","564":"SubjectTest::::isInstanceOfPrimitiveType()","565":"SubjectTest::::isInstanceOfPrimitiveType()","566":"SubjectTest::::isInstanceOfPrimitiveType()","567":"SubjectTest::::isInstanceOfPrimitiveType()","568":"SubjectTest::::isInstanceOfPrimitiveType()","569":"SubjectTest::::isInstanceOfPrimitiveType()","570":"SubjectTest::::isInstanceOfPrimitiveType()","571":"SubjectTest::::isInstanceOfPrimitiveType()","572":"SubjectTest::::isInstanceOfPrimitiveType()","574":"SubjectTest::::isNotInstanceOfUnrelatedClass()","575":"SubjectTest::::isNotInstanceOfUnrelatedClass()","576":"SubjectTest::::isNotInstanceOfUnrelatedClass()","577":"SubjectTest::::isNotInstanceOfUnrelatedClass()","579":"SubjectTest::::isNotInstanceOfUnrelatedInterface()","580":"SubjectTest::::isNotInstanceOfUnrelatedInterface()","581":"SubjectTest::::isNotInstanceOfUnrelatedInterface()","582":"SubjectTest::::isNotInstanceOfUnrelatedInterface()","583":"SubjectTest::::isNotInstanceOfUnrelatedInterface()","584":"SubjectTest::::isNotInstanceOfUnrelatedInterface()","585":"SubjectTest::::isNotInstanceOfUnrelatedInterface()","586":"SubjectTest::::isNotInstanceOfUnrelatedInterface()","587":"SubjectTest::::isNotInstanceOfUnrelatedInterface()","588":"SubjectTest::::isNotInstanceOfUnrelatedInterface()","589":"SubjectTest::::isNotInstanceOfUnrelatedInterface()","590":"SubjectTest::::isNotInstanceOfUnrelatedInterface()","591":"SubjectTest::::isNotInstanceOfUnrelatedInterface()","593":"SubjectTest::::isNotInstanceOfExactType()","594":"SubjectTest::::isNotInstanceOfExactType()","595":"SubjectTest::::isNotInstanceOfExactType()","596":"SubjectTest::::isNotInstanceOfExactType()","597":"SubjectTest::::isNotInstanceOfExactType()","598":"SubjectTest::::isNotInstanceOfExactType()","600":"SubjectTest::::isNotInstanceOfSuperclass()","601":"SubjectTest::::isNotInstanceOfSuperclass()","602":"SubjectTest::::isNotInstanceOfSuperclass()","603":"SubjectTest::::isNotInstanceOfSuperclass()","605":"SubjectTest::::isNotInstanceOfImplementedInterface()","606":"SubjectTest::::isNotInstanceOfImplementedInterface()","607":"SubjectTest::::isNotInstanceOfImplementedInterface()","608":"SubjectTest::::isNotInstanceOfImplementedInterface()","609":"SubjectTest::::isNotInstanceOfImplementedInterface()","610":"SubjectTest::::isNotInstanceOfImplementedInterface()","611":"SubjectTest::::isNotInstanceOfImplementedInterface()","612":"SubjectTest::::isNotInstanceOfImplementedInterface()","613":"SubjectTest::::isNotInstanceOfImplementedInterface()","614":"SubjectTest::::isNotInstanceOfImplementedInterface()","615":"SubjectTest::::isNotInstanceOfImplementedInterface()","616":"SubjectTest::::isNotInstanceOfImplementedInterface()","617":"SubjectTest::::isNotInstanceOfImplementedInterface()","619":"SubjectTest::::isNotInstanceOfPrimitiveType()","620":"SubjectTest::::isNotInstanceOfPrimitiveType()","621":"SubjectTest::::isNotInstanceOfPrimitiveType()","622":"SubjectTest::::isNotInstanceOfPrimitiveType()","623":"SubjectTest::::isNotInstanceOfPrimitiveType()","624":"SubjectTest::::isNotInstanceOfPrimitiveType()","625":"SubjectTest::::isNotInstanceOfPrimitiveType()","626":"SubjectTest::::isNotInstanceOfPrimitiveType()","628":"SubjectTest::::isIn()","629":"SubjectTest::::isIn()","630":"SubjectTest::::isIn()","631":"SubjectTest::::isIn()","633":"SubjectTest::::isInJustTwo()","634":"SubjectTest::::isInJustTwo()","635":"SubjectTest::::isInJustTwo()","636":"SubjectTest::::isInJustTwo()","638":"SubjectTest::::isInFailure()","639":"SubjectTest::::isInFailure()","640":"SubjectTest::::isInFailure()","641":"SubjectTest::::isInFailure()","642":"SubjectTest::::isInFailure()","643":"SubjectTest::::isInFailure()","645":"SubjectTest::::isInNullInListWithNull()","646":"SubjectTest::::isInNullInListWithNull()","647":"SubjectTest::::isInNullInListWithNull()","648":"SubjectTest::::isInNullInListWithNull()","650":"SubjectTest::::isInNonnullInListWithNull()","651":"SubjectTest::::isInNonnullInListWithNull()","652":"SubjectTest::::isInNonnullInListWithNull()","653":"SubjectTest::::isInNonnullInListWithNull()","655":"SubjectTest::::isInNullFailure()","656":"SubjectTest::::isInNullFailure()","657":"SubjectTest::::isInNullFailure()","658":"SubjectTest::::isInNullFailure()","660":"SubjectTest::::isInEmptyFailure()","661":"SubjectTest::::isInEmptyFailure()","662":"SubjectTest::::isInEmptyFailure()","663":"SubjectTest::::isInEmptyFailure()","665":"SubjectTest::::isAnyOf()","666":"SubjectTest::::isAnyOf()","667":"SubjectTest::::isAnyOf()","668":"SubjectTest::::isAnyOf()","670":"SubjectTest::::isAnyOfJustTwo()","671":"SubjectTest::::isAnyOfJustTwo()","672":"SubjectTest::::isAnyOfJustTwo()","673":"SubjectTest::::isAnyOfJustTwo()","675":"SubjectTest::::isAnyOfFailure()","676":"SubjectTest::::isAnyOfFailure()","677":"SubjectTest::::isAnyOfFailure()","678":"SubjectTest::::isAnyOfFailure()","679":"SubjectTest::::isAnyOfFailure()","680":"SubjectTest::::isAnyOfFailure()","682":"SubjectTest::::isAnyOfNullInListWithNull()","683":"SubjectTest::::isAnyOfNullInListWithNull()","684":"SubjectTest::::isAnyOfNullInListWithNull()","685":"SubjectTest::::isAnyOfNullInListWithNull()","687":"SubjectTest::::isAnyOfNonnullInListWithNull()","688":"SubjectTest::::isAnyOfNonnullInListWithNull()","689":"SubjectTest::::isAnyOfNonnullInListWithNull()","690":"SubjectTest::::isAnyOfNonnullInListWithNull()","692":"SubjectTest::::isAnyOfNullFailure()","693":"SubjectTest::::isAnyOfNullFailure()","694":"SubjectTest::::isAnyOfNullFailure()","695":"SubjectTest::::isAnyOfNullFailure()","697":"SubjectTest::::isNotIn()","698":"SubjectTest::::isNotIn()","699":"SubjectTest::::isNotIn()","700":"SubjectTest::::isNotIn()","702":"SubjectTest::::isNotInFailure()","703":"SubjectTest::::isNotInFailure()","704":"SubjectTest::::isNotInFailure()","705":"SubjectTest::::isNotInFailure()","706":"SubjectTest::::isNotInFailure()","707":"SubjectTest::::isNotInFailure()","709":"SubjectTest::::isNotInNull()","710":"SubjectTest::::isNotInNull()","711":"SubjectTest::::isNotInNull()","712":"SubjectTest::::isNotInNull()","714":"SubjectTest::::isNotInNullFailure()","715":"SubjectTest::::isNotInNullFailure()","716":"SubjectTest::::isNotInNullFailure()","717":"SubjectTest::::isNotInNullFailure()","718":"SubjectTest::::isNotInNullFailure()","719":"SubjectTest::::isNotInNullFailure()","720":"SubjectTest::::isNotInNullFailure()","722":"SubjectTest::::isNotInEmpty()","723":"SubjectTest::::isNotInEmpty()","724":"SubjectTest::::isNotInEmpty()","725":"SubjectTest::::isNotInEmpty()","727":"SubjectTest::::isNoneOf()","728":"SubjectTest::::isNoneOf()","729":"SubjectTest::::isNoneOf()","730":"SubjectTest::::isNoneOf()","732":"SubjectTest::::isNoneOfFailure()","733":"SubjectTest::::isNoneOfFailure()","734":"SubjectTest::::isNoneOfFailure()","735":"SubjectTest::::isNoneOfFailure()","736":"SubjectTest::::isNoneOfFailure()","737":"SubjectTest::::isNoneOfFailure()","739":"SubjectTest::::isNoneOfNull()","740":"SubjectTest::::isNoneOfNull()","741":"SubjectTest::::isNoneOfNull()","742":"SubjectTest::::isNoneOfNull()","744":"SubjectTest::::isNoneOfNullFailure()","745":"SubjectTest::::isNoneOfNullFailure()","746":"SubjectTest::::isNoneOfNullFailure()","747":"SubjectTest::::isNoneOfNullFailure()","749":"SubjectTest::::equalsThrowsUSOE()","750":"SubjectTest::::equalsThrowsUSOE()","751":"SubjectTest::::equalsThrowsUSOE()","752":"SubjectTest::::equalsThrowsUSOE()","753":"SubjectTest::::equalsThrowsUSOE()","754":"SubjectTest::::equalsThrowsUSOE()","755":"SubjectTest::::equalsThrowsUSOE()","756":"SubjectTest::::equalsThrowsUSOE()","757":"SubjectTest::::equalsThrowsUSOE()","758":"SubjectTest::::equalsThrowsUSOE()","759":"SubjectTest::::equalsThrowsUSOE()","760":"SubjectTest::::equalsThrowsUSOE()","761":"SubjectTest::::equalsThrowsUSOE()","762":"SubjectTest::::equalsThrowsUSOE()","763":"SubjectTest::::equalsThrowsUSOE()","764":"SubjectTest::::equalsThrowsUSOE()","765":"SubjectTest::::equalsThrowsUSOE()","767":"SubjectTest::::hashCodeThrowsUSOE()","768":"SubjectTest::::hashCodeThrowsUSOE()","769":"SubjectTest::::hashCodeThrowsUSOE()","770":"SubjectTest::::hashCodeThrowsUSOE()","771":"SubjectTest::::hashCodeThrowsUSOE()","772":"SubjectTest::::hashCodeThrowsUSOE()","773":"SubjectTest::::hashCodeThrowsUSOE()","774":"SubjectTest::::hashCodeThrowsUSOE()","775":"SubjectTest::::hashCodeThrowsUSOE()","776":"SubjectTest::::hashCodeThrowsUSOE()","777":"SubjectTest::::hashCodeThrowsUSOE()","778":"SubjectTest::::hashCodeThrowsUSOE()","780":"SubjectTest::::ignoreCheckDiscardsFailures()","781":"SubjectTest::::ignoreCheckDiscardsFailures()","782":"SubjectTest::::ignoreCheckDiscardsFailures()","783":"SubjectTest::::ignoreCheckDiscardsFailures()","785":"SubjectTest::::oneShotIterable(T[])","786":"SubjectTest::::oneShotIterable(T[])","787":"SubjectTest::::oneShotIterable(T[])","788":"SubjectTest::::oneShotIterable(T[])","789":"SubjectTest::::oneShotIterable(T[])","790":"SubjectTest::::oneShotIterable(T[])","791":"SubjectTest::::oneShotIterable(T[])","792":"SubjectTest::::oneShotIterable(T[])","793":"SubjectTest::::oneShotIterable(T[])","794":"SubjectTest::::oneShotIterable(T[])","795":"SubjectTest::::oneShotIterable(T[])","796":"SubjectTest::::oneShotIterable(T[])","797":"SubjectTest::::oneShotIterable(T[])","798":"SubjectTest::::oneShotIterable(T[])","800":"SubjectTest::::disambiguationWithSameToString()","801":"SubjectTest::::disambiguationWithSameToString()","802":"SubjectTest::::disambiguationWithSameToString()","803":"SubjectTest::::disambiguationWithSameToString()","804":"SubjectTest::::disambiguationWithSameToString()","805":"SubjectTest::::disambiguationWithSameToString()","806":"SubjectTest::::disambiguationWithSameToString()","807":"SubjectTest::::disambiguationWithSameToString()","808":"SubjectTest::::disambiguationWithSameToString()","812":"SubjectTest.ThrowsOnEqualsNull::::equals(java.lang.Object)","813":"SubjectTest.ThrowsOnEqualsNull::::equals(java.lang.Object)","814":"SubjectTest.ThrowsOnEqualsNull::::equals(java.lang.Object)","815":"SubjectTest.ThrowsOnEqualsNull::::equals(java.lang.Object)","816":"SubjectTest.ThrowsOnEqualsNull::::equals(java.lang.Object)","817":"SubjectTest.ThrowsOnEqualsNull::::equals(java.lang.Object)","822":"SubjectTest.ThrowsOnEquals::::equals(java.lang.Object)","823":"SubjectTest.ThrowsOnEquals::::equals(java.lang.Object)","824":"SubjectTest.ThrowsOnEquals::::equals(java.lang.Object)","825":"SubjectTest.ThrowsOnEquals::::equals(java.lang.Object)","826":"SubjectTest.ThrowsOnEquals::::equals(java.lang.Object)","827":"SubjectTest.ThrowsOnEquals::::equals(java.lang.Object)","831":"SubjectTest.ForbidsEqualityChecksSubject::::objectsForbiddingEqualityCheck()","832":"SubjectTest.ForbidsEqualityChecksSubject::::objectsForbiddingEqualityCheck()","833":"SubjectTest.ForbidsEqualityChecksSubject::::objectsForbiddingEqualityCheck()","841":"SubjectTest.ForbidsEqualityChecksSubject::::isEqualTo(java.lang.Object)","842":"SubjectTest.ForbidsEqualityChecksSubject::::isEqualTo(java.lang.Object)","843":"SubjectTest.ForbidsEqualityChecksSubject::::isEqualTo(java.lang.Object)","844":"SubjectTest.ForbidsEqualityChecksSubject::::isEqualTo(java.lang.Object)","846":"SubjectTest.ForbidsEqualityChecksSubject::::isNotEqualTo(java.lang.Object)","847":"SubjectTest.ForbidsEqualityChecksSubject::::isNotEqualTo(java.lang.Object)","848":"SubjectTest.ForbidsEqualityChecksSubject::::isNotEqualTo(java.lang.Object)","849":"SubjectTest.ForbidsEqualityChecksSubject::::isNotEqualTo(java.lang.Object)","852":"SubjectTest::::isAndroid()","853":"SubjectTest::::isAndroid()","854":"SubjectTest::::isAndroid()"},"tests":[{"test_lines":[178,190],"covered_lines":[103,104,120,121,122,123,124,168,169,172,173,174,176,209,211,213,225,227,229,232,235,238,242,247,388,413,421,423,425,427,436,449,486,504,505,506,510,511,512,515,519,683,695,696,697,698,805,806,807,811,812,813,826,827,828,829,841,842,845,847,848,853,854,864,866,867,868,869,882,889,890,958,959,978,997,998,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::isEqualTo(java.lang.Object)"},{"test_lines":[201,205],"covered_lines":[103,104,120,121,122,123,124,266,278,449,978],"label":"Subject::::isSameInstanceAs(java.lang.Object)"},{"test_lines":[207,213],"covered_lines":[103,104,120,121,122,123,124,168,169,172,173,176,209,211,212,213,225,227,229,232,235,238,242,247,266,267,276,278,388,413,421,423,425,427,436,449,486,501,504,505,506,510,511,512,515,519,524,683,695,696,697,698,805,806,807,811,812,813,826,827,828,829,841,842,845,847,853,872,876,878,879,882,978,997,998,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::isSameInstanceAs(java.lang.Object)"},{"test_lines":[215,220],"covered_lines":[103,104,120,121,122,123,124,266,278,449,978],"label":"Subject::::isSameInstanceAs(java.lang.Object)"},{"test_lines":[222,228],"covered_lines":[103,104,120,121,122,123,124,209,211,213,225,227,229,232,235,238,242,247,266,267,276,278,320,323,327,330,337,340,341,343,348,388,413,421,423,425,427,436,449,486,504,505,506,510,511,512,515,519,524,805,806,807,811,812,813,826,827,828,829,841,842,845,847,853,872,876,878,879,882,978,997,998,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::isSameInstanceAs(java.lang.Object)"},{"test_lines":[230,239],"covered_lines":[103,104,120,121,122,123,124,168,169,172,173,176,209,211,213,225,227,229,232,235,238,242,247,266,267,276,278,388,413,421,423,425,427,436,449,486,504,505,506,510,511,512,515,519,524,683,695,696,697,698,805,806,807,811,812,813,826,827,828,829,841,842,845,847,853,854,855,859,861,862,863,882,978,997,998,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::isSameInstanceAs(java.lang.Object)"},{"test_lines":[241,247],"covered_lines":[103,104,120,121,122,123,124,209,211,213,225,227,229,232,235,238,242,247,266,267,276,278,388,413,421,423,425,427,436,449,486,504,505,506,510,511,512,515,519,524,805,806,807,811,812,813,826,827,828,829,841,842,845,847,853,854,855,859,861,862,863,882,978,997,998,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::isSameInstanceAs(java.lang.Object)"},{"test_lines":[249,259],"covered_lines":[103,104,120,121,122,123,124,168,169,172,173,176,209,211,213,225,227,229,232,235,238,242,247,266,267,276,278,388,413,421,423,425,427,436,449,486,504,505,506,510,511,512,515,519,524,683,695,696,697,698,805,806,807,811,812,813,826,827,828,829,841,842,845,847,853,854,864,866,867,868,869,882,978,997,998,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::isSameInstanceAs(java.lang.Object)"},{"test_lines":[261,265],"covered_lines":[103,104,120,121,122,123,124,282,290,449,978],"label":"Subject::::isNotSameInstanceAs(java.lang.Object)"},{"test_lines":[267,273],"covered_lines":[103,104,120,121,122,123,124,168,169,172,173,176,209,211,213,225,227,229,232,235,238,242,247,282,287,288,290,388,413,421,423,425,427,436,449,486,504,505,506,510,511,512,515,683,695,696,697,698,978,1076,1077,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::isNotSameInstanceAs(java.lang.Object)"},{"test_lines":[275,280],"covered_lines":[103,104,120,121,122,123,124,282,290,449,978],"label":"Subject::::isNotSameInstanceAs(java.lang.Object)"},{"test_lines":[282,289],"covered_lines":[103,104,120,121,122,123,124,168,169,172,173,176,209,211,213,225,227,229,232,235,238,242,247,282,287,288,290,388,413,421,423,425,427,436,449,486,504,505,506,510,511,512,515,683,695,696,697,698,978,1076,1077,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::isNotSameInstanceAs(java.lang.Object)"},{"test_lines":[291,296],"covered_lines":[103,104,120,121,122,123,124,282,290,449,978],"label":"Subject::::isNotSameInstanceAs(java.lang.Object)"},{"test_lines":[298,304],"covered_lines":[103,104,120,121,122,123,124,282,290,449,978],"label":"Subject::::isNotSameInstanceAs(java.lang.Object)"},{"test_lines":[306,311],"covered_lines":[103,104,120,121,122,123,124,282,290,449,978],"label":"Subject::::isNotSameInstanceAs(java.lang.Object)"},{"test_lines":[313,317],"covered_lines":[103,104,120,121,122,123,124,128,129,172,173,176,209,210,449,496,504,505,506,510,511,512,515,978],"label":"Subject::::isNull()"},{"test_lines":[319,325],"covered_lines":[103,104,120,121,122,123,124,128,129,168,169,172,173,174,176,209,211,212,213,225,227,229,232,235,238,242,247,388,413,421,423,425,427,436,449,486,501,504,505,506,510,511,512,515,519,683,695,696,697,698,805,806,807,811,812,813,826,827,828,829,841,842,845,847,848,853,872,876,878,879,882,889,890,958,959,978,997,998,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::isNull()"},{"test_lines":[327,330],"covered_lines":[103,104,120,121,122,123,124,128,129,172,173,176,209,210,449,496,504,505,506,510,511,512,515,978],"label":"Subject::::isNull()"},{"test_lines":[332,335],"covered_lines":[103,104,120,121,122,123,124,128,129,172,173,174,176,209,211,212,388,413,421,423,425,427,436,449,501,504,505,506,510,511,512,515,519,805,806,807,811,812,813,826,827,828,829,841,842,845,847,848,853,872,876,878,879,882,889,890,958,959,978,997,998,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::isNull()"},{"test_lines":[337,340],"covered_lines":[103,104,120,121,122,123,124,128,129,172,173,174,176,209,211,212,388,413,421,423,425,427,436,449,501,504,505,506,510,511,512,515,519,805,806,807,811,812,813,826,827,828,829,841,842,845,847,848,853,872,876,878,879,882,889,890,958,959,978,997,998,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::isNull()"},{"test_lines":[342,345],"covered_lines":[103,104,120,121,122,123,124,128,129,172,173,174,176,209,211,212,388,413,421,423,425,427,436,449,501,504,505,506,510,511,512,515,519,805,806,807,811,812,813,826,827,828,829,841,842,845,847,848,853,872,876,878,879,882,889,890,958,959,978,997,998,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::isNull()"},{"test_lines":[347,351],"covered_lines":[103,104,120,121,122,123,124,133,134,187,188,200,209,211,212,449,501,504,505,506,510,511,512,515,978],"label":"Subject::::isNotNull()"},{"test_lines":[353,359],"covered_lines":[103,104,120,121,122,123,124,133,134,168,169,172,173,176,187,188,189,190,191,200,209,210,211,213,225,227,229,232,235,238,242,247,388,413,421,423,425,427,436,449,486,496,504,505,506,510,511,512,515,683,695,696,697,698,978,1076,1077,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::isNotNull()"},{"test_lines":[361,364],"covered_lines":[103,104,120,121,122,123,124,133,134,187,188,200,209,211,212,449,501,504,505,506,510,511,512,515,978],"label":"Subject::::isNotNull()"},{"test_lines":[366,369],"covered_lines":[103,104,120,121,122,123,124,133,134,187,188,200,209,211,212,449,501,504,505,506,510,511,512,515,978],"label":"Subject::::isNotNull()"},{"test_lines":[371,374],"covered_lines":[103,104,120,121,122,123,124,133,134,187,188,189,190,191,200,209,210,388,413,421,423,425,427,436,449,496,504,505,506,510,511,512,515,978,1076,1077,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::isNotNull()"},{"test_lines":[376,380],"covered_lines":[103,104,120,121,122,123,124,168,169,172,173,176,209,210,449,496,504,505,506,510,511,512,515,978],"label":"Subject::::isEqualTo(java.lang.Object)"},{"test_lines":[382,389],"covered_lines":[103,104,120,121,122,123,124,168,169,172,173,174,176,209,211,212,213,225,227,229,232,235,238,242,247,388,413,421,423,425,427,436,449,486,501,504,505,506,510,511,512,515,519,683,695,696,697,698,805,806,807,811,812,813,826,827,828,829,841,842,845,847,848,853,872,876,878,879,882,889,890,958,959,978,997,998,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::isEqualTo(java.lang.Object)"},{"test_lines":[391,399],"covered_lines":[103,104,120,121,122,123,124,168,169,172,173,174,176,209,211,212,213,225,227,229,232,235,238,242,247,388,413,421,423,425,427,436,449,486,501,504,505,506,510,511,512,515,519,683,695,696,697,698,805,806,807,811,812,813,826,827,828,829,841,842,845,847,848,853,854,864,866,867,868,869,882,889,890,958,959,978,997,998,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::isEqualTo(java.lang.Object)"},{"test_lines":[401,406],"covered_lines":[103,104,120,121,122,123,124,168,169,172,173,176,209,211,213,225,227,229,232,235,238,242,247,449,486,504,505,506,510,511,512,515,978],"label":"Subject::::isEqualTo(java.lang.Object)"},{"test_lines":[408,416],"covered_lines":[103,104,120,121,122,123,124,168,169,172,173,174,176,209,211,213,225,227,229,232,235,238,242,247,388,413,421,423,425,427,436,449,486,504,505,506,510,511,512,515,519,683,695,696,697,698,805,806,807,811,812,813,826,827,828,829,841,842,845,847,848,853,872,873,874,882,889,890,958,959,978,1166,1171,1180,1181,1182,1183,1185],"label":"Subject::::isEqualTo(java.lang.Object)"},{"test_lines":[418,428],"covered_lines":[103,104,120,121,122,123,124,168,169,172,173,174,176,209,211,213,225,227,229,232,235,238,242,247,388,413,421,423,425,427,436,449,486,504,505,506,510,511,512,515,519,683,695,696,697,698,805,806,807,811,812,813,826,827,828,829,841,842,845,847,848,853,854,864,866,867,868,869,882,889,890,958,959,978,997,998,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::isEqualTo(java.lang.Object)"},{"test_lines":[430,433],"covered_lines":[103,104,120,121,122,123,124,168,169,172,173,174,176,209,211,212,388,413,421,423,425,427,436,449,501,504,505,506,510,511,512,515,519,805,806,807,811,812,813,826,827,828,829,841,842,845,847,848,853,872,876,878,879,882,889,890,958,959,978,997,998,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::isEqualTo(java.lang.Object)"},{"test_lines":[435,440],"covered_lines":[103,104,120,121,122,123,124,168,169,172,173,176,209,211,213,225,227,229,232,235,238,242,247,449,486,504,505,506,510,511,512,515,978],"label":"Subject::::isEqualTo(java.lang.Object)"},{"test_lines":[442,446],"covered_lines":[103,104,120,121,122,123,124,183,184,187,188,200,209,211,212,449,501,504,505,506,510,511,512,515,978],"label":"Subject::::isNotEqualTo(java.lang.Object)"},{"test_lines":[448,454],"covered_lines":[103,104,120,121,122,123,124,168,169,172,173,176,183,184,187,188,189,190,191,200,209,210,211,213,225,227,229,232,235,238,242,247,388,413,421,423,425,427,436,449,486,496,504,505,506,510,511,512,515,683,695,696,697,698,978,1076,1077,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::isNotEqualTo(java.lang.Object)"},{"test_lines":[456,461],"covered_lines":[103,104,120,121,122,123,124,183,184,187,188,200,209,211,213,225,227,229,232,235,238,242,247,449,486,504,505,506,510,511,512,515,978],"label":"Subject::::isNotEqualTo(java.lang.Object)"},{"test_lines":[463,473],"covered_lines":[103,104,120,121,122,123,124,168,169,172,173,176,183,184,187,188,189,190,191,200,209,211,213,225,227,228,229,232,235,238,242,247,255,257,258,388,413,421,423,425,427,436,449,486,504,505,506,510,511,512,515,683,695,696,697,698,978,1076,1077,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::isNotEqualTo(java.lang.Object)"},{"test_lines":[475,480],"covered_lines":[103,104,120,121,122,123,124,183,184,187,188,189,190,191,200,209,211,213,225,227,229,232,235,238,242,247,388,413,421,423,425,427,436,449,486,504,505,506,510,511,512,515,978,1076,1077,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::isNotEqualTo(java.lang.Object)"},{"test_lines":[482,487],"covered_lines":[103,104,120,121,122,123,124,183,184,187,188,200,209,211,213,225,227,229,232,235,238,242,247,449,486,504,505,506,510,511,512,515,978],"label":"Subject::::isNotEqualTo(java.lang.Object)"},{"test_lines":[489,492],"covered_lines":[103,104,120,121,122,123,124,183,184,187,188,200,209,211,212,449,501,504,505,506,510,511,512,515,978],"label":"Subject::::isNotEqualTo(java.lang.Object)"},{"test_lines":[494,499],"covered_lines":[103,104,120,121,122,123,124,183,184,187,188,189,190,191,200,209,211,213,225,227,229,232,235,238,242,247,388,413,421,423,425,427,436,449,486,504,505,506,510,511,512,515,978,1076,1077,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::isNotEqualTo(java.lang.Object)"},{"test_lines":[501,505],"covered_lines":[103,104,120,121,122,123,124,294,297,301,316,340,341,343,348,449,978],"label":"Subject::::isInstanceOf(java.lang.Class<?>)"},{"test_lines":[507,511],"covered_lines":[103,104,120,121,122,123,124,294,297,301,316,340,341,343,348,449,978],"label":"Subject::::isInstanceOf(java.lang.Class<?>)"},{"test_lines":[513,526],"covered_lines":[103,104,120,121,122,123,124,294,297,301,316,340,341,343,348,449,978],"label":"Subject::::isInstanceOf(java.lang.Class<?>)"},{"test_lines":[528,535],"covered_lines":[103,104,120,121,122,123,124,168,169,172,173,176,209,211,213,225,227,229,232,235,238,242,247,294,297,301,302,311,312,313,314,316,340,341,343,348,388,413,421,423,425,426,449,486,504,505,506,510,511,512,515,683,695,696,697,698,978,1076,1077,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::isInstanceOf(java.lang.Class<?>)"},{"test_lines":[537,549],"covered_lines":[103,104,120,121,122,123,124,294,297,301,302,311,312,313,314,316,340,341,343,348,388,413,421,423,425,426,449,978,1076,1077,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::isInstanceOf(java.lang.Class<?>)"},{"test_lines":[551,556],"covered_lines":[103,104,120,121,122,123,124,168,169,172,173,176,209,211,213,225,227,229,232,235,238,242,247,294,297,298,299,388,413,421,423,425,427,436,449,486,504,505,506,510,511,512,515,683,695,696,697,698,730,731,748,749,978,1158,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::isInstanceOf(java.lang.Class<?>)"},{"test_lines":[558,561],"covered_lines":[103,104,120,121,122,123,124,294,297,298,299,388,413,421,423,425,427,436,449,730,731,748,749,978,1158,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::isInstanceOf(java.lang.Class<?>)"},{"test_lines":[564,572],"covered_lines":[103,104,120,121,122,123,124,340,341,343,449,978],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[574,577],"covered_lines":[103,104,120,121,122,123,124,320,323,327,330,337,340,341,343,348,449,978],"label":"Subject::::isNotInstanceOf(java.lang.Class<?>)"},{"test_lines":[579,591],"covered_lines":[103,104,120,121,122,123,124,320,323,327,330,337,340,341,343,348,449,978],"label":"Subject::::isNotInstanceOf(java.lang.Class<?>)"},{"test_lines":[593,598],"covered_lines":[103,104,120,121,122,123,124,168,169,172,173,176,209,211,213,225,227,229,232,235,238,242,247,320,323,327,330,331,337,340,341,343,348,388,413,421,423,425,427,436,449,486,504,505,506,510,511,512,515,683,695,696,697,698,730,731,748,749,978,1158,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::isNotInstanceOf(java.lang.Class<?>)"},{"test_lines":[600,603],"covered_lines":[103,104,120,121,122,123,124,320,323,327,330,331,337,340,341,343,348,388,413,421,423,425,427,436,449,730,731,748,749,978,1158,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::isNotInstanceOf(java.lang.Class<?>)"},{"test_lines":[605,617],"covered_lines":[103,104,120,121,122,123,124,320,323,327,330,331,337,340,341,343,348,388,413,421,423,425,427,436,449,730,731,748,749,978,1158,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::isNotInstanceOf(java.lang.Class<?>)"},{"test_lines":[619,626],"covered_lines":[103,104,120,121,122,123,124,340,341,343,449,978],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[628,631],"covered_lines":[103,104,120,121,122,123,124,353,354,357,360,363,449,978],"label":"Subject::::isIn(java.lang.Iterable<?>)"},{"test_lines":[633,636],"covered_lines":[103,104,120,121,122,123,124,353,354,357,360,363,449,978],"label":"Subject::::isIn(java.lang.Iterable<?>)"},{"test_lines":[638,643],"covered_lines":[103,104,120,121,122,123,124,168,169,172,173,176,209,211,213,225,227,229,232,235,238,242,247,353,354,355,357,360,363,388,413,421,423,425,427,436,449,486,504,505,506,510,511,512,515,683,695,696,697,698,730,731,748,749,978,1158,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::isIn(java.lang.Iterable<?>)"},{"test_lines":[645,648],"covered_lines":[103,104,120,121,122,123,124,353,354,357,360,363,449,978],"label":"Subject::::isIn(java.lang.Iterable<?>)"},{"test_lines":[650,653],"covered_lines":[103,104,120,121,122,123,124,353,354,357,360,363,449,978],"label":"Subject::::isIn(java.lang.Iterable<?>)"},{"test_lines":[655,658],"covered_lines":[103,104,120,121,122,123,124,353,354,355,357,360,363,388,413,421,423,425,427,436,449,730,731,748,749,978,1158,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::isIn(java.lang.Iterable<?>)"},{"test_lines":[660,663],"covered_lines":[103,104,120,121,122,123,124,353,354,355,357,360,363,388,413,421,423,425,427,436,449,730,731,748,749,978,1158,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::isIn(java.lang.Iterable<?>)"},{"test_lines":[665,668],"covered_lines":[103,104,120,121,122,123,124,353,354,357,360,363,369,370,449,978],"label":"Subject::::isAnyOf(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[670,673],"covered_lines":[103,104,120,121,122,123,124,353,354,357,360,363,369,370,449,978],"label":"Subject::::isAnyOf(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[675,680],"covered_lines":[103,104,120,121,122,123,124,168,169,172,173,176,209,211,213,225,227,229,232,235,238,242,247,353,354,355,357,360,363,369,370,388,413,421,423,425,427,436,449,486,504,505,506,510,511,512,515,683,695,696,697,698,730,731,748,749,978,1158,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::isAnyOf(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[682,685],"covered_lines":[103,104,120,121,122,123,124,353,354,357,360,363,369,370,449,978],"label":"Subject::::isAnyOf(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[687,690],"covered_lines":[103,104,120,121,122,123,124,353,354,357,360,363,369,370,449,978],"label":"Subject::::isAnyOf(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[692,695],"covered_lines":[103,104,120,121,122,123,124,353,354,355,357,360,363,369,370,388,413,421,423,425,427,436,449,730,731,748,749,978,1158,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::isAnyOf(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[697,700],"covered_lines":[103,104,120,121,122,123,124,374,375,378,449,978],"label":"Subject::::isNotIn(java.lang.Iterable<?>)"},{"test_lines":[702,707],"covered_lines":[103,104,120,121,122,123,124,168,169,172,173,176,209,211,213,225,227,229,232,235,238,242,247,374,375,376,378,388,413,421,423,425,427,436,449,486,504,505,506,510,511,512,515,683,695,696,697,698,730,731,748,749,978,1158,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::isNotIn(java.lang.Iterable<?>)"},{"test_lines":[709,712],"covered_lines":[103,104,120,121,122,123,124,374,375,378,449,978],"label":"Subject::::isNotIn(java.lang.Iterable<?>)"},{"test_lines":[714,720],"covered_lines":[103,104,120,121,122,123,124,374,375,376,378,388,413,421,423,425,427,436,449,730,731,748,749,978,1158,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::isNotIn(java.lang.Iterable<?>)"},{"test_lines":[722,725],"covered_lines":[103,104,120,121,122,123,124,374,375,378,449,978],"label":"Subject::::isNotIn(java.lang.Iterable<?>)"},{"test_lines":[727,730],"covered_lines":[103,104,120,121,122,123,124,374,375,378,383,384,449,978],"label":"Subject::::isNoneOf(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[732,737],"covered_lines":[103,104,120,121,122,123,124,168,169,172,173,176,209,211,213,225,227,229,232,235,238,242,247,374,375,376,378,383,384,388,413,421,423,425,427,436,449,486,504,505,506,510,511,512,515,683,695,696,697,698,730,731,748,749,978,1158,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::isNoneOf(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[739,742],"covered_lines":[103,104,120,121,122,123,124,374,375,378,383,384,449,978],"label":"Subject::::isNoneOf(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[744,747],"covered_lines":[103,104,120,121,122,123,124,374,375,376,378,383,384,388,413,421,423,425,427,436,449,730,731,748,749,978,1158,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::isNoneOf(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[749,765],"covered_lines":[103,104,120,121,122,123,124,168,169,172,173,176,209,211,213,225,227,229,232,235,238,242,247,449,486,504,505,506,510,511,512,515,683,695,696,697,698,978,1111],"label":"Subject::::equals(java.lang.Object)"},{"test_lines":[767,778],"covered_lines":[103,104,120,121,122,123,124,168,169,172,173,176,209,211,213,225,227,229,232,235,238,242,247,449,486,504,505,506,510,511,512,515,683,695,696,697,698,978,1125],"label":"Subject::::hashCode()"},{"test_lines":[780,783],"covered_lines":[103,104,120,121,122,123,124,128,129,172,173,174,176,209,211,212,388,413,421,423,425,427,436,449,501,504,505,506,510,511,512,515,519,711,805,806,807,811,812,813,826,827,828,829,841,842,845,847,848,853,872,876,878,879,882,889,890,958,959,978,997,998,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::ignoreCheck()"},{"test_lines":[800,808],"covered_lines":[103,104,120,121,122,123,124,168,169,172,173,174,176,209,211,213,225,227,229,232,235,238,242,247,388,413,421,423,425,427,436,449,486,504,505,506,510,511,512,515,519,683,695,696,697,698,805,806,807,811,812,813,826,827,828,829,841,842,845,847,848,853,854,855,859,861,862,863,882,889,890,958,959,978,997,998,1166,1171,1180,1181,1182,1183,1185,1189,1190],"label":"Subject::::isEqualTo(java.lang.Object)"}]},"/bernard/dataset_construction/prep/repos/truth/core/src/main/java/com/google/common/truth/PrimitiveIntArraySubject.java":{"class_content":["/*\n"," * Copyright (c) 2014 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.base.Preconditions.checkNotNull;\n","\n","import com.google.common.primitives.Ints;\n","import org.checkerframework.checker.nullness.qual.Nullable;\n","\n","/**\n"," * A Subject for {@code int[]}.\n"," *\n"," * @author Christian Gruber (cgruber@israfil.net)\n"," */\n","public final class PrimitiveIntArraySubject extends AbstractArraySubject {\n","  private final int @Nullable [] actual;\n","\n","  PrimitiveIntArraySubject(\n","      FailureMetadata metadata, int @Nullable [] o, @Nullable String typeDescription) {\n","    super(metadata, o, typeDescription);\n","    this.actual = o;\n","  }\n","\n","  public IterableSubject asList() {\n","    return checkNoNeedToDisplayBothValues(\"asList()\").that(Ints.asList(checkNotNull(actual)));\n","  }\n","}\n"],"test_content":["/*\n"," * Copyright (c) 2014 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.truth.Truth.assertThat;\n","import static org.junit.Assert.fail;\n","\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import org.junit.runners.JUnit4;\n","\n","/**\n"," * Tests for {@link com.google.common.truth.PrimitiveIntArraySubject}.\n"," *\n"," * @author Christian Gruber (cgruber@israfil.net)\n"," */\n","@RunWith(JUnit4.class)\n","public class PrimitiveIntArraySubjectTest extends BaseSubjectTestCase {\n","  private static final int[] EMPTY = new int[0];\n","\n","  @Test\n","  public void isEqualTo() {\n","    assertThat(array(2, 5)).isEqualTo(array(2, 5));\n","  }\n","\n","  @SuppressWarnings(\"TruthSelfEquals\")\n","  @Test\n","  public void isEqualTo_Same() {\n","    int[] same = array(2, 5);\n","    assertThat(same).isEqualTo(same);\n","  }\n","\n","  @Test\n","  public void asList() {\n","    assertThat(array(5, 2, 9)).asList().containsAtLeast(2, 9);\n","  }\n","\n","  @Test\n","  public void hasLength() {\n","    assertThat(EMPTY).hasLength(0);\n","    assertThat(array(2, 5)).hasLength(2);\n","  }\n","\n","  @Test\n","  public void hasLengthFail() {\n","    expectFailureWhenTestingThat(array(2, 5)).hasLength(1);\n","    assertFailureValue(\"value of\", \"array.length\");\n","  }\n","\n","  @Test\n","  public void hasLengthNegative() {\n","    try {\n","      assertThat(array(2, 5)).hasLength(-1);\n","      fail(\"Should have failed.\");\n","    } catch (IllegalArgumentException expected) {\n","    }\n","  }\n","\n","  @Test\n","  public void isEmpty() {\n","    assertThat(EMPTY).isEmpty();\n","  }\n","\n","  @Test\n","  public void isEmptyFail() {\n","    expectFailureWhenTestingThat(array(2, 5)).isEmpty();\n","    assertFailureKeys(\"expected to be empty\", \"but was\");\n","  }\n","\n","  @Test\n","  public void isNotEmpty() {\n","    assertThat(array(2, 5)).isNotEmpty();\n","  }\n","\n","  @Test\n","  public void isNotEmptyFail() {\n","    expectFailureWhenTestingThat(EMPTY).isNotEmpty();\n","    assertFailureKeys(\"expected not to be empty\");\n","  }\n","\n","  @Test\n","  public void isEqualTo_Fail_UnequalOrdering() {\n","    expectFailureWhenTestingThat(array(2, 3)).isEqualTo(array(3, 2));\n","    assertFailureKeys(\"expected\", \"but was\", \"differs at index\");\n","    assertFailureValue(\"expected\", \"[3, 2]\");\n","    assertFailureValue(\"but was\", \"[2, 3]\");\n","    assertFailureValue(\"differs at index\", \"[0]\");\n","  }\n","\n","  @Test\n","  public void isEqualTo_Fail_NotAnArray() {\n","    expectFailureWhenTestingThat(array(2, 3, 4)).isEqualTo(new Object());\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_SameLengths() {\n","    assertThat(array(2, 3)).isNotEqualTo(array(3, 2));\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_DifferentLengths() {\n","    assertThat(array(2, 3)).isNotEqualTo(array(2, 3, 1));\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_DifferentTypes() {\n","    assertThat(array(2, 3)).isNotEqualTo(new Object());\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_FailEquals() {\n","    expectFailureWhenTestingThat(array(2, 3)).isNotEqualTo(array(2, 3));\n","  }\n","\n","  @SuppressWarnings(\"TruthSelfEquals\")\n","  @Test\n","  public void isNotEqualTo_FailSame() {\n","    int[] same = array(2, 3);\n","    expectFailureWhenTestingThat(same).isNotEqualTo(same);\n","  }\n","\n","  private static int[] array(int... ts) {\n","    return ts;\n","  }\n","\n","  private PrimitiveIntArraySubject expectFailureWhenTestingThat(int[] actual) {\n","    return expectFailure.whenTesting().that(actual);\n","  }\n","}\n"],"method_lines_dic":{"PrimitiveIntArraySubject::::asList()":[37,39]},"test_method_lines_dic":{"PrimitiveIntArraySubjectTest::::isEqualTo()":[34,37],"PrimitiveIntArraySubjectTest::::isEqualTo_Same()":[39,44],"PrimitiveIntArraySubjectTest::::asList()":[46,49],"PrimitiveIntArraySubjectTest::::hasLength()":[51,55],"PrimitiveIntArraySubjectTest::::hasLengthFail()":[57,61],"PrimitiveIntArraySubjectTest::::hasLengthNegative()":[63,70],"PrimitiveIntArraySubjectTest::::isEmpty()":[72,75],"PrimitiveIntArraySubjectTest::::isEmptyFail()":[77,81],"PrimitiveIntArraySubjectTest::::isNotEmpty()":[83,86],"PrimitiveIntArraySubjectTest::::isNotEmptyFail()":[88,92],"PrimitiveIntArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()":[94,101],"PrimitiveIntArraySubjectTest::::isEqualTo_Fail_NotAnArray()":[103,106],"PrimitiveIntArraySubjectTest::::isNotEqualTo_SameLengths()":[108,111],"PrimitiveIntArraySubjectTest::::isNotEqualTo_DifferentLengths()":[113,116],"PrimitiveIntArraySubjectTest::::isNotEqualTo_DifferentTypes()":[118,121],"PrimitiveIntArraySubjectTest::::isNotEqualTo_FailEquals()":[123,126],"PrimitiveIntArraySubjectTest::::isNotEqualTo_FailSame()":[128,133],"PrimitiveIntArraySubjectTest::::array(int[])":[135,137],"PrimitiveIntArraySubjectTest::::expectFailureWhenTestingThat(int[])":[139,141]},"reverse_method_lines_dic":{"37":"PrimitiveIntArraySubject::::asList()","38":"PrimitiveIntArraySubject::::asList()","39":"PrimitiveIntArraySubject::::asList()"},"test_reverse_method_lines_dic":{"34":"PrimitiveIntArraySubjectTest::::isEqualTo()","35":"PrimitiveIntArraySubjectTest::::isEqualTo()","36":"PrimitiveIntArraySubjectTest::::isEqualTo()","37":"PrimitiveIntArraySubjectTest::::isEqualTo()","39":"PrimitiveIntArraySubjectTest::::isEqualTo_Same()","40":"PrimitiveIntArraySubjectTest::::isEqualTo_Same()","41":"PrimitiveIntArraySubjectTest::::isEqualTo_Same()","42":"PrimitiveIntArraySubjectTest::::isEqualTo_Same()","43":"PrimitiveIntArraySubjectTest::::isEqualTo_Same()","44":"PrimitiveIntArraySubjectTest::::isEqualTo_Same()","46":"PrimitiveIntArraySubjectTest::::asList()","47":"PrimitiveIntArraySubjectTest::::asList()","48":"PrimitiveIntArraySubjectTest::::asList()","49":"PrimitiveIntArraySubjectTest::::asList()","51":"PrimitiveIntArraySubjectTest::::hasLength()","52":"PrimitiveIntArraySubjectTest::::hasLength()","53":"PrimitiveIntArraySubjectTest::::hasLength()","54":"PrimitiveIntArraySubjectTest::::hasLength()","55":"PrimitiveIntArraySubjectTest::::hasLength()","57":"PrimitiveIntArraySubjectTest::::hasLengthFail()","58":"PrimitiveIntArraySubjectTest::::hasLengthFail()","59":"PrimitiveIntArraySubjectTest::::hasLengthFail()","60":"PrimitiveIntArraySubjectTest::::hasLengthFail()","61":"PrimitiveIntArraySubjectTest::::hasLengthFail()","63":"PrimitiveIntArraySubjectTest::::hasLengthNegative()","64":"PrimitiveIntArraySubjectTest::::hasLengthNegative()","65":"PrimitiveIntArraySubjectTest::::hasLengthNegative()","66":"PrimitiveIntArraySubjectTest::::hasLengthNegative()","67":"PrimitiveIntArraySubjectTest::::hasLengthNegative()","68":"PrimitiveIntArraySubjectTest::::hasLengthNegative()","69":"PrimitiveIntArraySubjectTest::::hasLengthNegative()","70":"PrimitiveIntArraySubjectTest::::hasLengthNegative()","72":"PrimitiveIntArraySubjectTest::::isEmpty()","73":"PrimitiveIntArraySubjectTest::::isEmpty()","74":"PrimitiveIntArraySubjectTest::::isEmpty()","75":"PrimitiveIntArraySubjectTest::::isEmpty()","77":"PrimitiveIntArraySubjectTest::::isEmptyFail()","78":"PrimitiveIntArraySubjectTest::::isEmptyFail()","79":"PrimitiveIntArraySubjectTest::::isEmptyFail()","80":"PrimitiveIntArraySubjectTest::::isEmptyFail()","81":"PrimitiveIntArraySubjectTest::::isEmptyFail()","83":"PrimitiveIntArraySubjectTest::::isNotEmpty()","84":"PrimitiveIntArraySubjectTest::::isNotEmpty()","85":"PrimitiveIntArraySubjectTest::::isNotEmpty()","86":"PrimitiveIntArraySubjectTest::::isNotEmpty()","88":"PrimitiveIntArraySubjectTest::::isNotEmptyFail()","89":"PrimitiveIntArraySubjectTest::::isNotEmptyFail()","90":"PrimitiveIntArraySubjectTest::::isNotEmptyFail()","91":"PrimitiveIntArraySubjectTest::::isNotEmptyFail()","92":"PrimitiveIntArraySubjectTest::::isNotEmptyFail()","94":"PrimitiveIntArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","95":"PrimitiveIntArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","96":"PrimitiveIntArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","97":"PrimitiveIntArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","98":"PrimitiveIntArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","99":"PrimitiveIntArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","100":"PrimitiveIntArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","101":"PrimitiveIntArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","103":"PrimitiveIntArraySubjectTest::::isEqualTo_Fail_NotAnArray()","104":"PrimitiveIntArraySubjectTest::::isEqualTo_Fail_NotAnArray()","105":"PrimitiveIntArraySubjectTest::::isEqualTo_Fail_NotAnArray()","106":"PrimitiveIntArraySubjectTest::::isEqualTo_Fail_NotAnArray()","108":"PrimitiveIntArraySubjectTest::::isNotEqualTo_SameLengths()","109":"PrimitiveIntArraySubjectTest::::isNotEqualTo_SameLengths()","110":"PrimitiveIntArraySubjectTest::::isNotEqualTo_SameLengths()","111":"PrimitiveIntArraySubjectTest::::isNotEqualTo_SameLengths()","113":"PrimitiveIntArraySubjectTest::::isNotEqualTo_DifferentLengths()","114":"PrimitiveIntArraySubjectTest::::isNotEqualTo_DifferentLengths()","115":"PrimitiveIntArraySubjectTest::::isNotEqualTo_DifferentLengths()","116":"PrimitiveIntArraySubjectTest::::isNotEqualTo_DifferentLengths()","118":"PrimitiveIntArraySubjectTest::::isNotEqualTo_DifferentTypes()","119":"PrimitiveIntArraySubjectTest::::isNotEqualTo_DifferentTypes()","120":"PrimitiveIntArraySubjectTest::::isNotEqualTo_DifferentTypes()","121":"PrimitiveIntArraySubjectTest::::isNotEqualTo_DifferentTypes()","123":"PrimitiveIntArraySubjectTest::::isNotEqualTo_FailEquals()","124":"PrimitiveIntArraySubjectTest::::isNotEqualTo_FailEquals()","125":"PrimitiveIntArraySubjectTest::::isNotEqualTo_FailEquals()","126":"PrimitiveIntArraySubjectTest::::isNotEqualTo_FailEquals()","128":"PrimitiveIntArraySubjectTest::::isNotEqualTo_FailSame()","129":"PrimitiveIntArraySubjectTest::::isNotEqualTo_FailSame()","130":"PrimitiveIntArraySubjectTest::::isNotEqualTo_FailSame()","131":"PrimitiveIntArraySubjectTest::::isNotEqualTo_FailSame()","132":"PrimitiveIntArraySubjectTest::::isNotEqualTo_FailSame()","133":"PrimitiveIntArraySubjectTest::::isNotEqualTo_FailSame()","135":"PrimitiveIntArraySubjectTest::::array(int[])","136":"PrimitiveIntArraySubjectTest::::array(int[])","137":"PrimitiveIntArraySubjectTest::::array(int[])","139":"PrimitiveIntArraySubjectTest::::expectFailureWhenTestingThat(int[])","140":"PrimitiveIntArraySubjectTest::::expectFailureWhenTestingThat(int[])","141":"PrimitiveIntArraySubjectTest::::expectFailureWhenTestingThat(int[])"},"tests":[{"test_lines":[34,37],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[39,44],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[46,49],"covered_lines":[33,34,35,38],"label":"PrimitiveIntArraySubject::::asList()"},{"test_lines":[51,55],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[57,61],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[63,70],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[72,75],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[77,81],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[83,86],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[88,92],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[94,101],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[103,106],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[108,111],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[113,116],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[118,121],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[123,126],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[128,133],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/truth/core/src/main/java/com/google/common/truth/StringSubject.java":{"class_content":["/*\n"," * Copyright (c) 2011 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.base.Preconditions.checkArgument;\n","import static com.google.common.base.Preconditions.checkNotNull;\n","import static com.google.common.truth.Fact.fact;\n","import static com.google.common.truth.Fact.simpleFact;\n","\n","import com.google.common.annotations.GwtIncompatible;\n","import java.util.regex.Matcher;\n","import java.util.regex.Pattern;\n","import org.checkerframework.checker.nullness.qual.Nullable;\n","\n","/**\n"," * Propositions for string subjects.\n"," *\n"," * @author David Saff\n"," * @author Christian Gruber (cgruber@israfil.net)\n"," */\n","public class StringSubject extends ComparableSubject<String> {\n","  private final @Nullable String actual;\n","\n","  /**\n","   * Constructor for use by subclasses. If you want to create an instance of this class itself, call\n","   * {@link Subject#check(String, Object...) check(...)}{@code .that(actual)}.\n","   */\n","  protected StringSubject(FailureMetadata metadata, @Nullable String string) {\n","    super(metadata, string);\n","    this.actual = string;\n","  }\n","\n","  /**\n","   * @deprecated Use {@link #isEqualTo} instead. String comparison is consistent with equality.\n","   */\n","  @Override\n","  @Deprecated\n","  public final void isEquivalentAccordingToCompareTo(@Nullable String other) {\n","    super.isEquivalentAccordingToCompareTo(other);\n","  }\n","\n","  /** Fails if the string does not have the given length. */\n","  public void hasLength(int expectedLength) {\n","    checkArgument(expectedLength >= 0, \"expectedLength(%s) must be >= 0\", expectedLength);\n","    check(\"length()\").that(checkNotNull(actual).length()).isEqualTo(expectedLength);\n","  }\n","\n","  /** Fails if the string is not equal to the zero-length \"empty string.\" */\n","  public void isEmpty() {\n","    if (actual == null) {\n","      failWithActual(simpleFact(\"expected an empty string\"));\n","    } else if (!actual.isEmpty()) {\n","      failWithActual(simpleFact(\"expected to be empty\"));\n","    }\n","  }\n","\n","  /** Fails if the string is equal to the zero-length \"empty string.\" */\n","  public void isNotEmpty() {\n","    if (actual == null) {\n","      failWithActual(simpleFact(\"expected a non-empty string\"));\n","    } else if (actual.isEmpty()) {\n","      failWithoutActual(simpleFact(\"expected not to be empty\"));\n","    }\n","  }\n","\n","  /** Fails if the string does not contain the given sequence. */\n","  public void contains(@Nullable CharSequence string) {\n","    checkNotNull(string);\n","    if (actual == null) {\n","      failWithActual(\"expected a string that contains\", string);\n","    } else if (!actual.contains(string)) {\n","      failWithActual(\"expected to contain\", string);\n","    }\n","  }\n","\n","  /** Fails if the string contains the given sequence. */\n","  public void doesNotContain(@Nullable CharSequence string) {\n","    checkNotNull(string);\n","    if (actual == null) {\n","      failWithActual(\"expected a string that does not contain\", string);\n","    } else if (actual.contains(string)) {\n","      failWithActual(\"expected not to contain\", string);\n","    }\n","  }\n","\n","  /** Fails if the string does not start with the given string. */\n","  public void startsWith(@Nullable String string) {\n","    checkNotNull(string);\n","    if (actual == null) {\n","      failWithActual(\"expected a string that starts with\", string);\n","    } else if (!actual.startsWith(string)) {\n","      failWithActual(\"expected to start with\", string);\n","    }\n","  }\n","\n","  /** Fails if the string does not end with the given string. */\n","  public void endsWith(@Nullable String string) {\n","    checkNotNull(string);\n","    if (actual == null) {\n","      failWithActual(\"expected a string that ends with\", string);\n","    } else if (!actual.endsWith(string)) {\n","      failWithActual(\"expected to end with\", string);\n","    }\n","  }\n","\n","  /** Fails if the string does not match the given regex. */\n","  public void matches(@Nullable String regex) {\n","    checkNotNull(regex);\n","    if (actual == null) {\n","      failWithActual(\"expected a string that matches\", regex);\n","    } else if (!actual.matches(regex)) {\n","      if (regex.equals(actual)) {\n","        failWithoutActual(\n","            fact(\"expected to match\", regex),\n","            fact(\"but was\", actual),\n","            simpleFact(\"Looks like you want to use .isEqualTo() for an exact equality assertion.\"));\n","      } else {\n","        failWithActual(\"expected to match\", regex);\n","      }\n","    }\n","  }\n","\n","  /** Fails if the string does not match the given regex. */\n","  @GwtIncompatible(\"java.util.regex.Pattern\")\n","  public void matches(@Nullable Pattern regex) {\n","    checkNotNull(regex);\n","    if (actual == null) {\n","      failWithActual(\"expected a string that matches\", regex);\n","    } else if (!regex.matcher(actual).matches()) {\n","      if (regex.toString().equals(actual)) {\n","        failWithoutActual(\n","            fact(\"expected to match\", regex),\n","            fact(\"but was\", actual),\n","            simpleFact(\n","                \"If you want an exact equality assertion you can escape your regex with\"\n","                    + \" Pattern.quote().\"));\n","      } else {\n","        failWithActual(\"expected to match\", regex);\n","      }\n","    }\n","  }\n","\n","  /** Fails if the string matches the given regex. */\n","  public void doesNotMatch(@Nullable String regex) {\n","    checkNotNull(regex);\n","    if (actual == null) {\n","      failWithActual(\"expected a string that does not match\", regex);\n","    } else if (actual.matches(regex)) {\n","      failWithActual(\"expected not to match\", regex);\n","    }\n","  }\n","\n","  /** Fails if the string matches the given regex. */\n","  @GwtIncompatible(\"java.util.regex.Pattern\")\n","  public void doesNotMatch(@Nullable Pattern regex) {\n","    checkNotNull(regex);\n","    if (actual == null) {\n","      failWithActual(\"expected a string that does not match\", regex);\n","    } else if (regex.matcher(actual).matches()) {\n","      failWithActual(\"expected not to match\", regex);\n","    }\n","  }\n","\n","  /** Fails if the string does not contain a match on the given regex. */\n","  @GwtIncompatible(\"java.util.regex.Pattern\")\n","  public void containsMatch(@Nullable Pattern regex) {\n","    checkNotNull(regex);\n","    if (actual == null) {\n","      failWithActual(\"expected a string that contains a match for\", regex);\n","    } else if (!regex.matcher(actual).find()) {\n","      failWithActual(\"expected to contain a match for\", regex);\n","    }\n","  }\n","\n","  /** Fails if the string does not contain a match on the given regex. */\n","  public void containsMatch(@Nullable String regex) {\n","    checkNotNull(regex);\n","    if (actual == null) {\n","      failWithActual(\"expected a string that contains a match for\", regex);\n","    } else if (!Platform.containsMatch(actual, regex)) {\n","      failWithActual(\"expected to contain a match for\", regex);\n","    }\n","  }\n","\n","  /** Fails if the string contains a match on the given regex. */\n","  @GwtIncompatible(\"java.util.regex.Pattern\")\n","  public void doesNotContainMatch(@Nullable Pattern regex) {\n","    checkNotNull(regex);\n","    if (actual == null) {\n","      failWithActual(\"expected a string that does not contain a match for\", regex);\n","      return;\n","    }\n","    Matcher matcher = regex.matcher(actual);\n","    if (matcher.find()) {\n","      failWithoutActual(\n","          fact(\"expected not to contain a match for\", regex),\n","          fact(\"but contained\", matcher.group()),\n","          fact(\"full string\", actualCustomStringRepresentationForPackageMembersToCall()));\n","    }\n","  }\n","\n","  /** Fails if the string contains a match on the given regex. */\n","  public void doesNotContainMatch(@Nullable String regex) {\n","    checkNotNull(regex);\n","    if (actual == null) {\n","      failWithActual(\"expected a string that does not contain a match for\", regex);\n","    } else if (Platform.containsMatch(actual, regex)) {\n","      failWithActual(\"expected not to contain a match for\", regex);\n","    }\n","  }\n","\n","  /**\n","   * Returns a {@link StringSubject}-like instance that will ignore the case of the characters.\n","   *\n","   * <p>Character equality ignoring case is defined as follows: Characters must be equal either\n","   * after calling {@link Character#toLowerCase} or after calling {@link Character#toUpperCase}.\n","   * Note that this is independent of any locale.\n","   */\n","  public CaseInsensitiveStringComparison ignoringCase() {\n","    return new CaseInsensitiveStringComparison();\n","  }\n","\n","  /** Case insensitive propositions for string subjects. */\n","  @SuppressWarnings(\"Casing_StringEqualsIgnoreCase\") // intentional choice from API Review\n","  public final class CaseInsensitiveStringComparison {\n","    private CaseInsensitiveStringComparison() {}\n","\n","    /**\n","     * Fails if the subject is not equal to the given sequence (while ignoring case). For the\n","     * purposes of this comparison, two strings are equal if any of the following is true:\n","     *\n","     * <ul>\n","     *   <li>they are equal according to {@link String#equalsIgnoreCase}\n","     *   <li>they are both null\n","     * </ul>\n","     *\n","     * <p>Example: \"abc\" is equal to \"ABC\", but not to \"abcd\".\n","     */\n","    public void isEqualTo(@Nullable String expected) {\n","      if (actual == null) {\n","        if (expected != null) {\n","          failWithoutActual(\n","              fact(\"expected a string that is equal to\", expected),\n","              butWas(),\n","              simpleFact(\"(case is ignored)\"));\n","        }\n","      } else {\n","        if (expected == null) {\n","          failWithoutActual(\n","              fact(\"expected\", \"null (null reference)\"), butWas(), simpleFact(\"(case is ignored)\"));\n","        } else if (!actual.equalsIgnoreCase(expected)) {\n","          failWithoutActual(fact(\"expected\", expected), butWas(), simpleFact(\"(case is ignored)\"));\n","        }\n","      }\n","    }\n","\n","    /**\n","     * Fails if the subject is equal to the given string (while ignoring case). The meaning of\n","     * equality is the same as for the {@link #isEqualTo} method.\n","     */\n","    public void isNotEqualTo(@Nullable String unexpected) {\n","      if (actual == null) {\n","        if (unexpected == null) {\n","          failWithoutActual(\n","              fact(\"expected a string that is not equal to\", \"null (null reference)\"),\n","              simpleFact(\"(case is ignored)\"));\n","        }\n","      } else {\n","        if (unexpected != null && actual.equalsIgnoreCase(unexpected)) {\n","          failWithoutActual(\n","              fact(\"expected not to be\", unexpected), butWas(), simpleFact(\"(case is ignored)\"));\n","        }\n","      }\n","    }\n","\n","    /** Fails if the string does not contain the given sequence (while ignoring case). */\n","    public void contains(@Nullable CharSequence expectedSequence) {\n","      checkNotNull(expectedSequence);\n","      String expected = expectedSequence.toString();\n","      if (actual == null) {\n","        failWithoutActual(\n","            fact(\"expected a string that contains\", expected),\n","            butWas(),\n","            simpleFact(\"(case is ignored)\"));\n","      } else if (!containsIgnoreCase(expected)) {\n","        failWithoutActual(\n","            fact(\"expected to contain\", expected), butWas(), simpleFact(\"(case is ignored)\"));\n","      }\n","    }\n","\n","    /** Fails if the string contains the given sequence (while ignoring case). */\n","    public void doesNotContain(@Nullable CharSequence expectedSequence) {\n","      checkNotNull(expectedSequence);\n","      String expected = expectedSequence.toString();\n","      if (actual == null) {\n","        failWithoutActual(\n","            fact(\"expected a string that does not contain\", expected),\n","            butWas(),\n","            simpleFact(\"(case is ignored)\"));\n","      } else if (containsIgnoreCase(expected)) {\n","        failWithoutActual(\n","            fact(\"expected not to contain\", expected), butWas(), simpleFact(\"(case is ignored)\"));\n","      }\n","    }\n","\n","    private boolean containsIgnoreCase(@Nullable String string) {\n","      checkNotNull(string);\n","      if (string.isEmpty()) {\n","        // TODO(b/79459427): Fix for J2CL discrepancy when string is empty\n","        return true;\n","      }\n","      String subject = checkNotNull(actual);\n","      for (int subjectOffset = 0;\n","          subjectOffset <= subject.length() - string.length();\n","          subjectOffset++) {\n","        if (subject.regionMatches(\n","            /* ignoreCase= */ true,\n","            /* toffset= */ subjectOffset,\n","            /* other= */ string,\n","            /* ooffset= */ 0,\n","            /* len= */ string.length())) {\n","          return true;\n","        }\n","      }\n","      return false;\n","    }\n","  }\n","}\n"],"test_content":["/*\n"," * Copyright (c) 2011 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.truth.ExpectFailure.assertThat;\n","import static com.google.common.truth.Truth.assertThat;\n","import static org.junit.Assert.fail;\n","\n","import com.google.common.annotations.GwtIncompatible;\n","import java.util.regex.Pattern;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import org.junit.runners.JUnit4;\n","\n","/**\n"," * Tests for String Subjects.\n"," *\n"," * @author David Saff\n"," * @author Christian Gruber (cgruber@israfil.net)\n"," */\n","@RunWith(JUnit4.class)\n","public class StringSubjectTest extends BaseSubjectTestCase {\n","\n","  @Test\n","  public void hasLength() {\n","    assertThat(\"kurt\").hasLength(4);\n","  }\n","\n","  @Test\n","  public void hasLengthZero() {\n","    assertThat(\"\").hasLength(0);\n","  }\n","\n","  @Test\n","  public void hasLengthFails() {\n","    expectFailureWhenTestingThat(\"kurt\").hasLength(5);\n","    assertFailureValue(\"value of\", \"string.length()\");\n","  }\n","\n","  @Test\n","  public void hasLengthNegative() {\n","    try {\n","      assertThat(\"kurt\").hasLength(-1);\n","      fail();\n","    } catch (IllegalArgumentException expected) {\n","    }\n","  }\n","\n","  @Test\n","  public void stringIsEmpty() {\n","    assertThat(\"\").isEmpty();\n","  }\n","\n","  @Test\n","  public void stringIsEmptyFail() {\n","    expectFailureWhenTestingThat(\"abc\").isEmpty();\n","    assertFailureKeys(\"expected to be empty\", \"but was\");\n","  }\n","\n","  @Test\n","  public void stringIsEmptyFailNull() {\n","    expectFailureWhenTestingThat(null).isEmpty();\n","    assertFailureKeys(\"expected an empty string\", \"but was\");\n","  }\n","\n","  @Test\n","  public void stringIsNotEmpty() {\n","    assertThat(\"abc\").isNotEmpty();\n","  }\n","\n","  @Test\n","  public void stringIsNotEmptyFail() {\n","    expectFailureWhenTestingThat(\"\").isNotEmpty();\n","    assertFailureKeys(\"expected not to be empty\");\n","  }\n","\n","  @Test\n","  public void stringIsNotEmptyFailNull() {\n","    expectFailureWhenTestingThat(null).isNotEmpty();\n","    assertFailureKeys(\"expected a non-empty string\", \"but was\");\n","  }\n","\n","  @Test\n","  public void stringContains() {\n","    assertThat(\"abc\").contains(\"c\");\n","  }\n","\n","  @Test\n","  public void stringContainsCharSeq() {\n","    CharSequence charSeq = new StringBuilder(\"c\");\n","    assertThat(\"abc\").contains(charSeq);\n","  }\n","\n","  @Test\n","  public void stringContainsFail() {\n","    expectFailureWhenTestingThat(\"abc\").contains(\"d\");\n","    assertFailureValue(\"expected to contain\", \"d\");\n","  }\n","\n","  @Test\n","  public void stringDoesNotContain() {\n","    assertThat(\"abc\").doesNotContain(\"d\");\n","  }\n","\n","  @Test\n","  public void stringDoesNotContainCharSequence() {\n","    CharSequence charSeq = new StringBuilder(\"d\");\n","    assertThat(\"abc\").doesNotContain(charSeq);\n","  }\n","\n","  @Test\n","  public void stringDoesNotContainFail() {\n","    expectFailureWhenTestingThat(\"abc\").doesNotContain(\"b\");\n","    assertFailureValue(\"expected not to contain\", \"b\");\n","  }\n","\n","  @Test\n","  @SuppressWarnings(\"TruthSelfEquals\")\n","  public void stringEquality() {\n","    assertThat(\"abc\").isEqualTo(\"abc\");\n","  }\n","\n","  @Test\n","  public void stringEqualityToNull() {\n","    expectFailureWhenTestingThat(\"abc\").isEqualTo(null);\n","    assertThat(expectFailure.getFailure()).isNotInstanceOf(ComparisonFailureWithFacts.class);\n","  }\n","\n","  @Test\n","  public void stringEqualityToEmpty() {\n","    expectFailureWhenTestingThat(\"abc\").isEqualTo(\"\");\n","    assertFailureKeys(\"expected an empty string\", \"but was\");\n","  }\n","\n","  @Test\n","  public void stringEqualityEmptyToNonEmpty() {\n","    expectFailureWhenTestingThat(\"\").isEqualTo(\"abc\");\n","    assertFailureKeys(\"expected\", \"but was an empty string\");\n","  }\n","\n","  @Test\n","  public void stringEqualityFail() {\n","    expectFailureWhenTestingThat(\"abc\").isEqualTo(\"ABC\");\n","    assertThat(expectFailure.getFailure()).isInstanceOf(ComparisonFailureWithFacts.class);\n","  }\n","\n","  @Test\n","  public void stringStartsWith() {\n","    assertThat(\"abc\").startsWith(\"ab\");\n","  }\n","\n","  @Test\n","  public void stringStartsWithFail() {\n","    expectFailureWhenTestingThat(\"abc\").startsWith(\"bc\");\n","    assertFailureValue(\"expected to start with\", \"bc\");\n","  }\n","\n","  @Test\n","  public void stringEndsWith() {\n","    assertThat(\"abc\").endsWith(\"bc\");\n","  }\n","\n","  @Test\n","  public void stringEndsWithFail() {\n","    expectFailureWhenTestingThat(\"abc\").endsWith(\"ab\");\n","    assertFailureValue(\"expected to end with\", \"ab\");\n","  }\n","\n","  @Test\n","  public void emptyStringTests() {\n","    assertThat(\"\").contains(\"\");\n","    assertThat(\"\").startsWith(\"\");\n","    assertThat(\"\").endsWith(\"\");\n","    assertThat(\"a\").contains(\"\");\n","    assertThat(\"a\").startsWith(\"\");\n","    assertThat(\"a\").endsWith(\"\");\n","  }\n","\n","  @Test\n","  public void stringMatchesString() {\n","    assertThat(\"abcaaadev\").matches(\".*aaa.*\");\n","  }\n","\n","  @Test\n","  public void stringMatchesStringWithFail() {\n","    expectFailureWhenTestingThat(\"abcaqadev\").matches(\".*aaa.*\");\n","    assertFailureValue(\"expected to match\", \".*aaa.*\");\n","  }\n","\n","  @Test\n","  public void stringMatchesStringFailNull() {\n","    expectFailureWhenTestingThat(null).matches(\".*aaa.*\");\n","    assertFailureValue(\"expected a string that matches\", \".*aaa.*\");\n","  }\n","\n","  @Test\n","  public void stringMatchesStringLiteralFail() {\n","    expectFailureWhenTestingThat(\"$abc\").matches(\"$abc\");\n","    assertFailureValue(\"expected to match\", \"$abc\");\n","    assertFailureValue(\"but was\", \"$abc\");\n","    assertThat(expectFailure.getFailure())\n","        .factKeys()\n","        .contains(\"Looks like you want to use .isEqualTo() for an exact equality assertion.\");\n","  }\n","\n","  @Test\n","  @GwtIncompatible(\"Pattern\")\n","  public void stringMatchesPattern() {\n","    assertThat(\"abcaaadev\").matches(Pattern.compile(\".*aaa.*\"));\n","  }\n","\n","  @Test\n","  @GwtIncompatible(\"Pattern\")\n","  public void stringMatchesPatternWithFail() {\n","    expectFailureWhenTestingThat(\"abcaqadev\").matches(Pattern.compile(\".*aaa.*\"));\n","    assertFailureValue(\"expected to match\", \".*aaa.*\");\n","  }\n","\n","  @Test\n","  @GwtIncompatible(\"Pattern\")\n","  public void stringMatchesPatternFailNull() {\n","    expectFailureWhenTestingThat(null).matches(Pattern.compile(\".*aaa.*\"));\n","    assertFailureValue(\"expected a string that matches\", \".*aaa.*\");\n","  }\n","\n","  @Test\n","  @GwtIncompatible(\"Pattern\")\n","  public void stringMatchesPatternLiteralFail() {\n","    expectFailureWhenTestingThat(\"$abc\").matches(Pattern.compile(\"$abc\"));\n","    assertFailureValue(\"expected to match\", \"$abc\");\n","    assertFailureValue(\"but was\", \"$abc\");\n","    assertThat(expectFailure.getFailure())\n","        .factKeys()\n","        .contains(\n","            \"If you want an exact equality assertion you can escape your regex with\"\n","                + \" Pattern.quote().\");\n","  }\n","\n","  @Test\n","  public void stringDoesNotMatchString() {\n","    assertThat(\"abcaqadev\").doesNotMatch(\".*aaa.*\");\n","  }\n","\n","  @Test\n","  public void stringDoesNotMatchStringWithFail() {\n","    expectFailureWhenTestingThat(\"abcaaadev\").doesNotMatch(\".*aaa.*\");\n","    assertFailureValue(\"expected not to match\", \".*aaa.*\");\n","  }\n","\n","  @Test\n","  public void stringDoesNotMatchStringFailNull() {\n","    expectFailureWhenTestingThat(null).doesNotMatch(\".*aaa.*\");\n","    assertFailureValue(\"expected a string that does not match\", \".*aaa.*\");\n","  }\n","\n","  @Test\n","  @GwtIncompatible(\"Pattern\")\n","  public void stringDoesNotMatchPattern() {\n","    assertThat(\"abcaqadev\").doesNotMatch(Pattern.compile(\".*aaa.*\"));\n","  }\n","\n","  @Test\n","  @GwtIncompatible(\"Pattern\")\n","  public void stringDoesNotMatchPatternWithFail() {\n","    expectFailureWhenTestingThat(\"abcaaadev\").doesNotMatch(Pattern.compile(\".*aaa.*\"));\n","    assertFailureValue(\"expected not to match\", \".*aaa.*\");\n","  }\n","\n","  @Test\n","  @GwtIncompatible(\"Pattern\")\n","  public void stringDoesNotMatchPatternFailNull() {\n","    expectFailureWhenTestingThat(null).doesNotMatch(Pattern.compile(\".*aaa.*\"));\n","    assertFailureValue(\"expected a string that does not match\", \".*aaa.*\");\n","  }\n","\n","  @Test\n","  @GwtIncompatible(\"Pattern\")\n","  public void stringContainsMatchStringUsesFind() {\n","    assertThat(\"aba\").containsMatch(\"[b]\");\n","    assertThat(\"aba\").containsMatch(Pattern.compile(\"[b]\"));\n","  }\n","\n","  @Test\n","  public void stringContainsMatchString() {\n","    assertThat(\"aba\").containsMatch(\".*b.*\");\n","\n","    expectFailureWhenTestingThat(\"aaa\").containsMatch(\".*b.*\");\n","    assertFailureValue(\"expected to contain a match for\", \".*b.*\");\n","  }\n","\n","  @Test\n","  public void stringContainsMatchStringFailNull() {\n","    expectFailureWhenTestingThat(null).containsMatch(\".*b.*\");\n","    assertFailureValue(\"expected a string that contains a match for\", \".*b.*\");\n","  }\n","\n","  @Test\n","  @GwtIncompatible(\"Pattern\")\n","  public void stringContainsMatchPattern() {\n","    assertThat(\"aba\").containsMatch(Pattern.compile(\".*b.*\"));\n","\n","    expectFailureWhenTestingThat(\"aaa\").containsMatch(Pattern.compile(\".*b.*\"));\n","    assertFailureValue(\"expected to contain a match for\", \".*b.*\");\n","  }\n","\n","  @Test\n","  @GwtIncompatible(\"Pattern\")\n","  public void stringContainsMatchPatternFailNull() {\n","    expectFailureWhenTestingThat(null).containsMatch(Pattern.compile(\".*b.*\"));\n","    assertFailureValue(\"expected a string that contains a match for\", \".*b.*\");\n","  }\n","\n","  @Test\n","  public void stringDoesNotContainMatchString() {\n","    assertThat(\"aaa\").doesNotContainMatch(\".*b.*\");\n","\n","    expectFailureWhenTestingThat(\"aba\").doesNotContainMatch(\".*b.*\");\n","    assertFailureValue(\"expected not to contain a match for\", \".*b.*\");\n","  }\n","\n","  @Test\n","  public void stringDoesNotContainMatchStringUsesFind() {\n","    expectFailureWhenTestingThat(\"aba\").doesNotContainMatch(\"[b]\");\n","    assertFailureValue(\"expected not to contain a match for\", \"[b]\");\n","  }\n","\n","  @Test\n","  public void stringDoesNotContainMatchStringUsesFindFailNull() {\n","    expectFailureWhenTestingThat(null).doesNotContainMatch(\"[b]\");\n","    assertFailureValue(\"expected a string that does not contain a match for\", \"[b]\");\n","  }\n","\n","  @Test\n","  @GwtIncompatible(\"Pattern\")\n","  public void stringDoesNotContainMatchPattern() {\n","    assertThat(\"zzaaazz\").doesNotContainMatch(Pattern.compile(\".b.\"));\n","\n","    expectFailureWhenTestingThat(\"zzabazz\").doesNotContainMatch(Pattern.compile(\".b.\"));\n","    assertFailureValue(\"expected not to contain a match for\", \".b.\");\n","    assertFailureValue(\"but contained\", \"aba\");\n","    assertFailureValue(\"full string\", \"zzabazz\");\n","  }\n","\n","  @Test\n","  @GwtIncompatible(\"Pattern\")\n","  public void stringDoesNotContainMatchPatternFailNull() {\n","    expectFailureWhenTestingThat(null).doesNotContainMatch(Pattern.compile(\".b.\"));\n","    assertFailureValue(\"expected a string that does not contain a match for\", \".b.\");\n","  }\n","\n","  @Test\n","  public void stringEqualityIgnoringCase() {\n","    assertThat(\"café\").ignoringCase().isEqualTo(\"CAFÉ\");\n","  }\n","\n","  @Test\n","  public void stringEqualityIgnoringCaseWithNullSubject() {\n","    assertThat((String) null).ignoringCase().isEqualTo(null);\n","  }\n","\n","  @Test\n","  public void stringEqualityIgnoringCaseFail() {\n","    expectFailureWhenTestingThat(\"abc\").ignoringCase().isEqualTo(\"abd\");\n","\n","    assertFailureValue(\"expected\", \"abd\");\n","    assertThat(expectFailure.getFailure()).factKeys().contains(\"(case is ignored)\");\n","  }\n","\n","  @Test\n","  public void stringEqualityIgnoringCaseFailWithNullSubject() {\n","    expectFailureWhenTestingThat((String) null).ignoringCase().isEqualTo(\"abc\");\n","\n","    assertFailureValue(\"expected a string that is equal to\", \"abc\");\n","    assertThat(expectFailure.getFailure()).factKeys().contains(\"(case is ignored)\");\n","  }\n","\n","  @Test\n","  public void stringEqualityIgnoringCaseFailWithNullExpectedString() {\n","    expectFailureWhenTestingThat(\"abc\").ignoringCase().isEqualTo(null);\n","\n","    assertFailureValue(\"expected\", \"null (null reference)\");\n","    assertThat(expectFailure.getFailure()).factKeys().contains(\"(case is ignored)\");\n","  }\n","\n","  @Test\n","  public void stringInequalityIgnoringCase() {\n","    assertThat(\"café\").ignoringCase().isNotEqualTo(\"AFÉ\");\n","  }\n","\n","  @Test\n","  public void stringInequalityIgnoringCaseWithNullSubject() {\n","    assertThat((String) null).ignoringCase().isNotEqualTo(\"abc\");\n","  }\n","\n","  @Test\n","  public void stringInequalityIgnoringCaseWithNullExpectedString() {\n","    assertThat(\"abc\").ignoringCase().isNotEqualTo(null);\n","  }\n","\n","  @Test\n","  public void stringInequalityIgnoringCaseFail() {\n","    expectFailureWhenTestingThat(\"café\").ignoringCase().isNotEqualTo(\"CAFÉ\");\n","\n","    assertFailureValue(\"expected not to be\", \"CAFÉ\");\n","    assertThat(expectFailure.getFailure()).factKeys().contains(\"(case is ignored)\");\n","  }\n","\n","  @Test\n","  public void stringInequalityIgnoringCaseFailWithNullSubject() {\n","    expectFailureWhenTestingThat((String) null).ignoringCase().isNotEqualTo(null);\n","\n","    assertFailureValue(\"expected a string that is not equal to\", \"null (null reference)\");\n","    assertThat(expectFailure.getFailure()).factKeys().contains(\"(case is ignored)\");\n","  }\n","\n","  @Test\n","  public void stringContainsIgnoringCase() {\n","    assertThat(\"äbc\").ignoringCase().contains(\"Ä\");\n","  }\n","\n","  @Test\n","  public void stringContainsIgnoringCaseEmptyString() {\n","    assertThat(\"abc\").ignoringCase().contains(\"\");\n","  }\n","\n","  @Test\n","  public void stringContainsIgnoringCaseWithWord() {\n","    assertThat(\"abcdé\").ignoringCase().contains(\"CdÉ\");\n","  }\n","\n","  @Test\n","  public void stringContainsIgnoringCaseWholeWord() {\n","    assertThat(\"abcde\").ignoringCase().contains(\"ABCde\");\n","  }\n","\n","  @Test\n","  public void stringContainsIgnoringCaseCharSeq() {\n","    CharSequence charSeq = new StringBuilder(\"C\");\n","    assertThat(\"abc\").ignoringCase().contains(charSeq);\n","  }\n","\n","  @Test\n","  public void stringContainsIgnoringCaseFail() {\n","    expectFailureWhenTestingThat(\"abc\").ignoringCase().contains(\"d\");\n","\n","    assertFailureValue(\"expected to contain\", \"d\");\n","    assertThat(expectFailure.getFailure()).factKeys().contains(\"(case is ignored)\");\n","  }\n","\n","  @Test\n","  public void stringContainsIgnoringCaseFailBecauseTooLarge() {\n","    expectFailureWhenTestingThat(\"abc\").ignoringCase().contains(\"abcc\");\n","\n","    assertFailureValue(\"expected to contain\", \"abcc\");\n","    assertThat(expectFailure.getFailure()).factKeys().contains(\"(case is ignored)\");\n","  }\n","\n","  @Test\n","  public void stringContainsIgnoringCaseFailBecauseNullSubject() {\n","    expectFailureWhenTestingThat((String) null).ignoringCase().contains(\"d\");\n","\n","    assertFailureValue(\"expected a string that contains\", \"d\");\n","    assertThat(expectFailure.getFailure()).factKeys().contains(\"(case is ignored)\");\n","  }\n","\n","  @Test\n","  public void stringDoesNotContainIgnoringCase() {\n","    assertThat(\"äbc\").ignoringCase().doesNotContain(\"Äc\");\n","  }\n","\n","  @Test\n","  public void stringDoesNotContainIgnoringCaseCharSeq() {\n","    CharSequence charSeq = new StringBuilder(\"cb\");\n","    assertThat(\"abc\").ignoringCase().doesNotContain(charSeq);\n","  }\n","\n","  @Test\n","  public void stringDoesNotContainIgnoringCaseFail() {\n","    expectFailureWhenTestingThat(\"äbc\").ignoringCase().doesNotContain(\"Äb\");\n","\n","    assertFailureValue(\"expected not to contain\", \"Äb\");\n","    assertThat(expectFailure.getFailure()).factKeys().contains(\"(case is ignored)\");\n","  }\n","\n","  @Test\n","  public void stringDoesNotContainIgnoringCaseFailWithEmptyString() {\n","    expectFailureWhenTestingThat(\"abc\").ignoringCase().doesNotContain(\"\");\n","\n","    assertFailureValue(\"expected not to contain\", \"\");\n","    assertThat(expectFailure.getFailure()).factKeys().contains(\"(case is ignored)\");\n","  }\n","\n","  @Test\n","  public void stringDoesNotContainIgnoringCaseFailBecauseNullSubject() {\n","    expectFailureWhenTestingThat((String) null).ignoringCase().doesNotContain(\"d\");\n","\n","    assertFailureValue(\"expected a string that does not contain\", \"d\");\n","    assertThat(expectFailure.getFailure()).factKeys().contains(\"(case is ignored)\");\n","  }\n","\n","  @Test\n","  public void trailingWhitespaceInActual() {\n","    expectFailureWhenTestingThat(\"foo\\n\").isEqualTo(\"foo\");\n","    assertFailureKeys(\"expected\", \"but contained extra trailing whitespace\");\n","    assertFailureValue(\"but contained extra trailing whitespace\", \"\\\\n\");\n","  }\n","\n","  @Test\n","  public void trailingWhitespaceInExpected() {\n","    expectFailureWhenTestingThat(\"foo\").isEqualTo(\"foo \");\n","    assertFailureKeys(\"expected\", \"but was missing trailing whitespace\");\n","    assertFailureValue(\"but was missing trailing whitespace\", \"␣\");\n","  }\n","\n","  @Test\n","  public void trailingWhitespaceInBoth() {\n","    expectFailureWhenTestingThat(\"foo \\n\").isEqualTo(\"foo\\u00a0\");\n","    assertFailureKeys(\"expected\", \"with trailing whitespace\", \"but trailing whitespace was\");\n","    assertFailureValue(\"with trailing whitespace\", \"\\\\u00a0\");\n","    assertFailureValue(\"but trailing whitespace was\", \"␣\\\\n\");\n","  }\n","\n","  @Test\n","  public void trailingWhitespaceVsEmptyString() {\n","    /*\n","     * The code has special cases for both trailing whitespace and an empty string. Make sure that\n","     * it specifically reports the trailing whitespace. (It might be nice to *also* report the empty\n","     * string specially, but that's less important.)\n","     */\n","    expectFailureWhenTestingThat(\"\\t\").isEqualTo(\"\");\n","    assertFailureKeys(\"expected\", \"but contained extra trailing whitespace\");\n","    assertFailureValue(\"but contained extra trailing whitespace\", \"\\\\t\");\n","  }\n","\n","  private StringSubject expectFailureWhenTestingThat(String actual) {\n","    return expectFailure.whenTesting().that(actual);\n","  }\n","}\n"],"method_lines_dic":{"StringSubject::::isEquivalentAccordingToCompareTo(java.lang.String)":[49,53],"StringSubject::::hasLength(int)":[56,59],"StringSubject::::isEmpty()":[62,68],"StringSubject::::isNotEmpty()":[71,77],"StringSubject::::contains(java.lang.CharSequence)":[80,87],"StringSubject::::doesNotContain(java.lang.CharSequence)":[90,97],"StringSubject::::startsWith(java.lang.String)":[100,107],"StringSubject::::endsWith(java.lang.String)":[110,117],"StringSubject::::matches(java.lang.String)":[120,134],"StringSubject::::matches(java.util.regex.Pattern)":[137,154],"StringSubject::::doesNotMatch(java.lang.String)":[157,164],"StringSubject::::doesNotMatch(java.util.regex.Pattern)":[167,175],"StringSubject::::containsMatch(java.util.regex.Pattern)":[178,186],"StringSubject::::containsMatch(java.lang.String)":[189,196],"StringSubject::::doesNotContainMatch(java.util.regex.Pattern)":[199,213],"StringSubject::::doesNotContainMatch(java.lang.String)":[216,223],"StringSubject::::ignoringCase()":[232,234],"StringSubject.CaseInsensitiveStringComparison::::isEqualTo(java.lang.String)":[252,268],"StringSubject.CaseInsensitiveStringComparison::::isNotEqualTo(java.lang.String)":[274,287],"StringSubject.CaseInsensitiveStringComparison::::contains(java.lang.CharSequence)":[290,302],"StringSubject.CaseInsensitiveStringComparison::::doesNotContain(java.lang.CharSequence)":[305,317],"StringSubject.CaseInsensitiveStringComparison::::containsIgnoreCase(java.lang.String)":[319,339]},"test_method_lines_dic":{"StringSubjectTest::::hasLength()":[37,40],"StringSubjectTest::::hasLengthZero()":[42,45],"StringSubjectTest::::hasLengthFails()":[47,51],"StringSubjectTest::::hasLengthNegative()":[53,60],"StringSubjectTest::::stringIsEmpty()":[62,65],"StringSubjectTest::::stringIsEmptyFail()":[67,71],"StringSubjectTest::::stringIsEmptyFailNull()":[73,77],"StringSubjectTest::::stringIsNotEmpty()":[79,82],"StringSubjectTest::::stringIsNotEmptyFail()":[84,88],"StringSubjectTest::::stringIsNotEmptyFailNull()":[90,94],"StringSubjectTest::::stringContains()":[96,99],"StringSubjectTest::::stringContainsCharSeq()":[101,105],"StringSubjectTest::::stringContainsFail()":[107,111],"StringSubjectTest::::stringDoesNotContain()":[113,116],"StringSubjectTest::::stringDoesNotContainCharSequence()":[118,122],"StringSubjectTest::::stringDoesNotContainFail()":[124,128],"StringSubjectTest::::stringEquality()":[130,134],"StringSubjectTest::::stringEqualityToNull()":[136,140],"StringSubjectTest::::stringEqualityToEmpty()":[142,146],"StringSubjectTest::::stringEqualityEmptyToNonEmpty()":[148,152],"StringSubjectTest::::stringEqualityFail()":[154,158],"StringSubjectTest::::stringStartsWith()":[160,163],"StringSubjectTest::::stringStartsWithFail()":[165,169],"StringSubjectTest::::stringEndsWith()":[171,174],"StringSubjectTest::::stringEndsWithFail()":[176,180],"StringSubjectTest::::emptyStringTests()":[182,190],"StringSubjectTest::::stringMatchesString()":[192,195],"StringSubjectTest::::stringMatchesStringWithFail()":[197,201],"StringSubjectTest::::stringMatchesStringFailNull()":[203,207],"StringSubjectTest::::stringMatchesStringLiteralFail()":[209,217],"StringSubjectTest::::stringMatchesPattern()":[219,223],"StringSubjectTest::::stringMatchesPatternWithFail()":[225,230],"StringSubjectTest::::stringMatchesPatternFailNull()":[232,237],"StringSubjectTest::::stringMatchesPatternLiteralFail()":[239,250],"StringSubjectTest::::stringDoesNotMatchString()":[252,255],"StringSubjectTest::::stringDoesNotMatchStringWithFail()":[257,261],"StringSubjectTest::::stringDoesNotMatchStringFailNull()":[263,267],"StringSubjectTest::::stringDoesNotMatchPattern()":[269,273],"StringSubjectTest::::stringDoesNotMatchPatternWithFail()":[275,280],"StringSubjectTest::::stringDoesNotMatchPatternFailNull()":[282,287],"StringSubjectTest::::stringContainsMatchStringUsesFind()":[289,294],"StringSubjectTest::::stringContainsMatchString()":[296,302],"StringSubjectTest::::stringContainsMatchStringFailNull()":[304,308],"StringSubjectTest::::stringContainsMatchPattern()":[310,317],"StringSubjectTest::::stringContainsMatchPatternFailNull()":[319,324],"StringSubjectTest::::stringDoesNotContainMatchString()":[326,332],"StringSubjectTest::::stringDoesNotContainMatchStringUsesFind()":[334,338],"StringSubjectTest::::stringDoesNotContainMatchStringUsesFindFailNull()":[340,344],"StringSubjectTest::::stringDoesNotContainMatchPattern()":[346,355],"StringSubjectTest::::stringDoesNotContainMatchPatternFailNull()":[357,362],"StringSubjectTest::::stringEqualityIgnoringCase()":[364,367],"StringSubjectTest::::stringEqualityIgnoringCaseWithNullSubject()":[369,372],"StringSubjectTest::::stringEqualityIgnoringCaseFail()":[374,380],"StringSubjectTest::::stringEqualityIgnoringCaseFailWithNullSubject()":[382,388],"StringSubjectTest::::stringEqualityIgnoringCaseFailWithNullExpectedString()":[390,396],"StringSubjectTest::::stringInequalityIgnoringCase()":[398,401],"StringSubjectTest::::stringInequalityIgnoringCaseWithNullSubject()":[403,406],"StringSubjectTest::::stringInequalityIgnoringCaseWithNullExpectedString()":[408,411],"StringSubjectTest::::stringInequalityIgnoringCaseFail()":[413,419],"StringSubjectTest::::stringInequalityIgnoringCaseFailWithNullSubject()":[421,427],"StringSubjectTest::::stringContainsIgnoringCase()":[429,432],"StringSubjectTest::::stringContainsIgnoringCaseEmptyString()":[434,437],"StringSubjectTest::::stringContainsIgnoringCaseWithWord()":[439,442],"StringSubjectTest::::stringContainsIgnoringCaseWholeWord()":[444,447],"StringSubjectTest::::stringContainsIgnoringCaseCharSeq()":[449,453],"StringSubjectTest::::stringContainsIgnoringCaseFail()":[455,461],"StringSubjectTest::::stringContainsIgnoringCaseFailBecauseTooLarge()":[463,469],"StringSubjectTest::::stringContainsIgnoringCaseFailBecauseNullSubject()":[471,477],"StringSubjectTest::::stringDoesNotContainIgnoringCase()":[479,482],"StringSubjectTest::::stringDoesNotContainIgnoringCaseCharSeq()":[484,488],"StringSubjectTest::::stringDoesNotContainIgnoringCaseFail()":[490,496],"StringSubjectTest::::stringDoesNotContainIgnoringCaseFailWithEmptyString()":[498,504],"StringSubjectTest::::stringDoesNotContainIgnoringCaseFailBecauseNullSubject()":[506,512],"StringSubjectTest::::trailingWhitespaceInActual()":[514,519],"StringSubjectTest::::trailingWhitespaceInExpected()":[521,526],"StringSubjectTest::::trailingWhitespaceInBoth()":[528,534],"StringSubjectTest::::trailingWhitespaceVsEmptyString()":[536,546],"StringSubjectTest::::expectFailureWhenTestingThat(java.lang.String)":[548,550]},"reverse_method_lines_dic":{"49":"StringSubject::::isEquivalentAccordingToCompareTo(java.lang.String)","50":"StringSubject::::isEquivalentAccordingToCompareTo(java.lang.String)","51":"StringSubject::::isEquivalentAccordingToCompareTo(java.lang.String)","52":"StringSubject::::isEquivalentAccordingToCompareTo(java.lang.String)","53":"StringSubject::::isEquivalentAccordingToCompareTo(java.lang.String)","56":"StringSubject::::hasLength(int)","57":"StringSubject::::hasLength(int)","58":"StringSubject::::hasLength(int)","59":"StringSubject::::hasLength(int)","62":"StringSubject::::isEmpty()","63":"StringSubject::::isEmpty()","64":"StringSubject::::isEmpty()","65":"StringSubject::::isEmpty()","66":"StringSubject::::isEmpty()","67":"StringSubject::::isEmpty()","68":"StringSubject::::isEmpty()","71":"StringSubject::::isNotEmpty()","72":"StringSubject::::isNotEmpty()","73":"StringSubject::::isNotEmpty()","74":"StringSubject::::isNotEmpty()","75":"StringSubject::::isNotEmpty()","76":"StringSubject::::isNotEmpty()","77":"StringSubject::::isNotEmpty()","80":"StringSubject::::contains(java.lang.CharSequence)","81":"StringSubject::::contains(java.lang.CharSequence)","82":"StringSubject::::contains(java.lang.CharSequence)","83":"StringSubject::::contains(java.lang.CharSequence)","84":"StringSubject::::contains(java.lang.CharSequence)","85":"StringSubject::::contains(java.lang.CharSequence)","86":"StringSubject::::contains(java.lang.CharSequence)","87":"StringSubject::::contains(java.lang.CharSequence)","90":"StringSubject::::doesNotContain(java.lang.CharSequence)","91":"StringSubject::::doesNotContain(java.lang.CharSequence)","92":"StringSubject::::doesNotContain(java.lang.CharSequence)","93":"StringSubject::::doesNotContain(java.lang.CharSequence)","94":"StringSubject::::doesNotContain(java.lang.CharSequence)","95":"StringSubject::::doesNotContain(java.lang.CharSequence)","96":"StringSubject::::doesNotContain(java.lang.CharSequence)","97":"StringSubject::::doesNotContain(java.lang.CharSequence)","100":"StringSubject::::startsWith(java.lang.String)","101":"StringSubject::::startsWith(java.lang.String)","102":"StringSubject::::startsWith(java.lang.String)","103":"StringSubject::::startsWith(java.lang.String)","104":"StringSubject::::startsWith(java.lang.String)","105":"StringSubject::::startsWith(java.lang.String)","106":"StringSubject::::startsWith(java.lang.String)","107":"StringSubject::::startsWith(java.lang.String)","110":"StringSubject::::endsWith(java.lang.String)","111":"StringSubject::::endsWith(java.lang.String)","112":"StringSubject::::endsWith(java.lang.String)","113":"StringSubject::::endsWith(java.lang.String)","114":"StringSubject::::endsWith(java.lang.String)","115":"StringSubject::::endsWith(java.lang.String)","116":"StringSubject::::endsWith(java.lang.String)","117":"StringSubject::::endsWith(java.lang.String)","120":"StringSubject::::matches(java.lang.String)","121":"StringSubject::::matches(java.lang.String)","122":"StringSubject::::matches(java.lang.String)","123":"StringSubject::::matches(java.lang.String)","124":"StringSubject::::matches(java.lang.String)","125":"StringSubject::::matches(java.lang.String)","126":"StringSubject::::matches(java.lang.String)","127":"StringSubject::::matches(java.lang.String)","128":"StringSubject::::matches(java.lang.String)","129":"StringSubject::::matches(java.lang.String)","130":"StringSubject::::matches(java.lang.String)","131":"StringSubject::::matches(java.lang.String)","132":"StringSubject::::matches(java.lang.String)","133":"StringSubject::::matches(java.lang.String)","134":"StringSubject::::matches(java.lang.String)","137":"StringSubject::::matches(java.util.regex.Pattern)","138":"StringSubject::::matches(java.util.regex.Pattern)","139":"StringSubject::::matches(java.util.regex.Pattern)","140":"StringSubject::::matches(java.util.regex.Pattern)","141":"StringSubject::::matches(java.util.regex.Pattern)","142":"StringSubject::::matches(java.util.regex.Pattern)","143":"StringSubject::::matches(java.util.regex.Pattern)","144":"StringSubject::::matches(java.util.regex.Pattern)","145":"StringSubject::::matches(java.util.regex.Pattern)","146":"StringSubject::::matches(java.util.regex.Pattern)","147":"StringSubject::::matches(java.util.regex.Pattern)","148":"StringSubject::::matches(java.util.regex.Pattern)","149":"StringSubject::::matches(java.util.regex.Pattern)","150":"StringSubject::::matches(java.util.regex.Pattern)","151":"StringSubject::::matches(java.util.regex.Pattern)","152":"StringSubject::::matches(java.util.regex.Pattern)","153":"StringSubject::::matches(java.util.regex.Pattern)","154":"StringSubject::::matches(java.util.regex.Pattern)","157":"StringSubject::::doesNotMatch(java.lang.String)","158":"StringSubject::::doesNotMatch(java.lang.String)","159":"StringSubject::::doesNotMatch(java.lang.String)","160":"StringSubject::::doesNotMatch(java.lang.String)","161":"StringSubject::::doesNotMatch(java.lang.String)","162":"StringSubject::::doesNotMatch(java.lang.String)","163":"StringSubject::::doesNotMatch(java.lang.String)","164":"StringSubject::::doesNotMatch(java.lang.String)","167":"StringSubject::::doesNotMatch(java.util.regex.Pattern)","168":"StringSubject::::doesNotMatch(java.util.regex.Pattern)","169":"StringSubject::::doesNotMatch(java.util.regex.Pattern)","170":"StringSubject::::doesNotMatch(java.util.regex.Pattern)","171":"StringSubject::::doesNotMatch(java.util.regex.Pattern)","172":"StringSubject::::doesNotMatch(java.util.regex.Pattern)","173":"StringSubject::::doesNotMatch(java.util.regex.Pattern)","174":"StringSubject::::doesNotMatch(java.util.regex.Pattern)","175":"StringSubject::::doesNotMatch(java.util.regex.Pattern)","178":"StringSubject::::containsMatch(java.util.regex.Pattern)","179":"StringSubject::::containsMatch(java.util.regex.Pattern)","180":"StringSubject::::containsMatch(java.util.regex.Pattern)","181":"StringSubject::::containsMatch(java.util.regex.Pattern)","182":"StringSubject::::containsMatch(java.util.regex.Pattern)","183":"StringSubject::::containsMatch(java.util.regex.Pattern)","184":"StringSubject::::containsMatch(java.util.regex.Pattern)","185":"StringSubject::::containsMatch(java.util.regex.Pattern)","186":"StringSubject::::containsMatch(java.util.regex.Pattern)","189":"StringSubject::::containsMatch(java.lang.String)","190":"StringSubject::::containsMatch(java.lang.String)","191":"StringSubject::::containsMatch(java.lang.String)","192":"StringSubject::::containsMatch(java.lang.String)","193":"StringSubject::::containsMatch(java.lang.String)","194":"StringSubject::::containsMatch(java.lang.String)","195":"StringSubject::::containsMatch(java.lang.String)","196":"StringSubject::::containsMatch(java.lang.String)","199":"StringSubject::::doesNotContainMatch(java.util.regex.Pattern)","200":"StringSubject::::doesNotContainMatch(java.util.regex.Pattern)","201":"StringSubject::::doesNotContainMatch(java.util.regex.Pattern)","202":"StringSubject::::doesNotContainMatch(java.util.regex.Pattern)","203":"StringSubject::::doesNotContainMatch(java.util.regex.Pattern)","204":"StringSubject::::doesNotContainMatch(java.util.regex.Pattern)","205":"StringSubject::::doesNotContainMatch(java.util.regex.Pattern)","206":"StringSubject::::doesNotContainMatch(java.util.regex.Pattern)","207":"StringSubject::::doesNotContainMatch(java.util.regex.Pattern)","208":"StringSubject::::doesNotContainMatch(java.util.regex.Pattern)","209":"StringSubject::::doesNotContainMatch(java.util.regex.Pattern)","210":"StringSubject::::doesNotContainMatch(java.util.regex.Pattern)","211":"StringSubject::::doesNotContainMatch(java.util.regex.Pattern)","212":"StringSubject::::doesNotContainMatch(java.util.regex.Pattern)","213":"StringSubject::::doesNotContainMatch(java.util.regex.Pattern)","216":"StringSubject::::doesNotContainMatch(java.lang.String)","217":"StringSubject::::doesNotContainMatch(java.lang.String)","218":"StringSubject::::doesNotContainMatch(java.lang.String)","219":"StringSubject::::doesNotContainMatch(java.lang.String)","220":"StringSubject::::doesNotContainMatch(java.lang.String)","221":"StringSubject::::doesNotContainMatch(java.lang.String)","222":"StringSubject::::doesNotContainMatch(java.lang.String)","223":"StringSubject::::doesNotContainMatch(java.lang.String)","232":"StringSubject::::ignoringCase()","233":"StringSubject::::ignoringCase()","234":"StringSubject::::ignoringCase()","252":"StringSubject.CaseInsensitiveStringComparison::::isEqualTo(java.lang.String)","253":"StringSubject.CaseInsensitiveStringComparison::::isEqualTo(java.lang.String)","254":"StringSubject.CaseInsensitiveStringComparison::::isEqualTo(java.lang.String)","255":"StringSubject.CaseInsensitiveStringComparison::::isEqualTo(java.lang.String)","256":"StringSubject.CaseInsensitiveStringComparison::::isEqualTo(java.lang.String)","257":"StringSubject.CaseInsensitiveStringComparison::::isEqualTo(java.lang.String)","258":"StringSubject.CaseInsensitiveStringComparison::::isEqualTo(java.lang.String)","259":"StringSubject.CaseInsensitiveStringComparison::::isEqualTo(java.lang.String)","260":"StringSubject.CaseInsensitiveStringComparison::::isEqualTo(java.lang.String)","261":"StringSubject.CaseInsensitiveStringComparison::::isEqualTo(java.lang.String)","262":"StringSubject.CaseInsensitiveStringComparison::::isEqualTo(java.lang.String)","263":"StringSubject.CaseInsensitiveStringComparison::::isEqualTo(java.lang.String)","264":"StringSubject.CaseInsensitiveStringComparison::::isEqualTo(java.lang.String)","265":"StringSubject.CaseInsensitiveStringComparison::::isEqualTo(java.lang.String)","266":"StringSubject.CaseInsensitiveStringComparison::::isEqualTo(java.lang.String)","267":"StringSubject.CaseInsensitiveStringComparison::::isEqualTo(java.lang.String)","268":"StringSubject.CaseInsensitiveStringComparison::::isEqualTo(java.lang.String)","274":"StringSubject.CaseInsensitiveStringComparison::::isNotEqualTo(java.lang.String)","275":"StringSubject.CaseInsensitiveStringComparison::::isNotEqualTo(java.lang.String)","276":"StringSubject.CaseInsensitiveStringComparison::::isNotEqualTo(java.lang.String)","277":"StringSubject.CaseInsensitiveStringComparison::::isNotEqualTo(java.lang.String)","278":"StringSubject.CaseInsensitiveStringComparison::::isNotEqualTo(java.lang.String)","279":"StringSubject.CaseInsensitiveStringComparison::::isNotEqualTo(java.lang.String)","280":"StringSubject.CaseInsensitiveStringComparison::::isNotEqualTo(java.lang.String)","281":"StringSubject.CaseInsensitiveStringComparison::::isNotEqualTo(java.lang.String)","282":"StringSubject.CaseInsensitiveStringComparison::::isNotEqualTo(java.lang.String)","283":"StringSubject.CaseInsensitiveStringComparison::::isNotEqualTo(java.lang.String)","284":"StringSubject.CaseInsensitiveStringComparison::::isNotEqualTo(java.lang.String)","285":"StringSubject.CaseInsensitiveStringComparison::::isNotEqualTo(java.lang.String)","286":"StringSubject.CaseInsensitiveStringComparison::::isNotEqualTo(java.lang.String)","287":"StringSubject.CaseInsensitiveStringComparison::::isNotEqualTo(java.lang.String)","290":"StringSubject.CaseInsensitiveStringComparison::::contains(java.lang.CharSequence)","291":"StringSubject.CaseInsensitiveStringComparison::::contains(java.lang.CharSequence)","292":"StringSubject.CaseInsensitiveStringComparison::::contains(java.lang.CharSequence)","293":"StringSubject.CaseInsensitiveStringComparison::::contains(java.lang.CharSequence)","294":"StringSubject.CaseInsensitiveStringComparison::::contains(java.lang.CharSequence)","295":"StringSubject.CaseInsensitiveStringComparison::::contains(java.lang.CharSequence)","296":"StringSubject.CaseInsensitiveStringComparison::::contains(java.lang.CharSequence)","297":"StringSubject.CaseInsensitiveStringComparison::::contains(java.lang.CharSequence)","298":"StringSubject.CaseInsensitiveStringComparison::::contains(java.lang.CharSequence)","299":"StringSubject.CaseInsensitiveStringComparison::::contains(java.lang.CharSequence)","300":"StringSubject.CaseInsensitiveStringComparison::::contains(java.lang.CharSequence)","301":"StringSubject.CaseInsensitiveStringComparison::::contains(java.lang.CharSequence)","302":"StringSubject.CaseInsensitiveStringComparison::::contains(java.lang.CharSequence)","305":"StringSubject.CaseInsensitiveStringComparison::::doesNotContain(java.lang.CharSequence)","306":"StringSubject.CaseInsensitiveStringComparison::::doesNotContain(java.lang.CharSequence)","307":"StringSubject.CaseInsensitiveStringComparison::::doesNotContain(java.lang.CharSequence)","308":"StringSubject.CaseInsensitiveStringComparison::::doesNotContain(java.lang.CharSequence)","309":"StringSubject.CaseInsensitiveStringComparison::::doesNotContain(java.lang.CharSequence)","310":"StringSubject.CaseInsensitiveStringComparison::::doesNotContain(java.lang.CharSequence)","311":"StringSubject.CaseInsensitiveStringComparison::::doesNotContain(java.lang.CharSequence)","312":"StringSubject.CaseInsensitiveStringComparison::::doesNotContain(java.lang.CharSequence)","313":"StringSubject.CaseInsensitiveStringComparison::::doesNotContain(java.lang.CharSequence)","314":"StringSubject.CaseInsensitiveStringComparison::::doesNotContain(java.lang.CharSequence)","315":"StringSubject.CaseInsensitiveStringComparison::::doesNotContain(java.lang.CharSequence)","316":"StringSubject.CaseInsensitiveStringComparison::::doesNotContain(java.lang.CharSequence)","317":"StringSubject.CaseInsensitiveStringComparison::::doesNotContain(java.lang.CharSequence)","319":"StringSubject.CaseInsensitiveStringComparison::::containsIgnoreCase(java.lang.String)","320":"StringSubject.CaseInsensitiveStringComparison::::containsIgnoreCase(java.lang.String)","321":"StringSubject.CaseInsensitiveStringComparison::::containsIgnoreCase(java.lang.String)","322":"StringSubject.CaseInsensitiveStringComparison::::containsIgnoreCase(java.lang.String)","323":"StringSubject.CaseInsensitiveStringComparison::::containsIgnoreCase(java.lang.String)","324":"StringSubject.CaseInsensitiveStringComparison::::containsIgnoreCase(java.lang.String)","325":"StringSubject.CaseInsensitiveStringComparison::::containsIgnoreCase(java.lang.String)","326":"StringSubject.CaseInsensitiveStringComparison::::containsIgnoreCase(java.lang.String)","327":"StringSubject.CaseInsensitiveStringComparison::::containsIgnoreCase(java.lang.String)","328":"StringSubject.CaseInsensitiveStringComparison::::containsIgnoreCase(java.lang.String)","329":"StringSubject.CaseInsensitiveStringComparison::::containsIgnoreCase(java.lang.String)","330":"StringSubject.CaseInsensitiveStringComparison::::containsIgnoreCase(java.lang.String)","331":"StringSubject.CaseInsensitiveStringComparison::::containsIgnoreCase(java.lang.String)","332":"StringSubject.CaseInsensitiveStringComparison::::containsIgnoreCase(java.lang.String)","333":"StringSubject.CaseInsensitiveStringComparison::::containsIgnoreCase(java.lang.String)","334":"StringSubject.CaseInsensitiveStringComparison::::containsIgnoreCase(java.lang.String)","335":"StringSubject.CaseInsensitiveStringComparison::::containsIgnoreCase(java.lang.String)","336":"StringSubject.CaseInsensitiveStringComparison::::containsIgnoreCase(java.lang.String)","337":"StringSubject.CaseInsensitiveStringComparison::::containsIgnoreCase(java.lang.String)","338":"StringSubject.CaseInsensitiveStringComparison::::containsIgnoreCase(java.lang.String)","339":"StringSubject.CaseInsensitiveStringComparison::::containsIgnoreCase(java.lang.String)"},"test_reverse_method_lines_dic":{"37":"StringSubjectTest::::hasLength()","38":"StringSubjectTest::::hasLength()","39":"StringSubjectTest::::hasLength()","40":"StringSubjectTest::::hasLength()","42":"StringSubjectTest::::hasLengthZero()","43":"StringSubjectTest::::hasLengthZero()","44":"StringSubjectTest::::hasLengthZero()","45":"StringSubjectTest::::hasLengthZero()","47":"StringSubjectTest::::hasLengthFails()","48":"StringSubjectTest::::hasLengthFails()","49":"StringSubjectTest::::hasLengthFails()","50":"StringSubjectTest::::hasLengthFails()","51":"StringSubjectTest::::hasLengthFails()","53":"StringSubjectTest::::hasLengthNegative()","54":"StringSubjectTest::::hasLengthNegative()","55":"StringSubjectTest::::hasLengthNegative()","56":"StringSubjectTest::::hasLengthNegative()","57":"StringSubjectTest::::hasLengthNegative()","58":"StringSubjectTest::::hasLengthNegative()","59":"StringSubjectTest::::hasLengthNegative()","60":"StringSubjectTest::::hasLengthNegative()","62":"StringSubjectTest::::stringIsEmpty()","63":"StringSubjectTest::::stringIsEmpty()","64":"StringSubjectTest::::stringIsEmpty()","65":"StringSubjectTest::::stringIsEmpty()","67":"StringSubjectTest::::stringIsEmptyFail()","68":"StringSubjectTest::::stringIsEmptyFail()","69":"StringSubjectTest::::stringIsEmptyFail()","70":"StringSubjectTest::::stringIsEmptyFail()","71":"StringSubjectTest::::stringIsEmptyFail()","73":"StringSubjectTest::::stringIsEmptyFailNull()","74":"StringSubjectTest::::stringIsEmptyFailNull()","75":"StringSubjectTest::::stringIsEmptyFailNull()","76":"StringSubjectTest::::stringIsEmptyFailNull()","77":"StringSubjectTest::::stringIsEmptyFailNull()","79":"StringSubjectTest::::stringIsNotEmpty()","80":"StringSubjectTest::::stringIsNotEmpty()","81":"StringSubjectTest::::stringIsNotEmpty()","82":"StringSubjectTest::::stringIsNotEmpty()","84":"StringSubjectTest::::stringIsNotEmptyFail()","85":"StringSubjectTest::::stringIsNotEmptyFail()","86":"StringSubjectTest::::stringIsNotEmptyFail()","87":"StringSubjectTest::::stringIsNotEmptyFail()","88":"StringSubjectTest::::stringIsNotEmptyFail()","90":"StringSubjectTest::::stringIsNotEmptyFailNull()","91":"StringSubjectTest::::stringIsNotEmptyFailNull()","92":"StringSubjectTest::::stringIsNotEmptyFailNull()","93":"StringSubjectTest::::stringIsNotEmptyFailNull()","94":"StringSubjectTest::::stringIsNotEmptyFailNull()","96":"StringSubjectTest::::stringContains()","97":"StringSubjectTest::::stringContains()","98":"StringSubjectTest::::stringContains()","99":"StringSubjectTest::::stringContains()","101":"StringSubjectTest::::stringContainsCharSeq()","102":"StringSubjectTest::::stringContainsCharSeq()","103":"StringSubjectTest::::stringContainsCharSeq()","104":"StringSubjectTest::::stringContainsCharSeq()","105":"StringSubjectTest::::stringContainsCharSeq()","107":"StringSubjectTest::::stringContainsFail()","108":"StringSubjectTest::::stringContainsFail()","109":"StringSubjectTest::::stringContainsFail()","110":"StringSubjectTest::::stringContainsFail()","111":"StringSubjectTest::::stringContainsFail()","113":"StringSubjectTest::::stringDoesNotContain()","114":"StringSubjectTest::::stringDoesNotContain()","115":"StringSubjectTest::::stringDoesNotContain()","116":"StringSubjectTest::::stringDoesNotContain()","118":"StringSubjectTest::::stringDoesNotContainCharSequence()","119":"StringSubjectTest::::stringDoesNotContainCharSequence()","120":"StringSubjectTest::::stringDoesNotContainCharSequence()","121":"StringSubjectTest::::stringDoesNotContainCharSequence()","122":"StringSubjectTest::::stringDoesNotContainCharSequence()","124":"StringSubjectTest::::stringDoesNotContainFail()","125":"StringSubjectTest::::stringDoesNotContainFail()","126":"StringSubjectTest::::stringDoesNotContainFail()","127":"StringSubjectTest::::stringDoesNotContainFail()","128":"StringSubjectTest::::stringDoesNotContainFail()","130":"StringSubjectTest::::stringEquality()","131":"StringSubjectTest::::stringEquality()","132":"StringSubjectTest::::stringEquality()","133":"StringSubjectTest::::stringEquality()","134":"StringSubjectTest::::stringEquality()","136":"StringSubjectTest::::stringEqualityToNull()","137":"StringSubjectTest::::stringEqualityToNull()","138":"StringSubjectTest::::stringEqualityToNull()","139":"StringSubjectTest::::stringEqualityToNull()","140":"StringSubjectTest::::stringEqualityToNull()","142":"StringSubjectTest::::stringEqualityToEmpty()","143":"StringSubjectTest::::stringEqualityToEmpty()","144":"StringSubjectTest::::stringEqualityToEmpty()","145":"StringSubjectTest::::stringEqualityToEmpty()","146":"StringSubjectTest::::stringEqualityToEmpty()","148":"StringSubjectTest::::stringEqualityEmptyToNonEmpty()","149":"StringSubjectTest::::stringEqualityEmptyToNonEmpty()","150":"StringSubjectTest::::stringEqualityEmptyToNonEmpty()","151":"StringSubjectTest::::stringEqualityEmptyToNonEmpty()","152":"StringSubjectTest::::stringEqualityEmptyToNonEmpty()","154":"StringSubjectTest::::stringEqualityFail()","155":"StringSubjectTest::::stringEqualityFail()","156":"StringSubjectTest::::stringEqualityFail()","157":"StringSubjectTest::::stringEqualityFail()","158":"StringSubjectTest::::stringEqualityFail()","160":"StringSubjectTest::::stringStartsWith()","161":"StringSubjectTest::::stringStartsWith()","162":"StringSubjectTest::::stringStartsWith()","163":"StringSubjectTest::::stringStartsWith()","165":"StringSubjectTest::::stringStartsWithFail()","166":"StringSubjectTest::::stringStartsWithFail()","167":"StringSubjectTest::::stringStartsWithFail()","168":"StringSubjectTest::::stringStartsWithFail()","169":"StringSubjectTest::::stringStartsWithFail()","171":"StringSubjectTest::::stringEndsWith()","172":"StringSubjectTest::::stringEndsWith()","173":"StringSubjectTest::::stringEndsWith()","174":"StringSubjectTest::::stringEndsWith()","176":"StringSubjectTest::::stringEndsWithFail()","177":"StringSubjectTest::::stringEndsWithFail()","178":"StringSubjectTest::::stringEndsWithFail()","179":"StringSubjectTest::::stringEndsWithFail()","180":"StringSubjectTest::::stringEndsWithFail()","182":"StringSubjectTest::::emptyStringTests()","183":"StringSubjectTest::::emptyStringTests()","184":"StringSubjectTest::::emptyStringTests()","185":"StringSubjectTest::::emptyStringTests()","186":"StringSubjectTest::::emptyStringTests()","187":"StringSubjectTest::::emptyStringTests()","188":"StringSubjectTest::::emptyStringTests()","189":"StringSubjectTest::::emptyStringTests()","190":"StringSubjectTest::::emptyStringTests()","192":"StringSubjectTest::::stringMatchesString()","193":"StringSubjectTest::::stringMatchesString()","194":"StringSubjectTest::::stringMatchesString()","195":"StringSubjectTest::::stringMatchesString()","197":"StringSubjectTest::::stringMatchesStringWithFail()","198":"StringSubjectTest::::stringMatchesStringWithFail()","199":"StringSubjectTest::::stringMatchesStringWithFail()","200":"StringSubjectTest::::stringMatchesStringWithFail()","201":"StringSubjectTest::::stringMatchesStringWithFail()","203":"StringSubjectTest::::stringMatchesStringFailNull()","204":"StringSubjectTest::::stringMatchesStringFailNull()","205":"StringSubjectTest::::stringMatchesStringFailNull()","206":"StringSubjectTest::::stringMatchesStringFailNull()","207":"StringSubjectTest::::stringMatchesStringFailNull()","209":"StringSubjectTest::::stringMatchesStringLiteralFail()","210":"StringSubjectTest::::stringMatchesStringLiteralFail()","211":"StringSubjectTest::::stringMatchesStringLiteralFail()","212":"StringSubjectTest::::stringMatchesStringLiteralFail()","213":"StringSubjectTest::::stringMatchesStringLiteralFail()","214":"StringSubjectTest::::stringMatchesStringLiteralFail()","215":"StringSubjectTest::::stringMatchesStringLiteralFail()","216":"StringSubjectTest::::stringMatchesStringLiteralFail()","217":"StringSubjectTest::::stringMatchesStringLiteralFail()","219":"StringSubjectTest::::stringMatchesPattern()","220":"StringSubjectTest::::stringMatchesPattern()","221":"StringSubjectTest::::stringMatchesPattern()","222":"StringSubjectTest::::stringMatchesPattern()","223":"StringSubjectTest::::stringMatchesPattern()","225":"StringSubjectTest::::stringMatchesPatternWithFail()","226":"StringSubjectTest::::stringMatchesPatternWithFail()","227":"StringSubjectTest::::stringMatchesPatternWithFail()","228":"StringSubjectTest::::stringMatchesPatternWithFail()","229":"StringSubjectTest::::stringMatchesPatternWithFail()","230":"StringSubjectTest::::stringMatchesPatternWithFail()","232":"StringSubjectTest::::stringMatchesPatternFailNull()","233":"StringSubjectTest::::stringMatchesPatternFailNull()","234":"StringSubjectTest::::stringMatchesPatternFailNull()","235":"StringSubjectTest::::stringMatchesPatternFailNull()","236":"StringSubjectTest::::stringMatchesPatternFailNull()","237":"StringSubjectTest::::stringMatchesPatternFailNull()","239":"StringSubjectTest::::stringMatchesPatternLiteralFail()","240":"StringSubjectTest::::stringMatchesPatternLiteralFail()","241":"StringSubjectTest::::stringMatchesPatternLiteralFail()","242":"StringSubjectTest::::stringMatchesPatternLiteralFail()","243":"StringSubjectTest::::stringMatchesPatternLiteralFail()","244":"StringSubjectTest::::stringMatchesPatternLiteralFail()","245":"StringSubjectTest::::stringMatchesPatternLiteralFail()","246":"StringSubjectTest::::stringMatchesPatternLiteralFail()","247":"StringSubjectTest::::stringMatchesPatternLiteralFail()","248":"StringSubjectTest::::stringMatchesPatternLiteralFail()","249":"StringSubjectTest::::stringMatchesPatternLiteralFail()","250":"StringSubjectTest::::stringMatchesPatternLiteralFail()","252":"StringSubjectTest::::stringDoesNotMatchString()","253":"StringSubjectTest::::stringDoesNotMatchString()","254":"StringSubjectTest::::stringDoesNotMatchString()","255":"StringSubjectTest::::stringDoesNotMatchString()","257":"StringSubjectTest::::stringDoesNotMatchStringWithFail()","258":"StringSubjectTest::::stringDoesNotMatchStringWithFail()","259":"StringSubjectTest::::stringDoesNotMatchStringWithFail()","260":"StringSubjectTest::::stringDoesNotMatchStringWithFail()","261":"StringSubjectTest::::stringDoesNotMatchStringWithFail()","263":"StringSubjectTest::::stringDoesNotMatchStringFailNull()","264":"StringSubjectTest::::stringDoesNotMatchStringFailNull()","265":"StringSubjectTest::::stringDoesNotMatchStringFailNull()","266":"StringSubjectTest::::stringDoesNotMatchStringFailNull()","267":"StringSubjectTest::::stringDoesNotMatchStringFailNull()","269":"StringSubjectTest::::stringDoesNotMatchPattern()","270":"StringSubjectTest::::stringDoesNotMatchPattern()","271":"StringSubjectTest::::stringDoesNotMatchPattern()","272":"StringSubjectTest::::stringDoesNotMatchPattern()","273":"StringSubjectTest::::stringDoesNotMatchPattern()","275":"StringSubjectTest::::stringDoesNotMatchPatternWithFail()","276":"StringSubjectTest::::stringDoesNotMatchPatternWithFail()","277":"StringSubjectTest::::stringDoesNotMatchPatternWithFail()","278":"StringSubjectTest::::stringDoesNotMatchPatternWithFail()","279":"StringSubjectTest::::stringDoesNotMatchPatternWithFail()","280":"StringSubjectTest::::stringDoesNotMatchPatternWithFail()","282":"StringSubjectTest::::stringDoesNotMatchPatternFailNull()","283":"StringSubjectTest::::stringDoesNotMatchPatternFailNull()","284":"StringSubjectTest::::stringDoesNotMatchPatternFailNull()","285":"StringSubjectTest::::stringDoesNotMatchPatternFailNull()","286":"StringSubjectTest::::stringDoesNotMatchPatternFailNull()","287":"StringSubjectTest::::stringDoesNotMatchPatternFailNull()","289":"StringSubjectTest::::stringContainsMatchStringUsesFind()","290":"StringSubjectTest::::stringContainsMatchStringUsesFind()","291":"StringSubjectTest::::stringContainsMatchStringUsesFind()","292":"StringSubjectTest::::stringContainsMatchStringUsesFind()","293":"StringSubjectTest::::stringContainsMatchStringUsesFind()","294":"StringSubjectTest::::stringContainsMatchStringUsesFind()","296":"StringSubjectTest::::stringContainsMatchString()","297":"StringSubjectTest::::stringContainsMatchString()","298":"StringSubjectTest::::stringContainsMatchString()","299":"StringSubjectTest::::stringContainsMatchString()","300":"StringSubjectTest::::stringContainsMatchString()","301":"StringSubjectTest::::stringContainsMatchString()","302":"StringSubjectTest::::stringContainsMatchString()","304":"StringSubjectTest::::stringContainsMatchStringFailNull()","305":"StringSubjectTest::::stringContainsMatchStringFailNull()","306":"StringSubjectTest::::stringContainsMatchStringFailNull()","307":"StringSubjectTest::::stringContainsMatchStringFailNull()","308":"StringSubjectTest::::stringContainsMatchStringFailNull()","310":"StringSubjectTest::::stringContainsMatchPattern()","311":"StringSubjectTest::::stringContainsMatchPattern()","312":"StringSubjectTest::::stringContainsMatchPattern()","313":"StringSubjectTest::::stringContainsMatchPattern()","314":"StringSubjectTest::::stringContainsMatchPattern()","315":"StringSubjectTest::::stringContainsMatchPattern()","316":"StringSubjectTest::::stringContainsMatchPattern()","317":"StringSubjectTest::::stringContainsMatchPattern()","319":"StringSubjectTest::::stringContainsMatchPatternFailNull()","320":"StringSubjectTest::::stringContainsMatchPatternFailNull()","321":"StringSubjectTest::::stringContainsMatchPatternFailNull()","322":"StringSubjectTest::::stringContainsMatchPatternFailNull()","323":"StringSubjectTest::::stringContainsMatchPatternFailNull()","324":"StringSubjectTest::::stringContainsMatchPatternFailNull()","326":"StringSubjectTest::::stringDoesNotContainMatchString()","327":"StringSubjectTest::::stringDoesNotContainMatchString()","328":"StringSubjectTest::::stringDoesNotContainMatchString()","329":"StringSubjectTest::::stringDoesNotContainMatchString()","330":"StringSubjectTest::::stringDoesNotContainMatchString()","331":"StringSubjectTest::::stringDoesNotContainMatchString()","332":"StringSubjectTest::::stringDoesNotContainMatchString()","334":"StringSubjectTest::::stringDoesNotContainMatchStringUsesFind()","335":"StringSubjectTest::::stringDoesNotContainMatchStringUsesFind()","336":"StringSubjectTest::::stringDoesNotContainMatchStringUsesFind()","337":"StringSubjectTest::::stringDoesNotContainMatchStringUsesFind()","338":"StringSubjectTest::::stringDoesNotContainMatchStringUsesFind()","340":"StringSubjectTest::::stringDoesNotContainMatchStringUsesFindFailNull()","341":"StringSubjectTest::::stringDoesNotContainMatchStringUsesFindFailNull()","342":"StringSubjectTest::::stringDoesNotContainMatchStringUsesFindFailNull()","343":"StringSubjectTest::::stringDoesNotContainMatchStringUsesFindFailNull()","344":"StringSubjectTest::::stringDoesNotContainMatchStringUsesFindFailNull()","346":"StringSubjectTest::::stringDoesNotContainMatchPattern()","347":"StringSubjectTest::::stringDoesNotContainMatchPattern()","348":"StringSubjectTest::::stringDoesNotContainMatchPattern()","349":"StringSubjectTest::::stringDoesNotContainMatchPattern()","350":"StringSubjectTest::::stringDoesNotContainMatchPattern()","351":"StringSubjectTest::::stringDoesNotContainMatchPattern()","352":"StringSubjectTest::::stringDoesNotContainMatchPattern()","353":"StringSubjectTest::::stringDoesNotContainMatchPattern()","354":"StringSubjectTest::::stringDoesNotContainMatchPattern()","355":"StringSubjectTest::::stringDoesNotContainMatchPattern()","357":"StringSubjectTest::::stringDoesNotContainMatchPatternFailNull()","358":"StringSubjectTest::::stringDoesNotContainMatchPatternFailNull()","359":"StringSubjectTest::::stringDoesNotContainMatchPatternFailNull()","360":"StringSubjectTest::::stringDoesNotContainMatchPatternFailNull()","361":"StringSubjectTest::::stringDoesNotContainMatchPatternFailNull()","362":"StringSubjectTest::::stringDoesNotContainMatchPatternFailNull()","364":"StringSubjectTest::::stringEqualityIgnoringCase()","365":"StringSubjectTest::::stringEqualityIgnoringCase()","366":"StringSubjectTest::::stringEqualityIgnoringCase()","367":"StringSubjectTest::::stringEqualityIgnoringCase()","369":"StringSubjectTest::::stringEqualityIgnoringCaseWithNullSubject()","370":"StringSubjectTest::::stringEqualityIgnoringCaseWithNullSubject()","371":"StringSubjectTest::::stringEqualityIgnoringCaseWithNullSubject()","372":"StringSubjectTest::::stringEqualityIgnoringCaseWithNullSubject()","374":"StringSubjectTest::::stringEqualityIgnoringCaseFail()","375":"StringSubjectTest::::stringEqualityIgnoringCaseFail()","376":"StringSubjectTest::::stringEqualityIgnoringCaseFail()","377":"StringSubjectTest::::stringEqualityIgnoringCaseFail()","378":"StringSubjectTest::::stringEqualityIgnoringCaseFail()","379":"StringSubjectTest::::stringEqualityIgnoringCaseFail()","380":"StringSubjectTest::::stringEqualityIgnoringCaseFail()","382":"StringSubjectTest::::stringEqualityIgnoringCaseFailWithNullSubject()","383":"StringSubjectTest::::stringEqualityIgnoringCaseFailWithNullSubject()","384":"StringSubjectTest::::stringEqualityIgnoringCaseFailWithNullSubject()","385":"StringSubjectTest::::stringEqualityIgnoringCaseFailWithNullSubject()","386":"StringSubjectTest::::stringEqualityIgnoringCaseFailWithNullSubject()","387":"StringSubjectTest::::stringEqualityIgnoringCaseFailWithNullSubject()","388":"StringSubjectTest::::stringEqualityIgnoringCaseFailWithNullSubject()","390":"StringSubjectTest::::stringEqualityIgnoringCaseFailWithNullExpectedString()","391":"StringSubjectTest::::stringEqualityIgnoringCaseFailWithNullExpectedString()","392":"StringSubjectTest::::stringEqualityIgnoringCaseFailWithNullExpectedString()","393":"StringSubjectTest::::stringEqualityIgnoringCaseFailWithNullExpectedString()","394":"StringSubjectTest::::stringEqualityIgnoringCaseFailWithNullExpectedString()","395":"StringSubjectTest::::stringEqualityIgnoringCaseFailWithNullExpectedString()","396":"StringSubjectTest::::stringEqualityIgnoringCaseFailWithNullExpectedString()","398":"StringSubjectTest::::stringInequalityIgnoringCase()","399":"StringSubjectTest::::stringInequalityIgnoringCase()","400":"StringSubjectTest::::stringInequalityIgnoringCase()","401":"StringSubjectTest::::stringInequalityIgnoringCase()","403":"StringSubjectTest::::stringInequalityIgnoringCaseWithNullSubject()","404":"StringSubjectTest::::stringInequalityIgnoringCaseWithNullSubject()","405":"StringSubjectTest::::stringInequalityIgnoringCaseWithNullSubject()","406":"StringSubjectTest::::stringInequalityIgnoringCaseWithNullSubject()","408":"StringSubjectTest::::stringInequalityIgnoringCaseWithNullExpectedString()","409":"StringSubjectTest::::stringInequalityIgnoringCaseWithNullExpectedString()","410":"StringSubjectTest::::stringInequalityIgnoringCaseWithNullExpectedString()","411":"StringSubjectTest::::stringInequalityIgnoringCaseWithNullExpectedString()","413":"StringSubjectTest::::stringInequalityIgnoringCaseFail()","414":"StringSubjectTest::::stringInequalityIgnoringCaseFail()","415":"StringSubjectTest::::stringInequalityIgnoringCaseFail()","416":"StringSubjectTest::::stringInequalityIgnoringCaseFail()","417":"StringSubjectTest::::stringInequalityIgnoringCaseFail()","418":"StringSubjectTest::::stringInequalityIgnoringCaseFail()","419":"StringSubjectTest::::stringInequalityIgnoringCaseFail()","421":"StringSubjectTest::::stringInequalityIgnoringCaseFailWithNullSubject()","422":"StringSubjectTest::::stringInequalityIgnoringCaseFailWithNullSubject()","423":"StringSubjectTest::::stringInequalityIgnoringCaseFailWithNullSubject()","424":"StringSubjectTest::::stringInequalityIgnoringCaseFailWithNullSubject()","425":"StringSubjectTest::::stringInequalityIgnoringCaseFailWithNullSubject()","426":"StringSubjectTest::::stringInequalityIgnoringCaseFailWithNullSubject()","427":"StringSubjectTest::::stringInequalityIgnoringCaseFailWithNullSubject()","429":"StringSubjectTest::::stringContainsIgnoringCase()","430":"StringSubjectTest::::stringContainsIgnoringCase()","431":"StringSubjectTest::::stringContainsIgnoringCase()","432":"StringSubjectTest::::stringContainsIgnoringCase()","434":"StringSubjectTest::::stringContainsIgnoringCaseEmptyString()","435":"StringSubjectTest::::stringContainsIgnoringCaseEmptyString()","436":"StringSubjectTest::::stringContainsIgnoringCaseEmptyString()","437":"StringSubjectTest::::stringContainsIgnoringCaseEmptyString()","439":"StringSubjectTest::::stringContainsIgnoringCaseWithWord()","440":"StringSubjectTest::::stringContainsIgnoringCaseWithWord()","441":"StringSubjectTest::::stringContainsIgnoringCaseWithWord()","442":"StringSubjectTest::::stringContainsIgnoringCaseWithWord()","444":"StringSubjectTest::::stringContainsIgnoringCaseWholeWord()","445":"StringSubjectTest::::stringContainsIgnoringCaseWholeWord()","446":"StringSubjectTest::::stringContainsIgnoringCaseWholeWord()","447":"StringSubjectTest::::stringContainsIgnoringCaseWholeWord()","449":"StringSubjectTest::::stringContainsIgnoringCaseCharSeq()","450":"StringSubjectTest::::stringContainsIgnoringCaseCharSeq()","451":"StringSubjectTest::::stringContainsIgnoringCaseCharSeq()","452":"StringSubjectTest::::stringContainsIgnoringCaseCharSeq()","453":"StringSubjectTest::::stringContainsIgnoringCaseCharSeq()","455":"StringSubjectTest::::stringContainsIgnoringCaseFail()","456":"StringSubjectTest::::stringContainsIgnoringCaseFail()","457":"StringSubjectTest::::stringContainsIgnoringCaseFail()","458":"StringSubjectTest::::stringContainsIgnoringCaseFail()","459":"StringSubjectTest::::stringContainsIgnoringCaseFail()","460":"StringSubjectTest::::stringContainsIgnoringCaseFail()","461":"StringSubjectTest::::stringContainsIgnoringCaseFail()","463":"StringSubjectTest::::stringContainsIgnoringCaseFailBecauseTooLarge()","464":"StringSubjectTest::::stringContainsIgnoringCaseFailBecauseTooLarge()","465":"StringSubjectTest::::stringContainsIgnoringCaseFailBecauseTooLarge()","466":"StringSubjectTest::::stringContainsIgnoringCaseFailBecauseTooLarge()","467":"StringSubjectTest::::stringContainsIgnoringCaseFailBecauseTooLarge()","468":"StringSubjectTest::::stringContainsIgnoringCaseFailBecauseTooLarge()","469":"StringSubjectTest::::stringContainsIgnoringCaseFailBecauseTooLarge()","471":"StringSubjectTest::::stringContainsIgnoringCaseFailBecauseNullSubject()","472":"StringSubjectTest::::stringContainsIgnoringCaseFailBecauseNullSubject()","473":"StringSubjectTest::::stringContainsIgnoringCaseFailBecauseNullSubject()","474":"StringSubjectTest::::stringContainsIgnoringCaseFailBecauseNullSubject()","475":"StringSubjectTest::::stringContainsIgnoringCaseFailBecauseNullSubject()","476":"StringSubjectTest::::stringContainsIgnoringCaseFailBecauseNullSubject()","477":"StringSubjectTest::::stringContainsIgnoringCaseFailBecauseNullSubject()","479":"StringSubjectTest::::stringDoesNotContainIgnoringCase()","480":"StringSubjectTest::::stringDoesNotContainIgnoringCase()","481":"StringSubjectTest::::stringDoesNotContainIgnoringCase()","482":"StringSubjectTest::::stringDoesNotContainIgnoringCase()","484":"StringSubjectTest::::stringDoesNotContainIgnoringCaseCharSeq()","485":"StringSubjectTest::::stringDoesNotContainIgnoringCaseCharSeq()","486":"StringSubjectTest::::stringDoesNotContainIgnoringCaseCharSeq()","487":"StringSubjectTest::::stringDoesNotContainIgnoringCaseCharSeq()","488":"StringSubjectTest::::stringDoesNotContainIgnoringCaseCharSeq()","490":"StringSubjectTest::::stringDoesNotContainIgnoringCaseFail()","491":"StringSubjectTest::::stringDoesNotContainIgnoringCaseFail()","492":"StringSubjectTest::::stringDoesNotContainIgnoringCaseFail()","493":"StringSubjectTest::::stringDoesNotContainIgnoringCaseFail()","494":"StringSubjectTest::::stringDoesNotContainIgnoringCaseFail()","495":"StringSubjectTest::::stringDoesNotContainIgnoringCaseFail()","496":"StringSubjectTest::::stringDoesNotContainIgnoringCaseFail()","498":"StringSubjectTest::::stringDoesNotContainIgnoringCaseFailWithEmptyString()","499":"StringSubjectTest::::stringDoesNotContainIgnoringCaseFailWithEmptyString()","500":"StringSubjectTest::::stringDoesNotContainIgnoringCaseFailWithEmptyString()","501":"StringSubjectTest::::stringDoesNotContainIgnoringCaseFailWithEmptyString()","502":"StringSubjectTest::::stringDoesNotContainIgnoringCaseFailWithEmptyString()","503":"StringSubjectTest::::stringDoesNotContainIgnoringCaseFailWithEmptyString()","504":"StringSubjectTest::::stringDoesNotContainIgnoringCaseFailWithEmptyString()","506":"StringSubjectTest::::stringDoesNotContainIgnoringCaseFailBecauseNullSubject()","507":"StringSubjectTest::::stringDoesNotContainIgnoringCaseFailBecauseNullSubject()","508":"StringSubjectTest::::stringDoesNotContainIgnoringCaseFailBecauseNullSubject()","509":"StringSubjectTest::::stringDoesNotContainIgnoringCaseFailBecauseNullSubject()","510":"StringSubjectTest::::stringDoesNotContainIgnoringCaseFailBecauseNullSubject()","511":"StringSubjectTest::::stringDoesNotContainIgnoringCaseFailBecauseNullSubject()","512":"StringSubjectTest::::stringDoesNotContainIgnoringCaseFailBecauseNullSubject()","514":"StringSubjectTest::::trailingWhitespaceInActual()","515":"StringSubjectTest::::trailingWhitespaceInActual()","516":"StringSubjectTest::::trailingWhitespaceInActual()","517":"StringSubjectTest::::trailingWhitespaceInActual()","518":"StringSubjectTest::::trailingWhitespaceInActual()","519":"StringSubjectTest::::trailingWhitespaceInActual()","521":"StringSubjectTest::::trailingWhitespaceInExpected()","522":"StringSubjectTest::::trailingWhitespaceInExpected()","523":"StringSubjectTest::::trailingWhitespaceInExpected()","524":"StringSubjectTest::::trailingWhitespaceInExpected()","525":"StringSubjectTest::::trailingWhitespaceInExpected()","526":"StringSubjectTest::::trailingWhitespaceInExpected()","528":"StringSubjectTest::::trailingWhitespaceInBoth()","529":"StringSubjectTest::::trailingWhitespaceInBoth()","530":"StringSubjectTest::::trailingWhitespaceInBoth()","531":"StringSubjectTest::::trailingWhitespaceInBoth()","532":"StringSubjectTest::::trailingWhitespaceInBoth()","533":"StringSubjectTest::::trailingWhitespaceInBoth()","534":"StringSubjectTest::::trailingWhitespaceInBoth()","536":"StringSubjectTest::::trailingWhitespaceVsEmptyString()","537":"StringSubjectTest::::trailingWhitespaceVsEmptyString()","538":"StringSubjectTest::::trailingWhitespaceVsEmptyString()","539":"StringSubjectTest::::trailingWhitespaceVsEmptyString()","540":"StringSubjectTest::::trailingWhitespaceVsEmptyString()","541":"StringSubjectTest::::trailingWhitespaceVsEmptyString()","542":"StringSubjectTest::::trailingWhitespaceVsEmptyString()","543":"StringSubjectTest::::trailingWhitespaceVsEmptyString()","544":"StringSubjectTest::::trailingWhitespaceVsEmptyString()","545":"StringSubjectTest::::trailingWhitespaceVsEmptyString()","546":"StringSubjectTest::::trailingWhitespaceVsEmptyString()","548":"StringSubjectTest::::expectFailureWhenTestingThat(java.lang.String)","549":"StringSubjectTest::::expectFailureWhenTestingThat(java.lang.String)","550":"StringSubjectTest::::expectFailureWhenTestingThat(java.lang.String)"},"tests":[{"test_lines":[37,40],"covered_lines":[42,43,44,57,58,59],"label":"StringSubject::::hasLength(int)"},{"test_lines":[42,45],"covered_lines":[42,43,44,57,58,59],"label":"StringSubject::::hasLength(int)"},{"test_lines":[47,51],"covered_lines":[42,43,44,57,58,59],"label":"StringSubject::::hasLength(int)"},{"test_lines":[53,60],"covered_lines":[42,43,44,57],"label":"StringSubject::::hasLength(int)"},{"test_lines":[62,65],"covered_lines":[42,43,44,63,65,68],"label":"StringSubject::::isEmpty()"},{"test_lines":[67,71],"covered_lines":[42,43,44,63,65,66,68],"label":"StringSubject::::isEmpty()"},{"test_lines":[73,77],"covered_lines":[42,43,44,63,64,68],"label":"StringSubject::::isEmpty()"},{"test_lines":[79,82],"covered_lines":[42,43,44,72,74,77],"label":"StringSubject::::isNotEmpty()"},{"test_lines":[84,88],"covered_lines":[42,43,44,72,74,75,77],"label":"StringSubject::::isNotEmpty()"},{"test_lines":[90,94],"covered_lines":[42,43,44,72,73,77],"label":"StringSubject::::isNotEmpty()"},{"test_lines":[96,99],"covered_lines":[42,43,44,81,82,84,87],"label":"StringSubject::::contains(java.lang.CharSequence)"},{"test_lines":[101,105],"covered_lines":[42,43,44,81,82,84,87],"label":"StringSubject::::contains(java.lang.CharSequence)"},{"test_lines":[107,111],"covered_lines":[42,43,44,81,82,84,85,87],"label":"StringSubject::::contains(java.lang.CharSequence)"},{"test_lines":[113,116],"covered_lines":[42,43,44,91,92,94,97],"label":"StringSubject::::doesNotContain(java.lang.CharSequence)"},{"test_lines":[118,122],"covered_lines":[42,43,44,91,92,94,97],"label":"StringSubject::::doesNotContain(java.lang.CharSequence)"},{"test_lines":[124,128],"covered_lines":[42,43,44,91,92,94,95,97],"label":"StringSubject::::doesNotContain(java.lang.CharSequence)"},{"test_lines":[130,134],"covered_lines":[42,43,44],"label":"<<UNRECOGNISED_METHOD>>"},{"test_lines":[136,140],"covered_lines":[42,43,44],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[142,146],"covered_lines":[42,43,44],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[148,152],"covered_lines":[42,43,44],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[154,158],"covered_lines":[42,43,44],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[160,163],"covered_lines":[42,43,44,101,102,104,107],"label":"StringSubject::::startsWith(java.lang.String)"},{"test_lines":[165,169],"covered_lines":[42,43,44,101,102,104,105,107],"label":"StringSubject::::startsWith(java.lang.String)"},{"test_lines":[171,174],"covered_lines":[42,43,44,111,112,114,117],"label":"StringSubject::::endsWith(java.lang.String)"},{"test_lines":[176,180],"covered_lines":[42,43,44,111,112,114,115,117],"label":"StringSubject::::endsWith(java.lang.String)"},{"test_lines":[182,190],"covered_lines":[42,43,44,81,82,84,87,101,102,104,107,111,112,114,117],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[192,195],"covered_lines":[42,43,44,121,122,124,134],"label":"StringSubject::::matches(java.lang.String)"},{"test_lines":[197,201],"covered_lines":[42,43,44,121,122,124,125,131,134],"label":"StringSubject::::matches(java.lang.String)"},{"test_lines":[203,207],"covered_lines":[42,43,44,121,122,123,134],"label":"StringSubject::::matches(java.lang.String)"},{"test_lines":[209,217],"covered_lines":[42,43,44,121,122,124,125,126,127,128,129,134],"label":"StringSubject::::matches(java.lang.String)"},{"test_lines":[219,223],"covered_lines":[42,43,44,139,140,142,154],"label":"StringSubject::::matches(java.util.regex.Pattern)"},{"test_lines":[225,230],"covered_lines":[42,43,44,139,140,142,143,151,154],"label":"StringSubject::::matches(java.util.regex.Pattern)"},{"test_lines":[232,237],"covered_lines":[42,43,44,139,140,141,154],"label":"StringSubject::::matches(java.util.regex.Pattern)"},{"test_lines":[239,250],"covered_lines":[42,43,44,139,140,142,143,144,145,146,147,154],"label":"StringSubject::::matches(java.util.regex.Pattern)"},{"test_lines":[252,255],"covered_lines":[42,43,44,158,159,161,164],"label":"StringSubject::::doesNotMatch(java.lang.String)"},{"test_lines":[257,261],"covered_lines":[42,43,44,158,159,161,162,164],"label":"StringSubject::::doesNotMatch(java.lang.String)"},{"test_lines":[263,267],"covered_lines":[42,43,44,158,159,160,164],"label":"StringSubject::::doesNotMatch(java.lang.String)"},{"test_lines":[269,273],"covered_lines":[42,43,44,169,170,172,175],"label":"StringSubject::::doesNotMatch(java.util.regex.Pattern)"},{"test_lines":[275,280],"covered_lines":[42,43,44,169,170,172,173,175],"label":"StringSubject::::doesNotMatch(java.util.regex.Pattern)"},{"test_lines":[282,287],"covered_lines":[42,43,44,169,170,171,175],"label":"StringSubject::::doesNotMatch(java.util.regex.Pattern)"},{"test_lines":[289,294],"covered_lines":[42,43,44,180,181,183,186,190,191,193,196],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[296,302],"covered_lines":[42,43,44,190,191,193,194,196],"label":"StringSubject::::containsMatch(java.lang.String)"},{"test_lines":[304,308],"covered_lines":[42,43,44,190,191,192,196],"label":"StringSubject::::containsMatch(java.lang.String)"},{"test_lines":[310,317],"covered_lines":[42,43,44,180,181,183,184,186],"label":"StringSubject::::containsMatch(java.util.regex.Pattern)"},{"test_lines":[319,324],"covered_lines":[42,43,44,180,181,182,186],"label":"StringSubject::::containsMatch(java.util.regex.Pattern)"},{"test_lines":[326,332],"covered_lines":[42,43,44,217,218,220,221,223],"label":"StringSubject::::doesNotContainMatch(java.lang.String)"},{"test_lines":[334,338],"covered_lines":[42,43,44,217,218,220,221,223],"label":"StringSubject::::doesNotContainMatch(java.lang.String)"},{"test_lines":[340,344],"covered_lines":[42,43,44,217,218,219,223],"label":"StringSubject::::doesNotContainMatch(java.lang.String)"},{"test_lines":[346,355],"covered_lines":[42,43,44,201,202,206,207,208,209,210,211,213],"label":"StringSubject::::doesNotContainMatch(java.util.regex.Pattern)"},{"test_lines":[357,362],"covered_lines":[42,43,44,201,202,203,204],"label":"StringSubject::::doesNotContainMatch(java.util.regex.Pattern)"},{"test_lines":[364,367],"covered_lines":[42,43,44,233,239,253,261,264,268],"label":"StringSubject::::ignoringCase()"},{"test_lines":[369,372],"covered_lines":[42,43,44,233,239,253,254,268],"label":"StringSubject::::ignoringCase()"},{"test_lines":[374,380],"covered_lines":[42,43,44,233,239,253,261,264,265,268],"label":"StringSubject::::ignoringCase()"},{"test_lines":[382,388],"covered_lines":[42,43,44,233,239,253,254,255,256,257,258,268],"label":"StringSubject.CaseInsensitiveStringComparison::::isEqualTo(java.lang.String)"},{"test_lines":[390,396],"covered_lines":[42,43,44,233,239,253,261,262,263,268],"label":"StringSubject.CaseInsensitiveStringComparison::::isEqualTo(java.lang.String)"},{"test_lines":[398,401],"covered_lines":[42,43,44,233,239,275,282,287],"label":"StringSubject.CaseInsensitiveStringComparison::::isNotEqualTo(java.lang.String)"},{"test_lines":[403,406],"covered_lines":[42,43,44,233,239,275,276,287],"label":"StringSubject.CaseInsensitiveStringComparison::::isNotEqualTo(java.lang.String)"},{"test_lines":[408,411],"covered_lines":[42,43,44,233,239,275,282,287],"label":"StringSubject.CaseInsensitiveStringComparison::::isNotEqualTo(java.lang.String)"},{"test_lines":[413,419],"covered_lines":[42,43,44,233,239,275,282,283,284,287],"label":"StringSubject.CaseInsensitiveStringComparison::::isNotEqualTo(java.lang.String)"},{"test_lines":[421,427],"covered_lines":[42,43,44,233,239,275,276,277,278,279,287],"label":"StringSubject.CaseInsensitiveStringComparison::::isNotEqualTo(java.lang.String)"},{"test_lines":[429,432],"covered_lines":[42,43,44,233,239,291,292,293,298,302,320,321,325,326,327,329,334,335],"label":"StringSubject.CaseInsensitiveStringComparison::::contains(java.lang.CharSequence)"},{"test_lines":[434,437],"covered_lines":[42,43,44,233,239,291,292,293,298,302,320,321,323],"label":"StringSubject.CaseInsensitiveStringComparison::::contains(java.lang.CharSequence)"},{"test_lines":[439,442],"covered_lines":[42,43,44,233,239,291,292,293,298,302,320,321,325,326,327,328,329,334,335],"label":"StringSubject.CaseInsensitiveStringComparison::::contains(java.lang.CharSequence)"},{"test_lines":[444,447],"covered_lines":[42,43,44,233,239,291,292,293,298,302,320,321,325,326,327,329,334,335],"label":"StringSubject.CaseInsensitiveStringComparison::::contains(java.lang.CharSequence)"},{"test_lines":[449,453],"covered_lines":[42,43,44,233,239,291,292,293,298,302,320,321,325,326,327,328,329,334,335],"label":"StringSubject.CaseInsensitiveStringComparison::::contains(java.lang.CharSequence)"},{"test_lines":[455,461],"covered_lines":[42,43,44,233,239,291,292,293,298,299,300,302,320,321,325,326,327,328,329,334,338],"label":"StringSubject.CaseInsensitiveStringComparison::::contains(java.lang.CharSequence)"},{"test_lines":[463,469],"covered_lines":[42,43,44,233,239,291,292,293,298,299,300,302,320,321,325,326,327,338],"label":"StringSubject.CaseInsensitiveStringComparison::::contains(java.lang.CharSequence)"},{"test_lines":[471,477],"covered_lines":[42,43,44,233,239,291,292,293,294,295,296,297,302],"label":"StringSubject.CaseInsensitiveStringComparison::::contains(java.lang.CharSequence)"},{"test_lines":[479,482],"covered_lines":[42,43,44,233,239,306,307,308,313,317,320,321,325,326,327,328,329,334,338],"label":"StringSubject.CaseInsensitiveStringComparison::::doesNotContain(java.lang.CharSequence)"},{"test_lines":[484,488],"covered_lines":[42,43,44,233,239,306,307,308,313,317,320,321,325,326,327,328,329,334,338],"label":"StringSubject.CaseInsensitiveStringComparison::::doesNotContain(java.lang.CharSequence)"},{"test_lines":[490,496],"covered_lines":[42,43,44,233,239,306,307,308,313,314,315,317,320,321,325,326,327,329,334,335],"label":"StringSubject.CaseInsensitiveStringComparison::::doesNotContain(java.lang.CharSequence)"},{"test_lines":[498,504],"covered_lines":[42,43,44,233,239,306,307,308,313,314,315,317,320,321,323],"label":"StringSubject.CaseInsensitiveStringComparison::::doesNotContain(java.lang.CharSequence)"},{"test_lines":[506,512],"covered_lines":[42,43,44,233,239,306,307,308,309,310,311,312,317],"label":"StringSubject.CaseInsensitiveStringComparison::::doesNotContain(java.lang.CharSequence)"},{"test_lines":[514,519],"covered_lines":[42,43,44],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[521,526],"covered_lines":[42,43,44],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[528,534],"covered_lines":[42,43,44],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[536,546],"covered_lines":[42,43,44],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/truth/core/src/main/java/com/google/common/truth/IntegerSubject.java":{"class_content":["/*\n"," * Copyright (c) 2011 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.base.Preconditions.checkArgument;\n","import static com.google.common.base.Preconditions.checkNotNull;\n","import static com.google.common.truth.Fact.fact;\n","import static com.google.common.truth.MathUtil.equalWithinTolerance;\n","\n","import org.checkerframework.checker.nullness.qual.Nullable;\n","\n","/**\n"," * Propositions for {@link Integer} subjects.\n"," *\n"," * @author David Saff\n"," * @author Christian Gruber (cgruber@israfil.net)\n"," * @author Kurt Alfred Kluever\n"," */\n","public class IntegerSubject extends ComparableSubject<Integer> {\n","  private final @Nullable Integer actual;\n","\n","  /**\n","   * Constructor for use by subclasses. If you want to create an instance of this class itself, call\n","   * {@link Subject#check(String, Object...) check(...)}{@code .that(actual)}.\n","   */\n","  protected IntegerSubject(FailureMetadata metadata, @Nullable Integer actual) {\n","    super(metadata, actual);\n","    this.actual = actual;\n","  }\n","\n","  /**\n","   * A partially specified check about an approximate relationship to a {@code int} subject using a\n","   * tolerance.\n","   *\n","   * @since 1.2\n","   */\n","  public abstract static class TolerantIntegerComparison {\n","\n","    // Prevent subclassing outside of this class\n","    private TolerantIntegerComparison() {}\n","\n","    /**\n","     * Fails if the subject was expected to be within the tolerance of the given value but was not\n","     * <i>or</i> if it was expected <i>not</i> to be within the tolerance but was. The subject and\n","     * tolerance are specified earlier in the fluent call chain.\n","     */\n","    public abstract void of(int expectedInteger);\n","\n","    /**\n","     * @throws UnsupportedOperationException always\n","     * @deprecated {@link Object#equals(Object)} is not supported on TolerantIntegerComparison. If\n","     *     you meant to compare ints, use {@link #of(int)} instead.\n","     */\n","    @Deprecated\n","    @Override\n","    public boolean equals(@Nullable Object o) {\n","      throw new UnsupportedOperationException(\n","          \"If you meant to compare ints, use .of(int) instead.\");\n","    }\n","\n","    /**\n","     * @throws UnsupportedOperationException always\n","     * @deprecated {@link Object#hashCode()} is not supported on TolerantIntegerComparison\n","     */\n","    @Deprecated\n","    @Override\n","    public int hashCode() {\n","      throw new UnsupportedOperationException(\"Subject.hashCode() is not supported.\");\n","    }\n","  }\n","\n","  /**\n","   * Prepares for a check that the subject is a number within the given tolerance of an expected\n","   * value that will be provided in the next call in the fluent chain.\n","   *\n","   * @param tolerance an inclusive upper bound on the difference between the subject and object\n","   *     allowed by the check, which must be a non-negative value.\n","   * @since 1.2\n","   */\n","  public TolerantIntegerComparison isWithin(int tolerance) {\n","    return new TolerantIntegerComparison() {\n","      @Override\n","      public void of(int expected) {\n","        Integer actual = IntegerSubject.this.actual;\n","        checkNotNull(\n","            actual, \"actual value cannot be null. tolerance=%s expected=%s\", tolerance, expected);\n","        checkTolerance(tolerance);\n","\n","        if (!equalWithinTolerance(actual, expected, tolerance)) {\n","          failWithoutActual(\n","              fact(\"expected\", Integer.toString(expected)),\n","              butWas(),\n","              fact(\"outside tolerance\", Integer.toString(tolerance)));\n","        }\n","      }\n","    };\n","  }\n","\n","  /**\n","   * Prepares for a check that the subject is a number not within the given tolerance of an expected\n","   * value that will be provided in the next call in the fluent chain.\n","   *\n","   * @param tolerance an exclusive lower bound on the difference between the subject and object\n","   *     allowed by the check, which must be a non-negative value.\n","   * @since 1.2\n","   */\n","  public TolerantIntegerComparison isNotWithin(int tolerance) {\n","    return new TolerantIntegerComparison() {\n","      @Override\n","      public void of(int expected) {\n","        Integer actual = IntegerSubject.this.actual;\n","        checkNotNull(\n","            actual, \"actual value cannot be null. tolerance=%s expected=%s\", tolerance, expected);\n","        checkTolerance(tolerance);\n","\n","        if (equalWithinTolerance(actual, expected, tolerance)) {\n","          failWithoutActual(\n","              fact(\"expected not to be\", Integer.toString(expected)),\n","              butWas(),\n","              fact(\"within tolerance\", Integer.toString(tolerance)));\n","        }\n","      }\n","    };\n","  }\n","\n","  /**\n","   * @deprecated Use {@link #isEqualTo} instead. Integer comparison is consistent with equality.\n","   */\n","  @Override\n","  @Deprecated\n","  public final void isEquivalentAccordingToCompareTo(@Nullable Integer other) {\n","    super.isEquivalentAccordingToCompareTo(other);\n","  }\n","\n","  /** Ensures that the given tolerance is a non-negative value. */\n","  private static void checkTolerance(int tolerance) {\n","    checkArgument(tolerance >= 0, \"tolerance (%s) cannot be negative\", tolerance);\n","  }\n","}\n"],"test_content":["/*\n"," * Copyright (c) 2011 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.truth.ExpectFailure.assertThat;\n","import static com.google.common.truth.Truth.assertThat;\n","import static org.junit.Assert.fail;\n","\n","import com.google.common.truth.ExpectFailure.SimpleSubjectBuilderCallback;\n","import com.google.errorprone.annotations.CanIgnoreReturnValue;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import org.junit.runners.JUnit4;\n","\n","/**\n"," * Tests for Integer Subjects.\n"," *\n"," * @author David Saff\n"," * @author Christian Gruber\n"," * @author Kurt Alfred Kluever\n"," */\n","@RunWith(JUnit4.class)\n","public class IntegerSubjectTest extends BaseSubjectTestCase {\n","\n","  @Test\n","  @SuppressWarnings(\"TruthSelfEquals\")\n","  public void simpleEquality() {\n","    assertThat(4).isEqualTo(4);\n","  }\n","\n","  @Test\n","  public void simpleInequality() {\n","    assertThat(4).isNotEqualTo(5);\n","  }\n","\n","  @Test\n","  public void equalityWithLongs() {\n","    assertThat(0).isEqualTo(0L);\n","    expectFailureWhenTestingThat(0).isNotEqualTo(0L);\n","  }\n","\n","  @Test\n","  public void equalityFail() {\n","    expectFailureWhenTestingThat(4).isEqualTo(5);\n","  }\n","\n","  @Test\n","  public void inequalityFail() {\n","    expectFailureWhenTestingThat(4).isNotEqualTo(4);\n","  }\n","\n","  @Test\n","  public void equalityOfNulls() {\n","    assertThat((Integer) null).isEqualTo(null);\n","  }\n","\n","  @Test\n","  public void equalityOfNullsFail_nullActual() {\n","    expectFailureWhenTestingThat(null).isEqualTo(5);\n","  }\n","\n","  @Test\n","  public void equalityOfNullsFail_nullExpected() {\n","    expectFailureWhenTestingThat(5).isEqualTo(null);\n","  }\n","\n","  @Test\n","  public void inequalityOfNulls() {\n","    assertThat(4).isNotEqualTo(null);\n","    assertThat((Integer) null).isNotEqualTo(4);\n","  }\n","\n","  @Test\n","  public void inequalityOfNullsFail() {\n","    expectFailureWhenTestingThat(null).isNotEqualTo(null);\n","  }\n","\n","  @Test\n","  public void overflowOnPrimitives() {\n","    assertThat(Long.MIN_VALUE).isNotEqualTo(Integer.MIN_VALUE);\n","    assertThat(Long.MAX_VALUE).isNotEqualTo(Integer.MAX_VALUE);\n","\n","    assertThat(Integer.MIN_VALUE).isNotEqualTo(Long.MIN_VALUE);\n","    assertThat(Integer.MAX_VALUE).isNotEqualTo(Long.MAX_VALUE);\n","\n","    assertThat(Integer.MIN_VALUE).isEqualTo((long) Integer.MIN_VALUE);\n","    assertThat(Integer.MAX_VALUE).isEqualTo((long) Integer.MAX_VALUE);\n","  }\n","\n","  @Test\n","  public void overflowOnPrimitives_shouldBeEqualAfterCast_min() {\n","    expectFailureWhenTestingThat(Integer.MIN_VALUE).isNotEqualTo((long) Integer.MIN_VALUE);\n","  }\n","\n","  @Test\n","  public void overflowOnPrimitives_shouldBeEqualAfterCast_max() {\n","    expectFailureWhenTestingThat(Integer.MAX_VALUE).isNotEqualTo((long) Integer.MAX_VALUE);\n","  }\n","\n","  @Test\n","  public void overflowBetweenIntegerAndLong_shouldBeDifferent_min() {\n","    expectFailureWhenTestingThat(Integer.MIN_VALUE).isEqualTo(Long.MIN_VALUE);\n","  }\n","\n","  @Test\n","  public void overflowBetweenIntegerAndLong_shouldBeDifferent_max() {\n","    expectFailureWhenTestingThat(Integer.MAX_VALUE).isEqualTo(Long.MAX_VALUE);\n","  }\n","\n","  @Test\n","  public void isWithinOf() {\n","    assertThat(20000).isWithin(0).of(20000);\n","    assertThat(20000).isWithin(1).of(20000);\n","    assertThat(20000).isWithin(10000).of(20000);\n","    assertThat(20000).isWithin(10000).of(30000);\n","    assertThat(Integer.MIN_VALUE).isWithin(1).of(Integer.MIN_VALUE + 1);\n","    assertThat(Integer.MAX_VALUE).isWithin(1).of(Integer.MAX_VALUE - 1);\n","    assertThat(Integer.MAX_VALUE / 2).isWithin(Integer.MAX_VALUE).of(-Integer.MAX_VALUE / 2);\n","    assertThat(-Integer.MAX_VALUE / 2).isWithin(Integer.MAX_VALUE).of(Integer.MAX_VALUE / 2);\n","\n","    assertThatIsWithinFails(20000, 9999, 30000);\n","    assertThatIsWithinFails(20000, 10000, 30001);\n","    assertThatIsWithinFails(Integer.MIN_VALUE, 0, Integer.MAX_VALUE);\n","    assertThatIsWithinFails(Integer.MAX_VALUE, 0, Integer.MIN_VALUE);\n","    assertThatIsWithinFails(Integer.MIN_VALUE, 1, Integer.MIN_VALUE + 2);\n","    assertThatIsWithinFails(Integer.MAX_VALUE, 1, Integer.MAX_VALUE - 2);\n","    // Don't fall for rollover\n","    assertThatIsWithinFails(Integer.MIN_VALUE, 1, Integer.MAX_VALUE);\n","    assertThatIsWithinFails(Integer.MAX_VALUE, 1, Integer.MIN_VALUE);\n","  }\n","\n","  private static void assertThatIsWithinFails(int actual, int tolerance, int expected) {\n","    ExpectFailure.SimpleSubjectBuilderCallback<IntegerSubject, Integer> callback =\n","        new ExpectFailure.SimpleSubjectBuilderCallback<IntegerSubject, Integer>() {\n","          @Override\n","          public void invokeAssertion(SimpleSubjectBuilder<IntegerSubject, Integer> expect) {\n","            expect.that(actual).isWithin(tolerance).of(expected);\n","          }\n","        };\n","    AssertionError failure = expectFailure(callback);\n","    assertThat(failure)\n","        .factKeys()\n","        .containsExactly(\"expected\", \"but was\", \"outside tolerance\")\n","        .inOrder();\n","    assertThat(failure).factValue(\"expected\").isEqualTo(Integer.toString(expected));\n","    assertThat(failure).factValue(\"but was\").isEqualTo(Integer.toString(actual));\n","    assertThat(failure).factValue(\"outside tolerance\").isEqualTo(Integer.toString(tolerance));\n","  }\n","\n","  @Test\n","  public void isNotWithinOf() {\n","    assertThatIsNotWithinFails(20000, 0, 20000);\n","    assertThatIsNotWithinFails(20000, 1, 20000);\n","    assertThatIsNotWithinFails(20000, 10000, 20000);\n","    assertThatIsNotWithinFails(20000, 10000, 30000);\n","    assertThatIsNotWithinFails(Integer.MIN_VALUE, 1, Integer.MIN_VALUE + 1);\n","    assertThatIsNotWithinFails(Integer.MAX_VALUE, 1, Integer.MAX_VALUE - 1);\n","    assertThatIsNotWithinFails(Integer.MAX_VALUE / 2, Integer.MAX_VALUE, -Integer.MAX_VALUE / 2);\n","    assertThatIsNotWithinFails(-Integer.MAX_VALUE / 2, Integer.MAX_VALUE, Integer.MAX_VALUE / 2);\n","\n","    assertThat(20000).isNotWithin(9999).of(30000);\n","    assertThat(20000).isNotWithin(10000).of(30001);\n","    assertThat(Integer.MIN_VALUE).isNotWithin(0).of(Integer.MAX_VALUE);\n","    assertThat(Integer.MAX_VALUE).isNotWithin(0).of(Integer.MIN_VALUE);\n","    assertThat(Integer.MIN_VALUE).isNotWithin(1).of(Integer.MIN_VALUE + 2);\n","    assertThat(Integer.MAX_VALUE).isNotWithin(1).of(Integer.MAX_VALUE - 2);\n","    // Don't fall for rollover\n","    assertThat(Integer.MIN_VALUE).isNotWithin(1).of(Integer.MAX_VALUE);\n","    assertThat(Integer.MAX_VALUE).isNotWithin(1).of(Integer.MIN_VALUE);\n","  }\n","\n","  private static void assertThatIsNotWithinFails(int actual, int tolerance, int expected) {\n","    ExpectFailure.SimpleSubjectBuilderCallback<IntegerSubject, Integer> callback =\n","        new ExpectFailure.SimpleSubjectBuilderCallback<IntegerSubject, Integer>() {\n","          @Override\n","          public void invokeAssertion(SimpleSubjectBuilder<IntegerSubject, Integer> expect) {\n","            expect.that(actual).isNotWithin(tolerance).of(expected);\n","          }\n","        };\n","    AssertionError failure = expectFailure(callback);\n","    assertThat(failure).factValue(\"expected not to be\").isEqualTo(Integer.toString(expected));\n","    assertThat(failure).factValue(\"within tolerance\").isEqualTo(Integer.toString(tolerance));\n","  }\n","\n","  @Test\n","  public void isWithinNegativeTolerance() {\n","    isWithinNegativeToleranceThrowsIAE(0, -10, 5);\n","    isWithinNegativeToleranceThrowsIAE(0, -10, 20);\n","    isNotWithinNegativeToleranceThrowsIAE(0, -10, 5);\n","    isNotWithinNegativeToleranceThrowsIAE(0, -10, 20);\n","  }\n","\n","  private static void isWithinNegativeToleranceThrowsIAE(int actual, int tolerance, int expected) {\n","    try {\n","      assertThat(actual).isWithin(tolerance).of(expected);\n","      fail(\"Expected IllegalArgumentException to be thrown but wasn't\");\n","    } catch (IllegalArgumentException iae) {\n","      assertThat(iae)\n","          .hasMessageThat()\n","          .isEqualTo(\"tolerance (\" + tolerance + \") cannot be negative\");\n","    }\n","  }\n","\n","  private static void isNotWithinNegativeToleranceThrowsIAE(\n","      int actual, int tolerance, int expected) {\n","    try {\n","      assertThat(actual).isNotWithin(tolerance).of(expected);\n","      fail(\"Expected IllegalArgumentException to be thrown but wasn't\");\n","    } catch (IllegalArgumentException iae) {\n","      assertThat(iae)\n","          .hasMessageThat()\n","          .isEqualTo(\"tolerance (\" + tolerance + \") cannot be negative\");\n","    }\n","  }\n","\n","  private static final Subject.Factory<IntegerSubject, Integer> INTEGER_SUBJECT_FACTORY =\n","      new Subject.Factory<IntegerSubject, Integer>() {\n","        @Override\n","        public IntegerSubject createSubject(FailureMetadata metadata, Integer that) {\n","          return new IntegerSubject(metadata, that);\n","        }\n","      };\n","\n","  @CanIgnoreReturnValue\n","  private static AssertionError expectFailure(\n","      SimpleSubjectBuilderCallback<IntegerSubject, Integer> callback) {\n","    return ExpectFailure.expectFailureAbout(INTEGER_SUBJECT_FACTORY, callback);\n","  }\n","\n","  private IntegerSubject expectFailureWhenTestingThat(Integer actual) {\n","    return expectFailure.whenTesting().that(actual);\n","  }\n","}\n"],"method_lines_dic":{"IntegerSubject.TolerantIntegerComparison::::of(int)":[60,60],"IntegerSubject.TolerantIntegerComparison::::equals(java.lang.Object)":[67,72],"IntegerSubject.TolerantIntegerComparison::::hashCode()":[78,82],"IntegerSubject::::isWithin(int)":[93,110],"IntegerSubject::::isNotWithin(int)":[120,137],"IntegerSubject::::isEquivalentAccordingToCompareTo(java.lang.Integer)":[142,146],"IntegerSubject::::checkTolerance(int)":[149,151]},"test_method_lines_dic":{"IntegerSubjectTest::::simpleEquality()":[38,42],"IntegerSubjectTest::::simpleInequality()":[44,47],"IntegerSubjectTest::::equalityWithLongs()":[49,53],"IntegerSubjectTest::::equalityFail()":[55,58],"IntegerSubjectTest::::inequalityFail()":[60,63],"IntegerSubjectTest::::equalityOfNulls()":[65,68],"IntegerSubjectTest::::equalityOfNullsFail_nullActual()":[70,73],"IntegerSubjectTest::::equalityOfNullsFail_nullExpected()":[75,78],"IntegerSubjectTest::::inequalityOfNulls()":[80,84],"IntegerSubjectTest::::inequalityOfNullsFail()":[86,89],"IntegerSubjectTest::::overflowOnPrimitives()":[91,101],"IntegerSubjectTest::::overflowOnPrimitives_shouldBeEqualAfterCast_min()":[103,106],"IntegerSubjectTest::::overflowOnPrimitives_shouldBeEqualAfterCast_max()":[108,111],"IntegerSubjectTest::::overflowBetweenIntegerAndLong_shouldBeDifferent_min()":[113,116],"IntegerSubjectTest::::overflowBetweenIntegerAndLong_shouldBeDifferent_max()":[118,121],"IntegerSubjectTest::::isWithinOf()":[123,143],"IntegerSubjectTest::::assertThatIsWithinFails(int,int,int)":[145,161],"IntegerSubjectTest::::isNotWithinOf()":[163,183],"IntegerSubjectTest::::assertThatIsNotWithinFails(int,int,int)":[185,196],"IntegerSubjectTest::::isWithinNegativeTolerance()":[198,204],"IntegerSubjectTest::::isWithinNegativeToleranceThrowsIAE(int,int,int)":[206,215],"IntegerSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(int,int,int)":[217,227],"IntegerSubjectTest::::expectFailureWhenTestingThat(java.lang.Integer)":[243,245]},"reverse_method_lines_dic":{"60":"IntegerSubject.TolerantIntegerComparison::::of(int)","67":"IntegerSubject.TolerantIntegerComparison::::equals(java.lang.Object)","68":"IntegerSubject.TolerantIntegerComparison::::equals(java.lang.Object)","69":"IntegerSubject.TolerantIntegerComparison::::equals(java.lang.Object)","70":"IntegerSubject.TolerantIntegerComparison::::equals(java.lang.Object)","71":"IntegerSubject.TolerantIntegerComparison::::equals(java.lang.Object)","72":"IntegerSubject.TolerantIntegerComparison::::equals(java.lang.Object)","78":"IntegerSubject.TolerantIntegerComparison::::hashCode()","79":"IntegerSubject.TolerantIntegerComparison::::hashCode()","80":"IntegerSubject.TolerantIntegerComparison::::hashCode()","81":"IntegerSubject.TolerantIntegerComparison::::hashCode()","82":"IntegerSubject.TolerantIntegerComparison::::hashCode()","93":"IntegerSubject::::isWithin(int)","94":"IntegerSubject::::isWithin(int)","95":"IntegerSubject::::isWithin(int)","96":"IntegerSubject::::isWithin(int)","97":"IntegerSubject::::isWithin(int)","98":"IntegerSubject::::isWithin(int)","99":"IntegerSubject::::isWithin(int)","100":"IntegerSubject::::isWithin(int)","101":"IntegerSubject::::isWithin(int)","102":"IntegerSubject::::isWithin(int)","103":"IntegerSubject::::isWithin(int)","104":"IntegerSubject::::isWithin(int)","105":"IntegerSubject::::isWithin(int)","106":"IntegerSubject::::isWithin(int)","107":"IntegerSubject::::isWithin(int)","108":"IntegerSubject::::isWithin(int)","109":"IntegerSubject::::isWithin(int)","110":"IntegerSubject::::isWithin(int)","120":"IntegerSubject::::isNotWithin(int)","121":"IntegerSubject::::isNotWithin(int)","122":"IntegerSubject::::isNotWithin(int)","123":"IntegerSubject::::isNotWithin(int)","124":"IntegerSubject::::isNotWithin(int)","125":"IntegerSubject::::isNotWithin(int)","126":"IntegerSubject::::isNotWithin(int)","127":"IntegerSubject::::isNotWithin(int)","128":"IntegerSubject::::isNotWithin(int)","129":"IntegerSubject::::isNotWithin(int)","130":"IntegerSubject::::isNotWithin(int)","131":"IntegerSubject::::isNotWithin(int)","132":"IntegerSubject::::isNotWithin(int)","133":"IntegerSubject::::isNotWithin(int)","134":"IntegerSubject::::isNotWithin(int)","135":"IntegerSubject::::isNotWithin(int)","136":"IntegerSubject::::isNotWithin(int)","137":"IntegerSubject::::isNotWithin(int)","142":"IntegerSubject::::isEquivalentAccordingToCompareTo(java.lang.Integer)","143":"IntegerSubject::::isEquivalentAccordingToCompareTo(java.lang.Integer)","144":"IntegerSubject::::isEquivalentAccordingToCompareTo(java.lang.Integer)","145":"IntegerSubject::::isEquivalentAccordingToCompareTo(java.lang.Integer)","146":"IntegerSubject::::isEquivalentAccordingToCompareTo(java.lang.Integer)","149":"IntegerSubject::::checkTolerance(int)","150":"IntegerSubject::::checkTolerance(int)","151":"IntegerSubject::::checkTolerance(int)"},"test_reverse_method_lines_dic":{"38":"IntegerSubjectTest::::simpleEquality()","39":"IntegerSubjectTest::::simpleEquality()","40":"IntegerSubjectTest::::simpleEquality()","41":"IntegerSubjectTest::::simpleEquality()","42":"IntegerSubjectTest::::simpleEquality()","44":"IntegerSubjectTest::::simpleInequality()","45":"IntegerSubjectTest::::simpleInequality()","46":"IntegerSubjectTest::::simpleInequality()","47":"IntegerSubjectTest::::simpleInequality()","49":"IntegerSubjectTest::::equalityWithLongs()","50":"IntegerSubjectTest::::equalityWithLongs()","51":"IntegerSubjectTest::::equalityWithLongs()","52":"IntegerSubjectTest::::equalityWithLongs()","53":"IntegerSubjectTest::::equalityWithLongs()","55":"IntegerSubjectTest::::equalityFail()","56":"IntegerSubjectTest::::equalityFail()","57":"IntegerSubjectTest::::equalityFail()","58":"IntegerSubjectTest::::equalityFail()","60":"IntegerSubjectTest::::inequalityFail()","61":"IntegerSubjectTest::::inequalityFail()","62":"IntegerSubjectTest::::inequalityFail()","63":"IntegerSubjectTest::::inequalityFail()","65":"IntegerSubjectTest::::equalityOfNulls()","66":"IntegerSubjectTest::::equalityOfNulls()","67":"IntegerSubjectTest::::equalityOfNulls()","68":"IntegerSubjectTest::::equalityOfNulls()","70":"IntegerSubjectTest::::equalityOfNullsFail_nullActual()","71":"IntegerSubjectTest::::equalityOfNullsFail_nullActual()","72":"IntegerSubjectTest::::equalityOfNullsFail_nullActual()","73":"IntegerSubjectTest::::equalityOfNullsFail_nullActual()","75":"IntegerSubjectTest::::equalityOfNullsFail_nullExpected()","76":"IntegerSubjectTest::::equalityOfNullsFail_nullExpected()","77":"IntegerSubjectTest::::equalityOfNullsFail_nullExpected()","78":"IntegerSubjectTest::::equalityOfNullsFail_nullExpected()","80":"IntegerSubjectTest::::inequalityOfNulls()","81":"IntegerSubjectTest::::inequalityOfNulls()","82":"IntegerSubjectTest::::inequalityOfNulls()","83":"IntegerSubjectTest::::inequalityOfNulls()","84":"IntegerSubjectTest::::inequalityOfNulls()","86":"IntegerSubjectTest::::inequalityOfNullsFail()","87":"IntegerSubjectTest::::inequalityOfNullsFail()","88":"IntegerSubjectTest::::inequalityOfNullsFail()","89":"IntegerSubjectTest::::inequalityOfNullsFail()","91":"IntegerSubjectTest::::overflowOnPrimitives()","92":"IntegerSubjectTest::::overflowOnPrimitives()","93":"IntegerSubjectTest::::overflowOnPrimitives()","94":"IntegerSubjectTest::::overflowOnPrimitives()","95":"IntegerSubjectTest::::overflowOnPrimitives()","96":"IntegerSubjectTest::::overflowOnPrimitives()","97":"IntegerSubjectTest::::overflowOnPrimitives()","98":"IntegerSubjectTest::::overflowOnPrimitives()","99":"IntegerSubjectTest::::overflowOnPrimitives()","100":"IntegerSubjectTest::::overflowOnPrimitives()","101":"IntegerSubjectTest::::overflowOnPrimitives()","103":"IntegerSubjectTest::::overflowOnPrimitives_shouldBeEqualAfterCast_min()","104":"IntegerSubjectTest::::overflowOnPrimitives_shouldBeEqualAfterCast_min()","105":"IntegerSubjectTest::::overflowOnPrimitives_shouldBeEqualAfterCast_min()","106":"IntegerSubjectTest::::overflowOnPrimitives_shouldBeEqualAfterCast_min()","108":"IntegerSubjectTest::::overflowOnPrimitives_shouldBeEqualAfterCast_max()","109":"IntegerSubjectTest::::overflowOnPrimitives_shouldBeEqualAfterCast_max()","110":"IntegerSubjectTest::::overflowOnPrimitives_shouldBeEqualAfterCast_max()","111":"IntegerSubjectTest::::overflowOnPrimitives_shouldBeEqualAfterCast_max()","113":"IntegerSubjectTest::::overflowBetweenIntegerAndLong_shouldBeDifferent_min()","114":"IntegerSubjectTest::::overflowBetweenIntegerAndLong_shouldBeDifferent_min()","115":"IntegerSubjectTest::::overflowBetweenIntegerAndLong_shouldBeDifferent_min()","116":"IntegerSubjectTest::::overflowBetweenIntegerAndLong_shouldBeDifferent_min()","118":"IntegerSubjectTest::::overflowBetweenIntegerAndLong_shouldBeDifferent_max()","119":"IntegerSubjectTest::::overflowBetweenIntegerAndLong_shouldBeDifferent_max()","120":"IntegerSubjectTest::::overflowBetweenIntegerAndLong_shouldBeDifferent_max()","121":"IntegerSubjectTest::::overflowBetweenIntegerAndLong_shouldBeDifferent_max()","123":"IntegerSubjectTest::::isWithinOf()","124":"IntegerSubjectTest::::isWithinOf()","125":"IntegerSubjectTest::::isWithinOf()","126":"IntegerSubjectTest::::isWithinOf()","127":"IntegerSubjectTest::::isWithinOf()","128":"IntegerSubjectTest::::isWithinOf()","129":"IntegerSubjectTest::::isWithinOf()","130":"IntegerSubjectTest::::isWithinOf()","131":"IntegerSubjectTest::::isWithinOf()","132":"IntegerSubjectTest::::isWithinOf()","133":"IntegerSubjectTest::::isWithinOf()","134":"IntegerSubjectTest::::isWithinOf()","135":"IntegerSubjectTest::::isWithinOf()","136":"IntegerSubjectTest::::isWithinOf()","137":"IntegerSubjectTest::::isWithinOf()","138":"IntegerSubjectTest::::isWithinOf()","139":"IntegerSubjectTest::::isWithinOf()","140":"IntegerSubjectTest::::isWithinOf()","141":"IntegerSubjectTest::::isWithinOf()","142":"IntegerSubjectTest::::isWithinOf()","143":"IntegerSubjectTest::::isWithinOf()","145":"IntegerSubjectTest::::assertThatIsWithinFails(int,int,int)","146":"IntegerSubjectTest::::assertThatIsWithinFails(int,int,int)","147":"IntegerSubjectTest::::assertThatIsWithinFails(int,int,int)","148":"IntegerSubjectTest::::assertThatIsWithinFails(int,int,int)","149":"IntegerSubjectTest::::assertThatIsWithinFails(int,int,int)","150":"IntegerSubjectTest::::assertThatIsWithinFails(int,int,int)","151":"IntegerSubjectTest::::assertThatIsWithinFails(int,int,int)","152":"IntegerSubjectTest::::assertThatIsWithinFails(int,int,int)","153":"IntegerSubjectTest::::assertThatIsWithinFails(int,int,int)","154":"IntegerSubjectTest::::assertThatIsWithinFails(int,int,int)","155":"IntegerSubjectTest::::assertThatIsWithinFails(int,int,int)","156":"IntegerSubjectTest::::assertThatIsWithinFails(int,int,int)","157":"IntegerSubjectTest::::assertThatIsWithinFails(int,int,int)","158":"IntegerSubjectTest::::assertThatIsWithinFails(int,int,int)","159":"IntegerSubjectTest::::assertThatIsWithinFails(int,int,int)","160":"IntegerSubjectTest::::assertThatIsWithinFails(int,int,int)","161":"IntegerSubjectTest::::assertThatIsWithinFails(int,int,int)","163":"IntegerSubjectTest::::isNotWithinOf()","164":"IntegerSubjectTest::::isNotWithinOf()","165":"IntegerSubjectTest::::isNotWithinOf()","166":"IntegerSubjectTest::::isNotWithinOf()","167":"IntegerSubjectTest::::isNotWithinOf()","168":"IntegerSubjectTest::::isNotWithinOf()","169":"IntegerSubjectTest::::isNotWithinOf()","170":"IntegerSubjectTest::::isNotWithinOf()","171":"IntegerSubjectTest::::isNotWithinOf()","172":"IntegerSubjectTest::::isNotWithinOf()","173":"IntegerSubjectTest::::isNotWithinOf()","174":"IntegerSubjectTest::::isNotWithinOf()","175":"IntegerSubjectTest::::isNotWithinOf()","176":"IntegerSubjectTest::::isNotWithinOf()","177":"IntegerSubjectTest::::isNotWithinOf()","178":"IntegerSubjectTest::::isNotWithinOf()","179":"IntegerSubjectTest::::isNotWithinOf()","180":"IntegerSubjectTest::::isNotWithinOf()","181":"IntegerSubjectTest::::isNotWithinOf()","182":"IntegerSubjectTest::::isNotWithinOf()","183":"IntegerSubjectTest::::isNotWithinOf()","185":"IntegerSubjectTest::::assertThatIsNotWithinFails(int,int,int)","186":"IntegerSubjectTest::::assertThatIsNotWithinFails(int,int,int)","187":"IntegerSubjectTest::::assertThatIsNotWithinFails(int,int,int)","188":"IntegerSubjectTest::::assertThatIsNotWithinFails(int,int,int)","189":"IntegerSubjectTest::::assertThatIsNotWithinFails(int,int,int)","190":"IntegerSubjectTest::::assertThatIsNotWithinFails(int,int,int)","191":"IntegerSubjectTest::::assertThatIsNotWithinFails(int,int,int)","192":"IntegerSubjectTest::::assertThatIsNotWithinFails(int,int,int)","193":"IntegerSubjectTest::::assertThatIsNotWithinFails(int,int,int)","194":"IntegerSubjectTest::::assertThatIsNotWithinFails(int,int,int)","195":"IntegerSubjectTest::::assertThatIsNotWithinFails(int,int,int)","196":"IntegerSubjectTest::::assertThatIsNotWithinFails(int,int,int)","198":"IntegerSubjectTest::::isWithinNegativeTolerance()","199":"IntegerSubjectTest::::isWithinNegativeTolerance()","200":"IntegerSubjectTest::::isWithinNegativeTolerance()","201":"IntegerSubjectTest::::isWithinNegativeTolerance()","202":"IntegerSubjectTest::::isWithinNegativeTolerance()","203":"IntegerSubjectTest::::isWithinNegativeTolerance()","204":"IntegerSubjectTest::::isWithinNegativeTolerance()","206":"IntegerSubjectTest::::isWithinNegativeToleranceThrowsIAE(int,int,int)","207":"IntegerSubjectTest::::isWithinNegativeToleranceThrowsIAE(int,int,int)","208":"IntegerSubjectTest::::isWithinNegativeToleranceThrowsIAE(int,int,int)","209":"IntegerSubjectTest::::isWithinNegativeToleranceThrowsIAE(int,int,int)","210":"IntegerSubjectTest::::isWithinNegativeToleranceThrowsIAE(int,int,int)","211":"IntegerSubjectTest::::isWithinNegativeToleranceThrowsIAE(int,int,int)","212":"IntegerSubjectTest::::isWithinNegativeToleranceThrowsIAE(int,int,int)","213":"IntegerSubjectTest::::isWithinNegativeToleranceThrowsIAE(int,int,int)","214":"IntegerSubjectTest::::isWithinNegativeToleranceThrowsIAE(int,int,int)","215":"IntegerSubjectTest::::isWithinNegativeToleranceThrowsIAE(int,int,int)","217":"IntegerSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(int,int,int)","218":"IntegerSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(int,int,int)","219":"IntegerSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(int,int,int)","220":"IntegerSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(int,int,int)","221":"IntegerSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(int,int,int)","222":"IntegerSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(int,int,int)","223":"IntegerSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(int,int,int)","224":"IntegerSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(int,int,int)","225":"IntegerSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(int,int,int)","226":"IntegerSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(int,int,int)","227":"IntegerSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(int,int,int)","243":"IntegerSubjectTest::::expectFailureWhenTestingThat(java.lang.Integer)","244":"IntegerSubjectTest::::expectFailureWhenTestingThat(java.lang.Integer)","245":"IntegerSubjectTest::::expectFailureWhenTestingThat(java.lang.Integer)"},"tests":[{"test_lines":[38,42],"covered_lines":[40,41,42],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[44,47],"covered_lines":[40,41,42],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[49,53],"covered_lines":[40,41,42],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[55,58],"covered_lines":[40,41,42],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[60,63],"covered_lines":[40,41,42],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[65,68],"covered_lines":[40,41,42],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[70,73],"covered_lines":[40,41,42],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[75,78],"covered_lines":[40,41,42],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[80,84],"covered_lines":[40,41,42],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[86,89],"covered_lines":[40,41,42],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[91,101],"covered_lines":[40,41,42],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[103,106],"covered_lines":[40,41,42],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[108,111],"covered_lines":[40,41,42],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[113,116],"covered_lines":[40,41,42],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[118,121],"covered_lines":[40,41,42],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[123,143],"covered_lines":[40,41,42,53,94,97,98,100,102,103,104,105,106,108,150,151],"label":"IntegerSubject::::isWithin(int)"},{"test_lines":[163,183],"covered_lines":[40,41,42,53,121,124,125,127,129,130,131,132,133,135,150,151],"label":"IntegerSubject::::isNotWithin(int)"},{"test_lines":[198,204],"covered_lines":[40,41,42,53,94,97,98,121,124,125,150],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/truth/core/src/main/java/com/google/common/truth/MapSubject.java":{"class_content":["/*\n"," * Copyright (c) 2011 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.base.Preconditions.checkArgument;\n","import static com.google.common.base.Preconditions.checkNotNull;\n","import static com.google.common.base.Strings.lenientFormat;\n","import static com.google.common.collect.Maps.immutableEntry;\n","import static com.google.common.truth.Fact.fact;\n","import static com.google.common.truth.Fact.simpleFact;\n","import static com.google.common.truth.SubjectUtils.countDuplicatesAndAddTypeInfo;\n","import static com.google.common.truth.SubjectUtils.hasMatchingToStringPair;\n","import static com.google.common.truth.SubjectUtils.objectToTypeName;\n","import static com.google.common.truth.SubjectUtils.retainMatchingToString;\n","import static java.util.Collections.singletonList;\n","\n","import com.google.common.base.Objects;\n","import com.google.common.collect.ImmutableList;\n","import com.google.common.collect.ImmutableMap;\n","import com.google.common.collect.LinkedHashMultiset;\n","import com.google.common.collect.Lists;\n","import com.google.common.collect.Maps;\n","import com.google.common.collect.Multiset;\n","import com.google.common.collect.Sets;\n","import com.google.common.truth.Correspondence.DiffFormatter;\n","import com.google.errorprone.annotations.CanIgnoreReturnValue;\n","import java.util.LinkedHashMap;\n","import java.util.LinkedHashSet;\n","import java.util.List;\n","import java.util.Map;\n","import java.util.Set;\n","import org.checkerframework.checker.nullness.qual.Nullable;\n","\n","/**\n"," * Propositions for {@link Map} subjects.\n"," *\n"," * @author Christian Gruber\n"," * @author Kurt Alfred Kluever\n"," */\n","public class MapSubject extends Subject {\n","  private final @Nullable Map<?, ?> actual;\n","\n","  /**\n","   * Constructor for use by subclasses. If you want to create an instance of this class itself, call\n","   * {@link Subject#check(String, Object...) check(...)}{@code .that(actual)}.\n","   */\n","  protected MapSubject(FailureMetadata metadata, @Nullable Map<?, ?> map) {\n","    super(metadata, map);\n","    this.actual = map;\n","  }\n","\n","  @Override\n","  public final void isEqualTo(@Nullable Object other) {\n","    if (Objects.equal(actual, other)) {\n","      return;\n","    }\n","\n","    // Fail but with a more descriptive message:\n","\n","    if (actual == null || !(other instanceof Map)) {\n","      super.isEqualTo(other);\n","      return;\n","    }\n","\n","    containsEntriesInAnyOrder((Map<?, ?>) other, /* allowUnexpected= */ false);\n","  }\n","\n","  /** Fails if the map is not empty. */\n","  public final void isEmpty() {\n","    if (!checkNotNull(actual).isEmpty()) {\n","      failWithActual(simpleFact(\"expected to be empty\"));\n","    }\n","  }\n","\n","  /** Fails if the map is empty. */\n","  public final void isNotEmpty() {\n","    if (checkNotNull(actual).isEmpty()) {\n","      failWithoutActual(simpleFact(\"expected not to be empty\"));\n","    }\n","  }\n","\n","  /** Fails if the map does not have the given size. */\n","  public final void hasSize(int expectedSize) {\n","    checkArgument(expectedSize >= 0, \"expectedSize (%s) must be >= 0\", expectedSize);\n","    check(\"size()\").that(checkNotNull(actual).size()).isEqualTo(expectedSize);\n","  }\n","\n","  /** Fails if the map does not contain the given key. */\n","  public final void containsKey(@Nullable Object key) {\n","    check(\"keySet()\").that(checkNotNull(actual).keySet()).contains(key);\n","  }\n","\n","  /** Fails if the map contains the given key. */\n","  public final void doesNotContainKey(@Nullable Object key) {\n","    check(\"keySet()\").that(checkNotNull(actual).keySet()).doesNotContain(key);\n","  }\n","\n","  /** Fails if the map does not contain the given entry. */\n","  public final void containsEntry(@Nullable Object key, @Nullable Object value) {\n","    Map.Entry<@Nullable Object, @Nullable Object> entry = immutableEntry(key, value);\n","    checkNotNull(actual);\n","    if (!actual.entrySet().contains(entry)) {\n","      List<@Nullable Object> keyList = singletonList(key);\n","      List<@Nullable Object> valueList = singletonList(value);\n","      if (actual.containsKey(key)) {\n","        Object actualValue = actual.get(key);\n","        /*\n","         * In the case of a null expected or actual value, clarify that the key *is* present and\n","         * *is* expected to be present. That is, get() isn't returning null to indicate that the key\n","         * is missing, and the user isn't making an assertion that the key is missing.\n","         */\n","        StandardSubjectBuilder check = check(\"get(%s)\", key);\n","        if (value == null || actualValue == null) {\n","          check = check.withMessage(\"key is present but with a different value\");\n","        }\n","        // See the comment on IterableSubject's use of failEqualityCheckForEqualsWithoutDescription.\n","        check.that(actualValue).failEqualityCheckForEqualsWithoutDescription(value);\n","      } else if (hasMatchingToStringPair(actual.keySet(), keyList)) {\n","        failWithoutActual(\n","            fact(\"expected to contain entry\", entry),\n","            fact(\"an instance of\", objectToTypeName(entry)),\n","            simpleFact(\"but did not\"),\n","            fact(\n","                \"though it did contain keys\",\n","                countDuplicatesAndAddTypeInfo(\n","                    retainMatchingToString(actual.keySet(), /* itemsToCheck= */ keyList))),\n","            fact(\"full contents\", actualCustomStringRepresentationForPackageMembersToCall()));\n","      } else if (actual.containsValue(value)) {\n","        Set<@Nullable Object> keys = new LinkedHashSet<>();\n","        for (Map.Entry<?, ?> actualEntry : actual.entrySet()) {\n","          if (Objects.equal(actualEntry.getValue(), value)) {\n","            keys.add(actualEntry.getKey());\n","          }\n","        }\n","        failWithoutActual(\n","            fact(\"expected to contain entry\", entry),\n","            simpleFact(\"but did not\"),\n","            fact(\"though it did contain keys with that value\", keys),\n","            fact(\"full contents\", actualCustomStringRepresentationForPackageMembersToCall()));\n","      } else if (hasMatchingToStringPair(actual.values(), valueList)) {\n","        failWithoutActual(\n","            fact(\"expected to contain entry\", entry),\n","            fact(\"an instance of\", objectToTypeName(entry)),\n","            simpleFact(\"but did not\"),\n","            fact(\n","                \"though it did contain values\",\n","                countDuplicatesAndAddTypeInfo(\n","                    retainMatchingToString(actual.values(), /* itemsToCheck= */ valueList))),\n","            fact(\"full contents\", actualCustomStringRepresentationForPackageMembersToCall()));\n","      } else {\n","        failWithActual(\"expected to contain entry\", entry);\n","      }\n","    }\n","  }\n","\n","  /** Fails if the map contains the given entry. */\n","  public final void doesNotContainEntry(@Nullable Object key, @Nullable Object value) {\n","    checkNoNeedToDisplayBothValues(\"entrySet()\")\n","        .that(checkNotNull(actual).entrySet())\n","        .doesNotContain(immutableEntry(key, value));\n","  }\n","\n","  /** Fails if the map is not empty. */\n","  @CanIgnoreReturnValue\n","  public final Ordered containsExactly() {\n","    return containsExactlyEntriesIn(ImmutableMap.of());\n","  }\n","\n","  /**\n","   * Fails if the map does not contain exactly the given set of key/value pairs.\n","   *\n","   * <p><b>Warning:</b> the use of varargs means that we cannot guarantee an equal number of\n","   * key/value pairs at compile time. Please make sure you provide varargs in key/value pairs!\n","   *\n","   * <p>The arguments must not contain duplicate keys.\n","   */\n","  @CanIgnoreReturnValue\n","  public final Ordered containsExactly(\n","      @Nullable Object k0, @Nullable Object v0, @Nullable Object... rest) {\n","    return containsExactlyEntriesIn(accumulateMap(\"containsExactly\", k0, v0, rest));\n","  }\n","\n","  @CanIgnoreReturnValue\n","  public final Ordered containsAtLeast(\n","      @Nullable Object k0, @Nullable Object v0, @Nullable Object... rest) {\n","    return containsAtLeastEntriesIn(accumulateMap(\"containsAtLeast\", k0, v0, rest));\n","  }\n","\n","  private static Map<@Nullable Object, @Nullable Object> accumulateMap(\n","      String functionName, @Nullable Object k0, @Nullable Object v0, @Nullable Object... rest) {\n","    checkArgument(\n","        rest.length % 2 == 0,\n","        \"There must be an equal number of key/value pairs \"\n","            + \"(i.e., the number of key/value parameters (%s) must be even).\",\n","        rest.length + 2);\n","\n","    Map<@Nullable Object, @Nullable Object> expectedMap = Maps.newLinkedHashMap();\n","    expectedMap.put(k0, v0);\n","    Multiset<@Nullable Object> keys = LinkedHashMultiset.create();\n","    keys.add(k0);\n","    for (int i = 0; i < rest.length; i += 2) {\n","      Object key = rest[i];\n","      expectedMap.put(key, rest[i + 1]);\n","      keys.add(key);\n","    }\n","    checkArgument(\n","        keys.size() == expectedMap.size(),\n","        \"Duplicate keys (%s) cannot be passed to %s().\",\n","        keys,\n","        functionName);\n","    return expectedMap;\n","  }\n","\n","  /** Fails if the map does not contain exactly the given set of entries in the given map. */\n","  @CanIgnoreReturnValue\n","  public final Ordered containsExactlyEntriesIn(Map<?, ?> expectedMap) {\n","    if (expectedMap.isEmpty()) {\n","      if (checkNotNull(actual).isEmpty()) {\n","        return IN_ORDER;\n","      } else {\n","        isEmpty(); // fails\n","        return ALREADY_FAILED;\n","      }\n","    }\n","    boolean containsAnyOrder = containsEntriesInAnyOrder(expectedMap, /* allowUnexpected= */ false);\n","    if (containsAnyOrder) {\n","      return new MapInOrder(expectedMap, /* allowUnexpected= */ false, /* correspondence= */ null);\n","    } else {\n","      return ALREADY_FAILED;\n","    }\n","  }\n","\n","  /** Fails if the map does not contain at least the given set of entries in the given map. */\n","  @CanIgnoreReturnValue\n","  public final Ordered containsAtLeastEntriesIn(Map<?, ?> expectedMap) {\n","    if (expectedMap.isEmpty()) {\n","      return IN_ORDER;\n","    }\n","    boolean containsAnyOrder = containsEntriesInAnyOrder(expectedMap, /* allowUnexpected= */ true);\n","    if (containsAnyOrder) {\n","      return new MapInOrder(expectedMap, /* allowUnexpected= */ true, /* correspondence= */ null);\n","    } else {\n","      return ALREADY_FAILED;\n","    }\n","  }\n","\n","  @CanIgnoreReturnValue\n","  private boolean containsEntriesInAnyOrder(Map<?, ?> expectedMap, boolean allowUnexpected) {\n","    MapDifference<@Nullable Object, @Nullable Object, @Nullable Object> diff =\n","        MapDifference.create(checkNotNull(actual), expectedMap, allowUnexpected, Objects::equal);\n","    if (diff.isEmpty()) {\n","      return true;\n","    }\n","    // TODO(cpovirk): Consider adding a special-case where the diff contains exactly one key which\n","    // is present with the wrong value, doing an isEqualTo assertion on the values. Pro: This gives\n","    // us all the extra power of isEqualTo, including maybe throwing a ComparisonFailure. Con: It\n","    // might be misleading to report a single mismatched value when the assertion was on the whole\n","    // map - this could be mitigated by adding extra info explaining that. (Would need to ensure\n","    // that it still fails in cases where e.g. the value is 1 and it should be 1L, where isEqualTo\n","    // succeeds: perhaps failEqualityCheckForEqualsWithoutDescription will do the right thing.)\n","    // First, we need to decide whether this kind of cleverness is a line we want to cross.\n","    // (See also containsEntry, which does do an isEqualTo-like assertion when the expected key is\n","    // present with the wrong value, which may be the closest we currently get to this.)\n","    failWithoutActual(\n","        ImmutableList.<Fact>builder()\n","            .addAll(diff.describe(/* differ= */ null))\n","            .add(simpleFact(\"---\"))\n","            .add(fact(allowUnexpected ? \"expected to contain at least\" : \"expected\", expectedMap))\n","            .add(butWas())\n","            .build());\n","    return false;\n","  }\n","\n","  private interface ValueTester<A extends @Nullable Object, E extends @Nullable Object> {\n","    boolean test(A actualValue, E expectedValue);\n","  }\n","\n","  private interface Differ<A extends @Nullable Object, E extends @Nullable Object> {\n","    @Nullable String diff(A actual, E expected);\n","  }\n","\n","  // This is mostly like the MapDifference code in com.google.common.collect, generalized to remove\n","  // the requirement that the values of the two maps are of the same type and are compared with a\n","  // symmetric Equivalence.\n","  private static class MapDifference<\n","      K extends @Nullable Object, A extends @Nullable Object, E extends @Nullable Object> {\n","    private final Map<K, E> missing;\n","    private final Map<K, A> unexpected;\n","    private final Map<K, ValueDifference<A, E>> wrongValues;\n","    private final Set<K> allKeys;\n","\n","    static <K extends @Nullable Object, A extends @Nullable Object, E extends @Nullable Object>\n","        MapDifference<K, A, E> create(\n","            Map<? extends K, ? extends A> actual,\n","            Map<? extends K, ? extends E> expected,\n","            boolean allowUnexpected,\n","            ValueTester<? super A, ? super E> valueTester) {\n","      Map<K, A> unexpected = new LinkedHashMap<>(actual);\n","      Map<K, E> missing = new LinkedHashMap<>();\n","      Map<K, ValueDifference<A, E>> wrongValues = new LinkedHashMap<>();\n","      for (Map.Entry<? extends K, ? extends E> expectedEntry : expected.entrySet()) {\n","        K expectedKey = expectedEntry.getKey();\n","        E expectedValue = expectedEntry.getValue();\n","        if (actual.containsKey(expectedKey)) {\n","          @SuppressWarnings(\"UnnecessaryCast\") // needed by nullness checker\n","          A actualValue = (A) unexpected.remove(expectedKey);\n","          if (!valueTester.test(actualValue, expectedValue)) {\n","            wrongValues.put(expectedKey, new ValueDifference<>(actualValue, expectedValue));\n","          }\n","        } else {\n","          missing.put(expectedKey, expectedValue);\n","        }\n","      }\n","      if (allowUnexpected) {\n","        unexpected.clear();\n","      }\n","      return new MapDifference<>(\n","          missing, unexpected, wrongValues, Sets.union(actual.keySet(), expected.keySet()));\n","    }\n","\n","    private MapDifference(\n","        Map<K, E> missing,\n","        Map<K, A> unexpected,\n","        Map<K, ValueDifference<A, E>> wrongValues,\n","        Set<K> allKeys) {\n","      this.missing = missing;\n","      this.unexpected = unexpected;\n","      this.wrongValues = wrongValues;\n","      this.allKeys = allKeys;\n","    }\n","\n","    boolean isEmpty() {\n","      return missing.isEmpty() && unexpected.isEmpty() && wrongValues.isEmpty();\n","    }\n","\n","    ImmutableList<Fact> describe(@Nullable Differ<? super A, ? super E> differ) {\n","      boolean includeKeyTypes = includeKeyTypes();\n","      ImmutableList.Builder<Fact> facts = ImmutableList.builder();\n","      if (!wrongValues.isEmpty()) {\n","        facts.add(simpleFact(\"keys with wrong values\"));\n","      }\n","      for (Map.Entry<K, ValueDifference<A, E>> entry : wrongValues.entrySet()) {\n","        facts.add(fact(\"for key\", maybeAddType(entry.getKey(), includeKeyTypes)));\n","        facts.addAll(entry.getValue().describe(differ));\n","      }\n","      if (!missing.isEmpty()) {\n","        facts.add(simpleFact(\"missing keys\"));\n","      }\n","      for (Map.Entry<K, E> entry : missing.entrySet()) {\n","        facts.add(fact(\"for key\", maybeAddType(entry.getKey(), includeKeyTypes)));\n","        facts.add(fact(\"expected value\", entry.getValue()));\n","      }\n","      if (!unexpected.isEmpty()) {\n","        facts.add(simpleFact(\"unexpected keys\"));\n","      }\n","      for (Map.Entry<K, A> entry : unexpected.entrySet()) {\n","        facts.add(fact(\"for key\", maybeAddType(entry.getKey(), includeKeyTypes)));\n","        facts.add(fact(\"unexpected value\", entry.getValue()));\n","      }\n","      return facts.build();\n","    }\n","\n","    private boolean includeKeyTypes() {\n","      // We will annotate all the keys in the diff with their types if any of the keys involved have\n","      // the same toString() without being equal.\n","      Set<K> keys = Sets.newHashSet();\n","      keys.addAll(missing.keySet());\n","      keys.addAll(unexpected.keySet());\n","      keys.addAll(wrongValues.keySet());\n","      return hasMatchingToStringPair(keys, allKeys);\n","    }\n","  }\n","\n","  private static class ValueDifference<A extends @Nullable Object, E extends @Nullable Object> {\n","    private final A actual;\n","    private final E expected;\n","\n","    ValueDifference(A actual, E expected) {\n","      this.actual = actual;\n","      this.expected = expected;\n","    }\n","\n","    ImmutableList<Fact> describe(@Nullable Differ<? super A, ? super E> differ) {\n","      boolean includeTypes =\n","          differ == null && String.valueOf(actual).equals(String.valueOf(expected));\n","      ImmutableList.Builder<Fact> facts =\n","          ImmutableList.<Fact>builder()\n","              .add(fact(\"expected value\", maybeAddType(expected, includeTypes)))\n","              .add(fact(\"but got value\", maybeAddType(actual, includeTypes)));\n","\n","      if (differ != null) {\n","        String diffString = differ.diff(actual, expected);\n","        if (diffString != null) {\n","          facts.add(fact(\"diff\", diffString));\n","        }\n","      }\n","      return facts.build();\n","    }\n","  }\n","\n","  private static String maybeAddType(@Nullable Object object, boolean includeTypes) {\n","    return includeTypes\n","        ? lenientFormat(\"%s (%s)\", object, objectToTypeName(object))\n","        : String.valueOf(object);\n","  }\n","\n","  private class MapInOrder implements Ordered {\n","\n","    private final Map<?, ?> expectedMap;\n","    private final boolean allowUnexpected;\n","    private final @Nullable Correspondence<?, ?> correspondence;\n","\n","    MapInOrder(\n","        Map<?, ?> expectedMap,\n","        boolean allowUnexpected,\n","        @Nullable Correspondence<?, ?> correspondence) {\n","      this.expectedMap = expectedMap;\n","      this.allowUnexpected = allowUnexpected;\n","      this.correspondence = correspondence;\n","    }\n","\n","    /**\n","     * Checks whether the common elements between actual and expected are in the same order.\n","     *\n","     * <p>This doesn't check whether the keys have the same values or whether all the required keys\n","     * are actually present. That was supposed to be done before the \"in order\" part.\n","     */\n","    @Override\n","    public void inOrder() {\n","      // We're using the fact that Sets.intersection keeps the order of the first set.\n","      checkNotNull(actual);\n","      List<?> expectedKeyOrder =\n","          Lists.newArrayList(Sets.intersection(expectedMap.keySet(), actual.keySet()));\n","      List<?> actualKeyOrder =\n","          Lists.newArrayList(Sets.intersection(actual.keySet(), expectedMap.keySet()));\n","      if (!actualKeyOrder.equals(expectedKeyOrder)) {\n","        ImmutableList.Builder<Fact> facts =\n","            ImmutableList.<Fact>builder()\n","                .add(\n","                    simpleFact(\n","                        allowUnexpected\n","                            ? \"required entries were all found, but order was wrong\"\n","                            : \"entries match, but order was wrong\"))\n","                .add(\n","                    fact(\n","                        allowUnexpected ? \"expected to contain at least\" : \"expected\",\n","                        expectedMap));\n","        if (correspondence != null) {\n","          facts.addAll(correspondence.describeForMapValues());\n","        }\n","        failWithActual(facts.build());\n","      }\n","    }\n","  }\n","\n","  /** Ordered implementation that does nothing because it's already known to be true. */\n","  private static final Ordered IN_ORDER = () -> {};\n","\n","  /** Ordered implementation that does nothing because an earlier check already caused a failure. */\n","  private static final Ordered ALREADY_FAILED = () -> {};\n","\n","  /**\n","   * Starts a method chain for a check in which the actual values (i.e. the values of the {@link\n","   * Map} under test) are compared to expected values using the given {@link Correspondence}. The\n","   * actual values must be of type {@code A}, the expected values must be of type {@code E}. The\n","   * check is actually executed by continuing the method chain. For example:\n","   *\n","   * <pre>{@code\n","   * assertThat(actualMap)\n","   *   .comparingValuesUsing(correspondence)\n","   *   .containsEntry(expectedKey, expectedValue);\n","   * }</pre>\n","   *\n","   * where {@code actualMap} is a {@code Map<?, A>} (or, more generally, a {@code Map<?, ? extends\n","   * A>}), {@code correspondence} is a {@code Correspondence<A, E>}, and {@code expectedValue} is an\n","   * {@code E}.\n","   *\n","   * <p>Note that keys will always be compared with regular object equality ({@link Object#equals}).\n","   *\n","   * <p>Any of the methods on the returned object may throw {@link ClassCastException} if they\n","   * encounter an actual value that is not of type {@code A} or an expected value that is not of\n","   * type {@code E}.\n","   */\n","  public final <A extends @Nullable Object, E extends @Nullable Object>\n","      UsingCorrespondence<A, E> comparingValuesUsing(\n","          Correspondence<? super A, ? super E> correspondence) {\n","    return new UsingCorrespondence<>(correspondence);\n","  }\n","\n","  /**\n","   * Starts a method chain for a check in which failure messages may use the given {@link\n","   * DiffFormatter} to describe the difference between an actual value (i.e. a value in the {@link\n","   * Map} under test) and the value it is expected to be equal to, but isn't. The actual and\n","   * expected values must be of type {@code V}. The check is actually executed by continuing the\n","   * method chain. For example:\n","   *\n","   * <pre>{@code\n","   * assertThat(actualMap)\n","   *   .formattingDiffsUsing(FooTestHelper::formatDiff)\n","   *   .containsExactly(key1, foo1, key2, foo2, key3, foo3);\n","   * }</pre>\n","   *\n","   * where {@code actualMap} is a {@code Map<?, Foo>} (or, more generally, a {@code Map<?, ? extends\n","   * Foo>}), {@code FooTestHelper.formatDiff} is a static method taking two {@code Foo} arguments\n","   * and returning a {@link String}, and {@code foo1}, {@code foo2}, and {@code foo3} are {@code\n","   * Foo} instances.\n","   *\n","   * <p>Unlike when using {@link #comparingValuesUsing}, the values are still compared using object\n","   * equality, so this method does not affect whether a test passes or fails.\n","   *\n","   * <p>Any of the methods on the returned object may throw {@link ClassCastException} if they\n","   * encounter a value that is not of type {@code V}.\n","   *\n","   * @since 1.1\n","   */\n","  public final <V> UsingCorrespondence<V, V> formattingDiffsUsing(\n","      DiffFormatter<? super V, ? super V> formatter) {\n","    return comparingValuesUsing(Correspondence.<V>equality().formattingDiffsUsing(formatter));\n","  }\n","\n","  /**\n","   * A partially specified check in which the actual values (i.e. the values of the {@link Map}\n","   * under test) are compared to expected values using a {@link Correspondence}. The expected values\n","   * are of type {@code E}. Call methods on this object to actually execute the check.\n","   *\n","   * <p>Note that keys will always be compared with regular object equality ({@link Object#equals}).\n","   */\n","  public final class UsingCorrespondence<A extends @Nullable Object, E extends @Nullable Object> {\n","\n","    private final Correspondence<? super A, ? super E> correspondence;\n","\n","    private UsingCorrespondence(Correspondence<? super A, ? super E> correspondence) {\n","      this.correspondence = checkNotNull(correspondence);\n","    }\n","\n","    /**\n","     * Fails if the map does not contain an entry with the given key and a value that corresponds to\n","     * the given value.\n","     */\n","    @SuppressWarnings(\"UnnecessaryCast\") // needed by nullness checker\n","    public void containsEntry(@Nullable Object expectedKey, E expectedValue) {\n","      if (checkNotNull(actual).containsKey(expectedKey)) {\n","        // Found matching key.\n","        A actualValue = getCastSubject().get(expectedKey);\n","        Correspondence.ExceptionStore exceptions = Correspondence.ExceptionStore.forMapValues();\n","        if (correspondence.safeCompare((A) actualValue, expectedValue, exceptions)) {\n","          // The expected key had the expected value. There's no need to check exceptions here,\n","          // because if Correspondence.compare() threw then safeCompare() would return false.\n","          return;\n","        }\n","        // Found matching key with non-matching value.\n","        String diff = correspondence.safeFormatDiff((A) actualValue, expectedValue, exceptions);\n","        if (diff != null) {\n","          failWithoutActual(\n","              ImmutableList.<Fact>builder()\n","                  .add(fact(\"for key\", expectedKey))\n","                  .add(fact(\"expected value\", expectedValue))\n","                  .addAll(correspondence.describeForMapValues())\n","                  .add(fact(\"but got value\", actualValue))\n","                  .add(fact(\"diff\", diff))\n","                  .add(fact(\"full map\", actualCustomStringRepresentationForPackageMembersToCall()))\n","                  .addAll(exceptions.describeAsAdditionalInfo())\n","                  .build());\n","        } else {\n","          failWithoutActual(\n","              ImmutableList.<Fact>builder()\n","                  .add(fact(\"for key\", expectedKey))\n","                  .add(fact(\"expected value\", expectedValue))\n","                  .addAll(correspondence.describeForMapValues())\n","                  .add(fact(\"but got value\", actualValue))\n","                  .add(fact(\"full map\", actualCustomStringRepresentationForPackageMembersToCall()))\n","                  .addAll(exceptions.describeAsAdditionalInfo())\n","                  .build());\n","        }\n","      } else {\n","        // Did not find matching key. Look for the matching value with a different key.\n","        Set<@Nullable Object> keys = new LinkedHashSet<>();\n","        Correspondence.ExceptionStore exceptions = Correspondence.ExceptionStore.forMapValues();\n","        for (Map.Entry<?, A> actualEntry : getCastSubject().entrySet()) {\n","          if (correspondence.safeCompare(actualEntry.getValue(), expectedValue, exceptions)) {\n","            keys.add(actualEntry.getKey());\n","          }\n","        }\n","        if (!keys.isEmpty()) {\n","          // Found matching values with non-matching keys.\n","          failWithoutActual(\n","              ImmutableList.<Fact>builder()\n","                  .add(fact(\"for key\", expectedKey))\n","                  .add(fact(\"expected value\", expectedValue))\n","                  .addAll(correspondence.describeForMapValues())\n","                  .add(simpleFact(\"but was missing\"))\n","                  .add(fact(\"other keys with matching values\", keys))\n","                  .add(fact(\"full map\", actualCustomStringRepresentationForPackageMembersToCall()))\n","                  .addAll(exceptions.describeAsAdditionalInfo())\n","                  .build());\n","        } else {\n","          // Did not find matching key or value.\n","          failWithoutActual(\n","              ImmutableList.<Fact>builder()\n","                  .add(fact(\"for key\", expectedKey))\n","                  .add(fact(\"expected value\", expectedValue))\n","                  .addAll(correspondence.describeForMapValues())\n","                  .add(simpleFact(\"but was missing\"))\n","                  .add(fact(\"full map\", actualCustomStringRepresentationForPackageMembersToCall()))\n","                  .addAll(exceptions.describeAsAdditionalInfo())\n","                  .build());\n","        }\n","      }\n","    }\n","\n","    /**\n","     * Fails if the map contains an entry with the given key and a value that corresponds to the\n","     * given value.\n","     */\n","    @SuppressWarnings(\"UnnecessaryCast\") // needed by nullness checker\n","    public void doesNotContainEntry(@Nullable Object excludedKey, E excludedValue) {\n","      if (checkNotNull(actual).containsKey(excludedKey)) {\n","        // Found matching key. Fail if the value matches, too.\n","        A actualValue = getCastSubject().get(excludedKey);\n","        Correspondence.ExceptionStore exceptions = Correspondence.ExceptionStore.forMapValues();\n","        if (correspondence.safeCompare((A) actualValue, excludedValue, exceptions)) {\n","          // The matching key had a matching value. There's no need to check exceptions here,\n","          // because if Correspondence.compare() threw then safeCompare() would return false.\n","          failWithoutActual(\n","              ImmutableList.<Fact>builder()\n","                  .add(fact(\"expected not to contain\", immutableEntry(excludedKey, excludedValue)))\n","                  .addAll(correspondence.describeForMapValues())\n","                  .add(fact(\"but contained\", immutableEntry(excludedKey, actualValue)))\n","                  .add(fact(\"full map\", actualCustomStringRepresentationForPackageMembersToCall()))\n","                  .addAll(exceptions.describeAsAdditionalInfo())\n","                  .build());\n","        }\n","        // The value didn't match, but we still need to fail if we hit an exception along the way.\n","        if (exceptions.hasCompareException()) {\n","          failWithoutActual(\n","              ImmutableList.<Fact>builder()\n","                  .addAll(exceptions.describeAsMainCause())\n","                  .add(fact(\"expected not to contain\", immutableEntry(excludedKey, excludedValue)))\n","                  .addAll(correspondence.describeForMapValues())\n","                  .add(simpleFact(\"found no match (but failing because of exception)\"))\n","                  .add(fact(\"full map\", actualCustomStringRepresentationForPackageMembersToCall()))\n","                  .build());\n","        }\n","      }\n","    }\n","\n","    /**\n","     * Fails if the map does not contain exactly the given set of keys mapping to values that\n","     * correspond to the given values.\n","     *\n","     * <p>The values must all be of type {@code E}, and a {@link ClassCastException} will be thrown\n","     * if any other type is encountered.\n","     *\n","     * <p><b>Warning:</b> the use of varargs means that we cannot guarantee an equal number of\n","     * key/value pairs at compile time. Please make sure you provide varargs in key/value pairs!\n","     */\n","    // TODO(b/25744307): Can we add an error-prone check that rest.length % 2 == 0?\n","    // For bonus points, checking that the even-numbered values are of type E would be sweet.\n","    @CanIgnoreReturnValue\n","    public Ordered containsExactly(@Nullable Object k0, @Nullable E v0, @Nullable Object... rest) {\n","      @SuppressWarnings(\"unchecked\") // throwing ClassCastException is the correct behaviour\n","      Map<Object, E> expectedMap = (Map<Object, E>) accumulateMap(\"containsExactly\", k0, v0, rest);\n","      return containsExactlyEntriesIn(expectedMap);\n","    }\n","\n","    /**\n","     * Fails if the map does not contain at least the given set of keys mapping to values that\n","     * correspond to the given values.\n","     *\n","     * <p>The values must all be of type {@code E}, and a {@link ClassCastException} will be thrown\n","     * if any other type is encountered.\n","     *\n","     * <p><b>Warning:</b> the use of varargs means that we cannot guarantee an equal number of\n","     * key/value pairs at compile time. Please make sure you provide varargs in key/value pairs!\n","     */\n","    // TODO(b/25744307): Can we add an error-prone check that rest.length % 2 == 0?\n","    // For bonus points, checking that the even-numbered values are of type E would be sweet.\n","    @CanIgnoreReturnValue\n","    public Ordered containsAtLeast(@Nullable Object k0, @Nullable E v0, @Nullable Object... rest) {\n","      @SuppressWarnings(\"unchecked\") // throwing ClassCastException is the correct behaviour\n","      Map<Object, E> expectedMap = (Map<Object, E>) accumulateMap(\"containsAtLeast\", k0, v0, rest);\n","      return containsAtLeastEntriesIn(expectedMap);\n","    }\n","\n","    /**\n","     * Fails if the map does not contain exactly the keys in the given map, mapping to values that\n","     * correspond to the values of the given map.\n","     */\n","    @CanIgnoreReturnValue\n","    public Ordered containsExactlyEntriesIn(Map<?, ? extends E> expectedMap) {\n","      if (expectedMap.isEmpty()) {\n","        if (checkNotNull(actual).isEmpty()) {\n","          return IN_ORDER;\n","        } else {\n","          isEmpty(); // fails\n","          return ALREADY_FAILED;\n","        }\n","      }\n","      return internalContainsEntriesIn(expectedMap, /* allowUnexpected= */ false);\n","    }\n","\n","    /**\n","     * Fails if the map does not contain at least the keys in the given map, mapping to values that\n","     * correspond to the values of the given map.\n","     */\n","    @CanIgnoreReturnValue\n","    public Ordered containsAtLeastEntriesIn(Map<?, ? extends E> expectedMap) {\n","      if (expectedMap.isEmpty()) {\n","        return IN_ORDER;\n","      }\n","      return internalContainsEntriesIn(expectedMap, /* allowUnexpected= */ true);\n","    }\n","\n","    private <K extends @Nullable Object, V extends E> Ordered internalContainsEntriesIn(\n","        Map<K, V> expectedMap, boolean allowUnexpected) {\n","      Correspondence.ExceptionStore exceptions = Correspondence.ExceptionStore.forMapValues();\n","      MapDifference<@Nullable Object, A, V> diff =\n","          MapDifference.create(\n","              getCastSubject(),\n","              expectedMap,\n","              allowUnexpected,\n","              new ValueTester<A, E>() {\n","                @Override\n","                public boolean test(A actualValue, E expectedValue) {\n","                  return correspondence.safeCompare(actualValue, expectedValue, exceptions);\n","                }\n","              });\n","      if (diff.isEmpty()) {\n","        // The maps correspond exactly. There's no need to check exceptions here, because if\n","        // Correspondence.compare() threw then safeCompare() would return false and the diff would\n","        // record that we had the wrong value for that key.\n","        return new MapInOrder(expectedMap, allowUnexpected, correspondence);\n","      }\n","      failWithoutActual(\n","          ImmutableList.<Fact>builder()\n","              .addAll(diff.describe(differ(exceptions)))\n","              .add(simpleFact(\"---\"))\n","              .add(fact(allowUnexpected ? \"expected to contain at least\" : \"expected\", expectedMap))\n","              .addAll(correspondence.describeForMapValues())\n","              .add(butWas())\n","              .addAll(exceptions.describeAsAdditionalInfo())\n","              .build());\n","      return ALREADY_FAILED;\n","    }\n","\n","    private <V extends E> Differ<A, V> differ(Correspondence.ExceptionStore exceptions) {\n","      return (actual, expected) -> correspondence.safeFormatDiff(actual, expected, exceptions);\n","    }\n","\n","    @SuppressWarnings(\"unchecked\") // throwing ClassCastException is the correct behaviour\n","    private Map<?, A> getCastSubject() {\n","      return (Map<?, A>) checkNotNull(actual);\n","    }\n","  }\n","}\n"],"test_content":["/*\n"," * Copyright (c) 2011 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.truth.TestCorrespondences.CASE_INSENSITIVE_EQUALITY;\n","import static com.google.common.truth.TestCorrespondences.INT_DIFF_FORMATTER;\n","import static com.google.common.truth.TestCorrespondences.STRING_PARSES_TO_INTEGER_CORRESPONDENCE;\n","import static com.google.common.truth.TestCorrespondences.WITHIN_10_OF;\n","import static com.google.common.truth.Truth.assertThat;\n","import static java.lang.String.CASE_INSENSITIVE_ORDER;\n","import static org.junit.Assert.fail;\n","\n","import com.google.common.collect.ImmutableMap;\n","import com.google.common.collect.Maps;\n","import java.util.LinkedHashMap;\n","import java.util.Map;\n","import java.util.TreeMap;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import org.junit.runners.JUnit4;\n","\n","/**\n"," * Tests for {@link Map} subjects.\n"," *\n"," * @author Christian Gruber\n"," * @author Kurt Alfred Kluever\n"," */\n","@RunWith(JUnit4.class)\n","public class MapSubjectTest extends BaseSubjectTestCase {\n","\n","  @Test\n","  public void containsExactlyWithNullKey() {\n","    Map<String, String> actual = Maps.newHashMap();\n","    actual.put(null, \"value\");\n","\n","    assertThat(actual).containsExactly(null, \"value\");\n","    assertThat(actual).containsExactly(null, \"value\").inOrder();\n","    assertThat(actual).containsExactlyEntriesIn(actual);\n","    assertThat(actual).containsExactlyEntriesIn(actual).inOrder();\n","  }\n","\n","  @Test\n","  public void containsExactlyWithNullValue() {\n","    Map<String, String> actual = Maps.newHashMap();\n","    actual.put(\"key\", null);\n","\n","    assertThat(actual).containsExactly(\"key\", null);\n","    assertThat(actual).containsExactly(\"key\", null).inOrder();\n","    assertThat(actual).containsExactlyEntriesIn(actual);\n","    assertThat(actual).containsExactlyEntriesIn(actual).inOrder();\n","  }\n","\n","  @Test\n","  public void containsExactlyEmpty() {\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of();\n","\n","    assertThat(actual).containsExactly();\n","    assertThat(actual).containsExactly().inOrder();\n","    assertThat(actual).containsExactlyEntriesIn(actual);\n","    assertThat(actual).containsExactlyEntriesIn(actual).inOrder();\n","  }\n","\n","  @Test\n","  public void containsExactlyEmpty_fails() {\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of(\"jan\", 1);\n","\n","    expectFailureWhenTestingThat(actual).containsExactly();\n","    assertFailureKeys(\"expected to be empty\", \"but was\");\n","  }\n","\n","  @Test\n","  public void containsExactlyEntriesInEmpty_fails() {\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of(\"jan\", 1);\n","\n","    expectFailureWhenTestingThat(actual).containsExactlyEntriesIn(ImmutableMap.of());\n","    assertFailureKeys(\"expected to be empty\", \"but was\");\n","  }\n","\n","  @Test\n","  public void containsExactlyOneEntry() {\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of(\"jan\", 1);\n","\n","    assertThat(actual).containsExactly(\"jan\", 1);\n","    assertThat(actual).containsExactly(\"jan\", 1).inOrder();\n","    assertThat(actual).containsExactlyEntriesIn(actual);\n","    assertThat(actual).containsExactlyEntriesIn(actual).inOrder();\n","  }\n","\n","  @Test\n","  public void containsExactlyMultipleEntries() {\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of(\"jan\", 1, \"feb\", 2, \"march\", 3);\n","\n","    assertThat(actual).containsExactly(\"march\", 3, \"jan\", 1, \"feb\", 2);\n","    assertThat(actual).containsExactly(\"jan\", 1, \"feb\", 2, \"march\", 3).inOrder();\n","    assertThat(actual).containsExactlyEntriesIn(actual);\n","    assertThat(actual).containsExactlyEntriesIn(actual).inOrder();\n","  }\n","\n","  @Test\n","  public void containsExactlyDuplicateKeys() {\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of(\"jan\", 1, \"feb\", 2, \"march\", 3);\n","\n","    try {\n","      assertThat(actual).containsExactly(\"jan\", 1, \"jan\", 2, \"jan\", 3);\n","      fail(\"Expected IllegalArgumentException\");\n","    } catch (IllegalArgumentException expected) {\n","      assertThat(expected)\n","          .hasMessageThat()\n","          .isEqualTo(\"Duplicate keys ([jan x 3]) cannot be passed to containsExactly().\");\n","    }\n","  }\n","\n","  @Test\n","  public void containsExactlyMultipleDuplicateKeys() {\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of(\"jan\", 1, \"feb\", 2, \"march\", 3);\n","\n","    try {\n","      assertThat(actual).containsExactly(\"jan\", 1, \"jan\", 1, \"feb\", 2, \"feb\", 2);\n","      fail(\"Expected IllegalArgumentException\");\n","    } catch (IllegalArgumentException expected) {\n","      assertThat(expected)\n","          .hasMessageThat()\n","          .isEqualTo(\"Duplicate keys ([jan x 2, feb x 2]) cannot be passed to containsExactly().\");\n","    }\n","  }\n","\n","  @Test\n","  public void containsExactlyExtraKey() {\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of(\"jan\", 1, \"feb\", 2, \"march\", 3);\n","    expectFailureWhenTestingThat(actual).containsExactly(\"feb\", 2, \"jan\", 1);\n","    assertFailureKeys(\n","        \"unexpected keys\", \"for key\", \"unexpected value\", \"---\", \"expected\", \"but was\");\n","    assertFailureValue(\"for key\", \"march\");\n","    assertFailureValue(\"unexpected value\", \"3\");\n","    assertFailureValue(\"expected\", \"{feb=2, jan=1}\");\n","    assertFailureValue(\"but was\", \"{jan=1, feb=2, march=3}\");\n","  }\n","\n","  @Test\n","  public void containsExactlyExtraKeyInOrder() {\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of(\"jan\", 1, \"feb\", 2, \"march\", 3);\n","    expectFailureWhenTestingThat(actual).containsExactly(\"feb\", 2, \"jan\", 1).inOrder();\n","    assertFailureKeys(\n","        \"unexpected keys\", \"for key\", \"unexpected value\", \"---\", \"expected\", \"but was\");\n","    assertFailureValue(\"for key\", \"march\");\n","    assertFailureValue(\"unexpected value\", \"3\");\n","  }\n","\n","  @Test\n","  public void containsExactlyMissingKey() {\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of(\"jan\", 1, \"feb\", 2);\n","    expectFailureWhenTestingThat(actual).containsExactly(\"jan\", 1, \"march\", 3, \"feb\", 2);\n","    assertFailureKeys(\"missing keys\", \"for key\", \"expected value\", \"---\", \"expected\", \"but was\");\n","    assertFailureValue(\"for key\", \"march\");\n","    assertFailureValue(\"expected value\", \"3\");\n","  }\n","\n","  @Test\n","  public void containsExactlyWrongValue() {\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of(\"jan\", 1, \"feb\", 2, \"march\", 3);\n","    expectFailureWhenTestingThat(actual).containsExactly(\"jan\", 1, \"march\", 33, \"feb\", 2);\n","    assertFailureKeys(\n","        \"keys with wrong values\",\n","        \"for key\",\n","        \"expected value\",\n","        \"but got value\",\n","        \"---\",\n","        \"expected\",\n","        \"but was\");\n","    assertFailureValue(\"for key\", \"march\");\n","    assertFailureValue(\"expected value\", \"33\");\n","    assertFailureValue(\"but got value\", \"3\");\n","  }\n","\n","  @Test\n","  public void containsExactlyWrongValueWithNull() {\n","    // Test for https://github.com/google/truth/issues/468\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of(\"jan\", 1, \"feb\", 2, \"march\", 3);\n","    expectFailureWhenTestingThat(actual).containsExactly(\"jan\", 1, \"march\", null, \"feb\", 2);\n","    assertFailureKeys(\n","        \"keys with wrong values\",\n","        \"for key\",\n","        \"expected value\",\n","        \"but got value\",\n","        \"---\",\n","        \"expected\",\n","        \"but was\");\n","    assertFailureValue(\"for key\", \"march\");\n","    assertFailureValue(\"expected value\", \"null\");\n","    assertFailureValue(\"but got value\", \"3\");\n","  }\n","\n","  @Test\n","  public void containsExactlyExtraKeyAndMissingKey() {\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of(\"jan\", 1, \"march\", 3);\n","    expectFailureWhenTestingThat(actual).containsExactly(\"jan\", 1, \"feb\", 2);\n","    assertFailureKeys(\n","        \"missing keys\",\n","        \"for key\",\n","        \"expected value\",\n","        \"unexpected keys\",\n","        \"for key\",\n","        \"unexpected value\",\n","        \"---\",\n","        \"expected\",\n","        \"but was\");\n","    assertFailureValueIndexed(\"for key\", 0, \"feb\");\n","    assertFailureValue(\"expected value\", \"2\");\n","    assertFailureValueIndexed(\"for key\", 1, \"march\");\n","    assertFailureValue(\"unexpected value\", \"3\");\n","  }\n","\n","  @Test\n","  public void containsExactlyExtraKeyAndWrongValue() {\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of(\"jan\", 1, \"feb\", 2, \"march\", 3);\n","    expectFailureWhenTestingThat(actual).containsExactly(\"jan\", 1, \"march\", 33);\n","    assertFailureKeys(\n","        \"keys with wrong values\",\n","        \"for key\",\n","        \"expected value\",\n","        \"but got value\",\n","        \"unexpected keys\",\n","        \"for key\",\n","        \"unexpected value\",\n","        \"---\",\n","        \"expected\",\n","        \"but was\");\n","    assertFailureValueIndexed(\"for key\", 0, \"march\");\n","    assertFailureValue(\"expected value\", \"33\");\n","    assertFailureValue(\"but got value\", \"3\");\n","    assertFailureValueIndexed(\"for key\", 1, \"feb\");\n","    assertFailureValue(\"unexpected value\", \"2\");\n","  }\n","\n","  @Test\n","  public void containsExactlyMissingKeyAndWrongValue() {\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of(\"jan\", 1, \"march\", 3);\n","    expectFailureWhenTestingThat(actual).containsExactly(\"jan\", 1, \"march\", 33, \"feb\", 2);\n","    assertFailureKeys(\n","        \"keys with wrong values\",\n","        \"for key\",\n","        \"expected value\",\n","        \"but got value\",\n","        \"missing keys\",\n","        \"for key\",\n","        \"expected value\",\n","        \"---\",\n","        \"expected\",\n","        \"but was\");\n","    assertFailureValueIndexed(\"for key\", 0, \"march\");\n","    assertFailureValueIndexed(\"expected value\", 0, \"33\");\n","    assertFailureValue(\"but got value\", \"3\");\n","    assertFailureValueIndexed(\"for key\", 1, \"feb\");\n","    assertFailureValueIndexed(\"expected value\", 1, \"2\");\n","  }\n","\n","  @Test\n","  public void containsExactlyExtraKeyAndMissingKeyAndWrongValue() {\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of(\"jan\", 1, \"march\", 3);\n","    expectFailureWhenTestingThat(actual).containsExactly(\"march\", 33, \"feb\", 2);\n","    assertFailureKeys(\n","        \"keys with wrong values\",\n","        \"for key\",\n","        \"expected value\",\n","        \"but got value\",\n","        \"missing keys\",\n","        \"for key\",\n","        \"expected value\",\n","        \"unexpected keys\",\n","        \"for key\",\n","        \"unexpected value\",\n","        \"---\",\n","        \"expected\",\n","        \"but was\");\n","    assertFailureValueIndexed(\"for key\", 0, \"march\");\n","    assertFailureValueIndexed(\"expected value\", 0, \"33\");\n","    assertFailureValue(\"but got value\", \"3\");\n","    assertFailureValueIndexed(\"for key\", 1, \"feb\");\n","    assertFailureValueIndexed(\"expected value\", 1, \"2\");\n","    assertFailureValueIndexed(\"for key\", 2, \"jan\");\n","    assertFailureValue(\"unexpected value\", \"1\");\n","  }\n","\n","  @Test\n","  public void containsExactlyNotInOrder() {\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of(\"jan\", 1, \"feb\", 2, \"march\", 3);\n","    assertThat(actual).containsExactlyEntriesIn(actual);\n","    assertThat(actual).containsExactlyEntriesIn(actual).inOrder();\n","\n","    assertThat(actual).containsExactly(\"jan\", 1, \"march\", 3, \"feb\", 2);\n","    expectFailureWhenTestingThat(actual).containsExactly(\"jan\", 1, \"march\", 3, \"feb\", 2).inOrder();\n","    assertFailureKeys(\"entries match, but order was wrong\", \"expected\", \"but was\");\n","    assertFailureValue(\"expected\", \"{jan=1, march=3, feb=2}\");\n","    assertFailureValue(\"but was\", \"{jan=1, feb=2, march=3}\");\n","  }\n","\n","  @Test\n","  @SuppressWarnings(\"ShouldHaveEvenArgs\")\n","  public void containsExactlyBadNumberOfArgs() {\n","    ImmutableMap<String, Integer> actual =\n","        ImmutableMap.of(\"jan\", 1, \"feb\", 2, \"march\", 3, \"april\", 4, \"may\", 5);\n","    assertThat(actual).containsExactlyEntriesIn(actual);\n","    assertThat(actual).containsExactlyEntriesIn(actual).inOrder();\n","\n","    try {\n","      assertThat(actual)\n","          .containsExactly(\"jan\", 1, \"feb\", 2, \"march\", 3, \"april\", 4, \"may\", 5, \"june\", 6, \"july\");\n","      fail(\"Expected IllegalArgumentException\");\n","    } catch (IllegalArgumentException expected) {\n","      assertThat(expected)\n","          .hasMessageThat()\n","          .isEqualTo(\n","              \"There must be an equal number of key/value pairs \"\n","                  + \"(i.e., the number of key/value parameters (13) must be even).\");\n","    }\n","  }\n","\n","  @Test\n","  public void containsExactlyWrongValue_sameToStringForValues() {\n","    expectFailureWhenTestingThat(ImmutableMap.of(\"jan\", 1L, \"feb\", 2L))\n","        .containsExactly(\"jan\", 1, \"feb\", 2);\n","    assertFailureKeys(\n","        \"keys with wrong values\",\n","        \"for key\",\n","        \"expected value\",\n","        \"but got value\",\n","        \"for key\",\n","        \"expected value\",\n","        \"but got value\",\n","        \"---\",\n","        \"expected\",\n","        \"but was\");\n","    assertFailureValueIndexed(\"for key\", 0, \"jan\");\n","    assertFailureValueIndexed(\"expected value\", 0, \"1 (java.lang.Integer)\");\n","    assertFailureValueIndexed(\"but got value\", 0, \"1 (java.lang.Long)\");\n","    assertFailureValueIndexed(\"for key\", 1, \"feb\");\n","    assertFailureValueIndexed(\"expected value\", 1, \"2 (java.lang.Integer)\");\n","    assertFailureValueIndexed(\"but got value\", 1, \"2 (java.lang.Long)\");\n","  }\n","\n","  @Test\n","  public void containsExactlyWrongValue_sameToStringForKeys() {\n","    expectFailureWhenTestingThat(ImmutableMap.of(1L, \"jan\", 1, \"feb\"))\n","        .containsExactly(1, \"jan\", 1L, \"feb\");\n","    assertFailureKeys(\n","        \"keys with wrong values\",\n","        \"for key\",\n","        \"expected value\",\n","        \"but got value\",\n","        \"for key\",\n","        \"expected value\",\n","        \"but got value\",\n","        \"---\",\n","        \"expected\",\n","        \"but was\");\n","    assertFailureValueIndexed(\"for key\", 0, \"1 (java.lang.Integer)\");\n","    assertFailureValueIndexed(\"expected value\", 0, \"jan\");\n","    assertFailureValueIndexed(\"but got value\", 0, \"feb\");\n","    assertFailureValueIndexed(\"for key\", 1, \"1 (java.lang.Long)\");\n","    assertFailureValueIndexed(\"expected value\", 1, \"feb\");\n","    assertFailureValueIndexed(\"but got value\", 1, \"jan\");\n","  }\n","\n","  @Test\n","  public void containsExactlyExtraKeyAndMissingKey_failsWithSameToStringForKeys() {\n","    expectFailureWhenTestingThat(ImmutableMap.of(1L, \"jan\", 2, \"feb\"))\n","        .containsExactly(1, \"jan\", 2, \"feb\");\n","    assertFailureKeys(\n","        \"missing keys\",\n","        \"for key\",\n","        \"expected value\",\n","        \"unexpected keys\",\n","        \"for key\",\n","        \"unexpected value\",\n","        \"---\",\n","        \"expected\",\n","        \"but was\");\n","    assertFailureValueIndexed(\"for key\", 0, \"1 (java.lang.Integer)\");\n","    assertFailureValue(\"expected value\", \"jan\");\n","    assertFailureValueIndexed(\"for key\", 1, \"1 (java.lang.Long)\");\n","    assertFailureValue(\"unexpected value\", \"jan\");\n","  }\n","\n","  @Test\n","  public void containsAtLeastWithNullKey() {\n","    Map<String, String> actual = Maps.newHashMap();\n","    actual.put(null, \"value\");\n","    actual.put(\"unexpectedKey\", \"unexpectedValue\");\n","    Map<String, String> expected = Maps.newHashMap();\n","    expected.put(null, \"value\");\n","\n","    assertThat(actual).containsAtLeast(null, \"value\");\n","    assertThat(actual).containsAtLeast(null, \"value\").inOrder();\n","    assertThat(actual).containsAtLeastEntriesIn(expected);\n","    assertThat(actual).containsAtLeastEntriesIn(expected).inOrder();\n","  }\n","\n","  @Test\n","  public void containsAtLeastWithNullValue() {\n","    Map<String, String> actual = Maps.newHashMap();\n","    actual.put(\"key\", null);\n","    actual.put(\"unexpectedKey\", \"unexpectedValue\");\n","    Map<String, String> expected = Maps.newHashMap();\n","    expected.put(\"key\", null);\n","\n","    assertThat(actual).containsAtLeast(\"key\", null);\n","    assertThat(actual).containsAtLeast(\"key\", null).inOrder();\n","    assertThat(actual).containsAtLeastEntriesIn(expected);\n","    assertThat(actual).containsAtLeastEntriesIn(expected).inOrder();\n","  }\n","\n","  @Test\n","  public void containsAtLeastEmpty() {\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of(\"key\", 1);\n","\n","    assertThat(actual).containsAtLeastEntriesIn(ImmutableMap.of());\n","    assertThat(actual).containsAtLeastEntriesIn(ImmutableMap.of()).inOrder();\n","  }\n","\n","  @Test\n","  public void containsAtLeastOneEntry() {\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of(\"jan\", 1);\n","\n","    assertThat(actual).containsAtLeast(\"jan\", 1);\n","    assertThat(actual).containsAtLeast(\"jan\", 1).inOrder();\n","    assertThat(actual).containsAtLeastEntriesIn(actual);\n","    assertThat(actual).containsAtLeastEntriesIn(actual).inOrder();\n","  }\n","\n","  @Test\n","  public void containsAtLeastMultipleEntries() {\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of(\"jan\", 1, \"feb\", 2, \"mar\", 3, \"apr\", 4);\n","\n","    assertThat(actual).containsAtLeast(\"apr\", 4, \"jan\", 1, \"feb\", 2);\n","    assertThat(actual).containsAtLeast(\"jan\", 1, \"feb\", 2, \"apr\", 4).inOrder();\n","    assertThat(actual).containsAtLeastEntriesIn(ImmutableMap.of(\"apr\", 4, \"jan\", 1, \"feb\", 2));\n","    assertThat(actual).containsAtLeastEntriesIn(actual).inOrder();\n","  }\n","\n","  @Test\n","  public void containsAtLeastDuplicateKeys() {\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of(\"jan\", 1, \"feb\", 2, \"march\", 3);\n","\n","    try {\n","      assertThat(actual).containsAtLeast(\"jan\", 1, \"jan\", 2, \"jan\", 3);\n","      fail(\"Expected IllegalArgumentException\");\n","    } catch (IllegalArgumentException expected) {\n","      assertThat(expected)\n","          .hasMessageThat()\n","          .isEqualTo(\"Duplicate keys ([jan x 3]) cannot be passed to containsAtLeast().\");\n","    }\n","  }\n","\n","  @Test\n","  public void containsAtLeastMultipleDuplicateKeys() {\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of(\"jan\", 1, \"feb\", 2, \"march\", 3);\n","\n","    try {\n","      assertThat(actual).containsAtLeast(\"jan\", 1, \"jan\", 1, \"feb\", 2, \"feb\", 2);\n","      fail(\"Expected IllegalArgumentException\");\n","    } catch (IllegalArgumentException expected) {\n","      assertThat(expected)\n","          .hasMessageThat()\n","          .isEqualTo(\"Duplicate keys ([jan x 2, feb x 2]) cannot be passed to containsAtLeast().\");\n","    }\n","  }\n","\n","  @Test\n","  public void containsAtLeastMissingKey() {\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of(\"jan\", 1, \"feb\", 2);\n","    expectFailureWhenTestingThat(actual).containsAtLeast(\"jan\", 1, \"march\", 3);\n","    assertFailureKeys(\n","        \"missing keys\",\n","        \"for key\",\n","        \"expected value\",\n","        \"---\",\n","        \"expected to contain at least\",\n","        \"but was\");\n","    assertFailureValue(\"for key\", \"march\");\n","    assertFailureValue(\"expected value\", \"3\");\n","    assertFailureValue(\"expected to contain at least\", \"{jan=1, march=3}\");\n","  }\n","\n","  @Test\n","  public void containsAtLeastWrongValue() {\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of(\"jan\", 1, \"feb\", 2, \"march\", 3);\n","    expectFailureWhenTestingThat(actual).containsAtLeast(\"jan\", 1, \"march\", 33);\n","    assertFailureKeys(\n","        \"keys with wrong values\",\n","        \"for key\",\n","        \"expected value\",\n","        \"but got value\",\n","        \"---\",\n","        \"expected to contain at least\",\n","        \"but was\");\n","    assertFailureValue(\"for key\", \"march\");\n","    assertFailureValue(\"expected value\", \"33\");\n","    assertFailureValue(\"but got value\", \"3\");\n","  }\n","\n","  @Test\n","  public void containsAtLeastWrongValueWithNull() {\n","    // Test for https://github.com/google/truth/issues/468\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of(\"jan\", 1, \"feb\", 2, \"march\", 3);\n","    expectFailureWhenTestingThat(actual).containsAtLeast(\"jan\", 1, \"march\", null);\n","    assertFailureKeys(\n","        \"keys with wrong values\",\n","        \"for key\",\n","        \"expected value\",\n","        \"but got value\",\n","        \"---\",\n","        \"expected to contain at least\",\n","        \"but was\");\n","    assertFailureValue(\"for key\", \"march\");\n","    assertFailureValue(\"expected value\", \"null\");\n","    assertFailureValue(\"but got value\", \"3\");\n","  }\n","\n","  @Test\n","  public void containsAtLeastExtraKeyAndMissingKeyAndWrongValue() {\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of(\"jan\", 1, \"march\", 3);\n","    expectFailureWhenTestingThat(actual).containsAtLeast(\"march\", 33, \"feb\", 2);\n","    assertFailureKeys(\n","        \"keys with wrong values\",\n","        \"for key\",\n","        \"expected value\",\n","        \"but got value\",\n","        \"missing keys\",\n","        \"for key\",\n","        \"expected value\",\n","        \"---\",\n","        \"expected to contain at least\",\n","        \"but was\");\n","    assertFailureValueIndexed(\"for key\", 0, \"march\");\n","    assertFailureValueIndexed(\"expected value\", 0, \"33\");\n","    assertFailureValue(\"but got value\", \"3\");\n","    assertFailureValueIndexed(\"for key\", 1, \"feb\");\n","    assertFailureValueIndexed(\"expected value\", 1, \"2\");\n","  }\n","\n","  @Test\n","  public void containsAtLeastNotInOrder() {\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of(\"jan\", 1, \"feb\", 2, \"march\", 3);\n","\n","    assertThat(actual).containsAtLeast(\"march\", 3, \"feb\", 2);\n","    expectFailureWhenTestingThat(actual).containsAtLeast(\"march\", 3, \"feb\", 2).inOrder();\n","    assertFailureKeys(\n","        \"required entries were all found, but order was wrong\",\n","        \"expected to contain at least\",\n","        \"but was\");\n","    assertFailureValue(\"expected to contain at least\", \"{march=3, feb=2}\");\n","    assertFailureValue(\"but was\", \"{jan=1, feb=2, march=3}\");\n","  }\n","\n","  @Test\n","  @SuppressWarnings(\"ShouldHaveEvenArgs\")\n","  public void containsAtLeastBadNumberOfArgs() {\n","    ImmutableMap<String, Integer> actual =\n","        ImmutableMap.of(\"jan\", 1, \"feb\", 2, \"march\", 3, \"april\", 4, \"may\", 5);\n","\n","    try {\n","      assertThat(actual)\n","          .containsAtLeast(\"jan\", 1, \"feb\", 2, \"march\", 3, \"april\", 4, \"may\", 5, \"june\", 6, \"july\");\n","      fail(\"Expected IllegalArgumentException\");\n","    } catch (IllegalArgumentException expected) {\n","      assertThat(expected)\n","          .hasMessageThat()\n","          .isEqualTo(\n","              \"There must be an equal number of key/value pairs \"\n","                  + \"(i.e., the number of key/value parameters (13) must be even).\");\n","    }\n","  }\n","\n","  @Test\n","  public void containsAtLeastWrongValue_sameToStringForValues() {\n","    expectFailureWhenTestingThat(ImmutableMap.of(\"jan\", 1L, \"feb\", 2L, \"mar\", 3L))\n","        .containsAtLeast(\"jan\", 1, \"feb\", 2);\n","    assertFailureKeys(\n","        \"keys with wrong values\",\n","        \"for key\",\n","        \"expected value\",\n","        \"but got value\",\n","        \"for key\",\n","        \"expected value\",\n","        \"but got value\",\n","        \"---\",\n","        \"expected to contain at least\",\n","        \"but was\");\n","    assertFailureValueIndexed(\"for key\", 0, \"jan\");\n","    assertFailureValueIndexed(\"expected value\", 0, \"1 (java.lang.Integer)\");\n","    assertFailureValueIndexed(\"but got value\", 0, \"1 (java.lang.Long)\");\n","    assertFailureValueIndexed(\"for key\", 1, \"feb\");\n","    assertFailureValueIndexed(\"expected value\", 1, \"2 (java.lang.Integer)\");\n","    assertFailureValueIndexed(\"but got value\", 1, \"2 (java.lang.Long)\");\n","  }\n","\n","  @Test\n","  public void containsAtLeastWrongValue_sameToStringForKeys() {\n","    expectFailureWhenTestingThat(ImmutableMap.of(1L, \"jan\", 1, \"feb\"))\n","        .containsAtLeast(1, \"jan\", 1L, \"feb\");\n","    assertFailureKeys(\n","        \"keys with wrong values\",\n","        \"for key\",\n","        \"expected value\",\n","        \"but got value\",\n","        \"for key\",\n","        \"expected value\",\n","        \"but got value\",\n","        \"---\",\n","        \"expected to contain at least\",\n","        \"but was\");\n","    assertFailureValueIndexed(\"for key\", 0, \"1 (java.lang.Integer)\");\n","    assertFailureValueIndexed(\"expected value\", 0, \"jan\");\n","    assertFailureValueIndexed(\"but got value\", 0, \"feb\");\n","    assertFailureValueIndexed(\"for key\", 1, \"1 (java.lang.Long)\");\n","    assertFailureValueIndexed(\"expected value\", 1, \"feb\");\n","    assertFailureValueIndexed(\"but got value\", 1, \"jan\");\n","  }\n","\n","  @Test\n","  public void containsAtLeastExtraKeyAndMissingKey_failsWithSameToStringForKeys() {\n","    expectFailureWhenTestingThat(ImmutableMap.of(1L, \"jan\", 2, \"feb\"))\n","        .containsAtLeast(1, \"jan\", 2, \"feb\");\n","    assertFailureKeys(\n","        \"missing keys\",\n","        \"for key\",\n","        \"expected value\",\n","        \"---\",\n","        \"expected to contain at least\",\n","        \"but was\");\n","    assertFailureValue(\"for key\", \"1 (java.lang.Integer)\");\n","    assertFailureValue(\"expected value\", \"jan\");\n","  }\n","\n","  @Test\n","  public void isEqualToPass() {\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of(\"jan\", 1, \"feb\", 2, \"march\", 3);\n","    ImmutableMap<String, Integer> expectedMap = ImmutableMap.of(\"jan\", 1, \"feb\", 2, \"march\", 3);\n","\n","    assertThat(actual).isEqualTo(expectedMap);\n","  }\n","\n","  @Test\n","  public void isEqualToFailureExtraMissingAndDiffering() {\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of(\"jan\", 1, \"feb\", 2, \"march\", 3);\n","    ImmutableMap<String, Integer> expectedMap = ImmutableMap.of(\"jan\", 1, \"april\", 4, \"march\", 5);\n","\n","    expectFailureWhenTestingThat(actual).isEqualTo(expectedMap);\n","    assertFailureKeys(\n","        \"keys with wrong values\",\n","        \"for key\",\n","        \"expected value\",\n","        \"but got value\",\n","        \"missing keys\",\n","        \"for key\",\n","        \"expected value\",\n","        \"unexpected keys\",\n","        \"for key\",\n","        \"unexpected value\",\n","        \"---\",\n","        \"expected\",\n","        \"but was\");\n","    assertFailureValueIndexed(\"for key\", 0, \"march\");\n","    assertFailureValueIndexed(\"expected value\", 0, \"5\");\n","    assertFailureValue(\"but got value\", \"3\");\n","    assertFailureValueIndexed(\"for key\", 1, \"april\");\n","    assertFailureValueIndexed(\"expected value\", 1, \"4\");\n","    assertFailureValueIndexed(\"for key\", 2, \"feb\");\n","    assertFailureValue(\"unexpected value\", \"2\");\n","    assertFailureValue(\"expected\", \"{jan=1, april=4, march=5}\");\n","    assertFailureValue(\"but was\", \"{jan=1, feb=2, march=3}\");\n","  }\n","\n","  @Test\n","  public void isEqualToFailureDiffering() {\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of(\"jan\", 1, \"feb\", 2, \"march\", 3);\n","    ImmutableMap<String, Integer> expectedMap = ImmutableMap.of(\"jan\", 1, \"feb\", 2, \"march\", 4);\n","\n","    expectFailureWhenTestingThat(actual).isEqualTo(expectedMap);\n","    assertFailureKeys(\n","        \"keys with wrong values\",\n","        \"for key\",\n","        \"expected value\",\n","        \"but got value\",\n","        \"---\",\n","        \"expected\",\n","        \"but was\");\n","    assertFailureValueIndexed(\"for key\", 0, \"march\");\n","    assertFailureValue(\"expected value\", \"4\");\n","    assertFailureValue(\"but got value\", \"3\");\n","  }\n","\n","  @Test\n","  public void isEqualToFailureExtra() {\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of(\"jan\", 1, \"feb\", 2, \"march\", 3);\n","    ImmutableMap<String, Integer> expectedMap = ImmutableMap.of(\"jan\", 1, \"feb\", 2);\n","\n","    expectFailureWhenTestingThat(actual).isEqualTo(expectedMap);\n","    assertFailureKeys(\n","        \"unexpected keys\", \"for key\", \"unexpected value\", \"---\", \"expected\", \"but was\");\n","    assertFailureValue(\"for key\", \"march\");\n","    assertFailureValue(\"unexpected value\", \"3\");\n","  }\n","\n","  @Test\n","  public void isEqualToFailureMissing() {\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of(\"jan\", 1, \"feb\", 2);\n","    ImmutableMap<String, Integer> expectedMap = ImmutableMap.of(\"jan\", 1, \"feb\", 2, \"march\", 3);\n","\n","    expectFailureWhenTestingThat(actual).isEqualTo(expectedMap);\n","    assertFailureKeys(\"missing keys\", \"for key\", \"expected value\", \"---\", \"expected\", \"but was\");\n","    assertFailureValue(\"for key\", \"march\");\n","    assertFailureValue(\"expected value\", \"3\");\n","  }\n","\n","  @Test\n","  public void isEqualToFailureExtraAndMissing() {\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of(\"jan\", 1, \"feb\", 2, \"march\", 3);\n","    ImmutableMap<String, Integer> expectedMap = ImmutableMap.of(\"jan\", 1, \"feb\", 2, \"mar\", 3);\n","\n","    expectFailureWhenTestingThat(actual).isEqualTo(expectedMap);\n","    assertFailureKeys(\n","        \"missing keys\",\n","        \"for key\",\n","        \"expected value\",\n","        \"unexpected keys\",\n","        \"for key\",\n","        \"unexpected value\",\n","        \"---\",\n","        \"expected\",\n","        \"but was\");\n","    assertFailureValueIndexed(\"for key\", 0, \"mar\");\n","    assertFailureValue(\"expected value\", \"3\");\n","    assertFailureValueIndexed(\"for key\", 1, \"march\");\n","    assertFailureValue(\"unexpected value\", \"3\");\n","  }\n","\n","  @Test\n","  public void isEqualToFailureDiffering_sameToString() {\n","    ImmutableMap<String, Number> actual =\n","        ImmutableMap.<String, Number>of(\"jan\", 1, \"feb\", 2, \"march\", 3L);\n","    ImmutableMap<String, Integer> expectedMap = ImmutableMap.of(\"jan\", 1, \"feb\", 2, \"march\", 3);\n","\n","    expectFailureWhenTestingThat(actual).isEqualTo(expectedMap);\n","    assertFailureKeys(\n","        \"keys with wrong values\",\n","        \"for key\",\n","        \"expected value\",\n","        \"but got value\",\n","        \"---\",\n","        \"expected\",\n","        \"but was\");\n","    assertFailureValueIndexed(\"for key\", 0, \"march\");\n","    assertFailureValue(\"expected value\", \"3 (java.lang.Integer)\");\n","    assertFailureValue(\"but got value\", \"3 (java.lang.Long)\");\n","  }\n","\n","  @Test\n","  public void isEqualToNonMap() {\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of(\"jan\", 1, \"feb\", 2, \"march\", 3);\n","    expectFailureWhenTestingThat(actual).isEqualTo(\"something else\");\n","    assertFailureKeys(\"expected\", \"but was\");\n","  }\n","\n","  @Test\n","  public void isEqualToNotConsistentWithEquals() {\n","    TreeMap<String, Integer> actual = new TreeMap<>(CASE_INSENSITIVE_ORDER);\n","    TreeMap<String, Integer> expected = new TreeMap<>(CASE_INSENSITIVE_ORDER);\n","    actual.put(\"one\", 1);\n","    expected.put(\"ONE\", 1);\n","    /*\n","     * Our contract doesn't guarantee that the following test will pass. It *currently* does,\n","     * though, and if we change that behavior, we want this test to let us know.\n","     */\n","    assertThat(actual).isEqualTo(expected);\n","  }\n","\n","  @Test\n","  public void isEqualToNotConsistentWithEquals_failure() {\n","    TreeMap<String, Integer> actual = new TreeMap<>(CASE_INSENSITIVE_ORDER);\n","    TreeMap<String, Integer> expected = new TreeMap<>(CASE_INSENSITIVE_ORDER);\n","    actual.put(\"one\", 1);\n","    expected.put(\"ONE\", 1);\n","    actual.put(\"two\", 2);\n","    expectFailureWhenTestingThat(actual).isEqualTo(expected);\n","    // The exact message generated is unspecified.\n","  }\n","\n","  @Test\n","  public void isEqualToActualNullOtherMap() {\n","    expectFailureWhenTestingThat(null).isEqualTo(ImmutableMap.of());\n","  }\n","\n","  @Test\n","  public void isEqualToActualMapOtherNull() {\n","    expectFailureWhenTestingThat(ImmutableMap.of()).isEqualTo(null);\n","  }\n","\n","  @Test\n","  public void isNotEqualTo() {\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of(\"jan\", 1, \"feb\", 2, \"march\", 3);\n","    ImmutableMap<String, Integer> unexpected = ImmutableMap.of(\"jan\", 1, \"feb\", 2, \"march\", 3);\n","\n","    expectFailureWhenTestingThat(actual).isNotEqualTo(unexpected);\n","  }\n","\n","  @Test\n","  public void isEmpty() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of();\n","    assertThat(actual).isEmpty();\n","  }\n","\n","  @Test\n","  public void isEmptyWithFailure() {\n","    ImmutableMap<Integer, Integer> actual = ImmutableMap.of(1, 5);\n","    expectFailureWhenTestingThat(actual).isEmpty();\n","    assertFailureKeys(\"expected to be empty\", \"but was\");\n","  }\n","\n","  @Test\n","  public void isNotEmpty() {\n","    ImmutableMap<Integer, Integer> actual = ImmutableMap.of(1, 5);\n","    assertThat(actual).isNotEmpty();\n","  }\n","\n","  @Test\n","  public void isNotEmptyWithFailure() {\n","    ImmutableMap<Integer, Integer> actual = ImmutableMap.of();\n","    expectFailureWhenTestingThat(actual).isNotEmpty();\n","    assertFailureKeys(\"expected not to be empty\");\n","  }\n","\n","  @Test\n","  public void hasSize() {\n","    assertThat(ImmutableMap.of(1, 2, 3, 4)).hasSize(2);\n","  }\n","\n","  @Test\n","  public void hasSizeZero() {\n","    assertThat(ImmutableMap.of()).hasSize(0);\n","  }\n","\n","  @Test\n","  public void hasSizeNegative() {\n","    try {\n","      assertThat(ImmutableMap.of(1, 2)).hasSize(-1);\n","      fail();\n","    } catch (IllegalArgumentException expected) {\n","    }\n","  }\n","\n","  @Test\n","  public void containsKey() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"kurt\", \"kluever\");\n","    assertThat(actual).containsKey(\"kurt\");\n","  }\n","\n","  @Test\n","  public void containsKeyFailure() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"kurt\", \"kluever\");\n","    expectFailureWhenTestingThat(actual).containsKey(\"greg\");\n","    assertFailureKeys(\"value of\", \"expected to contain\", \"but was\", \"map was\");\n","    assertFailureValue(\"value of\", \"map.keySet()\");\n","    assertFailureValue(\"expected to contain\", \"greg\");\n","    assertFailureValue(\"but was\", \"[kurt]\");\n","  }\n","\n","  @Test\n","  public void containsKeyNullFailure() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"kurt\", \"kluever\");\n","    expectFailureWhenTestingThat(actual).containsKey(null);\n","    assertFailureKeys(\"value of\", \"expected to contain\", \"but was\", \"map was\");\n","    assertFailureValue(\"value of\", \"map.keySet()\");\n","    assertFailureValue(\"expected to contain\", \"null\");\n","    assertFailureValue(\"but was\", \"[kurt]\");\n","  }\n","\n","  @Test\n","  public void containsKey_failsWithSameToString() {\n","    expectFailureWhenTestingThat(ImmutableMap.of(1L, \"value1\", 2L, \"value2\", \"1\", \"value3\"))\n","        .containsKey(1);\n","    assertFailureKeys(\n","        \"value of\",\n","        \"expected to contain\",\n","        \"an instance of\",\n","        \"but did not\",\n","        \"though it did contain\",\n","        \"full contents\",\n","        \"map was\");\n","    assertFailureValue(\"value of\", \"map.keySet()\");\n","    assertFailureValue(\"expected to contain\", \"1\");\n","  }\n","\n","  @Test\n","  public void containsKey_failsWithNullStringAndNull() {\n","    Map<String, String> actual = Maps.newHashMap();\n","    actual.put(\"null\", \"value1\");\n","\n","    expectFailureWhenTestingThat(actual).containsKey(null);\n","    assertFailureKeys(\n","        \"value of\",\n","        \"expected to contain\",\n","        \"an instance of\",\n","        \"but did not\",\n","        \"though it did contain\",\n","        \"full contents\",\n","        \"map was\");\n","    assertFailureValue(\"value of\", \"map.keySet()\");\n","    assertFailureValue(\"expected to contain\", \"null\");\n","  }\n","\n","  @Test\n","  public void containsNullKey() {\n","    Map<String, String> actual = Maps.newHashMap();\n","    actual.put(null, \"null\");\n","    assertThat(actual).containsKey(null);\n","  }\n","\n","  @Test\n","  public void doesNotContainKey() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"kurt\", \"kluever\");\n","    assertThat(actual).doesNotContainKey(\"greg\");\n","    assertThat(actual).doesNotContainKey(null);\n","  }\n","\n","  @Test\n","  public void doesNotContainKeyFailure() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"kurt\", \"kluever\");\n","    expectFailureWhenTestingThat(actual).doesNotContainKey(\"kurt\");\n","    assertFailureKeys(\"value of\", \"expected not to contain\", \"but was\", \"map was\");\n","    assertFailureValue(\"value of\", \"map.keySet()\");\n","    assertFailureValue(\"expected not to contain\", \"kurt\");\n","    assertFailureValue(\"but was\", \"[kurt]\");\n","  }\n","\n","  @Test\n","  public void doesNotContainNullKey() {\n","    Map<String, String> actual = Maps.newHashMap();\n","    actual.put(null, \"null\");\n","    expectFailureWhenTestingThat(actual).doesNotContainKey(null);\n","    assertFailureKeys(\"value of\", \"expected not to contain\", \"but was\", \"map was\");\n","    assertFailureValue(\"value of\", \"map.keySet()\");\n","    assertFailureValue(\"expected not to contain\", \"null\");\n","    assertFailureValue(\"but was\", \"[null]\");\n","  }\n","\n","  @Test\n","  public void containsEntry() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"kurt\", \"kluever\");\n","    assertThat(actual).containsEntry(\"kurt\", \"kluever\");\n","  }\n","\n","  @Test\n","  public void containsEntryFailure() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"kurt\", \"kluever\");\n","    expectFailureWhenTestingThat(actual).containsEntry(\"greg\", \"kick\");\n","    assertFailureKeys(\"expected to contain entry\", \"but was\");\n","    assertFailureValue(\"expected to contain entry\", \"greg=kick\");\n","    assertFailureValue(\"but was\", \"{kurt=kluever}\");\n","  }\n","\n","  @Test\n","  public void containsEntry_failsWithSameToStringOfKey() {\n","    expectFailureWhenTestingThat(ImmutableMap.of(1L, \"value1\", 2L, \"value2\"))\n","        .containsEntry(1, \"value1\");\n","    assertFailureKeys(\n","        \"expected to contain entry\",\n","        \"an instance of\",\n","        \"but did not\",\n","        \"though it did contain keys\",\n","        \"full contents\");\n","    assertFailureValue(\"an instance of\", \"Map.Entry<java.lang.Integer, java.lang.String>\");\n","    assertFailureValue(\"though it did contain keys\", \"[1] (java.lang.Long)\");\n","  }\n","\n","  @Test\n","  public void containsEntry_failsWithSameToStringOfValue() {\n","    // Does not contain the correct key, but does contain a value which matches by toString.\n","    expectFailureWhenTestingThat(ImmutableMap.of(1, \"null\")).containsEntry(2, null);\n","    assertFailureKeys(\n","        \"expected to contain entry\",\n","        \"an instance of\",\n","        \"but did not\",\n","        \"though it did contain values\",\n","        \"full contents\");\n","    assertFailureValue(\"an instance of\", \"Map.Entry<java.lang.Integer, null type>\");\n","    assertFailureValue(\"though it did contain values\", \"[null] (java.lang.String)\");\n","  }\n","\n","  @Test\n","  public void containsNullKeyAndValue() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"kurt\", \"kluever\");\n","    expectFailureWhenTestingThat(actual).containsEntry(null, null);\n","    assertFailureKeys(\"expected to contain entry\", \"but was\");\n","    assertFailureValue(\"expected to contain entry\", \"null=null\");\n","    assertFailureValue(\"but was\", \"{kurt=kluever}\");\n","  }\n","\n","  @Test\n","  public void containsNullEntry() {\n","    Map<String, String> actual = Maps.newHashMap();\n","    actual.put(null, null);\n","    assertThat(actual).containsEntry(null, null);\n","  }\n","\n","  @Test\n","  public void containsNullEntryValue() {\n","    Map<String, String> actual = Maps.newHashMap();\n","    actual.put(null, null);\n","    expectFailureWhenTestingThat(actual).containsEntry(\"kurt\", null);\n","    assertFailureKeys(\n","        \"expected to contain entry\",\n","        \"but did not\",\n","        \"though it did contain keys with that value\",\n","        \"full contents\");\n","    assertFailureValue(\"expected to contain entry\", \"kurt=null\");\n","    assertFailureValue(\"though it did contain keys with that value\", \"[null]\");\n","  }\n","\n","  private static final String KEY_IS_PRESENT_WITH_DIFFERENT_VALUE =\n","      \"key is present but with a different value\";\n","\n","  @Test\n","  public void containsNullEntryKey() {\n","    Map<String, String> actual = Maps.newHashMap();\n","    actual.put(null, null);\n","    expectFailureWhenTestingThat(actual).containsEntry(null, \"kluever\");\n","    assertFailureValue(\"value of\", \"map.get(null)\");\n","    assertFailureValue(\"expected\", \"kluever\");\n","    assertFailureValue(\"but was\", \"null\");\n","    assertFailureValue(\"map was\", \"{null=null}\");\n","    assertThat(expectFailure.getFailure())\n","        .hasMessageThat()\n","        .contains(KEY_IS_PRESENT_WITH_DIFFERENT_VALUE);\n","  }\n","\n","  @Test\n","  public void containsExactly_bothExactAndToStringKeyMatches_showsExactKeyMatch() {\n","    ImmutableMap<Number, String> actual = ImmutableMap.of(1, \"actual int\", 1L, \"actual long\");\n","    expectFailureWhenTestingThat(actual).containsEntry(1L, \"expected long\");\n","    // should show the exact key match, 1=\"actual int\", not the toString key match, 1L=\"actual long\"\n","    assertFailureKeys(\"value of\", \"expected\", \"but was\", \"map was\");\n","    assertFailureValue(\"value of\", \"map.get(1)\");\n","    assertFailureValue(\"expected\", \"expected long\");\n","    assertFailureValue(\"but was\", \"actual long\");\n","  }\n","\n","  @Test\n","  public void doesNotContainEntry() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"kurt\", \"kluever\");\n","    assertThat(actual).doesNotContainEntry(\"greg\", \"kick\");\n","    assertThat(actual).doesNotContainEntry(null, null);\n","    assertThat(actual).doesNotContainEntry(\"kurt\", null);\n","    assertThat(actual).doesNotContainEntry(null, \"kluever\");\n","  }\n","\n","  @Test\n","  public void doesNotContainEntryFailure() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"kurt\", \"kluever\");\n","    expectFailureWhenTestingThat(actual).doesNotContainEntry(\"kurt\", \"kluever\");\n","    assertFailureKeys(\"value of\", \"expected not to contain\", \"but was\");\n","    assertFailureValue(\"value of\", \"map.entrySet()\");\n","    assertFailureValue(\"expected not to contain\", \"kurt=kluever\");\n","    assertFailureValue(\"but was\", \"[kurt=kluever]\");\n","  }\n","\n","  @Test\n","  public void doesNotContainNullEntry() {\n","    Map<String, String> actual = Maps.newHashMap();\n","    actual.put(null, null);\n","    assertThat(actual).doesNotContainEntry(\"kurt\", null);\n","    assertThat(actual).doesNotContainEntry(null, \"kluever\");\n","  }\n","\n","  @Test\n","  public void doesNotContainNullEntryFailure() {\n","    Map<String, String> actual = Maps.newHashMap();\n","    actual.put(null, null);\n","    expectFailureWhenTestingThat(actual).doesNotContainEntry(null, null);\n","    assertFailureKeys(\"value of\", \"expected not to contain\", \"but was\");\n","    assertFailureValue(\"value of\", \"map.entrySet()\");\n","    assertFailureValue(\"expected not to contain\", \"null=null\");\n","    assertFailureValue(\"but was\", \"[null=null]\");\n","  }\n","\n","  @Test\n","  public void failMapContainsKey() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"a\", \"A\");\n","    expectFailureWhenTestingThat(actual).containsKey(\"b\");\n","    assertFailureKeys(\"value of\", \"expected to contain\", \"but was\", \"map was\");\n","    assertFailureValue(\"value of\", \"map.keySet()\");\n","    assertFailureValue(\"expected to contain\", \"b\");\n","    assertFailureValue(\"but was\", \"[a]\");\n","  }\n","\n","  @Test\n","  public void failMapContainsKeyWithNull() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"a\", \"A\");\n","    expectFailureWhenTestingThat(actual).containsKey(null);\n","    assertFailureKeys(\"value of\", \"expected to contain\", \"but was\", \"map was\");\n","    assertFailureValue(\"value of\", \"map.keySet()\");\n","    assertFailureValue(\"expected to contain\", \"null\");\n","    assertFailureValue(\"but was\", \"[a]\");\n","  }\n","\n","  @Test\n","  public void failMapLacksKey() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"a\", \"A\");\n","    expectFailureWhenTestingThat(actual).doesNotContainKey(\"a\");\n","    assertFailureKeys(\"value of\", \"expected not to contain\", \"but was\", \"map was\");\n","    assertFailureValue(\"value of\", \"map.keySet()\");\n","    assertFailureValue(\"expected not to contain\", \"a\");\n","    assertFailureValue(\"but was\", \"[a]\");\n","  }\n","\n","  @Test\n","  public void containsKeyWithValue() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"a\", \"A\");\n","    assertThat(actual).containsEntry(\"a\", \"A\");\n","  }\n","\n","  @Test\n","  public void containsKeyWithNullValueNullExpected() {\n","    Map<String, String> actual = Maps.newHashMap();\n","    actual.put(\"a\", null);\n","    assertThat(actual).containsEntry(\"a\", null);\n","  }\n","\n","  @Test\n","  public void failMapContainsKeyWithValue() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"a\", \"A\");\n","    expectFailureWhenTestingThat(actual).containsEntry(\"a\", \"a\");\n","    assertFailureValue(\"value of\", \"map.get(a)\");\n","    assertFailureValue(\"expected\", \"a\");\n","    assertFailureValue(\"but was\", \"A\");\n","    assertFailureValue(\"map was\", \"{a=A}\");\n","    assertThat(expectFailure.getFailure())\n","        .hasMessageThat()\n","        .doesNotContain(KEY_IS_PRESENT_WITH_DIFFERENT_VALUE);\n","  }\n","\n","  @Test\n","  public void failMapContainsKeyWithNullValuePresentExpected() {\n","    Map<String, String> actual = Maps.newHashMap();\n","    actual.put(\"a\", null);\n","    expectFailureWhenTestingThat(actual).containsEntry(\"a\", \"A\");\n","    assertFailureValue(\"value of\", \"map.get(a)\");\n","    assertFailureValue(\"expected\", \"A\");\n","    assertFailureValue(\"but was\", \"null\");\n","    assertFailureValue(\"map was\", \"{a=null}\");\n","    assertThat(expectFailure.getFailure())\n","        .hasMessageThat()\n","        .contains(KEY_IS_PRESENT_WITH_DIFFERENT_VALUE);\n","  }\n","\n","  @Test\n","  public void failMapContainsKeyWithPresentValueNullExpected() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"a\", \"A\");\n","    expectFailureWhenTestingThat(actual).containsEntry(\"a\", null);\n","    assertFailureValue(\"value of\", \"map.get(a)\");\n","    assertFailureValue(\"expected\", \"null\");\n","    assertFailureValue(\"but was\", \"A\");\n","    assertFailureValue(\"map was\", \"{a=A}\");\n","    assertThat(expectFailure.getFailure())\n","        .hasMessageThat()\n","        .contains(KEY_IS_PRESENT_WITH_DIFFERENT_VALUE);\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsEntry_success() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"abc\", \"123\", \"def\", \"456\");\n","    assertThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsEntry(\"def\", 456);\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsEntry_failsExpectedKeyHasWrongValue() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"abc\", \"+123\", \"def\", \"+456\");\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsEntry(\"def\", 123);\n","    assertFailureKeys(\"for key\", \"expected value\", \"testing whether\", \"but got value\", \"full map\");\n","    assertFailureValue(\"for key\", \"def\");\n","    assertFailureValue(\"expected value\", \"123\");\n","    assertFailureValue(\"testing whether\", \"actual value parses to expected value\");\n","    assertFailureValue(\"but got value\", \"+456\");\n","    assertFailureValue(\"full map\", \"{abc=+123, def=+456}\");\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsEntry_failsWrongKeyHasExpectedValue() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"abc\", \"+123\", \"def\", \"+456\");\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsEntry(\"xyz\", 456);\n","    assertFailureKeys(\n","        \"for key\",\n","        \"expected value\",\n","        \"testing whether\",\n","        \"but was missing\",\n","        \"other keys with matching values\",\n","        \"full map\");\n","    assertFailureValue(\"other keys with matching values\", \"[def]\");\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsEntry_failsMissingExpectedKeyAndValue() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"abc\", \"+123\", \"def\", \"+456\");\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsEntry(\"xyz\", 321);\n","    assertFailureKeys(\n","        \"for key\", \"expected value\", \"testing whether\", \"but was missing\", \"full map\");\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsEntry_diffExpectedKeyHasWrongValue() {\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of(\"abc\", 35, \"def\", 71);\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(WITHIN_10_OF)\n","        .containsEntry(\"def\", 60);\n","    assertFailureKeys(\n","        \"for key\", \"expected value\", \"testing whether\", \"but got value\", \"diff\", \"full map\");\n","    assertFailureValue(\"for key\", \"def\");\n","    assertFailureValue(\"expected value\", \"60\");\n","    assertFailureValue(\"but got value\", \"71\");\n","    assertFailureValue(\"diff\", \"11\");\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsEntry_handlesFormatDiffExceptions() {\n","    Map<String, Integer> actual = new LinkedHashMap<>();\n","    actual.put(\"abc\", 35);\n","    actual.put(\"def\", null);\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(WITHIN_10_OF)\n","        .containsEntry(\"def\", 60);\n","    assertFailureKeys(\n","        \"for key\",\n","        \"expected value\",\n","        \"testing whether\",\n","        \"but got value\",\n","        \"full map\",\n","        \"additionally, one or more exceptions were thrown while comparing values\",\n","        \"first exception\",\n","        \"additionally, one or more exceptions were thrown while formatting diffs\",\n","        \"first exception\");\n","    assertThatFailure()\n","        .factValue(\"first exception\", 0)\n","        .startsWith(\n","            \"compare(null, 60) threw\"\n","                + \" com.google.common.truth.TestCorrespondences$NullPointerExceptionFromWithin10Of\");\n","    assertThatFailure()\n","        .factValue(\"first exception\", 1)\n","        .startsWith(\"formatDiff(null, 60) threw java.lang.NullPointerException\");\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsEntry_handlesExceptions_expectedKeyHasWrongValue() {\n","    Map<Integer, String> actual = new LinkedHashMap<>();\n","    actual.put(1, \"one\");\n","    actual.put(2, null);\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(CASE_INSENSITIVE_EQUALITY)\n","        .containsEntry(2, \"TWO\");\n","    // The test fails because the expected key has a null value which causes compare() to throw.\n","    // We should report that the key has the wrong value, and also that we saw an exception.\n","    assertFailureKeys(\n","        \"for key\",\n","        \"expected value\",\n","        \"testing whether\",\n","        \"but got value\",\n","        \"full map\",\n","        \"additionally, one or more exceptions were thrown while comparing values\",\n","        \"first exception\");\n","    assertThatFailure()\n","        .factValue(\"first exception\")\n","        .startsWith(\"compare(null, TWO) threw java.lang.NullPointerException\");\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsEntry_handlesExceptions_wrongKeyHasExpectedValue() {\n","    Map<Integer, String> actual = new LinkedHashMap<>();\n","    actual.put(1, null);\n","    actual.put(2, \"three\");\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(CASE_INSENSITIVE_EQUALITY)\n","        .containsEntry(3, \"THREE\");\n","    // The test fails and does not contain the expected key, but does contain the expected value for\n","    // a different key. No reasonable implementation would find this value in the second entry\n","    // without hitting the exception from trying the first entry (which has a null value), so we\n","    // should report the exception as well.\n","    assertFailureKeys(\n","        \"for key\",\n","        \"expected value\",\n","        \"testing whether\",\n","        \"but was missing\",\n","        \"other keys with matching values\",\n","        \"full map\",\n","        \"additionally, one or more exceptions were thrown while comparing values\",\n","        \"first exception\");\n","    assertThatFailure()\n","        .factValue(\"first exception\")\n","        .startsWith(\"compare(null, THREE) threw java.lang.NullPointerException\");\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_doesNotContainEntry_successExcludedKeyHasWrongValues() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"abc\", \"+123\", \"def\", \"+456\");\n","    assertThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .doesNotContainEntry(\"def\", 123);\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_doesNotContainEntry_successWrongKeyHasExcludedValue() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"abc\", \"+123\", \"def\", \"+456\");\n","    assertThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .doesNotContainEntry(\"xyz\", 456);\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_doesNotContainEntry_successMissingExcludedKeyAndValue() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"abc\", \"123\", \"def\", \"456\");\n","    assertThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .doesNotContainEntry(\"xyz\", 321);\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_doesNotContainEntry_failure() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"abc\", \"+123\", \"def\", \"+456\");\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .doesNotContainEntry(\"def\", 456);\n","    assertFailureKeys(\"expected not to contain\", \"testing whether\", \"but contained\", \"full map\");\n","    assertFailureValue(\"expected not to contain\", \"def=456\");\n","    assertFailureValue(\"but contained\", \"def=+456\");\n","    assertFailureValue(\"full map\", \"{abc=+123, def=+456}\");\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_doesNotContainEntry_handlesException() {\n","    Map<Integer, String> actual = new LinkedHashMap<>();\n","    actual.put(1, \"one\");\n","    actual.put(2, null);\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(CASE_INSENSITIVE_EQUALITY)\n","        .doesNotContainEntry(2, \"TWO\");\n","    // This test would pass if compare(null, \"TWO\") returned false. But it actually throws, so the\n","    // test must fail.\n","    assertFailureKeys(\n","        \"one or more exceptions were thrown while comparing values\",\n","        \"first exception\",\n","        \"expected not to contain\",\n","        \"testing whether\",\n","        \"found no match (but failing because of exception)\",\n","        \"full map\");\n","    assertThatFailure()\n","        .factValue(\"first exception\")\n","        .startsWith(\"compare(null, TWO) threw java.lang.NullPointerException\");\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsExactly_success() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"abc\", \"123\", \"def\", \"456\");\n","    assertThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsExactly(\"def\", 456, \"abc\", 123);\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsExactly_inOrder_success() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"abc\", \"123\", \"def\", \"456\");\n","    assertThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsExactly(\"abc\", 123, \"def\", 456)\n","        .inOrder();\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsExactly_failsExtraEntry() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"abc\", \"123\", \"def\", \"456\");\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsExactly(\"def\", 456);\n","    assertFailureKeys(\n","        \"unexpected keys\",\n","        \"for key\",\n","        \"unexpected value\",\n","        \"---\",\n","        \"expected\",\n","        \"testing whether\",\n","        \"but was\");\n","    assertFailureValue(\"for key\", \"abc\");\n","    assertFailureValue(\"unexpected value\", \"123\");\n","    assertFailureValue(\"expected\", \"{def=456}\");\n","    assertFailureValue(\"testing whether\", \"actual value parses to expected value\");\n","    assertFailureValue(\"but was\", \"{abc=123, def=456}\");\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsExactly_failsMissingEntry() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"abc\", \"123\", \"def\", \"456\");\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsExactly(\"def\", 456, \"xyz\", 999, \"abc\", 123);\n","    assertFailureKeys(\n","        \"missing keys\",\n","        \"for key\",\n","        \"expected value\",\n","        \"---\",\n","        \"expected\",\n","        \"testing whether\",\n","        \"but was\");\n","    assertFailureValue(\"for key\", \"xyz\");\n","    assertFailureValue(\"expected value\", \"999\");\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsExactly_failsWrongKey() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"abc\", \"123\", \"def\", \"456\");\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsExactly(\"def\", 456, \"cab\", 123);\n","    assertFailureKeys(\n","        \"missing keys\",\n","        \"for key\",\n","        \"expected value\",\n","        \"unexpected keys\",\n","        \"for key\",\n","        \"unexpected value\",\n","        \"---\",\n","        \"expected\",\n","        \"testing whether\",\n","        \"but was\");\n","    assertFailureValueIndexed(\"for key\", 0, \"cab\");\n","    assertFailureValue(\"expected value\", \"123\");\n","    assertFailureValueIndexed(\"for key\", 1, \"abc\");\n","    assertFailureValue(\"unexpected value\", \"123\");\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsExactly_failsWrongValue() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"abc\", \"123\", \"def\", \"456\");\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsExactly(\"def\", 456, \"abc\", 321);\n","    assertFailureKeys(\n","        \"keys with wrong values\",\n","        \"for key\",\n","        \"expected value\",\n","        \"but got value\",\n","        \"---\",\n","        \"expected\",\n","        \"testing whether\",\n","        \"but was\");\n","    assertFailureValue(\"for key\", \"abc\");\n","    assertFailureValue(\"expected value\", \"321\");\n","    assertFailureValue(\"but got value\", \"123\");\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsExactly_handlesExceptions() {\n","    Map<Integer, String> actual = new LinkedHashMap<>();\n","    actual.put(1, \"one\");\n","    actual.put(2, null);\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(CASE_INSENSITIVE_EQUALITY)\n","        .containsExactly(1, \"ONE\", 2, \"TWO\");\n","    assertFailureKeys(\n","        \"keys with wrong values\",\n","        \"for key\",\n","        \"expected value\",\n","        \"but got value\",\n","        \"---\",\n","        \"expected\",\n","        \"testing whether\",\n","        \"but was\",\n","        \"additionally, one or more exceptions were thrown while comparing values\",\n","        \"first exception\");\n","    assertThatFailure()\n","        .factValue(\"first exception\")\n","        .startsWith(\"compare(null, TWO) threw java.lang.NullPointerException\");\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsExactly_inOrder_failsOutOfOrder() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"abc\", \"123\", \"def\", \"456\");\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsExactly(\"def\", 456, \"abc\", 123)\n","        .inOrder();\n","    assertFailureKeys(\n","        \"entries match, but order was wrong\", \"expected\", \"testing whether\", \"but was\");\n","    assertFailureValue(\"expected\", \"{def=456, abc=123}\");\n","    assertFailureValue(\"but was\", \"{abc=123, def=456}\");\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsExactly_wrongValueTypeInActual() {\n","    ImmutableMap<String, Object> actual = ImmutableMap.<String, Object>of(\"abc\", \"123\", \"def\", 456);\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsExactly(\"def\", 456, \"abc\", 123);\n","    assertFailureKeys(\n","        \"keys with wrong values\",\n","        \"for key\",\n","        \"expected value\",\n","        \"but got value\",\n","        \"---\",\n","        \"expected\",\n","        \"testing whether\",\n","        \"but was\",\n","        \"additionally, one or more exceptions were thrown while comparing values\",\n","        \"first exception\");\n","    assertThatFailure()\n","        .factValue(\"first exception\")\n","        .startsWith(\"compare(456, 456) threw java.lang.ClassCastException\");\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsExactly_wrongValueTypeInExpected() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"abc\", \"123\", \"def\", \"456\");\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsExactly(\"def\", 456, \"abc\", 123L);\n","    assertFailureKeys(\n","        \"keys with wrong values\",\n","        \"for key\",\n","        \"expected value\",\n","        \"but got value\",\n","        \"---\",\n","        \"expected\",\n","        \"testing whether\",\n","        \"but was\",\n","        \"additionally, one or more exceptions were thrown while comparing values\",\n","        \"first exception\");\n","    assertThatFailure()\n","        .factValue(\"first exception\")\n","        .startsWith(\"compare(123, 123) threw java.lang.ClassCastException\");\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsExactlyEntriesIn_success() {\n","    ImmutableMap<String, Integer> expected = ImmutableMap.of(\"def\", 456, \"abc\", 123);\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"abc\", \"123\", \"def\", \"456\");\n","    assertThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsExactlyEntriesIn(expected);\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsExactlyEntriesIn_inOrder_success() {\n","    ImmutableMap<String, Integer> expected = ImmutableMap.of(\"abc\", 123, \"def\", 456);\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"abc\", \"123\", \"def\", \"456\");\n","    assertThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsExactlyEntriesIn(expected)\n","        .inOrder();\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsExactlyEntriesIn_failsExtraEntry() {\n","    ImmutableMap<String, Integer> expected = ImmutableMap.of(\"def\", 456);\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"abc\", \"123\", \"def\", \"456\");\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsExactlyEntriesIn(expected);\n","    assertFailureKeys(\n","        \"unexpected keys\",\n","        \"for key\",\n","        \"unexpected value\",\n","        \"---\",\n","        \"expected\",\n","        \"testing whether\",\n","        \"but was\");\n","    assertFailureValue(\"for key\", \"abc\");\n","    assertFailureValue(\"unexpected value\", \"123\");\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsExactlyEntriesIn_failsMissingEntry() {\n","    ImmutableMap<String, Integer> expected = ImmutableMap.of(\"def\", 456, \"xyz\", 999, \"abc\", 123);\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"abc\", \"123\", \"def\", \"456\");\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsExactlyEntriesIn(expected);\n","    assertFailureKeys(\n","        \"missing keys\",\n","        \"for key\",\n","        \"expected value\",\n","        \"---\",\n","        \"expected\",\n","        \"testing whether\",\n","        \"but was\");\n","    assertFailureValue(\"for key\", \"xyz\");\n","    assertFailureValue(\"expected value\", \"999\");\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsExactlyEntriesIn_failsWrongKey() {\n","    ImmutableMap<String, Integer> expected = ImmutableMap.of(\"def\", 456, \"cab\", 123);\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"abc\", \"123\", \"def\", \"456\");\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsExactlyEntriesIn(expected);\n","    assertFailureKeys(\n","        \"missing keys\",\n","        \"for key\",\n","        \"expected value\",\n","        \"unexpected keys\",\n","        \"for key\",\n","        \"unexpected value\",\n","        \"---\",\n","        \"expected\",\n","        \"testing whether\",\n","        \"but was\");\n","    assertFailureValueIndexed(\"for key\", 0, \"cab\");\n","    assertFailureValue(\"expected value\", \"123\");\n","    assertFailureValueIndexed(\"for key\", 1, \"abc\");\n","    assertFailureValue(\"unexpected value\", \"123\");\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsExactlyEntriesIn_failsWrongValue() {\n","    ImmutableMap<String, Integer> expected = ImmutableMap.of(\"def\", 456, \"abc\", 321);\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"abc\", \"123\", \"def\", \"456\");\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsExactlyEntriesIn(expected);\n","    assertFailureKeys(\n","        \"keys with wrong values\",\n","        \"for key\",\n","        \"expected value\",\n","        \"but got value\",\n","        \"---\",\n","        \"expected\",\n","        \"testing whether\",\n","        \"but was\");\n","    assertFailureValue(\"for key\", \"abc\");\n","    assertFailureValue(\"expected value\", \"321\");\n","    assertFailureValue(\"but got value\", \"123\");\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsExactlyEntriesIn_diffMissingAndExtraAndWrongValue() {\n","    ImmutableMap<String, Integer> expected = ImmutableMap.of(\"abc\", 30, \"def\", 60, \"ghi\", 90);\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of(\"abc\", 35, \"fed\", 60, \"ghi\", 101);\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(WITHIN_10_OF)\n","        .containsExactlyEntriesIn(expected);\n","    assertFailureKeys(\n","        \"keys with wrong values\",\n","        \"for key\",\n","        \"expected value\",\n","        \"but got value\",\n","        \"diff\",\n","        \"missing keys\",\n","        \"for key\",\n","        \"expected value\",\n","        \"unexpected keys\",\n","        \"for key\",\n","        \"unexpected value\",\n","        \"---\",\n","        \"expected\",\n","        \"testing whether\",\n","        \"but was\");\n","    assertFailureValueIndexed(\"for key\", 0, \"ghi\");\n","    assertFailureValueIndexed(\"expected value\", 0, \"90\");\n","    assertFailureValue(\"but got value\", \"101\");\n","    assertFailureValue(\"diff\", \"11\");\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsExactlyEntriesIn_handlesFormatDiffExceptions() {\n","    ImmutableMap<String, Integer> expected = ImmutableMap.of(\"abc\", 30, \"def\", 60, \"ghi\", 90);\n","    Map<String, Integer> actual = new LinkedHashMap<>();\n","    actual.put(\"abc\", 35);\n","    actual.put(\"def\", null);\n","    actual.put(\"ghi\", 95);\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(WITHIN_10_OF)\n","        .containsExactlyEntriesIn(expected);\n","    assertFailureKeys(\n","        \"keys with wrong values\",\n","        \"for key\",\n","        \"expected value\",\n","        \"but got value\",\n","        \"---\",\n","        \"expected\",\n","        \"testing whether\",\n","        \"but was\",\n","        \"additionally, one or more exceptions were thrown while comparing values\",\n","        \"first exception\",\n","        \"additionally, one or more exceptions were thrown while formatting diffs\",\n","        \"first exception\");\n","    assertThatFailure()\n","        .factValue(\"first exception\", 0)\n","        .startsWith(\n","            \"compare(null, 60) threw\"\n","                + \" com.google.common.truth.TestCorrespondences$NullPointerExceptionFromWithin10Of\");\n","    assertThatFailure()\n","        .factValue(\"first exception\", 1)\n","        .startsWith(\"formatDiff(null, 60) threw java.lang.NullPointerException\");\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsExactlyEntriesIn_inOrder_failsOutOfOrder() {\n","    ImmutableMap<String, Integer> expected = ImmutableMap.of(\"def\", 456, \"abc\", 123);\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"abc\", \"123\", \"def\", \"456\");\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsExactlyEntriesIn(expected)\n","        .inOrder();\n","    assertFailureKeys(\n","        \"entries match, but order was wrong\", \"expected\", \"testing whether\", \"but was\");\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsExactlyEntriesIn_empty() {\n","    ImmutableMap<String, Integer> expected = ImmutableMap.of();\n","    ImmutableMap<String, String> actual = ImmutableMap.of();\n","    assertThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsExactlyEntriesIn(expected);\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsExactlyEntriesIn_failsEmpty() {\n","    ImmutableMap<String, Integer> expected = ImmutableMap.of();\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"abc\", \"123\");\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsExactlyEntriesIn(expected);\n","    assertFailureKeys(\"expected to be empty\", \"but was\");\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsExactlyEntriesIn_wrongValueTypeInActual() {\n","    ImmutableMap<String, Integer> expected = ImmutableMap.of(\"def\", 456, \"abc\", 123);\n","    ImmutableMap<String, Object> actual = ImmutableMap.<String, Object>of(\"abc\", \"123\", \"def\", 456);\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsExactlyEntriesIn(expected);\n","    assertFailureKeys(\n","        \"keys with wrong values\",\n","        \"for key\",\n","        \"expected value\",\n","        \"but got value\",\n","        \"---\",\n","        \"expected\",\n","        \"testing whether\",\n","        \"but was\",\n","        \"additionally, one or more exceptions were thrown while comparing values\",\n","        \"first exception\");\n","    assertThatFailure()\n","        .factValue(\"first exception\")\n","        .startsWith(\"compare(456, 456) threw java.lang.ClassCastException\");\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsAtLeast_success() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"abc\", \"123\", \"def\", \"456\", \"ghi\", \"789\");\n","    assertThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsAtLeast(\"def\", 456, \"abc\", 123);\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsAtLeast_inOrder_success() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"abc\", \"123\", \"ghi\", \"789\", \"def\", \"456\");\n","    assertThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsAtLeast(\"abc\", 123, \"def\", 456)\n","        .inOrder();\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsAtLeast_failsMissingEntry() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"abc\", \"123\", \"def\", \"456\", \"ghi\", \"789\");\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsAtLeast(\"def\", 456, \"xyz\", 999, \"abc\", 123);\n","    assertFailureKeys(\n","        \"missing keys\",\n","        \"for key\",\n","        \"expected value\",\n","        \"---\",\n","        \"expected to contain at least\",\n","        \"testing whether\",\n","        \"but was\");\n","    assertFailureValue(\"for key\", \"xyz\");\n","    assertFailureValue(\"expected value\", \"999\");\n","    assertFailureValue(\"expected to contain at least\", \"{def=456, xyz=999, abc=123}\");\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsAtLeast_failsWrongKey() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"abc\", \"123\", \"def\", \"456\");\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsAtLeast(\"def\", 456, \"cab\", 123);\n","    assertFailureKeys(\n","        \"missing keys\",\n","        \"for key\",\n","        \"expected value\",\n","        \"---\",\n","        \"expected to contain at least\",\n","        \"testing whether\",\n","        \"but was\");\n","    assertFailureValue(\"for key\", \"cab\");\n","    assertFailureValue(\"expected value\", \"123\");\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsAtLeast_failsWrongValue() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"abc\", \"123\", \"def\", \"456\");\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsAtLeast(\"abc\", 321);\n","    assertFailureKeys(\n","        \"keys with wrong values\",\n","        \"for key\",\n","        \"expected value\",\n","        \"but got value\",\n","        \"---\",\n","        \"expected to contain at least\",\n","        \"testing whether\",\n","        \"but was\");\n","    assertFailureValue(\"for key\", \"abc\");\n","    assertFailureValue(\"expected value\", \"321\");\n","    assertFailureValue(\"but got value\", \"123\");\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsAtLeast_handlesExceptions() {\n","    Map<Integer, String> actual = new LinkedHashMap<>();\n","    actual.put(1, \"one\");\n","    actual.put(2, null);\n","    actual.put(3, \"three\");\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(CASE_INSENSITIVE_EQUALITY)\n","        .containsAtLeast(1, \"ONE\", 2, \"TWO\");\n","    assertFailureKeys(\n","        \"keys with wrong values\",\n","        \"for key\",\n","        \"expected value\",\n","        \"but got value\",\n","        \"---\",\n","        \"expected to contain at least\",\n","        \"testing whether\",\n","        \"but was\",\n","        \"additionally, one or more exceptions were thrown while comparing values\",\n","        \"first exception\");\n","    assertThatFailure()\n","        .factValue(\"first exception\")\n","        .startsWith(\"compare(null, TWO) threw java.lang.NullPointerException\");\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsAtLeast_inOrder_failsOutOfOrder() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"abc\", \"123\", \"def\", \"456\", \"ghi\", \"789\");\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsAtLeast(\"def\", 456, \"abc\", 123)\n","        .inOrder();\n","    assertFailureKeys(\n","        \"required entries were all found, but order was wrong\",\n","        \"expected to contain at least\",\n","        \"testing whether\",\n","        \"but was\");\n","    assertFailureValue(\"expected to contain at least\", \"{def=456, abc=123}\");\n","    assertFailureValue(\"but was\", \"{abc=123, def=456, ghi=789}\");\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsAtLeast_wrongValueTypeInExpectedActual() {\n","    ImmutableMap<String, Object> actual = ImmutableMap.<String, Object>of(\"abc\", \"123\", \"def\", 456);\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsAtLeast(\"def\", 456);\n","    assertFailureKeys(\n","        \"keys with wrong values\",\n","        \"for key\",\n","        \"expected value\",\n","        \"but got value\",\n","        \"---\",\n","        \"expected to contain at least\",\n","        \"testing whether\",\n","        \"but was\",\n","        \"additionally, one or more exceptions were thrown while comparing values\",\n","        \"first exception\");\n","    assertThatFailure()\n","        .factValue(\"first exception\")\n","        .startsWith(\"compare(456, 456) threw java.lang.ClassCastException\");\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsAtLeast_wrongValueTypeInUnexpectedActual_success() {\n","    ImmutableMap<String, Object> actual = ImmutableMap.<String, Object>of(\"abc\", \"123\", \"def\", 456);\n","    assertThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsAtLeast(\"abc\", 123);\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsAtLeast_wrongValueTypeInExpected() {\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"abc\", \"123\", \"def\", \"456\", \"ghi\", \"789\");\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsAtLeast(\"def\", 456, \"abc\", 123L);\n","    assertFailureKeys(\n","        \"keys with wrong values\",\n","        \"for key\",\n","        \"expected value\",\n","        \"but got value\",\n","        \"---\",\n","        \"expected to contain at least\",\n","        \"testing whether\",\n","        \"but was\",\n","        \"additionally, one or more exceptions were thrown while comparing values\",\n","        \"first exception\");\n","    assertThatFailure()\n","        .factValue(\"first exception\")\n","        .startsWith(\"compare(123, 123) threw java.lang.ClassCastException\");\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsAtLeastEntriesIn_success() {\n","    ImmutableMap<String, Integer> expected = ImmutableMap.of(\"def\", 456, \"abc\", 123);\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"abc\", \"123\", \"def\", \"456\", \"ghi\", \"789\");\n","    assertThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsAtLeastEntriesIn(expected);\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsAtLeastEntriesIn_inOrder_success() {\n","    ImmutableMap<String, Integer> expected = ImmutableMap.of(\"abc\", 123, \"ghi\", 789);\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"abc\", \"123\", \"def\", \"456\", \"ghi\", \"789\");\n","    assertThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsAtLeastEntriesIn(expected)\n","        .inOrder();\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsAtLeastEntriesIn_failsMissingEntry() {\n","    ImmutableMap<String, Integer> expected = ImmutableMap.of(\"def\", 456, \"xyz\", 999, \"abc\", 123);\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"abc\", \"123\", \"def\", \"456\", \"ghi\", \"789\");\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsAtLeastEntriesIn(expected);\n","    assertFailureKeys(\n","        \"missing keys\",\n","        \"for key\",\n","        \"expected value\",\n","        \"---\",\n","        \"expected to contain at least\",\n","        \"testing whether\",\n","        \"but was\");\n","    assertFailureValue(\"for key\", \"xyz\");\n","    assertFailureValue(\"expected value\", \"999\");\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsAtLeastEntriesIn_failsWrongKey() {\n","    ImmutableMap<String, Integer> expected = ImmutableMap.of(\"def\", 456, \"cab\", 123);\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"abc\", \"123\", \"def\", \"456\");\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsAtLeastEntriesIn(expected);\n","    assertFailureKeys(\n","        \"missing keys\",\n","        \"for key\",\n","        \"expected value\",\n","        \"---\",\n","        \"expected to contain at least\",\n","        \"testing whether\",\n","        \"but was\");\n","    assertFailureValue(\"for key\", \"cab\");\n","    assertFailureValue(\"expected value\", \"123\");\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsAtLeastEntriesIn_failsWrongValue() {\n","    ImmutableMap<String, Integer> expected = ImmutableMap.of(\"def\", 456, \"abc\", 321);\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"abc\", \"123\", \"def\", \"456\", \"ghi\", \"789\");\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsAtLeastEntriesIn(expected);\n","    assertFailureKeys(\n","        \"keys with wrong values\",\n","        \"for key\",\n","        \"expected value\",\n","        \"but got value\",\n","        \"---\",\n","        \"expected to contain at least\",\n","        \"testing whether\",\n","        \"but was\");\n","    assertFailureValue(\"for key\", \"abc\");\n","    assertFailureValue(\"expected value\", \"321\");\n","    assertFailureValue(\"but got value\", \"123\");\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsAtLeastEntriesIn_diffMissingAndWrongValue() {\n","    ImmutableMap<String, Integer> expected = ImmutableMap.of(\"abc\", 30, \"def\", 60, \"ghi\", 90);\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of(\"abc\", 35, \"fed\", 60, \"ghi\", 101);\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(WITHIN_10_OF)\n","        .containsAtLeastEntriesIn(expected);\n","    assertFailureKeys(\n","        \"keys with wrong values\",\n","        \"for key\",\n","        \"expected value\",\n","        \"but got value\",\n","        \"diff\",\n","        \"missing keys\",\n","        \"for key\",\n","        \"expected value\",\n","        \"---\",\n","        \"expected to contain at least\",\n","        \"testing whether\",\n","        \"but was\");\n","    assertFailureValueIndexed(\"for key\", 0, \"ghi\");\n","    assertFailureValueIndexed(\"expected value\", 0, \"90\");\n","    assertFailureValue(\"but got value\", \"101\");\n","    assertFailureValue(\"diff\", \"11\");\n","    assertFailureValueIndexed(\"for key\", 1, \"def\");\n","    assertFailureValueIndexed(\"expected value\", 1, \"60\");\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsAtLeastEntriesIn_handlesFormatDiffExceptions() {\n","    ImmutableMap<String, Integer> expected = ImmutableMap.of(\"abc\", 30, \"def\", 60, \"ghi\", 90);\n","    Map<String, Integer> actual = new LinkedHashMap<>();\n","    actual.put(\"abc\", 35);\n","    actual.put(\"def\", null);\n","    actual.put(\"ghi\", 95);\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(WITHIN_10_OF)\n","        .containsAtLeastEntriesIn(expected);\n","    assertFailureKeys(\n","        \"keys with wrong values\",\n","        \"for key\",\n","        \"expected value\",\n","        \"but got value\",\n","        \"---\",\n","        \"expected to contain at least\",\n","        \"testing whether\",\n","        \"but was\",\n","        \"additionally, one or more exceptions were thrown while comparing values\",\n","        \"first exception\",\n","        \"additionally, one or more exceptions were thrown while formatting diffs\",\n","        \"first exception\");\n","    assertThatFailure()\n","        .factValue(\"first exception\", 0)\n","        .startsWith(\n","            \"compare(null, 60) threw\"\n","                + \" com.google.common.truth.TestCorrespondences$NullPointerExceptionFromWithin10Of\");\n","    assertThatFailure()\n","        .factValue(\"first exception\", 1)\n","        .startsWith(\"formatDiff(null, 60) threw java.lang.NullPointerException\");\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsAtLeastEntriesIn_inOrder_failsOutOfOrder() {\n","    ImmutableMap<String, Integer> expected = ImmutableMap.of(\"ghi\", 789, \"abc\", 123);\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"abc\", \"123\", \"def\", \"456\", \"ghi\", \"789\");\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsAtLeastEntriesIn(expected)\n","        .inOrder();\n","    assertFailureKeys(\n","        \"required entries were all found, but order was wrong\",\n","        \"expected to contain at least\",\n","        \"testing whether\",\n","        \"but was\");\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsAtLeastEntriesIn_empty() {\n","    ImmutableMap<String, Integer> expected = ImmutableMap.of();\n","    ImmutableMap<String, String> actual = ImmutableMap.of(\"abc\", \"123\", \"def\", \"456\");\n","    assertThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsAtLeastEntriesIn(expected);\n","  }\n","\n","  @Test\n","  public void comparingValuesUsing_containsAtLeastEntriesIn_wrongValueTypeInExpectedActual() {\n","    ImmutableMap<String, Integer> expected = ImmutableMap.of(\"def\", 456);\n","    ImmutableMap<String, Object> actual = ImmutableMap.<String, Object>of(\"abc\", \"123\", \"def\", 456);\n","    expectFailureWhenTestingThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsAtLeastEntriesIn(expected);\n","    assertFailureKeys(\n","        \"keys with wrong values\",\n","        \"for key\",\n","        \"expected value\",\n","        \"but got value\",\n","        \"---\",\n","        \"expected to contain at least\",\n","        \"testing whether\",\n","        \"but was\",\n","        \"additionally, one or more exceptions were thrown while comparing values\",\n","        \"first exception\");\n","    assertThatFailure()\n","        .factValue(\"first exception\")\n","        .startsWith(\"compare(456, 456) threw java.lang.ClassCastException\");\n","  }\n","\n","  @Test\n","  public void\n","      comparingValuesUsing_containsAtLeastEntriesIn_wrongValueTypeInUnexpectedActual_success() {\n","    ImmutableMap<String, Integer> expected = ImmutableMap.of(\"abc\", 123);\n","    ImmutableMap<String, Object> actual = ImmutableMap.<String, Object>of(\"abc\", \"123\", \"def\", 456);\n","    assertThat(actual)\n","        .comparingValuesUsing(STRING_PARSES_TO_INTEGER_CORRESPONDENCE)\n","        .containsAtLeastEntriesIn(expected);\n","  }\n","\n","  @Test\n","  public void formattingDiffsUsing_success() {\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of(\"ghi\", 300, \"def\", 200, \"abc\", 100);\n","    assertThat(actual)\n","        .formattingDiffsUsing(INT_DIFF_FORMATTER)\n","        .containsExactly(\"abc\", 100, \"def\", 200, \"ghi\", 300);\n","  }\n","\n","  @Test\n","  public void formattingDiffsUsing_failure() {\n","    ImmutableMap<String, Integer> actual = ImmutableMap.of(\"ghi\", 300, \"def\", 201, \"abc\", 100);\n","    expectFailure\n","        .whenTesting()\n","        .that(actual)\n","        .formattingDiffsUsing(INT_DIFF_FORMATTER)\n","        .containsExactly(\"abc\", 100, \"def\", 200, \"ghi\", 300);\n","    assertFailureKeys(\n","        \"keys with wrong values\",\n","        \"for key\",\n","        \"expected value\",\n","        \"but got value\",\n","        \"diff\",\n","        \"---\",\n","        \"expected\",\n","        \"but was\");\n","    assertFailureValue(\"expected value\", \"200\");\n","    assertFailureValue(\"but got value\", \"201\");\n","    assertFailureValue(\"diff\", \"1\");\n","  }\n","\n","  private MapSubject expectFailureWhenTestingThat(Map<?, ?> actual) {\n","    return expectFailure.whenTesting().that(actual);\n","  }\n","}\n"],"method_lines_dic":{"MapSubject::::isEqualTo(java.lang.Object)":[65,79],"MapSubject::::isEmpty()":[82,86],"MapSubject::::isNotEmpty()":[89,93],"MapSubject::::hasSize(int)":[96,99],"MapSubject::::containsKey(java.lang.Object)":[102,104],"MapSubject::::doesNotContainKey(java.lang.Object)":[107,109],"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)":[112,167],"MapSubject::::doesNotContainEntry(java.lang.Object,java.lang.Object)":[170,174],"MapSubject::::containsExactly()":[177,180],"MapSubject::::containsExactly(java.lang.Object,java.lang.Object,java.lang.Object[])":[190,194],"MapSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])":[196,200],"MapSubject::::accumulateMap(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object[])":[202,225],"MapSubject::::containsExactlyEntriesIn(java.util.Map<?, ?>)":[228,244],"MapSubject::::containsAtLeastEntriesIn(java.util.Map<?, ?>)":[247,258],"MapSubject::::containsEntriesInAnyOrder(java.util.Map<?, ?>,boolean)":[260,285],"MapSubject.ValueTester::::test(A,E)":[288,288],"MapSubject.Differ::::diff(A,E)":[292,292],"MapSubject.MapDifference::::create(java.util.Map<? extends K, ? extends A>,java.util.Map<? extends K, ? extends E>,boolean,com.google.common.truth.MapSubject.ValueTester<? super A, ? super E>)":[305,332],"MapSubject.MapDifference::::isEmpty()":[345,347],"MapSubject.MapDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)":[349,374],"MapSubject.MapDifference::::includeKeyTypes()":[376,384],"MapSubject.ValueDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)":[396,411],"MapSubject::::maybeAddType(java.lang.Object,boolean)":[414,418],"MapSubject.MapInOrder::::inOrder()":[441,466],"MapSubject::::comparingValuesUsing(com.google.common.truth.Correspondence<? super A, ? super E>)":[497,501],"MapSubject::::formattingDiffsUsing(com.google.common.truth.Correspondence.DiffFormatter<? super V, ? super V>)":[529,532],"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)":[553,622],"MapSubject.UsingCorrespondence::::doesNotContainEntry(java.lang.Object,E)":[628,658],"MapSubject.UsingCorrespondence::::containsExactly(java.lang.Object,E,java.lang.Object[])":[672,677],"MapSubject.UsingCorrespondence::::containsAtLeast(java.lang.Object,E,java.lang.Object[])":[691,696],"MapSubject.UsingCorrespondence::::containsExactlyEntriesIn(java.util.Map<?, ? extends E>)":[702,713],"MapSubject.UsingCorrespondence::::containsAtLeastEntriesIn(java.util.Map<?, ? extends E>)":[719,725],"MapSubject.UsingCorrespondence::::internalContainsEntriesIn(java.util.Map<K, V>,boolean)":[727,757],"MapSubject.UsingCorrespondence::::differ(com.google.common.truth.Correspondence.ExceptionStore)":[759,761],"MapSubject.UsingCorrespondence::::getCastSubject()":[763,766]},"test_method_lines_dic":{"MapSubjectTest::::containsExactlyWithNullKey()":[44,53],"MapSubjectTest::::containsExactlyWithNullValue()":[55,64],"MapSubjectTest::::containsExactlyEmpty()":[66,74],"MapSubjectTest::::containsExactlyEmpty_fails()":[76,82],"MapSubjectTest::::containsExactlyEntriesInEmpty_fails()":[84,90],"MapSubjectTest::::containsExactlyOneEntry()":[92,100],"MapSubjectTest::::containsExactlyMultipleEntries()":[102,110],"MapSubjectTest::::containsExactlyDuplicateKeys()":[112,124],"MapSubjectTest::::containsExactlyMultipleDuplicateKeys()":[126,138],"MapSubjectTest::::containsExactlyExtraKey()":[140,150],"MapSubjectTest::::containsExactlyExtraKeyInOrder()":[152,160],"MapSubjectTest::::containsExactlyMissingKey()":[162,169],"MapSubjectTest::::containsExactlyWrongValue()":[171,186],"MapSubjectTest::::containsExactlyWrongValueWithNull()":[188,204],"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey()":[206,224],"MapSubjectTest::::containsExactlyExtraKeyAndWrongValue()":[226,246],"MapSubjectTest::::containsExactlyMissingKeyAndWrongValue()":[248,268],"MapSubjectTest::::containsExactlyExtraKeyAndMissingKeyAndWrongValue()":[270,295],"MapSubjectTest::::containsExactlyNotInOrder()":[297,308],"MapSubjectTest::::containsExactlyBadNumberOfArgs()":[310,329],"MapSubjectTest::::containsExactlyWrongValue_sameToStringForValues()":[331,352],"MapSubjectTest::::containsExactlyWrongValue_sameToStringForKeys()":[354,375],"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey_failsWithSameToStringForKeys()":[377,395],"MapSubjectTest::::containsAtLeastWithNullKey()":[397,409],"MapSubjectTest::::containsAtLeastWithNullValue()":[411,423],"MapSubjectTest::::containsAtLeastEmpty()":[425,431],"MapSubjectTest::::containsAtLeastOneEntry()":[433,441],"MapSubjectTest::::containsAtLeastMultipleEntries()":[443,451],"MapSubjectTest::::containsAtLeastDuplicateKeys()":[453,465],"MapSubjectTest::::containsAtLeastMultipleDuplicateKeys()":[467,479],"MapSubjectTest::::containsAtLeastMissingKey()":[481,495],"MapSubjectTest::::containsAtLeastWrongValue()":[497,512],"MapSubjectTest::::containsAtLeastWrongValueWithNull()":[514,530],"MapSubjectTest::::containsAtLeastExtraKeyAndMissingKeyAndWrongValue()":[532,552],"MapSubjectTest::::containsAtLeastNotInOrder()":[554,566],"MapSubjectTest::::containsAtLeastBadNumberOfArgs()":[568,585],"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForValues()":[587,608],"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForKeys()":[610,631],"MapSubjectTest::::containsAtLeastExtraKeyAndMissingKey_failsWithSameToStringForKeys()":[633,646],"MapSubjectTest::::isEqualToPass()":[648,654],"MapSubjectTest::::isEqualToFailureExtraMissingAndDiffering()":[656,685],"MapSubjectTest::::isEqualToFailureDiffering()":[687,704],"MapSubjectTest::::isEqualToFailureExtra()":[706,716],"MapSubjectTest::::isEqualToFailureMissing()":[718,727],"MapSubjectTest::::isEqualToFailureExtraAndMissing()":[729,749],"MapSubjectTest::::isEqualToFailureDiffering_sameToString()":[751,769],"MapSubjectTest::::isEqualToNonMap()":[771,776],"MapSubjectTest::::isEqualToNotConsistentWithEquals()":[778,789],"MapSubjectTest::::isEqualToNotConsistentWithEquals_failure()":[791,800],"MapSubjectTest::::isEqualToActualNullOtherMap()":[802,805],"MapSubjectTest::::isEqualToActualMapOtherNull()":[807,810],"MapSubjectTest::::isNotEqualTo()":[812,818],"MapSubjectTest::::isEmpty()":[820,824],"MapSubjectTest::::isEmptyWithFailure()":[826,831],"MapSubjectTest::::isNotEmpty()":[833,837],"MapSubjectTest::::isNotEmptyWithFailure()":[839,844],"MapSubjectTest::::hasSize()":[846,849],"MapSubjectTest::::hasSizeZero()":[851,854],"MapSubjectTest::::hasSizeNegative()":[856,863],"MapSubjectTest::::containsKey()":[865,869],"MapSubjectTest::::containsKeyFailure()":[871,879],"MapSubjectTest::::containsKeyNullFailure()":[881,889],"MapSubjectTest::::containsKey_failsWithSameToString()":[891,905],"MapSubjectTest::::containsKey_failsWithNullStringAndNull()":[907,923],"MapSubjectTest::::containsNullKey()":[925,930],"MapSubjectTest::::doesNotContainKey()":[932,937],"MapSubjectTest::::doesNotContainKeyFailure()":[939,947],"MapSubjectTest::::doesNotContainNullKey()":[949,958],"MapSubjectTest::::containsEntry()":[960,964],"MapSubjectTest::::containsEntryFailure()":[966,973],"MapSubjectTest::::containsEntry_failsWithSameToStringOfKey()":[975,987],"MapSubjectTest::::containsEntry_failsWithSameToStringOfValue()":[989,1001],"MapSubjectTest::::containsNullKeyAndValue()":[1003,1010],"MapSubjectTest::::containsNullEntry()":[1012,1017],"MapSubjectTest::::containsNullEntryValue()":[1019,1031],"MapSubjectTest::::containsNullEntryKey()":[1036,1048],"MapSubjectTest::::containsExactly_bothExactAndToStringKeyMatches_showsExactKeyMatch()":[1050,1059],"MapSubjectTest::::doesNotContainEntry()":[1061,1068],"MapSubjectTest::::doesNotContainEntryFailure()":[1070,1078],"MapSubjectTest::::doesNotContainNullEntry()":[1080,1086],"MapSubjectTest::::doesNotContainNullEntryFailure()":[1088,1097],"MapSubjectTest::::failMapContainsKey()":[1099,1107],"MapSubjectTest::::failMapContainsKeyWithNull()":[1109,1117],"MapSubjectTest::::failMapLacksKey()":[1119,1127],"MapSubjectTest::::containsKeyWithValue()":[1129,1133],"MapSubjectTest::::containsKeyWithNullValueNullExpected()":[1135,1140],"MapSubjectTest::::failMapContainsKeyWithValue()":[1142,1153],"MapSubjectTest::::failMapContainsKeyWithNullValuePresentExpected()":[1155,1167],"MapSubjectTest::::failMapContainsKeyWithPresentValueNullExpected()":[1169,1180],"MapSubjectTest::::comparingValuesUsing_containsEntry_success()":[1182,1188],"MapSubjectTest::::comparingValuesUsing_containsEntry_failsExpectedKeyHasWrongValue()":[1190,1202],"MapSubjectTest::::comparingValuesUsing_containsEntry_failsWrongKeyHasExpectedValue()":[1204,1218],"MapSubjectTest::::comparingValuesUsing_containsEntry_failsMissingExpectedKeyAndValue()":[1220,1228],"MapSubjectTest::::comparingValuesUsing_containsEntry_diffExpectedKeyHasWrongValue()":[1230,1242],"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesFormatDiffExceptions()":[1244,1270],"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_expectedKeyHasWrongValue()":[1272,1293],"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_wrongKeyHasExpectedValue()":[1295,1319],"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_successExcludedKeyHasWrongValues()":[1321,1327],"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_successWrongKeyHasExcludedValue()":[1329,1335],"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_successMissingExcludedKeyAndValue()":[1337,1343],"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_failure()":[1345,1355],"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_handlesException()":[1357,1377],"MapSubjectTest::::comparingValuesUsing_containsExactly_success()":[1379,1385],"MapSubjectTest::::comparingValuesUsing_containsExactly_inOrder_success()":[1387,1394],"MapSubjectTest::::comparingValuesUsing_containsExactly_failsExtraEntry()":[1396,1415],"MapSubjectTest::::comparingValuesUsing_containsExactly_failsMissingEntry()":[1417,1433],"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongKey()":[1435,1456],"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongValue()":[1458,1476],"MapSubjectTest::::comparingValuesUsing_containsExactly_handlesExceptions()":[1478,1500],"MapSubjectTest::::comparingValuesUsing_containsExactly_inOrder_failsOutOfOrder()":[1502,1513],"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInActual()":[1515,1535],"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInExpected()":[1537,1557],"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_success()":[1559,1566],"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_inOrder_success()":[1568,1576],"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsExtraEntry()":[1578,1595],"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsMissingEntry()":[1597,1614],"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongKey()":[1616,1638],"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongValue()":[1640,1659],"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_diffMissingAndExtraAndWrongValue()":[1661,1688],"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_handlesFormatDiffExceptions()":[1690,1721],"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_inOrder_failsOutOfOrder()":[1723,1733],"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_empty()":[1735,1742],"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsEmpty()":[1744,1752],"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_wrongValueTypeInActual()":[1754,1775],"MapSubjectTest::::comparingValuesUsing_containsAtLeast_success()":[1777,1783],"MapSubjectTest::::comparingValuesUsing_containsAtLeast_inOrder_success()":[1785,1792],"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsMissingEntry()":[1794,1811],"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsWrongKey()":[1813,1829],"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsWrongValue()":[1831,1849],"MapSubjectTest::::comparingValuesUsing_containsAtLeast_handlesExceptions()":[1851,1874],"MapSubjectTest::::comparingValuesUsing_containsAtLeast_inOrder_failsOutOfOrder()":[1876,1890],"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpectedActual()":[1892,1912],"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInUnexpectedActual_success()":[1914,1920],"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpected()":[1922,1942],"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_success()":[1944,1951],"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_inOrder_success()":[1953,1961],"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsMissingEntry()":[1963,1980],"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongKey()":[1982,1999],"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongValue()":[2001,2020],"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_diffMissingAndWrongValue()":[2022,2048],"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_handlesFormatDiffExceptions()":[2050,2081],"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_inOrder_failsOutOfOrder()":[2083,2096],"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_empty()":[2098,2105],"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_wrongValueTypeInExpectedActual()":[2107,2128],"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_wrongValueTypeInUnexpectedActual_success()":[2130,2138],"MapSubjectTest::::formattingDiffsUsing_success()":[2140,2146],"MapSubjectTest::::formattingDiffsUsing_failure()":[2148,2168],"MapSubjectTest::::expectFailureWhenTestingThat(java.util.Map<?, ?>)":[2170,2172]},"reverse_method_lines_dic":{"65":"MapSubject::::isEqualTo(java.lang.Object)","66":"MapSubject::::isEqualTo(java.lang.Object)","67":"MapSubject::::isEqualTo(java.lang.Object)","68":"MapSubject::::isEqualTo(java.lang.Object)","69":"MapSubject::::isEqualTo(java.lang.Object)","70":"MapSubject::::isEqualTo(java.lang.Object)","71":"MapSubject::::isEqualTo(java.lang.Object)","72":"MapSubject::::isEqualTo(java.lang.Object)","73":"MapSubject::::isEqualTo(java.lang.Object)","74":"MapSubject::::isEqualTo(java.lang.Object)","75":"MapSubject::::isEqualTo(java.lang.Object)","76":"MapSubject::::isEqualTo(java.lang.Object)","77":"MapSubject::::isEqualTo(java.lang.Object)","78":"MapSubject::::isEqualTo(java.lang.Object)","79":"MapSubject::::isEqualTo(java.lang.Object)","82":"MapSubject::::isEmpty()","83":"MapSubject::::isEmpty()","84":"MapSubject::::isEmpty()","85":"MapSubject::::isEmpty()","86":"MapSubject::::isEmpty()","89":"MapSubject::::isNotEmpty()","90":"MapSubject::::isNotEmpty()","91":"MapSubject::::isNotEmpty()","92":"MapSubject::::isNotEmpty()","93":"MapSubject::::isNotEmpty()","96":"MapSubject::::hasSize(int)","97":"MapSubject::::hasSize(int)","98":"MapSubject::::hasSize(int)","99":"MapSubject::::hasSize(int)","102":"MapSubject::::containsKey(java.lang.Object)","103":"MapSubject::::containsKey(java.lang.Object)","104":"MapSubject::::containsKey(java.lang.Object)","107":"MapSubject::::doesNotContainKey(java.lang.Object)","108":"MapSubject::::doesNotContainKey(java.lang.Object)","109":"MapSubject::::doesNotContainKey(java.lang.Object)","112":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","113":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","114":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","115":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","116":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","117":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","118":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","119":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","120":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","121":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","122":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","123":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","124":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","125":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","126":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","127":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","128":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","129":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","130":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","131":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","132":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","133":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","134":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","135":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","136":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","137":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","138":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","139":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","140":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","141":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","142":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","143":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","144":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","145":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","146":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","147":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","148":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","149":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","150":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","151":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","152":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","153":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","154":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","155":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","156":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","157":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","158":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","159":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","160":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","161":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","162":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","163":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","164":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","165":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","166":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","167":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)","170":"MapSubject::::doesNotContainEntry(java.lang.Object,java.lang.Object)","171":"MapSubject::::doesNotContainEntry(java.lang.Object,java.lang.Object)","172":"MapSubject::::doesNotContainEntry(java.lang.Object,java.lang.Object)","173":"MapSubject::::doesNotContainEntry(java.lang.Object,java.lang.Object)","174":"MapSubject::::doesNotContainEntry(java.lang.Object,java.lang.Object)","177":"MapSubject::::containsExactly()","178":"MapSubject::::containsExactly()","179":"MapSubject::::containsExactly()","180":"MapSubject::::containsExactly()","190":"MapSubject::::containsExactly(java.lang.Object,java.lang.Object,java.lang.Object[])","191":"MapSubject::::containsExactly(java.lang.Object,java.lang.Object,java.lang.Object[])","192":"MapSubject::::containsExactly(java.lang.Object,java.lang.Object,java.lang.Object[])","193":"MapSubject::::containsExactly(java.lang.Object,java.lang.Object,java.lang.Object[])","194":"MapSubject::::containsExactly(java.lang.Object,java.lang.Object,java.lang.Object[])","196":"MapSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])","197":"MapSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])","198":"MapSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])","199":"MapSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])","200":"MapSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])","202":"MapSubject::::accumulateMap(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object[])","203":"MapSubject::::accumulateMap(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object[])","204":"MapSubject::::accumulateMap(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object[])","205":"MapSubject::::accumulateMap(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object[])","206":"MapSubject::::accumulateMap(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object[])","207":"MapSubject::::accumulateMap(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object[])","208":"MapSubject::::accumulateMap(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object[])","209":"MapSubject::::accumulateMap(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object[])","210":"MapSubject::::accumulateMap(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object[])","211":"MapSubject::::accumulateMap(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object[])","212":"MapSubject::::accumulateMap(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object[])","213":"MapSubject::::accumulateMap(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object[])","214":"MapSubject::::accumulateMap(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object[])","215":"MapSubject::::accumulateMap(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object[])","216":"MapSubject::::accumulateMap(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object[])","217":"MapSubject::::accumulateMap(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object[])","218":"MapSubject::::accumulateMap(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object[])","219":"MapSubject::::accumulateMap(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object[])","220":"MapSubject::::accumulateMap(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object[])","221":"MapSubject::::accumulateMap(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object[])","222":"MapSubject::::accumulateMap(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object[])","223":"MapSubject::::accumulateMap(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object[])","224":"MapSubject::::accumulateMap(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object[])","225":"MapSubject::::accumulateMap(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object[])","228":"MapSubject::::containsExactlyEntriesIn(java.util.Map<?, ?>)","229":"MapSubject::::containsExactlyEntriesIn(java.util.Map<?, ?>)","230":"MapSubject::::containsExactlyEntriesIn(java.util.Map<?, ?>)","231":"MapSubject::::containsExactlyEntriesIn(java.util.Map<?, ?>)","232":"MapSubject::::containsExactlyEntriesIn(java.util.Map<?, ?>)","233":"MapSubject::::containsExactlyEntriesIn(java.util.Map<?, ?>)","234":"MapSubject::::containsExactlyEntriesIn(java.util.Map<?, ?>)","235":"MapSubject::::containsExactlyEntriesIn(java.util.Map<?, ?>)","236":"MapSubject::::containsExactlyEntriesIn(java.util.Map<?, ?>)","237":"MapSubject::::containsExactlyEntriesIn(java.util.Map<?, ?>)","238":"MapSubject::::containsExactlyEntriesIn(java.util.Map<?, ?>)","239":"MapSubject::::containsExactlyEntriesIn(java.util.Map<?, ?>)","240":"MapSubject::::containsExactlyEntriesIn(java.util.Map<?, ?>)","241":"MapSubject::::containsExactlyEntriesIn(java.util.Map<?, ?>)","242":"MapSubject::::containsExactlyEntriesIn(java.util.Map<?, ?>)","243":"MapSubject::::containsExactlyEntriesIn(java.util.Map<?, ?>)","244":"MapSubject::::containsExactlyEntriesIn(java.util.Map<?, ?>)","247":"MapSubject::::containsAtLeastEntriesIn(java.util.Map<?, ?>)","248":"MapSubject::::containsAtLeastEntriesIn(java.util.Map<?, ?>)","249":"MapSubject::::containsAtLeastEntriesIn(java.util.Map<?, ?>)","250":"MapSubject::::containsAtLeastEntriesIn(java.util.Map<?, ?>)","251":"MapSubject::::containsAtLeastEntriesIn(java.util.Map<?, ?>)","252":"MapSubject::::containsAtLeastEntriesIn(java.util.Map<?, ?>)","253":"MapSubject::::containsAtLeastEntriesIn(java.util.Map<?, ?>)","254":"MapSubject::::containsAtLeastEntriesIn(java.util.Map<?, ?>)","255":"MapSubject::::containsAtLeastEntriesIn(java.util.Map<?, ?>)","256":"MapSubject::::containsAtLeastEntriesIn(java.util.Map<?, ?>)","257":"MapSubject::::containsAtLeastEntriesIn(java.util.Map<?, ?>)","258":"MapSubject::::containsAtLeastEntriesIn(java.util.Map<?, ?>)","260":"MapSubject::::containsEntriesInAnyOrder(java.util.Map<?, ?>,boolean)","261":"MapSubject::::containsEntriesInAnyOrder(java.util.Map<?, ?>,boolean)","262":"MapSubject::::containsEntriesInAnyOrder(java.util.Map<?, ?>,boolean)","263":"MapSubject::::containsEntriesInAnyOrder(java.util.Map<?, ?>,boolean)","264":"MapSubject::::containsEntriesInAnyOrder(java.util.Map<?, ?>,boolean)","265":"MapSubject::::containsEntriesInAnyOrder(java.util.Map<?, ?>,boolean)","266":"MapSubject::::containsEntriesInAnyOrder(java.util.Map<?, ?>,boolean)","267":"MapSubject::::containsEntriesInAnyOrder(java.util.Map<?, ?>,boolean)","268":"MapSubject::::containsEntriesInAnyOrder(java.util.Map<?, ?>,boolean)","269":"MapSubject::::containsEntriesInAnyOrder(java.util.Map<?, ?>,boolean)","270":"MapSubject::::containsEntriesInAnyOrder(java.util.Map<?, ?>,boolean)","271":"MapSubject::::containsEntriesInAnyOrder(java.util.Map<?, ?>,boolean)","272":"MapSubject::::containsEntriesInAnyOrder(java.util.Map<?, ?>,boolean)","273":"MapSubject::::containsEntriesInAnyOrder(java.util.Map<?, ?>,boolean)","274":"MapSubject::::containsEntriesInAnyOrder(java.util.Map<?, ?>,boolean)","275":"MapSubject::::containsEntriesInAnyOrder(java.util.Map<?, ?>,boolean)","276":"MapSubject::::containsEntriesInAnyOrder(java.util.Map<?, ?>,boolean)","277":"MapSubject::::containsEntriesInAnyOrder(java.util.Map<?, ?>,boolean)","278":"MapSubject::::containsEntriesInAnyOrder(java.util.Map<?, ?>,boolean)","279":"MapSubject::::containsEntriesInAnyOrder(java.util.Map<?, ?>,boolean)","280":"MapSubject::::containsEntriesInAnyOrder(java.util.Map<?, ?>,boolean)","281":"MapSubject::::containsEntriesInAnyOrder(java.util.Map<?, ?>,boolean)","282":"MapSubject::::containsEntriesInAnyOrder(java.util.Map<?, ?>,boolean)","283":"MapSubject::::containsEntriesInAnyOrder(java.util.Map<?, ?>,boolean)","284":"MapSubject::::containsEntriesInAnyOrder(java.util.Map<?, ?>,boolean)","285":"MapSubject::::containsEntriesInAnyOrder(java.util.Map<?, ?>,boolean)","288":"MapSubject.ValueTester::::test(A,E)","292":"MapSubject.Differ::::diff(A,E)","305":"MapSubject.MapDifference::::create(java.util.Map<? extends K, ? extends A>,java.util.Map<? extends K, ? extends E>,boolean,com.google.common.truth.MapSubject.ValueTester<? super A, ? super E>)","306":"MapSubject.MapDifference::::create(java.util.Map<? extends K, ? extends A>,java.util.Map<? extends K, ? extends E>,boolean,com.google.common.truth.MapSubject.ValueTester<? super A, ? super E>)","307":"MapSubject.MapDifference::::create(java.util.Map<? extends K, ? extends A>,java.util.Map<? extends K, ? extends E>,boolean,com.google.common.truth.MapSubject.ValueTester<? super A, ? super E>)","308":"MapSubject.MapDifference::::create(java.util.Map<? extends K, ? extends A>,java.util.Map<? extends K, ? extends E>,boolean,com.google.common.truth.MapSubject.ValueTester<? super A, ? super E>)","309":"MapSubject.MapDifference::::create(java.util.Map<? extends K, ? extends A>,java.util.Map<? extends K, ? extends E>,boolean,com.google.common.truth.MapSubject.ValueTester<? super A, ? super E>)","310":"MapSubject.MapDifference::::create(java.util.Map<? extends K, ? extends A>,java.util.Map<? extends K, ? extends E>,boolean,com.google.common.truth.MapSubject.ValueTester<? super A, ? super E>)","311":"MapSubject.MapDifference::::create(java.util.Map<? extends K, ? extends A>,java.util.Map<? extends K, ? extends E>,boolean,com.google.common.truth.MapSubject.ValueTester<? super A, ? super E>)","312":"MapSubject.MapDifference::::create(java.util.Map<? extends K, ? extends A>,java.util.Map<? extends K, ? extends E>,boolean,com.google.common.truth.MapSubject.ValueTester<? super A, ? super E>)","313":"MapSubject.MapDifference::::create(java.util.Map<? extends K, ? extends A>,java.util.Map<? extends K, ? extends E>,boolean,com.google.common.truth.MapSubject.ValueTester<? super A, ? super E>)","314":"MapSubject.MapDifference::::create(java.util.Map<? extends K, ? extends A>,java.util.Map<? extends K, ? extends E>,boolean,com.google.common.truth.MapSubject.ValueTester<? super A, ? super E>)","315":"MapSubject.MapDifference::::create(java.util.Map<? extends K, ? extends A>,java.util.Map<? extends K, ? extends E>,boolean,com.google.common.truth.MapSubject.ValueTester<? super A, ? super E>)","316":"MapSubject.MapDifference::::create(java.util.Map<? extends K, ? extends A>,java.util.Map<? extends K, ? extends E>,boolean,com.google.common.truth.MapSubject.ValueTester<? super A, ? super E>)","317":"MapSubject.MapDifference::::create(java.util.Map<? extends K, ? extends A>,java.util.Map<? extends K, ? extends E>,boolean,com.google.common.truth.MapSubject.ValueTester<? super A, ? super E>)","318":"MapSubject.MapDifference::::create(java.util.Map<? extends K, ? extends A>,java.util.Map<? extends K, ? extends E>,boolean,com.google.common.truth.MapSubject.ValueTester<? super A, ? super E>)","319":"MapSubject.MapDifference::::create(java.util.Map<? extends K, ? extends A>,java.util.Map<? extends K, ? extends E>,boolean,com.google.common.truth.MapSubject.ValueTester<? super A, ? super E>)","320":"MapSubject.MapDifference::::create(java.util.Map<? extends K, ? extends A>,java.util.Map<? extends K, ? extends E>,boolean,com.google.common.truth.MapSubject.ValueTester<? super A, ? super E>)","321":"MapSubject.MapDifference::::create(java.util.Map<? extends K, ? extends A>,java.util.Map<? extends K, ? extends E>,boolean,com.google.common.truth.MapSubject.ValueTester<? super A, ? super E>)","322":"MapSubject.MapDifference::::create(java.util.Map<? extends K, ? extends A>,java.util.Map<? extends K, ? extends E>,boolean,com.google.common.truth.MapSubject.ValueTester<? super A, ? super E>)","323":"MapSubject.MapDifference::::create(java.util.Map<? extends K, ? extends A>,java.util.Map<? extends K, ? extends E>,boolean,com.google.common.truth.MapSubject.ValueTester<? super A, ? super E>)","324":"MapSubject.MapDifference::::create(java.util.Map<? extends K, ? extends A>,java.util.Map<? extends K, ? extends E>,boolean,com.google.common.truth.MapSubject.ValueTester<? super A, ? super E>)","325":"MapSubject.MapDifference::::create(java.util.Map<? extends K, ? extends A>,java.util.Map<? extends K, ? extends E>,boolean,com.google.common.truth.MapSubject.ValueTester<? super A, ? super E>)","326":"MapSubject.MapDifference::::create(java.util.Map<? extends K, ? extends A>,java.util.Map<? extends K, ? extends E>,boolean,com.google.common.truth.MapSubject.ValueTester<? super A, ? super E>)","327":"MapSubject.MapDifference::::create(java.util.Map<? extends K, ? extends A>,java.util.Map<? extends K, ? extends E>,boolean,com.google.common.truth.MapSubject.ValueTester<? super A, ? super E>)","328":"MapSubject.MapDifference::::create(java.util.Map<? extends K, ? extends A>,java.util.Map<? extends K, ? extends E>,boolean,com.google.common.truth.MapSubject.ValueTester<? super A, ? super E>)","329":"MapSubject.MapDifference::::create(java.util.Map<? extends K, ? extends A>,java.util.Map<? extends K, ? extends E>,boolean,com.google.common.truth.MapSubject.ValueTester<? super A, ? super E>)","330":"MapSubject.MapDifference::::create(java.util.Map<? extends K, ? extends A>,java.util.Map<? extends K, ? extends E>,boolean,com.google.common.truth.MapSubject.ValueTester<? super A, ? super E>)","331":"MapSubject.MapDifference::::create(java.util.Map<? extends K, ? extends A>,java.util.Map<? extends K, ? extends E>,boolean,com.google.common.truth.MapSubject.ValueTester<? super A, ? super E>)","332":"MapSubject.MapDifference::::create(java.util.Map<? extends K, ? extends A>,java.util.Map<? extends K, ? extends E>,boolean,com.google.common.truth.MapSubject.ValueTester<? super A, ? super E>)","345":"MapSubject.MapDifference::::isEmpty()","346":"MapSubject.MapDifference::::isEmpty()","347":"MapSubject.MapDifference::::isEmpty()","349":"MapSubject.MapDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","350":"MapSubject.MapDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","351":"MapSubject.MapDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","352":"MapSubject.MapDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","353":"MapSubject.MapDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","354":"MapSubject.MapDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","355":"MapSubject.MapDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","356":"MapSubject.MapDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","357":"MapSubject.MapDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","358":"MapSubject.MapDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","359":"MapSubject.MapDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","360":"MapSubject.MapDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","361":"MapSubject.MapDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","362":"MapSubject.MapDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","363":"MapSubject.MapDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","364":"MapSubject.MapDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","365":"MapSubject.MapDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","366":"MapSubject.MapDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","367":"MapSubject.MapDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","368":"MapSubject.MapDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","369":"MapSubject.MapDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","370":"MapSubject.MapDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","371":"MapSubject.MapDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","372":"MapSubject.MapDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","373":"MapSubject.MapDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","374":"MapSubject.MapDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","376":"MapSubject.MapDifference::::includeKeyTypes()","377":"MapSubject.MapDifference::::includeKeyTypes()","378":"MapSubject.MapDifference::::includeKeyTypes()","379":"MapSubject.MapDifference::::includeKeyTypes()","380":"MapSubject.MapDifference::::includeKeyTypes()","381":"MapSubject.MapDifference::::includeKeyTypes()","382":"MapSubject.MapDifference::::includeKeyTypes()","383":"MapSubject.MapDifference::::includeKeyTypes()","384":"MapSubject.MapDifference::::includeKeyTypes()","396":"MapSubject.ValueDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","397":"MapSubject.ValueDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","398":"MapSubject.ValueDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","399":"MapSubject.ValueDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","400":"MapSubject.ValueDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","401":"MapSubject.ValueDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","402":"MapSubject.ValueDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","403":"MapSubject.ValueDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","404":"MapSubject.ValueDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","405":"MapSubject.ValueDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","406":"MapSubject.ValueDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","407":"MapSubject.ValueDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","408":"MapSubject.ValueDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","409":"MapSubject.ValueDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","410":"MapSubject.ValueDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","411":"MapSubject.ValueDifference::::describe(com.google.common.truth.MapSubject.Differ<? super A, ? super E>)","414":"MapSubject::::maybeAddType(java.lang.Object,boolean)","415":"MapSubject::::maybeAddType(java.lang.Object,boolean)","416":"MapSubject::::maybeAddType(java.lang.Object,boolean)","417":"MapSubject::::maybeAddType(java.lang.Object,boolean)","418":"MapSubject::::maybeAddType(java.lang.Object,boolean)","441":"MapSubject.MapInOrder::::inOrder()","442":"MapSubject.MapInOrder::::inOrder()","443":"MapSubject.MapInOrder::::inOrder()","444":"MapSubject.MapInOrder::::inOrder()","445":"MapSubject.MapInOrder::::inOrder()","446":"MapSubject.MapInOrder::::inOrder()","447":"MapSubject.MapInOrder::::inOrder()","448":"MapSubject.MapInOrder::::inOrder()","449":"MapSubject.MapInOrder::::inOrder()","450":"MapSubject.MapInOrder::::inOrder()","451":"MapSubject.MapInOrder::::inOrder()","452":"MapSubject.MapInOrder::::inOrder()","453":"MapSubject.MapInOrder::::inOrder()","454":"MapSubject.MapInOrder::::inOrder()","455":"MapSubject.MapInOrder::::inOrder()","456":"MapSubject.MapInOrder::::inOrder()","457":"MapSubject.MapInOrder::::inOrder()","458":"MapSubject.MapInOrder::::inOrder()","459":"MapSubject.MapInOrder::::inOrder()","460":"MapSubject.MapInOrder::::inOrder()","461":"MapSubject.MapInOrder::::inOrder()","462":"MapSubject.MapInOrder::::inOrder()","463":"MapSubject.MapInOrder::::inOrder()","464":"MapSubject.MapInOrder::::inOrder()","465":"MapSubject.MapInOrder::::inOrder()","466":"MapSubject.MapInOrder::::inOrder()","497":"MapSubject::::comparingValuesUsing(com.google.common.truth.Correspondence<? super A, ? super E>)","498":"MapSubject::::comparingValuesUsing(com.google.common.truth.Correspondence<? super A, ? super E>)","499":"MapSubject::::comparingValuesUsing(com.google.common.truth.Correspondence<? super A, ? super E>)","500":"MapSubject::::comparingValuesUsing(com.google.common.truth.Correspondence<? super A, ? super E>)","501":"MapSubject::::comparingValuesUsing(com.google.common.truth.Correspondence<? super A, ? super E>)","529":"MapSubject::::formattingDiffsUsing(com.google.common.truth.Correspondence.DiffFormatter<? super V, ? super V>)","530":"MapSubject::::formattingDiffsUsing(com.google.common.truth.Correspondence.DiffFormatter<? super V, ? super V>)","531":"MapSubject::::formattingDiffsUsing(com.google.common.truth.Correspondence.DiffFormatter<? super V, ? super V>)","532":"MapSubject::::formattingDiffsUsing(com.google.common.truth.Correspondence.DiffFormatter<? super V, ? super V>)","553":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","554":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","555":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","556":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","557":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","558":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","559":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","560":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","561":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","562":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","563":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","564":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","565":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","566":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","567":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","568":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","569":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","570":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","571":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","572":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","573":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","574":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","575":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","576":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","577":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","578":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","579":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","580":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","581":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","582":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","583":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","584":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","585":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","586":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","587":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","588":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","589":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","590":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","591":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","592":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","593":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","594":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","595":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","596":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","597":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","598":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","599":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","600":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","601":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","602":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","603":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","604":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","605":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","606":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","607":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","608":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","609":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","610":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","611":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","612":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","613":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","614":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","615":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","616":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","617":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","618":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","619":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","620":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","621":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","622":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)","628":"MapSubject.UsingCorrespondence::::doesNotContainEntry(java.lang.Object,E)","629":"MapSubject.UsingCorrespondence::::doesNotContainEntry(java.lang.Object,E)","630":"MapSubject.UsingCorrespondence::::doesNotContainEntry(java.lang.Object,E)","631":"MapSubject.UsingCorrespondence::::doesNotContainEntry(java.lang.Object,E)","632":"MapSubject.UsingCorrespondence::::doesNotContainEntry(java.lang.Object,E)","633":"MapSubject.UsingCorrespondence::::doesNotContainEntry(java.lang.Object,E)","634":"MapSubject.UsingCorrespondence::::doesNotContainEntry(java.lang.Object,E)","635":"MapSubject.UsingCorrespondence::::doesNotContainEntry(java.lang.Object,E)","636":"MapSubject.UsingCorrespondence::::doesNotContainEntry(java.lang.Object,E)","637":"MapSubject.UsingCorrespondence::::doesNotContainEntry(java.lang.Object,E)","638":"MapSubject.UsingCorrespondence::::doesNotContainEntry(java.lang.Object,E)","639":"MapSubject.UsingCorrespondence::::doesNotContainEntry(java.lang.Object,E)","640":"MapSubject.UsingCorrespondence::::doesNotContainEntry(java.lang.Object,E)","641":"MapSubject.UsingCorrespondence::::doesNotContainEntry(java.lang.Object,E)","642":"MapSubject.UsingCorrespondence::::doesNotContainEntry(java.lang.Object,E)","643":"MapSubject.UsingCorrespondence::::doesNotContainEntry(java.lang.Object,E)","644":"MapSubject.UsingCorrespondence::::doesNotContainEntry(java.lang.Object,E)","645":"MapSubject.UsingCorrespondence::::doesNotContainEntry(java.lang.Object,E)","646":"MapSubject.UsingCorrespondence::::doesNotContainEntry(java.lang.Object,E)","647":"MapSubject.UsingCorrespondence::::doesNotContainEntry(java.lang.Object,E)","648":"MapSubject.UsingCorrespondence::::doesNotContainEntry(java.lang.Object,E)","649":"MapSubject.UsingCorrespondence::::doesNotContainEntry(java.lang.Object,E)","650":"MapSubject.UsingCorrespondence::::doesNotContainEntry(java.lang.Object,E)","651":"MapSubject.UsingCorrespondence::::doesNotContainEntry(java.lang.Object,E)","652":"MapSubject.UsingCorrespondence::::doesNotContainEntry(java.lang.Object,E)","653":"MapSubject.UsingCorrespondence::::doesNotContainEntry(java.lang.Object,E)","654":"MapSubject.UsingCorrespondence::::doesNotContainEntry(java.lang.Object,E)","655":"MapSubject.UsingCorrespondence::::doesNotContainEntry(java.lang.Object,E)","656":"MapSubject.UsingCorrespondence::::doesNotContainEntry(java.lang.Object,E)","657":"MapSubject.UsingCorrespondence::::doesNotContainEntry(java.lang.Object,E)","658":"MapSubject.UsingCorrespondence::::doesNotContainEntry(java.lang.Object,E)","672":"MapSubject.UsingCorrespondence::::containsExactly(java.lang.Object,E,java.lang.Object[])","673":"MapSubject.UsingCorrespondence::::containsExactly(java.lang.Object,E,java.lang.Object[])","674":"MapSubject.UsingCorrespondence::::containsExactly(java.lang.Object,E,java.lang.Object[])","675":"MapSubject.UsingCorrespondence::::containsExactly(java.lang.Object,E,java.lang.Object[])","676":"MapSubject.UsingCorrespondence::::containsExactly(java.lang.Object,E,java.lang.Object[])","677":"MapSubject.UsingCorrespondence::::containsExactly(java.lang.Object,E,java.lang.Object[])","691":"MapSubject.UsingCorrespondence::::containsAtLeast(java.lang.Object,E,java.lang.Object[])","692":"MapSubject.UsingCorrespondence::::containsAtLeast(java.lang.Object,E,java.lang.Object[])","693":"MapSubject.UsingCorrespondence::::containsAtLeast(java.lang.Object,E,java.lang.Object[])","694":"MapSubject.UsingCorrespondence::::containsAtLeast(java.lang.Object,E,java.lang.Object[])","695":"MapSubject.UsingCorrespondence::::containsAtLeast(java.lang.Object,E,java.lang.Object[])","696":"MapSubject.UsingCorrespondence::::containsAtLeast(java.lang.Object,E,java.lang.Object[])","702":"MapSubject.UsingCorrespondence::::containsExactlyEntriesIn(java.util.Map<?, ? extends E>)","703":"MapSubject.UsingCorrespondence::::containsExactlyEntriesIn(java.util.Map<?, ? extends E>)","704":"MapSubject.UsingCorrespondence::::containsExactlyEntriesIn(java.util.Map<?, ? extends E>)","705":"MapSubject.UsingCorrespondence::::containsExactlyEntriesIn(java.util.Map<?, ? extends E>)","706":"MapSubject.UsingCorrespondence::::containsExactlyEntriesIn(java.util.Map<?, ? extends E>)","707":"MapSubject.UsingCorrespondence::::containsExactlyEntriesIn(java.util.Map<?, ? extends E>)","708":"MapSubject.UsingCorrespondence::::containsExactlyEntriesIn(java.util.Map<?, ? extends E>)","709":"MapSubject.UsingCorrespondence::::containsExactlyEntriesIn(java.util.Map<?, ? extends E>)","710":"MapSubject.UsingCorrespondence::::containsExactlyEntriesIn(java.util.Map<?, ? extends E>)","711":"MapSubject.UsingCorrespondence::::containsExactlyEntriesIn(java.util.Map<?, ? extends E>)","712":"MapSubject.UsingCorrespondence::::containsExactlyEntriesIn(java.util.Map<?, ? extends E>)","713":"MapSubject.UsingCorrespondence::::containsExactlyEntriesIn(java.util.Map<?, ? extends E>)","719":"MapSubject.UsingCorrespondence::::containsAtLeastEntriesIn(java.util.Map<?, ? extends E>)","720":"MapSubject.UsingCorrespondence::::containsAtLeastEntriesIn(java.util.Map<?, ? extends E>)","721":"MapSubject.UsingCorrespondence::::containsAtLeastEntriesIn(java.util.Map<?, ? extends E>)","722":"MapSubject.UsingCorrespondence::::containsAtLeastEntriesIn(java.util.Map<?, ? extends E>)","723":"MapSubject.UsingCorrespondence::::containsAtLeastEntriesIn(java.util.Map<?, ? extends E>)","724":"MapSubject.UsingCorrespondence::::containsAtLeastEntriesIn(java.util.Map<?, ? extends E>)","725":"MapSubject.UsingCorrespondence::::containsAtLeastEntriesIn(java.util.Map<?, ? extends E>)","727":"MapSubject.UsingCorrespondence::::internalContainsEntriesIn(java.util.Map<K, V>,boolean)","728":"MapSubject.UsingCorrespondence::::internalContainsEntriesIn(java.util.Map<K, V>,boolean)","729":"MapSubject.UsingCorrespondence::::internalContainsEntriesIn(java.util.Map<K, V>,boolean)","730":"MapSubject.UsingCorrespondence::::internalContainsEntriesIn(java.util.Map<K, V>,boolean)","731":"MapSubject.UsingCorrespondence::::internalContainsEntriesIn(java.util.Map<K, V>,boolean)","732":"MapSubject.UsingCorrespondence::::internalContainsEntriesIn(java.util.Map<K, V>,boolean)","733":"MapSubject.UsingCorrespondence::::internalContainsEntriesIn(java.util.Map<K, V>,boolean)","734":"MapSubject.UsingCorrespondence::::internalContainsEntriesIn(java.util.Map<K, V>,boolean)","735":"MapSubject.UsingCorrespondence::::internalContainsEntriesIn(java.util.Map<K, V>,boolean)","736":"MapSubject.UsingCorrespondence::::internalContainsEntriesIn(java.util.Map<K, V>,boolean)","737":"MapSubject.UsingCorrespondence::::internalContainsEntriesIn(java.util.Map<K, V>,boolean)","738":"MapSubject.UsingCorrespondence::::internalContainsEntriesIn(java.util.Map<K, V>,boolean)","739":"MapSubject.UsingCorrespondence::::internalContainsEntriesIn(java.util.Map<K, V>,boolean)","740":"MapSubject.UsingCorrespondence::::internalContainsEntriesIn(java.util.Map<K, V>,boolean)","741":"MapSubject.UsingCorrespondence::::internalContainsEntriesIn(java.util.Map<K, V>,boolean)","742":"MapSubject.UsingCorrespondence::::internalContainsEntriesIn(java.util.Map<K, V>,boolean)","743":"MapSubject.UsingCorrespondence::::internalContainsEntriesIn(java.util.Map<K, V>,boolean)","744":"MapSubject.UsingCorrespondence::::internalContainsEntriesIn(java.util.Map<K, V>,boolean)","745":"MapSubject.UsingCorrespondence::::internalContainsEntriesIn(java.util.Map<K, V>,boolean)","746":"MapSubject.UsingCorrespondence::::internalContainsEntriesIn(java.util.Map<K, V>,boolean)","747":"MapSubject.UsingCorrespondence::::internalContainsEntriesIn(java.util.Map<K, V>,boolean)","748":"MapSubject.UsingCorrespondence::::internalContainsEntriesIn(java.util.Map<K, V>,boolean)","749":"MapSubject.UsingCorrespondence::::internalContainsEntriesIn(java.util.Map<K, V>,boolean)","750":"MapSubject.UsingCorrespondence::::internalContainsEntriesIn(java.util.Map<K, V>,boolean)","751":"MapSubject.UsingCorrespondence::::internalContainsEntriesIn(java.util.Map<K, V>,boolean)","752":"MapSubject.UsingCorrespondence::::internalContainsEntriesIn(java.util.Map<K, V>,boolean)","753":"MapSubject.UsingCorrespondence::::internalContainsEntriesIn(java.util.Map<K, V>,boolean)","754":"MapSubject.UsingCorrespondence::::internalContainsEntriesIn(java.util.Map<K, V>,boolean)","755":"MapSubject.UsingCorrespondence::::internalContainsEntriesIn(java.util.Map<K, V>,boolean)","756":"MapSubject.UsingCorrespondence::::internalContainsEntriesIn(java.util.Map<K, V>,boolean)","757":"MapSubject.UsingCorrespondence::::internalContainsEntriesIn(java.util.Map<K, V>,boolean)","759":"MapSubject.UsingCorrespondence::::differ(com.google.common.truth.Correspondence.ExceptionStore)","760":"MapSubject.UsingCorrespondence::::differ(com.google.common.truth.Correspondence.ExceptionStore)","761":"MapSubject.UsingCorrespondence::::differ(com.google.common.truth.Correspondence.ExceptionStore)","763":"MapSubject.UsingCorrespondence::::getCastSubject()","764":"MapSubject.UsingCorrespondence::::getCastSubject()","765":"MapSubject.UsingCorrespondence::::getCastSubject()","766":"MapSubject.UsingCorrespondence::::getCastSubject()"},"test_reverse_method_lines_dic":{"44":"MapSubjectTest::::containsExactlyWithNullKey()","45":"MapSubjectTest::::containsExactlyWithNullKey()","46":"MapSubjectTest::::containsExactlyWithNullKey()","47":"MapSubjectTest::::containsExactlyWithNullKey()","48":"MapSubjectTest::::containsExactlyWithNullKey()","49":"MapSubjectTest::::containsExactlyWithNullKey()","50":"MapSubjectTest::::containsExactlyWithNullKey()","51":"MapSubjectTest::::containsExactlyWithNullKey()","52":"MapSubjectTest::::containsExactlyWithNullKey()","53":"MapSubjectTest::::containsExactlyWithNullKey()","55":"MapSubjectTest::::containsExactlyWithNullValue()","56":"MapSubjectTest::::containsExactlyWithNullValue()","57":"MapSubjectTest::::containsExactlyWithNullValue()","58":"MapSubjectTest::::containsExactlyWithNullValue()","59":"MapSubjectTest::::containsExactlyWithNullValue()","60":"MapSubjectTest::::containsExactlyWithNullValue()","61":"MapSubjectTest::::containsExactlyWithNullValue()","62":"MapSubjectTest::::containsExactlyWithNullValue()","63":"MapSubjectTest::::containsExactlyWithNullValue()","64":"MapSubjectTest::::containsExactlyWithNullValue()","66":"MapSubjectTest::::containsExactlyEmpty()","67":"MapSubjectTest::::containsExactlyEmpty()","68":"MapSubjectTest::::containsExactlyEmpty()","69":"MapSubjectTest::::containsExactlyEmpty()","70":"MapSubjectTest::::containsExactlyEmpty()","71":"MapSubjectTest::::containsExactlyEmpty()","72":"MapSubjectTest::::containsExactlyEmpty()","73":"MapSubjectTest::::containsExactlyEmpty()","74":"MapSubjectTest::::containsExactlyEmpty()","76":"MapSubjectTest::::containsExactlyEmpty_fails()","77":"MapSubjectTest::::containsExactlyEmpty_fails()","78":"MapSubjectTest::::containsExactlyEmpty_fails()","79":"MapSubjectTest::::containsExactlyEmpty_fails()","80":"MapSubjectTest::::containsExactlyEmpty_fails()","81":"MapSubjectTest::::containsExactlyEmpty_fails()","82":"MapSubjectTest::::containsExactlyEmpty_fails()","84":"MapSubjectTest::::containsExactlyEntriesInEmpty_fails()","85":"MapSubjectTest::::containsExactlyEntriesInEmpty_fails()","86":"MapSubjectTest::::containsExactlyEntriesInEmpty_fails()","87":"MapSubjectTest::::containsExactlyEntriesInEmpty_fails()","88":"MapSubjectTest::::containsExactlyEntriesInEmpty_fails()","89":"MapSubjectTest::::containsExactlyEntriesInEmpty_fails()","90":"MapSubjectTest::::containsExactlyEntriesInEmpty_fails()","92":"MapSubjectTest::::containsExactlyOneEntry()","93":"MapSubjectTest::::containsExactlyOneEntry()","94":"MapSubjectTest::::containsExactlyOneEntry()","95":"MapSubjectTest::::containsExactlyOneEntry()","96":"MapSubjectTest::::containsExactlyOneEntry()","97":"MapSubjectTest::::containsExactlyOneEntry()","98":"MapSubjectTest::::containsExactlyOneEntry()","99":"MapSubjectTest::::containsExactlyOneEntry()","100":"MapSubjectTest::::containsExactlyOneEntry()","102":"MapSubjectTest::::containsExactlyMultipleEntries()","103":"MapSubjectTest::::containsExactlyMultipleEntries()","104":"MapSubjectTest::::containsExactlyMultipleEntries()","105":"MapSubjectTest::::containsExactlyMultipleEntries()","106":"MapSubjectTest::::containsExactlyMultipleEntries()","107":"MapSubjectTest::::containsExactlyMultipleEntries()","108":"MapSubjectTest::::containsExactlyMultipleEntries()","109":"MapSubjectTest::::containsExactlyMultipleEntries()","110":"MapSubjectTest::::containsExactlyMultipleEntries()","112":"MapSubjectTest::::containsExactlyDuplicateKeys()","113":"MapSubjectTest::::containsExactlyDuplicateKeys()","114":"MapSubjectTest::::containsExactlyDuplicateKeys()","115":"MapSubjectTest::::containsExactlyDuplicateKeys()","116":"MapSubjectTest::::containsExactlyDuplicateKeys()","117":"MapSubjectTest::::containsExactlyDuplicateKeys()","118":"MapSubjectTest::::containsExactlyDuplicateKeys()","119":"MapSubjectTest::::containsExactlyDuplicateKeys()","120":"MapSubjectTest::::containsExactlyDuplicateKeys()","121":"MapSubjectTest::::containsExactlyDuplicateKeys()","122":"MapSubjectTest::::containsExactlyDuplicateKeys()","123":"MapSubjectTest::::containsExactlyDuplicateKeys()","124":"MapSubjectTest::::containsExactlyDuplicateKeys()","126":"MapSubjectTest::::containsExactlyMultipleDuplicateKeys()","127":"MapSubjectTest::::containsExactlyMultipleDuplicateKeys()","128":"MapSubjectTest::::containsExactlyMultipleDuplicateKeys()","129":"MapSubjectTest::::containsExactlyMultipleDuplicateKeys()","130":"MapSubjectTest::::containsExactlyMultipleDuplicateKeys()","131":"MapSubjectTest::::containsExactlyMultipleDuplicateKeys()","132":"MapSubjectTest::::containsExactlyMultipleDuplicateKeys()","133":"MapSubjectTest::::containsExactlyMultipleDuplicateKeys()","134":"MapSubjectTest::::containsExactlyMultipleDuplicateKeys()","135":"MapSubjectTest::::containsExactlyMultipleDuplicateKeys()","136":"MapSubjectTest::::containsExactlyMultipleDuplicateKeys()","137":"MapSubjectTest::::containsExactlyMultipleDuplicateKeys()","138":"MapSubjectTest::::containsExactlyMultipleDuplicateKeys()","140":"MapSubjectTest::::containsExactlyExtraKey()","141":"MapSubjectTest::::containsExactlyExtraKey()","142":"MapSubjectTest::::containsExactlyExtraKey()","143":"MapSubjectTest::::containsExactlyExtraKey()","144":"MapSubjectTest::::containsExactlyExtraKey()","145":"MapSubjectTest::::containsExactlyExtraKey()","146":"MapSubjectTest::::containsExactlyExtraKey()","147":"MapSubjectTest::::containsExactlyExtraKey()","148":"MapSubjectTest::::containsExactlyExtraKey()","149":"MapSubjectTest::::containsExactlyExtraKey()","150":"MapSubjectTest::::containsExactlyExtraKey()","152":"MapSubjectTest::::containsExactlyExtraKeyInOrder()","153":"MapSubjectTest::::containsExactlyExtraKeyInOrder()","154":"MapSubjectTest::::containsExactlyExtraKeyInOrder()","155":"MapSubjectTest::::containsExactlyExtraKeyInOrder()","156":"MapSubjectTest::::containsExactlyExtraKeyInOrder()","157":"MapSubjectTest::::containsExactlyExtraKeyInOrder()","158":"MapSubjectTest::::containsExactlyExtraKeyInOrder()","159":"MapSubjectTest::::containsExactlyExtraKeyInOrder()","160":"MapSubjectTest::::containsExactlyExtraKeyInOrder()","162":"MapSubjectTest::::containsExactlyMissingKey()","163":"MapSubjectTest::::containsExactlyMissingKey()","164":"MapSubjectTest::::containsExactlyMissingKey()","165":"MapSubjectTest::::containsExactlyMissingKey()","166":"MapSubjectTest::::containsExactlyMissingKey()","167":"MapSubjectTest::::containsExactlyMissingKey()","168":"MapSubjectTest::::containsExactlyMissingKey()","169":"MapSubjectTest::::containsExactlyMissingKey()","171":"MapSubjectTest::::containsExactlyWrongValue()","172":"MapSubjectTest::::containsExactlyWrongValue()","173":"MapSubjectTest::::containsExactlyWrongValue()","174":"MapSubjectTest::::containsExactlyWrongValue()","175":"MapSubjectTest::::containsExactlyWrongValue()","176":"MapSubjectTest::::containsExactlyWrongValue()","177":"MapSubjectTest::::containsExactlyWrongValue()","178":"MapSubjectTest::::containsExactlyWrongValue()","179":"MapSubjectTest::::containsExactlyWrongValue()","180":"MapSubjectTest::::containsExactlyWrongValue()","181":"MapSubjectTest::::containsExactlyWrongValue()","182":"MapSubjectTest::::containsExactlyWrongValue()","183":"MapSubjectTest::::containsExactlyWrongValue()","184":"MapSubjectTest::::containsExactlyWrongValue()","185":"MapSubjectTest::::containsExactlyWrongValue()","186":"MapSubjectTest::::containsExactlyWrongValue()","188":"MapSubjectTest::::containsExactlyWrongValueWithNull()","189":"MapSubjectTest::::containsExactlyWrongValueWithNull()","190":"MapSubjectTest::::containsExactlyWrongValueWithNull()","191":"MapSubjectTest::::containsExactlyWrongValueWithNull()","192":"MapSubjectTest::::containsExactlyWrongValueWithNull()","193":"MapSubjectTest::::containsExactlyWrongValueWithNull()","194":"MapSubjectTest::::containsExactlyWrongValueWithNull()","195":"MapSubjectTest::::containsExactlyWrongValueWithNull()","196":"MapSubjectTest::::containsExactlyWrongValueWithNull()","197":"MapSubjectTest::::containsExactlyWrongValueWithNull()","198":"MapSubjectTest::::containsExactlyWrongValueWithNull()","199":"MapSubjectTest::::containsExactlyWrongValueWithNull()","200":"MapSubjectTest::::containsExactlyWrongValueWithNull()","201":"MapSubjectTest::::containsExactlyWrongValueWithNull()","202":"MapSubjectTest::::containsExactlyWrongValueWithNull()","203":"MapSubjectTest::::containsExactlyWrongValueWithNull()","204":"MapSubjectTest::::containsExactlyWrongValueWithNull()","206":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey()","207":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey()","208":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey()","209":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey()","210":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey()","211":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey()","212":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey()","213":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey()","214":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey()","215":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey()","216":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey()","217":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey()","218":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey()","219":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey()","220":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey()","221":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey()","222":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey()","223":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey()","224":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey()","226":"MapSubjectTest::::containsExactlyExtraKeyAndWrongValue()","227":"MapSubjectTest::::containsExactlyExtraKeyAndWrongValue()","228":"MapSubjectTest::::containsExactlyExtraKeyAndWrongValue()","229":"MapSubjectTest::::containsExactlyExtraKeyAndWrongValue()","230":"MapSubjectTest::::containsExactlyExtraKeyAndWrongValue()","231":"MapSubjectTest::::containsExactlyExtraKeyAndWrongValue()","232":"MapSubjectTest::::containsExactlyExtraKeyAndWrongValue()","233":"MapSubjectTest::::containsExactlyExtraKeyAndWrongValue()","234":"MapSubjectTest::::containsExactlyExtraKeyAndWrongValue()","235":"MapSubjectTest::::containsExactlyExtraKeyAndWrongValue()","236":"MapSubjectTest::::containsExactlyExtraKeyAndWrongValue()","237":"MapSubjectTest::::containsExactlyExtraKeyAndWrongValue()","238":"MapSubjectTest::::containsExactlyExtraKeyAndWrongValue()","239":"MapSubjectTest::::containsExactlyExtraKeyAndWrongValue()","240":"MapSubjectTest::::containsExactlyExtraKeyAndWrongValue()","241":"MapSubjectTest::::containsExactlyExtraKeyAndWrongValue()","242":"MapSubjectTest::::containsExactlyExtraKeyAndWrongValue()","243":"MapSubjectTest::::containsExactlyExtraKeyAndWrongValue()","244":"MapSubjectTest::::containsExactlyExtraKeyAndWrongValue()","245":"MapSubjectTest::::containsExactlyExtraKeyAndWrongValue()","246":"MapSubjectTest::::containsExactlyExtraKeyAndWrongValue()","248":"MapSubjectTest::::containsExactlyMissingKeyAndWrongValue()","249":"MapSubjectTest::::containsExactlyMissingKeyAndWrongValue()","250":"MapSubjectTest::::containsExactlyMissingKeyAndWrongValue()","251":"MapSubjectTest::::containsExactlyMissingKeyAndWrongValue()","252":"MapSubjectTest::::containsExactlyMissingKeyAndWrongValue()","253":"MapSubjectTest::::containsExactlyMissingKeyAndWrongValue()","254":"MapSubjectTest::::containsExactlyMissingKeyAndWrongValue()","255":"MapSubjectTest::::containsExactlyMissingKeyAndWrongValue()","256":"MapSubjectTest::::containsExactlyMissingKeyAndWrongValue()","257":"MapSubjectTest::::containsExactlyMissingKeyAndWrongValue()","258":"MapSubjectTest::::containsExactlyMissingKeyAndWrongValue()","259":"MapSubjectTest::::containsExactlyMissingKeyAndWrongValue()","260":"MapSubjectTest::::containsExactlyMissingKeyAndWrongValue()","261":"MapSubjectTest::::containsExactlyMissingKeyAndWrongValue()","262":"MapSubjectTest::::containsExactlyMissingKeyAndWrongValue()","263":"MapSubjectTest::::containsExactlyMissingKeyAndWrongValue()","264":"MapSubjectTest::::containsExactlyMissingKeyAndWrongValue()","265":"MapSubjectTest::::containsExactlyMissingKeyAndWrongValue()","266":"MapSubjectTest::::containsExactlyMissingKeyAndWrongValue()","267":"MapSubjectTest::::containsExactlyMissingKeyAndWrongValue()","268":"MapSubjectTest::::containsExactlyMissingKeyAndWrongValue()","270":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKeyAndWrongValue()","271":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKeyAndWrongValue()","272":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKeyAndWrongValue()","273":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKeyAndWrongValue()","274":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKeyAndWrongValue()","275":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKeyAndWrongValue()","276":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKeyAndWrongValue()","277":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKeyAndWrongValue()","278":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKeyAndWrongValue()","279":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKeyAndWrongValue()","280":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKeyAndWrongValue()","281":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKeyAndWrongValue()","282":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKeyAndWrongValue()","283":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKeyAndWrongValue()","284":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKeyAndWrongValue()","285":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKeyAndWrongValue()","286":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKeyAndWrongValue()","287":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKeyAndWrongValue()","288":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKeyAndWrongValue()","289":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKeyAndWrongValue()","290":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKeyAndWrongValue()","291":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKeyAndWrongValue()","292":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKeyAndWrongValue()","293":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKeyAndWrongValue()","294":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKeyAndWrongValue()","295":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKeyAndWrongValue()","297":"MapSubjectTest::::containsExactlyNotInOrder()","298":"MapSubjectTest::::containsExactlyNotInOrder()","299":"MapSubjectTest::::containsExactlyNotInOrder()","300":"MapSubjectTest::::containsExactlyNotInOrder()","301":"MapSubjectTest::::containsExactlyNotInOrder()","302":"MapSubjectTest::::containsExactlyNotInOrder()","303":"MapSubjectTest::::containsExactlyNotInOrder()","304":"MapSubjectTest::::containsExactlyNotInOrder()","305":"MapSubjectTest::::containsExactlyNotInOrder()","306":"MapSubjectTest::::containsExactlyNotInOrder()","307":"MapSubjectTest::::containsExactlyNotInOrder()","308":"MapSubjectTest::::containsExactlyNotInOrder()","310":"MapSubjectTest::::containsExactlyBadNumberOfArgs()","311":"MapSubjectTest::::containsExactlyBadNumberOfArgs()","312":"MapSubjectTest::::containsExactlyBadNumberOfArgs()","313":"MapSubjectTest::::containsExactlyBadNumberOfArgs()","314":"MapSubjectTest::::containsExactlyBadNumberOfArgs()","315":"MapSubjectTest::::containsExactlyBadNumberOfArgs()","316":"MapSubjectTest::::containsExactlyBadNumberOfArgs()","317":"MapSubjectTest::::containsExactlyBadNumberOfArgs()","318":"MapSubjectTest::::containsExactlyBadNumberOfArgs()","319":"MapSubjectTest::::containsExactlyBadNumberOfArgs()","320":"MapSubjectTest::::containsExactlyBadNumberOfArgs()","321":"MapSubjectTest::::containsExactlyBadNumberOfArgs()","322":"MapSubjectTest::::containsExactlyBadNumberOfArgs()","323":"MapSubjectTest::::containsExactlyBadNumberOfArgs()","324":"MapSubjectTest::::containsExactlyBadNumberOfArgs()","325":"MapSubjectTest::::containsExactlyBadNumberOfArgs()","326":"MapSubjectTest::::containsExactlyBadNumberOfArgs()","327":"MapSubjectTest::::containsExactlyBadNumberOfArgs()","328":"MapSubjectTest::::containsExactlyBadNumberOfArgs()","329":"MapSubjectTest::::containsExactlyBadNumberOfArgs()","331":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForValues()","332":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForValues()","333":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForValues()","334":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForValues()","335":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForValues()","336":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForValues()","337":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForValues()","338":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForValues()","339":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForValues()","340":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForValues()","341":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForValues()","342":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForValues()","343":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForValues()","344":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForValues()","345":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForValues()","346":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForValues()","347":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForValues()","348":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForValues()","349":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForValues()","350":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForValues()","351":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForValues()","352":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForValues()","354":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForKeys()","355":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForKeys()","356":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForKeys()","357":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForKeys()","358":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForKeys()","359":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForKeys()","360":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForKeys()","361":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForKeys()","362":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForKeys()","363":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForKeys()","364":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForKeys()","365":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForKeys()","366":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForKeys()","367":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForKeys()","368":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForKeys()","369":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForKeys()","370":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForKeys()","371":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForKeys()","372":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForKeys()","373":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForKeys()","374":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForKeys()","375":"MapSubjectTest::::containsExactlyWrongValue_sameToStringForKeys()","377":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey_failsWithSameToStringForKeys()","378":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey_failsWithSameToStringForKeys()","379":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey_failsWithSameToStringForKeys()","380":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey_failsWithSameToStringForKeys()","381":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey_failsWithSameToStringForKeys()","382":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey_failsWithSameToStringForKeys()","383":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey_failsWithSameToStringForKeys()","384":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey_failsWithSameToStringForKeys()","385":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey_failsWithSameToStringForKeys()","386":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey_failsWithSameToStringForKeys()","387":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey_failsWithSameToStringForKeys()","388":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey_failsWithSameToStringForKeys()","389":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey_failsWithSameToStringForKeys()","390":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey_failsWithSameToStringForKeys()","391":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey_failsWithSameToStringForKeys()","392":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey_failsWithSameToStringForKeys()","393":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey_failsWithSameToStringForKeys()","394":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey_failsWithSameToStringForKeys()","395":"MapSubjectTest::::containsExactlyExtraKeyAndMissingKey_failsWithSameToStringForKeys()","397":"MapSubjectTest::::containsAtLeastWithNullKey()","398":"MapSubjectTest::::containsAtLeastWithNullKey()","399":"MapSubjectTest::::containsAtLeastWithNullKey()","400":"MapSubjectTest::::containsAtLeastWithNullKey()","401":"MapSubjectTest::::containsAtLeastWithNullKey()","402":"MapSubjectTest::::containsAtLeastWithNullKey()","403":"MapSubjectTest::::containsAtLeastWithNullKey()","404":"MapSubjectTest::::containsAtLeastWithNullKey()","405":"MapSubjectTest::::containsAtLeastWithNullKey()","406":"MapSubjectTest::::containsAtLeastWithNullKey()","407":"MapSubjectTest::::containsAtLeastWithNullKey()","408":"MapSubjectTest::::containsAtLeastWithNullKey()","409":"MapSubjectTest::::containsAtLeastWithNullKey()","411":"MapSubjectTest::::containsAtLeastWithNullValue()","412":"MapSubjectTest::::containsAtLeastWithNullValue()","413":"MapSubjectTest::::containsAtLeastWithNullValue()","414":"MapSubjectTest::::containsAtLeastWithNullValue()","415":"MapSubjectTest::::containsAtLeastWithNullValue()","416":"MapSubjectTest::::containsAtLeastWithNullValue()","417":"MapSubjectTest::::containsAtLeastWithNullValue()","418":"MapSubjectTest::::containsAtLeastWithNullValue()","419":"MapSubjectTest::::containsAtLeastWithNullValue()","420":"MapSubjectTest::::containsAtLeastWithNullValue()","421":"MapSubjectTest::::containsAtLeastWithNullValue()","422":"MapSubjectTest::::containsAtLeastWithNullValue()","423":"MapSubjectTest::::containsAtLeastWithNullValue()","425":"MapSubjectTest::::containsAtLeastEmpty()","426":"MapSubjectTest::::containsAtLeastEmpty()","427":"MapSubjectTest::::containsAtLeastEmpty()","428":"MapSubjectTest::::containsAtLeastEmpty()","429":"MapSubjectTest::::containsAtLeastEmpty()","430":"MapSubjectTest::::containsAtLeastEmpty()","431":"MapSubjectTest::::containsAtLeastEmpty()","433":"MapSubjectTest::::containsAtLeastOneEntry()","434":"MapSubjectTest::::containsAtLeastOneEntry()","435":"MapSubjectTest::::containsAtLeastOneEntry()","436":"MapSubjectTest::::containsAtLeastOneEntry()","437":"MapSubjectTest::::containsAtLeastOneEntry()","438":"MapSubjectTest::::containsAtLeastOneEntry()","439":"MapSubjectTest::::containsAtLeastOneEntry()","440":"MapSubjectTest::::containsAtLeastOneEntry()","441":"MapSubjectTest::::containsAtLeastOneEntry()","443":"MapSubjectTest::::containsAtLeastMultipleEntries()","444":"MapSubjectTest::::containsAtLeastMultipleEntries()","445":"MapSubjectTest::::containsAtLeastMultipleEntries()","446":"MapSubjectTest::::containsAtLeastMultipleEntries()","447":"MapSubjectTest::::containsAtLeastMultipleEntries()","448":"MapSubjectTest::::containsAtLeastMultipleEntries()","449":"MapSubjectTest::::containsAtLeastMultipleEntries()","450":"MapSubjectTest::::containsAtLeastMultipleEntries()","451":"MapSubjectTest::::containsAtLeastMultipleEntries()","453":"MapSubjectTest::::containsAtLeastDuplicateKeys()","454":"MapSubjectTest::::containsAtLeastDuplicateKeys()","455":"MapSubjectTest::::containsAtLeastDuplicateKeys()","456":"MapSubjectTest::::containsAtLeastDuplicateKeys()","457":"MapSubjectTest::::containsAtLeastDuplicateKeys()","458":"MapSubjectTest::::containsAtLeastDuplicateKeys()","459":"MapSubjectTest::::containsAtLeastDuplicateKeys()","460":"MapSubjectTest::::containsAtLeastDuplicateKeys()","461":"MapSubjectTest::::containsAtLeastDuplicateKeys()","462":"MapSubjectTest::::containsAtLeastDuplicateKeys()","463":"MapSubjectTest::::containsAtLeastDuplicateKeys()","464":"MapSubjectTest::::containsAtLeastDuplicateKeys()","465":"MapSubjectTest::::containsAtLeastDuplicateKeys()","467":"MapSubjectTest::::containsAtLeastMultipleDuplicateKeys()","468":"MapSubjectTest::::containsAtLeastMultipleDuplicateKeys()","469":"MapSubjectTest::::containsAtLeastMultipleDuplicateKeys()","470":"MapSubjectTest::::containsAtLeastMultipleDuplicateKeys()","471":"MapSubjectTest::::containsAtLeastMultipleDuplicateKeys()","472":"MapSubjectTest::::containsAtLeastMultipleDuplicateKeys()","473":"MapSubjectTest::::containsAtLeastMultipleDuplicateKeys()","474":"MapSubjectTest::::containsAtLeastMultipleDuplicateKeys()","475":"MapSubjectTest::::containsAtLeastMultipleDuplicateKeys()","476":"MapSubjectTest::::containsAtLeastMultipleDuplicateKeys()","477":"MapSubjectTest::::containsAtLeastMultipleDuplicateKeys()","478":"MapSubjectTest::::containsAtLeastMultipleDuplicateKeys()","479":"MapSubjectTest::::containsAtLeastMultipleDuplicateKeys()","481":"MapSubjectTest::::containsAtLeastMissingKey()","482":"MapSubjectTest::::containsAtLeastMissingKey()","483":"MapSubjectTest::::containsAtLeastMissingKey()","484":"MapSubjectTest::::containsAtLeastMissingKey()","485":"MapSubjectTest::::containsAtLeastMissingKey()","486":"MapSubjectTest::::containsAtLeastMissingKey()","487":"MapSubjectTest::::containsAtLeastMissingKey()","488":"MapSubjectTest::::containsAtLeastMissingKey()","489":"MapSubjectTest::::containsAtLeastMissingKey()","490":"MapSubjectTest::::containsAtLeastMissingKey()","491":"MapSubjectTest::::containsAtLeastMissingKey()","492":"MapSubjectTest::::containsAtLeastMissingKey()","493":"MapSubjectTest::::containsAtLeastMissingKey()","494":"MapSubjectTest::::containsAtLeastMissingKey()","495":"MapSubjectTest::::containsAtLeastMissingKey()","497":"MapSubjectTest::::containsAtLeastWrongValue()","498":"MapSubjectTest::::containsAtLeastWrongValue()","499":"MapSubjectTest::::containsAtLeastWrongValue()","500":"MapSubjectTest::::containsAtLeastWrongValue()","501":"MapSubjectTest::::containsAtLeastWrongValue()","502":"MapSubjectTest::::containsAtLeastWrongValue()","503":"MapSubjectTest::::containsAtLeastWrongValue()","504":"MapSubjectTest::::containsAtLeastWrongValue()","505":"MapSubjectTest::::containsAtLeastWrongValue()","506":"MapSubjectTest::::containsAtLeastWrongValue()","507":"MapSubjectTest::::containsAtLeastWrongValue()","508":"MapSubjectTest::::containsAtLeastWrongValue()","509":"MapSubjectTest::::containsAtLeastWrongValue()","510":"MapSubjectTest::::containsAtLeastWrongValue()","511":"MapSubjectTest::::containsAtLeastWrongValue()","512":"MapSubjectTest::::containsAtLeastWrongValue()","514":"MapSubjectTest::::containsAtLeastWrongValueWithNull()","515":"MapSubjectTest::::containsAtLeastWrongValueWithNull()","516":"MapSubjectTest::::containsAtLeastWrongValueWithNull()","517":"MapSubjectTest::::containsAtLeastWrongValueWithNull()","518":"MapSubjectTest::::containsAtLeastWrongValueWithNull()","519":"MapSubjectTest::::containsAtLeastWrongValueWithNull()","520":"MapSubjectTest::::containsAtLeastWrongValueWithNull()","521":"MapSubjectTest::::containsAtLeastWrongValueWithNull()","522":"MapSubjectTest::::containsAtLeastWrongValueWithNull()","523":"MapSubjectTest::::containsAtLeastWrongValueWithNull()","524":"MapSubjectTest::::containsAtLeastWrongValueWithNull()","525":"MapSubjectTest::::containsAtLeastWrongValueWithNull()","526":"MapSubjectTest::::containsAtLeastWrongValueWithNull()","527":"MapSubjectTest::::containsAtLeastWrongValueWithNull()","528":"MapSubjectTest::::containsAtLeastWrongValueWithNull()","529":"MapSubjectTest::::containsAtLeastWrongValueWithNull()","530":"MapSubjectTest::::containsAtLeastWrongValueWithNull()","532":"MapSubjectTest::::containsAtLeastExtraKeyAndMissingKeyAndWrongValue()","533":"MapSubjectTest::::containsAtLeastExtraKeyAndMissingKeyAndWrongValue()","534":"MapSubjectTest::::containsAtLeastExtraKeyAndMissingKeyAndWrongValue()","535":"MapSubjectTest::::containsAtLeastExtraKeyAndMissingKeyAndWrongValue()","536":"MapSubjectTest::::containsAtLeastExtraKeyAndMissingKeyAndWrongValue()","537":"MapSubjectTest::::containsAtLeastExtraKeyAndMissingKeyAndWrongValue()","538":"MapSubjectTest::::containsAtLeastExtraKeyAndMissingKeyAndWrongValue()","539":"MapSubjectTest::::containsAtLeastExtraKeyAndMissingKeyAndWrongValue()","540":"MapSubjectTest::::containsAtLeastExtraKeyAndMissingKeyAndWrongValue()","541":"MapSubjectTest::::containsAtLeastExtraKeyAndMissingKeyAndWrongValue()","542":"MapSubjectTest::::containsAtLeastExtraKeyAndMissingKeyAndWrongValue()","543":"MapSubjectTest::::containsAtLeastExtraKeyAndMissingKeyAndWrongValue()","544":"MapSubjectTest::::containsAtLeastExtraKeyAndMissingKeyAndWrongValue()","545":"MapSubjectTest::::containsAtLeastExtraKeyAndMissingKeyAndWrongValue()","546":"MapSubjectTest::::containsAtLeastExtraKeyAndMissingKeyAndWrongValue()","547":"MapSubjectTest::::containsAtLeastExtraKeyAndMissingKeyAndWrongValue()","548":"MapSubjectTest::::containsAtLeastExtraKeyAndMissingKeyAndWrongValue()","549":"MapSubjectTest::::containsAtLeastExtraKeyAndMissingKeyAndWrongValue()","550":"MapSubjectTest::::containsAtLeastExtraKeyAndMissingKeyAndWrongValue()","551":"MapSubjectTest::::containsAtLeastExtraKeyAndMissingKeyAndWrongValue()","552":"MapSubjectTest::::containsAtLeastExtraKeyAndMissingKeyAndWrongValue()","554":"MapSubjectTest::::containsAtLeastNotInOrder()","555":"MapSubjectTest::::containsAtLeastNotInOrder()","556":"MapSubjectTest::::containsAtLeastNotInOrder()","557":"MapSubjectTest::::containsAtLeastNotInOrder()","558":"MapSubjectTest::::containsAtLeastNotInOrder()","559":"MapSubjectTest::::containsAtLeastNotInOrder()","560":"MapSubjectTest::::containsAtLeastNotInOrder()","561":"MapSubjectTest::::containsAtLeastNotInOrder()","562":"MapSubjectTest::::containsAtLeastNotInOrder()","563":"MapSubjectTest::::containsAtLeastNotInOrder()","564":"MapSubjectTest::::containsAtLeastNotInOrder()","565":"MapSubjectTest::::containsAtLeastNotInOrder()","566":"MapSubjectTest::::containsAtLeastNotInOrder()","568":"MapSubjectTest::::containsAtLeastBadNumberOfArgs()","569":"MapSubjectTest::::containsAtLeastBadNumberOfArgs()","570":"MapSubjectTest::::containsAtLeastBadNumberOfArgs()","571":"MapSubjectTest::::containsAtLeastBadNumberOfArgs()","572":"MapSubjectTest::::containsAtLeastBadNumberOfArgs()","573":"MapSubjectTest::::containsAtLeastBadNumberOfArgs()","574":"MapSubjectTest::::containsAtLeastBadNumberOfArgs()","575":"MapSubjectTest::::containsAtLeastBadNumberOfArgs()","576":"MapSubjectTest::::containsAtLeastBadNumberOfArgs()","577":"MapSubjectTest::::containsAtLeastBadNumberOfArgs()","578":"MapSubjectTest::::containsAtLeastBadNumberOfArgs()","579":"MapSubjectTest::::containsAtLeastBadNumberOfArgs()","580":"MapSubjectTest::::containsAtLeastBadNumberOfArgs()","581":"MapSubjectTest::::containsAtLeastBadNumberOfArgs()","582":"MapSubjectTest::::containsAtLeastBadNumberOfArgs()","583":"MapSubjectTest::::containsAtLeastBadNumberOfArgs()","584":"MapSubjectTest::::containsAtLeastBadNumberOfArgs()","585":"MapSubjectTest::::containsAtLeastBadNumberOfArgs()","587":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForValues()","588":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForValues()","589":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForValues()","590":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForValues()","591":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForValues()","592":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForValues()","593":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForValues()","594":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForValues()","595":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForValues()","596":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForValues()","597":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForValues()","598":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForValues()","599":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForValues()","600":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForValues()","601":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForValues()","602":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForValues()","603":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForValues()","604":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForValues()","605":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForValues()","606":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForValues()","607":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForValues()","608":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForValues()","610":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForKeys()","611":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForKeys()","612":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForKeys()","613":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForKeys()","614":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForKeys()","615":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForKeys()","616":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForKeys()","617":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForKeys()","618":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForKeys()","619":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForKeys()","620":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForKeys()","621":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForKeys()","622":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForKeys()","623":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForKeys()","624":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForKeys()","625":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForKeys()","626":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForKeys()","627":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForKeys()","628":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForKeys()","629":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForKeys()","630":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForKeys()","631":"MapSubjectTest::::containsAtLeastWrongValue_sameToStringForKeys()","633":"MapSubjectTest::::containsAtLeastExtraKeyAndMissingKey_failsWithSameToStringForKeys()","634":"MapSubjectTest::::containsAtLeastExtraKeyAndMissingKey_failsWithSameToStringForKeys()","635":"MapSubjectTest::::containsAtLeastExtraKeyAndMissingKey_failsWithSameToStringForKeys()","636":"MapSubjectTest::::containsAtLeastExtraKeyAndMissingKey_failsWithSameToStringForKeys()","637":"MapSubjectTest::::containsAtLeastExtraKeyAndMissingKey_failsWithSameToStringForKeys()","638":"MapSubjectTest::::containsAtLeastExtraKeyAndMissingKey_failsWithSameToStringForKeys()","639":"MapSubjectTest::::containsAtLeastExtraKeyAndMissingKey_failsWithSameToStringForKeys()","640":"MapSubjectTest::::containsAtLeastExtraKeyAndMissingKey_failsWithSameToStringForKeys()","641":"MapSubjectTest::::containsAtLeastExtraKeyAndMissingKey_failsWithSameToStringForKeys()","642":"MapSubjectTest::::containsAtLeastExtraKeyAndMissingKey_failsWithSameToStringForKeys()","643":"MapSubjectTest::::containsAtLeastExtraKeyAndMissingKey_failsWithSameToStringForKeys()","644":"MapSubjectTest::::containsAtLeastExtraKeyAndMissingKey_failsWithSameToStringForKeys()","645":"MapSubjectTest::::containsAtLeastExtraKeyAndMissingKey_failsWithSameToStringForKeys()","646":"MapSubjectTest::::containsAtLeastExtraKeyAndMissingKey_failsWithSameToStringForKeys()","648":"MapSubjectTest::::isEqualToPass()","649":"MapSubjectTest::::isEqualToPass()","650":"MapSubjectTest::::isEqualToPass()","651":"MapSubjectTest::::isEqualToPass()","652":"MapSubjectTest::::isEqualToPass()","653":"MapSubjectTest::::isEqualToPass()","654":"MapSubjectTest::::isEqualToPass()","656":"MapSubjectTest::::isEqualToFailureExtraMissingAndDiffering()","657":"MapSubjectTest::::isEqualToFailureExtraMissingAndDiffering()","658":"MapSubjectTest::::isEqualToFailureExtraMissingAndDiffering()","659":"MapSubjectTest::::isEqualToFailureExtraMissingAndDiffering()","660":"MapSubjectTest::::isEqualToFailureExtraMissingAndDiffering()","661":"MapSubjectTest::::isEqualToFailureExtraMissingAndDiffering()","662":"MapSubjectTest::::isEqualToFailureExtraMissingAndDiffering()","663":"MapSubjectTest::::isEqualToFailureExtraMissingAndDiffering()","664":"MapSubjectTest::::isEqualToFailureExtraMissingAndDiffering()","665":"MapSubjectTest::::isEqualToFailureExtraMissingAndDiffering()","666":"MapSubjectTest::::isEqualToFailureExtraMissingAndDiffering()","667":"MapSubjectTest::::isEqualToFailureExtraMissingAndDiffering()","668":"MapSubjectTest::::isEqualToFailureExtraMissingAndDiffering()","669":"MapSubjectTest::::isEqualToFailureExtraMissingAndDiffering()","670":"MapSubjectTest::::isEqualToFailureExtraMissingAndDiffering()","671":"MapSubjectTest::::isEqualToFailureExtraMissingAndDiffering()","672":"MapSubjectTest::::isEqualToFailureExtraMissingAndDiffering()","673":"MapSubjectTest::::isEqualToFailureExtraMissingAndDiffering()","674":"MapSubjectTest::::isEqualToFailureExtraMissingAndDiffering()","675":"MapSubjectTest::::isEqualToFailureExtraMissingAndDiffering()","676":"MapSubjectTest::::isEqualToFailureExtraMissingAndDiffering()","677":"MapSubjectTest::::isEqualToFailureExtraMissingAndDiffering()","678":"MapSubjectTest::::isEqualToFailureExtraMissingAndDiffering()","679":"MapSubjectTest::::isEqualToFailureExtraMissingAndDiffering()","680":"MapSubjectTest::::isEqualToFailureExtraMissingAndDiffering()","681":"MapSubjectTest::::isEqualToFailureExtraMissingAndDiffering()","682":"MapSubjectTest::::isEqualToFailureExtraMissingAndDiffering()","683":"MapSubjectTest::::isEqualToFailureExtraMissingAndDiffering()","684":"MapSubjectTest::::isEqualToFailureExtraMissingAndDiffering()","685":"MapSubjectTest::::isEqualToFailureExtraMissingAndDiffering()","687":"MapSubjectTest::::isEqualToFailureDiffering()","688":"MapSubjectTest::::isEqualToFailureDiffering()","689":"MapSubjectTest::::isEqualToFailureDiffering()","690":"MapSubjectTest::::isEqualToFailureDiffering()","691":"MapSubjectTest::::isEqualToFailureDiffering()","692":"MapSubjectTest::::isEqualToFailureDiffering()","693":"MapSubjectTest::::isEqualToFailureDiffering()","694":"MapSubjectTest::::isEqualToFailureDiffering()","695":"MapSubjectTest::::isEqualToFailureDiffering()","696":"MapSubjectTest::::isEqualToFailureDiffering()","697":"MapSubjectTest::::isEqualToFailureDiffering()","698":"MapSubjectTest::::isEqualToFailureDiffering()","699":"MapSubjectTest::::isEqualToFailureDiffering()","700":"MapSubjectTest::::isEqualToFailureDiffering()","701":"MapSubjectTest::::isEqualToFailureDiffering()","702":"MapSubjectTest::::isEqualToFailureDiffering()","703":"MapSubjectTest::::isEqualToFailureDiffering()","704":"MapSubjectTest::::isEqualToFailureDiffering()","706":"MapSubjectTest::::isEqualToFailureExtra()","707":"MapSubjectTest::::isEqualToFailureExtra()","708":"MapSubjectTest::::isEqualToFailureExtra()","709":"MapSubjectTest::::isEqualToFailureExtra()","710":"MapSubjectTest::::isEqualToFailureExtra()","711":"MapSubjectTest::::isEqualToFailureExtra()","712":"MapSubjectTest::::isEqualToFailureExtra()","713":"MapSubjectTest::::isEqualToFailureExtra()","714":"MapSubjectTest::::isEqualToFailureExtra()","715":"MapSubjectTest::::isEqualToFailureExtra()","716":"MapSubjectTest::::isEqualToFailureExtra()","718":"MapSubjectTest::::isEqualToFailureMissing()","719":"MapSubjectTest::::isEqualToFailureMissing()","720":"MapSubjectTest::::isEqualToFailureMissing()","721":"MapSubjectTest::::isEqualToFailureMissing()","722":"MapSubjectTest::::isEqualToFailureMissing()","723":"MapSubjectTest::::isEqualToFailureMissing()","724":"MapSubjectTest::::isEqualToFailureMissing()","725":"MapSubjectTest::::isEqualToFailureMissing()","726":"MapSubjectTest::::isEqualToFailureMissing()","727":"MapSubjectTest::::isEqualToFailureMissing()","729":"MapSubjectTest::::isEqualToFailureExtraAndMissing()","730":"MapSubjectTest::::isEqualToFailureExtraAndMissing()","731":"MapSubjectTest::::isEqualToFailureExtraAndMissing()","732":"MapSubjectTest::::isEqualToFailureExtraAndMissing()","733":"MapSubjectTest::::isEqualToFailureExtraAndMissing()","734":"MapSubjectTest::::isEqualToFailureExtraAndMissing()","735":"MapSubjectTest::::isEqualToFailureExtraAndMissing()","736":"MapSubjectTest::::isEqualToFailureExtraAndMissing()","737":"MapSubjectTest::::isEqualToFailureExtraAndMissing()","738":"MapSubjectTest::::isEqualToFailureExtraAndMissing()","739":"MapSubjectTest::::isEqualToFailureExtraAndMissing()","740":"MapSubjectTest::::isEqualToFailureExtraAndMissing()","741":"MapSubjectTest::::isEqualToFailureExtraAndMissing()","742":"MapSubjectTest::::isEqualToFailureExtraAndMissing()","743":"MapSubjectTest::::isEqualToFailureExtraAndMissing()","744":"MapSubjectTest::::isEqualToFailureExtraAndMissing()","745":"MapSubjectTest::::isEqualToFailureExtraAndMissing()","746":"MapSubjectTest::::isEqualToFailureExtraAndMissing()","747":"MapSubjectTest::::isEqualToFailureExtraAndMissing()","748":"MapSubjectTest::::isEqualToFailureExtraAndMissing()","749":"MapSubjectTest::::isEqualToFailureExtraAndMissing()","751":"MapSubjectTest::::isEqualToFailureDiffering_sameToString()","752":"MapSubjectTest::::isEqualToFailureDiffering_sameToString()","753":"MapSubjectTest::::isEqualToFailureDiffering_sameToString()","754":"MapSubjectTest::::isEqualToFailureDiffering_sameToString()","755":"MapSubjectTest::::isEqualToFailureDiffering_sameToString()","756":"MapSubjectTest::::isEqualToFailureDiffering_sameToString()","757":"MapSubjectTest::::isEqualToFailureDiffering_sameToString()","758":"MapSubjectTest::::isEqualToFailureDiffering_sameToString()","759":"MapSubjectTest::::isEqualToFailureDiffering_sameToString()","760":"MapSubjectTest::::isEqualToFailureDiffering_sameToString()","761":"MapSubjectTest::::isEqualToFailureDiffering_sameToString()","762":"MapSubjectTest::::isEqualToFailureDiffering_sameToString()","763":"MapSubjectTest::::isEqualToFailureDiffering_sameToString()","764":"MapSubjectTest::::isEqualToFailureDiffering_sameToString()","765":"MapSubjectTest::::isEqualToFailureDiffering_sameToString()","766":"MapSubjectTest::::isEqualToFailureDiffering_sameToString()","767":"MapSubjectTest::::isEqualToFailureDiffering_sameToString()","768":"MapSubjectTest::::isEqualToFailureDiffering_sameToString()","769":"MapSubjectTest::::isEqualToFailureDiffering_sameToString()","771":"MapSubjectTest::::isEqualToNonMap()","772":"MapSubjectTest::::isEqualToNonMap()","773":"MapSubjectTest::::isEqualToNonMap()","774":"MapSubjectTest::::isEqualToNonMap()","775":"MapSubjectTest::::isEqualToNonMap()","776":"MapSubjectTest::::isEqualToNonMap()","778":"MapSubjectTest::::isEqualToNotConsistentWithEquals()","779":"MapSubjectTest::::isEqualToNotConsistentWithEquals()","780":"MapSubjectTest::::isEqualToNotConsistentWithEquals()","781":"MapSubjectTest::::isEqualToNotConsistentWithEquals()","782":"MapSubjectTest::::isEqualToNotConsistentWithEquals()","783":"MapSubjectTest::::isEqualToNotConsistentWithEquals()","784":"MapSubjectTest::::isEqualToNotConsistentWithEquals()","785":"MapSubjectTest::::isEqualToNotConsistentWithEquals()","786":"MapSubjectTest::::isEqualToNotConsistentWithEquals()","787":"MapSubjectTest::::isEqualToNotConsistentWithEquals()","788":"MapSubjectTest::::isEqualToNotConsistentWithEquals()","789":"MapSubjectTest::::isEqualToNotConsistentWithEquals()","791":"MapSubjectTest::::isEqualToNotConsistentWithEquals_failure()","792":"MapSubjectTest::::isEqualToNotConsistentWithEquals_failure()","793":"MapSubjectTest::::isEqualToNotConsistentWithEquals_failure()","794":"MapSubjectTest::::isEqualToNotConsistentWithEquals_failure()","795":"MapSubjectTest::::isEqualToNotConsistentWithEquals_failure()","796":"MapSubjectTest::::isEqualToNotConsistentWithEquals_failure()","797":"MapSubjectTest::::isEqualToNotConsistentWithEquals_failure()","798":"MapSubjectTest::::isEqualToNotConsistentWithEquals_failure()","799":"MapSubjectTest::::isEqualToNotConsistentWithEquals_failure()","800":"MapSubjectTest::::isEqualToNotConsistentWithEquals_failure()","802":"MapSubjectTest::::isEqualToActualNullOtherMap()","803":"MapSubjectTest::::isEqualToActualNullOtherMap()","804":"MapSubjectTest::::isEqualToActualNullOtherMap()","805":"MapSubjectTest::::isEqualToActualNullOtherMap()","807":"MapSubjectTest::::isEqualToActualMapOtherNull()","808":"MapSubjectTest::::isEqualToActualMapOtherNull()","809":"MapSubjectTest::::isEqualToActualMapOtherNull()","810":"MapSubjectTest::::isEqualToActualMapOtherNull()","812":"MapSubjectTest::::isNotEqualTo()","813":"MapSubjectTest::::isNotEqualTo()","814":"MapSubjectTest::::isNotEqualTo()","815":"MapSubjectTest::::isNotEqualTo()","816":"MapSubjectTest::::isNotEqualTo()","817":"MapSubjectTest::::isNotEqualTo()","818":"MapSubjectTest::::isNotEqualTo()","820":"MapSubjectTest::::isEmpty()","821":"MapSubjectTest::::isEmpty()","822":"MapSubjectTest::::isEmpty()","823":"MapSubjectTest::::isEmpty()","824":"MapSubjectTest::::isEmpty()","826":"MapSubjectTest::::isEmptyWithFailure()","827":"MapSubjectTest::::isEmptyWithFailure()","828":"MapSubjectTest::::isEmptyWithFailure()","829":"MapSubjectTest::::isEmptyWithFailure()","830":"MapSubjectTest::::isEmptyWithFailure()","831":"MapSubjectTest::::isEmptyWithFailure()","833":"MapSubjectTest::::isNotEmpty()","834":"MapSubjectTest::::isNotEmpty()","835":"MapSubjectTest::::isNotEmpty()","836":"MapSubjectTest::::isNotEmpty()","837":"MapSubjectTest::::isNotEmpty()","839":"MapSubjectTest::::isNotEmptyWithFailure()","840":"MapSubjectTest::::isNotEmptyWithFailure()","841":"MapSubjectTest::::isNotEmptyWithFailure()","842":"MapSubjectTest::::isNotEmptyWithFailure()","843":"MapSubjectTest::::isNotEmptyWithFailure()","844":"MapSubjectTest::::isNotEmptyWithFailure()","846":"MapSubjectTest::::hasSize()","847":"MapSubjectTest::::hasSize()","848":"MapSubjectTest::::hasSize()","849":"MapSubjectTest::::hasSize()","851":"MapSubjectTest::::hasSizeZero()","852":"MapSubjectTest::::hasSizeZero()","853":"MapSubjectTest::::hasSizeZero()","854":"MapSubjectTest::::hasSizeZero()","856":"MapSubjectTest::::hasSizeNegative()","857":"MapSubjectTest::::hasSizeNegative()","858":"MapSubjectTest::::hasSizeNegative()","859":"MapSubjectTest::::hasSizeNegative()","860":"MapSubjectTest::::hasSizeNegative()","861":"MapSubjectTest::::hasSizeNegative()","862":"MapSubjectTest::::hasSizeNegative()","863":"MapSubjectTest::::hasSizeNegative()","865":"MapSubjectTest::::containsKey()","866":"MapSubjectTest::::containsKey()","867":"MapSubjectTest::::containsKey()","868":"MapSubjectTest::::containsKey()","869":"MapSubjectTest::::containsKey()","871":"MapSubjectTest::::containsKeyFailure()","872":"MapSubjectTest::::containsKeyFailure()","873":"MapSubjectTest::::containsKeyFailure()","874":"MapSubjectTest::::containsKeyFailure()","875":"MapSubjectTest::::containsKeyFailure()","876":"MapSubjectTest::::containsKeyFailure()","877":"MapSubjectTest::::containsKeyFailure()","878":"MapSubjectTest::::containsKeyFailure()","879":"MapSubjectTest::::containsKeyFailure()","881":"MapSubjectTest::::containsKeyNullFailure()","882":"MapSubjectTest::::containsKeyNullFailure()","883":"MapSubjectTest::::containsKeyNullFailure()","884":"MapSubjectTest::::containsKeyNullFailure()","885":"MapSubjectTest::::containsKeyNullFailure()","886":"MapSubjectTest::::containsKeyNullFailure()","887":"MapSubjectTest::::containsKeyNullFailure()","888":"MapSubjectTest::::containsKeyNullFailure()","889":"MapSubjectTest::::containsKeyNullFailure()","891":"MapSubjectTest::::containsKey_failsWithSameToString()","892":"MapSubjectTest::::containsKey_failsWithSameToString()","893":"MapSubjectTest::::containsKey_failsWithSameToString()","894":"MapSubjectTest::::containsKey_failsWithSameToString()","895":"MapSubjectTest::::containsKey_failsWithSameToString()","896":"MapSubjectTest::::containsKey_failsWithSameToString()","897":"MapSubjectTest::::containsKey_failsWithSameToString()","898":"MapSubjectTest::::containsKey_failsWithSameToString()","899":"MapSubjectTest::::containsKey_failsWithSameToString()","900":"MapSubjectTest::::containsKey_failsWithSameToString()","901":"MapSubjectTest::::containsKey_failsWithSameToString()","902":"MapSubjectTest::::containsKey_failsWithSameToString()","903":"MapSubjectTest::::containsKey_failsWithSameToString()","904":"MapSubjectTest::::containsKey_failsWithSameToString()","905":"MapSubjectTest::::containsKey_failsWithSameToString()","907":"MapSubjectTest::::containsKey_failsWithNullStringAndNull()","908":"MapSubjectTest::::containsKey_failsWithNullStringAndNull()","909":"MapSubjectTest::::containsKey_failsWithNullStringAndNull()","910":"MapSubjectTest::::containsKey_failsWithNullStringAndNull()","911":"MapSubjectTest::::containsKey_failsWithNullStringAndNull()","912":"MapSubjectTest::::containsKey_failsWithNullStringAndNull()","913":"MapSubjectTest::::containsKey_failsWithNullStringAndNull()","914":"MapSubjectTest::::containsKey_failsWithNullStringAndNull()","915":"MapSubjectTest::::containsKey_failsWithNullStringAndNull()","916":"MapSubjectTest::::containsKey_failsWithNullStringAndNull()","917":"MapSubjectTest::::containsKey_failsWithNullStringAndNull()","918":"MapSubjectTest::::containsKey_failsWithNullStringAndNull()","919":"MapSubjectTest::::containsKey_failsWithNullStringAndNull()","920":"MapSubjectTest::::containsKey_failsWithNullStringAndNull()","921":"MapSubjectTest::::containsKey_failsWithNullStringAndNull()","922":"MapSubjectTest::::containsKey_failsWithNullStringAndNull()","923":"MapSubjectTest::::containsKey_failsWithNullStringAndNull()","925":"MapSubjectTest::::containsNullKey()","926":"MapSubjectTest::::containsNullKey()","927":"MapSubjectTest::::containsNullKey()","928":"MapSubjectTest::::containsNullKey()","929":"MapSubjectTest::::containsNullKey()","930":"MapSubjectTest::::containsNullKey()","932":"MapSubjectTest::::doesNotContainKey()","933":"MapSubjectTest::::doesNotContainKey()","934":"MapSubjectTest::::doesNotContainKey()","935":"MapSubjectTest::::doesNotContainKey()","936":"MapSubjectTest::::doesNotContainKey()","937":"MapSubjectTest::::doesNotContainKey()","939":"MapSubjectTest::::doesNotContainKeyFailure()","940":"MapSubjectTest::::doesNotContainKeyFailure()","941":"MapSubjectTest::::doesNotContainKeyFailure()","942":"MapSubjectTest::::doesNotContainKeyFailure()","943":"MapSubjectTest::::doesNotContainKeyFailure()","944":"MapSubjectTest::::doesNotContainKeyFailure()","945":"MapSubjectTest::::doesNotContainKeyFailure()","946":"MapSubjectTest::::doesNotContainKeyFailure()","947":"MapSubjectTest::::doesNotContainKeyFailure()","949":"MapSubjectTest::::doesNotContainNullKey()","950":"MapSubjectTest::::doesNotContainNullKey()","951":"MapSubjectTest::::doesNotContainNullKey()","952":"MapSubjectTest::::doesNotContainNullKey()","953":"MapSubjectTest::::doesNotContainNullKey()","954":"MapSubjectTest::::doesNotContainNullKey()","955":"MapSubjectTest::::doesNotContainNullKey()","956":"MapSubjectTest::::doesNotContainNullKey()","957":"MapSubjectTest::::doesNotContainNullKey()","958":"MapSubjectTest::::doesNotContainNullKey()","960":"MapSubjectTest::::containsEntry()","961":"MapSubjectTest::::containsEntry()","962":"MapSubjectTest::::containsEntry()","963":"MapSubjectTest::::containsEntry()","964":"MapSubjectTest::::containsEntry()","966":"MapSubjectTest::::containsEntryFailure()","967":"MapSubjectTest::::containsEntryFailure()","968":"MapSubjectTest::::containsEntryFailure()","969":"MapSubjectTest::::containsEntryFailure()","970":"MapSubjectTest::::containsEntryFailure()","971":"MapSubjectTest::::containsEntryFailure()","972":"MapSubjectTest::::containsEntryFailure()","973":"MapSubjectTest::::containsEntryFailure()","975":"MapSubjectTest::::containsEntry_failsWithSameToStringOfKey()","976":"MapSubjectTest::::containsEntry_failsWithSameToStringOfKey()","977":"MapSubjectTest::::containsEntry_failsWithSameToStringOfKey()","978":"MapSubjectTest::::containsEntry_failsWithSameToStringOfKey()","979":"MapSubjectTest::::containsEntry_failsWithSameToStringOfKey()","980":"MapSubjectTest::::containsEntry_failsWithSameToStringOfKey()","981":"MapSubjectTest::::containsEntry_failsWithSameToStringOfKey()","982":"MapSubjectTest::::containsEntry_failsWithSameToStringOfKey()","983":"MapSubjectTest::::containsEntry_failsWithSameToStringOfKey()","984":"MapSubjectTest::::containsEntry_failsWithSameToStringOfKey()","985":"MapSubjectTest::::containsEntry_failsWithSameToStringOfKey()","986":"MapSubjectTest::::containsEntry_failsWithSameToStringOfKey()","987":"MapSubjectTest::::containsEntry_failsWithSameToStringOfKey()","989":"MapSubjectTest::::containsEntry_failsWithSameToStringOfValue()","990":"MapSubjectTest::::containsEntry_failsWithSameToStringOfValue()","991":"MapSubjectTest::::containsEntry_failsWithSameToStringOfValue()","992":"MapSubjectTest::::containsEntry_failsWithSameToStringOfValue()","993":"MapSubjectTest::::containsEntry_failsWithSameToStringOfValue()","994":"MapSubjectTest::::containsEntry_failsWithSameToStringOfValue()","995":"MapSubjectTest::::containsEntry_failsWithSameToStringOfValue()","996":"MapSubjectTest::::containsEntry_failsWithSameToStringOfValue()","997":"MapSubjectTest::::containsEntry_failsWithSameToStringOfValue()","998":"MapSubjectTest::::containsEntry_failsWithSameToStringOfValue()","999":"MapSubjectTest::::containsEntry_failsWithSameToStringOfValue()","1000":"MapSubjectTest::::containsEntry_failsWithSameToStringOfValue()","1001":"MapSubjectTest::::containsEntry_failsWithSameToStringOfValue()","1003":"MapSubjectTest::::containsNullKeyAndValue()","1004":"MapSubjectTest::::containsNullKeyAndValue()","1005":"MapSubjectTest::::containsNullKeyAndValue()","1006":"MapSubjectTest::::containsNullKeyAndValue()","1007":"MapSubjectTest::::containsNullKeyAndValue()","1008":"MapSubjectTest::::containsNullKeyAndValue()","1009":"MapSubjectTest::::containsNullKeyAndValue()","1010":"MapSubjectTest::::containsNullKeyAndValue()","1012":"MapSubjectTest::::containsNullEntry()","1013":"MapSubjectTest::::containsNullEntry()","1014":"MapSubjectTest::::containsNullEntry()","1015":"MapSubjectTest::::containsNullEntry()","1016":"MapSubjectTest::::containsNullEntry()","1017":"MapSubjectTest::::containsNullEntry()","1019":"MapSubjectTest::::containsNullEntryValue()","1020":"MapSubjectTest::::containsNullEntryValue()","1021":"MapSubjectTest::::containsNullEntryValue()","1022":"MapSubjectTest::::containsNullEntryValue()","1023":"MapSubjectTest::::containsNullEntryValue()","1024":"MapSubjectTest::::containsNullEntryValue()","1025":"MapSubjectTest::::containsNullEntryValue()","1026":"MapSubjectTest::::containsNullEntryValue()","1027":"MapSubjectTest::::containsNullEntryValue()","1028":"MapSubjectTest::::containsNullEntryValue()","1029":"MapSubjectTest::::containsNullEntryValue()","1030":"MapSubjectTest::::containsNullEntryValue()","1031":"MapSubjectTest::::containsNullEntryValue()","1036":"MapSubjectTest::::containsNullEntryKey()","1037":"MapSubjectTest::::containsNullEntryKey()","1038":"MapSubjectTest::::containsNullEntryKey()","1039":"MapSubjectTest::::containsNullEntryKey()","1040":"MapSubjectTest::::containsNullEntryKey()","1041":"MapSubjectTest::::containsNullEntryKey()","1042":"MapSubjectTest::::containsNullEntryKey()","1043":"MapSubjectTest::::containsNullEntryKey()","1044":"MapSubjectTest::::containsNullEntryKey()","1045":"MapSubjectTest::::containsNullEntryKey()","1046":"MapSubjectTest::::containsNullEntryKey()","1047":"MapSubjectTest::::containsNullEntryKey()","1048":"MapSubjectTest::::containsNullEntryKey()","1050":"MapSubjectTest::::containsExactly_bothExactAndToStringKeyMatches_showsExactKeyMatch()","1051":"MapSubjectTest::::containsExactly_bothExactAndToStringKeyMatches_showsExactKeyMatch()","1052":"MapSubjectTest::::containsExactly_bothExactAndToStringKeyMatches_showsExactKeyMatch()","1053":"MapSubjectTest::::containsExactly_bothExactAndToStringKeyMatches_showsExactKeyMatch()","1054":"MapSubjectTest::::containsExactly_bothExactAndToStringKeyMatches_showsExactKeyMatch()","1055":"MapSubjectTest::::containsExactly_bothExactAndToStringKeyMatches_showsExactKeyMatch()","1056":"MapSubjectTest::::containsExactly_bothExactAndToStringKeyMatches_showsExactKeyMatch()","1057":"MapSubjectTest::::containsExactly_bothExactAndToStringKeyMatches_showsExactKeyMatch()","1058":"MapSubjectTest::::containsExactly_bothExactAndToStringKeyMatches_showsExactKeyMatch()","1059":"MapSubjectTest::::containsExactly_bothExactAndToStringKeyMatches_showsExactKeyMatch()","1061":"MapSubjectTest::::doesNotContainEntry()","1062":"MapSubjectTest::::doesNotContainEntry()","1063":"MapSubjectTest::::doesNotContainEntry()","1064":"MapSubjectTest::::doesNotContainEntry()","1065":"MapSubjectTest::::doesNotContainEntry()","1066":"MapSubjectTest::::doesNotContainEntry()","1067":"MapSubjectTest::::doesNotContainEntry()","1068":"MapSubjectTest::::doesNotContainEntry()","1070":"MapSubjectTest::::doesNotContainEntryFailure()","1071":"MapSubjectTest::::doesNotContainEntryFailure()","1072":"MapSubjectTest::::doesNotContainEntryFailure()","1073":"MapSubjectTest::::doesNotContainEntryFailure()","1074":"MapSubjectTest::::doesNotContainEntryFailure()","1075":"MapSubjectTest::::doesNotContainEntryFailure()","1076":"MapSubjectTest::::doesNotContainEntryFailure()","1077":"MapSubjectTest::::doesNotContainEntryFailure()","1078":"MapSubjectTest::::doesNotContainEntryFailure()","1080":"MapSubjectTest::::doesNotContainNullEntry()","1081":"MapSubjectTest::::doesNotContainNullEntry()","1082":"MapSubjectTest::::doesNotContainNullEntry()","1083":"MapSubjectTest::::doesNotContainNullEntry()","1084":"MapSubjectTest::::doesNotContainNullEntry()","1085":"MapSubjectTest::::doesNotContainNullEntry()","1086":"MapSubjectTest::::doesNotContainNullEntry()","1088":"MapSubjectTest::::doesNotContainNullEntryFailure()","1089":"MapSubjectTest::::doesNotContainNullEntryFailure()","1090":"MapSubjectTest::::doesNotContainNullEntryFailure()","1091":"MapSubjectTest::::doesNotContainNullEntryFailure()","1092":"MapSubjectTest::::doesNotContainNullEntryFailure()","1093":"MapSubjectTest::::doesNotContainNullEntryFailure()","1094":"MapSubjectTest::::doesNotContainNullEntryFailure()","1095":"MapSubjectTest::::doesNotContainNullEntryFailure()","1096":"MapSubjectTest::::doesNotContainNullEntryFailure()","1097":"MapSubjectTest::::doesNotContainNullEntryFailure()","1099":"MapSubjectTest::::failMapContainsKey()","1100":"MapSubjectTest::::failMapContainsKey()","1101":"MapSubjectTest::::failMapContainsKey()","1102":"MapSubjectTest::::failMapContainsKey()","1103":"MapSubjectTest::::failMapContainsKey()","1104":"MapSubjectTest::::failMapContainsKey()","1105":"MapSubjectTest::::failMapContainsKey()","1106":"MapSubjectTest::::failMapContainsKey()","1107":"MapSubjectTest::::failMapContainsKey()","1109":"MapSubjectTest::::failMapContainsKeyWithNull()","1110":"MapSubjectTest::::failMapContainsKeyWithNull()","1111":"MapSubjectTest::::failMapContainsKeyWithNull()","1112":"MapSubjectTest::::failMapContainsKeyWithNull()","1113":"MapSubjectTest::::failMapContainsKeyWithNull()","1114":"MapSubjectTest::::failMapContainsKeyWithNull()","1115":"MapSubjectTest::::failMapContainsKeyWithNull()","1116":"MapSubjectTest::::failMapContainsKeyWithNull()","1117":"MapSubjectTest::::failMapContainsKeyWithNull()","1119":"MapSubjectTest::::failMapLacksKey()","1120":"MapSubjectTest::::failMapLacksKey()","1121":"MapSubjectTest::::failMapLacksKey()","1122":"MapSubjectTest::::failMapLacksKey()","1123":"MapSubjectTest::::failMapLacksKey()","1124":"MapSubjectTest::::failMapLacksKey()","1125":"MapSubjectTest::::failMapLacksKey()","1126":"MapSubjectTest::::failMapLacksKey()","1127":"MapSubjectTest::::failMapLacksKey()","1129":"MapSubjectTest::::containsKeyWithValue()","1130":"MapSubjectTest::::containsKeyWithValue()","1131":"MapSubjectTest::::containsKeyWithValue()","1132":"MapSubjectTest::::containsKeyWithValue()","1133":"MapSubjectTest::::containsKeyWithValue()","1135":"MapSubjectTest::::containsKeyWithNullValueNullExpected()","1136":"MapSubjectTest::::containsKeyWithNullValueNullExpected()","1137":"MapSubjectTest::::containsKeyWithNullValueNullExpected()","1138":"MapSubjectTest::::containsKeyWithNullValueNullExpected()","1139":"MapSubjectTest::::containsKeyWithNullValueNullExpected()","1140":"MapSubjectTest::::containsKeyWithNullValueNullExpected()","1142":"MapSubjectTest::::failMapContainsKeyWithValue()","1143":"MapSubjectTest::::failMapContainsKeyWithValue()","1144":"MapSubjectTest::::failMapContainsKeyWithValue()","1145":"MapSubjectTest::::failMapContainsKeyWithValue()","1146":"MapSubjectTest::::failMapContainsKeyWithValue()","1147":"MapSubjectTest::::failMapContainsKeyWithValue()","1148":"MapSubjectTest::::failMapContainsKeyWithValue()","1149":"MapSubjectTest::::failMapContainsKeyWithValue()","1150":"MapSubjectTest::::failMapContainsKeyWithValue()","1151":"MapSubjectTest::::failMapContainsKeyWithValue()","1152":"MapSubjectTest::::failMapContainsKeyWithValue()","1153":"MapSubjectTest::::failMapContainsKeyWithValue()","1155":"MapSubjectTest::::failMapContainsKeyWithNullValuePresentExpected()","1156":"MapSubjectTest::::failMapContainsKeyWithNullValuePresentExpected()","1157":"MapSubjectTest::::failMapContainsKeyWithNullValuePresentExpected()","1158":"MapSubjectTest::::failMapContainsKeyWithNullValuePresentExpected()","1159":"MapSubjectTest::::failMapContainsKeyWithNullValuePresentExpected()","1160":"MapSubjectTest::::failMapContainsKeyWithNullValuePresentExpected()","1161":"MapSubjectTest::::failMapContainsKeyWithNullValuePresentExpected()","1162":"MapSubjectTest::::failMapContainsKeyWithNullValuePresentExpected()","1163":"MapSubjectTest::::failMapContainsKeyWithNullValuePresentExpected()","1164":"MapSubjectTest::::failMapContainsKeyWithNullValuePresentExpected()","1165":"MapSubjectTest::::failMapContainsKeyWithNullValuePresentExpected()","1166":"MapSubjectTest::::failMapContainsKeyWithNullValuePresentExpected()","1167":"MapSubjectTest::::failMapContainsKeyWithNullValuePresentExpected()","1169":"MapSubjectTest::::failMapContainsKeyWithPresentValueNullExpected()","1170":"MapSubjectTest::::failMapContainsKeyWithPresentValueNullExpected()","1171":"MapSubjectTest::::failMapContainsKeyWithPresentValueNullExpected()","1172":"MapSubjectTest::::failMapContainsKeyWithPresentValueNullExpected()","1173":"MapSubjectTest::::failMapContainsKeyWithPresentValueNullExpected()","1174":"MapSubjectTest::::failMapContainsKeyWithPresentValueNullExpected()","1175":"MapSubjectTest::::failMapContainsKeyWithPresentValueNullExpected()","1176":"MapSubjectTest::::failMapContainsKeyWithPresentValueNullExpected()","1177":"MapSubjectTest::::failMapContainsKeyWithPresentValueNullExpected()","1178":"MapSubjectTest::::failMapContainsKeyWithPresentValueNullExpected()","1179":"MapSubjectTest::::failMapContainsKeyWithPresentValueNullExpected()","1180":"MapSubjectTest::::failMapContainsKeyWithPresentValueNullExpected()","1182":"MapSubjectTest::::comparingValuesUsing_containsEntry_success()","1183":"MapSubjectTest::::comparingValuesUsing_containsEntry_success()","1184":"MapSubjectTest::::comparingValuesUsing_containsEntry_success()","1185":"MapSubjectTest::::comparingValuesUsing_containsEntry_success()","1186":"MapSubjectTest::::comparingValuesUsing_containsEntry_success()","1187":"MapSubjectTest::::comparingValuesUsing_containsEntry_success()","1188":"MapSubjectTest::::comparingValuesUsing_containsEntry_success()","1190":"MapSubjectTest::::comparingValuesUsing_containsEntry_failsExpectedKeyHasWrongValue()","1191":"MapSubjectTest::::comparingValuesUsing_containsEntry_failsExpectedKeyHasWrongValue()","1192":"MapSubjectTest::::comparingValuesUsing_containsEntry_failsExpectedKeyHasWrongValue()","1193":"MapSubjectTest::::comparingValuesUsing_containsEntry_failsExpectedKeyHasWrongValue()","1194":"MapSubjectTest::::comparingValuesUsing_containsEntry_failsExpectedKeyHasWrongValue()","1195":"MapSubjectTest::::comparingValuesUsing_containsEntry_failsExpectedKeyHasWrongValue()","1196":"MapSubjectTest::::comparingValuesUsing_containsEntry_failsExpectedKeyHasWrongValue()","1197":"MapSubjectTest::::comparingValuesUsing_containsEntry_failsExpectedKeyHasWrongValue()","1198":"MapSubjectTest::::comparingValuesUsing_containsEntry_failsExpectedKeyHasWrongValue()","1199":"MapSubjectTest::::comparingValuesUsing_containsEntry_failsExpectedKeyHasWrongValue()","1200":"MapSubjectTest::::comparingValuesUsing_containsEntry_failsExpectedKeyHasWrongValue()","1201":"MapSubjectTest::::comparingValuesUsing_containsEntry_failsExpectedKeyHasWrongValue()","1202":"MapSubjectTest::::comparingValuesUsing_containsEntry_failsExpectedKeyHasWrongValue()","1204":"MapSubjectTest::::comparingValuesUsing_containsEntry_failsWrongKeyHasExpectedValue()","1205":"MapSubjectTest::::comparingValuesUsing_containsEntry_failsWrongKeyHasExpectedValue()","1206":"MapSubjectTest::::comparingValuesUsing_containsEntry_failsWrongKeyHasExpectedValue()","1207":"MapSubjectTest::::comparingValuesUsing_containsEntry_failsWrongKeyHasExpectedValue()","1208":"MapSubjectTest::::comparingValuesUsing_containsEntry_failsWrongKeyHasExpectedValue()","1209":"MapSubjectTest::::comparingValuesUsing_containsEntry_failsWrongKeyHasExpectedValue()","1210":"MapSubjectTest::::comparingValuesUsing_containsEntry_failsWrongKeyHasExpectedValue()","1211":"MapSubjectTest::::comparingValuesUsing_containsEntry_failsWrongKeyHasExpectedValue()","1212":"MapSubjectTest::::comparingValuesUsing_containsEntry_failsWrongKeyHasExpectedValue()","1213":"MapSubjectTest::::comparingValuesUsing_containsEntry_failsWrongKeyHasExpectedValue()","1214":"MapSubjectTest::::comparingValuesUsing_containsEntry_failsWrongKeyHasExpectedValue()","1215":"MapSubjectTest::::comparingValuesUsing_containsEntry_failsWrongKeyHasExpectedValue()","1216":"MapSubjectTest::::comparingValuesUsing_containsEntry_failsWrongKeyHasExpectedValue()","1217":"MapSubjectTest::::comparingValuesUsing_containsEntry_failsWrongKeyHasExpectedValue()","1218":"MapSubjectTest::::comparingValuesUsing_containsEntry_failsWrongKeyHasExpectedValue()","1220":"MapSubjectTest::::comparingValuesUsing_containsEntry_failsMissingExpectedKeyAndValue()","1221":"MapSubjectTest::::comparingValuesUsing_containsEntry_failsMissingExpectedKeyAndValue()","1222":"MapSubjectTest::::comparingValuesUsing_containsEntry_failsMissingExpectedKeyAndValue()","1223":"MapSubjectTest::::comparingValuesUsing_containsEntry_failsMissingExpectedKeyAndValue()","1224":"MapSubjectTest::::comparingValuesUsing_containsEntry_failsMissingExpectedKeyAndValue()","1225":"MapSubjectTest::::comparingValuesUsing_containsEntry_failsMissingExpectedKeyAndValue()","1226":"MapSubjectTest::::comparingValuesUsing_containsEntry_failsMissingExpectedKeyAndValue()","1227":"MapSubjectTest::::comparingValuesUsing_containsEntry_failsMissingExpectedKeyAndValue()","1228":"MapSubjectTest::::comparingValuesUsing_containsEntry_failsMissingExpectedKeyAndValue()","1230":"MapSubjectTest::::comparingValuesUsing_containsEntry_diffExpectedKeyHasWrongValue()","1231":"MapSubjectTest::::comparingValuesUsing_containsEntry_diffExpectedKeyHasWrongValue()","1232":"MapSubjectTest::::comparingValuesUsing_containsEntry_diffExpectedKeyHasWrongValue()","1233":"MapSubjectTest::::comparingValuesUsing_containsEntry_diffExpectedKeyHasWrongValue()","1234":"MapSubjectTest::::comparingValuesUsing_containsEntry_diffExpectedKeyHasWrongValue()","1235":"MapSubjectTest::::comparingValuesUsing_containsEntry_diffExpectedKeyHasWrongValue()","1236":"MapSubjectTest::::comparingValuesUsing_containsEntry_diffExpectedKeyHasWrongValue()","1237":"MapSubjectTest::::comparingValuesUsing_containsEntry_diffExpectedKeyHasWrongValue()","1238":"MapSubjectTest::::comparingValuesUsing_containsEntry_diffExpectedKeyHasWrongValue()","1239":"MapSubjectTest::::comparingValuesUsing_containsEntry_diffExpectedKeyHasWrongValue()","1240":"MapSubjectTest::::comparingValuesUsing_containsEntry_diffExpectedKeyHasWrongValue()","1241":"MapSubjectTest::::comparingValuesUsing_containsEntry_diffExpectedKeyHasWrongValue()","1242":"MapSubjectTest::::comparingValuesUsing_containsEntry_diffExpectedKeyHasWrongValue()","1244":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesFormatDiffExceptions()","1245":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesFormatDiffExceptions()","1246":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesFormatDiffExceptions()","1247":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesFormatDiffExceptions()","1248":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesFormatDiffExceptions()","1249":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesFormatDiffExceptions()","1250":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesFormatDiffExceptions()","1251":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesFormatDiffExceptions()","1252":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesFormatDiffExceptions()","1253":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesFormatDiffExceptions()","1254":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesFormatDiffExceptions()","1255":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesFormatDiffExceptions()","1256":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesFormatDiffExceptions()","1257":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesFormatDiffExceptions()","1258":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesFormatDiffExceptions()","1259":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesFormatDiffExceptions()","1260":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesFormatDiffExceptions()","1261":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesFormatDiffExceptions()","1262":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesFormatDiffExceptions()","1263":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesFormatDiffExceptions()","1264":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesFormatDiffExceptions()","1265":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesFormatDiffExceptions()","1266":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesFormatDiffExceptions()","1267":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesFormatDiffExceptions()","1268":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesFormatDiffExceptions()","1269":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesFormatDiffExceptions()","1270":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesFormatDiffExceptions()","1272":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_expectedKeyHasWrongValue()","1273":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_expectedKeyHasWrongValue()","1274":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_expectedKeyHasWrongValue()","1275":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_expectedKeyHasWrongValue()","1276":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_expectedKeyHasWrongValue()","1277":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_expectedKeyHasWrongValue()","1278":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_expectedKeyHasWrongValue()","1279":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_expectedKeyHasWrongValue()","1280":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_expectedKeyHasWrongValue()","1281":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_expectedKeyHasWrongValue()","1282":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_expectedKeyHasWrongValue()","1283":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_expectedKeyHasWrongValue()","1284":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_expectedKeyHasWrongValue()","1285":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_expectedKeyHasWrongValue()","1286":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_expectedKeyHasWrongValue()","1287":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_expectedKeyHasWrongValue()","1288":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_expectedKeyHasWrongValue()","1289":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_expectedKeyHasWrongValue()","1290":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_expectedKeyHasWrongValue()","1291":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_expectedKeyHasWrongValue()","1292":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_expectedKeyHasWrongValue()","1293":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_expectedKeyHasWrongValue()","1295":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_wrongKeyHasExpectedValue()","1296":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_wrongKeyHasExpectedValue()","1297":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_wrongKeyHasExpectedValue()","1298":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_wrongKeyHasExpectedValue()","1299":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_wrongKeyHasExpectedValue()","1300":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_wrongKeyHasExpectedValue()","1301":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_wrongKeyHasExpectedValue()","1302":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_wrongKeyHasExpectedValue()","1303":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_wrongKeyHasExpectedValue()","1304":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_wrongKeyHasExpectedValue()","1305":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_wrongKeyHasExpectedValue()","1306":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_wrongKeyHasExpectedValue()","1307":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_wrongKeyHasExpectedValue()","1308":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_wrongKeyHasExpectedValue()","1309":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_wrongKeyHasExpectedValue()","1310":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_wrongKeyHasExpectedValue()","1311":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_wrongKeyHasExpectedValue()","1312":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_wrongKeyHasExpectedValue()","1313":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_wrongKeyHasExpectedValue()","1314":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_wrongKeyHasExpectedValue()","1315":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_wrongKeyHasExpectedValue()","1316":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_wrongKeyHasExpectedValue()","1317":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_wrongKeyHasExpectedValue()","1318":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_wrongKeyHasExpectedValue()","1319":"MapSubjectTest::::comparingValuesUsing_containsEntry_handlesExceptions_wrongKeyHasExpectedValue()","1321":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_successExcludedKeyHasWrongValues()","1322":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_successExcludedKeyHasWrongValues()","1323":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_successExcludedKeyHasWrongValues()","1324":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_successExcludedKeyHasWrongValues()","1325":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_successExcludedKeyHasWrongValues()","1326":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_successExcludedKeyHasWrongValues()","1327":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_successExcludedKeyHasWrongValues()","1329":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_successWrongKeyHasExcludedValue()","1330":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_successWrongKeyHasExcludedValue()","1331":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_successWrongKeyHasExcludedValue()","1332":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_successWrongKeyHasExcludedValue()","1333":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_successWrongKeyHasExcludedValue()","1334":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_successWrongKeyHasExcludedValue()","1335":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_successWrongKeyHasExcludedValue()","1337":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_successMissingExcludedKeyAndValue()","1338":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_successMissingExcludedKeyAndValue()","1339":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_successMissingExcludedKeyAndValue()","1340":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_successMissingExcludedKeyAndValue()","1341":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_successMissingExcludedKeyAndValue()","1342":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_successMissingExcludedKeyAndValue()","1343":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_successMissingExcludedKeyAndValue()","1345":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_failure()","1346":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_failure()","1347":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_failure()","1348":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_failure()","1349":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_failure()","1350":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_failure()","1351":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_failure()","1352":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_failure()","1353":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_failure()","1354":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_failure()","1355":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_failure()","1357":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_handlesException()","1358":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_handlesException()","1359":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_handlesException()","1360":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_handlesException()","1361":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_handlesException()","1362":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_handlesException()","1363":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_handlesException()","1364":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_handlesException()","1365":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_handlesException()","1366":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_handlesException()","1367":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_handlesException()","1368":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_handlesException()","1369":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_handlesException()","1370":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_handlesException()","1371":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_handlesException()","1372":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_handlesException()","1373":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_handlesException()","1374":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_handlesException()","1375":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_handlesException()","1376":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_handlesException()","1377":"MapSubjectTest::::comparingValuesUsing_doesNotContainEntry_handlesException()","1379":"MapSubjectTest::::comparingValuesUsing_containsExactly_success()","1380":"MapSubjectTest::::comparingValuesUsing_containsExactly_success()","1381":"MapSubjectTest::::comparingValuesUsing_containsExactly_success()","1382":"MapSubjectTest::::comparingValuesUsing_containsExactly_success()","1383":"MapSubjectTest::::comparingValuesUsing_containsExactly_success()","1384":"MapSubjectTest::::comparingValuesUsing_containsExactly_success()","1385":"MapSubjectTest::::comparingValuesUsing_containsExactly_success()","1387":"MapSubjectTest::::comparingValuesUsing_containsExactly_inOrder_success()","1388":"MapSubjectTest::::comparingValuesUsing_containsExactly_inOrder_success()","1389":"MapSubjectTest::::comparingValuesUsing_containsExactly_inOrder_success()","1390":"MapSubjectTest::::comparingValuesUsing_containsExactly_inOrder_success()","1391":"MapSubjectTest::::comparingValuesUsing_containsExactly_inOrder_success()","1392":"MapSubjectTest::::comparingValuesUsing_containsExactly_inOrder_success()","1393":"MapSubjectTest::::comparingValuesUsing_containsExactly_inOrder_success()","1394":"MapSubjectTest::::comparingValuesUsing_containsExactly_inOrder_success()","1396":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsExtraEntry()","1397":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsExtraEntry()","1398":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsExtraEntry()","1399":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsExtraEntry()","1400":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsExtraEntry()","1401":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsExtraEntry()","1402":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsExtraEntry()","1403":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsExtraEntry()","1404":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsExtraEntry()","1405":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsExtraEntry()","1406":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsExtraEntry()","1407":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsExtraEntry()","1408":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsExtraEntry()","1409":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsExtraEntry()","1410":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsExtraEntry()","1411":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsExtraEntry()","1412":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsExtraEntry()","1413":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsExtraEntry()","1414":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsExtraEntry()","1415":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsExtraEntry()","1417":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsMissingEntry()","1418":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsMissingEntry()","1419":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsMissingEntry()","1420":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsMissingEntry()","1421":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsMissingEntry()","1422":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsMissingEntry()","1423":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsMissingEntry()","1424":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsMissingEntry()","1425":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsMissingEntry()","1426":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsMissingEntry()","1427":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsMissingEntry()","1428":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsMissingEntry()","1429":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsMissingEntry()","1430":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsMissingEntry()","1431":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsMissingEntry()","1432":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsMissingEntry()","1433":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsMissingEntry()","1435":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongKey()","1436":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongKey()","1437":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongKey()","1438":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongKey()","1439":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongKey()","1440":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongKey()","1441":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongKey()","1442":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongKey()","1443":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongKey()","1444":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongKey()","1445":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongKey()","1446":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongKey()","1447":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongKey()","1448":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongKey()","1449":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongKey()","1450":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongKey()","1451":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongKey()","1452":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongKey()","1453":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongKey()","1454":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongKey()","1455":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongKey()","1456":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongKey()","1458":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongValue()","1459":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongValue()","1460":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongValue()","1461":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongValue()","1462":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongValue()","1463":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongValue()","1464":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongValue()","1465":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongValue()","1466":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongValue()","1467":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongValue()","1468":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongValue()","1469":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongValue()","1470":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongValue()","1471":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongValue()","1472":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongValue()","1473":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongValue()","1474":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongValue()","1475":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongValue()","1476":"MapSubjectTest::::comparingValuesUsing_containsExactly_failsWrongValue()","1478":"MapSubjectTest::::comparingValuesUsing_containsExactly_handlesExceptions()","1479":"MapSubjectTest::::comparingValuesUsing_containsExactly_handlesExceptions()","1480":"MapSubjectTest::::comparingValuesUsing_containsExactly_handlesExceptions()","1481":"MapSubjectTest::::comparingValuesUsing_containsExactly_handlesExceptions()","1482":"MapSubjectTest::::comparingValuesUsing_containsExactly_handlesExceptions()","1483":"MapSubjectTest::::comparingValuesUsing_containsExactly_handlesExceptions()","1484":"MapSubjectTest::::comparingValuesUsing_containsExactly_handlesExceptions()","1485":"MapSubjectTest::::comparingValuesUsing_containsExactly_handlesExceptions()","1486":"MapSubjectTest::::comparingValuesUsing_containsExactly_handlesExceptions()","1487":"MapSubjectTest::::comparingValuesUsing_containsExactly_handlesExceptions()","1488":"MapSubjectTest::::comparingValuesUsing_containsExactly_handlesExceptions()","1489":"MapSubjectTest::::comparingValuesUsing_containsExactly_handlesExceptions()","1490":"MapSubjectTest::::comparingValuesUsing_containsExactly_handlesExceptions()","1491":"MapSubjectTest::::comparingValuesUsing_containsExactly_handlesExceptions()","1492":"MapSubjectTest::::comparingValuesUsing_containsExactly_handlesExceptions()","1493":"MapSubjectTest::::comparingValuesUsing_containsExactly_handlesExceptions()","1494":"MapSubjectTest::::comparingValuesUsing_containsExactly_handlesExceptions()","1495":"MapSubjectTest::::comparingValuesUsing_containsExactly_handlesExceptions()","1496":"MapSubjectTest::::comparingValuesUsing_containsExactly_handlesExceptions()","1497":"MapSubjectTest::::comparingValuesUsing_containsExactly_handlesExceptions()","1498":"MapSubjectTest::::comparingValuesUsing_containsExactly_handlesExceptions()","1499":"MapSubjectTest::::comparingValuesUsing_containsExactly_handlesExceptions()","1500":"MapSubjectTest::::comparingValuesUsing_containsExactly_handlesExceptions()","1502":"MapSubjectTest::::comparingValuesUsing_containsExactly_inOrder_failsOutOfOrder()","1503":"MapSubjectTest::::comparingValuesUsing_containsExactly_inOrder_failsOutOfOrder()","1504":"MapSubjectTest::::comparingValuesUsing_containsExactly_inOrder_failsOutOfOrder()","1505":"MapSubjectTest::::comparingValuesUsing_containsExactly_inOrder_failsOutOfOrder()","1506":"MapSubjectTest::::comparingValuesUsing_containsExactly_inOrder_failsOutOfOrder()","1507":"MapSubjectTest::::comparingValuesUsing_containsExactly_inOrder_failsOutOfOrder()","1508":"MapSubjectTest::::comparingValuesUsing_containsExactly_inOrder_failsOutOfOrder()","1509":"MapSubjectTest::::comparingValuesUsing_containsExactly_inOrder_failsOutOfOrder()","1510":"MapSubjectTest::::comparingValuesUsing_containsExactly_inOrder_failsOutOfOrder()","1511":"MapSubjectTest::::comparingValuesUsing_containsExactly_inOrder_failsOutOfOrder()","1512":"MapSubjectTest::::comparingValuesUsing_containsExactly_inOrder_failsOutOfOrder()","1513":"MapSubjectTest::::comparingValuesUsing_containsExactly_inOrder_failsOutOfOrder()","1515":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInActual()","1516":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInActual()","1517":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInActual()","1518":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInActual()","1519":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInActual()","1520":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInActual()","1521":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInActual()","1522":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInActual()","1523":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInActual()","1524":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInActual()","1525":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInActual()","1526":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInActual()","1527":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInActual()","1528":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInActual()","1529":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInActual()","1530":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInActual()","1531":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInActual()","1532":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInActual()","1533":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInActual()","1534":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInActual()","1535":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInActual()","1537":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInExpected()","1538":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInExpected()","1539":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInExpected()","1540":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInExpected()","1541":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInExpected()","1542":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInExpected()","1543":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInExpected()","1544":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInExpected()","1545":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInExpected()","1546":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInExpected()","1547":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInExpected()","1548":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInExpected()","1549":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInExpected()","1550":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInExpected()","1551":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInExpected()","1552":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInExpected()","1553":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInExpected()","1554":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInExpected()","1555":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInExpected()","1556":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInExpected()","1557":"MapSubjectTest::::comparingValuesUsing_containsExactly_wrongValueTypeInExpected()","1559":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_success()","1560":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_success()","1561":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_success()","1562":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_success()","1563":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_success()","1564":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_success()","1565":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_success()","1566":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_success()","1568":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_inOrder_success()","1569":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_inOrder_success()","1570":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_inOrder_success()","1571":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_inOrder_success()","1572":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_inOrder_success()","1573":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_inOrder_success()","1574":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_inOrder_success()","1575":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_inOrder_success()","1576":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_inOrder_success()","1578":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsExtraEntry()","1579":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsExtraEntry()","1580":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsExtraEntry()","1581":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsExtraEntry()","1582":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsExtraEntry()","1583":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsExtraEntry()","1584":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsExtraEntry()","1585":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsExtraEntry()","1586":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsExtraEntry()","1587":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsExtraEntry()","1588":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsExtraEntry()","1589":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsExtraEntry()","1590":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsExtraEntry()","1591":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsExtraEntry()","1592":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsExtraEntry()","1593":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsExtraEntry()","1594":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsExtraEntry()","1595":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsExtraEntry()","1597":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsMissingEntry()","1598":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsMissingEntry()","1599":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsMissingEntry()","1600":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsMissingEntry()","1601":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsMissingEntry()","1602":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsMissingEntry()","1603":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsMissingEntry()","1604":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsMissingEntry()","1605":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsMissingEntry()","1606":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsMissingEntry()","1607":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsMissingEntry()","1608":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsMissingEntry()","1609":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsMissingEntry()","1610":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsMissingEntry()","1611":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsMissingEntry()","1612":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsMissingEntry()","1613":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsMissingEntry()","1614":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsMissingEntry()","1616":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongKey()","1617":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongKey()","1618":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongKey()","1619":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongKey()","1620":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongKey()","1621":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongKey()","1622":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongKey()","1623":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongKey()","1624":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongKey()","1625":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongKey()","1626":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongKey()","1627":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongKey()","1628":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongKey()","1629":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongKey()","1630":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongKey()","1631":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongKey()","1632":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongKey()","1633":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongKey()","1634":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongKey()","1635":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongKey()","1636":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongKey()","1637":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongKey()","1638":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongKey()","1640":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongValue()","1641":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongValue()","1642":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongValue()","1643":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongValue()","1644":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongValue()","1645":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongValue()","1646":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongValue()","1647":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongValue()","1648":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongValue()","1649":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongValue()","1650":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongValue()","1651":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongValue()","1652":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongValue()","1653":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongValue()","1654":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongValue()","1655":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongValue()","1656":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongValue()","1657":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongValue()","1658":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongValue()","1659":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsWrongValue()","1661":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_diffMissingAndExtraAndWrongValue()","1662":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_diffMissingAndExtraAndWrongValue()","1663":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_diffMissingAndExtraAndWrongValue()","1664":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_diffMissingAndExtraAndWrongValue()","1665":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_diffMissingAndExtraAndWrongValue()","1666":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_diffMissingAndExtraAndWrongValue()","1667":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_diffMissingAndExtraAndWrongValue()","1668":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_diffMissingAndExtraAndWrongValue()","1669":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_diffMissingAndExtraAndWrongValue()","1670":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_diffMissingAndExtraAndWrongValue()","1671":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_diffMissingAndExtraAndWrongValue()","1672":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_diffMissingAndExtraAndWrongValue()","1673":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_diffMissingAndExtraAndWrongValue()","1674":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_diffMissingAndExtraAndWrongValue()","1675":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_diffMissingAndExtraAndWrongValue()","1676":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_diffMissingAndExtraAndWrongValue()","1677":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_diffMissingAndExtraAndWrongValue()","1678":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_diffMissingAndExtraAndWrongValue()","1679":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_diffMissingAndExtraAndWrongValue()","1680":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_diffMissingAndExtraAndWrongValue()","1681":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_diffMissingAndExtraAndWrongValue()","1682":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_diffMissingAndExtraAndWrongValue()","1683":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_diffMissingAndExtraAndWrongValue()","1684":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_diffMissingAndExtraAndWrongValue()","1685":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_diffMissingAndExtraAndWrongValue()","1686":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_diffMissingAndExtraAndWrongValue()","1687":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_diffMissingAndExtraAndWrongValue()","1688":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_diffMissingAndExtraAndWrongValue()","1690":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_handlesFormatDiffExceptions()","1691":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_handlesFormatDiffExceptions()","1692":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_handlesFormatDiffExceptions()","1693":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_handlesFormatDiffExceptions()","1694":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_handlesFormatDiffExceptions()","1695":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_handlesFormatDiffExceptions()","1696":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_handlesFormatDiffExceptions()","1697":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_handlesFormatDiffExceptions()","1698":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_handlesFormatDiffExceptions()","1699":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_handlesFormatDiffExceptions()","1700":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_handlesFormatDiffExceptions()","1701":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_handlesFormatDiffExceptions()","1702":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_handlesFormatDiffExceptions()","1703":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_handlesFormatDiffExceptions()","1704":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_handlesFormatDiffExceptions()","1705":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_handlesFormatDiffExceptions()","1706":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_handlesFormatDiffExceptions()","1707":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_handlesFormatDiffExceptions()","1708":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_handlesFormatDiffExceptions()","1709":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_handlesFormatDiffExceptions()","1710":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_handlesFormatDiffExceptions()","1711":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_handlesFormatDiffExceptions()","1712":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_handlesFormatDiffExceptions()","1713":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_handlesFormatDiffExceptions()","1714":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_handlesFormatDiffExceptions()","1715":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_handlesFormatDiffExceptions()","1716":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_handlesFormatDiffExceptions()","1717":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_handlesFormatDiffExceptions()","1718":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_handlesFormatDiffExceptions()","1719":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_handlesFormatDiffExceptions()","1720":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_handlesFormatDiffExceptions()","1721":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_handlesFormatDiffExceptions()","1723":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_inOrder_failsOutOfOrder()","1724":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_inOrder_failsOutOfOrder()","1725":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_inOrder_failsOutOfOrder()","1726":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_inOrder_failsOutOfOrder()","1727":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_inOrder_failsOutOfOrder()","1728":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_inOrder_failsOutOfOrder()","1729":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_inOrder_failsOutOfOrder()","1730":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_inOrder_failsOutOfOrder()","1731":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_inOrder_failsOutOfOrder()","1732":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_inOrder_failsOutOfOrder()","1733":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_inOrder_failsOutOfOrder()","1735":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_empty()","1736":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_empty()","1737":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_empty()","1738":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_empty()","1739":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_empty()","1740":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_empty()","1741":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_empty()","1742":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_empty()","1744":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsEmpty()","1745":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsEmpty()","1746":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsEmpty()","1747":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsEmpty()","1748":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsEmpty()","1749":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsEmpty()","1750":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsEmpty()","1751":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsEmpty()","1752":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_failsEmpty()","1754":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_wrongValueTypeInActual()","1755":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_wrongValueTypeInActual()","1756":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_wrongValueTypeInActual()","1757":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_wrongValueTypeInActual()","1758":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_wrongValueTypeInActual()","1759":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_wrongValueTypeInActual()","1760":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_wrongValueTypeInActual()","1761":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_wrongValueTypeInActual()","1762":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_wrongValueTypeInActual()","1763":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_wrongValueTypeInActual()","1764":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_wrongValueTypeInActual()","1765":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_wrongValueTypeInActual()","1766":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_wrongValueTypeInActual()","1767":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_wrongValueTypeInActual()","1768":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_wrongValueTypeInActual()","1769":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_wrongValueTypeInActual()","1770":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_wrongValueTypeInActual()","1771":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_wrongValueTypeInActual()","1772":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_wrongValueTypeInActual()","1773":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_wrongValueTypeInActual()","1774":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_wrongValueTypeInActual()","1775":"MapSubjectTest::::comparingValuesUsing_containsExactlyEntriesIn_wrongValueTypeInActual()","1777":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_success()","1778":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_success()","1779":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_success()","1780":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_success()","1781":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_success()","1782":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_success()","1783":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_success()","1785":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_inOrder_success()","1786":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_inOrder_success()","1787":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_inOrder_success()","1788":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_inOrder_success()","1789":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_inOrder_success()","1790":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_inOrder_success()","1791":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_inOrder_success()","1792":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_inOrder_success()","1794":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsMissingEntry()","1795":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsMissingEntry()","1796":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsMissingEntry()","1797":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsMissingEntry()","1798":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsMissingEntry()","1799":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsMissingEntry()","1800":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsMissingEntry()","1801":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsMissingEntry()","1802":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsMissingEntry()","1803":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsMissingEntry()","1804":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsMissingEntry()","1805":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsMissingEntry()","1806":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsMissingEntry()","1807":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsMissingEntry()","1808":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsMissingEntry()","1809":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsMissingEntry()","1810":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsMissingEntry()","1811":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsMissingEntry()","1813":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsWrongKey()","1814":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsWrongKey()","1815":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsWrongKey()","1816":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsWrongKey()","1817":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsWrongKey()","1818":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsWrongKey()","1819":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsWrongKey()","1820":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsWrongKey()","1821":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsWrongKey()","1822":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsWrongKey()","1823":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsWrongKey()","1824":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsWrongKey()","1825":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsWrongKey()","1826":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsWrongKey()","1827":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsWrongKey()","1828":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsWrongKey()","1829":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsWrongKey()","1831":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsWrongValue()","1832":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsWrongValue()","1833":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsWrongValue()","1834":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsWrongValue()","1835":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsWrongValue()","1836":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsWrongValue()","1837":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsWrongValue()","1838":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsWrongValue()","1839":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsWrongValue()","1840":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsWrongValue()","1841":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsWrongValue()","1842":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsWrongValue()","1843":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsWrongValue()","1844":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsWrongValue()","1845":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsWrongValue()","1846":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsWrongValue()","1847":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsWrongValue()","1848":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsWrongValue()","1849":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_failsWrongValue()","1851":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_handlesExceptions()","1852":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_handlesExceptions()","1853":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_handlesExceptions()","1854":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_handlesExceptions()","1855":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_handlesExceptions()","1856":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_handlesExceptions()","1857":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_handlesExceptions()","1858":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_handlesExceptions()","1859":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_handlesExceptions()","1860":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_handlesExceptions()","1861":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_handlesExceptions()","1862":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_handlesExceptions()","1863":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_handlesExceptions()","1864":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_handlesExceptions()","1865":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_handlesExceptions()","1866":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_handlesExceptions()","1867":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_handlesExceptions()","1868":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_handlesExceptions()","1869":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_handlesExceptions()","1870":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_handlesExceptions()","1871":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_handlesExceptions()","1872":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_handlesExceptions()","1873":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_handlesExceptions()","1874":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_handlesExceptions()","1876":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_inOrder_failsOutOfOrder()","1877":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_inOrder_failsOutOfOrder()","1878":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_inOrder_failsOutOfOrder()","1879":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_inOrder_failsOutOfOrder()","1880":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_inOrder_failsOutOfOrder()","1881":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_inOrder_failsOutOfOrder()","1882":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_inOrder_failsOutOfOrder()","1883":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_inOrder_failsOutOfOrder()","1884":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_inOrder_failsOutOfOrder()","1885":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_inOrder_failsOutOfOrder()","1886":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_inOrder_failsOutOfOrder()","1887":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_inOrder_failsOutOfOrder()","1888":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_inOrder_failsOutOfOrder()","1889":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_inOrder_failsOutOfOrder()","1890":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_inOrder_failsOutOfOrder()","1892":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpectedActual()","1893":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpectedActual()","1894":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpectedActual()","1895":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpectedActual()","1896":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpectedActual()","1897":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpectedActual()","1898":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpectedActual()","1899":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpectedActual()","1900":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpectedActual()","1901":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpectedActual()","1902":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpectedActual()","1903":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpectedActual()","1904":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpectedActual()","1905":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpectedActual()","1906":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpectedActual()","1907":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpectedActual()","1908":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpectedActual()","1909":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpectedActual()","1910":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpectedActual()","1911":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpectedActual()","1912":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpectedActual()","1914":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInUnexpectedActual_success()","1915":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInUnexpectedActual_success()","1916":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInUnexpectedActual_success()","1917":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInUnexpectedActual_success()","1918":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInUnexpectedActual_success()","1919":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInUnexpectedActual_success()","1920":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInUnexpectedActual_success()","1922":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpected()","1923":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpected()","1924":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpected()","1925":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpected()","1926":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpected()","1927":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpected()","1928":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpected()","1929":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpected()","1930":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpected()","1931":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpected()","1932":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpected()","1933":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpected()","1934":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpected()","1935":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpected()","1936":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpected()","1937":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpected()","1938":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpected()","1939":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpected()","1940":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpected()","1941":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpected()","1942":"MapSubjectTest::::comparingValuesUsing_containsAtLeast_wrongValueTypeInExpected()","1944":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_success()","1945":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_success()","1946":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_success()","1947":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_success()","1948":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_success()","1949":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_success()","1950":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_success()","1951":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_success()","1953":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_inOrder_success()","1954":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_inOrder_success()","1955":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_inOrder_success()","1956":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_inOrder_success()","1957":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_inOrder_success()","1958":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_inOrder_success()","1959":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_inOrder_success()","1960":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_inOrder_success()","1961":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_inOrder_success()","1963":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsMissingEntry()","1964":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsMissingEntry()","1965":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsMissingEntry()","1966":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsMissingEntry()","1967":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsMissingEntry()","1968":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsMissingEntry()","1969":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsMissingEntry()","1970":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsMissingEntry()","1971":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsMissingEntry()","1972":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsMissingEntry()","1973":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsMissingEntry()","1974":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsMissingEntry()","1975":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsMissingEntry()","1976":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsMissingEntry()","1977":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsMissingEntry()","1978":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsMissingEntry()","1979":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsMissingEntry()","1980":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsMissingEntry()","1982":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongKey()","1983":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongKey()","1984":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongKey()","1985":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongKey()","1986":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongKey()","1987":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongKey()","1988":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongKey()","1989":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongKey()","1990":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongKey()","1991":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongKey()","1992":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongKey()","1993":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongKey()","1994":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongKey()","1995":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongKey()","1996":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongKey()","1997":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongKey()","1998":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongKey()","1999":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongKey()","2001":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongValue()","2002":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongValue()","2003":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongValue()","2004":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongValue()","2005":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongValue()","2006":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongValue()","2007":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongValue()","2008":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongValue()","2009":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongValue()","2010":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongValue()","2011":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongValue()","2012":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongValue()","2013":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongValue()","2014":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongValue()","2015":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongValue()","2016":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongValue()","2017":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongValue()","2018":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongValue()","2019":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongValue()","2020":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_failsWrongValue()","2022":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_diffMissingAndWrongValue()","2023":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_diffMissingAndWrongValue()","2024":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_diffMissingAndWrongValue()","2025":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_diffMissingAndWrongValue()","2026":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_diffMissingAndWrongValue()","2027":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_diffMissingAndWrongValue()","2028":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_diffMissingAndWrongValue()","2029":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_diffMissingAndWrongValue()","2030":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_diffMissingAndWrongValue()","2031":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_diffMissingAndWrongValue()","2032":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_diffMissingAndWrongValue()","2033":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_diffMissingAndWrongValue()","2034":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_diffMissingAndWrongValue()","2035":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_diffMissingAndWrongValue()","2036":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_diffMissingAndWrongValue()","2037":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_diffMissingAndWrongValue()","2038":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_diffMissingAndWrongValue()","2039":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_diffMissingAndWrongValue()","2040":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_diffMissingAndWrongValue()","2041":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_diffMissingAndWrongValue()","2042":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_diffMissingAndWrongValue()","2043":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_diffMissingAndWrongValue()","2044":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_diffMissingAndWrongValue()","2045":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_diffMissingAndWrongValue()","2046":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_diffMissingAndWrongValue()","2047":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_diffMissingAndWrongValue()","2048":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_diffMissingAndWrongValue()","2050":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_handlesFormatDiffExceptions()","2051":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_handlesFormatDiffExceptions()","2052":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_handlesFormatDiffExceptions()","2053":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_handlesFormatDiffExceptions()","2054":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_handlesFormatDiffExceptions()","2055":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_handlesFormatDiffExceptions()","2056":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_handlesFormatDiffExceptions()","2057":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_handlesFormatDiffExceptions()","2058":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_handlesFormatDiffExceptions()","2059":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_handlesFormatDiffExceptions()","2060":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_handlesFormatDiffExceptions()","2061":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_handlesFormatDiffExceptions()","2062":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_handlesFormatDiffExceptions()","2063":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_handlesFormatDiffExceptions()","2064":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_handlesFormatDiffExceptions()","2065":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_handlesFormatDiffExceptions()","2066":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_handlesFormatDiffExceptions()","2067":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_handlesFormatDiffExceptions()","2068":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_handlesFormatDiffExceptions()","2069":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_handlesFormatDiffExceptions()","2070":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_handlesFormatDiffExceptions()","2071":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_handlesFormatDiffExceptions()","2072":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_handlesFormatDiffExceptions()","2073":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_handlesFormatDiffExceptions()","2074":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_handlesFormatDiffExceptions()","2075":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_handlesFormatDiffExceptions()","2076":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_handlesFormatDiffExceptions()","2077":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_handlesFormatDiffExceptions()","2078":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_handlesFormatDiffExceptions()","2079":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_handlesFormatDiffExceptions()","2080":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_handlesFormatDiffExceptions()","2081":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_handlesFormatDiffExceptions()","2083":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_inOrder_failsOutOfOrder()","2084":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_inOrder_failsOutOfOrder()","2085":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_inOrder_failsOutOfOrder()","2086":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_inOrder_failsOutOfOrder()","2087":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_inOrder_failsOutOfOrder()","2088":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_inOrder_failsOutOfOrder()","2089":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_inOrder_failsOutOfOrder()","2090":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_inOrder_failsOutOfOrder()","2091":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_inOrder_failsOutOfOrder()","2092":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_inOrder_failsOutOfOrder()","2093":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_inOrder_failsOutOfOrder()","2094":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_inOrder_failsOutOfOrder()","2095":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_inOrder_failsOutOfOrder()","2096":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_inOrder_failsOutOfOrder()","2098":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_empty()","2099":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_empty()","2100":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_empty()","2101":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_empty()","2102":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_empty()","2103":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_empty()","2104":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_empty()","2105":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_empty()","2107":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_wrongValueTypeInExpectedActual()","2108":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_wrongValueTypeInExpectedActual()","2109":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_wrongValueTypeInExpectedActual()","2110":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_wrongValueTypeInExpectedActual()","2111":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_wrongValueTypeInExpectedActual()","2112":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_wrongValueTypeInExpectedActual()","2113":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_wrongValueTypeInExpectedActual()","2114":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_wrongValueTypeInExpectedActual()","2115":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_wrongValueTypeInExpectedActual()","2116":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_wrongValueTypeInExpectedActual()","2117":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_wrongValueTypeInExpectedActual()","2118":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_wrongValueTypeInExpectedActual()","2119":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_wrongValueTypeInExpectedActual()","2120":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_wrongValueTypeInExpectedActual()","2121":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_wrongValueTypeInExpectedActual()","2122":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_wrongValueTypeInExpectedActual()","2123":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_wrongValueTypeInExpectedActual()","2124":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_wrongValueTypeInExpectedActual()","2125":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_wrongValueTypeInExpectedActual()","2126":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_wrongValueTypeInExpectedActual()","2127":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_wrongValueTypeInExpectedActual()","2128":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_wrongValueTypeInExpectedActual()","2130":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_wrongValueTypeInUnexpectedActual_success()","2131":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_wrongValueTypeInUnexpectedActual_success()","2132":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_wrongValueTypeInUnexpectedActual_success()","2133":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_wrongValueTypeInUnexpectedActual_success()","2134":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_wrongValueTypeInUnexpectedActual_success()","2135":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_wrongValueTypeInUnexpectedActual_success()","2136":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_wrongValueTypeInUnexpectedActual_success()","2137":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_wrongValueTypeInUnexpectedActual_success()","2138":"MapSubjectTest::::comparingValuesUsing_containsAtLeastEntriesIn_wrongValueTypeInUnexpectedActual_success()","2140":"MapSubjectTest::::formattingDiffsUsing_success()","2141":"MapSubjectTest::::formattingDiffsUsing_success()","2142":"MapSubjectTest::::formattingDiffsUsing_success()","2143":"MapSubjectTest::::formattingDiffsUsing_success()","2144":"MapSubjectTest::::formattingDiffsUsing_success()","2145":"MapSubjectTest::::formattingDiffsUsing_success()","2146":"MapSubjectTest::::formattingDiffsUsing_success()","2148":"MapSubjectTest::::formattingDiffsUsing_failure()","2149":"MapSubjectTest::::formattingDiffsUsing_failure()","2150":"MapSubjectTest::::formattingDiffsUsing_failure()","2151":"MapSubjectTest::::formattingDiffsUsing_failure()","2152":"MapSubjectTest::::formattingDiffsUsing_failure()","2153":"MapSubjectTest::::formattingDiffsUsing_failure()","2154":"MapSubjectTest::::formattingDiffsUsing_failure()","2155":"MapSubjectTest::::formattingDiffsUsing_failure()","2156":"MapSubjectTest::::formattingDiffsUsing_failure()","2157":"MapSubjectTest::::formattingDiffsUsing_failure()","2158":"MapSubjectTest::::formattingDiffsUsing_failure()","2159":"MapSubjectTest::::formattingDiffsUsing_failure()","2160":"MapSubjectTest::::formattingDiffsUsing_failure()","2161":"MapSubjectTest::::formattingDiffsUsing_failure()","2162":"MapSubjectTest::::formattingDiffsUsing_failure()","2163":"MapSubjectTest::::formattingDiffsUsing_failure()","2164":"MapSubjectTest::::formattingDiffsUsing_failure()","2165":"MapSubjectTest::::formattingDiffsUsing_failure()","2166":"MapSubjectTest::::formattingDiffsUsing_failure()","2167":"MapSubjectTest::::formattingDiffsUsing_failure()","2168":"MapSubjectTest::::formattingDiffsUsing_failure()","2170":"MapSubjectTest::::expectFailureWhenTestingThat(java.util.Map<?, ?>)","2171":"MapSubjectTest::::expectFailureWhenTestingThat(java.util.Map<?, ?>)","2172":"MapSubjectTest::::expectFailureWhenTestingThat(java.util.Map<?, ?>)"},"tests":[{"test_lines":[44,53],"covered_lines":[61,62,63,193,204,210,211,212,213,214,219,220,224,230,238,239,240,262,263,264,265,311,312,313,314,315,316,317,319,320,323,326,327,330,331,338,339,340,341,342,343,346,429,430,431,432,433,444,445,446,447,448,449,466,470,473],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[55,64],"covered_lines":[61,62,63,193,204,210,211,212,213,214,219,220,224,230,238,239,240,262,263,264,265,311,312,313,314,315,316,317,319,320,323,326,327,330,331,338,339,340,341,342,343,346,429,430,431,432,433,444,445,446,447,448,449,466,470,473],"label":"MapSubject::::containsExactly(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[66,74],"covered_lines":[61,62,63,179,230,231,232,470,473],"label":"MapSubject::::containsExactly()"},{"test_lines":[76,82],"covered_lines":[61,62,63,83,84,86,179,230,231,234,235,470,473],"label":"MapSubject::::containsExactly()"},{"test_lines":[84,90],"covered_lines":[61,62,63,83,84,86,230,231,234,235,470,473],"label":"MapSubject::::containsExactlyEntriesIn(java.util.Map<?, ?>)"},{"test_lines":[92,100],"covered_lines":[61,62,63,193,204,210,211,212,213,214,219,220,224,230,238,239,240,262,263,264,265,311,312,313,314,315,316,317,319,320,323,326,327,330,331,338,339,340,341,342,343,346,429,430,431,432,433,444,445,446,447,448,449,466,470,473],"label":"MapSubject::::containsExactly(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[102,110],"covered_lines":[61,62,63,193,204,210,211,212,213,214,215,216,217,219,220,224,230,238,239,240,262,263,264,265,311,312,313,314,315,316,317,319,320,323,326,327,330,331,338,339,340,341,342,343,346,429,430,431,432,433,444,445,446,447,448,449,466,470,473],"label":"MapSubject::::containsExactly(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[112,124],"covered_lines":[61,62,63,204,210,211,212,213,214,215,216,217,219,220,470,473],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[126,138],"covered_lines":[61,62,63,204,210,211,212,213,214,215,216,217,219,220,470,473],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[140,150],"covered_lines":[61,62,63,193,204,210,211,212,213,214,215,216,217,219,220,224,230,238,239,242,262,263,264,277,278,279,280,281,282,283,284,311,312,313,314,315,316,317,319,320,323,326,327,330,331,338,339,340,341,342,343,346,350,351,352,355,359,362,366,367,369,370,371,372,373,379,380,381,382,383,415,416,417,470,473],"label":"MapSubject::::containsExactly(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[152,160],"covered_lines":[61,62,63,193,204,210,211,212,213,214,215,216,217,219,220,224,230,238,239,242,262,263,264,277,278,279,280,281,282,283,284,311,312,313,314,315,316,317,319,320,323,326,327,330,331,338,339,340,341,342,343,346,350,351,352,355,359,362,366,367,369,370,371,372,373,379,380,381,382,383,415,416,417,470,473],"label":"MapSubject::::containsExactly(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[162,169],"covered_lines":[61,62,63,193,204,210,211,212,213,214,215,216,217,219,220,224,230,238,239,242,262,263,264,277,278,279,280,281,282,283,284,311,312,313,314,315,316,317,319,320,323,324,326,327,330,331,338,339,340,341,342,343,346,350,351,352,355,359,360,362,363,364,365,366,369,373,379,380,381,382,383,415,416,417,470,473],"label":"MapSubject::::containsExactly(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[171,186],"covered_lines":[61,62,63,193,204,210,211,212,213,214,215,216,217,219,220,224,230,238,239,242,262,263,264,277,278,279,280,281,282,283,284,311,312,313,314,315,316,317,319,320,321,323,326,327,330,331,338,339,340,341,342,343,346,350,351,352,353,355,356,357,358,359,362,366,369,373,379,380,381,382,383,391,392,393,394,397,398,400,401,402,404,410,415,416,417,470,473],"label":"MapSubject::::containsExactly(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[188,204],"covered_lines":[61,62,63,193,204,210,211,212,213,214,215,216,217,219,220,224,230,238,239,242,262,263,264,277,278,279,280,281,282,283,284,311,312,313,314,315,316,317,319,320,321,323,326,327,330,331,338,339,340,341,342,343,346,350,351,352,353,355,356,357,358,359,362,366,369,373,379,380,381,382,383,391,392,393,394,397,398,400,401,402,404,410,415,416,417,470,473],"label":"MapSubject::::containsExactly(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[206,224],"covered_lines":[61,62,63,193,204,210,211,212,213,214,215,216,217,219,220,224,230,238,239,242,262,263,264,277,278,279,280,281,282,283,284,311,312,313,314,315,316,317,319,320,323,324,326,327,330,331,338,339,340,341,342,343,346,350,351,352,355,359,360,362,363,364,365,366,367,369,370,371,372,373,379,380,381,382,383,415,416,417,470,473],"label":"MapSubject::::containsExactly(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[226,246],"covered_lines":[61,62,63,193,204,210,211,212,213,214,215,216,217,219,220,224,230,238,239,242,262,263,264,277,278,279,280,281,282,283,284,311,312,313,314,315,316,317,319,320,321,323,326,327,330,331,338,339,340,341,342,343,346,350,351,352,353,355,356,357,358,359,362,366,367,369,370,371,372,373,379,380,381,382,383,391,392,393,394,397,398,400,401,402,404,410,415,416,417,470,473],"label":"MapSubject::::containsExactly(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[248,268],"covered_lines":[61,62,63,193,204,210,211,212,213,214,215,216,217,219,220,224,230,238,239,242,262,263,264,277,278,279,280,281,282,283,284,311,312,313,314,315,316,317,319,320,321,323,324,326,327,330,331,338,339,340,341,342,343,346,350,351,352,353,355,356,357,358,359,360,362,363,364,365,366,369,373,379,380,381,382,383,391,392,393,394,397,398,400,401,402,404,410,415,416,417,470,473],"label":"MapSubject::::containsExactly(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[270,295],"covered_lines":[61,62,63,193,204,210,211,212,213,214,215,216,217,219,220,224,230,238,239,242,262,263,264,277,278,279,280,281,282,283,284,311,312,313,314,315,316,317,319,320,321,323,324,326,327,330,331,338,339,340,341,342,343,346,350,351,352,353,355,356,357,358,359,360,362,363,364,365,366,367,369,370,371,372,373,379,380,381,382,383,391,392,393,394,397,398,400,401,402,404,410,415,416,417,470,473],"label":"MapSubject::::containsExactly(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[297,308],"covered_lines":[61,62,63,193,204,210,211,212,213,214,215,216,217,219,220,224,230,238,239,240,262,263,264,265,311,312,313,314,315,316,317,319,320,323,326,327,330,331,338,339,340,341,342,343,346,429,430,431,432,433,444,445,446,447,448,449,451,452,453,457,458,461,464,466,470,473],"label":"MapSubject::::containsExactlyEntriesIn(java.util.Map<?, ?>)"},{"test_lines":[310,329],"covered_lines":[61,62,63,204,230,238,239,240,262,263,264,265,311,312,313,314,315,316,317,319,320,323,326,327,330,331,338,339,340,341,342,343,346,429,430,431,432,433,444,445,446,447,448,449,466,470,473],"label":"MapSubject::::containsExactlyEntriesIn(java.util.Map<?, ?>)"},{"test_lines":[331,352],"covered_lines":[61,62,63,193,204,210,211,212,213,214,215,216,217,219,220,224,230,238,239,242,262,263,264,277,278,279,280,281,282,283,284,311,312,313,314,315,316,317,319,320,321,323,326,327,330,331,338,339,340,341,342,343,346,350,351,352,353,355,356,357,358,359,362,366,369,373,379,380,381,382,383,391,392,393,394,397,398,400,401,402,404,410,415,416,417,470,473],"label":"MapSubject::::containsExactly(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[354,375],"covered_lines":[61,62,63,193,204,210,211,212,213,214,215,216,217,219,220,224,230,238,239,242,262,263,264,277,278,279,280,281,282,283,284,311,312,313,314,315,316,317,319,320,321,323,326,327,330,331,338,339,340,341,342,343,346,350,351,352,353,355,356,357,358,359,362,366,369,373,379,380,381,382,383,391,392,393,394,397,398,400,401,402,404,410,415,416,417,470,473],"label":"MapSubject::::containsExactly(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[377,395],"covered_lines":[61,62,63,193,204,210,211,212,213,214,215,216,217,219,220,224,230,238,239,242,262,263,264,277,278,279,280,281,282,283,284,311,312,313,314,315,316,317,319,320,323,324,326,327,330,331,338,339,340,341,342,343,346,350,351,352,355,359,360,362,363,364,365,366,367,369,370,371,372,373,379,380,381,382,383,415,416,470,473],"label":"MapSubject::::containsExactly(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[397,409],"covered_lines":[61,62,63,199,204,210,211,212,213,214,219,220,224,249,252,253,254,262,263,264,265,311,312,313,314,315,316,317,319,320,323,326,327,328,330,331,338,339,340,341,342,343,346,429,430,431,432,433,444,445,446,447,448,449,466,470,473],"label":"MapSubject::::containsAtLeastEntriesIn(java.util.Map<?, ?>)"},{"test_lines":[411,423],"covered_lines":[61,62,63,199,204,210,211,212,213,214,219,220,224,249,252,253,254,262,263,264,265,311,312,313,314,315,316,317,319,320,323,326,327,328,330,331,338,339,340,341,342,343,346,429,430,431,432,433,444,445,446,447,448,449,466,470,473],"label":"MapSubject::::containsAtLeastEntriesIn(java.util.Map<?, ?>)"},{"test_lines":[425,431],"covered_lines":[61,62,63,249,250,470,473],"label":"MapSubject::::containsAtLeastEntriesIn(java.util.Map<?, ?>)"},{"test_lines":[433,441],"covered_lines":[61,62,63,199,204,210,211,212,213,214,219,220,224,249,252,253,254,262,263,264,265,311,312,313,314,315,316,317,319,320,323,326,327,328,330,331,338,339,340,341,342,343,346,429,430,431,432,433,444,445,446,447,448,449,466,470,473],"label":"MapSubject::::containsAtLeastEntriesIn(java.util.Map<?, ?>)"},{"test_lines":[443,451],"covered_lines":[61,62,63,199,204,210,211,212,213,214,215,216,217,219,220,224,249,252,253,254,262,263,264,265,311,312,313,314,315,316,317,319,320,323,326,327,328,330,331,338,339,340,341,342,343,346,429,430,431,432,433,444,445,446,447,448,449,466,470,473],"label":"MapSubject::::containsAtLeastEntriesIn(java.util.Map<?, ?>)"},{"test_lines":[453,465],"covered_lines":[61,62,63,204,210,211,212,213,214,215,216,217,219,220,470,473],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[467,479],"covered_lines":[61,62,63,204,210,211,212,213,214,215,216,217,219,220,470,473],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[481,495],"covered_lines":[61,62,63,199,204,210,211,212,213,214,215,216,217,219,220,224,249,252,253,256,262,263,264,277,278,279,280,281,282,283,284,311,312,313,314,315,316,317,319,320,323,324,326,327,328,330,331,338,339,340,341,342,343,346,350,351,352,355,359,360,362,363,364,365,366,369,373,379,380,381,382,383,415,416,417,470,473],"label":"MapSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[497,512],"covered_lines":[61,62,63,199,204,210,211,212,213,214,215,216,217,219,220,224,249,252,253,256,262,263,264,277,278,279,280,281,282,283,284,311,312,313,314,315,316,317,319,320,321,323,326,327,328,330,331,338,339,340,341,342,343,346,350,351,352,353,355,356,357,358,359,362,366,369,373,379,380,381,382,383,391,392,393,394,397,398,400,401,402,404,410,415,416,417,470,473],"label":"MapSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[514,530],"covered_lines":[61,62,63,199,204,210,211,212,213,214,215,216,217,219,220,224,249,252,253,256,262,263,264,277,278,279,280,281,282,283,284,311,312,313,314,315,316,317,319,320,321,323,326,327,328,330,331,338,339,340,341,342,343,346,350,351,352,353,355,356,357,358,359,362,366,369,373,379,380,381,382,383,391,392,393,394,397,398,400,401,402,404,410,415,416,417,470,473],"label":"MapSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[532,552],"covered_lines":[61,62,63,199,204,210,211,212,213,214,215,216,217,219,220,224,249,252,253,256,262,263,264,277,278,279,280,281,282,283,284,311,312,313,314,315,316,317,319,320,321,323,324,326,327,328,330,331,338,339,340,341,342,343,346,350,351,352,353,355,356,357,358,359,360,362,363,364,365,366,369,373,379,380,381,382,383,391,392,393,394,397,398,400,401,402,404,410,415,416,417,470,473],"label":"MapSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[554,566],"covered_lines":[61,62,63,199,204,210,211,212,213,214,215,216,217,219,220,224,249,252,253,254,262,263,264,265,311,312,313,314,315,316,317,319,320,323,326,327,328,330,331,338,339,340,341,342,343,346,429,430,431,432,433,444,445,446,447,448,449,451,452,453,457,458,461,464,466,470,473],"label":"MapSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[568,585],"covered_lines":[61,62,63,204,470,473],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[587,608],"covered_lines":[61,62,63,199,204,210,211,212,213,214,215,216,217,219,220,224,249,252,253,256,262,263,264,277,278,279,280,281,282,283,284,311,312,313,314,315,316,317,319,320,321,323,326,327,328,330,331,338,339,340,341,342,343,346,350,351,352,353,355,356,357,358,359,362,366,369,373,379,380,381,382,383,391,392,393,394,397,398,400,401,402,404,410,415,416,417,470,473],"label":"MapSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[610,631],"covered_lines":[61,62,63,199,204,210,211,212,213,214,215,216,217,219,220,224,249,252,253,256,262,263,264,277,278,279,280,281,282,283,284,311,312,313,314,315,316,317,319,320,321,323,326,327,328,330,331,338,339,340,341,342,343,346,350,351,352,353,355,356,357,358,359,362,366,369,373,379,380,381,382,383,391,392,393,394,397,398,400,401,402,404,410,415,416,417,470,473],"label":"MapSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[633,646],"covered_lines":[61,62,63,199,204,210,211,212,213,214,215,216,217,219,220,224,249,252,253,256,262,263,264,277,278,279,280,281,282,283,284,311,312,313,314,315,316,317,319,320,323,324,326,327,328,330,331,338,339,340,341,342,343,346,350,351,352,355,359,360,362,363,364,365,366,369,373,379,380,381,382,383,415,416,470,473],"label":"MapSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[648,654],"covered_lines":[61,62,63,67,68,470,473],"label":"MapSubject::::isEqualTo(java.lang.Object)"},{"test_lines":[656,685],"covered_lines":[61,62,63,67,73,78,79,262,263,264,277,278,279,280,281,282,283,284,311,312,313,314,315,316,317,319,320,321,323,324,326,327,330,331,338,339,340,341,342,343,346,350,351,352,353,355,356,357,358,359,360,362,363,364,365,366,367,369,370,371,372,373,379,380,381,382,383,391,392,393,394,397,398,400,401,402,404,410,415,416,417,470,473],"label":"MapSubject::::isEqualTo(java.lang.Object)"},{"test_lines":[687,704],"covered_lines":[61,62,63,67,73,78,79,262,263,264,277,278,279,280,281,282,283,284,311,312,313,314,315,316,317,319,320,321,323,326,327,330,331,338,339,340,341,342,343,346,350,351,352,353,355,356,357,358,359,362,366,369,373,379,380,381,382,383,391,392,393,394,397,398,400,401,402,404,410,415,416,417,470,473],"label":"MapSubject::::isEqualTo(java.lang.Object)"},{"test_lines":[706,716],"covered_lines":[61,62,63,67,73,78,79,262,263,264,277,278,279,280,281,282,283,284,311,312,313,314,315,316,317,319,320,323,326,327,330,331,338,339,340,341,342,343,346,350,351,352,355,359,362,366,367,369,370,371,372,373,379,380,381,382,383,415,416,417,470,473],"label":"MapSubject::::isEqualTo(java.lang.Object)"},{"test_lines":[718,727],"covered_lines":[61,62,63,67,73,78,79,262,263,264,277,278,279,280,281,282,283,284,311,312,313,314,315,316,317,319,320,323,324,326,327,330,331,338,339,340,341,342,343,346,350,351,352,355,359,360,362,363,364,365,366,369,373,379,380,381,382,383,415,416,417,470,473],"label":"MapSubject::::isEqualTo(java.lang.Object)"},{"test_lines":[729,749],"covered_lines":[61,62,63,67,73,78,79,262,263,264,277,278,279,280,281,282,283,284,311,312,313,314,315,316,317,319,320,323,324,326,327,330,331,338,339,340,341,342,343,346,350,351,352,355,359,360,362,363,364,365,366,367,369,370,371,372,373,379,380,381,382,383,415,416,417,470,473],"label":"MapSubject::::isEqualTo(java.lang.Object)"},{"test_lines":[751,769],"covered_lines":[61,62,63,67,73,78,79,262,263,264,277,278,279,280,281,282,283,284,311,312,313,314,315,316,317,319,320,321,323,326,327,330,331,338,339,340,341,342,343,346,350,351,352,353,355,356,357,358,359,362,366,369,373,379,380,381,382,383,391,392,393,394,397,398,400,401,402,404,410,415,416,417,470,473],"label":"MapSubject::::isEqualTo(java.lang.Object)"},{"test_lines":[771,776],"covered_lines":[61,62,63,67,73,74,75,470,473],"label":"MapSubject::::isEqualTo(java.lang.Object)"},{"test_lines":[778,789],"covered_lines":[61,62,63,67,68,470,473],"label":"MapSubject::::isEqualTo(java.lang.Object)"},{"test_lines":[791,800],"covered_lines":[61,62,63,67,73,78,79,262,263,264,277,278,279,280,281,282,283,284,311,312,313,314,315,316,317,319,320,321,323,326,327,330,331,338,339,340,341,342,343,346,350,351,352,353,355,356,357,358,359,362,366,367,369,370,371,372,373,379,380,381,382,383,391,392,393,394,397,398,400,401,402,404,410,415,416,417,470,473],"label":"MapSubject::::isEqualTo(java.lang.Object)"},{"test_lines":[802,805],"covered_lines":[61,62,63,67,73,74,75,470,473],"label":"MapSubject::::isEqualTo(java.lang.Object)"},{"test_lines":[807,810],"covered_lines":[61,62,63,67,73,74,75,470,473],"label":"MapSubject::::isEqualTo(java.lang.Object)"},{"test_lines":[812,818],"covered_lines":[61,62,63,470,473],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[820,824],"covered_lines":[61,62,63,83,86,470,473],"label":"MapSubject::::isEmpty()"},{"test_lines":[826,831],"covered_lines":[61,62,63,83,84,86,470,473],"label":"MapSubject::::isEmpty()"},{"test_lines":[833,837],"covered_lines":[61,62,63,90,93,470,473],"label":"MapSubject::::isNotEmpty()"},{"test_lines":[839,844],"covered_lines":[61,62,63,90,91,93,470,473],"label":"MapSubject::::isNotEmpty()"},{"test_lines":[846,849],"covered_lines":[61,62,63,97,98,99,470,473],"label":"MapSubject::::hasSize(int)"},{"test_lines":[851,854],"covered_lines":[61,62,63,97,98,99,470,473],"label":"MapSubject::::hasSize(int)"},{"test_lines":[856,863],"covered_lines":[61,62,63,97,470,473],"label":"MapSubject::::hasSize(int)"},{"test_lines":[865,869],"covered_lines":[61,62,63,103,104,470,473],"label":"MapSubject::::containsKey(java.lang.Object)"},{"test_lines":[871,879],"covered_lines":[61,62,63,103,104,470,473],"label":"MapSubject::::containsKey(java.lang.Object)"},{"test_lines":[881,889],"covered_lines":[61,62,63,103,104,470,473],"label":"MapSubject::::containsKey(java.lang.Object)"},{"test_lines":[891,905],"covered_lines":[61,62,63,103,104,470,473],"label":"MapSubject::::containsKey(java.lang.Object)"},{"test_lines":[907,923],"covered_lines":[61,62,63,103,104,470,473],"label":"MapSubject::::containsKey(java.lang.Object)"},{"test_lines":[925,930],"covered_lines":[61,62,63,103,104,470,473],"label":"MapSubject::::containsKey(java.lang.Object)"},{"test_lines":[932,937],"covered_lines":[61,62,63,108,109,470,473],"label":"MapSubject::::doesNotContainKey(java.lang.Object)"},{"test_lines":[939,947],"covered_lines":[61,62,63,108,109,470,473],"label":"MapSubject::::doesNotContainKey(java.lang.Object)"},{"test_lines":[949,958],"covered_lines":[61,62,63,108,109,470,473],"label":"MapSubject::::doesNotContainKey(java.lang.Object)"},{"test_lines":[960,964],"covered_lines":[61,62,63,113,114,115,167,470,473],"label":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)"},{"test_lines":[966,973],"covered_lines":[61,62,63,113,114,115,116,117,118,131,141,153,164,167,470,473],"label":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)"},{"test_lines":[975,987],"covered_lines":[61,62,63,113,114,115,116,117,118,131,132,133,134,135,136,138,139,140,167,470,473],"label":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)"},{"test_lines":[989,1001],"covered_lines":[61,62,63,113,114,115,116,117,118,131,141,153,154,155,156,157,158,160,161,162,167,470,473],"label":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)"},{"test_lines":[1003,1010],"covered_lines":[61,62,63,113,114,115,116,117,118,131,141,153,164,167,470,473],"label":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)"},{"test_lines":[1012,1017],"covered_lines":[61,62,63,113,114,115,167,470,473],"label":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)"},{"test_lines":[1019,1031],"covered_lines":[61,62,63,113,114,115,116,117,118,131,141,142,143,144,145,147,148,149,150,151,152,153,167,470,473],"label":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)"},{"test_lines":[1036,1048],"covered_lines":[61,62,63,113,114,115,116,117,118,119,125,126,127,130,131,167,470,473],"label":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)"},{"test_lines":[1050,1059],"covered_lines":[61,62,63,113,114,115,116,117,118,119,125,126,130,131,167,470,473],"label":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)"},{"test_lines":[1061,1068],"covered_lines":[61,62,63,171,172,173,174,470,473],"label":"MapSubject::::doesNotContainEntry(java.lang.Object,java.lang.Object)"},{"test_lines":[1070,1078],"covered_lines":[61,62,63,171,172,173,174,470,473],"label":"MapSubject::::doesNotContainEntry(java.lang.Object,java.lang.Object)"},{"test_lines":[1080,1086],"covered_lines":[61,62,63,171,172,173,174,470,473],"label":"MapSubject::::doesNotContainEntry(java.lang.Object,java.lang.Object)"},{"test_lines":[1088,1097],"covered_lines":[61,62,63,171,172,173,174,470,473],"label":"MapSubject::::doesNotContainEntry(java.lang.Object,java.lang.Object)"},{"test_lines":[1099,1107],"covered_lines":[61,62,63,103,104,470,473],"label":"MapSubject::::containsKey(java.lang.Object)"},{"test_lines":[1109,1117],"covered_lines":[61,62,63,103,104,470,473],"label":"MapSubject::::containsKey(java.lang.Object)"},{"test_lines":[1119,1127],"covered_lines":[61,62,63,108,109,470,473],"label":"MapSubject::::containsKey(java.lang.Object)"},{"test_lines":[1129,1133],"covered_lines":[61,62,63,113,114,115,167,470,473],"label":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)"},{"test_lines":[1135,1140],"covered_lines":[61,62,63,113,114,115,167,470,473],"label":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)"},{"test_lines":[1142,1153],"covered_lines":[61,62,63,113,114,115,116,117,118,119,125,126,130,131,167,470,473],"label":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)"},{"test_lines":[1155,1167],"covered_lines":[61,62,63,113,114,115,116,117,118,119,125,126,127,130,131,167,470,473],"label":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)"},{"test_lines":[1169,1180],"covered_lines":[61,62,63,113,114,115,116,117,118,119,125,126,127,130,131,167,470,473],"label":"MapSubject::::containsEntry(java.lang.Object,java.lang.Object)"},{"test_lines":[1182,1188],"covered_lines":[61,62,63,470,473,500,545,546,547,555,557,558,559,562,765],"label":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)"},{"test_lines":[1190,1202],"covered_lines":[61,62,63,470,473,500,545,546,547,555,557,558,559,565,566,578,579,580,581,582,583,584,585,586,588,622,765],"label":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)"},{"test_lines":[1204,1218],"covered_lines":[61,62,63,470,473,500,545,546,547,555,590,591,592,593,594,596,597,599,600,601,602,603,604,605,606,607,608,622,765],"label":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)"},{"test_lines":[1220,1228],"covered_lines":[61,62,63,470,473,500,545,546,547,555,590,591,592,593,596,597,611,612,613,614,615,616,617,618,619,622,765],"label":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)"},{"test_lines":[1230,1242],"covered_lines":[61,62,63,470,473,500,545,546,547,555,557,558,559,565,566,567,568,569,570,571,572,573,574,575,576,588,622,765],"label":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)"},{"test_lines":[1244,1270],"covered_lines":[61,62,63,470,473,500,545,546,547,555,557,558,559,565,566,578,579,580,581,582,583,584,585,586,588,622,765],"label":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)"},{"test_lines":[1272,1293],"covered_lines":[61,62,63,470,473,500,545,546,547,555,557,558,559,565,566,578,579,580,581,582,583,584,585,586,588,622,765],"label":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)"},{"test_lines":[1295,1319],"covered_lines":[61,62,63,470,473,500,545,546,547,555,590,591,592,593,594,596,597,599,600,601,602,603,604,605,606,607,608,622,765],"label":"MapSubject.UsingCorrespondence::::containsEntry(java.lang.Object,E)"},{"test_lines":[1321,1327],"covered_lines":[61,62,63,470,473,500,545,546,547,630,632,633,634,647,658,765],"label":"MapSubject.UsingCorrespondence::::doesNotContainEntry(java.lang.Object,E)"},{"test_lines":[1329,1335],"covered_lines":[61,62,63,470,473,500,545,546,547,630,658],"label":"MapSubject.UsingCorrespondence::::doesNotContainEntry(java.lang.Object,E)"},{"test_lines":[1337,1343],"covered_lines":[61,62,63,470,473,500,545,546,547,630,658],"label":"MapSubject.UsingCorrespondence::::doesNotContainEntry(java.lang.Object,E)"},{"test_lines":[1345,1355],"covered_lines":[61,62,63,470,473,500,545,546,547,630,632,633,634,637,638,639,640,641,642,643,644,647,658,765],"label":"MapSubject.UsingCorrespondence::::doesNotContainEntry(java.lang.Object,E)"},{"test_lines":[1357,1377],"covered_lines":[61,62,63,470,473,500,545,546,547,630,632,633,634,647,648,649,650,651,652,653,654,655,658,765],"label":"MapSubject.UsingCorrespondence::::doesNotContainEntry(java.lang.Object,E)"},{"test_lines":[1379,1385],"covered_lines":[61,62,63,204,210,211,212,213,214,215,216,217,219,220,224,311,312,313,314,315,316,317,319,320,323,326,327,330,331,338,339,340,341,342,343,346,429,430,431,432,433,470,473,500,545,546,547,675,676,704,712,729,730,731,732,735,738,741,745,765],"label":"MapSubject.UsingCorrespondence::::containsExactly(java.lang.Object,E,java.lang.Object[])"},{"test_lines":[1387,1394],"covered_lines":[61,62,63,204,210,211,212,213,214,215,216,217,219,220,224,311,312,313,314,315,316,317,319,320,323,326,327,330,331,338,339,340,341,342,343,346,429,430,431,432,433,444,445,446,447,448,449,466,470,473,500,545,546,547,675,676,704,712,729,730,731,732,735,738,741,745,765],"label":"MapSubject.UsingCorrespondence::::containsExactly(java.lang.Object,E,java.lang.Object[])"},{"test_lines":[1396,1415],"covered_lines":[61,62,63,204,210,211,212,213,214,219,220,224,311,312,313,314,315,316,317,319,320,323,326,327,330,331,338,339,340,341,342,343,346,350,351,352,355,359,362,366,367,369,370,371,372,373,379,380,381,382,383,415,416,417,470,473,500,545,546,547,675,676,704,712,729,730,731,732,735,738,741,747,748,749,750,751,752,753,754,755,756,760,765],"label":"MapSubject.UsingCorrespondence::::containsExactly(java.lang.Object,E,java.lang.Object[])"},{"test_lines":[1417,1433],"covered_lines":[61,62,63,204,210,211,212,213,214,215,216,217,219,220,224,311,312,313,314,315,316,317,319,320,323,324,326,327,330,331,338,339,340,341,342,343,346,350,351,352,355,359,360,362,363,364,365,366,369,373,379,380,381,382,383,415,416,417,470,473,500,545,546,547,675,676,704,712,729,730,731,732,735,738,741,747,748,749,750,751,752,753,754,755,756,760,765],"label":"MapSubject.UsingCorrespondence::::containsExactly(java.lang.Object,E,java.lang.Object[])"},{"test_lines":[1435,1456],"covered_lines":[61,62,63,204,210,211,212,213,214,215,216,217,219,220,224,311,312,313,314,315,316,317,319,320,323,324,326,327,330,331,338,339,340,341,342,343,346,350,351,352,355,359,360,362,363,364,365,366,367,369,370,371,372,373,379,380,381,382,383,415,416,417,470,473,500,545,546,547,675,676,704,712,729,730,731,732,735,738,741,747,748,749,750,751,752,753,754,755,756,760,765],"label":"MapSubject.UsingCorrespondence::::containsExactly(java.lang.Object,E,java.lang.Object[])"},{"test_lines":[1458,1476],"covered_lines":[61,62,63,204,210,211,212,213,214,215,216,217,219,220,224,311,312,313,314,315,316,317,319,320,321,323,326,327,330,331,338,339,340,341,342,343,346,350,351,352,353,355,356,357,358,359,362,366,369,373,379,380,381,382,383,391,392,393,394,397,398,400,401,402,404,405,406,410,415,416,417,470,473,500,545,546,547,675,676,704,712,729,730,731,732,735,738,741,747,748,749,750,751,752,753,754,755,756,760,765],"label":"MapSubject.UsingCorrespondence::::containsExactly(java.lang.Object,E,java.lang.Object[])"},{"test_lines":[1478,1500],"covered_lines":[61,62,63,204,210,211,212,213,214,215,216,217,219,220,224,311,312,313,314,315,316,317,319,320,321,323,326,327,330,331,338,339,340,341,342,343,346,350,351,352,353,355,356,357,358,359,362,366,369,373,379,380,381,382,383,391,392,393,394,397,398,400,401,402,404,405,406,410,415,416,417,470,473,500,545,546,547,675,676,704,712,729,730,731,732,735,738,741,747,748,749,750,751,752,753,754,755,756,760,765],"label":"MapSubject.UsingCorrespondence::::containsExactly(java.lang.Object,E,java.lang.Object[])"},{"test_lines":[1502,1513],"covered_lines":[61,62,63,204,210,211,212,213,214,215,216,217,219,220,224,311,312,313,314,315,316,317,319,320,323,326,327,330,331,338,339,340,341,342,343,346,429,430,431,432,433,444,445,446,447,448,449,451,452,453,457,458,461,462,464,466,470,473,500,545,546,547,675,676,704,712,729,730,731,732,735,738,741,745,765],"label":"MapSubject.UsingCorrespondence::::containsExactly(java.lang.Object,E,java.lang.Object[])"},{"test_lines":[1515,1535],"covered_lines":[61,62,63,204,210,211,212,213,214,215,216,217,219,220,224,311,312,313,314,315,316,317,319,320,321,323,326,327,330,331,338,339,340,341,342,343,346,350,351,352,353,355,356,357,358,359,362,366,369,373,379,380,381,382,383,391,392,393,394,397,398,400,401,402,404,405,406,410,415,416,417,470,473,500,545,546,547,675,676,704,712,729,730,731,732,735,738,741,747,748,749,750,751,752,753,754,755,756,760,765],"label":"MapSubject.UsingCorrespondence::::containsExactly(java.lang.Object,E,java.lang.Object[])"},{"test_lines":[1537,1557],"covered_lines":[61,62,63,204,210,211,212,213,214,215,216,217,219,220,224,311,312,313,314,315,316,317,319,320,321,323,326,327,330,331,338,339,340,341,342,343,346,350,351,352,353,355,356,357,358,359,362,366,369,373,379,380,381,382,383,391,392,393,394,397,398,400,401,402,404,405,406,410,415,416,417,470,473,500,545,546,547,675,676,704,712,729,730,731,732,735,738,741,747,748,749,750,751,752,753,754,755,756,760,765],"label":"MapSubject.UsingCorrespondence::::containsExactly(java.lang.Object,E,java.lang.Object[])"},{"test_lines":[1559,1566],"covered_lines":[61,62,63,311,312,313,314,315,316,317,319,320,323,326,327,330,331,338,339,340,341,342,343,346,429,430,431,432,433,470,473,500,545,546,547,704,712,729,730,731,732,735,738,741,745,765],"label":"MapSubject.UsingCorrespondence::::containsExactlyEntriesIn(java.util.Map<?, ? extends E>)"},{"test_lines":[1568,1576],"covered_lines":[61,62,63,311,312,313,314,315,316,317,319,320,323,326,327,330,331,338,339,340,341,342,343,346,429,430,431,432,433,444,445,446,447,448,449,466,470,473,500,545,546,547,704,712,729,730,731,732,735,738,741,745,765],"label":"MapSubject.UsingCorrespondence::::containsExactlyEntriesIn(java.util.Map<?, ? extends E>)"},{"test_lines":[1578,1595],"covered_lines":[61,62,63,311,312,313,314,315,316,317,319,320,323,326,327,330,331,338,339,340,341,342,343,346,350,351,352,355,359,362,366,367,369,370,371,372,373,379,380,381,382,383,415,416,417,470,473,500,545,546,547,704,712,729,730,731,732,735,738,741,747,748,749,750,751,752,753,754,755,756,760,765],"label":"MapSubject.UsingCorrespondence::::containsExactlyEntriesIn(java.util.Map<?, ? extends E>)"},{"test_lines":[1597,1614],"covered_lines":[61,62,63,311,312,313,314,315,316,317,319,320,323,324,326,327,330,331,338,339,340,341,342,343,346,350,351,352,355,359,360,362,363,364,365,366,369,373,379,380,381,382,383,415,416,417,470,473,500,545,546,547,704,712,729,730,731,732,735,738,741,747,748,749,750,751,752,753,754,755,756,760,765],"label":"MapSubject.UsingCorrespondence::::containsExactlyEntriesIn(java.util.Map<?, ? extends E>)"},{"test_lines":[1616,1638],"covered_lines":[61,62,63,311,312,313,314,315,316,317,319,320,323,324,326,327,330,331,338,339,340,341,342,343,346,350,351,352,355,359,360,362,363,364,365,366,367,369,370,371,372,373,379,380,381,382,383,415,416,417,470,473,500,545,546,547,704,712,729,730,731,732,735,738,741,747,748,749,750,751,752,753,754,755,756,760,765],"label":"MapSubject.UsingCorrespondence::::containsExactlyEntriesIn(java.util.Map<?, ? extends E>)"},{"test_lines":[1640,1659],"covered_lines":[61,62,63,311,312,313,314,315,316,317,319,320,321,323,326,327,330,331,338,339,340,341,342,343,346,350,351,352,353,355,356,357,358,359,362,366,369,373,379,380,381,382,383,391,392,393,394,397,398,400,401,402,404,405,406,410,415,416,417,470,473,500,545,546,547,704,712,729,730,731,732,735,738,741,747,748,749,750,751,752,753,754,755,756,760,765],"label":"MapSubject.UsingCorrespondence::::containsExactlyEntriesIn(java.util.Map<?, ? extends E>)"},{"test_lines":[1661,1688],"covered_lines":[61,62,63,311,312,313,314,315,316,317,319,320,321,323,324,326,327,330,331,338,339,340,341,342,343,346,350,351,352,353,355,356,357,358,359,360,362,363,364,365,366,367,369,370,371,372,373,379,380,381,382,383,391,392,393,394,397,398,400,401,402,404,405,406,407,410,415,416,417,470,473,500,545,546,547,704,712,729,730,731,732,735,738,741,747,748,749,750,751,752,753,754,755,756,760,765],"label":"MapSubject.UsingCorrespondence::::containsExactlyEntriesIn(java.util.Map<?, ? extends E>)"},{"test_lines":[1690,1721],"covered_lines":[61,62,63,311,312,313,314,315,316,317,319,320,321,323,326,327,330,331,338,339,340,341,342,343,346,350,351,352,353,355,356,357,358,359,362,366,369,373,379,380,381,382,383,391,392,393,394,397,398,400,401,402,404,405,406,410,415,416,417,470,473,500,545,546,547,704,712,729,730,731,732,735,738,741,747,748,749,750,751,752,753,754,755,756,760,765],"label":"MapSubject.UsingCorrespondence::::containsExactlyEntriesIn(java.util.Map<?, ? extends E>)"},{"test_lines":[1723,1733],"covered_lines":[61,62,63,311,312,313,314,315,316,317,319,320,323,326,327,330,331,338,339,340,341,342,343,346,429,430,431,432,433,444,445,446,447,448,449,451,452,453,457,458,461,462,464,466,470,473,500,545,546,547,704,712,729,730,731,732,735,738,741,745,765],"label":"MapSubject.UsingCorrespondence::::containsExactlyEntriesIn(java.util.Map<?, ? extends E>)"},{"test_lines":[1735,1742],"covered_lines":[61,62,63,470,473,500,545,546,547,704,705,706],"label":"MapSubject.UsingCorrespondence::::containsExactlyEntriesIn(java.util.Map<?, ? extends E>)"},{"test_lines":[1744,1752],"covered_lines":[61,62,63,83,84,86,470,473,500,545,546,547,704,705,708,709],"label":"MapSubject.UsingCorrespondence::::containsExactlyEntriesIn(java.util.Map<?, ? extends E>)"},{"test_lines":[1754,1775],"covered_lines":[61,62,63,311,312,313,314,315,316,317,319,320,321,323,326,327,330,331,338,339,340,341,342,343,346,350,351,352,353,355,356,357,358,359,362,366,369,373,379,380,381,382,383,391,392,393,394,397,398,400,401,402,404,405,406,410,415,416,417,470,473,500,545,546,547,704,712,729,730,731,732,735,738,741,747,748,749,750,751,752,753,754,755,756,760,765],"label":"MapSubject.UsingCorrespondence::::containsExactlyEntriesIn(java.util.Map<?, ? extends E>)"},{"test_lines":[1777,1783],"covered_lines":[61,62,63,204,210,211,212,213,214,215,216,217,219,220,224,311,312,313,314,315,316,317,319,320,323,326,327,328,330,331,338,339,340,341,342,343,346,429,430,431,432,433,470,473,500,545,546,547,694,695,721,724,729,730,731,732,735,738,741,745,765],"label":"MapSubject.UsingCorrespondence::::containsAtLeast(java.lang.Object,E,java.lang.Object[])"},{"test_lines":[1785,1792],"covered_lines":[61,62,63,204,210,211,212,213,214,215,216,217,219,220,224,311,312,313,314,315,316,317,319,320,323,326,327,328,330,331,338,339,340,341,342,343,346,429,430,431,432,433,444,445,446,447,448,449,466,470,473,500,545,546,547,694,695,721,724,729,730,731,732,735,738,741,745,765],"label":"MapSubject.UsingCorrespondence::::containsAtLeast(java.lang.Object,E,java.lang.Object[])"},{"test_lines":[1794,1811],"covered_lines":[61,62,63,204,210,211,212,213,214,215,216,217,219,220,224,311,312,313,314,315,316,317,319,320,323,324,326,327,328,330,331,338,339,340,341,342,343,346,350,351,352,355,359,360,362,363,364,365,366,369,373,379,380,381,382,383,415,416,417,470,473,500,545,546,547,694,695,721,724,729,730,731,732,735,738,741,747,748,749,750,751,752,753,754,755,756,760,765],"label":"MapSubject.UsingCorrespondence::::containsAtLeast(java.lang.Object,E,java.lang.Object[])"},{"test_lines":[1813,1829],"covered_lines":[61,62,63,204,210,211,212,213,214,215,216,217,219,220,224,311,312,313,314,315,316,317,319,320,323,324,326,327,328,330,331,338,339,340,341,342,343,346,350,351,352,355,359,360,362,363,364,365,366,369,373,379,380,381,382,383,415,416,417,470,473,500,545,546,547,694,695,721,724,729,730,731,732,735,738,741,747,748,749,750,751,752,753,754,755,756,760,765],"label":"MapSubject.UsingCorrespondence::::containsAtLeast(java.lang.Object,E,java.lang.Object[])"},{"test_lines":[1831,1849],"covered_lines":[61,62,63,204,210,211,212,213,214,219,220,224,311,312,313,314,315,316,317,319,320,321,323,326,327,328,330,331,338,339,340,341,342,343,346,350,351,352,353,355,356,357,358,359,362,366,369,373,379,380,381,382,383,391,392,393,394,397,398,400,401,402,404,405,406,410,415,416,417,470,473,500,545,546,547,694,695,721,724,729,730,731,732,735,738,741,747,748,749,750,751,752,753,754,755,756,760,765],"label":"MapSubject.UsingCorrespondence::::containsAtLeast(java.lang.Object,E,java.lang.Object[])"},{"test_lines":[1851,1874],"covered_lines":[61,62,63,204,210,211,212,213,214,215,216,217,219,220,224,311,312,313,314,315,316,317,319,320,321,323,326,327,328,330,331,338,339,340,341,342,343,346,350,351,352,353,355,356,357,358,359,362,366,369,373,379,380,381,382,383,391,392,393,394,397,398,400,401,402,404,405,406,410,415,416,417,470,473,500,545,546,547,694,695,721,724,729,730,731,732,735,738,741,747,748,749,750,751,752,753,754,755,756,760,765],"label":"MapSubject.UsingCorrespondence::::containsAtLeast(java.lang.Object,E,java.lang.Object[])"},{"test_lines":[1876,1890],"covered_lines":[61,62,63,204,210,211,212,213,214,215,216,217,219,220,224,311,312,313,314,315,316,317,319,320,323,326,327,328,330,331,338,339,340,341,342,343,346,429,430,431,432,433,444,445,446,447,448,449,451,452,453,457,458,461,462,464,466,470,473,500,545,546,547,694,695,721,724,729,730,731,732,735,738,741,745,765],"label":"MapSubject.UsingCorrespondence::::containsAtLeast(java.lang.Object,E,java.lang.Object[])"},{"test_lines":[1892,1912],"covered_lines":[61,62,63,204,210,211,212,213,214,219,220,224,311,312,313,314,315,316,317,319,320,321,323,326,327,328,330,331,338,339,340,341,342,343,346,350,351,352,353,355,356,357,358,359,362,366,369,373,379,380,381,382,383,391,392,393,394,397,398,400,401,402,404,405,406,410,415,416,417,470,473,500,545,546,547,694,695,721,724,729,730,731,732,735,738,741,747,748,749,750,751,752,753,754,755,756,760,765],"label":"MapSubject.UsingCorrespondence::::containsAtLeast(java.lang.Object,E,java.lang.Object[])"},{"test_lines":[1914,1920],"covered_lines":[61,62,63,204,210,211,212,213,214,219,220,224,311,312,313,314,315,316,317,319,320,323,326,327,328,330,331,338,339,340,341,342,343,346,429,430,431,432,433,470,473,500,545,546,547,694,695,721,724,729,730,731,732,735,738,741,745,765],"label":"MapSubject.UsingCorrespondence::::containsAtLeast(java.lang.Object,E,java.lang.Object[])"},{"test_lines":[1922,1942],"covered_lines":[61,62,63,204,210,211,212,213,214,215,216,217,219,220,224,311,312,313,314,315,316,317,319,320,321,323,326,327,328,330,331,338,339,340,341,342,343,346,350,351,352,353,355,356,357,358,359,362,366,369,373,379,380,381,382,383,391,392,393,394,397,398,400,401,402,404,405,406,410,415,416,417,470,473,500,545,546,547,694,695,721,724,729,730,731,732,735,738,741,747,748,749,750,751,752,753,754,755,756,760,765],"label":"MapSubject.UsingCorrespondence::::containsAtLeast(java.lang.Object,E,java.lang.Object[])"},{"test_lines":[1944,1951],"covered_lines":[61,62,63,311,312,313,314,315,316,317,319,320,323,326,327,328,330,331,338,339,340,341,342,343,346,429,430,431,432,433,470,473,500,545,546,547,721,724,729,730,731,732,735,738,741,745,765],"label":"MapSubject.UsingCorrespondence::::containsAtLeastEntriesIn(java.util.Map<?, ? extends E>)"},{"test_lines":[1953,1961],"covered_lines":[61,62,63,311,312,313,314,315,316,317,319,320,323,326,327,328,330,331,338,339,340,341,342,343,346,429,430,431,432,433,444,445,446,447,448,449,466,470,473,500,545,546,547,721,724,729,730,731,732,735,738,741,745,765],"label":"MapSubject.UsingCorrespondence::::containsAtLeastEntriesIn(java.util.Map<?, ? extends E>)"},{"test_lines":[1963,1980],"covered_lines":[61,62,63,311,312,313,314,315,316,317,319,320,323,324,326,327,328,330,331,338,339,340,341,342,343,346,350,351,352,355,359,360,362,363,364,365,366,369,373,379,380,381,382,383,415,416,417,470,473,500,545,546,547,721,724,729,730,731,732,735,738,741,747,748,749,750,751,752,753,754,755,756,760,765],"label":"MapSubject.UsingCorrespondence::::containsAtLeastEntriesIn(java.util.Map<?, ? extends E>)"},{"test_lines":[1982,1999],"covered_lines":[61,62,63,311,312,313,314,315,316,317,319,320,323,324,326,327,328,330,331,338,339,340,341,342,343,346,350,351,352,355,359,360,362,363,364,365,366,369,373,379,380,381,382,383,415,416,417,470,473,500,545,546,547,721,724,729,730,731,732,735,738,741,747,748,749,750,751,752,753,754,755,756,760,765],"label":"MapSubject.UsingCorrespondence::::containsAtLeastEntriesIn(java.util.Map<?, ? extends E>)"},{"test_lines":[2001,2020],"covered_lines":[61,62,63,311,312,313,314,315,316,317,319,320,321,323,326,327,328,330,331,338,339,340,341,342,343,346,350,351,352,353,355,356,357,358,359,362,366,369,373,379,380,381,382,383,391,392,393,394,397,398,400,401,402,404,405,406,410,415,416,417,470,473,500,545,546,547,721,724,729,730,731,732,735,738,741,747,748,749,750,751,752,753,754,755,756,760,765],"label":"MapSubject.UsingCorrespondence::::containsAtLeastEntriesIn(java.util.Map<?, ? extends E>)"},{"test_lines":[2022,2048],"covered_lines":[61,62,63,311,312,313,314,315,316,317,319,320,321,323,324,326,327,328,330,331,338,339,340,341,342,343,346,350,351,352,353,355,356,357,358,359,360,362,363,364,365,366,369,373,379,380,381,382,383,391,392,393,394,397,398,400,401,402,404,405,406,407,410,415,416,417,470,473,500,545,546,547,721,724,729,730,731,732,735,738,741,747,748,749,750,751,752,753,754,755,756,760,765],"label":"MapSubject.UsingCorrespondence::::containsAtLeastEntriesIn(java.util.Map<?, ? extends E>)"},{"test_lines":[2050,2081],"covered_lines":[61,62,63,311,312,313,314,315,316,317,319,320,321,323,326,327,328,330,331,338,339,340,341,342,343,346,350,351,352,353,355,356,357,358,359,362,366,369,373,379,380,381,382,383,391,392,393,394,397,398,400,401,402,404,405,406,410,415,416,417,470,473,500,545,546,547,721,724,729,730,731,732,735,738,741,747,748,749,750,751,752,753,754,755,756,760,765],"label":"MapSubject.UsingCorrespondence::::containsAtLeastEntriesIn(java.util.Map<?, ? extends E>)"},{"test_lines":[2083,2096],"covered_lines":[61,62,63,311,312,313,314,315,316,317,319,320,323,326,327,328,330,331,338,339,340,341,342,343,346,429,430,431,432,433,444,445,446,447,448,449,451,452,453,457,458,461,462,464,466,470,473,500,545,546,547,721,724,729,730,731,732,735,738,741,745,765],"label":"MapSubject.UsingCorrespondence::::containsAtLeastEntriesIn(java.util.Map<?, ? extends E>)"},{"test_lines":[2098,2105],"covered_lines":[61,62,63,470,473,500,545,546,547,721,722],"label":"MapSubject.UsingCorrespondence::::containsAtLeastEntriesIn(java.util.Map<?, ? extends E>)"},{"test_lines":[2107,2128],"covered_lines":[61,62,63,311,312,313,314,315,316,317,319,320,321,323,326,327,328,330,331,338,339,340,341,342,343,346,350,351,352,353,355,356,357,358,359,362,366,369,373,379,380,381,382,383,391,392,393,394,397,398,400,401,402,404,405,406,410,415,416,417,470,473,500,545,546,547,721,724,729,730,731,732,735,738,741,747,748,749,750,751,752,753,754,755,756,760,765],"label":"MapSubject.UsingCorrespondence::::containsAtLeastEntriesIn(java.util.Map<?, ? extends E>)"},{"test_lines":[2130,2138],"covered_lines":[61,62,63,311,312,313,314,315,316,317,319,320,323,326,327,328,330,331,338,339,340,341,342,343,346,429,430,431,432,433,470,473,500,545,546,547,721,724,729,730,731,732,735,738,741,745,765],"label":"MapSubject.UsingCorrespondence::::containsAtLeastEntriesIn(java.util.Map<?, ? extends E>)"},{"test_lines":[2140,2146],"covered_lines":[61,62,63,204,210,211,212,213,214,215,216,217,219,220,224,311,312,313,314,315,316,317,319,320,323,326,327,330,331,338,339,340,341,342,343,346,429,430,431,432,433,470,473,500,531,545,546,547,675,676,704,712,729,730,731,732,735,738,741,745,765],"label":"MapSubject.UsingCorrespondence::::containsExactly(java.lang.Object,E,java.lang.Object[])"},{"test_lines":[2148,2168],"covered_lines":[61,62,63,204,210,211,212,213,214,215,216,217,219,220,224,311,312,313,314,315,316,317,319,320,321,323,326,327,330,331,338,339,340,341,342,343,346,350,351,352,353,355,356,357,358,359,362,366,369,373,379,380,381,382,383,391,392,393,394,397,398,400,401,402,404,405,406,407,410,415,416,417,470,473,500,531,545,546,547,675,676,704,712,729,730,731,732,735,738,741,747,748,749,750,751,752,753,754,755,756,760,765],"label":"MapSubject.UsingCorrespondence::::containsExactly(java.lang.Object,E,java.lang.Object[])"}]},"/bernard/dataset_construction/prep/repos/truth/core/src/main/java/com/google/common/truth/LongSubject.java":{"class_content":["/*\n"," * Copyright (c) 2011 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.base.Preconditions.checkArgument;\n","import static com.google.common.base.Preconditions.checkNotNull;\n","import static com.google.common.truth.Fact.fact;\n","import static com.google.common.truth.MathUtil.equalWithinTolerance;\n","\n","import org.checkerframework.checker.nullness.qual.Nullable;\n","\n","/**\n"," * Propositions for {@code long} subjects.\n"," *\n"," * @author David Saff\n"," * @author Christian Gruber (cgruber@israfil.net)\n"," * @author Kurt Alfred Kluever\n"," */\n","public class LongSubject extends ComparableSubject<Long> {\n","\n","  private final @Nullable Long actual;\n","\n","  /**\n","   * Constructor for use by subclasses. If you want to create an instance of this class itself, call\n","   * {@link Subject#check(String, Object...) check(...)}{@code .that(actual)}.\n","   */\n","  protected LongSubject(FailureMetadata metadata, @Nullable Long actual) {\n","    super(metadata, actual);\n","    this.actual = actual;\n","  }\n","\n","  /**\n","   * A partially specified check about an approximate relationship to a {@code long} subject using a\n","   * tolerance.\n","   *\n","   * @since 1.2\n","   */\n","  public abstract static class TolerantLongComparison {\n","\n","    // Prevent subclassing outside of this class\n","    private TolerantLongComparison() {}\n","\n","    /**\n","     * Fails if the subject was expected to be within the tolerance of the given value but was not\n","     * <i>or</i> if it was expected <i>not</i> to be within the tolerance but was. The subject and\n","     * tolerance are specified earlier in the fluent call chain.\n","     */\n","    public abstract void of(long expectedLong);\n","\n","    /**\n","     * @throws UnsupportedOperationException always\n","     * @deprecated {@link Object#equals(Object)} is not supported on TolerantLongComparison. If you\n","     *     meant to compare longs, use {@link #of(long)} instead.\n","     */\n","    @Deprecated\n","    @Override\n","    public boolean equals(@Nullable Object o) {\n","      throw new UnsupportedOperationException(\n","          \"If you meant to compare longs, use .of(long) instead.\");\n","    }\n","\n","    /**\n","     * @throws UnsupportedOperationException always\n","     * @deprecated {@link Object#hashCode()} is not supported on TolerantLongComparison\n","     */\n","    @Deprecated\n","    @Override\n","    public int hashCode() {\n","      throw new UnsupportedOperationException(\"Subject.hashCode() is not supported.\");\n","    }\n","  }\n","\n","  /**\n","   * Prepares for a check that the subject is a number within the given tolerance of an expected\n","   * value that will be provided in the next call in the fluent chain.\n","   *\n","   * @param tolerance an inclusive upper bound on the difference between the subject and object\n","   *     allowed by the check, which must be a non-negative value.\n","   * @since 1.2\n","   */\n","  public TolerantLongComparison isWithin(long tolerance) {\n","    return new TolerantLongComparison() {\n","      @Override\n","      public void of(long expected) {\n","        Long actual = LongSubject.this.actual;\n","        checkNotNull(\n","            actual, \"actual value cannot be null. tolerance=%s expected=%s\", tolerance, expected);\n","        checkTolerance(tolerance);\n","\n","        if (!equalWithinTolerance(actual, expected, tolerance)) {\n","          failWithoutActual(\n","              fact(\"expected\", Long.toString(expected)),\n","              butWas(),\n","              fact(\"outside tolerance\", Long.toString(tolerance)));\n","        }\n","      }\n","    };\n","  }\n","\n","  /**\n","   * Prepares for a check that the subject is a number not within the given tolerance of an expected\n","   * value that will be provided in the next call in the fluent chain.\n","   *\n","   * @param tolerance an exclusive lower bound on the difference between the subject and object\n","   *     allowed by the check, which must be a non-negative value.\n","   * @since 1.2\n","   */\n","  public TolerantLongComparison isNotWithin(long tolerance) {\n","    return new TolerantLongComparison() {\n","      @Override\n","      public void of(long expected) {\n","        Long actual = LongSubject.this.actual;\n","        checkNotNull(\n","            actual, \"actual value cannot be null. tolerance=%s expected=%s\", tolerance, expected);\n","        checkTolerance(tolerance);\n","\n","        if (equalWithinTolerance(actual, expected, tolerance)) {\n","          failWithoutActual(\n","              fact(\"expected not to be\", Long.toString(expected)),\n","              butWas(),\n","              fact(\"within tolerance\", Long.toString(tolerance)));\n","        }\n","      }\n","    };\n","  }\n","\n","  /**\n","   * @deprecated Use {@link #isEqualTo} instead. Long comparison is consistent with equality.\n","   */\n","  @Override\n","  @Deprecated\n","  public final void isEquivalentAccordingToCompareTo(@Nullable Long other) {\n","    super.isEquivalentAccordingToCompareTo(other);\n","  }\n","\n","  /** Ensures that the given tolerance is a non-negative value. */\n","  private static void checkTolerance(long tolerance) {\n","    checkArgument(tolerance >= 0, \"tolerance (%s) cannot be negative\", tolerance);\n","  }\n","\n","  /**\n","   * Checks that the subject is greater than {@code other}.\n","   *\n","   * <p>To check that the subject is greater than <i>or equal to</i> {@code other}, use {@link\n","   * #isAtLeast}.\n","   */\n","  public final void isGreaterThan(int other) {\n","    isGreaterThan((long) other);\n","  }\n","\n","  /**\n","   * Checks that the subject is less than {@code other}.\n","   *\n","   * <p>To check that the subject is less than <i>or equal to</i> {@code other}, use {@link\n","   * #isAtMost} .\n","   */\n","  public final void isLessThan(int other) {\n","    isLessThan((long) other);\n","  }\n","\n","  /**\n","   * Checks that the subject is less than or equal to {@code other}.\n","   *\n","   * <p>To check that the subject is <i>strictly</i> less than {@code other}, use {@link\n","   * #isLessThan}.\n","   */\n","  public final void isAtMost(int other) {\n","    isAtMost((long) other);\n","  }\n","\n","  /**\n","   * Checks that the subject is greater than or equal to {@code other}.\n","   *\n","   * <p>To check that the subject is <i>strictly</i> greater than {@code other}, use {@link\n","   * #isGreaterThan}.\n","   */\n","  public final void isAtLeast(int other) {\n","    isAtLeast((long) other);\n","  }\n","}\n"],"test_content":["/*\n"," * Copyright (c) 2011 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.truth.ExpectFailure.assertThat;\n","import static com.google.common.truth.Truth.assertThat;\n","import static org.junit.Assert.fail;\n","\n","import com.google.common.truth.ExpectFailure.SimpleSubjectBuilderCallback;\n","import com.google.errorprone.annotations.CanIgnoreReturnValue;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import org.junit.runners.JUnit4;\n","\n","/**\n"," * Tests for Long Subjects.\n"," *\n"," * @author David Saff\n"," * @author Christian Gruber\n"," * @author Kurt Alfred Kluever\n"," */\n","@RunWith(JUnit4.class)\n","public class LongSubjectTest extends BaseSubjectTestCase {\n","\n","  @Test\n","  @SuppressWarnings(\"TruthSelfEquals\")\n","  public void simpleEquality() {\n","    assertThat(4L).isEqualTo(4L);\n","  }\n","\n","  @Test\n","  public void simpleInequality() {\n","    assertThat(4L).isNotEqualTo(5L);\n","  }\n","\n","  @Test\n","  public void equalityWithInts() {\n","    assertThat(0L).isEqualTo(0);\n","    expectFailureWhenTestingThat(0L).isNotEqualTo(0);\n","  }\n","\n","  @Test\n","  public void equalityFail() {\n","    expectFailureWhenTestingThat(4L).isEqualTo(5L);\n","  }\n","\n","  @Test\n","  public void inequalityFail() {\n","    expectFailureWhenTestingThat(4L).isNotEqualTo(4L);\n","  }\n","\n","  @Test\n","  public void equalityOfNulls() {\n","    assertThat((Long) null).isEqualTo(null);\n","  }\n","\n","  @Test\n","  public void equalityOfNullsFail_nullActual() {\n","    expectFailureWhenTestingThat(null).isEqualTo(5L);\n","  }\n","\n","  @Test\n","  public void equalityOfNullsFail_nullExpected() {\n","    expectFailureWhenTestingThat(5L).isEqualTo(null);\n","  }\n","\n","  @Test\n","  public void inequalityOfNulls() {\n","    assertThat(4L).isNotEqualTo(null);\n","    assertThat((Integer) null).isNotEqualTo(4L);\n","  }\n","\n","  @Test\n","  public void inequalityOfNullsFail() {\n","    expectFailureWhenTestingThat(null).isNotEqualTo(null);\n","  }\n","\n","  @Test\n","  public void testNumericTypeWithSameValue_shouldBeEqual_long_long() {\n","    expectFailureWhenTestingThat(42L).isNotEqualTo(42L);\n","  }\n","\n","  @Test\n","  public void testNumericTypeWithSameValue_shouldBeEqual_long_int() {\n","    expectFailureWhenTestingThat(42L).isNotEqualTo(42);\n","  }\n","\n","  @Test\n","  public void isGreaterThan_int_strictly() {\n","    expectFailureWhenTestingThat(2L).isGreaterThan(3);\n","  }\n","\n","  @Test\n","  public void isGreaterThan_int() {\n","    expectFailureWhenTestingThat(2L).isGreaterThan(2);\n","    assertThat(2L).isGreaterThan(1);\n","  }\n","\n","  @Test\n","  public void isLessThan_int_strictly() {\n","    expectFailureWhenTestingThat(2L).isLessThan(1);\n","  }\n","\n","  @Test\n","  public void isLessThan_int() {\n","    expectFailureWhenTestingThat(2L).isLessThan(2);\n","    assertThat(2L).isLessThan(3);\n","  }\n","\n","  @Test\n","  public void isAtLeast_int() {\n","    expectFailureWhenTestingThat(2L).isAtLeast(3);\n","    assertThat(2L).isAtLeast(2);\n","    assertThat(2L).isAtLeast(1);\n","  }\n","\n","  @Test\n","  public void isAtMost_int() {\n","    expectFailureWhenTestingThat(2L).isAtMost(1);\n","    assertThat(2L).isAtMost(2);\n","    assertThat(2L).isAtMost(3);\n","  }\n","\n","  @Test\n","  public void isWithinOf() {\n","    assertThat(20000L).isWithin(0L).of(20000L);\n","    assertThat(20000L).isWithin(1L).of(20000L);\n","    assertThat(20000L).isWithin(10000L).of(20000L);\n","    assertThat(20000L).isWithin(10000L).of(30000L);\n","    assertThat(Long.MIN_VALUE).isWithin(1L).of(Long.MIN_VALUE + 1);\n","    assertThat(Long.MAX_VALUE).isWithin(1L).of(Long.MAX_VALUE - 1);\n","    assertThat(Long.MAX_VALUE / 2).isWithin(Long.MAX_VALUE).of(-Long.MAX_VALUE / 2);\n","    assertThat(-Long.MAX_VALUE / 2).isWithin(Long.MAX_VALUE).of(Long.MAX_VALUE / 2);\n","\n","    assertThatIsWithinFails(20000L, 9999L, 30000L);\n","    assertThatIsWithinFails(20000L, 10000L, 30001L);\n","    assertThatIsWithinFails(Long.MIN_VALUE, 0L, Long.MAX_VALUE);\n","    assertThatIsWithinFails(Long.MAX_VALUE, 0L, Long.MIN_VALUE);\n","    assertThatIsWithinFails(Long.MIN_VALUE, 1L, Long.MIN_VALUE + 2);\n","    assertThatIsWithinFails(Long.MAX_VALUE, 1L, Long.MAX_VALUE - 2);\n","    // Don't fall for rollover\n","    assertThatIsWithinFails(Long.MIN_VALUE, 1L, Long.MAX_VALUE);\n","    assertThatIsWithinFails(Long.MAX_VALUE, 1L, Long.MIN_VALUE);\n","  }\n","\n","  private static void assertThatIsWithinFails(long actual, long tolerance, long expected) {\n","    ExpectFailure.SimpleSubjectBuilderCallback<LongSubject, Long> callback =\n","        new ExpectFailure.SimpleSubjectBuilderCallback<LongSubject, Long>() {\n","          @Override\n","          public void invokeAssertion(SimpleSubjectBuilder<LongSubject, Long> expect) {\n","            expect.that(actual).isWithin(tolerance).of(expected);\n","          }\n","        };\n","    AssertionError failure = expectFailure(callback);\n","    assertThat(failure)\n","        .factKeys()\n","        .containsExactly(\"expected\", \"but was\", \"outside tolerance\")\n","        .inOrder();\n","    assertThat(failure).factValue(\"expected\").isEqualTo(Long.toString(expected));\n","    assertThat(failure).factValue(\"but was\").isEqualTo(Long.toString(actual));\n","    assertThat(failure).factValue(\"outside tolerance\").isEqualTo(Long.toString(tolerance));\n","  }\n","\n","  @Test\n","  public void isNotWithinOf() {\n","    assertThatIsNotWithinFails(20000L, 0L, 20000L);\n","    assertThatIsNotWithinFails(20000L, 1L, 20000L);\n","    assertThatIsNotWithinFails(20000L, 10000L, 20000L);\n","    assertThatIsNotWithinFails(20000L, 10000L, 30000L);\n","    assertThatIsNotWithinFails(Long.MIN_VALUE, 1L, Long.MIN_VALUE + 1);\n","    assertThatIsNotWithinFails(Long.MAX_VALUE, 1L, Long.MAX_VALUE - 1);\n","    assertThatIsNotWithinFails(Long.MAX_VALUE / 2, Long.MAX_VALUE, -Long.MAX_VALUE / 2);\n","    assertThatIsNotWithinFails(-Long.MAX_VALUE / 2, Long.MAX_VALUE, Long.MAX_VALUE / 2);\n","\n","    assertThat(20000L).isNotWithin(9999L).of(30000L);\n","    assertThat(20000L).isNotWithin(10000L).of(30001L);\n","    assertThat(Long.MIN_VALUE).isNotWithin(0L).of(Long.MAX_VALUE);\n","    assertThat(Long.MAX_VALUE).isNotWithin(0L).of(Long.MIN_VALUE);\n","    assertThat(Long.MIN_VALUE).isNotWithin(1L).of(Long.MIN_VALUE + 2);\n","    assertThat(Long.MAX_VALUE).isNotWithin(1L).of(Long.MAX_VALUE - 2);\n","    // Don't fall for rollover\n","    assertThat(Long.MIN_VALUE).isNotWithin(1L).of(Long.MAX_VALUE);\n","    assertThat(Long.MAX_VALUE).isNotWithin(1L).of(Long.MIN_VALUE);\n","  }\n","\n","  private static void assertThatIsNotWithinFails(long actual, long tolerance, long expected) {\n","    ExpectFailure.SimpleSubjectBuilderCallback<LongSubject, Long> callback =\n","        new ExpectFailure.SimpleSubjectBuilderCallback<LongSubject, Long>() {\n","          @Override\n","          public void invokeAssertion(SimpleSubjectBuilder<LongSubject, Long> expect) {\n","            expect.that(actual).isNotWithin(tolerance).of(expected);\n","          }\n","        };\n","    AssertionError failure = expectFailure(callback);\n","    assertThat(failure).factValue(\"expected not to be\").isEqualTo(Long.toString(expected));\n","    assertThat(failure).factValue(\"within tolerance\").isEqualTo(Long.toString(tolerance));\n","  }\n","\n","  @Test\n","  public void isWithinIntegers() {\n","    assertThat(20000L).isWithin(0).of(20000);\n","    assertThat(20000L).isWithin(1).of(20000);\n","    assertThat(20000L).isWithin(10000).of(20000);\n","    assertThat(20000L).isWithin(10000).of(30000);\n","\n","    assertThat(20000L).isNotWithin(0).of(200000);\n","    assertThat(20000L).isNotWithin(1).of(200000);\n","    assertThat(20000L).isNotWithin(10000).of(200000);\n","    assertThat(20000L).isNotWithin(10000).of(300000);\n","  }\n","\n","  @Test\n","  public void isWithinNegativeTolerance() {\n","    isWithinNegativeToleranceThrowsIAE(0L, -10, 5);\n","    isWithinNegativeToleranceThrowsIAE(0L, -10, 20);\n","    isNotWithinNegativeToleranceThrowsIAE(0L, -10, 5);\n","    isNotWithinNegativeToleranceThrowsIAE(0L, -10, 20);\n","  }\n","\n","  private static void isWithinNegativeToleranceThrowsIAE(\n","      long actual, long tolerance, long expected) {\n","    try {\n","      assertThat(actual).isWithin(tolerance).of(expected);\n","      fail(\"Expected IllegalArgumentException to be thrown but wasn't\");\n","    } catch (IllegalArgumentException iae) {\n","      assertThat(iae)\n","          .hasMessageThat()\n","          .isEqualTo(\"tolerance (\" + tolerance + \") cannot be negative\");\n","    }\n","  }\n","\n","  private static void isNotWithinNegativeToleranceThrowsIAE(\n","      long actual, long tolerance, long expected) {\n","    try {\n","      assertThat(actual).isNotWithin(tolerance).of(expected);\n","      fail(\"Expected IllegalArgumentException to be thrown but wasn't\");\n","    } catch (IllegalArgumentException iae) {\n","      assertThat(iae)\n","          .hasMessageThat()\n","          .isEqualTo(\"tolerance (\" + tolerance + \") cannot be negative\");\n","    }\n","  }\n","\n","  private static final Subject.Factory<LongSubject, Long> LONG_SUBJECT_FACTORY =\n","      new Subject.Factory<LongSubject, Long>() {\n","        @Override\n","        public LongSubject createSubject(FailureMetadata metadata, Long that) {\n","          return new LongSubject(metadata, that);\n","        }\n","      };\n","\n","  @CanIgnoreReturnValue\n","  private static AssertionError expectFailure(\n","      SimpleSubjectBuilderCallback<LongSubject, Long> callback) {\n","    return ExpectFailure.expectFailureAbout(LONG_SUBJECT_FACTORY, callback);\n","  }\n","\n","  private LongSubject expectFailureWhenTestingThat(Long actual) {\n","    return expectFailure.whenTesting().that(actual);\n","  }\n","}\n"],"method_lines_dic":{"LongSubject.TolerantLongComparison::::of(long)":[61,61],"LongSubject.TolerantLongComparison::::equals(java.lang.Object)":[68,73],"LongSubject.TolerantLongComparison::::hashCode()":[79,83],"LongSubject::::isWithin(long)":[94,111],"LongSubject::::isNotWithin(long)":[121,138],"LongSubject::::isEquivalentAccordingToCompareTo(java.lang.Long)":[143,147],"LongSubject::::checkTolerance(long)":[150,152],"LongSubject::::isGreaterThan(int)":[160,162],"LongSubject::::isLessThan(int)":[170,172],"LongSubject::::isAtMost(int)":[180,182],"LongSubject::::isAtLeast(int)":[190,192]},"test_method_lines_dic":{"LongSubjectTest::::simpleEquality()":[38,42],"LongSubjectTest::::simpleInequality()":[44,47],"LongSubjectTest::::equalityWithInts()":[49,53],"LongSubjectTest::::equalityFail()":[55,58],"LongSubjectTest::::inequalityFail()":[60,63],"LongSubjectTest::::equalityOfNulls()":[65,68],"LongSubjectTest::::equalityOfNullsFail_nullActual()":[70,73],"LongSubjectTest::::equalityOfNullsFail_nullExpected()":[75,78],"LongSubjectTest::::inequalityOfNulls()":[80,84],"LongSubjectTest::::inequalityOfNullsFail()":[86,89],"LongSubjectTest::::testNumericTypeWithSameValue_shouldBeEqual_long_long()":[91,94],"LongSubjectTest::::testNumericTypeWithSameValue_shouldBeEqual_long_int()":[96,99],"LongSubjectTest::::isGreaterThan_int_strictly()":[101,104],"LongSubjectTest::::isGreaterThan_int()":[106,110],"LongSubjectTest::::isLessThan_int_strictly()":[112,115],"LongSubjectTest::::isLessThan_int()":[117,121],"LongSubjectTest::::isAtLeast_int()":[123,128],"LongSubjectTest::::isAtMost_int()":[130,135],"LongSubjectTest::::isWithinOf()":[137,157],"LongSubjectTest::::assertThatIsWithinFails(long,long,long)":[159,175],"LongSubjectTest::::isNotWithinOf()":[177,197],"LongSubjectTest::::assertThatIsNotWithinFails(long,long,long)":[199,210],"LongSubjectTest::::isWithinIntegers()":[212,223],"LongSubjectTest::::isWithinNegativeTolerance()":[225,231],"LongSubjectTest::::isWithinNegativeToleranceThrowsIAE(long,long,long)":[233,243],"LongSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(long,long,long)":[245,255],"LongSubjectTest::::expectFailureWhenTestingThat(java.lang.Long)":[271,273]},"reverse_method_lines_dic":{"61":"LongSubject.TolerantLongComparison::::of(long)","68":"LongSubject.TolerantLongComparison::::equals(java.lang.Object)","69":"LongSubject.TolerantLongComparison::::equals(java.lang.Object)","70":"LongSubject.TolerantLongComparison::::equals(java.lang.Object)","71":"LongSubject.TolerantLongComparison::::equals(java.lang.Object)","72":"LongSubject.TolerantLongComparison::::equals(java.lang.Object)","73":"LongSubject.TolerantLongComparison::::equals(java.lang.Object)","79":"LongSubject.TolerantLongComparison::::hashCode()","80":"LongSubject.TolerantLongComparison::::hashCode()","81":"LongSubject.TolerantLongComparison::::hashCode()","82":"LongSubject.TolerantLongComparison::::hashCode()","83":"LongSubject.TolerantLongComparison::::hashCode()","94":"LongSubject::::isWithin(long)","95":"LongSubject::::isWithin(long)","96":"LongSubject::::isWithin(long)","97":"LongSubject::::isWithin(long)","98":"LongSubject::::isWithin(long)","99":"LongSubject::::isWithin(long)","100":"LongSubject::::isWithin(long)","101":"LongSubject::::isWithin(long)","102":"LongSubject::::isWithin(long)","103":"LongSubject::::isWithin(long)","104":"LongSubject::::isWithin(long)","105":"LongSubject::::isWithin(long)","106":"LongSubject::::isWithin(long)","107":"LongSubject::::isWithin(long)","108":"LongSubject::::isWithin(long)","109":"LongSubject::::isWithin(long)","110":"LongSubject::::isWithin(long)","111":"LongSubject::::isWithin(long)","121":"LongSubject::::isNotWithin(long)","122":"LongSubject::::isNotWithin(long)","123":"LongSubject::::isNotWithin(long)","124":"LongSubject::::isNotWithin(long)","125":"LongSubject::::isNotWithin(long)","126":"LongSubject::::isNotWithin(long)","127":"LongSubject::::isNotWithin(long)","128":"LongSubject::::isNotWithin(long)","129":"LongSubject::::isNotWithin(long)","130":"LongSubject::::isNotWithin(long)","131":"LongSubject::::isNotWithin(long)","132":"LongSubject::::isNotWithin(long)","133":"LongSubject::::isNotWithin(long)","134":"LongSubject::::isNotWithin(long)","135":"LongSubject::::isNotWithin(long)","136":"LongSubject::::isNotWithin(long)","137":"LongSubject::::isNotWithin(long)","138":"LongSubject::::isNotWithin(long)","143":"LongSubject::::isEquivalentAccordingToCompareTo(java.lang.Long)","144":"LongSubject::::isEquivalentAccordingToCompareTo(java.lang.Long)","145":"LongSubject::::isEquivalentAccordingToCompareTo(java.lang.Long)","146":"LongSubject::::isEquivalentAccordingToCompareTo(java.lang.Long)","147":"LongSubject::::isEquivalentAccordingToCompareTo(java.lang.Long)","150":"LongSubject::::checkTolerance(long)","151":"LongSubject::::checkTolerance(long)","152":"LongSubject::::checkTolerance(long)","160":"LongSubject::::isGreaterThan(int)","161":"LongSubject::::isGreaterThan(int)","162":"LongSubject::::isGreaterThan(int)","170":"LongSubject::::isLessThan(int)","171":"LongSubject::::isLessThan(int)","172":"LongSubject::::isLessThan(int)","180":"LongSubject::::isAtMost(int)","181":"LongSubject::::isAtMost(int)","182":"LongSubject::::isAtMost(int)","190":"LongSubject::::isAtLeast(int)","191":"LongSubject::::isAtLeast(int)","192":"LongSubject::::isAtLeast(int)"},"test_reverse_method_lines_dic":{"38":"LongSubjectTest::::simpleEquality()","39":"LongSubjectTest::::simpleEquality()","40":"LongSubjectTest::::simpleEquality()","41":"LongSubjectTest::::simpleEquality()","42":"LongSubjectTest::::simpleEquality()","44":"LongSubjectTest::::simpleInequality()","45":"LongSubjectTest::::simpleInequality()","46":"LongSubjectTest::::simpleInequality()","47":"LongSubjectTest::::simpleInequality()","49":"LongSubjectTest::::equalityWithInts()","50":"LongSubjectTest::::equalityWithInts()","51":"LongSubjectTest::::equalityWithInts()","52":"LongSubjectTest::::equalityWithInts()","53":"LongSubjectTest::::equalityWithInts()","55":"LongSubjectTest::::equalityFail()","56":"LongSubjectTest::::equalityFail()","57":"LongSubjectTest::::equalityFail()","58":"LongSubjectTest::::equalityFail()","60":"LongSubjectTest::::inequalityFail()","61":"LongSubjectTest::::inequalityFail()","62":"LongSubjectTest::::inequalityFail()","63":"LongSubjectTest::::inequalityFail()","65":"LongSubjectTest::::equalityOfNulls()","66":"LongSubjectTest::::equalityOfNulls()","67":"LongSubjectTest::::equalityOfNulls()","68":"LongSubjectTest::::equalityOfNulls()","70":"LongSubjectTest::::equalityOfNullsFail_nullActual()","71":"LongSubjectTest::::equalityOfNullsFail_nullActual()","72":"LongSubjectTest::::equalityOfNullsFail_nullActual()","73":"LongSubjectTest::::equalityOfNullsFail_nullActual()","75":"LongSubjectTest::::equalityOfNullsFail_nullExpected()","76":"LongSubjectTest::::equalityOfNullsFail_nullExpected()","77":"LongSubjectTest::::equalityOfNullsFail_nullExpected()","78":"LongSubjectTest::::equalityOfNullsFail_nullExpected()","80":"LongSubjectTest::::inequalityOfNulls()","81":"LongSubjectTest::::inequalityOfNulls()","82":"LongSubjectTest::::inequalityOfNulls()","83":"LongSubjectTest::::inequalityOfNulls()","84":"LongSubjectTest::::inequalityOfNulls()","86":"LongSubjectTest::::inequalityOfNullsFail()","87":"LongSubjectTest::::inequalityOfNullsFail()","88":"LongSubjectTest::::inequalityOfNullsFail()","89":"LongSubjectTest::::inequalityOfNullsFail()","91":"LongSubjectTest::::testNumericTypeWithSameValue_shouldBeEqual_long_long()","92":"LongSubjectTest::::testNumericTypeWithSameValue_shouldBeEqual_long_long()","93":"LongSubjectTest::::testNumericTypeWithSameValue_shouldBeEqual_long_long()","94":"LongSubjectTest::::testNumericTypeWithSameValue_shouldBeEqual_long_long()","96":"LongSubjectTest::::testNumericTypeWithSameValue_shouldBeEqual_long_int()","97":"LongSubjectTest::::testNumericTypeWithSameValue_shouldBeEqual_long_int()","98":"LongSubjectTest::::testNumericTypeWithSameValue_shouldBeEqual_long_int()","99":"LongSubjectTest::::testNumericTypeWithSameValue_shouldBeEqual_long_int()","101":"LongSubjectTest::::isGreaterThan_int_strictly()","102":"LongSubjectTest::::isGreaterThan_int_strictly()","103":"LongSubjectTest::::isGreaterThan_int_strictly()","104":"LongSubjectTest::::isGreaterThan_int_strictly()","106":"LongSubjectTest::::isGreaterThan_int()","107":"LongSubjectTest::::isGreaterThan_int()","108":"LongSubjectTest::::isGreaterThan_int()","109":"LongSubjectTest::::isGreaterThan_int()","110":"LongSubjectTest::::isGreaterThan_int()","112":"LongSubjectTest::::isLessThan_int_strictly()","113":"LongSubjectTest::::isLessThan_int_strictly()","114":"LongSubjectTest::::isLessThan_int_strictly()","115":"LongSubjectTest::::isLessThan_int_strictly()","117":"LongSubjectTest::::isLessThan_int()","118":"LongSubjectTest::::isLessThan_int()","119":"LongSubjectTest::::isLessThan_int()","120":"LongSubjectTest::::isLessThan_int()","121":"LongSubjectTest::::isLessThan_int()","123":"LongSubjectTest::::isAtLeast_int()","124":"LongSubjectTest::::isAtLeast_int()","125":"LongSubjectTest::::isAtLeast_int()","126":"LongSubjectTest::::isAtLeast_int()","127":"LongSubjectTest::::isAtLeast_int()","128":"LongSubjectTest::::isAtLeast_int()","130":"LongSubjectTest::::isAtMost_int()","131":"LongSubjectTest::::isAtMost_int()","132":"LongSubjectTest::::isAtMost_int()","133":"LongSubjectTest::::isAtMost_int()","134":"LongSubjectTest::::isAtMost_int()","135":"LongSubjectTest::::isAtMost_int()","137":"LongSubjectTest::::isWithinOf()","138":"LongSubjectTest::::isWithinOf()","139":"LongSubjectTest::::isWithinOf()","140":"LongSubjectTest::::isWithinOf()","141":"LongSubjectTest::::isWithinOf()","142":"LongSubjectTest::::isWithinOf()","143":"LongSubjectTest::::isWithinOf()","144":"LongSubjectTest::::isWithinOf()","145":"LongSubjectTest::::isWithinOf()","146":"LongSubjectTest::::isWithinOf()","147":"LongSubjectTest::::isWithinOf()","148":"LongSubjectTest::::isWithinOf()","149":"LongSubjectTest::::isWithinOf()","150":"LongSubjectTest::::isWithinOf()","151":"LongSubjectTest::::isWithinOf()","152":"LongSubjectTest::::isWithinOf()","153":"LongSubjectTest::::isWithinOf()","154":"LongSubjectTest::::isWithinOf()","155":"LongSubjectTest::::isWithinOf()","156":"LongSubjectTest::::isWithinOf()","157":"LongSubjectTest::::isWithinOf()","159":"LongSubjectTest::::assertThatIsWithinFails(long,long,long)","160":"LongSubjectTest::::assertThatIsWithinFails(long,long,long)","161":"LongSubjectTest::::assertThatIsWithinFails(long,long,long)","162":"LongSubjectTest::::assertThatIsWithinFails(long,long,long)","163":"LongSubjectTest::::assertThatIsWithinFails(long,long,long)","164":"LongSubjectTest::::assertThatIsWithinFails(long,long,long)","165":"LongSubjectTest::::assertThatIsWithinFails(long,long,long)","166":"LongSubjectTest::::assertThatIsWithinFails(long,long,long)","167":"LongSubjectTest::::assertThatIsWithinFails(long,long,long)","168":"LongSubjectTest::::assertThatIsWithinFails(long,long,long)","169":"LongSubjectTest::::assertThatIsWithinFails(long,long,long)","170":"LongSubjectTest::::assertThatIsWithinFails(long,long,long)","171":"LongSubjectTest::::assertThatIsWithinFails(long,long,long)","172":"LongSubjectTest::::assertThatIsWithinFails(long,long,long)","173":"LongSubjectTest::::assertThatIsWithinFails(long,long,long)","174":"LongSubjectTest::::assertThatIsWithinFails(long,long,long)","175":"LongSubjectTest::::assertThatIsWithinFails(long,long,long)","177":"LongSubjectTest::::isNotWithinOf()","178":"LongSubjectTest::::isNotWithinOf()","179":"LongSubjectTest::::isNotWithinOf()","180":"LongSubjectTest::::isNotWithinOf()","181":"LongSubjectTest::::isNotWithinOf()","182":"LongSubjectTest::::isNotWithinOf()","183":"LongSubjectTest::::isNotWithinOf()","184":"LongSubjectTest::::isNotWithinOf()","185":"LongSubjectTest::::isNotWithinOf()","186":"LongSubjectTest::::isNotWithinOf()","187":"LongSubjectTest::::isNotWithinOf()","188":"LongSubjectTest::::isNotWithinOf()","189":"LongSubjectTest::::isNotWithinOf()","190":"LongSubjectTest::::isNotWithinOf()","191":"LongSubjectTest::::isNotWithinOf()","192":"LongSubjectTest::::isNotWithinOf()","193":"LongSubjectTest::::isNotWithinOf()","194":"LongSubjectTest::::isNotWithinOf()","195":"LongSubjectTest::::isNotWithinOf()","196":"LongSubjectTest::::isNotWithinOf()","197":"LongSubjectTest::::isNotWithinOf()","199":"LongSubjectTest::::assertThatIsNotWithinFails(long,long,long)","200":"LongSubjectTest::::assertThatIsNotWithinFails(long,long,long)","201":"LongSubjectTest::::assertThatIsNotWithinFails(long,long,long)","202":"LongSubjectTest::::assertThatIsNotWithinFails(long,long,long)","203":"LongSubjectTest::::assertThatIsNotWithinFails(long,long,long)","204":"LongSubjectTest::::assertThatIsNotWithinFails(long,long,long)","205":"LongSubjectTest::::assertThatIsNotWithinFails(long,long,long)","206":"LongSubjectTest::::assertThatIsNotWithinFails(long,long,long)","207":"LongSubjectTest::::assertThatIsNotWithinFails(long,long,long)","208":"LongSubjectTest::::assertThatIsNotWithinFails(long,long,long)","209":"LongSubjectTest::::assertThatIsNotWithinFails(long,long,long)","210":"LongSubjectTest::::assertThatIsNotWithinFails(long,long,long)","212":"LongSubjectTest::::isWithinIntegers()","213":"LongSubjectTest::::isWithinIntegers()","214":"LongSubjectTest::::isWithinIntegers()","215":"LongSubjectTest::::isWithinIntegers()","216":"LongSubjectTest::::isWithinIntegers()","217":"LongSubjectTest::::isWithinIntegers()","218":"LongSubjectTest::::isWithinIntegers()","219":"LongSubjectTest::::isWithinIntegers()","220":"LongSubjectTest::::isWithinIntegers()","221":"LongSubjectTest::::isWithinIntegers()","222":"LongSubjectTest::::isWithinIntegers()","223":"LongSubjectTest::::isWithinIntegers()","225":"LongSubjectTest::::isWithinNegativeTolerance()","226":"LongSubjectTest::::isWithinNegativeTolerance()","227":"LongSubjectTest::::isWithinNegativeTolerance()","228":"LongSubjectTest::::isWithinNegativeTolerance()","229":"LongSubjectTest::::isWithinNegativeTolerance()","230":"LongSubjectTest::::isWithinNegativeTolerance()","231":"LongSubjectTest::::isWithinNegativeTolerance()","233":"LongSubjectTest::::isWithinNegativeToleranceThrowsIAE(long,long,long)","234":"LongSubjectTest::::isWithinNegativeToleranceThrowsIAE(long,long,long)","235":"LongSubjectTest::::isWithinNegativeToleranceThrowsIAE(long,long,long)","236":"LongSubjectTest::::isWithinNegativeToleranceThrowsIAE(long,long,long)","237":"LongSubjectTest::::isWithinNegativeToleranceThrowsIAE(long,long,long)","238":"LongSubjectTest::::isWithinNegativeToleranceThrowsIAE(long,long,long)","239":"LongSubjectTest::::isWithinNegativeToleranceThrowsIAE(long,long,long)","240":"LongSubjectTest::::isWithinNegativeToleranceThrowsIAE(long,long,long)","241":"LongSubjectTest::::isWithinNegativeToleranceThrowsIAE(long,long,long)","242":"LongSubjectTest::::isWithinNegativeToleranceThrowsIAE(long,long,long)","243":"LongSubjectTest::::isWithinNegativeToleranceThrowsIAE(long,long,long)","245":"LongSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(long,long,long)","246":"LongSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(long,long,long)","247":"LongSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(long,long,long)","248":"LongSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(long,long,long)","249":"LongSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(long,long,long)","250":"LongSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(long,long,long)","251":"LongSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(long,long,long)","252":"LongSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(long,long,long)","253":"LongSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(long,long,long)","254":"LongSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(long,long,long)","255":"LongSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(long,long,long)","271":"LongSubjectTest::::expectFailureWhenTestingThat(java.lang.Long)","272":"LongSubjectTest::::expectFailureWhenTestingThat(java.lang.Long)","273":"LongSubjectTest::::expectFailureWhenTestingThat(java.lang.Long)"},"tests":[{"test_lines":[38,42],"covered_lines":[41,42,43],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[44,47],"covered_lines":[41,42,43],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[49,53],"covered_lines":[41,42,43],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[55,58],"covered_lines":[41,42,43],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[60,63],"covered_lines":[41,42,43],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[65,68],"covered_lines":[41,42,43],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[70,73],"covered_lines":[41,42,43],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[75,78],"covered_lines":[41,42,43],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[80,84],"covered_lines":[41,42,43],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[86,89],"covered_lines":[41,42,43],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[91,94],"covered_lines":[41,42,43],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[96,99],"covered_lines":[41,42,43],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[101,104],"covered_lines":[41,42,43,161,162],"label":"LongSubject::::isGreaterThan(int)"},{"test_lines":[106,110],"covered_lines":[41,42,43,161,162],"label":"LongSubject::::isGreaterThan(int)"},{"test_lines":[112,115],"covered_lines":[41,42,43,171,172],"label":"LongSubject::::isLessThan(int)"},{"test_lines":[117,121],"covered_lines":[41,42,43,171,172],"label":"LongSubject::::isLessThan(int)"},{"test_lines":[123,128],"covered_lines":[41,42,43,191,192],"label":"LongSubject::::isAtLeast(int)"},{"test_lines":[130,135],"covered_lines":[41,42,43,181,182],"label":"LongSubject::::isAtMost(int)"},{"test_lines":[137,157],"covered_lines":[41,42,43,54,95,98,99,101,103,104,105,106,107,109,151,152],"label":"LongSubject::::isWithin(long)"},{"test_lines":[177,197],"covered_lines":[41,42,43,54,122,125,126,128,130,131,132,133,134,136,151,152],"label":"LongSubject::::isNotWithin(long)"},{"test_lines":[212,223],"covered_lines":[41,42,43,54,95,98,99,101,103,109,122,125,126,128,130,136,151,152],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[225,231],"covered_lines":[41,42,43,54,95,98,99,122,125,126,151],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/truth/core/src/main/java/com/google/common/truth/PrimitiveByteArraySubject.java":{"class_content":["/*\n"," * Copyright (c) 2014 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.base.Preconditions.checkNotNull;\n","\n","import com.google.common.primitives.Bytes;\n","import org.checkerframework.checker.nullness.qual.Nullable;\n","\n","/**\n"," * A Subject for {@code byte[]}.\n"," *\n"," * @author Kurt Alfred Kluever\n"," */\n","public final class PrimitiveByteArraySubject extends AbstractArraySubject {\n","  private final byte @Nullable [] actual;\n","\n","  PrimitiveByteArraySubject(\n","      FailureMetadata metadata, byte @Nullable [] o, @Nullable String typeDescription) {\n","    super(metadata, o, typeDescription);\n","    this.actual = o;\n","  }\n","\n","  public IterableSubject asList() {\n","    return checkNoNeedToDisplayBothValues(\"asList()\").that(Bytes.asList(checkNotNull(actual)));\n","  }\n","}\n"],"test_content":["/*\n"," * Copyright (c) 2014 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.truth.Truth.assertThat;\n","\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import org.junit.runners.JUnit4;\n","\n","/**\n"," * Tests for {@link com.google.common.truth.PrimitiveByteArraySubject}.\n"," *\n"," * @author Kurt Alfred Kluever\n"," */\n","@RunWith(JUnit4.class)\n","public class PrimitiveByteArraySubjectTest extends BaseSubjectTestCase {\n","  private static final byte BYTE_0 = (byte) 0;\n","  private static final byte BYTE_1 = (byte) 1;\n","  private static final byte BYTE_2 = (byte) 2;\n","\n","  @Test\n","  public void isEqualTo() {\n","    assertThat(array(BYTE_0, BYTE_1)).isEqualTo(array(BYTE_0, BYTE_1));\n","  }\n","\n","  @SuppressWarnings(\"TruthSelfEquals\")\n","  @Test\n","  public void isEqualTo_Same() {\n","    byte[] same = array(BYTE_0, BYTE_1);\n","    assertThat(same).isEqualTo(same);\n","  }\n","\n","  @Test\n","  public void asList() {\n","    assertThat(array(BYTE_0, BYTE_1, BYTE_2)).asList().containsAtLeast(BYTE_0, BYTE_2);\n","  }\n","\n","  @Test\n","  public void isEqualTo_Fail_UnequalOrdering() {\n","    expectFailureWhenTestingThat(array(BYTE_0, (byte) 123)).isEqualTo(array((byte) 123, BYTE_0));\n","    assertFailureKeys(\"expected\", \"but was\", \"expected\", \"but was\");\n","    assertFailureValueIndexed(\"expected\", 0, \"7B00\");\n","    assertFailureValueIndexed(\"but was\", 0, \"007B\");\n","    assertFailureValueIndexed(\"expected\", 1, \"[123, 0]\");\n","    assertFailureValueIndexed(\"but was\", 1, \"[0, 123]\");\n","    assertThat(expectFailure.getFailure()).isInstanceOf(ComparisonFailureWithFacts.class);\n","  }\n","\n","  @Test\n","  public void isEqualTo_Fail_NotAnArray() {\n","    expectFailureWhenTestingThat(array(BYTE_0, BYTE_1)).isEqualTo(new int[] {});\n","    assertFailureKeys(\"expected\", \"but was\", \"wrong type\", \"expected\", \"but was\");\n","    assertFailureValueIndexed(\"expected\", 1, \"int[]\");\n","    assertFailureValueIndexed(\"but was\", 1, \"byte[]\");\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_SameLengths() {\n","    assertThat(array(BYTE_0, BYTE_1)).isNotEqualTo(array(BYTE_1, BYTE_0));\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_DifferentLengths() {\n","    assertThat(array(BYTE_0, BYTE_1)).isNotEqualTo(array(BYTE_1, BYTE_0, BYTE_2));\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_DifferentTypes() {\n","    assertThat(array(BYTE_0, BYTE_1)).isNotEqualTo(new Object());\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_FailEquals() {\n","    expectFailureWhenTestingThat(array(BYTE_0, BYTE_1)).isNotEqualTo(array(BYTE_0, BYTE_1));\n","  }\n","\n","  @SuppressWarnings(\"TruthSelfEquals\")\n","  @Test\n","  public void isNotEqualTo_FailSame() {\n","    byte[] same = array(BYTE_0, BYTE_1);\n","    expectFailureWhenTestingThat(same).isNotEqualTo(same);\n","  }\n","\n","  private static byte[] array(byte... ts) {\n","    return ts;\n","  }\n","\n","  private PrimitiveByteArraySubject expectFailureWhenTestingThat(byte[] actual) {\n","    return expectFailure.whenTesting().that(actual);\n","  }\n","}\n"],"method_lines_dic":{"PrimitiveByteArraySubject::::asList()":[37,39]},"test_method_lines_dic":{"PrimitiveByteArraySubjectTest::::isEqualTo()":[35,38],"PrimitiveByteArraySubjectTest::::isEqualTo_Same()":[40,45],"PrimitiveByteArraySubjectTest::::asList()":[47,50],"PrimitiveByteArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()":[52,61],"PrimitiveByteArraySubjectTest::::isEqualTo_Fail_NotAnArray()":[63,69],"PrimitiveByteArraySubjectTest::::isNotEqualTo_SameLengths()":[71,74],"PrimitiveByteArraySubjectTest::::isNotEqualTo_DifferentLengths()":[76,79],"PrimitiveByteArraySubjectTest::::isNotEqualTo_DifferentTypes()":[81,84],"PrimitiveByteArraySubjectTest::::isNotEqualTo_FailEquals()":[86,89],"PrimitiveByteArraySubjectTest::::isNotEqualTo_FailSame()":[91,96],"PrimitiveByteArraySubjectTest::::array(byte[])":[98,100],"PrimitiveByteArraySubjectTest::::expectFailureWhenTestingThat(byte[])":[102,104]},"reverse_method_lines_dic":{"37":"PrimitiveByteArraySubject::::asList()","38":"PrimitiveByteArraySubject::::asList()","39":"PrimitiveByteArraySubject::::asList()"},"test_reverse_method_lines_dic":{"35":"PrimitiveByteArraySubjectTest::::isEqualTo()","36":"PrimitiveByteArraySubjectTest::::isEqualTo()","37":"PrimitiveByteArraySubjectTest::::isEqualTo()","38":"PrimitiveByteArraySubjectTest::::isEqualTo()","40":"PrimitiveByteArraySubjectTest::::isEqualTo_Same()","41":"PrimitiveByteArraySubjectTest::::isEqualTo_Same()","42":"PrimitiveByteArraySubjectTest::::isEqualTo_Same()","43":"PrimitiveByteArraySubjectTest::::isEqualTo_Same()","44":"PrimitiveByteArraySubjectTest::::isEqualTo_Same()","45":"PrimitiveByteArraySubjectTest::::isEqualTo_Same()","47":"PrimitiveByteArraySubjectTest::::asList()","48":"PrimitiveByteArraySubjectTest::::asList()","49":"PrimitiveByteArraySubjectTest::::asList()","50":"PrimitiveByteArraySubjectTest::::asList()","52":"PrimitiveByteArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","53":"PrimitiveByteArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","54":"PrimitiveByteArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","55":"PrimitiveByteArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","56":"PrimitiveByteArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","57":"PrimitiveByteArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","58":"PrimitiveByteArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","59":"PrimitiveByteArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","60":"PrimitiveByteArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","61":"PrimitiveByteArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","63":"PrimitiveByteArraySubjectTest::::isEqualTo_Fail_NotAnArray()","64":"PrimitiveByteArraySubjectTest::::isEqualTo_Fail_NotAnArray()","65":"PrimitiveByteArraySubjectTest::::isEqualTo_Fail_NotAnArray()","66":"PrimitiveByteArraySubjectTest::::isEqualTo_Fail_NotAnArray()","67":"PrimitiveByteArraySubjectTest::::isEqualTo_Fail_NotAnArray()","68":"PrimitiveByteArraySubjectTest::::isEqualTo_Fail_NotAnArray()","69":"PrimitiveByteArraySubjectTest::::isEqualTo_Fail_NotAnArray()","71":"PrimitiveByteArraySubjectTest::::isNotEqualTo_SameLengths()","72":"PrimitiveByteArraySubjectTest::::isNotEqualTo_SameLengths()","73":"PrimitiveByteArraySubjectTest::::isNotEqualTo_SameLengths()","74":"PrimitiveByteArraySubjectTest::::isNotEqualTo_SameLengths()","76":"PrimitiveByteArraySubjectTest::::isNotEqualTo_DifferentLengths()","77":"PrimitiveByteArraySubjectTest::::isNotEqualTo_DifferentLengths()","78":"PrimitiveByteArraySubjectTest::::isNotEqualTo_DifferentLengths()","79":"PrimitiveByteArraySubjectTest::::isNotEqualTo_DifferentLengths()","81":"PrimitiveByteArraySubjectTest::::isNotEqualTo_DifferentTypes()","82":"PrimitiveByteArraySubjectTest::::isNotEqualTo_DifferentTypes()","83":"PrimitiveByteArraySubjectTest::::isNotEqualTo_DifferentTypes()","84":"PrimitiveByteArraySubjectTest::::isNotEqualTo_DifferentTypes()","86":"PrimitiveByteArraySubjectTest::::isNotEqualTo_FailEquals()","87":"PrimitiveByteArraySubjectTest::::isNotEqualTo_FailEquals()","88":"PrimitiveByteArraySubjectTest::::isNotEqualTo_FailEquals()","89":"PrimitiveByteArraySubjectTest::::isNotEqualTo_FailEquals()","91":"PrimitiveByteArraySubjectTest::::isNotEqualTo_FailSame()","92":"PrimitiveByteArraySubjectTest::::isNotEqualTo_FailSame()","93":"PrimitiveByteArraySubjectTest::::isNotEqualTo_FailSame()","94":"PrimitiveByteArraySubjectTest::::isNotEqualTo_FailSame()","95":"PrimitiveByteArraySubjectTest::::isNotEqualTo_FailSame()","96":"PrimitiveByteArraySubjectTest::::isNotEqualTo_FailSame()","98":"PrimitiveByteArraySubjectTest::::array(byte[])","99":"PrimitiveByteArraySubjectTest::::array(byte[])","100":"PrimitiveByteArraySubjectTest::::array(byte[])","102":"PrimitiveByteArraySubjectTest::::expectFailureWhenTestingThat(byte[])","103":"PrimitiveByteArraySubjectTest::::expectFailureWhenTestingThat(byte[])","104":"PrimitiveByteArraySubjectTest::::expectFailureWhenTestingThat(byte[])"},"tests":[{"test_lines":[35,38],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[40,45],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[47,50],"covered_lines":[33,34,35,38],"label":"PrimitiveByteArraySubject::::asList()"},{"test_lines":[52,61],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[63,69],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[71,74],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[76,79],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[81,84],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[86,89],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[91,96],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/truth/core/src/main/java/com/google/common/truth/ObjectArraySubject.java":{"class_content":["/*\n"," * Copyright (c) 2014 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.base.Preconditions.checkNotNull;\n","\n","import java.util.Arrays;\n","import org.checkerframework.checker.nullness.qual.Nullable;\n","\n","/**\n"," * A Subject for {@code Object[]} and more generically {@code T[]}.\n"," *\n"," * @author Christian Gruber\n"," */\n","public final class ObjectArraySubject<T extends @Nullable Object> extends AbstractArraySubject {\n","  private final T @Nullable [] actual;\n","\n","  ObjectArraySubject(FailureMetadata metadata, T @Nullable [] o, @Nullable String typeDescription) {\n","    super(metadata, o, typeDescription);\n","    this.actual = o;\n","  }\n","\n","  public IterableSubject asList() {\n","    return checkNoNeedToDisplayBothValues(\"asList()\").that(Arrays.asList(checkNotNull(actual)));\n","  }\n","}\n"],"test_content":["/*\n"," * Copyright (c) 2014 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.truth.Truth.assertThat;\n","import static org.junit.Assert.fail;\n","\n","import com.google.common.collect.ImmutableSet;\n","import java.util.Set;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import org.junit.runners.JUnit4;\n","\n","/**\n"," * Tests for {@link com.google.common.truth.ObjectArraySubject}.\n"," *\n"," * @author Christian Gruber (cgruber@israfil.net)\n"," */\n","@RunWith(JUnit4.class)\n","public class ObjectArraySubjectTest extends BaseSubjectTestCase {\n","  private static final Object[] EMPTY = new Object[0];\n","\n","  @Test\n","  public void isEqualTo() {\n","    assertThat(objectArray(\"A\", 5L)).isEqualTo(objectArray(\"A\", 5L));\n","  }\n","\n","  @SuppressWarnings(\"TruthSelfEquals\")\n","  @Test\n","  public void isEqualTo_same() {\n","    Object[] same = objectArray(\"A\", 5L);\n","    assertThat(same).isEqualTo(same);\n","  }\n","\n","  @Test\n","  public void asList() {\n","    assertThat(objectArray(\"A\", 5L)).asList().contains(\"A\");\n","  }\n","\n","  @Test\n","  public void hasLength() {\n","    assertThat(EMPTY).hasLength(0);\n","    assertThat(objectArray(\"A\", 5L)).hasLength(2);\n","    assertThat(new Object[][] {}).hasLength(0);\n","    assertThat(new Object[][] {{}}).hasLength(1);\n","  }\n","\n","  @Test\n","  public void hasLengthFail() {\n","    expectFailureWhenTestingThat(objectArray(\"A\", 5L)).hasLength(1);\n","    assertFailureValue(\"value of\", \"array.length\");\n","  }\n","\n","  @Test\n","  public void hasLengthMultiFail() {\n","    expectFailureWhenTestingThat(new Object[][] {{\"A\"}, {5L}}).hasLength(1);\n","    assertFailureValue(\"value of\", \"array.length\");\n","  }\n","\n","  @Test\n","  public void hasLengthNegative() {\n","    try {\n","      assertThat(objectArray(2, 5)).hasLength(-1);\n","      fail(\"Should have failed\");\n","    } catch (IllegalArgumentException expected) {\n","    }\n","  }\n","\n","  @Test\n","  public void isEmpty() {\n","    assertThat(EMPTY).isEmpty();\n","    assertThat(new Object[][] {}).isEmpty();\n","  }\n","\n","  @Test\n","  public void isEmptyFail() {\n","    expectFailureWhenTestingThat(objectArray(\"A\", 5L)).isEmpty();\n","    assertFailureKeys(\"expected to be empty\", \"but was\");\n","  }\n","\n","  @Test\n","  public void isNotEmpty() {\n","    assertThat(objectArray(\"A\", 5L)).isNotEmpty();\n","    assertThat(new Object[][] {{\"A\"}, {5L}}).isNotEmpty();\n","  }\n","\n","  @Test\n","  public void isNotEmptyFail() {\n","    expectFailureWhenTestingThat(EMPTY).isNotEmpty();\n","    assertFailureKeys(\"expected not to be empty\");\n","  }\n","\n","  @Test\n","  public void isEqualTo_fail_unequalOrdering() {\n","    expectFailureWhenTestingThat(objectArray(\"A\", 5L)).isEqualTo(objectArray(5L, \"A\"));\n","    assertFailureValue(\"differs at index\", \"[0]\");\n","  }\n","\n","  @Test\n","  public void isEqualTo_fail_unequalOrderingMultiDimensional_00() {\n","    expectFailureWhenTestingThat(new Object[][] {{\"A\"}, {5L}})\n","        .isEqualTo(new Object[][] {{5L}, {\"A\"}});\n","    assertFailureValue(\"differs at index\", \"[0][0]\");\n","  }\n","\n","  @Test\n","  public void isEqualTo_fail_unequalOrderingMultiDimensional_01() {\n","    expectFailureWhenTestingThat(new Object[][] {{\"A\", \"B\"}, {5L}})\n","        .isEqualTo(new Object[][] {{\"A\"}, {5L}});\n","    assertFailureValue(\"wrong length for index\", \"[0]\");\n","    assertFailureValueIndexed(\"expected\", 1, \"1\");\n","    assertFailureValueIndexed(\"but was\", 1, \"2\");\n","  }\n","\n","  @Test\n","  public void isEqualTo_fail_unequalOrderingMultiDimensional_11() {\n","    expectFailureWhenTestingThat(new Object[][] {{\"A\"}, {5L}})\n","        .isEqualTo(new Object[][] {{\"A\"}, {5L, 6L}});\n","    assertFailureValue(\"wrong length for index\", \"[1]\");\n","    assertFailureValueIndexed(\"expected\", 1, \"2\");\n","    assertFailureValueIndexed(\"but was\", 1, \"1\");\n","  }\n","\n","  @Test\n","  public void isEqualTo_fail_notAnArray() {\n","    expectFailureWhenTestingThat(objectArray(\"A\", 5L)).isEqualTo(new Object());\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_sameLengths() {\n","    assertThat(objectArray(\"A\", 5L)).isNotEqualTo(objectArray(\"C\", 5L));\n","    assertThat(new Object[][] {{\"A\"}, {5L}}).isNotEqualTo(new Object[][] {{\"C\"}, {5L}});\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_differentLengths() {\n","    assertThat(objectArray(\"A\", 5L)).isNotEqualTo(objectArray(\"A\", 5L, \"c\"));\n","    assertThat(new Object[][] {{\"A\"}, {5L}}).isNotEqualTo(new Object[][] {{\"A\", \"c\"}, {5L}});\n","    assertThat(new Object[][] {{\"A\"}, {5L}}).isNotEqualTo(new Object[][] {{\"A\"}, {5L}, {\"C\"}});\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_differentTypes() {\n","    assertThat(objectArray(\"A\", 5L)).isNotEqualTo(new Object());\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_failEquals() {\n","    expectFailureWhenTestingThat(objectArray(\"A\", 5L)).isNotEqualTo(objectArray(\"A\", 5L));\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_failEqualsMultiDimensional() {\n","    expectFailureWhenTestingThat(new Object[][] {{\"A\"}, {5L}})\n","        .isNotEqualTo(new Object[][] {{\"A\"}, {5L}});\n","    assertFailureValue(\"expected not to be\", \"[[A], [5]]\");\n","  }\n","\n","  @SuppressWarnings(\"TruthSelfEquals\")\n","  @Test\n","  public void isNotEqualTo_failSame() {\n","    Object[] same = objectArray(\"A\", 5L);\n","    expectFailureWhenTestingThat(same).isNotEqualTo(same);\n","  }\n","\n","  @SuppressWarnings(\"TruthSelfEquals\")\n","  @Test\n","  public void isNotEqualTo_failSameMultiDimensional() {\n","    Object[][] same = new Object[][] {{\"A\"}, {5L}};\n","    expectFailureWhenTestingThat(same).isNotEqualTo(same);\n","  }\n","\n","  @Test\n","  public void stringArrayIsEqualTo() {\n","    assertThat(objectArray(\"A\", \"B\")).isEqualTo(objectArray(\"A\", \"B\"));\n","    assertThat(new String[][] {{\"A\"}, {\"B\"}}).isEqualTo(new String[][] {{\"A\"}, {\"B\"}});\n","  }\n","\n","  @Test\n","  public void stringArrayAsList() {\n","    assertThat(objectArray(\"A\", \"B\")).asList().contains(\"A\");\n","  }\n","\n","  @Test\n","  public void multiDimensionalStringArrayAsList() {\n","    String[] ab = {\"A\", \"B\"};\n","    assertThat(new String[][] {ab, {\"C\"}}).asList().contains(ab);\n","  }\n","\n","  @Test\n","  public void stringArrayIsEqualTo_fail_unequalLength() {\n","    expectFailureWhenTestingThat(objectArray(\"A\", \"B\")).isEqualTo(objectArray(\"B\"));\n","    assertFailureKeys(\"expected\", \"but was\", \"wrong length\", \"expected\", \"but was\");\n","    assertFailureValueIndexed(\"expected\", 1, \"1\");\n","    assertFailureValueIndexed(\"but was\", 1, \"2\");\n","  }\n","\n","  @Test\n","  public void stringArrayIsEqualTo_fail_unequalLengthMultiDimensional() {\n","    expectFailureWhenTestingThat(new String[][] {{\"A\"}, {\"B\"}}).isEqualTo(new String[][] {{\"A\"}});\n","    assertFailureKeys(\"expected\", \"but was\", \"wrong length\", \"expected\", \"but was\");\n","    assertFailureValueIndexed(\"expected\", 1, \"1\");\n","    assertFailureValueIndexed(\"but was\", 1, \"2\");\n","  }\n","\n","  @Test\n","  public void stringArrayIsEqualTo_fail_unequalOrdering() {\n","    expectFailureWhenTestingThat(objectArray(\"A\", \"B\")).isEqualTo(objectArray(\"B\", \"A\"));\n","    assertFailureValue(\"differs at index\", \"[0]\");\n","  }\n","\n","  @Test\n","  public void stringArrayIsEqualTo_fail_unequalOrderingMultiDimensional() {\n","    expectFailureWhenTestingThat(new String[][] {{\"A\"}, {\"B\"}})\n","        .isEqualTo(new String[][] {{\"B\"}, {\"A\"}});\n","    assertFailureValue(\"differs at index\", \"[0][0]\");\n","  }\n","\n","  @Test\n","  public void setArrayIsEqualTo_fail_unequalOrdering() {\n","    expectFailureWhenTestingThat(objectArray(ImmutableSet.of(\"A\"), ImmutableSet.of(\"B\")))\n","        .isEqualTo(objectArray(ImmutableSet.of(\"B\"), ImmutableSet.of(\"A\")));\n","    assertFailureValue(\"differs at index\", \"[0]\");\n","    // Maybe one day:\n","    // .hasMessage(\"Not true that <(Set<String>[]) [[A], [B]]> is equal to <[[B], [A]]>\");\n","  }\n","\n","  @Test\n","  public void primitiveMultiDimensionalArrayIsEqualTo() {\n","    assertThat(new int[][] {{1, 2}, {3}, {4, 5, 6}})\n","        .isEqualTo(new int[][] {{1, 2}, {3}, {4, 5, 6}});\n","  }\n","\n","  @Test\n","  public void primitiveMultiDimensionalArrayIsEqualTo_fail_unequalOrdering() {\n","    expectFailureWhenTestingThat(new int[][] {{1, 2}, {3}, {4, 5, 6}})\n","        .isEqualTo(new int[][] {{1, 2}, {3}, {4, 5, 6, 7}});\n","    assertFailureValue(\"wrong length for index\", \"[2]\");\n","    assertFailureValueIndexed(\"expected\", 1, \"4\");\n","    assertFailureValueIndexed(\"but was\", 1, \"3\");\n","  }\n","\n","  @Test\n","  public void primitiveMultiDimensionalArrayIsNotEqualTo() {\n","    assertThat(new int[][] {{1, 2}, {3}, {4, 5, 6}})\n","        .isNotEqualTo(new int[][] {{1, 2}, {3}, {4, 5, 6, 7}});\n","  }\n","\n","  @Test\n","  public void primitiveMultiDimensionalArrayIsNotEqualTo_fail_equal() {\n","    expectFailureWhenTestingThat(new int[][] {{1, 2}, {3}, {4, 5, 6}})\n","        .isNotEqualTo(new int[][] {{1, 2}, {3}, {4, 5, 6}});\n","  }\n","\n","  @Test\n","  public void boxedAndUnboxed() {\n","    expectFailureWhenTestingThat(new Object[] {new int[] {0}})\n","        .isEqualTo(new Object[] {new Integer[] {0}});\n","    assertFailureValue(\"wrong type for index\", \"[0]\");\n","    assertFailureValueIndexed(\"expected\", 1, \"Object[]\");\n","    assertFailureValueIndexed(\"but was\", 1, \"int[]\");\n","  }\n","\n","  private static Object[] objectArray(Object... ts) {\n","    return ts;\n","  }\n","\n","  private static String[] objectArray(String... ts) {\n","    return ts;\n","  }\n","\n","  private static Set<?>[] objectArray(Set<?>... ts) {\n","    return ts;\n","  }\n","\n","  private ObjectArraySubject<?> expectFailureWhenTestingThat(Object[] actual) {\n","    return expectFailure.whenTesting().that(actual);\n","  }\n","}\n"],"method_lines_dic":{"ObjectArraySubject::::asList()":[36,38]},"test_method_lines_dic":{"ObjectArraySubjectTest::::isEqualTo()":[36,39],"ObjectArraySubjectTest::::isEqualTo_same()":[41,46],"ObjectArraySubjectTest::::asList()":[48,51],"ObjectArraySubjectTest::::hasLength()":[53,59],"ObjectArraySubjectTest::::hasLengthFail()":[61,65],"ObjectArraySubjectTest::::hasLengthMultiFail()":[67,71],"ObjectArraySubjectTest::::hasLengthNegative()":[73,80],"ObjectArraySubjectTest::::isEmpty()":[82,86],"ObjectArraySubjectTest::::isEmptyFail()":[88,92],"ObjectArraySubjectTest::::isNotEmpty()":[94,98],"ObjectArraySubjectTest::::isNotEmptyFail()":[100,104],"ObjectArraySubjectTest::::isEqualTo_fail_unequalOrdering()":[106,110],"ObjectArraySubjectTest::::isEqualTo_fail_unequalOrderingMultiDimensional_00()":[112,117],"ObjectArraySubjectTest::::isEqualTo_fail_unequalOrderingMultiDimensional_01()":[119,126],"ObjectArraySubjectTest::::isEqualTo_fail_unequalOrderingMultiDimensional_11()":[128,135],"ObjectArraySubjectTest::::isEqualTo_fail_notAnArray()":[137,140],"ObjectArraySubjectTest::::isNotEqualTo_sameLengths()":[142,146],"ObjectArraySubjectTest::::isNotEqualTo_differentLengths()":[148,153],"ObjectArraySubjectTest::::isNotEqualTo_differentTypes()":[155,158],"ObjectArraySubjectTest::::isNotEqualTo_failEquals()":[160,163],"ObjectArraySubjectTest::::isNotEqualTo_failEqualsMultiDimensional()":[165,170],"ObjectArraySubjectTest::::isNotEqualTo_failSame()":[172,177],"ObjectArraySubjectTest::::isNotEqualTo_failSameMultiDimensional()":[179,184],"ObjectArraySubjectTest::::stringArrayIsEqualTo()":[186,190],"ObjectArraySubjectTest::::stringArrayAsList()":[192,195],"ObjectArraySubjectTest::::multiDimensionalStringArrayAsList()":[197,201],"ObjectArraySubjectTest::::stringArrayIsEqualTo_fail_unequalLength()":[203,209],"ObjectArraySubjectTest::::stringArrayIsEqualTo_fail_unequalLengthMultiDimensional()":[211,217],"ObjectArraySubjectTest::::stringArrayIsEqualTo_fail_unequalOrdering()":[219,223],"ObjectArraySubjectTest::::stringArrayIsEqualTo_fail_unequalOrderingMultiDimensional()":[225,230],"ObjectArraySubjectTest::::setArrayIsEqualTo_fail_unequalOrdering()":[232,239],"ObjectArraySubjectTest::::primitiveMultiDimensionalArrayIsEqualTo()":[241,245],"ObjectArraySubjectTest::::primitiveMultiDimensionalArrayIsEqualTo_fail_unequalOrdering()":[247,254],"ObjectArraySubjectTest::::primitiveMultiDimensionalArrayIsNotEqualTo()":[256,260],"ObjectArraySubjectTest::::primitiveMultiDimensionalArrayIsNotEqualTo_fail_equal()":[262,266],"ObjectArraySubjectTest::::boxedAndUnboxed()":[268,275],"ObjectArraySubjectTest::::objectArray(java.lang.Object[])":[277,279],"ObjectArraySubjectTest::::objectArray(java.lang.String[])":[281,283],"ObjectArraySubjectTest::::objectArray(java.util.Set<?>[])":[285,287],"ObjectArraySubjectTest::::expectFailureWhenTestingThat(java.lang.Object[])":[289,291]},"reverse_method_lines_dic":{"36":"ObjectArraySubject::::asList()","37":"ObjectArraySubject::::asList()","38":"ObjectArraySubject::::asList()"},"test_reverse_method_lines_dic":{"36":"ObjectArraySubjectTest::::isEqualTo()","37":"ObjectArraySubjectTest::::isEqualTo()","38":"ObjectArraySubjectTest::::isEqualTo()","39":"ObjectArraySubjectTest::::isEqualTo()","41":"ObjectArraySubjectTest::::isEqualTo_same()","42":"ObjectArraySubjectTest::::isEqualTo_same()","43":"ObjectArraySubjectTest::::isEqualTo_same()","44":"ObjectArraySubjectTest::::isEqualTo_same()","45":"ObjectArraySubjectTest::::isEqualTo_same()","46":"ObjectArraySubjectTest::::isEqualTo_same()","48":"ObjectArraySubjectTest::::asList()","49":"ObjectArraySubjectTest::::asList()","50":"ObjectArraySubjectTest::::asList()","51":"ObjectArraySubjectTest::::asList()","53":"ObjectArraySubjectTest::::hasLength()","54":"ObjectArraySubjectTest::::hasLength()","55":"ObjectArraySubjectTest::::hasLength()","56":"ObjectArraySubjectTest::::hasLength()","57":"ObjectArraySubjectTest::::hasLength()","58":"ObjectArraySubjectTest::::hasLength()","59":"ObjectArraySubjectTest::::hasLength()","61":"ObjectArraySubjectTest::::hasLengthFail()","62":"ObjectArraySubjectTest::::hasLengthFail()","63":"ObjectArraySubjectTest::::hasLengthFail()","64":"ObjectArraySubjectTest::::hasLengthFail()","65":"ObjectArraySubjectTest::::hasLengthFail()","67":"ObjectArraySubjectTest::::hasLengthMultiFail()","68":"ObjectArraySubjectTest::::hasLengthMultiFail()","69":"ObjectArraySubjectTest::::hasLengthMultiFail()","70":"ObjectArraySubjectTest::::hasLengthMultiFail()","71":"ObjectArraySubjectTest::::hasLengthMultiFail()","73":"ObjectArraySubjectTest::::hasLengthNegative()","74":"ObjectArraySubjectTest::::hasLengthNegative()","75":"ObjectArraySubjectTest::::hasLengthNegative()","76":"ObjectArraySubjectTest::::hasLengthNegative()","77":"ObjectArraySubjectTest::::hasLengthNegative()","78":"ObjectArraySubjectTest::::hasLengthNegative()","79":"ObjectArraySubjectTest::::hasLengthNegative()","80":"ObjectArraySubjectTest::::hasLengthNegative()","82":"ObjectArraySubjectTest::::isEmpty()","83":"ObjectArraySubjectTest::::isEmpty()","84":"ObjectArraySubjectTest::::isEmpty()","85":"ObjectArraySubjectTest::::isEmpty()","86":"ObjectArraySubjectTest::::isEmpty()","88":"ObjectArraySubjectTest::::isEmptyFail()","89":"ObjectArraySubjectTest::::isEmptyFail()","90":"ObjectArraySubjectTest::::isEmptyFail()","91":"ObjectArraySubjectTest::::isEmptyFail()","92":"ObjectArraySubjectTest::::isEmptyFail()","94":"ObjectArraySubjectTest::::isNotEmpty()","95":"ObjectArraySubjectTest::::isNotEmpty()","96":"ObjectArraySubjectTest::::isNotEmpty()","97":"ObjectArraySubjectTest::::isNotEmpty()","98":"ObjectArraySubjectTest::::isNotEmpty()","100":"ObjectArraySubjectTest::::isNotEmptyFail()","101":"ObjectArraySubjectTest::::isNotEmptyFail()","102":"ObjectArraySubjectTest::::isNotEmptyFail()","103":"ObjectArraySubjectTest::::isNotEmptyFail()","104":"ObjectArraySubjectTest::::isNotEmptyFail()","106":"ObjectArraySubjectTest::::isEqualTo_fail_unequalOrdering()","107":"ObjectArraySubjectTest::::isEqualTo_fail_unequalOrdering()","108":"ObjectArraySubjectTest::::isEqualTo_fail_unequalOrdering()","109":"ObjectArraySubjectTest::::isEqualTo_fail_unequalOrdering()","110":"ObjectArraySubjectTest::::isEqualTo_fail_unequalOrdering()","112":"ObjectArraySubjectTest::::isEqualTo_fail_unequalOrderingMultiDimensional_00()","113":"ObjectArraySubjectTest::::isEqualTo_fail_unequalOrderingMultiDimensional_00()","114":"ObjectArraySubjectTest::::isEqualTo_fail_unequalOrderingMultiDimensional_00()","115":"ObjectArraySubjectTest::::isEqualTo_fail_unequalOrderingMultiDimensional_00()","116":"ObjectArraySubjectTest::::isEqualTo_fail_unequalOrderingMultiDimensional_00()","117":"ObjectArraySubjectTest::::isEqualTo_fail_unequalOrderingMultiDimensional_00()","119":"ObjectArraySubjectTest::::isEqualTo_fail_unequalOrderingMultiDimensional_01()","120":"ObjectArraySubjectTest::::isEqualTo_fail_unequalOrderingMultiDimensional_01()","121":"ObjectArraySubjectTest::::isEqualTo_fail_unequalOrderingMultiDimensional_01()","122":"ObjectArraySubjectTest::::isEqualTo_fail_unequalOrderingMultiDimensional_01()","123":"ObjectArraySubjectTest::::isEqualTo_fail_unequalOrderingMultiDimensional_01()","124":"ObjectArraySubjectTest::::isEqualTo_fail_unequalOrderingMultiDimensional_01()","125":"ObjectArraySubjectTest::::isEqualTo_fail_unequalOrderingMultiDimensional_01()","126":"ObjectArraySubjectTest::::isEqualTo_fail_unequalOrderingMultiDimensional_01()","128":"ObjectArraySubjectTest::::isEqualTo_fail_unequalOrderingMultiDimensional_11()","129":"ObjectArraySubjectTest::::isEqualTo_fail_unequalOrderingMultiDimensional_11()","130":"ObjectArraySubjectTest::::isEqualTo_fail_unequalOrderingMultiDimensional_11()","131":"ObjectArraySubjectTest::::isEqualTo_fail_unequalOrderingMultiDimensional_11()","132":"ObjectArraySubjectTest::::isEqualTo_fail_unequalOrderingMultiDimensional_11()","133":"ObjectArraySubjectTest::::isEqualTo_fail_unequalOrderingMultiDimensional_11()","134":"ObjectArraySubjectTest::::isEqualTo_fail_unequalOrderingMultiDimensional_11()","135":"ObjectArraySubjectTest::::isEqualTo_fail_unequalOrderingMultiDimensional_11()","137":"ObjectArraySubjectTest::::isEqualTo_fail_notAnArray()","138":"ObjectArraySubjectTest::::isEqualTo_fail_notAnArray()","139":"ObjectArraySubjectTest::::isEqualTo_fail_notAnArray()","140":"ObjectArraySubjectTest::::isEqualTo_fail_notAnArray()","142":"ObjectArraySubjectTest::::isNotEqualTo_sameLengths()","143":"ObjectArraySubjectTest::::isNotEqualTo_sameLengths()","144":"ObjectArraySubjectTest::::isNotEqualTo_sameLengths()","145":"ObjectArraySubjectTest::::isNotEqualTo_sameLengths()","146":"ObjectArraySubjectTest::::isNotEqualTo_sameLengths()","148":"ObjectArraySubjectTest::::isNotEqualTo_differentLengths()","149":"ObjectArraySubjectTest::::isNotEqualTo_differentLengths()","150":"ObjectArraySubjectTest::::isNotEqualTo_differentLengths()","151":"ObjectArraySubjectTest::::isNotEqualTo_differentLengths()","152":"ObjectArraySubjectTest::::isNotEqualTo_differentLengths()","153":"ObjectArraySubjectTest::::isNotEqualTo_differentLengths()","155":"ObjectArraySubjectTest::::isNotEqualTo_differentTypes()","156":"ObjectArraySubjectTest::::isNotEqualTo_differentTypes()","157":"ObjectArraySubjectTest::::isNotEqualTo_differentTypes()","158":"ObjectArraySubjectTest::::isNotEqualTo_differentTypes()","160":"ObjectArraySubjectTest::::isNotEqualTo_failEquals()","161":"ObjectArraySubjectTest::::isNotEqualTo_failEquals()","162":"ObjectArraySubjectTest::::isNotEqualTo_failEquals()","163":"ObjectArraySubjectTest::::isNotEqualTo_failEquals()","165":"ObjectArraySubjectTest::::isNotEqualTo_failEqualsMultiDimensional()","166":"ObjectArraySubjectTest::::isNotEqualTo_failEqualsMultiDimensional()","167":"ObjectArraySubjectTest::::isNotEqualTo_failEqualsMultiDimensional()","168":"ObjectArraySubjectTest::::isNotEqualTo_failEqualsMultiDimensional()","169":"ObjectArraySubjectTest::::isNotEqualTo_failEqualsMultiDimensional()","170":"ObjectArraySubjectTest::::isNotEqualTo_failEqualsMultiDimensional()","172":"ObjectArraySubjectTest::::isNotEqualTo_failSame()","173":"ObjectArraySubjectTest::::isNotEqualTo_failSame()","174":"ObjectArraySubjectTest::::isNotEqualTo_failSame()","175":"ObjectArraySubjectTest::::isNotEqualTo_failSame()","176":"ObjectArraySubjectTest::::isNotEqualTo_failSame()","177":"ObjectArraySubjectTest::::isNotEqualTo_failSame()","179":"ObjectArraySubjectTest::::isNotEqualTo_failSameMultiDimensional()","180":"ObjectArraySubjectTest::::isNotEqualTo_failSameMultiDimensional()","181":"ObjectArraySubjectTest::::isNotEqualTo_failSameMultiDimensional()","182":"ObjectArraySubjectTest::::isNotEqualTo_failSameMultiDimensional()","183":"ObjectArraySubjectTest::::isNotEqualTo_failSameMultiDimensional()","184":"ObjectArraySubjectTest::::isNotEqualTo_failSameMultiDimensional()","186":"ObjectArraySubjectTest::::stringArrayIsEqualTo()","187":"ObjectArraySubjectTest::::stringArrayIsEqualTo()","188":"ObjectArraySubjectTest::::stringArrayIsEqualTo()","189":"ObjectArraySubjectTest::::stringArrayIsEqualTo()","190":"ObjectArraySubjectTest::::stringArrayIsEqualTo()","192":"ObjectArraySubjectTest::::stringArrayAsList()","193":"ObjectArraySubjectTest::::stringArrayAsList()","194":"ObjectArraySubjectTest::::stringArrayAsList()","195":"ObjectArraySubjectTest::::stringArrayAsList()","197":"ObjectArraySubjectTest::::multiDimensionalStringArrayAsList()","198":"ObjectArraySubjectTest::::multiDimensionalStringArrayAsList()","199":"ObjectArraySubjectTest::::multiDimensionalStringArrayAsList()","200":"ObjectArraySubjectTest::::multiDimensionalStringArrayAsList()","201":"ObjectArraySubjectTest::::multiDimensionalStringArrayAsList()","203":"ObjectArraySubjectTest::::stringArrayIsEqualTo_fail_unequalLength()","204":"ObjectArraySubjectTest::::stringArrayIsEqualTo_fail_unequalLength()","205":"ObjectArraySubjectTest::::stringArrayIsEqualTo_fail_unequalLength()","206":"ObjectArraySubjectTest::::stringArrayIsEqualTo_fail_unequalLength()","207":"ObjectArraySubjectTest::::stringArrayIsEqualTo_fail_unequalLength()","208":"ObjectArraySubjectTest::::stringArrayIsEqualTo_fail_unequalLength()","209":"ObjectArraySubjectTest::::stringArrayIsEqualTo_fail_unequalLength()","211":"ObjectArraySubjectTest::::stringArrayIsEqualTo_fail_unequalLengthMultiDimensional()","212":"ObjectArraySubjectTest::::stringArrayIsEqualTo_fail_unequalLengthMultiDimensional()","213":"ObjectArraySubjectTest::::stringArrayIsEqualTo_fail_unequalLengthMultiDimensional()","214":"ObjectArraySubjectTest::::stringArrayIsEqualTo_fail_unequalLengthMultiDimensional()","215":"ObjectArraySubjectTest::::stringArrayIsEqualTo_fail_unequalLengthMultiDimensional()","216":"ObjectArraySubjectTest::::stringArrayIsEqualTo_fail_unequalLengthMultiDimensional()","217":"ObjectArraySubjectTest::::stringArrayIsEqualTo_fail_unequalLengthMultiDimensional()","219":"ObjectArraySubjectTest::::stringArrayIsEqualTo_fail_unequalOrdering()","220":"ObjectArraySubjectTest::::stringArrayIsEqualTo_fail_unequalOrdering()","221":"ObjectArraySubjectTest::::stringArrayIsEqualTo_fail_unequalOrdering()","222":"ObjectArraySubjectTest::::stringArrayIsEqualTo_fail_unequalOrdering()","223":"ObjectArraySubjectTest::::stringArrayIsEqualTo_fail_unequalOrdering()","225":"ObjectArraySubjectTest::::stringArrayIsEqualTo_fail_unequalOrderingMultiDimensional()","226":"ObjectArraySubjectTest::::stringArrayIsEqualTo_fail_unequalOrderingMultiDimensional()","227":"ObjectArraySubjectTest::::stringArrayIsEqualTo_fail_unequalOrderingMultiDimensional()","228":"ObjectArraySubjectTest::::stringArrayIsEqualTo_fail_unequalOrderingMultiDimensional()","229":"ObjectArraySubjectTest::::stringArrayIsEqualTo_fail_unequalOrderingMultiDimensional()","230":"ObjectArraySubjectTest::::stringArrayIsEqualTo_fail_unequalOrderingMultiDimensional()","232":"ObjectArraySubjectTest::::setArrayIsEqualTo_fail_unequalOrdering()","233":"ObjectArraySubjectTest::::setArrayIsEqualTo_fail_unequalOrdering()","234":"ObjectArraySubjectTest::::setArrayIsEqualTo_fail_unequalOrdering()","235":"ObjectArraySubjectTest::::setArrayIsEqualTo_fail_unequalOrdering()","236":"ObjectArraySubjectTest::::setArrayIsEqualTo_fail_unequalOrdering()","237":"ObjectArraySubjectTest::::setArrayIsEqualTo_fail_unequalOrdering()","238":"ObjectArraySubjectTest::::setArrayIsEqualTo_fail_unequalOrdering()","239":"ObjectArraySubjectTest::::setArrayIsEqualTo_fail_unequalOrdering()","241":"ObjectArraySubjectTest::::primitiveMultiDimensionalArrayIsEqualTo()","242":"ObjectArraySubjectTest::::primitiveMultiDimensionalArrayIsEqualTo()","243":"ObjectArraySubjectTest::::primitiveMultiDimensionalArrayIsEqualTo()","244":"ObjectArraySubjectTest::::primitiveMultiDimensionalArrayIsEqualTo()","245":"ObjectArraySubjectTest::::primitiveMultiDimensionalArrayIsEqualTo()","247":"ObjectArraySubjectTest::::primitiveMultiDimensionalArrayIsEqualTo_fail_unequalOrdering()","248":"ObjectArraySubjectTest::::primitiveMultiDimensionalArrayIsEqualTo_fail_unequalOrdering()","249":"ObjectArraySubjectTest::::primitiveMultiDimensionalArrayIsEqualTo_fail_unequalOrdering()","250":"ObjectArraySubjectTest::::primitiveMultiDimensionalArrayIsEqualTo_fail_unequalOrdering()","251":"ObjectArraySubjectTest::::primitiveMultiDimensionalArrayIsEqualTo_fail_unequalOrdering()","252":"ObjectArraySubjectTest::::primitiveMultiDimensionalArrayIsEqualTo_fail_unequalOrdering()","253":"ObjectArraySubjectTest::::primitiveMultiDimensionalArrayIsEqualTo_fail_unequalOrdering()","254":"ObjectArraySubjectTest::::primitiveMultiDimensionalArrayIsEqualTo_fail_unequalOrdering()","256":"ObjectArraySubjectTest::::primitiveMultiDimensionalArrayIsNotEqualTo()","257":"ObjectArraySubjectTest::::primitiveMultiDimensionalArrayIsNotEqualTo()","258":"ObjectArraySubjectTest::::primitiveMultiDimensionalArrayIsNotEqualTo()","259":"ObjectArraySubjectTest::::primitiveMultiDimensionalArrayIsNotEqualTo()","260":"ObjectArraySubjectTest::::primitiveMultiDimensionalArrayIsNotEqualTo()","262":"ObjectArraySubjectTest::::primitiveMultiDimensionalArrayIsNotEqualTo_fail_equal()","263":"ObjectArraySubjectTest::::primitiveMultiDimensionalArrayIsNotEqualTo_fail_equal()","264":"ObjectArraySubjectTest::::primitiveMultiDimensionalArrayIsNotEqualTo_fail_equal()","265":"ObjectArraySubjectTest::::primitiveMultiDimensionalArrayIsNotEqualTo_fail_equal()","266":"ObjectArraySubjectTest::::primitiveMultiDimensionalArrayIsNotEqualTo_fail_equal()","268":"ObjectArraySubjectTest::::boxedAndUnboxed()","269":"ObjectArraySubjectTest::::boxedAndUnboxed()","270":"ObjectArraySubjectTest::::boxedAndUnboxed()","271":"ObjectArraySubjectTest::::boxedAndUnboxed()","272":"ObjectArraySubjectTest::::boxedAndUnboxed()","273":"ObjectArraySubjectTest::::boxedAndUnboxed()","274":"ObjectArraySubjectTest::::boxedAndUnboxed()","275":"ObjectArraySubjectTest::::boxedAndUnboxed()","277":"ObjectArraySubjectTest::::objectArray(java.lang.Object[])","278":"ObjectArraySubjectTest::::objectArray(java.lang.Object[])","279":"ObjectArraySubjectTest::::objectArray(java.lang.Object[])","281":"ObjectArraySubjectTest::::objectArray(java.lang.String[])","282":"ObjectArraySubjectTest::::objectArray(java.lang.String[])","283":"ObjectArraySubjectTest::::objectArray(java.lang.String[])","285":"ObjectArraySubjectTest::::objectArray(java.util.Set<?>[])","286":"ObjectArraySubjectTest::::objectArray(java.util.Set<?>[])","287":"ObjectArraySubjectTest::::objectArray(java.util.Set<?>[])","289":"ObjectArraySubjectTest::::expectFailureWhenTestingThat(java.lang.Object[])","290":"ObjectArraySubjectTest::::expectFailureWhenTestingThat(java.lang.Object[])","291":"ObjectArraySubjectTest::::expectFailureWhenTestingThat(java.lang.Object[])"},"tests":[{"test_lines":[36,39],"covered_lines":[32,33,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[41,46],"covered_lines":[32,33,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[48,51],"covered_lines":[32,33,34,37],"label":"ObjectArraySubject::::asList()"},{"test_lines":[53,59],"covered_lines":[32,33,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[61,65],"covered_lines":[32,33,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[67,71],"covered_lines":[32,33,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[73,80],"covered_lines":[32,33,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[82,86],"covered_lines":[32,33,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[88,92],"covered_lines":[32,33,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[94,98],"covered_lines":[32,33,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[100,104],"covered_lines":[32,33,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[106,110],"covered_lines":[32,33,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[112,117],"covered_lines":[32,33,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[119,126],"covered_lines":[32,33,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[128,135],"covered_lines":[32,33,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[137,140],"covered_lines":[32,33,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[142,146],"covered_lines":[32,33,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[148,153],"covered_lines":[32,33,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[155,158],"covered_lines":[32,33,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[160,163],"covered_lines":[32,33,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[165,170],"covered_lines":[32,33,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[172,177],"covered_lines":[32,33,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[179,184],"covered_lines":[32,33,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[186,190],"covered_lines":[32,33,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[192,195],"covered_lines":[32,33,34,37],"label":"ObjectArraySubject::::asList()"},{"test_lines":[197,201],"covered_lines":[32,33,34,37],"label":"ObjectArraySubject::::asList()"},{"test_lines":[203,209],"covered_lines":[32,33,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[211,217],"covered_lines":[32,33,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[219,223],"covered_lines":[32,33,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[225,230],"covered_lines":[32,33,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[232,239],"covered_lines":[32,33,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[241,245],"covered_lines":[32,33,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[247,254],"covered_lines":[32,33,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[256,260],"covered_lines":[32,33,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[262,266],"covered_lines":[32,33,34],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[268,275],"covered_lines":[32,33,34],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/truth/core/src/main/java/com/google/common/truth/BigDecimalSubject.java":{"class_content":["/*\n"," * Copyright (c) 2015 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.base.Preconditions.checkNotNull;\n","import static com.google.common.truth.Fact.fact;\n","import static com.google.common.truth.Fact.simpleFact;\n","\n","import java.math.BigDecimal;\n","import org.checkerframework.checker.nullness.qual.Nullable;\n","\n","/**\n"," * Propositions for {@link BigDecimal} typed subjects.\n"," *\n"," * @author Kurt Alfred Kluever\n"," */\n","public final class BigDecimalSubject extends ComparableSubject<BigDecimal> {\n","  private final @Nullable BigDecimal actual;\n","\n","  BigDecimalSubject(FailureMetadata metadata, @Nullable BigDecimal actual) {\n","    super(metadata, actual);\n","    this.actual = actual;\n","  }\n","\n","  /**\n","   * Fails if the subject's value is not equal to the value of the given {@link BigDecimal}. (i.e.,\n","   * fails if {@code actual.comparesTo(expected) != 0}).\n","   *\n","   * <p><b>Note:</b> The scale of the BigDecimal is ignored. If you want to compare the values and\n","   * the scales, use {@link #isEqualTo(Object)}.\n","   */\n","  public void isEqualToIgnoringScale(BigDecimal expected) {\n","    compareValues(expected);\n","  }\n","\n","  /**\n","   * Fails if the subject's value is not equal to the value of the {@link BigDecimal} created from\n","   * the expected string (i.e., fails if {@code actual.comparesTo(new BigDecimal(expected)) != 0}).\n","   *\n","   * <p><b>Note:</b> The scale of the BigDecimal is ignored. If you want to compare the values and\n","   * the scales, use {@link #isEqualTo(Object)}.\n","   */\n","  public void isEqualToIgnoringScale(String expected) {\n","    compareValues(new BigDecimal(expected));\n","  }\n","\n","  /**\n","   * Fails if the subject's value is not equal to the value of the {@link BigDecimal} created from\n","   * the expected {@code long} (i.e., fails if {@code actual.comparesTo(new BigDecimal(expected)) !=\n","   * 0}).\n","   *\n","   * <p><b>Note:</b> The scale of the BigDecimal is ignored. If you want to compare the values and\n","   * the scales, use {@link #isEqualTo(Object)}.\n","   */\n","  public void isEqualToIgnoringScale(long expected) {\n","    compareValues(new BigDecimal(expected));\n","  }\n","\n","  /**\n","   * Fails if the subject's value and scale is not equal to the given {@link BigDecimal}.\n","   *\n","   * <p><b>Note:</b> If you only want to compare the values of the BigDecimals and not their scales,\n","   * use {@link #isEqualToIgnoringScale(BigDecimal)} instead.\n","   */\n","  @Override // To express more specific javadoc\n","  public void isEqualTo(@Nullable Object expected) {\n","    super.isEqualTo(expected);\n","  }\n","\n","  /**\n","   * Fails if the subject is not equivalent to the given value according to {@link\n","   * Comparable#compareTo}, (i.e., fails if {@code a.comparesTo(b) != 0}). This method behaves\n","   * identically to (the more clearly named) {@link #isEqualToIgnoringScale(BigDecimal)}.\n","   *\n","   * <p><b>Note:</b> Do not use this method for checking object equality. Instead, use {@link\n","   * #isEqualTo(Object)}.\n","   */\n","  @Override\n","  public void isEquivalentAccordingToCompareTo(@Nullable BigDecimal expected) {\n","    compareValues(expected);\n","  }\n","\n","  private void compareValues(@Nullable BigDecimal expected) {\n","    if (checkNotNull(actual).compareTo(checkNotNull(expected)) != 0) {\n","      failWithoutActual(fact(\"expected\", expected), butWas(), simpleFact(\"(scale is ignored)\"));\n","    }\n","  }\n","}\n"],"test_content":["/*\n"," * Copyright (c) 2015 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.truth.Truth.assertThat;\n","import static java.math.BigDecimal.TEN;\n","\n","import java.math.BigDecimal;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import org.junit.runners.JUnit4;\n","\n","/**\n"," * Tests for BigDecimal Subjects.\n"," *\n"," * @author Kurt Alfred Kluever\n"," */\n","@RunWith(JUnit4.class)\n","public class BigDecimalSubjectTest extends BaseSubjectTestCase {\n","  @SuppressWarnings(\"TruthSelfEquals\")\n","  @Test\n","  public void isEqualTo() {\n","    // make sure this still works\n","    assertThat(TEN).isEqualTo(TEN);\n","  }\n","\n","  @Test\n","  public void isEquivalentAccordingToCompareTo() {\n","    // make sure this still works\n","    assertThat(TEN).isEquivalentAccordingToCompareTo(TEN);\n","  }\n","\n","  @Test\n","  public void isEqualToIgnoringScale_bigDecimal() {\n","    assertThat(TEN).isEqualToIgnoringScale(TEN);\n","    assertThat(TEN).isEqualToIgnoringScale(new BigDecimal(10));\n","    expectFailureWhenTestingThat(TEN).isEqualToIgnoringScale(new BigDecimal(3));\n","    assertFailureKeys(\"expected\", \"but was\", \"(scale is ignored)\");\n","    assertFailureValue(\"expected\", \"3\");\n","    assertFailureValue(\"but was\", \"10\");\n","  }\n","\n","  @Test\n","  public void isEqualToIgnoringScale_int() {\n","    assertThat(TEN).isEqualToIgnoringScale(10);\n","    expectFailureWhenTestingThat(TEN).isEqualToIgnoringScale(3);\n","    assertFailureKeys(\"expected\", \"but was\", \"(scale is ignored)\");\n","    assertFailureValue(\"expected\", \"3\");\n","    assertFailureValue(\"but was\", \"10\");\n","  }\n","\n","  @Test\n","  public void isEqualToIgnoringScale_long() {\n","    assertThat(TEN).isEqualToIgnoringScale(10L);\n","    expectFailureWhenTestingThat(TEN).isEqualToIgnoringScale(3L);\n","    assertFailureKeys(\"expected\", \"but was\", \"(scale is ignored)\");\n","    assertFailureValue(\"expected\", \"3\");\n","    assertFailureValue(\"but was\", \"10\");\n","  }\n","\n","  @Test\n","  public void isEqualToIgnoringScale_string() {\n","    assertThat(TEN).isEqualToIgnoringScale(\"10\");\n","    assertThat(TEN).isEqualToIgnoringScale(\"10.\");\n","    assertThat(TEN).isEqualToIgnoringScale(\"10.0\");\n","    assertThat(TEN).isEqualToIgnoringScale(\"10.00\");\n","    expectFailureWhenTestingThat(TEN).isEqualToIgnoringScale(\"3\");\n","    assertFailureKeys(\"expected\", \"but was\", \"(scale is ignored)\");\n","    assertFailureValue(\"expected\", \"3\");\n","    assertFailureValue(\"but was\", \"10\");\n","  }\n","\n","  private BigDecimalSubject expectFailureWhenTestingThat(BigDecimal actual) {\n","    return expectFailure.whenTesting().that(actual);\n","  }\n","}\n"],"method_lines_dic":{"BigDecimalSubject::::isEqualToIgnoringScale(java.math.BigDecimal)":[45,47],"BigDecimalSubject::::isEqualToIgnoringScale(java.lang.String)":[56,58],"BigDecimalSubject::::isEqualToIgnoringScale(long)":[68,70],"BigDecimalSubject::::isEqualTo(java.lang.Object)":[78,81],"BigDecimalSubject::::isEquivalentAccordingToCompareTo(java.math.BigDecimal)":[91,94],"BigDecimalSubject::::compareValues(java.math.BigDecimal)":[96,100]},"test_method_lines_dic":{"BigDecimalSubjectTest::::isEqualTo()":[33,38],"BigDecimalSubjectTest::::isEquivalentAccordingToCompareTo()":[40,44],"BigDecimalSubjectTest::::isEqualToIgnoringScale_bigDecimal()":[46,54],"BigDecimalSubjectTest::::isEqualToIgnoringScale_int()":[56,63],"BigDecimalSubjectTest::::isEqualToIgnoringScale_long()":[65,72],"BigDecimalSubjectTest::::isEqualToIgnoringScale_string()":[74,84],"BigDecimalSubjectTest::::expectFailureWhenTestingThat(java.math.BigDecimal)":[86,88]},"reverse_method_lines_dic":{"45":"BigDecimalSubject::::isEqualToIgnoringScale(java.math.BigDecimal)","46":"BigDecimalSubject::::isEqualToIgnoringScale(java.math.BigDecimal)","47":"BigDecimalSubject::::isEqualToIgnoringScale(java.math.BigDecimal)","56":"BigDecimalSubject::::isEqualToIgnoringScale(java.lang.String)","57":"BigDecimalSubject::::isEqualToIgnoringScale(java.lang.String)","58":"BigDecimalSubject::::isEqualToIgnoringScale(java.lang.String)","68":"BigDecimalSubject::::isEqualToIgnoringScale(long)","69":"BigDecimalSubject::::isEqualToIgnoringScale(long)","70":"BigDecimalSubject::::isEqualToIgnoringScale(long)","78":"BigDecimalSubject::::isEqualTo(java.lang.Object)","79":"BigDecimalSubject::::isEqualTo(java.lang.Object)","80":"BigDecimalSubject::::isEqualTo(java.lang.Object)","81":"BigDecimalSubject::::isEqualTo(java.lang.Object)","91":"BigDecimalSubject::::isEquivalentAccordingToCompareTo(java.math.BigDecimal)","92":"BigDecimalSubject::::isEquivalentAccordingToCompareTo(java.math.BigDecimal)","93":"BigDecimalSubject::::isEquivalentAccordingToCompareTo(java.math.BigDecimal)","94":"BigDecimalSubject::::isEquivalentAccordingToCompareTo(java.math.BigDecimal)","96":"BigDecimalSubject::::compareValues(java.math.BigDecimal)","97":"BigDecimalSubject::::compareValues(java.math.BigDecimal)","98":"BigDecimalSubject::::compareValues(java.math.BigDecimal)","99":"BigDecimalSubject::::compareValues(java.math.BigDecimal)","100":"BigDecimalSubject::::compareValues(java.math.BigDecimal)"},"test_reverse_method_lines_dic":{"33":"BigDecimalSubjectTest::::isEqualTo()","34":"BigDecimalSubjectTest::::isEqualTo()","35":"BigDecimalSubjectTest::::isEqualTo()","36":"BigDecimalSubjectTest::::isEqualTo()","37":"BigDecimalSubjectTest::::isEqualTo()","38":"BigDecimalSubjectTest::::isEqualTo()","40":"BigDecimalSubjectTest::::isEquivalentAccordingToCompareTo()","41":"BigDecimalSubjectTest::::isEquivalentAccordingToCompareTo()","42":"BigDecimalSubjectTest::::isEquivalentAccordingToCompareTo()","43":"BigDecimalSubjectTest::::isEquivalentAccordingToCompareTo()","44":"BigDecimalSubjectTest::::isEquivalentAccordingToCompareTo()","46":"BigDecimalSubjectTest::::isEqualToIgnoringScale_bigDecimal()","47":"BigDecimalSubjectTest::::isEqualToIgnoringScale_bigDecimal()","48":"BigDecimalSubjectTest::::isEqualToIgnoringScale_bigDecimal()","49":"BigDecimalSubjectTest::::isEqualToIgnoringScale_bigDecimal()","50":"BigDecimalSubjectTest::::isEqualToIgnoringScale_bigDecimal()","51":"BigDecimalSubjectTest::::isEqualToIgnoringScale_bigDecimal()","52":"BigDecimalSubjectTest::::isEqualToIgnoringScale_bigDecimal()","53":"BigDecimalSubjectTest::::isEqualToIgnoringScale_bigDecimal()","54":"BigDecimalSubjectTest::::isEqualToIgnoringScale_bigDecimal()","56":"BigDecimalSubjectTest::::isEqualToIgnoringScale_int()","57":"BigDecimalSubjectTest::::isEqualToIgnoringScale_int()","58":"BigDecimalSubjectTest::::isEqualToIgnoringScale_int()","59":"BigDecimalSubjectTest::::isEqualToIgnoringScale_int()","60":"BigDecimalSubjectTest::::isEqualToIgnoringScale_int()","61":"BigDecimalSubjectTest::::isEqualToIgnoringScale_int()","62":"BigDecimalSubjectTest::::isEqualToIgnoringScale_int()","63":"BigDecimalSubjectTest::::isEqualToIgnoringScale_int()","65":"BigDecimalSubjectTest::::isEqualToIgnoringScale_long()","66":"BigDecimalSubjectTest::::isEqualToIgnoringScale_long()","67":"BigDecimalSubjectTest::::isEqualToIgnoringScale_long()","68":"BigDecimalSubjectTest::::isEqualToIgnoringScale_long()","69":"BigDecimalSubjectTest::::isEqualToIgnoringScale_long()","70":"BigDecimalSubjectTest::::isEqualToIgnoringScale_long()","71":"BigDecimalSubjectTest::::isEqualToIgnoringScale_long()","72":"BigDecimalSubjectTest::::isEqualToIgnoringScale_long()","74":"BigDecimalSubjectTest::::isEqualToIgnoringScale_string()","75":"BigDecimalSubjectTest::::isEqualToIgnoringScale_string()","76":"BigDecimalSubjectTest::::isEqualToIgnoringScale_string()","77":"BigDecimalSubjectTest::::isEqualToIgnoringScale_string()","78":"BigDecimalSubjectTest::::isEqualToIgnoringScale_string()","79":"BigDecimalSubjectTest::::isEqualToIgnoringScale_string()","80":"BigDecimalSubjectTest::::isEqualToIgnoringScale_string()","81":"BigDecimalSubjectTest::::isEqualToIgnoringScale_string()","82":"BigDecimalSubjectTest::::isEqualToIgnoringScale_string()","83":"BigDecimalSubjectTest::::isEqualToIgnoringScale_string()","84":"BigDecimalSubjectTest::::isEqualToIgnoringScale_string()","86":"BigDecimalSubjectTest::::expectFailureWhenTestingThat(java.math.BigDecimal)","87":"BigDecimalSubjectTest::::expectFailureWhenTestingThat(java.math.BigDecimal)","88":"BigDecimalSubjectTest::::expectFailureWhenTestingThat(java.math.BigDecimal)"},"tests":[{"test_lines":[33,38],"covered_lines":[34,35,36,80,81],"label":"BigDecimalSubject::::isEqualTo(java.lang.Object)"},{"test_lines":[40,44],"covered_lines":[34,35,36,93,94,97,100],"label":"BigDecimalSubject::::isEquivalentAccordingToCompareTo(java.math.BigDecimal)"},{"test_lines":[46,54],"covered_lines":[34,35,36,46,47,97,98,100],"label":"BigDecimalSubject::::isEqualToIgnoringScale(java.math.BigDecimal)"},{"test_lines":[56,63],"covered_lines":[34,35,36,69,70,97,98,100],"label":"BigDecimalSubject::::isEqualToIgnoringScale(long)"},{"test_lines":[65,72],"covered_lines":[34,35,36,69,70,97,98,100],"label":"BigDecimalSubject::::isEqualToIgnoringScale(long)"},{"test_lines":[74,84],"covered_lines":[34,35,36,57,58,97,98,100],"label":"BigDecimalSubject::::isEqualToIgnoringScale(java.lang.String)"}]},"/bernard/dataset_construction/prep/repos/truth/core/src/main/java/com/google/common/truth/Correspondence.java":{"class_content":["/*\n"," * Copyright (c) 2016 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.base.Functions.identity;\n","import static com.google.common.base.Preconditions.checkNotNull;\n","import static com.google.common.base.Preconditions.checkState;\n","import static com.google.common.truth.DoubleSubject.checkTolerance;\n","import static com.google.common.truth.Fact.fact;\n","import static com.google.common.truth.Fact.simpleFact;\n","import static com.google.common.truth.Platform.getStackTraceAsString;\n","import static com.google.common.truth.SubjectUtils.asList;\n","\n","import com.google.common.base.Function;\n","import com.google.common.base.Joiner;\n","import com.google.common.base.Objects;\n","import com.google.common.base.Strings;\n","import com.google.common.collect.ImmutableList;\n","import java.util.Arrays;\n","import java.util.List;\n","import org.checkerframework.checker.nullness.qual.Nullable;\n","\n","/**\n"," * Determines whether an instance of type {@code A} corresponds in some way to an instance of type\n"," * {@code E} for the purposes of a test assertion. For example, the implementation returned by the\n"," * {@link #tolerance(double)} factory method implements approximate equality between numeric values,\n"," * with values being said to correspond if the difference between them does not exceed the given\n"," * fixed tolerance. The instances of type {@code A} are typically actual values from a collection\n"," * returned by the code under test; the instances of type {@code E} are typically expected values\n"," * with which the actual values are compared by the test.\n"," *\n"," * <p>The correspondence is required to be consistent: for any given values {@code actual} and\n"," * {@code expected}, multiple invocations of {@code compare(actual, expected)} must consistently\n"," * return {@code true} or consistently return {@code false} (provided that neither value is\n"," * modified). Although {@code A} and {@code E} will often be the same types, they are <i>not</i>\n"," * required to be the same, and even if they are it is <i>not</i> required that the correspondence\n"," * should have any of the other properties of an equivalence relation (reflexivity, symmetry, or\n"," * transitivity).\n"," *\n"," * <p>Optionally, instances of this class can also provide functionality to format the difference\n"," * between values which do not correspond. This results in failure messages including formatted\n"," * diffs between expected and actual value, where possible.\n"," *\n"," * <p>The recommended approach for creating an instance of this class is to use one of the static\n"," * factory methods. The most general of these is {@link #from}; the other methods are more\n"," * convenient in specific cases. The optional diff-formatting functionality can be added using\n"," * {@link #formattingDiffsUsing}. (Alternatively, you can subclass this class yourself, but that is\n"," * generally not recommended.)\n"," *\n"," * <p>Instances of this are typically used via {@link IterableSubject#comparingElementsUsing},\n"," * {@link MapSubject#comparingValuesUsing}, or {@link MultimapSubject#comparingValuesUsing}.\n"," *\n"," * @author Pete Gillin\n"," */\n","public abstract class Correspondence<A extends @Nullable Object, E extends @Nullable Object> {\n","\n","  /**\n","   * Constructs a {@link Correspondence} that compares actual and expected elements using the given\n","   * binary predicate.\n","   *\n","   * <p>The correspondence does not support formatting of diffs (see {@link #formatDiff}). You can\n","   * add that behaviour by calling {@link Correspondence#formattingDiffsUsing}.\n","   *\n","   * <p>Note that, if the data you are asserting about contains nulls, your predicate may be invoked\n","   * with null arguments. If this causes it to throw a {@link NullPointerException}, then your test\n","   * will fail. (See {@link Correspondence#compare} for more detail on how exceptions are handled.)\n","   * In particular, if your predicate is an instance method reference on the actual value (as in the\n","   * {@code String::contains} example below), your test will fail if it sees null actual values.\n","   *\n","   * <p>Example using an instance method reference:\n","   *\n","   * <pre>{@code\n","   * static final Correspondence<String, String> CONTAINS_SUBSTRING =\n","   *     Correspondence.from(String::contains, \"contains\");\n","   * }</pre>\n","   *\n","   * <p>Example using a static method reference:\n","   *\n","   * <pre>{@code\n","   * class MyRecordTestHelper {\n","   *   static final Correspondence<MyRecord, MyRecord> EQUIVALENCE =\n","   *       Correspondence.from(MyRecordTestHelper::recordsEquivalent, \"is equivalent to\");\n","   *   static boolean recordsEquivalent(MyRecord actual, MyRecord expected) {\n","   *     // code to check whether records should be considered equivalent for testing purposes\n","   *   }\n","   * }\n","   * }</pre>\n","   *\n","   * <p>Example using a lambda:\n","   *\n","   * <pre>{@code\n","   * static final Correspondence<Object, Class<?>> INSTANCE_OF =\n","   *     Correspondence.from((obj, clazz) -> clazz.isInstance(obj), \"is an instance of\");\n","   * }</pre>\n","   *\n","   * @param predicate a {@link BinaryPredicate} taking an actual and expected value (in that order)\n","   *     and returning whether the actual value corresponds to the expected value in some way\n","   * @param description should fill the gap in a failure message of the form {@code \"not true that\n","   *     <some actual element> is an element that <description> <some expected element>\"}, e.g.\n","   *     {@code \"contains\"}, {@code \"is an instance of\"}, or {@code \"is equivalent to\"}\n","   */\n","  public static <A extends @Nullable Object, E extends @Nullable Object> Correspondence<A, E> from(\n","      BinaryPredicate<A, E> predicate, String description) {\n","    return new FromBinaryPredicate<>(predicate, description);\n","  }\n","\n","  /**\n","   * A functional interface for a binary predicate, to be used to test whether a pair of objects of\n","   * types {@code A} and {@code E} satisfy some condition.\n","   *\n","   * <p>This interface will normally be implemented using a lambda or a method reference, and the\n","   * resulting object will normally be passed directly to {@link Correspondence#from}. As a result,\n","   * you should almost never see {@code BinaryPredicate} used as the type of a field or variable, or\n","   * a return type.\n","   */\n","  public interface BinaryPredicate<A extends @Nullable Object, E extends @Nullable Object> {\n","\n","    /**\n","     * Returns whether or not the actual and expected values satisfy the condition defined by this\n","     * predicate.\n","     */\n","    boolean apply(A actual, E expected);\n","  }\n","\n","  private static final class FromBinaryPredicate<\n","          A extends @Nullable Object, E extends @Nullable Object>\n","      extends Correspondence<A, E> {\n","    private final BinaryPredicate<A, E> predicate;\n","    private final String description;\n","\n","    private FromBinaryPredicate(BinaryPredicate<A, E> correspondencePredicate, String description) {\n","      this.predicate = checkNotNull(correspondencePredicate);\n","      this.description = checkNotNull(description);\n","    }\n","\n","    @Override\n","    public boolean compare(A actual, E expected) {\n","      return predicate.apply(actual, expected);\n","    }\n","\n","    @Override\n","    public String toString() {\n","      return description;\n","    }\n","  }\n","\n","  /**\n","   * Constructs a {@link Correspondence} that compares elements by transforming the actual elements\n","   * using the given function and testing for equality with the expected elements. If the\n","   * transformed actual element (i.e. the output of the given function) is null, it will correspond\n","   * to a null expected element.\n","   *\n","   * <p>The correspondence does not support formatting of diffs (see {@link #formatDiff}). You can\n","   * add that behaviour by calling {@link Correspondence#formattingDiffsUsing}.\n","   *\n","   * <p>Note that, if you the data you are asserting about contains null actual values, your\n","   * function may be invoked with a null argument. If this causes it to throw a {@link\n","   * NullPointerException}, then your test will fail. (See {@link Correspondence#compare} for more\n","   * detail on how exceptions are handled.) In particular, this applies if your function is an\n","   * instance method reference on the actual value (as in the example below). If you want a null\n","   * actual element to correspond to a null expected element, you must ensure that your function\n","   * transforms a null input to a null output.\n","   *\n","   * <p>Example:\n","   *\n","   * <pre>{@code\n","   * static final Correspondence<MyRecord, Integer> HAS_ID =\n","   *     Correspondence.transforming(MyRecord::getId, \"has an ID of\");\n","   * }</pre>\n","   *\n","   * This can be used as follows:\n","   *\n","   * <pre>{@code\n","   * assertThat(myRecords).comparingElementsUsing(HAS_ID).containsExactly(123, 456, 789);\n","   * }</pre>\n","   *\n","   * @param actualTransform a {@link Function} taking an actual value and returning a new value\n","   *     which will be compared with an expected value to determine whether they correspond\n","   * @param description should fill the gap in a failure message of the form {@code \"not true that\n","   *     <some actual element> is an element that <description> <some expected element>\"}, e.g.\n","   *     {@code \"has an ID of\"}\n","   */\n","  public static <A extends @Nullable Object, E extends @Nullable Object>\n","      Correspondence<A, E> transforming(\n","          Function<A, ? extends E> actualTransform, String description) {\n","    return new Transforming<>(actualTransform, identity(), description);\n","  }\n","\n","  /**\n","   * Constructs a {@link Correspondence} that compares elements by transforming the actual and the\n","   * expected elements using the given functions and testing the transformed values for equality. If\n","   * an actual element is transformed to null, it will correspond to an expected element that is\n","   * also transformed to null.\n","   *\n","   * <p>The correspondence does not support formatting of diffs (see {@link #formatDiff}). You can\n","   * add that behaviour by calling {@link Correspondence#formattingDiffsUsing}.\n","   *\n","   * <p>Note that, if you the data you are asserting about contains null actual or expected values,\n","   * the appropriate function may be invoked with a null argument. If this causes it to throw a\n","   * {@link NullPointerException}, then your test will fail. (See {@link Correspondence#compare} for\n","   * more detail on how exceptions are handled.) In particular, this applies if your function is an\n","   * instance method reference on the actual or expected value (as in the example below). If you\n","   * want a null actual element to correspond to a null expected element, you must ensure that your\n","   * functions both transform a null input to a null output.\n","   *\n","   * <p>If you want to apply the same function to both the actual and expected elements, just\n","   * provide the same argument twice.\n","   *\n","   * <p>Example:\n","   *\n","   * <pre>{@code\n","   * static final Correspondence<MyRequest, MyResponse> SAME_IDS =\n","   *     Correspondence.transforming(MyRequest::getId, MyResponse::getId, \"has the same ID as\");\n","   * }</pre>\n","   *\n","   * This can be used as follows:\n","   *\n","   * <pre>{@code\n","   * assertThat(myResponses).comparingElementsUsing(SAME_IDS).containsExactlyElementsIn(myRequests);\n","   * }</pre>\n","   *\n","   * @param actualTransform a {@link Function} taking an actual value and returning a new value\n","   *     which will be compared with a transformed expected value to determine whether they\n","   *     correspond\n","   * @param expectedTransform a {@link Function} taking an expected value and returning a new value\n","   *     which will be compared with a transformed actual value\n","   * @param description should fill the gap in a failure message of the form {@code \"not true that\n","   *     <some actual element> is an element that <description> <some expected element>\"}, e.g.\n","   *     {@code \"has the same ID as\"}\n","   */\n","  public static <A extends @Nullable Object, E extends @Nullable Object>\n","      Correspondence<A, E> transforming(\n","          Function<A, ?> actualTransform, Function<E, ?> expectedTransform, String description) {\n","    return new Transforming<>(actualTransform, expectedTransform, description);\n","  }\n","\n","  private static final class Transforming<A extends @Nullable Object, E extends @Nullable Object>\n","      extends Correspondence<A, E> {\n","\n","    private final Function<? super A, ?> actualTransform;\n","    private final Function<? super E, ?> expectedTransform;\n","    private final String description;\n","\n","    private Transforming(\n","        Function<? super A, ?> actualTransform,\n","        Function<? super E, ?> expectedTransform,\n","        String description) {\n","      this.actualTransform = actualTransform;\n","      this.expectedTransform = expectedTransform;\n","      this.description = description;\n","    }\n","\n","    @Override\n","    public boolean compare(A actual, E expected) {\n","      return Objects.equal(actualTransform.apply(actual), expectedTransform.apply(expected));\n","    }\n","\n","    @Override\n","    public String toString() {\n","      return description;\n","    }\n","  }\n","\n","  /**\n","   * Returns a {@link Correspondence} between {@link Number} instances that considers instances to\n","   * correspond (i.e. {@link Correspondence#compare(Object, Object)} returns {@code true}) if the\n","   * double values of each instance (i.e. the result of calling {@link Number#doubleValue()} on\n","   * them) are finite values within {@code tolerance} of each other.\n","   *\n","   * <ul>\n","   *   <li>It does not consider instances to correspond if either value is infinite or NaN.\n","   *   <li>The conversion to double may result in a loss of precision for some numeric types.\n","   *   <li>The {@link Correspondence#compare(Object, Object)} method throws a {@link\n","   *       NullPointerException} if either {@link Number} instance is null.\n","   * </ul>\n","   *\n","   * @param tolerance an inclusive upper bound on the difference between the double values of the\n","   *     two {@link Number} instances, which must be a non-negative finite value, i.e. not {@link\n","   *     Double#NaN}, {@link Double#POSITIVE_INFINITY}, or negative, including {@code -0.0}\n","   */\n","  public static Correspondence<Number, Number> tolerance(double tolerance) {\n","    return new TolerantNumericEquality(tolerance);\n","  }\n","\n","  private static final class TolerantNumericEquality extends Correspondence<Number, Number> {\n","\n","    private final double tolerance;\n","\n","    private TolerantNumericEquality(double tolerance) {\n","      checkTolerance(tolerance);\n","      this.tolerance = tolerance;\n","    }\n","\n","    @Override\n","    public boolean compare(Number actual, Number expected) {\n","      double actualDouble = checkNotNull(actual).doubleValue();\n","      double expectedDouble = checkNotNull(expected).doubleValue();\n","      return MathUtil.equalWithinTolerance(actualDouble, expectedDouble, tolerance);\n","    }\n","\n","    @Override\n","    public String toString() {\n","      return \"is a finite number within \" + tolerance + \" of\";\n","    }\n","  }\n","\n","  /**\n","   * Returns a correspondence which compares elements using object equality, i.e. giving the same\n","   * assertions as you would get without a correspondence. This exists so that we can add a\n","   * diff-formatting functionality to it. See e.g. {@link IterableSubject#formattingDiffsUsing}.\n","   */\n","  @SuppressWarnings(\"unchecked\") // safe covariant cast\n","  static <T> Correspondence<T, T> equality() {\n","    return (Equality<T>) Equality.INSTANCE;\n","  }\n","\n","  private static final class Equality<T> extends Correspondence<T, T> {\n","\n","    private static final Equality<Object> INSTANCE = new Equality<>();\n","\n","    @Override\n","    public boolean compare(T actual, T expected) {\n","      return Objects.equal(actual, expected);\n","    }\n","\n","    @Override\n","    public String toString() {\n","      // This should normally not be used, since isEquality() returns true, but it should do\n","      // something sensible anyway:\n","      return \"is equal to\";\n","    }\n","\n","    @Override\n","    boolean isEquality() {\n","      return true;\n","    }\n","  }\n","\n","  /**\n","   * Constructor. Creating subclasses (anonymous or otherwise) of this class is <i>not\n","   * recommended</i>, but is possible via this constructor. The recommended approach is to use the\n","   * factory methods instead (see {@linkplain Correspondence class-level documentation}).\n","   *\n","   * @deprecated Construct an instance with the static factory methods instead. The most mechanical\n","   *     migration is usually to {@link #from}.\n","   */\n","  @Deprecated\n","  Correspondence() {}\n","\n","  /**\n","   * Returns a new correspondence which is like this one, except that the given formatter may be\n","   * used to format the difference between a pair of elements that do not correspond.\n","   *\n","   * <p>Note that, if you the data you are asserting about contains null actual or expected values,\n","   * the formatter may be invoked with a null argument. If this causes it to throw a {@link\n","   * NullPointerException}, that will be taken to indicate that the values cannot be diffed. (See\n","   * {@link Correspondence#formatDiff} for more detail on how exceptions are handled.) If you think\n","   * null values are likely, it is slightly cleaner to have the formatter return null in that case\n","   * instead of throwing.\n","   *\n","   * <p>Example:\n","   *\n","   * <pre>{@code\n","   * class MyRecordTestHelper {\n","   *   static final Correspondence<MyRecord, MyRecord> EQUIVALENCE =\n","   *       Correspondence.from(MyRecordTestHelper::recordsEquivalent, \"is equivalent to\")\n","   *           .formattingDiffsUsing(MyRecordTestHelper::formatRecordDiff);\n","   *   static boolean recordsEquivalent(MyRecord actual, MyRecord expected) {\n","   *     // code to check whether records should be considered equivalent for testing purposes\n","   *   }\n","   *   static String formatRecordDiff(MyRecord actual, MyRecord expected) {\n","   *     // code to format the diff between the records\n","   *   }\n","   * }\n","   * }</pre>\n","   */\n","  public Correspondence<A, E> formattingDiffsUsing(DiffFormatter<? super A, ? super E> formatter) {\n","    return new FormattingDiffs<>(this, formatter);\n","  }\n","\n","  /**\n","   * A functional interface to be used format the diff between a pair of objects of types {@code A}\n","   * and {@code E}.\n","   *\n","   * <p>This interface will normally be implemented using a lambda or a method reference, and the\n","   * resulting object will normally be passed directly to {@link\n","   * Correspondence#formattingDiffsUsing}. As a result, you should almost never see {@code\n","   * DiffFormatter} used as the type of a field or variable, or a return type.\n","   */\n","  public interface DiffFormatter<A extends @Nullable Object, E extends @Nullable Object> {\n","\n","    /**\n","     * Returns a {@link String} describing the difference between the {@code actual} and {@code\n","     * expected} values, if possible, or {@code null} if not.\n","     */\n","    @Nullable\n","    String formatDiff(A actual, E expected);\n","  }\n","\n","  private static class FormattingDiffs<A extends @Nullable Object, E extends @Nullable Object>\n","      extends Correspondence<A, E> {\n","\n","    private final Correspondence<A, E> delegate;\n","    private final DiffFormatter<? super A, ? super E> formatter;\n","\n","    FormattingDiffs(Correspondence<A, E> delegate, DiffFormatter<? super A, ? super E> formatter) {\n","      this.delegate = checkNotNull(delegate);\n","      this.formatter = checkNotNull(formatter);\n","    }\n","\n","    @Override\n","    public boolean compare(A actual, E expected) {\n","      return delegate.compare(actual, expected);\n","    }\n","\n","    @Override\n","    public @Nullable String formatDiff(A actual, E expected) {\n","      return formatter.formatDiff(actual, expected);\n","    }\n","\n","    @Override\n","    public String toString() {\n","      return delegate.toString();\n","    }\n","\n","    @Override\n","    boolean isEquality() {\n","      return delegate.isEquality();\n","    }\n","  }\n","\n","  /**\n","   * Returns whether or not the {@code actual} value is said to correspond to the {@code expected}\n","   * value for the purposes of this test.\n","   *\n","   * <h3>Exception handling</h3>\n","   *\n","   * <p>Throwing a {@link RuntimeException} from this method indicates that this {@link\n","   * Correspondence} cannot compare the given values. Any assertion which encounters such an\n","   * exception during the course of evaluating its condition must not pass. However, an assertion is\n","   * not required to invoke this method for every pair of values in its input just in order to check\n","   * for exceptions, if it is able to evaluate its condition without doing so.\n","   *\n","   * <h4>Conventions for handling exceptions</h4>\n","   *\n","   * <p>(N.B. This section is only really of interest when implementing assertion methods that call\n","   * {@link Correspondence#compare}, not to users making such assertions in their tests.)\n","   *\n","   * <p>The only requirement on an assertion is that, if it encounters an exception from this\n","   * method, it must not pass. The simplest implementation choice is simply to allow the exception\n","   * to propagate. However, it is normally more helpful to catch the exception and instead fail with\n","   * a message which includes more information about the assertion in progress and the nature of the\n","   * failure.\n","   *\n","   * <p>By convention, an assertion may catch and store the exception and continue evaluating the\n","   * condition as if the method had returned false instead of throwing. If the assertion's condition\n","   * does not hold with this alternative behaviour, it may choose to fail with a message that gives\n","   * details about how the condition does not hold, additionally mentioning that assertions were\n","   * encountered and giving details about one of the stored exceptions. (See the first example\n","   * below.) If the assertion's condition does hold with this alternative behaviour, the requirement\n","   * that the assertion must not pass still applies, so it should fail with a message giving details\n","   * about one of the stored exceptions. (See the second and third examples below.)\n","   *\n","   * <p>This behaviour is only a convention and should only be implemented when it makes sense to do\n","   * so. In particular, in an assertion that has multiple stages, it may be better to only continue\n","   * evaluation to the end of the current stage, and fail citing a stored exception at the end of\n","   * the stage, rather than accumulating exceptions through the multiple stages.\n","   *\n","   * <h4>Examples of exception handling</h4>\n","   *\n","   * <p>Suppose that we have the correspondence\n","   *\n","   * <pre>{@code\n","   * static final Correspondence<String, String> CASE_INSENSITIVE_EQUALITY =\n","   *     Correspondence.from(String::equalsIgnoreCase, \"equals ignoring case\"}\n","   * }</pre>\n","   *\n","   * whose {@code compare} method throws {@link NullPointerException} if the actual value is null.\n","   * The assertion\n","   *\n","   * <pre>{@code\n","   * assertThat(asList(null, \"xyz\", \"abc\", \"def\"))\n","   *     .comparingElementsUsing(CASE_INSENSITIVE_EQUALITY)\n","   *     .containsExactly(\"ABC\", \"DEF\", \"GHI\", \"JKL\");\n","   * }</pre>\n","   *\n","   * may fail saying that the actual iterable contains unexpected values {@code null} and {@code\n","   * xyz} and is missing values corresponding to {@code GHI} and {@code JKL}, which is what it would\n","   * do if the {@code compare} method returned false instead of throwing, and additionally mention\n","   * the exception. (This is more helpful than allowing the {@link NullPointerException} to\n","   * propagate to the caller, or than failing with only a description of the exception.)\n","   *\n","   * <p>However, the assertions\n","   *\n","   * <pre>{@code\n","   * assertThat(asList(null, \"xyz\", \"abc\", \"def\"))\n","   *     .comparingElementsUsing(CASE_INSENSITIVE_EQUALITY)\n","   *     .doesNotContain(\"MNO\");\n","   * }</pre>\n","   *\n","   * and\n","   *\n","   * <pre>{@code\n","   * assertThat(asList(null, \"xyz\", \"abc\", \"def\"))\n","   *     .comparingElementsUsing(CASE_INSENSITIVE_EQUALITY)\n","   *     .doesNotContain(null);\n","   * }</pre>\n","   *\n","   * must both fail citing the exception, even though they would pass if the {@code compare} method\n","   * returned false. (Note that, in the latter case at least, it is likely that the test author's\n","   * intention was <i>not</i> for the test to pass with these values.)\n","   */\n","  public abstract boolean compare(A actual, E expected);\n","\n","  private static class StoredException {\n","\n","    private static final Joiner ARGUMENT_JOINER = Joiner.on(\", \").useForNull(\"null\");\n","\n","    private final Exception exception;\n","    private final String methodName;\n","    private final List<@Nullable Object> methodArguments;\n","\n","    StoredException(\n","        Exception exception, String methodName, List<@Nullable Object> methodArguments) {\n","      this.exception = checkNotNull(exception);\n","      this.methodName = checkNotNull(methodName);\n","      this.methodArguments = checkNotNull(methodArguments);\n","    }\n","\n","    /**\n","     * Returns a String describing the exception stored. This includes a stack trace (except under\n","     * j2cl, where this is not available). It also has a separator at the end, so that when this\n","     * appears at the end of an {@code AssertionError} message, the stack trace of the stored\n","     * exception is distinguishable from the stack trace of the {@code AssertionError}.\n","     */\n","    private String describe() {\n","      return Strings.lenientFormat(\n","          \"%s(%s) threw %s\\n---\",\n","          methodName, ARGUMENT_JOINER.join(methodArguments), getStackTraceAsString(exception));\n","    }\n","  }\n","\n","  /**\n","   * Helper object to store exceptions encountered while executing a {@link Correspondence} method.\n","   */\n","  static final class ExceptionStore {\n","\n","    private final String argumentLabel;\n","    private @Nullable StoredException firstCompareException = null;\n","    private @Nullable StoredException firstPairingException = null;\n","    private @Nullable StoredException firstFormatDiffException = null;\n","\n","    static ExceptionStore forIterable() {\n","      return new ExceptionStore(\"elements\");\n","    }\n","\n","    static ExceptionStore forMapValues() {\n","      return new ExceptionStore(\"values\");\n","    }\n","\n","    private ExceptionStore(String argumentLabel) {\n","      this.argumentLabel = argumentLabel;\n","    }\n","\n","    /**\n","     * Adds an exception that was thrown during a {@code compare} call.\n","     *\n","     * @param callingClass The class from which the {@code compare} method was called. When\n","     *     reporting failures, stack traces will be truncated above elements in this class.\n","     * @param exception The exception encountered\n","     * @param actual The {@code actual} argument to the {@code compare} call during which the\n","     *     exception was encountered\n","     * @param expected The {@code expected} argument to the {@code compare} call during which the\n","     *     exception was encountered\n","     */\n","    void addCompareException(\n","        Class<?> callingClass,\n","        Exception exception,\n","        @Nullable Object actual,\n","        @Nullable Object expected) {\n","      if (firstCompareException == null) {\n","        truncateStackTrace(exception, callingClass);\n","        firstCompareException = new StoredException(exception, \"compare\", asList(actual, expected));\n","      }\n","    }\n","\n","    /**\n","     * Adds an exception that was thrown during an {@code apply} call on the function used to key\n","     * actual elements.\n","     *\n","     * @param callingClass The class from which the {@code apply} method was called. When reporting\n","     *     failures, stack traces will be truncated above elements in this class.\n","     * @param exception The exception encountered\n","     * @param actual The {@code actual} argument to the {@code apply} call during which the\n","     *     exception was encountered\n","     */\n","    void addActualKeyFunctionException(\n","        Class<?> callingClass, Exception exception, @Nullable Object actual) {\n","      if (firstPairingException == null) {\n","        truncateStackTrace(exception, callingClass);\n","        firstPairingException =\n","            new StoredException(exception, \"actualKeyFunction.apply\", asList(actual));\n","      }\n","    }\n","\n","    /**\n","     * Adds an exception that was thrown during an {@code apply} call on the function used to key\n","     * expected elements.\n","     *\n","     * @param callingClass The class from which the {@code apply} method was called. When reporting\n","     *     failures, stack traces will be truncated above elements in this class.\n","     * @param exception The exception encountered\n","     * @param expected The {@code expected} argument to the {@code apply} call during which the\n","     *     exception was encountered\n","     */\n","    void addExpectedKeyFunctionException(\n","        Class<?> callingClass, Exception exception, @Nullable Object expected) {\n","      if (firstPairingException == null) {\n","        truncateStackTrace(exception, callingClass);\n","        firstPairingException =\n","            new StoredException(exception, \"expectedKeyFunction.apply\", asList(expected));\n","      }\n","    }\n","\n","    /**\n","     * Adds an exception that was thrown during a {@code formatDiff} call.\n","     *\n","     * @param callingClass The class from which the {@code formatDiff} method was called. When\n","     *     reporting failures, stack traces will be truncated above elements in this class.\n","     * @param exception The exception encountered\n","     * @param actual The {@code actual} argument to the {@code formatDiff} call during which the\n","     *     exception was encountered\n","     * @param expected The {@code expected} argument to the {@code formatDiff} call during which the\n","     *     exception was encountered\n","     */\n","    void addFormatDiffException(\n","        Class<?> callingClass,\n","        Exception exception,\n","        @Nullable Object actual,\n","        @Nullable Object expected) {\n","      if (firstFormatDiffException == null) {\n","        truncateStackTrace(exception, callingClass);\n","        firstFormatDiffException =\n","            new StoredException(exception, \"formatDiff\", asList(actual, expected));\n","      }\n","    }\n","\n","    /** Returns whether any exceptions thrown during {@code compare} calls were stored. */\n","    boolean hasCompareException() {\n","      return firstCompareException != null;\n","    }\n","\n","    /**\n","     * Returns facts to use in a failure message when the exceptions from {@code compare} calls are\n","     * the main cause of the failure. At least one exception thrown during a {@code compare} call\n","     * must have been stored, and no exceptions from a {@code formatDiff} call. Assertions should\n","     * use this when exceptions were thrown while comparing elements and no more meaningful failure\n","     * was discovered by assuming a false return and continuing (see the javadoc for {@link\n","     * Correspondence#compare}). C.f. {@link #describeAsAdditionalInfo}.\n","     */\n","    ImmutableList<Fact> describeAsMainCause() {\n","      checkState(firstCompareException != null);\n","      // We won't do pairing or diff formatting unless a more meaningful failure was found, and if a\n","      // more meaningful failure was found then we shouldn't be using this method:\n","      checkState(firstPairingException == null);\n","      checkState(firstFormatDiffException == null);\n","      return ImmutableList.of(\n","          simpleFact(\"one or more exceptions were thrown while comparing \" + argumentLabel),\n","          fact(\"first exception\", firstCompareException.describe()));\n","    }\n","\n","    /**\n","     * If any exceptions are stored, returns facts to use in a failure message when the exceptions\n","     * should be noted as additional info; if empty, returns an empty list. Assertions should use\n","     * this when exceptions were thrown while comparing elements but more meaningful failures were\n","     * discovered by assuming a false return and continuing (see the javadoc for {@link\n","     * Correspondence#compare}), or when exceptions were thrown by other methods while generating\n","     * the failure message. C.f. {@link #describeAsMainCause}.\n","     */\n","    ImmutableList<Fact> describeAsAdditionalInfo() {\n","      ImmutableList.Builder<Fact> builder = ImmutableList.builder();\n","      if (firstCompareException != null) {\n","        builder.add(\n","            simpleFact(\n","                \"additionally, one or more exceptions were thrown while comparing \"\n","                    + argumentLabel));\n","        builder.add(fact(\"first exception\", firstCompareException.describe()));\n","      }\n","      if (firstPairingException != null) {\n","        builder.add(\n","            simpleFact(\n","                \"additionally, one or more exceptions were thrown while keying \"\n","                    + argumentLabel\n","                    + \" for pairing\"));\n","        builder.add(fact(\"first exception\", firstPairingException.describe()));\n","      }\n","      if (firstFormatDiffException != null) {\n","        builder.add(\n","            simpleFact(\"additionally, one or more exceptions were thrown while formatting diffs\"));\n","        builder.add(fact(\"first exception\", firstFormatDiffException.describe()));\n","      }\n","      return builder.build();\n","    }\n","\n","    private static void truncateStackTrace(Exception exception, Class<?> callingClass) {\n","      StackTraceElement[] original = exception.getStackTrace();\n","      int keep = 0;\n","      while (keep < original.length\n","          && !original[keep].getClassName().equals(callingClass.getName())) {\n","        keep++;\n","      }\n","      exception.setStackTrace(Arrays.copyOf(original, keep));\n","    }\n","  }\n","\n","  /**\n","   * Invokes {@link #compare}, catching any exceptions. If the comparison does not throw, returns\n","   * the result. If it does throw, adds the exception to the given {@link ExceptionStore} and\n","   * returns false. This method can help with implementing the exception-handling policy described\n","   * above, but note that assertions using it <i>must</i> fail later if an exception was stored.\n","   */\n","  final boolean safeCompare(A actual, E expected, ExceptionStore exceptions) {\n","    try {\n","      return compare(actual, expected);\n","    } catch (RuntimeException e) {\n","      exceptions.addCompareException(Correspondence.class, e, actual, expected);\n","      return false;\n","    }\n","  }\n","\n","  /**\n","   * Returns a {@link String} describing the difference between the {@code actual} and {@code\n","   * expected} values, if possible, or {@code null} if not.\n","   *\n","   * <p>The implementation on the {@link Correspondence} base class always returns {@code null}. To\n","   * enable diffing, use {@link #formattingDiffsUsing} (or override this method in a subclass, but\n","   * factory methods are recommended over subclassing).\n","   *\n","   * <p>Assertions should only invoke this with parameters for which {@link #compare} returns {@code\n","   * false}.\n","   *\n","   * <p>If this throws an exception, that implies that it is not possible to describe the diffs. An\n","   * assertion will normally only call this method if it has established that its condition does not\n","   * hold: good practice dictates that, if this method throws, the assertion should catch the\n","   * exception and continue to describe the original failure as if this method had returned null,\n","   * mentioning the failure from this method as additional information.\n","   */\n","  public @Nullable String formatDiff(A actual, E expected) {\n","    return null;\n","  }\n","\n","  /**\n","   * Invokes {@link #formatDiff}, catching any exceptions. If the comparison does not throw, returns\n","   * the result. If it does throw, adds the exception to the given {@link ExceptionStore} and\n","   * returns null.\n","   */\n","  final @Nullable String safeFormatDiff(A actual, E expected, ExceptionStore exceptions) {\n","    try {\n","      return formatDiff(actual, expected);\n","    } catch (RuntimeException e) {\n","      exceptions.addFormatDiffException(Correspondence.class, e, actual, expected);\n","      return null;\n","    }\n","  }\n","\n","  /**\n","   * Returns a description of the correspondence, suitable to fill the gap in a failure message of\n","   * the form {@code \"<some actual element> is an element that ... <some expected element>\"}. Note\n","   * that this is a fragment of a verb phrase which takes a singular subject.\n","   *\n","   * <p>Example 1: For a {@code Correspondence<String, Integer>} that tests whether the actual\n","   * string parses to the expected integer, this would return {@code \"parses to\"} to result in a\n","   * failure message of the form {@code \"<some actual string> is an element that parses to <some\n","   * expected integer>\"}.\n","   *\n","   * <p>Example 2: For the {@code Correspondence<Number, Number>} returns by {@link #tolerance} this\n","   * returns {@code \"is a finite number within \" + tolerance + \" of\"} to result in a failure message\n","   * of the form {@code \"<some actual number> is an element that is a finite number within 0.0001 of\n","   * <some expected number>\"}.\n","   */\n","  @Override\n","  public abstract String toString();\n","\n","  /**\n","   * Returns whether this is an equality correspondence, i.e. one returned by {@link #equality} or\n","   * one whose {@link #compare} delegates to one returned by {@link #equality}.\n","   */\n","  boolean isEquality() {\n","    return false;\n","  }\n","\n","  /**\n","   * Returns a list of {@link Fact} instance describing how this correspondence compares elements of\n","   * an iterable. There will be one \"testing whether\" fact, unless this {@link #isEquality is an\n","   * equality correspondence}, in which case the list will be empty.\n","   */\n","  final ImmutableList<Fact> describeForIterable() {\n","    if (!isEquality()) {\n","      return ImmutableList.of(\n","          fact(\"testing whether\", \"actual element \" + this + \" expected element\"));\n","    } else {\n","      return ImmutableList.of();\n","    }\n","  }\n","\n","  /**\n","   * Returns a list of {@link Fact} instance describing how this correspondence compares values in a\n","   * map (or multimap). There will be one \"testing whether\" fact, unless this {@link #isEquality is\n","   * an equality correspondence}, in which case the list will be empty.\n","   */\n","  final ImmutableList<Fact> describeForMapValues() {\n","    if (!isEquality()) {\n","      return ImmutableList.of(fact(\"testing whether\", \"actual value \" + this + \" expected value\"));\n","    } else {\n","      return ImmutableList.of();\n","    }\n","  }\n","\n","  /**\n","   * @throws UnsupportedOperationException always\n","   * @deprecated {@link Object#equals(Object)} is not supported. If you meant to compare objects\n","   *     using this {@link Correspondence}, use {@link #compare}.\n","   */\n","  @Deprecated\n","  @Override\n","  public final boolean equals(@Nullable Object o) {\n","    throw new UnsupportedOperationException(\n","        \"Correspondence.equals(object) is not supported. If you meant to compare objects, use\"\n","            + \" .compare(actual, expected) instead.\");\n","  }\n","\n","  /**\n","   * @throws UnsupportedOperationException always\n","   * @deprecated {@link Object#hashCode()} is not supported.\n","   */\n","  @Deprecated\n","  @Override\n","  public final int hashCode() {\n","    throw new UnsupportedOperationException(\"Correspondence.hashCode() is not supported.\");\n","  }\n","}\n"],"test_content":["/*\n"," * Copyright (c) 2016 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.truth.Correspondence.equality;\n","import static com.google.common.truth.Correspondence.tolerance;\n","import static com.google.common.truth.TestCorrespondences.INT_DIFF_FORMATTER;\n","import static com.google.common.truth.Truth.assertThat;\n","import static java.util.Arrays.asList;\n","import static org.junit.Assert.fail;\n","\n","import com.google.common.collect.ImmutableList;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import org.junit.runners.JUnit4;\n","\n","/**\n"," * Tests for {@link Correspondence}.\n"," *\n"," * @author Pete Gillin\n"," */\n","@RunWith(JUnit4.class)\n","public final class CorrespondenceTest extends BaseSubjectTestCase {\n","  // Tests of the abstract base class (just assert that equals and hashCode throw).\n","\n","  private static final Correspondence<Object, Object> INSTANCE =\n","      Correspondence.from((a, e) -> false, \"has example property\");\n","\n","  @Test\n","  @SuppressWarnings(\"deprecation\") // testing deprecated method\n","  public void testEquals_throws() {\n","    try {\n","      INSTANCE.equals(new Object());\n","      fail(\"Expected UnsupportedOperationException from Correspondence.equals\");\n","    } catch (UnsupportedOperationException expected) {\n","    }\n","  }\n","\n","  @Test\n","  @SuppressWarnings(\"deprecation\") // testing deprecated method\n","  public void testHashCode_throws() {\n","    try {\n","      INSTANCE.hashCode();\n","      fail(\"Expected UnsupportedOperationException from Correspondence.hashCode\");\n","    } catch (UnsupportedOperationException expected) {\n","    }\n","  }\n","\n","  // Tests of the 'from' factory method.\n","\n","  private static final Correspondence<String, String> STRING_PREFIX_EQUALITY =\n","      Correspondence.from(String::startsWith, \"starts with\");\n","\n","  @Test\n","  public void testFrom_compare() {\n","    assertThat(STRING_PREFIX_EQUALITY.compare(\"foot\", \"foo\")).isTrue();\n","    assertThat(STRING_PREFIX_EQUALITY.compare(\"foot\", \"foot\")).isTrue();\n","    assertThat(STRING_PREFIX_EQUALITY.compare(\"foo\", \"foot\")).isFalse();\n","  }\n","\n","  @Test\n","  public void testFrom_formatDiff() {\n","    assertThat(STRING_PREFIX_EQUALITY.formatDiff(\"foo\", \"foot\")).isNull();\n","  }\n","\n","  @Test\n","  public void testFrom_toString() {\n","    assertThat(STRING_PREFIX_EQUALITY.toString()).isEqualTo(\"starts with\");\n","  }\n","\n","  @Test\n","  public void testFrom_isEquality() {\n","    assertThat(STRING_PREFIX_EQUALITY.isEquality()).isFalse();\n","  }\n","\n","  @Test\n","  public void testFrom_viaIterableSubjectContainsExactly_success() {\n","    assertThat(ImmutableList.of(\"foot\", \"barn\"))\n","        .comparingElementsUsing(STRING_PREFIX_EQUALITY)\n","        .containsExactly(\"foo\", \"bar\");\n","  }\n","\n","  @Test\n","  public void testFrom_viaIterableSubjectContainsExactly_failure() {\n","    expectFailure\n","        .whenTesting()\n","        .that(ImmutableList.of(\"foot\", \"barn\", \"gallon\"))\n","        .comparingElementsUsing(STRING_PREFIX_EQUALITY)\n","        .containsExactly(\"foo\", \"bar\");\n","    assertFailureKeys(\"unexpected (1)\", \"---\", \"expected\", \"testing whether\", \"but was\");\n","    assertFailureValue(\"unexpected (1)\", \"gallon\");\n","    assertFailureValue(\"testing whether\", \"actual element starts with expected element\");\n","  }\n","\n","  @Test\n","  public void testFrom_viaIterableSubjectContainsExactly_null() {\n","    expectFailure\n","        .whenTesting()\n","        .that(asList(\"foot\", \"barn\", null))\n","        .comparingElementsUsing(STRING_PREFIX_EQUALITY)\n","        .containsExactly(\"foo\", \"bar\");\n","    assertFailureKeys(\n","        \"unexpected (1)\",\n","        \"---\",\n","        \"expected\",\n","        \"testing whether\",\n","        \"but was\",\n","        \"additionally, one or more exceptions were thrown while comparing elements\",\n","        \"first exception\");\n","    assertFailureValue(\"unexpected (1)\", \"null\");\n","    assertThatFailure()\n","        .factValue(\"first exception\")\n","        .startsWith(\"compare(null, foo) threw java.lang.NullPointerException\");\n","  }\n","\n","  // Tests of the 'transform' factory methods.\n","\n","  private static final Correspondence<String, Integer> LENGTHS =\n","      Correspondence.transforming(String::length, \"has a length of\");\n","\n","  private static final Correspondence<String, Integer> HYPHEN_INDEXES =\n","      Correspondence.transforming(\n","          str -> {\n","            int index = str.indexOf('-');\n","            return (index >= 0) ? index : null;\n","          },\n","          \"has a hyphen at an index of\");\n","\n","  @Test\n","  public void testTransforming_actual_compare() {\n","    assertThat(LENGTHS.compare(\"foo\", 3)).isTrue();\n","    assertThat(LENGTHS.compare(\"foot\", 4)).isTrue();\n","    assertThat(LENGTHS.compare(\"foo\", 4)).isFalse();\n","  }\n","\n","  @Test\n","  public void testTransforming_actual_compare_nullTransformedValues() {\n","    assertThat(HYPHEN_INDEXES.compare(\"mailing-list\", null)).isFalse();\n","    assertThat(HYPHEN_INDEXES.compare(\"forum\", 7)).isFalse();\n","    assertThat(HYPHEN_INDEXES.compare(\"forum\", null)).isTrue();\n","  }\n","\n","  @Test\n","  public void testTransforming_actual_compare_nullActualValue() {\n","    try {\n","      HYPHEN_INDEXES.compare(null, 7);\n","      fail(\"Expected NullPointerException to be thrown but wasn't\");\n","    } catch (NullPointerException expected) {\n","    }\n","  }\n","\n","  @Test\n","  public void testTransforming_actual_formatDiff() {\n","    assertThat(LENGTHS.formatDiff(\"foo\", 4)).isNull();\n","  }\n","\n","  @Test\n","  public void testTransforming_actual_toString() {\n","    assertThat(LENGTHS.toString()).isEqualTo(\"has a length of\");\n","  }\n","\n","  @Test\n","  public void testTransforming_actual_isEquality() {\n","    assertThat(LENGTHS.isEquality()).isFalse();\n","  }\n","\n","  @Test\n","  public void testTransforming_actual_viaIterableSubjectContainsExactly_success() {\n","    assertThat(ImmutableList.of(\"feet\", \"barns\", \"gallons\"))\n","        .comparingElementsUsing(LENGTHS)\n","        .containsExactly(4, 5, 7)\n","        .inOrder();\n","  }\n","\n","  @Test\n","  public void testTransforming_actual_viaIterableSubjectContainsExactly_failure() {\n","    expectFailure\n","        .whenTesting()\n","        .that(ImmutableList.of(\"feet\", \"barns\", \"gallons\"))\n","        .comparingElementsUsing(LENGTHS)\n","        .containsExactly(4, 5);\n","    assertFailureKeys(\"unexpected (1)\", \"---\", \"expected\", \"testing whether\", \"but was\");\n","    assertFailureValue(\"unexpected (1)\", \"gallons\");\n","    assertFailureValue(\"testing whether\", \"actual element has a length of expected element\");\n","  }\n","\n","  @Test\n","  public void testTransforming_actual_viaIterableSubjectContainsExactly_nullActual() {\n","    expectFailure\n","        .whenTesting()\n","        .that(asList(\"feet\", \"barns\", null))\n","        .comparingElementsUsing(LENGTHS)\n","        .containsExactly(4, 5);\n","    assertFailureKeys(\n","        \"unexpected (1)\",\n","        \"---\",\n","        \"expected\",\n","        \"testing whether\",\n","        \"but was\",\n","        \"additionally, one or more exceptions were thrown while comparing elements\",\n","        \"first exception\");\n","    assertFailureValue(\"unexpected (1)\", \"null\");\n","    assertThatFailure()\n","        .factValue(\"first exception\")\n","        .startsWith(\"compare(null, 4) threw java.lang.NullPointerException\");\n","  }\n","\n","  @Test\n","  public void testTransforming_actual_viaIterableSubjectContainsExactly_nullTransformed() {\n","    // \"mailing-list\" and \"chat-room\" have hyphens at index 7 and 4 respectively.\n","    // \"forum\" contains no hyphen so the Function in HYPHEN_INDEXES transforms it to null.\n","    assertThat(ImmutableList.of(\"mailing-list\", \"chat-room\", \"forum\"))\n","        .comparingElementsUsing(HYPHEN_INDEXES)\n","        .containsExactly(7, 4, null)\n","        .inOrder();\n","  }\n","\n","  private static final Correspondence<String, String> HYPHENS_MATCH_COLONS =\n","      Correspondence.transforming(\n","          str -> {\n","            int index = str.indexOf('-');\n","            return (index >= 0) ? index : null;\n","          },\n","          str -> {\n","            int index = str.indexOf(':');\n","            return (index >= 0) ? index : null;\n","          },\n","          \"has a hyphen at the same index as the colon in\");\n","\n","  @Test\n","  public void testTransforming_both_compare() {\n","    assertThat(HYPHENS_MATCH_COLONS.compare(\"mailing-list\", \"abcdefg:hij\")).isTrue();\n","    assertThat(HYPHENS_MATCH_COLONS.compare(\"chat-room\", \"abcd:efghij\")).isTrue();\n","    assertThat(HYPHENS_MATCH_COLONS.compare(\"chat-room\", \"abcdefg:hij\")).isFalse();\n","  }\n","\n","  @Test\n","  public void testTransforming_both_compare_nullTransformedValue() {\n","    assertThat(HYPHENS_MATCH_COLONS.compare(\"mailing-list\", \"abcdefg-hij\")).isFalse();\n","    assertThat(HYPHENS_MATCH_COLONS.compare(\"forum\", \"abcde:fghij\")).isFalse();\n","    assertThat(HYPHENS_MATCH_COLONS.compare(\"forum\", \"abcde-fghij\")).isTrue();\n","  }\n","\n","  @Test\n","  public void testTransforming_both_compare_nullInputValues() {\n","    try {\n","      HYPHENS_MATCH_COLONS.compare(null, \"abcde:fghij\");\n","      fail(\"Expected NullPointerException to be thrown but wasn't\");\n","    } catch (NullPointerException expected) {\n","    }\n","    try {\n","      HYPHENS_MATCH_COLONS.compare(\"mailing-list\", null);\n","      fail(\"Expected NullPointerException to be thrown but wasn't\");\n","    } catch (NullPointerException expected) {\n","    }\n","  }\n","\n","  @Test\n","  public void testTransforming_both_formatDiff() {\n","    assertThat(HYPHENS_MATCH_COLONS.formatDiff(\"chat-room\", \"abcdefg:hij\")).isNull();\n","  }\n","\n","  @Test\n","  public void testTransforming_both_toString() {\n","    assertThat(HYPHENS_MATCH_COLONS.toString())\n","        .isEqualTo(\"has a hyphen at the same index as the colon in\");\n","  }\n","\n","  @Test\n","  public void testTransforming_both_isEquality() {\n","    assertThat(HYPHENS_MATCH_COLONS.isEquality()).isFalse();\n","  }\n","\n","  @Test\n","  public void testTransforming_both_viaIterableSubjectContainsExactly_success() {\n","    assertThat(ImmutableList.of(\"mailing-list\", \"chat-room\", \"web-app\"))\n","        .comparingElementsUsing(HYPHENS_MATCH_COLONS)\n","        .containsExactly(\"abcdefg:hij\", \"abcd:efghij\", \"abc:defghij\")\n","        .inOrder();\n","  }\n","\n","  @Test\n","  public void testTransforming_both_viaIterableSubjectContainsExactly_failure() {\n","    expectFailure\n","        .whenTesting()\n","        .that(ImmutableList.of(\"mailing-list\", \"chat-room\", \"web-app\"))\n","        .comparingElementsUsing(HYPHENS_MATCH_COLONS)\n","        .containsExactly(\"abcdefg:hij\", \"abcd:efghij\");\n","    assertFailureKeys(\"unexpected (1)\", \"---\", \"expected\", \"testing whether\", \"but was\");\n","    assertFailureValue(\"unexpected (1)\", \"web-app\");\n","    assertFailureValue(\n","        \"testing whether\",\n","        \"actual element has a hyphen at the same index as the colon in expected element\");\n","  }\n","\n","  @Test\n","  public void testTransforming_both_viaIterableSubjectContainsExactly_nullActual() {\n","    expectFailure\n","        .whenTesting()\n","        .that(asList(\"mailing-list\", \"chat-room\", null))\n","        .comparingElementsUsing(HYPHENS_MATCH_COLONS)\n","        .containsExactly(\"abcdefg:hij\", \"abcd:efghij\");\n","    assertFailureKeys(\n","        \"unexpected (1)\",\n","        \"---\",\n","        \"expected\",\n","        \"testing whether\",\n","        \"but was\",\n","        \"additionally, one or more exceptions were thrown while comparing elements\",\n","        \"first exception\");\n","    assertFailureValue(\"unexpected (1)\", \"null\");\n","    assertThatFailure()\n","        .factValue(\"first exception\")\n","        .startsWith(\"compare(null, abcdefg:hij) threw java.lang.NullPointerException\");\n","  }\n","\n","  @Test\n","  public void testTransforming_both_viaIterableSubjectContainsExactly_nullExpected() {\n","    expectFailure\n","        .whenTesting()\n","        .that(ImmutableList.of(\"mailing-list\", \"chat-room\"))\n","        .comparingElementsUsing(HYPHENS_MATCH_COLONS)\n","        .containsExactly(\"abcdefg:hij\", \"abcd:efghij\", null);\n","    assertFailureKeys(\n","        \"missing (1)\",\n","        \"---\",\n","        \"expected\",\n","        \"testing whether\",\n","        \"but was\",\n","        \"additionally, one or more exceptions were thrown while comparing elements\",\n","        \"first exception\");\n","    assertFailureValue(\"missing (1)\", \"null\");\n","    assertThatFailure()\n","        .factValue(\"first exception\")\n","        .startsWith(\"compare(mailing-list, null) threw java.lang.NullPointerException\");\n","  }\n","\n","  @Test\n","  public void testTransforming_both_viaIterableSubjectContainsExactly_nullTransformed() {\n","    // The actual element \"forum\" contains no hyphen, and the expected element \"abcde-fghij\"\n","    // contains no colon, so they both transform to null, and so they correspond.\n","    assertThat(ImmutableList.of(\"mailing-list\", \"chat-room\", \"forum\"))\n","        .comparingElementsUsing(HYPHENS_MATCH_COLONS)\n","        .containsExactly(\"abcdefg:hij\", \"abcd:efghij\", \"abcde-fghij\")\n","        .inOrder();\n","  }\n","\n","  // Tests of the 'tolerance' factory method. Includes both direct tests of the compare method and\n","  // indirect tests using it in a basic call chain.\n","\n","  @Test\n","  public void testTolerance_compare_doubles() {\n","    assertThat(tolerance(0.0).compare(2.0, 2.0)).isTrue();\n","    assertThat(tolerance(0.00001).compare(2.0, 2.0)).isTrue();\n","    assertThat(tolerance(1000.0).compare(2.0, 2.0)).isTrue();\n","    assertThat(tolerance(1.00001).compare(2.0, 3.0)).isTrue();\n","    assertThat(tolerance(1000.0).compare(2.0, 1003.0)).isFalse();\n","    assertThat(tolerance(1000.0).compare(2.0, Double.POSITIVE_INFINITY)).isFalse();\n","    assertThat(tolerance(1000.0).compare(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY))\n","        .isFalse();\n","    assertThat(tolerance(1000.0).compare(2.0, Double.NaN)).isFalse();\n","    assertThat(tolerance(1000.0).compare(Double.NaN, Double.NaN)).isFalse();\n","    assertThat(tolerance(0.0).compare(-0.0, 0.0)).isTrue();\n","  }\n","\n","  @Test\n","  public void testTolerance_compare_floats() {\n","    assertThat(tolerance(0.0).compare(2.0f, 2.0f)).isTrue();\n","    assertThat(tolerance(0.00001).compare(2.0f, 2.0f)).isTrue();\n","    assertThat(tolerance(1000.0).compare(2.0f, 2.0f)).isTrue();\n","    assertThat(tolerance(1.00001).compare(2.0f, 3.0f)).isTrue();\n","    assertThat(tolerance(1000.0).compare(2.0f, 1003.0f)).isFalse();\n","    assertThat(tolerance(1000.0).compare(2.0f, Float.POSITIVE_INFINITY)).isFalse();\n","    assertThat(tolerance(1000.0).compare(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY))\n","        .isFalse();\n","    assertThat(tolerance(1000.0).compare(2.0f, Float.NaN)).isFalse();\n","    assertThat(tolerance(1000.0).compare(Float.NaN, Float.NaN)).isFalse();\n","    assertThat(tolerance(0.0).compare(-0.0f, 0.0f)).isTrue();\n","  }\n","\n","  @Test\n","  public void testTolerance_compare_doublesVsInts() {\n","    assertThat(tolerance(0.0).compare(2.0, 2)).isTrue();\n","    assertThat(tolerance(0.00001).compare(2.0, 2)).isTrue();\n","    assertThat(tolerance(1000.0).compare(2.0, 2)).isTrue();\n","    assertThat(tolerance(1.00001).compare(2.0, 3)).isTrue();\n","    assertThat(tolerance(1000.0).compare(2.0, 1003)).isFalse();\n","  }\n","\n","  @Test\n","  public void testTolerance_compare_negativeTolerance() {\n","    try {\n","      tolerance(-0.05).compare(1.0, 2.0);\n","      fail(\"Expected IllegalArgumentException to be thrown but wasn't\");\n","    } catch (IllegalArgumentException expected) {\n","      assertThat(expected).hasMessageThat().isEqualTo(\"tolerance (-0.05) cannot be negative\");\n","    }\n","  }\n","\n","  @Test\n","  public void testTolerance_compare_null() {\n","    try {\n","      tolerance(0.05).compare(1.0, null);\n","      fail(\"Expected NullPointerException to be thrown but wasn't\");\n","    } catch (NullPointerException expected) {\n","    }\n","    try {\n","      tolerance(0.05).compare(null, 2.0);\n","      fail(\"Expected NullPointerException to be thrown but wasn't\");\n","    } catch (NullPointerException expected) {\n","    }\n","  }\n","\n","  @Test\n","  public void testTolerance_formatDiff() {\n","    assertThat(tolerance(0.01).formatDiff(1.0, 2.0)).isNull();\n","  }\n","\n","  @Test\n","  public void testTolerance_toString() {\n","    assertThat(tolerance(0.01).toString()).isEqualTo(\"is a finite number within 0.01 of\");\n","  }\n","\n","  @Test\n","  public void testTolerance_isEquality() {\n","    assertThat(tolerance(0.01).isEquality()).isFalse();\n","    // This is close to equality, but not close enough (it calls numbers of different types equal):\n","    assertThat(tolerance(0.0).isEquality()).isFalse();\n","  }\n","\n","  @Test\n","  public void testTolerance_viaIterableSubjectContains_success() {\n","    assertThat(ImmutableList.of(1.02, 2.04, 3.08))\n","        .comparingElementsUsing(tolerance(0.05))\n","        .contains(2.0);\n","  }\n","\n","  @Test\n","  public void testTolerance_viaIterableSubjectContains_failure() {\n","    expectFailure\n","        .whenTesting()\n","        .that(ImmutableList.of(1.02, 2.04, 3.08))\n","        .comparingElementsUsing(tolerance(0.05))\n","        .contains(3.01);\n","    assertFailureKeys(\"expected to contain\", \"testing whether\", \"but was\");\n","    assertFailureValue(\"expected to contain\", \"3.01\");\n","    assertFailureValue(\n","        \"testing whether\", \"actual element is a finite number within 0.05 of expected element\");\n","    assertFailureValue(\"but was\", \"[1.02, 2.04, 3.08]\");\n","  }\n","\n","  // Tests of the 'equality' factory method. Includes both direct tests of the compare method and\n","  // indirect tests using it in a basic call chain.\n","\n","  @Test\n","  public void testEquality_compare() {\n","    assertThat(equality().compare(\"foo\", \"foo\")).isTrue();\n","    assertThat(equality().compare(\"foo\", \"bar\")).isFalse();\n","    assertThat(equality().compare(123, 123)).isTrue();\n","    assertThat(equality().compare(123, 123L)).isFalse();\n","    assertThat(equality().compare(null, null)).isTrue();\n","    assertThat(equality().compare(null, \"bar\")).isFalse();\n","  }\n","\n","  @Test\n","  public void testEquality_formatDiff() {\n","    assertThat(equality().formatDiff(\"foo\", \"bar\")).isNull();\n","  }\n","\n","  @Test\n","  public void testEquality_toString() {\n","    assertThat(equality().toString()).isEqualTo(\"is equal to\"); // meta!\n","  }\n","\n","  @Test\n","  public void testEquality_isEquality() {\n","    assertThat(equality().isEquality()).isTrue();\n","  }\n","\n","  @Test\n","  public void testEquality_viaIterableSubjectContains_success() {\n","    assertThat(ImmutableList.of(1.0, 2.0, 3.0)).comparingElementsUsing(equality()).contains(2.0);\n","  }\n","\n","  @Test\n","  public void testEquality_viaIterableSubjectContains_failure() {\n","    expectFailure\n","        .whenTesting()\n","        .that(ImmutableList.of(1.01, 2.02, 3.03))\n","        .comparingElementsUsing(equality())\n","        .contains(2.0);\n","    // N.B. No \"testing whether\" fact:\n","    assertFailureKeys(\"expected to contain\", \"but was\");\n","  }\n","\n","  // Tests of formattingDiffsUsing.\n","\n","  private static final Correspondence<String, Integer> LENGTHS_WITH_DIFF =\n","      Correspondence.transforming(String::length, \"has a length of\")\n","          .formattingDiffsUsing((a, e) -> Integer.toString(a.length() - e));\n","\n","  @Test\n","  public void testFormattingDiffsUsing_compare() {\n","    // The compare behaviour should be the same as the wrapped correspondence.\n","    assertThat(LENGTHS_WITH_DIFF.compare(\"foo\", 3)).isTrue();\n","    assertThat(LENGTHS_WITH_DIFF.compare(\"foot\", 4)).isTrue();\n","    assertThat(LENGTHS_WITH_DIFF.compare(\"foo\", 4)).isFalse();\n","  }\n","\n","  @Test\n","  public void testFormattingDiffsUsing_formatDiff() {\n","    assertThat(LENGTHS_WITH_DIFF.formatDiff(\"foo\", 4)).isEqualTo(\"-1\");\n","    assertThat(LENGTHS_WITH_DIFF.formatDiff(\"foot\", 3)).isEqualTo(\"1\");\n","  }\n","\n","  @Test\n","  public void testFormattingDiffsUsing_toString() {\n","    // The toString behaviour should be the same as the wrapped correspondence.\n","    assertThat(LENGTHS_WITH_DIFF.toString()).isEqualTo(\"has a length of\");\n","  }\n","\n","  @Test\n","  public void testFormattingDiffsUsing_isEquality() {\n","    // The isEquality behaviour should be the same as the wrapped correspondence.\n","    assertThat(LENGTHS_WITH_DIFF.isEquality()).isFalse();\n","    Correspondence<Integer, Integer> equalityWithDiffFormatter =\n","        Correspondence.<Integer>equality().formattingDiffsUsing(INT_DIFF_FORMATTER);\n","    assertThat(equalityWithDiffFormatter.isEquality()).isTrue();\n","  }\n","\n","  @Test\n","  public void testFormattingDiffsUsing_viaIterableSubjectContainsExactly_failure() {\n","    expectFailure\n","        .whenTesting()\n","        .that(ImmutableList.of(\"feet\", \"gallons\"))\n","        .comparingElementsUsing(LENGTHS_WITH_DIFF)\n","        .containsExactly(4, 5);\n","    assertFailureKeys(\n","        \"missing (1)\",\n","        \"unexpected (1)\",\n","        \"#1\",\n","        \"diff\",\n","        \"---\",\n","        \"expected\",\n","        \"testing whether\",\n","        \"but was\");\n","    assertFailureValue(\"missing (1)\", \"5\");\n","    assertFailureValue(\"#1\", \"gallons\");\n","    assertFailureValue(\"diff\", \"2\");\n","  }\n","\n","  @Test\n","  public void testFormattingDiffsUsing_viaIterableSubjectContainsExactly_nullActual() {\n","    expectFailure\n","        .whenTesting()\n","        .that(asList(\"feet\", null))\n","        .comparingElementsUsing(LENGTHS_WITH_DIFF)\n","        .containsExactly(4, 5);\n","    assertFailureKeys(\n","        \"missing (1)\",\n","        \"unexpected (1)\",\n","        \"---\",\n","        \"expected\",\n","        \"testing whether\",\n","        \"but was\",\n","        \"additionally, one or more exceptions were thrown while comparing elements\",\n","        \"first exception\",\n","        \"additionally, one or more exceptions were thrown while formatting diffs\",\n","        \"first exception\");\n","    assertFailureValue(\"missing (1)\", \"5\");\n","    assertFailureValue(\"unexpected (1)\", \"[null]\");\n","    assertThatFailure()\n","        .factValue(\"first exception\", 0)\n","        .startsWith(\"compare(null, 4) threw java.lang.NullPointerException\");\n","    assertThatFailure()\n","        .factValue(\"first exception\", 1)\n","        .startsWith(\"formatDiff(null, 5) threw java.lang.NullPointerException\");\n","  }\n","}\n"],"method_lines_dic":{"Correspondence::::from(com.google.common.truth.Correspondence.BinaryPredicate<A, E>,java.lang.String)":[115,118],"Correspondence.BinaryPredicate::::apply(A,E)":[135,135],"Correspondence.FromBinaryPredicate::::compare(A,E)":[149,152],"Correspondence.FromBinaryPredicate::::toString()":[154,157],"Correspondence.Transforming::::compare(A,E)":[266,269],"Correspondence.Transforming::::toString()":[271,274],"Correspondence::::tolerance(double)":[294,296],"Correspondence.TolerantNumericEquality::::compare(java.lang.Number,java.lang.Number)":[307,312],"Correspondence.TolerantNumericEquality::::toString()":[314,317],"Correspondence::::equality()":[325,328],"Correspondence.Equality::::compare(T,T)":[334,337],"Correspondence.Equality::::toString()":[339,344],"Correspondence.Equality::::isEquality()":[346,349],"Correspondence::::formattingDiffsUsing(com.google.common.truth.Correspondence.DiffFormatter<? super A, ? super E>)":[390,392],"Correspondence.DiffFormatter::::formatDiff(A,E)":[409,410],"Correspondence.FormattingDiffs::::compare(A,E)":[424,427],"Correspondence.FormattingDiffs::::formatDiff(A,E)":[429,432],"Correspondence.FormattingDiffs::::toString()":[434,437],"Correspondence.FormattingDiffs::::isEquality()":[439,442],"Correspondence::::compare(A,E)":[526,526],"Correspondence.StoredException::::describe()":[549,553],"Correspondence.ExceptionStore::::forIterable()":[566,568],"Correspondence.ExceptionStore::::forMapValues()":[570,572],"Correspondence.ExceptionStore::::addCompareException(java.lang.Class<?>,java.lang.Exception,java.lang.Object,java.lang.Object)":[589,598],"Correspondence.ExceptionStore::::addActualKeyFunctionException(java.lang.Class<?>,java.lang.Exception,java.lang.Object)":[610,617],"Correspondence.ExceptionStore::::addExpectedKeyFunctionException(java.lang.Class<?>,java.lang.Exception,java.lang.Object)":[629,636],"Correspondence.ExceptionStore::::addFormatDiffException(java.lang.Class<?>,java.lang.Exception,java.lang.Object,java.lang.Object)":[649,659],"Correspondence.ExceptionStore::::hasCompareException()":[662,664],"Correspondence.ExceptionStore::::describeAsMainCause()":[674,683],"Correspondence.ExceptionStore::::describeAsAdditionalInfo()":[693,716],"Correspondence.ExceptionStore::::truncateStackTrace(java.lang.Exception,java.lang.Class<?>)":[718,726],"Correspondence::::safeCompare(A,E,com.google.common.truth.Correspondence.ExceptionStore)":[735,742],"Correspondence::::formatDiff(A,E)":[761,763],"Correspondence::::safeFormatDiff(A,E,com.google.common.truth.Correspondence.ExceptionStore)":[770,777],"Correspondence::::toString()":[794,795],"Correspondence::::isEquality()":[801,803],"Correspondence::::describeForIterable()":[810,817],"Correspondence::::describeForMapValues()":[824,830],"Correspondence::::equals(java.lang.Object)":[837,843],"Correspondence::::hashCode()":[849,853]},"test_method_lines_dic":{"CorrespondenceTest::::testEquals_throws()":[42,50],"CorrespondenceTest::::testHashCode_throws()":[52,60],"CorrespondenceTest::::testFrom_compare()":[67,72],"CorrespondenceTest::::testFrom_formatDiff()":[74,77],"CorrespondenceTest::::testFrom_toString()":[79,82],"CorrespondenceTest::::testFrom_isEquality()":[84,87],"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_success()":[89,94],"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_failure()":[96,106],"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_null()":[108,127],"CorrespondenceTest::::testTransforming_actual_compare()":[142,147],"CorrespondenceTest::::testTransforming_actual_compare_nullTransformedValues()":[149,154],"CorrespondenceTest::::testTransforming_actual_compare_nullActualValue()":[156,163],"CorrespondenceTest::::testTransforming_actual_formatDiff()":[165,168],"CorrespondenceTest::::testTransforming_actual_toString()":[170,173],"CorrespondenceTest::::testTransforming_actual_isEquality()":[175,178],"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_success()":[180,186],"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_failure()":[188,198],"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_nullActual()":[200,219],"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_nullTransformed()":[221,229],"CorrespondenceTest::::testTransforming_both_compare()":[243,248],"CorrespondenceTest::::testTransforming_both_compare_nullTransformedValue()":[250,255],"CorrespondenceTest::::testTransforming_both_compare_nullInputValues()":[257,269],"CorrespondenceTest::::testTransforming_both_formatDiff()":[271,274],"CorrespondenceTest::::testTransforming_both_toString()":[276,280],"CorrespondenceTest::::testTransforming_both_isEquality()":[282,285],"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_success()":[287,293],"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_failure()":[295,307],"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullActual()":[309,328],"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullExpected()":[330,349],"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullTransformed()":[351,359],"CorrespondenceTest::::testTolerance_compare_doubles()":[364,377],"CorrespondenceTest::::testTolerance_compare_floats()":[379,392],"CorrespondenceTest::::testTolerance_compare_doublesVsInts()":[394,401],"CorrespondenceTest::::testTolerance_compare_negativeTolerance()":[403,411],"CorrespondenceTest::::testTolerance_compare_null()":[413,425],"CorrespondenceTest::::testTolerance_formatDiff()":[427,430],"CorrespondenceTest::::testTolerance_toString()":[432,435],"CorrespondenceTest::::testTolerance_isEquality()":[437,442],"CorrespondenceTest::::testTolerance_viaIterableSubjectContains_success()":[444,449],"CorrespondenceTest::::testTolerance_viaIterableSubjectContains_failure()":[451,463],"CorrespondenceTest::::testEquality_compare()":[468,476],"CorrespondenceTest::::testEquality_formatDiff()":[478,481],"CorrespondenceTest::::testEquality_toString()":[483,486],"CorrespondenceTest::::testEquality_isEquality()":[488,491],"CorrespondenceTest::::testEquality_viaIterableSubjectContains_success()":[493,496],"CorrespondenceTest::::testEquality_viaIterableSubjectContains_failure()":[498,507],"CorrespondenceTest::::testFormattingDiffsUsing_compare()":[515,521],"CorrespondenceTest::::testFormattingDiffsUsing_formatDiff()":[523,527],"CorrespondenceTest::::testFormattingDiffsUsing_toString()":[529,533],"CorrespondenceTest::::testFormattingDiffsUsing_isEquality()":[535,542],"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_failure()":[544,563],"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_nullActual()":[565,591]},"reverse_method_lines_dic":{"115":"Correspondence::::from(com.google.common.truth.Correspondence.BinaryPredicate<A, E>,java.lang.String)","116":"Correspondence::::from(com.google.common.truth.Correspondence.BinaryPredicate<A, E>,java.lang.String)","117":"Correspondence::::from(com.google.common.truth.Correspondence.BinaryPredicate<A, E>,java.lang.String)","118":"Correspondence::::from(com.google.common.truth.Correspondence.BinaryPredicate<A, E>,java.lang.String)","135":"Correspondence.BinaryPredicate::::apply(A,E)","149":"Correspondence.FromBinaryPredicate::::compare(A,E)","150":"Correspondence.FromBinaryPredicate::::compare(A,E)","151":"Correspondence.FromBinaryPredicate::::compare(A,E)","152":"Correspondence.FromBinaryPredicate::::compare(A,E)","154":"Correspondence.FromBinaryPredicate::::toString()","155":"Correspondence.FromBinaryPredicate::::toString()","156":"Correspondence.FromBinaryPredicate::::toString()","157":"Correspondence.FromBinaryPredicate::::toString()","266":"Correspondence.Transforming::::compare(A,E)","267":"Correspondence.Transforming::::compare(A,E)","268":"Correspondence.Transforming::::compare(A,E)","269":"Correspondence.Transforming::::compare(A,E)","271":"Correspondence.Transforming::::toString()","272":"Correspondence.Transforming::::toString()","273":"Correspondence.Transforming::::toString()","274":"Correspondence.Transforming::::toString()","294":"Correspondence::::tolerance(double)","295":"Correspondence::::tolerance(double)","296":"Correspondence::::tolerance(double)","307":"Correspondence.TolerantNumericEquality::::compare(java.lang.Number,java.lang.Number)","308":"Correspondence.TolerantNumericEquality::::compare(java.lang.Number,java.lang.Number)","309":"Correspondence.TolerantNumericEquality::::compare(java.lang.Number,java.lang.Number)","310":"Correspondence.TolerantNumericEquality::::compare(java.lang.Number,java.lang.Number)","311":"Correspondence.TolerantNumericEquality::::compare(java.lang.Number,java.lang.Number)","312":"Correspondence.TolerantNumericEquality::::compare(java.lang.Number,java.lang.Number)","314":"Correspondence.TolerantNumericEquality::::toString()","315":"Correspondence.TolerantNumericEquality::::toString()","316":"Correspondence.TolerantNumericEquality::::toString()","317":"Correspondence.TolerantNumericEquality::::toString()","325":"Correspondence::::equality()","326":"Correspondence::::equality()","327":"Correspondence::::equality()","328":"Correspondence::::equality()","334":"Correspondence.Equality::::compare(T,T)","335":"Correspondence.Equality::::compare(T,T)","336":"Correspondence.Equality::::compare(T,T)","337":"Correspondence.Equality::::compare(T,T)","339":"Correspondence.Equality::::toString()","340":"Correspondence.Equality::::toString()","341":"Correspondence.Equality::::toString()","342":"Correspondence.Equality::::toString()","343":"Correspondence.Equality::::toString()","344":"Correspondence.Equality::::toString()","346":"Correspondence.Equality::::isEquality()","347":"Correspondence.Equality::::isEquality()","348":"Correspondence.Equality::::isEquality()","349":"Correspondence.Equality::::isEquality()","390":"Correspondence::::formattingDiffsUsing(com.google.common.truth.Correspondence.DiffFormatter<? super A, ? super E>)","391":"Correspondence::::formattingDiffsUsing(com.google.common.truth.Correspondence.DiffFormatter<? super A, ? super E>)","392":"Correspondence::::formattingDiffsUsing(com.google.common.truth.Correspondence.DiffFormatter<? super A, ? super E>)","409":"Correspondence.DiffFormatter::::formatDiff(A,E)","410":"Correspondence.DiffFormatter::::formatDiff(A,E)","424":"Correspondence.FormattingDiffs::::compare(A,E)","425":"Correspondence.FormattingDiffs::::compare(A,E)","426":"Correspondence.FormattingDiffs::::compare(A,E)","427":"Correspondence.FormattingDiffs::::compare(A,E)","429":"Correspondence.FormattingDiffs::::formatDiff(A,E)","430":"Correspondence.FormattingDiffs::::formatDiff(A,E)","431":"Correspondence.FormattingDiffs::::formatDiff(A,E)","432":"Correspondence.FormattingDiffs::::formatDiff(A,E)","434":"Correspondence.FormattingDiffs::::toString()","435":"Correspondence.FormattingDiffs::::toString()","436":"Correspondence.FormattingDiffs::::toString()","437":"Correspondence.FormattingDiffs::::toString()","439":"Correspondence.FormattingDiffs::::isEquality()","440":"Correspondence.FormattingDiffs::::isEquality()","441":"Correspondence.FormattingDiffs::::isEquality()","442":"Correspondence.FormattingDiffs::::isEquality()","526":"Correspondence::::compare(A,E)","549":"Correspondence.StoredException::::describe()","550":"Correspondence.StoredException::::describe()","551":"Correspondence.StoredException::::describe()","552":"Correspondence.StoredException::::describe()","553":"Correspondence.StoredException::::describe()","566":"Correspondence.ExceptionStore::::forIterable()","567":"Correspondence.ExceptionStore::::forIterable()","568":"Correspondence.ExceptionStore::::forIterable()","570":"Correspondence.ExceptionStore::::forMapValues()","571":"Correspondence.ExceptionStore::::forMapValues()","572":"Correspondence.ExceptionStore::::forMapValues()","589":"Correspondence.ExceptionStore::::addCompareException(java.lang.Class<?>,java.lang.Exception,java.lang.Object,java.lang.Object)","590":"Correspondence.ExceptionStore::::addCompareException(java.lang.Class<?>,java.lang.Exception,java.lang.Object,java.lang.Object)","591":"Correspondence.ExceptionStore::::addCompareException(java.lang.Class<?>,java.lang.Exception,java.lang.Object,java.lang.Object)","592":"Correspondence.ExceptionStore::::addCompareException(java.lang.Class<?>,java.lang.Exception,java.lang.Object,java.lang.Object)","593":"Correspondence.ExceptionStore::::addCompareException(java.lang.Class<?>,java.lang.Exception,java.lang.Object,java.lang.Object)","594":"Correspondence.ExceptionStore::::addCompareException(java.lang.Class<?>,java.lang.Exception,java.lang.Object,java.lang.Object)","595":"Correspondence.ExceptionStore::::addCompareException(java.lang.Class<?>,java.lang.Exception,java.lang.Object,java.lang.Object)","596":"Correspondence.ExceptionStore::::addCompareException(java.lang.Class<?>,java.lang.Exception,java.lang.Object,java.lang.Object)","597":"Correspondence.ExceptionStore::::addCompareException(java.lang.Class<?>,java.lang.Exception,java.lang.Object,java.lang.Object)","598":"Correspondence.ExceptionStore::::addCompareException(java.lang.Class<?>,java.lang.Exception,java.lang.Object,java.lang.Object)","610":"Correspondence.ExceptionStore::::addActualKeyFunctionException(java.lang.Class<?>,java.lang.Exception,java.lang.Object)","611":"Correspondence.ExceptionStore::::addActualKeyFunctionException(java.lang.Class<?>,java.lang.Exception,java.lang.Object)","612":"Correspondence.ExceptionStore::::addActualKeyFunctionException(java.lang.Class<?>,java.lang.Exception,java.lang.Object)","613":"Correspondence.ExceptionStore::::addActualKeyFunctionException(java.lang.Class<?>,java.lang.Exception,java.lang.Object)","614":"Correspondence.ExceptionStore::::addActualKeyFunctionException(java.lang.Class<?>,java.lang.Exception,java.lang.Object)","615":"Correspondence.ExceptionStore::::addActualKeyFunctionException(java.lang.Class<?>,java.lang.Exception,java.lang.Object)","616":"Correspondence.ExceptionStore::::addActualKeyFunctionException(java.lang.Class<?>,java.lang.Exception,java.lang.Object)","617":"Correspondence.ExceptionStore::::addActualKeyFunctionException(java.lang.Class<?>,java.lang.Exception,java.lang.Object)","629":"Correspondence.ExceptionStore::::addExpectedKeyFunctionException(java.lang.Class<?>,java.lang.Exception,java.lang.Object)","630":"Correspondence.ExceptionStore::::addExpectedKeyFunctionException(java.lang.Class<?>,java.lang.Exception,java.lang.Object)","631":"Correspondence.ExceptionStore::::addExpectedKeyFunctionException(java.lang.Class<?>,java.lang.Exception,java.lang.Object)","632":"Correspondence.ExceptionStore::::addExpectedKeyFunctionException(java.lang.Class<?>,java.lang.Exception,java.lang.Object)","633":"Correspondence.ExceptionStore::::addExpectedKeyFunctionException(java.lang.Class<?>,java.lang.Exception,java.lang.Object)","634":"Correspondence.ExceptionStore::::addExpectedKeyFunctionException(java.lang.Class<?>,java.lang.Exception,java.lang.Object)","635":"Correspondence.ExceptionStore::::addExpectedKeyFunctionException(java.lang.Class<?>,java.lang.Exception,java.lang.Object)","636":"Correspondence.ExceptionStore::::addExpectedKeyFunctionException(java.lang.Class<?>,java.lang.Exception,java.lang.Object)","649":"Correspondence.ExceptionStore::::addFormatDiffException(java.lang.Class<?>,java.lang.Exception,java.lang.Object,java.lang.Object)","650":"Correspondence.ExceptionStore::::addFormatDiffException(java.lang.Class<?>,java.lang.Exception,java.lang.Object,java.lang.Object)","651":"Correspondence.ExceptionStore::::addFormatDiffException(java.lang.Class<?>,java.lang.Exception,java.lang.Object,java.lang.Object)","652":"Correspondence.ExceptionStore::::addFormatDiffException(java.lang.Class<?>,java.lang.Exception,java.lang.Object,java.lang.Object)","653":"Correspondence.ExceptionStore::::addFormatDiffException(java.lang.Class<?>,java.lang.Exception,java.lang.Object,java.lang.Object)","654":"Correspondence.ExceptionStore::::addFormatDiffException(java.lang.Class<?>,java.lang.Exception,java.lang.Object,java.lang.Object)","655":"Correspondence.ExceptionStore::::addFormatDiffException(java.lang.Class<?>,java.lang.Exception,java.lang.Object,java.lang.Object)","656":"Correspondence.ExceptionStore::::addFormatDiffException(java.lang.Class<?>,java.lang.Exception,java.lang.Object,java.lang.Object)","657":"Correspondence.ExceptionStore::::addFormatDiffException(java.lang.Class<?>,java.lang.Exception,java.lang.Object,java.lang.Object)","658":"Correspondence.ExceptionStore::::addFormatDiffException(java.lang.Class<?>,java.lang.Exception,java.lang.Object,java.lang.Object)","659":"Correspondence.ExceptionStore::::addFormatDiffException(java.lang.Class<?>,java.lang.Exception,java.lang.Object,java.lang.Object)","662":"Correspondence.ExceptionStore::::hasCompareException()","663":"Correspondence.ExceptionStore::::hasCompareException()","664":"Correspondence.ExceptionStore::::hasCompareException()","674":"Correspondence.ExceptionStore::::describeAsMainCause()","675":"Correspondence.ExceptionStore::::describeAsMainCause()","676":"Correspondence.ExceptionStore::::describeAsMainCause()","677":"Correspondence.ExceptionStore::::describeAsMainCause()","678":"Correspondence.ExceptionStore::::describeAsMainCause()","679":"Correspondence.ExceptionStore::::describeAsMainCause()","680":"Correspondence.ExceptionStore::::describeAsMainCause()","681":"Correspondence.ExceptionStore::::describeAsMainCause()","682":"Correspondence.ExceptionStore::::describeAsMainCause()","683":"Correspondence.ExceptionStore::::describeAsMainCause()","693":"Correspondence.ExceptionStore::::describeAsAdditionalInfo()","694":"Correspondence.ExceptionStore::::describeAsAdditionalInfo()","695":"Correspondence.ExceptionStore::::describeAsAdditionalInfo()","696":"Correspondence.ExceptionStore::::describeAsAdditionalInfo()","697":"Correspondence.ExceptionStore::::describeAsAdditionalInfo()","698":"Correspondence.ExceptionStore::::describeAsAdditionalInfo()","699":"Correspondence.ExceptionStore::::describeAsAdditionalInfo()","700":"Correspondence.ExceptionStore::::describeAsAdditionalInfo()","701":"Correspondence.ExceptionStore::::describeAsAdditionalInfo()","702":"Correspondence.ExceptionStore::::describeAsAdditionalInfo()","703":"Correspondence.ExceptionStore::::describeAsAdditionalInfo()","704":"Correspondence.ExceptionStore::::describeAsAdditionalInfo()","705":"Correspondence.ExceptionStore::::describeAsAdditionalInfo()","706":"Correspondence.ExceptionStore::::describeAsAdditionalInfo()","707":"Correspondence.ExceptionStore::::describeAsAdditionalInfo()","708":"Correspondence.ExceptionStore::::describeAsAdditionalInfo()","709":"Correspondence.ExceptionStore::::describeAsAdditionalInfo()","710":"Correspondence.ExceptionStore::::describeAsAdditionalInfo()","711":"Correspondence.ExceptionStore::::describeAsAdditionalInfo()","712":"Correspondence.ExceptionStore::::describeAsAdditionalInfo()","713":"Correspondence.ExceptionStore::::describeAsAdditionalInfo()","714":"Correspondence.ExceptionStore::::describeAsAdditionalInfo()","715":"Correspondence.ExceptionStore::::describeAsAdditionalInfo()","716":"Correspondence.ExceptionStore::::describeAsAdditionalInfo()","718":"Correspondence.ExceptionStore::::truncateStackTrace(java.lang.Exception,java.lang.Class<?>)","719":"Correspondence.ExceptionStore::::truncateStackTrace(java.lang.Exception,java.lang.Class<?>)","720":"Correspondence.ExceptionStore::::truncateStackTrace(java.lang.Exception,java.lang.Class<?>)","721":"Correspondence.ExceptionStore::::truncateStackTrace(java.lang.Exception,java.lang.Class<?>)","722":"Correspondence.ExceptionStore::::truncateStackTrace(java.lang.Exception,java.lang.Class<?>)","723":"Correspondence.ExceptionStore::::truncateStackTrace(java.lang.Exception,java.lang.Class<?>)","724":"Correspondence.ExceptionStore::::truncateStackTrace(java.lang.Exception,java.lang.Class<?>)","725":"Correspondence.ExceptionStore::::truncateStackTrace(java.lang.Exception,java.lang.Class<?>)","726":"Correspondence.ExceptionStore::::truncateStackTrace(java.lang.Exception,java.lang.Class<?>)","735":"Correspondence::::safeCompare(A,E,com.google.common.truth.Correspondence.ExceptionStore)","736":"Correspondence::::safeCompare(A,E,com.google.common.truth.Correspondence.ExceptionStore)","737":"Correspondence::::safeCompare(A,E,com.google.common.truth.Correspondence.ExceptionStore)","738":"Correspondence::::safeCompare(A,E,com.google.common.truth.Correspondence.ExceptionStore)","739":"Correspondence::::safeCompare(A,E,com.google.common.truth.Correspondence.ExceptionStore)","740":"Correspondence::::safeCompare(A,E,com.google.common.truth.Correspondence.ExceptionStore)","741":"Correspondence::::safeCompare(A,E,com.google.common.truth.Correspondence.ExceptionStore)","742":"Correspondence::::safeCompare(A,E,com.google.common.truth.Correspondence.ExceptionStore)","761":"Correspondence::::formatDiff(A,E)","762":"Correspondence::::formatDiff(A,E)","763":"Correspondence::::formatDiff(A,E)","770":"Correspondence::::safeFormatDiff(A,E,com.google.common.truth.Correspondence.ExceptionStore)","771":"Correspondence::::safeFormatDiff(A,E,com.google.common.truth.Correspondence.ExceptionStore)","772":"Correspondence::::safeFormatDiff(A,E,com.google.common.truth.Correspondence.ExceptionStore)","773":"Correspondence::::safeFormatDiff(A,E,com.google.common.truth.Correspondence.ExceptionStore)","774":"Correspondence::::safeFormatDiff(A,E,com.google.common.truth.Correspondence.ExceptionStore)","775":"Correspondence::::safeFormatDiff(A,E,com.google.common.truth.Correspondence.ExceptionStore)","776":"Correspondence::::safeFormatDiff(A,E,com.google.common.truth.Correspondence.ExceptionStore)","777":"Correspondence::::safeFormatDiff(A,E,com.google.common.truth.Correspondence.ExceptionStore)","794":"Correspondence::::toString()","795":"Correspondence::::toString()","801":"Correspondence::::isEquality()","802":"Correspondence::::isEquality()","803":"Correspondence::::isEquality()","810":"Correspondence::::describeForIterable()","811":"Correspondence::::describeForIterable()","812":"Correspondence::::describeForIterable()","813":"Correspondence::::describeForIterable()","814":"Correspondence::::describeForIterable()","815":"Correspondence::::describeForIterable()","816":"Correspondence::::describeForIterable()","817":"Correspondence::::describeForIterable()","824":"Correspondence::::describeForMapValues()","825":"Correspondence::::describeForMapValues()","826":"Correspondence::::describeForMapValues()","827":"Correspondence::::describeForMapValues()","828":"Correspondence::::describeForMapValues()","829":"Correspondence::::describeForMapValues()","830":"Correspondence::::describeForMapValues()","837":"Correspondence::::equals(java.lang.Object)","838":"Correspondence::::equals(java.lang.Object)","839":"Correspondence::::equals(java.lang.Object)","840":"Correspondence::::equals(java.lang.Object)","841":"Correspondence::::equals(java.lang.Object)","842":"Correspondence::::equals(java.lang.Object)","843":"Correspondence::::equals(java.lang.Object)","849":"Correspondence::::hashCode()","850":"Correspondence::::hashCode()","851":"Correspondence::::hashCode()","852":"Correspondence::::hashCode()","853":"Correspondence::::hashCode()"},"test_reverse_method_lines_dic":{"42":"CorrespondenceTest::::testEquals_throws()","43":"CorrespondenceTest::::testEquals_throws()","44":"CorrespondenceTest::::testEquals_throws()","45":"CorrespondenceTest::::testEquals_throws()","46":"CorrespondenceTest::::testEquals_throws()","47":"CorrespondenceTest::::testEquals_throws()","48":"CorrespondenceTest::::testEquals_throws()","49":"CorrespondenceTest::::testEquals_throws()","50":"CorrespondenceTest::::testEquals_throws()","52":"CorrespondenceTest::::testHashCode_throws()","53":"CorrespondenceTest::::testHashCode_throws()","54":"CorrespondenceTest::::testHashCode_throws()","55":"CorrespondenceTest::::testHashCode_throws()","56":"CorrespondenceTest::::testHashCode_throws()","57":"CorrespondenceTest::::testHashCode_throws()","58":"CorrespondenceTest::::testHashCode_throws()","59":"CorrespondenceTest::::testHashCode_throws()","60":"CorrespondenceTest::::testHashCode_throws()","67":"CorrespondenceTest::::testFrom_compare()","68":"CorrespondenceTest::::testFrom_compare()","69":"CorrespondenceTest::::testFrom_compare()","70":"CorrespondenceTest::::testFrom_compare()","71":"CorrespondenceTest::::testFrom_compare()","72":"CorrespondenceTest::::testFrom_compare()","74":"CorrespondenceTest::::testFrom_formatDiff()","75":"CorrespondenceTest::::testFrom_formatDiff()","76":"CorrespondenceTest::::testFrom_formatDiff()","77":"CorrespondenceTest::::testFrom_formatDiff()","79":"CorrespondenceTest::::testFrom_toString()","80":"CorrespondenceTest::::testFrom_toString()","81":"CorrespondenceTest::::testFrom_toString()","82":"CorrespondenceTest::::testFrom_toString()","84":"CorrespondenceTest::::testFrom_isEquality()","85":"CorrespondenceTest::::testFrom_isEquality()","86":"CorrespondenceTest::::testFrom_isEquality()","87":"CorrespondenceTest::::testFrom_isEquality()","89":"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_success()","90":"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_success()","91":"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_success()","92":"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_success()","93":"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_success()","94":"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_success()","96":"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_failure()","97":"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_failure()","98":"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_failure()","99":"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_failure()","100":"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_failure()","101":"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_failure()","102":"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_failure()","103":"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_failure()","104":"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_failure()","105":"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_failure()","106":"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_failure()","108":"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_null()","109":"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_null()","110":"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_null()","111":"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_null()","112":"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_null()","113":"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_null()","114":"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_null()","115":"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_null()","116":"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_null()","117":"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_null()","118":"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_null()","119":"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_null()","120":"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_null()","121":"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_null()","122":"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_null()","123":"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_null()","124":"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_null()","125":"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_null()","126":"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_null()","127":"CorrespondenceTest::::testFrom_viaIterableSubjectContainsExactly_null()","142":"CorrespondenceTest::::testTransforming_actual_compare()","143":"CorrespondenceTest::::testTransforming_actual_compare()","144":"CorrespondenceTest::::testTransforming_actual_compare()","145":"CorrespondenceTest::::testTransforming_actual_compare()","146":"CorrespondenceTest::::testTransforming_actual_compare()","147":"CorrespondenceTest::::testTransforming_actual_compare()","149":"CorrespondenceTest::::testTransforming_actual_compare_nullTransformedValues()","150":"CorrespondenceTest::::testTransforming_actual_compare_nullTransformedValues()","151":"CorrespondenceTest::::testTransforming_actual_compare_nullTransformedValues()","152":"CorrespondenceTest::::testTransforming_actual_compare_nullTransformedValues()","153":"CorrespondenceTest::::testTransforming_actual_compare_nullTransformedValues()","154":"CorrespondenceTest::::testTransforming_actual_compare_nullTransformedValues()","156":"CorrespondenceTest::::testTransforming_actual_compare_nullActualValue()","157":"CorrespondenceTest::::testTransforming_actual_compare_nullActualValue()","158":"CorrespondenceTest::::testTransforming_actual_compare_nullActualValue()","159":"CorrespondenceTest::::testTransforming_actual_compare_nullActualValue()","160":"CorrespondenceTest::::testTransforming_actual_compare_nullActualValue()","161":"CorrespondenceTest::::testTransforming_actual_compare_nullActualValue()","162":"CorrespondenceTest::::testTransforming_actual_compare_nullActualValue()","163":"CorrespondenceTest::::testTransforming_actual_compare_nullActualValue()","165":"CorrespondenceTest::::testTransforming_actual_formatDiff()","166":"CorrespondenceTest::::testTransforming_actual_formatDiff()","167":"CorrespondenceTest::::testTransforming_actual_formatDiff()","168":"CorrespondenceTest::::testTransforming_actual_formatDiff()","170":"CorrespondenceTest::::testTransforming_actual_toString()","171":"CorrespondenceTest::::testTransforming_actual_toString()","172":"CorrespondenceTest::::testTransforming_actual_toString()","173":"CorrespondenceTest::::testTransforming_actual_toString()","175":"CorrespondenceTest::::testTransforming_actual_isEquality()","176":"CorrespondenceTest::::testTransforming_actual_isEquality()","177":"CorrespondenceTest::::testTransforming_actual_isEquality()","178":"CorrespondenceTest::::testTransforming_actual_isEquality()","180":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_success()","181":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_success()","182":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_success()","183":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_success()","184":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_success()","185":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_success()","186":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_success()","188":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_failure()","189":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_failure()","190":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_failure()","191":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_failure()","192":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_failure()","193":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_failure()","194":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_failure()","195":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_failure()","196":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_failure()","197":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_failure()","198":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_failure()","200":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_nullActual()","201":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_nullActual()","202":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_nullActual()","203":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_nullActual()","204":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_nullActual()","205":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_nullActual()","206":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_nullActual()","207":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_nullActual()","208":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_nullActual()","209":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_nullActual()","210":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_nullActual()","211":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_nullActual()","212":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_nullActual()","213":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_nullActual()","214":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_nullActual()","215":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_nullActual()","216":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_nullActual()","217":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_nullActual()","218":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_nullActual()","219":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_nullActual()","221":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_nullTransformed()","222":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_nullTransformed()","223":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_nullTransformed()","224":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_nullTransformed()","225":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_nullTransformed()","226":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_nullTransformed()","227":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_nullTransformed()","228":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_nullTransformed()","229":"CorrespondenceTest::::testTransforming_actual_viaIterableSubjectContainsExactly_nullTransformed()","243":"CorrespondenceTest::::testTransforming_both_compare()","244":"CorrespondenceTest::::testTransforming_both_compare()","245":"CorrespondenceTest::::testTransforming_both_compare()","246":"CorrespondenceTest::::testTransforming_both_compare()","247":"CorrespondenceTest::::testTransforming_both_compare()","248":"CorrespondenceTest::::testTransforming_both_compare()","250":"CorrespondenceTest::::testTransforming_both_compare_nullTransformedValue()","251":"CorrespondenceTest::::testTransforming_both_compare_nullTransformedValue()","252":"CorrespondenceTest::::testTransforming_both_compare_nullTransformedValue()","253":"CorrespondenceTest::::testTransforming_both_compare_nullTransformedValue()","254":"CorrespondenceTest::::testTransforming_both_compare_nullTransformedValue()","255":"CorrespondenceTest::::testTransforming_both_compare_nullTransformedValue()","257":"CorrespondenceTest::::testTransforming_both_compare_nullInputValues()","258":"CorrespondenceTest::::testTransforming_both_compare_nullInputValues()","259":"CorrespondenceTest::::testTransforming_both_compare_nullInputValues()","260":"CorrespondenceTest::::testTransforming_both_compare_nullInputValues()","261":"CorrespondenceTest::::testTransforming_both_compare_nullInputValues()","262":"CorrespondenceTest::::testTransforming_both_compare_nullInputValues()","263":"CorrespondenceTest::::testTransforming_both_compare_nullInputValues()","264":"CorrespondenceTest::::testTransforming_both_compare_nullInputValues()","265":"CorrespondenceTest::::testTransforming_both_compare_nullInputValues()","266":"CorrespondenceTest::::testTransforming_both_compare_nullInputValues()","267":"CorrespondenceTest::::testTransforming_both_compare_nullInputValues()","268":"CorrespondenceTest::::testTransforming_both_compare_nullInputValues()","269":"CorrespondenceTest::::testTransforming_both_compare_nullInputValues()","271":"CorrespondenceTest::::testTransforming_both_formatDiff()","272":"CorrespondenceTest::::testTransforming_both_formatDiff()","273":"CorrespondenceTest::::testTransforming_both_formatDiff()","274":"CorrespondenceTest::::testTransforming_both_formatDiff()","276":"CorrespondenceTest::::testTransforming_both_toString()","277":"CorrespondenceTest::::testTransforming_both_toString()","278":"CorrespondenceTest::::testTransforming_both_toString()","279":"CorrespondenceTest::::testTransforming_both_toString()","280":"CorrespondenceTest::::testTransforming_both_toString()","282":"CorrespondenceTest::::testTransforming_both_isEquality()","283":"CorrespondenceTest::::testTransforming_both_isEquality()","284":"CorrespondenceTest::::testTransforming_both_isEquality()","285":"CorrespondenceTest::::testTransforming_both_isEquality()","287":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_success()","288":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_success()","289":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_success()","290":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_success()","291":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_success()","292":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_success()","293":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_success()","295":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_failure()","296":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_failure()","297":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_failure()","298":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_failure()","299":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_failure()","300":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_failure()","301":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_failure()","302":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_failure()","303":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_failure()","304":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_failure()","305":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_failure()","306":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_failure()","307":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_failure()","309":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullActual()","310":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullActual()","311":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullActual()","312":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullActual()","313":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullActual()","314":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullActual()","315":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullActual()","316":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullActual()","317":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullActual()","318":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullActual()","319":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullActual()","320":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullActual()","321":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullActual()","322":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullActual()","323":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullActual()","324":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullActual()","325":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullActual()","326":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullActual()","327":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullActual()","328":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullActual()","330":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullExpected()","331":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullExpected()","332":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullExpected()","333":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullExpected()","334":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullExpected()","335":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullExpected()","336":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullExpected()","337":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullExpected()","338":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullExpected()","339":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullExpected()","340":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullExpected()","341":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullExpected()","342":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullExpected()","343":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullExpected()","344":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullExpected()","345":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullExpected()","346":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullExpected()","347":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullExpected()","348":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullExpected()","349":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullExpected()","351":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullTransformed()","352":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullTransformed()","353":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullTransformed()","354":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullTransformed()","355":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullTransformed()","356":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullTransformed()","357":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullTransformed()","358":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullTransformed()","359":"CorrespondenceTest::::testTransforming_both_viaIterableSubjectContainsExactly_nullTransformed()","364":"CorrespondenceTest::::testTolerance_compare_doubles()","365":"CorrespondenceTest::::testTolerance_compare_doubles()","366":"CorrespondenceTest::::testTolerance_compare_doubles()","367":"CorrespondenceTest::::testTolerance_compare_doubles()","368":"CorrespondenceTest::::testTolerance_compare_doubles()","369":"CorrespondenceTest::::testTolerance_compare_doubles()","370":"CorrespondenceTest::::testTolerance_compare_doubles()","371":"CorrespondenceTest::::testTolerance_compare_doubles()","372":"CorrespondenceTest::::testTolerance_compare_doubles()","373":"CorrespondenceTest::::testTolerance_compare_doubles()","374":"CorrespondenceTest::::testTolerance_compare_doubles()","375":"CorrespondenceTest::::testTolerance_compare_doubles()","376":"CorrespondenceTest::::testTolerance_compare_doubles()","377":"CorrespondenceTest::::testTolerance_compare_doubles()","379":"CorrespondenceTest::::testTolerance_compare_floats()","380":"CorrespondenceTest::::testTolerance_compare_floats()","381":"CorrespondenceTest::::testTolerance_compare_floats()","382":"CorrespondenceTest::::testTolerance_compare_floats()","383":"CorrespondenceTest::::testTolerance_compare_floats()","384":"CorrespondenceTest::::testTolerance_compare_floats()","385":"CorrespondenceTest::::testTolerance_compare_floats()","386":"CorrespondenceTest::::testTolerance_compare_floats()","387":"CorrespondenceTest::::testTolerance_compare_floats()","388":"CorrespondenceTest::::testTolerance_compare_floats()","389":"CorrespondenceTest::::testTolerance_compare_floats()","390":"CorrespondenceTest::::testTolerance_compare_floats()","391":"CorrespondenceTest::::testTolerance_compare_floats()","392":"CorrespondenceTest::::testTolerance_compare_floats()","394":"CorrespondenceTest::::testTolerance_compare_doublesVsInts()","395":"CorrespondenceTest::::testTolerance_compare_doublesVsInts()","396":"CorrespondenceTest::::testTolerance_compare_doublesVsInts()","397":"CorrespondenceTest::::testTolerance_compare_doublesVsInts()","398":"CorrespondenceTest::::testTolerance_compare_doublesVsInts()","399":"CorrespondenceTest::::testTolerance_compare_doublesVsInts()","400":"CorrespondenceTest::::testTolerance_compare_doublesVsInts()","401":"CorrespondenceTest::::testTolerance_compare_doublesVsInts()","403":"CorrespondenceTest::::testTolerance_compare_negativeTolerance()","404":"CorrespondenceTest::::testTolerance_compare_negativeTolerance()","405":"CorrespondenceTest::::testTolerance_compare_negativeTolerance()","406":"CorrespondenceTest::::testTolerance_compare_negativeTolerance()","407":"CorrespondenceTest::::testTolerance_compare_negativeTolerance()","408":"CorrespondenceTest::::testTolerance_compare_negativeTolerance()","409":"CorrespondenceTest::::testTolerance_compare_negativeTolerance()","410":"CorrespondenceTest::::testTolerance_compare_negativeTolerance()","411":"CorrespondenceTest::::testTolerance_compare_negativeTolerance()","413":"CorrespondenceTest::::testTolerance_compare_null()","414":"CorrespondenceTest::::testTolerance_compare_null()","415":"CorrespondenceTest::::testTolerance_compare_null()","416":"CorrespondenceTest::::testTolerance_compare_null()","417":"CorrespondenceTest::::testTolerance_compare_null()","418":"CorrespondenceTest::::testTolerance_compare_null()","419":"CorrespondenceTest::::testTolerance_compare_null()","420":"CorrespondenceTest::::testTolerance_compare_null()","421":"CorrespondenceTest::::testTolerance_compare_null()","422":"CorrespondenceTest::::testTolerance_compare_null()","423":"CorrespondenceTest::::testTolerance_compare_null()","424":"CorrespondenceTest::::testTolerance_compare_null()","425":"CorrespondenceTest::::testTolerance_compare_null()","427":"CorrespondenceTest::::testTolerance_formatDiff()","428":"CorrespondenceTest::::testTolerance_formatDiff()","429":"CorrespondenceTest::::testTolerance_formatDiff()","430":"CorrespondenceTest::::testTolerance_formatDiff()","432":"CorrespondenceTest::::testTolerance_toString()","433":"CorrespondenceTest::::testTolerance_toString()","434":"CorrespondenceTest::::testTolerance_toString()","435":"CorrespondenceTest::::testTolerance_toString()","437":"CorrespondenceTest::::testTolerance_isEquality()","438":"CorrespondenceTest::::testTolerance_isEquality()","439":"CorrespondenceTest::::testTolerance_isEquality()","440":"CorrespondenceTest::::testTolerance_isEquality()","441":"CorrespondenceTest::::testTolerance_isEquality()","442":"CorrespondenceTest::::testTolerance_isEquality()","444":"CorrespondenceTest::::testTolerance_viaIterableSubjectContains_success()","445":"CorrespondenceTest::::testTolerance_viaIterableSubjectContains_success()","446":"CorrespondenceTest::::testTolerance_viaIterableSubjectContains_success()","447":"CorrespondenceTest::::testTolerance_viaIterableSubjectContains_success()","448":"CorrespondenceTest::::testTolerance_viaIterableSubjectContains_success()","449":"CorrespondenceTest::::testTolerance_viaIterableSubjectContains_success()","451":"CorrespondenceTest::::testTolerance_viaIterableSubjectContains_failure()","452":"CorrespondenceTest::::testTolerance_viaIterableSubjectContains_failure()","453":"CorrespondenceTest::::testTolerance_viaIterableSubjectContains_failure()","454":"CorrespondenceTest::::testTolerance_viaIterableSubjectContains_failure()","455":"CorrespondenceTest::::testTolerance_viaIterableSubjectContains_failure()","456":"CorrespondenceTest::::testTolerance_viaIterableSubjectContains_failure()","457":"CorrespondenceTest::::testTolerance_viaIterableSubjectContains_failure()","458":"CorrespondenceTest::::testTolerance_viaIterableSubjectContains_failure()","459":"CorrespondenceTest::::testTolerance_viaIterableSubjectContains_failure()","460":"CorrespondenceTest::::testTolerance_viaIterableSubjectContains_failure()","461":"CorrespondenceTest::::testTolerance_viaIterableSubjectContains_failure()","462":"CorrespondenceTest::::testTolerance_viaIterableSubjectContains_failure()","463":"CorrespondenceTest::::testTolerance_viaIterableSubjectContains_failure()","468":"CorrespondenceTest::::testEquality_compare()","469":"CorrespondenceTest::::testEquality_compare()","470":"CorrespondenceTest::::testEquality_compare()","471":"CorrespondenceTest::::testEquality_compare()","472":"CorrespondenceTest::::testEquality_compare()","473":"CorrespondenceTest::::testEquality_compare()","474":"CorrespondenceTest::::testEquality_compare()","475":"CorrespondenceTest::::testEquality_compare()","476":"CorrespondenceTest::::testEquality_compare()","478":"CorrespondenceTest::::testEquality_formatDiff()","479":"CorrespondenceTest::::testEquality_formatDiff()","480":"CorrespondenceTest::::testEquality_formatDiff()","481":"CorrespondenceTest::::testEquality_formatDiff()","483":"CorrespondenceTest::::testEquality_toString()","484":"CorrespondenceTest::::testEquality_toString()","485":"CorrespondenceTest::::testEquality_toString()","486":"CorrespondenceTest::::testEquality_toString()","488":"CorrespondenceTest::::testEquality_isEquality()","489":"CorrespondenceTest::::testEquality_isEquality()","490":"CorrespondenceTest::::testEquality_isEquality()","491":"CorrespondenceTest::::testEquality_isEquality()","493":"CorrespondenceTest::::testEquality_viaIterableSubjectContains_success()","494":"CorrespondenceTest::::testEquality_viaIterableSubjectContains_success()","495":"CorrespondenceTest::::testEquality_viaIterableSubjectContains_success()","496":"CorrespondenceTest::::testEquality_viaIterableSubjectContains_success()","498":"CorrespondenceTest::::testEquality_viaIterableSubjectContains_failure()","499":"CorrespondenceTest::::testEquality_viaIterableSubjectContains_failure()","500":"CorrespondenceTest::::testEquality_viaIterableSubjectContains_failure()","501":"CorrespondenceTest::::testEquality_viaIterableSubjectContains_failure()","502":"CorrespondenceTest::::testEquality_viaIterableSubjectContains_failure()","503":"CorrespondenceTest::::testEquality_viaIterableSubjectContains_failure()","504":"CorrespondenceTest::::testEquality_viaIterableSubjectContains_failure()","505":"CorrespondenceTest::::testEquality_viaIterableSubjectContains_failure()","506":"CorrespondenceTest::::testEquality_viaIterableSubjectContains_failure()","507":"CorrespondenceTest::::testEquality_viaIterableSubjectContains_failure()","515":"CorrespondenceTest::::testFormattingDiffsUsing_compare()","516":"CorrespondenceTest::::testFormattingDiffsUsing_compare()","517":"CorrespondenceTest::::testFormattingDiffsUsing_compare()","518":"CorrespondenceTest::::testFormattingDiffsUsing_compare()","519":"CorrespondenceTest::::testFormattingDiffsUsing_compare()","520":"CorrespondenceTest::::testFormattingDiffsUsing_compare()","521":"CorrespondenceTest::::testFormattingDiffsUsing_compare()","523":"CorrespondenceTest::::testFormattingDiffsUsing_formatDiff()","524":"CorrespondenceTest::::testFormattingDiffsUsing_formatDiff()","525":"CorrespondenceTest::::testFormattingDiffsUsing_formatDiff()","526":"CorrespondenceTest::::testFormattingDiffsUsing_formatDiff()","527":"CorrespondenceTest::::testFormattingDiffsUsing_formatDiff()","529":"CorrespondenceTest::::testFormattingDiffsUsing_toString()","530":"CorrespondenceTest::::testFormattingDiffsUsing_toString()","531":"CorrespondenceTest::::testFormattingDiffsUsing_toString()","532":"CorrespondenceTest::::testFormattingDiffsUsing_toString()","533":"CorrespondenceTest::::testFormattingDiffsUsing_toString()","535":"CorrespondenceTest::::testFormattingDiffsUsing_isEquality()","536":"CorrespondenceTest::::testFormattingDiffsUsing_isEquality()","537":"CorrespondenceTest::::testFormattingDiffsUsing_isEquality()","538":"CorrespondenceTest::::testFormattingDiffsUsing_isEquality()","539":"CorrespondenceTest::::testFormattingDiffsUsing_isEquality()","540":"CorrespondenceTest::::testFormattingDiffsUsing_isEquality()","541":"CorrespondenceTest::::testFormattingDiffsUsing_isEquality()","542":"CorrespondenceTest::::testFormattingDiffsUsing_isEquality()","544":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_failure()","545":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_failure()","546":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_failure()","547":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_failure()","548":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_failure()","549":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_failure()","550":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_failure()","551":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_failure()","552":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_failure()","553":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_failure()","554":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_failure()","555":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_failure()","556":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_failure()","557":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_failure()","558":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_failure()","559":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_failure()","560":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_failure()","561":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_failure()","562":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_failure()","563":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_failure()","565":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_nullActual()","566":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_nullActual()","567":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_nullActual()","568":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_nullActual()","569":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_nullActual()","570":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_nullActual()","571":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_nullActual()","572":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_nullActual()","573":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_nullActual()","574":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_nullActual()","575":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_nullActual()","576":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_nullActual()","577":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_nullActual()","578":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_nullActual()","579":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_nullActual()","580":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_nullActual()","581":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_nullActual()","582":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_nullActual()","583":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_nullActual()","584":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_nullActual()","585":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_nullActual()","586":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_nullActual()","587":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_nullActual()","588":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_nullActual()","589":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_nullActual()","590":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_nullActual()","591":"CorrespondenceTest::::testFormattingDiffsUsing_viaIterableSubjectContainsExactly_nullActual()"},"tests":[{"test_lines":[42,50],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,361,391,419,420,421,422,840],"label":"Correspondence::::equals(java.lang.Object)"},{"test_lines":[52,60],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,361,391,419,420,421,422,852],"label":"Correspondence::::hashCode()"},{"test_lines":[67,72],"covered_lines":[117,144,145,146,147,151,199,247,260,261,262,263,264,361,391,419,420,421,422],"label":"Correspondence.FromBinaryPredicate::::compare(A,E)"},{"test_lines":[74,77],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,361,391,419,420,421,422,762],"label":"Correspondence::::formatDiff(A,E)"},{"test_lines":[79,82],"covered_lines":[117,144,145,146,147,156,199,247,260,261,262,263,264,361,391,419,420,421,422],"label":"Correspondence.FromBinaryPredicate::::toString()"},{"test_lines":[84,87],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,361,391,419,420,421,422,802],"label":"Correspondence::::isEquality()"},{"test_lines":[89,94],"covered_lines":[117,144,145,146,147,151,199,247,260,261,262,263,264,361,391,419,420,421,422,562,563,564,567,574,575,576,737],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[96,106],"covered_lines":[117,144,145,146,147,151,156,199,247,260,261,262,263,264,361,391,419,420,421,422,562,563,564,567,574,575,576,694,695,702,710,715,737,802,811,812,813],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[108,127],"covered_lines":[117,144,145,146,147,151,156,199,247,260,261,262,263,264,361,391,419,420,421,422,530,537,538,539,540,541,550,552,562,563,564,567,574,575,576,594,595,596,598,694,695,696,697,700,702,710,715,719,720,721,722,723,725,726,737,738,739,740,802,811,812,813],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[142,147],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,268,361,391,419,420,421,422],"label":"Correspondence.Transforming::::compare(A,E)"},{"test_lines":[149,154],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,268,361,391,419,420,421,422],"label":"Correspondence.Transforming::::compare(A,E)"},{"test_lines":[156,163],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,361,391,419,420,421,422],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[165,168],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,361,391,419,420,421,422,762],"label":"Correspondence::::formatDiff(A,E)"},{"test_lines":[170,173],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,273,361,391,419,420,421,422],"label":"Correspondence.Transforming::::toString()"},{"test_lines":[175,178],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,361,391,419,420,421,422,802],"label":"Correspondence::::isEquality()"},{"test_lines":[180,186],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,268,361,391,419,420,421,422,562,563,564,567,574,575,576,737],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[188,198],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,268,273,361,391,419,420,421,422,562,563,564,567,574,575,576,694,695,702,710,715,737,802,811,812,813],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[200,219],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,268,273,361,391,419,420,421,422,530,537,538,539,540,541,550,552,562,563,564,567,574,575,576,594,595,596,598,694,695,696,697,700,702,710,715,719,720,721,722,723,725,726,737,738,739,740,802,811,812,813],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[221,229],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,268,361,391,419,420,421,422,562,563,564,567,574,575,576,737],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[243,248],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,268,361,391,419,420,421,422],"label":"Correspondence.Transforming::::compare(A,E)"},{"test_lines":[250,255],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,268,361,391,419,420,421,422],"label":"Correspondence.Transforming::::compare(A,E)"},{"test_lines":[257,269],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,361,391,419,420,421,422],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[271,274],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,361,391,419,420,421,422,762],"label":"Correspondence::::formattingDiffsUsing(com.google.common.truth.Correspondence.DiffFormatter<? super A, ? super E>)"},{"test_lines":[276,280],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,273,361,391,419,420,421,422],"label":"Correspondence.Transforming::::toString()"},{"test_lines":[282,285],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,361,391,419,420,421,422,802],"label":"Correspondence::::isEquality()"},{"test_lines":[287,293],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,268,361,391,419,420,421,422,562,563,564,567,574,575,576,737],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[295,307],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,268,273,361,391,419,420,421,422,562,563,564,567,574,575,576,694,695,702,710,715,737,802,811,812,813],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[309,328],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,268,273,361,391,419,420,421,422,530,537,538,539,540,541,550,552,562,563,564,567,574,575,576,594,595,596,598,694,695,696,697,700,702,710,715,719,720,721,722,723,725,726,737,738,739,740,802,811,812,813],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[330,349],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,268,273,361,391,419,420,421,422,530,537,538,539,540,541,550,552,562,563,564,567,574,575,576,594,595,596,598,694,695,696,697,700,702,710,715,719,720,721,722,723,725,726,737,738,739,740,802,811,812,813],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[351,359],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,268,361,391,419,420,421,422,562,563,564,567,574,575,576,737],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[364,377],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,295,302,303,304,305,309,310,311,361,391,419,420,421,422],"label":"Correspondence.TolerantNumericEquality::::compare(java.lang.Number,java.lang.Number)"},{"test_lines":[379,392],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,295,302,303,304,305,309,310,311,361,391,419,420,421,422],"label":"Correspondence.TolerantNumericEquality::::compare(java.lang.Number,java.lang.Number)"},{"test_lines":[394,401],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,295,302,303,304,305,309,310,311,361,391,419,420,421,422],"label":"Correspondence.TolerantNumericEquality::::compare(java.lang.Number,java.lang.Number)"},{"test_lines":[403,411],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,302,361,391,419,420,421,422],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[413,425],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,295,302,303,304,305,309,361,391,419,420,421,422],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[427,430],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,295,302,303,304,305,361,391,419,420,421,422,762],"label":"Correspondence::::formatDiff(A,E)"},{"test_lines":[432,435],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,295,302,303,304,305,316,361,391,419,420,421,422],"label":"Correspondence::::tolerance(double)"},{"test_lines":[437,442],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,295,302,303,304,305,361,391,419,420,421,422,802],"label":"Correspondence::::tolerance(double)"},{"test_lines":[444,449],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,295,302,303,304,305,309,310,311,361,391,419,420,421,422,562,563,564,567,574,575,576,663,737],"label":"Correspondence::::tolerance(double)"},{"test_lines":[451,463],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,295,302,303,304,305,309,310,311,316,361,391,419,420,421,422,562,563,564,567,574,575,576,694,695,702,710,715,737,802,811,812,813],"label":"Correspondence::::tolerance(double)"},{"test_lines":[468,476],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,327,330,332,336,361,391,419,420,421,422],"label":"Correspondence.Equality::::compare(T,T)"},{"test_lines":[478,481],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,327,330,332,361,391,419,420,421,422,762],"label":"Correspondence::::formatDiff(A,E)"},{"test_lines":[483,486],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,327,330,332,343,361,391,419,420,421,422],"label":"Correspondence::::equality()"},{"test_lines":[488,491],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,327,330,332,348,361,391,419,420,421,422],"label":"Correspondence::::equality()"},{"test_lines":[493,496],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,327,330,332,336,361,391,419,420,421,422,562,563,564,567,574,575,576,663,737],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[498,507],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,327,330,332,336,348,361,391,419,420,421,422,562,563,564,567,574,575,576,694,695,702,710,715,737,811,815],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[515,521],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,268,361,391,419,420,421,422,426],"label":"Correspondence.Transforming::::compare(A,E)"},{"test_lines":[523,527],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,361,391,419,420,421,422,431],"label":"Correspondence.FormattingDiffs::::formatDiff(A,E)"},{"test_lines":[529,533],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,273,361,391,419,420,421,422,436],"label":"Correspondence.Transforming::::toString()"},{"test_lines":[535,542],"covered_lines":[117,144,145,146,147,156,199,247,260,261,262,263,264,327,330,332,348,361,391,419,420,421,422,436,441,802],"label":"Correspondence::::formattingDiffsUsing(com.google.common.truth.Correspondence.DiffFormatter<? super A, ? super E>)"},{"test_lines":[544,563],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,268,273,361,391,419,420,421,422,426,431,436,441,562,563,564,567,574,575,576,694,695,702,710,715,737,772,802,811,812,813],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[565,591],"covered_lines":[117,144,145,146,147,199,247,260,261,262,263,264,268,273,361,391,419,420,421,422,426,436,441,530,537,538,539,540,541,550,552,562,563,564,567,574,575,576,594,595,596,598,654,655,656,657,659,694,695,696,697,700,702,710,711,712,713,715,719,720,721,722,723,725,726,737,738,739,740,773,774,775,802,811,812,813],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/truth/core/src/main/java/com/google/common/truth/IterableSubject.java":{"class_content":["/*\n"," * Copyright (c) 2011 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.base.Preconditions.checkArgument;\n","import static com.google.common.base.Preconditions.checkNotNull;\n","import static com.google.common.base.Strings.lenientFormat;\n","import static com.google.common.collect.Iterables.concat;\n","import static com.google.common.collect.Iterables.size;\n","import static com.google.common.collect.Lists.newArrayList;\n","import static com.google.common.truth.Fact.fact;\n","import static com.google.common.truth.Fact.simpleFact;\n","import static com.google.common.truth.IterableSubject.ElementFactGrouping.ALL_IN_ONE_FACT;\n","import static com.google.common.truth.IterableSubject.ElementFactGrouping.FACT_PER_ELEMENT;\n","import static com.google.common.truth.SubjectUtils.accumulate;\n","import static com.google.common.truth.SubjectUtils.annotateEmptyStrings;\n","import static com.google.common.truth.SubjectUtils.asList;\n","import static com.google.common.truth.SubjectUtils.countDuplicates;\n","import static com.google.common.truth.SubjectUtils.countDuplicatesAndAddTypeInfo;\n","import static com.google.common.truth.SubjectUtils.countDuplicatesAndMaybeAddTypeInfoReturnObject;\n","import static com.google.common.truth.SubjectUtils.entryString;\n","import static com.google.common.truth.SubjectUtils.hasMatchingToStringPair;\n","import static com.google.common.truth.SubjectUtils.iterableToCollection;\n","import static com.google.common.truth.SubjectUtils.iterableToList;\n","import static com.google.common.truth.SubjectUtils.objectToTypeName;\n","import static com.google.common.truth.SubjectUtils.retainMatchingToString;\n","\n","import com.google.common.base.Function;\n","import com.google.common.base.Objects;\n","import com.google.common.base.Optional;\n","import com.google.common.collect.BiMap;\n","import com.google.common.collect.ImmutableBiMap;\n","import com.google.common.collect.ImmutableList;\n","import com.google.common.collect.ImmutableMultimap;\n","import com.google.common.collect.ImmutableSetMultimap;\n","import com.google.common.collect.Iterables;\n","import com.google.common.collect.Iterators;\n","import com.google.common.collect.LinkedHashMultiset;\n","import com.google.common.collect.LinkedListMultimap;\n","import com.google.common.collect.ListMultimap;\n","import com.google.common.collect.Lists;\n","import com.google.common.collect.Multiset;\n","import com.google.common.collect.Ordering;\n","import com.google.common.collect.Sets;\n","import com.google.common.truth.Correspondence.DiffFormatter;\n","import com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped;\n","import com.google.errorprone.annotations.CanIgnoreReturnValue;\n","import com.google.errorprone.annotations.DoNotCall;\n","import java.util.ArrayList;\n","import java.util.Collection;\n","import java.util.Comparator;\n","import java.util.Iterator;\n","import java.util.LinkedHashMap;\n","import java.util.List;\n","import java.util.Map;\n","import java.util.Set;\n","import org.checkerframework.checker.nullness.qual.Nullable;\n","\n","/**\n"," * Propositions for {@link Iterable} subjects.\n"," *\n"," * <p><b>Note:</b>\n"," *\n"," * <ul>\n"," *   <li>Assertions may iterate through the given {@link Iterable} more than once. If you have an\n"," *       unusual implementation of {@link Iterable} which does not support multiple iterations\n"," *       (sometimes known as a \"one-shot iterable\"), you must copy your iterable into a collection\n"," *       which does (e.g. {@code ImmutableList.copyOf(iterable)} or, if your iterable may contain\n"," *       null, {@code newArrayList(iterable)}). If you don't, you may see surprising failures.\n"," *   <li>Assertions may also require that the elements in the given {@link Iterable} implement\n"," *       {@link Object#hashCode} correctly.\n"," * </ul>\n"," *\n"," * @author Kurt Alfred Kluever\n"," * @author Pete Gillin\n"," */\n","// Can't be final since MultisetSubject and SortedSetSubject extend it\n","public class IterableSubject extends Subject {\n","\n","  private final @Nullable Iterable<?> actual;\n","\n","  /**\n","   * Constructor for use by subclasses. If you want to create an instance of this class itself, call\n","   * {@link Subject#check(String, Object...) check(...)}{@code .that(actual)}.\n","   */\n","  protected IterableSubject(FailureMetadata metadata, @Nullable Iterable<?> iterable) {\n","    this(metadata, iterable, null);\n","  }\n","\n","  /** Constructor for use by package-private callers. */\n","  IterableSubject(\n","      FailureMetadata metadata,\n","      @Nullable Iterable<?> iterable,\n","      @Nullable String typeDescriptionOverride) {\n","    super(metadata, iterable, typeDescriptionOverride);\n","    this.actual = iterable;\n","  }\n","\n","  @Override\n","  protected String actualCustomStringRepresentation() {\n","    if (actual != null) {\n","      // Check the value of iterable.toString() against the default Object.toString() implementation\n","      // so we can avoid things like \"com.google.common.graph.Traverser$GraphTraverser$1@5e316c74\"\n","      String objectToString =\n","          actual.getClass().getName() + '@' + Integer.toHexString(System.identityHashCode(actual));\n","      if (actual.toString().equals(objectToString)) {\n","        return Iterables.toString(actual);\n","      }\n","    }\n","    return super.actualCustomStringRepresentation();\n","  }\n","\n","  @Override\n","  public void isEqualTo(@Nullable Object expected) {\n","    @SuppressWarnings(\"UndefinedEquals\") // method contract requires testing iterables for equality\n","    boolean equal = Objects.equal(actual, expected);\n","    if (equal) {\n","      return;\n","    }\n","\n","    // Fail but with a more descriptive message:\n","\n","    if (actual instanceof List && expected instanceof List) {\n","      containsExactlyElementsIn((List<?>) expected).inOrder();\n","    } else if ((actual instanceof Set && expected instanceof Set)\n","        || (actual instanceof Multiset && expected instanceof Multiset)) {\n","      containsExactlyElementsIn((Collection<?>) expected);\n","    } else {\n","      /*\n","       * TODO(b/18430105): Consider a special message if comparing incompatible collection types\n","       * (similar to what MultimapSubject has).\n","       */\n","      super.isEqualTo(expected);\n","    }\n","  }\n","\n","  /** Fails if the subject is not empty. */\n","  public final void isEmpty() {\n","    if (!Iterables.isEmpty(checkNotNull(actual))) {\n","      failWithActual(simpleFact(\"expected to be empty\"));\n","    }\n","  }\n","\n","  /** Fails if the subject is empty. */\n","  public final void isNotEmpty() {\n","    if (Iterables.isEmpty(checkNotNull(actual))) {\n","      failWithoutActual(simpleFact(\"expected not to be empty\"));\n","    }\n","  }\n","\n","  /** Fails if the subject does not have the given size. */\n","  public final void hasSize(int expectedSize) {\n","    checkArgument(expectedSize >= 0, \"expectedSize(%s) must be >= 0\", expectedSize);\n","    int actualSize = size(checkNotNull(actual));\n","    check(\"size()\").that(actualSize).isEqualTo(expectedSize);\n","  }\n","\n","  /** Checks (with a side-effect failure) that the subject contains the supplied item. */\n","  public final void contains(@Nullable Object element) {\n","    if (!Iterables.contains(checkNotNull(actual), element)) {\n","      List<@Nullable Object> elementList = newArrayList(element);\n","      if (hasMatchingToStringPair(actual, elementList)) {\n","        failWithoutActual(\n","            fact(\"expected to contain\", element),\n","            fact(\"an instance of\", objectToTypeName(element)),\n","            simpleFact(\"but did not\"),\n","            fact(\n","                \"though it did contain\",\n","                countDuplicatesAndAddTypeInfo(\n","                    retainMatchingToString(actual, /* itemsToCheck= */ elementList))),\n","            fullContents());\n","      } else {\n","        failWithActual(\"expected to contain\", element);\n","      }\n","    }\n","  }\n","\n","  /** Checks (with a side-effect failure) that the subject does not contain the supplied item. */\n","  public final void doesNotContain(@Nullable Object element) {\n","    if (Iterables.contains(checkNotNull(actual), element)) {\n","      failWithActual(\"expected not to contain\", element);\n","    }\n","  }\n","\n","  /** Checks that the subject does not contain duplicate elements. */\n","  public final void containsNoDuplicates() {\n","    List<Multiset.Entry<?>> duplicates = newArrayList();\n","    for (Multiset.Entry<?> entry : LinkedHashMultiset.create(checkNotNull(actual)).entrySet()) {\n","      if (entry.getCount() > 1) {\n","        duplicates.add(entry);\n","      }\n","    }\n","    if (!duplicates.isEmpty()) {\n","      failWithoutActual(\n","          simpleFact(\"expected not to contain duplicates\"),\n","          fact(\"but contained\", duplicates),\n","          fullContents());\n","    }\n","  }\n","\n","  /** Checks that the subject contains at least one of the provided objects or fails. */\n","  public final void containsAnyOf(\n","      @Nullable Object first, @Nullable Object second, @Nullable Object @Nullable ... rest) {\n","    containsAnyIn(accumulate(first, second, rest));\n","  }\n","\n","  /**\n","   * Checks that the subject contains at least one of the objects contained in the provided\n","   * collection or fails.\n","   */\n","  // TODO(cpovirk): Consider using makeElementFacts-style messages here, in contains(), etc.\n","  public final void containsAnyIn(@Nullable Iterable<?> expected) {\n","    checkNotNull(expected);\n","    Collection<?> actual = iterableToCollection(checkNotNull(this.actual));\n","    for (Object item : expected) {\n","      if (actual.contains(item)) {\n","        return;\n","      }\n","    }\n","    if (hasMatchingToStringPair(actual, expected)) {\n","      failWithoutActual(\n","          fact(\"expected to contain any of\", countDuplicatesAndAddTypeInfo(expected)),\n","          simpleFact(\"but did not\"),\n","          fact(\n","              \"though it did contain\",\n","              countDuplicatesAndAddTypeInfo(\n","                  retainMatchingToString(checkNotNull(this.actual), /* itemsToCheck= */ expected))),\n","          fullContents());\n","    } else {\n","      failWithActual(\"expected to contain any of\", expected);\n","    }\n","  }\n","\n","  /**\n","   * Checks that the subject contains at least one of the objects contained in the provided array or\n","   * fails.\n","   */\n","  @SuppressWarnings(\"AvoidObjectArrays\")\n","  public final void containsAnyIn(@Nullable Object[] expected) {\n","    containsAnyIn(asList(expected));\n","  }\n","\n","  /**\n","   * Checks that the actual iterable contains at least all of the expected elements or fails. If an\n","   * element appears more than once in the expected elements to this call then it must appear at\n","   * least that number of times in the actual elements.\n","   *\n","   * <p>To also test that the contents appear in the given order, make a call to {@code inOrder()}\n","   * on the object returned by this method. The expected elements must appear in the given order\n","   * within the actual elements, but they are not required to be consecutive.\n","   */\n","  @CanIgnoreReturnValue\n","  public final Ordered containsAtLeast(\n","      @Nullable Object firstExpected,\n","      @Nullable Object secondExpected,\n","      @Nullable Object @Nullable ... restOfExpected) {\n","    return containsAtLeastElementsIn(accumulate(firstExpected, secondExpected, restOfExpected));\n","  }\n","\n","  /**\n","   * Checks that the actual iterable contains at least all of the expected elements or fails. If an\n","   * element appears more than once in the expected elements then it must appear at least that\n","   * number of times in the actual elements.\n","   *\n","   * <p>To also test that the contents appear in the given order, make a call to {@code inOrder()}\n","   * on the object returned by this method. The expected elements must appear in the given order\n","   * within the actual elements, but they are not required to be consecutive.\n","   */\n","  @CanIgnoreReturnValue\n","  public final Ordered containsAtLeastElementsIn(Iterable<?> expectedIterable) {\n","    List<?> actual = Lists.newLinkedList(checkNotNull(this.actual));\n","    Collection<?> expected = iterableToCollection(expectedIterable);\n","\n","    List<@Nullable Object> missing = newArrayList();\n","    List<@Nullable Object> actualNotInOrder = newArrayList();\n","\n","    boolean ordered = true;\n","    // step through the expected elements...\n","    for (Object e : expected) {\n","      int index = actual.indexOf(e);\n","      if (index != -1) { // if we find the element in the actual list...\n","        // drain all the elements that come before that element into actualNotInOrder\n","        moveElements(actual, actualNotInOrder, index);\n","        // and remove the element from the actual list\n","        actual.remove(0);\n","      } else { // otherwise try removing it from actualNotInOrder...\n","        if (actualNotInOrder.remove(e)) { // if it was in actualNotInOrder, we're not in order\n","          ordered = false;\n","        } else { // if it's not in actualNotInOrder, we're missing an expected element\n","          missing.add(e);\n","        }\n","      }\n","    }\n","    // if we have any missing expected elements, fail\n","    if (!missing.isEmpty()) {\n","      return failAtLeast(expected, missing);\n","    }\n","\n","    return ordered\n","        ? IN_ORDER\n","        : new Ordered() {\n","          @Override\n","          public void inOrder() {\n","            ImmutableList.Builder<Fact> facts = ImmutableList.builder();\n","            facts.add(simpleFact(\"required elements were all found, but order was wrong\"));\n","            facts.add(fact(\"expected order for required elements\", expected));\n","            List<Object> actualOrder =\n","                Lists.newArrayList(checkNotNull(IterableSubject.this.actual));\n","            if (actualOrder.retainAll(expected)) {\n","              facts.add(fact(\"but order was\", actualOrder));\n","              facts.add(fullContents());\n","              failWithoutActual(facts.build());\n","            } else {\n","              failWithActual(facts.build());\n","            }\n","          }\n","        };\n","  }\n","\n","  /**\n","   * Checks that the actual iterable contains at least all of the expected elements or fails. If an\n","   * element appears more than once in the expected elements then it must appear at least that\n","   * number of times in the actual elements.\n","   *\n","   * <p>To also test that the contents appear in the given order, make a call to {@code inOrder()}\n","   * on the object returned by this method. The expected elements must appear in the given order\n","   * within the actual elements, but they are not required to be consecutive.\n","   */\n","  @CanIgnoreReturnValue\n","  @SuppressWarnings(\"AvoidObjectArrays\")\n","  public final Ordered containsAtLeastElementsIn(@Nullable Object[] expected) {\n","    return containsAtLeastElementsIn(asList(expected));\n","  }\n","\n","  private Ordered failAtLeast(Collection<?> expected, Collection<?> missingRawObjects) {\n","    List<?> nearMissRawObjects =\n","        retainMatchingToString(checkNotNull(actual), /* itemsToCheck= */ missingRawObjects);\n","\n","    ImmutableList.Builder<Fact> facts = ImmutableList.builder();\n","    facts.addAll(\n","        makeElementFactsForBoth(\n","            \"missing\", missingRawObjects, \"though it did contain\", nearMissRawObjects));\n","    /*\n","     * TODO(cpovirk): Make makeElementFactsForBoth support generating just \"though it did contain\"\n","     * rather than \"though it did contain (2)?\" Users might interpret the number as the *total*\n","     * number of actual elements (or the total number of non-matched elements). (Frankly, they might\n","     * think that even *without* the number.... Can we do better than the phrase \"though it did\n","     * contain,\" which has been our standard so far?) Or maybe it's all clear enough in context,\n","     * since this error shows up only to inform users of type mismatches.\n","     */\n","    facts.add(fact(\"expected to contain at least\", expected));\n","    facts.add(butWas());\n","\n","    failWithoutActual(facts.build());\n","    return ALREADY_FAILED;\n","  }\n","\n","  /**\n","   * Removes at most the given number of available elements from the input list and adds them to the\n","   * given output collection.\n","   */\n","  private static void moveElements(\n","      List<?> input, Collection<@Nullable Object> output, int maxElements) {\n","    for (int i = 0; i < maxElements; i++) {\n","      output.add(input.remove(0));\n","    }\n","  }\n","\n","  /**\n","   * Checks that a subject contains exactly the provided objects or fails.\n","   *\n","   * <p>Multiplicity is respected. For example, an object duplicated exactly 3 times in the\n","   * parameters asserts that the object must likewise be duplicated exactly 3 times in the subject.\n","   *\n","   * <p>To also test that the contents appear in the given order, make a call to {@code inOrder()}\n","   * on the object returned by this method.\n","   *\n","   * <p>To test that the iterable contains the same elements as an array, prefer {@link\n","   * #containsExactlyElementsIn(Object[])}. It makes clear that the given array is a list of\n","   * elements, not an element itself. This helps human readers and avoids a compiler warning.\n","   */\n","  @CanIgnoreReturnValue\n","  public final Ordered containsExactly(@Nullable Object @Nullable ... varargs) {\n","    List<@Nullable Object> expected =\n","        (varargs == null) ? newArrayList((@Nullable Object) null) : asList(varargs);\n","    return containsExactlyElementsIn(\n","        expected, varargs != null && varargs.length == 1 && varargs[0] instanceof Iterable);\n","  }\n","\n","  /**\n","   * Checks that a subject contains exactly the provided objects or fails.\n","   *\n","   * <p>Multiplicity is respected. For example, an object duplicated exactly 3 times in the {@code\n","   * Iterable} parameter asserts that the object must likewise be duplicated exactly 3 times in the\n","   * subject.\n","   *\n","   * <p>To also test that the contents appear in the given order, make a call to {@code inOrder()}\n","   * on the object returned by this method.\n","   */\n","  @CanIgnoreReturnValue\n","  public final Ordered containsExactlyElementsIn(@Nullable Iterable<?> expected) {\n","    return containsExactlyElementsIn(expected, false);\n","  }\n","\n","  /**\n","   * Checks that a subject contains exactly the provided objects or fails.\n","   *\n","   * <p>Multiplicity is respected. For example, an object duplicated exactly 3 times in the array\n","   * parameter asserts that the object must likewise be duplicated exactly 3 times in the subject.\n","   *\n","   * <p>To also test that the contents appear in the given order, make a call to {@code inOrder()}\n","   * on the object returned by this method.\n","   */\n","  @CanIgnoreReturnValue\n","  @SuppressWarnings({\n","    \"AvoidObjectArrays\",\n","    \"ContainsExactlyElementsInUnnecessaryWrapperAroundArray\",\n","    \"ContainsExactlyElementsInWithVarArgsToExactly\"\n","  })\n","  public final Ordered containsExactlyElementsIn(@Nullable Object @Nullable [] expected) {\n","    return containsExactlyElementsIn(asList(checkNotNull(expected)));\n","  }\n","\n","  private Ordered containsExactlyElementsIn(\n","      @Nullable Iterable<?> required, boolean addElementsInWarning) {\n","    checkNotNull(required);\n","    Iterator<?> actualIter = checkNotNull(actual).iterator();\n","    Iterator<?> requiredIter = required.iterator();\n","\n","    if (!requiredIter.hasNext()) {\n","      if (actualIter.hasNext()) {\n","        isEmpty(); // fails\n","        return ALREADY_FAILED;\n","      } else {\n","        return IN_ORDER;\n","      }\n","    }\n","\n","    // Step through both iterators comparing elements pairwise.\n","    boolean isFirst = true;\n","    while (actualIter.hasNext() && requiredIter.hasNext()) {\n","      Object actualElement = actualIter.next();\n","      Object requiredElement = requiredIter.next();\n","\n","      // As soon as we encounter a pair of elements that differ, we know that inOrder()\n","      // cannot succeed, so we can check the rest of the elements more normally.\n","      // Since any previous pairs of elements we iterated over were equal, they have no\n","      // effect on the result now.\n","      if (!Objects.equal(actualElement, requiredElement)) {\n","        if (isFirst && !actualIter.hasNext() && !requiredIter.hasNext()) {\n","          /*\n","           * There's exactly one actual element and exactly one expected element, and they don't\n","           * match, so throw a ComparisonFailure. The logical way to do that would be\n","           * `check(...).that(actualElement).isEqualTo(requiredElement)`. But isEqualTo has magic\n","           * behavior for arrays and primitives, behavior that's inconsistent with how this method\n","           * otherwise behaves. For consistency, we want to rely only on the equal() call we've\n","           * already made. So we expose a special method for this and call it from here.\n","           *\n","           * TODO(b/135918662): Consider always throwing ComparisonFailure if there is exactly one\n","           * missing and exactly one extra element, even if there were additional (matching)\n","           * elements. However, this will probably be useful less often, and it will be tricky to\n","           * explain. First, what would we say, \"value of: iterable.onlyElementThatDidNotMatch()?\"\n","           * And second, it feels weirder to call out a single element when the expected and actual\n","           * values had multiple elements. Granted, Fuzzy Truth already does this, so maybe it's OK?\n","           * But Fuzzy Truth doesn't (yet) make the mismatched value so prominent.\n","           */\n","          checkNoNeedToDisplayBothValues(\"onlyElement()\")\n","              .that(actualElement)\n","              .failEqualityCheckForEqualsWithoutDescription(requiredElement);\n","          return ALREADY_FAILED;\n","        }\n","        // Missing elements; elements that are not missing will be removed as we iterate.\n","        List<@Nullable Object> missing = newArrayList();\n","        missing.add(requiredElement);\n","        Iterators.addAll(missing, requiredIter);\n","\n","        // Extra elements that the subject had but shouldn't have.\n","        List<@Nullable Object> extra = newArrayList();\n","\n","        // Remove all actual elements from missing, and add any that weren't in missing\n","        // to extra.\n","        if (!missing.remove(actualElement)) {\n","          extra.add(actualElement);\n","        }\n","        while (actualIter.hasNext()) {\n","          Object item = actualIter.next();\n","          if (!missing.remove(item)) {\n","            extra.add(item);\n","          }\n","        }\n","\n","        if (missing.isEmpty() && extra.isEmpty()) {\n","          /*\n","           * This containsExactly() call is a success. But the iterables were not in the same order,\n","           * so return an object that will fail the test if the user calls inOrder().\n","           */\n","          return new Ordered() {\n","            @Override\n","            public void inOrder() {\n","              failWithActual(\n","                  simpleFact(\"contents match, but order was wrong\"), fact(\"expected\", required));\n","            }\n","          };\n","        }\n","        return failExactly(required, addElementsInWarning, missing, extra);\n","      }\n","\n","      isFirst = false;\n","    }\n","\n","    // Here,  we must have reached the end of one of the iterators without finding any\n","    // pairs of elements that differ. If the actual iterator still has elements, they're\n","    // extras. If the required iterator has elements, they're missing elements.\n","    if (actualIter.hasNext()) {\n","      return failExactly(\n","          required,\n","          addElementsInWarning,\n","          /* missingRawObjects= */ ImmutableList.of(),\n","          /* extraRawObjects= */ newArrayList(actualIter));\n","    } else if (requiredIter.hasNext()) {\n","      return failExactly(\n","          required,\n","          addElementsInWarning,\n","          /* missingRawObjects= */ newArrayList(requiredIter),\n","          /* extraRawObjects= */ ImmutableList.of());\n","    }\n","\n","    // If neither iterator has elements, we reached the end and the elements were in\n","    // order, so inOrder() can just succeed.\n","    return IN_ORDER;\n","  }\n","\n","  private Ordered failExactly(\n","      Iterable<?> required,\n","      boolean addElementsInWarning,\n","      Collection<?> missingRawObjects,\n","      Collection<?> extraRawObjects) {\n","    ImmutableList.Builder<Fact> facts = ImmutableList.builder();\n","    facts.addAll(\n","        makeElementFactsForBoth(\"missing\", missingRawObjects, \"unexpected\", extraRawObjects));\n","    facts.add(fact(\"expected\", required));\n","    facts.add(butWas());\n","    if (addElementsInWarning) {\n","      facts.add(\n","          simpleFact(\n","              \"Passing an iterable to the varargs method containsExactly(Object...) is \"\n","                  + \"often not the correct thing to do. Did you mean to call \"\n","                  + \"containsExactlyElementsIn(Iterable) instead?\"));\n","    }\n","\n","    failWithoutActual(facts.build());\n","    return ALREADY_FAILED;\n","  }\n","\n","  private static ImmutableList<Fact> makeElementFactsForBoth(\n","      String firstKey,\n","      Collection<?> firstCollection,\n","      String secondKey,\n","      Collection<?> secondCollection) {\n","    // TODO(kak): Possible enhancement: Include \"[1 copy]\" if the element does appear in\n","    // the subject but not enough times. Similarly for unexpected extra items.\n","    boolean addTypeInfo = hasMatchingToStringPair(firstCollection, secondCollection);\n","    DuplicateGroupedAndTyped first =\n","        countDuplicatesAndMaybeAddTypeInfoReturnObject(firstCollection, addTypeInfo);\n","    DuplicateGroupedAndTyped second =\n","        countDuplicatesAndMaybeAddTypeInfoReturnObject(secondCollection, addTypeInfo);\n","    ElementFactGrouping grouping = pickGrouping(first.entrySet(), second.entrySet());\n","\n","    ImmutableList.Builder<Fact> facts = ImmutableList.builder();\n","    ImmutableList<Fact> firstFacts = makeElementFacts(firstKey, first, grouping);\n","    ImmutableList<Fact> secondFacts = makeElementFacts(secondKey, second, grouping);\n","    facts.addAll(firstFacts);\n","    if (firstFacts.size() > 1 && secondFacts.size() > 1) {\n","      facts.add(simpleFact(\"\"));\n","    }\n","    facts.addAll(secondFacts);\n","    facts.add(simpleFact(\"---\"));\n","    return facts.build();\n","  }\n","\n","  /**\n","   * Returns a list of facts (zero, one, or many, depending on the number of elements and the\n","   * grouping policy) describing the given missing, unexpected, or near-miss elements.\n","   */\n","  private static ImmutableList<Fact> makeElementFacts(\n","      String label, DuplicateGroupedAndTyped elements, ElementFactGrouping grouping) {\n","    if (elements.isEmpty()) {\n","      return ImmutableList.of();\n","    }\n","\n","    if (grouping == ALL_IN_ONE_FACT) {\n","      return ImmutableList.of(fact(keyToGoWithElementsString(label, elements), elements));\n","    }\n","\n","    ImmutableList.Builder<Fact> facts = ImmutableList.builder();\n","    facts.add(simpleFact(keyToServeAsHeader(label, elements)));\n","    int n = 1;\n","    for (Multiset.Entry<?> entry : elements.entrySet()) {\n","      int count = entry.getCount();\n","      Object item = entry.getElement();\n","      facts.add(fact(numberString(n, count), item));\n","      n += count;\n","    }\n","    return facts.build();\n","  }\n","\n","  /*\n","   * Fact keys like \"missing (1)\" go against our recommendation that keys should be fixed strings.\n","   * But this violation lets the fact value contain only the elements (instead of also containing\n","   * the count), so it feels worthwhile.\n","   */\n","\n","  private static String keyToGoWithElementsString(String label, DuplicateGroupedAndTyped elements) {\n","    /*\n","     * elements.toString(), which the caller is going to use, includes the homogeneous type (if\n","     * any), so we don't want to include it here. (And it's better to have it in the value, rather\n","     * than in the key, so that it doesn't push the horizontally aligned values over too far.)\n","     */\n","    return lenientFormat(\"%s (%s)\", label, elements.totalCopies());\n","  }\n","\n","  private static String keyToServeAsHeader(String label, DuplicateGroupedAndTyped elements) {\n","    /*\n","     * The caller of this method outputs each individual element manually (as opposed to calling\n","     * elements.toString()), so the homogeneous type isn't present unless we add it. Fortunately, we\n","     * can add it here without pushing the horizontally aligned values over, as this key won't have\n","     * an associated value, so it won't factor into alignment.\n","     */\n","    String key = keyToGoWithElementsString(label, elements);\n","    if (elements.homogeneousTypeToDisplay.isPresent()) {\n","      key += \" (\" + elements.homogeneousTypeToDisplay.get() + \")\";\n","    }\n","    return key;\n","  }\n","\n","  private static String numberString(int n, int count) {\n","    return count == 1 ? lenientFormat(\"#%s\", n) : lenientFormat(\"#%s [%s copies]\", n, count);\n","  }\n","\n","  private static ElementFactGrouping pickGrouping(\n","      Iterable<Multiset.Entry<?>> first, Iterable<Multiset.Entry<?>> second) {\n","    boolean firstHasMultiple = hasMultiple(first);\n","    boolean secondHasMultiple = hasMultiple(second);\n","    if ((firstHasMultiple || secondHasMultiple) && anyContainsCommaOrNewline(first, second)) {\n","      return FACT_PER_ELEMENT;\n","    }\n","    if (firstHasMultiple && containsEmptyOrLong(first)) {\n","      return FACT_PER_ELEMENT;\n","    }\n","    if (secondHasMultiple && containsEmptyOrLong(second)) {\n","      return FACT_PER_ELEMENT;\n","    }\n","    return ALL_IN_ONE_FACT;\n","  }\n","\n","  private static boolean anyContainsCommaOrNewline(Iterable<Multiset.Entry<?>>... lists) {\n","    for (Multiset.Entry<?> entry : concat(lists)) {\n","      String s = String.valueOf(entry.getElement());\n","      if (s.contains(\"\\n\") || s.contains(\",\")) {\n","        return true;\n","      }\n","    }\n","    return false;\n","  }\n","\n","  private static boolean hasMultiple(Iterable<Multiset.Entry<?>> entries) {\n","    int totalCount = 0;\n","    for (Multiset.Entry<?> entry : entries) {\n","      totalCount += entry.getCount();\n","      if (totalCount > 1) {\n","        return true;\n","      }\n","    }\n","    return false;\n","  }\n","\n","  private static boolean containsEmptyOrLong(Iterable<Multiset.Entry<?>> entries) {\n","    int totalLength = 0;\n","    for (Multiset.Entry<?> entry : entries) {\n","      String s = entryString(entry);\n","      if (s.isEmpty()) {\n","        return true;\n","      }\n","      totalLength += s.length();\n","    }\n","    return totalLength > 200;\n","  }\n","\n","  /**\n","   * Whether to output each missing/unexpected item as its own {@link Fact} or to group all those\n","   * items together into a single {@code Fact}.\n","   */\n","  enum ElementFactGrouping {\n","    ALL_IN_ONE_FACT,\n","    FACT_PER_ELEMENT;\n","  }\n","\n","  /**\n","   * Checks that a actual iterable contains none of the excluded objects or fails. (Duplicates are\n","   * irrelevant to this test, which fails if any of the actual elements equal any of the excluded.)\n","   */\n","  public final void containsNoneOf(\n","      @Nullable Object firstExcluded,\n","      @Nullable Object secondExcluded,\n","      @Nullable Object @Nullable ... restOfExcluded) {\n","    containsNoneIn(accumulate(firstExcluded, secondExcluded, restOfExcluded));\n","  }\n","\n","  /**\n","   * Checks that the actual iterable contains none of the elements contained in the excluded\n","   * iterable or fails. (Duplicates are irrelevant to this test, which fails if any of the actual\n","   * elements equal any of the excluded.)\n","   */\n","  public final void containsNoneIn(Iterable<?> excluded) {\n","    Collection<?> actual = iterableToCollection(checkNotNull(this.actual));\n","    List<@Nullable Object> present = new ArrayList<>();\n","    for (Object item : Sets.newLinkedHashSet(excluded)) {\n","      if (actual.contains(item)) {\n","        present.add(item);\n","      }\n","    }\n","    if (!present.isEmpty()) {\n","      failWithoutActual(\n","          fact(\"expected not to contain any of\", annotateEmptyStrings(excluded)),\n","          fact(\"but contained\", annotateEmptyStrings(present)),\n","          fullContents());\n","    }\n","  }\n","\n","  /**\n","   * Checks that the actual iterable contains none of the elements contained in the excluded array\n","   * or fails. (Duplicates are irrelevant to this test, which fails if any of the actual elements\n","   * equal any of the excluded.)\n","   */\n","  @SuppressWarnings(\"AvoidObjectArrays\")\n","  public final void containsNoneIn(@Nullable Object[] excluded) {\n","    containsNoneIn(asList(excluded));\n","  }\n","\n","  /** Ordered implementation that does nothing because it's already known to be true. */\n","  private static final Ordered IN_ORDER = () -> {};\n","\n","  /** Ordered implementation that does nothing because an earlier check already caused a failure. */\n","  private static final Ordered ALREADY_FAILED = () -> {};\n","\n","  /**\n","   * Fails if the iterable is not strictly ordered, according to the natural ordering of its\n","   * elements. Strictly ordered means that each element in the iterable is <i>strictly</i> greater\n","   * than the element that preceded it.\n","   *\n","   * @throws ClassCastException if any pair of elements is not mutually Comparable\n","   * @throws NullPointerException if any element is null\n","   */\n","  /*\n","   * non-final because it's overridden by IterableOfProtosSubject.\n","   *\n","   * If we really, really wanted it to be final, we could make IterableOfProtosSubject implement a\n","   * package-private(?) interface that redeclares this method as deprecated.\n","   *\n","   * Alternatively, we could avoid deprecating the method there, relying instead on Error Prone\n","   * static analysis. It's _possible_ that users would be confused by having one overload deprecated\n","   * and the other not, anyway.\n","   */\n","  public void isInStrictOrder() {\n","    isInStrictOrder(Ordering.natural());\n","  }\n","\n","  /**\n","   * Fails if the iterable is not strictly ordered, according to the given comparator. Strictly\n","   * ordered means that each element in the iterable is <i>strictly</i> greater than the element\n","   * that preceded it.\n","   *\n","   * @throws ClassCastException if any pair of elements is not mutually Comparable\n","   */\n","  @SuppressWarnings({\"unchecked\"})\n","  public final void isInStrictOrder(Comparator<?> comparator) {\n","    checkNotNull(comparator);\n","    pairwiseCheck(\n","        \"expected to be in strict order\",\n","        new PairwiseChecker() {\n","          @Override\n","          public boolean check(@Nullable Object prev, @Nullable Object next) {\n","            return ((Comparator<@Nullable Object>) comparator).compare(prev, next) < 0;\n","          }\n","        });\n","  }\n","\n","  /**\n","   * Fails if the iterable is not ordered, according to the natural ordering of its elements.\n","   * Ordered means that each element in the iterable is greater than or equal to the element that\n","   * preceded it.\n","   *\n","   * @throws ClassCastException if any pair of elements is not mutually Comparable\n","   * @throws NullPointerException if any element is null\n","   */\n","  // non-final because it's overridden by IterableOfProtosSubject. See isInStrictOrder.\n","  public void isInOrder() {\n","    isInOrder(Ordering.natural());\n","  }\n","\n","  /**\n","   * Fails if the iterable is not ordered, according to the given comparator. Ordered means that\n","   * each element in the iterable is greater than or equal to the element that preceded it.\n","   *\n","   * @throws ClassCastException if any pair of elements is not mutually Comparable\n","   */\n","  @SuppressWarnings({\"unchecked\"})\n","  public final void isInOrder(Comparator<?> comparator) {\n","    checkNotNull(comparator);\n","    pairwiseCheck(\n","        \"expected to be in order\",\n","        new PairwiseChecker() {\n","          @Override\n","          public boolean check(@Nullable Object prev, @Nullable Object next) {\n","            return ((Comparator<@Nullable Object>) comparator).compare(prev, next) <= 0;\n","          }\n","        });\n","  }\n","\n","  private interface PairwiseChecker {\n","    boolean check(@Nullable Object prev, @Nullable Object next);\n","  }\n","\n","  private void pairwiseCheck(String expectedFact, PairwiseChecker checker) {\n","    Iterator<?> iterator = checkNotNull(actual).iterator();\n","    if (iterator.hasNext()) {\n","      Object prev = iterator.next();\n","      while (iterator.hasNext()) {\n","        Object next = iterator.next();\n","        if (!checker.check(prev, next)) {\n","          failWithoutActual(\n","              simpleFact(expectedFact),\n","              fact(\"but contained\", prev),\n","              fact(\"followed by\", next),\n","              fullContents());\n","          return;\n","        }\n","        prev = next;\n","      }\n","    }\n","  }\n","\n","  /**\n","   * @deprecated You probably meant to call {@link #containsNoneOf} instead.\n","   */\n","  @Override\n","  @Deprecated\n","  public void isNoneOf(\n","      @Nullable Object first, @Nullable Object second, @Nullable Object @Nullable ... rest) {\n","    super.isNoneOf(first, second, rest);\n","  }\n","\n","  /**\n","   * @deprecated You probably meant to call {@link #containsNoneIn} instead.\n","   */\n","  @Override\n","  @Deprecated\n","  public void isNotIn(@Nullable Iterable<?> iterable) {\n","    checkNotNull(iterable);\n","    if (Iterables.contains(iterable, actual)) {\n","      failWithActual(\"expected not to be any of\", iterable);\n","    }\n","    List<@Nullable Object> nonIterables = new ArrayList<>();\n","    for (Object element : iterable) {\n","      if (!(element instanceof Iterable<?>)) {\n","        nonIterables.add(element);\n","      }\n","    }\n","    if (!nonIterables.isEmpty()) {\n","      failWithoutActual(\n","          simpleFact(\n","              lenientFormat(\n","                  \"The actual value is an Iterable, and you've written a test that compares it to \"\n","                      + \"some objects that are not Iterables. Did you instead mean to check \"\n","                      + \"whether its *contents* match any of the *contents* of the given values? \"\n","                      + \"If so, call containsNoneOf(...)/containsNoneIn(...) instead. \"\n","                      + \"Non-iterables: %s\",\n","                  nonIterables)));\n","    }\n","  }\n","\n","  private Fact fullContents() {\n","    return fact(\"full contents\", actualCustomStringRepresentationForPackageMembersToCall());\n","  }\n","\n","  /**\n","   * Starts a method chain for a check in which the actual elements (i.e. the elements of the {@link\n","   * Iterable} under test) are compared to expected elements using the given {@link Correspondence}.\n","   * The actual elements must be of type {@code A}, the expected elements must be of type {@code E}.\n","   * The check is actually executed by continuing the method chain. For example:\n","   *\n","   * <pre>{@code\n","   * assertThat(actualIterable).comparingElementsUsing(correspondence).contains(expected);\n","   * }</pre>\n","   *\n","   * where {@code actualIterable} is an {@code Iterable<A>} (or, more generally, an {@code\n","   * Iterable<? extends A>}), {@code correspondence} is a {@code Correspondence<A, E>}, and {@code\n","   * expected} is an {@code E}.\n","   *\n","   * <p>Any of the methods on the returned object may throw {@link ClassCastException} if they\n","   * encounter an actual element that is not of type {@code A}.\n","   */\n","  public <A extends @Nullable Object, E extends @Nullable Object>\n","      UsingCorrespondence<A, E> comparingElementsUsing(\n","          Correspondence<? super A, ? super E> correspondence) {\n","    return new UsingCorrespondence<>(this, correspondence);\n","  }\n","\n","  /**\n","   * Starts a method chain for a check in which failure messages may use the given {@link\n","   * DiffFormatter} to describe the difference between an actual elements (i.e. an element of the\n","   * {@link Iterable} under test) and the element it is expected to be equal to, but isn't. The\n","   * actual and expected elements must be of type {@code T}. The check is actually executed by\n","   * continuing the method chain. You may well want to use {@link\n","   * UsingCorrespondence#displayingDiffsPairedBy} to specify how the elements should be paired up\n","   * for diffing. For example:\n","   *\n","   * <pre>{@code\n","   * assertThat(actualFoos)\n","   *     .formattingDiffsUsing(FooTestHelper::formatDiff)\n","   *     .displayingDiffsPairedBy(Foo::getId)\n","   *     .containsExactly(foo1, foo2, foo3);\n","   * }</pre>\n","   *\n","   * where {@code actualFoos} is an {@code Iterable<Foo>}, {@code FooTestHelper.formatDiff} is a\n","   * static method taking two {@code Foo} arguments and returning a {@link String}, {@code\n","   * Foo.getId} is a no-arg instance method returning some kind of ID, and {@code foo1}, {code\n","   * foo2}, and {@code foo3} are {@code Foo} instances.\n","   *\n","   * <p>Unlike when using {@link #comparingElementsUsing}, the elements are still compared using\n","   * object equality, so this method does not affect whether a test passes or fails.\n","   *\n","   * <p>Any of the methods on the returned object may throw {@link ClassCastException} if they\n","   * encounter an actual element that is not of type {@code T}.\n","   *\n","   * @since 1.1\n","   */\n","  public <T> UsingCorrespondence<T, T> formattingDiffsUsing(\n","      DiffFormatter<? super T, ? super T> formatter) {\n","    return comparingElementsUsing(Correspondence.<T>equality().formattingDiffsUsing(formatter));\n","  }\n","\n","  /**\n","   * A partially specified check in which the actual elements (normally the elements of the {@link\n","   * Iterable} under test) are compared to expected elements using a {@link Correspondence}. The\n","   * expected elements are of type {@code E}. Call methods on this object to actually execute the\n","   * check.\n","   */\n","  public static class UsingCorrespondence<A extends @Nullable Object, E extends @Nullable Object> {\n","\n","    private final IterableSubject subject;\n","    private final Correspondence<? super A, ? super E> correspondence;\n","    private final Optional<Pairer> pairer;\n","\n","    UsingCorrespondence(\n","        IterableSubject subject, Correspondence<? super A, ? super E> correspondence) {\n","      this.subject = checkNotNull(subject);\n","      this.correspondence = checkNotNull(correspondence);\n","      this.pairer = Optional.absent();\n","    }\n","\n","    UsingCorrespondence(\n","        IterableSubject subject,\n","        Correspondence<? super A, ? super E> correspondence,\n","        Pairer pairer) {\n","      this.subject = checkNotNull(subject);\n","      this.correspondence = checkNotNull(correspondence);\n","      this.pairer = Optional.of(pairer);\n","    }\n","\n","    /**\n","     * @throws UnsupportedOperationException always\n","     * @deprecated {@link Object#equals(Object)} is not supported on Truth subjects or intermediate\n","     *     classes. If you are writing a test assertion (actual vs. expected), use methods liks\n","     *     {@link #containsExactlyElementsIn(Iterable)} instead.\n","     */\n","    @DoNotCall(\n","        \"UsingCorrespondence.equals() is not supported. Did you mean to call\"\n","            + \" containsExactlyElementsIn(expected) instead of equals(expected)?\")\n","    @Deprecated\n","    @Override\n","    public final boolean equals(@Nullable Object o) {\n","      throw new UnsupportedOperationException(\n","          \"UsingCorrespondence.equals() is not supported. Did you mean to call\"\n","              + \" containsExactlyElementsIn(expected) instead of equals(expected)?\");\n","    }\n","\n","    /**\n","     * @throws UnsupportedOperationException always\n","     * @deprecated {@link Object#hashCode()} is not supported on Truth types.\n","     */\n","    @DoNotCall(\"UsingCorrespondence.hashCode() is not supported.\")\n","    @Deprecated\n","    @Override\n","    public final int hashCode() {\n","      throw new UnsupportedOperationException(\"UsingCorrespondence.hashCode() is not supported.\");\n","    }\n","\n","    /**\n","     * @throws UnsupportedOperationException always\n","     * @deprecated {@link Object#toString()} is not supported on Truth subjects.\n","     */\n","    @Deprecated\n","    @DoNotCall(\"UsingCorrespondence.toString() is not supported.\")\n","    @Override\n","    public final String toString() {\n","      throw new UnsupportedOperationException(\n","          \"UsingCorrespondence.toString() is not supported. Did you mean to call\"\n","              + \" assertThat(foo.toString()) instead of assertThat(foo).toString()?\");\n","    }\n","\n","    /**\n","     * Specifies a way to pair up unexpected and missing elements in the message when an assertion\n","     * fails. For example:\n","     *\n","     * <pre>{@code\n","     * assertThat(actualRecords)\n","     *     .comparingElementsUsing(RECORD_CORRESPONDENCE)\n","     *     .displayingDiffsPairedBy(MyRecord::getId)\n","     *     .containsExactlyElementsIn(expectedRecords);\n","     * }</pre>\n","     *\n","     * <p><b>Important</b>: The {code keyFunction} function must be able to accept both the actual\n","     * and the unexpected elements, i.e. it must satisfy {@code Function<? super A, ?>} as well as\n","     * {@code Function<? super E, ?>}. If that constraint is not met then a subsequent method may\n","     * throw {@link ClassCastException}. Use the two-parameter overload if you need to specify\n","     * different key functions for the actual and expected elements.\n","     *\n","     * <p>On assertions where it makes sense to do so, the elements are paired as follows: they are\n","     * keyed by {@code keyFunction}, and if an unexpected element and a missing element have the\n","     * same non-null key then the they are paired up. (Elements with null keys are not paired.) The\n","     * failure message will show paired elements together, and a diff will be shown if the {@link\n","     * Correspondence#formatDiff} method returns non-null.\n","     *\n","     * <p>The expected elements given in the assertion should be uniquely keyed by {@code\n","     * keyFunction}. If multiple missing elements have the same key then the pairing will be\n","     * skipped.\n","     *\n","     * <p>Useful key functions will have the property that key equality is less strict than the\n","     * correspondence, i.e. given {@code actual} and {@code expected} values with keys {@code\n","     * actualKey} and {@code expectedKey}, if {@code correspondence.compare(actual, expected)} is\n","     * true then it is guaranteed that {@code actualKey} is equal to {@code expectedKey}, but there\n","     * are cases where {@code actualKey} is equal to {@code expectedKey} but {@code\n","     * correspondence.compare(actual, expected)} is false.\n","     *\n","     * <p>If the {@code apply} method on the key function throws an exception then the element will\n","     * be treated as if it had a null key and not paired. (The first such exception will be noted in\n","     * the failure message.)\n","     *\n","     * <p>Note that calling this method makes no difference to whether a test passes or fails, it\n","     * just improves the message if it fails.\n","     */\n","    public UsingCorrespondence<A, E> displayingDiffsPairedBy(Function<? super E, ?> keyFunction) {\n","      @SuppressWarnings(\"unchecked\") // throwing ClassCastException is the correct behaviour\n","      Function<? super A, ?> actualKeyFunction = (Function<? super A, ?>) keyFunction;\n","      return displayingDiffsPairedBy(actualKeyFunction, keyFunction);\n","    }\n","\n","    /**\n","     * Specifies a way to pair up unexpected and missing elements in the message when an assertion\n","     * fails. For example:\n","     *\n","     * <pre>{@code\n","     * assertThat(actualFoos)\n","     *     .comparingElementsUsing(FOO_BAR_CORRESPONDENCE)\n","     *     .displayingDiffsPairedBy(Foo::getId, Bar::getFooId)\n","     *     .containsExactlyElementsIn(expectedBar);\n","     * }</pre>\n","     *\n","     * <p>On assertions where it makes sense to do so, the elements are paired as follows: the\n","     * unexpected elements are keyed by {@code actualKeyFunction}, the missing elements are keyed by\n","     * {@code expectedKeyFunction}, and if an unexpected element and a missing element have the same\n","     * non-null key then the they are paired up. (Elements with null keys are not paired.) The\n","     * failure message will show paired elements together, and a diff will be shown if the {@link\n","     * Correspondence#formatDiff} method returns non-null.\n","     *\n","     * <p>The expected elements given in the assertion should be uniquely keyed by {@code\n","     * expectedKeyFunction}. If multiple missing elements have the same key then the pairing will be\n","     * skipped.\n","     *\n","     * <p>Useful key functions will have the property that key equality is less strict than the\n","     * correspondence, i.e. given {@code actual} and {@code expected} values with keys {@code\n","     * actualKey} and {@code expectedKey}, if {@code correspondence.compare(actual, expected)} is\n","     * true then it is guaranteed that {@code actualKey} is equal to {@code expectedKey}, but there\n","     * are cases where {@code actualKey} is equal to {@code expectedKey} but {@code\n","     * correspondence.compare(actual, expected)} is false.\n","     *\n","     * <p>If the {@code apply} method on either of the key functions throws an exception then the\n","     * element will be treated as if it had a null key and not paired. (The first such exception\n","     * will be noted in the failure message.)\n","     *\n","     * <p>Note that calling this method makes no difference to whether a test passes or fails, it\n","     * just improves the message if it fails.\n","     */\n","    public UsingCorrespondence<A, E> displayingDiffsPairedBy(\n","        Function<? super A, ?> actualKeyFunction, Function<? super E, ?> expectedKeyFunction) {\n","      return new UsingCorrespondence<>(\n","          subject, correspondence, new Pairer(actualKeyFunction, expectedKeyFunction));\n","    }\n","\n","    /**\n","     * Checks that the subject contains at least one element that corresponds to the given expected\n","     * element.\n","     */\n","    /*\n","     * TODO(cpovirk): Do we want @Nullable on usages of E? Probably not, since it could throw errors\n","     * during comparisons? Or maybe we should take the risk for user convenience? If we make\n","     * changes, also make them in MapSubject, MultimapSubject, and possibly others.\n","     */\n","    public void contains(E expected) {\n","      Correspondence.ExceptionStore exceptions = Correspondence.ExceptionStore.forIterable();\n","      for (A actual : getCastActual()) {\n","        if (correspondence.safeCompare(actual, expected, exceptions)) {\n","          // Found a match, but we still need to fail if we hit an exception along the way.\n","          if (exceptions.hasCompareException()) {\n","            subject.failWithoutActual(\n","                ImmutableList.<Fact>builder()\n","                    .addAll(exceptions.describeAsMainCause())\n","                    .add(fact(\"expected to contain\", expected))\n","                    .addAll(correspondence.describeForIterable())\n","                    .add(fact(\"found match (but failing because of exception)\", actual))\n","                    .add(subject.fullContents())\n","                    .build());\n","          }\n","          return;\n","        }\n","      }\n","      // Found no match. Fail, reporting elements that have the correct key if there are any.\n","      if (pairer.isPresent()) {\n","        List<A> keyMatches = pairer.get().pairOne(expected, getCastActual(), exceptions);\n","        if (!keyMatches.isEmpty()) {\n","          subject.failWithoutActual(\n","              ImmutableList.<Fact>builder()\n","                  .add(fact(\"expected to contain\", expected))\n","                  .addAll(correspondence.describeForIterable())\n","                  .add(simpleFact(\"but did not\"))\n","                  .addAll(\n","                      formatExtras(\n","                          \"though it did contain elements with correct key\",\n","                          expected,\n","                          keyMatches,\n","                          exceptions))\n","                  .add(simpleFact(\"---\"))\n","                  .add(subject.fullContents())\n","                  .addAll(exceptions.describeAsAdditionalInfo())\n","                  .build());\n","          return;\n","        }\n","      }\n","      subject.failWithoutActual(\n","          ImmutableList.<Fact>builder()\n","              .add(fact(\"expected to contain\", expected))\n","              .addAll(correspondence.describeForIterable())\n","              .add(subject.butWas())\n","              .addAll(exceptions.describeAsAdditionalInfo())\n","              .build());\n","    }\n","\n","    /** Checks that none of the actual elements correspond to the given element. */\n","    public void doesNotContain(E excluded) {\n","      Correspondence.ExceptionStore exceptions = Correspondence.ExceptionStore.forIterable();\n","      List<A> matchingElements = new ArrayList<>();\n","      for (A actual : getCastActual()) {\n","        if (correspondence.safeCompare(actual, excluded, exceptions)) {\n","          matchingElements.add(actual);\n","        }\n","      }\n","      // Fail if we found any matches.\n","      if (!matchingElements.isEmpty()) {\n","        subject.failWithoutActual(\n","            ImmutableList.<Fact>builder()\n","                .add(fact(\"expected not to contain\", excluded))\n","                .addAll(correspondence.describeForIterable())\n","                .add(fact(\"but contained\", countDuplicates(matchingElements)))\n","                .add(subject.fullContents())\n","                .addAll(exceptions.describeAsAdditionalInfo())\n","                .build());\n","        return;\n","      }\n","      // Found no match, but we still need to fail if we hit an exception along the way.\n","      if (exceptions.hasCompareException()) {\n","        subject.failWithoutActual(\n","            ImmutableList.<Fact>builder()\n","                .addAll(exceptions.describeAsMainCause())\n","                .add(fact(\"expected not to contain\", excluded))\n","                .addAll(correspondence.describeForIterable())\n","                .add(simpleFact(\"found no match (but failing because of exception)\"))\n","                .add(subject.fullContents())\n","                .build());\n","      }\n","    }\n","\n","    /**\n","     * Checks that subject contains exactly elements that correspond to the expected elements, i.e.\n","     * that there is a 1:1 mapping between the actual elements and the expected elements where each\n","     * pair of elements correspond.\n","     *\n","     * <p>To also test that the contents appear in the given order, make a call to {@code inOrder()}\n","     * on the object returned by this method.\n","     *\n","     * <p>To test that the iterable contains the elements corresponding to those in an array, prefer\n","     * {@link #containsExactlyElementsIn(Object[])}. It makes clear that the given array is a list\n","     * of elements, not an element itself. This helps human readers and avoids a compiler warning.\n","     */\n","    @SafeVarargs\n","    @CanIgnoreReturnValue\n","    public final Ordered containsExactly(@Nullable E @Nullable ... expected) {\n","      return containsExactlyElementsIn(\n","          (expected == null) ? newArrayList((E) null) : asList(expected));\n","    }\n","\n","    /**\n","     * Checks that subject contains exactly elements that correspond to the expected elements, i.e.\n","     * that there is a 1:1 mapping between the actual elements and the expected elements where each\n","     * pair of elements correspond.\n","     *\n","     * <p>To also test that the contents appear in the given order, make a call to {@code inOrder()}\n","     * on the object returned by this method.\n","     */\n","    @CanIgnoreReturnValue\n","    public Ordered containsExactlyElementsIn(@Nullable Iterable<? extends E> expected) {\n","      List<A> actualList = iterableToList(getCastActual());\n","      List<? extends E> expectedList = iterableToList(checkNotNull(expected));\n","\n","      if (expectedList.isEmpty()) {\n","        if (actualList.isEmpty()) {\n","          return IN_ORDER;\n","        } else {\n","          subject.isEmpty(); // fails\n","          return ALREADY_FAILED;\n","        }\n","      }\n","\n","      // Check if the elements correspond in order. This allows the common case of a passing test\n","      // using inOrder() to complete in linear time.\n","      if (correspondInOrderExactly(actualList.iterator(), expectedList.iterator())) {\n","        return IN_ORDER;\n","      }\n","\n","      // We know they don't correspond in order, so we're going to have to do an any-order test.\n","      // Find a many:many mapping between the indexes of the elements which correspond, and check\n","      // it for completeness.\n","      // Exceptions from Correspondence.compare are stored and treated as if false was returned.\n","      Correspondence.ExceptionStore exceptions = Correspondence.ExceptionStore.forIterable();\n","      ImmutableSetMultimap<Integer, Integer> candidateMapping =\n","          findCandidateMapping(actualList, expectedList, exceptions);\n","      if (failIfCandidateMappingHasMissingOrExtra(\n","          actualList, expectedList, candidateMapping, exceptions)) {\n","        return ALREADY_FAILED;\n","      }\n","      // We know that every expected element maps to at least one actual element, and vice versa.\n","      // Find a maximal 1:1 mapping, and check it for completeness.\n","      ImmutableBiMap<Integer, Integer> maximalOneToOneMapping =\n","          findMaximalOneToOneMapping(candidateMapping);\n","      if (failIfOneToOneMappingHasMissingOrExtra(\n","          actualList, expectedList, maximalOneToOneMapping, exceptions)) {\n","        return ALREADY_FAILED;\n","      }\n","      // Check whether we caught any exceptions from Correspondence.compare. We do the any-order\n","      // assertions treating exceptions as if false was returned before this, because the failure\n","      // messages are normally more useful (e.g. reporting that the actual iterable contained an\n","      // unexpected null) but we are contractually obliged to throw here if the assertions passed.\n","      if (exceptions.hasCompareException()) {\n","        subject.failWithoutActual(\n","            ImmutableList.<Fact>builder()\n","                .addAll(exceptions.describeAsMainCause())\n","                .add(fact(\"expected\", expected))\n","                .addAll(correspondence.describeForIterable())\n","                .add(simpleFact(\"found all expected elements (but failing because of exception)\"))\n","                .add(subject.fullContents())\n","                .build());\n","        return ALREADY_FAILED;\n","      }\n","      // The 1:1 mapping is complete, so the test succeeds (but we know from above that the mapping\n","      // is not in order).\n","      return new Ordered() {\n","        @Override\n","        public void inOrder() {\n","          subject.failWithActual(\n","              ImmutableList.<Fact>builder()\n","                  .add(simpleFact(\"contents match, but order was wrong\"))\n","                  .add(fact(\"expected\", expected))\n","                  .addAll(correspondence.describeForIterable())\n","                  .build());\n","        }\n","      };\n","    }\n","\n","    /**\n","     * Checks that subject contains exactly elements that correspond to the expected elements, i.e.\n","     * that there is a 1:1 mapping between the actual elements and the expected elements where each\n","     * pair of elements correspond.\n","     *\n","     * <p>To also test that the contents appear in the given order, make a call to {@code inOrder()}\n","     * on the object returned by this method.\n","     */\n","    @CanIgnoreReturnValue\n","    @SuppressWarnings(\"AvoidObjectArrays\")\n","    public Ordered containsExactlyElementsIn(E @Nullable [] expected) {\n","      return containsExactlyElementsIn(asList(checkNotNull(expected)));\n","    }\n","\n","    /**\n","     * Returns whether the actual and expected iterators have the same number of elements and, when\n","     * iterated pairwise, every pair of actual and expected values satisfies the correspondence.\n","     * Returns false if any comparison threw an exception.\n","     */\n","    private boolean correspondInOrderExactly(\n","        Iterator<? extends A> actual, Iterator<? extends E> expected) {\n","      Correspondence.ExceptionStore exceptions = Correspondence.ExceptionStore.forIterable();\n","      while (actual.hasNext() && expected.hasNext()) {\n","        A actualElement = actual.next();\n","        E expectedElement = expected.next();\n","        // Return false if the elements didn't correspond, or if the correspondence threw an\n","        // exception. We'll fall back on the any-order assertion in this case.\n","        if (!correspondence.safeCompare(actualElement, expectedElement, exceptions)) {\n","          return false;\n","        }\n","      }\n","      // No need to check the ExceptionStore, as we'll already have returned false on any exception.\n","      return !(actual.hasNext() || expected.hasNext());\n","    }\n","\n","    /**\n","     * Given a list of actual elements and a list of expected elements, finds a many:many mapping\n","     * between actual and expected elements where a pair of elements maps if it satisfies the\n","     * correspondence. Returns this mapping as a multimap where the keys are indexes into the actual\n","     * list and the values are indexes into the expected list. Any exceptions are treated as if the\n","     * elements did not correspond, and the exception added to the store.\n","     */\n","    private ImmutableSetMultimap<Integer, Integer> findCandidateMapping(\n","        List<? extends A> actual,\n","        List<? extends E> expected,\n","        Correspondence.ExceptionStore exceptions) {\n","      ImmutableSetMultimap.Builder<Integer, Integer> mapping = ImmutableSetMultimap.builder();\n","      for (int actualIndex = 0; actualIndex < actual.size(); actualIndex++) {\n","        for (int expectedIndex = 0; expectedIndex < expected.size(); expectedIndex++) {\n","          if (correspondence.safeCompare(\n","              actual.get(actualIndex), expected.get(expectedIndex), exceptions)) {\n","            mapping.put(actualIndex, expectedIndex);\n","          }\n","        }\n","      }\n","      return mapping.build();\n","    }\n","\n","    /**\n","     * Given a list of actual elements, a list of expected elements, and a many:many mapping between\n","     * actual and expected elements specified as a multimap of indexes into the actual list to\n","     * indexes into the expected list, checks that every actual element maps to at least one\n","     * expected element and vice versa, and fails if this is not the case. Returns whether the\n","     * assertion failed.\n","     */\n","    private boolean failIfCandidateMappingHasMissingOrExtra(\n","        List<? extends A> actual,\n","        List<? extends E> expected,\n","        ImmutableSetMultimap<Integer, Integer> mapping,\n","        Correspondence.ExceptionStore exceptions) {\n","      List<? extends A> extra = findNotIndexed(actual, mapping.keySet());\n","      List<? extends E> missing = findNotIndexed(expected, mapping.inverse().keySet());\n","      if (!missing.isEmpty() || !extra.isEmpty()) {\n","        subject.failWithoutActual(\n","            ImmutableList.<Fact>builder()\n","                .addAll(describeMissingOrExtra(missing, extra, exceptions))\n","                .add(fact(\"expected\", expected))\n","                .addAll(correspondence.describeForIterable())\n","                .add(subject.butWas())\n","                .addAll(exceptions.describeAsAdditionalInfo())\n","                .build());\n","        return true;\n","      }\n","      return false;\n","    }\n","\n","    /**\n","     * Given a list of missing elements and a list of extra elements, at least one of which must be\n","     * non-empty, returns facts describing them. Exceptions from calling {@link\n","     * Correspondence#formatDiff} are stored in {@code exceptions}.\n","     */\n","    private ImmutableList<Fact> describeMissingOrExtra(\n","        List<? extends E> missing,\n","        List<? extends A> extra,\n","        Correspondence.ExceptionStore exceptions) {\n","      if (pairer.isPresent()) {\n","        Pairing pairing = pairer.get().pair(missing, extra, exceptions);\n","        if (pairing != null) {\n","          return describeMissingOrExtraWithPairing(pairing, exceptions);\n","        } else {\n","          return ImmutableList.<Fact>builder()\n","              .addAll(describeMissingOrExtraWithoutPairing(missing, extra))\n","              .add(\n","                  simpleFact(\n","                      \"a key function which does not uniquely key the expected elements was\"\n","                          + \" provided and has consequently been ignored\"))\n","              .build();\n","        }\n","      } else if (missing.size() == 1 && extra.size() >= 1) {\n","        return ImmutableList.<Fact>builder()\n","            .add(fact(\"missing (1)\", missing.get(0)))\n","            .addAll(formatExtras(\"unexpected\", missing.get(0), extra, exceptions))\n","            .add(simpleFact(\"---\"))\n","            .build();\n","      } else {\n","        return describeMissingOrExtraWithoutPairing(missing, extra);\n","      }\n","    }\n","\n","    private ImmutableList<Fact> describeMissingOrExtraWithoutPairing(\n","        List<? extends E> missing, List<? extends A> extra) {\n","      return makeElementFactsForBoth(\"missing\", missing, \"unexpected\", extra);\n","    }\n","\n","    private ImmutableList<Fact> describeMissingOrExtraWithPairing(\n","        Pairing pairing, Correspondence.ExceptionStore exceptions) {\n","      ImmutableList.Builder<Fact> facts = ImmutableList.builder();\n","      for (Object key : pairing.pairedKeysToExpectedValues.keySet()) {\n","        E missing = pairing.pairedKeysToExpectedValues.get(key);\n","        List<A> extras = pairing.pairedKeysToActualValues.get(key);\n","        facts.add(fact(\"for key\", key));\n","        facts.add(fact(\"missing\", missing));\n","        facts.addAll(formatExtras(\"unexpected\", missing, extras, exceptions));\n","        facts.add(simpleFact(\"---\"));\n","      }\n","      if (!pairing.unpairedActualValues.isEmpty() || !pairing.unpairedExpectedValues.isEmpty()) {\n","        facts.add(simpleFact(\"elements without matching keys:\"));\n","        facts.addAll(\n","            describeMissingOrExtraWithoutPairing(\n","                pairing.unpairedExpectedValues, pairing.unpairedActualValues));\n","      }\n","      return facts.build();\n","    }\n","\n","    private ImmutableList<Fact> formatExtras(\n","        String label,\n","        E missing,\n","        List<? extends A> extras,\n","        Correspondence.ExceptionStore exceptions) {\n","      List<@Nullable String> diffs = new ArrayList<>(extras.size());\n","      boolean hasDiffs = false;\n","      for (int i = 0; i < extras.size(); i++) {\n","        A extra = extras.get(i);\n","        String diff = correspondence.safeFormatDiff(extra, missing, exceptions);\n","        diffs.add(diff);\n","        if (diff != null) {\n","          hasDiffs = true;\n","        }\n","      }\n","      if (hasDiffs) {\n","        ImmutableList.Builder<Fact> extraFacts = ImmutableList.builder();\n","        extraFacts.add(simpleFact(lenientFormat(\"%s (%s)\", label, extras.size())));\n","        for (int i = 0; i < extras.size(); i++) {\n","          A extra = extras.get(i);\n","          extraFacts.add(fact(lenientFormat(\"#%s\", i + 1), extra));\n","          if (diffs.get(i) != null) {\n","            extraFacts.add(fact(\"diff\", diffs.get(i)));\n","          }\n","        }\n","        return extraFacts.build();\n","      } else {\n","        return ImmutableList.of(\n","            fact(lenientFormat(\"%s (%s)\", label, extras.size()), countDuplicates(extras)));\n","      }\n","    }\n","\n","    /**\n","     * Returns all the elements of the given list other than those with the given indexes. Assumes\n","     * that all the given indexes really are valid indexes into the list.\n","     */\n","    private <T extends @Nullable Object> List<T> findNotIndexed(\n","        List<T> list, Set<Integer> indexes) {\n","      if (indexes.size() == list.size()) {\n","        // If there are as many distinct valid indexes are there are elements in the list then every\n","        // index must be in there once.\n","        return asList();\n","      }\n","      List<T> notIndexed = newArrayList();\n","      for (int index = 0; index < list.size(); index++) {\n","        if (!indexes.contains(index)) {\n","          notIndexed.add(list.get(index));\n","        }\n","      }\n","      return notIndexed;\n","    }\n","\n","    /**\n","     * Given a many:many mapping between actual elements and expected elements, finds a 1:1 mapping\n","     * which is the subset of that many:many mapping which includes the largest possible number of\n","     * elements. The input and output mappings are each described as a map or multimap where the\n","     * keys are indexes into the actual list and the values are indexes into the expected list. If\n","     * there are multiple possible output mappings tying for the largest possible, this returns an\n","     * arbitrary one.\n","     */\n","    private ImmutableBiMap<Integer, Integer> findMaximalOneToOneMapping(\n","        ImmutableMultimap<Integer, Integer> edges) {\n","      /*\n","       * Finding this 1:1 mapping is analogous to finding a maximum cardinality bipartite matching\n","       * (https://en.wikipedia.org/wiki/Matching_(graph_theory)#In_unweighted_bipartite_graphs).\n","       *  - The two sets of elements together correspond to the vertices of a graph.\n","       *  - The many:many mapping corresponds to the edges of that graph.\n","       *  - The graph is therefore bipartite, with the two sets of elements corresponding to the two\n","       * parts.\n","       *  - A 1:1 mapping corresponds to a matching on that bipartite graph (aka an independent edge\n","       * set, i.e. a subset of the edges with no common vertices).\n","       *  - And the 1:1 mapping which includes the largest possible number of elements corresponds\n","       * to the maximum cardinality matching.\n","       *\n","       * So we'll apply a standard algorithm for doing maximum cardinality bipartite matching.\n","       */\n","      return GraphMatching.maximumCardinalityBipartiteMatching(edges);\n","    }\n","\n","    /**\n","     * Given a list of actual elements, a list of expected elements, and a 1:1 mapping between\n","     * actual and expected elements specified as a bimap of indexes into the actual list to indexes\n","     * into the expected list, checks that every actual element maps to an expected element and vice\n","     * versa, and fails if this is not the case. Returns whether the assertion failed.\n","     */\n","    private boolean failIfOneToOneMappingHasMissingOrExtra(\n","        List<? extends A> actual,\n","        List<? extends E> expected,\n","        BiMap<Integer, Integer> mapping,\n","        Correspondence.ExceptionStore exceptions) {\n","      List<? extends A> extra = findNotIndexed(actual, mapping.keySet());\n","      List<? extends E> missing = findNotIndexed(expected, mapping.values());\n","      if (!missing.isEmpty() || !extra.isEmpty()) {\n","        subject.failWithoutActual(\n","            ImmutableList.<Fact>builder()\n","                .add(\n","                    simpleFact(\n","                        \"in an assertion requiring a 1:1 mapping between the expected and the\"\n","                            + \" actual elements, each actual element matches as least one expected\"\n","                            + \" element, and vice versa, but there was no 1:1 mapping\"))\n","                .add(\n","                    simpleFact(\n","                        \"using the most complete 1:1 mapping (or one such mapping, if there is a\"\n","                            + \" tie)\"))\n","                .addAll(describeMissingOrExtra(missing, extra, exceptions))\n","                .add(fact(\"expected\", expected))\n","                .addAll(correspondence.describeForIterable())\n","                .add(subject.butWas())\n","                .addAll(exceptions.describeAsAdditionalInfo())\n","                .build());\n","        return true;\n","      }\n","      return false;\n","    }\n","\n","    /**\n","     * Checks that the subject contains elements that corresponds to all of the expected elements,\n","     * i.e. that there is a 1:1 mapping between any subset of the actual elements and the expected\n","     * elements where each pair of elements correspond.\n","     *\n","     * <p>To also test that the contents appear in the given order, make a call to {@code inOrder()}\n","     * on the object returned by this method. The elements must appear in the given order within the\n","     * subject, but they are not required to be consecutive.\n","     */\n","    @SafeVarargs\n","    @CanIgnoreReturnValue\n","    public final Ordered containsAtLeast(E first, E second, E @Nullable ... rest) {\n","      return containsAtLeastElementsIn(accumulate(first, second, rest));\n","    }\n","\n","    /**\n","     * Checks that the subject contains elements that corresponds to all of the expected elements,\n","     * i.e. that there is a 1:1 mapping between any subset of the actual elements and the expected\n","     * elements where each pair of elements correspond.\n","     *\n","     * <p>To also test that the contents appear in the given order, make a call to {@code inOrder()}\n","     * on the object returned by this method. The elements must appear in the given order within the\n","     * subject, but they are not required to be consecutive.\n","     */\n","    @CanIgnoreReturnValue\n","    public Ordered containsAtLeastElementsIn(Iterable<? extends E> expected) {\n","      List<A> actualList = iterableToList(getCastActual());\n","      List<? extends E> expectedList = iterableToList(expected);\n","      // Check if the expected elements correspond in order to any subset of the actual elements.\n","      // This allows the common case of a passing test using inOrder() to complete in linear time.\n","      if (correspondInOrderAllIn(actualList.iterator(), expectedList.iterator())) {\n","        return IN_ORDER;\n","      }\n","      // We know they don't correspond in order, so we're going to have to do an any-order test.\n","      // Find a many:many mapping between the indexes of the elements which correspond, and check\n","      // it for completeness.\n","      Correspondence.ExceptionStore exceptions = Correspondence.ExceptionStore.forIterable();\n","      ImmutableSetMultimap<Integer, Integer> candidateMapping =\n","          findCandidateMapping(actualList, expectedList, exceptions);\n","      if (failIfCandidateMappingHasMissing(\n","          actualList, expectedList, candidateMapping, exceptions)) {\n","        return ALREADY_FAILED;\n","      }\n","      // We know that every expected element maps to at least one actual element, and vice versa.\n","      // Find a maximal 1:1 mapping, and check it for completeness.\n","      ImmutableBiMap<Integer, Integer> maximalOneToOneMapping =\n","          findMaximalOneToOneMapping(candidateMapping);\n","      if (failIfOneToOneMappingHasMissing(\n","          actualList, expectedList, maximalOneToOneMapping, exceptions)) {\n","        return ALREADY_FAILED;\n","      }\n","      // Check whether we caught any exceptions from Correspondence.compare. As with\n","      // containsExactlyElementIn, we do the any-order assertions treating exceptions as if false\n","      // was returned before this, but we are contractually obliged to throw here if the assertions\n","      // passed.\n","      if (exceptions.hasCompareException()) {\n","        subject.failWithoutActual(\n","            ImmutableList.<Fact>builder()\n","                .addAll(exceptions.describeAsMainCause())\n","                .add(fact(\"expected to contain at least\", expected))\n","                .addAll(correspondence.describeForIterable())\n","                .add(simpleFact(\"found all expected elements (but failing because of exception)\"))\n","                .add(subject.fullContents())\n","                .build());\n","        return ALREADY_FAILED;\n","      }\n","      // The 1:1 mapping maps all the expected elements, so the test succeeds (but we know from\n","      // above that the mapping is not in order).\n","      return new Ordered() {\n","        @Override\n","        public void inOrder() {\n","          subject.failWithActual(\n","              ImmutableList.<Fact>builder()\n","                  .add(simpleFact(\"required elements were all found, but order was wrong\"))\n","                  .add(fact(\"expected order for required elements\", expected))\n","                  .addAll(correspondence.describeForIterable())\n","                  .build());\n","        }\n","      };\n","    }\n","\n","    /**\n","     * Checks that the subject contains elements that corresponds to all of the expected elements,\n","     * i.e. that there is a 1:1 mapping between any subset of the actual elements and the expected\n","     * elements where each pair of elements correspond.\n","     *\n","     * <p>To also test that the contents appear in the given order, make a call to {@code inOrder()}\n","     * on the object returned by this method. The elements must appear in the given order within the\n","     * subject, but they are not required to be consecutive.\n","     */\n","    @CanIgnoreReturnValue\n","    @SuppressWarnings(\"AvoidObjectArrays\")\n","    public Ordered containsAtLeastElementsIn(E[] expected) {\n","      return containsAtLeastElementsIn(asList(expected));\n","    }\n","\n","    /**\n","     * Returns whether all the elements of the expected iterator and any subset of the elements of\n","     * the actual iterator can be paired up in order, such that every pair of actual and expected\n","     * elements satisfies the correspondence. Returns false if any comparison threw an exception.\n","     */\n","    private boolean correspondInOrderAllIn(\n","        Iterator<? extends A> actual, Iterator<? extends E> expected) {\n","      // We take a greedy approach here, iterating through the expected elements and pairing each\n","      // with the first applicable actual element. This is fine for the in-order test, since there's\n","      // no way that paring an expected element with a later actual element permits a solution which\n","      // couldn't be achieved by pairing it with the first. (For the any-order test, we may want to\n","      // pair an expected element with a later actual element so that we can pair the earlier actual\n","      // element with a later expected element, but that doesn't apply here.)\n","      Correspondence.ExceptionStore exceptions = Correspondence.ExceptionStore.forIterable();\n","      while (expected.hasNext()) {\n","        E expectedElement = expected.next();\n","        // Return false if we couldn't find the expected exception, or if the correspondence threw\n","        // an exception. We'll fall back on the any-order assertion in this case.\n","        if (!findCorresponding(actual, expectedElement, exceptions)\n","            || exceptions.hasCompareException()) {\n","          return false;\n","        }\n","      }\n","      return true;\n","    }\n","\n","    /**\n","     * Advances the actual iterator looking for an element which corresponds to the expected\n","     * element. Returns whether or not it finds one.\n","     */\n","    private boolean findCorresponding(\n","        Iterator<? extends A> actual, E expectedElement, Correspondence.ExceptionStore exceptions) {\n","      while (actual.hasNext()) {\n","        A actualElement = actual.next();\n","        if (correspondence.safeCompare(actualElement, expectedElement, exceptions)) {\n","          return true;\n","        }\n","      }\n","      return false;\n","    }\n","\n","    /**\n","     * Given a list of actual elements, a list of expected elements, and a many:many mapping between\n","     * actual and expected elements specified as a multimap of indexes into an actual list to\n","     * indexes into the expected list, checks that every expected element maps to at least one\n","     * actual element, and fails if this is not the case. Actual elements which do not map to any\n","     * expected elements are ignored.\n","     */\n","    private boolean failIfCandidateMappingHasMissing(\n","        List<? extends A> actual,\n","        List<? extends E> expected,\n","        ImmutableSetMultimap<Integer, Integer> mapping,\n","        Correspondence.ExceptionStore exceptions) {\n","      List<? extends E> missing = findNotIndexed(expected, mapping.inverse().keySet());\n","      if (!missing.isEmpty()) {\n","        List<? extends A> extra = findNotIndexed(actual, mapping.keySet());\n","        subject.failWithoutActual(\n","            ImmutableList.<Fact>builder()\n","                .addAll(describeMissing(missing, extra, exceptions))\n","                .add(fact(\"expected to contain at least\", expected))\n","                .addAll(correspondence.describeForIterable())\n","                .add(subject.butWas())\n","                .addAll(exceptions.describeAsAdditionalInfo())\n","                .build());\n","        return true;\n","      }\n","      return false;\n","    }\n","\n","    /**\n","     * Given a list of missing elements, which must be non-empty, and a list of extra elements,\n","     * returns a list of facts describing the missing elements, diffing against the extra ones where\n","     * appropriate.\n","     */\n","    private ImmutableList<Fact> describeMissing(\n","        List<? extends E> missing,\n","        List<? extends A> extra,\n","        Correspondence.ExceptionStore exceptions) {\n","      if (pairer.isPresent()) {\n","        Pairing pairing = pairer.get().pair(missing, extra, exceptions);\n","        if (pairing != null) {\n","          return describeMissingWithPairing(pairing, exceptions);\n","        } else {\n","          return ImmutableList.<Fact>builder()\n","              .addAll(describeMissingWithoutPairing(missing))\n","              .add(\n","                  simpleFact(\n","                      \"a key function which does not uniquely key the expected elements was\"\n","                          + \" provided and has consequently been ignored\"))\n","              .build();\n","        }\n","      } else {\n","        // N.B. For containsAny, we do not treat having exactly one missing element as a special\n","        // case (as we do for containsExactly). Showing extra elements has lower utility for\n","        // containsAny (because they are allowed by the assertion) so we only show them if the user\n","        // has explicitly opted in by specifying a pairing.\n","        return describeMissingWithoutPairing(missing);\n","      }\n","    }\n","\n","    private ImmutableList<Fact> describeMissingWithoutPairing(List<? extends E> missing) {\n","      return makeElementFactsForBoth(\"missing\", missing, \"unexpected\", ImmutableList.of());\n","    }\n","\n","    private ImmutableList<Fact> describeMissingWithPairing(\n","        Pairing pairing, Correspondence.ExceptionStore exceptions) {\n","      ImmutableList.Builder<Fact> facts = ImmutableList.builder();\n","      for (Object key : pairing.pairedKeysToExpectedValues.keySet()) {\n","        E missing = pairing.pairedKeysToExpectedValues.get(key);\n","        List<A> extras = pairing.pairedKeysToActualValues.get(key);\n","        facts.add(fact(\"for key\", key));\n","        facts.add(fact(\"missing\", missing));\n","        facts.addAll(\n","            formatExtras(\"did contain elements with that key\", missing, extras, exceptions));\n","        facts.add(simpleFact(\"---\"));\n","      }\n","      if (!pairing.unpairedExpectedValues.isEmpty()) {\n","        facts.add(simpleFact(\"elements without matching keys:\"));\n","        facts.addAll(describeMissingWithoutPairing(pairing.unpairedExpectedValues));\n","      }\n","      return facts.build();\n","    }\n","\n","    /**\n","     * Given a list of expected elements, and a 1:1 mapping between actual and expected elements\n","     * specified as a bimap of indexes into an actual list to indexes into the expected list, checks\n","     * that every expected element maps to an actual element. Actual elements which do not map to\n","     * any expected elements are ignored.\n","     */\n","    private boolean failIfOneToOneMappingHasMissing(\n","        List<? extends A> actual,\n","        List<? extends E> expected,\n","        BiMap<Integer, Integer> mapping,\n","        Correspondence.ExceptionStore exceptions) {\n","      List<? extends E> missing = findNotIndexed(expected, mapping.values());\n","      if (!missing.isEmpty()) {\n","        List<? extends A> extra = findNotIndexed(actual, mapping.keySet());\n","        subject.failWithoutActual(\n","            ImmutableList.<Fact>builder()\n","                .add(\n","                    simpleFact(\n","                        \"in an assertion requiring a 1:1 mapping between the expected and a subset\"\n","                            + \" of the actual elements, each actual element matches as least one\"\n","                            + \" expected element, and vice versa, but there was no 1:1 mapping\"))\n","                .add(\n","                    simpleFact(\n","                        \"using the most complete 1:1 mapping (or one such mapping, if there is a\"\n","                            + \" tie)\"))\n","                .addAll(describeMissing(missing, extra, exceptions))\n","                .add(fact(\"expected to contain at least\", expected))\n","                .addAll(correspondence.describeForIterable())\n","                .add(subject.butWas())\n","                .addAll(exceptions.describeAsAdditionalInfo())\n","                .build());\n","        return true;\n","      }\n","      return false;\n","    }\n","\n","    /**\n","     * Checks that the subject contains at least one element that corresponds to at least one of the\n","     * expected elements.\n","     */\n","    @SafeVarargs\n","    public final void containsAnyOf(E first, E second, E @Nullable ... rest) {\n","      containsAnyIn(accumulate(first, second, rest));\n","    }\n","\n","    /**\n","     * Checks that the subject contains at least one element that corresponds to at least one of the\n","     * expected elements.\n","     */\n","    public void containsAnyIn(Iterable<? extends E> expected) {\n","      Collection<A> actual = iterableToCollection(getCastActual());\n","      Correspondence.ExceptionStore exceptions = Correspondence.ExceptionStore.forIterable();\n","      for (E expectedItem : expected) {\n","        for (A actualItem : actual) {\n","          if (correspondence.safeCompare(actualItem, expectedItem, exceptions)) {\n","            // Found a match, but we still need to fail if we hit an exception along the way.\n","            if (exceptions.hasCompareException()) {\n","              subject.failWithoutActual(\n","                  ImmutableList.<Fact>builder()\n","                      .addAll(exceptions.describeAsMainCause())\n","                      .add(fact(\"expected to contain any of\", expected))\n","                      .addAll(correspondence.describeForIterable())\n","                      .add(simpleFact(\"found match (but failing because of exception)\"))\n","                      .add(subject.fullContents())\n","                      .build());\n","            }\n","            return;\n","          }\n","        }\n","      }\n","      // Found no match. Fail, reporting elements that have a correct key if there are any.\n","      if (pairer.isPresent()) {\n","        Pairing pairing =\n","            pairer.get().pair(iterableToList(expected), iterableToList(actual), exceptions);\n","        if (pairing != null) {\n","          if (!pairing.pairedKeysToExpectedValues.isEmpty()) {\n","            subject.failWithoutActual(\n","                ImmutableList.<Fact>builder()\n","                    .add(fact(\"expected to contain any of\", expected))\n","                    .addAll(correspondence.describeForIterable())\n","                    .add(subject.butWas())\n","                    .addAll(describeAnyMatchesByKey(pairing, exceptions))\n","                    .addAll(exceptions.describeAsAdditionalInfo())\n","                    .build());\n","          } else {\n","            subject.failWithoutActual(\n","                ImmutableList.<Fact>builder()\n","                    .add(fact(\"expected to contain any of\", expected))\n","                    .addAll(correspondence.describeForIterable())\n","                    .add(subject.butWas())\n","                    .add(simpleFact(\"it does not contain any matches by key, either\"))\n","                    .addAll(exceptions.describeAsAdditionalInfo())\n","                    .build());\n","          }\n","        } else {\n","          subject.failWithoutActual(\n","              ImmutableList.<Fact>builder()\n","                  .add(fact(\"expected to contain any of\", expected))\n","                  .addAll(correspondence.describeForIterable())\n","                  .add(subject.butWas())\n","                  .add(\n","                      simpleFact(\n","                          \"a key function which does not uniquely key the expected elements was\"\n","                              + \" provided and has consequently been ignored\"))\n","                  .addAll(exceptions.describeAsAdditionalInfo())\n","                  .build());\n","        }\n","      } else {\n","        subject.failWithoutActual(\n","            ImmutableList.<Fact>builder()\n","                .add(fact(\"expected to contain any of\", expected))\n","                .addAll(correspondence.describeForIterable())\n","                .add(subject.butWas())\n","                .addAll(exceptions.describeAsAdditionalInfo())\n","                .build());\n","      }\n","    }\n","\n","    /**\n","     * Checks that the subject contains at least one element that corresponds to at least one of the\n","     * expected elements.\n","     */\n","    @SuppressWarnings(\"AvoidObjectArrays\")\n","    public void containsAnyIn(E[] expected) {\n","      containsAnyIn(asList(expected));\n","    }\n","\n","    private ImmutableList<Fact> describeAnyMatchesByKey(\n","        Pairing pairing, Correspondence.ExceptionStore exceptions) {\n","      ImmutableList.Builder<Fact> facts = ImmutableList.builder();\n","      for (Object key : pairing.pairedKeysToExpectedValues.keySet()) {\n","        E expected = pairing.pairedKeysToExpectedValues.get(key);\n","        List<A> got = pairing.pairedKeysToActualValues.get(key);\n","        facts.add(fact(\"for key\", key));\n","        facts.add(fact(\"expected any of\", expected));\n","        facts.addAll(formatExtras(\"but got\", expected, got, exceptions));\n","        facts.add(simpleFact(\"---\"));\n","      }\n","      return facts.build();\n","    }\n","\n","    /**\n","     * Checks that the subject contains no elements that correspond to any of the given elements.\n","     * (Duplicates are irrelevant to this test, which fails if any of the subject elements\n","     * correspond to any of the given elements.)\n","     */\n","    @SafeVarargs\n","    public final void containsNoneOf(\n","        E firstExcluded, E secondExcluded, E @Nullable ... restOfExcluded) {\n","      containsNoneIn(accumulate(firstExcluded, secondExcluded, restOfExcluded));\n","    }\n","\n","    /**\n","     * Checks that the subject contains no elements that correspond to any of the given elements.\n","     * (Duplicates are irrelevant to this test, which fails if any of the subject elements\n","     * correspond to any of the given elements.)\n","     */\n","    public void containsNoneIn(Iterable<? extends E> excluded) {\n","      Collection<A> actual = iterableToCollection(getCastActual());\n","      ListMultimap<E, A> present = LinkedListMultimap.create();\n","      Correspondence.ExceptionStore exceptions = Correspondence.ExceptionStore.forIterable();\n","      for (E excludedItem : Sets.newLinkedHashSet(excluded)) {\n","        for (A actualItem : actual) {\n","          if (correspondence.safeCompare(actualItem, excludedItem, exceptions)) {\n","            present.put(excludedItem, actualItem);\n","          }\n","        }\n","      }\n","      // Fail if we found any matches.\n","      if (!present.isEmpty()) {\n","        ImmutableList.Builder<Fact> facts = ImmutableList.builder();\n","        facts.add(fact(\"expected not to contain any of\", annotateEmptyStrings(excluded)));\n","        facts.addAll(correspondence.describeForIterable());\n","        for (E excludedItem : present.keySet()) {\n","          List<A> actualItems = present.get(excludedItem);\n","          facts.add(fact(\"but contained\", annotateEmptyStrings(actualItems)));\n","          facts.add(fact(\"corresponding to\", excludedItem));\n","          facts.add(simpleFact(\"---\"));\n","        }\n","        facts.add(subject.fullContents());\n","        facts.addAll(exceptions.describeAsAdditionalInfo());\n","        subject.failWithoutActual(facts.build());\n","\n","        return;\n","      }\n","      // Found no match, but we still need to fail if we hit an exception along the way.\n","      if (exceptions.hasCompareException()) {\n","        subject.failWithoutActual(\n","            ImmutableList.<Fact>builder()\n","                .addAll(exceptions.describeAsMainCause())\n","                .add(fact(\"expected not to contain any of\", annotateEmptyStrings(excluded)))\n","                .addAll(correspondence.describeForIterable())\n","                .add(simpleFact(\"found no matches (but failing because of exception)\"))\n","                .add(subject.fullContents())\n","                .build());\n","      }\n","    }\n","\n","    /**\n","     * Checks that the subject contains no elements that correspond to any of the given elements.\n","     * (Duplicates are irrelevant to this test, which fails if any of the subject elements\n","     * correspond to any of the given elements.)\n","     */\n","    @SuppressWarnings(\"AvoidObjectArrays\")\n","    public void containsNoneIn(E[] excluded) {\n","      containsNoneIn(asList(excluded));\n","    }\n","\n","    @SuppressWarnings(\"unchecked\") // throwing ClassCastException is the correct behaviour\n","    private Iterable<A> getCastActual() {\n","      return (Iterable<A>) checkNotNull(subject.actual);\n","    }\n","\n","    // TODO(b/69154276): Consider commoning up some of the logic between IterableSubject.Pairer,\n","    // MapSubject.MapDifference, and MultimapSubject.difference(). We are likely to need something\n","    // similar again when we do the work to improve the failure messages from\n","    // MultimapSubject.UsingCorrespondence (because it won't be able to delegate to\n","    // IterableSubject.UsingCorrespondence like it does now). So it makes sense to do the\n","    // refactoring as part of that. Right now, we don't even know what Multimap is going to need.\n","\n","    /**\n","     * A class which knows how to pair the actual and expected elements (see {@link\n","     * #displayingDiffsPairedBy}).\n","     */\n","    private final class Pairer {\n","\n","      private final Function<? super A, ?> actualKeyFunction;\n","      private final Function<? super E, ?> expectedKeyFunction;\n","\n","      Pairer(Function<? super A, ?> actualKeyFunction, Function<? super E, ?> expectedKeyFunction) {\n","        this.actualKeyFunction = actualKeyFunction;\n","        this.expectedKeyFunction = expectedKeyFunction;\n","      }\n","\n","      /**\n","       * Returns a {@link Pairing} of the given expected and actual values, or {@code null} if the\n","       * expected values are not uniquely keyed.\n","       */\n","      @Nullable Pairing pair(\n","          List<? extends E> expectedValues,\n","          List<? extends A> actualValues,\n","          Correspondence.ExceptionStore exceptions) {\n","        Pairing pairing = new Pairing();\n","\n","        // Populate expectedKeys with the keys of the corresponding elements of expectedValues.\n","        // We do this ahead of time to avoid invoking the key function twice for each element.\n","        List<@Nullable Object> expectedKeys = new ArrayList<>(expectedValues.size());\n","        for (E expected : expectedValues) {\n","          expectedKeys.add(expectedKey(expected, exceptions));\n","        }\n","\n","        // Populate pairedKeysToExpectedValues with *all* the expected values with non-null keys.\n","        // We will remove the unpaired keys later. Return null if we find a duplicate key.\n","        for (int i = 0; i < expectedValues.size(); i++) {\n","          E expected = expectedValues.get(i);\n","          Object key = expectedKeys.get(i);\n","          if (key != null) {\n","            if (pairing.pairedKeysToExpectedValues.containsKey(key)) {\n","              return null;\n","            } else {\n","              pairing.pairedKeysToExpectedValues.put(key, expected);\n","            }\n","          }\n","        }\n","\n","        // Populate pairedKeysToActualValues and unpairedActualValues.\n","        for (A actual : actualValues) {\n","          Object key = actualKey(actual, exceptions);\n","          if (pairing.pairedKeysToExpectedValues.containsKey(key)) {\n","            pairing.pairedKeysToActualValues.put(checkNotNull(key), actual);\n","          } else {\n","            pairing.unpairedActualValues.add(actual);\n","          }\n","        }\n","\n","        // Populate unpairedExpectedValues and remove unpaired keys from pairedKeysToExpectedValues.\n","        for (int i = 0; i < expectedValues.size(); i++) {\n","          E expected = expectedValues.get(i);\n","          Object key = expectedKeys.get(i);\n","          if (!pairing.pairedKeysToActualValues.containsKey(key)) {\n","            pairing.unpairedExpectedValues.add(expected);\n","            pairing.pairedKeysToExpectedValues.remove(key);\n","          }\n","        }\n","\n","        return pairing;\n","      }\n","\n","      List<A> pairOne(\n","          E expectedValue,\n","          Iterable<? extends A> actualValues,\n","          Correspondence.ExceptionStore exceptions) {\n","        Object key = expectedKey(expectedValue, exceptions);\n","        List<A> matches = new ArrayList<>();\n","        if (key != null) {\n","          for (A actual : actualValues) {\n","            if (key.equals(actualKey(actual, exceptions))) {\n","              matches.add(actual);\n","            }\n","          }\n","        }\n","        return matches;\n","      }\n","\n","      private @Nullable Object actualKey(A actual, Correspondence.ExceptionStore exceptions) {\n","        try {\n","          return actualKeyFunction.apply(actual);\n","        } catch (RuntimeException e) {\n","          exceptions.addActualKeyFunctionException(\n","              IterableSubject.UsingCorrespondence.Pairer.class, e, actual);\n","          return null;\n","        }\n","      }\n","\n","      private @Nullable Object expectedKey(E expected, Correspondence.ExceptionStore exceptions) {\n","        try {\n","          return expectedKeyFunction.apply(expected);\n","        } catch (RuntimeException e) {\n","          exceptions.addExpectedKeyFunctionException(\n","              IterableSubject.UsingCorrespondence.Pairer.class, e, expected);\n","          return null;\n","        }\n","      }\n","    }\n","\n","    /** A description of a pairing between expected and actual values. N.B. This is mutable. */\n","    private final class Pairing {\n","\n","      /**\n","       * Map from keys used in the pairing to the expected value with that key. Iterates in the\n","       * order the expected values appear in the input. Will never contain null keys.\n","       */\n","      private final Map<Object, E> pairedKeysToExpectedValues = new LinkedHashMap<>();\n","\n","      /**\n","       * Multimap from keys used in the pairing to the actual values with that key. Keys iterate in\n","       * the order they first appear in the actual values in the input, and values for each key\n","       * iterate in the order they appear too. Will never contain null keys.\n","       */\n","      private final ListMultimap<Object, A> pairedKeysToActualValues = LinkedListMultimap.create();\n","\n","      /**\n","       * List of the expected values not used in the pairing. Iterates in the order they appear in\n","       * the input.\n","       */\n","      private final List<E> unpairedExpectedValues = newArrayList();\n","\n","      /**\n","       * List of the actual values not used in the pairing. Iterates in the order they appear in the\n","       * input.\n","       */\n","      private final List<A> unpairedActualValues = newArrayList();\n","    }\n","  }\n","}\n"],"test_content":["/*\n"," * Copyright (c) 2011 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.truth.Truth.assertThat;\n","import static java.lang.String.CASE_INSENSITIVE_ORDER;\n","import static java.util.Arrays.asList;\n","import static org.junit.Assert.fail;\n","\n","import com.google.common.collect.ImmutableList;\n","import com.google.common.collect.Iterators;\n","import java.util.Comparator;\n","import java.util.Iterator;\n","import java.util.List;\n","import java.util.TreeSet;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import org.junit.runners.JUnit4;\n","\n","/**\n"," * Tests for {@link IterableSubject} APIs, excluding those that use {@link Correspondence} (which\n"," * are tested in {@link IterableSubjectCorrespondenceTest}.\n"," *\n"," * @author David Saff\n"," * @author Christian Gruber (cgruber@israfil.net)\n"," */\n","@RunWith(JUnit4.class)\n","// \"Iterable\" is specific enough to establish that we're testing IterableSubject.\n","@SuppressWarnings(\"PreferredInterfaceType\")\n","public class IterableSubjectTest extends BaseSubjectTestCase {\n","\n","  @Test\n","  public void hasSize() {\n","    assertThat(ImmutableList.of(1, 2, 3)).hasSize(3);\n","  }\n","\n","  @Test\n","  @SuppressWarnings({\"TruthIterableIsEmpty\", \"IsEmptyTruth\"})\n","  public void hasSizeZero() {\n","    assertThat(ImmutableList.of()).hasSize(0);\n","  }\n","\n","  @Test\n","  public void hasSizeFails() {\n","    expectFailureWhenTestingThat(ImmutableList.of(1, 2, 3)).hasSize(4);\n","    assertFailureValue(\"value of\", \"iterable.size()\");\n","  }\n","\n","  @Test\n","  public void hasSizeNegative() {\n","    try {\n","      assertThat(ImmutableList.of(1, 2, 3)).hasSize(-1);\n","      fail();\n","    } catch (IllegalArgumentException expected) {\n","    }\n","  }\n","\n","  @Test\n","  public void iterableContains() {\n","    assertThat(asList(1, 2, 3)).contains(1);\n","  }\n","\n","  @Test\n","  public void iterableContainsWithNull() {\n","    assertThat(asList(1, null, 3)).contains(null);\n","  }\n","\n","  @Test\n","  public void iterableContainsFailsWithSameToString() {\n","    expectFailureWhenTestingThat(asList(1L, 2L, 3L, 2L)).contains(2);\n","    assertFailureKeys(\n","        \"expected to contain\",\n","        \"an instance of\",\n","        \"but did not\",\n","        \"though it did contain\",\n","        \"full contents\");\n","    assertFailureValue(\"expected to contain\", \"2\");\n","    assertFailureValue(\"an instance of\", \"java.lang.Integer\");\n","    assertFailureValue(\"though it did contain\", \"[2 [2 copies]] (java.lang.Long)\");\n","    assertFailureValue(\"full contents\", \"[1, 2, 3, 2]\");\n","  }\n","\n","  @Test\n","  public void iterableContainsFailsWithSameToStringAndNull() {\n","    expectFailureWhenTestingThat(asList(1, \"null\")).contains(null);\n","    assertFailureValue(\"an instance of\", \"null type\");\n","  }\n","\n","  @Test\n","  public void iterableContainsFailure() {\n","    expectFailureWhenTestingThat(asList(1, 2, 3)).contains(5);\n","    assertFailureKeys(\"expected to contain\", \"but was\");\n","    assertFailureValue(\"expected to contain\", \"5\");\n","  }\n","\n","  @Test\n","  public void iterableDoesNotContain() {\n","    assertThat(asList(1, null, 3)).doesNotContain(5);\n","  }\n","\n","  @Test\n","  public void iterableDoesNotContainNull() {\n","    assertThat(asList(1, 2, 3)).doesNotContain(null);\n","  }\n","\n","  @Test\n","  public void iterableDoesNotContainFailure() {\n","    expectFailureWhenTestingThat(asList(1, 2, 3)).doesNotContain(2);\n","    assertFailureKeys(\"expected not to contain\", \"but was\");\n","    assertFailureValue(\"expected not to contain\", \"2\");\n","  }\n","\n","  @Test\n","  public void doesNotContainDuplicates() {\n","    assertThat(asList(1, 2, 3)).containsNoDuplicates();\n","  }\n","\n","  @Test\n","  public void doesNotContainDuplicatesMixedTypes() {\n","    assertThat(asList(1, 2, 2L, 3)).containsNoDuplicates();\n","  }\n","\n","  @Test\n","  public void doesNotContainDuplicatesFailure() {\n","    expectFailureWhenTestingThat(asList(1, 2, 2, 3)).containsNoDuplicates();\n","    assertFailureKeys(\"expected not to contain duplicates\", \"but contained\", \"full contents\");\n","    assertFailureValue(\"but contained\", \"[2 x 2]\");\n","    assertFailureValue(\"full contents\", \"[1, 2, 2, 3]\");\n","  }\n","\n","  @Test\n","  public void iterableContainsAnyOf() {\n","    assertThat(asList(1, 2, 3)).containsAnyOf(1, 5);\n","  }\n","\n","  @Test\n","  public void iterableContainsAnyOfWithNull() {\n","    assertThat(asList(1, null, 3)).containsAnyOf(null, 5);\n","  }\n","\n","  @Test\n","  public void iterableContainsAnyOfWithNullInThirdAndFinalPosition() {\n","    assertThat(asList(1, null, 3)).containsAnyOf(4, 5, (Integer) null);\n","  }\n","\n","  @Test\n","  public void iterableContainsAnyOfFailure() {\n","    expectFailureWhenTestingThat(asList(1, 2, 3)).containsAnyOf(5, 6, 0);\n","    assertFailureKeys(\"expected to contain any of\", \"but was\");\n","    assertFailureValue(\"expected to contain any of\", \"[5, 6, 0]\");\n","  }\n","\n","  @Test\n","  public void iterableContainsAnyOfFailsWithSameToStringAndHomogeneousList() {\n","    expectFailureWhenTestingThat(asList(1L, 2L, 3L)).containsAnyOf(2, 3);\n","    assertFailureKeys(\n","        \"expected to contain any of\", \"but did not\", \"though it did contain\", \"full contents\");\n","    assertFailureValue(\"expected to contain any of\", \"[2, 3] (java.lang.Integer)\");\n","    assertFailureValue(\"though it did contain\", \"[2, 3] (java.lang.Long)\");\n","    assertFailureValue(\"full contents\", \"[1, 2, 3]\");\n","  }\n","\n","  @Test\n","  public void iterableContainsAnyOfFailsWithSameToStringAndHomogeneousListWithDuplicates() {\n","    expectFailureWhenTestingThat(asList(3L, 3L)).containsAnyOf(2, 3, 3);\n","    assertFailureKeys(\n","        \"expected to contain any of\", \"but did not\", \"though it did contain\", \"full contents\");\n","    assertFailureValue(\"expected to contain any of\", \"[2, 3 [2 copies]] (java.lang.Integer)\");\n","    assertFailureValue(\"though it did contain\", \"[3 [2 copies]] (java.lang.Long)\");\n","    assertFailureValue(\"full contents\", \"[3, 3]\");\n","  }\n","\n","  @Test\n","  public void iterableContainsAnyOfFailsWithSameToStringAndNullInSubject() {\n","    expectFailureWhenTestingThat(asList(null, \"abc\")).containsAnyOf(\"def\", \"null\");\n","    assertFailureKeys(\n","        \"expected to contain any of\", \"but did not\", \"though it did contain\", \"full contents\");\n","    assertFailureValue(\"expected to contain any of\", \"[def, null] (java.lang.String)\");\n","    assertFailureValue(\"though it did contain\", \"[null (null type)]\");\n","    assertFailureValue(\"full contents\", \"[null, abc]\");\n","  }\n","\n","  @Test\n","  public void iterableContainsAnyOfFailsWithSameToStringAndNullInExpectation() {\n","    expectFailureWhenTestingThat(asList(\"null\", \"abc\")).containsAnyOf(\"def\", null);\n","    assertFailureKeys(\n","        \"expected to contain any of\", \"but did not\", \"though it did contain\", \"full contents\");\n","    assertFailureValue(\"expected to contain any of\", \"[def (java.lang.String), null (null type)]\");\n","    assertFailureValue(\"though it did contain\", \"[null] (java.lang.String)\");\n","    assertFailureValue(\"full contents\", \"[null, abc]\");\n","  }\n","\n","  @Test\n","  public void iterableContainsAnyOfWithOneShotIterable() {\n","    List<Object> contents = asList(2, 1, \"b\");\n","    Iterable<Object> oneShot = new OneShotIterable<>(contents.iterator(), \"OneShotIterable\");\n","\n","    assertThat(oneShot).containsAnyOf(3, \"a\", 7, \"b\", 0);\n","  }\n","\n","  @Test\n","  public void iterableContainsAnyInIterable() {\n","    assertThat(asList(1, 2, 3)).containsAnyIn(asList(1, 10, 100));\n","\n","    expectFailureWhenTestingThat(asList(1, 2, 3)).containsAnyIn(asList(5, 6, 0));\n","    assertFailureKeys(\"expected to contain any of\", \"but was\");\n","    assertFailureValue(\"expected to contain any of\", \"[5, 6, 0]\");\n","  }\n","\n","  @Test\n","  public void iterableContainsAnyInArray() {\n","    assertThat(asList(1, 2, 3)).containsAnyIn(new Integer[] {1, 10, 100});\n","\n","    expectFailureWhenTestingThat(asList(1, 2, 3)).containsAnyIn(new Integer[] {5, 6, 0});\n","    assertFailureKeys(\"expected to contain any of\", \"but was\");\n","    assertFailureValue(\"expected to contain any of\", \"[5, 6, 0]\");\n","  }\n","\n","  @Test\n","  public void iterableContainsAtLeast() {\n","    assertThat(asList(1, 2, 3)).containsAtLeast(1, 2);\n","  }\n","\n","  @Test\n","  public void iterableContainsAtLeastWithMany() {\n","    assertThat(asList(1, 2, 3)).containsAtLeast(1, 2);\n","  }\n","\n","  @Test\n","  public void iterableContainsAtLeastWithDuplicates() {\n","    assertThat(asList(1, 2, 2, 2, 3)).containsAtLeast(2, 2);\n","  }\n","\n","  @Test\n","  public void iterableContainsAtLeastWithNull() {\n","    assertThat(asList(1, null, 3)).containsAtLeast(3, (Integer) null);\n","  }\n","\n","  @Test\n","  public void iterableContainsAtLeastWithNullAtThirdAndFinalPosition() {\n","    assertThat(asList(1, null, 3)).containsAtLeast(1, 3, (Object) null);\n","  }\n","\n","  /*\n","   * Test that we only call toString() if the assertion fails -- that is, not just if the elements\n","   * are out of order, but only if someone actually calls inOrder(). There are 2 reasons for this:\n","   *\n","   * 1. Calling toString() uses extra time and space. (To be fair, Iterable assertions often use a\n","   * lot of those already.)\n","   *\n","   * 2. Some toString() methods are buggy. Arguably we shouldn't accommodate these, especially since\n","   * those users are in for a nasty surprise if their tests actually fail someday, but I don't want\n","   * to bite that off now. (Maybe Fact should catch exceptions from toString()?)\n","   */\n","  @Test\n","  public void iterableContainsAtLeastElementsInOutOfOrderDoesNotStringify() {\n","    CountsToStringCalls o = new CountsToStringCalls();\n","    List<Object> actual = asList(o, 1);\n","    List<Object> expected = asList(1, o);\n","    assertThat(actual).containsAtLeastElementsIn(expected);\n","    assertThat(o.calls).isEqualTo(0);\n","    expectFailureWhenTestingThat(actual).containsAtLeastElementsIn(expected).inOrder();\n","    assertThat(o.calls).isGreaterThan(0);\n","  }\n","\n","  @Test\n","  public void iterableContainsAtLeastFailure() {\n","    expectFailureWhenTestingThat(asList(1, 2, 3)).containsAtLeast(1, 2, 4);\n","    assertFailureKeys(\"missing (1)\", \"---\", \"expected to contain at least\", \"but was\");\n","    assertFailureValue(\"missing (1)\", \"4\");\n","    assertFailureValue(\"expected to contain at least\", \"[1, 2, 4]\");\n","  }\n","\n","  @Test\n","  public void iterableContainsAtLeastWithExtras() {\n","    expectFailureWhenTestingThat(asList(\"y\", \"x\")).containsAtLeast(\"x\", \"y\", \"z\");\n","    assertFailureValue(\"missing (1)\", \"z\");\n","  }\n","\n","  @Test\n","  public void iterableContainsAtLeastWithExtraCopiesOfOutOfOrder() {\n","    expectFailureWhenTestingThat(asList(\"y\", \"x\")).containsAtLeast(\"x\", \"y\", \"y\");\n","    assertFailureValue(\"missing (1)\", \"y\");\n","  }\n","\n","  @Test\n","  public void iterableContainsAtLeastWithDuplicatesFailure() {\n","    expectFailureWhenTestingThat(asList(1, 2, 3)).containsAtLeast(1, 2, 2, 2, 3, 4);\n","    assertFailureValue(\"missing (3)\", \"2 [2 copies], 4\");\n","  }\n","\n","  /*\n","   * Slightly subtle test to ensure that if multiple equal elements are found\n","   * to be missing we only reference it once in the output message.\n","   */\n","  @Test\n","  public void iterableContainsAtLeastWithDuplicateMissingElements() {\n","    expectFailureWhenTestingThat(asList(1, 2)).containsAtLeast(4, 4, 4);\n","    assertFailureValue(\"missing (3)\", \"4 [3 copies]\");\n","  }\n","\n","  @Test\n","  public void iterableContainsAtLeastWithNullFailure() {\n","    expectFailureWhenTestingThat(asList(1, null, 3)).containsAtLeast(1, null, null, 3);\n","    assertFailureValue(\"missing (1)\", \"null\");\n","  }\n","\n","  @Test\n","  public void iterableContainsAtLeastFailsWithSameToStringAndHomogeneousList() {\n","    expectFailureWhenTestingThat(asList(1L, 2L)).containsAtLeast(1, 2);\n","    assertFailureValue(\"missing (2)\", \"1, 2 (java.lang.Integer)\");\n","    assertFailureValue(\"though it did contain (2)\", \"1, 2 (java.lang.Long)\");\n","  }\n","\n","  @Test\n","  public void iterableContainsAtLeastFailsWithSameToStringAndHomogeneousListWithDuplicates() {\n","    expectFailureWhenTestingThat(asList(1L, 2L, 2L)).containsAtLeast(1, 1, 2);\n","    assertFailureValue(\"missing (3)\", \"1 [2 copies], 2 (java.lang.Integer)\");\n","    assertFailureValue(\"though it did contain (3)\", \"1, 2 [2 copies] (java.lang.Long)\");\n","  }\n","\n","  @Test\n","  public void iterableContainsAtLeastFailsWithSameToStringAndHomogeneousListWithNull() {\n","    expectFailureWhenTestingThat(asList(\"null\", \"abc\")).containsAtLeast(\"abc\", null);\n","    assertFailureValue(\"missing (1)\", \"null (null type)\");\n","    assertFailureValue(\"though it did contain (1)\", \"null (java.lang.String)\");\n","  }\n","\n","  @Test\n","  public void iterableContainsAtLeastFailsWithSameToStringAndHeterogeneousListWithDuplicates() {\n","    expectFailureWhenTestingThat(asList(1, 2, 2L, 3L, 3L)).containsAtLeast(2L, 2L, 3, 3);\n","    assertFailureValue(\"missing (3)\", \"2 (java.lang.Long), 3 (java.lang.Integer) [2 copies]\");\n","    assertFailureValue(\n","        \"though it did contain (3)\", \"2 (java.lang.Integer), 3 (java.lang.Long) [2 copies]\");\n","  }\n","\n","  @Test\n","  public void iterableContainsAtLeastFailsWithEmptyString() {\n","    expectFailureWhenTestingThat(asList(\"a\", null)).containsAtLeast(\"\", null);\n","\n","    assertFailureKeys(\"missing (1)\", \"---\", \"expected to contain at least\", \"but was\");\n","    assertFailureValue(\"missing (1)\", \"\");\n","  }\n","\n","  @Test\n","  public void iterableContainsAtLeastInOrder() {\n","    assertThat(asList(3, 2, 5)).containsAtLeast(3, 2, 5).inOrder();\n","  }\n","\n","  @Test\n","  public void iterableContainsAtLeastInOrderWithGaps() {\n","    assertThat(asList(3, 2, 5)).containsAtLeast(3, 5).inOrder();\n","    assertThat(asList(3, 2, 2, 4, 5)).containsAtLeast(3, 2, 2, 5).inOrder();\n","    assertThat(asList(3, 1, 4, 1, 5)).containsAtLeast(3, 1, 5).inOrder();\n","    assertThat(asList(\"x\", \"y\", \"y\", \"z\")).containsAtLeast(\"x\", \"y\", \"z\").inOrder();\n","    assertThat(asList(\"x\", \"x\", \"y\", \"z\")).containsAtLeast(\"x\", \"y\", \"z\").inOrder();\n","    assertThat(asList(\"z\", \"x\", \"y\", \"z\")).containsAtLeast(\"x\", \"y\", \"z\").inOrder();\n","    assertThat(asList(\"x\", \"x\", \"y\", \"z\", \"x\")).containsAtLeast(\"x\", \"y\", \"z\", \"x\").inOrder();\n","  }\n","\n","  @Test\n","  public void iterableContainsAtLeastInOrderWithNull() {\n","    assertThat(asList(3, null, 5)).containsAtLeast(3, null, 5).inOrder();\n","    assertThat(asList(3, null, 7, 5)).containsAtLeast(3, null, 5).inOrder();\n","  }\n","\n","  @Test\n","  public void iterableContainsAtLeastInOrderWithFailure() {\n","    expectFailureWhenTestingThat(asList(1, null, 3)).containsAtLeast(null, 1, 3).inOrder();\n","    assertFailureKeys(\n","        \"required elements were all found, but order was wrong\",\n","        \"expected order for required elements\",\n","        \"but was\");\n","    assertFailureValue(\"expected order for required elements\", \"[null, 1, 3]\");\n","    assertFailureValue(\"but was\", \"[1, null, 3]\");\n","  }\n","\n","  @Test\n","  public void iterableContainsAtLeastInOrderWithFailureWithActualOrder() {\n","    expectFailureWhenTestingThat(asList(1, 2, null, 3, 4)).containsAtLeast(null, 1, 3).inOrder();\n","    assertFailureKeys(\n","        \"required elements were all found, but order was wrong\",\n","        \"expected order for required elements\",\n","        \"but order was\",\n","        \"full contents\");\n","    assertFailureValue(\"expected order for required elements\", \"[null, 1, 3]\");\n","    assertFailureValue(\"but order was\", \"[1, null, 3]\");\n","    assertFailureValue(\"full contents\", \"[1, 2, null, 3, 4]\");\n","  }\n","\n","  @Test\n","  public void iterableContainsAtLeastInOrderWithOneShotIterable() {\n","    List<Object> contents = asList(2, 1, null, 4, \"a\", 3, \"b\");\n","    Iterable<Object> oneShot = new OneShotIterable<>(contents.iterator(), contents.toString());\n","\n","    assertThat(oneShot).containsAtLeast(1, null, 3).inOrder();\n","  }\n","\n","  @Test\n","  public void iterableContainsAtLeastInOrderWithOneShotIterableWrongOrder() {\n","    List<Object> contents = asList(2, 1, null, 4, \"a\", 3, \"b\");\n","    Iterable<Object> oneShot = new OneShotIterable<>(contents.iterator(), \"BadIterable\");\n","\n","    expectFailureWhenTestingThat(oneShot).containsAtLeast(1, 3, (Object) null).inOrder();\n","    assertFailureKeys(\n","        \"required elements were all found, but order was wrong\",\n","        \"expected order for required elements\",\n","        \"but was\");\n","    assertFailureValue(\"expected order for required elements\", \"[1, 3, null]\");\n","    assertFailureValue(\"but was\", \"BadIterable\"); // TODO(b/231966021): Output its elements.\n","  }\n","\n","  private static final class OneShotIterable<E> implements Iterable<E> {\n","    private final Iterator<E> iterator;\n","    private final String toString;\n","\n","    OneShotIterable(Iterator<E> iterator, String toString) {\n","      this.iterator = iterator;\n","      this.toString = toString;\n","    }\n","\n","    @Override\n","    public Iterator<E> iterator() {\n","      return iterator;\n","    }\n","\n","    @Override\n","    public String toString() {\n","      return toString;\n","    }\n","  }\n","\n","  @Test\n","  public void iterableContainsAtLeastInOrderWrongOrderAndMissing() {\n","    expectFailureWhenTestingThat(asList(1, 2)).containsAtLeast(2, 1, 3).inOrder();\n","  }\n","\n","  @Test\n","  @SuppressWarnings(\"ContainsAllElementsInWithVarArgsToContainsAtLeast\")\n","  public void iterableContainsAtLeastElementsInIterable() {\n","    assertThat(asList(1, 2, 3)).containsAtLeastElementsIn(asList(1, 2));\n","\n","    expectFailureWhenTestingThat(asList(1, 2, 3)).containsAtLeastElementsIn(asList(1, 2, 4));\n","    assertFailureKeys(\"missing (1)\", \"---\", \"expected to contain at least\", \"but was\");\n","    assertFailureValue(\"missing (1)\", \"4\");\n","    assertFailureValue(\"expected to contain at least\", \"[1, 2, 4]\");\n","  }\n","\n","  @Test\n","  @SuppressWarnings(\"ContainsAllElementsInWithVarArgsToContainsAtLeast\")\n","  public void iterableContainsAtLeastElementsInCanUseFactPerElement() {\n","    expectFailureWhenTestingThat(asList(\"abc\"))\n","        .containsAtLeastElementsIn(asList(\"123\\n456\", \"789\"));\n","    assertFailureKeys(\"missing (2)\", \"#1\", \"#2\", \"---\", \"expected to contain at least\", \"but was\");\n","    assertFailureValue(\"#1\", \"123\\n456\");\n","    assertFailureValue(\"#2\", \"789\");\n","  }\n","\n","  @Test\n","  public void iterableContainsAtLeastElementsInArray() {\n","    assertThat(asList(1, 2, 3)).containsAtLeastElementsIn(new Integer[] {1, 2});\n","\n","    expectFailureWhenTestingThat(asList(1, 2, 3))\n","        .containsAtLeastElementsIn(new Integer[] {1, 2, 4});\n","    assertFailureKeys(\"missing (1)\", \"---\", \"expected to contain at least\", \"but was\");\n","    assertFailureValue(\"missing (1)\", \"4\");\n","    assertFailureValue(\"expected to contain at least\", \"[1, 2, 4]\");\n","  }\n","\n","  @Test\n","  public void iterableContainsNoneOf() {\n","    assertThat(asList(1, 2, 3)).containsNoneOf(4, 5, 6);\n","  }\n","\n","  @Test\n","  public void iterableContainsNoneOfFailure() {\n","    expectFailureWhenTestingThat(asList(1, 2, 3)).containsNoneOf(1, 2, 4);\n","    assertFailureKeys(\"expected not to contain any of\", \"but contained\", \"full contents\");\n","    assertFailureValue(\"expected not to contain any of\", \"[1, 2, 4]\");\n","    assertFailureValue(\"but contained\", \"[1, 2]\");\n","    assertFailureValue(\"full contents\", \"[1, 2, 3]\");\n","  }\n","\n","  @Test\n","  public void iterableContainsNoneOfFailureWithDuplicateInSubject() {\n","    expectFailureWhenTestingThat(asList(1, 2, 2, 3)).containsNoneOf(1, 2, 4);\n","    assertFailureValue(\"but contained\", \"[1, 2]\");\n","  }\n","\n","  @Test\n","  public void iterableContainsNoneOfFailureWithDuplicateInExpected() {\n","    expectFailureWhenTestingThat(asList(1, 2, 3)).containsNoneOf(1, 2, 2, 4);\n","    assertFailureValue(\"but contained\", \"[1, 2]\");\n","  }\n","\n","  @Test\n","  public void iterableContainsNoneOfFailureWithEmptyString() {\n","    expectFailureWhenTestingThat(asList(\"\")).containsNoneOf(\"\", null);\n","    assertFailureKeys(\"expected not to contain any of\", \"but contained\", \"full contents\");\n","    assertFailureValue(\"expected not to contain any of\", \"[\\\"\\\" (empty String), null]\");\n","    assertFailureValue(\"but contained\", \"[\\\"\\\" (empty String)]\");\n","    assertFailureValue(\"full contents\", \"[]\");\n","  }\n","\n","  @Test\n","  @SuppressWarnings(\"ContainsNoneInWithVarArgsToContainsNoneOf\")\n","  public void iterableContainsNoneInIterable() {\n","    assertThat(asList(1, 2, 3)).containsNoneIn(asList(4, 5, 6));\n","    expectFailureWhenTestingThat(asList(1, 2, 3)).containsNoneIn(asList(1, 2, 4));\n","    assertFailureKeys(\"expected not to contain any of\", \"but contained\", \"full contents\");\n","    assertFailureValue(\"expected not to contain any of\", \"[1, 2, 4]\");\n","    assertFailureValue(\"but contained\", \"[1, 2]\");\n","    assertFailureValue(\"full contents\", \"[1, 2, 3]\");\n","  }\n","\n","  @Test\n","  public void iterableContainsNoneInArray() {\n","    assertThat(asList(1, 2, 3)).containsNoneIn(new Integer[] {4, 5, 6});\n","    expectFailureWhenTestingThat(asList(1, 2, 3)).containsNoneIn(new Integer[] {1, 2, 4});\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyArray() {\n","    String[] stringArray = {\"a\", \"b\"};\n","    ImmutableList<String[]> iterable = ImmutableList.of(stringArray);\n","    // This test fails w/o the explicit cast\n","    assertThat(iterable).containsExactly((Object) stringArray);\n","  }\n","\n","  @Test\n","  // We tell people to call containsExactlyElementsIn, but we still test containsExactly.\n","  @SuppressWarnings(\"ContainsExactlyVariadic\")\n","  public void arrayContainsExactly() {\n","    ImmutableList<String> iterable = ImmutableList.of(\"a\", \"b\");\n","    String[] array = {\"a\", \"b\"};\n","    assertThat(iterable).containsExactly((Object[]) array);\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyWithMany() {\n","    assertThat(asList(1, 2, 3)).containsExactly(1, 2, 3);\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyOutOfOrder() {\n","    assertThat(asList(1, 2, 3, 4)).containsExactly(3, 1, 4, 2);\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyWithDuplicates() {\n","    assertThat(asList(1, 2, 2, 2, 3)).containsExactly(1, 2, 2, 2, 3);\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyWithDuplicatesOutOfOrder() {\n","    assertThat(asList(1, 2, 2, 2, 3)).containsExactly(2, 1, 2, 3, 2);\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyWithOnlyNullPassedAsNullArray() {\n","    // Truth is tolerant of this erroneous varargs call.\n","    Iterable<Object> actual = asList((Object) null);\n","    assertThat(actual).containsExactly((Object[]) null);\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyWithOnlyNull() {\n","    Iterable<Object> actual = asList((Object) null);\n","    assertThat(actual).containsExactly((Object) null);\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyWithNullSecond() {\n","    assertThat(asList(1, null)).containsExactly(1, null);\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyWithNullThird() {\n","    assertThat(asList(1, 2, null)).containsExactly(1, 2, null);\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyWithNull() {\n","    assertThat(asList(1, null, 3)).containsExactly(1, null, 3);\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyWithNullOutOfOrder() {\n","    assertThat(asList(1, null, 3)).containsExactly(1, 3, (Integer) null);\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyOutOfOrderDoesNotStringify() {\n","    CountsToStringCalls o = new CountsToStringCalls();\n","    List<Object> actual = asList(o, 1);\n","    List<Object> expected = asList(1, o);\n","    assertThat(actual).containsExactlyElementsIn(expected);\n","    assertThat(o.calls).isEqualTo(0);\n","    expectFailureWhenTestingThat(actual).containsExactlyElementsIn(expected).inOrder();\n","    assertThat(o.calls).isGreaterThan(0);\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyWithEmptyString() {\n","    expectFailureWhenTestingThat(asList()).containsExactly(\"\");\n","\n","    assertFailureValue(\"missing (1)\", \"\");\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyWithEmptyStringAndUnexpectedItem() {\n","    expectFailureWhenTestingThat(asList(\"a\", null)).containsExactly(\"\");\n","\n","    assertFailureKeys(\"missing (1)\", \"unexpected (2)\", \"---\", \"expected\", \"but was\");\n","    assertFailureValue(\"missing (1)\", \"\");\n","    assertFailureValue(\"unexpected (2)\", \"a, null\");\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyWithEmptyStringAndMissingItem() {\n","    expectFailureWhenTestingThat(asList(\"\")).containsExactly(\"a\", null);\n","\n","    assertFailureValue(\"missing (2)\", \"a, null\");\n","    assertFailureValue(\"unexpected (1)\", \"\");\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyWithEmptyStringAmongMissingItems() {\n","    expectFailureWhenTestingThat(asList(\"a\")).containsExactly(\"\", \"b\");\n","\n","    assertFailureKeys(\n","        \"missing (2)\", \"#1\", \"#2\", \"\", \"unexpected (1)\", \"#1\", \"---\", \"expected\", \"but was\");\n","    assertFailureValueIndexed(\"#1\", 0, \"\");\n","    assertFailureValueIndexed(\"#2\", 0, \"b\");\n","    assertFailureValueIndexed(\"#1\", 1, \"a\");\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlySingleElement() {\n","    assertThat(asList(1)).containsExactly(1);\n","\n","    expectFailureWhenTestingThat(asList(1)).containsExactly(2);\n","    assertFailureKeys(\"value of\", \"expected\", \"but was\");\n","    assertFailureValue(\"value of\", \"iterable.onlyElement()\");\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlySingleElementNoEqualsMagic() {\n","    expectFailureWhenTestingThat(asList(1)).containsExactly(1L);\n","    assertFailureValueIndexed(\"an instance of\", 0, \"java.lang.Long\");\n","  }\n","\n","  @Test\n","  @SuppressWarnings(\"ContainsExactlyElementsInWithVarArgsToExactly\")\n","  public void iterableContainsExactlyWithElementsThatThrowWhenYouCallHashCode() {\n","    HashCodeThrower one = new HashCodeThrower();\n","    HashCodeThrower two = new HashCodeThrower();\n","\n","    assertThat(asList(one, two)).containsExactly(two, one);\n","    assertThat(asList(one, two)).containsExactly(one, two).inOrder();\n","    assertThat(asList(one, two)).containsExactlyElementsIn(asList(two, one));\n","    assertThat(asList(one, two)).containsExactlyElementsIn(asList(one, two)).inOrder();\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyWithElementsThatThrowWhenYouCallHashCodeFailureTooMany() {\n","    HashCodeThrower one = new HashCodeThrower();\n","    HashCodeThrower two = new HashCodeThrower();\n","\n","    expectFailureWhenTestingThat(asList(one, two)).containsExactly(one);\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyWithElementsThatThrowWhenYouCallHashCodeOneMismatch() {\n","    HashCodeThrower one = new HashCodeThrower();\n","    HashCodeThrower two = new HashCodeThrower();\n","\n","    expectFailureWhenTestingThat(asList(one, one)).containsExactly(one, two);\n","  }\n","\n","  private static class HashCodeThrower {\n","    @Override\n","    public boolean equals(Object other) {\n","      return this == other;\n","    }\n","\n","    @Override\n","    public int hashCode() {\n","      throw new UnsupportedOperationException();\n","    }\n","\n","    @Override\n","    public String toString() {\n","      return \"HCT\";\n","    }\n","  }\n","\n","  @Test\n","  @SuppressWarnings({\"ContainsExactlyNone\", \"TruthSelfEquals\"})\n","  public void iterableContainsExactlyElementsInInOrderPassesWithEmptyExpectedAndActual() {\n","    assertThat(ImmutableList.of()).containsExactlyElementsIn(ImmutableList.of()).inOrder();\n","  }\n","\n","  @Test\n","  @SuppressWarnings(\"ContainsExactlyNone\")\n","  public void iterableContainsExactlyElementsInWithEmptyExpected() {\n","    expectFailureWhenTestingThat(asList(\"foo\")).containsExactlyElementsIn(ImmutableList.of());\n","    assertFailureKeys(\"expected to be empty\", \"but was\");\n","  }\n","\n","  @Test\n","  @SuppressWarnings(\"ContainsExactlyElementsInWithVarArgsToExactly\")\n","  public void iterableContainsExactlyElementsInErrorMessageIsInOrder() {\n","    expectFailureWhenTestingThat(asList(\"foo OR bar\"))\n","        .containsExactlyElementsIn(asList(\"foo\", \"bar\"));\n","    assertFailureValue(\"missing (2)\", \"foo, bar\");\n","    assertFailureValue(\"unexpected (1)\", \"foo OR bar\");\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyMissingItemFailure() {\n","    expectFailureWhenTestingThat(asList(1, 2)).containsExactly(1, 2, 4);\n","    assertFailureValue(\"missing (1)\", \"4\");\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyUnexpectedItemFailure() {\n","    expectFailureWhenTestingThat(asList(1, 2, 3)).containsExactly(1, 2);\n","    assertFailureValue(\"unexpected (1)\", \"3\");\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyWithDuplicatesNotEnoughItemsFailure() {\n","    expectFailureWhenTestingThat(asList(1, 2, 3)).containsExactly(1, 2, 2, 2, 3);\n","    assertFailureValue(\"missing (2)\", \"2 [2 copies]\");\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyWithDuplicatesMissingItemFailure() {\n","    expectFailureWhenTestingThat(asList(1, 2, 3)).containsExactly(1, 2, 2, 2, 3, 4);\n","    assertFailureValue(\"missing (3)\", \"2 [2 copies], 4\");\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyWithDuplicatesMissingItemsWithNewlineFailure() {\n","    expectFailureWhenTestingThat(asList(\"a\", \"b\", \"foo\\nbar\"))\n","        .containsExactly(\"a\", \"b\", \"foo\\nbar\", \"foo\\nbar\", \"foo\\nbar\");\n","    assertFailureKeys(\"missing (2)\", \"#1 [2 copies]\", \"---\", \"expected\", \"but was\");\n","    assertFailureValue(\"#1 [2 copies]\", \"foo\\nbar\");\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyWithDuplicatesMissingAndExtraItemsWithNewlineFailure() {\n","    expectFailureWhenTestingThat(asList(\"a\\nb\", \"a\\nb\")).containsExactly(\"foo\\nbar\", \"foo\\nbar\");\n","    assertFailureKeys(\n","        \"missing (2)\",\n","        \"#1 [2 copies]\",\n","        \"\",\n","        \"unexpected (2)\",\n","        \"#1 [2 copies]\",\n","        \"---\",\n","        \"expected\",\n","        \"but was\");\n","    assertFailureValueIndexed(\"#1 [2 copies]\", 0, \"foo\\nbar\");\n","    assertFailureValueIndexed(\"#1 [2 copies]\", 1, \"a\\nb\");\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyWithDuplicatesUnexpectedItemFailure() {\n","    expectFailureWhenTestingThat(asList(1, 2, 2, 2, 2, 3)).containsExactly(1, 2, 2, 3);\n","    assertFailureValue(\"unexpected (2)\", \"2 [2 copies]\");\n","  }\n","\n","  /*\n","   * Slightly subtle test to ensure that if multiple equal elements are found\n","   * to be missing we only reference it once in the output message.\n","   */\n","  @Test\n","  public void iterableContainsExactlyWithDuplicateMissingElements() {\n","    expectFailureWhenTestingThat(asList()).containsExactly(4, 4, 4);\n","    assertFailureValue(\"missing (3)\", \"4 [3 copies]\");\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyWithNullFailure() {\n","    expectFailureWhenTestingThat(asList(1, null, 3)).containsExactly(1, null, null, 3);\n","    assertFailureValue(\"missing (1)\", \"null\");\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyWithMissingAndExtraElements() {\n","    expectFailureWhenTestingThat(asList(1, 2, 3)).containsExactly(1, 2, 4);\n","    assertFailureValue(\"missing (1)\", \"4\");\n","    assertFailureValue(\"unexpected (1)\", \"3\");\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyWithDuplicateMissingAndExtraElements() {\n","    expectFailureWhenTestingThat(asList(1, 2, 3, 3)).containsExactly(1, 2, 4, 4);\n","    assertFailureValue(\"missing (2)\", \"4 [2 copies]\");\n","    assertFailureValue(\"unexpected (2)\", \"3 [2 copies]\");\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyWithCommaSeparatedVsIndividual() {\n","    expectFailureWhenTestingThat(asList(\"a, b\")).containsExactly(\"a\", \"b\");\n","    assertFailureKeys(\n","        \"missing (2)\", \"#1\", \"#2\", \"\", \"unexpected (1)\", \"#1\", \"---\", \"expected\", \"but was\");\n","    assertFailureValueIndexed(\"#1\", 0, \"a\");\n","    assertFailureValueIndexed(\"#2\", 0, \"b\");\n","    assertFailureValueIndexed(\"#1\", 1, \"a, b\");\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyFailsWithSameToStringAndHomogeneousList() {\n","    expectFailureWhenTestingThat(asList(1L, 2L)).containsExactly(1, 2);\n","    assertFailureValue(\"missing (2)\", \"1, 2 (java.lang.Integer)\");\n","    assertFailureValue(\"unexpected (2)\", \"1, 2 (java.lang.Long)\");\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyFailsWithSameToStringAndListWithNull() {\n","    expectFailureWhenTestingThat(asList(1L, 2L)).containsExactly(null, 1, 2);\n","    assertFailureValue(\n","        \"missing (3)\", \"null (null type), 1 (java.lang.Integer), 2 (java.lang.Integer)\");\n","    assertFailureValue(\"unexpected (2)\", \"1, 2 (java.lang.Long)\");\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyFailsWithSameToStringAndHeterogeneousList() {\n","    expectFailureWhenTestingThat(asList(1L, 2)).containsExactly(1, null, 2L);\n","    assertFailureValue(\n","        \"missing (3)\", \"1 (java.lang.Integer), null (null type), 2 (java.lang.Long)\");\n","    assertFailureValue(\"unexpected (2)\", \"1 (java.lang.Long), 2 (java.lang.Integer)\");\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyFailsWithSameToStringAndHomogeneousListWithDuplicates() {\n","    expectFailureWhenTestingThat(asList(1L, 2L)).containsExactly(1, 2, 2);\n","    assertFailureValue(\"missing (3)\", \"1, 2 [2 copies] (java.lang.Integer)\");\n","    assertFailureValue(\"unexpected (2)\", \"1, 2 (java.lang.Long)\");\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyFailsWithSameToStringAndHeterogeneousListWithDuplicates() {\n","    expectFailureWhenTestingThat(asList(1L, 2)).containsExactly(1, null, null, 2L, 2L);\n","    assertFailureValue(\n","        \"missing (5)\",\n","        \"1 (java.lang.Integer), null (null type) [2 copies], 2 (java.lang.Long) [2 copies]\");\n","    assertFailureValue(\"unexpected (2)\", \"1 (java.lang.Long), 2 (java.lang.Integer)\");\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyWithOneIterableGivesWarning() {\n","    expectFailureWhenTestingThat(asList(1, 2, 3, 4)).containsExactly(asList(1, 2, 3, 4));\n","    assertThat(expectFailure.getFailure())\n","        .hasMessageThat()\n","        .contains(CONTAINS_EXACTLY_ITERABLE_WARNING);\n","  }\n","\n","  @Test\n","  @SuppressWarnings(\"ContainsExactlyElementsInWithVarArgsToExactly\")\n","  public void iterableContainsExactlyElementsInWithOneIterableDoesNotGiveWarning() {\n","    expectFailureWhenTestingThat(asList(1, 2, 3, 4)).containsExactlyElementsIn(asList(1, 2, 3));\n","    assertFailureValue(\"unexpected (1)\", \"4\");\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyWithTwoIterableDoesNotGivesWarning() {\n","    expectFailureWhenTestingThat(asList(1, 2, 3, 4)).containsExactly(asList(1, 2), asList(3, 4));\n","    assertThat(expectFailure.getFailure())\n","        .hasMessageThat()\n","        .doesNotContain(CONTAINS_EXACTLY_ITERABLE_WARNING);\n","  }\n","\n","  private static final String CONTAINS_EXACTLY_ITERABLE_WARNING =\n","      \"Passing an iterable to the varargs method containsExactly(Object...) is \"\n","          + \"often not the correct thing to do. Did you mean to call \"\n","          + \"containsExactlyElementsIn(Iterable) instead?\";\n","\n","  @Test\n","  public void iterableContainsExactlyWithOneNonIterableDoesNotGiveWarning() {\n","    expectFailureWhenTestingThat(asList(1, 2, 3, 4)).containsExactly(1);\n","    assertFailureValue(\"unexpected (3)\", \"2, 3, 4\");\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyInOrder() {\n","    assertThat(asList(3, 2, 5)).containsExactly(3, 2, 5).inOrder();\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyInOrderWithNull() {\n","    assertThat(asList(3, null, 5)).containsExactly(3, null, 5).inOrder();\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyInOrderWithFailure() {\n","    expectFailureWhenTestingThat(asList(1, null, 3)).containsExactly(null, 1, 3).inOrder();\n","    assertFailureKeys(\"contents match, but order was wrong\", \"expected\", \"but was\");\n","    assertFailureValue(\"expected\", \"[null, 1, 3]\");\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyInOrderWithOneShotIterable() {\n","    Iterator<Object> iterator = asList((Object) 1, null, 3).iterator();\n","    Iterable<Object> iterable =\n","        new Iterable<Object>() {\n","          @Override\n","          public Iterator<Object> iterator() {\n","            return iterator;\n","          }\n","        };\n","    assertThat(iterable).containsExactly(1, null, 3).inOrder();\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyInOrderWithOneShotIterableWrongOrder() {\n","    Iterator<Object> iterator = asList((Object) 1, null, 3).iterator();\n","    Iterable<Object> iterable =\n","        new Iterable<Object>() {\n","          @Override\n","          public Iterator<Object> iterator() {\n","            return iterator;\n","          }\n","\n","          @Override\n","          public String toString() {\n","            return \"BadIterable\";\n","          }\n","        };\n","\n","    expectFailureWhenTestingThat(iterable).containsExactly(1, 3, null).inOrder();\n","    assertFailureKeys(\"contents match, but order was wrong\", \"expected\", \"but was\");\n","    assertFailureValue(\"expected\", \"[1, 3, null]\");\n","  }\n","\n","  @Test\n","  public void iterableWithNoToStringOverride() {\n","    Iterable<Integer> iterable =\n","        new Iterable<Integer>() {\n","          @Override\n","          public Iterator<Integer> iterator() {\n","            return Iterators.forArray(1, 2, 3);\n","          }\n","        };\n","\n","    expectFailureWhenTestingThat(iterable).containsExactly(1, 2).inOrder();\n","    assertFailureValue(\"but was\", \"[1, 2, 3]\");\n","  }\n","\n","  @Test\n","  @SuppressWarnings(\"ContainsExactlyElementsInWithVarArgsToExactly\")\n","  public void iterableContainsExactlyElementsInIterable() {\n","    assertThat(asList(1, 2)).containsExactlyElementsIn(asList(1, 2));\n","\n","    expectFailureWhenTestingThat(asList(1, 2)).containsExactlyElementsIn(asList(1, 2, 4));\n","    assertFailureValue(\"missing (1)\", \"4\");\n","  }\n","\n","  @Test\n","  public void iterableContainsExactlyElementsInArray() {\n","    assertThat(asList(1, 2)).containsExactlyElementsIn(new Integer[] {1, 2});\n","\n","    expectFailureWhenTestingThat(asList(1, 2)).containsExactlyElementsIn(new Integer[] {1, 2, 4});\n","    assertFailureValue(\"missing (1)\", \"4\");\n","  }\n","\n","  @Test\n","  @SuppressWarnings(\"UndefinedEquals\") // Iterable equality isn't defined, but null equality is\n","  public void nullEqualToNull() {\n","    assertThat((Iterable<?>) null).isEqualTo(null);\n","  }\n","\n","  @Test\n","  public void nullEqualToSomething() {\n","    expectFailureWhenTestingThat(null).isEqualTo(ImmutableList.of());\n","  }\n","\n","  @Test\n","  public void somethingEqualToNull() {\n","    expectFailureWhenTestingThat(ImmutableList.of()).isEqualTo(null);\n","  }\n","\n","  @Test\n","  public void somethingEqualToSomething() {\n","    expectFailureWhenTestingThat(ImmutableList.of()).isEqualTo(ImmutableList.of(\"a\"));\n","    // isEqualTo uses the containsExactly style of message:\n","    assertFailureValue(\"missing (1)\", \"a\");\n","  }\n","\n","  @Test\n","  public void isEqualToNotConsistentWithEquals() {\n","    TreeSet<String> actual = new TreeSet<>(CASE_INSENSITIVE_ORDER);\n","    TreeSet<String> expected = new TreeSet<>(CASE_INSENSITIVE_ORDER);\n","    actual.add(\"one\");\n","    expected.add(\"ONE\");\n","    /*\n","     * Our contract doesn't guarantee that the following test will pass. It *currently* does,\n","     * though, and if we change that behavior, we want this test to let us know.\n","     */\n","    assertThat(actual).isEqualTo(expected);\n","  }\n","\n","  @Test\n","  public void isEqualToNotConsistentWithEquals_failure() {\n","    TreeSet<String> actual = new TreeSet<>(CASE_INSENSITIVE_ORDER);\n","    TreeSet<String> expected = new TreeSet<>(CASE_INSENSITIVE_ORDER);\n","    actual.add(\"one\");\n","    expected.add(\"ONE\");\n","    actual.add(\"two\");\n","    expectFailureWhenTestingThat(actual).isEqualTo(expected);\n","    // The exact message generated is unspecified.\n","  }\n","\n","  @Test\n","  public void iterableIsEmpty() {\n","    assertThat(asList()).isEmpty();\n","  }\n","\n","  @Test\n","  public void iterableIsEmptyWithFailure() {\n","    expectFailureWhenTestingThat(asList(1, null, 3)).isEmpty();\n","    assertFailureKeys(\"expected to be empty\", \"but was\");\n","  }\n","\n","  @Test\n","  public void iterableIsNotEmpty() {\n","    assertThat(asList(\"foo\")).isNotEmpty();\n","  }\n","\n","  @Test\n","  public void iterableIsNotEmptyWithFailure() {\n","    expectFailureWhenTestingThat(asList()).isNotEmpty();\n","    assertFailureKeys(\"expected not to be empty\");\n","  }\n","\n","  @Test\n","  public void iterableIsInStrictOrder() {\n","    assertThat(asList()).isInStrictOrder();\n","    assertThat(asList(1)).isInStrictOrder();\n","    assertThat(asList(1, 2, 3, 4)).isInStrictOrder();\n","  }\n","\n","  @Test\n","  public void isInStrictOrderFailure() {\n","    expectFailureWhenTestingThat(asList(1, 2, 2, 4)).isInStrictOrder();\n","    assertFailureKeys(\n","        \"expected to be in strict order\", \"but contained\", \"followed by\", \"full contents\");\n","    assertFailureValue(\"but contained\", \"2\");\n","    assertFailureValue(\"followed by\", \"2\");\n","    assertFailureValue(\"full contents\", \"[1, 2, 2, 4]\");\n","  }\n","\n","  @Test\n","  public void isInStrictOrderWithNonComparableElementsFailure() {\n","    try {\n","      assertThat(asList((Object) 1, \"2\", 3, \"4\")).isInStrictOrder();\n","      fail(\"Should have thrown.\");\n","    } catch (ClassCastException expected) {\n","    }\n","  }\n","\n","  @Test\n","  public void iterableIsInOrder() {\n","    assertThat(asList()).isInOrder();\n","    assertThat(asList(1)).isInOrder();\n","    assertThat(asList(1, 1, 2, 3, 3, 3, 4)).isInOrder();\n","  }\n","\n","  @Test\n","  public void isInOrderFailure() {\n","    expectFailureWhenTestingThat(asList(1, 3, 2, 4)).isInOrder();\n","    assertFailureKeys(\"expected to be in order\", \"but contained\", \"followed by\", \"full contents\");\n","    assertFailureValue(\"but contained\", \"3\");\n","    assertFailureValue(\"followed by\", \"2\");\n","    assertFailureValue(\"full contents\", \"[1, 3, 2, 4]\");\n","  }\n","\n","  @Test\n","  public void isInOrderMultipleFailures() {\n","    expectFailureWhenTestingThat(asList(1, 3, 2, 4, 0)).isInOrder();\n","  }\n","\n","  @Test\n","  public void isInOrderWithNonComparableElementsFailure() {\n","    try {\n","      assertThat(asList((Object) 1, \"2\", 2, \"3\")).isInOrder();\n","      fail(\"Should have thrown.\");\n","    } catch (ClassCastException expected) {\n","    }\n","  }\n","\n","  @Test\n","  public void iterableIsInStrictOrderWithComparator() {\n","    Iterable<String> emptyStrings = asList();\n","    assertThat(emptyStrings).isInStrictOrder(COMPARE_AS_DECIMAL);\n","    assertThat(asList(\"1\")).isInStrictOrder(COMPARE_AS_DECIMAL);\n","    // Note: Use \"10\" and \"20\" to distinguish numerical and lexicographical ordering.\n","    assertThat(asList(\"1\", \"2\", \"10\", \"20\")).isInStrictOrder(COMPARE_AS_DECIMAL);\n","  }\n","\n","  @Test\n","  public void iterableIsInStrictOrderWithComparatorFailure() {\n","    expectFailureWhenTestingThat(asList(\"1\", \"2\", \"2\", \"10\")).isInStrictOrder(COMPARE_AS_DECIMAL);\n","    assertFailureKeys(\n","        \"expected to be in strict order\", \"but contained\", \"followed by\", \"full contents\");\n","    assertFailureValue(\"but contained\", \"2\");\n","    assertFailureValue(\"followed by\", \"2\");\n","    assertFailureValue(\"full contents\", \"[1, 2, 2, 10]\");\n","  }\n","\n","  @Test\n","  public void iterableIsInOrderWithComparator() {\n","    Iterable<String> emptyStrings = asList();\n","    assertThat(emptyStrings).isInOrder(COMPARE_AS_DECIMAL);\n","    assertThat(asList(\"1\")).isInOrder(COMPARE_AS_DECIMAL);\n","    assertThat(asList(\"1\", \"1\", \"2\", \"10\", \"10\", \"10\", \"20\")).isInOrder(COMPARE_AS_DECIMAL);\n","  }\n","\n","  @Test\n","  public void iterableIsInOrderWithComparatorFailure() {\n","    expectFailureWhenTestingThat(asList(\"1\", \"10\", \"2\", \"20\")).isInOrder(COMPARE_AS_DECIMAL);\n","    assertFailureKeys(\"expected to be in order\", \"but contained\", \"followed by\", \"full contents\");\n","    assertFailureValue(\"but contained\", \"10\");\n","    assertFailureValue(\"followed by\", \"2\");\n","    assertFailureValue(\"full contents\", \"[1, 10, 2, 20]\");\n","  }\n","\n","  @SuppressWarnings(\"CompareProperty\") // avoiding Java 8 API under Android\n","  private static final Comparator<String> COMPARE_AS_DECIMAL =\n","      (a, b) -> Integer.valueOf(a).compareTo(Integer.valueOf(b));\n","\n","  private static class Foo {\n","    private final int x;\n","\n","    private Foo(int x) {\n","      this.x = x;\n","    }\n","  }\n","\n","  private static class Bar extends Foo {\n","    private Bar(int x) {\n","      super(x);\n","    }\n","  }\n","\n","  // We can't use Comparators.comparing under old versions of Android.\n","  @SuppressWarnings({\n","    \"CompareProperty\",\n","    \"DoubleProperty_ExtractTernaryHead\",\n","    \"FloatProperty_ExtractTernaryHead\",\n","    \"IntegerProperty_ExtractTernaryHead\",\n","    \"LongProperty_ExtractTernaryHead\",\n","  })\n","  // Even though Integer.compare was added in Java 7, we use it even under old versions of Android,\n","  // even without library desugaring on: It and a few other APIs are *always* desguared:\n","  // https://r8.googlesource.com/r8/+/a7563f86014d44f961f40fc109ab1c1073f2ee4e/src/main/java/com/android/tools/r8/ir/desugar/BackportedMethodRewriter.java\n","  // Now, if this code weren't in Truth's *tests*, then it would cause Animal Sniffer to complain.\n","  // In that case, we might fall back to the deprecated Guava Ints.compare.\n","  private static final Comparator<Foo> FOO_COMPARATOR = (a, b) -> Integer.compare(a.x, b.x);\n","\n","  @Test\n","  public void iterableOrderedByBaseClassComparator() {\n","    Iterable<Bar> targetList = asList(new Bar(1), new Bar(2), new Bar(3));\n","    assertThat(targetList).isInOrder(FOO_COMPARATOR);\n","    assertThat(targetList).isInStrictOrder(FOO_COMPARATOR);\n","  }\n","\n","  @Test\n","  public void isIn() {\n","    ImmutableList<String> actual = ImmutableList.of(\"a\");\n","    ImmutableList<String> expectedA = ImmutableList.of(\"a\");\n","    ImmutableList<String> expectedB = ImmutableList.of(\"b\");\n","    ImmutableList<ImmutableList<String>> expected = ImmutableList.of(expectedA, expectedB);\n","\n","    assertThat(actual).isIn(expected);\n","  }\n","\n","  @Test\n","  @SuppressWarnings(\"deprecation\") // test of a mistaken call\n","  public void isNotIn() {\n","    ImmutableList<String> actual = ImmutableList.of(\"a\");\n","\n","    assertThat(actual).isNotIn(ImmutableList.of(ImmutableList.of(\"b\"), ImmutableList.of(\"c\")));\n","\n","    expectFailureWhenTestingThat(actual).isNotIn(ImmutableList.of(\"a\", \"b\"));\n","    assertThat(expectFailure.getFailure())\n","        .hasMessageThat()\n","        .isEqualTo(\n","            \"The actual value is an Iterable, and you've written a test that compares it to some \"\n","                + \"objects that are not Iterables. Did you instead mean to check whether its \"\n","                + \"*contents* match any of the *contents* of the given values? If so, call \"\n","                + \"containsNoneOf(...)/containsNoneIn(...) instead. Non-iterables: [a, b]\");\n","  }\n","\n","  @Test\n","  public void isAnyOf() {\n","    ImmutableList<String> actual = ImmutableList.of(\"a\");\n","    ImmutableList<String> expectedA = ImmutableList.of(\"a\");\n","    ImmutableList<String> expectedB = ImmutableList.of(\"b\");\n","\n","    assertThat(actual).isAnyOf(expectedA, expectedB);\n","  }\n","\n","  @Test\n","  @SuppressWarnings({\"IncompatibleArgumentType\", \"deprecation\"}) // test of a mistaken call\n","  public void isNoneOf() {\n","    ImmutableList<String> actual = ImmutableList.of(\"a\");\n","\n","    assertThat(actual).isNoneOf(ImmutableList.of(\"b\"), ImmutableList.of(\"c\"));\n","\n","    expectFailureWhenTestingThat(actual).isNoneOf(\"a\", \"b\");\n","    assertThat(expectFailure.getFailure())\n","        .hasMessageThat()\n","        .isEqualTo(\n","            \"The actual value is an Iterable, and you've written a test that compares it to some \"\n","                + \"objects that are not Iterables. Did you instead mean to check whether its \"\n","                + \"*contents* match any of the *contents* of the given values? If so, call \"\n","                + \"containsNoneOf(...)/containsNoneIn(...) instead. Non-iterables: [a, b]\");\n","  }\n","\n","  private static final class CountsToStringCalls {\n","    int calls;\n","\n","    @Override\n","    public String toString() {\n","      calls++;\n","      return super.toString();\n","    }\n","  }\n","\n","  private IterableSubject expectFailureWhenTestingThat(Iterable<?> actual) {\n","    return expectFailure.whenTesting().that(actual);\n","  }\n","}\n"],"method_lines_dic":{"IterableSubject::::actualCustomStringRepresentation()":[112,124],"IterableSubject::::isEqualTo(java.lang.Object)":[126,148],"IterableSubject::::isEmpty()":[151,155],"IterableSubject::::isNotEmpty()":[158,162],"IterableSubject::::hasSize(int)":[165,169],"IterableSubject::::contains(java.lang.Object)":[172,189],"IterableSubject::::doesNotContain(java.lang.Object)":[192,196],"IterableSubject::::containsNoDuplicates()":[199,212],"IterableSubject::::containsAnyOf(java.lang.Object,java.lang.Object,java.lang.Object[])":[215,218],"IterableSubject::::containsAnyIn(java.lang.Iterable<?>)":[225,245],"IterableSubject::::containsAnyIn(java.lang.Object[])":[251,254],"IterableSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])":[265,271],"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)":[282,331],"IterableSubject::::containsAtLeastElementsIn(java.lang.Object[])":[342,346],"IterableSubject::::failAtLeast(java.util.Collection<?>,java.util.Collection<?>)":[348,369],"IterableSubject::::moveElements(java.util.List<?>,java.util.Collection<java.lang.Object>,int)":[375,380],"IterableSubject::::containsExactly(java.lang.Object[])":[395,401],"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>)":[413,416],"IterableSubject::::containsExactlyElementsIn(java.lang.Object[])":[427,435],"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)":[437,544],"IterableSubject::::failExactly(java.lang.Iterable<?>,boolean,java.util.Collection<?>,java.util.Collection<?>)":[546,566],"IterableSubject::::makeElementFactsForBoth(java.lang.String,java.util.Collection<?>,java.lang.String,java.util.Collection<?>)":[568,592],"IterableSubject::::makeElementFacts(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped,com.google.common.truth.IterableSubject.ElementFactGrouping)":[598,618],"IterableSubject::::keyToGoWithElementsString(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped)":[626,633],"IterableSubject::::keyToServeAsHeader(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped)":[635,647],"IterableSubject::::numberString(int,int)":[649,651],"IterableSubject::::containsNoneOf(java.lang.Object,java.lang.Object,java.lang.Object[])":[715,720],"IterableSubject::::containsNoneIn(java.lang.Iterable<?>)":[727,741],"IterableSubject::::containsNoneIn(java.lang.Object[])":[748,751],"IterableSubject::::isInStrictOrder()":[777,779],"IterableSubject::::isInStrictOrder(java.util.Comparator<?>)":[788,799],"IterableSubject::::isInOrder()":[810,812],"IterableSubject::::isInOrder(java.util.Comparator<?>)":[820,831],"IterableSubject.PairwiseChecker::::check(java.lang.Object,java.lang.Object)":[834,834],"IterableSubject::::pairwiseCheck(java.lang.String,com.google.common.truth.IterableSubject.PairwiseChecker)":[837,854],"IterableSubject::::isNoneOf(java.lang.Object,java.lang.Object,java.lang.Object[])":[859,864],"IterableSubject::::isNotIn(java.lang.Iterable<?>)":[869,893],"IterableSubject::::fullContents()":[895,897],"IterableSubject::::comparingElementsUsing(com.google.common.truth.Correspondence<? super A, ? super E>)":[916,920],"IterableSubject::::formattingDiffsUsing(com.google.common.truth.Correspondence.DiffFormatter<? super T, ? super T>)":[951,954],"IterableSubject.UsingCorrespondence::::equals(java.lang.Object)":[990,999],"IterableSubject.UsingCorrespondence::::hashCode()":[1005,1010],"IterableSubject.UsingCorrespondence::::toString()":[1016,1023],"IterableSubject.UsingCorrespondence::::contains(E)":[1123,1170],"IterableSubject.UsingCorrespondence::::doesNotContain(E)":[1173,1204],"IterableSubject.UsingCorrespondence::::containsExactly(E[])":[1218,1223],"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)":[1233,1300],"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(E[])":[1310,1314],"IterableSubject.UsingCorrespondence::::correspondInOrderExactly(java.util.Iterator<? extends A>,java.util.Iterator<? extends E>)":[1321,1335],"IterableSubject.UsingCorrespondence::::findCandidateMapping(java.util.List<? extends A>,java.util.List<? extends E>,com.google.common.truth.Correspondence.ExceptionStore)":[1344,1358],"IterableSubject.UsingCorrespondence::::describeMissingOrExtra(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)":[1393,1419],"IterableSubject.UsingCorrespondence::::describeMissingOrExtraWithoutPairing(java.util.List<? extends E>,java.util.List<? extends A>)":[1421,1424],"IterableSubject.UsingCorrespondence::::describeMissingOrExtraWithPairing(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)":[1426,1444],"IterableSubject.UsingCorrespondence::::formatExtras(java.lang.String,E,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)":[1446,1476],"IterableSubject.UsingCorrespondence::::findNotIndexed(java.util.List<T>,java.util.Set<java.lang.Integer>)":[1482,1496],"IterableSubject.UsingCorrespondence::::containsAtLeast(E,E,E[])":[1570,1574],"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)":[1585,1640],"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(E[])":[1651,1655],"IterableSubject.UsingCorrespondence::::correspondInOrderAllIn(java.util.Iterator<? extends A>,java.util.Iterator<? extends E>)":[1662,1681],"IterableSubject.UsingCorrespondence::::findCorresponding(java.util.Iterator<? extends A>,E,com.google.common.truth.Correspondence.ExceptionStore)":[1687,1696],"IterableSubject.UsingCorrespondence::::describeMissing(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)":[1731,1755],"IterableSubject.UsingCorrespondence::::describeMissingWithoutPairing(java.util.List<? extends E>)":[1757,1759],"IterableSubject.UsingCorrespondence::::describeMissingWithPairing(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)":[1761,1778],"IterableSubject.UsingCorrespondence::::containsAnyOf(E,E,E[])":[1820,1823],"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)":[1829,1896],"IterableSubject.UsingCorrespondence::::containsAnyIn(E[])":[1902,1905],"IterableSubject.UsingCorrespondence::::describeAnyMatchesByKey(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)":[1907,1919],"IterableSubject.UsingCorrespondence::::containsNoneOf(E,E,E[])":[1926,1930],"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)":[1937,1976],"IterableSubject.UsingCorrespondence::::containsNoneIn(E[])":[1983,1986],"IterableSubject.UsingCorrespondence::::getCastActual()":[1988,1991],"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)":[2018,2066],"IterableSubject.UsingCorrespondence.Pairer::::pairOne(E,java.lang.Iterable<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)":[2068,2082],"IterableSubject.UsingCorrespondence.Pairer::::actualKey(A,com.google.common.truth.Correspondence.ExceptionStore)":[2084,2092],"IterableSubject.UsingCorrespondence.Pairer::::expectedKey(E,com.google.common.truth.Correspondence.ExceptionStore)":[2094,2102]},"test_method_lines_dic":{"IterableSubjectTest::::hasSize()":[45,48],"IterableSubjectTest::::hasSizeZero()":[50,54],"IterableSubjectTest::::hasSizeFails()":[56,60],"IterableSubjectTest::::hasSizeNegative()":[62,69],"IterableSubjectTest::::iterableContains()":[71,74],"IterableSubjectTest::::iterableContainsWithNull()":[76,79],"IterableSubjectTest::::iterableContainsFailsWithSameToString()":[81,94],"IterableSubjectTest::::iterableContainsFailsWithSameToStringAndNull()":[96,100],"IterableSubjectTest::::iterableContainsFailure()":[102,107],"IterableSubjectTest::::iterableDoesNotContain()":[109,112],"IterableSubjectTest::::iterableDoesNotContainNull()":[114,117],"IterableSubjectTest::::iterableDoesNotContainFailure()":[119,124],"IterableSubjectTest::::doesNotContainDuplicates()":[126,129],"IterableSubjectTest::::doesNotContainDuplicatesMixedTypes()":[131,134],"IterableSubjectTest::::doesNotContainDuplicatesFailure()":[136,142],"IterableSubjectTest::::iterableContainsAnyOf()":[144,147],"IterableSubjectTest::::iterableContainsAnyOfWithNull()":[149,152],"IterableSubjectTest::::iterableContainsAnyOfWithNullInThirdAndFinalPosition()":[154,157],"IterableSubjectTest::::iterableContainsAnyOfFailure()":[159,164],"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndHomogeneousList()":[166,174],"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndHomogeneousListWithDuplicates()":[176,184],"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndNullInSubject()":[186,194],"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndNullInExpectation()":[196,204],"IterableSubjectTest::::iterableContainsAnyOfWithOneShotIterable()":[206,212],"IterableSubjectTest::::iterableContainsAnyInIterable()":[214,221],"IterableSubjectTest::::iterableContainsAnyInArray()":[223,230],"IterableSubjectTest::::iterableContainsAtLeast()":[232,235],"IterableSubjectTest::::iterableContainsAtLeastWithMany()":[237,240],"IterableSubjectTest::::iterableContainsAtLeastWithDuplicates()":[242,245],"IterableSubjectTest::::iterableContainsAtLeastWithNull()":[247,250],"IterableSubjectTest::::iterableContainsAtLeastWithNullAtThirdAndFinalPosition()":[252,255],"IterableSubjectTest::::iterableContainsAtLeastElementsInOutOfOrderDoesNotStringify()":[268,277],"IterableSubjectTest::::iterableContainsAtLeastFailure()":[279,285],"IterableSubjectTest::::iterableContainsAtLeastWithExtras()":[287,291],"IterableSubjectTest::::iterableContainsAtLeastWithExtraCopiesOfOutOfOrder()":[293,297],"IterableSubjectTest::::iterableContainsAtLeastWithDuplicatesFailure()":[299,303],"IterableSubjectTest::::iterableContainsAtLeastWithDuplicateMissingElements()":[309,313],"IterableSubjectTest::::iterableContainsAtLeastWithNullFailure()":[315,319],"IterableSubjectTest::::iterableContainsAtLeastFailsWithSameToStringAndHomogeneousList()":[321,326],"IterableSubjectTest::::iterableContainsAtLeastFailsWithSameToStringAndHomogeneousListWithDuplicates()":[328,333],"IterableSubjectTest::::iterableContainsAtLeastFailsWithSameToStringAndHomogeneousListWithNull()":[335,340],"IterableSubjectTest::::iterableContainsAtLeastFailsWithSameToStringAndHeterogeneousListWithDuplicates()":[342,348],"IterableSubjectTest::::iterableContainsAtLeastFailsWithEmptyString()":[350,356],"IterableSubjectTest::::iterableContainsAtLeastInOrder()":[358,361],"IterableSubjectTest::::iterableContainsAtLeastInOrderWithGaps()":[363,372],"IterableSubjectTest::::iterableContainsAtLeastInOrderWithNull()":[374,378],"IterableSubjectTest::::iterableContainsAtLeastInOrderWithFailure()":[380,389],"IterableSubjectTest::::iterableContainsAtLeastInOrderWithFailureWithActualOrder()":[391,402],"IterableSubjectTest::::iterableContainsAtLeastInOrderWithOneShotIterable()":[404,410],"IterableSubjectTest::::iterableContainsAtLeastInOrderWithOneShotIterableWrongOrder()":[412,424],"IterableSubjectTest.OneShotIterable::::iterator()":[435,438],"IterableSubjectTest.OneShotIterable::::toString()":[440,443],"IterableSubjectTest::::iterableContainsAtLeastInOrderWrongOrderAndMissing()":[446,449],"IterableSubjectTest::::iterableContainsAtLeastElementsInIterable()":[451,460],"IterableSubjectTest::::iterableContainsAtLeastElementsInCanUseFactPerElement()":[462,470],"IterableSubjectTest::::iterableContainsAtLeastElementsInArray()":[472,481],"IterableSubjectTest::::iterableContainsNoneOf()":[483,486],"IterableSubjectTest::::iterableContainsNoneOfFailure()":[488,495],"IterableSubjectTest::::iterableContainsNoneOfFailureWithDuplicateInSubject()":[497,501],"IterableSubjectTest::::iterableContainsNoneOfFailureWithDuplicateInExpected()":[503,507],"IterableSubjectTest::::iterableContainsNoneOfFailureWithEmptyString()":[509,516],"IterableSubjectTest::::iterableContainsNoneInIterable()":[518,527],"IterableSubjectTest::::iterableContainsNoneInArray()":[529,533],"IterableSubjectTest::::iterableContainsExactlyArray()":[535,541],"IterableSubjectTest::::arrayContainsExactly()":[543,550],"IterableSubjectTest::::iterableContainsExactlyWithMany()":[552,555],"IterableSubjectTest::::iterableContainsExactlyOutOfOrder()":[557,560],"IterableSubjectTest::::iterableContainsExactlyWithDuplicates()":[562,565],"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesOutOfOrder()":[567,570],"IterableSubjectTest::::iterableContainsExactlyWithOnlyNullPassedAsNullArray()":[572,577],"IterableSubjectTest::::iterableContainsExactlyWithOnlyNull()":[579,583],"IterableSubjectTest::::iterableContainsExactlyWithNullSecond()":[585,588],"IterableSubjectTest::::iterableContainsExactlyWithNullThird()":[590,593],"IterableSubjectTest::::iterableContainsExactlyWithNull()":[595,598],"IterableSubjectTest::::iterableContainsExactlyWithNullOutOfOrder()":[600,603],"IterableSubjectTest::::iterableContainsExactlyOutOfOrderDoesNotStringify()":[605,614],"IterableSubjectTest::::iterableContainsExactlyWithEmptyString()":[616,621],"IterableSubjectTest::::iterableContainsExactlyWithEmptyStringAndUnexpectedItem()":[623,630],"IterableSubjectTest::::iterableContainsExactlyWithEmptyStringAndMissingItem()":[632,638],"IterableSubjectTest::::iterableContainsExactlyWithEmptyStringAmongMissingItems()":[640,649],"IterableSubjectTest::::iterableContainsExactlySingleElement()":[651,658],"IterableSubjectTest::::iterableContainsExactlySingleElementNoEqualsMagic()":[660,664],"IterableSubjectTest::::iterableContainsExactlyWithElementsThatThrowWhenYouCallHashCode()":[666,676],"IterableSubjectTest::::iterableContainsExactlyWithElementsThatThrowWhenYouCallHashCodeFailureTooMany()":[678,684],"IterableSubjectTest::::iterableContainsExactlyWithElementsThatThrowWhenYouCallHashCodeOneMismatch()":[686,692],"IterableSubjectTest.HashCodeThrower::::equals(java.lang.Object)":[695,698],"IterableSubjectTest.HashCodeThrower::::hashCode()":[700,703],"IterableSubjectTest.HashCodeThrower::::toString()":[705,708],"IterableSubjectTest::::iterableContainsExactlyElementsInInOrderPassesWithEmptyExpectedAndActual()":[711,715],"IterableSubjectTest::::iterableContainsExactlyElementsInWithEmptyExpected()":[717,722],"IterableSubjectTest::::iterableContainsExactlyElementsInErrorMessageIsInOrder()":[724,731],"IterableSubjectTest::::iterableContainsExactlyMissingItemFailure()":[733,737],"IterableSubjectTest::::iterableContainsExactlyUnexpectedItemFailure()":[739,743],"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesNotEnoughItemsFailure()":[745,749],"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesMissingItemFailure()":[751,755],"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesMissingItemsWithNewlineFailure()":[757,763],"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesMissingAndExtraItemsWithNewlineFailure()":[765,779],"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesUnexpectedItemFailure()":[781,785],"IterableSubjectTest::::iterableContainsExactlyWithDuplicateMissingElements()":[791,795],"IterableSubjectTest::::iterableContainsExactlyWithNullFailure()":[797,801],"IterableSubjectTest::::iterableContainsExactlyWithMissingAndExtraElements()":[803,808],"IterableSubjectTest::::iterableContainsExactlyWithDuplicateMissingAndExtraElements()":[810,815],"IterableSubjectTest::::iterableContainsExactlyWithCommaSeparatedVsIndividual()":[817,825],"IterableSubjectTest::::iterableContainsExactlyFailsWithSameToStringAndHomogeneousList()":[827,832],"IterableSubjectTest::::iterableContainsExactlyFailsWithSameToStringAndListWithNull()":[834,840],"IterableSubjectTest::::iterableContainsExactlyFailsWithSameToStringAndHeterogeneousList()":[842,848],"IterableSubjectTest::::iterableContainsExactlyFailsWithSameToStringAndHomogeneousListWithDuplicates()":[850,855],"IterableSubjectTest::::iterableContainsExactlyFailsWithSameToStringAndHeterogeneousListWithDuplicates()":[857,864],"IterableSubjectTest::::iterableContainsExactlyWithOneIterableGivesWarning()":[866,872],"IterableSubjectTest::::iterableContainsExactlyElementsInWithOneIterableDoesNotGiveWarning()":[874,879],"IterableSubjectTest::::iterableContainsExactlyWithTwoIterableDoesNotGivesWarning()":[881,887],"IterableSubjectTest::::iterableContainsExactlyWithOneNonIterableDoesNotGiveWarning()":[894,898],"IterableSubjectTest::::iterableContainsExactlyInOrder()":[900,903],"IterableSubjectTest::::iterableContainsExactlyInOrderWithNull()":[905,908],"IterableSubjectTest::::iterableContainsExactlyInOrderWithFailure()":[910,915],"IterableSubjectTest::::iterableContainsExactlyInOrderWithOneShotIterable()":[917,928],"IterableSubjectTest::::iterableContainsExactlyInOrderWithOneShotIterableWrongOrder()":[930,949],"IterableSubjectTest::::iterableWithNoToStringOverride()":[951,963],"IterableSubjectTest::::iterableContainsExactlyElementsInIterable()":[965,972],"IterableSubjectTest::::iterableContainsExactlyElementsInArray()":[974,980],"IterableSubjectTest::::nullEqualToNull()":[982,986],"IterableSubjectTest::::nullEqualToSomething()":[988,991],"IterableSubjectTest::::somethingEqualToNull()":[993,996],"IterableSubjectTest::::somethingEqualToSomething()":[998,1003],"IterableSubjectTest::::isEqualToNotConsistentWithEquals()":[1005,1016],"IterableSubjectTest::::isEqualToNotConsistentWithEquals_failure()":[1018,1027],"IterableSubjectTest::::iterableIsEmpty()":[1029,1032],"IterableSubjectTest::::iterableIsEmptyWithFailure()":[1034,1038],"IterableSubjectTest::::iterableIsNotEmpty()":[1040,1043],"IterableSubjectTest::::iterableIsNotEmptyWithFailure()":[1045,1049],"IterableSubjectTest::::iterableIsInStrictOrder()":[1051,1056],"IterableSubjectTest::::isInStrictOrderFailure()":[1058,1066],"IterableSubjectTest::::isInStrictOrderWithNonComparableElementsFailure()":[1068,1075],"IterableSubjectTest::::iterableIsInOrder()":[1077,1082],"IterableSubjectTest::::isInOrderFailure()":[1084,1091],"IterableSubjectTest::::isInOrderMultipleFailures()":[1093,1096],"IterableSubjectTest::::isInOrderWithNonComparableElementsFailure()":[1098,1105],"IterableSubjectTest::::iterableIsInStrictOrderWithComparator()":[1107,1114],"IterableSubjectTest::::iterableIsInStrictOrderWithComparatorFailure()":[1116,1124],"IterableSubjectTest::::iterableIsInOrderWithComparator()":[1126,1132],"IterableSubjectTest::::iterableIsInOrderWithComparatorFailure()":[1134,1141],"IterableSubjectTest::::iterableOrderedByBaseClassComparator()":[1176,1181],"IterableSubjectTest::::isIn()":[1183,1191],"IterableSubjectTest::::isNotIn()":[1193,1208],"IterableSubjectTest::::isAnyOf()":[1210,1217],"IterableSubjectTest::::isNoneOf()":[1219,1234],"IterableSubjectTest.CountsToStringCalls::::toString()":[1239,1243],"IterableSubjectTest::::expectFailureWhenTestingThat(java.lang.Iterable<?>)":[1246,1248]},"reverse_method_lines_dic":{"112":"IterableSubject::::actualCustomStringRepresentation()","113":"IterableSubject::::actualCustomStringRepresentation()","114":"IterableSubject::::actualCustomStringRepresentation()","115":"IterableSubject::::actualCustomStringRepresentation()","116":"IterableSubject::::actualCustomStringRepresentation()","117":"IterableSubject::::actualCustomStringRepresentation()","118":"IterableSubject::::actualCustomStringRepresentation()","119":"IterableSubject::::actualCustomStringRepresentation()","120":"IterableSubject::::actualCustomStringRepresentation()","121":"IterableSubject::::actualCustomStringRepresentation()","122":"IterableSubject::::actualCustomStringRepresentation()","123":"IterableSubject::::actualCustomStringRepresentation()","124":"IterableSubject::::actualCustomStringRepresentation()","126":"IterableSubject::::isEqualTo(java.lang.Object)","127":"IterableSubject::::isEqualTo(java.lang.Object)","128":"IterableSubject::::isEqualTo(java.lang.Object)","129":"IterableSubject::::isEqualTo(java.lang.Object)","130":"IterableSubject::::isEqualTo(java.lang.Object)","131":"IterableSubject::::isEqualTo(java.lang.Object)","132":"IterableSubject::::isEqualTo(java.lang.Object)","133":"IterableSubject::::isEqualTo(java.lang.Object)","134":"IterableSubject::::isEqualTo(java.lang.Object)","135":"IterableSubject::::isEqualTo(java.lang.Object)","136":"IterableSubject::::isEqualTo(java.lang.Object)","137":"IterableSubject::::isEqualTo(java.lang.Object)","138":"IterableSubject::::isEqualTo(java.lang.Object)","139":"IterableSubject::::isEqualTo(java.lang.Object)","140":"IterableSubject::::isEqualTo(java.lang.Object)","141":"IterableSubject::::isEqualTo(java.lang.Object)","142":"IterableSubject::::isEqualTo(java.lang.Object)","143":"IterableSubject::::isEqualTo(java.lang.Object)","144":"IterableSubject::::isEqualTo(java.lang.Object)","145":"IterableSubject::::isEqualTo(java.lang.Object)","146":"IterableSubject::::isEqualTo(java.lang.Object)","147":"IterableSubject::::isEqualTo(java.lang.Object)","148":"IterableSubject::::isEqualTo(java.lang.Object)","151":"IterableSubject::::isEmpty()","152":"IterableSubject::::isEmpty()","153":"IterableSubject::::isEmpty()","154":"IterableSubject::::isEmpty()","155":"IterableSubject::::isEmpty()","158":"IterableSubject::::isNotEmpty()","159":"IterableSubject::::isNotEmpty()","160":"IterableSubject::::isNotEmpty()","161":"IterableSubject::::isNotEmpty()","162":"IterableSubject::::isNotEmpty()","165":"IterableSubject::::hasSize(int)","166":"IterableSubject::::hasSize(int)","167":"IterableSubject::::hasSize(int)","168":"IterableSubject::::hasSize(int)","169":"IterableSubject::::hasSize(int)","172":"IterableSubject::::contains(java.lang.Object)","173":"IterableSubject::::contains(java.lang.Object)","174":"IterableSubject::::contains(java.lang.Object)","175":"IterableSubject::::contains(java.lang.Object)","176":"IterableSubject::::contains(java.lang.Object)","177":"IterableSubject::::contains(java.lang.Object)","178":"IterableSubject::::contains(java.lang.Object)","179":"IterableSubject::::contains(java.lang.Object)","180":"IterableSubject::::contains(java.lang.Object)","181":"IterableSubject::::contains(java.lang.Object)","182":"IterableSubject::::contains(java.lang.Object)","183":"IterableSubject::::contains(java.lang.Object)","184":"IterableSubject::::contains(java.lang.Object)","185":"IterableSubject::::contains(java.lang.Object)","186":"IterableSubject::::contains(java.lang.Object)","187":"IterableSubject::::contains(java.lang.Object)","188":"IterableSubject::::contains(java.lang.Object)","189":"IterableSubject::::contains(java.lang.Object)","192":"IterableSubject::::doesNotContain(java.lang.Object)","193":"IterableSubject::::doesNotContain(java.lang.Object)","194":"IterableSubject::::doesNotContain(java.lang.Object)","195":"IterableSubject::::doesNotContain(java.lang.Object)","196":"IterableSubject::::doesNotContain(java.lang.Object)","199":"IterableSubject::::containsNoDuplicates()","200":"IterableSubject::::containsNoDuplicates()","201":"IterableSubject::::containsNoDuplicates()","202":"IterableSubject::::containsNoDuplicates()","203":"IterableSubject::::containsNoDuplicates()","204":"IterableSubject::::containsNoDuplicates()","205":"IterableSubject::::containsNoDuplicates()","206":"IterableSubject::::containsNoDuplicates()","207":"IterableSubject::::containsNoDuplicates()","208":"IterableSubject::::containsNoDuplicates()","209":"IterableSubject::::containsNoDuplicates()","210":"IterableSubject::::containsNoDuplicates()","211":"IterableSubject::::containsNoDuplicates()","212":"IterableSubject::::containsNoDuplicates()","215":"IterableSubject::::containsAnyOf(java.lang.Object,java.lang.Object,java.lang.Object[])","216":"IterableSubject::::containsAnyOf(java.lang.Object,java.lang.Object,java.lang.Object[])","217":"IterableSubject::::containsAnyOf(java.lang.Object,java.lang.Object,java.lang.Object[])","218":"IterableSubject::::containsAnyOf(java.lang.Object,java.lang.Object,java.lang.Object[])","225":"IterableSubject::::containsAnyIn(java.lang.Iterable<?>)","226":"IterableSubject::::containsAnyIn(java.lang.Iterable<?>)","227":"IterableSubject::::containsAnyIn(java.lang.Iterable<?>)","228":"IterableSubject::::containsAnyIn(java.lang.Iterable<?>)","229":"IterableSubject::::containsAnyIn(java.lang.Iterable<?>)","230":"IterableSubject::::containsAnyIn(java.lang.Iterable<?>)","231":"IterableSubject::::containsAnyIn(java.lang.Iterable<?>)","232":"IterableSubject::::containsAnyIn(java.lang.Iterable<?>)","233":"IterableSubject::::containsAnyIn(java.lang.Iterable<?>)","234":"IterableSubject::::containsAnyIn(java.lang.Iterable<?>)","235":"IterableSubject::::containsAnyIn(java.lang.Iterable<?>)","236":"IterableSubject::::containsAnyIn(java.lang.Iterable<?>)","237":"IterableSubject::::containsAnyIn(java.lang.Iterable<?>)","238":"IterableSubject::::containsAnyIn(java.lang.Iterable<?>)","239":"IterableSubject::::containsAnyIn(java.lang.Iterable<?>)","240":"IterableSubject::::containsAnyIn(java.lang.Iterable<?>)","241":"IterableSubject::::containsAnyIn(java.lang.Iterable<?>)","242":"IterableSubject::::containsAnyIn(java.lang.Iterable<?>)","243":"IterableSubject::::containsAnyIn(java.lang.Iterable<?>)","244":"IterableSubject::::containsAnyIn(java.lang.Iterable<?>)","245":"IterableSubject::::containsAnyIn(java.lang.Iterable<?>)","251":"IterableSubject::::containsAnyIn(java.lang.Object[])","252":"IterableSubject::::containsAnyIn(java.lang.Object[])","253":"IterableSubject::::containsAnyIn(java.lang.Object[])","254":"IterableSubject::::containsAnyIn(java.lang.Object[])","265":"IterableSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])","266":"IterableSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])","267":"IterableSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])","268":"IterableSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])","269":"IterableSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])","270":"IterableSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])","271":"IterableSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])","282":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","283":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","284":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","285":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","286":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","287":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","288":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","289":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","290":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","291":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","292":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","293":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","294":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","295":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","296":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","297":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","298":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","299":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","300":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","301":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","302":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","303":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","304":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","305":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","306":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","307":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","308":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","309":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","310":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","311":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","312":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","313":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","314":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","315":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","316":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","317":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","318":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","319":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","320":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","321":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","322":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","323":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","324":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","325":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","326":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","327":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","328":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","329":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","330":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","331":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)","342":"IterableSubject::::containsAtLeastElementsIn(java.lang.Object[])","343":"IterableSubject::::containsAtLeastElementsIn(java.lang.Object[])","344":"IterableSubject::::containsAtLeastElementsIn(java.lang.Object[])","345":"IterableSubject::::containsAtLeastElementsIn(java.lang.Object[])","346":"IterableSubject::::containsAtLeastElementsIn(java.lang.Object[])","348":"IterableSubject::::failAtLeast(java.util.Collection<?>,java.util.Collection<?>)","349":"IterableSubject::::failAtLeast(java.util.Collection<?>,java.util.Collection<?>)","350":"IterableSubject::::failAtLeast(java.util.Collection<?>,java.util.Collection<?>)","351":"IterableSubject::::failAtLeast(java.util.Collection<?>,java.util.Collection<?>)","352":"IterableSubject::::failAtLeast(java.util.Collection<?>,java.util.Collection<?>)","353":"IterableSubject::::failAtLeast(java.util.Collection<?>,java.util.Collection<?>)","354":"IterableSubject::::failAtLeast(java.util.Collection<?>,java.util.Collection<?>)","355":"IterableSubject::::failAtLeast(java.util.Collection<?>,java.util.Collection<?>)","356":"IterableSubject::::failAtLeast(java.util.Collection<?>,java.util.Collection<?>)","357":"IterableSubject::::failAtLeast(java.util.Collection<?>,java.util.Collection<?>)","358":"IterableSubject::::failAtLeast(java.util.Collection<?>,java.util.Collection<?>)","359":"IterableSubject::::failAtLeast(java.util.Collection<?>,java.util.Collection<?>)","360":"IterableSubject::::failAtLeast(java.util.Collection<?>,java.util.Collection<?>)","361":"IterableSubject::::failAtLeast(java.util.Collection<?>,java.util.Collection<?>)","362":"IterableSubject::::failAtLeast(java.util.Collection<?>,java.util.Collection<?>)","363":"IterableSubject::::failAtLeast(java.util.Collection<?>,java.util.Collection<?>)","364":"IterableSubject::::failAtLeast(java.util.Collection<?>,java.util.Collection<?>)","365":"IterableSubject::::failAtLeast(java.util.Collection<?>,java.util.Collection<?>)","366":"IterableSubject::::failAtLeast(java.util.Collection<?>,java.util.Collection<?>)","367":"IterableSubject::::failAtLeast(java.util.Collection<?>,java.util.Collection<?>)","368":"IterableSubject::::failAtLeast(java.util.Collection<?>,java.util.Collection<?>)","369":"IterableSubject::::failAtLeast(java.util.Collection<?>,java.util.Collection<?>)","375":"IterableSubject::::moveElements(java.util.List<?>,java.util.Collection<java.lang.Object>,int)","376":"IterableSubject::::moveElements(java.util.List<?>,java.util.Collection<java.lang.Object>,int)","377":"IterableSubject::::moveElements(java.util.List<?>,java.util.Collection<java.lang.Object>,int)","378":"IterableSubject::::moveElements(java.util.List<?>,java.util.Collection<java.lang.Object>,int)","379":"IterableSubject::::moveElements(java.util.List<?>,java.util.Collection<java.lang.Object>,int)","380":"IterableSubject::::moveElements(java.util.List<?>,java.util.Collection<java.lang.Object>,int)","395":"IterableSubject::::containsExactly(java.lang.Object[])","396":"IterableSubject::::containsExactly(java.lang.Object[])","397":"IterableSubject::::containsExactly(java.lang.Object[])","398":"IterableSubject::::containsExactly(java.lang.Object[])","399":"IterableSubject::::containsExactly(java.lang.Object[])","400":"IterableSubject::::containsExactly(java.lang.Object[])","401":"IterableSubject::::containsExactly(java.lang.Object[])","413":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>)","414":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>)","415":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>)","416":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>)","427":"IterableSubject::::containsExactlyElementsIn(java.lang.Object[])","428":"IterableSubject::::containsExactlyElementsIn(java.lang.Object[])","429":"IterableSubject::::containsExactlyElementsIn(java.lang.Object[])","430":"IterableSubject::::containsExactlyElementsIn(java.lang.Object[])","431":"IterableSubject::::containsExactlyElementsIn(java.lang.Object[])","432":"IterableSubject::::containsExactlyElementsIn(java.lang.Object[])","433":"IterableSubject::::containsExactlyElementsIn(java.lang.Object[])","434":"IterableSubject::::containsExactlyElementsIn(java.lang.Object[])","435":"IterableSubject::::containsExactlyElementsIn(java.lang.Object[])","437":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","438":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","439":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","440":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","441":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","442":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","443":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","444":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","445":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","446":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","447":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","448":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","449":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","450":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","451":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","452":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","453":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","454":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","455":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","456":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","457":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","458":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","459":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","460":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","461":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","462":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","463":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","464":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","465":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","466":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","467":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","468":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","469":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","470":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","471":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","472":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","473":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","474":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","475":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","476":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","477":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","478":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","479":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","480":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","481":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","482":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","483":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","484":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","485":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","486":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","487":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","488":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","489":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","490":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","491":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","492":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","493":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","494":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","495":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","496":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","497":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","498":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","499":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","500":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","501":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","502":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","503":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","504":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","505":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","506":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","507":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","508":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","509":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","510":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","511":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","512":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","513":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","514":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","515":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","516":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","517":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","518":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","519":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","520":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","521":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","522":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","523":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","524":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","525":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","526":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","527":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","528":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","529":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","530":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","531":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","532":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","533":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","534":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","535":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","536":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","537":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","538":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","539":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","540":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","541":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","542":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","543":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","544":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)","546":"IterableSubject::::failExactly(java.lang.Iterable<?>,boolean,java.util.Collection<?>,java.util.Collection<?>)","547":"IterableSubject::::failExactly(java.lang.Iterable<?>,boolean,java.util.Collection<?>,java.util.Collection<?>)","548":"IterableSubject::::failExactly(java.lang.Iterable<?>,boolean,java.util.Collection<?>,java.util.Collection<?>)","549":"IterableSubject::::failExactly(java.lang.Iterable<?>,boolean,java.util.Collection<?>,java.util.Collection<?>)","550":"IterableSubject::::failExactly(java.lang.Iterable<?>,boolean,java.util.Collection<?>,java.util.Collection<?>)","551":"IterableSubject::::failExactly(java.lang.Iterable<?>,boolean,java.util.Collection<?>,java.util.Collection<?>)","552":"IterableSubject::::failExactly(java.lang.Iterable<?>,boolean,java.util.Collection<?>,java.util.Collection<?>)","553":"IterableSubject::::failExactly(java.lang.Iterable<?>,boolean,java.util.Collection<?>,java.util.Collection<?>)","554":"IterableSubject::::failExactly(java.lang.Iterable<?>,boolean,java.util.Collection<?>,java.util.Collection<?>)","555":"IterableSubject::::failExactly(java.lang.Iterable<?>,boolean,java.util.Collection<?>,java.util.Collection<?>)","556":"IterableSubject::::failExactly(java.lang.Iterable<?>,boolean,java.util.Collection<?>,java.util.Collection<?>)","557":"IterableSubject::::failExactly(java.lang.Iterable<?>,boolean,java.util.Collection<?>,java.util.Collection<?>)","558":"IterableSubject::::failExactly(java.lang.Iterable<?>,boolean,java.util.Collection<?>,java.util.Collection<?>)","559":"IterableSubject::::failExactly(java.lang.Iterable<?>,boolean,java.util.Collection<?>,java.util.Collection<?>)","560":"IterableSubject::::failExactly(java.lang.Iterable<?>,boolean,java.util.Collection<?>,java.util.Collection<?>)","561":"IterableSubject::::failExactly(java.lang.Iterable<?>,boolean,java.util.Collection<?>,java.util.Collection<?>)","562":"IterableSubject::::failExactly(java.lang.Iterable<?>,boolean,java.util.Collection<?>,java.util.Collection<?>)","563":"IterableSubject::::failExactly(java.lang.Iterable<?>,boolean,java.util.Collection<?>,java.util.Collection<?>)","564":"IterableSubject::::failExactly(java.lang.Iterable<?>,boolean,java.util.Collection<?>,java.util.Collection<?>)","565":"IterableSubject::::failExactly(java.lang.Iterable<?>,boolean,java.util.Collection<?>,java.util.Collection<?>)","566":"IterableSubject::::failExactly(java.lang.Iterable<?>,boolean,java.util.Collection<?>,java.util.Collection<?>)","568":"IterableSubject::::makeElementFactsForBoth(java.lang.String,java.util.Collection<?>,java.lang.String,java.util.Collection<?>)","569":"IterableSubject::::makeElementFactsForBoth(java.lang.String,java.util.Collection<?>,java.lang.String,java.util.Collection<?>)","570":"IterableSubject::::makeElementFactsForBoth(java.lang.String,java.util.Collection<?>,java.lang.String,java.util.Collection<?>)","571":"IterableSubject::::makeElementFactsForBoth(java.lang.String,java.util.Collection<?>,java.lang.String,java.util.Collection<?>)","572":"IterableSubject::::makeElementFactsForBoth(java.lang.String,java.util.Collection<?>,java.lang.String,java.util.Collection<?>)","573":"IterableSubject::::makeElementFactsForBoth(java.lang.String,java.util.Collection<?>,java.lang.String,java.util.Collection<?>)","574":"IterableSubject::::makeElementFactsForBoth(java.lang.String,java.util.Collection<?>,java.lang.String,java.util.Collection<?>)","575":"IterableSubject::::makeElementFactsForBoth(java.lang.String,java.util.Collection<?>,java.lang.String,java.util.Collection<?>)","576":"IterableSubject::::makeElementFactsForBoth(java.lang.String,java.util.Collection<?>,java.lang.String,java.util.Collection<?>)","577":"IterableSubject::::makeElementFactsForBoth(java.lang.String,java.util.Collection<?>,java.lang.String,java.util.Collection<?>)","578":"IterableSubject::::makeElementFactsForBoth(java.lang.String,java.util.Collection<?>,java.lang.String,java.util.Collection<?>)","579":"IterableSubject::::makeElementFactsForBoth(java.lang.String,java.util.Collection<?>,java.lang.String,java.util.Collection<?>)","580":"IterableSubject::::makeElementFactsForBoth(java.lang.String,java.util.Collection<?>,java.lang.String,java.util.Collection<?>)","581":"IterableSubject::::makeElementFactsForBoth(java.lang.String,java.util.Collection<?>,java.lang.String,java.util.Collection<?>)","582":"IterableSubject::::makeElementFactsForBoth(java.lang.String,java.util.Collection<?>,java.lang.String,java.util.Collection<?>)","583":"IterableSubject::::makeElementFactsForBoth(java.lang.String,java.util.Collection<?>,java.lang.String,java.util.Collection<?>)","584":"IterableSubject::::makeElementFactsForBoth(java.lang.String,java.util.Collection<?>,java.lang.String,java.util.Collection<?>)","585":"IterableSubject::::makeElementFactsForBoth(java.lang.String,java.util.Collection<?>,java.lang.String,java.util.Collection<?>)","586":"IterableSubject::::makeElementFactsForBoth(java.lang.String,java.util.Collection<?>,java.lang.String,java.util.Collection<?>)","587":"IterableSubject::::makeElementFactsForBoth(java.lang.String,java.util.Collection<?>,java.lang.String,java.util.Collection<?>)","588":"IterableSubject::::makeElementFactsForBoth(java.lang.String,java.util.Collection<?>,java.lang.String,java.util.Collection<?>)","589":"IterableSubject::::makeElementFactsForBoth(java.lang.String,java.util.Collection<?>,java.lang.String,java.util.Collection<?>)","590":"IterableSubject::::makeElementFactsForBoth(java.lang.String,java.util.Collection<?>,java.lang.String,java.util.Collection<?>)","591":"IterableSubject::::makeElementFactsForBoth(java.lang.String,java.util.Collection<?>,java.lang.String,java.util.Collection<?>)","592":"IterableSubject::::makeElementFactsForBoth(java.lang.String,java.util.Collection<?>,java.lang.String,java.util.Collection<?>)","598":"IterableSubject::::makeElementFacts(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped,com.google.common.truth.IterableSubject.ElementFactGrouping)","599":"IterableSubject::::makeElementFacts(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped,com.google.common.truth.IterableSubject.ElementFactGrouping)","600":"IterableSubject::::makeElementFacts(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped,com.google.common.truth.IterableSubject.ElementFactGrouping)","601":"IterableSubject::::makeElementFacts(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped,com.google.common.truth.IterableSubject.ElementFactGrouping)","602":"IterableSubject::::makeElementFacts(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped,com.google.common.truth.IterableSubject.ElementFactGrouping)","603":"IterableSubject::::makeElementFacts(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped,com.google.common.truth.IterableSubject.ElementFactGrouping)","604":"IterableSubject::::makeElementFacts(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped,com.google.common.truth.IterableSubject.ElementFactGrouping)","605":"IterableSubject::::makeElementFacts(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped,com.google.common.truth.IterableSubject.ElementFactGrouping)","606":"IterableSubject::::makeElementFacts(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped,com.google.common.truth.IterableSubject.ElementFactGrouping)","607":"IterableSubject::::makeElementFacts(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped,com.google.common.truth.IterableSubject.ElementFactGrouping)","608":"IterableSubject::::makeElementFacts(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped,com.google.common.truth.IterableSubject.ElementFactGrouping)","609":"IterableSubject::::makeElementFacts(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped,com.google.common.truth.IterableSubject.ElementFactGrouping)","610":"IterableSubject::::makeElementFacts(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped,com.google.common.truth.IterableSubject.ElementFactGrouping)","611":"IterableSubject::::makeElementFacts(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped,com.google.common.truth.IterableSubject.ElementFactGrouping)","612":"IterableSubject::::makeElementFacts(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped,com.google.common.truth.IterableSubject.ElementFactGrouping)","613":"IterableSubject::::makeElementFacts(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped,com.google.common.truth.IterableSubject.ElementFactGrouping)","614":"IterableSubject::::makeElementFacts(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped,com.google.common.truth.IterableSubject.ElementFactGrouping)","615":"IterableSubject::::makeElementFacts(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped,com.google.common.truth.IterableSubject.ElementFactGrouping)","616":"IterableSubject::::makeElementFacts(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped,com.google.common.truth.IterableSubject.ElementFactGrouping)","617":"IterableSubject::::makeElementFacts(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped,com.google.common.truth.IterableSubject.ElementFactGrouping)","618":"IterableSubject::::makeElementFacts(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped,com.google.common.truth.IterableSubject.ElementFactGrouping)","626":"IterableSubject::::keyToGoWithElementsString(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped)","627":"IterableSubject::::keyToGoWithElementsString(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped)","628":"IterableSubject::::keyToGoWithElementsString(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped)","629":"IterableSubject::::keyToGoWithElementsString(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped)","630":"IterableSubject::::keyToGoWithElementsString(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped)","631":"IterableSubject::::keyToGoWithElementsString(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped)","632":"IterableSubject::::keyToGoWithElementsString(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped)","633":"IterableSubject::::keyToGoWithElementsString(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped)","635":"IterableSubject::::keyToServeAsHeader(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped)","636":"IterableSubject::::keyToServeAsHeader(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped)","637":"IterableSubject::::keyToServeAsHeader(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped)","638":"IterableSubject::::keyToServeAsHeader(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped)","639":"IterableSubject::::keyToServeAsHeader(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped)","640":"IterableSubject::::keyToServeAsHeader(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped)","641":"IterableSubject::::keyToServeAsHeader(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped)","642":"IterableSubject::::keyToServeAsHeader(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped)","643":"IterableSubject::::keyToServeAsHeader(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped)","644":"IterableSubject::::keyToServeAsHeader(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped)","645":"IterableSubject::::keyToServeAsHeader(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped)","646":"IterableSubject::::keyToServeAsHeader(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped)","647":"IterableSubject::::keyToServeAsHeader(java.lang.String,com.google.common.truth.SubjectUtils.DuplicateGroupedAndTyped)","649":"IterableSubject::::numberString(int,int)","650":"IterableSubject::::numberString(int,int)","651":"IterableSubject::::numberString(int,int)","715":"IterableSubject::::containsNoneOf(java.lang.Object,java.lang.Object,java.lang.Object[])","716":"IterableSubject::::containsNoneOf(java.lang.Object,java.lang.Object,java.lang.Object[])","717":"IterableSubject::::containsNoneOf(java.lang.Object,java.lang.Object,java.lang.Object[])","718":"IterableSubject::::containsNoneOf(java.lang.Object,java.lang.Object,java.lang.Object[])","719":"IterableSubject::::containsNoneOf(java.lang.Object,java.lang.Object,java.lang.Object[])","720":"IterableSubject::::containsNoneOf(java.lang.Object,java.lang.Object,java.lang.Object[])","727":"IterableSubject::::containsNoneIn(java.lang.Iterable<?>)","728":"IterableSubject::::containsNoneIn(java.lang.Iterable<?>)","729":"IterableSubject::::containsNoneIn(java.lang.Iterable<?>)","730":"IterableSubject::::containsNoneIn(java.lang.Iterable<?>)","731":"IterableSubject::::containsNoneIn(java.lang.Iterable<?>)","732":"IterableSubject::::containsNoneIn(java.lang.Iterable<?>)","733":"IterableSubject::::containsNoneIn(java.lang.Iterable<?>)","734":"IterableSubject::::containsNoneIn(java.lang.Iterable<?>)","735":"IterableSubject::::containsNoneIn(java.lang.Iterable<?>)","736":"IterableSubject::::containsNoneIn(java.lang.Iterable<?>)","737":"IterableSubject::::containsNoneIn(java.lang.Iterable<?>)","738":"IterableSubject::::containsNoneIn(java.lang.Iterable<?>)","739":"IterableSubject::::containsNoneIn(java.lang.Iterable<?>)","740":"IterableSubject::::containsNoneIn(java.lang.Iterable<?>)","741":"IterableSubject::::containsNoneIn(java.lang.Iterable<?>)","748":"IterableSubject::::containsNoneIn(java.lang.Object[])","749":"IterableSubject::::containsNoneIn(java.lang.Object[])","750":"IterableSubject::::containsNoneIn(java.lang.Object[])","751":"IterableSubject::::containsNoneIn(java.lang.Object[])","777":"IterableSubject::::isInStrictOrder()","778":"IterableSubject::::isInStrictOrder()","779":"IterableSubject::::isInStrictOrder()","788":"IterableSubject::::isInStrictOrder(java.util.Comparator<?>)","789":"IterableSubject::::isInStrictOrder(java.util.Comparator<?>)","790":"IterableSubject::::isInStrictOrder(java.util.Comparator<?>)","791":"IterableSubject::::isInStrictOrder(java.util.Comparator<?>)","792":"IterableSubject::::isInStrictOrder(java.util.Comparator<?>)","793":"IterableSubject::::isInStrictOrder(java.util.Comparator<?>)","794":"IterableSubject::::isInStrictOrder(java.util.Comparator<?>)","795":"IterableSubject::::isInStrictOrder(java.util.Comparator<?>)","796":"IterableSubject::::isInStrictOrder(java.util.Comparator<?>)","797":"IterableSubject::::isInStrictOrder(java.util.Comparator<?>)","798":"IterableSubject::::isInStrictOrder(java.util.Comparator<?>)","799":"IterableSubject::::isInStrictOrder(java.util.Comparator<?>)","810":"IterableSubject::::isInOrder()","811":"IterableSubject::::isInOrder()","812":"IterableSubject::::isInOrder()","820":"IterableSubject::::isInOrder(java.util.Comparator<?>)","821":"IterableSubject::::isInOrder(java.util.Comparator<?>)","822":"IterableSubject::::isInOrder(java.util.Comparator<?>)","823":"IterableSubject::::isInOrder(java.util.Comparator<?>)","824":"IterableSubject::::isInOrder(java.util.Comparator<?>)","825":"IterableSubject::::isInOrder(java.util.Comparator<?>)","826":"IterableSubject::::isInOrder(java.util.Comparator<?>)","827":"IterableSubject::::isInOrder(java.util.Comparator<?>)","828":"IterableSubject::::isInOrder(java.util.Comparator<?>)","829":"IterableSubject::::isInOrder(java.util.Comparator<?>)","830":"IterableSubject::::isInOrder(java.util.Comparator<?>)","831":"IterableSubject::::isInOrder(java.util.Comparator<?>)","834":"IterableSubject.PairwiseChecker::::check(java.lang.Object,java.lang.Object)","837":"IterableSubject::::pairwiseCheck(java.lang.String,com.google.common.truth.IterableSubject.PairwiseChecker)","838":"IterableSubject::::pairwiseCheck(java.lang.String,com.google.common.truth.IterableSubject.PairwiseChecker)","839":"IterableSubject::::pairwiseCheck(java.lang.String,com.google.common.truth.IterableSubject.PairwiseChecker)","840":"IterableSubject::::pairwiseCheck(java.lang.String,com.google.common.truth.IterableSubject.PairwiseChecker)","841":"IterableSubject::::pairwiseCheck(java.lang.String,com.google.common.truth.IterableSubject.PairwiseChecker)","842":"IterableSubject::::pairwiseCheck(java.lang.String,com.google.common.truth.IterableSubject.PairwiseChecker)","843":"IterableSubject::::pairwiseCheck(java.lang.String,com.google.common.truth.IterableSubject.PairwiseChecker)","844":"IterableSubject::::pairwiseCheck(java.lang.String,com.google.common.truth.IterableSubject.PairwiseChecker)","845":"IterableSubject::::pairwiseCheck(java.lang.String,com.google.common.truth.IterableSubject.PairwiseChecker)","846":"IterableSubject::::pairwiseCheck(java.lang.String,com.google.common.truth.IterableSubject.PairwiseChecker)","847":"IterableSubject::::pairwiseCheck(java.lang.String,com.google.common.truth.IterableSubject.PairwiseChecker)","848":"IterableSubject::::pairwiseCheck(java.lang.String,com.google.common.truth.IterableSubject.PairwiseChecker)","849":"IterableSubject::::pairwiseCheck(java.lang.String,com.google.common.truth.IterableSubject.PairwiseChecker)","850":"IterableSubject::::pairwiseCheck(java.lang.String,com.google.common.truth.IterableSubject.PairwiseChecker)","851":"IterableSubject::::pairwiseCheck(java.lang.String,com.google.common.truth.IterableSubject.PairwiseChecker)","852":"IterableSubject::::pairwiseCheck(java.lang.String,com.google.common.truth.IterableSubject.PairwiseChecker)","853":"IterableSubject::::pairwiseCheck(java.lang.String,com.google.common.truth.IterableSubject.PairwiseChecker)","854":"IterableSubject::::pairwiseCheck(java.lang.String,com.google.common.truth.IterableSubject.PairwiseChecker)","859":"IterableSubject::::isNoneOf(java.lang.Object,java.lang.Object,java.lang.Object[])","860":"IterableSubject::::isNoneOf(java.lang.Object,java.lang.Object,java.lang.Object[])","861":"IterableSubject::::isNoneOf(java.lang.Object,java.lang.Object,java.lang.Object[])","862":"IterableSubject::::isNoneOf(java.lang.Object,java.lang.Object,java.lang.Object[])","863":"IterableSubject::::isNoneOf(java.lang.Object,java.lang.Object,java.lang.Object[])","864":"IterableSubject::::isNoneOf(java.lang.Object,java.lang.Object,java.lang.Object[])","869":"IterableSubject::::isNotIn(java.lang.Iterable<?>)","870":"IterableSubject::::isNotIn(java.lang.Iterable<?>)","871":"IterableSubject::::isNotIn(java.lang.Iterable<?>)","872":"IterableSubject::::isNotIn(java.lang.Iterable<?>)","873":"IterableSubject::::isNotIn(java.lang.Iterable<?>)","874":"IterableSubject::::isNotIn(java.lang.Iterable<?>)","875":"IterableSubject::::isNotIn(java.lang.Iterable<?>)","876":"IterableSubject::::isNotIn(java.lang.Iterable<?>)","877":"IterableSubject::::isNotIn(java.lang.Iterable<?>)","878":"IterableSubject::::isNotIn(java.lang.Iterable<?>)","879":"IterableSubject::::isNotIn(java.lang.Iterable<?>)","880":"IterableSubject::::isNotIn(java.lang.Iterable<?>)","881":"IterableSubject::::isNotIn(java.lang.Iterable<?>)","882":"IterableSubject::::isNotIn(java.lang.Iterable<?>)","883":"IterableSubject::::isNotIn(java.lang.Iterable<?>)","884":"IterableSubject::::isNotIn(java.lang.Iterable<?>)","885":"IterableSubject::::isNotIn(java.lang.Iterable<?>)","886":"IterableSubject::::isNotIn(java.lang.Iterable<?>)","887":"IterableSubject::::isNotIn(java.lang.Iterable<?>)","888":"IterableSubject::::isNotIn(java.lang.Iterable<?>)","889":"IterableSubject::::isNotIn(java.lang.Iterable<?>)","890":"IterableSubject::::isNotIn(java.lang.Iterable<?>)","891":"IterableSubject::::isNotIn(java.lang.Iterable<?>)","892":"IterableSubject::::isNotIn(java.lang.Iterable<?>)","893":"IterableSubject::::isNotIn(java.lang.Iterable<?>)","895":"IterableSubject::::fullContents()","896":"IterableSubject::::fullContents()","897":"IterableSubject::::fullContents()","916":"IterableSubject::::comparingElementsUsing(com.google.common.truth.Correspondence<? super A, ? super E>)","917":"IterableSubject::::comparingElementsUsing(com.google.common.truth.Correspondence<? super A, ? super E>)","918":"IterableSubject::::comparingElementsUsing(com.google.common.truth.Correspondence<? super A, ? super E>)","919":"IterableSubject::::comparingElementsUsing(com.google.common.truth.Correspondence<? super A, ? super E>)","920":"IterableSubject::::comparingElementsUsing(com.google.common.truth.Correspondence<? super A, ? super E>)","951":"IterableSubject::::formattingDiffsUsing(com.google.common.truth.Correspondence.DiffFormatter<? super T, ? super T>)","952":"IterableSubject::::formattingDiffsUsing(com.google.common.truth.Correspondence.DiffFormatter<? super T, ? super T>)","953":"IterableSubject::::formattingDiffsUsing(com.google.common.truth.Correspondence.DiffFormatter<? super T, ? super T>)","954":"IterableSubject::::formattingDiffsUsing(com.google.common.truth.Correspondence.DiffFormatter<? super T, ? super T>)","990":"IterableSubject.UsingCorrespondence::::equals(java.lang.Object)","991":"IterableSubject.UsingCorrespondence::::equals(java.lang.Object)","992":"IterableSubject.UsingCorrespondence::::equals(java.lang.Object)","993":"IterableSubject.UsingCorrespondence::::equals(java.lang.Object)","994":"IterableSubject.UsingCorrespondence::::equals(java.lang.Object)","995":"IterableSubject.UsingCorrespondence::::equals(java.lang.Object)","996":"IterableSubject.UsingCorrespondence::::equals(java.lang.Object)","997":"IterableSubject.UsingCorrespondence::::equals(java.lang.Object)","998":"IterableSubject.UsingCorrespondence::::equals(java.lang.Object)","999":"IterableSubject.UsingCorrespondence::::equals(java.lang.Object)","1005":"IterableSubject.UsingCorrespondence::::hashCode()","1006":"IterableSubject.UsingCorrespondence::::hashCode()","1007":"IterableSubject.UsingCorrespondence::::hashCode()","1008":"IterableSubject.UsingCorrespondence::::hashCode()","1009":"IterableSubject.UsingCorrespondence::::hashCode()","1010":"IterableSubject.UsingCorrespondence::::hashCode()","1016":"IterableSubject.UsingCorrespondence::::toString()","1017":"IterableSubject.UsingCorrespondence::::toString()","1018":"IterableSubject.UsingCorrespondence::::toString()","1019":"IterableSubject.UsingCorrespondence::::toString()","1020":"IterableSubject.UsingCorrespondence::::toString()","1021":"IterableSubject.UsingCorrespondence::::toString()","1022":"IterableSubject.UsingCorrespondence::::toString()","1023":"IterableSubject.UsingCorrespondence::::toString()","1123":"IterableSubject.UsingCorrespondence::::contains(E)","1124":"IterableSubject.UsingCorrespondence::::contains(E)","1125":"IterableSubject.UsingCorrespondence::::contains(E)","1126":"IterableSubject.UsingCorrespondence::::contains(E)","1127":"IterableSubject.UsingCorrespondence::::contains(E)","1128":"IterableSubject.UsingCorrespondence::::contains(E)","1129":"IterableSubject.UsingCorrespondence::::contains(E)","1130":"IterableSubject.UsingCorrespondence::::contains(E)","1131":"IterableSubject.UsingCorrespondence::::contains(E)","1132":"IterableSubject.UsingCorrespondence::::contains(E)","1133":"IterableSubject.UsingCorrespondence::::contains(E)","1134":"IterableSubject.UsingCorrespondence::::contains(E)","1135":"IterableSubject.UsingCorrespondence::::contains(E)","1136":"IterableSubject.UsingCorrespondence::::contains(E)","1137":"IterableSubject.UsingCorrespondence::::contains(E)","1138":"IterableSubject.UsingCorrespondence::::contains(E)","1139":"IterableSubject.UsingCorrespondence::::contains(E)","1140":"IterableSubject.UsingCorrespondence::::contains(E)","1141":"IterableSubject.UsingCorrespondence::::contains(E)","1142":"IterableSubject.UsingCorrespondence::::contains(E)","1143":"IterableSubject.UsingCorrespondence::::contains(E)","1144":"IterableSubject.UsingCorrespondence::::contains(E)","1145":"IterableSubject.UsingCorrespondence::::contains(E)","1146":"IterableSubject.UsingCorrespondence::::contains(E)","1147":"IterableSubject.UsingCorrespondence::::contains(E)","1148":"IterableSubject.UsingCorrespondence::::contains(E)","1149":"IterableSubject.UsingCorrespondence::::contains(E)","1150":"IterableSubject.UsingCorrespondence::::contains(E)","1151":"IterableSubject.UsingCorrespondence::::contains(E)","1152":"IterableSubject.UsingCorrespondence::::contains(E)","1153":"IterableSubject.UsingCorrespondence::::contains(E)","1154":"IterableSubject.UsingCorrespondence::::contains(E)","1155":"IterableSubject.UsingCorrespondence::::contains(E)","1156":"IterableSubject.UsingCorrespondence::::contains(E)","1157":"IterableSubject.UsingCorrespondence::::contains(E)","1158":"IterableSubject.UsingCorrespondence::::contains(E)","1159":"IterableSubject.UsingCorrespondence::::contains(E)","1160":"IterableSubject.UsingCorrespondence::::contains(E)","1161":"IterableSubject.UsingCorrespondence::::contains(E)","1162":"IterableSubject.UsingCorrespondence::::contains(E)","1163":"IterableSubject.UsingCorrespondence::::contains(E)","1164":"IterableSubject.UsingCorrespondence::::contains(E)","1165":"IterableSubject.UsingCorrespondence::::contains(E)","1166":"IterableSubject.UsingCorrespondence::::contains(E)","1167":"IterableSubject.UsingCorrespondence::::contains(E)","1168":"IterableSubject.UsingCorrespondence::::contains(E)","1169":"IterableSubject.UsingCorrespondence::::contains(E)","1170":"IterableSubject.UsingCorrespondence::::contains(E)","1173":"IterableSubject.UsingCorrespondence::::doesNotContain(E)","1174":"IterableSubject.UsingCorrespondence::::doesNotContain(E)","1175":"IterableSubject.UsingCorrespondence::::doesNotContain(E)","1176":"IterableSubject.UsingCorrespondence::::doesNotContain(E)","1177":"IterableSubject.UsingCorrespondence::::doesNotContain(E)","1178":"IterableSubject.UsingCorrespondence::::doesNotContain(E)","1179":"IterableSubject.UsingCorrespondence::::doesNotContain(E)","1180":"IterableSubject.UsingCorrespondence::::doesNotContain(E)","1181":"IterableSubject.UsingCorrespondence::::doesNotContain(E)","1182":"IterableSubject.UsingCorrespondence::::doesNotContain(E)","1183":"IterableSubject.UsingCorrespondence::::doesNotContain(E)","1184":"IterableSubject.UsingCorrespondence::::doesNotContain(E)","1185":"IterableSubject.UsingCorrespondence::::doesNotContain(E)","1186":"IterableSubject.UsingCorrespondence::::doesNotContain(E)","1187":"IterableSubject.UsingCorrespondence::::doesNotContain(E)","1188":"IterableSubject.UsingCorrespondence::::doesNotContain(E)","1189":"IterableSubject.UsingCorrespondence::::doesNotContain(E)","1190":"IterableSubject.UsingCorrespondence::::doesNotContain(E)","1191":"IterableSubject.UsingCorrespondence::::doesNotContain(E)","1192":"IterableSubject.UsingCorrespondence::::doesNotContain(E)","1193":"IterableSubject.UsingCorrespondence::::doesNotContain(E)","1194":"IterableSubject.UsingCorrespondence::::doesNotContain(E)","1195":"IterableSubject.UsingCorrespondence::::doesNotContain(E)","1196":"IterableSubject.UsingCorrespondence::::doesNotContain(E)","1197":"IterableSubject.UsingCorrespondence::::doesNotContain(E)","1198":"IterableSubject.UsingCorrespondence::::doesNotContain(E)","1199":"IterableSubject.UsingCorrespondence::::doesNotContain(E)","1200":"IterableSubject.UsingCorrespondence::::doesNotContain(E)","1201":"IterableSubject.UsingCorrespondence::::doesNotContain(E)","1202":"IterableSubject.UsingCorrespondence::::doesNotContain(E)","1203":"IterableSubject.UsingCorrespondence::::doesNotContain(E)","1204":"IterableSubject.UsingCorrespondence::::doesNotContain(E)","1218":"IterableSubject.UsingCorrespondence::::containsExactly(E[])","1219":"IterableSubject.UsingCorrespondence::::containsExactly(E[])","1220":"IterableSubject.UsingCorrespondence::::containsExactly(E[])","1221":"IterableSubject.UsingCorrespondence::::containsExactly(E[])","1222":"IterableSubject.UsingCorrespondence::::containsExactly(E[])","1223":"IterableSubject.UsingCorrespondence::::containsExactly(E[])","1233":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1234":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1235":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1236":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1237":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1238":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1239":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1240":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1241":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1242":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1243":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1244":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1245":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1246":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1247":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1248":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1249":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1250":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1251":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1252":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1253":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1254":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1255":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1256":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1257":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1258":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1259":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1260":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1261":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1262":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1263":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1264":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1265":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1266":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1267":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1268":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1269":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1270":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1271":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1272":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1273":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1274":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1275":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1276":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1277":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1278":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1279":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1280":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1281":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1282":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1283":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1284":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1285":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1286":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1287":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1288":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1289":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1290":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1291":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1292":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1293":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1294":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1295":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1296":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1297":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1298":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1299":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1300":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(java.lang.Iterable<? extends E>)","1310":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(E[])","1311":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(E[])","1312":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(E[])","1313":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(E[])","1314":"IterableSubject.UsingCorrespondence::::containsExactlyElementsIn(E[])","1321":"IterableSubject.UsingCorrespondence::::correspondInOrderExactly(java.util.Iterator<? extends A>,java.util.Iterator<? extends E>)","1322":"IterableSubject.UsingCorrespondence::::correspondInOrderExactly(java.util.Iterator<? extends A>,java.util.Iterator<? extends E>)","1323":"IterableSubject.UsingCorrespondence::::correspondInOrderExactly(java.util.Iterator<? extends A>,java.util.Iterator<? extends E>)","1324":"IterableSubject.UsingCorrespondence::::correspondInOrderExactly(java.util.Iterator<? extends A>,java.util.Iterator<? extends E>)","1325":"IterableSubject.UsingCorrespondence::::correspondInOrderExactly(java.util.Iterator<? extends A>,java.util.Iterator<? extends E>)","1326":"IterableSubject.UsingCorrespondence::::correspondInOrderExactly(java.util.Iterator<? extends A>,java.util.Iterator<? extends E>)","1327":"IterableSubject.UsingCorrespondence::::correspondInOrderExactly(java.util.Iterator<? extends A>,java.util.Iterator<? extends E>)","1328":"IterableSubject.UsingCorrespondence::::correspondInOrderExactly(java.util.Iterator<? extends A>,java.util.Iterator<? extends E>)","1329":"IterableSubject.UsingCorrespondence::::correspondInOrderExactly(java.util.Iterator<? extends A>,java.util.Iterator<? extends E>)","1330":"IterableSubject.UsingCorrespondence::::correspondInOrderExactly(java.util.Iterator<? extends A>,java.util.Iterator<? extends E>)","1331":"IterableSubject.UsingCorrespondence::::correspondInOrderExactly(java.util.Iterator<? extends A>,java.util.Iterator<? extends E>)","1332":"IterableSubject.UsingCorrespondence::::correspondInOrderExactly(java.util.Iterator<? extends A>,java.util.Iterator<? extends E>)","1333":"IterableSubject.UsingCorrespondence::::correspondInOrderExactly(java.util.Iterator<? extends A>,java.util.Iterator<? extends E>)","1334":"IterableSubject.UsingCorrespondence::::correspondInOrderExactly(java.util.Iterator<? extends A>,java.util.Iterator<? extends E>)","1335":"IterableSubject.UsingCorrespondence::::correspondInOrderExactly(java.util.Iterator<? extends A>,java.util.Iterator<? extends E>)","1344":"IterableSubject.UsingCorrespondence::::findCandidateMapping(java.util.List<? extends A>,java.util.List<? extends E>,com.google.common.truth.Correspondence.ExceptionStore)","1345":"IterableSubject.UsingCorrespondence::::findCandidateMapping(java.util.List<? extends A>,java.util.List<? extends E>,com.google.common.truth.Correspondence.ExceptionStore)","1346":"IterableSubject.UsingCorrespondence::::findCandidateMapping(java.util.List<? extends A>,java.util.List<? extends E>,com.google.common.truth.Correspondence.ExceptionStore)","1347":"IterableSubject.UsingCorrespondence::::findCandidateMapping(java.util.List<? extends A>,java.util.List<? extends E>,com.google.common.truth.Correspondence.ExceptionStore)","1348":"IterableSubject.UsingCorrespondence::::findCandidateMapping(java.util.List<? extends A>,java.util.List<? extends E>,com.google.common.truth.Correspondence.ExceptionStore)","1349":"IterableSubject.UsingCorrespondence::::findCandidateMapping(java.util.List<? extends A>,java.util.List<? extends E>,com.google.common.truth.Correspondence.ExceptionStore)","1350":"IterableSubject.UsingCorrespondence::::findCandidateMapping(java.util.List<? extends A>,java.util.List<? extends E>,com.google.common.truth.Correspondence.ExceptionStore)","1351":"IterableSubject.UsingCorrespondence::::findCandidateMapping(java.util.List<? extends A>,java.util.List<? extends E>,com.google.common.truth.Correspondence.ExceptionStore)","1352":"IterableSubject.UsingCorrespondence::::findCandidateMapping(java.util.List<? extends A>,java.util.List<? extends E>,com.google.common.truth.Correspondence.ExceptionStore)","1353":"IterableSubject.UsingCorrespondence::::findCandidateMapping(java.util.List<? extends A>,java.util.List<? extends E>,com.google.common.truth.Correspondence.ExceptionStore)","1354":"IterableSubject.UsingCorrespondence::::findCandidateMapping(java.util.List<? extends A>,java.util.List<? extends E>,com.google.common.truth.Correspondence.ExceptionStore)","1355":"IterableSubject.UsingCorrespondence::::findCandidateMapping(java.util.List<? extends A>,java.util.List<? extends E>,com.google.common.truth.Correspondence.ExceptionStore)","1356":"IterableSubject.UsingCorrespondence::::findCandidateMapping(java.util.List<? extends A>,java.util.List<? extends E>,com.google.common.truth.Correspondence.ExceptionStore)","1357":"IterableSubject.UsingCorrespondence::::findCandidateMapping(java.util.List<? extends A>,java.util.List<? extends E>,com.google.common.truth.Correspondence.ExceptionStore)","1358":"IterableSubject.UsingCorrespondence::::findCandidateMapping(java.util.List<? extends A>,java.util.List<? extends E>,com.google.common.truth.Correspondence.ExceptionStore)","1393":"IterableSubject.UsingCorrespondence::::describeMissingOrExtra(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1394":"IterableSubject.UsingCorrespondence::::describeMissingOrExtra(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1395":"IterableSubject.UsingCorrespondence::::describeMissingOrExtra(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1396":"IterableSubject.UsingCorrespondence::::describeMissingOrExtra(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1397":"IterableSubject.UsingCorrespondence::::describeMissingOrExtra(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1398":"IterableSubject.UsingCorrespondence::::describeMissingOrExtra(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1399":"IterableSubject.UsingCorrespondence::::describeMissingOrExtra(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1400":"IterableSubject.UsingCorrespondence::::describeMissingOrExtra(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1401":"IterableSubject.UsingCorrespondence::::describeMissingOrExtra(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1402":"IterableSubject.UsingCorrespondence::::describeMissingOrExtra(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1403":"IterableSubject.UsingCorrespondence::::describeMissingOrExtra(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1404":"IterableSubject.UsingCorrespondence::::describeMissingOrExtra(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1405":"IterableSubject.UsingCorrespondence::::describeMissingOrExtra(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1406":"IterableSubject.UsingCorrespondence::::describeMissingOrExtra(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1407":"IterableSubject.UsingCorrespondence::::describeMissingOrExtra(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1408":"IterableSubject.UsingCorrespondence::::describeMissingOrExtra(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1409":"IterableSubject.UsingCorrespondence::::describeMissingOrExtra(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1410":"IterableSubject.UsingCorrespondence::::describeMissingOrExtra(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1411":"IterableSubject.UsingCorrespondence::::describeMissingOrExtra(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1412":"IterableSubject.UsingCorrespondence::::describeMissingOrExtra(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1413":"IterableSubject.UsingCorrespondence::::describeMissingOrExtra(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1414":"IterableSubject.UsingCorrespondence::::describeMissingOrExtra(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1415":"IterableSubject.UsingCorrespondence::::describeMissingOrExtra(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1416":"IterableSubject.UsingCorrespondence::::describeMissingOrExtra(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1417":"IterableSubject.UsingCorrespondence::::describeMissingOrExtra(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1418":"IterableSubject.UsingCorrespondence::::describeMissingOrExtra(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1419":"IterableSubject.UsingCorrespondence::::describeMissingOrExtra(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1421":"IterableSubject.UsingCorrespondence::::describeMissingOrExtraWithoutPairing(java.util.List<? extends E>,java.util.List<? extends A>)","1422":"IterableSubject.UsingCorrespondence::::describeMissingOrExtraWithoutPairing(java.util.List<? extends E>,java.util.List<? extends A>)","1423":"IterableSubject.UsingCorrespondence::::describeMissingOrExtraWithoutPairing(java.util.List<? extends E>,java.util.List<? extends A>)","1424":"IterableSubject.UsingCorrespondence::::describeMissingOrExtraWithoutPairing(java.util.List<? extends E>,java.util.List<? extends A>)","1426":"IterableSubject.UsingCorrespondence::::describeMissingOrExtraWithPairing(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1427":"IterableSubject.UsingCorrespondence::::describeMissingOrExtraWithPairing(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1428":"IterableSubject.UsingCorrespondence::::describeMissingOrExtraWithPairing(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1429":"IterableSubject.UsingCorrespondence::::describeMissingOrExtraWithPairing(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1430":"IterableSubject.UsingCorrespondence::::describeMissingOrExtraWithPairing(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1431":"IterableSubject.UsingCorrespondence::::describeMissingOrExtraWithPairing(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1432":"IterableSubject.UsingCorrespondence::::describeMissingOrExtraWithPairing(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1433":"IterableSubject.UsingCorrespondence::::describeMissingOrExtraWithPairing(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1434":"IterableSubject.UsingCorrespondence::::describeMissingOrExtraWithPairing(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1435":"IterableSubject.UsingCorrespondence::::describeMissingOrExtraWithPairing(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1436":"IterableSubject.UsingCorrespondence::::describeMissingOrExtraWithPairing(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1437":"IterableSubject.UsingCorrespondence::::describeMissingOrExtraWithPairing(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1438":"IterableSubject.UsingCorrespondence::::describeMissingOrExtraWithPairing(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1439":"IterableSubject.UsingCorrespondence::::describeMissingOrExtraWithPairing(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1440":"IterableSubject.UsingCorrespondence::::describeMissingOrExtraWithPairing(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1441":"IterableSubject.UsingCorrespondence::::describeMissingOrExtraWithPairing(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1442":"IterableSubject.UsingCorrespondence::::describeMissingOrExtraWithPairing(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1443":"IterableSubject.UsingCorrespondence::::describeMissingOrExtraWithPairing(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1444":"IterableSubject.UsingCorrespondence::::describeMissingOrExtraWithPairing(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1446":"IterableSubject.UsingCorrespondence::::formatExtras(java.lang.String,E,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1447":"IterableSubject.UsingCorrespondence::::formatExtras(java.lang.String,E,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1448":"IterableSubject.UsingCorrespondence::::formatExtras(java.lang.String,E,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1449":"IterableSubject.UsingCorrespondence::::formatExtras(java.lang.String,E,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1450":"IterableSubject.UsingCorrespondence::::formatExtras(java.lang.String,E,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1451":"IterableSubject.UsingCorrespondence::::formatExtras(java.lang.String,E,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1452":"IterableSubject.UsingCorrespondence::::formatExtras(java.lang.String,E,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1453":"IterableSubject.UsingCorrespondence::::formatExtras(java.lang.String,E,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1454":"IterableSubject.UsingCorrespondence::::formatExtras(java.lang.String,E,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1455":"IterableSubject.UsingCorrespondence::::formatExtras(java.lang.String,E,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1456":"IterableSubject.UsingCorrespondence::::formatExtras(java.lang.String,E,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1457":"IterableSubject.UsingCorrespondence::::formatExtras(java.lang.String,E,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1458":"IterableSubject.UsingCorrespondence::::formatExtras(java.lang.String,E,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1459":"IterableSubject.UsingCorrespondence::::formatExtras(java.lang.String,E,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1460":"IterableSubject.UsingCorrespondence::::formatExtras(java.lang.String,E,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1461":"IterableSubject.UsingCorrespondence::::formatExtras(java.lang.String,E,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1462":"IterableSubject.UsingCorrespondence::::formatExtras(java.lang.String,E,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1463":"IterableSubject.UsingCorrespondence::::formatExtras(java.lang.String,E,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1464":"IterableSubject.UsingCorrespondence::::formatExtras(java.lang.String,E,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1465":"IterableSubject.UsingCorrespondence::::formatExtras(java.lang.String,E,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1466":"IterableSubject.UsingCorrespondence::::formatExtras(java.lang.String,E,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1467":"IterableSubject.UsingCorrespondence::::formatExtras(java.lang.String,E,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1468":"IterableSubject.UsingCorrespondence::::formatExtras(java.lang.String,E,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1469":"IterableSubject.UsingCorrespondence::::formatExtras(java.lang.String,E,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1470":"IterableSubject.UsingCorrespondence::::formatExtras(java.lang.String,E,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1471":"IterableSubject.UsingCorrespondence::::formatExtras(java.lang.String,E,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1472":"IterableSubject.UsingCorrespondence::::formatExtras(java.lang.String,E,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1473":"IterableSubject.UsingCorrespondence::::formatExtras(java.lang.String,E,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1474":"IterableSubject.UsingCorrespondence::::formatExtras(java.lang.String,E,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1475":"IterableSubject.UsingCorrespondence::::formatExtras(java.lang.String,E,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1476":"IterableSubject.UsingCorrespondence::::formatExtras(java.lang.String,E,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1482":"IterableSubject.UsingCorrespondence::::findNotIndexed(java.util.List<T>,java.util.Set<java.lang.Integer>)","1483":"IterableSubject.UsingCorrespondence::::findNotIndexed(java.util.List<T>,java.util.Set<java.lang.Integer>)","1484":"IterableSubject.UsingCorrespondence::::findNotIndexed(java.util.List<T>,java.util.Set<java.lang.Integer>)","1485":"IterableSubject.UsingCorrespondence::::findNotIndexed(java.util.List<T>,java.util.Set<java.lang.Integer>)","1486":"IterableSubject.UsingCorrespondence::::findNotIndexed(java.util.List<T>,java.util.Set<java.lang.Integer>)","1487":"IterableSubject.UsingCorrespondence::::findNotIndexed(java.util.List<T>,java.util.Set<java.lang.Integer>)","1488":"IterableSubject.UsingCorrespondence::::findNotIndexed(java.util.List<T>,java.util.Set<java.lang.Integer>)","1489":"IterableSubject.UsingCorrespondence::::findNotIndexed(java.util.List<T>,java.util.Set<java.lang.Integer>)","1490":"IterableSubject.UsingCorrespondence::::findNotIndexed(java.util.List<T>,java.util.Set<java.lang.Integer>)","1491":"IterableSubject.UsingCorrespondence::::findNotIndexed(java.util.List<T>,java.util.Set<java.lang.Integer>)","1492":"IterableSubject.UsingCorrespondence::::findNotIndexed(java.util.List<T>,java.util.Set<java.lang.Integer>)","1493":"IterableSubject.UsingCorrespondence::::findNotIndexed(java.util.List<T>,java.util.Set<java.lang.Integer>)","1494":"IterableSubject.UsingCorrespondence::::findNotIndexed(java.util.List<T>,java.util.Set<java.lang.Integer>)","1495":"IterableSubject.UsingCorrespondence::::findNotIndexed(java.util.List<T>,java.util.Set<java.lang.Integer>)","1496":"IterableSubject.UsingCorrespondence::::findNotIndexed(java.util.List<T>,java.util.Set<java.lang.Integer>)","1570":"IterableSubject.UsingCorrespondence::::containsAtLeast(E,E,E[])","1571":"IterableSubject.UsingCorrespondence::::containsAtLeast(E,E,E[])","1572":"IterableSubject.UsingCorrespondence::::containsAtLeast(E,E,E[])","1573":"IterableSubject.UsingCorrespondence::::containsAtLeast(E,E,E[])","1574":"IterableSubject.UsingCorrespondence::::containsAtLeast(E,E,E[])","1585":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1586":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1587":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1588":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1589":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1590":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1591":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1592":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1593":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1594":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1595":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1596":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1597":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1598":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1599":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1600":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1601":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1602":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1603":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1604":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1605":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1606":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1607":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1608":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1609":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1610":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1611":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1612":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1613":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1614":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1615":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1616":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1617":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1618":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1619":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1620":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1621":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1622":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1623":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1624":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1625":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1626":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1627":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1628":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1629":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1630":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1631":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1632":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1633":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1634":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1635":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1636":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1637":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1638":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1639":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1640":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(java.lang.Iterable<? extends E>)","1651":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(E[])","1652":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(E[])","1653":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(E[])","1654":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(E[])","1655":"IterableSubject.UsingCorrespondence::::containsAtLeastElementsIn(E[])","1662":"IterableSubject.UsingCorrespondence::::correspondInOrderAllIn(java.util.Iterator<? extends A>,java.util.Iterator<? extends E>)","1663":"IterableSubject.UsingCorrespondence::::correspondInOrderAllIn(java.util.Iterator<? extends A>,java.util.Iterator<? extends E>)","1664":"IterableSubject.UsingCorrespondence::::correspondInOrderAllIn(java.util.Iterator<? extends A>,java.util.Iterator<? extends E>)","1665":"IterableSubject.UsingCorrespondence::::correspondInOrderAllIn(java.util.Iterator<? extends A>,java.util.Iterator<? extends E>)","1666":"IterableSubject.UsingCorrespondence::::correspondInOrderAllIn(java.util.Iterator<? extends A>,java.util.Iterator<? extends E>)","1667":"IterableSubject.UsingCorrespondence::::correspondInOrderAllIn(java.util.Iterator<? extends A>,java.util.Iterator<? extends E>)","1668":"IterableSubject.UsingCorrespondence::::correspondInOrderAllIn(java.util.Iterator<? extends A>,java.util.Iterator<? extends E>)","1669":"IterableSubject.UsingCorrespondence::::correspondInOrderAllIn(java.util.Iterator<? extends A>,java.util.Iterator<? extends E>)","1670":"IterableSubject.UsingCorrespondence::::correspondInOrderAllIn(java.util.Iterator<? extends A>,java.util.Iterator<? extends E>)","1671":"IterableSubject.UsingCorrespondence::::correspondInOrderAllIn(java.util.Iterator<? extends A>,java.util.Iterator<? extends E>)","1672":"IterableSubject.UsingCorrespondence::::correspondInOrderAllIn(java.util.Iterator<? extends A>,java.util.Iterator<? extends E>)","1673":"IterableSubject.UsingCorrespondence::::correspondInOrderAllIn(java.util.Iterator<? extends A>,java.util.Iterator<? extends E>)","1674":"IterableSubject.UsingCorrespondence::::correspondInOrderAllIn(java.util.Iterator<? extends A>,java.util.Iterator<? extends E>)","1675":"IterableSubject.UsingCorrespondence::::correspondInOrderAllIn(java.util.Iterator<? extends A>,java.util.Iterator<? extends E>)","1676":"IterableSubject.UsingCorrespondence::::correspondInOrderAllIn(java.util.Iterator<? extends A>,java.util.Iterator<? extends E>)","1677":"IterableSubject.UsingCorrespondence::::correspondInOrderAllIn(java.util.Iterator<? extends A>,java.util.Iterator<? extends E>)","1678":"IterableSubject.UsingCorrespondence::::correspondInOrderAllIn(java.util.Iterator<? extends A>,java.util.Iterator<? extends E>)","1679":"IterableSubject.UsingCorrespondence::::correspondInOrderAllIn(java.util.Iterator<? extends A>,java.util.Iterator<? extends E>)","1680":"IterableSubject.UsingCorrespondence::::correspondInOrderAllIn(java.util.Iterator<? extends A>,java.util.Iterator<? extends E>)","1681":"IterableSubject.UsingCorrespondence::::correspondInOrderAllIn(java.util.Iterator<? extends A>,java.util.Iterator<? extends E>)","1687":"IterableSubject.UsingCorrespondence::::findCorresponding(java.util.Iterator<? extends A>,E,com.google.common.truth.Correspondence.ExceptionStore)","1688":"IterableSubject.UsingCorrespondence::::findCorresponding(java.util.Iterator<? extends A>,E,com.google.common.truth.Correspondence.ExceptionStore)","1689":"IterableSubject.UsingCorrespondence::::findCorresponding(java.util.Iterator<? extends A>,E,com.google.common.truth.Correspondence.ExceptionStore)","1690":"IterableSubject.UsingCorrespondence::::findCorresponding(java.util.Iterator<? extends A>,E,com.google.common.truth.Correspondence.ExceptionStore)","1691":"IterableSubject.UsingCorrespondence::::findCorresponding(java.util.Iterator<? extends A>,E,com.google.common.truth.Correspondence.ExceptionStore)","1692":"IterableSubject.UsingCorrespondence::::findCorresponding(java.util.Iterator<? extends A>,E,com.google.common.truth.Correspondence.ExceptionStore)","1693":"IterableSubject.UsingCorrespondence::::findCorresponding(java.util.Iterator<? extends A>,E,com.google.common.truth.Correspondence.ExceptionStore)","1694":"IterableSubject.UsingCorrespondence::::findCorresponding(java.util.Iterator<? extends A>,E,com.google.common.truth.Correspondence.ExceptionStore)","1695":"IterableSubject.UsingCorrespondence::::findCorresponding(java.util.Iterator<? extends A>,E,com.google.common.truth.Correspondence.ExceptionStore)","1696":"IterableSubject.UsingCorrespondence::::findCorresponding(java.util.Iterator<? extends A>,E,com.google.common.truth.Correspondence.ExceptionStore)","1731":"IterableSubject.UsingCorrespondence::::describeMissing(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1732":"IterableSubject.UsingCorrespondence::::describeMissing(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1733":"IterableSubject.UsingCorrespondence::::describeMissing(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1734":"IterableSubject.UsingCorrespondence::::describeMissing(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1735":"IterableSubject.UsingCorrespondence::::describeMissing(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1736":"IterableSubject.UsingCorrespondence::::describeMissing(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1737":"IterableSubject.UsingCorrespondence::::describeMissing(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1738":"IterableSubject.UsingCorrespondence::::describeMissing(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1739":"IterableSubject.UsingCorrespondence::::describeMissing(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1740":"IterableSubject.UsingCorrespondence::::describeMissing(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1741":"IterableSubject.UsingCorrespondence::::describeMissing(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1742":"IterableSubject.UsingCorrespondence::::describeMissing(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1743":"IterableSubject.UsingCorrespondence::::describeMissing(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1744":"IterableSubject.UsingCorrespondence::::describeMissing(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1745":"IterableSubject.UsingCorrespondence::::describeMissing(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1746":"IterableSubject.UsingCorrespondence::::describeMissing(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1747":"IterableSubject.UsingCorrespondence::::describeMissing(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1748":"IterableSubject.UsingCorrespondence::::describeMissing(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1749":"IterableSubject.UsingCorrespondence::::describeMissing(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1750":"IterableSubject.UsingCorrespondence::::describeMissing(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1751":"IterableSubject.UsingCorrespondence::::describeMissing(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1752":"IterableSubject.UsingCorrespondence::::describeMissing(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1753":"IterableSubject.UsingCorrespondence::::describeMissing(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1754":"IterableSubject.UsingCorrespondence::::describeMissing(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1755":"IterableSubject.UsingCorrespondence::::describeMissing(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","1757":"IterableSubject.UsingCorrespondence::::describeMissingWithoutPairing(java.util.List<? extends E>)","1758":"IterableSubject.UsingCorrespondence::::describeMissingWithoutPairing(java.util.List<? extends E>)","1759":"IterableSubject.UsingCorrespondence::::describeMissingWithoutPairing(java.util.List<? extends E>)","1761":"IterableSubject.UsingCorrespondence::::describeMissingWithPairing(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1762":"IterableSubject.UsingCorrespondence::::describeMissingWithPairing(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1763":"IterableSubject.UsingCorrespondence::::describeMissingWithPairing(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1764":"IterableSubject.UsingCorrespondence::::describeMissingWithPairing(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1765":"IterableSubject.UsingCorrespondence::::describeMissingWithPairing(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1766":"IterableSubject.UsingCorrespondence::::describeMissingWithPairing(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1767":"IterableSubject.UsingCorrespondence::::describeMissingWithPairing(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1768":"IterableSubject.UsingCorrespondence::::describeMissingWithPairing(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1769":"IterableSubject.UsingCorrespondence::::describeMissingWithPairing(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1770":"IterableSubject.UsingCorrespondence::::describeMissingWithPairing(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1771":"IterableSubject.UsingCorrespondence::::describeMissingWithPairing(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1772":"IterableSubject.UsingCorrespondence::::describeMissingWithPairing(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1773":"IterableSubject.UsingCorrespondence::::describeMissingWithPairing(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1774":"IterableSubject.UsingCorrespondence::::describeMissingWithPairing(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1775":"IterableSubject.UsingCorrespondence::::describeMissingWithPairing(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1776":"IterableSubject.UsingCorrespondence::::describeMissingWithPairing(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1777":"IterableSubject.UsingCorrespondence::::describeMissingWithPairing(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1778":"IterableSubject.UsingCorrespondence::::describeMissingWithPairing(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1820":"IterableSubject.UsingCorrespondence::::containsAnyOf(E,E,E[])","1821":"IterableSubject.UsingCorrespondence::::containsAnyOf(E,E,E[])","1822":"IterableSubject.UsingCorrespondence::::containsAnyOf(E,E,E[])","1823":"IterableSubject.UsingCorrespondence::::containsAnyOf(E,E,E[])","1829":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1830":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1831":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1832":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1833":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1834":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1835":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1836":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1837":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1838":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1839":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1840":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1841":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1842":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1843":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1844":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1845":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1846":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1847":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1848":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1849":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1850":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1851":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1852":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1853":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1854":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1855":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1856":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1857":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1858":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1859":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1860":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1861":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1862":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1863":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1864":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1865":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1866":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1867":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1868":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1869":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1870":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1871":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1872":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1873":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1874":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1875":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1876":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1877":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1878":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1879":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1880":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1881":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1882":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1883":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1884":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1885":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1886":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1887":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1888":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1889":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1890":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1891":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1892":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1893":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1894":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1895":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1896":"IterableSubject.UsingCorrespondence::::containsAnyIn(java.lang.Iterable<? extends E>)","1902":"IterableSubject.UsingCorrespondence::::containsAnyIn(E[])","1903":"IterableSubject.UsingCorrespondence::::containsAnyIn(E[])","1904":"IterableSubject.UsingCorrespondence::::containsAnyIn(E[])","1905":"IterableSubject.UsingCorrespondence::::containsAnyIn(E[])","1907":"IterableSubject.UsingCorrespondence::::describeAnyMatchesByKey(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1908":"IterableSubject.UsingCorrespondence::::describeAnyMatchesByKey(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1909":"IterableSubject.UsingCorrespondence::::describeAnyMatchesByKey(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1910":"IterableSubject.UsingCorrespondence::::describeAnyMatchesByKey(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1911":"IterableSubject.UsingCorrespondence::::describeAnyMatchesByKey(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1912":"IterableSubject.UsingCorrespondence::::describeAnyMatchesByKey(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1913":"IterableSubject.UsingCorrespondence::::describeAnyMatchesByKey(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1914":"IterableSubject.UsingCorrespondence::::describeAnyMatchesByKey(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1915":"IterableSubject.UsingCorrespondence::::describeAnyMatchesByKey(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1916":"IterableSubject.UsingCorrespondence::::describeAnyMatchesByKey(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1917":"IterableSubject.UsingCorrespondence::::describeAnyMatchesByKey(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1918":"IterableSubject.UsingCorrespondence::::describeAnyMatchesByKey(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1919":"IterableSubject.UsingCorrespondence::::describeAnyMatchesByKey(com.google.common.truth.IterableSubject.UsingCorrespondence.Pairing,com.google.common.truth.Correspondence.ExceptionStore)","1926":"IterableSubject.UsingCorrespondence::::containsNoneOf(E,E,E[])","1927":"IterableSubject.UsingCorrespondence::::containsNoneOf(E,E,E[])","1928":"IterableSubject.UsingCorrespondence::::containsNoneOf(E,E,E[])","1929":"IterableSubject.UsingCorrespondence::::containsNoneOf(E,E,E[])","1930":"IterableSubject.UsingCorrespondence::::containsNoneOf(E,E,E[])","1937":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1938":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1939":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1940":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1941":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1942":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1943":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1944":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1945":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1946":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1947":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1948":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1949":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1950":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1951":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1952":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1953":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1954":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1955":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1956":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1957":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1958":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1959":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1960":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1961":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1962":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1963":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1964":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1965":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1966":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1967":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1968":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1969":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1970":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1971":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1972":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1973":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1974":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1975":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1976":"IterableSubject.UsingCorrespondence::::containsNoneIn(java.lang.Iterable<? extends E>)","1983":"IterableSubject.UsingCorrespondence::::containsNoneIn(E[])","1984":"IterableSubject.UsingCorrespondence::::containsNoneIn(E[])","1985":"IterableSubject.UsingCorrespondence::::containsNoneIn(E[])","1986":"IterableSubject.UsingCorrespondence::::containsNoneIn(E[])","1988":"IterableSubject.UsingCorrespondence::::getCastActual()","1989":"IterableSubject.UsingCorrespondence::::getCastActual()","1990":"IterableSubject.UsingCorrespondence::::getCastActual()","1991":"IterableSubject.UsingCorrespondence::::getCastActual()","2018":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2019":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2020":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2021":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2022":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2023":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2024":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2025":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2026":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2027":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2028":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2029":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2030":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2031":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2032":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2033":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2034":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2035":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2036":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2037":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2038":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2039":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2040":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2041":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2042":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2043":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2044":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2045":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2046":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2047":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2048":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2049":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2050":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2051":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2052":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2053":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2054":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2055":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2056":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2057":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2058":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2059":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2060":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2061":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2062":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2063":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2064":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2065":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2066":"IterableSubject.UsingCorrespondence.Pairer::::pair(java.util.List<? extends E>,java.util.List<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2068":"IterableSubject.UsingCorrespondence.Pairer::::pairOne(E,java.lang.Iterable<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2069":"IterableSubject.UsingCorrespondence.Pairer::::pairOne(E,java.lang.Iterable<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2070":"IterableSubject.UsingCorrespondence.Pairer::::pairOne(E,java.lang.Iterable<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2071":"IterableSubject.UsingCorrespondence.Pairer::::pairOne(E,java.lang.Iterable<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2072":"IterableSubject.UsingCorrespondence.Pairer::::pairOne(E,java.lang.Iterable<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2073":"IterableSubject.UsingCorrespondence.Pairer::::pairOne(E,java.lang.Iterable<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2074":"IterableSubject.UsingCorrespondence.Pairer::::pairOne(E,java.lang.Iterable<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2075":"IterableSubject.UsingCorrespondence.Pairer::::pairOne(E,java.lang.Iterable<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2076":"IterableSubject.UsingCorrespondence.Pairer::::pairOne(E,java.lang.Iterable<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2077":"IterableSubject.UsingCorrespondence.Pairer::::pairOne(E,java.lang.Iterable<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2078":"IterableSubject.UsingCorrespondence.Pairer::::pairOne(E,java.lang.Iterable<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2079":"IterableSubject.UsingCorrespondence.Pairer::::pairOne(E,java.lang.Iterable<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2080":"IterableSubject.UsingCorrespondence.Pairer::::pairOne(E,java.lang.Iterable<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2081":"IterableSubject.UsingCorrespondence.Pairer::::pairOne(E,java.lang.Iterable<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2082":"IterableSubject.UsingCorrespondence.Pairer::::pairOne(E,java.lang.Iterable<? extends A>,com.google.common.truth.Correspondence.ExceptionStore)","2084":"IterableSubject.UsingCorrespondence.Pairer::::actualKey(A,com.google.common.truth.Correspondence.ExceptionStore)","2085":"IterableSubject.UsingCorrespondence.Pairer::::actualKey(A,com.google.common.truth.Correspondence.ExceptionStore)","2086":"IterableSubject.UsingCorrespondence.Pairer::::actualKey(A,com.google.common.truth.Correspondence.ExceptionStore)","2087":"IterableSubject.UsingCorrespondence.Pairer::::actualKey(A,com.google.common.truth.Correspondence.ExceptionStore)","2088":"IterableSubject.UsingCorrespondence.Pairer::::actualKey(A,com.google.common.truth.Correspondence.ExceptionStore)","2089":"IterableSubject.UsingCorrespondence.Pairer::::actualKey(A,com.google.common.truth.Correspondence.ExceptionStore)","2090":"IterableSubject.UsingCorrespondence.Pairer::::actualKey(A,com.google.common.truth.Correspondence.ExceptionStore)","2091":"IterableSubject.UsingCorrespondence.Pairer::::actualKey(A,com.google.common.truth.Correspondence.ExceptionStore)","2092":"IterableSubject.UsingCorrespondence.Pairer::::actualKey(A,com.google.common.truth.Correspondence.ExceptionStore)","2094":"IterableSubject.UsingCorrespondence.Pairer::::expectedKey(E,com.google.common.truth.Correspondence.ExceptionStore)","2095":"IterableSubject.UsingCorrespondence.Pairer::::expectedKey(E,com.google.common.truth.Correspondence.ExceptionStore)","2096":"IterableSubject.UsingCorrespondence.Pairer::::expectedKey(E,com.google.common.truth.Correspondence.ExceptionStore)","2097":"IterableSubject.UsingCorrespondence.Pairer::::expectedKey(E,com.google.common.truth.Correspondence.ExceptionStore)","2098":"IterableSubject.UsingCorrespondence.Pairer::::expectedKey(E,com.google.common.truth.Correspondence.ExceptionStore)","2099":"IterableSubject.UsingCorrespondence.Pairer::::expectedKey(E,com.google.common.truth.Correspondence.ExceptionStore)","2100":"IterableSubject.UsingCorrespondence.Pairer::::expectedKey(E,com.google.common.truth.Correspondence.ExceptionStore)","2101":"IterableSubject.UsingCorrespondence.Pairer::::expectedKey(E,com.google.common.truth.Correspondence.ExceptionStore)","2102":"IterableSubject.UsingCorrespondence.Pairer::::expectedKey(E,com.google.common.truth.Correspondence.ExceptionStore)"},"test_reverse_method_lines_dic":{"45":"IterableSubjectTest::::hasSize()","46":"IterableSubjectTest::::hasSize()","47":"IterableSubjectTest::::hasSize()","48":"IterableSubjectTest::::hasSize()","50":"IterableSubjectTest::::hasSizeZero()","51":"IterableSubjectTest::::hasSizeZero()","52":"IterableSubjectTest::::hasSizeZero()","53":"IterableSubjectTest::::hasSizeZero()","54":"IterableSubjectTest::::hasSizeZero()","56":"IterableSubjectTest::::hasSizeFails()","57":"IterableSubjectTest::::hasSizeFails()","58":"IterableSubjectTest::::hasSizeFails()","59":"IterableSubjectTest::::hasSizeFails()","60":"IterableSubjectTest::::hasSizeFails()","62":"IterableSubjectTest::::hasSizeNegative()","63":"IterableSubjectTest::::hasSizeNegative()","64":"IterableSubjectTest::::hasSizeNegative()","65":"IterableSubjectTest::::hasSizeNegative()","66":"IterableSubjectTest::::hasSizeNegative()","67":"IterableSubjectTest::::hasSizeNegative()","68":"IterableSubjectTest::::hasSizeNegative()","69":"IterableSubjectTest::::hasSizeNegative()","71":"IterableSubjectTest::::iterableContains()","72":"IterableSubjectTest::::iterableContains()","73":"IterableSubjectTest::::iterableContains()","74":"IterableSubjectTest::::iterableContains()","76":"IterableSubjectTest::::iterableContainsWithNull()","77":"IterableSubjectTest::::iterableContainsWithNull()","78":"IterableSubjectTest::::iterableContainsWithNull()","79":"IterableSubjectTest::::iterableContainsWithNull()","81":"IterableSubjectTest::::iterableContainsFailsWithSameToString()","82":"IterableSubjectTest::::iterableContainsFailsWithSameToString()","83":"IterableSubjectTest::::iterableContainsFailsWithSameToString()","84":"IterableSubjectTest::::iterableContainsFailsWithSameToString()","85":"IterableSubjectTest::::iterableContainsFailsWithSameToString()","86":"IterableSubjectTest::::iterableContainsFailsWithSameToString()","87":"IterableSubjectTest::::iterableContainsFailsWithSameToString()","88":"IterableSubjectTest::::iterableContainsFailsWithSameToString()","89":"IterableSubjectTest::::iterableContainsFailsWithSameToString()","90":"IterableSubjectTest::::iterableContainsFailsWithSameToString()","91":"IterableSubjectTest::::iterableContainsFailsWithSameToString()","92":"IterableSubjectTest::::iterableContainsFailsWithSameToString()","93":"IterableSubjectTest::::iterableContainsFailsWithSameToString()","94":"IterableSubjectTest::::iterableContainsFailsWithSameToString()","96":"IterableSubjectTest::::iterableContainsFailsWithSameToStringAndNull()","97":"IterableSubjectTest::::iterableContainsFailsWithSameToStringAndNull()","98":"IterableSubjectTest::::iterableContainsFailsWithSameToStringAndNull()","99":"IterableSubjectTest::::iterableContainsFailsWithSameToStringAndNull()","100":"IterableSubjectTest::::iterableContainsFailsWithSameToStringAndNull()","102":"IterableSubjectTest::::iterableContainsFailure()","103":"IterableSubjectTest::::iterableContainsFailure()","104":"IterableSubjectTest::::iterableContainsFailure()","105":"IterableSubjectTest::::iterableContainsFailure()","106":"IterableSubjectTest::::iterableContainsFailure()","107":"IterableSubjectTest::::iterableContainsFailure()","109":"IterableSubjectTest::::iterableDoesNotContain()","110":"IterableSubjectTest::::iterableDoesNotContain()","111":"IterableSubjectTest::::iterableDoesNotContain()","112":"IterableSubjectTest::::iterableDoesNotContain()","114":"IterableSubjectTest::::iterableDoesNotContainNull()","115":"IterableSubjectTest::::iterableDoesNotContainNull()","116":"IterableSubjectTest::::iterableDoesNotContainNull()","117":"IterableSubjectTest::::iterableDoesNotContainNull()","119":"IterableSubjectTest::::iterableDoesNotContainFailure()","120":"IterableSubjectTest::::iterableDoesNotContainFailure()","121":"IterableSubjectTest::::iterableDoesNotContainFailure()","122":"IterableSubjectTest::::iterableDoesNotContainFailure()","123":"IterableSubjectTest::::iterableDoesNotContainFailure()","124":"IterableSubjectTest::::iterableDoesNotContainFailure()","126":"IterableSubjectTest::::doesNotContainDuplicates()","127":"IterableSubjectTest::::doesNotContainDuplicates()","128":"IterableSubjectTest::::doesNotContainDuplicates()","129":"IterableSubjectTest::::doesNotContainDuplicates()","131":"IterableSubjectTest::::doesNotContainDuplicatesMixedTypes()","132":"IterableSubjectTest::::doesNotContainDuplicatesMixedTypes()","133":"IterableSubjectTest::::doesNotContainDuplicatesMixedTypes()","134":"IterableSubjectTest::::doesNotContainDuplicatesMixedTypes()","136":"IterableSubjectTest::::doesNotContainDuplicatesFailure()","137":"IterableSubjectTest::::doesNotContainDuplicatesFailure()","138":"IterableSubjectTest::::doesNotContainDuplicatesFailure()","139":"IterableSubjectTest::::doesNotContainDuplicatesFailure()","140":"IterableSubjectTest::::doesNotContainDuplicatesFailure()","141":"IterableSubjectTest::::doesNotContainDuplicatesFailure()","142":"IterableSubjectTest::::doesNotContainDuplicatesFailure()","144":"IterableSubjectTest::::iterableContainsAnyOf()","145":"IterableSubjectTest::::iterableContainsAnyOf()","146":"IterableSubjectTest::::iterableContainsAnyOf()","147":"IterableSubjectTest::::iterableContainsAnyOf()","149":"IterableSubjectTest::::iterableContainsAnyOfWithNull()","150":"IterableSubjectTest::::iterableContainsAnyOfWithNull()","151":"IterableSubjectTest::::iterableContainsAnyOfWithNull()","152":"IterableSubjectTest::::iterableContainsAnyOfWithNull()","154":"IterableSubjectTest::::iterableContainsAnyOfWithNullInThirdAndFinalPosition()","155":"IterableSubjectTest::::iterableContainsAnyOfWithNullInThirdAndFinalPosition()","156":"IterableSubjectTest::::iterableContainsAnyOfWithNullInThirdAndFinalPosition()","157":"IterableSubjectTest::::iterableContainsAnyOfWithNullInThirdAndFinalPosition()","159":"IterableSubjectTest::::iterableContainsAnyOfFailure()","160":"IterableSubjectTest::::iterableContainsAnyOfFailure()","161":"IterableSubjectTest::::iterableContainsAnyOfFailure()","162":"IterableSubjectTest::::iterableContainsAnyOfFailure()","163":"IterableSubjectTest::::iterableContainsAnyOfFailure()","164":"IterableSubjectTest::::iterableContainsAnyOfFailure()","166":"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndHomogeneousList()","167":"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndHomogeneousList()","168":"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndHomogeneousList()","169":"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndHomogeneousList()","170":"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndHomogeneousList()","171":"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndHomogeneousList()","172":"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndHomogeneousList()","173":"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndHomogeneousList()","174":"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndHomogeneousList()","176":"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndHomogeneousListWithDuplicates()","177":"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndHomogeneousListWithDuplicates()","178":"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndHomogeneousListWithDuplicates()","179":"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndHomogeneousListWithDuplicates()","180":"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndHomogeneousListWithDuplicates()","181":"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndHomogeneousListWithDuplicates()","182":"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndHomogeneousListWithDuplicates()","183":"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndHomogeneousListWithDuplicates()","184":"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndHomogeneousListWithDuplicates()","186":"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndNullInSubject()","187":"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndNullInSubject()","188":"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndNullInSubject()","189":"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndNullInSubject()","190":"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndNullInSubject()","191":"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndNullInSubject()","192":"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndNullInSubject()","193":"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndNullInSubject()","194":"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndNullInSubject()","196":"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndNullInExpectation()","197":"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndNullInExpectation()","198":"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndNullInExpectation()","199":"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndNullInExpectation()","200":"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndNullInExpectation()","201":"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndNullInExpectation()","202":"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndNullInExpectation()","203":"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndNullInExpectation()","204":"IterableSubjectTest::::iterableContainsAnyOfFailsWithSameToStringAndNullInExpectation()","206":"IterableSubjectTest::::iterableContainsAnyOfWithOneShotIterable()","207":"IterableSubjectTest::::iterableContainsAnyOfWithOneShotIterable()","208":"IterableSubjectTest::::iterableContainsAnyOfWithOneShotIterable()","209":"IterableSubjectTest::::iterableContainsAnyOfWithOneShotIterable()","210":"IterableSubjectTest::::iterableContainsAnyOfWithOneShotIterable()","211":"IterableSubjectTest::::iterableContainsAnyOfWithOneShotIterable()","212":"IterableSubjectTest::::iterableContainsAnyOfWithOneShotIterable()","214":"IterableSubjectTest::::iterableContainsAnyInIterable()","215":"IterableSubjectTest::::iterableContainsAnyInIterable()","216":"IterableSubjectTest::::iterableContainsAnyInIterable()","217":"IterableSubjectTest::::iterableContainsAnyInIterable()","218":"IterableSubjectTest::::iterableContainsAnyInIterable()","219":"IterableSubjectTest::::iterableContainsAnyInIterable()","220":"IterableSubjectTest::::iterableContainsAnyInIterable()","221":"IterableSubjectTest::::iterableContainsAnyInIterable()","223":"IterableSubjectTest::::iterableContainsAnyInArray()","224":"IterableSubjectTest::::iterableContainsAnyInArray()","225":"IterableSubjectTest::::iterableContainsAnyInArray()","226":"IterableSubjectTest::::iterableContainsAnyInArray()","227":"IterableSubjectTest::::iterableContainsAnyInArray()","228":"IterableSubjectTest::::iterableContainsAnyInArray()","229":"IterableSubjectTest::::iterableContainsAnyInArray()","230":"IterableSubjectTest::::iterableContainsAnyInArray()","232":"IterableSubjectTest::::iterableContainsAtLeast()","233":"IterableSubjectTest::::iterableContainsAtLeast()","234":"IterableSubjectTest::::iterableContainsAtLeast()","235":"IterableSubjectTest::::iterableContainsAtLeast()","237":"IterableSubjectTest::::iterableContainsAtLeastWithMany()","238":"IterableSubjectTest::::iterableContainsAtLeastWithMany()","239":"IterableSubjectTest::::iterableContainsAtLeastWithMany()","240":"IterableSubjectTest::::iterableContainsAtLeastWithMany()","242":"IterableSubjectTest::::iterableContainsAtLeastWithDuplicates()","243":"IterableSubjectTest::::iterableContainsAtLeastWithDuplicates()","244":"IterableSubjectTest::::iterableContainsAtLeastWithDuplicates()","245":"IterableSubjectTest::::iterableContainsAtLeastWithDuplicates()","247":"IterableSubjectTest::::iterableContainsAtLeastWithNull()","248":"IterableSubjectTest::::iterableContainsAtLeastWithNull()","249":"IterableSubjectTest::::iterableContainsAtLeastWithNull()","250":"IterableSubjectTest::::iterableContainsAtLeastWithNull()","252":"IterableSubjectTest::::iterableContainsAtLeastWithNullAtThirdAndFinalPosition()","253":"IterableSubjectTest::::iterableContainsAtLeastWithNullAtThirdAndFinalPosition()","254":"IterableSubjectTest::::iterableContainsAtLeastWithNullAtThirdAndFinalPosition()","255":"IterableSubjectTest::::iterableContainsAtLeastWithNullAtThirdAndFinalPosition()","268":"IterableSubjectTest::::iterableContainsAtLeastElementsInOutOfOrderDoesNotStringify()","269":"IterableSubjectTest::::iterableContainsAtLeastElementsInOutOfOrderDoesNotStringify()","270":"IterableSubjectTest::::iterableContainsAtLeastElementsInOutOfOrderDoesNotStringify()","271":"IterableSubjectTest::::iterableContainsAtLeastElementsInOutOfOrderDoesNotStringify()","272":"IterableSubjectTest::::iterableContainsAtLeastElementsInOutOfOrderDoesNotStringify()","273":"IterableSubjectTest::::iterableContainsAtLeastElementsInOutOfOrderDoesNotStringify()","274":"IterableSubjectTest::::iterableContainsAtLeastElementsInOutOfOrderDoesNotStringify()","275":"IterableSubjectTest::::iterableContainsAtLeastElementsInOutOfOrderDoesNotStringify()","276":"IterableSubjectTest::::iterableContainsAtLeastElementsInOutOfOrderDoesNotStringify()","277":"IterableSubjectTest::::iterableContainsAtLeastElementsInOutOfOrderDoesNotStringify()","279":"IterableSubjectTest::::iterableContainsAtLeastFailure()","280":"IterableSubjectTest::::iterableContainsAtLeastFailure()","281":"IterableSubjectTest::::iterableContainsAtLeastFailure()","282":"IterableSubjectTest::::iterableContainsAtLeastFailure()","283":"IterableSubjectTest::::iterableContainsAtLeastFailure()","284":"IterableSubjectTest::::iterableContainsAtLeastFailure()","285":"IterableSubjectTest::::iterableContainsAtLeastFailure()","287":"IterableSubjectTest::::iterableContainsAtLeastWithExtras()","288":"IterableSubjectTest::::iterableContainsAtLeastWithExtras()","289":"IterableSubjectTest::::iterableContainsAtLeastWithExtras()","290":"IterableSubjectTest::::iterableContainsAtLeastWithExtras()","291":"IterableSubjectTest::::iterableContainsAtLeastWithExtras()","293":"IterableSubjectTest::::iterableContainsAtLeastWithExtraCopiesOfOutOfOrder()","294":"IterableSubjectTest::::iterableContainsAtLeastWithExtraCopiesOfOutOfOrder()","295":"IterableSubjectTest::::iterableContainsAtLeastWithExtraCopiesOfOutOfOrder()","296":"IterableSubjectTest::::iterableContainsAtLeastWithExtraCopiesOfOutOfOrder()","297":"IterableSubjectTest::::iterableContainsAtLeastWithExtraCopiesOfOutOfOrder()","299":"IterableSubjectTest::::iterableContainsAtLeastWithDuplicatesFailure()","300":"IterableSubjectTest::::iterableContainsAtLeastWithDuplicatesFailure()","301":"IterableSubjectTest::::iterableContainsAtLeastWithDuplicatesFailure()","302":"IterableSubjectTest::::iterableContainsAtLeastWithDuplicatesFailure()","303":"IterableSubjectTest::::iterableContainsAtLeastWithDuplicatesFailure()","309":"IterableSubjectTest::::iterableContainsAtLeastWithDuplicateMissingElements()","310":"IterableSubjectTest::::iterableContainsAtLeastWithDuplicateMissingElements()","311":"IterableSubjectTest::::iterableContainsAtLeastWithDuplicateMissingElements()","312":"IterableSubjectTest::::iterableContainsAtLeastWithDuplicateMissingElements()","313":"IterableSubjectTest::::iterableContainsAtLeastWithDuplicateMissingElements()","315":"IterableSubjectTest::::iterableContainsAtLeastWithNullFailure()","316":"IterableSubjectTest::::iterableContainsAtLeastWithNullFailure()","317":"IterableSubjectTest::::iterableContainsAtLeastWithNullFailure()","318":"IterableSubjectTest::::iterableContainsAtLeastWithNullFailure()","319":"IterableSubjectTest::::iterableContainsAtLeastWithNullFailure()","321":"IterableSubjectTest::::iterableContainsAtLeastFailsWithSameToStringAndHomogeneousList()","322":"IterableSubjectTest::::iterableContainsAtLeastFailsWithSameToStringAndHomogeneousList()","323":"IterableSubjectTest::::iterableContainsAtLeastFailsWithSameToStringAndHomogeneousList()","324":"IterableSubjectTest::::iterableContainsAtLeastFailsWithSameToStringAndHomogeneousList()","325":"IterableSubjectTest::::iterableContainsAtLeastFailsWithSameToStringAndHomogeneousList()","326":"IterableSubjectTest::::iterableContainsAtLeastFailsWithSameToStringAndHomogeneousList()","328":"IterableSubjectTest::::iterableContainsAtLeastFailsWithSameToStringAndHomogeneousListWithDuplicates()","329":"IterableSubjectTest::::iterableContainsAtLeastFailsWithSameToStringAndHomogeneousListWithDuplicates()","330":"IterableSubjectTest::::iterableContainsAtLeastFailsWithSameToStringAndHomogeneousListWithDuplicates()","331":"IterableSubjectTest::::iterableContainsAtLeastFailsWithSameToStringAndHomogeneousListWithDuplicates()","332":"IterableSubjectTest::::iterableContainsAtLeastFailsWithSameToStringAndHomogeneousListWithDuplicates()","333":"IterableSubjectTest::::iterableContainsAtLeastFailsWithSameToStringAndHomogeneousListWithDuplicates()","335":"IterableSubjectTest::::iterableContainsAtLeastFailsWithSameToStringAndHomogeneousListWithNull()","336":"IterableSubjectTest::::iterableContainsAtLeastFailsWithSameToStringAndHomogeneousListWithNull()","337":"IterableSubjectTest::::iterableContainsAtLeastFailsWithSameToStringAndHomogeneousListWithNull()","338":"IterableSubjectTest::::iterableContainsAtLeastFailsWithSameToStringAndHomogeneousListWithNull()","339":"IterableSubjectTest::::iterableContainsAtLeastFailsWithSameToStringAndHomogeneousListWithNull()","340":"IterableSubjectTest::::iterableContainsAtLeastFailsWithSameToStringAndHomogeneousListWithNull()","342":"IterableSubjectTest::::iterableContainsAtLeastFailsWithSameToStringAndHeterogeneousListWithDuplicates()","343":"IterableSubjectTest::::iterableContainsAtLeastFailsWithSameToStringAndHeterogeneousListWithDuplicates()","344":"IterableSubjectTest::::iterableContainsAtLeastFailsWithSameToStringAndHeterogeneousListWithDuplicates()","345":"IterableSubjectTest::::iterableContainsAtLeastFailsWithSameToStringAndHeterogeneousListWithDuplicates()","346":"IterableSubjectTest::::iterableContainsAtLeastFailsWithSameToStringAndHeterogeneousListWithDuplicates()","347":"IterableSubjectTest::::iterableContainsAtLeastFailsWithSameToStringAndHeterogeneousListWithDuplicates()","348":"IterableSubjectTest::::iterableContainsAtLeastFailsWithSameToStringAndHeterogeneousListWithDuplicates()","350":"IterableSubjectTest::::iterableContainsAtLeastFailsWithEmptyString()","351":"IterableSubjectTest::::iterableContainsAtLeastFailsWithEmptyString()","352":"IterableSubjectTest::::iterableContainsAtLeastFailsWithEmptyString()","353":"IterableSubjectTest::::iterableContainsAtLeastFailsWithEmptyString()","354":"IterableSubjectTest::::iterableContainsAtLeastFailsWithEmptyString()","355":"IterableSubjectTest::::iterableContainsAtLeastFailsWithEmptyString()","356":"IterableSubjectTest::::iterableContainsAtLeastFailsWithEmptyString()","358":"IterableSubjectTest::::iterableContainsAtLeastInOrder()","359":"IterableSubjectTest::::iterableContainsAtLeastInOrder()","360":"IterableSubjectTest::::iterableContainsAtLeastInOrder()","361":"IterableSubjectTest::::iterableContainsAtLeastInOrder()","363":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithGaps()","364":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithGaps()","365":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithGaps()","366":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithGaps()","367":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithGaps()","368":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithGaps()","369":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithGaps()","370":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithGaps()","371":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithGaps()","372":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithGaps()","374":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithNull()","375":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithNull()","376":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithNull()","377":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithNull()","378":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithNull()","380":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithFailure()","381":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithFailure()","382":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithFailure()","383":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithFailure()","384":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithFailure()","385":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithFailure()","386":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithFailure()","387":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithFailure()","388":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithFailure()","389":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithFailure()","391":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithFailureWithActualOrder()","392":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithFailureWithActualOrder()","393":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithFailureWithActualOrder()","394":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithFailureWithActualOrder()","395":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithFailureWithActualOrder()","396":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithFailureWithActualOrder()","397":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithFailureWithActualOrder()","398":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithFailureWithActualOrder()","399":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithFailureWithActualOrder()","400":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithFailureWithActualOrder()","401":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithFailureWithActualOrder()","402":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithFailureWithActualOrder()","404":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithOneShotIterable()","405":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithOneShotIterable()","406":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithOneShotIterable()","407":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithOneShotIterable()","408":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithOneShotIterable()","409":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithOneShotIterable()","410":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithOneShotIterable()","412":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithOneShotIterableWrongOrder()","413":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithOneShotIterableWrongOrder()","414":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithOneShotIterableWrongOrder()","415":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithOneShotIterableWrongOrder()","416":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithOneShotIterableWrongOrder()","417":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithOneShotIterableWrongOrder()","418":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithOneShotIterableWrongOrder()","419":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithOneShotIterableWrongOrder()","420":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithOneShotIterableWrongOrder()","421":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithOneShotIterableWrongOrder()","422":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithOneShotIterableWrongOrder()","423":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithOneShotIterableWrongOrder()","424":"IterableSubjectTest::::iterableContainsAtLeastInOrderWithOneShotIterableWrongOrder()","435":"IterableSubjectTest.OneShotIterable::::iterator()","436":"IterableSubjectTest.OneShotIterable::::iterator()","437":"IterableSubjectTest.OneShotIterable::::iterator()","438":"IterableSubjectTest.OneShotIterable::::iterator()","440":"IterableSubjectTest.OneShotIterable::::toString()","441":"IterableSubjectTest.OneShotIterable::::toString()","442":"IterableSubjectTest.OneShotIterable::::toString()","443":"IterableSubjectTest.OneShotIterable::::toString()","446":"IterableSubjectTest::::iterableContainsAtLeastInOrderWrongOrderAndMissing()","447":"IterableSubjectTest::::iterableContainsAtLeastInOrderWrongOrderAndMissing()","448":"IterableSubjectTest::::iterableContainsAtLeastInOrderWrongOrderAndMissing()","449":"IterableSubjectTest::::iterableContainsAtLeastInOrderWrongOrderAndMissing()","451":"IterableSubjectTest::::iterableContainsAtLeastElementsInIterable()","452":"IterableSubjectTest::::iterableContainsAtLeastElementsInIterable()","453":"IterableSubjectTest::::iterableContainsAtLeastElementsInIterable()","454":"IterableSubjectTest::::iterableContainsAtLeastElementsInIterable()","455":"IterableSubjectTest::::iterableContainsAtLeastElementsInIterable()","456":"IterableSubjectTest::::iterableContainsAtLeastElementsInIterable()","457":"IterableSubjectTest::::iterableContainsAtLeastElementsInIterable()","458":"IterableSubjectTest::::iterableContainsAtLeastElementsInIterable()","459":"IterableSubjectTest::::iterableContainsAtLeastElementsInIterable()","460":"IterableSubjectTest::::iterableContainsAtLeastElementsInIterable()","462":"IterableSubjectTest::::iterableContainsAtLeastElementsInCanUseFactPerElement()","463":"IterableSubjectTest::::iterableContainsAtLeastElementsInCanUseFactPerElement()","464":"IterableSubjectTest::::iterableContainsAtLeastElementsInCanUseFactPerElement()","465":"IterableSubjectTest::::iterableContainsAtLeastElementsInCanUseFactPerElement()","466":"IterableSubjectTest::::iterableContainsAtLeastElementsInCanUseFactPerElement()","467":"IterableSubjectTest::::iterableContainsAtLeastElementsInCanUseFactPerElement()","468":"IterableSubjectTest::::iterableContainsAtLeastElementsInCanUseFactPerElement()","469":"IterableSubjectTest::::iterableContainsAtLeastElementsInCanUseFactPerElement()","470":"IterableSubjectTest::::iterableContainsAtLeastElementsInCanUseFactPerElement()","472":"IterableSubjectTest::::iterableContainsAtLeastElementsInArray()","473":"IterableSubjectTest::::iterableContainsAtLeastElementsInArray()","474":"IterableSubjectTest::::iterableContainsAtLeastElementsInArray()","475":"IterableSubjectTest::::iterableContainsAtLeastElementsInArray()","476":"IterableSubjectTest::::iterableContainsAtLeastElementsInArray()","477":"IterableSubjectTest::::iterableContainsAtLeastElementsInArray()","478":"IterableSubjectTest::::iterableContainsAtLeastElementsInArray()","479":"IterableSubjectTest::::iterableContainsAtLeastElementsInArray()","480":"IterableSubjectTest::::iterableContainsAtLeastElementsInArray()","481":"IterableSubjectTest::::iterableContainsAtLeastElementsInArray()","483":"IterableSubjectTest::::iterableContainsNoneOf()","484":"IterableSubjectTest::::iterableContainsNoneOf()","485":"IterableSubjectTest::::iterableContainsNoneOf()","486":"IterableSubjectTest::::iterableContainsNoneOf()","488":"IterableSubjectTest::::iterableContainsNoneOfFailure()","489":"IterableSubjectTest::::iterableContainsNoneOfFailure()","490":"IterableSubjectTest::::iterableContainsNoneOfFailure()","491":"IterableSubjectTest::::iterableContainsNoneOfFailure()","492":"IterableSubjectTest::::iterableContainsNoneOfFailure()","493":"IterableSubjectTest::::iterableContainsNoneOfFailure()","494":"IterableSubjectTest::::iterableContainsNoneOfFailure()","495":"IterableSubjectTest::::iterableContainsNoneOfFailure()","497":"IterableSubjectTest::::iterableContainsNoneOfFailureWithDuplicateInSubject()","498":"IterableSubjectTest::::iterableContainsNoneOfFailureWithDuplicateInSubject()","499":"IterableSubjectTest::::iterableContainsNoneOfFailureWithDuplicateInSubject()","500":"IterableSubjectTest::::iterableContainsNoneOfFailureWithDuplicateInSubject()","501":"IterableSubjectTest::::iterableContainsNoneOfFailureWithDuplicateInSubject()","503":"IterableSubjectTest::::iterableContainsNoneOfFailureWithDuplicateInExpected()","504":"IterableSubjectTest::::iterableContainsNoneOfFailureWithDuplicateInExpected()","505":"IterableSubjectTest::::iterableContainsNoneOfFailureWithDuplicateInExpected()","506":"IterableSubjectTest::::iterableContainsNoneOfFailureWithDuplicateInExpected()","507":"IterableSubjectTest::::iterableContainsNoneOfFailureWithDuplicateInExpected()","509":"IterableSubjectTest::::iterableContainsNoneOfFailureWithEmptyString()","510":"IterableSubjectTest::::iterableContainsNoneOfFailureWithEmptyString()","511":"IterableSubjectTest::::iterableContainsNoneOfFailureWithEmptyString()","512":"IterableSubjectTest::::iterableContainsNoneOfFailureWithEmptyString()","513":"IterableSubjectTest::::iterableContainsNoneOfFailureWithEmptyString()","514":"IterableSubjectTest::::iterableContainsNoneOfFailureWithEmptyString()","515":"IterableSubjectTest::::iterableContainsNoneOfFailureWithEmptyString()","516":"IterableSubjectTest::::iterableContainsNoneOfFailureWithEmptyString()","518":"IterableSubjectTest::::iterableContainsNoneInIterable()","519":"IterableSubjectTest::::iterableContainsNoneInIterable()","520":"IterableSubjectTest::::iterableContainsNoneInIterable()","521":"IterableSubjectTest::::iterableContainsNoneInIterable()","522":"IterableSubjectTest::::iterableContainsNoneInIterable()","523":"IterableSubjectTest::::iterableContainsNoneInIterable()","524":"IterableSubjectTest::::iterableContainsNoneInIterable()","525":"IterableSubjectTest::::iterableContainsNoneInIterable()","526":"IterableSubjectTest::::iterableContainsNoneInIterable()","527":"IterableSubjectTest::::iterableContainsNoneInIterable()","529":"IterableSubjectTest::::iterableContainsNoneInArray()","530":"IterableSubjectTest::::iterableContainsNoneInArray()","531":"IterableSubjectTest::::iterableContainsNoneInArray()","532":"IterableSubjectTest::::iterableContainsNoneInArray()","533":"IterableSubjectTest::::iterableContainsNoneInArray()","535":"IterableSubjectTest::::iterableContainsExactlyArray()","536":"IterableSubjectTest::::iterableContainsExactlyArray()","537":"IterableSubjectTest::::iterableContainsExactlyArray()","538":"IterableSubjectTest::::iterableContainsExactlyArray()","539":"IterableSubjectTest::::iterableContainsExactlyArray()","540":"IterableSubjectTest::::iterableContainsExactlyArray()","541":"IterableSubjectTest::::iterableContainsExactlyArray()","543":"IterableSubjectTest::::arrayContainsExactly()","544":"IterableSubjectTest::::arrayContainsExactly()","545":"IterableSubjectTest::::arrayContainsExactly()","546":"IterableSubjectTest::::arrayContainsExactly()","547":"IterableSubjectTest::::arrayContainsExactly()","548":"IterableSubjectTest::::arrayContainsExactly()","549":"IterableSubjectTest::::arrayContainsExactly()","550":"IterableSubjectTest::::arrayContainsExactly()","552":"IterableSubjectTest::::iterableContainsExactlyWithMany()","553":"IterableSubjectTest::::iterableContainsExactlyWithMany()","554":"IterableSubjectTest::::iterableContainsExactlyWithMany()","555":"IterableSubjectTest::::iterableContainsExactlyWithMany()","557":"IterableSubjectTest::::iterableContainsExactlyOutOfOrder()","558":"IterableSubjectTest::::iterableContainsExactlyOutOfOrder()","559":"IterableSubjectTest::::iterableContainsExactlyOutOfOrder()","560":"IterableSubjectTest::::iterableContainsExactlyOutOfOrder()","562":"IterableSubjectTest::::iterableContainsExactlyWithDuplicates()","563":"IterableSubjectTest::::iterableContainsExactlyWithDuplicates()","564":"IterableSubjectTest::::iterableContainsExactlyWithDuplicates()","565":"IterableSubjectTest::::iterableContainsExactlyWithDuplicates()","567":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesOutOfOrder()","568":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesOutOfOrder()","569":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesOutOfOrder()","570":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesOutOfOrder()","572":"IterableSubjectTest::::iterableContainsExactlyWithOnlyNullPassedAsNullArray()","573":"IterableSubjectTest::::iterableContainsExactlyWithOnlyNullPassedAsNullArray()","574":"IterableSubjectTest::::iterableContainsExactlyWithOnlyNullPassedAsNullArray()","575":"IterableSubjectTest::::iterableContainsExactlyWithOnlyNullPassedAsNullArray()","576":"IterableSubjectTest::::iterableContainsExactlyWithOnlyNullPassedAsNullArray()","577":"IterableSubjectTest::::iterableContainsExactlyWithOnlyNullPassedAsNullArray()","579":"IterableSubjectTest::::iterableContainsExactlyWithOnlyNull()","580":"IterableSubjectTest::::iterableContainsExactlyWithOnlyNull()","581":"IterableSubjectTest::::iterableContainsExactlyWithOnlyNull()","582":"IterableSubjectTest::::iterableContainsExactlyWithOnlyNull()","583":"IterableSubjectTest::::iterableContainsExactlyWithOnlyNull()","585":"IterableSubjectTest::::iterableContainsExactlyWithNullSecond()","586":"IterableSubjectTest::::iterableContainsExactlyWithNullSecond()","587":"IterableSubjectTest::::iterableContainsExactlyWithNullSecond()","588":"IterableSubjectTest::::iterableContainsExactlyWithNullSecond()","590":"IterableSubjectTest::::iterableContainsExactlyWithNullThird()","591":"IterableSubjectTest::::iterableContainsExactlyWithNullThird()","592":"IterableSubjectTest::::iterableContainsExactlyWithNullThird()","593":"IterableSubjectTest::::iterableContainsExactlyWithNullThird()","595":"IterableSubjectTest::::iterableContainsExactlyWithNull()","596":"IterableSubjectTest::::iterableContainsExactlyWithNull()","597":"IterableSubjectTest::::iterableContainsExactlyWithNull()","598":"IterableSubjectTest::::iterableContainsExactlyWithNull()","600":"IterableSubjectTest::::iterableContainsExactlyWithNullOutOfOrder()","601":"IterableSubjectTest::::iterableContainsExactlyWithNullOutOfOrder()","602":"IterableSubjectTest::::iterableContainsExactlyWithNullOutOfOrder()","603":"IterableSubjectTest::::iterableContainsExactlyWithNullOutOfOrder()","605":"IterableSubjectTest::::iterableContainsExactlyOutOfOrderDoesNotStringify()","606":"IterableSubjectTest::::iterableContainsExactlyOutOfOrderDoesNotStringify()","607":"IterableSubjectTest::::iterableContainsExactlyOutOfOrderDoesNotStringify()","608":"IterableSubjectTest::::iterableContainsExactlyOutOfOrderDoesNotStringify()","609":"IterableSubjectTest::::iterableContainsExactlyOutOfOrderDoesNotStringify()","610":"IterableSubjectTest::::iterableContainsExactlyOutOfOrderDoesNotStringify()","611":"IterableSubjectTest::::iterableContainsExactlyOutOfOrderDoesNotStringify()","612":"IterableSubjectTest::::iterableContainsExactlyOutOfOrderDoesNotStringify()","613":"IterableSubjectTest::::iterableContainsExactlyOutOfOrderDoesNotStringify()","614":"IterableSubjectTest::::iterableContainsExactlyOutOfOrderDoesNotStringify()","616":"IterableSubjectTest::::iterableContainsExactlyWithEmptyString()","617":"IterableSubjectTest::::iterableContainsExactlyWithEmptyString()","618":"IterableSubjectTest::::iterableContainsExactlyWithEmptyString()","619":"IterableSubjectTest::::iterableContainsExactlyWithEmptyString()","620":"IterableSubjectTest::::iterableContainsExactlyWithEmptyString()","621":"IterableSubjectTest::::iterableContainsExactlyWithEmptyString()","623":"IterableSubjectTest::::iterableContainsExactlyWithEmptyStringAndUnexpectedItem()","624":"IterableSubjectTest::::iterableContainsExactlyWithEmptyStringAndUnexpectedItem()","625":"IterableSubjectTest::::iterableContainsExactlyWithEmptyStringAndUnexpectedItem()","626":"IterableSubjectTest::::iterableContainsExactlyWithEmptyStringAndUnexpectedItem()","627":"IterableSubjectTest::::iterableContainsExactlyWithEmptyStringAndUnexpectedItem()","628":"IterableSubjectTest::::iterableContainsExactlyWithEmptyStringAndUnexpectedItem()","629":"IterableSubjectTest::::iterableContainsExactlyWithEmptyStringAndUnexpectedItem()","630":"IterableSubjectTest::::iterableContainsExactlyWithEmptyStringAndUnexpectedItem()","632":"IterableSubjectTest::::iterableContainsExactlyWithEmptyStringAndMissingItem()","633":"IterableSubjectTest::::iterableContainsExactlyWithEmptyStringAndMissingItem()","634":"IterableSubjectTest::::iterableContainsExactlyWithEmptyStringAndMissingItem()","635":"IterableSubjectTest::::iterableContainsExactlyWithEmptyStringAndMissingItem()","636":"IterableSubjectTest::::iterableContainsExactlyWithEmptyStringAndMissingItem()","637":"IterableSubjectTest::::iterableContainsExactlyWithEmptyStringAndMissingItem()","638":"IterableSubjectTest::::iterableContainsExactlyWithEmptyStringAndMissingItem()","640":"IterableSubjectTest::::iterableContainsExactlyWithEmptyStringAmongMissingItems()","641":"IterableSubjectTest::::iterableContainsExactlyWithEmptyStringAmongMissingItems()","642":"IterableSubjectTest::::iterableContainsExactlyWithEmptyStringAmongMissingItems()","643":"IterableSubjectTest::::iterableContainsExactlyWithEmptyStringAmongMissingItems()","644":"IterableSubjectTest::::iterableContainsExactlyWithEmptyStringAmongMissingItems()","645":"IterableSubjectTest::::iterableContainsExactlyWithEmptyStringAmongMissingItems()","646":"IterableSubjectTest::::iterableContainsExactlyWithEmptyStringAmongMissingItems()","647":"IterableSubjectTest::::iterableContainsExactlyWithEmptyStringAmongMissingItems()","648":"IterableSubjectTest::::iterableContainsExactlyWithEmptyStringAmongMissingItems()","649":"IterableSubjectTest::::iterableContainsExactlyWithEmptyStringAmongMissingItems()","651":"IterableSubjectTest::::iterableContainsExactlySingleElement()","652":"IterableSubjectTest::::iterableContainsExactlySingleElement()","653":"IterableSubjectTest::::iterableContainsExactlySingleElement()","654":"IterableSubjectTest::::iterableContainsExactlySingleElement()","655":"IterableSubjectTest::::iterableContainsExactlySingleElement()","656":"IterableSubjectTest::::iterableContainsExactlySingleElement()","657":"IterableSubjectTest::::iterableContainsExactlySingleElement()","658":"IterableSubjectTest::::iterableContainsExactlySingleElement()","660":"IterableSubjectTest::::iterableContainsExactlySingleElementNoEqualsMagic()","661":"IterableSubjectTest::::iterableContainsExactlySingleElementNoEqualsMagic()","662":"IterableSubjectTest::::iterableContainsExactlySingleElementNoEqualsMagic()","663":"IterableSubjectTest::::iterableContainsExactlySingleElementNoEqualsMagic()","664":"IterableSubjectTest::::iterableContainsExactlySingleElementNoEqualsMagic()","666":"IterableSubjectTest::::iterableContainsExactlyWithElementsThatThrowWhenYouCallHashCode()","667":"IterableSubjectTest::::iterableContainsExactlyWithElementsThatThrowWhenYouCallHashCode()","668":"IterableSubjectTest::::iterableContainsExactlyWithElementsThatThrowWhenYouCallHashCode()","669":"IterableSubjectTest::::iterableContainsExactlyWithElementsThatThrowWhenYouCallHashCode()","670":"IterableSubjectTest::::iterableContainsExactlyWithElementsThatThrowWhenYouCallHashCode()","671":"IterableSubjectTest::::iterableContainsExactlyWithElementsThatThrowWhenYouCallHashCode()","672":"IterableSubjectTest::::iterableContainsExactlyWithElementsThatThrowWhenYouCallHashCode()","673":"IterableSubjectTest::::iterableContainsExactlyWithElementsThatThrowWhenYouCallHashCode()","674":"IterableSubjectTest::::iterableContainsExactlyWithElementsThatThrowWhenYouCallHashCode()","675":"IterableSubjectTest::::iterableContainsExactlyWithElementsThatThrowWhenYouCallHashCode()","676":"IterableSubjectTest::::iterableContainsExactlyWithElementsThatThrowWhenYouCallHashCode()","678":"IterableSubjectTest::::iterableContainsExactlyWithElementsThatThrowWhenYouCallHashCodeFailureTooMany()","679":"IterableSubjectTest::::iterableContainsExactlyWithElementsThatThrowWhenYouCallHashCodeFailureTooMany()","680":"IterableSubjectTest::::iterableContainsExactlyWithElementsThatThrowWhenYouCallHashCodeFailureTooMany()","681":"IterableSubjectTest::::iterableContainsExactlyWithElementsThatThrowWhenYouCallHashCodeFailureTooMany()","682":"IterableSubjectTest::::iterableContainsExactlyWithElementsThatThrowWhenYouCallHashCodeFailureTooMany()","683":"IterableSubjectTest::::iterableContainsExactlyWithElementsThatThrowWhenYouCallHashCodeFailureTooMany()","684":"IterableSubjectTest::::iterableContainsExactlyWithElementsThatThrowWhenYouCallHashCodeFailureTooMany()","686":"IterableSubjectTest::::iterableContainsExactlyWithElementsThatThrowWhenYouCallHashCodeOneMismatch()","687":"IterableSubjectTest::::iterableContainsExactlyWithElementsThatThrowWhenYouCallHashCodeOneMismatch()","688":"IterableSubjectTest::::iterableContainsExactlyWithElementsThatThrowWhenYouCallHashCodeOneMismatch()","689":"IterableSubjectTest::::iterableContainsExactlyWithElementsThatThrowWhenYouCallHashCodeOneMismatch()","690":"IterableSubjectTest::::iterableContainsExactlyWithElementsThatThrowWhenYouCallHashCodeOneMismatch()","691":"IterableSubjectTest::::iterableContainsExactlyWithElementsThatThrowWhenYouCallHashCodeOneMismatch()","692":"IterableSubjectTest::::iterableContainsExactlyWithElementsThatThrowWhenYouCallHashCodeOneMismatch()","695":"IterableSubjectTest.HashCodeThrower::::equals(java.lang.Object)","696":"IterableSubjectTest.HashCodeThrower::::equals(java.lang.Object)","697":"IterableSubjectTest.HashCodeThrower::::equals(java.lang.Object)","698":"IterableSubjectTest.HashCodeThrower::::equals(java.lang.Object)","700":"IterableSubjectTest.HashCodeThrower::::hashCode()","701":"IterableSubjectTest.HashCodeThrower::::hashCode()","702":"IterableSubjectTest.HashCodeThrower::::hashCode()","703":"IterableSubjectTest.HashCodeThrower::::hashCode()","705":"IterableSubjectTest.HashCodeThrower::::toString()","706":"IterableSubjectTest.HashCodeThrower::::toString()","707":"IterableSubjectTest.HashCodeThrower::::toString()","708":"IterableSubjectTest.HashCodeThrower::::toString()","711":"IterableSubjectTest::::iterableContainsExactlyElementsInInOrderPassesWithEmptyExpectedAndActual()","712":"IterableSubjectTest::::iterableContainsExactlyElementsInInOrderPassesWithEmptyExpectedAndActual()","713":"IterableSubjectTest::::iterableContainsExactlyElementsInInOrderPassesWithEmptyExpectedAndActual()","714":"IterableSubjectTest::::iterableContainsExactlyElementsInInOrderPassesWithEmptyExpectedAndActual()","715":"IterableSubjectTest::::iterableContainsExactlyElementsInInOrderPassesWithEmptyExpectedAndActual()","717":"IterableSubjectTest::::iterableContainsExactlyElementsInWithEmptyExpected()","718":"IterableSubjectTest::::iterableContainsExactlyElementsInWithEmptyExpected()","719":"IterableSubjectTest::::iterableContainsExactlyElementsInWithEmptyExpected()","720":"IterableSubjectTest::::iterableContainsExactlyElementsInWithEmptyExpected()","721":"IterableSubjectTest::::iterableContainsExactlyElementsInWithEmptyExpected()","722":"IterableSubjectTest::::iterableContainsExactlyElementsInWithEmptyExpected()","724":"IterableSubjectTest::::iterableContainsExactlyElementsInErrorMessageIsInOrder()","725":"IterableSubjectTest::::iterableContainsExactlyElementsInErrorMessageIsInOrder()","726":"IterableSubjectTest::::iterableContainsExactlyElementsInErrorMessageIsInOrder()","727":"IterableSubjectTest::::iterableContainsExactlyElementsInErrorMessageIsInOrder()","728":"IterableSubjectTest::::iterableContainsExactlyElementsInErrorMessageIsInOrder()","729":"IterableSubjectTest::::iterableContainsExactlyElementsInErrorMessageIsInOrder()","730":"IterableSubjectTest::::iterableContainsExactlyElementsInErrorMessageIsInOrder()","731":"IterableSubjectTest::::iterableContainsExactlyElementsInErrorMessageIsInOrder()","733":"IterableSubjectTest::::iterableContainsExactlyMissingItemFailure()","734":"IterableSubjectTest::::iterableContainsExactlyMissingItemFailure()","735":"IterableSubjectTest::::iterableContainsExactlyMissingItemFailure()","736":"IterableSubjectTest::::iterableContainsExactlyMissingItemFailure()","737":"IterableSubjectTest::::iterableContainsExactlyMissingItemFailure()","739":"IterableSubjectTest::::iterableContainsExactlyUnexpectedItemFailure()","740":"IterableSubjectTest::::iterableContainsExactlyUnexpectedItemFailure()","741":"IterableSubjectTest::::iterableContainsExactlyUnexpectedItemFailure()","742":"IterableSubjectTest::::iterableContainsExactlyUnexpectedItemFailure()","743":"IterableSubjectTest::::iterableContainsExactlyUnexpectedItemFailure()","745":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesNotEnoughItemsFailure()","746":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesNotEnoughItemsFailure()","747":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesNotEnoughItemsFailure()","748":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesNotEnoughItemsFailure()","749":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesNotEnoughItemsFailure()","751":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesMissingItemFailure()","752":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesMissingItemFailure()","753":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesMissingItemFailure()","754":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesMissingItemFailure()","755":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesMissingItemFailure()","757":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesMissingItemsWithNewlineFailure()","758":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesMissingItemsWithNewlineFailure()","759":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesMissingItemsWithNewlineFailure()","760":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesMissingItemsWithNewlineFailure()","761":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesMissingItemsWithNewlineFailure()","762":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesMissingItemsWithNewlineFailure()","763":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesMissingItemsWithNewlineFailure()","765":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesMissingAndExtraItemsWithNewlineFailure()","766":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesMissingAndExtraItemsWithNewlineFailure()","767":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesMissingAndExtraItemsWithNewlineFailure()","768":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesMissingAndExtraItemsWithNewlineFailure()","769":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesMissingAndExtraItemsWithNewlineFailure()","770":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesMissingAndExtraItemsWithNewlineFailure()","771":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesMissingAndExtraItemsWithNewlineFailure()","772":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesMissingAndExtraItemsWithNewlineFailure()","773":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesMissingAndExtraItemsWithNewlineFailure()","774":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesMissingAndExtraItemsWithNewlineFailure()","775":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesMissingAndExtraItemsWithNewlineFailure()","776":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesMissingAndExtraItemsWithNewlineFailure()","777":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesMissingAndExtraItemsWithNewlineFailure()","778":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesMissingAndExtraItemsWithNewlineFailure()","779":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesMissingAndExtraItemsWithNewlineFailure()","781":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesUnexpectedItemFailure()","782":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesUnexpectedItemFailure()","783":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesUnexpectedItemFailure()","784":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesUnexpectedItemFailure()","785":"IterableSubjectTest::::iterableContainsExactlyWithDuplicatesUnexpectedItemFailure()","791":"IterableSubjectTest::::iterableContainsExactlyWithDuplicateMissingElements()","792":"IterableSubjectTest::::iterableContainsExactlyWithDuplicateMissingElements()","793":"IterableSubjectTest::::iterableContainsExactlyWithDuplicateMissingElements()","794":"IterableSubjectTest::::iterableContainsExactlyWithDuplicateMissingElements()","795":"IterableSubjectTest::::iterableContainsExactlyWithDuplicateMissingElements()","797":"IterableSubjectTest::::iterableContainsExactlyWithNullFailure()","798":"IterableSubjectTest::::iterableContainsExactlyWithNullFailure()","799":"IterableSubjectTest::::iterableContainsExactlyWithNullFailure()","800":"IterableSubjectTest::::iterableContainsExactlyWithNullFailure()","801":"IterableSubjectTest::::iterableContainsExactlyWithNullFailure()","803":"IterableSubjectTest::::iterableContainsExactlyWithMissingAndExtraElements()","804":"IterableSubjectTest::::iterableContainsExactlyWithMissingAndExtraElements()","805":"IterableSubjectTest::::iterableContainsExactlyWithMissingAndExtraElements()","806":"IterableSubjectTest::::iterableContainsExactlyWithMissingAndExtraElements()","807":"IterableSubjectTest::::iterableContainsExactlyWithMissingAndExtraElements()","808":"IterableSubjectTest::::iterableContainsExactlyWithMissingAndExtraElements()","810":"IterableSubjectTest::::iterableContainsExactlyWithDuplicateMissingAndExtraElements()","811":"IterableSubjectTest::::iterableContainsExactlyWithDuplicateMissingAndExtraElements()","812":"IterableSubjectTest::::iterableContainsExactlyWithDuplicateMissingAndExtraElements()","813":"IterableSubjectTest::::iterableContainsExactlyWithDuplicateMissingAndExtraElements()","814":"IterableSubjectTest::::iterableContainsExactlyWithDuplicateMissingAndExtraElements()","815":"IterableSubjectTest::::iterableContainsExactlyWithDuplicateMissingAndExtraElements()","817":"IterableSubjectTest::::iterableContainsExactlyWithCommaSeparatedVsIndividual()","818":"IterableSubjectTest::::iterableContainsExactlyWithCommaSeparatedVsIndividual()","819":"IterableSubjectTest::::iterableContainsExactlyWithCommaSeparatedVsIndividual()","820":"IterableSubjectTest::::iterableContainsExactlyWithCommaSeparatedVsIndividual()","821":"IterableSubjectTest::::iterableContainsExactlyWithCommaSeparatedVsIndividual()","822":"IterableSubjectTest::::iterableContainsExactlyWithCommaSeparatedVsIndividual()","823":"IterableSubjectTest::::iterableContainsExactlyWithCommaSeparatedVsIndividual()","824":"IterableSubjectTest::::iterableContainsExactlyWithCommaSeparatedVsIndividual()","825":"IterableSubjectTest::::iterableContainsExactlyWithCommaSeparatedVsIndividual()","827":"IterableSubjectTest::::iterableContainsExactlyFailsWithSameToStringAndHomogeneousList()","828":"IterableSubjectTest::::iterableContainsExactlyFailsWithSameToStringAndHomogeneousList()","829":"IterableSubjectTest::::iterableContainsExactlyFailsWithSameToStringAndHomogeneousList()","830":"IterableSubjectTest::::iterableContainsExactlyFailsWithSameToStringAndHomogeneousList()","831":"IterableSubjectTest::::iterableContainsExactlyFailsWithSameToStringAndHomogeneousList()","832":"IterableSubjectTest::::iterableContainsExactlyFailsWithSameToStringAndHomogeneousList()","834":"IterableSubjectTest::::iterableContainsExactlyFailsWithSameToStringAndListWithNull()","835":"IterableSubjectTest::::iterableContainsExactlyFailsWithSameToStringAndListWithNull()","836":"IterableSubjectTest::::iterableContainsExactlyFailsWithSameToStringAndListWithNull()","837":"IterableSubjectTest::::iterableContainsExactlyFailsWithSameToStringAndListWithNull()","838":"IterableSubjectTest::::iterableContainsExactlyFailsWithSameToStringAndListWithNull()","839":"IterableSubjectTest::::iterableContainsExactlyFailsWithSameToStringAndListWithNull()","840":"IterableSubjectTest::::iterableContainsExactlyFailsWithSameToStringAndListWithNull()","842":"IterableSubjectTest::::iterableContainsExactlyFailsWithSameToStringAndHeterogeneousList()","843":"IterableSubjectTest::::iterableContainsExactlyFailsWithSameToStringAndHeterogeneousList()","844":"IterableSubjectTest::::iterableContainsExactlyFailsWithSameToStringAndHeterogeneousList()","845":"IterableSubjectTest::::iterableContainsExactlyFailsWithSameToStringAndHeterogeneousList()","846":"IterableSubjectTest::::iterableContainsExactlyFailsWithSameToStringAndHeterogeneousList()","847":"IterableSubjectTest::::iterableContainsExactlyFailsWithSameToStringAndHeterogeneousList()","848":"IterableSubjectTest::::iterableContainsExactlyFailsWithSameToStringAndHeterogeneousList()","850":"IterableSubjectTest::::iterableContainsExactlyFailsWithSameToStringAndHomogeneousListWithDuplicates()","851":"IterableSubjectTest::::iterableContainsExactlyFailsWithSameToStringAndHomogeneousListWithDuplicates()","852":"IterableSubjectTest::::iterableContainsExactlyFailsWithSameToStringAndHomogeneousListWithDuplicates()","853":"IterableSubjectTest::::iterableContainsExactlyFailsWithSameToStringAndHomogeneousListWithDuplicates()","854":"IterableSubjectTest::::iterableContainsExactlyFailsWithSameToStringAndHomogeneousListWithDuplicates()","855":"IterableSubjectTest::::iterableContainsExactlyFailsWithSameToStringAndHomogeneousListWithDuplicates()","857":"IterableSubjectTest::::iterableContainsExactlyFailsWithSameToStringAndHeterogeneousListWithDuplicates()","858":"IterableSubjectTest::::iterableContainsExactlyFailsWithSameToStringAndHeterogeneousListWithDuplicates()","859":"IterableSubjectTest::::iterableContainsExactlyFailsWithSameToStringAndHeterogeneousListWithDuplicates()","860":"IterableSubjectTest::::iterableContainsExactlyFailsWithSameToStringAndHeterogeneousListWithDuplicates()","861":"IterableSubjectTest::::iterableContainsExactlyFailsWithSameToStringAndHeterogeneousListWithDuplicates()","862":"IterableSubjectTest::::iterableContainsExactlyFailsWithSameToStringAndHeterogeneousListWithDuplicates()","863":"IterableSubjectTest::::iterableContainsExactlyFailsWithSameToStringAndHeterogeneousListWithDuplicates()","864":"IterableSubjectTest::::iterableContainsExactlyFailsWithSameToStringAndHeterogeneousListWithDuplicates()","866":"IterableSubjectTest::::iterableContainsExactlyWithOneIterableGivesWarning()","867":"IterableSubjectTest::::iterableContainsExactlyWithOneIterableGivesWarning()","868":"IterableSubjectTest::::iterableContainsExactlyWithOneIterableGivesWarning()","869":"IterableSubjectTest::::iterableContainsExactlyWithOneIterableGivesWarning()","870":"IterableSubjectTest::::iterableContainsExactlyWithOneIterableGivesWarning()","871":"IterableSubjectTest::::iterableContainsExactlyWithOneIterableGivesWarning()","872":"IterableSubjectTest::::iterableContainsExactlyWithOneIterableGivesWarning()","874":"IterableSubjectTest::::iterableContainsExactlyElementsInWithOneIterableDoesNotGiveWarning()","875":"IterableSubjectTest::::iterableContainsExactlyElementsInWithOneIterableDoesNotGiveWarning()","876":"IterableSubjectTest::::iterableContainsExactlyElementsInWithOneIterableDoesNotGiveWarning()","877":"IterableSubjectTest::::iterableContainsExactlyElementsInWithOneIterableDoesNotGiveWarning()","878":"IterableSubjectTest::::iterableContainsExactlyElementsInWithOneIterableDoesNotGiveWarning()","879":"IterableSubjectTest::::iterableContainsExactlyElementsInWithOneIterableDoesNotGiveWarning()","881":"IterableSubjectTest::::iterableContainsExactlyWithTwoIterableDoesNotGivesWarning()","882":"IterableSubjectTest::::iterableContainsExactlyWithTwoIterableDoesNotGivesWarning()","883":"IterableSubjectTest::::iterableContainsExactlyWithTwoIterableDoesNotGivesWarning()","884":"IterableSubjectTest::::iterableContainsExactlyWithTwoIterableDoesNotGivesWarning()","885":"IterableSubjectTest::::iterableContainsExactlyWithTwoIterableDoesNotGivesWarning()","886":"IterableSubjectTest::::iterableContainsExactlyWithTwoIterableDoesNotGivesWarning()","887":"IterableSubjectTest::::iterableContainsExactlyWithTwoIterableDoesNotGivesWarning()","894":"IterableSubjectTest::::iterableContainsExactlyWithOneNonIterableDoesNotGiveWarning()","895":"IterableSubjectTest::::iterableContainsExactlyWithOneNonIterableDoesNotGiveWarning()","896":"IterableSubjectTest::::iterableContainsExactlyWithOneNonIterableDoesNotGiveWarning()","897":"IterableSubjectTest::::iterableContainsExactlyWithOneNonIterableDoesNotGiveWarning()","898":"IterableSubjectTest::::iterableContainsExactlyWithOneNonIterableDoesNotGiveWarning()","900":"IterableSubjectTest::::iterableContainsExactlyInOrder()","901":"IterableSubjectTest::::iterableContainsExactlyInOrder()","902":"IterableSubjectTest::::iterableContainsExactlyInOrder()","903":"IterableSubjectTest::::iterableContainsExactlyInOrder()","905":"IterableSubjectTest::::iterableContainsExactlyInOrderWithNull()","906":"IterableSubjectTest::::iterableContainsExactlyInOrderWithNull()","907":"IterableSubjectTest::::iterableContainsExactlyInOrderWithNull()","908":"IterableSubjectTest::::iterableContainsExactlyInOrderWithNull()","910":"IterableSubjectTest::::iterableContainsExactlyInOrderWithFailure()","911":"IterableSubjectTest::::iterableContainsExactlyInOrderWithFailure()","912":"IterableSubjectTest::::iterableContainsExactlyInOrderWithFailure()","913":"IterableSubjectTest::::iterableContainsExactlyInOrderWithFailure()","914":"IterableSubjectTest::::iterableContainsExactlyInOrderWithFailure()","915":"IterableSubjectTest::::iterableContainsExactlyInOrderWithFailure()","917":"IterableSubjectTest::::iterableContainsExactlyInOrderWithOneShotIterable()","918":"IterableSubjectTest::::iterableContainsExactlyInOrderWithOneShotIterable()","919":"IterableSubjectTest::::iterableContainsExactlyInOrderWithOneShotIterable()","920":"IterableSubjectTest::::iterableContainsExactlyInOrderWithOneShotIterable()","921":"IterableSubjectTest::::iterableContainsExactlyInOrderWithOneShotIterable()","922":"IterableSubjectTest::::iterableContainsExactlyInOrderWithOneShotIterable()","923":"IterableSubjectTest::::iterableContainsExactlyInOrderWithOneShotIterable()","924":"IterableSubjectTest::::iterableContainsExactlyInOrderWithOneShotIterable()","925":"IterableSubjectTest::::iterableContainsExactlyInOrderWithOneShotIterable()","926":"IterableSubjectTest::::iterableContainsExactlyInOrderWithOneShotIterable()","927":"IterableSubjectTest::::iterableContainsExactlyInOrderWithOneShotIterable()","928":"IterableSubjectTest::::iterableContainsExactlyInOrderWithOneShotIterable()","930":"IterableSubjectTest::::iterableContainsExactlyInOrderWithOneShotIterableWrongOrder()","931":"IterableSubjectTest::::iterableContainsExactlyInOrderWithOneShotIterableWrongOrder()","932":"IterableSubjectTest::::iterableContainsExactlyInOrderWithOneShotIterableWrongOrder()","933":"IterableSubjectTest::::iterableContainsExactlyInOrderWithOneShotIterableWrongOrder()","934":"IterableSubjectTest::::iterableContainsExactlyInOrderWithOneShotIterableWrongOrder()","935":"IterableSubjectTest::::iterableContainsExactlyInOrderWithOneShotIterableWrongOrder()","936":"IterableSubjectTest::::iterableContainsExactlyInOrderWithOneShotIterableWrongOrder()","937":"IterableSubjectTest::::iterableContainsExactlyInOrderWithOneShotIterableWrongOrder()","938":"IterableSubjectTest::::iterableContainsExactlyInOrderWithOneShotIterableWrongOrder()","939":"IterableSubjectTest::::iterableContainsExactlyInOrderWithOneShotIterableWrongOrder()","940":"IterableSubjectTest::::iterableContainsExactlyInOrderWithOneShotIterableWrongOrder()","941":"IterableSubjectTest::::iterableContainsExactlyInOrderWithOneShotIterableWrongOrder()","942":"IterableSubjectTest::::iterableContainsExactlyInOrderWithOneShotIterableWrongOrder()","943":"IterableSubjectTest::::iterableContainsExactlyInOrderWithOneShotIterableWrongOrder()","944":"IterableSubjectTest::::iterableContainsExactlyInOrderWithOneShotIterableWrongOrder()","945":"IterableSubjectTest::::iterableContainsExactlyInOrderWithOneShotIterableWrongOrder()","946":"IterableSubjectTest::::iterableContainsExactlyInOrderWithOneShotIterableWrongOrder()","947":"IterableSubjectTest::::iterableContainsExactlyInOrderWithOneShotIterableWrongOrder()","948":"IterableSubjectTest::::iterableContainsExactlyInOrderWithOneShotIterableWrongOrder()","949":"IterableSubjectTest::::iterableContainsExactlyInOrderWithOneShotIterableWrongOrder()","951":"IterableSubjectTest::::iterableWithNoToStringOverride()","952":"IterableSubjectTest::::iterableWithNoToStringOverride()","953":"IterableSubjectTest::::iterableWithNoToStringOverride()","954":"IterableSubjectTest::::iterableWithNoToStringOverride()","955":"IterableSubjectTest::::iterableWithNoToStringOverride()","956":"IterableSubjectTest::::iterableWithNoToStringOverride()","957":"IterableSubjectTest::::iterableWithNoToStringOverride()","958":"IterableSubjectTest::::iterableWithNoToStringOverride()","959":"IterableSubjectTest::::iterableWithNoToStringOverride()","960":"IterableSubjectTest::::iterableWithNoToStringOverride()","961":"IterableSubjectTest::::iterableWithNoToStringOverride()","962":"IterableSubjectTest::::iterableWithNoToStringOverride()","963":"IterableSubjectTest::::iterableWithNoToStringOverride()","965":"IterableSubjectTest::::iterableContainsExactlyElementsInIterable()","966":"IterableSubjectTest::::iterableContainsExactlyElementsInIterable()","967":"IterableSubjectTest::::iterableContainsExactlyElementsInIterable()","968":"IterableSubjectTest::::iterableContainsExactlyElementsInIterable()","969":"IterableSubjectTest::::iterableContainsExactlyElementsInIterable()","970":"IterableSubjectTest::::iterableContainsExactlyElementsInIterable()","971":"IterableSubjectTest::::iterableContainsExactlyElementsInIterable()","972":"IterableSubjectTest::::iterableContainsExactlyElementsInIterable()","974":"IterableSubjectTest::::iterableContainsExactlyElementsInArray()","975":"IterableSubjectTest::::iterableContainsExactlyElementsInArray()","976":"IterableSubjectTest::::iterableContainsExactlyElementsInArray()","977":"IterableSubjectTest::::iterableContainsExactlyElementsInArray()","978":"IterableSubjectTest::::iterableContainsExactlyElementsInArray()","979":"IterableSubjectTest::::iterableContainsExactlyElementsInArray()","980":"IterableSubjectTest::::iterableContainsExactlyElementsInArray()","982":"IterableSubjectTest::::nullEqualToNull()","983":"IterableSubjectTest::::nullEqualToNull()","984":"IterableSubjectTest::::nullEqualToNull()","985":"IterableSubjectTest::::nullEqualToNull()","986":"IterableSubjectTest::::nullEqualToNull()","988":"IterableSubjectTest::::nullEqualToSomething()","989":"IterableSubjectTest::::nullEqualToSomething()","990":"IterableSubjectTest::::nullEqualToSomething()","991":"IterableSubjectTest::::nullEqualToSomething()","993":"IterableSubjectTest::::somethingEqualToNull()","994":"IterableSubjectTest::::somethingEqualToNull()","995":"IterableSubjectTest::::somethingEqualToNull()","996":"IterableSubjectTest::::somethingEqualToNull()","998":"IterableSubjectTest::::somethingEqualToSomething()","999":"IterableSubjectTest::::somethingEqualToSomething()","1000":"IterableSubjectTest::::somethingEqualToSomething()","1001":"IterableSubjectTest::::somethingEqualToSomething()","1002":"IterableSubjectTest::::somethingEqualToSomething()","1003":"IterableSubjectTest::::somethingEqualToSomething()","1005":"IterableSubjectTest::::isEqualToNotConsistentWithEquals()","1006":"IterableSubjectTest::::isEqualToNotConsistentWithEquals()","1007":"IterableSubjectTest::::isEqualToNotConsistentWithEquals()","1008":"IterableSubjectTest::::isEqualToNotConsistentWithEquals()","1009":"IterableSubjectTest::::isEqualToNotConsistentWithEquals()","1010":"IterableSubjectTest::::isEqualToNotConsistentWithEquals()","1011":"IterableSubjectTest::::isEqualToNotConsistentWithEquals()","1012":"IterableSubjectTest::::isEqualToNotConsistentWithEquals()","1013":"IterableSubjectTest::::isEqualToNotConsistentWithEquals()","1014":"IterableSubjectTest::::isEqualToNotConsistentWithEquals()","1015":"IterableSubjectTest::::isEqualToNotConsistentWithEquals()","1016":"IterableSubjectTest::::isEqualToNotConsistentWithEquals()","1018":"IterableSubjectTest::::isEqualToNotConsistentWithEquals_failure()","1019":"IterableSubjectTest::::isEqualToNotConsistentWithEquals_failure()","1020":"IterableSubjectTest::::isEqualToNotConsistentWithEquals_failure()","1021":"IterableSubjectTest::::isEqualToNotConsistentWithEquals_failure()","1022":"IterableSubjectTest::::isEqualToNotConsistentWithEquals_failure()","1023":"IterableSubjectTest::::isEqualToNotConsistentWithEquals_failure()","1024":"IterableSubjectTest::::isEqualToNotConsistentWithEquals_failure()","1025":"IterableSubjectTest::::isEqualToNotConsistentWithEquals_failure()","1026":"IterableSubjectTest::::isEqualToNotConsistentWithEquals_failure()","1027":"IterableSubjectTest::::isEqualToNotConsistentWithEquals_failure()","1029":"IterableSubjectTest::::iterableIsEmpty()","1030":"IterableSubjectTest::::iterableIsEmpty()","1031":"IterableSubjectTest::::iterableIsEmpty()","1032":"IterableSubjectTest::::iterableIsEmpty()","1034":"IterableSubjectTest::::iterableIsEmptyWithFailure()","1035":"IterableSubjectTest::::iterableIsEmptyWithFailure()","1036":"IterableSubjectTest::::iterableIsEmptyWithFailure()","1037":"IterableSubjectTest::::iterableIsEmptyWithFailure()","1038":"IterableSubjectTest::::iterableIsEmptyWithFailure()","1040":"IterableSubjectTest::::iterableIsNotEmpty()","1041":"IterableSubjectTest::::iterableIsNotEmpty()","1042":"IterableSubjectTest::::iterableIsNotEmpty()","1043":"IterableSubjectTest::::iterableIsNotEmpty()","1045":"IterableSubjectTest::::iterableIsNotEmptyWithFailure()","1046":"IterableSubjectTest::::iterableIsNotEmptyWithFailure()","1047":"IterableSubjectTest::::iterableIsNotEmptyWithFailure()","1048":"IterableSubjectTest::::iterableIsNotEmptyWithFailure()","1049":"IterableSubjectTest::::iterableIsNotEmptyWithFailure()","1051":"IterableSubjectTest::::iterableIsInStrictOrder()","1052":"IterableSubjectTest::::iterableIsInStrictOrder()","1053":"IterableSubjectTest::::iterableIsInStrictOrder()","1054":"IterableSubjectTest::::iterableIsInStrictOrder()","1055":"IterableSubjectTest::::iterableIsInStrictOrder()","1056":"IterableSubjectTest::::iterableIsInStrictOrder()","1058":"IterableSubjectTest::::isInStrictOrderFailure()","1059":"IterableSubjectTest::::isInStrictOrderFailure()","1060":"IterableSubjectTest::::isInStrictOrderFailure()","1061":"IterableSubjectTest::::isInStrictOrderFailure()","1062":"IterableSubjectTest::::isInStrictOrderFailure()","1063":"IterableSubjectTest::::isInStrictOrderFailure()","1064":"IterableSubjectTest::::isInStrictOrderFailure()","1065":"IterableSubjectTest::::isInStrictOrderFailure()","1066":"IterableSubjectTest::::isInStrictOrderFailure()","1068":"IterableSubjectTest::::isInStrictOrderWithNonComparableElementsFailure()","1069":"IterableSubjectTest::::isInStrictOrderWithNonComparableElementsFailure()","1070":"IterableSubjectTest::::isInStrictOrderWithNonComparableElementsFailure()","1071":"IterableSubjectTest::::isInStrictOrderWithNonComparableElementsFailure()","1072":"IterableSubjectTest::::isInStrictOrderWithNonComparableElementsFailure()","1073":"IterableSubjectTest::::isInStrictOrderWithNonComparableElementsFailure()","1074":"IterableSubjectTest::::isInStrictOrderWithNonComparableElementsFailure()","1075":"IterableSubjectTest::::isInStrictOrderWithNonComparableElementsFailure()","1077":"IterableSubjectTest::::iterableIsInOrder()","1078":"IterableSubjectTest::::iterableIsInOrder()","1079":"IterableSubjectTest::::iterableIsInOrder()","1080":"IterableSubjectTest::::iterableIsInOrder()","1081":"IterableSubjectTest::::iterableIsInOrder()","1082":"IterableSubjectTest::::iterableIsInOrder()","1084":"IterableSubjectTest::::isInOrderFailure()","1085":"IterableSubjectTest::::isInOrderFailure()","1086":"IterableSubjectTest::::isInOrderFailure()","1087":"IterableSubjectTest::::isInOrderFailure()","1088":"IterableSubjectTest::::isInOrderFailure()","1089":"IterableSubjectTest::::isInOrderFailure()","1090":"IterableSubjectTest::::isInOrderFailure()","1091":"IterableSubjectTest::::isInOrderFailure()","1093":"IterableSubjectTest::::isInOrderMultipleFailures()","1094":"IterableSubjectTest::::isInOrderMultipleFailures()","1095":"IterableSubjectTest::::isInOrderMultipleFailures()","1096":"IterableSubjectTest::::isInOrderMultipleFailures()","1098":"IterableSubjectTest::::isInOrderWithNonComparableElementsFailure()","1099":"IterableSubjectTest::::isInOrderWithNonComparableElementsFailure()","1100":"IterableSubjectTest::::isInOrderWithNonComparableElementsFailure()","1101":"IterableSubjectTest::::isInOrderWithNonComparableElementsFailure()","1102":"IterableSubjectTest::::isInOrderWithNonComparableElementsFailure()","1103":"IterableSubjectTest::::isInOrderWithNonComparableElementsFailure()","1104":"IterableSubjectTest::::isInOrderWithNonComparableElementsFailure()","1105":"IterableSubjectTest::::isInOrderWithNonComparableElementsFailure()","1107":"IterableSubjectTest::::iterableIsInStrictOrderWithComparator()","1108":"IterableSubjectTest::::iterableIsInStrictOrderWithComparator()","1109":"IterableSubjectTest::::iterableIsInStrictOrderWithComparator()","1110":"IterableSubjectTest::::iterableIsInStrictOrderWithComparator()","1111":"IterableSubjectTest::::iterableIsInStrictOrderWithComparator()","1112":"IterableSubjectTest::::iterableIsInStrictOrderWithComparator()","1113":"IterableSubjectTest::::iterableIsInStrictOrderWithComparator()","1114":"IterableSubjectTest::::iterableIsInStrictOrderWithComparator()","1116":"IterableSubjectTest::::iterableIsInStrictOrderWithComparatorFailure()","1117":"IterableSubjectTest::::iterableIsInStrictOrderWithComparatorFailure()","1118":"IterableSubjectTest::::iterableIsInStrictOrderWithComparatorFailure()","1119":"IterableSubjectTest::::iterableIsInStrictOrderWithComparatorFailure()","1120":"IterableSubjectTest::::iterableIsInStrictOrderWithComparatorFailure()","1121":"IterableSubjectTest::::iterableIsInStrictOrderWithComparatorFailure()","1122":"IterableSubjectTest::::iterableIsInStrictOrderWithComparatorFailure()","1123":"IterableSubjectTest::::iterableIsInStrictOrderWithComparatorFailure()","1124":"IterableSubjectTest::::iterableIsInStrictOrderWithComparatorFailure()","1126":"IterableSubjectTest::::iterableIsInOrderWithComparator()","1127":"IterableSubjectTest::::iterableIsInOrderWithComparator()","1128":"IterableSubjectTest::::iterableIsInOrderWithComparator()","1129":"IterableSubjectTest::::iterableIsInOrderWithComparator()","1130":"IterableSubjectTest::::iterableIsInOrderWithComparator()","1131":"IterableSubjectTest::::iterableIsInOrderWithComparator()","1132":"IterableSubjectTest::::iterableIsInOrderWithComparator()","1134":"IterableSubjectTest::::iterableIsInOrderWithComparatorFailure()","1135":"IterableSubjectTest::::iterableIsInOrderWithComparatorFailure()","1136":"IterableSubjectTest::::iterableIsInOrderWithComparatorFailure()","1137":"IterableSubjectTest::::iterableIsInOrderWithComparatorFailure()","1138":"IterableSubjectTest::::iterableIsInOrderWithComparatorFailure()","1139":"IterableSubjectTest::::iterableIsInOrderWithComparatorFailure()","1140":"IterableSubjectTest::::iterableIsInOrderWithComparatorFailure()","1141":"IterableSubjectTest::::iterableIsInOrderWithComparatorFailure()","1176":"IterableSubjectTest::::iterableOrderedByBaseClassComparator()","1177":"IterableSubjectTest::::iterableOrderedByBaseClassComparator()","1178":"IterableSubjectTest::::iterableOrderedByBaseClassComparator()","1179":"IterableSubjectTest::::iterableOrderedByBaseClassComparator()","1180":"IterableSubjectTest::::iterableOrderedByBaseClassComparator()","1181":"IterableSubjectTest::::iterableOrderedByBaseClassComparator()","1183":"IterableSubjectTest::::isIn()","1184":"IterableSubjectTest::::isIn()","1185":"IterableSubjectTest::::isIn()","1186":"IterableSubjectTest::::isIn()","1187":"IterableSubjectTest::::isIn()","1188":"IterableSubjectTest::::isIn()","1189":"IterableSubjectTest::::isIn()","1190":"IterableSubjectTest::::isIn()","1191":"IterableSubjectTest::::isIn()","1193":"IterableSubjectTest::::isNotIn()","1194":"IterableSubjectTest::::isNotIn()","1195":"IterableSubjectTest::::isNotIn()","1196":"IterableSubjectTest::::isNotIn()","1197":"IterableSubjectTest::::isNotIn()","1198":"IterableSubjectTest::::isNotIn()","1199":"IterableSubjectTest::::isNotIn()","1200":"IterableSubjectTest::::isNotIn()","1201":"IterableSubjectTest::::isNotIn()","1202":"IterableSubjectTest::::isNotIn()","1203":"IterableSubjectTest::::isNotIn()","1204":"IterableSubjectTest::::isNotIn()","1205":"IterableSubjectTest::::isNotIn()","1206":"IterableSubjectTest::::isNotIn()","1207":"IterableSubjectTest::::isNotIn()","1208":"IterableSubjectTest::::isNotIn()","1210":"IterableSubjectTest::::isAnyOf()","1211":"IterableSubjectTest::::isAnyOf()","1212":"IterableSubjectTest::::isAnyOf()","1213":"IterableSubjectTest::::isAnyOf()","1214":"IterableSubjectTest::::isAnyOf()","1215":"IterableSubjectTest::::isAnyOf()","1216":"IterableSubjectTest::::isAnyOf()","1217":"IterableSubjectTest::::isAnyOf()","1219":"IterableSubjectTest::::isNoneOf()","1220":"IterableSubjectTest::::isNoneOf()","1221":"IterableSubjectTest::::isNoneOf()","1222":"IterableSubjectTest::::isNoneOf()","1223":"IterableSubjectTest::::isNoneOf()","1224":"IterableSubjectTest::::isNoneOf()","1225":"IterableSubjectTest::::isNoneOf()","1226":"IterableSubjectTest::::isNoneOf()","1227":"IterableSubjectTest::::isNoneOf()","1228":"IterableSubjectTest::::isNoneOf()","1229":"IterableSubjectTest::::isNoneOf()","1230":"IterableSubjectTest::::isNoneOf()","1231":"IterableSubjectTest::::isNoneOf()","1232":"IterableSubjectTest::::isNoneOf()","1233":"IterableSubjectTest::::isNoneOf()","1234":"IterableSubjectTest::::isNoneOf()","1239":"IterableSubjectTest.CountsToStringCalls::::toString()","1240":"IterableSubjectTest.CountsToStringCalls::::toString()","1241":"IterableSubjectTest.CountsToStringCalls::::toString()","1242":"IterableSubjectTest.CountsToStringCalls::::toString()","1243":"IterableSubjectTest.CountsToStringCalls::::toString()","1246":"IterableSubjectTest::::expectFailureWhenTestingThat(java.lang.Iterable<?>)","1247":"IterableSubjectTest::::expectFailureWhenTestingThat(java.lang.Iterable<?>)","1248":"IterableSubjectTest::::expectFailureWhenTestingThat(java.lang.Iterable<?>)"},"tests":[{"test_lines":[45,48],"covered_lines":[100,101,108,109,110,166,167,168,169,754,757],"label":"IterableSubject::::hasSize(int)"},{"test_lines":[50,54],"covered_lines":[100,101,108,109,110,166,167,168,169,754,757],"label":"IterableSubject::::hasSize(int)"},{"test_lines":[56,60],"covered_lines":[100,101,108,109,110,114,117,118,119,123,166,167,168,169,754,757],"label":"IterableSubject::::hasSize(int)"},{"test_lines":[62,69],"covered_lines":[100,101,108,109,110,166,754,757],"label":"IterableSubject::::hasSize(int)"},{"test_lines":[71,74],"covered_lines":[100,101,108,109,110,173,189,754,757],"label":"IterableSubject::::contains(java.lang.Object)"},{"test_lines":[76,79],"covered_lines":[100,101,108,109,110,173,189,754,757],"label":"IterableSubject::::contains(java.lang.Object)"},{"test_lines":[81,94],"covered_lines":[100,101,108,109,110,114,117,118,119,123,173,174,175,176,177,178,179,180,182,183,184,189,415,434,439,440,441,443,453,454,455,456,462,521,522,527,533,543,754,757,896],"label":"IterableSubject::::contains(java.lang.Object)"},{"test_lines":[96,100],"covered_lines":[100,101,108,109,110,114,117,118,119,123,173,174,175,176,177,178,179,180,182,183,184,189,754,757,896],"label":"IterableSubject::::contains(java.lang.Object)"},{"test_lines":[102,107],"covered_lines":[100,101,108,109,110,114,117,118,119,123,173,174,175,186,189,415,434,439,440,441,443,453,454,455,456,462,521,522,527,533,543,754,757],"label":"IterableSubject::::contains(java.lang.Object)"},{"test_lines":[109,112],"covered_lines":[100,101,108,109,110,193,196,754,757],"label":"IterableSubject::::doesNotContain(java.lang.Object)"},{"test_lines":[114,117],"covered_lines":[100,101,108,109,110,193,196,754,757],"label":"IterableSubject::::doesNotContain(java.lang.Object)"},{"test_lines":[119,124],"covered_lines":[100,101,108,109,110,114,117,118,119,123,193,194,196,415,434,439,440,441,443,453,454,455,456,462,521,522,527,533,543,754,757],"label":"IterableSubject::::doesNotContain(java.lang.Object)"},{"test_lines":[126,129],"covered_lines":[100,101,108,109,110,200,201,202,205,206,212,754,757],"label":"IterableSubject::::containsNoDuplicates()"},{"test_lines":[131,134],"covered_lines":[100,101,108,109,110,200,201,202,205,206,212,754,757],"label":"IterableSubject::::containsNoDuplicates()"},{"test_lines":[136,142],"covered_lines":[100,101,108,109,110,114,117,118,119,123,200,201,202,203,205,206,207,208,209,210,212,415,434,439,440,441,443,453,454,455,456,462,521,522,527,533,543,754,757,896],"label":"IterableSubject::::containsNoDuplicates()"},{"test_lines":[144,147],"covered_lines":[100,101,108,109,110,217,218,226,227,228,229,230,754,757],"label":"IterableSubject::::containsAnyOf(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[149,152],"covered_lines":[100,101,108,109,110,217,218,226,227,228,229,230,754,757],"label":"IterableSubject::::containsAnyOf(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[154,157],"covered_lines":[100,101,108,109,110,217,218,226,227,228,229,230,232,754,757],"label":"IterableSubject::::containsAnyOf(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[159,164],"covered_lines":[100,101,108,109,110,114,117,118,119,123,217,218,226,227,228,229,232,233,243,245,415,434,439,440,441,443,453,454,455,456,462,521,522,527,533,543,754,757],"label":"IterableSubject::::containsAnyOf(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[166,174],"covered_lines":[100,101,108,109,110,114,117,118,119,123,217,218,226,227,228,229,232,233,234,235,236,237,239,240,241,245,415,434,439,440,441,443,453,454,455,456,462,521,522,527,533,543,754,757,896],"label":"IterableSubject::::containsAnyOf(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[176,184],"covered_lines":[100,101,108,109,110,114,117,118,119,123,217,218,226,227,228,229,232,233,234,235,236,237,239,240,241,245,415,434,439,440,441,443,453,454,455,456,462,521,522,527,533,543,754,757,896],"label":"IterableSubject::::containsAnyOf(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[186,194],"covered_lines":[100,101,108,109,110,114,117,118,119,123,217,218,226,227,228,229,232,233,234,235,236,237,239,240,241,245,415,434,439,440,441,443,453,454,455,456,462,521,522,527,533,543,754,757,896],"label":"IterableSubject::::containsAnyOf(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[196,204],"covered_lines":[100,101,108,109,110,114,117,118,119,123,217,218,226,227,228,229,232,233,234,235,236,237,239,240,241,245,415,434,439,440,441,443,453,454,455,456,462,521,522,527,533,543,754,757,896],"label":"IterableSubject::::containsAnyOf(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[206,212],"covered_lines":[100,101,108,109,110,217,218,226,227,228,229,230,232,754,757],"label":"IterableSubject::::containsAnyOf(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[214,221],"covered_lines":[100,101,108,109,110,114,117,118,119,123,226,227,228,229,230,232,233,243,245,415,434,439,440,441,443,453,454,455,456,462,521,522,527,533,543,754,757],"label":"IterableSubject::::containsAnyIn(java.lang.Iterable<?>)"},{"test_lines":[223,230],"covered_lines":[100,101,108,109,110,114,117,118,119,123,226,227,228,229,230,232,233,243,245,253,254,415,434,439,440,441,443,453,454,455,456,462,521,522,527,533,543,754,757],"label":"IterableSubject::::containsAnyIn(java.lang.Iterable<?>)"},{"test_lines":[232,235],"covered_lines":[100,101,108,109,110,270,284,285,287,288,290,292,293,294,296,298,306,308,312,377,380,754,757],"label":"IterableSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[237,240],"covered_lines":[100,101,108,109,110,270,284,285,287,288,290,292,293,294,296,298,306,308,312,377,380,754,757],"label":"IterableSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[242,245],"covered_lines":[100,101,108,109,110,270,284,285,287,288,290,292,293,294,296,298,306,308,312,377,378,380,754,757],"label":"IterableSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[247,250],"covered_lines":[100,101,108,109,110,270,284,285,287,288,290,292,293,294,296,298,300,301,306,308,312,314,377,378,380,754,757],"label":"IterableSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[252,255],"covered_lines":[100,101,108,109,110,270,284,285,287,288,290,292,293,294,296,298,300,301,306,308,312,314,377,378,380,754,757],"label":"IterableSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[268,277],"covered_lines":[100,101,108,109,110,114,117,118,119,123,284,285,287,288,290,292,293,294,296,298,300,301,306,308,312,314,317,318,319,320,321,322,327,329,377,378,380,754,757],"label":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)"},{"test_lines":[279,285],"covered_lines":[100,101,108,109,110,114,117,118,119,123,270,284,285,287,288,290,292,293,294,296,298,300,303,306,308,309,349,350,352,353,354,364,365,367,368,377,380,415,434,439,440,441,443,453,454,455,456,462,521,522,527,533,543,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,601,604,605,632,655,656,657,660,663,666,680,681,682,683,686,687,706,707,708,754,757],"label":"IterableSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[287,291],"covered_lines":[100,101,108,109,110,114,117,118,119,123,270,284,285,287,288,290,292,293,294,296,298,300,301,303,306,308,309,349,350,352,353,354,364,365,367,368,377,378,380,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,601,604,605,632,655,656,657,660,663,666,680,681,682,683,686,687,706,707,708,754,757],"label":"IterableSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[293,297],"covered_lines":[100,101,108,109,110,114,117,118,119,123,270,284,285,287,288,290,292,293,294,296,298,300,301,303,306,308,309,349,350,352,353,354,364,365,367,368,377,378,380,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,601,604,605,632,655,656,657,660,663,666,680,681,682,683,686,687,706,707,708,754,757],"label":"IterableSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[299,303],"covered_lines":[100,101,108,109,110,114,117,118,119,123,270,284,285,287,288,290,292,293,294,296,298,300,303,306,308,309,349,350,352,353,354,364,365,367,368,377,380,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,601,604,605,632,655,656,657,660,663,666,670,671,672,675,676,680,681,682,683,684,687,691,692,693,694,697,698,699,706,707,708,754,757],"label":"IterableSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[309,313],"covered_lines":[100,101,108,109,110,114,117,118,119,123,270,284,285,287,288,290,292,293,294,300,303,306,308,309,349,350,352,353,354,364,365,367,368,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,601,604,605,632,655,656,657,660,663,666,670,671,672,675,676,680,681,682,683,684,687,691,692,693,694,697,698,699,706,707,708,754,757],"label":"IterableSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[315,319],"covered_lines":[100,101,108,109,110,114,117,118,119,123,270,284,285,287,288,290,292,293,294,296,298,300,303,306,308,309,349,350,352,353,354,364,365,367,368,377,380,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,601,604,605,632,655,656,657,660,663,666,680,681,682,683,686,687,706,707,708,754,757],"label":"IterableSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[321,326],"covered_lines":[100,101,108,109,110,114,117,118,119,123,270,284,285,287,288,290,292,293,294,300,303,306,308,309,349,350,352,353,354,364,365,367,368,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,604,605,632,655,656,657,660,663,666,670,671,672,675,676,680,681,682,683,684,686,691,692,693,694,697,698,699,706,707,708,754,757],"label":"IterableSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[328,333],"covered_lines":[100,101,108,109,110,114,117,118,119,123,270,284,285,287,288,290,292,293,294,300,303,306,308,309,349,350,352,353,354,364,365,367,368,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,604,605,632,655,656,657,660,663,666,670,671,672,675,676,680,681,682,683,684,686,691,692,693,694,697,698,699,706,707,708,754,757],"label":"IterableSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[335,340],"covered_lines":[100,101,108,109,110,114,117,118,119,123,270,284,285,287,288,290,292,293,294,296,298,300,303,306,308,309,349,350,352,353,354,364,365,367,368,377,378,380,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,604,605,632,655,656,657,660,663,666,680,681,682,683,686,687,706,707,708,754,757],"label":"IterableSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[342,348],"covered_lines":[100,101,108,109,110,114,117,118,119,123,270,284,285,287,288,290,292,293,294,296,298,300,303,306,308,309,349,350,352,353,354,364,365,367,368,377,378,380,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,604,605,632,655,656,657,660,663,666,670,671,672,675,676,680,681,682,683,684,686,691,692,693,694,697,698,699,706,707,708,754,757],"label":"IterableSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[350,356],"covered_lines":[100,101,108,109,110,114,117,118,119,123,270,284,285,287,288,290,292,293,294,296,298,300,303,306,308,309,349,350,352,353,354,364,365,367,368,377,378,380,415,434,439,440,441,443,453,454,455,456,462,521,522,527,533,543,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,601,604,605,632,655,656,657,660,663,666,680,681,682,683,686,687,706,707,708,754,757],"label":"IterableSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[358,361],"covered_lines":[100,101,108,109,110,270,284,285,287,288,290,292,293,294,296,298,306,308,312,377,380,754,757],"label":"IterableSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[363,372],"covered_lines":[100,101,108,109,110,270,284,285,287,288,290,292,293,294,296,298,306,308,312,377,378,380,754,757],"label":"IterableSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[374,378],"covered_lines":[100,101,108,109,110,270,284,285,287,288,290,292,293,294,296,298,306,308,312,377,378,380,754,757],"label":"IterableSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[380,389],"covered_lines":[100,101,108,109,110,114,117,118,119,123,270,284,285,287,288,290,292,293,294,296,298,300,301,306,308,312,314,317,318,319,320,321,322,327,329,377,378,380,415,434,439,440,441,443,453,454,455,456,462,521,522,527,533,543,754,757],"label":"IterableSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[391,402],"covered_lines":[100,101,108,109,110,114,117,118,119,123,270,284,285,287,288,290,292,293,294,296,298,300,301,306,308,312,314,317,318,319,320,321,322,323,324,325,329,377,378,380,415,434,439,440,441,443,453,454,455,456,462,521,522,527,533,543,754,757,896],"label":"IterableSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[404,410],"covered_lines":[100,101,108,109,110,270,284,285,287,288,290,292,293,294,296,298,306,308,312,377,378,380,754,757],"label":"IterableSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[412,424],"covered_lines":[100,101,108,109,110,114,117,118,119,123,270,284,285,287,288,290,292,293,294,296,298,300,301,306,308,312,314,317,318,319,320,321,322,327,329,377,378,380,415,434,439,440,441,443,453,454,455,456,462,521,522,527,533,543,754,757],"label":"IterableSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[446,449],"covered_lines":[100,101,108,109,110,114,117,118,119,123,270,284,285,287,288,290,292,293,294,296,298,300,301,303,306,308,309,349,350,352,353,354,364,365,367,368,377,378,380,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,601,604,605,632,655,656,657,660,663,666,680,681,682,683,686,687,706,707,708,754,757],"label":"IterableSubject::::containsAtLeast(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[451,460],"covered_lines":[100,101,108,109,110,114,117,118,119,123,284,285,287,288,290,292,293,294,296,298,300,303,306,308,309,312,349,350,352,353,354,364,365,367,368,377,380,415,434,439,440,441,443,453,454,455,456,462,521,522,527,533,543,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,601,604,605,632,655,656,657,660,663,666,680,681,682,683,686,687,706,707,708,754,757],"label":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)"},{"test_lines":[462,470],"covered_lines":[100,101,108,109,110,114,117,118,119,123,284,285,287,288,290,292,293,294,300,303,306,308,309,349,350,352,353,354,364,365,367,368,415,434,439,440,441,443,453,454,455,456,462,521,522,527,533,543,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,601,604,608,609,610,611,612,613,614,615,616,617,632,642,643,646,650,655,656,657,658,670,671,672,673,680,681,682,683,684,686,687,706,707,708,754,757],"label":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)"},{"test_lines":[472,481],"covered_lines":[100,101,108,109,110,114,117,118,119,123,284,285,287,288,290,292,293,294,296,298,300,303,306,308,309,312,345,349,350,352,353,354,364,365,367,368,377,380,415,434,439,440,441,443,453,454,455,456,462,521,522,527,533,543,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,601,604,605,632,655,656,657,660,663,666,680,681,682,683,686,687,706,707,708,754,757],"label":"IterableSubject::::containsAtLeastElementsIn(java.lang.Iterable<?>)"},{"test_lines":[483,486],"covered_lines":[100,101,108,109,110,719,720,728,729,730,731,734,735,741,754,757],"label":"IterableSubject::::containsNoneOf(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[488,495],"covered_lines":[100,101,108,109,110,114,117,118,119,123,415,434,439,440,441,443,453,454,455,456,462,521,522,527,533,543,719,720,728,729,730,731,732,734,735,736,737,738,739,741,754,757,896],"label":"IterableSubject::::containsNoneOf(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[497,501],"covered_lines":[100,101,108,109,110,114,117,118,119,123,719,720,728,729,730,731,732,734,735,736,737,738,739,741,754,757,896],"label":"IterableSubject::::containsNoneOf(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[503,507],"covered_lines":[100,101,108,109,110,114,117,118,119,123,719,720,728,729,730,731,732,734,735,736,737,738,739,741,754,757,896],"label":"IterableSubject::::containsNoneOf(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[509,516],"covered_lines":[100,101,108,109,110,114,117,118,119,123,415,434,439,440,441,443,453,454,455,456,462,521,522,527,533,543,719,720,728,729,730,731,732,734,735,736,737,738,739,741,754,757,896],"label":"IterableSubject::::containsNoneOf(java.lang.Object,java.lang.Object,java.lang.Object[])"},{"test_lines":[518,527],"covered_lines":[100,101,108,109,110,114,117,118,119,123,415,434,439,440,441,443,453,454,455,456,462,521,522,527,533,543,728,729,730,731,732,734,735,736,737,738,739,741,754,757,896],"label":"IterableSubject::::containsNoneIn(java.lang.Iterable<?>)"},{"test_lines":[529,533],"covered_lines":[100,101,108,109,110,114,117,118,119,123,728,729,730,731,732,734,735,736,737,738,739,741,750,751,754,757,896],"label":"IterableSubject::::containsNoneIn(java.lang.Iterable<?>)"},{"test_lines":[535,541],"covered_lines":[100,101,108,109,110,397,398,399,439,440,441,443,453,454,455,456,462,521,522,527,533,543,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[543,550],"covered_lines":[100,101,108,109,110,397,398,399,439,440,441,443,453,454,455,456,462,521,522,527,533,543,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[552,555],"covered_lines":[100,101,108,109,110,397,398,399,439,440,441,443,453,454,455,456,462,521,522,527,533,543,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[557,560],"covered_lines":[100,101,108,109,110,397,398,399,439,440,441,443,453,454,455,456,462,463,486,487,488,491,495,498,499,500,503,505,510,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[562,565],"covered_lines":[100,101,108,109,110,397,398,399,439,440,441,443,453,454,455,456,462,521,522,527,533,543,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[567,570],"covered_lines":[100,101,108,109,110,397,398,399,439,440,441,443,453,454,455,456,462,463,486,487,488,491,495,498,499,500,503,505,510,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[572,577],"covered_lines":[100,101,108,109,110,397,398,399,439,440,441,443,453,454,455,456,462,521,522,527,533,543,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[579,583],"covered_lines":[100,101,108,109,110,397,398,399,439,440,441,443,453,454,455,456,462,521,522,527,533,543,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[585,588],"covered_lines":[100,101,108,109,110,397,398,399,439,440,441,443,453,454,455,456,462,521,522,527,533,543,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[590,593],"covered_lines":[100,101,108,109,110,397,398,399,439,440,441,443,453,454,455,456,462,521,522,527,533,543,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[595,598],"covered_lines":[100,101,108,109,110,397,398,399,439,440,441,443,453,454,455,456,462,521,522,527,533,543,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[600,603],"covered_lines":[100,101,108,109,110,397,398,399,439,440,441,443,453,454,455,456,462,463,486,487,488,491,495,498,499,500,503,505,510,521,522,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[605,614],"covered_lines":[100,101,108,109,110,114,117,118,119,123,415,439,440,441,443,453,454,455,456,462,463,486,487,488,491,495,498,499,500,503,505,510,513,514,515,754,757],"label":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>)"},{"test_lines":[616,621],"covered_lines":[100,101,108,109,110,114,117,118,119,123,397,398,399,439,440,441,443,453,454,527,533,534,537,538,551,552,553,554,555,556,564,565,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,601,604,605,632,655,656,657,660,663,666,680,681,682,683,686,687,706,707,708,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[623,630],"covered_lines":[100,101,108,109,110,114,117,118,119,123,397,398,399,415,434,439,440,441,443,453,454,455,456,462,463,486,487,488,491,495,496,498,499,500,501,503,505,518,521,522,527,533,543,551,552,553,554,555,556,564,565,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,604,605,632,655,656,657,660,663,666,670,671,672,675,676,680,681,682,683,684,686,687,691,692,693,694,697,698,699,706,707,708,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[632,638],"covered_lines":[100,101,108,109,110,114,117,118,119,123,397,398,399,439,440,441,443,453,454,455,456,462,463,486,487,488,491,495,496,498,505,518,551,552,553,554,555,556,564,565,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,604,605,632,655,656,657,660,663,666,670,671,672,675,676,680,681,682,683,684,686,687,691,692,693,694,697,698,699,706,707,708,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[640,649],"covered_lines":[100,101,108,109,110,114,117,118,119,123,397,398,399,415,434,439,440,441,443,453,454,455,456,462,463,486,487,488,491,495,496,498,505,518,521,522,527,533,543,551,552,553,554,555,556,564,565,575,576,577,578,579,580,582,583,584,585,586,587,589,590,591,600,604,608,609,610,611,612,613,614,615,616,617,632,642,643,646,650,655,656,657,660,661,670,671,672,675,676,680,681,682,683,684,686,687,691,692,693,694,695,706,707,708,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[651,658],"covered_lines":[100,101,108,109,110,397,398,399,415,434,439,440,441,443,453,454,455,456,462,463,480,481,482,483,521,522,527,533,543,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[660,664],"covered_lines":[100,101,108,109,110,397,398,399,439,440,441,443,453,454,455,456,462,463,480,481,482,483,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[666,676],"covered_lines":[100,101,108,109,110,397,398,399,415,439,440,441,443,453,454,455,456,462,463,486,487,488,491,495,498,499,500,503,505,510,521,522,527,533,543,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[678,684],"covered_lines":[100,101,108,109,110,114,117,118,119,123,397,398,399,439,440,441,443,453,454,455,456,462,521,522,527,528,531,532,551,552,553,554,555,556,564,565,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,601,604,605,632,655,656,657,660,663,666,680,681,682,683,686,687,706,707,708,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[686,692],"covered_lines":[100,101,108,109,110,114,117,118,119,123,397,398,399,439,440,441,443,453,454,455,456,462,463,486,487,488,491,495,496,498,505,518,521,522,551,552,553,554,555,556,564,565,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,604,605,632,655,656,657,660,663,666,680,681,682,683,686,687,706,707,708,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[711,715],"covered_lines":[100,101,108,109,110,415,439,440,441,443,444,448,754,757],"label":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>)"},{"test_lines":[717,722],"covered_lines":[100,101,108,109,110,114,117,118,119,123,152,153,155,415,434,439,440,441,443,444,445,446,453,454,455,456,462,521,522,527,533,543,754,757],"label":"IterableSubject::::containsExactlyElementsIn(java.lang.Object[])"},{"test_lines":[724,731],"covered_lines":[100,101,108,109,110,114,117,118,119,123,415,439,440,441,443,453,454,455,456,462,463,486,487,488,491,495,496,498,505,518,551,552,553,554,555,556,564,565,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,604,605,632,655,656,657,660,663,666,670,671,672,675,676,680,681,682,683,684,686,687,691,692,693,694,697,698,699,706,707,708,754,757],"label":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>,boolean)"},{"test_lines":[733,737],"covered_lines":[100,101,108,109,110,114,117,118,119,123,397,398,399,439,440,441,443,453,454,455,456,462,521,522,527,533,534,537,538,551,552,553,554,555,556,564,565,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,601,604,605,632,655,656,657,660,663,666,680,681,682,683,686,687,706,707,708,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[739,743],"covered_lines":[100,101,108,109,110,114,117,118,119,123,397,398,399,439,440,441,443,453,454,455,456,462,521,522,527,528,531,532,551,552,553,554,555,556,564,565,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,601,604,605,632,655,656,657,660,663,666,680,681,682,683,686,687,706,707,708,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[745,749],"covered_lines":[100,101,108,109,110,114,117,118,119,123,397,398,399,439,440,441,443,453,454,455,456,462,463,486,487,488,491,495,498,505,518,521,522,551,552,553,554,555,556,564,565,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,601,604,605,632,655,656,657,660,663,666,670,671,672,675,676,680,681,682,683,684,687,691,692,693,694,697,698,699,706,707,708,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[751,755],"covered_lines":[100,101,108,109,110,114,117,118,119,123,397,398,399,439,440,441,443,453,454,455,456,462,463,486,487,488,491,495,498,505,518,521,522,551,552,553,554,555,556,564,565,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,601,604,605,632,655,656,657,660,663,666,670,671,672,675,676,680,681,682,683,684,687,691,692,693,694,697,698,699,706,707,708,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[757,763],"covered_lines":[100,101,108,109,110,114,117,118,119,123,397,398,399,415,434,439,440,441,443,453,454,455,456,462,521,522,527,533,534,537,538,543,551,552,553,554,555,556,564,565,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,601,604,608,609,610,611,612,613,614,615,616,617,632,642,643,646,650,655,656,657,658,670,671,672,673,680,681,682,683,684,687,706,707,708,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[765,779],"covered_lines":[100,101,108,109,110,114,117,118,119,123,397,398,399,415,434,439,440,441,443,453,454,455,456,462,463,486,487,488,491,495,496,498,499,500,501,503,505,518,521,522,527,533,543,551,552,553,554,555,556,564,565,575,576,577,578,579,580,582,583,584,585,586,587,589,590,591,600,604,608,609,610,611,612,613,614,615,616,617,632,642,643,646,650,655,656,657,658,670,671,672,673,680,681,682,683,684,706,707,708,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[781,785],"covered_lines":[100,101,108,109,110,114,117,118,119,123,397,398,399,439,440,441,443,453,454,455,456,462,463,486,487,488,491,495,496,498,499,500,501,503,505,518,521,522,551,552,553,554,555,556,564,565,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,601,604,605,632,655,656,657,660,663,666,670,671,672,675,676,680,681,682,683,684,687,691,692,693,694,697,698,699,706,707,708,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[791,795],"covered_lines":[100,101,108,109,110,114,117,118,119,123,397,398,399,439,440,441,443,453,454,527,533,534,537,538,551,552,553,554,555,556,564,565,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,601,604,605,632,655,656,657,660,663,666,670,671,672,675,676,680,681,682,683,684,687,691,692,693,694,697,698,699,706,707,708,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[797,801],"covered_lines":[100,101,108,109,110,114,117,118,119,123,397,398,399,439,440,441,443,453,454,455,456,462,463,486,487,488,491,495,498,505,518,521,522,551,552,553,554,555,556,564,565,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,601,604,605,632,655,656,657,660,663,666,680,681,682,683,686,687,706,707,708,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[803,808],"covered_lines":[100,101,108,109,110,114,117,118,119,123,397,398,399,439,440,441,443,453,454,455,456,462,463,486,487,488,491,495,496,498,505,518,521,522,551,552,553,554,555,556,564,565,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,604,605,632,655,656,657,660,663,666,680,681,682,683,686,687,706,707,708,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[810,815],"covered_lines":[100,101,108,109,110,114,117,118,119,123,397,398,399,439,440,441,443,453,454,455,456,462,463,486,487,488,491,495,496,498,499,500,501,503,505,518,521,522,551,552,553,554,555,556,564,565,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,604,605,632,655,656,657,660,663,666,670,671,672,675,676,680,681,682,683,684,691,692,693,694,697,698,699,706,707,708,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[817,825],"covered_lines":[100,101,108,109,110,114,117,118,119,123,397,398,399,415,434,439,440,441,443,453,454,455,456,462,463,486,487,488,491,495,496,498,505,518,521,522,527,533,543,551,552,553,554,555,556,564,565,575,576,577,578,579,580,582,583,584,585,586,587,589,590,591,600,604,608,609,610,611,612,613,614,615,616,617,632,642,643,646,650,655,656,657,658,670,671,672,673,675,680,681,682,683,684,686,687,706,707,708,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[827,832],"covered_lines":[100,101,108,109,110,114,117,118,119,123,397,398,399,439,440,441,443,453,454,455,456,462,463,486,487,488,491,495,496,498,499,500,501,503,505,518,551,552,553,554,555,556,564,565,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,604,605,632,655,656,657,660,663,666,670,671,672,675,676,680,681,682,683,684,686,691,692,693,694,697,698,699,706,707,708,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[834,840],"covered_lines":[100,101,108,109,110,114,117,118,119,123,397,398,399,439,440,441,443,453,454,455,456,462,463,486,487,488,491,495,496,498,499,500,501,503,505,518,551,552,553,554,555,556,564,565,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,604,605,632,655,656,657,660,663,666,670,671,672,675,676,680,681,682,683,684,686,691,692,693,694,697,698,699,706,707,708,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[842,848],"covered_lines":[100,101,108,109,110,114,117,118,119,123,397,398,399,439,440,441,443,453,454,455,456,462,463,486,487,488,491,495,496,498,499,500,501,503,505,518,551,552,553,554,555,556,564,565,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,604,605,632,655,656,657,660,663,666,670,671,672,675,676,680,681,682,683,684,686,691,692,693,694,697,698,699,706,707,708,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[850,855],"covered_lines":[100,101,108,109,110,114,117,118,119,123,397,398,399,439,440,441,443,453,454,455,456,462,463,486,487,488,491,495,496,498,499,500,501,503,505,518,551,552,553,554,555,556,564,565,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,604,605,632,655,656,657,660,663,666,670,671,672,675,676,680,681,682,683,684,686,691,692,693,694,697,698,699,706,707,708,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[857,864],"covered_lines":[100,101,108,109,110,114,117,118,119,123,397,398,399,439,440,441,443,453,454,455,456,462,463,486,487,488,491,495,496,498,499,500,501,503,505,518,551,552,553,554,555,556,564,565,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,604,605,632,655,656,657,660,663,666,670,671,672,675,676,680,681,682,683,684,686,691,692,693,694,697,698,699,706,707,708,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[866,872],"covered_lines":[100,101,108,109,110,114,117,118,119,123,397,398,399,439,440,441,443,453,454,455,456,462,463,486,487,488,491,495,496,498,499,500,501,503,505,518,551,552,553,554,555,556,557,558,564,565,575,576,577,578,579,580,582,583,584,585,586,587,589,590,591,600,604,608,609,610,611,612,613,614,615,616,617,632,642,643,646,650,655,656,657,658,670,671,672,673,680,681,682,683,684,686,687,706,707,708,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[874,879],"covered_lines":[100,101,108,109,110,114,117,118,119,123,415,439,440,441,443,453,454,455,456,462,521,522,527,528,531,532,551,552,553,554,555,556,564,565,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,601,604,605,632,655,656,657,660,663,666,680,681,682,683,686,687,706,707,708,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[881,887],"covered_lines":[100,101,108,109,110,114,117,118,119,123,397,398,399,439,440,441,443,453,454,455,456,462,463,486,487,488,491,495,496,498,499,500,501,503,505,518,551,552,553,554,555,556,564,565,575,576,577,578,579,580,582,583,584,585,586,587,589,590,591,600,604,608,609,610,611,612,613,614,615,616,617,632,642,643,646,650,655,656,657,658,670,671,672,673,680,681,682,683,684,686,706,707,708,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[894,898],"covered_lines":[100,101,108,109,110,114,117,118,119,123,397,398,399,439,440,441,443,453,454,455,456,462,521,522,527,528,531,532,551,552,553,554,555,556,564,565,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,601,604,605,632,655,656,657,660,663,666,670,671,672,675,676,680,681,682,683,684,686,687,691,692,693,694,697,698,699,706,707,708,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[900,903],"covered_lines":[100,101,108,109,110,397,398,399,439,440,441,443,453,454,455,456,462,521,522,527,533,543,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[905,908],"covered_lines":[100,101,108,109,110,397,398,399,439,440,441,443,453,454,455,456,462,521,522,527,533,543,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[910,915],"covered_lines":[100,101,108,109,110,114,117,118,119,123,397,398,399,415,434,439,440,441,443,453,454,455,456,462,463,486,487,488,491,495,498,499,500,503,505,510,513,514,515,521,522,527,533,543,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[917,928],"covered_lines":[100,101,108,109,110,397,398,399,439,440,441,443,453,454,455,456,462,521,522,527,533,543,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[930,949],"covered_lines":[100,101,108,109,110,114,117,118,119,123,397,398,399,415,434,439,440,441,443,453,454,455,456,462,463,486,487,488,491,495,498,499,500,503,505,510,513,514,515,521,522,527,533,543,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[951,963],"covered_lines":[100,101,108,109,110,114,117,118,119,120,397,398,399,439,440,441,443,453,454,455,456,462,521,522,527,528,531,532,551,552,553,554,555,556,564,565,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,601,604,605,632,655,656,657,660,663,666,680,681,682,683,686,687,706,707,708,754,757],"label":"IterableSubject::::containsExactly(java.lang.Object[])"},{"test_lines":[965,972],"covered_lines":[100,101,108,109,110,114,117,118,119,123,415,439,440,441,443,453,454,455,456,462,521,522,527,533,534,537,538,543,551,552,553,554,555,556,564,565,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,601,604,605,632,655,656,657,660,663,666,680,681,682,683,686,687,706,707,708,754,757],"label":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>)"},{"test_lines":[974,980],"covered_lines":[100,101,108,109,110,114,117,118,119,123,415,434,439,440,441,443,453,454,455,456,462,521,522,527,533,534,537,538,543,551,552,553,554,555,556,564,565,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,601,604,605,632,655,656,657,660,663,666,680,681,682,683,686,687,706,707,708,754,757],"label":"IterableSubject::::containsExactlyElementsIn(java.lang.Iterable<?>)"},{"test_lines":[982,986],"covered_lines":[100,101,108,109,110,129,130,131,754,757],"label":"IterableSubject::::isEqualTo(java.lang.Object)"},{"test_lines":[988,991],"covered_lines":[100,101,108,109,110,114,123,129,130,136,138,146,148,754,757],"label":"IterableSubject::::isEqualTo(java.lang.Object)"},{"test_lines":[993,996],"covered_lines":[100,101,108,109,110,114,117,118,119,123,129,130,136,138,146,148,754,757],"label":"IterableSubject::::isEqualTo(java.lang.Object)"},{"test_lines":[998,1003],"covered_lines":[100,101,108,109,110,114,117,118,119,123,129,130,136,137,148,415,439,440,441,443,453,454,527,533,534,537,538,551,552,553,554,555,556,564,565,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,601,604,605,632,655,656,657,660,663,666,680,681,682,683,686,687,706,707,708,754,757],"label":"IterableSubject::::isEqualTo(java.lang.Object)"},{"test_lines":[1005,1016],"covered_lines":[100,101,108,109,110,129,130,131,754,757],"label":"IterableSubject::::isEqualTo(java.lang.Object)"},{"test_lines":[1018,1027],"covered_lines":[100,101,108,109,110,114,117,118,119,123,129,130,136,138,140,148,415,439,440,441,443,453,454,455,456,462,463,486,487,488,491,495,496,498,499,500,501,503,505,518,551,552,553,554,555,556,564,565,575,576,577,578,579,580,582,583,584,585,586,589,590,591,600,604,605,632,655,656,657,660,663,666,670,671,672,675,676,680,681,682,683,684,686,687,691,692,693,694,697,698,699,706,707,708,754,757],"label":"IterableSubject::::isEqualTo(java.lang.Object)"},{"test_lines":[1029,1032],"covered_lines":[100,101,108,109,110,152,155,754,757],"label":"IterableSubject::::isEqualTo(java.lang.Object)"},{"test_lines":[1034,1038],"covered_lines":[100,101,108,109,110,114,117,118,119,123,152,153,155,415,434,439,440,441,443,453,454,455,456,462,521,522,527,533,543,754,757],"label":"IterableSubject::::isEmpty()"},{"test_lines":[1040,1043],"covered_lines":[100,101,108,109,110,159,162,754,757],"label":"IterableSubject::::isNotEmpty()"},{"test_lines":[1045,1049],"covered_lines":[100,101,108,109,110,159,160,162,415,434,439,440,441,443,453,454,455,456,462,521,522,527,533,543,754,757],"label":"IterableSubject::::isNotEmpty()"},{"test_lines":[1051,1056],"covered_lines":[100,101,108,109,110,754,757,778,779,790,791,793,796,799,838,839,840,841,842,843,851,852,854],"label":"IterableSubject::::isNotEmpty()"},{"test_lines":[1058,1066],"covered_lines":[100,101,108,109,110,114,117,118,119,123,415,434,439,440,441,443,453,454,455,456,462,521,522,527,533,543,754,757,778,779,790,791,793,796,799,838,839,840,841,842,843,844,845,846,847,848,849,851,852,896],"label":"IterableSubject::::isInStrictOrder()"},{"test_lines":[1068,1075],"covered_lines":[100,101,108,109,110,754,757,790,793,838,839,840,841,842],"label":"IterableSubject::::isInStrictOrder(java.util.Comparator<?>)"},{"test_lines":[1077,1082],"covered_lines":[100,101,108,109,110,754,757,811,812,822,823,825,828,831,838,839,840,841,842,843,851,852,854],"label":"IterableSubject::::isInOrder()"},{"test_lines":[1084,1091],"covered_lines":[100,101,108,109,110,114,117,118,119,123,415,434,439,440,441,443,453,454,455,456,462,521,522,527,533,543,754,757,811,812,822,823,825,828,831,838,839,840,841,842,843,844,845,846,847,848,849,851,852,896],"label":"IterableSubject::::isInOrder()"},{"test_lines":[1093,1096],"covered_lines":[100,101,108,109,110,114,117,118,119,123,754,757,811,812,822,823,825,828,831,838,839,840,841,842,843,844,845,846,847,848,849,851,852,896],"label":"IterableSubject::::isInOrder()"},{"test_lines":[1098,1105],"covered_lines":[100,101,108,109,110,754,757,822,825,838,839,840,841,842],"label":"IterableSubject::::isInOrder(java.util.Comparator<?>)"},{"test_lines":[1107,1114],"covered_lines":[100,101,108,109,110,754,757,790,791,793,796,799,838,839,840,841,842,843,851,852,854],"label":"IterableSubject::::isInStrictOrder(java.util.Comparator<?>)"},{"test_lines":[1116,1124],"covered_lines":[100,101,108,109,110,114,117,118,119,123,415,434,439,440,441,443,453,454,455,456,462,521,522,527,533,543,754,757,790,791,793,796,799,838,839,840,841,842,843,844,845,846,847,848,849,851,852,896],"label":"IterableSubject::::isInStrictOrder(java.util.Comparator<?>)"},{"test_lines":[1126,1132],"covered_lines":[100,101,108,109,110,754,757,822,823,825,828,831,838,839,840,841,842,843,851,852,854],"label":"IterableSubject::::isInOrder(java.util.Comparator<?>)"},{"test_lines":[1134,1141],"covered_lines":[100,101,108,109,110,114,117,118,119,123,415,434,439,440,441,443,453,454,455,456,462,521,522,527,533,543,754,757,822,823,825,828,831,838,839,840,841,842,843,844,845,846,847,848,849,851,852,896],"label":"IterableSubject::::isInOrder(java.util.Comparator<?>)"},{"test_lines":[1176,1181],"covered_lines":[100,101,108,109,110,754,757,790,791,793,796,799,822,823,825,828,831,838,839,840,841,842,843,851,852,854],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[1183,1191],"covered_lines":[100,101,108,109,110,754,757],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[1193,1208],"covered_lines":[100,101,108,109,110,754,757,872,873,876,877,878,879,881,882,883,884,885,893],"label":"IterableSubject::::isNotIn(java.lang.Iterable<?>)"},{"test_lines":[1210,1217],"covered_lines":[100,101,108,109,110,754,757],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[1219,1234],"covered_lines":[100,101,108,109,110,754,757,863,864,872,873,876,877,878,879,881,882,883,884,885,893],"label":"IterableSubject::::isNoneOf(java.lang.Object,java.lang.Object,java.lang.Object[])"}]},"/bernard/dataset_construction/prep/repos/truth/core/src/main/java/com/google/common/truth/StandardSubjectBuilder.java":{"class_content":["/*\n"," * Copyright (c) 2011 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.base.Preconditions.checkNotNull;\n","\n","import com.google.common.annotations.GwtIncompatible;\n","import com.google.common.collect.ImmutableList;\n","import com.google.common.collect.Multimap;\n","import com.google.common.collect.Multiset;\n","import com.google.common.collect.Table;\n","import com.google.j2objc.annotations.J2ObjCIncompatible;\n","import java.math.BigDecimal;\n","import java.nio.file.Path;\n","import java.util.Map;\n","import java.util.Optional;\n","import java.util.OptionalDouble;\n","import java.util.OptionalInt;\n","import java.util.OptionalLong;\n","import java.util.stream.IntStream;\n","import java.util.stream.LongStream;\n","import java.util.stream.Stream;\n","import org.checkerframework.checker.nullness.qual.Nullable;\n","\n","/**\n"," * In a fluent assertion chain, an object with which you can do any of the following:\n"," *\n"," * <ul>\n"," *   <li>Set an optional message with {@link #withMessage}.\n"," *   <li>Specify the type of {@code Subject} to create with {@link #about(Subject.Factory)}.\n"," *   <li>For the types of {@code Subject} built into Truth, directly specify the value under test\n"," *       with {@link #that(Object)}.\n"," * </ul>\n"," *\n"," * <p>For more information about the methods in this class, see <a\n"," * href=\"https://truth.dev/faq#full-chain\">this FAQ entry</a>.\n"," *\n"," * <h3>For people extending Truth</h3>\n"," *\n"," * <p>You won't extend this type. When you write a custom subject, see <a\n"," * href=\"https://truth.dev/extension\">our doc on extensions</a>.\n"," */\n","public class StandardSubjectBuilder {\n","  /**\n","   * Returns a new instance that invokes the given {@code FailureStrategy} when a check fails. Most\n","   * users should not need this. If you think you do, see the documentation on {@link\n","   * FailureStrategy}.\n","   */\n","  public static StandardSubjectBuilder forCustomFailureStrategy(FailureStrategy failureStrategy) {\n","    return new StandardSubjectBuilder(FailureMetadata.forFailureStrategy(failureStrategy));\n","  }\n","\n","  private final FailureMetadata metadataDoNotReferenceDirectly;\n","\n","  StandardSubjectBuilder(FailureMetadata metadata) {\n","    this.metadataDoNotReferenceDirectly = checkNotNull(metadata);\n","  }\n","\n","  public final <ComparableT extends Comparable<?>> ComparableSubject<ComparableT> that(\n","      @Nullable ComparableT actual) {\n","    return new ComparableSubject<ComparableT>(metadata(), actual) {};\n","  }\n","\n","  public final BigDecimalSubject that(@Nullable BigDecimal actual) {\n","    return new BigDecimalSubject(metadata(), actual);\n","  }\n","\n","  public final Subject that(@Nullable Object actual) {\n","    return new Subject(metadata(), actual);\n","  }\n","\n","  @GwtIncompatible(\"ClassSubject.java\")\n","  @J2ktIncompatible\n","  public final ClassSubject that(@Nullable Class<?> actual) {\n","    return new ClassSubject(metadata(), actual);\n","  }\n","\n","  public final ThrowableSubject that(@Nullable Throwable actual) {\n","    return new ThrowableSubject(metadata(), actual, \"throwable\");\n","  }\n","\n","  public final LongSubject that(@Nullable Long actual) {\n","    return new LongSubject(metadata(), actual);\n","  }\n","\n","  public final DoubleSubject that(@Nullable Double actual) {\n","    return new DoubleSubject(metadata(), actual);\n","  }\n","\n","  public final FloatSubject that(@Nullable Float actual) {\n","    return new FloatSubject(metadata(), actual);\n","  }\n","\n","  public final IntegerSubject that(@Nullable Integer actual) {\n","    return new IntegerSubject(metadata(), actual);\n","  }\n","\n","  public final BooleanSubject that(@Nullable Boolean actual) {\n","    return new BooleanSubject(metadata(), actual);\n","  }\n","\n","  public final StringSubject that(@Nullable String actual) {\n","    return new StringSubject(metadata(), actual);\n","  }\n","\n","  public final IterableSubject that(@Nullable Iterable<?> actual) {\n","    return new IterableSubject(metadata(), actual);\n","  }\n","\n","  @SuppressWarnings(\"AvoidObjectArrays\")\n","  public final <T extends @Nullable Object> ObjectArraySubject<T> that(T @Nullable [] actual) {\n","    return new ObjectArraySubject<>(metadata(), actual, \"array\");\n","  }\n","\n","  public final PrimitiveBooleanArraySubject that(boolean @Nullable [] actual) {\n","    return new PrimitiveBooleanArraySubject(metadata(), actual, \"array\");\n","  }\n","\n","  public final PrimitiveShortArraySubject that(short @Nullable [] actual) {\n","    return new PrimitiveShortArraySubject(metadata(), actual, \"array\");\n","  }\n","\n","  public final PrimitiveIntArraySubject that(int @Nullable [] actual) {\n","    return new PrimitiveIntArraySubject(metadata(), actual, \"array\");\n","  }\n","\n","  public final PrimitiveLongArraySubject that(long @Nullable [] actual) {\n","    return new PrimitiveLongArraySubject(metadata(), actual, \"array\");\n","  }\n","\n","  public final PrimitiveCharArraySubject that(char @Nullable [] actual) {\n","    return new PrimitiveCharArraySubject(metadata(), actual, \"array\");\n","  }\n","\n","  public final PrimitiveByteArraySubject that(byte @Nullable [] actual) {\n","    return new PrimitiveByteArraySubject(metadata(), actual, \"array\");\n","  }\n","\n","  public final PrimitiveFloatArraySubject that(float @Nullable [] actual) {\n","    return new PrimitiveFloatArraySubject(metadata(), actual, \"array\");\n","  }\n","\n","  public final PrimitiveDoubleArraySubject that(double @Nullable [] actual) {\n","    return new PrimitiveDoubleArraySubject(metadata(), actual, \"array\");\n","  }\n","\n","  public final GuavaOptionalSubject that(com.google.common.base.@Nullable Optional<?> actual) {\n","    return new GuavaOptionalSubject(metadata(), actual, \"optional\");\n","  }\n","\n","  public final MapSubject that(@Nullable Map<?, ?> actual) {\n","    return new MapSubject(metadata(), actual);\n","  }\n","\n","  public final MultimapSubject that(@Nullable Multimap<?, ?> actual) {\n","    return new MultimapSubject(metadata(), actual, \"multimap\");\n","  }\n","\n","  public final MultisetSubject that(@Nullable Multiset<?> actual) {\n","    return new MultisetSubject(metadata(), actual);\n","  }\n","\n","  public final TableSubject that(@Nullable Table<?, ?, ?> actual) {\n","    return new TableSubject(metadata(), actual);\n","  }\n","\n","  /**\n","   * @since 1.3.0 (with access to {@link OptionalSubject} previously part of {@code\n","   *     truth-java8-extension})\n","   */\n","  @SuppressWarnings({\n","    \"Java7ApiChecker\", // no more dangerous that wherever the user got the Optional\n","    \"NullableOptional\", // Truth always accepts nulls, no matter the type\n","  })\n","  public final OptionalSubject that(@Nullable Optional<?> actual) {\n","    return new OptionalSubject(metadata(), actual, \"optional\");\n","  }\n","\n","  /**\n","   * @since 1.4.0 (with access to {@link OptionalIntSubject} previously part of {@code\n","   *     truth-java8-extension})\n","   */\n","  @SuppressWarnings(\n","      \"Java7ApiChecker\") // no more dangerous that wherever the user got the OptionalInt\n","  public final OptionalIntSubject that(@Nullable OptionalInt actual) {\n","    return new OptionalIntSubject(metadata(), actual, \"optionalInt\");\n","  }\n","\n","  /**\n","   * @since 1.4.0 (with access to {@link OptionalLongSubject} previously part of {@code\n","   *     truth-java8-extension})\n","   */\n","  @SuppressWarnings(\n","      \"Java7ApiChecker\") // no more dangerous that wherever the user got the OptionalLong\n","  public final OptionalLongSubject that(@Nullable OptionalLong actual) {\n","    return new OptionalLongSubject(metadata(), actual, \"optionalLong\");\n","  }\n","\n","  /**\n","   * @since 1.4.0 (with access to {@link OptionalDoubleSubject} previously part of {@code\n","   *     truth-java8-extension})\n","   */\n","  @SuppressWarnings(\n","      \"Java7ApiChecker\") // no more dangerous that wherever the user got the OptionalDouble\n","  public final OptionalDoubleSubject that(@Nullable OptionalDouble actual) {\n","    return new OptionalDoubleSubject(metadata(), actual, \"optionalDouble\");\n","  }\n","\n","  /**\n","   * @since 1.3.0 (with access to {@link StreamSubject} previously part of {@code\n","   *     truth-java8-extension})\n","   */\n","  @SuppressWarnings(\"Java7ApiChecker\") // no more dangerous that wherever the user got the Stream\n","  public final StreamSubject that(@Nullable Stream<?> actual) {\n","    return new StreamSubject(metadata(), actual);\n","  }\n","\n","  /**\n","   * @since 1.4.0 (with access to {@link IntStreamSubject} previously part of {@code\n","   *     truth-java8-extension})\n","   */\n","  @SuppressWarnings(\"Java7ApiChecker\") // no more dangerous that wherever the user got the IntStream\n","  public final IntStreamSubject that(@Nullable IntStream actual) {\n","    return new IntStreamSubject(metadata(), actual);\n","  }\n","\n","  /**\n","   * @since 1.4.0 (with access to {@link LongStreamSubject} previously part of {@code\n","   *     truth-java8-extension})\n","   */\n","  @SuppressWarnings(\n","      \"Java7ApiChecker\") // no more dangerous that wherever the user got the LongStream\n","  public final LongStreamSubject that(@Nullable LongStream actual) {\n","    return new LongStreamSubject(metadata(), actual);\n","  }\n","\n","  // TODO(b/64757353): Add support for DoubleStream?\n","\n","  /**\n","   * @since 1.4.0 (with access to {@link PathSubject} previously part of {@code\n","   *     truth-java8-extension})\n","   */\n","  @GwtIncompatible\n","  @J2ObjCIncompatible\n","  @J2ktIncompatible\n","  public final PathSubject that(@Nullable Path actual) {\n","    return new PathSubject(metadata(), actual);\n","  }\n","\n","  /**\n","   * Returns a new instance that will output the given message before the main failure message. If\n","   * this method is called multiple times, the messages will appear in the order that they were\n","   * specified.\n","   */\n","  public final StandardSubjectBuilder withMessage(@Nullable String messageToPrepend) {\n","    return withMessage(\"%s\", messageToPrepend);\n","  }\n","\n","  /**\n","   * Returns a new instance that will output the given message before the main failure message. If\n","   * this method is called multiple times, the messages will appear in the order that they were\n","   * specified.\n","   *\n","   * <p><b>Note:</b> the arguments will be substituted into the format template using {@link\n","   * com.google.common.base.Strings#lenientFormat Strings.lenientFormat}. Note this only supports\n","   * the {@code %s} specifier.\n","   *\n","   * @throws IllegalArgumentException if the number of placeholders in the format string does not\n","   *     equal the number of given arguments\n","   */\n","  public final StandardSubjectBuilder withMessage(String format, @Nullable Object... args) {\n","    return new StandardSubjectBuilder(metadata().withMessage(format, args));\n","  }\n","\n","  /**\n","   * Given a factory for some {@code Subject} class, returns a builder whose {@code that(actual)}\n","   * method creates instances of that class. Created subjects use the previously set failure\n","   * strategy and any previously set failure message.\n","   */\n","  public final <S extends Subject, A> SimpleSubjectBuilder<S, A> about(\n","      Subject.Factory<S, A> factory) {\n","    return new SimpleSubjectBuilder<>(metadata(), factory);\n","  }\n","\n","  public final <CustomSubjectBuilderT extends CustomSubjectBuilder> CustomSubjectBuilderT about(\n","      CustomSubjectBuilder.Factory<CustomSubjectBuilderT> factory) {\n","    return factory.createSubjectBuilder(metadata());\n","  }\n","\n","  /**\n","   * Reports a failure.\n","   *\n","   * <p>To set a message, first call {@link #withMessage} (or, more commonly, use the shortcut\n","   * {@link Truth#assertWithMessage}).\n","   */\n","  public final void fail() {\n","    metadata().fail(ImmutableList.<Fact>of());\n","  }\n","\n","  private FailureMetadata metadata() {\n","    checkStatePreconditions();\n","    return metadataDoNotReferenceDirectly;\n","  }\n","\n","  /**\n","   * Extension point invoked before every assertion. This allows {@link Expect} to check that it's\n","   * been set up properly as a {@code TestRule}.\n","   */\n","  void checkStatePreconditions() {}\n","}\n"],"test_content":["/*\n"," * Copyright (c) 2019 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","\n","package com.google.common.truth;\n","\n","\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import org.junit.runners.JUnit4;\n","\n","/** Tests for {@link StandardSubjectBuilder}. */\n","@RunWith(JUnit4.class)\n","public final class StandardSubjectBuilderTest extends BaseSubjectTestCase {\n","  @Test\n","  public void failNoMessage() {\n","    expectFailure.whenTesting().fail();\n","    assertThatFailure().hasMessageThat().isEmpty();\n","  }\n","}\n"],"method_lines_dic":{"StandardSubjectBuilder::::forCustomFailureStrategy(com.google.common.truth.FailureStrategy)":[62,64],"StandardSubjectBuilder::::that(ComparableT)":[72,75],"StandardSubjectBuilder::::that(java.math.BigDecimal)":[77,79],"StandardSubjectBuilder::::that(java.lang.Object)":[81,83],"StandardSubjectBuilder::::that(java.lang.Class<?>)":[85,89],"StandardSubjectBuilder::::that(java.lang.Throwable)":[91,93],"StandardSubjectBuilder::::that(java.lang.Long)":[95,97],"StandardSubjectBuilder::::that(java.lang.Double)":[99,101],"StandardSubjectBuilder::::that(java.lang.Float)":[103,105],"StandardSubjectBuilder::::that(java.lang.Integer)":[107,109],"StandardSubjectBuilder::::that(java.lang.Boolean)":[111,113],"StandardSubjectBuilder::::that(java.lang.String)":[115,117],"StandardSubjectBuilder::::that(java.lang.Iterable<?>)":[119,121],"StandardSubjectBuilder::::that(T[])":[123,126],"StandardSubjectBuilder::::that(boolean[])":[128,130],"StandardSubjectBuilder::::that(short[])":[132,134],"StandardSubjectBuilder::::that(int[])":[136,138],"StandardSubjectBuilder::::that(long[])":[140,142],"StandardSubjectBuilder::::that(char[])":[144,146],"StandardSubjectBuilder::::that(byte[])":[148,150],"StandardSubjectBuilder::::that(float[])":[152,154],"StandardSubjectBuilder::::that(double[])":[156,158],"StandardSubjectBuilder::::that(java.util.Map<?, ?>)":[164,166],"StandardSubjectBuilder::::that(java.util.Optional<?>)":[184,190],"StandardSubjectBuilder::::that(java.util.OptionalInt)":[196,200],"StandardSubjectBuilder::::that(java.util.OptionalLong)":[206,210],"StandardSubjectBuilder::::that(java.util.OptionalDouble)":[216,220],"StandardSubjectBuilder::::that(java.util.stream.Stream<?>)":[226,229],"StandardSubjectBuilder::::that(java.util.stream.IntStream)":[235,238],"StandardSubjectBuilder::::that(java.util.stream.LongStream)":[244,248],"StandardSubjectBuilder::::that(java.nio.file.Path)":[256,261],"StandardSubjectBuilder::::withMessage(java.lang.String)":[268,270],"StandardSubjectBuilder::::withMessage(java.lang.String,java.lang.Object[])":[284,286],"StandardSubjectBuilder::::about(com.google.common.truth.Subject.Factory<S, A>)":[293,296],"StandardSubjectBuilder::::about(com.google.common.truth.CustomSubjectBuilder.Factory<CustomSubjectBuilderT>)":[298,301],"StandardSubjectBuilder::::fail()":[309,311],"StandardSubjectBuilder::::metadata()":[313,316],"StandardSubjectBuilder::::checkStatePreconditions()":[322,322]},"test_method_lines_dic":{"StandardSubjectBuilderTest::::failNoMessage()":[27,31]},"reverse_method_lines_dic":{"62":"StandardSubjectBuilder::::forCustomFailureStrategy(com.google.common.truth.FailureStrategy)","63":"StandardSubjectBuilder::::forCustomFailureStrategy(com.google.common.truth.FailureStrategy)","64":"StandardSubjectBuilder::::forCustomFailureStrategy(com.google.common.truth.FailureStrategy)","72":"StandardSubjectBuilder::::that(ComparableT)","73":"StandardSubjectBuilder::::that(ComparableT)","74":"StandardSubjectBuilder::::that(ComparableT)","75":"StandardSubjectBuilder::::that(ComparableT)","77":"StandardSubjectBuilder::::that(java.math.BigDecimal)","78":"StandardSubjectBuilder::::that(java.math.BigDecimal)","79":"StandardSubjectBuilder::::that(java.math.BigDecimal)","81":"StandardSubjectBuilder::::that(java.lang.Object)","82":"StandardSubjectBuilder::::that(java.lang.Object)","83":"StandardSubjectBuilder::::that(java.lang.Object)","85":"StandardSubjectBuilder::::that(java.lang.Class<?>)","86":"StandardSubjectBuilder::::that(java.lang.Class<?>)","87":"StandardSubjectBuilder::::that(java.lang.Class<?>)","88":"StandardSubjectBuilder::::that(java.lang.Class<?>)","89":"StandardSubjectBuilder::::that(java.lang.Class<?>)","91":"StandardSubjectBuilder::::that(java.lang.Throwable)","92":"StandardSubjectBuilder::::that(java.lang.Throwable)","93":"StandardSubjectBuilder::::that(java.lang.Throwable)","95":"StandardSubjectBuilder::::that(java.lang.Long)","96":"StandardSubjectBuilder::::that(java.lang.Long)","97":"StandardSubjectBuilder::::that(java.lang.Long)","99":"StandardSubjectBuilder::::that(java.lang.Double)","100":"StandardSubjectBuilder::::that(java.lang.Double)","101":"StandardSubjectBuilder::::that(java.lang.Double)","103":"StandardSubjectBuilder::::that(java.lang.Float)","104":"StandardSubjectBuilder::::that(java.lang.Float)","105":"StandardSubjectBuilder::::that(java.lang.Float)","107":"StandardSubjectBuilder::::that(java.lang.Integer)","108":"StandardSubjectBuilder::::that(java.lang.Integer)","109":"StandardSubjectBuilder::::that(java.lang.Integer)","111":"StandardSubjectBuilder::::that(java.lang.Boolean)","112":"StandardSubjectBuilder::::that(java.lang.Boolean)","113":"StandardSubjectBuilder::::that(java.lang.Boolean)","115":"StandardSubjectBuilder::::that(java.lang.String)","116":"StandardSubjectBuilder::::that(java.lang.String)","117":"StandardSubjectBuilder::::that(java.lang.String)","119":"StandardSubjectBuilder::::that(java.lang.Iterable<?>)","120":"StandardSubjectBuilder::::that(java.lang.Iterable<?>)","121":"StandardSubjectBuilder::::that(java.lang.Iterable<?>)","123":"StandardSubjectBuilder::::that(T[])","124":"StandardSubjectBuilder::::that(T[])","125":"StandardSubjectBuilder::::that(T[])","126":"StandardSubjectBuilder::::that(T[])","128":"StandardSubjectBuilder::::that(boolean[])","129":"StandardSubjectBuilder::::that(boolean[])","130":"StandardSubjectBuilder::::that(boolean[])","132":"StandardSubjectBuilder::::that(short[])","133":"StandardSubjectBuilder::::that(short[])","134":"StandardSubjectBuilder::::that(short[])","136":"StandardSubjectBuilder::::that(int[])","137":"StandardSubjectBuilder::::that(int[])","138":"StandardSubjectBuilder::::that(int[])","140":"StandardSubjectBuilder::::that(long[])","141":"StandardSubjectBuilder::::that(long[])","142":"StandardSubjectBuilder::::that(long[])","144":"StandardSubjectBuilder::::that(char[])","145":"StandardSubjectBuilder::::that(char[])","146":"StandardSubjectBuilder::::that(char[])","148":"StandardSubjectBuilder::::that(byte[])","149":"StandardSubjectBuilder::::that(byte[])","150":"StandardSubjectBuilder::::that(byte[])","152":"StandardSubjectBuilder::::that(float[])","153":"StandardSubjectBuilder::::that(float[])","154":"StandardSubjectBuilder::::that(float[])","156":"StandardSubjectBuilder::::that(double[])","157":"StandardSubjectBuilder::::that(double[])","158":"StandardSubjectBuilder::::that(double[])","164":"StandardSubjectBuilder::::that(java.util.Map<?, ?>)","165":"StandardSubjectBuilder::::that(java.util.Map<?, ?>)","166":"StandardSubjectBuilder::::that(java.util.Map<?, ?>)","184":"StandardSubjectBuilder::::that(java.util.Optional<?>)","185":"StandardSubjectBuilder::::that(java.util.Optional<?>)","186":"StandardSubjectBuilder::::that(java.util.Optional<?>)","187":"StandardSubjectBuilder::::that(java.util.Optional<?>)","188":"StandardSubjectBuilder::::that(java.util.Optional<?>)","189":"StandardSubjectBuilder::::that(java.util.Optional<?>)","190":"StandardSubjectBuilder::::that(java.util.Optional<?>)","196":"StandardSubjectBuilder::::that(java.util.OptionalInt)","197":"StandardSubjectBuilder::::that(java.util.OptionalInt)","198":"StandardSubjectBuilder::::that(java.util.OptionalInt)","199":"StandardSubjectBuilder::::that(java.util.OptionalInt)","200":"StandardSubjectBuilder::::that(java.util.OptionalInt)","206":"StandardSubjectBuilder::::that(java.util.OptionalLong)","207":"StandardSubjectBuilder::::that(java.util.OptionalLong)","208":"StandardSubjectBuilder::::that(java.util.OptionalLong)","209":"StandardSubjectBuilder::::that(java.util.OptionalLong)","210":"StandardSubjectBuilder::::that(java.util.OptionalLong)","216":"StandardSubjectBuilder::::that(java.util.OptionalDouble)","217":"StandardSubjectBuilder::::that(java.util.OptionalDouble)","218":"StandardSubjectBuilder::::that(java.util.OptionalDouble)","219":"StandardSubjectBuilder::::that(java.util.OptionalDouble)","220":"StandardSubjectBuilder::::that(java.util.OptionalDouble)","226":"StandardSubjectBuilder::::that(java.util.stream.Stream<?>)","227":"StandardSubjectBuilder::::that(java.util.stream.Stream<?>)","228":"StandardSubjectBuilder::::that(java.util.stream.Stream<?>)","229":"StandardSubjectBuilder::::that(java.util.stream.Stream<?>)","235":"StandardSubjectBuilder::::that(java.util.stream.IntStream)","236":"StandardSubjectBuilder::::that(java.util.stream.IntStream)","237":"StandardSubjectBuilder::::that(java.util.stream.IntStream)","238":"StandardSubjectBuilder::::that(java.util.stream.IntStream)","244":"StandardSubjectBuilder::::that(java.util.stream.LongStream)","245":"StandardSubjectBuilder::::that(java.util.stream.LongStream)","246":"StandardSubjectBuilder::::that(java.util.stream.LongStream)","247":"StandardSubjectBuilder::::that(java.util.stream.LongStream)","248":"StandardSubjectBuilder::::that(java.util.stream.LongStream)","256":"StandardSubjectBuilder::::that(java.nio.file.Path)","257":"StandardSubjectBuilder::::that(java.nio.file.Path)","258":"StandardSubjectBuilder::::that(java.nio.file.Path)","259":"StandardSubjectBuilder::::that(java.nio.file.Path)","260":"StandardSubjectBuilder::::that(java.nio.file.Path)","261":"StandardSubjectBuilder::::that(java.nio.file.Path)","268":"StandardSubjectBuilder::::withMessage(java.lang.String)","269":"StandardSubjectBuilder::::withMessage(java.lang.String)","270":"StandardSubjectBuilder::::withMessage(java.lang.String)","284":"StandardSubjectBuilder::::withMessage(java.lang.String,java.lang.Object[])","285":"StandardSubjectBuilder::::withMessage(java.lang.String,java.lang.Object[])","286":"StandardSubjectBuilder::::withMessage(java.lang.String,java.lang.Object[])","293":"StandardSubjectBuilder::::about(com.google.common.truth.Subject.Factory<S, A>)","294":"StandardSubjectBuilder::::about(com.google.common.truth.Subject.Factory<S, A>)","295":"StandardSubjectBuilder::::about(com.google.common.truth.Subject.Factory<S, A>)","296":"StandardSubjectBuilder::::about(com.google.common.truth.Subject.Factory<S, A>)","298":"StandardSubjectBuilder::::about(com.google.common.truth.CustomSubjectBuilder.Factory<CustomSubjectBuilderT>)","299":"StandardSubjectBuilder::::about(com.google.common.truth.CustomSubjectBuilder.Factory<CustomSubjectBuilderT>)","300":"StandardSubjectBuilder::::about(com.google.common.truth.CustomSubjectBuilder.Factory<CustomSubjectBuilderT>)","301":"StandardSubjectBuilder::::about(com.google.common.truth.CustomSubjectBuilder.Factory<CustomSubjectBuilderT>)","309":"StandardSubjectBuilder::::fail()","310":"StandardSubjectBuilder::::fail()","311":"StandardSubjectBuilder::::fail()","313":"StandardSubjectBuilder::::metadata()","314":"StandardSubjectBuilder::::metadata()","315":"StandardSubjectBuilder::::metadata()","316":"StandardSubjectBuilder::::metadata()","322":"StandardSubjectBuilder::::checkStatePreconditions()"},"test_reverse_method_lines_dic":{"27":"StandardSubjectBuilderTest::::failNoMessage()","28":"StandardSubjectBuilderTest::::failNoMessage()","29":"StandardSubjectBuilderTest::::failNoMessage()","30":"StandardSubjectBuilderTest::::failNoMessage()","31":"StandardSubjectBuilderTest::::failNoMessage()"},"tests":[{"test_lines":[27,31],"covered_lines":[63,68,69,70,116,295,310,311,314,315,322],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/truth/core/src/main/java/com/google/common/truth/DoubleSubject.java":{"class_content":["/*\n"," * Copyright (c) 2014 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","\n","package com.google.common.truth;\n","\n","import static com.google.common.base.Preconditions.checkArgument;\n","import static com.google.common.base.Preconditions.checkNotNull;\n","import static com.google.common.truth.Fact.fact;\n","import static com.google.common.truth.Fact.simpleFact;\n","import static com.google.common.truth.MathUtil.equalWithinTolerance;\n","import static com.google.common.truth.MathUtil.notEqualWithinTolerance;\n","import static com.google.common.truth.Platform.doubleToString;\n","import static java.lang.Double.NaN;\n","import static java.lang.Double.doubleToLongBits;\n","\n","import org.checkerframework.checker.nullness.qual.Nullable;\n","\n","/**\n"," * Propositions for {@link Double} subjects.\n"," *\n"," * @author Kurt Alfred Kluever\n"," */\n","public final class DoubleSubject extends ComparableSubject<Double> {\n","  private static final long NEG_ZERO_BITS = doubleToLongBits(-0.0);\n","\n","  private final @Nullable Double actual;\n","\n","  DoubleSubject(FailureMetadata metadata, @Nullable Double actual) {\n","    super(metadata, actual);\n","    this.actual = actual;\n","  }\n","\n","  /**\n","   * A partially specified check about an approximate relationship to a {@code double} subject using\n","   * a tolerance.\n","   */\n","  public abstract static class TolerantDoubleComparison {\n","\n","    // Prevent subclassing outside of this class\n","    private TolerantDoubleComparison() {}\n","\n","    /**\n","     * Fails if the subject was expected to be within the tolerance of the given value but was not\n","     * <i>or</i> if it was expected <i>not</i> to be within the tolerance but was. The subject and\n","     * tolerance are specified earlier in the fluent call chain.\n","     */\n","    public abstract void of(double expectedDouble);\n","\n","    /**\n","     * @throws UnsupportedOperationException always\n","     * @deprecated {@link Object#equals(Object)} is not supported on TolerantDoubleComparison. If\n","     *     you meant to compare doubles, use {@link #of(double)} instead.\n","     */\n","    @Deprecated\n","    @Override\n","    public boolean equals(@Nullable Object o) {\n","      throw new UnsupportedOperationException(\n","          \"If you meant to compare doubles, use .of(double) instead.\");\n","    }\n","\n","    /**\n","     * @throws UnsupportedOperationException always\n","     * @deprecated {@link Object#hashCode()} is not supported on TolerantDoubleComparison\n","     */\n","    @Deprecated\n","    @Override\n","    public int hashCode() {\n","      throw new UnsupportedOperationException(\"Subject.hashCode() is not supported.\");\n","    }\n","  }\n","\n","  /**\n","   * Prepares for a check that the subject is a finite number within the given tolerance of an\n","   * expected value that will be provided in the next call in the fluent chain.\n","   *\n","   * <p>The check will fail if either the subject or the object is {@link Double#POSITIVE_INFINITY},\n","   * {@link Double#NEGATIVE_INFINITY}, or {@link Double#NaN}. To check for those values, use {@link\n","   * #isPositiveInfinity}, {@link #isNegativeInfinity}, {@link #isNaN}, or (with more generality)\n","   * {@link #isEqualTo}.\n","   *\n","   * <p>The check will pass if both values are zero, even if one is {@code 0.0} and the other is\n","   * {@code -0.0}. Use {@code #isEqualTo} to assert that a value is exactly {@code 0.0} or that it\n","   * is exactly {@code -0.0}.\n","   *\n","   * <p>You can use a tolerance of {@code 0.0} to assert the exact equality of finite doubles, but\n","   * often {@link #isEqualTo} is preferable (note the different behaviours around non-finite values\n","   * and {@code -0.0}). See the documentation on {@link #isEqualTo} for advice on when exact\n","   * equality assertions are appropriate.\n","   *\n","   * @param tolerance an inclusive upper bound on the difference between the subject and object\n","   *     allowed by the check, which must be a non-negative finite value, i.e. not {@link\n","   *     Double#NaN}, {@link Double#POSITIVE_INFINITY}, or negative, including {@code -0.0}\n","   */\n","  public TolerantDoubleComparison isWithin(double tolerance) {\n","    return new TolerantDoubleComparison() {\n","      @Override\n","      public void of(double expected) {\n","        Double actual = DoubleSubject.this.actual;\n","        checkNotNull(\n","            actual, \"actual value cannot be null. tolerance=%s expected=%s\", tolerance, expected);\n","        checkTolerance(tolerance);\n","\n","        if (!equalWithinTolerance(actual, expected, tolerance)) {\n","          failWithoutActual(\n","              fact(\"expected\", doubleToString(expected)),\n","              butWas(),\n","              fact(\"outside tolerance\", doubleToString(tolerance)));\n","        }\n","      }\n","    };\n","  }\n","\n","  /**\n","   * Prepares for a check that the subject is a finite number not within the given tolerance of an\n","   * expected value that will be provided in the next call in the fluent chain.\n","   *\n","   * <p>The check will fail if either the subject or the object is {@link Double#POSITIVE_INFINITY},\n","   * {@link Double#NEGATIVE_INFINITY}, or {@link Double#NaN}. See {@link #isFinite}, {@link\n","   * #isNotNaN}, or {@link #isNotEqualTo} for checks with other behaviours.\n","   *\n","   * <p>The check will fail if both values are zero, even if one is {@code 0.0} and the other is\n","   * {@code -0.0}. Use {@code #isNotEqualTo} for a test which fails for a value of exactly zero with\n","   * one sign but passes for zero with the opposite sign.\n","   *\n","   * <p>You can use a tolerance of {@code 0.0} to assert the exact non-equality of finite doubles,\n","   * but sometimes {@link #isNotEqualTo} is preferable (note the different behaviours around\n","   * non-finite values and {@code -0.0}).\n","   *\n","   * @param tolerance an exclusive lower bound on the difference between the subject and object\n","   *     allowed by the check, which must be a non-negative finite value, i.e. not {@code\n","   *     Double.NaN}, {@code Double.POSITIVE_INFINITY}, or negative, including {@code -0.0}\n","   */\n","  public TolerantDoubleComparison isNotWithin(double tolerance) {\n","    return new TolerantDoubleComparison() {\n","      @Override\n","      public void of(double expected) {\n","        Double actual = DoubleSubject.this.actual;\n","        checkNotNull(\n","            actual, \"actual value cannot be null. tolerance=%s expected=%s\", tolerance, expected);\n","        checkTolerance(tolerance);\n","\n","        if (!notEqualWithinTolerance(actual, expected, tolerance)) {\n","          failWithoutActual(\n","              fact(\"expected not to be\", doubleToString(expected)),\n","              butWas(),\n","              fact(\"within tolerance\", doubleToString(tolerance)));\n","        }\n","      }\n","    };\n","  }\n","\n","  /**\n","   * Asserts that the subject is exactly equal to the given value, with equality defined as by\n","   * {@code Double#equals}. This method is <i>not</i> recommended when the code under test is doing\n","   * any kind of arithmetic: use {@link #isWithin} with a suitable tolerance in that case. (Remember\n","   * that the exact result of floating point arithmetic is sensitive to apparently trivial changes\n","   * such as replacing {@code (a + b) + c} with {@code a + (b + c)}, and that unless {@code\n","   * strictfp} is in force even the result of {@code (a + b) + c} is sensitive to the JVM's choice\n","   * of precision for the intermediate result.) This method is recommended when the code under test\n","   * is specified as either copying a value without modification from its input or returning a\n","   * well-defined literal or constant value.\n","   *\n","   * <p><b>Note:</b> The assertion {@code isEqualTo(0.0)} fails for an input of {@code -0.0}, and\n","   * vice versa. For an assertion that passes for either {@code 0.0} or {@code -0.0}, use {@link\n","   * #isZero}.\n","   */\n","  @Override\n","  public final void isEqualTo(@Nullable Object other) {\n","    super.isEqualTo(other);\n","  }\n","\n","  /**\n","   * Asserts that the subject is not exactly equal to the given value, with equality defined as by\n","   * {@code Double#equals}. See {@link #isEqualTo} for advice on when exact equality is recommended.\n","   * Use {@link #isNotWithin} for an assertion with a tolerance.\n","   *\n","   * <p><b>Note:</b> The assertion {@code isNotEqualTo(0.0)} passes for {@code -0.0}, and vice\n","   * versa. For an assertion that fails for either {@code 0.0} or {@code -0.0}, use {@link\n","   * #isNonZero}.\n","   */\n","  @Override\n","  public final void isNotEqualTo(@Nullable Object other) {\n","    super.isNotEqualTo(other);\n","  }\n","\n","  /**\n","   * @deprecated Use {@link #isWithin} or {@link #isEqualTo} instead (see documentation for advice).\n","   */\n","  @Override\n","  @Deprecated\n","  public final void isEquivalentAccordingToCompareTo(@Nullable Double other) {\n","    super.isEquivalentAccordingToCompareTo(other);\n","  }\n","\n","  /**\n","   * Ensures that the given tolerance is a non-negative finite value, i.e. not {@code Double.NaN},\n","   * {@code Double.POSITIVE_INFINITY}, or negative, including {@code -0.0}.\n","   */\n","  static void checkTolerance(double tolerance) {\n","    checkArgument(!Double.isNaN(tolerance), \"tolerance cannot be NaN\");\n","    checkArgument(tolerance >= 0.0, \"tolerance (%s) cannot be negative\", tolerance);\n","    checkArgument(\n","        doubleToLongBits(tolerance) != NEG_ZERO_BITS,\n","        \"tolerance (%s) cannot be negative\",\n","        tolerance);\n","    checkArgument(tolerance != Double.POSITIVE_INFINITY, \"tolerance cannot be POSITIVE_INFINITY\");\n","  }\n","\n","  /** Asserts that the subject is zero (i.e. it is either {@code 0.0} or {@code -0.0}). */\n","  public final void isZero() {\n","    if (actual == null || actual.doubleValue() != 0.0) {\n","      failWithActual(simpleFact(\"expected zero\"));\n","    }\n","  }\n","\n","  /**\n","   * Asserts that the subject is a non-null value other than zero (i.e. it is not {@code 0.0},\n","   * {@code -0.0} or {@code null}).\n","   */\n","  public final void isNonZero() {\n","    if (actual == null) {\n","      failWithActual(simpleFact(\"expected a double other than zero\"));\n","    } else if (actual.doubleValue() == 0.0) {\n","      failWithActual(simpleFact(\"expected not to be zero\"));\n","    }\n","  }\n","\n","  /** Asserts that the subject is {@link Double#POSITIVE_INFINITY}. */\n","  public final void isPositiveInfinity() {\n","    isEqualTo(Double.POSITIVE_INFINITY);\n","  }\n","\n","  /** Asserts that the subject is {@link Double#NEGATIVE_INFINITY}. */\n","  public final void isNegativeInfinity() {\n","    isEqualTo(Double.NEGATIVE_INFINITY);\n","  }\n","\n","  /** Asserts that the subject is {@link Double#NaN}. */\n","  public final void isNaN() {\n","    isEqualTo(NaN);\n","  }\n","\n","  /**\n","   * Asserts that the subject is finite, i.e. not {@link Double#POSITIVE_INFINITY}, {@link\n","   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}.\n","   */\n","  public final void isFinite() {\n","    if (actual == null || actual.isNaN() || actual.isInfinite()) {\n","      failWithActual(simpleFact(\"expected to be finite\"));\n","    }\n","  }\n","\n","  /**\n","   * Asserts that the subject is a non-null value other than {@link Double#NaN} (but it may be\n","   * {@link Double#POSITIVE_INFINITY} or {@link Double#NEGATIVE_INFINITY}).\n","   */\n","  public final void isNotNaN() {\n","    if (actual == null) {\n","      failWithActual(simpleFact(\"expected a double other than NaN\"));\n","    } else {\n","      isNotEqualTo(NaN);\n","    }\n","  }\n","\n","  /**\n","   * Checks that the subject is greater than {@code other}.\n","   *\n","   * <p>To check that the subject is greater than <i>or equal to</i> {@code other}, use {@link\n","   * #isAtLeast}.\n","   */\n","  public final void isGreaterThan(int other) {\n","    isGreaterThan((double) other);\n","  }\n","\n","  /**\n","   * Checks that the subject is less than {@code other}.\n","   *\n","   * <p>To check that the subject is less than <i>or equal to</i> {@code other}, use {@link\n","   * #isAtMost} .\n","   */\n","  public final void isLessThan(int other) {\n","    isLessThan((double) other);\n","  }\n","\n","  /**\n","   * Checks that the subject is less than or equal to {@code other}.\n","   *\n","   * <p>To check that the subject is <i>strictly</i> less than {@code other}, use {@link\n","   * #isLessThan}.\n","   */\n","  public final void isAtMost(int other) {\n","    isAtMost((double) other);\n","  }\n","\n","  /**\n","   * Checks that the subject is greater than or equal to {@code other}.\n","   *\n","   * <p>To check that the subject is <i>strictly</i> greater than {@code other}, use {@link\n","   * #isGreaterThan}.\n","   */\n","  public final void isAtLeast(int other) {\n","    isAtLeast((double) other);\n","  }\n","}\n"],"test_content":["/*\n"," * Copyright (c) 2014 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.truth.ExpectFailure.assertThat;\n","import static com.google.common.truth.Platform.doubleToString;\n","import static com.google.common.truth.Truth.assertThat;\n","import static org.junit.Assert.fail;\n","\n","import com.google.common.annotations.GwtIncompatible;\n","import com.google.common.truth.ExpectFailure.SimpleSubjectBuilderCallback;\n","import com.google.errorprone.annotations.CanIgnoreReturnValue;\n","import org.checkerframework.checker.nullness.qual.Nullable;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import org.junit.runners.JUnit4;\n","\n","/**\n"," * Tests for Double Subjects.\n"," *\n"," * @author Kurt Alfred Kluever\n"," */\n","@RunWith(JUnit4.class)\n","public class DoubleSubjectTest extends BaseSubjectTestCase {\n","\n","  private static final double NEARLY_MAX = 1.7976931348623155E308;\n","  private static final double NEGATIVE_NEARLY_MAX = -1.7976931348623155E308;\n","  private static final double OVER_MIN = 9.9E-324;\n","  private static final double UNDER_NEGATIVE_MIN = -9.9E-324;\n","  private static final double GOLDEN = 1.23;\n","  private static final double OVER_GOLDEN = 1.2300000000000002;\n","\n","  private static final Subject.Factory<DoubleSubject, Double> DOUBLE_SUBJECT_FACTORY =\n","      new Subject.Factory<DoubleSubject, Double>() {\n","        @Override\n","        public DoubleSubject createSubject(FailureMetadata metadata, Double that) {\n","          return new DoubleSubject(metadata, that);\n","        }\n","      };\n","\n","  @CanIgnoreReturnValue\n","  private static AssertionError expectFailure(\n","      SimpleSubjectBuilderCallback<DoubleSubject, Double> callback) {\n","    return ExpectFailure.expectFailureAbout(DOUBLE_SUBJECT_FACTORY, callback);\n","  }\n","\n","  @Test\n","  @GwtIncompatible(\"Math.nextAfter\")\n","  public void testDoubleConstants_matchNextAfter() {\n","    assertThat(Math.nextAfter(Double.MIN_VALUE, 1.0)).isEqualTo(OVER_MIN);\n","    assertThat(Math.nextAfter(1.23, Double.POSITIVE_INFINITY)).isEqualTo(OVER_GOLDEN);\n","    assertThat(Math.nextAfter(Double.MAX_VALUE, 0.0)).isEqualTo(NEARLY_MAX);\n","    assertThat(Math.nextAfter(-1.0 * Double.MAX_VALUE, 0.0)).isEqualTo(NEGATIVE_NEARLY_MAX);\n","    assertThat(Math.nextAfter(-1.0 * Double.MIN_VALUE, -1.0)).isEqualTo(UNDER_NEGATIVE_MIN);\n","  }\n","\n","  @Test\n","  public void testJ2clCornerCaseZero() {\n","    // GWT considers -0.0 to be equal to 0.0. But we've added a special workaround inside Truth.\n","    assertThatIsEqualToFails(-0.0, 0.0);\n","  }\n","\n","  @Test\n","  @GwtIncompatible(\"GWT behavior difference\")\n","  public void testJ2clCornerCaseDoubleVsFloat() {\n","    // Under GWT, 1.23f.toString() is different than 1.23d.toString(), so the message omits types.\n","    // TODO(b/35377736): Consider making Truth add the types anyway.\n","    expectFailureWhenTestingThat(1.23).isEqualTo(1.23f);\n","    assertFailureKeys(\"expected\", \"an instance of\", \"but was\", \"an instance of\");\n","  }\n","\n","  @Test\n","  public void isWithinOf() {\n","    assertThat(2.0).isWithin(0.0).of(2.0);\n","    assertThat(2.0).isWithin(0.00001).of(2.0);\n","    assertThat(2.0).isWithin(1000.0).of(2.0);\n","    assertThat(2.0).isWithin(1.00001).of(3.0);\n","    assertThatIsWithinFails(2.0, 0.99999, 3.0);\n","    assertThatIsWithinFails(2.0, 1000.0, 1003.0);\n","    assertThatIsWithinFails(2.0, 1000.0, Double.POSITIVE_INFINITY);\n","    assertThatIsWithinFails(2.0, 1000.0, Double.NaN);\n","    assertThatIsWithinFails(Double.NEGATIVE_INFINITY, 1000.0, 2.0);\n","    assertThatIsWithinFails(Double.NaN, 1000.0, 2.0);\n","  }\n","\n","  private static void assertThatIsWithinFails(double actual, double tolerance, double expected) {\n","    ExpectFailure.SimpleSubjectBuilderCallback<DoubleSubject, Double> callback =\n","        new ExpectFailure.SimpleSubjectBuilderCallback<DoubleSubject, Double>() {\n","          @Override\n","          public void invokeAssertion(SimpleSubjectBuilder<DoubleSubject, Double> expect) {\n","            expect.that(actual).isWithin(tolerance).of(expected);\n","          }\n","        };\n","    AssertionError failure = expectFailure(callback);\n","    assertThat(failure)\n","        .factKeys()\n","        .containsExactly(\"expected\", \"but was\", \"outside tolerance\")\n","        .inOrder();\n","    assertThat(failure).factValue(\"expected\").isEqualTo(doubleToString(expected));\n","    assertThat(failure).factValue(\"but was\").isEqualTo(doubleToString(actual));\n","    assertThat(failure).factValue(\"outside tolerance\").isEqualTo(doubleToString(tolerance));\n","  }\n","\n","  @Test\n","  public void isNotWithinOf() {\n","    assertThatIsNotWithinFails(2.0, 0.0, 2.0);\n","    assertThatIsNotWithinFails(2.0, 0.00001, 2.0);\n","    assertThatIsNotWithinFails(2.0, 1000.0, 2.0);\n","    assertThatIsNotWithinFails(2.0, 1.00001, 3.0);\n","    assertThat(2.0).isNotWithin(0.99999).of(3.0);\n","    assertThat(2.0).isNotWithin(1000.0).of(1003.0);\n","    assertThatIsNotWithinFails(2.0, 0.0, Double.POSITIVE_INFINITY);\n","    assertThatIsNotWithinFails(2.0, 0.0, Double.NaN);\n","    assertThatIsNotWithinFails(Double.NEGATIVE_INFINITY, 1000.0, 2.0);\n","    assertThatIsNotWithinFails(Double.NaN, 1000.0, 2.0);\n","  }\n","\n","  private static void assertThatIsNotWithinFails(double actual, double tolerance, double expected) {\n","    ExpectFailure.SimpleSubjectBuilderCallback<DoubleSubject, Double> callback =\n","        new ExpectFailure.SimpleSubjectBuilderCallback<DoubleSubject, Double>() {\n","          @Override\n","          public void invokeAssertion(SimpleSubjectBuilder<DoubleSubject, Double> expect) {\n","            expect.that(actual).isNotWithin(tolerance).of(expected);\n","          }\n","        };\n","    AssertionError failure = expectFailure(callback);\n","    assertThat(failure).factValue(\"expected not to be\").isEqualTo(doubleToString(expected));\n","    assertThat(failure).factValue(\"within tolerance\").isEqualTo(doubleToString(tolerance));\n","  }\n","\n","  @Test\n","  public void negativeTolerances() {\n","    isWithinNegativeToleranceThrowsIAE(5.0, -0.5, 4.9);\n","    isWithinNegativeToleranceThrowsIAE(5.0, -0.5, 4.0);\n","\n","    isNotWithinNegativeToleranceThrowsIAE(5.0, -0.5, 4.9);\n","    isNotWithinNegativeToleranceThrowsIAE(5.0, -0.5, 4.0);\n","\n","    isWithinNegativeToleranceThrowsIAE(+0.0, -0.00001, +0.0);\n","    isWithinNegativeToleranceThrowsIAE(+0.0, -0.00001, -0.0);\n","    isWithinNegativeToleranceThrowsIAE(-0.0, -0.00001, +0.0);\n","    isWithinNegativeToleranceThrowsIAE(-0.0, -0.00001, -0.0);\n","\n","    isNotWithinNegativeToleranceThrowsIAE(+0.0, -0.00001, +1.0);\n","    isNotWithinNegativeToleranceThrowsIAE(+0.0, -0.00001, -1.0);\n","    isNotWithinNegativeToleranceThrowsIAE(-0.0, -0.00001, +1.0);\n","    isNotWithinNegativeToleranceThrowsIAE(-0.0, -0.00001, -1.0);\n","\n","    isNotWithinNegativeToleranceThrowsIAE(+1.0, -0.00001, +0.0);\n","    isNotWithinNegativeToleranceThrowsIAE(+1.0, -0.00001, -0.0);\n","    isNotWithinNegativeToleranceThrowsIAE(-1.0, -0.00001, +0.0);\n","    isNotWithinNegativeToleranceThrowsIAE(-1.0, -0.00001, -0.0);\n","\n","    // You know what's worse than zero? Negative zero.\n","\n","    isWithinNegativeToleranceThrowsIAE(+0.0, -0.0, +0.0);\n","    isWithinNegativeToleranceThrowsIAE(+0.0, -0.0, -0.0);\n","    isWithinNegativeToleranceThrowsIAE(-0.0, -0.0, +0.0);\n","    isWithinNegativeToleranceThrowsIAE(-0.0, -0.0, -0.0);\n","\n","    isNotWithinNegativeToleranceThrowsIAE(+1.0, -0.0, +0.0);\n","    isNotWithinNegativeToleranceThrowsIAE(+1.0, -0.0, -0.0);\n","    isNotWithinNegativeToleranceThrowsIAE(-1.0, -0.0, +0.0);\n","    isNotWithinNegativeToleranceThrowsIAE(-1.0, -0.0, -0.0);\n","  }\n","\n","  private static void isWithinNegativeToleranceThrowsIAE(\n","      double actual, double tolerance, double expected) {\n","    try {\n","      assertThat(actual).isWithin(tolerance).of(expected);\n","      fail(\"Expected IllegalArgumentException to be thrown but wasn't\");\n","    } catch (IllegalArgumentException iae) {\n","      assertThat(iae)\n","          .hasMessageThat()\n","          .isEqualTo(\"tolerance (\" + tolerance + \") cannot be negative\");\n","    }\n","  }\n","\n","  private static void isNotWithinNegativeToleranceThrowsIAE(\n","      double actual, double tolerance, double expected) {\n","    try {\n","      assertThat(actual).isNotWithin(tolerance).of(expected);\n","      fail(\"Expected IllegalArgumentException to be thrown but wasn't\");\n","    } catch (IllegalArgumentException iae) {\n","      assertThat(iae)\n","          .hasMessageThat()\n","          .isEqualTo(\"tolerance (\" + tolerance + \") cannot be negative\");\n","    }\n","  }\n","\n","  @Test\n","  public void nanTolerances() {\n","    try {\n","      assertThat(1.0).isWithin(Double.NaN).of(1.0);\n","      fail(\"Expected IllegalArgumentException to be thrown but wasn't\");\n","    } catch (IllegalArgumentException iae) {\n","      assertThat(iae).hasMessageThat().isEqualTo(\"tolerance cannot be NaN\");\n","    }\n","    try {\n","      assertThat(1.0).isNotWithin(Double.NaN).of(2.0);\n","      fail(\"Expected IllegalArgumentException to be thrown but wasn't\");\n","    } catch (IllegalArgumentException iae) {\n","      assertThat(iae).hasMessageThat().isEqualTo(\"tolerance cannot be NaN\");\n","    }\n","  }\n","\n","  @Test\n","  public void infiniteTolerances() {\n","    try {\n","      assertThat(1.0).isWithin(Double.POSITIVE_INFINITY).of(1.0);\n","      fail(\"Expected IllegalArgumentException to be thrown but wasn't\");\n","    } catch (IllegalArgumentException iae) {\n","      assertThat(iae).hasMessageThat().isEqualTo(\"tolerance cannot be POSITIVE_INFINITY\");\n","    }\n","    try {\n","      assertThat(1.0).isNotWithin(Double.POSITIVE_INFINITY).of(2.0);\n","      fail(\"Expected IllegalArgumentException to be thrown but wasn't\");\n","    } catch (IllegalArgumentException iae) {\n","      assertThat(iae).hasMessageThat().isEqualTo(\"tolerance cannot be POSITIVE_INFINITY\");\n","    }\n","  }\n","\n","  @Test\n","  public void isWithinOfZero() {\n","    assertThat(+0.0).isWithin(0.00001).of(+0.0);\n","    assertThat(+0.0).isWithin(0.00001).of(-0.0);\n","    assertThat(-0.0).isWithin(0.00001).of(+0.0);\n","    assertThat(-0.0).isWithin(0.00001).of(-0.0);\n","\n","    assertThat(+0.0).isWithin(0.0).of(+0.0);\n","    assertThat(+0.0).isWithin(0.0).of(-0.0);\n","    assertThat(-0.0).isWithin(0.0).of(+0.0);\n","    assertThat(-0.0).isWithin(0.0).of(-0.0);\n","  }\n","\n","  @Test\n","  public void isNotWithinOfZero() {\n","    assertThat(+0.0).isNotWithin(0.00001).of(+1.0);\n","    assertThat(+0.0).isNotWithin(0.00001).of(-1.0);\n","    assertThat(-0.0).isNotWithin(0.00001).of(+1.0);\n","    assertThat(-0.0).isNotWithin(0.00001).of(-1.0);\n","\n","    assertThat(+1.0).isNotWithin(0.00001).of(+0.0);\n","    assertThat(+1.0).isNotWithin(0.00001).of(-0.0);\n","    assertThat(-1.0).isNotWithin(0.00001).of(+0.0);\n","    assertThat(-1.0).isNotWithin(0.00001).of(-0.0);\n","\n","    assertThat(+1.0).isNotWithin(0.0).of(+0.0);\n","    assertThat(+1.0).isNotWithin(0.0).of(-0.0);\n","    assertThat(-1.0).isNotWithin(0.0).of(+0.0);\n","    assertThat(-1.0).isNotWithin(0.0).of(-0.0);\n","\n","    assertThatIsNotWithinFails(-0.0, 0.0, 0.0);\n","  }\n","\n","  @Test\n","  public void isWithinZeroTolerance() {\n","    double max = Double.MAX_VALUE;\n","    assertThat(max).isWithin(0.0).of(max);\n","    assertThat(NEARLY_MAX).isWithin(0.0).of(NEARLY_MAX);\n","    assertThatIsWithinFails(max, 0.0, NEARLY_MAX);\n","    assertThatIsWithinFails(NEARLY_MAX, 0.0, max);\n","\n","    double negativeMax = -1.0 * Double.MAX_VALUE;\n","    assertThat(negativeMax).isWithin(0.0).of(negativeMax);\n","    assertThat(NEGATIVE_NEARLY_MAX).isWithin(0.0).of(NEGATIVE_NEARLY_MAX);\n","    assertThatIsWithinFails(negativeMax, 0.0, NEGATIVE_NEARLY_MAX);\n","    assertThatIsWithinFails(NEGATIVE_NEARLY_MAX, 0.0, negativeMax);\n","\n","    double min = Double.MIN_VALUE;\n","    assertThat(min).isWithin(0.0).of(min);\n","    assertThat(OVER_MIN).isWithin(0.0).of(OVER_MIN);\n","    assertThatIsWithinFails(min, 0.0, OVER_MIN);\n","    assertThatIsWithinFails(OVER_MIN, 0.0, min);\n","\n","    double negativeMin = -1.0 * Double.MIN_VALUE;\n","    assertThat(negativeMin).isWithin(0.0).of(negativeMin);\n","    assertThat(UNDER_NEGATIVE_MIN).isWithin(0.0).of(UNDER_NEGATIVE_MIN);\n","    assertThatIsWithinFails(negativeMin, 0.0, UNDER_NEGATIVE_MIN);\n","    assertThatIsWithinFails(UNDER_NEGATIVE_MIN, 0.0, negativeMin);\n","  }\n","\n","  @Test\n","  public void isNotWithinZeroTolerance() {\n","    double max = Double.MAX_VALUE;\n","    assertThatIsNotWithinFails(max, 0.0, max);\n","    assertThatIsNotWithinFails(NEARLY_MAX, 0.0, NEARLY_MAX);\n","    assertThat(max).isNotWithin(0.0).of(NEARLY_MAX);\n","    assertThat(NEARLY_MAX).isNotWithin(0.0).of(max);\n","\n","    double min = Double.MIN_VALUE;\n","    assertThatIsNotWithinFails(min, 0.0, min);\n","    assertThatIsNotWithinFails(OVER_MIN, 0.0, OVER_MIN);\n","    assertThat(min).isNotWithin(0.0).of(OVER_MIN);\n","    assertThat(OVER_MIN).isNotWithin(0.0).of(min);\n","  }\n","\n","  @Test\n","  public void isWithinNonFinite() {\n","    assertThatIsWithinFails(Double.NaN, 0.00001, Double.NaN);\n","    assertThatIsWithinFails(Double.NaN, 0.00001, Double.POSITIVE_INFINITY);\n","    assertThatIsWithinFails(Double.NaN, 0.00001, Double.NEGATIVE_INFINITY);\n","    assertThatIsWithinFails(Double.NaN, 0.00001, +0.0);\n","    assertThatIsWithinFails(Double.NaN, 0.00001, -0.0);\n","    assertThatIsWithinFails(Double.NaN, 0.00001, +1.0);\n","    assertThatIsWithinFails(Double.NaN, 0.00001, -0.0);\n","    assertThatIsWithinFails(Double.POSITIVE_INFINITY, 0.00001, Double.POSITIVE_INFINITY);\n","    assertThatIsWithinFails(Double.POSITIVE_INFINITY, 0.00001, Double.NEGATIVE_INFINITY);\n","    assertThatIsWithinFails(Double.POSITIVE_INFINITY, 0.00001, +0.0);\n","    assertThatIsWithinFails(Double.POSITIVE_INFINITY, 0.00001, -0.0);\n","    assertThatIsWithinFails(Double.POSITIVE_INFINITY, 0.00001, +1.0);\n","    assertThatIsWithinFails(Double.POSITIVE_INFINITY, 0.00001, -0.0);\n","    assertThatIsWithinFails(Double.NEGATIVE_INFINITY, 0.00001, Double.NEGATIVE_INFINITY);\n","    assertThatIsWithinFails(Double.NEGATIVE_INFINITY, 0.00001, +0.0);\n","    assertThatIsWithinFails(Double.NEGATIVE_INFINITY, 0.00001, -0.0);\n","    assertThatIsWithinFails(Double.NEGATIVE_INFINITY, 0.00001, +1.0);\n","    assertThatIsWithinFails(Double.NEGATIVE_INFINITY, 0.00001, -0.0);\n","    assertThatIsWithinFails(+1.0, 0.00001, Double.NaN);\n","    assertThatIsWithinFails(+1.0, 0.00001, Double.POSITIVE_INFINITY);\n","    assertThatIsWithinFails(+1.0, 0.00001, Double.NEGATIVE_INFINITY);\n","  }\n","\n","  @Test\n","  public void isNotWithinNonFinite() {\n","    assertThatIsNotWithinFails(Double.NaN, 0.00001, Double.NaN);\n","    assertThatIsNotWithinFails(Double.NaN, 0.00001, Double.POSITIVE_INFINITY);\n","    assertThatIsNotWithinFails(Double.NaN, 0.00001, Double.NEGATIVE_INFINITY);\n","    assertThatIsNotWithinFails(Double.NaN, 0.00001, +0.0);\n","    assertThatIsNotWithinFails(Double.NaN, 0.00001, -0.0);\n","    assertThatIsNotWithinFails(Double.NaN, 0.00001, +1.0);\n","    assertThatIsNotWithinFails(Double.NaN, 0.00001, -0.0);\n","    assertThatIsNotWithinFails(Double.POSITIVE_INFINITY, 0.00001, Double.POSITIVE_INFINITY);\n","    assertThatIsNotWithinFails(Double.POSITIVE_INFINITY, 0.00001, Double.NEGATIVE_INFINITY);\n","    assertThatIsNotWithinFails(Double.POSITIVE_INFINITY, 0.00001, +0.0);\n","    assertThatIsNotWithinFails(Double.POSITIVE_INFINITY, 0.00001, -0.0);\n","    assertThatIsNotWithinFails(Double.POSITIVE_INFINITY, 0.00001, +1.0);\n","    assertThatIsNotWithinFails(Double.POSITIVE_INFINITY, 0.00001, -0.0);\n","    assertThatIsNotWithinFails(Double.NEGATIVE_INFINITY, 0.00001, Double.NEGATIVE_INFINITY);\n","    assertThatIsNotWithinFails(Double.NEGATIVE_INFINITY, 0.00001, +0.0);\n","    assertThatIsNotWithinFails(Double.NEGATIVE_INFINITY, 0.00001, -0.0);\n","    assertThatIsNotWithinFails(Double.NEGATIVE_INFINITY, 0.00001, +1.0);\n","    assertThatIsNotWithinFails(Double.NEGATIVE_INFINITY, 0.00001, -0.0);\n","    assertThatIsNotWithinFails(+1.0, 0.00001, Double.NaN);\n","    assertThatIsNotWithinFails(+1.0, 0.00001, Double.POSITIVE_INFINITY);\n","    assertThatIsNotWithinFails(+1.0, 0.00001, Double.NEGATIVE_INFINITY);\n","  }\n","\n","  @SuppressWarnings(\"TruthSelfEquals\")\n","  @Test\n","  public void isEqualTo() {\n","    assertThat(1.23).isEqualTo(1.23);\n","    assertThatIsEqualToFails(GOLDEN, OVER_GOLDEN);\n","    assertThat(Double.POSITIVE_INFINITY).isEqualTo(Double.POSITIVE_INFINITY);\n","    assertThat(Double.NaN).isEqualTo(Double.NaN);\n","    assertThat((Double) null).isEqualTo(null);\n","    assertThat(1.0).isEqualTo(1);\n","  }\n","\n","  private static void assertThatIsEqualToFails(double actual, double expected) {\n","    ExpectFailure.SimpleSubjectBuilderCallback<DoubleSubject, Double> callback =\n","        new ExpectFailure.SimpleSubjectBuilderCallback<DoubleSubject, Double>() {\n","          @Override\n","          public void invokeAssertion(SimpleSubjectBuilder<DoubleSubject, Double> expect) {\n","            expect.that(actual).isEqualTo(expected);\n","          }\n","        };\n","    expectFailure(callback);\n","  }\n","\n","  @Test\n","  public void isNotEqualTo() {\n","    assertThatIsNotEqualToFails(1.23);\n","    assertThat(GOLDEN).isNotEqualTo(OVER_GOLDEN);\n","    assertThatIsNotEqualToFails(Double.POSITIVE_INFINITY);\n","    assertThatIsNotEqualToFails(Double.NaN);\n","    assertThat(-0.0).isNotEqualTo(0.0);\n","    assertThatIsNotEqualToFails(null);\n","    assertThat(1.23).isNotEqualTo(1.23f);\n","    assertThat(1.0).isNotEqualTo(2);\n","  }\n","\n","  private static void assertThatIsNotEqualToFails(@Nullable Double value) {\n","    ExpectFailure.SimpleSubjectBuilderCallback<DoubleSubject, Double> callback =\n","        new ExpectFailure.SimpleSubjectBuilderCallback<DoubleSubject, Double>() {\n","          @Override\n","          public void invokeAssertion(SimpleSubjectBuilder<DoubleSubject, Double> expect) {\n","            expect.that(value).isNotEqualTo(value);\n","          }\n","        };\n","    expectFailure(callback);\n","  }\n","\n","  @Test\n","  public void isZero() {\n","    assertThat(0.0).isZero();\n","    assertThat(-0.0).isZero();\n","    assertThatIsZeroFails(Double.MIN_VALUE);\n","    assertThatIsZeroFails(-1.23);\n","    assertThatIsZeroFails(Double.POSITIVE_INFINITY);\n","    assertThatIsZeroFails(Double.NaN);\n","    assertThatIsZeroFails(null);\n","  }\n","\n","  private static void assertThatIsZeroFails(@Nullable Double value) {\n","    ExpectFailure.SimpleSubjectBuilderCallback<DoubleSubject, Double> callback =\n","        new ExpectFailure.SimpleSubjectBuilderCallback<DoubleSubject, Double>() {\n","          @Override\n","          public void invokeAssertion(SimpleSubjectBuilder<DoubleSubject, Double> expect) {\n","            expect.that(value).isZero();\n","          }\n","        };\n","    AssertionError failure = expectFailure(callback);\n","    assertThat(failure).factKeys().containsExactly(\"expected zero\", \"but was\").inOrder();\n","  }\n","\n","  @Test\n","  public void isNonZero() {\n","    assertThatIsNonZeroFails(0.0, \"expected not to be zero\");\n","    assertThatIsNonZeroFails(-0.0, \"expected not to be zero\");\n","    assertThat(Double.MIN_VALUE).isNonZero();\n","    assertThat(-1.23).isNonZero();\n","    assertThat(Double.POSITIVE_INFINITY).isNonZero();\n","    assertThat(Double.NaN).isNonZero();\n","    assertThatIsNonZeroFails(null, \"expected a double other than zero\");\n","  }\n","\n","  private static void assertThatIsNonZeroFails(@Nullable Double value, String factKey) {\n","    ExpectFailure.SimpleSubjectBuilderCallback<DoubleSubject, Double> callback =\n","        new ExpectFailure.SimpleSubjectBuilderCallback<DoubleSubject, Double>() {\n","          @Override\n","          public void invokeAssertion(SimpleSubjectBuilder<DoubleSubject, Double> expect) {\n","            expect.that(value).isNonZero();\n","          }\n","        };\n","    AssertionError failure = expectFailure(callback);\n","    assertThat(failure).factKeys().containsExactly(factKey, \"but was\").inOrder();\n","  }\n","\n","  @Test\n","  public void isPositiveInfinity() {\n","    assertThat(Double.POSITIVE_INFINITY).isPositiveInfinity();\n","    assertThatIsPositiveInfinityFails(1.23);\n","    assertThatIsPositiveInfinityFails(Double.NEGATIVE_INFINITY);\n","    assertThatIsPositiveInfinityFails(Double.NaN);\n","    assertThatIsPositiveInfinityFails(null);\n","  }\n","\n","  private static void assertThatIsPositiveInfinityFails(@Nullable Double value) {\n","    ExpectFailure.SimpleSubjectBuilderCallback<DoubleSubject, Double> callback =\n","        new ExpectFailure.SimpleSubjectBuilderCallback<DoubleSubject, Double>() {\n","          @Override\n","          public void invokeAssertion(SimpleSubjectBuilder<DoubleSubject, Double> expect) {\n","            expect.that(value).isPositiveInfinity();\n","          }\n","        };\n","    expectFailure(callback);\n","  }\n","\n","  @Test\n","  public void isNegativeInfinity() {\n","    assertThat(Double.NEGATIVE_INFINITY).isNegativeInfinity();\n","    assertThatIsNegativeInfinityFails(1.23);\n","    assertThatIsNegativeInfinityFails(Double.POSITIVE_INFINITY);\n","    assertThatIsNegativeInfinityFails(Double.NaN);\n","    assertThatIsNegativeInfinityFails(null);\n","  }\n","\n","  private static void assertThatIsNegativeInfinityFails(@Nullable Double value) {\n","    ExpectFailure.SimpleSubjectBuilderCallback<DoubleSubject, Double> callback =\n","        new ExpectFailure.SimpleSubjectBuilderCallback<DoubleSubject, Double>() {\n","          @Override\n","          public void invokeAssertion(SimpleSubjectBuilder<DoubleSubject, Double> expect) {\n","            expect.that(value).isNegativeInfinity();\n","          }\n","        };\n","    expectFailure(callback);\n","  }\n","\n","  @Test\n","  public void isNaN() {\n","    assertThat(Double.NaN).isNaN();\n","    assertThatIsNaNFails(1.23);\n","    assertThatIsNaNFails(Double.POSITIVE_INFINITY);\n","    assertThatIsNaNFails(Double.NEGATIVE_INFINITY);\n","    assertThatIsNaNFails(null);\n","  }\n","\n","  private static void assertThatIsNaNFails(@Nullable Double value) {\n","    ExpectFailure.SimpleSubjectBuilderCallback<DoubleSubject, Double> callback =\n","        new ExpectFailure.SimpleSubjectBuilderCallback<DoubleSubject, Double>() {\n","          @Override\n","          public void invokeAssertion(SimpleSubjectBuilder<DoubleSubject, Double> expect) {\n","            expect.that(value).isNaN();\n","          }\n","        };\n","    expectFailure(callback);\n","  }\n","\n","  @Test\n","  public void isFinite() {\n","    assertThat(1.23).isFinite();\n","    assertThat(Double.MAX_VALUE).isFinite();\n","    assertThat(-1.0 * Double.MIN_VALUE).isFinite();\n","    assertThatIsFiniteFails(Double.POSITIVE_INFINITY);\n","    assertThatIsFiniteFails(Double.NEGATIVE_INFINITY);\n","    assertThatIsFiniteFails(Double.NaN);\n","    assertThatIsFiniteFails(null);\n","  }\n","\n","  private static void assertThatIsFiniteFails(@Nullable Double value) {\n","    ExpectFailure.SimpleSubjectBuilderCallback<DoubleSubject, Double> callback =\n","        new ExpectFailure.SimpleSubjectBuilderCallback<DoubleSubject, Double>() {\n","          @Override\n","          public void invokeAssertion(SimpleSubjectBuilder<DoubleSubject, Double> expect) {\n","            expect.that(value).isFinite();\n","          }\n","        };\n","    AssertionError failure = expectFailure(callback);\n","    assertThat(failure).factKeys().containsExactly(\"expected to be finite\", \"but was\").inOrder();\n","  }\n","\n","  @Test\n","  public void isNotNaN() {\n","    assertThat(1.23).isNotNaN();\n","    assertThat(Double.MAX_VALUE).isNotNaN();\n","    assertThat(-1.0 * Double.MIN_VALUE).isNotNaN();\n","    assertThat(Double.POSITIVE_INFINITY).isNotNaN();\n","    assertThat(Double.NEGATIVE_INFINITY).isNotNaN();\n","  }\n","\n","  @Test\n","  public void isNotNaNIsNaN() {\n","    expectFailureWhenTestingThat(Double.NaN).isNotNaN();\n","  }\n","\n","  @Test\n","  public void isNotNaNIsNull() {\n","    expectFailureWhenTestingThat(null).isNotNaN();\n","    assertFailureKeys(\"expected a double other than NaN\", \"but was\");\n","  }\n","\n","  @Test\n","  public void isGreaterThan_int_strictly() {\n","    expectFailureWhenTestingThat(2.0).isGreaterThan(3);\n","  }\n","\n","  @Test\n","  public void isGreaterThan_int() {\n","    expectFailureWhenTestingThat(2.0).isGreaterThan(2);\n","    assertThat(2.0).isGreaterThan(1);\n","  }\n","\n","  @Test\n","  public void isLessThan_int_strictly() {\n","    expectFailureWhenTestingThat(2.0).isLessThan(1);\n","  }\n","\n","  @Test\n","  public void isLessThan_int() {\n","    expectFailureWhenTestingThat(2.0).isLessThan(2);\n","    assertThat(2.0).isLessThan(3);\n","  }\n","\n","  @Test\n","  public void isAtLeast_int() {\n","    expectFailureWhenTestingThat(2.0).isAtLeast(3);\n","    assertThat(2.0).isAtLeast(2);\n","    assertThat(2.0).isAtLeast(1);\n","  }\n","\n","  @Test\n","  public void isAtMost_int() {\n","    expectFailureWhenTestingThat(2.0).isAtMost(1);\n","    assertThat(2.0).isAtMost(2);\n","    assertThat(2.0).isAtMost(3);\n","  }\n","\n","  private DoubleSubject expectFailureWhenTestingThat(Double actual) {\n","    return expectFailure.whenTesting().that(actual);\n","  }\n","}\n"],"method_lines_dic":{"DoubleSubject.TolerantDoubleComparison::::of(double)":[60,60],"DoubleSubject.TolerantDoubleComparison::::equals(java.lang.Object)":[67,72],"DoubleSubject.TolerantDoubleComparison::::hashCode()":[78,82],"DoubleSubject::::isWithin(double)":[107,124],"DoubleSubject::::isNotWithin(double)":[146,163],"DoubleSubject::::isEqualTo(java.lang.Object)":[180,183],"DoubleSubject::::isNotEqualTo(java.lang.Object)":[194,197],"DoubleSubject::::isEquivalentAccordingToCompareTo(java.lang.Double)":[202,206],"DoubleSubject::::checkTolerance(double)":[212,220],"DoubleSubject::::isZero()":[223,227],"DoubleSubject::::isNonZero()":[233,239],"DoubleSubject::::isPositiveInfinity()":[242,244],"DoubleSubject::::isNegativeInfinity()":[247,249],"DoubleSubject::::isNaN()":[252,254],"DoubleSubject::::isFinite()":[260,264],"DoubleSubject::::isNotNaN()":[270,276],"DoubleSubject::::isGreaterThan(int)":[284,286],"DoubleSubject::::isLessThan(int)":[294,296],"DoubleSubject::::isAtMost(int)":[304,306],"DoubleSubject::::isAtLeast(int)":[314,316]},"test_method_lines_dic":{"DoubleSubjectTest::::testDoubleConstants_matchNextAfter()":[60,68],"DoubleSubjectTest::::testJ2clCornerCaseZero()":[70,74],"DoubleSubjectTest::::testJ2clCornerCaseDoubleVsFloat()":[76,83],"DoubleSubjectTest::::isWithinOf()":[85,97],"DoubleSubjectTest::::assertThatIsWithinFails(double,double,double)":[99,115],"DoubleSubjectTest::::isNotWithinOf()":[117,129],"DoubleSubjectTest::::assertThatIsNotWithinFails(double,double,double)":[131,142],"DoubleSubjectTest::::negativeTolerances()":[144,178],"DoubleSubjectTest::::isWithinNegativeToleranceThrowsIAE(double,double,double)":[180,190],"DoubleSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(double,double,double)":[192,202],"DoubleSubjectTest::::nanTolerances()":[204,218],"DoubleSubjectTest::::infiniteTolerances()":[220,234],"DoubleSubjectTest::::isWithinOfZero()":[236,247],"DoubleSubjectTest::::isNotWithinOfZero()":[249,267],"DoubleSubjectTest::::isWithinZeroTolerance()":[269,294],"DoubleSubjectTest::::isNotWithinZeroTolerance()":[296,309],"DoubleSubjectTest::::isWithinNonFinite()":[311,334],"DoubleSubjectTest::::isNotWithinNonFinite()":[336,359],"DoubleSubjectTest::::isEqualTo()":[361,370],"DoubleSubjectTest::::assertThatIsEqualToFails(double,double)":[372,381],"DoubleSubjectTest::::isNotEqualTo()":[383,393],"DoubleSubjectTest::::assertThatIsNotEqualToFails(java.lang.Double)":[395,404],"DoubleSubjectTest::::isZero()":[406,415],"DoubleSubjectTest::::assertThatIsZeroFails(java.lang.Double)":[417,427],"DoubleSubjectTest::::isNonZero()":[429,438],"DoubleSubjectTest::::assertThatIsNonZeroFails(java.lang.Double,java.lang.String)":[440,450],"DoubleSubjectTest::::isPositiveInfinity()":[452,459],"DoubleSubjectTest::::assertThatIsPositiveInfinityFails(java.lang.Double)":[461,470],"DoubleSubjectTest::::isNegativeInfinity()":[472,479],"DoubleSubjectTest::::assertThatIsNegativeInfinityFails(java.lang.Double)":[481,490],"DoubleSubjectTest::::isNaN()":[492,499],"DoubleSubjectTest::::assertThatIsNaNFails(java.lang.Double)":[501,510],"DoubleSubjectTest::::isFinite()":[512,521],"DoubleSubjectTest::::assertThatIsFiniteFails(java.lang.Double)":[523,533],"DoubleSubjectTest::::isNotNaN()":[535,542],"DoubleSubjectTest::::isNotNaNIsNaN()":[544,547],"DoubleSubjectTest::::isNotNaNIsNull()":[549,553],"DoubleSubjectTest::::isGreaterThan_int_strictly()":[555,558],"DoubleSubjectTest::::isGreaterThan_int()":[560,564],"DoubleSubjectTest::::isLessThan_int_strictly()":[566,569],"DoubleSubjectTest::::isLessThan_int()":[571,575],"DoubleSubjectTest::::isAtLeast_int()":[577,582],"DoubleSubjectTest::::isAtMost_int()":[584,589],"DoubleSubjectTest::::expectFailureWhenTestingThat(java.lang.Double)":[591,593]},"reverse_method_lines_dic":{"60":"DoubleSubject.TolerantDoubleComparison::::of(double)","67":"DoubleSubject.TolerantDoubleComparison::::equals(java.lang.Object)","68":"DoubleSubject.TolerantDoubleComparison::::equals(java.lang.Object)","69":"DoubleSubject.TolerantDoubleComparison::::equals(java.lang.Object)","70":"DoubleSubject.TolerantDoubleComparison::::equals(java.lang.Object)","71":"DoubleSubject.TolerantDoubleComparison::::equals(java.lang.Object)","72":"DoubleSubject.TolerantDoubleComparison::::equals(java.lang.Object)","78":"DoubleSubject.TolerantDoubleComparison::::hashCode()","79":"DoubleSubject.TolerantDoubleComparison::::hashCode()","80":"DoubleSubject.TolerantDoubleComparison::::hashCode()","81":"DoubleSubject.TolerantDoubleComparison::::hashCode()","82":"DoubleSubject.TolerantDoubleComparison::::hashCode()","107":"DoubleSubject::::isWithin(double)","108":"DoubleSubject::::isWithin(double)","109":"DoubleSubject::::isWithin(double)","110":"DoubleSubject::::isWithin(double)","111":"DoubleSubject::::isWithin(double)","112":"DoubleSubject::::isWithin(double)","113":"DoubleSubject::::isWithin(double)","114":"DoubleSubject::::isWithin(double)","115":"DoubleSubject::::isWithin(double)","116":"DoubleSubject::::isWithin(double)","117":"DoubleSubject::::isWithin(double)","118":"DoubleSubject::::isWithin(double)","119":"DoubleSubject::::isWithin(double)","120":"DoubleSubject::::isWithin(double)","121":"DoubleSubject::::isWithin(double)","122":"DoubleSubject::::isWithin(double)","123":"DoubleSubject::::isWithin(double)","124":"DoubleSubject::::isWithin(double)","146":"DoubleSubject::::isNotWithin(double)","147":"DoubleSubject::::isNotWithin(double)","148":"DoubleSubject::::isNotWithin(double)","149":"DoubleSubject::::isNotWithin(double)","150":"DoubleSubject::::isNotWithin(double)","151":"DoubleSubject::::isNotWithin(double)","152":"DoubleSubject::::isNotWithin(double)","153":"DoubleSubject::::isNotWithin(double)","154":"DoubleSubject::::isNotWithin(double)","155":"DoubleSubject::::isNotWithin(double)","156":"DoubleSubject::::isNotWithin(double)","157":"DoubleSubject::::isNotWithin(double)","158":"DoubleSubject::::isNotWithin(double)","159":"DoubleSubject::::isNotWithin(double)","160":"DoubleSubject::::isNotWithin(double)","161":"DoubleSubject::::isNotWithin(double)","162":"DoubleSubject::::isNotWithin(double)","163":"DoubleSubject::::isNotWithin(double)","180":"DoubleSubject::::isEqualTo(java.lang.Object)","181":"DoubleSubject::::isEqualTo(java.lang.Object)","182":"DoubleSubject::::isEqualTo(java.lang.Object)","183":"DoubleSubject::::isEqualTo(java.lang.Object)","194":"DoubleSubject::::isNotEqualTo(java.lang.Object)","195":"DoubleSubject::::isNotEqualTo(java.lang.Object)","196":"DoubleSubject::::isNotEqualTo(java.lang.Object)","197":"DoubleSubject::::isNotEqualTo(java.lang.Object)","202":"DoubleSubject::::isEquivalentAccordingToCompareTo(java.lang.Double)","203":"DoubleSubject::::isEquivalentAccordingToCompareTo(java.lang.Double)","204":"DoubleSubject::::isEquivalentAccordingToCompareTo(java.lang.Double)","205":"DoubleSubject::::isEquivalentAccordingToCompareTo(java.lang.Double)","206":"DoubleSubject::::isEquivalentAccordingToCompareTo(java.lang.Double)","212":"DoubleSubject::::checkTolerance(double)","213":"DoubleSubject::::checkTolerance(double)","214":"DoubleSubject::::checkTolerance(double)","215":"DoubleSubject::::checkTolerance(double)","216":"DoubleSubject::::checkTolerance(double)","217":"DoubleSubject::::checkTolerance(double)","218":"DoubleSubject::::checkTolerance(double)","219":"DoubleSubject::::checkTolerance(double)","220":"DoubleSubject::::checkTolerance(double)","223":"DoubleSubject::::isZero()","224":"DoubleSubject::::isZero()","225":"DoubleSubject::::isZero()","226":"DoubleSubject::::isZero()","227":"DoubleSubject::::isZero()","233":"DoubleSubject::::isNonZero()","234":"DoubleSubject::::isNonZero()","235":"DoubleSubject::::isNonZero()","236":"DoubleSubject::::isNonZero()","237":"DoubleSubject::::isNonZero()","238":"DoubleSubject::::isNonZero()","239":"DoubleSubject::::isNonZero()","242":"DoubleSubject::::isPositiveInfinity()","243":"DoubleSubject::::isPositiveInfinity()","244":"DoubleSubject::::isPositiveInfinity()","247":"DoubleSubject::::isNegativeInfinity()","248":"DoubleSubject::::isNegativeInfinity()","249":"DoubleSubject::::isNegativeInfinity()","252":"DoubleSubject::::isNaN()","253":"DoubleSubject::::isNaN()","254":"DoubleSubject::::isNaN()","260":"DoubleSubject::::isFinite()","261":"DoubleSubject::::isFinite()","262":"DoubleSubject::::isFinite()","263":"DoubleSubject::::isFinite()","264":"DoubleSubject::::isFinite()","270":"DoubleSubject::::isNotNaN()","271":"DoubleSubject::::isNotNaN()","272":"DoubleSubject::::isNotNaN()","273":"DoubleSubject::::isNotNaN()","274":"DoubleSubject::::isNotNaN()","275":"DoubleSubject::::isNotNaN()","276":"DoubleSubject::::isNotNaN()","284":"DoubleSubject::::isGreaterThan(int)","285":"DoubleSubject::::isGreaterThan(int)","286":"DoubleSubject::::isGreaterThan(int)","294":"DoubleSubject::::isLessThan(int)","295":"DoubleSubject::::isLessThan(int)","296":"DoubleSubject::::isLessThan(int)","304":"DoubleSubject::::isAtMost(int)","305":"DoubleSubject::::isAtMost(int)","306":"DoubleSubject::::isAtMost(int)","314":"DoubleSubject::::isAtLeast(int)","315":"DoubleSubject::::isAtLeast(int)","316":"DoubleSubject::::isAtLeast(int)"},"test_reverse_method_lines_dic":{"60":"DoubleSubjectTest::::testDoubleConstants_matchNextAfter()","61":"DoubleSubjectTest::::testDoubleConstants_matchNextAfter()","62":"DoubleSubjectTest::::testDoubleConstants_matchNextAfter()","63":"DoubleSubjectTest::::testDoubleConstants_matchNextAfter()","64":"DoubleSubjectTest::::testDoubleConstants_matchNextAfter()","65":"DoubleSubjectTest::::testDoubleConstants_matchNextAfter()","66":"DoubleSubjectTest::::testDoubleConstants_matchNextAfter()","67":"DoubleSubjectTest::::testDoubleConstants_matchNextAfter()","68":"DoubleSubjectTest::::testDoubleConstants_matchNextAfter()","70":"DoubleSubjectTest::::testJ2clCornerCaseZero()","71":"DoubleSubjectTest::::testJ2clCornerCaseZero()","72":"DoubleSubjectTest::::testJ2clCornerCaseZero()","73":"DoubleSubjectTest::::testJ2clCornerCaseZero()","74":"DoubleSubjectTest::::testJ2clCornerCaseZero()","76":"DoubleSubjectTest::::testJ2clCornerCaseDoubleVsFloat()","77":"DoubleSubjectTest::::testJ2clCornerCaseDoubleVsFloat()","78":"DoubleSubjectTest::::testJ2clCornerCaseDoubleVsFloat()","79":"DoubleSubjectTest::::testJ2clCornerCaseDoubleVsFloat()","80":"DoubleSubjectTest::::testJ2clCornerCaseDoubleVsFloat()","81":"DoubleSubjectTest::::testJ2clCornerCaseDoubleVsFloat()","82":"DoubleSubjectTest::::testJ2clCornerCaseDoubleVsFloat()","83":"DoubleSubjectTest::::testJ2clCornerCaseDoubleVsFloat()","85":"DoubleSubjectTest::::isWithinOf()","86":"DoubleSubjectTest::::isWithinOf()","87":"DoubleSubjectTest::::isWithinOf()","88":"DoubleSubjectTest::::isWithinOf()","89":"DoubleSubjectTest::::isWithinOf()","90":"DoubleSubjectTest::::isWithinOf()","91":"DoubleSubjectTest::::isWithinOf()","92":"DoubleSubjectTest::::isWithinOf()","93":"DoubleSubjectTest::::isWithinOf()","94":"DoubleSubjectTest::::isWithinOf()","95":"DoubleSubjectTest::::isWithinOf()","96":"DoubleSubjectTest::::isWithinOf()","97":"DoubleSubjectTest::::isWithinOf()","99":"DoubleSubjectTest::::assertThatIsWithinFails(double,double,double)","100":"DoubleSubjectTest::::assertThatIsWithinFails(double,double,double)","101":"DoubleSubjectTest::::assertThatIsWithinFails(double,double,double)","102":"DoubleSubjectTest::::assertThatIsWithinFails(double,double,double)","103":"DoubleSubjectTest::::assertThatIsWithinFails(double,double,double)","104":"DoubleSubjectTest::::assertThatIsWithinFails(double,double,double)","105":"DoubleSubjectTest::::assertThatIsWithinFails(double,double,double)","106":"DoubleSubjectTest::::assertThatIsWithinFails(double,double,double)","107":"DoubleSubjectTest::::assertThatIsWithinFails(double,double,double)","108":"DoubleSubjectTest::::assertThatIsWithinFails(double,double,double)","109":"DoubleSubjectTest::::assertThatIsWithinFails(double,double,double)","110":"DoubleSubjectTest::::assertThatIsWithinFails(double,double,double)","111":"DoubleSubjectTest::::assertThatIsWithinFails(double,double,double)","112":"DoubleSubjectTest::::assertThatIsWithinFails(double,double,double)","113":"DoubleSubjectTest::::assertThatIsWithinFails(double,double,double)","114":"DoubleSubjectTest::::assertThatIsWithinFails(double,double,double)","115":"DoubleSubjectTest::::assertThatIsWithinFails(double,double,double)","117":"DoubleSubjectTest::::isNotWithinOf()","118":"DoubleSubjectTest::::isNotWithinOf()","119":"DoubleSubjectTest::::isNotWithinOf()","120":"DoubleSubjectTest::::isNotWithinOf()","121":"DoubleSubjectTest::::isNotWithinOf()","122":"DoubleSubjectTest::::isNotWithinOf()","123":"DoubleSubjectTest::::isNotWithinOf()","124":"DoubleSubjectTest::::isNotWithinOf()","125":"DoubleSubjectTest::::isNotWithinOf()","126":"DoubleSubjectTest::::isNotWithinOf()","127":"DoubleSubjectTest::::isNotWithinOf()","128":"DoubleSubjectTest::::isNotWithinOf()","129":"DoubleSubjectTest::::isNotWithinOf()","131":"DoubleSubjectTest::::assertThatIsNotWithinFails(double,double,double)","132":"DoubleSubjectTest::::assertThatIsNotWithinFails(double,double,double)","133":"DoubleSubjectTest::::assertThatIsNotWithinFails(double,double,double)","134":"DoubleSubjectTest::::assertThatIsNotWithinFails(double,double,double)","135":"DoubleSubjectTest::::assertThatIsNotWithinFails(double,double,double)","136":"DoubleSubjectTest::::assertThatIsNotWithinFails(double,double,double)","137":"DoubleSubjectTest::::assertThatIsNotWithinFails(double,double,double)","138":"DoubleSubjectTest::::assertThatIsNotWithinFails(double,double,double)","139":"DoubleSubjectTest::::assertThatIsNotWithinFails(double,double,double)","140":"DoubleSubjectTest::::assertThatIsNotWithinFails(double,double,double)","141":"DoubleSubjectTest::::assertThatIsNotWithinFails(double,double,double)","142":"DoubleSubjectTest::::assertThatIsNotWithinFails(double,double,double)","144":"DoubleSubjectTest::::negativeTolerances()","145":"DoubleSubjectTest::::negativeTolerances()","146":"DoubleSubjectTest::::negativeTolerances()","147":"DoubleSubjectTest::::negativeTolerances()","148":"DoubleSubjectTest::::negativeTolerances()","149":"DoubleSubjectTest::::negativeTolerances()","150":"DoubleSubjectTest::::negativeTolerances()","151":"DoubleSubjectTest::::negativeTolerances()","152":"DoubleSubjectTest::::negativeTolerances()","153":"DoubleSubjectTest::::negativeTolerances()","154":"DoubleSubjectTest::::negativeTolerances()","155":"DoubleSubjectTest::::negativeTolerances()","156":"DoubleSubjectTest::::negativeTolerances()","157":"DoubleSubjectTest::::negativeTolerances()","158":"DoubleSubjectTest::::negativeTolerances()","159":"DoubleSubjectTest::::negativeTolerances()","160":"DoubleSubjectTest::::negativeTolerances()","161":"DoubleSubjectTest::::negativeTolerances()","162":"DoubleSubjectTest::::negativeTolerances()","163":"DoubleSubjectTest::::negativeTolerances()","164":"DoubleSubjectTest::::negativeTolerances()","165":"DoubleSubjectTest::::negativeTolerances()","166":"DoubleSubjectTest::::negativeTolerances()","167":"DoubleSubjectTest::::negativeTolerances()","168":"DoubleSubjectTest::::negativeTolerances()","169":"DoubleSubjectTest::::negativeTolerances()","170":"DoubleSubjectTest::::negativeTolerances()","171":"DoubleSubjectTest::::negativeTolerances()","172":"DoubleSubjectTest::::negativeTolerances()","173":"DoubleSubjectTest::::negativeTolerances()","174":"DoubleSubjectTest::::negativeTolerances()","175":"DoubleSubjectTest::::negativeTolerances()","176":"DoubleSubjectTest::::negativeTolerances()","177":"DoubleSubjectTest::::negativeTolerances()","178":"DoubleSubjectTest::::negativeTolerances()","180":"DoubleSubjectTest::::isWithinNegativeToleranceThrowsIAE(double,double,double)","181":"DoubleSubjectTest::::isWithinNegativeToleranceThrowsIAE(double,double,double)","182":"DoubleSubjectTest::::isWithinNegativeToleranceThrowsIAE(double,double,double)","183":"DoubleSubjectTest::::isWithinNegativeToleranceThrowsIAE(double,double,double)","184":"DoubleSubjectTest::::isWithinNegativeToleranceThrowsIAE(double,double,double)","185":"DoubleSubjectTest::::isWithinNegativeToleranceThrowsIAE(double,double,double)","186":"DoubleSubjectTest::::isWithinNegativeToleranceThrowsIAE(double,double,double)","187":"DoubleSubjectTest::::isWithinNegativeToleranceThrowsIAE(double,double,double)","188":"DoubleSubjectTest::::isWithinNegativeToleranceThrowsIAE(double,double,double)","189":"DoubleSubjectTest::::isWithinNegativeToleranceThrowsIAE(double,double,double)","190":"DoubleSubjectTest::::isWithinNegativeToleranceThrowsIAE(double,double,double)","192":"DoubleSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(double,double,double)","193":"DoubleSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(double,double,double)","194":"DoubleSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(double,double,double)","195":"DoubleSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(double,double,double)","196":"DoubleSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(double,double,double)","197":"DoubleSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(double,double,double)","198":"DoubleSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(double,double,double)","199":"DoubleSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(double,double,double)","200":"DoubleSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(double,double,double)","201":"DoubleSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(double,double,double)","202":"DoubleSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(double,double,double)","204":"DoubleSubjectTest::::nanTolerances()","205":"DoubleSubjectTest::::nanTolerances()","206":"DoubleSubjectTest::::nanTolerances()","207":"DoubleSubjectTest::::nanTolerances()","208":"DoubleSubjectTest::::nanTolerances()","209":"DoubleSubjectTest::::nanTolerances()","210":"DoubleSubjectTest::::nanTolerances()","211":"DoubleSubjectTest::::nanTolerances()","212":"DoubleSubjectTest::::nanTolerances()","213":"DoubleSubjectTest::::nanTolerances()","214":"DoubleSubjectTest::::nanTolerances()","215":"DoubleSubjectTest::::nanTolerances()","216":"DoubleSubjectTest::::nanTolerances()","217":"DoubleSubjectTest::::nanTolerances()","218":"DoubleSubjectTest::::nanTolerances()","220":"DoubleSubjectTest::::infiniteTolerances()","221":"DoubleSubjectTest::::infiniteTolerances()","222":"DoubleSubjectTest::::infiniteTolerances()","223":"DoubleSubjectTest::::infiniteTolerances()","224":"DoubleSubjectTest::::infiniteTolerances()","225":"DoubleSubjectTest::::infiniteTolerances()","226":"DoubleSubjectTest::::infiniteTolerances()","227":"DoubleSubjectTest::::infiniteTolerances()","228":"DoubleSubjectTest::::infiniteTolerances()","229":"DoubleSubjectTest::::infiniteTolerances()","230":"DoubleSubjectTest::::infiniteTolerances()","231":"DoubleSubjectTest::::infiniteTolerances()","232":"DoubleSubjectTest::::infiniteTolerances()","233":"DoubleSubjectTest::::infiniteTolerances()","234":"DoubleSubjectTest::::infiniteTolerances()","236":"DoubleSubjectTest::::isWithinOfZero()","237":"DoubleSubjectTest::::isWithinOfZero()","238":"DoubleSubjectTest::::isWithinOfZero()","239":"DoubleSubjectTest::::isWithinOfZero()","240":"DoubleSubjectTest::::isWithinOfZero()","241":"DoubleSubjectTest::::isWithinOfZero()","242":"DoubleSubjectTest::::isWithinOfZero()","243":"DoubleSubjectTest::::isWithinOfZero()","244":"DoubleSubjectTest::::isWithinOfZero()","245":"DoubleSubjectTest::::isWithinOfZero()","246":"DoubleSubjectTest::::isWithinOfZero()","247":"DoubleSubjectTest::::isWithinOfZero()","249":"DoubleSubjectTest::::isNotWithinOfZero()","250":"DoubleSubjectTest::::isNotWithinOfZero()","251":"DoubleSubjectTest::::isNotWithinOfZero()","252":"DoubleSubjectTest::::isNotWithinOfZero()","253":"DoubleSubjectTest::::isNotWithinOfZero()","254":"DoubleSubjectTest::::isNotWithinOfZero()","255":"DoubleSubjectTest::::isNotWithinOfZero()","256":"DoubleSubjectTest::::isNotWithinOfZero()","257":"DoubleSubjectTest::::isNotWithinOfZero()","258":"DoubleSubjectTest::::isNotWithinOfZero()","259":"DoubleSubjectTest::::isNotWithinOfZero()","260":"DoubleSubjectTest::::isNotWithinOfZero()","261":"DoubleSubjectTest::::isNotWithinOfZero()","262":"DoubleSubjectTest::::isNotWithinOfZero()","263":"DoubleSubjectTest::::isNotWithinOfZero()","264":"DoubleSubjectTest::::isNotWithinOfZero()","265":"DoubleSubjectTest::::isNotWithinOfZero()","266":"DoubleSubjectTest::::isNotWithinOfZero()","267":"DoubleSubjectTest::::isNotWithinOfZero()","269":"DoubleSubjectTest::::isWithinZeroTolerance()","270":"DoubleSubjectTest::::isWithinZeroTolerance()","271":"DoubleSubjectTest::::isWithinZeroTolerance()","272":"DoubleSubjectTest::::isWithinZeroTolerance()","273":"DoubleSubjectTest::::isWithinZeroTolerance()","274":"DoubleSubjectTest::::isWithinZeroTolerance()","275":"DoubleSubjectTest::::isWithinZeroTolerance()","276":"DoubleSubjectTest::::isWithinZeroTolerance()","277":"DoubleSubjectTest::::isWithinZeroTolerance()","278":"DoubleSubjectTest::::isWithinZeroTolerance()","279":"DoubleSubjectTest::::isWithinZeroTolerance()","280":"DoubleSubjectTest::::isWithinZeroTolerance()","281":"DoubleSubjectTest::::isWithinZeroTolerance()","282":"DoubleSubjectTest::::isWithinZeroTolerance()","283":"DoubleSubjectTest::::isWithinZeroTolerance()","284":"DoubleSubjectTest::::isWithinZeroTolerance()","285":"DoubleSubjectTest::::isWithinZeroTolerance()","286":"DoubleSubjectTest::::isWithinZeroTolerance()","287":"DoubleSubjectTest::::isWithinZeroTolerance()","288":"DoubleSubjectTest::::isWithinZeroTolerance()","289":"DoubleSubjectTest::::isWithinZeroTolerance()","290":"DoubleSubjectTest::::isWithinZeroTolerance()","291":"DoubleSubjectTest::::isWithinZeroTolerance()","292":"DoubleSubjectTest::::isWithinZeroTolerance()","293":"DoubleSubjectTest::::isWithinZeroTolerance()","294":"DoubleSubjectTest::::isWithinZeroTolerance()","296":"DoubleSubjectTest::::isNotWithinZeroTolerance()","297":"DoubleSubjectTest::::isNotWithinZeroTolerance()","298":"DoubleSubjectTest::::isNotWithinZeroTolerance()","299":"DoubleSubjectTest::::isNotWithinZeroTolerance()","300":"DoubleSubjectTest::::isNotWithinZeroTolerance()","301":"DoubleSubjectTest::::isNotWithinZeroTolerance()","302":"DoubleSubjectTest::::isNotWithinZeroTolerance()","303":"DoubleSubjectTest::::isNotWithinZeroTolerance()","304":"DoubleSubjectTest::::isNotWithinZeroTolerance()","305":"DoubleSubjectTest::::isNotWithinZeroTolerance()","306":"DoubleSubjectTest::::isNotWithinZeroTolerance()","307":"DoubleSubjectTest::::isNotWithinZeroTolerance()","308":"DoubleSubjectTest::::isNotWithinZeroTolerance()","309":"DoubleSubjectTest::::isNotWithinZeroTolerance()","311":"DoubleSubjectTest::::isWithinNonFinite()","312":"DoubleSubjectTest::::isWithinNonFinite()","313":"DoubleSubjectTest::::isWithinNonFinite()","314":"DoubleSubjectTest::::isWithinNonFinite()","315":"DoubleSubjectTest::::isWithinNonFinite()","316":"DoubleSubjectTest::::isWithinNonFinite()","317":"DoubleSubjectTest::::isWithinNonFinite()","318":"DoubleSubjectTest::::isWithinNonFinite()","319":"DoubleSubjectTest::::isWithinNonFinite()","320":"DoubleSubjectTest::::isWithinNonFinite()","321":"DoubleSubjectTest::::isWithinNonFinite()","322":"DoubleSubjectTest::::isWithinNonFinite()","323":"DoubleSubjectTest::::isWithinNonFinite()","324":"DoubleSubjectTest::::isWithinNonFinite()","325":"DoubleSubjectTest::::isWithinNonFinite()","326":"DoubleSubjectTest::::isWithinNonFinite()","327":"DoubleSubjectTest::::isWithinNonFinite()","328":"DoubleSubjectTest::::isWithinNonFinite()","329":"DoubleSubjectTest::::isWithinNonFinite()","330":"DoubleSubjectTest::::isWithinNonFinite()","331":"DoubleSubjectTest::::isWithinNonFinite()","332":"DoubleSubjectTest::::isWithinNonFinite()","333":"DoubleSubjectTest::::isWithinNonFinite()","334":"DoubleSubjectTest::::isWithinNonFinite()","336":"DoubleSubjectTest::::isNotWithinNonFinite()","337":"DoubleSubjectTest::::isNotWithinNonFinite()","338":"DoubleSubjectTest::::isNotWithinNonFinite()","339":"DoubleSubjectTest::::isNotWithinNonFinite()","340":"DoubleSubjectTest::::isNotWithinNonFinite()","341":"DoubleSubjectTest::::isNotWithinNonFinite()","342":"DoubleSubjectTest::::isNotWithinNonFinite()","343":"DoubleSubjectTest::::isNotWithinNonFinite()","344":"DoubleSubjectTest::::isNotWithinNonFinite()","345":"DoubleSubjectTest::::isNotWithinNonFinite()","346":"DoubleSubjectTest::::isNotWithinNonFinite()","347":"DoubleSubjectTest::::isNotWithinNonFinite()","348":"DoubleSubjectTest::::isNotWithinNonFinite()","349":"DoubleSubjectTest::::isNotWithinNonFinite()","350":"DoubleSubjectTest::::isNotWithinNonFinite()","351":"DoubleSubjectTest::::isNotWithinNonFinite()","352":"DoubleSubjectTest::::isNotWithinNonFinite()","353":"DoubleSubjectTest::::isNotWithinNonFinite()","354":"DoubleSubjectTest::::isNotWithinNonFinite()","355":"DoubleSubjectTest::::isNotWithinNonFinite()","356":"DoubleSubjectTest::::isNotWithinNonFinite()","357":"DoubleSubjectTest::::isNotWithinNonFinite()","358":"DoubleSubjectTest::::isNotWithinNonFinite()","359":"DoubleSubjectTest::::isNotWithinNonFinite()","361":"DoubleSubjectTest::::isEqualTo()","362":"DoubleSubjectTest::::isEqualTo()","363":"DoubleSubjectTest::::isEqualTo()","364":"DoubleSubjectTest::::isEqualTo()","365":"DoubleSubjectTest::::isEqualTo()","366":"DoubleSubjectTest::::isEqualTo()","367":"DoubleSubjectTest::::isEqualTo()","368":"DoubleSubjectTest::::isEqualTo()","369":"DoubleSubjectTest::::isEqualTo()","370":"DoubleSubjectTest::::isEqualTo()","372":"DoubleSubjectTest::::assertThatIsEqualToFails(double,double)","373":"DoubleSubjectTest::::assertThatIsEqualToFails(double,double)","374":"DoubleSubjectTest::::assertThatIsEqualToFails(double,double)","375":"DoubleSubjectTest::::assertThatIsEqualToFails(double,double)","376":"DoubleSubjectTest::::assertThatIsEqualToFails(double,double)","377":"DoubleSubjectTest::::assertThatIsEqualToFails(double,double)","378":"DoubleSubjectTest::::assertThatIsEqualToFails(double,double)","379":"DoubleSubjectTest::::assertThatIsEqualToFails(double,double)","380":"DoubleSubjectTest::::assertThatIsEqualToFails(double,double)","381":"DoubleSubjectTest::::assertThatIsEqualToFails(double,double)","383":"DoubleSubjectTest::::isNotEqualTo()","384":"DoubleSubjectTest::::isNotEqualTo()","385":"DoubleSubjectTest::::isNotEqualTo()","386":"DoubleSubjectTest::::isNotEqualTo()","387":"DoubleSubjectTest::::isNotEqualTo()","388":"DoubleSubjectTest::::isNotEqualTo()","389":"DoubleSubjectTest::::isNotEqualTo()","390":"DoubleSubjectTest::::isNotEqualTo()","391":"DoubleSubjectTest::::isNotEqualTo()","392":"DoubleSubjectTest::::isNotEqualTo()","393":"DoubleSubjectTest::::isNotEqualTo()","395":"DoubleSubjectTest::::assertThatIsNotEqualToFails(java.lang.Double)","396":"DoubleSubjectTest::::assertThatIsNotEqualToFails(java.lang.Double)","397":"DoubleSubjectTest::::assertThatIsNotEqualToFails(java.lang.Double)","398":"DoubleSubjectTest::::assertThatIsNotEqualToFails(java.lang.Double)","399":"DoubleSubjectTest::::assertThatIsNotEqualToFails(java.lang.Double)","400":"DoubleSubjectTest::::assertThatIsNotEqualToFails(java.lang.Double)","401":"DoubleSubjectTest::::assertThatIsNotEqualToFails(java.lang.Double)","402":"DoubleSubjectTest::::assertThatIsNotEqualToFails(java.lang.Double)","403":"DoubleSubjectTest::::assertThatIsNotEqualToFails(java.lang.Double)","404":"DoubleSubjectTest::::assertThatIsNotEqualToFails(java.lang.Double)","406":"DoubleSubjectTest::::isZero()","407":"DoubleSubjectTest::::isZero()","408":"DoubleSubjectTest::::isZero()","409":"DoubleSubjectTest::::isZero()","410":"DoubleSubjectTest::::isZero()","411":"DoubleSubjectTest::::isZero()","412":"DoubleSubjectTest::::isZero()","413":"DoubleSubjectTest::::isZero()","414":"DoubleSubjectTest::::isZero()","415":"DoubleSubjectTest::::isZero()","417":"DoubleSubjectTest::::assertThatIsZeroFails(java.lang.Double)","418":"DoubleSubjectTest::::assertThatIsZeroFails(java.lang.Double)","419":"DoubleSubjectTest::::assertThatIsZeroFails(java.lang.Double)","420":"DoubleSubjectTest::::assertThatIsZeroFails(java.lang.Double)","421":"DoubleSubjectTest::::assertThatIsZeroFails(java.lang.Double)","422":"DoubleSubjectTest::::assertThatIsZeroFails(java.lang.Double)","423":"DoubleSubjectTest::::assertThatIsZeroFails(java.lang.Double)","424":"DoubleSubjectTest::::assertThatIsZeroFails(java.lang.Double)","425":"DoubleSubjectTest::::assertThatIsZeroFails(java.lang.Double)","426":"DoubleSubjectTest::::assertThatIsZeroFails(java.lang.Double)","427":"DoubleSubjectTest::::assertThatIsZeroFails(java.lang.Double)","429":"DoubleSubjectTest::::isNonZero()","430":"DoubleSubjectTest::::isNonZero()","431":"DoubleSubjectTest::::isNonZero()","432":"DoubleSubjectTest::::isNonZero()","433":"DoubleSubjectTest::::isNonZero()","434":"DoubleSubjectTest::::isNonZero()","435":"DoubleSubjectTest::::isNonZero()","436":"DoubleSubjectTest::::isNonZero()","437":"DoubleSubjectTest::::isNonZero()","438":"DoubleSubjectTest::::isNonZero()","440":"DoubleSubjectTest::::assertThatIsNonZeroFails(java.lang.Double,java.lang.String)","441":"DoubleSubjectTest::::assertThatIsNonZeroFails(java.lang.Double,java.lang.String)","442":"DoubleSubjectTest::::assertThatIsNonZeroFails(java.lang.Double,java.lang.String)","443":"DoubleSubjectTest::::assertThatIsNonZeroFails(java.lang.Double,java.lang.String)","444":"DoubleSubjectTest::::assertThatIsNonZeroFails(java.lang.Double,java.lang.String)","445":"DoubleSubjectTest::::assertThatIsNonZeroFails(java.lang.Double,java.lang.String)","446":"DoubleSubjectTest::::assertThatIsNonZeroFails(java.lang.Double,java.lang.String)","447":"DoubleSubjectTest::::assertThatIsNonZeroFails(java.lang.Double,java.lang.String)","448":"DoubleSubjectTest::::assertThatIsNonZeroFails(java.lang.Double,java.lang.String)","449":"DoubleSubjectTest::::assertThatIsNonZeroFails(java.lang.Double,java.lang.String)","450":"DoubleSubjectTest::::assertThatIsNonZeroFails(java.lang.Double,java.lang.String)","452":"DoubleSubjectTest::::isPositiveInfinity()","453":"DoubleSubjectTest::::isPositiveInfinity()","454":"DoubleSubjectTest::::isPositiveInfinity()","455":"DoubleSubjectTest::::isPositiveInfinity()","456":"DoubleSubjectTest::::isPositiveInfinity()","457":"DoubleSubjectTest::::isPositiveInfinity()","458":"DoubleSubjectTest::::isPositiveInfinity()","459":"DoubleSubjectTest::::isPositiveInfinity()","461":"DoubleSubjectTest::::assertThatIsPositiveInfinityFails(java.lang.Double)","462":"DoubleSubjectTest::::assertThatIsPositiveInfinityFails(java.lang.Double)","463":"DoubleSubjectTest::::assertThatIsPositiveInfinityFails(java.lang.Double)","464":"DoubleSubjectTest::::assertThatIsPositiveInfinityFails(java.lang.Double)","465":"DoubleSubjectTest::::assertThatIsPositiveInfinityFails(java.lang.Double)","466":"DoubleSubjectTest::::assertThatIsPositiveInfinityFails(java.lang.Double)","467":"DoubleSubjectTest::::assertThatIsPositiveInfinityFails(java.lang.Double)","468":"DoubleSubjectTest::::assertThatIsPositiveInfinityFails(java.lang.Double)","469":"DoubleSubjectTest::::assertThatIsPositiveInfinityFails(java.lang.Double)","470":"DoubleSubjectTest::::assertThatIsPositiveInfinityFails(java.lang.Double)","472":"DoubleSubjectTest::::isNegativeInfinity()","473":"DoubleSubjectTest::::isNegativeInfinity()","474":"DoubleSubjectTest::::isNegativeInfinity()","475":"DoubleSubjectTest::::isNegativeInfinity()","476":"DoubleSubjectTest::::isNegativeInfinity()","477":"DoubleSubjectTest::::isNegativeInfinity()","478":"DoubleSubjectTest::::isNegativeInfinity()","479":"DoubleSubjectTest::::isNegativeInfinity()","481":"DoubleSubjectTest::::assertThatIsNegativeInfinityFails(java.lang.Double)","482":"DoubleSubjectTest::::assertThatIsNegativeInfinityFails(java.lang.Double)","483":"DoubleSubjectTest::::assertThatIsNegativeInfinityFails(java.lang.Double)","484":"DoubleSubjectTest::::assertThatIsNegativeInfinityFails(java.lang.Double)","485":"DoubleSubjectTest::::assertThatIsNegativeInfinityFails(java.lang.Double)","486":"DoubleSubjectTest::::assertThatIsNegativeInfinityFails(java.lang.Double)","487":"DoubleSubjectTest::::assertThatIsNegativeInfinityFails(java.lang.Double)","488":"DoubleSubjectTest::::assertThatIsNegativeInfinityFails(java.lang.Double)","489":"DoubleSubjectTest::::assertThatIsNegativeInfinityFails(java.lang.Double)","490":"DoubleSubjectTest::::assertThatIsNegativeInfinityFails(java.lang.Double)","492":"DoubleSubjectTest::::isNaN()","493":"DoubleSubjectTest::::isNaN()","494":"DoubleSubjectTest::::isNaN()","495":"DoubleSubjectTest::::isNaN()","496":"DoubleSubjectTest::::isNaN()","497":"DoubleSubjectTest::::isNaN()","498":"DoubleSubjectTest::::isNaN()","499":"DoubleSubjectTest::::isNaN()","501":"DoubleSubjectTest::::assertThatIsNaNFails(java.lang.Double)","502":"DoubleSubjectTest::::assertThatIsNaNFails(java.lang.Double)","503":"DoubleSubjectTest::::assertThatIsNaNFails(java.lang.Double)","504":"DoubleSubjectTest::::assertThatIsNaNFails(java.lang.Double)","505":"DoubleSubjectTest::::assertThatIsNaNFails(java.lang.Double)","506":"DoubleSubjectTest::::assertThatIsNaNFails(java.lang.Double)","507":"DoubleSubjectTest::::assertThatIsNaNFails(java.lang.Double)","508":"DoubleSubjectTest::::assertThatIsNaNFails(java.lang.Double)","509":"DoubleSubjectTest::::assertThatIsNaNFails(java.lang.Double)","510":"DoubleSubjectTest::::assertThatIsNaNFails(java.lang.Double)","512":"DoubleSubjectTest::::isFinite()","513":"DoubleSubjectTest::::isFinite()","514":"DoubleSubjectTest::::isFinite()","515":"DoubleSubjectTest::::isFinite()","516":"DoubleSubjectTest::::isFinite()","517":"DoubleSubjectTest::::isFinite()","518":"DoubleSubjectTest::::isFinite()","519":"DoubleSubjectTest::::isFinite()","520":"DoubleSubjectTest::::isFinite()","521":"DoubleSubjectTest::::isFinite()","523":"DoubleSubjectTest::::assertThatIsFiniteFails(java.lang.Double)","524":"DoubleSubjectTest::::assertThatIsFiniteFails(java.lang.Double)","525":"DoubleSubjectTest::::assertThatIsFiniteFails(java.lang.Double)","526":"DoubleSubjectTest::::assertThatIsFiniteFails(java.lang.Double)","527":"DoubleSubjectTest::::assertThatIsFiniteFails(java.lang.Double)","528":"DoubleSubjectTest::::assertThatIsFiniteFails(java.lang.Double)","529":"DoubleSubjectTest::::assertThatIsFiniteFails(java.lang.Double)","530":"DoubleSubjectTest::::assertThatIsFiniteFails(java.lang.Double)","531":"DoubleSubjectTest::::assertThatIsFiniteFails(java.lang.Double)","532":"DoubleSubjectTest::::assertThatIsFiniteFails(java.lang.Double)","533":"DoubleSubjectTest::::assertThatIsFiniteFails(java.lang.Double)","535":"DoubleSubjectTest::::isNotNaN()","536":"DoubleSubjectTest::::isNotNaN()","537":"DoubleSubjectTest::::isNotNaN()","538":"DoubleSubjectTest::::isNotNaN()","539":"DoubleSubjectTest::::isNotNaN()","540":"DoubleSubjectTest::::isNotNaN()","541":"DoubleSubjectTest::::isNotNaN()","542":"DoubleSubjectTest::::isNotNaN()","544":"DoubleSubjectTest::::isNotNaNIsNaN()","545":"DoubleSubjectTest::::isNotNaNIsNaN()","546":"DoubleSubjectTest::::isNotNaNIsNaN()","547":"DoubleSubjectTest::::isNotNaNIsNaN()","549":"DoubleSubjectTest::::isNotNaNIsNull()","550":"DoubleSubjectTest::::isNotNaNIsNull()","551":"DoubleSubjectTest::::isNotNaNIsNull()","552":"DoubleSubjectTest::::isNotNaNIsNull()","553":"DoubleSubjectTest::::isNotNaNIsNull()","555":"DoubleSubjectTest::::isGreaterThan_int_strictly()","556":"DoubleSubjectTest::::isGreaterThan_int_strictly()","557":"DoubleSubjectTest::::isGreaterThan_int_strictly()","558":"DoubleSubjectTest::::isGreaterThan_int_strictly()","560":"DoubleSubjectTest::::isGreaterThan_int()","561":"DoubleSubjectTest::::isGreaterThan_int()","562":"DoubleSubjectTest::::isGreaterThan_int()","563":"DoubleSubjectTest::::isGreaterThan_int()","564":"DoubleSubjectTest::::isGreaterThan_int()","566":"DoubleSubjectTest::::isLessThan_int_strictly()","567":"DoubleSubjectTest::::isLessThan_int_strictly()","568":"DoubleSubjectTest::::isLessThan_int_strictly()","569":"DoubleSubjectTest::::isLessThan_int_strictly()","571":"DoubleSubjectTest::::isLessThan_int()","572":"DoubleSubjectTest::::isLessThan_int()","573":"DoubleSubjectTest::::isLessThan_int()","574":"DoubleSubjectTest::::isLessThan_int()","575":"DoubleSubjectTest::::isLessThan_int()","577":"DoubleSubjectTest::::isAtLeast_int()","578":"DoubleSubjectTest::::isAtLeast_int()","579":"DoubleSubjectTest::::isAtLeast_int()","580":"DoubleSubjectTest::::isAtLeast_int()","581":"DoubleSubjectTest::::isAtLeast_int()","582":"DoubleSubjectTest::::isAtLeast_int()","584":"DoubleSubjectTest::::isAtMost_int()","585":"DoubleSubjectTest::::isAtMost_int()","586":"DoubleSubjectTest::::isAtMost_int()","587":"DoubleSubjectTest::::isAtMost_int()","588":"DoubleSubjectTest::::isAtMost_int()","589":"DoubleSubjectTest::::isAtMost_int()","591":"DoubleSubjectTest::::expectFailureWhenTestingThat(java.lang.Double)","592":"DoubleSubjectTest::::expectFailureWhenTestingThat(java.lang.Double)","593":"DoubleSubjectTest::::expectFailureWhenTestingThat(java.lang.Double)"},"tests":[{"test_lines":[60,68],"covered_lines":[37,42,43,44,182,183],"label":"DoubleSubject::::isEqualTo(java.lang.Object)"},{"test_lines":[70,74],"covered_lines":[37,42,43,44,182,183],"label":"DoubleSubject::::isEqualTo(java.lang.Object)"},{"test_lines":[76,83],"covered_lines":[37,42,43,44,182,183],"label":"DoubleSubject::::isEqualTo(java.lang.Object)"},{"test_lines":[85,97],"covered_lines":[37,42,43,44,53,108,111,112,113,114,116,117,118,119,120,122,213,214,215,216,218,219,220],"label":"DoubleSubject::::isWithin(double)"},{"test_lines":[117,129],"covered_lines":[37,42,43,44,53,147,150,151,152,153,155,156,157,158,159,161,213,214,215,216,218,219,220],"label":"DoubleSubject::::isNotWithin(double)"},{"test_lines":[144,178],"covered_lines":[37,42,43,44,53,108,111,112,113,147,150,151,152,213,214,215,216,218],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[204,218],"covered_lines":[37,42,43,44,53,108,111,112,113,147,150,151,152,213],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[220,234],"covered_lines":[37,42,43,44,53,108,111,112,113,147,150,151,152,213,214,215,216,218,219],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[236,247],"covered_lines":[37,42,43,44,53,108,111,112,113,114,116,122,213,214,215,216,218,219,220],"label":"DoubleSubject::::isWithin(double)"},{"test_lines":[249,267],"covered_lines":[37,42,43,44,53,147,150,151,152,153,155,156,157,158,159,161,213,214,215,216,218,219,220],"label":"DoubleSubject::::isNotWithin(double)"},{"test_lines":[269,294],"covered_lines":[37,42,43,44,53,108,111,112,113,114,116,117,118,119,120,122,213,214,215,216,218,219,220],"label":"DoubleSubject::::isWithin(double)"},{"test_lines":[296,309],"covered_lines":[37,42,43,44,53,147,150,151,152,153,155,156,157,158,159,161,213,214,215,216,218,219,220],"label":"DoubleSubject::::isNotWithin(double)"},{"test_lines":[311,334],"covered_lines":[37,42,43,44,53,108,111,112,113,114,116,117,118,119,120,122,213,214,215,216,218,219,220],"label":"DoubleSubject::::isWithin(double)"},{"test_lines":[336,359],"covered_lines":[37,42,43,44,53,147,150,151,152,153,155,156,157,158,159,161,213,214,215,216,218,219,220],"label":"DoubleSubject::::isNotWithin(double)"},{"test_lines":[361,370],"covered_lines":[37,42,43,44,182,183],"label":"DoubleSubject::::isEqualTo(java.lang.Object)"},{"test_lines":[383,393],"covered_lines":[37,42,43,44,196,197],"label":"DoubleSubject::::isNotEqualTo(java.lang.Object)"},{"test_lines":[406,415],"covered_lines":[37,42,43,44,224,225,227],"label":"DoubleSubject::::isZero()"},{"test_lines":[429,438],"covered_lines":[37,42,43,44,234,235,236,237,239],"label":"DoubleSubject::::isNonZero()"},{"test_lines":[452,459],"covered_lines":[37,42,43,44,182,183,243,244],"label":"DoubleSubject::::isPositiveInfinity()"},{"test_lines":[472,479],"covered_lines":[37,42,43,44,182,183,248,249],"label":"DoubleSubject::::isNegativeInfinity()"},{"test_lines":[492,499],"covered_lines":[37,42,43,44,182,183,253,254],"label":"DoubleSubject::::isNaN()"},{"test_lines":[512,521],"covered_lines":[37,42,43,44,261,262,264],"label":"DoubleSubject::::isFinite()"},{"test_lines":[535,542],"covered_lines":[37,42,43,44,196,197,271,274,276],"label":"DoubleSubject::::isNotNaN()"},{"test_lines":[544,547],"covered_lines":[37,42,43,44,196,197,271,274,276],"label":"DoubleSubject::::isNotNaN()"},{"test_lines":[549,553],"covered_lines":[37,42,43,44,271,272,276],"label":"DoubleSubject::::isNotNaN()"},{"test_lines":[555,558],"covered_lines":[37,42,43,44,285,286],"label":"DoubleSubject::::isGreaterThan(int)"},{"test_lines":[560,564],"covered_lines":[37,42,43,44,285,286],"label":"DoubleSubject::::isGreaterThan(int)"},{"test_lines":[566,569],"covered_lines":[37,42,43,44,295,296],"label":"DoubleSubject::::isLessThan(int)"},{"test_lines":[571,575],"covered_lines":[37,42,43,44,295,296],"label":"DoubleSubject::::isLessThan(int)"},{"test_lines":[577,582],"covered_lines":[37,42,43,44,315,316],"label":"DoubleSubject::::isAtLeast(int)"},{"test_lines":[584,589],"covered_lines":[37,42,43,44,305,306],"label":"DoubleSubject::::isAtMost(int)"}]},"/bernard/dataset_construction/prep/repos/truth/core/src/main/java/com/google/common/truth/PrimitiveLongArraySubject.java":{"class_content":["/*\n"," * Copyright (c) 2014 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.base.Preconditions.checkNotNull;\n","\n","import com.google.common.primitives.Longs;\n","import org.checkerframework.checker.nullness.qual.Nullable;\n","\n","/**\n"," * A Subject for {@code long[]}.\n"," *\n"," * @author Christian Gruber (cgruber@israfil.net)\n"," */\n","public final class PrimitiveLongArraySubject extends AbstractArraySubject {\n","  private final long @Nullable [] actual;\n","\n","  PrimitiveLongArraySubject(\n","      FailureMetadata metadata, long @Nullable [] o, @Nullable String typeDescription) {\n","    super(metadata, o, typeDescription);\n","    this.actual = o;\n","  }\n","\n","  public IterableSubject asList() {\n","    return checkNoNeedToDisplayBothValues(\"asList()\").that(Longs.asList(checkNotNull(actual)));\n","  }\n","}\n"],"test_content":["/*\n"," * Copyright (c) 2014 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.truth.Truth.assertThat;\n","\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import org.junit.runners.JUnit4;\n","\n","/**\n"," * Tests for {@link com.google.common.truth.PrimitiveLongArraySubject}.\n"," *\n"," * @author Christian Gruber (cgruber@israfil.net)\n"," */\n","@RunWith(JUnit4.class)\n","public class PrimitiveLongArraySubjectTest extends BaseSubjectTestCase {\n","\n","  @Test\n","  public void isEqualTo() {\n","    assertThat(array(2L, 5)).isEqualTo(array(2L, 5));\n","  }\n","\n","  @SuppressWarnings(\"TruthSelfEquals\")\n","  @Test\n","  public void isEqualTo_Same() {\n","    long[] same = array(2L, 5);\n","    assertThat(same).isEqualTo(same);\n","  }\n","\n","  @Test\n","  public void asList() {\n","    assertThat(array(5, 2, 9)).asList().containsAtLeast(2L, 9L);\n","  }\n","\n","  @Test\n","  public void isEqualTo_Fail_UnequalOrdering() {\n","    expectFailureWhenTestingThat(array(2, 3)).isEqualTo(array(3, 2));\n","    assertFailureKeys(\"expected\", \"but was\", \"differs at index\");\n","    assertFailureValue(\"expected\", \"[3, 2]\");\n","    assertFailureValue(\"but was\", \"[2, 3]\");\n","    assertFailureValue(\"differs at index\", \"[0]\");\n","  }\n","\n","  @Test\n","  public void isEqualTo_Fail_NotAnArray() {\n","    expectFailureWhenTestingThat(array(2, 3, 4)).isEqualTo(new int[] {});\n","    assertFailureKeys(\"expected\", \"but was\", \"wrong type\", \"expected\", \"but was\");\n","    assertFailureValueIndexed(\"expected\", 1, \"int[]\");\n","    assertFailureValueIndexed(\"but was\", 1, \"long[]\");\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_SameLengths() {\n","    assertThat(array(2, 3)).isNotEqualTo(array(3, 2));\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_DifferentLengths() {\n","    assertThat(array(2, 3)).isNotEqualTo(array(2, 3, 1));\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_DifferentTypes() {\n","    assertThat(array(2, 3)).isNotEqualTo(new Object());\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_FailEquals() {\n","    expectFailureWhenTestingThat(array(2, 3)).isNotEqualTo(array(2, 3));\n","  }\n","\n","  @SuppressWarnings(\"TruthSelfEquals\")\n","  @Test\n","  public void isNotEqualTo_FailSame() {\n","    long[] same = array(2, 3);\n","    expectFailureWhenTestingThat(same).isNotEqualTo(same);\n","  }\n","\n","  private static long[] array(long... ts) {\n","    return ts;\n","  }\n","\n","  private PrimitiveLongArraySubject expectFailureWhenTestingThat(long[] actual) {\n","    return expectFailure.whenTesting().that(actual);\n","  }\n","}\n"],"method_lines_dic":{"PrimitiveLongArraySubject::::asList()":[37,39]},"test_method_lines_dic":{"PrimitiveLongArraySubjectTest::::isEqualTo()":[32,35],"PrimitiveLongArraySubjectTest::::isEqualTo_Same()":[37,42],"PrimitiveLongArraySubjectTest::::asList()":[44,47],"PrimitiveLongArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()":[49,56],"PrimitiveLongArraySubjectTest::::isEqualTo_Fail_NotAnArray()":[58,64],"PrimitiveLongArraySubjectTest::::isNotEqualTo_SameLengths()":[66,69],"PrimitiveLongArraySubjectTest::::isNotEqualTo_DifferentLengths()":[71,74],"PrimitiveLongArraySubjectTest::::isNotEqualTo_DifferentTypes()":[76,79],"PrimitiveLongArraySubjectTest::::isNotEqualTo_FailEquals()":[81,84],"PrimitiveLongArraySubjectTest::::isNotEqualTo_FailSame()":[86,91],"PrimitiveLongArraySubjectTest::::array(long[])":[93,95],"PrimitiveLongArraySubjectTest::::expectFailureWhenTestingThat(long[])":[97,99]},"reverse_method_lines_dic":{"37":"PrimitiveLongArraySubject::::asList()","38":"PrimitiveLongArraySubject::::asList()","39":"PrimitiveLongArraySubject::::asList()"},"test_reverse_method_lines_dic":{"32":"PrimitiveLongArraySubjectTest::::isEqualTo()","33":"PrimitiveLongArraySubjectTest::::isEqualTo()","34":"PrimitiveLongArraySubjectTest::::isEqualTo()","35":"PrimitiveLongArraySubjectTest::::isEqualTo()","37":"PrimitiveLongArraySubjectTest::::isEqualTo_Same()","38":"PrimitiveLongArraySubjectTest::::isEqualTo_Same()","39":"PrimitiveLongArraySubjectTest::::isEqualTo_Same()","40":"PrimitiveLongArraySubjectTest::::isEqualTo_Same()","41":"PrimitiveLongArraySubjectTest::::isEqualTo_Same()","42":"PrimitiveLongArraySubjectTest::::isEqualTo_Same()","44":"PrimitiveLongArraySubjectTest::::asList()","45":"PrimitiveLongArraySubjectTest::::asList()","46":"PrimitiveLongArraySubjectTest::::asList()","47":"PrimitiveLongArraySubjectTest::::asList()","49":"PrimitiveLongArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","50":"PrimitiveLongArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","51":"PrimitiveLongArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","52":"PrimitiveLongArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","53":"PrimitiveLongArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","54":"PrimitiveLongArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","55":"PrimitiveLongArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","56":"PrimitiveLongArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","58":"PrimitiveLongArraySubjectTest::::isEqualTo_Fail_NotAnArray()","59":"PrimitiveLongArraySubjectTest::::isEqualTo_Fail_NotAnArray()","60":"PrimitiveLongArraySubjectTest::::isEqualTo_Fail_NotAnArray()","61":"PrimitiveLongArraySubjectTest::::isEqualTo_Fail_NotAnArray()","62":"PrimitiveLongArraySubjectTest::::isEqualTo_Fail_NotAnArray()","63":"PrimitiveLongArraySubjectTest::::isEqualTo_Fail_NotAnArray()","64":"PrimitiveLongArraySubjectTest::::isEqualTo_Fail_NotAnArray()","66":"PrimitiveLongArraySubjectTest::::isNotEqualTo_SameLengths()","67":"PrimitiveLongArraySubjectTest::::isNotEqualTo_SameLengths()","68":"PrimitiveLongArraySubjectTest::::isNotEqualTo_SameLengths()","69":"PrimitiveLongArraySubjectTest::::isNotEqualTo_SameLengths()","71":"PrimitiveLongArraySubjectTest::::isNotEqualTo_DifferentLengths()","72":"PrimitiveLongArraySubjectTest::::isNotEqualTo_DifferentLengths()","73":"PrimitiveLongArraySubjectTest::::isNotEqualTo_DifferentLengths()","74":"PrimitiveLongArraySubjectTest::::isNotEqualTo_DifferentLengths()","76":"PrimitiveLongArraySubjectTest::::isNotEqualTo_DifferentTypes()","77":"PrimitiveLongArraySubjectTest::::isNotEqualTo_DifferentTypes()","78":"PrimitiveLongArraySubjectTest::::isNotEqualTo_DifferentTypes()","79":"PrimitiveLongArraySubjectTest::::isNotEqualTo_DifferentTypes()","81":"PrimitiveLongArraySubjectTest::::isNotEqualTo_FailEquals()","82":"PrimitiveLongArraySubjectTest::::isNotEqualTo_FailEquals()","83":"PrimitiveLongArraySubjectTest::::isNotEqualTo_FailEquals()","84":"PrimitiveLongArraySubjectTest::::isNotEqualTo_FailEquals()","86":"PrimitiveLongArraySubjectTest::::isNotEqualTo_FailSame()","87":"PrimitiveLongArraySubjectTest::::isNotEqualTo_FailSame()","88":"PrimitiveLongArraySubjectTest::::isNotEqualTo_FailSame()","89":"PrimitiveLongArraySubjectTest::::isNotEqualTo_FailSame()","90":"PrimitiveLongArraySubjectTest::::isNotEqualTo_FailSame()","91":"PrimitiveLongArraySubjectTest::::isNotEqualTo_FailSame()","93":"PrimitiveLongArraySubjectTest::::array(long[])","94":"PrimitiveLongArraySubjectTest::::array(long[])","95":"PrimitiveLongArraySubjectTest::::array(long[])","97":"PrimitiveLongArraySubjectTest::::expectFailureWhenTestingThat(long[])","98":"PrimitiveLongArraySubjectTest::::expectFailureWhenTestingThat(long[])","99":"PrimitiveLongArraySubjectTest::::expectFailureWhenTestingThat(long[])"},"tests":[{"test_lines":[32,35],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[37,42],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[44,47],"covered_lines":[33,34,35,38],"label":"PrimitiveLongArraySubject::::asList()"},{"test_lines":[49,56],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[58,64],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[66,69],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[71,74],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[76,79],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[81,84],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[86,91],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/truth/core/src/main/java/com/google/common/truth/PrimitiveBooleanArraySubject.java":{"class_content":["/*\n"," * Copyright (c) 2014 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.base.Preconditions.checkNotNull;\n","\n","import com.google.common.primitives.Booleans;\n","import org.checkerframework.checker.nullness.qual.Nullable;\n","\n","/**\n"," * A Subject for {@code boolean[]}.\n"," *\n"," * @author Christian Gruber (cgruber@israfil.net)\n"," */\n","public final class PrimitiveBooleanArraySubject extends AbstractArraySubject {\n","  private final boolean @Nullable [] actual;\n","\n","  PrimitiveBooleanArraySubject(\n","      FailureMetadata metadata, boolean @Nullable [] o, @Nullable String typeDescription) {\n","    super(metadata, o, typeDescription);\n","    this.actual = o;\n","  }\n","\n","  public IterableSubject asList() {\n","    return checkNoNeedToDisplayBothValues(\"asList()\").that(Booleans.asList(checkNotNull(actual)));\n","  }\n","}\n"],"test_content":["/*\n"," * Copyright (c) 2014 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.truth.Truth.assertThat;\n","\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import org.junit.runners.JUnit4;\n","\n","/**\n"," * Tests for {@link com.google.common.truth.PrimitiveBooleanArraySubject}.\n"," *\n"," * @author Christian Gruber (cgruber@israfil.net)\n"," */\n","@RunWith(JUnit4.class)\n","public class PrimitiveBooleanArraySubjectTest extends BaseSubjectTestCase {\n","\n","  @Test\n","  public void isEqualTo() {\n","    assertThat(array(true, false, true)).isEqualTo(array(true, false, true));\n","  }\n","\n","  @SuppressWarnings(\"TruthSelfEquals\")\n","  @Test\n","  public void isEqualTo_Same() {\n","    boolean[] same = array(true, false, true);\n","    assertThat(same).isEqualTo(same);\n","  }\n","\n","  @Test\n","  public void asList() {\n","    assertThat(array(true, true, false)).asList().containsAtLeast(true, false);\n","  }\n","\n","  @Test\n","  public void isEqualTo_Fail_UnequalOrdering() {\n","    expectFailureWhenTestingThat(array(true, false, true)).isEqualTo(array(false, true, true));\n","    assertFailureValue(\"differs at index\", \"[0]\");\n","  }\n","\n","  @Test\n","  public void isEqualTo_Fail_NotAnArray() {\n","    expectFailureWhenTestingThat(array(true, false, true)).isEqualTo(new Object());\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_SameLengths() {\n","    assertThat(array(true, false)).isNotEqualTo(array(true, true));\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_DifferentLengths() {\n","    assertThat(array(true, false)).isNotEqualTo(array(true, false, true));\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_DifferentTypes() {\n","    assertThat(array(true, false)).isNotEqualTo(new Object());\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_FailEquals() {\n","    expectFailureWhenTestingThat(array(true, false)).isNotEqualTo(array(true, false));\n","  }\n","\n","  @SuppressWarnings(\"TruthSelfEquals\")\n","  @Test\n","  public void isNotEqualTo_FailSame() {\n","    boolean[] same = array(true, false);\n","    expectFailureWhenTestingThat(same).isNotEqualTo(same);\n","  }\n","\n","  private static boolean[] array(boolean... ts) {\n","    return ts;\n","  }\n","\n","  private PrimitiveBooleanArraySubject expectFailureWhenTestingThat(boolean[] actual) {\n","    return expectFailure.whenTesting().that(actual);\n","  }\n","}\n"],"method_lines_dic":{"PrimitiveBooleanArraySubject::::asList()":[37,39]},"test_method_lines_dic":{"PrimitiveBooleanArraySubjectTest::::isEqualTo()":[32,35],"PrimitiveBooleanArraySubjectTest::::isEqualTo_Same()":[37,42],"PrimitiveBooleanArraySubjectTest::::asList()":[44,47],"PrimitiveBooleanArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()":[49,53],"PrimitiveBooleanArraySubjectTest::::isEqualTo_Fail_NotAnArray()":[55,58],"PrimitiveBooleanArraySubjectTest::::isNotEqualTo_SameLengths()":[60,63],"PrimitiveBooleanArraySubjectTest::::isNotEqualTo_DifferentLengths()":[65,68],"PrimitiveBooleanArraySubjectTest::::isNotEqualTo_DifferentTypes()":[70,73],"PrimitiveBooleanArraySubjectTest::::isNotEqualTo_FailEquals()":[75,78],"PrimitiveBooleanArraySubjectTest::::isNotEqualTo_FailSame()":[80,85],"PrimitiveBooleanArraySubjectTest::::array(boolean[])":[87,89],"PrimitiveBooleanArraySubjectTest::::expectFailureWhenTestingThat(boolean[])":[91,93]},"reverse_method_lines_dic":{"37":"PrimitiveBooleanArraySubject::::asList()","38":"PrimitiveBooleanArraySubject::::asList()","39":"PrimitiveBooleanArraySubject::::asList()"},"test_reverse_method_lines_dic":{"32":"PrimitiveBooleanArraySubjectTest::::isEqualTo()","33":"PrimitiveBooleanArraySubjectTest::::isEqualTo()","34":"PrimitiveBooleanArraySubjectTest::::isEqualTo()","35":"PrimitiveBooleanArraySubjectTest::::isEqualTo()","37":"PrimitiveBooleanArraySubjectTest::::isEqualTo_Same()","38":"PrimitiveBooleanArraySubjectTest::::isEqualTo_Same()","39":"PrimitiveBooleanArraySubjectTest::::isEqualTo_Same()","40":"PrimitiveBooleanArraySubjectTest::::isEqualTo_Same()","41":"PrimitiveBooleanArraySubjectTest::::isEqualTo_Same()","42":"PrimitiveBooleanArraySubjectTest::::isEqualTo_Same()","44":"PrimitiveBooleanArraySubjectTest::::asList()","45":"PrimitiveBooleanArraySubjectTest::::asList()","46":"PrimitiveBooleanArraySubjectTest::::asList()","47":"PrimitiveBooleanArraySubjectTest::::asList()","49":"PrimitiveBooleanArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","50":"PrimitiveBooleanArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","51":"PrimitiveBooleanArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","52":"PrimitiveBooleanArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","53":"PrimitiveBooleanArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","55":"PrimitiveBooleanArraySubjectTest::::isEqualTo_Fail_NotAnArray()","56":"PrimitiveBooleanArraySubjectTest::::isEqualTo_Fail_NotAnArray()","57":"PrimitiveBooleanArraySubjectTest::::isEqualTo_Fail_NotAnArray()","58":"PrimitiveBooleanArraySubjectTest::::isEqualTo_Fail_NotAnArray()","60":"PrimitiveBooleanArraySubjectTest::::isNotEqualTo_SameLengths()","61":"PrimitiveBooleanArraySubjectTest::::isNotEqualTo_SameLengths()","62":"PrimitiveBooleanArraySubjectTest::::isNotEqualTo_SameLengths()","63":"PrimitiveBooleanArraySubjectTest::::isNotEqualTo_SameLengths()","65":"PrimitiveBooleanArraySubjectTest::::isNotEqualTo_DifferentLengths()","66":"PrimitiveBooleanArraySubjectTest::::isNotEqualTo_DifferentLengths()","67":"PrimitiveBooleanArraySubjectTest::::isNotEqualTo_DifferentLengths()","68":"PrimitiveBooleanArraySubjectTest::::isNotEqualTo_DifferentLengths()","70":"PrimitiveBooleanArraySubjectTest::::isNotEqualTo_DifferentTypes()","71":"PrimitiveBooleanArraySubjectTest::::isNotEqualTo_DifferentTypes()","72":"PrimitiveBooleanArraySubjectTest::::isNotEqualTo_DifferentTypes()","73":"PrimitiveBooleanArraySubjectTest::::isNotEqualTo_DifferentTypes()","75":"PrimitiveBooleanArraySubjectTest::::isNotEqualTo_FailEquals()","76":"PrimitiveBooleanArraySubjectTest::::isNotEqualTo_FailEquals()","77":"PrimitiveBooleanArraySubjectTest::::isNotEqualTo_FailEquals()","78":"PrimitiveBooleanArraySubjectTest::::isNotEqualTo_FailEquals()","80":"PrimitiveBooleanArraySubjectTest::::isNotEqualTo_FailSame()","81":"PrimitiveBooleanArraySubjectTest::::isNotEqualTo_FailSame()","82":"PrimitiveBooleanArraySubjectTest::::isNotEqualTo_FailSame()","83":"PrimitiveBooleanArraySubjectTest::::isNotEqualTo_FailSame()","84":"PrimitiveBooleanArraySubjectTest::::isNotEqualTo_FailSame()","85":"PrimitiveBooleanArraySubjectTest::::isNotEqualTo_FailSame()","87":"PrimitiveBooleanArraySubjectTest::::array(boolean[])","88":"PrimitiveBooleanArraySubjectTest::::array(boolean[])","89":"PrimitiveBooleanArraySubjectTest::::array(boolean[])","91":"PrimitiveBooleanArraySubjectTest::::expectFailureWhenTestingThat(boolean[])","92":"PrimitiveBooleanArraySubjectTest::::expectFailureWhenTestingThat(boolean[])","93":"PrimitiveBooleanArraySubjectTest::::expectFailureWhenTestingThat(boolean[])"},"tests":[{"test_lines":[32,35],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[37,42],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[44,47],"covered_lines":[33,34,35,38],"label":"PrimitiveBooleanArraySubject::::asList()"},{"test_lines":[49,53],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[55,58],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[60,63],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[65,68],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[70,73],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[75,78],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[80,85],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/truth/core/src/main/java/com/google/common/truth/StackTraceCleaner.java":{"class_content":["/*\n"," * Copyright (c) 2017 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.base.MoreObjects.firstNonNull;\n","import static com.google.common.base.Preconditions.checkNotNull;\n","import static java.lang.Thread.currentThread;\n","\n","import com.google.common.annotations.GwtIncompatible;\n","import com.google.common.collect.ImmutableList;\n","import com.google.common.collect.ImmutableSet;\n","import com.google.common.collect.Sets;\n","import java.util.ArrayList;\n","import java.util.List;\n","import java.util.ListIterator;\n","import java.util.Set;\n","import org.checkerframework.checker.nullness.qual.Nullable;\n","\n","/** Utility that cleans stack traces to remove noise from common frameworks. */\n","@GwtIncompatible\n","@J2ktIncompatible\n","final class StackTraceCleaner {\n","\n","  static final String CLEANER_LINK = \"https://goo.gl/aH3UyP\";\n","\n","  /**\n","   * <b>Call {@link Platform#cleanStackTrace} rather than calling this directly.</b>\n","   *\n","   * <p>Cleans the stack trace on the given {@link Throwable}, replacing the original stack trace\n","   * stored on the instance (see {@link Throwable#setStackTrace(StackTraceElement[])}).\n","   *\n","   * <p>Removes Truth stack frames from the top and JUnit framework and reflective call frames from\n","   * the bottom. Collapses the frames for various frameworks in the middle of the trace as well.\n","   */\n","  static void cleanStackTrace(Throwable throwable) {\n","    new StackTraceCleaner(throwable).clean(Sets.<Throwable>newIdentityHashSet());\n","  }\n","\n","  private final Throwable throwable;\n","  private final List<StackTraceElementWrapper> cleanedStackTrace = new ArrayList<>();\n","  private @Nullable StackTraceElementWrapper lastStackFrameElementWrapper = null;\n","  private @Nullable StackFrameType currentStreakType = null;\n","  private int currentStreakLength = 0;\n","\n","  /**\n","   * A new instance is instantiated for each throwable to be cleaned. This is so that helper methods\n","   * can make use of instance variables describing the state of the cleaning process.\n","   */\n","  private StackTraceCleaner(Throwable throwable) {\n","    this.throwable = throwable;\n","  }\n","\n","  // TODO(b/135924708): Add this to the test runners so that we clean all stack traces, not just\n","  // those of exceptions originating in Truth.\n","  /** Cleans the stack trace on {@code throwable}, replacing the trace that was originally on it. */\n","  @SuppressWarnings(\"SetAll\") // not available under old versions of Android\n","  private void clean(Set<Throwable> seenThrowables) {\n","    // Stack trace cleaning can be disabled using a system property.\n","    if (isStackTraceCleaningDisabled()) {\n","      return;\n","    }\n","\n","    /*\n","     * TODO(cpovirk): Consider wrapping this whole method in a try-catch in case there are any bugs.\n","     * It would be a shame for us to fail to report the \"real\" assertion failure because we're\n","     * instead reporting a bug in Truth's cosmetic stack cleaning.\n","     */\n","\n","    // Prevent infinite recursion if there is a reference cycle between Throwables.\n","    if (seenThrowables.contains(throwable)) {\n","      return;\n","    }\n","    seenThrowables.add(throwable);\n","\n","    StackTraceElement[] stackFrames = throwable.getStackTrace();\n","\n","    int stackIndex = stackFrames.length - 1;\n","    for (; stackIndex >= 0 && !isTruthEntrance(stackFrames[stackIndex]); stackIndex--) {\n","      // Find first frame that enters Truth's world, and remove all above.\n","    }\n","    stackIndex += 1;\n","\n","    int endIndex = 0;\n","    for (;\n","        endIndex < stackFrames.length && !isJUnitIntrastructure(stackFrames[endIndex]);\n","        endIndex++) {\n","      // Find last frame of setup frames, and remove from there down.\n","    }\n","    /*\n","     * If the stack trace would be empty, the error was probably thrown from \"JUnit infrastructure\"\n","     * frames. Keep those frames around (though much of JUnit itself and related startup frames will\n","     * still be removed by the remainder of this method) so that the user sees a useful stack.\n","     */\n","    if (stackIndex >= endIndex) {\n","      endIndex = stackFrames.length;\n","    }\n","\n","    for (; stackIndex < endIndex; stackIndex++) {\n","      StackTraceElementWrapper stackTraceElementWrapper =\n","          new StackTraceElementWrapper(stackFrames[stackIndex]);\n","      // Always keep frames that might be useful.\n","      if (stackTraceElementWrapper.getStackFrameType() == StackFrameType.NEVER_REMOVE) {\n","        endStreak();\n","        cleanedStackTrace.add(stackTraceElementWrapper);\n","        continue;\n","      }\n","\n","      // Otherwise, process the current frame for collapsing\n","      addToStreak(stackTraceElementWrapper);\n","\n","      lastStackFrameElementWrapper = stackTraceElementWrapper;\n","    }\n","\n","    // Close out the streak on the bottom of the stack.\n","    endStreak();\n","\n","    // Filter out testing framework and reflective calls from the bottom of the stack\n","    ListIterator<StackTraceElementWrapper> iterator =\n","        cleanedStackTrace.listIterator(cleanedStackTrace.size());\n","    while (iterator.hasPrevious()) {\n","      StackTraceElementWrapper stackTraceElementWrapper = iterator.previous();\n","      if (stackTraceElementWrapper.getStackFrameType() == StackFrameType.TEST_FRAMEWORK\n","          || stackTraceElementWrapper.getStackFrameType() == StackFrameType.REFLECTION) {\n","        iterator.remove();\n","      } else {\n","        break;\n","      }\n","    }\n","\n","    // Replace the stack trace on the Throwable with the cleaned one.\n","    StackTraceElement[] result = new StackTraceElement[cleanedStackTrace.size()];\n","    for (int i = 0; i < result.length; i++) {\n","      result[i] = cleanedStackTrace.get(i).getStackTraceElement();\n","    }\n","    throwable.setStackTrace(result);\n","\n","    // Recurse on any related Throwables that are attached to this one\n","    if (throwable.getCause() != null) {\n","      new StackTraceCleaner(throwable.getCause()).clean(seenThrowables);\n","    }\n","    for (Throwable suppressed : Platform.getSuppressed(throwable)) {\n","      new StackTraceCleaner(suppressed).clean(seenThrowables);\n","    }\n","  }\n","\n","  /**\n","   * Either adds the given frame to the running streak or closes out the running streak and starts a\n","   * new one.\n","   */\n","  private void addToStreak(StackTraceElementWrapper stackTraceElementWrapper) {\n","    if (stackTraceElementWrapper.getStackFrameType() != currentStreakType) {\n","      endStreak();\n","      currentStreakType = stackTraceElementWrapper.getStackFrameType();\n","      currentStreakLength = 1;\n","    } else {\n","      currentStreakLength++;\n","    }\n","  }\n","\n","  /** Ends the current streak, adding a summary frame to the result. Resets the streak counter. */\n","  private void endStreak() {\n","    if (currentStreakLength == 0) {\n","      return;\n","    }\n","\n","    if (currentStreakLength == 1) {\n","      // A single frame isn't a streak. Just include the frame as-is in the result.\n","      cleanedStackTrace.add(checkNotNull(lastStackFrameElementWrapper));\n","    } else {\n","      // Add a single frame to the result summarizing the streak of framework frames\n","      cleanedStackTrace.add(\n","          createStreakReplacementFrame(checkNotNull(currentStreakType), currentStreakLength));\n","    }\n","\n","    clearStreak();\n","  }\n","\n","  /** Resets the streak counter. */\n","  private void clearStreak() {\n","    currentStreakType = null;\n","    currentStreakLength = 0;\n","  }\n","\n","  private static final ImmutableSet<String> SUBJECT_CLASS =\n","      ImmutableSet.of(\n","          Subject.class.getCanonicalName());\n","\n","  private static final ImmutableSet<String> STANDARD_SUBJECT_BUILDER_CLASS =\n","      ImmutableSet.of(StandardSubjectBuilder.class.getCanonicalName());\n","\n","  private static boolean isTruthEntrance(StackTraceElement stackTraceElement) {\n","    return isFromClassOrClassNestedInside(stackTraceElement, SUBJECT_CLASS)\n","        /*\n","         * Don't match classes _nested inside_ StandardSubjectBuilder because that would match\n","         * Expect's Statement implementation. While we want to strip everything from there _down_, we\n","         * don't want to strip everything from there _up_ (which would strip the test class itself!).\n","         *\n","         * (StandardSubjectBuilder is listed here only for its fail() methods, anyway, so we don't\n","         * have to worry about nested classes like we do with Subject.)\n","         */\n","        || isFromClassDirectly(stackTraceElement, STANDARD_SUBJECT_BUILDER_CLASS);\n","  }\n","\n","  private static final ImmutableSet<String> JUNIT_INFRASTRUCTURE_CLASSES =\n","      ImmutableSet.of(\"org.junit.runner.Runner\", \"org.junit.runners.model.Statement\");\n","\n","  private static boolean isJUnitIntrastructure(StackTraceElement stackTraceElement) {\n","    // It's not clear whether looking at nested classes here is useful, harmful, or neutral.\n","    return isFromClassOrClassNestedInside(stackTraceElement, JUNIT_INFRASTRUCTURE_CLASSES);\n","  }\n","\n","  private static boolean isFromClassOrClassNestedInside(\n","      StackTraceElement stackTraceElement, ImmutableSet<String> recognizedClasses) {\n","    Class<?> stackClass;\n","    try {\n","      stackClass = loadClass(stackTraceElement.getClassName());\n","    } catch (ClassNotFoundException e) {\n","      return false;\n","    }\n","    try {\n","      for (; stackClass != null; stackClass = stackClass.getEnclosingClass()) {\n","        for (String recognizedClass : recognizedClasses) {\n","          if (isSubtypeOf(stackClass, recognizedClass)) {\n","            return true;\n","          }\n","        }\n","      }\n","    } catch (Error e) {\n","      if (e.getClass().getName().equals(\"com.google.j2objc.ReflectionStrippedError\")) {\n","        /*\n","         * We're running under j2objc without reflection. Skip testing the enclosing classes. At\n","         * least we tested the class itself against all the recognized classes.\n","         *\n","         * TODO(cpovirk): The smarter thing might be to guess the name of the enclosing classes by\n","         * removing \"$Foo\" from the end of the name. But this should be good enough for now.\n","         */\n","        return false;\n","      }\n","      if (e instanceof IncompatibleClassChangeError) {\n","        // OEM class-loading bug? https://issuetracker.google.com/issues/37045084\n","        return false;\n","      }\n","      throw e;\n","    }\n","    return false;\n","  }\n","\n","  private static boolean isSubtypeOf(@Nullable Class<?> subclass, String superclass) {\n","    for (; subclass != null; subclass = checkNotNull(subclass).getSuperclass()) {\n","      if (subclass.getCanonicalName() != null && subclass.getCanonicalName().equals(superclass)) {\n","        return true;\n","      }\n","    }\n","    return false;\n","  }\n","\n","  private static boolean isFromClassDirectly(\n","      StackTraceElement stackTraceElement, ImmutableSet<String> recognizedClasses) {\n","    Class<?> stackClass;\n","    try {\n","      stackClass = loadClass(stackTraceElement.getClassName());\n","    } catch (ClassNotFoundException e) {\n","      return false;\n","    }\n","    for (String recognizedClass : recognizedClasses) {\n","      if (isSubtypeOf(stackClass, recognizedClass)) {\n","        return true;\n","      }\n","    }\n","    return false;\n","  }\n","\n","  // Using plain Class.forName can cause problems.\n","  /*\n","   * TODO(cpovirk): Consider avoiding classloading entirely by reading classes with ASM. But that\n","   * won't work on Android, so we might ultimately need classloading as a fallback. Another\n","   * possibility is to load classes in a fresh, isolated classloader. However, that requires\n","   * creating a list of jars to load from, which is fragile and would also require special handling\n","   * under Android. If we're lucky, this new solution will just work: The classes should already be\n","   * loaded, anyway, since they appear on the stack, so we just have to hope that we have the right\n","   * classloader.\n","   */\n","  private static Class<?> loadClass(String name) throws ClassNotFoundException {\n","    ClassLoader loader =\n","        firstNonNull(\n","            currentThread().getContextClassLoader(), StackTraceCleaner.class.getClassLoader());\n","    return loader.loadClass(name);\n","  }\n","\n","  /**\n","   * Wrapper around a {@link StackTraceElement} for calculating and holding the metadata used to\n","   * clean the stack trace.\n","   */\n","  private static class StackTraceElementWrapper {\n","\n","    private final StackTraceElement stackTraceElement;\n","    private final StackFrameType stackFrameType;\n","\n","    /** Creates a wrapper with the given frame with frame type inferred from frame's class name. */\n","    StackTraceElementWrapper(StackTraceElement stackTraceElement) {\n","      this(stackTraceElement, StackFrameType.forClassName(stackTraceElement.getClassName()));\n","    }\n","\n","    /** Creates a wrapper with the given frame and the given frame type. */\n","    StackTraceElementWrapper(StackTraceElement stackTraceElement, StackFrameType stackFrameType) {\n","      this.stackTraceElement = stackTraceElement;\n","      this.stackFrameType = stackFrameType;\n","    }\n","\n","    /** Returns the type of this frame. */\n","    StackFrameType getStackFrameType() {\n","      return stackFrameType;\n","    }\n","\n","    /** Returns the wrapped {@link StackTraceElement}. */\n","    StackTraceElement getStackTraceElement() {\n","      return stackTraceElement;\n","    }\n","  }\n","\n","  private static StackTraceElementWrapper createStreakReplacementFrame(\n","      StackFrameType stackFrameType, int length) {\n","    return new StackTraceElementWrapper(\n","        new StackTraceElement(\n","            \"[[\"\n","                + stackFrameType.getName()\n","                + \": \"\n","                + length\n","                + \" frames collapsed (\"\n","                + CLEANER_LINK\n","                + \")]]\",\n","            \"\",\n","            \"\",\n","            0),\n","        stackFrameType);\n","  }\n","\n","  /**\n","   * Enum of the package or class-name based categories of stack frames that might be removed or\n","   * collapsed by the cleaner.\n","   */\n","  private enum StackFrameType {\n","    NEVER_REMOVE(\"N/A\"),\n","    TEST_FRAMEWORK(\n","        \"Testing framework\",\n","        \"junit\",\n","        \"org.junit\",\n","        \"androidx.test.internal.runner\",\n","        \"com.github.bazel_contrib.contrib_rules_jvm.junit5\",\n","        \"com.google.testing.junit\",\n","        \"com.google.testing.testsize\",\n","        \"com.google.testing.util\"),\n","    REFLECTION(\"Reflective call\", \"java.lang.reflect\", \"jdk.internal.reflect\", \"sun.reflect\"),\n","    CONCURRENT_FRAMEWORK(\n","        \"Concurrent framework\",\n","        \"com.google.tracing.CurrentContext\",\n","        \"com.google.common.util.concurrent\",\n","        \"java.util.concurrent.ForkJoin\");\n","\n","    /** Helper method to determine the frame type from the fully qualified class name. */\n","    private static StackFrameType forClassName(String fullyQualifiedClassName) {\n","      // Never remove the frames from a test class. These will probably be the frame of a failing\n","      // assertion.\n","      // TODO(cpovirk): This is really only for tests in Truth itself, so this doesn't matter yet,\n","      // but.... If the Truth tests someday start calling into nested classes, we may want to add:\n","      // || fullyQualifiedClassName.contains(\"Test$\")\n","      if (fullyQualifiedClassName.endsWith(\"Test\")\n","          && !fullyQualifiedClassName.equals(\n","              \"androidx.test.internal.runner.junit3.NonLeakyTestSuite$NonLeakyTest\")) {\n","        return StackFrameType.NEVER_REMOVE;\n","      }\n","\n","      for (StackFrameType stackFrameType : StackFrameType.values()) {\n","        if (stackFrameType.belongsToType(fullyQualifiedClassName)) {\n","          return stackFrameType;\n","        }\n","      }\n","\n","      return StackFrameType.NEVER_REMOVE;\n","    }\n","\n","    private final String name;\n","    private final ImmutableList<String> prefixes;\n","\n","    /**\n","     * Each type of stack frame has a name of the summary displayed in the cleaned trace.\n","     *\n","     * <p>Most also have a set of fully qualified class name prefixes that identify when a frame\n","     * belongs to this type.\n","     */\n","    StackFrameType(String name, String... prefixes) {\n","      this.name = name;\n","      this.prefixes = ImmutableList.copyOf(prefixes);\n","    }\n","\n","    /** Returns the name of this frame type to display in the cleaned trace */\n","    String getName() {\n","      return name;\n","    }\n","\n","    /**\n","     * Returns true if the given frame belongs to this frame type based on the package and/or class\n","     * name of the frame.\n","     */\n","    boolean belongsToType(String fullyQualifiedClassName) {\n","      for (String prefix : prefixes) {\n","        // TODO(cpovirk): Should we also check prefix + \"$\"?\n","        if (fullyQualifiedClassName.equals(prefix)\n","            || fullyQualifiedClassName.startsWith(prefix + \".\")) {\n","          return true;\n","        }\n","      }\n","      return false;\n","    }\n","  }\n","\n","  /**\n","   * Returns true if stack trace cleaning is explicitly disabled in a system property. This switch\n","   * is intended to be used when attempting to debug the frameworks which are collapsed or filtered\n","   * out of stack traces by the cleaner.\n","   */\n","  private static boolean isStackTraceCleaningDisabled() {\n","    // Reading system properties might be forbidden.\n","    try {\n","      return Boolean.parseBoolean(\n","          System.getProperty(\"com.google.common.truth.disable_stack_trace_cleaning\"));\n","    } catch (SecurityException e) {\n","      // Hope for the best.\n","      return false;\n","      // TODO(cpovirk): Log a warning? Or is that likely to trigger other violations?\n","    }\n","  }\n","}\n"],"test_content":["/*\n"," * Copyright (c) 2017 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.truth.ExpectFailure.expectFailure;\n","import static com.google.common.truth.Truth.assertThat;\n","\n","import com.google.common.collect.Range;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import org.junit.runner.Runner;\n","import org.junit.runners.JUnit4;\n","import org.junit.runners.model.Statement;\n","\n","/** Unit tests for {@link StackTraceCleaner}. */\n","/*\n"," * Cleaning doesn't actually work under j2cl (and presumably GWT): StackTraceElement.getClassName()\n"," * doesn't have real data. Some data is available in toString(), albeit along the lines of\n"," * \"SimpleAssertionError.m_createError__java_lang_String_$pp_java_lang.\" StackTraceCleaner could\n"," * maybe look through the toString() representations to count how many frames to remove, but that's\n"," * a bigger project. (While we're at it, we could remove the j2cl-specific boilerplate from the\n"," * _bottom_ of the stack, too.) And sadly, it's not necessarily as simple as looking at just _class_\n"," * names: The cleaning is applied to causes, too, and it's possible for a cause to legitimately\n"," * contain an exception created inside a class like Throwable -- e.g., x.initCause(x) will throw an\n"," * exception, and it would be weird (though maybe tolerable) for us to remove that.\n"," *\n"," * Also note that j2cl includes some extra frames at the _top_, even beyond the ones that we try to\n"," * remove: b/71355096\n"," */\n","@RunWith(JUnit4.class)\n","public class StackTraceCleanerTest extends BaseSubjectTestCase {\n","  @Test\n","  public void realWorld() {\n","    try {\n","      assertThat(0).isEqualTo(1);\n","      throw new Error();\n","    } catch (AssertionError failure) {\n","      assertThat(failure.getStackTrace()).hasLength(1);\n","    }\n","\n","    // ExpectFailure ends up with \"extra\" frames, but that's probably the right behavior :\\\n","    AssertionError failure = expectFailure(whenTesting -> whenTesting.that(0).isEqualTo(1));\n","    // Currently 3 total frames on the JVM, 4 on Android.\n","    assertThat(failure.getStackTrace().length).isIn(Range.closed(3, 4));\n","  }\n","\n","  @Test\n","  public void emptyTrace() {\n","    Throwable throwable = createThrowableWithStackTrace();\n","\n","    StackTraceCleaner.cleanStackTrace(throwable);\n","\n","    assertThat(throwable.getStackTrace()).isEqualTo(new StackTraceElement[0]);\n","  }\n","\n","  @Test\n","  public void collapseStreaks() {\n","    Throwable throwable =\n","        createThrowableWithStackTrace(\n","            \"com.example.MyTest\",\n","            \"junit.Foo\",\n","            \"org.junit.Bar\",\n","            \"com.google.testing.junit.Car\",\n","            \"com.google.testing.testsize.Dar\",\n","            \"com.google.testing.util.Far\",\n","            \"com.example.Gar\");\n","\n","    StackTraceCleaner.cleanStackTrace(throwable);\n","\n","    assertThat(throwable.getStackTrace())\n","        .isEqualTo(\n","            new StackTraceElement[] {\n","              createStackTraceElement(\"com.example.MyTest\"),\n","              createCollapsedStackTraceElement(\"Testing framework\", 5),\n","              createStackTraceElement(\"com.example.Gar\"),\n","            });\n","  }\n","\n","  @Test\n","  public void assertionsActuallyUseCleaner() {\n","    expectFailure.whenTesting().that(1).isEqualTo(2);\n","    assertThat(expectFailure.getFailure().getStackTrace()[0].getClassName())\n","        .isEqualTo(getClass().getName());\n","  }\n","\n","  @Test\n","  public void assertionsActuallyUseCleaner_comparisonFailure() {\n","    expectFailure.whenTesting().that(\"1\").isEqualTo(\"2\");\n","    assertThat(expectFailure.getFailure().getStackTrace()[0].getClassName())\n","        .isEqualTo(getClass().getName());\n","  }\n","\n","  @Test\n","  public void dontCollapseStreaksOfOneFrame() {\n","    Throwable throwable =\n","        createThrowableWithStackTrace(\n","            \"com.example.MyTest\",\n","            \"junit.Foo\",\n","            \"com.example.Helper\",\n","            \"org.junit.Bar\",\n","            \"com.example.Helper\",\n","            \"com.google.testing.junit.Car\",\n","            \"com.google.testing.testsize.Dar\",\n","            \"com.google.testing.util.Far\",\n","            \"com.example.Gar\");\n","\n","    StackTraceCleaner.cleanStackTrace(throwable);\n","\n","    assertThat(throwable.getStackTrace())\n","        .isEqualTo(\n","            new StackTraceElement[] {\n","              createStackTraceElement(\"com.example.MyTest\"),\n","              createStackTraceElement(\"junit.Foo\"),\n","              createStackTraceElement(\"com.example.Helper\"),\n","              createStackTraceElement(\"org.junit.Bar\"),\n","              createStackTraceElement(\"com.example.Helper\"),\n","              createCollapsedStackTraceElement(\"Testing framework\", 3),\n","              createStackTraceElement(\"com.example.Gar\"),\n","            });\n","  }\n","\n","  @Test\n","  public void mixedStreaks() {\n","    Throwable throwable =\n","        createThrowableWithStackTrace(\n","            \"com.google.common.truth.IterableSubject\",\n","            \"com.google.common.truth.MapSubject\",\n","            \"com.example.MyTest\",\n","            \"junit.Foo\",\n","            \"org.junit.Bar\",\n","            \"java.lang.reflect.Car\",\n","            \"sun.reflect.Dar\",\n","            \"com.google.testing.testsize.Dar\",\n","            \"com.google.testing.util.Far\",\n","            \"com.example.Jar\");\n","\n","    StackTraceCleaner.cleanStackTrace(throwable);\n","\n","    assertThat(throwable.getStackTrace())\n","        .isEqualTo(\n","            new StackTraceElement[] {\n","              createStackTraceElement(\"com.example.MyTest\"),\n","              createCollapsedStackTraceElement(\"Testing framework\", 2),\n","              createCollapsedStackTraceElement(\"Reflective call\", 2),\n","              createCollapsedStackTraceElement(\"Testing framework\", 2),\n","              createStackTraceElement(\"com.example.Jar\"),\n","            });\n","  }\n","\n","  @Test\n","  public void classNestedInSubject() {\n","    Throwable throwable =\n","        createThrowableWithStackTrace(\n","            \"com.google.common.truth.IterableSubject$UsingCorrespondence\", \"com.example.MyTest\");\n","\n","    StackTraceCleaner.cleanStackTrace(throwable);\n","\n","    assertThat(throwable.getStackTrace())\n","        .isEqualTo(\n","            new StackTraceElement[] {\n","              createStackTraceElement(\"com.example.MyTest\"),\n","            });\n","  }\n","\n","  @Test\n","  public void removesTestingAndReflectiveFramesOnBottom() {\n","    Throwable throwable =\n","        createThrowableWithStackTrace(\n","            \"com.example.Foo\",\n","            \"com.example.Bar\",\n","            \"sun.reflect.Car\",\n","            \"org.junit.Dar\",\n","            \"java.lang.reflect.Far\",\n","            \"junit.Gar\",\n","            \"com.google.testing.junit.Har\",\n","            \"java.lang.reflect.Jar\",\n","            \"java.lang.reflect.JarJar\",\n","            \"com.google.testing.junit.Kar\");\n","\n","    StackTraceCleaner.cleanStackTrace(throwable);\n","\n","    assertThat(throwable.getStackTrace())\n","        .isEqualTo(\n","            new StackTraceElement[] {\n","              createStackTraceElement(\"com.example.Foo\"),\n","              createStackTraceElement(\"com.example.Bar\"),\n","            });\n","  }\n","\n","  @Test\n","  public void packagesAreIgnoredForTestClasses() {\n","    Throwable throwable =\n","        createThrowableWithStackTrace(\n","            \"com.google.testing.util.ShouldStrip1\",\n","            \"com.google.testing.util.ShouldStrip2\",\n","            \"com.google.testing.util.ShouldNotStripTest\");\n","\n","    StackTraceCleaner.cleanStackTrace(throwable);\n","\n","    assertThat(throwable.getStackTrace())\n","        .isEqualTo(\n","            new StackTraceElement[] {\n","              createCollapsedStackTraceElement(\"Testing framework\", 2),\n","              createStackTraceElement(\"com.google.testing.util.ShouldNotStripTest\"),\n","            });\n","  }\n","\n","  @Test\n","  public void allFramesAboveStandardSubjectBuilderCleaned() {\n","    Throwable throwable =\n","        createThrowableWithStackTrace(\n","            \"com.google.random.Package\",\n","            \"com.google.common.base.collection.ImmutableMap\",\n","            \"com.google.common.truth.StandardSubjectBuilder\",\n","            \"com.google.example.SomeClass\");\n","\n","    StackTraceCleaner.cleanStackTrace(throwable);\n","\n","    assertThat(throwable.getStackTrace())\n","        .isEqualTo(\n","            new StackTraceElement[] {\n","              createStackTraceElement(\"com.google.example.SomeClass\"),\n","            });\n","  }\n","\n","  @Test\n","  public void allFramesAboveSubjectCleaned() {\n","    Throwable throwable =\n","        createThrowableWithStackTrace(\n","            \"com.google.random.Package\",\n","            \"com.google.common.base.collection.ImmutableMap\",\n","            \"com.google.common.truth.StringSubject\",\n","            \"com.google.example.SomeClass\");\n","\n","    StackTraceCleaner.cleanStackTrace(throwable);\n","\n","    assertThat(throwable.getStackTrace())\n","        .isEqualTo(\n","            new StackTraceElement[] {\n","              createStackTraceElement(\"com.google.example.SomeClass\"),\n","            });\n","  }\n","\n","  @Test\n","  public void allFramesBelowJUnitStatementCleaned() {\n","    Throwable throwable =\n","        createThrowableWithStackTrace(\n","            \"com.google.common.truth.StringSubject\",\n","            \"com.google.example.SomeTest\",\n","            SomeStatement.class.getName(),\n","            \"com.google.example.SomeClass\");\n","\n","    StackTraceCleaner.cleanStackTrace(throwable);\n","\n","    assertThat(throwable.getStackTrace())\n","        .isEqualTo(\n","            new StackTraceElement[] {\n","              createStackTraceElement(\"com.google.example.SomeTest\"),\n","            });\n","  }\n","\n","  @Test\n","  public void failureFromJUnitInfrastructureIncludesItInStack() {\n","    Throwable throwable =\n","        createThrowableWithStackTrace(\n","            \"com.google.common.truth.StringSubject\",\n","            SomeStatement.class.getName(),\n","            \"com.google.example.SomeClass\");\n","\n","    StackTraceCleaner.cleanStackTrace(throwable);\n","\n","    assertThat(throwable.getStackTrace())\n","        .isEqualTo(\n","            new StackTraceElement[] {\n","              createStackTraceElement(SomeStatement.class.getName()),\n","              createStackTraceElement(\"com.google.example.SomeClass\"),\n","            });\n","  }\n","\n","  @Test\n","  public void allFramesBelowJUnitRunnerCleaned() {\n","    Throwable throwable =\n","        createThrowableWithStackTrace(\n","            \"com.google.common.truth.StringSubject\",\n","            \"com.google.example.SomeTest\",\n","            SomeRunner.class.getName(),\n","            \"com.google.example.SomeClass\");\n","\n","    StackTraceCleaner.cleanStackTrace(throwable);\n","\n","    assertThat(throwable.getStackTrace())\n","        .isEqualTo(\n","            new StackTraceElement[] {\n","              createStackTraceElement(\"com.google.example.SomeTest\"),\n","            });\n","  }\n","\n","  abstract static class SomeStatement extends Statement {}\n","\n","  abstract static class SomeRunner extends Runner {}\n","\n","  /**\n","   * This scenario where truth class is called directly without any subject's subclass or {@link\n","   * StandardSubjectBuilder} in the call stack should not happen in practical, testing anyway to\n","   * make sure even if it does, the behavior should match expectation.\n","   */\n","  @Test\n","  public void truthFrameWithOutSubject_shouldNotCleaned() {\n","    Throwable throwable =\n","        createThrowableWithStackTrace(\n","            \"com.google.random.Package\",\n","            // two or more truth frame will trigger string matching mechenism to got it collapsed\n","            \"com.google.common.truth.FailureMetadata\",\n","            \"com.google.example.SomeClass\");\n","\n","    StackTraceCleaner.cleanStackTrace(throwable);\n","\n","    assertThat(throwable.getStackTrace())\n","        .isEqualTo(\n","            new StackTraceElement[] {\n","              createStackTraceElement(\"com.google.random.Package\"),\n","              createStackTraceElement(\"com.google.common.truth.FailureMetadata\"),\n","              createStackTraceElement(\"com.google.example.SomeClass\"),\n","            });\n","  }\n","\n","  @Test\n","  public void causingThrowablesAreAlsoCleaned() {\n","    Throwable cause2 = createThrowableWithStackTrace(\"com.example.Foo\", \"org.junit.FilterMe\");\n","    Throwable cause1 =\n","        createThrowableWithStackTrace(cause2, \"com.example.Bar\", \"org.junit.FilterMe\");\n","    Throwable rootThrowable =\n","        createThrowableWithStackTrace(cause1, \"com.example.Car\", \"org.junit.FilterMe\");\n","\n","    StackTraceCleaner.cleanStackTrace(rootThrowable);\n","\n","    assertThat(rootThrowable.getStackTrace()).isEqualTo(createStackTrace(\"com.example.Car\"));\n","    assertThat(cause1.getStackTrace()).isEqualTo(createStackTrace(\"com.example.Bar\"));\n","    assertThat(cause2.getStackTrace()).isEqualTo(createStackTrace(\"com.example.Foo\"));\n","  }\n","\n","  @Test\n","  public void suppressedThrowablesAreAlsoCleaned() {\n","    if (Platform.isAndroid()) {\n","      return; // suppressed exceptions aren't supported under Ice Cream Sandwich, where we test\n","    }\n","    Throwable throwable = createThrowableWithStackTrace(\"com.example.Foo\", \"org.junit.FilterMe\");\n","    Throwable suppressed1 = createThrowableWithStackTrace(\"com.example.Bar\", \"org.junit.FilterMe\");\n","    Throwable suppressed2 = createThrowableWithStackTrace(\"com.example.Car\", \"org.junit.FilterMe\");\n","    throwable.addSuppressed(suppressed1);\n","    throwable.addSuppressed(suppressed2);\n","\n","    StackTraceCleaner.cleanStackTrace(throwable);\n","\n","    assertThat(throwable.getStackTrace()).isEqualTo(createStackTrace(\"com.example.Foo\"));\n","    assertThat(suppressed1.getStackTrace()).isEqualTo(createStackTrace(\"com.example.Bar\"));\n","    assertThat(suppressed2.getStackTrace()).isEqualTo(createStackTrace(\"com.example.Car\"));\n","  }\n","\n","  @Test\n","  public void mixedCausingAndSuppressThrowablesAreCleaned() {\n","    if (Platform.isAndroid()) {\n","      return; // suppressed exceptions aren't supported under Ice Cream Sandwich, where we test\n","    }\n","    Throwable suppressed1 = createThrowableWithStackTrace(\"com.example.Foo\", \"org.junit.FilterMe\");\n","    Throwable cause2 = createThrowableWithStackTrace(\"com.example.Bar\", \"org.junit.FilterMe\");\n","    Throwable cause1 =\n","        createThrowableWithStackTrace(cause2, \"com.example.Car\", \"org.junit.FilterMe\");\n","    Throwable suppressed2 =\n","        createThrowableWithStackTrace(cause1, \"com.example.Dar\", \"org.junit.FilterMe\");\n","    Throwable throwable = createThrowableWithStackTrace(\"com.example.Far\", \"org.junit.FilterMe\");\n","    throwable.addSuppressed(suppressed1);\n","    throwable.addSuppressed(suppressed2);\n","\n","    StackTraceCleaner.cleanStackTrace(throwable);\n","\n","    assertThat(throwable.getStackTrace()).isEqualTo(createStackTrace(\"com.example.Far\"));\n","    assertThat(suppressed1.getStackTrace()).isEqualTo(createStackTrace(\"com.example.Foo\"));\n","    assertThat(suppressed2.getStackTrace()).isEqualTo(createStackTrace(\"com.example.Dar\"));\n","    assertThat(cause1.getStackTrace()).isEqualTo(createStackTrace(\"com.example.Car\"));\n","    assertThat(cause2.getStackTrace()).isEqualTo(createStackTrace(\"com.example.Bar\"));\n","  }\n","\n","  @Test\n","  public void cleaningTraceIsIdempotent() {\n","    Throwable throwable = createThrowableWithStackTrace(\"com.example.Foo\", \"org.junit.FilterMe\");\n","\n","    StackTraceCleaner.cleanStackTrace(throwable);\n","    StackTraceCleaner.cleanStackTrace(throwable);\n","\n","    assertThat(throwable.getStackTrace()).isEqualTo(createStackTrace(\"com.example.Foo\"));\n","  }\n","\n","  @Test\n","  public void cyclesAreHandled() {\n","    SelfReferencingThrowable selfReferencingThrowable =\n","        new SelfReferencingThrowable(\"com.example.Foo\", \"org.junit.FilterMe\");\n","\n","    StackTraceCleaner.cleanStackTrace(selfReferencingThrowable);\n","\n","    assertThat(selfReferencingThrowable.getStackTrace())\n","        .isEqualTo(createStackTrace(\"com.example.Foo\"));\n","  }\n","\n","  private static Throwable createThrowableWithStackTrace(String... classNames) {\n","    return createThrowableWithStackTrace(null, classNames);\n","  }\n","\n","  private static Throwable createThrowableWithStackTrace(Throwable cause, String... classNames) {\n","    Throwable throwable = new RuntimeException(cause);\n","    StackTraceElement[] stackTrace = createStackTrace(classNames);\n","    throwable.setStackTrace(stackTrace);\n","    return throwable;\n","  }\n","\n","  private static StackTraceElement[] createStackTrace(String... classNames) {\n","    StackTraceElement[] stackTrace = new StackTraceElement[classNames.length];\n","    for (int i = 0; i < classNames.length; i++) {\n","      stackTrace[i] = createStackTraceElement(classNames[i]);\n","    }\n","    return stackTrace;\n","  }\n","\n","  private static StackTraceElement createStackTraceElement(String className) {\n","    return new StackTraceElement(className, \"\", \"\", -1);\n","  }\n","\n","  private static StackTraceElement createCollapsedStackTraceElement(\n","      String frameworkName, int collapsed) {\n","    return new StackTraceElement(\n","        \"[[\"\n","            + frameworkName\n","            + \": \"\n","            + collapsed\n","            + \" frames collapsed (\"\n","            + StackTraceCleaner.CLEANER_LINK\n","            + \")]]\",\n","        \"\",\n","        \"\",\n","        0);\n","  }\n","\n","  private static class SelfReferencingThrowable extends Exception {\n","    SelfReferencingThrowable(String... classNames) {\n","      setStackTrace(createStackTrace(classNames));\n","    }\n","\n","    @Override\n","    public synchronized Throwable getCause() {\n","      return this;\n","    }\n","  }\n","}\n"],"method_lines_dic":{"StackTraceCleaner::::cleanStackTrace(java.lang.Throwable)":[48,50],"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)":[69,157],"StackTraceCleaner::::addToStreak(com.google.common.truth.StackTraceCleaner.StackTraceElementWrapper)":[163,171],"StackTraceCleaner::::endStreak()":[174,189],"StackTraceCleaner::::clearStreak()":[192,195],"StackTraceCleaner::::isTruthEntrance(java.lang.StackTraceElement)":[204,215],"StackTraceCleaner::::isJUnitIntrastructure(java.lang.StackTraceElement)":[220,223],"StackTraceCleaner::::isSubtypeOf(java.lang.Class<?>,java.lang.String)":[261,268],"StackTraceCleaner::::loadClass(java.lang.String)":[296,301],"StackTraceCleaner.StackTraceElementWrapper::::getStackFrameType()":[324,326],"StackTraceCleaner.StackTraceElementWrapper::::getStackTraceElement()":[329,331],"StackTraceCleaner::::createStreakReplacementFrame(com.google.common.truth.StackTraceCleaner.StackFrameType,int)":[334,349],"StackTraceCleaner.StackFrameType::::forClassName(java.lang.String)":[374,393],"StackTraceCleaner.StackFrameType::::getName()":[410,412],"StackTraceCleaner.StackFrameType::::belongsToType(java.lang.String)":[418,427],"StackTraceCleaner::::isStackTraceCleaningDisabled()":[435,445]},"test_method_lines_dic":{"StackTraceCleanerTest::::realWorld()":[45,58],"StackTraceCleanerTest::::emptyTrace()":[60,67],"StackTraceCleanerTest::::collapseStreaks()":[69,90],"StackTraceCleanerTest::::assertionsActuallyUseCleaner()":[92,97],"StackTraceCleanerTest::::assertionsActuallyUseCleaner_comparisonFailure()":[99,104],"StackTraceCleanerTest::::dontCollapseStreaksOfOneFrame()":[106,133],"StackTraceCleanerTest::::mixedStreaks()":[135,161],"StackTraceCleanerTest::::classNestedInSubject()":[163,176],"StackTraceCleanerTest::::removesTestingAndReflectiveFramesOnBottom()":[178,201],"StackTraceCleanerTest::::packagesAreIgnoredForTestClasses()":[203,219],"StackTraceCleanerTest::::allFramesAboveStandardSubjectBuilderCleaned()":[221,237],"StackTraceCleanerTest::::allFramesAboveSubjectCleaned()":[239,255],"StackTraceCleanerTest::::allFramesBelowJUnitStatementCleaned()":[257,273],"StackTraceCleanerTest::::failureFromJUnitInfrastructureIncludesItInStack()":[275,291],"StackTraceCleanerTest::::allFramesBelowJUnitRunnerCleaned()":[293,309],"StackTraceCleanerTest::::truthFrameWithOutSubject_shouldNotCleaned()":[320,338],"StackTraceCleanerTest::::causingThrowablesAreAlsoCleaned()":[340,353],"StackTraceCleanerTest::::suppressedThrowablesAreAlsoCleaned()":[355,371],"StackTraceCleanerTest::::mixedCausingAndSuppressThrowablesAreCleaned()":[373,395],"StackTraceCleanerTest::::cleaningTraceIsIdempotent()":[397,405],"StackTraceCleanerTest::::cyclesAreHandled()":[407,416],"StackTraceCleanerTest::::createThrowableWithStackTrace(java.lang.String[])":[418,420],"StackTraceCleanerTest::::createThrowableWithStackTrace(java.lang.Throwable,java.lang.String[])":[422,427],"StackTraceCleanerTest::::createStackTrace(java.lang.String[])":[429,435],"StackTraceCleanerTest::::createStackTraceElement(java.lang.String)":[437,439],"StackTraceCleanerTest::::createCollapsedStackTraceElement(java.lang.String,int)":[441,454],"StackTraceCleanerTest.SelfReferencingThrowable::::getCause()":[461,464]},"reverse_method_lines_dic":{"48":"StackTraceCleaner::::cleanStackTrace(java.lang.Throwable)","49":"StackTraceCleaner::::cleanStackTrace(java.lang.Throwable)","50":"StackTraceCleaner::::cleanStackTrace(java.lang.Throwable)","69":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","70":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","71":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","72":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","73":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","74":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","75":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","76":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","77":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","78":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","79":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","80":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","81":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","82":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","83":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","84":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","85":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","86":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","87":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","88":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","89":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","90":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","91":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","92":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","93":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","94":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","95":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","96":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","97":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","98":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","99":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","100":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","101":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","102":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","103":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","104":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","105":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","106":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","107":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","108":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","109":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","110":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","111":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","112":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","113":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","114":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","115":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","116":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","117":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","118":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","119":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","120":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","121":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","122":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","123":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","124":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","125":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","126":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","127":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","128":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","129":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","130":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","131":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","132":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","133":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","134":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","135":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","136":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","137":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","138":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","139":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","140":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","141":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","142":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","143":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","144":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","145":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","146":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","147":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","148":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","149":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","150":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","151":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","152":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","153":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","154":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","155":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","156":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","157":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)","163":"StackTraceCleaner::::addToStreak(com.google.common.truth.StackTraceCleaner.StackTraceElementWrapper)","164":"StackTraceCleaner::::addToStreak(com.google.common.truth.StackTraceCleaner.StackTraceElementWrapper)","165":"StackTraceCleaner::::addToStreak(com.google.common.truth.StackTraceCleaner.StackTraceElementWrapper)","166":"StackTraceCleaner::::addToStreak(com.google.common.truth.StackTraceCleaner.StackTraceElementWrapper)","167":"StackTraceCleaner::::addToStreak(com.google.common.truth.StackTraceCleaner.StackTraceElementWrapper)","168":"StackTraceCleaner::::addToStreak(com.google.common.truth.StackTraceCleaner.StackTraceElementWrapper)","169":"StackTraceCleaner::::addToStreak(com.google.common.truth.StackTraceCleaner.StackTraceElementWrapper)","170":"StackTraceCleaner::::addToStreak(com.google.common.truth.StackTraceCleaner.StackTraceElementWrapper)","171":"StackTraceCleaner::::addToStreak(com.google.common.truth.StackTraceCleaner.StackTraceElementWrapper)","174":"StackTraceCleaner::::endStreak()","175":"StackTraceCleaner::::endStreak()","176":"StackTraceCleaner::::endStreak()","177":"StackTraceCleaner::::endStreak()","178":"StackTraceCleaner::::endStreak()","179":"StackTraceCleaner::::endStreak()","180":"StackTraceCleaner::::endStreak()","181":"StackTraceCleaner::::endStreak()","182":"StackTraceCleaner::::endStreak()","183":"StackTraceCleaner::::endStreak()","184":"StackTraceCleaner::::endStreak()","185":"StackTraceCleaner::::endStreak()","186":"StackTraceCleaner::::endStreak()","187":"StackTraceCleaner::::endStreak()","188":"StackTraceCleaner::::endStreak()","189":"StackTraceCleaner::::endStreak()","192":"StackTraceCleaner::::clearStreak()","193":"StackTraceCleaner::::clearStreak()","194":"StackTraceCleaner::::clearStreak()","195":"StackTraceCleaner::::clearStreak()","204":"StackTraceCleaner::::isTruthEntrance(java.lang.StackTraceElement)","205":"StackTraceCleaner::::isTruthEntrance(java.lang.StackTraceElement)","206":"StackTraceCleaner::::isTruthEntrance(java.lang.StackTraceElement)","207":"StackTraceCleaner::::isTruthEntrance(java.lang.StackTraceElement)","208":"StackTraceCleaner::::isTruthEntrance(java.lang.StackTraceElement)","209":"StackTraceCleaner::::isTruthEntrance(java.lang.StackTraceElement)","210":"StackTraceCleaner::::isTruthEntrance(java.lang.StackTraceElement)","211":"StackTraceCleaner::::isTruthEntrance(java.lang.StackTraceElement)","212":"StackTraceCleaner::::isTruthEntrance(java.lang.StackTraceElement)","213":"StackTraceCleaner::::isTruthEntrance(java.lang.StackTraceElement)","214":"StackTraceCleaner::::isTruthEntrance(java.lang.StackTraceElement)","215":"StackTraceCleaner::::isTruthEntrance(java.lang.StackTraceElement)","220":"StackTraceCleaner::::isJUnitIntrastructure(java.lang.StackTraceElement)","221":"StackTraceCleaner::::isJUnitIntrastructure(java.lang.StackTraceElement)","222":"StackTraceCleaner::::isJUnitIntrastructure(java.lang.StackTraceElement)","223":"StackTraceCleaner::::isJUnitIntrastructure(java.lang.StackTraceElement)","261":"StackTraceCleaner::::isSubtypeOf(java.lang.Class<?>,java.lang.String)","262":"StackTraceCleaner::::isSubtypeOf(java.lang.Class<?>,java.lang.String)","263":"StackTraceCleaner::::isSubtypeOf(java.lang.Class<?>,java.lang.String)","264":"StackTraceCleaner::::isSubtypeOf(java.lang.Class<?>,java.lang.String)","265":"StackTraceCleaner::::isSubtypeOf(java.lang.Class<?>,java.lang.String)","266":"StackTraceCleaner::::isSubtypeOf(java.lang.Class<?>,java.lang.String)","267":"StackTraceCleaner::::isSubtypeOf(java.lang.Class<?>,java.lang.String)","268":"StackTraceCleaner::::isSubtypeOf(java.lang.Class<?>,java.lang.String)","296":"StackTraceCleaner::::loadClass(java.lang.String)","297":"StackTraceCleaner::::loadClass(java.lang.String)","298":"StackTraceCleaner::::loadClass(java.lang.String)","299":"StackTraceCleaner::::loadClass(java.lang.String)","300":"StackTraceCleaner::::loadClass(java.lang.String)","301":"StackTraceCleaner::::loadClass(java.lang.String)","324":"StackTraceCleaner.StackTraceElementWrapper::::getStackFrameType()","325":"StackTraceCleaner.StackTraceElementWrapper::::getStackFrameType()","326":"StackTraceCleaner.StackTraceElementWrapper::::getStackFrameType()","329":"StackTraceCleaner.StackTraceElementWrapper::::getStackTraceElement()","330":"StackTraceCleaner.StackTraceElementWrapper::::getStackTraceElement()","331":"StackTraceCleaner.StackTraceElementWrapper::::getStackTraceElement()","334":"StackTraceCleaner::::createStreakReplacementFrame(com.google.common.truth.StackTraceCleaner.StackFrameType,int)","335":"StackTraceCleaner::::createStreakReplacementFrame(com.google.common.truth.StackTraceCleaner.StackFrameType,int)","336":"StackTraceCleaner::::createStreakReplacementFrame(com.google.common.truth.StackTraceCleaner.StackFrameType,int)","337":"StackTraceCleaner::::createStreakReplacementFrame(com.google.common.truth.StackTraceCleaner.StackFrameType,int)","338":"StackTraceCleaner::::createStreakReplacementFrame(com.google.common.truth.StackTraceCleaner.StackFrameType,int)","339":"StackTraceCleaner::::createStreakReplacementFrame(com.google.common.truth.StackTraceCleaner.StackFrameType,int)","340":"StackTraceCleaner::::createStreakReplacementFrame(com.google.common.truth.StackTraceCleaner.StackFrameType,int)","341":"StackTraceCleaner::::createStreakReplacementFrame(com.google.common.truth.StackTraceCleaner.StackFrameType,int)","342":"StackTraceCleaner::::createStreakReplacementFrame(com.google.common.truth.StackTraceCleaner.StackFrameType,int)","343":"StackTraceCleaner::::createStreakReplacementFrame(com.google.common.truth.StackTraceCleaner.StackFrameType,int)","344":"StackTraceCleaner::::createStreakReplacementFrame(com.google.common.truth.StackTraceCleaner.StackFrameType,int)","345":"StackTraceCleaner::::createStreakReplacementFrame(com.google.common.truth.StackTraceCleaner.StackFrameType,int)","346":"StackTraceCleaner::::createStreakReplacementFrame(com.google.common.truth.StackTraceCleaner.StackFrameType,int)","347":"StackTraceCleaner::::createStreakReplacementFrame(com.google.common.truth.StackTraceCleaner.StackFrameType,int)","348":"StackTraceCleaner::::createStreakReplacementFrame(com.google.common.truth.StackTraceCleaner.StackFrameType,int)","349":"StackTraceCleaner::::createStreakReplacementFrame(com.google.common.truth.StackTraceCleaner.StackFrameType,int)","374":"StackTraceCleaner.StackFrameType::::forClassName(java.lang.String)","375":"StackTraceCleaner.StackFrameType::::forClassName(java.lang.String)","376":"StackTraceCleaner.StackFrameType::::forClassName(java.lang.String)","377":"StackTraceCleaner.StackFrameType::::forClassName(java.lang.String)","378":"StackTraceCleaner.StackFrameType::::forClassName(java.lang.String)","379":"StackTraceCleaner.StackFrameType::::forClassName(java.lang.String)","380":"StackTraceCleaner.StackFrameType::::forClassName(java.lang.String)","381":"StackTraceCleaner.StackFrameType::::forClassName(java.lang.String)","382":"StackTraceCleaner.StackFrameType::::forClassName(java.lang.String)","383":"StackTraceCleaner.StackFrameType::::forClassName(java.lang.String)","384":"StackTraceCleaner.StackFrameType::::forClassName(java.lang.String)","385":"StackTraceCleaner.StackFrameType::::forClassName(java.lang.String)","386":"StackTraceCleaner.StackFrameType::::forClassName(java.lang.String)","387":"StackTraceCleaner.StackFrameType::::forClassName(java.lang.String)","388":"StackTraceCleaner.StackFrameType::::forClassName(java.lang.String)","389":"StackTraceCleaner.StackFrameType::::forClassName(java.lang.String)","390":"StackTraceCleaner.StackFrameType::::forClassName(java.lang.String)","391":"StackTraceCleaner.StackFrameType::::forClassName(java.lang.String)","392":"StackTraceCleaner.StackFrameType::::forClassName(java.lang.String)","393":"StackTraceCleaner.StackFrameType::::forClassName(java.lang.String)","410":"StackTraceCleaner.StackFrameType::::getName()","411":"StackTraceCleaner.StackFrameType::::getName()","412":"StackTraceCleaner.StackFrameType::::getName()","418":"StackTraceCleaner.StackFrameType::::belongsToType(java.lang.String)","419":"StackTraceCleaner.StackFrameType::::belongsToType(java.lang.String)","420":"StackTraceCleaner.StackFrameType::::belongsToType(java.lang.String)","421":"StackTraceCleaner.StackFrameType::::belongsToType(java.lang.String)","422":"StackTraceCleaner.StackFrameType::::belongsToType(java.lang.String)","423":"StackTraceCleaner.StackFrameType::::belongsToType(java.lang.String)","424":"StackTraceCleaner.StackFrameType::::belongsToType(java.lang.String)","425":"StackTraceCleaner.StackFrameType::::belongsToType(java.lang.String)","426":"StackTraceCleaner.StackFrameType::::belongsToType(java.lang.String)","427":"StackTraceCleaner.StackFrameType::::belongsToType(java.lang.String)","435":"StackTraceCleaner::::isStackTraceCleaningDisabled()","436":"StackTraceCleaner::::isStackTraceCleaningDisabled()","437":"StackTraceCleaner::::isStackTraceCleaningDisabled()","438":"StackTraceCleaner::::isStackTraceCleaningDisabled()","439":"StackTraceCleaner::::isStackTraceCleaningDisabled()","440":"StackTraceCleaner::::isStackTraceCleaningDisabled()","441":"StackTraceCleaner::::isStackTraceCleaningDisabled()","442":"StackTraceCleaner::::isStackTraceCleaningDisabled()","443":"StackTraceCleaner::::isStackTraceCleaningDisabled()","444":"StackTraceCleaner::::isStackTraceCleaningDisabled()","445":"StackTraceCleaner::::isStackTraceCleaningDisabled()"},"test_reverse_method_lines_dic":{"45":"StackTraceCleanerTest::::realWorld()","46":"StackTraceCleanerTest::::realWorld()","47":"StackTraceCleanerTest::::realWorld()","48":"StackTraceCleanerTest::::realWorld()","49":"StackTraceCleanerTest::::realWorld()","50":"StackTraceCleanerTest::::realWorld()","51":"StackTraceCleanerTest::::realWorld()","52":"StackTraceCleanerTest::::realWorld()","53":"StackTraceCleanerTest::::realWorld()","54":"StackTraceCleanerTest::::realWorld()","55":"StackTraceCleanerTest::::realWorld()","56":"StackTraceCleanerTest::::realWorld()","57":"StackTraceCleanerTest::::realWorld()","58":"StackTraceCleanerTest::::realWorld()","60":"StackTraceCleanerTest::::emptyTrace()","61":"StackTraceCleanerTest::::emptyTrace()","62":"StackTraceCleanerTest::::emptyTrace()","63":"StackTraceCleanerTest::::emptyTrace()","64":"StackTraceCleanerTest::::emptyTrace()","65":"StackTraceCleanerTest::::emptyTrace()","66":"StackTraceCleanerTest::::emptyTrace()","67":"StackTraceCleanerTest::::emptyTrace()","69":"StackTraceCleanerTest::::collapseStreaks()","70":"StackTraceCleanerTest::::collapseStreaks()","71":"StackTraceCleanerTest::::collapseStreaks()","72":"StackTraceCleanerTest::::collapseStreaks()","73":"StackTraceCleanerTest::::collapseStreaks()","74":"StackTraceCleanerTest::::collapseStreaks()","75":"StackTraceCleanerTest::::collapseStreaks()","76":"StackTraceCleanerTest::::collapseStreaks()","77":"StackTraceCleanerTest::::collapseStreaks()","78":"StackTraceCleanerTest::::collapseStreaks()","79":"StackTraceCleanerTest::::collapseStreaks()","80":"StackTraceCleanerTest::::collapseStreaks()","81":"StackTraceCleanerTest::::collapseStreaks()","82":"StackTraceCleanerTest::::collapseStreaks()","83":"StackTraceCleanerTest::::collapseStreaks()","84":"StackTraceCleanerTest::::collapseStreaks()","85":"StackTraceCleanerTest::::collapseStreaks()","86":"StackTraceCleanerTest::::collapseStreaks()","87":"StackTraceCleanerTest::::collapseStreaks()","88":"StackTraceCleanerTest::::collapseStreaks()","89":"StackTraceCleanerTest::::collapseStreaks()","90":"StackTraceCleanerTest::::collapseStreaks()","92":"StackTraceCleanerTest::::assertionsActuallyUseCleaner()","93":"StackTraceCleanerTest::::assertionsActuallyUseCleaner()","94":"StackTraceCleanerTest::::assertionsActuallyUseCleaner()","95":"StackTraceCleanerTest::::assertionsActuallyUseCleaner()","96":"StackTraceCleanerTest::::assertionsActuallyUseCleaner()","97":"StackTraceCleanerTest::::assertionsActuallyUseCleaner()","99":"StackTraceCleanerTest::::assertionsActuallyUseCleaner_comparisonFailure()","100":"StackTraceCleanerTest::::assertionsActuallyUseCleaner_comparisonFailure()","101":"StackTraceCleanerTest::::assertionsActuallyUseCleaner_comparisonFailure()","102":"StackTraceCleanerTest::::assertionsActuallyUseCleaner_comparisonFailure()","103":"StackTraceCleanerTest::::assertionsActuallyUseCleaner_comparisonFailure()","104":"StackTraceCleanerTest::::assertionsActuallyUseCleaner_comparisonFailure()","106":"StackTraceCleanerTest::::dontCollapseStreaksOfOneFrame()","107":"StackTraceCleanerTest::::dontCollapseStreaksOfOneFrame()","108":"StackTraceCleanerTest::::dontCollapseStreaksOfOneFrame()","109":"StackTraceCleanerTest::::dontCollapseStreaksOfOneFrame()","110":"StackTraceCleanerTest::::dontCollapseStreaksOfOneFrame()","111":"StackTraceCleanerTest::::dontCollapseStreaksOfOneFrame()","112":"StackTraceCleanerTest::::dontCollapseStreaksOfOneFrame()","113":"StackTraceCleanerTest::::dontCollapseStreaksOfOneFrame()","114":"StackTraceCleanerTest::::dontCollapseStreaksOfOneFrame()","115":"StackTraceCleanerTest::::dontCollapseStreaksOfOneFrame()","116":"StackTraceCleanerTest::::dontCollapseStreaksOfOneFrame()","117":"StackTraceCleanerTest::::dontCollapseStreaksOfOneFrame()","118":"StackTraceCleanerTest::::dontCollapseStreaksOfOneFrame()","119":"StackTraceCleanerTest::::dontCollapseStreaksOfOneFrame()","120":"StackTraceCleanerTest::::dontCollapseStreaksOfOneFrame()","121":"StackTraceCleanerTest::::dontCollapseStreaksOfOneFrame()","122":"StackTraceCleanerTest::::dontCollapseStreaksOfOneFrame()","123":"StackTraceCleanerTest::::dontCollapseStreaksOfOneFrame()","124":"StackTraceCleanerTest::::dontCollapseStreaksOfOneFrame()","125":"StackTraceCleanerTest::::dontCollapseStreaksOfOneFrame()","126":"StackTraceCleanerTest::::dontCollapseStreaksOfOneFrame()","127":"StackTraceCleanerTest::::dontCollapseStreaksOfOneFrame()","128":"StackTraceCleanerTest::::dontCollapseStreaksOfOneFrame()","129":"StackTraceCleanerTest::::dontCollapseStreaksOfOneFrame()","130":"StackTraceCleanerTest::::dontCollapseStreaksOfOneFrame()","131":"StackTraceCleanerTest::::dontCollapseStreaksOfOneFrame()","132":"StackTraceCleanerTest::::dontCollapseStreaksOfOneFrame()","133":"StackTraceCleanerTest::::dontCollapseStreaksOfOneFrame()","135":"StackTraceCleanerTest::::mixedStreaks()","136":"StackTraceCleanerTest::::mixedStreaks()","137":"StackTraceCleanerTest::::mixedStreaks()","138":"StackTraceCleanerTest::::mixedStreaks()","139":"StackTraceCleanerTest::::mixedStreaks()","140":"StackTraceCleanerTest::::mixedStreaks()","141":"StackTraceCleanerTest::::mixedStreaks()","142":"StackTraceCleanerTest::::mixedStreaks()","143":"StackTraceCleanerTest::::mixedStreaks()","144":"StackTraceCleanerTest::::mixedStreaks()","145":"StackTraceCleanerTest::::mixedStreaks()","146":"StackTraceCleanerTest::::mixedStreaks()","147":"StackTraceCleanerTest::::mixedStreaks()","148":"StackTraceCleanerTest::::mixedStreaks()","149":"StackTraceCleanerTest::::mixedStreaks()","150":"StackTraceCleanerTest::::mixedStreaks()","151":"StackTraceCleanerTest::::mixedStreaks()","152":"StackTraceCleanerTest::::mixedStreaks()","153":"StackTraceCleanerTest::::mixedStreaks()","154":"StackTraceCleanerTest::::mixedStreaks()","155":"StackTraceCleanerTest::::mixedStreaks()","156":"StackTraceCleanerTest::::mixedStreaks()","157":"StackTraceCleanerTest::::mixedStreaks()","158":"StackTraceCleanerTest::::mixedStreaks()","159":"StackTraceCleanerTest::::mixedStreaks()","160":"StackTraceCleanerTest::::mixedStreaks()","161":"StackTraceCleanerTest::::mixedStreaks()","163":"StackTraceCleanerTest::::classNestedInSubject()","164":"StackTraceCleanerTest::::classNestedInSubject()","165":"StackTraceCleanerTest::::classNestedInSubject()","166":"StackTraceCleanerTest::::classNestedInSubject()","167":"StackTraceCleanerTest::::classNestedInSubject()","168":"StackTraceCleanerTest::::classNestedInSubject()","169":"StackTraceCleanerTest::::classNestedInSubject()","170":"StackTraceCleanerTest::::classNestedInSubject()","171":"StackTraceCleanerTest::::classNestedInSubject()","172":"StackTraceCleanerTest::::classNestedInSubject()","173":"StackTraceCleanerTest::::classNestedInSubject()","174":"StackTraceCleanerTest::::classNestedInSubject()","175":"StackTraceCleanerTest::::classNestedInSubject()","176":"StackTraceCleanerTest::::classNestedInSubject()","178":"StackTraceCleanerTest::::removesTestingAndReflectiveFramesOnBottom()","179":"StackTraceCleanerTest::::removesTestingAndReflectiveFramesOnBottom()","180":"StackTraceCleanerTest::::removesTestingAndReflectiveFramesOnBottom()","181":"StackTraceCleanerTest::::removesTestingAndReflectiveFramesOnBottom()","182":"StackTraceCleanerTest::::removesTestingAndReflectiveFramesOnBottom()","183":"StackTraceCleanerTest::::removesTestingAndReflectiveFramesOnBottom()","184":"StackTraceCleanerTest::::removesTestingAndReflectiveFramesOnBottom()","185":"StackTraceCleanerTest::::removesTestingAndReflectiveFramesOnBottom()","186":"StackTraceCleanerTest::::removesTestingAndReflectiveFramesOnBottom()","187":"StackTraceCleanerTest::::removesTestingAndReflectiveFramesOnBottom()","188":"StackTraceCleanerTest::::removesTestingAndReflectiveFramesOnBottom()","189":"StackTraceCleanerTest::::removesTestingAndReflectiveFramesOnBottom()","190":"StackTraceCleanerTest::::removesTestingAndReflectiveFramesOnBottom()","191":"StackTraceCleanerTest::::removesTestingAndReflectiveFramesOnBottom()","192":"StackTraceCleanerTest::::removesTestingAndReflectiveFramesOnBottom()","193":"StackTraceCleanerTest::::removesTestingAndReflectiveFramesOnBottom()","194":"StackTraceCleanerTest::::removesTestingAndReflectiveFramesOnBottom()","195":"StackTraceCleanerTest::::removesTestingAndReflectiveFramesOnBottom()","196":"StackTraceCleanerTest::::removesTestingAndReflectiveFramesOnBottom()","197":"StackTraceCleanerTest::::removesTestingAndReflectiveFramesOnBottom()","198":"StackTraceCleanerTest::::removesTestingAndReflectiveFramesOnBottom()","199":"StackTraceCleanerTest::::removesTestingAndReflectiveFramesOnBottom()","200":"StackTraceCleanerTest::::removesTestingAndReflectiveFramesOnBottom()","201":"StackTraceCleanerTest::::removesTestingAndReflectiveFramesOnBottom()","203":"StackTraceCleanerTest::::packagesAreIgnoredForTestClasses()","204":"StackTraceCleanerTest::::packagesAreIgnoredForTestClasses()","205":"StackTraceCleanerTest::::packagesAreIgnoredForTestClasses()","206":"StackTraceCleanerTest::::packagesAreIgnoredForTestClasses()","207":"StackTraceCleanerTest::::packagesAreIgnoredForTestClasses()","208":"StackTraceCleanerTest::::packagesAreIgnoredForTestClasses()","209":"StackTraceCleanerTest::::packagesAreIgnoredForTestClasses()","210":"StackTraceCleanerTest::::packagesAreIgnoredForTestClasses()","211":"StackTraceCleanerTest::::packagesAreIgnoredForTestClasses()","212":"StackTraceCleanerTest::::packagesAreIgnoredForTestClasses()","213":"StackTraceCleanerTest::::packagesAreIgnoredForTestClasses()","214":"StackTraceCleanerTest::::packagesAreIgnoredForTestClasses()","215":"StackTraceCleanerTest::::packagesAreIgnoredForTestClasses()","216":"StackTraceCleanerTest::::packagesAreIgnoredForTestClasses()","217":"StackTraceCleanerTest::::packagesAreIgnoredForTestClasses()","218":"StackTraceCleanerTest::::packagesAreIgnoredForTestClasses()","219":"StackTraceCleanerTest::::packagesAreIgnoredForTestClasses()","221":"StackTraceCleanerTest::::allFramesAboveStandardSubjectBuilderCleaned()","222":"StackTraceCleanerTest::::allFramesAboveStandardSubjectBuilderCleaned()","223":"StackTraceCleanerTest::::allFramesAboveStandardSubjectBuilderCleaned()","224":"StackTraceCleanerTest::::allFramesAboveStandardSubjectBuilderCleaned()","225":"StackTraceCleanerTest::::allFramesAboveStandardSubjectBuilderCleaned()","226":"StackTraceCleanerTest::::allFramesAboveStandardSubjectBuilderCleaned()","227":"StackTraceCleanerTest::::allFramesAboveStandardSubjectBuilderCleaned()","228":"StackTraceCleanerTest::::allFramesAboveStandardSubjectBuilderCleaned()","229":"StackTraceCleanerTest::::allFramesAboveStandardSubjectBuilderCleaned()","230":"StackTraceCleanerTest::::allFramesAboveStandardSubjectBuilderCleaned()","231":"StackTraceCleanerTest::::allFramesAboveStandardSubjectBuilderCleaned()","232":"StackTraceCleanerTest::::allFramesAboveStandardSubjectBuilderCleaned()","233":"StackTraceCleanerTest::::allFramesAboveStandardSubjectBuilderCleaned()","234":"StackTraceCleanerTest::::allFramesAboveStandardSubjectBuilderCleaned()","235":"StackTraceCleanerTest::::allFramesAboveStandardSubjectBuilderCleaned()","236":"StackTraceCleanerTest::::allFramesAboveStandardSubjectBuilderCleaned()","237":"StackTraceCleanerTest::::allFramesAboveStandardSubjectBuilderCleaned()","239":"StackTraceCleanerTest::::allFramesAboveSubjectCleaned()","240":"StackTraceCleanerTest::::allFramesAboveSubjectCleaned()","241":"StackTraceCleanerTest::::allFramesAboveSubjectCleaned()","242":"StackTraceCleanerTest::::allFramesAboveSubjectCleaned()","243":"StackTraceCleanerTest::::allFramesAboveSubjectCleaned()","244":"StackTraceCleanerTest::::allFramesAboveSubjectCleaned()","245":"StackTraceCleanerTest::::allFramesAboveSubjectCleaned()","246":"StackTraceCleanerTest::::allFramesAboveSubjectCleaned()","247":"StackTraceCleanerTest::::allFramesAboveSubjectCleaned()","248":"StackTraceCleanerTest::::allFramesAboveSubjectCleaned()","249":"StackTraceCleanerTest::::allFramesAboveSubjectCleaned()","250":"StackTraceCleanerTest::::allFramesAboveSubjectCleaned()","251":"StackTraceCleanerTest::::allFramesAboveSubjectCleaned()","252":"StackTraceCleanerTest::::allFramesAboveSubjectCleaned()","253":"StackTraceCleanerTest::::allFramesAboveSubjectCleaned()","254":"StackTraceCleanerTest::::allFramesAboveSubjectCleaned()","255":"StackTraceCleanerTest::::allFramesAboveSubjectCleaned()","257":"StackTraceCleanerTest::::allFramesBelowJUnitStatementCleaned()","258":"StackTraceCleanerTest::::allFramesBelowJUnitStatementCleaned()","259":"StackTraceCleanerTest::::allFramesBelowJUnitStatementCleaned()","260":"StackTraceCleanerTest::::allFramesBelowJUnitStatementCleaned()","261":"StackTraceCleanerTest::::allFramesBelowJUnitStatementCleaned()","262":"StackTraceCleanerTest::::allFramesBelowJUnitStatementCleaned()","263":"StackTraceCleanerTest::::allFramesBelowJUnitStatementCleaned()","264":"StackTraceCleanerTest::::allFramesBelowJUnitStatementCleaned()","265":"StackTraceCleanerTest::::allFramesBelowJUnitStatementCleaned()","266":"StackTraceCleanerTest::::allFramesBelowJUnitStatementCleaned()","267":"StackTraceCleanerTest::::allFramesBelowJUnitStatementCleaned()","268":"StackTraceCleanerTest::::allFramesBelowJUnitStatementCleaned()","269":"StackTraceCleanerTest::::allFramesBelowJUnitStatementCleaned()","270":"StackTraceCleanerTest::::allFramesBelowJUnitStatementCleaned()","271":"StackTraceCleanerTest::::allFramesBelowJUnitStatementCleaned()","272":"StackTraceCleanerTest::::allFramesBelowJUnitStatementCleaned()","273":"StackTraceCleanerTest::::allFramesBelowJUnitStatementCleaned()","275":"StackTraceCleanerTest::::failureFromJUnitInfrastructureIncludesItInStack()","276":"StackTraceCleanerTest::::failureFromJUnitInfrastructureIncludesItInStack()","277":"StackTraceCleanerTest::::failureFromJUnitInfrastructureIncludesItInStack()","278":"StackTraceCleanerTest::::failureFromJUnitInfrastructureIncludesItInStack()","279":"StackTraceCleanerTest::::failureFromJUnitInfrastructureIncludesItInStack()","280":"StackTraceCleanerTest::::failureFromJUnitInfrastructureIncludesItInStack()","281":"StackTraceCleanerTest::::failureFromJUnitInfrastructureIncludesItInStack()","282":"StackTraceCleanerTest::::failureFromJUnitInfrastructureIncludesItInStack()","283":"StackTraceCleanerTest::::failureFromJUnitInfrastructureIncludesItInStack()","284":"StackTraceCleanerTest::::failureFromJUnitInfrastructureIncludesItInStack()","285":"StackTraceCleanerTest::::failureFromJUnitInfrastructureIncludesItInStack()","286":"StackTraceCleanerTest::::failureFromJUnitInfrastructureIncludesItInStack()","287":"StackTraceCleanerTest::::failureFromJUnitInfrastructureIncludesItInStack()","288":"StackTraceCleanerTest::::failureFromJUnitInfrastructureIncludesItInStack()","289":"StackTraceCleanerTest::::failureFromJUnitInfrastructureIncludesItInStack()","290":"StackTraceCleanerTest::::failureFromJUnitInfrastructureIncludesItInStack()","291":"StackTraceCleanerTest::::failureFromJUnitInfrastructureIncludesItInStack()","293":"StackTraceCleanerTest::::allFramesBelowJUnitRunnerCleaned()","294":"StackTraceCleanerTest::::allFramesBelowJUnitRunnerCleaned()","295":"StackTraceCleanerTest::::allFramesBelowJUnitRunnerCleaned()","296":"StackTraceCleanerTest::::allFramesBelowJUnitRunnerCleaned()","297":"StackTraceCleanerTest::::allFramesBelowJUnitRunnerCleaned()","298":"StackTraceCleanerTest::::allFramesBelowJUnitRunnerCleaned()","299":"StackTraceCleanerTest::::allFramesBelowJUnitRunnerCleaned()","300":"StackTraceCleanerTest::::allFramesBelowJUnitRunnerCleaned()","301":"StackTraceCleanerTest::::allFramesBelowJUnitRunnerCleaned()","302":"StackTraceCleanerTest::::allFramesBelowJUnitRunnerCleaned()","303":"StackTraceCleanerTest::::allFramesBelowJUnitRunnerCleaned()","304":"StackTraceCleanerTest::::allFramesBelowJUnitRunnerCleaned()","305":"StackTraceCleanerTest::::allFramesBelowJUnitRunnerCleaned()","306":"StackTraceCleanerTest::::allFramesBelowJUnitRunnerCleaned()","307":"StackTraceCleanerTest::::allFramesBelowJUnitRunnerCleaned()","308":"StackTraceCleanerTest::::allFramesBelowJUnitRunnerCleaned()","309":"StackTraceCleanerTest::::allFramesBelowJUnitRunnerCleaned()","320":"StackTraceCleanerTest::::truthFrameWithOutSubject_shouldNotCleaned()","321":"StackTraceCleanerTest::::truthFrameWithOutSubject_shouldNotCleaned()","322":"StackTraceCleanerTest::::truthFrameWithOutSubject_shouldNotCleaned()","323":"StackTraceCleanerTest::::truthFrameWithOutSubject_shouldNotCleaned()","324":"StackTraceCleanerTest::::truthFrameWithOutSubject_shouldNotCleaned()","325":"StackTraceCleanerTest::::truthFrameWithOutSubject_shouldNotCleaned()","326":"StackTraceCleanerTest::::truthFrameWithOutSubject_shouldNotCleaned()","327":"StackTraceCleanerTest::::truthFrameWithOutSubject_shouldNotCleaned()","328":"StackTraceCleanerTest::::truthFrameWithOutSubject_shouldNotCleaned()","329":"StackTraceCleanerTest::::truthFrameWithOutSubject_shouldNotCleaned()","330":"StackTraceCleanerTest::::truthFrameWithOutSubject_shouldNotCleaned()","331":"StackTraceCleanerTest::::truthFrameWithOutSubject_shouldNotCleaned()","332":"StackTraceCleanerTest::::truthFrameWithOutSubject_shouldNotCleaned()","333":"StackTraceCleanerTest::::truthFrameWithOutSubject_shouldNotCleaned()","334":"StackTraceCleanerTest::::truthFrameWithOutSubject_shouldNotCleaned()","335":"StackTraceCleanerTest::::truthFrameWithOutSubject_shouldNotCleaned()","336":"StackTraceCleanerTest::::truthFrameWithOutSubject_shouldNotCleaned()","337":"StackTraceCleanerTest::::truthFrameWithOutSubject_shouldNotCleaned()","338":"StackTraceCleanerTest::::truthFrameWithOutSubject_shouldNotCleaned()","340":"StackTraceCleanerTest::::causingThrowablesAreAlsoCleaned()","341":"StackTraceCleanerTest::::causingThrowablesAreAlsoCleaned()","342":"StackTraceCleanerTest::::causingThrowablesAreAlsoCleaned()","343":"StackTraceCleanerTest::::causingThrowablesAreAlsoCleaned()","344":"StackTraceCleanerTest::::causingThrowablesAreAlsoCleaned()","345":"StackTraceCleanerTest::::causingThrowablesAreAlsoCleaned()","346":"StackTraceCleanerTest::::causingThrowablesAreAlsoCleaned()","347":"StackTraceCleanerTest::::causingThrowablesAreAlsoCleaned()","348":"StackTraceCleanerTest::::causingThrowablesAreAlsoCleaned()","349":"StackTraceCleanerTest::::causingThrowablesAreAlsoCleaned()","350":"StackTraceCleanerTest::::causingThrowablesAreAlsoCleaned()","351":"StackTraceCleanerTest::::causingThrowablesAreAlsoCleaned()","352":"StackTraceCleanerTest::::causingThrowablesAreAlsoCleaned()","353":"StackTraceCleanerTest::::causingThrowablesAreAlsoCleaned()","355":"StackTraceCleanerTest::::suppressedThrowablesAreAlsoCleaned()","356":"StackTraceCleanerTest::::suppressedThrowablesAreAlsoCleaned()","357":"StackTraceCleanerTest::::suppressedThrowablesAreAlsoCleaned()","358":"StackTraceCleanerTest::::suppressedThrowablesAreAlsoCleaned()","359":"StackTraceCleanerTest::::suppressedThrowablesAreAlsoCleaned()","360":"StackTraceCleanerTest::::suppressedThrowablesAreAlsoCleaned()","361":"StackTraceCleanerTest::::suppressedThrowablesAreAlsoCleaned()","362":"StackTraceCleanerTest::::suppressedThrowablesAreAlsoCleaned()","363":"StackTraceCleanerTest::::suppressedThrowablesAreAlsoCleaned()","364":"StackTraceCleanerTest::::suppressedThrowablesAreAlsoCleaned()","365":"StackTraceCleanerTest::::suppressedThrowablesAreAlsoCleaned()","366":"StackTraceCleanerTest::::suppressedThrowablesAreAlsoCleaned()","367":"StackTraceCleanerTest::::suppressedThrowablesAreAlsoCleaned()","368":"StackTraceCleanerTest::::suppressedThrowablesAreAlsoCleaned()","369":"StackTraceCleanerTest::::suppressedThrowablesAreAlsoCleaned()","370":"StackTraceCleanerTest::::suppressedThrowablesAreAlsoCleaned()","371":"StackTraceCleanerTest::::suppressedThrowablesAreAlsoCleaned()","373":"StackTraceCleanerTest::::mixedCausingAndSuppressThrowablesAreCleaned()","374":"StackTraceCleanerTest::::mixedCausingAndSuppressThrowablesAreCleaned()","375":"StackTraceCleanerTest::::mixedCausingAndSuppressThrowablesAreCleaned()","376":"StackTraceCleanerTest::::mixedCausingAndSuppressThrowablesAreCleaned()","377":"StackTraceCleanerTest::::mixedCausingAndSuppressThrowablesAreCleaned()","378":"StackTraceCleanerTest::::mixedCausingAndSuppressThrowablesAreCleaned()","379":"StackTraceCleanerTest::::mixedCausingAndSuppressThrowablesAreCleaned()","380":"StackTraceCleanerTest::::mixedCausingAndSuppressThrowablesAreCleaned()","381":"StackTraceCleanerTest::::mixedCausingAndSuppressThrowablesAreCleaned()","382":"StackTraceCleanerTest::::mixedCausingAndSuppressThrowablesAreCleaned()","383":"StackTraceCleanerTest::::mixedCausingAndSuppressThrowablesAreCleaned()","384":"StackTraceCleanerTest::::mixedCausingAndSuppressThrowablesAreCleaned()","385":"StackTraceCleanerTest::::mixedCausingAndSuppressThrowablesAreCleaned()","386":"StackTraceCleanerTest::::mixedCausingAndSuppressThrowablesAreCleaned()","387":"StackTraceCleanerTest::::mixedCausingAndSuppressThrowablesAreCleaned()","388":"StackTraceCleanerTest::::mixedCausingAndSuppressThrowablesAreCleaned()","389":"StackTraceCleanerTest::::mixedCausingAndSuppressThrowablesAreCleaned()","390":"StackTraceCleanerTest::::mixedCausingAndSuppressThrowablesAreCleaned()","391":"StackTraceCleanerTest::::mixedCausingAndSuppressThrowablesAreCleaned()","392":"StackTraceCleanerTest::::mixedCausingAndSuppressThrowablesAreCleaned()","393":"StackTraceCleanerTest::::mixedCausingAndSuppressThrowablesAreCleaned()","394":"StackTraceCleanerTest::::mixedCausingAndSuppressThrowablesAreCleaned()","395":"StackTraceCleanerTest::::mixedCausingAndSuppressThrowablesAreCleaned()","397":"StackTraceCleanerTest::::cleaningTraceIsIdempotent()","398":"StackTraceCleanerTest::::cleaningTraceIsIdempotent()","399":"StackTraceCleanerTest::::cleaningTraceIsIdempotent()","400":"StackTraceCleanerTest::::cleaningTraceIsIdempotent()","401":"StackTraceCleanerTest::::cleaningTraceIsIdempotent()","402":"StackTraceCleanerTest::::cleaningTraceIsIdempotent()","403":"StackTraceCleanerTest::::cleaningTraceIsIdempotent()","404":"StackTraceCleanerTest::::cleaningTraceIsIdempotent()","405":"StackTraceCleanerTest::::cleaningTraceIsIdempotent()","407":"StackTraceCleanerTest::::cyclesAreHandled()","408":"StackTraceCleanerTest::::cyclesAreHandled()","409":"StackTraceCleanerTest::::cyclesAreHandled()","410":"StackTraceCleanerTest::::cyclesAreHandled()","411":"StackTraceCleanerTest::::cyclesAreHandled()","412":"StackTraceCleanerTest::::cyclesAreHandled()","413":"StackTraceCleanerTest::::cyclesAreHandled()","414":"StackTraceCleanerTest::::cyclesAreHandled()","415":"StackTraceCleanerTest::::cyclesAreHandled()","416":"StackTraceCleanerTest::::cyclesAreHandled()","418":"StackTraceCleanerTest::::createThrowableWithStackTrace(java.lang.String[])","419":"StackTraceCleanerTest::::createThrowableWithStackTrace(java.lang.String[])","420":"StackTraceCleanerTest::::createThrowableWithStackTrace(java.lang.String[])","422":"StackTraceCleanerTest::::createThrowableWithStackTrace(java.lang.Throwable,java.lang.String[])","423":"StackTraceCleanerTest::::createThrowableWithStackTrace(java.lang.Throwable,java.lang.String[])","424":"StackTraceCleanerTest::::createThrowableWithStackTrace(java.lang.Throwable,java.lang.String[])","425":"StackTraceCleanerTest::::createThrowableWithStackTrace(java.lang.Throwable,java.lang.String[])","426":"StackTraceCleanerTest::::createThrowableWithStackTrace(java.lang.Throwable,java.lang.String[])","427":"StackTraceCleanerTest::::createThrowableWithStackTrace(java.lang.Throwable,java.lang.String[])","429":"StackTraceCleanerTest::::createStackTrace(java.lang.String[])","430":"StackTraceCleanerTest::::createStackTrace(java.lang.String[])","431":"StackTraceCleanerTest::::createStackTrace(java.lang.String[])","432":"StackTraceCleanerTest::::createStackTrace(java.lang.String[])","433":"StackTraceCleanerTest::::createStackTrace(java.lang.String[])","434":"StackTraceCleanerTest::::createStackTrace(java.lang.String[])","435":"StackTraceCleanerTest::::createStackTrace(java.lang.String[])","437":"StackTraceCleanerTest::::createStackTraceElement(java.lang.String)","438":"StackTraceCleanerTest::::createStackTraceElement(java.lang.String)","439":"StackTraceCleanerTest::::createStackTraceElement(java.lang.String)","441":"StackTraceCleanerTest::::createCollapsedStackTraceElement(java.lang.String,int)","442":"StackTraceCleanerTest::::createCollapsedStackTraceElement(java.lang.String,int)","443":"StackTraceCleanerTest::::createCollapsedStackTraceElement(java.lang.String,int)","444":"StackTraceCleanerTest::::createCollapsedStackTraceElement(java.lang.String,int)","445":"StackTraceCleanerTest::::createCollapsedStackTraceElement(java.lang.String,int)","446":"StackTraceCleanerTest::::createCollapsedStackTraceElement(java.lang.String,int)","447":"StackTraceCleanerTest::::createCollapsedStackTraceElement(java.lang.String,int)","448":"StackTraceCleanerTest::::createCollapsedStackTraceElement(java.lang.String,int)","449":"StackTraceCleanerTest::::createCollapsedStackTraceElement(java.lang.String,int)","450":"StackTraceCleanerTest::::createCollapsedStackTraceElement(java.lang.String,int)","451":"StackTraceCleanerTest::::createCollapsedStackTraceElement(java.lang.String,int)","452":"StackTraceCleanerTest::::createCollapsedStackTraceElement(java.lang.String,int)","453":"StackTraceCleanerTest::::createCollapsedStackTraceElement(java.lang.String,int)","454":"StackTraceCleanerTest::::createCollapsedStackTraceElement(java.lang.String,int)","461":"StackTraceCleanerTest.SelfReferencingThrowable::::getCause()","462":"StackTraceCleanerTest.SelfReferencingThrowable::::getCause()","463":"StackTraceCleanerTest.SelfReferencingThrowable::::getCause()","464":"StackTraceCleanerTest.SelfReferencingThrowable::::getCause()"},"tests":[{"test_lines":[45,58],"covered_lines":[49,50,53,54,55,56,62,63,64,72,83,86,88,90,91,94,96,98,99,107,111,112,115,116,117,118,122,124,128,131,132,133,134,135,136,137,141,144,145,146,148,151,154,157,164,165,166,167,169,171,175,176,179,184,185,188,189,193,194,195,197,198,199,201,202,205,214,217,218,222,229,232,234,235,236,237,239,257,258,262,263,264,267,274,277,278,279,282,283,298,299,300,314,315,318,319,320,321,325,330,336,339,355,356,357,366,367,380,381,383,386,387,388,392,404,405,406,407,411,419,421,422,423,425,426,438,439],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[60,67],"covered_lines":[49,50,53,54,55,56,62,63,64,72,83,86,88,90,91,94,96,98,107,108,111,128,131,132,133,144,145,148,151,154,157,175,176,197,198,199,201,202,217,218,438,439],"label":"StackTraceCleaner::::clean(java.util.Set<java.lang.Throwable>)"},{"test_lines":[69,90],"covered_lines":[49,50,53,54,55,56,62,63,64,72,83,86,88,90,91,94,96,98,99,107,111,112,115,116,117,118,122,124,128,131,132,133,134,135,136,144,145,146,148,151,154,157,164,165,166,167,169,171,175,176,179,184,185,188,189,193,194,195,197,198,199,201,202,205,214,217,218,222,230,231,275,276,298,299,314,315,318,319,320,321,325,330,336,339,355,356,357,366,367,380,381,383,386,387,388,392,404,405,406,407,411,419,421,422,423,425,426,438,439],"label":"StackTraceCleaner::::cleanStackTrace(java.lang.Throwable)"},{"test_lines":[92,97],"covered_lines":[49,50,53,54,55,56,62,63,64,72,83,86,88,90,91,94,96,98,99,107,111,112,115,116,117,118,122,124,128,131,132,133,134,135,136,137,141,144,145,146,148,151,154,157,164,165,166,167,169,171,175,176,179,184,185,188,189,193,194,195,197,198,199,201,202,205,214,217,218,222,229,232,234,235,236,237,239,257,258,262,263,264,267,274,277,278,279,282,283,298,299,300,314,315,318,319,320,321,325,330,336,339,355,356,357,366,367,380,381,383,386,387,388,404,405,406,407,411,419,421,422,423,425,426,438,439],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[99,104],"covered_lines":[49,50,53,54,55,56,62,63,64,72,83,86,88,90,91,94,96,98,99,107,111,112,115,116,117,118,122,124,128,131,132,133,134,135,136,137,141,144,145,146,148,151,154,157,164,165,166,167,169,171,175,176,179,184,185,188,189,193,194,195,197,198,199,201,202,205,214,217,218,222,229,232,234,235,236,237,239,257,258,262,263,264,267,274,277,278,279,282,283,298,299,300,314,315,318,319,320,321,325,330,336,339,355,356,357,366,367,380,381,383,386,387,388,404,405,406,407,411,419,421,422,423,425,426,438,439],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[106,133],"covered_lines":[49,50,53,54,55,56,62,63,64,72,83,86,88,90,91,94,96,98,99,107,111,112,115,116,117,118,122,124,128,131,132,133,134,135,136,144,145,146,148,151,154,157,164,165,166,167,169,171,175,176,179,181,184,185,188,189,193,194,195,197,198,199,201,202,205,214,217,218,222,230,231,275,276,298,299,314,315,318,319,320,321,325,330,336,339,355,356,357,366,367,380,381,383,386,387,388,392,404,405,406,407,411,419,421,422,423,425,426,438,439],"label":"StackTraceCleaner::::cleanStackTrace(java.lang.Throwable)"},{"test_lines":[135,161],"covered_lines":[49,50,53,54,55,56,62,63,64,72,83,86,88,90,91,94,96,98,99,107,111,112,115,116,117,118,122,124,128,131,132,133,134,135,136,144,145,146,148,151,154,157,164,165,166,167,169,171,175,176,179,184,185,188,189,193,194,195,197,198,199,201,202,205,214,217,218,222,229,230,231,232,234,235,236,237,239,257,258,262,263,264,267,275,276,298,299,300,314,315,318,319,320,321,325,330,336,339,355,356,357,366,367,380,381,383,386,387,388,392,404,405,406,407,411,419,421,422,423,425,426,438,439],"label":"StackTraceCleaner::::cleanStackTrace(java.lang.Throwable)"},{"test_lines":[163,176],"covered_lines":[49,50,53,54,55,56,62,63,64,72,83,86,88,90,91,94,96,98,99,107,111,112,115,116,117,118,128,131,132,133,134,135,136,144,145,146,148,151,154,157,175,176,197,198,199,201,202,205,214,217,218,222,229,230,231,232,234,235,236,237,239,257,258,262,263,264,267,275,276,298,299,300,314,315,318,319,320,321,325,330,355,356,357,366,367,380,381,383,404,405,406,407,438,439],"label":"StackTraceCleaner::::cleanStackTrace(java.lang.Throwable)"},{"test_lines":[178,201],"covered_lines":[49,50,53,54,55,56,62,63,64,72,83,86,88,90,91,94,96,98,99,107,111,112,115,116,117,118,122,124,128,131,132,133,134,135,136,137,141,144,145,146,148,151,154,157,164,165,166,167,169,171,175,176,179,181,184,185,188,189,193,194,195,197,198,199,201,202,205,214,217,218,222,230,231,275,276,298,299,314,315,318,319,320,321,325,330,336,339,355,356,357,366,367,380,386,387,388,392,404,405,406,407,411,419,421,422,423,425,426,438,439],"label":"StackTraceCleaner::::cleanStackTrace(java.lang.Throwable)"},{"test_lines":[203,219],"covered_lines":[49,50,53,54,55,56,62,63,64,72,83,86,88,90,91,94,96,98,99,107,111,112,115,116,117,118,122,124,128,131,132,133,134,135,136,144,145,146,148,151,154,157,164,165,166,167,169,171,175,176,179,184,185,188,189,193,194,195,197,198,199,201,202,205,214,217,218,222,230,231,275,276,298,299,314,315,318,319,320,321,325,330,336,339,355,356,357,366,367,380,381,383,386,387,388,404,405,406,407,411,419,421,422,423,425,426,438,439],"label":"StackTraceCleaner::::cleanStackTrace(java.lang.Throwable)"},{"test_lines":[221,237],"covered_lines":[49,50,53,54,55,56,62,63,64,72,83,86,88,90,91,94,96,98,99,107,111,112,115,116,117,118,128,131,132,133,134,135,136,144,145,146,148,151,154,157,175,176,197,198,199,201,202,205,214,217,218,222,229,230,231,232,234,235,236,239,257,258,262,263,264,267,274,275,276,277,278,279,280,298,299,300,314,315,318,319,320,321,325,330,355,356,357,366,367,380,386,387,392,404,405,406,407,419,421,422,425,426,438,439],"label":"StackTraceCleaner::::cleanStackTrace(java.lang.Throwable)"},{"test_lines":[239,255],"covered_lines":[49,50,53,54,55,56,62,63,64,72,83,86,88,90,91,94,96,98,99,107,111,112,115,116,117,118,128,131,132,133,134,135,136,144,145,146,148,151,154,157,175,176,197,198,199,201,202,205,214,217,218,222,229,230,231,232,234,235,236,237,239,257,258,262,263,264,267,275,276,298,299,300,314,315,318,319,320,321,325,330,355,356,357,366,367,380,386,387,392,404,405,406,407,419,421,422,425,426,438,439],"label":"StackTraceCleaner::::cleanStackTrace(java.lang.Throwable)"},{"test_lines":[257,273],"covered_lines":[49,50,53,54,55,56,62,63,64,72,83,86,88,90,91,94,96,98,99,107,111,112,115,116,117,118,128,131,132,133,134,135,136,144,145,146,148,151,154,157,175,176,197,198,199,201,202,205,214,217,218,222,229,230,231,232,234,235,236,237,239,257,258,262,263,264,267,274,275,276,277,278,279,282,283,298,299,300,314,315,318,319,320,321,325,330,355,356,357,366,367,380,381,383,404,405,406,407,438,439],"label":"StackTraceCleaner::::cleanStackTrace(java.lang.Throwable)"},{"test_lines":[275,291],"covered_lines":[49,50,53,54,55,56,62,63,64,72,83,86,88,90,91,94,96,98,99,107,108,111,112,115,116,117,118,128,131,132,133,134,135,136,144,145,146,148,151,154,157,175,176,197,198,199,201,202,205,214,217,218,222,229,230,231,232,234,235,236,237,239,257,258,262,263,264,267,274,275,276,277,278,279,282,283,298,299,300,314,315,318,319,320,321,325,330,355,356,357,366,367,380,386,387,392,404,405,406,407,419,421,422,425,426,438,439],"label":"StackTraceCleaner::::cleanStackTrace(java.lang.Throwable)"},{"test_lines":[293,309],"covered_lines":[49,50,53,54,55,56,62,63,64,72,83,86,88,90,91,94,96,98,99,107,111,112,115,116,117,118,128,131,132,133,134,135,136,144,145,146,148,151,154,157,175,176,197,198,199,201,202,205,214,217,218,222,229,230,231,232,234,235,236,237,239,257,258,262,263,264,267,274,275,276,277,278,279,282,283,298,299,300,314,315,318,319,320,321,325,330,355,356,357,366,367,380,381,383,404,405,406,407,438,439],"label":"StackTraceCleaner::::cleanStackTrace(java.lang.Throwable)"},{"test_lines":[320,338],"covered_lines":[49,50,53,54,55,56,62,63,64,72,83,86,88,90,91,94,96,98,99,107,111,112,115,116,117,118,128,131,132,133,134,135,136,144,145,146,148,151,154,157,175,176,197,198,199,201,202,205,214,217,218,222,229,230,231,232,234,235,236,239,257,258,262,263,267,274,275,276,277,278,279,282,283,298,299,300,314,315,318,319,320,321,325,330,355,356,357,366,367,380,386,387,392,404,405,406,407,419,421,422,425,426,438,439],"label":"StackTraceCleaner::::cleanStackTrace(java.lang.Throwable)"},{"test_lines":[340,353],"covered_lines":[49,50,53,54,55,56,62,63,64,72,83,86,88,90,91,94,96,98,99,107,111,112,115,116,117,118,122,124,128,131,132,133,134,135,136,137,141,144,145,146,148,151,152,154,157,164,165,166,167,171,175,176,179,181,188,189,193,194,195,197,198,199,201,202,205,214,217,218,222,230,231,275,276,298,299,314,315,318,319,320,321,325,330,355,356,357,366,367,380,386,387,388,392,404,405,406,407,419,421,422,423,425,426,438,439],"label":"StackTraceCleaner::::cleanStackTrace(java.lang.Throwable)"},{"test_lines":[355,371],"covered_lines":[49,50,53,54,55,56,62,63,64,72,83,86,88,90,91,94,96,98,99,107,111,112,115,116,117,118,122,124,128,131,132,133,134,135,136,137,141,144,145,146,148,151,154,155,157,164,165,166,167,171,175,176,179,181,188,189,193,194,195,197,198,199,201,202,205,214,217,218,222,230,231,275,276,298,299,314,315,318,319,320,321,325,330,355,356,357,366,367,380,386,387,388,392,404,405,406,407,419,421,422,423,425,426,438,439],"label":"StackTraceCleaner::::cleanStackTrace(java.lang.Throwable)"},{"test_lines":[373,395],"covered_lines":[49,50,53,54,55,56,62,63,64,72,83,86,88,90,91,94,96,98,99,107,111,112,115,116,117,118,122,124,128,131,132,133,134,135,136,137,141,144,145,146,148,151,152,154,155,157,164,165,166,167,171,175,176,179,181,188,189,193,194,195,197,198,199,201,202,205,214,217,218,222,230,231,275,276,298,299,314,315,318,319,320,321,325,330,355,356,357,366,367,380,386,387,388,392,404,405,406,407,419,421,422,423,425,426,438,439],"label":"StackTraceCleaner::::cleanStackTrace(java.lang.Throwable)"},{"test_lines":[397,405],"covered_lines":[49,50,53,54,55,56,62,63,64,72,83,86,88,90,91,94,96,98,99,107,111,112,115,116,117,118,122,124,128,131,132,133,134,135,136,137,141,144,145,146,148,151,154,157,164,165,166,167,171,175,176,179,181,188,189,193,194,195,197,198,199,201,202,205,214,217,218,222,230,231,275,276,298,299,314,315,318,319,320,321,325,330,355,356,357,366,367,380,386,387,388,392,404,405,406,407,419,421,422,423,425,426,438,439],"label":"StackTraceCleaner::::cleanStackTrace(java.lang.Throwable)"},{"test_lines":[407,416],"covered_lines":[49,50,53,54,55,56,62,63,64,72,83,84,86,88,90,91,94,96,98,99,107,111,112,115,116,117,118,122,124,128,131,132,133,134,135,136,137,141,144,145,146,148,151,152,154,157,164,165,166,167,171,175,176,179,181,188,189,193,194,195,197,198,199,201,202,205,214,217,218,222,230,231,275,276,298,299,314,315,318,319,320,321,325,330,355,356,357,366,367,380,386,387,388,392,404,405,406,407,419,421,422,423,425,426,438,439],"label":"StackTraceCleaner::::cleanStackTrace(java.lang.Throwable)"}]},"/bernard/dataset_construction/prep/repos/truth/core/src/main/java/com/google/common/truth/GraphMatching.java":{"class_content":["/*\n"," * Copyright (c) 2011 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.base.Preconditions.checkNotNull;\n","\n","import com.google.common.base.Optional;\n","import com.google.common.collect.BiMap;\n","import com.google.common.collect.HashBiMap;\n","import com.google.common.collect.ImmutableBiMap;\n","import com.google.common.collect.Multimap;\n","import com.google.errorprone.annotations.CanIgnoreReturnValue;\n","import java.util.ArrayDeque;\n","import java.util.HashMap;\n","import java.util.Map;\n","import java.util.Queue;\n","\n","/**\n"," * Helper routines related to <a href=\"https://en.wikipedia.org/wiki/Matching_(graph_theory)\">graph\n"," * matchings</a>.\n"," *\n"," * @author Pete Gillin\n"," */\n","final class GraphMatching {\n","\n","  /**\n","   * Finds a <a\n","   * href=\"https://en.wikipedia.org/wiki/Matching_(graph_theory)#In_unweighted_bipartite_graphs\">\n","   * maximum cardinality matching of a bipartite graph</a>. The vertices of one part of the\n","   * bipartite graph are identified by objects of type {@code U} using object equality. The vertices\n","   * of the other part are similarly identified by objects of type {@code V}. The input bipartite\n","   * graph is represented as a {@code Multimap<U, V>}: each entry represents an edge, with the key\n","   * representing the vertex in the first part and the value representing the value in the second\n","   * part. (Note that, even if {@code U} and {@code V} are the same type, equality between a key and\n","   * a value has no special significance: effectively, they are in different domains.) Fails if any\n","   * of the vertices (keys or values) are null. The output matching is similarly represented as a\n","   * {@code BiMap<U, V>} (the property that a matching has no common vertices translates into the\n","   * bidirectional uniqueness property of the {@link BiMap}).\n","   *\n","   * <p>If there are multiple matchings which share the maximum cardinality, an arbitrary one is\n","   * returned.\n","   */\n","  static <U, V> ImmutableBiMap<U, V> maximumCardinalityBipartiteMatching(Multimap<U, V> graph) {\n","    return HopcroftKarp.overBipartiteGraph(graph).perform();\n","  }\n","\n","  private GraphMatching() {}\n","\n","  /**\n","   * Helper which implements the <a\n","   * href=\"https://en.wikipedia.org/wiki/Hopcroft%E2%80%93Karp_algorithm\">Hopcroft–Karp</a>\n","   * algorithm.\n","   *\n","   * <p>The worst-case complexity is {@code O(E V^0.5)} where the graph contains {@code E} edges and\n","   * {@code V} vertices. For dense graphs, where {@code E} is {@code O(V^2)}, this is {@code V^2.5}\n","   * (and non-dense graphs perform better than dense graphs with the same number of vertices).\n","   */\n","  private static class HopcroftKarp<U, V> {\n","\n","    private final Multimap<U, V> graph;\n","\n","    /**\n","     * Factory method which returns an instance ready to perform the algorithm over the bipartite\n","     * graph described by the given multimap.\n","     */\n","    static <U, V> HopcroftKarp<U, V> overBipartiteGraph(Multimap<U, V> graph) {\n","      return new HopcroftKarp<>(graph);\n","    }\n","\n","    private HopcroftKarp(Multimap<U, V> graph) {\n","      this.graph = graph;\n","    }\n","\n","    /** Performs the algorithm, and returns a bimap describing the matching found. */\n","    ImmutableBiMap<U, V> perform() {\n","      BiMap<U, V> matching = HashBiMap.create();\n","      while (true) {\n","        // Perform the BFS as described below. This finds the length of the shortest augmenting path\n","        // and a guide which locates all the augmenting paths of that length.\n","        Map<U, Integer> layers = new HashMap<>();\n","        Optional<Integer> freeRhsVertexLayer = breadthFirstSearch(matching, layers);\n","        if (!freeRhsVertexLayer.isPresent()) {\n","          // The BFS failed, i.e. we found no augmenting paths. So we're done.\n","          break;\n","        }\n","        // Perform the DFS and update the matching as described below starting from each free LHS\n","        // vertex. This finds a disjoint set of augmenting paths of the shortest length and updates\n","        // the matching by computing the symmetric difference with that set.\n","        for (U lhs : graph.keySet()) {\n","          if (!matching.containsKey(lhs)) {\n","            depthFirstSearch(matching, layers, freeRhsVertexLayer.get(), lhs);\n","          }\n","        }\n","      }\n","      return ImmutableBiMap.copyOf(matching);\n","    }\n","\n","    /**\n","     * Performs the Breadth-First Search phase of the algorithm. Specifically, treats the bipartite\n","     * graph as a directed graph where every unmatched edge (i.e. every edge not in the current\n","     * matching) is directed from the LHS vertex to the RHS vertex and every matched edge is\n","     * directed from the RHS vertex to the LHS vertex, and performs a BFS which starts from all of\n","     * the free LHS vertices (i.e. the LHS vertices which are not in the current matching) and stops\n","     * either at the end of a layer where a free RHS vertex is found or when the search is exhausted\n","     * if no free RHS vertex is found. Keeps track of which layer of the BFS each LHS vertex was\n","     * found in (for those LHS vertices visited during the BFS), so the free LHS vertices are in\n","     * layer 1, those reachable by following an unmatched edge from any free LHS vertex to any\n","     * non-free RHS vertex and then the matched edge back to a LHS vertex are in layer 2, etc. Note\n","     * that every path in a successful search starts with a free LHS vertex and ends with a free RHS\n","     * vertex, with every intermediate vertex being non-free.\n","     *\n","     * @param matching A bimap describing the matching to be used for the BFS, which is not modified\n","     *     by this method\n","     * @param layers A map to be filled with the layer of each LHS vertex visited during the BFS,\n","     *     which should be empty when passed into this method and will be modified by this method\n","     * @return The number of the layer in which the first free RHS vertex was found, if any, and the\n","     *     absent value if the BFS was exhausted without finding any free RHS vertex\n","     */\n","    private Optional<Integer> breadthFirstSearch(BiMap<U, V> matching, Map<U, Integer> layers) {\n","      Queue<U> queue = new ArrayDeque<>();\n","      Optional<Integer> freeRhsVertexLayer = Optional.absent();\n","\n","      // Enqueue all free LHS vertices and assign them to layer 1.\n","      for (U lhs : graph.keySet()) {\n","        if (!matching.containsKey(lhs)) {\n","          layers.put(lhs, 1);\n","          queue.add(lhs);\n","        }\n","      }\n","\n","      // Now proceed with the BFS.\n","      while (!queue.isEmpty()) {\n","        U lhs = queue.remove();\n","        int layer = checkNotNull(layers.get(lhs));\n","        // If the BFS has proceeded past a layer in which a free RHS vertex was found, stop.\n","        if (freeRhsVertexLayer.isPresent() && layer > freeRhsVertexLayer.get()) {\n","          break;\n","        }\n","        // We want to consider all the unmatched edges from the current LHS vertex to the RHS, and\n","        // then all the matched edges from those RHS vertices back to the LHS, to find the next\n","        // layer of LHS vertices. We actually iterate over all edges, both matched and unmatched,\n","        // from the current LHS vertex: we'll just do nothing for matched edges.\n","        for (V rhs : graph.get(lhs)) {\n","          if (!matching.containsValue(rhs)) {\n","            // We found a free RHS vertex. Record the layer at which we found it. Since the RHS\n","            // vertex is free, there is no matched edge to follow. (Note that the edge from the LHS\n","            // to the RHS must be unmatched, because a matched edge cannot lead to a free vertex.)\n","            if (!freeRhsVertexLayer.isPresent()) {\n","              freeRhsVertexLayer = Optional.of(layer);\n","            }\n","          } else {\n","            // We found an RHS vertex with a matched vertex back to the LHS. If we haven't visited\n","            // that new LHS vertex yet, add it to the next layer. (If the edge from the LHS to the\n","            // RHS was matched then the matched edge from the RHS to the LHS will lead back to the\n","            // current LHS vertex, which has definitely been visited, so we correctly do nothing.)\n","            U nextLhs = checkNotNull(matching.inverse().get(rhs));\n","            if (!layers.containsKey(nextLhs)) {\n","              layers.put(nextLhs, layer + 1);\n","              queue.add(nextLhs);\n","            }\n","          }\n","        }\n","      }\n","\n","      return freeRhsVertexLayer;\n","    }\n","\n","    /**\n","     * Performs the Depth-First Search phase of the algorithm. The DFS is guided by the BFS phase,\n","     * i.e. it only uses paths which were used in the BFS. That means the steps in the DFS proceed\n","     * from an LHS vertex via an unmatched edge to an RHS vertex and from an RHS vertex via a\n","     * matched edge to an LHS vertex only if that LHS vertex is one layer deeper in the BFS than the\n","     * previous one. It starts from the specified LHS vertex and stops either when it finds one of\n","     * the free RHS vertices located by the BFS or when the search is exhausted. If a free RHS\n","     * vertex is found then all the unmatched edges in the search path and added to the matching and\n","     * all the matched edges in the search path are removed from the matching; in other words, the\n","     * direction (which is determined by the matched/unmatched status) of every edge in the search\n","     * path is flipped. Note several properties of this update to the matching:\n","     *\n","     * <ul>\n","     *   <li>Because the search path must contain one more unmatched than matched edges, the effect\n","     *       of this modification is to increase the size of the matching by one.\n","     *   <li>This modification results in the free LHS vertex at the start of the path and the free\n","     *       RHS vertex at the end of the path becoming non-free, while the intermediate non-free\n","     *       vertices stay non-free.\n","     *   <li>None of the edges used in this search path may be used in any further DFS. They cannot\n","     *       be used in the same direction as they were in this DFS because their directions are\n","     *       flipped; and they cannot be used in their new directions because we only use edges\n","     *       leading to the next layer of the BFS and, after flipping the directions, these edges\n","     *       now lead to the previous layer.\n","     *   <li>As a consequence of the previous property, repeated invocations of this method will\n","     *       find only paths which were used in the BFS and which were not used in any previous DFS\n","     *       (i.e. the set of edges used in the paths found by repeated DFSes are disjoint).\n","     * </ul>\n","     *\n","     * @param matching A bimap describing the matching to be used for the BFS, which will be\n","     *     modified by this method as described above\n","     * @param layers A map giving the layer of each LHS vertex visited during the BFS, which will\n","     *     not be modified by this method\n","     * @param freeRhsVertexLayer The number of the layer in which the first free RHS vertex was\n","     *     found\n","     * @param lhs The LHS vertex from which to start the DFS\n","     * @return Whether or not the DFS was successful\n","     */\n","    @CanIgnoreReturnValue\n","    private boolean depthFirstSearch(\n","        BiMap<U, V> matching, Map<U, Integer> layers, int freeRhsVertexLayer, U lhs) {\n","      // Note that this differs from the method described in the text of the wikipedia article (at\n","      // time of writing) in two ways. Firstly, we proceed from a free LHS vertex to a free RHS\n","      // vertex in the target layer instead of the other way around, which makes no difference.\n","      // Secondly, we update the matching using the path found from each DFS after it is found,\n","      // rather than using all the paths at the end of the phase. As explained above, the effect of\n","      // this is that we automatically find only the disjoint set of paths, as required. This is,\n","      // fact, the approach taken in the pseudocode of the wikipedia article (at time of writing).\n","      int layer = checkNotNull(layers.get(lhs));\n","      if (layer > freeRhsVertexLayer) {\n","        // We've gone past the target layer, so we're not going to find what we're looking for.\n","        return false;\n","      }\n","      // Consider every edge from this LHS vertex.\n","      for (V rhs : graph.get(lhs)) {\n","        if (!matching.containsValue(rhs)) {\n","          // We found a free RHS vertex. (This must have been in the target layer because, by\n","          // definition, no free RHS vertex is reachable in any earlier layer, and because we stop\n","          // when we get past that layer.) We add the unmatched edge used to get here to the\n","          // matching, and remove any previous matched edge leading to the LHS vertex.\n","          matching.forcePut(lhs, rhs);\n","          return true;\n","        } else {\n","          // We found a non-free RHS vertex. Follow the matched edge from that RHS vertex to find\n","          // the next LHS vertex.\n","          U nextLhs = checkNotNull(matching.inverse().get(rhs));\n","          if (layers.containsKey(nextLhs) && layers.get(nextLhs) == layer + 1) {\n","            // The next LHS vertex is in the next layer of the BFS, so we can use this path for our\n","            // DFS. Recurse into the DFS.\n","            if (depthFirstSearch(matching, layers, freeRhsVertexLayer, nextLhs)) {\n","              // The DFS succeeded, and we're reversing back up the search path. At each stage we\n","              // put the unmatched edge from the LHS to the RHS into the matching, and remove any\n","              // matched edge previously leading to the LHS. The combined effect of all the\n","              // modifications made while reversing all the way back up the search path is to update\n","              // the matching as described in the javadoc.\n","              matching.forcePut(lhs, rhs);\n","              return true;\n","            }\n","          }\n","        }\n","      }\n","      return false;\n","    }\n","  }\n","}\n"],"test_content":["/*\n"," * Copyright (c) 2011 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.truth.GraphMatching.maximumCardinalityBipartiteMatching;\n","import static com.google.common.truth.Truth.assertWithMessage;\n","import static org.junit.Assert.fail;\n","\n","import com.google.common.annotations.GwtIncompatible;\n","import com.google.common.base.Preconditions;\n","import com.google.common.collect.BiMap;\n","import com.google.common.collect.HashBiMap;\n","import com.google.common.collect.ImmutableBiMap;\n","import com.google.common.collect.ImmutableList;\n","import com.google.common.collect.ImmutableListMultimap;\n","import com.google.common.collect.LinkedListMultimap;\n","import com.google.common.collect.ListMultimap;\n","import java.util.ArrayDeque;\n","import java.util.BitSet;\n","import java.util.Deque;\n","import java.util.Map;\n","import java.util.Random;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import org.junit.runners.JUnit4;\n","\n","/**\n"," * Tests for {@link GraphMatching}.\n"," *\n"," * @author Pete Gillin\n"," */\n","@RunWith(JUnit4.class)\n","public final class GraphMatchingTest {\n","\n","  @Test\n","  public void maximumCardinalityBipartiteMatching_empty() {\n","    TestInstance.empty().testAgainstKnownSize(0);\n","  }\n","\n","  @Test\n","  public void maximumCardinalityBipartiteMatching_exhaustive3x4() {\n","    for (int edgeCombination = 1; edgeCombination < (1L << (3 * 4)); edgeCombination++) {\n","      TestInstance.fromBits(3, 4, intBits(edgeCombination)).testAgainstBruteForce();\n","    }\n","  }\n","\n","  @Test\n","  @GwtIncompatible(\"slow\")\n","  public void maximumCardinalityBipartiteMatching_exhaustive4x4() {\n","    if (Platform.isAndroid()) {\n","      return; // slow\n","    }\n","    for (int edgeCombination = 1; edgeCombination < (1L << (4 * 4)); edgeCombination++) {\n","      TestInstance.fromBits(4, 4, intBits(edgeCombination)).testAgainstBruteForce();\n","    }\n","  }\n","\n","  @Test\n","  @GwtIncompatible(\"slow\")\n","  public void maximumCardinalityBipartiteMatching_exhaustive3x5() {\n","    if (Platform.isAndroid()) {\n","      return; // slow\n","    }\n","    for (int edgeCombination = 1; edgeCombination < (1L << (3 * 5)); edgeCombination++) {\n","      TestInstance.fromBits(3, 5, intBits(edgeCombination)).testAgainstBruteForce();\n","    }\n","  }\n","\n","  @Test\n","  @GwtIncompatible(\"slow\")\n","  public void maximumCardinalityBipartiteMatching_exhaustive5x3() {\n","    if (Platform.isAndroid()) {\n","      return; // slow\n","    }\n","    for (int edgeCombination = 1; edgeCombination < (1L << (5 * 3)); edgeCombination++) {\n","      TestInstance.fromBits(5, 3, intBits(edgeCombination)).testAgainstBruteForce();\n","    }\n","  }\n","\n","  @Test\n","  public void maximumCardinalityBipartiteMatching_fullyConnected8x8() {\n","    TestInstance.fullyConnected(8, 8).testAgainstKnownSize(8);\n","  }\n","\n","  @Test\n","  public void maximumCardinalityBipartiteMatching_random8x8() {\n","    Random rng = new Random(0x5ca1ab1e);\n","    for (int i = 0; i < 100; i++) {\n","      // Set each bit with probability 0.25, giving an average of 2 of the possible 8 edges per\n","      // vertex. By observation, the maximal matching most commonly has cardinality 6 (although\n","      // occasionally you do see a complete matching i.e. cardinality 8).\n","      TestInstance.fromBits(8, 8, randomBits(8 * 8, 0.25, rng)).testAgainstBruteForce();\n","    }\n","  }\n","\n","  @Test\n","  public void maximumCardinalityBipartiteMatching_randomSparse8x8() {\n","    Random rng = new Random(0x0ddba11);\n","    for (int i = 0; i < 100; i++) {\n","      // Set each bit with probability 0.125, giving an average of 1 of the possible 8 edges per\n","      // vertex. By observation, the maximal matching most commonly has cardinality 4.\n","      TestInstance.fromBits(8, 8, randomBits(8 * 8, 0.125, rng)).testAgainstBruteForce();\n","    }\n","  }\n","\n","  @Test\n","  @GwtIncompatible(\"slow\")\n","  public void maximumCardinalityBipartiteMatching_randomDense8x8() {\n","    if (Platform.isAndroid()) {\n","      return; // slow\n","    }\n","    Random rng = new Random(0x5add1e5);\n","    for (int i = 0; i < 100; i++) {\n","      // Set each bit with probability 0.5, giving an average of 4 of the possible 8 edges per\n","      // vertex. By observation, a complete matching is almost always possible (although\n","      // occasionally you do see a maximum cardinality of 7 or even fewer).\n","      TestInstance.fromBits(8, 8, randomBits(8 * 8, 0.5, rng)).testAgainstBruteForce();\n","    }\n","  }\n","\n","  @Test\n","  public void maximumCardinalityBipartiteMatching_failsWithNullLhs() {\n","    ListMultimap<String, String> edges = LinkedListMultimap.create();\n","    edges.put(null, \"R1\");\n","    try {\n","      BiMap<String, String> unused = maximumCardinalityBipartiteMatching(edges);\n","      fail(\"Should have thrown.\");\n","    } catch (NullPointerException expected) {\n","    }\n","  }\n","\n","  @Test\n","  public void maximumCardinalityBipartiteMatching_failsWithNullRhs() {\n","    ListMultimap<String, String> edges = LinkedListMultimap.create();\n","    edges.put(\"L1\", null);\n","    try {\n","      BiMap<String, String> unused = maximumCardinalityBipartiteMatching(edges);\n","      fail(\"Should have thrown.\");\n","    } catch (NullPointerException expected) {\n","    }\n","  }\n","\n","  /** Representation of a bipartite graph to be used for testing. */\n","  private static class TestInstance {\n","\n","    /** Generates a test instance with an empty bipartite graph. */\n","    static TestInstance empty() {\n","      return new TestInstance(ImmutableListMultimap.<String, String>of());\n","    }\n","\n","    /**\n","     * Generates a test instance with a fully-connected bipartite graph where there are {@code\n","     * lhsSize} elements in one set of vertices (which we call the LHS) and {@code rhsSize} elements\n","     * in the other (the RHS).\n","     */\n","    static TestInstance fullyConnected(int lhsSize, int rhsSize) {\n","      ImmutableListMultimap.Builder<String, String> edges = ImmutableListMultimap.builder();\n","      for (int lhs = 0; lhs < lhsSize; lhs++) {\n","        for (int rhs = 0; rhs < rhsSize; rhs++) {\n","          edges.put(\"L\" + lhs, \"R\" + rhs);\n","        }\n","      }\n","      return new TestInstance(edges.build());\n","    }\n","\n","    /**\n","     * Generates a test instance with a bipartite graph where there are {@code lhsSize} elements in\n","     * one set of vertices (which we call the LHS) and {@code rhsSize} elements in the other (the\n","     * RHS) and whether or not each of the {@code lhsSize * rhsSize} possible edges is included or\n","     * not according to whether one of the first {@code lhsSize * rhsSize} bits of {@code bits} is\n","     * set or not.\n","     */\n","    static TestInstance fromBits(int lhsSize, int rhsSize, BitSet bits) {\n","      ImmutableListMultimap.Builder<String, String> edges = ImmutableListMultimap.builder();\n","      for (int lhs = 0; lhs < lhsSize; lhs++) {\n","        for (int rhs = 0; rhs < rhsSize; rhs++) {\n","          if (bits.get(lhs * rhsSize + rhs)) {\n","            edges.put(\"L\" + lhs, \"R\" + rhs);\n","          }\n","        }\n","      }\n","      return new TestInstance(edges.build());\n","    }\n","\n","    private final ImmutableListMultimap<String, String> edges;\n","    private final ImmutableList<String> lhsVertices;\n","\n","    private TestInstance(ImmutableListMultimap<String, String> edges) {\n","      this.edges = edges;\n","      this.lhsVertices = edges.keySet().asList();\n","    }\n","\n","    /**\n","     * Finds the maximum bipartite matching using the method under test and asserts both that it is\n","     * actually a matching of this bipartite graph and that it has the same size as a maximum\n","     * bipartite matching found by a brute-force approach.\n","     */\n","    void testAgainstBruteForce() {\n","      ImmutableBiMap<String, String> actual = maximumCardinalityBipartiteMatching(edges);\n","      for (Map.Entry<String, String> entry : actual.entrySet()) {\n","        assertWithMessage(\n","                \"The returned bimap <%s> was not a matching of the bipartite graph <%s>\",\n","                actual, edges)\n","            .that(edges)\n","            .containsEntry(entry.getKey(), entry.getValue());\n","      }\n","      ImmutableBiMap<String, String> expected = bruteForceMaximalMatching();\n","      assertWithMessage(\n","              \"The returned matching for the bipartite graph <%s> was not the same size as \"\n","                  + \"the brute-force maximal matching <%s>\",\n","              edges, expected)\n","          .that(actual)\n","          .hasSize(expected.size());\n","    }\n","\n","    /**\n","     * Finds the maximum bipartite matching using the method under test and asserts both that it is\n","     * actually a matching of this bipartite graph and that it has the expected size.\n","     */\n","    void testAgainstKnownSize(int expectedSize) {\n","      ImmutableBiMap<String, String> actual = maximumCardinalityBipartiteMatching(edges);\n","      for (Map.Entry<String, String> entry : actual.entrySet()) {\n","        assertWithMessage(\n","                \"The returned bimap <%s> was not a matching of the bipartite graph <%s>\",\n","                actual, edges)\n","            .that(edges)\n","            .containsEntry(entry.getKey(), entry.getValue());\n","      }\n","      assertWithMessage(\n","              \"The returned matching for the bipartite graph <%s> had the wrong size\", edges)\n","          .that(actual)\n","          .hasSize(expectedSize);\n","    }\n","\n","    /**\n","     * Returns a maximal bipartite matching of the bipartite graph, performing a brute force\n","     * evaluation of every possible matching.\n","     */\n","    private ImmutableBiMap<String, String> bruteForceMaximalMatching() {\n","      ImmutableBiMap<String, String> best = ImmutableBiMap.of();\n","      Matching candidate = new Matching();\n","      while (candidate.valid()) {\n","        if (candidate.size() > best.size()) {\n","          best = candidate.asBiMap();\n","        }\n","        candidate.advance();\n","      }\n","      return best;\n","    }\n","\n","    /**\n","     * Mutable representation of a non-empty matching over the graph. This is a cursor which can be\n","     * advanced through the possible matchings in a fixed sequence. When advanced past the last\n","     * matching in the sequence, this cursor is considered invalid.\n","     */\n","    private class Matching {\n","\n","      private final Deque<Edge> edgeStack;\n","      private final BiMap<String, String> selectedEdges;\n","\n","      /** Constructs the first non-empty matching in the sequence. */\n","      Matching() {\n","        this.edgeStack = new ArrayDeque<>();\n","        this.selectedEdges = HashBiMap.create();\n","        if (!edges.isEmpty()) {\n","          Edge firstEdge = new Edge();\n","          edgeStack.addLast(firstEdge);\n","          firstEdge.addToSelected();\n","        }\n","      }\n","\n","      /**\n","       * Returns whether this cursor is valid. Returns true if it has been advanced past the end of\n","       * the sequence.\n","       */\n","      boolean valid() {\n","        // When advance() has advanced through all the non-empty maps, the final state is that\n","        // selectedEdges is empty, so we use that state as a marker of the final invalid cursor.\n","        return !selectedEdges.isEmpty();\n","      }\n","\n","      /**\n","       * Returns an immutable representation of the current state of the matching as a bimap giving\n","       * the edges used in the matching, where the keys identify the vertices in the first set and\n","       * the values identify the vertices in the second set. The bimap is guaranteed not to be\n","       * empty. Fails if this cursor is invalid.\n","       */\n","      ImmutableBiMap<String, String> asBiMap() {\n","        Preconditions.checkState(valid());\n","        return ImmutableBiMap.copyOf(selectedEdges);\n","      }\n","\n","      /**\n","       * Returns the size (i.e. the number of edges in) the current matching, which is guaranteed to\n","       * be positive (not zer). Fails if this cursor is invalid.\n","       */\n","      int size() {\n","        Preconditions.checkState(valid());\n","        return selectedEdges.size();\n","      }\n","\n","      /**\n","       * Advances to the next matching in the sequence, or invalidates the cursor if this was the\n","       * last. Fails if this cursor is invalid.\n","       */\n","      void advance() {\n","        Preconditions.checkState(valid());\n","        // We essentially do a depth-first traversal through the possible matchings.\n","        // First we try to add an edge.\n","        Edge lastEdge = edgeStack.getLast();\n","        Edge nextEdge = new Edge(lastEdge);\n","        nextEdge.advance();\n","        if (nextEdge.valid()) {\n","          edgeStack.addLast(nextEdge);\n","          nextEdge.addToSelected();\n","          return;\n","        }\n","        // We can't add an edge, so we try to advance the edge at the top of the stack. If we can't\n","        // advance that edge, we remove it and attempt to advance the new top of stack instead.\n","        while (valid()) {\n","          lastEdge = edgeStack.getLast();\n","          lastEdge.removeFromSelected();\n","          lastEdge.advance();\n","          if (lastEdge.valid()) {\n","            lastEdge.addToSelected();\n","            return;\n","          } else {\n","            edgeStack.removeLast();\n","          }\n","        }\n","        // We have reached the end of the sequence, and edgeStack is empty.\n","      }\n","\n","      /**\n","       * Mutable representation of an edge in a matching. This is a cursor which can be advanced\n","       * through the possible edges in a fixed sequence. When advanced past the last edge in the\n","       * sequence, this cursor is considered invalid.\n","       */\n","      private class Edge {\n","\n","        private int lhsIndex; // index into lhsVertices\n","        private int rhsIndexForLhs; // index into edges.get(lhsVertices.get(lhsIndex))\n","\n","        /** Constructs the first edge in the sequence. */\n","        Edge() {\n","          this.lhsIndex = 0;\n","          this.rhsIndexForLhs = 0;\n","        }\n","\n","        /** Constructs a copy of the given edge. */\n","        Edge(Edge other) {\n","          this.lhsIndex = other.lhsIndex;\n","          this.rhsIndexForLhs = other.rhsIndexForLhs;\n","        }\n","\n","        /**\n","         * Returns whether this cursor is valid. Returns true if it has been advanced past the end\n","         * of the sequence.\n","         */\n","        boolean valid() {\n","          // When advance() has advanced through all the edges, the final state is that lhsIndex ==\n","          // lhsVertices.size(), so we use that state as a marker of the final invalid cursor.\n","          return lhsIndex < lhsVertices.size();\n","        }\n","\n","        /**\n","         * Adds the current edge to the matching. Fails if either of the vertices in the edge is\n","         * already in the matching. Fails if this cursor is invalid.\n","         */\n","        void addToSelected() {\n","          Preconditions.checkState(valid());\n","          Preconditions.checkState(!selectedEdges.containsKey(lhsVertex()));\n","          Preconditions.checkState(!selectedEdges.containsValue(rhsVertex()));\n","          selectedEdges.put(lhsVertex(), rhsVertex());\n","        }\n","\n","        /**\n","         * Removes the current edge from the matching. Fails if this edge is not in the matching.\n","         * Fails if this cursor is invalid.\n","         */\n","        void removeFromSelected() {\n","          Preconditions.checkState(valid());\n","          Preconditions.checkState(selectedEdges.containsKey(lhsVertex()));\n","          Preconditions.checkState(selectedEdges.get(lhsVertex()).equals(rhsVertex()));\n","          selectedEdges.remove(lhsVertex());\n","        }\n","\n","        /**\n","         * Advances to the next edge in the sequence, or invalidates the cursor if this was the\n","         * last. Skips over edges which cannot be added to the matching because either vertex is\n","         * already in it. Fails if this cursor is invalid.\n","         */\n","        void advance() {\n","          Preconditions.checkState(valid());\n","          // We iterate over the possible edges in a lexicographical order with the LHS index as the\n","          // most significant part and the RHS index as the least significant. So we first try\n","          // advancing to the next RHS index for the current LHS index, and if we can't we advance\n","          // to the next LHS index in the map and the first RHS index for that.\n","          ++rhsIndexForLhs;\n","          while (lhsIndex < lhsVertices.size()) {\n","            if (!selectedEdges.containsKey(lhsVertex())) {\n","              while (rhsIndexForLhs < edges.get(lhsVertex()).size()) {\n","                if (!selectedEdges.containsValue(rhsVertex())) {\n","                  return;\n","                }\n","                ++rhsIndexForLhs;\n","              }\n","            }\n","            ++lhsIndex;\n","            rhsIndexForLhs = 0;\n","          }\n","          // We have reached the end of the sequence, and lhsIndex == lhsVertices.size().\n","        }\n","\n","        private String lhsVertex() {\n","          return lhsVertices.get(lhsIndex);\n","        }\n","\n","        private String rhsVertex() {\n","          return edges.get(lhsVertex()).get(rhsIndexForLhs);\n","        }\n","      }\n","    }\n","  }\n","\n","  /** Returns a bitset corresponding to the binary representation of the given integer. */\n","  private static BitSet intBits(int intValue) {\n","    BitSet bits = new BitSet();\n","    for (int bitIndex = 0; bitIndex < Integer.SIZE; bitIndex++) {\n","      bits.set(bitIndex, (intValue & (1L << bitIndex)) != 0);\n","    }\n","    return bits;\n","  }\n","\n","  /**\n","   * Returns a bitset of up to {@code maxBits} bits where each bit is set with a probability {@code\n","   * bitProbability} using the given RNG.\n","   */\n","  private static BitSet randomBits(int maxBits, double bitProbability, Random rng) {\n","    BitSet bits = new BitSet();\n","    for (int bitIndex = 0; bitIndex < maxBits; bitIndex++) {\n","      bits.set(bitIndex, rng.nextDouble() < bitProbability);\n","    }\n","    return bits;\n","  }\n","}\n"],"method_lines_dic":{"GraphMatching.HopcroftKarp::::perform()":[88,109]},"test_method_lines_dic":{"GraphMatchingTest::::maximumCardinalityBipartiteMatching_empty()":[48,51],"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive3x4()":[53,58],"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive4x4()":[60,69],"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive3x5()":[71,80],"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive5x3()":[82,91],"GraphMatchingTest::::maximumCardinalityBipartiteMatching_fullyConnected8x8()":[93,96],"GraphMatchingTest::::maximumCardinalityBipartiteMatching_random8x8()":[98,107],"GraphMatchingTest::::maximumCardinalityBipartiteMatching_randomSparse8x8()":[109,117],"GraphMatchingTest::::maximumCardinalityBipartiteMatching_randomDense8x8()":[119,132],"GraphMatchingTest::::maximumCardinalityBipartiteMatching_failsWithNullLhs()":[134,143],"GraphMatchingTest::::maximumCardinalityBipartiteMatching_failsWithNullRhs()":[145,154],"GraphMatchingTest.TestInstance::::empty()":[160,162],"GraphMatchingTest.TestInstance::::fullyConnected(int,int)":[169,177],"GraphMatchingTest.TestInstance::::fromBits(int,int,java.util.BitSet)":[186,196],"GraphMatchingTest.TestInstance::::testAgainstBruteForce()":[211,227],"GraphMatchingTest.TestInstance::::testAgainstKnownSize(int)":[233,246],"GraphMatchingTest.TestInstance::::bruteForceMaximalMatching()":[252,262],"GraphMatchingTest.TestInstance.Matching::::valid()":[289,293],"GraphMatchingTest.TestInstance.Matching::::asBiMap()":[301,304],"GraphMatchingTest.TestInstance.Matching::::size()":[310,313],"GraphMatchingTest.TestInstance.Matching::::advance()":[319,345],"GraphMatchingTest.TestInstance.Matching.Edge::::valid()":[373,377],"GraphMatchingTest.TestInstance.Matching.Edge::::addToSelected()":[383,388],"GraphMatchingTest.TestInstance.Matching.Edge::::removeFromSelected()":[394,399],"GraphMatchingTest.TestInstance.Matching.Edge::::advance()":[406,426],"GraphMatchingTest.TestInstance.Matching.Edge::::lhsVertex()":[428,430],"GraphMatchingTest.TestInstance.Matching.Edge::::rhsVertex()":[432,434],"GraphMatchingTest::::intBits(int)":[440,446],"GraphMatchingTest::::randomBits(int,double,java.util.Random)":[452,458]},"reverse_method_lines_dic":{"88":"GraphMatching.HopcroftKarp::::perform()","89":"GraphMatching.HopcroftKarp::::perform()","90":"GraphMatching.HopcroftKarp::::perform()","91":"GraphMatching.HopcroftKarp::::perform()","92":"GraphMatching.HopcroftKarp::::perform()","93":"GraphMatching.HopcroftKarp::::perform()","94":"GraphMatching.HopcroftKarp::::perform()","95":"GraphMatching.HopcroftKarp::::perform()","96":"GraphMatching.HopcroftKarp::::perform()","97":"GraphMatching.HopcroftKarp::::perform()","98":"GraphMatching.HopcroftKarp::::perform()","99":"GraphMatching.HopcroftKarp::::perform()","100":"GraphMatching.HopcroftKarp::::perform()","101":"GraphMatching.HopcroftKarp::::perform()","102":"GraphMatching.HopcroftKarp::::perform()","103":"GraphMatching.HopcroftKarp::::perform()","104":"GraphMatching.HopcroftKarp::::perform()","105":"GraphMatching.HopcroftKarp::::perform()","106":"GraphMatching.HopcroftKarp::::perform()","107":"GraphMatching.HopcroftKarp::::perform()","108":"GraphMatching.HopcroftKarp::::perform()","109":"GraphMatching.HopcroftKarp::::perform()"},"test_reverse_method_lines_dic":{"48":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_empty()","49":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_empty()","50":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_empty()","51":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_empty()","53":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive3x4()","54":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive3x4()","55":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive3x4()","56":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive3x4()","57":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive3x4()","58":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive3x4()","60":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive4x4()","61":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive4x4()","62":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive4x4()","63":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive4x4()","64":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive4x4()","65":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive4x4()","66":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive4x4()","67":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive4x4()","68":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive4x4()","69":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive4x4()","71":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive3x5()","72":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive3x5()","73":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive3x5()","74":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive3x5()","75":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive3x5()","76":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive3x5()","77":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive3x5()","78":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive3x5()","79":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive3x5()","80":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive3x5()","82":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive5x3()","83":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive5x3()","84":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive5x3()","85":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive5x3()","86":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive5x3()","87":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive5x3()","88":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive5x3()","89":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive5x3()","90":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive5x3()","91":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_exhaustive5x3()","93":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_fullyConnected8x8()","94":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_fullyConnected8x8()","95":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_fullyConnected8x8()","96":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_fullyConnected8x8()","98":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_random8x8()","99":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_random8x8()","100":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_random8x8()","101":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_random8x8()","102":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_random8x8()","103":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_random8x8()","104":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_random8x8()","105":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_random8x8()","106":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_random8x8()","107":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_random8x8()","109":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_randomSparse8x8()","110":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_randomSparse8x8()","111":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_randomSparse8x8()","112":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_randomSparse8x8()","113":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_randomSparse8x8()","114":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_randomSparse8x8()","115":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_randomSparse8x8()","116":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_randomSparse8x8()","117":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_randomSparse8x8()","119":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_randomDense8x8()","120":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_randomDense8x8()","121":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_randomDense8x8()","122":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_randomDense8x8()","123":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_randomDense8x8()","124":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_randomDense8x8()","125":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_randomDense8x8()","126":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_randomDense8x8()","127":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_randomDense8x8()","128":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_randomDense8x8()","129":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_randomDense8x8()","130":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_randomDense8x8()","131":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_randomDense8x8()","132":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_randomDense8x8()","134":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_failsWithNullLhs()","135":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_failsWithNullLhs()","136":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_failsWithNullLhs()","137":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_failsWithNullLhs()","138":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_failsWithNullLhs()","139":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_failsWithNullLhs()","140":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_failsWithNullLhs()","141":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_failsWithNullLhs()","142":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_failsWithNullLhs()","143":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_failsWithNullLhs()","145":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_failsWithNullRhs()","146":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_failsWithNullRhs()","147":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_failsWithNullRhs()","148":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_failsWithNullRhs()","149":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_failsWithNullRhs()","150":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_failsWithNullRhs()","151":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_failsWithNullRhs()","152":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_failsWithNullRhs()","153":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_failsWithNullRhs()","154":"GraphMatchingTest::::maximumCardinalityBipartiteMatching_failsWithNullRhs()","160":"GraphMatchingTest.TestInstance::::empty()","161":"GraphMatchingTest.TestInstance::::empty()","162":"GraphMatchingTest.TestInstance::::empty()","169":"GraphMatchingTest.TestInstance::::fullyConnected(int,int)","170":"GraphMatchingTest.TestInstance::::fullyConnected(int,int)","171":"GraphMatchingTest.TestInstance::::fullyConnected(int,int)","172":"GraphMatchingTest.TestInstance::::fullyConnected(int,int)","173":"GraphMatchingTest.TestInstance::::fullyConnected(int,int)","174":"GraphMatchingTest.TestInstance::::fullyConnected(int,int)","175":"GraphMatchingTest.TestInstance::::fullyConnected(int,int)","176":"GraphMatchingTest.TestInstance::::fullyConnected(int,int)","177":"GraphMatchingTest.TestInstance::::fullyConnected(int,int)","186":"GraphMatchingTest.TestInstance::::fromBits(int,int,java.util.BitSet)","187":"GraphMatchingTest.TestInstance::::fromBits(int,int,java.util.BitSet)","188":"GraphMatchingTest.TestInstance::::fromBits(int,int,java.util.BitSet)","189":"GraphMatchingTest.TestInstance::::fromBits(int,int,java.util.BitSet)","190":"GraphMatchingTest.TestInstance::::fromBits(int,int,java.util.BitSet)","191":"GraphMatchingTest.TestInstance::::fromBits(int,int,java.util.BitSet)","192":"GraphMatchingTest.TestInstance::::fromBits(int,int,java.util.BitSet)","193":"GraphMatchingTest.TestInstance::::fromBits(int,int,java.util.BitSet)","194":"GraphMatchingTest.TestInstance::::fromBits(int,int,java.util.BitSet)","195":"GraphMatchingTest.TestInstance::::fromBits(int,int,java.util.BitSet)","196":"GraphMatchingTest.TestInstance::::fromBits(int,int,java.util.BitSet)","211":"GraphMatchingTest.TestInstance::::testAgainstBruteForce()","212":"GraphMatchingTest.TestInstance::::testAgainstBruteForce()","213":"GraphMatchingTest.TestInstance::::testAgainstBruteForce()","214":"GraphMatchingTest.TestInstance::::testAgainstBruteForce()","215":"GraphMatchingTest.TestInstance::::testAgainstBruteForce()","216":"GraphMatchingTest.TestInstance::::testAgainstBruteForce()","217":"GraphMatchingTest.TestInstance::::testAgainstBruteForce()","218":"GraphMatchingTest.TestInstance::::testAgainstBruteForce()","219":"GraphMatchingTest.TestInstance::::testAgainstBruteForce()","220":"GraphMatchingTest.TestInstance::::testAgainstBruteForce()","221":"GraphMatchingTest.TestInstance::::testAgainstBruteForce()","222":"GraphMatchingTest.TestInstance::::testAgainstBruteForce()","223":"GraphMatchingTest.TestInstance::::testAgainstBruteForce()","224":"GraphMatchingTest.TestInstance::::testAgainstBruteForce()","225":"GraphMatchingTest.TestInstance::::testAgainstBruteForce()","226":"GraphMatchingTest.TestInstance::::testAgainstBruteForce()","227":"GraphMatchingTest.TestInstance::::testAgainstBruteForce()","233":"GraphMatchingTest.TestInstance::::testAgainstKnownSize(int)","234":"GraphMatchingTest.TestInstance::::testAgainstKnownSize(int)","235":"GraphMatchingTest.TestInstance::::testAgainstKnownSize(int)","236":"GraphMatchingTest.TestInstance::::testAgainstKnownSize(int)","237":"GraphMatchingTest.TestInstance::::testAgainstKnownSize(int)","238":"GraphMatchingTest.TestInstance::::testAgainstKnownSize(int)","239":"GraphMatchingTest.TestInstance::::testAgainstKnownSize(int)","240":"GraphMatchingTest.TestInstance::::testAgainstKnownSize(int)","241":"GraphMatchingTest.TestInstance::::testAgainstKnownSize(int)","242":"GraphMatchingTest.TestInstance::::testAgainstKnownSize(int)","243":"GraphMatchingTest.TestInstance::::testAgainstKnownSize(int)","244":"GraphMatchingTest.TestInstance::::testAgainstKnownSize(int)","245":"GraphMatchingTest.TestInstance::::testAgainstKnownSize(int)","246":"GraphMatchingTest.TestInstance::::testAgainstKnownSize(int)","252":"GraphMatchingTest.TestInstance::::bruteForceMaximalMatching()","253":"GraphMatchingTest.TestInstance::::bruteForceMaximalMatching()","254":"GraphMatchingTest.TestInstance::::bruteForceMaximalMatching()","255":"GraphMatchingTest.TestInstance::::bruteForceMaximalMatching()","256":"GraphMatchingTest.TestInstance::::bruteForceMaximalMatching()","257":"GraphMatchingTest.TestInstance::::bruteForceMaximalMatching()","258":"GraphMatchingTest.TestInstance::::bruteForceMaximalMatching()","259":"GraphMatchingTest.TestInstance::::bruteForceMaximalMatching()","260":"GraphMatchingTest.TestInstance::::bruteForceMaximalMatching()","261":"GraphMatchingTest.TestInstance::::bruteForceMaximalMatching()","262":"GraphMatchingTest.TestInstance::::bruteForceMaximalMatching()","289":"GraphMatchingTest.TestInstance.Matching::::valid()","290":"GraphMatchingTest.TestInstance.Matching::::valid()","291":"GraphMatchingTest.TestInstance.Matching::::valid()","292":"GraphMatchingTest.TestInstance.Matching::::valid()","293":"GraphMatchingTest.TestInstance.Matching::::valid()","301":"GraphMatchingTest.TestInstance.Matching::::asBiMap()","302":"GraphMatchingTest.TestInstance.Matching::::asBiMap()","303":"GraphMatchingTest.TestInstance.Matching::::asBiMap()","304":"GraphMatchingTest.TestInstance.Matching::::asBiMap()","310":"GraphMatchingTest.TestInstance.Matching::::size()","311":"GraphMatchingTest.TestInstance.Matching::::size()","312":"GraphMatchingTest.TestInstance.Matching::::size()","313":"GraphMatchingTest.TestInstance.Matching::::size()","319":"GraphMatchingTest.TestInstance.Matching::::advance()","320":"GraphMatchingTest.TestInstance.Matching::::advance()","321":"GraphMatchingTest.TestInstance.Matching::::advance()","322":"GraphMatchingTest.TestInstance.Matching::::advance()","323":"GraphMatchingTest.TestInstance.Matching::::advance()","324":"GraphMatchingTest.TestInstance.Matching::::advance()","325":"GraphMatchingTest.TestInstance.Matching::::advance()","326":"GraphMatchingTest.TestInstance.Matching::::advance()","327":"GraphMatchingTest.TestInstance.Matching::::advance()","328":"GraphMatchingTest.TestInstance.Matching::::advance()","329":"GraphMatchingTest.TestInstance.Matching::::advance()","330":"GraphMatchingTest.TestInstance.Matching::::advance()","331":"GraphMatchingTest.TestInstance.Matching::::advance()","332":"GraphMatchingTest.TestInstance.Matching::::advance()","333":"GraphMatchingTest.TestInstance.Matching::::advance()","334":"GraphMatchingTest.TestInstance.Matching::::advance()","335":"GraphMatchingTest.TestInstance.Matching::::advance()","336":"GraphMatchingTest.TestInstance.Matching::::advance()","337":"GraphMatchingTest.TestInstance.Matching::::advance()","338":"GraphMatchingTest.TestInstance.Matching::::advance()","339":"GraphMatchingTest.TestInstance.Matching::::advance()","340":"GraphMatchingTest.TestInstance.Matching::::advance()","341":"GraphMatchingTest.TestInstance.Matching::::advance()","342":"GraphMatchingTest.TestInstance.Matching::::advance()","343":"GraphMatchingTest.TestInstance.Matching::::advance()","344":"GraphMatchingTest.TestInstance.Matching::::advance()","345":"GraphMatchingTest.TestInstance.Matching::::advance()","373":"GraphMatchingTest.TestInstance.Matching.Edge::::valid()","374":"GraphMatchingTest.TestInstance.Matching.Edge::::valid()","375":"GraphMatchingTest.TestInstance.Matching.Edge::::valid()","376":"GraphMatchingTest.TestInstance.Matching.Edge::::valid()","377":"GraphMatchingTest.TestInstance.Matching.Edge::::valid()","383":"GraphMatchingTest.TestInstance.Matching.Edge::::addToSelected()","384":"GraphMatchingTest.TestInstance.Matching.Edge::::addToSelected()","385":"GraphMatchingTest.TestInstance.Matching.Edge::::addToSelected()","386":"GraphMatchingTest.TestInstance.Matching.Edge::::addToSelected()","387":"GraphMatchingTest.TestInstance.Matching.Edge::::addToSelected()","388":"GraphMatchingTest.TestInstance.Matching.Edge::::addToSelected()","394":"GraphMatchingTest.TestInstance.Matching.Edge::::removeFromSelected()","395":"GraphMatchingTest.TestInstance.Matching.Edge::::removeFromSelected()","396":"GraphMatchingTest.TestInstance.Matching.Edge::::removeFromSelected()","397":"GraphMatchingTest.TestInstance.Matching.Edge::::removeFromSelected()","398":"GraphMatchingTest.TestInstance.Matching.Edge::::removeFromSelected()","399":"GraphMatchingTest.TestInstance.Matching.Edge::::removeFromSelected()","406":"GraphMatchingTest.TestInstance.Matching.Edge::::advance()","407":"GraphMatchingTest.TestInstance.Matching.Edge::::advance()","408":"GraphMatchingTest.TestInstance.Matching.Edge::::advance()","409":"GraphMatchingTest.TestInstance.Matching.Edge::::advance()","410":"GraphMatchingTest.TestInstance.Matching.Edge::::advance()","411":"GraphMatchingTest.TestInstance.Matching.Edge::::advance()","412":"GraphMatchingTest.TestInstance.Matching.Edge::::advance()","413":"GraphMatchingTest.TestInstance.Matching.Edge::::advance()","414":"GraphMatchingTest.TestInstance.Matching.Edge::::advance()","415":"GraphMatchingTest.TestInstance.Matching.Edge::::advance()","416":"GraphMatchingTest.TestInstance.Matching.Edge::::advance()","417":"GraphMatchingTest.TestInstance.Matching.Edge::::advance()","418":"GraphMatchingTest.TestInstance.Matching.Edge::::advance()","419":"GraphMatchingTest.TestInstance.Matching.Edge::::advance()","420":"GraphMatchingTest.TestInstance.Matching.Edge::::advance()","421":"GraphMatchingTest.TestInstance.Matching.Edge::::advance()","422":"GraphMatchingTest.TestInstance.Matching.Edge::::advance()","423":"GraphMatchingTest.TestInstance.Matching.Edge::::advance()","424":"GraphMatchingTest.TestInstance.Matching.Edge::::advance()","425":"GraphMatchingTest.TestInstance.Matching.Edge::::advance()","426":"GraphMatchingTest.TestInstance.Matching.Edge::::advance()","428":"GraphMatchingTest.TestInstance.Matching.Edge::::lhsVertex()","429":"GraphMatchingTest.TestInstance.Matching.Edge::::lhsVertex()","430":"GraphMatchingTest.TestInstance.Matching.Edge::::lhsVertex()","432":"GraphMatchingTest.TestInstance.Matching.Edge::::rhsVertex()","433":"GraphMatchingTest.TestInstance.Matching.Edge::::rhsVertex()","434":"GraphMatchingTest.TestInstance.Matching.Edge::::rhsVertex()","440":"GraphMatchingTest::::intBits(int)","441":"GraphMatchingTest::::intBits(int)","442":"GraphMatchingTest::::intBits(int)","443":"GraphMatchingTest::::intBits(int)","444":"GraphMatchingTest::::intBits(int)","445":"GraphMatchingTest::::intBits(int)","446":"GraphMatchingTest::::intBits(int)","452":"GraphMatchingTest::::randomBits(int,double,java.util.Random)","453":"GraphMatchingTest::::randomBits(int,double,java.util.Random)","454":"GraphMatchingTest::::randomBits(int,double,java.util.Random)","455":"GraphMatchingTest::::randomBits(int,double,java.util.Random)","456":"GraphMatchingTest::::randomBits(int,double,java.util.Random)","457":"GraphMatchingTest::::randomBits(int,double,java.util.Random)","458":"GraphMatchingTest::::randomBits(int,double,java.util.Random)"},"tests":[{"test_lines":[48,51],"covered_lines":[57,80,83,84,85,89,93,94,95,97,108,133,134,137,145,178],"label":"<<UNRECOGNISED_METHOD>>"},{"test_lines":[53,58],"covered_lines":[57,80,83,84,85,89,93,94,95,97,102,103,104,106,107,108,133,134,137,138,139,140,142,145,146,147,149,150,156,157,161,162,169,170,171,172,175,176,178,228,229,231,234,235,240,241,245,246,249,255,256,260,261],"label":"<<UNRECOGNISED_METHOD>>"},{"test_lines":[60,69],"covered_lines":[57,80,83,84,85,89,93,94,95,97,102,103,104,106,107,108,133,134,137,138,139,140,142,145,146,147,149,150,156,157,161,162,169,170,171,172,175,176,178,228,229,231,234,235,240,241,245,246,249,255,256,260,261],"label":"<<UNRECOGNISED_METHOD>>"},{"test_lines":[71,80],"covered_lines":[57,80,83,84,85,89,93,94,95,97,102,103,104,106,107,108,133,134,137,138,139,140,142,145,146,147,149,150,156,157,161,162,169,170,171,172,175,176,178,228,229,231,234,235,240,241,245,246,249,255,256,260,261],"label":"<<UNRECOGNISED_METHOD>>"},{"test_lines":[82,91],"covered_lines":[57,80,83,84,85,89,93,94,95,97,102,103,104,106,107,108,133,134,137,138,139,140,142,145,146,147,149,150,156,157,161,162,169,170,171,172,175,176,178,228,229,231,234,235,240,241,245,246,249,255,256,260,261],"label":"<<UNRECOGNISED_METHOD>>"},{"test_lines":[93,96],"covered_lines":[57,80,83,84,85,89,93,94,95,97,102,103,104,106,107,108,133,134,137,138,139,140,142,145,146,147,149,156,157,161,162,175,176,178,228,229,234,235,240,241,245,246,260],"label":"<<UNRECOGNISED_METHOD>>"},{"test_lines":[98,107],"covered_lines":[57,80,83,84,85,89,93,94,95,97,102,103,104,106,107,108,133,134,137,138,139,140,142,145,146,147,149,150,156,157,161,162,169,170,171,172,175,176,178,228,229,231,234,235,240,241,245,246,249,255,256,260,261],"label":"<<UNRECOGNISED_METHOD>>"},{"test_lines":[109,117],"covered_lines":[57,80,83,84,85,89,93,94,95,97,102,103,104,106,107,108,133,134,137,138,139,140,142,145,146,147,149,150,156,157,161,162,169,170,171,172,175,176,178,228,229,231,234,235,240,241,245,246,249,255,256,260,261],"label":"<<UNRECOGNISED_METHOD>>"},{"test_lines":[119,132],"covered_lines":[57,80,83,84,85,89,93,94,95,97,102,103,104,106,107,108,133,134,137,138,139,140,142,145,146,147,149,150,156,157,161,162,169,170,171,172,175,176,178,228,229,231,234,235,240,241,245,246,249,255,256,260,261],"label":"<<UNRECOGNISED_METHOD>>"},{"test_lines":[134,143],"covered_lines":[80,83,84,85,89,93,133,134,137,138,139],"label":"<<UNRECOGNISED_METHOD>>"},{"test_lines":[145,154],"covered_lines":[80,83,84,85,89,93,94,95,102,103,104,106,107,133,134,137,138,139,140,142,145,146,147,149,156,157,161,162,175,176,178,228,229,234,235,240,241],"label":"<<UNRECOGNISED_METHOD>>"}]},"/bernard/dataset_construction/prep/repos/truth/core/src/main/java/com/google/common/truth/FloatSubject.java":{"class_content":["/*\n"," * Copyright (c) 2014 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","\n","package com.google.common.truth;\n","\n","import static com.google.common.base.Preconditions.checkArgument;\n","import static com.google.common.base.Preconditions.checkNotNull;\n","import static com.google.common.truth.Fact.fact;\n","import static com.google.common.truth.Fact.simpleFact;\n","import static com.google.common.truth.MathUtil.equalWithinTolerance;\n","import static com.google.common.truth.MathUtil.notEqualWithinTolerance;\n","import static com.google.common.truth.Platform.floatToString;\n","import static java.lang.Float.NaN;\n","import static java.lang.Float.floatToIntBits;\n","\n","import org.checkerframework.checker.nullness.qual.Nullable;\n","\n","/**\n"," * Propositions for {@link Float} subjects.\n"," *\n"," * @author Kurt Alfred Kluever\n"," */\n","public final class FloatSubject extends ComparableSubject<Float> {\n","  private static final int NEG_ZERO_BITS = floatToIntBits(-0.0f);\n","\n","  private final @Nullable Float actual;\n","  private final DoubleSubject asDouble;\n","\n","  FloatSubject(FailureMetadata metadata, @Nullable Float actual) {\n","    super(metadata, actual);\n","    this.actual = actual;\n","    /*\n","     * Doing anything with the FailureMetadata besides passing it to super(...) is generally bad\n","     * practice. For an explanation of why it works out OK here, see LiteProtoSubject.\n","     *\n","     * An alternative approach would be to reimplement isLessThan, etc. here.\n","     */\n","    this.asDouble = new DoubleSubject(metadata, actual == null ? null : Double.valueOf(actual));\n","  }\n","\n","  /**\n","   * A partially specified check about an approximate relationship to a {@code float} subject using\n","   * a tolerance.\n","   */\n","  public abstract static class TolerantFloatComparison {\n","\n","    // Prevent subclassing outside of this class\n","    private TolerantFloatComparison() {}\n","\n","    /**\n","     * Fails if the subject was expected to be within the tolerance of the given value but was not\n","     * <i>or</i> if it was expected <i>not</i> to be within the tolerance but was. The subject and\n","     * tolerance are specified earlier in the fluent call chain.\n","     */\n","    public abstract void of(float expectedFloat);\n","\n","    /**\n","     * @throws UnsupportedOperationException always\n","     * @deprecated {@link Object#equals(Object)} is not supported on TolerantFloatComparison. If you\n","     *     meant to compare floats, use {@link #of(float)} instead.\n","     */\n","    @Deprecated\n","    @Override\n","    public boolean equals(@Nullable Object o) {\n","      throw new UnsupportedOperationException(\n","          \"If you meant to compare floats, use .of(float) instead.\");\n","    }\n","\n","    /**\n","     * @throws UnsupportedOperationException always\n","     * @deprecated {@link Object#hashCode()} is not supported on TolerantFloatComparison\n","     */\n","    @Deprecated\n","    @Override\n","    public int hashCode() {\n","      throw new UnsupportedOperationException(\"Subject.hashCode() is not supported.\");\n","    }\n","  }\n","\n","  /**\n","   * Prepares for a check that the subject is a finite number within the given tolerance of an\n","   * expected value that will be provided in the next call in the fluent chain.\n","   *\n","   * <p>The check will fail if either the subject or the object is {@link Float#POSITIVE_INFINITY},\n","   * {@link Float#NEGATIVE_INFINITY}, or {@link Float#NaN}. To check for those values, use {@link\n","   * #isPositiveInfinity}, {@link #isNegativeInfinity}, {@link #isNaN}, or (with more generality)\n","   * {@link #isEqualTo}.\n","   *\n","   * <p>The check will pass if both values are zero, even if one is {@code 0.0f} and the other is\n","   * {@code -0.0f}. Use {@code #isEqualTo} to assert that a value is exactly {@code 0.0f} or that it\n","   * is exactly {@code -0.0f}.\n","   *\n","   * <p>You can use a tolerance of {@code 0.0f} to assert the exact equality of finite floats, but\n","   * often {@link #isEqualTo} is preferable (note the different behaviours around non-finite values\n","   * and {@code -0.0f}). See the documentation on {@link #isEqualTo} for advice on when exact\n","   * equality assertions are appropriate.\n","   *\n","   * @param tolerance an inclusive upper bound on the difference between the subject and object\n","   *     allowed by the check, which must be a non-negative finite value, i.e. not {@link\n","   *     Float#NaN}, {@link Float#POSITIVE_INFINITY}, or negative, including {@code -0.0f}\n","   */\n","  public TolerantFloatComparison isWithin(float tolerance) {\n","    return new TolerantFloatComparison() {\n","      @Override\n","      public void of(float expected) {\n","        Float actual = FloatSubject.this.actual;\n","        checkNotNull(\n","            actual, \"actual value cannot be null. tolerance=%s expected=%s\", tolerance, expected);\n","        checkTolerance(tolerance);\n","\n","        if (!equalWithinTolerance(actual, expected, tolerance)) {\n","          failWithoutActual(\n","              fact(\"expected\", floatToString(expected)),\n","              butWas(),\n","              fact(\"outside tolerance\", floatToString(tolerance)));\n","        }\n","      }\n","    };\n","  }\n","\n","  /**\n","   * Prepares for a check that the subject is a finite number not within the given tolerance of an\n","   * expected value that will be provided in the next call in the fluent chain.\n","   *\n","   * <p>The check will fail if either the subject or the object is {@link Float#POSITIVE_INFINITY},\n","   * {@link Float#NEGATIVE_INFINITY}, or {@link Float#NaN}. See {@link #isFinite}, {@link\n","   * #isNotNaN}, or {@link #isNotEqualTo} for checks with other behaviours.\n","   *\n","   * <p>The check will fail if both values are zero, even if one is {@code 0.0f} and the other is\n","   * {@code -0.0f}. Use {@code #isNotEqualTo} for a test which fails for a value of exactly zero\n","   * with one sign but passes for zero with the opposite sign.\n","   *\n","   * <p>You can use a tolerance of {@code 0.0f} to assert the exact non-equality of finite floats,\n","   * but sometimes {@link #isNotEqualTo} is preferable (note the different behaviours around\n","   * non-finite values and {@code -0.0f}).\n","   *\n","   * @param tolerance an exclusive lower bound on the difference between the subject and object\n","   *     allowed by the check, which must be a non-negative finite value, i.e. not {@code\n","   *     Float.NaN}, {@code Float.POSITIVE_INFINITY}, or negative, including {@code -0.0f}\n","   */\n","  public TolerantFloatComparison isNotWithin(float tolerance) {\n","    return new TolerantFloatComparison() {\n","      @Override\n","      public void of(float expected) {\n","        Float actual = FloatSubject.this.actual;\n","        checkNotNull(\n","            actual, \"actual value cannot be null. tolerance=%s expected=%s\", tolerance, expected);\n","        checkTolerance(tolerance);\n","\n","        if (!notEqualWithinTolerance(actual, expected, tolerance)) {\n","          failWithoutActual(\n","              fact(\"expected not to be\", floatToString(expected)),\n","              butWas(),\n","              fact(\"within tolerance\", floatToString(tolerance)));\n","        }\n","      }\n","    };\n","  }\n","\n","  /**\n","   * Asserts that the subject is exactly equal to the given value, with equality defined as by\n","   * {@code Float#equals}. This method is <i>not</i> recommended when the code under test is doing\n","   * any kind of arithmetic: use {@link #isWithin} with a suitable tolerance in that case. (Remember\n","   * that the exact result of floating point arithmetic is sensitive to apparently trivial changes\n","   * such as replacing {@code (a + b) + c} with {@code a + (b + c)}, and that unless {@code\n","   * strictfp} is in force even the result of {@code (a + b) + c} is sensitive to the JVM's choice\n","   * of precision for the intermediate result.) This method is recommended when the code under test\n","   * is specified as either copying a value without modification from its input or returning a\n","   * well-defined literal or constant value.\n","   *\n","   * <p><b>Note:</b> The assertion {@code isEqualTo(0.0f)} fails for an input of {@code -0.0f}, and\n","   * vice versa. For an assertion that passes for either {@code 0.0f} or {@code -0.0f}, use {@link\n","   * #isZero}.\n","   */\n","  @Override\n","  public final void isEqualTo(@Nullable Object other) {\n","    super.isEqualTo(other);\n","  }\n","\n","  /**\n","   * Asserts that the subject is not exactly equal to the given value, with equality defined as by\n","   * {@code Float#equals}. See {@link #isEqualTo} for advice on when exact equality is recommended.\n","   * Use {@link #isNotWithin} for an assertion with a tolerance.\n","   *\n","   * <p><b>Note:</b> The assertion {@code isNotEqualTo(0.0f)} passes for {@code -0.0f}, and vice\n","   * versa. For an assertion that fails for either {@code 0.0f} or {@code -0.0f}, use {@link\n","   * #isNonZero}.\n","   */\n","  @Override\n","  public final void isNotEqualTo(@Nullable Object other) {\n","    super.isNotEqualTo(other);\n","  }\n","\n","  /**\n","   * @deprecated Use {@link #isWithin} or {@link #isEqualTo} instead (see documentation for advice).\n","   */\n","  @Override\n","  @Deprecated\n","  public final void isEquivalentAccordingToCompareTo(@Nullable Float other) {\n","    super.isEquivalentAccordingToCompareTo(other);\n","  }\n","\n","  /**\n","   * Ensures that the given tolerance is a non-negative finite value, i.e. not {@code Float.NaN},\n","   * {@code Float.POSITIVE_INFINITY}, or negative, including {@code -0.0f}.\n","   */\n","  static void checkTolerance(float tolerance) {\n","    checkArgument(!Float.isNaN(tolerance), \"tolerance cannot be NaN\");\n","    checkArgument(tolerance >= 0.0f, \"tolerance (%s) cannot be negative\", tolerance);\n","    checkArgument(\n","        floatToIntBits(tolerance) != NEG_ZERO_BITS, \"tolerance (%s) cannot be negative\", tolerance);\n","    checkArgument(tolerance != Float.POSITIVE_INFINITY, \"tolerance cannot be POSITIVE_INFINITY\");\n","  }\n","\n","  /** Asserts that the subject is zero (i.e. it is either {@code 0.0f} or {@code -0.0f}). */\n","  public final void isZero() {\n","    if (actual == null || actual.floatValue() != 0.0f) {\n","      failWithActual(simpleFact(\"expected zero\"));\n","    }\n","  }\n","\n","  /**\n","   * Asserts that the subject is a non-null value other than zero (i.e. it is not {@code 0.0f},\n","   * {@code -0.0f} or {@code null}).\n","   */\n","  public final void isNonZero() {\n","    if (actual == null) {\n","      failWithActual(simpleFact(\"expected a float other than zero\"));\n","    } else if (actual.floatValue() == 0.0f) {\n","      failWithActual(simpleFact(\"expected not to be zero\"));\n","    }\n","  }\n","\n","  /** Asserts that the subject is {@link Float#POSITIVE_INFINITY}. */\n","  public final void isPositiveInfinity() {\n","    isEqualTo(Float.POSITIVE_INFINITY);\n","  }\n","\n","  /** Asserts that the subject is {@link Float#NEGATIVE_INFINITY}. */\n","  public final void isNegativeInfinity() {\n","    isEqualTo(Float.NEGATIVE_INFINITY);\n","  }\n","\n","  /** Asserts that the subject is {@link Float#NaN}. */\n","  public final void isNaN() {\n","    isEqualTo(NaN);\n","  }\n","\n","  /**\n","   * Asserts that the subject is finite, i.e. not {@link Float#POSITIVE_INFINITY}, {@link\n","   * Float#NEGATIVE_INFINITY}, or {@link Float#NaN}.\n","   */\n","  public final void isFinite() {\n","    if (actual == null || actual.isNaN() || actual.isInfinite()) {\n","      failWithActual(simpleFact(\"expected to be finite\"));\n","    }\n","  }\n","\n","  /**\n","   * Asserts that the subject is a non-null value other than {@link Float#NaN} (but it may be {@link\n","   * Float#POSITIVE_INFINITY} or {@link Float#NEGATIVE_INFINITY}).\n","   */\n","  public final void isNotNaN() {\n","    if (actual == null) {\n","      failWithActual(simpleFact(\"expected a float other than NaN\"));\n","    } else {\n","      isNotEqualTo(NaN);\n","    }\n","  }\n","\n","  /**\n","   * Checks that the subject is greater than {@code other}.\n","   *\n","   * <p>To check that the subject is greater than <i>or equal to</i> {@code other}, use {@link\n","   * #isAtLeast}.\n","   */\n","  public final void isGreaterThan(int other) {\n","    asDouble.isGreaterThan(other);\n","  }\n","\n","  /**\n","   * Checks that the subject is less than {@code other}.\n","   *\n","   * <p>To check that the subject is less than <i>or equal to</i> {@code other}, use {@link\n","   * #isAtMost} .\n","   */\n","  public final void isLessThan(int other) {\n","    asDouble.isLessThan(other);\n","  }\n","\n","  /**\n","   * Checks that the subject is less than or equal to {@code other}.\n","   *\n","   * <p>To check that the subject is <i>strictly</i> less than {@code other}, use {@link\n","   * #isLessThan}.\n","   */\n","  public final void isAtMost(int other) {\n","    asDouble.isAtMost(other);\n","  }\n","\n","  /**\n","   * Checks that the subject is greater than or equal to {@code other}.\n","   *\n","   * <p>To check that the subject is <i>strictly</i> greater than {@code other}, use {@link\n","   * #isGreaterThan}.\n","   */\n","  public final void isAtLeast(int other) {\n","    asDouble.isAtLeast(other);\n","  }\n","}\n"],"test_content":["/*\n"," * Copyright (c) 2014 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.truth.ExpectFailure.assertThat;\n","import static com.google.common.truth.Platform.floatToString;\n","import static com.google.common.truth.Truth.assertThat;\n","import static org.junit.Assert.fail;\n","\n","import com.google.common.annotations.GwtIncompatible;\n","import com.google.common.truth.ExpectFailure.SimpleSubjectBuilderCallback;\n","import com.google.errorprone.annotations.CanIgnoreReturnValue;\n","import org.checkerframework.checker.nullness.qual.Nullable;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import org.junit.runners.JUnit4;\n","\n","/**\n"," * Tests for Float Subjects.\n"," *\n"," * @author Kurt Alfred Kluever\n"," */\n","@RunWith(JUnit4.class)\n","public class FloatSubjectTest extends BaseSubjectTestCase {\n","  private static final float NEARLY_MAX = 3.4028233E38f;\n","  private static final float NEGATIVE_NEARLY_MAX = -3.4028233E38f;\n","  private static final float JUST_OVER_MIN = 2.8E-45f;\n","  private static final float JUST_UNDER_NEGATIVE_MIN = -2.8E-45f;\n","  private static final float GOLDEN = 1.23f;\n","  private static final float JUST_OVER_GOLDEN = 1.2300001f;\n","\n","  private static final Subject.Factory<FloatSubject, Float> FLOAT_SUBJECT_FACTORY =\n","      new Subject.Factory<FloatSubject, Float>() {\n","        @Override\n","        public FloatSubject createSubject(FailureMetadata metadata, Float that) {\n","          return new FloatSubject(metadata, that);\n","        }\n","      };\n","\n","  @CanIgnoreReturnValue\n","  private static AssertionError expectFailure(\n","      SimpleSubjectBuilderCallback<FloatSubject, Float> callback) {\n","    return ExpectFailure.expectFailureAbout(FLOAT_SUBJECT_FACTORY, callback);\n","  }\n","\n","  @Test\n","  @GwtIncompatible(\"Math.nextAfter\")\n","  public void testFloatConstants_matchNextAfter() {\n","    assertThat(Math.nextAfter(Float.MAX_VALUE, 0.0f)).isEqualTo(NEARLY_MAX);\n","    assertThat(Math.nextAfter(-1.0f * Float.MAX_VALUE, 0.0f)).isEqualTo(NEGATIVE_NEARLY_MAX);\n","    assertThat(Math.nextAfter(Float.MIN_VALUE, 1.0f)).isEqualTo(JUST_OVER_MIN);\n","    assertThat(Math.nextAfter(-1.0f * Float.MIN_VALUE, -1.0f)).isEqualTo(JUST_UNDER_NEGATIVE_MIN);\n","    assertThat(1.23f).isEqualTo(GOLDEN);\n","    assertThat(Math.nextAfter(1.23f, Float.POSITIVE_INFINITY)).isEqualTo(JUST_OVER_GOLDEN);\n","  }\n","\n","  @Test\n","  public void testJ2clCornerCaseZero() {\n","    // GWT considers -0.0 to be equal to 0.0. But we've added a special workaround inside Truth.\n","    assertThatIsEqualToFails(-0.0f, 0.0f);\n","  }\n","\n","  @Test\n","  @GwtIncompatible(\"GWT behavior difference\")\n","  public void j2clCornerCaseDoubleVsFloat() {\n","    // Under GWT, 1.23f.toString() is different than 1.23d.toString(), so the message omits types.\n","    // TODO(b/35377736): Consider making Truth add the types manually.\n","    expectFailureWhenTestingThat(1.23f).isEqualTo(1.23);\n","    assertFailureKeys(\"expected\", \"an instance of\", \"but was\", \"an instance of\");\n","  }\n","\n","  @Test\n","  public void isWithinOf() {\n","    assertThat(2.0f).isWithin(0.0f).of(2.0f);\n","    assertThat(2.0f).isWithin(0.00001f).of(2.0f);\n","    assertThat(2.0f).isWithin(1000.0f).of(2.0f);\n","    assertThat(2.0f).isWithin(1.00001f).of(3.0f);\n","    assertThatIsWithinFails(2.0f, 0.99999f, 3.0f);\n","    assertThatIsWithinFails(2.0f, 1000.0f, 1003.0f);\n","    assertThatIsWithinFails(2.0f, 1000.0f, Float.POSITIVE_INFINITY);\n","    assertThatIsWithinFails(2.0f, 1000.0f, Float.NaN);\n","    assertThatIsWithinFails(Float.NEGATIVE_INFINITY, 1000.0f, 2.0f);\n","    assertThatIsWithinFails(Float.NaN, 1000.0f, 2.0f);\n","  }\n","\n","  private static void assertThatIsWithinFails(float actual, float tolerance, float expected) {\n","    ExpectFailure.SimpleSubjectBuilderCallback<FloatSubject, Float> callback =\n","        new ExpectFailure.SimpleSubjectBuilderCallback<FloatSubject, Float>() {\n","          @Override\n","          public void invokeAssertion(SimpleSubjectBuilder<FloatSubject, Float> expect) {\n","            expect.that(actual).isWithin(tolerance).of(expected);\n","          }\n","        };\n","    AssertionError failure = expectFailure(callback);\n","    assertThat(failure)\n","        .factKeys()\n","        .containsExactly(\"expected\", \"but was\", \"outside tolerance\")\n","        .inOrder();\n","    assertThat(failure).factValue(\"expected\").isEqualTo(floatToString(expected));\n","    assertThat(failure).factValue(\"but was\").isEqualTo(floatToString(actual));\n","    assertThat(failure).factValue(\"outside tolerance\").isEqualTo(floatToString(tolerance));\n","  }\n","\n","  @Test\n","  public void isNotWithinOf() {\n","    assertThatIsNotWithinFails(2.0f, 0.0f, 2.0f);\n","    assertThatIsNotWithinFails(2.0f, 0.00001f, 2.0f);\n","    assertThatIsNotWithinFails(2.0f, 1000.0f, 2.0f);\n","    assertThatIsNotWithinFails(2.0f, 1.00001f, 3.0f);\n","    assertThat(2.0f).isNotWithin(0.99999f).of(3.0f);\n","    assertThat(2.0f).isNotWithin(1000.0f).of(1003.0f);\n","    assertThatIsNotWithinFails(2.0f, 0.0f, Float.POSITIVE_INFINITY);\n","    assertThatIsNotWithinFails(2.0f, 0.0f, Float.NaN);\n","    assertThatIsNotWithinFails(Float.NEGATIVE_INFINITY, 1000.0f, 2.0f);\n","    assertThatIsNotWithinFails(Float.NaN, 1000.0f, 2.0f);\n","  }\n","\n","  private static void assertThatIsNotWithinFails(float actual, float tolerance, float expected) {\n","    ExpectFailure.SimpleSubjectBuilderCallback<FloatSubject, Float> callback =\n","        new ExpectFailure.SimpleSubjectBuilderCallback<FloatSubject, Float>() {\n","          @Override\n","          public void invokeAssertion(SimpleSubjectBuilder<FloatSubject, Float> expect) {\n","            expect.that(actual).isNotWithin(tolerance).of(expected);\n","          }\n","        };\n","    AssertionError failure = expectFailure(callback);\n","    assertThat(failure).factValue(\"expected not to be\").isEqualTo(floatToString(expected));\n","    assertThat(failure).factValue(\"within tolerance\").isEqualTo(floatToString(tolerance));\n","  }\n","\n","  @Test\n","  public void negativeTolerances() {\n","    isWithinNegativeToleranceThrowsIAE(5.0f, -0.5f, 4.9f);\n","    isWithinNegativeToleranceThrowsIAE(5.0f, -0.5f, 4.0f);\n","\n","    isNotWithinNegativeToleranceThrowsIAE(5.0f, -0.5f, 4.9f);\n","    isNotWithinNegativeToleranceThrowsIAE(5.0f, -0.5f, 4.0f);\n","\n","    isWithinNegativeToleranceThrowsIAE(+0.0f, -0.00001f, +0.0f);\n","    isWithinNegativeToleranceThrowsIAE(+0.0f, -0.00001f, -0.0f);\n","    isWithinNegativeToleranceThrowsIAE(-0.0f, -0.00001f, +0.0f);\n","    isWithinNegativeToleranceThrowsIAE(-0.0f, -0.00001f, -0.0f);\n","\n","    isNotWithinNegativeToleranceThrowsIAE(+0.0f, -0.00001f, +1.0f);\n","    isNotWithinNegativeToleranceThrowsIAE(+0.0f, -0.00001f, -1.0f);\n","    isNotWithinNegativeToleranceThrowsIAE(-0.0f, -0.00001f, +1.0f);\n","    isNotWithinNegativeToleranceThrowsIAE(-0.0f, -0.00001f, -1.0f);\n","\n","    isNotWithinNegativeToleranceThrowsIAE(+1.0f, -0.00001f, +0.0f);\n","    isNotWithinNegativeToleranceThrowsIAE(+1.0f, -0.00001f, -0.0f);\n","    isNotWithinNegativeToleranceThrowsIAE(-1.0f, -0.00001f, +0.0f);\n","    isNotWithinNegativeToleranceThrowsIAE(-1.0f, -0.00001f, -0.0f);\n","\n","    // You know what's worse than zero? Negative zero.\n","\n","    isWithinNegativeToleranceThrowsIAE(+0.0f, -0.0f, +0.0f);\n","    isWithinNegativeToleranceThrowsIAE(+0.0f, -0.0f, -0.0f);\n","    isWithinNegativeToleranceThrowsIAE(-0.0f, -0.0f, +0.0f);\n","    isWithinNegativeToleranceThrowsIAE(-0.0f, -0.0f, -0.0f);\n","\n","    isNotWithinNegativeToleranceThrowsIAE(+1.0f, -0.0f, +0.0f);\n","    isNotWithinNegativeToleranceThrowsIAE(+1.0f, -0.0f, -0.0f);\n","    isNotWithinNegativeToleranceThrowsIAE(-1.0f, -0.0f, +0.0f);\n","    isNotWithinNegativeToleranceThrowsIAE(-1.0f, -0.0f, -0.0f);\n","  }\n","\n","  private static void isWithinNegativeToleranceThrowsIAE(\n","      float actual, float tolerance, float expected) {\n","    try {\n","      assertThat(actual).isWithin(tolerance).of(expected);\n","      fail(\"Expected IllegalArgumentException to be thrown but wasn't\");\n","    } catch (IllegalArgumentException iae) {\n","      assertThat(iae)\n","          .hasMessageThat()\n","          .isEqualTo(\"tolerance (\" + tolerance + \") cannot be negative\");\n","    }\n","  }\n","\n","  private static void isNotWithinNegativeToleranceThrowsIAE(\n","      float actual, float tolerance, float expected) {\n","    try {\n","      assertThat(actual).isNotWithin(tolerance).of(expected);\n","      fail(\"Expected IllegalArgumentException to be thrown but wasn't\");\n","    } catch (IllegalArgumentException iae) {\n","      assertThat(iae)\n","          .hasMessageThat()\n","          .isEqualTo(\"tolerance (\" + tolerance + \") cannot be negative\");\n","    }\n","  }\n","\n","  @Test\n","  public void nanTolerances() {\n","    try {\n","      assertThat(1.0f).isWithin(Float.NaN).of(1.0f);\n","      fail(\"Expected IllegalArgumentException to be thrown but wasn't\");\n","    } catch (IllegalArgumentException iae) {\n","      assertThat(iae).hasMessageThat().isEqualTo(\"tolerance cannot be NaN\");\n","    }\n","    try {\n","      assertThat(1.0f).isNotWithin(Float.NaN).of(2.0f);\n","      fail(\"Expected IllegalArgumentException to be thrown but wasn't\");\n","    } catch (IllegalArgumentException iae) {\n","      assertThat(iae).hasMessageThat().isEqualTo(\"tolerance cannot be NaN\");\n","    }\n","  }\n","\n","  @Test\n","  public void infiniteTolerances() {\n","    try {\n","      assertThat(1.0f).isWithin(Float.POSITIVE_INFINITY).of(1.0f);\n","      fail(\"Expected IllegalArgumentException to be thrown but wasn't\");\n","    } catch (IllegalArgumentException iae) {\n","      assertThat(iae).hasMessageThat().isEqualTo(\"tolerance cannot be POSITIVE_INFINITY\");\n","    }\n","    try {\n","      assertThat(1.0f).isNotWithin(Float.POSITIVE_INFINITY).of(2.0f);\n","      fail(\"Expected IllegalArgumentException to be thrown but wasn't\");\n","    } catch (IllegalArgumentException iae) {\n","      assertThat(iae).hasMessageThat().isEqualTo(\"tolerance cannot be POSITIVE_INFINITY\");\n","    }\n","  }\n","\n","  @Test\n","  public void isWithinOfZero() {\n","    assertThat(+0.0f).isWithin(0.00001f).of(+0.0f);\n","    assertThat(+0.0f).isWithin(0.00001f).of(-0.0f);\n","    assertThat(-0.0f).isWithin(0.00001f).of(+0.0f);\n","    assertThat(-0.0f).isWithin(0.00001f).of(-0.0f);\n","\n","    assertThat(+0.0f).isWithin(0.0f).of(+0.0f);\n","    assertThat(+0.0f).isWithin(0.0f).of(-0.0f);\n","    assertThat(-0.0f).isWithin(0.0f).of(+0.0f);\n","    assertThat(-0.0f).isWithin(0.0f).of(-0.0f);\n","  }\n","\n","  @Test\n","  public void isNotWithinOfZero() {\n","    assertThat(+0.0f).isNotWithin(0.00001f).of(+1.0f);\n","    assertThat(+0.0f).isNotWithin(0.00001f).of(-1.0f);\n","    assertThat(-0.0f).isNotWithin(0.00001f).of(+1.0f);\n","    assertThat(-0.0f).isNotWithin(0.00001f).of(-1.0f);\n","\n","    assertThat(+1.0f).isNotWithin(0.00001f).of(+0.0f);\n","    assertThat(+1.0f).isNotWithin(0.00001f).of(-0.0f);\n","    assertThat(-1.0f).isNotWithin(0.00001f).of(+0.0f);\n","    assertThat(-1.0f).isNotWithin(0.00001f).of(-0.0f);\n","\n","    assertThat(+1.0f).isNotWithin(0.0f).of(+0.0f);\n","    assertThat(+1.0f).isNotWithin(0.0f).of(-0.0f);\n","    assertThat(-1.0f).isNotWithin(0.0f).of(+0.0f);\n","    assertThat(-1.0f).isNotWithin(0.0f).of(-0.0f);\n","\n","    assertThatIsNotWithinFails(-0.0f, 0.0f, 0.0f);\n","  }\n","\n","  @Test\n","  public void isWithinZeroTolerance() {\n","    float max = Float.MAX_VALUE;\n","    assertThat(max).isWithin(0.0f).of(max);\n","    assertThat(NEARLY_MAX).isWithin(0.0f).of(NEARLY_MAX);\n","    assertThatIsWithinFails(max, 0.0f, NEARLY_MAX);\n","    assertThatIsWithinFails(NEARLY_MAX, 0.0f, max);\n","\n","    float negativeMax = -1.0f * Float.MAX_VALUE;\n","    assertThat(negativeMax).isWithin(0.0f).of(negativeMax);\n","    assertThat(NEGATIVE_NEARLY_MAX).isWithin(0.0f).of(NEGATIVE_NEARLY_MAX);\n","    assertThatIsWithinFails(negativeMax, 0.0f, NEGATIVE_NEARLY_MAX);\n","    assertThatIsWithinFails(NEGATIVE_NEARLY_MAX, 0.0f, negativeMax);\n","\n","    float min = Float.MIN_VALUE;\n","    assertThat(min).isWithin(0.0f).of(min);\n","    assertThat(JUST_OVER_MIN).isWithin(0.0f).of(JUST_OVER_MIN);\n","    assertThatIsWithinFails(min, 0.0f, JUST_OVER_MIN);\n","    assertThatIsWithinFails(JUST_OVER_MIN, 0.0f, min);\n","\n","    float negativeMin = -1.0f * Float.MIN_VALUE;\n","    assertThat(negativeMin).isWithin(0.0f).of(negativeMin);\n","    assertThat(JUST_UNDER_NEGATIVE_MIN).isWithin(0.0f).of(JUST_UNDER_NEGATIVE_MIN);\n","    assertThatIsWithinFails(negativeMin, 0.0f, JUST_UNDER_NEGATIVE_MIN);\n","    assertThatIsWithinFails(JUST_UNDER_NEGATIVE_MIN, 0.0f, negativeMin);\n","  }\n","\n","  @Test\n","  public void isNotWithinZeroTolerance() {\n","    float max = Float.MAX_VALUE;\n","    assertThatIsNotWithinFails(max, 0.0f, max);\n","    assertThatIsNotWithinFails(NEARLY_MAX, 0.0f, NEARLY_MAX);\n","    assertThat(max).isNotWithin(0.0f).of(NEARLY_MAX);\n","    assertThat(NEARLY_MAX).isNotWithin(0.0f).of(max);\n","\n","    float min = Float.MIN_VALUE;\n","    assertThatIsNotWithinFails(min, 0.0f, min);\n","    assertThatIsNotWithinFails(JUST_OVER_MIN, 0.0f, JUST_OVER_MIN);\n","    assertThat(min).isNotWithin(0.0f).of(JUST_OVER_MIN);\n","    assertThat(JUST_OVER_MIN).isNotWithin(0.0f).of(min);\n","  }\n","\n","  @Test\n","  public void isWithinNonFinite() {\n","    assertThatIsWithinFails(Float.NaN, 0.00001f, Float.NaN);\n","    assertThatIsWithinFails(Float.NaN, 0.00001f, Float.POSITIVE_INFINITY);\n","    assertThatIsWithinFails(Float.NaN, 0.00001f, Float.NEGATIVE_INFINITY);\n","    assertThatIsWithinFails(Float.NaN, 0.00001f, +0.0f);\n","    assertThatIsWithinFails(Float.NaN, 0.00001f, -0.0f);\n","    assertThatIsWithinFails(Float.NaN, 0.00001f, +1.0f);\n","    assertThatIsWithinFails(Float.NaN, 0.00001f, -0.0f);\n","    assertThatIsWithinFails(Float.POSITIVE_INFINITY, 0.00001f, Float.POSITIVE_INFINITY);\n","    assertThatIsWithinFails(Float.POSITIVE_INFINITY, 0.00001f, Float.NEGATIVE_INFINITY);\n","    assertThatIsWithinFails(Float.POSITIVE_INFINITY, 0.00001f, +0.0f);\n","    assertThatIsWithinFails(Float.POSITIVE_INFINITY, 0.00001f, -0.0f);\n","    assertThatIsWithinFails(Float.POSITIVE_INFINITY, 0.00001f, +1.0f);\n","    assertThatIsWithinFails(Float.POSITIVE_INFINITY, 0.00001f, -0.0f);\n","    assertThatIsWithinFails(Float.NEGATIVE_INFINITY, 0.00001f, Float.NEGATIVE_INFINITY);\n","    assertThatIsWithinFails(Float.NEGATIVE_INFINITY, 0.00001f, +0.0f);\n","    assertThatIsWithinFails(Float.NEGATIVE_INFINITY, 0.00001f, -0.0f);\n","    assertThatIsWithinFails(Float.NEGATIVE_INFINITY, 0.00001f, +1.0f);\n","    assertThatIsWithinFails(Float.NEGATIVE_INFINITY, 0.00001f, -0.0f);\n","    assertThatIsWithinFails(+1.0f, 0.00001f, Float.NaN);\n","    assertThatIsWithinFails(+1.0f, 0.00001f, Float.POSITIVE_INFINITY);\n","    assertThatIsWithinFails(+1.0f, 0.00001f, Float.NEGATIVE_INFINITY);\n","  }\n","\n","  @Test\n","  public void isNotWithinNonFinite() {\n","    assertThatIsNotWithinFails(Float.NaN, 0.00001f, Float.NaN);\n","    assertThatIsNotWithinFails(Float.NaN, 0.00001f, Float.POSITIVE_INFINITY);\n","    assertThatIsNotWithinFails(Float.NaN, 0.00001f, Float.NEGATIVE_INFINITY);\n","    assertThatIsNotWithinFails(Float.NaN, 0.00001f, +0.0f);\n","    assertThatIsNotWithinFails(Float.NaN, 0.00001f, -0.0f);\n","    assertThatIsNotWithinFails(Float.NaN, 0.00001f, +1.0f);\n","    assertThatIsNotWithinFails(Float.NaN, 0.00001f, -0.0f);\n","    assertThatIsNotWithinFails(Float.POSITIVE_INFINITY, 0.00001f, Float.POSITIVE_INFINITY);\n","    assertThatIsNotWithinFails(Float.POSITIVE_INFINITY, 0.00001f, Float.NEGATIVE_INFINITY);\n","    assertThatIsNotWithinFails(Float.POSITIVE_INFINITY, 0.00001f, +0.0f);\n","    assertThatIsNotWithinFails(Float.POSITIVE_INFINITY, 0.00001f, -0.0f);\n","    assertThatIsNotWithinFails(Float.POSITIVE_INFINITY, 0.00001f, +1.0f);\n","    assertThatIsNotWithinFails(Float.POSITIVE_INFINITY, 0.00001f, -0.0f);\n","    assertThatIsNotWithinFails(Float.NEGATIVE_INFINITY, 0.00001f, Float.NEGATIVE_INFINITY);\n","    assertThatIsNotWithinFails(Float.NEGATIVE_INFINITY, 0.00001f, +0.0f);\n","    assertThatIsNotWithinFails(Float.NEGATIVE_INFINITY, 0.00001f, -0.0f);\n","    assertThatIsNotWithinFails(Float.NEGATIVE_INFINITY, 0.00001f, +1.0f);\n","    assertThatIsNotWithinFails(Float.NEGATIVE_INFINITY, 0.00001f, -0.0f);\n","    assertThatIsNotWithinFails(+1.0f, 0.00001f, Float.NaN);\n","    assertThatIsNotWithinFails(+1.0f, 0.00001f, Float.POSITIVE_INFINITY);\n","    assertThatIsNotWithinFails(+1.0f, 0.00001f, Float.NEGATIVE_INFINITY);\n","  }\n","\n","  @SuppressWarnings(\"TruthSelfEquals\")\n","  @Test\n","  public void isEqualTo() {\n","    assertThat(GOLDEN).isEqualTo(GOLDEN);\n","    assertThatIsEqualToFails(GOLDEN, JUST_OVER_GOLDEN);\n","    assertThat(Float.POSITIVE_INFINITY).isEqualTo(Float.POSITIVE_INFINITY);\n","    assertThat(Float.NaN).isEqualTo(Float.NaN);\n","    assertThat((Float) null).isEqualTo(null);\n","    assertThat(1.0f).isEqualTo(1);\n","  }\n","\n","  private static void assertThatIsEqualToFails(float actual, float expected) {\n","    ExpectFailure.SimpleSubjectBuilderCallback<FloatSubject, Float> callback =\n","        new ExpectFailure.SimpleSubjectBuilderCallback<FloatSubject, Float>() {\n","          @Override\n","          public void invokeAssertion(SimpleSubjectBuilder<FloatSubject, Float> expect) {\n","            expect.that(actual).isEqualTo(expected);\n","          }\n","        };\n","    expectFailure(callback);\n","  }\n","\n","  @Test\n","  public void isNotEqualTo() {\n","    assertThatIsNotEqualToFails(GOLDEN);\n","    assertThat(GOLDEN).isNotEqualTo(JUST_OVER_GOLDEN);\n","    assertThatIsNotEqualToFails(Float.POSITIVE_INFINITY);\n","    assertThatIsNotEqualToFails(Float.NaN);\n","    assertThat(-0.0f).isNotEqualTo(0.0f);\n","    assertThatIsNotEqualToFails(null);\n","    assertThat(1.23f).isNotEqualTo(1.23);\n","    assertThat(1.0f).isNotEqualTo(2);\n","  }\n","\n","  private static void assertThatIsNotEqualToFails(@Nullable Float value) {\n","    ExpectFailure.SimpleSubjectBuilderCallback<FloatSubject, Float> callback =\n","        new ExpectFailure.SimpleSubjectBuilderCallback<FloatSubject, Float>() {\n","          @Override\n","          public void invokeAssertion(SimpleSubjectBuilder<FloatSubject, Float> expect) {\n","            expect.that(value).isNotEqualTo(value);\n","          }\n","        };\n","    expectFailure(callback);\n","  }\n","\n","  @Test\n","  public void isZero() {\n","    assertThat(0.0f).isZero();\n","    assertThat(-0.0f).isZero();\n","    assertThatIsZeroFails(Float.MIN_VALUE);\n","    assertThatIsZeroFails(-1.23f);\n","    assertThatIsZeroFails(Float.POSITIVE_INFINITY);\n","    assertThatIsZeroFails(Float.NaN);\n","    assertThatIsZeroFails(null);\n","  }\n","\n","  private static void assertThatIsZeroFails(@Nullable Float value) {\n","    ExpectFailure.SimpleSubjectBuilderCallback<FloatSubject, Float> callback =\n","        new ExpectFailure.SimpleSubjectBuilderCallback<FloatSubject, Float>() {\n","          @Override\n","          public void invokeAssertion(SimpleSubjectBuilder<FloatSubject, Float> expect) {\n","            expect.that(value).isZero();\n","          }\n","        };\n","    AssertionError failure = expectFailure(callback);\n","    assertThat(failure).factKeys().containsExactly(\"expected zero\", \"but was\").inOrder();\n","  }\n","\n","  @Test\n","  public void isNonZero() {\n","    assertThatIsNonZeroFails(0.0f, \"expected not to be zero\");\n","    assertThatIsNonZeroFails(-0.0f, \"expected not to be zero\");\n","    assertThat(Float.MIN_VALUE).isNonZero();\n","    assertThat(-1.23f).isNonZero();\n","    assertThat(Float.POSITIVE_INFINITY).isNonZero();\n","    assertThat(Float.NaN).isNonZero();\n","    assertThatIsNonZeroFails(null, \"expected a float other than zero\");\n","  }\n","\n","  private static void assertThatIsNonZeroFails(@Nullable Float value, String factKey) {\n","    ExpectFailure.SimpleSubjectBuilderCallback<FloatSubject, Float> callback =\n","        new ExpectFailure.SimpleSubjectBuilderCallback<FloatSubject, Float>() {\n","          @Override\n","          public void invokeAssertion(SimpleSubjectBuilder<FloatSubject, Float> expect) {\n","            expect.that(value).isNonZero();\n","          }\n","        };\n","    AssertionError failure = expectFailure(callback);\n","    assertThat(failure).factKeys().containsExactly(factKey, \"but was\").inOrder();\n","  }\n","\n","  @Test\n","  public void isPositiveInfinity() {\n","    assertThat(Float.POSITIVE_INFINITY).isPositiveInfinity();\n","    assertThatIsPositiveInfinityFails(1.23f);\n","    assertThatIsPositiveInfinityFails(Float.NEGATIVE_INFINITY);\n","    assertThatIsPositiveInfinityFails(Float.NaN);\n","    assertThatIsPositiveInfinityFails(null);\n","  }\n","\n","  private static void assertThatIsPositiveInfinityFails(@Nullable Float value) {\n","    ExpectFailure.SimpleSubjectBuilderCallback<FloatSubject, Float> callback =\n","        new ExpectFailure.SimpleSubjectBuilderCallback<FloatSubject, Float>() {\n","          @Override\n","          public void invokeAssertion(SimpleSubjectBuilder<FloatSubject, Float> expect) {\n","            expect.that(value).isPositiveInfinity();\n","          }\n","        };\n","    expectFailure(callback);\n","  }\n","\n","  @Test\n","  public void isNegativeInfinity() {\n","    assertThat(Float.NEGATIVE_INFINITY).isNegativeInfinity();\n","    assertThatIsNegativeInfinityFails(1.23f);\n","    assertThatIsNegativeInfinityFails(Float.POSITIVE_INFINITY);\n","    assertThatIsNegativeInfinityFails(Float.NaN);\n","    assertThatIsNegativeInfinityFails(null);\n","  }\n","\n","  private static void assertThatIsNegativeInfinityFails(@Nullable Float value) {\n","    ExpectFailure.SimpleSubjectBuilderCallback<FloatSubject, Float> callback =\n","        new ExpectFailure.SimpleSubjectBuilderCallback<FloatSubject, Float>() {\n","          @Override\n","          public void invokeAssertion(SimpleSubjectBuilder<FloatSubject, Float> expect) {\n","            expect.that(value).isNegativeInfinity();\n","          }\n","        };\n","    expectFailure(callback);\n","  }\n","\n","  @Test\n","  public void isNaN() {\n","    assertThat(Float.NaN).isNaN();\n","    assertThatIsNaNFails(1.23f);\n","    assertThatIsNaNFails(Float.POSITIVE_INFINITY);\n","    assertThatIsNaNFails(Float.NEGATIVE_INFINITY);\n","    assertThatIsNaNFails(null);\n","  }\n","\n","  private static void assertThatIsNaNFails(@Nullable Float value) {\n","    ExpectFailure.SimpleSubjectBuilderCallback<FloatSubject, Float> callback =\n","        new ExpectFailure.SimpleSubjectBuilderCallback<FloatSubject, Float>() {\n","          @Override\n","          public void invokeAssertion(SimpleSubjectBuilder<FloatSubject, Float> expect) {\n","            expect.that(value).isNaN();\n","          }\n","        };\n","    expectFailure(callback);\n","  }\n","\n","  @Test\n","  public void isFinite() {\n","    assertThat(1.23f).isFinite();\n","    assertThat(Float.MAX_VALUE).isFinite();\n","    assertThat(-1.0 * Float.MIN_VALUE).isFinite();\n","    assertThatIsFiniteFails(Float.POSITIVE_INFINITY);\n","    assertThatIsFiniteFails(Float.NEGATIVE_INFINITY);\n","    assertThatIsFiniteFails(Float.NaN);\n","    assertThatIsFiniteFails(null);\n","  }\n","\n","  private static void assertThatIsFiniteFails(@Nullable Float value) {\n","    ExpectFailure.SimpleSubjectBuilderCallback<FloatSubject, Float> callback =\n","        new ExpectFailure.SimpleSubjectBuilderCallback<FloatSubject, Float>() {\n","          @Override\n","          public void invokeAssertion(SimpleSubjectBuilder<FloatSubject, Float> expect) {\n","            expect.that(value).isFinite();\n","          }\n","        };\n","    AssertionError failure = expectFailure(callback);\n","    assertThat(failure).factKeys().containsExactly(\"expected to be finite\", \"but was\").inOrder();\n","  }\n","\n","  @Test\n","  public void isNotNaN() {\n","    assertThat(1.23f).isNotNaN();\n","    assertThat(Float.MAX_VALUE).isNotNaN();\n","    assertThat(-1.0 * Float.MIN_VALUE).isNotNaN();\n","    assertThat(Float.POSITIVE_INFINITY).isNotNaN();\n","    assertThat(Float.NEGATIVE_INFINITY).isNotNaN();\n","  }\n","\n","  @Test\n","  public void isNotNaNIsNaN() {\n","    expectFailureWhenTestingThat(Float.NaN).isNotNaN();\n","  }\n","\n","  @Test\n","  public void isNotNaNIsNull() {\n","    expectFailureWhenTestingThat(null).isNotNaN();\n","    assertFailureKeys(\"expected a float other than NaN\", \"but was\");\n","  }\n","\n","  @Test\n","  public void isGreaterThan_int_strictly() {\n","    expectFailureWhenTestingThat(2.0f).isGreaterThan(3);\n","  }\n","\n","  @Test\n","  public void isGreaterThan_int() {\n","    expectFailureWhenTestingThat(2.0f).isGreaterThan(2);\n","    assertThat(2.0f).isGreaterThan(1);\n","    assertThat(0x1.0p30f).isGreaterThan((1 << 30) - 1);\n","  }\n","\n","  @Test\n","  public void isLessThan_int_strictly() {\n","    expectFailureWhenTestingThat(2.0f).isLessThan(1);\n","  }\n","\n","  @Test\n","  public void isLessThan_int() {\n","    expectFailureWhenTestingThat(2.0f).isLessThan(2);\n","    assertThat(2.0f).isLessThan(3);\n","    assertThat(0x1.0p30f).isLessThan((1 << 30) + 1);\n","  }\n","\n","  @Test\n","  public void isAtLeast_int() {\n","    expectFailureWhenTestingThat(2.0f).isAtLeast(3);\n","    assertThat(2.0f).isAtLeast(2);\n","    assertThat(2.0f).isAtLeast(1);\n","  }\n","\n","  @Test\n","  public void isAtLeast_int_withNoExactFloatRepresentation() {\n","    expectFailureWhenTestingThat(0x1.0p30f).isAtLeast((1 << 30) + 1);\n","  }\n","\n","  @Test\n","  public void isAtMost_int() {\n","    expectFailureWhenTestingThat(2.0f).isAtMost(1);\n","    assertThat(2.0f).isAtMost(2);\n","    assertThat(2.0f).isAtMost(3);\n","  }\n","\n","  @Test\n","  public void isAtMost_int_withNoExactFloatRepresentation() {\n","    expectFailureWhenTestingThat(0x1.0p30f).isAtMost((1 << 30) - 1);\n","  }\n","\n","  private FloatSubject expectFailureWhenTestingThat(Float actual) {\n","    return expectFailure.whenTesting().that(actual);\n","  }\n","}\n"],"method_lines_dic":{"FloatSubject.TolerantFloatComparison::::of(float)":[68,68],"FloatSubject.TolerantFloatComparison::::equals(java.lang.Object)":[75,80],"FloatSubject.TolerantFloatComparison::::hashCode()":[86,90],"FloatSubject::::isWithin(float)":[115,132],"FloatSubject::::isNotWithin(float)":[154,171],"FloatSubject::::isEqualTo(java.lang.Object)":[188,191],"FloatSubject::::isNotEqualTo(java.lang.Object)":[202,205],"FloatSubject::::isEquivalentAccordingToCompareTo(java.lang.Float)":[210,214],"FloatSubject::::checkTolerance(float)":[220,226],"FloatSubject::::isZero()":[229,233],"FloatSubject::::isNonZero()":[239,245],"FloatSubject::::isPositiveInfinity()":[248,250],"FloatSubject::::isNegativeInfinity()":[253,255],"FloatSubject::::isNaN()":[258,260],"FloatSubject::::isFinite()":[266,270],"FloatSubject::::isNotNaN()":[276,282],"FloatSubject::::isGreaterThan(int)":[290,292],"FloatSubject::::isLessThan(int)":[300,302],"FloatSubject::::isAtMost(int)":[310,312],"FloatSubject::::isAtLeast(int)":[320,322]},"test_method_lines_dic":{"FloatSubjectTest::::testFloatConstants_matchNextAfter()":[59,68],"FloatSubjectTest::::testJ2clCornerCaseZero()":[70,74],"FloatSubjectTest::::j2clCornerCaseDoubleVsFloat()":[76,83],"FloatSubjectTest::::isWithinOf()":[85,97],"FloatSubjectTest::::assertThatIsWithinFails(float,float,float)":[99,115],"FloatSubjectTest::::isNotWithinOf()":[117,129],"FloatSubjectTest::::assertThatIsNotWithinFails(float,float,float)":[131,142],"FloatSubjectTest::::negativeTolerances()":[144,178],"FloatSubjectTest::::isWithinNegativeToleranceThrowsIAE(float,float,float)":[180,190],"FloatSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(float,float,float)":[192,202],"FloatSubjectTest::::nanTolerances()":[204,218],"FloatSubjectTest::::infiniteTolerances()":[220,234],"FloatSubjectTest::::isWithinOfZero()":[236,247],"FloatSubjectTest::::isNotWithinOfZero()":[249,267],"FloatSubjectTest::::isWithinZeroTolerance()":[269,294],"FloatSubjectTest::::isNotWithinZeroTolerance()":[296,309],"FloatSubjectTest::::isWithinNonFinite()":[311,334],"FloatSubjectTest::::isNotWithinNonFinite()":[336,359],"FloatSubjectTest::::isEqualTo()":[361,370],"FloatSubjectTest::::assertThatIsEqualToFails(float,float)":[372,381],"FloatSubjectTest::::isNotEqualTo()":[383,393],"FloatSubjectTest::::assertThatIsNotEqualToFails(java.lang.Float)":[395,404],"FloatSubjectTest::::isZero()":[406,415],"FloatSubjectTest::::assertThatIsZeroFails(java.lang.Float)":[417,427],"FloatSubjectTest::::isNonZero()":[429,438],"FloatSubjectTest::::assertThatIsNonZeroFails(java.lang.Float,java.lang.String)":[440,450],"FloatSubjectTest::::isPositiveInfinity()":[452,459],"FloatSubjectTest::::assertThatIsPositiveInfinityFails(java.lang.Float)":[461,470],"FloatSubjectTest::::isNegativeInfinity()":[472,479],"FloatSubjectTest::::assertThatIsNegativeInfinityFails(java.lang.Float)":[481,490],"FloatSubjectTest::::isNaN()":[492,499],"FloatSubjectTest::::assertThatIsNaNFails(java.lang.Float)":[501,510],"FloatSubjectTest::::isFinite()":[512,521],"FloatSubjectTest::::assertThatIsFiniteFails(java.lang.Float)":[523,533],"FloatSubjectTest::::isNotNaN()":[535,542],"FloatSubjectTest::::isNotNaNIsNaN()":[544,547],"FloatSubjectTest::::isNotNaNIsNull()":[549,553],"FloatSubjectTest::::isGreaterThan_int_strictly()":[555,558],"FloatSubjectTest::::isGreaterThan_int()":[560,565],"FloatSubjectTest::::isLessThan_int_strictly()":[567,570],"FloatSubjectTest::::isLessThan_int()":[572,577],"FloatSubjectTest::::isAtLeast_int()":[579,584],"FloatSubjectTest::::isAtLeast_int_withNoExactFloatRepresentation()":[586,589],"FloatSubjectTest::::isAtMost_int()":[591,596],"FloatSubjectTest::::isAtMost_int_withNoExactFloatRepresentation()":[598,601],"FloatSubjectTest::::expectFailureWhenTestingThat(java.lang.Float)":[603,605]},"reverse_method_lines_dic":{"68":"FloatSubject.TolerantFloatComparison::::of(float)","75":"FloatSubject.TolerantFloatComparison::::equals(java.lang.Object)","76":"FloatSubject.TolerantFloatComparison::::equals(java.lang.Object)","77":"FloatSubject.TolerantFloatComparison::::equals(java.lang.Object)","78":"FloatSubject.TolerantFloatComparison::::equals(java.lang.Object)","79":"FloatSubject.TolerantFloatComparison::::equals(java.lang.Object)","80":"FloatSubject.TolerantFloatComparison::::equals(java.lang.Object)","86":"FloatSubject.TolerantFloatComparison::::hashCode()","87":"FloatSubject.TolerantFloatComparison::::hashCode()","88":"FloatSubject.TolerantFloatComparison::::hashCode()","89":"FloatSubject.TolerantFloatComparison::::hashCode()","90":"FloatSubject.TolerantFloatComparison::::hashCode()","115":"FloatSubject::::isWithin(float)","116":"FloatSubject::::isWithin(float)","117":"FloatSubject::::isWithin(float)","118":"FloatSubject::::isWithin(float)","119":"FloatSubject::::isWithin(float)","120":"FloatSubject::::isWithin(float)","121":"FloatSubject::::isWithin(float)","122":"FloatSubject::::isWithin(float)","123":"FloatSubject::::isWithin(float)","124":"FloatSubject::::isWithin(float)","125":"FloatSubject::::isWithin(float)","126":"FloatSubject::::isWithin(float)","127":"FloatSubject::::isWithin(float)","128":"FloatSubject::::isWithin(float)","129":"FloatSubject::::isWithin(float)","130":"FloatSubject::::isWithin(float)","131":"FloatSubject::::isWithin(float)","132":"FloatSubject::::isWithin(float)","154":"FloatSubject::::isNotWithin(float)","155":"FloatSubject::::isNotWithin(float)","156":"FloatSubject::::isNotWithin(float)","157":"FloatSubject::::isNotWithin(float)","158":"FloatSubject::::isNotWithin(float)","159":"FloatSubject::::isNotWithin(float)","160":"FloatSubject::::isNotWithin(float)","161":"FloatSubject::::isNotWithin(float)","162":"FloatSubject::::isNotWithin(float)","163":"FloatSubject::::isNotWithin(float)","164":"FloatSubject::::isNotWithin(float)","165":"FloatSubject::::isNotWithin(float)","166":"FloatSubject::::isNotWithin(float)","167":"FloatSubject::::isNotWithin(float)","168":"FloatSubject::::isNotWithin(float)","169":"FloatSubject::::isNotWithin(float)","170":"FloatSubject::::isNotWithin(float)","171":"FloatSubject::::isNotWithin(float)","188":"FloatSubject::::isEqualTo(java.lang.Object)","189":"FloatSubject::::isEqualTo(java.lang.Object)","190":"FloatSubject::::isEqualTo(java.lang.Object)","191":"FloatSubject::::isEqualTo(java.lang.Object)","202":"FloatSubject::::isNotEqualTo(java.lang.Object)","203":"FloatSubject::::isNotEqualTo(java.lang.Object)","204":"FloatSubject::::isNotEqualTo(java.lang.Object)","205":"FloatSubject::::isNotEqualTo(java.lang.Object)","210":"FloatSubject::::isEquivalentAccordingToCompareTo(java.lang.Float)","211":"FloatSubject::::isEquivalentAccordingToCompareTo(java.lang.Float)","212":"FloatSubject::::isEquivalentAccordingToCompareTo(java.lang.Float)","213":"FloatSubject::::isEquivalentAccordingToCompareTo(java.lang.Float)","214":"FloatSubject::::isEquivalentAccordingToCompareTo(java.lang.Float)","220":"FloatSubject::::checkTolerance(float)","221":"FloatSubject::::checkTolerance(float)","222":"FloatSubject::::checkTolerance(float)","223":"FloatSubject::::checkTolerance(float)","224":"FloatSubject::::checkTolerance(float)","225":"FloatSubject::::checkTolerance(float)","226":"FloatSubject::::checkTolerance(float)","229":"FloatSubject::::isZero()","230":"FloatSubject::::isZero()","231":"FloatSubject::::isZero()","232":"FloatSubject::::isZero()","233":"FloatSubject::::isZero()","239":"FloatSubject::::isNonZero()","240":"FloatSubject::::isNonZero()","241":"FloatSubject::::isNonZero()","242":"FloatSubject::::isNonZero()","243":"FloatSubject::::isNonZero()","244":"FloatSubject::::isNonZero()","245":"FloatSubject::::isNonZero()","248":"FloatSubject::::isPositiveInfinity()","249":"FloatSubject::::isPositiveInfinity()","250":"FloatSubject::::isPositiveInfinity()","253":"FloatSubject::::isNegativeInfinity()","254":"FloatSubject::::isNegativeInfinity()","255":"FloatSubject::::isNegativeInfinity()","258":"FloatSubject::::isNaN()","259":"FloatSubject::::isNaN()","260":"FloatSubject::::isNaN()","266":"FloatSubject::::isFinite()","267":"FloatSubject::::isFinite()","268":"FloatSubject::::isFinite()","269":"FloatSubject::::isFinite()","270":"FloatSubject::::isFinite()","276":"FloatSubject::::isNotNaN()","277":"FloatSubject::::isNotNaN()","278":"FloatSubject::::isNotNaN()","279":"FloatSubject::::isNotNaN()","280":"FloatSubject::::isNotNaN()","281":"FloatSubject::::isNotNaN()","282":"FloatSubject::::isNotNaN()","290":"FloatSubject::::isGreaterThan(int)","291":"FloatSubject::::isGreaterThan(int)","292":"FloatSubject::::isGreaterThan(int)","300":"FloatSubject::::isLessThan(int)","301":"FloatSubject::::isLessThan(int)","302":"FloatSubject::::isLessThan(int)","310":"FloatSubject::::isAtMost(int)","311":"FloatSubject::::isAtMost(int)","312":"FloatSubject::::isAtMost(int)","320":"FloatSubject::::isAtLeast(int)","321":"FloatSubject::::isAtLeast(int)","322":"FloatSubject::::isAtLeast(int)"},"test_reverse_method_lines_dic":{"59":"FloatSubjectTest::::testFloatConstants_matchNextAfter()","60":"FloatSubjectTest::::testFloatConstants_matchNextAfter()","61":"FloatSubjectTest::::testFloatConstants_matchNextAfter()","62":"FloatSubjectTest::::testFloatConstants_matchNextAfter()","63":"FloatSubjectTest::::testFloatConstants_matchNextAfter()","64":"FloatSubjectTest::::testFloatConstants_matchNextAfter()","65":"FloatSubjectTest::::testFloatConstants_matchNextAfter()","66":"FloatSubjectTest::::testFloatConstants_matchNextAfter()","67":"FloatSubjectTest::::testFloatConstants_matchNextAfter()","68":"FloatSubjectTest::::testFloatConstants_matchNextAfter()","70":"FloatSubjectTest::::testJ2clCornerCaseZero()","71":"FloatSubjectTest::::testJ2clCornerCaseZero()","72":"FloatSubjectTest::::testJ2clCornerCaseZero()","73":"FloatSubjectTest::::testJ2clCornerCaseZero()","74":"FloatSubjectTest::::testJ2clCornerCaseZero()","76":"FloatSubjectTest::::j2clCornerCaseDoubleVsFloat()","77":"FloatSubjectTest::::j2clCornerCaseDoubleVsFloat()","78":"FloatSubjectTest::::j2clCornerCaseDoubleVsFloat()","79":"FloatSubjectTest::::j2clCornerCaseDoubleVsFloat()","80":"FloatSubjectTest::::j2clCornerCaseDoubleVsFloat()","81":"FloatSubjectTest::::j2clCornerCaseDoubleVsFloat()","82":"FloatSubjectTest::::j2clCornerCaseDoubleVsFloat()","83":"FloatSubjectTest::::j2clCornerCaseDoubleVsFloat()","85":"FloatSubjectTest::::isWithinOf()","86":"FloatSubjectTest::::isWithinOf()","87":"FloatSubjectTest::::isWithinOf()","88":"FloatSubjectTest::::isWithinOf()","89":"FloatSubjectTest::::isWithinOf()","90":"FloatSubjectTest::::isWithinOf()","91":"FloatSubjectTest::::isWithinOf()","92":"FloatSubjectTest::::isWithinOf()","93":"FloatSubjectTest::::isWithinOf()","94":"FloatSubjectTest::::isWithinOf()","95":"FloatSubjectTest::::isWithinOf()","96":"FloatSubjectTest::::isWithinOf()","97":"FloatSubjectTest::::isWithinOf()","99":"FloatSubjectTest::::assertThatIsWithinFails(float,float,float)","100":"FloatSubjectTest::::assertThatIsWithinFails(float,float,float)","101":"FloatSubjectTest::::assertThatIsWithinFails(float,float,float)","102":"FloatSubjectTest::::assertThatIsWithinFails(float,float,float)","103":"FloatSubjectTest::::assertThatIsWithinFails(float,float,float)","104":"FloatSubjectTest::::assertThatIsWithinFails(float,float,float)","105":"FloatSubjectTest::::assertThatIsWithinFails(float,float,float)","106":"FloatSubjectTest::::assertThatIsWithinFails(float,float,float)","107":"FloatSubjectTest::::assertThatIsWithinFails(float,float,float)","108":"FloatSubjectTest::::assertThatIsWithinFails(float,float,float)","109":"FloatSubjectTest::::assertThatIsWithinFails(float,float,float)","110":"FloatSubjectTest::::assertThatIsWithinFails(float,float,float)","111":"FloatSubjectTest::::assertThatIsWithinFails(float,float,float)","112":"FloatSubjectTest::::assertThatIsWithinFails(float,float,float)","113":"FloatSubjectTest::::assertThatIsWithinFails(float,float,float)","114":"FloatSubjectTest::::assertThatIsWithinFails(float,float,float)","115":"FloatSubjectTest::::assertThatIsWithinFails(float,float,float)","117":"FloatSubjectTest::::isNotWithinOf()","118":"FloatSubjectTest::::isNotWithinOf()","119":"FloatSubjectTest::::isNotWithinOf()","120":"FloatSubjectTest::::isNotWithinOf()","121":"FloatSubjectTest::::isNotWithinOf()","122":"FloatSubjectTest::::isNotWithinOf()","123":"FloatSubjectTest::::isNotWithinOf()","124":"FloatSubjectTest::::isNotWithinOf()","125":"FloatSubjectTest::::isNotWithinOf()","126":"FloatSubjectTest::::isNotWithinOf()","127":"FloatSubjectTest::::isNotWithinOf()","128":"FloatSubjectTest::::isNotWithinOf()","129":"FloatSubjectTest::::isNotWithinOf()","131":"FloatSubjectTest::::assertThatIsNotWithinFails(float,float,float)","132":"FloatSubjectTest::::assertThatIsNotWithinFails(float,float,float)","133":"FloatSubjectTest::::assertThatIsNotWithinFails(float,float,float)","134":"FloatSubjectTest::::assertThatIsNotWithinFails(float,float,float)","135":"FloatSubjectTest::::assertThatIsNotWithinFails(float,float,float)","136":"FloatSubjectTest::::assertThatIsNotWithinFails(float,float,float)","137":"FloatSubjectTest::::assertThatIsNotWithinFails(float,float,float)","138":"FloatSubjectTest::::assertThatIsNotWithinFails(float,float,float)","139":"FloatSubjectTest::::assertThatIsNotWithinFails(float,float,float)","140":"FloatSubjectTest::::assertThatIsNotWithinFails(float,float,float)","141":"FloatSubjectTest::::assertThatIsNotWithinFails(float,float,float)","142":"FloatSubjectTest::::assertThatIsNotWithinFails(float,float,float)","144":"FloatSubjectTest::::negativeTolerances()","145":"FloatSubjectTest::::negativeTolerances()","146":"FloatSubjectTest::::negativeTolerances()","147":"FloatSubjectTest::::negativeTolerances()","148":"FloatSubjectTest::::negativeTolerances()","149":"FloatSubjectTest::::negativeTolerances()","150":"FloatSubjectTest::::negativeTolerances()","151":"FloatSubjectTest::::negativeTolerances()","152":"FloatSubjectTest::::negativeTolerances()","153":"FloatSubjectTest::::negativeTolerances()","154":"FloatSubjectTest::::negativeTolerances()","155":"FloatSubjectTest::::negativeTolerances()","156":"FloatSubjectTest::::negativeTolerances()","157":"FloatSubjectTest::::negativeTolerances()","158":"FloatSubjectTest::::negativeTolerances()","159":"FloatSubjectTest::::negativeTolerances()","160":"FloatSubjectTest::::negativeTolerances()","161":"FloatSubjectTest::::negativeTolerances()","162":"FloatSubjectTest::::negativeTolerances()","163":"FloatSubjectTest::::negativeTolerances()","164":"FloatSubjectTest::::negativeTolerances()","165":"FloatSubjectTest::::negativeTolerances()","166":"FloatSubjectTest::::negativeTolerances()","167":"FloatSubjectTest::::negativeTolerances()","168":"FloatSubjectTest::::negativeTolerances()","169":"FloatSubjectTest::::negativeTolerances()","170":"FloatSubjectTest::::negativeTolerances()","171":"FloatSubjectTest::::negativeTolerances()","172":"FloatSubjectTest::::negativeTolerances()","173":"FloatSubjectTest::::negativeTolerances()","174":"FloatSubjectTest::::negativeTolerances()","175":"FloatSubjectTest::::negativeTolerances()","176":"FloatSubjectTest::::negativeTolerances()","177":"FloatSubjectTest::::negativeTolerances()","178":"FloatSubjectTest::::negativeTolerances()","180":"FloatSubjectTest::::isWithinNegativeToleranceThrowsIAE(float,float,float)","181":"FloatSubjectTest::::isWithinNegativeToleranceThrowsIAE(float,float,float)","182":"FloatSubjectTest::::isWithinNegativeToleranceThrowsIAE(float,float,float)","183":"FloatSubjectTest::::isWithinNegativeToleranceThrowsIAE(float,float,float)","184":"FloatSubjectTest::::isWithinNegativeToleranceThrowsIAE(float,float,float)","185":"FloatSubjectTest::::isWithinNegativeToleranceThrowsIAE(float,float,float)","186":"FloatSubjectTest::::isWithinNegativeToleranceThrowsIAE(float,float,float)","187":"FloatSubjectTest::::isWithinNegativeToleranceThrowsIAE(float,float,float)","188":"FloatSubjectTest::::isWithinNegativeToleranceThrowsIAE(float,float,float)","189":"FloatSubjectTest::::isWithinNegativeToleranceThrowsIAE(float,float,float)","190":"FloatSubjectTest::::isWithinNegativeToleranceThrowsIAE(float,float,float)","192":"FloatSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(float,float,float)","193":"FloatSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(float,float,float)","194":"FloatSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(float,float,float)","195":"FloatSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(float,float,float)","196":"FloatSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(float,float,float)","197":"FloatSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(float,float,float)","198":"FloatSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(float,float,float)","199":"FloatSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(float,float,float)","200":"FloatSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(float,float,float)","201":"FloatSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(float,float,float)","202":"FloatSubjectTest::::isNotWithinNegativeToleranceThrowsIAE(float,float,float)","204":"FloatSubjectTest::::nanTolerances()","205":"FloatSubjectTest::::nanTolerances()","206":"FloatSubjectTest::::nanTolerances()","207":"FloatSubjectTest::::nanTolerances()","208":"FloatSubjectTest::::nanTolerances()","209":"FloatSubjectTest::::nanTolerances()","210":"FloatSubjectTest::::nanTolerances()","211":"FloatSubjectTest::::nanTolerances()","212":"FloatSubjectTest::::nanTolerances()","213":"FloatSubjectTest::::nanTolerances()","214":"FloatSubjectTest::::nanTolerances()","215":"FloatSubjectTest::::nanTolerances()","216":"FloatSubjectTest::::nanTolerances()","217":"FloatSubjectTest::::nanTolerances()","218":"FloatSubjectTest::::nanTolerances()","220":"FloatSubjectTest::::infiniteTolerances()","221":"FloatSubjectTest::::infiniteTolerances()","222":"FloatSubjectTest::::infiniteTolerances()","223":"FloatSubjectTest::::infiniteTolerances()","224":"FloatSubjectTest::::infiniteTolerances()","225":"FloatSubjectTest::::infiniteTolerances()","226":"FloatSubjectTest::::infiniteTolerances()","227":"FloatSubjectTest::::infiniteTolerances()","228":"FloatSubjectTest::::infiniteTolerances()","229":"FloatSubjectTest::::infiniteTolerances()","230":"FloatSubjectTest::::infiniteTolerances()","231":"FloatSubjectTest::::infiniteTolerances()","232":"FloatSubjectTest::::infiniteTolerances()","233":"FloatSubjectTest::::infiniteTolerances()","234":"FloatSubjectTest::::infiniteTolerances()","236":"FloatSubjectTest::::isWithinOfZero()","237":"FloatSubjectTest::::isWithinOfZero()","238":"FloatSubjectTest::::isWithinOfZero()","239":"FloatSubjectTest::::isWithinOfZero()","240":"FloatSubjectTest::::isWithinOfZero()","241":"FloatSubjectTest::::isWithinOfZero()","242":"FloatSubjectTest::::isWithinOfZero()","243":"FloatSubjectTest::::isWithinOfZero()","244":"FloatSubjectTest::::isWithinOfZero()","245":"FloatSubjectTest::::isWithinOfZero()","246":"FloatSubjectTest::::isWithinOfZero()","247":"FloatSubjectTest::::isWithinOfZero()","249":"FloatSubjectTest::::isNotWithinOfZero()","250":"FloatSubjectTest::::isNotWithinOfZero()","251":"FloatSubjectTest::::isNotWithinOfZero()","252":"FloatSubjectTest::::isNotWithinOfZero()","253":"FloatSubjectTest::::isNotWithinOfZero()","254":"FloatSubjectTest::::isNotWithinOfZero()","255":"FloatSubjectTest::::isNotWithinOfZero()","256":"FloatSubjectTest::::isNotWithinOfZero()","257":"FloatSubjectTest::::isNotWithinOfZero()","258":"FloatSubjectTest::::isNotWithinOfZero()","259":"FloatSubjectTest::::isNotWithinOfZero()","260":"FloatSubjectTest::::isNotWithinOfZero()","261":"FloatSubjectTest::::isNotWithinOfZero()","262":"FloatSubjectTest::::isNotWithinOfZero()","263":"FloatSubjectTest::::isNotWithinOfZero()","264":"FloatSubjectTest::::isNotWithinOfZero()","265":"FloatSubjectTest::::isNotWithinOfZero()","266":"FloatSubjectTest::::isNotWithinOfZero()","267":"FloatSubjectTest::::isNotWithinOfZero()","269":"FloatSubjectTest::::isWithinZeroTolerance()","270":"FloatSubjectTest::::isWithinZeroTolerance()","271":"FloatSubjectTest::::isWithinZeroTolerance()","272":"FloatSubjectTest::::isWithinZeroTolerance()","273":"FloatSubjectTest::::isWithinZeroTolerance()","274":"FloatSubjectTest::::isWithinZeroTolerance()","275":"FloatSubjectTest::::isWithinZeroTolerance()","276":"FloatSubjectTest::::isWithinZeroTolerance()","277":"FloatSubjectTest::::isWithinZeroTolerance()","278":"FloatSubjectTest::::isWithinZeroTolerance()","279":"FloatSubjectTest::::isWithinZeroTolerance()","280":"FloatSubjectTest::::isWithinZeroTolerance()","281":"FloatSubjectTest::::isWithinZeroTolerance()","282":"FloatSubjectTest::::isWithinZeroTolerance()","283":"FloatSubjectTest::::isWithinZeroTolerance()","284":"FloatSubjectTest::::isWithinZeroTolerance()","285":"FloatSubjectTest::::isWithinZeroTolerance()","286":"FloatSubjectTest::::isWithinZeroTolerance()","287":"FloatSubjectTest::::isWithinZeroTolerance()","288":"FloatSubjectTest::::isWithinZeroTolerance()","289":"FloatSubjectTest::::isWithinZeroTolerance()","290":"FloatSubjectTest::::isWithinZeroTolerance()","291":"FloatSubjectTest::::isWithinZeroTolerance()","292":"FloatSubjectTest::::isWithinZeroTolerance()","293":"FloatSubjectTest::::isWithinZeroTolerance()","294":"FloatSubjectTest::::isWithinZeroTolerance()","296":"FloatSubjectTest::::isNotWithinZeroTolerance()","297":"FloatSubjectTest::::isNotWithinZeroTolerance()","298":"FloatSubjectTest::::isNotWithinZeroTolerance()","299":"FloatSubjectTest::::isNotWithinZeroTolerance()","300":"FloatSubjectTest::::isNotWithinZeroTolerance()","301":"FloatSubjectTest::::isNotWithinZeroTolerance()","302":"FloatSubjectTest::::isNotWithinZeroTolerance()","303":"FloatSubjectTest::::isNotWithinZeroTolerance()","304":"FloatSubjectTest::::isNotWithinZeroTolerance()","305":"FloatSubjectTest::::isNotWithinZeroTolerance()","306":"FloatSubjectTest::::isNotWithinZeroTolerance()","307":"FloatSubjectTest::::isNotWithinZeroTolerance()","308":"FloatSubjectTest::::isNotWithinZeroTolerance()","309":"FloatSubjectTest::::isNotWithinZeroTolerance()","311":"FloatSubjectTest::::isWithinNonFinite()","312":"FloatSubjectTest::::isWithinNonFinite()","313":"FloatSubjectTest::::isWithinNonFinite()","314":"FloatSubjectTest::::isWithinNonFinite()","315":"FloatSubjectTest::::isWithinNonFinite()","316":"FloatSubjectTest::::isWithinNonFinite()","317":"FloatSubjectTest::::isWithinNonFinite()","318":"FloatSubjectTest::::isWithinNonFinite()","319":"FloatSubjectTest::::isWithinNonFinite()","320":"FloatSubjectTest::::isWithinNonFinite()","321":"FloatSubjectTest::::isWithinNonFinite()","322":"FloatSubjectTest::::isWithinNonFinite()","323":"FloatSubjectTest::::isWithinNonFinite()","324":"FloatSubjectTest::::isWithinNonFinite()","325":"FloatSubjectTest::::isWithinNonFinite()","326":"FloatSubjectTest::::isWithinNonFinite()","327":"FloatSubjectTest::::isWithinNonFinite()","328":"FloatSubjectTest::::isWithinNonFinite()","329":"FloatSubjectTest::::isWithinNonFinite()","330":"FloatSubjectTest::::isWithinNonFinite()","331":"FloatSubjectTest::::isWithinNonFinite()","332":"FloatSubjectTest::::isWithinNonFinite()","333":"FloatSubjectTest::::isWithinNonFinite()","334":"FloatSubjectTest::::isWithinNonFinite()","336":"FloatSubjectTest::::isNotWithinNonFinite()","337":"FloatSubjectTest::::isNotWithinNonFinite()","338":"FloatSubjectTest::::isNotWithinNonFinite()","339":"FloatSubjectTest::::isNotWithinNonFinite()","340":"FloatSubjectTest::::isNotWithinNonFinite()","341":"FloatSubjectTest::::isNotWithinNonFinite()","342":"FloatSubjectTest::::isNotWithinNonFinite()","343":"FloatSubjectTest::::isNotWithinNonFinite()","344":"FloatSubjectTest::::isNotWithinNonFinite()","345":"FloatSubjectTest::::isNotWithinNonFinite()","346":"FloatSubjectTest::::isNotWithinNonFinite()","347":"FloatSubjectTest::::isNotWithinNonFinite()","348":"FloatSubjectTest::::isNotWithinNonFinite()","349":"FloatSubjectTest::::isNotWithinNonFinite()","350":"FloatSubjectTest::::isNotWithinNonFinite()","351":"FloatSubjectTest::::isNotWithinNonFinite()","352":"FloatSubjectTest::::isNotWithinNonFinite()","353":"FloatSubjectTest::::isNotWithinNonFinite()","354":"FloatSubjectTest::::isNotWithinNonFinite()","355":"FloatSubjectTest::::isNotWithinNonFinite()","356":"FloatSubjectTest::::isNotWithinNonFinite()","357":"FloatSubjectTest::::isNotWithinNonFinite()","358":"FloatSubjectTest::::isNotWithinNonFinite()","359":"FloatSubjectTest::::isNotWithinNonFinite()","361":"FloatSubjectTest::::isEqualTo()","362":"FloatSubjectTest::::isEqualTo()","363":"FloatSubjectTest::::isEqualTo()","364":"FloatSubjectTest::::isEqualTo()","365":"FloatSubjectTest::::isEqualTo()","366":"FloatSubjectTest::::isEqualTo()","367":"FloatSubjectTest::::isEqualTo()","368":"FloatSubjectTest::::isEqualTo()","369":"FloatSubjectTest::::isEqualTo()","370":"FloatSubjectTest::::isEqualTo()","372":"FloatSubjectTest::::assertThatIsEqualToFails(float,float)","373":"FloatSubjectTest::::assertThatIsEqualToFails(float,float)","374":"FloatSubjectTest::::assertThatIsEqualToFails(float,float)","375":"FloatSubjectTest::::assertThatIsEqualToFails(float,float)","376":"FloatSubjectTest::::assertThatIsEqualToFails(float,float)","377":"FloatSubjectTest::::assertThatIsEqualToFails(float,float)","378":"FloatSubjectTest::::assertThatIsEqualToFails(float,float)","379":"FloatSubjectTest::::assertThatIsEqualToFails(float,float)","380":"FloatSubjectTest::::assertThatIsEqualToFails(float,float)","381":"FloatSubjectTest::::assertThatIsEqualToFails(float,float)","383":"FloatSubjectTest::::isNotEqualTo()","384":"FloatSubjectTest::::isNotEqualTo()","385":"FloatSubjectTest::::isNotEqualTo()","386":"FloatSubjectTest::::isNotEqualTo()","387":"FloatSubjectTest::::isNotEqualTo()","388":"FloatSubjectTest::::isNotEqualTo()","389":"FloatSubjectTest::::isNotEqualTo()","390":"FloatSubjectTest::::isNotEqualTo()","391":"FloatSubjectTest::::isNotEqualTo()","392":"FloatSubjectTest::::isNotEqualTo()","393":"FloatSubjectTest::::isNotEqualTo()","395":"FloatSubjectTest::::assertThatIsNotEqualToFails(java.lang.Float)","396":"FloatSubjectTest::::assertThatIsNotEqualToFails(java.lang.Float)","397":"FloatSubjectTest::::assertThatIsNotEqualToFails(java.lang.Float)","398":"FloatSubjectTest::::assertThatIsNotEqualToFails(java.lang.Float)","399":"FloatSubjectTest::::assertThatIsNotEqualToFails(java.lang.Float)","400":"FloatSubjectTest::::assertThatIsNotEqualToFails(java.lang.Float)","401":"FloatSubjectTest::::assertThatIsNotEqualToFails(java.lang.Float)","402":"FloatSubjectTest::::assertThatIsNotEqualToFails(java.lang.Float)","403":"FloatSubjectTest::::assertThatIsNotEqualToFails(java.lang.Float)","404":"FloatSubjectTest::::assertThatIsNotEqualToFails(java.lang.Float)","406":"FloatSubjectTest::::isZero()","407":"FloatSubjectTest::::isZero()","408":"FloatSubjectTest::::isZero()","409":"FloatSubjectTest::::isZero()","410":"FloatSubjectTest::::isZero()","411":"FloatSubjectTest::::isZero()","412":"FloatSubjectTest::::isZero()","413":"FloatSubjectTest::::isZero()","414":"FloatSubjectTest::::isZero()","415":"FloatSubjectTest::::isZero()","417":"FloatSubjectTest::::assertThatIsZeroFails(java.lang.Float)","418":"FloatSubjectTest::::assertThatIsZeroFails(java.lang.Float)","419":"FloatSubjectTest::::assertThatIsZeroFails(java.lang.Float)","420":"FloatSubjectTest::::assertThatIsZeroFails(java.lang.Float)","421":"FloatSubjectTest::::assertThatIsZeroFails(java.lang.Float)","422":"FloatSubjectTest::::assertThatIsZeroFails(java.lang.Float)","423":"FloatSubjectTest::::assertThatIsZeroFails(java.lang.Float)","424":"FloatSubjectTest::::assertThatIsZeroFails(java.lang.Float)","425":"FloatSubjectTest::::assertThatIsZeroFails(java.lang.Float)","426":"FloatSubjectTest::::assertThatIsZeroFails(java.lang.Float)","427":"FloatSubjectTest::::assertThatIsZeroFails(java.lang.Float)","429":"FloatSubjectTest::::isNonZero()","430":"FloatSubjectTest::::isNonZero()","431":"FloatSubjectTest::::isNonZero()","432":"FloatSubjectTest::::isNonZero()","433":"FloatSubjectTest::::isNonZero()","434":"FloatSubjectTest::::isNonZero()","435":"FloatSubjectTest::::isNonZero()","436":"FloatSubjectTest::::isNonZero()","437":"FloatSubjectTest::::isNonZero()","438":"FloatSubjectTest::::isNonZero()","440":"FloatSubjectTest::::assertThatIsNonZeroFails(java.lang.Float,java.lang.String)","441":"FloatSubjectTest::::assertThatIsNonZeroFails(java.lang.Float,java.lang.String)","442":"FloatSubjectTest::::assertThatIsNonZeroFails(java.lang.Float,java.lang.String)","443":"FloatSubjectTest::::assertThatIsNonZeroFails(java.lang.Float,java.lang.String)","444":"FloatSubjectTest::::assertThatIsNonZeroFails(java.lang.Float,java.lang.String)","445":"FloatSubjectTest::::assertThatIsNonZeroFails(java.lang.Float,java.lang.String)","446":"FloatSubjectTest::::assertThatIsNonZeroFails(java.lang.Float,java.lang.String)","447":"FloatSubjectTest::::assertThatIsNonZeroFails(java.lang.Float,java.lang.String)","448":"FloatSubjectTest::::assertThatIsNonZeroFails(java.lang.Float,java.lang.String)","449":"FloatSubjectTest::::assertThatIsNonZeroFails(java.lang.Float,java.lang.String)","450":"FloatSubjectTest::::assertThatIsNonZeroFails(java.lang.Float,java.lang.String)","452":"FloatSubjectTest::::isPositiveInfinity()","453":"FloatSubjectTest::::isPositiveInfinity()","454":"FloatSubjectTest::::isPositiveInfinity()","455":"FloatSubjectTest::::isPositiveInfinity()","456":"FloatSubjectTest::::isPositiveInfinity()","457":"FloatSubjectTest::::isPositiveInfinity()","458":"FloatSubjectTest::::isPositiveInfinity()","459":"FloatSubjectTest::::isPositiveInfinity()","461":"FloatSubjectTest::::assertThatIsPositiveInfinityFails(java.lang.Float)","462":"FloatSubjectTest::::assertThatIsPositiveInfinityFails(java.lang.Float)","463":"FloatSubjectTest::::assertThatIsPositiveInfinityFails(java.lang.Float)","464":"FloatSubjectTest::::assertThatIsPositiveInfinityFails(java.lang.Float)","465":"FloatSubjectTest::::assertThatIsPositiveInfinityFails(java.lang.Float)","466":"FloatSubjectTest::::assertThatIsPositiveInfinityFails(java.lang.Float)","467":"FloatSubjectTest::::assertThatIsPositiveInfinityFails(java.lang.Float)","468":"FloatSubjectTest::::assertThatIsPositiveInfinityFails(java.lang.Float)","469":"FloatSubjectTest::::assertThatIsPositiveInfinityFails(java.lang.Float)","470":"FloatSubjectTest::::assertThatIsPositiveInfinityFails(java.lang.Float)","472":"FloatSubjectTest::::isNegativeInfinity()","473":"FloatSubjectTest::::isNegativeInfinity()","474":"FloatSubjectTest::::isNegativeInfinity()","475":"FloatSubjectTest::::isNegativeInfinity()","476":"FloatSubjectTest::::isNegativeInfinity()","477":"FloatSubjectTest::::isNegativeInfinity()","478":"FloatSubjectTest::::isNegativeInfinity()","479":"FloatSubjectTest::::isNegativeInfinity()","481":"FloatSubjectTest::::assertThatIsNegativeInfinityFails(java.lang.Float)","482":"FloatSubjectTest::::assertThatIsNegativeInfinityFails(java.lang.Float)","483":"FloatSubjectTest::::assertThatIsNegativeInfinityFails(java.lang.Float)","484":"FloatSubjectTest::::assertThatIsNegativeInfinityFails(java.lang.Float)","485":"FloatSubjectTest::::assertThatIsNegativeInfinityFails(java.lang.Float)","486":"FloatSubjectTest::::assertThatIsNegativeInfinityFails(java.lang.Float)","487":"FloatSubjectTest::::assertThatIsNegativeInfinityFails(java.lang.Float)","488":"FloatSubjectTest::::assertThatIsNegativeInfinityFails(java.lang.Float)","489":"FloatSubjectTest::::assertThatIsNegativeInfinityFails(java.lang.Float)","490":"FloatSubjectTest::::assertThatIsNegativeInfinityFails(java.lang.Float)","492":"FloatSubjectTest::::isNaN()","493":"FloatSubjectTest::::isNaN()","494":"FloatSubjectTest::::isNaN()","495":"FloatSubjectTest::::isNaN()","496":"FloatSubjectTest::::isNaN()","497":"FloatSubjectTest::::isNaN()","498":"FloatSubjectTest::::isNaN()","499":"FloatSubjectTest::::isNaN()","501":"FloatSubjectTest::::assertThatIsNaNFails(java.lang.Float)","502":"FloatSubjectTest::::assertThatIsNaNFails(java.lang.Float)","503":"FloatSubjectTest::::assertThatIsNaNFails(java.lang.Float)","504":"FloatSubjectTest::::assertThatIsNaNFails(java.lang.Float)","505":"FloatSubjectTest::::assertThatIsNaNFails(java.lang.Float)","506":"FloatSubjectTest::::assertThatIsNaNFails(java.lang.Float)","507":"FloatSubjectTest::::assertThatIsNaNFails(java.lang.Float)","508":"FloatSubjectTest::::assertThatIsNaNFails(java.lang.Float)","509":"FloatSubjectTest::::assertThatIsNaNFails(java.lang.Float)","510":"FloatSubjectTest::::assertThatIsNaNFails(java.lang.Float)","512":"FloatSubjectTest::::isFinite()","513":"FloatSubjectTest::::isFinite()","514":"FloatSubjectTest::::isFinite()","515":"FloatSubjectTest::::isFinite()","516":"FloatSubjectTest::::isFinite()","517":"FloatSubjectTest::::isFinite()","518":"FloatSubjectTest::::isFinite()","519":"FloatSubjectTest::::isFinite()","520":"FloatSubjectTest::::isFinite()","521":"FloatSubjectTest::::isFinite()","523":"FloatSubjectTest::::assertThatIsFiniteFails(java.lang.Float)","524":"FloatSubjectTest::::assertThatIsFiniteFails(java.lang.Float)","525":"FloatSubjectTest::::assertThatIsFiniteFails(java.lang.Float)","526":"FloatSubjectTest::::assertThatIsFiniteFails(java.lang.Float)","527":"FloatSubjectTest::::assertThatIsFiniteFails(java.lang.Float)","528":"FloatSubjectTest::::assertThatIsFiniteFails(java.lang.Float)","529":"FloatSubjectTest::::assertThatIsFiniteFails(java.lang.Float)","530":"FloatSubjectTest::::assertThatIsFiniteFails(java.lang.Float)","531":"FloatSubjectTest::::assertThatIsFiniteFails(java.lang.Float)","532":"FloatSubjectTest::::assertThatIsFiniteFails(java.lang.Float)","533":"FloatSubjectTest::::assertThatIsFiniteFails(java.lang.Float)","535":"FloatSubjectTest::::isNotNaN()","536":"FloatSubjectTest::::isNotNaN()","537":"FloatSubjectTest::::isNotNaN()","538":"FloatSubjectTest::::isNotNaN()","539":"FloatSubjectTest::::isNotNaN()","540":"FloatSubjectTest::::isNotNaN()","541":"FloatSubjectTest::::isNotNaN()","542":"FloatSubjectTest::::isNotNaN()","544":"FloatSubjectTest::::isNotNaNIsNaN()","545":"FloatSubjectTest::::isNotNaNIsNaN()","546":"FloatSubjectTest::::isNotNaNIsNaN()","547":"FloatSubjectTest::::isNotNaNIsNaN()","549":"FloatSubjectTest::::isNotNaNIsNull()","550":"FloatSubjectTest::::isNotNaNIsNull()","551":"FloatSubjectTest::::isNotNaNIsNull()","552":"FloatSubjectTest::::isNotNaNIsNull()","553":"FloatSubjectTest::::isNotNaNIsNull()","555":"FloatSubjectTest::::isGreaterThan_int_strictly()","556":"FloatSubjectTest::::isGreaterThan_int_strictly()","557":"FloatSubjectTest::::isGreaterThan_int_strictly()","558":"FloatSubjectTest::::isGreaterThan_int_strictly()","560":"FloatSubjectTest::::isGreaterThan_int()","561":"FloatSubjectTest::::isGreaterThan_int()","562":"FloatSubjectTest::::isGreaterThan_int()","563":"FloatSubjectTest::::isGreaterThan_int()","564":"FloatSubjectTest::::isGreaterThan_int()","565":"FloatSubjectTest::::isGreaterThan_int()","567":"FloatSubjectTest::::isLessThan_int_strictly()","568":"FloatSubjectTest::::isLessThan_int_strictly()","569":"FloatSubjectTest::::isLessThan_int_strictly()","570":"FloatSubjectTest::::isLessThan_int_strictly()","572":"FloatSubjectTest::::isLessThan_int()","573":"FloatSubjectTest::::isLessThan_int()","574":"FloatSubjectTest::::isLessThan_int()","575":"FloatSubjectTest::::isLessThan_int()","576":"FloatSubjectTest::::isLessThan_int()","577":"FloatSubjectTest::::isLessThan_int()","579":"FloatSubjectTest::::isAtLeast_int()","580":"FloatSubjectTest::::isAtLeast_int()","581":"FloatSubjectTest::::isAtLeast_int()","582":"FloatSubjectTest::::isAtLeast_int()","583":"FloatSubjectTest::::isAtLeast_int()","584":"FloatSubjectTest::::isAtLeast_int()","586":"FloatSubjectTest::::isAtLeast_int_withNoExactFloatRepresentation()","587":"FloatSubjectTest::::isAtLeast_int_withNoExactFloatRepresentation()","588":"FloatSubjectTest::::isAtLeast_int_withNoExactFloatRepresentation()","589":"FloatSubjectTest::::isAtLeast_int_withNoExactFloatRepresentation()","591":"FloatSubjectTest::::isAtMost_int()","592":"FloatSubjectTest::::isAtMost_int()","593":"FloatSubjectTest::::isAtMost_int()","594":"FloatSubjectTest::::isAtMost_int()","595":"FloatSubjectTest::::isAtMost_int()","596":"FloatSubjectTest::::isAtMost_int()","598":"FloatSubjectTest::::isAtMost_int_withNoExactFloatRepresentation()","599":"FloatSubjectTest::::isAtMost_int_withNoExactFloatRepresentation()","600":"FloatSubjectTest::::isAtMost_int_withNoExactFloatRepresentation()","601":"FloatSubjectTest::::isAtMost_int_withNoExactFloatRepresentation()","603":"FloatSubjectTest::::expectFailureWhenTestingThat(java.lang.Float)","604":"FloatSubjectTest::::expectFailureWhenTestingThat(java.lang.Float)","605":"FloatSubjectTest::::expectFailureWhenTestingThat(java.lang.Float)"},"tests":[{"test_lines":[59,68],"covered_lines":[37,43,44,51,52,190,191],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[70,74],"covered_lines":[37,43,44,51,52,190,191],"label":"FloatSubject::::isEqualTo(java.lang.Object)"},{"test_lines":[76,83],"covered_lines":[37,43,44,51,52,190,191],"label":"FloatSubject::::isEqualTo(java.lang.Object)"},{"test_lines":[85,97],"covered_lines":[37,43,44,51,52,61,116,119,120,121,122,124,125,126,127,128,130,221,222,223,224,225,226],"label":"FloatSubject::::isWithin(float)"},{"test_lines":[117,129],"covered_lines":[37,43,44,51,52,61,155,158,159,160,161,163,164,165,166,167,169,221,222,223,224,225,226],"label":"FloatSubject::::isNotWithin(float)"},{"test_lines":[144,178],"covered_lines":[37,43,44,51,52,61,116,119,120,121,155,158,159,160,221,222,223,224],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[204,218],"covered_lines":[37,43,44,51,52,61,116,119,120,121,155,158,159,160,221],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[220,234],"covered_lines":[37,43,44,51,52,61,116,119,120,121,155,158,159,160,221,222,223,224,225],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[236,247],"covered_lines":[37,43,44,51,52,61,116,119,120,121,122,124,130,221,222,223,224,225,226],"label":"FloatSubject::::isWithin(float)"},{"test_lines":[249,267],"covered_lines":[37,43,44,51,52,61,155,158,159,160,161,163,164,165,166,167,169,221,222,223,224,225,226],"label":"FloatSubject::::isNotWithin(float)"},{"test_lines":[269,294],"covered_lines":[37,43,44,51,52,61,116,119,120,121,122,124,125,126,127,128,130,221,222,223,224,225,226],"label":"FloatSubject::::isWithin(float)"},{"test_lines":[296,309],"covered_lines":[37,43,44,51,52,61,155,158,159,160,161,163,164,165,166,167,169,221,222,223,224,225,226],"label":"FloatSubject::::isNotWithin(float)"},{"test_lines":[311,334],"covered_lines":[37,43,44,51,52,61,116,119,120,121,122,124,125,126,127,128,130,221,222,223,224,225,226],"label":"FloatSubject::::isWithin(float)"},{"test_lines":[336,359],"covered_lines":[37,43,44,51,52,61,155,158,159,160,161,163,164,165,166,167,169,221,222,223,224,225,226],"label":"FloatSubject::::isNotWithin(float)"},{"test_lines":[361,370],"covered_lines":[37,43,44,51,52,190,191],"label":"FloatSubject::::isEqualTo(java.lang.Object)"},{"test_lines":[383,393],"covered_lines":[37,43,44,51,52,204,205],"label":"FloatSubject::::isNotEqualTo(java.lang.Object)"},{"test_lines":[406,415],"covered_lines":[37,43,44,51,52,230,231,233],"label":"FloatSubject::::isZero()"},{"test_lines":[429,438],"covered_lines":[37,43,44,51,52,240,241,242,243,245],"label":"FloatSubject::::isNonZero()"},{"test_lines":[452,459],"covered_lines":[37,43,44,51,52,190,191,249,250],"label":"FloatSubject::::isPositiveInfinity()"},{"test_lines":[472,479],"covered_lines":[37,43,44,51,52,190,191,254,255],"label":"FloatSubject::::isNegativeInfinity()"},{"test_lines":[492,499],"covered_lines":[37,43,44,51,52,190,191,259,260],"label":"FloatSubject::::isNaN()"},{"test_lines":[512,521],"covered_lines":[37,43,44,51,52,267,268,270],"label":"FloatSubject::::isFinite()"},{"test_lines":[535,542],"covered_lines":[37,43,44,51,52,204,205,277,280,282],"label":"FloatSubject::::isNotNaN()"},{"test_lines":[544,547],"covered_lines":[37,43,44,51,52,204,205,277,280,282],"label":"FloatSubject::::isNotEqualTo(java.lang.Object)"},{"test_lines":[549,553],"covered_lines":[37,43,44,51,52,277,278,282],"label":"FloatSubject::::isNotNaN()"},{"test_lines":[555,558],"covered_lines":[37,43,44,51,52,291,292],"label":"FloatSubject::::isGreaterThan(int)"},{"test_lines":[560,565],"covered_lines":[37,43,44,51,52,291,292],"label":"FloatSubject::::isGreaterThan(int)"},{"test_lines":[567,570],"covered_lines":[37,43,44,51,52,301,302],"label":"FloatSubject::::isLessThan(int)"},{"test_lines":[572,577],"covered_lines":[37,43,44,51,52,301,302],"label":"FloatSubject::::isLessThan(int)"},{"test_lines":[579,584],"covered_lines":[37,43,44,51,52,321,322],"label":"FloatSubject::::isAtLeast(int)"},{"test_lines":[586,589],"covered_lines":[37,43,44,51,52,321,322],"label":"FloatSubject::::isAtLeast(int)"},{"test_lines":[591,596],"covered_lines":[37,43,44,51,52,311,312],"label":"FloatSubject::::isAtMost(int)"},{"test_lines":[598,601],"covered_lines":[37,43,44,51,52,311,312],"label":"FloatSubject::::isAtMost(int)"}]},"/bernard/dataset_construction/prep/repos/truth/core/src/main/java/com/google/common/truth/ComparisonFailureWithFacts.java":{"class_content":["/*\n"," * Copyright (c) 2014 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","\n","package com.google.common.truth;\n","\n","import static com.google.common.base.Preconditions.checkNotNull;\n","import static com.google.common.truth.Fact.makeMessage;\n","\n","import com.google.common.collect.ImmutableList;\n","import com.google.common.truth.Platform.PlatformComparisonFailure;\n","import org.checkerframework.checker.nullness.qual.Nullable;\n","\n","/**\n"," * An {@link AssertionError} (usually a JUnit {@code ComparisonFailure}, but not under GWT) composed\n"," * of structured {@link Fact} instances and other string messages.\n"," */\n","final class ComparisonFailureWithFacts extends PlatformComparisonFailure implements ErrorWithFacts {\n","  private final ImmutableList<Fact> facts;\n","\n","  @UsedByReflection\n","  ComparisonFailureWithFacts(\n","      ImmutableList<String> messages,\n","      ImmutableList<Fact> facts,\n","      String expected,\n","      String actual,\n","      @Nullable Throwable cause) {\n","    super(makeMessage(messages, facts), checkNotNull(expected), checkNotNull(actual), cause);\n","    this.facts = checkNotNull(facts);\n","  }\n","\n","  @Override\n","  public ImmutableList<Fact> facts() {\n","    return facts;\n","  }\n","}\n"],"test_content":["/*\n"," * Copyright (c) 2018 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","\n","package com.google.common.truth;\n","\n","import static com.google.common.base.Strings.repeat;\n","import static com.google.common.testing.SerializableTester.reserialize;\n","import static com.google.common.truth.ComparisonFailures.formatExpectedAndActual;\n","import static com.google.common.truth.Fact.fact;\n","import static com.google.common.truth.Fact.simpleFact;\n","import static com.google.common.truth.Truth.assertThat;\n","\n","import com.google.common.annotations.GwtIncompatible;\n","import com.google.common.base.Joiner;\n","import com.google.common.collect.ImmutableList;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import org.junit.runners.JUnit4;\n","\n","/** Test for {@link ComparisonFailureWithFacts}. */\n","@RunWith(JUnit4.class)\n","public class ComparisonFailureWithFactsTest {\n","  @Test\n","  public void formatAllDifferent() {\n","    runFormatTest(\n","        \"foo\", \"bar\",\n","        \"foo\", \"bar\");\n","  }\n","\n","  @Test\n","  public void formatShortOverlap() {\n","    runFormatTest(\n","        \"bar\", \"baz\",\n","        \"bar\", \"baz\");\n","  }\n","\n","  @Test\n","  public void formatLongOverlapStart() {\n","    runFormatTest(\n","        repeat(\"b\", 100) + \"aa\",\n","        repeat(\"b\", 100) + \"oo\",\n","        \"…\" + repeat(\"b\", 20) + \"aa\",\n","        \"…\" + repeat(\"b\", 20) + \"oo\");\n","  }\n","\n","  @Test\n","  public void formatLongOverlapEnd() {\n","    runFormatTest(\n","        \"ba\" + repeat(\"r\", 100),\n","        \"fu\" + repeat(\"r\", 100),\n","        \"ba\" + repeat(\"r\", 20) + \"…\",\n","        \"fu\" + repeat(\"r\", 20) + \"…\");\n","  }\n","\n","  @Test\n","  public void formatLongOverlapStartAlsoSmallAtEnd() {\n","    runFormatTest(\n","        repeat(\"b\", 100) + \"aa\" + repeat(\"t\", 7),\n","        repeat(\"b\", 100) + \"oo\" + repeat(\"t\", 7),\n","        \"…\" + repeat(\"b\", 20) + \"aattttttt\",\n","        \"…\" + repeat(\"b\", 20) + \"oottttttt\");\n","  }\n","\n","  @Test\n","  public void formatLongOverlapEndAlsoSmallAtStart() {\n","    runFormatTest(\n","        repeat(\"a\", 7) + \"ba\" + repeat(\"r\", 100),\n","        repeat(\"a\", 7) + \"fu\" + repeat(\"r\", 100),\n","        \"aaaaaaaba\" + repeat(\"r\", 20) + \"…\",\n","        \"aaaaaaafu\" + repeat(\"r\", 20) + \"…\");\n","  }\n","\n","  @Test\n","  public void formatLongOverlapBoth() {\n","    runFormatTest(\n","        repeat(\"r\", 60) + \"a\" + repeat(\"g\", 60),\n","        repeat(\"r\", 60) + \"u\" + repeat(\"g\", 60),\n","        \"…\" + repeat(\"r\", 20) + \"a\" + repeat(\"g\", 20) + \"…\",\n","        \"…\" + repeat(\"r\", 20) + \"u\" + repeat(\"g\", 20) + \"…\");\n","  }\n","\n","  @Test\n","  public void formatLongOverlapBothDifferentLength() {\n","    runFormatTest(\n","        repeat(\"r\", 60) + \"aaaaa\" + repeat(\"g\", 60),\n","        repeat(\"r\", 60) + \"u\" + repeat(\"g\", 60),\n","        \"…\" + repeat(\"r\", 20) + \"aaaaa\" + repeat(\"g\", 20) + \"…\",\n","        \"…\" + repeat(\"r\", 20) + \"u\" + repeat(\"g\", 20) + \"…\");\n","  }\n","\n","  @Test\n","  public void prefixAndSuffixWouldOverlapSimple() {\n","    runFormatTest(\n","        repeat(\"a\", 40) + \"lmnopqrstuv\" + repeat(\"a\", 40),\n","        repeat(\"a\", 40) + \"lmnopqrstuvlmnopqrstuv\" + repeat(\"a\", 40),\n","        \"…aaaaaaaaalmnopqrstuvaaaaaaaaa…\",\n","        \"…aaaaaaaaalmnopqrstuvlmnopqrstuvaaaaaaaaa…\");\n","  }\n","\n","  @Test\n","  public void prefixAndSuffixWouldOverlapAllSame() {\n","    runFormatTest(repeat(\"a\", 100), repeat(\"a\", 102), \"…\" + repeat(\"a\", 20), \"…\" + repeat(\"a\", 22));\n","  }\n","\n","  @Test\n","  public void formatNoSplitSurrogateStart() {\n","    runFormatTest(\n","        repeat(\"b\", 100) + \"\\uD8AB\\uDCAB\" + repeat(\"b\", 19) + \"aa\",\n","        repeat(\"b\", 100) + \"\\uD8AB\\uDCAB\" + repeat(\"b\", 19) + \"oo\",\n","        \"…\\uD8AB\\uDCAB\" + repeat(\"b\", 19) + \"aa\",\n","        \"…\\uD8AB\\uDCAB\" + repeat(\"b\", 19) + \"oo\");\n","  }\n","\n","  @Test\n","  public void formatNoSplitSurrogateEnd() {\n","    runFormatTest(\n","        \"ba\" + repeat(\"r\", 19) + \"\\uD8AB\\uDCAB\" + repeat(\"r\", 100),\n","        \"fu\" + repeat(\"r\", 19) + \"\\uD8AB\\uDCAB\" + repeat(\"r\", 100),\n","        \"ba\" + repeat(\"r\", 19) + \"\\uD8AB\\uDCAB…\",\n","        \"fu\" + repeat(\"r\", 19) + \"\\uD8AB\\uDCAB…\");\n","  }\n","\n","  @GwtIncompatible\n","  @Test\n","  public void formatDiffOmitStart() {\n","    runFormatTest(\n","        repeat(\"a\\n\", 100) + \"b\",\n","        repeat(\"a\\n\", 100) + \"c\",\n","        Joiner.on('\\n').join(\"@@ -98,4 +98,4 @@\", \" a\", \" a\", \" a\", \"-b\", \"+c\"));\n","  }\n","\n","  @GwtIncompatible\n","  @Test\n","  public void formatDiffOmitEnd() {\n","    runFormatTest(\n","        \"a\" + repeat(\"\\nz\", 100),\n","        \"b\" + repeat(\"\\nz\", 100),\n","        Joiner.on('\\n').join(\"@@ -1,4 +1,4 @@\", \"-a\", \"+b\", \" z\", \" z\", \" z\"));\n","  }\n","\n","  @GwtIncompatible\n","  @Test\n","  public void formatDiffOmitBoth() {\n","    runFormatTest(\n","        repeat(\"a\\n\", 100) + \"m\" + repeat(\"\\nz\", 100),\n","        repeat(\"a\\n\", 100) + \"n\" + repeat(\"\\nz\", 100),\n","        Joiner.on('\\n').join(\"@@ -98,7 +98,7 @@\", \" a\", \" a\", \" a\", \"-m\", \"+n\", \" z\", \" z\", \" z\"));\n","  }\n","\n","  @GwtIncompatible\n","  @Test\n","  public void formatDiffOmitBothMultipleDifferingLines() {\n","    runFormatTest(\n","        repeat(\"a\\n\", 100) + \"m\\nn\\no\\np\" + repeat(\"\\nz\", 100),\n","        repeat(\"a\\n\", 100) + \"q\\nr\\ns\\nt\" + repeat(\"\\nz\", 100),\n","        Joiner.on('\\n')\n","            .join(\n","                \"@@ -98,10 +98,10 @@\",\n","                \" a\",\n","                \" a\",\n","                \" a\",\n","                \"-m\",\n","                \"-n\",\n","                \"-o\",\n","                \"-p\",\n","                \"+q\",\n","                \"+r\",\n","                \"+s\",\n","                \"+t\",\n","                \" z\",\n","                \" z\",\n","                \" z\"));\n","  }\n","\n","  @GwtIncompatible\n","  @Test\n","  public void formatDiffOmitBothMultipleDifferingLinesDifferentLength() {\n","    runFormatTest(\n","        repeat(\"a\\n\", 100) + \"m\\nn\\no\\np\" + repeat(\"\\nz\", 100),\n","        repeat(\"a\\n\", 100) + \"q\\nr\\ns\\nt\\nu\\nv\" + repeat(\"\\nz\", 100),\n","        Joiner.on('\\n')\n","            .join(\n","                \"@@ -98,10 +98,12 @@\",\n","                \" a\",\n","                \" a\",\n","                \" a\",\n","                \"-m\",\n","                \"-n\",\n","                \"-o\",\n","                \"-p\",\n","                \"+q\",\n","                \"+r\",\n","                \"+s\",\n","                \"+t\",\n","                \"+u\",\n","                \"+v\",\n","                \" z\",\n","                \" z\",\n","                \" z\"));\n","  }\n","\n","  @GwtIncompatible\n","  @Test\n","  public void formatDiffPrefixAndSuffixWouldOverlapSimple() {\n","    runFormatTest(\n","        repeat(\"a\\n\", 40) + \"l\\nm\\nn\\no\\np\\n\" + repeat(\"a\\n\", 40),\n","        repeat(\"a\\n\", 40) + \"l\\nm\\nn\\no\\np\\nl\\nm\\nn\\no\\np\\n\" + repeat(\"a\\n\", 40),\n","        Joiner.on('\\n')\n","            .join(\n","                \"@@ -43,6 +43,11 @@\",\n","                \" n\",\n","                \" o\",\n","                \" p\",\n","                \"+l\",\n","                \"+m\",\n","                \"+n\",\n","                \"+o\",\n","                \"+p\",\n","                \" a\",\n","                \" a\",\n","                \" a\"));\n","  }\n","\n","  @GwtIncompatible\n","  @Test\n","  public void formatDiffPrefixAndSuffixWouldOverlapAllSame() {\n","    runFormatTest(\n","        repeat(\"a\\n\", 80),\n","        repeat(\"a\\n\", 82),\n","        Joiner.on('\\n').join(\"@@ -78,4 +78,6 @@\", \" a\", \" a\", \" a\", \"+a\", \"+a\", \" \"));\n","    /*\n","     * The final blank line here is odd, and it's different than what Unix diff produces. Maybe look\n","     * into removing it if we can do so safely?\n","     */\n","  }\n","\n","  @GwtIncompatible\n","  @Test\n","  public void formatDiffSameExceptNewlineStyle() {\n","    runFormatTest(\n","        repeat(\"a\\n\", 10),\n","        repeat(\"a\\r\\n\", 10),\n","        \"(line contents match, but line-break characters differ)\");\n","  }\n","\n","  @GwtIncompatible\n","  @Test\n","  public void formatDiffSameExceptTrailingNewline() {\n","    runFormatTest(\n","        repeat(\"a\\n\", 19) + \"a\",\n","        repeat(\"a\\n\", 19) + \"a\\n\",\n","        Joiner.on('\\n').join(\"@@ -18,3 +18,4 @@\", \" a\", \" a\", \" a\", \"+\"));\n","  }\n","\n","  @GwtIncompatible\n","  @Test\n","  public void testSerialization_ComparisonFailureWithFacts() {\n","    ImmutableList<String> messages = ImmutableList.of(\"hello\");\n","    ImmutableList<Fact> facts = ImmutableList.of(fact(\"first\", \"value\"), simpleFact(\"second\"));\n","    String expected = \"expected\";\n","    String actual = \"actual\";\n","    Throwable cause = new Throwable(\"cause\");\n","    ComparisonFailureWithFacts original =\n","        new ComparisonFailureWithFacts(messages, facts, expected, actual, cause);\n","\n","    ComparisonFailureWithFacts reserialized = reserialize(original);\n","    assertThat(reserialized).hasMessageThat().isEqualTo(original.getMessage());\n","    assertThat(reserialized).hasCauseThat().hasMessageThat().isEqualTo(cause.getMessage());\n","    assertThat(reserialized.facts().get(0).key).isEqualTo(\"first\");\n","    assertThat(reserialized.facts().get(0).value).isEqualTo(\"value\");\n","    assertThat(reserialized.facts().get(1).key).isEqualTo(\"second\");\n","    assertThat(reserialized.getExpected()).isEqualTo(\"expected\");\n","    assertThat(reserialized.getActual()).isEqualTo(\"actual\");\n","  }\n","\n","  @GwtIncompatible\n","  @Test\n","  public void testSerialization_AssertionErrorWithFacts() {\n","    ImmutableList<String> messages = ImmutableList.of(\"hello\");\n","    ImmutableList<Fact> facts = ImmutableList.of(fact(\"first\", \"value\"), simpleFact(\"second\"));\n","    Throwable cause = new Throwable(\"cause\");\n","    AssertionErrorWithFacts original = new AssertionErrorWithFacts(messages, facts, cause);\n","\n","    AssertionErrorWithFacts reserialized = reserialize(original);\n","    assertThat(reserialized).hasMessageThat().isEqualTo(original.getMessage());\n","    assertThat(reserialized).hasCauseThat().hasMessageThat().isEqualTo(cause.getMessage());\n","    assertThat(reserialized.facts().get(0).key).isEqualTo(\"first\");\n","    assertThat(reserialized.facts().get(0).value).isEqualTo(\"value\");\n","    assertThat(reserialized.facts().get(1).key).isEqualTo(\"second\");\n","  }\n","\n","  @GwtIncompatible\n","  @Test\n","  public void testSerialization_Fact() {\n","    Fact original = fact(\"first\", \"value\");\n","    Fact reserialized = reserialize(original);\n","    assertThat(reserialized.key).isEqualTo(original.key);\n","    assertThat(reserialized.value).isEqualTo(original.value);\n","\n","    original = simpleFact(\"second\");\n","    reserialized = reserialize(original);\n","    assertThat(reserialized.key).isEqualTo(original.key);\n","    assertThat(reserialized.value).isEqualTo(original.value);\n","  }\n","\n","  private static void runFormatTest(\n","      String expected, String actual, String expectedExpected, String expectedActual) {\n","    ImmutableList<Fact> facts = formatExpectedAndActual(expected, actual);\n","    assertThat(facts).hasSize(2);\n","    assertThat(facts.get(0).key).isEqualTo(\"expected\");\n","    assertThat(facts.get(1).key).isEqualTo(\"but was\");\n","    assertThat(facts.get(0).value).isEqualTo(expectedExpected);\n","    assertThat(facts.get(1).value).isEqualTo(expectedActual);\n","  }\n","\n","  @GwtIncompatible\n","  private static void runFormatTest(String expected, String actual, String expectedDiff) {\n","    ImmutableList<Fact> facts = formatExpectedAndActual(expected, actual);\n","    assertThat(facts).hasSize(1);\n","    assertThat(facts.get(0).key).isEqualTo(\"diff (-expected +actual)\");\n","    assertThat(facts.get(0).value).isEqualTo(expectedDiff);\n","  }\n","}\n"],"method_lines_dic":{"ComparisonFailureWithFacts::::facts()":[44,47]},"test_method_lines_dic":{"ComparisonFailureWithFactsTest::::formatAllDifferent()":[36,41],"ComparisonFailureWithFactsTest::::formatShortOverlap()":[43,48],"ComparisonFailureWithFactsTest::::formatLongOverlapStart()":[50,57],"ComparisonFailureWithFactsTest::::formatLongOverlapEnd()":[59,66],"ComparisonFailureWithFactsTest::::formatLongOverlapStartAlsoSmallAtEnd()":[68,75],"ComparisonFailureWithFactsTest::::formatLongOverlapEndAlsoSmallAtStart()":[77,84],"ComparisonFailureWithFactsTest::::formatLongOverlapBoth()":[86,93],"ComparisonFailureWithFactsTest::::formatLongOverlapBothDifferentLength()":[95,102],"ComparisonFailureWithFactsTest::::prefixAndSuffixWouldOverlapSimple()":[104,111],"ComparisonFailureWithFactsTest::::prefixAndSuffixWouldOverlapAllSame()":[113,116],"ComparisonFailureWithFactsTest::::formatNoSplitSurrogateStart()":[118,125],"ComparisonFailureWithFactsTest::::formatNoSplitSurrogateEnd()":[127,134],"ComparisonFailureWithFactsTest::::formatDiffOmitStart()":[136,143],"ComparisonFailureWithFactsTest::::formatDiffOmitEnd()":[145,152],"ComparisonFailureWithFactsTest::::formatDiffOmitBoth()":[154,161],"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLines()":[163,186],"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLinesDifferentLength()":[188,213],"ComparisonFailureWithFactsTest::::formatDiffPrefixAndSuffixWouldOverlapSimple()":[215,235],"ComparisonFailureWithFactsTest::::formatDiffPrefixAndSuffixWouldOverlapAllSame()":[237,248],"ComparisonFailureWithFactsTest::::formatDiffSameExceptNewlineStyle()":[250,257],"ComparisonFailureWithFactsTest::::formatDiffSameExceptTrailingNewline()":[259,266],"ComparisonFailureWithFactsTest::::testSerialization_ComparisonFailureWithFacts()":[268,287],"ComparisonFailureWithFactsTest::::testSerialization_AssertionErrorWithFacts()":[289,303],"ComparisonFailureWithFactsTest::::testSerialization_Fact()":[305,317],"ComparisonFailureWithFactsTest::::runFormatTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String)":[319,327],"ComparisonFailureWithFactsTest::::runFormatTest(java.lang.String,java.lang.String,java.lang.String)":[329,335]},"reverse_method_lines_dic":{"44":"ComparisonFailureWithFacts::::facts()","45":"ComparisonFailureWithFacts::::facts()","46":"ComparisonFailureWithFacts::::facts()","47":"ComparisonFailureWithFacts::::facts()"},"test_reverse_method_lines_dic":{"36":"ComparisonFailureWithFactsTest::::formatAllDifferent()","37":"ComparisonFailureWithFactsTest::::formatAllDifferent()","38":"ComparisonFailureWithFactsTest::::formatAllDifferent()","39":"ComparisonFailureWithFactsTest::::formatAllDifferent()","40":"ComparisonFailureWithFactsTest::::formatAllDifferent()","41":"ComparisonFailureWithFactsTest::::formatAllDifferent()","43":"ComparisonFailureWithFactsTest::::formatShortOverlap()","44":"ComparisonFailureWithFactsTest::::formatShortOverlap()","45":"ComparisonFailureWithFactsTest::::formatShortOverlap()","46":"ComparisonFailureWithFactsTest::::formatShortOverlap()","47":"ComparisonFailureWithFactsTest::::formatShortOverlap()","48":"ComparisonFailureWithFactsTest::::formatShortOverlap()","50":"ComparisonFailureWithFactsTest::::formatLongOverlapStart()","51":"ComparisonFailureWithFactsTest::::formatLongOverlapStart()","52":"ComparisonFailureWithFactsTest::::formatLongOverlapStart()","53":"ComparisonFailureWithFactsTest::::formatLongOverlapStart()","54":"ComparisonFailureWithFactsTest::::formatLongOverlapStart()","55":"ComparisonFailureWithFactsTest::::formatLongOverlapStart()","56":"ComparisonFailureWithFactsTest::::formatLongOverlapStart()","57":"ComparisonFailureWithFactsTest::::formatLongOverlapStart()","59":"ComparisonFailureWithFactsTest::::formatLongOverlapEnd()","60":"ComparisonFailureWithFactsTest::::formatLongOverlapEnd()","61":"ComparisonFailureWithFactsTest::::formatLongOverlapEnd()","62":"ComparisonFailureWithFactsTest::::formatLongOverlapEnd()","63":"ComparisonFailureWithFactsTest::::formatLongOverlapEnd()","64":"ComparisonFailureWithFactsTest::::formatLongOverlapEnd()","65":"ComparisonFailureWithFactsTest::::formatLongOverlapEnd()","66":"ComparisonFailureWithFactsTest::::formatLongOverlapEnd()","68":"ComparisonFailureWithFactsTest::::formatLongOverlapStartAlsoSmallAtEnd()","69":"ComparisonFailureWithFactsTest::::formatLongOverlapStartAlsoSmallAtEnd()","70":"ComparisonFailureWithFactsTest::::formatLongOverlapStartAlsoSmallAtEnd()","71":"ComparisonFailureWithFactsTest::::formatLongOverlapStartAlsoSmallAtEnd()","72":"ComparisonFailureWithFactsTest::::formatLongOverlapStartAlsoSmallAtEnd()","73":"ComparisonFailureWithFactsTest::::formatLongOverlapStartAlsoSmallAtEnd()","74":"ComparisonFailureWithFactsTest::::formatLongOverlapStartAlsoSmallAtEnd()","75":"ComparisonFailureWithFactsTest::::formatLongOverlapStartAlsoSmallAtEnd()","77":"ComparisonFailureWithFactsTest::::formatLongOverlapEndAlsoSmallAtStart()","78":"ComparisonFailureWithFactsTest::::formatLongOverlapEndAlsoSmallAtStart()","79":"ComparisonFailureWithFactsTest::::formatLongOverlapEndAlsoSmallAtStart()","80":"ComparisonFailureWithFactsTest::::formatLongOverlapEndAlsoSmallAtStart()","81":"ComparisonFailureWithFactsTest::::formatLongOverlapEndAlsoSmallAtStart()","82":"ComparisonFailureWithFactsTest::::formatLongOverlapEndAlsoSmallAtStart()","83":"ComparisonFailureWithFactsTest::::formatLongOverlapEndAlsoSmallAtStart()","84":"ComparisonFailureWithFactsTest::::formatLongOverlapEndAlsoSmallAtStart()","86":"ComparisonFailureWithFactsTest::::formatLongOverlapBoth()","87":"ComparisonFailureWithFactsTest::::formatLongOverlapBoth()","88":"ComparisonFailureWithFactsTest::::formatLongOverlapBoth()","89":"ComparisonFailureWithFactsTest::::formatLongOverlapBoth()","90":"ComparisonFailureWithFactsTest::::formatLongOverlapBoth()","91":"ComparisonFailureWithFactsTest::::formatLongOverlapBoth()","92":"ComparisonFailureWithFactsTest::::formatLongOverlapBoth()","93":"ComparisonFailureWithFactsTest::::formatLongOverlapBoth()","95":"ComparisonFailureWithFactsTest::::formatLongOverlapBothDifferentLength()","96":"ComparisonFailureWithFactsTest::::formatLongOverlapBothDifferentLength()","97":"ComparisonFailureWithFactsTest::::formatLongOverlapBothDifferentLength()","98":"ComparisonFailureWithFactsTest::::formatLongOverlapBothDifferentLength()","99":"ComparisonFailureWithFactsTest::::formatLongOverlapBothDifferentLength()","100":"ComparisonFailureWithFactsTest::::formatLongOverlapBothDifferentLength()","101":"ComparisonFailureWithFactsTest::::formatLongOverlapBothDifferentLength()","102":"ComparisonFailureWithFactsTest::::formatLongOverlapBothDifferentLength()","104":"ComparisonFailureWithFactsTest::::prefixAndSuffixWouldOverlapSimple()","105":"ComparisonFailureWithFactsTest::::prefixAndSuffixWouldOverlapSimple()","106":"ComparisonFailureWithFactsTest::::prefixAndSuffixWouldOverlapSimple()","107":"ComparisonFailureWithFactsTest::::prefixAndSuffixWouldOverlapSimple()","108":"ComparisonFailureWithFactsTest::::prefixAndSuffixWouldOverlapSimple()","109":"ComparisonFailureWithFactsTest::::prefixAndSuffixWouldOverlapSimple()","110":"ComparisonFailureWithFactsTest::::prefixAndSuffixWouldOverlapSimple()","111":"ComparisonFailureWithFactsTest::::prefixAndSuffixWouldOverlapSimple()","113":"ComparisonFailureWithFactsTest::::prefixAndSuffixWouldOverlapAllSame()","114":"ComparisonFailureWithFactsTest::::prefixAndSuffixWouldOverlapAllSame()","115":"ComparisonFailureWithFactsTest::::prefixAndSuffixWouldOverlapAllSame()","116":"ComparisonFailureWithFactsTest::::prefixAndSuffixWouldOverlapAllSame()","118":"ComparisonFailureWithFactsTest::::formatNoSplitSurrogateStart()","119":"ComparisonFailureWithFactsTest::::formatNoSplitSurrogateStart()","120":"ComparisonFailureWithFactsTest::::formatNoSplitSurrogateStart()","121":"ComparisonFailureWithFactsTest::::formatNoSplitSurrogateStart()","122":"ComparisonFailureWithFactsTest::::formatNoSplitSurrogateStart()","123":"ComparisonFailureWithFactsTest::::formatNoSplitSurrogateStart()","124":"ComparisonFailureWithFactsTest::::formatNoSplitSurrogateStart()","125":"ComparisonFailureWithFactsTest::::formatNoSplitSurrogateStart()","127":"ComparisonFailureWithFactsTest::::formatNoSplitSurrogateEnd()","128":"ComparisonFailureWithFactsTest::::formatNoSplitSurrogateEnd()","129":"ComparisonFailureWithFactsTest::::formatNoSplitSurrogateEnd()","130":"ComparisonFailureWithFactsTest::::formatNoSplitSurrogateEnd()","131":"ComparisonFailureWithFactsTest::::formatNoSplitSurrogateEnd()","132":"ComparisonFailureWithFactsTest::::formatNoSplitSurrogateEnd()","133":"ComparisonFailureWithFactsTest::::formatNoSplitSurrogateEnd()","134":"ComparisonFailureWithFactsTest::::formatNoSplitSurrogateEnd()","136":"ComparisonFailureWithFactsTest::::formatDiffOmitStart()","137":"ComparisonFailureWithFactsTest::::formatDiffOmitStart()","138":"ComparisonFailureWithFactsTest::::formatDiffOmitStart()","139":"ComparisonFailureWithFactsTest::::formatDiffOmitStart()","140":"ComparisonFailureWithFactsTest::::formatDiffOmitStart()","141":"ComparisonFailureWithFactsTest::::formatDiffOmitStart()","142":"ComparisonFailureWithFactsTest::::formatDiffOmitStart()","143":"ComparisonFailureWithFactsTest::::formatDiffOmitStart()","145":"ComparisonFailureWithFactsTest::::formatDiffOmitEnd()","146":"ComparisonFailureWithFactsTest::::formatDiffOmitEnd()","147":"ComparisonFailureWithFactsTest::::formatDiffOmitEnd()","148":"ComparisonFailureWithFactsTest::::formatDiffOmitEnd()","149":"ComparisonFailureWithFactsTest::::formatDiffOmitEnd()","150":"ComparisonFailureWithFactsTest::::formatDiffOmitEnd()","151":"ComparisonFailureWithFactsTest::::formatDiffOmitEnd()","152":"ComparisonFailureWithFactsTest::::formatDiffOmitEnd()","154":"ComparisonFailureWithFactsTest::::formatDiffOmitBoth()","155":"ComparisonFailureWithFactsTest::::formatDiffOmitBoth()","156":"ComparisonFailureWithFactsTest::::formatDiffOmitBoth()","157":"ComparisonFailureWithFactsTest::::formatDiffOmitBoth()","158":"ComparisonFailureWithFactsTest::::formatDiffOmitBoth()","159":"ComparisonFailureWithFactsTest::::formatDiffOmitBoth()","160":"ComparisonFailureWithFactsTest::::formatDiffOmitBoth()","161":"ComparisonFailureWithFactsTest::::formatDiffOmitBoth()","163":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLines()","164":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLines()","165":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLines()","166":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLines()","167":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLines()","168":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLines()","169":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLines()","170":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLines()","171":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLines()","172":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLines()","173":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLines()","174":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLines()","175":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLines()","176":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLines()","177":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLines()","178":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLines()","179":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLines()","180":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLines()","181":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLines()","182":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLines()","183":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLines()","184":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLines()","185":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLines()","186":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLines()","188":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLinesDifferentLength()","189":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLinesDifferentLength()","190":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLinesDifferentLength()","191":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLinesDifferentLength()","192":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLinesDifferentLength()","193":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLinesDifferentLength()","194":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLinesDifferentLength()","195":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLinesDifferentLength()","196":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLinesDifferentLength()","197":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLinesDifferentLength()","198":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLinesDifferentLength()","199":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLinesDifferentLength()","200":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLinesDifferentLength()","201":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLinesDifferentLength()","202":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLinesDifferentLength()","203":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLinesDifferentLength()","204":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLinesDifferentLength()","205":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLinesDifferentLength()","206":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLinesDifferentLength()","207":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLinesDifferentLength()","208":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLinesDifferentLength()","209":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLinesDifferentLength()","210":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLinesDifferentLength()","211":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLinesDifferentLength()","212":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLinesDifferentLength()","213":"ComparisonFailureWithFactsTest::::formatDiffOmitBothMultipleDifferingLinesDifferentLength()","215":"ComparisonFailureWithFactsTest::::formatDiffPrefixAndSuffixWouldOverlapSimple()","216":"ComparisonFailureWithFactsTest::::formatDiffPrefixAndSuffixWouldOverlapSimple()","217":"ComparisonFailureWithFactsTest::::formatDiffPrefixAndSuffixWouldOverlapSimple()","218":"ComparisonFailureWithFactsTest::::formatDiffPrefixAndSuffixWouldOverlapSimple()","219":"ComparisonFailureWithFactsTest::::formatDiffPrefixAndSuffixWouldOverlapSimple()","220":"ComparisonFailureWithFactsTest::::formatDiffPrefixAndSuffixWouldOverlapSimple()","221":"ComparisonFailureWithFactsTest::::formatDiffPrefixAndSuffixWouldOverlapSimple()","222":"ComparisonFailureWithFactsTest::::formatDiffPrefixAndSuffixWouldOverlapSimple()","223":"ComparisonFailureWithFactsTest::::formatDiffPrefixAndSuffixWouldOverlapSimple()","224":"ComparisonFailureWithFactsTest::::formatDiffPrefixAndSuffixWouldOverlapSimple()","225":"ComparisonFailureWithFactsTest::::formatDiffPrefixAndSuffixWouldOverlapSimple()","226":"ComparisonFailureWithFactsTest::::formatDiffPrefixAndSuffixWouldOverlapSimple()","227":"ComparisonFailureWithFactsTest::::formatDiffPrefixAndSuffixWouldOverlapSimple()","228":"ComparisonFailureWithFactsTest::::formatDiffPrefixAndSuffixWouldOverlapSimple()","229":"ComparisonFailureWithFactsTest::::formatDiffPrefixAndSuffixWouldOverlapSimple()","230":"ComparisonFailureWithFactsTest::::formatDiffPrefixAndSuffixWouldOverlapSimple()","231":"ComparisonFailureWithFactsTest::::formatDiffPrefixAndSuffixWouldOverlapSimple()","232":"ComparisonFailureWithFactsTest::::formatDiffPrefixAndSuffixWouldOverlapSimple()","233":"ComparisonFailureWithFactsTest::::formatDiffPrefixAndSuffixWouldOverlapSimple()","234":"ComparisonFailureWithFactsTest::::formatDiffPrefixAndSuffixWouldOverlapSimple()","235":"ComparisonFailureWithFactsTest::::formatDiffPrefixAndSuffixWouldOverlapSimple()","237":"ComparisonFailureWithFactsTest::::formatDiffPrefixAndSuffixWouldOverlapAllSame()","238":"ComparisonFailureWithFactsTest::::formatDiffPrefixAndSuffixWouldOverlapAllSame()","239":"ComparisonFailureWithFactsTest::::formatDiffPrefixAndSuffixWouldOverlapAllSame()","240":"ComparisonFailureWithFactsTest::::formatDiffPrefixAndSuffixWouldOverlapAllSame()","241":"ComparisonFailureWithFactsTest::::formatDiffPrefixAndSuffixWouldOverlapAllSame()","242":"ComparisonFailureWithFactsTest::::formatDiffPrefixAndSuffixWouldOverlapAllSame()","243":"ComparisonFailureWithFactsTest::::formatDiffPrefixAndSuffixWouldOverlapAllSame()","244":"ComparisonFailureWithFactsTest::::formatDiffPrefixAndSuffixWouldOverlapAllSame()","245":"ComparisonFailureWithFactsTest::::formatDiffPrefixAndSuffixWouldOverlapAllSame()","246":"ComparisonFailureWithFactsTest::::formatDiffPrefixAndSuffixWouldOverlapAllSame()","247":"ComparisonFailureWithFactsTest::::formatDiffPrefixAndSuffixWouldOverlapAllSame()","248":"ComparisonFailureWithFactsTest::::formatDiffPrefixAndSuffixWouldOverlapAllSame()","250":"ComparisonFailureWithFactsTest::::formatDiffSameExceptNewlineStyle()","251":"ComparisonFailureWithFactsTest::::formatDiffSameExceptNewlineStyle()","252":"ComparisonFailureWithFactsTest::::formatDiffSameExceptNewlineStyle()","253":"ComparisonFailureWithFactsTest::::formatDiffSameExceptNewlineStyle()","254":"ComparisonFailureWithFactsTest::::formatDiffSameExceptNewlineStyle()","255":"ComparisonFailureWithFactsTest::::formatDiffSameExceptNewlineStyle()","256":"ComparisonFailureWithFactsTest::::formatDiffSameExceptNewlineStyle()","257":"ComparisonFailureWithFactsTest::::formatDiffSameExceptNewlineStyle()","259":"ComparisonFailureWithFactsTest::::formatDiffSameExceptTrailingNewline()","260":"ComparisonFailureWithFactsTest::::formatDiffSameExceptTrailingNewline()","261":"ComparisonFailureWithFactsTest::::formatDiffSameExceptTrailingNewline()","262":"ComparisonFailureWithFactsTest::::formatDiffSameExceptTrailingNewline()","263":"ComparisonFailureWithFactsTest::::formatDiffSameExceptTrailingNewline()","264":"ComparisonFailureWithFactsTest::::formatDiffSameExceptTrailingNewline()","265":"ComparisonFailureWithFactsTest::::formatDiffSameExceptTrailingNewline()","266":"ComparisonFailureWithFactsTest::::formatDiffSameExceptTrailingNewline()","268":"ComparisonFailureWithFactsTest::::testSerialization_ComparisonFailureWithFacts()","269":"ComparisonFailureWithFactsTest::::testSerialization_ComparisonFailureWithFacts()","270":"ComparisonFailureWithFactsTest::::testSerialization_ComparisonFailureWithFacts()","271":"ComparisonFailureWithFactsTest::::testSerialization_ComparisonFailureWithFacts()","272":"ComparisonFailureWithFactsTest::::testSerialization_ComparisonFailureWithFacts()","273":"ComparisonFailureWithFactsTest::::testSerialization_ComparisonFailureWithFacts()","274":"ComparisonFailureWithFactsTest::::testSerialization_ComparisonFailureWithFacts()","275":"ComparisonFailureWithFactsTest::::testSerialization_ComparisonFailureWithFacts()","276":"ComparisonFailureWithFactsTest::::testSerialization_ComparisonFailureWithFacts()","277":"ComparisonFailureWithFactsTest::::testSerialization_ComparisonFailureWithFacts()","278":"ComparisonFailureWithFactsTest::::testSerialization_ComparisonFailureWithFacts()","279":"ComparisonFailureWithFactsTest::::testSerialization_ComparisonFailureWithFacts()","280":"ComparisonFailureWithFactsTest::::testSerialization_ComparisonFailureWithFacts()","281":"ComparisonFailureWithFactsTest::::testSerialization_ComparisonFailureWithFacts()","282":"ComparisonFailureWithFactsTest::::testSerialization_ComparisonFailureWithFacts()","283":"ComparisonFailureWithFactsTest::::testSerialization_ComparisonFailureWithFacts()","284":"ComparisonFailureWithFactsTest::::testSerialization_ComparisonFailureWithFacts()","285":"ComparisonFailureWithFactsTest::::testSerialization_ComparisonFailureWithFacts()","286":"ComparisonFailureWithFactsTest::::testSerialization_ComparisonFailureWithFacts()","287":"ComparisonFailureWithFactsTest::::testSerialization_ComparisonFailureWithFacts()","289":"ComparisonFailureWithFactsTest::::testSerialization_AssertionErrorWithFacts()","290":"ComparisonFailureWithFactsTest::::testSerialization_AssertionErrorWithFacts()","291":"ComparisonFailureWithFactsTest::::testSerialization_AssertionErrorWithFacts()","292":"ComparisonFailureWithFactsTest::::testSerialization_AssertionErrorWithFacts()","293":"ComparisonFailureWithFactsTest::::testSerialization_AssertionErrorWithFacts()","294":"ComparisonFailureWithFactsTest::::testSerialization_AssertionErrorWithFacts()","295":"ComparisonFailureWithFactsTest::::testSerialization_AssertionErrorWithFacts()","296":"ComparisonFailureWithFactsTest::::testSerialization_AssertionErrorWithFacts()","297":"ComparisonFailureWithFactsTest::::testSerialization_AssertionErrorWithFacts()","298":"ComparisonFailureWithFactsTest::::testSerialization_AssertionErrorWithFacts()","299":"ComparisonFailureWithFactsTest::::testSerialization_AssertionErrorWithFacts()","300":"ComparisonFailureWithFactsTest::::testSerialization_AssertionErrorWithFacts()","301":"ComparisonFailureWithFactsTest::::testSerialization_AssertionErrorWithFacts()","302":"ComparisonFailureWithFactsTest::::testSerialization_AssertionErrorWithFacts()","303":"ComparisonFailureWithFactsTest::::testSerialization_AssertionErrorWithFacts()","305":"ComparisonFailureWithFactsTest::::testSerialization_Fact()","306":"ComparisonFailureWithFactsTest::::testSerialization_Fact()","307":"ComparisonFailureWithFactsTest::::testSerialization_Fact()","308":"ComparisonFailureWithFactsTest::::testSerialization_Fact()","309":"ComparisonFailureWithFactsTest::::testSerialization_Fact()","310":"ComparisonFailureWithFactsTest::::testSerialization_Fact()","311":"ComparisonFailureWithFactsTest::::testSerialization_Fact()","312":"ComparisonFailureWithFactsTest::::testSerialization_Fact()","313":"ComparisonFailureWithFactsTest::::testSerialization_Fact()","314":"ComparisonFailureWithFactsTest::::testSerialization_Fact()","315":"ComparisonFailureWithFactsTest::::testSerialization_Fact()","316":"ComparisonFailureWithFactsTest::::testSerialization_Fact()","317":"ComparisonFailureWithFactsTest::::testSerialization_Fact()","319":"ComparisonFailureWithFactsTest::::runFormatTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String)","320":"ComparisonFailureWithFactsTest::::runFormatTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String)","321":"ComparisonFailureWithFactsTest::::runFormatTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String)","322":"ComparisonFailureWithFactsTest::::runFormatTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String)","323":"ComparisonFailureWithFactsTest::::runFormatTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String)","324":"ComparisonFailureWithFactsTest::::runFormatTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String)","325":"ComparisonFailureWithFactsTest::::runFormatTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String)","326":"ComparisonFailureWithFactsTest::::runFormatTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String)","327":"ComparisonFailureWithFactsTest::::runFormatTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String)","329":"ComparisonFailureWithFactsTest::::runFormatTest(java.lang.String,java.lang.String,java.lang.String)","330":"ComparisonFailureWithFactsTest::::runFormatTest(java.lang.String,java.lang.String,java.lang.String)","331":"ComparisonFailureWithFactsTest::::runFormatTest(java.lang.String,java.lang.String,java.lang.String)","332":"ComparisonFailureWithFactsTest::::runFormatTest(java.lang.String,java.lang.String,java.lang.String)","333":"ComparisonFailureWithFactsTest::::runFormatTest(java.lang.String,java.lang.String,java.lang.String)","334":"ComparisonFailureWithFactsTest::::runFormatTest(java.lang.String,java.lang.String,java.lang.String)","335":"ComparisonFailureWithFactsTest::::runFormatTest(java.lang.String,java.lang.String,java.lang.String)"},"tests":[{"test_lines":[268,287],"covered_lines":[40,41,42,46],"label":"ComparisonFailureWithFacts::::facts()"}]},"/bernard/dataset_construction/prep/repos/truth/core/src/main/java/com/google/common/truth/PrimitiveCharArraySubject.java":{"class_content":["/*\n"," * Copyright (c) 2014 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.base.Preconditions.checkNotNull;\n","\n","import com.google.common.primitives.Chars;\n","import org.checkerframework.checker.nullness.qual.Nullable;\n","\n","/**\n"," * A Subject for {@code char[]}.\n"," *\n"," * @author Christian Gruber (cgruber@israfil.net)\n"," */\n","public final class PrimitiveCharArraySubject extends AbstractArraySubject {\n","  private final char @Nullable [] actual;\n","\n","  PrimitiveCharArraySubject(\n","      FailureMetadata metadata, char @Nullable [] o, @Nullable String typeDescription) {\n","    super(metadata, o, typeDescription);\n","    this.actual = o;\n","  }\n","\n","  public IterableSubject asList() {\n","    return checkNoNeedToDisplayBothValues(\"asList()\").that(Chars.asList(checkNotNull(actual)));\n","  }\n","}\n"],"test_content":["/*\n"," * Copyright (c) 2014 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.truth.Truth.assertThat;\n","\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import org.junit.runners.JUnit4;\n","\n","/**\n"," * Tests for {@link com.google.common.truth.PrimitiveCharArraySubject}.\n"," *\n"," * @author Christian Gruber (cgruber@israfil.net)\n"," */\n","@RunWith(JUnit4.class)\n","public class PrimitiveCharArraySubjectTest extends BaseSubjectTestCase {\n","\n","  @Test\n","  public void isEqualTo() {\n","    assertThat(array('a', 'q')).isEqualTo(array('a', 'q'));\n","  }\n","\n","  @SuppressWarnings(\"TruthSelfEquals\")\n","  @Test\n","  public void isEqualTo_Same() {\n","    char[] same = array('a', 'q');\n","    assertThat(same).isEqualTo(same);\n","  }\n","\n","  @Test\n","  public void asList() {\n","    assertThat(array('a', 'q', 'z')).asList().containsAtLeast('a', 'z');\n","  }\n","\n","  @Test\n","  public void isEqualTo_Fail_UnequalOrdering() {\n","    expectFailureWhenTestingThat(array('a', 'q')).isEqualTo(array('q', 'a'));\n","    assertFailureKeys(\"expected\", \"but was\", \"differs at index\");\n","    assertFailureValue(\"expected\", \"[q, a]\");\n","    assertFailureValue(\"but was\", \"[a, q]\");\n","    assertFailureValue(\"differs at index\", \"[0]\");\n","  }\n","\n","  @Test\n","  public void isEqualTo_Fail_DifferentKindOfArray() {\n","    expectFailureWhenTestingThat(array('a', 'q')).isEqualTo(new int[] {});\n","    assertFailureKeys(\"expected\", \"but was\", \"wrong type\", \"expected\", \"but was\");\n","    assertFailureValueIndexed(\"expected\", 1, \"int[]\");\n","    assertFailureValueIndexed(\"but was\", 1, \"char[]\");\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_SameLengths() {\n","    assertThat(array('a', 'q')).isNotEqualTo(array('q', 'a'));\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_DifferentLengths() {\n","    assertThat(array('a', 'q')).isNotEqualTo(array('q', 'a', 'b'));\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_DifferentTypes() {\n","    assertThat(array('a', 'q')).isNotEqualTo(new Object());\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_FailEquals() {\n","    expectFailureWhenTestingThat(array('a', 'q')).isNotEqualTo(array('a', 'q'));\n","  }\n","\n","  @SuppressWarnings(\"TruthSelfEquals\")\n","  @Test\n","  public void isNotEqualTo_FailSame() {\n","    char[] same = array('a', 'q');\n","    expectFailureWhenTestingThat(same).isNotEqualTo(same);\n","  }\n","\n","  private static char[] array(char... ts) {\n","    return ts;\n","  }\n","\n","  private PrimitiveCharArraySubject expectFailureWhenTestingThat(char[] actual) {\n","    return expectFailure.whenTesting().that(actual);\n","  }\n","}\n"],"method_lines_dic":{"PrimitiveCharArraySubject::::asList()":[37,39]},"test_method_lines_dic":{"PrimitiveCharArraySubjectTest::::isEqualTo()":[32,35],"PrimitiveCharArraySubjectTest::::isEqualTo_Same()":[37,42],"PrimitiveCharArraySubjectTest::::asList()":[44,47],"PrimitiveCharArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()":[49,56],"PrimitiveCharArraySubjectTest::::isEqualTo_Fail_DifferentKindOfArray()":[58,64],"PrimitiveCharArraySubjectTest::::isNotEqualTo_SameLengths()":[66,69],"PrimitiveCharArraySubjectTest::::isNotEqualTo_DifferentLengths()":[71,74],"PrimitiveCharArraySubjectTest::::isNotEqualTo_DifferentTypes()":[76,79],"PrimitiveCharArraySubjectTest::::isNotEqualTo_FailEquals()":[81,84],"PrimitiveCharArraySubjectTest::::isNotEqualTo_FailSame()":[86,91],"PrimitiveCharArraySubjectTest::::array(char[])":[93,95],"PrimitiveCharArraySubjectTest::::expectFailureWhenTestingThat(char[])":[97,99]},"reverse_method_lines_dic":{"37":"PrimitiveCharArraySubject::::asList()","38":"PrimitiveCharArraySubject::::asList()","39":"PrimitiveCharArraySubject::::asList()"},"test_reverse_method_lines_dic":{"32":"PrimitiveCharArraySubjectTest::::isEqualTo()","33":"PrimitiveCharArraySubjectTest::::isEqualTo()","34":"PrimitiveCharArraySubjectTest::::isEqualTo()","35":"PrimitiveCharArraySubjectTest::::isEqualTo()","37":"PrimitiveCharArraySubjectTest::::isEqualTo_Same()","38":"PrimitiveCharArraySubjectTest::::isEqualTo_Same()","39":"PrimitiveCharArraySubjectTest::::isEqualTo_Same()","40":"PrimitiveCharArraySubjectTest::::isEqualTo_Same()","41":"PrimitiveCharArraySubjectTest::::isEqualTo_Same()","42":"PrimitiveCharArraySubjectTest::::isEqualTo_Same()","44":"PrimitiveCharArraySubjectTest::::asList()","45":"PrimitiveCharArraySubjectTest::::asList()","46":"PrimitiveCharArraySubjectTest::::asList()","47":"PrimitiveCharArraySubjectTest::::asList()","49":"PrimitiveCharArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","50":"PrimitiveCharArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","51":"PrimitiveCharArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","52":"PrimitiveCharArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","53":"PrimitiveCharArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","54":"PrimitiveCharArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","55":"PrimitiveCharArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","56":"PrimitiveCharArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","58":"PrimitiveCharArraySubjectTest::::isEqualTo_Fail_DifferentKindOfArray()","59":"PrimitiveCharArraySubjectTest::::isEqualTo_Fail_DifferentKindOfArray()","60":"PrimitiveCharArraySubjectTest::::isEqualTo_Fail_DifferentKindOfArray()","61":"PrimitiveCharArraySubjectTest::::isEqualTo_Fail_DifferentKindOfArray()","62":"PrimitiveCharArraySubjectTest::::isEqualTo_Fail_DifferentKindOfArray()","63":"PrimitiveCharArraySubjectTest::::isEqualTo_Fail_DifferentKindOfArray()","64":"PrimitiveCharArraySubjectTest::::isEqualTo_Fail_DifferentKindOfArray()","66":"PrimitiveCharArraySubjectTest::::isNotEqualTo_SameLengths()","67":"PrimitiveCharArraySubjectTest::::isNotEqualTo_SameLengths()","68":"PrimitiveCharArraySubjectTest::::isNotEqualTo_SameLengths()","69":"PrimitiveCharArraySubjectTest::::isNotEqualTo_SameLengths()","71":"PrimitiveCharArraySubjectTest::::isNotEqualTo_DifferentLengths()","72":"PrimitiveCharArraySubjectTest::::isNotEqualTo_DifferentLengths()","73":"PrimitiveCharArraySubjectTest::::isNotEqualTo_DifferentLengths()","74":"PrimitiveCharArraySubjectTest::::isNotEqualTo_DifferentLengths()","76":"PrimitiveCharArraySubjectTest::::isNotEqualTo_DifferentTypes()","77":"PrimitiveCharArraySubjectTest::::isNotEqualTo_DifferentTypes()","78":"PrimitiveCharArraySubjectTest::::isNotEqualTo_DifferentTypes()","79":"PrimitiveCharArraySubjectTest::::isNotEqualTo_DifferentTypes()","81":"PrimitiveCharArraySubjectTest::::isNotEqualTo_FailEquals()","82":"PrimitiveCharArraySubjectTest::::isNotEqualTo_FailEquals()","83":"PrimitiveCharArraySubjectTest::::isNotEqualTo_FailEquals()","84":"PrimitiveCharArraySubjectTest::::isNotEqualTo_FailEquals()","86":"PrimitiveCharArraySubjectTest::::isNotEqualTo_FailSame()","87":"PrimitiveCharArraySubjectTest::::isNotEqualTo_FailSame()","88":"PrimitiveCharArraySubjectTest::::isNotEqualTo_FailSame()","89":"PrimitiveCharArraySubjectTest::::isNotEqualTo_FailSame()","90":"PrimitiveCharArraySubjectTest::::isNotEqualTo_FailSame()","91":"PrimitiveCharArraySubjectTest::::isNotEqualTo_FailSame()","93":"PrimitiveCharArraySubjectTest::::array(char[])","94":"PrimitiveCharArraySubjectTest::::array(char[])","95":"PrimitiveCharArraySubjectTest::::array(char[])","97":"PrimitiveCharArraySubjectTest::::expectFailureWhenTestingThat(char[])","98":"PrimitiveCharArraySubjectTest::::expectFailureWhenTestingThat(char[])","99":"PrimitiveCharArraySubjectTest::::expectFailureWhenTestingThat(char[])"},"tests":[{"test_lines":[32,35],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[37,42],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[44,47],"covered_lines":[33,34,35,38],"label":"PrimitiveCharArraySubject::::asList()"},{"test_lines":[49,56],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[58,64],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[66,69],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[71,74],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[76,79],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[81,84],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[86,91],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/truth/core/src/main/java/com/google/common/truth/ComparableSubject.java":{"class_content":["/*\n"," * Copyright (c) 2014 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.base.Preconditions.checkNotNull;\n","\n","import com.google.common.collect.Range;\n","import org.checkerframework.checker.nullness.qual.Nullable;\n","\n","/**\n"," * Propositions for {@link Comparable} typed subjects.\n"," *\n"," * @author Kurt Alfred Kluever\n"," * @param <T> the type of the object being tested by this {@code ComparableSubject}\n"," */\n","// TODO(b/136040841): Consider further tightening this to the proper `extends Comparable<? super T>`\n","public abstract class ComparableSubject<T extends Comparable<?>> extends Subject {\n","  /**\n","   * Constructor for use by subclasses. If you want to create an instance of this class itself, call\n","   * {@link Subject#check(String, Object...) check(...)}{@code .that(actual)}.\n","   */\n","  private final @Nullable T actual;\n","\n","  protected ComparableSubject(FailureMetadata metadata, @Nullable T actual) {\n","    super(metadata, actual);\n","    this.actual = actual;\n","  }\n","\n","  /** Checks that the subject is in {@code range}. */\n","  public final void isIn(Range<T> range) {\n","    if (!range.contains(checkNotNull(actual))) {\n","      failWithActual(\"expected to be in range\", range);\n","    }\n","  }\n","\n","  /** Checks that the subject is <i>not</i> in {@code range}. */\n","  public final void isNotIn(Range<T> range) {\n","    if (range.contains(checkNotNull(actual))) {\n","      failWithActual(\"expected not to be in range\", range);\n","    }\n","  }\n","\n","  /**\n","   * Checks that the subject is equivalent to {@code other} according to {@link\n","   * Comparable#compareTo}, (i.e., checks that {@code a.comparesTo(b) == 0}).\n","   *\n","   * <p><b>Note:</b> Do not use this method for checking object equality. Instead, use {@link\n","   * #isEqualTo(Object)}.\n","   */\n","  @SuppressWarnings(\"unchecked\")\n","  public void isEquivalentAccordingToCompareTo(@Nullable T expected) {\n","    if (checkNotNull((Comparable<Object>) actual).compareTo(checkNotNull(expected)) != 0) {\n","      failWithActual(\"expected value that sorts equal to\", expected);\n","    }\n","  }\n","\n","  /**\n","   * Checks that the subject is greater than {@code other}.\n","   *\n","   * <p>To check that the subject is greater than <i>or equal to</i> {@code other}, use {@link\n","   * #isAtLeast}.\n","   */\n","  @SuppressWarnings(\"unchecked\")\n","  public final void isGreaterThan(@Nullable T other) {\n","    if (checkNotNull((Comparable<Object>) actual).compareTo(checkNotNull(other)) <= 0) {\n","      failWithActual(\"expected to be greater than\", other);\n","    }\n","  }\n","\n","  /**\n","   * Checks that the subject is less than {@code other}.\n","   *\n","   * <p>To check that the subject is less than <i>or equal to</i> {@code other}, use {@link\n","   * #isAtMost}.\n","   */\n","  @SuppressWarnings(\"unchecked\")\n","  public final void isLessThan(@Nullable T other) {\n","    if (checkNotNull((Comparable<Object>) actual).compareTo(checkNotNull(other)) >= 0) {\n","      failWithActual(\"expected to be less than\", other);\n","    }\n","  }\n","\n","  /**\n","   * Checks that the subject is less than or equal to {@code other}.\n","   *\n","   * <p>To check that the subject is <i>strictly</i> less than {@code other}, use {@link\n","   * #isLessThan}.\n","   */\n","  @SuppressWarnings(\"unchecked\")\n","  public final void isAtMost(@Nullable T other) {\n","    if (checkNotNull((Comparable<Object>) actual).compareTo(checkNotNull(other)) > 0) {\n","      failWithActual(\"expected to be at most\", other);\n","    }\n","  }\n","\n","  /**\n","   * Checks that the subject is greater than or equal to {@code other}.\n","   *\n","   * <p>To check that the subject is <i>strictly</i> greater than {@code other}, use {@link\n","   * #isGreaterThan}.\n","   */\n","  @SuppressWarnings(\"unchecked\")\n","  public final void isAtLeast(@Nullable T other) {\n","    if (checkNotNull((Comparable<Object>) actual).compareTo(checkNotNull(other)) < 0) {\n","      failWithActual(\"expected to be at least\", other);\n","    }\n","  }\n","}\n"],"test_content":["/*\n"," * Copyright (c) 2014 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.base.Preconditions.checkNotNull;\n","import static com.google.common.truth.ExpectFailure.assertThat;\n","import static com.google.common.truth.Truth.assertThat;\n","import static com.google.common.truth.Truth.assertWithMessage;\n","import static org.junit.Assert.fail;\n","\n","import com.google.common.collect.Range;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import org.junit.runners.JUnit4;\n","\n","/**\n"," * Tests for Comparable Subjects.\n"," *\n"," * @author Kurt Alfred Kluever\n"," */\n","@RunWith(JUnit4.class)\n","public class ComparableSubjectTest extends BaseSubjectTestCase {\n","\n","  @Test\n","  // test of a mistaken call and of unnecessary use of isEquivalentAccordingToCompareTo\n","  @SuppressWarnings({\"deprecation\", \"IntegerComparison\"})\n","  public void testNulls() {\n","    try {\n","      assertThat(6).isEquivalentAccordingToCompareTo(null);\n","      fail();\n","    } catch (NullPointerException expected) {\n","    }\n","    try {\n","      assertThat(6).isGreaterThan(null);\n","      fail();\n","    } catch (NullPointerException expected) {\n","    }\n","    try {\n","      assertThat(6).isLessThan(null);\n","      fail();\n","    } catch (NullPointerException expected) {\n","    }\n","    try {\n","      assertThat(6).isAtMost(null);\n","      fail();\n","    } catch (NullPointerException expected) {\n","    }\n","    try {\n","      assertThat(6).isAtLeast(null);\n","      fail();\n","    } catch (NullPointerException expected) {\n","    }\n","  }\n","\n","  @Test\n","  public void isInRange() {\n","    Range<Integer> oneToFive = Range.closed(1, 5);\n","    assertThat(4).isIn(oneToFive);\n","\n","    expectFailureWhenTestingThat(6).isIn(oneToFive);\n","    assertThat(expectFailure.getFailure())\n","        .factValue(\"expected to be in range\")\n","        .isEqualTo(oneToFive.toString());\n","  }\n","\n","  @Test\n","  public void isNotInRange() {\n","    Range<Integer> oneToFive = Range.closed(1, 5);\n","    assertThat(6).isNotIn(oneToFive);\n","\n","    expectFailureWhenTestingThat(4).isNotIn(oneToFive);\n","    assertThat(expectFailure.getFailure())\n","        .factValue(\"expected not to be in range\")\n","        .isEqualTo(oneToFive.toString());\n","  }\n","\n","  @Test\n","  public void isEquivalentAccordingToCompareTo() {\n","    assertThat(new StringComparedByLength(\"abc\"))\n","        .isEquivalentAccordingToCompareTo(new StringComparedByLength(\"xyz\"));\n","\n","    expectFailureWhenTestingThat(new StringComparedByLength(\"abc\"))\n","        .isEquivalentAccordingToCompareTo(new StringComparedByLength(\"abcd\"));\n","    assertFailureValue(\"expected value that sorts equal to\", \"abcd\");\n","  }\n","\n","  private static final class StringComparedByLength implements Comparable<StringComparedByLength> {\n","    private final String value;\n","\n","    StringComparedByLength(String value) {\n","      this.value = checkNotNull(value);\n","    }\n","\n","    @Override\n","    public int compareTo(StringComparedByLength other) {\n","      /*\n","       * Even though Integer.compare was added in Java 7, we use it even under old versions of\n","       * Android, as discussed in IterableSubjectTest.\n","       */\n","      return Integer.compare(value.length(), other.value.length());\n","    }\n","\n","    @Override\n","    public String toString() {\n","      return value;\n","    }\n","  }\n","\n","  @Test\n","  public void isGreaterThan_failsEqual() {\n","    assertThat(5).isGreaterThan(4);\n","\n","    expectFailureWhenTestingThat(4).isGreaterThan(4);\n","    assertFailureValue(\"expected to be greater than\", \"4\");\n","  }\n","\n","  @Test\n","  public void isGreaterThan_failsSmaller() {\n","    expectFailureWhenTestingThat(3).isGreaterThan(4);\n","    assertFailureValue(\"expected to be greater than\", \"4\");\n","  }\n","\n","  @Test\n","  public void isLessThan_failsEqual() {\n","    assertThat(4).isLessThan(5);\n","\n","    expectFailureWhenTestingThat(4).isLessThan(4);\n","    assertFailureValue(\"expected to be less than\", \"4\");\n","  }\n","\n","  @Test\n","  public void isLessThan_failsGreater() {\n","    expectFailureWhenTestingThat(4).isLessThan(3);\n","    assertFailureValue(\"expected to be less than\", \"3\");\n","  }\n","\n","  @Test\n","  public void isAtMost() {\n","    assertThat(5).isAtMost(5);\n","    assertThat(5).isAtMost(6);\n","\n","    expectFailureWhenTestingThat(4).isAtMost(3);\n","    assertFailureValue(\"expected to be at most\", \"3\");\n","  }\n","\n","  @Test\n","  public void isAtLeast() {\n","    assertThat(4).isAtLeast(3);\n","    assertThat(4).isAtLeast(4);\n","\n","    expectFailureWhenTestingThat(4).isAtLeast(5);\n","    assertFailureValue(\"expected to be at least\", \"5\");\n","  }\n","\n","  // Brief tests with other comparable types (no negative test cases)\n","\n","  @Test\n","  public void longs() {\n","    assertThat(5L).isGreaterThan(4L);\n","    assertThat(4L).isLessThan(5L);\n","\n","    assertThat(4L).isAtMost(4L);\n","    assertThat(4L).isAtMost(5L);\n","    assertThat(4L).isAtLeast(4L);\n","    assertThat(4L).isAtLeast(3L);\n","\n","    Range<Long> range = Range.closed(2L, 4L);\n","    assertThat(3L).isIn(range);\n","    assertThat(5L).isNotIn(range);\n","  }\n","\n","  @Test\n","  public void strings() {\n","    assertThat(\"kak\").isGreaterThan(\"gak\");\n","    assertThat(\"gak\").isLessThan(\"kak\");\n","\n","    assertThat(\"kak\").isAtMost(\"kak\");\n","    assertThat(\"gak\").isAtMost(\"kak\");\n","    assertThat(\"kak\").isAtLeast(\"kak\");\n","    assertThat(\"kak\").isAtLeast(\"gak\");\n","\n","    Range<String> range = Range.closed(\"a\", \"c\");\n","    assertThat(\"b\").isIn(range);\n","    assertThat(\"d\").isNotIn(range);\n","  }\n","\n","  @Test\n","  public void comparableType() {\n","    assertThat(new ComparableType(4)).isGreaterThan(new ComparableType(3));\n","    assertThat(new ComparableType(3)).isLessThan(new ComparableType(4));\n","  }\n","\n","  @Test\n","  public void namedComparableType() {\n","    assertWithMessage(\"comparable\").that(new ComparableType(2)).isLessThan(new ComparableType(3));\n","  }\n","\n","  private static final class ComparableType implements Comparable<ComparableType> {\n","    private final int wrapped;\n","\n","    private ComparableType(int toWrap) {\n","      this.wrapped = toWrap;\n","    }\n","\n","    @Override\n","    public int compareTo(ComparableType other) {\n","      return wrapped - other.wrapped;\n","    }\n","  }\n","\n","  @Test\n","  public void rawComparableType() {\n","    assertThat(new RawComparableType(3)).isLessThan(new RawComparableType(4));\n","  }\n","\n","  @SuppressWarnings({\"ComparableType\", \"rawtypes\"})\n","  private static final class RawComparableType implements Comparable {\n","    private final int wrapped;\n","\n","    private RawComparableType(int toWrap) {\n","      this.wrapped = toWrap;\n","    }\n","\n","    @Override\n","    public int compareTo(Object other) {\n","      return wrapped - ((RawComparableType) other).wrapped;\n","    }\n","\n","    @Override\n","    public String toString() {\n","      return Integer.toString(wrapped);\n","    }\n","  }\n","\n","  private <T extends Comparable<? super T>> ComparableSubject<T> expectFailureWhenTestingThat(\n","      T actual) {\n","    return expectFailure.whenTesting().that(actual);\n","  }\n","}\n"],"method_lines_dic":{"ComparableSubject::::isEquivalentAccordingToCompareTo(T)":[63,68],"ComparableSubject::::isGreaterThan(T)":[76,81],"ComparableSubject::::isLessThan(T)":[89,94],"ComparableSubject::::isAtMost(T)":[102,107],"ComparableSubject::::isAtLeast(T)":[115,120]},"test_method_lines_dic":{"ComparableSubjectTest::::testNulls()":[37,66],"ComparableSubjectTest::::isInRange()":[68,77],"ComparableSubjectTest::::isNotInRange()":[79,88],"ComparableSubjectTest::::isEquivalentAccordingToCompareTo()":[90,98],"ComparableSubjectTest.StringComparedByLength::::compareTo(com.google.common.truth.ComparableSubjectTest.StringComparedByLength)":[107,114],"ComparableSubjectTest.StringComparedByLength::::toString()":[116,119],"ComparableSubjectTest::::isGreaterThan_failsEqual()":[122,128],"ComparableSubjectTest::::isGreaterThan_failsSmaller()":[130,134],"ComparableSubjectTest::::isLessThan_failsEqual()":[136,142],"ComparableSubjectTest::::isLessThan_failsGreater()":[144,148],"ComparableSubjectTest::::isAtMost()":[150,157],"ComparableSubjectTest::::isAtLeast()":[159,166],"ComparableSubjectTest::::longs()":[170,183],"ComparableSubjectTest::::strings()":[185,198],"ComparableSubjectTest::::comparableType()":[200,204],"ComparableSubjectTest::::namedComparableType()":[206,209],"ComparableSubjectTest.ComparableType::::compareTo(com.google.common.truth.ComparableSubjectTest.ComparableType)":[218,221],"ComparableSubjectTest::::rawComparableType()":[224,227],"ComparableSubjectTest.RawComparableType::::compareTo(java.lang.Object)":[237,240],"ComparableSubjectTest.RawComparableType::::toString()":[242,245],"ComparableSubjectTest::::expectFailureWhenTestingThat(T)":[248,251]},"reverse_method_lines_dic":{"63":"ComparableSubject::::isEquivalentAccordingToCompareTo(T)","64":"ComparableSubject::::isEquivalentAccordingToCompareTo(T)","65":"ComparableSubject::::isEquivalentAccordingToCompareTo(T)","66":"ComparableSubject::::isEquivalentAccordingToCompareTo(T)","67":"ComparableSubject::::isEquivalentAccordingToCompareTo(T)","68":"ComparableSubject::::isEquivalentAccordingToCompareTo(T)","76":"ComparableSubject::::isGreaterThan(T)","77":"ComparableSubject::::isGreaterThan(T)","78":"ComparableSubject::::isGreaterThan(T)","79":"ComparableSubject::::isGreaterThan(T)","80":"ComparableSubject::::isGreaterThan(T)","81":"ComparableSubject::::isGreaterThan(T)","89":"ComparableSubject::::isLessThan(T)","90":"ComparableSubject::::isLessThan(T)","91":"ComparableSubject::::isLessThan(T)","92":"ComparableSubject::::isLessThan(T)","93":"ComparableSubject::::isLessThan(T)","94":"ComparableSubject::::isLessThan(T)","102":"ComparableSubject::::isAtMost(T)","103":"ComparableSubject::::isAtMost(T)","104":"ComparableSubject::::isAtMost(T)","105":"ComparableSubject::::isAtMost(T)","106":"ComparableSubject::::isAtMost(T)","107":"ComparableSubject::::isAtMost(T)","115":"ComparableSubject::::isAtLeast(T)","116":"ComparableSubject::::isAtLeast(T)","117":"ComparableSubject::::isAtLeast(T)","118":"ComparableSubject::::isAtLeast(T)","119":"ComparableSubject::::isAtLeast(T)","120":"ComparableSubject::::isAtLeast(T)"},"test_reverse_method_lines_dic":{"37":"ComparableSubjectTest::::testNulls()","38":"ComparableSubjectTest::::testNulls()","39":"ComparableSubjectTest::::testNulls()","40":"ComparableSubjectTest::::testNulls()","41":"ComparableSubjectTest::::testNulls()","42":"ComparableSubjectTest::::testNulls()","43":"ComparableSubjectTest::::testNulls()","44":"ComparableSubjectTest::::testNulls()","45":"ComparableSubjectTest::::testNulls()","46":"ComparableSubjectTest::::testNulls()","47":"ComparableSubjectTest::::testNulls()","48":"ComparableSubjectTest::::testNulls()","49":"ComparableSubjectTest::::testNulls()","50":"ComparableSubjectTest::::testNulls()","51":"ComparableSubjectTest::::testNulls()","52":"ComparableSubjectTest::::testNulls()","53":"ComparableSubjectTest::::testNulls()","54":"ComparableSubjectTest::::testNulls()","55":"ComparableSubjectTest::::testNulls()","56":"ComparableSubjectTest::::testNulls()","57":"ComparableSubjectTest::::testNulls()","58":"ComparableSubjectTest::::testNulls()","59":"ComparableSubjectTest::::testNulls()","60":"ComparableSubjectTest::::testNulls()","61":"ComparableSubjectTest::::testNulls()","62":"ComparableSubjectTest::::testNulls()","63":"ComparableSubjectTest::::testNulls()","64":"ComparableSubjectTest::::testNulls()","65":"ComparableSubjectTest::::testNulls()","66":"ComparableSubjectTest::::testNulls()","68":"ComparableSubjectTest::::isInRange()","69":"ComparableSubjectTest::::isInRange()","70":"ComparableSubjectTest::::isInRange()","71":"ComparableSubjectTest::::isInRange()","72":"ComparableSubjectTest::::isInRange()","73":"ComparableSubjectTest::::isInRange()","74":"ComparableSubjectTest::::isInRange()","75":"ComparableSubjectTest::::isInRange()","76":"ComparableSubjectTest::::isInRange()","77":"ComparableSubjectTest::::isInRange()","79":"ComparableSubjectTest::::isNotInRange()","80":"ComparableSubjectTest::::isNotInRange()","81":"ComparableSubjectTest::::isNotInRange()","82":"ComparableSubjectTest::::isNotInRange()","83":"ComparableSubjectTest::::isNotInRange()","84":"ComparableSubjectTest::::isNotInRange()","85":"ComparableSubjectTest::::isNotInRange()","86":"ComparableSubjectTest::::isNotInRange()","87":"ComparableSubjectTest::::isNotInRange()","88":"ComparableSubjectTest::::isNotInRange()","90":"ComparableSubjectTest::::isEquivalentAccordingToCompareTo()","91":"ComparableSubjectTest::::isEquivalentAccordingToCompareTo()","92":"ComparableSubjectTest::::isEquivalentAccordingToCompareTo()","93":"ComparableSubjectTest::::isEquivalentAccordingToCompareTo()","94":"ComparableSubjectTest::::isEquivalentAccordingToCompareTo()","95":"ComparableSubjectTest::::isEquivalentAccordingToCompareTo()","96":"ComparableSubjectTest::::isEquivalentAccordingToCompareTo()","97":"ComparableSubjectTest::::isEquivalentAccordingToCompareTo()","98":"ComparableSubjectTest::::isEquivalentAccordingToCompareTo()","107":"ComparableSubjectTest.StringComparedByLength::::compareTo(com.google.common.truth.ComparableSubjectTest.StringComparedByLength)","108":"ComparableSubjectTest.StringComparedByLength::::compareTo(com.google.common.truth.ComparableSubjectTest.StringComparedByLength)","109":"ComparableSubjectTest.StringComparedByLength::::compareTo(com.google.common.truth.ComparableSubjectTest.StringComparedByLength)","110":"ComparableSubjectTest.StringComparedByLength::::compareTo(com.google.common.truth.ComparableSubjectTest.StringComparedByLength)","111":"ComparableSubjectTest.StringComparedByLength::::compareTo(com.google.common.truth.ComparableSubjectTest.StringComparedByLength)","112":"ComparableSubjectTest.StringComparedByLength::::compareTo(com.google.common.truth.ComparableSubjectTest.StringComparedByLength)","113":"ComparableSubjectTest.StringComparedByLength::::compareTo(com.google.common.truth.ComparableSubjectTest.StringComparedByLength)","114":"ComparableSubjectTest.StringComparedByLength::::compareTo(com.google.common.truth.ComparableSubjectTest.StringComparedByLength)","116":"ComparableSubjectTest.StringComparedByLength::::toString()","117":"ComparableSubjectTest.StringComparedByLength::::toString()","118":"ComparableSubjectTest.StringComparedByLength::::toString()","119":"ComparableSubjectTest.StringComparedByLength::::toString()","122":"ComparableSubjectTest::::isGreaterThan_failsEqual()","123":"ComparableSubjectTest::::isGreaterThan_failsEqual()","124":"ComparableSubjectTest::::isGreaterThan_failsEqual()","125":"ComparableSubjectTest::::isGreaterThan_failsEqual()","126":"ComparableSubjectTest::::isGreaterThan_failsEqual()","127":"ComparableSubjectTest::::isGreaterThan_failsEqual()","128":"ComparableSubjectTest::::isGreaterThan_failsEqual()","130":"ComparableSubjectTest::::isGreaterThan_failsSmaller()","131":"ComparableSubjectTest::::isGreaterThan_failsSmaller()","132":"ComparableSubjectTest::::isGreaterThan_failsSmaller()","133":"ComparableSubjectTest::::isGreaterThan_failsSmaller()","134":"ComparableSubjectTest::::isGreaterThan_failsSmaller()","136":"ComparableSubjectTest::::isLessThan_failsEqual()","137":"ComparableSubjectTest::::isLessThan_failsEqual()","138":"ComparableSubjectTest::::isLessThan_failsEqual()","139":"ComparableSubjectTest::::isLessThan_failsEqual()","140":"ComparableSubjectTest::::isLessThan_failsEqual()","141":"ComparableSubjectTest::::isLessThan_failsEqual()","142":"ComparableSubjectTest::::isLessThan_failsEqual()","144":"ComparableSubjectTest::::isLessThan_failsGreater()","145":"ComparableSubjectTest::::isLessThan_failsGreater()","146":"ComparableSubjectTest::::isLessThan_failsGreater()","147":"ComparableSubjectTest::::isLessThan_failsGreater()","148":"ComparableSubjectTest::::isLessThan_failsGreater()","150":"ComparableSubjectTest::::isAtMost()","151":"ComparableSubjectTest::::isAtMost()","152":"ComparableSubjectTest::::isAtMost()","153":"ComparableSubjectTest::::isAtMost()","154":"ComparableSubjectTest::::isAtMost()","155":"ComparableSubjectTest::::isAtMost()","156":"ComparableSubjectTest::::isAtMost()","157":"ComparableSubjectTest::::isAtMost()","159":"ComparableSubjectTest::::isAtLeast()","160":"ComparableSubjectTest::::isAtLeast()","161":"ComparableSubjectTest::::isAtLeast()","162":"ComparableSubjectTest::::isAtLeast()","163":"ComparableSubjectTest::::isAtLeast()","164":"ComparableSubjectTest::::isAtLeast()","165":"ComparableSubjectTest::::isAtLeast()","166":"ComparableSubjectTest::::isAtLeast()","170":"ComparableSubjectTest::::longs()","171":"ComparableSubjectTest::::longs()","172":"ComparableSubjectTest::::longs()","173":"ComparableSubjectTest::::longs()","174":"ComparableSubjectTest::::longs()","175":"ComparableSubjectTest::::longs()","176":"ComparableSubjectTest::::longs()","177":"ComparableSubjectTest::::longs()","178":"ComparableSubjectTest::::longs()","179":"ComparableSubjectTest::::longs()","180":"ComparableSubjectTest::::longs()","181":"ComparableSubjectTest::::longs()","182":"ComparableSubjectTest::::longs()","183":"ComparableSubjectTest::::longs()","185":"ComparableSubjectTest::::strings()","186":"ComparableSubjectTest::::strings()","187":"ComparableSubjectTest::::strings()","188":"ComparableSubjectTest::::strings()","189":"ComparableSubjectTest::::strings()","190":"ComparableSubjectTest::::strings()","191":"ComparableSubjectTest::::strings()","192":"ComparableSubjectTest::::strings()","193":"ComparableSubjectTest::::strings()","194":"ComparableSubjectTest::::strings()","195":"ComparableSubjectTest::::strings()","196":"ComparableSubjectTest::::strings()","197":"ComparableSubjectTest::::strings()","198":"ComparableSubjectTest::::strings()","200":"ComparableSubjectTest::::comparableType()","201":"ComparableSubjectTest::::comparableType()","202":"ComparableSubjectTest::::comparableType()","203":"ComparableSubjectTest::::comparableType()","204":"ComparableSubjectTest::::comparableType()","206":"ComparableSubjectTest::::namedComparableType()","207":"ComparableSubjectTest::::namedComparableType()","208":"ComparableSubjectTest::::namedComparableType()","209":"ComparableSubjectTest::::namedComparableType()","218":"ComparableSubjectTest.ComparableType::::compareTo(com.google.common.truth.ComparableSubjectTest.ComparableType)","219":"ComparableSubjectTest.ComparableType::::compareTo(com.google.common.truth.ComparableSubjectTest.ComparableType)","220":"ComparableSubjectTest.ComparableType::::compareTo(com.google.common.truth.ComparableSubjectTest.ComparableType)","221":"ComparableSubjectTest.ComparableType::::compareTo(com.google.common.truth.ComparableSubjectTest.ComparableType)","224":"ComparableSubjectTest::::rawComparableType()","225":"ComparableSubjectTest::::rawComparableType()","226":"ComparableSubjectTest::::rawComparableType()","227":"ComparableSubjectTest::::rawComparableType()","237":"ComparableSubjectTest.RawComparableType::::compareTo(java.lang.Object)","238":"ComparableSubjectTest.RawComparableType::::compareTo(java.lang.Object)","239":"ComparableSubjectTest.RawComparableType::::compareTo(java.lang.Object)","240":"ComparableSubjectTest.RawComparableType::::compareTo(java.lang.Object)","242":"ComparableSubjectTest.RawComparableType::::toString()","243":"ComparableSubjectTest.RawComparableType::::toString()","244":"ComparableSubjectTest.RawComparableType::::toString()","245":"ComparableSubjectTest.RawComparableType::::toString()","248":"ComparableSubjectTest::::expectFailureWhenTestingThat(T)","249":"ComparableSubjectTest::::expectFailureWhenTestingThat(T)","250":"ComparableSubjectTest::::expectFailureWhenTestingThat(T)","251":"ComparableSubjectTest::::expectFailureWhenTestingThat(T)"},"tests":[{"test_lines":[37,66],"covered_lines":[38,39,40],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[68,77],"covered_lines":[38,39,40,44,45,47],"label":"<<UNRECOGNISED_METHOD>>"},{"test_lines":[79,88],"covered_lines":[38,39,40,51,52,54],"label":"<<UNRECOGNISED_METHOD>>"},{"test_lines":[90,98],"covered_lines":[38,39,40,65,66,68],"label":"ComparableSubject::::isEquivalentAccordingToCompareTo(T)"},{"test_lines":[122,128],"covered_lines":[38,39,40,78,79,81],"label":"ComparableSubject::::isGreaterThan(T)"},{"test_lines":[130,134],"covered_lines":[38,39,40,78,79,81],"label":"ComparableSubject::::isGreaterThan(T)"},{"test_lines":[136,142],"covered_lines":[38,39,40,91,92,94],"label":"ComparableSubject::::isLessThan(T)"},{"test_lines":[144,148],"covered_lines":[38,39,40,91,92,94],"label":"ComparableSubject::::isLessThan(T)"},{"test_lines":[150,157],"covered_lines":[38,39,40,104,105,107],"label":"ComparableSubject::::isAtMost(T)"},{"test_lines":[159,166],"covered_lines":[38,39,40,117,118,120],"label":"ComparableSubject::::isAtLeast(T)"},{"test_lines":[170,183],"covered_lines":[38,39,40,44,47,51,54,78,81,91,94,104,107,117,120],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[185,198],"covered_lines":[38,39,40,44,47,51,54,78,81,91,94,104,107,117,120],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[200,204],"covered_lines":[38,39,40,78,81,91,94],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[206,209],"covered_lines":[38,39,40,91,94],"label":"ComparableSubject::::isLessThan(T)"},{"test_lines":[224,227],"covered_lines":[38,39,40,91,94],"label":"ComparableSubject::::isLessThan(T)"}]},"/bernard/dataset_construction/prep/repos/truth/core/src/main/java/com/google/common/truth/BooleanSubject.java":{"class_content":["/*\n"," * Copyright (c) 2011 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.truth.Fact.simpleFact;\n","\n","import org.checkerframework.checker.nullness.qual.Nullable;\n","\n","/**\n"," * Propositions for boolean subjects.\n"," *\n"," * @author Christian Gruber (cgruber@israfil.net)\n"," */\n","public final class BooleanSubject extends Subject {\n","  private final @Nullable Boolean actual;\n","\n","  BooleanSubject(FailureMetadata metadata, @Nullable Boolean actual) {\n","    super(metadata, actual);\n","    this.actual = actual;\n","  }\n","\n","  /** Fails if the subject is false or {@code null}. */\n","  public void isTrue() {\n","    if (actual == null) {\n","      isEqualTo(true); // fails\n","    } else if (!actual) {\n","      failWithoutActual(simpleFact(\"expected to be true\"));\n","    }\n","  }\n","\n","  /** Fails if the subject is true or {@code null}. */\n","  public void isFalse() {\n","    if (actual == null) {\n","      isEqualTo(false); // fails\n","    } else if (actual) {\n","      failWithoutActual(simpleFact(\"expected to be false\"));\n","    }\n","  }\n","}\n"],"test_content":["/*\n"," * Copyright (c) 2011 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.truth.Truth.assertThat;\n","\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import org.junit.runners.JUnit4;\n","\n","/**\n"," * Tests for Boolean Subjects.\n"," *\n"," * @author Christian Gruber (cgruber@israfil.net)\n"," */\n","@RunWith(JUnit4.class)\n","public class BooleanSubjectTest extends BaseSubjectTestCase {\n","\n","  @Test\n","  public void isTrue() {\n","    assertThat(true).isTrue();\n","  }\n","\n","  @Test\n","  public void nullIsTrueFailing() {\n","    expectFailureWhenTestingThat(null).isTrue();\n","    assertFailureKeys(\"expected\", \"but was\");\n","    assertFailureValue(\"expected\", \"true\");\n","    assertFailureValue(\"but was\", \"null\");\n","  }\n","\n","  @Test\n","  public void nullIsFalseFailing() {\n","    expectFailureWhenTestingThat(null).isFalse();\n","    assertFailureKeys(\"expected\", \"but was\");\n","    assertFailureValue(\"expected\", \"false\");\n","    assertFailureValue(\"but was\", \"null\");\n","  }\n","\n","  @Test\n","  public void isTrueFailing() {\n","    expectFailureWhenTestingThat(false).isTrue();\n","    assertFailureKeys(\"expected to be true\");\n","  }\n","\n","  @Test\n","  public void isFalse() {\n","    assertThat(false).isFalse();\n","  }\n","\n","  @Test\n","  public void isFalseFailing() {\n","    expectFailureWhenTestingThat(true).isFalse();\n","    assertFailureKeys(\"expected to be false\");\n","  }\n","\n","  private BooleanSubject expectFailureWhenTestingThat(Boolean actual) {\n","    return expectFailure.whenTesting().that(actual);\n","  }\n","}\n"],"method_lines_dic":{"BooleanSubject::::isTrue()":[36,42],"BooleanSubject::::isFalse()":[45,51]},"test_method_lines_dic":{"BooleanSubjectTest::::isTrue()":[32,35],"BooleanSubjectTest::::nullIsTrueFailing()":[37,43],"BooleanSubjectTest::::nullIsFalseFailing()":[45,51],"BooleanSubjectTest::::isTrueFailing()":[53,57],"BooleanSubjectTest::::isFalse()":[59,62],"BooleanSubjectTest::::isFalseFailing()":[64,68],"BooleanSubjectTest::::expectFailureWhenTestingThat(java.lang.Boolean)":[70,72]},"reverse_method_lines_dic":{"36":"BooleanSubject::::isTrue()","37":"BooleanSubject::::isTrue()","38":"BooleanSubject::::isTrue()","39":"BooleanSubject::::isTrue()","40":"BooleanSubject::::isTrue()","41":"BooleanSubject::::isTrue()","42":"BooleanSubject::::isTrue()","45":"BooleanSubject::::isFalse()","46":"BooleanSubject::::isFalse()","47":"BooleanSubject::::isFalse()","48":"BooleanSubject::::isFalse()","49":"BooleanSubject::::isFalse()","50":"BooleanSubject::::isFalse()","51":"BooleanSubject::::isFalse()"},"test_reverse_method_lines_dic":{"32":"BooleanSubjectTest::::isTrue()","33":"BooleanSubjectTest::::isTrue()","34":"BooleanSubjectTest::::isTrue()","35":"BooleanSubjectTest::::isTrue()","37":"BooleanSubjectTest::::nullIsTrueFailing()","38":"BooleanSubjectTest::::nullIsTrueFailing()","39":"BooleanSubjectTest::::nullIsTrueFailing()","40":"BooleanSubjectTest::::nullIsTrueFailing()","41":"BooleanSubjectTest::::nullIsTrueFailing()","42":"BooleanSubjectTest::::nullIsTrueFailing()","43":"BooleanSubjectTest::::nullIsTrueFailing()","45":"BooleanSubjectTest::::nullIsFalseFailing()","46":"BooleanSubjectTest::::nullIsFalseFailing()","47":"BooleanSubjectTest::::nullIsFalseFailing()","48":"BooleanSubjectTest::::nullIsFalseFailing()","49":"BooleanSubjectTest::::nullIsFalseFailing()","50":"BooleanSubjectTest::::nullIsFalseFailing()","51":"BooleanSubjectTest::::nullIsFalseFailing()","53":"BooleanSubjectTest::::isTrueFailing()","54":"BooleanSubjectTest::::isTrueFailing()","55":"BooleanSubjectTest::::isTrueFailing()","56":"BooleanSubjectTest::::isTrueFailing()","57":"BooleanSubjectTest::::isTrueFailing()","59":"BooleanSubjectTest::::isFalse()","60":"BooleanSubjectTest::::isFalse()","61":"BooleanSubjectTest::::isFalse()","62":"BooleanSubjectTest::::isFalse()","64":"BooleanSubjectTest::::isFalseFailing()","65":"BooleanSubjectTest::::isFalseFailing()","66":"BooleanSubjectTest::::isFalseFailing()","67":"BooleanSubjectTest::::isFalseFailing()","68":"BooleanSubjectTest::::isFalseFailing()","70":"BooleanSubjectTest::::expectFailureWhenTestingThat(java.lang.Boolean)","71":"BooleanSubjectTest::::expectFailureWhenTestingThat(java.lang.Boolean)","72":"BooleanSubjectTest::::expectFailureWhenTestingThat(java.lang.Boolean)"},"tests":[{"test_lines":[32,35],"covered_lines":[31,32,33,37,39,42],"label":"BooleanSubject::::isTrue()"},{"test_lines":[37,43],"covered_lines":[31,32,33,37,38,42],"label":"BooleanSubject::::isTrue()"},{"test_lines":[45,51],"covered_lines":[31,32,33,46,47,51],"label":"BooleanSubject::::isFalse()"},{"test_lines":[53,57],"covered_lines":[31,32,33,37,39,40,42],"label":"BooleanSubject::::isTrue()"},{"test_lines":[59,62],"covered_lines":[31,32,33,46,48,51],"label":"BooleanSubject::::isFalse()"},{"test_lines":[64,68],"covered_lines":[31,32,33,46,48,49,51],"label":"BooleanSubject::::isFalse()"}]},"/bernard/dataset_construction/prep/repos/truth/core/src/main/java/com/google/common/truth/PrimitiveShortArraySubject.java":{"class_content":["/*\n"," * Copyright (c) 2015 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.base.Preconditions.checkNotNull;\n","\n","import com.google.common.primitives.Shorts;\n","import org.checkerframework.checker.nullness.qual.Nullable;\n","\n","/**\n"," * A Subject for {@code short[]}.\n"," *\n"," * @author Christian Gruber (cgruber@israfil.net)\n"," */\n","public final class PrimitiveShortArraySubject extends AbstractArraySubject {\n","  private final short @Nullable [] actual;\n","\n","  PrimitiveShortArraySubject(\n","      FailureMetadata metadata, short @Nullable [] o, @Nullable String typeDescription) {\n","    super(metadata, o, typeDescription);\n","    this.actual = o;\n","  }\n","\n","  public IterableSubject asList() {\n","    return checkNoNeedToDisplayBothValues(\"asList()\").that(Shorts.asList(checkNotNull(actual)));\n","  }\n","}\n"],"test_content":["/*\n"," * Copyright (c) 2015 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.truth.Truth.assertThat;\n","\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import org.junit.runners.JUnit4;\n","\n","/**\n"," * Tests for {@link PrimitiveShortArraySubject}.\n"," *\n"," * @author Christian Gruber (cgruber@israfil.net)\n"," */\n","@RunWith(JUnit4.class)\n","public class PrimitiveShortArraySubjectTest extends BaseSubjectTestCase {\n","\n","  @Test\n","  public void isEqualTo() {\n","    assertThat(array(1, 0, 1)).isEqualTo(array(1, 0, 1));\n","  }\n","\n","  @SuppressWarnings(\"TruthSelfEquals\")\n","  @Test\n","  public void isEqualTo_Same() {\n","    short[] same = array(1, 0, 1);\n","    assertThat(same).isEqualTo(same);\n","  }\n","\n","  @Test\n","  public void asList() {\n","    assertThat(array(1, 1, 0)).asList().containsAtLeast((short) 1, (short) 0);\n","  }\n","\n","  @Test\n","  public void asListWithoutCastingFails() {\n","    expectFailureWhenTestingThat(array(1, 1, 0)).asList().containsAtLeast(1, 0);\n","    assertFailureKeys(\n","        \"value of\",\n","        \"missing (2)\",\n","        \"though it did contain (3)\",\n","        \"---\",\n","        \"expected to contain at least\",\n","        \"but was\");\n","  }\n","\n","  @Test\n","  public void isEqualTo_Fail_UnequalOrdering() {\n","    expectFailureWhenTestingThat(array(1, 0, 1)).isEqualTo(array(0, 1, 1));\n","    assertFailureKeys(\"expected\", \"but was\", \"differs at index\");\n","    assertFailureValue(\"expected\", \"[0, 1, 1]\");\n","    assertFailureValue(\"but was\", \"[1, 0, 1]\");\n","    assertFailureValue(\"differs at index\", \"[0]\");\n","  }\n","\n","  @Test\n","  public void isEqualTo_Fail_NotAnArray() {\n","    expectFailureWhenTestingThat(array(1, 0, 1)).isEqualTo(new Object());\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_SameLengths() {\n","    assertThat(array(1, 0)).isNotEqualTo(array(1, 1));\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_DifferentLengths() {\n","    assertThat(array(1, 0)).isNotEqualTo(array(1, 0, 1));\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_DifferentTypes() {\n","    assertThat(array(1, 0)).isNotEqualTo(new Object());\n","  }\n","\n","  @Test\n","  public void isNotEqualTo_FailEquals() {\n","    expectFailureWhenTestingThat(array(1, 0)).isNotEqualTo(array(1, 0));\n","  }\n","\n","  @SuppressWarnings(\"TruthSelfEquals\")\n","  @Test\n","  public void isNotEqualTo_FailSame() {\n","    short[] same = array(1, 0);\n","    expectFailureWhenTestingThat(same).isNotEqualTo(same);\n","  }\n","\n","  private static short[] array(int a, int b, int c) {\n","    return new short[] {(short) a, (short) b, (short) c};\n","  }\n","\n","  private static short[] array(int a, int b) {\n","    return new short[] {(short) a, (short) b};\n","  }\n","\n","  private PrimitiveShortArraySubject expectFailureWhenTestingThat(short[] actual) {\n","    return expectFailure.whenTesting().that(actual);\n","  }\n","}\n"],"method_lines_dic":{"PrimitiveShortArraySubject::::asList()":[37,39]},"test_method_lines_dic":{"PrimitiveShortArraySubjectTest::::isEqualTo()":[32,35],"PrimitiveShortArraySubjectTest::::isEqualTo_Same()":[37,42],"PrimitiveShortArraySubjectTest::::asList()":[44,47],"PrimitiveShortArraySubjectTest::::asListWithoutCastingFails()":[49,59],"PrimitiveShortArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()":[61,68],"PrimitiveShortArraySubjectTest::::isEqualTo_Fail_NotAnArray()":[70,73],"PrimitiveShortArraySubjectTest::::isNotEqualTo_SameLengths()":[75,78],"PrimitiveShortArraySubjectTest::::isNotEqualTo_DifferentLengths()":[80,83],"PrimitiveShortArraySubjectTest::::isNotEqualTo_DifferentTypes()":[85,88],"PrimitiveShortArraySubjectTest::::isNotEqualTo_FailEquals()":[90,93],"PrimitiveShortArraySubjectTest::::isNotEqualTo_FailSame()":[95,100],"PrimitiveShortArraySubjectTest::::array(int,int,int)":[102,104],"PrimitiveShortArraySubjectTest::::array(int,int)":[106,108],"PrimitiveShortArraySubjectTest::::expectFailureWhenTestingThat(short[])":[110,112]},"reverse_method_lines_dic":{"37":"PrimitiveShortArraySubject::::asList()","38":"PrimitiveShortArraySubject::::asList()","39":"PrimitiveShortArraySubject::::asList()"},"test_reverse_method_lines_dic":{"32":"PrimitiveShortArraySubjectTest::::isEqualTo()","33":"PrimitiveShortArraySubjectTest::::isEqualTo()","34":"PrimitiveShortArraySubjectTest::::isEqualTo()","35":"PrimitiveShortArraySubjectTest::::isEqualTo()","37":"PrimitiveShortArraySubjectTest::::isEqualTo_Same()","38":"PrimitiveShortArraySubjectTest::::isEqualTo_Same()","39":"PrimitiveShortArraySubjectTest::::isEqualTo_Same()","40":"PrimitiveShortArraySubjectTest::::isEqualTo_Same()","41":"PrimitiveShortArraySubjectTest::::isEqualTo_Same()","42":"PrimitiveShortArraySubjectTest::::isEqualTo_Same()","44":"PrimitiveShortArraySubjectTest::::asList()","45":"PrimitiveShortArraySubjectTest::::asList()","46":"PrimitiveShortArraySubjectTest::::asList()","47":"PrimitiveShortArraySubjectTest::::asList()","49":"PrimitiveShortArraySubjectTest::::asListWithoutCastingFails()","50":"PrimitiveShortArraySubjectTest::::asListWithoutCastingFails()","51":"PrimitiveShortArraySubjectTest::::asListWithoutCastingFails()","52":"PrimitiveShortArraySubjectTest::::asListWithoutCastingFails()","53":"PrimitiveShortArraySubjectTest::::asListWithoutCastingFails()","54":"PrimitiveShortArraySubjectTest::::asListWithoutCastingFails()","55":"PrimitiveShortArraySubjectTest::::asListWithoutCastingFails()","56":"PrimitiveShortArraySubjectTest::::asListWithoutCastingFails()","57":"PrimitiveShortArraySubjectTest::::asListWithoutCastingFails()","58":"PrimitiveShortArraySubjectTest::::asListWithoutCastingFails()","59":"PrimitiveShortArraySubjectTest::::asListWithoutCastingFails()","61":"PrimitiveShortArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","62":"PrimitiveShortArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","63":"PrimitiveShortArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","64":"PrimitiveShortArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","65":"PrimitiveShortArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","66":"PrimitiveShortArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","67":"PrimitiveShortArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","68":"PrimitiveShortArraySubjectTest::::isEqualTo_Fail_UnequalOrdering()","70":"PrimitiveShortArraySubjectTest::::isEqualTo_Fail_NotAnArray()","71":"PrimitiveShortArraySubjectTest::::isEqualTo_Fail_NotAnArray()","72":"PrimitiveShortArraySubjectTest::::isEqualTo_Fail_NotAnArray()","73":"PrimitiveShortArraySubjectTest::::isEqualTo_Fail_NotAnArray()","75":"PrimitiveShortArraySubjectTest::::isNotEqualTo_SameLengths()","76":"PrimitiveShortArraySubjectTest::::isNotEqualTo_SameLengths()","77":"PrimitiveShortArraySubjectTest::::isNotEqualTo_SameLengths()","78":"PrimitiveShortArraySubjectTest::::isNotEqualTo_SameLengths()","80":"PrimitiveShortArraySubjectTest::::isNotEqualTo_DifferentLengths()","81":"PrimitiveShortArraySubjectTest::::isNotEqualTo_DifferentLengths()","82":"PrimitiveShortArraySubjectTest::::isNotEqualTo_DifferentLengths()","83":"PrimitiveShortArraySubjectTest::::isNotEqualTo_DifferentLengths()","85":"PrimitiveShortArraySubjectTest::::isNotEqualTo_DifferentTypes()","86":"PrimitiveShortArraySubjectTest::::isNotEqualTo_DifferentTypes()","87":"PrimitiveShortArraySubjectTest::::isNotEqualTo_DifferentTypes()","88":"PrimitiveShortArraySubjectTest::::isNotEqualTo_DifferentTypes()","90":"PrimitiveShortArraySubjectTest::::isNotEqualTo_FailEquals()","91":"PrimitiveShortArraySubjectTest::::isNotEqualTo_FailEquals()","92":"PrimitiveShortArraySubjectTest::::isNotEqualTo_FailEquals()","93":"PrimitiveShortArraySubjectTest::::isNotEqualTo_FailEquals()","95":"PrimitiveShortArraySubjectTest::::isNotEqualTo_FailSame()","96":"PrimitiveShortArraySubjectTest::::isNotEqualTo_FailSame()","97":"PrimitiveShortArraySubjectTest::::isNotEqualTo_FailSame()","98":"PrimitiveShortArraySubjectTest::::isNotEqualTo_FailSame()","99":"PrimitiveShortArraySubjectTest::::isNotEqualTo_FailSame()","100":"PrimitiveShortArraySubjectTest::::isNotEqualTo_FailSame()","102":"PrimitiveShortArraySubjectTest::::array(int,int,int)","103":"PrimitiveShortArraySubjectTest::::array(int,int,int)","104":"PrimitiveShortArraySubjectTest::::array(int,int,int)","106":"PrimitiveShortArraySubjectTest::::array(int,int)","107":"PrimitiveShortArraySubjectTest::::array(int,int)","108":"PrimitiveShortArraySubjectTest::::array(int,int)","110":"PrimitiveShortArraySubjectTest::::expectFailureWhenTestingThat(short[])","111":"PrimitiveShortArraySubjectTest::::expectFailureWhenTestingThat(short[])","112":"PrimitiveShortArraySubjectTest::::expectFailureWhenTestingThat(short[])"},"tests":[{"test_lines":[32,35],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[37,42],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[44,47],"covered_lines":[33,34,35,38],"label":"PrimitiveShortArraySubject::::asList()"},{"test_lines":[49,59],"covered_lines":[33,34,35,38],"label":"PrimitiveShortArraySubject::::asList()"},{"test_lines":[61,68],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[70,73],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[75,78],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[80,83],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[85,88],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[90,93],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[95,100],"covered_lines":[33,34,35],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/truth/core/src/main/java/com/google/common/truth/ClassSubject.java":{"class_content":["/*\n"," * Copyright (c) 2011 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.base.Preconditions.checkNotNull;\n","\n","import com.google.common.annotations.GwtIncompatible;\n","import org.checkerframework.checker.nullness.qual.Nullable;\n","\n","/**\n"," * Propositions for {@link Class} subjects.\n"," *\n"," * @author Kurt Alfred Kluever\n"," */\n","@GwtIncompatible(\"reflection\")\n","@J2ktIncompatible\n","public final class ClassSubject extends Subject {\n","  private final @Nullable Class<?> actual;\n","\n","  ClassSubject(FailureMetadata metadata, @Nullable Class<?> o) {\n","    super(metadata, o);\n","    this.actual = o;\n","  }\n","\n","  /**\n","   * Fails if this class or interface is not the same as or a subclass or subinterface of, the given\n","   * class or interface.\n","   */\n","  public void isAssignableTo(Class<?> clazz) {\n","    if (!clazz.isAssignableFrom(checkNotNull(actual))) {\n","      failWithActual(\"expected to be assignable to\", clazz.getName());\n","    }\n","  }\n","}\n"],"test_content":["/*\n"," * Copyright (c) 2011 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.truth.Truth.assertThat;\n","\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import org.junit.runners.JUnit4;\n","\n","/**\n"," * Tests for introspective Subject behaviour.\n"," *\n"," * @author Christian Gruber (cgruber@israfil.net)\n"," */\n","@RunWith(JUnit4.class)\n","public class ClassSubjectTest extends BaseSubjectTestCase {\n","  @Test\n","  public void testIsAssignableTo_same() {\n","    assertThat(String.class).isAssignableTo(String.class);\n","  }\n","\n","  @Test\n","  public void testIsAssignableTo_parent() {\n","    assertThat(String.class).isAssignableTo(Object.class);\n","    assertThat(NullPointerException.class).isAssignableTo(Exception.class);\n","  }\n","\n","  @Test\n","  public void testIsAssignableTo_reversed() {\n","    expectFailureWhenTestingThat(Object.class).isAssignableTo(String.class);\n","    assertFailureValue(\"expected to be assignable to\", \"java.lang.String\");\n","  }\n","\n","  @Test\n","  public void testIsAssignableTo_differentTypes() {\n","    expectFailureWhenTestingThat(String.class).isAssignableTo(Exception.class);\n","    assertFailureValue(\"expected to be assignable to\", \"java.lang.Exception\");\n","  }\n","\n","  private ClassSubject expectFailureWhenTestingThat(Class<?> actual) {\n","    return expectFailure.whenTesting().that(actual);\n","  }\n","}\n"],"method_lines_dic":{"ClassSubject::::isAssignableTo(java.lang.Class<?>)":[42,46]},"test_method_lines_dic":{"ClassSubjectTest::::testIsAssignableTo_same()":[31,34],"ClassSubjectTest::::testIsAssignableTo_parent()":[36,40],"ClassSubjectTest::::testIsAssignableTo_reversed()":[42,46],"ClassSubjectTest::::testIsAssignableTo_differentTypes()":[48,52],"ClassSubjectTest::::expectFailureWhenTestingThat(java.lang.Class<?>)":[54,56]},"reverse_method_lines_dic":{"42":"ClassSubject::::isAssignableTo(java.lang.Class<?>)","43":"ClassSubject::::isAssignableTo(java.lang.Class<?>)","44":"ClassSubject::::isAssignableTo(java.lang.Class<?>)","45":"ClassSubject::::isAssignableTo(java.lang.Class<?>)","46":"ClassSubject::::isAssignableTo(java.lang.Class<?>)"},"test_reverse_method_lines_dic":{"31":"ClassSubjectTest::::testIsAssignableTo_same()","32":"ClassSubjectTest::::testIsAssignableTo_same()","33":"ClassSubjectTest::::testIsAssignableTo_same()","34":"ClassSubjectTest::::testIsAssignableTo_same()","36":"ClassSubjectTest::::testIsAssignableTo_parent()","37":"ClassSubjectTest::::testIsAssignableTo_parent()","38":"ClassSubjectTest::::testIsAssignableTo_parent()","39":"ClassSubjectTest::::testIsAssignableTo_parent()","40":"ClassSubjectTest::::testIsAssignableTo_parent()","42":"ClassSubjectTest::::testIsAssignableTo_reversed()","43":"ClassSubjectTest::::testIsAssignableTo_reversed()","44":"ClassSubjectTest::::testIsAssignableTo_reversed()","45":"ClassSubjectTest::::testIsAssignableTo_reversed()","46":"ClassSubjectTest::::testIsAssignableTo_reversed()","48":"ClassSubjectTest::::testIsAssignableTo_differentTypes()","49":"ClassSubjectTest::::testIsAssignableTo_differentTypes()","50":"ClassSubjectTest::::testIsAssignableTo_differentTypes()","51":"ClassSubjectTest::::testIsAssignableTo_differentTypes()","52":"ClassSubjectTest::::testIsAssignableTo_differentTypes()","54":"ClassSubjectTest::::expectFailureWhenTestingThat(java.lang.Class<?>)","55":"ClassSubjectTest::::expectFailureWhenTestingThat(java.lang.Class<?>)","56":"ClassSubjectTest::::expectFailureWhenTestingThat(java.lang.Class<?>)"},"tests":[{"test_lines":[31,34],"covered_lines":[34,35,36,43,46],"label":"ClassSubject::::isAssignableTo(java.lang.Class<?>)"},{"test_lines":[36,40],"covered_lines":[34,35,36,43,46],"label":"ClassSubject::::isAssignableTo(java.lang.Class<?>)"},{"test_lines":[42,46],"covered_lines":[34,35,36,43,44,46],"label":"ClassSubject::::isAssignableTo(java.lang.Class<?>)"},{"test_lines":[48,52],"covered_lines":[34,35,36,43,44,46],"label":"ClassSubject::::isAssignableTo(java.lang.Class<?>)"}]},"/bernard/dataset_construction/prep/repos/truth/core/src/main/java/com/google/common/truth/MathUtil.java":{"class_content":["/*\n"," * Copyright (c) 2014 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","\n","package com.google.common.truth;\n","\n","import static java.lang.Math.subtractExact;\n","\n","import com.google.common.primitives.Doubles;\n","\n","/** Math utilities to be shared by numeric subjects. */\n","final class MathUtil {\n","  private MathUtil() {}\n","\n","  /**\n","   * Returns true iff {@code left} and {@code right} are values within {@code tolerance} of each\n","   * other.\n","   */\n","  /* package */ static boolean equalWithinTolerance(long left, long right, long tolerance) {\n","    try {\n","      // subtractExact is always desugared.\n","      @SuppressWarnings(\"Java7ApiChecker\")\n","      long absDiff = Math.abs(subtractExact(left, right));\n","      return 0 <= absDiff && absDiff <= Math.abs(tolerance);\n","    } catch (ArithmeticException e) {\n","      // The numbers are so far apart their difference isn't even a long.\n","      return false;\n","    }\n","  }\n","\n","  /**\n","   * Returns true iff {@code left} and {@code right} are values within {@code tolerance} of each\n","   * other.\n","   */\n","  /* package */ static boolean equalWithinTolerance(int left, int right, int tolerance) {\n","    try {\n","      // subtractExact is always desugared.\n","      @SuppressWarnings(\"Java7ApiChecker\")\n","      int absDiff = Math.abs(subtractExact(left, right));\n","      return 0 <= absDiff && absDiff <= Math.abs(tolerance);\n","    } catch (ArithmeticException e) {\n","      // The numbers are so far apart their difference isn't even a int.\n","      return false;\n","    }\n","  }\n","\n","  /**\n","   * Returns true iff {@code left} and {@code right} are finite values within {@code tolerance} of\n","   * each other. Note that both this method and {@link #notEqualWithinTolerance} returns false if\n","   * either {@code left} or {@code right} is infinite or NaN.\n","   */\n","  public static boolean equalWithinTolerance(double left, double right, double tolerance) {\n","    return Math.abs(left - right) <= Math.abs(tolerance);\n","  }\n","\n","  /**\n","   * Returns true iff {@code left} and {@code right} are finite values within {@code tolerance} of\n","   * each other. Note that both this method and {@link #notEqualWithinTolerance} returns false if\n","   * either {@code left} or {@code right} is infinite or NaN.\n","   */\n","  public static boolean equalWithinTolerance(float left, float right, float tolerance) {\n","    return equalWithinTolerance((double) left, (double) right, (double) tolerance);\n","  }\n","\n","  /**\n","   * Returns true iff {@code left} and {@code right} are finite values not within {@code tolerance}\n","   * of each other. Note that both this method and {@link #equalWithinTolerance} returns false if\n","   * either {@code left} or {@code right} is infinite or NaN.\n","   */\n","  public static boolean notEqualWithinTolerance(double left, double right, double tolerance) {\n","    if (Doubles.isFinite(left) && Doubles.isFinite(right)) {\n","      return Math.abs(left - right) > Math.abs(tolerance);\n","    } else {\n","      return false;\n","    }\n","  }\n","\n","  /**\n","   * Returns true iff {@code left} and {@code right} are finite values not within {@code tolerance}\n","   * of each other. Note that both this method and {@link #equalWithinTolerance} returns false if\n","   * either {@code left} or {@code right} is infinite or NaN.\n","   */\n","  public static boolean notEqualWithinTolerance(float left, float right, float tolerance) {\n","    return notEqualWithinTolerance((double) left, (double) right, (double) tolerance);\n","  }\n","}\n"],"test_content":["/*\n"," * Copyright (c) 2014 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","\n","package com.google.common.truth;\n","\n","import static com.google.common.truth.MathUtil.equalWithinTolerance;\n","import static com.google.common.truth.MathUtil.notEqualWithinTolerance;\n","import static com.google.common.truth.Truth.assertThat;\n","\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import org.junit.runners.JUnit4;\n","\n","/**\n"," * Tests for {@link MathUtil} used by numeric subjects.\n"," *\n"," * @author Christian Gruber (cgruber@israfil.net)\n"," */\n","@RunWith(JUnit4.class)\n","public class MathUtilTest {\n","  @Test\n","  public void floatEquals() {\n","    assertThat(equalWithinTolerance(1.3f, 1.3f, 0.00000000000001f)).isTrue();\n","    assertThat(equalWithinTolerance(1.3f, 1.3f, 0.0f)).isTrue();\n","    assertThat(equalWithinTolerance(0.0f, 1.0f + 2.0f - 3.0f, 0.00000000000000000000000000000001f))\n","        .isTrue();\n","    assertThat(equalWithinTolerance(1.3f, 1.303f, 0.004f)).isTrue();\n","    assertThat(equalWithinTolerance(1.3f, 1.303f, 0.002f)).isFalse();\n","    assertThat(equalWithinTolerance(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY, 0.01f))\n","        .isFalse();\n","    assertThat(equalWithinTolerance(Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY, 0.01f))\n","        .isFalse();\n","    assertThat(equalWithinTolerance(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 0.01f))\n","        .isFalse();\n","    assertThat(equalWithinTolerance(Float.NaN, Float.NaN, 0.01f)).isFalse();\n","  }\n","\n","  @Test\n","  public void doubleEquals() {\n","    assertThat(equalWithinTolerance(1.3d, 1.3d, 0.00000000000001d)).isTrue();\n","    assertThat(equalWithinTolerance(1.3d, 1.3d, 0.0d)).isTrue();\n","    assertThat(equalWithinTolerance(0.0d, 1.0d + 2.0d - 3.0d, 0.00000000000000000000000000000001d))\n","        .isTrue();\n","    assertThat(equalWithinTolerance(1.3d, 1.303d, 0.004d)).isTrue();\n","    assertThat(equalWithinTolerance(1.3d, 1.303d, 0.002d)).isFalse();\n","    assertThat(equalWithinTolerance(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 0.01d))\n","        .isFalse();\n","    assertThat(equalWithinTolerance(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, 0.01d))\n","        .isFalse();\n","    assertThat(equalWithinTolerance(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 0.01d))\n","        .isFalse();\n","    assertThat(equalWithinTolerance(Double.NaN, Double.NaN, 0.01d)).isFalse();\n","  }\n","\n","  @Test\n","  public void floatNotEquals() {\n","    assertThat(notEqualWithinTolerance(1.3f, 1.3f, 0.00000000000001f)).isFalse();\n","    assertThat(notEqualWithinTolerance(1.3f, 1.3f, 0.0f)).isFalse();\n","    assertThat(\n","            notEqualWithinTolerance(0.0f, 1.0f + 2.0f - 3.0f, 0.00000000000000000000000000000001f))\n","        .isFalse();\n","    assertThat(notEqualWithinTolerance(1.3f, 1.303f, 0.004f)).isFalse();\n","    assertThat(notEqualWithinTolerance(1.3f, 1.303f, 0.002f)).isTrue();\n","    assertThat(notEqualWithinTolerance(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY, 0.01f))\n","        .isFalse();\n","    assertThat(notEqualWithinTolerance(Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY, 0.01f))\n","        .isFalse();\n","    assertThat(notEqualWithinTolerance(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 0.01f))\n","        .isFalse();\n","    assertThat(notEqualWithinTolerance(Float.NaN, Float.NaN, 0.01f)).isFalse();\n","  }\n","\n","  @Test\n","  public void doubleNotEquals() {\n","    assertThat(notEqualWithinTolerance(1.3d, 1.3d, 0.00000000000001d)).isFalse();\n","    assertThat(notEqualWithinTolerance(1.3d, 1.3d, 0.0d)).isFalse();\n","    assertThat(\n","            notEqualWithinTolerance(0.0d, 1.0d + 2.0d - 3.0d, 0.00000000000000000000000000000001d))\n","        .isFalse();\n","    assertThat(notEqualWithinTolerance(1.3d, 1.303d, 0.004d)).isFalse();\n","    assertThat(notEqualWithinTolerance(1.3d, 1.303d, 0.002d)).isTrue();\n","    assertThat(notEqualWithinTolerance(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 0.01d))\n","        .isFalse();\n","    assertThat(notEqualWithinTolerance(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, 0.01d))\n","        .isFalse();\n","    assertThat(notEqualWithinTolerance(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 0.01d))\n","        .isFalse();\n","    assertThat(notEqualWithinTolerance(Double.NaN, Double.NaN, 0.01d)).isFalse();\n","  }\n","\n","  @Test\n","  public void equalsDifferentTypes() {\n","    assertThat(equalWithinTolerance(1.3d, 1.3f, 0.00000000000001d)).isFalse();\n","    assertThat(equalWithinTolerance(1.3f, 1.3d, 0.00000000000001f)).isFalse();\n","  }\n","\n","  // TODO(cgruber): More complicated ways to break float/double casting to make sure.\n","\n","}\n"],"method_lines_dic":{"MathUtil::::equalWithinTolerance(long,long,long)":[31,41],"MathUtil::::equalWithinTolerance(int,int,int)":[47,57],"MathUtil::::equalWithinTolerance(double,double,double)":[64,66],"MathUtil::::equalWithinTolerance(float,float,float)":[73,75],"MathUtil::::notEqualWithinTolerance(double,double,double)":[82,88],"MathUtil::::notEqualWithinTolerance(float,float,float)":[95,97]},"test_method_lines_dic":{"MathUtilTest::::floatEquals()":[34,49],"MathUtilTest::::doubleEquals()":[51,66],"MathUtilTest::::floatNotEquals()":[68,84],"MathUtilTest::::doubleNotEquals()":[86,102],"MathUtilTest::::equalsDifferentTypes()":[104,108]},"reverse_method_lines_dic":{"31":"MathUtil::::equalWithinTolerance(long,long,long)","32":"MathUtil::::equalWithinTolerance(long,long,long)","33":"MathUtil::::equalWithinTolerance(long,long,long)","34":"MathUtil::::equalWithinTolerance(long,long,long)","35":"MathUtil::::equalWithinTolerance(long,long,long)","36":"MathUtil::::equalWithinTolerance(long,long,long)","37":"MathUtil::::equalWithinTolerance(long,long,long)","38":"MathUtil::::equalWithinTolerance(long,long,long)","39":"MathUtil::::equalWithinTolerance(long,long,long)","40":"MathUtil::::equalWithinTolerance(long,long,long)","41":"MathUtil::::equalWithinTolerance(long,long,long)","47":"MathUtil::::equalWithinTolerance(int,int,int)","48":"MathUtil::::equalWithinTolerance(int,int,int)","49":"MathUtil::::equalWithinTolerance(int,int,int)","50":"MathUtil::::equalWithinTolerance(int,int,int)","51":"MathUtil::::equalWithinTolerance(int,int,int)","52":"MathUtil::::equalWithinTolerance(int,int,int)","53":"MathUtil::::equalWithinTolerance(int,int,int)","54":"MathUtil::::equalWithinTolerance(int,int,int)","55":"MathUtil::::equalWithinTolerance(int,int,int)","56":"MathUtil::::equalWithinTolerance(int,int,int)","57":"MathUtil::::equalWithinTolerance(int,int,int)","64":"MathUtil::::equalWithinTolerance(double,double,double)","65":"MathUtil::::equalWithinTolerance(double,double,double)","66":"MathUtil::::equalWithinTolerance(double,double,double)","73":"MathUtil::::equalWithinTolerance(float,float,float)","74":"MathUtil::::equalWithinTolerance(float,float,float)","75":"MathUtil::::equalWithinTolerance(float,float,float)","82":"MathUtil::::notEqualWithinTolerance(double,double,double)","83":"MathUtil::::notEqualWithinTolerance(double,double,double)","84":"MathUtil::::notEqualWithinTolerance(double,double,double)","85":"MathUtil::::notEqualWithinTolerance(double,double,double)","86":"MathUtil::::notEqualWithinTolerance(double,double,double)","87":"MathUtil::::notEqualWithinTolerance(double,double,double)","88":"MathUtil::::notEqualWithinTolerance(double,double,double)","95":"MathUtil::::notEqualWithinTolerance(float,float,float)","96":"MathUtil::::notEqualWithinTolerance(float,float,float)","97":"MathUtil::::notEqualWithinTolerance(float,float,float)"},"test_reverse_method_lines_dic":{"34":"MathUtilTest::::floatEquals()","35":"MathUtilTest::::floatEquals()","36":"MathUtilTest::::floatEquals()","37":"MathUtilTest::::floatEquals()","38":"MathUtilTest::::floatEquals()","39":"MathUtilTest::::floatEquals()","40":"MathUtilTest::::floatEquals()","41":"MathUtilTest::::floatEquals()","42":"MathUtilTest::::floatEquals()","43":"MathUtilTest::::floatEquals()","44":"MathUtilTest::::floatEquals()","45":"MathUtilTest::::floatEquals()","46":"MathUtilTest::::floatEquals()","47":"MathUtilTest::::floatEquals()","48":"MathUtilTest::::floatEquals()","49":"MathUtilTest::::floatEquals()","51":"MathUtilTest::::doubleEquals()","52":"MathUtilTest::::doubleEquals()","53":"MathUtilTest::::doubleEquals()","54":"MathUtilTest::::doubleEquals()","55":"MathUtilTest::::doubleEquals()","56":"MathUtilTest::::doubleEquals()","57":"MathUtilTest::::doubleEquals()","58":"MathUtilTest::::doubleEquals()","59":"MathUtilTest::::doubleEquals()","60":"MathUtilTest::::doubleEquals()","61":"MathUtilTest::::doubleEquals()","62":"MathUtilTest::::doubleEquals()","63":"MathUtilTest::::doubleEquals()","64":"MathUtilTest::::doubleEquals()","65":"MathUtilTest::::doubleEquals()","66":"MathUtilTest::::doubleEquals()","68":"MathUtilTest::::floatNotEquals()","69":"MathUtilTest::::floatNotEquals()","70":"MathUtilTest::::floatNotEquals()","71":"MathUtilTest::::floatNotEquals()","72":"MathUtilTest::::floatNotEquals()","73":"MathUtilTest::::floatNotEquals()","74":"MathUtilTest::::floatNotEquals()","75":"MathUtilTest::::floatNotEquals()","76":"MathUtilTest::::floatNotEquals()","77":"MathUtilTest::::floatNotEquals()","78":"MathUtilTest::::floatNotEquals()","79":"MathUtilTest::::floatNotEquals()","80":"MathUtilTest::::floatNotEquals()","81":"MathUtilTest::::floatNotEquals()","82":"MathUtilTest::::floatNotEquals()","83":"MathUtilTest::::floatNotEquals()","84":"MathUtilTest::::floatNotEquals()","86":"MathUtilTest::::doubleNotEquals()","87":"MathUtilTest::::doubleNotEquals()","88":"MathUtilTest::::doubleNotEquals()","89":"MathUtilTest::::doubleNotEquals()","90":"MathUtilTest::::doubleNotEquals()","91":"MathUtilTest::::doubleNotEquals()","92":"MathUtilTest::::doubleNotEquals()","93":"MathUtilTest::::doubleNotEquals()","94":"MathUtilTest::::doubleNotEquals()","95":"MathUtilTest::::doubleNotEquals()","96":"MathUtilTest::::doubleNotEquals()","97":"MathUtilTest::::doubleNotEquals()","98":"MathUtilTest::::doubleNotEquals()","99":"MathUtilTest::::doubleNotEquals()","100":"MathUtilTest::::doubleNotEquals()","101":"MathUtilTest::::doubleNotEquals()","102":"MathUtilTest::::doubleNotEquals()","104":"MathUtilTest::::equalsDifferentTypes()","105":"MathUtilTest::::equalsDifferentTypes()","106":"MathUtilTest::::equalsDifferentTypes()","107":"MathUtilTest::::equalsDifferentTypes()","108":"MathUtilTest::::equalsDifferentTypes()"},"tests":[{"test_lines":[34,49],"covered_lines":[65,74],"label":"MathUtil::::equalWithinTolerance(float,float,float)"},{"test_lines":[51,66],"covered_lines":[65],"label":"MathUtil::::equalWithinTolerance(double,double,double)"},{"test_lines":[68,84],"covered_lines":[83,84,86,96],"label":"MathUtil::::notEqualWithinTolerance(float,float,float)"},{"test_lines":[86,102],"covered_lines":[83,84,86],"label":"MathUtil::::notEqualWithinTolerance(double,double,double)"},{"test_lines":[104,108],"covered_lines":[65],"label":"MathUtil::::equalWithinTolerance(double,double,double)"}]},"/bernard/dataset_construction/prep/repos/truth/core/src/main/java/com/google/common/truth/ThrowableSubject.java":{"class_content":["/*\n"," * Copyright (c) 2014 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.base.Preconditions.checkNotNull;\n","\n","import org.checkerframework.checker.nullness.qual.Nullable;\n","\n","/**\n"," * Propositions for {@link Throwable} subjects.\n"," *\n"," * @author Kurt Alfred Kluever\n"," */\n","public class ThrowableSubject extends Subject {\n","  private final @Nullable Throwable actual;\n","\n","  /**\n","   * Constructor for use by subclasses. If you want to create an instance of this class itself, call\n","   * {@link Subject#check(String, Object...) check(...)}{@code .that(actual)}.\n","   */\n","  protected ThrowableSubject(FailureMetadata metadata, @Nullable Throwable throwable) {\n","    this(metadata, throwable, null);\n","  }\n","\n","  ThrowableSubject(\n","      FailureMetadata metadata, @Nullable Throwable throwable, @Nullable String typeDescription) {\n","    super(metadata, throwable, typeDescription);\n","    this.actual = throwable;\n","  }\n","\n","  /*\n","   * TODO(cpovirk): consider a special case for isEqualTo and isSameInstanceAs that adds |expected|\n","   * as a suppressed exception\n","   */\n","\n","  /** Returns a {@code StringSubject} to make assertions about the throwable's message. */\n","  public final StringSubject hasMessageThat() {\n","    StandardSubjectBuilder check = check(\"getMessage()\");\n","    if (actual instanceof ErrorWithFacts && ((ErrorWithFacts) actual).facts().size() > 1) {\n","      check =\n","          check.withMessage(\n","              \"(Note from Truth: When possible, instead of asserting on the full message, assert\"\n","                  + \" about individual facts by using ExpectFailure.assertThat.)\");\n","    }\n","    return check.that(checkNotNull(actual).getMessage());\n","  }\n","\n","  /**\n","   * Returns a new {@code ThrowableSubject} that supports assertions on this throwable's direct\n","   * cause. This method can be invoked repeatedly (e.g. {@code\n","   * assertThat(e).hasCauseThat().hasCauseThat()....} to assert on a particular indirect cause.\n","   */\n","  // Any Throwable is fine, and we use plain Throwable to emphasize that it's not used \"for real.\"\n","  @SuppressWarnings(\"ShouldNotSubclass\")\n","  public final ThrowableSubject hasCauseThat() {\n","    // provides a more helpful error message if hasCauseThat() methods are chained too deep\n","    // e.g. assertThat(new Exception()).hCT().hCT()....\n","    // TODO(diamondm) in keeping with other subjects' behavior this should still NPE if the subject\n","    // *itself* is null, since there's no context to lose. See also b/37645583\n","    if (actual == null) {\n","      check(\"getCause()\")\n","          .withMessage(\"Causal chain is not deep enough - add a .isNotNull() check?\")\n","          .fail();\n","      return ignoreCheck()\n","          .that(\n","              new Throwable() {\n","                @Override\n","                @SuppressWarnings(\"UnsynchronizedOverridesSynchronized\")\n","                public Throwable fillInStackTrace() {\n","                  setStackTrace(new StackTraceElement[0]); // for old versions of Android\n","                  return this;\n","                }\n","              });\n","    }\n","    return check(\"getCause()\").that(actual.getCause());\n","  }\n","}\n"],"test_content":["/*\n"," * Copyright (c) 2014 Google, Inc.\n"," *\n"," * Licensed under the Apache License, Version 2.0 (the \"License\");\n"," * you may not use this file except in compliance with the License.\n"," * You may obtain a copy of the License at\n"," *\n"," * http://www.apache.org/licenses/LICENSE-2.0\n"," *\n"," * Unless required by applicable law or agreed to in writing, software\n"," * distributed under the License is distributed on an \"AS IS\" BASIS,\n"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"," * See the License for the specific language governing permissions and\n"," * limitations under the License.\n"," */\n","package com.google.common.truth;\n","\n","import static com.google.common.truth.Truth.assertThat;\n","import static com.google.common.truth.Truth.assertWithMessage;\n","\n","import java.io.IOException;\n","import org.junit.Test;\n","import org.junit.runner.RunWith;\n","import org.junit.runners.JUnit4;\n","\n","/**\n"," * Tests for {@link Throwable} subjects.\n"," *\n"," * @author Kurt Alfred Kluever\n"," */\n","@RunWith(JUnit4.class)\n","public class ThrowableSubjectTest extends BaseSubjectTestCase {\n","\n","  @Test\n","  public void hasMessageThat() {\n","    NullPointerException npe = new NullPointerException(\"message\");\n","    assertThat(npe).hasMessageThat().isEqualTo(\"message\");\n","  }\n","\n","  @Test\n","  public void hasMessageThat_null() {\n","    assertThat(new NullPointerException()).hasMessageThat().isNull();\n","    assertThat(new NullPointerException(null)).hasMessageThat().isNull();\n","  }\n","\n","  @Test\n","  public void hasMessageThat_failure() {\n","    NullPointerException actual = new NullPointerException(\"message\");\n","    expectFailureWhenTestingThat(actual).hasMessageThat().isEqualTo(\"foobar\");\n","    assertFailureValue(\"value of\", \"throwable.getMessage()\");\n","    assertErrorHasActualAsCause(actual, expectFailure.getFailure());\n","  }\n","\n","  @Test\n","  public void hasMessageThat_MessageHasNullMessage_failure() {\n","    expectFailureWhenTestingThat(new NullPointerException(\"message\")).hasMessageThat().isNull();\n","  }\n","\n","  @Test\n","  public void hasMessageThat_NullMessageHasMessage_failure() {\n","    NullPointerException npe = new NullPointerException(null);\n","    expectFailureWhenTestingThat(npe).hasMessageThat().isEqualTo(\"message\");\n","  }\n","\n","  @Test\n","  public void hasCauseThat_message() {\n","    assertThat(new Exception(\"foobar\", new IOException(\"barfoo\")))\n","        .hasCauseThat()\n","        .hasMessageThat()\n","        .isEqualTo(\"barfoo\");\n","  }\n","\n","  @Test\n","  public void hasCauseThat_instanceOf() {\n","    assertThat(new Exception(\"foobar\", new IOException(\"barfoo\")))\n","        .hasCauseThat()\n","        .isInstanceOf(IOException.class);\n","  }\n","\n","  @Test\n","  public void hasCauseThat_null() {\n","    assertThat(new Exception(\"foobar\")).hasCauseThat().isNull();\n","  }\n","\n","  @Test\n","  public void hasCauseThat_message_failure() {\n","    Exception actual = new Exception(\"foobar\", new IOException(\"barfoo\"));\n","    expectFailureWhenTestingThat(actual).hasCauseThat().hasMessageThat().isEqualTo(\"message\");\n","    assertFailureValue(\"value of\", \"throwable.getCause().getMessage()\");\n","    assertErrorHasActualAsCause(actual, expectFailure.getFailure());\n","  }\n","\n","  @Test\n","  public void hasCauseThat_instanceOf_failure() {\n","    Exception actual = new Exception(\"foobar\", new IOException(\"barfoo\"));\n","    expectFailureWhenTestingThat(actual).hasCauseThat().isInstanceOf(RuntimeException.class);\n","    assertFailureValue(\"value of\", \"throwable.getCause()\");\n","    assertErrorHasActualAsCause(actual, expectFailure.getFailure());\n","  }\n","\n","  @Test\n","  public void hasCauseThat_tooDeep_failure() {\n","    Exception actual = new Exception(\"foobar\");\n","    expectFailureWhenTestingThat(actual).hasCauseThat().hasCauseThat().isNull();\n","    assertThat(expectFailure.getFailure().getMessage())\n","        .isEqualTo(\n","            \"Causal chain is not deep enough - add a .isNotNull() check?\\n\"\n","                + \"value of: throwable.getCause().getCause()\");\n","    assertErrorHasActualAsCause(actual, expectFailure.getFailure());\n","  }\n","\n","  @Test\n","  public void hasCauseThat_deepNull_failure() {\n","    Exception actual =\n","        new Exception(\"foobar\", new RuntimeException(\"barfoo\", new IOException(\"buzz\")));\n","    expectFailureWhenTestingThat(actual)\n","        .hasCauseThat()\n","        .hasCauseThat()\n","        .hasMessageThat()\n","        .isEqualTo(\"message\");\n","    assertFailureValue(\"value of\", \"throwable.getCause().getCause().getMessage()\");\n","    assertErrorHasActualAsCause(actual, expectFailure.getFailure());\n","  }\n","\n","  @Test\n","  public void inheritedMethodChainsSubject() {\n","    NullPointerException expected = new NullPointerException(\"expected\");\n","    NullPointerException actual = new NullPointerException(\"actual\");\n","    expectFailureWhenTestingThat(actual).isEqualTo(expected);\n","    assertErrorHasActualAsCause(actual, expectFailure.getFailure());\n","  }\n","\n","  private static void assertErrorHasActualAsCause(Throwable actual, AssertionError failure) {\n","    assertWithMessage(\"AssertionError's cause\").that(failure.getCause()).isEqualTo(actual);\n","  }\n","\n","  private ThrowableSubject expectFailureWhenTestingThat(Throwable actual) {\n","    return expectFailure.whenTesting().that(actual);\n","  }\n","}\n"],"method_lines_dic":{"ThrowableSubject::::hasMessageThat()":[50,59],"ThrowableSubject::::hasCauseThat()":[67,89]},"test_method_lines_dic":{"ThrowableSubjectTest::::hasMessageThat()":[34,38],"ThrowableSubjectTest::::hasMessageThat_null()":[40,44],"ThrowableSubjectTest::::hasMessageThat_failure()":[46,52],"ThrowableSubjectTest::::hasMessageThat_MessageHasNullMessage_failure()":[54,57],"ThrowableSubjectTest::::hasMessageThat_NullMessageHasMessage_failure()":[59,63],"ThrowableSubjectTest::::hasCauseThat_message()":[65,71],"ThrowableSubjectTest::::hasCauseThat_instanceOf()":[73,78],"ThrowableSubjectTest::::hasCauseThat_null()":[80,83],"ThrowableSubjectTest::::hasCauseThat_message_failure()":[85,91],"ThrowableSubjectTest::::hasCauseThat_instanceOf_failure()":[93,99],"ThrowableSubjectTest::::hasCauseThat_tooDeep_failure()":[101,110],"ThrowableSubjectTest::::hasCauseThat_deepNull_failure()":[112,123],"ThrowableSubjectTest::::inheritedMethodChainsSubject()":[125,131],"ThrowableSubjectTest::::assertErrorHasActualAsCause(java.lang.Throwable,java.lang.AssertionError)":[133,135],"ThrowableSubjectTest::::expectFailureWhenTestingThat(java.lang.Throwable)":[137,139]},"reverse_method_lines_dic":{"50":"ThrowableSubject::::hasMessageThat()","51":"ThrowableSubject::::hasMessageThat()","52":"ThrowableSubject::::hasMessageThat()","53":"ThrowableSubject::::hasMessageThat()","54":"ThrowableSubject::::hasMessageThat()","55":"ThrowableSubject::::hasMessageThat()","56":"ThrowableSubject::::hasMessageThat()","57":"ThrowableSubject::::hasMessageThat()","58":"ThrowableSubject::::hasMessageThat()","59":"ThrowableSubject::::hasMessageThat()","67":"ThrowableSubject::::hasCauseThat()","68":"ThrowableSubject::::hasCauseThat()","69":"ThrowableSubject::::hasCauseThat()","70":"ThrowableSubject::::hasCauseThat()","71":"ThrowableSubject::::hasCauseThat()","72":"ThrowableSubject::::hasCauseThat()","73":"ThrowableSubject::::hasCauseThat()","74":"ThrowableSubject::::hasCauseThat()","75":"ThrowableSubject::::hasCauseThat()","76":"ThrowableSubject::::hasCauseThat()","77":"ThrowableSubject::::hasCauseThat()","78":"ThrowableSubject::::hasCauseThat()","79":"ThrowableSubject::::hasCauseThat()","80":"ThrowableSubject::::hasCauseThat()","81":"ThrowableSubject::::hasCauseThat()","82":"ThrowableSubject::::hasCauseThat()","83":"ThrowableSubject::::hasCauseThat()","84":"ThrowableSubject::::hasCauseThat()","85":"ThrowableSubject::::hasCauseThat()","86":"ThrowableSubject::::hasCauseThat()","87":"ThrowableSubject::::hasCauseThat()","88":"ThrowableSubject::::hasCauseThat()","89":"ThrowableSubject::::hasCauseThat()"},"test_reverse_method_lines_dic":{"34":"ThrowableSubjectTest::::hasMessageThat()","35":"ThrowableSubjectTest::::hasMessageThat()","36":"ThrowableSubjectTest::::hasMessageThat()","37":"ThrowableSubjectTest::::hasMessageThat()","38":"ThrowableSubjectTest::::hasMessageThat()","40":"ThrowableSubjectTest::::hasMessageThat_null()","41":"ThrowableSubjectTest::::hasMessageThat_null()","42":"ThrowableSubjectTest::::hasMessageThat_null()","43":"ThrowableSubjectTest::::hasMessageThat_null()","44":"ThrowableSubjectTest::::hasMessageThat_null()","46":"ThrowableSubjectTest::::hasMessageThat_failure()","47":"ThrowableSubjectTest::::hasMessageThat_failure()","48":"ThrowableSubjectTest::::hasMessageThat_failure()","49":"ThrowableSubjectTest::::hasMessageThat_failure()","50":"ThrowableSubjectTest::::hasMessageThat_failure()","51":"ThrowableSubjectTest::::hasMessageThat_failure()","52":"ThrowableSubjectTest::::hasMessageThat_failure()","54":"ThrowableSubjectTest::::hasMessageThat_MessageHasNullMessage_failure()","55":"ThrowableSubjectTest::::hasMessageThat_MessageHasNullMessage_failure()","56":"ThrowableSubjectTest::::hasMessageThat_MessageHasNullMessage_failure()","57":"ThrowableSubjectTest::::hasMessageThat_MessageHasNullMessage_failure()","59":"ThrowableSubjectTest::::hasMessageThat_NullMessageHasMessage_failure()","60":"ThrowableSubjectTest::::hasMessageThat_NullMessageHasMessage_failure()","61":"ThrowableSubjectTest::::hasMessageThat_NullMessageHasMessage_failure()","62":"ThrowableSubjectTest::::hasMessageThat_NullMessageHasMessage_failure()","63":"ThrowableSubjectTest::::hasMessageThat_NullMessageHasMessage_failure()","65":"ThrowableSubjectTest::::hasCauseThat_message()","66":"ThrowableSubjectTest::::hasCauseThat_message()","67":"ThrowableSubjectTest::::hasCauseThat_message()","68":"ThrowableSubjectTest::::hasCauseThat_message()","69":"ThrowableSubjectTest::::hasCauseThat_message()","70":"ThrowableSubjectTest::::hasCauseThat_message()","71":"ThrowableSubjectTest::::hasCauseThat_message()","73":"ThrowableSubjectTest::::hasCauseThat_instanceOf()","74":"ThrowableSubjectTest::::hasCauseThat_instanceOf()","75":"ThrowableSubjectTest::::hasCauseThat_instanceOf()","76":"ThrowableSubjectTest::::hasCauseThat_instanceOf()","77":"ThrowableSubjectTest::::hasCauseThat_instanceOf()","78":"ThrowableSubjectTest::::hasCauseThat_instanceOf()","80":"ThrowableSubjectTest::::hasCauseThat_null()","81":"ThrowableSubjectTest::::hasCauseThat_null()","82":"ThrowableSubjectTest::::hasCauseThat_null()","83":"ThrowableSubjectTest::::hasCauseThat_null()","85":"ThrowableSubjectTest::::hasCauseThat_message_failure()","86":"ThrowableSubjectTest::::hasCauseThat_message_failure()","87":"ThrowableSubjectTest::::hasCauseThat_message_failure()","88":"ThrowableSubjectTest::::hasCauseThat_message_failure()","89":"ThrowableSubjectTest::::hasCauseThat_message_failure()","90":"ThrowableSubjectTest::::hasCauseThat_message_failure()","91":"ThrowableSubjectTest::::hasCauseThat_message_failure()","93":"ThrowableSubjectTest::::hasCauseThat_instanceOf_failure()","94":"ThrowableSubjectTest::::hasCauseThat_instanceOf_failure()","95":"ThrowableSubjectTest::::hasCauseThat_instanceOf_failure()","96":"ThrowableSubjectTest::::hasCauseThat_instanceOf_failure()","97":"ThrowableSubjectTest::::hasCauseThat_instanceOf_failure()","98":"ThrowableSubjectTest::::hasCauseThat_instanceOf_failure()","99":"ThrowableSubjectTest::::hasCauseThat_instanceOf_failure()","101":"ThrowableSubjectTest::::hasCauseThat_tooDeep_failure()","102":"ThrowableSubjectTest::::hasCauseThat_tooDeep_failure()","103":"ThrowableSubjectTest::::hasCauseThat_tooDeep_failure()","104":"ThrowableSubjectTest::::hasCauseThat_tooDeep_failure()","105":"ThrowableSubjectTest::::hasCauseThat_tooDeep_failure()","106":"ThrowableSubjectTest::::hasCauseThat_tooDeep_failure()","107":"ThrowableSubjectTest::::hasCauseThat_tooDeep_failure()","108":"ThrowableSubjectTest::::hasCauseThat_tooDeep_failure()","109":"ThrowableSubjectTest::::hasCauseThat_tooDeep_failure()","110":"ThrowableSubjectTest::::hasCauseThat_tooDeep_failure()","112":"ThrowableSubjectTest::::hasCauseThat_deepNull_failure()","113":"ThrowableSubjectTest::::hasCauseThat_deepNull_failure()","114":"ThrowableSubjectTest::::hasCauseThat_deepNull_failure()","115":"ThrowableSubjectTest::::hasCauseThat_deepNull_failure()","116":"ThrowableSubjectTest::::hasCauseThat_deepNull_failure()","117":"ThrowableSubjectTest::::hasCauseThat_deepNull_failure()","118":"ThrowableSubjectTest::::hasCauseThat_deepNull_failure()","119":"ThrowableSubjectTest::::hasCauseThat_deepNull_failure()","120":"ThrowableSubjectTest::::hasCauseThat_deepNull_failure()","121":"ThrowableSubjectTest::::hasCauseThat_deepNull_failure()","122":"ThrowableSubjectTest::::hasCauseThat_deepNull_failure()","123":"ThrowableSubjectTest::::hasCauseThat_deepNull_failure()","125":"ThrowableSubjectTest::::inheritedMethodChainsSubject()","126":"ThrowableSubjectTest::::inheritedMethodChainsSubject()","127":"ThrowableSubjectTest::::inheritedMethodChainsSubject()","128":"ThrowableSubjectTest::::inheritedMethodChainsSubject()","129":"ThrowableSubjectTest::::inheritedMethodChainsSubject()","130":"ThrowableSubjectTest::::inheritedMethodChainsSubject()","131":"ThrowableSubjectTest::::inheritedMethodChainsSubject()","133":"ThrowableSubjectTest::::assertErrorHasActualAsCause(java.lang.Throwable,java.lang.AssertionError)","134":"ThrowableSubjectTest::::assertErrorHasActualAsCause(java.lang.Throwable,java.lang.AssertionError)","135":"ThrowableSubjectTest::::assertErrorHasActualAsCause(java.lang.Throwable,java.lang.AssertionError)","137":"ThrowableSubjectTest::::expectFailureWhenTestingThat(java.lang.Throwable)","138":"ThrowableSubjectTest::::expectFailureWhenTestingThat(java.lang.Throwable)","139":"ThrowableSubjectTest::::expectFailureWhenTestingThat(java.lang.Throwable)"},"tests":[{"test_lines":[34,38],"covered_lines":[40,41,42,51,52,58],"label":"ThrowableSubject::::hasMessageThat()"},{"test_lines":[40,44],"covered_lines":[40,41,42,51,52,58],"label":"ThrowableSubject::::hasMessageThat()"},{"test_lines":[46,52],"covered_lines":[40,41,42,51,52,58],"label":"ThrowableSubject::::hasMessageThat()"},{"test_lines":[54,57],"covered_lines":[40,41,42,51,52,58],"label":"ThrowableSubject::::hasMessageThat()"},{"test_lines":[59,63],"covered_lines":[40,41,42,51,52,58],"label":"ThrowableSubject::::hasMessageThat()"},{"test_lines":[65,71],"covered_lines":[40,41,42,51,52,58,73,88],"label":"ThrowableSubject::::hasMessageThat()"},{"test_lines":[73,78],"covered_lines":[40,41,42,73,88],"label":"ThrowableSubject::::hasCauseThat()"},{"test_lines":[80,83],"covered_lines":[40,41,42,73,88],"label":"ThrowableSubject::::hasCauseThat()"},{"test_lines":[85,91],"covered_lines":[40,41,42,51,52,58,73,88],"label":"ThrowableSubject::::hasCauseThat()"},{"test_lines":[93,99],"covered_lines":[40,41,42,73,88],"label":"<<UNRECOGNISED_METHOD>>"},{"test_lines":[101,110],"covered_lines":[40,41,42,73,74,75,76,77,78,79,83,84,88],"label":"ThrowableSubject::::hasCauseThat()"},{"test_lines":[112,123],"covered_lines":[40,41,42,51,52,58,73,88],"label":"ThrowableSubject::::hasCauseThat()"},{"test_lines":[125,131],"covered_lines":[40,41,42],"label":"<<UNRECOGNISED_METHOD>>"}]}}