{
  "/bernard/dataset_construction/prep/repos/cron-utils/src/main/java/com/cronutils/validation/CronValidator.java": {
    "class_content": [
      "package com.cronutils.validation;\n",
      "\n",
      "import com.cronutils.model.CronType;\n",
      "import com.cronutils.model.definition.CronDefinition;\n",
      "import com.cronutils.model.definition.CronDefinitionBuilder;\n",
      "import com.cronutils.parser.CronParser;\n",
      "\n",
      "import javax.validation.ConstraintValidator;\n",
      "import javax.validation.ConstraintValidatorContext;\n",
      "\n",
      "public class CronValidator implements ConstraintValidator<Cron, String> {\n",
      "\n",
      "    private CronType type;\n",
      "\n",
      "    @Override\n",
      "    public void initialize(Cron constraintAnnotation) {\n",
      "        this.type = constraintAnnotation.type();\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public boolean isValid(String value, ConstraintValidatorContext context) {\n",
      "        if (value == null) {\n",
      "            return true;\n",
      "        }\n",
      "\n",
      "        CronDefinition cronDefinition = CronDefinitionBuilder.instanceDefinitionFor(type);\n",
      "        CronParser cronParser = new CronParser(cronDefinition);\n",
      "        try {\n",
      "            cronParser.parse(value).validate();\n",
      "            return true;\n",
      "        } catch (IllegalArgumentException e) {\n",
      "            context.disableDefaultConstraintViolation();\n",
      "            context.buildConstraintViolationWithTemplate(e.getMessage()).addConstraintViolation();\n",
      "            return false;\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package com.cronutils.validation;\n",
      "\n",
      "import com.cronutils.model.CronType;\n",
      "import org.junit.jupiter.params.ParameterizedTest;\n",
      "import org.junit.jupiter.params.provider.Arguments;\n",
      "import org.junit.jupiter.params.provider.MethodSource;\n",
      "import org.slf4j.Logger;\n",
      "import org.slf4j.LoggerFactory;\n",
      "\n",
      "import javax.validation.ConstraintViolation;\n",
      "import javax.validation.Validation;\n",
      "import javax.validation.Validator;\n",
      "import java.util.Set;\n",
      "import java.util.stream.Stream;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.assertFalse;\n",
      "import static org.junit.jupiter.api.Assertions.assertTrue;\n",
      "\n",
      "public class CronValidatorTest {\n",
      "\n",
      "    private static final Logger LOGGER = LoggerFactory.getLogger(CronValidatorTest.class);\n",
      "\n",
      "    private final Validator validator = Validation.buildDefaultValidatorFactory().getValidator();\n",
      "\n",
      "    public static Stream<Arguments> expressions() {\n",
      "        return Stream.of(\n",
      "                Arguments.of(\"0 0 * * * *\", true),\n",
      "                Arguments.of(\"*/10 * * * * *\", true),\n",
      "                Arguments.of(\"0 0 8-10 * * *\", true),\n",
      "                Arguments.of(\"0 0 6,19 * * *\", true),\n",
      "                Arguments.of(\"0 0/30 8-10 * * *\", true),\n",
      "                Arguments.of(\"0 0 9-17 * * MON-FRI\", true),\n",
      "                Arguments.of(\"0 0 0 25 12 ?\", true),\n",
      "                Arguments.of(\"0 0 0 L 12 ?\", false),\n",
      "                Arguments.of(\"1,2, * * * * *\", false),\n",
      "                Arguments.of(\"1- * * * * *\", false),\n",
      "                // Verification for RCE security vulnerability fix: https://github.com/jmrozanec/cron-utils/issues/461\n",
      "                Arguments.of(\"java.lang.Runtime.getRuntime().exec('touch /tmp/pwned'); // 4 5 [${''.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('js').eval(validatedValue)}]\", false)\n",
      "        );\n",
      "    }\n",
      "\n",
      "    @ParameterizedTest(name = \"{0} \")\n",
      "    @MethodSource(\"expressions\")\n",
      "    public void validateExamples(String expression, boolean valid) {\n",
      "        TestPojo testPojo = new TestPojo(expression);\n",
      "        Set<ConstraintViolation<TestPojo>> violations = validator.validate(testPojo);\n",
      "        violations.stream().map(ConstraintViolation::getMessage).forEach(LOGGER::info);\n",
      "\n",
      "        if (valid) {\n",
      "            assertTrue(violations.isEmpty());\n",
      "        } else {\n",
      "            assertFalse(violations.isEmpty());\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public static class TestPojo {\n",
      "        @Cron(type = CronType.SPRING)\n",
      "        private final String cron;\n",
      "\n",
      "        public TestPojo(String cron) {\n",
      "            this.cron = cron;\n",
      "        }\n",
      "\n",
      "        public String getCron() {\n",
      "            return cron;\n",
      "        }\n",
      "\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "CronValidator::::initialize(com.cronutils.validation.Cron)": [
        15,
        18
      ]
    },
    "test_method_lines_dic": {
      "CronValidatorTest::::expressions()": [
        25,
        40
      ],
      "CronValidatorTest::::validateExamples(java.lang.String,boolean)": [
        42,
        54
      ],
      "CronValidatorTest.TestPojo::::getCron()": [
        64,
        66
      ]
    },
    "reverse_method_lines_dic": {
      "15": "CronValidator::::initialize(com.cronutils.validation.Cron)",
      "16": "CronValidator::::initialize(com.cronutils.validation.Cron)",
      "17": "CronValidator::::initialize(com.cronutils.validation.Cron)",
      "18": "CronValidator::::initialize(com.cronutils.validation.Cron)"
    },
    "test_reverse_method_lines_dic": {
      "25": "CronValidatorTest::::expressions()",
      "26": "CronValidatorTest::::expressions()",
      "27": "CronValidatorTest::::expressions()",
      "28": "CronValidatorTest::::expressions()",
      "29": "CronValidatorTest::::expressions()",
      "30": "CronValidatorTest::::expressions()",
      "31": "CronValidatorTest::::expressions()",
      "32": "CronValidatorTest::::expressions()",
      "33": "CronValidatorTest::::expressions()",
      "34": "CronValidatorTest::::expressions()",
      "35": "CronValidatorTest::::expressions()",
      "36": "CronValidatorTest::::expressions()",
      "37": "CronValidatorTest::::expressions()",
      "38": "CronValidatorTest::::expressions()",
      "39": "CronValidatorTest::::expressions()",
      "40": "CronValidatorTest::::expressions()",
      "42": "CronValidatorTest::::validateExamples(java.lang.String,boolean)",
      "43": "CronValidatorTest::::validateExamples(java.lang.String,boolean)",
      "44": "CronValidatorTest::::validateExamples(java.lang.String,boolean)",
      "45": "CronValidatorTest::::validateExamples(java.lang.String,boolean)",
      "46": "CronValidatorTest::::validateExamples(java.lang.String,boolean)",
      "47": "CronValidatorTest::::validateExamples(java.lang.String,boolean)",
      "48": "CronValidatorTest::::validateExamples(java.lang.String,boolean)",
      "49": "CronValidatorTest::::validateExamples(java.lang.String,boolean)",
      "50": "CronValidatorTest::::validateExamples(java.lang.String,boolean)",
      "51": "CronValidatorTest::::validateExamples(java.lang.String,boolean)",
      "52": "CronValidatorTest::::validateExamples(java.lang.String,boolean)",
      "53": "CronValidatorTest::::validateExamples(java.lang.String,boolean)",
      "54": "CronValidatorTest::::validateExamples(java.lang.String,boolean)",
      "64": "CronValidatorTest.TestPojo::::getCron()",
      "65": "CronValidatorTest.TestPojo::::getCron()",
      "66": "CronValidatorTest.TestPojo::::getCron()"
    },
    "tests": [
      {
        "test_lines": [
          42,
          54
        ],
        "covered_lines": [
          11,
          17,
          18,
          22,
          26,
          27,
          29,
          30,
          31,
          32,
          33,
          34
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/cron-utils/src/main/java/com/cronutils/parser/CronParser.java": {
    "class_content": [
      "/*\n",
      " * Copyright 2014 jmrozanec\n",
      " *\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.parser;\n",
      "\n",
      "import com.cronutils.builder.CronBuilder;\n",
      "import com.cronutils.model.CompositeCron;\n",
      "import com.cronutils.model.Cron;\n",
      "import com.cronutils.model.SingleCron;\n",
      "import com.cronutils.model.definition.CronDefinition;\n",
      "import com.cronutils.model.definition.CronNicknames;\n",
      "import com.cronutils.model.field.CronField;\n",
      "import com.cronutils.model.field.definition.FieldDefinition;\n",
      "import com.cronutils.utils.Preconditions;\n",
      "import com.cronutils.utils.StringUtils;\n",
      "\n",
      "import java.util.*;\n",
      "import java.util.stream.Collectors;\n",
      "\n",
      "/**\n",
      " * Parser for cron expressions.\n",
      " * The class is thread safe.\n",
      " */\n",
      "public class CronParser {\n",
      "\n",
      "    private final Map<Integer, List<CronParserField>> expressions = new HashMap<>();\n",
      "    private final CronDefinition cronDefinition;\n",
      "\n",
      "    /**\n",
      "     * @param cronDefinition - cronDefinition of cron expressions to be parsed if null, a NullPointerException will be raised.\n",
      "     */\n",
      "    public CronParser(final CronDefinition cronDefinition) {\n",
      "        this.cronDefinition = Preconditions.checkNotNull(cronDefinition, \"CronDefinition must not be null\");\n",
      "        buildPossibleExpressions(cronDefinition);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Build possible cron expressions from definitions. One is built for sure. A second one may be build if last field is optional.\n",
      "     *\n",
      "     * @param cronDefinition - cron definition instance\n",
      "     */\n",
      "    private void buildPossibleExpressions(final CronDefinition cronDefinition) {\n",
      "        final List<CronParserField> sortedExpression = cronDefinition.getFieldDefinitions().stream()\n",
      "                .map(this::toCronParserField)\n",
      "                .sorted(CronParserField.createFieldTypeComparator())\n",
      "                .collect(Collectors.toList());\n",
      "\n",
      "        List<CronParserField> tempExpression = sortedExpression;\n",
      "\n",
      "        while(lastFieldIsOptional(tempExpression)) {\n",
      "            int expressionLength = tempExpression.size() - 1;\n",
      "            ArrayList<CronParserField> possibleExpression = new ArrayList<>(tempExpression.subList(0, expressionLength));\n",
      "\n",
      "            expressions.put(expressionLength, possibleExpression);\n",
      "            tempExpression = possibleExpression;\n",
      "        }\n",
      "\n",
      "        expressions.put(sortedExpression.size(), sortedExpression);\n",
      "    }\n",
      "\n",
      "    private CronParserField toCronParserField(final FieldDefinition fieldDefinition) {\n",
      "        return new CronParserField(fieldDefinition.getFieldName(), fieldDefinition.getConstraints(), fieldDefinition.isOptional());\n",
      "    }\n",
      "\n",
      "    private boolean lastFieldIsOptional(final List<CronParserField> fields) {\n",
      "        return !fields.isEmpty() && fields.get(fields.size() - 1).isOptional();\n",
      "    }\n",
      "\n",
      "    private Cron validateAndReturnSupportedCronNickname(String nickname, Set<CronNicknames> cronNicknames, CronNicknames cronNickname, Cron cron){\n",
      "        if(cronNicknames.contains(cronNickname)){\n",
      "            return cron;\n",
      "        }\n",
      "        throw new IllegalArgumentException(String.format(\"Nickname %s not supported!\", nickname));\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Parse string with cron expression.\n",
      "     *\n",
      "     * @param expression - cron expression, never null\n",
      "     * @return Cron instance, corresponding to cron expression received\n",
      "     * @throws java.lang.IllegalArgumentException if expression does not match cron definition\n",
      "     */\n",
      "    public Cron parse(final String expression) {\n",
      "        Preconditions.checkNotNull(expression, \"Expression must not be null\");\n",
      "        final String replaced = expression.replaceAll(\"\\\\s+\", \" \").trim();\n",
      "        if (StringUtils.isEmpty(replaced)) {\n",
      "            throw new IllegalArgumentException(\"Empty expression!\");\n",
      "        }\n",
      "\n",
      "        Set<CronNicknames> cronNicknames = cronDefinition.getCronNicknames();\n",
      "        if(expression.startsWith(\"@\")){\n",
      "            if(cronNicknames.isEmpty()){\n",
      "                throw new IllegalArgumentException(\"Nicknames not supported!\");\n",
      "            }\n",
      "            switch (expression){\n",
      "                case \"@yearly\":\n",
      "                    return validateAndReturnSupportedCronNickname(expression, cronNicknames, CronNicknames.YEARLY, CronBuilder.yearly(cronDefinition));\n",
      "                case \"@annually\":\n",
      "                    return validateAndReturnSupportedCronNickname(expression, cronNicknames, CronNicknames.ANNUALLY, CronBuilder.annually(cronDefinition));\n",
      "                case \"@monthly\":\n",
      "                    return validateAndReturnSupportedCronNickname(expression, cronNicknames, CronNicknames.MONTHLY, CronBuilder.monthly(cronDefinition));\n",
      "                case \"@weekly\":\n",
      "                    return validateAndReturnSupportedCronNickname(expression, cronNicknames, CronNicknames.WEEKLY, CronBuilder.weekly(cronDefinition));\n",
      "                case \"@daily\":\n",
      "                    return validateAndReturnSupportedCronNickname(expression, cronNicknames, CronNicknames.DAILY, CronBuilder.daily(cronDefinition));\n",
      "                case \"@midnight\":\n",
      "                    return validateAndReturnSupportedCronNickname(expression, cronNicknames, CronNicknames.MIDNIGHT, CronBuilder.midnight(cronDefinition));\n",
      "                case \"@hourly\":\n",
      "                    return validateAndReturnSupportedCronNickname(expression, cronNicknames, CronNicknames.HOURLY, CronBuilder.hourly(cronDefinition));\n",
      "                case \"@reboot\":\n",
      "                    return validateAndReturnSupportedCronNickname(expression, cronNicknames, CronNicknames.REBOOT, CronBuilder.reboot(cronDefinition));\n",
      "            }\n",
      "        }\n",
      "\n",
      "        if(expression.contains(\"||\")) {\n",
      "            List<Cron> crons = Arrays.stream(expression.split(\"\\\\|\\\\|\")).map(this::parse).collect(Collectors.toList());\n",
      "            return new CompositeCron(crons);\n",
      "        }\n",
      "        if(expression.contains(\"|\")){\n",
      "            List<String> crons = new ArrayList<>();\n",
      "            int cronscount = Arrays.stream(expression.split(\"\\\\s+\")).mapToInt(s->s.split(\"\\\\|\").length).max().orElse(0);\n",
      "            for(int j=0; j<cronscount; j++){\n",
      "                StringBuilder builder = new StringBuilder();\n",
      "                for(String s : expression.split(\"\\\\s+\")){\n",
      "                    if(s.contains(\"|\")){\n",
      "                        builder.append(String.format(\"%s \", s.split(\"\\\\|\")[j]));\n",
      "                    }else{\n",
      "                        builder.append(String.format(\"%s \", s));\n",
      "                    }\n",
      "                }\n",
      "                crons.add(builder.toString().trim());\n",
      "            }\n",
      "            return new CompositeCron(crons.stream().map(this::parse).collect(Collectors.toList()));\n",
      "        }else{\n",
      "            final String[] expressionParts = replaced.toUpperCase().split(\" \");\n",
      "            final int expressionLength = expressionParts.length;\n",
      "            String fieldWithTrailingCommas = Arrays.stream(expressionParts).filter(x -> x.endsWith(\",\")).findAny().orElse(null);\n",
      "            if(fieldWithTrailingCommas!=null){\n",
      "                throw new IllegalArgumentException(String.format(\"Invalid field value! Trailing commas not permitted! '%s'\", fieldWithTrailingCommas));\n",
      "            }\n",
      "            final List<CronParserField> fields = expressions.get(expressionLength);\n",
      "            if (fields == null) {\n",
      "                throw new IllegalArgumentException(\n",
      "                        String.format(\"Cron expression contains %s parts but we expect one of %s\", expressionLength, expressions.keySet()));\n",
      "            }\n",
      "            try {\n",
      "                final int size = expressionParts.length;\n",
      "                final List<CronField> results = new ArrayList<>(size + 1);\n",
      "                for (int j = 0; j < size; j++) {\n",
      "                    results.add(fields.get(j).parse(expressionParts[j]));\n",
      "                }\n",
      "                return new SingleCron(cronDefinition, results).validate();\n",
      "            } catch (final IllegalArgumentException e) {\n",
      "                throw new IllegalArgumentException(String.format(\"Failed to parse cron expression. %s\", e.getMessage()), e);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "}\n",
      "\n"
    ],
    "test_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.parser;\n",
      "\n",
      "import com.cronutils.model.Cron;\n",
      "import com.cronutils.model.CronType;\n",
      "import com.cronutils.model.definition.CronDefinition;\n",
      "import com.cronutils.model.definition.CronDefinitionBuilder;\n",
      "import com.cronutils.model.definition.TestCronDefinitionsFactory;\n",
      "import com.cronutils.model.field.CronFieldName;\n",
      "import com.cronutils.model.field.constraint.FieldConstraintsBuilder;\n",
      "import com.cronutils.model.field.definition.FieldDefinition;\n",
      "import org.junit.jupiter.api.BeforeEach;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.mockito.Mock;\n",
      "import org.mockito.MockitoAnnotations;\n",
      "\n",
      "import java.util.Collections;\n",
      "import java.util.HashSet;\n",
      "import java.util.Set;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.assertEquals;\n",
      "import static org.junit.jupiter.api.Assertions.assertThrows;\n",
      "import static org.junit.jupiter.api.Assertions.assertTrue;\n",
      "import static org.mockito.Mockito.when;\n",
      "\n",
      "public class CronParserTest {\n",
      "    @Mock\n",
      "    private CronDefinition definition;\n",
      "\n",
      "    private CronParser parser;\n",
      "\n",
      "    @BeforeEach\n",
      "    public void setUp() {\n",
      "        MockitoAnnotations.initMocks(this);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testParseEmptyExpression() {\n",
      "        when(definition.getFieldDefinitions()).thenReturn(Collections.emptySet());\n",
      "        parser = new CronParser(definition);\n",
      "\n",
      "        assertThrows(IllegalArgumentException.class, () -> parser.parse(\"\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testParseNoMatchingExpression() {\n",
      "        final Set<FieldDefinition> set =\n",
      "                Collections.singleton(new FieldDefinition(CronFieldName.SECOND, FieldConstraintsBuilder.instance().createConstraintsInstance()));\n",
      "        when(definition.getFieldDefinitions()).thenReturn(set);\n",
      "        parser = new CronParser(definition);\n",
      "\n",
      "        assertThrows(IllegalArgumentException.class, () -> parser.parse(\"* *\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testParseIncompleteEvery() {\n",
      "        parseIncompleteExpression(\"*/\",\"Missing steps for expression: */\");\n",
      "    }\n",
      "\n",
      "    private static void validateExpression(CronType cronType, String expression) {\n",
      "        CronDefinition cronDefinition = CronDefinitionBuilder.instanceDefinitionFor(cronType);\n",
      "        CronParser parser = new CronParser(cronDefinition);\n",
      "        System.out.println(String.format(\"Validating expression '%s' using %s definition\", expression, cronType));\n",
      "        parser.parse(expression);\n",
      "    }\n",
      "\n",
      "    @Test // issue #368\n",
      "    public void testTrailingCommaListCron4j(){\n",
      "        assertThrows(IllegalArgumentException.class, () -> validateExpression(CronType.CRON4J, \"1, * * * *\"));\n",
      "    }\n",
      "\n",
      "    @Test // issue #368\n",
      "    public void testTrailingCommaListQuartz(){\n",
      "        assertThrows(IllegalArgumentException.class, () -> validateExpression(CronType.QUARTZ, \"1, * * * * ?\"));\n",
      "    }\n",
      "\n",
      "    @Test // issue #368\n",
      "    public void testTrailingCommaListSpring(){\n",
      "        assertThrows(IllegalArgumentException.class, () -> validateExpression(CronType.SPRING, \"1,2, * * * * ?\"));\n",
      "    }\n",
      "\n",
      "    @Test // issue #368\n",
      "    public void testTrailingCommaListUnix(){\n",
      "        assertThrows(IllegalArgumentException.class, () -> validateExpression(CronType.UNIX, \"1, * * * *\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testHashListUnix(){\n",
      "        assertThrows(IllegalArgumentException.class, () -> validateExpression(CronType.UNIX, \"0 0 0 ? * #\"));\n",
      "    }\n",
      "\n",
      "    @Test // issue #369\n",
      "    public void testParseIncompleteRangeNoValues() {\n",
      "        parseIncompleteExpression(\"-\", \"Missing values for range: -\");\n",
      "    }\n",
      "\n",
      "    @Test // issue #369\n",
      "    public void testParseIncompleteRangeOnlyLeftValue() {\n",
      "        parseIncompleteExpression(\"1-\", \"Missing values for range: 1-\");\n",
      "    }\n",
      "\n",
      "    private void parseIncompleteExpression(String expression, String expectedMessage) {\n",
      "        final Set<FieldDefinition> set =\n",
      "                Collections.singleton(new FieldDefinition(CronFieldName.SECOND, FieldConstraintsBuilder.instance().createConstraintsInstance()));\n",
      "        when(definition.getFieldDefinitions()).thenReturn(set);\n",
      "        parser = new CronParser(definition);\n",
      "\n",
      "        IllegalArgumentException e = assertThrows(IllegalArgumentException.class, () -> parser.parse(expression));\n",
      "        assertTrue(e.getMessage().contains(expectedMessage));\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Corresponds to issue#11\n",
      "     * https://github.com/jmrozanec/cron-utils/issues/11\n",
      "     * Reported case:\n",
      "     * when parsing: \"* *[triple space here]* * ?\"\n",
      "     * we receive: NumberFormatException with message For input string: \"\"\n",
      "     * Expected: ignore multiple spaces, and parse the expression.\n",
      "     */\n",
      "    @Test\n",
      "    public void testMultipleSpacesDoNotHurtParsingExpression() {\n",
      "        final FieldDefinition minute = new FieldDefinition(CronFieldName.MINUTE, FieldConstraintsBuilder.instance().createConstraintsInstance());\n",
      "        final FieldDefinition hour = new FieldDefinition(CronFieldName.HOUR, FieldConstraintsBuilder.instance().createConstraintsInstance());\n",
      "        final FieldDefinition dom = new FieldDefinition(CronFieldName.DAY_OF_MONTH, FieldConstraintsBuilder.instance().createConstraintsInstance());\n",
      "        final FieldDefinition month = new FieldDefinition(CronFieldName.MONTH, FieldConstraintsBuilder.instance().createConstraintsInstance());\n",
      "        final FieldDefinition dow = new FieldDefinition(CronFieldName.DAY_OF_WEEK, FieldConstraintsBuilder.instance().createConstraintsInstance());\n",
      "        final Set<FieldDefinition> set = new HashSet<>();\n",
      "        set.add(minute);\n",
      "        set.add(hour);\n",
      "        set.add(dom);\n",
      "        set.add(month);\n",
      "        set.add(dow);\n",
      "        when(definition.getFieldDefinitions()).thenReturn(set);\n",
      "        when(definition.getFieldDefinition(CronFieldName.MINUTE)).thenReturn(minute);\n",
      "        when(definition.getFieldDefinition(CronFieldName.HOUR)).thenReturn(hour);\n",
      "        when(definition.getFieldDefinition(CronFieldName.DAY_OF_MONTH)).thenReturn(dom);\n",
      "        when(definition.getFieldDefinition(CronFieldName.MONTH)).thenReturn(month);\n",
      "        when(definition.getFieldDefinition(CronFieldName.DAY_OF_WEEK)).thenReturn(dow);\n",
      "        parser = new CronParser(definition);\n",
      "\n",
      "        parser.parse(\"* *   * * *\");\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Corresponds to issue#148\n",
      "     * https://github.com/jmrozanec/cron-utils/issues/148\n",
      "     */\n",
      "    @Test\n",
      "    public void testParseEveryXyears() {\n",
      "        final CronDefinition quartzDefinition = CronDefinitionBuilder.instanceDefinitionFor(CronType.QUARTZ);\n",
      "        parser = new CronParser(quartzDefinition);\n",
      "\n",
      "        parser.parse(\"0/59 0/59 0/23 1/30 1/11 ? 2017/3\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testRejectionOfZeroPeriod() {\n",
      "        final CronDefinition quartzDefinition = CronDefinitionBuilder.instanceDefinitionFor(CronType.QUARTZ);\n",
      "        parser = new CronParser(quartzDefinition);\n",
      "\n",
      "        assertThrows(IllegalArgumentException.class, () -> parser.parse(\"0/0 0 0 1 1 ? 2017/3\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testRejectionOfPeriodUpperLimitExceedance() {\n",
      "        final CronDefinition quartzDefinition = CronDefinitionBuilder.instanceDefinitionFor(CronType.QUARTZ);\n",
      "        parser = new CronParser(quartzDefinition);\n",
      "        assertThrows(IllegalArgumentException.class, () -> parser.parse(\"0/60 0 0 1 1 ? 2017/3\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testParseExtendedQuartzCron() {\n",
      "        parser = new CronParser(TestCronDefinitionsFactory.withDayOfYearDefinitionWhereYearAndDoYOptionals());\n",
      "        parser.parse(\"0 0 0 ? * ? 2017 1/14\");\n",
      "    }\n",
      "\n",
      "    @Test // issue #180\n",
      "    public void testThatEveryMinuteIsPreserved() {\n",
      "        final CronDefinition quartzDefinition = CronDefinitionBuilder.instanceDefinitionFor(CronType.QUARTZ);\n",
      "        parser = new CronParser(quartzDefinition);\n",
      "\n",
      "        final Cron expression = parser.parse(\"0 0/1 * 1/1 * ? *\");\n",
      "        assertEquals(\"0 0/1 * 1/1 * ? *\", expression.asString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testParseExtendedQuartzCronWithAsterixDoY() {\n",
      "        parser = new CronParser(TestCronDefinitionsFactory.withDayOfYearDefinitionWhereYearAndDoYOptionals());\n",
      "        parser.parse(\"0 0 0 ? * ? 2017 *\"); //i.e. same as \"0 0 0 * * ? 2017\" or \"0 0 0 ? * * 2017\"\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testParseExtendedQuartzCronWithQuestionMarkDoY() {\n",
      "        parser = new CronParser(TestCronDefinitionsFactory.withDayOfYearDefinitionWhereYearAndDoYOptionals());\n",
      "        parser.parse(\"0 0 0 1 * ? 2017 ?\"); //i.e. same as \"0 0 0 1 * ? 2017\" with question mark being omitted\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testParseMulticron(){\n",
      "        String multicron = \"0 0|0|30|0 9|10|11|12 * * ? *\";\n",
      "        parser = new CronParser(CronDefinitionBuilder.instanceDefinitionFor(CronType.QUARTZ));\n",
      "        Cron cron = parser.parse(multicron);\n",
      "        assertEquals(multicron, cron.asString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testParseQuartzCronWithHash() {\n",
      "        parser = new CronParser(TestCronDefinitionsFactory.withDayOfYearDefinitionWhereYearAndDoYOptionals());\n",
      "        assertThrows(IllegalArgumentException.class, () -> parser.parse(\"0 0 0 ? * #\"));\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "CronParser::::buildPossibleExpressions(com.cronutils.model.definition.CronDefinition)": [
        53,
        70
      ],
      "CronParser::::toCronParserField(com.cronutils.model.field.definition.FieldDefinition)": [
        72,
        74
      ],
      "CronParser::::lastFieldIsOptional(java.util.List<com.cronutils.parser.CronParserField>)": [
        76,
        78
      ],
      "CronParser::::validateAndReturnSupportedCronNickname(java.lang.String,java.util.Set<com.cronutils.model.definition.CronNicknames>,com.cronutils.model.definition.CronNicknames,com.cronutils.model.Cron)": [
        80,
        85
      ],
      "CronParser::::parse(java.lang.String)": [
        94,
        168
      ]
    },
    "test_method_lines_dic": {
      "CronParserTest::::setUp()": [
        44,
        47
      ],
      "CronParserTest::::testParseEmptyExpression()": [
        49,
        55
      ],
      "CronParserTest::::testParseNoMatchingExpression()": [
        57,
        65
      ],
      "CronParserTest::::testParseIncompleteEvery()": [
        67,
        70
      ],
      "CronParserTest::::testTrailingCommaListCron4j()": [
        79,
        82
      ],
      "CronParserTest::::testTrailingCommaListQuartz()": [
        84,
        87
      ],
      "CronParserTest::::testTrailingCommaListSpring()": [
        89,
        92
      ],
      "CronParserTest::::testTrailingCommaListUnix()": [
        94,
        97
      ],
      "CronParserTest::::testHashListUnix()": [
        99,
        102
      ],
      "CronParserTest::::testParseIncompleteRangeNoValues()": [
        104,
        107
      ],
      "CronParserTest::::testParseIncompleteRangeOnlyLeftValue()": [
        109,
        112
      ],
      "CronParserTest::::parseIncompleteExpression(java.lang.String,java.lang.String)": [
        114,
        122
      ],
      "CronParserTest::::testMultipleSpacesDoNotHurtParsingExpression()": [
        132,
        154
      ],
      "CronParserTest::::testParseEveryXyears()": [
        160,
        166
      ],
      "CronParserTest::::testRejectionOfZeroPeriod()": [
        168,
        174
      ],
      "CronParserTest::::testRejectionOfPeriodUpperLimitExceedance()": [
        176,
        181
      ],
      "CronParserTest::::testParseExtendedQuartzCron()": [
        183,
        187
      ],
      "CronParserTest::::testThatEveryMinuteIsPreserved()": [
        189,
        196
      ],
      "CronParserTest::::testParseExtendedQuartzCronWithAsterixDoY()": [
        198,
        202
      ],
      "CronParserTest::::testParseExtendedQuartzCronWithQuestionMarkDoY()": [
        204,
        208
      ],
      "CronParserTest::::testParseMulticron()": [
        210,
        216
      ],
      "CronParserTest::::testParseQuartzCronWithHash()": [
        218,
        222
      ]
    },
    "reverse_method_lines_dic": {
      "53": "CronParser::::buildPossibleExpressions(com.cronutils.model.definition.CronDefinition)",
      "54": "CronParser::::buildPossibleExpressions(com.cronutils.model.definition.CronDefinition)",
      "55": "CronParser::::buildPossibleExpressions(com.cronutils.model.definition.CronDefinition)",
      "56": "CronParser::::buildPossibleExpressions(com.cronutils.model.definition.CronDefinition)",
      "57": "CronParser::::buildPossibleExpressions(com.cronutils.model.definition.CronDefinition)",
      "58": "CronParser::::buildPossibleExpressions(com.cronutils.model.definition.CronDefinition)",
      "59": "CronParser::::buildPossibleExpressions(com.cronutils.model.definition.CronDefinition)",
      "60": "CronParser::::buildPossibleExpressions(com.cronutils.model.definition.CronDefinition)",
      "61": "CronParser::::buildPossibleExpressions(com.cronutils.model.definition.CronDefinition)",
      "62": "CronParser::::buildPossibleExpressions(com.cronutils.model.definition.CronDefinition)",
      "63": "CronParser::::buildPossibleExpressions(com.cronutils.model.definition.CronDefinition)",
      "64": "CronParser::::buildPossibleExpressions(com.cronutils.model.definition.CronDefinition)",
      "65": "CronParser::::buildPossibleExpressions(com.cronutils.model.definition.CronDefinition)",
      "66": "CronParser::::buildPossibleExpressions(com.cronutils.model.definition.CronDefinition)",
      "67": "CronParser::::buildPossibleExpressions(com.cronutils.model.definition.CronDefinition)",
      "68": "CronParser::::buildPossibleExpressions(com.cronutils.model.definition.CronDefinition)",
      "69": "CronParser::::buildPossibleExpressions(com.cronutils.model.definition.CronDefinition)",
      "70": "CronParser::::buildPossibleExpressions(com.cronutils.model.definition.CronDefinition)",
      "72": "CronParser::::toCronParserField(com.cronutils.model.field.definition.FieldDefinition)",
      "73": "CronParser::::toCronParserField(com.cronutils.model.field.definition.FieldDefinition)",
      "74": "CronParser::::toCronParserField(com.cronutils.model.field.definition.FieldDefinition)",
      "76": "CronParser::::lastFieldIsOptional(java.util.List<com.cronutils.parser.CronParserField>)",
      "77": "CronParser::::lastFieldIsOptional(java.util.List<com.cronutils.parser.CronParserField>)",
      "78": "CronParser::::lastFieldIsOptional(java.util.List<com.cronutils.parser.CronParserField>)",
      "80": "CronParser::::validateAndReturnSupportedCronNickname(java.lang.String,java.util.Set<com.cronutils.model.definition.CronNicknames>,com.cronutils.model.definition.CronNicknames,com.cronutils.model.Cron)",
      "81": "CronParser::::validateAndReturnSupportedCronNickname(java.lang.String,java.util.Set<com.cronutils.model.definition.CronNicknames>,com.cronutils.model.definition.CronNicknames,com.cronutils.model.Cron)",
      "82": "CronParser::::validateAndReturnSupportedCronNickname(java.lang.String,java.util.Set<com.cronutils.model.definition.CronNicknames>,com.cronutils.model.definition.CronNicknames,com.cronutils.model.Cron)",
      "83": "CronParser::::validateAndReturnSupportedCronNickname(java.lang.String,java.util.Set<com.cronutils.model.definition.CronNicknames>,com.cronutils.model.definition.CronNicknames,com.cronutils.model.Cron)",
      "84": "CronParser::::validateAndReturnSupportedCronNickname(java.lang.String,java.util.Set<com.cronutils.model.definition.CronNicknames>,com.cronutils.model.definition.CronNicknames,com.cronutils.model.Cron)",
      "85": "CronParser::::validateAndReturnSupportedCronNickname(java.lang.String,java.util.Set<com.cronutils.model.definition.CronNicknames>,com.cronutils.model.definition.CronNicknames,com.cronutils.model.Cron)",
      "94": "CronParser::::parse(java.lang.String)",
      "95": "CronParser::::parse(java.lang.String)",
      "96": "CronParser::::parse(java.lang.String)",
      "97": "CronParser::::parse(java.lang.String)",
      "98": "CronParser::::parse(java.lang.String)",
      "99": "CronParser::::parse(java.lang.String)",
      "100": "CronParser::::parse(java.lang.String)",
      "101": "CronParser::::parse(java.lang.String)",
      "102": "CronParser::::parse(java.lang.String)",
      "103": "CronParser::::parse(java.lang.String)",
      "104": "CronParser::::parse(java.lang.String)",
      "105": "CronParser::::parse(java.lang.String)",
      "106": "CronParser::::parse(java.lang.String)",
      "107": "CronParser::::parse(java.lang.String)",
      "108": "CronParser::::parse(java.lang.String)",
      "109": "CronParser::::parse(java.lang.String)",
      "110": "CronParser::::parse(java.lang.String)",
      "111": "CronParser::::parse(java.lang.String)",
      "112": "CronParser::::parse(java.lang.String)",
      "113": "CronParser::::parse(java.lang.String)",
      "114": "CronParser::::parse(java.lang.String)",
      "115": "CronParser::::parse(java.lang.String)",
      "116": "CronParser::::parse(java.lang.String)",
      "117": "CronParser::::parse(java.lang.String)",
      "118": "CronParser::::parse(java.lang.String)",
      "119": "CronParser::::parse(java.lang.String)",
      "120": "CronParser::::parse(java.lang.String)",
      "121": "CronParser::::parse(java.lang.String)",
      "122": "CronParser::::parse(java.lang.String)",
      "123": "CronParser::::parse(java.lang.String)",
      "124": "CronParser::::parse(java.lang.String)",
      "125": "CronParser::::parse(java.lang.String)",
      "126": "CronParser::::parse(java.lang.String)",
      "127": "CronParser::::parse(java.lang.String)",
      "128": "CronParser::::parse(java.lang.String)",
      "129": "CronParser::::parse(java.lang.String)",
      "130": "CronParser::::parse(java.lang.String)",
      "131": "CronParser::::parse(java.lang.String)",
      "132": "CronParser::::parse(java.lang.String)",
      "133": "CronParser::::parse(java.lang.String)",
      "134": "CronParser::::parse(java.lang.String)",
      "135": "CronParser::::parse(java.lang.String)",
      "136": "CronParser::::parse(java.lang.String)",
      "137": "CronParser::::parse(java.lang.String)",
      "138": "CronParser::::parse(java.lang.String)",
      "139": "CronParser::::parse(java.lang.String)",
      "140": "CronParser::::parse(java.lang.String)",
      "141": "CronParser::::parse(java.lang.String)",
      "142": "CronParser::::parse(java.lang.String)",
      "143": "CronParser::::parse(java.lang.String)",
      "144": "CronParser::::parse(java.lang.String)",
      "145": "CronParser::::parse(java.lang.String)",
      "146": "CronParser::::parse(java.lang.String)",
      "147": "CronParser::::parse(java.lang.String)",
      "148": "CronParser::::parse(java.lang.String)",
      "149": "CronParser::::parse(java.lang.String)",
      "150": "CronParser::::parse(java.lang.String)",
      "151": "CronParser::::parse(java.lang.String)",
      "152": "CronParser::::parse(java.lang.String)",
      "153": "CronParser::::parse(java.lang.String)",
      "154": "CronParser::::parse(java.lang.String)",
      "155": "CronParser::::parse(java.lang.String)",
      "156": "CronParser::::parse(java.lang.String)",
      "157": "CronParser::::parse(java.lang.String)",
      "158": "CronParser::::parse(java.lang.String)",
      "159": "CronParser::::parse(java.lang.String)",
      "160": "CronParser::::parse(java.lang.String)",
      "161": "CronParser::::parse(java.lang.String)",
      "162": "CronParser::::parse(java.lang.String)",
      "163": "CronParser::::parse(java.lang.String)",
      "164": "CronParser::::parse(java.lang.String)",
      "165": "CronParser::::parse(java.lang.String)",
      "166": "CronParser::::parse(java.lang.String)",
      "167": "CronParser::::parse(java.lang.String)",
      "168": "CronParser::::parse(java.lang.String)"
    },
    "test_reverse_method_lines_dic": {
      "44": "CronParserTest::::setUp()",
      "45": "CronParserTest::::setUp()",
      "46": "CronParserTest::::setUp()",
      "47": "CronParserTest::::setUp()",
      "49": "CronParserTest::::testParseEmptyExpression()",
      "50": "CronParserTest::::testParseEmptyExpression()",
      "51": "CronParserTest::::testParseEmptyExpression()",
      "52": "CronParserTest::::testParseEmptyExpression()",
      "53": "CronParserTest::::testParseEmptyExpression()",
      "54": "CronParserTest::::testParseEmptyExpression()",
      "55": "CronParserTest::::testParseEmptyExpression()",
      "57": "CronParserTest::::testParseNoMatchingExpression()",
      "58": "CronParserTest::::testParseNoMatchingExpression()",
      "59": "CronParserTest::::testParseNoMatchingExpression()",
      "60": "CronParserTest::::testParseNoMatchingExpression()",
      "61": "CronParserTest::::testParseNoMatchingExpression()",
      "62": "CronParserTest::::testParseNoMatchingExpression()",
      "63": "CronParserTest::::testParseNoMatchingExpression()",
      "64": "CronParserTest::::testParseNoMatchingExpression()",
      "65": "CronParserTest::::testParseNoMatchingExpression()",
      "67": "CronParserTest::::testParseIncompleteEvery()",
      "68": "CronParserTest::::testParseIncompleteEvery()",
      "69": "CronParserTest::::testParseIncompleteEvery()",
      "70": "CronParserTest::::testParseIncompleteEvery()",
      "79": "CronParserTest::::testTrailingCommaListCron4j()",
      "80": "CronParserTest::::testTrailingCommaListCron4j()",
      "81": "CronParserTest::::testTrailingCommaListCron4j()",
      "82": "CronParserTest::::testTrailingCommaListCron4j()",
      "84": "CronParserTest::::testTrailingCommaListQuartz()",
      "85": "CronParserTest::::testTrailingCommaListQuartz()",
      "86": "CronParserTest::::testTrailingCommaListQuartz()",
      "87": "CronParserTest::::testTrailingCommaListQuartz()",
      "89": "CronParserTest::::testTrailingCommaListSpring()",
      "90": "CronParserTest::::testTrailingCommaListSpring()",
      "91": "CronParserTest::::testTrailingCommaListSpring()",
      "92": "CronParserTest::::testTrailingCommaListSpring()",
      "94": "CronParserTest::::testTrailingCommaListUnix()",
      "95": "CronParserTest::::testTrailingCommaListUnix()",
      "96": "CronParserTest::::testTrailingCommaListUnix()",
      "97": "CronParserTest::::testTrailingCommaListUnix()",
      "99": "CronParserTest::::testHashListUnix()",
      "100": "CronParserTest::::testHashListUnix()",
      "101": "CronParserTest::::testHashListUnix()",
      "102": "CronParserTest::::testHashListUnix()",
      "104": "CronParserTest::::testParseIncompleteRangeNoValues()",
      "105": "CronParserTest::::testParseIncompleteRangeNoValues()",
      "106": "CronParserTest::::testParseIncompleteRangeNoValues()",
      "107": "CronParserTest::::testParseIncompleteRangeNoValues()",
      "109": "CronParserTest::::testParseIncompleteRangeOnlyLeftValue()",
      "110": "CronParserTest::::testParseIncompleteRangeOnlyLeftValue()",
      "111": "CronParserTest::::testParseIncompleteRangeOnlyLeftValue()",
      "112": "CronParserTest::::testParseIncompleteRangeOnlyLeftValue()",
      "114": "CronParserTest::::parseIncompleteExpression(java.lang.String,java.lang.String)",
      "115": "CronParserTest::::parseIncompleteExpression(java.lang.String,java.lang.String)",
      "116": "CronParserTest::::parseIncompleteExpression(java.lang.String,java.lang.String)",
      "117": "CronParserTest::::parseIncompleteExpression(java.lang.String,java.lang.String)",
      "118": "CronParserTest::::parseIncompleteExpression(java.lang.String,java.lang.String)",
      "119": "CronParserTest::::parseIncompleteExpression(java.lang.String,java.lang.String)",
      "120": "CronParserTest::::parseIncompleteExpression(java.lang.String,java.lang.String)",
      "121": "CronParserTest::::parseIncompleteExpression(java.lang.String,java.lang.String)",
      "122": "CronParserTest::::parseIncompleteExpression(java.lang.String,java.lang.String)",
      "132": "CronParserTest::::testMultipleSpacesDoNotHurtParsingExpression()",
      "133": "CronParserTest::::testMultipleSpacesDoNotHurtParsingExpression()",
      "134": "CronParserTest::::testMultipleSpacesDoNotHurtParsingExpression()",
      "135": "CronParserTest::::testMultipleSpacesDoNotHurtParsingExpression()",
      "136": "CronParserTest::::testMultipleSpacesDoNotHurtParsingExpression()",
      "137": "CronParserTest::::testMultipleSpacesDoNotHurtParsingExpression()",
      "138": "CronParserTest::::testMultipleSpacesDoNotHurtParsingExpression()",
      "139": "CronParserTest::::testMultipleSpacesDoNotHurtParsingExpression()",
      "140": "CronParserTest::::testMultipleSpacesDoNotHurtParsingExpression()",
      "141": "CronParserTest::::testMultipleSpacesDoNotHurtParsingExpression()",
      "142": "CronParserTest::::testMultipleSpacesDoNotHurtParsingExpression()",
      "143": "CronParserTest::::testMultipleSpacesDoNotHurtParsingExpression()",
      "144": "CronParserTest::::testMultipleSpacesDoNotHurtParsingExpression()",
      "145": "CronParserTest::::testMultipleSpacesDoNotHurtParsingExpression()",
      "146": "CronParserTest::::testMultipleSpacesDoNotHurtParsingExpression()",
      "147": "CronParserTest::::testMultipleSpacesDoNotHurtParsingExpression()",
      "148": "CronParserTest::::testMultipleSpacesDoNotHurtParsingExpression()",
      "149": "CronParserTest::::testMultipleSpacesDoNotHurtParsingExpression()",
      "150": "CronParserTest::::testMultipleSpacesDoNotHurtParsingExpression()",
      "151": "CronParserTest::::testMultipleSpacesDoNotHurtParsingExpression()",
      "152": "CronParserTest::::testMultipleSpacesDoNotHurtParsingExpression()",
      "153": "CronParserTest::::testMultipleSpacesDoNotHurtParsingExpression()",
      "154": "CronParserTest::::testMultipleSpacesDoNotHurtParsingExpression()",
      "160": "CronParserTest::::testParseEveryXyears()",
      "161": "CronParserTest::::testParseEveryXyears()",
      "162": "CronParserTest::::testParseEveryXyears()",
      "163": "CronParserTest::::testParseEveryXyears()",
      "164": "CronParserTest::::testParseEveryXyears()",
      "165": "CronParserTest::::testParseEveryXyears()",
      "166": "CronParserTest::::testParseEveryXyears()",
      "168": "CronParserTest::::testRejectionOfZeroPeriod()",
      "169": "CronParserTest::::testRejectionOfZeroPeriod()",
      "170": "CronParserTest::::testRejectionOfZeroPeriod()",
      "171": "CronParserTest::::testRejectionOfZeroPeriod()",
      "172": "CronParserTest::::testRejectionOfZeroPeriod()",
      "173": "CronParserTest::::testRejectionOfZeroPeriod()",
      "174": "CronParserTest::::testRejectionOfZeroPeriod()",
      "176": "CronParserTest::::testRejectionOfPeriodUpperLimitExceedance()",
      "177": "CronParserTest::::testRejectionOfPeriodUpperLimitExceedance()",
      "178": "CronParserTest::::testRejectionOfPeriodUpperLimitExceedance()",
      "179": "CronParserTest::::testRejectionOfPeriodUpperLimitExceedance()",
      "180": "CronParserTest::::testRejectionOfPeriodUpperLimitExceedance()",
      "181": "CronParserTest::::testRejectionOfPeriodUpperLimitExceedance()",
      "183": "CronParserTest::::testParseExtendedQuartzCron()",
      "184": "CronParserTest::::testParseExtendedQuartzCron()",
      "185": "CronParserTest::::testParseExtendedQuartzCron()",
      "186": "CronParserTest::::testParseExtendedQuartzCron()",
      "187": "CronParserTest::::testParseExtendedQuartzCron()",
      "189": "CronParserTest::::testThatEveryMinuteIsPreserved()",
      "190": "CronParserTest::::testThatEveryMinuteIsPreserved()",
      "191": "CronParserTest::::testThatEveryMinuteIsPreserved()",
      "192": "CronParserTest::::testThatEveryMinuteIsPreserved()",
      "193": "CronParserTest::::testThatEveryMinuteIsPreserved()",
      "194": "CronParserTest::::testThatEveryMinuteIsPreserved()",
      "195": "CronParserTest::::testThatEveryMinuteIsPreserved()",
      "196": "CronParserTest::::testThatEveryMinuteIsPreserved()",
      "198": "CronParserTest::::testParseExtendedQuartzCronWithAsterixDoY()",
      "199": "CronParserTest::::testParseExtendedQuartzCronWithAsterixDoY()",
      "200": "CronParserTest::::testParseExtendedQuartzCronWithAsterixDoY()",
      "201": "CronParserTest::::testParseExtendedQuartzCronWithAsterixDoY()",
      "202": "CronParserTest::::testParseExtendedQuartzCronWithAsterixDoY()",
      "204": "CronParserTest::::testParseExtendedQuartzCronWithQuestionMarkDoY()",
      "205": "CronParserTest::::testParseExtendedQuartzCronWithQuestionMarkDoY()",
      "206": "CronParserTest::::testParseExtendedQuartzCronWithQuestionMarkDoY()",
      "207": "CronParserTest::::testParseExtendedQuartzCronWithQuestionMarkDoY()",
      "208": "CronParserTest::::testParseExtendedQuartzCronWithQuestionMarkDoY()",
      "210": "CronParserTest::::testParseMulticron()",
      "211": "CronParserTest::::testParseMulticron()",
      "212": "CronParserTest::::testParseMulticron()",
      "213": "CronParserTest::::testParseMulticron()",
      "214": "CronParserTest::::testParseMulticron()",
      "215": "CronParserTest::::testParseMulticron()",
      "216": "CronParserTest::::testParseMulticron()",
      "218": "CronParserTest::::testParseQuartzCronWithHash()",
      "219": "CronParserTest::::testParseQuartzCronWithHash()",
      "220": "CronParserTest::::testParseQuartzCronWithHash()",
      "221": "CronParserTest::::testParseQuartzCronWithHash()",
      "222": "CronParserTest::::testParseQuartzCronWithHash()"
    },
    "tests": [
      {
        "test_lines": [
          49,
          55
        ],
        "covered_lines": [
          37,
          43,
          44,
          45,
          46,
          54,
          55,
          56,
          57,
          59,
          61,
          69,
          70,
          77,
          95,
          96,
          97,
          98
        ]
      },
      {
        "test_lines": [
          57,
          65
        ],
        "covered_lines": [
          37,
          43,
          44,
          45,
          46,
          54,
          55,
          56,
          57,
          59,
          61,
          69,
          70,
          73,
          77,
          95,
          96,
          97,
          101,
          102,
          126,
          130,
          146,
          147,
          148,
          149,
          152,
          153,
          154,
          155
        ]
      },
      {
        "test_lines": [
          67,
          70
        ],
        "covered_lines": [
          37,
          43,
          44,
          45,
          46,
          54,
          55,
          56,
          57,
          59,
          61,
          69,
          70,
          73,
          77,
          95,
          96,
          97,
          101,
          102,
          126,
          130,
          146,
          147,
          148,
          149,
          152,
          153,
          158,
          159,
          160,
          164,
          165
        ]
      },
      {
        "test_lines": [
          79,
          82
        ],
        "covered_lines": [
          37,
          43,
          44,
          45,
          46,
          54,
          55,
          56,
          57,
          59,
          61,
          69,
          70,
          73,
          77,
          95,
          96,
          97,
          101,
          102,
          126,
          130,
          146,
          147,
          148,
          149,
          150
        ]
      },
      {
        "test_lines": [
          84,
          87
        ],
        "covered_lines": [
          37,
          43,
          44,
          45,
          46,
          54,
          55,
          56,
          57,
          59,
          61,
          62,
          63,
          65,
          66,
          67,
          69,
          70,
          73,
          77,
          95,
          96,
          97,
          101,
          102,
          126,
          130,
          146,
          147,
          148,
          149,
          150
        ]
      },
      {
        "test_lines": [
          89,
          92
        ],
        "covered_lines": [
          37,
          43,
          44,
          45,
          46,
          54,
          55,
          56,
          57,
          59,
          61,
          69,
          70,
          73,
          77,
          95,
          96,
          97,
          101,
          102,
          126,
          130,
          146,
          147,
          148,
          149,
          150
        ]
      },
      {
        "test_lines": [
          94,
          97
        ],
        "covered_lines": [
          37,
          43,
          44,
          45,
          46,
          54,
          55,
          56,
          57,
          59,
          61,
          69,
          70,
          73,
          77,
          95,
          96,
          97,
          101,
          102,
          126,
          130,
          146,
          147,
          148,
          149,
          150
        ]
      },
      {
        "test_lines": [
          99,
          102
        ],
        "covered_lines": [
          37,
          43,
          44,
          45,
          46,
          54,
          55,
          56,
          57,
          59,
          61,
          69,
          70,
          73,
          77,
          95,
          96,
          97,
          101,
          102,
          126,
          130,
          146,
          147,
          148,
          149,
          152,
          153,
          154,
          155
        ]
      },
      {
        "test_lines": [
          104,
          107
        ],
        "covered_lines": [
          37,
          43,
          44,
          45,
          46,
          54,
          55,
          56,
          57,
          59,
          61,
          69,
          70,
          73,
          77,
          95,
          96,
          97,
          101,
          102,
          126,
          130,
          146,
          147,
          148,
          149,
          152,
          153,
          158,
          159,
          160,
          164,
          165
        ]
      },
      {
        "test_lines": [
          109,
          112
        ],
        "covered_lines": [
          37,
          43,
          44,
          45,
          46,
          54,
          55,
          56,
          57,
          59,
          61,
          69,
          70,
          73,
          77,
          95,
          96,
          97,
          101,
          102,
          126,
          130,
          146,
          147,
          148,
          149,
          152,
          153,
          158,
          159,
          160,
          164,
          165
        ]
      },
      {
        "test_lines": [
          132,
          154
        ],
        "covered_lines": [
          37,
          43,
          44,
          45,
          46,
          54,
          55,
          56,
          57,
          59,
          61,
          69,
          70,
          73,
          77,
          95,
          96,
          97,
          101,
          102,
          126,
          130,
          146,
          147,
          148,
          149,
          152,
          153,
          158,
          159,
          160,
          161,
          163
        ]
      },
      {
        "test_lines": [
          160,
          166
        ],
        "covered_lines": [
          37,
          43,
          44,
          45,
          46,
          54,
          55,
          56,
          57,
          59,
          61,
          62,
          63,
          65,
          66,
          67,
          69,
          70,
          73,
          77,
          95,
          96,
          97,
          101,
          102,
          126,
          130,
          146,
          147,
          148,
          149,
          152,
          153,
          158,
          159,
          160,
          161,
          163
        ]
      },
      {
        "test_lines": [
          168,
          174
        ],
        "covered_lines": [
          37,
          43,
          44,
          45,
          46,
          54,
          55,
          56,
          57,
          59,
          61,
          62,
          63,
          65,
          66,
          67,
          69,
          70,
          73,
          77,
          95,
          96,
          97,
          101,
          102,
          126,
          130,
          146,
          147,
          148,
          149,
          152,
          153,
          158,
          159,
          160,
          161,
          164,
          165
        ]
      },
      {
        "test_lines": [
          176,
          181
        ],
        "covered_lines": [
          37,
          43,
          44,
          45,
          46,
          54,
          55,
          56,
          57,
          59,
          61,
          62,
          63,
          65,
          66,
          67,
          69,
          70,
          73,
          77,
          95,
          96,
          97,
          101,
          102,
          126,
          130,
          146,
          147,
          148,
          149,
          152,
          153,
          158,
          159,
          160,
          161,
          164,
          165
        ]
      },
      {
        "test_lines": [
          183,
          187
        ],
        "covered_lines": [
          37,
          43,
          44,
          45,
          46,
          54,
          55,
          56,
          57,
          59,
          61,
          62,
          63,
          65,
          66,
          67,
          69,
          70,
          73,
          77,
          95,
          96,
          97,
          101,
          102,
          126,
          130,
          146,
          147,
          148,
          149,
          152,
          153,
          158,
          159,
          160,
          161,
          163
        ]
      },
      {
        "test_lines": [
          189,
          196
        ],
        "covered_lines": [
          37,
          43,
          44,
          45,
          46,
          54,
          55,
          56,
          57,
          59,
          61,
          62,
          63,
          65,
          66,
          67,
          69,
          70,
          73,
          77,
          95,
          96,
          97,
          101,
          102,
          126,
          130,
          146,
          147,
          148,
          149,
          152,
          153,
          158,
          159,
          160,
          161,
          163
        ]
      },
      {
        "test_lines": [
          198,
          202
        ],
        "covered_lines": [
          37,
          43,
          44,
          45,
          46,
          54,
          55,
          56,
          57,
          59,
          61,
          62,
          63,
          65,
          66,
          67,
          69,
          70,
          73,
          77,
          95,
          96,
          97,
          101,
          102,
          126,
          130,
          146,
          147,
          148,
          149,
          152,
          153,
          158,
          159,
          160,
          161,
          163
        ]
      },
      {
        "test_lines": [
          204,
          208
        ],
        "covered_lines": [
          37,
          43,
          44,
          45,
          46,
          54,
          55,
          56,
          57,
          59,
          61,
          62,
          63,
          65,
          66,
          67,
          69,
          70,
          73,
          77,
          95,
          96,
          97,
          101,
          102,
          126,
          130,
          146,
          147,
          148,
          149,
          152,
          153,
          158,
          159,
          160,
          161,
          163
        ]
      },
      {
        "test_lines": [
          210,
          216
        ],
        "covered_lines": [
          37,
          43,
          44,
          45,
          46,
          54,
          55,
          56,
          57,
          59,
          61,
          62,
          63,
          65,
          66,
          67,
          69,
          70,
          73,
          77,
          95,
          96,
          97,
          101,
          102,
          126,
          130,
          131,
          132,
          133,
          134,
          135,
          136,
          137,
          139,
          142,
          144,
          146,
          147,
          148,
          149,
          152,
          153,
          158,
          159,
          160,
          161,
          163
        ]
      },
      {
        "test_lines": [
          218,
          222
        ],
        "covered_lines": [
          37,
          43,
          44,
          45,
          46,
          54,
          55,
          56,
          57,
          59,
          61,
          62,
          63,
          65,
          66,
          67,
          69,
          70,
          73,
          77,
          95,
          96,
          97,
          101,
          102,
          126,
          130,
          146,
          147,
          148,
          149,
          152,
          153,
          158,
          159,
          160,
          161,
          164,
          165
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/cron-utils/src/main/java/com/cronutils/mapper/ConstantsMapper.java": {
    "class_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.mapper;\n",
      "\n",
      "public class ConstantsMapper {\n",
      "    public static final WeekDay QUARTZ_WEEK_DAY = new WeekDay(2, false);\n",
      "    public static final WeekDay JAVA8 = new WeekDay(1, false);\n",
      "    public static final WeekDay CRONTAB_WEEK_DAY = new WeekDay(1, true);\n",
      "\n",
      "    private ConstantsMapper() {}\n",
      "\n",
      "    /**\n",
      "     * Performs weekday mapping between two weekday definitions.\n",
      "     *\n",
      "     * @param source  - source\n",
      "     * @param target  - target weekday definition\n",
      "     * @param weekday - value in source range.\n",
      "     * @return int - mapped value\n",
      "     */\n",
      "    public static int weekDayMapping(final WeekDay source, final WeekDay target, final int weekday) {\n",
      "        return source.mapTo(weekday, target);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.mapper;\n",
      "\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.assertEquals;\n",
      "\n",
      "public class ConstantsMapperTest {\n",
      "\n",
      "    @Test\n",
      "    public void testWeekDayMappingQuartzToJDK8time() {\n",
      "        final WeekDay quartz = ConstantsMapper.QUARTZ_WEEK_DAY;\n",
      "        final WeekDay jdktime = ConstantsMapper.JAVA8;\n",
      "        for (int j = 2; j < 8; j++) {\n",
      "            assertEquals(j - 1L, ConstantsMapper.weekDayMapping(quartz, jdktime, j));\n",
      "        }\n",
      "        assertEquals(7, ConstantsMapper.weekDayMapping(quartz, jdktime, 1));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testWeekDayMappingJDK8ToQuartz() {\n",
      "        final WeekDay quartz = ConstantsMapper.QUARTZ_WEEK_DAY;\n",
      "        final WeekDay jdktime = ConstantsMapper.JAVA8;\n",
      "        for (int j = 1; j < 7; j++) {\n",
      "            assertEquals(j + 1L, ConstantsMapper.weekDayMapping(jdktime, quartz, j));\n",
      "        }\n",
      "        assertEquals(1, ConstantsMapper.weekDayMapping(jdktime, quartz, 7));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testWeekDayMappingQuartzToCrontab() {\n",
      "        final WeekDay quartz = ConstantsMapper.QUARTZ_WEEK_DAY;\n",
      "        final WeekDay crontab = ConstantsMapper.CRONTAB_WEEK_DAY;\n",
      "        for (int j = 1; j < 7; j++) {\n",
      "            assertEquals(j - 1L, ConstantsMapper.weekDayMapping(quartz, crontab, j));\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testWeekDayMappingCrontabToQuartz() {\n",
      "        final WeekDay quartz = ConstantsMapper.QUARTZ_WEEK_DAY;\n",
      "        final WeekDay crontab = ConstantsMapper.CRONTAB_WEEK_DAY;\n",
      "        for (int j = 0; j < 7; j++) {\n",
      "            assertEquals(j + 1L, ConstantsMapper.weekDayMapping(crontab, quartz, j));\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testWeekDayMappingCrontabToJDK8() {\n",
      "        final WeekDay crontab = ConstantsMapper.CRONTAB_WEEK_DAY;\n",
      "        final WeekDay jdktime = ConstantsMapper.JAVA8;\n",
      "        for (int j = 1; j < 7; j++) {\n",
      "            assertEquals(j, ConstantsMapper.weekDayMapping(crontab, jdktime, j));\n",
      "        }\n",
      "        assertEquals(7, ConstantsMapper.weekDayMapping(crontab, jdktime, 0));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testWeekDayMappingJDK8ToCrontab() {\n",
      "        final WeekDay crontab = ConstantsMapper.CRONTAB_WEEK_DAY;\n",
      "        final WeekDay jdktime = ConstantsMapper.JAVA8;\n",
      "        for (int j = 1; j < 7; j++) {\n",
      "            assertEquals(j, ConstantsMapper.weekDayMapping(jdktime, crontab, j));\n",
      "        }\n",
      "        assertEquals(0, ConstantsMapper.weekDayMapping(jdktime, crontab, 7));\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "ConstantsMapper::::weekDayMapping(com.cronutils.mapper.WeekDay,com.cronutils.mapper.WeekDay,int)": [
        31,
        33
      ]
    },
    "test_method_lines_dic": {
      "ConstantsMapperTest::::testWeekDayMappingQuartzToJDK8time()": [
        22,
        30
      ],
      "ConstantsMapperTest::::testWeekDayMappingJDK8ToQuartz()": [
        32,
        40
      ],
      "ConstantsMapperTest::::testWeekDayMappingQuartzToCrontab()": [
        42,
        49
      ],
      "ConstantsMapperTest::::testWeekDayMappingCrontabToQuartz()": [
        51,
        58
      ],
      "ConstantsMapperTest::::testWeekDayMappingCrontabToJDK8()": [
        60,
        68
      ],
      "ConstantsMapperTest::::testWeekDayMappingJDK8ToCrontab()": [
        70,
        78
      ]
    },
    "reverse_method_lines_dic": {
      "31": "ConstantsMapper::::weekDayMapping(com.cronutils.mapper.WeekDay,com.cronutils.mapper.WeekDay,int)",
      "32": "ConstantsMapper::::weekDayMapping(com.cronutils.mapper.WeekDay,com.cronutils.mapper.WeekDay,int)",
      "33": "ConstantsMapper::::weekDayMapping(com.cronutils.mapper.WeekDay,com.cronutils.mapper.WeekDay,int)"
    },
    "test_reverse_method_lines_dic": {
      "22": "ConstantsMapperTest::::testWeekDayMappingQuartzToJDK8time()",
      "23": "ConstantsMapperTest::::testWeekDayMappingQuartzToJDK8time()",
      "24": "ConstantsMapperTest::::testWeekDayMappingQuartzToJDK8time()",
      "25": "ConstantsMapperTest::::testWeekDayMappingQuartzToJDK8time()",
      "26": "ConstantsMapperTest::::testWeekDayMappingQuartzToJDK8time()",
      "27": "ConstantsMapperTest::::testWeekDayMappingQuartzToJDK8time()",
      "28": "ConstantsMapperTest::::testWeekDayMappingQuartzToJDK8time()",
      "29": "ConstantsMapperTest::::testWeekDayMappingQuartzToJDK8time()",
      "30": "ConstantsMapperTest::::testWeekDayMappingQuartzToJDK8time()",
      "32": "ConstantsMapperTest::::testWeekDayMappingJDK8ToQuartz()",
      "33": "ConstantsMapperTest::::testWeekDayMappingJDK8ToQuartz()",
      "34": "ConstantsMapperTest::::testWeekDayMappingJDK8ToQuartz()",
      "35": "ConstantsMapperTest::::testWeekDayMappingJDK8ToQuartz()",
      "36": "ConstantsMapperTest::::testWeekDayMappingJDK8ToQuartz()",
      "37": "ConstantsMapperTest::::testWeekDayMappingJDK8ToQuartz()",
      "38": "ConstantsMapperTest::::testWeekDayMappingJDK8ToQuartz()",
      "39": "ConstantsMapperTest::::testWeekDayMappingJDK8ToQuartz()",
      "40": "ConstantsMapperTest::::testWeekDayMappingJDK8ToQuartz()",
      "42": "ConstantsMapperTest::::testWeekDayMappingQuartzToCrontab()",
      "43": "ConstantsMapperTest::::testWeekDayMappingQuartzToCrontab()",
      "44": "ConstantsMapperTest::::testWeekDayMappingQuartzToCrontab()",
      "45": "ConstantsMapperTest::::testWeekDayMappingQuartzToCrontab()",
      "46": "ConstantsMapperTest::::testWeekDayMappingQuartzToCrontab()",
      "47": "ConstantsMapperTest::::testWeekDayMappingQuartzToCrontab()",
      "48": "ConstantsMapperTest::::testWeekDayMappingQuartzToCrontab()",
      "49": "ConstantsMapperTest::::testWeekDayMappingQuartzToCrontab()",
      "51": "ConstantsMapperTest::::testWeekDayMappingCrontabToQuartz()",
      "52": "ConstantsMapperTest::::testWeekDayMappingCrontabToQuartz()",
      "53": "ConstantsMapperTest::::testWeekDayMappingCrontabToQuartz()",
      "54": "ConstantsMapperTest::::testWeekDayMappingCrontabToQuartz()",
      "55": "ConstantsMapperTest::::testWeekDayMappingCrontabToQuartz()",
      "56": "ConstantsMapperTest::::testWeekDayMappingCrontabToQuartz()",
      "57": "ConstantsMapperTest::::testWeekDayMappingCrontabToQuartz()",
      "58": "ConstantsMapperTest::::testWeekDayMappingCrontabToQuartz()",
      "60": "ConstantsMapperTest::::testWeekDayMappingCrontabToJDK8()",
      "61": "ConstantsMapperTest::::testWeekDayMappingCrontabToJDK8()",
      "62": "ConstantsMapperTest::::testWeekDayMappingCrontabToJDK8()",
      "63": "ConstantsMapperTest::::testWeekDayMappingCrontabToJDK8()",
      "64": "ConstantsMapperTest::::testWeekDayMappingCrontabToJDK8()",
      "65": "ConstantsMapperTest::::testWeekDayMappingCrontabToJDK8()",
      "66": "ConstantsMapperTest::::testWeekDayMappingCrontabToJDK8()",
      "67": "ConstantsMapperTest::::testWeekDayMappingCrontabToJDK8()",
      "68": "ConstantsMapperTest::::testWeekDayMappingCrontabToJDK8()",
      "70": "ConstantsMapperTest::::testWeekDayMappingJDK8ToCrontab()",
      "71": "ConstantsMapperTest::::testWeekDayMappingJDK8ToCrontab()",
      "72": "ConstantsMapperTest::::testWeekDayMappingJDK8ToCrontab()",
      "73": "ConstantsMapperTest::::testWeekDayMappingJDK8ToCrontab()",
      "74": "ConstantsMapperTest::::testWeekDayMappingJDK8ToCrontab()",
      "75": "ConstantsMapperTest::::testWeekDayMappingJDK8ToCrontab()",
      "76": "ConstantsMapperTest::::testWeekDayMappingJDK8ToCrontab()",
      "77": "ConstantsMapperTest::::testWeekDayMappingJDK8ToCrontab()",
      "78": "ConstantsMapperTest::::testWeekDayMappingJDK8ToCrontab()"
    },
    "tests": [
      {
        "test_lines": [
          22,
          30
        ],
        "covered_lines": [
          17,
          18,
          19,
          32
        ]
      },
      {
        "test_lines": [
          32,
          40
        ],
        "covered_lines": [
          17,
          18,
          19,
          32
        ]
      },
      {
        "test_lines": [
          42,
          49
        ],
        "covered_lines": [
          17,
          18,
          19,
          32
        ]
      },
      {
        "test_lines": [
          51,
          58
        ],
        "covered_lines": [
          17,
          18,
          19,
          32
        ]
      },
      {
        "test_lines": [
          60,
          68
        ],
        "covered_lines": [
          17,
          18,
          19,
          32
        ]
      },
      {
        "test_lines": [
          70,
          78
        ],
        "covered_lines": [
          17,
          18,
          19,
          32
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/cron-utils/src/main/java/com/cronutils/mapper/WeekDay.java": {
    "class_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.mapper;\n",
      "\n",
      "import com.cronutils.Function;\n",
      "import com.cronutils.utils.Preconditions;\n",
      "import com.cronutils.utils.VisibleForTesting;\n",
      "\n",
      "import java.io.Serializable;\n",
      "\n",
      "@VisibleForTesting\n",
      "public class WeekDay implements Serializable {\n",
      "\n",
      "    private static final long serialVersionUID = -1542525283511798919L;\n",
      "    private final int mondayDoWValue;\n",
      "    private final boolean firstDayZero;\n",
      "\n",
      "    public WeekDay(final int mondayDoWValue, final boolean firstDayZero) {\n",
      "        Preconditions.checkArgument(mondayDoWValue >= 0, \"Monday Day of Week value must be greater or equal to zero\");\n",
      "        this.mondayDoWValue = mondayDoWValue;\n",
      "        this.firstDayZero = firstDayZero;\n",
      "    }\n",
      "\n",
      "    public int getMondayDoWValue() {\n",
      "        return mondayDoWValue;\n",
      "    }\n",
      "\n",
      "    public boolean isFirstDayZero() {\n",
      "        return firstDayZero;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Maps given WeekDay to representation hold by this instance.\n",
      "     *\n",
      "     * @param targetWeekDayDefinition - referred weekDay\n",
      "     * @param dayOfWeek               - day of week to be mapped.\n",
      "     *                                Value corresponds to this instance mapping.\n",
      "     * @return - int result\n",
      "     */\n",
      "    public int mapTo(final int dayOfWeek, final WeekDay targetWeekDayDefinition) {\n",
      "        if (firstDayZero && targetWeekDayDefinition.isFirstDayZero()) {\n",
      "            return bothSameStartOfRange(0, 6, this, targetWeekDayDefinition).apply(dayOfWeek);\n",
      "        }\n",
      "        if (!firstDayZero && !targetWeekDayDefinition.isFirstDayZero()) {\n",
      "            return bothSameStartOfRange(1, 7, this, targetWeekDayDefinition).apply(dayOfWeek);\n",
      "        }\n",
      "        //start range is different for each case. We need to normalize ranges\n",
      "        if (targetWeekDayDefinition.isFirstDayZero()) {\n",
      "            //my range is 1-7. I normalize ranges, get the \"zero\" mapping and turn result into original scale\n",
      "            return mapTo(dayOfWeek, new WeekDay(targetWeekDayDefinition.getMondayDoWValue() + 1, false)) - 1;\n",
      "        } else {\n",
      "            //my range is 0-6. I normalize ranges, get the \"one\" mapping and turn result into original scale\n",
      "            return (mapTo(dayOfWeek, new WeekDay(targetWeekDayDefinition.getMondayDoWValue() - 1, true))) % 7 + 1;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private Function<Integer, Integer> bothSameStartOfRange(final int startRange, final int endRange, final WeekDay source, final WeekDay target) {\n",
      "        return integer -> {\n",
      "            final int diff = target.getMondayDoWValue() - source.getMondayDoWValue();\n",
      "            int result = integer;\n",
      "            if (diff == 0) {\n",
      "                return integer;\n",
      "            }\n",
      "            if (diff < 0) {\n",
      "                result = integer + diff;\n",
      "                final int distanceToStartRange = startRange - result;\n",
      "                if (result < startRange) {\n",
      "                    result = endRange + 1 - distanceToStartRange;\n",
      "                }\n",
      "            }\n",
      "            if (diff > 0) {\n",
      "                result = integer + diff;\n",
      "                if (result > endRange) {\n",
      "                    result -= endRange;\n",
      "                }\n",
      "            }\n",
      "            return result;\n",
      "        };\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.mapper;\n",
      "\n",
      "import org.junit.jupiter.api.BeforeEach;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.assertEquals;\n",
      "import static org.junit.jupiter.api.Assertions.assertThrows;\n",
      "\n",
      "\n",
      "public class WeekDayTest {\n",
      "    private WeekDay source;\n",
      "    private static final int MONDAY_DOW_VALUE = 1;\n",
      "    private static final boolean IS_FIRST_DAY_ZERO = false;\n",
      "\n",
      "    @BeforeEach\n",
      "    public void setUp() {\n",
      "        source = new WeekDay(MONDAY_DOW_VALUE, IS_FIRST_DAY_ZERO);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testConstructorFailsIfMondayDoWNegative() {\n",
      "        assertThrows(IllegalArgumentException.class, () -> new WeekDay(-1, IS_FIRST_DAY_ZERO));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGetMondayDoWValue() {\n",
      "        assertEquals(MONDAY_DOW_VALUE, source.getMondayDoWValue());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testMapIntervalWithZeroNotStartingMonday() {\n",
      "        final WeekDay target = new WeekDay(1, true);\n",
      "        assertEquals(0, source.mapTo(7, target));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testMapIntervalWithZeroStartingMonday() {\n",
      "        final WeekDay target = new WeekDay(0, true);\n",
      "        assertEquals(0, source.mapTo(1, target));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testMapIntervalWithoutZeroStartingMonday() {\n",
      "        final int value = 7;\n",
      "        final WeekDay target = new WeekDay(1, false);\n",
      "        assertEquals(value, source.mapTo(value, target));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testMapIntervalWithoutZeroStartingSunday() {\n",
      "        final int value = 7;\n",
      "        final WeekDay target = new WeekDay(2, false);\n",
      "        assertEquals(1, source.mapTo(value, target));\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "WeekDay::::getMondayDoWValue()": [
        35,
        37
      ],
      "WeekDay::::isFirstDayZero()": [
        39,
        41
      ],
      "WeekDay::::mapTo(int,com.cronutils.mapper.WeekDay)": [
        51,
        66
      ],
      "WeekDay::::bothSameStartOfRange(int,int,com.cronutils.mapper.WeekDay,com.cronutils.mapper.WeekDay)": [
        68,
        90
      ]
    },
    "test_method_lines_dic": {
      "WeekDayTest::::setUp()": [
        28,
        31
      ],
      "WeekDayTest::::testConstructorFailsIfMondayDoWNegative()": [
        33,
        36
      ],
      "WeekDayTest::::testGetMondayDoWValue()": [
        38,
        41
      ],
      "WeekDayTest::::testMapIntervalWithZeroNotStartingMonday()": [
        43,
        47
      ],
      "WeekDayTest::::testMapIntervalWithZeroStartingMonday()": [
        49,
        53
      ],
      "WeekDayTest::::testMapIntervalWithoutZeroStartingMonday()": [
        55,
        60
      ],
      "WeekDayTest::::testMapIntervalWithoutZeroStartingSunday()": [
        62,
        67
      ]
    },
    "reverse_method_lines_dic": {
      "35": "WeekDay::::getMondayDoWValue()",
      "36": "WeekDay::::getMondayDoWValue()",
      "37": "WeekDay::::getMondayDoWValue()",
      "39": "WeekDay::::isFirstDayZero()",
      "40": "WeekDay::::isFirstDayZero()",
      "41": "WeekDay::::isFirstDayZero()",
      "51": "WeekDay::::mapTo(int,com.cronutils.mapper.WeekDay)",
      "52": "WeekDay::::mapTo(int,com.cronutils.mapper.WeekDay)",
      "53": "WeekDay::::mapTo(int,com.cronutils.mapper.WeekDay)",
      "54": "WeekDay::::mapTo(int,com.cronutils.mapper.WeekDay)",
      "55": "WeekDay::::mapTo(int,com.cronutils.mapper.WeekDay)",
      "56": "WeekDay::::mapTo(int,com.cronutils.mapper.WeekDay)",
      "57": "WeekDay::::mapTo(int,com.cronutils.mapper.WeekDay)",
      "58": "WeekDay::::mapTo(int,com.cronutils.mapper.WeekDay)",
      "59": "WeekDay::::mapTo(int,com.cronutils.mapper.WeekDay)",
      "60": "WeekDay::::mapTo(int,com.cronutils.mapper.WeekDay)",
      "61": "WeekDay::::mapTo(int,com.cronutils.mapper.WeekDay)",
      "62": "WeekDay::::mapTo(int,com.cronutils.mapper.WeekDay)",
      "63": "WeekDay::::mapTo(int,com.cronutils.mapper.WeekDay)",
      "64": "WeekDay::::mapTo(int,com.cronutils.mapper.WeekDay)",
      "65": "WeekDay::::mapTo(int,com.cronutils.mapper.WeekDay)",
      "66": "WeekDay::::mapTo(int,com.cronutils.mapper.WeekDay)",
      "68": "WeekDay::::bothSameStartOfRange(int,int,com.cronutils.mapper.WeekDay,com.cronutils.mapper.WeekDay)",
      "69": "WeekDay::::bothSameStartOfRange(int,int,com.cronutils.mapper.WeekDay,com.cronutils.mapper.WeekDay)",
      "70": "WeekDay::::bothSameStartOfRange(int,int,com.cronutils.mapper.WeekDay,com.cronutils.mapper.WeekDay)",
      "71": "WeekDay::::bothSameStartOfRange(int,int,com.cronutils.mapper.WeekDay,com.cronutils.mapper.WeekDay)",
      "72": "WeekDay::::bothSameStartOfRange(int,int,com.cronutils.mapper.WeekDay,com.cronutils.mapper.WeekDay)",
      "73": "WeekDay::::bothSameStartOfRange(int,int,com.cronutils.mapper.WeekDay,com.cronutils.mapper.WeekDay)",
      "74": "WeekDay::::bothSameStartOfRange(int,int,com.cronutils.mapper.WeekDay,com.cronutils.mapper.WeekDay)",
      "75": "WeekDay::::bothSameStartOfRange(int,int,com.cronutils.mapper.WeekDay,com.cronutils.mapper.WeekDay)",
      "76": "WeekDay::::bothSameStartOfRange(int,int,com.cronutils.mapper.WeekDay,com.cronutils.mapper.WeekDay)",
      "77": "WeekDay::::bothSameStartOfRange(int,int,com.cronutils.mapper.WeekDay,com.cronutils.mapper.WeekDay)",
      "78": "WeekDay::::bothSameStartOfRange(int,int,com.cronutils.mapper.WeekDay,com.cronutils.mapper.WeekDay)",
      "79": "WeekDay::::bothSameStartOfRange(int,int,com.cronutils.mapper.WeekDay,com.cronutils.mapper.WeekDay)",
      "80": "WeekDay::::bothSameStartOfRange(int,int,com.cronutils.mapper.WeekDay,com.cronutils.mapper.WeekDay)",
      "81": "WeekDay::::bothSameStartOfRange(int,int,com.cronutils.mapper.WeekDay,com.cronutils.mapper.WeekDay)",
      "82": "WeekDay::::bothSameStartOfRange(int,int,com.cronutils.mapper.WeekDay,com.cronutils.mapper.WeekDay)",
      "83": "WeekDay::::bothSameStartOfRange(int,int,com.cronutils.mapper.WeekDay,com.cronutils.mapper.WeekDay)",
      "84": "WeekDay::::bothSameStartOfRange(int,int,com.cronutils.mapper.WeekDay,com.cronutils.mapper.WeekDay)",
      "85": "WeekDay::::bothSameStartOfRange(int,int,com.cronutils.mapper.WeekDay,com.cronutils.mapper.WeekDay)",
      "86": "WeekDay::::bothSameStartOfRange(int,int,com.cronutils.mapper.WeekDay,com.cronutils.mapper.WeekDay)",
      "87": "WeekDay::::bothSameStartOfRange(int,int,com.cronutils.mapper.WeekDay,com.cronutils.mapper.WeekDay)",
      "88": "WeekDay::::bothSameStartOfRange(int,int,com.cronutils.mapper.WeekDay,com.cronutils.mapper.WeekDay)",
      "89": "WeekDay::::bothSameStartOfRange(int,int,com.cronutils.mapper.WeekDay,com.cronutils.mapper.WeekDay)",
      "90": "WeekDay::::bothSameStartOfRange(int,int,com.cronutils.mapper.WeekDay,com.cronutils.mapper.WeekDay)"
    },
    "test_reverse_method_lines_dic": {
      "28": "WeekDayTest::::setUp()",
      "29": "WeekDayTest::::setUp()",
      "30": "WeekDayTest::::setUp()",
      "31": "WeekDayTest::::setUp()",
      "33": "WeekDayTest::::testConstructorFailsIfMondayDoWNegative()",
      "34": "WeekDayTest::::testConstructorFailsIfMondayDoWNegative()",
      "35": "WeekDayTest::::testConstructorFailsIfMondayDoWNegative()",
      "36": "WeekDayTest::::testConstructorFailsIfMondayDoWNegative()",
      "38": "WeekDayTest::::testGetMondayDoWValue()",
      "39": "WeekDayTest::::testGetMondayDoWValue()",
      "40": "WeekDayTest::::testGetMondayDoWValue()",
      "41": "WeekDayTest::::testGetMondayDoWValue()",
      "43": "WeekDayTest::::testMapIntervalWithZeroNotStartingMonday()",
      "44": "WeekDayTest::::testMapIntervalWithZeroNotStartingMonday()",
      "45": "WeekDayTest::::testMapIntervalWithZeroNotStartingMonday()",
      "46": "WeekDayTest::::testMapIntervalWithZeroNotStartingMonday()",
      "47": "WeekDayTest::::testMapIntervalWithZeroNotStartingMonday()",
      "49": "WeekDayTest::::testMapIntervalWithZeroStartingMonday()",
      "50": "WeekDayTest::::testMapIntervalWithZeroStartingMonday()",
      "51": "WeekDayTest::::testMapIntervalWithZeroStartingMonday()",
      "52": "WeekDayTest::::testMapIntervalWithZeroStartingMonday()",
      "53": "WeekDayTest::::testMapIntervalWithZeroStartingMonday()",
      "55": "WeekDayTest::::testMapIntervalWithoutZeroStartingMonday()",
      "56": "WeekDayTest::::testMapIntervalWithoutZeroStartingMonday()",
      "57": "WeekDayTest::::testMapIntervalWithoutZeroStartingMonday()",
      "58": "WeekDayTest::::testMapIntervalWithoutZeroStartingMonday()",
      "59": "WeekDayTest::::testMapIntervalWithoutZeroStartingMonday()",
      "60": "WeekDayTest::::testMapIntervalWithoutZeroStartingMonday()",
      "62": "WeekDayTest::::testMapIntervalWithoutZeroStartingSunday()",
      "63": "WeekDayTest::::testMapIntervalWithoutZeroStartingSunday()",
      "64": "WeekDayTest::::testMapIntervalWithoutZeroStartingSunday()",
      "65": "WeekDayTest::::testMapIntervalWithoutZeroStartingSunday()",
      "66": "WeekDayTest::::testMapIntervalWithoutZeroStartingSunday()",
      "67": "WeekDayTest::::testMapIntervalWithoutZeroStartingSunday()"
    },
    "tests": [
      {
        "test_lines": [
          33,
          36
        ],
        "covered_lines": [
          29,
          30,
          31,
          32,
          33
        ]
      },
      {
        "test_lines": [
          38,
          41
        ],
        "covered_lines": [
          29,
          30,
          31,
          32,
          33,
          36
        ]
      },
      {
        "test_lines": [
          43,
          47
        ],
        "covered_lines": [
          29,
          30,
          31,
          32,
          33,
          36,
          40,
          52,
          55,
          56,
          59,
          61,
          69,
          70,
          71,
          72,
          75,
          82,
          83,
          84,
          85,
          88
        ]
      },
      {
        "test_lines": [
          49,
          53
        ],
        "covered_lines": [
          29,
          30,
          31,
          32,
          33,
          36,
          40,
          52,
          55,
          56,
          59,
          61,
          69,
          70,
          71,
          72,
          73
        ]
      },
      {
        "test_lines": [
          55,
          60
        ],
        "covered_lines": [
          29,
          30,
          31,
          32,
          33,
          36,
          40,
          52,
          55,
          56,
          69,
          70,
          71,
          72,
          73
        ]
      },
      {
        "test_lines": [
          62,
          67
        ],
        "covered_lines": [
          29,
          30,
          31,
          32,
          33,
          36,
          40,
          52,
          55,
          56,
          69,
          70,
          71,
          72,
          75,
          82,
          83,
          84,
          85,
          88
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/cron-utils/src/main/java/com/cronutils/mapper/CronMapper.java": {
    "class_content": [
      "/*\n",
      " * Copyright 2014 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.mapper;\n",
      "\n",
      "import com.cronutils.Function;\n",
      "import com.cronutils.model.Cron;\n",
      "import com.cronutils.model.CronType;\n",
      "import com.cronutils.model.RebootCron;\n",
      "import com.cronutils.model.SingleCron;\n",
      "import com.cronutils.model.definition.CronDefinition;\n",
      "import com.cronutils.model.definition.CronDefinitionBuilder;\n",
      "import com.cronutils.model.definition.CronNicknames;\n",
      "import com.cronutils.model.field.CronField;\n",
      "import com.cronutils.model.field.CronFieldName;\n",
      "import com.cronutils.model.field.constraint.FieldConstraints;\n",
      "import com.cronutils.model.field.constraint.FieldConstraintsBuilder;\n",
      "import com.cronutils.model.field.definition.DayOfWeekFieldDefinition;\n",
      "import com.cronutils.model.field.definition.FieldDefinition;\n",
      "import com.cronutils.model.field.expression.*;\n",
      "import com.cronutils.model.field.expression.visitor.FieldExpressionVisitorAdaptor;\n",
      "import com.cronutils.model.field.expression.visitor.ValueMappingFieldExpressionVisitor;\n",
      "import com.cronutils.model.field.value.FieldValue;\n",
      "import com.cronutils.model.field.value.IntegerFieldValue;\n",
      "import com.cronutils.model.field.value.SpecialChar;\n",
      "import com.cronutils.utils.Preconditions;\n",
      "import com.cronutils.utils.VisibleForTesting;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.EnumMap;\n",
      "import java.util.List;\n",
      "import java.util.Map;\n",
      "\n",
      "import static com.cronutils.model.field.expression.FieldExpression.always;\n",
      "import static com.cronutils.model.field.expression.FieldExpression.questionMark;\n",
      "\n",
      "public class CronMapper {\n",
      "    private final Map<CronFieldName, Function<CronField, CronField>> mappings;\n",
      "    private final Function<Cron, Cron> cronRules;\n",
      "    private final CronDefinition to;\n",
      "\n",
      "    /**\n",
      "     * Constructor.\n",
      "     *\n",
      "     * @param from      - source CronDefinition;\n",
      "     *                  if null a NullPointerException will be raised\n",
      "     * @param to        - target CronDefinition;\n",
      "     *                  if null a NullPointerException will be raised\n",
      "     * @param cronRules - cron rules\n",
      "     */\n",
      "    public CronMapper(final CronDefinition from, final CronDefinition to, final Function<Cron, Cron> cronRules) {\n",
      "        Preconditions.checkNotNull(from, \"Source CronDefinition must not be null\");\n",
      "        this.to = Preconditions.checkNotNull(to, \"Destination CronDefinition must not be null\");\n",
      "        this.cronRules = Preconditions.checkNotNull(cronRules, \"CronRules must not be null\");\n",
      "        mappings = new EnumMap<>(CronFieldName.class);\n",
      "        buildMappings(from, to);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Maps given cron to target cron definition.\n",
      "     *\n",
      "     * @param cron - Instance to be mapped;\n",
      "     *             if null a NullPointerException will be raised\n",
      "     * @return new Cron instance, never null;\n",
      "     */\n",
      "    public Cron map(final Cron cron) {\n",
      "        Preconditions.checkNotNull(cron, \"Cron must not be null\");\n",
      "        if(cron instanceof RebootCron){\n",
      "            if(this.to.getCronNicknames().contains(CronNicknames.REBOOT)){\n",
      "                return new RebootCron(this.to);\n",
      "            } else {\n",
      "                throw new IllegalArgumentException(\"The target cron definition does not support @reboot nickname\");\n",
      "            }\n",
      "        }\n",
      "        final List<CronField> fields = new ArrayList<>();\n",
      "        for (final CronFieldName name : CronFieldName.values()) {\n",
      "            if (mappings.containsKey(name)) {\n",
      "                final CronField field = mappings.get(name).apply(cron.retrieve(name));\n",
      "                if (field != null) {\n",
      "                    fields.add(field);\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "        return cronRules.apply(new SingleCron(to, fields)).validate();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates a CronMapper that maps a cron4j expression to a quartz expression.\n",
      "     * @return a CronMapper for mapping from cron4j to quartz\n",
      "     */\n",
      "    public static CronMapper fromCron4jToQuartz() {\n",
      "        return new CronMapper(\n",
      "                CronDefinitionBuilder.instanceDefinitionFor(CronType.CRON4J),\n",
      "                CronDefinitionBuilder.instanceDefinitionFor(CronType.QUARTZ),\n",
      "                setQuestionMark()\n",
      "        );\n",
      "    }\n",
      "\n",
      "    public static CronMapper fromQuartzToCron4j() {\n",
      "        return new CronMapper(\n",
      "                CronDefinitionBuilder.instanceDefinitionFor(CronType.QUARTZ),\n",
      "                CronDefinitionBuilder.instanceDefinitionFor(CronType.CRON4J),\n",
      "                sameCron()\n",
      "        );\n",
      "    }\n",
      "\n",
      "    public static CronMapper fromQuartzToUnix() {\n",
      "        return new CronMapper(\n",
      "                CronDefinitionBuilder.instanceDefinitionFor(CronType.QUARTZ),\n",
      "                CronDefinitionBuilder.instanceDefinitionFor(CronType.UNIX),\n",
      "                sameCron()\n",
      "        );\n",
      "    }\n",
      "\n",
      "    public static CronMapper fromUnixToQuartz() {\n",
      "        return new CronMapper(\n",
      "                CronDefinitionBuilder.instanceDefinitionFor(CronType.UNIX),\n",
      "                CronDefinitionBuilder.instanceDefinitionFor(CronType.QUARTZ),\n",
      "                setQuestionMark()\n",
      "        );\n",
      "    }\n",
      "\n",
      "    public static CronMapper fromQuartzToSpring() {\n",
      "        return new CronMapper(\n",
      "                CronDefinitionBuilder.instanceDefinitionFor(CronType.QUARTZ),\n",
      "                CronDefinitionBuilder.instanceDefinitionFor(CronType.SPRING),\n",
      "                setQuestionMark()\n",
      "        );\n",
      "    }\n",
      "\n",
      "    public static CronMapper fromSpringToQuartz() {\n",
      "        return new CronMapper(\n",
      "                CronDefinitionBuilder.instanceDefinitionFor(CronType.SPRING),\n",
      "                CronDefinitionBuilder.instanceDefinitionFor(CronType.QUARTZ),\n",
      "                setQuestionMark()\n",
      "        );\n",
      "    }\n",
      "\n",
      "    public static CronMapper sameCron(final CronDefinition cronDefinition) {\n",
      "        return new CronMapper(cronDefinition, cronDefinition, sameCron());\n",
      "    }\n",
      "\n",
      "    private static Function<Cron, Cron> sameCron() {\n",
      "        return cron -> cron;\n",
      "    }\n",
      "\n",
      "    private static Function<Cron, Cron> setQuestionMark() {\n",
      "        return cron -> {\n",
      "            final CronField dow = cron.retrieve(CronFieldName.DAY_OF_WEEK);\n",
      "            final CronField dom = cron.retrieve(CronFieldName.DAY_OF_MONTH);\n",
      "            if (dow == null && dom == null) {\n",
      "                return cron;\n",
      "            }\n",
      "            if (dow.getExpression() instanceof QuestionMark || dom.getExpression() instanceof QuestionMark) {\n",
      "                return cron;\n",
      "            }\n",
      "            final Map<CronFieldName, CronField> fields = new EnumMap<>(CronFieldName.class);\n",
      "            fields.putAll(cron.retrieveFieldsAsMap());\n",
      "            if (dow.getExpression() instanceof Always) {\n",
      "                fields.put(CronFieldName.DAY_OF_WEEK,\n",
      "                        new CronField(CronFieldName.DAY_OF_WEEK, questionMark(), fields.get(CronFieldName.DAY_OF_WEEK).getConstraints()));\n",
      "            } else {\n",
      "                if (dom.getExpression() instanceof Always) {\n",
      "                    fields.put(CronFieldName.DAY_OF_MONTH,\n",
      "                            new CronField(CronFieldName.DAY_OF_MONTH, questionMark(), fields.get(CronFieldName.DAY_OF_MONTH).getConstraints()));\n",
      "                } else {\n",
      "                    cron.validate();\n",
      "                }\n",
      "            }\n",
      "            return new SingleCron(cron.getCronDefinition(), new ArrayList<>(fields.values()));\n",
      "        };\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Builds functions that map the fields from source CronDefinition to target.\n",
      "     *\n",
      "     * @param from - source CronDefinition\n",
      "     * @param to   - target CronDefinition\n",
      "     */\n",
      "    private void buildMappings(final CronDefinition from, final CronDefinition to) {\n",
      "        final Map<CronFieldName, FieldDefinition> sourceFieldDefinitions = getFieldDefinitions(from);\n",
      "        final Map<CronFieldName, FieldDefinition> destFieldDefinitions = getFieldDefinitions(to);\n",
      "        boolean startedDestMapping = false;\n",
      "        boolean startedSourceMapping = false;\n",
      "        for (final CronFieldName name : CronFieldName.values()) {\n",
      "            final FieldDefinition destinationFieldDefinition = destFieldDefinitions.get(name);\n",
      "            final FieldDefinition sourceFieldDefinition = sourceFieldDefinitions.get(name);\n",
      "            if (destinationFieldDefinition != null) {\n",
      "                startedDestMapping = true;\n",
      "            }\n",
      "            if (sourceFieldDefinition != null) {\n",
      "                startedSourceMapping = true;\n",
      "            }\n",
      "            if (startedDestMapping && destinationFieldDefinition == null) {\n",
      "                break;\n",
      "            }\n",
      "            //destination has fields before source definition starts. We default them to zero.\n",
      "            if (!startedSourceMapping && destinationFieldDefinition != null) {\n",
      "                mappings.put(name, returnOnZeroExpression(name));\n",
      "            }\n",
      "            //destination has fields after source definition was processed. We default them to always.\n",
      "            if (startedSourceMapping && sourceFieldDefinition == null && destinationFieldDefinition != null) {\n",
      "                mappings.put(name, returnAlwaysExpression(name));\n",
      "            }\n",
      "            if (sourceFieldDefinition == null || destinationFieldDefinition == null) {\n",
      "                continue;\n",
      "            }\n",
      "            if (CronFieldName.DAY_OF_WEEK.equals(name)) {\n",
      "                mappings.put(name, dayOfWeekMapping((DayOfWeekFieldDefinition) sourceFieldDefinition, (DayOfWeekFieldDefinition) destinationFieldDefinition));\n",
      "            } else if (CronFieldName.DAY_OF_MONTH.equals(name)) {\n",
      "                mappings.put(name, dayOfMonthMapping(sourceFieldDefinition, destinationFieldDefinition));\n",
      "            } else {\n",
      "                mappings.put(name, returnSameExpression());\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private Map<CronFieldName, FieldDefinition> getFieldDefinitions(final CronDefinition from) {\n",
      "        final Map<CronFieldName, FieldDefinition> result = new EnumMap<>(CronFieldName.class);\n",
      "\n",
      "        for (final FieldDefinition fieldDefinition : from.getFieldDefinitions()) {\n",
      "            result.put(fieldDefinition.getFieldName(), fieldDefinition);\n",
      "        }\n",
      "        return result;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates a Function that returns same field.\n",
      "     *\n",
      "     * @return CronField -> CronField instance, never null\n",
      "     */\n",
      "    @VisibleForTesting\n",
      "    static Function<CronField, CronField> returnSameExpression() {\n",
      "        return field -> field;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates a Function that returns a On instance with zero value.\n",
      "     *\n",
      "     * @param name - Cron field name\n",
      "     * @return new CronField -> CronField instance, never null\n",
      "     */\n",
      "    @VisibleForTesting\n",
      "    static Function<CronField, CronField> returnOnZeroExpression(final CronFieldName name) {\n",
      "        return field -> {\n",
      "            final FieldConstraints constraints = FieldConstraintsBuilder.instance().forField(name).createConstraintsInstance();\n",
      "            return new CronField(name, new On(new IntegerFieldValue(0)), constraints);\n",
      "        };\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates a Function that returns an Always instance.\n",
      "     *\n",
      "     * @param name - Cron field name\n",
      "     * @return new CronField -> CronField instance, never null\n",
      "     */\n",
      "    @VisibleForTesting\n",
      "    static Function<CronField, CronField> returnAlwaysExpression(final CronFieldName name) {\n",
      "        return field -> new CronField(name, always(), FieldConstraintsBuilder.instance().forField(name).createConstraintsInstance());\n",
      "    }\n",
      "\n",
      "    private static IntegerFieldValue mapDayOfWeek(DayOfWeekFieldDefinition sourceDef, DayOfWeekFieldDefinition targetDef, IntegerFieldValue fieldValue) {\n",
      "        return new IntegerFieldValue(ConstantsMapper.weekDayMapping(sourceDef.getMondayDoWValue(), targetDef.getMondayDoWValue(), fieldValue.getValue()));\n",
      "    }\n",
      "\n",
      "    private static FieldValue<?> mapDayOfWeek(DayOfWeekFieldDefinition sourceDef, DayOfWeekFieldDefinition targetDef, FieldValue<?> fieldValue) {\n",
      "        if (fieldValue instanceof IntegerFieldValue) {\n",
      "            return mapDayOfWeek(sourceDef, targetDef, (IntegerFieldValue) fieldValue);\n",
      "        }\n",
      "        return fieldValue;\n",
      "    }\n",
      "\n",
      "    @VisibleForTesting\n",
      "    static Function<CronField, CronField> dayOfWeekMapping(final DayOfWeekFieldDefinition sourceDef, final DayOfWeekFieldDefinition targetDef) {\n",
      "        return field -> {\n",
      "            final FieldExpression expression = field.getExpression();\n",
      "            FieldExpression dest = null;\n",
      "            dest = expression.accept(new FieldExpressionVisitorAdaptor() {\n",
      "                public FieldExpression visit(Every every) {\n",
      "                    return new Every(every.getExpression().accept(this), every.getPeriod());\n",
      "                }\n",
      "\n",
      "                public FieldExpression visit(On on) {\n",
      "                    return new On(mapDayOfWeek(sourceDef, targetDef, on.getTime()), on.getSpecialChar());\n",
      "                }\n",
      "\n",
      "                @Override\n",
      "                public FieldExpression visit(Between between) {\n",
      "                    return new Between(mapDayOfWeek(sourceDef, targetDef, between.getFrom()), mapDayOfWeek(sourceDef, targetDef, between.getTo()));\n",
      "                }\n",
      "\n",
      "                @Override\n",
      "                public FieldExpression visit(And and) {\n",
      "                    And newAnd = new And();\n",
      "                    for (FieldExpression expr : and.getExpressions()) {\n",
      "                        newAnd.and(expr.accept(this));\n",
      "                    }\n",
      "                    return newAnd;\n",
      "                }\n",
      "            });\n",
      "\n",
      "            if (expression instanceof QuestionMark && !targetDef.getConstraints().getSpecialChars().contains(SpecialChar.QUESTION_MARK)) {\n",
      "                dest = always();\n",
      "            }\n",
      "            return new CronField(CronFieldName.DAY_OF_WEEK, dest, targetDef.getConstraints());\n",
      "\n",
      "        };\n",
      "    }\n",
      "\n",
      "    @VisibleForTesting\n",
      "    static Function<CronField, CronField> dayOfMonthMapping(final FieldDefinition sourceDef, final FieldDefinition targetDef) {\n",
      "        return field -> {\n",
      "            final FieldExpression expression = field.getExpression();\n",
      "            FieldExpression dest = expression;\n",
      "            if (expression instanceof QuestionMark && !targetDef.getConstraints().getSpecialChars().contains(SpecialChar.QUESTION_MARK)) {\n",
      "                dest = always();\n",
      "            }\n",
      "            return new CronField(CronFieldName.DAY_OF_MONTH, dest, targetDef.getConstraints());\n",
      "        };\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.mapper;\n",
      "\n",
      "import com.cronutils.Function;\n",
      "import com.cronutils.model.definition.CronDefinition;\n",
      "import com.cronutils.model.field.CronField;\n",
      "import com.cronutils.model.field.CronFieldName;\n",
      "import com.cronutils.model.field.expression.Always;\n",
      "import com.cronutils.model.field.expression.On;\n",
      "import org.junit.jupiter.api.BeforeEach;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.mockito.Mock;\n",
      "import org.mockito.MockitoAnnotations;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.assertEquals;\n",
      "import static org.junit.jupiter.api.Assertions.assertThrows;\n",
      "import static org.mockito.Mockito.mock;\n",
      "\n",
      "public class CronMapperTest {\n",
      "    private CronFieldName testCronFieldName;\n",
      "    @Mock\n",
      "    private CronField mockCronField;\n",
      "\n",
      "    @BeforeEach\n",
      "    public void setUp() {\n",
      "        MockitoAnnotations.initMocks(this);\n",
      "        testCronFieldName = CronFieldName.SECOND;\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testConstructorSourceDefinitionNull() {\n",
      "        assertThrows(NullPointerException.class, () -> new CronMapper(mock(CronDefinition.class), null, null));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testConstructorTargetDefinitionNull() {\n",
      "        assertThrows(NullPointerException.class, () -> new CronMapper(null, mock(CronDefinition.class), null));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testReturnSameExpression() {\n",
      "        final Function<CronField, CronField> function = CronMapper.returnSameExpression();\n",
      "        assertEquals(mockCronField, function.apply(mockCronField));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testReturnOnZeroExpression() {\n",
      "        final Function<CronField, CronField> function = CronMapper.returnOnZeroExpression(testCronFieldName);\n",
      "\n",
      "        assertEquals(testCronFieldName, function.apply(mockCronField).getField());\n",
      "        final On result = (On) function.apply(mockCronField).getExpression();\n",
      "        assertEquals(0, (int) result.getTime().getValue());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testReturnAlwaysExpression() {\n",
      "        final Function<CronField, CronField> function = CronMapper.returnAlwaysExpression(testCronFieldName);\n",
      "\n",
      "        assertEquals(testCronFieldName, function.apply(mockCronField).getField());\n",
      "        assertEquals(Always.class, function.apply(mockCronField).getExpression().getClass());\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "CronMapper::::map(com.cronutils.model.Cron)": [
        76,
        95
      ],
      "CronMapper::::fromCron4jToQuartz()": [
        101,
        107
      ],
      "CronMapper::::fromQuartzToCron4j()": [
        109,
        115
      ],
      "CronMapper::::fromQuartzToUnix()": [
        117,
        123
      ],
      "CronMapper::::fromUnixToQuartz()": [
        125,
        131
      ],
      "CronMapper::::fromQuartzToSpring()": [
        133,
        139
      ],
      "CronMapper::::fromSpringToQuartz()": [
        141,
        147
      ],
      "CronMapper::::sameCron(com.cronutils.model.definition.CronDefinition)": [
        149,
        151
      ],
      "CronMapper::::sameCron()": [
        153,
        155
      ],
      "CronMapper::::setQuestionMark()": [
        157,
        182
      ],
      "CronMapper::::buildMappings(com.cronutils.model.definition.CronDefinition,com.cronutils.model.definition.CronDefinition)": [
        190,
        226
      ],
      "CronMapper::::getFieldDefinitions(com.cronutils.model.definition.CronDefinition)": [
        228,
        235
      ],
      "CronMapper::::returnSameExpression()": [
        242,
        245
      ],
      "CronMapper::::returnOnZeroExpression(com.cronutils.model.field.CronFieldName)": [
        253,
        259
      ],
      "CronMapper::::returnAlwaysExpression(com.cronutils.model.field.CronFieldName)": [
        267,
        270
      ],
      "CronMapper::::mapDayOfWeek(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.value.IntegerFieldValue)": [
        272,
        274
      ],
      "CronMapper::::mapDayOfWeek(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.value.FieldValue<?>)": [
        276,
        281
      ],
      "CronMapper::::dayOfWeekMapping(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition)": [
        283,
        318
      ],
      "CronMapper::::dayOfMonthMapping(com.cronutils.model.field.definition.FieldDefinition,com.cronutils.model.field.definition.FieldDefinition)": [
        320,
        330
      ]
    },
    "test_method_lines_dic": {
      "CronMapperTest::::setUp()": [
        36,
        40
      ],
      "CronMapperTest::::testConstructorSourceDefinitionNull()": [
        42,
        45
      ],
      "CronMapperTest::::testConstructorTargetDefinitionNull()": [
        47,
        50
      ],
      "CronMapperTest::::testReturnSameExpression()": [
        52,
        56
      ],
      "CronMapperTest::::testReturnOnZeroExpression()": [
        58,
        65
      ],
      "CronMapperTest::::testReturnAlwaysExpression()": [
        67,
        73
      ]
    },
    "reverse_method_lines_dic": {
      "76": "CronMapper::::map(com.cronutils.model.Cron)",
      "77": "CronMapper::::map(com.cronutils.model.Cron)",
      "78": "CronMapper::::map(com.cronutils.model.Cron)",
      "79": "CronMapper::::map(com.cronutils.model.Cron)",
      "80": "CronMapper::::map(com.cronutils.model.Cron)",
      "81": "CronMapper::::map(com.cronutils.model.Cron)",
      "82": "CronMapper::::map(com.cronutils.model.Cron)",
      "83": "CronMapper::::map(com.cronutils.model.Cron)",
      "84": "CronMapper::::map(com.cronutils.model.Cron)",
      "85": "CronMapper::::map(com.cronutils.model.Cron)",
      "86": "CronMapper::::map(com.cronutils.model.Cron)",
      "87": "CronMapper::::map(com.cronutils.model.Cron)",
      "88": "CronMapper::::map(com.cronutils.model.Cron)",
      "89": "CronMapper::::map(com.cronutils.model.Cron)",
      "90": "CronMapper::::map(com.cronutils.model.Cron)",
      "91": "CronMapper::::map(com.cronutils.model.Cron)",
      "92": "CronMapper::::map(com.cronutils.model.Cron)",
      "93": "CronMapper::::map(com.cronutils.model.Cron)",
      "94": "CronMapper::::map(com.cronutils.model.Cron)",
      "95": "CronMapper::::map(com.cronutils.model.Cron)",
      "101": "CronMapper::::fromCron4jToQuartz()",
      "102": "CronMapper::::fromCron4jToQuartz()",
      "103": "CronMapper::::fromCron4jToQuartz()",
      "104": "CronMapper::::fromCron4jToQuartz()",
      "105": "CronMapper::::fromCron4jToQuartz()",
      "106": "CronMapper::::fromCron4jToQuartz()",
      "107": "CronMapper::::fromCron4jToQuartz()",
      "109": "CronMapper::::fromQuartzToCron4j()",
      "110": "CronMapper::::fromQuartzToCron4j()",
      "111": "CronMapper::::fromQuartzToCron4j()",
      "112": "CronMapper::::fromQuartzToCron4j()",
      "113": "CronMapper::::fromQuartzToCron4j()",
      "114": "CronMapper::::fromQuartzToCron4j()",
      "115": "CronMapper::::fromQuartzToCron4j()",
      "117": "CronMapper::::fromQuartzToUnix()",
      "118": "CronMapper::::fromQuartzToUnix()",
      "119": "CronMapper::::fromQuartzToUnix()",
      "120": "CronMapper::::fromQuartzToUnix()",
      "121": "CronMapper::::fromQuartzToUnix()",
      "122": "CronMapper::::fromQuartzToUnix()",
      "123": "CronMapper::::fromQuartzToUnix()",
      "125": "CronMapper::::fromUnixToQuartz()",
      "126": "CronMapper::::fromUnixToQuartz()",
      "127": "CronMapper::::fromUnixToQuartz()",
      "128": "CronMapper::::fromUnixToQuartz()",
      "129": "CronMapper::::fromUnixToQuartz()",
      "130": "CronMapper::::fromUnixToQuartz()",
      "131": "CronMapper::::fromUnixToQuartz()",
      "133": "CronMapper::::fromQuartzToSpring()",
      "134": "CronMapper::::fromQuartzToSpring()",
      "135": "CronMapper::::fromQuartzToSpring()",
      "136": "CronMapper::::fromQuartzToSpring()",
      "137": "CronMapper::::fromQuartzToSpring()",
      "138": "CronMapper::::fromQuartzToSpring()",
      "139": "CronMapper::::fromQuartzToSpring()",
      "141": "CronMapper::::fromSpringToQuartz()",
      "142": "CronMapper::::fromSpringToQuartz()",
      "143": "CronMapper::::fromSpringToQuartz()",
      "144": "CronMapper::::fromSpringToQuartz()",
      "145": "CronMapper::::fromSpringToQuartz()",
      "146": "CronMapper::::fromSpringToQuartz()",
      "147": "CronMapper::::fromSpringToQuartz()",
      "149": "CronMapper::::sameCron(com.cronutils.model.definition.CronDefinition)",
      "150": "CronMapper::::sameCron(com.cronutils.model.definition.CronDefinition)",
      "151": "CronMapper::::sameCron(com.cronutils.model.definition.CronDefinition)",
      "153": "CronMapper::::sameCron()",
      "154": "CronMapper::::sameCron()",
      "155": "CronMapper::::sameCron()",
      "157": "CronMapper::::setQuestionMark()",
      "158": "CronMapper::::setQuestionMark()",
      "159": "CronMapper::::setQuestionMark()",
      "160": "CronMapper::::setQuestionMark()",
      "161": "CronMapper::::setQuestionMark()",
      "162": "CronMapper::::setQuestionMark()",
      "163": "CronMapper::::setQuestionMark()",
      "164": "CronMapper::::setQuestionMark()",
      "165": "CronMapper::::setQuestionMark()",
      "166": "CronMapper::::setQuestionMark()",
      "167": "CronMapper::::setQuestionMark()",
      "168": "CronMapper::::setQuestionMark()",
      "169": "CronMapper::::setQuestionMark()",
      "170": "CronMapper::::setQuestionMark()",
      "171": "CronMapper::::setQuestionMark()",
      "172": "CronMapper::::setQuestionMark()",
      "173": "CronMapper::::setQuestionMark()",
      "174": "CronMapper::::setQuestionMark()",
      "175": "CronMapper::::setQuestionMark()",
      "176": "CronMapper::::setQuestionMark()",
      "177": "CronMapper::::setQuestionMark()",
      "178": "CronMapper::::setQuestionMark()",
      "179": "CronMapper::::setQuestionMark()",
      "180": "CronMapper::::setQuestionMark()",
      "181": "CronMapper::::setQuestionMark()",
      "182": "CronMapper::::setQuestionMark()",
      "190": "CronMapper::::buildMappings(com.cronutils.model.definition.CronDefinition,com.cronutils.model.definition.CronDefinition)",
      "191": "CronMapper::::buildMappings(com.cronutils.model.definition.CronDefinition,com.cronutils.model.definition.CronDefinition)",
      "192": "CronMapper::::buildMappings(com.cronutils.model.definition.CronDefinition,com.cronutils.model.definition.CronDefinition)",
      "193": "CronMapper::::buildMappings(com.cronutils.model.definition.CronDefinition,com.cronutils.model.definition.CronDefinition)",
      "194": "CronMapper::::buildMappings(com.cronutils.model.definition.CronDefinition,com.cronutils.model.definition.CronDefinition)",
      "195": "CronMapper::::buildMappings(com.cronutils.model.definition.CronDefinition,com.cronutils.model.definition.CronDefinition)",
      "196": "CronMapper::::buildMappings(com.cronutils.model.definition.CronDefinition,com.cronutils.model.definition.CronDefinition)",
      "197": "CronMapper::::buildMappings(com.cronutils.model.definition.CronDefinition,com.cronutils.model.definition.CronDefinition)",
      "198": "CronMapper::::buildMappings(com.cronutils.model.definition.CronDefinition,com.cronutils.model.definition.CronDefinition)",
      "199": "CronMapper::::buildMappings(com.cronutils.model.definition.CronDefinition,com.cronutils.model.definition.CronDefinition)",
      "200": "CronMapper::::buildMappings(com.cronutils.model.definition.CronDefinition,com.cronutils.model.definition.CronDefinition)",
      "201": "CronMapper::::buildMappings(com.cronutils.model.definition.CronDefinition,com.cronutils.model.definition.CronDefinition)",
      "202": "CronMapper::::buildMappings(com.cronutils.model.definition.CronDefinition,com.cronutils.model.definition.CronDefinition)",
      "203": "CronMapper::::buildMappings(com.cronutils.model.definition.CronDefinition,com.cronutils.model.definition.CronDefinition)",
      "204": "CronMapper::::buildMappings(com.cronutils.model.definition.CronDefinition,com.cronutils.model.definition.CronDefinition)",
      "205": "CronMapper::::buildMappings(com.cronutils.model.definition.CronDefinition,com.cronutils.model.definition.CronDefinition)",
      "206": "CronMapper::::buildMappings(com.cronutils.model.definition.CronDefinition,com.cronutils.model.definition.CronDefinition)",
      "207": "CronMapper::::buildMappings(com.cronutils.model.definition.CronDefinition,com.cronutils.model.definition.CronDefinition)",
      "208": "CronMapper::::buildMappings(com.cronutils.model.definition.CronDefinition,com.cronutils.model.definition.CronDefinition)",
      "209": "CronMapper::::buildMappings(com.cronutils.model.definition.CronDefinition,com.cronutils.model.definition.CronDefinition)",
      "210": "CronMapper::::buildMappings(com.cronutils.model.definition.CronDefinition,com.cronutils.model.definition.CronDefinition)",
      "211": "CronMapper::::buildMappings(com.cronutils.model.definition.CronDefinition,com.cronutils.model.definition.CronDefinition)",
      "212": "CronMapper::::buildMappings(com.cronutils.model.definition.CronDefinition,com.cronutils.model.definition.CronDefinition)",
      "213": "CronMapper::::buildMappings(com.cronutils.model.definition.CronDefinition,com.cronutils.model.definition.CronDefinition)",
      "214": "CronMapper::::buildMappings(com.cronutils.model.definition.CronDefinition,com.cronutils.model.definition.CronDefinition)",
      "215": "CronMapper::::buildMappings(com.cronutils.model.definition.CronDefinition,com.cronutils.model.definition.CronDefinition)",
      "216": "CronMapper::::buildMappings(com.cronutils.model.definition.CronDefinition,com.cronutils.model.definition.CronDefinition)",
      "217": "CronMapper::::buildMappings(com.cronutils.model.definition.CronDefinition,com.cronutils.model.definition.CronDefinition)",
      "218": "CronMapper::::buildMappings(com.cronutils.model.definition.CronDefinition,com.cronutils.model.definition.CronDefinition)",
      "219": "CronMapper::::buildMappings(com.cronutils.model.definition.CronDefinition,com.cronutils.model.definition.CronDefinition)",
      "220": "CronMapper::::buildMappings(com.cronutils.model.definition.CronDefinition,com.cronutils.model.definition.CronDefinition)",
      "221": "CronMapper::::buildMappings(com.cronutils.model.definition.CronDefinition,com.cronutils.model.definition.CronDefinition)",
      "222": "CronMapper::::buildMappings(com.cronutils.model.definition.CronDefinition,com.cronutils.model.definition.CronDefinition)",
      "223": "CronMapper::::buildMappings(com.cronutils.model.definition.CronDefinition,com.cronutils.model.definition.CronDefinition)",
      "224": "CronMapper::::buildMappings(com.cronutils.model.definition.CronDefinition,com.cronutils.model.definition.CronDefinition)",
      "225": "CronMapper::::buildMappings(com.cronutils.model.definition.CronDefinition,com.cronutils.model.definition.CronDefinition)",
      "226": "CronMapper::::buildMappings(com.cronutils.model.definition.CronDefinition,com.cronutils.model.definition.CronDefinition)",
      "228": "CronMapper::::getFieldDefinitions(com.cronutils.model.definition.CronDefinition)",
      "229": "CronMapper::::getFieldDefinitions(com.cronutils.model.definition.CronDefinition)",
      "230": "CronMapper::::getFieldDefinitions(com.cronutils.model.definition.CronDefinition)",
      "231": "CronMapper::::getFieldDefinitions(com.cronutils.model.definition.CronDefinition)",
      "232": "CronMapper::::getFieldDefinitions(com.cronutils.model.definition.CronDefinition)",
      "233": "CronMapper::::getFieldDefinitions(com.cronutils.model.definition.CronDefinition)",
      "234": "CronMapper::::getFieldDefinitions(com.cronutils.model.definition.CronDefinition)",
      "235": "CronMapper::::getFieldDefinitions(com.cronutils.model.definition.CronDefinition)",
      "242": "CronMapper::::returnSameExpression()",
      "243": "CronMapper::::returnSameExpression()",
      "244": "CronMapper::::returnSameExpression()",
      "245": "CronMapper::::returnSameExpression()",
      "253": "CronMapper::::returnOnZeroExpression(com.cronutils.model.field.CronFieldName)",
      "254": "CronMapper::::returnOnZeroExpression(com.cronutils.model.field.CronFieldName)",
      "255": "CronMapper::::returnOnZeroExpression(com.cronutils.model.field.CronFieldName)",
      "256": "CronMapper::::returnOnZeroExpression(com.cronutils.model.field.CronFieldName)",
      "257": "CronMapper::::returnOnZeroExpression(com.cronutils.model.field.CronFieldName)",
      "258": "CronMapper::::returnOnZeroExpression(com.cronutils.model.field.CronFieldName)",
      "259": "CronMapper::::returnOnZeroExpression(com.cronutils.model.field.CronFieldName)",
      "267": "CronMapper::::returnAlwaysExpression(com.cronutils.model.field.CronFieldName)",
      "268": "CronMapper::::returnAlwaysExpression(com.cronutils.model.field.CronFieldName)",
      "269": "CronMapper::::returnAlwaysExpression(com.cronutils.model.field.CronFieldName)",
      "270": "CronMapper::::returnAlwaysExpression(com.cronutils.model.field.CronFieldName)",
      "272": "CronMapper::::mapDayOfWeek(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.value.IntegerFieldValue)",
      "273": "CronMapper::::mapDayOfWeek(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.value.IntegerFieldValue)",
      "274": "CronMapper::::mapDayOfWeek(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.value.IntegerFieldValue)",
      "276": "CronMapper::::mapDayOfWeek(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.value.FieldValue<?>)",
      "277": "CronMapper::::mapDayOfWeek(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.value.FieldValue<?>)",
      "278": "CronMapper::::mapDayOfWeek(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.value.FieldValue<?>)",
      "279": "CronMapper::::mapDayOfWeek(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.value.FieldValue<?>)",
      "280": "CronMapper::::mapDayOfWeek(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.value.FieldValue<?>)",
      "281": "CronMapper::::mapDayOfWeek(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.value.FieldValue<?>)",
      "283": "CronMapper::::dayOfWeekMapping(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition)",
      "284": "CronMapper::::dayOfWeekMapping(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition)",
      "285": "CronMapper::::dayOfWeekMapping(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition)",
      "286": "CronMapper::::dayOfWeekMapping(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition)",
      "287": "CronMapper::::dayOfWeekMapping(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition)",
      "288": "CronMapper::::dayOfWeekMapping(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition)",
      "289": "CronMapper::::dayOfWeekMapping(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition)",
      "290": "CronMapper::::dayOfWeekMapping(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition)",
      "291": "CronMapper::::dayOfWeekMapping(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition)",
      "292": "CronMapper::::dayOfWeekMapping(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition)",
      "293": "CronMapper::::dayOfWeekMapping(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition)",
      "294": "CronMapper::::dayOfWeekMapping(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition)",
      "295": "CronMapper::::dayOfWeekMapping(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition)",
      "296": "CronMapper::::dayOfWeekMapping(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition)",
      "297": "CronMapper::::dayOfWeekMapping(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition)",
      "298": "CronMapper::::dayOfWeekMapping(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition)",
      "299": "CronMapper::::dayOfWeekMapping(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition)",
      "300": "CronMapper::::dayOfWeekMapping(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition)",
      "301": "CronMapper::::dayOfWeekMapping(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition)",
      "302": "CronMapper::::dayOfWeekMapping(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition)",
      "303": "CronMapper::::dayOfWeekMapping(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition)",
      "304": "CronMapper::::dayOfWeekMapping(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition)",
      "305": "CronMapper::::dayOfWeekMapping(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition)",
      "306": "CronMapper::::dayOfWeekMapping(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition)",
      "307": "CronMapper::::dayOfWeekMapping(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition)",
      "308": "CronMapper::::dayOfWeekMapping(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition)",
      "309": "CronMapper::::dayOfWeekMapping(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition)",
      "310": "CronMapper::::dayOfWeekMapping(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition)",
      "311": "CronMapper::::dayOfWeekMapping(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition)",
      "312": "CronMapper::::dayOfWeekMapping(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition)",
      "313": "CronMapper::::dayOfWeekMapping(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition)",
      "314": "CronMapper::::dayOfWeekMapping(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition)",
      "315": "CronMapper::::dayOfWeekMapping(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition)",
      "316": "CronMapper::::dayOfWeekMapping(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition)",
      "317": "CronMapper::::dayOfWeekMapping(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition)",
      "318": "CronMapper::::dayOfWeekMapping(com.cronutils.model.field.definition.DayOfWeekFieldDefinition,com.cronutils.model.field.definition.DayOfWeekFieldDefinition)",
      "320": "CronMapper::::dayOfMonthMapping(com.cronutils.model.field.definition.FieldDefinition,com.cronutils.model.field.definition.FieldDefinition)",
      "321": "CronMapper::::dayOfMonthMapping(com.cronutils.model.field.definition.FieldDefinition,com.cronutils.model.field.definition.FieldDefinition)",
      "322": "CronMapper::::dayOfMonthMapping(com.cronutils.model.field.definition.FieldDefinition,com.cronutils.model.field.definition.FieldDefinition)",
      "323": "CronMapper::::dayOfMonthMapping(com.cronutils.model.field.definition.FieldDefinition,com.cronutils.model.field.definition.FieldDefinition)",
      "324": "CronMapper::::dayOfMonthMapping(com.cronutils.model.field.definition.FieldDefinition,com.cronutils.model.field.definition.FieldDefinition)",
      "325": "CronMapper::::dayOfMonthMapping(com.cronutils.model.field.definition.FieldDefinition,com.cronutils.model.field.definition.FieldDefinition)",
      "326": "CronMapper::::dayOfMonthMapping(com.cronutils.model.field.definition.FieldDefinition,com.cronutils.model.field.definition.FieldDefinition)",
      "327": "CronMapper::::dayOfMonthMapping(com.cronutils.model.field.definition.FieldDefinition,com.cronutils.model.field.definition.FieldDefinition)",
      "328": "CronMapper::::dayOfMonthMapping(com.cronutils.model.field.definition.FieldDefinition,com.cronutils.model.field.definition.FieldDefinition)",
      "329": "CronMapper::::dayOfMonthMapping(com.cronutils.model.field.definition.FieldDefinition,com.cronutils.model.field.definition.FieldDefinition)",
      "330": "CronMapper::::dayOfMonthMapping(com.cronutils.model.field.definition.FieldDefinition,com.cronutils.model.field.definition.FieldDefinition)"
    },
    "test_reverse_method_lines_dic": {
      "36": "CronMapperTest::::setUp()",
      "37": "CronMapperTest::::setUp()",
      "38": "CronMapperTest::::setUp()",
      "39": "CronMapperTest::::setUp()",
      "40": "CronMapperTest::::setUp()",
      "42": "CronMapperTest::::testConstructorSourceDefinitionNull()",
      "43": "CronMapperTest::::testConstructorSourceDefinitionNull()",
      "44": "CronMapperTest::::testConstructorSourceDefinitionNull()",
      "45": "CronMapperTest::::testConstructorSourceDefinitionNull()",
      "47": "CronMapperTest::::testConstructorTargetDefinitionNull()",
      "48": "CronMapperTest::::testConstructorTargetDefinitionNull()",
      "49": "CronMapperTest::::testConstructorTargetDefinitionNull()",
      "50": "CronMapperTest::::testConstructorTargetDefinitionNull()",
      "52": "CronMapperTest::::testReturnSameExpression()",
      "53": "CronMapperTest::::testReturnSameExpression()",
      "54": "CronMapperTest::::testReturnSameExpression()",
      "55": "CronMapperTest::::testReturnSameExpression()",
      "56": "CronMapperTest::::testReturnSameExpression()",
      "58": "CronMapperTest::::testReturnOnZeroExpression()",
      "59": "CronMapperTest::::testReturnOnZeroExpression()",
      "60": "CronMapperTest::::testReturnOnZeroExpression()",
      "61": "CronMapperTest::::testReturnOnZeroExpression()",
      "62": "CronMapperTest::::testReturnOnZeroExpression()",
      "63": "CronMapperTest::::testReturnOnZeroExpression()",
      "64": "CronMapperTest::::testReturnOnZeroExpression()",
      "65": "CronMapperTest::::testReturnOnZeroExpression()",
      "67": "CronMapperTest::::testReturnAlwaysExpression()",
      "68": "CronMapperTest::::testReturnAlwaysExpression()",
      "69": "CronMapperTest::::testReturnAlwaysExpression()",
      "70": "CronMapperTest::::testReturnAlwaysExpression()",
      "71": "CronMapperTest::::testReturnAlwaysExpression()",
      "72": "CronMapperTest::::testReturnAlwaysExpression()",
      "73": "CronMapperTest::::testReturnAlwaysExpression()"
    },
    "tests": [
      {
        "test_lines": [
          42,
          45
        ],
        "covered_lines": [
          61,
          62
        ]
      },
      {
        "test_lines": [
          47,
          50
        ],
        "covered_lines": [
          61
        ]
      },
      {
        "test_lines": [
          52,
          56
        ],
        "covered_lines": [
          244
        ]
      },
      {
        "test_lines": [
          58,
          65
        ],
        "covered_lines": [
          255,
          256,
          257
        ]
      },
      {
        "test_lines": [
          67,
          73
        ],
        "covered_lines": [
          269
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/cron-utils/src/main/java/com/cronutils/model/CompositeCron.java": {
    "class_content": [
      "package com.cronutils.model;\n",
      "\n",
      "import com.cronutils.mapper.CronMapper;\n",
      "import com.cronutils.model.definition.CronDefinition;\n",
      "import com.cronutils.model.field.CronField;\n",
      "import com.cronutils.model.field.CronFieldName;\n",
      "import com.cronutils.utils.Preconditions;\n",
      "\n",
      "import java.util.Collections;\n",
      "import java.util.List;\n",
      "import java.util.Map;\n",
      "import java.util.regex.Pattern;\n",
      "import java.util.stream.Collectors;\n",
      "\n",
      "public class CompositeCron implements Cron {\n",
      "    private Pattern split = Pattern.compile(\"\\\\|\");\n",
      "    private List<Cron> crons;\n",
      "    private CronDefinition definition;\n",
      "\n",
      "    public CompositeCron(List<Cron> crons){\n",
      "        this.crons = Collections.unmodifiableList(crons);\n",
      "        Preconditions.checkNotNullNorEmpty(crons, \"List of Cron cannot be null or empty\");\n",
      "        this.definition = crons.get(0).getCronDefinition();\n",
      "        Preconditions.checkArgument(crons.size()==crons.stream().filter(c->c.getCronDefinition().equals(definition)).count(), \"All Cron objects must have same definition for CompositeCron\");\n",
      "    }\n",
      "\n",
      "    public List<Cron> getCrons() {\n",
      "        return crons;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public CronField retrieve(CronFieldName name) {\n",
      "        throw new UnsupportedOperationException(\"Currently not supported for CompositeCron\");\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Map<CronFieldName, CronField> retrieveFieldsAsMap() {\n",
      "        throw new UnsupportedOperationException(\"Currently not supported for CompositeCron\");\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String asString() {\n",
      "        StringBuilder builder = new StringBuilder();\n",
      "        List<String> patterns = crons.stream().map(Cron::asString).collect(Collectors.toList());\n",
      "        int fields = patterns.get(0).split(\" \").length;\n",
      "        for(int j=0;j<fields;j++){\n",
      "            StringBuilder fieldbuilder = new StringBuilder();\n",
      "            for(String pattern : patterns){\n",
      "                fieldbuilder.append(String.format(\"%s \", pattern.split(\" \")[j]));\n",
      "            }\n",
      "            String fieldstring = fieldbuilder.toString().trim().replaceAll(\" \", \"|\");\n",
      "            if(split.splitAsStream(fieldstring).distinct().limit(2).count() <= 1){\n",
      "                fieldstring = split.split(fieldstring)[0];\n",
      "            }\n",
      "            builder.append(String.format(\"%s \", fieldstring));\n",
      "        }\n",
      "        return builder.toString().trim();\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public CronDefinition getCronDefinition() {\n",
      "        return definition;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Cron validate() {\n",
      "        for(Cron cron : crons){\n",
      "            cron.validate();\n",
      "        }\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public boolean equivalent(CronMapper cronMapper, Cron cron) {\n",
      "        throw new UnsupportedOperationException(\"Currently not supported for CompositeCron\");\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public boolean equivalent(Cron cron) {\n",
      "        return asString().equals(cron.asString());\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package com.cronutils.model;\n",
      "\n",
      "import com.cronutils.mapper.CronMapper;\n",
      "import com.cronutils.model.definition.CronDefinition;\n",
      "import com.cronutils.model.definition.CronDefinitionBuilder;\n",
      "import com.cronutils.model.field.CronFieldName;\n",
      "import com.cronutils.model.time.ExecutionTime;\n",
      "import com.cronutils.parser.CronParser;\n",
      "import org.junit.jupiter.api.BeforeEach;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import java.time.ZonedDateTime;\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "\n",
      "import static java.time.ZoneOffset.UTC;\n",
      "import static org.junit.jupiter.api.Assertions.*;\n",
      "import static org.mockito.Mockito.mock;\n",
      "\n",
      "public class CompositeCronTest {\n",
      "    private CronDefinition definition1;\n",
      "    private Cron cron1;\n",
      "    private Cron cron2;\n",
      "\n",
      "    @BeforeEach\n",
      "    public void setUp(){\n",
      "        definition1 = CronDefinitionBuilder.instanceDefinitionFor(CronType.QUARTZ);\n",
      "        CronParser parser = new CronParser(definition1);\n",
      "\n",
      "        Cron cron1 = parser.parse(\"0 0 0 15 8 ? 2015/2\");\n",
      "        Cron cron2 = parser.parse(\"0 0 0 16 9 ? 2015/2\");\n",
      "        Cron cron3 = parser.parse(\"0 0 0 17 10 ? 2015/2\");\n",
      "        List<Cron> crons = new ArrayList<>();\n",
      "        crons.add(cron1);\n",
      "        crons.add(cron2);\n",
      "        this.cron1 = new CompositeCron(crons);\n",
      "        List<Cron> crons2 = new ArrayList<>();\n",
      "        crons2.add(cron2);\n",
      "        crons2.add(cron3);\n",
      "        this.cron2 = new CompositeCron(crons2);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void weDoNotSupportCronsWithDifferentDefinitions() throws Exception {\n",
      "        CronDefinition definition2 = CronDefinitionBuilder.instanceDefinitionFor(CronType.UNIX);\n",
      "        CronParser parser = new CronParser(definition1);\n",
      "        CronParser parser2 = new CronParser(definition2);\n",
      "\n",
      "        Cron cron1 = parser.parse(\"0 0 0 15 8 ? 2015/2\");\n",
      "        Cron cron2 = parser2.parse(\"0 0 1 * *\");\n",
      "        List<Cron> crons = new ArrayList<>();\n",
      "        crons.add(cron1);\n",
      "        crons.add(cron2);\n",
      "        assertThrows(IllegalArgumentException.class, () -> new CompositeCron(crons));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void weDoNotSupportCompositeWithoutCrons() throws Exception {\n",
      "        assertThrows(IllegalArgumentException.class, () -> new CompositeCron(new ArrayList<>()));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void retrieve() throws Exception {\n",
      "        assertThrows(UnsupportedOperationException.class, () -> cron1.retrieve(CronFieldName.DAY_OF_WEEK));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void retrieveFieldsAsMap() throws Exception {\n",
      "        assertThrows(UnsupportedOperationException.class, () -> cron1.retrieveFieldsAsMap());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void asString() throws Exception {\n",
      "        assertEquals(\"0 0 0 15|16 8|9 ? 2015/2\", cron1.asString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void getCronDefinition() throws Exception {\n",
      "        assertEquals(definition1, cron1.getCronDefinition());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void validate() throws Exception {\n",
      "        cron1.validate();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void validateThrowsExceptionEmptyCrons(){\n",
      "        assertThrows(IllegalArgumentException.class, () -> new CompositeCron(new ArrayList<>()));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void equivalent() throws Exception {\n",
      "        assertThrows(UnsupportedOperationException.class, () -> cron1.equivalent(CronMapper.fromQuartzToCron4j(), mock(Cron.class)));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void equivalent1() throws Exception {\n",
      "        assertTrue(cron1.equivalent(cron1));\n",
      "        assertFalse(cron1.equivalent(cron2));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testExampleIssue318(){\n",
      "        CronDefinition definition = CronDefinitionBuilder.instanceDefinitionFor(CronType.QUARTZ);\n",
      "        CronParser parser = new CronParser(definition);\n",
      "        Cron cron1 = parser.parse(\"0 0 9 * * ? *\");\n",
      "        Cron cron2 = parser.parse(\"0 0 10 * * ? *\");\n",
      "        Cron cron3 = parser.parse(\"0 30 11 * * ? *\");\n",
      "        Cron cron4 = parser.parse(\"0 0 12 * * ? *\");\n",
      "\n",
      "        List<Cron> crons = new ArrayList<>();\n",
      "        crons.add(cron1);\n",
      "        crons.add(cron2);\n",
      "        crons.add(cron3);\n",
      "        crons.add(cron4);\n",
      "        Cron composite = new CompositeCron(crons);\n",
      "\n",
      "        ZonedDateTime defaultt = ZonedDateTime.of(2000, 4, 15, 0, 0, 0, 0, UTC);\n",
      "\n",
      "        assertEquals(\"0 0|0|30|0 9|10|11|12 * * ? *\", composite.asString());\n",
      "        ExecutionTime executionTime = ExecutionTime.forCron(composite);\n",
      "        ZonedDateTime date1 = ZonedDateTime.of(2015, 4, 15, 0, 0, 0, 0, UTC);\n",
      "        assertEquals(ZonedDateTime.of(2015, 4, 15, 9, 0, 0, 0, UTC), executionTime.nextExecution(date1).orElse(defaultt));\n",
      "        ZonedDateTime date2 = ZonedDateTime.of(2015, 4, 15, 9, 30, 0, 0, UTC);\n",
      "        assertEquals(ZonedDateTime.of(2015, 4, 15, 10, 0, 0, 0, UTC), executionTime.nextExecution(date2).orElse(defaultt));\n",
      "        ZonedDateTime date3 = ZonedDateTime.of(2015, 4, 15, 11, 0, 0, 0, UTC);\n",
      "        assertEquals(ZonedDateTime.of(2015, 4, 15, 11, 30, 0, 0, UTC), executionTime.nextExecution(date3).orElse(defaultt));\n",
      "        ZonedDateTime date4 = ZonedDateTime.of(2015, 4, 15, 11, 30, 0, 0, UTC);\n",
      "        assertEquals(ZonedDateTime.of(2015, 4, 15, 12, 0, 0, 0, UTC), executionTime.nextExecution(date4).orElse(defaultt));\n",
      "        ZonedDateTime date5 = ZonedDateTime.of(2015, 4, 15, 12, 30, 0, 0, UTC);\n",
      "        assertEquals(ZonedDateTime.of(2015, 4, 16, 9, 0, 0, 0, UTC), executionTime.nextExecution(date5).orElse(defaultt));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testIssue263(){\n",
      "        String multicron = \"0 1 0 ? 1/1 MON#2|MON#3|MON#4|MON#5 *\";\n",
      "        CronDefinition definition = CronDefinitionBuilder.instanceDefinitionFor(CronType.QUARTZ);\n",
      "        CronParser parser = new CronParser(definition);\n",
      "        Cron cron = parser.parse(multicron);\n",
      "        assertEquals(multicron.replaceAll(\"MON\", \"2\"), cron.asString());\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "CompositeCron::::getCrons()": [
        27,
        29
      ],
      "CompositeCron::::retrieve(com.cronutils.model.field.CronFieldName)": [
        31,
        34
      ],
      "CompositeCron::::retrieveFieldsAsMap()": [
        36,
        39
      ],
      "CompositeCron::::asString()": [
        41,
        58
      ],
      "CompositeCron::::getCronDefinition()": [
        60,
        63
      ],
      "CompositeCron::::validate()": [
        65,
        71
      ],
      "CompositeCron::::equivalent(com.cronutils.mapper.CronMapper,com.cronutils.model.Cron)": [
        73,
        76
      ],
      "CompositeCron::::equivalent(com.cronutils.model.Cron)": [
        78,
        81
      ]
    },
    "test_method_lines_dic": {
      "CompositeCronTest::::setUp()": [
        25,
        41
      ],
      "CompositeCronTest::::weDoNotSupportCronsWithDifferentDefinitions()": [
        43,
        55
      ],
      "CompositeCronTest::::weDoNotSupportCompositeWithoutCrons()": [
        57,
        60
      ],
      "CompositeCronTest::::retrieve()": [
        62,
        65
      ],
      "CompositeCronTest::::retrieveFieldsAsMap()": [
        67,
        70
      ],
      "CompositeCronTest::::asString()": [
        72,
        75
      ],
      "CompositeCronTest::::getCronDefinition()": [
        77,
        80
      ],
      "CompositeCronTest::::validate()": [
        82,
        85
      ],
      "CompositeCronTest::::validateThrowsExceptionEmptyCrons()": [
        87,
        90
      ],
      "CompositeCronTest::::equivalent()": [
        92,
        95
      ],
      "CompositeCronTest::::equivalent1()": [
        97,
        101
      ],
      "CompositeCronTest::::testExampleIssue318()": [
        103,
        133
      ],
      "CompositeCronTest::::testIssue263()": [
        135,
        142
      ]
    },
    "reverse_method_lines_dic": {
      "27": "CompositeCron::::getCrons()",
      "28": "CompositeCron::::getCrons()",
      "29": "CompositeCron::::getCrons()",
      "31": "CompositeCron::::retrieve(com.cronutils.model.field.CronFieldName)",
      "32": "CompositeCron::::retrieve(com.cronutils.model.field.CronFieldName)",
      "33": "CompositeCron::::retrieve(com.cronutils.model.field.CronFieldName)",
      "34": "CompositeCron::::retrieve(com.cronutils.model.field.CronFieldName)",
      "36": "CompositeCron::::retrieveFieldsAsMap()",
      "37": "CompositeCron::::retrieveFieldsAsMap()",
      "38": "CompositeCron::::retrieveFieldsAsMap()",
      "39": "CompositeCron::::retrieveFieldsAsMap()",
      "41": "CompositeCron::::asString()",
      "42": "CompositeCron::::asString()",
      "43": "CompositeCron::::asString()",
      "44": "CompositeCron::::asString()",
      "45": "CompositeCron::::asString()",
      "46": "CompositeCron::::asString()",
      "47": "CompositeCron::::asString()",
      "48": "CompositeCron::::asString()",
      "49": "CompositeCron::::asString()",
      "50": "CompositeCron::::asString()",
      "51": "CompositeCron::::asString()",
      "52": "CompositeCron::::asString()",
      "53": "CompositeCron::::asString()",
      "54": "CompositeCron::::asString()",
      "55": "CompositeCron::::asString()",
      "56": "CompositeCron::::asString()",
      "57": "CompositeCron::::asString()",
      "58": "CompositeCron::::asString()",
      "60": "CompositeCron::::getCronDefinition()",
      "61": "CompositeCron::::getCronDefinition()",
      "62": "CompositeCron::::getCronDefinition()",
      "63": "CompositeCron::::getCronDefinition()",
      "65": "CompositeCron::::validate()",
      "66": "CompositeCron::::validate()",
      "67": "CompositeCron::::validate()",
      "68": "CompositeCron::::validate()",
      "69": "CompositeCron::::validate()",
      "70": "CompositeCron::::validate()",
      "71": "CompositeCron::::validate()",
      "73": "CompositeCron::::equivalent(com.cronutils.mapper.CronMapper,com.cronutils.model.Cron)",
      "74": "CompositeCron::::equivalent(com.cronutils.mapper.CronMapper,com.cronutils.model.Cron)",
      "75": "CompositeCron::::equivalent(com.cronutils.mapper.CronMapper,com.cronutils.model.Cron)",
      "76": "CompositeCron::::equivalent(com.cronutils.mapper.CronMapper,com.cronutils.model.Cron)",
      "78": "CompositeCron::::equivalent(com.cronutils.model.Cron)",
      "79": "CompositeCron::::equivalent(com.cronutils.model.Cron)",
      "80": "CompositeCron::::equivalent(com.cronutils.model.Cron)",
      "81": "CompositeCron::::equivalent(com.cronutils.model.Cron)"
    },
    "test_reverse_method_lines_dic": {
      "25": "CompositeCronTest::::setUp()",
      "26": "CompositeCronTest::::setUp()",
      "27": "CompositeCronTest::::setUp()",
      "28": "CompositeCronTest::::setUp()",
      "29": "CompositeCronTest::::setUp()",
      "30": "CompositeCronTest::::setUp()",
      "31": "CompositeCronTest::::setUp()",
      "32": "CompositeCronTest::::setUp()",
      "33": "CompositeCronTest::::setUp()",
      "34": "CompositeCronTest::::setUp()",
      "35": "CompositeCronTest::::setUp()",
      "36": "CompositeCronTest::::setUp()",
      "37": "CompositeCronTest::::setUp()",
      "38": "CompositeCronTest::::setUp()",
      "39": "CompositeCronTest::::setUp()",
      "40": "CompositeCronTest::::setUp()",
      "41": "CompositeCronTest::::setUp()",
      "43": "CompositeCronTest::::weDoNotSupportCronsWithDifferentDefinitions()",
      "44": "CompositeCronTest::::weDoNotSupportCronsWithDifferentDefinitions()",
      "45": "CompositeCronTest::::weDoNotSupportCronsWithDifferentDefinitions()",
      "46": "CompositeCronTest::::weDoNotSupportCronsWithDifferentDefinitions()",
      "47": "CompositeCronTest::::weDoNotSupportCronsWithDifferentDefinitions()",
      "48": "CompositeCronTest::::weDoNotSupportCronsWithDifferentDefinitions()",
      "49": "CompositeCronTest::::weDoNotSupportCronsWithDifferentDefinitions()",
      "50": "CompositeCronTest::::weDoNotSupportCronsWithDifferentDefinitions()",
      "51": "CompositeCronTest::::weDoNotSupportCronsWithDifferentDefinitions()",
      "52": "CompositeCronTest::::weDoNotSupportCronsWithDifferentDefinitions()",
      "53": "CompositeCronTest::::weDoNotSupportCronsWithDifferentDefinitions()",
      "54": "CompositeCronTest::::weDoNotSupportCronsWithDifferentDefinitions()",
      "55": "CompositeCronTest::::weDoNotSupportCronsWithDifferentDefinitions()",
      "57": "CompositeCronTest::::weDoNotSupportCompositeWithoutCrons()",
      "58": "CompositeCronTest::::weDoNotSupportCompositeWithoutCrons()",
      "59": "CompositeCronTest::::weDoNotSupportCompositeWithoutCrons()",
      "60": "CompositeCronTest::::weDoNotSupportCompositeWithoutCrons()",
      "62": "CompositeCronTest::::retrieve()",
      "63": "CompositeCronTest::::retrieve()",
      "64": "CompositeCronTest::::retrieve()",
      "65": "CompositeCronTest::::retrieve()",
      "67": "CompositeCronTest::::retrieveFieldsAsMap()",
      "68": "CompositeCronTest::::retrieveFieldsAsMap()",
      "69": "CompositeCronTest::::retrieveFieldsAsMap()",
      "70": "CompositeCronTest::::retrieveFieldsAsMap()",
      "72": "CompositeCronTest::::asString()",
      "73": "CompositeCronTest::::asString()",
      "74": "CompositeCronTest::::asString()",
      "75": "CompositeCronTest::::asString()",
      "77": "CompositeCronTest::::getCronDefinition()",
      "78": "CompositeCronTest::::getCronDefinition()",
      "79": "CompositeCronTest::::getCronDefinition()",
      "80": "CompositeCronTest::::getCronDefinition()",
      "82": "CompositeCronTest::::validate()",
      "83": "CompositeCronTest::::validate()",
      "84": "CompositeCronTest::::validate()",
      "85": "CompositeCronTest::::validate()",
      "87": "CompositeCronTest::::validateThrowsExceptionEmptyCrons()",
      "88": "CompositeCronTest::::validateThrowsExceptionEmptyCrons()",
      "89": "CompositeCronTest::::validateThrowsExceptionEmptyCrons()",
      "90": "CompositeCronTest::::validateThrowsExceptionEmptyCrons()",
      "92": "CompositeCronTest::::equivalent()",
      "93": "CompositeCronTest::::equivalent()",
      "94": "CompositeCronTest::::equivalent()",
      "95": "CompositeCronTest::::equivalent()",
      "97": "CompositeCronTest::::equivalent1()",
      "98": "CompositeCronTest::::equivalent1()",
      "99": "CompositeCronTest::::equivalent1()",
      "100": "CompositeCronTest::::equivalent1()",
      "101": "CompositeCronTest::::equivalent1()",
      "103": "CompositeCronTest::::testExampleIssue318()",
      "104": "CompositeCronTest::::testExampleIssue318()",
      "105": "CompositeCronTest::::testExampleIssue318()",
      "106": "CompositeCronTest::::testExampleIssue318()",
      "107": "CompositeCronTest::::testExampleIssue318()",
      "108": "CompositeCronTest::::testExampleIssue318()",
      "109": "CompositeCronTest::::testExampleIssue318()",
      "110": "CompositeCronTest::::testExampleIssue318()",
      "111": "CompositeCronTest::::testExampleIssue318()",
      "112": "CompositeCronTest::::testExampleIssue318()",
      "113": "CompositeCronTest::::testExampleIssue318()",
      "114": "CompositeCronTest::::testExampleIssue318()",
      "115": "CompositeCronTest::::testExampleIssue318()",
      "116": "CompositeCronTest::::testExampleIssue318()",
      "117": "CompositeCronTest::::testExampleIssue318()",
      "118": "CompositeCronTest::::testExampleIssue318()",
      "119": "CompositeCronTest::::testExampleIssue318()",
      "120": "CompositeCronTest::::testExampleIssue318()",
      "121": "CompositeCronTest::::testExampleIssue318()",
      "122": "CompositeCronTest::::testExampleIssue318()",
      "123": "CompositeCronTest::::testExampleIssue318()",
      "124": "CompositeCronTest::::testExampleIssue318()",
      "125": "CompositeCronTest::::testExampleIssue318()",
      "126": "CompositeCronTest::::testExampleIssue318()",
      "127": "CompositeCronTest::::testExampleIssue318()",
      "128": "CompositeCronTest::::testExampleIssue318()",
      "129": "CompositeCronTest::::testExampleIssue318()",
      "130": "CompositeCronTest::::testExampleIssue318()",
      "131": "CompositeCronTest::::testExampleIssue318()",
      "132": "CompositeCronTest::::testExampleIssue318()",
      "133": "CompositeCronTest::::testExampleIssue318()",
      "135": "CompositeCronTest::::testIssue263()",
      "136": "CompositeCronTest::::testIssue263()",
      "137": "CompositeCronTest::::testIssue263()",
      "138": "CompositeCronTest::::testIssue263()",
      "139": "CompositeCronTest::::testIssue263()",
      "140": "CompositeCronTest::::testIssue263()",
      "141": "CompositeCronTest::::testIssue263()",
      "142": "CompositeCronTest::::testIssue263()"
    },
    "tests": [
      {
        "test_lines": [
          43,
          55
        ],
        "covered_lines": [
          16,
          20,
          21,
          22,
          23,
          24,
          25
        ]
      },
      {
        "test_lines": [
          57,
          60
        ],
        "covered_lines": [
          16,
          20,
          21,
          22,
          23,
          24,
          25
        ]
      },
      {
        "test_lines": [
          62,
          65
        ],
        "covered_lines": [
          16,
          20,
          21,
          22,
          23,
          24,
          25,
          33
        ]
      },
      {
        "test_lines": [
          67,
          70
        ],
        "covered_lines": [
          16,
          20,
          21,
          22,
          23,
          24,
          25,
          38
        ]
      },
      {
        "test_lines": [
          72,
          75
        ],
        "covered_lines": [
          16,
          20,
          21,
          22,
          23,
          24,
          25,
          43,
          44,
          45,
          46,
          47,
          48,
          49,
          50,
          51,
          52,
          53,
          55,
          57
        ]
      },
      {
        "test_lines": [
          77,
          80
        ],
        "covered_lines": [
          16,
          20,
          21,
          22,
          23,
          24,
          25,
          62
        ]
      },
      {
        "test_lines": [
          82,
          85
        ],
        "covered_lines": [
          16,
          20,
          21,
          22,
          23,
          24,
          25,
          67,
          68,
          69,
          70
        ]
      },
      {
        "test_lines": [
          87,
          90
        ],
        "covered_lines": [
          16,
          20,
          21,
          22,
          23,
          24,
          25
        ]
      },
      {
        "test_lines": [
          92,
          95
        ],
        "covered_lines": [
          16,
          20,
          21,
          22,
          23,
          24,
          25,
          75
        ]
      },
      {
        "test_lines": [
          97,
          101
        ],
        "covered_lines": [
          16,
          20,
          21,
          22,
          23,
          24,
          25,
          43,
          44,
          45,
          46,
          47,
          48,
          49,
          50,
          51,
          52,
          53,
          55,
          57,
          80
        ]
      },
      {
        "test_lines": [
          103,
          133
        ],
        "covered_lines": [
          16,
          20,
          21,
          22,
          23,
          24,
          25,
          28,
          43,
          44,
          45,
          46,
          47,
          48,
          49,
          50,
          51,
          52,
          53,
          55,
          57
        ]
      },
      {
        "test_lines": [
          135,
          142
        ],
        "covered_lines": [
          16,
          20,
          21,
          22,
          23,
          24,
          25,
          43,
          44,
          45,
          46,
          47,
          48,
          49,
          50,
          51,
          52,
          53,
          55,
          57
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/cron-utils/src/main/java/com/cronutils/model/field/CronField.java": {
    "class_content": [
      "/*\n",
      " * Copyright 2014 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.field;\n",
      "\n",
      "import com.cronutils.model.field.constraint.FieldConstraints;\n",
      "import com.cronutils.model.field.expression.FieldExpression;\n",
      "import com.cronutils.utils.Preconditions;\n",
      "\n",
      "import java.io.Serializable;\n",
      "import java.util.Comparator;\n",
      "\n",
      "public class CronField implements Serializable {\n",
      "\n",
      "    private static final long serialVersionUID = -4042499846855256325L;\n",
      "    private final CronFieldName field;\n",
      "    private final FieldExpression expression;\n",
      "    private final FieldConstraints constraints;\n",
      "\n",
      "    public CronField(final CronFieldName field, final FieldExpression expression, final FieldConstraints constraints) {\n",
      "        this.field = field;\n",
      "        this.expression = Preconditions.checkNotNull(expression, \"FieldExpression must not be null\");\n",
      "        this.constraints = Preconditions.checkNotNull(constraints, \"FieldConstraints must not be null\");\n",
      "    }\n",
      "\n",
      "    public CronFieldName getField() {\n",
      "        return field;\n",
      "    }\n",
      "\n",
      "    public FieldExpression getExpression() {\n",
      "        return expression;\n",
      "    }\n",
      "\n",
      "    public FieldConstraints getConstraints() {\n",
      "        return constraints;\n",
      "    }\n",
      "\n",
      "    public static Comparator<CronField> createFieldComparator() {\n",
      "        return Comparator.comparingInt(o -> o.getField().getOrder());\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return \"CronField{\" + \"field=\" + field + '}';\n",
      "    }\n",
      "}\n",
      "\n"
    ],
    "test_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.field;\n",
      "\n",
      "import com.cronutils.model.field.constraint.FieldConstraintsBuilder;\n",
      "import com.cronutils.model.field.expression.FieldExpression;\n",
      "import org.junit.jupiter.api.BeforeEach;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.mockito.Mock;\n",
      "import org.mockito.MockitoAnnotations;\n",
      "\n",
      "import java.util.Comparator;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.*;\n",
      "import static org.mockito.Mockito.mock;\n",
      "import static org.mockito.Mockito.when;\n",
      "\n",
      "public class CronFieldTest {\n",
      "\n",
      "    private CronField result;\n",
      "    private CronFieldName cronFieldName;\n",
      "    @Mock\n",
      "    private FieldExpression mockFieldExpression;\n",
      "\n",
      "    @BeforeEach\n",
      "    public void setUp() {\n",
      "        MockitoAnnotations.initMocks(this);\n",
      "        cronFieldName = CronFieldName.SECOND;\n",
      "        result = new CronField(cronFieldName, mockFieldExpression, FieldConstraintsBuilder.instance().createConstraintsInstance());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGetField() {\n",
      "        assertEquals(cronFieldName, result.getField());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGetExpression() {\n",
      "        assertEquals(mockFieldExpression, result.getExpression());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testCreateFieldComparator() {\n",
      "        final Comparator<CronField> comparator = CronField.createFieldComparator();\n",
      "        final CronField mockResult1 = mock(CronField.class);\n",
      "        final CronFieldName cronFieldName1 = CronFieldName.SECOND;\n",
      "\n",
      "        final CronField mockResult2 = mock(CronField.class);\n",
      "        CronFieldName cronFieldName2 = cronFieldName1;\n",
      "\n",
      "        when(mockResult1.getField()).thenReturn(cronFieldName1);\n",
      "        when(mockResult2.getField()).thenReturn(cronFieldName2);\n",
      "\n",
      "        assertEquals(cronFieldName1, cronFieldName2);\n",
      "        assertEquals(0, comparator.compare(mockResult1, mockResult2));\n",
      "\n",
      "        cronFieldName2 = CronFieldName.MINUTE;\n",
      "\n",
      "        when(mockResult1.getField()).thenReturn(cronFieldName1);\n",
      "        when(mockResult2.getField()).thenReturn(cronFieldName2);\n",
      "\n",
      "        assertNotEquals(cronFieldName1, cronFieldName2);\n",
      "        assertTrue(0 != comparator.compare(mockResult1, mockResult2));\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "CronField::::getField()": [
        36,
        38
      ],
      "CronField::::getExpression()": [
        40,
        42
      ],
      "CronField::::getConstraints()": [
        44,
        46
      ],
      "CronField::::createFieldComparator()": [
        48,
        50
      ],
      "CronField::::toString()": [
        52,
        55
      ]
    },
    "test_method_lines_dic": {
      "CronFieldTest::::setUp()": [
        36,
        41
      ],
      "CronFieldTest::::testGetField()": [
        43,
        46
      ],
      "CronFieldTest::::testGetExpression()": [
        48,
        51
      ],
      "CronFieldTest::::testCreateFieldComparator()": [
        53,
        75
      ]
    },
    "reverse_method_lines_dic": {
      "36": "CronField::::getField()",
      "37": "CronField::::getField()",
      "38": "CronField::::getField()",
      "40": "CronField::::getExpression()",
      "41": "CronField::::getExpression()",
      "42": "CronField::::getExpression()",
      "44": "CronField::::getConstraints()",
      "45": "CronField::::getConstraints()",
      "46": "CronField::::getConstraints()",
      "48": "CronField::::createFieldComparator()",
      "49": "CronField::::createFieldComparator()",
      "50": "CronField::::createFieldComparator()",
      "52": "CronField::::toString()",
      "53": "CronField::::toString()",
      "54": "CronField::::toString()",
      "55": "CronField::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "36": "CronFieldTest::::setUp()",
      "37": "CronFieldTest::::setUp()",
      "38": "CronFieldTest::::setUp()",
      "39": "CronFieldTest::::setUp()",
      "40": "CronFieldTest::::setUp()",
      "41": "CronFieldTest::::setUp()",
      "43": "CronFieldTest::::testGetField()",
      "44": "CronFieldTest::::testGetField()",
      "45": "CronFieldTest::::testGetField()",
      "46": "CronFieldTest::::testGetField()",
      "48": "CronFieldTest::::testGetExpression()",
      "49": "CronFieldTest::::testGetExpression()",
      "50": "CronFieldTest::::testGetExpression()",
      "51": "CronFieldTest::::testGetExpression()",
      "53": "CronFieldTest::::testCreateFieldComparator()",
      "54": "CronFieldTest::::testCreateFieldComparator()",
      "55": "CronFieldTest::::testCreateFieldComparator()",
      "56": "CronFieldTest::::testCreateFieldComparator()",
      "57": "CronFieldTest::::testCreateFieldComparator()",
      "58": "CronFieldTest::::testCreateFieldComparator()",
      "59": "CronFieldTest::::testCreateFieldComparator()",
      "60": "CronFieldTest::::testCreateFieldComparator()",
      "61": "CronFieldTest::::testCreateFieldComparator()",
      "62": "CronFieldTest::::testCreateFieldComparator()",
      "63": "CronFieldTest::::testCreateFieldComparator()",
      "64": "CronFieldTest::::testCreateFieldComparator()",
      "65": "CronFieldTest::::testCreateFieldComparator()",
      "66": "CronFieldTest::::testCreateFieldComparator()",
      "67": "CronFieldTest::::testCreateFieldComparator()",
      "68": "CronFieldTest::::testCreateFieldComparator()",
      "69": "CronFieldTest::::testCreateFieldComparator()",
      "70": "CronFieldTest::::testCreateFieldComparator()",
      "71": "CronFieldTest::::testCreateFieldComparator()",
      "72": "CronFieldTest::::testCreateFieldComparator()",
      "73": "CronFieldTest::::testCreateFieldComparator()",
      "74": "CronFieldTest::::testCreateFieldComparator()",
      "75": "CronFieldTest::::testCreateFieldComparator()"
    },
    "tests": [
      {
        "test_lines": [
          43,
          46
        ],
        "covered_lines": [
          30,
          31,
          32,
          33,
          34,
          37
        ]
      },
      {
        "test_lines": [
          48,
          51
        ],
        "covered_lines": [
          30,
          31,
          32,
          33,
          34,
          41
        ]
      },
      {
        "test_lines": [
          53,
          75
        ],
        "covered_lines": [
          30,
          31,
          32,
          33,
          34,
          49
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/cron-utils/src/main/java/com/cronutils/model/field/expression/Always.java": {
    "class_content": [
      "/*\n",
      " * Copyright 2014 jmrozanec\n",
      " *\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.field.expression;\n",
      "\n",
      "import com.cronutils.model.field.expression.visitor.FieldExpressionVisitor;\n",
      "\n",
      "/**\n",
      " * Represents a star (*) value on cron expression field.\n",
      " */\n",
      "public class Always extends FieldExpression {\n",
      "\n",
      "    private static final long serialVersionUID = -1221923855248365713L;\n",
      "    static final Always INSTANCE = new Always();\n",
      "\n",
      "    /**\n",
      "     * Should be package private and not be instantiated elsewhere.\n",
      "     * Class should become package private too.\n",
      "     */\n",
      "    private Always() {\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public FieldExpression accept(FieldExpressionVisitor visitor) {\n",
      "        return visitor.visit(this);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String asString() {\n",
      "        return \"*\";\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return \"Always{}\";\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.field.expression;\n",
      "\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.assertEquals;\n",
      "\n",
      "public class AlwaysTest {\n",
      "\n",
      "    @Test\n",
      "    public void testAsString() {\n",
      "        assertEquals(\"*\", FieldExpression.always().asString());\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "Always::::accept(com.cronutils.model.field.expression.visitor.FieldExpressionVisitor)": [
        34,
        37
      ],
      "Always::::asString()": [
        39,
        42
      ],
      "Always::::toString()": [
        44,
        47
      ]
    },
    "test_method_lines_dic": {
      "AlwaysTest::::testAsString()": [
        22,
        25
      ]
    },
    "reverse_method_lines_dic": {
      "34": "Always::::accept(com.cronutils.model.field.expression.visitor.FieldExpressionVisitor)",
      "35": "Always::::accept(com.cronutils.model.field.expression.visitor.FieldExpressionVisitor)",
      "36": "Always::::accept(com.cronutils.model.field.expression.visitor.FieldExpressionVisitor)",
      "37": "Always::::accept(com.cronutils.model.field.expression.visitor.FieldExpressionVisitor)",
      "39": "Always::::asString()",
      "40": "Always::::asString()",
      "41": "Always::::asString()",
      "42": "Always::::asString()",
      "44": "Always::::toString()",
      "45": "Always::::toString()",
      "46": "Always::::toString()",
      "47": "Always::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "22": "AlwaysTest::::testAsString()",
      "23": "AlwaysTest::::testAsString()",
      "24": "AlwaysTest::::testAsString()",
      "25": "AlwaysTest::::testAsString()"
    },
    "tests": [
      {
        "test_lines": [
          22,
          25
        ],
        "covered_lines": [
          25,
          31,
          32,
          41
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/cron-utils/src/main/java/com/cronutils/model/field/expression/Every.java": {
    "class_content": [
      "/*\n",
      " * Copyright 2014 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.field.expression;\n",
      "\n",
      "import com.cronutils.model.field.expression.visitor.FieldExpressionVisitor;\n",
      "import com.cronutils.model.field.value.IntegerFieldValue;\n",
      "import com.cronutils.utils.Preconditions;\n",
      "\n",
      "/**\n",
      " * Represents every x time on a cron field.\n",
      " * Usage examples:\n",
      " * - To represent a scheduling every 3 months on a specific time (the standard 0 0 0 *&#47;3 *), use the Every(3) constructor\n",
      " * - To represent a scheduling every 3 months FROM NOW, use the Every(on(now.getMonth, 3)) constructor */\n",
      "public class Every extends FieldExpression {\n",
      "\n",
      "    private static final long serialVersionUID = -1103196842332906994L;\n",
      "    private final FieldExpression expression;\n",
      "    private final IntegerFieldValue period;\n",
      "\n",
      "    public Every(final IntegerFieldValue time) {\n",
      "        this(always(), time);\n",
      "    }\n",
      "\n",
      "    public Every(final FieldExpression expression, final IntegerFieldValue period) {\n",
      "        this.expression = Preconditions.checkNotNull(expression, \"Expression must not be null\");\n",
      "        this.period = period == null ? new IntegerFieldValue(1) : period;\n",
      "    }\n",
      "\n",
      "    public IntegerFieldValue getPeriod() {\n",
      "        return period;\n",
      "    }\n",
      "\n",
      "    public FieldExpression getExpression() {\n",
      "        return expression;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public FieldExpression accept(FieldExpressionVisitor visitor) {\n",
      "        return visitor.visit(this);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String asString() {\n",
      "        final String expressionAsString = expression.asString();\n",
      "        if (\"*\".equals(expressionAsString) && period.getValue() == 1) {\n",
      "            return expressionAsString;\n",
      "        }\n",
      "        return String.format(\"%s/%s\", expressionAsString, period);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.field.expression;\n",
      "\n",
      "import com.cronutils.model.field.value.IntegerFieldValue;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.assertEquals;\n",
      "\n",
      "public class EveryTest {\n",
      "    @Test\n",
      "    public void testGetTime() {\n",
      "        final int every = 5;\n",
      "        assertEquals(every, (int) new Every(new IntegerFieldValue(every)).getPeriod().getValue());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGetTimeNull() {\n",
      "        assertEquals(1, (int) new Every(null).getPeriod().getValue());\n",
      "    }\n",
      "\n",
      "    @Test //issue #180\n",
      "    public void testAsString() {\n",
      "        assertEquals(\"0/1\", new Every(new On(new IntegerFieldValue(0)), new IntegerFieldValue(1)).asString());\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "Every::::getPeriod()": [
        40,
        42
      ],
      "Every::::getExpression()": [
        44,
        46
      ],
      "Every::::accept(com.cronutils.model.field.expression.visitor.FieldExpressionVisitor)": [
        48,
        51
      ],
      "Every::::asString()": [
        53,
        60
      ]
    },
    "test_method_lines_dic": {
      "EveryTest::::testGetTime()": [
        22,
        26
      ],
      "EveryTest::::testGetTimeNull()": [
        28,
        31
      ],
      "EveryTest::::testAsString()": [
        33,
        36
      ]
    },
    "reverse_method_lines_dic": {
      "40": "Every::::getPeriod()",
      "41": "Every::::getPeriod()",
      "42": "Every::::getPeriod()",
      "44": "Every::::getExpression()",
      "45": "Every::::getExpression()",
      "46": "Every::::getExpression()",
      "48": "Every::::accept(com.cronutils.model.field.expression.visitor.FieldExpressionVisitor)",
      "49": "Every::::accept(com.cronutils.model.field.expression.visitor.FieldExpressionVisitor)",
      "50": "Every::::accept(com.cronutils.model.field.expression.visitor.FieldExpressionVisitor)",
      "51": "Every::::accept(com.cronutils.model.field.expression.visitor.FieldExpressionVisitor)",
      "53": "Every::::asString()",
      "54": "Every::::asString()",
      "55": "Every::::asString()",
      "56": "Every::::asString()",
      "57": "Every::::asString()",
      "58": "Every::::asString()",
      "59": "Every::::asString()",
      "60": "Every::::asString()"
    },
    "test_reverse_method_lines_dic": {
      "22": "EveryTest::::testGetTime()",
      "23": "EveryTest::::testGetTime()",
      "24": "EveryTest::::testGetTime()",
      "25": "EveryTest::::testGetTime()",
      "26": "EveryTest::::testGetTime()",
      "28": "EveryTest::::testGetTimeNull()",
      "29": "EveryTest::::testGetTimeNull()",
      "30": "EveryTest::::testGetTimeNull()",
      "31": "EveryTest::::testGetTimeNull()",
      "33": "EveryTest::::testAsString()",
      "34": "EveryTest::::testAsString()",
      "35": "EveryTest::::testAsString()",
      "36": "EveryTest::::testAsString()"
    },
    "tests": [
      {
        "test_lines": [
          22,
          26
        ],
        "covered_lines": [
          32,
          33,
          35,
          36,
          37,
          38,
          41
        ]
      },
      {
        "test_lines": [
          28,
          31
        ],
        "covered_lines": [
          32,
          33,
          35,
          36,
          37,
          38,
          41
        ]
      },
      {
        "test_lines": [
          33,
          36
        ],
        "covered_lines": [
          35,
          36,
          37,
          38,
          55,
          56,
          59
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/cron-utils/src/main/java/com/cronutils/model/field/expression/FieldExpression.java": {
    "class_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " *\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.field.expression;\n",
      "\n",
      "import java.io.Serializable;\n",
      "\n",
      "import com.cronutils.model.field.expression.visitor.FieldExpressionVisitor;\n",
      "\n",
      "public abstract class FieldExpression implements Serializable {\n",
      "\n",
      "\tprivate static final long serialVersionUID = 5138279438874391617L;\n",
      "\n",
      "\tpublic And and(final FieldExpression exp) {\n",
      "\t\treturn new And().and(this).and(exp);\n",
      "\t}\n",
      "\n",
      "\t/**\n",
      "\t * Represents FieldExpression as string.\n",
      "\t *\n",
      "\t * @return String representation, never null.\n",
      "\t */\n",
      "\tpublic abstract String asString();\n",
      "\n",
      "\t/**\n",
      "\t * Accept a visitor to perform some action on the instance. Current instance is\n",
      "\t * cloned, so that we ensure immutability. Clone of this instance is returned\n",
      "\t * after visitor.visit(clone) was invoked.\n",
      "\t *\n",
      "\t * @param visitor - FieldExpressionVisitor instance, never null\n",
      "\t * @return FieldExpression copied instance with visitor action performed.\n",
      "\t */\n",
      "\tpublic abstract FieldExpression accept(final FieldExpressionVisitor visitor);\n",
      "\n",
      "\tpublic static FieldExpression always() {\n",
      "\t\treturn Always.INSTANCE;\n",
      "\t}\n",
      "\n",
      "\tpublic static FieldExpression questionMark() {\n",
      "\t\treturn QuestionMark.INSTANCE;\n",
      "\t}\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.field.expression;\n",
      "\n",
      "import com.cronutils.model.field.expression.visitor.*;\n",
      "\n",
      "import org.junit.jupiter.api.BeforeEach;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.assertTrue;\n",
      "import static org.mockito.Mockito.mock;\n",
      "\n",
      "public class FieldExpressionTest {\n",
      "    private TestFieldExpression testCronFieldExpression;\n",
      "\n",
      "    @BeforeEach\n",
      "    public void setUp() {\n",
      "        testCronFieldExpression = new TestFieldExpression();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testAnd() {\n",
      "        final FieldExpression mockExpression = mock(FieldExpression.class);\n",
      "        final And and = testCronFieldExpression.and(mockExpression);\n",
      "        assertTrue(and.getExpressions().contains(mockExpression));\n",
      "        assertTrue(and.getExpressions().contains(testCronFieldExpression));\n",
      "    }\n",
      "\n",
      "    class TestFieldExpression extends FieldExpression {\n",
      "\n",
      "        private static final long serialVersionUID = 8101930390397976027L;\n",
      "\n",
      "        @Override\n",
      "        public FieldExpression accept(final FieldExpressionVisitor visitor) {\n",
      "            return null;\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public String asString() {\n",
      "            return \"test\";\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "FieldExpression::::and(com.cronutils.model.field.expression.FieldExpression)": [
        25,
        27
      ],
      "FieldExpression::::asString()": [
        34,
        34
      ],
      "FieldExpression::::accept(com.cronutils.model.field.expression.visitor.FieldExpressionVisitor)": [
        44,
        44
      ],
      "FieldExpression::::always()": [
        46,
        48
      ],
      "FieldExpression::::questionMark()": [
        50,
        52
      ]
    },
    "test_method_lines_dic": {
      "FieldExpressionTest::::setUp()": [
        27,
        30
      ],
      "FieldExpressionTest::::testAnd()": [
        32,
        38
      ],
      "FieldExpressionTest.TestFieldExpression::::asString()": [
        49,
        52
      ]
    },
    "reverse_method_lines_dic": {
      "25": "FieldExpression::::and(com.cronutils.model.field.expression.FieldExpression)",
      "26": "FieldExpression::::and(com.cronutils.model.field.expression.FieldExpression)",
      "27": "FieldExpression::::and(com.cronutils.model.field.expression.FieldExpression)",
      "34": "FieldExpression::::asString()",
      "44": "FieldExpression::::accept(com.cronutils.model.field.expression.visitor.FieldExpressionVisitor)",
      "46": "FieldExpression::::always()",
      "47": "FieldExpression::::always()",
      "48": "FieldExpression::::always()",
      "50": "FieldExpression::::questionMark()",
      "51": "FieldExpression::::questionMark()",
      "52": "FieldExpression::::questionMark()"
    },
    "test_reverse_method_lines_dic": {
      "27": "FieldExpressionTest::::setUp()",
      "28": "FieldExpressionTest::::setUp()",
      "29": "FieldExpressionTest::::setUp()",
      "30": "FieldExpressionTest::::setUp()",
      "32": "FieldExpressionTest::::testAnd()",
      "33": "FieldExpressionTest::::testAnd()",
      "34": "FieldExpressionTest::::testAnd()",
      "35": "FieldExpressionTest::::testAnd()",
      "36": "FieldExpressionTest::::testAnd()",
      "37": "FieldExpressionTest::::testAnd()",
      "38": "FieldExpressionTest::::testAnd()",
      "49": "FieldExpressionTest.TestFieldExpression::::asString()",
      "50": "FieldExpressionTest.TestFieldExpression::::asString()",
      "51": "FieldExpressionTest.TestFieldExpression::::asString()",
      "52": "FieldExpressionTest.TestFieldExpression::::asString()"
    },
    "tests": [
      {
        "test_lines": [
          32,
          38
        ],
        "covered_lines": [
          21,
          26
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/cron-utils/src/main/java/com/cronutils/model/field/expression/Between.java": {
    "class_content": [
      "\n",
      "\n",
      "package com.cronutils.model.field.expression;\n",
      "\n",
      "import com.cronutils.model.field.expression.visitor.FieldExpressionVisitor;\n",
      "import com.cronutils.model.field.value.FieldValue;\n",
      "\n",
      "/**\n",
      " * Represents a range in a cron expression.\n",
      " */\n",
      "public class Between extends FieldExpression {\n",
      "\n",
      "    private static final long serialVersionUID = 549075258664100474L;\n",
      "    private final FieldValue<?> from;\n",
      "    private final FieldValue<?> to;\n",
      "\n",
      "    public Between(final Between between) {\n",
      "        this(between.getFrom(), between.getTo());\n",
      "    }\n",
      "\n",
      "    public Between(final FieldValue<?> from, final FieldValue<?> to) {\n",
      "        this.from = from;\n",
      "        this.to = to;\n",
      "    }\n",
      "\n",
      "    public FieldValue<?> getFrom() {\n",
      "        return from;\n",
      "    }\n",
      "\n",
      "    public FieldValue<?> getTo() {\n",
      "        return to;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public FieldExpression accept(FieldExpressionVisitor visitor) {\n",
      "        return visitor.visit(this);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String asString() {\n",
      "        return String.format(\"%s-%s\", from, to);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.field.expression;\n",
      "\n",
      "import com.cronutils.model.field.value.IntegerFieldValue;\n",
      "import com.cronutils.model.field.value.SpecialChar;\n",
      "import com.cronutils.model.field.value.SpecialCharFieldValue;\n",
      "import org.junit.jupiter.api.BeforeEach;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.assertEquals;\n",
      "\n",
      "public class BetweenTest {\n",
      "    private int from;\n",
      "    private int to;\n",
      "\n",
      "    @BeforeEach\n",
      "    public void setUp() {\n",
      "        from = 1;\n",
      "        to = 5;\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGetFrom() {\n",
      "        assertEquals(from, new Between(new IntegerFieldValue(from), new IntegerFieldValue(to)).getFrom().getValue());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGetTo() {\n",
      "        assertEquals(to, new Between(new IntegerFieldValue(from), new IntegerFieldValue(to)).getTo().getValue());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testNonNumericRangeSupported() {\n",
      "        final SpecialChar specialChar = SpecialChar.L;\n",
      "        final Between between = new Between(new SpecialCharFieldValue(specialChar), new IntegerFieldValue(to));\n",
      "        assertEquals(specialChar, between.getFrom().getValue());\n",
      "        assertEquals(to, between.getTo().getValue());\n",
      "        assertEquals(String.format(\"%s-%s\", specialChar, to), between.asString());\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "Between::::getFrom()": [
        26,
        28
      ],
      "Between::::getTo()": [
        30,
        32
      ],
      "Between::::accept(com.cronutils.model.field.expression.visitor.FieldExpressionVisitor)": [
        34,
        37
      ],
      "Between::::asString()": [
        39,
        42
      ]
    },
    "test_method_lines_dic": {
      "BetweenTest::::setUp()": [
        28,
        32
      ],
      "BetweenTest::::testGetFrom()": [
        34,
        37
      ],
      "BetweenTest::::testGetTo()": [
        39,
        42
      ],
      "BetweenTest::::testNonNumericRangeSupported()": [
        44,
        51
      ]
    },
    "reverse_method_lines_dic": {
      "26": "Between::::getFrom()",
      "27": "Between::::getFrom()",
      "28": "Between::::getFrom()",
      "30": "Between::::getTo()",
      "31": "Between::::getTo()",
      "32": "Between::::getTo()",
      "34": "Between::::accept(com.cronutils.model.field.expression.visitor.FieldExpressionVisitor)",
      "35": "Between::::accept(com.cronutils.model.field.expression.visitor.FieldExpressionVisitor)",
      "36": "Between::::accept(com.cronutils.model.field.expression.visitor.FieldExpressionVisitor)",
      "37": "Between::::accept(com.cronutils.model.field.expression.visitor.FieldExpressionVisitor)",
      "39": "Between::::asString()",
      "40": "Between::::asString()",
      "41": "Between::::asString()",
      "42": "Between::::asString()"
    },
    "test_reverse_method_lines_dic": {
      "28": "BetweenTest::::setUp()",
      "29": "BetweenTest::::setUp()",
      "30": "BetweenTest::::setUp()",
      "31": "BetweenTest::::setUp()",
      "32": "BetweenTest::::setUp()",
      "34": "BetweenTest::::testGetFrom()",
      "35": "BetweenTest::::testGetFrom()",
      "36": "BetweenTest::::testGetFrom()",
      "37": "BetweenTest::::testGetFrom()",
      "39": "BetweenTest::::testGetTo()",
      "40": "BetweenTest::::testGetTo()",
      "41": "BetweenTest::::testGetTo()",
      "42": "BetweenTest::::testGetTo()",
      "44": "BetweenTest::::testNonNumericRangeSupported()",
      "45": "BetweenTest::::testNonNumericRangeSupported()",
      "46": "BetweenTest::::testNonNumericRangeSupported()",
      "47": "BetweenTest::::testNonNumericRangeSupported()",
      "48": "BetweenTest::::testNonNumericRangeSupported()",
      "49": "BetweenTest::::testNonNumericRangeSupported()",
      "50": "BetweenTest::::testNonNumericRangeSupported()",
      "51": "BetweenTest::::testNonNumericRangeSupported()"
    },
    "tests": [
      {
        "test_lines": [
          34,
          37
        ],
        "covered_lines": [
          21,
          22,
          23,
          24,
          27
        ]
      },
      {
        "test_lines": [
          39,
          42
        ],
        "covered_lines": [
          21,
          22,
          23,
          24,
          31
        ]
      },
      {
        "test_lines": [
          44,
          51
        ],
        "covered_lines": [
          21,
          22,
          23,
          24,
          27,
          31,
          41
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/cron-utils/src/main/java/com/cronutils/model/field/expression/On.java": {
    "class_content": [
      "/*\n",
      " * Copyright 2014 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.field.expression;\n",
      "\n",
      "import com.cronutils.model.field.expression.visitor.FieldExpressionVisitor;\n",
      "import com.cronutils.model.field.value.IntegerFieldValue;\n",
      "import com.cronutils.model.field.value.SpecialChar;\n",
      "import com.cronutils.model.field.value.SpecialCharFieldValue;\n",
      "import com.cronutils.utils.Preconditions;\n",
      "import com.cronutils.utils.StringUtils;\n",
      "\n",
      "import static com.cronutils.utils.Preconditions.checkArgument;\n",
      "\n",
      "public class On extends FieldExpression {\n",
      "\n",
      "    private static final long serialVersionUID = 8746471281123327324L;\n",
      "    private static final int DEFAULT_NTH_VALUE = -1;\n",
      "    private final IntegerFieldValue time;\n",
      "    private final IntegerFieldValue nth;\n",
      "    private final SpecialCharFieldValue specialChar;\n",
      "\n",
      "    public On(final SpecialCharFieldValue specialChar) {\n",
      "        this(new IntegerFieldValue(DEFAULT_NTH_VALUE), specialChar);\n",
      "    }\n",
      "\n",
      "    public On(final IntegerFieldValue time) {\n",
      "        this(time, new SpecialCharFieldValue(SpecialChar.NONE));\n",
      "    }\n",
      "\n",
      "    public On(final IntegerFieldValue time, final SpecialCharFieldValue specialChar) {\n",
      "        this(time, specialChar, new IntegerFieldValue(-1));\n",
      "        checkArgument(!specialChar.getValue().equals(SpecialChar.HASH), \"value missing for a#b cron expression\");\n",
      "    }\n",
      "\n",
      "    public On(final IntegerFieldValue time, final SpecialCharFieldValue specialChar, final IntegerFieldValue nth) {\n",
      "        Preconditions.checkNotNull(time, \"time must not be null\");\n",
      "        Preconditions.checkNotNull(specialChar, \"special char must not null\");\n",
      "        Preconditions.checkNotNull(nth, \"nth value must not be null\");\n",
      "\n",
      "        this.time = time;\n",
      "        this.specialChar = specialChar;\n",
      "        this.nth = nth;\n",
      "    }\n",
      "\n",
      "    public IntegerFieldValue getTime() {\n",
      "        return time;\n",
      "    }\n",
      "\n",
      "    public IntegerFieldValue getNth() {\n",
      "        return nth;\n",
      "    }\n",
      "\n",
      "    public SpecialCharFieldValue getSpecialChar() {\n",
      "        return specialChar;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public FieldExpression accept(FieldExpressionVisitor visitor) {\n",
      "        return visitor.visit(this);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String asString() {\n",
      "        switch (specialChar.getValue()) {\n",
      "            case NONE:\n",
      "                return getTime().toString();\n",
      "            case HASH:\n",
      "                return String.format(\"%s#%s\", getTime(), getNth());\n",
      "            case W:\n",
      "                return isDefault(getTime()) ? \"W\" : String.format(\"%sW\", getTime());\n",
      "            case L:\n",
      "                return isDefault(getTime()) ? \"L\" + getNthStringRepresentation() : String.format(\"%sL\", getTime());\n",
      "            case QUESTION_MARK:\n",
      "                return \"?\";\n",
      "            default:\n",
      "                return specialChar.toString();\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private String getNthStringRepresentation() {\n",
      "        return isDefault(getNth()) ? StringUtils.EMPTY : String.format(\"-%s\", getNth());\n",
      "    }\n",
      "\n",
      "    private boolean isDefault(final IntegerFieldValue fieldValue) {\n",
      "        return fieldValue.getValue() == DEFAULT_NTH_VALUE;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.field.expression;\n",
      "\n",
      "import com.cronutils.model.field.value.IntegerFieldValue;\n",
      "import com.cronutils.model.field.value.SpecialChar;\n",
      "import com.cronutils.model.field.value.SpecialCharFieldValue;\n",
      "import org.junit.jupiter.api.BeforeEach;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.assertEquals;\n",
      "import static org.junit.jupiter.api.Assertions.assertThrows;\n",
      "\n",
      "public class OnTest {\n",
      "    private int time;\n",
      "    private int nth;\n",
      "\n",
      "    @BeforeEach\n",
      "    public void setUp() {\n",
      "        time = 5;\n",
      "        nth = 3;\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGetTime() {\n",
      "        assertEquals(time, (int) new On(new IntegerFieldValue(time)).getTime().getValue());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGetNth() {\n",
      "        assertEquals(nth,\n",
      "                (int) new On(new IntegerFieldValue(time), new SpecialCharFieldValue(SpecialChar.HASH), new IntegerFieldValue(nth)).getNth().getValue());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testOnlyNthFails() {\n",
      "        assertThrows(RuntimeException.class, () -> new On(null, new SpecialCharFieldValue(SpecialChar.HASH), new IntegerFieldValue(nth)));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testAsStringJustNumber() {\n",
      "        final int expression = 3;\n",
      "        assertEquals(String.format(\"%s\", expression), new On(new IntegerFieldValue(expression)).asString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testAsStringSpecialCharW() {\n",
      "        final String expression = \"1W\";\n",
      "        assertEquals(expression, new On(new IntegerFieldValue(1), new SpecialCharFieldValue(SpecialChar.W)).asString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testAsStringSpecialCharL() {\n",
      "        final String expression = \"L\";\n",
      "        assertEquals(expression, new On(new SpecialCharFieldValue(SpecialChar.L)).asString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testAsStringSpecialCharLWithNth() {\n",
      "        final String expression = \"L-3\";\n",
      "        assertEquals(expression, new On(new IntegerFieldValue(-1), new SpecialCharFieldValue(SpecialChar.L), new IntegerFieldValue(3)).asString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testAsStringWithNth() {\n",
      "        final int first = 3;\n",
      "        final int second = 4;\n",
      "        final String expression = String.format(\"%s#%s\", first, second);\n",
      "        assertEquals(expression,\n",
      "                new On(new IntegerFieldValue(first), new SpecialCharFieldValue(SpecialChar.HASH), new IntegerFieldValue(second)).asString());\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "On::::getTime()": [
        56,
        58
      ],
      "On::::getNth()": [
        60,
        62
      ],
      "On::::getSpecialChar()": [
        64,
        66
      ],
      "On::::accept(com.cronutils.model.field.expression.visitor.FieldExpressionVisitor)": [
        68,
        71
      ],
      "On::::asString()": [
        73,
        89
      ],
      "On::::getNthStringRepresentation()": [
        91,
        93
      ],
      "On::::isDefault(com.cronutils.model.field.value.IntegerFieldValue)": [
        95,
        97
      ]
    },
    "test_method_lines_dic": {
      "OnTest::::setUp()": [
        29,
        33
      ],
      "OnTest::::testGetTime()": [
        35,
        38
      ],
      "OnTest::::testGetNth()": [
        40,
        44
      ],
      "OnTest::::testOnlyNthFails()": [
        46,
        49
      ],
      "OnTest::::testAsStringJustNumber()": [
        51,
        55
      ],
      "OnTest::::testAsStringSpecialCharW()": [
        57,
        61
      ],
      "OnTest::::testAsStringSpecialCharL()": [
        63,
        67
      ],
      "OnTest::::testAsStringSpecialCharLWithNth()": [
        69,
        73
      ],
      "OnTest::::testAsStringWithNth()": [
        75,
        82
      ]
    },
    "reverse_method_lines_dic": {
      "56": "On::::getTime()",
      "57": "On::::getTime()",
      "58": "On::::getTime()",
      "60": "On::::getNth()",
      "61": "On::::getNth()",
      "62": "On::::getNth()",
      "64": "On::::getSpecialChar()",
      "65": "On::::getSpecialChar()",
      "66": "On::::getSpecialChar()",
      "68": "On::::accept(com.cronutils.model.field.expression.visitor.FieldExpressionVisitor)",
      "69": "On::::accept(com.cronutils.model.field.expression.visitor.FieldExpressionVisitor)",
      "70": "On::::accept(com.cronutils.model.field.expression.visitor.FieldExpressionVisitor)",
      "71": "On::::accept(com.cronutils.model.field.expression.visitor.FieldExpressionVisitor)",
      "73": "On::::asString()",
      "74": "On::::asString()",
      "75": "On::::asString()",
      "76": "On::::asString()",
      "77": "On::::asString()",
      "78": "On::::asString()",
      "79": "On::::asString()",
      "80": "On::::asString()",
      "81": "On::::asString()",
      "82": "On::::asString()",
      "83": "On::::asString()",
      "84": "On::::asString()",
      "85": "On::::asString()",
      "86": "On::::asString()",
      "87": "On::::asString()",
      "88": "On::::asString()",
      "89": "On::::asString()",
      "91": "On::::getNthStringRepresentation()",
      "92": "On::::getNthStringRepresentation()",
      "93": "On::::getNthStringRepresentation()",
      "95": "On::::isDefault(com.cronutils.model.field.value.IntegerFieldValue)",
      "96": "On::::isDefault(com.cronutils.model.field.value.IntegerFieldValue)",
      "97": "On::::isDefault(com.cronutils.model.field.value.IntegerFieldValue)"
    },
    "test_reverse_method_lines_dic": {
      "29": "OnTest::::setUp()",
      "30": "OnTest::::setUp()",
      "31": "OnTest::::setUp()",
      "32": "OnTest::::setUp()",
      "33": "OnTest::::setUp()",
      "35": "OnTest::::testGetTime()",
      "36": "OnTest::::testGetTime()",
      "37": "OnTest::::testGetTime()",
      "38": "OnTest::::testGetTime()",
      "40": "OnTest::::testGetNth()",
      "41": "OnTest::::testGetNth()",
      "42": "OnTest::::testGetNth()",
      "43": "OnTest::::testGetNth()",
      "44": "OnTest::::testGetNth()",
      "46": "OnTest::::testOnlyNthFails()",
      "47": "OnTest::::testOnlyNthFails()",
      "48": "OnTest::::testOnlyNthFails()",
      "49": "OnTest::::testOnlyNthFails()",
      "51": "OnTest::::testAsStringJustNumber()",
      "52": "OnTest::::testAsStringJustNumber()",
      "53": "OnTest::::testAsStringJustNumber()",
      "54": "OnTest::::testAsStringJustNumber()",
      "55": "OnTest::::testAsStringJustNumber()",
      "57": "OnTest::::testAsStringSpecialCharW()",
      "58": "OnTest::::testAsStringSpecialCharW()",
      "59": "OnTest::::testAsStringSpecialCharW()",
      "60": "OnTest::::testAsStringSpecialCharW()",
      "61": "OnTest::::testAsStringSpecialCharW()",
      "63": "OnTest::::testAsStringSpecialCharL()",
      "64": "OnTest::::testAsStringSpecialCharL()",
      "65": "OnTest::::testAsStringSpecialCharL()",
      "66": "OnTest::::testAsStringSpecialCharL()",
      "67": "OnTest::::testAsStringSpecialCharL()",
      "69": "OnTest::::testAsStringSpecialCharLWithNth()",
      "70": "OnTest::::testAsStringSpecialCharLWithNth()",
      "71": "OnTest::::testAsStringSpecialCharLWithNth()",
      "72": "OnTest::::testAsStringSpecialCharLWithNth()",
      "73": "OnTest::::testAsStringSpecialCharLWithNth()",
      "75": "OnTest::::testAsStringWithNth()",
      "76": "OnTest::::testAsStringWithNth()",
      "77": "OnTest::::testAsStringWithNth()",
      "78": "OnTest::::testAsStringWithNth()",
      "79": "OnTest::::testAsStringWithNth()",
      "80": "OnTest::::testAsStringWithNth()",
      "81": "OnTest::::testAsStringWithNth()",
      "82": "OnTest::::testAsStringWithNth()"
    },
    "tests": [
      {
        "test_lines": [
          35,
          38
        ],
        "covered_lines": [
          38,
          39,
          42,
          43,
          44,
          46,
          47,
          48,
          49,
          51,
          52,
          53,
          54,
          57
        ]
      },
      {
        "test_lines": [
          40,
          44
        ],
        "covered_lines": [
          46,
          47,
          48,
          49,
          51,
          52,
          53,
          54,
          61
        ]
      },
      {
        "test_lines": [
          46,
          49
        ],
        "covered_lines": [
          46
        ]
      },
      {
        "test_lines": [
          51,
          55
        ],
        "covered_lines": [
          38,
          39,
          42,
          43,
          44,
          46,
          47,
          48,
          49,
          51,
          52,
          53,
          54,
          57,
          75,
          77
        ]
      },
      {
        "test_lines": [
          57,
          61
        ],
        "covered_lines": [
          42,
          43,
          44,
          46,
          47,
          48,
          49,
          51,
          52,
          53,
          54,
          57,
          75,
          81,
          96
        ]
      },
      {
        "test_lines": [
          63,
          67
        ],
        "covered_lines": [
          34,
          35,
          42,
          43,
          44,
          46,
          47,
          48,
          49,
          51,
          52,
          53,
          54,
          57,
          61,
          75,
          83,
          92,
          96
        ]
      },
      {
        "test_lines": [
          69,
          73
        ],
        "covered_lines": [
          46,
          47,
          48,
          49,
          51,
          52,
          53,
          54,
          57,
          61,
          75,
          83,
          92,
          96
        ]
      },
      {
        "test_lines": [
          75,
          82
        ],
        "covered_lines": [
          46,
          47,
          48,
          49,
          51,
          52,
          53,
          54,
          57,
          61,
          75,
          79
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/cron-utils/src/main/java/com/cronutils/model/field/expression/And.java": {
    "class_content": [
      "/*\n",
      " * Copyright 2014 jmrozanec\n",
      " *\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.field.expression;\n",
      "\n",
      "import com.cronutils.model.field.expression.visitor.FieldExpressionVisitor;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.Collections;\n",
      "import java.util.List;\n",
      "\n",
      "/**\n",
      " * Represents a conjunction of cron expressions for a field.\n",
      " */\n",
      "public class And extends FieldExpression {\n",
      "\n",
      "    private static final long serialVersionUID = -3406340596495131941L;\n",
      "    private final List<FieldExpression> expressions;\n",
      "\n",
      "    public And() {\n",
      "        expressions = new ArrayList<>();\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public And and(final FieldExpression exp) {\n",
      "        expressions.add(exp);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public FieldExpression accept(FieldExpressionVisitor visitor) {\n",
      "        return visitor.visit(this);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String asString() {\n",
      "        final StringBuilder builder = new StringBuilder();\n",
      "        for (int j = 0; j < expressions.size() - 1; j++) {\n",
      "            builder.append(expressions.get(j).asString());\n",
      "            builder.append(\",\");\n",
      "        }\n",
      "        if(expressions.size()>0){\n",
      "            builder.append(expressions.get(expressions.size() - 1).asString());\n",
      "        }\n",
      "        return builder.toString();\n",
      "    }\n",
      "\n",
      "    public List<FieldExpression> getExpressions() {\n",
      "        return Collections.unmodifiableList(expressions);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.field.expression;\n",
      "\n",
      "import org.junit.jupiter.api.BeforeEach;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.assertEquals;\n",
      "import static org.junit.jupiter.api.Assertions.assertThrows;\n",
      "import static org.mockito.Mockito.mock;\n",
      "import static org.mockito.Mockito.when;\n",
      "\n",
      "public class AndTest {\n",
      "\n",
      "    private And and;\n",
      "    private FieldExpression expression1;\n",
      "    private FieldExpression expression2;\n",
      "\n",
      "    @BeforeEach\n",
      "    public void setUp() {\n",
      "        and = new And();\n",
      "        expression1 = mock(FieldExpression.class);\n",
      "        expression2 = mock(FieldExpression.class);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testAnd() {\n",
      "        and.and(expression1).and(expression2);\n",
      "        assertEquals(2, and.getExpressions().size());\n",
      "        assertEquals(expression1, and.getExpressions().get(0));\n",
      "        assertEquals(expression2, and.getExpressions().get(1));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGetExpressionsImmutable() {\n",
      "        assertThrows(UnsupportedOperationException.class, () -> and.and(expression1).getExpressions().add(expression2));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testAString() {\n",
      "        final String expression1String = \"expression1\";\n",
      "        final String expression2String = \"expression2\";\n",
      "        when(expression1.asString()).thenReturn(expression1String);\n",
      "        when(expression2.asString()).thenReturn(expression2String);\n",
      "        and.and(expression1).and(expression2);\n",
      "\n",
      "        assertEquals(String.format(\"%s,%s\", expression1String, expression2String), and.asString());\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "And::::and(com.cronutils.model.field.expression.FieldExpression)": [
        35,
        39
      ],
      "And::::accept(com.cronutils.model.field.expression.visitor.FieldExpressionVisitor)": [
        41,
        44
      ],
      "And::::asString()": [
        46,
        57
      ],
      "And::::getExpressions()": [
        59,
        61
      ]
    },
    "test_method_lines_dic": {
      "AndTest::::setUp()": [
        30,
        35
      ],
      "AndTest::::testAnd()": [
        37,
        43
      ],
      "AndTest::::testGetExpressionsImmutable()": [
        45,
        48
      ],
      "AndTest::::testAString()": [
        50,
        59
      ]
    },
    "reverse_method_lines_dic": {
      "35": "And::::and(com.cronutils.model.field.expression.FieldExpression)",
      "36": "And::::and(com.cronutils.model.field.expression.FieldExpression)",
      "37": "And::::and(com.cronutils.model.field.expression.FieldExpression)",
      "38": "And::::and(com.cronutils.model.field.expression.FieldExpression)",
      "39": "And::::and(com.cronutils.model.field.expression.FieldExpression)",
      "41": "And::::accept(com.cronutils.model.field.expression.visitor.FieldExpressionVisitor)",
      "42": "And::::accept(com.cronutils.model.field.expression.visitor.FieldExpressionVisitor)",
      "43": "And::::accept(com.cronutils.model.field.expression.visitor.FieldExpressionVisitor)",
      "44": "And::::accept(com.cronutils.model.field.expression.visitor.FieldExpressionVisitor)",
      "46": "And::::asString()",
      "47": "And::::asString()",
      "48": "And::::asString()",
      "49": "And::::asString()",
      "50": "And::::asString()",
      "51": "And::::asString()",
      "52": "And::::asString()",
      "53": "And::::asString()",
      "54": "And::::asString()",
      "55": "And::::asString()",
      "56": "And::::asString()",
      "57": "And::::asString()",
      "59": "And::::getExpressions()",
      "60": "And::::getExpressions()",
      "61": "And::::getExpressions()"
    },
    "test_reverse_method_lines_dic": {
      "30": "AndTest::::setUp()",
      "31": "AndTest::::setUp()",
      "32": "AndTest::::setUp()",
      "33": "AndTest::::setUp()",
      "34": "AndTest::::setUp()",
      "35": "AndTest::::setUp()",
      "37": "AndTest::::testAnd()",
      "38": "AndTest::::testAnd()",
      "39": "AndTest::::testAnd()",
      "40": "AndTest::::testAnd()",
      "41": "AndTest::::testAnd()",
      "42": "AndTest::::testAnd()",
      "43": "AndTest::::testAnd()",
      "45": "AndTest::::testGetExpressionsImmutable()",
      "46": "AndTest::::testGetExpressionsImmutable()",
      "47": "AndTest::::testGetExpressionsImmutable()",
      "48": "AndTest::::testGetExpressionsImmutable()",
      "50": "AndTest::::testAString()",
      "51": "AndTest::::testAString()",
      "52": "AndTest::::testAString()",
      "53": "AndTest::::testAString()",
      "54": "AndTest::::testAString()",
      "55": "AndTest::::testAString()",
      "56": "AndTest::::testAString()",
      "57": "AndTest::::testAString()",
      "58": "AndTest::::testAString()",
      "59": "AndTest::::testAString()"
    },
    "tests": [
      {
        "test_lines": [
          37,
          43
        ],
        "covered_lines": [
          31,
          32,
          33,
          37,
          38,
          60
        ]
      },
      {
        "test_lines": [
          45,
          48
        ],
        "covered_lines": [
          31,
          32,
          33,
          37,
          38,
          60
        ]
      },
      {
        "test_lines": [
          50,
          59
        ],
        "covered_lines": [
          31,
          32,
          33,
          37,
          38,
          48,
          49,
          50,
          51,
          53,
          54,
          56
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/cron-utils/src/main/java/com/cronutils/model/field/expression/visitor/ValueMappingFieldExpressionVisitor.java": {
    "class_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.field.expression.visitor;\n",
      "\n",
      "import com.cronutils.Function;\n",
      "import com.cronutils.model.field.expression.*;\n",
      "import com.cronutils.model.field.value.FieldValue;\n",
      "import com.cronutils.model.field.value.IntegerFieldValue;\n",
      "\n",
      "import static com.cronutils.model.field.expression.FieldExpression.questionMark;\n",
      "\n",
      "/**\n",
      " * Performs a transformation on FieldExpression values.\n",
      " * Returns a new FieldExpression instance considering a possible change\n",
      " * in new FieldExpression instance constraints.\n",
      " */\n",
      "public class ValueMappingFieldExpressionVisitor implements FieldExpressionVisitor {\n",
      "    private final Function<FieldValue<?>, FieldValue<?>> transform;\n",
      "\n",
      "    public ValueMappingFieldExpressionVisitor(final Function<FieldValue<?>, FieldValue<?>> transform) {\n",
      "        this.transform = transform;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public FieldExpression visit(final Always always) {\n",
      "        return always;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public FieldExpression visit(final And and) {\n",
      "        final And clone = new And();\n",
      "        for (final FieldExpression expression : and.getExpressions()) {\n",
      "            clone.and(expression.accept(this));\n",
      "        }\n",
      "        return clone;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public FieldExpression visit(final Between between) {\n",
      "        final FieldValue<?> from = transform.apply(between.getFrom());\n",
      "        final FieldValue<?> to = transform.apply(between.getTo());\n",
      "        return new Between(from, to);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public FieldExpression visit(final Every every) {\n",
      "        return new Every((IntegerFieldValue) transform.apply(every.getPeriod()));\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public FieldExpression visit(final On on) {\n",
      "        return new On((IntegerFieldValue) transform.apply(on.getTime()), on.getSpecialChar(), on.getNth());\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public FieldExpression visit(final QuestionMark questionMark) {\n",
      "        return questionMark();\n",
      "    }\n",
      "}\n",
      "\n"
    ],
    "test_content": [
      "/*\n",
      " * Copyright 2014 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.field.expression.visitor;\n",
      "\n",
      "import com.cronutils.Function;\n",
      "import com.cronutils.model.field.expression.FieldExpression;\n",
      "import com.cronutils.model.field.expression.QuestionMark;\n",
      "import com.cronutils.model.field.value.FieldValue;\n",
      "import org.junit.jupiter.api.BeforeEach;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.assertTrue;\n",
      "\n",
      "public class ValueMappingFieldExpressionVisitorTest {\n",
      "    private ValueMappingFieldExpressionVisitor valueMappingFieldExpressionVisitor;\n",
      "\n",
      "    @BeforeEach\n",
      "    public void setUp() {\n",
      "        final Function<FieldValue<?>, FieldValue<?>> transform = input -> input;\n",
      "        valueMappingFieldExpressionVisitor = new ValueMappingFieldExpressionVisitor(transform);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testVisitQuestionMark() {\n",
      "        final FieldExpression param = FieldExpression.questionMark();\n",
      "        final QuestionMark questionMark = (QuestionMark) param.accept(valueMappingFieldExpressionVisitor);\n",
      "        assertTrue(param == questionMark);//always the same cause of singleton pattern\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "ValueMappingFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Always)": [
        35,
        38
      ],
      "ValueMappingFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.And)": [
        40,
        47
      ],
      "ValueMappingFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Between)": [
        49,
        54
      ],
      "ValueMappingFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Every)": [
        56,
        59
      ],
      "ValueMappingFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.On)": [
        61,
        64
      ],
      "ValueMappingFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.QuestionMark)": [
        66,
        69
      ]
    },
    "test_method_lines_dic": {
      "ValueMappingFieldExpressionVisitorTest::::setUp()": [
        28,
        32
      ],
      "ValueMappingFieldExpressionVisitorTest::::testVisitQuestionMark()": [
        34,
        39
      ]
    },
    "reverse_method_lines_dic": {
      "35": "ValueMappingFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Always)",
      "36": "ValueMappingFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Always)",
      "37": "ValueMappingFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Always)",
      "38": "ValueMappingFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Always)",
      "40": "ValueMappingFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.And)",
      "41": "ValueMappingFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.And)",
      "42": "ValueMappingFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.And)",
      "43": "ValueMappingFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.And)",
      "44": "ValueMappingFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.And)",
      "45": "ValueMappingFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.And)",
      "46": "ValueMappingFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.And)",
      "47": "ValueMappingFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.And)",
      "49": "ValueMappingFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Between)",
      "50": "ValueMappingFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Between)",
      "51": "ValueMappingFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Between)",
      "52": "ValueMappingFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Between)",
      "53": "ValueMappingFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Between)",
      "54": "ValueMappingFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Between)",
      "56": "ValueMappingFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Every)",
      "57": "ValueMappingFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Every)",
      "58": "ValueMappingFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Every)",
      "59": "ValueMappingFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Every)",
      "61": "ValueMappingFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.On)",
      "62": "ValueMappingFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.On)",
      "63": "ValueMappingFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.On)",
      "64": "ValueMappingFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.On)",
      "66": "ValueMappingFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.QuestionMark)",
      "67": "ValueMappingFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.QuestionMark)",
      "68": "ValueMappingFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.QuestionMark)",
      "69": "ValueMappingFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.QuestionMark)"
    },
    "test_reverse_method_lines_dic": {
      "28": "ValueMappingFieldExpressionVisitorTest::::setUp()",
      "29": "ValueMappingFieldExpressionVisitorTest::::setUp()",
      "30": "ValueMappingFieldExpressionVisitorTest::::setUp()",
      "31": "ValueMappingFieldExpressionVisitorTest::::setUp()",
      "32": "ValueMappingFieldExpressionVisitorTest::::setUp()",
      "34": "ValueMappingFieldExpressionVisitorTest::::testVisitQuestionMark()",
      "35": "ValueMappingFieldExpressionVisitorTest::::testVisitQuestionMark()",
      "36": "ValueMappingFieldExpressionVisitorTest::::testVisitQuestionMark()",
      "37": "ValueMappingFieldExpressionVisitorTest::::testVisitQuestionMark()",
      "38": "ValueMappingFieldExpressionVisitorTest::::testVisitQuestionMark()",
      "39": "ValueMappingFieldExpressionVisitorTest::::testVisitQuestionMark()"
    },
    "tests": [
      {
        "test_lines": [
          34,
          39
        ],
        "covered_lines": [
          31,
          32,
          33,
          68
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/cron-utils/src/main/java/com/cronutils/model/field/expression/visitor/ValidationFieldExpressionVisitor.java": {
    "class_content": [
      "/*\n",
      " * Copyright 2014 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.field.expression.visitor;\n",
      "\n",
      "import com.cronutils.StringValidations;\n",
      "import com.cronutils.model.field.constraint.FieldConstraints;\n",
      "import com.cronutils.model.field.expression.*;\n",
      "import com.cronutils.model.field.value.FieldValue;\n",
      "import com.cronutils.model.field.value.IntegerFieldValue;\n",
      "import com.cronutils.model.field.value.SpecialChar;\n",
      "import com.cronutils.model.field.value.SpecialCharFieldValue;\n",
      "import com.cronutils.utils.VisibleForTesting;\n",
      "\n",
      "public class ValidationFieldExpressionVisitor implements FieldExpressionVisitor {\n",
      "    private static final String OORANGE = \"Value %s not in range [%s, %s]\";\n",
      "\n",
      "    private final FieldConstraints constraints;\n",
      "    private final StringValidations stringValidations;\n",
      "\n",
      "    public ValidationFieldExpressionVisitor(final FieldConstraints constraints) {\n",
      "        this.constraints = constraints;\n",
      "        stringValidations = new StringValidations(constraints);\n",
      "    }\n",
      "\n",
      "    protected ValidationFieldExpressionVisitor(final FieldConstraints constraints, final StringValidations stringValidation) {\n",
      "        this.constraints = constraints;\n",
      "        stringValidations = stringValidation;\n",
      "    }\n",
      "\n",
      "    private void checkUnsupportedChars(final FieldExpression expression) {\n",
      "        final String unsupportedChars = stringValidations.removeValidChars(expression.asString());\n",
      "        if (unsupportedChars.isEmpty())\n",
      "            return;\n",
      "        throw new IllegalArgumentException(\n",
      "                String.format(\"Invalid chars in expression! Expression: %s Invalid chars: %s\",\n",
      "                        expression.asString(), unsupportedChars)\n",
      "        );\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Always visit(final Always always) {\n",
      "        this.checkUnsupportedChars(always);\n",
      "        return always;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public And visit(final And and) {\n",
      "        this.checkUnsupportedChars(and);\n",
      "        for (final FieldExpression expression : and.getExpressions()) {\n",
      "            expression.accept(this);\n",
      "        }\n",
      "        return and;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Between visit(final Between between) {\n",
      "        this.checkUnsupportedChars(between);\n",
      "        preConditions(between);\n",
      "\n",
      "        if ((constraints.isStrictRange()) && between.getFrom() instanceof IntegerFieldValue && between.getTo() instanceof IntegerFieldValue) {\n",
      "            final int from = ((IntegerFieldValue) between.getFrom()).getValue();\n",
      "            final int to = ((IntegerFieldValue) between.getTo()).getValue();\n",
      "            if (from > to) {\n",
      "                throw new IllegalArgumentException(String.format(\"Invalid range! [%s,%s]\", from, to));\n",
      "            }\n",
      "        }\n",
      "\n",
      "        return between;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Every visit(final Every every) {\n",
      "        this.checkUnsupportedChars(every);\n",
      "        if (every.getExpression() != null)\n",
      "            every.getExpression().accept(this);\n",
      "        isPeriodInRange(every.getPeriod());\n",
      "        return every;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public On visit(final On on) {\n",
      "        this.checkUnsupportedChars(on);\n",
      "        if (!isDefault(on.getTime())) {\n",
      "            isInRange(on.getTime());\n",
      "        }\n",
      "        if (!isDefault(on.getNth())) {\n",
      "            isInRange(on.getNth());\n",
      "        }\n",
      "        return on;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public QuestionMark visit(final QuestionMark questionMark) {\n",
      "        this.checkUnsupportedChars(questionMark);\n",
      "        return questionMark;\n",
      "    }\n",
      "\n",
      "    private void preConditions(final Between between) {\n",
      "        isInRange(between.getFrom());\n",
      "        isInRange(between.getTo());\n",
      "        if (isSpecialCharNotL(between.getFrom()) || isSpecialCharNotL(between.getTo())) {\n",
      "            throw new IllegalArgumentException(\"No special characters allowed in range, except for 'L'\");\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Check if given number is greater or equal to start range and minor or equal to end range.\n",
      "     *\n",
      "     * @param fieldValue - to be validated\n",
      "     * @throws IllegalArgumentException - if not in range\n",
      "     */\n",
      "    @VisibleForTesting\n",
      "    protected void isInRange(final FieldValue<?> fieldValue) {\n",
      "        if (fieldValue instanceof IntegerFieldValue) {\n",
      "            final int value = ((IntegerFieldValue) fieldValue).getValue();\n",
      "            if (!constraints.isInRange(value)) {\n",
      "                throw new IllegalArgumentException(String.format(OORANGE, value, constraints.getStartRange(), constraints.getEndRange()));\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Check if given period is compatible with range.\n",
      "     *\n",
      "     * @param fieldValue - to be validated\n",
      "     * @throws IllegalArgumentException - if not in range\n",
      "     */\n",
      "    @VisibleForTesting\n",
      "    protected void isPeriodInRange(final FieldValue<?> fieldValue) {\n",
      "        if (fieldValue instanceof IntegerFieldValue) {\n",
      "            final int value = ((IntegerFieldValue) fieldValue).getValue();\n",
      "            if (!constraints.isPeriodInRange(value)) {\n",
      "                throw new IllegalArgumentException(\n",
      "                        String.format(\"Period %s not in range [%s, %s]\", value, constraints.getStartRange(), constraints.getEndRange()));\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @VisibleForTesting\n",
      "    protected boolean isDefault(final FieldValue<?> fieldValue) {\n",
      "        return fieldValue instanceof IntegerFieldValue && ((IntegerFieldValue) fieldValue).getValue() == -1;\n",
      "    }\n",
      "\n",
      "    protected boolean isSpecialCharNotL(final FieldValue<?> fieldValue) {\n",
      "        return fieldValue instanceof SpecialCharFieldValue && !SpecialChar.L.equals(fieldValue.getValue());\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package com.cronutils.model.field.expression.visitor;\n",
      "\n",
      "import com.cronutils.StringValidations;\n",
      "import com.cronutils.model.field.constraint.FieldConstraints;\n",
      "import com.cronutils.model.field.expression.*;\n",
      "import com.cronutils.model.field.value.IntegerFieldValue;\n",
      "import com.cronutils.model.field.value.SpecialChar;\n",
      "import com.cronutils.model.field.value.SpecialCharFieldValue;\n",
      "import com.cronutils.utils.StringUtils;\n",
      "import org.junit.jupiter.api.BeforeEach;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.mockito.Mock;\n",
      "import org.mockito.Mockito;\n",
      "import org.mockito.MockitoAnnotations;\n",
      "\n",
      "import java.util.Collections;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.*;\n",
      "import static org.mockito.Mockito.*;\n",
      "\n",
      "public class ValidationFieldExpressionVisitorTest {\n",
      "\n",
      "    private static final int DEFAULT_INT = -1;\n",
      "\n",
      "    private static final int LOWOOR = -21;\n",
      "    private static final int HIGHOOR = 999;\n",
      "\n",
      "    private static final int LOW = 1;\n",
      "    private static final int MIDDLE = 25;\n",
      "    private static final int HIGH = 50;\n",
      "\n",
      "    private FieldConstraints fieldConstraints;\n",
      "\n",
      "    @Mock\n",
      "    private StringValidations stringValidations;\n",
      "\n",
      "    @Mock\n",
      "    private StringValidations invalidStringValidations;\n",
      "\n",
      "    private ValidationFieldExpressionVisitor strictVisitor;\n",
      "    private ValidationFieldExpressionVisitor visitor;\n",
      "\n",
      "    @BeforeEach\n",
      "    public void setUp() {\n",
      "        MockitoAnnotations.initMocks(this);\n",
      "        final int startRange = 0;\n",
      "        final int endRange = 59;\n",
      "        fieldConstraints = new FieldConstraints(Collections.emptyMap(), Collections.emptyMap(), Collections.emptySet(), startRange, endRange, true);\n",
      "\n",
      "        when(stringValidations.removeValidChars(any(String.class))).thenReturn(StringUtils.EMPTY);\n",
      "        when(invalidStringValidations.removeValidChars(any(String.class))).thenReturn(\"$$$\");\n",
      "\n",
      "        strictVisitor = new ValidationFieldExpressionVisitor(fieldConstraints, stringValidations);\n",
      "        visitor = new ValidationFieldExpressionVisitor(fieldConstraints, stringValidations);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testVisitWithInvalidChars() {\n",
      "        final ValidationFieldExpressionVisitor tempVisitor = new ValidationFieldExpressionVisitor(fieldConstraints, invalidStringValidations);\n",
      "        final FieldExpression exp = FieldExpression.always();\n",
      "        assertThrows(IllegalArgumentException.class, () -> exp.accept(tempVisitor));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testVisit() {\n",
      "        ValidationFieldExpressionVisitor spy = Mockito.spy(visitor);\n",
      "        ValidationFieldExpressionVisitor strictSpy = Mockito.spy(strictVisitor);\n",
      "\n",
      "        FieldExpression exp = FieldExpression.always();\n",
      "        final Always always = (Always) exp;\n",
      "        exp.accept(spy);\n",
      "        exp.accept(strictSpy);\n",
      "\n",
      "        always.accept(verify(spy, times(1)));\n",
      "        always.accept(verify(strictSpy, times(1)));\n",
      "\n",
      "        spy = Mockito.spy(visitor);\n",
      "        strictSpy = Mockito.spy(strictVisitor);\n",
      "\n",
      "        exp = new Between(new IntegerFieldValue(LOW), new IntegerFieldValue(MIDDLE));\n",
      "        final Between between = (Between) exp;\n",
      "        exp.accept(spy);\n",
      "        exp.accept(strictSpy);\n",
      "\n",
      "        between.accept(verify(spy, times(1)));\n",
      "        between.accept(verify(strictSpy, times(1)));\n",
      "\n",
      "        spy = Mockito.spy(visitor);\n",
      "        strictSpy = Mockito.spy(strictVisitor);\n",
      "\n",
      "        exp = new Every(new IntegerFieldValue(LOW));\n",
      "        final Every every = (Every) exp;\n",
      "        exp.accept(spy);\n",
      "        exp.accept(strictSpy);\n",
      "\n",
      "        every.accept(verify(spy, times(1)));\n",
      "        every.accept(verify(strictSpy, times(1)));\n",
      "\n",
      "        spy = Mockito.spy(visitor);\n",
      "        strictSpy = Mockito.spy(strictVisitor);\n",
      "\n",
      "        exp = new And().and(between);\n",
      "        final And and = (And) exp;\n",
      "        exp.accept(spy);\n",
      "        exp.accept(strictSpy);\n",
      "\n",
      "        and.accept(verify(spy, times(1)));\n",
      "        and.accept(verify(strictSpy, times(1)));\n",
      "        between.accept(verify(spy, times(1)));\n",
      "        between.accept(verify(strictSpy, times(1)));\n",
      "\n",
      "        spy = Mockito.spy(visitor);\n",
      "        strictSpy = Mockito.spy(strictVisitor);\n",
      "\n",
      "        exp = new On(new IntegerFieldValue(MIDDLE));\n",
      "        final On on = (On) exp;\n",
      "        exp.accept(spy);\n",
      "        exp.accept(strictSpy);\n",
      "\n",
      "        on.accept(verify(spy, times(1)));\n",
      "        on.accept(verify(strictSpy, times(1)));\n",
      "\n",
      "        spy = Mockito.spy(visitor);\n",
      "        strictSpy = Mockito.spy(strictVisitor);\n",
      "\n",
      "        exp = FieldExpression.questionMark();\n",
      "        final QuestionMark qm = (QuestionMark) exp;\n",
      "        exp.accept(spy);\n",
      "        exp.accept(strictSpy);\n",
      "\n",
      "        qm.accept(verify(spy, times(1)));\n",
      "        qm.accept(verify(strictSpy, times(1)));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testStrictVisitBadExp() {\n",
      "        final FieldExpression exp = new Between(new IntegerFieldValue(HIGH), new IntegerFieldValue(LOW));\n",
      "        assertThrows(IllegalArgumentException.class, () -> exp.accept(strictVisitor));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testVisitBadExp() {\n",
      "        final FieldExpression exp = new Between(new IntegerFieldValue(LOWOOR), new IntegerFieldValue(HIGH));\n",
      "        assertThrows(IllegalArgumentException.class, () -> exp.accept(visitor));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testVisitAlwaysField() {\n",
      "        final FieldExpression always = FieldExpression.always();\n",
      "        assertEquals(always, always.accept(strictVisitor));\n",
      "        assertEquals(always, always.accept(visitor));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testVisitQuestionMarkField() {\n",
      "        final FieldExpression qm = FieldExpression.questionMark();\n",
      "        assertEquals(qm, qm.accept(strictVisitor));\n",
      "        assertEquals(qm, qm.accept(visitor));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testVisitBetween() {\n",
      "        Between between = new Between(new IntegerFieldValue(LOW), new IntegerFieldValue(MIDDLE));\n",
      "        assertEquals(between, between.accept(strictVisitor));\n",
      "        assertEquals(between, between.accept(visitor));\n",
      "\n",
      "        between = new Between(new IntegerFieldValue(LOW), new SpecialCharFieldValue(SpecialChar.L));\n",
      "        assertEquals(between, between.accept(strictVisitor));\n",
      "        assertEquals(between, between.accept(visitor));\n",
      "\n",
      "        between = new Between(new SpecialCharFieldValue(SpecialChar.L), new IntegerFieldValue(MIDDLE));\n",
      "        assertEquals(between, between.accept(strictVisitor));\n",
      "        assertEquals(between, between.accept(visitor));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testStrictVisitBetweenWrongSpecialChars() {\n",
      "        assertThrows(IllegalArgumentException.class, () -> new Between(new IntegerFieldValue(LOW), new SpecialCharFieldValue(SpecialChar.LW)).accept(strictVisitor));\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testStrictVisitBetweenOORangeBottom() {\n",
      "        assertThrows(IllegalArgumentException.class, () -> new Between(new IntegerFieldValue(LOWOOR), new IntegerFieldValue(HIGH)).accept(strictVisitor));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testStrictVisitBetweenOORangeTop() {\n",
      "        assertThrows(IllegalArgumentException.class, () -> new Between(new IntegerFieldValue(LOW), new IntegerFieldValue(HIGHOOR)).accept(strictVisitor));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testStrictVisitBetweenOORange() {\n",
      "        assertThrows(IllegalArgumentException.class, () -> new Between(new IntegerFieldValue(LOWOOR), new IntegerFieldValue(HIGHOOR)).accept(strictVisitor));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testStrictVisitBetweenOOOrder() {\n",
      "        assertThrows(IllegalArgumentException.class, () -> new Between(new IntegerFieldValue(HIGH), new IntegerFieldValue(LOW)).accept(strictVisitor));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testVisitBetweenWrongSpecialChars() {\n",
      "        assertThrows(IllegalArgumentException.class, () -> new Between(new IntegerFieldValue(LOW), new SpecialCharFieldValue(SpecialChar.LW)).accept(visitor));\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testVisitBetweenOORangeBottom() {\n",
      "        assertThrows(IllegalArgumentException.class, () -> new Between(new IntegerFieldValue(LOWOOR), new IntegerFieldValue(HIGH)).accept(visitor));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testVisitBetweenOORangeTop() {\n",
      "        assertThrows(IllegalArgumentException.class, () -> new Between(new IntegerFieldValue(LOW), new IntegerFieldValue(HIGHOOR)).accept(visitor));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testVisitBetweenOORange() {\n",
      "        assertThrows(IllegalArgumentException.class, () -> new Between(new IntegerFieldValue(LOWOOR), new IntegerFieldValue(HIGHOOR)).accept(visitor));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testVisitBetweenOOOrderStrict() {\n",
      "        final int startRange = 0;\n",
      "        final int endRange = 59;\n",
      "        fieldConstraints = new FieldConstraints(Collections.emptyMap(), Collections.emptyMap(), Collections.emptySet(), startRange, endRange, true);\n",
      "        visitor = new ValidationFieldExpressionVisitor(fieldConstraints, stringValidations);\n",
      "\n",
      "        final Between between = new Between(new IntegerFieldValue(HIGH), new IntegerFieldValue(LOW));\n",
      "        assertThrows(IllegalArgumentException.class, () -> assertEquals(between, between.accept(visitor)));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testVisitBetweenOOOrderNonStrict() {\n",
      "        final int startRange = 0;\n",
      "        final int endRange = 59;\n",
      "        fieldConstraints = new FieldConstraints(Collections.emptyMap(), Collections.emptyMap(), Collections.emptySet(), startRange, endRange, false);\n",
      "        visitor = new ValidationFieldExpressionVisitor(fieldConstraints, stringValidations);\n",
      "\n",
      "        final Between between = new Between(new IntegerFieldValue(HIGH), new IntegerFieldValue(LOW));\n",
      "        assertEquals(between, between.accept(visitor));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testVisitEvery() {\n",
      "        Every every = new Every(new IntegerFieldValue(MIDDLE));\n",
      "        final ValidationFieldExpressionVisitor spy = Mockito.spy(visitor);\n",
      "        final ValidationFieldExpressionVisitor strictSpy = Mockito.spy(strictVisitor);\n",
      "\n",
      "        assertEquals(every, every.accept(spy));\n",
      "        assertEquals(every, every.accept(strictSpy));\n",
      "\n",
      "        final Between between = new Between(new IntegerFieldValue(LOW), new IntegerFieldValue(MIDDLE));\n",
      "        every = new Every(between, new IntegerFieldValue(HIGH));\n",
      "        assertEquals(every, every.accept(spy));\n",
      "        assertEquals(every, every.accept(strictSpy));\n",
      "\n",
      "        between.accept(verify(spy, times(1)));\n",
      "        between.accept(verify(strictSpy, times(1)));\n",
      "\n",
      "        final On on = new On(new IntegerFieldValue(LOW));\n",
      "\n",
      "        every = new Every(on, new IntegerFieldValue(HIGH));\n",
      "        assertEquals(every, every.accept(spy));\n",
      "        assertEquals(every, every.accept(strictSpy));\n",
      "\n",
      "        on.accept(verify(spy, times(1)));\n",
      "        on.accept(verify(strictSpy, times(1)));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testStrictVisitEveryOORange() {\n",
      "        assertThrows(IllegalArgumentException.class, () -> new Every(new IntegerFieldValue(HIGHOOR)).accept(strictVisitor));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testStrictVisitEveryOORangeBetween() {\n",
      "        assertThrows(IllegalArgumentException.class,\n",
      "                () -> new Every(new Between(new IntegerFieldValue(LOW), new IntegerFieldValue(MIDDLE)),\n",
      "                        new IntegerFieldValue(HIGHOOR)).accept(strictVisitor));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testStrictVisitEveryOORangeOn() {\n",
      "        assertThrows(IllegalArgumentException.class, () -> new Every(new On(new IntegerFieldValue(LOW)), new IntegerFieldValue(HIGHOOR)).accept(strictVisitor));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testStrictVisitEveryOORangeBadBetween() {\n",
      "        assertThrows(IllegalArgumentException.class,\n",
      "                () -> new Every(new Between(new IntegerFieldValue(LOWOOR), new IntegerFieldValue(MIDDLE)),\n",
      "                        new IntegerFieldValue(HIGH)).accept(strictVisitor));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testStrictVisitEveryOORangeBadOn() {\n",
      "        assertThrows(IllegalArgumentException.class, () -> new Every(new On(new IntegerFieldValue(HIGHOOR)), new IntegerFieldValue(HIGH)).accept(strictVisitor));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testVisitEveryOORange() {\n",
      "        assertThrows(IllegalArgumentException.class, () -> new Every(new IntegerFieldValue(HIGHOOR)).accept(visitor));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testVisitEveryOORangeBetween() {\n",
      "        assertThrows(IllegalArgumentException.class,\n",
      "                () -> new Every(new Between(new IntegerFieldValue(LOW), new IntegerFieldValue(MIDDLE)),\n",
      "                        new IntegerFieldValue(HIGHOOR)).accept(visitor));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testVisitEveryOORangeOn() {\n",
      "        assertThrows(IllegalArgumentException.class, () -> new Every(new On(new IntegerFieldValue(LOW)), new IntegerFieldValue(HIGHOOR)).accept(visitor));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testVisitEveryOORangeBadBetween() {\n",
      "        assertThrows(IllegalArgumentException.class,\n",
      "                () -> new Every(new Between(new IntegerFieldValue(LOWOOR), new IntegerFieldValue(MIDDLE)),\n",
      "                        new IntegerFieldValue(HIGH)).accept(strictVisitor));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testVisitEveryOORangeBadOn() {\n",
      "        assertThrows(IllegalArgumentException.class, () -> new Every(new On(new IntegerFieldValue(HIGHOOR)), new IntegerFieldValue(HIGH)).accept(strictVisitor));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testVisitOn() {\n",
      "        On on = new On(new IntegerFieldValue(LOW));\n",
      "        assertEquals(on, on.accept(strictVisitor));\n",
      "        assertEquals(on, on.accept(visitor));\n",
      "\n",
      "        on = new On(new IntegerFieldValue(DEFAULT_INT));\n",
      "        assertEquals(on, on.accept(strictVisitor));\n",
      "        assertEquals(on, on.accept(visitor));\n",
      "\n",
      "        on = new On(new SpecialCharFieldValue(SpecialChar.L));\n",
      "        assertEquals(on, on.accept(strictVisitor));\n",
      "        assertEquals(on, on.accept(visitor));\n",
      "\n",
      "        on = new On(new IntegerFieldValue(LOW), new SpecialCharFieldValue(SpecialChar.L), new IntegerFieldValue(HIGH));\n",
      "        assertEquals(on, on.accept(strictVisitor));\n",
      "        assertEquals(on, on.accept(visitor));\n",
      "\n",
      "        on = new On(new IntegerFieldValue(LOW), new SpecialCharFieldValue(SpecialChar.LW),\n",
      "                new IntegerFieldValue(DEFAULT_INT));\n",
      "        assertEquals(on, on.accept(strictVisitor));\n",
      "        assertEquals(on, on.accept(visitor));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testStrictVisitOnBadTime() {\n",
      "        assertThrows(IllegalArgumentException.class, () -> new On(new IntegerFieldValue(LOWOOR)).accept(strictVisitor));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testStrictVisitOnBadNth() {\n",
      "        assertThrows(IllegalArgumentException.class,\n",
      "                () -> new On(new IntegerFieldValue(LOW), new SpecialCharFieldValue(SpecialChar.LW),\n",
      "                        new IntegerFieldValue(HIGHOOR)).accept(strictVisitor));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testVisitOnBadTime() {\n",
      "        assertThrows(IllegalArgumentException.class, () -> new On(new IntegerFieldValue(LOWOOR)).accept(visitor));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testVisitOnBadNth() {\n",
      "        assertThrows(IllegalArgumentException.class,\n",
      "                () -> new On(new IntegerFieldValue(LOW), new SpecialCharFieldValue(SpecialChar.LW),\n",
      "                        new IntegerFieldValue(HIGHOOR)).accept(visitor));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testVisitAnd() {\n",
      "        final ValidationFieldExpressionVisitor spy = Mockito.spy(visitor);\n",
      "        final ValidationFieldExpressionVisitor strictSpy = Mockito.spy(strictVisitor);\n",
      "        And and = new And();\n",
      "        final Between b1 = new Between(new IntegerFieldValue(LOW), new IntegerFieldValue(MIDDLE));\n",
      "        final Between b2 = new Between(new IntegerFieldValue(MIDDLE), new IntegerFieldValue(HIGH));\n",
      "        final On on = new On(new IntegerFieldValue(LOW));\n",
      "        and.and(b1).and(b2).and(b2).and(on);\n",
      "        assertEquals(and, and.accept(spy));\n",
      "        assertEquals(and, and.accept(strictSpy));\n",
      "\n",
      "        b1.accept(verify(spy, times(1)));\n",
      "        b2.accept(verify(spy, times(2)));\n",
      "        on.accept(verify(spy, times(1)));\n",
      "        b1.accept(verify(strictSpy, times(1)));\n",
      "        b2.accept(verify(strictSpy, times(2)));\n",
      "        on.accept(verify(strictSpy, times(1)));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testVisitEmptyAnd(){\n",
      "        And and = new And();\n",
      "        assertEquals(and, and.accept(visitor));\n",
      "        assertEquals(and, and.accept(strictVisitor));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testStrictVisitAndBadExpression() {\n",
      "        final And and = new And();\n",
      "        final Between b1 = new Between(new IntegerFieldValue(LOW), new IntegerFieldValue(MIDDLE));\n",
      "        final Between b2 = new Between(new IntegerFieldValue(MIDDLE), new IntegerFieldValue(HIGHOOR));\n",
      "        final On on = new On(new IntegerFieldValue(LOW));\n",
      "        and.and(b1).and(b2).and(b2).and(on);\n",
      "        assertThrows(IllegalArgumentException.class, () -> and.accept(strictVisitor));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testVisitAndBadExpression() {\n",
      "        final And and = new And();\n",
      "        final Between b1 = new Between(new IntegerFieldValue(LOW), new IntegerFieldValue(MIDDLE));\n",
      "        final Between b2 = new Between(new IntegerFieldValue(MIDDLE), new IntegerFieldValue(HIGHOOR));\n",
      "        final On on = new On(new IntegerFieldValue(LOW));\n",
      "        and.and(b1).and(b2).and(b2).and(on);\n",
      "        assertThrows(IllegalArgumentException.class, () -> and.accept(visitor));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testIsDefault() {\n",
      "        final SpecialCharFieldValue nonIntegerFieldValue = new SpecialCharFieldValue(SpecialChar.LW);\n",
      "        assertFalse(strictVisitor.isDefault(nonIntegerFieldValue));\n",
      "        assertFalse(visitor.isDefault(nonIntegerFieldValue));\n",
      "\n",
      "        IntegerFieldValue integerValue = new IntegerFieldValue(DEFAULT_INT);\n",
      "        assertTrue(strictVisitor.isDefault(integerValue));\n",
      "        assertTrue(visitor.isDefault(integerValue));\n",
      "        integerValue = new IntegerFieldValue(0);\n",
      "        assertFalse(strictVisitor.isDefault(integerValue));\n",
      "        assertFalse(visitor.isDefault(integerValue));\n",
      "        integerValue = new IntegerFieldValue(99);\n",
      "        assertFalse(strictVisitor.isDefault(integerValue));\n",
      "        assertFalse(visitor.isDefault(integerValue));\n",
      "        integerValue = new IntegerFieldValue(-99);\n",
      "        assertFalse(strictVisitor.isDefault(integerValue));\n",
      "        assertFalse(visitor.isDefault(integerValue));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testIsSpecialCharNotL() {\n",
      "        SpecialCharFieldValue specialCharFieldValue;\n",
      "\n",
      "        for (final SpecialChar sp : SpecialChar.values()) {\n",
      "            specialCharFieldValue = new SpecialCharFieldValue(sp);\n",
      "            if (sp == SpecialChar.L) {\n",
      "                assertFalse(strictVisitor.isSpecialCharNotL(specialCharFieldValue));\n",
      "                assertFalse(visitor.isSpecialCharNotL(specialCharFieldValue));\n",
      "            } else {\n",
      "                assertTrue(strictVisitor.isSpecialCharNotL(specialCharFieldValue));\n",
      "                assertTrue(visitor.isSpecialCharNotL(specialCharFieldValue));\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testIsSpecialCharNotLWithIntegerFieldValue() {\n",
      "        final IntegerFieldValue integerValue = new IntegerFieldValue(81);\n",
      "        assertFalse(strictVisitor.isSpecialCharNotL(integerValue));\n",
      "        assertFalse(visitor.isSpecialCharNotL(integerValue));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testIsInRange() {\n",
      "        final SpecialCharFieldValue nonIntegerFieldValue = new SpecialCharFieldValue(SpecialChar.LW);\n",
      "        strictVisitor.isInRange(nonIntegerFieldValue);\n",
      "        visitor.isInRange(nonIntegerFieldValue);\n",
      "\n",
      "        final IntegerFieldValue integerValue = new IntegerFieldValue(5);\n",
      "        strictVisitor.isInRange(integerValue);\n",
      "        visitor.isInRange(integerValue);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testIsInRangeOORangeStrict() {\n",
      "        final IntegerFieldValue integerValue = new IntegerFieldValue(HIGHOOR);\n",
      "        assertThrows(IllegalArgumentException.class, () -> strictVisitor.isInRange(integerValue));\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "method_lines_dic": {
      "ValidationFieldExpressionVisitor::::checkUnsupportedChars(com.cronutils.model.field.expression.FieldExpression)": [
        41,
        49
      ],
      "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Always)": [
        51,
        55
      ],
      "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.And)": [
        57,
        64
      ],
      "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Between)": [
        66,
        80
      ],
      "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Every)": [
        82,
        89
      ],
      "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.On)": [
        91,
        101
      ],
      "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.QuestionMark)": [
        103,
        107
      ],
      "ValidationFieldExpressionVisitor::::preConditions(com.cronutils.model.field.expression.Between)": [
        109,
        115
      ],
      "ValidationFieldExpressionVisitor::::isInRange(com.cronutils.model.field.value.FieldValue<?>)": [
        123,
        131
      ],
      "ValidationFieldExpressionVisitor::::isPeriodInRange(com.cronutils.model.field.value.FieldValue<?>)": [
        139,
        148
      ],
      "ValidationFieldExpressionVisitor::::isDefault(com.cronutils.model.field.value.FieldValue<?>)": [
        150,
        153
      ],
      "ValidationFieldExpressionVisitor::::isSpecialCharNotL(com.cronutils.model.field.value.FieldValue<?>)": [
        155,
        157
      ]
    },
    "test_method_lines_dic": {
      "ValidationFieldExpressionVisitorTest::::setUp()": [
        43,
        55
      ],
      "ValidationFieldExpressionVisitorTest::::testVisitWithInvalidChars()": [
        57,
        62
      ],
      "ValidationFieldExpressionVisitorTest::::testVisit()": [
        64,
        133
      ],
      "ValidationFieldExpressionVisitorTest::::testStrictVisitBadExp()": [
        135,
        139
      ],
      "ValidationFieldExpressionVisitorTest::::testVisitBadExp()": [
        141,
        145
      ],
      "ValidationFieldExpressionVisitorTest::::testVisitAlwaysField()": [
        147,
        152
      ],
      "ValidationFieldExpressionVisitorTest::::testVisitQuestionMarkField()": [
        154,
        159
      ],
      "ValidationFieldExpressionVisitorTest::::testVisitBetween()": [
        161,
        174
      ],
      "ValidationFieldExpressionVisitorTest::::testStrictVisitBetweenWrongSpecialChars()": [
        176,
        180
      ],
      "ValidationFieldExpressionVisitorTest::::testStrictVisitBetweenOORangeBottom()": [
        182,
        185
      ],
      "ValidationFieldExpressionVisitorTest::::testStrictVisitBetweenOORangeTop()": [
        187,
        190
      ],
      "ValidationFieldExpressionVisitorTest::::testStrictVisitBetweenOORange()": [
        192,
        195
      ],
      "ValidationFieldExpressionVisitorTest::::testStrictVisitBetweenOOOrder()": [
        197,
        200
      ],
      "ValidationFieldExpressionVisitorTest::::testVisitBetweenWrongSpecialChars()": [
        202,
        206
      ],
      "ValidationFieldExpressionVisitorTest::::testVisitBetweenOORangeBottom()": [
        208,
        211
      ],
      "ValidationFieldExpressionVisitorTest::::testVisitBetweenOORangeTop()": [
        213,
        216
      ],
      "ValidationFieldExpressionVisitorTest::::testVisitBetweenOORange()": [
        218,
        221
      ],
      "ValidationFieldExpressionVisitorTest::::testVisitBetweenOOOrderStrict()": [
        223,
        232
      ],
      "ValidationFieldExpressionVisitorTest::::testVisitBetweenOOOrderNonStrict()": [
        234,
        243
      ],
      "ValidationFieldExpressionVisitorTest::::testVisitEvery()": [
        245,
        270
      ],
      "ValidationFieldExpressionVisitorTest::::testStrictVisitEveryOORange()": [
        272,
        275
      ],
      "ValidationFieldExpressionVisitorTest::::testStrictVisitEveryOORangeBetween()": [
        277,
        282
      ],
      "ValidationFieldExpressionVisitorTest::::testStrictVisitEveryOORangeOn()": [
        284,
        287
      ],
      "ValidationFieldExpressionVisitorTest::::testStrictVisitEveryOORangeBadBetween()": [
        289,
        294
      ],
      "ValidationFieldExpressionVisitorTest::::testStrictVisitEveryOORangeBadOn()": [
        296,
        299
      ],
      "ValidationFieldExpressionVisitorTest::::testVisitEveryOORange()": [
        301,
        304
      ],
      "ValidationFieldExpressionVisitorTest::::testVisitEveryOORangeBetween()": [
        306,
        311
      ],
      "ValidationFieldExpressionVisitorTest::::testVisitEveryOORangeOn()": [
        313,
        316
      ],
      "ValidationFieldExpressionVisitorTest::::testVisitEveryOORangeBadBetween()": [
        318,
        323
      ],
      "ValidationFieldExpressionVisitorTest::::testVisitEveryOORangeBadOn()": [
        325,
        328
      ],
      "ValidationFieldExpressionVisitorTest::::testVisitOn()": [
        330,
        352
      ],
      "ValidationFieldExpressionVisitorTest::::testStrictVisitOnBadTime()": [
        354,
        357
      ],
      "ValidationFieldExpressionVisitorTest::::testStrictVisitOnBadNth()": [
        359,
        364
      ],
      "ValidationFieldExpressionVisitorTest::::testVisitOnBadTime()": [
        366,
        369
      ],
      "ValidationFieldExpressionVisitorTest::::testVisitOnBadNth()": [
        371,
        376
      ],
      "ValidationFieldExpressionVisitorTest::::testVisitAnd()": [
        378,
        396
      ],
      "ValidationFieldExpressionVisitorTest::::testVisitEmptyAnd()": [
        398,
        403
      ],
      "ValidationFieldExpressionVisitorTest::::testStrictVisitAndBadExpression()": [
        405,
        413
      ],
      "ValidationFieldExpressionVisitorTest::::testVisitAndBadExpression()": [
        415,
        423
      ],
      "ValidationFieldExpressionVisitorTest::::testIsDefault()": [
        425,
        443
      ],
      "ValidationFieldExpressionVisitorTest::::testIsSpecialCharNotL()": [
        445,
        459
      ],
      "ValidationFieldExpressionVisitorTest::::testIsSpecialCharNotLWithIntegerFieldValue()": [
        461,
        466
      ],
      "ValidationFieldExpressionVisitorTest::::testIsInRange()": [
        468,
        477
      ],
      "ValidationFieldExpressionVisitorTest::::testIsInRangeOORangeStrict()": [
        479,
        483
      ]
    },
    "reverse_method_lines_dic": {
      "41": "ValidationFieldExpressionVisitor::::checkUnsupportedChars(com.cronutils.model.field.expression.FieldExpression)",
      "42": "ValidationFieldExpressionVisitor::::checkUnsupportedChars(com.cronutils.model.field.expression.FieldExpression)",
      "43": "ValidationFieldExpressionVisitor::::checkUnsupportedChars(com.cronutils.model.field.expression.FieldExpression)",
      "44": "ValidationFieldExpressionVisitor::::checkUnsupportedChars(com.cronutils.model.field.expression.FieldExpression)",
      "45": "ValidationFieldExpressionVisitor::::checkUnsupportedChars(com.cronutils.model.field.expression.FieldExpression)",
      "46": "ValidationFieldExpressionVisitor::::checkUnsupportedChars(com.cronutils.model.field.expression.FieldExpression)",
      "47": "ValidationFieldExpressionVisitor::::checkUnsupportedChars(com.cronutils.model.field.expression.FieldExpression)",
      "48": "ValidationFieldExpressionVisitor::::checkUnsupportedChars(com.cronutils.model.field.expression.FieldExpression)",
      "49": "ValidationFieldExpressionVisitor::::checkUnsupportedChars(com.cronutils.model.field.expression.FieldExpression)",
      "51": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Always)",
      "52": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Always)",
      "53": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Always)",
      "54": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Always)",
      "55": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Always)",
      "57": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.And)",
      "58": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.And)",
      "59": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.And)",
      "60": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.And)",
      "61": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.And)",
      "62": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.And)",
      "63": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.And)",
      "64": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.And)",
      "66": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Between)",
      "67": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Between)",
      "68": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Between)",
      "69": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Between)",
      "70": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Between)",
      "71": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Between)",
      "72": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Between)",
      "73": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Between)",
      "74": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Between)",
      "75": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Between)",
      "76": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Between)",
      "77": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Between)",
      "78": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Between)",
      "79": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Between)",
      "80": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Between)",
      "82": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Every)",
      "83": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Every)",
      "84": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Every)",
      "85": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Every)",
      "86": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Every)",
      "87": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Every)",
      "88": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Every)",
      "89": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.Every)",
      "91": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.On)",
      "92": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.On)",
      "93": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.On)",
      "94": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.On)",
      "95": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.On)",
      "96": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.On)",
      "97": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.On)",
      "98": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.On)",
      "99": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.On)",
      "100": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.On)",
      "101": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.On)",
      "103": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.QuestionMark)",
      "104": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.QuestionMark)",
      "105": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.QuestionMark)",
      "106": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.QuestionMark)",
      "107": "ValidationFieldExpressionVisitor::::visit(com.cronutils.model.field.expression.QuestionMark)",
      "109": "ValidationFieldExpressionVisitor::::preConditions(com.cronutils.model.field.expression.Between)",
      "110": "ValidationFieldExpressionVisitor::::preConditions(com.cronutils.model.field.expression.Between)",
      "111": "ValidationFieldExpressionVisitor::::preConditions(com.cronutils.model.field.expression.Between)",
      "112": "ValidationFieldExpressionVisitor::::preConditions(com.cronutils.model.field.expression.Between)",
      "113": "ValidationFieldExpressionVisitor::::preConditions(com.cronutils.model.field.expression.Between)",
      "114": "ValidationFieldExpressionVisitor::::preConditions(com.cronutils.model.field.expression.Between)",
      "115": "ValidationFieldExpressionVisitor::::preConditions(com.cronutils.model.field.expression.Between)",
      "123": "ValidationFieldExpressionVisitor::::isInRange(com.cronutils.model.field.value.FieldValue<?>)",
      "124": "ValidationFieldExpressionVisitor::::isInRange(com.cronutils.model.field.value.FieldValue<?>)",
      "125": "ValidationFieldExpressionVisitor::::isInRange(com.cronutils.model.field.value.FieldValue<?>)",
      "126": "ValidationFieldExpressionVisitor::::isInRange(com.cronutils.model.field.value.FieldValue<?>)",
      "127": "ValidationFieldExpressionVisitor::::isInRange(com.cronutils.model.field.value.FieldValue<?>)",
      "128": "ValidationFieldExpressionVisitor::::isInRange(com.cronutils.model.field.value.FieldValue<?>)",
      "129": "ValidationFieldExpressionVisitor::::isInRange(com.cronutils.model.field.value.FieldValue<?>)",
      "130": "ValidationFieldExpressionVisitor::::isInRange(com.cronutils.model.field.value.FieldValue<?>)",
      "131": "ValidationFieldExpressionVisitor::::isInRange(com.cronutils.model.field.value.FieldValue<?>)",
      "139": "ValidationFieldExpressionVisitor::::isPeriodInRange(com.cronutils.model.field.value.FieldValue<?>)",
      "140": "ValidationFieldExpressionVisitor::::isPeriodInRange(com.cronutils.model.field.value.FieldValue<?>)",
      "141": "ValidationFieldExpressionVisitor::::isPeriodInRange(com.cronutils.model.field.value.FieldValue<?>)",
      "142": "ValidationFieldExpressionVisitor::::isPeriodInRange(com.cronutils.model.field.value.FieldValue<?>)",
      "143": "ValidationFieldExpressionVisitor::::isPeriodInRange(com.cronutils.model.field.value.FieldValue<?>)",
      "144": "ValidationFieldExpressionVisitor::::isPeriodInRange(com.cronutils.model.field.value.FieldValue<?>)",
      "145": "ValidationFieldExpressionVisitor::::isPeriodInRange(com.cronutils.model.field.value.FieldValue<?>)",
      "146": "ValidationFieldExpressionVisitor::::isPeriodInRange(com.cronutils.model.field.value.FieldValue<?>)",
      "147": "ValidationFieldExpressionVisitor::::isPeriodInRange(com.cronutils.model.field.value.FieldValue<?>)",
      "148": "ValidationFieldExpressionVisitor::::isPeriodInRange(com.cronutils.model.field.value.FieldValue<?>)",
      "150": "ValidationFieldExpressionVisitor::::isDefault(com.cronutils.model.field.value.FieldValue<?>)",
      "151": "ValidationFieldExpressionVisitor::::isDefault(com.cronutils.model.field.value.FieldValue<?>)",
      "152": "ValidationFieldExpressionVisitor::::isDefault(com.cronutils.model.field.value.FieldValue<?>)",
      "153": "ValidationFieldExpressionVisitor::::isDefault(com.cronutils.model.field.value.FieldValue<?>)",
      "155": "ValidationFieldExpressionVisitor::::isSpecialCharNotL(com.cronutils.model.field.value.FieldValue<?>)",
      "156": "ValidationFieldExpressionVisitor::::isSpecialCharNotL(com.cronutils.model.field.value.FieldValue<?>)",
      "157": "ValidationFieldExpressionVisitor::::isSpecialCharNotL(com.cronutils.model.field.value.FieldValue<?>)"
    },
    "test_reverse_method_lines_dic": {
      "43": "ValidationFieldExpressionVisitorTest::::setUp()",
      "44": "ValidationFieldExpressionVisitorTest::::setUp()",
      "45": "ValidationFieldExpressionVisitorTest::::setUp()",
      "46": "ValidationFieldExpressionVisitorTest::::setUp()",
      "47": "ValidationFieldExpressionVisitorTest::::setUp()",
      "48": "ValidationFieldExpressionVisitorTest::::setUp()",
      "49": "ValidationFieldExpressionVisitorTest::::setUp()",
      "50": "ValidationFieldExpressionVisitorTest::::setUp()",
      "51": "ValidationFieldExpressionVisitorTest::::setUp()",
      "52": "ValidationFieldExpressionVisitorTest::::setUp()",
      "53": "ValidationFieldExpressionVisitorTest::::setUp()",
      "54": "ValidationFieldExpressionVisitorTest::::setUp()",
      "55": "ValidationFieldExpressionVisitorTest::::setUp()",
      "57": "ValidationFieldExpressionVisitorTest::::testVisitWithInvalidChars()",
      "58": "ValidationFieldExpressionVisitorTest::::testVisitWithInvalidChars()",
      "59": "ValidationFieldExpressionVisitorTest::::testVisitWithInvalidChars()",
      "60": "ValidationFieldExpressionVisitorTest::::testVisitWithInvalidChars()",
      "61": "ValidationFieldExpressionVisitorTest::::testVisitWithInvalidChars()",
      "62": "ValidationFieldExpressionVisitorTest::::testVisitWithInvalidChars()",
      "64": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "65": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "66": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "67": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "68": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "69": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "70": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "71": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "72": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "73": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "74": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "75": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "76": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "77": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "78": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "79": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "80": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "81": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "82": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "83": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "84": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "85": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "86": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "87": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "88": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "89": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "90": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "91": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "92": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "93": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "94": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "95": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "96": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "97": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "98": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "99": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "100": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "101": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "102": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "103": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "104": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "105": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "106": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "107": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "108": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "109": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "110": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "111": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "112": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "113": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "114": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "115": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "116": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "117": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "118": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "119": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "120": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "121": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "122": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "123": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "124": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "125": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "126": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "127": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "128": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "129": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "130": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "131": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "132": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "133": "ValidationFieldExpressionVisitorTest::::testVisit()",
      "135": "ValidationFieldExpressionVisitorTest::::testStrictVisitBadExp()",
      "136": "ValidationFieldExpressionVisitorTest::::testStrictVisitBadExp()",
      "137": "ValidationFieldExpressionVisitorTest::::testStrictVisitBadExp()",
      "138": "ValidationFieldExpressionVisitorTest::::testStrictVisitBadExp()",
      "139": "ValidationFieldExpressionVisitorTest::::testStrictVisitBadExp()",
      "141": "ValidationFieldExpressionVisitorTest::::testVisitBadExp()",
      "142": "ValidationFieldExpressionVisitorTest::::testVisitBadExp()",
      "143": "ValidationFieldExpressionVisitorTest::::testVisitBadExp()",
      "144": "ValidationFieldExpressionVisitorTest::::testVisitBadExp()",
      "145": "ValidationFieldExpressionVisitorTest::::testVisitBadExp()",
      "147": "ValidationFieldExpressionVisitorTest::::testVisitAlwaysField()",
      "148": "ValidationFieldExpressionVisitorTest::::testVisitAlwaysField()",
      "149": "ValidationFieldExpressionVisitorTest::::testVisitAlwaysField()",
      "150": "ValidationFieldExpressionVisitorTest::::testVisitAlwaysField()",
      "151": "ValidationFieldExpressionVisitorTest::::testVisitAlwaysField()",
      "152": "ValidationFieldExpressionVisitorTest::::testVisitAlwaysField()",
      "154": "ValidationFieldExpressionVisitorTest::::testVisitQuestionMarkField()",
      "155": "ValidationFieldExpressionVisitorTest::::testVisitQuestionMarkField()",
      "156": "ValidationFieldExpressionVisitorTest::::testVisitQuestionMarkField()",
      "157": "ValidationFieldExpressionVisitorTest::::testVisitQuestionMarkField()",
      "158": "ValidationFieldExpressionVisitorTest::::testVisitQuestionMarkField()",
      "159": "ValidationFieldExpressionVisitorTest::::testVisitQuestionMarkField()",
      "161": "ValidationFieldExpressionVisitorTest::::testVisitBetween()",
      "162": "ValidationFieldExpressionVisitorTest::::testVisitBetween()",
      "163": "ValidationFieldExpressionVisitorTest::::testVisitBetween()",
      "164": "ValidationFieldExpressionVisitorTest::::testVisitBetween()",
      "165": "ValidationFieldExpressionVisitorTest::::testVisitBetween()",
      "166": "ValidationFieldExpressionVisitorTest::::testVisitBetween()",
      "167": "ValidationFieldExpressionVisitorTest::::testVisitBetween()",
      "168": "ValidationFieldExpressionVisitorTest::::testVisitBetween()",
      "169": "ValidationFieldExpressionVisitorTest::::testVisitBetween()",
      "170": "ValidationFieldExpressionVisitorTest::::testVisitBetween()",
      "171": "ValidationFieldExpressionVisitorTest::::testVisitBetween()",
      "172": "ValidationFieldExpressionVisitorTest::::testVisitBetween()",
      "173": "ValidationFieldExpressionVisitorTest::::testVisitBetween()",
      "174": "ValidationFieldExpressionVisitorTest::::testVisitBetween()",
      "176": "ValidationFieldExpressionVisitorTest::::testStrictVisitBetweenWrongSpecialChars()",
      "177": "ValidationFieldExpressionVisitorTest::::testStrictVisitBetweenWrongSpecialChars()",
      "178": "ValidationFieldExpressionVisitorTest::::testStrictVisitBetweenWrongSpecialChars()",
      "179": "ValidationFieldExpressionVisitorTest::::testStrictVisitBetweenWrongSpecialChars()",
      "180": "ValidationFieldExpressionVisitorTest::::testStrictVisitBetweenWrongSpecialChars()",
      "182": "ValidationFieldExpressionVisitorTest::::testStrictVisitBetweenOORangeBottom()",
      "183": "ValidationFieldExpressionVisitorTest::::testStrictVisitBetweenOORangeBottom()",
      "184": "ValidationFieldExpressionVisitorTest::::testStrictVisitBetweenOORangeBottom()",
      "185": "ValidationFieldExpressionVisitorTest::::testStrictVisitBetweenOORangeBottom()",
      "187": "ValidationFieldExpressionVisitorTest::::testStrictVisitBetweenOORangeTop()",
      "188": "ValidationFieldExpressionVisitorTest::::testStrictVisitBetweenOORangeTop()",
      "189": "ValidationFieldExpressionVisitorTest::::testStrictVisitBetweenOORangeTop()",
      "190": "ValidationFieldExpressionVisitorTest::::testStrictVisitBetweenOORangeTop()",
      "192": "ValidationFieldExpressionVisitorTest::::testStrictVisitBetweenOORange()",
      "193": "ValidationFieldExpressionVisitorTest::::testStrictVisitBetweenOORange()",
      "194": "ValidationFieldExpressionVisitorTest::::testStrictVisitBetweenOORange()",
      "195": "ValidationFieldExpressionVisitorTest::::testStrictVisitBetweenOORange()",
      "197": "ValidationFieldExpressionVisitorTest::::testStrictVisitBetweenOOOrder()",
      "198": "ValidationFieldExpressionVisitorTest::::testStrictVisitBetweenOOOrder()",
      "199": "ValidationFieldExpressionVisitorTest::::testStrictVisitBetweenOOOrder()",
      "200": "ValidationFieldExpressionVisitorTest::::testStrictVisitBetweenOOOrder()",
      "202": "ValidationFieldExpressionVisitorTest::::testVisitBetweenWrongSpecialChars()",
      "203": "ValidationFieldExpressionVisitorTest::::testVisitBetweenWrongSpecialChars()",
      "204": "ValidationFieldExpressionVisitorTest::::testVisitBetweenWrongSpecialChars()",
      "205": "ValidationFieldExpressionVisitorTest::::testVisitBetweenWrongSpecialChars()",
      "206": "ValidationFieldExpressionVisitorTest::::testVisitBetweenWrongSpecialChars()",
      "208": "ValidationFieldExpressionVisitorTest::::testVisitBetweenOORangeBottom()",
      "209": "ValidationFieldExpressionVisitorTest::::testVisitBetweenOORangeBottom()",
      "210": "ValidationFieldExpressionVisitorTest::::testVisitBetweenOORangeBottom()",
      "211": "ValidationFieldExpressionVisitorTest::::testVisitBetweenOORangeBottom()",
      "213": "ValidationFieldExpressionVisitorTest::::testVisitBetweenOORangeTop()",
      "214": "ValidationFieldExpressionVisitorTest::::testVisitBetweenOORangeTop()",
      "215": "ValidationFieldExpressionVisitorTest::::testVisitBetweenOORangeTop()",
      "216": "ValidationFieldExpressionVisitorTest::::testVisitBetweenOORangeTop()",
      "218": "ValidationFieldExpressionVisitorTest::::testVisitBetweenOORange()",
      "219": "ValidationFieldExpressionVisitorTest::::testVisitBetweenOORange()",
      "220": "ValidationFieldExpressionVisitorTest::::testVisitBetweenOORange()",
      "221": "ValidationFieldExpressionVisitorTest::::testVisitBetweenOORange()",
      "223": "ValidationFieldExpressionVisitorTest::::testVisitBetweenOOOrderStrict()",
      "224": "ValidationFieldExpressionVisitorTest::::testVisitBetweenOOOrderStrict()",
      "225": "ValidationFieldExpressionVisitorTest::::testVisitBetweenOOOrderStrict()",
      "226": "ValidationFieldExpressionVisitorTest::::testVisitBetweenOOOrderStrict()",
      "227": "ValidationFieldExpressionVisitorTest::::testVisitBetweenOOOrderStrict()",
      "228": "ValidationFieldExpressionVisitorTest::::testVisitBetweenOOOrderStrict()",
      "229": "ValidationFieldExpressionVisitorTest::::testVisitBetweenOOOrderStrict()",
      "230": "ValidationFieldExpressionVisitorTest::::testVisitBetweenOOOrderStrict()",
      "231": "ValidationFieldExpressionVisitorTest::::testVisitBetweenOOOrderStrict()",
      "232": "ValidationFieldExpressionVisitorTest::::testVisitBetweenOOOrderStrict()",
      "234": "ValidationFieldExpressionVisitorTest::::testVisitBetweenOOOrderNonStrict()",
      "235": "ValidationFieldExpressionVisitorTest::::testVisitBetweenOOOrderNonStrict()",
      "236": "ValidationFieldExpressionVisitorTest::::testVisitBetweenOOOrderNonStrict()",
      "237": "ValidationFieldExpressionVisitorTest::::testVisitBetweenOOOrderNonStrict()",
      "238": "ValidationFieldExpressionVisitorTest::::testVisitBetweenOOOrderNonStrict()",
      "239": "ValidationFieldExpressionVisitorTest::::testVisitBetweenOOOrderNonStrict()",
      "240": "ValidationFieldExpressionVisitorTest::::testVisitBetweenOOOrderNonStrict()",
      "241": "ValidationFieldExpressionVisitorTest::::testVisitBetweenOOOrderNonStrict()",
      "242": "ValidationFieldExpressionVisitorTest::::testVisitBetweenOOOrderNonStrict()",
      "243": "ValidationFieldExpressionVisitorTest::::testVisitBetweenOOOrderNonStrict()",
      "245": "ValidationFieldExpressionVisitorTest::::testVisitEvery()",
      "246": "ValidationFieldExpressionVisitorTest::::testVisitEvery()",
      "247": "ValidationFieldExpressionVisitorTest::::testVisitEvery()",
      "248": "ValidationFieldExpressionVisitorTest::::testVisitEvery()",
      "249": "ValidationFieldExpressionVisitorTest::::testVisitEvery()",
      "250": "ValidationFieldExpressionVisitorTest::::testVisitEvery()",
      "251": "ValidationFieldExpressionVisitorTest::::testVisitEvery()",
      "252": "ValidationFieldExpressionVisitorTest::::testVisitEvery()",
      "253": "ValidationFieldExpressionVisitorTest::::testVisitEvery()",
      "254": "ValidationFieldExpressionVisitorTest::::testVisitEvery()",
      "255": "ValidationFieldExpressionVisitorTest::::testVisitEvery()",
      "256": "ValidationFieldExpressionVisitorTest::::testVisitEvery()",
      "257": "ValidationFieldExpressionVisitorTest::::testVisitEvery()",
      "258": "ValidationFieldExpressionVisitorTest::::testVisitEvery()",
      "259": "ValidationFieldExpressionVisitorTest::::testVisitEvery()",
      "260": "ValidationFieldExpressionVisitorTest::::testVisitEvery()",
      "261": "ValidationFieldExpressionVisitorTest::::testVisitEvery()",
      "262": "ValidationFieldExpressionVisitorTest::::testVisitEvery()",
      "263": "ValidationFieldExpressionVisitorTest::::testVisitEvery()",
      "264": "ValidationFieldExpressionVisitorTest::::testVisitEvery()",
      "265": "ValidationFieldExpressionVisitorTest::::testVisitEvery()",
      "266": "ValidationFieldExpressionVisitorTest::::testVisitEvery()",
      "267": "ValidationFieldExpressionVisitorTest::::testVisitEvery()",
      "268": "ValidationFieldExpressionVisitorTest::::testVisitEvery()",
      "269": "ValidationFieldExpressionVisitorTest::::testVisitEvery()",
      "270": "ValidationFieldExpressionVisitorTest::::testVisitEvery()",
      "272": "ValidationFieldExpressionVisitorTest::::testStrictVisitEveryOORange()",
      "273": "ValidationFieldExpressionVisitorTest::::testStrictVisitEveryOORange()",
      "274": "ValidationFieldExpressionVisitorTest::::testStrictVisitEveryOORange()",
      "275": "ValidationFieldExpressionVisitorTest::::testStrictVisitEveryOORange()",
      "277": "ValidationFieldExpressionVisitorTest::::testStrictVisitEveryOORangeBetween()",
      "278": "ValidationFieldExpressionVisitorTest::::testStrictVisitEveryOORangeBetween()",
      "279": "ValidationFieldExpressionVisitorTest::::testStrictVisitEveryOORangeBetween()",
      "280": "ValidationFieldExpressionVisitorTest::::testStrictVisitEveryOORangeBetween()",
      "281": "ValidationFieldExpressionVisitorTest::::testStrictVisitEveryOORangeBetween()",
      "282": "ValidationFieldExpressionVisitorTest::::testStrictVisitEveryOORangeBetween()",
      "284": "ValidationFieldExpressionVisitorTest::::testStrictVisitEveryOORangeOn()",
      "285": "ValidationFieldExpressionVisitorTest::::testStrictVisitEveryOORangeOn()",
      "286": "ValidationFieldExpressionVisitorTest::::testStrictVisitEveryOORangeOn()",
      "287": "ValidationFieldExpressionVisitorTest::::testStrictVisitEveryOORangeOn()",
      "289": "ValidationFieldExpressionVisitorTest::::testStrictVisitEveryOORangeBadBetween()",
      "290": "ValidationFieldExpressionVisitorTest::::testStrictVisitEveryOORangeBadBetween()",
      "291": "ValidationFieldExpressionVisitorTest::::testStrictVisitEveryOORangeBadBetween()",
      "292": "ValidationFieldExpressionVisitorTest::::testStrictVisitEveryOORangeBadBetween()",
      "293": "ValidationFieldExpressionVisitorTest::::testStrictVisitEveryOORangeBadBetween()",
      "294": "ValidationFieldExpressionVisitorTest::::testStrictVisitEveryOORangeBadBetween()",
      "296": "ValidationFieldExpressionVisitorTest::::testStrictVisitEveryOORangeBadOn()",
      "297": "ValidationFieldExpressionVisitorTest::::testStrictVisitEveryOORangeBadOn()",
      "298": "ValidationFieldExpressionVisitorTest::::testStrictVisitEveryOORangeBadOn()",
      "299": "ValidationFieldExpressionVisitorTest::::testStrictVisitEveryOORangeBadOn()",
      "301": "ValidationFieldExpressionVisitorTest::::testVisitEveryOORange()",
      "302": "ValidationFieldExpressionVisitorTest::::testVisitEveryOORange()",
      "303": "ValidationFieldExpressionVisitorTest::::testVisitEveryOORange()",
      "304": "ValidationFieldExpressionVisitorTest::::testVisitEveryOORange()",
      "306": "ValidationFieldExpressionVisitorTest::::testVisitEveryOORangeBetween()",
      "307": "ValidationFieldExpressionVisitorTest::::testVisitEveryOORangeBetween()",
      "308": "ValidationFieldExpressionVisitorTest::::testVisitEveryOORangeBetween()",
      "309": "ValidationFieldExpressionVisitorTest::::testVisitEveryOORangeBetween()",
      "310": "ValidationFieldExpressionVisitorTest::::testVisitEveryOORangeBetween()",
      "311": "ValidationFieldExpressionVisitorTest::::testVisitEveryOORangeBetween()",
      "313": "ValidationFieldExpressionVisitorTest::::testVisitEveryOORangeOn()",
      "314": "ValidationFieldExpressionVisitorTest::::testVisitEveryOORangeOn()",
      "315": "ValidationFieldExpressionVisitorTest::::testVisitEveryOORangeOn()",
      "316": "ValidationFieldExpressionVisitorTest::::testVisitEveryOORangeOn()",
      "318": "ValidationFieldExpressionVisitorTest::::testVisitEveryOORangeBadBetween()",
      "319": "ValidationFieldExpressionVisitorTest::::testVisitEveryOORangeBadBetween()",
      "320": "ValidationFieldExpressionVisitorTest::::testVisitEveryOORangeBadBetween()",
      "321": "ValidationFieldExpressionVisitorTest::::testVisitEveryOORangeBadBetween()",
      "322": "ValidationFieldExpressionVisitorTest::::testVisitEveryOORangeBadBetween()",
      "323": "ValidationFieldExpressionVisitorTest::::testVisitEveryOORangeBadBetween()",
      "325": "ValidationFieldExpressionVisitorTest::::testVisitEveryOORangeBadOn()",
      "326": "ValidationFieldExpressionVisitorTest::::testVisitEveryOORangeBadOn()",
      "327": "ValidationFieldExpressionVisitorTest::::testVisitEveryOORangeBadOn()",
      "328": "ValidationFieldExpressionVisitorTest::::testVisitEveryOORangeBadOn()",
      "330": "ValidationFieldExpressionVisitorTest::::testVisitOn()",
      "331": "ValidationFieldExpressionVisitorTest::::testVisitOn()",
      "332": "ValidationFieldExpressionVisitorTest::::testVisitOn()",
      "333": "ValidationFieldExpressionVisitorTest::::testVisitOn()",
      "334": "ValidationFieldExpressionVisitorTest::::testVisitOn()",
      "335": "ValidationFieldExpressionVisitorTest::::testVisitOn()",
      "336": "ValidationFieldExpressionVisitorTest::::testVisitOn()",
      "337": "ValidationFieldExpressionVisitorTest::::testVisitOn()",
      "338": "ValidationFieldExpressionVisitorTest::::testVisitOn()",
      "339": "ValidationFieldExpressionVisitorTest::::testVisitOn()",
      "340": "ValidationFieldExpressionVisitorTest::::testVisitOn()",
      "341": "ValidationFieldExpressionVisitorTest::::testVisitOn()",
      "342": "ValidationFieldExpressionVisitorTest::::testVisitOn()",
      "343": "ValidationFieldExpressionVisitorTest::::testVisitOn()",
      "344": "ValidationFieldExpressionVisitorTest::::testVisitOn()",
      "345": "ValidationFieldExpressionVisitorTest::::testVisitOn()",
      "346": "ValidationFieldExpressionVisitorTest::::testVisitOn()",
      "347": "ValidationFieldExpressionVisitorTest::::testVisitOn()",
      "348": "ValidationFieldExpressionVisitorTest::::testVisitOn()",
      "349": "ValidationFieldExpressionVisitorTest::::testVisitOn()",
      "350": "ValidationFieldExpressionVisitorTest::::testVisitOn()",
      "351": "ValidationFieldExpressionVisitorTest::::testVisitOn()",
      "352": "ValidationFieldExpressionVisitorTest::::testVisitOn()",
      "354": "ValidationFieldExpressionVisitorTest::::testStrictVisitOnBadTime()",
      "355": "ValidationFieldExpressionVisitorTest::::testStrictVisitOnBadTime()",
      "356": "ValidationFieldExpressionVisitorTest::::testStrictVisitOnBadTime()",
      "357": "ValidationFieldExpressionVisitorTest::::testStrictVisitOnBadTime()",
      "359": "ValidationFieldExpressionVisitorTest::::testStrictVisitOnBadNth()",
      "360": "ValidationFieldExpressionVisitorTest::::testStrictVisitOnBadNth()",
      "361": "ValidationFieldExpressionVisitorTest::::testStrictVisitOnBadNth()",
      "362": "ValidationFieldExpressionVisitorTest::::testStrictVisitOnBadNth()",
      "363": "ValidationFieldExpressionVisitorTest::::testStrictVisitOnBadNth()",
      "364": "ValidationFieldExpressionVisitorTest::::testStrictVisitOnBadNth()",
      "366": "ValidationFieldExpressionVisitorTest::::testVisitOnBadTime()",
      "367": "ValidationFieldExpressionVisitorTest::::testVisitOnBadTime()",
      "368": "ValidationFieldExpressionVisitorTest::::testVisitOnBadTime()",
      "369": "ValidationFieldExpressionVisitorTest::::testVisitOnBadTime()",
      "371": "ValidationFieldExpressionVisitorTest::::testVisitOnBadNth()",
      "372": "ValidationFieldExpressionVisitorTest::::testVisitOnBadNth()",
      "373": "ValidationFieldExpressionVisitorTest::::testVisitOnBadNth()",
      "374": "ValidationFieldExpressionVisitorTest::::testVisitOnBadNth()",
      "375": "ValidationFieldExpressionVisitorTest::::testVisitOnBadNth()",
      "376": "ValidationFieldExpressionVisitorTest::::testVisitOnBadNth()",
      "378": "ValidationFieldExpressionVisitorTest::::testVisitAnd()",
      "379": "ValidationFieldExpressionVisitorTest::::testVisitAnd()",
      "380": "ValidationFieldExpressionVisitorTest::::testVisitAnd()",
      "381": "ValidationFieldExpressionVisitorTest::::testVisitAnd()",
      "382": "ValidationFieldExpressionVisitorTest::::testVisitAnd()",
      "383": "ValidationFieldExpressionVisitorTest::::testVisitAnd()",
      "384": "ValidationFieldExpressionVisitorTest::::testVisitAnd()",
      "385": "ValidationFieldExpressionVisitorTest::::testVisitAnd()",
      "386": "ValidationFieldExpressionVisitorTest::::testVisitAnd()",
      "387": "ValidationFieldExpressionVisitorTest::::testVisitAnd()",
      "388": "ValidationFieldExpressionVisitorTest::::testVisitAnd()",
      "389": "ValidationFieldExpressionVisitorTest::::testVisitAnd()",
      "390": "ValidationFieldExpressionVisitorTest::::testVisitAnd()",
      "391": "ValidationFieldExpressionVisitorTest::::testVisitAnd()",
      "392": "ValidationFieldExpressionVisitorTest::::testVisitAnd()",
      "393": "ValidationFieldExpressionVisitorTest::::testVisitAnd()",
      "394": "ValidationFieldExpressionVisitorTest::::testVisitAnd()",
      "395": "ValidationFieldExpressionVisitorTest::::testVisitAnd()",
      "396": "ValidationFieldExpressionVisitorTest::::testVisitAnd()",
      "398": "ValidationFieldExpressionVisitorTest::::testVisitEmptyAnd()",
      "399": "ValidationFieldExpressionVisitorTest::::testVisitEmptyAnd()",
      "400": "ValidationFieldExpressionVisitorTest::::testVisitEmptyAnd()",
      "401": "ValidationFieldExpressionVisitorTest::::testVisitEmptyAnd()",
      "402": "ValidationFieldExpressionVisitorTest::::testVisitEmptyAnd()",
      "403": "ValidationFieldExpressionVisitorTest::::testVisitEmptyAnd()",
      "405": "ValidationFieldExpressionVisitorTest::::testStrictVisitAndBadExpression()",
      "406": "ValidationFieldExpressionVisitorTest::::testStrictVisitAndBadExpression()",
      "407": "ValidationFieldExpressionVisitorTest::::testStrictVisitAndBadExpression()",
      "408": "ValidationFieldExpressionVisitorTest::::testStrictVisitAndBadExpression()",
      "409": "ValidationFieldExpressionVisitorTest::::testStrictVisitAndBadExpression()",
      "410": "ValidationFieldExpressionVisitorTest::::testStrictVisitAndBadExpression()",
      "411": "ValidationFieldExpressionVisitorTest::::testStrictVisitAndBadExpression()",
      "412": "ValidationFieldExpressionVisitorTest::::testStrictVisitAndBadExpression()",
      "413": "ValidationFieldExpressionVisitorTest::::testStrictVisitAndBadExpression()",
      "415": "ValidationFieldExpressionVisitorTest::::testVisitAndBadExpression()",
      "416": "ValidationFieldExpressionVisitorTest::::testVisitAndBadExpression()",
      "417": "ValidationFieldExpressionVisitorTest::::testVisitAndBadExpression()",
      "418": "ValidationFieldExpressionVisitorTest::::testVisitAndBadExpression()",
      "419": "ValidationFieldExpressionVisitorTest::::testVisitAndBadExpression()",
      "420": "ValidationFieldExpressionVisitorTest::::testVisitAndBadExpression()",
      "421": "ValidationFieldExpressionVisitorTest::::testVisitAndBadExpression()",
      "422": "ValidationFieldExpressionVisitorTest::::testVisitAndBadExpression()",
      "423": "ValidationFieldExpressionVisitorTest::::testVisitAndBadExpression()",
      "425": "ValidationFieldExpressionVisitorTest::::testIsDefault()",
      "426": "ValidationFieldExpressionVisitorTest::::testIsDefault()",
      "427": "ValidationFieldExpressionVisitorTest::::testIsDefault()",
      "428": "ValidationFieldExpressionVisitorTest::::testIsDefault()",
      "429": "ValidationFieldExpressionVisitorTest::::testIsDefault()",
      "430": "ValidationFieldExpressionVisitorTest::::testIsDefault()",
      "431": "ValidationFieldExpressionVisitorTest::::testIsDefault()",
      "432": "ValidationFieldExpressionVisitorTest::::testIsDefault()",
      "433": "ValidationFieldExpressionVisitorTest::::testIsDefault()",
      "434": "ValidationFieldExpressionVisitorTest::::testIsDefault()",
      "435": "ValidationFieldExpressionVisitorTest::::testIsDefault()",
      "436": "ValidationFieldExpressionVisitorTest::::testIsDefault()",
      "437": "ValidationFieldExpressionVisitorTest::::testIsDefault()",
      "438": "ValidationFieldExpressionVisitorTest::::testIsDefault()",
      "439": "ValidationFieldExpressionVisitorTest::::testIsDefault()",
      "440": "ValidationFieldExpressionVisitorTest::::testIsDefault()",
      "441": "ValidationFieldExpressionVisitorTest::::testIsDefault()",
      "442": "ValidationFieldExpressionVisitorTest::::testIsDefault()",
      "443": "ValidationFieldExpressionVisitorTest::::testIsDefault()",
      "445": "ValidationFieldExpressionVisitorTest::::testIsSpecialCharNotL()",
      "446": "ValidationFieldExpressionVisitorTest::::testIsSpecialCharNotL()",
      "447": "ValidationFieldExpressionVisitorTest::::testIsSpecialCharNotL()",
      "448": "ValidationFieldExpressionVisitorTest::::testIsSpecialCharNotL()",
      "449": "ValidationFieldExpressionVisitorTest::::testIsSpecialCharNotL()",
      "450": "ValidationFieldExpressionVisitorTest::::testIsSpecialCharNotL()",
      "451": "ValidationFieldExpressionVisitorTest::::testIsSpecialCharNotL()",
      "452": "ValidationFieldExpressionVisitorTest::::testIsSpecialCharNotL()",
      "453": "ValidationFieldExpressionVisitorTest::::testIsSpecialCharNotL()",
      "454": "ValidationFieldExpressionVisitorTest::::testIsSpecialCharNotL()",
      "455": "ValidationFieldExpressionVisitorTest::::testIsSpecialCharNotL()",
      "456": "ValidationFieldExpressionVisitorTest::::testIsSpecialCharNotL()",
      "457": "ValidationFieldExpressionVisitorTest::::testIsSpecialCharNotL()",
      "458": "ValidationFieldExpressionVisitorTest::::testIsSpecialCharNotL()",
      "459": "ValidationFieldExpressionVisitorTest::::testIsSpecialCharNotL()",
      "461": "ValidationFieldExpressionVisitorTest::::testIsSpecialCharNotLWithIntegerFieldValue()",
      "462": "ValidationFieldExpressionVisitorTest::::testIsSpecialCharNotLWithIntegerFieldValue()",
      "463": "ValidationFieldExpressionVisitorTest::::testIsSpecialCharNotLWithIntegerFieldValue()",
      "464": "ValidationFieldExpressionVisitorTest::::testIsSpecialCharNotLWithIntegerFieldValue()",
      "465": "ValidationFieldExpressionVisitorTest::::testIsSpecialCharNotLWithIntegerFieldValue()",
      "466": "ValidationFieldExpressionVisitorTest::::testIsSpecialCharNotLWithIntegerFieldValue()",
      "468": "ValidationFieldExpressionVisitorTest::::testIsInRange()",
      "469": "ValidationFieldExpressionVisitorTest::::testIsInRange()",
      "470": "ValidationFieldExpressionVisitorTest::::testIsInRange()",
      "471": "ValidationFieldExpressionVisitorTest::::testIsInRange()",
      "472": "ValidationFieldExpressionVisitorTest::::testIsInRange()",
      "473": "ValidationFieldExpressionVisitorTest::::testIsInRange()",
      "474": "ValidationFieldExpressionVisitorTest::::testIsInRange()",
      "475": "ValidationFieldExpressionVisitorTest::::testIsInRange()",
      "476": "ValidationFieldExpressionVisitorTest::::testIsInRange()",
      "477": "ValidationFieldExpressionVisitorTest::::testIsInRange()",
      "479": "ValidationFieldExpressionVisitorTest::::testIsInRangeOORangeStrict()",
      "480": "ValidationFieldExpressionVisitorTest::::testIsInRangeOORangeStrict()",
      "481": "ValidationFieldExpressionVisitorTest::::testIsInRangeOORangeStrict()",
      "482": "ValidationFieldExpressionVisitorTest::::testIsInRangeOORangeStrict()",
      "483": "ValidationFieldExpressionVisitorTest::::testIsInRangeOORangeStrict()"
    },
    "tests": [
      {
        "test_lines": [
          57,
          62
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          42,
          43,
          45,
          46,
          47
        ]
      },
      {
        "test_lines": [
          64,
          133
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          42,
          43,
          44,
          53,
          54,
          59,
          60,
          61,
          62,
          63,
          68,
          69,
          71,
          72,
          73,
          74,
          79,
          84,
          85,
          86,
          87,
          88,
          93,
          94,
          95,
          97,
          100,
          105,
          106,
          110,
          111,
          112,
          115,
          125,
          126,
          127,
          131,
          141,
          142,
          143,
          148,
          152,
          156
        ]
      },
      {
        "test_lines": [
          135,
          139
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          42,
          43,
          44,
          68,
          69,
          71,
          72,
          73,
          74,
          75,
          110,
          111,
          112,
          115,
          125,
          126,
          127,
          131,
          156
        ]
      },
      {
        "test_lines": [
          141,
          145
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          42,
          43,
          44,
          68,
          125,
          126,
          127,
          128
        ]
      },
      {
        "test_lines": [
          147,
          152
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          42,
          43,
          44,
          53,
          54
        ]
      },
      {
        "test_lines": [
          154,
          159
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          42,
          43,
          44,
          105,
          106
        ]
      },
      {
        "test_lines": [
          161,
          174
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          42,
          43,
          44,
          68,
          69,
          71,
          72,
          73,
          74,
          79,
          110,
          111,
          112,
          115,
          125,
          126,
          127,
          131,
          156
        ]
      },
      {
        "test_lines": [
          176,
          180
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          42,
          43,
          44,
          68,
          110,
          111,
          112,
          113,
          125,
          126,
          127,
          131,
          156
        ]
      },
      {
        "test_lines": [
          182,
          185
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          42,
          43,
          44,
          68,
          125,
          126,
          127,
          128
        ]
      },
      {
        "test_lines": [
          187,
          190
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          42,
          43,
          44,
          68,
          110,
          125,
          126,
          127,
          128,
          131
        ]
      },
      {
        "test_lines": [
          192,
          195
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          42,
          43,
          44,
          68,
          125,
          126,
          127,
          128
        ]
      },
      {
        "test_lines": [
          197,
          200
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          42,
          43,
          44,
          68,
          69,
          71,
          72,
          73,
          74,
          75,
          110,
          111,
          112,
          115,
          125,
          126,
          127,
          131,
          156
        ]
      },
      {
        "test_lines": [
          202,
          206
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          42,
          43,
          44,
          68,
          110,
          111,
          112,
          113,
          125,
          126,
          127,
          131,
          156
        ]
      },
      {
        "test_lines": [
          208,
          211
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          42,
          43,
          44,
          68,
          125,
          126,
          127,
          128
        ]
      },
      {
        "test_lines": [
          213,
          216
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          42,
          43,
          44,
          68,
          110,
          125,
          126,
          127,
          128,
          131
        ]
      },
      {
        "test_lines": [
          218,
          221
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          42,
          43,
          44,
          68,
          125,
          126,
          127,
          128
        ]
      },
      {
        "test_lines": [
          223,
          232
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          42,
          43,
          44,
          68,
          69,
          71,
          72,
          73,
          74,
          75,
          110,
          111,
          112,
          115,
          125,
          126,
          127,
          131,
          156
        ]
      },
      {
        "test_lines": [
          234,
          243
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          42,
          43,
          44,
          68,
          69,
          71,
          79,
          110,
          111,
          112,
          115,
          125,
          126,
          127,
          131,
          156
        ]
      },
      {
        "test_lines": [
          245,
          270
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          42,
          43,
          44,
          53,
          54,
          68,
          69,
          71,
          72,
          73,
          74,
          79,
          84,
          85,
          86,
          87,
          88,
          93,
          94,
          95,
          97,
          100,
          110,
          111,
          112,
          115,
          125,
          126,
          127,
          131,
          141,
          142,
          143,
          148,
          152,
          156
        ]
      },
      {
        "test_lines": [
          272,
          275
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          42,
          43,
          44,
          53,
          54,
          84,
          85,
          86,
          141,
          142,
          143,
          144,
          145
        ]
      },
      {
        "test_lines": [
          277,
          282
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          42,
          43,
          44,
          68,
          69,
          71,
          72,
          73,
          74,
          79,
          84,
          85,
          86,
          110,
          111,
          112,
          115,
          125,
          126,
          127,
          131,
          141,
          142,
          143,
          144,
          145,
          156
        ]
      },
      {
        "test_lines": [
          284,
          287
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          42,
          43,
          44,
          84,
          85,
          86,
          93,
          94,
          95,
          97,
          100,
          125,
          126,
          127,
          131,
          141,
          142,
          143,
          144,
          145,
          152
        ]
      },
      {
        "test_lines": [
          289,
          294
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          42,
          43,
          44,
          68,
          84,
          85,
          125,
          126,
          127,
          128
        ]
      },
      {
        "test_lines": [
          296,
          299
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          42,
          43,
          44,
          84,
          85,
          93,
          94,
          125,
          126,
          127,
          128,
          152
        ]
      },
      {
        "test_lines": [
          301,
          304
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          42,
          43,
          44,
          53,
          54,
          84,
          85,
          86,
          141,
          142,
          143,
          144,
          145
        ]
      },
      {
        "test_lines": [
          306,
          311
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          42,
          43,
          44,
          68,
          69,
          71,
          72,
          73,
          74,
          79,
          84,
          85,
          86,
          110,
          111,
          112,
          115,
          125,
          126,
          127,
          131,
          141,
          142,
          143,
          144,
          145,
          156
        ]
      },
      {
        "test_lines": [
          313,
          316
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          42,
          43,
          44,
          84,
          85,
          86,
          93,
          94,
          95,
          97,
          100,
          125,
          126,
          127,
          131,
          141,
          142,
          143,
          144,
          145,
          152
        ]
      },
      {
        "test_lines": [
          318,
          323
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          42,
          43,
          44,
          68,
          84,
          85,
          125,
          126,
          127,
          128
        ]
      },
      {
        "test_lines": [
          325,
          328
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          42,
          43,
          44,
          84,
          85,
          93,
          94,
          125,
          126,
          127,
          128,
          152
        ]
      },
      {
        "test_lines": [
          330,
          352
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          42,
          43,
          44,
          93,
          94,
          95,
          97,
          98,
          100,
          125,
          126,
          127,
          131,
          152
        ]
      },
      {
        "test_lines": [
          354,
          357
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          42,
          43,
          44,
          93,
          94,
          125,
          126,
          127,
          128,
          152
        ]
      },
      {
        "test_lines": [
          359,
          364
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          42,
          43,
          44,
          93,
          94,
          95,
          97,
          125,
          126,
          127,
          128,
          131,
          152
        ]
      },
      {
        "test_lines": [
          366,
          369
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          42,
          43,
          44,
          93,
          94,
          125,
          126,
          127,
          128,
          152
        ]
      },
      {
        "test_lines": [
          371,
          376
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          42,
          43,
          44,
          93,
          94,
          95,
          97,
          125,
          126,
          127,
          128,
          131,
          152
        ]
      },
      {
        "test_lines": [
          378,
          396
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          42,
          43,
          44,
          59,
          60,
          61,
          62,
          63,
          68,
          69,
          71,
          72,
          73,
          74,
          79,
          93,
          94,
          95,
          97,
          100,
          110,
          111,
          112,
          115,
          125,
          126,
          127,
          131,
          152,
          156
        ]
      },
      {
        "test_lines": [
          398,
          403
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          42,
          43,
          44,
          59,
          60,
          63
        ]
      },
      {
        "test_lines": [
          405,
          413
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          42,
          43,
          44,
          59,
          60,
          61,
          62,
          68,
          69,
          71,
          72,
          73,
          74,
          79,
          110,
          111,
          112,
          115,
          125,
          126,
          127,
          128,
          131,
          156
        ]
      },
      {
        "test_lines": [
          415,
          423
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          42,
          43,
          44,
          59,
          60,
          61,
          62,
          68,
          69,
          71,
          72,
          73,
          74,
          79,
          110,
          111,
          112,
          115,
          125,
          126,
          127,
          128,
          131,
          156
        ]
      },
      {
        "test_lines": [
          425,
          443
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          152
        ]
      },
      {
        "test_lines": [
          445,
          459
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          156
        ]
      },
      {
        "test_lines": [
          461,
          466
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          156
        ]
      },
      {
        "test_lines": [
          468,
          477
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          125,
          126,
          127,
          131
        ]
      },
      {
        "test_lines": [
          479,
          483
        ],
        "covered_lines": [
          36,
          37,
          38,
          39,
          125,
          126,
          127,
          128
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/cron-utils/src/main/java/com/cronutils/model/definition/CronDefinitionBuilder.java": {
    "class_content": [
      "/*\n",
      " * Copyright 2014 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.definition;\n",
      "\n",
      "import com.cronutils.model.CronType;\n",
      "import com.cronutils.model.field.CronFieldName;\n",
      "import com.cronutils.model.field.definition.*;\n",
      "\n",
      "import java.util.*;\n",
      "\n",
      "/**\n",
      " * Builder that allows to define and create CronDefinition instances.\n",
      " */\n",
      "public class CronDefinitionBuilder {\n",
      "    private final Map<CronFieldName, FieldDefinition> fields = new EnumMap<>(CronFieldName.class);\n",
      "    private final Set<CronConstraint> cronConstraints = new HashSet<>();\n",
      "    private final Set<CronNicknames> cronNicknames = new HashSet<>();\n",
      "    private boolean matchDayOfWeekAndDayOfMonth;\n",
      "\n",
      "    /**\n",
      "     * Constructor.\n",
      "     */\n",
      "    private CronDefinitionBuilder() {/*NOP*/}\n",
      "\n",
      "    /**\n",
      "     * Creates a builder instance.\n",
      "     *\n",
      "     * @return new CronDefinitionBuilder instance\n",
      "     */\n",
      "    public static CronDefinitionBuilder defineCron() {\n",
      "        return new CronDefinitionBuilder();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Adds definition for seconds field.\n",
      "     *\n",
      "     * @return new FieldDefinitionBuilder instance\n",
      "     */\n",
      "    public FieldDefinitionBuilder withSeconds() {\n",
      "        return new FieldDefinitionBuilder(this, CronFieldName.SECOND);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Adds definition for minutes field.\n",
      "     *\n",
      "     * @return new FieldDefinitionBuilder instance\n",
      "     */\n",
      "    public FieldDefinitionBuilder withMinutes() {\n",
      "        return new FieldDefinitionBuilder(this, CronFieldName.MINUTE);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Adds definition for hours field.\n",
      "     *\n",
      "     * @return new FieldDefinitionBuilder instance\n",
      "     */\n",
      "    public FieldDefinitionBuilder withHours() {\n",
      "        return new FieldDefinitionBuilder(this, CronFieldName.HOUR);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Adds definition for day of month field.\n",
      "     *\n",
      "     * @return new FieldSpecialCharsDefinitionBuilder instance\n",
      "     */\n",
      "    public FieldSpecialCharsDefinitionBuilder withDayOfMonth() {\n",
      "        return new FieldSpecialCharsDefinitionBuilder(this, CronFieldName.DAY_OF_MONTH);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Adds definition for month field.\n",
      "     *\n",
      "     * @return new FieldDefinitionBuilder instance\n",
      "     */\n",
      "    public FieldDefinitionBuilder withMonth() {\n",
      "        return new FieldDefinitionBuilder(this, CronFieldName.MONTH);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Adds definition for day of week field.\n",
      "     *\n",
      "     * @return new FieldSpecialCharsDefinitionBuilder instance\n",
      "     */\n",
      "    public FieldDayOfWeekDefinitionBuilder withDayOfWeek() {\n",
      "        return new FieldDayOfWeekDefinitionBuilder(this, CronFieldName.DAY_OF_WEEK);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Adds definition for year field.\n",
      "     *\n",
      "     * @return new FieldDefinitionBuilder instance\n",
      "     */\n",
      "    public FieldDefinitionBuilder withYear() {\n",
      "        return new FieldDefinitionBuilder(this, CronFieldName.YEAR);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Adds definition for day of year field.\n",
      "     *\n",
      "     * @return new FieldDefinitionBuilder instance\n",
      "     */\n",
      "    public FieldQuestionMarkDefinitionBuilder withDayOfYear() {\n",
      "        return new FieldQuestionMarkDefinitionBuilder(this, CronFieldName.DAY_OF_YEAR);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Sets matchDayOfWeekAndDayOfMonth value to true.\n",
      "     *\n",
      "     * @return this CronDefinitionBuilder instance\n",
      "     */\n",
      "    public CronDefinitionBuilder matchDayOfWeekAndDayOfMonth() {\n",
      "        matchDayOfWeekAndDayOfMonth = true;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Supports cron nickname @yearly\n",
      "     *\n",
      "     * @return this CronDefinitionBuilder instance\n",
      "     */\n",
      "    public CronDefinitionBuilder withSupportedNicknameYearly() {\n",
      "        cronNicknames.add(CronNicknames.YEARLY);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Supports cron nickname @annually\n",
      "     *\n",
      "     * @return this CronDefinitionBuilder instance\n",
      "     */\n",
      "    public CronDefinitionBuilder withSupportedNicknameAnnually() {\n",
      "        cronNicknames.add(CronNicknames.ANNUALLY);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Supports cron nickname @monthly\n",
      "     *\n",
      "     * @return this CronDefinitionBuilder instance\n",
      "     */\n",
      "    public CronDefinitionBuilder withSupportedNicknameMonthly() {\n",
      "        cronNicknames.add(CronNicknames.MONTHLY);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Supports cron nickname @weekly\n",
      "     *\n",
      "     * @return this CronDefinitionBuilder instance\n",
      "     */\n",
      "    public CronDefinitionBuilder withSupportedNicknameWeekly() {\n",
      "        cronNicknames.add(CronNicknames.WEEKLY);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Supports cron nickname @daily\n",
      "     *\n",
      "     * @return this CronDefinitionBuilder instance\n",
      "     */\n",
      "    public CronDefinitionBuilder withSupportedNicknameDaily() {\n",
      "        cronNicknames.add(CronNicknames.DAILY);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Supports cron nickname @midnight\n",
      "     *\n",
      "     * @return this CronDefinitionBuilder instance\n",
      "     */\n",
      "    public CronDefinitionBuilder withSupportedNicknameMidnight() {\n",
      "        cronNicknames.add(CronNicknames.MIDNIGHT);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Supports cron nickname @hourly\n",
      "     *\n",
      "     * @return this CronDefinitionBuilder instance\n",
      "     */\n",
      "    public CronDefinitionBuilder withSupportedNicknameHourly() {\n",
      "        cronNicknames.add(CronNicknames.HOURLY);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Supports cron nickname @reboot\n",
      "     *\n",
      "     * @return this CronDefinitionBuilder instance\n",
      "     */\n",
      "    public CronDefinitionBuilder withSupportedNicknameReboot() {\n",
      "        cronNicknames.add(CronNicknames.REBOOT);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Adds a cron validation.\n",
      "     * @param validation - constraint validation\n",
      "     * @return this CronDefinitionBuilder instance\n",
      "     */\n",
      "    public CronDefinitionBuilder withCronValidation(final CronConstraint validation) {\n",
      "        cronConstraints.add(validation);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Registers a certain FieldDefinition.\n",
      "     *\n",
      "     * @param definition - FieldDefinition  instance, never null\n",
      "     */\n",
      "    public void register(final FieldDefinition definition) {\n",
      "        //ensure that we can't register a mandatory definition if there are already optional ones\n",
      "        boolean hasOptionalField = false;\n",
      "        for (final FieldDefinition fieldDefinition : fields.values()) {\n",
      "            if (fieldDefinition.isOptional()) {\n",
      "                hasOptionalField = true;\n",
      "                break;\n",
      "            }\n",
      "        }\n",
      "        if (!definition.isOptional() && hasOptionalField) {\n",
      "            throw new IllegalArgumentException(\"Can't register mandatory definition after a optional definition.\");\n",
      "        }\n",
      "        fields.put(definition.getFieldName(), definition);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates a new CronDefinition instance with provided field definitions.\n",
      "     *\n",
      "     * @return returns CronDefinition instance, never null\n",
      "     */\n",
      "    public CronDefinition instance() {\n",
      "        final Set<CronConstraint> validations = new HashSet<>();\n",
      "        validations.addAll(cronConstraints);\n",
      "        final List<FieldDefinition> values = new ArrayList<>(fields.values());\n",
      "        values.sort(FieldDefinition.createFieldDefinitionComparator());\n",
      "        return new CronDefinition(values, validations, cronNicknames, matchDayOfWeekAndDayOfMonth);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates CronDefinition instance matching cron4j specification.\n",
      "     *\n",
      "     * @return CronDefinition instance, never null;\n",
      "     */\n",
      "    private static CronDefinition cron4j() {\n",
      "        return CronDefinitionBuilder.defineCron()\n",
      "                .withMinutes().withValidRange(0, 59).withStrictRange().and()\n",
      "                .withHours().withValidRange(0, 23).withStrictRange().and()\n",
      "                .withDayOfMonth().withValidRange(0, 31).supportsL().withStrictRange().and()\n",
      "                .withMonth().withValidRange(1, 12).withStrictRange().and()\n",
      "                .withDayOfWeek().withValidRange(0, 6).withMondayDoWValue(1).withStrictRange().and()\n",
      "                .matchDayOfWeekAndDayOfMonth()\n",
      "                .instance();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates CronDefinition instance matching Quartz specification.\n",
      "     *\n",
      "     * <p>The cron expression is expected to be a string comprised of 6 or 7\n",
      "     * fields separated by white space. Fields can contain any of the allowed\n",
      "     * values, along with various combinations of the allowed special characters\n",
      "     * for that field. The fields are as follows:\n",
      "     *\n",
      "     * <table style=\"width:100%\">\n",
      "     * <tr>\n",
      "     * <th>Field Name</th>\n",
      "     * <th>Mandatory</th>\n",
      "     * <th>Allowed Values</th>\n",
      "     * <th>Allowed Special Characters</th>\n",
      "     * </tr>\n",
      "     * <tr>\n",
      "     * <td>Seconds</td>\n",
      "     * <td>YES</td>\n",
      "     * <td>0-59</td>\n",
      "     * <td>* , - /</td>\n",
      "     * </tr>\n",
      "     * <tr>\n",
      "     * <td>Minutes</td>\n",
      "     * <td>YES</td>\n",
      "     * <td>0-59</td>\n",
      "     * <td>* , - /</td>\n",
      "     * </tr>\n",
      "     * <tr>\n",
      "     * <td>Hours</td>\n",
      "     * <td>YES</td>\n",
      "     * <td>0-23</td>\n",
      "     * <td>* , - /</td>\n",
      "     * </tr>\n",
      "     * <tr>\n",
      "     * <td>Day of month</td>\n",
      "     * <td>YES</td>\n",
      "     * <td>1-31</td>\n",
      "     * <td>* ? , - / L W</td>\n",
      "     * </tr>\n",
      "     * <tr>\n",
      "     * <td>Month</td>\n",
      "     * <td>YES</td>\n",
      "     * <td>1-12 or JAN-DEC</td>\n",
      "     * <td>* , -</td>\n",
      "     * </tr>\n",
      "     * <tr>\n",
      "     * <td>Day of week</td>\n",
      "     * <td>YES</td>\n",
      "     * <td>1-7 or SUN-SAT</td>\n",
      "     * <td>* ? , - / L #</td>\n",
      "     * </tr>\n",
      "     * <tr>\n",
      "     * <td>Year</td>\n",
      "     * <td>NO</td>\n",
      "     * <td>empty, 1970-2099</td>\n",
      "     * <td>* , - /</td>\n",
      "     * </tr>\n",
      "     * </table>\n",
      "     *\n",
      "     * <p>Thus in general Quartz cron expressions are as follows:\n",
      "     *\n",
      "     * <p>S M H DoM M DoW [Y]\n",
      "     *\n",
      "     * @return {@link CronDefinition} instance, never {@code null}\n",
      "     */\n",
      "    private static CronDefinition quartz() {\n",
      "        return CronDefinitionBuilder.defineCron()\n",
      "                .withSeconds().withValidRange(0, 59).and()\n",
      "                .withMinutes().withValidRange(0, 59).and()\n",
      "                .withHours().withValidRange(0, 23).and()\n",
      "                .withDayOfMonth().withValidRange(1, 31).supportsL().supportsW().supportsLW().supportsQuestionMark().and()\n",
      "                .withMonth().withValidRange(1, 12).and()\n",
      "                .withDayOfWeek().withValidRange(1, 7).withMondayDoWValue(2).supportsHash().supportsL().supportsQuestionMark().and()\n",
      "                .withYear().withValidRange(1970, 2099).withStrictRange().optional().and()\n",
      "                .withCronValidation(CronConstraintsFactory.ensureEitherDayOfWeekOrDayOfMonth())\n",
      "                .instance();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates CronDefinition instance matching Spring (v5.2 and below) specification.\n",
      "     *\n",
      "     * <p>The cron expression is expected to be a string comprised of 6\n",
      "     * fields separated by white space. Fields can contain any of the allowed\n",
      "     * values, along with various combinations of the allowed special characters\n",
      "     * for that field. The fields are as follows:\n",
      "     *\n",
      "     * <table style=\"width:100%\">\n",
      "     * <tr>\n",
      "     * <th>Field Name</th>\n",
      "     * <th>Mandatory</th>\n",
      "     * <th>Allowed Values</th>\n",
      "     * <th>Allowed Special Characters</th>\n",
      "     * </tr>\n",
      "     * <tr>\n",
      "     * <td>Seconds</td>\n",
      "     * <td>YES</td>\n",
      "     * <td>0-59</td>\n",
      "     * <td>* , - /</td>\n",
      "     * </tr>\n",
      "     * <tr>\n",
      "     * <td>Minutes</td>\n",
      "     * <td>YES</td>\n",
      "     * <td>0-59</td>\n",
      "     * <td>* , - /</td>\n",
      "     * </tr>\n",
      "     * <tr>\n",
      "     * <td>Hours</td>\n",
      "     * <td>YES</td>\n",
      "     * <td>0-23</td>\n",
      "     * <td>* , - /</td>\n",
      "     * </tr>\n",
      "     * <tr>\n",
      "     * <td>Day of month</td>\n",
      "     * <td>YES</td>\n",
      "     * <td>1-31</td>\n",
      "     * <td>* ? , - /</td>\n",
      "     * </tr>\n",
      "     * <tr>\n",
      "     * <td>Month</td>\n",
      "     * <td>YES</td>\n",
      "     * <td>1-12 or JAN-DEC</td>\n",
      "     * <td>* , -</td>\n",
      "     * </tr>\n",
      "     * <tr>\n",
      "     * <td>Day of week</td>\n",
      "     * <td>YES</td>\n",
      "     * <td>0-7 or SUN-SAT</td>\n",
      "     * <td>* ? , - /</td>\n",
      "     * </tr>\n",
      "     * </table>\n",
      "     *\n",
      "     * <p>Thus in general Spring cron expressions are as follows (up to version 5.2):\n",
      "     *\n",
      "     * <p>S M H DoM M DoW\n",
      "     *\n",
      "     * @return {@link CronDefinition} instance, never {@code null}\n",
      "     */\n",
      "    private static CronDefinition spring() {\n",
      "        return CronDefinitionBuilder.defineCron()\n",
      "                .withSeconds().withValidRange(0, 59).withStrictRange().and()\n",
      "                .withMinutes().withValidRange(0, 59).withStrictRange().and()\n",
      "                .withHours().withValidRange(0, 23).withStrictRange().and()\n",
      "                .withDayOfMonth().withValidRange(1, 31).supportsQuestionMark().and()\n",
      "                .withMonth().withValidRange(1, 12).and()\n",
      "                .withDayOfWeek().withValidRange(0, 7).withMondayDoWValue(1).withIntMapping(7,0)\n",
      "                    .supportsHash().supportsQuestionMark().and()\n",
      "                .instance();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates CronDefinition instance matching Spring (v5.2 onwards) specification.\n",
      "     * https://spring.io/blog/2020/11/10/new-in-spring-5-3-improved-cron-expressions\n",
      "     *\n",
      "     * <p>The cron expression is expected to be a string comprised of 6\n",
      "     * fields separated by white space. Fields can contain any of the allowed\n",
      "     * values, along with various combinations of the allowed special characters\n",
      "     * for that field. The fields are as follows:\n",
      "     *\n",
      "     * <table style=\"width:100%\">\n",
      "     * <tr>\n",
      "     * <th>Field Name</th>\n",
      "     * <th>Mandatory</th>\n",
      "     * <th>Allowed Values</th>\n",
      "     * <th>Allowed Special Characters</th>\n",
      "     * </tr>\n",
      "     * <tr>\n",
      "     * <td>Seconds</td>\n",
      "     * <td>YES</td>\n",
      "     * <td>0-59</td>\n",
      "     * <td>* , - /</td>\n",
      "     * </tr>\n",
      "     * <tr>\n",
      "     * <td>Minutes</td>\n",
      "     * <td>YES</td>\n",
      "     * <td>0-59</td>\n",
      "     * <td>* , - /</td>\n",
      "     * </tr>\n",
      "     * <tr>\n",
      "     * <td>Hours</td>\n",
      "     * <td>YES</td>\n",
      "     * <td>0-23</td>\n",
      "     * <td>* , - /</td>\n",
      "     * </tr>\n",
      "     * <tr>\n",
      "     * <td>Day of month</td>\n",
      "     * <td>YES</td>\n",
      "     * <td>1-31</td>\n",
      "     * <td>* ? , - / L W</td>\n",
      "     * </tr>\n",
      "     * <tr>\n",
      "     * <td>Month</td>\n",
      "     * <td>YES</td>\n",
      "     * <td>1-12 or JAN-DEC</td>\n",
      "     * <td>* , -</td>\n",
      "     * </tr>\n",
      "     * <tr>\n",
      "     * <td>Day of week</td>\n",
      "     * <td>YES</td>\n",
      "     * <td>0-7 or SUN-SAT</td>\n",
      "     * <td>* ? , - / L #</td>\n",
      "     * </tr>\n",
      "     * </table>\n",
      "     *\n",
      "     * <p>Thus in general Spring cron expressions are as follows (from version 5.3 onwards):\n",
      "     *\n",
      "     * <p>S M H DoM M DoW\n",
      "     *\n",
      "     * @return {@link CronDefinition} instance, never {@code null}\n",
      "     */\n",
      "    private static CronDefinition spring53() {\n",
      "        return CronDefinitionBuilder.defineCron()\n",
      "                .withSeconds().withValidRange(0, 59).withStrictRange().and()\n",
      "                .withMinutes().withValidRange(0, 59).withStrictRange().and()\n",
      "                .withHours().withValidRange(0, 23).withStrictRange().and()\n",
      "                .withDayOfMonth().withValidRange(1, 31).supportsL().supportsW().supportsLW().supportsQuestionMark().and()\n",
      "                .withMonth().withValidRange(1, 12).and()\n",
      "                .withDayOfWeek().withValidRange(0, 7).withMondayDoWValue(1).withIntMapping(7,0)\n",
      "                .supportsHash().supportsL().supportsQuestionMark().and()\n",
      "                .withSupportedNicknameYearly().withSupportedNicknameAnnually()\n",
      "                .withSupportedNicknameMonthly()\n",
      "                .withSupportedNicknameWeekly()\n",
      "                .withSupportedNicknameDaily().withSupportedNicknameMidnight()\n",
      "                .withSupportedNicknameHourly()\n",
      "                .instance();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates CronDefinition instance matching unix crontab specification.\n",
      "     *\n",
      "     * @return CronDefinition instance, never null;\n",
      "     */\n",
      "    private static CronDefinition unixCrontab() {\n",
      "        return CronDefinitionBuilder.defineCron()\n",
      "                .withMinutes().withValidRange(0, 59).withStrictRange().and()\n",
      "                .withHours().withValidRange(0, 23).withStrictRange().and()\n",
      "                .withDayOfMonth().withValidRange(1, 31).withStrictRange().and()\n",
      "                .withMonth().withValidRange(1, 12).withStrictRange().and()\n",
      "                .withDayOfWeek().withValidRange(0, 7).withMondayDoWValue(1).withIntMapping(7, 0).withStrictRange().and()\n",
      "                .instance();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates CronDefinition instance matching cronType specification.\n",
      "     *\n",
      "     * @param cronType - some cron type. If null, a RuntimeException will be raised.\n",
      "     * @return CronDefinition instance if definition is found; a RuntimeException otherwise.\n",
      "     */\n",
      "    public static CronDefinition instanceDefinitionFor(final CronType cronType) {\n",
      "        switch (cronType) {\n",
      "            case CRON4J:\n",
      "                return cron4j();\n",
      "            case QUARTZ:\n",
      "                return quartz();\n",
      "            case UNIX:\n",
      "                return unixCrontab();\n",
      "            case SPRING:\n",
      "                return spring();\n",
      "            case SPRING53:\n",
      "                return spring53();\n",
      "            default:\n",
      "                throw new IllegalArgumentException(String.format(\"No cron definition found for %s\", cronType));\n",
      "        }\n",
      "    }\n",
      "}"
    ],
    "test_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.definition;\n",
      "\n",
      "import com.cronutils.builder.CronBuilder;\n",
      "import com.cronutils.model.Cron;\n",
      "import com.cronutils.model.CronType;\n",
      "import com.cronutils.model.field.CronFieldName;\n",
      "import com.cronutils.model.field.constraint.FieldConstraints;\n",
      "import com.cronutils.model.field.definition.FieldDefinition;\n",
      "import com.cronutils.model.field.expression.Weekdays;\n",
      "import com.cronutils.model.field.value.SpecialChar;\n",
      "import com.cronutils.parser.CronParser;\n",
      "import org.junit.jupiter.api.BeforeEach;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import java.util.Collections;\n",
      "import java.util.Set;\n",
      "\n",
      "import static com.cronutils.model.field.expression.FieldExpressionFactory.*;\n",
      "import static org.junit.jupiter.api.Assertions.assertEquals;\n",
      "import static org.junit.jupiter.api.Assertions.assertNotNull;\n",
      "import static org.junit.jupiter.api.Assertions.assertThrows;\n",
      "\n",
      "public class CronDefinitionBuilderTest {\n",
      "\n",
      "    private CronDefinitionBuilder builder;\n",
      "\n",
      "    @BeforeEach\n",
      "    public void setUp() {\n",
      "        builder = CronDefinitionBuilder.defineCron();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testDefineCron() {\n",
      "        assertNotNull(CronDefinitionBuilder.defineCron());\n",
      "        assertEquals(CronDefinitionBuilder.class, CronDefinitionBuilder.defineCron().getClass());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testWithSeconds() {\n",
      "        final Set<FieldDefinition> fieldDefinitions = builder.withSeconds().and().instance().getFieldDefinitions();\n",
      "        assertNotNull(fieldDefinitions);\n",
      "        assertEquals(1, fieldDefinitions.size());\n",
      "        assertEquals(CronFieldName.SECOND, fieldDefinitions.iterator().next().getFieldName());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testWithMinutes() {\n",
      "        final Set<FieldDefinition> fieldDefinitions = builder.withMinutes().and().instance().getFieldDefinitions();\n",
      "        assertNotNull(fieldDefinitions);\n",
      "        assertEquals(1, fieldDefinitions.size());\n",
      "        assertEquals(CronFieldName.MINUTE, fieldDefinitions.iterator().next().getFieldName());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testWithHours() {\n",
      "        final Set<FieldDefinition> fieldDefinitions = builder.withHours().and().instance().getFieldDefinitions();\n",
      "        assertNotNull(fieldDefinitions);\n",
      "        assertEquals(1, fieldDefinitions.size());\n",
      "        assertEquals(CronFieldName.HOUR, fieldDefinitions.iterator().next().getFieldName());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testWithDayOfMonth() {\n",
      "        final Set<FieldDefinition> fieldDefinitions = builder.withDayOfMonth().and().instance().getFieldDefinitions();\n",
      "        assertNotNull(fieldDefinitions);\n",
      "        assertEquals(1, fieldDefinitions.size());\n",
      "        assertEquals(CronFieldName.DAY_OF_MONTH, fieldDefinitions.iterator().next().getFieldName());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testWithMonth() {\n",
      "        final Set<FieldDefinition> fieldDefinitions = builder.withMonth().and().instance().getFieldDefinitions();\n",
      "        assertNotNull(fieldDefinitions);\n",
      "        assertEquals(1, fieldDefinitions.size());\n",
      "        assertEquals(CronFieldName.MONTH, fieldDefinitions.iterator().next().getFieldName());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testWithDayOfWeek() {\n",
      "        final Set<FieldDefinition> fieldDefinitions = builder.withDayOfWeek().and().instance().getFieldDefinitions();\n",
      "        assertNotNull(fieldDefinitions);\n",
      "        assertEquals(1, fieldDefinitions.size());\n",
      "        assertEquals(CronFieldName.DAY_OF_WEEK, fieldDefinitions.iterator().next().getFieldName());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testWithYear() {\n",
      "        final Set<FieldDefinition> fieldDefinitions = builder.withYear().and().instance().getFieldDefinitions();\n",
      "        assertNotNull(fieldDefinitions);\n",
      "        assertEquals(1, fieldDefinitions.size());\n",
      "        assertEquals(CronFieldName.YEAR, fieldDefinitions.iterator().next().getFieldName());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testLastFieldOptionalFalseByDefault() {\n",
      "        final CronDefinition definition = builder.withHours().and().instance();\n",
      "        assertNotNull(definition);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testRegister() {\n",
      "        final FieldDefinition testFieldDefinition =\n",
      "                new FieldDefinition(\n",
      "                        CronFieldName.SECOND,\n",
      "                        new FieldConstraints(\n",
      "                                Collections.emptyMap(),\n",
      "                                Collections.emptyMap(),\n",
      "                                Collections.emptySet(), 0, 1, true)\n",
      "                );\n",
      "        builder.register(testFieldDefinition);\n",
      "        final Set<FieldDefinition> definitions = builder.instance().getFieldDefinitions();\n",
      "        assertNotNull(definitions);\n",
      "        assertEquals(1, definitions.size());\n",
      "        assertEquals(testFieldDefinition, definitions.iterator().next());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testInstanceDefinitionForUnix() {\n",
      "        assertNotNull(CronDefinitionBuilder.instanceDefinitionFor(CronType.UNIX));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testInstanceDefinitionForQuartz() {\n",
      "        assertNotNull(CronDefinitionBuilder.instanceDefinitionFor(CronType.QUARTZ));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testInstanceDefinitionForCron4j() {\n",
      "        assertNotNull(CronDefinitionBuilder.instanceDefinitionFor(CronType.CRON4J));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testInstanceDefinitionForUnknownValue() {\n",
      "        assertThrows(RuntimeException.class, () -> assertNotNull(CronDefinitionBuilder.instanceDefinitionFor(null)));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testCronDefinitionShouldNotAcceptQuestionmark() {\n",
      "        final CronDefinition cronDefinition = CronDefinitionBuilder.instanceDefinitionFor(CronType.UNIX);\n",
      "        final CronParser parser = new CronParser(cronDefinition);\n",
      "        assertThrows(IllegalArgumentException.class, () -> parser.parse(\"* * * * ?\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testCronDefinitionShouldNotAcceptMultipleOptionalFields() {\n",
      "        assertThrows(IllegalArgumentException.class, () -> CronDefinitionBuilder.defineCron()\n",
      "                .withMinutes().and()\n",
      "                .withHours().and()\n",
      "                .withDayOfMonth().optional().and()\n",
      "                .withMonth().optional().and()\n",
      "                .withDayOfWeek().withValidRange(0, 7).withMondayDoWValue(1).withIntMapping(7, 0).and()\n",
      "                .instance());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Test for issue https://github.com/jmrozanec/cron-utils/issues/315\n",
      "     * We need to provide means to easily perform accurate DoW values mapping when building a cron expression.\n",
      "     */\n",
      "    @Test\n",
      "    public void testDoWProperWeekdayOffset(){\n",
      "        CronDefinition cronDefinition = CronDefinitionBuilder.instanceDefinitionFor(CronType.QUARTZ);\n",
      "        CronBuilder builder = CronBuilder.cron(cronDefinition)\n",
      "                .withYear(always())\n",
      "                .withMonth(always())\n",
      "                .withDoW(on(Weekdays.FRIDAY.getWeekday(cronDefinition)))\n",
      "                .withDoM(questionMark())\n",
      "                .withHour(on(12))\n",
      "                .withMinute(on(0))\n",
      "                .withSecond(on(0));\n",
      "\n",
      "        Cron cron = builder.instance();\n",
      "        String result = cron.asString();\n",
      "\n",
      "        assertEquals(\"0 0 12 ? * 6 *\", result);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Test for issue https://github.com/jmrozanec/cron-utils/issues/508\n",
      "     * DoW as Sunday using QUARTZ definition was going out of range [1,7]\n",
      "     */\n",
      "    @Test\n",
      "    public void testDoWProperWeekdayOffsetForSunday(){\n",
      "        CronDefinition cronDefinition = CronDefinitionBuilder.instanceDefinitionFor(CronType.QUARTZ);\n",
      "        CronBuilder builder = CronBuilder.cron(cronDefinition)\n",
      "                .withYear(always())\n",
      "                .withMonth(always())\n",
      "                .withDoW(on(Weekdays.SUNDAY.getWeekday(cronDefinition)))\n",
      "                .withDoM(questionMark())\n",
      "                .withHour(on(12))\n",
      "                .withMinute(on(0))\n",
      "                .withSecond(on(0));\n",
      "\n",
      "        Cron cron = builder.instance();\n",
      "        String result = cron.asString();\n",
      "\n",
      "        assertEquals(\"0 0 12 ? * 1 *\", result);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testSpringSchedule(){\n",
      "        CronDefinition cronDefinition = CronDefinitionBuilder.instanceDefinitionFor(CronType.SPRING);\n",
      "        CronBuilder builder = CronBuilder.cron(cronDefinition)\n",
      "                .withDoW(questionMark())\n",
      "                .withMonth(always())\n",
      "                .withDoM(always())\n",
      "                .withHour(always())\n",
      "                .withMinute(every(on(0), 5))\n",
      "                .withSecond(always());\n",
      "\n",
      "        Cron cron = builder.instance();\n",
      "        String result = cron.asString();\n",
      "\n",
      "        assertEquals(\"* 0/5 * * * ?\", result);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testSpring53ScheduleExample1(){\n",
      "        CronDefinition cronDefinition = CronDefinitionBuilder.instanceDefinitionFor(CronType.SPRING53);\n",
      "        CronBuilder builder = CronBuilder.cron(cronDefinition)\n",
      "                .withDoW(always())\n",
      "                .withMonth(always())\n",
      "                .withDoM(on(SpecialChar.L))\n",
      "                .withHour(on(0))\n",
      "                .withMinute(on(0))\n",
      "                .withSecond(on(0));\n",
      "\n",
      "        Cron cron = builder.instance();\n",
      "        String result = cron.asString();\n",
      "\n",
      "        assertEquals(\"0 0 0 L * *\", result);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testSpring53ScheduleExample2(){\n",
      "        CronDefinition cronDefinition = CronDefinitionBuilder.instanceDefinitionFor(CronType.SPRING53);\n",
      "        CronBuilder builder = CronBuilder.cron(cronDefinition)\n",
      "                .withDoW(always())\n",
      "                .withMonth(always())\n",
      "                .withDoM(between(SpecialChar.L, 3))\n",
      "                .withHour(on(0))\n",
      "                .withMinute(on(0))\n",
      "                .withSecond(on(0));\n",
      "\n",
      "        Cron cron = builder.instance();\n",
      "        String result = cron.asString();\n",
      "\n",
      "        assertEquals(\"0 0 0 L-3 * *\", result);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testSpring53ScheduleExample3(){\n",
      "        CronDefinition cronDefinition = CronDefinitionBuilder.instanceDefinitionFor(CronType.SPRING53);\n",
      "        CronBuilder builder = CronBuilder.cron(cronDefinition)\n",
      "                .withDoW(on(5, SpecialChar.L))\n",
      "                .withMonth(always())\n",
      "                .withDoM(always())\n",
      "                .withHour(on(0))\n",
      "                .withMinute(on(0))\n",
      "                .withSecond(on(0));\n",
      "\n",
      "        Cron cron = builder.instance();\n",
      "        String result = cron.asString();\n",
      "\n",
      "        assertEquals(\"0 0 0 * * 5L\", result);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testSpring53ScheduleExample4(){\n",
      "        CronDefinition cronDefinition = CronDefinitionBuilder.instanceDefinitionFor(CronType.SPRING53);\n",
      "        CronBuilder builder = CronBuilder.cron(cronDefinition)\n",
      "                .withDoW(on(4, SpecialChar.L))\n",
      "                .withMonth(always())\n",
      "                .withDoM(always())\n",
      "                .withHour(on(0))\n",
      "                .withMinute(on(0))\n",
      "                .withSecond(on(0));\n",
      "\n",
      "        Cron cron = builder.instance();\n",
      "        CronParser parser = new CronParser(cronDefinition);\n",
      "        Cron parsedCron = parser.parse(\"0 0 0 * * THUL\");\n",
      "\n",
      "        assertEquals(cron.asString(), parsedCron.asString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testSpring53ScheduleExample5(){\n",
      "        CronDefinition cronDefinition = CronDefinitionBuilder.instanceDefinitionFor(CronType.SPRING53);\n",
      "        CronBuilder builder = CronBuilder.cron(cronDefinition)\n",
      "                .withDoW(always())\n",
      "                .withMonth(always())\n",
      "                .withDoM(on(1, SpecialChar.W))\n",
      "                .withHour(on(0))\n",
      "                .withMinute(on(0))\n",
      "                .withSecond(on(0));\n",
      "\n",
      "        Cron cron = builder.instance();\n",
      "        String result = cron.asString();\n",
      "\n",
      "        assertEquals(\"0 0 0 1W * *\", result);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testSpring53ScheduleExample6(){\n",
      "        CronDefinition cronDefinition = CronDefinitionBuilder.instanceDefinitionFor(CronType.SPRING53);\n",
      "        CronBuilder builder = CronBuilder.cron(cronDefinition)\n",
      "                .withDoW(always())\n",
      "                .withMonth(always())\n",
      "                .withDoM(on( SpecialChar.LW))\n",
      "                .withHour(on(0))\n",
      "                .withMinute(on(0))\n",
      "                .withSecond(on(0));\n",
      "\n",
      "        Cron cron = builder.instance();\n",
      "        String result = cron.asString();\n",
      "\n",
      "        assertEquals(\"0 0 0 LW * *\", result);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testSpring53ScheduleExample7(){\n",
      "        CronDefinition cronDefinition = CronDefinitionBuilder.instanceDefinitionFor(CronType.SPRING53);\n",
      "        CronBuilder builder = CronBuilder.cron(cronDefinition)\n",
      "                .withDoW(on(5, SpecialChar.HASH, 2))\n",
      "                .withMonth(always())\n",
      "                .withDoM(on(SpecialChar.QUESTION_MARK))\n",
      "                .withHour(on(0))\n",
      "                .withMinute(on(0))\n",
      "                .withSecond(on(0));\n",
      "\n",
      "        Cron cron = builder.instance();\n",
      "        String result = cron.asString();\n",
      "\n",
      "        assertEquals(\"0 0 0 ? * 5#2\", result);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Corresponds to issue #527\n",
      "     * https://github.com/jmrozanec/cron-utils/issues/527\n",
      "     */\n",
      "    @Test\n",
      "    public void testSpring53ScheduleExample8(){\n",
      "        CronDefinition cronDefinition = CronDefinitionBuilder.instanceDefinitionFor(CronType.SPRING53);\n",
      "        CronBuilder builder = CronBuilder.cron(cronDefinition)\n",
      "                .withDoW(on(1, SpecialChar.HASH, 1))\n",
      "                .withMonth(always())\n",
      "                .withDoM(on(SpecialChar.QUESTION_MARK))\n",
      "                .withHour(on(0))\n",
      "                .withMinute(on(0))\n",
      "                .withSecond(on(0));\n",
      "\n",
      "        Cron cron = builder.instance();\n",
      "        CronParser parser = new CronParser(cronDefinition);\n",
      "        Cron parsedCron = parser.parse(\"0 0 0 ? * MON#1\");\n",
      "\n",
      "        assertEquals(cron.asString(), parsedCron.asString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testSpring53ScheduleYearly(){\n",
      "        CronDefinition cronDefinition = CronDefinitionBuilder.instanceDefinitionFor(CronType.SPRING53);\n",
      "        CronParser parser = new CronParser(cronDefinition);\n",
      "        parser.parse(\"@yearly\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testSpring53ScheduleAnnually(){\n",
      "        CronDefinition cronDefinition = CronDefinitionBuilder.instanceDefinitionFor(CronType.SPRING53);\n",
      "        CronParser parser = new CronParser(cronDefinition);\n",
      "        parser.parse(\"@annually\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testSpring53ScheduleMonthly(){\n",
      "        CronDefinition cronDefinition = CronDefinitionBuilder.instanceDefinitionFor(CronType.SPRING53);\n",
      "        CronParser parser = new CronParser(cronDefinition);\n",
      "        parser.parse(\"@monthly\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testSpring53ScheduleWeekly(){\n",
      "        CronDefinition cronDefinition = CronDefinitionBuilder.instanceDefinitionFor(CronType.SPRING53);\n",
      "        CronParser parser = new CronParser(cronDefinition);\n",
      "        parser.parse(\"@weekly\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testSpring53ScheduleDaily(){\n",
      "        CronDefinition cronDefinition = CronDefinitionBuilder.instanceDefinitionFor(CronType.SPRING53);\n",
      "        CronParser parser = new CronParser(cronDefinition);\n",
      "        parser.parse(\"@daily\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testSpring53ScheduleMidnight(){\n",
      "        CronDefinition cronDefinition = CronDefinitionBuilder.instanceDefinitionFor(CronType.SPRING53);\n",
      "        CronParser parser = new CronParser(cronDefinition);\n",
      "        parser.parse(\"@midnight\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testSpring53ScheduleHourly(){\n",
      "        CronDefinition cronDefinition = CronDefinitionBuilder.instanceDefinitionFor(CronType.SPRING53);\n",
      "        CronParser parser = new CronParser(cronDefinition);\n",
      "        parser.parse(\"@hourly\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testScheduleReboot(){\n",
      "        CronDefinition cronDefinition = builder.withSupportedNicknameReboot().instance();\n",
      "        CronParser parser = new CronParser(cronDefinition);\n",
      "        parser.parse(\"@reboot\");\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "CronDefinitionBuilder::::defineCron()": [
        41,
        43
      ],
      "CronDefinitionBuilder::::withSeconds()": [
        50,
        52
      ],
      "CronDefinitionBuilder::::withMinutes()": [
        59,
        61
      ],
      "CronDefinitionBuilder::::withHours()": [
        68,
        70
      ],
      "CronDefinitionBuilder::::withDayOfMonth()": [
        77,
        79
      ],
      "CronDefinitionBuilder::::withMonth()": [
        86,
        88
      ],
      "CronDefinitionBuilder::::withDayOfWeek()": [
        95,
        97
      ],
      "CronDefinitionBuilder::::withYear()": [
        104,
        106
      ],
      "CronDefinitionBuilder::::withDayOfYear()": [
        113,
        115
      ],
      "CronDefinitionBuilder::::matchDayOfWeekAndDayOfMonth()": [
        122,
        125
      ],
      "CronDefinitionBuilder::::withSupportedNicknameYearly()": [
        132,
        135
      ],
      "CronDefinitionBuilder::::withSupportedNicknameAnnually()": [
        142,
        145
      ],
      "CronDefinitionBuilder::::withSupportedNicknameMonthly()": [
        152,
        155
      ],
      "CronDefinitionBuilder::::withSupportedNicknameWeekly()": [
        162,
        165
      ],
      "CronDefinitionBuilder::::withSupportedNicknameDaily()": [
        172,
        175
      ],
      "CronDefinitionBuilder::::withSupportedNicknameMidnight()": [
        182,
        185
      ],
      "CronDefinitionBuilder::::withSupportedNicknameHourly()": [
        192,
        195
      ],
      "CronDefinitionBuilder::::withSupportedNicknameReboot()": [
        202,
        205
      ],
      "CronDefinitionBuilder::::withCronValidation(com.cronutils.model.definition.CronConstraint)": [
        212,
        215
      ],
      "CronDefinitionBuilder::::register(com.cronutils.model.field.definition.FieldDefinition)": [
        222,
        235
      ],
      "CronDefinitionBuilder::::instance()": [
        242,
        248
      ],
      "CronDefinitionBuilder::::cron4j()": [
        255,
        264
      ],
      "CronDefinitionBuilder::::quartz()": [
        331,
        342
      ],
      "CronDefinitionBuilder::::spring()": [
        403,
        413
      ],
      "CronDefinitionBuilder::::spring53()": [
        475,
        490
      ],
      "CronDefinitionBuilder::::unixCrontab()": [
        497,
        505
      ],
      "CronDefinitionBuilder::::instanceDefinitionFor(com.cronutils.model.CronType)": [
        513,
        528
      ]
    },
    "test_method_lines_dic": {
      "CronDefinitionBuilderTest::::setUp()": [
        40,
        43
      ],
      "CronDefinitionBuilderTest::::testDefineCron()": [
        45,
        49
      ],
      "CronDefinitionBuilderTest::::testWithSeconds()": [
        51,
        57
      ],
      "CronDefinitionBuilderTest::::testWithMinutes()": [
        59,
        65
      ],
      "CronDefinitionBuilderTest::::testWithHours()": [
        67,
        73
      ],
      "CronDefinitionBuilderTest::::testWithDayOfMonth()": [
        75,
        81
      ],
      "CronDefinitionBuilderTest::::testWithMonth()": [
        83,
        89
      ],
      "CronDefinitionBuilderTest::::testWithDayOfWeek()": [
        91,
        97
      ],
      "CronDefinitionBuilderTest::::testWithYear()": [
        99,
        105
      ],
      "CronDefinitionBuilderTest::::testLastFieldOptionalFalseByDefault()": [
        107,
        111
      ],
      "CronDefinitionBuilderTest::::testRegister()": [
        113,
        128
      ],
      "CronDefinitionBuilderTest::::testInstanceDefinitionForUnix()": [
        130,
        133
      ],
      "CronDefinitionBuilderTest::::testInstanceDefinitionForQuartz()": [
        135,
        138
      ],
      "CronDefinitionBuilderTest::::testInstanceDefinitionForCron4j()": [
        140,
        143
      ],
      "CronDefinitionBuilderTest::::testInstanceDefinitionForUnknownValue()": [
        145,
        148
      ],
      "CronDefinitionBuilderTest::::testCronDefinitionShouldNotAcceptQuestionmark()": [
        150,
        155
      ],
      "CronDefinitionBuilderTest::::testCronDefinitionShouldNotAcceptMultipleOptionalFields()": [
        157,
        166
      ],
      "CronDefinitionBuilderTest::::testDoWProperWeekdayOffset()": [
        172,
        188
      ],
      "CronDefinitionBuilderTest::::testDoWProperWeekdayOffsetForSunday()": [
        194,
        210
      ],
      "CronDefinitionBuilderTest::::testSpringSchedule()": [
        212,
        227
      ],
      "CronDefinitionBuilderTest::::testSpring53ScheduleExample1()": [
        229,
        244
      ],
      "CronDefinitionBuilderTest::::testSpring53ScheduleExample2()": [
        246,
        261
      ],
      "CronDefinitionBuilderTest::::testSpring53ScheduleExample3()": [
        263,
        278
      ],
      "CronDefinitionBuilderTest::::testSpring53ScheduleExample4()": [
        280,
        296
      ],
      "CronDefinitionBuilderTest::::testSpring53ScheduleExample5()": [
        298,
        313
      ],
      "CronDefinitionBuilderTest::::testSpring53ScheduleExample6()": [
        315,
        330
      ],
      "CronDefinitionBuilderTest::::testSpring53ScheduleExample7()": [
        332,
        347
      ],
      "CronDefinitionBuilderTest::::testSpring53ScheduleExample8()": [
        353,
        369
      ],
      "CronDefinitionBuilderTest::::testSpring53ScheduleYearly()": [
        371,
        376
      ],
      "CronDefinitionBuilderTest::::testSpring53ScheduleAnnually()": [
        378,
        383
      ],
      "CronDefinitionBuilderTest::::testSpring53ScheduleMonthly()": [
        385,
        390
      ],
      "CronDefinitionBuilderTest::::testSpring53ScheduleWeekly()": [
        392,
        397
      ],
      "CronDefinitionBuilderTest::::testSpring53ScheduleDaily()": [
        399,
        404
      ],
      "CronDefinitionBuilderTest::::testSpring53ScheduleMidnight()": [
        406,
        411
      ],
      "CronDefinitionBuilderTest::::testSpring53ScheduleHourly()": [
        413,
        418
      ],
      "CronDefinitionBuilderTest::::testScheduleReboot()": [
        420,
        425
      ]
    },
    "reverse_method_lines_dic": {
      "41": "CronDefinitionBuilder::::defineCron()",
      "42": "CronDefinitionBuilder::::defineCron()",
      "43": "CronDefinitionBuilder::::defineCron()",
      "50": "CronDefinitionBuilder::::withSeconds()",
      "51": "CronDefinitionBuilder::::withSeconds()",
      "52": "CronDefinitionBuilder::::withSeconds()",
      "59": "CronDefinitionBuilder::::withMinutes()",
      "60": "CronDefinitionBuilder::::withMinutes()",
      "61": "CronDefinitionBuilder::::withMinutes()",
      "68": "CronDefinitionBuilder::::withHours()",
      "69": "CronDefinitionBuilder::::withHours()",
      "70": "CronDefinitionBuilder::::withHours()",
      "77": "CronDefinitionBuilder::::withDayOfMonth()",
      "78": "CronDefinitionBuilder::::withDayOfMonth()",
      "79": "CronDefinitionBuilder::::withDayOfMonth()",
      "86": "CronDefinitionBuilder::::withMonth()",
      "87": "CronDefinitionBuilder::::withMonth()",
      "88": "CronDefinitionBuilder::::withMonth()",
      "95": "CronDefinitionBuilder::::withDayOfWeek()",
      "96": "CronDefinitionBuilder::::withDayOfWeek()",
      "97": "CronDefinitionBuilder::::withDayOfWeek()",
      "104": "CronDefinitionBuilder::::withYear()",
      "105": "CronDefinitionBuilder::::withYear()",
      "106": "CronDefinitionBuilder::::withYear()",
      "113": "CronDefinitionBuilder::::withDayOfYear()",
      "114": "CronDefinitionBuilder::::withDayOfYear()",
      "115": "CronDefinitionBuilder::::withDayOfYear()",
      "122": "CronDefinitionBuilder::::matchDayOfWeekAndDayOfMonth()",
      "123": "CronDefinitionBuilder::::matchDayOfWeekAndDayOfMonth()",
      "124": "CronDefinitionBuilder::::matchDayOfWeekAndDayOfMonth()",
      "125": "CronDefinitionBuilder::::matchDayOfWeekAndDayOfMonth()",
      "132": "CronDefinitionBuilder::::withSupportedNicknameYearly()",
      "133": "CronDefinitionBuilder::::withSupportedNicknameYearly()",
      "134": "CronDefinitionBuilder::::withSupportedNicknameYearly()",
      "135": "CronDefinitionBuilder::::withSupportedNicknameYearly()",
      "142": "CronDefinitionBuilder::::withSupportedNicknameAnnually()",
      "143": "CronDefinitionBuilder::::withSupportedNicknameAnnually()",
      "144": "CronDefinitionBuilder::::withSupportedNicknameAnnually()",
      "145": "CronDefinitionBuilder::::withSupportedNicknameAnnually()",
      "152": "CronDefinitionBuilder::::withSupportedNicknameMonthly()",
      "153": "CronDefinitionBuilder::::withSupportedNicknameMonthly()",
      "154": "CronDefinitionBuilder::::withSupportedNicknameMonthly()",
      "155": "CronDefinitionBuilder::::withSupportedNicknameMonthly()",
      "162": "CronDefinitionBuilder::::withSupportedNicknameWeekly()",
      "163": "CronDefinitionBuilder::::withSupportedNicknameWeekly()",
      "164": "CronDefinitionBuilder::::withSupportedNicknameWeekly()",
      "165": "CronDefinitionBuilder::::withSupportedNicknameWeekly()",
      "172": "CronDefinitionBuilder::::withSupportedNicknameDaily()",
      "173": "CronDefinitionBuilder::::withSupportedNicknameDaily()",
      "174": "CronDefinitionBuilder::::withSupportedNicknameDaily()",
      "175": "CronDefinitionBuilder::::withSupportedNicknameDaily()",
      "182": "CronDefinitionBuilder::::withSupportedNicknameMidnight()",
      "183": "CronDefinitionBuilder::::withSupportedNicknameMidnight()",
      "184": "CronDefinitionBuilder::::withSupportedNicknameMidnight()",
      "185": "CronDefinitionBuilder::::withSupportedNicknameMidnight()",
      "192": "CronDefinitionBuilder::::withSupportedNicknameHourly()",
      "193": "CronDefinitionBuilder::::withSupportedNicknameHourly()",
      "194": "CronDefinitionBuilder::::withSupportedNicknameHourly()",
      "195": "CronDefinitionBuilder::::withSupportedNicknameHourly()",
      "202": "CronDefinitionBuilder::::withSupportedNicknameReboot()",
      "203": "CronDefinitionBuilder::::withSupportedNicknameReboot()",
      "204": "CronDefinitionBuilder::::withSupportedNicknameReboot()",
      "205": "CronDefinitionBuilder::::withSupportedNicknameReboot()",
      "212": "CronDefinitionBuilder::::withCronValidation(com.cronutils.model.definition.CronConstraint)",
      "213": "CronDefinitionBuilder::::withCronValidation(com.cronutils.model.definition.CronConstraint)",
      "214": "CronDefinitionBuilder::::withCronValidation(com.cronutils.model.definition.CronConstraint)",
      "215": "CronDefinitionBuilder::::withCronValidation(com.cronutils.model.definition.CronConstraint)",
      "222": "CronDefinitionBuilder::::register(com.cronutils.model.field.definition.FieldDefinition)",
      "223": "CronDefinitionBuilder::::register(com.cronutils.model.field.definition.FieldDefinition)",
      "224": "CronDefinitionBuilder::::register(com.cronutils.model.field.definition.FieldDefinition)",
      "225": "CronDefinitionBuilder::::register(com.cronutils.model.field.definition.FieldDefinition)",
      "226": "CronDefinitionBuilder::::register(com.cronutils.model.field.definition.FieldDefinition)",
      "227": "CronDefinitionBuilder::::register(com.cronutils.model.field.definition.FieldDefinition)",
      "228": "CronDefinitionBuilder::::register(com.cronutils.model.field.definition.FieldDefinition)",
      "229": "CronDefinitionBuilder::::register(com.cronutils.model.field.definition.FieldDefinition)",
      "230": "CronDefinitionBuilder::::register(com.cronutils.model.field.definition.FieldDefinition)",
      "231": "CronDefinitionBuilder::::register(com.cronutils.model.field.definition.FieldDefinition)",
      "232": "CronDefinitionBuilder::::register(com.cronutils.model.field.definition.FieldDefinition)",
      "233": "CronDefinitionBuilder::::register(com.cronutils.model.field.definition.FieldDefinition)",
      "234": "CronDefinitionBuilder::::register(com.cronutils.model.field.definition.FieldDefinition)",
      "235": "CronDefinitionBuilder::::register(com.cronutils.model.field.definition.FieldDefinition)",
      "242": "CronDefinitionBuilder::::instance()",
      "243": "CronDefinitionBuilder::::instance()",
      "244": "CronDefinitionBuilder::::instance()",
      "245": "CronDefinitionBuilder::::instance()",
      "246": "CronDefinitionBuilder::::instance()",
      "247": "CronDefinitionBuilder::::instance()",
      "248": "CronDefinitionBuilder::::instance()",
      "255": "CronDefinitionBuilder::::cron4j()",
      "256": "CronDefinitionBuilder::::cron4j()",
      "257": "CronDefinitionBuilder::::cron4j()",
      "258": "CronDefinitionBuilder::::cron4j()",
      "259": "CronDefinitionBuilder::::cron4j()",
      "260": "CronDefinitionBuilder::::cron4j()",
      "261": "CronDefinitionBuilder::::cron4j()",
      "262": "CronDefinitionBuilder::::cron4j()",
      "263": "CronDefinitionBuilder::::cron4j()",
      "264": "CronDefinitionBuilder::::cron4j()",
      "331": "CronDefinitionBuilder::::quartz()",
      "332": "CronDefinitionBuilder::::quartz()",
      "333": "CronDefinitionBuilder::::quartz()",
      "334": "CronDefinitionBuilder::::quartz()",
      "335": "CronDefinitionBuilder::::quartz()",
      "336": "CronDefinitionBuilder::::quartz()",
      "337": "CronDefinitionBuilder::::quartz()",
      "338": "CronDefinitionBuilder::::quartz()",
      "339": "CronDefinitionBuilder::::quartz()",
      "340": "CronDefinitionBuilder::::quartz()",
      "341": "CronDefinitionBuilder::::quartz()",
      "342": "CronDefinitionBuilder::::quartz()",
      "403": "CronDefinitionBuilder::::spring()",
      "404": "CronDefinitionBuilder::::spring()",
      "405": "CronDefinitionBuilder::::spring()",
      "406": "CronDefinitionBuilder::::spring()",
      "407": "CronDefinitionBuilder::::spring()",
      "408": "CronDefinitionBuilder::::spring()",
      "409": "CronDefinitionBuilder::::spring()",
      "410": "CronDefinitionBuilder::::spring()",
      "411": "CronDefinitionBuilder::::spring()",
      "412": "CronDefinitionBuilder::::spring()",
      "413": "CronDefinitionBuilder::::spring()",
      "475": "CronDefinitionBuilder::::spring53()",
      "476": "CronDefinitionBuilder::::spring53()",
      "477": "CronDefinitionBuilder::::spring53()",
      "478": "CronDefinitionBuilder::::spring53()",
      "479": "CronDefinitionBuilder::::spring53()",
      "480": "CronDefinitionBuilder::::spring53()",
      "481": "CronDefinitionBuilder::::spring53()",
      "482": "CronDefinitionBuilder::::spring53()",
      "483": "CronDefinitionBuilder::::spring53()",
      "484": "CronDefinitionBuilder::::spring53()",
      "485": "CronDefinitionBuilder::::spring53()",
      "486": "CronDefinitionBuilder::::spring53()",
      "487": "CronDefinitionBuilder::::spring53()",
      "488": "CronDefinitionBuilder::::spring53()",
      "489": "CronDefinitionBuilder::::spring53()",
      "490": "CronDefinitionBuilder::::spring53()",
      "497": "CronDefinitionBuilder::::unixCrontab()",
      "498": "CronDefinitionBuilder::::unixCrontab()",
      "499": "CronDefinitionBuilder::::unixCrontab()",
      "500": "CronDefinitionBuilder::::unixCrontab()",
      "501": "CronDefinitionBuilder::::unixCrontab()",
      "502": "CronDefinitionBuilder::::unixCrontab()",
      "503": "CronDefinitionBuilder::::unixCrontab()",
      "504": "CronDefinitionBuilder::::unixCrontab()",
      "505": "CronDefinitionBuilder::::unixCrontab()",
      "513": "CronDefinitionBuilder::::instanceDefinitionFor(com.cronutils.model.CronType)",
      "514": "CronDefinitionBuilder::::instanceDefinitionFor(com.cronutils.model.CronType)",
      "515": "CronDefinitionBuilder::::instanceDefinitionFor(com.cronutils.model.CronType)",
      "516": "CronDefinitionBuilder::::instanceDefinitionFor(com.cronutils.model.CronType)",
      "517": "CronDefinitionBuilder::::instanceDefinitionFor(com.cronutils.model.CronType)",
      "518": "CronDefinitionBuilder::::instanceDefinitionFor(com.cronutils.model.CronType)",
      "519": "CronDefinitionBuilder::::instanceDefinitionFor(com.cronutils.model.CronType)",
      "520": "CronDefinitionBuilder::::instanceDefinitionFor(com.cronutils.model.CronType)",
      "521": "CronDefinitionBuilder::::instanceDefinitionFor(com.cronutils.model.CronType)",
      "522": "CronDefinitionBuilder::::instanceDefinitionFor(com.cronutils.model.CronType)",
      "523": "CronDefinitionBuilder::::instanceDefinitionFor(com.cronutils.model.CronType)",
      "524": "CronDefinitionBuilder::::instanceDefinitionFor(com.cronutils.model.CronType)",
      "525": "CronDefinitionBuilder::::instanceDefinitionFor(com.cronutils.model.CronType)",
      "526": "CronDefinitionBuilder::::instanceDefinitionFor(com.cronutils.model.CronType)",
      "527": "CronDefinitionBuilder::::instanceDefinitionFor(com.cronutils.model.CronType)",
      "528": "CronDefinitionBuilder::::instanceDefinitionFor(com.cronutils.model.CronType)"
    },
    "test_reverse_method_lines_dic": {
      "40": "CronDefinitionBuilderTest::::setUp()",
      "41": "CronDefinitionBuilderTest::::setUp()",
      "42": "CronDefinitionBuilderTest::::setUp()",
      "43": "CronDefinitionBuilderTest::::setUp()",
      "45": "CronDefinitionBuilderTest::::testDefineCron()",
      "46": "CronDefinitionBuilderTest::::testDefineCron()",
      "47": "CronDefinitionBuilderTest::::testDefineCron()",
      "48": "CronDefinitionBuilderTest::::testDefineCron()",
      "49": "CronDefinitionBuilderTest::::testDefineCron()",
      "51": "CronDefinitionBuilderTest::::testWithSeconds()",
      "52": "CronDefinitionBuilderTest::::testWithSeconds()",
      "53": "CronDefinitionBuilderTest::::testWithSeconds()",
      "54": "CronDefinitionBuilderTest::::testWithSeconds()",
      "55": "CronDefinitionBuilderTest::::testWithSeconds()",
      "56": "CronDefinitionBuilderTest::::testWithSeconds()",
      "57": "CronDefinitionBuilderTest::::testWithSeconds()",
      "59": "CronDefinitionBuilderTest::::testWithMinutes()",
      "60": "CronDefinitionBuilderTest::::testWithMinutes()",
      "61": "CronDefinitionBuilderTest::::testWithMinutes()",
      "62": "CronDefinitionBuilderTest::::testWithMinutes()",
      "63": "CronDefinitionBuilderTest::::testWithMinutes()",
      "64": "CronDefinitionBuilderTest::::testWithMinutes()",
      "65": "CronDefinitionBuilderTest::::testWithMinutes()",
      "67": "CronDefinitionBuilderTest::::testWithHours()",
      "68": "CronDefinitionBuilderTest::::testWithHours()",
      "69": "CronDefinitionBuilderTest::::testWithHours()",
      "70": "CronDefinitionBuilderTest::::testWithHours()",
      "71": "CronDefinitionBuilderTest::::testWithHours()",
      "72": "CronDefinitionBuilderTest::::testWithHours()",
      "73": "CronDefinitionBuilderTest::::testWithHours()",
      "75": "CronDefinitionBuilderTest::::testWithDayOfMonth()",
      "76": "CronDefinitionBuilderTest::::testWithDayOfMonth()",
      "77": "CronDefinitionBuilderTest::::testWithDayOfMonth()",
      "78": "CronDefinitionBuilderTest::::testWithDayOfMonth()",
      "79": "CronDefinitionBuilderTest::::testWithDayOfMonth()",
      "80": "CronDefinitionBuilderTest::::testWithDayOfMonth()",
      "81": "CronDefinitionBuilderTest::::testWithDayOfMonth()",
      "83": "CronDefinitionBuilderTest::::testWithMonth()",
      "84": "CronDefinitionBuilderTest::::testWithMonth()",
      "85": "CronDefinitionBuilderTest::::testWithMonth()",
      "86": "CronDefinitionBuilderTest::::testWithMonth()",
      "87": "CronDefinitionBuilderTest::::testWithMonth()",
      "88": "CronDefinitionBuilderTest::::testWithMonth()",
      "89": "CronDefinitionBuilderTest::::testWithMonth()",
      "91": "CronDefinitionBuilderTest::::testWithDayOfWeek()",
      "92": "CronDefinitionBuilderTest::::testWithDayOfWeek()",
      "93": "CronDefinitionBuilderTest::::testWithDayOfWeek()",
      "94": "CronDefinitionBuilderTest::::testWithDayOfWeek()",
      "95": "CronDefinitionBuilderTest::::testWithDayOfWeek()",
      "96": "CronDefinitionBuilderTest::::testWithDayOfWeek()",
      "97": "CronDefinitionBuilderTest::::testWithDayOfWeek()",
      "99": "CronDefinitionBuilderTest::::testWithYear()",
      "100": "CronDefinitionBuilderTest::::testWithYear()",
      "101": "CronDefinitionBuilderTest::::testWithYear()",
      "102": "CronDefinitionBuilderTest::::testWithYear()",
      "103": "CronDefinitionBuilderTest::::testWithYear()",
      "104": "CronDefinitionBuilderTest::::testWithYear()",
      "105": "CronDefinitionBuilderTest::::testWithYear()",
      "107": "CronDefinitionBuilderTest::::testLastFieldOptionalFalseByDefault()",
      "108": "CronDefinitionBuilderTest::::testLastFieldOptionalFalseByDefault()",
      "109": "CronDefinitionBuilderTest::::testLastFieldOptionalFalseByDefault()",
      "110": "CronDefinitionBuilderTest::::testLastFieldOptionalFalseByDefault()",
      "111": "CronDefinitionBuilderTest::::testLastFieldOptionalFalseByDefault()",
      "113": "CronDefinitionBuilderTest::::testRegister()",
      "114": "CronDefinitionBuilderTest::::testRegister()",
      "115": "CronDefinitionBuilderTest::::testRegister()",
      "116": "CronDefinitionBuilderTest::::testRegister()",
      "117": "CronDefinitionBuilderTest::::testRegister()",
      "118": "CronDefinitionBuilderTest::::testRegister()",
      "119": "CronDefinitionBuilderTest::::testRegister()",
      "120": "CronDefinitionBuilderTest::::testRegister()",
      "121": "CronDefinitionBuilderTest::::testRegister()",
      "122": "CronDefinitionBuilderTest::::testRegister()",
      "123": "CronDefinitionBuilderTest::::testRegister()",
      "124": "CronDefinitionBuilderTest::::testRegister()",
      "125": "CronDefinitionBuilderTest::::testRegister()",
      "126": "CronDefinitionBuilderTest::::testRegister()",
      "127": "CronDefinitionBuilderTest::::testRegister()",
      "128": "CronDefinitionBuilderTest::::testRegister()",
      "130": "CronDefinitionBuilderTest::::testInstanceDefinitionForUnix()",
      "131": "CronDefinitionBuilderTest::::testInstanceDefinitionForUnix()",
      "132": "CronDefinitionBuilderTest::::testInstanceDefinitionForUnix()",
      "133": "CronDefinitionBuilderTest::::testInstanceDefinitionForUnix()",
      "135": "CronDefinitionBuilderTest::::testInstanceDefinitionForQuartz()",
      "136": "CronDefinitionBuilderTest::::testInstanceDefinitionForQuartz()",
      "137": "CronDefinitionBuilderTest::::testInstanceDefinitionForQuartz()",
      "138": "CronDefinitionBuilderTest::::testInstanceDefinitionForQuartz()",
      "140": "CronDefinitionBuilderTest::::testInstanceDefinitionForCron4j()",
      "141": "CronDefinitionBuilderTest::::testInstanceDefinitionForCron4j()",
      "142": "CronDefinitionBuilderTest::::testInstanceDefinitionForCron4j()",
      "143": "CronDefinitionBuilderTest::::testInstanceDefinitionForCron4j()",
      "145": "CronDefinitionBuilderTest::::testInstanceDefinitionForUnknownValue()",
      "146": "CronDefinitionBuilderTest::::testInstanceDefinitionForUnknownValue()",
      "147": "CronDefinitionBuilderTest::::testInstanceDefinitionForUnknownValue()",
      "148": "CronDefinitionBuilderTest::::testInstanceDefinitionForUnknownValue()",
      "150": "CronDefinitionBuilderTest::::testCronDefinitionShouldNotAcceptQuestionmark()",
      "151": "CronDefinitionBuilderTest::::testCronDefinitionShouldNotAcceptQuestionmark()",
      "152": "CronDefinitionBuilderTest::::testCronDefinitionShouldNotAcceptQuestionmark()",
      "153": "CronDefinitionBuilderTest::::testCronDefinitionShouldNotAcceptQuestionmark()",
      "154": "CronDefinitionBuilderTest::::testCronDefinitionShouldNotAcceptQuestionmark()",
      "155": "CronDefinitionBuilderTest::::testCronDefinitionShouldNotAcceptQuestionmark()",
      "157": "CronDefinitionBuilderTest::::testCronDefinitionShouldNotAcceptMultipleOptionalFields()",
      "158": "CronDefinitionBuilderTest::::testCronDefinitionShouldNotAcceptMultipleOptionalFields()",
      "159": "CronDefinitionBuilderTest::::testCronDefinitionShouldNotAcceptMultipleOptionalFields()",
      "160": "CronDefinitionBuilderTest::::testCronDefinitionShouldNotAcceptMultipleOptionalFields()",
      "161": "CronDefinitionBuilderTest::::testCronDefinitionShouldNotAcceptMultipleOptionalFields()",
      "162": "CronDefinitionBuilderTest::::testCronDefinitionShouldNotAcceptMultipleOptionalFields()",
      "163": "CronDefinitionBuilderTest::::testCronDefinitionShouldNotAcceptMultipleOptionalFields()",
      "164": "CronDefinitionBuilderTest::::testCronDefinitionShouldNotAcceptMultipleOptionalFields()",
      "165": "CronDefinitionBuilderTest::::testCronDefinitionShouldNotAcceptMultipleOptionalFields()",
      "166": "CronDefinitionBuilderTest::::testCronDefinitionShouldNotAcceptMultipleOptionalFields()",
      "172": "CronDefinitionBuilderTest::::testDoWProperWeekdayOffset()",
      "173": "CronDefinitionBuilderTest::::testDoWProperWeekdayOffset()",
      "174": "CronDefinitionBuilderTest::::testDoWProperWeekdayOffset()",
      "175": "CronDefinitionBuilderTest::::testDoWProperWeekdayOffset()",
      "176": "CronDefinitionBuilderTest::::testDoWProperWeekdayOffset()",
      "177": "CronDefinitionBuilderTest::::testDoWProperWeekdayOffset()",
      "178": "CronDefinitionBuilderTest::::testDoWProperWeekdayOffset()",
      "179": "CronDefinitionBuilderTest::::testDoWProperWeekdayOffset()",
      "180": "CronDefinitionBuilderTest::::testDoWProperWeekdayOffset()",
      "181": "CronDefinitionBuilderTest::::testDoWProperWeekdayOffset()",
      "182": "CronDefinitionBuilderTest::::testDoWProperWeekdayOffset()",
      "183": "CronDefinitionBuilderTest::::testDoWProperWeekdayOffset()",
      "184": "CronDefinitionBuilderTest::::testDoWProperWeekdayOffset()",
      "185": "CronDefinitionBuilderTest::::testDoWProperWeekdayOffset()",
      "186": "CronDefinitionBuilderTest::::testDoWProperWeekdayOffset()",
      "187": "CronDefinitionBuilderTest::::testDoWProperWeekdayOffset()",
      "188": "CronDefinitionBuilderTest::::testDoWProperWeekdayOffset()",
      "194": "CronDefinitionBuilderTest::::testDoWProperWeekdayOffsetForSunday()",
      "195": "CronDefinitionBuilderTest::::testDoWProperWeekdayOffsetForSunday()",
      "196": "CronDefinitionBuilderTest::::testDoWProperWeekdayOffsetForSunday()",
      "197": "CronDefinitionBuilderTest::::testDoWProperWeekdayOffsetForSunday()",
      "198": "CronDefinitionBuilderTest::::testDoWProperWeekdayOffsetForSunday()",
      "199": "CronDefinitionBuilderTest::::testDoWProperWeekdayOffsetForSunday()",
      "200": "CronDefinitionBuilderTest::::testDoWProperWeekdayOffsetForSunday()",
      "201": "CronDefinitionBuilderTest::::testDoWProperWeekdayOffsetForSunday()",
      "202": "CronDefinitionBuilderTest::::testDoWProperWeekdayOffsetForSunday()",
      "203": "CronDefinitionBuilderTest::::testDoWProperWeekdayOffsetForSunday()",
      "204": "CronDefinitionBuilderTest::::testDoWProperWeekdayOffsetForSunday()",
      "205": "CronDefinitionBuilderTest::::testDoWProperWeekdayOffsetForSunday()",
      "206": "CronDefinitionBuilderTest::::testDoWProperWeekdayOffsetForSunday()",
      "207": "CronDefinitionBuilderTest::::testDoWProperWeekdayOffsetForSunday()",
      "208": "CronDefinitionBuilderTest::::testDoWProperWeekdayOffsetForSunday()",
      "209": "CronDefinitionBuilderTest::::testDoWProperWeekdayOffsetForSunday()",
      "210": "CronDefinitionBuilderTest::::testDoWProperWeekdayOffsetForSunday()",
      "212": "CronDefinitionBuilderTest::::testSpringSchedule()",
      "213": "CronDefinitionBuilderTest::::testSpringSchedule()",
      "214": "CronDefinitionBuilderTest::::testSpringSchedule()",
      "215": "CronDefinitionBuilderTest::::testSpringSchedule()",
      "216": "CronDefinitionBuilderTest::::testSpringSchedule()",
      "217": "CronDefinitionBuilderTest::::testSpringSchedule()",
      "218": "CronDefinitionBuilderTest::::testSpringSchedule()",
      "219": "CronDefinitionBuilderTest::::testSpringSchedule()",
      "220": "CronDefinitionBuilderTest::::testSpringSchedule()",
      "221": "CronDefinitionBuilderTest::::testSpringSchedule()",
      "222": "CronDefinitionBuilderTest::::testSpringSchedule()",
      "223": "CronDefinitionBuilderTest::::testSpringSchedule()",
      "224": "CronDefinitionBuilderTest::::testSpringSchedule()",
      "225": "CronDefinitionBuilderTest::::testSpringSchedule()",
      "226": "CronDefinitionBuilderTest::::testSpringSchedule()",
      "227": "CronDefinitionBuilderTest::::testSpringSchedule()",
      "229": "CronDefinitionBuilderTest::::testSpring53ScheduleExample1()",
      "230": "CronDefinitionBuilderTest::::testSpring53ScheduleExample1()",
      "231": "CronDefinitionBuilderTest::::testSpring53ScheduleExample1()",
      "232": "CronDefinitionBuilderTest::::testSpring53ScheduleExample1()",
      "233": "CronDefinitionBuilderTest::::testSpring53ScheduleExample1()",
      "234": "CronDefinitionBuilderTest::::testSpring53ScheduleExample1()",
      "235": "CronDefinitionBuilderTest::::testSpring53ScheduleExample1()",
      "236": "CronDefinitionBuilderTest::::testSpring53ScheduleExample1()",
      "237": "CronDefinitionBuilderTest::::testSpring53ScheduleExample1()",
      "238": "CronDefinitionBuilderTest::::testSpring53ScheduleExample1()",
      "239": "CronDefinitionBuilderTest::::testSpring53ScheduleExample1()",
      "240": "CronDefinitionBuilderTest::::testSpring53ScheduleExample1()",
      "241": "CronDefinitionBuilderTest::::testSpring53ScheduleExample1()",
      "242": "CronDefinitionBuilderTest::::testSpring53ScheduleExample1()",
      "243": "CronDefinitionBuilderTest::::testSpring53ScheduleExample1()",
      "244": "CronDefinitionBuilderTest::::testSpring53ScheduleExample1()",
      "246": "CronDefinitionBuilderTest::::testSpring53ScheduleExample2()",
      "247": "CronDefinitionBuilderTest::::testSpring53ScheduleExample2()",
      "248": "CronDefinitionBuilderTest::::testSpring53ScheduleExample2()",
      "249": "CronDefinitionBuilderTest::::testSpring53ScheduleExample2()",
      "250": "CronDefinitionBuilderTest::::testSpring53ScheduleExample2()",
      "251": "CronDefinitionBuilderTest::::testSpring53ScheduleExample2()",
      "252": "CronDefinitionBuilderTest::::testSpring53ScheduleExample2()",
      "253": "CronDefinitionBuilderTest::::testSpring53ScheduleExample2()",
      "254": "CronDefinitionBuilderTest::::testSpring53ScheduleExample2()",
      "255": "CronDefinitionBuilderTest::::testSpring53ScheduleExample2()",
      "256": "CronDefinitionBuilderTest::::testSpring53ScheduleExample2()",
      "257": "CronDefinitionBuilderTest::::testSpring53ScheduleExample2()",
      "258": "CronDefinitionBuilderTest::::testSpring53ScheduleExample2()",
      "259": "CronDefinitionBuilderTest::::testSpring53ScheduleExample2()",
      "260": "CronDefinitionBuilderTest::::testSpring53ScheduleExample2()",
      "261": "CronDefinitionBuilderTest::::testSpring53ScheduleExample2()",
      "263": "CronDefinitionBuilderTest::::testSpring53ScheduleExample3()",
      "264": "CronDefinitionBuilderTest::::testSpring53ScheduleExample3()",
      "265": "CronDefinitionBuilderTest::::testSpring53ScheduleExample3()",
      "266": "CronDefinitionBuilderTest::::testSpring53ScheduleExample3()",
      "267": "CronDefinitionBuilderTest::::testSpring53ScheduleExample3()",
      "268": "CronDefinitionBuilderTest::::testSpring53ScheduleExample3()",
      "269": "CronDefinitionBuilderTest::::testSpring53ScheduleExample3()",
      "270": "CronDefinitionBuilderTest::::testSpring53ScheduleExample3()",
      "271": "CronDefinitionBuilderTest::::testSpring53ScheduleExample3()",
      "272": "CronDefinitionBuilderTest::::testSpring53ScheduleExample3()",
      "273": "CronDefinitionBuilderTest::::testSpring53ScheduleExample3()",
      "274": "CronDefinitionBuilderTest::::testSpring53ScheduleExample3()",
      "275": "CronDefinitionBuilderTest::::testSpring53ScheduleExample3()",
      "276": "CronDefinitionBuilderTest::::testSpring53ScheduleExample3()",
      "277": "CronDefinitionBuilderTest::::testSpring53ScheduleExample3()",
      "278": "CronDefinitionBuilderTest::::testSpring53ScheduleExample3()",
      "280": "CronDefinitionBuilderTest::::testSpring53ScheduleExample4()",
      "281": "CronDefinitionBuilderTest::::testSpring53ScheduleExample4()",
      "282": "CronDefinitionBuilderTest::::testSpring53ScheduleExample4()",
      "283": "CronDefinitionBuilderTest::::testSpring53ScheduleExample4()",
      "284": "CronDefinitionBuilderTest::::testSpring53ScheduleExample4()",
      "285": "CronDefinitionBuilderTest::::testSpring53ScheduleExample4()",
      "286": "CronDefinitionBuilderTest::::testSpring53ScheduleExample4()",
      "287": "CronDefinitionBuilderTest::::testSpring53ScheduleExample4()",
      "288": "CronDefinitionBuilderTest::::testSpring53ScheduleExample4()",
      "289": "CronDefinitionBuilderTest::::testSpring53ScheduleExample4()",
      "290": "CronDefinitionBuilderTest::::testSpring53ScheduleExample4()",
      "291": "CronDefinitionBuilderTest::::testSpring53ScheduleExample4()",
      "292": "CronDefinitionBuilderTest::::testSpring53ScheduleExample4()",
      "293": "CronDefinitionBuilderTest::::testSpring53ScheduleExample4()",
      "294": "CronDefinitionBuilderTest::::testSpring53ScheduleExample4()",
      "295": "CronDefinitionBuilderTest::::testSpring53ScheduleExample4()",
      "296": "CronDefinitionBuilderTest::::testSpring53ScheduleExample4()",
      "298": "CronDefinitionBuilderTest::::testSpring53ScheduleExample5()",
      "299": "CronDefinitionBuilderTest::::testSpring53ScheduleExample5()",
      "300": "CronDefinitionBuilderTest::::testSpring53ScheduleExample5()",
      "301": "CronDefinitionBuilderTest::::testSpring53ScheduleExample5()",
      "302": "CronDefinitionBuilderTest::::testSpring53ScheduleExample5()",
      "303": "CronDefinitionBuilderTest::::testSpring53ScheduleExample5()",
      "304": "CronDefinitionBuilderTest::::testSpring53ScheduleExample5()",
      "305": "CronDefinitionBuilderTest::::testSpring53ScheduleExample5()",
      "306": "CronDefinitionBuilderTest::::testSpring53ScheduleExample5()",
      "307": "CronDefinitionBuilderTest::::testSpring53ScheduleExample5()",
      "308": "CronDefinitionBuilderTest::::testSpring53ScheduleExample5()",
      "309": "CronDefinitionBuilderTest::::testSpring53ScheduleExample5()",
      "310": "CronDefinitionBuilderTest::::testSpring53ScheduleExample5()",
      "311": "CronDefinitionBuilderTest::::testSpring53ScheduleExample5()",
      "312": "CronDefinitionBuilderTest::::testSpring53ScheduleExample5()",
      "313": "CronDefinitionBuilderTest::::testSpring53ScheduleExample5()",
      "315": "CronDefinitionBuilderTest::::testSpring53ScheduleExample6()",
      "316": "CronDefinitionBuilderTest::::testSpring53ScheduleExample6()",
      "317": "CronDefinitionBuilderTest::::testSpring53ScheduleExample6()",
      "318": "CronDefinitionBuilderTest::::testSpring53ScheduleExample6()",
      "319": "CronDefinitionBuilderTest::::testSpring53ScheduleExample6()",
      "320": "CronDefinitionBuilderTest::::testSpring53ScheduleExample6()",
      "321": "CronDefinitionBuilderTest::::testSpring53ScheduleExample6()",
      "322": "CronDefinitionBuilderTest::::testSpring53ScheduleExample6()",
      "323": "CronDefinitionBuilderTest::::testSpring53ScheduleExample6()",
      "324": "CronDefinitionBuilderTest::::testSpring53ScheduleExample6()",
      "325": "CronDefinitionBuilderTest::::testSpring53ScheduleExample6()",
      "326": "CronDefinitionBuilderTest::::testSpring53ScheduleExample6()",
      "327": "CronDefinitionBuilderTest::::testSpring53ScheduleExample6()",
      "328": "CronDefinitionBuilderTest::::testSpring53ScheduleExample6()",
      "329": "CronDefinitionBuilderTest::::testSpring53ScheduleExample6()",
      "330": "CronDefinitionBuilderTest::::testSpring53ScheduleExample6()",
      "332": "CronDefinitionBuilderTest::::testSpring53ScheduleExample7()",
      "333": "CronDefinitionBuilderTest::::testSpring53ScheduleExample7()",
      "334": "CronDefinitionBuilderTest::::testSpring53ScheduleExample7()",
      "335": "CronDefinitionBuilderTest::::testSpring53ScheduleExample7()",
      "336": "CronDefinitionBuilderTest::::testSpring53ScheduleExample7()",
      "337": "CronDefinitionBuilderTest::::testSpring53ScheduleExample7()",
      "338": "CronDefinitionBuilderTest::::testSpring53ScheduleExample7()",
      "339": "CronDefinitionBuilderTest::::testSpring53ScheduleExample7()",
      "340": "CronDefinitionBuilderTest::::testSpring53ScheduleExample7()",
      "341": "CronDefinitionBuilderTest::::testSpring53ScheduleExample7()",
      "342": "CronDefinitionBuilderTest::::testSpring53ScheduleExample7()",
      "343": "CronDefinitionBuilderTest::::testSpring53ScheduleExample7()",
      "344": "CronDefinitionBuilderTest::::testSpring53ScheduleExample7()",
      "345": "CronDefinitionBuilderTest::::testSpring53ScheduleExample7()",
      "346": "CronDefinitionBuilderTest::::testSpring53ScheduleExample7()",
      "347": "CronDefinitionBuilderTest::::testSpring53ScheduleExample7()",
      "353": "CronDefinitionBuilderTest::::testSpring53ScheduleExample8()",
      "354": "CronDefinitionBuilderTest::::testSpring53ScheduleExample8()",
      "355": "CronDefinitionBuilderTest::::testSpring53ScheduleExample8()",
      "356": "CronDefinitionBuilderTest::::testSpring53ScheduleExample8()",
      "357": "CronDefinitionBuilderTest::::testSpring53ScheduleExample8()",
      "358": "CronDefinitionBuilderTest::::testSpring53ScheduleExample8()",
      "359": "CronDefinitionBuilderTest::::testSpring53ScheduleExample8()",
      "360": "CronDefinitionBuilderTest::::testSpring53ScheduleExample8()",
      "361": "CronDefinitionBuilderTest::::testSpring53ScheduleExample8()",
      "362": "CronDefinitionBuilderTest::::testSpring53ScheduleExample8()",
      "363": "CronDefinitionBuilderTest::::testSpring53ScheduleExample8()",
      "364": "CronDefinitionBuilderTest::::testSpring53ScheduleExample8()",
      "365": "CronDefinitionBuilderTest::::testSpring53ScheduleExample8()",
      "366": "CronDefinitionBuilderTest::::testSpring53ScheduleExample8()",
      "367": "CronDefinitionBuilderTest::::testSpring53ScheduleExample8()",
      "368": "CronDefinitionBuilderTest::::testSpring53ScheduleExample8()",
      "369": "CronDefinitionBuilderTest::::testSpring53ScheduleExample8()",
      "371": "CronDefinitionBuilderTest::::testSpring53ScheduleYearly()",
      "372": "CronDefinitionBuilderTest::::testSpring53ScheduleYearly()",
      "373": "CronDefinitionBuilderTest::::testSpring53ScheduleYearly()",
      "374": "CronDefinitionBuilderTest::::testSpring53ScheduleYearly()",
      "375": "CronDefinitionBuilderTest::::testSpring53ScheduleYearly()",
      "376": "CronDefinitionBuilderTest::::testSpring53ScheduleYearly()",
      "378": "CronDefinitionBuilderTest::::testSpring53ScheduleAnnually()",
      "379": "CronDefinitionBuilderTest::::testSpring53ScheduleAnnually()",
      "380": "CronDefinitionBuilderTest::::testSpring53ScheduleAnnually()",
      "381": "CronDefinitionBuilderTest::::testSpring53ScheduleAnnually()",
      "382": "CronDefinitionBuilderTest::::testSpring53ScheduleAnnually()",
      "383": "CronDefinitionBuilderTest::::testSpring53ScheduleAnnually()",
      "385": "CronDefinitionBuilderTest::::testSpring53ScheduleMonthly()",
      "386": "CronDefinitionBuilderTest::::testSpring53ScheduleMonthly()",
      "387": "CronDefinitionBuilderTest::::testSpring53ScheduleMonthly()",
      "388": "CronDefinitionBuilderTest::::testSpring53ScheduleMonthly()",
      "389": "CronDefinitionBuilderTest::::testSpring53ScheduleMonthly()",
      "390": "CronDefinitionBuilderTest::::testSpring53ScheduleMonthly()",
      "392": "CronDefinitionBuilderTest::::testSpring53ScheduleWeekly()",
      "393": "CronDefinitionBuilderTest::::testSpring53ScheduleWeekly()",
      "394": "CronDefinitionBuilderTest::::testSpring53ScheduleWeekly()",
      "395": "CronDefinitionBuilderTest::::testSpring53ScheduleWeekly()",
      "396": "CronDefinitionBuilderTest::::testSpring53ScheduleWeekly()",
      "397": "CronDefinitionBuilderTest::::testSpring53ScheduleWeekly()",
      "399": "CronDefinitionBuilderTest::::testSpring53ScheduleDaily()",
      "400": "CronDefinitionBuilderTest::::testSpring53ScheduleDaily()",
      "401": "CronDefinitionBuilderTest::::testSpring53ScheduleDaily()",
      "402": "CronDefinitionBuilderTest::::testSpring53ScheduleDaily()",
      "403": "CronDefinitionBuilderTest::::testSpring53ScheduleDaily()",
      "404": "CronDefinitionBuilderTest::::testSpring53ScheduleDaily()",
      "406": "CronDefinitionBuilderTest::::testSpring53ScheduleMidnight()",
      "407": "CronDefinitionBuilderTest::::testSpring53ScheduleMidnight()",
      "408": "CronDefinitionBuilderTest::::testSpring53ScheduleMidnight()",
      "409": "CronDefinitionBuilderTest::::testSpring53ScheduleMidnight()",
      "410": "CronDefinitionBuilderTest::::testSpring53ScheduleMidnight()",
      "411": "CronDefinitionBuilderTest::::testSpring53ScheduleMidnight()",
      "413": "CronDefinitionBuilderTest::::testSpring53ScheduleHourly()",
      "414": "CronDefinitionBuilderTest::::testSpring53ScheduleHourly()",
      "415": "CronDefinitionBuilderTest::::testSpring53ScheduleHourly()",
      "416": "CronDefinitionBuilderTest::::testSpring53ScheduleHourly()",
      "417": "CronDefinitionBuilderTest::::testSpring53ScheduleHourly()",
      "418": "CronDefinitionBuilderTest::::testSpring53ScheduleHourly()",
      "420": "CronDefinitionBuilderTest::::testScheduleReboot()",
      "421": "CronDefinitionBuilderTest::::testScheduleReboot()",
      "422": "CronDefinitionBuilderTest::::testScheduleReboot()",
      "423": "CronDefinitionBuilderTest::::testScheduleReboot()",
      "424": "CronDefinitionBuilderTest::::testScheduleReboot()",
      "425": "CronDefinitionBuilderTest::::testScheduleReboot()"
    },
    "tests": [
      {
        "test_lines": [
          45,
          49
        ],
        "covered_lines": [
          26,
          27,
          28,
          34,
          42
        ]
      },
      {
        "test_lines": [
          51,
          57
        ],
        "covered_lines": [
          26,
          27,
          28,
          34,
          42,
          51,
          224,
          225,
          231,
          234,
          235,
          243,
          244,
          245,
          246,
          247
        ]
      },
      {
        "test_lines": [
          59,
          65
        ],
        "covered_lines": [
          26,
          27,
          28,
          34,
          42,
          60,
          224,
          225,
          231,
          234,
          235,
          243,
          244,
          245,
          246,
          247
        ]
      },
      {
        "test_lines": [
          67,
          73
        ],
        "covered_lines": [
          26,
          27,
          28,
          34,
          42,
          69,
          224,
          225,
          231,
          234,
          235,
          243,
          244,
          245,
          246,
          247
        ]
      },
      {
        "test_lines": [
          75,
          81
        ],
        "covered_lines": [
          26,
          27,
          28,
          34,
          42,
          78,
          224,
          225,
          231,
          234,
          235,
          243,
          244,
          245,
          246,
          247
        ]
      },
      {
        "test_lines": [
          83,
          89
        ],
        "covered_lines": [
          26,
          27,
          28,
          34,
          42,
          87,
          224,
          225,
          231,
          234,
          235,
          243,
          244,
          245,
          246,
          247
        ]
      },
      {
        "test_lines": [
          91,
          97
        ],
        "covered_lines": [
          26,
          27,
          28,
          34,
          42,
          96,
          224,
          225,
          231,
          234,
          235,
          243,
          244,
          245,
          246,
          247
        ]
      },
      {
        "test_lines": [
          99,
          105
        ],
        "covered_lines": [
          26,
          27,
          28,
          34,
          42,
          105,
          224,
          225,
          231,
          234,
          235,
          243,
          244,
          245,
          246,
          247
        ]
      },
      {
        "test_lines": [
          107,
          111
        ],
        "covered_lines": [
          26,
          27,
          28,
          34,
          42,
          69,
          224,
          225,
          231,
          234,
          235,
          243,
          244,
          245,
          246,
          247
        ]
      },
      {
        "test_lines": [
          113,
          128
        ],
        "covered_lines": [
          26,
          27,
          28,
          34,
          42,
          224,
          225,
          231,
          234,
          235,
          243,
          244,
          245,
          246,
          247
        ]
      },
      {
        "test_lines": [
          130,
          133
        ],
        "covered_lines": [
          26,
          27,
          28,
          34,
          42,
          60,
          69,
          78,
          87,
          96,
          224,
          225,
          226,
          230,
          231,
          234,
          235,
          243,
          244,
          245,
          246,
          247,
          498,
          499,
          500,
          501,
          502,
          503,
          504,
          514,
          520
        ]
      },
      {
        "test_lines": [
          135,
          138
        ],
        "covered_lines": [
          26,
          27,
          28,
          34,
          42,
          51,
          60,
          69,
          78,
          87,
          96,
          105,
          213,
          214,
          224,
          225,
          226,
          230,
          231,
          234,
          235,
          243,
          244,
          245,
          246,
          247,
          332,
          333,
          334,
          335,
          336,
          337,
          338,
          339,
          340,
          341,
          514,
          518
        ]
      },
      {
        "test_lines": [
          140,
          143
        ],
        "covered_lines": [
          26,
          27,
          28,
          34,
          42,
          60,
          69,
          78,
          87,
          96,
          123,
          124,
          224,
          225,
          226,
          230,
          231,
          234,
          235,
          243,
          244,
          245,
          246,
          247,
          256,
          257,
          258,
          259,
          260,
          261,
          262,
          263,
          514,
          516
        ]
      },
      {
        "test_lines": [
          145,
          148
        ],
        "covered_lines": [
          26,
          27,
          28,
          34,
          42,
          514
        ]
      },
      {
        "test_lines": [
          150,
          155
        ],
        "covered_lines": [
          26,
          27,
          28,
          34,
          42,
          60,
          69,
          78,
          87,
          96,
          224,
          225,
          226,
          230,
          231,
          234,
          235,
          243,
          244,
          245,
          246,
          247,
          498,
          499,
          500,
          501,
          502,
          503,
          504,
          514,
          520
        ]
      },
      {
        "test_lines": [
          157,
          166
        ],
        "covered_lines": [
          26,
          27,
          28,
          34,
          42,
          60,
          69,
          78,
          87,
          96,
          224,
          225,
          226,
          227,
          228,
          230,
          231,
          232,
          234,
          235
        ]
      },
      {
        "test_lines": [
          172,
          188
        ],
        "covered_lines": [
          26,
          27,
          28,
          34,
          42,
          51,
          60,
          69,
          78,
          87,
          96,
          105,
          213,
          214,
          224,
          225,
          226,
          230,
          231,
          234,
          235,
          243,
          244,
          245,
          246,
          247,
          332,
          333,
          334,
          335,
          336,
          337,
          338,
          339,
          340,
          341,
          514,
          518
        ]
      },
      {
        "test_lines": [
          194,
          210
        ],
        "covered_lines": [
          26,
          27,
          28,
          34,
          42,
          51,
          60,
          69,
          78,
          87,
          96,
          105,
          213,
          214,
          224,
          225,
          226,
          230,
          231,
          234,
          235,
          243,
          244,
          245,
          246,
          247,
          332,
          333,
          334,
          335,
          336,
          337,
          338,
          339,
          340,
          341,
          514,
          518
        ]
      },
      {
        "test_lines": [
          212,
          227
        ],
        "covered_lines": [
          26,
          27,
          28,
          34,
          42,
          51,
          60,
          69,
          78,
          87,
          96,
          224,
          225,
          226,
          230,
          231,
          234,
          235,
          243,
          244,
          245,
          246,
          247,
          404,
          405,
          406,
          407,
          408,
          409,
          410,
          411,
          412,
          514,
          522
        ]
      },
      {
        "test_lines": [
          229,
          244
        ],
        "covered_lines": [
          26,
          27,
          28,
          34,
          42,
          51,
          60,
          69,
          78,
          87,
          96,
          133,
          134,
          143,
          144,
          153,
          154,
          163,
          164,
          173,
          174,
          183,
          184,
          193,
          194,
          224,
          225,
          226,
          230,
          231,
          234,
          235,
          243,
          244,
          245,
          246,
          247,
          476,
          477,
          478,
          479,
          480,
          481,
          482,
          483,
          484,
          485,
          486,
          487,
          488,
          489,
          514,
          524
        ]
      },
      {
        "test_lines": [
          246,
          261
        ],
        "covered_lines": [
          26,
          27,
          28,
          34,
          42,
          51,
          60,
          69,
          78,
          87,
          96,
          133,
          134,
          143,
          144,
          153,
          154,
          163,
          164,
          173,
          174,
          183,
          184,
          193,
          194,
          224,
          225,
          226,
          230,
          231,
          234,
          235,
          243,
          244,
          245,
          246,
          247,
          476,
          477,
          478,
          479,
          480,
          481,
          482,
          483,
          484,
          485,
          486,
          487,
          488,
          489,
          514,
          524
        ]
      },
      {
        "test_lines": [
          263,
          278
        ],
        "covered_lines": [
          26,
          27,
          28,
          34,
          42,
          51,
          60,
          69,
          78,
          87,
          96,
          133,
          134,
          143,
          144,
          153,
          154,
          163,
          164,
          173,
          174,
          183,
          184,
          193,
          194,
          224,
          225,
          226,
          230,
          231,
          234,
          235,
          243,
          244,
          245,
          246,
          247,
          476,
          477,
          478,
          479,
          480,
          481,
          482,
          483,
          484,
          485,
          486,
          487,
          488,
          489,
          514,
          524
        ]
      },
      {
        "test_lines": [
          280,
          296
        ],
        "covered_lines": [
          26,
          27,
          28,
          34,
          42,
          51,
          60,
          69,
          78,
          87,
          96,
          133,
          134,
          143,
          144,
          153,
          154,
          163,
          164,
          173,
          174,
          183,
          184,
          193,
          194,
          224,
          225,
          226,
          230,
          231,
          234,
          235,
          243,
          244,
          245,
          246,
          247,
          476,
          477,
          478,
          479,
          480,
          481,
          482,
          483,
          484,
          485,
          486,
          487,
          488,
          489,
          514,
          524
        ]
      },
      {
        "test_lines": [
          298,
          313
        ],
        "covered_lines": [
          26,
          27,
          28,
          34,
          42,
          51,
          60,
          69,
          78,
          87,
          96,
          133,
          134,
          143,
          144,
          153,
          154,
          163,
          164,
          173,
          174,
          183,
          184,
          193,
          194,
          224,
          225,
          226,
          230,
          231,
          234,
          235,
          243,
          244,
          245,
          246,
          247,
          476,
          477,
          478,
          479,
          480,
          481,
          482,
          483,
          484,
          485,
          486,
          487,
          488,
          489,
          514,
          524
        ]
      },
      {
        "test_lines": [
          315,
          330
        ],
        "covered_lines": [
          26,
          27,
          28,
          34,
          42,
          51,
          60,
          69,
          78,
          87,
          96,
          133,
          134,
          143,
          144,
          153,
          154,
          163,
          164,
          173,
          174,
          183,
          184,
          193,
          194,
          224,
          225,
          226,
          230,
          231,
          234,
          235,
          243,
          244,
          245,
          246,
          247,
          476,
          477,
          478,
          479,
          480,
          481,
          482,
          483,
          484,
          485,
          486,
          487,
          488,
          489,
          514,
          524
        ]
      },
      {
        "test_lines": [
          332,
          347
        ],
        "covered_lines": [
          26,
          27,
          28,
          34,
          42,
          51,
          60,
          69,
          78,
          87,
          96,
          133,
          134,
          143,
          144,
          153,
          154,
          163,
          164,
          173,
          174,
          183,
          184,
          193,
          194,
          224,
          225,
          226,
          230,
          231,
          234,
          235,
          243,
          244,
          245,
          246,
          247,
          476,
          477,
          478,
          479,
          480,
          481,
          482,
          483,
          484,
          485,
          486,
          487,
          488,
          489,
          514,
          524
        ]
      },
      {
        "test_lines": [
          353,
          369
        ],
        "covered_lines": [
          26,
          27,
          28,
          34,
          42,
          51,
          60,
          69,
          78,
          87,
          96,
          133,
          134,
          143,
          144,
          153,
          154,
          163,
          164,
          173,
          174,
          183,
          184,
          193,
          194,
          224,
          225,
          226,
          230,
          231,
          234,
          235,
          243,
          244,
          245,
          246,
          247,
          476,
          477,
          478,
          479,
          480,
          481,
          482,
          483,
          484,
          485,
          486,
          487,
          488,
          489,
          514,
          524
        ]
      },
      {
        "test_lines": [
          371,
          376
        ],
        "covered_lines": [
          26,
          27,
          28,
          34,
          42,
          51,
          60,
          69,
          78,
          87,
          96,
          133,
          134,
          143,
          144,
          153,
          154,
          163,
          164,
          173,
          174,
          183,
          184,
          193,
          194,
          224,
          225,
          226,
          230,
          231,
          234,
          235,
          243,
          244,
          245,
          246,
          247,
          476,
          477,
          478,
          479,
          480,
          481,
          482,
          483,
          484,
          485,
          486,
          487,
          488,
          489,
          514,
          524
        ]
      },
      {
        "test_lines": [
          378,
          383
        ],
        "covered_lines": [
          26,
          27,
          28,
          34,
          42,
          51,
          60,
          69,
          78,
          87,
          96,
          133,
          134,
          143,
          144,
          153,
          154,
          163,
          164,
          173,
          174,
          183,
          184,
          193,
          194,
          224,
          225,
          226,
          230,
          231,
          234,
          235,
          243,
          244,
          245,
          246,
          247,
          476,
          477,
          478,
          479,
          480,
          481,
          482,
          483,
          484,
          485,
          486,
          487,
          488,
          489,
          514,
          524
        ]
      },
      {
        "test_lines": [
          385,
          390
        ],
        "covered_lines": [
          26,
          27,
          28,
          34,
          42,
          51,
          60,
          69,
          78,
          87,
          96,
          133,
          134,
          143,
          144,
          153,
          154,
          163,
          164,
          173,
          174,
          183,
          184,
          193,
          194,
          224,
          225,
          226,
          230,
          231,
          234,
          235,
          243,
          244,
          245,
          246,
          247,
          476,
          477,
          478,
          479,
          480,
          481,
          482,
          483,
          484,
          485,
          486,
          487,
          488,
          489,
          514,
          524
        ]
      },
      {
        "test_lines": [
          392,
          397
        ],
        "covered_lines": [
          26,
          27,
          28,
          34,
          42,
          51,
          60,
          69,
          78,
          87,
          96,
          133,
          134,
          143,
          144,
          153,
          154,
          163,
          164,
          173,
          174,
          183,
          184,
          193,
          194,
          224,
          225,
          226,
          230,
          231,
          234,
          235,
          243,
          244,
          245,
          246,
          247,
          476,
          477,
          478,
          479,
          480,
          481,
          482,
          483,
          484,
          485,
          486,
          487,
          488,
          489,
          514,
          524
        ]
      },
      {
        "test_lines": [
          399,
          404
        ],
        "covered_lines": [
          26,
          27,
          28,
          34,
          42,
          51,
          60,
          69,
          78,
          87,
          96,
          133,
          134,
          143,
          144,
          153,
          154,
          163,
          164,
          173,
          174,
          183,
          184,
          193,
          194,
          224,
          225,
          226,
          230,
          231,
          234,
          235,
          243,
          244,
          245,
          246,
          247,
          476,
          477,
          478,
          479,
          480,
          481,
          482,
          483,
          484,
          485,
          486,
          487,
          488,
          489,
          514,
          524
        ]
      },
      {
        "test_lines": [
          406,
          411
        ],
        "covered_lines": [
          26,
          27,
          28,
          34,
          42,
          51,
          60,
          69,
          78,
          87,
          96,
          133,
          134,
          143,
          144,
          153,
          154,
          163,
          164,
          173,
          174,
          183,
          184,
          193,
          194,
          224,
          225,
          226,
          230,
          231,
          234,
          235,
          243,
          244,
          245,
          246,
          247,
          476,
          477,
          478,
          479,
          480,
          481,
          482,
          483,
          484,
          485,
          486,
          487,
          488,
          489,
          514,
          524
        ]
      },
      {
        "test_lines": [
          413,
          418
        ],
        "covered_lines": [
          26,
          27,
          28,
          34,
          42,
          51,
          60,
          69,
          78,
          87,
          96,
          133,
          134,
          143,
          144,
          153,
          154,
          163,
          164,
          173,
          174,
          183,
          184,
          193,
          194,
          224,
          225,
          226,
          230,
          231,
          234,
          235,
          243,
          244,
          245,
          246,
          247,
          476,
          477,
          478,
          479,
          480,
          481,
          482,
          483,
          484,
          485,
          486,
          487,
          488,
          489,
          514,
          524
        ]
      },
      {
        "test_lines": [
          420,
          425
        ],
        "covered_lines": [
          26,
          27,
          28,
          34,
          42,
          203,
          204,
          243,
          244,
          245,
          246,
          247
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/cron-utils/src/main/java/com/cronutils/model/definition/CronDefinition.java": {
    "class_content": [
      "/*\n",
      " * Copyright 2014 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.definition;\n",
      "\n",
      "import com.cronutils.model.field.CronFieldName;\n",
      "import com.cronutils.model.field.definition.FieldDefinition;\n",
      "import com.cronutils.utils.Preconditions;\n",
      "\n",
      "import java.io.Serializable;\n",
      "import java.util.*;\n",
      "\n",
      "/**\n",
      " * Defines fields and conditions over each field for a cron.\n",
      " * The class is thread safe.\n",
      " */\n",
      "public class CronDefinition implements Serializable {\n",
      "\n",
      "    private static final long serialVersionUID = 7067112327461432170L;\n",
      "    private final Map<CronFieldName, FieldDefinition> fieldDefinitions;\n",
      "    private final Set<CronConstraint> cronConstraints;\n",
      "    private final Set<CronNicknames> cronNicknames;\n",
      "    private final boolean matchDayOfWeekAndDayOfMonth;\n",
      "\n",
      "    /**\n",
      "     * Constructor.\n",
      "     *\n",
      "     * @param fieldDefinitions - list with field definitions. Must not be null or empty.\n",
      "     *                         Throws a NullPointerException if a null values is received\n",
      "     *                         Throws an IllegalArgumentException if an empty list is received\n",
      "     */\n",
      "    public CronDefinition(final List<FieldDefinition> fieldDefinitions, final Set<CronConstraint> cronConstraints, Set<CronNicknames> cronNicknames, final boolean matchDayOfWeekAndDayOfMonth) {\n",
      "        Preconditions.checkNotNull(cronNicknames, \"Cron nicknames must not be null\");\n",
      "        if(!cronNicknames.contains(CronNicknames.REBOOT)){\n",
      "            Preconditions.checkNotNull(fieldDefinitions, \"Field definitions must not be null\");\n",
      "            Preconditions.checkNotNull(cronConstraints, \"Cron validations must not be null\");\n",
      "            Preconditions.checkNotNullNorEmpty(fieldDefinitions, \"Field definitions must not be empty\");\n",
      "            Preconditions.checkArgument(!fieldDefinitions.get(0).isOptional(), \"The first field must not be optional\");\n",
      "        }\n",
      "        this.fieldDefinitions = new EnumMap<>(CronFieldName.class);\n",
      "        for (final FieldDefinition field : fieldDefinitions) {\n",
      "            this.fieldDefinitions.put(field.getFieldName(), field);\n",
      "        }\n",
      "        this.cronConstraints = Collections.unmodifiableSet(cronConstraints);\n",
      "        this.cronNicknames = Collections.unmodifiableSet(cronNicknames);\n",
      "        this.matchDayOfWeekAndDayOfMonth = matchDayOfWeekAndDayOfMonth;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * If both the day of the week and day of the month should be matched.\n",
      "     *\n",
      "     * @return true if both should be matched, false otherwise\n",
      "     */\n",
      "    public boolean isMatchDayOfWeekAndDayOfMonth() {\n",
      "        return matchDayOfWeekAndDayOfMonth;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Returns field definitions for this cron.\n",
      "     *\n",
      "     * @return Set of FieldDefinition instances, never null.\n",
      "     */\n",
      "    public Set<FieldDefinition> getFieldDefinitions() {\n",
      "        return new HashSet<>(fieldDefinitions.values());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Retrieve all cron field definitions values as map.\n",
      "     *\n",
      "     * @return unmodifiable Map with key CronFieldName and values FieldDefinition, never null\n",
      "     */\n",
      "    public Map<CronFieldName, FieldDefinition> retrieveFieldDefinitionsAsMap() {\n",
      "        return Collections.unmodifiableMap(fieldDefinitions);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Returns field definition for field name of this cron.\n",
      "     *\n",
      "     * @param cronFieldName cron field name\n",
      "     * @return FieldDefinition instance\n",
      "     */\n",
      "    public FieldDefinition getFieldDefinition(final CronFieldName cronFieldName) {\n",
      "        return fieldDefinitions.get(cronFieldName);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Returns {@code true} if this cron contains a field definition for field name.\n",
      "     *\n",
      "     * @param cronFieldName cron field name\n",
      "     * @return {@code true} if this cron contains a field definition for field name\n",
      "     */\n",
      "    public boolean containsFieldDefinition(final CronFieldName cronFieldName) {\n",
      "        return fieldDefinitions.containsKey(cronFieldName);\n",
      "    }\n",
      "\n",
      "    public Set<CronConstraint> getCronConstraints() {\n",
      "        return cronConstraints;\n",
      "    }\n",
      "\n",
      "    public Set<CronNicknames> getCronNicknames() {\n",
      "        return cronNicknames;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public boolean equals(Object o) {\n",
      "        if (this == o) {\n",
      "            return true;\n",
      "        }\n",
      "        if (o == null || getClass() != o.getClass()) {\n",
      "            return false;\n",
      "        }\n",
      "        CronDefinition that = (CronDefinition) o;\n",
      "        return matchDayOfWeekAndDayOfMonth == that.matchDayOfWeekAndDayOfMonth\n",
      "            && fieldDefinitions.equals(that.fieldDefinitions)\n",
      "            && cronConstraints.equals(that.cronConstraints)\n",
      "            && cronNicknames.equals(that.cronNicknames);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public int hashCode() {\n",
      "        return Objects.hash(\n",
      "            fieldDefinitions, cronConstraints, cronNicknames, matchDayOfWeekAndDayOfMonth);\n",
      "    }\n",
      "}\n",
      "\n"
    ],
    "test_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.definition;\n",
      "\n",
      "import com.cronutils.model.CronType;\n",
      "import com.cronutils.model.field.CronFieldName;\n",
      "import com.cronutils.model.field.constraint.FieldConstraintsBuilder;\n",
      "import com.cronutils.model.field.definition.FieldDefinition;\n",
      "import org.junit.jupiter.api.BeforeEach;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.junit.jupiter.params.ParameterizedTest;\n",
      "import org.junit.jupiter.params.provider.Arguments;\n",
      "import org.junit.jupiter.params.provider.MethodSource;\n",
      "import org.mockito.Mock;\n",
      "import org.mockito.MockitoAnnotations;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.HashSet;\n",
      "import java.util.List;\n",
      "import java.util.Set;\n",
      "import java.util.function.UnaryOperator;\n",
      "import java.util.stream.Stream;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.*;\n",
      "import static org.mockito.Mockito.when;\n",
      "\n",
      "public class CronDefinitionTest {\n",
      "\n",
      "    private boolean matchDayOfWeekAndDayOfMonth;\n",
      "    @Mock\n",
      "    private FieldDefinition mockFieldDefinition1;\n",
      "    @Mock\n",
      "    private FieldDefinition mockFieldDefinition2;\n",
      "    @Mock\n",
      "    private FieldDefinition mockFieldDefinition3optional;\n",
      "\n",
      "    @BeforeEach\n",
      "    public void setUp() {\n",
      "        final CronFieldName testFieldName1 = CronFieldName.SECOND;\n",
      "        final CronFieldName testFieldName2 = CronFieldName.MINUTE;\n",
      "        final CronFieldName testFieldName3 = CronFieldName.HOUR;\n",
      "        MockitoAnnotations.initMocks(this);\n",
      "        when(mockFieldDefinition1.getFieldName()).thenReturn(testFieldName1);\n",
      "        when(mockFieldDefinition2.getFieldName()).thenReturn(testFieldName2);\n",
      "        when(mockFieldDefinition3optional.getFieldName()).thenReturn(testFieldName3);\n",
      "        when(mockFieldDefinition3optional.isOptional()).thenReturn(Boolean.TRUE);\n",
      "\n",
      "        matchDayOfWeekAndDayOfMonth = false;\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testConstructorNullFieldsParameter() {\n",
      "        assertThrows(NullPointerException.class, () -> new CronDefinition(null, new HashSet<>(), new HashSet<>(), matchDayOfWeekAndDayOfMonth));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testConstructorNullConstraintsParameter() {\n",
      "        assertThrows(NullPointerException.class, () -> new CronDefinition(new ArrayList<>(), null, new HashSet<>(), matchDayOfWeekAndDayOfMonth));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testConstructorNullCronNicknamesParameter() {\n",
      "        assertThrows(NullPointerException.class, () -> new CronDefinition(new ArrayList<>(), new HashSet<>(), null, matchDayOfWeekAndDayOfMonth));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testConstructorEmptyFieldsParameter() {\n",
      "        assertThrows(IllegalArgumentException.class, () -> new CronDefinition(new ArrayList<>(), new HashSet<>(), new HashSet<>(), matchDayOfWeekAndDayOfMonth));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testLastFieldOptionalTrueWhenSet() {\n",
      "        final List<FieldDefinition> fields = provideFieldDefinitionListWithOptionalDefinition();\n",
      "        final Set<FieldDefinition> fieldDefinitions = new CronDefinition(fields, new HashSet<>(), new HashSet<>(), matchDayOfWeekAndDayOfMonth)\n",
      "                .getFieldDefinitions();\n",
      "        final List<FieldDefinition> sortedFieldDefinitions = new ArrayList<>(fieldDefinitions);\n",
      "        sortedFieldDefinitions.sort(FieldDefinition.createFieldDefinitionComparator());\n",
      "        assertTrue(sortedFieldDefinitions.get(fields.size() - 1).isOptional());\n",
      "    }\n",
      "\n",
      "    private List<FieldDefinition> provideFieldDefinitionListWithOptionalDefinition() {\n",
      "        List<FieldDefinition> definitions = provideFieldDefinitionListWithSingleDefinition();\n",
      "        definitions.add(mockFieldDefinition2);\n",
      "        definitions.add(mockFieldDefinition3optional);\n",
      "        return definitions;\n",
      "    }\n",
      "\n",
      "    private List<FieldDefinition> provideFieldDefinitionListWithSingleDefinition() {\n",
      "        List<FieldDefinition> definitions = new ArrayList<>();\n",
      "        definitions.add(mockFieldDefinition1);\n",
      "        return definitions;\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testLastFieldOptionalNotAllowedOnSingleFieldDefinition() {\n",
      "        final List<FieldDefinition> fields = new ArrayList<>();\n",
      "        fields.add(mockFieldDefinition3optional);\n",
      "        assertThrows(IllegalArgumentException.class, () -> new CronDefinition(fields, new HashSet<>(), new HashSet<>(), matchDayOfWeekAndDayOfMonth));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGetFieldDefinitions() {\n",
      "        final List<FieldDefinition> fields = provideFieldDefinitionListWithSingleDefinition();\n",
      "        final CronDefinition cronDefinition = new CronDefinition(fields, new HashSet<>(), new HashSet<>(), matchDayOfWeekAndDayOfMonth);\n",
      "        assertNotNull(cronDefinition.getFieldDefinitions());\n",
      "        assertEquals(1, cronDefinition.getFieldDefinitions().size());\n",
      "        assertTrue(cronDefinition.getFieldDefinitions().contains(mockFieldDefinition1));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void simpleEqualityTest() {\n",
      "        assertEquals(CronDefinitionBuilder.instanceDefinitionFor(CronType.QUARTZ), CronDefinitionBuilder.instanceDefinitionFor(CronType.QUARTZ));\n",
      "    }\n",
      "\n",
      "    @ParameterizedTest\n",
      "    @MethodSource(\"parametersToTestIfEqual\")\n",
      "    public void testIfDefinitionsAreEqual(\n",
      "        List<FieldDefinition> fieldDefinitionsOne,\n",
      "        List<FieldDefinition> fieldDefinitionsTwo,\n",
      "        Set<CronConstraint> cronConstraintsOne,\n",
      "        Set<CronConstraint> cronConstraintsTwo,\n",
      "        Set<CronNicknames> cronNicknamesOne,\n",
      "        Set<CronNicknames> cronNicknamesTwo,\n",
      "        boolean shouldMatchDayOfWeekAndDayOfMonthOne,\n",
      "        boolean shouldMatchDayOfWeekAndDayOfMonthTwo,\n",
      "        boolean shouldBeEqual) {\n",
      "        // given\n",
      "        CronDefinition definitionOne = new CronDefinition(\n",
      "            fieldDefinitionsOne,\n",
      "            cronConstraintsOne,\n",
      "            cronNicknamesOne,\n",
      "            shouldMatchDayOfWeekAndDayOfMonthOne);\n",
      "        CronDefinition definitionTwo = new CronDefinition(\n",
      "            fieldDefinitionsTwo,\n",
      "            cronConstraintsTwo,\n",
      "            cronNicknamesTwo,\n",
      "            shouldMatchDayOfWeekAndDayOfMonthTwo);\n",
      "\n",
      "        // when\n",
      "        boolean areEqual = definitionOne.equals(definitionTwo);\n",
      "\n",
      "        // then\n",
      "        if (shouldBeEqual) {\n",
      "            assertTrue(areEqual);\n",
      "        } else {\n",
      "            assertFalse(areEqual);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @SuppressWarnings(\"unused\")\n",
      "    private static Stream<Arguments> parametersToTestIfEqual() {\n",
      "        return Stream.of(\n",
      "            Arguments.of(\n",
      "                provideSimpleFieldDefinitions(),\n",
      "                provideSimpleFieldDefinitions(),\n",
      "                provideCronConstraintSetWithTwoConstraints(),\n",
      "                provideCronConstraintSetWithTwoConstraints(),\n",
      "                provideCronNicknameSetWithTwoNicknames(),\n",
      "                provideCronNicknameSetWithTwoNicknames(),\n",
      "                true,\n",
      "                true,\n",
      "                true\n",
      "            ),\n",
      "            Arguments.of(\n",
      "                provideFieldDefinitions(CronFieldName.SECOND, b -> b.withValidRange(0, 59)),\n",
      "                provideFieldDefinitions(CronFieldName.SECOND, b -> b.withValidRange(1, 60)),\n",
      "                provideCronConstraintSetWithTwoConstraints(),\n",
      "                provideCronConstraintSetWithTwoConstraints(),\n",
      "                provideCronNicknameSetWithTwoNicknames(),\n",
      "                provideCronNicknameSetWithTwoNicknames(),\n",
      "                true,\n",
      "                true,\n",
      "                false\n",
      "            ),\n",
      "            Arguments.of(\n",
      "                provideSimpleFieldDefinitions(),\n",
      "                provideSimpleFieldDefinitions(),\n",
      "                provideCronConstraintSetWithOneConstraint(),\n",
      "                provideCronConstraintSetWithTwoConstraints(),\n",
      "                provideCronNicknameSetWithTwoNicknames(),\n",
      "                provideCronNicknameSetWithTwoNicknames(),\n",
      "                true,\n",
      "                true,\n",
      "                false\n",
      "            ),\n",
      "            Arguments.of(\n",
      "                provideSimpleFieldDefinitions(),\n",
      "                provideSimpleFieldDefinitions(),\n",
      "                provideCronConstraintSetWithTwoConstraints(),\n",
      "                provideCronConstraintSetWithTwoConstraints(),\n",
      "                provideCronNicknameSetWithOneNickname(),\n",
      "                provideCronNicknameSetWithTwoNicknames(),\n",
      "                true,\n",
      "                true,\n",
      "                false\n",
      "            ),\n",
      "            Arguments.of(\n",
      "                provideSimpleFieldDefinitions(),\n",
      "                provideSimpleFieldDefinitions(),\n",
      "                provideCronConstraintSetWithTwoConstraints(),\n",
      "                provideCronConstraintSetWithTwoConstraints(),\n",
      "                provideCronNicknameSetWithTwoNicknames(),\n",
      "                provideCronNicknameSetWithTwoNicknames(),\n",
      "                false,\n",
      "                true,\n",
      "                false\n",
      "            ),\n",
      "            Arguments.of(\n",
      "                provideSimpleFieldDefinitions(),\n",
      "                provideSimpleFieldDefinitions(),\n",
      "                provideCronConstraintSetWithTwoConstraints(),\n",
      "                provideCronConstraintSetWithOneConstraint(),\n",
      "                provideCronNicknameSetWithTwoNicknames(),\n",
      "                provideCronNicknameSetWithOneNickname(),\n",
      "                false,\n",
      "                true,\n",
      "                false\n",
      "            )\n",
      "        );\n",
      "    }\n",
      "\n",
      "    private static List<FieldDefinition> provideFieldDefinitions(CronFieldName cronFieldName, UnaryOperator<FieldConstraintsBuilder> configurator) {\n",
      "        List<FieldDefinition> defs = new ArrayList<>();\n",
      "        defs.add(new FieldDefinition(cronFieldName, configurator.apply(\n",
      "                FieldConstraintsBuilder.instance().forField(cronFieldName)).createConstraintsInstance()));\n",
      "\n",
      "        return defs;\n",
      "    }\n",
      "\n",
      "    private static List<FieldDefinition> provideSimpleFieldDefinitions() {\n",
      "        return provideFieldDefinitions(CronFieldName.SECOND, b -> b);\n",
      "    }\n",
      "\n",
      "    private static Set<CronNicknames> provideCronNicknameSetWithTwoNicknames() {\n",
      "        Set<CronNicknames> constraints = provideCronNicknameSetWithOneNickname();\n",
      "        constraints.add(CronNicknames.DAILY);\n",
      "        return constraints;\n",
      "    }\n",
      "\n",
      "    private static Set<CronNicknames> provideCronNicknameSetWithOneNickname() {\n",
      "        Set<CronNicknames> constraints = new HashSet<>();\n",
      "        constraints.add(CronNicknames.ANNUALLY);\n",
      "        return constraints;\n",
      "    }\n",
      "\n",
      "    private static Set<CronConstraint> provideCronConstraintSetWithTwoConstraints() {\n",
      "        Set<CronConstraint> constraints = provideCronConstraintSetWithOneConstraint();\n",
      "        constraints.add(CronConstraintsFactory.ensureEitherDayOfYearOrMonth());\n",
      "        return constraints;\n",
      "    }\n",
      "\n",
      "    private static Set<CronConstraint> provideCronConstraintSetWithOneConstraint() {\n",
      "        Set<CronConstraint> constraints = new HashSet<>();\n",
      "        constraints.add(CronConstraintsFactory.ensureEitherDayOfWeekOrDayOfMonth());\n",
      "        return constraints;\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "CronDefinition::::isMatchDayOfWeekAndDayOfMonth()": [
        64,
        66
      ],
      "CronDefinition::::getFieldDefinitions()": [
        73,
        75
      ],
      "CronDefinition::::retrieveFieldDefinitionsAsMap()": [
        82,
        84
      ],
      "CronDefinition::::getFieldDefinition(com.cronutils.model.field.CronFieldName)": [
        92,
        94
      ],
      "CronDefinition::::containsFieldDefinition(com.cronutils.model.field.CronFieldName)": [
        102,
        104
      ],
      "CronDefinition::::getCronConstraints()": [
        106,
        108
      ],
      "CronDefinition::::getCronNicknames()": [
        110,
        112
      ],
      "CronDefinition::::equals(java.lang.Object)": [
        114,
        127
      ],
      "CronDefinition::::hashCode()": [
        129,
        133
      ]
    },
    "test_method_lines_dic": {
      "CronDefinitionTest::::setUp()": [
        48,
        60
      ],
      "CronDefinitionTest::::testConstructorNullFieldsParameter()": [
        62,
        65
      ],
      "CronDefinitionTest::::testConstructorNullConstraintsParameter()": [
        67,
        70
      ],
      "CronDefinitionTest::::testConstructorNullCronNicknamesParameter()": [
        72,
        75
      ],
      "CronDefinitionTest::::testConstructorEmptyFieldsParameter()": [
        77,
        80
      ],
      "CronDefinitionTest::::testLastFieldOptionalTrueWhenSet()": [
        82,
        90
      ],
      "CronDefinitionTest::::provideFieldDefinitionListWithOptionalDefinition()": [
        92,
        97
      ],
      "CronDefinitionTest::::provideFieldDefinitionListWithSingleDefinition()": [
        99,
        103
      ],
      "CronDefinitionTest::::testLastFieldOptionalNotAllowedOnSingleFieldDefinition()": [
        105,
        110
      ],
      "CronDefinitionTest::::testGetFieldDefinitions()": [
        112,
        119
      ],
      "CronDefinitionTest::::simpleEqualityTest()": [
        121,
        124
      ],
      "CronDefinitionTest::::parametersToTestIfEqual()": [
        161,
        231
      ],
      "CronDefinitionTest::::provideSimpleFieldDefinitions()": [
        241,
        243
      ],
      "CronDefinitionTest::::provideCronNicknameSetWithTwoNicknames()": [
        245,
        249
      ],
      "CronDefinitionTest::::provideCronNicknameSetWithOneNickname()": [
        251,
        255
      ],
      "CronDefinitionTest::::provideCronConstraintSetWithTwoConstraints()": [
        257,
        261
      ],
      "CronDefinitionTest::::provideCronConstraintSetWithOneConstraint()": [
        263,
        267
      ]
    },
    "reverse_method_lines_dic": {
      "64": "CronDefinition::::isMatchDayOfWeekAndDayOfMonth()",
      "65": "CronDefinition::::isMatchDayOfWeekAndDayOfMonth()",
      "66": "CronDefinition::::isMatchDayOfWeekAndDayOfMonth()",
      "73": "CronDefinition::::getFieldDefinitions()",
      "74": "CronDefinition::::getFieldDefinitions()",
      "75": "CronDefinition::::getFieldDefinitions()",
      "82": "CronDefinition::::retrieveFieldDefinitionsAsMap()",
      "83": "CronDefinition::::retrieveFieldDefinitionsAsMap()",
      "84": "CronDefinition::::retrieveFieldDefinitionsAsMap()",
      "92": "CronDefinition::::getFieldDefinition(com.cronutils.model.field.CronFieldName)",
      "93": "CronDefinition::::getFieldDefinition(com.cronutils.model.field.CronFieldName)",
      "94": "CronDefinition::::getFieldDefinition(com.cronutils.model.field.CronFieldName)",
      "102": "CronDefinition::::containsFieldDefinition(com.cronutils.model.field.CronFieldName)",
      "103": "CronDefinition::::containsFieldDefinition(com.cronutils.model.field.CronFieldName)",
      "104": "CronDefinition::::containsFieldDefinition(com.cronutils.model.field.CronFieldName)",
      "106": "CronDefinition::::getCronConstraints()",
      "107": "CronDefinition::::getCronConstraints()",
      "108": "CronDefinition::::getCronConstraints()",
      "110": "CronDefinition::::getCronNicknames()",
      "111": "CronDefinition::::getCronNicknames()",
      "112": "CronDefinition::::getCronNicknames()",
      "114": "CronDefinition::::equals(java.lang.Object)",
      "115": "CronDefinition::::equals(java.lang.Object)",
      "116": "CronDefinition::::equals(java.lang.Object)",
      "117": "CronDefinition::::equals(java.lang.Object)",
      "118": "CronDefinition::::equals(java.lang.Object)",
      "119": "CronDefinition::::equals(java.lang.Object)",
      "120": "CronDefinition::::equals(java.lang.Object)",
      "121": "CronDefinition::::equals(java.lang.Object)",
      "122": "CronDefinition::::equals(java.lang.Object)",
      "123": "CronDefinition::::equals(java.lang.Object)",
      "124": "CronDefinition::::equals(java.lang.Object)",
      "125": "CronDefinition::::equals(java.lang.Object)",
      "126": "CronDefinition::::equals(java.lang.Object)",
      "127": "CronDefinition::::equals(java.lang.Object)",
      "129": "CronDefinition::::hashCode()",
      "130": "CronDefinition::::hashCode()",
      "131": "CronDefinition::::hashCode()",
      "132": "CronDefinition::::hashCode()",
      "133": "CronDefinition::::hashCode()"
    },
    "test_reverse_method_lines_dic": {
      "48": "CronDefinitionTest::::setUp()",
      "49": "CronDefinitionTest::::setUp()",
      "50": "CronDefinitionTest::::setUp()",
      "51": "CronDefinitionTest::::setUp()",
      "52": "CronDefinitionTest::::setUp()",
      "53": "CronDefinitionTest::::setUp()",
      "54": "CronDefinitionTest::::setUp()",
      "55": "CronDefinitionTest::::setUp()",
      "56": "CronDefinitionTest::::setUp()",
      "57": "CronDefinitionTest::::setUp()",
      "58": "CronDefinitionTest::::setUp()",
      "59": "CronDefinitionTest::::setUp()",
      "60": "CronDefinitionTest::::setUp()",
      "62": "CronDefinitionTest::::testConstructorNullFieldsParameter()",
      "63": "CronDefinitionTest::::testConstructorNullFieldsParameter()",
      "64": "CronDefinitionTest::::testConstructorNullFieldsParameter()",
      "65": "CronDefinitionTest::::testConstructorNullFieldsParameter()",
      "67": "CronDefinitionTest::::testConstructorNullConstraintsParameter()",
      "68": "CronDefinitionTest::::testConstructorNullConstraintsParameter()",
      "69": "CronDefinitionTest::::testConstructorNullConstraintsParameter()",
      "70": "CronDefinitionTest::::testConstructorNullConstraintsParameter()",
      "72": "CronDefinitionTest::::testConstructorNullCronNicknamesParameter()",
      "73": "CronDefinitionTest::::testConstructorNullCronNicknamesParameter()",
      "74": "CronDefinitionTest::::testConstructorNullCronNicknamesParameter()",
      "75": "CronDefinitionTest::::testConstructorNullCronNicknamesParameter()",
      "77": "CronDefinitionTest::::testConstructorEmptyFieldsParameter()",
      "78": "CronDefinitionTest::::testConstructorEmptyFieldsParameter()",
      "79": "CronDefinitionTest::::testConstructorEmptyFieldsParameter()",
      "80": "CronDefinitionTest::::testConstructorEmptyFieldsParameter()",
      "82": "CronDefinitionTest::::testLastFieldOptionalTrueWhenSet()",
      "83": "CronDefinitionTest::::testLastFieldOptionalTrueWhenSet()",
      "84": "CronDefinitionTest::::testLastFieldOptionalTrueWhenSet()",
      "85": "CronDefinitionTest::::testLastFieldOptionalTrueWhenSet()",
      "86": "CronDefinitionTest::::testLastFieldOptionalTrueWhenSet()",
      "87": "CronDefinitionTest::::testLastFieldOptionalTrueWhenSet()",
      "88": "CronDefinitionTest::::testLastFieldOptionalTrueWhenSet()",
      "89": "CronDefinitionTest::::testLastFieldOptionalTrueWhenSet()",
      "90": "CronDefinitionTest::::testLastFieldOptionalTrueWhenSet()",
      "92": "CronDefinitionTest::::provideFieldDefinitionListWithOptionalDefinition()",
      "93": "CronDefinitionTest::::provideFieldDefinitionListWithOptionalDefinition()",
      "94": "CronDefinitionTest::::provideFieldDefinitionListWithOptionalDefinition()",
      "95": "CronDefinitionTest::::provideFieldDefinitionListWithOptionalDefinition()",
      "96": "CronDefinitionTest::::provideFieldDefinitionListWithOptionalDefinition()",
      "97": "CronDefinitionTest::::provideFieldDefinitionListWithOptionalDefinition()",
      "99": "CronDefinitionTest::::provideFieldDefinitionListWithSingleDefinition()",
      "100": "CronDefinitionTest::::provideFieldDefinitionListWithSingleDefinition()",
      "101": "CronDefinitionTest::::provideFieldDefinitionListWithSingleDefinition()",
      "102": "CronDefinitionTest::::provideFieldDefinitionListWithSingleDefinition()",
      "103": "CronDefinitionTest::::provideFieldDefinitionListWithSingleDefinition()",
      "105": "CronDefinitionTest::::testLastFieldOptionalNotAllowedOnSingleFieldDefinition()",
      "106": "CronDefinitionTest::::testLastFieldOptionalNotAllowedOnSingleFieldDefinition()",
      "107": "CronDefinitionTest::::testLastFieldOptionalNotAllowedOnSingleFieldDefinition()",
      "108": "CronDefinitionTest::::testLastFieldOptionalNotAllowedOnSingleFieldDefinition()",
      "109": "CronDefinitionTest::::testLastFieldOptionalNotAllowedOnSingleFieldDefinition()",
      "110": "CronDefinitionTest::::testLastFieldOptionalNotAllowedOnSingleFieldDefinition()",
      "112": "CronDefinitionTest::::testGetFieldDefinitions()",
      "113": "CronDefinitionTest::::testGetFieldDefinitions()",
      "114": "CronDefinitionTest::::testGetFieldDefinitions()",
      "115": "CronDefinitionTest::::testGetFieldDefinitions()",
      "116": "CronDefinitionTest::::testGetFieldDefinitions()",
      "117": "CronDefinitionTest::::testGetFieldDefinitions()",
      "118": "CronDefinitionTest::::testGetFieldDefinitions()",
      "119": "CronDefinitionTest::::testGetFieldDefinitions()",
      "121": "CronDefinitionTest::::simpleEqualityTest()",
      "122": "CronDefinitionTest::::simpleEqualityTest()",
      "123": "CronDefinitionTest::::simpleEqualityTest()",
      "124": "CronDefinitionTest::::simpleEqualityTest()",
      "161": "CronDefinitionTest::::parametersToTestIfEqual()",
      "162": "CronDefinitionTest::::parametersToTestIfEqual()",
      "163": "CronDefinitionTest::::parametersToTestIfEqual()",
      "164": "CronDefinitionTest::::parametersToTestIfEqual()",
      "165": "CronDefinitionTest::::parametersToTestIfEqual()",
      "166": "CronDefinitionTest::::parametersToTestIfEqual()",
      "167": "CronDefinitionTest::::parametersToTestIfEqual()",
      "168": "CronDefinitionTest::::parametersToTestIfEqual()",
      "169": "CronDefinitionTest::::parametersToTestIfEqual()",
      "170": "CronDefinitionTest::::parametersToTestIfEqual()",
      "171": "CronDefinitionTest::::parametersToTestIfEqual()",
      "172": "CronDefinitionTest::::parametersToTestIfEqual()",
      "173": "CronDefinitionTest::::parametersToTestIfEqual()",
      "174": "CronDefinitionTest::::parametersToTestIfEqual()",
      "175": "CronDefinitionTest::::parametersToTestIfEqual()",
      "176": "CronDefinitionTest::::parametersToTestIfEqual()",
      "177": "CronDefinitionTest::::parametersToTestIfEqual()",
      "178": "CronDefinitionTest::::parametersToTestIfEqual()",
      "179": "CronDefinitionTest::::parametersToTestIfEqual()",
      "180": "CronDefinitionTest::::parametersToTestIfEqual()",
      "181": "CronDefinitionTest::::parametersToTestIfEqual()",
      "182": "CronDefinitionTest::::parametersToTestIfEqual()",
      "183": "CronDefinitionTest::::parametersToTestIfEqual()",
      "184": "CronDefinitionTest::::parametersToTestIfEqual()",
      "185": "CronDefinitionTest::::parametersToTestIfEqual()",
      "186": "CronDefinitionTest::::parametersToTestIfEqual()",
      "187": "CronDefinitionTest::::parametersToTestIfEqual()",
      "188": "CronDefinitionTest::::parametersToTestIfEqual()",
      "189": "CronDefinitionTest::::parametersToTestIfEqual()",
      "190": "CronDefinitionTest::::parametersToTestIfEqual()",
      "191": "CronDefinitionTest::::parametersToTestIfEqual()",
      "192": "CronDefinitionTest::::parametersToTestIfEqual()",
      "193": "CronDefinitionTest::::parametersToTestIfEqual()",
      "194": "CronDefinitionTest::::parametersToTestIfEqual()",
      "195": "CronDefinitionTest::::parametersToTestIfEqual()",
      "196": "CronDefinitionTest::::parametersToTestIfEqual()",
      "197": "CronDefinitionTest::::parametersToTestIfEqual()",
      "198": "CronDefinitionTest::::parametersToTestIfEqual()",
      "199": "CronDefinitionTest::::parametersToTestIfEqual()",
      "200": "CronDefinitionTest::::parametersToTestIfEqual()",
      "201": "CronDefinitionTest::::parametersToTestIfEqual()",
      "202": "CronDefinitionTest::::parametersToTestIfEqual()",
      "203": "CronDefinitionTest::::parametersToTestIfEqual()",
      "204": "CronDefinitionTest::::parametersToTestIfEqual()",
      "205": "CronDefinitionTest::::parametersToTestIfEqual()",
      "206": "CronDefinitionTest::::parametersToTestIfEqual()",
      "207": "CronDefinitionTest::::parametersToTestIfEqual()",
      "208": "CronDefinitionTest::::parametersToTestIfEqual()",
      "209": "CronDefinitionTest::::parametersToTestIfEqual()",
      "210": "CronDefinitionTest::::parametersToTestIfEqual()",
      "211": "CronDefinitionTest::::parametersToTestIfEqual()",
      "212": "CronDefinitionTest::::parametersToTestIfEqual()",
      "213": "CronDefinitionTest::::parametersToTestIfEqual()",
      "214": "CronDefinitionTest::::parametersToTestIfEqual()",
      "215": "CronDefinitionTest::::parametersToTestIfEqual()",
      "216": "CronDefinitionTest::::parametersToTestIfEqual()",
      "217": "CronDefinitionTest::::parametersToTestIfEqual()",
      "218": "CronDefinitionTest::::parametersToTestIfEqual()",
      "219": "CronDefinitionTest::::parametersToTestIfEqual()",
      "220": "CronDefinitionTest::::parametersToTestIfEqual()",
      "221": "CronDefinitionTest::::parametersToTestIfEqual()",
      "222": "CronDefinitionTest::::parametersToTestIfEqual()",
      "223": "CronDefinitionTest::::parametersToTestIfEqual()",
      "224": "CronDefinitionTest::::parametersToTestIfEqual()",
      "225": "CronDefinitionTest::::parametersToTestIfEqual()",
      "226": "CronDefinitionTest::::parametersToTestIfEqual()",
      "227": "CronDefinitionTest::::parametersToTestIfEqual()",
      "228": "CronDefinitionTest::::parametersToTestIfEqual()",
      "229": "CronDefinitionTest::::parametersToTestIfEqual()",
      "230": "CronDefinitionTest::::parametersToTestIfEqual()",
      "231": "CronDefinitionTest::::parametersToTestIfEqual()",
      "241": "CronDefinitionTest::::provideSimpleFieldDefinitions()",
      "242": "CronDefinitionTest::::provideSimpleFieldDefinitions()",
      "243": "CronDefinitionTest::::provideSimpleFieldDefinitions()",
      "245": "CronDefinitionTest::::provideCronNicknameSetWithTwoNicknames()",
      "246": "CronDefinitionTest::::provideCronNicknameSetWithTwoNicknames()",
      "247": "CronDefinitionTest::::provideCronNicknameSetWithTwoNicknames()",
      "248": "CronDefinitionTest::::provideCronNicknameSetWithTwoNicknames()",
      "249": "CronDefinitionTest::::provideCronNicknameSetWithTwoNicknames()",
      "251": "CronDefinitionTest::::provideCronNicknameSetWithOneNickname()",
      "252": "CronDefinitionTest::::provideCronNicknameSetWithOneNickname()",
      "253": "CronDefinitionTest::::provideCronNicknameSetWithOneNickname()",
      "254": "CronDefinitionTest::::provideCronNicknameSetWithOneNickname()",
      "255": "CronDefinitionTest::::provideCronNicknameSetWithOneNickname()",
      "257": "CronDefinitionTest::::provideCronConstraintSetWithTwoConstraints()",
      "258": "CronDefinitionTest::::provideCronConstraintSetWithTwoConstraints()",
      "259": "CronDefinitionTest::::provideCronConstraintSetWithTwoConstraints()",
      "260": "CronDefinitionTest::::provideCronConstraintSetWithTwoConstraints()",
      "261": "CronDefinitionTest::::provideCronConstraintSetWithTwoConstraints()",
      "263": "CronDefinitionTest::::provideCronConstraintSetWithOneConstraint()",
      "264": "CronDefinitionTest::::provideCronConstraintSetWithOneConstraint()",
      "265": "CronDefinitionTest::::provideCronConstraintSetWithOneConstraint()",
      "266": "CronDefinitionTest::::provideCronConstraintSetWithOneConstraint()",
      "267": "CronDefinitionTest::::provideCronConstraintSetWithOneConstraint()"
    },
    "tests": [
      {
        "test_lines": [
          62,
          65
        ],
        "covered_lines": [
          42,
          43,
          44
        ]
      },
      {
        "test_lines": [
          67,
          70
        ],
        "covered_lines": [
          42,
          43,
          44,
          45
        ]
      },
      {
        "test_lines": [
          72,
          75
        ],
        "covered_lines": [
          42
        ]
      },
      {
        "test_lines": [
          77,
          80
        ],
        "covered_lines": [
          42,
          43,
          44,
          45,
          46
        ]
      },
      {
        "test_lines": [
          82,
          90
        ],
        "covered_lines": [
          42,
          43,
          44,
          45,
          46,
          47,
          48,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          74
        ]
      },
      {
        "test_lines": [
          105,
          110
        ],
        "covered_lines": [
          42,
          43,
          44,
          45,
          46,
          47,
          48
        ]
      },
      {
        "test_lines": [
          112,
          119
        ],
        "covered_lines": [
          42,
          43,
          44,
          45,
          46,
          47,
          48,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          74
        ]
      },
      {
        "test_lines": [
          121,
          124
        ],
        "covered_lines": [
          42,
          43,
          44,
          45,
          46,
          47,
          48,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          116,
          119,
          122,
          123,
          124,
          125,
          126
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/cron-utils/src/main/java/com/cronutils/model/time/NearestValue.java": {
    "class_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.time;\n",
      "\n",
      "class NearestValue {\n",
      "    private final int shifts;\n",
      "    private final int value;\n",
      "\n",
      "    public NearestValue(final int value, final int shifts) {\n",
      "        this.shifts = shifts;\n",
      "        this.value = value;\n",
      "    }\n",
      "\n",
      "    public int getValue() {\n",
      "        return value;\n",
      "    }\n",
      "\n",
      "    public int getShifts() {\n",
      "        return shifts;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.time;\n",
      "\n",
      "import org.junit.jupiter.api.BeforeEach;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.assertEquals;\n",
      "\n",
      "public class NearestValueTest {\n",
      "    private int value;\n",
      "    private int shifts;\n",
      "\n",
      "    private NearestValue nearestValue;\n",
      "\n",
      "    @BeforeEach\n",
      "    public void setUp() {\n",
      "        value = 1;\n",
      "        shifts = 1;\n",
      "        nearestValue = new NearestValue(value, shifts);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGetValue() {\n",
      "        assertEquals(value, nearestValue.getValue());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGetShifts() {\n",
      "        assertEquals(shifts, nearestValue.getShifts());\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "NearestValue::::getValue()": [
        25,
        27
      ],
      "NearestValue::::getShifts()": [
        29,
        31
      ]
    },
    "test_method_lines_dic": {
      "NearestValueTest::::setUp()": [
        27,
        32
      ],
      "NearestValueTest::::testGetValue()": [
        34,
        37
      ],
      "NearestValueTest::::testGetShifts()": [
        39,
        42
      ]
    },
    "reverse_method_lines_dic": {
      "25": "NearestValue::::getValue()",
      "26": "NearestValue::::getValue()",
      "27": "NearestValue::::getValue()",
      "29": "NearestValue::::getShifts()",
      "30": "NearestValue::::getShifts()",
      "31": "NearestValue::::getShifts()"
    },
    "test_reverse_method_lines_dic": {
      "27": "NearestValueTest::::setUp()",
      "28": "NearestValueTest::::setUp()",
      "29": "NearestValueTest::::setUp()",
      "30": "NearestValueTest::::setUp()",
      "31": "NearestValueTest::::setUp()",
      "32": "NearestValueTest::::setUp()",
      "34": "NearestValueTest::::testGetValue()",
      "35": "NearestValueTest::::testGetValue()",
      "36": "NearestValueTest::::testGetValue()",
      "37": "NearestValueTest::::testGetValue()",
      "39": "NearestValueTest::::testGetShifts()",
      "40": "NearestValueTest::::testGetShifts()",
      "41": "NearestValueTest::::testGetShifts()",
      "42": "NearestValueTest::::testGetShifts()"
    },
    "tests": [
      {
        "test_lines": [
          34,
          37
        ],
        "covered_lines": [
          20,
          21,
          22,
          23,
          26
        ]
      },
      {
        "test_lines": [
          39,
          42
        ],
        "covered_lines": [
          20,
          21,
          22,
          23,
          30
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/cron-utils/src/main/java/com/cronutils/model/time/TimeNode.java": {
    "class_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.time;\n",
      "\n",
      "import com.cronutils.utils.Preconditions;\n",
      "import com.cronutils.utils.VisibleForTesting;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.Collections;\n",
      "import java.util.List;\n",
      "import java.util.concurrent.atomic.AtomicInteger;\n",
      "\n",
      "class TimeNode {\n",
      "    protected List<Integer> values;\n",
      "\n",
      "    public TimeNode(final List<Integer> values) {\n",
      "        this.values = Preconditions.checkNotNullNorEmpty(values, \"Values must not be empty\");\n",
      "        Collections.sort(this.values);\n",
      "    }\n",
      "\n",
      "    public NearestValue getNextValue(final int reference, final int shifts) {\n",
      "        return getNearestForwardValue(reference, shifts);\n",
      "    }\n",
      "\n",
      "    public List<Integer> getValues() {\n",
      "        return Collections.unmodifiableList(values);\n",
      "    }\n",
      "\n",
      "    public NearestValue getPreviousValue(final int reference, final int shifts) {\n",
      "        return getNearestBackwardValue(reference, shifts);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * We return same reference value if matches or next one if does not match.\n",
      "     * Then we start applying shifts.\n",
      "     * This way we ensure same value is returned if no shift is requested.\n",
      "     *\n",
      "     * @param reference     - reference value\n",
      "     * @param shiftsToApply - shifts to apply\n",
      "     * @return NearestValue instance, never null. Holds information on nearest (forward) value and shifts performed.\n",
      "     */\n",
      "    @VisibleForTesting\n",
      "    NearestValue getNearestForwardValue(final int reference, int shiftsToApply) {\n",
      "        final List<Integer> temporaryValues = new ArrayList<>(this.values);\n",
      "        int index = 0;\n",
      "        boolean foundGreater = false;\n",
      "        final AtomicInteger shift = new AtomicInteger(0);\n",
      "        if (!temporaryValues.contains(reference)) {\n",
      "            for (final Integer value : temporaryValues) {\n",
      "                if (value > reference) {\n",
      "                    index = temporaryValues.indexOf(value);\n",
      "                    shiftsToApply--;//we just moved a position!\n",
      "                    foundGreater = true;\n",
      "                    break;\n",
      "                }\n",
      "            }\n",
      "            if (!foundGreater) {\n",
      "                shift.incrementAndGet();\n",
      "            }\n",
      "        } else {\n",
      "            index = temporaryValues.indexOf(reference);\n",
      "        }\n",
      "        int value = temporaryValues.get(index);\n",
      "        for (int j = 0; j < shiftsToApply; j++) {\n",
      "            value = getValueFromList(temporaryValues, index + 1, shift);\n",
      "            index = temporaryValues.indexOf(value);\n",
      "        }\n",
      "        return new NearestValue(value, shift.get());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * We return same reference value if matches or previous one if does not match.\n",
      "     * Then we start applying shifts.\n",
      "     * This way we ensure same value is returned if no shift is requested.\n",
      "     *\n",
      "     * @param reference     - reference value\n",
      "     * @param shiftsToApply - shifts to apply\n",
      "     * @return NearestValue instance, never null. Holds information on nearest (backward) value and shifts performed.\n",
      "     */\n",
      "    @VisibleForTesting\n",
      "    NearestValue getNearestBackwardValue(final int reference, int shiftsToApply) {\n",
      "        final List<Integer> temporaryValues = new ArrayList<>(this.values);\n",
      "        Collections.reverse(temporaryValues);\n",
      "        int index = 0;\n",
      "        boolean foundSmaller = false;\n",
      "        final AtomicInteger shift = new AtomicInteger(0);\n",
      "        if (!temporaryValues.contains(reference)) {\n",
      "            for (final Integer value : temporaryValues) {\n",
      "                if (value < reference) {\n",
      "                    index = temporaryValues.indexOf(value);\n",
      "                    shiftsToApply--;//we just moved a position!\n",
      "                    foundSmaller = true;\n",
      "                    break;\n",
      "                }\n",
      "            }\n",
      "            if (!foundSmaller) {\n",
      "                shift.incrementAndGet();\n",
      "            }\n",
      "        } else {\n",
      "            index = temporaryValues.indexOf(reference);\n",
      "        }\n",
      "        int value = temporaryValues.get(index);\n",
      "        for (int j = 0; j < shiftsToApply; j++) {\n",
      "            value = getValueFromList(temporaryValues, index + 1, shift);\n",
      "            index = temporaryValues.indexOf(value);\n",
      "        }\n",
      "        return new NearestValue(value, shift.get());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Obtain value from list considering specified index and required shifts.\n",
      "     *\n",
      "     * @param values - possible values\n",
      "     * @param index  - index to be considered\n",
      "     * @param shift  - shifts that should be applied\n",
      "     * @return int - required value from values list\n",
      "     */\n",
      "    @VisibleForTesting\n",
      "    int getValueFromList(final List<Integer> values, int index, final AtomicInteger shift) {\n",
      "        Preconditions.checkNotNullNorEmpty(values, \"List must not be empty\");\n",
      "        if (index < 0) {\n",
      "            index = index + values.size();\n",
      "            shift.incrementAndGet();\n",
      "            return getValueFromList(values, index, shift);\n",
      "        }\n",
      "        if (index >= values.size()) {\n",
      "            index = index - values.size();\n",
      "            shift.incrementAndGet();\n",
      "            return getValueFromList(values, index, shift);\n",
      "        }\n",
      "        return values.get(index);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.time;\n",
      "\n",
      "import org.junit.jupiter.api.BeforeEach;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.Arrays;\n",
      "import java.util.List;\n",
      "import java.util.concurrent.atomic.AtomicInteger;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.assertEquals;\n",
      "import static org.junit.jupiter.api.Assertions.assertThrows;\n",
      "\n",
      "public class TimeNodeTest {\n",
      "    private static final int LIST_START_VALUE = 2;\n",
      "    private static final int LIST_MEDIUM_VALUE = 4;\n",
      "    private static final int LIST_END_VALUE = 6;\n",
      "    private static final int LOW_INTERMEDIATE_VALUE = 1;\n",
      "    private static final int HIGH_INTERMEDIATE_VALUE = 5;\n",
      "    private List<Integer> values;\n",
      "    private TimeNode timeNode;\n",
      "\n",
      "    @BeforeEach\n",
      "    public void setUp() {\n",
      "        values = new ArrayList<>();\n",
      "        values.add(LIST_START_VALUE);\n",
      "        values.add(LIST_MEDIUM_VALUE);\n",
      "        values.add(LIST_END_VALUE);\n",
      "        timeNode = new TimeNode(values);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGetNextValue() {\n",
      "        assertResult(LIST_START_VALUE, 0, timeNode.getNextValue(LIST_START_VALUE, 0));\n",
      "        assertResult(LIST_MEDIUM_VALUE, 0, timeNode.getNextValue(LIST_MEDIUM_VALUE, 0));\n",
      "        assertResult(LIST_END_VALUE, 0, timeNode.getNextValue(LIST_END_VALUE, 0));\n",
      "\n",
      "        assertResult(LIST_MEDIUM_VALUE, 0, timeNode.getNextValue(LIST_START_VALUE, 1));\n",
      "        assertResult(LIST_END_VALUE, 0, timeNode.getNextValue(LIST_MEDIUM_VALUE, 1));\n",
      "        assertResult(LIST_START_VALUE, 1, timeNode.getNextValue(LIST_END_VALUE, 1));\n",
      "\n",
      "        assertResult(LIST_START_VALUE, 1, timeNode.getNextValue(LIST_MEDIUM_VALUE, 2));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGetValues() {\n",
      "        assertEquals(values, timeNode.getValues());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGetPreviousValue() {\n",
      "        assertResult(LIST_START_VALUE, 0, timeNode.getPreviousValue(LIST_START_VALUE, 0));\n",
      "        assertResult(LIST_MEDIUM_VALUE, 0, timeNode.getPreviousValue(LIST_MEDIUM_VALUE, 0));\n",
      "        assertResult(LIST_END_VALUE, 0, timeNode.getPreviousValue(LIST_END_VALUE, 0));\n",
      "\n",
      "        assertResult(LIST_END_VALUE, 1, timeNode.getPreviousValue(LIST_START_VALUE, 1));\n",
      "        assertResult(LIST_START_VALUE, 0, timeNode.getPreviousValue(LIST_MEDIUM_VALUE, 1));\n",
      "        assertResult(LIST_MEDIUM_VALUE, 0, timeNode.getPreviousValue(LIST_END_VALUE, 1));\n",
      "\n",
      "        assertResult(LIST_END_VALUE, 1, timeNode.getPreviousValue(LIST_MEDIUM_VALUE, 2));\n",
      "\n",
      "        assertResult(LIST_MEDIUM_VALUE, 0, timeNode.getPreviousValue(HIGH_INTERMEDIATE_VALUE, 1));\n",
      "        assertResult(LIST_END_VALUE, 1, timeNode.getPreviousValue(LOW_INTERMEDIATE_VALUE, 0));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGetValueFromListWhereIndexLessThanZero() {\n",
      "        final int index = -1;\n",
      "        final int expectedShifts = 1;\n",
      "        final AtomicInteger shift = new AtomicInteger(0);\n",
      "        final List<Integer> list = Arrays.asList(1, 2, 3, 4);\n",
      "        final int value = timeNode.getValueFromList(list, index, shift);\n",
      "        assertEquals(expectedShifts, shift.get(), String.format(\"Shift was: %s; expected: %s\", shift.get(), expectedShifts));\n",
      "        assertEquals((int) list.get(list.size() + index), value);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGetValueFromListWhereIndexMoreThanZero() {\n",
      "        final int index = 1;\n",
      "        final int expectedShifts = 0;\n",
      "        final AtomicInteger shift = new AtomicInteger(0);\n",
      "        final List<Integer> list = Arrays.asList(1, 2, 3, 4);\n",
      "        final int value = timeNode.getValueFromList(list, index, shift);\n",
      "        assertEquals(expectedShifts, shift.get(), String.format(\"Shift was: %s; expected: %s\", shift.get(), expectedShifts));\n",
      "        assertEquals((int) list.get(index), value);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGetValueFromListWithEmptyList() {\n",
      "        assertThrows(IllegalArgumentException.class, () -> timeNode.getValueFromList(new ArrayList<>(), 0, new AtomicInteger(0)));\n",
      "    }\n",
      "\n",
      "    private void assertResult(final int value, final int shift, final NearestValue nearestValue) {\n",
      "        assertEquals(value, nearestValue.getValue(), String.format(\"Values do not match! Expected: %s Found: %s\", value, nearestValue.getValue()));\n",
      "        assertEquals(shift, nearestValue.getShifts(), String.format(\"Shifts do not match! Expected: %s Found: %s\", shift, nearestValue.getShifts()));\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "TimeNode::::getNextValue(int,int)": [
        32,
        34
      ],
      "TimeNode::::getValues()": [
        36,
        38
      ],
      "TimeNode::::getPreviousValue(int,int)": [
        40,
        42
      ],
      "TimeNode::::getNearestForwardValue(int,int)": [
        53,
        80
      ],
      "TimeNode::::getNearestBackwardValue(int,int)": [
        91,
        119
      ],
      "TimeNode::::getValueFromList(java.util.List<java.lang.Integer>,int,java.util.concurrent.atomic.AtomicInteger)": [
        129,
        143
      ]
    },
    "test_method_lines_dic": {
      "TimeNodeTest::::setUp()": [
        36,
        43
      ],
      "TimeNodeTest::::testGetNextValue()": [
        45,
        56
      ],
      "TimeNodeTest::::testGetValues()": [
        58,
        61
      ],
      "TimeNodeTest::::testGetPreviousValue()": [
        63,
        77
      ],
      "TimeNodeTest::::testGetValueFromListWhereIndexLessThanZero()": [
        79,
        88
      ],
      "TimeNodeTest::::testGetValueFromListWhereIndexMoreThanZero()": [
        90,
        99
      ],
      "TimeNodeTest::::testGetValueFromListWithEmptyList()": [
        101,
        104
      ]
    },
    "reverse_method_lines_dic": {
      "32": "TimeNode::::getNextValue(int,int)",
      "33": "TimeNode::::getNextValue(int,int)",
      "34": "TimeNode::::getNextValue(int,int)",
      "36": "TimeNode::::getValues()",
      "37": "TimeNode::::getValues()",
      "38": "TimeNode::::getValues()",
      "40": "TimeNode::::getPreviousValue(int,int)",
      "41": "TimeNode::::getPreviousValue(int,int)",
      "42": "TimeNode::::getPreviousValue(int,int)",
      "53": "TimeNode::::getNearestForwardValue(int,int)",
      "54": "TimeNode::::getNearestForwardValue(int,int)",
      "55": "TimeNode::::getNearestForwardValue(int,int)",
      "56": "TimeNode::::getNearestForwardValue(int,int)",
      "57": "TimeNode::::getNearestForwardValue(int,int)",
      "58": "TimeNode::::getNearestForwardValue(int,int)",
      "59": "TimeNode::::getNearestForwardValue(int,int)",
      "60": "TimeNode::::getNearestForwardValue(int,int)",
      "61": "TimeNode::::getNearestForwardValue(int,int)",
      "62": "TimeNode::::getNearestForwardValue(int,int)",
      "63": "TimeNode::::getNearestForwardValue(int,int)",
      "64": "TimeNode::::getNearestForwardValue(int,int)",
      "65": "TimeNode::::getNearestForwardValue(int,int)",
      "66": "TimeNode::::getNearestForwardValue(int,int)",
      "67": "TimeNode::::getNearestForwardValue(int,int)",
      "68": "TimeNode::::getNearestForwardValue(int,int)",
      "69": "TimeNode::::getNearestForwardValue(int,int)",
      "70": "TimeNode::::getNearestForwardValue(int,int)",
      "71": "TimeNode::::getNearestForwardValue(int,int)",
      "72": "TimeNode::::getNearestForwardValue(int,int)",
      "73": "TimeNode::::getNearestForwardValue(int,int)",
      "74": "TimeNode::::getNearestForwardValue(int,int)",
      "75": "TimeNode::::getNearestForwardValue(int,int)",
      "76": "TimeNode::::getNearestForwardValue(int,int)",
      "77": "TimeNode::::getNearestForwardValue(int,int)",
      "78": "TimeNode::::getNearestForwardValue(int,int)",
      "79": "TimeNode::::getNearestForwardValue(int,int)",
      "80": "TimeNode::::getNearestForwardValue(int,int)",
      "91": "TimeNode::::getNearestBackwardValue(int,int)",
      "92": "TimeNode::::getNearestBackwardValue(int,int)",
      "93": "TimeNode::::getNearestBackwardValue(int,int)",
      "94": "TimeNode::::getNearestBackwardValue(int,int)",
      "95": "TimeNode::::getNearestBackwardValue(int,int)",
      "96": "TimeNode::::getNearestBackwardValue(int,int)",
      "97": "TimeNode::::getNearestBackwardValue(int,int)",
      "98": "TimeNode::::getNearestBackwardValue(int,int)",
      "99": "TimeNode::::getNearestBackwardValue(int,int)",
      "100": "TimeNode::::getNearestBackwardValue(int,int)",
      "101": "TimeNode::::getNearestBackwardValue(int,int)",
      "102": "TimeNode::::getNearestBackwardValue(int,int)",
      "103": "TimeNode::::getNearestBackwardValue(int,int)",
      "104": "TimeNode::::getNearestBackwardValue(int,int)",
      "105": "TimeNode::::getNearestBackwardValue(int,int)",
      "106": "TimeNode::::getNearestBackwardValue(int,int)",
      "107": "TimeNode::::getNearestBackwardValue(int,int)",
      "108": "TimeNode::::getNearestBackwardValue(int,int)",
      "109": "TimeNode::::getNearestBackwardValue(int,int)",
      "110": "TimeNode::::getNearestBackwardValue(int,int)",
      "111": "TimeNode::::getNearestBackwardValue(int,int)",
      "112": "TimeNode::::getNearestBackwardValue(int,int)",
      "113": "TimeNode::::getNearestBackwardValue(int,int)",
      "114": "TimeNode::::getNearestBackwardValue(int,int)",
      "115": "TimeNode::::getNearestBackwardValue(int,int)",
      "116": "TimeNode::::getNearestBackwardValue(int,int)",
      "117": "TimeNode::::getNearestBackwardValue(int,int)",
      "118": "TimeNode::::getNearestBackwardValue(int,int)",
      "119": "TimeNode::::getNearestBackwardValue(int,int)",
      "129": "TimeNode::::getValueFromList(java.util.List<java.lang.Integer>,int,java.util.concurrent.atomic.AtomicInteger)",
      "130": "TimeNode::::getValueFromList(java.util.List<java.lang.Integer>,int,java.util.concurrent.atomic.AtomicInteger)",
      "131": "TimeNode::::getValueFromList(java.util.List<java.lang.Integer>,int,java.util.concurrent.atomic.AtomicInteger)",
      "132": "TimeNode::::getValueFromList(java.util.List<java.lang.Integer>,int,java.util.concurrent.atomic.AtomicInteger)",
      "133": "TimeNode::::getValueFromList(java.util.List<java.lang.Integer>,int,java.util.concurrent.atomic.AtomicInteger)",
      "134": "TimeNode::::getValueFromList(java.util.List<java.lang.Integer>,int,java.util.concurrent.atomic.AtomicInteger)",
      "135": "TimeNode::::getValueFromList(java.util.List<java.lang.Integer>,int,java.util.concurrent.atomic.AtomicInteger)",
      "136": "TimeNode::::getValueFromList(java.util.List<java.lang.Integer>,int,java.util.concurrent.atomic.AtomicInteger)",
      "137": "TimeNode::::getValueFromList(java.util.List<java.lang.Integer>,int,java.util.concurrent.atomic.AtomicInteger)",
      "138": "TimeNode::::getValueFromList(java.util.List<java.lang.Integer>,int,java.util.concurrent.atomic.AtomicInteger)",
      "139": "TimeNode::::getValueFromList(java.util.List<java.lang.Integer>,int,java.util.concurrent.atomic.AtomicInteger)",
      "140": "TimeNode::::getValueFromList(java.util.List<java.lang.Integer>,int,java.util.concurrent.atomic.AtomicInteger)",
      "141": "TimeNode::::getValueFromList(java.util.List<java.lang.Integer>,int,java.util.concurrent.atomic.AtomicInteger)",
      "142": "TimeNode::::getValueFromList(java.util.List<java.lang.Integer>,int,java.util.concurrent.atomic.AtomicInteger)",
      "143": "TimeNode::::getValueFromList(java.util.List<java.lang.Integer>,int,java.util.concurrent.atomic.AtomicInteger)"
    },
    "test_reverse_method_lines_dic": {
      "36": "TimeNodeTest::::setUp()",
      "37": "TimeNodeTest::::setUp()",
      "38": "TimeNodeTest::::setUp()",
      "39": "TimeNodeTest::::setUp()",
      "40": "TimeNodeTest::::setUp()",
      "41": "TimeNodeTest::::setUp()",
      "42": "TimeNodeTest::::setUp()",
      "43": "TimeNodeTest::::setUp()",
      "45": "TimeNodeTest::::testGetNextValue()",
      "46": "TimeNodeTest::::testGetNextValue()",
      "47": "TimeNodeTest::::testGetNextValue()",
      "48": "TimeNodeTest::::testGetNextValue()",
      "49": "TimeNodeTest::::testGetNextValue()",
      "50": "TimeNodeTest::::testGetNextValue()",
      "51": "TimeNodeTest::::testGetNextValue()",
      "52": "TimeNodeTest::::testGetNextValue()",
      "53": "TimeNodeTest::::testGetNextValue()",
      "54": "TimeNodeTest::::testGetNextValue()",
      "55": "TimeNodeTest::::testGetNextValue()",
      "56": "TimeNodeTest::::testGetNextValue()",
      "58": "TimeNodeTest::::testGetValues()",
      "59": "TimeNodeTest::::testGetValues()",
      "60": "TimeNodeTest::::testGetValues()",
      "61": "TimeNodeTest::::testGetValues()",
      "63": "TimeNodeTest::::testGetPreviousValue()",
      "64": "TimeNodeTest::::testGetPreviousValue()",
      "65": "TimeNodeTest::::testGetPreviousValue()",
      "66": "TimeNodeTest::::testGetPreviousValue()",
      "67": "TimeNodeTest::::testGetPreviousValue()",
      "68": "TimeNodeTest::::testGetPreviousValue()",
      "69": "TimeNodeTest::::testGetPreviousValue()",
      "70": "TimeNodeTest::::testGetPreviousValue()",
      "71": "TimeNodeTest::::testGetPreviousValue()",
      "72": "TimeNodeTest::::testGetPreviousValue()",
      "73": "TimeNodeTest::::testGetPreviousValue()",
      "74": "TimeNodeTest::::testGetPreviousValue()",
      "75": "TimeNodeTest::::testGetPreviousValue()",
      "76": "TimeNodeTest::::testGetPreviousValue()",
      "77": "TimeNodeTest::::testGetPreviousValue()",
      "79": "TimeNodeTest::::testGetValueFromListWhereIndexLessThanZero()",
      "80": "TimeNodeTest::::testGetValueFromListWhereIndexLessThanZero()",
      "81": "TimeNodeTest::::testGetValueFromListWhereIndexLessThanZero()",
      "82": "TimeNodeTest::::testGetValueFromListWhereIndexLessThanZero()",
      "83": "TimeNodeTest::::testGetValueFromListWhereIndexLessThanZero()",
      "84": "TimeNodeTest::::testGetValueFromListWhereIndexLessThanZero()",
      "85": "TimeNodeTest::::testGetValueFromListWhereIndexLessThanZero()",
      "86": "TimeNodeTest::::testGetValueFromListWhereIndexLessThanZero()",
      "87": "TimeNodeTest::::testGetValueFromListWhereIndexLessThanZero()",
      "88": "TimeNodeTest::::testGetValueFromListWhereIndexLessThanZero()",
      "90": "TimeNodeTest::::testGetValueFromListWhereIndexMoreThanZero()",
      "91": "TimeNodeTest::::testGetValueFromListWhereIndexMoreThanZero()",
      "92": "TimeNodeTest::::testGetValueFromListWhereIndexMoreThanZero()",
      "93": "TimeNodeTest::::testGetValueFromListWhereIndexMoreThanZero()",
      "94": "TimeNodeTest::::testGetValueFromListWhereIndexMoreThanZero()",
      "95": "TimeNodeTest::::testGetValueFromListWhereIndexMoreThanZero()",
      "96": "TimeNodeTest::::testGetValueFromListWhereIndexMoreThanZero()",
      "97": "TimeNodeTest::::testGetValueFromListWhereIndexMoreThanZero()",
      "98": "TimeNodeTest::::testGetValueFromListWhereIndexMoreThanZero()",
      "99": "TimeNodeTest::::testGetValueFromListWhereIndexMoreThanZero()",
      "101": "TimeNodeTest::::testGetValueFromListWithEmptyList()",
      "102": "TimeNodeTest::::testGetValueFromListWithEmptyList()",
      "103": "TimeNodeTest::::testGetValueFromListWithEmptyList()",
      "104": "TimeNodeTest::::testGetValueFromListWithEmptyList()"
    },
    "tests": [
      {
        "test_lines": [
          45,
          56
        ],
        "covered_lines": [
          27,
          28,
          29,
          30,
          33,
          55,
          56,
          57,
          58,
          59,
          72,
          74,
          75,
          76,
          77,
          79,
          131,
          132,
          137,
          138,
          139,
          140,
          142
        ]
      },
      {
        "test_lines": [
          58,
          61
        ],
        "covered_lines": [
          27,
          28,
          29,
          30,
          37
        ]
      },
      {
        "test_lines": [
          63,
          77
        ],
        "covered_lines": [
          27,
          28,
          29,
          30,
          41,
          93,
          94,
          95,
          96,
          97,
          98,
          99,
          100,
          101,
          102,
          103,
          104,
          106,
          107,
          108,
          111,
          113,
          114,
          115,
          116,
          118,
          131,
          132,
          137,
          138,
          139,
          140,
          142
        ]
      },
      {
        "test_lines": [
          79,
          88
        ],
        "covered_lines": [
          27,
          28,
          29,
          30,
          131,
          132,
          133,
          134,
          135,
          137,
          142
        ]
      },
      {
        "test_lines": [
          90,
          99
        ],
        "covered_lines": [
          27,
          28,
          29,
          30,
          131,
          132,
          137,
          142
        ]
      },
      {
        "test_lines": [
          101,
          104
        ],
        "covered_lines": [
          27,
          28,
          29,
          30
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/cron-utils/src/main/java/com/cronutils/model/time/generator/EveryDayOfWeekValueGenerator.java": {
    "class_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.time.generator;\n",
      "\n",
      "import com.cronutils.mapper.ConstantsMapper;\n",
      "import com.cronutils.mapper.WeekDay;\n",
      "import com.cronutils.model.field.CronField;\n",
      "import com.cronutils.model.field.CronFieldName;\n",
      "import com.cronutils.model.field.expression.Every;\n",
      "import com.cronutils.utils.Preconditions;\n",
      "\n",
      "import java.time.DayOfWeek;\n",
      "import java.time.LocalDate;\n",
      "import java.util.ArrayList;\n",
      "import java.util.EnumSet;\n",
      "import java.util.List;\n",
      "import java.util.Set;\n",
      "\n",
      "/**\n",
      " * Generates matching days for a given year and month for a given day of week cron field with an every expression.\n",
      " */\n",
      "class EveryDayOfWeekValueGenerator extends EveryFieldValueGenerator {\n",
      "    private final int lastDayOfMonth;\n",
      "    private int year;\n",
      "    private int month;\n",
      "    private final Set<DayOfWeek> dowValidValues;\n",
      "\n",
      "    EveryDayOfWeekValueGenerator(final CronField cronField, final int year, final int month, WeekDay mondayDoWValue) {\n",
      "        super(cronField);\n",
      "        Preconditions.checkArgument(CronFieldName.DAY_OF_WEEK.equals(cronField.getField()), \"CronField does not belong to day of week\");\n",
      "        this.year = year;\n",
      "        this.month = month;\n",
      "        final LocalDate date = LocalDate.of(year, month, 1);\n",
      "        lastDayOfMonth = date.lengthOfMonth();\n",
      "\n",
      "        // from is set by EveryFieldValueGenerator to be the first day of the week to start counting from\n",
      "        // and to is set by EveryFieldValueGenerator to be the last day of the week\n",
      "        // in the case of from-to/period (ex. MON-FRI/2)\n",
      "        final Every every = (Every) cronField.getExpression();\n",
      "        int period = every.getPeriod().getValue();\n",
      "        Preconditions.checkArgument(period > 0 && period < 8, \"Cron Expression for day of week has an invalid period.\");\n",
      "        dowValidValues = getValidDays(mondayDoWValue, period, from, to);\n",
      "    }\n",
      "\n",
      "    private static Set<DayOfWeek> getValidDays(WeekDay mondayDoWValue, int period, int from, int to) {\n",
      "        List<DayOfWeek> validDays = new ArrayList<>(7);\n",
      "        for (int day = from; day <= to; day += period) {\n",
      "            // Convert from cron day of the week to Java DayOfWeek\n",
      "            int javaDay = ConstantsMapper.weekDayMapping(mondayDoWValue, ConstantsMapper.JAVA8, day);\n",
      "            validDays.add(DayOfWeek.of(javaDay));\n",
      "        }\n",
      "        return EnumSet.copyOf(validDays);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public int generateNextValue(final int reference) throws NoSuchValueException {\n",
      "        int day = reference;\n",
      "        do {\n",
      "            day++;\n",
      "        } while (!isMatch(day) && day <= lastDayOfMonth);\n",
      "        if (day > lastDayOfMonth) {\n",
      "            throw new NoSuchValueException();\n",
      "        }\n",
      "        return day;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public int generatePreviousValue(final int reference) throws NoSuchValueException {\n",
      "        int day = reference;\n",
      "        do {\n",
      "            day--;\n",
      "        } while (!isMatch(day) && day > 0);\n",
      "        if (day <= 0) {\n",
      "            throw new NoSuchValueException();\n",
      "        }\n",
      "        return day;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected List<Integer> generateCandidatesNotIncludingIntervalExtremes(int start, int end) {\n",
      "        // start is the day of month to start from\n",
      "        List<Integer> candidates = new ArrayList<>();\n",
      "        int reference = start;\n",
      "        try {\n",
      "            while (reference < end) {\n",
      "                reference = generateNextValue(reference);\n",
      "                if (reference < end) {\n",
      "                    candidates.add(reference);\n",
      "                }\n",
      "            }\n",
      "        } catch (NoSuchValueException ignored) {\n",
      "            // next generated value would be beyond the end of the month, so just ignore it and finish\n",
      "        }\n",
      "        return candidates;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public boolean isMatch(final int value) {\n",
      "        // value is the day of the month\n",
      "        if (value > lastDayOfMonth || value < 1) {\n",
      "            return false;\n",
      "        }\n",
      "        DayOfWeek dayOfWeek = LocalDate.of(year, month, value).getDayOfWeek();\n",
      "        return dowValidValues.contains(dayOfWeek);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.time.generator;\n",
      "\n",
      "import com.cronutils.mapper.WeekDay;\n",
      "import com.cronutils.model.field.CronField;\n",
      "import com.cronutils.model.field.CronFieldName;\n",
      "import com.cronutils.model.field.constraint.FieldConstraints;\n",
      "import com.cronutils.model.field.constraint.FieldConstraintsBuilder;\n",
      "import com.cronutils.model.field.expression.Between;\n",
      "import com.cronutils.model.field.expression.Every;\n",
      "import com.cronutils.model.field.expression.FieldExpression;\n",
      "import com.cronutils.model.field.value.IntegerFieldValue;\n",
      "import org.junit.jupiter.api.BeforeEach;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import java.time.DayOfWeek;\n",
      "import java.time.LocalDate;\n",
      "import java.time.Year;\n",
      "import java.util.Arrays;\n",
      "import java.util.EnumSet;\n",
      "import java.util.List;\n",
      "import java.util.Set;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.*;\n",
      "import static org.mockito.Mockito.mock;\n",
      "\n",
      "public class EveryDayOfWeekValueGeneratorTest {\n",
      "    private EveryFieldValueGenerator fieldValueGenerator;\n",
      "    private final int year = 2018;\n",
      "    private int month = 10;\n",
      "    private Set<DayOfWeek> validDow;\n",
      "\n",
      "    @BeforeEach\n",
      "    public void setUp() {\n",
      "        FieldConstraints constraints = FieldConstraintsBuilder.instance().createConstraintsInstance();\n",
      "        // every 2 days between 1-5\n",
      "        final CronField cronField = new CronField(CronFieldName.DAY_OF_WEEK,\n",
      "                new Every(new Between(new IntegerFieldValue(1), new IntegerFieldValue(5)),\n",
      "                        new IntegerFieldValue(2)),\n",
      "                constraints);\n",
      "        // Using monday = 1\n",
      "        WeekDay mondayDoWValue = new WeekDay(1, false);\n",
      "        // so MON-FRI/2, which should translate to MON,WED,FRI\n",
      "        validDow = EnumSet.of(DayOfWeek.MONDAY, DayOfWeek.WEDNESDAY, DayOfWeek.FRIDAY);\n",
      "\n",
      "        fieldValueGenerator = new EveryDayOfWeekValueGenerator(cronField, year, month, mondayDoWValue);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGenerateNextValue() throws NoSuchValueException {\n",
      "        // Oct 1, 2018 is a Monday. generateNextValue given 1 should return 3 (Wednesday Oct. 3, 2018)\n",
      "        assertEquals(3, fieldValueGenerator.generateNextValue(1));\n",
      "        // Next should be Friday (Oct. 5, 2018)\n",
      "        assertEquals(5, fieldValueGenerator.generateNextValue(3));\n",
      "        // Next should be Monday (Oct. 8, 2018) because of the restriction 1-5\n",
      "        assertEquals(8, fieldValueGenerator.generateNextValue(5));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGeneratePreviousValue() throws NoSuchValueException {\n",
      "        // Oct. 31, 2018 is a Wednesday, generatePreviousValue given 31 should give Monday 29, 2018\n",
      "        assertEquals(29, fieldValueGenerator.generatePreviousValue(31));\n",
      "        // Previous week's Friday is Oct. 26, 2018\n",
      "        assertEquals(26, fieldValueGenerator.generatePreviousValue(29));\n",
      "        assertEquals(24, fieldValueGenerator.generatePreviousValue(26));\n",
      "        assertEquals(22, fieldValueGenerator.generatePreviousValue(24));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGenerateCandidatesNotIncludingIntervalExtremes() {\n",
      "        int lengthOfMonth = LocalDate.of(year, month, 1).getMonth().length(Year.isLeap(year));\n",
      "        List<Integer> results = fieldValueGenerator.generateCandidatesNotIncludingIntervalExtremes(1, lengthOfMonth);\n",
      "        for (Integer day : results) {\n",
      "            assertTrue(validDow.contains(LocalDate.of(year, month, day).getDayOfWeek()));\n",
      "        }\n",
      "        // should not contain the extremes, 1 and 31\n",
      "        assertFalse(results.contains(1));\n",
      "        assertFalse(results.contains(lengthOfMonth));\n",
      "        assertTrue(results.containsAll(\n",
      "                Arrays.asList(\n",
      "                        3, 5,\n",
      "                        8, 10, 12,\n",
      "                        15, 17, 19,\n",
      "                        22, 24, 26,\n",
      "                        29)));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testIsMatch() {\n",
      "        assertFalse(fieldValueGenerator.isMatch(16));\n",
      "        assertTrue(fieldValueGenerator.isMatch(17));\n",
      "        assertFalse(fieldValueGenerator.isMatch(18));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testMatchesFieldExpressionClass() {\n",
      "        assertTrue(fieldValueGenerator.matchesFieldExpressionClass(mock(Every.class)));\n",
      "        assertFalse(fieldValueGenerator.matchesFieldExpressionClass(mock(FieldExpression.class)));\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "EveryDayOfWeekValueGenerator::::getValidDays(com.cronutils.mapper.WeekDay,int,int,int)": [
        56,
        64
      ],
      "EveryDayOfWeekValueGenerator::::generateNextValue(int)": [
        66,
        76
      ],
      "EveryDayOfWeekValueGenerator::::generatePreviousValue(int)": [
        78,
        88
      ],
      "EveryDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)": [
        90,
        106
      ],
      "EveryDayOfWeekValueGenerator::::isMatch(int)": [
        108,
        116
      ]
    },
    "test_method_lines_dic": {
      "EveryDayOfWeekValueGeneratorTest::::setUp()": [
        45,
        59
      ],
      "EveryDayOfWeekValueGeneratorTest::::testGenerateNextValue()": [
        61,
        69
      ],
      "EveryDayOfWeekValueGeneratorTest::::testGeneratePreviousValue()": [
        71,
        79
      ],
      "EveryDayOfWeekValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()": [
        81,
        98
      ],
      "EveryDayOfWeekValueGeneratorTest::::testIsMatch()": [
        100,
        105
      ],
      "EveryDayOfWeekValueGeneratorTest::::testMatchesFieldExpressionClass()": [
        107,
        111
      ]
    },
    "reverse_method_lines_dic": {
      "56": "EveryDayOfWeekValueGenerator::::getValidDays(com.cronutils.mapper.WeekDay,int,int,int)",
      "57": "EveryDayOfWeekValueGenerator::::getValidDays(com.cronutils.mapper.WeekDay,int,int,int)",
      "58": "EveryDayOfWeekValueGenerator::::getValidDays(com.cronutils.mapper.WeekDay,int,int,int)",
      "59": "EveryDayOfWeekValueGenerator::::getValidDays(com.cronutils.mapper.WeekDay,int,int,int)",
      "60": "EveryDayOfWeekValueGenerator::::getValidDays(com.cronutils.mapper.WeekDay,int,int,int)",
      "61": "EveryDayOfWeekValueGenerator::::getValidDays(com.cronutils.mapper.WeekDay,int,int,int)",
      "62": "EveryDayOfWeekValueGenerator::::getValidDays(com.cronutils.mapper.WeekDay,int,int,int)",
      "63": "EveryDayOfWeekValueGenerator::::getValidDays(com.cronutils.mapper.WeekDay,int,int,int)",
      "64": "EveryDayOfWeekValueGenerator::::getValidDays(com.cronutils.mapper.WeekDay,int,int,int)",
      "66": "EveryDayOfWeekValueGenerator::::generateNextValue(int)",
      "67": "EveryDayOfWeekValueGenerator::::generateNextValue(int)",
      "68": "EveryDayOfWeekValueGenerator::::generateNextValue(int)",
      "69": "EveryDayOfWeekValueGenerator::::generateNextValue(int)",
      "70": "EveryDayOfWeekValueGenerator::::generateNextValue(int)",
      "71": "EveryDayOfWeekValueGenerator::::generateNextValue(int)",
      "72": "EveryDayOfWeekValueGenerator::::generateNextValue(int)",
      "73": "EveryDayOfWeekValueGenerator::::generateNextValue(int)",
      "74": "EveryDayOfWeekValueGenerator::::generateNextValue(int)",
      "75": "EveryDayOfWeekValueGenerator::::generateNextValue(int)",
      "76": "EveryDayOfWeekValueGenerator::::generateNextValue(int)",
      "78": "EveryDayOfWeekValueGenerator::::generatePreviousValue(int)",
      "79": "EveryDayOfWeekValueGenerator::::generatePreviousValue(int)",
      "80": "EveryDayOfWeekValueGenerator::::generatePreviousValue(int)",
      "81": "EveryDayOfWeekValueGenerator::::generatePreviousValue(int)",
      "82": "EveryDayOfWeekValueGenerator::::generatePreviousValue(int)",
      "83": "EveryDayOfWeekValueGenerator::::generatePreviousValue(int)",
      "84": "EveryDayOfWeekValueGenerator::::generatePreviousValue(int)",
      "85": "EveryDayOfWeekValueGenerator::::generatePreviousValue(int)",
      "86": "EveryDayOfWeekValueGenerator::::generatePreviousValue(int)",
      "87": "EveryDayOfWeekValueGenerator::::generatePreviousValue(int)",
      "88": "EveryDayOfWeekValueGenerator::::generatePreviousValue(int)",
      "90": "EveryDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "91": "EveryDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "92": "EveryDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "93": "EveryDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "94": "EveryDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "95": "EveryDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "96": "EveryDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "97": "EveryDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "98": "EveryDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "99": "EveryDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "100": "EveryDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "101": "EveryDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "102": "EveryDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "103": "EveryDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "104": "EveryDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "105": "EveryDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "106": "EveryDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "108": "EveryDayOfWeekValueGenerator::::isMatch(int)",
      "109": "EveryDayOfWeekValueGenerator::::isMatch(int)",
      "110": "EveryDayOfWeekValueGenerator::::isMatch(int)",
      "111": "EveryDayOfWeekValueGenerator::::isMatch(int)",
      "112": "EveryDayOfWeekValueGenerator::::isMatch(int)",
      "113": "EveryDayOfWeekValueGenerator::::isMatch(int)",
      "114": "EveryDayOfWeekValueGenerator::::isMatch(int)",
      "115": "EveryDayOfWeekValueGenerator::::isMatch(int)",
      "116": "EveryDayOfWeekValueGenerator::::isMatch(int)"
    },
    "test_reverse_method_lines_dic": {
      "45": "EveryDayOfWeekValueGeneratorTest::::setUp()",
      "46": "EveryDayOfWeekValueGeneratorTest::::setUp()",
      "47": "EveryDayOfWeekValueGeneratorTest::::setUp()",
      "48": "EveryDayOfWeekValueGeneratorTest::::setUp()",
      "49": "EveryDayOfWeekValueGeneratorTest::::setUp()",
      "50": "EveryDayOfWeekValueGeneratorTest::::setUp()",
      "51": "EveryDayOfWeekValueGeneratorTest::::setUp()",
      "52": "EveryDayOfWeekValueGeneratorTest::::setUp()",
      "53": "EveryDayOfWeekValueGeneratorTest::::setUp()",
      "54": "EveryDayOfWeekValueGeneratorTest::::setUp()",
      "55": "EveryDayOfWeekValueGeneratorTest::::setUp()",
      "56": "EveryDayOfWeekValueGeneratorTest::::setUp()",
      "57": "EveryDayOfWeekValueGeneratorTest::::setUp()",
      "58": "EveryDayOfWeekValueGeneratorTest::::setUp()",
      "59": "EveryDayOfWeekValueGeneratorTest::::setUp()",
      "61": "EveryDayOfWeekValueGeneratorTest::::testGenerateNextValue()",
      "62": "EveryDayOfWeekValueGeneratorTest::::testGenerateNextValue()",
      "63": "EveryDayOfWeekValueGeneratorTest::::testGenerateNextValue()",
      "64": "EveryDayOfWeekValueGeneratorTest::::testGenerateNextValue()",
      "65": "EveryDayOfWeekValueGeneratorTest::::testGenerateNextValue()",
      "66": "EveryDayOfWeekValueGeneratorTest::::testGenerateNextValue()",
      "67": "EveryDayOfWeekValueGeneratorTest::::testGenerateNextValue()",
      "68": "EveryDayOfWeekValueGeneratorTest::::testGenerateNextValue()",
      "69": "EveryDayOfWeekValueGeneratorTest::::testGenerateNextValue()",
      "71": "EveryDayOfWeekValueGeneratorTest::::testGeneratePreviousValue()",
      "72": "EveryDayOfWeekValueGeneratorTest::::testGeneratePreviousValue()",
      "73": "EveryDayOfWeekValueGeneratorTest::::testGeneratePreviousValue()",
      "74": "EveryDayOfWeekValueGeneratorTest::::testGeneratePreviousValue()",
      "75": "EveryDayOfWeekValueGeneratorTest::::testGeneratePreviousValue()",
      "76": "EveryDayOfWeekValueGeneratorTest::::testGeneratePreviousValue()",
      "77": "EveryDayOfWeekValueGeneratorTest::::testGeneratePreviousValue()",
      "78": "EveryDayOfWeekValueGeneratorTest::::testGeneratePreviousValue()",
      "79": "EveryDayOfWeekValueGeneratorTest::::testGeneratePreviousValue()",
      "81": "EveryDayOfWeekValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "82": "EveryDayOfWeekValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "83": "EveryDayOfWeekValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "84": "EveryDayOfWeekValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "85": "EveryDayOfWeekValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "86": "EveryDayOfWeekValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "87": "EveryDayOfWeekValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "88": "EveryDayOfWeekValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "89": "EveryDayOfWeekValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "90": "EveryDayOfWeekValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "91": "EveryDayOfWeekValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "92": "EveryDayOfWeekValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "93": "EveryDayOfWeekValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "94": "EveryDayOfWeekValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "95": "EveryDayOfWeekValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "96": "EveryDayOfWeekValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "97": "EveryDayOfWeekValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "98": "EveryDayOfWeekValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "100": "EveryDayOfWeekValueGeneratorTest::::testIsMatch()",
      "101": "EveryDayOfWeekValueGeneratorTest::::testIsMatch()",
      "102": "EveryDayOfWeekValueGeneratorTest::::testIsMatch()",
      "103": "EveryDayOfWeekValueGeneratorTest::::testIsMatch()",
      "104": "EveryDayOfWeekValueGeneratorTest::::testIsMatch()",
      "105": "EveryDayOfWeekValueGeneratorTest::::testIsMatch()",
      "107": "EveryDayOfWeekValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "108": "EveryDayOfWeekValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "109": "EveryDayOfWeekValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "110": "EveryDayOfWeekValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "111": "EveryDayOfWeekValueGeneratorTest::::testMatchesFieldExpressionClass()"
    },
    "tests": [
      {
        "test_lines": [
          61,
          69
        ],
        "covered_lines": [
          40,
          41,
          42,
          43,
          44,
          45,
          50,
          51,
          52,
          53,
          54,
          57,
          58,
          60,
          61,
          63,
          68,
          70,
          71,
          72,
          75,
          111,
          114,
          115
        ]
      },
      {
        "test_lines": [
          71,
          79
        ],
        "covered_lines": [
          40,
          41,
          42,
          43,
          44,
          45,
          50,
          51,
          52,
          53,
          54,
          57,
          58,
          60,
          61,
          63,
          80,
          82,
          83,
          84,
          87,
          111,
          114,
          115
        ]
      },
      {
        "test_lines": [
          81,
          98
        ],
        "covered_lines": [
          40,
          41,
          42,
          43,
          44,
          45,
          50,
          51,
          52,
          53,
          54,
          57,
          58,
          60,
          61,
          63,
          68,
          70,
          71,
          72,
          75,
          93,
          94,
          96,
          97,
          98,
          99,
          104,
          105,
          111,
          114,
          115
        ]
      },
      {
        "test_lines": [
          100,
          105
        ],
        "covered_lines": [
          40,
          41,
          42,
          43,
          44,
          45,
          50,
          51,
          52,
          53,
          54,
          57,
          58,
          60,
          61,
          63,
          111,
          114,
          115
        ]
      },
      {
        "test_lines": [
          107,
          111
        ],
        "covered_lines": [
          40,
          41,
          42,
          43,
          44,
          45,
          50,
          51,
          52,
          53,
          54,
          57,
          58,
          60,
          61,
          63
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/cron-utils/src/main/java/com/cronutils/model/time/generator/FieldValueGeneratorFactory.java": {
    "class_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.time.generator;\n",
      "\n",
      "import com.cronutils.mapper.WeekDay;\n",
      "import com.cronutils.model.field.CronField;\n",
      "import com.cronutils.model.field.expression.*;\n",
      "import com.cronutils.model.field.value.SpecialChar;\n",
      "\n",
      "public class FieldValueGeneratorFactory {\n",
      "    private FieldValueGeneratorFactory() {\n",
      "    }\n",
      "\n",
      "    public static FieldValueGenerator forCronField(final CronField cronField) {\n",
      "        final FieldExpression fieldExpression = cronField.getExpression();\n",
      "        if (fieldExpression instanceof Always) {\n",
      "            return new AlwaysFieldValueGenerator(cronField);\n",
      "        }\n",
      "        if (fieldExpression instanceof And) {\n",
      "            return new AndFieldValueGenerator(cronField);\n",
      "        }\n",
      "        if (fieldExpression instanceof Between) {\n",
      "            return new BetweenFieldValueGenerator(cronField);\n",
      "        }\n",
      "        if (fieldExpression instanceof Every) {\n",
      "            return new EveryFieldValueGenerator(cronField);\n",
      "        }\n",
      "        if (fieldExpression instanceof On) {\n",
      "            final On on = (On) fieldExpression;\n",
      "            if (!SpecialChar.NONE.equals(on.getSpecialChar().getValue())) {\n",
      "                throw new IllegalArgumentException(String.format(\"Cannot create instance for On instance with %s value\", on.getSpecialChar()));\n",
      "            }\n",
      "            return new OnFieldValueGenerator(cronField);\n",
      "        }\n",
      "        return new NullFieldValueGenerator(cronField);\n",
      "    }\n",
      "\n",
      "    public static FieldValueGenerator createDayOfYearValueGeneratorInstance(final CronField cronField, final int year) {\n",
      "        return forCronField(cronField);\n",
      "    }\n",
      "\n",
      "    public static FieldValueGenerator createDayOfMonthValueGeneratorInstance(final CronField cronField, final int year, final int month) {\n",
      "        final FieldExpression fieldExpression = cronField.getExpression();\n",
      "        if (fieldExpression instanceof On) {\n",
      "            final On on = (On) fieldExpression;\n",
      "            if (!SpecialChar.NONE.equals(on.getSpecialChar().getValue())) {\n",
      "                return new OnDayOfMonthValueGenerator(cronField, year, month);\n",
      "            }\n",
      "        }\n",
      "        return forCronField(cronField);\n",
      "    }\n",
      "\n",
      "    public static FieldValueGenerator createDayOfWeekValueGeneratorInstance(final CronField cronField, final int year, final int month, final WeekDay mondayDoWValue) {\n",
      "        final FieldExpression fieldExpression = cronField.getExpression();\n",
      "        if (fieldExpression instanceof On) {\n",
      "            return new OnDayOfWeekValueGenerator(cronField, year, month, mondayDoWValue);\n",
      "        }\n",
      "        // handle a range expression for day of week special\n",
      "        if (fieldExpression instanceof Between) {\n",
      "            return new BetweenDayOfWeekValueGenerator(cronField, year, month, mondayDoWValue);\n",
      "        }\n",
      "        // handle And expression for day of the week as a special case\n",
      "        if (fieldExpression instanceof And) {\n",
      "            return new AndDayOfWeekValueGenerator(cronField, year, month, mondayDoWValue);\n",
      "        }\n",
      "        if (fieldExpression instanceof Every) {\n",
      "            return new EveryDayOfWeekValueGenerator(cronField, year, month, mondayDoWValue);\n",
      "        }\n",
      "        return forCronField(cronField);\n",
      "    }\n",
      "\n",
      "    public static FieldValueGenerator createYearValueGeneratorInstance(final CronField cronField) {\n",
      "        return forCronField(cronField);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.time.generator;\n",
      "\n",
      "import com.cronutils.mapper.WeekDay;\n",
      "import com.cronutils.model.field.CronField;\n",
      "import com.cronutils.model.field.CronFieldName;\n",
      "import com.cronutils.model.field.expression.*;\n",
      "import com.cronutils.model.field.value.IntegerFieldValue;\n",
      "import com.cronutils.model.field.value.SpecialChar;\n",
      "import com.cronutils.model.field.value.SpecialCharFieldValue;\n",
      "import org.junit.jupiter.api.BeforeEach;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.assertEquals;\n",
      "import static org.junit.jupiter.api.Assertions.assertThrows;\n",
      "import static org.junit.jupiter.api.Assertions.assertTrue;\n",
      "import static org.mockito.Mockito.mock;\n",
      "import static org.mockito.Mockito.when;\n",
      "\n",
      "public class FieldValueGeneratorFactoryTest {\n",
      "    private CronField mockCronField;\n",
      "\n",
      "    @BeforeEach\n",
      "    public void setUp() {\n",
      "        mockCronField = mock(CronField.class);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testForCronFieldAlways() {\n",
      "        when(mockCronField.getExpression()).thenReturn(mock(Always.class));\n",
      "        assertEquals(AlwaysFieldValueGenerator.class, FieldValueGeneratorFactory.forCronField(mockCronField).getClass());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testForCronFieldAnd() {\n",
      "        when(mockCronField.getExpression()).thenReturn(mock(And.class));\n",
      "        assertEquals(AndFieldValueGenerator.class, FieldValueGeneratorFactory.forCronField(mockCronField).getClass());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testForCronFieldBetween() {\n",
      "        when(mockCronField.getExpression()).thenReturn(mock(Between.class));\n",
      "        assertEquals(BetweenFieldValueGenerator.class, FieldValueGeneratorFactory.forCronField(mockCronField).getClass());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testForCronFieldOnSpecialCharNone() {\n",
      "        final On mockOn = mock(On.class);\n",
      "        when(mockOn.getSpecialChar()).thenReturn(new SpecialCharFieldValue(SpecialChar.NONE));\n",
      "        when(mockCronField.getExpression()).thenReturn(mockOn);\n",
      "        assertEquals(OnFieldValueGenerator.class, FieldValueGeneratorFactory.forCronField(mockCronField).getClass());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testForCronFieldOnSpecialCharNotNone() {\n",
      "        final On mockOn = mock(On.class);\n",
      "        for (final SpecialChar s : SpecialChar.values()) {\n",
      "            if (!s.equals(SpecialChar.NONE)) {\n",
      "                boolean gotException = false;\n",
      "                when(mockOn.getSpecialChar()).thenReturn(new SpecialCharFieldValue(s));\n",
      "                when(mockCronField.getExpression()).thenReturn(mockOn);\n",
      "                try {\n",
      "                    FieldValueGeneratorFactory.forCronField(mockCronField);\n",
      "                } catch (final RuntimeException e) {\n",
      "                    gotException = true;\n",
      "                }\n",
      "                assertTrue(gotException, \"Should get exception when asking for OnValueGenerator with special char\");\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testForCronField() {\n",
      "        when(mockCronField.getExpression()).thenReturn(mock(FieldExpression.class));\n",
      "        assertEquals(NullFieldValueGenerator.class, FieldValueGeneratorFactory.forCronField(mockCronField).getClass());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testCreateDayOfMonthValueGeneratorInstanceForL() {\n",
      "        assertEquals(\n",
      "                OnDayOfMonthValueGenerator.class,\n",
      "                createDayOfMonthValueGeneratorInstance(SpecialChar.L).getClass()\n",
      "        );\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testCreateDayOfMonthValueGeneratorInstanceForW() {\n",
      "        assertEquals(\n",
      "                OnDayOfMonthValueGenerator.class,\n",
      "                createDayOfMonthValueGeneratorInstance(SpecialChar.W).getClass()\n",
      "        );\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testCreateDayOfMonthValueGeneratorInstanceForLW() {\n",
      "        assertEquals(\n",
      "                OnDayOfMonthValueGenerator.class,\n",
      "                createDayOfMonthValueGeneratorInstance(SpecialChar.LW).getClass()\n",
      "        );\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testCreateDayOfMonthValueGeneratorInstanceForHash() {\n",
      "        assertEquals(\n",
      "                OnDayOfMonthValueGenerator.class,\n",
      "                createDayOfMonthValueGeneratorInstance(SpecialChar.HASH).getClass()\n",
      "        );\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testCreateDayOfMonthValueGeneratorInstanceForNone() {\n",
      "        assertEquals(\n",
      "                OnFieldValueGenerator.class,\n",
      "                createDayOfMonthValueGeneratorInstance(SpecialChar.NONE).getClass()\n",
      "        );\n",
      "    }\n",
      "\n",
      "    private FieldValueGenerator createDayOfMonthValueGeneratorInstance(final SpecialChar specialChar) {\n",
      "        when(mockCronField.getField()).thenReturn(CronFieldName.DAY_OF_MONTH);\n",
      "        final On mockOn = mock(On.class);\n",
      "        when(mockOn.getSpecialChar()).thenReturn(new SpecialCharFieldValue(specialChar));\n",
      "        when(mockCronField.getExpression()).thenReturn(mockOn);\n",
      "        return FieldValueGeneratorFactory.createDayOfMonthValueGeneratorInstance(mockCronField, 2015, 1);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testCreateDayOfMonthValueGeneratorInstanceBadCronFieldName() {\n",
      "        when(mockCronField.getField()).thenReturn(CronFieldName.YEAR);\n",
      "        final On mockOn = mock(On.class);\n",
      "        when(mockOn.getSpecialChar()).thenReturn(new SpecialCharFieldValue(SpecialChar.L));//any value except NONE\n",
      "        when(mockCronField.getExpression()).thenReturn(mockOn);\n",
      "\n",
      "        assertThrows(IllegalArgumentException.class, () -> FieldValueGeneratorFactory.createDayOfMonthValueGeneratorInstance(mockCronField, 2015, 1));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testCreateDayOfWeekValueGeneratorInstance() {\n",
      "        when(mockCronField.getField()).thenReturn(CronFieldName.DAY_OF_WEEK);\n",
      "        when(mockCronField.getExpression()).thenReturn(mock(On.class));\n",
      "        assertEquals(\n",
      "                OnDayOfWeekValueGenerator.class,\n",
      "                FieldValueGeneratorFactory.createDayOfWeekValueGeneratorInstance(mockCronField, 2015, 1, new WeekDay(1, false)).getClass()\n",
      "        );\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testCreateDayOfWeekValueGeneratorInstanceBetween() {\n",
      "        final Between between = new Between(new IntegerFieldValue(1), new IntegerFieldValue(7));\n",
      "        when(mockCronField.getField()).thenReturn(CronFieldName.DAY_OF_WEEK);\n",
      "        when(mockCronField.getExpression()).thenReturn(between);\n",
      "        assertEquals(\n",
      "                BetweenDayOfWeekValueGenerator.class,\n",
      "                FieldValueGeneratorFactory.createDayOfWeekValueGeneratorInstance(mockCronField, 2015, 1, new WeekDay(1, false)).getClass()\n",
      "        );\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testCreateDayOfWeekValueGeneratorInstanceAnd() {\n",
      "        when(mockCronField.getField()).thenReturn(CronFieldName.DAY_OF_WEEK);\n",
      "        when(mockCronField.getExpression()).thenReturn(mock(And.class));\n",
      "        assertEquals(\n",
      "                AndDayOfWeekValueGenerator.class,\n",
      "                FieldValueGeneratorFactory.createDayOfWeekValueGeneratorInstance(mockCronField, 2015, 1, new WeekDay(1, false)).getClass()\n",
      "        );\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testCreateDayOfWeekValueGeneratorInstanceBadCronFieldName() {\n",
      "        when(mockCronField.getField()).thenReturn(CronFieldName.YEAR);\n",
      "        when(mockCronField.getExpression()).thenReturn(mock(On.class));\n",
      "        assertThrows(IllegalArgumentException.class, () -> FieldValueGeneratorFactory.createDayOfWeekValueGeneratorInstance(mockCronField, 2015, 1, new WeekDay(1, false)));\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "FieldValueGeneratorFactory::::forCronField(com.cronutils.model.field.CronField)": [
        25,
        47
      ],
      "FieldValueGeneratorFactory::::createDayOfYearValueGeneratorInstance(com.cronutils.model.field.CronField,int)": [
        49,
        51
      ],
      "FieldValueGeneratorFactory::::createDayOfMonthValueGeneratorInstance(com.cronutils.model.field.CronField,int,int)": [
        53,
        62
      ],
      "FieldValueGeneratorFactory::::createDayOfWeekValueGeneratorInstance(com.cronutils.model.field.CronField,int,int,com.cronutils.mapper.WeekDay)": [
        64,
        81
      ],
      "FieldValueGeneratorFactory::::createYearValueGeneratorInstance(com.cronutils.model.field.CronField)": [
        83,
        85
      ]
    },
    "test_method_lines_dic": {
      "FieldValueGeneratorFactoryTest::::setUp()": [
        35,
        38
      ],
      "FieldValueGeneratorFactoryTest::::testForCronFieldAlways()": [
        40,
        44
      ],
      "FieldValueGeneratorFactoryTest::::testForCronFieldAnd()": [
        46,
        50
      ],
      "FieldValueGeneratorFactoryTest::::testForCronFieldBetween()": [
        52,
        56
      ],
      "FieldValueGeneratorFactoryTest::::testForCronFieldOnSpecialCharNone()": [
        58,
        64
      ],
      "FieldValueGeneratorFactoryTest::::testForCronFieldOnSpecialCharNotNone()": [
        66,
        82
      ],
      "FieldValueGeneratorFactoryTest::::testForCronField()": [
        84,
        88
      ],
      "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForL()": [
        90,
        96
      ],
      "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForW()": [
        98,
        104
      ],
      "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForLW()": [
        106,
        112
      ],
      "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForHash()": [
        114,
        120
      ],
      "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForNone()": [
        122,
        128
      ],
      "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceBadCronFieldName()": [
        138,
        146
      ],
      "FieldValueGeneratorFactoryTest::::testCreateDayOfWeekValueGeneratorInstance()": [
        148,
        156
      ],
      "FieldValueGeneratorFactoryTest::::testCreateDayOfWeekValueGeneratorInstanceBetween()": [
        158,
        167
      ],
      "FieldValueGeneratorFactoryTest::::testCreateDayOfWeekValueGeneratorInstanceAnd()": [
        169,
        177
      ],
      "FieldValueGeneratorFactoryTest::::testCreateDayOfWeekValueGeneratorInstanceBadCronFieldName()": [
        179,
        184
      ]
    },
    "reverse_method_lines_dic": {
      "25": "FieldValueGeneratorFactory::::forCronField(com.cronutils.model.field.CronField)",
      "26": "FieldValueGeneratorFactory::::forCronField(com.cronutils.model.field.CronField)",
      "27": "FieldValueGeneratorFactory::::forCronField(com.cronutils.model.field.CronField)",
      "28": "FieldValueGeneratorFactory::::forCronField(com.cronutils.model.field.CronField)",
      "29": "FieldValueGeneratorFactory::::forCronField(com.cronutils.model.field.CronField)",
      "30": "FieldValueGeneratorFactory::::forCronField(com.cronutils.model.field.CronField)",
      "31": "FieldValueGeneratorFactory::::forCronField(com.cronutils.model.field.CronField)",
      "32": "FieldValueGeneratorFactory::::forCronField(com.cronutils.model.field.CronField)",
      "33": "FieldValueGeneratorFactory::::forCronField(com.cronutils.model.field.CronField)",
      "34": "FieldValueGeneratorFactory::::forCronField(com.cronutils.model.field.CronField)",
      "35": "FieldValueGeneratorFactory::::forCronField(com.cronutils.model.field.CronField)",
      "36": "FieldValueGeneratorFactory::::forCronField(com.cronutils.model.field.CronField)",
      "37": "FieldValueGeneratorFactory::::forCronField(com.cronutils.model.field.CronField)",
      "38": "FieldValueGeneratorFactory::::forCronField(com.cronutils.model.field.CronField)",
      "39": "FieldValueGeneratorFactory::::forCronField(com.cronutils.model.field.CronField)",
      "40": "FieldValueGeneratorFactory::::forCronField(com.cronutils.model.field.CronField)",
      "41": "FieldValueGeneratorFactory::::forCronField(com.cronutils.model.field.CronField)",
      "42": "FieldValueGeneratorFactory::::forCronField(com.cronutils.model.field.CronField)",
      "43": "FieldValueGeneratorFactory::::forCronField(com.cronutils.model.field.CronField)",
      "44": "FieldValueGeneratorFactory::::forCronField(com.cronutils.model.field.CronField)",
      "45": "FieldValueGeneratorFactory::::forCronField(com.cronutils.model.field.CronField)",
      "46": "FieldValueGeneratorFactory::::forCronField(com.cronutils.model.field.CronField)",
      "47": "FieldValueGeneratorFactory::::forCronField(com.cronutils.model.field.CronField)",
      "49": "FieldValueGeneratorFactory::::createDayOfYearValueGeneratorInstance(com.cronutils.model.field.CronField,int)",
      "50": "FieldValueGeneratorFactory::::createDayOfYearValueGeneratorInstance(com.cronutils.model.field.CronField,int)",
      "51": "FieldValueGeneratorFactory::::createDayOfYearValueGeneratorInstance(com.cronutils.model.field.CronField,int)",
      "53": "FieldValueGeneratorFactory::::createDayOfMonthValueGeneratorInstance(com.cronutils.model.field.CronField,int,int)",
      "54": "FieldValueGeneratorFactory::::createDayOfMonthValueGeneratorInstance(com.cronutils.model.field.CronField,int,int)",
      "55": "FieldValueGeneratorFactory::::createDayOfMonthValueGeneratorInstance(com.cronutils.model.field.CronField,int,int)",
      "56": "FieldValueGeneratorFactory::::createDayOfMonthValueGeneratorInstance(com.cronutils.model.field.CronField,int,int)",
      "57": "FieldValueGeneratorFactory::::createDayOfMonthValueGeneratorInstance(com.cronutils.model.field.CronField,int,int)",
      "58": "FieldValueGeneratorFactory::::createDayOfMonthValueGeneratorInstance(com.cronutils.model.field.CronField,int,int)",
      "59": "FieldValueGeneratorFactory::::createDayOfMonthValueGeneratorInstance(com.cronutils.model.field.CronField,int,int)",
      "60": "FieldValueGeneratorFactory::::createDayOfMonthValueGeneratorInstance(com.cronutils.model.field.CronField,int,int)",
      "61": "FieldValueGeneratorFactory::::createDayOfMonthValueGeneratorInstance(com.cronutils.model.field.CronField,int,int)",
      "62": "FieldValueGeneratorFactory::::createDayOfMonthValueGeneratorInstance(com.cronutils.model.field.CronField,int,int)",
      "64": "FieldValueGeneratorFactory::::createDayOfWeekValueGeneratorInstance(com.cronutils.model.field.CronField,int,int,com.cronutils.mapper.WeekDay)",
      "65": "FieldValueGeneratorFactory::::createDayOfWeekValueGeneratorInstance(com.cronutils.model.field.CronField,int,int,com.cronutils.mapper.WeekDay)",
      "66": "FieldValueGeneratorFactory::::createDayOfWeekValueGeneratorInstance(com.cronutils.model.field.CronField,int,int,com.cronutils.mapper.WeekDay)",
      "67": "FieldValueGeneratorFactory::::createDayOfWeekValueGeneratorInstance(com.cronutils.model.field.CronField,int,int,com.cronutils.mapper.WeekDay)",
      "68": "FieldValueGeneratorFactory::::createDayOfWeekValueGeneratorInstance(com.cronutils.model.field.CronField,int,int,com.cronutils.mapper.WeekDay)",
      "69": "FieldValueGeneratorFactory::::createDayOfWeekValueGeneratorInstance(com.cronutils.model.field.CronField,int,int,com.cronutils.mapper.WeekDay)",
      "70": "FieldValueGeneratorFactory::::createDayOfWeekValueGeneratorInstance(com.cronutils.model.field.CronField,int,int,com.cronutils.mapper.WeekDay)",
      "71": "FieldValueGeneratorFactory::::createDayOfWeekValueGeneratorInstance(com.cronutils.model.field.CronField,int,int,com.cronutils.mapper.WeekDay)",
      "72": "FieldValueGeneratorFactory::::createDayOfWeekValueGeneratorInstance(com.cronutils.model.field.CronField,int,int,com.cronutils.mapper.WeekDay)",
      "73": "FieldValueGeneratorFactory::::createDayOfWeekValueGeneratorInstance(com.cronutils.model.field.CronField,int,int,com.cronutils.mapper.WeekDay)",
      "74": "FieldValueGeneratorFactory::::createDayOfWeekValueGeneratorInstance(com.cronutils.model.field.CronField,int,int,com.cronutils.mapper.WeekDay)",
      "75": "FieldValueGeneratorFactory::::createDayOfWeekValueGeneratorInstance(com.cronutils.model.field.CronField,int,int,com.cronutils.mapper.WeekDay)",
      "76": "FieldValueGeneratorFactory::::createDayOfWeekValueGeneratorInstance(com.cronutils.model.field.CronField,int,int,com.cronutils.mapper.WeekDay)",
      "77": "FieldValueGeneratorFactory::::createDayOfWeekValueGeneratorInstance(com.cronutils.model.field.CronField,int,int,com.cronutils.mapper.WeekDay)",
      "78": "FieldValueGeneratorFactory::::createDayOfWeekValueGeneratorInstance(com.cronutils.model.field.CronField,int,int,com.cronutils.mapper.WeekDay)",
      "79": "FieldValueGeneratorFactory::::createDayOfWeekValueGeneratorInstance(com.cronutils.model.field.CronField,int,int,com.cronutils.mapper.WeekDay)",
      "80": "FieldValueGeneratorFactory::::createDayOfWeekValueGeneratorInstance(com.cronutils.model.field.CronField,int,int,com.cronutils.mapper.WeekDay)",
      "81": "FieldValueGeneratorFactory::::createDayOfWeekValueGeneratorInstance(com.cronutils.model.field.CronField,int,int,com.cronutils.mapper.WeekDay)",
      "83": "FieldValueGeneratorFactory::::createYearValueGeneratorInstance(com.cronutils.model.field.CronField)",
      "84": "FieldValueGeneratorFactory::::createYearValueGeneratorInstance(com.cronutils.model.field.CronField)",
      "85": "FieldValueGeneratorFactory::::createYearValueGeneratorInstance(com.cronutils.model.field.CronField)"
    },
    "test_reverse_method_lines_dic": {
      "35": "FieldValueGeneratorFactoryTest::::setUp()",
      "36": "FieldValueGeneratorFactoryTest::::setUp()",
      "37": "FieldValueGeneratorFactoryTest::::setUp()",
      "38": "FieldValueGeneratorFactoryTest::::setUp()",
      "40": "FieldValueGeneratorFactoryTest::::testForCronFieldAlways()",
      "41": "FieldValueGeneratorFactoryTest::::testForCronFieldAlways()",
      "42": "FieldValueGeneratorFactoryTest::::testForCronFieldAlways()",
      "43": "FieldValueGeneratorFactoryTest::::testForCronFieldAlways()",
      "44": "FieldValueGeneratorFactoryTest::::testForCronFieldAlways()",
      "46": "FieldValueGeneratorFactoryTest::::testForCronFieldAnd()",
      "47": "FieldValueGeneratorFactoryTest::::testForCronFieldAnd()",
      "48": "FieldValueGeneratorFactoryTest::::testForCronFieldAnd()",
      "49": "FieldValueGeneratorFactoryTest::::testForCronFieldAnd()",
      "50": "FieldValueGeneratorFactoryTest::::testForCronFieldAnd()",
      "52": "FieldValueGeneratorFactoryTest::::testForCronFieldBetween()",
      "53": "FieldValueGeneratorFactoryTest::::testForCronFieldBetween()",
      "54": "FieldValueGeneratorFactoryTest::::testForCronFieldBetween()",
      "55": "FieldValueGeneratorFactoryTest::::testForCronFieldBetween()",
      "56": "FieldValueGeneratorFactoryTest::::testForCronFieldBetween()",
      "58": "FieldValueGeneratorFactoryTest::::testForCronFieldOnSpecialCharNone()",
      "59": "FieldValueGeneratorFactoryTest::::testForCronFieldOnSpecialCharNone()",
      "60": "FieldValueGeneratorFactoryTest::::testForCronFieldOnSpecialCharNone()",
      "61": "FieldValueGeneratorFactoryTest::::testForCronFieldOnSpecialCharNone()",
      "62": "FieldValueGeneratorFactoryTest::::testForCronFieldOnSpecialCharNone()",
      "63": "FieldValueGeneratorFactoryTest::::testForCronFieldOnSpecialCharNone()",
      "64": "FieldValueGeneratorFactoryTest::::testForCronFieldOnSpecialCharNone()",
      "66": "FieldValueGeneratorFactoryTest::::testForCronFieldOnSpecialCharNotNone()",
      "67": "FieldValueGeneratorFactoryTest::::testForCronFieldOnSpecialCharNotNone()",
      "68": "FieldValueGeneratorFactoryTest::::testForCronFieldOnSpecialCharNotNone()",
      "69": "FieldValueGeneratorFactoryTest::::testForCronFieldOnSpecialCharNotNone()",
      "70": "FieldValueGeneratorFactoryTest::::testForCronFieldOnSpecialCharNotNone()",
      "71": "FieldValueGeneratorFactoryTest::::testForCronFieldOnSpecialCharNotNone()",
      "72": "FieldValueGeneratorFactoryTest::::testForCronFieldOnSpecialCharNotNone()",
      "73": "FieldValueGeneratorFactoryTest::::testForCronFieldOnSpecialCharNotNone()",
      "74": "FieldValueGeneratorFactoryTest::::testForCronFieldOnSpecialCharNotNone()",
      "75": "FieldValueGeneratorFactoryTest::::testForCronFieldOnSpecialCharNotNone()",
      "76": "FieldValueGeneratorFactoryTest::::testForCronFieldOnSpecialCharNotNone()",
      "77": "FieldValueGeneratorFactoryTest::::testForCronFieldOnSpecialCharNotNone()",
      "78": "FieldValueGeneratorFactoryTest::::testForCronFieldOnSpecialCharNotNone()",
      "79": "FieldValueGeneratorFactoryTest::::testForCronFieldOnSpecialCharNotNone()",
      "80": "FieldValueGeneratorFactoryTest::::testForCronFieldOnSpecialCharNotNone()",
      "81": "FieldValueGeneratorFactoryTest::::testForCronFieldOnSpecialCharNotNone()",
      "82": "FieldValueGeneratorFactoryTest::::testForCronFieldOnSpecialCharNotNone()",
      "84": "FieldValueGeneratorFactoryTest::::testForCronField()",
      "85": "FieldValueGeneratorFactoryTest::::testForCronField()",
      "86": "FieldValueGeneratorFactoryTest::::testForCronField()",
      "87": "FieldValueGeneratorFactoryTest::::testForCronField()",
      "88": "FieldValueGeneratorFactoryTest::::testForCronField()",
      "90": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForL()",
      "91": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForL()",
      "92": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForL()",
      "93": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForL()",
      "94": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForL()",
      "95": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForL()",
      "96": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForL()",
      "98": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForW()",
      "99": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForW()",
      "100": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForW()",
      "101": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForW()",
      "102": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForW()",
      "103": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForW()",
      "104": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForW()",
      "106": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForLW()",
      "107": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForLW()",
      "108": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForLW()",
      "109": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForLW()",
      "110": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForLW()",
      "111": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForLW()",
      "112": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForLW()",
      "114": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForHash()",
      "115": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForHash()",
      "116": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForHash()",
      "117": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForHash()",
      "118": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForHash()",
      "119": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForHash()",
      "120": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForHash()",
      "122": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForNone()",
      "123": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForNone()",
      "124": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForNone()",
      "125": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForNone()",
      "126": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForNone()",
      "127": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForNone()",
      "128": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceForNone()",
      "138": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceBadCronFieldName()",
      "139": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceBadCronFieldName()",
      "140": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceBadCronFieldName()",
      "141": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceBadCronFieldName()",
      "142": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceBadCronFieldName()",
      "143": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceBadCronFieldName()",
      "144": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceBadCronFieldName()",
      "145": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceBadCronFieldName()",
      "146": "FieldValueGeneratorFactoryTest::::testCreateDayOfMonthValueGeneratorInstanceBadCronFieldName()",
      "148": "FieldValueGeneratorFactoryTest::::testCreateDayOfWeekValueGeneratorInstance()",
      "149": "FieldValueGeneratorFactoryTest::::testCreateDayOfWeekValueGeneratorInstance()",
      "150": "FieldValueGeneratorFactoryTest::::testCreateDayOfWeekValueGeneratorInstance()",
      "151": "FieldValueGeneratorFactoryTest::::testCreateDayOfWeekValueGeneratorInstance()",
      "152": "FieldValueGeneratorFactoryTest::::testCreateDayOfWeekValueGeneratorInstance()",
      "153": "FieldValueGeneratorFactoryTest::::testCreateDayOfWeekValueGeneratorInstance()",
      "154": "FieldValueGeneratorFactoryTest::::testCreateDayOfWeekValueGeneratorInstance()",
      "155": "FieldValueGeneratorFactoryTest::::testCreateDayOfWeekValueGeneratorInstance()",
      "156": "FieldValueGeneratorFactoryTest::::testCreateDayOfWeekValueGeneratorInstance()",
      "158": "FieldValueGeneratorFactoryTest::::testCreateDayOfWeekValueGeneratorInstanceBetween()",
      "159": "FieldValueGeneratorFactoryTest::::testCreateDayOfWeekValueGeneratorInstanceBetween()",
      "160": "FieldValueGeneratorFactoryTest::::testCreateDayOfWeekValueGeneratorInstanceBetween()",
      "161": "FieldValueGeneratorFactoryTest::::testCreateDayOfWeekValueGeneratorInstanceBetween()",
      "162": "FieldValueGeneratorFactoryTest::::testCreateDayOfWeekValueGeneratorInstanceBetween()",
      "163": "FieldValueGeneratorFactoryTest::::testCreateDayOfWeekValueGeneratorInstanceBetween()",
      "164": "FieldValueGeneratorFactoryTest::::testCreateDayOfWeekValueGeneratorInstanceBetween()",
      "165": "FieldValueGeneratorFactoryTest::::testCreateDayOfWeekValueGeneratorInstanceBetween()",
      "166": "FieldValueGeneratorFactoryTest::::testCreateDayOfWeekValueGeneratorInstanceBetween()",
      "167": "FieldValueGeneratorFactoryTest::::testCreateDayOfWeekValueGeneratorInstanceBetween()",
      "169": "FieldValueGeneratorFactoryTest::::testCreateDayOfWeekValueGeneratorInstanceAnd()",
      "170": "FieldValueGeneratorFactoryTest::::testCreateDayOfWeekValueGeneratorInstanceAnd()",
      "171": "FieldValueGeneratorFactoryTest::::testCreateDayOfWeekValueGeneratorInstanceAnd()",
      "172": "FieldValueGeneratorFactoryTest::::testCreateDayOfWeekValueGeneratorInstanceAnd()",
      "173": "FieldValueGeneratorFactoryTest::::testCreateDayOfWeekValueGeneratorInstanceAnd()",
      "174": "FieldValueGeneratorFactoryTest::::testCreateDayOfWeekValueGeneratorInstanceAnd()",
      "175": "FieldValueGeneratorFactoryTest::::testCreateDayOfWeekValueGeneratorInstanceAnd()",
      "176": "FieldValueGeneratorFactoryTest::::testCreateDayOfWeekValueGeneratorInstanceAnd()",
      "177": "FieldValueGeneratorFactoryTest::::testCreateDayOfWeekValueGeneratorInstanceAnd()",
      "179": "FieldValueGeneratorFactoryTest::::testCreateDayOfWeekValueGeneratorInstanceBadCronFieldName()",
      "180": "FieldValueGeneratorFactoryTest::::testCreateDayOfWeekValueGeneratorInstanceBadCronFieldName()",
      "181": "FieldValueGeneratorFactoryTest::::testCreateDayOfWeekValueGeneratorInstanceBadCronFieldName()",
      "182": "FieldValueGeneratorFactoryTest::::testCreateDayOfWeekValueGeneratorInstanceBadCronFieldName()",
      "183": "FieldValueGeneratorFactoryTest::::testCreateDayOfWeekValueGeneratorInstanceBadCronFieldName()",
      "184": "FieldValueGeneratorFactoryTest::::testCreateDayOfWeekValueGeneratorInstanceBadCronFieldName()"
    },
    "tests": [
      {
        "test_lines": [
          40,
          44
        ],
        "covered_lines": [
          26,
          27,
          28
        ]
      },
      {
        "test_lines": [
          46,
          50
        ],
        "covered_lines": [
          26,
          27,
          30,
          31
        ]
      },
      {
        "test_lines": [
          52,
          56
        ],
        "covered_lines": [
          26,
          27,
          30,
          33,
          34
        ]
      },
      {
        "test_lines": [
          58,
          64
        ],
        "covered_lines": [
          26,
          27,
          30,
          33,
          36,
          39,
          40,
          41,
          44
        ]
      },
      {
        "test_lines": [
          66,
          82
        ],
        "covered_lines": [
          26,
          27,
          30,
          33,
          36,
          39,
          40,
          41,
          42
        ]
      },
      {
        "test_lines": [
          84,
          88
        ],
        "covered_lines": [
          26,
          27,
          30,
          33,
          36,
          39,
          46
        ]
      },
      {
        "test_lines": [
          90,
          96
        ],
        "covered_lines": [
          54,
          55,
          56,
          57,
          58
        ]
      },
      {
        "test_lines": [
          98,
          104
        ],
        "covered_lines": [
          54,
          55,
          56,
          57,
          58
        ]
      },
      {
        "test_lines": [
          106,
          112
        ],
        "covered_lines": [
          54,
          55,
          56,
          57,
          58
        ]
      },
      {
        "test_lines": [
          114,
          120
        ],
        "covered_lines": [
          54,
          55,
          56,
          57,
          58
        ]
      },
      {
        "test_lines": [
          122,
          128
        ],
        "covered_lines": [
          26,
          27,
          30,
          33,
          36,
          39,
          40,
          41,
          44,
          54,
          55,
          56,
          57,
          61
        ]
      },
      {
        "test_lines": [
          138,
          146
        ],
        "covered_lines": [
          54,
          55,
          56,
          57
        ]
      },
      {
        "test_lines": [
          148,
          156
        ],
        "covered_lines": [
          65,
          66,
          67
        ]
      },
      {
        "test_lines": [
          158,
          167
        ],
        "covered_lines": [
          65,
          66,
          70,
          71
        ]
      },
      {
        "test_lines": [
          169,
          177
        ],
        "covered_lines": [
          65,
          66,
          70,
          74,
          75
        ]
      },
      {
        "test_lines": [
          179,
          184
        ],
        "covered_lines": [
          65,
          66
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/cron-utils/src/main/java/com/cronutils/model/time/generator/BetweenDayOfWeekValueGenerator.java": {
    "class_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.time.generator;\n",
      "\n",
      "import com.cronutils.mapper.WeekDay;\n",
      "import com.cronutils.model.field.CronField;\n",
      "import com.cronutils.model.field.CronFieldName;\n",
      "import com.cronutils.model.field.constraint.FieldConstraintsBuilder;\n",
      "import com.cronutils.model.field.expression.Between;\n",
      "import com.cronutils.model.field.expression.FieldExpression;\n",
      "import com.cronutils.parser.CronParserField;\n",
      "import com.cronutils.utils.Preconditions;\n",
      "\n",
      "import java.time.LocalDate;\n",
      "import java.util.*;\n",
      "import java.util.stream.IntStream;\n",
      "\n",
      "/**\n",
      " * This class generates the actual days of month matching the \"days of week\" specification if the.\n",
      " * specification is a range like SUN-TUE or MON-FRI. Only a range is supported. It accomplishes this\n",
      " * by creating an instance of the OnDayOfWeekValuesGenerator for each day of week needed and then\n",
      " * aggregating the values.\n",
      " *\n",
      " * <p>The methods:\n",
      " * <ul>\n",
      " * <li>generateNextValue()\n",
      " * <li>generatePreviousValue()\n",
      " * </ul>\n",
      " * are not implemented and WILL FAIL logically when called.\n",
      " *\n",
      " * @author phethmon\n",
      " */\n",
      "class BetweenDayOfWeekValueGenerator extends FieldValueGenerator {\n",
      "    private final int year;\n",
      "    private final int month;\n",
      "    private final WeekDay mondayDoWValue;\n",
      "    private final Set<Integer> dowValidValues;\n",
      "\n",
      "    public BetweenDayOfWeekValueGenerator(final CronField cronField, final int year, final int month, final WeekDay mondayDoWValue) {\n",
      "        super(cronField);\n",
      "        Preconditions.checkArgument(CronFieldName.DAY_OF_WEEK.equals(cronField.getField()), \"CronField does not belong to day of week\");\n",
      "        this.year = year;\n",
      "        this.month = month;\n",
      "        this.mondayDoWValue = mondayDoWValue;\n",
      "        dowValidValues = new HashSet<>();\n",
      "        final Between between = (Between) cronField.getExpression();\n",
      "        int from = (Integer) between.getFrom().getValue();\n",
      "        final int to = (Integer) between.getTo().getValue();\n",
      "        if (to >= from) {\n",
      "            IntStream.rangeClosed(from, to).forEach(dowValidValues::add);\n",
      "        } else {\n",
      "            // Handle a rollover situation for #340, ex. FRI-WED should be handled as FRI-SAT,SUN-WED\n",
      "            IntStream.rangeClosed(from, cronField.getConstraints().getEndRange()).forEach(dowValidValues::add);\n",
      "            IntStream.rangeClosed(cronField.getConstraints().getStartRange(), to).forEach(dowValidValues::add);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected List<Integer> generateCandidatesNotIncludingIntervalExtremes(final int start, final int end) {\n",
      "        final List<Integer> values = new ArrayList<>();\n",
      "        for (Integer dayOfWeek: dowValidValues) {\n",
      "            // Build a CronField representing a single day of the week\n",
      "            final FieldConstraintsBuilder fcb = FieldConstraintsBuilder.instance().forField(CronFieldName.DAY_OF_WEEK);\n",
      "            final CronParserField parser = new CronParserField(CronFieldName.DAY_OF_WEEK, fcb.createConstraintsInstance());\n",
      "            final CronField cronField = parser.parse(dayOfWeek.toString());\n",
      "\n",
      "            // now a generator for matching days\n",
      "            final OnDayOfWeekValueGenerator odow = new OnDayOfWeekValueGenerator(cronField, year, month, mondayDoWValue);\n",
      "\n",
      "            // get the list of matching days\n",
      "            final List<Integer> candidatesList = odow.generateCandidates(start, end);\n",
      "\n",
      "            // add them to the master list\n",
      "            if (candidatesList != null) {\n",
      "                values.addAll(candidatesList);\n",
      "            }\n",
      "        }\n",
      "        Collections.sort(values);\n",
      "        return values;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected boolean matchesFieldExpressionClass(final FieldExpression fieldExpression) {\n",
      "        return fieldExpression instanceof Between;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public int generateNextValue(final int reference) throws NoSuchValueException {\n",
      "        // This method does not logically work.\n",
      "        return 0;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public int generatePreviousValue(final int reference) throws NoSuchValueException {\n",
      "        // This method does not logically work.\n",
      "        return 0;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public boolean isMatch(final int value) {\n",
      "        // DayOfWeek getValue returns 1 (Monday) - 7 (Sunday),\n",
      "        // so we should factor in the monday DoW used to generate\n",
      "        // the valid DoW values\n",
      "        final int localDateDoW = LocalDate.of(year, month, value).getDayOfWeek().getValue();\n",
      "\n",
      "        // Sunday's value is mondayDoWValue-1 when generating the valid values\n",
      "        // Ex.\n",
      "        // cron4j 0(Sun)-6(Sat), mondayDoW = 1\n",
      "        // quartz 1(Sun)-7(Sat), mondayDoW = 2\n",
      "\n",
      "        // modulo 7 to convert Sunday from 7 to 0 and adjust to match the mondayDoWValue\n",
      "        final int cronDoW = localDateDoW % 7 + (mondayDoWValue.getMondayDoWValue() - 1);\n",
      "\n",
      "        return dowValidValues.contains(cronDoW);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.time.generator;\n",
      "\n",
      "import com.cronutils.mapper.WeekDay;\n",
      "import com.cronutils.model.field.CronField;\n",
      "import com.cronutils.model.field.CronFieldName;\n",
      "import com.cronutils.model.field.constraint.FieldConstraintsBuilder;\n",
      "import com.cronutils.model.field.expression.Between;\n",
      "import com.cronutils.model.field.value.IntegerFieldValue;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import java.util.List;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.assertTrue;\n",
      "\n",
      "public class BetweenDayOfWeekValueGeneratorTest {\n",
      "\n",
      "    @Test\n",
      "    public void testGenerateCandidatesNotIncludingIntervalExtremes() {\n",
      "        //cron expression: DoW 1-5,\n",
      "        //on February 2016: 1-5, 8-12, 15-19, 22-26, 29\n",
      "        final CronField cronField = new CronField(CronFieldName.DAY_OF_WEEK, new Between(new IntegerFieldValue(1), new IntegerFieldValue(5)),\n",
      "                FieldConstraintsBuilder.instance().createConstraintsInstance());\n",
      "        final BetweenDayOfWeekValueGenerator generator = new BetweenDayOfWeekValueGenerator(cronField, 2016, 2, new WeekDay(1, true));\n",
      "        final List<Integer> values = generator.generateCandidates(1, 29);\n",
      "        validateInterval(1, 5, values);\n",
      "        validateInterval(8, 12, values);\n",
      "        validateInterval(15, 19, values);\n",
      "        validateInterval(22, 26, values);\n",
      "        assertTrue(values.contains(29));\n",
      "    }\n",
      "\n",
      "    private void validateInterval(final int start, final int end, final List<Integer> values) {\n",
      "        for (int j = start; j < end + 1; j++) {\n",
      "            assertTrue(values.contains(j), String.format(\"%s not contained in values\", j));\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "BetweenDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)": [
        69,
        91
      ],
      "BetweenDayOfWeekValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)": [
        93,
        96
      ],
      "BetweenDayOfWeekValueGenerator::::generateNextValue(int)": [
        98,
        102
      ],
      "BetweenDayOfWeekValueGenerator::::generatePreviousValue(int)": [
        104,
        108
      ],
      "BetweenDayOfWeekValueGenerator::::isMatch(int)": [
        110,
        126
      ]
    },
    "test_method_lines_dic": {
      "BetweenDayOfWeekValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()": [
        30,
        43
      ],
      "BetweenDayOfWeekValueGeneratorTest::::validateInterval(int,int,java.util.List<java.lang.Integer>)": [
        45,
        49
      ]
    },
    "reverse_method_lines_dic": {
      "69": "BetweenDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "70": "BetweenDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "71": "BetweenDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "72": "BetweenDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "73": "BetweenDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "74": "BetweenDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "75": "BetweenDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "76": "BetweenDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "77": "BetweenDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "78": "BetweenDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "79": "BetweenDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "80": "BetweenDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "81": "BetweenDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "82": "BetweenDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "83": "BetweenDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "84": "BetweenDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "85": "BetweenDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "86": "BetweenDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "87": "BetweenDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "88": "BetweenDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "89": "BetweenDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "90": "BetweenDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "91": "BetweenDayOfWeekValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "93": "BetweenDayOfWeekValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)",
      "94": "BetweenDayOfWeekValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)",
      "95": "BetweenDayOfWeekValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)",
      "96": "BetweenDayOfWeekValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)",
      "98": "BetweenDayOfWeekValueGenerator::::generateNextValue(int)",
      "99": "BetweenDayOfWeekValueGenerator::::generateNextValue(int)",
      "100": "BetweenDayOfWeekValueGenerator::::generateNextValue(int)",
      "101": "BetweenDayOfWeekValueGenerator::::generateNextValue(int)",
      "102": "BetweenDayOfWeekValueGenerator::::generateNextValue(int)",
      "104": "BetweenDayOfWeekValueGenerator::::generatePreviousValue(int)",
      "105": "BetweenDayOfWeekValueGenerator::::generatePreviousValue(int)",
      "106": "BetweenDayOfWeekValueGenerator::::generatePreviousValue(int)",
      "107": "BetweenDayOfWeekValueGenerator::::generatePreviousValue(int)",
      "108": "BetweenDayOfWeekValueGenerator::::generatePreviousValue(int)",
      "110": "BetweenDayOfWeekValueGenerator::::isMatch(int)",
      "111": "BetweenDayOfWeekValueGenerator::::isMatch(int)",
      "112": "BetweenDayOfWeekValueGenerator::::isMatch(int)",
      "113": "BetweenDayOfWeekValueGenerator::::isMatch(int)",
      "114": "BetweenDayOfWeekValueGenerator::::isMatch(int)",
      "115": "BetweenDayOfWeekValueGenerator::::isMatch(int)",
      "116": "BetweenDayOfWeekValueGenerator::::isMatch(int)",
      "117": "BetweenDayOfWeekValueGenerator::::isMatch(int)",
      "118": "BetweenDayOfWeekValueGenerator::::isMatch(int)",
      "119": "BetweenDayOfWeekValueGenerator::::isMatch(int)",
      "120": "BetweenDayOfWeekValueGenerator::::isMatch(int)",
      "121": "BetweenDayOfWeekValueGenerator::::isMatch(int)",
      "122": "BetweenDayOfWeekValueGenerator::::isMatch(int)",
      "123": "BetweenDayOfWeekValueGenerator::::isMatch(int)",
      "124": "BetweenDayOfWeekValueGenerator::::isMatch(int)",
      "125": "BetweenDayOfWeekValueGenerator::::isMatch(int)",
      "126": "BetweenDayOfWeekValueGenerator::::isMatch(int)"
    },
    "test_reverse_method_lines_dic": {
      "30": "BetweenDayOfWeekValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "31": "BetweenDayOfWeekValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "32": "BetweenDayOfWeekValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "33": "BetweenDayOfWeekValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "34": "BetweenDayOfWeekValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "35": "BetweenDayOfWeekValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "36": "BetweenDayOfWeekValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "37": "BetweenDayOfWeekValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "38": "BetweenDayOfWeekValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "39": "BetweenDayOfWeekValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "40": "BetweenDayOfWeekValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "41": "BetweenDayOfWeekValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "42": "BetweenDayOfWeekValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "43": "BetweenDayOfWeekValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "45": "BetweenDayOfWeekValueGeneratorTest::::validateInterval(int,int,java.util.List<java.lang.Integer>)",
      "46": "BetweenDayOfWeekValueGeneratorTest::::validateInterval(int,int,java.util.List<java.lang.Integer>)",
      "47": "BetweenDayOfWeekValueGeneratorTest::::validateInterval(int,int,java.util.List<java.lang.Integer>)",
      "48": "BetweenDayOfWeekValueGeneratorTest::::validateInterval(int,int,java.util.List<java.lang.Integer>)",
      "49": "BetweenDayOfWeekValueGeneratorTest::::validateInterval(int,int,java.util.List<java.lang.Integer>)"
    },
    "tests": [
      {
        "test_lines": [
          30,
          43
        ],
        "covered_lines": [
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          59,
          60,
          61,
          67,
          71,
          72,
          74,
          75,
          76,
          79,
          82,
          85,
          86,
          88,
          89,
          90,
          95,
          115,
          123,
          125
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/cron-utils/src/main/java/com/cronutils/model/time/generator/OnDayOfMonthValueGenerator.java": {
    "class_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.time.generator;\n",
      "\n",
      "import com.cronutils.model.field.CronField;\n",
      "import com.cronutils.model.field.CronFieldName;\n",
      "import com.cronutils.model.field.expression.FieldExpression;\n",
      "import com.cronutils.model.field.expression.On;\n",
      "import com.cronutils.utils.Preconditions;\n",
      "\n",
      "import java.time.DayOfWeek;\n",
      "import java.time.LocalDate;\n",
      "\n",
      "class OnDayOfMonthValueGenerator extends OnDayOfCalendarValueGenerator {\n",
      "\n",
      "    public OnDayOfMonthValueGenerator(final CronField cronField, final int year, final int month) {\n",
      "        super(cronField, year, month);\n",
      "        Preconditions.checkArgument(CronFieldName.DAY_OF_MONTH.equals(cronField.getField()), \"CronField does not belong to day of month\");\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public int generateNextValue(final int reference) throws NoSuchValueException {\n",
      "        final On on = ((On) cronField.getExpression());\n",
      "        final int value = generateValue(on, year, month);\n",
      "\n",
      "        if (value <= reference) {\n",
      "            throw new NoSuchValueException();\n",
      "        }\n",
      "        return value;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public int generatePreviousValue(final int reference) throws NoSuchValueException {\n",
      "        final On on = ((On) cronField.getExpression());\n",
      "        final int value = generateValue(on, year, month);\n",
      "        if (value >= reference) {\n",
      "            throw new NoSuchValueException();\n",
      "        }\n",
      "        return value;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public boolean isMatch(final int value) {\n",
      "        final On on = ((On) cronField.getExpression());\n",
      "        try {\n",
      "            return value == generateValue(on, year, month);\n",
      "        } catch (final NoSuchValueException ignored) {\n",
      "            //we just skip, since we generate values until we get the exception\n",
      "        }\n",
      "        return false;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected boolean matchesFieldExpressionClass(final FieldExpression fieldExpression) {\n",
      "        return fieldExpression instanceof On;\n",
      "    }\n",
      "\n",
      "    private int generateValue(final On on, final int year, final int month) throws NoSuchValueException {\n",
      "        final int dayOfMonth = on.getTime().getValue();\n",
      "        switch (on.getSpecialChar().getValue()) {\n",
      "            case L:\n",
      "                final int daysBefore = on.getNth().getValue();\n",
      "                return LocalDate.of(year, month, 1).lengthOfMonth() - (daysBefore > 0 ? daysBefore : 0);\n",
      "            case W: // First work day of the week\n",
      "                final LocalDate doM = LocalDate.of(year, month, dayOfMonth);\n",
      "                if (doM.getDayOfWeek() == DayOfWeek.SATURDAY) { //dayOfWeek is Saturday!\n",
      "                    if (dayOfMonth == 1) { //first day in month is Saturday! We execute on Monday\n",
      "                        return 3;\n",
      "                    }\n",
      "                    return dayOfMonth - 1;\n",
      "                }\n",
      "                if (doM.getDayOfWeek() == DayOfWeek.SUNDAY && (dayOfMonth + 1) <= doM.lengthOfMonth()) {\n",
      "                    return dayOfMonth + 1;\n",
      "                }\n",
      "                return dayOfMonth;  // first day of week is a weekday\n",
      "            case LW:\n",
      "                final LocalDate lastDayOfMonth = LocalDate.of(year, month, LocalDate.of(year, month, 1).lengthOfMonth());\n",
      "                final int dow = lastDayOfMonth.getDayOfWeek().getValue();\n",
      "                final int diff = dow - 5;\n",
      "                if (diff > 0) {\n",
      "                    return lastDayOfMonth.minusDays(diff).getDayOfMonth();\n",
      "                }\n",
      "                return lastDayOfMonth.getDayOfMonth();\n",
      "            default:\n",
      "                throw new NoSuchValueException();\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.time.generator;\n",
      "\n",
      "import com.cronutils.model.field.CronField;\n",
      "import com.cronutils.model.field.CronFieldName;\n",
      "import com.cronutils.model.field.constraint.FieldConstraints;\n",
      "import com.cronutils.model.field.constraint.FieldConstraintsBuilder;\n",
      "import com.cronutils.model.field.expression.FieldExpression;\n",
      "import com.cronutils.model.field.expression.On;\n",
      "import com.cronutils.model.field.value.IntegerFieldValue;\n",
      "import org.junit.jupiter.api.BeforeEach;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import java.util.Random;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.assertFalse;\n",
      "import static org.junit.jupiter.api.Assertions.assertThrows;\n",
      "import static org.junit.jupiter.api.Assertions.assertTrue;\n",
      "import static org.mockito.Mockito.mock;\n",
      "\n",
      "public class OnDayOfMonthValueGeneratorTest {\n",
      "    private OnDayOfMonthValueGenerator fieldValueGenerator;\n",
      "    private FieldConstraints constraints;\n",
      "    private static final int YEAR = 2015;\n",
      "    private static final int MONTH = 2;\n",
      "    private final Random random = new Random();\n",
      "\n",
      "    @BeforeEach\n",
      "    public void setUp() {\n",
      "        constraints = FieldConstraintsBuilder.instance().createConstraintsInstance();\n",
      "        fieldValueGenerator =\n",
      "                new OnDayOfMonthValueGenerator(\n",
      "                        new CronField(\n",
      "                                CronFieldName.DAY_OF_MONTH,\n",
      "                                new On(new IntegerFieldValue(3)), constraints),\n",
      "                        YEAR, MONTH);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGenerateNextValue() {\n",
      "        assertThrows(NoSuchValueException.class, () -> fieldValueGenerator.generateNextValue(randomNumber()));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGeneratePreviousValue() {\n",
      "        assertThrows(NoSuchValueException.class, () -> fieldValueGenerator.generatePreviousValue(randomNumber()));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testMatchesFieldExpressionClass() {\n",
      "        assertTrue(fieldValueGenerator.matchesFieldExpressionClass(mock(On.class)));\n",
      "        assertFalse(fieldValueGenerator.matchesFieldExpressionClass(mock(FieldExpression.class)));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testConstructorNotMatchesOn() {\n",
      "        assertThrows(IllegalArgumentException.class, () -> new OnDayOfMonthValueGenerator(new CronField(CronFieldName.YEAR, mock(FieldExpression.class), constraints), YEAR, MONTH));\n",
      "    }\n",
      "\n",
      "    private int randomNumber() {\n",
      "        return random.nextInt(10);\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "OnDayOfMonthValueGenerator::::generateNextValue(int)": [
        32,
        41
      ],
      "OnDayOfMonthValueGenerator::::generatePreviousValue(int)": [
        43,
        51
      ],
      "OnDayOfMonthValueGenerator::::isMatch(int)": [
        53,
        62
      ],
      "OnDayOfMonthValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)": [
        64,
        67
      ],
      "OnDayOfMonthValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int)": [
        69,
        98
      ]
    },
    "test_method_lines_dic": {
      "OnDayOfMonthValueGeneratorTest::::setUp()": [
        40,
        49
      ],
      "OnDayOfMonthValueGeneratorTest::::testGenerateNextValue()": [
        51,
        54
      ],
      "OnDayOfMonthValueGeneratorTest::::testGeneratePreviousValue()": [
        56,
        59
      ],
      "OnDayOfMonthValueGeneratorTest::::testMatchesFieldExpressionClass()": [
        61,
        65
      ],
      "OnDayOfMonthValueGeneratorTest::::testConstructorNotMatchesOn()": [
        67,
        70
      ],
      "OnDayOfMonthValueGeneratorTest::::randomNumber()": [
        72,
        74
      ]
    },
    "reverse_method_lines_dic": {
      "32": "OnDayOfMonthValueGenerator::::generateNextValue(int)",
      "33": "OnDayOfMonthValueGenerator::::generateNextValue(int)",
      "34": "OnDayOfMonthValueGenerator::::generateNextValue(int)",
      "35": "OnDayOfMonthValueGenerator::::generateNextValue(int)",
      "36": "OnDayOfMonthValueGenerator::::generateNextValue(int)",
      "37": "OnDayOfMonthValueGenerator::::generateNextValue(int)",
      "38": "OnDayOfMonthValueGenerator::::generateNextValue(int)",
      "39": "OnDayOfMonthValueGenerator::::generateNextValue(int)",
      "40": "OnDayOfMonthValueGenerator::::generateNextValue(int)",
      "41": "OnDayOfMonthValueGenerator::::generateNextValue(int)",
      "43": "OnDayOfMonthValueGenerator::::generatePreviousValue(int)",
      "44": "OnDayOfMonthValueGenerator::::generatePreviousValue(int)",
      "45": "OnDayOfMonthValueGenerator::::generatePreviousValue(int)",
      "46": "OnDayOfMonthValueGenerator::::generatePreviousValue(int)",
      "47": "OnDayOfMonthValueGenerator::::generatePreviousValue(int)",
      "48": "OnDayOfMonthValueGenerator::::generatePreviousValue(int)",
      "49": "OnDayOfMonthValueGenerator::::generatePreviousValue(int)",
      "50": "OnDayOfMonthValueGenerator::::generatePreviousValue(int)",
      "51": "OnDayOfMonthValueGenerator::::generatePreviousValue(int)",
      "53": "OnDayOfMonthValueGenerator::::isMatch(int)",
      "54": "OnDayOfMonthValueGenerator::::isMatch(int)",
      "55": "OnDayOfMonthValueGenerator::::isMatch(int)",
      "56": "OnDayOfMonthValueGenerator::::isMatch(int)",
      "57": "OnDayOfMonthValueGenerator::::isMatch(int)",
      "58": "OnDayOfMonthValueGenerator::::isMatch(int)",
      "59": "OnDayOfMonthValueGenerator::::isMatch(int)",
      "60": "OnDayOfMonthValueGenerator::::isMatch(int)",
      "61": "OnDayOfMonthValueGenerator::::isMatch(int)",
      "62": "OnDayOfMonthValueGenerator::::isMatch(int)",
      "64": "OnDayOfMonthValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)",
      "65": "OnDayOfMonthValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)",
      "66": "OnDayOfMonthValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)",
      "67": "OnDayOfMonthValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)",
      "69": "OnDayOfMonthValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int)",
      "70": "OnDayOfMonthValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int)",
      "71": "OnDayOfMonthValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int)",
      "72": "OnDayOfMonthValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int)",
      "73": "OnDayOfMonthValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int)",
      "74": "OnDayOfMonthValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int)",
      "75": "OnDayOfMonthValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int)",
      "76": "OnDayOfMonthValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int)",
      "77": "OnDayOfMonthValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int)",
      "78": "OnDayOfMonthValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int)",
      "79": "OnDayOfMonthValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int)",
      "80": "OnDayOfMonthValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int)",
      "81": "OnDayOfMonthValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int)",
      "82": "OnDayOfMonthValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int)",
      "83": "OnDayOfMonthValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int)",
      "84": "OnDayOfMonthValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int)",
      "85": "OnDayOfMonthValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int)",
      "86": "OnDayOfMonthValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int)",
      "87": "OnDayOfMonthValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int)",
      "88": "OnDayOfMonthValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int)",
      "89": "OnDayOfMonthValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int)",
      "90": "OnDayOfMonthValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int)",
      "91": "OnDayOfMonthValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int)",
      "92": "OnDayOfMonthValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int)",
      "93": "OnDayOfMonthValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int)",
      "94": "OnDayOfMonthValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int)",
      "95": "OnDayOfMonthValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int)",
      "96": "OnDayOfMonthValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int)",
      "97": "OnDayOfMonthValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int)",
      "98": "OnDayOfMonthValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int)"
    },
    "test_reverse_method_lines_dic": {
      "40": "OnDayOfMonthValueGeneratorTest::::setUp()",
      "41": "OnDayOfMonthValueGeneratorTest::::setUp()",
      "42": "OnDayOfMonthValueGeneratorTest::::setUp()",
      "43": "OnDayOfMonthValueGeneratorTest::::setUp()",
      "44": "OnDayOfMonthValueGeneratorTest::::setUp()",
      "45": "OnDayOfMonthValueGeneratorTest::::setUp()",
      "46": "OnDayOfMonthValueGeneratorTest::::setUp()",
      "47": "OnDayOfMonthValueGeneratorTest::::setUp()",
      "48": "OnDayOfMonthValueGeneratorTest::::setUp()",
      "49": "OnDayOfMonthValueGeneratorTest::::setUp()",
      "51": "OnDayOfMonthValueGeneratorTest::::testGenerateNextValue()",
      "52": "OnDayOfMonthValueGeneratorTest::::testGenerateNextValue()",
      "53": "OnDayOfMonthValueGeneratorTest::::testGenerateNextValue()",
      "54": "OnDayOfMonthValueGeneratorTest::::testGenerateNextValue()",
      "56": "OnDayOfMonthValueGeneratorTest::::testGeneratePreviousValue()",
      "57": "OnDayOfMonthValueGeneratorTest::::testGeneratePreviousValue()",
      "58": "OnDayOfMonthValueGeneratorTest::::testGeneratePreviousValue()",
      "59": "OnDayOfMonthValueGeneratorTest::::testGeneratePreviousValue()",
      "61": "OnDayOfMonthValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "62": "OnDayOfMonthValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "63": "OnDayOfMonthValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "64": "OnDayOfMonthValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "65": "OnDayOfMonthValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "67": "OnDayOfMonthValueGeneratorTest::::testConstructorNotMatchesOn()",
      "68": "OnDayOfMonthValueGeneratorTest::::testConstructorNotMatchesOn()",
      "69": "OnDayOfMonthValueGeneratorTest::::testConstructorNotMatchesOn()",
      "70": "OnDayOfMonthValueGeneratorTest::::testConstructorNotMatchesOn()",
      "72": "OnDayOfMonthValueGeneratorTest::::randomNumber()",
      "73": "OnDayOfMonthValueGeneratorTest::::randomNumber()",
      "74": "OnDayOfMonthValueGeneratorTest::::randomNumber()"
    },
    "tests": [
      {
        "test_lines": [
          51,
          54
        ],
        "covered_lines": [
          28,
          29,
          30,
          34,
          66,
          70,
          71,
          96
        ]
      },
      {
        "test_lines": [
          56,
          59
        ],
        "covered_lines": [
          28,
          29,
          30,
          45,
          66,
          70,
          71,
          96
        ]
      },
      {
        "test_lines": [
          61,
          65
        ],
        "covered_lines": [
          28,
          29,
          30,
          66
        ]
      },
      {
        "test_lines": [
          67,
          70
        ],
        "covered_lines": [
          28,
          29,
          30,
          66
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/cron-utils/src/main/java/com/cronutils/model/time/generator/FieldValueGenerator.java": {
    "class_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.time.generator;\n",
      "\n",
      "import com.cronutils.model.field.CronField;\n",
      "import com.cronutils.model.field.expression.FieldExpression;\n",
      "import com.cronutils.utils.Preconditions;\n",
      "\n",
      "import java.util.Collections;\n",
      "import java.util.HashSet;\n",
      "import java.util.LinkedList;\n",
      "import java.util.List;\n",
      "\n",
      "/**\n",
      " * Provides a strategy to generate values. Strategy is valid for 0+ numbers\n",
      " */\n",
      "public abstract class FieldValueGenerator {\n",
      "\n",
      "    protected static final int NO_VALUE = Integer.MIN_VALUE;\n",
      "    protected CronField cronField;\n",
      "\n",
      "    public FieldValueGenerator(final CronField cronField) {\n",
      "        this.cronField = Preconditions.checkNotNull(cronField, \"CronField must not be null\");\n",
      "        Preconditions.checkArgument(matchesFieldExpressionClass(cronField.getExpression()), \"FieldExpression does not match required class\");\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Generates next valid value from reference.\n",
      "     *\n",
      "     * @param reference - reference value\n",
      "     * @return generated value - Integer\n",
      "     * @throws NoSuchValueException - if there is no next value\n",
      "     */\n",
      "    public abstract int generateNextValue(int reference) throws NoSuchValueException;\n",
      "\n",
      "    /**\n",
      "     * Generates previous valid value from reference.\n",
      "     *\n",
      "     * @param reference - reference value\n",
      "     * @return generated value - Integer\n",
      "     * @throws NoSuchValueException - if there is no previous value\n",
      "     */\n",
      "    public abstract int generatePreviousValue(int reference) throws NoSuchValueException;\n",
      "\n",
      "    protected abstract List<Integer> generateCandidatesNotIncludingIntervalExtremes(int start, int end);\n",
      "\n",
      "    public abstract boolean isMatch(int value);\n",
      "\n",
      "    public final List<Integer> generateCandidates(final int start, final int end) {\n",
      "        List<Integer> candidates = generateCandidatesNotIncludingIntervalExtremes(start, end);\n",
      "        if (isMatch(start)) {\n",
      "            candidates.add(start);\n",
      "        }\n",
      "        if (isMatch(end)) {\n",
      "            candidates.add(end);\n",
      "        }\n",
      "        candidates = new LinkedList<>(new HashSet<>(candidates));\n",
      "        Collections.sort(candidates);\n",
      "        return candidates;\n",
      "    }\n",
      "\n",
      "    protected abstract boolean matchesFieldExpressionClass(FieldExpression fieldExpression);\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.time.generator;\n",
      "\n",
      "import com.cronutils.model.field.CronField;\n",
      "import com.cronutils.model.field.CronFieldName;\n",
      "import com.cronutils.model.field.constraint.FieldConstraints;\n",
      "import com.cronutils.model.field.expression.FieldExpression;\n",
      "import org.junit.jupiter.api.BeforeEach;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import java.util.List;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.*;\n",
      "import static org.mockito.Mockito.mock;\n",
      "\n",
      "public class FieldValueGeneratorTest {\n",
      "    private FieldValueGenerator fieldValueGenerator;\n",
      "\n",
      "    @BeforeEach\n",
      "    public void setUp() {\n",
      "        fieldValueGenerator = new MockFieldValueGenerator(new CronField(CronFieldName.HOUR, mock(FieldExpression.class), mock(FieldConstraints.class)));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGenerateCandidates() {\n",
      "        final int start = 1;\n",
      "        final int end = 2;\n",
      "        assertTrue(fieldValueGenerator.generateCandidatesNotIncludingIntervalExtremes(start, end).isEmpty());\n",
      "        final List<Integer> candidates = fieldValueGenerator.generateCandidates(1, 2);\n",
      "        assertFalse(candidates.isEmpty());\n",
      "        assertEquals(2, candidates.size());\n",
      "        assertTrue(candidates.contains(start));\n",
      "        assertTrue(candidates.contains(end));\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "FieldValueGenerator::::generateNextValue(int)": [
        45,
        45
      ],
      "FieldValueGenerator::::generatePreviousValue(int)": [
        54,
        54
      ],
      "FieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)": [
        56,
        56
      ],
      "FieldValueGenerator::::isMatch(int)": [
        58,
        58
      ],
      "FieldValueGenerator::::generateCandidates(int,int)": [
        60,
        71
      ],
      "FieldValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)": [
        73,
        73
      ]
    },
    "test_method_lines_dic": {
      "FieldValueGeneratorTest::::setUp()": [
        31,
        34
      ],
      "FieldValueGeneratorTest::::testGenerateCandidates()": [
        36,
        46
      ]
    },
    "reverse_method_lines_dic": {
      "45": "FieldValueGenerator::::generateNextValue(int)",
      "54": "FieldValueGenerator::::generatePreviousValue(int)",
      "56": "FieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "58": "FieldValueGenerator::::isMatch(int)",
      "60": "FieldValueGenerator::::generateCandidates(int,int)",
      "61": "FieldValueGenerator::::generateCandidates(int,int)",
      "62": "FieldValueGenerator::::generateCandidates(int,int)",
      "63": "FieldValueGenerator::::generateCandidates(int,int)",
      "64": "FieldValueGenerator::::generateCandidates(int,int)",
      "65": "FieldValueGenerator::::generateCandidates(int,int)",
      "66": "FieldValueGenerator::::generateCandidates(int,int)",
      "67": "FieldValueGenerator::::generateCandidates(int,int)",
      "68": "FieldValueGenerator::::generateCandidates(int,int)",
      "69": "FieldValueGenerator::::generateCandidates(int,int)",
      "70": "FieldValueGenerator::::generateCandidates(int,int)",
      "71": "FieldValueGenerator::::generateCandidates(int,int)",
      "73": "FieldValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)"
    },
    "test_reverse_method_lines_dic": {
      "31": "FieldValueGeneratorTest::::setUp()",
      "32": "FieldValueGeneratorTest::::setUp()",
      "33": "FieldValueGeneratorTest::::setUp()",
      "34": "FieldValueGeneratorTest::::setUp()",
      "36": "FieldValueGeneratorTest::::testGenerateCandidates()",
      "37": "FieldValueGeneratorTest::::testGenerateCandidates()",
      "38": "FieldValueGeneratorTest::::testGenerateCandidates()",
      "39": "FieldValueGeneratorTest::::testGenerateCandidates()",
      "40": "FieldValueGeneratorTest::::testGenerateCandidates()",
      "41": "FieldValueGeneratorTest::::testGenerateCandidates()",
      "42": "FieldValueGeneratorTest::::testGenerateCandidates()",
      "43": "FieldValueGeneratorTest::::testGenerateCandidates()",
      "44": "FieldValueGeneratorTest::::testGenerateCandidates()",
      "45": "FieldValueGeneratorTest::::testGenerateCandidates()",
      "46": "FieldValueGeneratorTest::::testGenerateCandidates()"
    },
    "tests": [
      {
        "test_lines": [
          36,
          46
        ],
        "covered_lines": [
          33,
          34,
          35,
          36,
          61,
          62,
          63,
          65,
          66,
          68,
          69,
          70
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/cron-utils/src/main/java/com/cronutils/model/time/generator/AndFieldValueGenerator.java": {
    "class_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.time.generator;\n",
      "\n",
      "import com.cronutils.Function;\n",
      "import com.cronutils.model.field.CronField;\n",
      "import com.cronutils.model.field.expression.*;\n",
      "import org.slf4j.Logger;\n",
      "import org.slf4j.LoggerFactory;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.Collections;\n",
      "import java.util.List;\n",
      "\n",
      "class AndFieldValueGenerator extends FieldValueGenerator {\n",
      "    private static final Logger log = LoggerFactory.getLogger(AndFieldValueGenerator.class);\n",
      "\n",
      "    public AndFieldValueGenerator(final CronField cronField) {\n",
      "        super(cronField);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public int generateNextValue(final int reference) throws NoSuchValueException {\n",
      "        final List<Integer> candidates = computeCandidates(\n",
      "                fieldValueGenerator -> {\n",
      "                    try {\n",
      "                        return fieldValueGenerator.generateNextValue(reference);\n",
      "                    } catch (final NoSuchValueException e) {\n",
      "                        return NO_VALUE;\n",
      "                    }\n",
      "                }\n",
      "\n",
      "        );\n",
      "        if (candidates.isEmpty()) {\n",
      "            throw new NoSuchValueException();\n",
      "        } else {\n",
      "            return candidates.get(0);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public int generatePreviousValue(final int reference) throws NoSuchValueException {\n",
      "        final List<Integer> candidates = computeCandidates(\n",
      "                candidateGenerator -> {\n",
      "                    try {\n",
      "                        return candidateGenerator.generatePreviousValue(reference);\n",
      "                    } catch (final NoSuchValueException e) {\n",
      "                        return NO_VALUE;\n",
      "                    }\n",
      "                }\n",
      "\n",
      "        );\n",
      "        if (candidates.isEmpty()) {\n",
      "            throw new NoSuchValueException();\n",
      "        } else {\n",
      "            return candidates.get(candidates.size() - 1);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected List<Integer> generateCandidatesNotIncludingIntervalExtremes(final int start, final int end) {\n",
      "        final List<Integer> values = new ArrayList<>();\n",
      "        try {\n",
      "            int reference = generateNextValue(start);\n",
      "            while (reference < end) {\n",
      "                values.add(reference);\n",
      "                reference = generateNextValue(reference);\n",
      "            }\n",
      "        } catch (final NoSuchValueException e) {\n",
      "            log.debug(\"Catched expected exception while generating candidates\", e);\n",
      "        }\n",
      "        return values;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public boolean isMatch(final int value) {\n",
      "        final And and = (And) cronField.getExpression();\n",
      "        boolean match = false;\n",
      "        for (final FieldExpression expression : and.getExpressions()) {\n",
      "            match = match || createCandidateGeneratorInstance(new CronField(cronField.getField(), expression, cronField.getConstraints())).isMatch(value);\n",
      "        }\n",
      "        return match;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected boolean matchesFieldExpressionClass(final FieldExpression fieldExpression) {\n",
      "        return fieldExpression instanceof And;\n",
      "    }\n",
      "\n",
      "    private List<Integer> computeCandidates(final Function<FieldValueGenerator, Integer> function) {\n",
      "        final And and = (And) cronField.getExpression();\n",
      "        final List<Integer> candidates = new ArrayList<>();\n",
      "        for (final FieldExpression expression : and.getExpressions()) {\n",
      "            candidates.add(\n",
      "                    function.apply(\n",
      "                                createCandidateGeneratorInstance(new CronField(cronField.getField(), expression, cronField.getConstraints()))\n",
      "                    )\n",
      "            );\n",
      "        }\n",
      "        final List<Integer> filteredCandidates = new ArrayList<>();\n",
      "        for (final Integer candidate : candidates) {\n",
      "            if (candidate >= 0) {\n",
      "                filteredCandidates.add(candidate);\n",
      "            }\n",
      "        }\n",
      "        Collections.sort(filteredCandidates);\n",
      "        return filteredCandidates;\n",
      "    }\n",
      "\n",
      "    private FieldValueGenerator createCandidateGeneratorInstance(final CronField cronField) {\n",
      "        final FieldExpression expression = cronField.getExpression();\n",
      "        if (expression instanceof Always) {\n",
      "            return new AlwaysFieldValueGenerator(cronField);\n",
      "        }\n",
      "        if (expression instanceof Between) {\n",
      "            return new BetweenFieldValueGenerator(cronField);\n",
      "        }\n",
      "        if (expression instanceof Every) {\n",
      "            return new EveryFieldValueGenerator(cronField);\n",
      "        }\n",
      "        if (expression instanceof On) {\n",
      "            return new OnFieldValueGenerator(cronField);\n",
      "        }\n",
      "        throw new IllegalArgumentException(String.format(\"FieldExpression %s not supported!\", expression.getClass()));\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.time.generator;\n",
      "\n",
      "import com.cronutils.model.field.CronField;\n",
      "import com.cronutils.model.field.CronFieldName;\n",
      "import com.cronutils.model.field.constraint.FieldConstraints;\n",
      "import com.cronutils.model.field.constraint.FieldConstraintsBuilder;\n",
      "import com.cronutils.model.field.expression.And;\n",
      "import com.cronutils.model.field.expression.FieldExpression;\n",
      "import com.cronutils.model.field.expression.On;\n",
      "import com.cronutils.model.field.value.IntegerFieldValue;\n",
      "import org.junit.jupiter.api.BeforeEach;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import java.util.List;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.*;\n",
      "import static org.mockito.Mockito.mock;\n",
      "\n",
      "public class AndFieldValueGeneratorTest {\n",
      "    private AndFieldValueGenerator fieldValueGenerator;\n",
      "    private FieldConstraints constraints;\n",
      "\n",
      "    private static final int VALUE0 = 0;\n",
      "    private static final int VALUE1 = 1;\n",
      "    private static final int VALUE2 = 2;\n",
      "\n",
      "    private static final int NOT_CONSIDERED_VALUE = 7;\n",
      "\n",
      "    @BeforeEach\n",
      "    public void setUp() {\n",
      "        constraints = FieldConstraintsBuilder.instance().createConstraintsInstance();\n",
      "        fieldValueGenerator =\n",
      "                new AndFieldValueGenerator(\n",
      "                        new CronField(\n",
      "                                CronFieldName.MONTH,\n",
      "                                new And()\n",
      "                                        .and(new On(new IntegerFieldValue(VALUE0)))\n",
      "                                        .and(new On(new IntegerFieldValue(VALUE1)))\n",
      "                                        .and(new On(new IntegerFieldValue(VALUE2))),\n",
      "                                constraints)\n",
      "                );\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGenerateNextValue() throws NoSuchValueException {\n",
      "        assertEquals(VALUE0, fieldValueGenerator.generateNextValue(VALUE0 - 1));\n",
      "        assertEquals(VALUE1, fieldValueGenerator.generateNextValue(VALUE1 - 1));\n",
      "        assertEquals(VALUE2, fieldValueGenerator.generateNextValue(VALUE2 - 1));\n",
      "        assertThrows(NoSuchValueException.class, () -> fieldValueGenerator.generateNextValue(VALUE2));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGeneratePreviousValue() throws NoSuchValueException {\n",
      "        assertEquals(VALUE2, fieldValueGenerator.generatePreviousValue(VALUE2 + 1));\n",
      "        assertEquals(VALUE1, fieldValueGenerator.generatePreviousValue(VALUE1 + 1));\n",
      "        assertEquals(VALUE0, fieldValueGenerator.generatePreviousValue(VALUE0 + 1));\n",
      "        assertThrows(NoSuchValueException.class, () -> fieldValueGenerator.generatePreviousValue(VALUE0));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGenerateCandidatesNotIncludingIntervalExtremes() {\n",
      "        final List<Integer> candidates = fieldValueGenerator.generateCandidatesNotIncludingIntervalExtremes(VALUE0, VALUE2);\n",
      "        assertEquals(1, candidates.size());\n",
      "        assertEquals(VALUE1, candidates.get(0), 0);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testIsMatch() {\n",
      "        assertTrue(fieldValueGenerator.isMatch(VALUE0));\n",
      "        assertTrue(fieldValueGenerator.isMatch(VALUE1));\n",
      "        assertTrue(fieldValueGenerator.isMatch(VALUE2));\n",
      "        assertFalse(fieldValueGenerator.isMatch(NOT_CONSIDERED_VALUE));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testMatchesFieldExpressionClass() {\n",
      "        assertTrue(fieldValueGenerator.matchesFieldExpressionClass(mock(And.class)));\n",
      "        assertFalse(fieldValueGenerator.matchesFieldExpressionClass(mock(FieldExpression.class)));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testConstructorNotMatchesAnd() {\n",
      "        assertThrows(IllegalArgumentException.class, () -> new AndFieldValueGenerator(new CronField(CronFieldName.HOUR, mock(FieldExpression.class), constraints)));\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "AndFieldValueGenerator::::generateNextValue(int)": [
        33,
        50
      ],
      "AndFieldValueGenerator::::generatePreviousValue(int)": [
        52,
        69
      ],
      "AndFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)": [
        71,
        84
      ],
      "AndFieldValueGenerator::::isMatch(int)": [
        86,
        94
      ],
      "AndFieldValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)": [
        96,
        99
      ],
      "AndFieldValueGenerator::::computeCandidates(com.cronutils.Function<com.cronutils.model.time.generator.FieldValueGenerator, java.lang.Integer>)": [
        101,
        119
      ],
      "AndFieldValueGenerator::::createCandidateGeneratorInstance(com.cronutils.model.field.CronField)": [
        121,
        136
      ]
    },
    "test_method_lines_dic": {
      "AndFieldValueGeneratorTest::::setUp()": [
        42,
        55
      ],
      "AndFieldValueGeneratorTest::::testGenerateNextValue()": [
        57,
        63
      ],
      "AndFieldValueGeneratorTest::::testGeneratePreviousValue()": [
        65,
        71
      ],
      "AndFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()": [
        73,
        78
      ],
      "AndFieldValueGeneratorTest::::testIsMatch()": [
        80,
        86
      ],
      "AndFieldValueGeneratorTest::::testMatchesFieldExpressionClass()": [
        88,
        92
      ],
      "AndFieldValueGeneratorTest::::testConstructorNotMatchesAnd()": [
        94,
        97
      ]
    },
    "reverse_method_lines_dic": {
      "33": "AndFieldValueGenerator::::generateNextValue(int)",
      "34": "AndFieldValueGenerator::::generateNextValue(int)",
      "35": "AndFieldValueGenerator::::generateNextValue(int)",
      "36": "AndFieldValueGenerator::::generateNextValue(int)",
      "37": "AndFieldValueGenerator::::generateNextValue(int)",
      "38": "AndFieldValueGenerator::::generateNextValue(int)",
      "39": "AndFieldValueGenerator::::generateNextValue(int)",
      "40": "AndFieldValueGenerator::::generateNextValue(int)",
      "41": "AndFieldValueGenerator::::generateNextValue(int)",
      "42": "AndFieldValueGenerator::::generateNextValue(int)",
      "43": "AndFieldValueGenerator::::generateNextValue(int)",
      "44": "AndFieldValueGenerator::::generateNextValue(int)",
      "45": "AndFieldValueGenerator::::generateNextValue(int)",
      "46": "AndFieldValueGenerator::::generateNextValue(int)",
      "47": "AndFieldValueGenerator::::generateNextValue(int)",
      "48": "AndFieldValueGenerator::::generateNextValue(int)",
      "49": "AndFieldValueGenerator::::generateNextValue(int)",
      "50": "AndFieldValueGenerator::::generateNextValue(int)",
      "52": "AndFieldValueGenerator::::generatePreviousValue(int)",
      "53": "AndFieldValueGenerator::::generatePreviousValue(int)",
      "54": "AndFieldValueGenerator::::generatePreviousValue(int)",
      "55": "AndFieldValueGenerator::::generatePreviousValue(int)",
      "56": "AndFieldValueGenerator::::generatePreviousValue(int)",
      "57": "AndFieldValueGenerator::::generatePreviousValue(int)",
      "58": "AndFieldValueGenerator::::generatePreviousValue(int)",
      "59": "AndFieldValueGenerator::::generatePreviousValue(int)",
      "60": "AndFieldValueGenerator::::generatePreviousValue(int)",
      "61": "AndFieldValueGenerator::::generatePreviousValue(int)",
      "62": "AndFieldValueGenerator::::generatePreviousValue(int)",
      "63": "AndFieldValueGenerator::::generatePreviousValue(int)",
      "64": "AndFieldValueGenerator::::generatePreviousValue(int)",
      "65": "AndFieldValueGenerator::::generatePreviousValue(int)",
      "66": "AndFieldValueGenerator::::generatePreviousValue(int)",
      "67": "AndFieldValueGenerator::::generatePreviousValue(int)",
      "68": "AndFieldValueGenerator::::generatePreviousValue(int)",
      "69": "AndFieldValueGenerator::::generatePreviousValue(int)",
      "71": "AndFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "72": "AndFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "73": "AndFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "74": "AndFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "75": "AndFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "76": "AndFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "77": "AndFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "78": "AndFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "79": "AndFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "80": "AndFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "81": "AndFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "82": "AndFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "83": "AndFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "84": "AndFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "86": "AndFieldValueGenerator::::isMatch(int)",
      "87": "AndFieldValueGenerator::::isMatch(int)",
      "88": "AndFieldValueGenerator::::isMatch(int)",
      "89": "AndFieldValueGenerator::::isMatch(int)",
      "90": "AndFieldValueGenerator::::isMatch(int)",
      "91": "AndFieldValueGenerator::::isMatch(int)",
      "92": "AndFieldValueGenerator::::isMatch(int)",
      "93": "AndFieldValueGenerator::::isMatch(int)",
      "94": "AndFieldValueGenerator::::isMatch(int)",
      "96": "AndFieldValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)",
      "97": "AndFieldValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)",
      "98": "AndFieldValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)",
      "99": "AndFieldValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)",
      "101": "AndFieldValueGenerator::::computeCandidates(com.cronutils.Function<com.cronutils.model.time.generator.FieldValueGenerator, java.lang.Integer>)",
      "102": "AndFieldValueGenerator::::computeCandidates(com.cronutils.Function<com.cronutils.model.time.generator.FieldValueGenerator, java.lang.Integer>)",
      "103": "AndFieldValueGenerator::::computeCandidates(com.cronutils.Function<com.cronutils.model.time.generator.FieldValueGenerator, java.lang.Integer>)",
      "104": "AndFieldValueGenerator::::computeCandidates(com.cronutils.Function<com.cronutils.model.time.generator.FieldValueGenerator, java.lang.Integer>)",
      "105": "AndFieldValueGenerator::::computeCandidates(com.cronutils.Function<com.cronutils.model.time.generator.FieldValueGenerator, java.lang.Integer>)",
      "106": "AndFieldValueGenerator::::computeCandidates(com.cronutils.Function<com.cronutils.model.time.generator.FieldValueGenerator, java.lang.Integer>)",
      "107": "AndFieldValueGenerator::::computeCandidates(com.cronutils.Function<com.cronutils.model.time.generator.FieldValueGenerator, java.lang.Integer>)",
      "108": "AndFieldValueGenerator::::computeCandidates(com.cronutils.Function<com.cronutils.model.time.generator.FieldValueGenerator, java.lang.Integer>)",
      "109": "AndFieldValueGenerator::::computeCandidates(com.cronutils.Function<com.cronutils.model.time.generator.FieldValueGenerator, java.lang.Integer>)",
      "110": "AndFieldValueGenerator::::computeCandidates(com.cronutils.Function<com.cronutils.model.time.generator.FieldValueGenerator, java.lang.Integer>)",
      "111": "AndFieldValueGenerator::::computeCandidates(com.cronutils.Function<com.cronutils.model.time.generator.FieldValueGenerator, java.lang.Integer>)",
      "112": "AndFieldValueGenerator::::computeCandidates(com.cronutils.Function<com.cronutils.model.time.generator.FieldValueGenerator, java.lang.Integer>)",
      "113": "AndFieldValueGenerator::::computeCandidates(com.cronutils.Function<com.cronutils.model.time.generator.FieldValueGenerator, java.lang.Integer>)",
      "114": "AndFieldValueGenerator::::computeCandidates(com.cronutils.Function<com.cronutils.model.time.generator.FieldValueGenerator, java.lang.Integer>)",
      "115": "AndFieldValueGenerator::::computeCandidates(com.cronutils.Function<com.cronutils.model.time.generator.FieldValueGenerator, java.lang.Integer>)",
      "116": "AndFieldValueGenerator::::computeCandidates(com.cronutils.Function<com.cronutils.model.time.generator.FieldValueGenerator, java.lang.Integer>)",
      "117": "AndFieldValueGenerator::::computeCandidates(com.cronutils.Function<com.cronutils.model.time.generator.FieldValueGenerator, java.lang.Integer>)",
      "118": "AndFieldValueGenerator::::computeCandidates(com.cronutils.Function<com.cronutils.model.time.generator.FieldValueGenerator, java.lang.Integer>)",
      "119": "AndFieldValueGenerator::::computeCandidates(com.cronutils.Function<com.cronutils.model.time.generator.FieldValueGenerator, java.lang.Integer>)",
      "121": "AndFieldValueGenerator::::createCandidateGeneratorInstance(com.cronutils.model.field.CronField)",
      "122": "AndFieldValueGenerator::::createCandidateGeneratorInstance(com.cronutils.model.field.CronField)",
      "123": "AndFieldValueGenerator::::createCandidateGeneratorInstance(com.cronutils.model.field.CronField)",
      "124": "AndFieldValueGenerator::::createCandidateGeneratorInstance(com.cronutils.model.field.CronField)",
      "125": "AndFieldValueGenerator::::createCandidateGeneratorInstance(com.cronutils.model.field.CronField)",
      "126": "AndFieldValueGenerator::::createCandidateGeneratorInstance(com.cronutils.model.field.CronField)",
      "127": "AndFieldValueGenerator::::createCandidateGeneratorInstance(com.cronutils.model.field.CronField)",
      "128": "AndFieldValueGenerator::::createCandidateGeneratorInstance(com.cronutils.model.field.CronField)",
      "129": "AndFieldValueGenerator::::createCandidateGeneratorInstance(com.cronutils.model.field.CronField)",
      "130": "AndFieldValueGenerator::::createCandidateGeneratorInstance(com.cronutils.model.field.CronField)",
      "131": "AndFieldValueGenerator::::createCandidateGeneratorInstance(com.cronutils.model.field.CronField)",
      "132": "AndFieldValueGenerator::::createCandidateGeneratorInstance(com.cronutils.model.field.CronField)",
      "133": "AndFieldValueGenerator::::createCandidateGeneratorInstance(com.cronutils.model.field.CronField)",
      "134": "AndFieldValueGenerator::::createCandidateGeneratorInstance(com.cronutils.model.field.CronField)",
      "135": "AndFieldValueGenerator::::createCandidateGeneratorInstance(com.cronutils.model.field.CronField)",
      "136": "AndFieldValueGenerator::::createCandidateGeneratorInstance(com.cronutils.model.field.CronField)"
    },
    "test_reverse_method_lines_dic": {
      "42": "AndFieldValueGeneratorTest::::setUp()",
      "43": "AndFieldValueGeneratorTest::::setUp()",
      "44": "AndFieldValueGeneratorTest::::setUp()",
      "45": "AndFieldValueGeneratorTest::::setUp()",
      "46": "AndFieldValueGeneratorTest::::setUp()",
      "47": "AndFieldValueGeneratorTest::::setUp()",
      "48": "AndFieldValueGeneratorTest::::setUp()",
      "49": "AndFieldValueGeneratorTest::::setUp()",
      "50": "AndFieldValueGeneratorTest::::setUp()",
      "51": "AndFieldValueGeneratorTest::::setUp()",
      "52": "AndFieldValueGeneratorTest::::setUp()",
      "53": "AndFieldValueGeneratorTest::::setUp()",
      "54": "AndFieldValueGeneratorTest::::setUp()",
      "55": "AndFieldValueGeneratorTest::::setUp()",
      "57": "AndFieldValueGeneratorTest::::testGenerateNextValue()",
      "58": "AndFieldValueGeneratorTest::::testGenerateNextValue()",
      "59": "AndFieldValueGeneratorTest::::testGenerateNextValue()",
      "60": "AndFieldValueGeneratorTest::::testGenerateNextValue()",
      "61": "AndFieldValueGeneratorTest::::testGenerateNextValue()",
      "62": "AndFieldValueGeneratorTest::::testGenerateNextValue()",
      "63": "AndFieldValueGeneratorTest::::testGenerateNextValue()",
      "65": "AndFieldValueGeneratorTest::::testGeneratePreviousValue()",
      "66": "AndFieldValueGeneratorTest::::testGeneratePreviousValue()",
      "67": "AndFieldValueGeneratorTest::::testGeneratePreviousValue()",
      "68": "AndFieldValueGeneratorTest::::testGeneratePreviousValue()",
      "69": "AndFieldValueGeneratorTest::::testGeneratePreviousValue()",
      "70": "AndFieldValueGeneratorTest::::testGeneratePreviousValue()",
      "71": "AndFieldValueGeneratorTest::::testGeneratePreviousValue()",
      "73": "AndFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "74": "AndFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "75": "AndFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "76": "AndFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "77": "AndFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "78": "AndFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "80": "AndFieldValueGeneratorTest::::testIsMatch()",
      "81": "AndFieldValueGeneratorTest::::testIsMatch()",
      "82": "AndFieldValueGeneratorTest::::testIsMatch()",
      "83": "AndFieldValueGeneratorTest::::testIsMatch()",
      "84": "AndFieldValueGeneratorTest::::testIsMatch()",
      "85": "AndFieldValueGeneratorTest::::testIsMatch()",
      "86": "AndFieldValueGeneratorTest::::testIsMatch()",
      "88": "AndFieldValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "89": "AndFieldValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "90": "AndFieldValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "91": "AndFieldValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "92": "AndFieldValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "94": "AndFieldValueGeneratorTest::::testConstructorNotMatchesAnd()",
      "95": "AndFieldValueGeneratorTest::::testConstructorNotMatchesAnd()",
      "96": "AndFieldValueGeneratorTest::::testConstructorNotMatchesAnd()",
      "97": "AndFieldValueGeneratorTest::::testConstructorNotMatchesAnd()"
    },
    "tests": [
      {
        "test_lines": [
          57,
          63
        ],
        "covered_lines": [
          27,
          30,
          31,
          35,
          38,
          39,
          40,
          45,
          46,
          48,
          98,
          102,
          103,
          104,
          105,
          106,
          107,
          110,
          111,
          112,
          113,
          114,
          116,
          117,
          118,
          122,
          123,
          126,
          129,
          132,
          133
        ]
      },
      {
        "test_lines": [
          65,
          71
        ],
        "covered_lines": [
          27,
          30,
          31,
          54,
          57,
          58,
          59,
          64,
          65,
          67,
          98,
          102,
          103,
          104,
          105,
          106,
          107,
          110,
          111,
          112,
          113,
          114,
          116,
          117,
          118,
          122,
          123,
          126,
          129,
          132,
          133
        ]
      },
      {
        "test_lines": [
          73,
          78
        ],
        "covered_lines": [
          27,
          30,
          31,
          35,
          38,
          39,
          40,
          45,
          48,
          73,
          75,
          76,
          77,
          78,
          82,
          83,
          98,
          102,
          103,
          104,
          105,
          106,
          107,
          110,
          111,
          112,
          113,
          114,
          116,
          117,
          118,
          122,
          123,
          126,
          129,
          132,
          133
        ]
      },
      {
        "test_lines": [
          80,
          86
        ],
        "covered_lines": [
          27,
          30,
          31,
          88,
          89,
          90,
          91,
          92,
          93,
          98,
          122,
          123,
          126,
          129,
          132,
          133
        ]
      },
      {
        "test_lines": [
          88,
          92
        ],
        "covered_lines": [
          27,
          30,
          31,
          98
        ]
      },
      {
        "test_lines": [
          94,
          97
        ],
        "covered_lines": [
          27,
          30,
          31,
          98
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/cron-utils/src/main/java/com/cronutils/model/time/generator/NullFieldValueGenerator.java": {
    "class_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.time.generator;\n",
      "\n",
      "import com.cronutils.model.field.CronField;\n",
      "import com.cronutils.model.field.expression.FieldExpression;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "\n",
      "class NullFieldValueGenerator extends FieldValueGenerator {\n",
      "    public NullFieldValueGenerator(final CronField cronField) {\n",
      "        super(cronField);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public int generateNextValue(final int reference) throws NoSuchValueException {\n",
      "        throw new NoSuchValueException();\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public int generatePreviousValue(final int reference) throws NoSuchValueException {\n",
      "        throw new NoSuchValueException();\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected List<Integer> generateCandidatesNotIncludingIntervalExtremes(final int start, final int end) {\n",
      "        return new ArrayList<>();\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public boolean isMatch(final int value) {\n",
      "        return false;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected boolean matchesFieldExpressionClass(final FieldExpression fieldExpression) {\n",
      "        return true;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.time.generator;\n",
      "\n",
      "import com.cronutils.model.field.CronField;\n",
      "import com.cronutils.model.field.expression.FieldExpression;\n",
      "import org.junit.jupiter.api.BeforeEach;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import java.util.Random;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.*;\n",
      "import static org.mockito.Mockito.mock;\n",
      "\n",
      "public class NullFieldValueGeneratorTest {\n",
      "    private NullFieldValueGenerator fieldValueGenerator;\n",
      "\n",
      "    @BeforeEach\n",
      "    public void setUp() {\n",
      "        fieldValueGenerator = new NullFieldValueGenerator(mock(CronField.class));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGenerateNextValue() {\n",
      "        final Random random = new Random();\n",
      "        assertThrows(NoSuchValueException.class, () -> fieldValueGenerator.generateNextValue(random.nextInt(10)));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGeneratePreviousValue() {\n",
      "        final Random random = new Random();\n",
      "        assertThrows(NoSuchValueException.class, () -> fieldValueGenerator.generatePreviousValue(random.nextInt(10)));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGenerateCandidatesNotIncludingIntervalExtremes() {\n",
      "        assertTrue(fieldValueGenerator.generateCandidatesNotIncludingIntervalExtremes(0, Integer.MAX_VALUE).isEmpty());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testIsMatch() {\n",
      "        final Random random = new Random();\n",
      "        assertFalse(fieldValueGenerator.isMatch(random.nextInt(10)));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testMatchesFieldExpressionClass() {\n",
      "        assertTrue(fieldValueGenerator.matchesFieldExpressionClass(mock(FieldExpression.class)));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testConstructorNotMatchesNull() {\n",
      "        assertNotNull(new NullFieldValueGenerator(mock(CronField.class)));\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "NullFieldValueGenerator::::generateNextValue(int)": [
        27,
        30
      ],
      "NullFieldValueGenerator::::generatePreviousValue(int)": [
        32,
        35
      ],
      "NullFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)": [
        37,
        40
      ],
      "NullFieldValueGenerator::::isMatch(int)": [
        42,
        45
      ],
      "NullFieldValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)": [
        47,
        50
      ]
    },
    "test_method_lines_dic": {
      "NullFieldValueGeneratorTest::::setUp()": [
        29,
        32
      ],
      "NullFieldValueGeneratorTest::::testGenerateNextValue()": [
        34,
        38
      ],
      "NullFieldValueGeneratorTest::::testGeneratePreviousValue()": [
        40,
        44
      ],
      "NullFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()": [
        46,
        49
      ],
      "NullFieldValueGeneratorTest::::testIsMatch()": [
        51,
        55
      ],
      "NullFieldValueGeneratorTest::::testMatchesFieldExpressionClass()": [
        57,
        60
      ],
      "NullFieldValueGeneratorTest::::testConstructorNotMatchesNull()": [
        62,
        65
      ]
    },
    "reverse_method_lines_dic": {
      "27": "NullFieldValueGenerator::::generateNextValue(int)",
      "28": "NullFieldValueGenerator::::generateNextValue(int)",
      "29": "NullFieldValueGenerator::::generateNextValue(int)",
      "30": "NullFieldValueGenerator::::generateNextValue(int)",
      "32": "NullFieldValueGenerator::::generatePreviousValue(int)",
      "33": "NullFieldValueGenerator::::generatePreviousValue(int)",
      "34": "NullFieldValueGenerator::::generatePreviousValue(int)",
      "35": "NullFieldValueGenerator::::generatePreviousValue(int)",
      "37": "NullFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "38": "NullFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "39": "NullFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "40": "NullFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "42": "NullFieldValueGenerator::::isMatch(int)",
      "43": "NullFieldValueGenerator::::isMatch(int)",
      "44": "NullFieldValueGenerator::::isMatch(int)",
      "45": "NullFieldValueGenerator::::isMatch(int)",
      "47": "NullFieldValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)",
      "48": "NullFieldValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)",
      "49": "NullFieldValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)",
      "50": "NullFieldValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)"
    },
    "test_reverse_method_lines_dic": {
      "29": "NullFieldValueGeneratorTest::::setUp()",
      "30": "NullFieldValueGeneratorTest::::setUp()",
      "31": "NullFieldValueGeneratorTest::::setUp()",
      "32": "NullFieldValueGeneratorTest::::setUp()",
      "34": "NullFieldValueGeneratorTest::::testGenerateNextValue()",
      "35": "NullFieldValueGeneratorTest::::testGenerateNextValue()",
      "36": "NullFieldValueGeneratorTest::::testGenerateNextValue()",
      "37": "NullFieldValueGeneratorTest::::testGenerateNextValue()",
      "38": "NullFieldValueGeneratorTest::::testGenerateNextValue()",
      "40": "NullFieldValueGeneratorTest::::testGeneratePreviousValue()",
      "41": "NullFieldValueGeneratorTest::::testGeneratePreviousValue()",
      "42": "NullFieldValueGeneratorTest::::testGeneratePreviousValue()",
      "43": "NullFieldValueGeneratorTest::::testGeneratePreviousValue()",
      "44": "NullFieldValueGeneratorTest::::testGeneratePreviousValue()",
      "46": "NullFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "47": "NullFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "48": "NullFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "49": "NullFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "51": "NullFieldValueGeneratorTest::::testIsMatch()",
      "52": "NullFieldValueGeneratorTest::::testIsMatch()",
      "53": "NullFieldValueGeneratorTest::::testIsMatch()",
      "54": "NullFieldValueGeneratorTest::::testIsMatch()",
      "55": "NullFieldValueGeneratorTest::::testIsMatch()",
      "57": "NullFieldValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "58": "NullFieldValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "59": "NullFieldValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "60": "NullFieldValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "62": "NullFieldValueGeneratorTest::::testConstructorNotMatchesNull()",
      "63": "NullFieldValueGeneratorTest::::testConstructorNotMatchesNull()",
      "64": "NullFieldValueGeneratorTest::::testConstructorNotMatchesNull()",
      "65": "NullFieldValueGeneratorTest::::testConstructorNotMatchesNull()"
    },
    "tests": [
      {
        "test_lines": [
          34,
          38
        ],
        "covered_lines": [
          24,
          25,
          29,
          49
        ]
      },
      {
        "test_lines": [
          40,
          44
        ],
        "covered_lines": [
          24,
          25,
          34,
          49
        ]
      },
      {
        "test_lines": [
          46,
          49
        ],
        "covered_lines": [
          24,
          25,
          39,
          49
        ]
      },
      {
        "test_lines": [
          51,
          55
        ],
        "covered_lines": [
          24,
          25,
          44,
          49
        ]
      },
      {
        "test_lines": [
          57,
          60
        ],
        "covered_lines": [
          24,
          25,
          49
        ]
      },
      {
        "test_lines": [
          62,
          65
        ],
        "covered_lines": [
          24,
          25,
          49
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/cron-utils/src/main/java/com/cronutils/model/time/generator/BetweenFieldValueGenerator.java": {
    "class_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.time.generator;\n",
      "\n",
      "import com.cronutils.model.field.CronField;\n",
      "import com.cronutils.model.field.expression.Between;\n",
      "import com.cronutils.model.field.expression.FieldExpression;\n",
      "import com.cronutils.model.field.value.FieldValue;\n",
      "import com.cronutils.model.field.value.IntegerFieldValue;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "\n",
      "class BetweenFieldValueGenerator extends FieldValueGenerator {\n",
      "\n",
      "    public BetweenFieldValueGenerator(final CronField cronField) {\n",
      "        super(cronField);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public int generateNextValue(final int reference) throws NoSuchValueException {\n",
      "        final Between between = (Between) cronField.getExpression();\n",
      "        //TODO validate from/to logic\n",
      "        int candidate = reference;\n",
      "        do {\n",
      "            ++candidate;\n",
      "        } while (candidate < map(between.getFrom()));\n",
      "\n",
      "        if (candidate > map(between.getTo())) {\n",
      "            throw new NoSuchValueException();\n",
      "        }\n",
      "        return candidate;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public int generatePreviousValue(final int reference) throws NoSuchValueException {\n",
      "        final Between between = (Between) cronField.getExpression();\n",
      "        //TODO deal with from/to logic, to ensure correct values are assumed\n",
      "        int candidate = reference;\n",
      "        do {\n",
      "            --candidate;\n",
      "        } while (candidate > map(between.getTo()));\n",
      "\n",
      "        if (candidate < map(between.getFrom())) {\n",
      "            throw new NoSuchValueException();\n",
      "        }\n",
      "        return candidate;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected List<Integer> generateCandidatesNotIncludingIntervalExtremes(final int start, final int end) {\n",
      "        final List<Integer> values = new ArrayList<>();\n",
      "        //check overlapping ranges: x1 <= y2 && y1 <= x2\n",
      "        final Between between = (Between) cronField.getExpression();\n",
      "        final int expressionStart = map(between.getFrom());\n",
      "        final int expressionEnd = map(between.getTo());\n",
      "        int rangestart = start;\n",
      "        int rangeend = end;\n",
      "        if (start <= expressionEnd && expressionStart <= end) { //ranges overlap\n",
      "            if (expressionEnd < end) {\n",
      "                rangeend = expressionEnd;\n",
      "            }\n",
      "            if (map(between.getFrom()) > start) {\n",
      "                rangestart = expressionStart;\n",
      "            }\n",
      "            try {\n",
      "                if (rangestart != start) {\n",
      "                    values.add(rangestart);\n",
      "                }\n",
      "                int reference = generateNextValue(rangestart);\n",
      "                while (reference < rangeend) {\n",
      "                    values.add(reference);\n",
      "                    reference = generateNextValue(reference);\n",
      "                }\n",
      "                if (rangeend != end) {\n",
      "                    values.add(reference);\n",
      "                }\n",
      "            } catch (final NoSuchValueException e) {\n",
      "                // TODO: Explain why this exception is ignored\n",
      "            }\n",
      "        }\n",
      "        return values;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public boolean isMatch(final int value) {\n",
      "        final Between between = (Between) cronField.getExpression();\n",
      "        return value >= map(between.getFrom()) && value <= map(between.getTo());\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected boolean matchesFieldExpressionClass(final FieldExpression fieldExpression) {\n",
      "        return fieldExpression instanceof Between;\n",
      "    }\n",
      "\n",
      "    static int map(final FieldValue<?> fieldValue) {\n",
      "        if (fieldValue instanceof IntegerFieldValue) {\n",
      "            return ((IntegerFieldValue) fieldValue).getValue();\n",
      "        }\n",
      "        throw new IllegalArgumentException(\"Non integer values at intervals are not fully supported yet.\");\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.time.generator;\n",
      "\n",
      "import com.cronutils.model.field.CronField;\n",
      "import com.cronutils.model.field.CronFieldName;\n",
      "import com.cronutils.model.field.constraint.FieldConstraints;\n",
      "import com.cronutils.model.field.constraint.FieldConstraintsBuilder;\n",
      "import com.cronutils.model.field.expression.Between;\n",
      "import com.cronutils.model.field.expression.FieldExpression;\n",
      "import com.cronutils.model.field.value.IntegerFieldValue;\n",
      "import org.junit.jupiter.api.BeforeEach;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import java.util.List;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.*;\n",
      "import static org.mockito.Mockito.mock;\n",
      "\n",
      "public class BetweenFieldValueGeneratorTest {\n",
      "    private BetweenFieldValueGenerator fieldValueGenerator;\n",
      "    private FieldConstraints constraints;\n",
      "    private static final int FROM = 0;\n",
      "    private static final int TO = 2;\n",
      "    private static final int OUT_OF_RANGE = 7;\n",
      "\n",
      "    @BeforeEach\n",
      "    public void setUp() {\n",
      "        constraints = FieldConstraintsBuilder.instance().createConstraintsInstance();\n",
      "        fieldValueGenerator = new BetweenFieldValueGenerator(\n",
      "                new CronField(CronFieldName.HOUR, new Between(new IntegerFieldValue(FROM), new IntegerFieldValue(TO)), constraints));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGenerateNextValue() throws NoSuchValueException {\n",
      "        for (int j = FROM - 1; j < TO; j++) {\n",
      "            assertEquals(j + 1L, fieldValueGenerator.generateNextValue(j));\n",
      "        }\n",
      "        assertThrows(NoSuchValueException.class, () -> fieldValueGenerator.generateNextValue(TO));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGeneratePreviousValue() throws NoSuchValueException {\n",
      "        for (int j = TO + 1; j > FROM; j--) {\n",
      "            assertEquals(j - 1L, fieldValueGenerator.generatePreviousValue(j));\n",
      "        }\n",
      "        assertThrows(NoSuchValueException.class, () -> fieldValueGenerator.generatePreviousValue(FROM));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGenerateCandidatesNotIncludingIntervalExtremesFullInterval() {\n",
      "        final List<Integer> candidates = fieldValueGenerator.generateCandidatesNotIncludingIntervalExtremes(FROM, TO);\n",
      "        assertEquals(1, candidates.size());\n",
      "        assertEquals(1, candidates.get(0), 0);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGenerateCandidatesNotIncludingIntervalRangesNotIntersectInterval() {\n",
      "        assertTrue(fieldValueGenerator.generateCandidatesNotIncludingIntervalExtremes(TO + 1, TO + 10).isEmpty());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testIsMatch() {\n",
      "        assertTrue(fieldValueGenerator.isMatch(FROM));\n",
      "        assertTrue(fieldValueGenerator.isMatch(TO));\n",
      "        assertFalse(fieldValueGenerator.isMatch(OUT_OF_RANGE));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testMatchesFieldExpressionClass() {\n",
      "        assertTrue(fieldValueGenerator.matchesFieldExpressionClass(mock(Between.class)));\n",
      "        assertFalse(fieldValueGenerator.matchesFieldExpressionClass(mock(FieldExpression.class)));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testConstructorNotMatchesBetween() {\n",
      "        assertThrows(IllegalArgumentException.class, () -> new BetweenFieldValueGenerator(new CronField(CronFieldName.HOUR, mock(FieldExpression.class), constraints)));\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "BetweenFieldValueGenerator::::generateNextValue(int)": [
        31,
        44
      ],
      "BetweenFieldValueGenerator::::generatePreviousValue(int)": [
        46,
        59
      ],
      "BetweenFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)": [
        61,
        94
      ],
      "BetweenFieldValueGenerator::::isMatch(int)": [
        96,
        100
      ],
      "BetweenFieldValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)": [
        102,
        105
      ],
      "BetweenFieldValueGenerator::::map(com.cronutils.model.field.value.FieldValue<?>)": [
        107,
        112
      ]
    },
    "test_method_lines_dic": {
      "BetweenFieldValueGeneratorTest::::setUp()": [
        38,
        43
      ],
      "BetweenFieldValueGeneratorTest::::testGenerateNextValue()": [
        45,
        51
      ],
      "BetweenFieldValueGeneratorTest::::testGeneratePreviousValue()": [
        53,
        59
      ],
      "BetweenFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremesFullInterval()": [
        61,
        66
      ],
      "BetweenFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalRangesNotIntersectInterval()": [
        68,
        71
      ],
      "BetweenFieldValueGeneratorTest::::testIsMatch()": [
        73,
        78
      ],
      "BetweenFieldValueGeneratorTest::::testMatchesFieldExpressionClass()": [
        80,
        84
      ],
      "BetweenFieldValueGeneratorTest::::testConstructorNotMatchesBetween()": [
        86,
        89
      ]
    },
    "reverse_method_lines_dic": {
      "31": "BetweenFieldValueGenerator::::generateNextValue(int)",
      "32": "BetweenFieldValueGenerator::::generateNextValue(int)",
      "33": "BetweenFieldValueGenerator::::generateNextValue(int)",
      "34": "BetweenFieldValueGenerator::::generateNextValue(int)",
      "35": "BetweenFieldValueGenerator::::generateNextValue(int)",
      "36": "BetweenFieldValueGenerator::::generateNextValue(int)",
      "37": "BetweenFieldValueGenerator::::generateNextValue(int)",
      "38": "BetweenFieldValueGenerator::::generateNextValue(int)",
      "39": "BetweenFieldValueGenerator::::generateNextValue(int)",
      "40": "BetweenFieldValueGenerator::::generateNextValue(int)",
      "41": "BetweenFieldValueGenerator::::generateNextValue(int)",
      "42": "BetweenFieldValueGenerator::::generateNextValue(int)",
      "43": "BetweenFieldValueGenerator::::generateNextValue(int)",
      "44": "BetweenFieldValueGenerator::::generateNextValue(int)",
      "46": "BetweenFieldValueGenerator::::generatePreviousValue(int)",
      "47": "BetweenFieldValueGenerator::::generatePreviousValue(int)",
      "48": "BetweenFieldValueGenerator::::generatePreviousValue(int)",
      "49": "BetweenFieldValueGenerator::::generatePreviousValue(int)",
      "50": "BetweenFieldValueGenerator::::generatePreviousValue(int)",
      "51": "BetweenFieldValueGenerator::::generatePreviousValue(int)",
      "52": "BetweenFieldValueGenerator::::generatePreviousValue(int)",
      "53": "BetweenFieldValueGenerator::::generatePreviousValue(int)",
      "54": "BetweenFieldValueGenerator::::generatePreviousValue(int)",
      "55": "BetweenFieldValueGenerator::::generatePreviousValue(int)",
      "56": "BetweenFieldValueGenerator::::generatePreviousValue(int)",
      "57": "BetweenFieldValueGenerator::::generatePreviousValue(int)",
      "58": "BetweenFieldValueGenerator::::generatePreviousValue(int)",
      "59": "BetweenFieldValueGenerator::::generatePreviousValue(int)",
      "61": "BetweenFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "62": "BetweenFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "63": "BetweenFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "64": "BetweenFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "65": "BetweenFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "66": "BetweenFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "67": "BetweenFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "68": "BetweenFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "69": "BetweenFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "70": "BetweenFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "71": "BetweenFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "72": "BetweenFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "73": "BetweenFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "74": "BetweenFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "75": "BetweenFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "76": "BetweenFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "77": "BetweenFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "78": "BetweenFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "79": "BetweenFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "80": "BetweenFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "81": "BetweenFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "82": "BetweenFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "83": "BetweenFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "84": "BetweenFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "85": "BetweenFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "86": "BetweenFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "87": "BetweenFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "88": "BetweenFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "89": "BetweenFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "90": "BetweenFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "91": "BetweenFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "92": "BetweenFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "93": "BetweenFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "94": "BetweenFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "96": "BetweenFieldValueGenerator::::isMatch(int)",
      "97": "BetweenFieldValueGenerator::::isMatch(int)",
      "98": "BetweenFieldValueGenerator::::isMatch(int)",
      "99": "BetweenFieldValueGenerator::::isMatch(int)",
      "100": "BetweenFieldValueGenerator::::isMatch(int)",
      "102": "BetweenFieldValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)",
      "103": "BetweenFieldValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)",
      "104": "BetweenFieldValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)",
      "105": "BetweenFieldValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)",
      "107": "BetweenFieldValueGenerator::::map(com.cronutils.model.field.value.FieldValue<?>)",
      "108": "BetweenFieldValueGenerator::::map(com.cronutils.model.field.value.FieldValue<?>)",
      "109": "BetweenFieldValueGenerator::::map(com.cronutils.model.field.value.FieldValue<?>)",
      "110": "BetweenFieldValueGenerator::::map(com.cronutils.model.field.value.FieldValue<?>)",
      "111": "BetweenFieldValueGenerator::::map(com.cronutils.model.field.value.FieldValue<?>)",
      "112": "BetweenFieldValueGenerator::::map(com.cronutils.model.field.value.FieldValue<?>)"
    },
    "test_reverse_method_lines_dic": {
      "38": "BetweenFieldValueGeneratorTest::::setUp()",
      "39": "BetweenFieldValueGeneratorTest::::setUp()",
      "40": "BetweenFieldValueGeneratorTest::::setUp()",
      "41": "BetweenFieldValueGeneratorTest::::setUp()",
      "42": "BetweenFieldValueGeneratorTest::::setUp()",
      "43": "BetweenFieldValueGeneratorTest::::setUp()",
      "45": "BetweenFieldValueGeneratorTest::::testGenerateNextValue()",
      "46": "BetweenFieldValueGeneratorTest::::testGenerateNextValue()",
      "47": "BetweenFieldValueGeneratorTest::::testGenerateNextValue()",
      "48": "BetweenFieldValueGeneratorTest::::testGenerateNextValue()",
      "49": "BetweenFieldValueGeneratorTest::::testGenerateNextValue()",
      "50": "BetweenFieldValueGeneratorTest::::testGenerateNextValue()",
      "51": "BetweenFieldValueGeneratorTest::::testGenerateNextValue()",
      "53": "BetweenFieldValueGeneratorTest::::testGeneratePreviousValue()",
      "54": "BetweenFieldValueGeneratorTest::::testGeneratePreviousValue()",
      "55": "BetweenFieldValueGeneratorTest::::testGeneratePreviousValue()",
      "56": "BetweenFieldValueGeneratorTest::::testGeneratePreviousValue()",
      "57": "BetweenFieldValueGeneratorTest::::testGeneratePreviousValue()",
      "58": "BetweenFieldValueGeneratorTest::::testGeneratePreviousValue()",
      "59": "BetweenFieldValueGeneratorTest::::testGeneratePreviousValue()",
      "61": "BetweenFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremesFullInterval()",
      "62": "BetweenFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremesFullInterval()",
      "63": "BetweenFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremesFullInterval()",
      "64": "BetweenFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremesFullInterval()",
      "65": "BetweenFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremesFullInterval()",
      "66": "BetweenFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremesFullInterval()",
      "68": "BetweenFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalRangesNotIntersectInterval()",
      "69": "BetweenFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalRangesNotIntersectInterval()",
      "70": "BetweenFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalRangesNotIntersectInterval()",
      "71": "BetweenFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalRangesNotIntersectInterval()",
      "73": "BetweenFieldValueGeneratorTest::::testIsMatch()",
      "74": "BetweenFieldValueGeneratorTest::::testIsMatch()",
      "75": "BetweenFieldValueGeneratorTest::::testIsMatch()",
      "76": "BetweenFieldValueGeneratorTest::::testIsMatch()",
      "77": "BetweenFieldValueGeneratorTest::::testIsMatch()",
      "78": "BetweenFieldValueGeneratorTest::::testIsMatch()",
      "80": "BetweenFieldValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "81": "BetweenFieldValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "82": "BetweenFieldValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "83": "BetweenFieldValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "84": "BetweenFieldValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "86": "BetweenFieldValueGeneratorTest::::testConstructorNotMatchesBetween()",
      "87": "BetweenFieldValueGeneratorTest::::testConstructorNotMatchesBetween()",
      "88": "BetweenFieldValueGeneratorTest::::testConstructorNotMatchesBetween()",
      "89": "BetweenFieldValueGeneratorTest::::testConstructorNotMatchesBetween()"
    },
    "tests": [
      {
        "test_lines": [
          45,
          51
        ],
        "covered_lines": [
          28,
          29,
          33,
          35,
          37,
          38,
          40,
          41,
          43,
          104,
          108,
          109
        ]
      },
      {
        "test_lines": [
          53,
          59
        ],
        "covered_lines": [
          28,
          29,
          48,
          50,
          52,
          53,
          55,
          56,
          58,
          104,
          108,
          109
        ]
      },
      {
        "test_lines": [
          61,
          66
        ],
        "covered_lines": [
          28,
          29,
          33,
          35,
          37,
          38,
          40,
          43,
          63,
          65,
          66,
          67,
          68,
          69,
          70,
          71,
          74,
          78,
          81,
          82,
          83,
          84,
          86,
          91,
          93,
          104,
          108,
          109
        ]
      },
      {
        "test_lines": [
          68,
          71
        ],
        "covered_lines": [
          28,
          29,
          63,
          65,
          66,
          67,
          68,
          69,
          70,
          93,
          104,
          108,
          109
        ]
      },
      {
        "test_lines": [
          73,
          78
        ],
        "covered_lines": [
          28,
          29,
          98,
          99,
          104,
          108,
          109
        ]
      },
      {
        "test_lines": [
          80,
          84
        ],
        "covered_lines": [
          28,
          29,
          104
        ]
      },
      {
        "test_lines": [
          86,
          89
        ],
        "covered_lines": [
          28,
          29,
          104
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/cron-utils/src/main/java/com/cronutils/model/time/generator/OnFieldValueGenerator.java": {
    "class_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.time.generator;\n",
      "\n",
      "import com.cronutils.model.field.CronField;\n",
      "import com.cronutils.model.field.expression.FieldExpression;\n",
      "import com.cronutils.model.field.expression.On;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "\n",
      "class OnFieldValueGenerator extends FieldValueGenerator {\n",
      "    public OnFieldValueGenerator(final CronField cronField) {\n",
      "        super(cronField);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public int generateNextValue(final int reference) throws NoSuchValueException {\n",
      "        final int time = ((On) cronField.getExpression()).getTime().getValue();\n",
      "        if (time <= reference) {\n",
      "            throw new NoSuchValueException();\n",
      "        }\n",
      "        return time;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public int generatePreviousValue(final int reference) throws NoSuchValueException {\n",
      "        final int time = ((On) cronField.getExpression()).getTime().getValue();\n",
      "        if (time >= reference) {\n",
      "            throw new NoSuchValueException();\n",
      "        }\n",
      "        return time;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected List<Integer> generateCandidatesNotIncludingIntervalExtremes(final int start, final int end) {\n",
      "        final List<Integer> values = new ArrayList<>();\n",
      "        final int time = ((On) cronField.getExpression()).getTime().getValue();\n",
      "        if (time > start && time < end) {\n",
      "            values.add(time);\n",
      "        }\n",
      "        return values;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public boolean isMatch(final int value) {\n",
      "        return ((On) cronField.getExpression()).getTime().getValue() == value;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected boolean matchesFieldExpressionClass(final FieldExpression fieldExpression) {\n",
      "        return fieldExpression instanceof On;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.time.generator;\n",
      "\n",
      "import com.cronutils.model.field.CronField;\n",
      "import com.cronutils.model.field.CronFieldName;\n",
      "import com.cronutils.model.field.constraint.FieldConstraintsBuilder;\n",
      "import com.cronutils.model.field.expression.FieldExpression;\n",
      "import com.cronutils.model.field.expression.On;\n",
      "import com.cronutils.model.field.value.IntegerFieldValue;\n",
      "import org.junit.jupiter.api.BeforeEach;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import java.util.List;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.*;\n",
      "import static org.mockito.Mockito.mock;\n",
      "\n",
      "public class OnFieldValueGeneratorTest {\n",
      "    private OnFieldValueGenerator fieldValueGenerator;\n",
      "    private static final int DAY = 3;\n",
      "\n",
      "    @BeforeEach\n",
      "    public void setUp() {\n",
      "        fieldValueGenerator =\n",
      "                new OnFieldValueGenerator(\n",
      "                        new CronField(\n",
      "                                CronFieldName.HOUR,\n",
      "                                new On(new IntegerFieldValue(3)),\n",
      "                                FieldConstraintsBuilder.instance().addLSupport().createConstraintsInstance()\n",
      "                        )\n",
      "                );\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGenerateNextValue() throws NoSuchValueException {\n",
      "        assertEquals(DAY, fieldValueGenerator.generateNextValue(1));\n",
      "        assertThrows(NoSuchValueException.class, () -> fieldValueGenerator.generateNextValue(DAY));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGeneratePreviousValue() throws NoSuchValueException {\n",
      "        assertEquals(DAY, fieldValueGenerator.generatePreviousValue(DAY + 1));\n",
      "        assertThrows(NoSuchValueException.class, () -> fieldValueGenerator.generatePreviousValue(DAY));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGenerateCandidatesNotIncludingIntervalExtremes() {\n",
      "        final List<Integer> candidates = fieldValueGenerator.generateCandidatesNotIncludingIntervalExtremes(1, 32);\n",
      "        assertEquals(1, candidates.size());\n",
      "        assertEquals(DAY, candidates.get(0), 0);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testIsMatch() {\n",
      "        assertTrue(fieldValueGenerator.isMatch(DAY));\n",
      "        assertFalse(fieldValueGenerator.isMatch(DAY - 1));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testMatchesFieldExpressionClass() {\n",
      "        assertTrue(fieldValueGenerator.matchesFieldExpressionClass(mock(On.class)));\n",
      "        assertFalse(fieldValueGenerator.matchesFieldExpressionClass(mock(FieldExpression.class)));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testConstructorNotMatchesOn() {\n",
      "        assertThrows(IllegalArgumentException.class, () -> new OnFieldValueGenerator(mock(CronField.class)));\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "OnFieldValueGenerator::::generateNextValue(int)": [
        28,
        35
      ],
      "OnFieldValueGenerator::::generatePreviousValue(int)": [
        37,
        44
      ],
      "OnFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)": [
        46,
        54
      ],
      "OnFieldValueGenerator::::isMatch(int)": [
        56,
        59
      ],
      "OnFieldValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)": [
        61,
        64
      ]
    },
    "test_method_lines_dic": {
      "OnFieldValueGeneratorTest::::setUp()": [
        34,
        44
      ],
      "OnFieldValueGeneratorTest::::testGenerateNextValue()": [
        46,
        50
      ],
      "OnFieldValueGeneratorTest::::testGeneratePreviousValue()": [
        52,
        56
      ],
      "OnFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()": [
        58,
        63
      ],
      "OnFieldValueGeneratorTest::::testIsMatch()": [
        65,
        69
      ],
      "OnFieldValueGeneratorTest::::testMatchesFieldExpressionClass()": [
        71,
        75
      ],
      "OnFieldValueGeneratorTest::::testConstructorNotMatchesOn()": [
        77,
        80
      ]
    },
    "reverse_method_lines_dic": {
      "28": "OnFieldValueGenerator::::generateNextValue(int)",
      "29": "OnFieldValueGenerator::::generateNextValue(int)",
      "30": "OnFieldValueGenerator::::generateNextValue(int)",
      "31": "OnFieldValueGenerator::::generateNextValue(int)",
      "32": "OnFieldValueGenerator::::generateNextValue(int)",
      "33": "OnFieldValueGenerator::::generateNextValue(int)",
      "34": "OnFieldValueGenerator::::generateNextValue(int)",
      "35": "OnFieldValueGenerator::::generateNextValue(int)",
      "37": "OnFieldValueGenerator::::generatePreviousValue(int)",
      "38": "OnFieldValueGenerator::::generatePreviousValue(int)",
      "39": "OnFieldValueGenerator::::generatePreviousValue(int)",
      "40": "OnFieldValueGenerator::::generatePreviousValue(int)",
      "41": "OnFieldValueGenerator::::generatePreviousValue(int)",
      "42": "OnFieldValueGenerator::::generatePreviousValue(int)",
      "43": "OnFieldValueGenerator::::generatePreviousValue(int)",
      "44": "OnFieldValueGenerator::::generatePreviousValue(int)",
      "46": "OnFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "47": "OnFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "48": "OnFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "49": "OnFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "50": "OnFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "51": "OnFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "52": "OnFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "53": "OnFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "54": "OnFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "56": "OnFieldValueGenerator::::isMatch(int)",
      "57": "OnFieldValueGenerator::::isMatch(int)",
      "58": "OnFieldValueGenerator::::isMatch(int)",
      "59": "OnFieldValueGenerator::::isMatch(int)",
      "61": "OnFieldValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)",
      "62": "OnFieldValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)",
      "63": "OnFieldValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)",
      "64": "OnFieldValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)"
    },
    "test_reverse_method_lines_dic": {
      "34": "OnFieldValueGeneratorTest::::setUp()",
      "35": "OnFieldValueGeneratorTest::::setUp()",
      "36": "OnFieldValueGeneratorTest::::setUp()",
      "37": "OnFieldValueGeneratorTest::::setUp()",
      "38": "OnFieldValueGeneratorTest::::setUp()",
      "39": "OnFieldValueGeneratorTest::::setUp()",
      "40": "OnFieldValueGeneratorTest::::setUp()",
      "41": "OnFieldValueGeneratorTest::::setUp()",
      "42": "OnFieldValueGeneratorTest::::setUp()",
      "43": "OnFieldValueGeneratorTest::::setUp()",
      "44": "OnFieldValueGeneratorTest::::setUp()",
      "46": "OnFieldValueGeneratorTest::::testGenerateNextValue()",
      "47": "OnFieldValueGeneratorTest::::testGenerateNextValue()",
      "48": "OnFieldValueGeneratorTest::::testGenerateNextValue()",
      "49": "OnFieldValueGeneratorTest::::testGenerateNextValue()",
      "50": "OnFieldValueGeneratorTest::::testGenerateNextValue()",
      "52": "OnFieldValueGeneratorTest::::testGeneratePreviousValue()",
      "53": "OnFieldValueGeneratorTest::::testGeneratePreviousValue()",
      "54": "OnFieldValueGeneratorTest::::testGeneratePreviousValue()",
      "55": "OnFieldValueGeneratorTest::::testGeneratePreviousValue()",
      "56": "OnFieldValueGeneratorTest::::testGeneratePreviousValue()",
      "58": "OnFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "59": "OnFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "60": "OnFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "61": "OnFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "62": "OnFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "63": "OnFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "65": "OnFieldValueGeneratorTest::::testIsMatch()",
      "66": "OnFieldValueGeneratorTest::::testIsMatch()",
      "67": "OnFieldValueGeneratorTest::::testIsMatch()",
      "68": "OnFieldValueGeneratorTest::::testIsMatch()",
      "69": "OnFieldValueGeneratorTest::::testIsMatch()",
      "71": "OnFieldValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "72": "OnFieldValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "73": "OnFieldValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "74": "OnFieldValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "75": "OnFieldValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "77": "OnFieldValueGeneratorTest::::testConstructorNotMatchesOn()",
      "78": "OnFieldValueGeneratorTest::::testConstructorNotMatchesOn()",
      "79": "OnFieldValueGeneratorTest::::testConstructorNotMatchesOn()",
      "80": "OnFieldValueGeneratorTest::::testConstructorNotMatchesOn()"
    },
    "tests": [
      {
        "test_lines": [
          46,
          50
        ],
        "covered_lines": [
          25,
          26,
          30,
          31,
          32,
          34,
          63
        ]
      },
      {
        "test_lines": [
          52,
          56
        ],
        "covered_lines": [
          25,
          26,
          39,
          40,
          41,
          43,
          63
        ]
      },
      {
        "test_lines": [
          58,
          63
        ],
        "covered_lines": [
          25,
          26,
          48,
          49,
          50,
          51,
          53,
          63
        ]
      },
      {
        "test_lines": [
          65,
          69
        ],
        "covered_lines": [
          25,
          26,
          58,
          63
        ]
      },
      {
        "test_lines": [
          71,
          75
        ],
        "covered_lines": [
          25,
          26,
          63
        ]
      },
      {
        "test_lines": [
          77,
          80
        ],
        "covered_lines": [
          25,
          26,
          63
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/cron-utils/src/main/java/com/cronutils/model/time/generator/OnDayOfWeekValueGenerator.java": {
    "class_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.time.generator;\n",
      "\n",
      "import com.cronutils.mapper.ConstantsMapper;\n",
      "import com.cronutils.mapper.WeekDay;\n",
      "import com.cronutils.model.field.CronField;\n",
      "import com.cronutils.model.field.CronFieldName;\n",
      "import com.cronutils.model.field.expression.FieldExpression;\n",
      "import com.cronutils.model.field.expression.On;\n",
      "import com.cronutils.model.field.value.IntegerFieldValue;\n",
      "import com.cronutils.utils.Preconditions;\n",
      "\n",
      "import java.time.DayOfWeek;\n",
      "import java.time.LocalDate;\n",
      "\n",
      "class OnDayOfWeekValueGenerator extends OnDayOfCalendarValueGenerator {\n",
      "\n",
      "    private static final On ON_SATURDAY = new On(new IntegerFieldValue(7));\n",
      "    private final WeekDay mondayDoWValue;\n",
      "\n",
      "    public OnDayOfWeekValueGenerator(final CronField cronField, final int year, final int month, final WeekDay mondayDoWValue) {\n",
      "        super(cronField, year, month);\n",
      "        Preconditions.checkArgument(CronFieldName.DAY_OF_WEEK.equals(cronField.getField()), \"CronField does not belong to day of week\");\n",
      "        this.mondayDoWValue = mondayDoWValue;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public int generateNextValue(final int reference) throws NoSuchValueException {\n",
      "        final On on = ((On) cronField.getExpression());\n",
      "        final int value = generateValue(on, year, month, reference);\n",
      "        if (value <= reference) {\n",
      "            throw new NoSuchValueException();\n",
      "        }\n",
      "        return value;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public int generatePreviousValue(final int reference) throws NoSuchValueException {\n",
      "        final On on = ((On) cronField.getExpression());\n",
      "        final int value = generateValue(on, year, month, reference);\n",
      "        if (value >= reference) {\n",
      "            throw new NoSuchValueException();\n",
      "        }\n",
      "        return value;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public boolean isMatch(final int value) {\n",
      "        final On on = ((On) cronField.getExpression());\n",
      "        try {\n",
      "            return value == generateValue(on, year, month, value - 1);\n",
      "        } catch (final NoSuchValueException ignored) {\n",
      "            //we just skip, since we generate values until we get the exception\n",
      "        }\n",
      "        return false;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected boolean matchesFieldExpressionClass(final FieldExpression fieldExpression) {\n",
      "        return fieldExpression instanceof On;\n",
      "    }\n",
      "\n",
      "    private int generateValue(final On on, final int year, final int month, final int reference) throws NoSuchValueException {\n",
      "        switch (on.getSpecialChar().getValue()) {\n",
      "            case HASH:\n",
      "                return generateHashValues(on, year, month);\n",
      "            case L:\n",
      "                return on.getTime().getValue() == -1 ? /* L by itself simply means \u201c7\u201d or \u201cSAT\u201d */\n",
      "                        generateNoneValues(ON_SATURDAY, year, month, reference) :\n",
      "                        generateLValues(on, year, month);\n",
      "            case NONE:\n",
      "                return generateNoneValues(on, year, month, reference);\n",
      "            default:\n",
      "                throw new NoSuchValueException();\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private int generateHashValues(final On on, final int year, final int month) {\n",
      "        final DayOfWeek dowForFirstDoM = LocalDate.of(year, month, 1).getDayOfWeek();//1-7\n",
      "        final int requiredDoW = ConstantsMapper.weekDayMapping(mondayDoWValue, ConstantsMapper.JAVA8, on.getTime().getValue());//to normalize to jdk8-time value\n",
      "        final int requiredNth = on.getNth().getValue();\n",
      "        int baseDay = 1;//day 1 from given month\n",
      "        final int diff = dowForFirstDoM.getValue() - requiredDoW;\n",
      "        if (diff < 0) {\n",
      "            baseDay = baseDay + Math.abs(diff);\n",
      "        }\n",
      "        if (diff > 0) {\n",
      "            baseDay = baseDay + 7 - diff;\n",
      "        }\n",
      "        return (requiredNth - 1) * 7 + baseDay;\n",
      "    }\n",
      "\n",
      "    private int generateLValues(final On on, final int year, final int month) throws NoSuchValueException {\n",
      "        final int lastDoM = LocalDate.of(year, month, 1).lengthOfMonth();\n",
      "        final LocalDate lastDoMDateTime = LocalDate.of(year, month, lastDoM);\n",
      "        final int dowForLastDoM = lastDoMDateTime.getDayOfWeek().getValue();//1-7\n",
      "        final int requiredDoW = ConstantsMapper.weekDayMapping(mondayDoWValue, ConstantsMapper.JAVA8, on.getTime().getValue());//to normalize to jdk8-time value\n",
      "        final int dowDiff = dowForLastDoM - requiredDoW;\n",
      "\n",
      "        if (dowDiff == 0) {\n",
      "            return lastDoMDateTime.getDayOfMonth();\n",
      "        }\n",
      "        if (dowDiff < 0) {\n",
      "            return lastDoMDateTime.minusDays(dowForLastDoM + (long)(7 - requiredDoW)).getDayOfMonth();\n",
      "        }\n",
      "        if (dowDiff > 0) {\n",
      "            return lastDoMDateTime.minusDays(dowDiff).getDayOfMonth();\n",
      "        }\n",
      "        throw new NoSuchValueException();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Generate valid days of the month for the days of week expression. This method requires that you\n",
      "     * pass it a -1 for the reference value when starting to generate a sequence of day values. That allows\n",
      "     * it to handle the special case of which day of the month is the initial matching value.\n",
      "     *\n",
      "     * @param on        The expression object giving us the particular day of week we need.\n",
      "     * @param year      The year for the calculation.\n",
      "     * @param month     The month for the calculation.\n",
      "     * @param reference This value must either be -1 indicating you are starting the sequence generation or an actual\n",
      "     *                  day of month that meets the day of week criteria. So a value previously returned by this method.\n",
      "     * @return\n",
      "     */\n",
      "    private int generateNoneValues(final On on, final int year, final int month, final int reference) {\n",
      "        // the day of week the first of the month is on\n",
      "        final int dowForFirstDoM = LocalDate.of(year, month, 1).getDayOfWeek().getValue();// 1-7\n",
      "        // the day of week we need, normalize to jdk8time\n",
      "        final int requiredDoW = ConstantsMapper.weekDayMapping(mondayDoWValue, ConstantsMapper.JAVA8, on.getTime().getValue());\n",
      "        // the first day of the month\n",
      "        int baseDay = 1;// day 1 from given month\n",
      "        // the difference between the days of week\n",
      "        final int diff = dowForFirstDoM - requiredDoW;\n",
      "        // //base day remains the same if diff is zero\n",
      "        if (diff < 0) {\n",
      "            baseDay = baseDay + Math.abs(diff);\n",
      "        }\n",
      "        if (diff > 0) {\n",
      "            baseDay = baseDay + 7 - diff;\n",
      "        }\n",
      "        // if baseDay is greater than the reference, we are returning the initial matching day value\n",
      "        //Fix issue #92\n",
      "        if (reference < 1) {\n",
      "            return baseDay;\n",
      "        }\n",
      "        while (baseDay <= reference) {\n",
      "            baseDay += 7;\n",
      "        }\n",
      "        return baseDay;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.time.generator;\n",
      "\n",
      "import com.cronutils.mapper.WeekDay;\n",
      "import com.cronutils.model.field.CronField;\n",
      "import com.cronutils.model.field.CronFieldName;\n",
      "import com.cronutils.model.field.constraint.FieldConstraints;\n",
      "import com.cronutils.model.field.constraint.FieldConstraintsBuilder;\n",
      "import com.cronutils.model.field.expression.FieldExpression;\n",
      "import com.cronutils.model.field.expression.On;\n",
      "import com.cronutils.model.field.value.IntegerFieldValue;\n",
      "import org.junit.jupiter.api.BeforeEach;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.assertFalse;\n",
      "import static org.junit.jupiter.api.Assertions.assertThrows;\n",
      "import static org.junit.jupiter.api.Assertions.assertTrue;\n",
      "import static org.mockito.Mockito.mock;\n",
      "\n",
      "public class OnDayOfWeekValueGeneratorTest {\n",
      "    private OnDayOfWeekValueGenerator fieldValueGenerator;\n",
      "    private FieldConstraints constraints;\n",
      "    private WeekDay mondayDoWValue;\n",
      "    private static final int YEAR = 2015;\n",
      "    private static final int MONTH = 2;\n",
      "\n",
      "    @BeforeEach\n",
      "    public void setUp() {\n",
      "        constraints = FieldConstraintsBuilder.instance().createConstraintsInstance();\n",
      "        mondayDoWValue = new WeekDay(1, false);\n",
      "        fieldValueGenerator = new OnDayOfWeekValueGenerator(new CronField(CronFieldName.DAY_OF_WEEK, new On(new IntegerFieldValue(3)), constraints), YEAR,\n",
      "                MONTH, mondayDoWValue);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testMatchesFieldExpressionClass() {\n",
      "        assertTrue(fieldValueGenerator.matchesFieldExpressionClass(mock(On.class)));\n",
      "        assertFalse(fieldValueGenerator.matchesFieldExpressionClass(mock(FieldExpression.class)));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testConstructorNotMatchesOnDayOfWeekValueGenerator() {\n",
      "        assertThrows(IllegalArgumentException.class, () -> new OnDayOfWeekValueGenerator(new CronField(CronFieldName.YEAR, mock(FieldExpression.class), constraints), YEAR, MONTH, mondayDoWValue));\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "OnDayOfWeekValueGenerator::::generateNextValue(int)": [
        39,
        47
      ],
      "OnDayOfWeekValueGenerator::::generatePreviousValue(int)": [
        49,
        57
      ],
      "OnDayOfWeekValueGenerator::::isMatch(int)": [
        59,
        68
      ],
      "OnDayOfWeekValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)": [
        70,
        73
      ],
      "OnDayOfWeekValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int,int)": [
        75,
        88
      ],
      "OnDayOfWeekValueGenerator::::generateHashValues(com.cronutils.model.field.expression.On,int,int)": [
        90,
        103
      ],
      "OnDayOfWeekValueGenerator::::generateLValues(com.cronutils.model.field.expression.On,int,int)": [
        105,
        122
      ],
      "OnDayOfWeekValueGenerator::::generateNoneValues(com.cronutils.model.field.expression.On,int,int,int)": [
        136,
        161
      ]
    },
    "test_method_lines_dic": {
      "OnDayOfWeekValueGeneratorTest::::setUp()": [
        39,
        45
      ],
      "OnDayOfWeekValueGeneratorTest::::testMatchesFieldExpressionClass()": [
        47,
        51
      ],
      "OnDayOfWeekValueGeneratorTest::::testConstructorNotMatchesOnDayOfWeekValueGenerator()": [
        53,
        56
      ]
    },
    "reverse_method_lines_dic": {
      "39": "OnDayOfWeekValueGenerator::::generateNextValue(int)",
      "40": "OnDayOfWeekValueGenerator::::generateNextValue(int)",
      "41": "OnDayOfWeekValueGenerator::::generateNextValue(int)",
      "42": "OnDayOfWeekValueGenerator::::generateNextValue(int)",
      "43": "OnDayOfWeekValueGenerator::::generateNextValue(int)",
      "44": "OnDayOfWeekValueGenerator::::generateNextValue(int)",
      "45": "OnDayOfWeekValueGenerator::::generateNextValue(int)",
      "46": "OnDayOfWeekValueGenerator::::generateNextValue(int)",
      "47": "OnDayOfWeekValueGenerator::::generateNextValue(int)",
      "49": "OnDayOfWeekValueGenerator::::generatePreviousValue(int)",
      "50": "OnDayOfWeekValueGenerator::::generatePreviousValue(int)",
      "51": "OnDayOfWeekValueGenerator::::generatePreviousValue(int)",
      "52": "OnDayOfWeekValueGenerator::::generatePreviousValue(int)",
      "53": "OnDayOfWeekValueGenerator::::generatePreviousValue(int)",
      "54": "OnDayOfWeekValueGenerator::::generatePreviousValue(int)",
      "55": "OnDayOfWeekValueGenerator::::generatePreviousValue(int)",
      "56": "OnDayOfWeekValueGenerator::::generatePreviousValue(int)",
      "57": "OnDayOfWeekValueGenerator::::generatePreviousValue(int)",
      "59": "OnDayOfWeekValueGenerator::::isMatch(int)",
      "60": "OnDayOfWeekValueGenerator::::isMatch(int)",
      "61": "OnDayOfWeekValueGenerator::::isMatch(int)",
      "62": "OnDayOfWeekValueGenerator::::isMatch(int)",
      "63": "OnDayOfWeekValueGenerator::::isMatch(int)",
      "64": "OnDayOfWeekValueGenerator::::isMatch(int)",
      "65": "OnDayOfWeekValueGenerator::::isMatch(int)",
      "66": "OnDayOfWeekValueGenerator::::isMatch(int)",
      "67": "OnDayOfWeekValueGenerator::::isMatch(int)",
      "68": "OnDayOfWeekValueGenerator::::isMatch(int)",
      "70": "OnDayOfWeekValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)",
      "71": "OnDayOfWeekValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)",
      "72": "OnDayOfWeekValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)",
      "73": "OnDayOfWeekValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)",
      "75": "OnDayOfWeekValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int,int)",
      "76": "OnDayOfWeekValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int,int)",
      "77": "OnDayOfWeekValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int,int)",
      "78": "OnDayOfWeekValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int,int)",
      "79": "OnDayOfWeekValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int,int)",
      "80": "OnDayOfWeekValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int,int)",
      "81": "OnDayOfWeekValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int,int)",
      "82": "OnDayOfWeekValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int,int)",
      "83": "OnDayOfWeekValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int,int)",
      "84": "OnDayOfWeekValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int,int)",
      "85": "OnDayOfWeekValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int,int)",
      "86": "OnDayOfWeekValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int,int)",
      "87": "OnDayOfWeekValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int,int)",
      "88": "OnDayOfWeekValueGenerator::::generateValue(com.cronutils.model.field.expression.On,int,int,int)",
      "90": "OnDayOfWeekValueGenerator::::generateHashValues(com.cronutils.model.field.expression.On,int,int)",
      "91": "OnDayOfWeekValueGenerator::::generateHashValues(com.cronutils.model.field.expression.On,int,int)",
      "92": "OnDayOfWeekValueGenerator::::generateHashValues(com.cronutils.model.field.expression.On,int,int)",
      "93": "OnDayOfWeekValueGenerator::::generateHashValues(com.cronutils.model.field.expression.On,int,int)",
      "94": "OnDayOfWeekValueGenerator::::generateHashValues(com.cronutils.model.field.expression.On,int,int)",
      "95": "OnDayOfWeekValueGenerator::::generateHashValues(com.cronutils.model.field.expression.On,int,int)",
      "96": "OnDayOfWeekValueGenerator::::generateHashValues(com.cronutils.model.field.expression.On,int,int)",
      "97": "OnDayOfWeekValueGenerator::::generateHashValues(com.cronutils.model.field.expression.On,int,int)",
      "98": "OnDayOfWeekValueGenerator::::generateHashValues(com.cronutils.model.field.expression.On,int,int)",
      "99": "OnDayOfWeekValueGenerator::::generateHashValues(com.cronutils.model.field.expression.On,int,int)",
      "100": "OnDayOfWeekValueGenerator::::generateHashValues(com.cronutils.model.field.expression.On,int,int)",
      "101": "OnDayOfWeekValueGenerator::::generateHashValues(com.cronutils.model.field.expression.On,int,int)",
      "102": "OnDayOfWeekValueGenerator::::generateHashValues(com.cronutils.model.field.expression.On,int,int)",
      "103": "OnDayOfWeekValueGenerator::::generateHashValues(com.cronutils.model.field.expression.On,int,int)",
      "105": "OnDayOfWeekValueGenerator::::generateLValues(com.cronutils.model.field.expression.On,int,int)",
      "106": "OnDayOfWeekValueGenerator::::generateLValues(com.cronutils.model.field.expression.On,int,int)",
      "107": "OnDayOfWeekValueGenerator::::generateLValues(com.cronutils.model.field.expression.On,int,int)",
      "108": "OnDayOfWeekValueGenerator::::generateLValues(com.cronutils.model.field.expression.On,int,int)",
      "109": "OnDayOfWeekValueGenerator::::generateLValues(com.cronutils.model.field.expression.On,int,int)",
      "110": "OnDayOfWeekValueGenerator::::generateLValues(com.cronutils.model.field.expression.On,int,int)",
      "111": "OnDayOfWeekValueGenerator::::generateLValues(com.cronutils.model.field.expression.On,int,int)",
      "112": "OnDayOfWeekValueGenerator::::generateLValues(com.cronutils.model.field.expression.On,int,int)",
      "113": "OnDayOfWeekValueGenerator::::generateLValues(com.cronutils.model.field.expression.On,int,int)",
      "114": "OnDayOfWeekValueGenerator::::generateLValues(com.cronutils.model.field.expression.On,int,int)",
      "115": "OnDayOfWeekValueGenerator::::generateLValues(com.cronutils.model.field.expression.On,int,int)",
      "116": "OnDayOfWeekValueGenerator::::generateLValues(com.cronutils.model.field.expression.On,int,int)",
      "117": "OnDayOfWeekValueGenerator::::generateLValues(com.cronutils.model.field.expression.On,int,int)",
      "118": "OnDayOfWeekValueGenerator::::generateLValues(com.cronutils.model.field.expression.On,int,int)",
      "119": "OnDayOfWeekValueGenerator::::generateLValues(com.cronutils.model.field.expression.On,int,int)",
      "120": "OnDayOfWeekValueGenerator::::generateLValues(com.cronutils.model.field.expression.On,int,int)",
      "121": "OnDayOfWeekValueGenerator::::generateLValues(com.cronutils.model.field.expression.On,int,int)",
      "122": "OnDayOfWeekValueGenerator::::generateLValues(com.cronutils.model.field.expression.On,int,int)",
      "136": "OnDayOfWeekValueGenerator::::generateNoneValues(com.cronutils.model.field.expression.On,int,int,int)",
      "137": "OnDayOfWeekValueGenerator::::generateNoneValues(com.cronutils.model.field.expression.On,int,int,int)",
      "138": "OnDayOfWeekValueGenerator::::generateNoneValues(com.cronutils.model.field.expression.On,int,int,int)",
      "139": "OnDayOfWeekValueGenerator::::generateNoneValues(com.cronutils.model.field.expression.On,int,int,int)",
      "140": "OnDayOfWeekValueGenerator::::generateNoneValues(com.cronutils.model.field.expression.On,int,int,int)",
      "141": "OnDayOfWeekValueGenerator::::generateNoneValues(com.cronutils.model.field.expression.On,int,int,int)",
      "142": "OnDayOfWeekValueGenerator::::generateNoneValues(com.cronutils.model.field.expression.On,int,int,int)",
      "143": "OnDayOfWeekValueGenerator::::generateNoneValues(com.cronutils.model.field.expression.On,int,int,int)",
      "144": "OnDayOfWeekValueGenerator::::generateNoneValues(com.cronutils.model.field.expression.On,int,int,int)",
      "145": "OnDayOfWeekValueGenerator::::generateNoneValues(com.cronutils.model.field.expression.On,int,int,int)",
      "146": "OnDayOfWeekValueGenerator::::generateNoneValues(com.cronutils.model.field.expression.On,int,int,int)",
      "147": "OnDayOfWeekValueGenerator::::generateNoneValues(com.cronutils.model.field.expression.On,int,int,int)",
      "148": "OnDayOfWeekValueGenerator::::generateNoneValues(com.cronutils.model.field.expression.On,int,int,int)",
      "149": "OnDayOfWeekValueGenerator::::generateNoneValues(com.cronutils.model.field.expression.On,int,int,int)",
      "150": "OnDayOfWeekValueGenerator::::generateNoneValues(com.cronutils.model.field.expression.On,int,int,int)",
      "151": "OnDayOfWeekValueGenerator::::generateNoneValues(com.cronutils.model.field.expression.On,int,int,int)",
      "152": "OnDayOfWeekValueGenerator::::generateNoneValues(com.cronutils.model.field.expression.On,int,int,int)",
      "153": "OnDayOfWeekValueGenerator::::generateNoneValues(com.cronutils.model.field.expression.On,int,int,int)",
      "154": "OnDayOfWeekValueGenerator::::generateNoneValues(com.cronutils.model.field.expression.On,int,int,int)",
      "155": "OnDayOfWeekValueGenerator::::generateNoneValues(com.cronutils.model.field.expression.On,int,int,int)",
      "156": "OnDayOfWeekValueGenerator::::generateNoneValues(com.cronutils.model.field.expression.On,int,int,int)",
      "157": "OnDayOfWeekValueGenerator::::generateNoneValues(com.cronutils.model.field.expression.On,int,int,int)",
      "158": "OnDayOfWeekValueGenerator::::generateNoneValues(com.cronutils.model.field.expression.On,int,int,int)",
      "159": "OnDayOfWeekValueGenerator::::generateNoneValues(com.cronutils.model.field.expression.On,int,int,int)",
      "160": "OnDayOfWeekValueGenerator::::generateNoneValues(com.cronutils.model.field.expression.On,int,int,int)",
      "161": "OnDayOfWeekValueGenerator::::generateNoneValues(com.cronutils.model.field.expression.On,int,int,int)"
    },
    "test_reverse_method_lines_dic": {
      "39": "OnDayOfWeekValueGeneratorTest::::setUp()",
      "40": "OnDayOfWeekValueGeneratorTest::::setUp()",
      "41": "OnDayOfWeekValueGeneratorTest::::setUp()",
      "42": "OnDayOfWeekValueGeneratorTest::::setUp()",
      "43": "OnDayOfWeekValueGeneratorTest::::setUp()",
      "44": "OnDayOfWeekValueGeneratorTest::::setUp()",
      "45": "OnDayOfWeekValueGeneratorTest::::setUp()",
      "47": "OnDayOfWeekValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "48": "OnDayOfWeekValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "49": "OnDayOfWeekValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "50": "OnDayOfWeekValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "51": "OnDayOfWeekValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "53": "OnDayOfWeekValueGeneratorTest::::testConstructorNotMatchesOnDayOfWeekValueGenerator()",
      "54": "OnDayOfWeekValueGeneratorTest::::testConstructorNotMatchesOnDayOfWeekValueGenerator()",
      "55": "OnDayOfWeekValueGeneratorTest::::testConstructorNotMatchesOnDayOfWeekValueGenerator()",
      "56": "OnDayOfWeekValueGeneratorTest::::testConstructorNotMatchesOnDayOfWeekValueGenerator()"
    },
    "tests": [
      {
        "test_lines": [
          47,
          51
        ],
        "covered_lines": [
          30,
          34,
          35,
          36,
          37,
          72
        ]
      },
      {
        "test_lines": [
          53,
          56
        ],
        "covered_lines": [
          30,
          34,
          35,
          36,
          37,
          72
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/cron-utils/src/main/java/com/cronutils/model/time/generator/EveryFieldValueGenerator.java": {
    "class_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.time.generator;\n",
      "\n",
      "import com.cronutils.model.field.CronField;\n",
      "import com.cronutils.model.field.expression.Between;\n",
      "import com.cronutils.model.field.expression.Every;\n",
      "import com.cronutils.model.field.expression.FieldExpression;\n",
      "import com.cronutils.model.field.expression.On;\n",
      "import com.cronutils.utils.VisibleForTesting;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "\n",
      "class EveryFieldValueGenerator extends FieldValueGenerator {\n",
      "\n",
      "    protected final int from;\n",
      "    protected final int to;\n",
      "\n",
      "    public EveryFieldValueGenerator(final CronField cronField) {\n",
      "        super(cronField);\n",
      "\n",
      "        final Every every = (Every) cronField.getExpression();\n",
      "        final FieldExpression everyExpression = every.getExpression();\n",
      "        if (everyExpression instanceof Between) {\n",
      "            final Between between = (Between) everyExpression;\n",
      "\n",
      "            from = Math.max(cronField.getConstraints().getStartRange(), BetweenFieldValueGenerator.map(between.getFrom()));\n",
      "            to = Math.min(cronField.getConstraints().getEndRange(), BetweenFieldValueGenerator.map(between.getTo()));\n",
      "        } else if(everyExpression instanceof On){\n",
      "\n",
      "            final On on = (On) everyExpression;\n",
      "\n",
      "            from = on.getTime().getValue();\n",
      "            to = cronField.getConstraints().getEndRange();\n",
      "        } else {\n",
      "            from = cronField.getConstraints().getStartRange();\n",
      "            to = cronField.getConstraints().getEndRange();\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public int generateNextValue(final int reference) throws NoSuchValueException {\n",
      "        //intuition: for valid values, we have: offset+period*i\n",
      "        if (reference >= to) {\n",
      "            throw new NoSuchValueException();\n",
      "        }\n",
      "        final Every every = (Every) cronField.getExpression();\n",
      "\n",
      "        final int next = getNext(reference, every);\n",
      "        if (next < from) {\n",
      "            return from;\n",
      "        }\n",
      "        if (next > to) {\n",
      "            throw new NoSuchValueException();\n",
      "        }\n",
      "\n",
      "        return next;\n",
      "    }\n",
      "\n",
      "    private int getNext(int reference, Every every) {\n",
      "        final int offset = offset();\n",
      "\n",
      "        if (reference >= offset) {\n",
      "            final int referenceWithoutOffset = reference - offset;\n",
      "            final int period = every.getPeriod().getValue();\n",
      "            final int remainder = referenceWithoutOffset % period;\n",
      "\n",
      "            return reference + (period - remainder);\n",
      "        } else {\n",
      "            return offset;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public int generatePreviousValue(final int reference) throws NoSuchValueException {\n",
      "        final Every every = (Every) cronField.getExpression();\n",
      "        if (reference < from) {\n",
      "            throw new NoSuchValueException();\n",
      "        }\n",
      "        if (reference > to) {\n",
      "            return to;\n",
      "        }\n",
      "        final int period = every.getPeriod().getValue();\n",
      "        final int remainder = (reference - from) % period;\n",
      "        if (remainder == 0) {\n",
      "            return reference - period;\n",
      "        } else {\n",
      "            return reference - remainder;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected List<Integer> generateCandidatesNotIncludingIntervalExtremes(final int start, final int end) {\n",
      "        final List<Integer> values = new ArrayList<>();\n",
      "        try {\n",
      "            final int offset = offset();\n",
      "            if (start < offset && offset < end) {\n",
      "                values.add(offset);\n",
      "            }\n",
      "            int reference = generateNextValue(start);\n",
      "            while (reference < end) {\n",
      "                if (reference != offset) {\n",
      "                    values.add(reference);\n",
      "                }\n",
      "                reference = generateNextValue(reference);\n",
      "            }\n",
      "        } catch (final NoSuchValueException ignored) {\n",
      "            // We just skip, since we generate values until we get the exception\n",
      "        }\n",
      "        return values;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public boolean isMatch(final int value) {\n",
      "        final Every every = (Every) cronField.getExpression();\n",
      "        final int start = offset();\n",
      "        return value >= start && ((value - start) % every.getPeriod().getValue()) == 0 && value >= from && value <= to;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected boolean matchesFieldExpressionClass(final FieldExpression fieldExpression) {\n",
      "        return fieldExpression instanceof Every;\n",
      "    }\n",
      "\n",
      "    @VisibleForTesting\n",
      "    int offset() {\n",
      "        final FieldExpression expression = ((Every) cronField.getExpression()).getExpression();\n",
      "        if (expression instanceof On) {\n",
      "            return ((On) expression).getTime().getValue();\n",
      "        }\n",
      "        return from;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.time.generator;\n",
      "\n",
      "import com.cronutils.model.field.CronField;\n",
      "import com.cronutils.model.field.CronFieldName;\n",
      "import com.cronutils.model.field.constraint.FieldConstraints;\n",
      "import com.cronutils.model.field.constraint.FieldConstraintsBuilder;\n",
      "import com.cronutils.model.field.expression.Every;\n",
      "import com.cronutils.model.field.expression.FieldExpression;\n",
      "import com.cronutils.model.field.value.IntegerFieldValue;\n",
      "import org.junit.jupiter.api.BeforeEach;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import java.util.List;\n",
      "import java.util.Random;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.*;\n",
      "import static org.mockito.Mockito.mock;\n",
      "\n",
      "public class EveryFieldValueGeneratorTest {\n",
      "    private FieldConstraints constraints;\n",
      "    private EveryFieldValueGenerator fieldValueGenerator;\n",
      "\n",
      "    private static final int TIME = 7;\n",
      "\n",
      "    @BeforeEach\n",
      "    public void setUp() {\n",
      "        constraints = FieldConstraintsBuilder.instance().createConstraintsInstance();\n",
      "        fieldValueGenerator = new EveryFieldValueGenerator(new CronField(CronFieldName.HOUR, new Every(new IntegerFieldValue(TIME)), constraints));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGenerateNextValue() throws NoSuchValueException {\n",
      "        final Random random = new Random();\n",
      "        for (int j = 1; j <= 10; j++) {\n",
      "            final int value = TIME * j - (1 + (random.nextInt(3)));\n",
      "            assertEquals(j * (long)TIME, fieldValueGenerator.generateNextValue(value));\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGeneratePreviousValue() throws NoSuchValueException {\n",
      "        final Random random = new Random();\n",
      "        for (int j = 0; j < 10; j++) {\n",
      "            final int value = TIME * j + 1 + random.nextInt(3);\n",
      "            assertEquals(j * (long)TIME, fieldValueGenerator.generatePreviousValue(value));\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGenerateCandidatesNotIncludingIntervalExtremes() {\n",
      "        final int candidatesQty = 7;\n",
      "        final List<Integer> candidates = fieldValueGenerator.generateCandidatesNotIncludingIntervalExtremes(0, TIME * candidatesQty);\n",
      "        assertEquals(candidatesQty - 1L, candidates.size());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testIsMatch() {\n",
      "        assertTrue(fieldValueGenerator.isMatch(TIME));\n",
      "        assertFalse(fieldValueGenerator.isMatch(TIME + 1));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testMatchesFieldExpressionClass() {\n",
      "        assertTrue(fieldValueGenerator.matchesFieldExpressionClass(mock(Every.class)));\n",
      "        assertFalse(fieldValueGenerator.matchesFieldExpressionClass(mock(FieldExpression.class)));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testConstructorNotMatchesEvery() {\n",
      "        assertThrows(IllegalArgumentException.class, () -> new EveryFieldValueGenerator(new CronField(CronFieldName.HOUR, mock(FieldExpression.class), constraints)));\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "EveryFieldValueGenerator::::generateNextValue(int)": [
        53,
        70
      ],
      "EveryFieldValueGenerator::::getNext(int,com.cronutils.model.field.expression.Every)": [
        72,
        84
      ],
      "EveryFieldValueGenerator::::generatePreviousValue(int)": [
        86,
        102
      ],
      "EveryFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)": [
        104,
        123
      ],
      "EveryFieldValueGenerator::::isMatch(int)": [
        125,
        130
      ],
      "EveryFieldValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)": [
        132,
        135
      ],
      "EveryFieldValueGenerator::::offset()": [
        137,
        144
      ]
    },
    "test_method_lines_dic": {
      "EveryFieldValueGeneratorTest::::setUp()": [
        38,
        42
      ],
      "EveryFieldValueGeneratorTest::::testGenerateNextValue()": [
        44,
        51
      ],
      "EveryFieldValueGeneratorTest::::testGeneratePreviousValue()": [
        53,
        60
      ],
      "EveryFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()": [
        62,
        67
      ],
      "EveryFieldValueGeneratorTest::::testIsMatch()": [
        69,
        73
      ],
      "EveryFieldValueGeneratorTest::::testMatchesFieldExpressionClass()": [
        75,
        79
      ],
      "EveryFieldValueGeneratorTest::::testConstructorNotMatchesEvery()": [
        81,
        84
      ]
    },
    "reverse_method_lines_dic": {
      "53": "EveryFieldValueGenerator::::generateNextValue(int)",
      "54": "EveryFieldValueGenerator::::generateNextValue(int)",
      "55": "EveryFieldValueGenerator::::generateNextValue(int)",
      "56": "EveryFieldValueGenerator::::generateNextValue(int)",
      "57": "EveryFieldValueGenerator::::generateNextValue(int)",
      "58": "EveryFieldValueGenerator::::generateNextValue(int)",
      "59": "EveryFieldValueGenerator::::generateNextValue(int)",
      "60": "EveryFieldValueGenerator::::generateNextValue(int)",
      "61": "EveryFieldValueGenerator::::generateNextValue(int)",
      "62": "EveryFieldValueGenerator::::generateNextValue(int)",
      "63": "EveryFieldValueGenerator::::generateNextValue(int)",
      "64": "EveryFieldValueGenerator::::generateNextValue(int)",
      "65": "EveryFieldValueGenerator::::generateNextValue(int)",
      "66": "EveryFieldValueGenerator::::generateNextValue(int)",
      "67": "EveryFieldValueGenerator::::generateNextValue(int)",
      "68": "EveryFieldValueGenerator::::generateNextValue(int)",
      "69": "EveryFieldValueGenerator::::generateNextValue(int)",
      "70": "EveryFieldValueGenerator::::generateNextValue(int)",
      "72": "EveryFieldValueGenerator::::getNext(int,com.cronutils.model.field.expression.Every)",
      "73": "EveryFieldValueGenerator::::getNext(int,com.cronutils.model.field.expression.Every)",
      "74": "EveryFieldValueGenerator::::getNext(int,com.cronutils.model.field.expression.Every)",
      "75": "EveryFieldValueGenerator::::getNext(int,com.cronutils.model.field.expression.Every)",
      "76": "EveryFieldValueGenerator::::getNext(int,com.cronutils.model.field.expression.Every)",
      "77": "EveryFieldValueGenerator::::getNext(int,com.cronutils.model.field.expression.Every)",
      "78": "EveryFieldValueGenerator::::getNext(int,com.cronutils.model.field.expression.Every)",
      "79": "EveryFieldValueGenerator::::getNext(int,com.cronutils.model.field.expression.Every)",
      "80": "EveryFieldValueGenerator::::getNext(int,com.cronutils.model.field.expression.Every)",
      "81": "EveryFieldValueGenerator::::getNext(int,com.cronutils.model.field.expression.Every)",
      "82": "EveryFieldValueGenerator::::getNext(int,com.cronutils.model.field.expression.Every)",
      "83": "EveryFieldValueGenerator::::getNext(int,com.cronutils.model.field.expression.Every)",
      "84": "EveryFieldValueGenerator::::getNext(int,com.cronutils.model.field.expression.Every)",
      "86": "EveryFieldValueGenerator::::generatePreviousValue(int)",
      "87": "EveryFieldValueGenerator::::generatePreviousValue(int)",
      "88": "EveryFieldValueGenerator::::generatePreviousValue(int)",
      "89": "EveryFieldValueGenerator::::generatePreviousValue(int)",
      "90": "EveryFieldValueGenerator::::generatePreviousValue(int)",
      "91": "EveryFieldValueGenerator::::generatePreviousValue(int)",
      "92": "EveryFieldValueGenerator::::generatePreviousValue(int)",
      "93": "EveryFieldValueGenerator::::generatePreviousValue(int)",
      "94": "EveryFieldValueGenerator::::generatePreviousValue(int)",
      "95": "EveryFieldValueGenerator::::generatePreviousValue(int)",
      "96": "EveryFieldValueGenerator::::generatePreviousValue(int)",
      "97": "EveryFieldValueGenerator::::generatePreviousValue(int)",
      "98": "EveryFieldValueGenerator::::generatePreviousValue(int)",
      "99": "EveryFieldValueGenerator::::generatePreviousValue(int)",
      "100": "EveryFieldValueGenerator::::generatePreviousValue(int)",
      "101": "EveryFieldValueGenerator::::generatePreviousValue(int)",
      "102": "EveryFieldValueGenerator::::generatePreviousValue(int)",
      "104": "EveryFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "105": "EveryFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "106": "EveryFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "107": "EveryFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "108": "EveryFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "109": "EveryFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "110": "EveryFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "111": "EveryFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "112": "EveryFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "113": "EveryFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "114": "EveryFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "115": "EveryFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "116": "EveryFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "117": "EveryFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "118": "EveryFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "119": "EveryFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "120": "EveryFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "121": "EveryFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "122": "EveryFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "123": "EveryFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "125": "EveryFieldValueGenerator::::isMatch(int)",
      "126": "EveryFieldValueGenerator::::isMatch(int)",
      "127": "EveryFieldValueGenerator::::isMatch(int)",
      "128": "EveryFieldValueGenerator::::isMatch(int)",
      "129": "EveryFieldValueGenerator::::isMatch(int)",
      "130": "EveryFieldValueGenerator::::isMatch(int)",
      "132": "EveryFieldValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)",
      "133": "EveryFieldValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)",
      "134": "EveryFieldValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)",
      "135": "EveryFieldValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)",
      "137": "EveryFieldValueGenerator::::offset()",
      "138": "EveryFieldValueGenerator::::offset()",
      "139": "EveryFieldValueGenerator::::offset()",
      "140": "EveryFieldValueGenerator::::offset()",
      "141": "EveryFieldValueGenerator::::offset()",
      "142": "EveryFieldValueGenerator::::offset()",
      "143": "EveryFieldValueGenerator::::offset()",
      "144": "EveryFieldValueGenerator::::offset()"
    },
    "test_reverse_method_lines_dic": {
      "38": "EveryFieldValueGeneratorTest::::setUp()",
      "39": "EveryFieldValueGeneratorTest::::setUp()",
      "40": "EveryFieldValueGeneratorTest::::setUp()",
      "41": "EveryFieldValueGeneratorTest::::setUp()",
      "42": "EveryFieldValueGeneratorTest::::setUp()",
      "44": "EveryFieldValueGeneratorTest::::testGenerateNextValue()",
      "45": "EveryFieldValueGeneratorTest::::testGenerateNextValue()",
      "46": "EveryFieldValueGeneratorTest::::testGenerateNextValue()",
      "47": "EveryFieldValueGeneratorTest::::testGenerateNextValue()",
      "48": "EveryFieldValueGeneratorTest::::testGenerateNextValue()",
      "49": "EveryFieldValueGeneratorTest::::testGenerateNextValue()",
      "50": "EveryFieldValueGeneratorTest::::testGenerateNextValue()",
      "51": "EveryFieldValueGeneratorTest::::testGenerateNextValue()",
      "53": "EveryFieldValueGeneratorTest::::testGeneratePreviousValue()",
      "54": "EveryFieldValueGeneratorTest::::testGeneratePreviousValue()",
      "55": "EveryFieldValueGeneratorTest::::testGeneratePreviousValue()",
      "56": "EveryFieldValueGeneratorTest::::testGeneratePreviousValue()",
      "57": "EveryFieldValueGeneratorTest::::testGeneratePreviousValue()",
      "58": "EveryFieldValueGeneratorTest::::testGeneratePreviousValue()",
      "59": "EveryFieldValueGeneratorTest::::testGeneratePreviousValue()",
      "60": "EveryFieldValueGeneratorTest::::testGeneratePreviousValue()",
      "62": "EveryFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "63": "EveryFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "64": "EveryFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "65": "EveryFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "66": "EveryFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "67": "EveryFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "69": "EveryFieldValueGeneratorTest::::testIsMatch()",
      "70": "EveryFieldValueGeneratorTest::::testIsMatch()",
      "71": "EveryFieldValueGeneratorTest::::testIsMatch()",
      "72": "EveryFieldValueGeneratorTest::::testIsMatch()",
      "73": "EveryFieldValueGeneratorTest::::testIsMatch()",
      "75": "EveryFieldValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "76": "EveryFieldValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "77": "EveryFieldValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "78": "EveryFieldValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "79": "EveryFieldValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "81": "EveryFieldValueGeneratorTest::::testConstructorNotMatchesEvery()",
      "82": "EveryFieldValueGeneratorTest::::testConstructorNotMatchesEvery()",
      "83": "EveryFieldValueGeneratorTest::::testConstructorNotMatchesEvery()",
      "84": "EveryFieldValueGeneratorTest::::testConstructorNotMatchesEvery()"
    },
    "tests": [
      {
        "test_lines": [
          44,
          51
        ],
        "covered_lines": [
          32,
          34,
          35,
          36,
          41,
          48,
          49,
          51,
          56,
          59,
          61,
          62,
          65,
          69,
          73,
          75,
          76,
          77,
          78,
          80,
          134,
          139,
          140,
          143
        ]
      },
      {
        "test_lines": [
          53,
          60
        ],
        "covered_lines": [
          32,
          34,
          35,
          36,
          41,
          48,
          49,
          51,
          88,
          89,
          92,
          95,
          96,
          97,
          100,
          134
        ]
      },
      {
        "test_lines": [
          62,
          67
        ],
        "covered_lines": [
          32,
          34,
          35,
          36,
          41,
          48,
          49,
          51,
          56,
          59,
          61,
          62,
          65,
          69,
          73,
          75,
          76,
          77,
          78,
          80,
          106,
          108,
          109,
          112,
          113,
          114,
          115,
          117,
          121,
          122,
          134,
          139,
          140,
          143
        ]
      },
      {
        "test_lines": [
          69,
          73
        ],
        "covered_lines": [
          32,
          34,
          35,
          36,
          41,
          48,
          49,
          51,
          127,
          128,
          129,
          134,
          139,
          140,
          143
        ]
      },
      {
        "test_lines": [
          75,
          79
        ],
        "covered_lines": [
          32,
          34,
          35,
          36,
          41,
          48,
          49,
          51,
          134
        ]
      },
      {
        "test_lines": [
          81,
          84
        ],
        "covered_lines": [
          32,
          34,
          35,
          36,
          41,
          48,
          49,
          51,
          134
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/cron-utils/src/main/java/com/cronutils/model/time/generator/AlwaysFieldValueGenerator.java": {
    "class_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.time.generator;\n",
      "\n",
      "import com.cronutils.model.field.CronField;\n",
      "import com.cronutils.model.field.CronFieldName;\n",
      "import com.cronutils.model.field.expression.Always;\n",
      "import com.cronutils.model.field.expression.FieldExpression;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "\n",
      "class AlwaysFieldValueGenerator extends FieldValueGenerator {\n",
      "    public AlwaysFieldValueGenerator(final CronField cronField) {\n",
      "        super(cronField);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public int generateNextValue(final int reference) throws NoSuchValueException {\n",
      "        final int newvalue = reference + 1;\n",
      "        if (newvalue <= cronField.getConstraints().getEndRange()) {\n",
      "            return newvalue;\n",
      "        } else {\n",
      "            throw new NoSuchValueException();\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public int generatePreviousValue(final int reference) throws NoSuchValueException {\n",
      "        final int newvalue = reference - 1;\n",
      "        if (newvalue >= cronField.getConstraints().getStartRange()) {\n",
      "            return newvalue;\n",
      "        } else {\n",
      "            throw new NoSuchValueException();\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected List<Integer> generateCandidatesNotIncludingIntervalExtremes(final int start, final int end) {\n",
      "        final List<Integer> values = new ArrayList<>();\n",
      "        for (int j = start + 1; j < end; j++) {\n",
      "            values.add(j);\n",
      "        }\n",
      "        return values;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public boolean isMatch(final int value) {\n",
      "        return cronField.getField() == CronFieldName.DAY_OF_WEEK || cronField.getConstraints().isInRange(value);\n",
      "        //TODO for DoW we do not have enough information to reject.\n",
      "        //TODO We should think of a better strategy to propagate context information that would allow us perform validations.\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected boolean matchesFieldExpressionClass(final FieldExpression fieldExpression) {\n",
      "        return fieldExpression instanceof Always;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Copyright 2015 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.model.time.generator;\n",
      "\n",
      "import com.cronutils.model.field.CronField;\n",
      "import com.cronutils.model.field.CronFieldName;\n",
      "import com.cronutils.model.field.constraint.FieldConstraintsBuilder;\n",
      "import com.cronutils.model.field.expression.Always;\n",
      "import com.cronutils.model.field.expression.FieldExpression;\n",
      "import org.junit.jupiter.api.BeforeEach;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import java.util.List;\n",
      "import java.util.Random;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.*;\n",
      "import static org.mockito.Mockito.mock;\n",
      "\n",
      "public class AlwaysFieldValueGeneratorTest {\n",
      "    private AlwaysFieldValueGenerator fieldValueGenerator;\n",
      "\n",
      "    @BeforeEach\n",
      "    public void setUp() {\n",
      "        fieldValueGenerator = new AlwaysFieldValueGenerator(\n",
      "                new CronField(CronFieldName.HOUR, FieldExpression.always(), FieldConstraintsBuilder.instance().createConstraintsInstance()));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGenerateNextValue() throws NoSuchValueException {\n",
      "        for (int j = 0; j < 10; j++) {\n",
      "            assertEquals(j + 1L, fieldValueGenerator.generateNextValue(j));\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGeneratePreviousValue() throws NoSuchValueException {\n",
      "        for (int j = 1; j < 10; j++) {\n",
      "            assertEquals(j - 1L, fieldValueGenerator.generatePreviousValue(j));\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGenerateCandidatesNotIncludingIntervalExtremes() {\n",
      "        final List<Integer> values = fieldValueGenerator.generateCandidatesNotIncludingIntervalExtremes(0, 10);\n",
      "        for (int j = 1; j < 10; j++) {\n",
      "            assertTrue(values.contains(j));\n",
      "        }\n",
      "        assertEquals(9, values.size());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testIsMatch() {\n",
      "        final Random random = new Random();\n",
      "        assertTrue(fieldValueGenerator.isMatch((random.nextInt(10))));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testMatchesFieldExpressionClass() {\n",
      "        assertTrue(fieldValueGenerator.matchesFieldExpressionClass(mock(Always.class)));\n",
      "        assertFalse(fieldValueGenerator.matchesFieldExpressionClass(mock(FieldExpression.class)));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testConstructorNotMatchesAlways() {\n",
      "        assertThrows(IllegalArgumentException.class,\n",
      "                () -> new AlwaysFieldValueGenerator(\n",
      "                        new CronField(CronFieldName.HOUR, mock(FieldExpression.class), FieldConstraintsBuilder.instance().createConstraintsInstance())));\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "AlwaysFieldValueGenerator::::generateNextValue(int)": [
        29,
        37
      ],
      "AlwaysFieldValueGenerator::::generatePreviousValue(int)": [
        39,
        47
      ],
      "AlwaysFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)": [
        49,
        56
      ],
      "AlwaysFieldValueGenerator::::isMatch(int)": [
        58,
        63
      ],
      "AlwaysFieldValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)": [
        65,
        68
      ]
    },
    "test_method_lines_dic": {
      "AlwaysFieldValueGeneratorTest::::setUp()": [
        33,
        37
      ],
      "AlwaysFieldValueGeneratorTest::::testGenerateNextValue()": [
        39,
        44
      ],
      "AlwaysFieldValueGeneratorTest::::testGeneratePreviousValue()": [
        46,
        51
      ],
      "AlwaysFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()": [
        53,
        60
      ],
      "AlwaysFieldValueGeneratorTest::::testIsMatch()": [
        62,
        66
      ],
      "AlwaysFieldValueGeneratorTest::::testMatchesFieldExpressionClass()": [
        68,
        72
      ],
      "AlwaysFieldValueGeneratorTest::::testConstructorNotMatchesAlways()": [
        74,
        79
      ]
    },
    "reverse_method_lines_dic": {
      "29": "AlwaysFieldValueGenerator::::generateNextValue(int)",
      "30": "AlwaysFieldValueGenerator::::generateNextValue(int)",
      "31": "AlwaysFieldValueGenerator::::generateNextValue(int)",
      "32": "AlwaysFieldValueGenerator::::generateNextValue(int)",
      "33": "AlwaysFieldValueGenerator::::generateNextValue(int)",
      "34": "AlwaysFieldValueGenerator::::generateNextValue(int)",
      "35": "AlwaysFieldValueGenerator::::generateNextValue(int)",
      "36": "AlwaysFieldValueGenerator::::generateNextValue(int)",
      "37": "AlwaysFieldValueGenerator::::generateNextValue(int)",
      "39": "AlwaysFieldValueGenerator::::generatePreviousValue(int)",
      "40": "AlwaysFieldValueGenerator::::generatePreviousValue(int)",
      "41": "AlwaysFieldValueGenerator::::generatePreviousValue(int)",
      "42": "AlwaysFieldValueGenerator::::generatePreviousValue(int)",
      "43": "AlwaysFieldValueGenerator::::generatePreviousValue(int)",
      "44": "AlwaysFieldValueGenerator::::generatePreviousValue(int)",
      "45": "AlwaysFieldValueGenerator::::generatePreviousValue(int)",
      "46": "AlwaysFieldValueGenerator::::generatePreviousValue(int)",
      "47": "AlwaysFieldValueGenerator::::generatePreviousValue(int)",
      "49": "AlwaysFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "50": "AlwaysFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "51": "AlwaysFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "52": "AlwaysFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "53": "AlwaysFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "54": "AlwaysFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "55": "AlwaysFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "56": "AlwaysFieldValueGenerator::::generateCandidatesNotIncludingIntervalExtremes(int,int)",
      "58": "AlwaysFieldValueGenerator::::isMatch(int)",
      "59": "AlwaysFieldValueGenerator::::isMatch(int)",
      "60": "AlwaysFieldValueGenerator::::isMatch(int)",
      "61": "AlwaysFieldValueGenerator::::isMatch(int)",
      "62": "AlwaysFieldValueGenerator::::isMatch(int)",
      "63": "AlwaysFieldValueGenerator::::isMatch(int)",
      "65": "AlwaysFieldValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)",
      "66": "AlwaysFieldValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)",
      "67": "AlwaysFieldValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)",
      "68": "AlwaysFieldValueGenerator::::matchesFieldExpressionClass(com.cronutils.model.field.expression.FieldExpression)"
    },
    "test_reverse_method_lines_dic": {
      "33": "AlwaysFieldValueGeneratorTest::::setUp()",
      "34": "AlwaysFieldValueGeneratorTest::::setUp()",
      "35": "AlwaysFieldValueGeneratorTest::::setUp()",
      "36": "AlwaysFieldValueGeneratorTest::::setUp()",
      "37": "AlwaysFieldValueGeneratorTest::::setUp()",
      "39": "AlwaysFieldValueGeneratorTest::::testGenerateNextValue()",
      "40": "AlwaysFieldValueGeneratorTest::::testGenerateNextValue()",
      "41": "AlwaysFieldValueGeneratorTest::::testGenerateNextValue()",
      "42": "AlwaysFieldValueGeneratorTest::::testGenerateNextValue()",
      "43": "AlwaysFieldValueGeneratorTest::::testGenerateNextValue()",
      "44": "AlwaysFieldValueGeneratorTest::::testGenerateNextValue()",
      "46": "AlwaysFieldValueGeneratorTest::::testGeneratePreviousValue()",
      "47": "AlwaysFieldValueGeneratorTest::::testGeneratePreviousValue()",
      "48": "AlwaysFieldValueGeneratorTest::::testGeneratePreviousValue()",
      "49": "AlwaysFieldValueGeneratorTest::::testGeneratePreviousValue()",
      "50": "AlwaysFieldValueGeneratorTest::::testGeneratePreviousValue()",
      "51": "AlwaysFieldValueGeneratorTest::::testGeneratePreviousValue()",
      "53": "AlwaysFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "54": "AlwaysFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "55": "AlwaysFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "56": "AlwaysFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "57": "AlwaysFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "58": "AlwaysFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "59": "AlwaysFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "60": "AlwaysFieldValueGeneratorTest::::testGenerateCandidatesNotIncludingIntervalExtremes()",
      "62": "AlwaysFieldValueGeneratorTest::::testIsMatch()",
      "63": "AlwaysFieldValueGeneratorTest::::testIsMatch()",
      "64": "AlwaysFieldValueGeneratorTest::::testIsMatch()",
      "65": "AlwaysFieldValueGeneratorTest::::testIsMatch()",
      "66": "AlwaysFieldValueGeneratorTest::::testIsMatch()",
      "68": "AlwaysFieldValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "69": "AlwaysFieldValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "70": "AlwaysFieldValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "71": "AlwaysFieldValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "72": "AlwaysFieldValueGeneratorTest::::testMatchesFieldExpressionClass()",
      "74": "AlwaysFieldValueGeneratorTest::::testConstructorNotMatchesAlways()",
      "75": "AlwaysFieldValueGeneratorTest::::testConstructorNotMatchesAlways()",
      "76": "AlwaysFieldValueGeneratorTest::::testConstructorNotMatchesAlways()",
      "77": "AlwaysFieldValueGeneratorTest::::testConstructorNotMatchesAlways()",
      "78": "AlwaysFieldValueGeneratorTest::::testConstructorNotMatchesAlways()",
      "79": "AlwaysFieldValueGeneratorTest::::testConstructorNotMatchesAlways()"
    },
    "tests": [
      {
        "test_lines": [
          39,
          44
        ],
        "covered_lines": [
          26,
          27,
          31,
          32,
          33,
          67
        ]
      },
      {
        "test_lines": [
          46,
          51
        ],
        "covered_lines": [
          26,
          27,
          41,
          42,
          43,
          67
        ]
      },
      {
        "test_lines": [
          53,
          60
        ],
        "covered_lines": [
          26,
          27,
          51,
          52,
          53,
          55,
          67
        ]
      },
      {
        "test_lines": [
          62,
          66
        ],
        "covered_lines": [
          26,
          27,
          60,
          67
        ]
      },
      {
        "test_lines": [
          68,
          72
        ],
        "covered_lines": [
          26,
          27,
          67
        ]
      },
      {
        "test_lines": [
          74,
          79
        ],
        "covered_lines": [
          26,
          27,
          67
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/cron-utils/src/main/java/com/cronutils/utils/CronFrequencyComparator.java": {
    "class_content": [
      "package com.cronutils.utils;\n",
      "\n",
      "import com.cronutils.model.Cron;\n",
      "import com.cronutils.model.time.ExecutionTime;\n",
      "\n",
      "import java.time.ZonedDateTime;\n",
      "import java.util.Comparator;\n",
      "\n",
      "public class CronFrequencyComparator implements Comparator<Cron> {\n",
      "    private final ZonedDateTime startDate;\n",
      "    private final ZonedDateTime endDate;\n",
      "\n",
      "    public CronFrequencyComparator(ZonedDateTime startDate, ZonedDateTime endDate){\n",
      "        this.startDate = startDate;\n",
      "        this.endDate = endDate;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public int compare(Cron o1, Cron o2) {\n",
      "        int executions1 = ExecutionTime.forCron(o1).countExecutions(startDate, endDate);\n",
      "        int executions2 = ExecutionTime.forCron(o2).countExecutions(startDate, endDate);\n",
      "        return executions1-executions2;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package com.cronutils.utils;\n",
      "\n",
      "import com.cronutils.model.Cron;\n",
      "import com.cronutils.model.CronType;\n",
      "import com.cronutils.model.definition.CronDefinition;\n",
      "import com.cronutils.model.definition.CronDefinitionBuilder;\n",
      "import com.cronutils.parser.CronParser;\n",
      "import org.junit.jupiter.api.BeforeEach;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import java.time.LocalDateTime;\n",
      "import java.time.ZoneId;\n",
      "import java.time.ZonedDateTime;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.*;\n",
      "\n",
      "public class CronFrequencyComparatorTest {\n",
      "    private CronFrequencyComparator comparator;\n",
      "    private CronParser parser;\n",
      "    private Cron cron1;\n",
      "    private Cron cron2;\n",
      "\n",
      "    @BeforeEach\n",
      "    public void setUp() {\n",
      "        ZonedDateTime date1 = LocalDateTime.of(2018, 11, 5, 0, 0, 0).atZone(ZoneId.of(\"UTC\"));\n",
      "        ZonedDateTime date2 = LocalDateTime.of(2018, 11, 11, 0, 0, 0).atZone(ZoneId.of(\"UTC\"));\n",
      "        comparator = new CronFrequencyComparator(date1, date2);\n",
      "        final CronDefinition cronDefinition = CronDefinitionBuilder.instanceDefinitionFor(CronType.SPRING53);\n",
      "        parser = new CronParser(cronDefinition);\n",
      "\n",
      "        cron1 = parser.parse(\"0 0 9-17 * * MON-FRI\");//on the hour nine-to-five weekdays -> 9 executions per day, five times a week -> 45 executions per week\n",
      "        cron2 = parser.parse(\"0 0/30 8-10 * * *\");//8:00, 8:30, 9:00, 9:30, 10:00 and 10:30 every day -> six executions per day, seven times a week -> 42 executions per week\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void compareMoreFrequent() {\n",
      "        assertTrue(comparator.compare(cron1, cron2)>0);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void compareLessFrequent() {\n",
      "        assertTrue(comparator.compare(cron2, cron1)<0);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void compareEqualFrequent() {\n",
      "        Cron cronx = parser.parse(\"0 0 9-17 * * MON-FRI\");//on the hour nine-to-five weekdays -> 9 executions per day, five times a week -> 45 executions per week\n",
      "        assertEquals(0, comparator.compare(cron1, cronx));\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "CronFrequencyComparator::::compare(com.cronutils.model.Cron,com.cronutils.model.Cron)": [
        18,
        23
      ]
    },
    "test_method_lines_dic": {
      "CronFrequencyComparatorTest::::setUp()": [
        23,
        33
      ],
      "CronFrequencyComparatorTest::::compareMoreFrequent()": [
        35,
        38
      ],
      "CronFrequencyComparatorTest::::compareLessFrequent()": [
        40,
        43
      ],
      "CronFrequencyComparatorTest::::compareEqualFrequent()": [
        45,
        49
      ]
    },
    "reverse_method_lines_dic": {
      "18": "CronFrequencyComparator::::compare(com.cronutils.model.Cron,com.cronutils.model.Cron)",
      "19": "CronFrequencyComparator::::compare(com.cronutils.model.Cron,com.cronutils.model.Cron)",
      "20": "CronFrequencyComparator::::compare(com.cronutils.model.Cron,com.cronutils.model.Cron)",
      "21": "CronFrequencyComparator::::compare(com.cronutils.model.Cron,com.cronutils.model.Cron)",
      "22": "CronFrequencyComparator::::compare(com.cronutils.model.Cron,com.cronutils.model.Cron)",
      "23": "CronFrequencyComparator::::compare(com.cronutils.model.Cron,com.cronutils.model.Cron)"
    },
    "test_reverse_method_lines_dic": {
      "23": "CronFrequencyComparatorTest::::setUp()",
      "24": "CronFrequencyComparatorTest::::setUp()",
      "25": "CronFrequencyComparatorTest::::setUp()",
      "26": "CronFrequencyComparatorTest::::setUp()",
      "27": "CronFrequencyComparatorTest::::setUp()",
      "28": "CronFrequencyComparatorTest::::setUp()",
      "29": "CronFrequencyComparatorTest::::setUp()",
      "30": "CronFrequencyComparatorTest::::setUp()",
      "31": "CronFrequencyComparatorTest::::setUp()",
      "32": "CronFrequencyComparatorTest::::setUp()",
      "33": "CronFrequencyComparatorTest::::setUp()",
      "35": "CronFrequencyComparatorTest::::compareMoreFrequent()",
      "36": "CronFrequencyComparatorTest::::compareMoreFrequent()",
      "37": "CronFrequencyComparatorTest::::compareMoreFrequent()",
      "38": "CronFrequencyComparatorTest::::compareMoreFrequent()",
      "40": "CronFrequencyComparatorTest::::compareLessFrequent()",
      "41": "CronFrequencyComparatorTest::::compareLessFrequent()",
      "42": "CronFrequencyComparatorTest::::compareLessFrequent()",
      "43": "CronFrequencyComparatorTest::::compareLessFrequent()",
      "45": "CronFrequencyComparatorTest::::compareEqualFrequent()",
      "46": "CronFrequencyComparatorTest::::compareEqualFrequent()",
      "47": "CronFrequencyComparatorTest::::compareEqualFrequent()",
      "48": "CronFrequencyComparatorTest::::compareEqualFrequent()",
      "49": "CronFrequencyComparatorTest::::compareEqualFrequent()"
    },
    "tests": [
      {
        "test_lines": [
          35,
          38
        ],
        "covered_lines": [
          13,
          14,
          15,
          16,
          20,
          21,
          22
        ]
      },
      {
        "test_lines": [
          40,
          43
        ],
        "covered_lines": [
          13,
          14,
          15,
          16,
          20,
          21,
          22
        ]
      },
      {
        "test_lines": [
          45,
          49
        ],
        "covered_lines": [
          13,
          14,
          15,
          16,
          20,
          21,
          22
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/cron-utils/src/main/java/com/cronutils/utils/StringUtils.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *      http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.utils;\n",
      "\n",
      "import java.util.StringJoiner;\n",
      "\n",
      "/**\n",
      " * <p>Operations on {@link java.lang.String} that are\n",
      " * {@code null} safe.</p>\n",
      " *\n",
      " * <ul>\n",
      " * <li><b>IsEmpty</b>\n",
      " * - checks if a String contains text</li>\n",
      " * <li><b>IndexOfAny</b>\n",
      " * - index-of any of a set of Strings</li>\n",
      " * </ul>\n",
      " *\n",
      " * <p>The {@code StringUtils} class defines certain words related to\n",
      " * String handling.</p>\n",
      " *\n",
      " * <ul>\n",
      " * <li>null - {@code null}</li>\n",
      " * <li>empty - a zero-length string ({@code \"\"})</li>\n",
      " * <li>space - the space character ({@code ' '}, char 32)</li>\n",
      " * <li>whitespace - the characters defined by {@link Character#isWhitespace(char)}</li>\n",
      " * <li>trim - the characters &lt;= 32 as in {@link String#trim()}</li>\n",
      " * </ul>\n",
      " *\n",
      " * <p>{@code StringUtils} handles {@code null} input Strings quietly.\n",
      " * That is to say that a {@code null} input will return {@code null}.\n",
      " * Where a {@code boolean} or {@code int} is being returned\n",
      " * details vary by method.</p>\n",
      " *\n",
      " * <p>A side effect of the {@code null} handling is that a\n",
      " * {@code NullPointerException} should be considered a bug in\n",
      " * {@code StringUtils}.</p>\n",
      " *\n",
      " * <p>Methods in this class give sample code to explain their operation.\n",
      " * The symbol {@code *} is used to indicate any input including {@code null}.</p>\n",
      " *\n",
      " * <p>#ThreadSafe#</p>\n",
      " *\n",
      " * @version $Id: StringUtils.java 1648067 2014-12-27 16:45:42Z britter $\n",
      " * @see java.lang.String\n",
      " * @since 1.0\n",
      " */\n",
      "//@Immutable\n",
      "public class StringUtils {\n",
      "\n",
      "    /**\n",
      "     * The empty String {@code \"\"}.\n",
      "     * @since 2.0\n",
      "     */\n",
      "    public static final String EMPTY = \"\";\n",
      "\n",
      "    private StringUtils() {\n",
      "    }\n",
      "\n",
      "    // Empty checks\n",
      "    //-----------------------------------------------------------------------\n",
      "\n",
      "    /**\n",
      "     * <p>Checks if a CharSequence is empty (\"\") or null.</p>\n",
      "     *\n",
      "     * <pre>\n",
      "     * StringUtils.isEmpty(null)      = true\n",
      "     * StringUtils.isEmpty(\"\")        = true\n",
      "     * StringUtils.isEmpty(\" \")       = false\n",
      "     * StringUtils.isEmpty(\"bob\")     = false\n",
      "     * StringUtils.isEmpty(\"  bob  \") = false\n",
      "     * </pre>\n",
      "     *\n",
      "     * <p>NOTE: This method changed in Lang version 2.0.\n",
      "     * It no longer trims the CharSequence.\n",
      "     * That functionality is available in isBlank().</p>\n",
      "     *\n",
      "     * @param cs the CharSequence to check, may be null\n",
      "     * @return {@code true} if the CharSequence is empty or null\n",
      "     * @since 3.0 Changed signature from isEmpty(String) to isEmpty(CharSequence)\n",
      "     */\n",
      "    public static boolean isEmpty(final CharSequence cs) {\n",
      "        return cs == null || cs.length() == 0;\n",
      "    }\n",
      "\n",
      "    // ContainsAny\n",
      "    //-----------------------------------------------------------------------\n",
      "\n",
      "    /**\n",
      "     * <p>Checks if the CharSequence contains any character in the given.\n",
      "     * set of characters.</p>\n",
      "     *\n",
      "     * <p>A {@code null} CharSequence will return {@code false}.\n",
      "     * A {@code null} or zero length search array will return {@code false}.</p>\n",
      "     *\n",
      "     * <pre>\n",
      "     * StringUtils.containsAny(null, *)                = false\n",
      "     * StringUtils.containsAny(\"\", *)                  = false\n",
      "     * StringUtils.containsAny(*, null)                = false\n",
      "     * StringUtils.containsAny(*, [])                  = false\n",
      "     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n",
      "     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n",
      "     * StringUtils.containsAny(\"aba\", ['z'])           = false\n",
      "     * </pre>\n",
      "     *\n",
      "     * @param cs          the CharSequence to check, may be null\n",
      "     * @param searchChars the chars to search for, may be null\n",
      "     * @return the {@code true} if any of the chars are found,\n",
      "     * {@code false} if no match or null input\n",
      "     * @since 2.4\n",
      "     * @since 3.0 Changed signature from containsAny(String, char[]) to containsAny(CharSequence, char...)\n",
      "     */\n",
      "    public static boolean containsAny(final CharSequence cs, final char... searchChars) {\n",
      "        if (isEmpty(cs) || searchChars == null || searchChars.length == 0) {\n",
      "            return false;\n",
      "        }\n",
      "        final int csLength = cs.length();\n",
      "        final int searchLength = searchChars.length;\n",
      "        final int csLast = csLength - 1;\n",
      "        final int searchLast = searchLength - 1;\n",
      "        for (int i = 0; i < csLength; i++) {\n",
      "            final char ch = cs.charAt(i);\n",
      "            for (int j = 0; j < searchLength; j++) {\n",
      "                if (searchChars[j] == ch) {\n",
      "                    if (Character.isHighSurrogate(ch)) {\n",
      "                        if (j == searchLast) {\n",
      "                            // missing low surrogate, fine, like String.indexOf(String)\n",
      "                            return true;\n",
      "                        }\n",
      "                        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {\n",
      "                            return true;\n",
      "                        }\n",
      "                    } else {\n",
      "                        // ch is in the Basic Multilingual Plane\n",
      "                        return true;\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "        return false;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * <p>\n",
      "     * Checks if the CharSequence contains only Unicode digits. A decimal point is\n",
      "     * not a Unicode digit and returns false.\n",
      "     * </p>\n",
      "     *\n",
      "     * <p>\n",
      "     * {@code null} will return {@code false}. An empty CharSequence (length()=0)\n",
      "     * will return {@code false}.\n",
      "     * </p>\n",
      "     *\n",
      "     * <p>\n",
      "     * Note that the method does not allow for a leading sign, either positive or\n",
      "     * negative. Also, if a String passes the numeric test, it may still generate a\n",
      "     * NumberFormatException when parsed by Integer.parseInt or Long.parseLong, e.g.\n",
      "     * if the value is outside the range for int or long respectively.\n",
      "     * </p>\n",
      "     *\n",
      "     * <pre>\n",
      "     * StringUtils.isNumeric(null)   = false\n",
      "     * StringUtils.isNumeric(\"\")     = false\n",
      "     * StringUtils.isNumeric(\"  \")   = false\n",
      "     * StringUtils.isNumeric(\"123\")  = true\n",
      "     * StringUtils.isNumeric(\"\\u0967\\u0968\\u0969\")  = true\n",
      "     * StringUtils.isNumeric(\"12 3\") = false\n",
      "     * StringUtils.isNumeric(\"ab2c\") = false\n",
      "     * StringUtils.isNumeric(\"12-3\") = false\n",
      "     * StringUtils.isNumeric(\"12.3\") = false\n",
      "     * StringUtils.isNumeric(\"-123\") = false\n",
      "     * StringUtils.isNumeric(\"+123\") = false\n",
      "     * </pre>\n",
      "     *\n",
      "     * @param cs the CharSequence to check, may be null\n",
      "     * @return {@code true} if only contains digits, and is non-null\n",
      "     * @since 3.0 Changed signature from isNumeric(String) to\n",
      "     *        isNumeric(CharSequence)\n",
      "     * @since 3.0 Changed \"\" to return false and not true\n",
      "     */\n",
      "    public static boolean isNumeric(final CharSequence cs) {\n",
      "        if (isEmpty(cs)) {\n",
      "            return false;\n",
      "        }\n",
      "        final int sz = cs.length();\n",
      "        for (int i = 0; i < sz; i++) {\n",
      "            if (!Character.isDigit(cs.charAt(i))) {\n",
      "                return false;\n",
      "            }\n",
      "        }\n",
      "        return true;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * <p>\n",
      "     * Joins the elements of the provided array into a single String containing the\n",
      "     * provided list of elements.\n",
      "     * </p>\n",
      "     *\n",
      "     * <p>\n",
      "     * No delimiter is added before or after the list. A {@code null} separator is\n",
      "     * the same as an empty String (\"\"). Null objects or empty strings within the\n",
      "     * array are represented by empty strings.\n",
      "     * </p>\n",
      "     *\n",
      "     * <pre>\n",
      "     * StringUtils.join(null, *)                = null\n",
      "     * StringUtils.join([], *)                  = \"\"\n",
      "     * StringUtils.join([null], *)              = \"null\"\n",
      "     * StringUtils.join([\"a\", \"b\", \"c\"], \"--\")  = \"a--b--c\"\n",
      "     * StringUtils.join([\"a\", \"b\", \"c\"], null)  = \"abc\"\n",
      "     * StringUtils.join([\"a\", \"b\", \"c\"], \"\")    = \"abc\"\n",
      "     * StringUtils.join([null, \"\", \"a\"], ',')   = \"null,,a\"\n",
      "     * </pre>\n",
      "     *\n",
      "     * @param parts - the array of values to join together, may be null\n",
      "     * @param separator - the separator character to use, null treated as \"\"\n",
      "     * @return the joined String, {@code null} if null array input\n",
      "     */\n",
      "    public static String join(final Object[] parts, final String separator) {\n",
      "        if (parts == null) {\n",
      "            return null;\n",
      "        }\n",
      "\n",
      "        final StringJoiner joiner = new StringJoiner(separator == null ? EMPTY : separator);\n",
      "        for (final Object part : parts) {\n",
      "            joiner.add(String.valueOf(part));\n",
      "        }\n",
      "\n",
      "        return joiner.toString();\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package com.cronutils.utils;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.assertEquals;\n",
      "import static org.junit.jupiter.api.Assertions.assertNull;\n",
      "\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "public class StringUtilsTest {\n",
      "\n",
      "    @Test\n",
      "    public void join() {\n",
      "        assertNull(StringUtils.join(null, \"\"));\n",
      "        assertEquals(StringUtils.join(new Object[] {}, \"\"), \"\");\n",
      "        assertEquals(StringUtils.join(new Object[] { null }, \"\"), \"null\");\n",
      "        assertEquals(StringUtils.join(new Object[] { \"a\", \"b\", \"c\" }, \"--\"), \"a--b--c\");\n",
      "        assertEquals(StringUtils.join(new Object[] { \"a\", \"b\", \"c\" }, null), \"abc\");\n",
      "        assertEquals(StringUtils.join(new Object[] { \"a\", \"b\", \"c\" }, \"\"), \"abc\");\n",
      "        assertEquals(StringUtils.join(new Object[] { null, \"\", \"a\" }, \",\"), \"null,,a\");\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "method_lines_dic": {
      "StringUtils::::isEmpty(java.lang.CharSequence)": [
        96,
        98
      ],
      "StringUtils::::containsAny(java.lang.CharSequence,char[])": [
        127,
        155
      ],
      "StringUtils::::isNumeric(java.lang.CharSequence)": [
        195,
        206
      ],
      "StringUtils::::join(java.lang.Object[],java.lang.String)": [
        234,
        245
      ]
    },
    "test_method_lines_dic": {
      "StringUtilsTest::::join()": [
        10,
        19
      ]
    },
    "reverse_method_lines_dic": {
      "96": "StringUtils::::isEmpty(java.lang.CharSequence)",
      "97": "StringUtils::::isEmpty(java.lang.CharSequence)",
      "98": "StringUtils::::isEmpty(java.lang.CharSequence)",
      "127": "StringUtils::::containsAny(java.lang.CharSequence,char[])",
      "128": "StringUtils::::containsAny(java.lang.CharSequence,char[])",
      "129": "StringUtils::::containsAny(java.lang.CharSequence,char[])",
      "130": "StringUtils::::containsAny(java.lang.CharSequence,char[])",
      "131": "StringUtils::::containsAny(java.lang.CharSequence,char[])",
      "132": "StringUtils::::containsAny(java.lang.CharSequence,char[])",
      "133": "StringUtils::::containsAny(java.lang.CharSequence,char[])",
      "134": "StringUtils::::containsAny(java.lang.CharSequence,char[])",
      "135": "StringUtils::::containsAny(java.lang.CharSequence,char[])",
      "136": "StringUtils::::containsAny(java.lang.CharSequence,char[])",
      "137": "StringUtils::::containsAny(java.lang.CharSequence,char[])",
      "138": "StringUtils::::containsAny(java.lang.CharSequence,char[])",
      "139": "StringUtils::::containsAny(java.lang.CharSequence,char[])",
      "140": "StringUtils::::containsAny(java.lang.CharSequence,char[])",
      "141": "StringUtils::::containsAny(java.lang.CharSequence,char[])",
      "142": "StringUtils::::containsAny(java.lang.CharSequence,char[])",
      "143": "StringUtils::::containsAny(java.lang.CharSequence,char[])",
      "144": "StringUtils::::containsAny(java.lang.CharSequence,char[])",
      "145": "StringUtils::::containsAny(java.lang.CharSequence,char[])",
      "146": "StringUtils::::containsAny(java.lang.CharSequence,char[])",
      "147": "StringUtils::::containsAny(java.lang.CharSequence,char[])",
      "148": "StringUtils::::containsAny(java.lang.CharSequence,char[])",
      "149": "StringUtils::::containsAny(java.lang.CharSequence,char[])",
      "150": "StringUtils::::containsAny(java.lang.CharSequence,char[])",
      "151": "StringUtils::::containsAny(java.lang.CharSequence,char[])",
      "152": "StringUtils::::containsAny(java.lang.CharSequence,char[])",
      "153": "StringUtils::::containsAny(java.lang.CharSequence,char[])",
      "154": "StringUtils::::containsAny(java.lang.CharSequence,char[])",
      "155": "StringUtils::::containsAny(java.lang.CharSequence,char[])",
      "195": "StringUtils::::isNumeric(java.lang.CharSequence)",
      "196": "StringUtils::::isNumeric(java.lang.CharSequence)",
      "197": "StringUtils::::isNumeric(java.lang.CharSequence)",
      "198": "StringUtils::::isNumeric(java.lang.CharSequence)",
      "199": "StringUtils::::isNumeric(java.lang.CharSequence)",
      "200": "StringUtils::::isNumeric(java.lang.CharSequence)",
      "201": "StringUtils::::isNumeric(java.lang.CharSequence)",
      "202": "StringUtils::::isNumeric(java.lang.CharSequence)",
      "203": "StringUtils::::isNumeric(java.lang.CharSequence)",
      "204": "StringUtils::::isNumeric(java.lang.CharSequence)",
      "205": "StringUtils::::isNumeric(java.lang.CharSequence)",
      "206": "StringUtils::::isNumeric(java.lang.CharSequence)",
      "234": "StringUtils::::join(java.lang.Object[],java.lang.String)",
      "235": "StringUtils::::join(java.lang.Object[],java.lang.String)",
      "236": "StringUtils::::join(java.lang.Object[],java.lang.String)",
      "237": "StringUtils::::join(java.lang.Object[],java.lang.String)",
      "238": "StringUtils::::join(java.lang.Object[],java.lang.String)",
      "239": "StringUtils::::join(java.lang.Object[],java.lang.String)",
      "240": "StringUtils::::join(java.lang.Object[],java.lang.String)",
      "241": "StringUtils::::join(java.lang.Object[],java.lang.String)",
      "242": "StringUtils::::join(java.lang.Object[],java.lang.String)",
      "243": "StringUtils::::join(java.lang.Object[],java.lang.String)",
      "244": "StringUtils::::join(java.lang.Object[],java.lang.String)",
      "245": "StringUtils::::join(java.lang.Object[],java.lang.String)"
    },
    "test_reverse_method_lines_dic": {
      "10": "StringUtilsTest::::join()",
      "11": "StringUtilsTest::::join()",
      "12": "StringUtilsTest::::join()",
      "13": "StringUtilsTest::::join()",
      "14": "StringUtilsTest::::join()",
      "15": "StringUtilsTest::::join()",
      "16": "StringUtilsTest::::join()",
      "17": "StringUtilsTest::::join()",
      "18": "StringUtilsTest::::join()",
      "19": "StringUtilsTest::::join()"
    },
    "tests": [
      {
        "test_lines": [
          10,
          19
        ],
        "covered_lines": [
          235,
          236,
          239,
          240,
          241,
          244
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/cron-utils/src/main/java/com/cronutils/utils/DateUtils.java": {
    "class_content": [
      "/*\n",
      " * Copyright 2014 jmrozanec\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package com.cronutils.utils;\n",
      "\n",
      "import java.time.Duration;\n",
      "import java.time.ZonedDateTime;\n",
      "import java.util.Collections;\n",
      "import java.util.List;\n",
      "\n",
      "public class DateUtils {\n",
      "    private DateUtils(){}\n",
      "\n",
      "    public static int workdaysCount(ZonedDateTime startDate, int days, List<ZonedDateTime> holidays, WeekendPolicy weekendPolicy){\n",
      "        return workdaysCount(startDate, startDate.plusDays(days), holidays, weekendPolicy);\n",
      "    }\n",
      "\n",
      "    public static int workdaysCount(ZonedDateTime startDate, ZonedDateTime endDate, List<ZonedDateTime> holidays, WeekendPolicy weekendPolicy){\n",
      "        Collections.sort(holidays);\n",
      "        holidays = holidaysInRange(startDate, endDate, holidays);\n",
      "        int daysToWeekend = WeekendPolicy.daysToWeekend(weekendPolicy, startDate);\n",
      "        int daysFromWeekend = WeekendPolicy.daysFromWeekend(weekendPolicy, endDate);\n",
      "        int daysBetween = (int)Duration.between(startDate, endDate).toDays()+1;\n",
      "\n",
      "        //2+ [xxx+2]/7*5\n",
      "        int tmpWeekdays = (daysBetween-daysToWeekend-daysFromWeekend-2)/7*5;\n",
      "        tmpWeekdays = tmpWeekdays-holidays.size();\n",
      "\n",
      "        return tmpWeekdays+daysToWeekend+daysFromWeekend;\n",
      "    }\n",
      "\n",
      "    private static List<ZonedDateTime> holidaysInRange(ZonedDateTime startDate, ZonedDateTime endDate, List<ZonedDateTime> holidays){\n",
      "        if(holidays.isEmpty()){\n",
      "            return holidays;\n",
      "        }\n",
      "        int idxstart = findIdx(0, holidays.size()-1, startDate, holidays);\n",
      "        int idxend = findIdx(0, holidays.size()-1, endDate, holidays);\n",
      "        return holidays.subList(idxstart, idxend+1);\n",
      "    }\n",
      "\n",
      "    private static int findIdx(int startidx, int endidx, ZonedDateTime endDate, List<ZonedDateTime> holidays){\n",
      "        if(startidx==endidx){\n",
      "            return startidx;\n",
      "        }\n",
      "        int pivot = (endidx-startidx)/2;\n",
      "\n",
      "        if(holidays.get(pivot).equals(endDate)){\n",
      "            return pivot;\n",
      "        }\n",
      "        if(holidays.get(pivot).isBefore(endDate)){\n",
      "            return findIdx(++pivot, endidx, endDate, holidays);\n",
      "        }else{\n",
      "            return findIdx(startidx, pivot, endDate, holidays);\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package com.cronutils.utils;\n",
      "\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import java.time.LocalDate;\n",
      "import java.time.LocalTime;\n",
      "import java.time.ZoneId;\n",
      "import java.time.ZonedDateTime;\n",
      "import java.util.ArrayList;\n",
      "import java.util.Arrays;\n",
      "import java.util.List;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.assertEquals;\n",
      "\n",
      "public class DateUtilsTest {\n",
      "\n",
      "    @Test\n",
      "    public void workdaysCountPolicyThursday() throws Exception {\n",
      "        LocalDate date = LocalDate.of(2018, 1, 6);//this is a saturday\n",
      "        int daysToEndDate = 1;//sunday\n",
      "        WeekendPolicy policy = WeekendPolicy.THURSDAY_FRIDAY;\n",
      "        int workdaysCount = DateUtils.workdaysCount(ZonedDateTime.of(date, LocalTime.of(1, 0), ZoneId.of(\"America/Argentina/Buenos_Aires\")), daysToEndDate, new ArrayList<>(), policy);\n",
      "        assertEquals(2, workdaysCount);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void workdaysCountPolicyFriday() throws Exception {\n",
      "        LocalDate date = LocalDate.of(2018, 1, 6);//this is a saturday\n",
      "        int daysToEndDate = 1;//sunday\n",
      "        WeekendPolicy policy = WeekendPolicy.FRIDAY_SATURDAY;\n",
      "        int daysToWorkday = DateUtils.workdaysCount(ZonedDateTime.of(date, LocalTime.of(1, 0), ZoneId.of(\"America/Argentina/Buenos_Aires\")), daysToEndDate, new ArrayList<>(), policy);\n",
      "        assertEquals(1, daysToWorkday);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void workdaysCountPolicySaturday() throws Exception {\n",
      "        LocalDate date = LocalDate.of(2018, 1, 6);//this is a saturday\n",
      "        int daysToEndDate = 1;//sunday\n",
      "        WeekendPolicy policy = WeekendPolicy.SATURDAY_SUNDAY;\n",
      "        int daysToWorkday = DateUtils.workdaysCount(ZonedDateTime.of(date, LocalTime.of(1, 0), ZoneId.of(\"America/Argentina/Buenos_Aires\")), daysToEndDate, new ArrayList<>(), policy);\n",
      "        assertEquals(0, daysToWorkday);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void workdaysMay2018Argentina() throws Exception {\n",
      "        ZonedDateTime start = ZonedDateTime.of(LocalDate.of(2018, 5, 1), LocalTime.of(1, 0), ZoneId.of(\"America/Argentina/Buenos_Aires\"));\n",
      "        ZonedDateTime end = ZonedDateTime.of(LocalDate.of(2018, 5, 31), LocalTime.of(1, 0), ZoneId.of(\"America/Argentina/Buenos_Aires\"));\n",
      "        List<ZonedDateTime> holidays = Arrays.asList(\n",
      "                ZonedDateTime.of(LocalDate.of(2018, 5, 1), LocalTime.of(1, 0), ZoneId.of(\"America/Argentina/Buenos_Aires\")),\n",
      "                ZonedDateTime.of(LocalDate.of(2018, 5, 25), LocalTime.of(1, 0), ZoneId.of(\"America/Argentina/Buenos_Aires\"))\n",
      "        );\n",
      "        WeekendPolicy policy = WeekendPolicy.SATURDAY_SUNDAY;\n",
      "        int daysToWorkday = DateUtils.workdaysCount(start, end, holidays, policy);\n",
      "        assertEquals(21, daysToWorkday);\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "DateUtils::::workdaysCount(java.time.ZonedDateTime,int,java.util.List<java.time.ZonedDateTime>,com.cronutils.utils.WeekendPolicy)": [
        23,
        25
      ],
      "DateUtils::::workdaysCount(java.time.ZonedDateTime,java.time.ZonedDateTime,java.util.List<java.time.ZonedDateTime>,com.cronutils.utils.WeekendPolicy)": [
        27,
        39
      ],
      "DateUtils::::holidaysInRange(java.time.ZonedDateTime,java.time.ZonedDateTime,java.util.List<java.time.ZonedDateTime>)": [
        41,
        48
      ],
      "DateUtils::::findIdx(int,int,java.time.ZonedDateTime,java.util.List<java.time.ZonedDateTime>)": [
        50,
        64
      ]
    },
    "test_method_lines_dic": {
      "DateUtilsTest::::workdaysCountPolicyThursday()": [
        17,
        24
      ],
      "DateUtilsTest::::workdaysCountPolicyFriday()": [
        26,
        33
      ],
      "DateUtilsTest::::workdaysCountPolicySaturday()": [
        35,
        42
      ],
      "DateUtilsTest::::workdaysMay2018Argentina()": [
        44,
        55
      ]
    },
    "reverse_method_lines_dic": {
      "23": "DateUtils::::workdaysCount(java.time.ZonedDateTime,int,java.util.List<java.time.ZonedDateTime>,com.cronutils.utils.WeekendPolicy)",
      "24": "DateUtils::::workdaysCount(java.time.ZonedDateTime,int,java.util.List<java.time.ZonedDateTime>,com.cronutils.utils.WeekendPolicy)",
      "25": "DateUtils::::workdaysCount(java.time.ZonedDateTime,int,java.util.List<java.time.ZonedDateTime>,com.cronutils.utils.WeekendPolicy)",
      "27": "DateUtils::::workdaysCount(java.time.ZonedDateTime,java.time.ZonedDateTime,java.util.List<java.time.ZonedDateTime>,com.cronutils.utils.WeekendPolicy)",
      "28": "DateUtils::::workdaysCount(java.time.ZonedDateTime,java.time.ZonedDateTime,java.util.List<java.time.ZonedDateTime>,com.cronutils.utils.WeekendPolicy)",
      "29": "DateUtils::::workdaysCount(java.time.ZonedDateTime,java.time.ZonedDateTime,java.util.List<java.time.ZonedDateTime>,com.cronutils.utils.WeekendPolicy)",
      "30": "DateUtils::::workdaysCount(java.time.ZonedDateTime,java.time.ZonedDateTime,java.util.List<java.time.ZonedDateTime>,com.cronutils.utils.WeekendPolicy)",
      "31": "DateUtils::::workdaysCount(java.time.ZonedDateTime,java.time.ZonedDateTime,java.util.List<java.time.ZonedDateTime>,com.cronutils.utils.WeekendPolicy)",
      "32": "DateUtils::::workdaysCount(java.time.ZonedDateTime,java.time.ZonedDateTime,java.util.List<java.time.ZonedDateTime>,com.cronutils.utils.WeekendPolicy)",
      "33": "DateUtils::::workdaysCount(java.time.ZonedDateTime,java.time.ZonedDateTime,java.util.List<java.time.ZonedDateTime>,com.cronutils.utils.WeekendPolicy)",
      "34": "DateUtils::::workdaysCount(java.time.ZonedDateTime,java.time.ZonedDateTime,java.util.List<java.time.ZonedDateTime>,com.cronutils.utils.WeekendPolicy)",
      "35": "DateUtils::::workdaysCount(java.time.ZonedDateTime,java.time.ZonedDateTime,java.util.List<java.time.ZonedDateTime>,com.cronutils.utils.WeekendPolicy)",
      "36": "DateUtils::::workdaysCount(java.time.ZonedDateTime,java.time.ZonedDateTime,java.util.List<java.time.ZonedDateTime>,com.cronutils.utils.WeekendPolicy)",
      "37": "DateUtils::::workdaysCount(java.time.ZonedDateTime,java.time.ZonedDateTime,java.util.List<java.time.ZonedDateTime>,com.cronutils.utils.WeekendPolicy)",
      "38": "DateUtils::::workdaysCount(java.time.ZonedDateTime,java.time.ZonedDateTime,java.util.List<java.time.ZonedDateTime>,com.cronutils.utils.WeekendPolicy)",
      "39": "DateUtils::::workdaysCount(java.time.ZonedDateTime,java.time.ZonedDateTime,java.util.List<java.time.ZonedDateTime>,com.cronutils.utils.WeekendPolicy)",
      "41": "DateUtils::::holidaysInRange(java.time.ZonedDateTime,java.time.ZonedDateTime,java.util.List<java.time.ZonedDateTime>)",
      "42": "DateUtils::::holidaysInRange(java.time.ZonedDateTime,java.time.ZonedDateTime,java.util.List<java.time.ZonedDateTime>)",
      "43": "DateUtils::::holidaysInRange(java.time.ZonedDateTime,java.time.ZonedDateTime,java.util.List<java.time.ZonedDateTime>)",
      "44": "DateUtils::::holidaysInRange(java.time.ZonedDateTime,java.time.ZonedDateTime,java.util.List<java.time.ZonedDateTime>)",
      "45": "DateUtils::::holidaysInRange(java.time.ZonedDateTime,java.time.ZonedDateTime,java.util.List<java.time.ZonedDateTime>)",
      "46": "DateUtils::::holidaysInRange(java.time.ZonedDateTime,java.time.ZonedDateTime,java.util.List<java.time.ZonedDateTime>)",
      "47": "DateUtils::::holidaysInRange(java.time.ZonedDateTime,java.time.ZonedDateTime,java.util.List<java.time.ZonedDateTime>)",
      "48": "DateUtils::::holidaysInRange(java.time.ZonedDateTime,java.time.ZonedDateTime,java.util.List<java.time.ZonedDateTime>)",
      "50": "DateUtils::::findIdx(int,int,java.time.ZonedDateTime,java.util.List<java.time.ZonedDateTime>)",
      "51": "DateUtils::::findIdx(int,int,java.time.ZonedDateTime,java.util.List<java.time.ZonedDateTime>)",
      "52": "DateUtils::::findIdx(int,int,java.time.ZonedDateTime,java.util.List<java.time.ZonedDateTime>)",
      "53": "DateUtils::::findIdx(int,int,java.time.ZonedDateTime,java.util.List<java.time.ZonedDateTime>)",
      "54": "DateUtils::::findIdx(int,int,java.time.ZonedDateTime,java.util.List<java.time.ZonedDateTime>)",
      "55": "DateUtils::::findIdx(int,int,java.time.ZonedDateTime,java.util.List<java.time.ZonedDateTime>)",
      "56": "DateUtils::::findIdx(int,int,java.time.ZonedDateTime,java.util.List<java.time.ZonedDateTime>)",
      "57": "DateUtils::::findIdx(int,int,java.time.ZonedDateTime,java.util.List<java.time.ZonedDateTime>)",
      "58": "DateUtils::::findIdx(int,int,java.time.ZonedDateTime,java.util.List<java.time.ZonedDateTime>)",
      "59": "DateUtils::::findIdx(int,int,java.time.ZonedDateTime,java.util.List<java.time.ZonedDateTime>)",
      "60": "DateUtils::::findIdx(int,int,java.time.ZonedDateTime,java.util.List<java.time.ZonedDateTime>)",
      "61": "DateUtils::::findIdx(int,int,java.time.ZonedDateTime,java.util.List<java.time.ZonedDateTime>)",
      "62": "DateUtils::::findIdx(int,int,java.time.ZonedDateTime,java.util.List<java.time.ZonedDateTime>)",
      "63": "DateUtils::::findIdx(int,int,java.time.ZonedDateTime,java.util.List<java.time.ZonedDateTime>)",
      "64": "DateUtils::::findIdx(int,int,java.time.ZonedDateTime,java.util.List<java.time.ZonedDateTime>)"
    },
    "test_reverse_method_lines_dic": {
      "17": "DateUtilsTest::::workdaysCountPolicyThursday()",
      "18": "DateUtilsTest::::workdaysCountPolicyThursday()",
      "19": "DateUtilsTest::::workdaysCountPolicyThursday()",
      "20": "DateUtilsTest::::workdaysCountPolicyThursday()",
      "21": "DateUtilsTest::::workdaysCountPolicyThursday()",
      "22": "DateUtilsTest::::workdaysCountPolicyThursday()",
      "23": "DateUtilsTest::::workdaysCountPolicyThursday()",
      "24": "DateUtilsTest::::workdaysCountPolicyThursday()",
      "26": "DateUtilsTest::::workdaysCountPolicyFriday()",
      "27": "DateUtilsTest::::workdaysCountPolicyFriday()",
      "28": "DateUtilsTest::::workdaysCountPolicyFriday()",
      "29": "DateUtilsTest::::workdaysCountPolicyFriday()",
      "30": "DateUtilsTest::::workdaysCountPolicyFriday()",
      "31": "DateUtilsTest::::workdaysCountPolicyFriday()",
      "32": "DateUtilsTest::::workdaysCountPolicyFriday()",
      "33": "DateUtilsTest::::workdaysCountPolicyFriday()",
      "35": "DateUtilsTest::::workdaysCountPolicySaturday()",
      "36": "DateUtilsTest::::workdaysCountPolicySaturday()",
      "37": "DateUtilsTest::::workdaysCountPolicySaturday()",
      "38": "DateUtilsTest::::workdaysCountPolicySaturday()",
      "39": "DateUtilsTest::::workdaysCountPolicySaturday()",
      "40": "DateUtilsTest::::workdaysCountPolicySaturday()",
      "41": "DateUtilsTest::::workdaysCountPolicySaturday()",
      "42": "DateUtilsTest::::workdaysCountPolicySaturday()",
      "44": "DateUtilsTest::::workdaysMay2018Argentina()",
      "45": "DateUtilsTest::::workdaysMay2018Argentina()",
      "46": "DateUtilsTest::::workdaysMay2018Argentina()",
      "47": "DateUtilsTest::::workdaysMay2018Argentina()",
      "48": "DateUtilsTest::::workdaysMay2018Argentina()",
      "49": "DateUtilsTest::::workdaysMay2018Argentina()",
      "50": "DateUtilsTest::::workdaysMay2018Argentina()",
      "51": "DateUtilsTest::::workdaysMay2018Argentina()",
      "52": "DateUtilsTest::::workdaysMay2018Argentina()",
      "53": "DateUtilsTest::::workdaysMay2018Argentina()",
      "54": "DateUtilsTest::::workdaysMay2018Argentina()",
      "55": "DateUtilsTest::::workdaysMay2018Argentina()"
    },
    "tests": [
      {
        "test_lines": [
          17,
          24
        ],
        "covered_lines": [
          24,
          28,
          29,
          30,
          31,
          32,
          35,
          36,
          38,
          42,
          43
        ]
      },
      {
        "test_lines": [
          26,
          33
        ],
        "covered_lines": [
          24,
          28,
          29,
          30,
          31,
          32,
          35,
          36,
          38,
          42,
          43
        ]
      },
      {
        "test_lines": [
          35,
          42
        ],
        "covered_lines": [
          24,
          28,
          29,
          30,
          31,
          32,
          35,
          36,
          38,
          42,
          43
        ]
      },
      {
        "test_lines": [
          44,
          55
        ],
        "covered_lines": [
          28,
          29,
          30,
          31,
          32,
          35,
          36,
          38,
          42,
          45,
          46,
          47,
          51,
          52,
          54,
          56,
          57,
          59,
          60
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/cron-utils/src/main/java/com/cronutils/converter/CronConverter.java": {
    "class_content": [
      "/*\n",
      " * Copyright 2019 fahmpeermoh\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.converter;\n",
      "\n",
      "import org.slf4j.Logger;\n",
      "import org.slf4j.LoggerFactory;\n",
      "\n",
      "import java.time.ZoneId;\n",
      "import java.util.Calendar;\n",
      "import java.util.TimeZone;\n",
      "\n",
      "import com.cronutils.utils.StringUtils;\n",
      "\n",
      "public class CronConverter {\n",
      "\n",
      "\tprivate static final Logger LOGGER = LoggerFactory.getLogger(CronConverter.class);\n",
      "\n",
      "\tprivate static final String CRON_FIELDS_SEPARATOR = \" \";\n",
      "\tprivate String[] cronParts;\n",
      "\tprivate Calendar fromCalendar;\n",
      "\tprivate String sourceCron;\n",
      "\tprivate ZoneId sourceZoneId;\n",
      "\tprivate ZoneId targetZoneId;\n",
      "\n",
      "\tprivate CronToCalendarTransformer toCalendarConverter;\n",
      "\tprivate CalendarToCronTransformer toCronConverter;\n",
      "\n",
      "\tpublic CronConverter(CronToCalendarTransformer toCalendarConverter, CalendarToCronTransformer toCronConverter){\n",
      "\t\tthis.toCalendarConverter = toCalendarConverter;\n",
      "\t\tthis.toCronConverter = toCronConverter;\n",
      "\t}\n",
      "\n",
      "\tpublic CronConverter using(String cronExpression) {\n",
      "\t\tthis.sourceCron = cronExpression;\n",
      "\t\tcronParts = cronExpression.split(CRON_FIELDS_SEPARATOR);\n",
      "\t\tLOGGER.debug(\"Cron '{}' split into {}\", cronExpression, cronParts);\n",
      "\t\treturn this;\n",
      "\t}\n",
      "\n",
      "\tpublic CronConverter from(ZoneId zoneId) {\n",
      "\t\tsourceZoneId = zoneId;\n",
      "\t\tfromCalendar = getCalendar(zoneId);\n",
      "\t\ttoCalendarConverter.apply(cronParts, fromCalendar);\n",
      "\t\tLOGGER.debug(\"Calendar object built using cron :{} and zoneID {} => {}\",\n",
      "\t\t\t\tcronParts, zoneId, fromCalendar);\n",
      "\t\treturn this;\n",
      "\t}\n",
      "\n",
      "\tpublic CronConverter to(ZoneId zoneId) {\n",
      "\t\ttargetZoneId = zoneId;\n",
      "\t\tCalendar toCalendar = getCalendar(zoneId);\n",
      "\t\ttoCalendar.setTimeInMillis(fromCalendar.getTimeInMillis());\n",
      "\t\tLOGGER.debug(\n",
      "\t\t\t\t\"Calendar object built from calendar {} and zoneID {} => {}\",\n",
      "\t\t\t\tfromCalendar, zoneId, toCalendar);\n",
      "\t\ttoCronConverter.apply(cronParts, toCalendar);\n",
      "\t\tLOGGER.debug(\"cron after applying calendar {} => {}\", toCalendar,\n",
      "\t\t\t\tcronParts);\n",
      "\t\treturn this;\n",
      "\t}\n",
      "\n",
      "\tpublic String convert() {\n",
      "\t\tString targetCron = StringUtils.join(cronParts, CRON_FIELDS_SEPARATOR);\n",
      "\t\tLOGGER.info(\"Converted CRON -- {} :[{}] => {} :[{}]\", sourceZoneId,\n",
      "\t\t\t\tsourceCron, targetZoneId, targetCron);\n",
      "\t\treturn targetCron;\n",
      "\t}\n",
      "\n",
      "\tprivate Calendar getCalendar(ZoneId id) {\n",
      "\t\treturn Calendar.getInstance(TimeZone.getTimeZone(id));\n",
      "\t}\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Copyright 2019 fahmpeermoh\n",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      " * you may not use this file except in compliance with the License.\n",
      " * You may obtain a copy of the License at\n",
      " * http://www.apache.org/licenses/LICENSE-2.0\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package com.cronutils.converter;\n",
      "\n",
      "import org.junit.jupiter.params.ParameterizedTest;\n",
      "import org.junit.jupiter.params.provider.Arguments;\n",
      "import org.junit.jupiter.params.provider.MethodSource;\n",
      "\n",
      "import java.time.ZoneId;\n",
      "import java.util.stream.Stream;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.assertEquals;\n",
      "import static org.mockito.Mockito.spy;\n",
      "\n",
      "public class CronConverterTest {\n",
      "\tprivate CronConverter cronConverter = spy(new CronConverter(\n",
      "\t\t\tnew CronToCalendarTransformer(),\n",
      "\t\t\tnew CalendarToCronTransformer()\n",
      "\t));\n",
      "\n",
      "\tpublic static Stream<Arguments> cronExpressions() {\n",
      "\t\treturn Stream.of(Arguments.of(\"Pacific/Pago_Pago\", \"15 * * * *\", \"15 * * * *\"),\n",
      "\t\t\t\tArguments.of(\"Antarctica/Casey\", \"? * * * *\", \"? * * * *\"),\n",
      "\t\t\t\tArguments.of(\"Antarctica/Troll\", \"45 * * * *\", \"45 * * * *\"),\n",
      "\t\t\t\tArguments.of(\"Pacific/Chatham\", \"15 * * * *\", \"30 * * * *\"),\n",
      "\t\t\t\tArguments.of(\"Asia/Colombo\", \"45 * * ? *\", \"15 * * ? *\"),\n",
      "\t\t\t\tArguments.of(\"Asia/Colombo\", \"0/45 * * ? *\", \"0/45 * * ? *\"),\n",
      "\t\t\t\tArguments.of(\"Australia/Eucla\", \"13 * * ? *\", \"28 * * ? *\"),\n",
      "\t\t\t\tArguments.of(\"America/St_Johns\", \"0 0/15 * * * ?\", \"30 0/15 * * * ?\"),\n",
      "\t\t\t\tArguments.of(\"America/St_Johns\", \"0 8 * * ?\", \"30 10 * * ?\"),\n",
      "\t\t\t\tArguments.of(\"America/St_Johns\", \"0 0/1 * * ?\", \"30 0/1 * * ?\"),\n",
      "\t\t\t\tArguments.of(\"America/St_Johns\", \"20 0 * * ?\", \"50 2 * * ?\"),\n",
      "\t\t\t\tArguments.of(\"Asia/Kolkata\", \"20 0 * * ?\", \"50 18 * * ?\")\n",
      "\t\t);\n",
      "\t}\n",
      "\n",
      "\t@ParameterizedTest\n",
      "\t@MethodSource(\"cronExpressions\")\n",
      "\tpublic void testCronConverterBuilder(String timezone, String inputCronExpression, String expectedCronExpression) {\n",
      "\t\tassertEquals(expectedCronExpression,\n",
      "\t\t\t\tcronConverter.using(inputCronExpression)\n",
      "\t\t\t\t\t\t.from(ZoneId.of(timezone)).to(ZoneId.of(\"UTC\"))\n",
      "\t\t\t\t\t\t.convert());\n",
      "\t}\n",
      "}\n"
    ],
    "method_lines_dic": {
      "CronConverter::::using(java.lang.String)": [
        44,
        49
      ],
      "CronConverter::::from(java.time.ZoneId)": [
        51,
        58
      ],
      "CronConverter::::to(java.time.ZoneId)": [
        60,
        71
      ],
      "CronConverter::::convert()": [
        73,
        78
      ],
      "CronConverter::::getCalendar(java.time.ZoneId)": [
        80,
        82
      ]
    },
    "test_method_lines_dic": {
      "CronConverterTest::::cronExpressions()": [
        32,
        46
      ],
      "CronConverterTest::::testCronConverterBuilder(java.lang.String,java.lang.String,java.lang.String)": [
        48,
        55
      ]
    },
    "reverse_method_lines_dic": {
      "44": "CronConverter::::using(java.lang.String)",
      "45": "CronConverter::::using(java.lang.String)",
      "46": "CronConverter::::using(java.lang.String)",
      "47": "CronConverter::::using(java.lang.String)",
      "48": "CronConverter::::using(java.lang.String)",
      "49": "CronConverter::::using(java.lang.String)",
      "51": "CronConverter::::from(java.time.ZoneId)",
      "52": "CronConverter::::from(java.time.ZoneId)",
      "53": "CronConverter::::from(java.time.ZoneId)",
      "54": "CronConverter::::from(java.time.ZoneId)",
      "55": "CronConverter::::from(java.time.ZoneId)",
      "56": "CronConverter::::from(java.time.ZoneId)",
      "57": "CronConverter::::from(java.time.ZoneId)",
      "58": "CronConverter::::from(java.time.ZoneId)",
      "60": "CronConverter::::to(java.time.ZoneId)",
      "61": "CronConverter::::to(java.time.ZoneId)",
      "62": "CronConverter::::to(java.time.ZoneId)",
      "63": "CronConverter::::to(java.time.ZoneId)",
      "64": "CronConverter::::to(java.time.ZoneId)",
      "65": "CronConverter::::to(java.time.ZoneId)",
      "66": "CronConverter::::to(java.time.ZoneId)",
      "67": "CronConverter::::to(java.time.ZoneId)",
      "68": "CronConverter::::to(java.time.ZoneId)",
      "69": "CronConverter::::to(java.time.ZoneId)",
      "70": "CronConverter::::to(java.time.ZoneId)",
      "71": "CronConverter::::to(java.time.ZoneId)",
      "73": "CronConverter::::convert()",
      "74": "CronConverter::::convert()",
      "75": "CronConverter::::convert()",
      "76": "CronConverter::::convert()",
      "77": "CronConverter::::convert()",
      "78": "CronConverter::::convert()",
      "80": "CronConverter::::getCalendar(java.time.ZoneId)",
      "81": "CronConverter::::getCalendar(java.time.ZoneId)",
      "82": "CronConverter::::getCalendar(java.time.ZoneId)"
    },
    "test_reverse_method_lines_dic": {
      "32": "CronConverterTest::::cronExpressions()",
      "33": "CronConverterTest::::cronExpressions()",
      "34": "CronConverterTest::::cronExpressions()",
      "35": "CronConverterTest::::cronExpressions()",
      "36": "CronConverterTest::::cronExpressions()",
      "37": "CronConverterTest::::cronExpressions()",
      "38": "CronConverterTest::::cronExpressions()",
      "39": "CronConverterTest::::cronExpressions()",
      "40": "CronConverterTest::::cronExpressions()",
      "41": "CronConverterTest::::cronExpressions()",
      "42": "CronConverterTest::::cronExpressions()",
      "43": "CronConverterTest::::cronExpressions()",
      "44": "CronConverterTest::::cronExpressions()",
      "45": "CronConverterTest::::cronExpressions()",
      "46": "CronConverterTest::::cronExpressions()",
      "48": "CronConverterTest::::testCronConverterBuilder(java.lang.String,java.lang.String,java.lang.String)",
      "49": "CronConverterTest::::testCronConverterBuilder(java.lang.String,java.lang.String,java.lang.String)",
      "50": "CronConverterTest::::testCronConverterBuilder(java.lang.String,java.lang.String,java.lang.String)",
      "51": "CronConverterTest::::testCronConverterBuilder(java.lang.String,java.lang.String,java.lang.String)",
      "52": "CronConverterTest::::testCronConverterBuilder(java.lang.String,java.lang.String,java.lang.String)",
      "53": "CronConverterTest::::testCronConverterBuilder(java.lang.String,java.lang.String,java.lang.String)",
      "54": "CronConverterTest::::testCronConverterBuilder(java.lang.String,java.lang.String,java.lang.String)",
      "55": "CronConverterTest::::testCronConverterBuilder(java.lang.String,java.lang.String,java.lang.String)"
    },
    "tests": [
      {
        "test_lines": [
          48,
          55
        ],
        "covered_lines": [
          27,
          39,
          40,
          41,
          42,
          45,
          46,
          47,
          48,
          52,
          53,
          54,
          55,
          57,
          61,
          62,
          63,
          64,
          67,
          68,
          70,
          74,
          75,
          77,
          81
        ]
      }
    ]
  }
}