{
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-layout/src/main/java/org/ofdrw/layout/PageLayout.java": {
    "class_content": [
      "package org.ofdrw.layout;\n",
      "\n",
      "import org.ofdrw.core.basicStructure.doc.CT_PageArea;\n",
      "import org.ofdrw.core.basicType.ST_Box;\n",
      "import org.ofdrw.layout.element.ArrayParamTool;\n",
      "\n",
      "import java.util.Arrays;\n",
      "\n",
      "/**\n",
      " * \u865a\u62df\u9875\u9762\u6837\u5f0f\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2020-02-28 03:25:54\n",
      " */\n",
      "public class PageLayout {\n",
      "\n",
      "    public static PageLayout A0() {\n",
      "        return new PageLayout(841d, 1189d);\n",
      "    }\n",
      "\n",
      "    public static PageLayout A1() {\n",
      "        return new PageLayout(594d, 841d);\n",
      "    }\n",
      "\n",
      "    public static PageLayout A2() {\n",
      "        return new PageLayout(420d, 594d);\n",
      "    }\n",
      "\n",
      "    public static PageLayout A3() {\n",
      "        return new PageLayout(297d, 420d);\n",
      "    }\n",
      "\n",
      "    public static PageLayout A4() {\n",
      "        return new PageLayout(210d, 297d);\n",
      "    }\n",
      "\n",
      "    public static PageLayout A5() {\n",
      "        return new PageLayout(148d, 210d);\n",
      "    }\n",
      "\n",
      "    public static PageLayout A6() {\n",
      "        return new PageLayout(105d, 148d);\n",
      "    }\n",
      "\n",
      "    public static PageLayout A7() {\n",
      "        return new PageLayout(74d, 105d);\n",
      "    }\n",
      "\n",
      "    public static PageLayout A8() {\n",
      "        return new PageLayout(52d, 74d);\n",
      "    }\n",
      "\n",
      "    public static PageLayout A9() {\n",
      "        return new PageLayout(37d, 52d);\n",
      "    }\n",
      "\n",
      "    public static PageLayout A10() {\n",
      "        return new PageLayout(26d, 37d);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u9875\u9762\u5bbd\u5ea6\n",
      "     */\n",
      "    Double width;\n",
      "    /**\n",
      "     * \u9875\u9762\u9ad8\u5ea6\n",
      "     */\n",
      "    Double height;\n",
      "\n",
      "    /**\n",
      "     * \u5916\u8fb9\u8ddd\n",
      "     * <p>\n",
      "     * \u9875\u8fb9\u8ddd\uff1a\u4e0a\u4e0b\u90fd\u662f2.54\u5398\u7c73\uff0c\u5de6\u53f3\u90fd\u662f3.17\u5398\u7c73\u3002\n",
      "     *\n",
      "     * <p>\n",
      "     * \u4e0a \u5de6 \u4e0b \u53f3\n",
      "     * [0  1  2  3]\n",
      "     * \u9ed8\u8ba4\u503c 36\n",
      "     */\n",
      "    private Double[] margin = {25.4, 31.7, 25.4, 31.7};\n",
      "\n",
      "    public PageLayout(Double width, Double height) {\n",
      "        this.width = width;\n",
      "        this.height = height;\n",
      "    }\n",
      "\n",
      "    public PageLayout(ST_Box box) {\n",
      "        if (box == null) {\n",
      "            throw new IllegalArgumentException(\"box \u4e3a\u7a7a\");\n",
      "        }\n",
      "        this.width = box.getWidth();\n",
      "        this.height = box.getHeight();\n",
      "    }\n",
      "\n",
      "    public Double getWidth() {\n",
      "        return width;\n",
      "    }\n",
      "\n",
      "    public PageLayout setWidth(Double width) {\n",
      "        this.width = width;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public Double getHeight() {\n",
      "        return height;\n",
      "    }\n",
      "\n",
      "    public PageLayout setHeight(Double height) {\n",
      "        this.height = height;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public Double[] getMargin() {\n",
      "        return margin;\n",
      "    }\n",
      "\n",
      "    public PageLayout setMargin(Double... margin) {\n",
      "        this.margin = ArrayParamTool.arr4p(margin);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public PageLayout setMarginTop(double top) {\n",
      "        margin[0] = top;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public double getMarginTop() {\n",
      "        return margin[0];\n",
      "    }\n",
      "\n",
      "    public PageLayout setMarginRight(double right) {\n",
      "        margin[1] = right;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public double getMarginRight() {\n",
      "        return margin[1];\n",
      "    }\n",
      "\n",
      "    public PageLayout setMarginBottom(double bottom) {\n",
      "        margin[2] = bottom;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public double getMarginBottom() {\n",
      "        return margin[2];\n",
      "    }\n",
      "\n",
      "\n",
      "    public PageLayout setMarginLeft(double left) {\n",
      "        margin[3] = left;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public double getMarginLeft() {\n",
      "        return margin[3];\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * @return \u5b9e\u9645\u80fd\u653e\u7f6e\u5185\u5bb9\u7684\u5bbd\u5ea6\n",
      "     */\n",
      "    public double contentWidth() {\n",
      "        return width - getMarginLeft() - getMarginRight();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * @return \u5b9e\u9645\u80fd\u653e\u7f6e\u5185\u5bb9\u7684\u9ad8\u5ea6\n",
      "     */\n",
      "    public double contentHeight() {\n",
      "        return height - getMarginTop() - getMarginBottom();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u7ed8\u5236\u533a\u57df\u539f\u70b9X\n",
      "     *\n",
      "     * @return \u8d77\u59cbX\u5750\u6807\n",
      "     */\n",
      "    public double getStartX() {\n",
      "        return getMarginLeft();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u7ed8\u5236\u533a\u57df\u539f\u70b9Y\n",
      "     *\n",
      "     * @return \u8d77\u59cbY\u5750\u6807\n",
      "     */\n",
      "    public double getStartY() {\n",
      "        return getMarginTop();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u9875\u9762\u6b63\u6587\u7684\u5de5\u4f5c\u533a\u57df\n",
      "     *\n",
      "     * @return \u5de5\u4f5c\u533a\u57df\n",
      "     */\n",
      "    public Rectangle getWorkerArea() {\n",
      "        return new Rectangle(\n",
      "                getStartX(),\n",
      "                getStartY(),\n",
      "                contentWidth(),\n",
      "                contentHeight());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6OFD\u9875\u9762\u533a\u57df\n",
      "     *\n",
      "     * @return OFD\u9875\u9762\u533a\u57df\n",
      "     */\n",
      "    public CT_PageArea getPageArea() {\n",
      "        return new CT_PageArea()\n",
      "                // \u7269\u7406\u533a\u57df\u4e3a\u5b9e\u9645\u9875\u9762\u5927\u5c0f\n",
      "                .setPhysicalBox(0, 0, this.getWidth(), this.getHeight())\n",
      "                // \u4e3a\u4e86\u517c\u5bb9\u9a91\u7f1d\u7ae0\uff0c\u4e0d\u51cf\u53bb\u9875\u9762\u8fb9\u8ddd\n",
      "                .setApplicationBox(0, 0,\n",
      "                        this.getWidth(),\n",
      "                        this.getHeight());\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public boolean equals(Object obj) {\n",
      "        if (obj == this) {\n",
      "            return true;\n",
      "        }\n",
      "        if (obj instanceof PageLayout) {\n",
      "            PageLayout that = (PageLayout) obj;\n",
      "            return (Arrays.equals(this.margin, that.margin)\n",
      "                    && this.width.equals(that.width)\n",
      "                    && this.height.equals(that.height));\n",
      "        }\n",
      "        return false;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public PageLayout clone() {\n",
      "        PageLayout copy = new PageLayout(width, height);\n",
      "        copy.margin = margin.clone();\n",
      "        return copy;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.layout;\n",
      "\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.*;\n",
      "\n",
      "/**\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2020-03-21 10:36:22\n",
      " */\n",
      "class PageLayoutTest {\n",
      "\n",
      "    @Test\n",
      "    void testEquals() {\n",
      "        final PageLayout a4 = PageLayout.A4();\n",
      "        PageLayout a4Copy = a4;\n",
      "        assertTrue(a4.equals(a4Copy));\n",
      "        PageLayout customA4 = new PageLayout(210d, 297d);\n",
      "        assertTrue(a4.equals(customA4));\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "PageLayout::::A0()": [
        17,
        19
      ],
      "PageLayout::::A1()": [
        21,
        23
      ],
      "PageLayout::::A2()": [
        25,
        27
      ],
      "PageLayout::::A3()": [
        29,
        31
      ],
      "PageLayout::::A4()": [
        33,
        35
      ],
      "PageLayout::::A5()": [
        37,
        39
      ],
      "PageLayout::::A6()": [
        41,
        43
      ],
      "PageLayout::::A7()": [
        45,
        47
      ],
      "PageLayout::::A8()": [
        49,
        51
      ],
      "PageLayout::::A9()": [
        53,
        55
      ],
      "PageLayout::::A10()": [
        57,
        59
      ],
      "PageLayout::::getWidth()": [
        95,
        97
      ],
      "PageLayout::::setWidth(java.lang.Double)": [
        99,
        102
      ],
      "PageLayout::::getHeight()": [
        104,
        106
      ],
      "PageLayout::::setHeight(java.lang.Double)": [
        108,
        111
      ],
      "PageLayout::::getMargin()": [
        113,
        115
      ],
      "PageLayout::::setMargin(java.lang.Double[])": [
        117,
        120
      ],
      "PageLayout::::setMarginTop(double)": [
        122,
        125
      ],
      "PageLayout::::getMarginTop()": [
        127,
        129
      ],
      "PageLayout::::setMarginRight(double)": [
        131,
        134
      ],
      "PageLayout::::getMarginRight()": [
        136,
        138
      ],
      "PageLayout::::setMarginBottom(double)": [
        140,
        143
      ],
      "PageLayout::::getMarginBottom()": [
        145,
        147
      ],
      "PageLayout::::setMarginLeft(double)": [
        150,
        153
      ],
      "PageLayout::::getMarginLeft()": [
        155,
        157
      ],
      "PageLayout::::contentWidth()": [
        162,
        164
      ],
      "PageLayout::::contentHeight()": [
        169,
        171
      ],
      "PageLayout::::getStartX()": [
        178,
        180
      ],
      "PageLayout::::getStartY()": [
        187,
        189
      ],
      "PageLayout::::getWorkerArea()": [
        196,
        202
      ],
      "PageLayout::::getPageArea()": [
        209,
        217
      ],
      "PageLayout::::equals(java.lang.Object)": [
        219,
        231
      ],
      "PageLayout::::clone()": [
        233,
        238
      ]
    },
    "test_method_lines_dic": {
      "PageLayoutTest::::testEquals()": [
        13,
        20
      ]
    },
    "reverse_method_lines_dic": {
      "17": "PageLayout::::A0()",
      "18": "PageLayout::::A0()",
      "19": "PageLayout::::A0()",
      "21": "PageLayout::::A1()",
      "22": "PageLayout::::A1()",
      "23": "PageLayout::::A1()",
      "25": "PageLayout::::A2()",
      "26": "PageLayout::::A2()",
      "27": "PageLayout::::A2()",
      "29": "PageLayout::::A3()",
      "30": "PageLayout::::A3()",
      "31": "PageLayout::::A3()",
      "33": "PageLayout::::A4()",
      "34": "PageLayout::::A4()",
      "35": "PageLayout::::A4()",
      "37": "PageLayout::::A5()",
      "38": "PageLayout::::A5()",
      "39": "PageLayout::::A5()",
      "41": "PageLayout::::A6()",
      "42": "PageLayout::::A6()",
      "43": "PageLayout::::A6()",
      "45": "PageLayout::::A7()",
      "46": "PageLayout::::A7()",
      "47": "PageLayout::::A7()",
      "49": "PageLayout::::A8()",
      "50": "PageLayout::::A8()",
      "51": "PageLayout::::A8()",
      "53": "PageLayout::::A9()",
      "54": "PageLayout::::A9()",
      "55": "PageLayout::::A9()",
      "57": "PageLayout::::A10()",
      "58": "PageLayout::::A10()",
      "59": "PageLayout::::A10()",
      "95": "PageLayout::::getWidth()",
      "96": "PageLayout::::getWidth()",
      "97": "PageLayout::::getWidth()",
      "99": "PageLayout::::setWidth(java.lang.Double)",
      "100": "PageLayout::::setWidth(java.lang.Double)",
      "101": "PageLayout::::setWidth(java.lang.Double)",
      "102": "PageLayout::::setWidth(java.lang.Double)",
      "104": "PageLayout::::getHeight()",
      "105": "PageLayout::::getHeight()",
      "106": "PageLayout::::getHeight()",
      "108": "PageLayout::::setHeight(java.lang.Double)",
      "109": "PageLayout::::setHeight(java.lang.Double)",
      "110": "PageLayout::::setHeight(java.lang.Double)",
      "111": "PageLayout::::setHeight(java.lang.Double)",
      "113": "PageLayout::::getMargin()",
      "114": "PageLayout::::getMargin()",
      "115": "PageLayout::::getMargin()",
      "117": "PageLayout::::setMargin(java.lang.Double[])",
      "118": "PageLayout::::setMargin(java.lang.Double[])",
      "119": "PageLayout::::setMargin(java.lang.Double[])",
      "120": "PageLayout::::setMargin(java.lang.Double[])",
      "122": "PageLayout::::setMarginTop(double)",
      "123": "PageLayout::::setMarginTop(double)",
      "124": "PageLayout::::setMarginTop(double)",
      "125": "PageLayout::::setMarginTop(double)",
      "127": "PageLayout::::getMarginTop()",
      "128": "PageLayout::::getMarginTop()",
      "129": "PageLayout::::getMarginTop()",
      "131": "PageLayout::::setMarginRight(double)",
      "132": "PageLayout::::setMarginRight(double)",
      "133": "PageLayout::::setMarginRight(double)",
      "134": "PageLayout::::setMarginRight(double)",
      "136": "PageLayout::::getMarginRight()",
      "137": "PageLayout::::getMarginRight()",
      "138": "PageLayout::::getMarginRight()",
      "140": "PageLayout::::setMarginBottom(double)",
      "141": "PageLayout::::setMarginBottom(double)",
      "142": "PageLayout::::setMarginBottom(double)",
      "143": "PageLayout::::setMarginBottom(double)",
      "145": "PageLayout::::getMarginBottom()",
      "146": "PageLayout::::getMarginBottom()",
      "147": "PageLayout::::getMarginBottom()",
      "150": "PageLayout::::setMarginLeft(double)",
      "151": "PageLayout::::setMarginLeft(double)",
      "152": "PageLayout::::setMarginLeft(double)",
      "153": "PageLayout::::setMarginLeft(double)",
      "155": "PageLayout::::getMarginLeft()",
      "156": "PageLayout::::getMarginLeft()",
      "157": "PageLayout::::getMarginLeft()",
      "162": "PageLayout::::contentWidth()",
      "163": "PageLayout::::contentWidth()",
      "164": "PageLayout::::contentWidth()",
      "169": "PageLayout::::contentHeight()",
      "170": "PageLayout::::contentHeight()",
      "171": "PageLayout::::contentHeight()",
      "178": "PageLayout::::getStartX()",
      "179": "PageLayout::::getStartX()",
      "180": "PageLayout::::getStartX()",
      "187": "PageLayout::::getStartY()",
      "188": "PageLayout::::getStartY()",
      "189": "PageLayout::::getStartY()",
      "196": "PageLayout::::getWorkerArea()",
      "197": "PageLayout::::getWorkerArea()",
      "198": "PageLayout::::getWorkerArea()",
      "199": "PageLayout::::getWorkerArea()",
      "200": "PageLayout::::getWorkerArea()",
      "201": "PageLayout::::getWorkerArea()",
      "202": "PageLayout::::getWorkerArea()",
      "209": "PageLayout::::getPageArea()",
      "210": "PageLayout::::getPageArea()",
      "211": "PageLayout::::getPageArea()",
      "212": "PageLayout::::getPageArea()",
      "213": "PageLayout::::getPageArea()",
      "214": "PageLayout::::getPageArea()",
      "215": "PageLayout::::getPageArea()",
      "216": "PageLayout::::getPageArea()",
      "217": "PageLayout::::getPageArea()",
      "219": "PageLayout::::equals(java.lang.Object)",
      "220": "PageLayout::::equals(java.lang.Object)",
      "221": "PageLayout::::equals(java.lang.Object)",
      "222": "PageLayout::::equals(java.lang.Object)",
      "223": "PageLayout::::equals(java.lang.Object)",
      "224": "PageLayout::::equals(java.lang.Object)",
      "225": "PageLayout::::equals(java.lang.Object)",
      "226": "PageLayout::::equals(java.lang.Object)",
      "227": "PageLayout::::equals(java.lang.Object)",
      "228": "PageLayout::::equals(java.lang.Object)",
      "229": "PageLayout::::equals(java.lang.Object)",
      "230": "PageLayout::::equals(java.lang.Object)",
      "231": "PageLayout::::equals(java.lang.Object)",
      "233": "PageLayout::::clone()",
      "234": "PageLayout::::clone()",
      "235": "PageLayout::::clone()",
      "236": "PageLayout::::clone()",
      "237": "PageLayout::::clone()",
      "238": "PageLayout::::clone()"
    },
    "test_reverse_method_lines_dic": {
      "13": "PageLayoutTest::::testEquals()",
      "14": "PageLayoutTest::::testEquals()",
      "15": "PageLayoutTest::::testEquals()",
      "16": "PageLayoutTest::::testEquals()",
      "17": "PageLayoutTest::::testEquals()",
      "18": "PageLayoutTest::::testEquals()",
      "19": "PageLayoutTest::::testEquals()",
      "20": "PageLayoutTest::::testEquals()"
    },
    "tests": [
      {
        "test_lines": [
          13,
          20
        ],
        "covered_lines": [
          34,
          80,
          82,
          83,
          84,
          85,
          221,
          222,
          224,
          225,
          226,
          227,
          228
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-layout/src/main/java/org/ofdrw/layout/element/Span.java": {
    "class_content": [
      "package org.ofdrw.layout.element;\n",
      "\n",
      "import org.ofdrw.core.text.text.Weight;\n",
      "import org.ofdrw.font.Font;\n",
      "import org.ofdrw.layout.Rectangle;\n",
      "\n",
      "import java.util.LinkedList;\n",
      "import java.util.List;\n",
      "\n",
      "/**\n",
      " * \u5b57\u4f53\u57fa\u7840\u5355\u5143\n",
      " * <p>\n",
      " * \u7528\u6765\u8bbe\u7f6e\u5b57\u4f53\u6837\u5f0f\u7b49\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2020-02-03 02:01:53\n",
      " */\n",
      "public class Span implements TextFontInfo {\n",
      "\n",
      "    /**\n",
      "     * \u5b57\u4f53\n",
      "     */\n",
      "    private Font font;\n",
      "\n",
      "    /**\n",
      "     * \u5b57\u4f53\u5927\u5c0f\n",
      "     * \u9ed8\u8ba4\u503c3\u6beb\u7c73\n",
      "     */\n",
      "    private Double fontSize = 3d;\n",
      "\n",
      "    /**\n",
      "     * \u5b57\u95f4\u8ddd\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\u4e3a 0\n",
      "     */\n",
      "    private Double letterSpacing = 0d;\n",
      "\n",
      "    /**\n",
      "     * \u662f\u5426\u52a0\u7c97\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\u4e0d\u52a0\u7c97 false\n",
      "     * <p>\n",
      "     * \u52a0\u7c97\u7b49\u4ef7\u4e8e {@link #setWeight(Weight)} \u4e3a {@link Weight#W_800}\n",
      "     */\n",
      "    private boolean bold = false;\n",
      "\n",
      "    /**\n",
      "     * \u6587\u5b57\u7c97\u7ec6\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4 {@link Weight#W_400}\n",
      "     */\n",
      "    private Weight weight = null;\n",
      "\n",
      "    /**\n",
      "     * \u662f\u5426\u659c\u4f53\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\u975e\u659c\u4f53 false\n",
      "     */\n",
      "    private boolean italic = false;\n",
      "\n",
      "    /**\n",
      "     * \u662f\u5426\u542b\u6709\u4e0b\u5212\u7ebf\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\u4e0d\u542b\u4e0b\u5212\u7ebf\n",
      "     */\n",
      "    private boolean underline = false;\n",
      "    /**\n",
      "     * \u4e0b\u5212\u7ebf\u4e0e\u6587\u5b57\u7684\u504f\u79fb\u91cf\n",
      "     */\n",
      "    private double underlineOffset = 1.2d;\n",
      "    /**\n",
      "     * \u4e0b\u5212\u7ebf\u5bbd\u5ea6\uff0c0\u8868\u793a\u4fdd\u6301\u9ed8\u8ba4\uff0c\u9ed8\u8ba4\u4e3a\u5b57\u4f53\u5927\u5c0f\u76840.05\u500d\n",
      "     */\n",
      "    private double underlineWidth = 0d;\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u662f\u5426\u586b\u5145\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\u503c\u4e3a\uff1atrue\n",
      "     */\n",
      "    private boolean fill = true;\n",
      "\n",
      "    /**\n",
      "     * \u6587\u672c\u5185\u5bb9\n",
      "     */\n",
      "    private String text;\n",
      "\n",
      "    /**\n",
      "     * \u5b57\u4f53\u989c\u8272\n",
      "     */\n",
      "    private int[] fillColor;\n",
      "\n",
      "    /**\n",
      "     * \u662f\u5426\u5360\u6ee1\u5269\u4e0b\u884c\u7a7a\u95f4\n",
      "     */\n",
      "    private boolean linebreak = false;\n",
      "\n",
      "    /**\n",
      "     * \u5f53\u6e32\u67d3\u7a7a\u95f4\u4e0d\u8db3\u65f6\u53ef\u80fd\u4f1a\u62c6\u5206\u5143\u7d20\n",
      "     * <p>\n",
      "     * true\u4e3a\u4e0d\u62c6\u5206\uff0cfalse\u4e3a\u62c6\u5206\u3002\u9ed8\u8ba4\u503c\u4e3afalse\n",
      "     */\n",
      "    private Boolean integrity = false;\n",
      "\n",
      "    LinkedList<TxtGlyph> txtGlyphsCache = null;\n",
      "\n",
      "\n",
      "    protected Span() {\n",
      "        this.setFont(Font.getDefault());\n",
      "    }\n",
      "\n",
      "    public Span(Font font, Double fontSize, String text) {\n",
      "        this.font = font;\n",
      "        this.fontSize = fontSize;\n",
      "        setText(text);\n",
      "    }\n",
      "\n",
      "    public Span(String text) {\n",
      "        this();\n",
      "        if (text == null) {\n",
      "            throw new IllegalArgumentException(\"text\u5185\u5bb9\u4e3a\u7a7a\");\n",
      "        }\n",
      "        setText(text);\n",
      "    }\n",
      "\n",
      "    public int[] getColor() {\n",
      "        return fillColor;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u5b57\u4f53\u989c\u8272\n",
      "     *\n",
      "     * @param rgb \u989c\u8272\u503c\n",
      "     * @return this\n",
      "     */\n",
      "    public Span setColor(int[] rgb) {\n",
      "        this.fillColor = rgb;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u5b57\u4f53\u989c\u8272\n",
      "     *\n",
      "     * @param r \u7ea2\n",
      "     * @param g \u7eff\n",
      "     * @param b \u61d2\n",
      "     * @return this\n",
      "     */\n",
      "    public Span setColor(int r, int g, int b) {\n",
      "        this.fillColor = new int[]{\n",
      "                r,\n",
      "                g,\n",
      "                b\n",
      "        };\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * @return \u5b57\u7b26\u6570\u91cf\n",
      "     */\n",
      "    public int length() {\n",
      "        return text.length();\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Font getFont() {\n",
      "        return font;\n",
      "    }\n",
      "\n",
      "    public Span setFont(Font font) {\n",
      "        this.font = font;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Double getFontSize() {\n",
      "        return fontSize;\n",
      "    }\n",
      "\n",
      "    public Span setFontSize(Double fontSize) {\n",
      "        this.fontSize = fontSize;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Double getLetterSpacing() {\n",
      "        return letterSpacing;\n",
      "    }\n",
      "\n",
      "    public Span setLetterSpacing(Double letterSpacing) {\n",
      "        this.letterSpacing = letterSpacing;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public boolean isBold() {\n",
      "        return bold;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u662f\u5426\u52a0\u7c97\n",
      "     * <p>\n",
      "     * \u82e5\u9700\u8981\u66f4\u52a0\u7ec6\u81f4\u7684\u63a7\u5236\uff0c\u53ef\u4ee5\u4f7f\u7528 {@link #setWeight(Weight)}\n",
      "     *\n",
      "     * @param bold \u662f\u5426\u52a0\u7c97\n",
      "     * @return this\n",
      "     */\n",
      "    public Span setBold(boolean bold) {\n",
      "        this.bold = bold;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5b57\u4f53\u7c97\u7ec6\n",
      "     *\n",
      "     * @return \u5b57\u4f53\u7c97\u7ec6\uff0c\u53ef\u80fd\u4e3anull\u3002\n",
      "     */\n",
      "    public Weight getWeight() {\n",
      "        return weight;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u5b57\u4f53\u7c97\u7ec6\n",
      "     *\n",
      "     * @param weight \u5b57\u4f53\u7c97\u7ec6\n",
      "     * @return this\n",
      "     */\n",
      "    public Span setWeight(Weight weight) {\n",
      "        this.weight = weight;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public boolean isItalic() {\n",
      "        return italic;\n",
      "    }\n",
      "\n",
      "    public Span setItalic(boolean italic) {\n",
      "        this.italic = italic;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public boolean isUnderline() {\n",
      "        return underline;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e \u4e0b\u5212\u7ebf\n",
      "     *\n",
      "     * @param underline \u662f\u5426\u542f\u7528\u4e0b\u5212\u7ebf\n",
      "     * @return this\n",
      "     */\n",
      "    public Span setUnderline(boolean underline) {\n",
      "        this.underline = underline;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u4e0b\u5212\u7ebf\n",
      "     *\n",
      "     * @param underline \u662f\u5426\u542f\u7528\u4e0b\u5212\u7ebf\n",
      "     * @param offset    \u4e0b\u5212\u7ebf\u4e0e\u6587\u5b57\u7684\u504f\u79fb\u91cf\uff0c\u53ef\u4ee5\u4e3a\u8d1f\u503c\uff0c\u9ed8\u8ba4\u503c\u4e3a1.2\uff0c\u5355\u4f4d\u6beb\u7c73\u3002\n",
      "     * @param width     \u4e0b\u5212\u7ebf\u7ebf\u5bbd\uff0c\u9ed8\u8ba4\u4e3a0\uff0c\u4e3a0\u65f6\u9ed8\u8ba4\u4e3a\u5b57\u4f53\u5927\u5c0f\u76840.05\u500d\u3002\n",
      "     * @return this\n",
      "     */\n",
      "    public Span setUnderline(boolean underline, double offset, double width) {\n",
      "        this.underline = underline;\n",
      "        this.underlineOffset = offset;\n",
      "        this.underlineWidth = width;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "\n",
      "    public Boolean isFill() {\n",
      "        return fill;\n",
      "    }\n",
      "\n",
      "    public Span setFill(boolean fill) {\n",
      "        this.fill = fill;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public String getText() {\n",
      "        return text;\n",
      "    }\n",
      "\n",
      "    public Span setText(String text) {\n",
      "        this.text = text;\n",
      "        if (txtGlyphsCache != null) {\n",
      "            // \u5982\u679c\u5df2\u7ecf\u5b58\u5728\u7f13\u5b58\uff0c\u90a3\u4e48\u91cd\u65b0\u5efa\u7acb\u7f13\u5b58\n",
      "            glyphList();\n",
      "        }\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5143\u7d20\u662f\u5426\u53ef\u4ee5\u62c6\u5206\n",
      "     * <p>\n",
      "     * \u7279\u6b8a\u7684\uff1a\n",
      "     * \u5982\u679c\u6ca1\u6709\u6216\u53ea\u6709\u4e00\u4e2a\u6587\u5b57\uff0c\u90a3\u4e48\u65e0\u8bba\u5982\u4f55\u8bbe\u7f6eintegrity\u90fd\u4e3a\u4e0d\u53ef\u62c6\u5206\n",
      "     *\n",
      "     * @return true \u53ef\u4ee5\u62c6\u5206\uff1bfalse \u4e0d\u80fd\u62c6\u5206\n",
      "     */\n",
      "    public Boolean isIntegrity() {\n",
      "        if (text == null || text.length() <= 1) {\n",
      "            integrity = true;\n",
      "        }\n",
      "        return integrity;\n",
      "    }\n",
      "\n",
      "    public Span setIntegrity(Boolean integrity) {\n",
      "        this.integrity = integrity;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5b57\u4f53\u56fe\u5f62\u5217\u8868\n",
      "     *\n",
      "     * @return \u5b57\u4f53\u56fe\u5f62\u5217\u8868\n",
      "     */\n",
      "    public List<TxtGlyph> glyphList() {\n",
      "        if (txtGlyphsCache == null) {\n",
      "            txtGlyphsCache = new LinkedList<>();\n",
      "            for (char c : this.text.toCharArray()) {\n",
      "                txtGlyphsCache.add(new TxtGlyph(c, this));\n",
      "            }\n",
      "        }\n",
      "        return txtGlyphsCache;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5b57\u7b26X\u5750\u6807\u504f\u79fb\u503c\u961f\u5217\n",
      "     * <p>\n",
      "     * \u961f\u5217\u4e2d\u7684\u6bcf\u4e2a\u503c\u4ee3\u8868\u540e\u4e00\u4e2a\u6587\u5b57\u4e0e\u524d\u4e00\u4e2a\u6587\u5b57\u4e4b\u95f4\u5728X\u65b9\u5411\u4e0a\u7684\u504f\u79fb\u503c\n",
      "     *\n",
      "     * @return \u5b57\u7b26\u5728X\u5750\u6807\u504f\u79fb\u503c\u961f\u5217\n",
      "     */\n",
      "    public Double[] getDeltaX() {\n",
      "        List<TxtGlyph> list = glyphList();\n",
      "        int len = list.size();\n",
      "        if (len <= 1) {\n",
      "            // \u53ea\u6709\u4e00\u4e2a\u5b57\u7b26\u65f6\uff0c\u4e0d\u5b58\u5728\u5b57\u7b26\u504f\u79fb\u6240\u4ee5\u8fd4\u8fd8\u7a7a\u6570\u7ec4\n",
      "            return new Double[]{};\n",
      "        }\n",
      "        // \u961f\u5217\u4e2d\u7684\u6bcf\u4e2a\u503c\u4ee3\u8868\u540e\u4e00\u4e2a\u6587\u5b57\u4e0e\u524d\u4e00\u4e2a\u6587\u5b57\u4e4b\u95f4\u5728X\u65b9\u5411\u4e0a\u7684\u504f\u79fb\u503c\n",
      "        // \u56e0\u6b64\u4e0d\u8981\u8ba1\u7b97\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u504f\u79fb\u503c\uff0c\u504f\u79fb\u91cf\u5ffd\u7565\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u5927\u5c0f len - 1\n",
      "        Double[] res = new Double[len - 1];\n",
      "        for (int i = 0; i < len - 1; i++) {\n",
      "            res[i] = list.get(i).getW();\n",
      "        }\n",
      "        return res;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * @return \u4e0d\u62c6\u5206\u60c5\u51b5\u4e0b\u90fd\u653e\u5728\u4e00\u884c\u5185\u5360\u7528\u7684\u5927\u5c0f\n",
      "     */\n",
      "    public Rectangle blockSize() {\n",
      "        List<TxtGlyph> txtGlyphs = glyphList();\n",
      "        double width = 0;\n",
      "        double height = 0;\n",
      "        for (TxtGlyph glyph : txtGlyphs) {\n",
      "            width += glyph.getW();\n",
      "            if (glyph.getH() > height) {\n",
      "                height = glyph.getH();\n",
      "            }\n",
      "        }\n",
      "        return new Rectangle(width, height);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5207\u5206\u5143\u7d20\n",
      "     *\n",
      "     * @param index \u5b57\u7b26\u5750\u6807\n",
      "     * @return \u5207\u5206\u540e\u7684\u4e24\u4e2a\u5168\u65b0\u5143\u7d20\n",
      "     */\n",
      "    public Span[] split(int index) {\n",
      "        if (index < 0 || index >= text.length()) {\n",
      "            throw new IllegalArgumentException(\"\u975e\u6cd5\u7684\u5207\u5206\u6570\u7ec4\u5750\u6807(index): \" + index);\n",
      "        }\n",
      "        Span s1 = this.clone().setText(this.text.substring(0, index));\n",
      "        Span s2 = this.clone().setText(this.text.substring(index));\n",
      "        return new Span[]{\n",
      "                s1,\n",
      "                s2\n",
      "        };\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6eSpan\u4e3a\u5360\u6ee1\u5269\u4e0b\u884c\u7a7a\u95f4\u7684\u5143\u7d20\n",
      "     * <p>\n",
      "     * \u7b49\u4ef7\u4e8e\u5728\u5b57\u7b26\u4e32\u672b\u5c3e\u589e\u52a0\\n\uff0c\u5f53\u5b57\u7b26\u4e32\u672b\u5c3e\u5b58\u5728\\n \u65f6\u8be5\u53c2\u6570\u65e0\u6548\u3002\n",
      "     *\n",
      "     * @param linebreak \u662f\u5426\u5360\u6ee1\u5269\u4e0b\u884c\u7a7a\u95f4 true \u6807\u8bc6\u5360\u6ee1\uff1bfalse\u6807\u8bc6\u4e0d\u5360\u6ee1\n",
      "     * @return this\n",
      "     */\n",
      "    public Span setLinebreak(boolean linebreak) {\n",
      "        this.linebreak = linebreak;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u662f\u5426\u662f\u4e00\u4e2a\u5360\u6ee1\u5269\u4f59\u884c\u7a7a\u95f4\u7684Span\n",
      "     *\n",
      "     * @return true \u6807\u8bc6span\u4f1a\u5360\u6ee1\u5269\u4f59\u7684\u884c\u7a7a\u95f4\uff1b false \u4e0d\u5360\u6ee1\n",
      "     */\n",
      "    public boolean hasLinebreak() {\n",
      "        return linebreak;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u7ecf\u8fc7\u884c\u5185\u6362\u884c\u5904\u7406\u4e4b\u540e\u7684Span\u5217\u8868\n",
      "     *\n",
      "     * @return \u5e26\u6709\u5360\u6ee1\u884c\u5269\u4f59\u5185\u5bb9\u7684Span\u5e8f\u5217\n",
      "     */\n",
      "    public LinkedList<Span> splitLineBreak() {\n",
      "        LinkedList<Span> res = new LinkedList<>();\n",
      "        if (!this.text.contains(\"\\n\")) {\n",
      "            res.add(this);\n",
      "        } else {\n",
      "            String[] split = this.text.split(\"\\n\");\n",
      "            for (int i = 0; i < split.length; i++) {\n",
      "                Span lineSpan = this.clone().setText(split[i]);\n",
      "                if (i != split.length - 1) {\n",
      "                    lineSpan.setLinebreak(true);\n",
      "                } else if (this.text.endsWith(\"\\n\")) {\n",
      "                    lineSpan.setLinebreak(true);\n",
      "                }\n",
      "                res.add(lineSpan);\n",
      "            }\n",
      "        }\n",
      "        return res;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u4e0b\u5212\u7ebf\u4e0e\u6587\u5b57\u7684\u504f\u79fb\u91cf\n",
      "     *\n",
      "     * @return \u4e0b\u5212\u7ebf\u4e0e\u6587\u5b57\u7684\u504f\u79fb\u91cf\uff0c\u5355\u4f4d\u6beb\u7c73\n",
      "     */\n",
      "    public double getUnderlineOffset() {\n",
      "        return underlineOffset;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u4e0b\u5212\u7ebf\u5bbd\u5ea6\n",
      "     *\n",
      "     * @return \u4e0b\u5212\u7ebf\u5bbd\u5ea6, 0\u8868\u793a\u4fdd\u6301\u9ed8\u8ba4\uff0c\u9ed8\u8ba4\u4e3a\u5b57\u4f53\u5927\u5c0f\u76840.05\u500d\uff0c\u5355\u4f4d\u6beb\u7c73\n",
      "     */\n",
      "    public double getUnderlineWidth() {\n",
      "        return underlineWidth;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Span clone() {\n",
      "        Span span = new Span();\n",
      "        span.font = font;\n",
      "        span.fontSize = fontSize;\n",
      "        span.letterSpacing = letterSpacing;\n",
      "        span.bold = bold;\n",
      "        span.weight = weight;\n",
      "        span.italic = italic;\n",
      "        span.underline = underline;\n",
      "        span.underlineOffset = underlineOffset;\n",
      "        span.underlineWidth = underlineWidth;\n",
      "        span.fill = fill;\n",
      "        span.text = text;\n",
      "        span.integrity = integrity;\n",
      "        span.linebreak = linebreak;\n",
      "        span.fillColor = fillColor == null ? null : fillColor.clone();\n",
      "        return span;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.layout.element;\n",
      "\n",
      "\n",
      "import org.junit.jupiter.api.Assertions;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.ofdrw.layout.Rectangle;\n",
      "\n",
      "import java.util.Arrays;\n",
      "import java.util.LinkedList;\n",
      "\n",
      "public class SpanTest {\n",
      "\n",
      "    @Test\n",
      "    public void split() {\n",
      "        Span span = new Span(\"\u4f60\u597dOFD R&W\");\n",
      "        Span[] split = span.split(2);\n",
      "        System.out.println();\n",
      "        Assertions.assertEquals(split[0].getText(), \"\u4f60\u597d\");\n",
      "        Assertions.assertEquals(split[1].getText(), \"OFD R&W\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void blockSize() {\n",
      "        Span span = new Span(\"\u4f60\u597dOFD R&W\")\n",
      "                .setFontSize(10d);\n",
      "        Rectangle rectangle = span.blockSize();\n",
      "        Assertions.assertEquals(rectangle.getHeight(), 10);\n",
      "        Assertions.assertEquals(rectangle.getWidth(), 20 + 7 * 5);\n",
      "        Assertions.assertEquals(span.blockSize().getWidth(), 20 + 7 * 5);\n",
      "\n",
      "        span.setLetterSpacing(3d);\n",
      "        Assertions.assertEquals(span.blockSize().getWidth(), 20 + 7 * 5 + 9 * 3);\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void getDeltaX() {\n",
      "        Span span = new Span(\"\u4f60\u597dOFD R&W\")\n",
      "                .setFontSize(10d);\n",
      "        Double[] deltaX = span.getDeltaX();\n",
      "        System.out.println(Arrays.toString(deltaX));\n",
      "        Double[] expect = new Double[]{\n",
      "                10d, 10d, 5d, 5d, 5d, 5d, 5d, 5d\n",
      "        };\n",
      "\n",
      "        Assertions.assertArrayEquals(expect, deltaX);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void splitLineBreak() {\n",
      "        Span span = new Span(\"line 1\\n\");\n",
      "        LinkedList<Span> spans = span.splitLineBreak();\n",
      "        Assertions.assertEquals(spans.size(), 1);\n",
      "\n",
      "        span = new Span(\"line 1\\nline 2\");\n",
      "        spans = span.splitLineBreak();\n",
      "        Assertions.assertEquals(spans.size(), 2);\n",
      "\n",
      "        span = new Span(\"line 1\\n\\nline 3\");\n",
      "        spans = span.splitLineBreak();\n",
      "        Assertions.assertEquals(spans.size(), 3);\n",
      "        span = new Span(\"line 1\\n\\n\\nline 4\");\n",
      "        spans = span.splitLineBreak();\n",
      "        Assertions.assertEquals(spans.size(), 4);\n",
      "\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "Span::::getColor()": [
        127,
        129
      ],
      "Span::::setColor(int[])": [
        137,
        140
      ],
      "Span::::setColor(int,int,int)": [
        150,
        157
      ],
      "Span::::length()": [
        162,
        164
      ],
      "Span::::getFont()": [
        166,
        169
      ],
      "Span::::getFontSize()": [
        176,
        179
      ],
      "Span::::setFontSize(java.lang.Double)": [
        181,
        184
      ],
      "Span::::getLetterSpacing()": [
        186,
        189
      ],
      "Span::::setLetterSpacing(java.lang.Double)": [
        191,
        194
      ],
      "Span::::isBold()": [
        196,
        198
      ],
      "Span::::setBold(boolean)": [
        208,
        211
      ],
      "Span::::getWeight()": [
        218,
        220
      ],
      "Span::::isItalic()": [
        233,
        235
      ],
      "Span::::setItalic(boolean)": [
        237,
        240
      ],
      "Span::::isUnderline()": [
        242,
        244
      ],
      "Span::::setUnderline(boolean)": [
        252,
        255
      ],
      "Span::::setUnderline(boolean,double,double)": [
        265,
        270
      ],
      "Span::::isFill()": [
        273,
        275
      ],
      "Span::::setFill(boolean)": [
        277,
        280
      ],
      "Span::::getText()": [
        282,
        284
      ],
      "Span::::setText(java.lang.String)": [
        286,
        293
      ],
      "Span::::isIntegrity()": [
        303,
        308
      ],
      "Span::::setIntegrity(java.lang.Boolean)": [
        310,
        313
      ],
      "Span::::glyphList()": [
        321,
        329
      ],
      "Span::::getDeltaX()": [
        338,
        352
      ],
      "Span::::blockSize()": [
        357,
        368
      ],
      "Span::::split(int)": [
        376,
        386
      ],
      "Span::::setLinebreak(boolean)": [
        396,
        399
      ],
      "Span::::hasLinebreak()": [
        406,
        408
      ],
      "Span::::splitLineBreak()": [
        415,
        432
      ],
      "Span::::getUnderlineOffset()": [
        439,
        441
      ],
      "Span::::getUnderlineWidth()": [
        448,
        450
      ],
      "Span::::clone()": [
        452,
        470
      ]
    },
    "test_method_lines_dic": {
      "SpanTest::::split()": [
        13,
        20
      ],
      "SpanTest::::blockSize()": [
        22,
        34
      ],
      "SpanTest::::getDeltaX()": [
        36,
        47
      ],
      "SpanTest::::splitLineBreak()": [
        49,
        66
      ]
    },
    "reverse_method_lines_dic": {
      "127": "Span::::getColor()",
      "128": "Span::::getColor()",
      "129": "Span::::getColor()",
      "137": "Span::::setColor(int[])",
      "138": "Span::::setColor(int[])",
      "139": "Span::::setColor(int[])",
      "140": "Span::::setColor(int[])",
      "150": "Span::::setColor(int,int,int)",
      "151": "Span::::setColor(int,int,int)",
      "152": "Span::::setColor(int,int,int)",
      "153": "Span::::setColor(int,int,int)",
      "154": "Span::::setColor(int,int,int)",
      "155": "Span::::setColor(int,int,int)",
      "156": "Span::::setColor(int,int,int)",
      "157": "Span::::setColor(int,int,int)",
      "162": "Span::::length()",
      "163": "Span::::length()",
      "164": "Span::::length()",
      "166": "Span::::getFont()",
      "167": "Span::::getFont()",
      "168": "Span::::getFont()",
      "169": "Span::::getFont()",
      "176": "Span::::getFontSize()",
      "177": "Span::::getFontSize()",
      "178": "Span::::getFontSize()",
      "179": "Span::::getFontSize()",
      "181": "Span::::setFontSize(java.lang.Double)",
      "182": "Span::::setFontSize(java.lang.Double)",
      "183": "Span::::setFontSize(java.lang.Double)",
      "184": "Span::::setFontSize(java.lang.Double)",
      "186": "Span::::getLetterSpacing()",
      "187": "Span::::getLetterSpacing()",
      "188": "Span::::getLetterSpacing()",
      "189": "Span::::getLetterSpacing()",
      "191": "Span::::setLetterSpacing(java.lang.Double)",
      "192": "Span::::setLetterSpacing(java.lang.Double)",
      "193": "Span::::setLetterSpacing(java.lang.Double)",
      "194": "Span::::setLetterSpacing(java.lang.Double)",
      "196": "Span::::isBold()",
      "197": "Span::::isBold()",
      "198": "Span::::isBold()",
      "208": "Span::::setBold(boolean)",
      "209": "Span::::setBold(boolean)",
      "210": "Span::::setBold(boolean)",
      "211": "Span::::setBold(boolean)",
      "218": "Span::::getWeight()",
      "219": "Span::::getWeight()",
      "220": "Span::::getWeight()",
      "233": "Span::::isItalic()",
      "234": "Span::::isItalic()",
      "235": "Span::::isItalic()",
      "237": "Span::::setItalic(boolean)",
      "238": "Span::::setItalic(boolean)",
      "239": "Span::::setItalic(boolean)",
      "240": "Span::::setItalic(boolean)",
      "242": "Span::::isUnderline()",
      "243": "Span::::isUnderline()",
      "244": "Span::::isUnderline()",
      "252": "Span::::setUnderline(boolean)",
      "253": "Span::::setUnderline(boolean)",
      "254": "Span::::setUnderline(boolean)",
      "255": "Span::::setUnderline(boolean)",
      "265": "Span::::setUnderline(boolean,double,double)",
      "266": "Span::::setUnderline(boolean,double,double)",
      "267": "Span::::setUnderline(boolean,double,double)",
      "268": "Span::::setUnderline(boolean,double,double)",
      "269": "Span::::setUnderline(boolean,double,double)",
      "270": "Span::::setUnderline(boolean,double,double)",
      "273": "Span::::isFill()",
      "274": "Span::::isFill()",
      "275": "Span::::isFill()",
      "277": "Span::::setFill(boolean)",
      "278": "Span::::setFill(boolean)",
      "279": "Span::::setFill(boolean)",
      "280": "Span::::setFill(boolean)",
      "282": "Span::::getText()",
      "283": "Span::::getText()",
      "284": "Span::::getText()",
      "286": "Span::::setText(java.lang.String)",
      "287": "Span::::setText(java.lang.String)",
      "288": "Span::::setText(java.lang.String)",
      "289": "Span::::setText(java.lang.String)",
      "290": "Span::::setText(java.lang.String)",
      "291": "Span::::setText(java.lang.String)",
      "292": "Span::::setText(java.lang.String)",
      "293": "Span::::setText(java.lang.String)",
      "303": "Span::::isIntegrity()",
      "304": "Span::::isIntegrity()",
      "305": "Span::::isIntegrity()",
      "306": "Span::::isIntegrity()",
      "307": "Span::::isIntegrity()",
      "308": "Span::::isIntegrity()",
      "310": "Span::::setIntegrity(java.lang.Boolean)",
      "311": "Span::::setIntegrity(java.lang.Boolean)",
      "312": "Span::::setIntegrity(java.lang.Boolean)",
      "313": "Span::::setIntegrity(java.lang.Boolean)",
      "321": "Span::::glyphList()",
      "322": "Span::::glyphList()",
      "323": "Span::::glyphList()",
      "324": "Span::::glyphList()",
      "325": "Span::::glyphList()",
      "326": "Span::::glyphList()",
      "327": "Span::::glyphList()",
      "328": "Span::::glyphList()",
      "329": "Span::::glyphList()",
      "338": "Span::::getDeltaX()",
      "339": "Span::::getDeltaX()",
      "340": "Span::::getDeltaX()",
      "341": "Span::::getDeltaX()",
      "342": "Span::::getDeltaX()",
      "343": "Span::::getDeltaX()",
      "344": "Span::::getDeltaX()",
      "345": "Span::::getDeltaX()",
      "346": "Span::::getDeltaX()",
      "347": "Span::::getDeltaX()",
      "348": "Span::::getDeltaX()",
      "349": "Span::::getDeltaX()",
      "350": "Span::::getDeltaX()",
      "351": "Span::::getDeltaX()",
      "352": "Span::::getDeltaX()",
      "357": "Span::::blockSize()",
      "358": "Span::::blockSize()",
      "359": "Span::::blockSize()",
      "360": "Span::::blockSize()",
      "361": "Span::::blockSize()",
      "362": "Span::::blockSize()",
      "363": "Span::::blockSize()",
      "364": "Span::::blockSize()",
      "365": "Span::::blockSize()",
      "366": "Span::::blockSize()",
      "367": "Span::::blockSize()",
      "368": "Span::::blockSize()",
      "376": "Span::::split(int)",
      "377": "Span::::split(int)",
      "378": "Span::::split(int)",
      "379": "Span::::split(int)",
      "380": "Span::::split(int)",
      "381": "Span::::split(int)",
      "382": "Span::::split(int)",
      "383": "Span::::split(int)",
      "384": "Span::::split(int)",
      "385": "Span::::split(int)",
      "386": "Span::::split(int)",
      "396": "Span::::setLinebreak(boolean)",
      "397": "Span::::setLinebreak(boolean)",
      "398": "Span::::setLinebreak(boolean)",
      "399": "Span::::setLinebreak(boolean)",
      "406": "Span::::hasLinebreak()",
      "407": "Span::::hasLinebreak()",
      "408": "Span::::hasLinebreak()",
      "415": "Span::::splitLineBreak()",
      "416": "Span::::splitLineBreak()",
      "417": "Span::::splitLineBreak()",
      "418": "Span::::splitLineBreak()",
      "419": "Span::::splitLineBreak()",
      "420": "Span::::splitLineBreak()",
      "421": "Span::::splitLineBreak()",
      "422": "Span::::splitLineBreak()",
      "423": "Span::::splitLineBreak()",
      "424": "Span::::splitLineBreak()",
      "425": "Span::::splitLineBreak()",
      "426": "Span::::splitLineBreak()",
      "427": "Span::::splitLineBreak()",
      "428": "Span::::splitLineBreak()",
      "429": "Span::::splitLineBreak()",
      "430": "Span::::splitLineBreak()",
      "431": "Span::::splitLineBreak()",
      "432": "Span::::splitLineBreak()",
      "439": "Span::::getUnderlineOffset()",
      "440": "Span::::getUnderlineOffset()",
      "441": "Span::::getUnderlineOffset()",
      "448": "Span::::getUnderlineWidth()",
      "449": "Span::::getUnderlineWidth()",
      "450": "Span::::getUnderlineWidth()",
      "452": "Span::::clone()",
      "453": "Span::::clone()",
      "454": "Span::::clone()",
      "455": "Span::::clone()",
      "456": "Span::::clone()",
      "457": "Span::::clone()",
      "458": "Span::::clone()",
      "459": "Span::::clone()",
      "460": "Span::::clone()",
      "461": "Span::::clone()",
      "462": "Span::::clone()",
      "463": "Span::::clone()",
      "464": "Span::::clone()",
      "465": "Span::::clone()",
      "466": "Span::::clone()",
      "467": "Span::::clone()",
      "468": "Span::::clone()",
      "469": "Span::::clone()",
      "470": "Span::::clone()"
    },
    "test_reverse_method_lines_dic": {
      "13": "SpanTest::::split()",
      "14": "SpanTest::::split()",
      "15": "SpanTest::::split()",
      "16": "SpanTest::::split()",
      "17": "SpanTest::::split()",
      "18": "SpanTest::::split()",
      "19": "SpanTest::::split()",
      "20": "SpanTest::::split()",
      "22": "SpanTest::::blockSize()",
      "23": "SpanTest::::blockSize()",
      "24": "SpanTest::::blockSize()",
      "25": "SpanTest::::blockSize()",
      "26": "SpanTest::::blockSize()",
      "27": "SpanTest::::blockSize()",
      "28": "SpanTest::::blockSize()",
      "29": "SpanTest::::blockSize()",
      "30": "SpanTest::::blockSize()",
      "31": "SpanTest::::blockSize()",
      "32": "SpanTest::::blockSize()",
      "33": "SpanTest::::blockSize()",
      "34": "SpanTest::::blockSize()",
      "36": "SpanTest::::getDeltaX()",
      "37": "SpanTest::::getDeltaX()",
      "38": "SpanTest::::getDeltaX()",
      "39": "SpanTest::::getDeltaX()",
      "40": "SpanTest::::getDeltaX()",
      "41": "SpanTest::::getDeltaX()",
      "42": "SpanTest::::getDeltaX()",
      "43": "SpanTest::::getDeltaX()",
      "44": "SpanTest::::getDeltaX()",
      "45": "SpanTest::::getDeltaX()",
      "46": "SpanTest::::getDeltaX()",
      "47": "SpanTest::::getDeltaX()",
      "49": "SpanTest::::splitLineBreak()",
      "50": "SpanTest::::splitLineBreak()",
      "51": "SpanTest::::splitLineBreak()",
      "52": "SpanTest::::splitLineBreak()",
      "53": "SpanTest::::splitLineBreak()",
      "54": "SpanTest::::splitLineBreak()",
      "55": "SpanTest::::splitLineBreak()",
      "56": "SpanTest::::splitLineBreak()",
      "57": "SpanTest::::splitLineBreak()",
      "58": "SpanTest::::splitLineBreak()",
      "59": "SpanTest::::splitLineBreak()",
      "60": "SpanTest::::splitLineBreak()",
      "61": "SpanTest::::splitLineBreak()",
      "62": "SpanTest::::splitLineBreak()",
      "63": "SpanTest::::splitLineBreak()",
      "64": "SpanTest::::splitLineBreak()",
      "65": "SpanTest::::splitLineBreak()",
      "66": "SpanTest::::splitLineBreak()"
    },
    "tests": [
      {
        "test_lines": [
          13,
          20
        ],
        "covered_lines": [
          29,
          36,
          45,
          52,
          59,
          66,
          70,
          74,
          82,
          97,
          104,
          106,
          109,
          110,
          111,
          120,
          121,
          124,
          125,
          172,
          173,
          283,
          287,
          288,
          292,
          377,
          380,
          381,
          382,
          454,
          455,
          456,
          457,
          458,
          459,
          460,
          461,
          462,
          463,
          464,
          465,
          466,
          467,
          468,
          469
        ]
      },
      {
        "test_lines": [
          49,
          66
        ],
        "covered_lines": [
          29,
          36,
          45,
          52,
          59,
          66,
          70,
          74,
          82,
          97,
          104,
          106,
          109,
          110,
          111,
          120,
          121,
          124,
          125,
          172,
          173,
          287,
          288,
          292,
          397,
          398,
          416,
          417,
          420,
          421,
          422,
          423,
          424,
          425,
          426,
          428,
          431,
          454,
          455,
          456,
          457,
          458,
          459,
          460,
          461,
          462,
          463,
          464,
          465,
          466,
          467,
          468,
          469
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-layout/src/main/java/org/ofdrw/layout/element/Div.java": {
    "class_content": [
      "package org.ofdrw.layout.element;\n",
      "\n",
      "\n",
      "import org.ofdrw.core.basicStructure.pageObj.layer.Type;\n",
      "import org.ofdrw.layout.Rectangle;\n",
      "import org.ofdrw.layout.RenderPrepare;\n",
      "import org.ofdrw.layout.element.canvas.NamedColor;\n",
      "import org.ofdrw.layout.engine.ElementSplit;\n",
      "import org.ofdrw.layout.handler.ElementRenderFinishHandler;\n",
      "\n",
      "import java.util.Arrays;\n",
      "\n",
      "/**\n",
      " * \u76d2\u5f0f\u6a21\u578b\u57fa\u7840\n",
      " * <p>\n",
      " * \u6bcf\u4e2a\u7ee7\u627fDiv\u7684\u5bf9\u8c61\u90fd\u4e0d\u5fc5\u987b\u63d0\u4f9b\u6cdb\u578b\u53c2\u6570T,\u7528\u4e8e\u7b80\u5316\u94fe\u5f0f\u8c03\u7528\u3002\n",
      " * <p>\n",
      " * \u7ed8\u5236\u884c\u4e3a\u8be6\u89c1\u6e32\u67d3\u5668\uff1a{@link org.ofdrw.layout.engine.render.DivRender}\n",
      " *\n",
      " * @param <T> \u94fe\u5f0f\u8c03\u7528\u8fd4\u8fd8\u503c\uff0cDiv\u7684\u5b50\u7c7b\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2020-02-03 12:46:15\n",
      " */\n",
      "public class Div<T extends Div> implements RenderPrepare, ElementSplit {\n",
      "\n",
      "    /**\n",
      "     * \u80cc\u666f\u989c\u8272\n",
      "     * <p>\n",
      "     * (R,G,B) \u4e09\u8272\u6570\u7ec4\n",
      "     */\n",
      "    private int[] backgroundColor = null;\n",
      "\n",
      "    /**\n",
      "     * \u8fb9\u6846\u989c\u8272\n",
      "     * <p>\n",
      "     * (R,G,B) \u4e09\u8272\u6570\u7ec4\n",
      "     */\n",
      "    private int[] borderColor = null;\n",
      "\n",
      "    /**\n",
      "     * \u5185\u5bb9\u5bbd\u5ea6\n",
      "     * <p>\n",
      "     * \u5982\u679c\u4e0d\u8bbe\u7f6e\uff0c\u5219\u4e3a\u81ea\u9002\u5e94\u3002\u6700\u5927\u5bbd\u5ea6\u4e0d\u80fd\u5927\u4e8e\u9875\u9762\u7248\u5fc3\u5bbd\u5ea6\u3002\n",
      "     */\n",
      "    private Double width = null;\n",
      "\n",
      "    /**\n",
      "     * \u5185\u5bb9\u9ad8\u5ea6\n",
      "     * <p>\n",
      "     * \u5982\u679c\u4e0d\u8bbe\u7f6e\u5219\u4e3a\u81ea\u9002\u5e94\u3002\n",
      "     * <p>\n",
      "     * \u6ce8\u610f\u5982\u679c\u9700\u8981\u4fdd\u8bc1\u5757\u5b8c\u6574\uff0c\u90a3\u4e48\u9ad8\u5ea6\u4e0d\u80fd\u5927\u4e8e\u7248\u5fc3\u9ad8\u5ea6\u3002\n",
      "     */\n",
      "    private Double height = null;\n",
      "\n",
      "    /**\n",
      "     * \u5185\u8fb9\u8ddd\n",
      "     * <p>\n",
      "     * \u6570\u7ec4\u4e2d\u4e2a\u5143\u7d20\u610f\u4e49\uff1a\u4e0a\u3001\u53f3\u3001\u4e0b\u3001\u5de6\n",
      "     */\n",
      "    private Double[] padding = {0d, 0d, 0d, 0d};\n",
      "\n",
      "    /**\n",
      "     * \u8fb9\u6846\u5bbd\u5ea6\n",
      "     * <p>\n",
      "     * \u6570\u7ec4\u4e2d\u4e2a\u5143\u7d20\u610f\u4e49\uff1a\u4e0a\u3001\u53f3\u3001\u4e0b\u3001\u5de6\n",
      "     */\n",
      "    private Double[] border = {0d, 0d, 0d, 0d};\n",
      "\n",
      "    /**\n",
      "     * \u5916\u8fb9\u8ddd\n",
      "     * <p>\n",
      "     * \u6570\u7ec4\u4e2d\u4e2a\u5143\u7d20\u610f\u4e49\uff1a\u4e0a\u3001\u53f3\u3001\u4e0b\u3001\u5de6\n",
      "     */\n",
      "    private Double[] margin = {0d, 0d, 0d, 0d};\n",
      "\n",
      "    /**\n",
      "     * \u8fb9\u6846\u865a\u7ebf\u6837\u5f0f\n",
      "     * <p>\n",
      "     * \u6570\u7ec4\u4e2d\u4e2a\u5143\u7d20\u610f\u4e49\uff1a[\u504f\u79fb\u91cf, \u865a\u7ebf\u957f,\u7a7a\u767d\u957f, \u865a\u7ebf\u957f,\u7a7a\u767d\u957f, \u865a\u7ebf\u957f,\u7a7a\u767d\u957f, \u865a\u7ebf\u957f,\u7a7a\u767d\u957f, ...]\n",
      "     */\n",
      "    private Double[] borderDash = null;\n",
      "\n",
      "    /**\n",
      "     * \u56fa\u5b9a\u5e03\u5c40\u7684\u76d2\u5f0f\u6a21\u578b\u5de6\u4e0a\u89d2X\u5750\u6807\n",
      "     */\n",
      "    private Double x = null;\n",
      "\n",
      "    /**\n",
      "     * \u56fa\u5b9a\u5e03\u5c40\u7684\u76d2\u5f0f\u6a21\u578b\u5de6\u4e0a\u89d2y\u5750\u6807\n",
      "     */\n",
      "    private Double y = null;\n",
      "\n",
      "    /**\n",
      "     * \u5bf9\u6bb5\u7684\u5360\u7528\u60c5\u51b5\n",
      "     */\n",
      "    private Clear clear = Clear.both;\n",
      "\n",
      "    /**\n",
      "     * \u5728\u6bb5\u4e2d\u7684\u6d6e\u52a8\u65b9\u5411\n",
      "     * <p>\n",
      "     * \u4e3a\u4e86\u907f\u514d\u4e0efloat\u5173\u952e\u5b57\u51b2\u7a81\u91c7\u7528AFloat\n",
      "     */\n",
      "    private AFloat aFloat = AFloat.left;\n",
      "\n",
      "    /**\n",
      "     * \u76f8\u5bf9\u4e8e\u6bb5\u7684\u5de6\u8fb9\u754c\u8ddd\u79bb\n",
      "     */\n",
      "    private double left = 0d;\n",
      "\n",
      "    /**\n",
      "     * \u76f8\u5bf9\u4e8e\u6bb5\u7684\u53f3\u8fb9\u754c\u8ddd\u79bb\n",
      "     */\n",
      "    private double right = 0d;\n",
      "\n",
      "    /**\n",
      "     * \u76f8\u5bf9\u5750\u6807\u7684top\n",
      "     */\n",
      "    private double top = 0d;\n",
      "\n",
      "    /**\n",
      "     * \u5143\u7d20\u6574\u4f53\u900f\u660e\u5ea6\n",
      "     * <p>\n",
      "     * null \u8868\u793a\u4e0d\u900f\u660e\n",
      "     * <p>\n",
      "     * \u53d6\u503c\u533a\u95f4 [0,1]\n",
      "     */\n",
      "    private Double opacity = null;\n",
      "\n",
      "    /**\n",
      "     * \u5143\u7d20\u5b9a\u4f4d\u65b9\u5f0f\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\u4e3a\u9759\u6001\u5b9a\u4f4d\n",
      "     */\n",
      "    private Position position = Position.Static;\n",
      "\n",
      "    /**\n",
      "     * \u5f53\u6e32\u67d3\u7a7a\u95f4\u4e0d\u8db3\u65f6\u53ef\u80fd\u4f1a\u62c6\u5206\u5143\u7d20\n",
      "     * <p>\n",
      "     * true\u4e3a\u4e0d\u62c6\u5206\uff0cfalse\u4e3a\u62c6\u5206\u3002\u9ed8\u8ba4\u503c\u4e3afalse\n",
      "     */\n",
      "    private Boolean integrity = false;\n",
      "\n",
      "    /**\n",
      "     * \u5360\u4f4d\u7b26\n",
      "     * <p>\n",
      "     * \u4e0d\u53c2\u4e0e\u6e32\u67d3\n",
      "     */\n",
      "    private boolean placeholder = false;\n",
      "\n",
      "    /**\n",
      "     * \u56fe\u5c42\uff0c\u9ed8\u8ba4\u4e3aBody\n",
      "     */\n",
      "    private Type layer = Type.Body;\n",
      "\n",
      "    /**\n",
      "     * \u6e32\u67d3\u5b8c\u6210\u540e\u7684\u5904\u7406\u5668\n",
      "     * \u5728\u8be5\u56de\u8c03\u4e2d\u53ef\u4ee5\u83b7\u53d6\u5230\u751f\u6210OFD\u5143\u7d20\u5728\u5bb9\u5668\u4e2d\u7684\u4f4d\u7f6e\uff0c\u4ee5\u53ca\u8fc7\u7a0b\u4e2d\u751f\u6210\u7684\u6240\u6709OFD\u5143\u7d20\u3002\n",
      "     */\n",
      "    private ElementRenderFinishHandler renderFinishHandler = null;\n",
      "\n",
      "    public Div() {\n",
      "    }\n",
      "\n",
      "    public Div(Double width, Double height) {\n",
      "        this.width = width;\n",
      "        this.height = height;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u521b\u5efa\u7edd\u5bf9\u5b9a\u4f4d\u7684Div\u5bf9\u8c61\n",
      "     *\n",
      "     * @param x      \u56fa\u5b9a\u5e03\u5c40\u7684\u76d2\u5f0f\u6a21\u578b\u5de6\u4e0a\u89d2X\u5750\u6807\n",
      "     * @param y      \u56fa\u5b9a\u5e03\u5c40\u7684\u76d2\u5f0f\u6a21\u578b\u5de6\u4e0a\u89d2y\u5750\u6807\n",
      "     * @param width  \u5bbd\u5ea6\n",
      "     * @param height \u9ad8\u5ea6\n",
      "     */\n",
      "    public Div(double x, double y, double width, double height) {\n",
      "        setX(x);\n",
      "        setY(y);\n",
      "        setWidth(width);\n",
      "        setHeight(height);\n",
      "        setPosition(Position.Absolute);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u662f\u5426\u5b58\u5728\u8fb9\u6846\n",
      "     *\n",
      "     * @return true \u4e0d\u5b58\u5728\uff1bfalse \u5b58\u5728\n",
      "     */\n",
      "    public boolean isNoBorder() {\n",
      "        return getBorderTop() == 0d\n",
      "                && getBorderRight() == 0d\n",
      "                && getBorderBottom() == 0d\n",
      "                && getBorderLeft() == 0d;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u662f\u5426\u662f\u5757\u7ea7\u5143\u7d20\n",
      "     * <p>\n",
      "     * \u5757\u5143\u7d20\u5c06\u4f1a\u72ec\u5360\u6574\u4e2a\u6bb5\n",
      "     * <p>\n",
      "     * \u7edd\u5bf9\u5b9a\u4f4d\u9ed8\u8ba4\u4e0d\u4e3a\u5757\u7ea7\u5143\u7d20\n",
      "     *\n",
      "     * @return true \u72ec\u5360; false \u5171\u4eab\n",
      "     */\n",
      "    public boolean isBlockElement() {\n",
      "        if (position == Position.Absolute) {\n",
      "            return false;\n",
      "        }\n",
      "        /*\n",
      "         \u72ec\u5360\u6bb5\u7684\u5143\u7d20\u7c7b\u578b\n",
      "         1. \u72ec\u5360\n",
      "         2. \u6d6e\u52a8 + Clear \u5bf9\u7acb\n",
      "         */\n",
      "        return (clear == Clear.both)\n",
      "                || (aFloat == AFloat.right && clear == Clear.left)\n",
      "                || (aFloat == AFloat.left && clear == Clear.right);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u900f\u660e\u5ea6\n",
      "     *\n",
      "     * @return \u900f\u660e\u5ea6\u53d6\u503c\u533a\u95f4 [0,1]\n",
      "     */\n",
      "    public Double getOpacity() {\n",
      "        return opacity;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u900f\u660e\u5ea6\n",
      "     * <p>\n",
      "     * 0 - \u8868\u793a\u5168\u900f\u660e\uff0c 1 - \u8868\u793a\u4e0d\u900f\u660e\n",
      "     *\n",
      "     * @param opacity \u900f\u660e\u5ea6\u53d6\u503c\u533a\u95f4 [0,1]\n",
      "     * @return this\n",
      "     */\n",
      "    public T setOpacity(Double opacity) {\n",
      "        if (opacity == null) {\n",
      "        } else if (opacity > 1) {\n",
      "            opacity = 1d;\n",
      "        } else if (opacity < 0) {\n",
      "            opacity = 0d;\n",
      "        }\n",
      "        this.opacity = opacity;\n",
      "        return (T) this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6 \u8fb9\u6846\u989c\u8272\n",
      "     *\n",
      "     * @return \u8fb9\u6846\u989c\u8272 RGB\u503c\uff0cnull \u8868\u793a\u65e0\u8272\u3002\n",
      "     */\n",
      "    public int[] getBorderColor() {\n",
      "        return borderColor;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u8fb9\u6846\u989c\u8272\n",
      "     *\n",
      "     * @param r \u7ea2\u8272\u503c\uff080~255\uff09\n",
      "     * @param g \u7eff\u8272\u503c\uff080~255\uff09\n",
      "     * @param b \u84dd\u8272\u503c\uff080~255\uff09\n",
      "     * @return this\n",
      "     */\n",
      "    public T setBorderColor(int r, int g, int b) {\n",
      "        this.borderColor = new int[]{r, g, b};\n",
      "        return (T) this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e \u8fb9\u6846\u989c\u8272\n",
      "     *\n",
      "     * @param rgb RGB\u6570\u7ec4\uff0cnull \u8868\u793a\u65e0\u8272\u3002\n",
      "     * @return this\n",
      "     */\n",
      "    public T setBorderColor(int[] rgb) {\n",
      "        this.borderColor = rgb;\n",
      "        return (T) this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e \u8fb9\u6846\u989c\u8272\n",
      "     *\n",
      "     * @param color \u989c\u8272\u503c\uff0c\u53ef\u4ee5\u662f 16\u8fdb\u5236\u503c \"#FFFFFF\"\u3001 16\u8fdb\u5236\u503c\u7f29\u5199 \"#FF\"F\u3001RGB \"rgb(255,255,255)\"\u3001\u989c\u8272\u540d\u79f0 \"white\"\n",
      "     * @return this\n",
      "     */\n",
      "    public T setBorderColor(String color) {\n",
      "        int[] c = NamedColor.rgb(color);\n",
      "        if (c == null || c.length < 3) {\n",
      "            throw new IllegalArgumentException(\"\u8fb9\u6846\u989c\u8272 \u989c\u8272\u503c\u9519\u8bef\uff1a\" + color);\n",
      "        }\n",
      "        this.setBorderColor(c);\n",
      "        return (T) this;\n",
      "    }\n",
      "\n",
      "    public Double getTop() {\n",
      "        return top;\n",
      "    }\n",
      "\n",
      "    public T setTop(Double top) {\n",
      "        this.top = top;\n",
      "        return (T) this;\n",
      "    }\n",
      "\n",
      "    public Position getPosition() {\n",
      "        return position;\n",
      "    }\n",
      "\n",
      "    public T setPosition(Position position) {\n",
      "        this.position = position;\n",
      "        return (T) this;\n",
      "    }\n",
      "\n",
      "    public int[] getBackgroundColor() {\n",
      "        return backgroundColor;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u80cc\u666f\u989c\u8272 RGB\n",
      "     *\n",
      "     * @param r \u7ea2\u8272\u503c\uff080~255\uff09\n",
      "     * @param g \u7eff\u8272\u503c\uff080~255\uff09\n",
      "     * @param b \u84dd\u8272\u503c\uff080~255\uff09\n",
      "     * @return this\n",
      "     */\n",
      "    public T setBackgroundColor(int r, int g, int b) {\n",
      "        this.backgroundColor = new int[]{r, g, b};\n",
      "        return (T) this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e \u80cc\u666f\u989c\u8272\n",
      "     *\n",
      "     * @param color \u989c\u8272\u503c\uff0c\u53ef\u4ee5\u662f 16\u8fdb\u5236\u503c \"#FFFFFF\"\u3001 16\u8fdb\u5236\u503c\u7f29\u5199 \"#FF\"F\u3001RGB \"rgb(255,255,255)\"\u3001\u989c\u8272\u540d\u79f0 \"white\"\n",
      "     * @return this\n",
      "     */\n",
      "    public T setBackgroundColor(String color) {\n",
      "        int[] c = NamedColor.rgb(color);\n",
      "        if (c == null || c.length < 3) {\n",
      "            throw new IllegalArgumentException(\"\u80cc\u666f\u989c\u8272 \u989c\u8272\u503c\u9519\u8bef\uff1a\" + color);\n",
      "        }\n",
      "        this.setBackgroundColor(c);\n",
      "        return (T) this;\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u80cc\u666f\u989c\u8272 RGB\n",
      "     *\n",
      "     * @param backgroundColor RGB\u6570\u7ec4\n",
      "     * @return this\n",
      "     */\n",
      "    public T setBackgroundColor(int[] backgroundColor) {\n",
      "        this.backgroundColor = backgroundColor;\n",
      "        return (T) this;\n",
      "    }\n",
      "\n",
      "    public Double getWidth() {\n",
      "        return width;\n",
      "    }\n",
      "\n",
      "    public T setWidth(Double width) {\n",
      "        this.width = width;\n",
      "        return (T) this;\n",
      "    }\n",
      "\n",
      "    public Double getHeight() {\n",
      "        return height;\n",
      "    }\n",
      "\n",
      "    public T setHeight(Double height) {\n",
      "        this.height = height;\n",
      "        return (T) this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5185\u8fb9\u8ddd\n",
      "     * <p>\n",
      "     * \u4e00\u5b9a\u8fd4\u56de4\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\n",
      "     *\n",
      "     * @return \u5185\u8fb9\u8ddd\u6570\u7ec4\uff0c[\u4e0a,\u53f3,\u4e0b,\u5de6]\n",
      "     */\n",
      "    public Double[] getPadding() {\n",
      "        return padding;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e \u5185\u8fb9\u8ddd\n",
      "     * <p>\n",
      "     * \u6839\u636e\u53c2\u6570\u7684\u53c2\u6570\u4e0d\u540c\u8bbe\u7f6e\u6d89\u53ca\u5230\u4e86\u5230 \u4e0a\u3001\u53f3\u3001\u4e0b\u3001\u5de6 \u5404\u90e8\u5206\u53c2\u6570\n",
      "     * 1\u4e2a\u53c2\u6570\uff0c\u4e0a\u3001\u53f3\u3001\u4e0b\u3001\u5de6 \u90fd\u76f8\u540c      {arr[0], arr[0], arr[0], arr[0]}\n",
      "     * <p>\n",
      "     * 2\u4e2a\u53c2\u6570\uff0c\u4e0a\u548c\u4e0b\u76f8\u540c\u3001\u5de6\u548c\u53f3\u76f8\u540c       {arr[0], arr[1], arr[0], arr[1]}\n",
      "     * <p>\n",
      "     * 3\u4e2a\u53c2\u6570\uff0c\u4e0a\u3001\u53f3\u3001\u4e0b\u3001\u5de6(0) \u5206\u522b\u8bbe\u7f6e  {arr[0], arr[1], arr[2], 0}\n",
      "     * <p>\n",
      "     * 4\u4e2a\u53c2\u6570\uff0c\u4e0a\u3001\u53f3\u3001\u4e0b\u3001\u5de6 \u5206\u522b\u8bbe\u7f6e     {arr[0], arr[1], arr[2], arr[3]}\n",
      "     *\n",
      "     * @param padding \u5185\u8fb9\u8ddd\uff0c\u53ef\u53d8\u53c2\u6570\u3002\n",
      "     * @return this\n",
      "     */\n",
      "    public T setPadding(Double... padding) {\n",
      "        this.padding = ArrayParamTool.arr4p(padding);\n",
      "        return (T) this;\n",
      "    }\n",
      "\n",
      "    public Double[] getBorder() {\n",
      "        return border;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e \u8fb9\u6846\u5bbd\u5ea6\n",
      "     * <p>\n",
      "     * \u6839\u636e\u53c2\u6570\u7684\u53c2\u6570\u4e0d\u540c\u8bbe\u7f6e\u6d89\u53ca\u5230\u4e86\u5230 \u4e0a\u3001\u53f3\u3001\u4e0b\u3001\u5de6 \u5404\u90e8\u5206\u53c2\u6570\n",
      "     * 1\u4e2a\u53c2\u6570\uff0c\u4e0a\u3001\u53f3\u3001\u4e0b\u3001\u5de6 \u90fd\u76f8\u540c      {arr[0], arr[0], arr[0], arr[0]}\n",
      "     * <p>\n",
      "     * 2\u4e2a\u53c2\u6570\uff0c\u4e0a\u548c\u4e0b\u76f8\u540c\u3001\u5de6\u548c\u53f3\u76f8\u540c       {arr[0], arr[1], arr[0], arr[1]}\n",
      "     * <p>\n",
      "     * 3\u4e2a\u53c2\u6570\uff0c\u4e0a\u3001\u53f3\u3001\u4e0b\u3001\u5de6(0) \u5206\u522b\u8bbe\u7f6e  {arr[0], arr[1], arr[2], 0}\n",
      "     * <p>\n",
      "     * 4\u4e2a\u53c2\u6570\uff0c\u4e0a\u3001\u53f3\u3001\u4e0b\u3001\u5de6 \u5206\u522b\u8bbe\u7f6e     {arr[0], arr[1], arr[2], arr[3]}\n",
      "     *\n",
      "     * @param border \u8fb9\u6846\u5bbd\u5ea6\uff0c\u53ef\u53d8\u53c2\u6570\u3002\n",
      "     * @return this\n",
      "     */\n",
      "    public T setBorder(Double... border) {\n",
      "        this.border = ArrayParamTool.arr4p(border);\n",
      "        return (T) this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e \u8fb9\u6846\u865a\u7ebf\u6837\u5f0f\n",
      "     * <p>\n",
      "     * \u53d6\u6d88\u865a\u7ebf\uff1a{@code setBorderDash(null)}\n",
      "     * <p>\n",
      "     * \u8bbe\u7f6e\u865a\u7ebf \u4e0e \u7a7a\u767d\u76f8\u540c 3\uff1a{@code setBorderDash(3d)}\n",
      "     * <p>\n",
      "     * \u8bbe\u7f6e\u865a\u7ebf\u7684 \u957f\u5ea6 3 \u4e0e\u7a7a\u767d 2\uff1a {@code setBorderDash(3d, 2d)}\n",
      "     * <p>\n",
      "     * \u8bbe\u7f6e\u865a\u7ebf\u7684\u957f\u5ea6 3\u3001\u7a7a\u767d 2\u3001\u504f\u79fb\u91cf 1\uff1a{@code setBorderDash(1d, 3d, 2d)}\n",
      "     *\n",
      "     * @param dash \u865a\u7ebf\u6837\u5f0f\uff0c\n",
      "     * @return this\n",
      "     */\n",
      "    public T setBorderDash(Double... dash) {\n",
      "        if (dash == null || dash.length == 0 || (dash.length == 1 && dash[0] == null)) {\n",
      "            this.borderDash = null;\n",
      "            return (T) this;\n",
      "        }\n",
      "        if (dash.length == 1) {\n",
      "            // \u5355\u4e2a\u53c2\u6570\uff0c\u8bbe\u7f6e\u865a\u7ebf\u957f\u5ea6\u4e0e\u7a7a\u767d\u76f8\u540c\n",
      "            this.borderDash = new Double[]{0.0, dash[0], dash[0]};\n",
      "            return (T) this;\n",
      "        }\n",
      "\n",
      "        Double[] arr = null;\n",
      "        if (dash.length % 2 == 1) {\n",
      "            // \u5947\u6570\u4e2a\u53c2\u6570 \u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a \u865a\u7ebf\u504f\u79fb\u91cf\n",
      "            arr = dash;\n",
      "        } else {\n",
      "            // \u5076\u6570\u53c2\u6570 \u8865\u5145\u4e00\u4e2a0\u4f5c\u4e3a \u865a\u7ebf\u504f\u79fb\u91cf\n",
      "            arr = new Double[dash.length + 1];\n",
      "            arr[0] = 0.0;\n",
      "            System.arraycopy(dash, 0, arr, 1, dash.length);\n",
      "        }\n",
      "        this.borderDash = arr;\n",
      "        return (T) this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6 \u8fb9\u6846\u865a\u7ebf\u6837\u5f0f\n",
      "     * <p>\n",
      "     * \u6570\u7ec4\u4e2d\u4e2a\u5143\u7d20\u610f\u4e49\uff1a[\u865a\u7ebf\u504f\u79fb\u91cf,\u865a\u7ebf\u957f\u5ea6,\u865a\u7ebf\u95f4\u9694 ...\u91cd\u590d]\n",
      "     *\n",
      "     * @return \u8fb9\u6846\u865a\u7ebf\u6837\u5f0f\uff0cnull\u8868\u793a\u65e0\u865a\u7ebf\n",
      "     */\n",
      "    public Double[] getBorderDash() {\n",
      "        return borderDash;\n",
      "    }\n",
      "\n",
      "    public Double[] getMargin() {\n",
      "        return margin;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e \u5916\u8fb9\u8ddd\n",
      "     * <p>\n",
      "     * \u6839\u636e\u53c2\u6570\u7684\u53c2\u6570\u4e0d\u540c\u8bbe\u7f6e\u6d89\u53ca\u5230\u4e86\u5230 \u4e0a\u3001\u53f3\u3001\u4e0b\u3001\u5de6 \u5404\u90e8\u5206\u53c2\u6570\n",
      "     * 1\u4e2a\u53c2\u6570\uff0c\u4e0a\u3001\u53f3\u3001\u4e0b\u3001\u5de6 \u90fd\u76f8\u540c      {arr[0], arr[0], arr[0], arr[0]}\n",
      "     * <p>\n",
      "     * 2\u4e2a\u53c2\u6570\uff0c\u4e0a\u548c\u4e0b\u76f8\u540c\u3001\u5de6\u548c\u53f3\u76f8\u540c       {arr[0], arr[1], arr[0], arr[1]}\n",
      "     * <p>\n",
      "     * 3\u4e2a\u53c2\u6570\uff0c\u4e0a\u3001\u53f3\u3001\u4e0b\u3001\u5de6(0) \u5206\u522b\u8bbe\u7f6e  {arr[0], arr[1], arr[2], 0}\n",
      "     * <p>\n",
      "     * 4\u4e2a\u53c2\u6570\uff0c\u4e0a\u3001\u53f3\u3001\u4e0b\u3001\u5de6 \u5206\u522b\u8bbe\u7f6e     {arr[0], arr[1], arr[2], arr[3]}\n",
      "     *\n",
      "     * @param margin \u5916\u8fb9\u8ddd\uff0c\u53ef\u53d8\u53c2\u6570\u3002\n",
      "     * @return this\n",
      "     */\n",
      "    public T setMargin(Double... margin) {\n",
      "        this.margin = ArrayParamTool.arr4p(margin);\n",
      "        return (T) this;\n",
      "    }\n",
      "\n",
      "    public Double getMarginTop() {\n",
      "        return margin[0];\n",
      "    }\n",
      "\n",
      "    public T setMarginTop(Double top) {\n",
      "        margin[0] = top;\n",
      "        return (T) this;\n",
      "    }\n",
      "\n",
      "    public Double getMarginRight() {\n",
      "        return margin[1];\n",
      "    }\n",
      "\n",
      "    public T setMarginRight(Double right) {\n",
      "        margin[1] = right;\n",
      "        return (T) this;\n",
      "    }\n",
      "\n",
      "    public Double getMarginBottom() {\n",
      "        return margin[2];\n",
      "    }\n",
      "\n",
      "    public T setMarginBottom(Double bottom) {\n",
      "        margin[2] = bottom;\n",
      "        return (T) this;\n",
      "    }\n",
      "\n",
      "    public Double getMarginLeft() {\n",
      "        return margin[3];\n",
      "    }\n",
      "\n",
      "    public T setMarginLeft(Double left) {\n",
      "        margin[3] = left;\n",
      "        return (T) this;\n",
      "    }\n",
      "\n",
      "    public Double getBorderTop() {\n",
      "        return border[0];\n",
      "    }\n",
      "\n",
      "    public T setBorderTop(Double top) {\n",
      "        border[0] = top;\n",
      "        return (T) this;\n",
      "    }\n",
      "\n",
      "    public Double getBorderRight() {\n",
      "        return border[1];\n",
      "    }\n",
      "\n",
      "    public T setBorderRight(Double right) {\n",
      "        border[1] = right;\n",
      "        return (T) this;\n",
      "    }\n",
      "\n",
      "    public Double getBorderBottom() {\n",
      "        return border[2];\n",
      "    }\n",
      "\n",
      "    public T setBorderBottom(Double bottom) {\n",
      "        border[2] = bottom;\n",
      "        return (T) this;\n",
      "    }\n",
      "\n",
      "    public Double getBorderLeft() {\n",
      "        return border[3];\n",
      "    }\n",
      "\n",
      "    public T setBorderLeft(Double left) {\n",
      "        border[3] = left;\n",
      "        return (T) this;\n",
      "    }\n",
      "\n",
      "\n",
      "    public Double getPaddingTop() {\n",
      "        return padding[0];\n",
      "    }\n",
      "\n",
      "    public T setPaddingTop(Double top) {\n",
      "        padding[0] = top;\n",
      "        return (T) this;\n",
      "    }\n",
      "\n",
      "    public Double getPaddingRight() {\n",
      "        return padding[1];\n",
      "    }\n",
      "\n",
      "    public T setPaddingRight(Double right) {\n",
      "        padding[1] = right;\n",
      "        return (T) this;\n",
      "    }\n",
      "\n",
      "    public Double getPaddingBottom() {\n",
      "        return padding[2];\n",
      "    }\n",
      "\n",
      "    public T setPaddingBottom(Double bottom) {\n",
      "        padding[2] = bottom;\n",
      "        return (T) this;\n",
      "    }\n",
      "\n",
      "    public Double getPaddingLeft() {\n",
      "        return padding[3];\n",
      "    }\n",
      "\n",
      "    public T setPaddingLeft(Double left) {\n",
      "        padding[3] = left;\n",
      "        return (T) this;\n",
      "    }\n",
      "\n",
      "\n",
      "    public Double getX() {\n",
      "        return x;\n",
      "    }\n",
      "\n",
      "    public T setX(Double x) {\n",
      "        this.x = x;\n",
      "        return (T) this;\n",
      "    }\n",
      "\n",
      "    public Double getY() {\n",
      "        return y;\n",
      "    }\n",
      "\n",
      "    public T setY(Double y) {\n",
      "        this.y = y;\n",
      "        return (T) this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u4f4d\u7f6e\n",
      "     *\n",
      "     * @param x \u5de6\u4e0a\u89d2X\u5750\u6807\n",
      "     * @param y \u5de6\u4e0a\u89d2Y\u5750\u6807\n",
      "     * @return this\n",
      "     */\n",
      "    public T setXY(Double x, Double y) {\n",
      "        setX(x);\n",
      "        setY(y);\n",
      "        return (T) this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u76d2\u5f0f\u6a21\u578b\u7684\u4e3b\u8981\u5c5e\u6027\n",
      "     *\n",
      "     * @param x      \u5de6\u4e0a\u89d2X\u5750\u6807\n",
      "     * @param y      \u5de6\u4e0a\u89d2Y\u5750\u6807\n",
      "     * @param width  \u5bbd\u5ea6\n",
      "     * @param height \u9ad8\u5ea6\n",
      "     * @return this\n",
      "     */\n",
      "    public T setBox(Double x, Double y, Double width, Double height) {\n",
      "        setX(x);\n",
      "        setY(y);\n",
      "        setWidth(width);\n",
      "        setHeight(height);\n",
      "        return (T) this;\n",
      "    }\n",
      "\n",
      "    public Clear getClear() {\n",
      "        return clear;\n",
      "    }\n",
      "\n",
      "    public T setClear(Clear clear) {\n",
      "        this.clear = clear;\n",
      "        return (T) this;\n",
      "    }\n",
      "\n",
      "    public AFloat getFloat() {\n",
      "        return aFloat;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u6d6e\u52a8\u6837\u5f0f\n",
      "     * <p>\n",
      "     * \u6ce8\u610f\uff1a\u5982\u679c\u9700\u8981\u8bbe\u7f6e\u5c45\u4e2d\uff0c\u90a3\u4e48\u8fd8\u9700\u8981\u540c\u65f6\u8bbe\u7f6e {@link #setClear(Clear)}\n",
      "     * \u4e3a{@link Clear#none}\u6216{@link Clear#right}\n",
      "     *\n",
      "     * @param aFloat \u6d6e\u52a8\u6837\u5f0f\n",
      "     * @return this\n",
      "     */\n",
      "    public T setFloat(AFloat aFloat) {\n",
      "        this.aFloat = aFloat;\n",
      "        return (T) this;\n",
      "    }\n",
      "\n",
      "    public Double getLeft() {\n",
      "        return left;\n",
      "    }\n",
      "\n",
      "    public T setLeft(Double left) {\n",
      "        this.left = left;\n",
      "        return (T) this;\n",
      "    }\n",
      "\n",
      "    public Double getRight() {\n",
      "        return right;\n",
      "    }\n",
      "\n",
      "    public T setRight(Double right) {\n",
      "        this.right = right;\n",
      "        return (T) this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5143\u7d20\u662f\u5426\u53ef\u4ee5\u62c6\u5206\n",
      "     *\n",
      "     * @return true - \u53ef\u4ee5\u62c6\u5206\uff1bfalse - \u65e0\u6cd5\u62c6\u5206\n",
      "     */\n",
      "    public Boolean isIntegrity() {\n",
      "        return integrity;\n",
      "    }\n",
      "\n",
      "    public T setIntegrity(Boolean integrity) {\n",
      "        this.integrity = integrity;\n",
      "        return (T) this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * @return \u989d\u5916\u5bbd\u5ea6\n",
      "     */\n",
      "    public double widthPlus() {\n",
      "        return (this.margin[1] + this.margin[3])\n",
      "                + (this.padding[1] + this.padding[3])\n",
      "                + (this.border[1] + this.border[3]);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * @return \u989d\u5916\u9ad8\u5ea6\n",
      "     */\n",
      "    public double heightPlus() {\n",
      "        return (this.margin[0] + this.margin[2])\n",
      "                + (this.padding[0] + this.padding[2])\n",
      "                + (this.border[0] + this.border[2]);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5c3a\u5bf8\n",
      "     *\n",
      "     * @param widthLimit \u5bbd\u5ea6\u9650\u5236\n",
      "     * @return \u5143\u7d20\u5c3a\u5bf8\n",
      "     */\n",
      "    @Override\n",
      "    public Rectangle doPrepare(Double widthLimit) {\n",
      "        if (this.height == null || this.width == null) {\n",
      "            return Rectangle.Empty;\n",
      "        }\n",
      "        if (widthLimit == null) {\n",
      "            throw new NullPointerException(\"widthLimit\u4e3a\u7a7a\");\n",
      "        }\n",
      "        widthLimit -= widthPlus();\n",
      "        if (this.width > widthLimit) {\n",
      "            // TODO \u5c3a\u5bf8\u91cd\u7f6e\u8b66\u544a\u65e5\u5fd7\n",
      "            this.setWidth(widthLimit);\n",
      "        }\n",
      "        double w = this.width + widthPlus();\n",
      "        double h = this.height + heightPlus();\n",
      "\n",
      "        return new Rectangle(w, h);\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u6a21\u578b\u533a\u57df\u5927\u5c0f\n",
      "     * <p>\n",
      "     * \u6ce8\u610f\uff1a\u8be5\u65b9\u6cd5\u5fc5\u987b\u5728\u5143\u7d20\u5185\u5bb9\u5927\u5c0f\u786e\u5b9a\u7684\u60c5\u51b5\u624d\u80fd\u653e\u56de\u6b63\u786e\u7684\u5c3a\u5bf8\n",
      "     * <p>\n",
      "     * \u4e5f\u5c31\u662f\u8bf4\u5fc5\u987b\u5728 {@link #doPrepare(Double)} \u6216\u662f\u624b\u52a8\u8bbe\u7f6e\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u4e4b\u540e\u8c03\u7528\u624d\u80fd\u8fd4\u8fd8\u6b63\u786e\u503c\n",
      "     *\n",
      "     * @return \u6a21\u578b\u5927\u5c0f\n",
      "     */\n",
      "    public Rectangle box() {\n",
      "        double w = this.width + widthPlus();\n",
      "        double h = this.height + heightPlus();\n",
      "\n",
      "        return new Rectangle(w, h);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8fd4\u56de \u56fe\u5c42\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\u4e3aBody\n",
      "     *\n",
      "     * @return \u56fe\u5c42\n",
      "     */\n",
      "    public Type getLayer() {\n",
      "        return layer;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e \u56fe\u5c42\n",
      "     *\n",
      "     * @param layer \u56fe\u5c42\n",
      "     * @return this\n",
      "     */\n",
      "    public T setLayer(Type layer) {\n",
      "        this.layer = layer;\n",
      "        return (T) this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5224\u65ad\u662f\u5426\u4e3a\u5360\u4f4d\u7b26\n",
      "     *\n",
      "     * @return true \u5360\u4f4d\u7b26\uff0c\u4e0d\u53c2\u4e0e\u6e32\u67d3\uff0c false - \u975e\u5360\u4f4d\u7b26\n",
      "     */\n",
      "    public boolean isPlaceholder() {\n",
      "        return placeholder;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u662f\u5426\u4e3a \u5360\u4f4d\u7b26\n",
      "     *\n",
      "     * @param placeholder true \u5360\u4f4d\u7b26\uff0c\u4e0d\u53c2\u4e0e\u6e32\u67d3\uff0c false - \u975e\u5360\u4f4d\u7b26\n",
      "     * @return this\n",
      "     */\n",
      "    public T setPlaceholder(boolean placeholder) {\n",
      "        this.placeholder = placeholder;\n",
      "        return (T) this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e \u663e\u793a\u6837\u5f0f\n",
      "     *\n",
      "     * @param display \u663e\u793a\u6837\u5f0f {@link Display#inlineBlock} \u884c\u5185\u8054 \u6216 {@link Display#block} \u5757\u7ea7\n",
      "     * @return this\n",
      "     */\n",
      "    public T setDisplay(Display display) {\n",
      "        switch (display) {\n",
      "            case inlineBlock:\n",
      "                return setClear(Clear.none);\n",
      "            case block:\n",
      "            default:\n",
      "                return setClear(Clear.both);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6 \u663e\u793a\u6837\u5f0f\n",
      "     *\n",
      "     * @return \u663e\u793a\u6837\u5f0f {@link Display#inlineBlock} \u884c\u5185\u8054 \u6216 {@link Display#block} \u5757\u7ea7\n",
      "     */\n",
      "    public Display getDisplay() {\n",
      "        if (isBlockElement()) {\n",
      "            return Display.block;\n",
      "        }\n",
      "\n",
      "        if (this.clear == Clear.none) {\n",
      "            return Display.inlineBlock;\n",
      "        }\n",
      "        return Display.block;\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u7a7a\u95f4\u5360\u4f4d\u7b26\n",
      "     * <p>\n",
      "     * \u5171\u4eab\u6bb5\u7a7a\u95f4\uff0c\u4e14\u4e0d\u53ef\u5206\u5272\n",
      "     *\n",
      "     * @param width  \u5bbd\u5ea6\n",
      "     * @param height \u9ad8\u5ea6\n",
      "     * @param aFloat \u6d6e\u52a8\u65b9\u5411\n",
      "     * @return \u7a7a\u95f4\u5360\u4f4d\u7b26\n",
      "     */\n",
      "    public static Div placeholder(double width, double height, AFloat aFloat) {\n",
      "        return new Div()\n",
      "                .setPlaceholder(true)\n",
      "                .setWidth(width)\n",
      "                .setHeight(height)\n",
      "                .setFloat(aFloat)\n",
      "                .setClear(Clear.none)\n",
      "                .setIntegrity(true);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u7a7a\u95f4\u5360\u4f4d\u7b26\n",
      "     *\n",
      "     * @param rec    \u77e9\u5f62\u533a\u57df\n",
      "     * @param aFloat \u6d6e\u52a8\u65b9\u5411\n",
      "     * @return \u7a7a\u95f4\u5360\u4f4d\u7b26\n",
      "     */\n",
      "    public static Div placeholder(Rectangle rec, AFloat aFloat) {\n",
      "        return placeholder(rec.getWidth(), rec.getHeight(), aFloat);\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u514b\u9686Div\n",
      "     *\n",
      "     * @return \u4e00\u6a21\u4e00\u6837\u7684\u5168\u65b0Div\u5bf9\u8c61\n",
      "     */\n",
      "    @Override\n",
      "    public Div clone() {\n",
      "        Div div = new Div();\n",
      "        return copyTo(div);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Clone\u5230\u5236\u5b9a\u5bf9\u8c61\n",
      "     *\n",
      "     * @param div \u76ee\u6807\u5bf9\u8c61\n",
      "     * @param <T> \u6cdb\u578b\u53c2\u6570\n",
      "     * @return \u514b\u9686\u590d\u5236\u540e\u7684\u5bf9\u8c61\n",
      "     */\n",
      "    public <T extends Div> T copyTo(T div) {\n",
      "        div.setBackgroundColor(backgroundColor == null ? null : backgroundColor.clone());\n",
      "        div.setBorderColor(borderColor == null ? null : borderColor.clone());\n",
      "        div.setWidth(width);\n",
      "        div.setHeight(height);\n",
      "        div.setPadding(padding.clone());\n",
      "        div.setBorder(border.clone());\n",
      "        div.setMargin(margin.clone());\n",
      "        div.setX(x);\n",
      "        div.setY(y);\n",
      "        div.setClear(clear);\n",
      "        div.setFloat(aFloat);\n",
      "        div.setLeft(left);\n",
      "        div.setRight(right);\n",
      "        div.setTop(top);\n",
      "        div.setPosition(position);\n",
      "        div.setIntegrity(integrity);\n",
      "        div.setPlaceholder(placeholder);\n",
      "        div.setLayer(layer);\n",
      "        div.onRenderFinish(renderFinishHandler);\n",
      "        return div;\n",
      "\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6839\u636e\u7ed9\u5b9a\u7684\u9ad8\u5ea6\u5207\u5206\u5143\u7d20\n",
      "     * <p>\n",
      "     * \u622a\u65ad\u5143\u7d20\u524d\u5fc5\u987b\u786e\u5b9a\u5143\u7d20\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\uff0c\u5426\u5219\u5c06\u4f1a\u629b\u51fa\u5f02\u5e38\n",
      "     * <p>\n",
      "     * \u5143\u7d20\u7684\u5206\u5272\u53ea\u4f5c\u7528\u4e8e\u7ad6\u76f4\u65b9\u5411\u4e0a\uff0c\u6c34\u5e73\u65b9\u5411\u4e0d\u505a\u5206\u5272\u6bcf\u6b21\u53ea\u4f1a\u622a\u65ad1\u6b21\u3002\n",
      "     * <p>\n",
      "     * \u622a\u65ad\u7684\u5143\u7d20\u5728\u622a\u65ad\u51fa\u5747\u65e0margin\u3001border\u3001padding\n",
      "     * <p>\n",
      "     * \u622a\u65ad\u540e\u7684\u5185\u5bb9\u6bd4\u622a\u65ad\u9ad8\u5ea6\u9ad8\u7684\u591a\n",
      "     *\n",
      "     * @param sHeight \u5207\u5206\u9ad8\u5ea6\n",
      "     * @return \u6839\u636e\u7ed9\u5b9a\u7a7a\u95f4\u5206\u5272\u4e4b\u540e\u7684\u65b0\u5143\u7d20\n",
      "     */\n",
      "    @Override\n",
      "    public Div[] split(double sHeight) {\n",
      "        if (width == null || height == null) {\n",
      "            throw new RuntimeException(\"\u5207\u5206\u5143\u7d20\u5fc5\u987b\u8981\u6709\u56fa\u5b9a\u7684\u5bbd\u5ea6\uff08width\uff09\u548c\u9ad8\u5ea6\uff08height\uff09\");\n",
      "        }\n",
      "        double totalH = height + heightPlus();\n",
      "        if (totalH <= sHeight) {\n",
      "            // \u5c0f\u4e8e\u5207\u5206\u9ad8\u5ea6\u65f6\u8fd4\u8fd8\u81ea\u8eab\uff0c\u8868\u793a\u4e0d\u5207\u5206\n",
      "            return new Div[]{this};\n",
      "        }\n",
      "        // \u5426\u5219\u5207\u5206\u5143\u7d20\uff0c\u9996\u5148\u514b\u9686\u5143\u7d20\n",
      "        Div div1 = this.clone();\n",
      "        Div div2 = this.clone();\n",
      "\n",
      "        /*\n",
      "         Margin border Padding \u7684\u8003\u8651\n",
      "         */\n",
      "        if (getMarginTop() >= sHeight) {\n",
      "            // Margin \u5206\u6bb5\u60c5\u51b5\n",
      "            double deltaM = getMarginTop() - sHeight;\n",
      "            // \u53ea\u7559\u4e0b\u4e00\u4e2aMargin\u7684div\n",
      "            div1.setMarginTop(sHeight)\n",
      "                    .setBorderTop(0d)\n",
      "                    .setPaddingTop(0d)\n",
      "                    .setHeight(0d)\n",
      "                    .setPaddingBottom(0d)\n",
      "                    .setBorderBottom(0d)\n",
      "                    .setMarginBottom(0d)\n",
      "                    // \u53ea\u6709Margin\u90a3\u4e48\u53ea\u662f\u4e00\u4e2a\u5360\u4f4d\u7b26\n",
      "                    .setPlaceholder(true);\n",
      "            // \u51cf\u53bb\u90e8\u5206\u6b8b\u7559\u5728\u4e0a\u4e00\u4e2a\u6bb5\u7684margin\n",
      "            div2.setMarginTop(deltaM);\n",
      "        } else if (getMarginTop() + getBorderTop() >= sHeight) {\n",
      "            // Border + Margin \u8017\u5c3d\u4e86\u7a7a\u95f4 \u5206\u6bb5\u7684\u60c5\u51b5\n",
      "            double deltaB = getBorderTop() - (sHeight - getMarginTop());\n",
      "            // \u5269\u4f59\u7a7a\u95f4\u9664\u53bbMargin\u5269\u4e0b\u90fd\u662fborder\n",
      "            div1.setBorderTop(sHeight - getMarginTop())\n",
      "                    .setPaddingTop(0d)\n",
      "                    .setHeight(0d)\n",
      "                    .setPaddingBottom(0d)\n",
      "                    .setBorderBottom(0d)\n",
      "                    .setMarginBottom(0d);\n",
      "            // \u51cf\u53bbmargin\u548cborder\n",
      "            div2.setMarginTop(0d)\n",
      "                    .setBorderTop(deltaB);\n",
      "        } else if (getMarginTop() + getBorderTop() + getPaddingTop() >= sHeight) {\n",
      "            double deltaP = getPaddingTop() - (sHeight - getMarginTop() - getBorderTop());\n",
      "            // \u88c1\u526a\u540e\u5269\u4f59\uff1amargin top + border top + \u90e8\u5206 padding top  + 0 + 0 + 0 + 0\n",
      "            div1.setPaddingTop(sHeight - getMarginTop() - getBorderTop())\n",
      "                    .setHeight(0d)\n",
      "                    .setPaddingBottom(0d)\n",
      "                    .setBorderBottom(0d)\n",
      "                    .setMarginBottom(0d);\n",
      "            // \u88c1\u526a\u540e\u5269\u4f59\uff1a0 + 0 + \u90e8\u5206 padding top  + content height + padding bottom + border bottom + margin bottom\n",
      "            div2.setMarginTop(0d)\n",
      "                    .setBorderTop(0d)\n",
      "                    .setPaddingTop(deltaP);\n",
      "        } else if (getMarginTop() + getBorderTop() + getPaddingTop() + getHeight() >= sHeight) {\n",
      "            // \u5185\u5bb9\u5206\u5272\u8c03\u6574\n",
      "            Div[] divs = contentSplitAdjust(sHeight, div1, div2);\n",
      "            div1 = divs[0];\n",
      "            div2 = divs[1];\n",
      "        } else if (getMarginTop() + getBorderTop() + getPaddingTop() + getHeight() + getPaddingBottom() >= sHeight) {\n",
      "            double deltaP = sHeight - (getMarginTop() + getBorderTop() + getPaddingTop() + getHeight());\n",
      "            div1.setPaddingBottom(deltaP)\n",
      "                    .setBorderBottom(0d)\n",
      "                    .setMarginBottom(0d);\n",
      "            div2.setMarginTop(0d)\n",
      "                    .setBorderTop(0d)\n",
      "                    .setPaddingTop(0d)\n",
      "                    .setHeight(0d)\n",
      "                    .setPaddingBottom(div2.getPaddingBottom() - deltaP);\n",
      "        } else if (\n",
      "                getMarginTop() + getBorderTop() + getPaddingTop() +\n",
      "                        getHeight() + getPaddingBottom() + getBorderBottom() >= sHeight) {\n",
      "            double deltaB = sHeight - (getMarginTop() + getBorderTop() + getPaddingTop() +\n",
      "                    getHeight() + getPaddingBottom());\n",
      "\n",
      "            div1.setBorderBottom(deltaB)\n",
      "                    .setMarginBottom(0d);\n",
      "            div2.setMarginTop(0d)\n",
      "                    .setBorderTop(0d)\n",
      "                    .setPaddingTop(0d)\n",
      "                    .setHeight(0d)\n",
      "                    .setPaddingBottom(0d)\n",
      "                    .setBorderBottom(div2.getBorderBottom() - deltaB);\n",
      "\n",
      "        } else {\n",
      "            double deltaM = sHeight - (getMarginTop() + getBorderTop() + getPaddingTop() +\n",
      "                    getHeight() + getPaddingBottom() + getBorderBottom());\n",
      "            div1.setMarginBottom(deltaM);\n",
      "            div2.setMarginTop(0d)\n",
      "                    .setBorderTop(0d)\n",
      "                    .setPaddingTop(0d)\n",
      "                    .setHeight(0d)\n",
      "                    .setPaddingBottom(0d)\n",
      "                    .setBorderBottom(0d)\n",
      "                    .setMarginBottom(div2.getMarginBottom() - deltaM)\n",
      "                    .setPlaceholder(true);\n",
      "        }\n",
      "        return new Div[]{div1, div2};\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5185\u5bb9\u5206\u5272\u8c03\u6574\n",
      "     * <p>\n",
      "     * \u6839\u636e\u5206\u5272\u9ad8\u5ea6\u8c03\u6574\u4e24\u4e2a\u514b\u9686\u5143\u7d20\uff0c\u8fbe\u6210\u5206\u5272\u5143\u7d20\u7684\u6548\u679c\n",
      "     *\n",
      "     * @param <T>     Div\u5b50\u7c7b\u6cdb\u578b\u53c2\u6570\n",
      "     * @param sHeight \u5206\u5272\u5185\u5bb9\u7684\u9ad8\u5ea6\n",
      "     * @param div1    \u514b\u9686\u5143\u7d201\n",
      "     * @param div2    \u514b\u9686\u5143\u7d202\n",
      "     * @return \u5206\u5272\u8c03\u6574\u540e\u7684\u4e24\u4e2aDiv\n",
      "     */\n",
      "    public <T extends Div> Div[] contentSplitAdjust(double sHeight, T div1, T div2) {\n",
      "        /*\n",
      "         * \u8c03\u6574\u8fb9\u6846\u7b49\u914d\u7f6e\n",
      "         * div1 \u65e0\u4e0b\u8fb9\uff0c\u603b\u9ad8\u5ea6\u4e3a\u5207\u5206\u9ad8\u5ea6\n",
      "         * div2 \u65e0\u4e0a\u8fb9\uff0c\u9ad8\u5ea6\u4e3a\u5269\u4f59\u9ad8\u5ea6\n",
      "         */\n",
      "        // \u51cf\u53bb\u9876\u8fb9\u7684\u5e03\u5c40\u533a\u57df\n",
      "        double h1 = sHeight - (div1.getMarginTop() + div1.getBorderTop() + div1.getPaddingTop());\n",
      "        div1.setHeight(h1)\n",
      "                // \u53d6\u6d88\u4f4e\u8fb9\u7684\u6240\u6709\u5e03\u5c40\n",
      "                .setMarginBottom(0d)\n",
      "                .setBorderBottom(0d)\n",
      "                .setPaddingBottom(0d);\n",
      "\n",
      "        // \u51cf\u53bb\u622a\u65ad\u5185\u5bb9\n",
      "        double h2 = div2.getHeight() - h1;\n",
      "        div2.setHeight(h2)\n",
      "                // \u53d6\u6d88\u9876\u8fb9\u7684\u6240\u6709\u5e03\u5c40\n",
      "                .setMarginTop(0d)\n",
      "                .setBorderTop(0d)\n",
      "                .setPaddingTop(0d);\n",
      "        return new Div[]{div1, div2};\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5143\u7d20\u7c7b\u578b\u540d\u79f0\n",
      "     * <p>\n",
      "     * \u7528\u4e8e\u6807\u8bc6\u5143\u7d20\u7c7b\u578b\uff0c\u9009\u62e9\u5408\u9002\u7684\u5904\u7406\u5668\uff0c\u81ea\u5b9a\u4e49\u5143\u7d20\u8bf7\u91cd\u5199\u8be5\u65b9\u6cd5\n",
      "     * <p>\n",
      "     * \u5173\u8054\u7ed8\u5236\u5668\uff1a{@link org.ofdrw.layout.engine.render.DivRender}\n",
      "     *\n",
      "     * @return \u5143\u7d20\u7c7b\u578b\u540d\u79f0\n",
      "     */\n",
      "    public String elementType() {\n",
      "        return \"Div\";\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u6e32\u67d3\u5b8c\u6210\u56de\u8c03\u4e8b\u4ef6\n",
      "     *\n",
      "     * @return \u5904\u7406\u5668\n",
      "     */\n",
      "    public ElementRenderFinishHandler getOnRenderFinish() {\n",
      "        return renderFinishHandler;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u6e32\u67d3\u5b8c\u6210\u56de\u8c03\u4e8b\u4ef6\n",
      "     * <p>\n",
      "     * \u5728\u8be5\u5904\u7406\u5668\u4e2d\u4f60\u53ef\u4ee5\u5f97\u5230\u5143\u7d20\u5728OFD\u5bb9\u5668\u7684\u4e2d\u6587\u4ef6\u4f4d\u7f6e\u548c\u5bf9\u8c61ID\n",
      "     *\n",
      "     * @param renderFinishHandler \u5904\u7406\u5668\n",
      "     */\n",
      "    public void onRenderFinish(ElementRenderFinishHandler renderFinishHandler) {\n",
      "        this.renderFinishHandler = renderFinishHandler;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return \"Div{\" +\n",
      "                \"backgroundColor=\" + Arrays.toString(backgroundColor) +\n",
      "                \", borderColor=\" + Arrays.toString(borderColor) +\n",
      "                \", width=\" + width +\n",
      "                \", height=\" + height +\n",
      "                \", padding=\" + Arrays.toString(padding) +\n",
      "                \", border=\" + Arrays.toString(border) +\n",
      "                \", margin=\" + Arrays.toString(margin) +\n",
      "                \", x=\" + x +\n",
      "                \", y=\" + y +\n",
      "                \", clear=\" + clear +\n",
      "                \", aFloat=\" + aFloat +\n",
      "                \", left=\" + left +\n",
      "                \", right=\" + right +\n",
      "                \", top=\" + top +\n",
      "                \", opacity=\" + opacity +\n",
      "                \", position=\" + position +\n",
      "                \", integrity=\" + integrity +\n",
      "                \", placeholder=\" + placeholder +\n",
      "                \", layer=\" + layer +\n",
      "                '}';\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.layout.element;\n",
      "\n",
      "import org.junit.jupiter.api.Assertions;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.ofdrw.layout.OFDDoc;\n",
      "import org.ofdrw.layout.element.canvas.Cell;\n",
      "import org.ofdrw.layout.element.canvas.TextAlign;\n",
      "\n",
      "import java.nio.file.Path;\n",
      "import java.nio.file.Paths;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.*;\n",
      "\n",
      "class DivTest {\n",
      "\n",
      "    /**\n",
      "     * Div\u8fb9\u6846\u6837\u5f0f\u6d4b\u8bd5\n",
      "     */\n",
      "    @Test\n",
      "    void setBorderDash() throws Exception {\n",
      "        Path outP = Paths.get(\"target/div-border-dash.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            Div div = new Div(160d, 90d);\n",
      "            div.setBorderColor(\"#FF00000\");\n",
      "            div.setBorder(3d);\n",
      "\n",
      "            // \u8bbe\u7f6e\u8fb9\u6846\u865a\u7ebf \u865a\u7ebf\u957f\u5ea6 1 \u7a7a\u767d\u957f\u5ea6 1\n",
      "            div.setBorderDash(1d);\n",
      "\n",
      "//            // \u8bbe\u7f6e \u504f\u79fb\u91cf 5 \u865a\u7ebf\u957f\u5ea6 2 \u7a7a\u767d\u957f\u5ea6 2\n",
      "//            div.setBorderDash(5d, 2d, 2d);\n",
      "\n",
      "//            // \u8bbe\u7f6e\u8fb9\u6846\u865a\u7ebf \u865a\u7ebf\u957f\u5ea6 1 \u7a7a\u767d\u957f\u5ea6 2\n",
      "//            div.setBorderDash(1d, 2d);\n",
      "\n",
      "//            // \u8bbe\u7f6e\u8fb9\u6846\u865a\u7ebf \u865a\u7ebf\u957f\u5ea6 1 \u7a7a\u767d\u957f\u5ea6 2 \u865a\u7ebf\u957f\u5ea6 8 \u7a7a\u767d\u957f\u5ea6 4\n",
      "//            div.setBorderDash(1d, 2d, 8d, 4d);\n",
      "\n",
      "            // \u8bbe\u7f6e\u8fb9\u6846\u865a\u7ebf\n",
      "\n",
      "            ofdDoc.add(div);\n",
      "        }\n",
      "        System.out.println(\">> \u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath());\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void split() {\n",
      "        Div div = new Div()\n",
      "                .setWidth(400d)\n",
      "                .setHeight(800d)\n",
      "                .setBackgroundColor(0, 0, 0)\n",
      "                .setBorder(1d)\n",
      "                .setMargin(15d)\n",
      "                .setPadding(8d);\n",
      "\n",
      "        Div[] sDivs = div.split(100);\n",
      "        assertEquals(sDivs.length, 2);\n",
      "        Div d1 = sDivs[0];\n",
      "        Div d2 = sDivs[1];\n",
      "        int h1 = 100 - 1 - 15 - 8;\n",
      "        assertEquals(d1.getHeight(), h1);\n",
      "        assertEquals(d2.getHeight(), 800d - h1);\n",
      "\n",
      "        assertEquals(d1.getPaddingBottom(), 0);\n",
      "        assertEquals(d1.getBorderBottom(), 0);\n",
      "        assertEquals(d1.getMarginBottom(), 0);\n",
      "\n",
      "        assertEquals(d2.getPaddingTop(), 0);\n",
      "        assertEquals(d2.getBorderTop(), 0);\n",
      "        assertEquals(d2.getMarginTop(), 0);\n",
      "\n",
      "        div = new Div()\n",
      "                .setBackgroundColor(0, 0, 0)\n",
      "                .setWidth(300d)\n",
      "                .setHeight(100d)\n",
      "                .setPadding(6d)\n",
      "                .setBorder(8d)\n",
      "                .setMargin(10d);\n",
      "\n",
      "\n",
      "        Div[] sp = div.split(5);\n",
      "        assertEquals(sp[0].getMarginTop(), 5);\n",
      "        assertEquals(sp[1].getMarginTop(), 5);\n",
      "\n",
      "        sp = div.split(10);\n",
      "        assertEquals(sp[0].getMarginTop(), 10);\n",
      "        assertEquals(sp[1].getMarginTop(), 0);\n",
      "\n",
      "        sp = div.split(14);\n",
      "        assertEquals(sp[0].getMarginTop(), 10);\n",
      "        assertEquals(sp[0].getBorderTop(), 4);\n",
      "        assertEquals(sp[1].getMarginTop(), 0);\n",
      "        assertEquals(sp[1].getBorderTop(), 4);\n",
      "\n",
      "        sp = div.split(21);\n",
      "        assertEquals(sp[0].getMarginTop(), 10);\n",
      "        assertEquals(sp[0].getBorderTop(), 8);\n",
      "        assertEquals(sp[0].getPaddingTop(), 3);\n",
      "        assertEquals(sp[1].getMarginTop(), 0);\n",
      "        assertEquals(sp[1].getBorderTop(), 0);\n",
      "        assertEquals(sp[1].getPaddingTop(), 3);\n",
      "\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "Div::::isNoBorder()": [
        191,
        196
      ],
      "Div::::isBlockElement()": [
        207,
        219
      ],
      "Div::::getOpacity()": [
        226,
        228
      ],
      "Div::::setOpacity(java.lang.Double)": [
        238,
        247
      ],
      "Div::::getBorderColor()": [
        254,
        256
      ],
      "Div::::setBorderColor(int,int,int)": [
        266,
        269
      ],
      "Div::::setBorderColor(int[])": [
        277,
        280
      ],
      "Div::::setBorderColor(java.lang.String)": [
        288,
        295
      ],
      "Div::::getTop()": [
        297,
        299
      ],
      "Div::::setTop(java.lang.Double)": [
        301,
        304
      ],
      "Div::::getPosition()": [
        306,
        308
      ],
      "Div::::setPosition(org.ofdrw.layout.element.Position)": [
        310,
        313
      ],
      "Div::::getBackgroundColor()": [
        315,
        317
      ],
      "Div::::setBackgroundColor(int,int,int)": [
        327,
        330
      ],
      "Div::::setBackgroundColor(java.lang.String)": [
        338,
        345
      ],
      "Div::::setBackgroundColor(int[])": [
        354,
        357
      ],
      "Div::::getWidth()": [
        359,
        361
      ],
      "Div::::setWidth(java.lang.Double)": [
        363,
        366
      ],
      "Div::::getHeight()": [
        368,
        370
      ],
      "Div::::setHeight(java.lang.Double)": [
        372,
        375
      ],
      "Div::::getPadding()": [
        384,
        386
      ],
      "Div::::setPadding(java.lang.Double[])": [
        403,
        406
      ],
      "Div::::getBorder()": [
        408,
        410
      ],
      "Div::::setBorder(java.lang.Double[])": [
        427,
        430
      ],
      "Div::::setBorderDash(java.lang.Double[])": [
        446,
        469
      ],
      "Div::::getBorderDash()": [
        478,
        480
      ],
      "Div::::getMargin()": [
        482,
        484
      ],
      "Div::::setMargin(java.lang.Double[])": [
        501,
        504
      ],
      "Div::::getMarginTop()": [
        506,
        508
      ],
      "Div::::setMarginTop(java.lang.Double)": [
        510,
        513
      ],
      "Div::::getMarginRight()": [
        515,
        517
      ],
      "Div::::setMarginRight(java.lang.Double)": [
        519,
        522
      ],
      "Div::::getMarginBottom()": [
        524,
        526
      ],
      "Div::::setMarginBottom(java.lang.Double)": [
        528,
        531
      ],
      "Div::::getMarginLeft()": [
        533,
        535
      ],
      "Div::::setMarginLeft(java.lang.Double)": [
        537,
        540
      ],
      "Div::::getBorderTop()": [
        542,
        544
      ],
      "Div::::setBorderTop(java.lang.Double)": [
        546,
        549
      ],
      "Div::::getBorderRight()": [
        551,
        553
      ],
      "Div::::setBorderRight(java.lang.Double)": [
        555,
        558
      ],
      "Div::::getBorderBottom()": [
        560,
        562
      ],
      "Div::::setBorderBottom(java.lang.Double)": [
        564,
        567
      ],
      "Div::::getBorderLeft()": [
        569,
        571
      ],
      "Div::::setBorderLeft(java.lang.Double)": [
        573,
        576
      ],
      "Div::::getPaddingTop()": [
        579,
        581
      ],
      "Div::::setPaddingTop(java.lang.Double)": [
        583,
        586
      ],
      "Div::::getPaddingRight()": [
        588,
        590
      ],
      "Div::::setPaddingRight(java.lang.Double)": [
        592,
        595
      ],
      "Div::::getPaddingBottom()": [
        597,
        599
      ],
      "Div::::setPaddingBottom(java.lang.Double)": [
        601,
        604
      ],
      "Div::::getPaddingLeft()": [
        606,
        608
      ],
      "Div::::setPaddingLeft(java.lang.Double)": [
        610,
        613
      ],
      "Div::::getX()": [
        616,
        618
      ],
      "Div::::setX(java.lang.Double)": [
        620,
        623
      ],
      "Div::::getY()": [
        625,
        627
      ],
      "Div::::setY(java.lang.Double)": [
        629,
        632
      ],
      "Div::::setXY(java.lang.Double,java.lang.Double)": [
        641,
        645
      ],
      "Div::::setBox(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)": [
        656,
        662
      ],
      "Div::::getClear()": [
        664,
        666
      ],
      "Div::::setClear(org.ofdrw.layout.element.Clear)": [
        668,
        671
      ],
      "Div::::getFloat()": [
        673,
        675
      ],
      "Div::::setFloat(org.ofdrw.layout.element.AFloat)": [
        686,
        689
      ],
      "Div::::getLeft()": [
        691,
        693
      ],
      "Div::::setLeft(java.lang.Double)": [
        695,
        698
      ],
      "Div::::getRight()": [
        700,
        702
      ],
      "Div::::setRight(java.lang.Double)": [
        704,
        707
      ],
      "Div::::isIntegrity()": [
        714,
        716
      ],
      "Div::::setIntegrity(java.lang.Boolean)": [
        718,
        721
      ],
      "Div::::widthPlus()": [
        726,
        730
      ],
      "Div::::heightPlus()": [
        735,
        739
      ],
      "Div::::doPrepare(java.lang.Double)": [
        747,
        764
      ],
      "Div::::box()": [
        776,
        781
      ],
      "Div::::getLayer()": [
        790,
        792
      ],
      "Div::::isPlaceholder()": [
        810,
        812
      ],
      "Div::::setPlaceholder(boolean)": [
        820,
        823
      ],
      "Div::::setDisplay(org.ofdrw.layout.element.Display)": [
        831,
        839
      ],
      "Div::::getDisplay()": [
        846,
        855
      ],
      "Div::::placeholder(double,double,org.ofdrw.layout.element.AFloat)": [
        868,
        876
      ],
      "Div::::placeholder(org.ofdrw.layout.Rectangle,org.ofdrw.layout.element.AFloat)": [
        885,
        887
      ],
      "Div::::clone()": [
        895,
        899
      ],
      "Div::::copyTo(T)": [
        908,
        930
      ],
      "Div::::split(double)": [
        946,
        1047
      ],
      "Div::::contentSplitAdjust(double,T,T)": [
        1060,
        1082
      ],
      "Div::::elementType()": [
        1093,
        1095
      ],
      "Div::::getOnRenderFinish()": [
        1102,
        1104
      ],
      "Div::::onRenderFinish(org.ofdrw.layout.handler.ElementRenderFinishHandler)": [
        1113,
        1115
      ],
      "Div::::toString()": [
        1117,
        1140
      ]
    },
    "test_method_lines_dic": {
      "DivTest::::setBorderDash()": [
        19,
        45
      ],
      "DivTest::::split()": [
        47,
        104
      ]
    },
    "reverse_method_lines_dic": {
      "191": "Div::::isNoBorder()",
      "192": "Div::::isNoBorder()",
      "193": "Div::::isNoBorder()",
      "194": "Div::::isNoBorder()",
      "195": "Div::::isNoBorder()",
      "196": "Div::::isNoBorder()",
      "207": "Div::::isBlockElement()",
      "208": "Div::::isBlockElement()",
      "209": "Div::::isBlockElement()",
      "210": "Div::::isBlockElement()",
      "211": "Div::::isBlockElement()",
      "212": "Div::::isBlockElement()",
      "213": "Div::::isBlockElement()",
      "214": "Div::::isBlockElement()",
      "215": "Div::::isBlockElement()",
      "216": "Div::::isBlockElement()",
      "217": "Div::::isBlockElement()",
      "218": "Div::::isBlockElement()",
      "219": "Div::::isBlockElement()",
      "226": "Div::::getOpacity()",
      "227": "Div::::getOpacity()",
      "228": "Div::::getOpacity()",
      "238": "Div::::setOpacity(java.lang.Double)",
      "239": "Div::::setOpacity(java.lang.Double)",
      "240": "Div::::setOpacity(java.lang.Double)",
      "241": "Div::::setOpacity(java.lang.Double)",
      "242": "Div::::setOpacity(java.lang.Double)",
      "243": "Div::::setOpacity(java.lang.Double)",
      "244": "Div::::setOpacity(java.lang.Double)",
      "245": "Div::::setOpacity(java.lang.Double)",
      "246": "Div::::setOpacity(java.lang.Double)",
      "247": "Div::::setOpacity(java.lang.Double)",
      "254": "Div::::getBorderColor()",
      "255": "Div::::getBorderColor()",
      "256": "Div::::getBorderColor()",
      "266": "Div::::setBorderColor(int,int,int)",
      "267": "Div::::setBorderColor(int,int,int)",
      "268": "Div::::setBorderColor(int,int,int)",
      "269": "Div::::setBorderColor(int,int,int)",
      "277": "Div::::setBorderColor(int[])",
      "278": "Div::::setBorderColor(int[])",
      "279": "Div::::setBorderColor(int[])",
      "280": "Div::::setBorderColor(int[])",
      "288": "Div::::setBorderColor(java.lang.String)",
      "289": "Div::::setBorderColor(java.lang.String)",
      "290": "Div::::setBorderColor(java.lang.String)",
      "291": "Div::::setBorderColor(java.lang.String)",
      "292": "Div::::setBorderColor(java.lang.String)",
      "293": "Div::::setBorderColor(java.lang.String)",
      "294": "Div::::setBorderColor(java.lang.String)",
      "295": "Div::::setBorderColor(java.lang.String)",
      "297": "Div::::getTop()",
      "298": "Div::::getTop()",
      "299": "Div::::getTop()",
      "301": "Div::::setTop(java.lang.Double)",
      "302": "Div::::setTop(java.lang.Double)",
      "303": "Div::::setTop(java.lang.Double)",
      "304": "Div::::setTop(java.lang.Double)",
      "306": "Div::::getPosition()",
      "307": "Div::::getPosition()",
      "308": "Div::::getPosition()",
      "310": "Div::::setPosition(org.ofdrw.layout.element.Position)",
      "311": "Div::::setPosition(org.ofdrw.layout.element.Position)",
      "312": "Div::::setPosition(org.ofdrw.layout.element.Position)",
      "313": "Div::::setPosition(org.ofdrw.layout.element.Position)",
      "315": "Div::::getBackgroundColor()",
      "316": "Div::::getBackgroundColor()",
      "317": "Div::::getBackgroundColor()",
      "327": "Div::::setBackgroundColor(int,int,int)",
      "328": "Div::::setBackgroundColor(int,int,int)",
      "329": "Div::::setBackgroundColor(int,int,int)",
      "330": "Div::::setBackgroundColor(int,int,int)",
      "338": "Div::::setBackgroundColor(java.lang.String)",
      "339": "Div::::setBackgroundColor(java.lang.String)",
      "340": "Div::::setBackgroundColor(java.lang.String)",
      "341": "Div::::setBackgroundColor(java.lang.String)",
      "342": "Div::::setBackgroundColor(java.lang.String)",
      "343": "Div::::setBackgroundColor(java.lang.String)",
      "344": "Div::::setBackgroundColor(java.lang.String)",
      "345": "Div::::setBackgroundColor(java.lang.String)",
      "354": "Div::::setBackgroundColor(int[])",
      "355": "Div::::setBackgroundColor(int[])",
      "356": "Div::::setBackgroundColor(int[])",
      "357": "Div::::setBackgroundColor(int[])",
      "359": "Div::::getWidth()",
      "360": "Div::::getWidth()",
      "361": "Div::::getWidth()",
      "363": "Div::::setWidth(java.lang.Double)",
      "364": "Div::::setWidth(java.lang.Double)",
      "365": "Div::::setWidth(java.lang.Double)",
      "366": "Div::::setWidth(java.lang.Double)",
      "368": "Div::::getHeight()",
      "369": "Div::::getHeight()",
      "370": "Div::::getHeight()",
      "372": "Div::::setHeight(java.lang.Double)",
      "373": "Div::::setHeight(java.lang.Double)",
      "374": "Div::::setHeight(java.lang.Double)",
      "375": "Div::::setHeight(java.lang.Double)",
      "384": "Div::::getPadding()",
      "385": "Div::::getPadding()",
      "386": "Div::::getPadding()",
      "403": "Div::::setPadding(java.lang.Double[])",
      "404": "Div::::setPadding(java.lang.Double[])",
      "405": "Div::::setPadding(java.lang.Double[])",
      "406": "Div::::setPadding(java.lang.Double[])",
      "408": "Div::::getBorder()",
      "409": "Div::::getBorder()",
      "410": "Div::::getBorder()",
      "427": "Div::::setBorder(java.lang.Double[])",
      "428": "Div::::setBorder(java.lang.Double[])",
      "429": "Div::::setBorder(java.lang.Double[])",
      "430": "Div::::setBorder(java.lang.Double[])",
      "446": "Div::::setBorderDash(java.lang.Double[])",
      "447": "Div::::setBorderDash(java.lang.Double[])",
      "448": "Div::::setBorderDash(java.lang.Double[])",
      "449": "Div::::setBorderDash(java.lang.Double[])",
      "450": "Div::::setBorderDash(java.lang.Double[])",
      "451": "Div::::setBorderDash(java.lang.Double[])",
      "452": "Div::::setBorderDash(java.lang.Double[])",
      "453": "Div::::setBorderDash(java.lang.Double[])",
      "454": "Div::::setBorderDash(java.lang.Double[])",
      "455": "Div::::setBorderDash(java.lang.Double[])",
      "456": "Div::::setBorderDash(java.lang.Double[])",
      "457": "Div::::setBorderDash(java.lang.Double[])",
      "458": "Div::::setBorderDash(java.lang.Double[])",
      "459": "Div::::setBorderDash(java.lang.Double[])",
      "460": "Div::::setBorderDash(java.lang.Double[])",
      "461": "Div::::setBorderDash(java.lang.Double[])",
      "462": "Div::::setBorderDash(java.lang.Double[])",
      "463": "Div::::setBorderDash(java.lang.Double[])",
      "464": "Div::::setBorderDash(java.lang.Double[])",
      "465": "Div::::setBorderDash(java.lang.Double[])",
      "466": "Div::::setBorderDash(java.lang.Double[])",
      "467": "Div::::setBorderDash(java.lang.Double[])",
      "468": "Div::::setBorderDash(java.lang.Double[])",
      "469": "Div::::setBorderDash(java.lang.Double[])",
      "478": "Div::::getBorderDash()",
      "479": "Div::::getBorderDash()",
      "480": "Div::::getBorderDash()",
      "482": "Div::::getMargin()",
      "483": "Div::::getMargin()",
      "484": "Div::::getMargin()",
      "501": "Div::::setMargin(java.lang.Double[])",
      "502": "Div::::setMargin(java.lang.Double[])",
      "503": "Div::::setMargin(java.lang.Double[])",
      "504": "Div::::setMargin(java.lang.Double[])",
      "506": "Div::::getMarginTop()",
      "507": "Div::::getMarginTop()",
      "508": "Div::::getMarginTop()",
      "510": "Div::::setMarginTop(java.lang.Double)",
      "511": "Div::::setMarginTop(java.lang.Double)",
      "512": "Div::::setMarginTop(java.lang.Double)",
      "513": "Div::::setMarginTop(java.lang.Double)",
      "515": "Div::::getMarginRight()",
      "516": "Div::::getMarginRight()",
      "517": "Div::::getMarginRight()",
      "519": "Div::::setMarginRight(java.lang.Double)",
      "520": "Div::::setMarginRight(java.lang.Double)",
      "521": "Div::::setMarginRight(java.lang.Double)",
      "522": "Div::::setMarginRight(java.lang.Double)",
      "524": "Div::::getMarginBottom()",
      "525": "Div::::getMarginBottom()",
      "526": "Div::::getMarginBottom()",
      "528": "Div::::setMarginBottom(java.lang.Double)",
      "529": "Div::::setMarginBottom(java.lang.Double)",
      "530": "Div::::setMarginBottom(java.lang.Double)",
      "531": "Div::::setMarginBottom(java.lang.Double)",
      "533": "Div::::getMarginLeft()",
      "534": "Div::::getMarginLeft()",
      "535": "Div::::getMarginLeft()",
      "537": "Div::::setMarginLeft(java.lang.Double)",
      "538": "Div::::setMarginLeft(java.lang.Double)",
      "539": "Div::::setMarginLeft(java.lang.Double)",
      "540": "Div::::setMarginLeft(java.lang.Double)",
      "542": "Div::::getBorderTop()",
      "543": "Div::::getBorderTop()",
      "544": "Div::::getBorderTop()",
      "546": "Div::::setBorderTop(java.lang.Double)",
      "547": "Div::::setBorderTop(java.lang.Double)",
      "548": "Div::::setBorderTop(java.lang.Double)",
      "549": "Div::::setBorderTop(java.lang.Double)",
      "551": "Div::::getBorderRight()",
      "552": "Div::::getBorderRight()",
      "553": "Div::::getBorderRight()",
      "555": "Div::::setBorderRight(java.lang.Double)",
      "556": "Div::::setBorderRight(java.lang.Double)",
      "557": "Div::::setBorderRight(java.lang.Double)",
      "558": "Div::::setBorderRight(java.lang.Double)",
      "560": "Div::::getBorderBottom()",
      "561": "Div::::getBorderBottom()",
      "562": "Div::::getBorderBottom()",
      "564": "Div::::setBorderBottom(java.lang.Double)",
      "565": "Div::::setBorderBottom(java.lang.Double)",
      "566": "Div::::setBorderBottom(java.lang.Double)",
      "567": "Div::::setBorderBottom(java.lang.Double)",
      "569": "Div::::getBorderLeft()",
      "570": "Div::::getBorderLeft()",
      "571": "Div::::getBorderLeft()",
      "573": "Div::::setBorderLeft(java.lang.Double)",
      "574": "Div::::setBorderLeft(java.lang.Double)",
      "575": "Div::::setBorderLeft(java.lang.Double)",
      "576": "Div::::setBorderLeft(java.lang.Double)",
      "579": "Div::::getPaddingTop()",
      "580": "Div::::getPaddingTop()",
      "581": "Div::::getPaddingTop()",
      "583": "Div::::setPaddingTop(java.lang.Double)",
      "584": "Div::::setPaddingTop(java.lang.Double)",
      "585": "Div::::setPaddingTop(java.lang.Double)",
      "586": "Div::::setPaddingTop(java.lang.Double)",
      "588": "Div::::getPaddingRight()",
      "589": "Div::::getPaddingRight()",
      "590": "Div::::getPaddingRight()",
      "592": "Div::::setPaddingRight(java.lang.Double)",
      "593": "Div::::setPaddingRight(java.lang.Double)",
      "594": "Div::::setPaddingRight(java.lang.Double)",
      "595": "Div::::setPaddingRight(java.lang.Double)",
      "597": "Div::::getPaddingBottom()",
      "598": "Div::::getPaddingBottom()",
      "599": "Div::::getPaddingBottom()",
      "601": "Div::::setPaddingBottom(java.lang.Double)",
      "602": "Div::::setPaddingBottom(java.lang.Double)",
      "603": "Div::::setPaddingBottom(java.lang.Double)",
      "604": "Div::::setPaddingBottom(java.lang.Double)",
      "606": "Div::::getPaddingLeft()",
      "607": "Div::::getPaddingLeft()",
      "608": "Div::::getPaddingLeft()",
      "610": "Div::::setPaddingLeft(java.lang.Double)",
      "611": "Div::::setPaddingLeft(java.lang.Double)",
      "612": "Div::::setPaddingLeft(java.lang.Double)",
      "613": "Div::::setPaddingLeft(java.lang.Double)",
      "616": "Div::::getX()",
      "617": "Div::::getX()",
      "618": "Div::::getX()",
      "620": "Div::::setX(java.lang.Double)",
      "621": "Div::::setX(java.lang.Double)",
      "622": "Div::::setX(java.lang.Double)",
      "623": "Div::::setX(java.lang.Double)",
      "625": "Div::::getY()",
      "626": "Div::::getY()",
      "627": "Div::::getY()",
      "629": "Div::::setY(java.lang.Double)",
      "630": "Div::::setY(java.lang.Double)",
      "631": "Div::::setY(java.lang.Double)",
      "632": "Div::::setY(java.lang.Double)",
      "641": "Div::::setXY(java.lang.Double,java.lang.Double)",
      "642": "Div::::setXY(java.lang.Double,java.lang.Double)",
      "643": "Div::::setXY(java.lang.Double,java.lang.Double)",
      "644": "Div::::setXY(java.lang.Double,java.lang.Double)",
      "645": "Div::::setXY(java.lang.Double,java.lang.Double)",
      "656": "Div::::setBox(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)",
      "657": "Div::::setBox(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)",
      "658": "Div::::setBox(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)",
      "659": "Div::::setBox(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)",
      "660": "Div::::setBox(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)",
      "661": "Div::::setBox(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)",
      "662": "Div::::setBox(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)",
      "664": "Div::::getClear()",
      "665": "Div::::getClear()",
      "666": "Div::::getClear()",
      "668": "Div::::setClear(org.ofdrw.layout.element.Clear)",
      "669": "Div::::setClear(org.ofdrw.layout.element.Clear)",
      "670": "Div::::setClear(org.ofdrw.layout.element.Clear)",
      "671": "Div::::setClear(org.ofdrw.layout.element.Clear)",
      "673": "Div::::getFloat()",
      "674": "Div::::getFloat()",
      "675": "Div::::getFloat()",
      "686": "Div::::setFloat(org.ofdrw.layout.element.AFloat)",
      "687": "Div::::setFloat(org.ofdrw.layout.element.AFloat)",
      "688": "Div::::setFloat(org.ofdrw.layout.element.AFloat)",
      "689": "Div::::setFloat(org.ofdrw.layout.element.AFloat)",
      "691": "Div::::getLeft()",
      "692": "Div::::getLeft()",
      "693": "Div::::getLeft()",
      "695": "Div::::setLeft(java.lang.Double)",
      "696": "Div::::setLeft(java.lang.Double)",
      "697": "Div::::setLeft(java.lang.Double)",
      "698": "Div::::setLeft(java.lang.Double)",
      "700": "Div::::getRight()",
      "701": "Div::::getRight()",
      "702": "Div::::getRight()",
      "704": "Div::::setRight(java.lang.Double)",
      "705": "Div::::setRight(java.lang.Double)",
      "706": "Div::::setRight(java.lang.Double)",
      "707": "Div::::setRight(java.lang.Double)",
      "714": "Div::::isIntegrity()",
      "715": "Div::::isIntegrity()",
      "716": "Div::::isIntegrity()",
      "718": "Div::::setIntegrity(java.lang.Boolean)",
      "719": "Div::::setIntegrity(java.lang.Boolean)",
      "720": "Div::::setIntegrity(java.lang.Boolean)",
      "721": "Div::::setIntegrity(java.lang.Boolean)",
      "726": "Div::::widthPlus()",
      "727": "Div::::widthPlus()",
      "728": "Div::::widthPlus()",
      "729": "Div::::widthPlus()",
      "730": "Div::::widthPlus()",
      "735": "Div::::heightPlus()",
      "736": "Div::::heightPlus()",
      "737": "Div::::heightPlus()",
      "738": "Div::::heightPlus()",
      "739": "Div::::heightPlus()",
      "747": "Div::::doPrepare(java.lang.Double)",
      "748": "Div::::doPrepare(java.lang.Double)",
      "749": "Div::::doPrepare(java.lang.Double)",
      "750": "Div::::doPrepare(java.lang.Double)",
      "751": "Div::::doPrepare(java.lang.Double)",
      "752": "Div::::doPrepare(java.lang.Double)",
      "753": "Div::::doPrepare(java.lang.Double)",
      "754": "Div::::doPrepare(java.lang.Double)",
      "755": "Div::::doPrepare(java.lang.Double)",
      "756": "Div::::doPrepare(java.lang.Double)",
      "757": "Div::::doPrepare(java.lang.Double)",
      "758": "Div::::doPrepare(java.lang.Double)",
      "759": "Div::::doPrepare(java.lang.Double)",
      "760": "Div::::doPrepare(java.lang.Double)",
      "761": "Div::::doPrepare(java.lang.Double)",
      "762": "Div::::doPrepare(java.lang.Double)",
      "763": "Div::::doPrepare(java.lang.Double)",
      "764": "Div::::doPrepare(java.lang.Double)",
      "776": "Div::::box()",
      "777": "Div::::box()",
      "778": "Div::::box()",
      "779": "Div::::box()",
      "780": "Div::::box()",
      "781": "Div::::box()",
      "790": "Div::::getLayer()",
      "791": "Div::::getLayer()",
      "792": "Div::::getLayer()",
      "810": "Div::::isPlaceholder()",
      "811": "Div::::isPlaceholder()",
      "812": "Div::::isPlaceholder()",
      "820": "Div::::setPlaceholder(boolean)",
      "821": "Div::::setPlaceholder(boolean)",
      "822": "Div::::setPlaceholder(boolean)",
      "823": "Div::::setPlaceholder(boolean)",
      "831": "Div::::setDisplay(org.ofdrw.layout.element.Display)",
      "832": "Div::::setDisplay(org.ofdrw.layout.element.Display)",
      "833": "Div::::setDisplay(org.ofdrw.layout.element.Display)",
      "834": "Div::::setDisplay(org.ofdrw.layout.element.Display)",
      "835": "Div::::setDisplay(org.ofdrw.layout.element.Display)",
      "836": "Div::::setDisplay(org.ofdrw.layout.element.Display)",
      "837": "Div::::setDisplay(org.ofdrw.layout.element.Display)",
      "838": "Div::::setDisplay(org.ofdrw.layout.element.Display)",
      "839": "Div::::setDisplay(org.ofdrw.layout.element.Display)",
      "846": "Div::::getDisplay()",
      "847": "Div::::getDisplay()",
      "848": "Div::::getDisplay()",
      "849": "Div::::getDisplay()",
      "850": "Div::::getDisplay()",
      "851": "Div::::getDisplay()",
      "852": "Div::::getDisplay()",
      "853": "Div::::getDisplay()",
      "854": "Div::::getDisplay()",
      "855": "Div::::getDisplay()",
      "868": "Div::::placeholder(double,double,org.ofdrw.layout.element.AFloat)",
      "869": "Div::::placeholder(double,double,org.ofdrw.layout.element.AFloat)",
      "870": "Div::::placeholder(double,double,org.ofdrw.layout.element.AFloat)",
      "871": "Div::::placeholder(double,double,org.ofdrw.layout.element.AFloat)",
      "872": "Div::::placeholder(double,double,org.ofdrw.layout.element.AFloat)",
      "873": "Div::::placeholder(double,double,org.ofdrw.layout.element.AFloat)",
      "874": "Div::::placeholder(double,double,org.ofdrw.layout.element.AFloat)",
      "875": "Div::::placeholder(double,double,org.ofdrw.layout.element.AFloat)",
      "876": "Div::::placeholder(double,double,org.ofdrw.layout.element.AFloat)",
      "885": "Div::::placeholder(org.ofdrw.layout.Rectangle,org.ofdrw.layout.element.AFloat)",
      "886": "Div::::placeholder(org.ofdrw.layout.Rectangle,org.ofdrw.layout.element.AFloat)",
      "887": "Div::::placeholder(org.ofdrw.layout.Rectangle,org.ofdrw.layout.element.AFloat)",
      "895": "Div::::clone()",
      "896": "Div::::clone()",
      "897": "Div::::clone()",
      "898": "Div::::clone()",
      "899": "Div::::clone()",
      "908": "Div::::copyTo(T)",
      "909": "Div::::copyTo(T)",
      "910": "Div::::copyTo(T)",
      "911": "Div::::copyTo(T)",
      "912": "Div::::copyTo(T)",
      "913": "Div::::copyTo(T)",
      "914": "Div::::copyTo(T)",
      "915": "Div::::copyTo(T)",
      "916": "Div::::copyTo(T)",
      "917": "Div::::copyTo(T)",
      "918": "Div::::copyTo(T)",
      "919": "Div::::copyTo(T)",
      "920": "Div::::copyTo(T)",
      "921": "Div::::copyTo(T)",
      "922": "Div::::copyTo(T)",
      "923": "Div::::copyTo(T)",
      "924": "Div::::copyTo(T)",
      "925": "Div::::copyTo(T)",
      "926": "Div::::copyTo(T)",
      "927": "Div::::copyTo(T)",
      "928": "Div::::copyTo(T)",
      "929": "Div::::copyTo(T)",
      "930": "Div::::copyTo(T)",
      "946": "Div::::split(double)",
      "947": "Div::::split(double)",
      "948": "Div::::split(double)",
      "949": "Div::::split(double)",
      "950": "Div::::split(double)",
      "951": "Div::::split(double)",
      "952": "Div::::split(double)",
      "953": "Div::::split(double)",
      "954": "Div::::split(double)",
      "955": "Div::::split(double)",
      "956": "Div::::split(double)",
      "957": "Div::::split(double)",
      "958": "Div::::split(double)",
      "959": "Div::::split(double)",
      "960": "Div::::split(double)",
      "961": "Div::::split(double)",
      "962": "Div::::split(double)",
      "963": "Div::::split(double)",
      "964": "Div::::split(double)",
      "965": "Div::::split(double)",
      "966": "Div::::split(double)",
      "967": "Div::::split(double)",
      "968": "Div::::split(double)",
      "969": "Div::::split(double)",
      "970": "Div::::split(double)",
      "971": "Div::::split(double)",
      "972": "Div::::split(double)",
      "973": "Div::::split(double)",
      "974": "Div::::split(double)",
      "975": "Div::::split(double)",
      "976": "Div::::split(double)",
      "977": "Div::::split(double)",
      "978": "Div::::split(double)",
      "979": "Div::::split(double)",
      "980": "Div::::split(double)",
      "981": "Div::::split(double)",
      "982": "Div::::split(double)",
      "983": "Div::::split(double)",
      "984": "Div::::split(double)",
      "985": "Div::::split(double)",
      "986": "Div::::split(double)",
      "987": "Div::::split(double)",
      "988": "Div::::split(double)",
      "989": "Div::::split(double)",
      "990": "Div::::split(double)",
      "991": "Div::::split(double)",
      "992": "Div::::split(double)",
      "993": "Div::::split(double)",
      "994": "Div::::split(double)",
      "995": "Div::::split(double)",
      "996": "Div::::split(double)",
      "997": "Div::::split(double)",
      "998": "Div::::split(double)",
      "999": "Div::::split(double)",
      "1000": "Div::::split(double)",
      "1001": "Div::::split(double)",
      "1002": "Div::::split(double)",
      "1003": "Div::::split(double)",
      "1004": "Div::::split(double)",
      "1005": "Div::::split(double)",
      "1006": "Div::::split(double)",
      "1007": "Div::::split(double)",
      "1008": "Div::::split(double)",
      "1009": "Div::::split(double)",
      "1010": "Div::::split(double)",
      "1011": "Div::::split(double)",
      "1012": "Div::::split(double)",
      "1013": "Div::::split(double)",
      "1014": "Div::::split(double)",
      "1015": "Div::::split(double)",
      "1016": "Div::::split(double)",
      "1017": "Div::::split(double)",
      "1018": "Div::::split(double)",
      "1019": "Div::::split(double)",
      "1020": "Div::::split(double)",
      "1021": "Div::::split(double)",
      "1022": "Div::::split(double)",
      "1023": "Div::::split(double)",
      "1024": "Div::::split(double)",
      "1025": "Div::::split(double)",
      "1026": "Div::::split(double)",
      "1027": "Div::::split(double)",
      "1028": "Div::::split(double)",
      "1029": "Div::::split(double)",
      "1030": "Div::::split(double)",
      "1031": "Div::::split(double)",
      "1032": "Div::::split(double)",
      "1033": "Div::::split(double)",
      "1034": "Div::::split(double)",
      "1035": "Div::::split(double)",
      "1036": "Div::::split(double)",
      "1037": "Div::::split(double)",
      "1038": "Div::::split(double)",
      "1039": "Div::::split(double)",
      "1040": "Div::::split(double)",
      "1041": "Div::::split(double)",
      "1042": "Div::::split(double)",
      "1043": "Div::::split(double)",
      "1044": "Div::::split(double)",
      "1045": "Div::::split(double)",
      "1046": "Div::::split(double)",
      "1047": "Div::::split(double)",
      "1060": "Div::::contentSplitAdjust(double,T,T)",
      "1061": "Div::::contentSplitAdjust(double,T,T)",
      "1062": "Div::::contentSplitAdjust(double,T,T)",
      "1063": "Div::::contentSplitAdjust(double,T,T)",
      "1064": "Div::::contentSplitAdjust(double,T,T)",
      "1065": "Div::::contentSplitAdjust(double,T,T)",
      "1066": "Div::::contentSplitAdjust(double,T,T)",
      "1067": "Div::::contentSplitAdjust(double,T,T)",
      "1068": "Div::::contentSplitAdjust(double,T,T)",
      "1069": "Div::::contentSplitAdjust(double,T,T)",
      "1070": "Div::::contentSplitAdjust(double,T,T)",
      "1071": "Div::::contentSplitAdjust(double,T,T)",
      "1072": "Div::::contentSplitAdjust(double,T,T)",
      "1073": "Div::::contentSplitAdjust(double,T,T)",
      "1074": "Div::::contentSplitAdjust(double,T,T)",
      "1075": "Div::::contentSplitAdjust(double,T,T)",
      "1076": "Div::::contentSplitAdjust(double,T,T)",
      "1077": "Div::::contentSplitAdjust(double,T,T)",
      "1078": "Div::::contentSplitAdjust(double,T,T)",
      "1079": "Div::::contentSplitAdjust(double,T,T)",
      "1080": "Div::::contentSplitAdjust(double,T,T)",
      "1081": "Div::::contentSplitAdjust(double,T,T)",
      "1082": "Div::::contentSplitAdjust(double,T,T)",
      "1093": "Div::::elementType()",
      "1094": "Div::::elementType()",
      "1095": "Div::::elementType()",
      "1102": "Div::::getOnRenderFinish()",
      "1103": "Div::::getOnRenderFinish()",
      "1104": "Div::::getOnRenderFinish()",
      "1113": "Div::::onRenderFinish(org.ofdrw.layout.handler.ElementRenderFinishHandler)",
      "1114": "Div::::onRenderFinish(org.ofdrw.layout.handler.ElementRenderFinishHandler)",
      "1115": "Div::::onRenderFinish(org.ofdrw.layout.handler.ElementRenderFinishHandler)",
      "1117": "Div::::toString()",
      "1118": "Div::::toString()",
      "1119": "Div::::toString()",
      "1120": "Div::::toString()",
      "1121": "Div::::toString()",
      "1122": "Div::::toString()",
      "1123": "Div::::toString()",
      "1124": "Div::::toString()",
      "1125": "Div::::toString()",
      "1126": "Div::::toString()",
      "1127": "Div::::toString()",
      "1128": "Div::::toString()",
      "1129": "Div::::toString()",
      "1130": "Div::::toString()",
      "1131": "Div::::toString()",
      "1132": "Div::::toString()",
      "1133": "Div::::toString()",
      "1134": "Div::::toString()",
      "1135": "Div::::toString()",
      "1136": "Div::::toString()",
      "1137": "Div::::toString()",
      "1138": "Div::::toString()",
      "1139": "Div::::toString()",
      "1140": "Div::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "19": "DivTest::::setBorderDash()",
      "20": "DivTest::::setBorderDash()",
      "21": "DivTest::::setBorderDash()",
      "22": "DivTest::::setBorderDash()",
      "23": "DivTest::::setBorderDash()",
      "24": "DivTest::::setBorderDash()",
      "25": "DivTest::::setBorderDash()",
      "26": "DivTest::::setBorderDash()",
      "27": "DivTest::::setBorderDash()",
      "28": "DivTest::::setBorderDash()",
      "29": "DivTest::::setBorderDash()",
      "30": "DivTest::::setBorderDash()",
      "31": "DivTest::::setBorderDash()",
      "32": "DivTest::::setBorderDash()",
      "33": "DivTest::::setBorderDash()",
      "34": "DivTest::::setBorderDash()",
      "35": "DivTest::::setBorderDash()",
      "36": "DivTest::::setBorderDash()",
      "37": "DivTest::::setBorderDash()",
      "38": "DivTest::::setBorderDash()",
      "39": "DivTest::::setBorderDash()",
      "40": "DivTest::::setBorderDash()",
      "41": "DivTest::::setBorderDash()",
      "42": "DivTest::::setBorderDash()",
      "43": "DivTest::::setBorderDash()",
      "44": "DivTest::::setBorderDash()",
      "45": "DivTest::::setBorderDash()",
      "47": "DivTest::::split()",
      "48": "DivTest::::split()",
      "49": "DivTest::::split()",
      "50": "DivTest::::split()",
      "51": "DivTest::::split()",
      "52": "DivTest::::split()",
      "53": "DivTest::::split()",
      "54": "DivTest::::split()",
      "55": "DivTest::::split()",
      "56": "DivTest::::split()",
      "57": "DivTest::::split()",
      "58": "DivTest::::split()",
      "59": "DivTest::::split()",
      "60": "DivTest::::split()",
      "61": "DivTest::::split()",
      "62": "DivTest::::split()",
      "63": "DivTest::::split()",
      "64": "DivTest::::split()",
      "65": "DivTest::::split()",
      "66": "DivTest::::split()",
      "67": "DivTest::::split()",
      "68": "DivTest::::split()",
      "69": "DivTest::::split()",
      "70": "DivTest::::split()",
      "71": "DivTest::::split()",
      "72": "DivTest::::split()",
      "73": "DivTest::::split()",
      "74": "DivTest::::split()",
      "75": "DivTest::::split()",
      "76": "DivTest::::split()",
      "77": "DivTest::::split()",
      "78": "DivTest::::split()",
      "79": "DivTest::::split()",
      "80": "DivTest::::split()",
      "81": "DivTest::::split()",
      "82": "DivTest::::split()",
      "83": "DivTest::::split()",
      "84": "DivTest::::split()",
      "85": "DivTest::::split()",
      "86": "DivTest::::split()",
      "87": "DivTest::::split()",
      "88": "DivTest::::split()",
      "89": "DivTest::::split()",
      "90": "DivTest::::split()",
      "91": "DivTest::::split()",
      "92": "DivTest::::split()",
      "93": "DivTest::::split()",
      "94": "DivTest::::split()",
      "95": "DivTest::::split()",
      "96": "DivTest::::split()",
      "97": "DivTest::::split()",
      "98": "DivTest::::split()",
      "99": "DivTest::::split()",
      "100": "DivTest::::split()",
      "101": "DivTest::::split()",
      "102": "DivTest::::split()",
      "103": "DivTest::::split()",
      "104": "DivTest::::split()"
    },
    "tests": [
      {
        "test_lines": [
          19,
          45
        ],
        "covered_lines": [
          31,
          38,
          45,
          54,
          61,
          68,
          75,
          82,
          87,
          92,
          97,
          104,
          109,
          114,
          119,
          128,
          135,
          142,
          149,
          154,
          160,
          165,
          166,
          167,
          168,
          192,
          195,
          208,
          216,
          227,
          255,
          278,
          279,
          289,
          290,
          293,
          294,
          307,
          311,
          312,
          316,
          360,
          364,
          365,
          369,
          428,
          429,
          447,
          451,
          453,
          454,
          479,
          507,
          534,
          543,
          552,
          561,
          570,
          580,
          589,
          598,
          607,
          617,
          621,
          622,
          626,
          630,
          631,
          674,
          715,
          727,
          728,
          729,
          736,
          737,
          738,
          749,
          752,
          755,
          756,
          758,
          760,
          761,
          763,
          791,
          811,
          1094,
          1103
        ]
      },
      {
        "test_lines": [
          47,
          104
        ],
        "covered_lines": [
          31,
          38,
          45,
          54,
          61,
          68,
          75,
          82,
          87,
          92,
          97,
          104,
          109,
          114,
          119,
          128,
          135,
          142,
          149,
          154,
          160,
          162,
          163,
          278,
          279,
          302,
          303,
          311,
          312,
          328,
          329,
          355,
          356,
          364,
          365,
          369,
          373,
          374,
          404,
          405,
          428,
          429,
          502,
          503,
          507,
          511,
          512,
          525,
          529,
          530,
          543,
          547,
          548,
          561,
          565,
          566,
          580,
          584,
          585,
          598,
          602,
          603,
          621,
          622,
          630,
          631,
          669,
          670,
          687,
          688,
          696,
          697,
          705,
          706,
          719,
          720,
          736,
          737,
          738,
          801,
          802,
          821,
          822,
          897,
          898,
          909,
          910,
          911,
          912,
          913,
          914,
          915,
          916,
          917,
          918,
          919,
          920,
          921,
          922,
          923,
          924,
          925,
          926,
          927,
          928,
          948,
          951,
          952,
          957,
          958,
          963,
          965,
          967,
          968,
          969,
          970,
          971,
          972,
          973,
          975,
          977,
          978,
          980,
          982,
          983,
          984,
          985,
          986,
          987,
          989,
          990,
          991,
          992,
          994,
          995,
          996,
          997,
          998,
          1000,
          1001,
          1002,
          1003,
          1005,
          1006,
          1007,
          1008,
          1046,
          1067,
          1068,
          1070,
          1071,
          1072,
          1075,
          1076,
          1078,
          1079,
          1080,
          1081,
          1114,
          1115
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-layout/src/main/java/org/ofdrw/layout/element/AreaHolderBlock.java": {
    "class_content": [
      "package org.ofdrw.layout.element;\n",
      "\n",
      "import org.ofdrw.layout.Rectangle;\n",
      "\n",
      "\n",
      "/**\n",
      " * \u533a\u57df\u5360\u4f4d\u533a\u5757\n",
      " * <p>\n",
      " * \u8be5\u5143\u7d20\u5c5e\u6027\u4e0eDiv\u5c5e\u6027\u4e00\u81f4\uff0c\u4e5f\u5c31\u662f\u8bf4\u53ef\u4ee5\u7ed8\u5236\u8fb9\u6846\u7b49\u5185\u5bb9\u3002\n",
      " * <p>\n",
      " * \u7528\u4e8e\u6784\u9020\u9875\u9762\u4e2d\u4e00\u4e2a\u7528\u4e8e\u5bb9\u7eb3\u5c06\u6765\u53ef\u80fd\u51fa\u73b0\u7684\u9875\u9762\u5143\u7d20\u7684\u7ed3\u6784\uff0c\u8be5\u7ed3\u6784\u4e0d\u505a\u4efb\u4f55\u4e8b\u60c5\u4ec5\u4ec5\u662f\u5360\u4f4d\u3002\n",
      " * \u88ab\u6dfb\u52a0\u5230\u9875\u9762\u4e2d\u7684 \u533a\u57df\u5360\u4f4d\u533a\u5757 \u5c06\u4f1a\u751f\u6210\u4e00\u4e2a\u7279\u522b\u5b9a\u4f4d\u5750\u6807\u5230 AreaHolderBlocks.xml \u6587\u4ef6\uff0c\u8be6\u89c1 {@link org.ofdrw.layout.areaholder.AreaHolderBlocks}\n",
      " * <p>\n",
      " * \u7ed8\u5236\u884c\u4e3a\u8be6\u89c1\u6e32\u67d3\u5668\uff1a{@link AreaHolderBlock}\n",
      " * <p>\n",
      " * \u6ce8\u610fAreaHolderBlock\u5c06\u4f1a\u53d7\u5230 Border \u4e0e Padding\u7684\u5f71\u54cd\uff0c\u53ef\u7ed8\u5236\u533a\u57df\u4ec5\u4e3a\u53bb\u9664\u4e86Border\u4e0ePadding\u7684\u5185\u7684\u533a\u57df\u3002\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2023-10-28 12:24:06\n",
      " */\n",
      "public class AreaHolderBlock extends Div<AreaHolderBlock> {\n",
      "\n",
      "    /**\n",
      "     * \u5360\u4f4d\u533a\u57df\u540d\u79f0\n",
      "     * <p>\n",
      "     * \u7528\u4e8e\u552f\u4e00\u5b9a\u4f4d\u533a\u57df\u5360\u4f4d\u533a\u5757\uff0c\u8bf7\u786e\u4fdd\u8be5\u540d\u79f0\u5728\u6587\u6863\u8303\u56f4\u5185\u552f\u4e00\u3002\n",
      "     */\n",
      "    public String areaName;\n",
      "\n",
      "\n",
      "    private AreaHolderBlock() {\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u521b\u5efaAreaHolderBlock\u5bf9\u8c61\n",
      "     * <p>\n",
      "     * AreaHolderBlock\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u5fc5\u987b\u5728\u521b\u5efa\u65f6\u6307\u5b9a\n",
      "     *\n",
      "     * @param areaName \u533a\u57df\u540d\u79f0\uff0c\u7528\u4e8e\u552f\u4e00\u5b9a\u4f4d\u533a\u57df\u5360\u4f4d\u533a\u5757\uff0c\u8bf7\u786e\u4fdd\u8be5\u540d\u79f0\u5728\u6587\u6863\u8303\u56f4\u5185\u552f\u4e00\u3002\n",
      "     * @param width    \u5bbd\u5ea6\uff08\u5355\u4f4d\uff1a\u6beb\u7c73mm\uff09\n",
      "     * @param height   \u9ad8\u5ea6\uff08\u5355\u4f4d\uff1a\u6beb\u7c73mm\uff09\n",
      "     */\n",
      "    public AreaHolderBlock(String areaName, Double width, Double height) {\n",
      "        super(width, height);\n",
      "        this.areaName = areaName;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5728\u6307\u5b9a\u4f4d\u7f6e \u521b\u5efaAreaHolderBlock\u5bf9\u8c61\n",
      "     *\n",
      "     * @param areaName \u533a\u57df\u540d\u79f0\uff0c\u7528\u4e8e\u552f\u4e00\u5b9a\u4f4d\u533a\u57df\u5360\u4f4d\u533a\u5757\uff0c\u8bf7\u786e\u4fdd\u8be5\u540d\u79f0\u5728\u6587\u6863\u8303\u56f4\u5185\u552f\u4e00\u3002\n",
      "     * @param x        \u753b\u5e03\u5de6\u4e0a\u89d2\u7684x\u5750\u6807\n",
      "     * @param y        \u753b\u5e03\u5de6\u4e0a\u89d2\u7684y\u5750\u6807\n",
      "     * @param w        \u753b\u5e03\u7684\u5bbd\u5ea6\n",
      "     * @param h        \u753b\u5e03\u7684\u9ad8\u5ea6\n",
      "     */\n",
      "    public AreaHolderBlock(String areaName, double x, double y, double w, double h) {\n",
      "        super(x, y, w, h);\n",
      "        this.areaName = areaName;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6 \u533a\u57df\u540d\u79f0\n",
      "     *\n",
      "     * @return \u533a\u57df\u540d\u79f0\n",
      "     */\n",
      "    public String getAreaName() {\n",
      "        return areaName;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e \u533a\u57df\u540d\u79f0\n",
      "     *\n",
      "     * @param areaName \u533a\u57df\u540d\u79f0\n",
      "     * @return this\n",
      "     */\n",
      "    public AreaHolderBlock setAreaName(String areaName) {\n",
      "        this.areaName = areaName;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Canvas \u4e0d\u63a5\u53d7\u5bbd\u5ea6\u91cd\u8bbe\n",
      "     */\n",
      "    @Override\n",
      "    public Rectangle doPrepare(Double widthLimit) {\n",
      "        double w = this.getWidth() + widthPlus();\n",
      "        double h = this.getHeight() + heightPlus();\n",
      "        return new Rectangle(w, h);\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5143\u7d20\u7c7b\u578b\u540d\u79f0\n",
      "     * <p>\n",
      "     * \u7528\u4e8e\u6807\u8bc6\u5143\u7d20\u7c7b\u578b\uff0c\u9009\u62e9\u5408\u9002\u7684\u5904\u7406\u5668\uff0c\u81ea\u5b9a\u4e49\u5143\u7d20\u8bf7\u91cd\u5199\u8be5\u65b9\u6cd5\n",
      "     * <p>\n",
      "     * \u5173\u8054\u7ed8\u5236\u5668\uff1a{@link org.ofdrw.layout.engine.render.DivRender}\n",
      "     *\n",
      "     * @return \u5143\u7d20\u7c7b\u578b\u540d\u79f0\n",
      "     */\n",
      "    @Override\n",
      "    public String elementType() {\n",
      "        return \"AreaHolderBlock\";\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.layout.element;\n",
      "\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.ofdrw.layout.OFDDoc;\n",
      "import org.ofdrw.layout.edit.AdditionVPage;\n",
      "import org.ofdrw.reader.OFDReader;\n",
      "\n",
      "import java.nio.file.Path;\n",
      "import java.nio.file.Paths;\n",
      "\n",
      "\n",
      "class AreaHolderBlockTest {\n",
      "\n",
      "    /**\n",
      "     * \u6d4b\u8bd5\u4f7f\u7528\u6d41\u5f0fAPI\u5411\u6587\u6863\u4e2d\u6dfb\u52a0\u533a\u57df\u5360\u4f4d\u7b26\n",
      "     */\n",
      "    @Test\n",
      "    public void testStreamDocAddArea() throws Exception {\n",
      "        Path out = Paths.get(\"target/AreaHolderBlockTest-StreamDocAdd.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(out)) {\n",
      "\n",
      "            /*\n",
      "             * \u7b2c1\u884c\n",
      "             */\n",
      "            Paragraph p = new Paragraph(\"\u59d3\u540d\", 6d);\n",
      "            p.setWidth(20d);\n",
      "            p.setHeight(10d);\n",
      "            p.setTextAlign(TextAlign.center);\n",
      "            p.setBorderColor(0, 0, 0);\n",
      "            p.setBorder(0.353);\n",
      "            p.setClear(Clear.none);\n",
      "\n",
      "            AreaHolderBlock field = new AreaHolderBlock(\"name\", 100d, 10d);\n",
      "            field.setBorderColor(0, 0, 0);\n",
      "            field.setBorder(0.353);\n",
      "            field.setBorderLeft(-0.353);\n",
      "            field.setClear(Clear.none);\n",
      "\n",
      "\n",
      "            ofdDoc.add(p);\n",
      "            ofdDoc.add(field);\n",
      "            ofdDoc.add(new BR());\n",
      "\n",
      "            /*\n",
      "             * \u7b2c2\u884c\n",
      "             */\n",
      "            p = new Paragraph(\"\u751f\u65e5\", 6d);\n",
      "            p.setWidth(20d);\n",
      "            p.setHeight(10d);\n",
      "            p.setTextAlign(TextAlign.center);\n",
      "            p.setBorderColor(0, 0, 0);\n",
      "            p.setBorder(0.353);\n",
      "            p.setBorderTop(-0.353);\n",
      "            p.setClear(Clear.none);\n",
      "\n",
      "            field = new AreaHolderBlock(\"birthday\", 100d, 10d);\n",
      "            field.setBorderColor(0, 0, 0);\n",
      "            field.setBorder(0.353);\n",
      "            field.setBorderTop(-0.353);\n",
      "            field.setBorderLeft(-0.353);\n",
      "            field.setClear(Clear.none);\n",
      "\n",
      "            ofdDoc.add(p);\n",
      "            ofdDoc.add(field);\n",
      "            ofdDoc.add(new BR());\n",
      "        }\n",
      "        System.out.println(\">> \" + out.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u6d4b\u8bd5\u4f7f\u7528\u865a\u62df\u9875\u9762\u5e03\u5c40\u5411\u6587\u6863\u4e2d\u6dfb\u52a0\u533a\u57df\u5360\u4f4d\u7b26\n",
      "     */\n",
      "    @Test\n",
      "    public void testAddVPage() throws Exception {\n",
      "        Path srcP = Paths.get(\"src/test/resources\", \"helloworld.ofd\");\n",
      "        Path outP = Paths.get(\"target/AreaHolderBlockTest-Fixed.ofd\");\n",
      "        try (OFDReader reader = new OFDReader(srcP);\n",
      "             OFDDoc ofdDoc = new OFDDoc(reader, outP)) {\n",
      "            AdditionVPage avPage = ofdDoc.getAVPage(1);\n",
      "\n",
      "\n",
      "            /*\n",
      "             * \u7b2c1\u884c\n",
      "             */\n",
      "            Paragraph p = new Paragraph(\"\u59d3\u540d\", 6d);\n",
      "            p.setWidth(20d);\n",
      "            p.setHeight(10d);\n",
      "            p.setXY(20d, 40d);\n",
      "            p.setPosition(Position.Absolute);\n",
      "            p.setTextAlign(TextAlign.center);\n",
      "            p.setBorderColor(0, 0, 0);\n",
      "            p.setBorder(0.353);\n",
      "            p.setClear(Clear.none);\n",
      "\n",
      "            AreaHolderBlock field = new AreaHolderBlock(\"name\", 40.7d,40d,100d, 10d);\n",
      "            field.setBorderColor(0, 0, 0);\n",
      "            field.setBorder(0.353);\n",
      "            field.setBorderLeft(-0.353);\n",
      "            field.setClear(Clear.none);\n",
      "\n",
      "\n",
      "            avPage.add(p);\n",
      "            avPage.add(field);\n",
      "\n",
      "\n",
      "            /*\n",
      "             * \u7b2c2\u884c\n",
      "             */\n",
      "            p = new Paragraph(\"\u751f\u65e5\", 6d);\n",
      "            p.setWidth(20d);\n",
      "            p.setHeight(10d);\n",
      "            p.setXY(20d, 50.7d);\n",
      "            p.setPosition(Position.Absolute);\n",
      "            p.setTextAlign(TextAlign.center);\n",
      "            p.setBorderColor(0, 0, 0);\n",
      "            p.setBorder(0.353);\n",
      "            p.setBorderTop(-0.353);\n",
      "            p.setClear(Clear.none);\n",
      "\n",
      "            field = new AreaHolderBlock(\"birthday\", 40.7d, 50.7d,100d, 10d);\n",
      "            field.setBorderColor(0, 0, 0);\n",
      "            field.setBorder(0.353);\n",
      "            field.setBorderTop(-0.353);\n",
      "            field.setBorderLeft(-0.353);\n",
      "            field.setClear(Clear.none);\n",
      "\n",
      "            avPage.add(p);\n",
      "            avPage.add(field);\n",
      "\n",
      "        }\n",
      "        System.out.println(\">> \" + outP.toAbsolutePath());\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "AreaHolderBlock::::getAreaName()": [
        68,
        70
      ],
      "AreaHolderBlock::::setAreaName(java.lang.String)": [
        78,
        81
      ],
      "AreaHolderBlock::::doPrepare(java.lang.Double)": [
        86,
        91
      ],
      "AreaHolderBlock::::elementType()": [
        103,
        106
      ]
    },
    "test_method_lines_dic": {
      "AreaHolderBlockTest::::testStreamDocAddArea()": [
        17,
        68
      ],
      "AreaHolderBlockTest::::testAddVPage()": [
        74,
        133
      ]
    },
    "reverse_method_lines_dic": {
      "68": "AreaHolderBlock::::getAreaName()",
      "69": "AreaHolderBlock::::getAreaName()",
      "70": "AreaHolderBlock::::getAreaName()",
      "78": "AreaHolderBlock::::setAreaName(java.lang.String)",
      "79": "AreaHolderBlock::::setAreaName(java.lang.String)",
      "80": "AreaHolderBlock::::setAreaName(java.lang.String)",
      "81": "AreaHolderBlock::::setAreaName(java.lang.String)",
      "86": "AreaHolderBlock::::doPrepare(java.lang.Double)",
      "87": "AreaHolderBlock::::doPrepare(java.lang.Double)",
      "88": "AreaHolderBlock::::doPrepare(java.lang.Double)",
      "89": "AreaHolderBlock::::doPrepare(java.lang.Double)",
      "90": "AreaHolderBlock::::doPrepare(java.lang.Double)",
      "91": "AreaHolderBlock::::doPrepare(java.lang.Double)",
      "103": "AreaHolderBlock::::elementType()",
      "104": "AreaHolderBlock::::elementType()",
      "105": "AreaHolderBlock::::elementType()",
      "106": "AreaHolderBlock::::elementType()"
    },
    "test_reverse_method_lines_dic": {
      "17": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "18": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "19": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "20": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "21": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "22": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "23": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "24": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "25": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "26": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "27": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "28": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "29": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "30": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "31": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "32": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "33": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "34": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "35": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "36": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "37": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "38": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "39": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "40": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "41": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "42": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "43": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "44": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "45": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "46": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "47": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "48": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "49": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "50": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "51": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "52": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "53": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "54": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "55": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "56": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "57": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "58": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "59": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "60": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "61": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "62": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "63": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "64": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "65": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "66": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "67": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "68": "AreaHolderBlockTest::::testStreamDocAddArea()",
      "74": "AreaHolderBlockTest::::testAddVPage()",
      "75": "AreaHolderBlockTest::::testAddVPage()",
      "76": "AreaHolderBlockTest::::testAddVPage()",
      "77": "AreaHolderBlockTest::::testAddVPage()",
      "78": "AreaHolderBlockTest::::testAddVPage()",
      "79": "AreaHolderBlockTest::::testAddVPage()",
      "80": "AreaHolderBlockTest::::testAddVPage()",
      "81": "AreaHolderBlockTest::::testAddVPage()",
      "82": "AreaHolderBlockTest::::testAddVPage()",
      "83": "AreaHolderBlockTest::::testAddVPage()",
      "84": "AreaHolderBlockTest::::testAddVPage()",
      "85": "AreaHolderBlockTest::::testAddVPage()",
      "86": "AreaHolderBlockTest::::testAddVPage()",
      "87": "AreaHolderBlockTest::::testAddVPage()",
      "88": "AreaHolderBlockTest::::testAddVPage()",
      "89": "AreaHolderBlockTest::::testAddVPage()",
      "90": "AreaHolderBlockTest::::testAddVPage()",
      "91": "AreaHolderBlockTest::::testAddVPage()",
      "92": "AreaHolderBlockTest::::testAddVPage()",
      "93": "AreaHolderBlockTest::::testAddVPage()",
      "94": "AreaHolderBlockTest::::testAddVPage()",
      "95": "AreaHolderBlockTest::::testAddVPage()",
      "96": "AreaHolderBlockTest::::testAddVPage()",
      "97": "AreaHolderBlockTest::::testAddVPage()",
      "98": "AreaHolderBlockTest::::testAddVPage()",
      "99": "AreaHolderBlockTest::::testAddVPage()",
      "100": "AreaHolderBlockTest::::testAddVPage()",
      "101": "AreaHolderBlockTest::::testAddVPage()",
      "102": "AreaHolderBlockTest::::testAddVPage()",
      "103": "AreaHolderBlockTest::::testAddVPage()",
      "104": "AreaHolderBlockTest::::testAddVPage()",
      "105": "AreaHolderBlockTest::::testAddVPage()",
      "106": "AreaHolderBlockTest::::testAddVPage()",
      "107": "AreaHolderBlockTest::::testAddVPage()",
      "108": "AreaHolderBlockTest::::testAddVPage()",
      "109": "AreaHolderBlockTest::::testAddVPage()",
      "110": "AreaHolderBlockTest::::testAddVPage()",
      "111": "AreaHolderBlockTest::::testAddVPage()",
      "112": "AreaHolderBlockTest::::testAddVPage()",
      "113": "AreaHolderBlockTest::::testAddVPage()",
      "114": "AreaHolderBlockTest::::testAddVPage()",
      "115": "AreaHolderBlockTest::::testAddVPage()",
      "116": "AreaHolderBlockTest::::testAddVPage()",
      "117": "AreaHolderBlockTest::::testAddVPage()",
      "118": "AreaHolderBlockTest::::testAddVPage()",
      "119": "AreaHolderBlockTest::::testAddVPage()",
      "120": "AreaHolderBlockTest::::testAddVPage()",
      "121": "AreaHolderBlockTest::::testAddVPage()",
      "122": "AreaHolderBlockTest::::testAddVPage()",
      "123": "AreaHolderBlockTest::::testAddVPage()",
      "124": "AreaHolderBlockTest::::testAddVPage()",
      "125": "AreaHolderBlockTest::::testAddVPage()",
      "126": "AreaHolderBlockTest::::testAddVPage()",
      "127": "AreaHolderBlockTest::::testAddVPage()",
      "128": "AreaHolderBlockTest::::testAddVPage()",
      "129": "AreaHolderBlockTest::::testAddVPage()",
      "130": "AreaHolderBlockTest::::testAddVPage()",
      "131": "AreaHolderBlockTest::::testAddVPage()",
      "132": "AreaHolderBlockTest::::testAddVPage()",
      "133": "AreaHolderBlockTest::::testAddVPage()"
    },
    "tests": [
      {
        "test_lines": [
          17,
          68
        ],
        "covered_lines": [
          45,
          46,
          47,
          69,
          88,
          89,
          90,
          105
        ]
      },
      {
        "test_lines": [
          74,
          133
        ],
        "covered_lines": [
          59,
          60,
          61,
          69,
          88,
          89,
          90,
          105
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-layout/src/main/java/org/ofdrw/layout/element/PageAreaFiller.java": {
    "class_content": [
      "package org.ofdrw.layout.element;\n",
      "\n",
      "/**\n",
      " * \u9875\u9762\u5269\u4f59\u7a7a\u95f4\u586b\u5145\n",
      " * <p>\n",
      " * \u8be5\u5143\u7d20\u4e0d\u4f1a\u88ab\u5e03\u5c40\u5206\u6790\u5668\u89e3\u6790\uff0c\u53ea\u662f\u4f5c\u4e3a\u4e00\u4e2a\u547d\u4ee4\u6807\u5fd7\uff0c\n",
      " * \u544a\u8bc9\u5206\u6790\u5668\u4f7f\u5269\u4f59\u7684\u7a7a\u95f4\u4e3a0\uff0c\u4e5f\u5c31\u662f\u6784\u9020\u4e00\u4e2a\u7279\u6b8a\u7684\u6bb5\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2020-03-16 10:52:21\n",
      " */\n",
      "public class PageAreaFiller extends Div<PageAreaFiller> {\n",
      "    public PageAreaFiller() {\n",
      "        setPlaceholder(true);\n",
      "        setClear(Clear.both);\n",
      "        setFloat(AFloat.center);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.layout.element;\n",
      "\n",
      "\n",
      "import org.junit.jupiter.api.Assertions;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.ofdrw.layout.engine.Segment;\n",
      "\n",
      "public class PageAreaFillerTest {\n",
      "    @Test\n",
      "    public void test() {\n",
      "        Segment sgm = new Segment(138d);\n",
      "        Assertions.assertTrue(sgm.tryAdd(new PageAreaFiller()));\n",
      "        // h:138 - 50 = 88\n",
      "        Assertions.assertFalse(sgm.tryAdd(\n",
      "                new Div(50d, 10d)\n",
      "                        .setClear(Clear.none)\n",
      "        ));\n",
      "        Assertions.assertTrue(sgm.isRemainAreaFiller());\n",
      "    }\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {},
    "test_method_lines_dic": {
      "PageAreaFillerTest::::test()": [
        9,
        19
      ]
    },
    "reverse_method_lines_dic": {},
    "test_reverse_method_lines_dic": {
      "9": "PageAreaFillerTest::::test()",
      "10": "PageAreaFillerTest::::test()",
      "11": "PageAreaFillerTest::::test()",
      "12": "PageAreaFillerTest::::test()",
      "13": "PageAreaFillerTest::::test()",
      "14": "PageAreaFillerTest::::test()",
      "15": "PageAreaFillerTest::::test()",
      "16": "PageAreaFillerTest::::test()",
      "17": "PageAreaFillerTest::::test()",
      "18": "PageAreaFillerTest::::test()",
      "19": "PageAreaFillerTest::::test()"
    },
    "tests": [
      {
        "test_lines": [
          9,
          19
        ],
        "covered_lines": [
          13,
          14,
          15,
          16,
          17
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-layout/src/main/java/org/ofdrw/layout/element/Paragraph.java": {
    "class_content": [
      "package org.ofdrw.layout.element;\n",
      "\n",
      "import org.ofdrw.font.Font;\n",
      "import org.ofdrw.layout.Rectangle;\n",
      "\n",
      "import java.util.LinkedList;\n",
      "import java.util.List;\n",
      "\n",
      "/**\n",
      " * \u6bb5\u843d\n",
      " * <p>\n",
      " * \u7ed8\u5236\u884c\u4e3a\u8be6\u89c1\u6e32\u67d3\u5668\uff1a{@link org.ofdrw.layout.engine.render.ParagraphRender}\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2020-02-03 01:27:20\n",
      " */\n",
      "public class Paragraph extends Div<Paragraph> {\n",
      "\n",
      "    /**\n",
      "     * \u9996\u884c\u7f29\u8fdb\u5b57\u7b26\u6570\n",
      "     * <p>\n",
      "     * null \u6807\u8bc6\u6ca1\u6709\u7f29\u8fdb\n",
      "     */\n",
      "    private Integer firstLineIndent = null;\n",
      "\n",
      "    /**\n",
      "     * \u9996\u884c\u7f29\u8fdb\u6570\u503c\n",
      "     * \u5355\u4f4d\uff1amm\n",
      "     */\n",
      "    private Double firstLineIndentWidth = null;\n",
      "\n",
      "    /**\n",
      "     * \u884c\u95f4\u8ddd\n",
      "     */\n",
      "    private Double lineSpace = 2d;\n",
      "\n",
      "    /**\n",
      "     * \u9ed8\u8ba4\u5b57\u4f53\n",
      "     */\n",
      "    private Font defaultFont;\n",
      "\n",
      "    /**\n",
      "     * \u9ed8\u8ba4\u5b57\u53f7\n",
      "     */\n",
      "    private Double defaultFontSize;\n",
      "\n",
      "    /**\n",
      "     * \u6587\u5b57\u5185\u5bb9\n",
      "     */\n",
      "    private LinkedList<Span> contents;\n",
      "\n",
      "    /**\n",
      "     * \u5143\u7d20\u5185\u884c\u7f13\u5b58\n",
      "     */\n",
      "    private LinkedList<TxtLineBlock> lines;\n",
      "\n",
      "    /**\n",
      "     * \u5b57\u4f53\u5728\u6bb5\u843d\u5185\u7684\u6d6e\u52a8\u65b9\u5411\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\u4e3a\uff1a\u5de6\u6d6e\u52a8\n",
      "     */\n",
      "    private TextAlign textAlign = TextAlign.left;\n",
      "\n",
      "    /**\n",
      "     * \u521b\u5efa\u4e00\u4e2a\u56fa\u5b9a\u5927\u5c0f\u6bb5\u843d\u5bf9\u8c61\n",
      "     *\n",
      "     * @param width  \u5185\u5bb9\u5bbd\u5ea6\n",
      "     * @param height \u5185\u5bb9\u9ad8\u5ea6\n",
      "     */\n",
      "    public Paragraph(Double width, Double height) {\n",
      "        this();\n",
      "        setWidth(width).setHeight(height);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u521b\u5efa\u4e00\u4e2a\u6bb5\u843d\u5bf9\u8c61\n",
      "     * <p>\n",
      "     * \u6ce8\u610f\u5982\u679c\u4e0d\u4e3b\u52a8\u5bf9 Paragraph \u8bbe\u7f6e\u5bbd\u5ea6\uff0c\u90a3\u4e48Paragraph\n",
      "     * \u4f1a\u72ec\u5360\u6574\u4e2a\u6bb5\uff0c\u5e76\u4e14\u4e0e\u6bb5\u5177\u6709\u76f8\u540c\u5bbd\u5ea6\uff0c\u4e5f\u5c31\u662f\u9875\u9762\u5bbd\u5ea6\uff0c\n",
      "     * \u5728\u9700\u8981\u66f4\u52a0\u7ec6\u81f4\u76d2\u5f0f\u7684\u5e03\u5c40\u65f6 \u8bf7\u8bbe\u7f6e{@link #setClear(Clear)}\n",
      "     * \u5e76\u8bbe\u7f6e\u6bb5\u843d\u5bbd\u5ea6 {@link #setWidth(Double)}\u3002\n",
      "     */\n",
      "    public Paragraph() {\n",
      "        this.setClear(Clear.both);\n",
      "        this.contents = new LinkedList<>();\n",
      "        this.lines = new LinkedList<>();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u521b\u5efa\u7edd\u5bf9\u5b9a\u4f4d\u6bb5\u843d\u5bf9\u8c61\n",
      "     *\n",
      "     * @param x      \u56fa\u5b9a\u5e03\u5c40\u7684\u76d2\u5f0f\u6a21\u578b\u5de6\u4e0a\u89d2X\u5750\u6807\n",
      "     * @param y      \u56fa\u5b9a\u5e03\u5c40\u7684\u76d2\u5f0f\u6a21\u578b\u5de6\u4e0a\u89d2y\u5750\u6807\n",
      "     * @param width  \u5bbd\u5ea6\n",
      "     * @param height \u9ad8\u5ea6\n",
      "     */\n",
      "    public Paragraph(double x, double y, double width, double height) {\n",
      "        super(x, y, width, height);\n",
      "        this.contents = new LinkedList<>();\n",
      "        this.lines = new LinkedList<>();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u521b\u5efa\u7edd\u5bf9\u5b9a\u4f4d\u6bb5\u843d\u5bf9\u8c61\n",
      "     *\n",
      "     * @param x        \u56fa\u5b9a\u5e03\u5c40\u7684\u76d2\u5f0f\u6a21\u578b\u5de6\u4e0a\u89d2X\u5750\u6807\n",
      "     * @param y        \u56fa\u5b9a\u5e03\u5c40\u7684\u76d2\u5f0f\u6a21\u578b\u5de6\u4e0a\u89d2y\u5750\u6807\n",
      "     * @param width    \u5bbd\u5ea6\n",
      "     * @param height   \u9ad8\u5ea6\n",
      "     * @param text     \u6587\u672c\u5185\u5bb9\n",
      "     * @param fontSize \u5b57\u53f7\n",
      "     */\n",
      "    public Paragraph(double x, double y, double width, double height, String text, double fontSize) {\n",
      "        super(x, y, width, height);\n",
      "        if (text == null) {\n",
      "            throw new IllegalArgumentException(\"\u6587\u5b57\u5185\u5bb9\u4e3anull\");\n",
      "        }\n",
      "        this.contents = new LinkedList<>();\n",
      "        this.lines = new LinkedList<>();\n",
      "\n",
      "        this.setFontSize(fontSize);\n",
      "        this.add(text);\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u65b0\u5efa\u4e00\u4e2a\u6bb5\u843d\u5bf9\u8c61\n",
      "     * <p>\n",
      "     * \u5982\u679c\u5728\u6307\u5b9a\u6bb5\u843d\u4e2d\u6587\u5b57\u5927\u5c0f\u5efa\u8bae\u4f7f\u7528{@link Paragraph#Paragraph(java.lang.String, java.lang.Double)}\n",
      "     *\n",
      "     * @param text \u6587\u5b57\u5185\u5bb9\n",
      "     */\n",
      "    public Paragraph(String text) {\n",
      "        this();\n",
      "        if (text == null) {\n",
      "            throw new IllegalArgumentException(\"\u6587\u5b57\u5185\u5bb9\u4e3anull\");\n",
      "        }\n",
      "        this.add(text);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u65b0\u5efa\u4e00\u4e2a\u6bb5\u843d\u5bf9\u8c61\uff0c\u5e76\u6307\u5b9a\u6587\u5b57\u5927\u5c0f\n",
      "     *\n",
      "     * @param text            \u6587\u5b57\u5185\u5bb9\n",
      "     * @param defaultFontSize \u9ed8\u8ba4\u5b57\u4f53\u5927\u5c0f\u3002\n",
      "     */\n",
      "    public Paragraph(String text, Double defaultFontSize) {\n",
      "        this();\n",
      "        if (text == null) {\n",
      "            throw new IllegalArgumentException(\"\u6587\u5b57\u5185\u5bb9\u4e3anull\");\n",
      "        }\n",
      "        this.setFontSize(defaultFontSize);\n",
      "        this.add(text);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u65b0\u5efa\u4e00\u4e2a\u6bb5\u843d\u5bf9\u8c61\uff0c\u5e76\u6307\u5b9a\u6587\u5b57\u5927\u5c0f\u548c\u5b57\u4f53\n",
      "     *\n",
      "     * @param text            \u6587\u5b57\u5185\u5bb9\n",
      "     * @param defaultFontSize \u9ed8\u8ba4\u5b57\u4f53\u5927\u5c0f\n",
      "     * @param defaultFont     \u9ed8\u8ba4\u5b57\u4f53\n",
      "     */\n",
      "    public Paragraph(String text, Double defaultFontSize, Font defaultFont) {\n",
      "        this();\n",
      "        if (text == null) {\n",
      "            throw new IllegalArgumentException(\"\u6587\u5b57\u5185\u5bb9\u4e3anull\");\n",
      "        }\n",
      "        this.setFontSize(defaultFontSize);\n",
      "        this.setDefaultFont(defaultFont);\n",
      "        this.add(text);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u65b0\u5efa\u4e00\u4e2a\u6bb5\u843d\u5bf9\u8c61\uff0c\u5e76\u6307\u5b9a\u5b57\u4f53\n",
      "     *\n",
      "     * @param text        \u6587\u5b57\u5185\u5bb9\n",
      "     * @param defaultFont \u9ed8\u8ba4\u5b57\u4f53\n",
      "     */\n",
      "    public Paragraph(String text, Font defaultFont) {\n",
      "        this();\n",
      "        if (text == null) {\n",
      "            throw new IllegalArgumentException(\"\u6587\u5b57\u5185\u5bb9\u4e3anull\");\n",
      "        }\n",
      "        this.setDefaultFont(defaultFont);\n",
      "        this.add(text);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u589e\u52a0\u6bb5\u843d\u4e2d\u7684\u6587\u5b57\n",
      "     * <p>\n",
      "     * \u6587\u5b57\u6837\u5f0f\u4f7f\u7528span\u9ed8\u8ba4\u5b57\u4f53\u6837\u5f0f\n",
      "     *\n",
      "     * @param text \u6587\u672c\u5185\u5bb9\n",
      "     * @return this\n",
      "     */\n",
      "    public Paragraph add(String text) {\n",
      "        if (text == null) {\n",
      "            return this;\n",
      "        }\n",
      "        Span newTxt = new Span(text);\n",
      "        if (this.defaultFont != null) {\n",
      "            newTxt.setFont(defaultFont);\n",
      "        }\n",
      "        if (this.defaultFontSize != null) {\n",
      "            newTxt.setFontSize(defaultFontSize);\n",
      "        }\n",
      "        return this.add(newTxt);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u52a0\u5165\u5e26\u6709\u7279\u6b8a\u6837\u5f0f\u6587\u5b57\u5185\u5bb9\n",
      "     *\n",
      "     * @param content \u7279\u6b8a\u6837\u5f0f\u6587\u5b57\u5185\u5bb9\n",
      "     * @return this\n",
      "     */\n",
      "    public Paragraph add(Span content) {\n",
      "        if (content == null) {\n",
      "            return this;\n",
      "        }\n",
      "        this.contents.add(content);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public Double getLineSpace() {\n",
      "        return lineSpace;\n",
      "    }\n",
      "\n",
      "    public Paragraph setLineSpace(Double lineSpace) {\n",
      "        this.lineSpace = lineSpace;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public Font getDefaultFont() {\n",
      "        return defaultFont;\n",
      "    }\n",
      "\n",
      "    public Paragraph setDefaultFont(Font defaultFont) {\n",
      "        this.defaultFont = defaultFont;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u9ed8\u8ba4\u5b57\u4f53\n",
      "     * <p>\n",
      "     * \u6ce8\u610f\uff1a\u5728\u8bbe\u7f6e defaultFont \u4e4b\u524d\u88ab\u6dfb\u52a0\u7684\u5185\u5bb9\uff0c\u4e0d\u4f1a\u5728\u8c03\u7528 defaultFont \u65b9\u6cd5\u540e\u800c\u6539\u53d8\uff0c\u9664\u975e\u6307\u5b9a refreshBeforeAdd=true\n",
      "     *\n",
      "     * @param defaultFont      \u9ed8\u8ba4\u5b57\u4f53\n",
      "     * @param refreshBeforeAdd \u662f\u5426\u5bf9\u4e4b\u524dadd\u7684text\u5185\u5bb9\u5e94\u7528\u8fd9\u4e2a\u5b57\u4f53\n",
      "     * @return this\n",
      "     */\n",
      "    public Paragraph setDefaultFont(Font defaultFont, boolean refreshBeforeAdd) {\n",
      "        this.defaultFont = defaultFont;\n",
      "        if (refreshBeforeAdd)\n",
      "            this.contents.forEach(span -> span.setFont(defaultFont));\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public Double getFontSize() {\n",
      "        return defaultFontSize;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u6bb5\u843d\u5185\u9ed8\u8ba4\u7684\u5b57\u4f53\u5927\u5c0f\n",
      "     * <p>\n",
      "     * \u5982\u679c\u52a0\u5165\u7684\u6587\u5b57\u6ca1\u6709\u8bbe\u7f6e\u5927\u5c0f\uff0c\u90a3\u4e48\u9ed8\u8ba4\u4f7f\u7528\u8be5\u503c\u3002\n",
      "     * <p>\n",
      "     * \u6ce8\u610f\uff1a\u8be5\u64cd\u4f5c\u4e0d\u4f1a\u5bf9\u6bb5\u843d\u5185\u5df2\u7ecf\u5b58\u5728\u7684\u6587\u5b57\u751f\u6548\uff0c\n",
      "     * \u56e0\u6b64\u5728\u6dfb\u52a0\u6587\u5b57\u4e4b\u540e\uff0c\u5728\u8c03\u7528\u8be5\u65b9\u6cd5\uff0c\u539f\u6709\u7684\u6587\u5b57\u5927\u5c0f\u4e0d\u4f1a\u53d8\u6362\u3002\n",
      "     *\n",
      "     * @param defaultFontSize \u9ed8\u8ba4\u5b57\u4f53\u5927\u5c0f\n",
      "     * @return this\n",
      "     */\n",
      "    public Paragraph setFontSize(Double defaultFontSize) {\n",
      "        this.defaultFontSize = defaultFontSize;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u6bb5\u843d\u5185\u9ed8\u8ba4\u7684\u5b57\u4f53\u5927\u5c0f\n",
      "     * <p>\n",
      "     * \u5982\u679c\u52a0\u5165\u7684\u6587\u5b57\u6ca1\u6709\u8bbe\u7f6e\u5927\u5c0f\uff0c\u90a3\u4e48\u9ed8\u8ba4\u4f7f\u7528\u8be5\u503c\u3002\n",
      "     * <p>\n",
      "     * \u6ce8\u610f\uff1a\u8be5\u64cd\u4f5c\u4e0d\u4f1a\u5bf9\u6bb5\u843d\u5185\u5df2\u7ecf\u5b58\u5728\u7684\u6587\u5b57\u751f\u6548\uff0c\n",
      "     * \u56e0\u6b64\u5728\u6dfb\u52a0\u6587\u5b57\u4e4b\u540e\uff0c\u5728\u8c03\u7528\u8be5\u65b9\u6cd5\uff0c\u539f\u6709\u7684\u6587\u5b57\u5927\u5c0f\u4e0d\u4f1a\u53d8\u6362\u3002\n",
      "     * \u4f60\u53ef\u4ee5\u6307\u5b9a refreshBeforeAdd=true \u6765\u4f7f\u4e4b\u524d\u6dfb\u52a0\u7684\u5185\u5bb9\u4e5f\u751f\u6548\u3002\n",
      "     *\n",
      "     * @param defaultFontSize  \u9ed8\u8ba4\u5b57\u4f53\u5927\u5c0f\n",
      "     * @param refreshBeforeAdd \u662f\u5426\u5237\u65b0\u4e4b\u524d\u6dfb\u52a0\u7684\u5185\u5bb9\n",
      "     * @return this\n",
      "     */\n",
      "    public Paragraph setFontSize(Double defaultFontSize, boolean refreshBeforeAdd) {\n",
      "        this.defaultFontSize = defaultFontSize;\n",
      "        if (refreshBeforeAdd)\n",
      "            this.contents.forEach(span -> span.setFontSize(defaultFontSize));\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public LinkedList<Span> getContents() {\n",
      "        return contents;\n",
      "    }\n",
      "\n",
      "    public Paragraph setContents(List<Span> contents) {\n",
      "        this.contents.clear();\n",
      "        this.contents.addAll(contents);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public LinkedList<TxtLineBlock> getLines() {\n",
      "        return lines;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u521b\u5efa\u65b0\u7684\u884c\n",
      "     *\n",
      "     * @param width \u884c\u5bbd\u5ea6\n",
      "     * @return \u884c\u5757\n",
      "     */\n",
      "    private TxtLineBlock newLine(double width) {\n",
      "        return new TxtLineBlock(width, lineSpace, textAlign);\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u9996\u884c\u7f29\u8fdb\u5b57\u7b26\u6570\n",
      "     *\n",
      "     * @return \u9996\u884c\u7f29\u8fdb\u5b57\u7b26\u6570 null\u8868\u793a\u6ca1\u6709\u7f29\u8fdb\n",
      "     */\n",
      "    public Integer getFirstLineIndent() {\n",
      "        return firstLineIndent;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u6bb5\u843d\u9996\u884c\u7f29\u8fdb\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\u4e0d\u7f29\u8fdb\n",
      "     *\n",
      "     * @param firstLineIndent \u7f29\u8fdb\u5b57\u7b26\u6570null\u62160\u8868\u793a\u4e0d\u7f29\u8fdb\n",
      "     * @return this\n",
      "     */\n",
      "    public Paragraph setFirstLineIndent(Integer firstLineIndent) {\n",
      "        this.firstLineIndent = firstLineIndent;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u9996\u884c\u7f29\u8fdb\u6570\u503c\n",
      "     * <p>\n",
      "     * \u8be5\u65b9\u6cd5\u4ec5\u5728\u5df2\u7ecf\u8bbe\u7f6e\u4e86\u9996\u884c\u7f29\u8fdb\u6570\u503c\u7684\u60c5\u51b5\u4e0b\u624d\u4f1a\u8fd4\u8fd8\u6b63\u786e\u7684\u6570\u503c\uff0c\u5426\u5219\u8fd4\u8fd8null\n",
      "     *\n",
      "     * @return \u9996\u884c\u7f29\u8fdb\u6570\u503c\u6216null\n",
      "     */\n",
      "    public Double getFirstLineIndentWidth() {\n",
      "        return firstLineIndentWidth;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u6bb5\u843d\u9996\u884c\u7f29\u8fdb\u6570\u503c\n",
      "     *\n",
      "     * @param firstLineIndentWidth \u9996\u884c\u7f29\u8fdb\u6570\u503c\uff08\u5355\u4f4d\uff1amm\uff09\n",
      "     * @return this\n",
      "     */\n",
      "    public Paragraph setFirstLineIndentWidth(double firstLineIndentWidth) {\n",
      "        this.firstLineIndentWidth = firstLineIndentWidth;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6e05\u9664\u7f29\u8fdb\u683c\u5f0f\n",
      "     *\n",
      "     * @return this\n",
      "     */\n",
      "    public Paragraph clearFirstLineIndent() {\n",
      "        this.firstLineIndent = null;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u6bb5\u843d\u5185\u5b57\u4f53\u6d6e\u52a8\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\u4e3a\u5de6\u6d6e\u52a8\n",
      "     *\n",
      "     * @param textAlign \u6d6e\u52a8\u65b9\u5411\n",
      "     * @return this\n",
      "     */\n",
      "    public Paragraph setTextAlign(TextAlign textAlign) {\n",
      "        if (textAlign == null) {\n",
      "            textAlign = TextAlign.left;\n",
      "        }\n",
      "        this.textAlign = textAlign;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u6bb5\u843d\u5185\u5b57\u4f53\u6d6e\u52a8\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\u4e3a\u5de6\u6d6e\u52a8\n",
      "     *\n",
      "     * @return \u6d6e\u52a8\u65b9\u5411\n",
      "     */\n",
      "    public TextAlign getTextAlign() {\n",
      "        return this.textAlign;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5904\u7406Span\u5185\u90e8\u542b\u6709\u6362\u884c\u7b26\u8f6c\u6362\u4e3a\u5360\u6ee1\u5269\u4f59\u884c\u7a7a\u95f4\u7684\u591a\u4e2a\u5143\u7d20\u961f\u5217\n",
      "     *\n",
      "     * @param seq \u5f85\u5904\u7406Span\u961f\u5217\n",
      "     * @return \u5904\u7406\u540e\u542b\u6709\u5360\u6ee1\u5269\u4f59\u884c\u7a7a\u95f4\u7684Span\u961f\u5217\n",
      "     */\n",
      "    private LinkedList<Span> spanLinebreakSplit(LinkedList<Span> seq) {\n",
      "        LinkedList<Span> sps = new LinkedList<>();\n",
      "        if (seq == null || seq.isEmpty()) {\n",
      "            return sps;\n",
      "        }\n",
      "        while (!seq.isEmpty()) {\n",
      "            Span pop = seq.pop();\n",
      "            // \u901a\u8fc7\u6362\u884c\u7b26\u5bf9span\u5185\u5bb9\u8fdb\u884c\u5206\u5272\uff0c\u83b7\u53d6\u65b0\u7684\u961f\u5217\n",
      "            LinkedList<Span> spans = pop.splitLineBreak();\n",
      "            sps.addAll(spans);\n",
      "        }\n",
      "        return sps;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5904\u7406\u5360\u4f4d\u7b26\n",
      "     *\n",
      "     * @param seq \u6bb5\u843d\u4e2d\u7684span\u961f\u5217\n",
      "     */\n",
      "    private void processPlaceholder(LinkedList<Span> seq) {\n",
      "        if (seq == null || seq.isEmpty()) {\n",
      "            return;\n",
      "        }\n",
      "        // \u4e0d\u9700\u8981\u52a0\u5165\u5360\u4f4d\u7b26\n",
      "        if ((firstLineIndent == null || firstLineIndent == 0)\n",
      "                && (firstLineIndentWidth == null || firstLineIndentWidth == 0)) {\n",
      "            return;\n",
      "        }\n",
      "\n",
      "        Span firstSpan = seq.peek();\n",
      "        if (firstSpan instanceof PlaceholderSpan) {\n",
      "            PlaceholderSpan h = (PlaceholderSpan) firstSpan;\n",
      "            // \u5df2\u7ecf\u5b58\u5728\u6bb5\u843d\u7f29\u8fdb\u5e76\u4e14\u8bbe\u7f6e\u7684\u6bb5\u843d\u7f29\u8fdb\u4e3a0\uff0c\u90a3\u4e48\u5220\u9664\u8be5\u5360\u4f4d\u7b26\n",
      "            if (h.getHoldWidth() == 0 && h.getHoldNum() == 0) {\n",
      "                seq.pop();\n",
      "            }\n",
      "            if (firstLineIndentWidth != null && firstLineIndentWidth > 0) {\n",
      "                h.setHoldWidth(firstLineIndentWidth);\n",
      "            } else {\n",
      "                // \u91cd\u8bbe\u5360\u4f4d\u7b26\u7684\u5bbd\u5ea6\n",
      "                h.setHoldChars(firstLineIndent);\n",
      "            }\n",
      "            return;\n",
      "        }\n",
      "\n",
      "        if (firstLineIndentWidth != null) {\n",
      "            // \u4f7f\u7528\u6307\u5b9a\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u7684\u5360\u4f4d\u7b26\n",
      "            seq.push(new PlaceholderSpan(firstLineIndentWidth, firstSpan.getFontSize()));\n",
      "        } else {\n",
      "            // \u5982\u679c\u7b2c\u4e00\u4e2a\u4e0d\u662f\u5360\u4f4d\u7b26\uff0c\u5e76\u4e14\u5360\u4f4d\u7b26\u6570\u76ee\u5927\u4e8e0 \u90a3\u4e48\u521b\u5efa\u65b0\u7684\u5360\u4f4d\u7b26,\u5e76\u4e14\u52a0\u5165\u6e32\u67d3\u961f\u5217\n",
      "            seq.push(new PlaceholderSpan(firstLineIndent, firstSpan));\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5982\u679c\u5143\u7d20\u9ad8\u5ea6\u4e0d\u5b58\u5728\u90a3\u4e48\u8bbe\u7f6e\u9ad8\u5ea6\n",
      "     * <p>\n",
      "     * \u5982\u679c\u5df2\u7ecf\u8bbe\u7f6e\u4e86\u9ad8\u5ea6\uff0c\u8be5\u65b9\u6cd5\u4e0d\u4f1a\u5bf9\u8be5\u9ad8\u5ea6\u9020\u6210\u5f71\u54cd\n",
      "     *\n",
      "     * @param height \u9ad8\u5ea6\n",
      "     */\n",
      "    private void setHeightIfNotExist(double height) {\n",
      "        if (getHeight() == null || getHeight() == 0) {\n",
      "            setHeight(height);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5982\u679c\u5bbd\u5ea6\u9ad8\u5ea6\u4e0d\u5b58\u5728\u90a3\u4e48\u8bbe\u7f6e\u5bbd\u5ea6\n",
      "     * <p>\n",
      "     * \u5982\u679c\u5df2\u7ecf\u8bbe\u7f6e\u4e86\u5bbd\u5ea6\uff0c\u8be5\u65b9\u6cd5\u4e0d\u4f1a\u5bf9\u8be5\u5bbd\u5ea6\u9020\u6210\u5f71\u54cd\n",
      "     *\n",
      "     * @param width \u5bbd\u5ea6\n",
      "     */\n",
      "    private void setWidthIfNotExist(double width) {\n",
      "        if (getWidth() == null || getWidth() == 0) {\n",
      "            setWidth(width);\n",
      "        }\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u9884\u5e03\u5c40\n",
      "     * <p>\n",
      "     * \u8be5\u65b9\u6cd5\u4e3b\u8981\u6709\u6e32\u67d3\u5668\u8c03\u7528\uff0c\u8bf7\u52ff\u4e3b\u52a8\u8c03\u7528\u8be5\u65b9\u6cd5\uff0c\u9664\u975e\u4f60\u77e5\u9053\u4f60\u5728\u505a\u4ec0\u4e48\u3002\n",
      "     *\n",
      "     * @param widthLimit \u5bbd\u5ea6\u9650\u5236\n",
      "     * @return \u5143\u7d20\u5c3a\u5bf8\n",
      "     */\n",
      "    @Override\n",
      "    public Rectangle doPrepare(Double widthLimit) {\n",
      "        this.lines.clear();\n",
      "        Double originW = this.getWidth();\n",
      "        // \u884c\u5185\u6700\u5927\u53ef\u7528\u5bbd\u5ea6\n",
      "        Double lineMaxAvailableWidth = this.getWidth();\n",
      "        if (widthLimit == null) {\n",
      "            throw new NullPointerException(\"widthLimit\u4e3a\u7a7a\");\n",
      "        }\n",
      "        widthLimit -= widthPlus();\n",
      "        if (lineMaxAvailableWidth == null || (lineMaxAvailableWidth > widthLimit)) {\n",
      "            // TODO \u5c3a\u5bf8\u91cd\u8bbe\u8b66\u544a\u65e5\u5fd7\n",
      "            lineMaxAvailableWidth = widthLimit;\n",
      "        }\n",
      "\n",
      "//        setWidth(width);\n",
      "        TxtLineBlock line = newLine(lineMaxAvailableWidth);\n",
      "        LinkedList<Span> seq = new LinkedList<>(contents);\n",
      "        // \u5904\u7406\u76f8\u5bf9\u5217\u4e2d\u63d2\u5165\u6216\u8c03\u6574\u9996\u884c\u7f29\u8fdb\u5360\u4f4d\u7b26\n",
      "        processPlaceholder(seq);\n",
      "        // \u5904\u7406Span\u4e2d\u542b\u6709\u6362\u884c\u7b26\u7684\u60c5\u51b5\n",
      "        seq = spanLinebreakSplit(seq);\n",
      "        while (!seq.isEmpty()) {\n",
      "            Span s = seq.pop();\n",
      "\n",
      "            // \u83b7\u53d6Span\u6574\u4f53\u7684\u5757\u7684\u5927\u5c0f\n",
      "            double blockWidth = s.blockSize().getWidth();\n",
      "            if (blockWidth > lineMaxAvailableWidth && s.isIntegrity()) {\n",
      "                // TODO \u8b66\u544a \u4e0d\u53ef\u5206\u5272\u5143\u7d20\u5982\u679c\u5927\u4e8e\u884c\u5bbd\u5ea6\u5219\u5ffd\u7565\n",
      "                continue;\n",
      "            }\n",
      "            // \u7279\u6b8a\u7684\u5982\u679c\u6587\u5b57\u53ef\u4ee5\u88ab\u5206\u5272\uff0c\u4f46\u662f\u7b2c\u4e00\u4e2a\n",
      "            // \u6587\u5b57\u7684\u5927\u5c0f\u5c31\u5df2\u7ecf\u8d85\u8fc7\u53ef\u7528\u6700\u5927\u7a7a\u95f4\u9650\u5236\n",
      "            // \u90a3\u4e48\u4e22\u5f03\u7cfb\u5217\u6587\u5b57\n",
      "            if (!s.isIntegrity() && lineMaxAvailableWidth < s.glyphList().get(0).getW()) {\n",
      "                continue;\n",
      "            }\n",
      "\n",
      "            // \u5c1d\u8bd5\u5411\u884c\u4e2d\u52a0\u5165\u5143\u7d20\n",
      "            boolean added = line.tryAdd(s);\n",
      "            if (added) {\n",
      "                // \u5982\u679c\u52a0\u5165\u7684Span\u662f\u4e00\u4e2a\u9700\u8981\u5360\u6ee1\u5269\u4f59\u884c\u7a7a\u95f4\u7684\u5143\u7d20\uff0c\u90a3\u4e48\u65b0\u8d77\u4e00\u884c\n",
      "                if (s.hasLinebreak()) {\n",
      "                    lines.add(line);\n",
      "                    line = newLine(lineMaxAvailableWidth);\n",
      "                }\n",
      "                // \u6210\u529f\u52a0\u5165\n",
      "                continue;\n",
      "            }\n",
      "\n",
      "            // \u65e0\u6cd5\u52a0\u5165\u884c\u5185\uff0c\u4e14Span \u4e0d\u53ef\u5206\u5272\uff0c\u90a3\u4e48\u9700\u8981\u6362\u884c\n",
      "            if (s.isIntegrity()) {\n",
      "                lines.add(line);\n",
      "                line = newLine(lineMaxAvailableWidth);\n",
      "                // \u91cd\u65b0\u8fdb\u5165\u961f\u5217\n",
      "                seq.push(s);\n",
      "                continue;\n",
      "            }\n",
      "            // \u7531\u4e8e\u6587\u5b57\u5355\u5143\u53ef\u4ee5\u5206\u5272\uff0c\u90a3\u4e48\u5c1d\u8bd5\u901a\u8fc7\u5206\u5272\u7684\u65b9\u5f0f\u586b\u5145\u8be5\u884c\n",
      "            Span toNextLineSpan = line.trySplitAdd(s);\n",
      "            if (toNextLineSpan == null) {\n",
      "                // \u884c\u7a7a\u95f4\u8017\u5c3d\uff0c\u91cd\u65b0\u52a0\u5165\u961f\u5217\n",
      "                seq.push(s);\n",
      "            } else {\n",
      "                // \u5c06\u5207\u5206\u540e\u7684\u6587\u5b57\u5355\u5143\u52a0\u5165\u961f\u5217\n",
      "                seq.push(toNextLineSpan);\n",
      "            }\n",
      "            lines.add(line);\n",
      "            line = newLine(lineMaxAvailableWidth);\n",
      "        }\n",
      "        // \u6700\u540e\u4e00\u884c\u5904\u7406\n",
      "        if (!line.isEmpty()) {\n",
      "            lines.add(line);\n",
      "        }\n",
      "        // \u5408\u5e76\u6240\u6709\u884c\u7684\u9ad8\u5ea6\n",
      "        double height = 0;\n",
      "        for (TxtLineBlock txtLineBlock : lines) {\n",
      "            height += txtLineBlock.getHeight();\n",
      "        }\n",
      "        // \u4e3a\u4e86\u9632\u6b62Double \u7c7b\u578b\u7cbe\u5ea6\u5bfc\u81f4\u90e8\u5206\u60c5\u51b5\u4e0d\u51c6\u786e\uff0c\u5bfc\u81f4\u5143\u7d20\u9ad8\u5ea6\u4e0d\u591f\u5bb9\u7eb3\u6587\u5b57\n",
      "        // \u6dfb\u52a0 0.0001 \u4ee5\u5f25\u8865\u7cbe\u5ea6\u635f\u5931\n",
      "        height += 0.0001;\n",
      "        // \u8bbe\u7f6e\u5143\u7d20\u9ad8\u5ea6\uff0c\u5982\u679c\u5143\u7d20\u5df2\u7ecf\u9884\u8bbe\u9ad8\u5ea6\u90a3\u4e48\u5219\u4e0d\u8bbe\u7f6e\n",
      "        setHeightIfNotExist(height);\n",
      "        //  - \u5bbd\u5ea6 = null: \u6700\u957f\u884c\u5bbd\u5ea6\n",
      "        //  - \u5bbd\u5ea6 != null: \u533a\u95f4 [\u5bbd\u5ea6, widthLimit]\n",
      "        if (originW == null) {\n",
      "            double maxWidth = lines.stream().mapToDouble(TxtLineBlock::getWidth).max().getAsDouble();\n",
      "            setWidth(maxWidth);\n",
      "        } else {\n",
      "            setWidth(Math.min(getWidth(), widthLimit));\n",
      "        }\n",
      "\n",
      "        return new Rectangle(\n",
      "                getWidth() + widthPlus(),\n",
      "                getHeight() + heightPlus());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u884c\u5143\u7d20\uff0c\u5e76\u884c\u4e2d\u6587\u5b57\u5355\u5143\u52a0\u5165\u5230\u5185\u5bb9\u4e2d\n",
      "     *\n",
      "     * @param lines \u884c\u5e8f\u5217\n",
      "     * @return this\n",
      "     */\n",
      "    private Paragraph setLines(LinkedList<TxtLineBlock> lines) {\n",
      "        this.lines = lines;\n",
      "        for (TxtLineBlock item : lines) {\n",
      "            this.contents.addAll(item.getInlineSpans());\n",
      "        }\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public <T extends Div> Div[] contentSplitAdjust(double sHeight, T div1, T div2) {\n",
      "        // \u6587\u5b57\u5185\u5bb9\u6216\u662fBottom \u8017\u5c3d\u4e86\u7a7a\u95f4 \u5206\u6bb5\u7684\u60c5\u51b5\n",
      "        LinkedList<TxtLineBlock> seq2 = new LinkedList<>(this.lines);\n",
      "        LinkedList<TxtLineBlock> seq1 = new LinkedList<>();\n",
      "\n",
      "        // \u53ef\u7528\u7a7a\u95f4\u9ad8\u5ea6\n",
      "        double availableHeight = sHeight - getMarginTop() - getBorderTop() - getPaddingTop();\n",
      "        // \u5728\u52a0\u5165\u884c\u540e\uff0c\u5269\u4f59\u53ef\u7528\u7a7a\u95f4\u9ad8\u5ea6\uff0c\u4f9d\u6b21\u9012\u51cf\u76f4\u81f3\u653e\u4e0d\u4e0b\u4e00\u884c\u3002\n",
      "        double remainHeight = availableHeight;\n",
      "        while (!seq2.isEmpty()) {\n",
      "            TxtLineBlock line = seq2.pop();\n",
      "            if (remainHeight < line.getHeight()) {\n",
      "                // \u7a7a\u95f4\u4e0d\u8db3\n",
      "                seq2.push(line);\n",
      "                break;\n",
      "            } else {\n",
      "                seq1.add(line);\n",
      "                remainHeight -= line.getHeight();\n",
      "            }\n",
      "        }\n",
      "        Paragraph p1 = (Paragraph) div1;\n",
      "        Paragraph p2 = (Paragraph) div2;\n",
      "        // seq2 \u4e3a\u7a7a\u53ef\u80fd\u7531\u4e8eMargin\u7b49\u53c2\u6570\u5bfc\u81f4\u7684\u7a7a\u95f4\u4e0d\u8db3\n",
      "        if (seq2.isEmpty()) {\n",
      "            p1.setLines(seq1)\n",
      "                    .setMarginBottom(0d)\n",
      "                    .setBorderBottom(0d)\n",
      "                    .setPaddingBottom(0d);\n",
      "            p2.setHeight(0d)\n",
      "                    .setMarginTop(0d)\n",
      "                    .setBorderTop(0d)\n",
      "                    .setPaddingTop(0d);\n",
      "            return new Div[]{p1, p2};\n",
      "        }\n",
      "        // \u5269\u4f59\u7a7a\u95f4\u4e00\u884c\u90fd\u65e0\u6cd5\u653e\u4e0b\u7684\u60c5\u51b5\uff0c\u6574\u4e2a\u5bf9\u8c61\u653e\u5230\u4e0b\u4e00\u4e2a\u6bb5\u4e2d\uff0c\u5e76\u4f7f\u7528\u5360\u4f4d\u7b26\u5360\u6709\u4e0a\u4e00\u4e2a\u6bb5\u7684\u7a7a\u95f4\n",
      "        if (seq1.isEmpty()) {\n",
      "            Div placeholder = Div.placeholder(this.getWidth() + widthPlus(), sHeight, this.getFloat());\n",
      "            return new Div[]{placeholder, this};\n",
      "        }\n",
      "        // \u6b63\u5e38\u60c5\u51b5\u4e0b\u7684\u5206\u5272\n",
      "        p1.setLines(seq1)\n",
      "                .setMarginBottom(0d)\n",
      "                .setBorderBottom(0d)\n",
      "                .setPaddingBottom(0d)\n",
      "                .setHeight(availableHeight);\n",
      "        p2.setLines(seq2)\n",
      "                .setMarginTop(0d)\n",
      "                .setBorderTop(0d)\n",
      "                .setPaddingTop(0d)\n",
      "                .setHeight(seq2.stream().mapToDouble(TxtLineBlock::getHeight).sum());\n",
      "        return new Div[]{p1, p2};\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bf7\u52ff\u8c03\u7528\u8be5\u65b9\u6cd5\u514b\u9686\u6bb5\u843d\uff0c\u9664\u975e\u4f60\u77e5\u9053\u4f60\u5728\u5e72\u4ec0\u4e48\n",
      "     *\n",
      "     * @return \u5c5e\u6027\u4e00\u6a21\u4e00\u6837\uff0c\u4f46\u662f\u6ca1\u6709\u4efb\u4f55\u5185\u5bb9\u7684\u6bb5\u843d\n",
      "     */\n",
      "    @Override\n",
      "    public Paragraph clone() {\n",
      "        Paragraph p = new Paragraph();\n",
      "        p = this.copyTo(p);\n",
      "        p.lineSpace = lineSpace;\n",
      "        p.defaultFont = defaultFont;\n",
      "        p.defaultFontSize = defaultFontSize;\n",
      "\n",
      "        p.lines = new LinkedList<>();\n",
      "        p.contents = new LinkedList<>();\n",
      "        return p;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5143\u7d20\u7c7b\u578b\n",
      "     * <p>\n",
      "     * \u5173\u8054\u6e32\u67d3\u5668\uff1a{@link org.ofdrw.layout.engine.render.ParagraphRender}\n",
      "     *\n",
      "     * @return Paragraph\n",
      "     */\n",
      "    @Override\n",
      "    public String elementType() {\n",
      "        return \"Paragraph\";\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.layout.element;\n",
      "\n",
      "\n",
      "import org.junit.jupiter.api.Assertions;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.ofdrw.layout.Rectangle;\n",
      "\n",
      "public class ParagraphTest {\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void doPrepare() {\n",
      "        Paragraph p1 = new Paragraph();\n",
      "        p1.setFontSize(10.0);\n",
      "        // w = 40; h = 10\n",
      "        p1.add(\"\u6211\u8bf4\u4f60\u597d\");\n",
      "        // w = 30 + 15 + 2; h = 15\n",
      "        Span span = new Span(\"\u4f60\u8bf4Hi\")\n",
      "                .setFontSize(15d);\n",
      "        p1.add(span);\n",
      "\n",
      "        Rectangle rectangle = p1.doPrepare(400d);\n",
      "        System.out.println(rectangle);\n",
      "        Assertions.assertEquals(rectangle.getHeight(), 17);\n",
      "        Assertions.assertEquals(rectangle.getWidth(), 400);\n",
      "        // Line1: 40 + 15 = 55 | Line2: 15 + 2 * (7 + 1) = 41\n",
      "        rectangle = p1.doPrepare(55d);\n",
      "        System.out.println(rectangle);\n",
      "        // lineSpace: 2\n",
      "        Assertions.assertEquals(rectangle.getHeight(), (2 + 15) * 2);\n",
      "\n",
      "        span.setLetterSpacing(3d);\n",
      "        rectangle = p1.doPrepare(56d);\n",
      "        System.out.println(rectangle);\n",
      "        Assertions.assertEquals(rectangle.getHeight(), 12 + (15 + 2) * 2);\n",
      "        int cnt = 0;\n",
      "        for (TxtLineBlock line : p1.getLines()) {\n",
      "            cnt++;\n",
      "            System.out.print(cnt + \": \");\n",
      "            line.getInlineSpans().forEach(s-> System.out.print(s.getText()));\n",
      "            System.out.println();\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5b57\u4f53\u5927\u5c0f\u6ea2\u51fa\u6d4b\u8bd5\n",
      "     */\n",
      "    @Test\n",
      "    public void doPrepare2() {\n",
      "        Paragraph p = new Paragraph(10d, 20d).setFontSize(15d);\n",
      "        p.add(\"1\u8bf4\");\n",
      "        p.doPrepare(10d);\n",
      "\n",
      "        Paragraph p2 = new Paragraph(10d, 20d).setFontSize(15d);\n",
      "        p2.add(\"\u597d\u7684\");\n",
      "        p2.doPrepare(10d);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void split() {\n",
      "        Paragraph p = new Paragraph().setFontSize(10d).add(\"\u5c82\u4e0d\u7f8e\u54c9\");\n",
      "        Span span = new Span(\"\u5999\u5999oh\").setFontSize(15d).setLetterSpacing(3d);\n",
      "        p.add(span);\n",
      "        p.doPrepare(55d);\n",
      "        /*\n",
      "        line1: \u5c82\u4e0d\u7f8e\u54c9 40 = 10 * 4 | H 10\n",
      "        lineSpace: 2\n",
      "        line2: \u5999\u5999o    46 = (15 + 3) * 2 + (7 + 1 + 3) | H 15\n",
      "        lineSpace: 2\n",
      "        line3: h        10 = 7 + 1 + 3 | H 15\n",
      "        lineSpace: 2\n",
      "\n",
      "        height = 10 + 15 * 2 + 2 * 3 = 46\n",
      "        */\n",
      "        Div[] sp1 =p.split(11);\n",
      "        Assertions.assertEquals(sp1.length, 2);\n",
      "        Assertions.assertTrue(sp1[0].isPlaceholder());\n",
      "        Assertions.assertEquals(sp1[0].doPrepare(55d).getHeight(), 11);\n",
      "\n",
      "        Div[] sp2 = p.split(12);\n",
      "        Assertions.assertEquals(((Paragraph)sp2[1]).getLines().size(), 2);\n",
      "\n",
      "        p.setMarginTop(12d);\n",
      "        Div[] sp3 = p.split(11d);\n",
      "        Assertions.assertEquals(sp3[0].getMarginTop(), 11);\n",
      "        Assertions.assertEquals(sp3[0].box().getHeight(), 11);\n",
      "        Assertions.assertEquals(sp3[1].getMarginTop(), 1);\n",
      "\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "method_lines_dic": {
      "Paragraph::::add(java.lang.String)": [
        196,
        208
      ],
      "Paragraph::::add(org.ofdrw.layout.element.Span)": [
        216,
        222
      ],
      "Paragraph::::getLineSpace()": [
        224,
        226
      ],
      "Paragraph::::setLineSpace(java.lang.Double)": [
        228,
        231
      ],
      "Paragraph::::getDefaultFont()": [
        233,
        235
      ],
      "Paragraph::::getFontSize()": [
        258,
        260
      ],
      "Paragraph::::setFontSize(java.lang.Double)": [
        273,
        276
      ],
      "Paragraph::::setFontSize(java.lang.Double,boolean)": [
        291,
        296
      ],
      "Paragraph::::getContents()": [
        298,
        300
      ],
      "Paragraph::::setContents(java.util.List<org.ofdrw.layout.element.Span>)": [
        302,
        306
      ],
      "Paragraph::::getLines()": [
        308,
        310
      ],
      "Paragraph::::newLine(double)": [
        318,
        320
      ],
      "Paragraph::::getFirstLineIndent()": [
        328,
        330
      ],
      "Paragraph::::setFirstLineIndent(java.lang.Integer)": [
        340,
        343
      ],
      "Paragraph::::getFirstLineIndentWidth()": [
        352,
        354
      ],
      "Paragraph::::setFirstLineIndentWidth(double)": [
        362,
        365
      ],
      "Paragraph::::clearFirstLineIndent()": [
        372,
        375
      ],
      "Paragraph::::setTextAlign(org.ofdrw.layout.element.TextAlign)": [
        385,
        391
      ],
      "Paragraph::::getTextAlign()": [
        400,
        402
      ],
      "Paragraph::::spanLinebreakSplit(java.util.LinkedList<org.ofdrw.layout.element.Span>)": [
        410,
        422
      ],
      "Paragraph::::processPlaceholder(java.util.LinkedList<org.ofdrw.layout.element.Span>)": [
        429,
        462
      ],
      "Paragraph::::setHeightIfNotExist(double)": [
        471,
        475
      ],
      "Paragraph::::setWidthIfNotExist(double)": [
        484,
        488
      ],
      "Paragraph::::doPrepare(java.lang.Double)": [
        499,
        595
      ],
      "Paragraph::::setLines(java.util.LinkedList<org.ofdrw.layout.element.TxtLineBlock>)": [
        603,
        609
      ],
      "Paragraph::::contentSplitAdjust(double,T,T)": [
        611,
        663
      ],
      "Paragraph::::clone()": [
        670,
        681
      ],
      "Paragraph::::elementType()": [
        690,
        693
      ]
    },
    "test_method_lines_dic": {
      "ParagraphTest::::doPrepare()": [
        11,
        43
      ],
      "ParagraphTest::::doPrepare2()": [
        48,
        57
      ],
      "ParagraphTest::::split()": [
        59,
        89
      ]
    },
    "reverse_method_lines_dic": {
      "196": "Paragraph::::add(java.lang.String)",
      "197": "Paragraph::::add(java.lang.String)",
      "198": "Paragraph::::add(java.lang.String)",
      "199": "Paragraph::::add(java.lang.String)",
      "200": "Paragraph::::add(java.lang.String)",
      "201": "Paragraph::::add(java.lang.String)",
      "202": "Paragraph::::add(java.lang.String)",
      "203": "Paragraph::::add(java.lang.String)",
      "204": "Paragraph::::add(java.lang.String)",
      "205": "Paragraph::::add(java.lang.String)",
      "206": "Paragraph::::add(java.lang.String)",
      "207": "Paragraph::::add(java.lang.String)",
      "208": "Paragraph::::add(java.lang.String)",
      "216": "Paragraph::::add(org.ofdrw.layout.element.Span)",
      "217": "Paragraph::::add(org.ofdrw.layout.element.Span)",
      "218": "Paragraph::::add(org.ofdrw.layout.element.Span)",
      "219": "Paragraph::::add(org.ofdrw.layout.element.Span)",
      "220": "Paragraph::::add(org.ofdrw.layout.element.Span)",
      "221": "Paragraph::::add(org.ofdrw.layout.element.Span)",
      "222": "Paragraph::::add(org.ofdrw.layout.element.Span)",
      "224": "Paragraph::::getLineSpace()",
      "225": "Paragraph::::getLineSpace()",
      "226": "Paragraph::::getLineSpace()",
      "228": "Paragraph::::setLineSpace(java.lang.Double)",
      "229": "Paragraph::::setLineSpace(java.lang.Double)",
      "230": "Paragraph::::setLineSpace(java.lang.Double)",
      "231": "Paragraph::::setLineSpace(java.lang.Double)",
      "233": "Paragraph::::getDefaultFont()",
      "234": "Paragraph::::getDefaultFont()",
      "235": "Paragraph::::getDefaultFont()",
      "258": "Paragraph::::getFontSize()",
      "259": "Paragraph::::getFontSize()",
      "260": "Paragraph::::getFontSize()",
      "273": "Paragraph::::setFontSize(java.lang.Double)",
      "274": "Paragraph::::setFontSize(java.lang.Double)",
      "275": "Paragraph::::setFontSize(java.lang.Double)",
      "276": "Paragraph::::setFontSize(java.lang.Double)",
      "291": "Paragraph::::setFontSize(java.lang.Double,boolean)",
      "292": "Paragraph::::setFontSize(java.lang.Double,boolean)",
      "293": "Paragraph::::setFontSize(java.lang.Double,boolean)",
      "294": "Paragraph::::setFontSize(java.lang.Double,boolean)",
      "295": "Paragraph::::setFontSize(java.lang.Double,boolean)",
      "296": "Paragraph::::setFontSize(java.lang.Double,boolean)",
      "298": "Paragraph::::getContents()",
      "299": "Paragraph::::getContents()",
      "300": "Paragraph::::getContents()",
      "302": "Paragraph::::setContents(java.util.List<org.ofdrw.layout.element.Span>)",
      "303": "Paragraph::::setContents(java.util.List<org.ofdrw.layout.element.Span>)",
      "304": "Paragraph::::setContents(java.util.List<org.ofdrw.layout.element.Span>)",
      "305": "Paragraph::::setContents(java.util.List<org.ofdrw.layout.element.Span>)",
      "306": "Paragraph::::setContents(java.util.List<org.ofdrw.layout.element.Span>)",
      "308": "Paragraph::::getLines()",
      "309": "Paragraph::::getLines()",
      "310": "Paragraph::::getLines()",
      "318": "Paragraph::::newLine(double)",
      "319": "Paragraph::::newLine(double)",
      "320": "Paragraph::::newLine(double)",
      "328": "Paragraph::::getFirstLineIndent()",
      "329": "Paragraph::::getFirstLineIndent()",
      "330": "Paragraph::::getFirstLineIndent()",
      "340": "Paragraph::::setFirstLineIndent(java.lang.Integer)",
      "341": "Paragraph::::setFirstLineIndent(java.lang.Integer)",
      "342": "Paragraph::::setFirstLineIndent(java.lang.Integer)",
      "343": "Paragraph::::setFirstLineIndent(java.lang.Integer)",
      "352": "Paragraph::::getFirstLineIndentWidth()",
      "353": "Paragraph::::getFirstLineIndentWidth()",
      "354": "Paragraph::::getFirstLineIndentWidth()",
      "362": "Paragraph::::setFirstLineIndentWidth(double)",
      "363": "Paragraph::::setFirstLineIndentWidth(double)",
      "364": "Paragraph::::setFirstLineIndentWidth(double)",
      "365": "Paragraph::::setFirstLineIndentWidth(double)",
      "372": "Paragraph::::clearFirstLineIndent()",
      "373": "Paragraph::::clearFirstLineIndent()",
      "374": "Paragraph::::clearFirstLineIndent()",
      "375": "Paragraph::::clearFirstLineIndent()",
      "385": "Paragraph::::setTextAlign(org.ofdrw.layout.element.TextAlign)",
      "386": "Paragraph::::setTextAlign(org.ofdrw.layout.element.TextAlign)",
      "387": "Paragraph::::setTextAlign(org.ofdrw.layout.element.TextAlign)",
      "388": "Paragraph::::setTextAlign(org.ofdrw.layout.element.TextAlign)",
      "389": "Paragraph::::setTextAlign(org.ofdrw.layout.element.TextAlign)",
      "390": "Paragraph::::setTextAlign(org.ofdrw.layout.element.TextAlign)",
      "391": "Paragraph::::setTextAlign(org.ofdrw.layout.element.TextAlign)",
      "400": "Paragraph::::getTextAlign()",
      "401": "Paragraph::::getTextAlign()",
      "402": "Paragraph::::getTextAlign()",
      "410": "Paragraph::::spanLinebreakSplit(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "411": "Paragraph::::spanLinebreakSplit(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "412": "Paragraph::::spanLinebreakSplit(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "413": "Paragraph::::spanLinebreakSplit(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "414": "Paragraph::::spanLinebreakSplit(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "415": "Paragraph::::spanLinebreakSplit(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "416": "Paragraph::::spanLinebreakSplit(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "417": "Paragraph::::spanLinebreakSplit(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "418": "Paragraph::::spanLinebreakSplit(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "419": "Paragraph::::spanLinebreakSplit(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "420": "Paragraph::::spanLinebreakSplit(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "421": "Paragraph::::spanLinebreakSplit(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "422": "Paragraph::::spanLinebreakSplit(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "429": "Paragraph::::processPlaceholder(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "430": "Paragraph::::processPlaceholder(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "431": "Paragraph::::processPlaceholder(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "432": "Paragraph::::processPlaceholder(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "433": "Paragraph::::processPlaceholder(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "434": "Paragraph::::processPlaceholder(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "435": "Paragraph::::processPlaceholder(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "436": "Paragraph::::processPlaceholder(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "437": "Paragraph::::processPlaceholder(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "438": "Paragraph::::processPlaceholder(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "439": "Paragraph::::processPlaceholder(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "440": "Paragraph::::processPlaceholder(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "441": "Paragraph::::processPlaceholder(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "442": "Paragraph::::processPlaceholder(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "443": "Paragraph::::processPlaceholder(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "444": "Paragraph::::processPlaceholder(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "445": "Paragraph::::processPlaceholder(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "446": "Paragraph::::processPlaceholder(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "447": "Paragraph::::processPlaceholder(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "448": "Paragraph::::processPlaceholder(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "449": "Paragraph::::processPlaceholder(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "450": "Paragraph::::processPlaceholder(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "451": "Paragraph::::processPlaceholder(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "452": "Paragraph::::processPlaceholder(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "453": "Paragraph::::processPlaceholder(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "454": "Paragraph::::processPlaceholder(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "455": "Paragraph::::processPlaceholder(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "456": "Paragraph::::processPlaceholder(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "457": "Paragraph::::processPlaceholder(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "458": "Paragraph::::processPlaceholder(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "459": "Paragraph::::processPlaceholder(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "460": "Paragraph::::processPlaceholder(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "461": "Paragraph::::processPlaceholder(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "462": "Paragraph::::processPlaceholder(java.util.LinkedList<org.ofdrw.layout.element.Span>)",
      "471": "Paragraph::::setHeightIfNotExist(double)",
      "472": "Paragraph::::setHeightIfNotExist(double)",
      "473": "Paragraph::::setHeightIfNotExist(double)",
      "474": "Paragraph::::setHeightIfNotExist(double)",
      "475": "Paragraph::::setHeightIfNotExist(double)",
      "484": "Paragraph::::setWidthIfNotExist(double)",
      "485": "Paragraph::::setWidthIfNotExist(double)",
      "486": "Paragraph::::setWidthIfNotExist(double)",
      "487": "Paragraph::::setWidthIfNotExist(double)",
      "488": "Paragraph::::setWidthIfNotExist(double)",
      "499": "Paragraph::::doPrepare(java.lang.Double)",
      "500": "Paragraph::::doPrepare(java.lang.Double)",
      "501": "Paragraph::::doPrepare(java.lang.Double)",
      "502": "Paragraph::::doPrepare(java.lang.Double)",
      "503": "Paragraph::::doPrepare(java.lang.Double)",
      "504": "Paragraph::::doPrepare(java.lang.Double)",
      "505": "Paragraph::::doPrepare(java.lang.Double)",
      "506": "Paragraph::::doPrepare(java.lang.Double)",
      "507": "Paragraph::::doPrepare(java.lang.Double)",
      "508": "Paragraph::::doPrepare(java.lang.Double)",
      "509": "Paragraph::::doPrepare(java.lang.Double)",
      "510": "Paragraph::::doPrepare(java.lang.Double)",
      "511": "Paragraph::::doPrepare(java.lang.Double)",
      "512": "Paragraph::::doPrepare(java.lang.Double)",
      "513": "Paragraph::::doPrepare(java.lang.Double)",
      "514": "Paragraph::::doPrepare(java.lang.Double)",
      "515": "Paragraph::::doPrepare(java.lang.Double)",
      "516": "Paragraph::::doPrepare(java.lang.Double)",
      "517": "Paragraph::::doPrepare(java.lang.Double)",
      "518": "Paragraph::::doPrepare(java.lang.Double)",
      "519": "Paragraph::::doPrepare(java.lang.Double)",
      "520": "Paragraph::::doPrepare(java.lang.Double)",
      "521": "Paragraph::::doPrepare(java.lang.Double)",
      "522": "Paragraph::::doPrepare(java.lang.Double)",
      "523": "Paragraph::::doPrepare(java.lang.Double)",
      "524": "Paragraph::::doPrepare(java.lang.Double)",
      "525": "Paragraph::::doPrepare(java.lang.Double)",
      "526": "Paragraph::::doPrepare(java.lang.Double)",
      "527": "Paragraph::::doPrepare(java.lang.Double)",
      "528": "Paragraph::::doPrepare(java.lang.Double)",
      "529": "Paragraph::::doPrepare(java.lang.Double)",
      "530": "Paragraph::::doPrepare(java.lang.Double)",
      "531": "Paragraph::::doPrepare(java.lang.Double)",
      "532": "Paragraph::::doPrepare(java.lang.Double)",
      "533": "Paragraph::::doPrepare(java.lang.Double)",
      "534": "Paragraph::::doPrepare(java.lang.Double)",
      "535": "Paragraph::::doPrepare(java.lang.Double)",
      "536": "Paragraph::::doPrepare(java.lang.Double)",
      "537": "Paragraph::::doPrepare(java.lang.Double)",
      "538": "Paragraph::::doPrepare(java.lang.Double)",
      "539": "Paragraph::::doPrepare(java.lang.Double)",
      "540": "Paragraph::::doPrepare(java.lang.Double)",
      "541": "Paragraph::::doPrepare(java.lang.Double)",
      "542": "Paragraph::::doPrepare(java.lang.Double)",
      "543": "Paragraph::::doPrepare(java.lang.Double)",
      "544": "Paragraph::::doPrepare(java.lang.Double)",
      "545": "Paragraph::::doPrepare(java.lang.Double)",
      "546": "Paragraph::::doPrepare(java.lang.Double)",
      "547": "Paragraph::::doPrepare(java.lang.Double)",
      "548": "Paragraph::::doPrepare(java.lang.Double)",
      "549": "Paragraph::::doPrepare(java.lang.Double)",
      "550": "Paragraph::::doPrepare(java.lang.Double)",
      "551": "Paragraph::::doPrepare(java.lang.Double)",
      "552": "Paragraph::::doPrepare(java.lang.Double)",
      "553": "Paragraph::::doPrepare(java.lang.Double)",
      "554": "Paragraph::::doPrepare(java.lang.Double)",
      "555": "Paragraph::::doPrepare(java.lang.Double)",
      "556": "Paragraph::::doPrepare(java.lang.Double)",
      "557": "Paragraph::::doPrepare(java.lang.Double)",
      "558": "Paragraph::::doPrepare(java.lang.Double)",
      "559": "Paragraph::::doPrepare(java.lang.Double)",
      "560": "Paragraph::::doPrepare(java.lang.Double)",
      "561": "Paragraph::::doPrepare(java.lang.Double)",
      "562": "Paragraph::::doPrepare(java.lang.Double)",
      "563": "Paragraph::::doPrepare(java.lang.Double)",
      "564": "Paragraph::::doPrepare(java.lang.Double)",
      "565": "Paragraph::::doPrepare(java.lang.Double)",
      "566": "Paragraph::::doPrepare(java.lang.Double)",
      "567": "Paragraph::::doPrepare(java.lang.Double)",
      "568": "Paragraph::::doPrepare(java.lang.Double)",
      "569": "Paragraph::::doPrepare(java.lang.Double)",
      "570": "Paragraph::::doPrepare(java.lang.Double)",
      "571": "Paragraph::::doPrepare(java.lang.Double)",
      "572": "Paragraph::::doPrepare(java.lang.Double)",
      "573": "Paragraph::::doPrepare(java.lang.Double)",
      "574": "Paragraph::::doPrepare(java.lang.Double)",
      "575": "Paragraph::::doPrepare(java.lang.Double)",
      "576": "Paragraph::::doPrepare(java.lang.Double)",
      "577": "Paragraph::::doPrepare(java.lang.Double)",
      "578": "Paragraph::::doPrepare(java.lang.Double)",
      "579": "Paragraph::::doPrepare(java.lang.Double)",
      "580": "Paragraph::::doPrepare(java.lang.Double)",
      "581": "Paragraph::::doPrepare(java.lang.Double)",
      "582": "Paragraph::::doPrepare(java.lang.Double)",
      "583": "Paragraph::::doPrepare(java.lang.Double)",
      "584": "Paragraph::::doPrepare(java.lang.Double)",
      "585": "Paragraph::::doPrepare(java.lang.Double)",
      "586": "Paragraph::::doPrepare(java.lang.Double)",
      "587": "Paragraph::::doPrepare(java.lang.Double)",
      "588": "Paragraph::::doPrepare(java.lang.Double)",
      "589": "Paragraph::::doPrepare(java.lang.Double)",
      "590": "Paragraph::::doPrepare(java.lang.Double)",
      "591": "Paragraph::::doPrepare(java.lang.Double)",
      "592": "Paragraph::::doPrepare(java.lang.Double)",
      "593": "Paragraph::::doPrepare(java.lang.Double)",
      "594": "Paragraph::::doPrepare(java.lang.Double)",
      "595": "Paragraph::::doPrepare(java.lang.Double)",
      "603": "Paragraph::::setLines(java.util.LinkedList<org.ofdrw.layout.element.TxtLineBlock>)",
      "604": "Paragraph::::setLines(java.util.LinkedList<org.ofdrw.layout.element.TxtLineBlock>)",
      "605": "Paragraph::::setLines(java.util.LinkedList<org.ofdrw.layout.element.TxtLineBlock>)",
      "606": "Paragraph::::setLines(java.util.LinkedList<org.ofdrw.layout.element.TxtLineBlock>)",
      "607": "Paragraph::::setLines(java.util.LinkedList<org.ofdrw.layout.element.TxtLineBlock>)",
      "608": "Paragraph::::setLines(java.util.LinkedList<org.ofdrw.layout.element.TxtLineBlock>)",
      "609": "Paragraph::::setLines(java.util.LinkedList<org.ofdrw.layout.element.TxtLineBlock>)",
      "611": "Paragraph::::contentSplitAdjust(double,T,T)",
      "612": "Paragraph::::contentSplitAdjust(double,T,T)",
      "613": "Paragraph::::contentSplitAdjust(double,T,T)",
      "614": "Paragraph::::contentSplitAdjust(double,T,T)",
      "615": "Paragraph::::contentSplitAdjust(double,T,T)",
      "616": "Paragraph::::contentSplitAdjust(double,T,T)",
      "617": "Paragraph::::contentSplitAdjust(double,T,T)",
      "618": "Paragraph::::contentSplitAdjust(double,T,T)",
      "619": "Paragraph::::contentSplitAdjust(double,T,T)",
      "620": "Paragraph::::contentSplitAdjust(double,T,T)",
      "621": "Paragraph::::contentSplitAdjust(double,T,T)",
      "622": "Paragraph::::contentSplitAdjust(double,T,T)",
      "623": "Paragraph::::contentSplitAdjust(double,T,T)",
      "624": "Paragraph::::contentSplitAdjust(double,T,T)",
      "625": "Paragraph::::contentSplitAdjust(double,T,T)",
      "626": "Paragraph::::contentSplitAdjust(double,T,T)",
      "627": "Paragraph::::contentSplitAdjust(double,T,T)",
      "628": "Paragraph::::contentSplitAdjust(double,T,T)",
      "629": "Paragraph::::contentSplitAdjust(double,T,T)",
      "630": "Paragraph::::contentSplitAdjust(double,T,T)",
      "631": "Paragraph::::contentSplitAdjust(double,T,T)",
      "632": "Paragraph::::contentSplitAdjust(double,T,T)",
      "633": "Paragraph::::contentSplitAdjust(double,T,T)",
      "634": "Paragraph::::contentSplitAdjust(double,T,T)",
      "635": "Paragraph::::contentSplitAdjust(double,T,T)",
      "636": "Paragraph::::contentSplitAdjust(double,T,T)",
      "637": "Paragraph::::contentSplitAdjust(double,T,T)",
      "638": "Paragraph::::contentSplitAdjust(double,T,T)",
      "639": "Paragraph::::contentSplitAdjust(double,T,T)",
      "640": "Paragraph::::contentSplitAdjust(double,T,T)",
      "641": "Paragraph::::contentSplitAdjust(double,T,T)",
      "642": "Paragraph::::contentSplitAdjust(double,T,T)",
      "643": "Paragraph::::contentSplitAdjust(double,T,T)",
      "644": "Paragraph::::contentSplitAdjust(double,T,T)",
      "645": "Paragraph::::contentSplitAdjust(double,T,T)",
      "646": "Paragraph::::contentSplitAdjust(double,T,T)",
      "647": "Paragraph::::contentSplitAdjust(double,T,T)",
      "648": "Paragraph::::contentSplitAdjust(double,T,T)",
      "649": "Paragraph::::contentSplitAdjust(double,T,T)",
      "650": "Paragraph::::contentSplitAdjust(double,T,T)",
      "651": "Paragraph::::contentSplitAdjust(double,T,T)",
      "652": "Paragraph::::contentSplitAdjust(double,T,T)",
      "653": "Paragraph::::contentSplitAdjust(double,T,T)",
      "654": "Paragraph::::contentSplitAdjust(double,T,T)",
      "655": "Paragraph::::contentSplitAdjust(double,T,T)",
      "656": "Paragraph::::contentSplitAdjust(double,T,T)",
      "657": "Paragraph::::contentSplitAdjust(double,T,T)",
      "658": "Paragraph::::contentSplitAdjust(double,T,T)",
      "659": "Paragraph::::contentSplitAdjust(double,T,T)",
      "660": "Paragraph::::contentSplitAdjust(double,T,T)",
      "661": "Paragraph::::contentSplitAdjust(double,T,T)",
      "662": "Paragraph::::contentSplitAdjust(double,T,T)",
      "663": "Paragraph::::contentSplitAdjust(double,T,T)",
      "670": "Paragraph::::clone()",
      "671": "Paragraph::::clone()",
      "672": "Paragraph::::clone()",
      "673": "Paragraph::::clone()",
      "674": "Paragraph::::clone()",
      "675": "Paragraph::::clone()",
      "676": "Paragraph::::clone()",
      "677": "Paragraph::::clone()",
      "678": "Paragraph::::clone()",
      "679": "Paragraph::::clone()",
      "680": "Paragraph::::clone()",
      "681": "Paragraph::::clone()",
      "690": "Paragraph::::elementType()",
      "691": "Paragraph::::elementType()",
      "692": "Paragraph::::elementType()",
      "693": "Paragraph::::elementType()"
    },
    "test_reverse_method_lines_dic": {
      "11": "ParagraphTest::::doPrepare()",
      "12": "ParagraphTest::::doPrepare()",
      "13": "ParagraphTest::::doPrepare()",
      "14": "ParagraphTest::::doPrepare()",
      "15": "ParagraphTest::::doPrepare()",
      "16": "ParagraphTest::::doPrepare()",
      "17": "ParagraphTest::::doPrepare()",
      "18": "ParagraphTest::::doPrepare()",
      "19": "ParagraphTest::::doPrepare()",
      "20": "ParagraphTest::::doPrepare()",
      "21": "ParagraphTest::::doPrepare()",
      "22": "ParagraphTest::::doPrepare()",
      "23": "ParagraphTest::::doPrepare()",
      "24": "ParagraphTest::::doPrepare()",
      "25": "ParagraphTest::::doPrepare()",
      "26": "ParagraphTest::::doPrepare()",
      "27": "ParagraphTest::::doPrepare()",
      "28": "ParagraphTest::::doPrepare()",
      "29": "ParagraphTest::::doPrepare()",
      "30": "ParagraphTest::::doPrepare()",
      "31": "ParagraphTest::::doPrepare()",
      "32": "ParagraphTest::::doPrepare()",
      "33": "ParagraphTest::::doPrepare()",
      "34": "ParagraphTest::::doPrepare()",
      "35": "ParagraphTest::::doPrepare()",
      "36": "ParagraphTest::::doPrepare()",
      "37": "ParagraphTest::::doPrepare()",
      "38": "ParagraphTest::::doPrepare()",
      "39": "ParagraphTest::::doPrepare()",
      "40": "ParagraphTest::::doPrepare()",
      "41": "ParagraphTest::::doPrepare()",
      "42": "ParagraphTest::::doPrepare()",
      "43": "ParagraphTest::::doPrepare()",
      "48": "ParagraphTest::::doPrepare2()",
      "49": "ParagraphTest::::doPrepare2()",
      "50": "ParagraphTest::::doPrepare2()",
      "51": "ParagraphTest::::doPrepare2()",
      "52": "ParagraphTest::::doPrepare2()",
      "53": "ParagraphTest::::doPrepare2()",
      "54": "ParagraphTest::::doPrepare2()",
      "55": "ParagraphTest::::doPrepare2()",
      "56": "ParagraphTest::::doPrepare2()",
      "57": "ParagraphTest::::doPrepare2()",
      "59": "ParagraphTest::::split()",
      "60": "ParagraphTest::::split()",
      "61": "ParagraphTest::::split()",
      "62": "ParagraphTest::::split()",
      "63": "ParagraphTest::::split()",
      "64": "ParagraphTest::::split()",
      "65": "ParagraphTest::::split()",
      "66": "ParagraphTest::::split()",
      "67": "ParagraphTest::::split()",
      "68": "ParagraphTest::::split()",
      "69": "ParagraphTest::::split()",
      "70": "ParagraphTest::::split()",
      "71": "ParagraphTest::::split()",
      "72": "ParagraphTest::::split()",
      "73": "ParagraphTest::::split()",
      "74": "ParagraphTest::::split()",
      "75": "ParagraphTest::::split()",
      "76": "ParagraphTest::::split()",
      "77": "ParagraphTest::::split()",
      "78": "ParagraphTest::::split()",
      "79": "ParagraphTest::::split()",
      "80": "ParagraphTest::::split()",
      "81": "ParagraphTest::::split()",
      "82": "ParagraphTest::::split()",
      "83": "ParagraphTest::::split()",
      "84": "ParagraphTest::::split()",
      "85": "ParagraphTest::::split()",
      "86": "ParagraphTest::::split()",
      "87": "ParagraphTest::::split()",
      "88": "ParagraphTest::::split()",
      "89": "ParagraphTest::::split()"
    },
    "tests": [
      {
        "test_lines": [
          48,
          57
        ],
        "covered_lines": [
          24,
          30,
          35,
          62,
          71,
          72,
          73,
          83,
          84,
          85,
          86,
          87,
          197,
          200,
          201,
          204,
          205,
          207,
          217,
          220,
          221,
          274,
          275,
          319,
          411,
          412,
          415,
          416,
          418,
          419,
          420,
          421,
          430,
          434,
          436,
          472,
          475,
          501,
          502,
          504,
          505,
          508,
          509,
          515,
          516,
          518,
          520,
          521,
          522,
          525,
          526,
          533,
          538,
          539,
          541,
          550,
          558,
          559,
          564,
          566,
          567,
          568,
          570,
          571,
          574,
          575,
          576,
          577,
          580,
          582,
          585,
          589,
          592,
          593,
          594
        ]
      },
      {
        "test_lines": [
          59,
          89
        ],
        "covered_lines": [
          24,
          30,
          35,
          62,
          83,
          84,
          85,
          86,
          87,
          197,
          200,
          201,
          204,
          205,
          207,
          217,
          220,
          221,
          274,
          275,
          309,
          319,
          411,
          412,
          415,
          416,
          418,
          419,
          420,
          421,
          430,
          434,
          436,
          472,
          473,
          475,
          501,
          502,
          504,
          505,
          508,
          509,
          511,
          515,
          516,
          518,
          520,
          521,
          522,
          525,
          526,
          533,
          538,
          539,
          541,
          550,
          558,
          559,
          564,
          566,
          567,
          568,
          570,
          571,
          574,
          575,
          576,
          577,
          580,
          582,
          585,
          586,
          587,
          588,
          592,
          593,
          594,
          614,
          615,
          618,
          620,
          621,
          622,
          623,
          625,
          626,
          632,
          633,
          635,
          647,
          648,
          649,
          672,
          673,
          674,
          675,
          676,
          678,
          679,
          680
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-layout/src/main/java/org/ofdrw/layout/element/canvas/DrawContext.java": {
    "class_content": [
      "package org.ofdrw.layout.element.canvas;\n",
      "\n",
      "import org.ofdrw.core.basicStructure.pageObj.layer.block.CT_PageBlock;\n",
      "import org.ofdrw.core.basicStructure.pageObj.layer.block.ImageObject;\n",
      "import org.ofdrw.core.basicStructure.pageObj.layer.block.PathObject;\n",
      "import org.ofdrw.core.basicStructure.pageObj.layer.block.TextObject;\n",
      "import org.ofdrw.core.basicType.ST_Array;\n",
      "import org.ofdrw.core.basicType.ST_Box;\n",
      "import org.ofdrw.core.basicType.ST_ID;\n",
      "import org.ofdrw.core.graph.pathObj.AbbreviatedData;\n",
      "import org.ofdrw.core.graph.pathObj.CT_Path;\n",
      "import org.ofdrw.core.graph.pathObj.OptVal;\n",
      "import org.ofdrw.core.pageDescription.CT_GraphicUnit;\n",
      "import org.ofdrw.core.pageDescription.clips.CT_Clip;\n",
      "import org.ofdrw.core.pageDescription.clips.Clips;\n",
      "import org.ofdrw.core.pageDescription.color.color.CT_Color;\n",
      "import org.ofdrw.core.pageDescription.color.color.ColorClusterType;\n",
      "import org.ofdrw.core.pageDescription.drawParam.LineCapType;\n",
      "import org.ofdrw.core.pageDescription.drawParam.LineJoinType;\n",
      "import org.ofdrw.core.text.TextCode;\n",
      "import org.ofdrw.core.text.font.CT_Font;\n",
      "import org.ofdrw.core.text.text.CT_Text;\n",
      "import org.ofdrw.core.text.text.Direction;\n",
      "import org.ofdrw.core.text.text.Weight;\n",
      "import org.ofdrw.font.Font;\n",
      "import org.ofdrw.layout.engine.ExistCTFont;\n",
      "import org.ofdrw.layout.engine.ResManager;\n",
      "\n",
      "import javax.imageio.ImageIO;\n",
      "import java.awt.*;\n",
      "import java.awt.geom.AffineTransform;\n",
      "import java.awt.geom.NoninvertibleTransformException;\n",
      "import java.awt.image.BufferedImage;\n",
      "import java.io.Closeable;\n",
      "import java.io.IOException;\n",
      "import java.nio.file.Files;\n",
      "import java.nio.file.Path;\n",
      "import java.util.LinkedList;\n",
      "import java.util.concurrent.atomic.AtomicInteger;\n",
      "\n",
      "/**\n",
      " * \u7ed8\u5236\u5668\u7ed8\u5236\u4e0a\u4e0b\u6587\n",
      " * <p>\n",
      " * \u4e0a\u4e0b\u6587\u4e2d\u63d0\u4f9b\u7cfb\u5217\u7684\u7ed8\u5236\u65b9\u6cd5\u4f9b\u7ed8\u5236\n",
      " * <p>\n",
      " * \u4e00\u4e2a\u8def\u5f84\u5bf9\u8c61\u53ea\u5141\u8bb8\u51fa\u73b0\u4e00\u79cd\u63cf\u8fb9\u548c\u586b\u5145\u989c\u8272\n",
      " * \u91cd\u590d\u8bbe\u7f6e\uff0c\u53d6\u6700\u540e\u4e00\u6b21\u8bbe\u7f6e\u7684\u989c\u8272\u3002\n",
      " * <p>\n",
      " * \u5173\u4e8e\u8def\u5f84\uff1a\n",
      " * 1. beginPath \u6e05\u7a7a\u8def\u5f84\u3002\n",
      " * 2. \u6240\u6709\u8def\u5f84\u5728 fill \u548c stroke \u662f\u624d\u5e94\u7528\u56fe\u5143\u6548\u679c\u3002\n",
      " * 3. \u8def\u5f84\u6570\u636e \u4e0e \u7ed8\u56fe\u6570\u636e\u5206\u5f00\u3002\n",
      " * 4. \u9664\u4e86 beginPath \u4e4b\u5916\u6240\u6709\u6570\u636e\u5747\u8ba4\u4e3a\u662f \u5411\u5df2\u7ecf\u5b58\u5728\u7684\u8def\u5f84\u8ffd\u52a0\u65b0\u7684\u8def\u5f84\u3002\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2020-05-01 11:29:20\n",
      " */\n",
      "public class DrawContext implements Closeable {\n",
      "    static final ST_Array ONE = ST_Array.unitCTM();\n",
      "    /**\n",
      "     * \u7528\u4e8e\u5bb9\u7eb3\u6240\u7ed8\u5236\u7684\u6240\u6709\u56fe\u50cf\u7684\u5bb9\u5668\n",
      "     */\n",
      "    private CT_PageBlock container;\n",
      "\n",
      "    /**\n",
      "     * \u5bf9\u8c61ID\u63d0\u4f9b\u5668\n",
      "     */\n",
      "    private AtomicInteger maxUnitID;\n",
      "\n",
      "    /**\n",
      "     * \u8d44\u6e90\u7ba1\u7406\u5668\n",
      "     */\n",
      "    private ResManager resManager;\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u8fb9\u6846\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f\u753b\u5e03\u5927\u5c0f\u4ee5\u53ca\u4f4d\u7f6e\n",
      "     */\n",
      "    private ST_Box boundary;\n",
      "\n",
      "    /**\n",
      "     * \u753b\u5e03\u72b6\u6001\n",
      "     */\n",
      "    private CanvasState state;\n",
      "\n",
      "    /**\n",
      "     * \u7ed8\u5236\u53c2\u6570\u6808\n",
      "     * <p>\n",
      "     * save() \u65f6\u5c06\u5f53\u524d\u7ed8\u5236\u53c2\u6570\u538b\u6808\n",
      "     * <p>\n",
      "     * restore() \u65f6\u5c06\u5f53\u524d\u7ed8\u5236\u53c2\u6570\u51fa\u6808\n",
      "     */\n",
      "    private LinkedList<CanvasState> stack;\n",
      "\n",
      "    /**\n",
      "     * \u586b\u5145\u989c\u8272\n",
      "     * <p>\n",
      "     * \u652f\u6301\uff1a\n",
      "     * <p>\n",
      "     * {@link String} 16\u8fdb\u5236\u989c\u8272\u503c\uff0c#000000\u3001rgb(0,0,0)\u3001rgba(0,0,0,1)\n",
      "     * <p>\n",
      "     * {@link CT_Color} OFD\u989c\u8272\u5bf9\u8c61\n",
      "     * <p>\n",
      "     * {@link ColorClusterType} \u989c\u8272\u65cf\n",
      "     * <p>\n",
      "     * {@link CanvasPattern} \u56fe\u6848\n",
      "     * <p>\n",
      "     * {@link CanvasGradient} \u6e10\u53d8\n",
      "     * <p>\n",
      "     * {@link CanvasRadialGradient} \u5f84\u5411\u6e10\u53d8\n",
      "     */\n",
      "    public Object fillStyle;\n",
      "\n",
      "    /**\n",
      "     * \u63cf\u8fb9\u989c\u8272\n",
      "     * <p>\n",
      "     * \u652f\u6301\uff1a\n",
      "     * <p>\n",
      "     * {@link String} 16\u8fdb\u5236\u989c\u8272\u503c\uff0c#000000\u3001rgb(0,0,0)\u3001rgba(0,0,0,1)\n",
      "     * <p>\n",
      "     * {@link CT_Color} OFD\u989c\u8272\u5bf9\u8c61\n",
      "     * <p>\n",
      "     * {@link ColorClusterType} \u989c\u8272\u65cf\n",
      "     * <p>\n",
      "     * {@link CanvasPattern} \u56fe\u6848\n",
      "     * <p>\n",
      "     * {@link CanvasGradient} \u6e10\u53d8\n",
      "     * <p>\n",
      "     * {@link CanvasRadialGradient} \u5f84\u5411\u6e10\u53d8\n",
      "     */\n",
      "    public Object strokeStyle;\n",
      "\n",
      "    /**\n",
      "     * \u5b57\u4f53\u63cf\u8ff0 \u683c\u5f0f\u4e0eCSS3\u683c\u5f0f\u4e00\u81f4\n",
      "     * <p>\n",
      "     * [font-style] [font-weight] font-size font-family\n",
      "     * <p>\n",
      "     * \u5b83\u5fc5\u9700\u5305\u542b font-size font-family\uff0c[]\u5185\u5bb9\u4e3a\u53ef\u9009\n",
      "     * <p>\n",
      "     * \u8be6\u89c1 {@code https://developer.mozilla.org/en-US/docs/Web/CSS/font}\n",
      "     * <p>\n",
      "     * font-style: normal | italic\n",
      "     * <p>\n",
      "     * font-weight: normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900\n",
      "     * <p>\n",
      "     * font-size: 12px | 3.17mm \uff08\u9ed8\u8ba4\u5355\u4f4d\u4e3a mm\uff09\n",
      "     * <p>\n",
      "     * font-family: \u5b8b\u4f53 | SimSun | Times New Roman | Times | serif | sans-serif | monospace | cursive | fantasy\n",
      "     * <p>\n",
      "     * font-family \u4e3a\u5fc5\u9009\u9879\uff0c\u5176\u4ed6\u4e3a\u53ef\u9009\u9879\n",
      "     * <p>\n",
      "     * font-size \u548c line-height \u53ef\u4ee5\u4f7f\u7528 px \u6216 mm \u4f5c\u4e3a\u5355\u4f4d\uff0c\u82e5\u4e0d\u6307\u5b9a\u5355\u4f4d\u5219\u9ed8\u8ba4\u4e3a mm\n",
      "     * <p>\n",
      "     * \u951a\u70b9\uff1a\n",
      "     * - fillText\n",
      "     * - measureText\n",
      "     */\n",
      "    public String font;\n",
      "\n",
      "    /**\n",
      "     * \u6bcf\u6beb\u7c73\u50cf\u7d20\u6570\u91cf pixel per millimeter\n",
      "     */\n",
      "    public double PPM;\n",
      "\n",
      "    private DrawContext() {\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u521b\u5efa\u7ed8\u5236\u4e0a\u4e0b\u6587\n",
      "     *\n",
      "     * @param container  \u7ed8\u5236\u5185\u5bb9\u7f29\u6240\u653e\u7f6e\u5bb9\u5668\n",
      "     * @param boundary   \u753b\u5e03\u5927\u5c0f\u4ee5\u53ca\u4f4d\u7f6e\n",
      "     * @param maxUnitID  \u81ea\u589e\u7684\u5bf9\u8c61ID\n",
      "     * @param resManager \u8d44\u6e90\u7ba1\u7406\u5668\n",
      "     */\n",
      "    public DrawContext(CT_PageBlock container, ST_Box boundary, AtomicInteger maxUnitID, ResManager resManager) {\n",
      "        this.container = container;\n",
      "        this.boundary = boundary;\n",
      "        this.maxUnitID = maxUnitID;\n",
      "        this.resManager = resManager;\n",
      "        this.state = new CanvasState();\n",
      "        this.stack = new LinkedList<>();\n",
      "        this.PPM = 3.78;\n",
      "        // \u521d\u59cb\u5316\u989c\u8272\u9ed8\u8ba4\u4e3a\u9ed1\u8272\n",
      "        this.fillStyle = \"#000000\";\n",
      "        this.strokeStyle = \"#000000\";\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5f00\u542f\u4e00\u6bb5\u65b0\u7684\u8def\u5f84\n",
      "     * <p>\n",
      "     * \u5982\u679c\u5df2\u7ecf\u5b58\u5728\u8def\u5f84\uff0c\u90a3\u4e48\u5c06\u4f1a\u6e05\u9664\u5df2\u7ecf\u5b58\u5728\u7684\u6240\u6709\u8def\u5f84\u3002\n",
      "     *\n",
      "     * @return this\n",
      "     */\n",
      "    public DrawContext beginPath() {\n",
      "        this.state.path = new AbbreviatedData();\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u5173\u95ed\u8def\u5f84\n",
      "     * <p>\n",
      "     * \u5982\u679c\u8def\u5f84\u5b58\u5728\u63cf\u8fb9\u6216\u8005\u586b\u5145\uff0c\u90a3\u4e48\u6539\u8def\u5f84\u5c06\u4f1a\u88ab\u52a0\u5165\u5230\u56fe\u5f62\u5bb9\u5668\u4e2d\u8fdb\u884c\u6e32\u67d3\n",
      "     * <p>\n",
      "     * \u8def\u5f84\u5173\u95ed\u540e\u5c06\u4f1a\u6e05\u7a7a\u4e0a\u4e0b\u6587\u4e2d\u7684\u8def\u5f84\u5bf9\u8c61\n",
      "     *\n",
      "     * @return this\n",
      "     */\n",
      "    public DrawContext closePath() {\n",
      "        if (this.state.path == null) {\n",
      "            return this;\n",
      "        }\n",
      "        this.state.path.close();\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u4ece\u539f\u59cb\u753b\u5e03\u4e2d\u526a\u5207\u4efb\u610f\u5f62\u72b6\u548c\u5c3a\u5bf8\n",
      "     * <p>\n",
      "     * \u88c1\u526a\u8def\u5f84\u4ee5\u5f53\u524d\u7684\u8def\u5f84\u4f5c\u4e3a\u88c1\u526a\u53c2\u6570\n",
      "     * <p>\n",
      "     * \u88c1\u526a\u533a\u57df\u53d7\u53d8\u6362\u77e9\u9635\u5f71\u54cd\n",
      "     *\n",
      "     * @return this\n",
      "     */\n",
      "    public DrawContext clip() {\n",
      "        if (this.state.path == null) {\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        this.state.clipArea = this.state.path.clone();\n",
      "        if (this.state.ctm != null && !ONE.equals(this.state.ctm)) {\n",
      "            // \u53d7\u5230CTM\u7684\u5f71\u54cd\u5f62\u53d8\n",
      "            transform(this.state.clipArea, this.state.ctm);\n",
      "        }\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u79fb\u52a8\u7ed8\u5236\u70b9\u5230\u6307\u5b9a\u4f4d\u7f6e\n",
      "     *\n",
      "     * @param x X\u5750\u6807\n",
      "     * @param y Y\u5750\u6807\n",
      "     * @return this\n",
      "     */\n",
      "    public DrawContext moveTo(double x, double y) {\n",
      "        if (this.state.path == null) {\n",
      "            this.state.path = new AbbreviatedData();\n",
      "        }\n",
      "        this.state.path.moveTo(x, y);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u4ece\u5f53\u524d\u70b9\u8fde\u7ebf\u5230\u6307\u5b9a\u70b9\n",
      "     * <p>\n",
      "     * \u8bf7\u5728\u8c03\u7528\u524d\u521b\u5efa\u8def\u5f84\n",
      "     *\n",
      "     * @param x X\u5750\u6807\n",
      "     * @param y Y\u5750\u6807\n",
      "     * @return this\n",
      "     */\n",
      "    public DrawContext lineTo(double x, double y) {\n",
      "        if (this.state.path == null) {\n",
      "            return this;\n",
      "        }\n",
      "        this.state.path.lineTo(x, y);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u901a\u8fc7\u4e8c\u6b21\u8d1d\u585e\u5c14\u66f2\u7ebf\u7684\u6307\u5b9a\u63a7\u5236\u70b9\uff0c\u5411\u5f53\u524d\u8def\u5f84\u6dfb\u52a0\u4e00\u4e2a\u70b9\u3002\n",
      "     *\n",
      "     * @param cpx \u8d1d\u585e\u5c14\u63a7\u5236\u70b9\u7684 x \u5750\u6807\n",
      "     * @param cpy \u8d1d\u585e\u5c14\u63a7\u5236\u70b9\u7684 y \u5750\u6807\n",
      "     * @param x   \u7ed3\u675f\u70b9\u7684 x \u5750\u6807\n",
      "     * @param y   \u7ed3\u675f\u70b9\u7684 y \u5750\u6807\n",
      "     * @return this\n",
      "     */\n",
      "    public DrawContext quadraticCurveTo(double cpx, double cpy, double x, double y) {\n",
      "        if (this.state.path == null) {\n",
      "            this.state.path = new AbbreviatedData();\n",
      "        }\n",
      "        this.state.path.quadraticBezier(cpx, cpy, x, y);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u65b9\u6cd5\u4e09\u6b21\u8d1d\u585e\u5c14\u66f2\u7ebf\u7684\u6307\u5b9a\u63a7\u5236\u70b9\uff0c\u5411\u5f53\u524d\u8def\u5f84\u6dfb\u52a0\u4e00\u4e2a\u70b9\u3002\n",
      "     *\n",
      "     * @param cp1x \u7b2c\u4e00\u4e2a\u8d1d\u585e\u5c14\u63a7\u5236\u70b9\u7684 x \u5750\u6807\n",
      "     * @param cp1y \u7b2c\u4e00\u4e2a\u8d1d\u585e\u5c14\u63a7\u5236\u70b9\u7684 y \u5750\u6807\n",
      "     * @param cp2x \u7b2c\u4e8c\u4e2a\u8d1d\u585e\u5c14\u63a7\u5236\u70b9\u7684 x \u5750\u6807\n",
      "     * @param cp2y \u7b2c\u4e8c\u4e2a\u8d1d\u585e\u5c14\u63a7\u5236\u70b9\u7684 y \u5750\u6807\n",
      "     * @param x    \u7ed3\u675f\u70b9\u7684 x \u5750\u6807\n",
      "     * @param y    \u7ed3\u675f\u70b9\u7684 y \u5750\u6807\n",
      "     * @return this\n",
      "     */\n",
      "    public DrawContext bezierCurveTo(double cp1x, double cp1y, double cp2x, double cp2y, double x, double y) {\n",
      "        if (this.state.path == null) {\n",
      "            this.state.path = new AbbreviatedData();\n",
      "        }\n",
      "        this.state.path.cubicBezier(cp1x, cp1y, cp2x, cp2y, x, y);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u4ece\u5f53\u524d\u70b9\u8fde\u63a5\u5230\u70b9\uff08x\uff0cy\uff09\u7684\u5706\u5f27\uff0c\u5e76\u5c06\u5f53\u524d\u70b9\u79fb\u52a8\u5230\u70b9\uff08x\uff0cy\uff09\u3002\n",
      "     * rx \u8868\u793a\u692d\u5706\u7684\u957f\u8f74\u957f\u5ea6\uff0cry \u8868\u793a\u692d\u5706\u7684\u77ed\u8f74\u957f\u5ea6\u3002angle \u8868\u793a\n",
      "     * \u692d\u5706\u5728\u5f53\u524d\u5750\u6807\u7cfb\u4e0b\u65cb\u8f6c\u7684\u89d2\u5ea6\uff0c\u6b63\u503c\u4e3a\u987a\u65f6\u9488\uff0c\u8d1f\u503c\u4e3a\u9006\u65f6\u9488\uff0c\n",
      "     * large \u4e3a 1 \u65f6\u8868\u793a\u5bf9\u5e94\u5ea6\u6570\u5927\u4e8e180\u00b0\u7684\u5f27\uff0c\u4e3a 0 \u65f6\u8868\u793a\u5bf9\u5e94\n",
      "     * \u5ea6\u6570\u5c0f\u4e8e 180\u00b0\u7684\u5f27\u3002sweep \u4e3a 1 \u65f6\u8868\u793a\u7531\u5706\u5f27\u8d77\u59cb\u70b9\u5230\u7ed3\u675f\u70b9\n",
      "     * \u662f\u987a\u65f6\u9488\u65cb\u8f6c\uff0c\u4e3a 0 \u65f6\u8868\u793a\u7531\u5706\u5f27\u8d77\u59cb\u70b9\u5230\u7ed3\u675f\u70b9\u662f\u9006\u65f6\u9488\u65cb\u8f6c\u3002\n",
      "     *\n",
      "     * @param a     \u692d\u5706\u957f\u8f74\u957f\u5ea6\n",
      "     * @param b     \u692d\u5706\u77ed\u8f74\u957f\u5ea6\n",
      "     * @param angle \u65cb\u8f6c\u89d2\u5ea6\uff0c\u6b63\u503c - \u987a\u65f6\u9488\uff0c\u8d1f\u503c - \u9006\u65f6\u9488\n",
      "     * @param large true\u8868\u793a\u5bf9\u5e94\u5ea6\u6570\u5927\u4e8e 180\u00b0\u7684\u5f27\uff0cfalse \u8868\u793a\u5bf9\u5e94\u5ea6\u6570\u5c0f\u4e8e 180\u00b0\u7684\u5f27\n",
      "     * @param sweep sweep  true \u8868\u793a\u7531\u5706\u5f27\u8d77\u59cb\u70b9\u5230\u7ed3\u675f\u70b9\u662f\u987a\u65f6\u9488\u65cb\u8f6c\uff0cfalse\u8868\u793a\u7531\u5706\u5f27\u8d77\u59cb\u70b9\u5230\u7ed3\u675f\u70b9\u662f\u9006\u65f6\u9488\u65cb\u8f6c\u3002\n",
      "     * @param x     \u76ee\u6807\u70b9 x\n",
      "     * @param y     \u76ee\u6807\u70b9 y\n",
      "     * @return this\n",
      "     */\n",
      "    public DrawContext arc(double a, double b, double angle, boolean large, boolean sweep, double x, double y) {\n",
      "        if (this.state.path == null) {\n",
      "            this.state.path = new AbbreviatedData();\n",
      "        }\n",
      "        this.state.path.arc(a, b, angle % 360, large ? 1 : 0, sweep ? 1 : 0, x, y);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u521b\u5efa\u5f27/\u66f2\u7ebf\uff08\u7528\u4e8e\u521b\u5efa\u5706\u6216\u90e8\u5206\u5706\uff09\n",
      "     *\n",
      "     * @param x                \u5706\u7684\u4e2d\u5fc3\u7684 x \u5750\u6807\u3002\n",
      "     * @param y                \u5706\u7684\u4e2d\u5fc3\u7684 y \u5750\u6807\u3002\n",
      "     * @param r                \u5706\u7684\u534a\u5f84\u3002\n",
      "     * @param sAngle           \u8d77\u59cb\u89d2\uff0c\u5355\u4f4d\u5ea6\uff08\u5f27\u7684\u5706\u5f62\u7684\u4e09\u70b9\u949f\u4f4d\u7f6e\u662f 0 \u5ea6\uff09\u3002\n",
      "     * @param eAngle           \u7ed3\u675f\u89d2\uff0c\u5355\u4f4d\u5ea6\n",
      "     * @param counterclockwise \u89c4\u5b9a\u5e94\u8be5\u9006\u65f6\u9488\u8fd8\u662f\u987a\u65f6\u9488\u7ed8\u56fe\u3002false = \u987a\u65f6\u9488\uff0ctrue = \u9006\u65f6\u9488\u3002\n",
      "     * @return this\n",
      "     */\n",
      "    public DrawContext arc(double x, double y, double r, double sAngle, double eAngle, boolean counterclockwise) {\n",
      "\n",
      "        if (this.state.path == null) {\n",
      "            this.state.path = new AbbreviatedData();\n",
      "        }\n",
      "\n",
      "        // \u9996\u5148\u79fb\u52a8\u70b9\u5230\u8d77\u59cb\u4f4d\u7f6e\n",
      "        double x1 = x + r * Math.cos(sAngle * Math.PI / 180);\n",
      "        double y1 = y + r * Math.sin(sAngle * Math.PI / 180);\n",
      "        this.moveTo(x1, y1);\n",
      "\n",
      "\n",
      "        double angle = eAngle - sAngle;\n",
      "        if (angle == 360) {\n",
      "            // \u6574\u4e2a\u5706\u7684\u65f6\u5019\u9700\u8981\u5206\u4e3a\u4e24\u6b21\u8def\u5f84\u8fdb\u884c\u7ed8\u5236\n",
      "            // \u7ed8\u5236\u7ed3\u675f\u4f4d\u7f6e\u8d77\u59cb\u4f4d\u7f6e\n",
      "            this.state.path.arc(r, r, angle, 1, counterclockwise ? 1 : 0, x - r, y).arc(r, r, angle, 1, counterclockwise ? 1 : 0, x1, y1);\n",
      "        } else {\n",
      "            // \u7ed8\u5236\u7ed3\u675f\u4f4d\u7f6e\u8d77\u59cb\u4f4d\u7f6e\n",
      "            double x2 = x + r * Math.cos(eAngle * Math.PI / 180);\n",
      "            double y2 = y + r * Math.sin(eAngle * Math.PI / 180);\n",
      "            this.state.path.arc(r, r, angle, angle > 180 ? 1 : 0, counterclockwise ? 1 : 0, x2, y2);\n",
      "        }\n",
      "\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u521b\u5efa\u5f27/\u66f2\u7ebf\uff08\u7528\u4e8e\u521b\u5efa\u5706\u6216\u90e8\u5206\u5706\uff09\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\u987a\u65f6\u9488\u65b9\u5411\n",
      "     *\n",
      "     * @param x      \u5706\u7684\u4e2d\u5fc3\u7684 x \u5750\u6807\u3002\n",
      "     * @param y      \u5706\u7684\u4e2d\u5fc3\u7684 y \u5750\u6807\u3002\n",
      "     * @param r      \u5706\u7684\u534a\u5f84\u3002\n",
      "     * @param sAngle \u8d77\u59cb\u89d2\uff0c\u5355\u4f4d\u5ea6\uff08\u5f27\u7684\u5706\u5f62\u7684\u4e09\u70b9\u949f\u4f4d\u7f6e\u662f 0 \u5ea6\uff09\u3002\n",
      "     * @param eAngle \u7ed3\u675f\u89d2\uff0c\u5355\u4f4d\u5ea6\n",
      "     * @return this\n",
      "     */\n",
      "    public DrawContext arc(double x, double y, double r, double sAngle, double eAngle) {\n",
      "        return arc(x, y, r, sAngle, eAngle, true);\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u521b\u5efa\u77e9\u5f62\u8def\u5f84\n",
      "     *\n",
      "     * @param x      \u5de6\u4e0a\u89d2X\u5750\u6807\n",
      "     * @param y      \u5de6\u4e0a\u89d2Y\u5750\u6807\n",
      "     * @param width  \u5bbd\u5ea6\n",
      "     * @param height \u9ad8\u5ea6\n",
      "     * @return this\n",
      "     */\n",
      "    public DrawContext rect(double x, double y, double width, double height) {\n",
      "        if (this.state.path == null) {\n",
      "            this.state.path = new AbbreviatedData();\n",
      "        }\n",
      "\n",
      "        this.state.path.moveTo(x, y).lineTo(x + width, y).lineTo(x + width, y + height).lineTo(x, y + height).close();\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u521b\u5efa\u5e76\u586b\u5145\u77e9\u5f62\u8def\u5f84\n",
      "     * <p>\n",
      "     * \u586b\u5145\u77e9\u5f62\u4e0d\u4f1a\u5bfc\u81f4\u5f71\u54cd\u4e0a\u4e0b\u6587\u4e2d\u7684\u8def\u5f84\u3002\n",
      "     * <p>\n",
      "     * \u5982\u679c\u5df2\u7ecf\u5b58\u5728\u8def\u5f84\u90a3\u4e48\u6539\u8def\u5f84\u5c06\u4f1a\u63d0\u524d\u5173\u95ed\uff0c\u5e76\u521b\u5efa\u65b0\u7684\u8def\u5f84\u3002\n",
      "     *\n",
      "     * @param x      \u5de6\u4e0a\u89d2X\u5750\u6807\n",
      "     * @param y      \u5de6\u4e0a\u89d2Y\u5750\u6807\n",
      "     * @param width  \u5bbd\u5ea6\n",
      "     * @param height \u9ad8\u5ea6\n",
      "     * @return this\n",
      "     */\n",
      "    public DrawContext fillRect(double x, double y, double width, double height) {\n",
      "        AbbreviatedData abData = new AbbreviatedData().moveTo(x, y).lineTo(x + width, y).lineTo(x + width, y + height).lineTo(x, y + height).close();\n",
      "\n",
      "        PathObject p = new PathObject(new ST_ID(maxUnitID.incrementAndGet()));\n",
      "        p.setAbbreviatedData(abData);\n",
      "        p.setFill(true);\n",
      "        applyDrawParam(p);\n",
      "        container.add(p);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u521b\u5efa\u5e76\u63cf\u8fb9\u77e9\u5f62\u8def\u5f84\n",
      "     * <p>\n",
      "     * \u63cf\u8fb9\u77e9\u5f62\u4e0d\u4f1a\u5bfc\u81f4\u5f71\u54cd\u4e0a\u4e0b\u6587\u4e2d\u7684\u8def\u5f84\u3002\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\u63cf\u8fb9\u989c\u8272\u4e3a\u9ed1\u8272\n",
      "     *\n",
      "     * @param x      \u5de6\u4e0a\u89d2X\u5750\u6807\n",
      "     * @param y      \u5de6\u4e0a\u89d2Y\u5750\u6807\n",
      "     * @param width  \u5bbd\u5ea6\n",
      "     * @param height \u9ad8\u5ea6\n",
      "     * @return this\n",
      "     */\n",
      "    public DrawContext strokeRect(double x, double y, double width, double height) {\n",
      "        AbbreviatedData abData = new AbbreviatedData().moveTo(x, y).lineTo(x + width, y).lineTo(x + width, y + height).lineTo(x, y + height).close();\n",
      "\n",
      "        PathObject p = new PathObject(new ST_ID(maxUnitID.incrementAndGet()));\n",
      "        p.setAbbreviatedData(abData);\n",
      "        p.setStroke(true);\n",
      "        applyDrawParam(p);\n",
      "        container.add(p);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u7ed8\u5236\u5df2\u5b9a\u4e49\u7684\u8def\u5f84\n",
      "     *\n",
      "     * @return this\n",
      "     */\n",
      "    public DrawContext stroke() {\n",
      "        if (this.state.path == null) {\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        PathObject p = new PathObject(new ST_ID(maxUnitID.incrementAndGet()));\n",
      "        p.setAbbreviatedData(this.state.path.clone());\n",
      "        p.setStroke(true);\n",
      "        applyDrawParam(p);\n",
      "        container.add(p);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u586b\u5145\u5df2\u5b9a\u4e49\u8def\u5f84\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\u7684\u586b\u5145\u989c\u8272\u662f\u9ed1\u8272\u3002\n",
      "     *\n",
      "     * @return this\n",
      "     */\n",
      "    public DrawContext fill() {\n",
      "        if (this.state.path == null) {\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        PathObject p = new PathObject(new ST_ID(maxUnitID.incrementAndGet()));\n",
      "        p.setAbbreviatedData(this.state.path.clone());\n",
      "        p.setFill(true);\n",
      "        p.setLineWidth(0d);\n",
      "        applyDrawParam(p);\n",
      "        container.add(p);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u7f29\u653e\u5f53\u524d\u7ed8\u56fe\uff0c\u66f4\u5927\u6216\u66f4\u5c0f\n",
      "     *\n",
      "     * @param scalewidth  \u7f29\u653e\u5f53\u524d\u7ed8\u56fe\u7684\u5bbd\u5ea6 (1=100%, 0.5=50%, 2=200%, \u4f9d\u6b21\u7c7b\u63a8)\n",
      "     * @param scaleheight \u7f29\u653e\u5f53\u524d\u7ed8\u56fe\u7684\u9ad8\u5ea6 (1=100%, 0.5=50%, 2=200%, \u4f9d\u6b21\u7c7b\u63a8)\n",
      "     * @return this\n",
      "     */\n",
      "    public DrawContext scale(double scalewidth, double scaleheight) {\n",
      "        if (this.state.ctm == null) {\n",
      "            this.state.ctm = ST_Array.unitCTM();\n",
      "        }\n",
      "        ST_Array scale = new ST_Array(scalewidth, 0, 0, scaleheight, 0, 0);\n",
      "        this.state.ctm = scale.mtxMul(this.state.ctm);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u65cb\u8f6c\u5f53\u524d\u7684\u7ed8\u56fe\n",
      "     *\n",
      "     * @param angle \u65cb\u8f6c\u89d2\u5ea6\uff080~360\uff09\n",
      "     * @return this\n",
      "     */\n",
      "    public DrawContext rotate(double angle) {\n",
      "        if (this.state.ctm == null) {\n",
      "            this.state.ctm = ST_Array.unitCTM();\n",
      "        }\n",
      "        double alpha = angle * Math.PI / 180d;\n",
      "        ST_Array r = new ST_Array(Math.cos(alpha), Math.sin(alpha), -Math.sin(alpha), Math.cos(alpha), 0, 0);\n",
      "        this.state.ctm = r.mtxMul(this.state.ctm);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u91cd\u65b0\u6620\u5c04\u753b\u5e03\u4e0a\u7684 (0,0) \u4f4d\u7f6e\n",
      "     *\n",
      "     * @param x \u6dfb\u52a0\u5230\u6c34\u5e73\u5750\u6807\uff08x\uff09\u4e0a\u7684\u503c\n",
      "     * @param y \u6dfb\u52a0\u5230\u5782\u76f4\u5750\u6807\uff08y\uff09\u4e0a\u7684\u503c\n",
      "     * @return this\n",
      "     */\n",
      "    public DrawContext translate(double x, double y) {\n",
      "        if (this.state.ctm == null) {\n",
      "            this.state.ctm = ST_Array.unitCTM();\n",
      "        }\n",
      "        ST_Array r = new ST_Array(1, 0, 0, 1, x, y);\n",
      "        this.state.ctm = r.mtxMul(this.state.ctm);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u53d8\u6362\u77e9\u9635\n",
      "     * <p>\n",
      "     * \u6bcf\u6b21\u53d8\u6362\u77e9\u9635\u90fd\u4f1a\u5728\u524d\u4e00\u4e2a\u53d8\u6362\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\n",
      "     *\n",
      "     * @param a \u6c34\u5e73\u7f29\u653e\u7ed8\u56fe\n",
      "     * @param b \u6c34\u5e73\u503e\u659c\u7ed8\u56fe\n",
      "     * @param c \u5782\u76f4\u503e\u659c\u7ed8\u56fe\n",
      "     * @param d \u5782\u76f4\u7f29\u653e\u7ed8\u56fe\n",
      "     * @param e \u6c34\u5e73\u79fb\u52a8\u7ed8\u56fe\n",
      "     * @param f \u5782\u76f4\u79fb\u52a8\u7ed8\u56fe\n",
      "     * @return this\n",
      "     */\n",
      "    public DrawContext transform(double a, double b, double c, double d, double e, double f) {\n",
      "        if (this.state.ctm == null) {\n",
      "            this.state.ctm = ST_Array.unitCTM();\n",
      "        }\n",
      "        ST_Array r = new ST_Array(a, b, c, d, e, f);\n",
      "        this.state.ctm = r.mtxMul(this.state.ctm);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u53d8\u6362\u77e9\u9635\n",
      "     * <p>\n",
      "     * \u6bcf\u5f53\u8c03\u7528 setTransform() \u65f6\uff0c\u5b83\u90fd\u4f1a\u91cd\u7f6e\u524d\u4e00\u4e2a\u53d8\u6362\u77e9\u9635\u7136\u540e\u6784\u5efa\u65b0\u7684\u77e9\u9635\n",
      "     *\n",
      "     * @param a \u6c34\u5e73\u7f29\u653e\u7ed8\u56fe\n",
      "     * @param b \u6c34\u5e73\u503e\u659c\u7ed8\u56fe\n",
      "     * @param c \u5782\u76f4\u503e\u659c\u7ed8\u56fe\n",
      "     * @param d \u5782\u76f4\u7f29\u653e\u7ed8\u56fe\n",
      "     * @param e \u6c34\u5e73\u79fb\u52a8\u7ed8\u56fe\n",
      "     * @param f \u5782\u76f4\u79fb\u52a8\u7ed8\u56fe\n",
      "     * @return this\n",
      "     */\n",
      "    public DrawContext setTransform(double a, double b, double c, double d, double e, double f) {\n",
      "        this.state.ctm = new ST_Array(a, b, c, d, e, f);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u88c1\u526a\u56fe\u7247\u5e76\u5728OFD\u4e0a\u7ed8\u5236\u56fe\u50cf\n",
      "     * <p>\n",
      "     * \u4e3b\u8981\u8be5\u65b9\u6cd5\u5c06\u4f1a\u88c1\u526a\u56fe\u7247\u7684\u4e00\u90e8\u5206\uff0c\u7136\u540e\u5728OFD\u4e0a\u7ed8\u5236\n",
      "     * \u8be5\u65b9\u6cd5\u6240\u6709\u53c2\u6570\u5355\u4f4d\u90fd\u662f\u6beb\u7c73mm\uff0c\u50cf\u7d20\u8f6c\u6362\u6beb\u7c73\u9700\u8981\u901a\u8fc7 {@link #PPM} \u8f6c\u6362\u3002\n",
      "     *\n",
      "     * @param img     \u56fe\u50cf\uff0c\u8def\u5f84\n",
      "     * @param sx      \u56fe\u50cf\u5185\u90e8 x \u5750\u6807\uff08\u5355\u4f4d \u6beb\u7c73mm\uff09\n",
      "     * @param sy      \u56fe\u50cf\u5185\u90e8 y \u5750\u6807\uff08\u5355\u4f4d \u6beb\u7c73mm\uff09\n",
      "     * @param sWidth  \u56fe\u50cf\u5185\u90e8\u5bbd\u5ea6\uff08\u5355\u4f4d \u50cf\u7d20px\uff09\n",
      "     * @param sHeight \u56fe\u50cf\u5185\u90e8\u9ad8\u5ea6\uff08\u5355\u4f4d \u50cf\u7d20px\uff09\n",
      "     * @param dx      \u5728\u753b\u5e03\u4e0a\u653e\u7f6e\u56fe\u50cf\u7684 x \u5750\u6807\u4f4d\u7f6e\uff08\u5355\u4f4d \u6beb\u7c73mm\uff09\n",
      "     * @param dy      \u5728\u753b\u5e03\u4e0a\u653e\u7f6e\u56fe\u50cf\u7684 y \u5750\u6807\u4f4d\u7f6e\uff08\u5355\u4f4d \u6beb\u7c73mm\uff09\n",
      "     * @param dWidth  \u5728\u753b\u5e03\u4e0a\u653e\u7f6e\u56fe\u50cf\u7684\u5bbd\u5ea6\uff08\u5355\u4f4d \u6beb\u7c73mm\uff09\n",
      "     * @param dHeight \u5728\u753b\u5e03\u4e0a\u653e\u7f6e\u56fe\u50cf\u7684\u9ad8\u5ea6\uff08\u5355\u4f4d \u6beb\u7c73mm\uff09\n",
      "     * @return this\n",
      "     * @throws IOException \u56fe\u50cf\u8bfb\u53d6\u5f02\u5e38\n",
      "     */\n",
      "    public DrawContext drawImage(Path img, double sx, double sy, double sWidth, double sHeight, double dx, double dy, double dWidth, double dHeight) throws IOException {\n",
      "        if (img == null || Files.notExists(img)) {\n",
      "            throw new IllegalArgumentException(\"\u56fe\u50cf\u4e0d\u5b58\u5728\");\n",
      "        }\n",
      "        // \u52a0\u8f7d\u539f\u56fe\u7247\n",
      "        BufferedImage gImg = ImageIO.read(img.toFile());\n",
      "        int w = pixel(sWidth);\n",
      "        int h = pixel(sHeight);\n",
      "        // \u6309\u7167\u533a\u57df\u88c1\u526a\u56fe\u7247\n",
      "        BufferedImage cutOut = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);\n",
      "        Graphics2D g2 = cutOut.createGraphics();\n",
      "        g2.drawImage(gImg, 0, 0, w, h, pixel(sx), pixel(sy), pixel(sx) + w, pixel(sy) + h, null);\n",
      "\n",
      "        Path tmpImgCutPath = null;\n",
      "        try {\n",
      "            // \u88c1\u526a\u540e\u7684\u56fe\u7247\u5b58\u50a8\u5230\u4e34\u65f6\u6587\u4ef6\n",
      "            tmpImgCutPath = Files.createTempFile(\"\", \".png\");\n",
      "            ImageIO.write(cutOut, \"png\", tmpImgCutPath.toFile());\n",
      "            return drawImage(tmpImgCutPath, dx, dy, dWidth, dHeight);\n",
      "        } finally {\n",
      "            if (tmpImgCutPath != null) {\n",
      "                Files.deleteIfExists(tmpImgCutPath);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5728OFD\u4e0a\u7ed8\u5236\u56fe\u50cf\n",
      "     * <p>\n",
      "     * \u56fe\u50cf\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u5c06\u6309\u7167 {@link #PPM} \u8fdb\u884c\u8f6c\u6362\n",
      "     *\n",
      "     * @param img \u8981\u4f7f\u7528\u7684\u56fe\u50cf\uff0c\u8bf7\u907f\u514d\u8d44\u6e90\u548c\u6587\u6863\u4e2d\u5df2\u7ecf\u5b58\u5728\u7684\u8d44\u6e90\u91cd\u590d\n",
      "     * @param dx  \u5728\u753b\u5e03\u4e0a\u653e\u7f6e\u56fe\u50cf\u7684 x \u5750\u6807\u4f4d\u7f6e\n",
      "     * @param dy  \u5728\u753b\u5e03\u4e0a\u653e\u7f6e\u56fe\u50cf\u7684 y \u5750\u6807\u4f4d\u7f6e\n",
      "     * @return this\n",
      "     * @throws IOException \u56fe\u7247\u6587\u4ef6\u8bfb\u5199\u5f02\u5e38\n",
      "     */\n",
      "    public DrawContext drawImage(Path img, double dx, double dy) throws IOException {\n",
      "        if (img == null || Files.notExists(img)) {\n",
      "            throw new IllegalArgumentException(\"\u56fe\u50cf\u4e0d\u5b58\u5728\");\n",
      "        }\n",
      "        // \u52a0\u8f7d\u539f\u56fe\u7247\n",
      "        BufferedImage gImg = ImageIO.read(img.toFile());\n",
      "        int w = gImg.getWidth();\n",
      "        int h = gImg.getHeight();\n",
      "        return drawImage(img, dx, dy, mm(w), mm(h));\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5728OFD\u4e0a\u7ed8\u5236\u56fe\u50cf\n",
      "     *\n",
      "     * @param img     \u8981\u4f7f\u7528\u7684\u56fe\u50cf\uff0c\u8bf7\u907f\u514d\u8d44\u6e90\u548c\u6587\u6863\u4e2d\u5df2\u7ecf\u5b58\u5728\u7684\u8d44\u6e90\u91cd\u590d\n",
      "     * @param dx      \u5728\u753b\u5e03\u4e0a\u653e\u7f6e\u56fe\u50cf\u7684 x \u5750\u6807\u4f4d\u7f6e\n",
      "     * @param dy      \u5728\u753b\u5e03\u4e0a\u653e\u7f6e\u56fe\u50cf\u7684 y \u5750\u6807\u4f4d\u7f6e\n",
      "     * @param dWidth  \u8981\u4f7f\u7528\u7684\u56fe\u50cf\u7684\u5bbd\u5ea6\uff08\u4f38\u5c55\u6216\u7f29\u5c0f\u56fe\u50cf\uff09\n",
      "     * @param dHeight \u8981\u4f7f\u7528\u7684\u56fe\u50cf\u7684\u9ad8\u5ea6\uff08\u4f38\u5c55\u6216\u7f29\u5c0f\u56fe\u50cf\uff09\n",
      "     * @return this\n",
      "     * @throws IOException \u56fe\u7247\u6587\u4ef6\u8bfb\u5199\u5f02\u5e38\n",
      "     */\n",
      "    public DrawContext drawImage(Path img, double dx, double dy, double dWidth, double dHeight) throws IOException {\n",
      "        if (img == null || Files.notExists(img)) {\n",
      "            throw new IOException(\"\u56fe\u7247(img)\u4e0d\u5b58\u5728\");\n",
      "        }\n",
      "\n",
      "        ST_ID id = resManager.addImage(img);\n",
      "        // \u5728\u516c\u5171\u8d44\u6e90\u4e2d\u52a0\u5165\u56fe\u7247\n",
      "        ImageObject imgObj = new ImageObject(maxUnitID.incrementAndGet());\n",
      "        imgObj.setResourceID(id.ref());\n",
      "        imgObj.setBoundary(boundary.clone());\n",
      "\n",
      "        // \u5e94\u7528\u53d8\u6362\u77e9\u9635\n",
      "        ST_Array ctm = this.state.ctm == null ? ST_Array.unitCTM() : this.state.ctm;\n",
      "        ctm = new ST_Array(dWidth, 0, 0, dHeight, dx, dy).mtxMul(ctm);\n",
      "        imgObj.setCTM(ctm);\n",
      "\n",
      "        // \u5e94\u7528\u7ed8\u5236\u53c2\u6570\n",
      "        applyDrawParam(imgObj);\n",
      "        container.addPageBlock(imgObj);\n",
      "\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u4fdd\u5b58\u5f53\u524d\u7ed8\u56fe\u72b6\u6001\n",
      "     * <p>\n",
      "     * \u4e0e {@link #restore()} \u603b\u662f\u6210\u5bf9\u51fa\u73b0\u3002\n",
      "     *\n",
      "     * @return this\n",
      "     */\n",
      "    public DrawContext save() {\n",
      "        this.state.strokeStyle = this.strokeStyle;\n",
      "        this.state.fillStyle = this.fillStyle;\n",
      "        this.state.fontStyle = this.font;\n",
      "        stack.push(this.state.clone());\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8fd8\u539f\u7ed8\u56fe\u72b6\u6001\n",
      "     * <p>\n",
      "     * \u4e0e {@link #save()} \u603b\u662f\u6210\u5bf9\u51fa\u73b0\u3002\n",
      "     *\n",
      "     * @return this\n",
      "     */\n",
      "    public DrawContext restore() {\n",
      "        if (stack.isEmpty()) {\n",
      "            return this;\n",
      "        }\n",
      "        this.state = stack.pop();\n",
      "        this.strokeStyle = this.state.strokeStyle;\n",
      "        this.fillStyle = this.state.fillStyle;\n",
      "        this.font = this.state.fontStyle;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u586b\u5145\u6587\u5b57\n",
      "     *\n",
      "     * @param text \u586b\u5145\u6587\u5b57\n",
      "     * @param x    \u9605\u8bfb\u65b9\u5411\u4e0a\u7684\u5de6\u4e0b\u89d2 x\u5750\u6807\n",
      "     * @param y    \u9605\u8bfb\u65b9\u5411\u4e0a\u7684\u5de6\u4e0b\u89d2 y\u5750\u6807\n",
      "     * @return this\n",
      "     * @throws IOException \u5b57\u4f53\u83b7\u53d6\u5f02\u5e38\n",
      "     */\n",
      "    public DrawContext fillText(String text, double x, double y) throws IOException {\n",
      "        if (text == null || text.trim().isEmpty()) {\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        ST_ID fontID = null;\n",
      "        // \u8f6c\u6362\u5b57\u4f53\u6837\u5f0f \u4e3a \u5b57\u4f53\u8bbe\u7f6e\n",
      "        CT_Font existFont = fontStyleToSetting(this.font, this.state.font);\n",
      "        if (existFont != null) {\n",
      "            fontID = existFont.getID();\n",
      "        } else {\n",
      "            fontID = resManager.addFont(state.font.getFont());\n",
      "        }\n",
      "\n",
      "        // \u65b0\u5efa\u5b57\u4f53\u5bf9\u8c61\n",
      "        TextObject txtObj = new CT_Text()\n",
      "                .setBoundary(this.boundary.clone())\n",
      "                .setFont(fontID.ref())\n",
      "                .setSize(state.font.getFontSize())\n",
      "                .toObj(new ST_ID(maxUnitID.incrementAndGet()));\n",
      "\n",
      "        // \u8bbe\u7f6e\u586b\u5145\n",
      "        txtObj.setFill(true);\n",
      "        // \u8bbe\u7f6e\u5b57\u4f53\u5bbd\u5ea6\n",
      "        if (state.font.getFontWeight() != null && state.font.getFontWeight() != 400) {\n",
      "            txtObj.setWeight(Weight.getInstance(state.font.getFontWeight()));\n",
      "        }\n",
      "        // \u662f\u5426\u659c\u4f53\n",
      "        if (state.font.isItalic()) {\n",
      "            txtObj.setItalic(true);\n",
      "        }\n",
      "\n",
      "        int readDirection = state.font.getReadDirection();\n",
      "        int charDirection = state.font.getCharDirection();\n",
      "\n",
      "        // \u8bbe\u7f6e\u9605\u8bfb\u65b9\u5411\n",
      "        if (readDirection != 0) {\n",
      "            txtObj.setReadDirection(Direction.getInstance(readDirection));\n",
      "        }\n",
      "        // \u8bbe\u7f6e\u6587\u5b57\u65b9\u5411\n",
      "        if (charDirection != 0) {\n",
      "            txtObj.setCharDirection(Direction.getInstance(charDirection));\n",
      "        }\n",
      "\n",
      "        // \u6d4b\u91cf\u5b57\u95f4\u8ddd\n",
      "        MeasureBody measureBody = TextMeasureTool.measureWithWith(text, state.font);\n",
      "\n",
      "        // \u7b2c\u4e00\u4e2a\u5b57\u6bcd\u7684\u504f\u79fb\u91cf\u8ba1\u7b97\n",
      "        double xx = x + measureBody.firstCharOffsetX;\n",
      "        double yy = y + measureBody.firstCharOffsetY;\n",
      "        switch (readDirection) {\n",
      "            case 0:\n",
      "            case 180:\n",
      "                xx += textFloatFactor(state.font.getTextAlign(), measureBody.width, readDirection);\n",
      "                break;\n",
      "            case 90:\n",
      "            case 270:\n",
      "                yy += textFloatFactor(state.font.getTextAlign(), measureBody.width, readDirection);\n",
      "                break;\n",
      "        }\n",
      "        TextCode tcSTTxt = new TextCode().setContent(text).setX(xx).setY(yy);\n",
      "\n",
      "        if (readDirection == 90 || readDirection == 270) {\n",
      "            tcSTTxt.setDeltaY(measureBody.offset);\n",
      "        } else {\n",
      "            tcSTTxt.setDeltaX(measureBody.offset);\n",
      "        }\n",
      "        txtObj.addTextCode(tcSTTxt);\n",
      "\n",
      "        // \u5e94\u7528\u7ed8\u5236\u53c2\u6570\n",
      "        applyDrawParam(txtObj);\n",
      "\n",
      "        // \u52a0\u5165\u5bb9\u5668\n",
      "        container.addPageBlock(txtObj);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6587\u672c\u6d6e\u52a8\u5e26\u6765\u7684\u504f\u79fb\u91cf\u56e0\u5b50\n",
      "     *\n",
      "     * @param align         \u5bf9\u9f50\u65b9\u5411\n",
      "     * @param width         \u6587\u672c\u5bbd\u5ea6\n",
      "     * @param readDirection \u9605\u8bfb\u65b9\u5411\n",
      "     * @return \u6d6e\u52a8\u56e0\u5b50\n",
      "     */\n",
      "    private double textFloatFactor(TextAlign align, double width, int readDirection) {\n",
      "        double factor = 0;\n",
      "        switch (align) {\n",
      "            case start:\n",
      "            case left:\n",
      "                factor = 0;\n",
      "                break;\n",
      "            case end:\n",
      "            case right:\n",
      "                factor = -width;\n",
      "                break;\n",
      "            case center:\n",
      "                factor = -width / 2;\n",
      "                break;\n",
      "        }\n",
      "        if (readDirection == 180 || readDirection == 270) {\n",
      "            factor = -factor;\n",
      "        }\n",
      "        return factor;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u6587\u672c\u5bf9\u9f50\u65b9\u5f0f\n",
      "     *\n",
      "     * @return \u6587\u672c\u5bf9\u9f50\u65b9\u5f0f\n",
      "     */\n",
      "    public TextAlign getTextAlign() {\n",
      "        return this.state.font.getTextAlign();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u6587\u672c\u5bf9\u9f50\u65b9\u5f0f\n",
      "     *\n",
      "     * @param textAlign \u6587\u672c\u5bf9\u9f50\u65b9\u5f0f\n",
      "     * @return this\n",
      "     */\n",
      "    public DrawContext setTextAlign(TextAlign textAlign) {\n",
      "        this.state.font.setTextAlign(textAlign);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6d4b\u91cf\u6587\u672c\u7684\u5bbd\u5ea6\u6216\u9ad8\u5ea6\n",
      "     * <p>\n",
      "     * \u5982\u679c readDirection\u4e3a 0\u6216180\uff0c\u6d4b\u91cf\u6587\u672c\u5bbd\u5ea6\n",
      "     * <p>\n",
      "     * \u5982\u679c readDirection\u4e3a 0\u6216180\uff0c\u6d4b\u91cf\u6587\u672c\u9ad8\u5ea6\n",
      "     *\n",
      "     * @param text \u5e26\u6d4b\u91cf\u6587\u672c\n",
      "     * @return \u6d4b\u91cf\u6587\u672c\u4fe1\u606f\n",
      "     */\n",
      "    public TextMetrics measureText(String text) {\n",
      "        // \u8f6c\u6362\u5b57\u4f53\u6837\u5f0f \u4e3a \u5b57\u4f53\u8bbe\u7f6e\n",
      "        fontStyleToSetting(this.font, this.state.font);\n",
      "\n",
      "        TextMetrics tm = new TextMetrics();\n",
      "        tm.readDirection = state.font.getReadDirection();\n",
      "        tm.fontSize = state.font.getFontSize();\n",
      "        // \u6d4b\u91cf\u5b57\u95f4\u8ddd\n",
      "        MeasureBody measureBody = TextMeasureTool.measureWithWith(text, state.font);\n",
      "        tm.width = measureBody.width;\n",
      "        tm.offset = measureBody.offset;\n",
      "        return tm;\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u6d4b\u91cf\u6587\u672c\u6240\u5360\u7a7a\u95f4\u5927\u5c0f\n",
      "     *\n",
      "     * @param text \u5e26\u6d4b\u91cf\u6587\u672c\n",
      "     * @return \u6587\u4ef6\u6240\u5360\u7a7a\u95f4\u4fe1\u606f\n",
      "     */\n",
      "    public TextMetricsArea measureTextArea(String text) {\n",
      "        // \u8f6c\u6362\u5b57\u4f53\u6837\u5f0f \u4e3a \u5b57\u4f53\u8bbe\u7f6e\n",
      "        fontStyleToSetting(this.font, this.state.font);\n",
      "        // \u6d4b\u91cf\u5b57\u95f4\u8ddd\n",
      "        return TextMeasureTool.measureArea(text, state.font);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bfb\u53d6\u5f53\u524d\u63cf\u8fb9\u989c\u8272\uff08\u53ea\u8bfb\uff09\n",
      "     * <p>\n",
      "     * \u82e5\u63cf\u8fb9\u989c\u8272\u975e\u989c\u8272\u503c\uff0c\u5219\u8fd4\u56denull\n",
      "     *\n",
      "     * @return \u63cf\u8fb9\u989c\u8272\uff08\u53ea\u8bfb\uff09\n",
      "     */\n",
      "    public int[] getStrokeColor() {\n",
      "        if (this.strokeStyle instanceof String) {\n",
      "            return NamedColor.rgb((String) this.strokeStyle);\n",
      "        }\n",
      "\n",
      "        return null;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u63cf\u8fb9\u989c\u8272\n",
      "     * <p>\n",
      "     * \u4e00\u6761\u8def\u5f84\u53ea\u6709\u4e00\u79cd\u63cf\u8fb9\u989c\u8272\uff0c\u91cd\u590d\u8bbe\u7f6e\u53ea\u53d6\u6700\u540e\u4e00\u6b21\u8bbe\u7f6e\u989c\u8272\n",
      "     *\n",
      "     * @param strokeColor \u63cf\u8fb9\u7684RGB\u989c\u8272\n",
      "     * @return this\n",
      "     */\n",
      "    public DrawContext setStrokeColor(int[] strokeColor) {\n",
      "        this.strokeStyle = String.format(\"#%02X%02X%02X\", strokeColor[0], strokeColor[1], strokeColor[2]);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u63cf\u8fb9\u989c\u8272\n",
      "     * <p>\n",
      "     * \u4e00\u6761\u8def\u5f84\u53ea\u6709\u4e00\u79cd\u63cf\u8fb9\u989c\u8272\uff0c\u91cd\u590d\u8bbe\u7f6e\u53ea\u53d6\u6700\u540e\u4e00\u6b21\u8bbe\u7f6e\u989c\u8272\n",
      "     *\n",
      "     * @param r \u7ea2\n",
      "     * @param g \u7eff\n",
      "     * @param b \u84dd\n",
      "     * @return this\n",
      "     */\n",
      "    public DrawContext setStrokeColor(int r, int g, int b) {\n",
      "        return setStrokeColor(new int[]{r, g, b});\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u586b\u5145\u989c\u8272\uff08\u53ea\u8bfb\uff09\n",
      "     * <p>\n",
      "     * \u82e5\u586b\u5145\u989c\u8272\u975e\u989c\u8272\u503c\uff0c\u5219\u8fd4\u56denull\n",
      "     *\n",
      "     * @return \u586b\u5145\u989c\u8272\uff08\u53ea\u8bfb\uff09\n",
      "     */\n",
      "    public int[] getFillColor() {\n",
      "        if (this.fillStyle instanceof String) {\n",
      "            return NamedColor.rgb((String) this.fillStyle);\n",
      "        }\n",
      "        return null;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u586b\u5145\u989c\u8272\n",
      "     * <p>\n",
      "     * \u4e00\u6761\u8def\u5f84\u53ea\u6709\u4e00\u79cd\u586b\u5145\u989c\u8272\uff0c\u91cd\u590d\u8bbe\u7f6e\u53ea\u53d6\u6700\u540e\u4e00\u6b21\u8bbe\u7f6e\u989c\u8272\n",
      "     *\n",
      "     * @param fillColor \u586b\u5145\u989c\u8272\n",
      "     * @return this\n",
      "     */\n",
      "    public DrawContext setFillColor(int[] fillColor) {\n",
      "        this.fillStyle = String.format(\"#%02X%02X%02X\", fillColor[0], fillColor[1], fillColor[2]);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u586b\u5145\u989c\u8272\n",
      "     * <p>\n",
      "     * \u4e00\u6761\u8def\u5f84\u53ea\u6709\u4e00\u79cd\u586b\u5145\u989c\u8272\uff0c\u91cd\u590d\u8bbe\u7f6e\u53ea\u53d6\u6700\u540e\u4e00\u6b21\u8bbe\u7f6e\u989c\u8272\n",
      "     *\n",
      "     * @param r \u7ea2\n",
      "     * @param g \u7eff\n",
      "     * @param b \u84dd\n",
      "     * @return this\n",
      "     */\n",
      "    public DrawContext setFillColor(int r, int g, int b) {\n",
      "        return setFillColor(new int[]{r, g, b});\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5f53\u524d\u7ebf\u5bbd\u5ea6\n",
      "     *\n",
      "     * @return \u7ebf\u5bbd\u5ea6\uff08\u5355\u4f4d\u6beb\u7c73mm\uff09\n",
      "     */\n",
      "    public double getLineWidth() {\n",
      "        return this.state.drawParam.getLineWidth();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5f53\u524d\u7ebf\u5bbd\u5ea6\n",
      "     *\n",
      "     * @param lineWidth \u7ebf\u5bbd\u5ea6\uff08\u5355\u4f4d\u6beb\u7c73mm\uff09\n",
      "     * @return this\n",
      "     */\n",
      "    public DrawContext setLineWidth(double lineWidth) {\n",
      "        if (lineWidth < 0) {\n",
      "            lineWidth = 0.353;\n",
      "        }\n",
      "        this.state.drawParam.setLineWidth(lineWidth);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5f53\u524d\u4f7f\u7528\u7684\u7ed8\u5236\u6587\u5b57\u8bbe\u7f6e\n",
      "     *\n",
      "     * @return \u7ed8\u5236\u6587\u5b57\u8bbe\u7f6e\uff0c\u53ef\u80fd\u4e3anull\n",
      "     */\n",
      "    public FontSetting getFont() {\n",
      "        return state.font;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u7ed8\u5236\u6587\u5b57\u4fe1\u606f\n",
      "     *\n",
      "     * @param font \u6587\u5b57\u914d\u7f6e\n",
      "     * @return this\n",
      "     */\n",
      "    public DrawContext setFont(FontSetting font) {\n",
      "        this.state.font = font;\n",
      "        // \u6e05\u7a7a\u5b57\u4f53\u6837\u5f0f\n",
      "        this.font = \"\";\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u9ed8\u8ba4\u5b57\u4f53\n",
      "     *\n",
      "     * @param fontSize \u5b57\u4f53\u5927\u5c0f\n",
      "     * @return this\n",
      "     */\n",
      "    public DrawContext setDefaultFont(double fontSize) {\n",
      "        this.state.font = FontSetting.getInstance(fontSize);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u7ed8\u56fe\u900f\u660e\u5ea6\u503c\n",
      "     *\n",
      "     * @return \u900f\u660e\u5ea6\u503c 0.0\u52301.0\n",
      "     */\n",
      "    public Double getGlobalAlpha() {\n",
      "        return state.globalAlpha;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e \u7ed8\u56fe\u900f\u660e\u5ea6\u503c\n",
      "     *\n",
      "     * @param globalAlpha \u900f\u660e\u5ea6\u503c 0.0\u52301.0\n",
      "     * @return this\n",
      "     */\n",
      "    public DrawContext setGlobalAlpha(Double globalAlpha) {\n",
      "        if (globalAlpha == null || globalAlpha > 1) {\n",
      "            globalAlpha = 1.0;\n",
      "        } else if (globalAlpha < 0) {\n",
      "            globalAlpha = 0d;\n",
      "        }\n",
      "\n",
      "        this.state.globalAlpha = globalAlpha;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u7aef\u70b9\u6837\u5f0f\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\u503c\uff1a LineCapType.Butt\n",
      "     *\n",
      "     * @param cap \u7aef\u70b9\u6837\u5f0f\n",
      "     * @return this\n",
      "     */\n",
      "    public DrawContext setLineCap(LineCapType cap) {\n",
      "        this.state.drawParam.setCap(cap);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u7aef\u70b9\u6837\u5f0f\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\u503c\uff1a LineCapType.Butt\n",
      "     *\n",
      "     * @return \u7aef\u70b9\u6837\u5f0f\n",
      "     */\n",
      "    public LineCapType getLineCap() {\n",
      "        return this.state.drawParam.getCap();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u7ebf\u6761\u8fde\u63a5\u6837\u5f0f\uff0c\u6307\u5b9a\u4e86\u4e24\u4e2a\u7ebf\u7684\u7aef\u70b9\u7ed3\u5408\u65f6\u91c7\u7528\u7684\u6837\u5f0f\u3002\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\u503c\uff1aLineJoinType.Miter\n",
      "     *\n",
      "     * @param join \u7ebf\u6761\u8fde\u63a5\u6837\u5f0f\n",
      "     * @return this\n",
      "     */\n",
      "    public DrawContext setLineJoin(LineJoinType join) {\n",
      "        this.state.drawParam.setJoin(join);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u7ebf\u6761\u8fde\u63a5\u6837\u5f0f\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\u503c\uff1aLineJoinType.Miter\n",
      "     *\n",
      "     * @return \u7ebf\u6761\u8fde\u63a5\u6837\u5f0f\n",
      "     */\n",
      "    public LineJoinType getLineJoin() {\n",
      "        return this.state.drawParam.getJoin();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u6700\u5927\u659c\u63a5\u957f\u5ea6\uff0c\u4e5f\u5c31\u662f\u7ed3\u5408\u70b9\u957f\u5ea6\u622a\u65ad\u503c\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\u503c\uff1a3.528\n",
      "     * <p>\n",
      "     * \u5f53Join\u4e0d\u7b49\u4e8eMiter\u65f6\u6539\u53c2\u6570\u65e0\u6548\n",
      "     *\n",
      "     * @param miterLimit \u622a\u65ad\u503c\n",
      "     * @return this\n",
      "     */\n",
      "    public DrawContext setMiterLimit(Double miterLimit) {\n",
      "        this.state.drawParam.setMiterLimit(miterLimit);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u6700\u5927\u659c\u63a5\u957f\u5ea6\uff0c\u4e5f\u5c31\u662f\u7ed3\u5408\u70b9\u957f\u5ea6\u622a\u65ad\u503c\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\u503c\uff1a3.528\n",
      "     *\n",
      "     * @return \u622a\u65ad\u503c\n",
      "     */\n",
      "    public Double getMiterLimit() {\n",
      "        return this.state.drawParam.getMiterLimit();\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u7ebf\u6bb5\u865a\u7ebf\u6837\u5f0f\n",
      "     *\n",
      "     * @param dashOffset \u865a\u7ebf\u7ed8\u5236\u504f\u79fb\u4f4d\u7f6e\uff0c\u5982\u679c\u6ca1\u6709\u5219\u4f20\u5165null\n",
      "     * @param pattern    \u865a\u7ebf\u7684\u7ebf\u6bb5\u957f\u5ea6\u548c\u95f4\u9694\u957f\u5ea6,\u6709\u4e24\u4e2a\u6216\u591a\u4e2a\u503c\uff0c\u7b2c\u4e00\u4e2a\u503c\u6307\u5b9a\u4e86\u865a\u7ebf\u7ebf\u6bb5\u7684\u957f\u5ea6\uff0c\u7b2c\u4e8c\u4e2a\u503c\u5236\u5b9a\u4e86\u7ebf\u6bb5\u95f4\u9694\u7684\u957f\u5ea6\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3002\n",
      "     * @return this\n",
      "     */\n",
      "    public DrawContext setLineDash(Double dashOffset, Double[] pattern) {\n",
      "        if (dashOffset == null && pattern == null) {\n",
      "            this.state.drawParam.setDashPattern(null);\n",
      "            this.state.drawParam.setDashOffset(null);\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        if (pattern == null || pattern.length < 2) {\n",
      "            throw new IllegalArgumentException(\"\u865a\u7ebf\u7684\u7ebf\u6bb5\u957f\u5ea6\u548c\u95f4\u9694\u957f\u5ea6(pattern)\uff0c\u4e0d\u80fd\u4e3a\u7a7a\u5e76\u4e14\u9700\u8981\u5927\u4e8e\u4e24\u4e2a\u4ee5\u4e0a\u7684\u503c\");\n",
      "        }\n",
      "\n",
      "        this.state.drawParam.setDashPattern(new ST_Array(pattern));\n",
      "        this.state.drawParam.setDashOffset(dashOffset);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u7ebf\u6bb5\u865a\u7ebf\u6837\u5f0f\n",
      "     *\n",
      "     * @param pattern \u865a\u7ebf\u7684\u7ebf\u6bb5\u957f\u5ea6\u548c\u95f4\u9694\u957f\u5ea6,\u6709\u4e24\u4e2a\u6216\u591a\u4e2a\u503c\uff0c\u7b2c\u4e00\u4e2a\u503c\u6307\u5b9a\u4e86\u865a\u7ebf\u7ebf\u6bb5\u7684\u957f\u5ea6\uff0c\u7b2c\u4e8c\u4e2a\u503c\u5236\u5b9a\u4e86\u7ebf\u6bb5\u95f4\u9694\u7684\u957f\u5ea6\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3002\n",
      "     * @return this\n",
      "     */\n",
      "    public DrawContext setLineDash(Double... pattern) {\n",
      "        return setLineDash(null, pattern);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u865a\u7ebf\u95f4\u9694\u53c2\u6570\n",
      "     *\n",
      "     * @return \u865a\u7ebf\u7684\u7ebf\u6bb5\u957f\u5ea6\u548c\u95f4\u9694\u957f\u5ea6, \u6709\u4e24\u4e2a\u6216\u591a\u4e2a\u503c\uff0c\u7b2c\u4e00\u4e2a\u503c\u6307\u5b9a\u4e86\u865a\u7ebf\u7ebf\u6bb5\u7684\u957f\u5ea6\uff0c\u7b2c\u4e8c\u4e2a\u503c\u5236\u5b9a\u4e86\u7ebf\u6bb5\u95f4\u9694\u7684\u957f\u5ea6\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3002\n",
      "     */\n",
      "    public ST_Array getDashPattern() {\n",
      "        return this.state.drawParam.getDashPattern();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u865a\u7ebf\u7ed8\u5236\u504f\u79fb\u4f4d\u7f6e\n",
      "     *\n",
      "     * @return \u865a\u7ebf\u7ed8\u5236\u504f\u79fb\u4f4d\u7f6e\n",
      "     */\n",
      "    public Double getDashOffset() {\n",
      "        return this.state.drawParam.getDashOffset();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u521b\u5efa\u4e00\u4e2a\u7ebf\u6027\u6e10\u53d8\u5bf9\u8c61\uff08double\uff09\n",
      "     *\n",
      "     * @param x0 \u8d77\u59cb\u70b9\u6a2a\u5750\u6807\n",
      "     * @param y0 \u8d77\u59cb\u70b9\u7eb5\u5750\u6807\n",
      "     * @param x1 \u7ed3\u675f\u70b9\u6a2a\u5750\u6807\n",
      "     * @param y1 \u7ed3\u675f\u70b9\u7eb5\u5750\u6807\n",
      "     * @return \u7ebf\u6027\u6e10\u53d8\u5bf9\u8c61\n",
      "     */\n",
      "    public CanvasGradient createLinearGradient(double x0, double y0, double x1, double y1) {\n",
      "        return new CanvasGradient(x0, y0, x1, y1);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u521b\u5efa\u4e00\u4e2a\u7ebf\u6027\u6e10\u53d8\u5bf9\u8c61\uff08int\uff09\n",
      "     *\n",
      "     * @param x0 \u8d77\u59cb\u70b9\u6a2a\u5750\u6807\n",
      "     * @param y0 \u8d77\u59cb\u70b9\u7eb5\u5750\u6807\n",
      "     * @param x1 \u7ed3\u675f\u70b9\u6a2a\u5750\u6807\n",
      "     * @param y1 \u7ed3\u675f\u70b9\u7eb5\u5750\u6807\n",
      "     * @return \u7ebf\u6027\u6e10\u53d8\u5bf9\u8c61\n",
      "     */\n",
      "    public CanvasGradient createLinearGradient(int x0, int y0, int x1, int y1) {\n",
      "        return new CanvasGradient(x0, y0, x1, y1);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u521b\u5efa\u4e00\u4e2a\u91cd\u590d\u5e95\u7eb9\n",
      "     * <p>\n",
      "     * \u6ce8\u610f\uff1a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f7f\u7528 {@link #mm(int)} \u5c06\u56fe\u7247\u50cf\u7d20\u8f6c\u6362\u4e3aOFD\u7684\u5355\u4f4d\u6beb\u7c73\u3002\n",
      "     * \u82e5\u6709\u81ea\u5b9a\u4e49\u91cd\u590d\u56fe\u7247\u5927\u5c0f\u8bbe\u7f6e\u53ef\u4ee5\u4f7f\u7528 {@link CanvasPattern#setImageSize(double, double)}\n",
      "     *\n",
      "     * @param img        \u5e95\u7eb9\u56fe\u7247\u8def\u5f84\n",
      "     * @param repetition \u91cd\u590d\u65b9\u5f0f\uff0c\u652f\u6301 repeat\u3001column\u3001row\u3001row-column\n",
      "     * @return \u5e95\u7eb9\u5bf9\u8c61\n",
      "     * @throws IOException \u56fe\u7247\u8bfb\u53d6\u5f02\u5e38\n",
      "     */\n",
      "    public CanvasPattern createPattern(Path img, String repetition) throws IOException {\n",
      "        img = img.toAbsolutePath();\n",
      "        if (Files.notExists(img)) {\n",
      "            throw new IllegalArgumentException(\"\u5e95\u7eb9\u56fe\u7247\u4e0d\u5b58\u5728\uff1a\" + img);\n",
      "        }\n",
      "        ST_ID id = resManager.addImage(img);\n",
      "\n",
      "        // \u52a0\u8f7d\u539f\u56fe\u7247\n",
      "        BufferedImage gImg = ImageIO.read(img.toFile());\n",
      "        double w = mm(gImg.getWidth());\n",
      "        double h = mm(gImg.getHeight());\n",
      "        // \u5728\u516c\u5171\u8d44\u6e90\u4e2d\u52a0\u5165\u56fe\u7247\n",
      "        ImageObject imgObj = new ImageObject(maxUnitID.incrementAndGet());\n",
      "        imgObj.setResourceID(id.ref());\n",
      "        imgObj.setBoundary(new ST_Box(0, 0, w, h));\n",
      "        imgObj.setCTM(new ST_Array(w, 0, 0, h, 0, 0));\n",
      "\n",
      "        return new CanvasPattern(img, repetition, imgObj);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u521b\u5efa\u5f84\u5411\u6e10\u53d8\u989c\u8272\n",
      "     *\n",
      "     * @param x0 \u6e10\u53d8\u7684\u5f00\u59cb\u5706\u7684 x \u5750\u6807\n",
      "     * @param y0 \u6e10\u53d8\u7684\u5f00\u59cb\u5706\u7684 y \u5750\u6807\n",
      "     * @param r0 \u5f00\u59cb\u5706\u7684\u534a\u5f84\n",
      "     * @param x1 \u6e10\u53d8\u7684\u7ed3\u675f\u5706\u7684 x \u5750\u6807\n",
      "     * @param y1 \u6e10\u53d8\u7684\u7ed3\u675f\u5706\u7684 y \u5750\u6807\n",
      "     * @param r1 \u7ed3\u675f\u5706\u7684\u534a\u5f84\n",
      "     * @return \u5f84\u5411\u6e10\u53d8\u989c\u8272\n",
      "     */\n",
      "    public CanvasRadialGradient createRadialGradient(double x0, double y0, double r0, double x1, double y1, double r1) {\n",
      "        return new CanvasRadialGradient(x0, y0, r0, x1, y1, r1);\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u5e94\u7528\u5f53\u524d\u4e0a\u4e0b\u6587\u4e2d\u7684\u7ed8\u5236\u53c2\u6570\u5230\u7ed8\u5236\u5bf9\u8c61\n",
      "     */\n",
      "    private void applyDrawParam(CT_GraphicUnit<?> p) {\n",
      "        if (p == null) {\n",
      "            return;\n",
      "        }\n",
      "        // \u8bbe\u7f6e\u533a\u57df\n",
      "        p.setBoundary(this.boundary.clone());\n",
      "\n",
      "        // \u8bbe\u7f6e\u900f\u660e\u5ea6\n",
      "        if (this.state.globalAlpha != null) {\n",
      "            p.setAlpha((int) (255 * this.state.globalAlpha));\n",
      "        }\n",
      "\n",
      "        // \u8bbe\u7f6e\u53d8\u6362\u77e9\u9635 \u5ffd\u7565\u5df2\u7ecf\u8bbe\u7f6e\u4e86\u53d8\u6362\u77e9\u9635\u7684\u56fe\u5143\n",
      "        if (this.state.ctm != null && p.getCTM() == null) {\n",
      "            p.setCTM(this.state.ctm.clone());\n",
      "        }\n",
      "        // \u8bbe\u7f6e\u586b\u5145\u989c\u8272\n",
      "        CT_Color fillColor = detectColor(this.fillStyle);\n",
      "        if (fillColor != null) {\n",
      "            this.state.drawParam.setFillColor(fillColor);\n",
      "        }\n",
      "        // \u8bbe\u7f6e\u63cf\u8fb9\u989c\u8272\n",
      "        CT_Color strokeColor = detectColor(this.strokeStyle);\n",
      "        if (strokeColor != null) {\n",
      "            this.state.drawParam.setStrokeColor(strokeColor);\n",
      "        }\n",
      "\n",
      "        // \u8bbe\u7f6e\u7ed8\u5236\u53c2\u6570\n",
      "        ST_ID paramObjId = this.resManager.addDrawParam(this.state.drawParam);\n",
      "        p.setDrawParam(paramObjId.ref());\n",
      "\n",
      "        // \u8bbe\u7f6e\u88c1\u526a\u533a\u57df\n",
      "        if (this.state.clipArea != null) {\n",
      "            Clips clips = new Clips();\n",
      "            org.ofdrw.core.pageDescription.clips.Area area = new org.ofdrw.core.pageDescription.clips.Area();\n",
      "            CT_Path clipObj = new CT_Path().setAbbreviatedData(this.state.clipArea.clone());\n",
      "            clipObj.setFill(true);\n",
      "            // \u88c1\u526a\u533a\u57df\u4e0eCanvas\u7b49\u5927\n",
      "            clipObj.setBoundary(new ST_Box(0, 0, this.boundary.getWidth(), boundary.getHeight()));\n",
      "            if (this.state.ctm != null && !ONE.equals(this.state.ctm)) {\n",
      "                // \u7531\u4e8e\u56fe\u5143\u5185\u7684\u88c1\u526a\u533a\u57df\u53d7\u5230\u56fe\u5143\u7684\u53d8\u6362\u77e9\u9635\u5f71\u54cd\uff0c\n",
      "                // \u800c\u88c1\u526a\u533a\u57df\u662f\u4f4d\u4e8e\u672a\u53d7\u5230\u53d8\u6362\u7684\u539f\u59cb\u753b\u5e03\u4e0a\u7684\u533a\u57df\uff0c\n",
      "                // \u56e0\u6b64\u5728\u56fe\u5143\u5185\u90e8\u7684\u88c1\u526a\u533a\u4e3a\u9700\u8981\u53e0\u52a0\u4e00\u4e2a\u56fe\u5143\u5185\u53d8\u6362\u7684\u9006\u53d8\u6362\uff0c\n",
      "                // \u624d\u53ef\u4ee5\u5b9e\u73b0\u5411\u5916\u90e8\u7a7a\u95f4\u7684\u6620\u5c04\u3002\n",
      "                ST_Array inverse = inverse(this.state.ctm);\n",
      "                if (inverse == null) {\n",
      "                    // \u83b7\u53d6\u83b7\u53d6\u53ef\u9006\u77e9\u9635\u65f6\u653e\u5f03\u88c1\u526a\u533a\n",
      "                    return;\n",
      "                }\n",
      "                clipObj.setCTM(inverse);\n",
      "            }\n",
      "            area.setClipObj(clipObj);\n",
      "            clips.addClip(new CT_Clip().addArea(area));\n",
      "            p.setClips(clips);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8ba1\u7b97\u53ef\u9006\u77e9\u9635\n",
      "     * <p>\n",
      "     * \u6ce8\u610f\uff1a\u521d\u7b49\u53d8\u6362\u4e00\u5b9a\u5b58\u5728\u53ef\u9006\u77e9\u9635\n",
      "     *\n",
      "     * @param ctm \u53d8\u6362\u77e9\u9635\n",
      "     * @return \u53ef\u9006\u77e9\u9635 \u6216 null\n",
      "     */\n",
      "    private ST_Array inverse(ST_Array ctm) {\n",
      "        if (ctm.size() < 6) {\n",
      "            return null;\n",
      "        }\n",
      "        AffineTransform at = new AffineTransform(ctm.get(0), ctm.get(1), ctm.get(2), ctm.get(3), ctm.get(4), ctm.get(5));\n",
      "        AffineTransform tx = null;\n",
      "        try {\n",
      "            tx = at.createInverse();\n",
      "        } catch (NoninvertibleTransformException e) {\n",
      "            return null;\n",
      "        }\n",
      "        return new ST_Array(tx.getScaleX(), tx.getShearY(), tx.getShearX(), tx.getScaleY(), tx.getTranslateX(), tx.getTranslateY());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5bf9\u8def\u5f84\u5e94\u7528\u53d8\u6362\u77e9\u9635\n",
      "     *\n",
      "     * @param data \u56fe\u5f62\u8f6e\u5ed3\u6570\u636e\n",
      "     * @param ctm  \u53d8\u6362\u77e9\u9635\n",
      "     */\n",
      "    public static void transform(AbbreviatedData data, ST_Array ctm) {\n",
      "        AffineTransform at = new AffineTransform(ctm.get(0), ctm.get(1), ctm.get(2), ctm.get(3), ctm.get(4), ctm.get(5));\n",
      "\n",
      "        for (OptVal optVal : data.getRawOptVal()) {\n",
      "            switch (optVal.opt) {\n",
      "                case \"S\":\n",
      "                case \"M\":\n",
      "                case \"L\": {\n",
      "                    double[] arr = optVal.expectValues();\n",
      "                    double[] dst = new double[2];\n",
      "                    at.transform(arr, 0, dst, 0, 1);\n",
      "                    optVal.setValues(dst);\n",
      "                    continue;\n",
      "                }\n",
      "                case \"Q\": {\n",
      "                    double[] arr = optVal.expectValues();\n",
      "                    double[] dst = new double[4];\n",
      "                    at.transform(arr, 0, dst, 0, 2);\n",
      "                    optVal.setValues(dst);\n",
      "                    continue;\n",
      "                }\n",
      "                case \"B\": {\n",
      "                    double[] arr = optVal.expectValues();\n",
      "                    double[] dst = new double[6];\n",
      "                    at.transform(arr, 0, dst, 0, 3);\n",
      "                    optVal.setValues(dst);\n",
      "                    continue;\n",
      "                }\n",
      "                case \"A\": {\n",
      "                    // [0]rx [1]ry [2]angle [3]large [4]sweep [5]x [6]y\n",
      "                    double[] arr = optVal.expectValues();\n",
      "                    double rx = arr[0] * at.getScaleX();\n",
      "                    double ry = arr[1] * at.getScaleY();\n",
      "\n",
      "                    double[] ptDst = new double[2];\n",
      "                    at.transform(arr, 5, ptDst, 0, 1);\n",
      "                    optVal.setValues(new double[]{rx, ry, arr[2], arr[3], arr[4], ptDst[0], ptDst[1]});\n",
      "                }\n",
      "                case \"C\":\n",
      "                default:\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6839\u636e\u989c\u8272\u7c7b\u578b\u63a8\u65ad\u989c\u8272\u5bf9\u8c61\n",
      "     * <p>\n",
      "     * \u82e5\u65e0\u6cd5\u63a8\u65ad\u6216\u53c2\u6570\u9519\u8bef\u5219\u8fd4\u56denull\n",
      "     *\n",
      "     * @param color \u989c\u8272\u7c7b\u578b\n",
      "     * @return OFD\u989c\u8272\u5bf9\u8c61\n",
      "     */\n",
      "    private CT_Color detectColor(Object color) {\n",
      "        if (color == null) {\n",
      "            return null;\n",
      "        }\n",
      "        if (color instanceof String) {\n",
      "            int[] rgb = NamedColor.rgb((String) color);\n",
      "            if (rgb != null) {\n",
      "                CT_Color c = CT_Color.rgb(rgb[0], rgb[1], rgb[2]);\n",
      "                if (rgb.length > 3) {\n",
      "                    // \u989c\u8272\u53c2\u6570\u5305\u542b\u900f\u660e\u5ea6\uff0c\u8bbe\u7f6e\u900f\u660e\u5ea6\n",
      "                    c.setAlpha(rgb[3]);\n",
      "                }\n",
      "                return c;\n",
      "            }\n",
      "            return null;\n",
      "        } else if (color instanceof ColorClusterType) {\n",
      "            CT_Color res = new CT_Color();\n",
      "            res.setColor((ColorClusterType) color);\n",
      "            return res;\n",
      "        } else if (color instanceof CT_Color) {\n",
      "            return (CT_Color) color;\n",
      "        } else if (color instanceof CanvasGradient) {\n",
      "            // \u6e10\u53d8\u989c\u8272\n",
      "            CT_Color res = new CT_Color();\n",
      "            res.setColor(((CanvasGradient) color).axialShd);\n",
      "            return res;\n",
      "        } else if (color instanceof CanvasPattern) {\n",
      "            // \u56fe\u6848\u989c\u8272\n",
      "            CT_Color res = new CT_Color();\n",
      "            res.setColor(((CanvasPattern) color).pattern);\n",
      "            return res;\n",
      "        } else if (color instanceof CanvasRadialGradient) {\n",
      "            // \u5f84\u5411\u6e10\u53d8\u989c\u8272\n",
      "            CT_Color res = new CT_Color();\n",
      "            res.setColor(((CanvasRadialGradient) color).radialShd);\n",
      "            return res;\n",
      "        }\n",
      "        return null;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u89e3\u6790\u5b57\u4f53\u914d\u7f6e\u5b57\u7b26\u4e32\u4e3a\u5b57\u4f53\u914d\u7f6e\u5bf9\u8c61\n",
      "     * <p>\n",
      "     * \u89e3\u6790 font \u5b57\u7b26\u4e32\uff0c\u683c\u5f0f\u4e3a\uff1a[font-style] [font-weight] font-size font-family [] \u8868\u793a\u53ef\u9009\n",
      "     * <p>\n",
      "     * font-style: normal | italic\n",
      "     * font-weight: normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900\n",
      "     * font-size: 12px | 3.17mm\n",
      "     * font-family: \u5b8b\u4f53 | SimSun | Times New Roman | Times | serif | sans-serif | monospace | cursive | fantasy\n",
      "     * font-family \u4e3a\u5fc5\u9009\u9879\uff0c\u5176\u4ed6\u4e3a\u53ef\u9009\u9879\n",
      "     * <p>\n",
      "     * font-size \u53ef\u4ee5\u4f7f\u7528 px \u6216 mm \u4f5c\u4e3a\u5355\u4f4d\uff0c\u82e5\u4e0d\u6307\u5b9a\u5355\u4f4d\u5219\u9ed8\u8ba4\u4e3a mm\n",
      "     *\n",
      "     * @param fontSettingStr \u5b57\u4f53\u914d\u7f6e\u5b57\u7b26\u4e32\n",
      "     * @param fs             \u5b57\u4f53\u914d\u7f6e\u5bf9\u8c61\n",
      "     * @return \u82e5\u6587\u6863\u5df2\u7ecf\u5b58\u5728\u5b57\u4f53\uff0c\u90a3\u4e48\u8fd4\u56de\u5b83\u7684\u5b57\u4f53\u5bf9\u8c61\uff0c\u82e5\u4e0d\u5b58\u548b\u90a3\u4e48\u53ea\u8bbe\u7f6e FontSetting \u5e76\u8fd4\u8fd8null\n",
      "     */\n",
      "    private CT_Font fontStyleToSetting(String fontSettingStr, FontSetting fs) {\n",
      "        if (fontSettingStr == null || fontSettingStr.isEmpty() || fs == null) {\n",
      "            return null;\n",
      "        }\n",
      "        String[] arr = fontSettingStr.trim().split(\" \");\n",
      "        if (arr.length < 2) {\n",
      "            return null;\n",
      "        }\n",
      "\n",
      "        /*\n",
      "         * \u8bbe\u7f6e \u5b57\u4f53 \u540d\u79f0\n",
      "         */\n",
      "        int off = arr.length - 1;\n",
      "        String fontFamily = arr[off].trim();\n",
      "        Font nameFont = new Font(fontFamily, fontFamily);\n",
      "\n",
      "        CT_Font ctFont = null;\n",
      "        ExistCTFont existCTFont = resManager.getFont(fontFamily);\n",
      "        if (existCTFont != null) {\n",
      "            ctFont = existCTFont.font;\n",
      "            if (existCTFont.absPath != null) {\n",
      "                nameFont = new Font(ctFont.getFontName(), ctFont.getFamilyName(), existCTFont.absPath);\n",
      "            } else {\n",
      "                nameFont = new Font(ctFont.getFontName(), ctFont.getFamilyName());\n",
      "            }\n",
      "        }\n",
      "        fs.setFont(nameFont);\n",
      "\n",
      "        /*\n",
      "         * \u8bbe\u7f6e \u5b57\u53f7\n",
      "         */\n",
      "        off--;\n",
      "        // \u89e3\u6790font-size \u5355\u4f4d\u53ef\u80fd\u662f px \u6216 mm \u6216 \u7a7a\n",
      "        String fontSizeStr = arr[off].trim();\n",
      "        double fontSize = 1;\n",
      "        try {\n",
      "            if (fontSizeStr.endsWith(\"px\")) {\n",
      "                fontSizeStr = fontSizeStr.substring(0, fontSizeStr.length() - 2).trim();\n",
      "                fontSize = Double.parseDouble(fontSizeStr) / PPM;\n",
      "            } else if (fontSizeStr.endsWith(\"mm\")) {\n",
      "                fontSizeStr = fontSizeStr.substring(0, fontSizeStr.length() - 2).trim();\n",
      "                fontSize = Double.parseDouble(fontSizeStr);\n",
      "            } else {\n",
      "                fontSize = Double.parseDouble(fontSizeStr);\n",
      "            }\n",
      "        } catch (NumberFormatException e) {\n",
      "            fontSize = 1;\n",
      "        }\n",
      "        fs.setFontSize(fontSize);\n",
      "\n",
      "        off--;\n",
      "        if (off < 0) {\n",
      "            return ctFont;\n",
      "        }\n",
      "        /*\n",
      "         * \u8bbe\u7f6e \u5b57\u4f53\u7c97\u7ec6\n",
      "         */\n",
      "        int fontWeight = 400;\n",
      "        // \u89e3\u6790font-weight\n",
      "        // normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900\n",
      "        switch (arr[off].trim().toLowerCase()) {\n",
      "            case \"lighter\":\n",
      "            case \"100\":\n",
      "                fontWeight = 100;\n",
      "                off--;\n",
      "                break;\n",
      "            case \"200\":\n",
      "                fontWeight = 200;\n",
      "                off--;\n",
      "                break;\n",
      "            case \"300\":\n",
      "                fontWeight = 300;\n",
      "                off--;\n",
      "                break;\n",
      "            case \"normal\":\n",
      "            case \"400\":\n",
      "                fontWeight = 400;\n",
      "                off--;\n",
      "                break;\n",
      "            case \"500\":\n",
      "                fontWeight = 500;\n",
      "                off--;\n",
      "                break;\n",
      "            case \"600\":\n",
      "                fontWeight = 600;\n",
      "                off--;\n",
      "                break;\n",
      "            case \"bold\":\n",
      "            case \"700\":\n",
      "                fontWeight = 700;\n",
      "                off--;\n",
      "                break;\n",
      "            case \"800\":\n",
      "                fontWeight = 800;\n",
      "                off--;\n",
      "                break;\n",
      "            case \"bolder\":\n",
      "            case \"900\":\n",
      "                fontWeight = 900;\n",
      "                off--;\n",
      "                break;\n",
      "            default:\n",
      "                // \u975e\u5b57\u4f53\u5bbd\u5ea6\u914d\u7f6e\uff0c\u5ffd\u7565\n",
      "        }\n",
      "        fs.setFontWeight(fontWeight);\n",
      "        if (off < 0) {\n",
      "            return ctFont;\n",
      "        }\n",
      "        /*\n",
      "         * \u8bbe\u7f6e \u662f\u5426\u659c\u4f53\n",
      "         */\n",
      "        // \u89e3\u6790 font-style: normal | italic\n",
      "        switch (arr[off].trim()) {\n",
      "            case \"italic\":\n",
      "                fs.setItalic(true);\n",
      "                break;\n",
      "            case \"normal\":\n",
      "            default:\n",
      "                fs.setItalic(false);\n",
      "                // \u975e\u5b57\u4f53\u6837\u5f0f\u914d\u7f6e\uff0c\u5ffd\u7565\n",
      "        }\n",
      "\n",
      "        return ctFont;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u50cf\u7d20\u8f6c\u6362\u4e3a\u6beb\u7c73\n",
      "     *\n",
      "     * @param pixel \u50cf\u7d20\n",
      "     * @return \u6beb\u7c73\n",
      "     */\n",
      "    public double mm(int pixel) {\n",
      "        return (double) pixel / PPM;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6beb\u7c73\u8f6c\u6362\u4e3a\u50cf\u7d20\n",
      "     *\n",
      "     * @param mm \u6beb\u7c73\n",
      "     * @return \u50cf\u7d20\n",
      "     */\n",
      "    public int pixel(double mm) {\n",
      "        return (int) (mm * PPM);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6dfb\u52a0\u5b57\u4f53\u81f3\u6587\u6863\u8d44\u6e90\u4e2d\n",
      "     *\n",
      "     * @param name \u5b57\u4f53\u540d\u79f0\n",
      "     * @param p    \u5b57\u4f53\u6587\u4ef6\u8def\u5f84\n",
      "     * @return this\n",
      "     * @throws IOException \u5b57\u4f53\u89e3\u6790\u5f02\u5e38\n",
      "     */\n",
      "    public DrawContext addFont(String name, Path p) throws IOException {\n",
      "        resManager.addFont(new Font(name, p));\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u7ed3\u675f\u7ed8\u5236\u5668\u7ed8\u5236\u5de5\u4f5c\n",
      "     */\n",
      "    @Override\n",
      "    public void close() {\n",
      "\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.layout.element.canvas;\n",
      "\n",
      "import org.junit.jupiter.api.Assertions;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.ofdrw.core.basicType.ST_Array;\n",
      "import org.ofdrw.core.graph.pathObj.AbbreviatedData;\n",
      "import org.ofdrw.core.pageDescription.drawParam.LineCapType;\n",
      "import org.ofdrw.core.pageDescription.drawParam.LineJoinType;\n",
      "import org.ofdrw.font.FontName;\n",
      "import org.ofdrw.layout.OFDDoc;\n",
      "import org.ofdrw.layout.PageLayout;\n",
      "import org.ofdrw.layout.VirtualPage;\n",
      "import org.ofdrw.layout.element.Position;\n",
      "import org.ofdrw.pkg.tool.ElemCup;\n",
      "\n",
      "import java.awt.geom.AffineTransform;\n",
      "import java.io.IOException;\n",
      "import java.nio.file.Path;\n",
      "import java.nio.file.Paths;\n",
      "\n",
      "/**\n",
      " * Canvas \u6d4b\u8bd5\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2020-05-02 18:25:25\n",
      " */\n",
      "class DrawContextTest {\n",
      "\n",
      "    /**\n",
      "     * \u5916\u90e8\u5b57\u4f53\u6d4b\u8bd5\n",
      "     */\n",
      "    @Test\n",
      "    void testExternalFont() throws IOException {\n",
      "        Path outP = Paths.get(\"target/Canvas-ExternalFont.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "\n",
      "            Canvas canvas = new Canvas(200d, 200d);\n",
      "            canvas.setPosition(Position.Absolute)\n",
      "                    .setX(5d).setY(45d)\n",
      "                    .setBorder(1d);\n",
      "\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                // \u6dfb\u52a0\u5916\u90e8\u5b57\u4f53\n",
      "                ctx.addFont(\"\u4eff\u5b8b_\u88c1\u526a\", Paths.get(\"src/test/resources/\u4eff\u5b8b_GB2312_subset.ttf\"));\n",
      "\n",
      "                ctx.font = \"italic 400 5mm \u4eff\u5b8b_\u88c1\u526a\";\n",
      "                ctx.fillStyle = \"#0000FF\";\n",
      "                String text = \"\u4f60\u597d Hello World!\";\n",
      "                double width = ctx.measureText(text).width;\n",
      "                System.out.println(\">> \u6587\u5b57\u5bbd\u5ea6: \" + width + \"mm\");\n",
      "                ctx.fillText(text, 10, 50);\n",
      "                ctx.fillText(text, 10 + width, 50);\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath().toString());\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u5b57\u4f53\u6837\u5f0f\u8bbe\u7f6e \u5b8c\u6574\u53c2\u6570\n",
      "     */\n",
      "    @Test\n",
      "    void testFontStyle1() throws IOException {\n",
      "        Path outP = Paths.get(\"target/Canvas-fontstyle-1.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "\n",
      "            Canvas canvas = new Canvas(200d, 200d);\n",
      "            canvas.setPosition(Position.Absolute)\n",
      "                    .setX(5d).setY(45d)\n",
      "                    .setBorder(1d);\n",
      "\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                // \u659c\u4f53 400\u7c97 5mm\u5b57\u53f7 \u5b8b\u4f53\n",
      "                ctx.font = \"italic 400 5mm \u5b8b\u4f53\";\n",
      "                ctx.fillStyle = \"#0000FF\";\n",
      "                String text = \"\u4f60\u597d Hello World!\";\n",
      "                double width = ctx.measureText(text).width;\n",
      "                System.out.println(\">> \u6587\u5b57\u5bbd\u5ea6: \" + width + \"mm\");\n",
      "                ctx.fillText(text, 10, 50);\n",
      "                ctx.fillText(text, 10 + width, 50);\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath().toString());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5b57\u4f53\u6837\u5f0f\u8bbe\u7f6e \u5fc5\u8981\u53c2\u6570\n",
      "     */\n",
      "    @Test\n",
      "    void testFontStyle2() throws IOException {\n",
      "        Path outP = Paths.get(\"target/Canvas-fontstyle-2.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "\n",
      "            Canvas canvas = new Canvas(200d, 200d);\n",
      "            canvas.setPosition(Position.Absolute)\n",
      "                    .setX(5d).setY(45d)\n",
      "                    .setBorder(1d);\n",
      "\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                ctx.font = \"5mm \u9ed1\u4f53\";\n",
      "                ctx.fillStyle = \"#0000FF\";\n",
      "                String text = \"\u4f60\u597d Hello World!\";\n",
      "                double width = ctx.measureText(text).width;\n",
      "                ctx.fillText(text, 10, 50);\n",
      "                ctx.fillText(text, 10 + width, 50);\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath().toString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testCreateRadialGradient() throws IOException {\n",
      "        ElemCup.ENABLE_DEBUG_PRINT = true;\n",
      "        Path outP = Paths.get(\"target/CreateRadialGradient.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(1000d, 1000d);\n",
      "            Canvas canvas = new Canvas(350, 50, 200, 150);\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                CanvasRadialGradient gradient = ctx.createRadialGradient(40, 70, 10, 140, 70, 50);\n",
      "                gradient.addColorStop(0, \"rgb(255,255,0)\");\n",
      "                gradient.addColorStop(1, \"rgb(0,0,255)\");\n",
      "                ctx.fillStyle = gradient;\n",
      "                ctx.fillRect(0, 0, 200, 150);\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\">> \u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void testCreatePattern() throws IOException {\n",
      "        ElemCup.ENABLE_DEBUG_PRINT = true;\n",
      "        Path outP = Paths.get(\"target/CreatePattern.ofd\");\n",
      "        Path img = Paths.get(\"src/test/resources/lamp.jpg\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            final PageLayout pageLayout = ofdDoc.getPageLayout();\n",
      "            VirtualPage vPage = new VirtualPage(pageLayout);\n",
      "            Canvas canvas = new Canvas(pageLayout.getWidth(), pageLayout.getHeight());\n",
      "            canvas.setPosition(Position.Absolute).setX(0D).setY(0D);\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                CanvasPattern pattern = ctx.createPattern(img, \"repeat\");\n",
      "                ctx.fillStyle = pattern;\n",
      "                ctx.fillRect(0, 0, 30, 30);\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\">> \u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testCreatePatternSize() throws IOException {\n",
      "        ElemCup.ENABLE_DEBUG_PRINT = true;\n",
      "        Path outP = Paths.get(\"target/CreatePatternSize.ofd\");\n",
      "        Path img = Paths.get(\"src/test/resources/lamp.jpg\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            final PageLayout pageLayout = ofdDoc.getPageLayout();\n",
      "            VirtualPage vPage = new VirtualPage(pageLayout);\n",
      "            Canvas canvas = new Canvas(pageLayout.getWidth(), pageLayout.getHeight());\n",
      "            canvas.setPosition(Position.Absolute).setX(0D).setY(0D);\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                CanvasPattern pattern = ctx.createPattern(img, \"repeat\");\n",
      "                pattern.setImageSize(10, 10);\n",
      "                ctx.fillStyle = pattern;\n",
      "                ctx.fillRect(0, 0, 30, 30);\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\">> \u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testCreatePatternStyle2() throws IOException {\n",
      "        ElemCup.ENABLE_DEBUG_PRINT = true;\n",
      "        Path outP = Paths.get(\"target/CreatePattern2.ofd\");\n",
      "        Path img = Paths.get(\"src/test/resources/lamp.jpg\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            final PageLayout pageLayout = ofdDoc.getPageLayout();\n",
      "            VirtualPage vPage = new VirtualPage(pageLayout);\n",
      "            Canvas canvas = new Canvas(pageLayout.getWidth(), pageLayout.getHeight());\n",
      "            canvas.setPosition(Position.Absolute).setX(0D).setY(0D);\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                CanvasPattern pattern = ctx.createPattern(img, \"row-column\");\n",
      "                ctx.fillStyle = pattern;\n",
      "                ctx.fillRect(0, 0, 30, 30);\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\">> \u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testCreatePatternCTM() throws IOException {\n",
      "        ElemCup.ENABLE_DEBUG_PRINT = true;\n",
      "        Path outP = Paths.get(\"target/CreatePatternCTM.ofd\");\n",
      "        Path img = Paths.get(\"src/test/resources/lamp.jpg\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            final PageLayout pageLayout = ofdDoc.getPageLayout();\n",
      "            VirtualPage vPage = new VirtualPage(pageLayout);\n",
      "            Canvas canvas = new Canvas(pageLayout.getWidth(), pageLayout.getHeight());\n",
      "            canvas.setPosition(Position.Absolute).setX(0D).setY(0D);\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                AffineTransform matrix = new AffineTransform();\n",
      "                CanvasPattern pattern = ctx.createPattern(img, \"repeat\");\n",
      "                matrix.rotate(-45);\n",
      "                matrix.scale(5d, 5d);\n",
      "                pattern.setTransform(matrix);\n",
      "                ctx.fillStyle = pattern;\n",
      "                ctx.fillRect(0, 0, 30, 30);\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\">> \u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testCreateLinearGradient() throws IOException {\n",
      "        ElemCup.ENABLE_DEBUG_PRINT = true;\n",
      "        Path outP = Paths.get(\"target/CreateLinearGradient.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            final PageLayout pageLayout = ofdDoc.getPageLayout();\n",
      "            VirtualPage vPage = new VirtualPage(pageLayout);\n",
      "            Canvas canvas = new Canvas(pageLayout.getWidth(), pageLayout.getHeight());\n",
      "            canvas.setPosition(Position.Absolute).setX(0D).setY(0D);\n",
      "            canvas.setDrawer(ctx -> {\n",
      "\n",
      "                CanvasGradient my_gradient = ctx.createLinearGradient(0, 0, 170, 0);\n",
      "                my_gradient.addColorStop(0, \"black\");\n",
      "                my_gradient.addColorStop(0.5, \"red\");\n",
      "                my_gradient.addColorStop(1, \"white\");\n",
      "                ctx.fillStyle = my_gradient;\n",
      "                ctx.fillRect(20, 20, 150, 100);\n",
      "\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\">> \u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testFillStyle() throws IOException {\n",
      "        ElemCup.ENABLE_DEBUG_PRINT = true;\n",
      "        Path outP = Paths.get(\"target/FillStyle.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            final PageLayout pageLayout = ofdDoc.getPageLayout();\n",
      "            VirtualPage vPage = new VirtualPage(pageLayout);\n",
      "            Canvas canvas = new Canvas(pageLayout.getWidth(), pageLayout.getHeight());\n",
      "            canvas.setPosition(Position.Absolute).setX(0D).setY(0D);\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                ctx.fillStyle = \"#FF0000\";\n",
      "                ctx.fillRect(20, 20, 150, 100);\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        ;\n",
      "        System.out.println(\">> \u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testStrokeStyle() throws IOException {\n",
      "        ElemCup.ENABLE_DEBUG_PRINT = true;\n",
      "        Path outP = Paths.get(\"target/StrokeStyle.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            final PageLayout pageLayout = ofdDoc.getPageLayout();\n",
      "            VirtualPage vPage = new VirtualPage(pageLayout);\n",
      "            Canvas canvas = new Canvas(pageLayout.getWidth(), pageLayout.getHeight());\n",
      "            canvas.setPosition(Position.Absolute).setX(0D).setY(0D);\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                ctx.strokeStyle = \"#FF0000\";\n",
      "                ctx.strokeRect(20, 20, 150, 100);\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\">> \u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testLineTo() throws IOException {\n",
      "        Path outP = Paths.get(\"target/LineTo.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            final PageLayout pageLayout = ofdDoc.getPageLayout();\n",
      "            VirtualPage vPage = new VirtualPage(pageLayout);\n",
      "\n",
      "            Canvas canvas = new Canvas(pageLayout.getWidth(), pageLayout.getHeight());\n",
      "            canvas.setPosition(Position.Absolute).setX(0D).setY(0D);\n",
      "            canvas.setDrawer(ctx -> {\n",
      "//                ctx.setFont(FontSetting.getInstance()).fillText(\"Hello world!\", 0, 5);\n",
      "                ctx.beginPath()\n",
      "                        .moveTo(0, 0)\n",
      "                        .lineTo(100, 200)\n",
      "                        .setStrokeColor(0, 0, 0)\n",
      "                        .setLineWidth(1)\n",
      "                        .stroke();\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath().toString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void stroke() throws IOException {\n",
      "        Path outP = Paths.get(\"target/CanvasLineCreate.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "\n",
      "            Canvas canvas = new Canvas(200d, 200d);\n",
      "            canvas.setPosition(Position.Absolute)\n",
      "                    .setX(5d).setY(45d)\n",
      "                    .setBorder(1d);\n",
      "\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                ctx.beginPath()\n",
      "                        .moveTo(20, 20)\n",
      "                        .lineTo(20, 100)\n",
      "                        .lineTo(70, 100)\n",
      "                        .setStrokeColor(0, 255, 0)\n",
      "                        .stroke();\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath().toString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void stroke2() throws IOException {\n",
      "        Path outP = Paths.get(\"target/stroke2.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "\n",
      "            Canvas canvas = new Canvas(200d, 200d);\n",
      "            canvas.setPosition(Position.Absolute)\n",
      "                    .setX(5d).setY(45d)\n",
      "                    .setBorder(1d);\n",
      "\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                ctx.rect(20, 20, 40, 20);\n",
      "                ctx.setStrokeColor(255, 0, 0);\n",
      "                ctx.stroke();\n",
      "                ctx.rect(30, 30, 50, 30);\n",
      "                ctx.setStrokeColor(0, 0, 255);\n",
      "                ctx.stroke();\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath().toString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void strokeRect2() throws IOException {\n",
      "        Path outP = Paths.get(\"target/strokeRect2.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "\n",
      "            Canvas canvas = new Canvas(200d, 200d);\n",
      "            canvas.setPosition(Position.Absolute)\n",
      "                    .setX(5d).setY(45d)\n",
      "                    .setBorder(1d);\n",
      "\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                ctx.rect(20, 20, 40, 20);\n",
      "                ctx.setStrokeColor(255, 0, 0);\n",
      "                ctx.strokeRect(30, 30, 50, 30);\n",
      "                ctx.setStrokeColor(0, 255, 0);\n",
      "                ctx.stroke();\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath().toString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void fillRect2() throws IOException {\n",
      "        Path outP = Paths.get(\"target/fillRect2.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "\n",
      "            Canvas canvas = new Canvas(200d, 200d);\n",
      "            canvas.setPosition(Position.Absolute)\n",
      "                    .setX(5d).setY(45d)\n",
      "                    .setBorder(1d);\n",
      "\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                ctx.rect(20, 20, 40, 20);\n",
      "                ctx.setFillColor(255, 0, 0);\n",
      "                ctx.fillRect(30, 30, 50, 30);\n",
      "                ctx.setFillColor(0, 255, 0);\n",
      "                ctx.fill();\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath().toString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void fill() throws IOException {\n",
      "        Path outP = Paths.get(\"target/Canvas-fill.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "\n",
      "            Canvas canvas = new Canvas(200d, 200d);\n",
      "            canvas.setPosition(Position.Absolute)\n",
      "                    .setX(5d).setY(45d)\n",
      "                    .setBorder(1d);\n",
      "\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                ctx.beginPath()\n",
      "                        .moveTo(20, 20)\n",
      "                        .lineTo(20, 100)\n",
      "                        .lineTo(70, 100)\n",
      "                        .closePath()\n",
      "                        .setFillColor(255, 0, 0)\n",
      "                        .stroke()\n",
      "                        .fill();\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath().toString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void beginPath() throws IOException {\n",
      "        Path outP = Paths.get(\"target/Canvas-beginPath.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "\n",
      "            Canvas canvas = new Canvas(200d, 200d);\n",
      "            canvas.setPosition(Position.Absolute)\n",
      "                    .setX(5d).setY(45d)\n",
      "                    .setBorder(1d);\n",
      "\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                ctx.beginPath();\n",
      "                ctx.setLineWidth(3d);\n",
      "                ctx.setStrokeColor(255, 0, 0);\n",
      "                ctx.moveTo(0, 75);\n",
      "                ctx.lineTo(150, 75);\n",
      "                ctx.stroke();\n",
      "\n",
      "                ctx.beginPath();\n",
      "                ctx.setStrokeColor(0, 0, 255);\n",
      "                ctx.moveTo(10, 0);\n",
      "                ctx.lineTo(150, 130);\n",
      "                ctx.stroke();\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath().toString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void clip() throws IOException {\n",
      "        Path outP = Paths.get(\"target/Canvas-clip.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "\n",
      "            Canvas canvas = new Canvas(200d, 200d);\n",
      "            canvas.setPosition(Position.Absolute)\n",
      "                    .setX(5d).setY(45d)\n",
      "                    .setBorder(1d);\n",
      "\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                // \u526a\u5207\u77e9\u5f62\u533a\u57df\n",
      "                ctx.rect(20, 20, 40, 20);\n",
      "                ctx.setFillColor(255, 0, 0);\n",
      "                ctx.fill();\n",
      "                ctx.clip();\n",
      "                // \u5728 clip() \u4e4b\u540e\u7ed8\u5236\u7eff\u8272\u77e9\u5f62\n",
      "                ctx.setFillColor(0, 255, 0);\n",
      "                ctx.fillRect(30, 30, 50, 30);\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath().toString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void clipCTM() throws IOException {\n",
      "        Path outP = Paths.get(\"target/Canvas-clip-ctm.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(new PageLayout(500d, 500d));\n",
      "\n",
      "            Canvas canvas = new Canvas(400d, 400d);\n",
      "            canvas.setPosition(Position.Absolute)\n",
      "                    .setX(50d).setY(50d)\n",
      "                    .setBorder(1d);\n",
      "\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                // \u526a\u5207\u77e9\u5f62\u533a\u57df\n",
      "                ctx.translate(50, 50);\n",
      "                ctx.rect(0, 0, 100, 100);\n",
      "                ctx.clip();\n",
      "\n",
      "                ctx.setFillColor(255, 0, 0);\n",
      "                ctx.fill();\n",
      "\n",
      "                // \u5728 clip() \u4e4b\u540e\u7ed8\u5236\u7eff\u8272\u77e9\u5f62\n",
      "                ctx.rotate(20);\n",
      "                ctx.setFillColor(0, 255, 0);\n",
      "                ctx.fillRect(0, 0, 100, 100);\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath().toString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void quadraticCurveTo() throws IOException {\n",
      "        Path outP = Paths.get(\"target/Canvas-quadraticCurveTo.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "\n",
      "            Canvas canvas = new Canvas(200d, 200d);\n",
      "            canvas.setPosition(Position.Absolute)\n",
      "                    .setX(5d).setY(45d)\n",
      "                    .setBorder(1d);\n",
      "\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                ctx.beginPath();\n",
      "                ctx.moveTo(20, 20);\n",
      "                ctx.quadraticCurveTo(20, 100, 200, 20);\n",
      "                ctx.stroke();\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath().toString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void bezierCurveTo() throws IOException {\n",
      "        Path outP = Paths.get(\"target/Canvas-bezierCurveTo.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "\n",
      "            Canvas canvas = new Canvas(200d, 200d);\n",
      "            canvas.setPosition(Position.Absolute)\n",
      "                    .setX(5d).setY(45d)\n",
      "                    .setBorder(1d);\n",
      "\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                ctx.beginPath();\n",
      "                ctx.moveTo(20, 20);\n",
      "                ctx.bezierCurveTo(20, 100, 200, 100, 200, 20);\n",
      "                ctx.stroke();\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath().toString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void arc() throws IOException {\n",
      "        Path outP = Paths.get(\"target/Canvas-arc.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "\n",
      "            Canvas canvas = new Canvas(200d, 200d);\n",
      "            canvas.setPosition(Position.Absolute)\n",
      "                    .setX(5d).setY(45d)\n",
      "                    .setBorder(1d);\n",
      "\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                ctx.beginPath();\n",
      "                ctx.arc(100, 75, 50, 0, 360);\n",
      "                ctx.stroke();\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath().toString());\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void rect() throws IOException {\n",
      "        Path outP = Paths.get(\"target/Canvas-rect.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "\n",
      "            Canvas canvas = new Canvas(200d, 200d);\n",
      "            canvas.setPosition(Position.Absolute)\n",
      "                    .setX(5d).setY(45d)\n",
      "                    .setBorder(1d);\n",
      "\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                ctx.rect(20, 20, 150, 100);\n",
      "                ctx.stroke();\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath().toString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void strokeRect() throws IOException {\n",
      "        Path outP = Paths.get(\"target/Canvas-strokeRect.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "\n",
      "            Canvas canvas = new Canvas(200d, 200d);\n",
      "            canvas.setPosition(Position.Absolute)\n",
      "                    .setX(5d).setY(45d)\n",
      "                    .setBorder(1d);\n",
      "\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                ctx.strokeRect(20, 20, 150, 100);\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath().toString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void fillRect() throws IOException {\n",
      "        Path outP = Paths.get(\"target/Canvas-fillRect.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "\n",
      "            Canvas canvas = new Canvas(200d, 200d);\n",
      "            canvas.setPosition(Position.Absolute)\n",
      "                    .setX(5d).setY(45d)\n",
      "                    .setBorder(1d);\n",
      "\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                ctx.fillRect(20, 20, 150, 100);\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath().toString());\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void drawImage() throws IOException {\n",
      "        Path outP = Paths.get(\"target/Canvas-drawImage.ofd\");\n",
      "        Path imgPath = Paths.get(\"src/test/resources/eg_tulip.jpg\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "\n",
      "            Canvas canvas = new Canvas(200d, 200d);\n",
      "            canvas.setPosition(Position.Absolute)\n",
      "                    .setX(5d).setY(45d)\n",
      "                    .setBorder(1d);\n",
      "\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                ctx.drawImage(imgPath, 10, 10, 120, 80);\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath().toString());\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void drawImagePart() throws IOException {\n",
      "        Path outP = Paths.get(\"target/drawImage_part.ofd\");\n",
      "        Path imgPath = Paths.get(\"src/test/resources/rhino.jpg\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            PageLayout pageLayout = ofdDoc.getPageLayout();\n",
      "            VirtualPage vPage = new VirtualPage(pageLayout);\n",
      "            Canvas canvas = new Canvas(pageLayout.getWidth(), pageLayout.getHeight());\n",
      "            canvas.setPosition(Position.Absolute).setXY(0d, 0d);\n",
      "\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                ctx.PPM = 1d;\n",
      "                ctx.drawImage(imgPath,\n",
      "                        ctx.mm(33), ctx.mm(71), ctx.mm(104), ctx.mm(124),\n",
      "                        ctx.mm(21), ctx.mm(20), ctx.mm(87), ctx.mm(104)\n",
      "                );\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void drawImageLeftTop() throws IOException {\n",
      "        Path outP = Paths.get(\"target/drawImage_left_top.ofd\");\n",
      "        Path imgPath = Paths.get(\"src/test/resources/rhino.jpg\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            PageLayout pageLayout = ofdDoc.getPageLayout();\n",
      "            VirtualPage vPage = new VirtualPage(pageLayout);\n",
      "            Canvas canvas = new Canvas(pageLayout.getWidth(), pageLayout.getHeight());\n",
      "            canvas.setPosition(Position.Absolute).setXY(0d, 0d);\n",
      "\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                ctx.PPM = 3d;\n",
      "                ctx.drawImage(imgPath, 0, 0);\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void drawImage2() throws IOException {\n",
      "        Path outP = Paths.get(\"target/Canvas-drawImage2.ofd\");\n",
      "        Path imgPath = Paths.get(\"src/test/resources/eg_tulip.jpg\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "\n",
      "            Canvas canvas = new Canvas(200d, 200d);\n",
      "            canvas.setPosition(Position.Absolute)\n",
      "                    .setX(5d).setY(45d)\n",
      "                    .setBorder(1d);\n",
      "\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                ctx.rotate(20);\n",
      "                ctx.drawImage(imgPath, 10, 10, 60, 40);\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath().toString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void scale() throws IOException {\n",
      "        Path outP = Paths.get(\"target/Canvas-scale.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "\n",
      "            Canvas canvas = new Canvas(200d, 200d);\n",
      "            canvas.setPosition(Position.Absolute)\n",
      "                    .setX(5d).setY(45d)\n",
      "                    .setBorder(1d);\n",
      "\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                ctx.strokeRect(5, 5, 10, 6);\n",
      "                ctx.scale(2, 2);\n",
      "                ctx.strokeRect(5, 5, 10, 6);\n",
      "                ctx.scale(2, 2);\n",
      "                ctx.strokeRect(5, 5, 10, 6);\n",
      "                ctx.scale(2, 2);\n",
      "                ctx.strokeRect(5, 5, 10, 6);\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath().toString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void rotate() throws IOException {\n",
      "        Path outP = Paths.get(\"target/Canvas-rotate.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "\n",
      "            Canvas canvas = new Canvas(200d, 200d);\n",
      "            canvas.setPosition(Position.Absolute)\n",
      "                    .setX(5d).setY(45d)\n",
      "                    .setBorder(1d);\n",
      "\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                ctx.rotate(20);\n",
      "                ctx.fillRect(50, 20, 100, 50);\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath().toString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void translate() throws IOException {\n",
      "        Path outP = Paths.get(\"target/Canvas-translate.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "\n",
      "            Canvas canvas = new Canvas(200d, 200d);\n",
      "            canvas.setPosition(Position.Absolute)\n",
      "                    .setX(5d).setY(45d)\n",
      "                    .setBorder(1d);\n",
      "\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                ctx.fillRect(10, 10, 50, 25);\n",
      "                ctx.translate(30, 30);\n",
      "                ctx.fillRect(10, 10, 50, 25);\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath().toString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void transform() throws IOException {\n",
      "        Path outP = Paths.get(\"target/Canvas-transform.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "\n",
      "            Canvas canvas = new Canvas(200d, 200d);\n",
      "            canvas.setPosition(Position.Absolute)\n",
      "                    .setX(5d).setY(45d)\n",
      "                    .setBorder(1d);\n",
      "\n",
      "            canvas.setDrawer(ctx -> {\n",
      "\n",
      "                ctx.setFillColor(255, 255, 0);\n",
      "                ctx.fillRect(0, 0, 100, 50);\n",
      "\n",
      "                ctx.transform(1, 0.5, -0.5, 1, 30, 10);\n",
      "                ctx.setFillColor(255, 0, 0);\n",
      "                ctx.fillRect(0, 0, 100, 50);\n",
      "\n",
      "                ctx.transform(1, 0.5, -0.5, 1, 30, 10);\n",
      "                ctx.setFillColor(0, 0, 255);\n",
      "                ctx.fillRect(0, 0, 100, 50);\n",
      "\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath().toString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void setTransform() throws IOException {\n",
      "        Path outP = Paths.get(\"target/Canvas-setTransform.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "\n",
      "            Canvas canvas = new Canvas(200d, 200d);\n",
      "            canvas.setPosition(Position.Absolute)\n",
      "                    .setX(5d).setY(45d)\n",
      "                    .setBorder(1d);\n",
      "\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                ctx.setFillColor(255, 255, 0);\n",
      "                ctx.fillRect(0, 0, 100, 50);\n",
      "\n",
      "                ctx.setTransform(1, 0.5, -0.5, 1, 30, 10);\n",
      "                ctx.setFillColor(255, 0, 0);\n",
      "                ctx.fillRect(0, 0, 100, 50);\n",
      "\n",
      "                ctx.setTransform(1, 0.5, -0.5, 1, 30, 10);\n",
      "                ctx.setFillColor(0, 0, 255);\n",
      "                ctx.fillRect(0, 0, 100, 50);\n",
      "\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath().toString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getGlobalAlpha() throws IOException {\n",
      "        Path outP = Paths.get(\"target/Canvas-globalAlpha.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "\n",
      "            Canvas canvas = new Canvas(200d, 200d);\n",
      "            canvas.setPosition(Position.Absolute)\n",
      "                    .setX(5d).setY(45d)\n",
      "                    .setBorder(1d);\n",
      "\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                ctx.setFillColor(255, 0, 0);\n",
      "                ctx.fillRect(20, 20, 75, 50);\n",
      "                // \u8c03\u8282\u900f\u660e\u5ea6\n",
      "                ctx.setGlobalAlpha(0.2);\n",
      "                ctx.setFillColor(0, 0, 255);\n",
      "                ctx.fillRect(50, 50, 75, 50);\n",
      "                ctx.setFillColor(0, 255, 0);\n",
      "                ctx.fillRect(80, 80, 75, 50);\n",
      "\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath().toString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void save() throws IOException {\n",
      "        Path outP = Paths.get(\"target/Canvas-save.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "\n",
      "            Canvas canvas = new Canvas(200d, 200d);\n",
      "            canvas.setPosition(Position.Absolute)\n",
      "                    .setX(5d).setY(45d)\n",
      "                    .setBorder(1d);\n",
      "\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                ctx.save();\n",
      "                ctx.setFillColor(0, 255, 0);\n",
      "                ctx.fillRect(10, 10, 30, 30);\n",
      "                ctx.restore();\n",
      "                ctx.fillRect(40, 50, 30, 30);\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath().toString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void fillText() throws IOException {\n",
      "        Path outP = Paths.get(\"target/Canvas-fillText.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "\n",
      "            Canvas canvas = new Canvas(200d, 200d);\n",
      "            canvas.setPosition(Position.Absolute)\n",
      "                    .setX(5d).setY(45d)\n",
      "                    .setBorder(1d);\n",
      "\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                FontSetting fontSetting = new FontSetting(5, FontName.SimSun.font())\n",
      "                        .setCharDirection(180)\n",
      "                        .setReadDirection(90);\n",
      "                ctx.setFont(fontSetting);\n",
      "                ctx.fillText(\"\u4f60\u597d Hello World!\", 10, 50);\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath().toString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void fillTextDefault() throws IOException {\n",
      "        Path outP = Paths.get(\"target/Canvas-fillText-Default-font.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "\n",
      "            Canvas canvas = new Canvas(200d, 200d);\n",
      "            canvas.setPosition(Position.Absolute)\n",
      "                    .setX(5d).setY(45d)\n",
      "                    .setBorder(1d);\n",
      "\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                ctx.fillText(\"\u4f60\u597d Hello World!\", 10, 50);\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath().toString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void measureText() throws IOException {\n",
      "        Path outP = Paths.get(\"target/Canvas-measureText.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "\n",
      "            Canvas canvas = new Canvas(200d, 200d);\n",
      "            canvas.setPosition(Position.Absolute)\n",
      "                    .setX(5d).setY(45d)\n",
      "                    .setBorder(1d);\n",
      "\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                FontSetting fontSetting = new FontSetting(5, FontName.SimSun.font());\n",
      "                ctx.setFont(fontSetting);\n",
      "\n",
      "                String text = \"\u4f60\u597d Hello World!\";\n",
      "                double width = ctx.measureText(text).width;\n",
      "                System.out.println(\">> \u6587\u5b57\u5bbd\u5ea6: \" + width + \"mm\");\n",
      "                ctx.fillText(text, 10, 50);\n",
      "                ctx.fillText(text, 10 + width, 50);\n",
      "//                Assertions.assertEquals();\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath().toString());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6d4b\u91cf\u5b57\u4f53\u6240\u5360\u7a7a\u95f4\n",
      "     */\n",
      "    @Test\n",
      "    void measureTextArea() throws IOException {\n",
      "        Path outP = Paths.get(\"target/Canvas-measureTextArea.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "\n",
      "            Canvas canvas = new Canvas(200d, 200d);\n",
      "            canvas.setPosition(Position.Absolute)\n",
      "                    .setX(5d).setY(45d)\n",
      "                    .setBorder(1d);\n",
      "\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                FontSetting fontSetting = new FontSetting(5, FontName.SimSun.font());\n",
      "                ctx.setFont(fontSetting);\n",
      "\n",
      "                String text = \"\u4f60\u597d Hello World!\";\n",
      "                TextMetricsArea area = ctx.measureTextArea(text);\n",
      "                System.out.println(\">> \u6587\u5b57\u5bbd\u5ea6: \" + area.width + \"mm\");\n",
      "                ctx.fillText(text, 10, 50);\n",
      "                ctx.fillText(text, 10, 50 + area.height);\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath().toString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void fillTextAllDirection() throws IOException {\n",
      "        int[] readDirect = {0, 180, 90, 270};\n",
      "        int[] charDirect = {0, 180, 90, 270};\n",
      "        for (int r : readDirect) {\n",
      "            for (int c : charDirect) {\n",
      "                String fileName = String.format(\"Canvas-fillText-C%dR%d.ofd\", c, r);\n",
      "                Path outP = Paths.get(\"target\", fileName);\n",
      "                try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "                    VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "\n",
      "                    Canvas canvas = new Canvas(200d, 200d);\n",
      "                    canvas.setPosition(Position.Absolute)\n",
      "                            .setX(5d).setY(45d)\n",
      "                            .setBorder(1d);\n",
      "\n",
      "                    canvas.setDrawer(ctx -> {\n",
      "                        FontSetting fontSetting = new FontSetting(5, FontName.SimSun.font())\n",
      "                                .setCharDirection(c)\n",
      "                                .setReadDirection(r);\n",
      "                        ctx.setFont(fontSetting);\n",
      "\n",
      "                        ctx.fillText(\"li \u4f60\u597d Hello World!\", 100, 100);\n",
      "                        ctx.beginPath();\n",
      "                        if (r == 0 || r == 180) {\n",
      "                            ctx.moveTo(100, 90);\n",
      "                            ctx.lineTo(100, 110);\n",
      "\n",
      "                            ctx.moveTo(40, 100);\n",
      "                            ctx.lineTo(160, 100);\n",
      "                            ctx.stroke();\n",
      "                        } else {\n",
      "                            ctx.moveTo(90, 100);\n",
      "                            ctx.lineTo(110, 100);\n",
      "\n",
      "                            ctx.moveTo(100, 40);\n",
      "                            ctx.lineTo(100, 160);\n",
      "                            ctx.stroke();\n",
      "                        }\n",
      "                    });\n",
      "                    vPage.add(canvas);\n",
      "\n",
      "                    ofdDoc.addVPage(vPage);\n",
      "                }\n",
      "                System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath().toString());\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void textAlign() throws IOException {\n",
      "\n",
      "        Path outP = Paths.get(\"target/Canvas-textAlign.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "\n",
      "            Canvas canvas = new Canvas(200d, 200d);\n",
      "            canvas.setPosition(Position.Absolute)\n",
      "                    .setX(5d).setY(45d)\n",
      "                    .setBorder(1d);\n",
      "\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                // \u5728\u4f4d\u7f6e 150 \u521b\u5efa\u84dd\u7ebf\n",
      "                ctx.setStrokeColor(0, 0, 255);\n",
      "                ctx.moveTo(150, 20);\n",
      "                ctx.lineTo(150, 170);\n",
      "                ctx.stroke();\n",
      "\n",
      "                ctx.setFont(new FontSetting(5, FontName.SimSun.font()));\n",
      "\n",
      "                // \u663e\u793a\u4e0d\u540c\u7684 textAlign \u503c\n",
      "                ctx.setTextAlign(TextAlign.start);\n",
      "                ctx.fillText(\"textAlign=start\", 150, 60);\n",
      "                ctx.setTextAlign(TextAlign.end);\n",
      "                ctx.fillText(\"textAlign=end\", 150, 80).setTextAlign(TextAlign.left);\n",
      "                ctx.fillText(\"textAlign=left\", 150, 100);\n",
      "                ctx.setTextAlign(TextAlign.center);\n",
      "                ctx.fillText(\"textAlign=center\", 150, 120);\n",
      "                ctx.setTextAlign(TextAlign.right);\n",
      "                ctx.fillText(\"textAlign=right\", 150, 140);\n",
      "\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath().toString());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u7aef\u70b9\u6837\u5f0f\n",
      "     *\n",
      "     * @throws IOException\n",
      "     */\n",
      "    @Test\n",
      "    void setLineCap() throws IOException {\n",
      "        Path outP = Paths.get(\"target/LineCap.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "\n",
      "            Canvas canvas = new Canvas(200d, 200d);\n",
      "            canvas.setPosition(Position.Absolute)\n",
      "                    .setX(5d).setY(45d)\n",
      "                    .setBorder(1d);\n",
      "\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                ctx.beginPath();\n",
      "                ctx.setLineWidth(10d);\n",
      "                ctx.setLineCap(LineCapType.Butt);\n",
      "                ctx.moveTo(20, 20);\n",
      "                ctx.lineTo(150, 20);\n",
      "                ctx.stroke();\n",
      "\n",
      "                ctx.beginPath();\n",
      "                ctx.setLineCap(LineCapType.Round);\n",
      "                ctx.moveTo(20, 40);\n",
      "                ctx.lineTo(150, 40);\n",
      "                ctx.stroke();\n",
      "\n",
      "                ctx.beginPath();\n",
      "                ctx.setLineCap(LineCapType.Square);\n",
      "                ctx.moveTo(20, 60);\n",
      "                ctx.lineTo(150, 60);\n",
      "                ctx.stroke();\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath().toString());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u4e24\u6761\u7ebf\u76f8\u4ea4\u65f6\uff0c\u6240\u521b\u5efa\u7684\u62d0\u89d2\u7c7b\u578b\n",
      "     *\n",
      "     * @throws IOException\n",
      "     */\n",
      "    @Test\n",
      "    void setLineJoin() throws IOException {\n",
      "        Path outP = Paths.get(\"target/LineJoin.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "\n",
      "            Canvas canvas = new Canvas(200d, 200d);\n",
      "            canvas.setPosition(Position.Absolute)\n",
      "                    .setX(5d).setY(45d)\n",
      "                    .setBorder(1d);\n",
      "\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                ctx.beginPath();\n",
      "                ctx.setLineWidth(5d);\n",
      "                ctx.setLineJoin(LineJoinType.Round);\n",
      "                ctx.moveTo(20, 30);\n",
      "                ctx.lineTo(50, 50);\n",
      "                ctx.lineTo(20, 60);\n",
      "                ctx.stroke();\n",
      "\n",
      "                ctx.beginPath();\n",
      "                ctx.setLineJoin(LineJoinType.Bevel);\n",
      "                ctx.moveTo(80, 30);\n",
      "                ctx.lineTo(110, 50);\n",
      "                ctx.lineTo(80, 60);\n",
      "                ctx.stroke();\n",
      "\n",
      "                ctx.beginPath();\n",
      "                ctx.setLineJoin(LineJoinType.Miter);\n",
      "                ctx.moveTo(140, 30);\n",
      "                ctx.lineTo(170, 50);\n",
      "                ctx.lineTo(140, 60);\n",
      "                ctx.stroke();\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath().toString());\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u4e24\u6761\u7ebf\u76f8\u4ea4\u65f6\uff0c\u6240\u521b\u5efa\u7684\u62d0\u89d2\u7c7b\u578b\n",
      "     *\n",
      "     * @throws IOException\n",
      "     */\n",
      "    @Test\n",
      "    void setMiterLimit() throws IOException {\n",
      "        Path outP = Paths.get(\"target/MiterLimit.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "\n",
      "            Canvas canvas = new Canvas(200d, 200d);\n",
      "            canvas.setPosition(Position.Absolute)\n",
      "                    .setX(5d).setY(45d)\n",
      "                    .setBorder(1d);\n",
      "\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                ctx.beginPath();\n",
      "                ctx.setLineWidth(5d);\n",
      "                ctx.setLineJoin(LineJoinType.Miter);\n",
      "                ctx.setMiterLimit(4d);\n",
      "                ctx.moveTo(20, 20);\n",
      "                ctx.lineTo(50, 27);\n",
      "                ctx.lineTo(20, 34);\n",
      "                ctx.stroke();\n",
      "\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath().toString());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u7ebf\u6bb5\u865a\u7ebf\u6837\u5f0f\n",
      "     *\n",
      "     * @throws IOException\n",
      "     */\n",
      "    @Test\n",
      "    void setLineDash() throws IOException {\n",
      "        Path outP = Paths.get(\"target/LineDash.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "\n",
      "            Canvas canvas = new Canvas(200d, 200d);\n",
      "            canvas.setPosition(Position.Absolute)\n",
      "                    .setX(5d).setY(45d)\n",
      "                    .setBorder(1d);\n",
      "\n",
      "            canvas.setDrawer(ctx -> {\n",
      "\n",
      "                ctx.beginPath();\n",
      "                ctx.setLineWidth(10d);\n",
      "                ctx.moveTo(20, 30);\n",
      "                ctx.lineTo(150, 30);\n",
      "                ctx.stroke();\n",
      "\n",
      "                ctx.beginPath();\n",
      "                ctx.setLineDash(15d, 15d);\n",
      "                ctx.moveTo(20, 45);\n",
      "                ctx.lineTo(150, 45);\n",
      "                ctx.stroke();\n",
      "\n",
      "                ctx.beginPath();\n",
      "                ctx.setLineDash(5d, new Double[]{15d, 15d});\n",
      "                ctx.moveTo(20, 65);\n",
      "                ctx.lineTo(150, 65);\n",
      "                ctx.stroke();\n",
      "\n",
      "                ctx.beginPath();\n",
      "                ctx.setLineDash(15d, 7.5d);\n",
      "                ctx.moveTo(20, 80);\n",
      "                ctx.lineTo(150, 80);\n",
      "                ctx.stroke();\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath().toString());\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u6d4b\u8bd5 \u7ed8\u5236\u53c2\u6570 \u7f13\u5b58\n",
      "     */\n",
      "    @Test\n",
      "    public void testMultiColorSet() throws Exception {\n",
      "        Path outP = Paths.get(\"target/testMultiColorSet.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(500d, 500d);\n",
      "\n",
      "            Canvas canvas = new Canvas(500d, 500d);\n",
      "            canvas.setPosition(Position.Absolute);\n",
      "            canvas.setXY(0d, 0d);\n",
      "\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                ctx.setFillColor(255, 0, 0);\n",
      "                ctx.fillRect(100, 100, 100, 100);\n",
      "\n",
      "                ctx.setFillColor(0, 0, 255);\n",
      "                ctx.fillRect(200, 200, 100, 100);\n",
      "\n",
      "                ctx.setFillColor(255, 0, 0);\n",
      "                ctx.fillRect(300, 300, 100, 100);\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testTransform() {\n",
      "        // \u5e73\u79fb\n",
      "        AbbreviatedData at = new AbbreviatedData();\n",
      "        at.moveTo(0, 0);\n",
      "\n",
      "        ST_Array ctm = new ST_Array(\n",
      "                1, 0,\n",
      "                0, 1,\n",
      "                30, 50\n",
      "        );\n",
      "        DrawContext.transform(at, ctm);\n",
      "        Assertions.assertEquals(30, at.getRawOptVal().get(0).values[0]);\n",
      "        Assertions.assertEquals(50, at.getRawOptVal().get(0).values[1]);\n",
      "\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void testCanvas() throws IOException {\n",
      "        Path out = Paths.get(\"target/first_canvas.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(out)) {\n",
      "            VirtualPage vPage = new VirtualPage(210d, 297d);\n",
      "            Canvas canvas = new Canvas(0, 0, 210d, 297d);\n",
      "            canvas.setDrawer(ctx -> {\n",
      "                ctx.fillStyle = \"rgba(255, 0, 0, 0.8)\";\n",
      "                ctx.font = \"8mm \u5b8b\u4f53\";\n",
      "                for (int i = 0; i <= 8; i++) {\n",
      "                    for (int j = 0; j <= 8; j++) {\n",
      "                        ctx.save();\n",
      "                        ctx.translate(22.4 * i, j * 50);\n",
      "                        ctx.rotate(45);\n",
      "                        ctx.fillText(\"\u4fdd\u5bc6\u8d44\u6599\", 10, 10);\n",
      "                        ctx.restore();\n",
      "                    }\n",
      "                }\n",
      "            });\n",
      "            vPage.add(canvas);\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + out.toAbsolutePath());\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "DrawContext::::beginPath()": [
        196,
        199
      ],
      "DrawContext::::closePath()": [
        211,
        217
      ],
      "DrawContext::::clip()": [
        228,
        239
      ],
      "DrawContext::::moveTo(double,double)": [
        248,
        254
      ],
      "DrawContext::::lineTo(double,double)": [
        265,
        271
      ],
      "DrawContext::::quadraticCurveTo(double,double,double,double)": [
        283,
        289
      ],
      "DrawContext::::bezierCurveTo(double,double,double,double,double,double)": [
        302,
        308
      ],
      "DrawContext::::arc(double,double,double,boolean,boolean,double,double)": [
        327,
        333
      ],
      "DrawContext::::arc(double,double,double,double,double,boolean)": [
        347,
        372
      ],
      "DrawContext::::arc(double,double,double,double,double)": [
        386,
        388
      ],
      "DrawContext::::rect(double,double,double,double)": [
        400,
        407
      ],
      "DrawContext::::fillRect(double,double,double,double)": [
        422,
        431
      ],
      "DrawContext::::strokeRect(double,double,double,double)": [
        446,
        455
      ],
      "DrawContext::::stroke()": [
        462,
        473
      ],
      "DrawContext::::fill()": [
        482,
        494
      ],
      "DrawContext::::scale(double,double)": [
        503,
        510
      ],
      "DrawContext::::rotate(double)": [
        518,
        526
      ],
      "DrawContext::::translate(double,double)": [
        535,
        542
      ],
      "DrawContext::::transform(double,double,double,double,double,double)": [
        557,
        564
      ],
      "DrawContext::::setTransform(double,double,double,double,double,double)": [
        579,
        582
      ],
      "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double,double,double,double,double)": [
        603,
        627
      ],
      "DrawContext::::drawImage(java.nio.file.Path,double,double)": [
        640,
        649
      ],
      "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double)": [
        662,
        683
      ],
      "DrawContext::::save()": [
        693,
        699
      ],
      "DrawContext::::restore()": [
        708,
        717
      ],
      "DrawContext::::fillText(java.lang.String,double,double)": [
        728,
        803
      ],
      "DrawContext::::textFloatFactor(org.ofdrw.layout.element.canvas.TextAlign,double,int)": [
        813,
        832
      ],
      "DrawContext::::getTextAlign()": [
        839,
        841
      ],
      "DrawContext::::setTextAlign(org.ofdrw.layout.element.canvas.TextAlign)": [
        849,
        852
      ],
      "DrawContext::::measureText(java.lang.String)": [
        864,
        876
      ],
      "DrawContext::::measureTextArea(java.lang.String)": [
        885,
        890
      ],
      "DrawContext::::getStrokeColor()": [
        899,
        905
      ],
      "DrawContext::::setStrokeColor(int[])": [
        915,
        918
      ],
      "DrawContext::::setStrokeColor(int,int,int)": [
        930,
        932
      ],
      "DrawContext::::getFillColor()": [
        941,
        946
      ],
      "DrawContext::::setFillColor(int[])": [
        956,
        959
      ],
      "DrawContext::::setFillColor(int,int,int)": [
        972,
        974
      ],
      "DrawContext::::getLineWidth()": [
        981,
        983
      ],
      "DrawContext::::setLineWidth(double)": [
        991,
        997
      ],
      "DrawContext::::getFont()": [
        1004,
        1006
      ],
      "DrawContext::::setFont(org.ofdrw.layout.element.canvas.FontSetting)": [
        1014,
        1019
      ],
      "DrawContext::::setDefaultFont(double)": [
        1027,
        1030
      ],
      "DrawContext::::getGlobalAlpha()": [
        1038,
        1040
      ],
      "DrawContext::::setGlobalAlpha(java.lang.Double)": [
        1048,
        1057
      ],
      "DrawContext::::getLineCap()": [
        1080,
        1082
      ],
      "DrawContext::::getLineJoin()": [
        1104,
        1106
      ],
      "DrawContext::::setMiterLimit(java.lang.Double)": [
        1118,
        1121
      ],
      "DrawContext::::getMiterLimit()": [
        1130,
        1132
      ],
      "DrawContext::::setLineDash(java.lang.Double,java.lang.Double[])": [
        1142,
        1156
      ],
      "DrawContext::::setLineDash(java.lang.Double[])": [
        1164,
        1166
      ],
      "DrawContext::::getDashPattern()": [
        1173,
        1175
      ],
      "DrawContext::::getDashOffset()": [
        1182,
        1184
      ],
      "DrawContext::::createLinearGradient(double,double,double,double)": [
        1195,
        1197
      ],
      "DrawContext::::createLinearGradient(int,int,int,int)": [
        1208,
        1210
      ],
      "DrawContext::::createPattern(java.nio.file.Path,java.lang.String)": [
        1223,
        1241
      ],
      "DrawContext::::createRadialGradient(double,double,double,double,double,double)": [
        1254,
        1256
      ],
      "DrawContext::::detectColor(java.lang.Object)": [
        1399,
        1437
      ],
      "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)": [
        1456,
        1579
      ],
      "DrawContext::::mm(int)": [
        1587,
        1589
      ],
      "DrawContext::::pixel(double)": [
        1597,
        1599
      ],
      "DrawContext::::addFont(java.lang.String,java.nio.file.Path)": [
        1609,
        1612
      ],
      "DrawContext::::close()": [
        1617,
        1620
      ]
    },
    "test_method_lines_dic": {
      "DrawContextTest::::testExternalFont()": [
        32,
        60
      ],
      "DrawContextTest::::testFontStyle1()": [
        66,
        92
      ],
      "DrawContextTest::::testFontStyle2()": [
        97,
        121
      ],
      "DrawContextTest::::testCreateRadialGradient()": [
        123,
        141
      ],
      "DrawContextTest::::testCreatePattern()": [
        144,
        163
      ],
      "DrawContextTest::::testCreatePatternSize()": [
        165,
        185
      ],
      "DrawContextTest::::testCreatePatternStyle2()": [
        187,
        206
      ],
      "DrawContextTest::::testCreatePatternCTM()": [
        208,
        231
      ],
      "DrawContextTest::::testCreateLinearGradient()": [
        233,
        256
      ],
      "DrawContextTest::::testFillStyle()": [
        258,
        276
      ],
      "DrawContextTest::::testStrokeStyle()": [
        278,
        295
      ],
      "DrawContextTest::::testLineTo()": [
        297,
        320
      ],
      "DrawContextTest::::stroke()": [
        322,
        346
      ],
      "DrawContextTest::::stroke2()": [
        348,
        372
      ],
      "DrawContextTest::::strokeRect2()": [
        374,
        397
      ],
      "DrawContextTest::::fillRect2()": [
        399,
        422
      ],
      "DrawContextTest::::fill()": [
        424,
        450
      ],
      "DrawContextTest::::beginPath()": [
        452,
        482
      ],
      "DrawContextTest::::clip()": [
        484,
        510
      ],
      "DrawContextTest::::clipCTM()": [
        512,
        542
      ],
      "DrawContextTest::::quadraticCurveTo()": [
        544,
        566
      ],
      "DrawContextTest::::bezierCurveTo()": [
        568,
        590
      ],
      "DrawContextTest::::arc()": [
        592,
        613
      ],
      "DrawContextTest::::rect()": [
        616,
        636
      ],
      "DrawContextTest::::strokeRect()": [
        638,
        657
      ],
      "DrawContextTest::::fillRect()": [
        659,
        678
      ],
      "DrawContextTest::::drawImage()": [
        681,
        701
      ],
      "DrawContextTest::::drawImagePart()": [
        704,
        726
      ],
      "DrawContextTest::::drawImageLeftTop()": [
        728,
        747
      ],
      "DrawContextTest::::drawImage2()": [
        750,
        771
      ],
      "DrawContextTest::::scale()": [
        773,
        798
      ],
      "DrawContextTest::::rotate()": [
        800,
        820
      ],
      "DrawContextTest::::translate()": [
        822,
        843
      ],
      "DrawContextTest::::transform()": [
        845,
        875
      ],
      "DrawContextTest::::setTransform()": [
        877,
        906
      ],
      "DrawContextTest::::getGlobalAlpha()": [
        908,
        935
      ],
      "DrawContextTest::::save()": [
        937,
        960
      ],
      "DrawContextTest::::fillText()": [
        962,
        985
      ],
      "DrawContextTest::::fillTextDefault()": [
        987,
        1006
      ],
      "DrawContextTest::::measureText()": [
        1008,
        1035
      ],
      "DrawContextTest::::measureTextArea()": [
        1040,
        1066
      ],
      "DrawContextTest::::fillTextAllDirection()": [
        1068,
        1115
      ],
      "DrawContextTest::::textAlign()": [
        1118,
        1156
      ],
      "DrawContextTest::::setLineCap()": [
        1163,
        1199
      ],
      "DrawContextTest::::setLineJoin()": [
        1206,
        1245
      ],
      "DrawContextTest::::setMiterLimit()": [
        1253,
        1280
      ],
      "DrawContextTest::::setLineDash()": [
        1287,
        1329
      ],
      "DrawContextTest::::testMultiColorSet()": [
        1335,
        1360
      ],
      "DrawContextTest::::testTransform()": [
        1362,
        1377
      ],
      "DrawContextTest::::testCanvas()": [
        1380,
        1403
      ]
    },
    "reverse_method_lines_dic": {
      "196": "DrawContext::::beginPath()",
      "197": "DrawContext::::beginPath()",
      "198": "DrawContext::::beginPath()",
      "199": "DrawContext::::beginPath()",
      "211": "DrawContext::::closePath()",
      "212": "DrawContext::::closePath()",
      "213": "DrawContext::::closePath()",
      "214": "DrawContext::::closePath()",
      "215": "DrawContext::::closePath()",
      "216": "DrawContext::::closePath()",
      "217": "DrawContext::::closePath()",
      "228": "DrawContext::::clip()",
      "229": "DrawContext::::clip()",
      "230": "DrawContext::::clip()",
      "231": "DrawContext::::clip()",
      "232": "DrawContext::::clip()",
      "233": "DrawContext::::clip()",
      "234": "DrawContext::::clip()",
      "235": "DrawContext::::clip()",
      "236": "DrawContext::::clip()",
      "237": "DrawContext::::clip()",
      "238": "DrawContext::::clip()",
      "239": "DrawContext::::clip()",
      "248": "DrawContext::::moveTo(double,double)",
      "249": "DrawContext::::moveTo(double,double)",
      "250": "DrawContext::::moveTo(double,double)",
      "251": "DrawContext::::moveTo(double,double)",
      "252": "DrawContext::::moveTo(double,double)",
      "253": "DrawContext::::moveTo(double,double)",
      "254": "DrawContext::::moveTo(double,double)",
      "265": "DrawContext::::lineTo(double,double)",
      "266": "DrawContext::::lineTo(double,double)",
      "267": "DrawContext::::lineTo(double,double)",
      "268": "DrawContext::::lineTo(double,double)",
      "269": "DrawContext::::lineTo(double,double)",
      "270": "DrawContext::::lineTo(double,double)",
      "271": "DrawContext::::lineTo(double,double)",
      "283": "DrawContext::::quadraticCurveTo(double,double,double,double)",
      "284": "DrawContext::::quadraticCurveTo(double,double,double,double)",
      "285": "DrawContext::::quadraticCurveTo(double,double,double,double)",
      "286": "DrawContext::::quadraticCurveTo(double,double,double,double)",
      "287": "DrawContext::::quadraticCurveTo(double,double,double,double)",
      "288": "DrawContext::::quadraticCurveTo(double,double,double,double)",
      "289": "DrawContext::::quadraticCurveTo(double,double,double,double)",
      "302": "DrawContext::::bezierCurveTo(double,double,double,double,double,double)",
      "303": "DrawContext::::bezierCurveTo(double,double,double,double,double,double)",
      "304": "DrawContext::::bezierCurveTo(double,double,double,double,double,double)",
      "305": "DrawContext::::bezierCurveTo(double,double,double,double,double,double)",
      "306": "DrawContext::::bezierCurveTo(double,double,double,double,double,double)",
      "307": "DrawContext::::bezierCurveTo(double,double,double,double,double,double)",
      "308": "DrawContext::::bezierCurveTo(double,double,double,double,double,double)",
      "327": "DrawContext::::arc(double,double,double,boolean,boolean,double,double)",
      "328": "DrawContext::::arc(double,double,double,boolean,boolean,double,double)",
      "329": "DrawContext::::arc(double,double,double,boolean,boolean,double,double)",
      "330": "DrawContext::::arc(double,double,double,boolean,boolean,double,double)",
      "331": "DrawContext::::arc(double,double,double,boolean,boolean,double,double)",
      "332": "DrawContext::::arc(double,double,double,boolean,boolean,double,double)",
      "333": "DrawContext::::arc(double,double,double,boolean,boolean,double,double)",
      "347": "DrawContext::::arc(double,double,double,double,double,boolean)",
      "348": "DrawContext::::arc(double,double,double,double,double,boolean)",
      "349": "DrawContext::::arc(double,double,double,double,double,boolean)",
      "350": "DrawContext::::arc(double,double,double,double,double,boolean)",
      "351": "DrawContext::::arc(double,double,double,double,double,boolean)",
      "352": "DrawContext::::arc(double,double,double,double,double,boolean)",
      "353": "DrawContext::::arc(double,double,double,double,double,boolean)",
      "354": "DrawContext::::arc(double,double,double,double,double,boolean)",
      "355": "DrawContext::::arc(double,double,double,double,double,boolean)",
      "356": "DrawContext::::arc(double,double,double,double,double,boolean)",
      "357": "DrawContext::::arc(double,double,double,double,double,boolean)",
      "358": "DrawContext::::arc(double,double,double,double,double,boolean)",
      "359": "DrawContext::::arc(double,double,double,double,double,boolean)",
      "360": "DrawContext::::arc(double,double,double,double,double,boolean)",
      "361": "DrawContext::::arc(double,double,double,double,double,boolean)",
      "362": "DrawContext::::arc(double,double,double,double,double,boolean)",
      "363": "DrawContext::::arc(double,double,double,double,double,boolean)",
      "364": "DrawContext::::arc(double,double,double,double,double,boolean)",
      "365": "DrawContext::::arc(double,double,double,double,double,boolean)",
      "366": "DrawContext::::arc(double,double,double,double,double,boolean)",
      "367": "DrawContext::::arc(double,double,double,double,double,boolean)",
      "368": "DrawContext::::arc(double,double,double,double,double,boolean)",
      "369": "DrawContext::::arc(double,double,double,double,double,boolean)",
      "370": "DrawContext::::arc(double,double,double,double,double,boolean)",
      "371": "DrawContext::::arc(double,double,double,double,double,boolean)",
      "372": "DrawContext::::arc(double,double,double,double,double,boolean)",
      "386": "DrawContext::::arc(double,double,double,double,double)",
      "387": "DrawContext::::arc(double,double,double,double,double)",
      "388": "DrawContext::::arc(double,double,double,double,double)",
      "400": "DrawContext::::rect(double,double,double,double)",
      "401": "DrawContext::::rect(double,double,double,double)",
      "402": "DrawContext::::rect(double,double,double,double)",
      "403": "DrawContext::::rect(double,double,double,double)",
      "404": "DrawContext::::rect(double,double,double,double)",
      "405": "DrawContext::::rect(double,double,double,double)",
      "406": "DrawContext::::rect(double,double,double,double)",
      "407": "DrawContext::::rect(double,double,double,double)",
      "422": "DrawContext::::fillRect(double,double,double,double)",
      "423": "DrawContext::::fillRect(double,double,double,double)",
      "424": "DrawContext::::fillRect(double,double,double,double)",
      "425": "DrawContext::::fillRect(double,double,double,double)",
      "426": "DrawContext::::fillRect(double,double,double,double)",
      "427": "DrawContext::::fillRect(double,double,double,double)",
      "428": "DrawContext::::fillRect(double,double,double,double)",
      "429": "DrawContext::::fillRect(double,double,double,double)",
      "430": "DrawContext::::fillRect(double,double,double,double)",
      "431": "DrawContext::::fillRect(double,double,double,double)",
      "446": "DrawContext::::strokeRect(double,double,double,double)",
      "447": "DrawContext::::strokeRect(double,double,double,double)",
      "448": "DrawContext::::strokeRect(double,double,double,double)",
      "449": "DrawContext::::strokeRect(double,double,double,double)",
      "450": "DrawContext::::strokeRect(double,double,double,double)",
      "451": "DrawContext::::strokeRect(double,double,double,double)",
      "452": "DrawContext::::strokeRect(double,double,double,double)",
      "453": "DrawContext::::strokeRect(double,double,double,double)",
      "454": "DrawContext::::strokeRect(double,double,double,double)",
      "455": "DrawContext::::strokeRect(double,double,double,double)",
      "462": "DrawContext::::stroke()",
      "463": "DrawContext::::stroke()",
      "464": "DrawContext::::stroke()",
      "465": "DrawContext::::stroke()",
      "466": "DrawContext::::stroke()",
      "467": "DrawContext::::stroke()",
      "468": "DrawContext::::stroke()",
      "469": "DrawContext::::stroke()",
      "470": "DrawContext::::stroke()",
      "471": "DrawContext::::stroke()",
      "472": "DrawContext::::stroke()",
      "473": "DrawContext::::stroke()",
      "482": "DrawContext::::fill()",
      "483": "DrawContext::::fill()",
      "484": "DrawContext::::fill()",
      "485": "DrawContext::::fill()",
      "486": "DrawContext::::fill()",
      "487": "DrawContext::::fill()",
      "488": "DrawContext::::fill()",
      "489": "DrawContext::::fill()",
      "490": "DrawContext::::fill()",
      "491": "DrawContext::::fill()",
      "492": "DrawContext::::fill()",
      "493": "DrawContext::::fill()",
      "494": "DrawContext::::fill()",
      "503": "DrawContext::::scale(double,double)",
      "504": "DrawContext::::scale(double,double)",
      "505": "DrawContext::::scale(double,double)",
      "506": "DrawContext::::scale(double,double)",
      "507": "DrawContext::::scale(double,double)",
      "508": "DrawContext::::scale(double,double)",
      "509": "DrawContext::::scale(double,double)",
      "510": "DrawContext::::scale(double,double)",
      "518": "DrawContext::::rotate(double)",
      "519": "DrawContext::::rotate(double)",
      "520": "DrawContext::::rotate(double)",
      "521": "DrawContext::::rotate(double)",
      "522": "DrawContext::::rotate(double)",
      "523": "DrawContext::::rotate(double)",
      "524": "DrawContext::::rotate(double)",
      "525": "DrawContext::::rotate(double)",
      "526": "DrawContext::::rotate(double)",
      "535": "DrawContext::::translate(double,double)",
      "536": "DrawContext::::translate(double,double)",
      "537": "DrawContext::::translate(double,double)",
      "538": "DrawContext::::translate(double,double)",
      "539": "DrawContext::::translate(double,double)",
      "540": "DrawContext::::translate(double,double)",
      "541": "DrawContext::::translate(double,double)",
      "542": "DrawContext::::translate(double,double)",
      "557": "DrawContext::::transform(double,double,double,double,double,double)",
      "558": "DrawContext::::transform(double,double,double,double,double,double)",
      "559": "DrawContext::::transform(double,double,double,double,double,double)",
      "560": "DrawContext::::transform(double,double,double,double,double,double)",
      "561": "DrawContext::::transform(double,double,double,double,double,double)",
      "562": "DrawContext::::transform(double,double,double,double,double,double)",
      "563": "DrawContext::::transform(double,double,double,double,double,double)",
      "564": "DrawContext::::transform(double,double,double,double,double,double)",
      "579": "DrawContext::::setTransform(double,double,double,double,double,double)",
      "580": "DrawContext::::setTransform(double,double,double,double,double,double)",
      "581": "DrawContext::::setTransform(double,double,double,double,double,double)",
      "582": "DrawContext::::setTransform(double,double,double,double,double,double)",
      "603": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double,double,double,double,double)",
      "604": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double,double,double,double,double)",
      "605": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double,double,double,double,double)",
      "606": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double,double,double,double,double)",
      "607": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double,double,double,double,double)",
      "608": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double,double,double,double,double)",
      "609": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double,double,double,double,double)",
      "610": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double,double,double,double,double)",
      "611": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double,double,double,double,double)",
      "612": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double,double,double,double,double)",
      "613": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double,double,double,double,double)",
      "614": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double,double,double,double,double)",
      "615": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double,double,double,double,double)",
      "616": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double,double,double,double,double)",
      "617": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double,double,double,double,double)",
      "618": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double,double,double,double,double)",
      "619": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double,double,double,double,double)",
      "620": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double,double,double,double,double)",
      "621": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double,double,double,double,double)",
      "622": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double,double,double,double,double)",
      "623": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double,double,double,double,double)",
      "624": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double,double,double,double,double)",
      "625": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double,double,double,double,double)",
      "626": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double,double,double,double,double)",
      "627": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double,double,double,double,double)",
      "640": "DrawContext::::drawImage(java.nio.file.Path,double,double)",
      "641": "DrawContext::::drawImage(java.nio.file.Path,double,double)",
      "642": "DrawContext::::drawImage(java.nio.file.Path,double,double)",
      "643": "DrawContext::::drawImage(java.nio.file.Path,double,double)",
      "644": "DrawContext::::drawImage(java.nio.file.Path,double,double)",
      "645": "DrawContext::::drawImage(java.nio.file.Path,double,double)",
      "646": "DrawContext::::drawImage(java.nio.file.Path,double,double)",
      "647": "DrawContext::::drawImage(java.nio.file.Path,double,double)",
      "648": "DrawContext::::drawImage(java.nio.file.Path,double,double)",
      "649": "DrawContext::::drawImage(java.nio.file.Path,double,double)",
      "662": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double)",
      "663": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double)",
      "664": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double)",
      "665": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double)",
      "666": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double)",
      "667": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double)",
      "668": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double)",
      "669": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double)",
      "670": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double)",
      "671": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double)",
      "672": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double)",
      "673": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double)",
      "674": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double)",
      "675": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double)",
      "676": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double)",
      "677": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double)",
      "678": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double)",
      "679": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double)",
      "680": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double)",
      "681": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double)",
      "682": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double)",
      "683": "DrawContext::::drawImage(java.nio.file.Path,double,double,double,double)",
      "693": "DrawContext::::save()",
      "694": "DrawContext::::save()",
      "695": "DrawContext::::save()",
      "696": "DrawContext::::save()",
      "697": "DrawContext::::save()",
      "698": "DrawContext::::save()",
      "699": "DrawContext::::save()",
      "708": "DrawContext::::restore()",
      "709": "DrawContext::::restore()",
      "710": "DrawContext::::restore()",
      "711": "DrawContext::::restore()",
      "712": "DrawContext::::restore()",
      "713": "DrawContext::::restore()",
      "714": "DrawContext::::restore()",
      "715": "DrawContext::::restore()",
      "716": "DrawContext::::restore()",
      "717": "DrawContext::::restore()",
      "728": "DrawContext::::fillText(java.lang.String,double,double)",
      "729": "DrawContext::::fillText(java.lang.String,double,double)",
      "730": "DrawContext::::fillText(java.lang.String,double,double)",
      "731": "DrawContext::::fillText(java.lang.String,double,double)",
      "732": "DrawContext::::fillText(java.lang.String,double,double)",
      "733": "DrawContext::::fillText(java.lang.String,double,double)",
      "734": "DrawContext::::fillText(java.lang.String,double,double)",
      "735": "DrawContext::::fillText(java.lang.String,double,double)",
      "736": "DrawContext::::fillText(java.lang.String,double,double)",
      "737": "DrawContext::::fillText(java.lang.String,double,double)",
      "738": "DrawContext::::fillText(java.lang.String,double,double)",
      "739": "DrawContext::::fillText(java.lang.String,double,double)",
      "740": "DrawContext::::fillText(java.lang.String,double,double)",
      "741": "DrawContext::::fillText(java.lang.String,double,double)",
      "742": "DrawContext::::fillText(java.lang.String,double,double)",
      "743": "DrawContext::::fillText(java.lang.String,double,double)",
      "744": "DrawContext::::fillText(java.lang.String,double,double)",
      "745": "DrawContext::::fillText(java.lang.String,double,double)",
      "746": "DrawContext::::fillText(java.lang.String,double,double)",
      "747": "DrawContext::::fillText(java.lang.String,double,double)",
      "748": "DrawContext::::fillText(java.lang.String,double,double)",
      "749": "DrawContext::::fillText(java.lang.String,double,double)",
      "750": "DrawContext::::fillText(java.lang.String,double,double)",
      "751": "DrawContext::::fillText(java.lang.String,double,double)",
      "752": "DrawContext::::fillText(java.lang.String,double,double)",
      "753": "DrawContext::::fillText(java.lang.String,double,double)",
      "754": "DrawContext::::fillText(java.lang.String,double,double)",
      "755": "DrawContext::::fillText(java.lang.String,double,double)",
      "756": "DrawContext::::fillText(java.lang.String,double,double)",
      "757": "DrawContext::::fillText(java.lang.String,double,double)",
      "758": "DrawContext::::fillText(java.lang.String,double,double)",
      "759": "DrawContext::::fillText(java.lang.String,double,double)",
      "760": "DrawContext::::fillText(java.lang.String,double,double)",
      "761": "DrawContext::::fillText(java.lang.String,double,double)",
      "762": "DrawContext::::fillText(java.lang.String,double,double)",
      "763": "DrawContext::::fillText(java.lang.String,double,double)",
      "764": "DrawContext::::fillText(java.lang.String,double,double)",
      "765": "DrawContext::::fillText(java.lang.String,double,double)",
      "766": "DrawContext::::fillText(java.lang.String,double,double)",
      "767": "DrawContext::::fillText(java.lang.String,double,double)",
      "768": "DrawContext::::fillText(java.lang.String,double,double)",
      "769": "DrawContext::::fillText(java.lang.String,double,double)",
      "770": "DrawContext::::fillText(java.lang.String,double,double)",
      "771": "DrawContext::::fillText(java.lang.String,double,double)",
      "772": "DrawContext::::fillText(java.lang.String,double,double)",
      "773": "DrawContext::::fillText(java.lang.String,double,double)",
      "774": "DrawContext::::fillText(java.lang.String,double,double)",
      "775": "DrawContext::::fillText(java.lang.String,double,double)",
      "776": "DrawContext::::fillText(java.lang.String,double,double)",
      "777": "DrawContext::::fillText(java.lang.String,double,double)",
      "778": "DrawContext::::fillText(java.lang.String,double,double)",
      "779": "DrawContext::::fillText(java.lang.String,double,double)",
      "780": "DrawContext::::fillText(java.lang.String,double,double)",
      "781": "DrawContext::::fillText(java.lang.String,double,double)",
      "782": "DrawContext::::fillText(java.lang.String,double,double)",
      "783": "DrawContext::::fillText(java.lang.String,double,double)",
      "784": "DrawContext::::fillText(java.lang.String,double,double)",
      "785": "DrawContext::::fillText(java.lang.String,double,double)",
      "786": "DrawContext::::fillText(java.lang.String,double,double)",
      "787": "DrawContext::::fillText(java.lang.String,double,double)",
      "788": "DrawContext::::fillText(java.lang.String,double,double)",
      "789": "DrawContext::::fillText(java.lang.String,double,double)",
      "790": "DrawContext::::fillText(java.lang.String,double,double)",
      "791": "DrawContext::::fillText(java.lang.String,double,double)",
      "792": "DrawContext::::fillText(java.lang.String,double,double)",
      "793": "DrawContext::::fillText(java.lang.String,double,double)",
      "794": "DrawContext::::fillText(java.lang.String,double,double)",
      "795": "DrawContext::::fillText(java.lang.String,double,double)",
      "796": "DrawContext::::fillText(java.lang.String,double,double)",
      "797": "DrawContext::::fillText(java.lang.String,double,double)",
      "798": "DrawContext::::fillText(java.lang.String,double,double)",
      "799": "DrawContext::::fillText(java.lang.String,double,double)",
      "800": "DrawContext::::fillText(java.lang.String,double,double)",
      "801": "DrawContext::::fillText(java.lang.String,double,double)",
      "802": "DrawContext::::fillText(java.lang.String,double,double)",
      "803": "DrawContext::::fillText(java.lang.String,double,double)",
      "813": "DrawContext::::textFloatFactor(org.ofdrw.layout.element.canvas.TextAlign,double,int)",
      "814": "DrawContext::::textFloatFactor(org.ofdrw.layout.element.canvas.TextAlign,double,int)",
      "815": "DrawContext::::textFloatFactor(org.ofdrw.layout.element.canvas.TextAlign,double,int)",
      "816": "DrawContext::::textFloatFactor(org.ofdrw.layout.element.canvas.TextAlign,double,int)",
      "817": "DrawContext::::textFloatFactor(org.ofdrw.layout.element.canvas.TextAlign,double,int)",
      "818": "DrawContext::::textFloatFactor(org.ofdrw.layout.element.canvas.TextAlign,double,int)",
      "819": "DrawContext::::textFloatFactor(org.ofdrw.layout.element.canvas.TextAlign,double,int)",
      "820": "DrawContext::::textFloatFactor(org.ofdrw.layout.element.canvas.TextAlign,double,int)",
      "821": "DrawContext::::textFloatFactor(org.ofdrw.layout.element.canvas.TextAlign,double,int)",
      "822": "DrawContext::::textFloatFactor(org.ofdrw.layout.element.canvas.TextAlign,double,int)",
      "823": "DrawContext::::textFloatFactor(org.ofdrw.layout.element.canvas.TextAlign,double,int)",
      "824": "DrawContext::::textFloatFactor(org.ofdrw.layout.element.canvas.TextAlign,double,int)",
      "825": "DrawContext::::textFloatFactor(org.ofdrw.layout.element.canvas.TextAlign,double,int)",
      "826": "DrawContext::::textFloatFactor(org.ofdrw.layout.element.canvas.TextAlign,double,int)",
      "827": "DrawContext::::textFloatFactor(org.ofdrw.layout.element.canvas.TextAlign,double,int)",
      "828": "DrawContext::::textFloatFactor(org.ofdrw.layout.element.canvas.TextAlign,double,int)",
      "829": "DrawContext::::textFloatFactor(org.ofdrw.layout.element.canvas.TextAlign,double,int)",
      "830": "DrawContext::::textFloatFactor(org.ofdrw.layout.element.canvas.TextAlign,double,int)",
      "831": "DrawContext::::textFloatFactor(org.ofdrw.layout.element.canvas.TextAlign,double,int)",
      "832": "DrawContext::::textFloatFactor(org.ofdrw.layout.element.canvas.TextAlign,double,int)",
      "839": "DrawContext::::getTextAlign()",
      "840": "DrawContext::::getTextAlign()",
      "841": "DrawContext::::getTextAlign()",
      "849": "DrawContext::::setTextAlign(org.ofdrw.layout.element.canvas.TextAlign)",
      "850": "DrawContext::::setTextAlign(org.ofdrw.layout.element.canvas.TextAlign)",
      "851": "DrawContext::::setTextAlign(org.ofdrw.layout.element.canvas.TextAlign)",
      "852": "DrawContext::::setTextAlign(org.ofdrw.layout.element.canvas.TextAlign)",
      "864": "DrawContext::::measureText(java.lang.String)",
      "865": "DrawContext::::measureText(java.lang.String)",
      "866": "DrawContext::::measureText(java.lang.String)",
      "867": "DrawContext::::measureText(java.lang.String)",
      "868": "DrawContext::::measureText(java.lang.String)",
      "869": "DrawContext::::measureText(java.lang.String)",
      "870": "DrawContext::::measureText(java.lang.String)",
      "871": "DrawContext::::measureText(java.lang.String)",
      "872": "DrawContext::::measureText(java.lang.String)",
      "873": "DrawContext::::measureText(java.lang.String)",
      "874": "DrawContext::::measureText(java.lang.String)",
      "875": "DrawContext::::measureText(java.lang.String)",
      "876": "DrawContext::::measureText(java.lang.String)",
      "885": "DrawContext::::measureTextArea(java.lang.String)",
      "886": "DrawContext::::measureTextArea(java.lang.String)",
      "887": "DrawContext::::measureTextArea(java.lang.String)",
      "888": "DrawContext::::measureTextArea(java.lang.String)",
      "889": "DrawContext::::measureTextArea(java.lang.String)",
      "890": "DrawContext::::measureTextArea(java.lang.String)",
      "899": "DrawContext::::getStrokeColor()",
      "900": "DrawContext::::getStrokeColor()",
      "901": "DrawContext::::getStrokeColor()",
      "902": "DrawContext::::getStrokeColor()",
      "903": "DrawContext::::getStrokeColor()",
      "904": "DrawContext::::getStrokeColor()",
      "905": "DrawContext::::getStrokeColor()",
      "915": "DrawContext::::setStrokeColor(int[])",
      "916": "DrawContext::::setStrokeColor(int[])",
      "917": "DrawContext::::setStrokeColor(int[])",
      "918": "DrawContext::::setStrokeColor(int[])",
      "930": "DrawContext::::setStrokeColor(int,int,int)",
      "931": "DrawContext::::setStrokeColor(int,int,int)",
      "932": "DrawContext::::setStrokeColor(int,int,int)",
      "941": "DrawContext::::getFillColor()",
      "942": "DrawContext::::getFillColor()",
      "943": "DrawContext::::getFillColor()",
      "944": "DrawContext::::getFillColor()",
      "945": "DrawContext::::getFillColor()",
      "946": "DrawContext::::getFillColor()",
      "956": "DrawContext::::setFillColor(int[])",
      "957": "DrawContext::::setFillColor(int[])",
      "958": "DrawContext::::setFillColor(int[])",
      "959": "DrawContext::::setFillColor(int[])",
      "972": "DrawContext::::setFillColor(int,int,int)",
      "973": "DrawContext::::setFillColor(int,int,int)",
      "974": "DrawContext::::setFillColor(int,int,int)",
      "981": "DrawContext::::getLineWidth()",
      "982": "DrawContext::::getLineWidth()",
      "983": "DrawContext::::getLineWidth()",
      "991": "DrawContext::::setLineWidth(double)",
      "992": "DrawContext::::setLineWidth(double)",
      "993": "DrawContext::::setLineWidth(double)",
      "994": "DrawContext::::setLineWidth(double)",
      "995": "DrawContext::::setLineWidth(double)",
      "996": "DrawContext::::setLineWidth(double)",
      "997": "DrawContext::::setLineWidth(double)",
      "1004": "DrawContext::::getFont()",
      "1005": "DrawContext::::getFont()",
      "1006": "DrawContext::::getFont()",
      "1014": "DrawContext::::setFont(org.ofdrw.layout.element.canvas.FontSetting)",
      "1015": "DrawContext::::setFont(org.ofdrw.layout.element.canvas.FontSetting)",
      "1016": "DrawContext::::setFont(org.ofdrw.layout.element.canvas.FontSetting)",
      "1017": "DrawContext::::setFont(org.ofdrw.layout.element.canvas.FontSetting)",
      "1018": "DrawContext::::setFont(org.ofdrw.layout.element.canvas.FontSetting)",
      "1019": "DrawContext::::setFont(org.ofdrw.layout.element.canvas.FontSetting)",
      "1027": "DrawContext::::setDefaultFont(double)",
      "1028": "DrawContext::::setDefaultFont(double)",
      "1029": "DrawContext::::setDefaultFont(double)",
      "1030": "DrawContext::::setDefaultFont(double)",
      "1038": "DrawContext::::getGlobalAlpha()",
      "1039": "DrawContext::::getGlobalAlpha()",
      "1040": "DrawContext::::getGlobalAlpha()",
      "1048": "DrawContext::::setGlobalAlpha(java.lang.Double)",
      "1049": "DrawContext::::setGlobalAlpha(java.lang.Double)",
      "1050": "DrawContext::::setGlobalAlpha(java.lang.Double)",
      "1051": "DrawContext::::setGlobalAlpha(java.lang.Double)",
      "1052": "DrawContext::::setGlobalAlpha(java.lang.Double)",
      "1053": "DrawContext::::setGlobalAlpha(java.lang.Double)",
      "1054": "DrawContext::::setGlobalAlpha(java.lang.Double)",
      "1055": "DrawContext::::setGlobalAlpha(java.lang.Double)",
      "1056": "DrawContext::::setGlobalAlpha(java.lang.Double)",
      "1057": "DrawContext::::setGlobalAlpha(java.lang.Double)",
      "1080": "DrawContext::::getLineCap()",
      "1081": "DrawContext::::getLineCap()",
      "1082": "DrawContext::::getLineCap()",
      "1104": "DrawContext::::getLineJoin()",
      "1105": "DrawContext::::getLineJoin()",
      "1106": "DrawContext::::getLineJoin()",
      "1118": "DrawContext::::setMiterLimit(java.lang.Double)",
      "1119": "DrawContext::::setMiterLimit(java.lang.Double)",
      "1120": "DrawContext::::setMiterLimit(java.lang.Double)",
      "1121": "DrawContext::::setMiterLimit(java.lang.Double)",
      "1130": "DrawContext::::getMiterLimit()",
      "1131": "DrawContext::::getMiterLimit()",
      "1132": "DrawContext::::getMiterLimit()",
      "1142": "DrawContext::::setLineDash(java.lang.Double,java.lang.Double[])",
      "1143": "DrawContext::::setLineDash(java.lang.Double,java.lang.Double[])",
      "1144": "DrawContext::::setLineDash(java.lang.Double,java.lang.Double[])",
      "1145": "DrawContext::::setLineDash(java.lang.Double,java.lang.Double[])",
      "1146": "DrawContext::::setLineDash(java.lang.Double,java.lang.Double[])",
      "1147": "DrawContext::::setLineDash(java.lang.Double,java.lang.Double[])",
      "1148": "DrawContext::::setLineDash(java.lang.Double,java.lang.Double[])",
      "1149": "DrawContext::::setLineDash(java.lang.Double,java.lang.Double[])",
      "1150": "DrawContext::::setLineDash(java.lang.Double,java.lang.Double[])",
      "1151": "DrawContext::::setLineDash(java.lang.Double,java.lang.Double[])",
      "1152": "DrawContext::::setLineDash(java.lang.Double,java.lang.Double[])",
      "1153": "DrawContext::::setLineDash(java.lang.Double,java.lang.Double[])",
      "1154": "DrawContext::::setLineDash(java.lang.Double,java.lang.Double[])",
      "1155": "DrawContext::::setLineDash(java.lang.Double,java.lang.Double[])",
      "1156": "DrawContext::::setLineDash(java.lang.Double,java.lang.Double[])",
      "1164": "DrawContext::::setLineDash(java.lang.Double[])",
      "1165": "DrawContext::::setLineDash(java.lang.Double[])",
      "1166": "DrawContext::::setLineDash(java.lang.Double[])",
      "1173": "DrawContext::::getDashPattern()",
      "1174": "DrawContext::::getDashPattern()",
      "1175": "DrawContext::::getDashPattern()",
      "1182": "DrawContext::::getDashOffset()",
      "1183": "DrawContext::::getDashOffset()",
      "1184": "DrawContext::::getDashOffset()",
      "1195": "DrawContext::::createLinearGradient(double,double,double,double)",
      "1196": "DrawContext::::createLinearGradient(double,double,double,double)",
      "1197": "DrawContext::::createLinearGradient(double,double,double,double)",
      "1208": "DrawContext::::createLinearGradient(int,int,int,int)",
      "1209": "DrawContext::::createLinearGradient(int,int,int,int)",
      "1210": "DrawContext::::createLinearGradient(int,int,int,int)",
      "1223": "DrawContext::::createPattern(java.nio.file.Path,java.lang.String)",
      "1224": "DrawContext::::createPattern(java.nio.file.Path,java.lang.String)",
      "1225": "DrawContext::::createPattern(java.nio.file.Path,java.lang.String)",
      "1226": "DrawContext::::createPattern(java.nio.file.Path,java.lang.String)",
      "1227": "DrawContext::::createPattern(java.nio.file.Path,java.lang.String)",
      "1228": "DrawContext::::createPattern(java.nio.file.Path,java.lang.String)",
      "1229": "DrawContext::::createPattern(java.nio.file.Path,java.lang.String)",
      "1230": "DrawContext::::createPattern(java.nio.file.Path,java.lang.String)",
      "1231": "DrawContext::::createPattern(java.nio.file.Path,java.lang.String)",
      "1232": "DrawContext::::createPattern(java.nio.file.Path,java.lang.String)",
      "1233": "DrawContext::::createPattern(java.nio.file.Path,java.lang.String)",
      "1234": "DrawContext::::createPattern(java.nio.file.Path,java.lang.String)",
      "1235": "DrawContext::::createPattern(java.nio.file.Path,java.lang.String)",
      "1236": "DrawContext::::createPattern(java.nio.file.Path,java.lang.String)",
      "1237": "DrawContext::::createPattern(java.nio.file.Path,java.lang.String)",
      "1238": "DrawContext::::createPattern(java.nio.file.Path,java.lang.String)",
      "1239": "DrawContext::::createPattern(java.nio.file.Path,java.lang.String)",
      "1240": "DrawContext::::createPattern(java.nio.file.Path,java.lang.String)",
      "1241": "DrawContext::::createPattern(java.nio.file.Path,java.lang.String)",
      "1254": "DrawContext::::createRadialGradient(double,double,double,double,double,double)",
      "1255": "DrawContext::::createRadialGradient(double,double,double,double,double,double)",
      "1256": "DrawContext::::createRadialGradient(double,double,double,double,double,double)",
      "1399": "DrawContext::::detectColor(java.lang.Object)",
      "1400": "DrawContext::::detectColor(java.lang.Object)",
      "1401": "DrawContext::::detectColor(java.lang.Object)",
      "1402": "DrawContext::::detectColor(java.lang.Object)",
      "1403": "DrawContext::::detectColor(java.lang.Object)",
      "1404": "DrawContext::::detectColor(java.lang.Object)",
      "1405": "DrawContext::::detectColor(java.lang.Object)",
      "1406": "DrawContext::::detectColor(java.lang.Object)",
      "1407": "DrawContext::::detectColor(java.lang.Object)",
      "1408": "DrawContext::::detectColor(java.lang.Object)",
      "1409": "DrawContext::::detectColor(java.lang.Object)",
      "1410": "DrawContext::::detectColor(java.lang.Object)",
      "1411": "DrawContext::::detectColor(java.lang.Object)",
      "1412": "DrawContext::::detectColor(java.lang.Object)",
      "1413": "DrawContext::::detectColor(java.lang.Object)",
      "1414": "DrawContext::::detectColor(java.lang.Object)",
      "1415": "DrawContext::::detectColor(java.lang.Object)",
      "1416": "DrawContext::::detectColor(java.lang.Object)",
      "1417": "DrawContext::::detectColor(java.lang.Object)",
      "1418": "DrawContext::::detectColor(java.lang.Object)",
      "1419": "DrawContext::::detectColor(java.lang.Object)",
      "1420": "DrawContext::::detectColor(java.lang.Object)",
      "1421": "DrawContext::::detectColor(java.lang.Object)",
      "1422": "DrawContext::::detectColor(java.lang.Object)",
      "1423": "DrawContext::::detectColor(java.lang.Object)",
      "1424": "DrawContext::::detectColor(java.lang.Object)",
      "1425": "DrawContext::::detectColor(java.lang.Object)",
      "1426": "DrawContext::::detectColor(java.lang.Object)",
      "1427": "DrawContext::::detectColor(java.lang.Object)",
      "1428": "DrawContext::::detectColor(java.lang.Object)",
      "1429": "DrawContext::::detectColor(java.lang.Object)",
      "1430": "DrawContext::::detectColor(java.lang.Object)",
      "1431": "DrawContext::::detectColor(java.lang.Object)",
      "1432": "DrawContext::::detectColor(java.lang.Object)",
      "1433": "DrawContext::::detectColor(java.lang.Object)",
      "1434": "DrawContext::::detectColor(java.lang.Object)",
      "1435": "DrawContext::::detectColor(java.lang.Object)",
      "1436": "DrawContext::::detectColor(java.lang.Object)",
      "1437": "DrawContext::::detectColor(java.lang.Object)",
      "1456": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1457": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1458": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1459": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1460": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1461": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1462": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1463": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1464": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1465": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1466": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1467": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1468": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1469": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1470": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1471": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1472": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1473": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1474": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1475": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1476": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1477": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1478": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1479": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1480": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1481": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1482": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1483": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1484": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1485": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1486": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1487": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1488": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1489": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1490": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1491": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1492": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1493": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1494": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1495": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1496": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1497": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1498": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1499": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1500": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1501": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1502": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1503": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1504": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1505": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1506": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1507": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1508": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1509": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1510": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1511": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1512": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1513": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1514": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1515": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1516": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1517": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1518": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1519": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1520": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1521": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1522": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1523": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1524": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1525": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1526": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1527": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1528": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1529": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1530": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1531": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1532": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1533": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1534": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1535": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1536": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1537": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1538": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1539": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1540": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1541": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1542": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1543": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1544": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1545": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1546": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1547": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1548": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1549": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1550": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1551": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1552": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1553": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1554": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1555": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1556": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1557": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1558": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1559": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1560": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1561": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1562": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1563": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1564": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1565": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1566": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1567": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1568": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1569": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1570": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1571": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1572": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1573": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1574": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1575": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1576": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1577": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1578": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1579": "DrawContext::::fontStyleToSetting(java.lang.String,org.ofdrw.layout.element.canvas.FontSetting)",
      "1587": "DrawContext::::mm(int)",
      "1588": "DrawContext::::mm(int)",
      "1589": "DrawContext::::mm(int)",
      "1597": "DrawContext::::pixel(double)",
      "1598": "DrawContext::::pixel(double)",
      "1599": "DrawContext::::pixel(double)",
      "1609": "DrawContext::::addFont(java.lang.String,java.nio.file.Path)",
      "1610": "DrawContext::::addFont(java.lang.String,java.nio.file.Path)",
      "1611": "DrawContext::::addFont(java.lang.String,java.nio.file.Path)",
      "1612": "DrawContext::::addFont(java.lang.String,java.nio.file.Path)",
      "1617": "DrawContext::::close()",
      "1618": "DrawContext::::close()",
      "1619": "DrawContext::::close()",
      "1620": "DrawContext::::close()"
    },
    "test_reverse_method_lines_dic": {
      "32": "DrawContextTest::::testExternalFont()",
      "33": "DrawContextTest::::testExternalFont()",
      "34": "DrawContextTest::::testExternalFont()",
      "35": "DrawContextTest::::testExternalFont()",
      "36": "DrawContextTest::::testExternalFont()",
      "37": "DrawContextTest::::testExternalFont()",
      "38": "DrawContextTest::::testExternalFont()",
      "39": "DrawContextTest::::testExternalFont()",
      "40": "DrawContextTest::::testExternalFont()",
      "41": "DrawContextTest::::testExternalFont()",
      "42": "DrawContextTest::::testExternalFont()",
      "43": "DrawContextTest::::testExternalFont()",
      "44": "DrawContextTest::::testExternalFont()",
      "45": "DrawContextTest::::testExternalFont()",
      "46": "DrawContextTest::::testExternalFont()",
      "47": "DrawContextTest::::testExternalFont()",
      "48": "DrawContextTest::::testExternalFont()",
      "49": "DrawContextTest::::testExternalFont()",
      "50": "DrawContextTest::::testExternalFont()",
      "51": "DrawContextTest::::testExternalFont()",
      "52": "DrawContextTest::::testExternalFont()",
      "53": "DrawContextTest::::testExternalFont()",
      "54": "DrawContextTest::::testExternalFont()",
      "55": "DrawContextTest::::testExternalFont()",
      "56": "DrawContextTest::::testExternalFont()",
      "57": "DrawContextTest::::testExternalFont()",
      "58": "DrawContextTest::::testExternalFont()",
      "59": "DrawContextTest::::testExternalFont()",
      "60": "DrawContextTest::::testExternalFont()",
      "66": "DrawContextTest::::testFontStyle1()",
      "67": "DrawContextTest::::testFontStyle1()",
      "68": "DrawContextTest::::testFontStyle1()",
      "69": "DrawContextTest::::testFontStyle1()",
      "70": "DrawContextTest::::testFontStyle1()",
      "71": "DrawContextTest::::testFontStyle1()",
      "72": "DrawContextTest::::testFontStyle1()",
      "73": "DrawContextTest::::testFontStyle1()",
      "74": "DrawContextTest::::testFontStyle1()",
      "75": "DrawContextTest::::testFontStyle1()",
      "76": "DrawContextTest::::testFontStyle1()",
      "77": "DrawContextTest::::testFontStyle1()",
      "78": "DrawContextTest::::testFontStyle1()",
      "79": "DrawContextTest::::testFontStyle1()",
      "80": "DrawContextTest::::testFontStyle1()",
      "81": "DrawContextTest::::testFontStyle1()",
      "82": "DrawContextTest::::testFontStyle1()",
      "83": "DrawContextTest::::testFontStyle1()",
      "84": "DrawContextTest::::testFontStyle1()",
      "85": "DrawContextTest::::testFontStyle1()",
      "86": "DrawContextTest::::testFontStyle1()",
      "87": "DrawContextTest::::testFontStyle1()",
      "88": "DrawContextTest::::testFontStyle1()",
      "89": "DrawContextTest::::testFontStyle1()",
      "90": "DrawContextTest::::testFontStyle1()",
      "91": "DrawContextTest::::testFontStyle1()",
      "92": "DrawContextTest::::testFontStyle1()",
      "97": "DrawContextTest::::testFontStyle2()",
      "98": "DrawContextTest::::testFontStyle2()",
      "99": "DrawContextTest::::testFontStyle2()",
      "100": "DrawContextTest::::testFontStyle2()",
      "101": "DrawContextTest::::testFontStyle2()",
      "102": "DrawContextTest::::testFontStyle2()",
      "103": "DrawContextTest::::testFontStyle2()",
      "104": "DrawContextTest::::testFontStyle2()",
      "105": "DrawContextTest::::testFontStyle2()",
      "106": "DrawContextTest::::testFontStyle2()",
      "107": "DrawContextTest::::testFontStyle2()",
      "108": "DrawContextTest::::testFontStyle2()",
      "109": "DrawContextTest::::testFontStyle2()",
      "110": "DrawContextTest::::testFontStyle2()",
      "111": "DrawContextTest::::testFontStyle2()",
      "112": "DrawContextTest::::testFontStyle2()",
      "113": "DrawContextTest::::testFontStyle2()",
      "114": "DrawContextTest::::testFontStyle2()",
      "115": "DrawContextTest::::testFontStyle2()",
      "116": "DrawContextTest::::testFontStyle2()",
      "117": "DrawContextTest::::testFontStyle2()",
      "118": "DrawContextTest::::testFontStyle2()",
      "119": "DrawContextTest::::testFontStyle2()",
      "120": "DrawContextTest::::testFontStyle2()",
      "121": "DrawContextTest::::testFontStyle2()",
      "123": "DrawContextTest::::testCreateRadialGradient()",
      "124": "DrawContextTest::::testCreateRadialGradient()",
      "125": "DrawContextTest::::testCreateRadialGradient()",
      "126": "DrawContextTest::::testCreateRadialGradient()",
      "127": "DrawContextTest::::testCreateRadialGradient()",
      "128": "DrawContextTest::::testCreateRadialGradient()",
      "129": "DrawContextTest::::testCreateRadialGradient()",
      "130": "DrawContextTest::::testCreateRadialGradient()",
      "131": "DrawContextTest::::testCreateRadialGradient()",
      "132": "DrawContextTest::::testCreateRadialGradient()",
      "133": "DrawContextTest::::testCreateRadialGradient()",
      "134": "DrawContextTest::::testCreateRadialGradient()",
      "135": "DrawContextTest::::testCreateRadialGradient()",
      "136": "DrawContextTest::::testCreateRadialGradient()",
      "137": "DrawContextTest::::testCreateRadialGradient()",
      "138": "DrawContextTest::::testCreateRadialGradient()",
      "139": "DrawContextTest::::testCreateRadialGradient()",
      "140": "DrawContextTest::::testCreateRadialGradient()",
      "141": "DrawContextTest::::testCreateRadialGradient()",
      "144": "DrawContextTest::::testCreatePattern()",
      "145": "DrawContextTest::::testCreatePattern()",
      "146": "DrawContextTest::::testCreatePattern()",
      "147": "DrawContextTest::::testCreatePattern()",
      "148": "DrawContextTest::::testCreatePattern()",
      "149": "DrawContextTest::::testCreatePattern()",
      "150": "DrawContextTest::::testCreatePattern()",
      "151": "DrawContextTest::::testCreatePattern()",
      "152": "DrawContextTest::::testCreatePattern()",
      "153": "DrawContextTest::::testCreatePattern()",
      "154": "DrawContextTest::::testCreatePattern()",
      "155": "DrawContextTest::::testCreatePattern()",
      "156": "DrawContextTest::::testCreatePattern()",
      "157": "DrawContextTest::::testCreatePattern()",
      "158": "DrawContextTest::::testCreatePattern()",
      "159": "DrawContextTest::::testCreatePattern()",
      "160": "DrawContextTest::::testCreatePattern()",
      "161": "DrawContextTest::::testCreatePattern()",
      "162": "DrawContextTest::::testCreatePattern()",
      "163": "DrawContextTest::::testCreatePattern()",
      "165": "DrawContextTest::::testCreatePatternSize()",
      "166": "DrawContextTest::::testCreatePatternSize()",
      "167": "DrawContextTest::::testCreatePatternSize()",
      "168": "DrawContextTest::::testCreatePatternSize()",
      "169": "DrawContextTest::::testCreatePatternSize()",
      "170": "DrawContextTest::::testCreatePatternSize()",
      "171": "DrawContextTest::::testCreatePatternSize()",
      "172": "DrawContextTest::::testCreatePatternSize()",
      "173": "DrawContextTest::::testCreatePatternSize()",
      "174": "DrawContextTest::::testCreatePatternSize()",
      "175": "DrawContextTest::::testCreatePatternSize()",
      "176": "DrawContextTest::::testCreatePatternSize()",
      "177": "DrawContextTest::::testCreatePatternSize()",
      "178": "DrawContextTest::::testCreatePatternSize()",
      "179": "DrawContextTest::::testCreatePatternSize()",
      "180": "DrawContextTest::::testCreatePatternSize()",
      "181": "DrawContextTest::::testCreatePatternSize()",
      "182": "DrawContextTest::::testCreatePatternSize()",
      "183": "DrawContextTest::::testCreatePatternSize()",
      "184": "DrawContextTest::::testCreatePatternSize()",
      "185": "DrawContextTest::::testCreatePatternSize()",
      "187": "DrawContextTest::::testCreatePatternStyle2()",
      "188": "DrawContextTest::::testCreatePatternStyle2()",
      "189": "DrawContextTest::::testCreatePatternStyle2()",
      "190": "DrawContextTest::::testCreatePatternStyle2()",
      "191": "DrawContextTest::::testCreatePatternStyle2()",
      "192": "DrawContextTest::::testCreatePatternStyle2()",
      "193": "DrawContextTest::::testCreatePatternStyle2()",
      "194": "DrawContextTest::::testCreatePatternStyle2()",
      "195": "DrawContextTest::::testCreatePatternStyle2()",
      "196": "DrawContextTest::::testCreatePatternStyle2()",
      "197": "DrawContextTest::::testCreatePatternStyle2()",
      "198": "DrawContextTest::::testCreatePatternStyle2()",
      "199": "DrawContextTest::::testCreatePatternStyle2()",
      "200": "DrawContextTest::::testCreatePatternStyle2()",
      "201": "DrawContextTest::::testCreatePatternStyle2()",
      "202": "DrawContextTest::::testCreatePatternStyle2()",
      "203": "DrawContextTest::::testCreatePatternStyle2()",
      "204": "DrawContextTest::::testCreatePatternStyle2()",
      "205": "DrawContextTest::::testCreatePatternStyle2()",
      "206": "DrawContextTest::::testCreatePatternStyle2()",
      "208": "DrawContextTest::::testCreatePatternCTM()",
      "209": "DrawContextTest::::testCreatePatternCTM()",
      "210": "DrawContextTest::::testCreatePatternCTM()",
      "211": "DrawContextTest::::testCreatePatternCTM()",
      "212": "DrawContextTest::::testCreatePatternCTM()",
      "213": "DrawContextTest::::testCreatePatternCTM()",
      "214": "DrawContextTest::::testCreatePatternCTM()",
      "215": "DrawContextTest::::testCreatePatternCTM()",
      "216": "DrawContextTest::::testCreatePatternCTM()",
      "217": "DrawContextTest::::testCreatePatternCTM()",
      "218": "DrawContextTest::::testCreatePatternCTM()",
      "219": "DrawContextTest::::testCreatePatternCTM()",
      "220": "DrawContextTest::::testCreatePatternCTM()",
      "221": "DrawContextTest::::testCreatePatternCTM()",
      "222": "DrawContextTest::::testCreatePatternCTM()",
      "223": "DrawContextTest::::testCreatePatternCTM()",
      "224": "DrawContextTest::::testCreatePatternCTM()",
      "225": "DrawContextTest::::testCreatePatternCTM()",
      "226": "DrawContextTest::::testCreatePatternCTM()",
      "227": "DrawContextTest::::testCreatePatternCTM()",
      "228": "DrawContextTest::::testCreatePatternCTM()",
      "229": "DrawContextTest::::testCreatePatternCTM()",
      "230": "DrawContextTest::::testCreatePatternCTM()",
      "231": "DrawContextTest::::testCreatePatternCTM()",
      "233": "DrawContextTest::::testCreateLinearGradient()",
      "234": "DrawContextTest::::testCreateLinearGradient()",
      "235": "DrawContextTest::::testCreateLinearGradient()",
      "236": "DrawContextTest::::testCreateLinearGradient()",
      "237": "DrawContextTest::::testCreateLinearGradient()",
      "238": "DrawContextTest::::testCreateLinearGradient()",
      "239": "DrawContextTest::::testCreateLinearGradient()",
      "240": "DrawContextTest::::testCreateLinearGradient()",
      "241": "DrawContextTest::::testCreateLinearGradient()",
      "242": "DrawContextTest::::testCreateLinearGradient()",
      "243": "DrawContextTest::::testCreateLinearGradient()",
      "244": "DrawContextTest::::testCreateLinearGradient()",
      "245": "DrawContextTest::::testCreateLinearGradient()",
      "246": "DrawContextTest::::testCreateLinearGradient()",
      "247": "DrawContextTest::::testCreateLinearGradient()",
      "248": "DrawContextTest::::testCreateLinearGradient()",
      "249": "DrawContextTest::::testCreateLinearGradient()",
      "250": "DrawContextTest::::testCreateLinearGradient()",
      "251": "DrawContextTest::::testCreateLinearGradient()",
      "252": "DrawContextTest::::testCreateLinearGradient()",
      "253": "DrawContextTest::::testCreateLinearGradient()",
      "254": "DrawContextTest::::testCreateLinearGradient()",
      "255": "DrawContextTest::::testCreateLinearGradient()",
      "256": "DrawContextTest::::testCreateLinearGradient()",
      "258": "DrawContextTest::::testFillStyle()",
      "259": "DrawContextTest::::testFillStyle()",
      "260": "DrawContextTest::::testFillStyle()",
      "261": "DrawContextTest::::testFillStyle()",
      "262": "DrawContextTest::::testFillStyle()",
      "263": "DrawContextTest::::testFillStyle()",
      "264": "DrawContextTest::::testFillStyle()",
      "265": "DrawContextTest::::testFillStyle()",
      "266": "DrawContextTest::::testFillStyle()",
      "267": "DrawContextTest::::testFillStyle()",
      "268": "DrawContextTest::::testFillStyle()",
      "269": "DrawContextTest::::testFillStyle()",
      "270": "DrawContextTest::::testFillStyle()",
      "271": "DrawContextTest::::testFillStyle()",
      "272": "DrawContextTest::::testFillStyle()",
      "273": "DrawContextTest::::testFillStyle()",
      "274": "DrawContextTest::::testFillStyle()",
      "275": "DrawContextTest::::testFillStyle()",
      "276": "DrawContextTest::::testFillStyle()",
      "278": "DrawContextTest::::testStrokeStyle()",
      "279": "DrawContextTest::::testStrokeStyle()",
      "280": "DrawContextTest::::testStrokeStyle()",
      "281": "DrawContextTest::::testStrokeStyle()",
      "282": "DrawContextTest::::testStrokeStyle()",
      "283": "DrawContextTest::::testStrokeStyle()",
      "284": "DrawContextTest::::testStrokeStyle()",
      "285": "DrawContextTest::::testStrokeStyle()",
      "286": "DrawContextTest::::testStrokeStyle()",
      "287": "DrawContextTest::::testStrokeStyle()",
      "288": "DrawContextTest::::testStrokeStyle()",
      "289": "DrawContextTest::::testStrokeStyle()",
      "290": "DrawContextTest::::testStrokeStyle()",
      "291": "DrawContextTest::::testStrokeStyle()",
      "292": "DrawContextTest::::testStrokeStyle()",
      "293": "DrawContextTest::::testStrokeStyle()",
      "294": "DrawContextTest::::testStrokeStyle()",
      "295": "DrawContextTest::::testStrokeStyle()",
      "297": "DrawContextTest::::testLineTo()",
      "298": "DrawContextTest::::testLineTo()",
      "299": "DrawContextTest::::testLineTo()",
      "300": "DrawContextTest::::testLineTo()",
      "301": "DrawContextTest::::testLineTo()",
      "302": "DrawContextTest::::testLineTo()",
      "303": "DrawContextTest::::testLineTo()",
      "304": "DrawContextTest::::testLineTo()",
      "305": "DrawContextTest::::testLineTo()",
      "306": "DrawContextTest::::testLineTo()",
      "307": "DrawContextTest::::testLineTo()",
      "308": "DrawContextTest::::testLineTo()",
      "309": "DrawContextTest::::testLineTo()",
      "310": "DrawContextTest::::testLineTo()",
      "311": "DrawContextTest::::testLineTo()",
      "312": "DrawContextTest::::testLineTo()",
      "313": "DrawContextTest::::testLineTo()",
      "314": "DrawContextTest::::testLineTo()",
      "315": "DrawContextTest::::testLineTo()",
      "316": "DrawContextTest::::testLineTo()",
      "317": "DrawContextTest::::testLineTo()",
      "318": "DrawContextTest::::testLineTo()",
      "319": "DrawContextTest::::testLineTo()",
      "320": "DrawContextTest::::testLineTo()",
      "322": "DrawContextTest::::stroke()",
      "323": "DrawContextTest::::stroke()",
      "324": "DrawContextTest::::stroke()",
      "325": "DrawContextTest::::stroke()",
      "326": "DrawContextTest::::stroke()",
      "327": "DrawContextTest::::stroke()",
      "328": "DrawContextTest::::stroke()",
      "329": "DrawContextTest::::stroke()",
      "330": "DrawContextTest::::stroke()",
      "331": "DrawContextTest::::stroke()",
      "332": "DrawContextTest::::stroke()",
      "333": "DrawContextTest::::stroke()",
      "334": "DrawContextTest::::stroke()",
      "335": "DrawContextTest::::stroke()",
      "336": "DrawContextTest::::stroke()",
      "337": "DrawContextTest::::stroke()",
      "338": "DrawContextTest::::stroke()",
      "339": "DrawContextTest::::stroke()",
      "340": "DrawContextTest::::stroke()",
      "341": "DrawContextTest::::stroke()",
      "342": "DrawContextTest::::stroke()",
      "343": "DrawContextTest::::stroke()",
      "344": "DrawContextTest::::stroke()",
      "345": "DrawContextTest::::stroke()",
      "346": "DrawContextTest::::stroke()",
      "348": "DrawContextTest::::stroke2()",
      "349": "DrawContextTest::::stroke2()",
      "350": "DrawContextTest::::stroke2()",
      "351": "DrawContextTest::::stroke2()",
      "352": "DrawContextTest::::stroke2()",
      "353": "DrawContextTest::::stroke2()",
      "354": "DrawContextTest::::stroke2()",
      "355": "DrawContextTest::::stroke2()",
      "356": "DrawContextTest::::stroke2()",
      "357": "DrawContextTest::::stroke2()",
      "358": "DrawContextTest::::stroke2()",
      "359": "DrawContextTest::::stroke2()",
      "360": "DrawContextTest::::stroke2()",
      "361": "DrawContextTest::::stroke2()",
      "362": "DrawContextTest::::stroke2()",
      "363": "DrawContextTest::::stroke2()",
      "364": "DrawContextTest::::stroke2()",
      "365": "DrawContextTest::::stroke2()",
      "366": "DrawContextTest::::stroke2()",
      "367": "DrawContextTest::::stroke2()",
      "368": "DrawContextTest::::stroke2()",
      "369": "DrawContextTest::::stroke2()",
      "370": "DrawContextTest::::stroke2()",
      "371": "DrawContextTest::::stroke2()",
      "372": "DrawContextTest::::stroke2()",
      "374": "DrawContextTest::::strokeRect2()",
      "375": "DrawContextTest::::strokeRect2()",
      "376": "DrawContextTest::::strokeRect2()",
      "377": "DrawContextTest::::strokeRect2()",
      "378": "DrawContextTest::::strokeRect2()",
      "379": "DrawContextTest::::strokeRect2()",
      "380": "DrawContextTest::::strokeRect2()",
      "381": "DrawContextTest::::strokeRect2()",
      "382": "DrawContextTest::::strokeRect2()",
      "383": "DrawContextTest::::strokeRect2()",
      "384": "DrawContextTest::::strokeRect2()",
      "385": "DrawContextTest::::strokeRect2()",
      "386": "DrawContextTest::::strokeRect2()",
      "387": "DrawContextTest::::strokeRect2()",
      "388": "DrawContextTest::::strokeRect2()",
      "389": "DrawContextTest::::strokeRect2()",
      "390": "DrawContextTest::::strokeRect2()",
      "391": "DrawContextTest::::strokeRect2()",
      "392": "DrawContextTest::::strokeRect2()",
      "393": "DrawContextTest::::strokeRect2()",
      "394": "DrawContextTest::::strokeRect2()",
      "395": "DrawContextTest::::strokeRect2()",
      "396": "DrawContextTest::::strokeRect2()",
      "397": "DrawContextTest::::strokeRect2()",
      "399": "DrawContextTest::::fillRect2()",
      "400": "DrawContextTest::::fillRect2()",
      "401": "DrawContextTest::::fillRect2()",
      "402": "DrawContextTest::::fillRect2()",
      "403": "DrawContextTest::::fillRect2()",
      "404": "DrawContextTest::::fillRect2()",
      "405": "DrawContextTest::::fillRect2()",
      "406": "DrawContextTest::::fillRect2()",
      "407": "DrawContextTest::::fillRect2()",
      "408": "DrawContextTest::::fillRect2()",
      "409": "DrawContextTest::::fillRect2()",
      "410": "DrawContextTest::::fillRect2()",
      "411": "DrawContextTest::::fillRect2()",
      "412": "DrawContextTest::::fillRect2()",
      "413": "DrawContextTest::::fillRect2()",
      "414": "DrawContextTest::::fillRect2()",
      "415": "DrawContextTest::::fillRect2()",
      "416": "DrawContextTest::::fillRect2()",
      "417": "DrawContextTest::::fillRect2()",
      "418": "DrawContextTest::::fillRect2()",
      "419": "DrawContextTest::::fillRect2()",
      "420": "DrawContextTest::::fillRect2()",
      "421": "DrawContextTest::::fillRect2()",
      "422": "DrawContextTest::::fillRect2()",
      "424": "DrawContextTest::::fill()",
      "425": "DrawContextTest::::fill()",
      "426": "DrawContextTest::::fill()",
      "427": "DrawContextTest::::fill()",
      "428": "DrawContextTest::::fill()",
      "429": "DrawContextTest::::fill()",
      "430": "DrawContextTest::::fill()",
      "431": "DrawContextTest::::fill()",
      "432": "DrawContextTest::::fill()",
      "433": "DrawContextTest::::fill()",
      "434": "DrawContextTest::::fill()",
      "435": "DrawContextTest::::fill()",
      "436": "DrawContextTest::::fill()",
      "437": "DrawContextTest::::fill()",
      "438": "DrawContextTest::::fill()",
      "439": "DrawContextTest::::fill()",
      "440": "DrawContextTest::::fill()",
      "441": "DrawContextTest::::fill()",
      "442": "DrawContextTest::::fill()",
      "443": "DrawContextTest::::fill()",
      "444": "DrawContextTest::::fill()",
      "445": "DrawContextTest::::fill()",
      "446": "DrawContextTest::::fill()",
      "447": "DrawContextTest::::fill()",
      "448": "DrawContextTest::::fill()",
      "449": "DrawContextTest::::fill()",
      "450": "DrawContextTest::::fill()",
      "452": "DrawContextTest::::beginPath()",
      "453": "DrawContextTest::::beginPath()",
      "454": "DrawContextTest::::beginPath()",
      "455": "DrawContextTest::::beginPath()",
      "456": "DrawContextTest::::beginPath()",
      "457": "DrawContextTest::::beginPath()",
      "458": "DrawContextTest::::beginPath()",
      "459": "DrawContextTest::::beginPath()",
      "460": "DrawContextTest::::beginPath()",
      "461": "DrawContextTest::::beginPath()",
      "462": "DrawContextTest::::beginPath()",
      "463": "DrawContextTest::::beginPath()",
      "464": "DrawContextTest::::beginPath()",
      "465": "DrawContextTest::::beginPath()",
      "466": "DrawContextTest::::beginPath()",
      "467": "DrawContextTest::::beginPath()",
      "468": "DrawContextTest::::beginPath()",
      "469": "DrawContextTest::::beginPath()",
      "470": "DrawContextTest::::beginPath()",
      "471": "DrawContextTest::::beginPath()",
      "472": "DrawContextTest::::beginPath()",
      "473": "DrawContextTest::::beginPath()",
      "474": "DrawContextTest::::beginPath()",
      "475": "DrawContextTest::::beginPath()",
      "476": "DrawContextTest::::beginPath()",
      "477": "DrawContextTest::::beginPath()",
      "478": "DrawContextTest::::beginPath()",
      "479": "DrawContextTest::::beginPath()",
      "480": "DrawContextTest::::beginPath()",
      "481": "DrawContextTest::::beginPath()",
      "482": "DrawContextTest::::beginPath()",
      "484": "DrawContextTest::::clip()",
      "485": "DrawContextTest::::clip()",
      "486": "DrawContextTest::::clip()",
      "487": "DrawContextTest::::clip()",
      "488": "DrawContextTest::::clip()",
      "489": "DrawContextTest::::clip()",
      "490": "DrawContextTest::::clip()",
      "491": "DrawContextTest::::clip()",
      "492": "DrawContextTest::::clip()",
      "493": "DrawContextTest::::clip()",
      "494": "DrawContextTest::::clip()",
      "495": "DrawContextTest::::clip()",
      "496": "DrawContextTest::::clip()",
      "497": "DrawContextTest::::clip()",
      "498": "DrawContextTest::::clip()",
      "499": "DrawContextTest::::clip()",
      "500": "DrawContextTest::::clip()",
      "501": "DrawContextTest::::clip()",
      "502": "DrawContextTest::::clip()",
      "503": "DrawContextTest::::clip()",
      "504": "DrawContextTest::::clip()",
      "505": "DrawContextTest::::clip()",
      "506": "DrawContextTest::::clip()",
      "507": "DrawContextTest::::clip()",
      "508": "DrawContextTest::::clip()",
      "509": "DrawContextTest::::clip()",
      "510": "DrawContextTest::::clip()",
      "512": "DrawContextTest::::clipCTM()",
      "513": "DrawContextTest::::clipCTM()",
      "514": "DrawContextTest::::clipCTM()",
      "515": "DrawContextTest::::clipCTM()",
      "516": "DrawContextTest::::clipCTM()",
      "517": "DrawContextTest::::clipCTM()",
      "518": "DrawContextTest::::clipCTM()",
      "519": "DrawContextTest::::clipCTM()",
      "520": "DrawContextTest::::clipCTM()",
      "521": "DrawContextTest::::clipCTM()",
      "522": "DrawContextTest::::clipCTM()",
      "523": "DrawContextTest::::clipCTM()",
      "524": "DrawContextTest::::clipCTM()",
      "525": "DrawContextTest::::clipCTM()",
      "526": "DrawContextTest::::clipCTM()",
      "527": "DrawContextTest::::clipCTM()",
      "528": "DrawContextTest::::clipCTM()",
      "529": "DrawContextTest::::clipCTM()",
      "530": "DrawContextTest::::clipCTM()",
      "531": "DrawContextTest::::clipCTM()",
      "532": "DrawContextTest::::clipCTM()",
      "533": "DrawContextTest::::clipCTM()",
      "534": "DrawContextTest::::clipCTM()",
      "535": "DrawContextTest::::clipCTM()",
      "536": "DrawContextTest::::clipCTM()",
      "537": "DrawContextTest::::clipCTM()",
      "538": "DrawContextTest::::clipCTM()",
      "539": "DrawContextTest::::clipCTM()",
      "540": "DrawContextTest::::clipCTM()",
      "541": "DrawContextTest::::clipCTM()",
      "542": "DrawContextTest::::clipCTM()",
      "544": "DrawContextTest::::quadraticCurveTo()",
      "545": "DrawContextTest::::quadraticCurveTo()",
      "546": "DrawContextTest::::quadraticCurveTo()",
      "547": "DrawContextTest::::quadraticCurveTo()",
      "548": "DrawContextTest::::quadraticCurveTo()",
      "549": "DrawContextTest::::quadraticCurveTo()",
      "550": "DrawContextTest::::quadraticCurveTo()",
      "551": "DrawContextTest::::quadraticCurveTo()",
      "552": "DrawContextTest::::quadraticCurveTo()",
      "553": "DrawContextTest::::quadraticCurveTo()",
      "554": "DrawContextTest::::quadraticCurveTo()",
      "555": "DrawContextTest::::quadraticCurveTo()",
      "556": "DrawContextTest::::quadraticCurveTo()",
      "557": "DrawContextTest::::quadraticCurveTo()",
      "558": "DrawContextTest::::quadraticCurveTo()",
      "559": "DrawContextTest::::quadraticCurveTo()",
      "560": "DrawContextTest::::quadraticCurveTo()",
      "561": "DrawContextTest::::quadraticCurveTo()",
      "562": "DrawContextTest::::quadraticCurveTo()",
      "563": "DrawContextTest::::quadraticCurveTo()",
      "564": "DrawContextTest::::quadraticCurveTo()",
      "565": "DrawContextTest::::quadraticCurveTo()",
      "566": "DrawContextTest::::quadraticCurveTo()",
      "568": "DrawContextTest::::bezierCurveTo()",
      "569": "DrawContextTest::::bezierCurveTo()",
      "570": "DrawContextTest::::bezierCurveTo()",
      "571": "DrawContextTest::::bezierCurveTo()",
      "572": "DrawContextTest::::bezierCurveTo()",
      "573": "DrawContextTest::::bezierCurveTo()",
      "574": "DrawContextTest::::bezierCurveTo()",
      "575": "DrawContextTest::::bezierCurveTo()",
      "576": "DrawContextTest::::bezierCurveTo()",
      "577": "DrawContextTest::::bezierCurveTo()",
      "578": "DrawContextTest::::bezierCurveTo()",
      "579": "DrawContextTest::::bezierCurveTo()",
      "580": "DrawContextTest::::bezierCurveTo()",
      "581": "DrawContextTest::::bezierCurveTo()",
      "582": "DrawContextTest::::bezierCurveTo()",
      "583": "DrawContextTest::::bezierCurveTo()",
      "584": "DrawContextTest::::bezierCurveTo()",
      "585": "DrawContextTest::::bezierCurveTo()",
      "586": "DrawContextTest::::bezierCurveTo()",
      "587": "DrawContextTest::::bezierCurveTo()",
      "588": "DrawContextTest::::bezierCurveTo()",
      "589": "DrawContextTest::::bezierCurveTo()",
      "590": "DrawContextTest::::bezierCurveTo()",
      "592": "DrawContextTest::::arc()",
      "593": "DrawContextTest::::arc()",
      "594": "DrawContextTest::::arc()",
      "595": "DrawContextTest::::arc()",
      "596": "DrawContextTest::::arc()",
      "597": "DrawContextTest::::arc()",
      "598": "DrawContextTest::::arc()",
      "599": "DrawContextTest::::arc()",
      "600": "DrawContextTest::::arc()",
      "601": "DrawContextTest::::arc()",
      "602": "DrawContextTest::::arc()",
      "603": "DrawContextTest::::arc()",
      "604": "DrawContextTest::::arc()",
      "605": "DrawContextTest::::arc()",
      "606": "DrawContextTest::::arc()",
      "607": "DrawContextTest::::arc()",
      "608": "DrawContextTest::::arc()",
      "609": "DrawContextTest::::arc()",
      "610": "DrawContextTest::::arc()",
      "611": "DrawContextTest::::arc()",
      "612": "DrawContextTest::::arc()",
      "613": "DrawContextTest::::arc()",
      "616": "DrawContextTest::::rect()",
      "617": "DrawContextTest::::rect()",
      "618": "DrawContextTest::::rect()",
      "619": "DrawContextTest::::rect()",
      "620": "DrawContextTest::::rect()",
      "621": "DrawContextTest::::rect()",
      "622": "DrawContextTest::::rect()",
      "623": "DrawContextTest::::rect()",
      "624": "DrawContextTest::::rect()",
      "625": "DrawContextTest::::rect()",
      "626": "DrawContextTest::::rect()",
      "627": "DrawContextTest::::rect()",
      "628": "DrawContextTest::::rect()",
      "629": "DrawContextTest::::rect()",
      "630": "DrawContextTest::::rect()",
      "631": "DrawContextTest::::rect()",
      "632": "DrawContextTest::::rect()",
      "633": "DrawContextTest::::rect()",
      "634": "DrawContextTest::::rect()",
      "635": "DrawContextTest::::rect()",
      "636": "DrawContextTest::::rect()",
      "638": "DrawContextTest::::strokeRect()",
      "639": "DrawContextTest::::strokeRect()",
      "640": "DrawContextTest::::strokeRect()",
      "641": "DrawContextTest::::strokeRect()",
      "642": "DrawContextTest::::strokeRect()",
      "643": "DrawContextTest::::strokeRect()",
      "644": "DrawContextTest::::strokeRect()",
      "645": "DrawContextTest::::strokeRect()",
      "646": "DrawContextTest::::strokeRect()",
      "647": "DrawContextTest::::strokeRect()",
      "648": "DrawContextTest::::strokeRect()",
      "649": "DrawContextTest::::strokeRect()",
      "650": "DrawContextTest::::strokeRect()",
      "651": "DrawContextTest::::strokeRect()",
      "652": "DrawContextTest::::strokeRect()",
      "653": "DrawContextTest::::strokeRect()",
      "654": "DrawContextTest::::strokeRect()",
      "655": "DrawContextTest::::strokeRect()",
      "656": "DrawContextTest::::strokeRect()",
      "657": "DrawContextTest::::strokeRect()",
      "659": "DrawContextTest::::fillRect()",
      "660": "DrawContextTest::::fillRect()",
      "661": "DrawContextTest::::fillRect()",
      "662": "DrawContextTest::::fillRect()",
      "663": "DrawContextTest::::fillRect()",
      "664": "DrawContextTest::::fillRect()",
      "665": "DrawContextTest::::fillRect()",
      "666": "DrawContextTest::::fillRect()",
      "667": "DrawContextTest::::fillRect()",
      "668": "DrawContextTest::::fillRect()",
      "669": "DrawContextTest::::fillRect()",
      "670": "DrawContextTest::::fillRect()",
      "671": "DrawContextTest::::fillRect()",
      "672": "DrawContextTest::::fillRect()",
      "673": "DrawContextTest::::fillRect()",
      "674": "DrawContextTest::::fillRect()",
      "675": "DrawContextTest::::fillRect()",
      "676": "DrawContextTest::::fillRect()",
      "677": "DrawContextTest::::fillRect()",
      "678": "DrawContextTest::::fillRect()",
      "681": "DrawContextTest::::drawImage()",
      "682": "DrawContextTest::::drawImage()",
      "683": "DrawContextTest::::drawImage()",
      "684": "DrawContextTest::::drawImage()",
      "685": "DrawContextTest::::drawImage()",
      "686": "DrawContextTest::::drawImage()",
      "687": "DrawContextTest::::drawImage()",
      "688": "DrawContextTest::::drawImage()",
      "689": "DrawContextTest::::drawImage()",
      "690": "DrawContextTest::::drawImage()",
      "691": "DrawContextTest::::drawImage()",
      "692": "DrawContextTest::::drawImage()",
      "693": "DrawContextTest::::drawImage()",
      "694": "DrawContextTest::::drawImage()",
      "695": "DrawContextTest::::drawImage()",
      "696": "DrawContextTest::::drawImage()",
      "697": "DrawContextTest::::drawImage()",
      "698": "DrawContextTest::::drawImage()",
      "699": "DrawContextTest::::drawImage()",
      "700": "DrawContextTest::::drawImage()",
      "701": "DrawContextTest::::drawImage()",
      "704": "DrawContextTest::::drawImagePart()",
      "705": "DrawContextTest::::drawImagePart()",
      "706": "DrawContextTest::::drawImagePart()",
      "707": "DrawContextTest::::drawImagePart()",
      "708": "DrawContextTest::::drawImagePart()",
      "709": "DrawContextTest::::drawImagePart()",
      "710": "DrawContextTest::::drawImagePart()",
      "711": "DrawContextTest::::drawImagePart()",
      "712": "DrawContextTest::::drawImagePart()",
      "713": "DrawContextTest::::drawImagePart()",
      "714": "DrawContextTest::::drawImagePart()",
      "715": "DrawContextTest::::drawImagePart()",
      "716": "DrawContextTest::::drawImagePart()",
      "717": "DrawContextTest::::drawImagePart()",
      "718": "DrawContextTest::::drawImagePart()",
      "719": "DrawContextTest::::drawImagePart()",
      "720": "DrawContextTest::::drawImagePart()",
      "721": "DrawContextTest::::drawImagePart()",
      "722": "DrawContextTest::::drawImagePart()",
      "723": "DrawContextTest::::drawImagePart()",
      "724": "DrawContextTest::::drawImagePart()",
      "725": "DrawContextTest::::drawImagePart()",
      "726": "DrawContextTest::::drawImagePart()",
      "728": "DrawContextTest::::drawImageLeftTop()",
      "729": "DrawContextTest::::drawImageLeftTop()",
      "730": "DrawContextTest::::drawImageLeftTop()",
      "731": "DrawContextTest::::drawImageLeftTop()",
      "732": "DrawContextTest::::drawImageLeftTop()",
      "733": "DrawContextTest::::drawImageLeftTop()",
      "734": "DrawContextTest::::drawImageLeftTop()",
      "735": "DrawContextTest::::drawImageLeftTop()",
      "736": "DrawContextTest::::drawImageLeftTop()",
      "737": "DrawContextTest::::drawImageLeftTop()",
      "738": "DrawContextTest::::drawImageLeftTop()",
      "739": "DrawContextTest::::drawImageLeftTop()",
      "740": "DrawContextTest::::drawImageLeftTop()",
      "741": "DrawContextTest::::drawImageLeftTop()",
      "742": "DrawContextTest::::drawImageLeftTop()",
      "743": "DrawContextTest::::drawImageLeftTop()",
      "744": "DrawContextTest::::drawImageLeftTop()",
      "745": "DrawContextTest::::drawImageLeftTop()",
      "746": "DrawContextTest::::drawImageLeftTop()",
      "747": "DrawContextTest::::drawImageLeftTop()",
      "750": "DrawContextTest::::drawImage2()",
      "751": "DrawContextTest::::drawImage2()",
      "752": "DrawContextTest::::drawImage2()",
      "753": "DrawContextTest::::drawImage2()",
      "754": "DrawContextTest::::drawImage2()",
      "755": "DrawContextTest::::drawImage2()",
      "756": "DrawContextTest::::drawImage2()",
      "757": "DrawContextTest::::drawImage2()",
      "758": "DrawContextTest::::drawImage2()",
      "759": "DrawContextTest::::drawImage2()",
      "760": "DrawContextTest::::drawImage2()",
      "761": "DrawContextTest::::drawImage2()",
      "762": "DrawContextTest::::drawImage2()",
      "763": "DrawContextTest::::drawImage2()",
      "764": "DrawContextTest::::drawImage2()",
      "765": "DrawContextTest::::drawImage2()",
      "766": "DrawContextTest::::drawImage2()",
      "767": "DrawContextTest::::drawImage2()",
      "768": "DrawContextTest::::drawImage2()",
      "769": "DrawContextTest::::drawImage2()",
      "770": "DrawContextTest::::drawImage2()",
      "771": "DrawContextTest::::drawImage2()",
      "773": "DrawContextTest::::scale()",
      "774": "DrawContextTest::::scale()",
      "775": "DrawContextTest::::scale()",
      "776": "DrawContextTest::::scale()",
      "777": "DrawContextTest::::scale()",
      "778": "DrawContextTest::::scale()",
      "779": "DrawContextTest::::scale()",
      "780": "DrawContextTest::::scale()",
      "781": "DrawContextTest::::scale()",
      "782": "DrawContextTest::::scale()",
      "783": "DrawContextTest::::scale()",
      "784": "DrawContextTest::::scale()",
      "785": "DrawContextTest::::scale()",
      "786": "DrawContextTest::::scale()",
      "787": "DrawContextTest::::scale()",
      "788": "DrawContextTest::::scale()",
      "789": "DrawContextTest::::scale()",
      "790": "DrawContextTest::::scale()",
      "791": "DrawContextTest::::scale()",
      "792": "DrawContextTest::::scale()",
      "793": "DrawContextTest::::scale()",
      "794": "DrawContextTest::::scale()",
      "795": "DrawContextTest::::scale()",
      "796": "DrawContextTest::::scale()",
      "797": "DrawContextTest::::scale()",
      "798": "DrawContextTest::::scale()",
      "800": "DrawContextTest::::rotate()",
      "801": "DrawContextTest::::rotate()",
      "802": "DrawContextTest::::rotate()",
      "803": "DrawContextTest::::rotate()",
      "804": "DrawContextTest::::rotate()",
      "805": "DrawContextTest::::rotate()",
      "806": "DrawContextTest::::rotate()",
      "807": "DrawContextTest::::rotate()",
      "808": "DrawContextTest::::rotate()",
      "809": "DrawContextTest::::rotate()",
      "810": "DrawContextTest::::rotate()",
      "811": "DrawContextTest::::rotate()",
      "812": "DrawContextTest::::rotate()",
      "813": "DrawContextTest::::rotate()",
      "814": "DrawContextTest::::rotate()",
      "815": "DrawContextTest::::rotate()",
      "816": "DrawContextTest::::rotate()",
      "817": "DrawContextTest::::rotate()",
      "818": "DrawContextTest::::rotate()",
      "819": "DrawContextTest::::rotate()",
      "820": "DrawContextTest::::rotate()",
      "822": "DrawContextTest::::translate()",
      "823": "DrawContextTest::::translate()",
      "824": "DrawContextTest::::translate()",
      "825": "DrawContextTest::::translate()",
      "826": "DrawContextTest::::translate()",
      "827": "DrawContextTest::::translate()",
      "828": "DrawContextTest::::translate()",
      "829": "DrawContextTest::::translate()",
      "830": "DrawContextTest::::translate()",
      "831": "DrawContextTest::::translate()",
      "832": "DrawContextTest::::translate()",
      "833": "DrawContextTest::::translate()",
      "834": "DrawContextTest::::translate()",
      "835": "DrawContextTest::::translate()",
      "836": "DrawContextTest::::translate()",
      "837": "DrawContextTest::::translate()",
      "838": "DrawContextTest::::translate()",
      "839": "DrawContextTest::::translate()",
      "840": "DrawContextTest::::translate()",
      "841": "DrawContextTest::::translate()",
      "842": "DrawContextTest::::translate()",
      "843": "DrawContextTest::::translate()",
      "845": "DrawContextTest::::transform()",
      "846": "DrawContextTest::::transform()",
      "847": "DrawContextTest::::transform()",
      "848": "DrawContextTest::::transform()",
      "849": "DrawContextTest::::transform()",
      "850": "DrawContextTest::::transform()",
      "851": "DrawContextTest::::transform()",
      "852": "DrawContextTest::::transform()",
      "853": "DrawContextTest::::transform()",
      "854": "DrawContextTest::::transform()",
      "855": "DrawContextTest::::transform()",
      "856": "DrawContextTest::::transform()",
      "857": "DrawContextTest::::transform()",
      "858": "DrawContextTest::::transform()",
      "859": "DrawContextTest::::transform()",
      "860": "DrawContextTest::::transform()",
      "861": "DrawContextTest::::transform()",
      "862": "DrawContextTest::::transform()",
      "863": "DrawContextTest::::transform()",
      "864": "DrawContextTest::::transform()",
      "865": "DrawContextTest::::transform()",
      "866": "DrawContextTest::::transform()",
      "867": "DrawContextTest::::transform()",
      "868": "DrawContextTest::::transform()",
      "869": "DrawContextTest::::transform()",
      "870": "DrawContextTest::::transform()",
      "871": "DrawContextTest::::transform()",
      "872": "DrawContextTest::::transform()",
      "873": "DrawContextTest::::transform()",
      "874": "DrawContextTest::::transform()",
      "875": "DrawContextTest::::transform()",
      "877": "DrawContextTest::::setTransform()",
      "878": "DrawContextTest::::setTransform()",
      "879": "DrawContextTest::::setTransform()",
      "880": "DrawContextTest::::setTransform()",
      "881": "DrawContextTest::::setTransform()",
      "882": "DrawContextTest::::setTransform()",
      "883": "DrawContextTest::::setTransform()",
      "884": "DrawContextTest::::setTransform()",
      "885": "DrawContextTest::::setTransform()",
      "886": "DrawContextTest::::setTransform()",
      "887": "DrawContextTest::::setTransform()",
      "888": "DrawContextTest::::setTransform()",
      "889": "DrawContextTest::::setTransform()",
      "890": "DrawContextTest::::setTransform()",
      "891": "DrawContextTest::::setTransform()",
      "892": "DrawContextTest::::setTransform()",
      "893": "DrawContextTest::::setTransform()",
      "894": "DrawContextTest::::setTransform()",
      "895": "DrawContextTest::::setTransform()",
      "896": "DrawContextTest::::setTransform()",
      "897": "DrawContextTest::::setTransform()",
      "898": "DrawContextTest::::setTransform()",
      "899": "DrawContextTest::::setTransform()",
      "900": "DrawContextTest::::setTransform()",
      "901": "DrawContextTest::::setTransform()",
      "902": "DrawContextTest::::setTransform()",
      "903": "DrawContextTest::::setTransform()",
      "904": "DrawContextTest::::setTransform()",
      "905": "DrawContextTest::::setTransform()",
      "906": "DrawContextTest::::setTransform()",
      "908": "DrawContextTest::::getGlobalAlpha()",
      "909": "DrawContextTest::::getGlobalAlpha()",
      "910": "DrawContextTest::::getGlobalAlpha()",
      "911": "DrawContextTest::::getGlobalAlpha()",
      "912": "DrawContextTest::::getGlobalAlpha()",
      "913": "DrawContextTest::::getGlobalAlpha()",
      "914": "DrawContextTest::::getGlobalAlpha()",
      "915": "DrawContextTest::::getGlobalAlpha()",
      "916": "DrawContextTest::::getGlobalAlpha()",
      "917": "DrawContextTest::::getGlobalAlpha()",
      "918": "DrawContextTest::::getGlobalAlpha()",
      "919": "DrawContextTest::::getGlobalAlpha()",
      "920": "DrawContextTest::::getGlobalAlpha()",
      "921": "DrawContextTest::::getGlobalAlpha()",
      "922": "DrawContextTest::::getGlobalAlpha()",
      "923": "DrawContextTest::::getGlobalAlpha()",
      "924": "DrawContextTest::::getGlobalAlpha()",
      "925": "DrawContextTest::::getGlobalAlpha()",
      "926": "DrawContextTest::::getGlobalAlpha()",
      "927": "DrawContextTest::::getGlobalAlpha()",
      "928": "DrawContextTest::::getGlobalAlpha()",
      "929": "DrawContextTest::::getGlobalAlpha()",
      "930": "DrawContextTest::::getGlobalAlpha()",
      "931": "DrawContextTest::::getGlobalAlpha()",
      "932": "DrawContextTest::::getGlobalAlpha()",
      "933": "DrawContextTest::::getGlobalAlpha()",
      "934": "DrawContextTest::::getGlobalAlpha()",
      "935": "DrawContextTest::::getGlobalAlpha()",
      "937": "DrawContextTest::::save()",
      "938": "DrawContextTest::::save()",
      "939": "DrawContextTest::::save()",
      "940": "DrawContextTest::::save()",
      "941": "DrawContextTest::::save()",
      "942": "DrawContextTest::::save()",
      "943": "DrawContextTest::::save()",
      "944": "DrawContextTest::::save()",
      "945": "DrawContextTest::::save()",
      "946": "DrawContextTest::::save()",
      "947": "DrawContextTest::::save()",
      "948": "DrawContextTest::::save()",
      "949": "DrawContextTest::::save()",
      "950": "DrawContextTest::::save()",
      "951": "DrawContextTest::::save()",
      "952": "DrawContextTest::::save()",
      "953": "DrawContextTest::::save()",
      "954": "DrawContextTest::::save()",
      "955": "DrawContextTest::::save()",
      "956": "DrawContextTest::::save()",
      "957": "DrawContextTest::::save()",
      "958": "DrawContextTest::::save()",
      "959": "DrawContextTest::::save()",
      "960": "DrawContextTest::::save()",
      "962": "DrawContextTest::::fillText()",
      "963": "DrawContextTest::::fillText()",
      "964": "DrawContextTest::::fillText()",
      "965": "DrawContextTest::::fillText()",
      "966": "DrawContextTest::::fillText()",
      "967": "DrawContextTest::::fillText()",
      "968": "DrawContextTest::::fillText()",
      "969": "DrawContextTest::::fillText()",
      "970": "DrawContextTest::::fillText()",
      "971": "DrawContextTest::::fillText()",
      "972": "DrawContextTest::::fillText()",
      "973": "DrawContextTest::::fillText()",
      "974": "DrawContextTest::::fillText()",
      "975": "DrawContextTest::::fillText()",
      "976": "DrawContextTest::::fillText()",
      "977": "DrawContextTest::::fillText()",
      "978": "DrawContextTest::::fillText()",
      "979": "DrawContextTest::::fillText()",
      "980": "DrawContextTest::::fillText()",
      "981": "DrawContextTest::::fillText()",
      "982": "DrawContextTest::::fillText()",
      "983": "DrawContextTest::::fillText()",
      "984": "DrawContextTest::::fillText()",
      "985": "DrawContextTest::::fillText()",
      "987": "DrawContextTest::::fillTextDefault()",
      "988": "DrawContextTest::::fillTextDefault()",
      "989": "DrawContextTest::::fillTextDefault()",
      "990": "DrawContextTest::::fillTextDefault()",
      "991": "DrawContextTest::::fillTextDefault()",
      "992": "DrawContextTest::::fillTextDefault()",
      "993": "DrawContextTest::::fillTextDefault()",
      "994": "DrawContextTest::::fillTextDefault()",
      "995": "DrawContextTest::::fillTextDefault()",
      "996": "DrawContextTest::::fillTextDefault()",
      "997": "DrawContextTest::::fillTextDefault()",
      "998": "DrawContextTest::::fillTextDefault()",
      "999": "DrawContextTest::::fillTextDefault()",
      "1000": "DrawContextTest::::fillTextDefault()",
      "1001": "DrawContextTest::::fillTextDefault()",
      "1002": "DrawContextTest::::fillTextDefault()",
      "1003": "DrawContextTest::::fillTextDefault()",
      "1004": "DrawContextTest::::fillTextDefault()",
      "1005": "DrawContextTest::::fillTextDefault()",
      "1006": "DrawContextTest::::fillTextDefault()",
      "1008": "DrawContextTest::::measureText()",
      "1009": "DrawContextTest::::measureText()",
      "1010": "DrawContextTest::::measureText()",
      "1011": "DrawContextTest::::measureText()",
      "1012": "DrawContextTest::::measureText()",
      "1013": "DrawContextTest::::measureText()",
      "1014": "DrawContextTest::::measureText()",
      "1015": "DrawContextTest::::measureText()",
      "1016": "DrawContextTest::::measureText()",
      "1017": "DrawContextTest::::measureText()",
      "1018": "DrawContextTest::::measureText()",
      "1019": "DrawContextTest::::measureText()",
      "1020": "DrawContextTest::::measureText()",
      "1021": "DrawContextTest::::measureText()",
      "1022": "DrawContextTest::::measureText()",
      "1023": "DrawContextTest::::measureText()",
      "1024": "DrawContextTest::::measureText()",
      "1025": "DrawContextTest::::measureText()",
      "1026": "DrawContextTest::::measureText()",
      "1027": "DrawContextTest::::measureText()",
      "1028": "DrawContextTest::::measureText()",
      "1029": "DrawContextTest::::measureText()",
      "1030": "DrawContextTest::::measureText()",
      "1031": "DrawContextTest::::measureText()",
      "1032": "DrawContextTest::::measureText()",
      "1033": "DrawContextTest::::measureText()",
      "1034": "DrawContextTest::::measureText()",
      "1035": "DrawContextTest::::measureText()",
      "1040": "DrawContextTest::::measureTextArea()",
      "1041": "DrawContextTest::::measureTextArea()",
      "1042": "DrawContextTest::::measureTextArea()",
      "1043": "DrawContextTest::::measureTextArea()",
      "1044": "DrawContextTest::::measureTextArea()",
      "1045": "DrawContextTest::::measureTextArea()",
      "1046": "DrawContextTest::::measureTextArea()",
      "1047": "DrawContextTest::::measureTextArea()",
      "1048": "DrawContextTest::::measureTextArea()",
      "1049": "DrawContextTest::::measureTextArea()",
      "1050": "DrawContextTest::::measureTextArea()",
      "1051": "DrawContextTest::::measureTextArea()",
      "1052": "DrawContextTest::::measureTextArea()",
      "1053": "DrawContextTest::::measureTextArea()",
      "1054": "DrawContextTest::::measureTextArea()",
      "1055": "DrawContextTest::::measureTextArea()",
      "1056": "DrawContextTest::::measureTextArea()",
      "1057": "DrawContextTest::::measureTextArea()",
      "1058": "DrawContextTest::::measureTextArea()",
      "1059": "DrawContextTest::::measureTextArea()",
      "1060": "DrawContextTest::::measureTextArea()",
      "1061": "DrawContextTest::::measureTextArea()",
      "1062": "DrawContextTest::::measureTextArea()",
      "1063": "DrawContextTest::::measureTextArea()",
      "1064": "DrawContextTest::::measureTextArea()",
      "1065": "DrawContextTest::::measureTextArea()",
      "1066": "DrawContextTest::::measureTextArea()",
      "1068": "DrawContextTest::::fillTextAllDirection()",
      "1069": "DrawContextTest::::fillTextAllDirection()",
      "1070": "DrawContextTest::::fillTextAllDirection()",
      "1071": "DrawContextTest::::fillTextAllDirection()",
      "1072": "DrawContextTest::::fillTextAllDirection()",
      "1073": "DrawContextTest::::fillTextAllDirection()",
      "1074": "DrawContextTest::::fillTextAllDirection()",
      "1075": "DrawContextTest::::fillTextAllDirection()",
      "1076": "DrawContextTest::::fillTextAllDirection()",
      "1077": "DrawContextTest::::fillTextAllDirection()",
      "1078": "DrawContextTest::::fillTextAllDirection()",
      "1079": "DrawContextTest::::fillTextAllDirection()",
      "1080": "DrawContextTest::::fillTextAllDirection()",
      "1081": "DrawContextTest::::fillTextAllDirection()",
      "1082": "DrawContextTest::::fillTextAllDirection()",
      "1083": "DrawContextTest::::fillTextAllDirection()",
      "1084": "DrawContextTest::::fillTextAllDirection()",
      "1085": "DrawContextTest::::fillTextAllDirection()",
      "1086": "DrawContextTest::::fillTextAllDirection()",
      "1087": "DrawContextTest::::fillTextAllDirection()",
      "1088": "DrawContextTest::::fillTextAllDirection()",
      "1089": "DrawContextTest::::fillTextAllDirection()",
      "1090": "DrawContextTest::::fillTextAllDirection()",
      "1091": "DrawContextTest::::fillTextAllDirection()",
      "1092": "DrawContextTest::::fillTextAllDirection()",
      "1093": "DrawContextTest::::fillTextAllDirection()",
      "1094": "DrawContextTest::::fillTextAllDirection()",
      "1095": "DrawContextTest::::fillTextAllDirection()",
      "1096": "DrawContextTest::::fillTextAllDirection()",
      "1097": "DrawContextTest::::fillTextAllDirection()",
      "1098": "DrawContextTest::::fillTextAllDirection()",
      "1099": "DrawContextTest::::fillTextAllDirection()",
      "1100": "DrawContextTest::::fillTextAllDirection()",
      "1101": "DrawContextTest::::fillTextAllDirection()",
      "1102": "DrawContextTest::::fillTextAllDirection()",
      "1103": "DrawContextTest::::fillTextAllDirection()",
      "1104": "DrawContextTest::::fillTextAllDirection()",
      "1105": "DrawContextTest::::fillTextAllDirection()",
      "1106": "DrawContextTest::::fillTextAllDirection()",
      "1107": "DrawContextTest::::fillTextAllDirection()",
      "1108": "DrawContextTest::::fillTextAllDirection()",
      "1109": "DrawContextTest::::fillTextAllDirection()",
      "1110": "DrawContextTest::::fillTextAllDirection()",
      "1111": "DrawContextTest::::fillTextAllDirection()",
      "1112": "DrawContextTest::::fillTextAllDirection()",
      "1113": "DrawContextTest::::fillTextAllDirection()",
      "1114": "DrawContextTest::::fillTextAllDirection()",
      "1115": "DrawContextTest::::fillTextAllDirection()",
      "1118": "DrawContextTest::::textAlign()",
      "1119": "DrawContextTest::::textAlign()",
      "1120": "DrawContextTest::::textAlign()",
      "1121": "DrawContextTest::::textAlign()",
      "1122": "DrawContextTest::::textAlign()",
      "1123": "DrawContextTest::::textAlign()",
      "1124": "DrawContextTest::::textAlign()",
      "1125": "DrawContextTest::::textAlign()",
      "1126": "DrawContextTest::::textAlign()",
      "1127": "DrawContextTest::::textAlign()",
      "1128": "DrawContextTest::::textAlign()",
      "1129": "DrawContextTest::::textAlign()",
      "1130": "DrawContextTest::::textAlign()",
      "1131": "DrawContextTest::::textAlign()",
      "1132": "DrawContextTest::::textAlign()",
      "1133": "DrawContextTest::::textAlign()",
      "1134": "DrawContextTest::::textAlign()",
      "1135": "DrawContextTest::::textAlign()",
      "1136": "DrawContextTest::::textAlign()",
      "1137": "DrawContextTest::::textAlign()",
      "1138": "DrawContextTest::::textAlign()",
      "1139": "DrawContextTest::::textAlign()",
      "1140": "DrawContextTest::::textAlign()",
      "1141": "DrawContextTest::::textAlign()",
      "1142": "DrawContextTest::::textAlign()",
      "1143": "DrawContextTest::::textAlign()",
      "1144": "DrawContextTest::::textAlign()",
      "1145": "DrawContextTest::::textAlign()",
      "1146": "DrawContextTest::::textAlign()",
      "1147": "DrawContextTest::::textAlign()",
      "1148": "DrawContextTest::::textAlign()",
      "1149": "DrawContextTest::::textAlign()",
      "1150": "DrawContextTest::::textAlign()",
      "1151": "DrawContextTest::::textAlign()",
      "1152": "DrawContextTest::::textAlign()",
      "1153": "DrawContextTest::::textAlign()",
      "1154": "DrawContextTest::::textAlign()",
      "1155": "DrawContextTest::::textAlign()",
      "1156": "DrawContextTest::::textAlign()",
      "1163": "DrawContextTest::::setLineCap()",
      "1164": "DrawContextTest::::setLineCap()",
      "1165": "DrawContextTest::::setLineCap()",
      "1166": "DrawContextTest::::setLineCap()",
      "1167": "DrawContextTest::::setLineCap()",
      "1168": "DrawContextTest::::setLineCap()",
      "1169": "DrawContextTest::::setLineCap()",
      "1170": "DrawContextTest::::setLineCap()",
      "1171": "DrawContextTest::::setLineCap()",
      "1172": "DrawContextTest::::setLineCap()",
      "1173": "DrawContextTest::::setLineCap()",
      "1174": "DrawContextTest::::setLineCap()",
      "1175": "DrawContextTest::::setLineCap()",
      "1176": "DrawContextTest::::setLineCap()",
      "1177": "DrawContextTest::::setLineCap()",
      "1178": "DrawContextTest::::setLineCap()",
      "1179": "DrawContextTest::::setLineCap()",
      "1180": "DrawContextTest::::setLineCap()",
      "1181": "DrawContextTest::::setLineCap()",
      "1182": "DrawContextTest::::setLineCap()",
      "1183": "DrawContextTest::::setLineCap()",
      "1184": "DrawContextTest::::setLineCap()",
      "1185": "DrawContextTest::::setLineCap()",
      "1186": "DrawContextTest::::setLineCap()",
      "1187": "DrawContextTest::::setLineCap()",
      "1188": "DrawContextTest::::setLineCap()",
      "1189": "DrawContextTest::::setLineCap()",
      "1190": "DrawContextTest::::setLineCap()",
      "1191": "DrawContextTest::::setLineCap()",
      "1192": "DrawContextTest::::setLineCap()",
      "1193": "DrawContextTest::::setLineCap()",
      "1194": "DrawContextTest::::setLineCap()",
      "1195": "DrawContextTest::::setLineCap()",
      "1196": "DrawContextTest::::setLineCap()",
      "1197": "DrawContextTest::::setLineCap()",
      "1198": "DrawContextTest::::setLineCap()",
      "1199": "DrawContextTest::::setLineCap()",
      "1206": "DrawContextTest::::setLineJoin()",
      "1207": "DrawContextTest::::setLineJoin()",
      "1208": "DrawContextTest::::setLineJoin()",
      "1209": "DrawContextTest::::setLineJoin()",
      "1210": "DrawContextTest::::setLineJoin()",
      "1211": "DrawContextTest::::setLineJoin()",
      "1212": "DrawContextTest::::setLineJoin()",
      "1213": "DrawContextTest::::setLineJoin()",
      "1214": "DrawContextTest::::setLineJoin()",
      "1215": "DrawContextTest::::setLineJoin()",
      "1216": "DrawContextTest::::setLineJoin()",
      "1217": "DrawContextTest::::setLineJoin()",
      "1218": "DrawContextTest::::setLineJoin()",
      "1219": "DrawContextTest::::setLineJoin()",
      "1220": "DrawContextTest::::setLineJoin()",
      "1221": "DrawContextTest::::setLineJoin()",
      "1222": "DrawContextTest::::setLineJoin()",
      "1223": "DrawContextTest::::setLineJoin()",
      "1224": "DrawContextTest::::setLineJoin()",
      "1225": "DrawContextTest::::setLineJoin()",
      "1226": "DrawContextTest::::setLineJoin()",
      "1227": "DrawContextTest::::setLineJoin()",
      "1228": "DrawContextTest::::setLineJoin()",
      "1229": "DrawContextTest::::setLineJoin()",
      "1230": "DrawContextTest::::setLineJoin()",
      "1231": "DrawContextTest::::setLineJoin()",
      "1232": "DrawContextTest::::setLineJoin()",
      "1233": "DrawContextTest::::setLineJoin()",
      "1234": "DrawContextTest::::setLineJoin()",
      "1235": "DrawContextTest::::setLineJoin()",
      "1236": "DrawContextTest::::setLineJoin()",
      "1237": "DrawContextTest::::setLineJoin()",
      "1238": "DrawContextTest::::setLineJoin()",
      "1239": "DrawContextTest::::setLineJoin()",
      "1240": "DrawContextTest::::setLineJoin()",
      "1241": "DrawContextTest::::setLineJoin()",
      "1242": "DrawContextTest::::setLineJoin()",
      "1243": "DrawContextTest::::setLineJoin()",
      "1244": "DrawContextTest::::setLineJoin()",
      "1245": "DrawContextTest::::setLineJoin()",
      "1253": "DrawContextTest::::setMiterLimit()",
      "1254": "DrawContextTest::::setMiterLimit()",
      "1255": "DrawContextTest::::setMiterLimit()",
      "1256": "DrawContextTest::::setMiterLimit()",
      "1257": "DrawContextTest::::setMiterLimit()",
      "1258": "DrawContextTest::::setMiterLimit()",
      "1259": "DrawContextTest::::setMiterLimit()",
      "1260": "DrawContextTest::::setMiterLimit()",
      "1261": "DrawContextTest::::setMiterLimit()",
      "1262": "DrawContextTest::::setMiterLimit()",
      "1263": "DrawContextTest::::setMiterLimit()",
      "1264": "DrawContextTest::::setMiterLimit()",
      "1265": "DrawContextTest::::setMiterLimit()",
      "1266": "DrawContextTest::::setMiterLimit()",
      "1267": "DrawContextTest::::setMiterLimit()",
      "1268": "DrawContextTest::::setMiterLimit()",
      "1269": "DrawContextTest::::setMiterLimit()",
      "1270": "DrawContextTest::::setMiterLimit()",
      "1271": "DrawContextTest::::setMiterLimit()",
      "1272": "DrawContextTest::::setMiterLimit()",
      "1273": "DrawContextTest::::setMiterLimit()",
      "1274": "DrawContextTest::::setMiterLimit()",
      "1275": "DrawContextTest::::setMiterLimit()",
      "1276": "DrawContextTest::::setMiterLimit()",
      "1277": "DrawContextTest::::setMiterLimit()",
      "1278": "DrawContextTest::::setMiterLimit()",
      "1279": "DrawContextTest::::setMiterLimit()",
      "1280": "DrawContextTest::::setMiterLimit()",
      "1287": "DrawContextTest::::setLineDash()",
      "1288": "DrawContextTest::::setLineDash()",
      "1289": "DrawContextTest::::setLineDash()",
      "1290": "DrawContextTest::::setLineDash()",
      "1291": "DrawContextTest::::setLineDash()",
      "1292": "DrawContextTest::::setLineDash()",
      "1293": "DrawContextTest::::setLineDash()",
      "1294": "DrawContextTest::::setLineDash()",
      "1295": "DrawContextTest::::setLineDash()",
      "1296": "DrawContextTest::::setLineDash()",
      "1297": "DrawContextTest::::setLineDash()",
      "1298": "DrawContextTest::::setLineDash()",
      "1299": "DrawContextTest::::setLineDash()",
      "1300": "DrawContextTest::::setLineDash()",
      "1301": "DrawContextTest::::setLineDash()",
      "1302": "DrawContextTest::::setLineDash()",
      "1303": "DrawContextTest::::setLineDash()",
      "1304": "DrawContextTest::::setLineDash()",
      "1305": "DrawContextTest::::setLineDash()",
      "1306": "DrawContextTest::::setLineDash()",
      "1307": "DrawContextTest::::setLineDash()",
      "1308": "DrawContextTest::::setLineDash()",
      "1309": "DrawContextTest::::setLineDash()",
      "1310": "DrawContextTest::::setLineDash()",
      "1311": "DrawContextTest::::setLineDash()",
      "1312": "DrawContextTest::::setLineDash()",
      "1313": "DrawContextTest::::setLineDash()",
      "1314": "DrawContextTest::::setLineDash()",
      "1315": "DrawContextTest::::setLineDash()",
      "1316": "DrawContextTest::::setLineDash()",
      "1317": "DrawContextTest::::setLineDash()",
      "1318": "DrawContextTest::::setLineDash()",
      "1319": "DrawContextTest::::setLineDash()",
      "1320": "DrawContextTest::::setLineDash()",
      "1321": "DrawContextTest::::setLineDash()",
      "1322": "DrawContextTest::::setLineDash()",
      "1323": "DrawContextTest::::setLineDash()",
      "1324": "DrawContextTest::::setLineDash()",
      "1325": "DrawContextTest::::setLineDash()",
      "1326": "DrawContextTest::::setLineDash()",
      "1327": "DrawContextTest::::setLineDash()",
      "1328": "DrawContextTest::::setLineDash()",
      "1329": "DrawContextTest::::setLineDash()",
      "1335": "DrawContextTest::::testMultiColorSet()",
      "1336": "DrawContextTest::::testMultiColorSet()",
      "1337": "DrawContextTest::::testMultiColorSet()",
      "1338": "DrawContextTest::::testMultiColorSet()",
      "1339": "DrawContextTest::::testMultiColorSet()",
      "1340": "DrawContextTest::::testMultiColorSet()",
      "1341": "DrawContextTest::::testMultiColorSet()",
      "1342": "DrawContextTest::::testMultiColorSet()",
      "1343": "DrawContextTest::::testMultiColorSet()",
      "1344": "DrawContextTest::::testMultiColorSet()",
      "1345": "DrawContextTest::::testMultiColorSet()",
      "1346": "DrawContextTest::::testMultiColorSet()",
      "1347": "DrawContextTest::::testMultiColorSet()",
      "1348": "DrawContextTest::::testMultiColorSet()",
      "1349": "DrawContextTest::::testMultiColorSet()",
      "1350": "DrawContextTest::::testMultiColorSet()",
      "1351": "DrawContextTest::::testMultiColorSet()",
      "1352": "DrawContextTest::::testMultiColorSet()",
      "1353": "DrawContextTest::::testMultiColorSet()",
      "1354": "DrawContextTest::::testMultiColorSet()",
      "1355": "DrawContextTest::::testMultiColorSet()",
      "1356": "DrawContextTest::::testMultiColorSet()",
      "1357": "DrawContextTest::::testMultiColorSet()",
      "1358": "DrawContextTest::::testMultiColorSet()",
      "1359": "DrawContextTest::::testMultiColorSet()",
      "1360": "DrawContextTest::::testMultiColorSet()",
      "1362": "DrawContextTest::::testTransform()",
      "1363": "DrawContextTest::::testTransform()",
      "1364": "DrawContextTest::::testTransform()",
      "1365": "DrawContextTest::::testTransform()",
      "1366": "DrawContextTest::::testTransform()",
      "1367": "DrawContextTest::::testTransform()",
      "1368": "DrawContextTest::::testTransform()",
      "1369": "DrawContextTest::::testTransform()",
      "1370": "DrawContextTest::::testTransform()",
      "1371": "DrawContextTest::::testTransform()",
      "1372": "DrawContextTest::::testTransform()",
      "1373": "DrawContextTest::::testTransform()",
      "1374": "DrawContextTest::::testTransform()",
      "1375": "DrawContextTest::::testTransform()",
      "1376": "DrawContextTest::::testTransform()",
      "1377": "DrawContextTest::::testTransform()",
      "1380": "DrawContextTest::::testCanvas()",
      "1381": "DrawContextTest::::testCanvas()",
      "1382": "DrawContextTest::::testCanvas()",
      "1383": "DrawContextTest::::testCanvas()",
      "1384": "DrawContextTest::::testCanvas()",
      "1385": "DrawContextTest::::testCanvas()",
      "1386": "DrawContextTest::::testCanvas()",
      "1387": "DrawContextTest::::testCanvas()",
      "1388": "DrawContextTest::::testCanvas()",
      "1389": "DrawContextTest::::testCanvas()",
      "1390": "DrawContextTest::::testCanvas()",
      "1391": "DrawContextTest::::testCanvas()",
      "1392": "DrawContextTest::::testCanvas()",
      "1393": "DrawContextTest::::testCanvas()",
      "1394": "DrawContextTest::::testCanvas()",
      "1395": "DrawContextTest::::testCanvas()",
      "1396": "DrawContextTest::::testCanvas()",
      "1397": "DrawContextTest::::testCanvas()",
      "1398": "DrawContextTest::::testCanvas()",
      "1399": "DrawContextTest::::testCanvas()",
      "1400": "DrawContextTest::::testCanvas()",
      "1401": "DrawContextTest::::testCanvas()",
      "1402": "DrawContextTest::::testCanvas()",
      "1403": "DrawContextTest::::testCanvas()"
    },
    "tests": [
      {
        "test_lines": [
          32,
          60
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          729,
          733,
          735,
          736,
          737,
          743,
          744,
          745,
          746,
          747,
          750,
          752,
          756,
          757,
          760,
          761,
          764,
          768,
          773,
          776,
          777,
          778,
          781,
          782,
          788,
          790,
          793,
          795,
          798,
          801,
          802,
          814,
          815,
          818,
          819,
          828,
          831,
          866,
          868,
          869,
          870,
          872,
          873,
          874,
          875,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1457,
          1460,
          1461,
          1468,
          1469,
          1470,
          1472,
          1473,
          1474,
          1475,
          1476,
          1479,
          1482,
          1487,
          1489,
          1490,
          1492,
          1495,
          1496,
          1497,
          1503,
          1504,
          1506,
          1507,
          1513,
          1516,
          1532,
          1533,
          1534,
          1560,
          1561,
          1568,
          1570,
          1571,
          1578,
          1610,
          1611,
          1620
        ]
      },
      {
        "test_lines": [
          66,
          92
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          729,
          733,
          735,
          736,
          737,
          739,
          743,
          744,
          745,
          746,
          747,
          750,
          752,
          756,
          757,
          760,
          761,
          764,
          768,
          773,
          776,
          777,
          778,
          781,
          782,
          788,
          790,
          793,
          795,
          798,
          801,
          802,
          814,
          815,
          818,
          819,
          828,
          831,
          866,
          868,
          869,
          870,
          872,
          873,
          874,
          875,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1457,
          1460,
          1461,
          1468,
          1469,
          1470,
          1472,
          1473,
          1474,
          1475,
          1476,
          1479,
          1482,
          1487,
          1489,
          1490,
          1492,
          1495,
          1496,
          1497,
          1503,
          1504,
          1506,
          1507,
          1513,
          1516,
          1532,
          1533,
          1534,
          1560,
          1561,
          1568,
          1570,
          1571,
          1578,
          1620
        ]
      },
      {
        "test_lines": [
          97,
          121
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          729,
          733,
          735,
          736,
          737,
          739,
          743,
          744,
          745,
          746,
          747,
          750,
          752,
          756,
          760,
          761,
          764,
          768,
          773,
          776,
          777,
          778,
          781,
          782,
          788,
          790,
          793,
          795,
          798,
          801,
          802,
          814,
          815,
          818,
          819,
          828,
          831,
          866,
          868,
          869,
          870,
          872,
          873,
          874,
          875,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1457,
          1460,
          1461,
          1468,
          1469,
          1470,
          1472,
          1473,
          1474,
          1475,
          1476,
          1479,
          1482,
          1487,
          1489,
          1490,
          1492,
          1495,
          1496,
          1497,
          1503,
          1504,
          1506,
          1507,
          1508,
          1620
        ]
      },
      {
        "test_lines": [
          123,
          141
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          423,
          425,
          426,
          427,
          428,
          429,
          430,
          1255,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1414,
          1418,
          1420,
          1425,
          1430,
          1432,
          1433,
          1434,
          1620
        ]
      },
      {
        "test_lines": [
          144,
          163
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          423,
          425,
          426,
          427,
          428,
          429,
          430,
          1224,
          1225,
          1228,
          1231,
          1232,
          1233,
          1235,
          1236,
          1237,
          1238,
          1240,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1414,
          1418,
          1420,
          1425,
          1427,
          1428,
          1429,
          1588,
          1620
        ]
      },
      {
        "test_lines": [
          165,
          185
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          423,
          425,
          426,
          427,
          428,
          429,
          430,
          1224,
          1225,
          1228,
          1231,
          1232,
          1233,
          1235,
          1236,
          1237,
          1238,
          1240,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1414,
          1418,
          1420,
          1425,
          1427,
          1428,
          1429,
          1588,
          1620
        ]
      },
      {
        "test_lines": [
          187,
          206
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          423,
          425,
          426,
          427,
          428,
          429,
          430,
          1224,
          1225,
          1228,
          1231,
          1232,
          1233,
          1235,
          1236,
          1237,
          1238,
          1240,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1414,
          1418,
          1420,
          1425,
          1427,
          1428,
          1429,
          1588,
          1620
        ]
      },
      {
        "test_lines": [
          208,
          231
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          423,
          425,
          426,
          427,
          428,
          429,
          430,
          1224,
          1225,
          1228,
          1231,
          1232,
          1233,
          1235,
          1236,
          1237,
          1238,
          1240,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1414,
          1418,
          1420,
          1425,
          1427,
          1428,
          1429,
          1588,
          1620
        ]
      },
      {
        "test_lines": [
          233,
          256
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          423,
          425,
          426,
          427,
          428,
          429,
          430,
          1209,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1414,
          1418,
          1420,
          1422,
          1423,
          1424,
          1620
        ]
      },
      {
        "test_lines": [
          258,
          276
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          423,
          425,
          426,
          427,
          428,
          429,
          430,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1620
        ]
      },
      {
        "test_lines": [
          278,
          295
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          447,
          449,
          450,
          451,
          452,
          453,
          454,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1620
        ]
      },
      {
        "test_lines": [
          297,
          320
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          197,
          198,
          249,
          252,
          253,
          266,
          269,
          270,
          463,
          467,
          468,
          469,
          470,
          471,
          472,
          916,
          917,
          931,
          992,
          995,
          996,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1620
        ]
      },
      {
        "test_lines": [
          322,
          346
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          197,
          198,
          249,
          252,
          253,
          266,
          269,
          270,
          463,
          467,
          468,
          469,
          470,
          471,
          472,
          916,
          917,
          931,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1620
        ]
      },
      {
        "test_lines": [
          348,
          372
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          401,
          402,
          405,
          406,
          463,
          467,
          468,
          469,
          470,
          471,
          472,
          916,
          917,
          931,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1620
        ]
      },
      {
        "test_lines": [
          374,
          397
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          401,
          402,
          405,
          406,
          447,
          449,
          450,
          451,
          452,
          453,
          454,
          463,
          467,
          468,
          469,
          470,
          471,
          472,
          916,
          917,
          931,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1620
        ]
      },
      {
        "test_lines": [
          399,
          422
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          401,
          402,
          405,
          406,
          423,
          425,
          426,
          427,
          428,
          429,
          430,
          483,
          487,
          488,
          489,
          490,
          491,
          492,
          493,
          957,
          958,
          973,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1620
        ]
      },
      {
        "test_lines": [
          424,
          450
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          197,
          198,
          212,
          215,
          216,
          249,
          252,
          253,
          266,
          269,
          270,
          463,
          467,
          468,
          469,
          470,
          471,
          472,
          483,
          487,
          488,
          489,
          490,
          491,
          492,
          493,
          957,
          958,
          973,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1620
        ]
      },
      {
        "test_lines": [
          452,
          482
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          197,
          198,
          249,
          252,
          253,
          266,
          269,
          270,
          463,
          467,
          468,
          469,
          470,
          471,
          472,
          916,
          917,
          931,
          992,
          995,
          996,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1620
        ]
      },
      {
        "test_lines": [
          484,
          510
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          229,
          233,
          234,
          238,
          401,
          402,
          405,
          406,
          423,
          425,
          426,
          427,
          428,
          429,
          430,
          483,
          487,
          488,
          489,
          490,
          491,
          492,
          493,
          957,
          958,
          973,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1295,
          1296,
          1297,
          1298,
          1300,
          1301,
          1313,
          1314,
          1315,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1620
        ]
      },
      {
        "test_lines": [
          512,
          542
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          229,
          233,
          234,
          236,
          238,
          401,
          402,
          405,
          406,
          423,
          425,
          426,
          427,
          428,
          429,
          430,
          483,
          487,
          488,
          489,
          490,
          491,
          492,
          493,
          519,
          522,
          523,
          524,
          525,
          536,
          537,
          539,
          540,
          541,
          957,
          958,
          973,
          1263,
          1267,
          1270,
          1275,
          1276,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1295,
          1296,
          1297,
          1298,
          1300,
          1301,
          1306,
          1307,
          1311,
          1313,
          1314,
          1315,
          1317,
          1328,
          1331,
          1332,
          1334,
          1337,
          1338,
          1348,
          1350,
          1351,
          1355,
          1356,
          1357,
          1358,
          1359,
          1388,
          1389,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1620
        ]
      },
      {
        "test_lines": [
          544,
          566
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          197,
          198,
          249,
          252,
          253,
          284,
          287,
          288,
          463,
          467,
          468,
          469,
          470,
          471,
          472,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1620
        ]
      },
      {
        "test_lines": [
          568,
          590
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          197,
          198,
          249,
          252,
          253,
          303,
          306,
          307,
          463,
          467,
          468,
          469,
          470,
          471,
          472,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1620
        ]
      },
      {
        "test_lines": [
          592,
          613
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          197,
          198,
          249,
          252,
          253,
          349,
          354,
          355,
          356,
          359,
          360,
          363,
          371,
          387,
          463,
          467,
          468,
          469,
          470,
          471,
          472,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1620
        ]
      },
      {
        "test_lines": [
          616,
          636
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          401,
          402,
          405,
          406,
          463,
          467,
          468,
          469,
          470,
          471,
          472,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1620
        ]
      },
      {
        "test_lines": [
          638,
          657
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          447,
          449,
          450,
          451,
          452,
          453,
          454,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1620
        ]
      },
      {
        "test_lines": [
          659,
          678
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          423,
          425,
          426,
          427,
          428,
          429,
          430,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1620
        ]
      },
      {
        "test_lines": [
          681,
          701
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          663,
          667,
          669,
          670,
          671,
          674,
          675,
          676,
          679,
          680,
          682,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1620
        ]
      },
      {
        "test_lines": [
          704,
          726
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          604,
          608,
          609,
          610,
          612,
          613,
          614,
          616,
          619,
          620,
          621,
          623,
          624,
          663,
          667,
          669,
          670,
          671,
          674,
          675,
          676,
          679,
          680,
          682,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1588,
          1598,
          1620
        ]
      },
      {
        "test_lines": [
          728,
          747
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          641,
          645,
          646,
          647,
          648,
          663,
          667,
          669,
          670,
          671,
          674,
          675,
          676,
          679,
          680,
          682,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1588,
          1620
        ]
      },
      {
        "test_lines": [
          750,
          771
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          519,
          520,
          522,
          523,
          524,
          525,
          663,
          667,
          669,
          670,
          671,
          674,
          675,
          676,
          679,
          680,
          682,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1620
        ]
      },
      {
        "test_lines": [
          773,
          798
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          447,
          449,
          450,
          451,
          452,
          453,
          454,
          504,
          505,
          507,
          508,
          509,
          1263,
          1267,
          1270,
          1275,
          1276,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1620
        ]
      },
      {
        "test_lines": [
          800,
          820
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          423,
          425,
          426,
          427,
          428,
          429,
          430,
          519,
          520,
          522,
          523,
          524,
          525,
          1263,
          1267,
          1270,
          1275,
          1276,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1620
        ]
      },
      {
        "test_lines": [
          822,
          843
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          423,
          425,
          426,
          427,
          428,
          429,
          430,
          536,
          537,
          539,
          540,
          541,
          1263,
          1267,
          1270,
          1275,
          1276,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1620
        ]
      },
      {
        "test_lines": [
          845,
          875
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          423,
          425,
          426,
          427,
          428,
          429,
          430,
          558,
          559,
          561,
          562,
          563,
          957,
          958,
          973,
          1263,
          1267,
          1270,
          1275,
          1276,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1620
        ]
      },
      {
        "test_lines": [
          877,
          906
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          423,
          425,
          426,
          427,
          428,
          429,
          430,
          580,
          581,
          957,
          958,
          973,
          1263,
          1267,
          1270,
          1275,
          1276,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1620
        ]
      },
      {
        "test_lines": [
          908,
          935
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          423,
          425,
          426,
          427,
          428,
          429,
          430,
          957,
          958,
          973,
          1049,
          1051,
          1055,
          1056,
          1263,
          1267,
          1270,
          1271,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1620
        ]
      },
      {
        "test_lines": [
          937,
          960
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          423,
          425,
          426,
          427,
          428,
          429,
          430,
          694,
          695,
          696,
          697,
          698,
          709,
          712,
          713,
          714,
          715,
          716,
          957,
          958,
          973,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1620
        ]
      },
      {
        "test_lines": [
          962,
          985
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          729,
          733,
          735,
          736,
          739,
          743,
          744,
          745,
          746,
          747,
          750,
          752,
          756,
          760,
          761,
          764,
          765,
          768,
          769,
          773,
          776,
          777,
          778,
          785,
          788,
          790,
          791,
          795,
          798,
          801,
          802,
          814,
          815,
          818,
          819,
          828,
          831,
          1015,
          1017,
          1018,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1457,
          1458,
          1620
        ]
      },
      {
        "test_lines": [
          987,
          1006
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          729,
          733,
          735,
          736,
          739,
          743,
          744,
          745,
          746,
          747,
          750,
          752,
          756,
          760,
          761,
          764,
          768,
          773,
          776,
          777,
          778,
          781,
          782,
          788,
          790,
          793,
          795,
          798,
          801,
          802,
          814,
          815,
          818,
          819,
          828,
          831,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1457,
          1458,
          1620
        ]
      },
      {
        "test_lines": [
          1008,
          1035
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          729,
          733,
          735,
          736,
          739,
          743,
          744,
          745,
          746,
          747,
          750,
          752,
          756,
          760,
          761,
          764,
          768,
          773,
          776,
          777,
          778,
          781,
          782,
          788,
          790,
          793,
          795,
          798,
          801,
          802,
          814,
          815,
          818,
          819,
          828,
          831,
          866,
          868,
          869,
          870,
          872,
          873,
          874,
          875,
          1015,
          1017,
          1018,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1457,
          1458,
          1620
        ]
      },
      {
        "test_lines": [
          1040,
          1066
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          729,
          733,
          735,
          736,
          739,
          743,
          744,
          745,
          746,
          747,
          750,
          752,
          756,
          760,
          761,
          764,
          768,
          773,
          776,
          777,
          778,
          781,
          782,
          788,
          790,
          793,
          795,
          798,
          801,
          802,
          814,
          815,
          818,
          819,
          828,
          831,
          887,
          889,
          1015,
          1017,
          1018,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1457,
          1458,
          1620
        ]
      },
      {
        "test_lines": [
          1068,
          1115
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          197,
          198,
          249,
          252,
          253,
          266,
          269,
          270,
          463,
          467,
          468,
          469,
          470,
          471,
          472,
          729,
          733,
          735,
          736,
          739,
          743,
          744,
          745,
          746,
          747,
          750,
          752,
          756,
          760,
          761,
          764,
          765,
          768,
          769,
          773,
          776,
          777,
          778,
          781,
          782,
          785,
          788,
          790,
          791,
          793,
          795,
          798,
          801,
          802,
          814,
          815,
          818,
          819,
          828,
          829,
          831,
          1015,
          1017,
          1018,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1457,
          1458,
          1620
        ]
      },
      {
        "test_lines": [
          1118,
          1156
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          249,
          250,
          252,
          253,
          266,
          269,
          270,
          463,
          467,
          468,
          469,
          470,
          471,
          472,
          729,
          733,
          735,
          736,
          739,
          743,
          744,
          745,
          746,
          747,
          750,
          752,
          756,
          760,
          761,
          764,
          768,
          773,
          776,
          777,
          778,
          781,
          782,
          788,
          790,
          793,
          795,
          798,
          801,
          802,
          814,
          815,
          818,
          819,
          822,
          823,
          825,
          828,
          831,
          850,
          851,
          916,
          917,
          931,
          1015,
          1017,
          1018,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1457,
          1458,
          1620
        ]
      },
      {
        "test_lines": [
          1163,
          1199
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          197,
          198,
          249,
          252,
          253,
          266,
          269,
          270,
          463,
          467,
          468,
          469,
          470,
          471,
          472,
          992,
          995,
          996,
          1069,
          1070,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1620
        ]
      },
      {
        "test_lines": [
          1206,
          1245
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          197,
          198,
          249,
          252,
          253,
          266,
          269,
          270,
          463,
          467,
          468,
          469,
          470,
          471,
          472,
          992,
          995,
          996,
          1093,
          1094,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1620
        ]
      },
      {
        "test_lines": [
          1253,
          1280
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          197,
          198,
          249,
          252,
          253,
          266,
          269,
          270,
          463,
          467,
          468,
          469,
          470,
          471,
          472,
          992,
          995,
          996,
          1093,
          1094,
          1119,
          1120,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1620
        ]
      },
      {
        "test_lines": [
          1287,
          1329
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          197,
          198,
          249,
          252,
          253,
          266,
          269,
          270,
          463,
          467,
          468,
          469,
          470,
          471,
          472,
          992,
          995,
          996,
          1143,
          1149,
          1153,
          1154,
          1155,
          1165,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1620
        ]
      },
      {
        "test_lines": [
          1335,
          1360
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          423,
          425,
          426,
          427,
          428,
          429,
          430,
          957,
          958,
          973,
          1263,
          1267,
          1270,
          1275,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1411,
          1620
        ]
      },
      {
        "test_lines": [
          1362,
          1377
        ],
        "covered_lines": [
          59,
          1348,
          1350,
          1351,
          1355,
          1356,
          1357,
          1358,
          1359,
          1389
        ]
      },
      {
        "test_lines": [
          1380,
          1403
        ],
        "covered_lines": [
          59,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          185,
          186,
          187,
          519,
          522,
          523,
          524,
          525,
          536,
          537,
          539,
          540,
          541,
          694,
          695,
          696,
          697,
          698,
          709,
          712,
          713,
          714,
          715,
          716,
          729,
          733,
          735,
          736,
          737,
          739,
          743,
          744,
          745,
          746,
          747,
          750,
          752,
          756,
          760,
          761,
          764,
          768,
          773,
          776,
          777,
          778,
          781,
          782,
          788,
          790,
          793,
          795,
          798,
          801,
          802,
          814,
          815,
          818,
          819,
          828,
          831,
          1263,
          1267,
          1270,
          1275,
          1276,
          1279,
          1280,
          1281,
          1284,
          1285,
          1286,
          1290,
          1291,
          1294,
          1317,
          1400,
          1403,
          1404,
          1405,
          1406,
          1407,
          1409,
          1411,
          1457,
          1460,
          1461,
          1468,
          1469,
          1470,
          1472,
          1473,
          1474,
          1475,
          1476,
          1479,
          1482,
          1487,
          1489,
          1490,
          1492,
          1495,
          1496,
          1497,
          1503,
          1504,
          1506,
          1507,
          1508,
          1620
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-layout/src/main/java/org/ofdrw/layout/element/canvas/NamedColor.java": {
    "class_content": [
      "package org.ofdrw.layout.element.canvas;\n",
      "\n",
      "import java.awt.*;\n",
      "\n",
      "/**\n",
      " * \u547d\u540d\u7684\u989c\u8272\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2023-4-3 22:52:32\n",
      " */\n",
      "public final class NamedColor {\n",
      "\n",
      "    /**\n",
      "     * \u89e3\u6790\u989c\u8272\u540d \u6216 16\u8fdb\u5236\u989c\u8272 RGB\u989c\u8272 \u5b57\u7b26\u4e32\u4e3aRGB\u53c2\u6570\n",
      "     * <p>\n",
      "     * \u82e5\u989c\u8272\u65e0\u6cd5\u89e3\u6790\u5219\u8fd4\u56denull\n",
      "     * <p>\n",
      "     * \u82e5\u989c\u8272\u53c2\u6570\u5305\u542b\u900f\u660e\u901a\u9053\uff0c\u90a3\u4e2a\u8fd4\u56de\u53c2\u6570\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e3a\u900f\u660e\u5ea6\u503c [0,255] 0\u8868\u793a\u5b8c\u5168\u900f\u660e\uff0c255\u8868\u793a\u5b8c\u5168\u4e0d\u900f\u660e\u3002\n",
      "     *\n",
      "     * @param hex \u989c\u827216\u8fdb\u5236\u503c\u3001\u989c\u8272\u540d\u79f0\n",
      "     * @return RGB\u989c\u8272\u6570\u7ec4\n",
      "     */\n",
      "    public static int[] rgb(String hex) {\n",
      "        if (hex == null || hex.length() == 0) {\n",
      "            return null;\n",
      "        }\n",
      "        hex = hex.toLowerCase().trim();\n",
      "        switch (hex) {\n",
      "            case \"aliceblue\":\n",
      "                return new int[]{240, 248, 255};\n",
      "            case \"antiquewhite\":\n",
      "                return new int[]{250, 235, 215};\n",
      "            case \"aqua\":\n",
      "                return new int[]{0, 255, 255};\n",
      "            case \"aquamarine\":\n",
      "                return new int[]{127, 255, 212};\n",
      "            case \"azure\":\n",
      "                return new int[]{240, 255, 255};\n",
      "            case \"beige\":\n",
      "                return new int[]{245, 245, 220};\n",
      "            case \"bisque\":\n",
      "                return new int[]{255, 228, 196};\n",
      "            case \"black\":\n",
      "                return new int[]{0, 0, 0};\n",
      "            case \"blanchedalmond\":\n",
      "                return new int[]{255, 235, 205};\n",
      "            case \"blue\":\n",
      "                return new int[]{0, 0, 255};\n",
      "            case \"blueviolet\":\n",
      "                return new int[]{138, 43, 226};\n",
      "            case \"brown\":\n",
      "                return new int[]{165, 42, 42};\n",
      "            case \"burlywood\":\n",
      "                return new int[]{222, 184, 135};\n",
      "            case \"cadetblue\":\n",
      "                return new int[]{95, 158, 160};\n",
      "            case \"chartreuse\":\n",
      "                return new int[]{127, 255, 0};\n",
      "            case \"chocolate\":\n",
      "                return new int[]{210, 105, 30};\n",
      "            case \"coral\":\n",
      "                return new int[]{255, 127, 80};\n",
      "            case \"cornflowerblue\":\n",
      "                return new int[]{100, 149, 237};\n",
      "            case \"cornsilk\":\n",
      "                return new int[]{255, 248, 220};\n",
      "            case \"crimson\":\n",
      "                return new int[]{220, 20, 60};\n",
      "            case \"cyan\":\n",
      "                return new int[]{0, 255, 255};\n",
      "            case \"darkblue\":\n",
      "                return new int[]{0, 0, 139};\n",
      "            case \"darkcyan\":\n",
      "                return new int[]{0, 139, 139};\n",
      "            case \"darkgoldenrod\":\n",
      "                return new int[]{184, 134, 11};\n",
      "            case \"darkgray\":\n",
      "                return new int[]{169, 169, 169};\n",
      "            case \"darkgreen\":\n",
      "                return new int[]{0, 100, 0};\n",
      "            case \"darkkhaki\":\n",
      "                return new int[]{189, 183, 107};\n",
      "            case \"darkmagenta\":\n",
      "                return new int[]{139, 0, 139};\n",
      "            case \"darkolivegreen\":\n",
      "                return new int[]{85, 107, 47};\n",
      "            case \"darkorange\":\n",
      "                return new int[]{255, 140, 0};\n",
      "            case \"darkorchid\":\n",
      "                return new int[]{153, 50, 204};\n",
      "            case \"darkred\":\n",
      "                return new int[]{139, 0, 0};\n",
      "            case \"darksalmon\":\n",
      "                return new int[]{233, 150, 122};\n",
      "            case \"darkseagreen\":\n",
      "                return new int[]{143, 188, 143};\n",
      "            case \"darkslateblue\":\n",
      "                return new int[]{72, 61, 139};\n",
      "            case \"darkslategray\":\n",
      "                return new int[]{47, 79, 79};\n",
      "            case \"darkturquoise\":\n",
      "                return new int[]{0, 206, 209};\n",
      "            case \"darkviolet\":\n",
      "                return new int[]{148, 0, 211};\n",
      "            case \"deeppink\":\n",
      "                return new int[]{255, 20, 147};\n",
      "            case \"deepskyblue\":\n",
      "                return new int[]{0, 191, 255};\n",
      "            case \"dimgray\":\n",
      "                return new int[]{105, 105, 105};\n",
      "            case \"dodgerblue\":\n",
      "                return new int[]{30, 144, 255};\n",
      "            case \"feldspar\":\n",
      "                return new int[]{209, 146, 117};\n",
      "            case \"firebrick\":\n",
      "                return new int[]{178, 34, 34};\n",
      "            case \"floralwhite\":\n",
      "                return new int[]{255, 250, 240};\n",
      "            case \"forestgreen\":\n",
      "                return new int[]{34, 139, 34};\n",
      "            case \"fuchsia\":\n",
      "                return new int[]{255, 0, 255};\n",
      "            case \"gainsboro\":\n",
      "                return new int[]{220, 220, 220};\n",
      "            case \"ghostwhite\":\n",
      "                return new int[]{248, 248, 255};\n",
      "            case \"gold\":\n",
      "                return new int[]{255, 215, 0};\n",
      "            case \"goldenrod\":\n",
      "                return new int[]{218, 165, 32};\n",
      "            case \"gray\":\n",
      "                return new int[]{128, 128, 128};\n",
      "            case \"green\":\n",
      "                return new int[]{0, 128, 0};\n",
      "            case \"greenyellow\":\n",
      "                return new int[]{173, 255, 47};\n",
      "            case \"honeydew\":\n",
      "                return new int[]{240, 255, 240};\n",
      "            case \"hotpink\":\n",
      "                return new int[]{255, 105, 180};\n",
      "            case \"indianred\":\n",
      "                return new int[]{205, 92, 92};\n",
      "            case \"indigo\":\n",
      "                return new int[]{75, 0, 130};\n",
      "            case \"ivory\":\n",
      "                return new int[]{255, 255, 240};\n",
      "            case \"khaki\":\n",
      "                return new int[]{240, 230, 140};\n",
      "            case \"lavender\":\n",
      "                return new int[]{230, 230, 250};\n",
      "            case \"lavenderblush\":\n",
      "                return new int[]{255, 240, 245};\n",
      "            case \"lawngreen\":\n",
      "                return new int[]{124, 252, 0};\n",
      "            case \"lemonchiffon\":\n",
      "                return new int[]{255, 250, 205};\n",
      "            case \"lightblue\":\n",
      "                return new int[]{173, 216, 230};\n",
      "            case \"lightcoral\":\n",
      "                return new int[]{240, 128, 128};\n",
      "            case \"lightcyan\":\n",
      "                return new int[]{224, 255, 255};\n",
      "            case \"lightgoldenrodyellow\":\n",
      "                return new int[]{250, 250, 210};\n",
      "            case \"lightgrey\":\n",
      "                return new int[]{211, 211, 211};\n",
      "            case \"lightgreen\":\n",
      "                return new int[]{144, 238, 144};\n",
      "            case \"lightpink\":\n",
      "                return new int[]{255, 182, 193};\n",
      "            case \"lightsalmon\":\n",
      "                return new int[]{255, 160, 122};\n",
      "            case \"lightseagreen\":\n",
      "                return new int[]{32, 178, 170};\n",
      "            case \"lightskyblue\":\n",
      "                return new int[]{135, 206, 250};\n",
      "            case \"lightslateblue\":\n",
      "                return new int[]{132, 112, 255};\n",
      "            case \"lightslategray\":\n",
      "                return new int[]{119, 136, 153};\n",
      "            case \"lightsteelblue\":\n",
      "                return new int[]{176, 196, 222};\n",
      "            case \"lightyellow\":\n",
      "                return new int[]{255, 255, 224};\n",
      "            case \"lime\":\n",
      "                return new int[]{0, 255, 0};\n",
      "            case \"limegreen\":\n",
      "                return new int[]{50, 205, 50};\n",
      "            case \"linen\":\n",
      "                return new int[]{250, 240, 230};\n",
      "            case \"magenta\":\n",
      "                return new int[]{255, 0, 255};\n",
      "            case \"maroon\":\n",
      "                return new int[]{128, 0, 0};\n",
      "            case \"mediumaquamarine\":\n",
      "                return new int[]{102, 205, 170};\n",
      "            case \"mediumblue\":\n",
      "                return new int[]{0, 0, 205};\n",
      "            case \"mediumorchid\":\n",
      "                return new int[]{186, 85, 211};\n",
      "            case \"mediumpurple\":\n",
      "                return new int[]{147, 112, 216};\n",
      "            case \"mediumseagreen\":\n",
      "                return new int[]{60, 179, 113};\n",
      "            case \"mediumslateblue\":\n",
      "                return new int[]{123, 104, 238};\n",
      "            case \"mediumspringgreen\":\n",
      "                return new int[]{0, 250, 154};\n",
      "            case \"mediumturquoise\":\n",
      "                return new int[]{72, 209, 204};\n",
      "            case \"mediumvioletred\":\n",
      "                return new int[]{199, 21, 133};\n",
      "            case \"midnightblue\":\n",
      "                return new int[]{25, 25, 112};\n",
      "            case \"mintcream\":\n",
      "                return new int[]{245, 255, 250};\n",
      "            case \"mistyrose\":\n",
      "                return new int[]{255, 228, 225};\n",
      "            case \"moccasin\":\n",
      "                return new int[]{255, 228, 181};\n",
      "            case \"navajowhite\":\n",
      "                return new int[]{255, 222, 173};\n",
      "            case \"navy\":\n",
      "                return new int[]{0, 0, 128};\n",
      "            case \"oldlace\":\n",
      "                return new int[]{253, 245, 230};\n",
      "            case \"olive\":\n",
      "                return new int[]{128, 128, 0};\n",
      "            case \"olivedrab\":\n",
      "                return new int[]{107, 142, 35};\n",
      "            case \"orange\":\n",
      "                return new int[]{255, 165, 0};\n",
      "            case \"orangered\":\n",
      "                return new int[]{255, 69, 0};\n",
      "            case \"orchid\":\n",
      "                return new int[]{218, 112, 214};\n",
      "            case \"palegoldenrod\":\n",
      "                return new int[]{238, 232, 170};\n",
      "            case \"palegreen\":\n",
      "                return new int[]{152, 251, 152};\n",
      "            case \"paleturquoise\":\n",
      "                return new int[]{175, 238, 238};\n",
      "            case \"palevioletred\":\n",
      "                return new int[]{216, 112, 147};\n",
      "            case \"papayawhip\":\n",
      "                return new int[]{255, 239, 213};\n",
      "            case \"peachpuff\":\n",
      "                return new int[]{255, 218, 185};\n",
      "            case \"peru\":\n",
      "                return new int[]{205, 133, 63};\n",
      "            case \"pink\":\n",
      "                return new int[]{255, 192, 203};\n",
      "            case \"plum\":\n",
      "                return new int[]{221, 160, 221};\n",
      "            case \"powderblue\":\n",
      "                return new int[]{176, 224, 230};\n",
      "            case \"purple\":\n",
      "                return new int[]{128, 0, 128};\n",
      "            case \"red\":\n",
      "                return new int[]{255, 0, 0};\n",
      "            case \"rosybrown\":\n",
      "                return new int[]{188, 143, 143};\n",
      "            case \"royalblue\":\n",
      "                return new int[]{65, 105, 225};\n",
      "            case \"saddlebrown\":\n",
      "                return new int[]{139, 69, 19};\n",
      "            case \"salmon\":\n",
      "                return new int[]{250, 128, 114};\n",
      "            case \"sandybrown\":\n",
      "                return new int[]{244, 164, 96};\n",
      "            case \"seagreen\":\n",
      "                return new int[]{46, 139, 87};\n",
      "            case \"seashell\":\n",
      "                return new int[]{255, 245, 238};\n",
      "            case \"sienna\":\n",
      "                return new int[]{160, 82, 45};\n",
      "            case \"silver\":\n",
      "                return new int[]{192, 192, 192};\n",
      "            case \"skyblue\":\n",
      "                return new int[]{135, 206, 235};\n",
      "            case \"slateblue\":\n",
      "                return new int[]{106, 90, 205};\n",
      "            case \"slategray\":\n",
      "                return new int[]{112, 128, 144};\n",
      "            case \"snow\":\n",
      "                return new int[]{255, 250, 250};\n",
      "            case \"springgreen\":\n",
      "                return new int[]{0, 255, 127};\n",
      "            case \"steelblue\":\n",
      "                return new int[]{70, 130, 180};\n",
      "            case \"tan\":\n",
      "                return new int[]{210, 180, 140};\n",
      "            case \"teal\":\n",
      "                return new int[]{0, 128, 128};\n",
      "            case \"thistle\":\n",
      "                return new int[]{216, 191, 216};\n",
      "            case \"tomato\":\n",
      "                return new int[]{255, 99, 71};\n",
      "            case \"turquoise\":\n",
      "                return new int[]{64, 224, 208};\n",
      "            case \"violet\":\n",
      "                return new int[]{238, 130, 238};\n",
      "            case \"violetred\":\n",
      "                return new int[]{208, 32, 144};\n",
      "            case \"wheat\":\n",
      "                return new int[]{245, 222, 179};\n",
      "            case \"white\":\n",
      "                return new int[]{255, 255, 255};\n",
      "            case \"whitesmoke\":\n",
      "                return new int[]{245, 245, 245};\n",
      "            case \"yellow\":\n",
      "                return new int[]{255, 255, 0};\n",
      "            case \"yellowgreen\":\n",
      "                return new int[]{154, 205, 50};\n",
      "        }\n",
      "\n",
      "        // \u5982\u679c\u662f #xxx \u683c\u5f0f\u7684\u989c\u8272\u503c\uff0c\u8f6c\u6362\u4e3a #xxxxxx \u683c\u5f0f\n",
      "        if (hex.charAt(0) == '#' && hex.length() == 4) {\n",
      "            hex = String.format(\n",
      "                    \"#%c%c%c%c%c%c\",\n",
      "                    hex.charAt(1), hex.charAt(1),\n",
      "                    hex.charAt(2), hex.charAt(2),\n",
      "                    hex.charAt(3), hex.charAt(3));\n",
      "        }\n",
      "        // \u82e5\u662f rgb(x,x,x) \u683c\u5f0f\u7684\u989c\u8272\u503c\uff0c\u8fd4\u56de\u5bf9\u5e94\u7684 int \u6570\u7ec4\n",
      "        if (hex.startsWith(\"rgb(\") && hex.endsWith(\")\")) {\n",
      "            String[] rgb = hex.substring(4, hex.length() - 1).split(\",\");\n",
      "            return new int[]{\n",
      "                    Integer.parseInt(rgb[0].trim()),\n",
      "                    Integer.parseInt(rgb[1].trim()),\n",
      "                    Integer.parseInt(rgb[2].trim())\n",
      "            };\n",
      "        }\n",
      "        // \u82e5\u662f rgba(x,x,x,x) \u683c\u5f0f\u7684\u989c\u8272\u503c\uff0c\u8fd4\u56de\u5bf9\u5e94\u7684 int \u6570\u7ec4\n",
      "        if (hex.startsWith(\"rgba(\") && hex.endsWith(\")\")) {\n",
      "            String[] rgba = hex.substring(5, hex.length() - 1).split(\",\");\n",
      "            return new int[]{\n",
      "                    Integer.parseInt(rgba[0].trim()),\n",
      "                    Integer.parseInt(rgba[1].trim()),\n",
      "                    Integer.parseInt(rgba[2].trim()),\n",
      "                    (int) (255 * Double.parseDouble(rgba[3]))\n",
      "            };\n",
      "        }\n",
      "\n",
      "        // \u5c1d\u8bd5\u89e3\u6790 #xxxxxx \u683c\u5f0f\u7684\u989c\u8272\u503c\n",
      "        try {\n",
      "            Color c = Color.decode(hex);\n",
      "            return new int[]{c.getRed(), c.getGreen(), c.getBlue()};\n",
      "        } catch (Exception e) {\n",
      "            // \u65e0\u6cd5\u89e3\u6790\u65f6\u8fd4\u56de\u9ed1\u8272\n",
      "            return null;\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.layout.element.canvas;\n",
      "\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n",
      "\n",
      "class NamedColorTest {\n",
      "\n",
      "    @Test\n",
      "    void rgb() {\n",
      "        int[] rgb = NamedColor.rgb(\"blue\");\n",
      "        assertArrayEquals(new int[]{0, 0, 255}, rgb);\n",
      "        rgb = NamedColor.rgb(\"#FF00FF\");\n",
      "        assertArrayEquals(new int[]{255, 0, 255}, rgb);\n",
      "        rgb = NamedColor.rgb(\"#FFF\");\n",
      "        assertArrayEquals(new int[]{255, 255, 255}, rgb);\n",
      "\n",
      "        rgb = NamedColor.rgb(\"rgb( 255, 255, 255  )\");\n",
      "        assertArrayEquals(new int[]{255, 255, 255}, rgb);\n",
      "\n",
      "        rgb = NamedColor.rgb(\"rgba( 255, 255, 255, 0.1  )\");\n",
      "        assertArrayEquals(new int[]{255, 255, 255, 25}, rgb);\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "NamedColor::::rgb(java.lang.String)": [
        23,
        353
      ]
    },
    "test_method_lines_dic": {
      "NamedColorTest::::rgb()": [
        9,
        23
      ]
    },
    "reverse_method_lines_dic": {
      "23": "NamedColor::::rgb(java.lang.String)",
      "24": "NamedColor::::rgb(java.lang.String)",
      "25": "NamedColor::::rgb(java.lang.String)",
      "26": "NamedColor::::rgb(java.lang.String)",
      "27": "NamedColor::::rgb(java.lang.String)",
      "28": "NamedColor::::rgb(java.lang.String)",
      "29": "NamedColor::::rgb(java.lang.String)",
      "30": "NamedColor::::rgb(java.lang.String)",
      "31": "NamedColor::::rgb(java.lang.String)",
      "32": "NamedColor::::rgb(java.lang.String)",
      "33": "NamedColor::::rgb(java.lang.String)",
      "34": "NamedColor::::rgb(java.lang.String)",
      "35": "NamedColor::::rgb(java.lang.String)",
      "36": "NamedColor::::rgb(java.lang.String)",
      "37": "NamedColor::::rgb(java.lang.String)",
      "38": "NamedColor::::rgb(java.lang.String)",
      "39": "NamedColor::::rgb(java.lang.String)",
      "40": "NamedColor::::rgb(java.lang.String)",
      "41": "NamedColor::::rgb(java.lang.String)",
      "42": "NamedColor::::rgb(java.lang.String)",
      "43": "NamedColor::::rgb(java.lang.String)",
      "44": "NamedColor::::rgb(java.lang.String)",
      "45": "NamedColor::::rgb(java.lang.String)",
      "46": "NamedColor::::rgb(java.lang.String)",
      "47": "NamedColor::::rgb(java.lang.String)",
      "48": "NamedColor::::rgb(java.lang.String)",
      "49": "NamedColor::::rgb(java.lang.String)",
      "50": "NamedColor::::rgb(java.lang.String)",
      "51": "NamedColor::::rgb(java.lang.String)",
      "52": "NamedColor::::rgb(java.lang.String)",
      "53": "NamedColor::::rgb(java.lang.String)",
      "54": "NamedColor::::rgb(java.lang.String)",
      "55": "NamedColor::::rgb(java.lang.String)",
      "56": "NamedColor::::rgb(java.lang.String)",
      "57": "NamedColor::::rgb(java.lang.String)",
      "58": "NamedColor::::rgb(java.lang.String)",
      "59": "NamedColor::::rgb(java.lang.String)",
      "60": "NamedColor::::rgb(java.lang.String)",
      "61": "NamedColor::::rgb(java.lang.String)",
      "62": "NamedColor::::rgb(java.lang.String)",
      "63": "NamedColor::::rgb(java.lang.String)",
      "64": "NamedColor::::rgb(java.lang.String)",
      "65": "NamedColor::::rgb(java.lang.String)",
      "66": "NamedColor::::rgb(java.lang.String)",
      "67": "NamedColor::::rgb(java.lang.String)",
      "68": "NamedColor::::rgb(java.lang.String)",
      "69": "NamedColor::::rgb(java.lang.String)",
      "70": "NamedColor::::rgb(java.lang.String)",
      "71": "NamedColor::::rgb(java.lang.String)",
      "72": "NamedColor::::rgb(java.lang.String)",
      "73": "NamedColor::::rgb(java.lang.String)",
      "74": "NamedColor::::rgb(java.lang.String)",
      "75": "NamedColor::::rgb(java.lang.String)",
      "76": "NamedColor::::rgb(java.lang.String)",
      "77": "NamedColor::::rgb(java.lang.String)",
      "78": "NamedColor::::rgb(java.lang.String)",
      "79": "NamedColor::::rgb(java.lang.String)",
      "80": "NamedColor::::rgb(java.lang.String)",
      "81": "NamedColor::::rgb(java.lang.String)",
      "82": "NamedColor::::rgb(java.lang.String)",
      "83": "NamedColor::::rgb(java.lang.String)",
      "84": "NamedColor::::rgb(java.lang.String)",
      "85": "NamedColor::::rgb(java.lang.String)",
      "86": "NamedColor::::rgb(java.lang.String)",
      "87": "NamedColor::::rgb(java.lang.String)",
      "88": "NamedColor::::rgb(java.lang.String)",
      "89": "NamedColor::::rgb(java.lang.String)",
      "90": "NamedColor::::rgb(java.lang.String)",
      "91": "NamedColor::::rgb(java.lang.String)",
      "92": "NamedColor::::rgb(java.lang.String)",
      "93": "NamedColor::::rgb(java.lang.String)",
      "94": "NamedColor::::rgb(java.lang.String)",
      "95": "NamedColor::::rgb(java.lang.String)",
      "96": "NamedColor::::rgb(java.lang.String)",
      "97": "NamedColor::::rgb(java.lang.String)",
      "98": "NamedColor::::rgb(java.lang.String)",
      "99": "NamedColor::::rgb(java.lang.String)",
      "100": "NamedColor::::rgb(java.lang.String)",
      "101": "NamedColor::::rgb(java.lang.String)",
      "102": "NamedColor::::rgb(java.lang.String)",
      "103": "NamedColor::::rgb(java.lang.String)",
      "104": "NamedColor::::rgb(java.lang.String)",
      "105": "NamedColor::::rgb(java.lang.String)",
      "106": "NamedColor::::rgb(java.lang.String)",
      "107": "NamedColor::::rgb(java.lang.String)",
      "108": "NamedColor::::rgb(java.lang.String)",
      "109": "NamedColor::::rgb(java.lang.String)",
      "110": "NamedColor::::rgb(java.lang.String)",
      "111": "NamedColor::::rgb(java.lang.String)",
      "112": "NamedColor::::rgb(java.lang.String)",
      "113": "NamedColor::::rgb(java.lang.String)",
      "114": "NamedColor::::rgb(java.lang.String)",
      "115": "NamedColor::::rgb(java.lang.String)",
      "116": "NamedColor::::rgb(java.lang.String)",
      "117": "NamedColor::::rgb(java.lang.String)",
      "118": "NamedColor::::rgb(java.lang.String)",
      "119": "NamedColor::::rgb(java.lang.String)",
      "120": "NamedColor::::rgb(java.lang.String)",
      "121": "NamedColor::::rgb(java.lang.String)",
      "122": "NamedColor::::rgb(java.lang.String)",
      "123": "NamedColor::::rgb(java.lang.String)",
      "124": "NamedColor::::rgb(java.lang.String)",
      "125": "NamedColor::::rgb(java.lang.String)",
      "126": "NamedColor::::rgb(java.lang.String)",
      "127": "NamedColor::::rgb(java.lang.String)",
      "128": "NamedColor::::rgb(java.lang.String)",
      "129": "NamedColor::::rgb(java.lang.String)",
      "130": "NamedColor::::rgb(java.lang.String)",
      "131": "NamedColor::::rgb(java.lang.String)",
      "132": "NamedColor::::rgb(java.lang.String)",
      "133": "NamedColor::::rgb(java.lang.String)",
      "134": "NamedColor::::rgb(java.lang.String)",
      "135": "NamedColor::::rgb(java.lang.String)",
      "136": "NamedColor::::rgb(java.lang.String)",
      "137": "NamedColor::::rgb(java.lang.String)",
      "138": "NamedColor::::rgb(java.lang.String)",
      "139": "NamedColor::::rgb(java.lang.String)",
      "140": "NamedColor::::rgb(java.lang.String)",
      "141": "NamedColor::::rgb(java.lang.String)",
      "142": "NamedColor::::rgb(java.lang.String)",
      "143": "NamedColor::::rgb(java.lang.String)",
      "144": "NamedColor::::rgb(java.lang.String)",
      "145": "NamedColor::::rgb(java.lang.String)",
      "146": "NamedColor::::rgb(java.lang.String)",
      "147": "NamedColor::::rgb(java.lang.String)",
      "148": "NamedColor::::rgb(java.lang.String)",
      "149": "NamedColor::::rgb(java.lang.String)",
      "150": "NamedColor::::rgb(java.lang.String)",
      "151": "NamedColor::::rgb(java.lang.String)",
      "152": "NamedColor::::rgb(java.lang.String)",
      "153": "NamedColor::::rgb(java.lang.String)",
      "154": "NamedColor::::rgb(java.lang.String)",
      "155": "NamedColor::::rgb(java.lang.String)",
      "156": "NamedColor::::rgb(java.lang.String)",
      "157": "NamedColor::::rgb(java.lang.String)",
      "158": "NamedColor::::rgb(java.lang.String)",
      "159": "NamedColor::::rgb(java.lang.String)",
      "160": "NamedColor::::rgb(java.lang.String)",
      "161": "NamedColor::::rgb(java.lang.String)",
      "162": "NamedColor::::rgb(java.lang.String)",
      "163": "NamedColor::::rgb(java.lang.String)",
      "164": "NamedColor::::rgb(java.lang.String)",
      "165": "NamedColor::::rgb(java.lang.String)",
      "166": "NamedColor::::rgb(java.lang.String)",
      "167": "NamedColor::::rgb(java.lang.String)",
      "168": "NamedColor::::rgb(java.lang.String)",
      "169": "NamedColor::::rgb(java.lang.String)",
      "170": "NamedColor::::rgb(java.lang.String)",
      "171": "NamedColor::::rgb(java.lang.String)",
      "172": "NamedColor::::rgb(java.lang.String)",
      "173": "NamedColor::::rgb(java.lang.String)",
      "174": "NamedColor::::rgb(java.lang.String)",
      "175": "NamedColor::::rgb(java.lang.String)",
      "176": "NamedColor::::rgb(java.lang.String)",
      "177": "NamedColor::::rgb(java.lang.String)",
      "178": "NamedColor::::rgb(java.lang.String)",
      "179": "NamedColor::::rgb(java.lang.String)",
      "180": "NamedColor::::rgb(java.lang.String)",
      "181": "NamedColor::::rgb(java.lang.String)",
      "182": "NamedColor::::rgb(java.lang.String)",
      "183": "NamedColor::::rgb(java.lang.String)",
      "184": "NamedColor::::rgb(java.lang.String)",
      "185": "NamedColor::::rgb(java.lang.String)",
      "186": "NamedColor::::rgb(java.lang.String)",
      "187": "NamedColor::::rgb(java.lang.String)",
      "188": "NamedColor::::rgb(java.lang.String)",
      "189": "NamedColor::::rgb(java.lang.String)",
      "190": "NamedColor::::rgb(java.lang.String)",
      "191": "NamedColor::::rgb(java.lang.String)",
      "192": "NamedColor::::rgb(java.lang.String)",
      "193": "NamedColor::::rgb(java.lang.String)",
      "194": "NamedColor::::rgb(java.lang.String)",
      "195": "NamedColor::::rgb(java.lang.String)",
      "196": "NamedColor::::rgb(java.lang.String)",
      "197": "NamedColor::::rgb(java.lang.String)",
      "198": "NamedColor::::rgb(java.lang.String)",
      "199": "NamedColor::::rgb(java.lang.String)",
      "200": "NamedColor::::rgb(java.lang.String)",
      "201": "NamedColor::::rgb(java.lang.String)",
      "202": "NamedColor::::rgb(java.lang.String)",
      "203": "NamedColor::::rgb(java.lang.String)",
      "204": "NamedColor::::rgb(java.lang.String)",
      "205": "NamedColor::::rgb(java.lang.String)",
      "206": "NamedColor::::rgb(java.lang.String)",
      "207": "NamedColor::::rgb(java.lang.String)",
      "208": "NamedColor::::rgb(java.lang.String)",
      "209": "NamedColor::::rgb(java.lang.String)",
      "210": "NamedColor::::rgb(java.lang.String)",
      "211": "NamedColor::::rgb(java.lang.String)",
      "212": "NamedColor::::rgb(java.lang.String)",
      "213": "NamedColor::::rgb(java.lang.String)",
      "214": "NamedColor::::rgb(java.lang.String)",
      "215": "NamedColor::::rgb(java.lang.String)",
      "216": "NamedColor::::rgb(java.lang.String)",
      "217": "NamedColor::::rgb(java.lang.String)",
      "218": "NamedColor::::rgb(java.lang.String)",
      "219": "NamedColor::::rgb(java.lang.String)",
      "220": "NamedColor::::rgb(java.lang.String)",
      "221": "NamedColor::::rgb(java.lang.String)",
      "222": "NamedColor::::rgb(java.lang.String)",
      "223": "NamedColor::::rgb(java.lang.String)",
      "224": "NamedColor::::rgb(java.lang.String)",
      "225": "NamedColor::::rgb(java.lang.String)",
      "226": "NamedColor::::rgb(java.lang.String)",
      "227": "NamedColor::::rgb(java.lang.String)",
      "228": "NamedColor::::rgb(java.lang.String)",
      "229": "NamedColor::::rgb(java.lang.String)",
      "230": "NamedColor::::rgb(java.lang.String)",
      "231": "NamedColor::::rgb(java.lang.String)",
      "232": "NamedColor::::rgb(java.lang.String)",
      "233": "NamedColor::::rgb(java.lang.String)",
      "234": "NamedColor::::rgb(java.lang.String)",
      "235": "NamedColor::::rgb(java.lang.String)",
      "236": "NamedColor::::rgb(java.lang.String)",
      "237": "NamedColor::::rgb(java.lang.String)",
      "238": "NamedColor::::rgb(java.lang.String)",
      "239": "NamedColor::::rgb(java.lang.String)",
      "240": "NamedColor::::rgb(java.lang.String)",
      "241": "NamedColor::::rgb(java.lang.String)",
      "242": "NamedColor::::rgb(java.lang.String)",
      "243": "NamedColor::::rgb(java.lang.String)",
      "244": "NamedColor::::rgb(java.lang.String)",
      "245": "NamedColor::::rgb(java.lang.String)",
      "246": "NamedColor::::rgb(java.lang.String)",
      "247": "NamedColor::::rgb(java.lang.String)",
      "248": "NamedColor::::rgb(java.lang.String)",
      "249": "NamedColor::::rgb(java.lang.String)",
      "250": "NamedColor::::rgb(java.lang.String)",
      "251": "NamedColor::::rgb(java.lang.String)",
      "252": "NamedColor::::rgb(java.lang.String)",
      "253": "NamedColor::::rgb(java.lang.String)",
      "254": "NamedColor::::rgb(java.lang.String)",
      "255": "NamedColor::::rgb(java.lang.String)",
      "256": "NamedColor::::rgb(java.lang.String)",
      "257": "NamedColor::::rgb(java.lang.String)",
      "258": "NamedColor::::rgb(java.lang.String)",
      "259": "NamedColor::::rgb(java.lang.String)",
      "260": "NamedColor::::rgb(java.lang.String)",
      "261": "NamedColor::::rgb(java.lang.String)",
      "262": "NamedColor::::rgb(java.lang.String)",
      "263": "NamedColor::::rgb(java.lang.String)",
      "264": "NamedColor::::rgb(java.lang.String)",
      "265": "NamedColor::::rgb(java.lang.String)",
      "266": "NamedColor::::rgb(java.lang.String)",
      "267": "NamedColor::::rgb(java.lang.String)",
      "268": "NamedColor::::rgb(java.lang.String)",
      "269": "NamedColor::::rgb(java.lang.String)",
      "270": "NamedColor::::rgb(java.lang.String)",
      "271": "NamedColor::::rgb(java.lang.String)",
      "272": "NamedColor::::rgb(java.lang.String)",
      "273": "NamedColor::::rgb(java.lang.String)",
      "274": "NamedColor::::rgb(java.lang.String)",
      "275": "NamedColor::::rgb(java.lang.String)",
      "276": "NamedColor::::rgb(java.lang.String)",
      "277": "NamedColor::::rgb(java.lang.String)",
      "278": "NamedColor::::rgb(java.lang.String)",
      "279": "NamedColor::::rgb(java.lang.String)",
      "280": "NamedColor::::rgb(java.lang.String)",
      "281": "NamedColor::::rgb(java.lang.String)",
      "282": "NamedColor::::rgb(java.lang.String)",
      "283": "NamedColor::::rgb(java.lang.String)",
      "284": "NamedColor::::rgb(java.lang.String)",
      "285": "NamedColor::::rgb(java.lang.String)",
      "286": "NamedColor::::rgb(java.lang.String)",
      "287": "NamedColor::::rgb(java.lang.String)",
      "288": "NamedColor::::rgb(java.lang.String)",
      "289": "NamedColor::::rgb(java.lang.String)",
      "290": "NamedColor::::rgb(java.lang.String)",
      "291": "NamedColor::::rgb(java.lang.String)",
      "292": "NamedColor::::rgb(java.lang.String)",
      "293": "NamedColor::::rgb(java.lang.String)",
      "294": "NamedColor::::rgb(java.lang.String)",
      "295": "NamedColor::::rgb(java.lang.String)",
      "296": "NamedColor::::rgb(java.lang.String)",
      "297": "NamedColor::::rgb(java.lang.String)",
      "298": "NamedColor::::rgb(java.lang.String)",
      "299": "NamedColor::::rgb(java.lang.String)",
      "300": "NamedColor::::rgb(java.lang.String)",
      "301": "NamedColor::::rgb(java.lang.String)",
      "302": "NamedColor::::rgb(java.lang.String)",
      "303": "NamedColor::::rgb(java.lang.String)",
      "304": "NamedColor::::rgb(java.lang.String)",
      "305": "NamedColor::::rgb(java.lang.String)",
      "306": "NamedColor::::rgb(java.lang.String)",
      "307": "NamedColor::::rgb(java.lang.String)",
      "308": "NamedColor::::rgb(java.lang.String)",
      "309": "NamedColor::::rgb(java.lang.String)",
      "310": "NamedColor::::rgb(java.lang.String)",
      "311": "NamedColor::::rgb(java.lang.String)",
      "312": "NamedColor::::rgb(java.lang.String)",
      "313": "NamedColor::::rgb(java.lang.String)",
      "314": "NamedColor::::rgb(java.lang.String)",
      "315": "NamedColor::::rgb(java.lang.String)",
      "316": "NamedColor::::rgb(java.lang.String)",
      "317": "NamedColor::::rgb(java.lang.String)",
      "318": "NamedColor::::rgb(java.lang.String)",
      "319": "NamedColor::::rgb(java.lang.String)",
      "320": "NamedColor::::rgb(java.lang.String)",
      "321": "NamedColor::::rgb(java.lang.String)",
      "322": "NamedColor::::rgb(java.lang.String)",
      "323": "NamedColor::::rgb(java.lang.String)",
      "324": "NamedColor::::rgb(java.lang.String)",
      "325": "NamedColor::::rgb(java.lang.String)",
      "326": "NamedColor::::rgb(java.lang.String)",
      "327": "NamedColor::::rgb(java.lang.String)",
      "328": "NamedColor::::rgb(java.lang.String)",
      "329": "NamedColor::::rgb(java.lang.String)",
      "330": "NamedColor::::rgb(java.lang.String)",
      "331": "NamedColor::::rgb(java.lang.String)",
      "332": "NamedColor::::rgb(java.lang.String)",
      "333": "NamedColor::::rgb(java.lang.String)",
      "334": "NamedColor::::rgb(java.lang.String)",
      "335": "NamedColor::::rgb(java.lang.String)",
      "336": "NamedColor::::rgb(java.lang.String)",
      "337": "NamedColor::::rgb(java.lang.String)",
      "338": "NamedColor::::rgb(java.lang.String)",
      "339": "NamedColor::::rgb(java.lang.String)",
      "340": "NamedColor::::rgb(java.lang.String)",
      "341": "NamedColor::::rgb(java.lang.String)",
      "342": "NamedColor::::rgb(java.lang.String)",
      "343": "NamedColor::::rgb(java.lang.String)",
      "344": "NamedColor::::rgb(java.lang.String)",
      "345": "NamedColor::::rgb(java.lang.String)",
      "346": "NamedColor::::rgb(java.lang.String)",
      "347": "NamedColor::::rgb(java.lang.String)",
      "348": "NamedColor::::rgb(java.lang.String)",
      "349": "NamedColor::::rgb(java.lang.String)",
      "350": "NamedColor::::rgb(java.lang.String)",
      "351": "NamedColor::::rgb(java.lang.String)",
      "352": "NamedColor::::rgb(java.lang.String)",
      "353": "NamedColor::::rgb(java.lang.String)"
    },
    "test_reverse_method_lines_dic": {
      "9": "NamedColorTest::::rgb()",
      "10": "NamedColorTest::::rgb()",
      "11": "NamedColorTest::::rgb()",
      "12": "NamedColorTest::::rgb()",
      "13": "NamedColorTest::::rgb()",
      "14": "NamedColorTest::::rgb()",
      "15": "NamedColorTest::::rgb()",
      "16": "NamedColorTest::::rgb()",
      "17": "NamedColorTest::::rgb()",
      "18": "NamedColorTest::::rgb()",
      "19": "NamedColorTest::::rgb()",
      "20": "NamedColorTest::::rgb()",
      "21": "NamedColorTest::::rgb()",
      "22": "NamedColorTest::::rgb()",
      "23": "NamedColorTest::::rgb()"
    },
    "tests": [
      {
        "test_lines": [
          9,
          23
        ],
        "covered_lines": [
          24,
          27,
          28,
          48,
          318,
          319,
          321,
          322,
          323,
          326,
          327,
          328,
          329,
          330,
          331,
          335,
          336,
          337,
          338,
          339,
          340,
          341,
          347,
          348
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-layout/src/main/java/org/ofdrw/layout/element/canvas/Cell.java": {
    "class_content": [
      "package org.ofdrw.layout.element.canvas;\n",
      "\n",
      "\n",
      "import java.io.IOException;\n",
      "import java.nio.file.Path;\n",
      "\n",
      "/**\n",
      " * \u5355\u5143\u5bf9\u8c61\n",
      " * <p>\n",
      " * \u7ed8\u5236\u884c\u4e3a\u8be6\u89c1\u6e32\u67d3\u5668\uff1a{@link org.ofdrw.layout.element.canvas.CellContentDrawer}\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2023-11-21 19:22:28\n",
      " */\n",
      "public class Cell extends Canvas {\n",
      "\n",
      "    /**\n",
      "     * \u5355\u5143\u683c\u5185\u5bb9\u7ed8\u5236\u5668\n",
      "     */\n",
      "    private final CellContentDrawer cellDrawer;\n",
      "\n",
      "    /**\n",
      "     * \u521b\u5efa\u5355\u5143\u5bf9\u8c61\n",
      "     *\n",
      "     * @param width  \u5bbd\u5ea6\uff08\u5355\u4f4d\uff1a\u6beb\u7c73mm\uff09\n",
      "     * @param height \u9ad8\u5ea6\uff08\u5355\u4f4d\uff1a\u6beb\u7c73mm\uff09\n",
      "     */\n",
      "    public Cell(Double width, Double height) {\n",
      "        super(width, height);\n",
      "        this.cellDrawer = new CellContentDrawer(this);\n",
      "        this.setDrawer(this.cellDrawer);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u521b\u5efa\u5355\u5143\u5bf9\u8c61\n",
      "     *\n",
      "     * @param x x\u5750\u6807\uff08\u5355\u4f4d\uff1a\u6beb\u7c73mm\uff09\n",
      "     * @param y y\u5750\u6807\uff08\u5355\u4f4d\uff1a\u6beb\u7c73mm\uff09\n",
      "     * @param w \u5bbd\u5ea6\uff08\u5355\u4f4d\uff1a\u6beb\u7c73mm\uff09\n",
      "     * @param h \u9ad8\u5ea6\uff08\u5355\u4f4d\uff1a\u6beb\u7c73mm\uff09\n",
      "     */\n",
      "    public Cell(double x, double y, double w, double h) {\n",
      "        super(x, y, w, h);\n",
      "        this.cellDrawer = new CellContentDrawer(this);\n",
      "        this.setDrawer(this.cellDrawer);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u5355\u5143\u683c\u5185\u5bb9\u7ed8\u5236\u5668\n",
      "     *\n",
      "     * @param drawer \u65b0\u7684\u7ed8\u5236\u5668\n",
      "     * @return this\n",
      "     */\n",
      "    @Override\n",
      "    public Cell setDrawer(Drawer drawer) {\n",
      "        if (!(drawer instanceof CellContentDrawer)) {\n",
      "            throw new IllegalArgumentException(\"Cell\u7684\u7ed8\u5236\u5668\u5fc5\u987b\u662fCellContentDrawer\");\n",
      "        }\n",
      "        super.setDrawer(drawer);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5355\u5143\u683c\u5185\u5bb9\u7ed8\u5236\u5668\n",
      "     *\n",
      "     * @return \u5355\u5143\u683c\u5185\u5bb9\u7ed8\u5236\u5668\n",
      "     */\n",
      "    @Override\n",
      "    public CellContentDrawer getDrawer() {\n",
      "        return cellDrawer;\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5355\u5143\u683c\u6587\u5b57\u5185\u5bb9\n",
      "     *\n",
      "     * @return \u5355\u5143\u683c\u6587\u5b57\u5185\u5bb9\n",
      "     */\n",
      "    public String getValue() {\n",
      "        return cellDrawer.getValue();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u5355\u5143\u683c\u6587\u5b57\u5185\u5bb9\n",
      "     *\n",
      "     * @param value \u5355\u5143\u683c\u6587\u5b57\u5185\u5bb9\n",
      "     * @return this\n",
      "     */\n",
      "    public Cell setValue(String value) {\n",
      "        this.cellDrawer.setValue(value);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u56fe\u7247\n",
      "     *\n",
      "     * @param imgPath \u56fe\u7247\u8def\u5f84\uff0c\u4ec5\u652f\u6301png\u3001jpg\u3001jpeg\u3001gif\u3001bmp\u683c\u5f0f\n",
      "     * @param w       \u56fe\u7247\u5bbd\u5ea6\uff0c\u5355\u4f4d\uff1a\u6beb\u7c73\n",
      "     * @param h       \u56fe\u7247\u9ad8\u5ea6\uff0c\u5355\u4f4d\uff1a\u6beb\u7c73\n",
      "     * @return this\n",
      "     */\n",
      "    public Cell setValue(Path imgPath, double w, double h) {\n",
      "        this.cellDrawer.setValue(imgPath, w, h);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u56fe\u7247\n",
      "     * <p>\n",
      "     * \u56fe\u7247\u5bbd\u5ea6\u4e0e\u9ad8\u5ea6\u901a\u8fc7 {@link DrawContext#mm(int)} } \u65b9\u6cd5\u8f6c\u6362\u4e3a\u6beb\u7c73\n",
      "     *\n",
      "     * @param imgPath \u56fe\u7247\u8def\u5f84\uff0c\u4ec5\u652f\u6301png\u3001jpg\u3001jpeg\u3001gif\u3001bmp\u683c\u5f0f\n",
      "     * @return this\n",
      "     * @throws IOException \u56fe\u7247\u52a0\u8f7d\u5f02\u5e38\n",
      "     */\n",
      "    public Cell setValue(Path imgPath) throws IOException {\n",
      "        this.cellDrawer.setValue(imgPath);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5355\u5143\u683c\u989c\u8272\n",
      "     *\n",
      "     * @return \u5355\u5143\u683c\u989c\u8272\uff0c\u683c\u5f0f\uff1a#000000\u3001rgb(0,0,0)\u3001rgba(0,0,0,1)\n",
      "     */\n",
      "    public String getColor() {\n",
      "        return cellDrawer.getColor();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u5355\u5143\u683c\u989c\u8272\n",
      "     *\n",
      "     * @param color \u5355\u5143\u683c\u989c\u8272\uff0c\u683c\u5f0f\uff1a#000000\u3001rgb(0,0,0)\u3001rgba(0,0,0,1)\n",
      "     * @return this\n",
      "     */\n",
      "    public Cell setColor(String color) {\n",
      "        if (color == null || color.isEmpty()) {\n",
      "            throw new IllegalArgumentException(\"\u989c\u8272(color)\u4e0d\u80fd\u4e3a\u7a7a\");\n",
      "        }\n",
      "        this.cellDrawer.setColor(color);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5b57\u4f53\u540d\u79f0\n",
      "     *\n",
      "     * @return \u5b57\u4f53\u540d\u79f0\n",
      "     */\n",
      "    public String getFontName() {\n",
      "        return this.cellDrawer.getFontName();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u5b57\u4f53\u540d\u79f0\n",
      "     *\n",
      "     * @param fontName \u5b57\u4f53\u540d\u79f0\uff0c\u4ec5\u652f\u6301\u7cfb\u7edf\u5b89\u88c5\u5b57\u4f53\uff0c\u4e14\u4e0d\u4f1a\u5d4c\u5165\u5230OFD\u4e2d\u3002\n",
      "     * @return this\n",
      "     */\n",
      "    public Cell setFontName(String fontName) {\n",
      "        this.cellDrawer.setFontName(fontName);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u5355\u5143\u683c\u4f7f\u7528\u7684\u5916\u90e8\u5b57\u4f53\n",
      "     * <p>\n",
      "     * \u6ce8\u610fOFDRW\u4e0d\u4f1a\u63d0\u4f9b\u4efb\u4f55\u5b57\u4f53\u88c1\u526a\u529f\u80fd\uff0c\u60a8\u7684\u5b57\u4f53\u6587\u4ef6\u5c06\u76f4\u63a5\u52a0\u5165OFD\u6587\u4ef6\u4e2d\uff0c\u8fd9\u53ef\u80fd\u9020\u6210\u6587\u4ef6\u4f53\u79ef\u5267\u589e\u3002\n",
      "     *\n",
      "     * @param fontName \u5b57\u4f53\u540d\u79f0\uff0c\u5982\u201c\u601d\u6e90\u5b8b\u4f53\u201d\n",
      "     * @param fontPath \u5b57\u4f53\u6587\u4ef6\u6240\u5728\u8def\u5f84\n",
      "     * @return this\n",
      "     */\n",
      "    public Cell setFont(String fontName, Path fontPath) {\n",
      "        this.cellDrawer.setFont(fontName, fontPath);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5b57\u53f7\n",
      "     *\n",
      "     * @return \u5b57\u53f7\uff0c\u9ed8\u8ba4\uff1a0.353 \uff08\u5355\u4f4d\uff1a\u6beb\u7c73\uff09\n",
      "     */\n",
      "    public double getFontSize() {\n",
      "        return this.cellDrawer.getFontSize();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u5b57\u53f7\n",
      "     *\n",
      "     * @param fontSize \u5b57\u53f7\uff0c\u9ed8\u8ba4\uff1a3\uff08\u5355\u4f4d\uff1a\u6beb\u7c73\uff09\n",
      "     * @return this\n",
      "     */\n",
      "    public Cell setFontSize(double fontSize) {\n",
      "        this.cellDrawer.setFontSize(fontSize);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6 \u6587\u5b57\u5bf9\u9f50\u65b9\u5f0f\n",
      "     *\n",
      "     * @return \u6587\u5b57\u5bf9\u9f50\u65b9\u5f0f\uff0c\u9ed8\u8ba4\uff1a\u5de6\u5bf9\u9f50\n",
      "     */\n",
      "    public TextAlign getTextAlign() {\n",
      "        return this.cellDrawer.getTextAlign();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e \u6587\u5b57\u5bf9\u9f50\u65b9\u5f0f\n",
      "     *\n",
      "     * @param textAlign \u6587\u5b57\u5bf9\u9f50\u65b9\u5f0f\n",
      "     * @return this\n",
      "     */\n",
      "    public Cell setTextAlign(TextAlign textAlign) {\n",
      "        this.cellDrawer.setTextAlign(textAlign);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6 \u6587\u5b57\u5782\u76f4\u65b9\u5411\u6d6e\u52a8\u65b9\u5f0f\n",
      "     *\n",
      "     * @return \u6587\u5b57\u5782\u76f4\u65b9\u5411\u6d6e\u52a8\u65b9\u5f0f\uff0c\u9ed8\u8ba4\uff1a\u5c45\u4e2d {@link VerticalAlign#center}\n",
      "     */\n",
      "    public VerticalAlign getVerticalAlign() {\n",
      "        return this.cellDrawer.getVerticalAlign();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e \u6587\u5b57\u5782\u76f4\u65b9\u5411\u6d6e\u52a8\u65b9\u5f0f\n",
      "     *\n",
      "     * @param verticalAlign \u6587\u5b57\u5782\u76f4\u65b9\u5411\u6d6e\u52a8\u65b9\u5f0f\n",
      "     * @return this\n",
      "     */\n",
      "    public Cell setVerticalAlign(VerticalAlign verticalAlign) {\n",
      "        this.cellDrawer.setVerticalAlign(verticalAlign);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6 \u884c\u95f4\u8ddd\n",
      "     *\n",
      "     * @return \u884c\u95f4\u8ddd\uff0c\u9ed8\u8ba4\u503c 0.6mm\n",
      "     */\n",
      "    public Double getLineSpace() {\n",
      "        return this.cellDrawer.getLineSpace();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e \u884c\u95f4\u8ddd\n",
      "     *\n",
      "     * @param lineSpace \u884c\u95f4\u8ddd\n",
      "     * @return this\n",
      "     */\n",
      "    public Cell setLineSpace(Double lineSpace) {\n",
      "        this.cellDrawer.setLineSpace(lineSpace);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * @return \u662f\u5426\u52a0\u7c97\uff0c\u9ed8\u8ba4\uff1a\u4e0d\u52a0\u7c97\n",
      "     * @deprecated \u5355\u8bcd\u9519\u8bef {@link #getBold()}\n",
      "     * \u662f\u5426\u52a0\u7c97\n",
      "     */\n",
      "    @Deprecated\n",
      "    public Boolean getBlob() {\n",
      "        return this.cellDrawer.getBlob();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * @param blob \u662f\u5426\u52a0\u7c97\n",
      "     * @return this\n",
      "     * @deprecated \u5355\u8bcd\u9519\u8bef {@link #getBold()}\n",
      "     * \u8bbe\u7f6e \u662f\u5426\u52a0\u7c97\n",
      "     */\n",
      "    @Deprecated\n",
      "    public Cell setBlob(Boolean blob) {\n",
      "        this.cellDrawer.setBlob(blob);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u662f\u5426\u52a0\u7c97\n",
      "     *\n",
      "     * @return \u662f\u5426\u52a0\u7c97\uff0c\u9ed8\u8ba4\uff1a\u4e0d\u52a0\u7c97\n",
      "     */\n",
      "    public Boolean getBold() {\n",
      "        return this.cellDrawer.getBold();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e \u662f\u5426\u52a0\u7c97\n",
      "     *\n",
      "     * @param blob \u662f\u5426\u52a0\u7c97\n",
      "     * @return this\n",
      "     */\n",
      "    public Cell setBold(Boolean blob) {\n",
      "        this.cellDrawer.setBold(blob);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u662f\u5426\u659c\u4f53\n",
      "     *\n",
      "     * @return true - \u659c\u4f53\u3001false - \u6b63\u5e38\n",
      "     */\n",
      "    public Boolean getItalic() {\n",
      "        return this.cellDrawer.getItalic();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e \u662f\u5426\u659c\u4f53\n",
      "     *\n",
      "     * @param italic \u662f\u5426\u659c\u4f53\uff0ctrue - \u659c\u4f53\u3001false - \u6b63\u5e38\n",
      "     * @return this\n",
      "     */\n",
      "    public Cell setItalic(Boolean italic) {\n",
      "        this.cellDrawer.setItalic(italic);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6 \u6587\u5b57\u4e4b\u95f4\u7684\u95f4\u8ddd\n",
      "     *\n",
      "     * @return \u6587\u5b57\u4e4b\u95f4\u7684\u95f4\u8ddd\uff0c\u9ed8\u8ba4\u4e3a\uff1a0\n",
      "     */\n",
      "    public Double getLetterSpacing() {\n",
      "        return this.cellDrawer.getLetterSpacing();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e \u6587\u5b57\u4e4b\u95f4\u7684\u95f4\u8ddd\n",
      "     *\n",
      "     * @param letterSpacing \u6587\u5b57\u4e4b\u95f4\u7684\u95f4\u8ddd\uff0c\u53ef\u4ee5\u4e3a\u8d1f\u6570\uff0c\u9ed8\u8ba4\u4e3a\uff1a0\u3002\n",
      "     * @return this\n",
      "     */\n",
      "    public Cell setLetterSpacing(Double letterSpacing) {\n",
      "        this.cellDrawer.setLetterSpacing(letterSpacing);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u662f\u5426\u5f00\u542f\u4e0b\u5212\u7ebf\n",
      "     *\n",
      "     * @param underline true - \u542f\u4e0b\u5212\u7ebf\uff0cfalse - \u7981\u7528\u4e0b\u5212\u7ebf\n",
      "     * @return this\n",
      "     */\n",
      "    public Cell setUnderline(boolean underline) {\n",
      "        this.cellDrawer.setUnderline(underline);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u662f\u5426\u5f00\u542f\u4e0b\u5212\u7ebf\n",
      "     *\n",
      "     * @return true - \u542f\u4e0b\u5212\u7ebf\uff0cfalse - \u4e0d\u542f\u7528\u4e0b\u5212\u7ebf\n",
      "     */\n",
      "    public boolean getUnderline() {\n",
      "        return this.cellDrawer.getUnderline();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u662f\u5426\u5f00\u542f\u5220\u9664\u7ebf\n",
      "     *\n",
      "     * @param deleteLine true - \u542f\u5220\u9664\u7ebf\uff0cfalse - \u7981\u7528\u5220\u9664\u7ebf\n",
      "     * @return this\n",
      "     */\n",
      "    public Cell setDeleteLine(boolean deleteLine) {\n",
      "        this.cellDrawer.setDeleteLine(deleteLine);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u662f\u5426\u5f00\u542f\u5220\u9664\u7ebf\n",
      "     *\n",
      "     * @return true - \u542f\u5220\u9664\u7ebf\uff0cfalse - \u7981\u7528\u5220\u9664\u7ebf\n",
      "     */\n",
      "    public boolean getDeleteLine() {\n",
      "        return this.cellDrawer.getDeleteLine();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u56fe\u7247\u8def\u5f84\n",
      "     *\n",
      "     * @return \u56fe\u7247\u8def\u5f84\uff0c\u53ef\u80fd\u4e3a\u7a7a\u3002\n",
      "     */\n",
      "    public Path getImgPath() {\n",
      "        return this.cellDrawer.getImgPath();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u56fe\u7247\u9ad8\u5ea6\n",
      "     *\n",
      "     * @return \u56fe\u7247\u9ad8\u5ea6\uff0c\u53ef\u80fd\u4e3a0\u3002\n",
      "     */\n",
      "    public double getImgWidth() {\n",
      "        return this.cellDrawer.getImgWidth();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u56fe\u7247\u5bbd\u5ea6\n",
      "     *\n",
      "     * @return \u56fe\u7247\u5bbd\u5ea6\uff0c\u53ef\u80fd\u4e3a0\u3002\n",
      "     */\n",
      "    public double getImgHeight() {\n",
      "        return this.cellDrawer.getImgHeight();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5b57\u4f53\u5bbd\u5ea6\n",
      "     *\n",
      "     * @return \u5b57\u4f53\u5bbd\u5ea6\uff0c\u9075\u5faa CSS3\u6807\u51c6\uff0c\u53ef\u9009\u503c\u4e3a normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900\n",
      "     */\n",
      "    public String getFontWeight() {\n",
      "        return this.cellDrawer.getFontWeight();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u5b57\u4f53\u5bbd\u5ea6\n",
      "     *\n",
      "     * @param fontWeight \u5bbd\u5ea6\uff0c\u5e94\u9075\u5faa CSS3\u6807\u51c6: normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900\n",
      "     * @return this\n",
      "     */\n",
      "    public Cell setFontWeight(String fontWeight) {\n",
      "        this.cellDrawer.setFontWeight(fontWeight);\n",
      "        return this;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.layout.element.canvas;\n",
      "\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.ofdrw.layout.OFDDoc;\n",
      "import org.ofdrw.layout.VirtualPage;\n",
      "import org.ofdrw.layout.element.AFloat;\n",
      "import org.ofdrw.layout.element.Display;\n",
      "\n",
      "import java.io.IOException;\n",
      "import java.nio.file.Path;\n",
      "import java.nio.file.Paths;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.*;\n",
      "\n",
      "class CellTest {\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u6d41\u5f0f\u9875\u9762\u5e03\u5c40\n",
      "     */\n",
      "    @Test\n",
      "    void cell() throws IOException {\n",
      "        Path outP = Paths.get(\"target/cell-element.ofd\");\n",
      "//        CellContentDrawer.DEBUG = true;\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            Cell cell1 = new Cell(20d, 10d);\n",
      "            cell1.setBorder(0.353);\n",
      "            cell1.setTextAlign(TextAlign.center);\n",
      "            cell1.setPadding(1d, 3d, 1d, 3d);\n",
      "            cell1.setValue(\"\u540d \u79f0\");\n",
      "            cell1.setFontSize(5d);\n",
      "            cell1.setDisplay(Display.inlineBlock);\n",
      "            cell1.setBackgroundColor(\"#CDD0D6\");\n",
      "\n",
      "\n",
      "            Cell cell2 = new Cell(50d, 10d);\n",
      "            cell2.setBorder(0.353);\n",
      "            cell2.setTextAlign(TextAlign.center);\n",
      "            cell2.setPadding(1d, 3d, 1d, 3d);\n",
      "            cell2.setValue(\"OFD Reader & Writer\");\n",
      "            cell2.setFontSize(5d);\n",
      "            cell2.setMarginLeft(-0.353);\n",
      "            cell2.setDisplay(Display.inlineBlock);\n",
      "\n",
      "            ofdDoc.add(cell1);\n",
      "            ofdDoc.add(cell2);\n",
      "        }\n",
      "        System.out.println(\">> \u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u865a\u62df\u9875\u9762\u7edd\u5bf9\u5b9a\u4f4d\u5e03\u5c40\n",
      "     */\n",
      "    @Test\n",
      "    void cellVPage() throws IOException {\n",
      "        Path outP = Paths.get(\"target/cell-element-vpage.ofd\");\n",
      "//        CellContentDrawer.DEBUG = true;\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "            Cell cell1 = new Cell(10, 10, 20d, 10d);\n",
      "            cell1.setBorder(0.353);\n",
      "            cell1.setTextAlign(TextAlign.center);\n",
      "            cell1.setPadding(1d, 3d, 1d, 3d);\n",
      "            cell1.setValue(\"\u540d \u79f0\");\n",
      "            cell1.setFontSize(5d);\n",
      "            cell1.setBackgroundColor(\"#CDD0D6\");\n",
      "\n",
      "            // \u5143\u7d20\u5b9e\u9645\u5927\u5c0f\u4e3a\uff1a margin-left + border-left + padding-left + width + padding-right + border-right + margin-right\n",
      "            // \u504f\u79fb\u5750\u6807\u4e3a\uff1a \u539f\u59cb\u504f\u79fb\u91cf + \u5143\u7d20\u5b9e\u9645\u5bbd\u5ea6 - \u53f3\u8fb9\u5bbd\u5ea6\n",
      "            Cell cell2 = new Cell(10 + 0.353 + 3d + 20d + 3d /* ,0.353 */, 10, 50d, 10d);\n",
      "            cell2.setBorder(0.353);\n",
      "            cell2.setTextAlign(TextAlign.center);\n",
      "            cell2.setPadding(1d, 3d, 1d, 3d);\n",
      "            cell2.setValue(\"OFD Reader & Writer\");\n",
      "            cell2.setFontSize(5d);\n",
      "\n",
      "            vPage.add(cell1);\n",
      "            vPage.add(cell2);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\">> \u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u56fe\u7247\u5185\u5bb9\n",
      "     */\n",
      "    @Test\n",
      "    void cellImage() throws IOException {\n",
      "        Path outP = Paths.get(\"target/cell-image.ofd\");\n",
      "        Path img = Paths.get(\"src/test/resources/rhino.jpg\");\n",
      "\n",
      "//        CellContentDrawer.DEBUG = true;\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            Cell cell1 = new Cell(20d, 50d);\n",
      "            cell1.setBorder(0.353);\n",
      "            cell1.setTextAlign(TextAlign.center);\n",
      "            cell1.setPadding(1d, 3d, 1d, 3d);\n",
      "\n",
      "            cell1.setValue(\"\u5934 \u50cf\");\n",
      "\n",
      "            cell1.setFontSize(5d);\n",
      "            cell1.setDisplay(Display.inlineBlock);\n",
      "            cell1.setBackgroundColor(\"#CDD0D6\");\n",
      "\n",
      "\n",
      "            Cell cell2 = new Cell(50d, 50d);\n",
      "            cell2.setBorder(0.353);\n",
      "            cell2.setTextAlign(TextAlign.center);\n",
      "            cell2.setPadding(1d, 3d, 1d, 3d);\n",
      "\n",
      "            cell2.setValue(img, 40, 30);\n",
      "\n",
      "            cell2.setFontSize(5d);\n",
      "            cell2.setMarginLeft(-0.353);\n",
      "            cell2.setDisplay(Display.inlineBlock);\n",
      "\n",
      "            ofdDoc.add(cell1);\n",
      "            ofdDoc.add(cell2);\n",
      "        }\n",
      "        System.out.println(\">> \u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6d41\u5f0f\u5e03\u5c40\u5185\u5bb9\u5c45\u4e2d\n",
      "     */\n",
      "    @Test\n",
      "    void cellCenter() throws IOException {\n",
      "        Path outP = Paths.get(\"target/cell-element-center.ofd\");\n",
      "//        CellContentDrawer.DEBUG = true;\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            Cell cell1 = new Cell(20d, 10d);\n",
      "            cell1.setBorder(0.353);\n",
      "            cell1.setTextAlign(TextAlign.center);\n",
      "            cell1.setPadding(1d, 3d, 1d, 3d);\n",
      "            cell1.setValue(\"\u540d \u79f0\");\n",
      "            cell1.setFontSize(5d);\n",
      "            cell1.setDisplay(Display.inlineBlock);\n",
      "            cell1.setBackgroundColor(\"#CDD0D6\");\n",
      "\n",
      "            cell1.setFloat(AFloat.center);\n",
      "\n",
      "\n",
      "            Cell cell2 = new Cell(50d, 10d);\n",
      "            cell2.setBorder(0.353);\n",
      "            cell2.setTextAlign(TextAlign.center);\n",
      "            cell2.setPadding(1d, 3d, 1d, 3d);\n",
      "            cell2.setValue(\"OFD Reader & Writer\");\n",
      "            cell2.setFontSize(5d);\n",
      "            cell2.setMarginLeft(-0.353);\n",
      "            cell2.setDisplay(Display.inlineBlock);\n",
      "\n",
      "            cell2.setFloat(AFloat.center);\n",
      "\n",
      "            ofdDoc.add(cell1);\n",
      "            ofdDoc.add(cell2);\n",
      "        }\n",
      "        System.out.println(\">> \u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u5b57\u95f4\u8ddd\n",
      "     */\n",
      "    @Test\n",
      "    void setLetterSpacing() throws IOException {\n",
      "        Path outP = Paths.get(\"target/cell-element-letterSpacing.ofd\");\n",
      "        CellContentDrawer.DEBUG = true;\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            Cell cell1 = new Cell(20d, 10d);\n",
      "            cell1.setBorder(0.353);\n",
      "            cell1.setTextAlign(TextAlign.center);\n",
      "            cell1.setPadding(1d, 3d, 1d, 3d);\n",
      "            cell1.setValue(\"\u540d\u79f0\");\n",
      "            // \u8bbe\u7f6e\u5b57\u95f4\u8ddd\n",
      "            cell1.setLetterSpacing(10d);\n",
      "\n",
      "            cell1.setFontSize(5d);\n",
      "            cell1.setDisplay(Display.inlineBlock);\n",
      "            cell1.setBackgroundColor(\"#CDD0D6\");\n",
      "            cell1.setFloat(AFloat.center);\n",
      "\n",
      "\n",
      "            Cell cell2 = new Cell(50d, 10d);\n",
      "            cell2.setBorder(0.353);\n",
      "            cell2.setTextAlign(TextAlign.center);\n",
      "            cell2.setPadding(1d, 3d, 1d, 3d);\n",
      "            cell2.setValue(\"OFD Reader & Writer\");\n",
      "            cell2.setFontSize(5d);\n",
      "            cell2.setMarginLeft(-0.353);\n",
      "            cell2.setDisplay(Display.inlineBlock);\n",
      "            cell2.setFloat(AFloat.center);\n",
      "            ofdDoc.add(cell1);\n",
      "            ofdDoc.add(cell2);\n",
      "        }\n",
      "        System.out.println(\">> \u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u884c\u95f4\u8ddd\n",
      "     */\n",
      "    @Test\n",
      "    void setLineHeight() throws IOException {\n",
      "        Path outP = Paths.get(\"target/cell-element-lineHeight.ofd\");\n",
      "        CellContentDrawer.DEBUG = true;\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            Cell cell1 = new Cell(20d, 80d);\n",
      "            cell1.setBorder(0.353);\n",
      "            cell1.setTextAlign(TextAlign.center);\n",
      "            cell1.setPadding(1d, 3d, 1d, 3d);\n",
      "            cell1.setValue(\"\u540d \u79f0\");\n",
      "            cell1.setFontSize(5d);\n",
      "            cell1.setDisplay(Display.inlineBlock);\n",
      "            cell1.setBackgroundColor(\"#CDD0D6\");\n",
      "            cell1.setFloat(AFloat.center);\n",
      "\n",
      "\n",
      "            Cell cell2 = new Cell(40d, 80d);\n",
      "            cell2.setBorder(0.353);\n",
      "            cell2.setTextAlign(TextAlign.center);\n",
      "            cell2.setPadding(1d, 3d, 1d, 3d);\n",
      "            cell2.setValue(\"OFD Reader & Writer OFD Reader & Writer OFD Reader & Writer OFD Reader & Writer OFD Reader & Writer OFD Reader & Writer\");\n",
      "\n",
      "            // \u8bbe\u7f6e\u884c\u95f4\u8ddd\n",
      "            cell2.setLineSpace(3d);\n",
      "\n",
      "            cell2.setFontSize(5d);\n",
      "            cell2.setMarginLeft(-0.353);\n",
      "            cell2.setDisplay(Display.inlineBlock);\n",
      "            cell2.setFloat(AFloat.center);\n",
      "\n",
      "            ofdDoc.add(cell1);\n",
      "            ofdDoc.add(cell2);\n",
      "        }\n",
      "        System.out.println(\">> \u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u4e0b\u5212\u7ebf\n",
      "     */\n",
      "    @Test\n",
      "    void setUnderline() throws IOException {\n",
      "        Path outP = Paths.get(\"target/cell-underline.ofd\");\n",
      "//        CellContentDrawer.DEBUG = true;\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            Cell cell1 = new Cell(40d, 80d);\n",
      "            cell1.setBorder(0.353);\n",
      "            cell1.setTextAlign(TextAlign.center);\n",
      "            cell1.setPadding(1d, 3d, 1d, 3d);\n",
      "            cell1.setValue(\"OFD Reader & Writer OFD Reader & Writer OFD Reader & Writer OFD Reader & Writer OFD Reader & Writer OFD Reader & Writer\");\n",
      "            cell1.setUnderline(true);\n",
      "\n",
      "            Cell cell2 = new Cell(120d, 80d);\n",
      "            cell2.setBorder(0.353);\n",
      "            cell2.setTextAlign(TextAlign.center);\n",
      "            cell2.setPadding(1d, 3d, 1d, 3d);\n",
      "            cell2.setFontSize(14d);\n",
      "            cell2.setValue(\"\u4f60\u597d\u4f60\u597d\u4f60\u597d\u4f60\u597d\u4f60\u597d\u4f60\u597d\u4f60\");\n",
      "            cell2.setUnderline(true);\n",
      "\n",
      "            ofdDoc.add(cell1);\n",
      "            ofdDoc.add(cell2);\n",
      "        }\n",
      "        System.out.println(\">> \u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u5220\u9664\u7ebf\n",
      "     */\n",
      "    @Test\n",
      "    void setDeleteLine() throws IOException {\n",
      "        Path outP = Paths.get(\"target/cell-deleteline.ofd\");\n",
      "//        CellContentDrawer.DEBUG = true;\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            Cell cell1 = new Cell(40d, 80d);\n",
      "            cell1.setBorder(0.353);\n",
      "            cell1.setTextAlign(TextAlign.center);\n",
      "            cell1.setPadding(1d, 3d, 1d, 3d);\n",
      "            cell1.setValue(\"OFD Reader & Writer OFD Reader & Writer OFD Reader & Writer\");\n",
      "            cell1.setDeleteLine(true);\n",
      "\n",
      "            Cell cell2 = new Cell(120d, 80d);\n",
      "            cell2.setBorder(0.353);\n",
      "            cell2.setTextAlign(TextAlign.center);\n",
      "            cell2.setPadding(1d, 3d, 1d, 3d);\n",
      "            cell2.setFontSize(14d);\n",
      "            cell2.setValue(\"\u4f60\u597d\u4f60\u597d\u4f60\u597d\u4f60\u597d\u4f60\u597d\u4f60\u597d\u4f60\");\n",
      "            cell2.setDeleteLine(true);\n",
      "\n",
      "            ofdDoc.add(cell1);\n",
      "            ofdDoc.add(cell2);\n",
      "        }\n",
      "        System.out.println(\">> \u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u5355\u5143\u683c\u5b57\u4f53\u989c\u8272\n",
      "     */\n",
      "    @Test\n",
      "    void setFontColor()throws Exception{\n",
      "        Path outP = Paths.get(\"target/font-color.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            Cell cell1 = new Cell(20d,10d);\n",
      "            cell1.setBorder(0.353);\n",
      "            cell1.setTextAlign(TextAlign.center);\n",
      "            cell1.setPadding(1d,3d,1d,3d);\n",
      "            cell1.setValue(\"\u540d \u79f0\");\n",
      "            cell1.setFontSize(5d);\n",
      "            cell1.setDisplay(Display.inlineBlock);\n",
      "            cell1.setColor(\"#FF0000\");\n",
      "\n",
      "            ofdDoc.add(cell1);\n",
      "        }\n",
      "        System.out.println(\">> \u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u5355\u5143\u683c\u5916\u90e8\u5b57\u4f53\n",
      "     */\n",
      "    @Test\n",
      "    void setFontExt() throws Exception{\n",
      "        Path outP = Paths.get(\"target/font-ext.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            Cell cell1 = new Cell(20d, 10d);\n",
      "            cell1.setFont(\"\u4eff\u5b8b_\u88c1\u526a\", Paths.get(\"src/test/resources/\u4eff\u5b8b_GB2312_subset.ttf\"));\n",
      "            cell1.setBorder(0.353);\n",
      "            cell1.setTextAlign(TextAlign.center);\n",
      "            cell1.setPadding(1d, 3d, 1d, 3d);\n",
      "            cell1.setValue(\"\u540d \u79f0\");\n",
      "            cell1.setFontSize(5d);\n",
      "            cell1.setDisplay(Display.inlineBlock);\n",
      "            cell1.setBackgroundColor(\"#CDD0D6\");\n",
      "\n",
      "\n",
      "            Cell cell2 = new Cell(50d, 10d);\n",
      "            cell2.setFont(\"\u4eff\u5b8b_\u88c1\u526a\", Paths.get(\"src/test/resources/\u4eff\u5b8b_GB2312_subset.ttf\"));\n",
      "            cell2.setBorder(0.353);\n",
      "            cell2.setTextAlign(TextAlign.center);\n",
      "            cell2.setPadding(1d, 3d, 1d, 3d);\n",
      "            cell2.setValue(\"OFD Reader & Writer\");\n",
      "            cell2.setFontSize(5d);\n",
      "            cell2.setMarginLeft(-0.353);\n",
      "            cell2.setDisplay(Display.inlineBlock);\n",
      "\n",
      "            ofdDoc.add(cell1);\n",
      "            ofdDoc.add(cell2);\n",
      "        }\n",
      "        System.out.println(\">> \u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "Cell::::setDrawer(org.ofdrw.layout.element.canvas.Drawer)": [
        54,
        61
      ],
      "Cell::::getDrawer()": [
        68,
        71
      ],
      "Cell::::getValue()": [
        79,
        81
      ],
      "Cell::::setValue(java.lang.String)": [
        89,
        92
      ],
      "Cell::::setValue(java.nio.file.Path,double,double)": [
        102,
        105
      ],
      "Cell::::setValue(java.nio.file.Path)": [
        116,
        119
      ],
      "Cell::::getColor()": [
        126,
        128
      ],
      "Cell::::setColor(java.lang.String)": [
        136,
        142
      ],
      "Cell::::getFontName()": [
        149,
        151
      ],
      "Cell::::setFontName(java.lang.String)": [
        159,
        162
      ],
      "Cell::::setFont(java.lang.String,java.nio.file.Path)": [
        173,
        176
      ],
      "Cell::::getFontSize()": [
        183,
        185
      ],
      "Cell::::setFontSize(double)": [
        193,
        196
      ],
      "Cell::::getTextAlign()": [
        203,
        205
      ],
      "Cell::::setTextAlign(org.ofdrw.layout.element.canvas.TextAlign)": [
        213,
        216
      ],
      "Cell::::getVerticalAlign()": [
        223,
        225
      ],
      "Cell::::setVerticalAlign(org.ofdrw.layout.element.canvas.VerticalAlign)": [
        233,
        236
      ],
      "Cell::::getLineSpace()": [
        243,
        245
      ],
      "Cell::::setLineSpace(java.lang.Double)": [
        253,
        256
      ],
      "Cell::::getBlob()": [
        263,
        266
      ],
      "Cell::::setBlob(java.lang.Boolean)": [
        274,
        278
      ],
      "Cell::::getBold()": [
        285,
        287
      ],
      "Cell::::setBold(java.lang.Boolean)": [
        295,
        298
      ],
      "Cell::::getItalic()": [
        306,
        308
      ],
      "Cell::::setItalic(java.lang.Boolean)": [
        316,
        319
      ],
      "Cell::::getLetterSpacing()": [
        326,
        328
      ],
      "Cell::::setLetterSpacing(java.lang.Double)": [
        336,
        339
      ],
      "Cell::::setUnderline(boolean)": [
        347,
        350
      ],
      "Cell::::getUnderline()": [
        357,
        359
      ],
      "Cell::::setDeleteLine(boolean)": [
        367,
        370
      ],
      "Cell::::getDeleteLine()": [
        377,
        379
      ],
      "Cell::::getImgPath()": [
        386,
        388
      ],
      "Cell::::getImgWidth()": [
        395,
        397
      ],
      "Cell::::getImgHeight()": [
        404,
        406
      ],
      "Cell::::getFontWeight()": [
        413,
        415
      ],
      "Cell::::setFontWeight(java.lang.String)": [
        423,
        426
      ]
    },
    "test_method_lines_dic": {
      "CellTest::::cell()": [
        21,
        49
      ],
      "CellTest::::cellVPage()": [
        54,
        83
      ],
      "CellTest::::cellImage()": [
        89,
        123
      ],
      "CellTest::::cellCenter()": [
        128,
        160
      ],
      "CellTest::::setLetterSpacing()": [
        165,
        197
      ],
      "CellTest::::setLineHeight()": [
        202,
        236
      ],
      "CellTest::::setUnderline()": [
        243,
        267
      ],
      "CellTest::::setDeleteLine()": [
        272,
        296
      ],
      "CellTest::::setFontColor()": [
        301,
        317
      ],
      "CellTest::::setFontExt()": [
        322,
        351
      ]
    },
    "reverse_method_lines_dic": {
      "54": "Cell::::setDrawer(org.ofdrw.layout.element.canvas.Drawer)",
      "55": "Cell::::setDrawer(org.ofdrw.layout.element.canvas.Drawer)",
      "56": "Cell::::setDrawer(org.ofdrw.layout.element.canvas.Drawer)",
      "57": "Cell::::setDrawer(org.ofdrw.layout.element.canvas.Drawer)",
      "58": "Cell::::setDrawer(org.ofdrw.layout.element.canvas.Drawer)",
      "59": "Cell::::setDrawer(org.ofdrw.layout.element.canvas.Drawer)",
      "60": "Cell::::setDrawer(org.ofdrw.layout.element.canvas.Drawer)",
      "61": "Cell::::setDrawer(org.ofdrw.layout.element.canvas.Drawer)",
      "68": "Cell::::getDrawer()",
      "69": "Cell::::getDrawer()",
      "70": "Cell::::getDrawer()",
      "71": "Cell::::getDrawer()",
      "79": "Cell::::getValue()",
      "80": "Cell::::getValue()",
      "81": "Cell::::getValue()",
      "89": "Cell::::setValue(java.lang.String)",
      "90": "Cell::::setValue(java.lang.String)",
      "91": "Cell::::setValue(java.lang.String)",
      "92": "Cell::::setValue(java.lang.String)",
      "102": "Cell::::setValue(java.nio.file.Path,double,double)",
      "103": "Cell::::setValue(java.nio.file.Path,double,double)",
      "104": "Cell::::setValue(java.nio.file.Path,double,double)",
      "105": "Cell::::setValue(java.nio.file.Path,double,double)",
      "116": "Cell::::setValue(java.nio.file.Path)",
      "117": "Cell::::setValue(java.nio.file.Path)",
      "118": "Cell::::setValue(java.nio.file.Path)",
      "119": "Cell::::setValue(java.nio.file.Path)",
      "126": "Cell::::getColor()",
      "127": "Cell::::getColor()",
      "128": "Cell::::getColor()",
      "136": "Cell::::setColor(java.lang.String)",
      "137": "Cell::::setColor(java.lang.String)",
      "138": "Cell::::setColor(java.lang.String)",
      "139": "Cell::::setColor(java.lang.String)",
      "140": "Cell::::setColor(java.lang.String)",
      "141": "Cell::::setColor(java.lang.String)",
      "142": "Cell::::setColor(java.lang.String)",
      "149": "Cell::::getFontName()",
      "150": "Cell::::getFontName()",
      "151": "Cell::::getFontName()",
      "159": "Cell::::setFontName(java.lang.String)",
      "160": "Cell::::setFontName(java.lang.String)",
      "161": "Cell::::setFontName(java.lang.String)",
      "162": "Cell::::setFontName(java.lang.String)",
      "173": "Cell::::setFont(java.lang.String,java.nio.file.Path)",
      "174": "Cell::::setFont(java.lang.String,java.nio.file.Path)",
      "175": "Cell::::setFont(java.lang.String,java.nio.file.Path)",
      "176": "Cell::::setFont(java.lang.String,java.nio.file.Path)",
      "183": "Cell::::getFontSize()",
      "184": "Cell::::getFontSize()",
      "185": "Cell::::getFontSize()",
      "193": "Cell::::setFontSize(double)",
      "194": "Cell::::setFontSize(double)",
      "195": "Cell::::setFontSize(double)",
      "196": "Cell::::setFontSize(double)",
      "203": "Cell::::getTextAlign()",
      "204": "Cell::::getTextAlign()",
      "205": "Cell::::getTextAlign()",
      "213": "Cell::::setTextAlign(org.ofdrw.layout.element.canvas.TextAlign)",
      "214": "Cell::::setTextAlign(org.ofdrw.layout.element.canvas.TextAlign)",
      "215": "Cell::::setTextAlign(org.ofdrw.layout.element.canvas.TextAlign)",
      "216": "Cell::::setTextAlign(org.ofdrw.layout.element.canvas.TextAlign)",
      "223": "Cell::::getVerticalAlign()",
      "224": "Cell::::getVerticalAlign()",
      "225": "Cell::::getVerticalAlign()",
      "233": "Cell::::setVerticalAlign(org.ofdrw.layout.element.canvas.VerticalAlign)",
      "234": "Cell::::setVerticalAlign(org.ofdrw.layout.element.canvas.VerticalAlign)",
      "235": "Cell::::setVerticalAlign(org.ofdrw.layout.element.canvas.VerticalAlign)",
      "236": "Cell::::setVerticalAlign(org.ofdrw.layout.element.canvas.VerticalAlign)",
      "243": "Cell::::getLineSpace()",
      "244": "Cell::::getLineSpace()",
      "245": "Cell::::getLineSpace()",
      "253": "Cell::::setLineSpace(java.lang.Double)",
      "254": "Cell::::setLineSpace(java.lang.Double)",
      "255": "Cell::::setLineSpace(java.lang.Double)",
      "256": "Cell::::setLineSpace(java.lang.Double)",
      "263": "Cell::::getBlob()",
      "264": "Cell::::getBlob()",
      "265": "Cell::::getBlob()",
      "266": "Cell::::getBlob()",
      "274": "Cell::::setBlob(java.lang.Boolean)",
      "275": "Cell::::setBlob(java.lang.Boolean)",
      "276": "Cell::::setBlob(java.lang.Boolean)",
      "277": "Cell::::setBlob(java.lang.Boolean)",
      "278": "Cell::::setBlob(java.lang.Boolean)",
      "285": "Cell::::getBold()",
      "286": "Cell::::getBold()",
      "287": "Cell::::getBold()",
      "295": "Cell::::setBold(java.lang.Boolean)",
      "296": "Cell::::setBold(java.lang.Boolean)",
      "297": "Cell::::setBold(java.lang.Boolean)",
      "298": "Cell::::setBold(java.lang.Boolean)",
      "306": "Cell::::getItalic()",
      "307": "Cell::::getItalic()",
      "308": "Cell::::getItalic()",
      "316": "Cell::::setItalic(java.lang.Boolean)",
      "317": "Cell::::setItalic(java.lang.Boolean)",
      "318": "Cell::::setItalic(java.lang.Boolean)",
      "319": "Cell::::setItalic(java.lang.Boolean)",
      "326": "Cell::::getLetterSpacing()",
      "327": "Cell::::getLetterSpacing()",
      "328": "Cell::::getLetterSpacing()",
      "336": "Cell::::setLetterSpacing(java.lang.Double)",
      "337": "Cell::::setLetterSpacing(java.lang.Double)",
      "338": "Cell::::setLetterSpacing(java.lang.Double)",
      "339": "Cell::::setLetterSpacing(java.lang.Double)",
      "347": "Cell::::setUnderline(boolean)",
      "348": "Cell::::setUnderline(boolean)",
      "349": "Cell::::setUnderline(boolean)",
      "350": "Cell::::setUnderline(boolean)",
      "357": "Cell::::getUnderline()",
      "358": "Cell::::getUnderline()",
      "359": "Cell::::getUnderline()",
      "367": "Cell::::setDeleteLine(boolean)",
      "368": "Cell::::setDeleteLine(boolean)",
      "369": "Cell::::setDeleteLine(boolean)",
      "370": "Cell::::setDeleteLine(boolean)",
      "377": "Cell::::getDeleteLine()",
      "378": "Cell::::getDeleteLine()",
      "379": "Cell::::getDeleteLine()",
      "386": "Cell::::getImgPath()",
      "387": "Cell::::getImgPath()",
      "388": "Cell::::getImgPath()",
      "395": "Cell::::getImgWidth()",
      "396": "Cell::::getImgWidth()",
      "397": "Cell::::getImgWidth()",
      "404": "Cell::::getImgHeight()",
      "405": "Cell::::getImgHeight()",
      "406": "Cell::::getImgHeight()",
      "413": "Cell::::getFontWeight()",
      "414": "Cell::::getFontWeight()",
      "415": "Cell::::getFontWeight()",
      "423": "Cell::::setFontWeight(java.lang.String)",
      "424": "Cell::::setFontWeight(java.lang.String)",
      "425": "Cell::::setFontWeight(java.lang.String)",
      "426": "Cell::::setFontWeight(java.lang.String)"
    },
    "test_reverse_method_lines_dic": {
      "21": "CellTest::::cell()",
      "22": "CellTest::::cell()",
      "23": "CellTest::::cell()",
      "24": "CellTest::::cell()",
      "25": "CellTest::::cell()",
      "26": "CellTest::::cell()",
      "27": "CellTest::::cell()",
      "28": "CellTest::::cell()",
      "29": "CellTest::::cell()",
      "30": "CellTest::::cell()",
      "31": "CellTest::::cell()",
      "32": "CellTest::::cell()",
      "33": "CellTest::::cell()",
      "34": "CellTest::::cell()",
      "35": "CellTest::::cell()",
      "36": "CellTest::::cell()",
      "37": "CellTest::::cell()",
      "38": "CellTest::::cell()",
      "39": "CellTest::::cell()",
      "40": "CellTest::::cell()",
      "41": "CellTest::::cell()",
      "42": "CellTest::::cell()",
      "43": "CellTest::::cell()",
      "44": "CellTest::::cell()",
      "45": "CellTest::::cell()",
      "46": "CellTest::::cell()",
      "47": "CellTest::::cell()",
      "48": "CellTest::::cell()",
      "49": "CellTest::::cell()",
      "54": "CellTest::::cellVPage()",
      "55": "CellTest::::cellVPage()",
      "56": "CellTest::::cellVPage()",
      "57": "CellTest::::cellVPage()",
      "58": "CellTest::::cellVPage()",
      "59": "CellTest::::cellVPage()",
      "60": "CellTest::::cellVPage()",
      "61": "CellTest::::cellVPage()",
      "62": "CellTest::::cellVPage()",
      "63": "CellTest::::cellVPage()",
      "64": "CellTest::::cellVPage()",
      "65": "CellTest::::cellVPage()",
      "66": "CellTest::::cellVPage()",
      "67": "CellTest::::cellVPage()",
      "68": "CellTest::::cellVPage()",
      "69": "CellTest::::cellVPage()",
      "70": "CellTest::::cellVPage()",
      "71": "CellTest::::cellVPage()",
      "72": "CellTest::::cellVPage()",
      "73": "CellTest::::cellVPage()",
      "74": "CellTest::::cellVPage()",
      "75": "CellTest::::cellVPage()",
      "76": "CellTest::::cellVPage()",
      "77": "CellTest::::cellVPage()",
      "78": "CellTest::::cellVPage()",
      "79": "CellTest::::cellVPage()",
      "80": "CellTest::::cellVPage()",
      "81": "CellTest::::cellVPage()",
      "82": "CellTest::::cellVPage()",
      "83": "CellTest::::cellVPage()",
      "89": "CellTest::::cellImage()",
      "90": "CellTest::::cellImage()",
      "91": "CellTest::::cellImage()",
      "92": "CellTest::::cellImage()",
      "93": "CellTest::::cellImage()",
      "94": "CellTest::::cellImage()",
      "95": "CellTest::::cellImage()",
      "96": "CellTest::::cellImage()",
      "97": "CellTest::::cellImage()",
      "98": "CellTest::::cellImage()",
      "99": "CellTest::::cellImage()",
      "100": "CellTest::::cellImage()",
      "101": "CellTest::::cellImage()",
      "102": "CellTest::::cellImage()",
      "103": "CellTest::::cellImage()",
      "104": "CellTest::::cellImage()",
      "105": "CellTest::::cellImage()",
      "106": "CellTest::::cellImage()",
      "107": "CellTest::::cellImage()",
      "108": "CellTest::::cellImage()",
      "109": "CellTest::::cellImage()",
      "110": "CellTest::::cellImage()",
      "111": "CellTest::::cellImage()",
      "112": "CellTest::::cellImage()",
      "113": "CellTest::::cellImage()",
      "114": "CellTest::::cellImage()",
      "115": "CellTest::::cellImage()",
      "116": "CellTest::::cellImage()",
      "117": "CellTest::::cellImage()",
      "118": "CellTest::::cellImage()",
      "119": "CellTest::::cellImage()",
      "120": "CellTest::::cellImage()",
      "121": "CellTest::::cellImage()",
      "122": "CellTest::::cellImage()",
      "123": "CellTest::::cellImage()",
      "128": "CellTest::::cellCenter()",
      "129": "CellTest::::cellCenter()",
      "130": "CellTest::::cellCenter()",
      "131": "CellTest::::cellCenter()",
      "132": "CellTest::::cellCenter()",
      "133": "CellTest::::cellCenter()",
      "134": "CellTest::::cellCenter()",
      "135": "CellTest::::cellCenter()",
      "136": "CellTest::::cellCenter()",
      "137": "CellTest::::cellCenter()",
      "138": "CellTest::::cellCenter()",
      "139": "CellTest::::cellCenter()",
      "140": "CellTest::::cellCenter()",
      "141": "CellTest::::cellCenter()",
      "142": "CellTest::::cellCenter()",
      "143": "CellTest::::cellCenter()",
      "144": "CellTest::::cellCenter()",
      "145": "CellTest::::cellCenter()",
      "146": "CellTest::::cellCenter()",
      "147": "CellTest::::cellCenter()",
      "148": "CellTest::::cellCenter()",
      "149": "CellTest::::cellCenter()",
      "150": "CellTest::::cellCenter()",
      "151": "CellTest::::cellCenter()",
      "152": "CellTest::::cellCenter()",
      "153": "CellTest::::cellCenter()",
      "154": "CellTest::::cellCenter()",
      "155": "CellTest::::cellCenter()",
      "156": "CellTest::::cellCenter()",
      "157": "CellTest::::cellCenter()",
      "158": "CellTest::::cellCenter()",
      "159": "CellTest::::cellCenter()",
      "160": "CellTest::::cellCenter()",
      "165": "CellTest::::setLetterSpacing()",
      "166": "CellTest::::setLetterSpacing()",
      "167": "CellTest::::setLetterSpacing()",
      "168": "CellTest::::setLetterSpacing()",
      "169": "CellTest::::setLetterSpacing()",
      "170": "CellTest::::setLetterSpacing()",
      "171": "CellTest::::setLetterSpacing()",
      "172": "CellTest::::setLetterSpacing()",
      "173": "CellTest::::setLetterSpacing()",
      "174": "CellTest::::setLetterSpacing()",
      "175": "CellTest::::setLetterSpacing()",
      "176": "CellTest::::setLetterSpacing()",
      "177": "CellTest::::setLetterSpacing()",
      "178": "CellTest::::setLetterSpacing()",
      "179": "CellTest::::setLetterSpacing()",
      "180": "CellTest::::setLetterSpacing()",
      "181": "CellTest::::setLetterSpacing()",
      "182": "CellTest::::setLetterSpacing()",
      "183": "CellTest::::setLetterSpacing()",
      "184": "CellTest::::setLetterSpacing()",
      "185": "CellTest::::setLetterSpacing()",
      "186": "CellTest::::setLetterSpacing()",
      "187": "CellTest::::setLetterSpacing()",
      "188": "CellTest::::setLetterSpacing()",
      "189": "CellTest::::setLetterSpacing()",
      "190": "CellTest::::setLetterSpacing()",
      "191": "CellTest::::setLetterSpacing()",
      "192": "CellTest::::setLetterSpacing()",
      "193": "CellTest::::setLetterSpacing()",
      "194": "CellTest::::setLetterSpacing()",
      "195": "CellTest::::setLetterSpacing()",
      "196": "CellTest::::setLetterSpacing()",
      "197": "CellTest::::setLetterSpacing()",
      "202": "CellTest::::setLineHeight()",
      "203": "CellTest::::setLineHeight()",
      "204": "CellTest::::setLineHeight()",
      "205": "CellTest::::setLineHeight()",
      "206": "CellTest::::setLineHeight()",
      "207": "CellTest::::setLineHeight()",
      "208": "CellTest::::setLineHeight()",
      "209": "CellTest::::setLineHeight()",
      "210": "CellTest::::setLineHeight()",
      "211": "CellTest::::setLineHeight()",
      "212": "CellTest::::setLineHeight()",
      "213": "CellTest::::setLineHeight()",
      "214": "CellTest::::setLineHeight()",
      "215": "CellTest::::setLineHeight()",
      "216": "CellTest::::setLineHeight()",
      "217": "CellTest::::setLineHeight()",
      "218": "CellTest::::setLineHeight()",
      "219": "CellTest::::setLineHeight()",
      "220": "CellTest::::setLineHeight()",
      "221": "CellTest::::setLineHeight()",
      "222": "CellTest::::setLineHeight()",
      "223": "CellTest::::setLineHeight()",
      "224": "CellTest::::setLineHeight()",
      "225": "CellTest::::setLineHeight()",
      "226": "CellTest::::setLineHeight()",
      "227": "CellTest::::setLineHeight()",
      "228": "CellTest::::setLineHeight()",
      "229": "CellTest::::setLineHeight()",
      "230": "CellTest::::setLineHeight()",
      "231": "CellTest::::setLineHeight()",
      "232": "CellTest::::setLineHeight()",
      "233": "CellTest::::setLineHeight()",
      "234": "CellTest::::setLineHeight()",
      "235": "CellTest::::setLineHeight()",
      "236": "CellTest::::setLineHeight()",
      "243": "CellTest::::setUnderline()",
      "244": "CellTest::::setUnderline()",
      "245": "CellTest::::setUnderline()",
      "246": "CellTest::::setUnderline()",
      "247": "CellTest::::setUnderline()",
      "248": "CellTest::::setUnderline()",
      "249": "CellTest::::setUnderline()",
      "250": "CellTest::::setUnderline()",
      "251": "CellTest::::setUnderline()",
      "252": "CellTest::::setUnderline()",
      "253": "CellTest::::setUnderline()",
      "254": "CellTest::::setUnderline()",
      "255": "CellTest::::setUnderline()",
      "256": "CellTest::::setUnderline()",
      "257": "CellTest::::setUnderline()",
      "258": "CellTest::::setUnderline()",
      "259": "CellTest::::setUnderline()",
      "260": "CellTest::::setUnderline()",
      "261": "CellTest::::setUnderline()",
      "262": "CellTest::::setUnderline()",
      "263": "CellTest::::setUnderline()",
      "264": "CellTest::::setUnderline()",
      "265": "CellTest::::setUnderline()",
      "266": "CellTest::::setUnderline()",
      "267": "CellTest::::setUnderline()",
      "272": "CellTest::::setDeleteLine()",
      "273": "CellTest::::setDeleteLine()",
      "274": "CellTest::::setDeleteLine()",
      "275": "CellTest::::setDeleteLine()",
      "276": "CellTest::::setDeleteLine()",
      "277": "CellTest::::setDeleteLine()",
      "278": "CellTest::::setDeleteLine()",
      "279": "CellTest::::setDeleteLine()",
      "280": "CellTest::::setDeleteLine()",
      "281": "CellTest::::setDeleteLine()",
      "282": "CellTest::::setDeleteLine()",
      "283": "CellTest::::setDeleteLine()",
      "284": "CellTest::::setDeleteLine()",
      "285": "CellTest::::setDeleteLine()",
      "286": "CellTest::::setDeleteLine()",
      "287": "CellTest::::setDeleteLine()",
      "288": "CellTest::::setDeleteLine()",
      "289": "CellTest::::setDeleteLine()",
      "290": "CellTest::::setDeleteLine()",
      "291": "CellTest::::setDeleteLine()",
      "292": "CellTest::::setDeleteLine()",
      "293": "CellTest::::setDeleteLine()",
      "294": "CellTest::::setDeleteLine()",
      "295": "CellTest::::setDeleteLine()",
      "296": "CellTest::::setDeleteLine()",
      "301": "CellTest::::setFontColor()",
      "302": "CellTest::::setFontColor()",
      "303": "CellTest::::setFontColor()",
      "304": "CellTest::::setFontColor()",
      "305": "CellTest::::setFontColor()",
      "306": "CellTest::::setFontColor()",
      "307": "CellTest::::setFontColor()",
      "308": "CellTest::::setFontColor()",
      "309": "CellTest::::setFontColor()",
      "310": "CellTest::::setFontColor()",
      "311": "CellTest::::setFontColor()",
      "312": "CellTest::::setFontColor()",
      "313": "CellTest::::setFontColor()",
      "314": "CellTest::::setFontColor()",
      "315": "CellTest::::setFontColor()",
      "316": "CellTest::::setFontColor()",
      "317": "CellTest::::setFontColor()",
      "322": "CellTest::::setFontExt()",
      "323": "CellTest::::setFontExt()",
      "324": "CellTest::::setFontExt()",
      "325": "CellTest::::setFontExt()",
      "326": "CellTest::::setFontExt()",
      "327": "CellTest::::setFontExt()",
      "328": "CellTest::::setFontExt()",
      "329": "CellTest::::setFontExt()",
      "330": "CellTest::::setFontExt()",
      "331": "CellTest::::setFontExt()",
      "332": "CellTest::::setFontExt()",
      "333": "CellTest::::setFontExt()",
      "334": "CellTest::::setFontExt()",
      "335": "CellTest::::setFontExt()",
      "336": "CellTest::::setFontExt()",
      "337": "CellTest::::setFontExt()",
      "338": "CellTest::::setFontExt()",
      "339": "CellTest::::setFontExt()",
      "340": "CellTest::::setFontExt()",
      "341": "CellTest::::setFontExt()",
      "342": "CellTest::::setFontExt()",
      "343": "CellTest::::setFontExt()",
      "344": "CellTest::::setFontExt()",
      "345": "CellTest::::setFontExt()",
      "346": "CellTest::::setFontExt()",
      "347": "CellTest::::setFontExt()",
      "348": "CellTest::::setFontExt()",
      "349": "CellTest::::setFontExt()",
      "350": "CellTest::::setFontExt()",
      "351": "CellTest::::setFontExt()"
    },
    "tests": [
      {
        "test_lines": [
          21,
          49
        ],
        "covered_lines": [
          29,
          30,
          31,
          32,
          56,
          59,
          60,
          70,
          90,
          91,
          194,
          195,
          214,
          215
        ]
      },
      {
        "test_lines": [
          54,
          83
        ],
        "covered_lines": [
          43,
          44,
          45,
          46,
          56,
          59,
          60,
          70,
          90,
          91,
          194,
          195,
          214,
          215
        ]
      },
      {
        "test_lines": [
          89,
          123
        ],
        "covered_lines": [
          29,
          30,
          31,
          32,
          56,
          59,
          60,
          70,
          90,
          91,
          103,
          104,
          194,
          195,
          214,
          215
        ]
      },
      {
        "test_lines": [
          128,
          160
        ],
        "covered_lines": [
          29,
          30,
          31,
          32,
          56,
          59,
          60,
          70,
          90,
          91,
          194,
          195,
          214,
          215
        ]
      },
      {
        "test_lines": [
          165,
          197
        ],
        "covered_lines": [
          29,
          30,
          31,
          32,
          56,
          59,
          60,
          70,
          90,
          91,
          194,
          195,
          214,
          215,
          337,
          338
        ]
      },
      {
        "test_lines": [
          202,
          236
        ],
        "covered_lines": [
          29,
          30,
          31,
          32,
          56,
          59,
          60,
          70,
          90,
          91,
          194,
          195,
          214,
          215,
          254,
          255
        ]
      },
      {
        "test_lines": [
          243,
          267
        ],
        "covered_lines": [
          29,
          30,
          31,
          32,
          56,
          59,
          60,
          70,
          90,
          91,
          194,
          195,
          214,
          215,
          348,
          349
        ]
      },
      {
        "test_lines": [
          272,
          296
        ],
        "covered_lines": [
          29,
          30,
          31,
          32,
          56,
          59,
          60,
          70,
          90,
          91,
          194,
          195,
          214,
          215,
          368,
          369
        ]
      },
      {
        "test_lines": [
          301,
          317
        ],
        "covered_lines": [
          29,
          30,
          31,
          32,
          56,
          59,
          60,
          70,
          90,
          91,
          137,
          140,
          141,
          194,
          195,
          214,
          215
        ]
      },
      {
        "test_lines": [
          322,
          351
        ],
        "covered_lines": [
          29,
          30,
          31,
          32,
          56,
          59,
          60,
          70,
          90,
          91,
          174,
          175,
          194,
          195,
          214,
          215
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-layout/src/main/java/org/ofdrw/layout/element/canvas/Line.java": {
    "class_content": [
      "package org.ofdrw.layout.element.canvas;\n",
      "\n",
      "import java.io.IOException;\n",
      "\n",
      "/**\n",
      " * OFDRW \u7ebf\u6761\u5143\u7d20\uff0c\u7528\u4e8e\u5feb\u901f\u6784\u5efa\u4e00\u6761\u7ebf\u6761\u3002\n",
      " * <p>\n",
      " * \u82e5\u9700\u8981\u7ed8\u5236\u590d\u6742\u56fe\u5f62\uff0c\u8bf7\u4f7f\u7528 {@link Canvas} \u5bf9\u8c61\uff0c\u5e76\u63d0\u4f9b {@link  Drawer}\u5b9e\u73b0\uff0c\u5728Drawer\u4e2d\u4f7f\u7528\u7ed8\u5236\u4e0a\u4e0b\u6587\u7ed8\u5236\u3002\n",
      " * <p>\n",
      " * \u82e5\u7ed8\u5236\u7b80\u5355\u77e9\u5f62\uff0c\u53ef\u4ee5\u4f7f\u7528 {@link org.ofdrw.layout.element.Div} \u5bf9\u8c61\u8bbe\u7f6e\u8fb9\u6846 \u5b9e\u73b0\u3002\n",
      " *\n",
      " * @author \u5f20\u70b3\u6052\n",
      " * @since 2024-5-27 18:50:52\n",
      " */\n",
      "public class Line extends CanvasBase {\n",
      "\n",
      "    /**\n",
      "     * \u7ebf\u6761\u8d77\u70b9\u5750\u6807(x,y)\n",
      "     */\n",
      "    private double[] beginPoint = new double[]{0, 0};\n",
      "\n",
      "    /**\n",
      "     * \u7ebf\u6761\u7ec8\u70b9\u5750\u6807(x,y)\n",
      "     */\n",
      "    private double[] endPoint = new double[]{0, 0};\n",
      "\n",
      "    /**\n",
      "     * \u7ebf\u6761\u989c\u8272\n",
      "     * \u652f\u6301\u683c\u5f0f\uff1a#000000\u3001rgb(0,0,0)\u3001rgba(0,0,0,1)\u3001black\n",
      "     */\n",
      "    private String lineColor = \"#000000\";\n",
      "\n",
      "    /**\n",
      "     * \u7ebf\u6761\u5bbd\u5ea6\uff0c\u9ed8\u8ba4 0.353mm\n",
      "     */\n",
      "    private double lineWidth = 0.353d;\n",
      "\n",
      "    /**\n",
      "     * \u7ebf\u5bf9\u8c61\u900f\u660e\u5ea6 [0,1]\uff0c\u9ed8\u8ba4\u4e3a 1 \u4e0d\u900f\u660e\n",
      "     */\n",
      "    private double lineOpacity = 1.0d;\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u7ebf\u5bf9\u8c61\n",
      "     *\n",
      "     * @param width  \u753b\u7ebf\u533a\u57df\u7684\u5bbd\u5ea6\uff0c\u5355\u4f4d\uff1a\u6beb\u7c73mm\n",
      "     * @param height \u753b\u7ebf\u533a\u57df\u9ad8\u5ea6\uff0c\u5355\u4f4d\uff1a\u6beb\u7c73mm\n",
      "     */\n",
      "    public Line(Double width, Double height) {\n",
      "        super(width, height);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u7ebf\u5bf9\u8c61\n",
      "     *\n",
      "     * @param x \u753b\u7ebf\u533a\u57df\u5de6\u4e0a\u89d2\u7684x\u5750\u6807\uff0c\u5355\u4f4d\uff1a\u6beb\u7c73mm\n",
      "     * @param y \u753b\u7ebf\u533a\u57df\u5de6\u4e0a\u89d2\u7684y\u5750\u6807\uff0c\u5355\u4f4d\uff1a\u6beb\u7c73mm\n",
      "     * @param w \u753b\u7ebf\u533a\u57df\u7684\u5bbd\u5ea6\uff0c\u5355\u4f4d\uff1a\u6beb\u7c73mm\n",
      "     * @param h \u753b\u7ebf\u533a\u57df\u9ad8\u5ea6\uff0c\u5355\u4f4d\uff1a\u6beb\u7c73mm\n",
      "     */\n",
      "    public Line(double x, double y, double w, double h) {\n",
      "        super(x, y, w, h);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u7ebf\u7684\u8d77\u59cb\u70b9\n",
      "     *\n",
      "     * @return \u7ebf\u7684\u8d77\u59cb\u70b9\u5750\u6807 [x, y]\uff0c\u53ef\u80fd\u4e3aNULL\u3002\n",
      "     */\n",
      "    public double[] getBeginPoint() {\n",
      "        return beginPoint;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u7ebf\u7684\u8d77\u59cb\u70b9\n",
      "     *\n",
      "     * @param beginPoint \u7ebf\u7684\u8d77\u59cb\u70b9\u5728\u753b\u5e03\u4e0a\u7684\u5750\u6807 [x, y]\n",
      "     * @return this\n",
      "     */\n",
      "    public Line setBeginPoint(double[] beginPoint) {\n",
      "        this.beginPoint = beginPoint;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u7ebf\u7684\u8d77\u59cb\u70b9\n",
      "     *\n",
      "     * @param beginX \u7ebf\u7684\u8d77\u59cb\u70b9\u5728\u753b\u5e03\u4e0a\u7684x\u5750\u6807\uff0c\u5355\u4f4d\uff1a\u6beb\u7c73mm\n",
      "     * @param beginY \u7ebf\u7684\u8d77\u59cb\u70b9\u5728\u753b\u5e03\u4e0a\u7684y\u5750\u6807\uff0c\u5355\u4f4d\uff1a\u6beb\u7c73mm\n",
      "     * @return this\n",
      "     */\n",
      "    public Line setBeginPoint(double beginX, double beginY) {\n",
      "        this.beginPoint = new double[]{beginX, beginY};\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u7ebf\u7684\u7ed3\u675f\u70b9\n",
      "     *\n",
      "     * @return \u7ebf\u7684\u7ed3\u675f\u70b9\u5750\u6807 [x, y]\uff0c\u53ef\u80fd\u4e3aNULL\u3002\n",
      "     */\n",
      "    public double[] getEndPoint() {\n",
      "        return endPoint;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u7ebf\u7684\u7ed3\u675f\u70b9\n",
      "     *\n",
      "     * @param endPoint \u7ebf\u7684\u7ed3\u675f\u70b9\u5728\u753b\u5e03\u4e0a\u7684\u5750\u6807 [x, y]\n",
      "     * @return this\n",
      "     */\n",
      "    public Line setEndPoint(double[] endPoint) {\n",
      "        this.endPoint = endPoint;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u7ebf\u7684\u7ed3\u675f\u70b9\n",
      "     *\n",
      "     * @param endX \u7ebf\u7684\u7ed3\u675f\u70b9\u5728\u753b\u5e03\u4e0a\u7684x\u5750\u6807\uff0c\u5355\u4f4d\uff1a\u6beb\u7c73mm\n",
      "     * @param endY \u7ebf\u7684\u7ed3\u675f\u70b9\u5728\u753b\u5e03\u4e0a\u7684y\u5750\u6807\uff0c\u5355\u4f4d\uff1a\u6beb\u7c73mm\n",
      "     * @return this\n",
      "     */\n",
      "    public Line setEndPoint(double endX, double endY) {\n",
      "        this.endPoint = new double[]{endX, endY};\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u7ebf\u7684\u989c\u8272\n",
      "     *\n",
      "     * @return \u7ebf\u7684\u989c\u8272 \u683c\u5f0f\uff1a#000000\u3001rgb(0,0,0)\u3001rgba(0,0,0,1)\u3001black\n",
      "     */\n",
      "    public String getLineColor() {\n",
      "        return lineColor;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u7ebf\u7684\u989c\u8272\n",
      "     *\n",
      "     * @param lineColor \u7ebf\u7684\u989c\u8272\uff0c\u683c\u5f0f\uff1a#000000\u3001rgb(0,0,0)\u3001rgba(0,0,0,1)\u3001black\n",
      "     */\n",
      "    public Line setLineColor(String lineColor) {\n",
      "        this.lineColor = lineColor;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u7ebf\u7684\u5bbd\u5ea6\n",
      "     *\n",
      "     * @return \u7ebf\u7684\u5bbd\u5ea6\n",
      "     */\n",
      "    public double getLineWidth() {\n",
      "        return lineWidth;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u7ebf\u7684\u5bbd\u5ea6\n",
      "     *\n",
      "     * @param lineWidth \u7ebf\u7684\u5bbd\u5ea6\uff0c\u5355\u4f4d \u6beb\u7c73mm\n",
      "     */\n",
      "    public Line setLineWidth(double lineWidth) {\n",
      "        this.lineWidth = lineWidth;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u7ebf\u7684\u900f\u660e\u5ea6\n",
      "     *\n",
      "     * @return \u7ebf\u7684\u900f\u660e\u5ea6 [0,1]\n",
      "     */\n",
      "    public double getLineOpacity() {\n",
      "        return lineOpacity;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u7ebf\u7684\u900f\u660e\u5ea6\n",
      "     *\n",
      "     * @param lineOpacity \u7ebf\u7684\u900f\u660e\u5ea6\uff0c\u8303\u56f4 [0,1]\n",
      "     * @return this\n",
      "     */\n",
      "    public Line setLineOpacity(double lineOpacity) {\n",
      "        this.lineOpacity = lineOpacity;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u7ebf\u6761\u7ed8\u5236\u5668\n",
      "     *\n",
      "     * @param ctx \u7ed8\u5236\u4e0a\u4e0b\u6587\n",
      "     * @throws IOException \u7ed8\u5236\u5f02\u5e38\n",
      "     */\n",
      "    public void draw(DrawContext ctx) throws IOException {\n",
      "        if (lineColor == null) {\n",
      "            lineColor = \"#000000\";\n",
      "        }\n",
      "        if (lineWidth <= 0.0d) {\n",
      "            // \u7ebf\u5bbd\u5c0f\u4e8e\u7b49\u4e8e0\u5219\u4e0d\u7ed8\u5236\n",
      "            return;\n",
      "        }\n",
      "        if (beginPoint == null || endPoint.length < 2) {\n",
      "            return;\n",
      "        }\n",
      "        if (endPoint == null || endPoint.length < 2) {\n",
      "            return;\n",
      "        }\n",
      "        // \u8d77\u70b9\u7ec8\u70b9\u76f8\u540c\u5219\u4e0d\u7ed8\u5236\n",
      "        if (beginPoint[0] == endPoint[0] && beginPoint[1] == endPoint[1]) {\n",
      "            return;\n",
      "        }\n",
      "\n",
      "        ctx.save();\n",
      "        try {\n",
      "            ctx.setLineWidth(this.lineWidth);\n",
      "            ctx.beginPath();\n",
      "            ctx.setGlobalAlpha(lineOpacity);\n",
      "            ctx.strokeStyle = lineColor;\n",
      "            ctx.moveTo(beginPoint[0], beginPoint[1]);\n",
      "            ctx.lineTo(endPoint[0], endPoint[1]);\n",
      "            ctx.stroke();\n",
      "        } finally {\n",
      "            ctx.restore();\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.layout.element.canvas;\n",
      "\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.ofdrw.layout.OFDDoc;\n",
      "import org.ofdrw.layout.VirtualPage;\n",
      "\n",
      "import java.io.IOException;\n",
      "import java.nio.file.Path;\n",
      "import java.nio.file.Paths;\n",
      "\n",
      "/**\n",
      " * \u7ebf\u6761\u5143\u7d20\u6d4b\u8bd5\n",
      " */\n",
      "class LineTest {\n",
      "\n",
      "    /**\n",
      "     * \u6dfb\u52a0\u7ebf\u6761 \u7edd\u5bf9\u5b9a\u4f4d\n",
      "     */\n",
      "    @Test\n",
      "    void testLineAds() throws IOException {\n",
      "        Path outP = Paths.get(\"target/line-element-abs.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            Line line = new Line(50d, 50d, 100d, 100d)\n",
      "                    .setBeginPoint(0, 0)\n",
      "                    .setEndPoint(50d, 50d)\n",
      "                    .setLineWidth(0.75d)\n",
      "                    .setLineOpacity(0.5)\n",
      "                    .setLineColor(\"#FF0000\");\n",
      "            VirtualPage vPage = new VirtualPage(210d, 297d);\n",
      "            vPage.add(line);\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\">> \u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6dfb\u52a0\u7ebf\u6761 \u6d41\u5f0f\u5b9a\u4f4d\n",
      "     */\n",
      "    @Test\n",
      "    void testLineStream() throws IOException {\n",
      "        Path outP = Paths.get(\"target/line-element.ofd\");\n",
      "\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            Line line = new Line( 100d, 100d)\n",
      "                    .setBeginPoint(0, 0)\n",
      "                    .setEndPoint(50d, 50d)\n",
      "                    .setLineWidth(0.75d)\n",
      "                    .setLineOpacity(0.5)\n",
      "                    .setLineColor(\"#FF0000\");\n",
      "            ofdDoc.add(line);\n",
      "        }\n",
      "        System.out.println(\">> \u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath());\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "Line::::getBeginPoint()": [
        71,
        73
      ],
      "Line::::setBeginPoint(double[])": [
        81,
        84
      ],
      "Line::::setBeginPoint(double,double)": [
        93,
        96
      ],
      "Line::::getEndPoint()": [
        103,
        105
      ],
      "Line::::setEndPoint(double[])": [
        113,
        116
      ],
      "Line::::setEndPoint(double,double)": [
        125,
        128
      ],
      "Line::::getLineColor()": [
        135,
        137
      ],
      "Line::::setLineColor(java.lang.String)": [
        144,
        147
      ],
      "Line::::getLineWidth()": [
        154,
        156
      ],
      "Line::::setLineWidth(double)": [
        163,
        166
      ],
      "Line::::getLineOpacity()": [
        173,
        175
      ],
      "Line::::setLineOpacity(double)": [
        183,
        186
      ],
      "Line::::draw(org.ofdrw.layout.element.canvas.DrawContext)": [
        194,
        225
      ]
    },
    "test_method_lines_dic": {
      "LineTest::::testLineAds()": [
        19,
        34
      ],
      "LineTest::::testLineStream()": [
        39,
        53
      ]
    },
    "reverse_method_lines_dic": {
      "71": "Line::::getBeginPoint()",
      "72": "Line::::getBeginPoint()",
      "73": "Line::::getBeginPoint()",
      "81": "Line::::setBeginPoint(double[])",
      "82": "Line::::setBeginPoint(double[])",
      "83": "Line::::setBeginPoint(double[])",
      "84": "Line::::setBeginPoint(double[])",
      "93": "Line::::setBeginPoint(double,double)",
      "94": "Line::::setBeginPoint(double,double)",
      "95": "Line::::setBeginPoint(double,double)",
      "96": "Line::::setBeginPoint(double,double)",
      "103": "Line::::getEndPoint()",
      "104": "Line::::getEndPoint()",
      "105": "Line::::getEndPoint()",
      "113": "Line::::setEndPoint(double[])",
      "114": "Line::::setEndPoint(double[])",
      "115": "Line::::setEndPoint(double[])",
      "116": "Line::::setEndPoint(double[])",
      "125": "Line::::setEndPoint(double,double)",
      "126": "Line::::setEndPoint(double,double)",
      "127": "Line::::setEndPoint(double,double)",
      "128": "Line::::setEndPoint(double,double)",
      "135": "Line::::getLineColor()",
      "136": "Line::::getLineColor()",
      "137": "Line::::getLineColor()",
      "144": "Line::::setLineColor(java.lang.String)",
      "145": "Line::::setLineColor(java.lang.String)",
      "146": "Line::::setLineColor(java.lang.String)",
      "147": "Line::::setLineColor(java.lang.String)",
      "154": "Line::::getLineWidth()",
      "155": "Line::::getLineWidth()",
      "156": "Line::::getLineWidth()",
      "163": "Line::::setLineWidth(double)",
      "164": "Line::::setLineWidth(double)",
      "165": "Line::::setLineWidth(double)",
      "166": "Line::::setLineWidth(double)",
      "173": "Line::::getLineOpacity()",
      "174": "Line::::getLineOpacity()",
      "175": "Line::::getLineOpacity()",
      "183": "Line::::setLineOpacity(double)",
      "184": "Line::::setLineOpacity(double)",
      "185": "Line::::setLineOpacity(double)",
      "186": "Line::::setLineOpacity(double)",
      "194": "Line::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "195": "Line::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "196": "Line::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "197": "Line::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "198": "Line::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "199": "Line::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "200": "Line::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "201": "Line::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "202": "Line::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "203": "Line::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "204": "Line::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "205": "Line::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "206": "Line::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "207": "Line::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "208": "Line::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "209": "Line::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "210": "Line::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "211": "Line::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "212": "Line::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "213": "Line::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "214": "Line::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "215": "Line::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "216": "Line::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "217": "Line::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "218": "Line::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "219": "Line::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "220": "Line::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "221": "Line::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "222": "Line::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "223": "Line::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "224": "Line::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "225": "Line::::draw(org.ofdrw.layout.element.canvas.DrawContext)"
    },
    "test_reverse_method_lines_dic": {
      "19": "LineTest::::testLineAds()",
      "20": "LineTest::::testLineAds()",
      "21": "LineTest::::testLineAds()",
      "22": "LineTest::::testLineAds()",
      "23": "LineTest::::testLineAds()",
      "24": "LineTest::::testLineAds()",
      "25": "LineTest::::testLineAds()",
      "26": "LineTest::::testLineAds()",
      "27": "LineTest::::testLineAds()",
      "28": "LineTest::::testLineAds()",
      "29": "LineTest::::testLineAds()",
      "30": "LineTest::::testLineAds()",
      "31": "LineTest::::testLineAds()",
      "32": "LineTest::::testLineAds()",
      "33": "LineTest::::testLineAds()",
      "34": "LineTest::::testLineAds()",
      "39": "LineTest::::testLineStream()",
      "40": "LineTest::::testLineStream()",
      "41": "LineTest::::testLineStream()",
      "42": "LineTest::::testLineStream()",
      "43": "LineTest::::testLineStream()",
      "44": "LineTest::::testLineStream()",
      "45": "LineTest::::testLineStream()",
      "46": "LineTest::::testLineStream()",
      "47": "LineTest::::testLineStream()",
      "48": "LineTest::::testLineStream()",
      "49": "LineTest::::testLineStream()",
      "50": "LineTest::::testLineStream()",
      "51": "LineTest::::testLineStream()",
      "52": "LineTest::::testLineStream()",
      "53": "LineTest::::testLineStream()"
    },
    "tests": [
      {
        "test_lines": [
          19,
          34
        ],
        "covered_lines": [
          20,
          25,
          31,
          36,
          41,
          63,
          64,
          94,
          95,
          126,
          127,
          145,
          146,
          164,
          165,
          184,
          185,
          195,
          198,
          202,
          205,
          209,
          213,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          223,
          224,
          225
        ]
      },
      {
        "test_lines": [
          39,
          53
        ],
        "covered_lines": [
          20,
          25,
          31,
          36,
          41,
          51,
          52,
          94,
          95,
          126,
          127,
          145,
          146,
          164,
          165,
          184,
          185,
          195,
          198,
          202,
          205,
          209,
          213,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          223,
          224,
          225
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-layout/src/main/java/org/ofdrw/layout/element/canvas/CellContentDrawer.java": {
    "class_content": [
      "package org.ofdrw.layout.element.canvas;\n",
      "\n",
      "import org.ofdrw.core.basicType.STBase;\n",
      "\n",
      "import javax.imageio.ImageIO;\n",
      "import java.awt.image.BufferedImage;\n",
      "import java.io.IOException;\n",
      "import java.nio.file.Files;\n",
      "import java.nio.file.Path;\n",
      "import java.util.LinkedList;\n",
      "\n",
      "/**\n",
      " * \u7c7b\u5355\u5143\u683c\u7279\u6b8aCanvas \u7ed8\u5236\u5668\n",
      " * <p>\n",
      " * \u53ef\u4ee5\u5b9e\u73b0\u7c7b\u4f3c\u4e8e\u5355\u5143\u4e2a\u6548\u679c\uff0c\u7528\u4e8e\u7b80\u5316\u533a\u57df\u5360\u4f4d\u533a\u5757\u7ed8\u5236\u3002\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2023-11-13 18:48:53\n",
      " */\n",
      "public class CellContentDrawer implements Drawer {\n",
      "\n",
      "    /**\n",
      "     * \u8c03\u8bd5\u5f00\u5173\uff0c\u5728\u5f00\u542f\u540e\u4f1a\u7ed8\u5236\u8f85\u52a9\u7ebf\n",
      "     */\n",
      "    public static Boolean DEBUG = false;\n",
      "\n",
      "    /**\n",
      "     * Canvas\u5bf9\u8c61\n",
      "     */\n",
      "    private final Canvas canvas;\n",
      "\n",
      "    /**\n",
      "     * \u5355\u5143\u683c\u6587\u5b57\u5185\u5bb9\n",
      "     */\n",
      "    private String value;\n",
      "\n",
      "    /**\n",
      "     * \u6587\u5b57\u6c34\u5e73\u6d6e\u52a8\u65b9\u5f0f\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\uff1a\u5de6\u6d6e\u52a8\n",
      "     */\n",
      "    private TextAlign textAlign = TextAlign.left;\n",
      "\n",
      "    /**\n",
      "     * \u6587\u5b57\u5782\u76f4\u65b9\u5411\u6d6e\u52a8\u65b9\u5f0f\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\uff1a\u5c45\u4e2d\n",
      "     */\n",
      "    private VerticalAlign verticalAlign = VerticalAlign.center;\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u6587\u5b57\u989c\u8272\n",
      "     * <p>\n",
      "     * \u652f\u630116\u8fdb\u5236\u989c\u8272\u503c\uff1a#000000\n",
      "     * <p>\n",
      "     * RGB\uff1argb(0,0,0)\n",
      "     * <p>\n",
      "     * RGBA\uff1argba(0,0,0,1)\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\uff1a#000000 \uff08\u9ed1\u8272\uff09\n",
      "     */\n",
      "    private String color = \"#000000\";\n",
      "\n",
      "    /**\n",
      "     * \u5b57\u4f53\u540d\u79f0\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\uff1a\u5b8b\u4f53\n",
      "     */\n",
      "    private String fontName = \"\u5b8b\u4f53\";\n",
      "\n",
      "    /**\n",
      "     * \u5b57\u53f7\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\uff1a3 \uff08\u5355\u4f4d\uff1a\u6beb\u7c73\uff09\n",
      "     */\n",
      "    private double fontSize = 3;\n",
      "\n",
      "    /**\n",
      "     * \u884c\u95f4\u8ddd\n",
      "     */\n",
      "    private Double lineSpace = 0.6;\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u662f\u5426\u52a0\u7c97\n",
      "     */\n",
      "    private Boolean bold = false;\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5b57\u4f53\u5bbd\u5ea6\n",
      "     *\n",
      "     * @return String \u5b57\u4f53\u5bbd\u5ea6\uff0c\u5e94\u9075\u5faa CSS3\u6807\u51c6\uff0c\u53ef\u9009\u503c\u4e3a normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900\n",
      "     */\n",
      "    private String fontWeight = \"normal\";\n",
      "\n",
      "    /**\n",
      "     * \u662f\u5426\u659c\u4f53\n",
      "     */\n",
      "    private Boolean italic = false;\n",
      "\n",
      "    /**\n",
      "     * \u6587\u5b57\u4e4b\u95f4\u7684\u95f4\u8ddd\n",
      "     */\n",
      "    private Double letterSpacing = 0d;\n",
      "\n",
      "    /**\n",
      "     * \u56fe\u7247\n",
      "     */\n",
      "    private Img img = null;\n",
      "\n",
      "    /**\n",
      "     * \u662f\u5426\u6709\u4e0b\u5212\u7ebf\n",
      "     */\n",
      "    private boolean underline = false;\n",
      "\n",
      "    /**\n",
      "     * \u662f\u5426\u5220\u9664\u7ebf\n",
      "     */\n",
      "    private boolean deleteLine = false;\n",
      "\n",
      "    /**\n",
      "     * \u5916\u90e8\u5b57\u4f53\u8def\u5f84\n",
      "     */\n",
      "    private Path extFontPath = null;\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u901a\u8fc7\u5df2\u6709Canvas\u6784\u9020\u5355\u5143\u683c\n",
      "     * <p>\n",
      "     * \u6ce8\u610f\u8be5\u65b9\u6cd5\u5c06\u4f1a\u66ff\u6362Canvas\u7684\u7ed8\u5236\u5668\u4e3a\u5355\u5143\u683c\u7684\u7ed8\u5236\u5668\u3002\n",
      "     *\n",
      "     * @param canvas Canvas\n",
      "     */\n",
      "    public CellContentDrawer(Canvas canvas) {\n",
      "        if (canvas == null) {\n",
      "            throw new IllegalArgumentException(\"Canvas \u4e0d\u80fd\u4e3a\u7a7a\");\n",
      "        }\n",
      "        this.canvas = canvas;\n",
      "        canvas.setDrawer(this);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u521b\u5efa\u5355\u5143\u683c\n",
      "     *\n",
      "     * @param x      \u5de6\u4e0b\u89d2x\u5750\u6807\n",
      "     * @param y      \u5de6\u4e0b\u89d2y\u5750\u6807\n",
      "     * @param width  \u5bbd\u5ea6\n",
      "     * @param height \u9ad8\u5ea6\n",
      "     */\n",
      "    public CellContentDrawer(double x, double y, double width, double height) {\n",
      "        this.canvas = new Canvas(x, y, width, height);\n",
      "        this.canvas.setDrawer(this);\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u6587\u5b57\u884c\n",
      "     */\n",
      "    private static class TextLine {\n",
      "        /**\n",
      "         * \u6587\u672c\u5185\u5bb9\n",
      "         */\n",
      "        public String text;\n",
      "        /**\n",
      "         * \u6587\u672c\u5bbd\u5ea6\n",
      "         */\n",
      "        public double width;\n",
      "\n",
      "        public TextLine(String text, double width) {\n",
      "            this.text = text;\n",
      "            this.width = width;\n",
      "            if (DEBUG) {\n",
      "                System.out.println(\">> text:\" + text + \" width:\" + width);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u56fe\u7247\n",
      "     */\n",
      "    private static class Img {\n",
      "        /**\n",
      "         * \u56fe\u7247\u8def\u5f84\n",
      "         */\n",
      "        public Path path;\n",
      "        /**\n",
      "         * \u56fe\u7247\u5bbd\u5ea6\n",
      "         */\n",
      "        public double width;\n",
      "\n",
      "        /**\n",
      "         * \u56fe\u7247\u9ad8\u5ea6\n",
      "         */\n",
      "        public double height;\n",
      "\n",
      "        public Img(Path path, double width, double height) {\n",
      "            this.path = path;\n",
      "            this.width = width;\n",
      "            this.height = height;\n",
      "        }\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u5355\u5143\u683c\u5185\u90e8\u7ed8\u5236\n",
      "     *\n",
      "     * @param ctx \u7ed8\u5236\u4e0a\u4e0b\u6587\n",
      "     * @throws IOException \u56fe\u5f62\u7ed8\u5236\u5f02\u5e38\n",
      "     */\n",
      "    @Override\n",
      "    public void draw(DrawContext ctx) throws IOException {\n",
      "        ctx.save();\n",
      "        try {\n",
      "            if (this.img != null) {\n",
      "                // \u7ed8\u5236\u56fe\u7247\n",
      "                drawImg(ctx);\n",
      "            } else {\n",
      "                if (extFontPath != null) {\n",
      "                    // \u6dfb\u52a0\u5916\u90e8\u5b57\u4f53\n",
      "                    ctx.addFont(fontName, extFontPath);\n",
      "                }\n",
      "                // \u7ed8\u5236\u6587\u5b57\n",
      "                drawText(ctx);\n",
      "            }\n",
      "        } finally {\n",
      "            ctx.restore();\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5355\u5143\u683c\u56fe\u7247\u7ed8\u5236\n",
      "     *\n",
      "     * @param ctx \u7ed8\u5236\u4e0a\u4e0b\u6587\n",
      "     * @throws IOException \u56fe\u7247\u7ed8\u5236\u5f02\u5e38\n",
      "     */\n",
      "    private void drawImg(DrawContext ctx) throws IOException {\n",
      "        if (this.img == null) {\n",
      "            return;\n",
      "        }\n",
      "        if (this.img.width <= 0 || this.img.height <= 0) {\n",
      "            // \u82e5\u672a\u5bf9\u56fe\u7247\u8fdb\u884c\u5bbd\u9ad8\u8bbe\u7f6e\uff0c\u5219\u4ece\u56fe\u7247\u4e2d\u83b7\u53d6\u5bbd\u9ad8\n",
      "            BufferedImage gImg = ImageIO.read(img.path.toFile());\n",
      "            this.img.width = ctx.mm(gImg.getWidth());\n",
      "            this.img.height = ctx.mm(gImg.getHeight());\n",
      "            if (DEBUG) {\n",
      "                System.out.printf(\">> \u4ece\u56fe\u7247\u4e2d\u83b7\u53d6\u5bbd\u9ad8 img.width:%.2f img.height:%.2f\\n\", img.width, img.height);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        double x = 0;\n",
      "        switch (this.textAlign) {\n",
      "\n",
      "            case right:\n",
      "            case end:\n",
      "                // \u53f3\u6d6e\u52a8\n",
      "                x = canvas.getWidth() - img.width;\n",
      "                break;\n",
      "            case center:\n",
      "                // \u5c45\u4e2d\n",
      "                x = (canvas.getWidth() - img.width) / 2d;\n",
      "                break;\n",
      "            case start:\n",
      "            case left:\n",
      "            default:\n",
      "                // \u5de6\u6d6e\u52a8\n",
      "                x = 0d;\n",
      "                break;\n",
      "        }\n",
      "        double y = 0;\n",
      "        switch (this.verticalAlign) {\n",
      "            case bottom:\n",
      "                y = canvas.getHeight() - img.height;\n",
      "                break;\n",
      "            case center:\n",
      "                y = (canvas.getHeight() - img.height) / 2d;\n",
      "                break;\n",
      "            case top:\n",
      "            default:\n",
      "                y = 0d;\n",
      "                break;\n",
      "        }\n",
      "        ctx.drawImage(img.path, x, y, img.width, img.height);\n",
      "\n",
      "        if (DEBUG) {\n",
      "            debugBorder(ctx);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5355\u5143\u683c\u6587\u5b57\u5185\u5bb9\u7ed8\u5236\n",
      "     *\n",
      "     * @param ctx \u7ed8\u5236\u4e0a\u4e0b\u6587\n",
      "     * @throws IOException \u6587\u5b57\u7ed8\u5236\u5f02\u5e38\n",
      "     */\n",
      "    private void drawText(DrawContext ctx) throws IOException {\n",
      "        if (this.value == null || this.value.isEmpty()) {\n",
      "            return;\n",
      "        }\n",
      "\n",
      "        // \u8bbe\u7f6e\u5b57\u4f53\u6837\u5f0f\n",
      "        String fontStr = \"\";\n",
      "        if (italic) {\n",
      "            fontStr += \"italic \";\n",
      "        }\n",
      "        if (bold) {\n",
      "            fontStr += \"bold \";\n",
      "        } else if (fontWeight != null && !fontWeight.isEmpty()) {\n",
      "            fontStr += fontWeight + \" \";\n",
      "        }\n",
      "        ctx.font = fontStr + STBase.fmt(fontSize) + \"mm \" + fontName;\n",
      "        if (this.letterSpacing != 0) {\n",
      "            // \u8bbe\u7f6e\u5b57\u95f4\u8ddd\n",
      "            ctx.getFont().setLetterSpacing(this.letterSpacing);\n",
      "        }\n",
      "\n",
      "        // \u8bbe\u7f6e\u5b57\u4f53\u989c\u8272\n",
      "        if (this.color != null && !this.color.isEmpty()) {\n",
      "            ctx.fillStyle = this.color;\n",
      "        }\n",
      "\n",
      "        double width = canvas.getWidth();\n",
      "        double height = canvas.getHeight();\n",
      "        TextMetrics textMetrics = ctx.measureText(this.value);\n",
      "\n",
      "\n",
      "        LinkedList<TextLine> lines = new LinkedList<>();\n",
      "        double textLineWidth = 0;\n",
      "        int offset = 0;\n",
      "        // \u5206\u6bb5\n",
      "        for (int i = 0; i < this.value.length(); i++) {\n",
      "            char c = this.value.charAt(i);\n",
      "            // \u6362\u884c\u7b26\u63d0\u524d\u7ed3\u675f\n",
      "            if (c == '\\n') {\n",
      "                lines.add(new TextLine(this.value.substring(offset, i), textLineWidth));\n",
      "                offset = i + 1;\n",
      "                textLineWidth = 0;\n",
      "                continue;\n",
      "            }\n",
      "            double cWidth = 0;\n",
      "            if (i == this.value.length() - 1) {\n",
      "                cWidth = ctx.measureText(String.valueOf(c)).width;\n",
      "            } else {\n",
      "                cWidth = textMetrics.offset[i];\n",
      "            }\n",
      "            if (textLineWidth + cWidth > width) {\n",
      "                // \u8d85\u51fa\u5bbd\u5ea6\uff0c\u6362\u884c\n",
      "                lines.add(new TextLine(this.value.substring(offset, i), textLineWidth));\n",
      "                offset = i;\n",
      "                textLineWidth = cWidth;\n",
      "            } else {\n",
      "                textLineWidth += cWidth;\n",
      "            }\n",
      "        }\n",
      "        // \u6700\u540e\u4e00\u884c\n",
      "        if (offset < this.value.length()) {\n",
      "            lines.add(new TextLine(this.value.substring(offset), textLineWidth));\n",
      "        }\n",
      "\n",
      "\n",
      "        // \u5185\u5bb9\u9ad8\u5ea6\uff1a(\u5b57\u53f7 + \u884c\u95f4\u8ddd) *\u884c\u6570\n",
      "        double contentHeight = (this.fontSize + this.lineSpace) * lines.size();\n",
      "\n",
      "        double offsetY = 0;\n",
      "        // \u7b2c\u4e00\u884c Y \u504f\u79fb\u91cf\u8ba1\u7b97\uff1a\u5b57\u4f53\u5750\u6807\u4f4d\u4e8e\u5b57\u4f53\u7684\u5de6\u4e0b\u89d2\n",
      "        if (this.verticalAlign == VerticalAlign.top) {\n",
      "            offsetY = fontSize;\n",
      "        } else if (this.verticalAlign == VerticalAlign.center) {\n",
      "            offsetY = height / 2 - contentHeight / 2 + fontSize;\n",
      "        } else {\n",
      "            // \u5e95\u90e8\u5bf9\u9f50 \u504f\u79fb\u91cf\u4e3a\uff1a\u603b\u9ad8\u5ea6 - \u5185\u5bb9\u9ad8\u5ea6 + \u5b57\u53f7\n",
      "            offsetY = height - contentHeight + fontSize;\n",
      "        }\n",
      "\n",
      "        for (TextLine line : lines) {\n",
      "            double offsetX = 0;\n",
      "            // \u6309\u7167\u5de6\u53f3\u6d6e\u52a8\u65b9\u5f0f \u4f9d\u6b21\u8ba1\u7b97\u51fa\u6bcf\u884c\u7684X \u504f\u79fb\u91cf\n",
      "            if (this.textAlign == TextAlign.left || this.textAlign == TextAlign.start || this.textAlign == null) {\n",
      "                // \u5de6\u6d6e\u52a8\n",
      "                offsetX = 0;\n",
      "            } else if (this.textAlign == TextAlign.center) {\n",
      "                // \u5c45\u4e2d\n",
      "                offsetX = (width - line.width) / 2d;\n",
      "            } else {\n",
      "                // \u53f3\u6d6e\u52a8\n",
      "                offsetX = width - line.width;\n",
      "            }\n",
      "            if (!\"\".equals(line.text)) {\n",
      "                ctx.fillText(line.text, offsetX, offsetY);\n",
      "            }\n",
      "            // \u6587\u5b57\u88c5\u9970\u7ebf\u6761\u5bbd\u5ea6\n",
      "            // \u6bd4\u4f8b\u7cfb\u6570\u7531\u7ecf\u9a8c\u6307\u5b9a\u65e0\u7279\u5b9a\u89c4\u5219\n",
      "            double fontLineWidth = fontSize / 30;\n",
      "            double underlineOffset = fontLineWidth * 3.2;\n",
      "            // \u4e0b\u5212\u7ebf\n",
      "            if (this.underline) {\n",
      "                ctx.save();\n",
      "                ctx.setLineWidth(fontLineWidth);\n",
      "                ctx.beginPath();\n",
      "                ctx.moveTo(offsetX, offsetY + underlineOffset);\n",
      "                ctx.lineTo(offsetX + line.width, offsetY + underlineOffset);\n",
      "                ctx.stroke();\n",
      "                ctx.restore();\n",
      "            }\n",
      "            // \u5220\u9664\u7ebf\n",
      "            if (this.deleteLine) {\n",
      "                ctx.save();\n",
      "                ctx.setLineWidth(fontLineWidth);\n",
      "                ctx.beginPath();\n",
      "                // \u7531\u4e8e\u6587\u5b57\u5b9a\u4f4d\u5728\u57fa\u7ebf\u4f4d\u7f6e\uff0c\u6b64\u5904\u4ee5 5/18 \u6bd4\u4f8b\u8ba1\u7b97\u51fa\u5220\u9664\u7ebf\u4f4d\u7f6e\uff0c5/18\u4e3a\u7ecf\u9a8c\u503c\uff0c\u65e0\u7279\u6b8a\u610f\u4e49\u3002\n",
      "                ctx.moveTo(offsetX, offsetY - fontSize * 5 / 18);\n",
      "                ctx.lineTo(offsetX + line.width, offsetY - fontSize * 5 / 18);\n",
      "                ctx.stroke();\n",
      "                ctx.restore();\n",
      "            }\n",
      "\n",
      "            if (DEBUG) {\n",
      "                ctx.save();\n",
      "                ctx.setLineDash(1.5d, 1.5d);\n",
      "                ctx.setLineWidth(0.1);\n",
      "                ctx.setGlobalAlpha(0.53);\n",
      "                ctx.strokeStyle = \"rgb(255,0,0)\";\n",
      "                ctx.strokeRect(offsetX, offsetY - fontSize, line.width, fontSize + lineSpace);\n",
      "                ctx.stroke();\n",
      "                ctx.restore();\n",
      "            }\n",
      "            // \u7ed8\u5236\u5b8c\u4e0a\u4e00\u884c\u540e\u5c06offsetY\u79fb\u52a8\u5230\u4e0b\u4e00\u884c\n",
      "            offsetY += this.fontSize + this.lineSpace;\n",
      "        }\n",
      "\n",
      "        if (DEBUG) {\n",
      "            debugBorder(ctx);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u7ed8\u5236\u8f85\u52a9\u7ebf\n",
      "     *\n",
      "     * @param ctx \u7ed8\u5236\u4e0a\u4e0b\u6587\n",
      "     */\n",
      "    private void debugBorder(DrawContext ctx) {\n",
      "\n",
      "        double width = canvas.getWidth();\n",
      "        double height = canvas.getHeight();\n",
      "\n",
      "        ctx.save();\n",
      "        double lineWidth = 0.353d;\n",
      "        ctx.setLineDash(1.5d, 1.5d);\n",
      "        ctx.setLineWidth(lineWidth);\n",
      "        ctx.setGlobalAlpha(0.53);\n",
      "        ctx.strokeStyle = \"rgb(255,0,0)\";\n",
      "        ctx.moveTo(0, 0);\n",
      "        ctx.lineTo(width, height);\n",
      "        ctx.moveTo(width, 0);\n",
      "        ctx.lineTo(0, height);\n",
      "        ctx.rect(0, 0, width, height);\n",
      "        ctx.stroke();\n",
      "\n",
      "        ctx.restore();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5355\u5143\u683c\u6587\u5b57\u5185\u5bb9\n",
      "     *\n",
      "     * @return \u5355\u5143\u683c\u6587\u5b57\u5185\u5bb9\n",
      "     */\n",
      "    public String getValue() {\n",
      "        return value;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u5355\u5143\u683c\u6587\u5b57\u5185\u5bb9\n",
      "     *\n",
      "     * @param value \u5355\u5143\u683c\u6587\u5b57\u5185\u5bb9\n",
      "     * @return this\n",
      "     */\n",
      "    public CellContentDrawer setValue(String value) {\n",
      "        this.value = value;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u56fe\u7247\n",
      "     *\n",
      "     * @param imgPath \u56fe\u7247\u8def\u5f84\uff0c\u4ec5\u652f\u6301png\u3001jpg\u3001jpeg\u3001gif\u3001bmp\u683c\u5f0f\n",
      "     * @param w       \u56fe\u7247\u5bbd\u5ea6\uff0c\u5355\u4f4d\uff1a\u6beb\u7c73\n",
      "     * @param h       \u56fe\u7247\u9ad8\u5ea6\uff0c\u5355\u4f4d\uff1a\u6beb\u7c73\n",
      "     * @return this\n",
      "     */\n",
      "    public CellContentDrawer setValue(Path imgPath, double w, double h) {\n",
      "        this.img = new Img(imgPath, w, h);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u56fe\u7247\n",
      "     * <p>\n",
      "     * \u56fe\u7247\u5bbd\u5ea6\u4e0e\u9ad8\u5ea6\u901a\u8fc7 {@link DrawContext#mm(int)} } \u65b9\u6cd5\u8f6c\u6362\u4e3a\u6beb\u7c73\n",
      "     *\n",
      "     * @param imgPath \u56fe\u7247\u8def\u5f84\uff0c\u4ec5\u652f\u6301png\u3001jpg\u3001jpeg\u3001gif\u3001bmp\u683c\u5f0f\n",
      "     * @return this\n",
      "     * @throws IOException \u56fe\u7247\u52a0\u8f7d\u5f02\u5e38\n",
      "     */\n",
      "    public CellContentDrawer setValue(Path imgPath) throws IOException {\n",
      "        this.img = new Img(imgPath, 0, 0);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5355\u5143\u683c\u989c\u8272\n",
      "     *\n",
      "     * @return \u5355\u5143\u683c\u989c\u8272\uff0c\u683c\u5f0f\uff1a#000000\u3001rgb(0,0,0)\u3001rgba(0,0,0,1)\n",
      "     */\n",
      "    public String getColor() {\n",
      "        return color;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u5355\u5143\u683c\u989c\u8272\n",
      "     *\n",
      "     * @param color \u5355\u5143\u683c\u989c\u8272\uff0c\u683c\u5f0f\uff1a#000000\u3001rgb(0,0,0)\u3001rgba(0,0,0,1)\n",
      "     * @return this\n",
      "     */\n",
      "    public CellContentDrawer setColor(String color) {\n",
      "        if (color == null || color.isEmpty()) {\n",
      "            throw new IllegalArgumentException(\"\u989c\u8272(color)\u4e0d\u80fd\u4e3a\u7a7a\");\n",
      "        }\n",
      "        this.color = color;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5b57\u4f53\u540d\u79f0\n",
      "     *\n",
      "     * @return \u5b57\u4f53\u540d\u79f0\n",
      "     */\n",
      "    public String getFontName() {\n",
      "        return fontName;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u5b57\u4f53\u540d\u79f0\n",
      "     *\n",
      "     * @param fontName \u5b57\u4f53\u540d\u79f0\uff0c\u4ec5\u652f\u6301\u7cfb\u7edf\u5b89\u88c5\u5b57\u4f53\uff0c\u4e14\u4e0d\u4f1a\u5d4c\u5165\u5230OFD\u4e2d\u3002\n",
      "     * @return this\n",
      "     */\n",
      "    public CellContentDrawer setFontName(String fontName) {\n",
      "        this.fontName = fontName;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5b57\u53f7\n",
      "     *\n",
      "     * @return \u5b57\u53f7\uff0c\u9ed8\u8ba4\uff1a0.353 \uff08\u5355\u4f4d\uff1a\u6beb\u7c73\uff09\n",
      "     */\n",
      "    public double getFontSize() {\n",
      "        return fontSize;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u5b57\u53f7\n",
      "     *\n",
      "     * @param fontSize \u5b57\u53f7\uff0c\u9ed8\u8ba4\uff1a3\uff08\u5355\u4f4d\uff1a\u6beb\u7c73\uff09\n",
      "     * @return this\n",
      "     */\n",
      "    public CellContentDrawer setFontSize(double fontSize) {\n",
      "        if (fontSize <= 0) {\n",
      "            throw new IllegalArgumentException(\"\u5b57\u53f7(fontSize)\u5fc5\u987b\u5927\u4e8e0\");\n",
      "        }\n",
      "        this.fontSize = fontSize;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5355\u5143\u683c\u7684Canvas\u5bf9\u8c61\n",
      "     *\n",
      "     * @return \u5355\u5143\u683c\u7684Canvas\u5bf9\u8c61\n",
      "     */\n",
      "    public Canvas getCanvas() {\n",
      "        return canvas;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6 \u6587\u5b57\u5bf9\u9f50\u65b9\u5f0f\n",
      "     *\n",
      "     * @return \u6587\u5b57\u5bf9\u9f50\u65b9\u5f0f\uff0c\u9ed8\u8ba4\uff1a\u5de6\u5bf9\u9f50\n",
      "     */\n",
      "    public TextAlign getTextAlign() {\n",
      "        return textAlign;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e \u6587\u5b57\u5bf9\u9f50\u65b9\u5f0f\n",
      "     *\n",
      "     * @param textAlign \u6587\u5b57\u5bf9\u9f50\u65b9\u5f0f\n",
      "     * @return this\n",
      "     */\n",
      "    public CellContentDrawer setTextAlign(TextAlign textAlign) {\n",
      "        this.textAlign = textAlign;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6 \u6587\u5b57\u5782\u76f4\u65b9\u5411\u6d6e\u52a8\u65b9\u5f0f\n",
      "     *\n",
      "     * @return \u6587\u5b57\u5782\u76f4\u65b9\u5411\u6d6e\u52a8\u65b9\u5f0f\uff0c\u9ed8\u8ba4\uff1a\u5c45\u4e2d {@link VerticalAlign#center}\n",
      "     */\n",
      "    public VerticalAlign getVerticalAlign() {\n",
      "        return verticalAlign;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e \u6587\u5b57\u5782\u76f4\u65b9\u5411\u6d6e\u52a8\u65b9\u5f0f\n",
      "     *\n",
      "     * @param verticalAlign \u6587\u5b57\u5782\u76f4\u65b9\u5411\u6d6e\u52a8\u65b9\u5f0f\n",
      "     * @return this\n",
      "     */\n",
      "    public CellContentDrawer setVerticalAlign(VerticalAlign verticalAlign) {\n",
      "        this.verticalAlign = verticalAlign;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6 \u884c\u95f4\u8ddd\n",
      "     *\n",
      "     * @return \u884c\u95f4\u8ddd\uff0c\u9ed8\u8ba4\u503c 0.6mm\n",
      "     */\n",
      "    public Double getLineSpace() {\n",
      "        return lineSpace;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e \u884c\u95f4\u8ddd\n",
      "     *\n",
      "     * @param lineSpace \u884c\u95f4\u8ddd\n",
      "     * @return this\n",
      "     */\n",
      "    public CellContentDrawer setLineSpace(Double lineSpace) {\n",
      "        this.lineSpace = lineSpace;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * @return \u662f\u5426\u52a0\u7c97\uff0c\u9ed8\u8ba4\uff1a\u4e0d\u52a0\u7c97\n",
      "     * @deprecated \u5355\u8bcd\u9519\u8bef {@link #getBold()}\n",
      "     * \u662f\u5426\u52a0\u7c97\n",
      "     */\n",
      "    @Deprecated\n",
      "    public Boolean getBlob() {\n",
      "        return bold;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * @param bolb \u662f\u5426\u52a0\u7c97\n",
      "     * @return this\n",
      "     * @deprecated \u5355\u8bcd\u9519\u8bef {@link #setBold(Boolean)}\n",
      "     * <p>\n",
      "     * \u8bbe\u7f6e \u662f\u5426\u52a0\u7c97\n",
      "     */\n",
      "    @Deprecated\n",
      "    public CellContentDrawer setBlob(Boolean bolb) {\n",
      "        this.bold = bolb;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u662f\u5426\u52a0\u7c97\n",
      "     *\n",
      "     * @return \u662f\u5426\u52a0\u7c97\uff0c\u9ed8\u8ba4\uff1a\u4e0d\u52a0\u7c97\n",
      "     */\n",
      "    public Boolean getBold() {\n",
      "        return bold;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e \u662f\u5426\u52a0\u7c97\n",
      "     *\n",
      "     * @param bold \u662f\u5426\u52a0\u7c97\n",
      "     * @return this\n",
      "     */\n",
      "    public CellContentDrawer setBold(Boolean bold) {\n",
      "        this.bold = bold;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u662f\u5426\u659c\u4f53\n",
      "     *\n",
      "     * @return true - \u659c\u4f53\u3001false - \u6b63\u5e38\n",
      "     */\n",
      "    public Boolean getItalic() {\n",
      "        return italic;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e \u662f\u5426\u659c\u4f53\n",
      "     *\n",
      "     * @param italic \u662f\u5426\u659c\u4f53\uff0ctrue - \u659c\u4f53\u3001false - \u6b63\u5e38\n",
      "     * @return this\n",
      "     */\n",
      "    public CellContentDrawer setItalic(Boolean italic) {\n",
      "        this.italic = italic;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6 \u6587\u5b57\u4e4b\u95f4\u7684\u95f4\u8ddd\n",
      "     *\n",
      "     * @return \u6587\u5b57\u4e4b\u95f4\u7684\u95f4\u8ddd\uff0c\u9ed8\u8ba4\u4e3a\uff1a0\n",
      "     */\n",
      "    public Double getLetterSpacing() {\n",
      "        return letterSpacing;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e \u6587\u5b57\u4e4b\u95f4\u7684\u95f4\u8ddd\n",
      "     *\n",
      "     * @param letterSpacing \u6587\u5b57\u4e4b\u95f4\u7684\u95f4\u8ddd\uff0c\u53ef\u4ee5\u4e3a\u8d1f\u6570\uff0c\u9ed8\u8ba4\u4e3a\uff1a0\u3002\n",
      "     * @return this\n",
      "     */\n",
      "    public CellContentDrawer setLetterSpacing(Double letterSpacing) {\n",
      "        this.letterSpacing = letterSpacing;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u56fe\u7247\u8def\u5f84\n",
      "     *\n",
      "     * @return \u56fe\u7247\u8def\u5f84\uff0c\u53ef\u80fd\u4e3a\u7a7a\u3002\n",
      "     */\n",
      "    public Path getImgPath() {\n",
      "        if (img == null) {\n",
      "            return null;\n",
      "        }\n",
      "        return img.path;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u56fe\u7247\u9ad8\u5ea6\n",
      "     *\n",
      "     * @return \u56fe\u7247\u9ad8\u5ea6\uff0c\u53ef\u80fd\u4e3a0\u3002\n",
      "     */\n",
      "    public double getImgWidth() {\n",
      "        if (img == null) {\n",
      "            return 0;\n",
      "        }\n",
      "        return img.width;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u56fe\u7247\u5bbd\u5ea6\n",
      "     *\n",
      "     * @return \u56fe\u7247\u5bbd\u5ea6\uff0c\u53ef\u80fd\u4e3a0\u3002\n",
      "     */\n",
      "    public double getImgHeight() {\n",
      "        if (img == null) {\n",
      "            return 0;\n",
      "        }\n",
      "        return img.height;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u662f\u5426\u5f00\u542f\u4e0b\u5212\u7ebf\n",
      "     *\n",
      "     * @param underline true - \u542f\u4e0b\u5212\u7ebf\uff0cfalse - \u7981\u7528\u4e0b\u5212\u7ebf\n",
      "     * @return this\n",
      "     */\n",
      "    public CellContentDrawer setUnderline(boolean underline) {\n",
      "        this.underline = underline;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u662f\u5426\u5f00\u542f\u4e0b\u5212\u7ebf\n",
      "     *\n",
      "     * @return true - \u542f\u4e0b\u5212\u7ebf\uff0cfalse - \u4e0d\u542f\u7528\u4e0b\u5212\u7ebf\n",
      "     */\n",
      "    public boolean getUnderline() {\n",
      "        return this.underline;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u662f\u5426\u5f00\u542f\u5220\u9664\u7ebf\n",
      "     *\n",
      "     * @param deleteLine true - \u542f\u5220\u9664\u7ebf\uff0cfalse - \u7981\u7528\u5220\u9664\u7ebf\n",
      "     * @return this\n",
      "     */\n",
      "    public CellContentDrawer setDeleteLine(boolean deleteLine) {\n",
      "        this.deleteLine = deleteLine;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u662f\u5426\u5f00\u542f\u5220\u9664\u7ebf\n",
      "     *\n",
      "     * @return true - \u542f\u5220\u9664\u7ebf\uff0cfalse - \u7981\u7528\u5220\u9664\u7ebf\n",
      "     */\n",
      "    public boolean getDeleteLine() {\n",
      "        return this.deleteLine;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5b57\u4f53\u5bbd\u5ea6\n",
      "     *\n",
      "     * @return \u5b57\u4f53\u5bbd\u5ea6\uff0c\u9075\u5faa CSS3\u6807\u51c6\uff0c\u53ef\u9009\u503c\u4e3a normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900\n",
      "     */\n",
      "    public String getFontWeight() {\n",
      "        return fontWeight;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u5b57\u4f53\u5bbd\u5ea6\n",
      "     *\n",
      "     * @param fontWeight \u5b57\u4f53\u5bbd\u5ea6\uff0c\u5e94\u9075\u5faa CSS3\u6807\u51c6\uff0c\u53ef\u9009\u503c\u4e3a normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900\n",
      "     */\n",
      "    public void setFontWeight(String fontWeight) {\n",
      "        this.fontWeight = fontWeight;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u5355\u5143\u683c\u7ed8\u5236\u5668\u4f7f\u7528\u7684\u5916\u90e8\u5b57\u4f53\n",
      "     * <p>\n",
      "     * \u6ce8\u610fOFDRW\u4e0d\u4f1a\u63d0\u4f9b\u4efb\u4f55\u5b57\u4f53\u88c1\u526a\u529f\u80fd\uff0c\u60a8\u7684\u5b57\u4f53\u6587\u4ef6\u5c06\u76f4\u63a5\u52a0\u5165OFD\u6587\u4ef6\u4e2d\uff0c\u8fd9\u53ef\u80fd\u9020\u6210\u6587\u4ef6\u4f53\u79ef\u5267\u589e\u3002\n",
      "     *\n",
      "     * @param fontName \u5b57\u4f53\u540d\u79f0\uff0c\u5982\u201c\u601d\u6e90\u5b8b\u4f53\u201d\n",
      "     * @param fontPath \u5b57\u4f53\u6587\u4ef6\u6240\u5728\u8def\u5f84\n",
      "     * @return this\n",
      "     */\n",
      "    public CellContentDrawer setFont(String fontName, Path fontPath) {\n",
      "        if (fontName == null || fontName.isEmpty()) {\n",
      "            throw new IllegalArgumentException(\"\u5b57\u4f53\u540d\u79f0(fontName)\u4e0d\u80fd\u4e3a\u7a7a\");\n",
      "        }\n",
      "        if (fontPath == null || Files.exists(fontPath) == false) {\n",
      "            throw new IllegalArgumentException(\"\u5b57\u4f53\u6587\u4ef6(fontPath)\u4e0d\u5b58\u5728\");\n",
      "        }\n",
      "        this.setFontName(fontName);\n",
      "        this.extFontPath = fontPath;\n",
      "        return null;\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.layout.element.canvas;\n",
      "\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.ofdrw.layout.OFDDoc;\n",
      "import org.ofdrw.layout.VirtualPage;\n",
      "\n",
      "import java.io.IOException;\n",
      "import java.nio.file.Path;\n",
      "import java.nio.file.Paths;\n",
      "\n",
      "class CellContentDrawerTest {\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u9ed8\u8ba4\u6837\u5f0f\u6d4b\u8bd5\n",
      "     */\n",
      "    @Test\n",
      "    void addCellDefault() throws IOException {\n",
      "        Path outP = Paths.get(\"target/cell-default.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "            CellContentDrawer.DEBUG = true;\n",
      "\n",
      "            CellContentDrawer cell = new CellContentDrawer(50, 50,100d, 50d);\n",
      "            cell.setValue(\"OFD Reader And Writer\");\n",
      "\n",
      "            Canvas canvas = cell.getCanvas();\n",
      "            canvas.setBorder(0.353d);\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\">> \u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u53f3\u6d6e\u52a8\n",
      "     */\n",
      "    @Test\n",
      "    void cellTextAlignRight() throws IOException {\n",
      "        Path outP = Paths.get(\"target/cell-textalign-right.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "            CellContentDrawer.DEBUG = true;\n",
      "\n",
      "            CellContentDrawer cell = new CellContentDrawer(50, 50,100d, 50d);\n",
      "            Canvas canvas = cell.getCanvas();\n",
      "            canvas.setBorder(0.353d);\n",
      "            cell.setValue(\"OFD Reader And Writer\");\n",
      "            cell.setTextAlign(TextAlign.right);\n",
      "\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\">> \u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u53f3\u6d6e\u52a8\n",
      "     */\n",
      "    @Test\n",
      "    void cellTextAlignCenter() throws IOException {\n",
      "        Path outP = Paths.get(\"target/cell-textalign-center.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "            CellContentDrawer.DEBUG = true;\n",
      "\n",
      "            CellContentDrawer cell = new CellContentDrawer(50, 50,100d, 50d);\n",
      "            Canvas canvas = cell.getCanvas();\n",
      "            canvas.setBorder(0.353d);\n",
      "//            canvas.setPadding(5d);\n",
      "            cell.setValue(\"OFD Reader And Writer\");\n",
      "            cell.setTextAlign(TextAlign.center);\n",
      "\n",
      "            vPage.add(canvas);\n",
      "\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\">> \u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u9876\u90e8\u6d6e\u52a8\n",
      "     */\n",
      "    @Test\n",
      "    void cellVerticalTop() throws IOException {\n",
      "        Path outP = Paths.get(\"target/cell-top.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "            CellContentDrawer.DEBUG = true;\n",
      "\n",
      "            CellContentDrawer cell = new CellContentDrawer(50, 50,100d, 50d);\n",
      "            Canvas canvas = cell.getCanvas();\n",
      "            canvas.setBorder(0.353d);\n",
      "            cell.setValue(\"OFD Reader And Writer\");\n",
      "            cell.setVerticalAlign(VerticalAlign.top);\n",
      "            cell.setTextAlign(TextAlign.left);\n",
      "\n",
      "            vPage.add(canvas);\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\">> \u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u9876\u90e8\u6d6e\u52a8\n",
      "     */\n",
      "    @Test\n",
      "    void cellVerticalBottomRight() throws IOException {\n",
      "        Path outP = Paths.get(\"target/cell-bottom-right.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "            CellContentDrawer.DEBUG = true;\n",
      "\n",
      "            CellContentDrawer cell = new CellContentDrawer(50, 50,100d, 50d);\n",
      "            Canvas canvas = cell.getCanvas();\n",
      "            canvas.setBorder(0.353d);\n",
      "            cell.setValue(\"OFD Reader And Writer\");\n",
      "            cell.setVerticalAlign(VerticalAlign.bottom);\n",
      "            cell.setTextAlign(TextAlign.right);\n",
      "\n",
      "            vPage.add(canvas);\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\">> \u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8d85\u957f\u5185\u5bb9\u81ea\u52a8\u6362\u884c\n",
      "     */\n",
      "    @Test\n",
      "    void cellLongTextAutoLineBreak() throws IOException {\n",
      "        Path outP = Paths.get(\"target/cell-long-text.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "            CellContentDrawer.DEBUG = true;\n",
      "\n",
      "            CellContentDrawer cell = new CellContentDrawer(50, 50,100d, 50d);\n",
      "            Canvas canvas = cell.getCanvas();\n",
      "            canvas.setBorder(0.353d);\n",
      "            cell.setValue(\"OFD Reader And Writer OFD Reader And Writer OFD Reader And Writer OFD Reader And Writer\");\n",
      "            vPage.add(canvas);\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\">> \u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8d85\u957f\u5185\u5bb9\u542b\u6362\u884c\u7b26\u6362\u884c\n",
      "     */\n",
      "    @Test\n",
      "    void cellLongText() throws IOException {\n",
      "        Path outP = Paths.get(\"target/cell-long-text-line-break.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "            CellContentDrawer.DEBUG = true;\n",
      "\n",
      "            CellContentDrawer cell = new CellContentDrawer(50, 50,100d, 50d);\n",
      "            Canvas canvas = cell.getCanvas();\n",
      "            canvas.setBorder(0.353d);\n",
      "            cell.setValue(\"OFD Reader An\\nd Writer OFD R\\nea\\n\\nder And Writer OFD Reader And Writer OFD Reader And Writer\");\n",
      "\n",
      "            vPage.add(canvas);\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\">> \u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath());\n",
      "    }\n",
      "    /**\n",
      "     * \u8d85\u957f\u5185\u5bb9\u6362\u884c \u53f3\u6d6e\u52a8\n",
      "     */\n",
      "    @Test\n",
      "    void cellLongTextRight() throws IOException {\n",
      "        Path outP = Paths.get(\"target/cell-long-text-right.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "            CellContentDrawer.DEBUG = true;\n",
      "\n",
      "            CellContentDrawer cell = new CellContentDrawer(50, 50,100d, 50d);\n",
      "            Canvas canvas = cell.getCanvas();\n",
      "            canvas.setBorder(0.353d);\n",
      "            cell.setTextAlign(TextAlign.right);\n",
      "            cell.setValue(\"OFD Reader An\\nd Writer OFD R\\nea\\n\\nder And Writer OFD Reader And Writer OFD Reader And Writer\");\n",
      "\n",
      "            vPage.add(canvas);\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\">> \u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u52a0\u7c97\n",
      "     */\n",
      "    @Test\n",
      "    void cellBold() throws IOException {\n",
      "        Path outP = Paths.get(\"target/cell-bold.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "            CellContentDrawer.DEBUG = true;\n",
      "\n",
      "            CellContentDrawer cell = new CellContentDrawer(50, 50,100d, 50d);\n",
      "            Canvas canvas = cell.getCanvas();\n",
      "            canvas.setBorder(0.353d);\n",
      "            cell.setValue(\"OFD Reader And Writer OFD Reader And Writer OFD Reader And Writer OFD Reader And Writer\");\n",
      "            cell.setBold(true);\n",
      "\n",
      "            vPage.add(canvas);\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\">> \u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u52a0\u7c97\n",
      "     */\n",
      "    @Test\n",
      "    void cellItalic() throws IOException {\n",
      "        Path outP = Paths.get(\"target/cell-italic.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "            CellContentDrawer.DEBUG = true;\n",
      "\n",
      "            CellContentDrawer cell = new CellContentDrawer(50, 50,100d, 50d);\n",
      "            Canvas canvas = cell.getCanvas();\n",
      "            canvas.setBorder(0.353d);\n",
      "            cell.setValue(\"OFD Reader And Writer OFD Reader And Writer OFD Reader And Writer OFD Reader And Writer\");\n",
      "            cell.setItalic(true);\n",
      "\n",
      "            vPage.add(canvas);\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\">> \u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u5b57\u95f4\u8ddd\n",
      "     */\n",
      "    @Test\n",
      "    void cellLetterSpace() throws IOException {\n",
      "        Path outP = Paths.get(\"target/cell-letter-space.ofd\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "            CellContentDrawer.DEBUG = true;\n",
      "            CellContentDrawer cell = new CellContentDrawer(50, 50,100d, 50d);\n",
      "            Canvas canvas = cell.getCanvas();\n",
      "            canvas.setBorder(0.353d);\n",
      "            cell.setValue(\"OFD Reader And Writer OFD Reader And Writer OFD Reader And Writer OFD Reader And Writer\");\n",
      "            cell.setLetterSpacing(3d);\n",
      "\n",
      "            vPage.add(canvas);\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\">> \u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u5b57\u95f4\u8ddd\n",
      "     */\n",
      "    @Test\n",
      "    void cellImg() throws IOException {\n",
      "        Path outP = Paths.get(\"target/cell-img.ofd\");\n",
      "        Path img = Paths.get(\"src/test/resources/rhino.jpg\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "            CellContentDrawer.DEBUG = true;\n",
      "            CellContentDrawer cell = new CellContentDrawer(50, 50,100d, 50d);\n",
      "            cell.setValue(img,40, 30);\n",
      "\n",
      "            Canvas canvas = cell.getCanvas();\n",
      "            vPage.add(canvas);\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\">> \u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u56fe\u7247\u5c45\u4e2d\n",
      "     */\n",
      "    @Test\n",
      "    void cellImgCenter() throws IOException {\n",
      "        Path outP = Paths.get(\"target/cell-img-center.ofd\");\n",
      "        Path img = Paths.get(\"src/test/resources/rhino.jpg\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "            CellContentDrawer.DEBUG = true;\n",
      "            CellContentDrawer cell = new CellContentDrawer(50, 50,100d, 50d);\n",
      "            cell.setValue(img,40, 30);\n",
      "            cell.setTextAlign(TextAlign.center);\n",
      "\n",
      "            Canvas canvas = cell.getCanvas();\n",
      "            vPage.add(canvas);\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\">> \u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u56fe\u7247\u53f3\u4e0b\u89d2\n",
      "     */\n",
      "    @Test\n",
      "    void cellImgBottomRight() throws IOException {\n",
      "        Path outP = Paths.get(\"target/cell-img-bottom-right.ofd\");\n",
      "        Path img = Paths.get(\"src/test/resources/rhino.jpg\");\n",
      "        try (OFDDoc ofdDoc = new OFDDoc(outP)) {\n",
      "\n",
      "            VirtualPage vPage = new VirtualPage(ofdDoc.getPageLayout());\n",
      "            CellContentDrawer.DEBUG = true;\n",
      "            CellContentDrawer cell = new CellContentDrawer(50, 50,100d, 50d);\n",
      "            cell.setValue(img,40, 30);\n",
      "            cell.setTextAlign(TextAlign.right);\n",
      "            cell.setVerticalAlign(VerticalAlign.bottom);\n",
      "\n",
      "            Canvas canvas = cell.getCanvas();\n",
      "            vPage.add(canvas);\n",
      "            ofdDoc.addVPage(vPage);\n",
      "        }\n",
      "        System.out.println(\">> \u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath());\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "CellContentDrawer::::draw(org.ofdrw.layout.element.canvas.DrawContext)": [
        211,
        229
      ],
      "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)": [
        237,
        288
      ],
      "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)": [
        296,
        434
      ],
      "CellContentDrawer::::debugBorder(org.ofdrw.layout.element.canvas.DrawContext)": [
        441,
        460
      ],
      "CellContentDrawer::::getValue()": [
        467,
        469
      ],
      "CellContentDrawer::::setValue(java.lang.String)": [
        477,
        480
      ],
      "CellContentDrawer::::setValue(java.nio.file.Path,double,double)": [
        490,
        493
      ],
      "CellContentDrawer::::setValue(java.nio.file.Path)": [
        504,
        507
      ],
      "CellContentDrawer::::getColor()": [
        514,
        516
      ],
      "CellContentDrawer::::setColor(java.lang.String)": [
        524,
        530
      ],
      "CellContentDrawer::::getFontName()": [
        537,
        539
      ],
      "CellContentDrawer::::setFontName(java.lang.String)": [
        547,
        550
      ],
      "CellContentDrawer::::getFontSize()": [
        557,
        559
      ],
      "CellContentDrawer::::setFontSize(double)": [
        567,
        573
      ],
      "CellContentDrawer::::getCanvas()": [
        580,
        582
      ],
      "CellContentDrawer::::getTextAlign()": [
        589,
        591
      ],
      "CellContentDrawer::::setTextAlign(org.ofdrw.layout.element.canvas.TextAlign)": [
        599,
        602
      ],
      "CellContentDrawer::::getVerticalAlign()": [
        609,
        611
      ],
      "CellContentDrawer::::setVerticalAlign(org.ofdrw.layout.element.canvas.VerticalAlign)": [
        619,
        622
      ],
      "CellContentDrawer::::getLineSpace()": [
        629,
        631
      ],
      "CellContentDrawer::::setLineSpace(java.lang.Double)": [
        639,
        642
      ],
      "CellContentDrawer::::getBlob()": [
        649,
        652
      ],
      "CellContentDrawer::::setBlob(java.lang.Boolean)": [
        661,
        665
      ],
      "CellContentDrawer::::getBold()": [
        672,
        674
      ],
      "CellContentDrawer::::setBold(java.lang.Boolean)": [
        682,
        685
      ],
      "CellContentDrawer::::getItalic()": [
        692,
        694
      ],
      "CellContentDrawer::::setItalic(java.lang.Boolean)": [
        702,
        705
      ],
      "CellContentDrawer::::getLetterSpacing()": [
        712,
        714
      ],
      "CellContentDrawer::::setLetterSpacing(java.lang.Double)": [
        722,
        725
      ],
      "CellContentDrawer::::getImgPath()": [
        732,
        737
      ],
      "CellContentDrawer::::getImgWidth()": [
        744,
        749
      ],
      "CellContentDrawer::::getImgHeight()": [
        756,
        761
      ],
      "CellContentDrawer::::setUnderline(boolean)": [
        769,
        772
      ],
      "CellContentDrawer::::getUnderline()": [
        779,
        781
      ],
      "CellContentDrawer::::setDeleteLine(boolean)": [
        789,
        792
      ],
      "CellContentDrawer::::getDeleteLine()": [
        799,
        801
      ],
      "CellContentDrawer::::getFontWeight()": [
        808,
        810
      ],
      "CellContentDrawer::::setFontWeight(java.lang.String)": [
        817,
        819
      ],
      "CellContentDrawer::::setFont(java.lang.String,java.nio.file.Path)": [
        830,
        840
      ]
    },
    "test_method_lines_dic": {
      "CellContentDrawerTest::::addCellDefault()": [
        17,
        34
      ],
      "CellContentDrawerTest::::cellTextAlignRight()": [
        40,
        58
      ],
      "CellContentDrawerTest::::cellTextAlignCenter()": [
        63,
        82
      ],
      "CellContentDrawerTest::::cellVerticalTop()": [
        87,
        105
      ],
      "CellContentDrawerTest::::cellVerticalBottomRight()": [
        110,
        128
      ],
      "CellContentDrawerTest::::cellLongTextAutoLineBreak()": [
        133,
        148
      ],
      "CellContentDrawerTest::::cellLongText()": [
        153,
        169
      ],
      "CellContentDrawerTest::::cellLongTextRight()": [
        173,
        190
      ],
      "CellContentDrawerTest::::cellBold()": [
        195,
        212
      ],
      "CellContentDrawerTest::::cellItalic()": [
        217,
        234
      ],
      "CellContentDrawerTest::::cellLetterSpace()": [
        239,
        256
      ],
      "CellContentDrawerTest::::cellImg()": [
        261,
        277
      ],
      "CellContentDrawerTest::::cellImgCenter()": [
        282,
        299
      ],
      "CellContentDrawerTest::::cellImgBottomRight()": [
        304,
        322
      ]
    },
    "reverse_method_lines_dic": {
      "211": "CellContentDrawer::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "212": "CellContentDrawer::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "213": "CellContentDrawer::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "214": "CellContentDrawer::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "215": "CellContentDrawer::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "216": "CellContentDrawer::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "217": "CellContentDrawer::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "218": "CellContentDrawer::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "219": "CellContentDrawer::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "220": "CellContentDrawer::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "221": "CellContentDrawer::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "222": "CellContentDrawer::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "223": "CellContentDrawer::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "224": "CellContentDrawer::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "225": "CellContentDrawer::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "226": "CellContentDrawer::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "227": "CellContentDrawer::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "228": "CellContentDrawer::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "229": "CellContentDrawer::::draw(org.ofdrw.layout.element.canvas.DrawContext)",
      "237": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "238": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "239": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "240": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "241": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "242": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "243": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "244": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "245": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "246": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "247": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "248": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "249": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "250": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "251": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "252": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "253": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "254": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "255": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "256": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "257": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "258": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "259": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "260": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "261": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "262": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "263": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "264": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "265": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "266": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "267": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "268": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "269": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "270": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "271": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "272": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "273": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "274": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "275": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "276": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "277": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "278": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "279": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "280": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "281": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "282": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "283": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "284": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "285": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "286": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "287": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "288": "CellContentDrawer::::drawImg(org.ofdrw.layout.element.canvas.DrawContext)",
      "296": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "297": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "298": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "299": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "300": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "301": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "302": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "303": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "304": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "305": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "306": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "307": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "308": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "309": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "310": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "311": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "312": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "313": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "314": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "315": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "316": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "317": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "318": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "319": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "320": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "321": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "322": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "323": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "324": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "325": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "326": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "327": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "328": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "329": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "330": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "331": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "332": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "333": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "334": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "335": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "336": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "337": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "338": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "339": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "340": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "341": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "342": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "343": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "344": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "345": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "346": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "347": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "348": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "349": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "350": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "351": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "352": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "353": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "354": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "355": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "356": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "357": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "358": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "359": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "360": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "361": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "362": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "363": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "364": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "365": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "366": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "367": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "368": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "369": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "370": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "371": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "372": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "373": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "374": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "375": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "376": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "377": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "378": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "379": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "380": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "381": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "382": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "383": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "384": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "385": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "386": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "387": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "388": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "389": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "390": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "391": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "392": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "393": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "394": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "395": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "396": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "397": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "398": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "399": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "400": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "401": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "402": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "403": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "404": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "405": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "406": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "407": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "408": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "409": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "410": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "411": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "412": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "413": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "414": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "415": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "416": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "417": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "418": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "419": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "420": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "421": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "422": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "423": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "424": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "425": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "426": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "427": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "428": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "429": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "430": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "431": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "432": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "433": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "434": "CellContentDrawer::::drawText(org.ofdrw.layout.element.canvas.DrawContext)",
      "441": "CellContentDrawer::::debugBorder(org.ofdrw.layout.element.canvas.DrawContext)",
      "442": "CellContentDrawer::::debugBorder(org.ofdrw.layout.element.canvas.DrawContext)",
      "443": "CellContentDrawer::::debugBorder(org.ofdrw.layout.element.canvas.DrawContext)",
      "444": "CellContentDrawer::::debugBorder(org.ofdrw.layout.element.canvas.DrawContext)",
      "445": "CellContentDrawer::::debugBorder(org.ofdrw.layout.element.canvas.DrawContext)",
      "446": "CellContentDrawer::::debugBorder(org.ofdrw.layout.element.canvas.DrawContext)",
      "447": "CellContentDrawer::::debugBorder(org.ofdrw.layout.element.canvas.DrawContext)",
      "448": "CellContentDrawer::::debugBorder(org.ofdrw.layout.element.canvas.DrawContext)",
      "449": "CellContentDrawer::::debugBorder(org.ofdrw.layout.element.canvas.DrawContext)",
      "450": "CellContentDrawer::::debugBorder(org.ofdrw.layout.element.canvas.DrawContext)",
      "451": "CellContentDrawer::::debugBorder(org.ofdrw.layout.element.canvas.DrawContext)",
      "452": "CellContentDrawer::::debugBorder(org.ofdrw.layout.element.canvas.DrawContext)",
      "453": "CellContentDrawer::::debugBorder(org.ofdrw.layout.element.canvas.DrawContext)",
      "454": "CellContentDrawer::::debugBorder(org.ofdrw.layout.element.canvas.DrawContext)",
      "455": "CellContentDrawer::::debugBorder(org.ofdrw.layout.element.canvas.DrawContext)",
      "456": "CellContentDrawer::::debugBorder(org.ofdrw.layout.element.canvas.DrawContext)",
      "457": "CellContentDrawer::::debugBorder(org.ofdrw.layout.element.canvas.DrawContext)",
      "458": "CellContentDrawer::::debugBorder(org.ofdrw.layout.element.canvas.DrawContext)",
      "459": "CellContentDrawer::::debugBorder(org.ofdrw.layout.element.canvas.DrawContext)",
      "460": "CellContentDrawer::::debugBorder(org.ofdrw.layout.element.canvas.DrawContext)",
      "467": "CellContentDrawer::::getValue()",
      "468": "CellContentDrawer::::getValue()",
      "469": "CellContentDrawer::::getValue()",
      "477": "CellContentDrawer::::setValue(java.lang.String)",
      "478": "CellContentDrawer::::setValue(java.lang.String)",
      "479": "CellContentDrawer::::setValue(java.lang.String)",
      "480": "CellContentDrawer::::setValue(java.lang.String)",
      "490": "CellContentDrawer::::setValue(java.nio.file.Path,double,double)",
      "491": "CellContentDrawer::::setValue(java.nio.file.Path,double,double)",
      "492": "CellContentDrawer::::setValue(java.nio.file.Path,double,double)",
      "493": "CellContentDrawer::::setValue(java.nio.file.Path,double,double)",
      "504": "CellContentDrawer::::setValue(java.nio.file.Path)",
      "505": "CellContentDrawer::::setValue(java.nio.file.Path)",
      "506": "CellContentDrawer::::setValue(java.nio.file.Path)",
      "507": "CellContentDrawer::::setValue(java.nio.file.Path)",
      "514": "CellContentDrawer::::getColor()",
      "515": "CellContentDrawer::::getColor()",
      "516": "CellContentDrawer::::getColor()",
      "524": "CellContentDrawer::::setColor(java.lang.String)",
      "525": "CellContentDrawer::::setColor(java.lang.String)",
      "526": "CellContentDrawer::::setColor(java.lang.String)",
      "527": "CellContentDrawer::::setColor(java.lang.String)",
      "528": "CellContentDrawer::::setColor(java.lang.String)",
      "529": "CellContentDrawer::::setColor(java.lang.String)",
      "530": "CellContentDrawer::::setColor(java.lang.String)",
      "537": "CellContentDrawer::::getFontName()",
      "538": "CellContentDrawer::::getFontName()",
      "539": "CellContentDrawer::::getFontName()",
      "547": "CellContentDrawer::::setFontName(java.lang.String)",
      "548": "CellContentDrawer::::setFontName(java.lang.String)",
      "549": "CellContentDrawer::::setFontName(java.lang.String)",
      "550": "CellContentDrawer::::setFontName(java.lang.String)",
      "557": "CellContentDrawer::::getFontSize()",
      "558": "CellContentDrawer::::getFontSize()",
      "559": "CellContentDrawer::::getFontSize()",
      "567": "CellContentDrawer::::setFontSize(double)",
      "568": "CellContentDrawer::::setFontSize(double)",
      "569": "CellContentDrawer::::setFontSize(double)",
      "570": "CellContentDrawer::::setFontSize(double)",
      "571": "CellContentDrawer::::setFontSize(double)",
      "572": "CellContentDrawer::::setFontSize(double)",
      "573": "CellContentDrawer::::setFontSize(double)",
      "580": "CellContentDrawer::::getCanvas()",
      "581": "CellContentDrawer::::getCanvas()",
      "582": "CellContentDrawer::::getCanvas()",
      "589": "CellContentDrawer::::getTextAlign()",
      "590": "CellContentDrawer::::getTextAlign()",
      "591": "CellContentDrawer::::getTextAlign()",
      "599": "CellContentDrawer::::setTextAlign(org.ofdrw.layout.element.canvas.TextAlign)",
      "600": "CellContentDrawer::::setTextAlign(org.ofdrw.layout.element.canvas.TextAlign)",
      "601": "CellContentDrawer::::setTextAlign(org.ofdrw.layout.element.canvas.TextAlign)",
      "602": "CellContentDrawer::::setTextAlign(org.ofdrw.layout.element.canvas.TextAlign)",
      "609": "CellContentDrawer::::getVerticalAlign()",
      "610": "CellContentDrawer::::getVerticalAlign()",
      "611": "CellContentDrawer::::getVerticalAlign()",
      "619": "CellContentDrawer::::setVerticalAlign(org.ofdrw.layout.element.canvas.VerticalAlign)",
      "620": "CellContentDrawer::::setVerticalAlign(org.ofdrw.layout.element.canvas.VerticalAlign)",
      "621": "CellContentDrawer::::setVerticalAlign(org.ofdrw.layout.element.canvas.VerticalAlign)",
      "622": "CellContentDrawer::::setVerticalAlign(org.ofdrw.layout.element.canvas.VerticalAlign)",
      "629": "CellContentDrawer::::getLineSpace()",
      "630": "CellContentDrawer::::getLineSpace()",
      "631": "CellContentDrawer::::getLineSpace()",
      "639": "CellContentDrawer::::setLineSpace(java.lang.Double)",
      "640": "CellContentDrawer::::setLineSpace(java.lang.Double)",
      "641": "CellContentDrawer::::setLineSpace(java.lang.Double)",
      "642": "CellContentDrawer::::setLineSpace(java.lang.Double)",
      "649": "CellContentDrawer::::getBlob()",
      "650": "CellContentDrawer::::getBlob()",
      "651": "CellContentDrawer::::getBlob()",
      "652": "CellContentDrawer::::getBlob()",
      "661": "CellContentDrawer::::setBlob(java.lang.Boolean)",
      "662": "CellContentDrawer::::setBlob(java.lang.Boolean)",
      "663": "CellContentDrawer::::setBlob(java.lang.Boolean)",
      "664": "CellContentDrawer::::setBlob(java.lang.Boolean)",
      "665": "CellContentDrawer::::setBlob(java.lang.Boolean)",
      "672": "CellContentDrawer::::getBold()",
      "673": "CellContentDrawer::::getBold()",
      "674": "CellContentDrawer::::getBold()",
      "682": "CellContentDrawer::::setBold(java.lang.Boolean)",
      "683": "CellContentDrawer::::setBold(java.lang.Boolean)",
      "684": "CellContentDrawer::::setBold(java.lang.Boolean)",
      "685": "CellContentDrawer::::setBold(java.lang.Boolean)",
      "692": "CellContentDrawer::::getItalic()",
      "693": "CellContentDrawer::::getItalic()",
      "694": "CellContentDrawer::::getItalic()",
      "702": "CellContentDrawer::::setItalic(java.lang.Boolean)",
      "703": "CellContentDrawer::::setItalic(java.lang.Boolean)",
      "704": "CellContentDrawer::::setItalic(java.lang.Boolean)",
      "705": "CellContentDrawer::::setItalic(java.lang.Boolean)",
      "712": "CellContentDrawer::::getLetterSpacing()",
      "713": "CellContentDrawer::::getLetterSpacing()",
      "714": "CellContentDrawer::::getLetterSpacing()",
      "722": "CellContentDrawer::::setLetterSpacing(java.lang.Double)",
      "723": "CellContentDrawer::::setLetterSpacing(java.lang.Double)",
      "724": "CellContentDrawer::::setLetterSpacing(java.lang.Double)",
      "725": "CellContentDrawer::::setLetterSpacing(java.lang.Double)",
      "732": "CellContentDrawer::::getImgPath()",
      "733": "CellContentDrawer::::getImgPath()",
      "734": "CellContentDrawer::::getImgPath()",
      "735": "CellContentDrawer::::getImgPath()",
      "736": "CellContentDrawer::::getImgPath()",
      "737": "CellContentDrawer::::getImgPath()",
      "744": "CellContentDrawer::::getImgWidth()",
      "745": "CellContentDrawer::::getImgWidth()",
      "746": "CellContentDrawer::::getImgWidth()",
      "747": "CellContentDrawer::::getImgWidth()",
      "748": "CellContentDrawer::::getImgWidth()",
      "749": "CellContentDrawer::::getImgWidth()",
      "756": "CellContentDrawer::::getImgHeight()",
      "757": "CellContentDrawer::::getImgHeight()",
      "758": "CellContentDrawer::::getImgHeight()",
      "759": "CellContentDrawer::::getImgHeight()",
      "760": "CellContentDrawer::::getImgHeight()",
      "761": "CellContentDrawer::::getImgHeight()",
      "769": "CellContentDrawer::::setUnderline(boolean)",
      "770": "CellContentDrawer::::setUnderline(boolean)",
      "771": "CellContentDrawer::::setUnderline(boolean)",
      "772": "CellContentDrawer::::setUnderline(boolean)",
      "779": "CellContentDrawer::::getUnderline()",
      "780": "CellContentDrawer::::getUnderline()",
      "781": "CellContentDrawer::::getUnderline()",
      "789": "CellContentDrawer::::setDeleteLine(boolean)",
      "790": "CellContentDrawer::::setDeleteLine(boolean)",
      "791": "CellContentDrawer::::setDeleteLine(boolean)",
      "792": "CellContentDrawer::::setDeleteLine(boolean)",
      "799": "CellContentDrawer::::getDeleteLine()",
      "800": "CellContentDrawer::::getDeleteLine()",
      "801": "CellContentDrawer::::getDeleteLine()",
      "808": "CellContentDrawer::::getFontWeight()",
      "809": "CellContentDrawer::::getFontWeight()",
      "810": "CellContentDrawer::::getFontWeight()",
      "817": "CellContentDrawer::::setFontWeight(java.lang.String)",
      "818": "CellContentDrawer::::setFontWeight(java.lang.String)",
      "819": "CellContentDrawer::::setFontWeight(java.lang.String)",
      "830": "CellContentDrawer::::setFont(java.lang.String,java.nio.file.Path)",
      "831": "CellContentDrawer::::setFont(java.lang.String,java.nio.file.Path)",
      "832": "CellContentDrawer::::setFont(java.lang.String,java.nio.file.Path)",
      "833": "CellContentDrawer::::setFont(java.lang.String,java.nio.file.Path)",
      "834": "CellContentDrawer::::setFont(java.lang.String,java.nio.file.Path)",
      "835": "CellContentDrawer::::setFont(java.lang.String,java.nio.file.Path)",
      "836": "CellContentDrawer::::setFont(java.lang.String,java.nio.file.Path)",
      "837": "CellContentDrawer::::setFont(java.lang.String,java.nio.file.Path)",
      "838": "CellContentDrawer::::setFont(java.lang.String,java.nio.file.Path)",
      "839": "CellContentDrawer::::setFont(java.lang.String,java.nio.file.Path)",
      "840": "CellContentDrawer::::setFont(java.lang.String,java.nio.file.Path)"
    },
    "test_reverse_method_lines_dic": {
      "17": "CellContentDrawerTest::::addCellDefault()",
      "18": "CellContentDrawerTest::::addCellDefault()",
      "19": "CellContentDrawerTest::::addCellDefault()",
      "20": "CellContentDrawerTest::::addCellDefault()",
      "21": "CellContentDrawerTest::::addCellDefault()",
      "22": "CellContentDrawerTest::::addCellDefault()",
      "23": "CellContentDrawerTest::::addCellDefault()",
      "24": "CellContentDrawerTest::::addCellDefault()",
      "25": "CellContentDrawerTest::::addCellDefault()",
      "26": "CellContentDrawerTest::::addCellDefault()",
      "27": "CellContentDrawerTest::::addCellDefault()",
      "28": "CellContentDrawerTest::::addCellDefault()",
      "29": "CellContentDrawerTest::::addCellDefault()",
      "30": "CellContentDrawerTest::::addCellDefault()",
      "31": "CellContentDrawerTest::::addCellDefault()",
      "32": "CellContentDrawerTest::::addCellDefault()",
      "33": "CellContentDrawerTest::::addCellDefault()",
      "34": "CellContentDrawerTest::::addCellDefault()",
      "40": "CellContentDrawerTest::::cellTextAlignRight()",
      "41": "CellContentDrawerTest::::cellTextAlignRight()",
      "42": "CellContentDrawerTest::::cellTextAlignRight()",
      "43": "CellContentDrawerTest::::cellTextAlignRight()",
      "44": "CellContentDrawerTest::::cellTextAlignRight()",
      "45": "CellContentDrawerTest::::cellTextAlignRight()",
      "46": "CellContentDrawerTest::::cellTextAlignRight()",
      "47": "CellContentDrawerTest::::cellTextAlignRight()",
      "48": "CellContentDrawerTest::::cellTextAlignRight()",
      "49": "CellContentDrawerTest::::cellTextAlignRight()",
      "50": "CellContentDrawerTest::::cellTextAlignRight()",
      "51": "CellContentDrawerTest::::cellTextAlignRight()",
      "52": "CellContentDrawerTest::::cellTextAlignRight()",
      "53": "CellContentDrawerTest::::cellTextAlignRight()",
      "54": "CellContentDrawerTest::::cellTextAlignRight()",
      "55": "CellContentDrawerTest::::cellTextAlignRight()",
      "56": "CellContentDrawerTest::::cellTextAlignRight()",
      "57": "CellContentDrawerTest::::cellTextAlignRight()",
      "58": "CellContentDrawerTest::::cellTextAlignRight()",
      "63": "CellContentDrawerTest::::cellTextAlignCenter()",
      "64": "CellContentDrawerTest::::cellTextAlignCenter()",
      "65": "CellContentDrawerTest::::cellTextAlignCenter()",
      "66": "CellContentDrawerTest::::cellTextAlignCenter()",
      "67": "CellContentDrawerTest::::cellTextAlignCenter()",
      "68": "CellContentDrawerTest::::cellTextAlignCenter()",
      "69": "CellContentDrawerTest::::cellTextAlignCenter()",
      "70": "CellContentDrawerTest::::cellTextAlignCenter()",
      "71": "CellContentDrawerTest::::cellTextAlignCenter()",
      "72": "CellContentDrawerTest::::cellTextAlignCenter()",
      "73": "CellContentDrawerTest::::cellTextAlignCenter()",
      "74": "CellContentDrawerTest::::cellTextAlignCenter()",
      "75": "CellContentDrawerTest::::cellTextAlignCenter()",
      "76": "CellContentDrawerTest::::cellTextAlignCenter()",
      "77": "CellContentDrawerTest::::cellTextAlignCenter()",
      "78": "CellContentDrawerTest::::cellTextAlignCenter()",
      "79": "CellContentDrawerTest::::cellTextAlignCenter()",
      "80": "CellContentDrawerTest::::cellTextAlignCenter()",
      "81": "CellContentDrawerTest::::cellTextAlignCenter()",
      "82": "CellContentDrawerTest::::cellTextAlignCenter()",
      "87": "CellContentDrawerTest::::cellVerticalTop()",
      "88": "CellContentDrawerTest::::cellVerticalTop()",
      "89": "CellContentDrawerTest::::cellVerticalTop()",
      "90": "CellContentDrawerTest::::cellVerticalTop()",
      "91": "CellContentDrawerTest::::cellVerticalTop()",
      "92": "CellContentDrawerTest::::cellVerticalTop()",
      "93": "CellContentDrawerTest::::cellVerticalTop()",
      "94": "CellContentDrawerTest::::cellVerticalTop()",
      "95": "CellContentDrawerTest::::cellVerticalTop()",
      "96": "CellContentDrawerTest::::cellVerticalTop()",
      "97": "CellContentDrawerTest::::cellVerticalTop()",
      "98": "CellContentDrawerTest::::cellVerticalTop()",
      "99": "CellContentDrawerTest::::cellVerticalTop()",
      "100": "CellContentDrawerTest::::cellVerticalTop()",
      "101": "CellContentDrawerTest::::cellVerticalTop()",
      "102": "CellContentDrawerTest::::cellVerticalTop()",
      "103": "CellContentDrawerTest::::cellVerticalTop()",
      "104": "CellContentDrawerTest::::cellVerticalTop()",
      "105": "CellContentDrawerTest::::cellVerticalTop()",
      "110": "CellContentDrawerTest::::cellVerticalBottomRight()",
      "111": "CellContentDrawerTest::::cellVerticalBottomRight()",
      "112": "CellContentDrawerTest::::cellVerticalBottomRight()",
      "113": "CellContentDrawerTest::::cellVerticalBottomRight()",
      "114": "CellContentDrawerTest::::cellVerticalBottomRight()",
      "115": "CellContentDrawerTest::::cellVerticalBottomRight()",
      "116": "CellContentDrawerTest::::cellVerticalBottomRight()",
      "117": "CellContentDrawerTest::::cellVerticalBottomRight()",
      "118": "CellContentDrawerTest::::cellVerticalBottomRight()",
      "119": "CellContentDrawerTest::::cellVerticalBottomRight()",
      "120": "CellContentDrawerTest::::cellVerticalBottomRight()",
      "121": "CellContentDrawerTest::::cellVerticalBottomRight()",
      "122": "CellContentDrawerTest::::cellVerticalBottomRight()",
      "123": "CellContentDrawerTest::::cellVerticalBottomRight()",
      "124": "CellContentDrawerTest::::cellVerticalBottomRight()",
      "125": "CellContentDrawerTest::::cellVerticalBottomRight()",
      "126": "CellContentDrawerTest::::cellVerticalBottomRight()",
      "127": "CellContentDrawerTest::::cellVerticalBottomRight()",
      "128": "CellContentDrawerTest::::cellVerticalBottomRight()",
      "133": "CellContentDrawerTest::::cellLongTextAutoLineBreak()",
      "134": "CellContentDrawerTest::::cellLongTextAutoLineBreak()",
      "135": "CellContentDrawerTest::::cellLongTextAutoLineBreak()",
      "136": "CellContentDrawerTest::::cellLongTextAutoLineBreak()",
      "137": "CellContentDrawerTest::::cellLongTextAutoLineBreak()",
      "138": "CellContentDrawerTest::::cellLongTextAutoLineBreak()",
      "139": "CellContentDrawerTest::::cellLongTextAutoLineBreak()",
      "140": "CellContentDrawerTest::::cellLongTextAutoLineBreak()",
      "141": "CellContentDrawerTest::::cellLongTextAutoLineBreak()",
      "142": "CellContentDrawerTest::::cellLongTextAutoLineBreak()",
      "143": "CellContentDrawerTest::::cellLongTextAutoLineBreak()",
      "144": "CellContentDrawerTest::::cellLongTextAutoLineBreak()",
      "145": "CellContentDrawerTest::::cellLongTextAutoLineBreak()",
      "146": "CellContentDrawerTest::::cellLongTextAutoLineBreak()",
      "147": "CellContentDrawerTest::::cellLongTextAutoLineBreak()",
      "148": "CellContentDrawerTest::::cellLongTextAutoLineBreak()",
      "153": "CellContentDrawerTest::::cellLongText()",
      "154": "CellContentDrawerTest::::cellLongText()",
      "155": "CellContentDrawerTest::::cellLongText()",
      "156": "CellContentDrawerTest::::cellLongText()",
      "157": "CellContentDrawerTest::::cellLongText()",
      "158": "CellContentDrawerTest::::cellLongText()",
      "159": "CellContentDrawerTest::::cellLongText()",
      "160": "CellContentDrawerTest::::cellLongText()",
      "161": "CellContentDrawerTest::::cellLongText()",
      "162": "CellContentDrawerTest::::cellLongText()",
      "163": "CellContentDrawerTest::::cellLongText()",
      "164": "CellContentDrawerTest::::cellLongText()",
      "165": "CellContentDrawerTest::::cellLongText()",
      "166": "CellContentDrawerTest::::cellLongText()",
      "167": "CellContentDrawerTest::::cellLongText()",
      "168": "CellContentDrawerTest::::cellLongText()",
      "169": "CellContentDrawerTest::::cellLongText()",
      "173": "CellContentDrawerTest::::cellLongTextRight()",
      "174": "CellContentDrawerTest::::cellLongTextRight()",
      "175": "CellContentDrawerTest::::cellLongTextRight()",
      "176": "CellContentDrawerTest::::cellLongTextRight()",
      "177": "CellContentDrawerTest::::cellLongTextRight()",
      "178": "CellContentDrawerTest::::cellLongTextRight()",
      "179": "CellContentDrawerTest::::cellLongTextRight()",
      "180": "CellContentDrawerTest::::cellLongTextRight()",
      "181": "CellContentDrawerTest::::cellLongTextRight()",
      "182": "CellContentDrawerTest::::cellLongTextRight()",
      "183": "CellContentDrawerTest::::cellLongTextRight()",
      "184": "CellContentDrawerTest::::cellLongTextRight()",
      "185": "CellContentDrawerTest::::cellLongTextRight()",
      "186": "CellContentDrawerTest::::cellLongTextRight()",
      "187": "CellContentDrawerTest::::cellLongTextRight()",
      "188": "CellContentDrawerTest::::cellLongTextRight()",
      "189": "CellContentDrawerTest::::cellLongTextRight()",
      "190": "CellContentDrawerTest::::cellLongTextRight()",
      "195": "CellContentDrawerTest::::cellBold()",
      "196": "CellContentDrawerTest::::cellBold()",
      "197": "CellContentDrawerTest::::cellBold()",
      "198": "CellContentDrawerTest::::cellBold()",
      "199": "CellContentDrawerTest::::cellBold()",
      "200": "CellContentDrawerTest::::cellBold()",
      "201": "CellContentDrawerTest::::cellBold()",
      "202": "CellContentDrawerTest::::cellBold()",
      "203": "CellContentDrawerTest::::cellBold()",
      "204": "CellContentDrawerTest::::cellBold()",
      "205": "CellContentDrawerTest::::cellBold()",
      "206": "CellContentDrawerTest::::cellBold()",
      "207": "CellContentDrawerTest::::cellBold()",
      "208": "CellContentDrawerTest::::cellBold()",
      "209": "CellContentDrawerTest::::cellBold()",
      "210": "CellContentDrawerTest::::cellBold()",
      "211": "CellContentDrawerTest::::cellBold()",
      "212": "CellContentDrawerTest::::cellBold()",
      "217": "CellContentDrawerTest::::cellItalic()",
      "218": "CellContentDrawerTest::::cellItalic()",
      "219": "CellContentDrawerTest::::cellItalic()",
      "220": "CellContentDrawerTest::::cellItalic()",
      "221": "CellContentDrawerTest::::cellItalic()",
      "222": "CellContentDrawerTest::::cellItalic()",
      "223": "CellContentDrawerTest::::cellItalic()",
      "224": "CellContentDrawerTest::::cellItalic()",
      "225": "CellContentDrawerTest::::cellItalic()",
      "226": "CellContentDrawerTest::::cellItalic()",
      "227": "CellContentDrawerTest::::cellItalic()",
      "228": "CellContentDrawerTest::::cellItalic()",
      "229": "CellContentDrawerTest::::cellItalic()",
      "230": "CellContentDrawerTest::::cellItalic()",
      "231": "CellContentDrawerTest::::cellItalic()",
      "232": "CellContentDrawerTest::::cellItalic()",
      "233": "CellContentDrawerTest::::cellItalic()",
      "234": "CellContentDrawerTest::::cellItalic()",
      "239": "CellContentDrawerTest::::cellLetterSpace()",
      "240": "CellContentDrawerTest::::cellLetterSpace()",
      "241": "CellContentDrawerTest::::cellLetterSpace()",
      "242": "CellContentDrawerTest::::cellLetterSpace()",
      "243": "CellContentDrawerTest::::cellLetterSpace()",
      "244": "CellContentDrawerTest::::cellLetterSpace()",
      "245": "CellContentDrawerTest::::cellLetterSpace()",
      "246": "CellContentDrawerTest::::cellLetterSpace()",
      "247": "CellContentDrawerTest::::cellLetterSpace()",
      "248": "CellContentDrawerTest::::cellLetterSpace()",
      "249": "CellContentDrawerTest::::cellLetterSpace()",
      "250": "CellContentDrawerTest::::cellLetterSpace()",
      "251": "CellContentDrawerTest::::cellLetterSpace()",
      "252": "CellContentDrawerTest::::cellLetterSpace()",
      "253": "CellContentDrawerTest::::cellLetterSpace()",
      "254": "CellContentDrawerTest::::cellLetterSpace()",
      "255": "CellContentDrawerTest::::cellLetterSpace()",
      "256": "CellContentDrawerTest::::cellLetterSpace()",
      "261": "CellContentDrawerTest::::cellImg()",
      "262": "CellContentDrawerTest::::cellImg()",
      "263": "CellContentDrawerTest::::cellImg()",
      "264": "CellContentDrawerTest::::cellImg()",
      "265": "CellContentDrawerTest::::cellImg()",
      "266": "CellContentDrawerTest::::cellImg()",
      "267": "CellContentDrawerTest::::cellImg()",
      "268": "CellContentDrawerTest::::cellImg()",
      "269": "CellContentDrawerTest::::cellImg()",
      "270": "CellContentDrawerTest::::cellImg()",
      "271": "CellContentDrawerTest::::cellImg()",
      "272": "CellContentDrawerTest::::cellImg()",
      "273": "CellContentDrawerTest::::cellImg()",
      "274": "CellContentDrawerTest::::cellImg()",
      "275": "CellContentDrawerTest::::cellImg()",
      "276": "CellContentDrawerTest::::cellImg()",
      "277": "CellContentDrawerTest::::cellImg()",
      "282": "CellContentDrawerTest::::cellImgCenter()",
      "283": "CellContentDrawerTest::::cellImgCenter()",
      "284": "CellContentDrawerTest::::cellImgCenter()",
      "285": "CellContentDrawerTest::::cellImgCenter()",
      "286": "CellContentDrawerTest::::cellImgCenter()",
      "287": "CellContentDrawerTest::::cellImgCenter()",
      "288": "CellContentDrawerTest::::cellImgCenter()",
      "289": "CellContentDrawerTest::::cellImgCenter()",
      "290": "CellContentDrawerTest::::cellImgCenter()",
      "291": "CellContentDrawerTest::::cellImgCenter()",
      "292": "CellContentDrawerTest::::cellImgCenter()",
      "293": "CellContentDrawerTest::::cellImgCenter()",
      "294": "CellContentDrawerTest::::cellImgCenter()",
      "295": "CellContentDrawerTest::::cellImgCenter()",
      "296": "CellContentDrawerTest::::cellImgCenter()",
      "297": "CellContentDrawerTest::::cellImgCenter()",
      "298": "CellContentDrawerTest::::cellImgCenter()",
      "299": "CellContentDrawerTest::::cellImgCenter()",
      "304": "CellContentDrawerTest::::cellImgBottomRight()",
      "305": "CellContentDrawerTest::::cellImgBottomRight()",
      "306": "CellContentDrawerTest::::cellImgBottomRight()",
      "307": "CellContentDrawerTest::::cellImgBottomRight()",
      "308": "CellContentDrawerTest::::cellImgBottomRight()",
      "309": "CellContentDrawerTest::::cellImgBottomRight()",
      "310": "CellContentDrawerTest::::cellImgBottomRight()",
      "311": "CellContentDrawerTest::::cellImgBottomRight()",
      "312": "CellContentDrawerTest::::cellImgBottomRight()",
      "313": "CellContentDrawerTest::::cellImgBottomRight()",
      "314": "CellContentDrawerTest::::cellImgBottomRight()",
      "315": "CellContentDrawerTest::::cellImgBottomRight()",
      "316": "CellContentDrawerTest::::cellImgBottomRight()",
      "317": "CellContentDrawerTest::::cellImgBottomRight()",
      "318": "CellContentDrawerTest::::cellImgBottomRight()",
      "319": "CellContentDrawerTest::::cellImgBottomRight()",
      "320": "CellContentDrawerTest::::cellImgBottomRight()",
      "321": "CellContentDrawerTest::::cellImgBottomRight()",
      "322": "CellContentDrawerTest::::cellImgBottomRight()"
    },
    "tests": [
      {
        "test_lines": [
          17,
          34
        ],
        "covered_lines": [
          25,
          42,
          49,
          63,
          70,
          77,
          82,
          88,
          95,
          100,
          105,
          110,
          115,
          120,
          125,
          151,
          152,
          153,
          154,
          170,
          171,
          172,
          173,
          174,
          176,
          213,
          215,
          219,
          224,
          227,
          228,
          229,
          297,
          302,
          303,
          306,
          308,
          309,
          311,
          312,
          318,
          319,
          322,
          323,
          324,
          327,
          328,
          329,
          331,
          332,
          334,
          340,
          341,
          342,
          344,
          346,
          352,
          356,
          357,
          362,
          364,
          366,
          368,
          369,
          375,
          376,
          378,
          380,
          388,
          389,
          393,
          394,
          396,
          406,
          417,
          418,
          419,
          420,
          421,
          422,
          423,
          424,
          425,
          428,
          429,
          431,
          432,
          434,
          443,
          444,
          446,
          447,
          448,
          449,
          450,
          451,
          452,
          453,
          454,
          455,
          456,
          457,
          459,
          460,
          478,
          479,
          581
        ]
      },
      {
        "test_lines": [
          40,
          58
        ],
        "covered_lines": [
          25,
          42,
          49,
          63,
          70,
          77,
          82,
          88,
          95,
          100,
          105,
          110,
          115,
          120,
          125,
          151,
          152,
          153,
          154,
          170,
          171,
          172,
          173,
          174,
          176,
          213,
          215,
          219,
          224,
          227,
          228,
          229,
          297,
          302,
          303,
          306,
          308,
          309,
          311,
          312,
          318,
          319,
          322,
          323,
          324,
          327,
          328,
          329,
          331,
          332,
          334,
          340,
          341,
          342,
          344,
          346,
          352,
          356,
          357,
          362,
          364,
          366,
          368,
          369,
          375,
          376,
          378,
          381,
          386,
          388,
          389,
          393,
          394,
          396,
          406,
          417,
          418,
          419,
          420,
          421,
          422,
          423,
          424,
          425,
          428,
          429,
          431,
          432,
          434,
          443,
          444,
          446,
          447,
          448,
          449,
          450,
          451,
          452,
          453,
          454,
          455,
          456,
          457,
          459,
          460,
          478,
          479,
          581,
          600,
          601
        ]
      },
      {
        "test_lines": [
          63,
          82
        ],
        "covered_lines": [
          25,
          42,
          49,
          63,
          70,
          77,
          82,
          88,
          95,
          100,
          105,
          110,
          115,
          120,
          125,
          151,
          152,
          153,
          154,
          170,
          171,
          172,
          173,
          174,
          176,
          213,
          215,
          219,
          224,
          227,
          228,
          229,
          297,
          302,
          303,
          306,
          308,
          309,
          311,
          312,
          318,
          319,
          322,
          323,
          324,
          327,
          328,
          329,
          331,
          332,
          334,
          340,
          341,
          342,
          344,
          346,
          352,
          356,
          357,
          362,
          364,
          366,
          368,
          369,
          375,
          376,
          378,
          381,
          383,
          388,
          389,
          393,
          394,
          396,
          406,
          417,
          418,
          419,
          420,
          421,
          422,
          423,
          424,
          425,
          428,
          429,
          431,
          432,
          434,
          443,
          444,
          446,
          447,
          448,
          449,
          450,
          451,
          452,
          453,
          454,
          455,
          456,
          457,
          459,
          460,
          478,
          479,
          581,
          600,
          601
        ]
      },
      {
        "test_lines": [
          87,
          105
        ],
        "covered_lines": [
          25,
          42,
          49,
          63,
          70,
          77,
          82,
          88,
          95,
          100,
          105,
          110,
          115,
          120,
          125,
          151,
          152,
          153,
          154,
          170,
          171,
          172,
          173,
          174,
          176,
          213,
          215,
          219,
          224,
          227,
          228,
          229,
          297,
          302,
          303,
          306,
          308,
          309,
          311,
          312,
          318,
          319,
          322,
          323,
          324,
          327,
          328,
          329,
          331,
          332,
          334,
          340,
          341,
          342,
          344,
          346,
          352,
          356,
          357,
          362,
          364,
          366,
          367,
          375,
          376,
          378,
          380,
          388,
          389,
          393,
          394,
          396,
          406,
          417,
          418,
          419,
          420,
          421,
          422,
          423,
          424,
          425,
          428,
          429,
          431,
          432,
          434,
          443,
          444,
          446,
          447,
          448,
          449,
          450,
          451,
          452,
          453,
          454,
          455,
          456,
          457,
          459,
          460,
          478,
          479,
          581,
          600,
          601,
          620,
          621
        ]
      },
      {
        "test_lines": [
          110,
          128
        ],
        "covered_lines": [
          25,
          42,
          49,
          63,
          70,
          77,
          82,
          88,
          95,
          100,
          105,
          110,
          115,
          120,
          125,
          151,
          152,
          153,
          154,
          170,
          171,
          172,
          173,
          174,
          176,
          213,
          215,
          219,
          224,
          227,
          228,
          229,
          297,
          302,
          303,
          306,
          308,
          309,
          311,
          312,
          318,
          319,
          322,
          323,
          324,
          327,
          328,
          329,
          331,
          332,
          334,
          340,
          341,
          342,
          344,
          346,
          352,
          356,
          357,
          362,
          364,
          366,
          368,
          372,
          375,
          376,
          378,
          381,
          386,
          388,
          389,
          393,
          394,
          396,
          406,
          417,
          418,
          419,
          420,
          421,
          422,
          423,
          424,
          425,
          428,
          429,
          431,
          432,
          434,
          443,
          444,
          446,
          447,
          448,
          449,
          450,
          451,
          452,
          453,
          454,
          455,
          456,
          457,
          459,
          460,
          478,
          479,
          581,
          600,
          601,
          620,
          621
        ]
      },
      {
        "test_lines": [
          133,
          148
        ],
        "covered_lines": [
          25,
          42,
          49,
          63,
          70,
          77,
          82,
          88,
          95,
          100,
          105,
          110,
          115,
          120,
          125,
          151,
          152,
          153,
          154,
          170,
          171,
          172,
          173,
          174,
          176,
          213,
          215,
          219,
          224,
          227,
          228,
          229,
          297,
          302,
          303,
          306,
          308,
          309,
          311,
          312,
          318,
          319,
          322,
          323,
          324,
          327,
          328,
          329,
          331,
          332,
          334,
          340,
          341,
          342,
          344,
          346,
          348,
          349,
          350,
          352,
          356,
          357,
          362,
          364,
          366,
          368,
          369,
          375,
          376,
          378,
          380,
          388,
          389,
          393,
          394,
          396,
          406,
          417,
          418,
          419,
          420,
          421,
          422,
          423,
          424,
          425,
          428,
          429,
          431,
          432,
          434,
          443,
          444,
          446,
          447,
          448,
          449,
          450,
          451,
          452,
          453,
          454,
          455,
          456,
          457,
          459,
          460,
          478,
          479,
          581
        ]
      },
      {
        "test_lines": [
          153,
          169
        ],
        "covered_lines": [
          25,
          42,
          49,
          63,
          70,
          77,
          82,
          88,
          95,
          100,
          105,
          110,
          115,
          120,
          125,
          151,
          152,
          153,
          154,
          170,
          171,
          172,
          173,
          174,
          176,
          213,
          215,
          219,
          224,
          227,
          228,
          229,
          297,
          302,
          303,
          306,
          308,
          309,
          311,
          312,
          318,
          319,
          322,
          323,
          324,
          327,
          328,
          329,
          331,
          332,
          334,
          335,
          336,
          337,
          338,
          340,
          341,
          342,
          344,
          346,
          352,
          356,
          357,
          362,
          364,
          366,
          368,
          369,
          375,
          376,
          378,
          380,
          388,
          389,
          393,
          394,
          396,
          406,
          417,
          418,
          419,
          420,
          421,
          422,
          423,
          424,
          425,
          428,
          429,
          431,
          432,
          434,
          443,
          444,
          446,
          447,
          448,
          449,
          450,
          451,
          452,
          453,
          454,
          455,
          456,
          457,
          459,
          460,
          478,
          479,
          581
        ]
      },
      {
        "test_lines": [
          173,
          190
        ],
        "covered_lines": [
          25,
          42,
          49,
          63,
          70,
          77,
          82,
          88,
          95,
          100,
          105,
          110,
          115,
          120,
          125,
          151,
          152,
          153,
          154,
          170,
          171,
          172,
          173,
          174,
          176,
          213,
          215,
          219,
          224,
          227,
          228,
          229,
          297,
          302,
          303,
          306,
          308,
          309,
          311,
          312,
          318,
          319,
          322,
          323,
          324,
          327,
          328,
          329,
          331,
          332,
          334,
          335,
          336,
          337,
          338,
          340,
          341,
          342,
          344,
          346,
          352,
          356,
          357,
          362,
          364,
          366,
          368,
          369,
          375,
          376,
          378,
          381,
          386,
          388,
          389,
          393,
          394,
          396,
          406,
          417,
          418,
          419,
          420,
          421,
          422,
          423,
          424,
          425,
          428,
          429,
          431,
          432,
          434,
          443,
          444,
          446,
          447,
          448,
          449,
          450,
          451,
          452,
          453,
          454,
          455,
          456,
          457,
          459,
          460,
          478,
          479,
          581,
          600,
          601
        ]
      },
      {
        "test_lines": [
          195,
          212
        ],
        "covered_lines": [
          25,
          42,
          49,
          63,
          70,
          77,
          82,
          88,
          95,
          100,
          105,
          110,
          115,
          120,
          125,
          151,
          152,
          153,
          154,
          170,
          171,
          172,
          173,
          174,
          176,
          213,
          215,
          219,
          224,
          227,
          228,
          229,
          297,
          302,
          303,
          306,
          307,
          311,
          312,
          318,
          319,
          322,
          323,
          324,
          327,
          328,
          329,
          331,
          332,
          334,
          340,
          341,
          342,
          344,
          346,
          348,
          349,
          350,
          352,
          356,
          357,
          362,
          364,
          366,
          368,
          369,
          375,
          376,
          378,
          380,
          388,
          389,
          393,
          394,
          396,
          406,
          417,
          418,
          419,
          420,
          421,
          422,
          423,
          424,
          425,
          428,
          429,
          431,
          432,
          434,
          443,
          444,
          446,
          447,
          448,
          449,
          450,
          451,
          452,
          453,
          454,
          455,
          456,
          457,
          459,
          460,
          478,
          479,
          581,
          683,
          684
        ]
      },
      {
        "test_lines": [
          217,
          234
        ],
        "covered_lines": [
          25,
          42,
          49,
          63,
          70,
          77,
          82,
          88,
          95,
          100,
          105,
          110,
          115,
          120,
          125,
          151,
          152,
          153,
          154,
          170,
          171,
          172,
          173,
          174,
          176,
          213,
          215,
          219,
          224,
          227,
          228,
          229,
          297,
          302,
          303,
          304,
          306,
          308,
          309,
          311,
          312,
          318,
          319,
          322,
          323,
          324,
          327,
          328,
          329,
          331,
          332,
          334,
          340,
          341,
          342,
          344,
          346,
          348,
          349,
          350,
          352,
          356,
          357,
          362,
          364,
          366,
          368,
          369,
          375,
          376,
          378,
          380,
          388,
          389,
          393,
          394,
          396,
          406,
          417,
          418,
          419,
          420,
          421,
          422,
          423,
          424,
          425,
          428,
          429,
          431,
          432,
          434,
          443,
          444,
          446,
          447,
          448,
          449,
          450,
          451,
          452,
          453,
          454,
          455,
          456,
          457,
          459,
          460,
          478,
          479,
          581,
          703,
          704
        ]
      },
      {
        "test_lines": [
          239,
          256
        ],
        "covered_lines": [
          25,
          42,
          49,
          63,
          70,
          77,
          82,
          88,
          95,
          100,
          105,
          110,
          115,
          120,
          125,
          151,
          152,
          153,
          154,
          170,
          171,
          172,
          173,
          174,
          176,
          213,
          215,
          219,
          224,
          227,
          228,
          229,
          297,
          302,
          303,
          306,
          308,
          309,
          311,
          312,
          314,
          318,
          319,
          322,
          323,
          324,
          327,
          328,
          329,
          331,
          332,
          334,
          340,
          341,
          342,
          344,
          346,
          348,
          349,
          350,
          352,
          356,
          357,
          362,
          364,
          366,
          368,
          369,
          375,
          376,
          378,
          380,
          388,
          389,
          393,
          394,
          396,
          406,
          417,
          418,
          419,
          420,
          421,
          422,
          423,
          424,
          425,
          428,
          429,
          431,
          432,
          434,
          443,
          444,
          446,
          447,
          448,
          449,
          450,
          451,
          452,
          453,
          454,
          455,
          456,
          457,
          459,
          460,
          478,
          479,
          581,
          723,
          724
        ]
      },
      {
        "test_lines": [
          261,
          277
        ],
        "covered_lines": [
          25,
          42,
          49,
          63,
          70,
          77,
          82,
          88,
          95,
          100,
          105,
          110,
          115,
          120,
          125,
          151,
          152,
          153,
          154,
          197,
          198,
          199,
          200,
          201,
          213,
          215,
          217,
          227,
          228,
          229,
          238,
          241,
          251,
          252,
          267,
          270,
          271,
          276,
          277,
          283,
          285,
          286,
          288,
          443,
          444,
          446,
          447,
          448,
          449,
          450,
          451,
          452,
          453,
          454,
          455,
          456,
          457,
          459,
          460,
          491,
          492,
          581
        ]
      },
      {
        "test_lines": [
          282,
          299
        ],
        "covered_lines": [
          25,
          42,
          49,
          63,
          70,
          77,
          82,
          88,
          95,
          100,
          105,
          110,
          115,
          120,
          125,
          151,
          152,
          153,
          154,
          197,
          198,
          199,
          200,
          201,
          213,
          215,
          217,
          227,
          228,
          229,
          238,
          241,
          251,
          252,
          261,
          262,
          270,
          271,
          276,
          277,
          283,
          285,
          286,
          288,
          443,
          444,
          446,
          447,
          448,
          449,
          450,
          451,
          452,
          453,
          454,
          455,
          456,
          457,
          459,
          460,
          491,
          492,
          581,
          600,
          601
        ]
      },
      {
        "test_lines": [
          304,
          322
        ],
        "covered_lines": [
          25,
          42,
          49,
          63,
          70,
          77,
          82,
          88,
          95,
          100,
          105,
          110,
          115,
          120,
          125,
          151,
          152,
          153,
          154,
          197,
          198,
          199,
          200,
          201,
          213,
          215,
          217,
          227,
          228,
          229,
          238,
          241,
          251,
          252,
          257,
          258,
          270,
          271,
          273,
          274,
          283,
          285,
          286,
          288,
          443,
          444,
          446,
          447,
          448,
          449,
          450,
          451,
          452,
          453,
          454,
          455,
          456,
          457,
          459,
          460,
          491,
          492,
          581,
          600,
          601,
          620,
          621
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-layout/src/main/java/org/ofdrw/layout/engine/StreamingLayoutAnalyzer.java": {
    "class_content": [
      "package org.ofdrw.layout.engine;\n",
      "\n",
      "import org.ofdrw.layout.PageLayout;\n",
      "import org.ofdrw.layout.Rectangle;\n",
      "import org.ofdrw.layout.VirtualPage;\n",
      "import org.ofdrw.layout.element.AFloat;\n",
      "import org.ofdrw.layout.element.Div;\n",
      "import org.ofdrw.layout.element.Position;\n",
      "\n",
      "import java.util.*;\n",
      "\n",
      "/**\n",
      " * \u6d41\u5f0f\u5e03\u5c40\u5206\u6790\u5668\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2020-03-07 12:08:41\n",
      " */\n",
      "public class StreamingLayoutAnalyzer {\n",
      "\n",
      "    /**\n",
      "     * \u9875\u9762\u7684\u56fa\u5b9a\u53ef\u7528\u7684\u5de5\u4f5c\u533a\u57df\n",
      "     */\n",
      "    private Rectangle pageWorkArea;\n",
      "\n",
      "    /**\n",
      "     * \u865a\u62df\u9875\u9762\u7684\u5c3a\u5bf8\n",
      "     */\n",
      "    private PageLayout layout;\n",
      "\n",
      "    /**\n",
      "     * \u5e03\u5c40\u6700\u7ec8\u4ea7\u751f\u7684\u865a\u62df\u9875\u9762\u5e8f\u5217\n",
      "     */\n",
      "    private LinkedList<VirtualPage> vPageList;\n",
      "\n",
      "    /**\n",
      "     * \u5f53\u524d\u5269\u4f59\u5de5\u4f5c\u533a\u57df\n",
      "     */\n",
      "    private Rectangle remainArea;\n",
      "\n",
      "    /**\n",
      "     * \u5f53\u524d\u5e03\u5c40\u4e2d\u7684\u865a\u62df\u9875\u9762\n",
      "     */\n",
      "    private VirtualPage vPage;\n",
      "\n",
      "    public StreamingLayoutAnalyzer(PageLayout layout) {\n",
      "        pageWorkArea = layout.getWorkerArea();\n",
      "        this.layout = layout;\n",
      "        vPageList = new LinkedList<>();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8fdb\u884c\u6bb5\u7684\u5e03\u5c40\u5206\u6790\n",
      "     *\n",
      "     * @param segmentSequence \u6bb5\u5e8f\u5217\n",
      "     * @return \u865a\u62df\u9875\u9762\u5e8f\u5217\n",
      "     */\n",
      "    public List<VirtualPage> analyze(List<Segment> segmentSequence) {\n",
      "        if (segmentSequence == null || segmentSequence.isEmpty()) {\n",
      "            return Collections.emptyList();\n",
      "        }\n",
      "        LinkedList<Segment> seq = new LinkedList<>(segmentSequence);\n",
      "        if (vPageList.isEmpty()) {\n",
      "            // \u521d\u59cb\u5316\u9875\u9762\n",
      "            addNewPage();\n",
      "        }\n",
      "        while (!seq.isEmpty()) {\n",
      "            Segment segment = seq.pop();\n",
      "            // \u9875\u9762\u6ca1\u6709\u5269\u4f59\u7a7a\u95f4\uff0c\u65b0\u5efa\u9875\u9762\n",
      "            if (remainArea.getHeight() == 0) {\n",
      "                // \u7a7a\u95f4\u4e0d\u8db3\u5219\u6362\u9875\n",
      "                addNewPage();\n",
      "            }\n",
      "            // \u7279\u6b8a\u7684\u5982\u679c\u662f\u4e00\u4e2a\u586b\u5145\u6bb5\u90a3\u4e48\u8bbe\u7f6e\u9875\u9762\n",
      "            if (segment.isRemainAreaFiller()) {\n",
      "                remainArea.setHeight(0d);\n",
      "                continue;\n",
      "            }\n",
      "            // \u9ad8\u5ea6\u8db3\u591f\u80fd\u591f\u653e\u5165\u5269\u4f59\u7a7a\u95f4\u4e2d\n",
      "            if (segment.getHeight() <= remainArea.getHeight()) {\n",
      "                // \u5206\u914d\u6bb5\u7a7a\u95f4\n",
      "                Rectangle area = remainArea.reduce(segment.getHeight());\n",
      "                // \u5b9a\u4f4d\u5143\u7d20\uff0c\u52a0\u5165\u865a\u62df\u9875\u9762\n",
      "                elementPositioning(segment, area);\n",
      "                continue;\n",
      "            }\n",
      "            // \u6bb5\u4e0d\u53ef\u4ee5\u62c6\u5206\u60c5\u51b5\u4e0b\n",
      "            if (segment.isBlockable() == false) {\n",
      "                if (segment.getHeight() > pageWorkArea.getHeight()) {\n",
      "                    // TODO \u8b66\u544a: \u5982\u679c\u6bb5\u4e0d\u53ef\u62c6\u5206\uff0c\u5e76\u4e14\u9ad8\u5ea6\u5927\u4e8e\u6574\u4e2a\u9875\u9762\u7684\u9ad8\u5ea6\uff0c\u90a3\u4e48\u8fd9\u6837\u7684\u6bb5\u5e94\u8be5\u820d\u5f03\n",
      "                } else {\n",
      "                    // \u5982\u679c\u6bb5\u4e0d\u53ef\u62c6\u5206\uff0c\u5e76\u4e14\u9ad8\u5ea6\u5c0f\u4e8e\u6574\u4e2a\u9875\u9762\u7684\u9ad8\u5ea6\uff0c\u90a3\u4e48\u65b0\u8d77\u4e00\u4e2a\u9875\u9762\uff0c\u91cd\u65b0\u52a0\u5165\u961f\u5217\u5e03\u5c40\n",
      "                    addNewPage();\n",
      "                    seq.push(segment);\n",
      "                }\n",
      "                continue;\n",
      "            }\n",
      "            // \u6bb5\u53ef\u4ee5\u62c6\u5206\uff0c\u90a3\u4e48\u901a\u8fc7\u5269\u4f59\u7a7a\u95f4\u5bf9\u6bb5\u5206\u5757\uff0c\u8fd9\u4e2a\u5206\u5757\u53ea\u4f1a\u5206\u4e3a\u4e24\u5757\n",
      "            Segment[] blocks = segmentBlocking(segment, remainArea.clone());\n",
      "            if (blocks != null && blocks.length > 0) {\n",
      "                // \u56e0\u4e3a\u662f\u6808\u7684\u539f\u56e0\uff0c\u9700\u8981\u628a\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u6700\u65b0\u538b\u5230\u6808\u9876\u3002\n",
      "                // blocks \u9006\u5e8f\u52a0\u5165 seq\n",
      "                for (int i = blocks.length - 1; i >= 0; i--) {\n",
      "                    // \u9006\u5e8f\u91cd\u65b0\u8fdb\u5165\u961f\u5217\u4e2d\n",
      "                    seq.push(blocks[i]);\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "        return vPageList;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u7531\u4e8e\u5269\u4f59\u7a7a\u95f4\u4e0d\u8db3\u4e14\u6bb5\u53ef\u4ee5\u5206\u5757\n",
      "     * <p>\n",
      "     * \u5bf9\u6bb5\u8fdb\u884c\u5206\u5757\uff0c\u5269\u4f59\u7684\u5757\u5c06\u6d41\u8f6c\u5230\u4e0b\u4e00\u4e2a\u9875\u9762\u7684\u6bb5\u4e2d\n",
      "     *\n",
      "     * @param segment \u6bb5\n",
      "     * @param area    \u5269\u4f59\u7a7a\u95f4\n",
      "     * @return \u5206\u5757\u540e\u7684\u6bb5\u5e8f\u5217\uff0c\u542b\u4e24\u4e2aSegment\u5143\u7d20\u3002\n",
      "     */\n",
      "    private Segment[] segmentBlocking(Segment segment, Rectangle area) {\n",
      "        // \u5206\u4e3a\u4e24\u5757\n",
      "        Segment sgm1 = new Segment(segment.getWidth());\n",
      "        Segment sgmNext = new Segment(segment.getWidth());\n",
      "        for (Map.Entry<Div, Rectangle> item : segment) {\n",
      "            Div div = item.getKey();\n",
      "            Rectangle rec = item.getValue();\n",
      "            // 1. \u80fd\u591f\u653e\u7f6e\u5230\u5269\u4f59\u7a7a\u95f4\u4e2d\n",
      "            double availableHeight = area.getHeight();\n",
      "            if (rec.getHeight() <= availableHeight) {\n",
      "                // \u5411\u7b2c\u4e00\u4e2a\u6bb5\uff0c\u52a0\u5165\u5b9e\u9645\u7684Div\n",
      "                sgm1.tryAdd(div);\n",
      "                // \u5411\u7b2c\u4e0b\u4e00\u4e2a\u6bb5\u52a0\u5165\u5360\u4f4d\u7b26\n",
      "                sgmNext.tryAdd(Div.placeholder(rec, div.getFloat()));\n",
      "                continue;\n",
      "            }\n",
      "            // 2. \u5728\u5269\u4f59\u7a7a\u95f4\u4e2d\u65e0\u6cd5\u653e\u7f6e\uff0c\u4e14\u5143\u7d20\u672c\u8eab\u4e0d\u53ef\u5206\u5272\n",
      "            if (div.isIntegrity()) {\n",
      "                // \u5411\u7b2c\u4e00\u4e2a\u6bb5\u4e2d\u52a0\u5165\u5360\u4f4d\u7b26\n",
      "                sgm1.tryAdd(Div.placeholder(rec.getWidth(), availableHeight, div.getFloat()));\n",
      "                // \u628a\u5b9e\u9645\u5143\u7d20\u52a0\u5165\u4e0b\u4e00\u4e2a\u6bb5\u4e2d\n",
      "                sgmNext.tryAdd(div);\n",
      "                continue;\n",
      "            }\n",
      "            // 3. \u65e0\u6cd5\u5728\u5269\u4f59\u7a7a\u95f4\u4e2d\u653e\u7f6e\uff0c\u4e14\u53ef\u4ee5\u5206\u5272\u7684\u60c5\u51b5\uff0c\u9700\u8981\u5bf9\u5143\u7d20\u8fdb\u884c\u5206\u5272\n",
      "            Div[] split = div.split(availableHeight);\n",
      "            sgm1.tryAdd(split[0]);\n",
      "            sgmNext.tryAdd(split[1]);\n",
      "        }\n",
      "        return new Segment[]{sgm1, sgmNext};\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6bb5\u4e2d\u7684\u5143\u7d20\u5b9a\u4f4d\uff0c\u5e76\u52a0\u5165\u5230\u865a\u62df\u9875\u9762\u4e2d\n",
      "     *\n",
      "     * @param segment \u5f85\u5b9a\u4f4d\u7684\u6bb5\n",
      "     * @param area    \u5206\u914d\u7ed9\u8be5\u6bb5\u7684\u9875\u9762\u7a7a\u95f4\n",
      "     */\n",
      "    private void elementPositioning(Segment segment, Rectangle area) {\n",
      "        /*\n",
      "         \u6839\u636e\u6d6e\u52a8\u65b9\u5f0f\uff0c\u5224\u65ad\u5143\u7d20\u5728\u6bb5\u4e2dX\u5750\u6807\u5b9a\u4f4d\n",
      "         */\n",
      "        // \u5c45\u4e2d\u7684\u5e03\u5c40\u5206\u6790\n",
      "        if (segment.isCenterFloat()) {\n",
      "            // \u83b7\u53d6\u6bb5\u5185\u6240\u6709\u5143\u7d20\u7684\u5bbd\u5ea6\n",
      "            double totalWidth = segment.getSizeList().stream().mapToDouble(Rectangle::getWidth).sum();\n",
      "            // \u7b2c\u4e00\u4e2a\u5143\u7d20\u504f\u79fb\u7684X\u5750\u6807\n",
      "            double offsetX = area.getX() + ((area.getWidth() - totalWidth) / 2);\n",
      "            for (Map.Entry<Div, Rectangle> item : segment) {\n",
      "                Div itemDiv = item.getKey();\n",
      "                Rectangle box = item.getValue();\n",
      "                itemDiv.setX(offsetX);\n",
      "                // \u589e\u52a0\u504f\u79fb\u91cf\u8ba1\u7b97\u51fa\u4e0b\u4e00\u4e2abox\u5e94\u8be5\u51fa\u73b0\u7684\u4f4d\u7f6e\n",
      "                offsetX += box.getWidth();\n",
      "            }\n",
      "        } else {\n",
      "            // \u5de6\u53f3\u6d6e\u52a8\u7684\u5206\u6790\n",
      "            double startX = area.getX();\n",
      "            double endX = startX + area.getWidth();\n",
      "            for (Map.Entry<Div, Rectangle> item : segment) {\n",
      "                Div itemDiv = item.getKey();\n",
      "                Rectangle box = item.getValue();\n",
      "                AFloat aFloat = itemDiv.getFloat();\n",
      "                if (aFloat == AFloat.left) {\n",
      "                    itemDiv.setX(startX);\n",
      "                    startX += box.getWidth();\n",
      "                } else if (aFloat == AFloat.right) {\n",
      "                    itemDiv.setX(endX - box.getWidth());\n",
      "                    endX -= box.getWidth();\n",
      "                }// ignore center and null\n",
      "            }\n",
      "        }\n",
      "\n",
      "        for (Map.Entry<Div, Rectangle> item : segment) {\n",
      "            Div itemDiv = item.getKey();\n",
      "            if (itemDiv.isPlaceholder()) {\n",
      "                // \u5360\u4f4d\u7b26\u4e0d\u53c2\u4e0e\u7ed8\u5236\uff0c\u8df3\u8fc7\n",
      "                continue;\n",
      "            }\n",
      "            /*\n",
      "             \u5c06\u6d41\u5f0f\u7684\u81ea\u52a8\u5b9a\u4f4d\u8f6c\u4e3a\u7edd\u5bf9\u5b9a\u4f4d\u4f4d\u7f6e\u7684Div\n",
      "             */\n",
      "            itemDiv.setY(area.getY());\n",
      "            // \u89e3\u51b3\u76f8\u5bf9\u5b9a\u4f4d\u7684\u4f4d\u7f6e\n",
      "            if (itemDiv.getPosition() == Position.Relative) {\n",
      "                Double x = itemDiv.getX();\n",
      "                Double y = itemDiv.getY();\n",
      "                itemDiv.setX(x + itemDiv.getLeft() - itemDiv.getRight())\n",
      "                        .setY(y + itemDiv.getTop());\n",
      "            }\n",
      "            itemDiv.setPosition(Position.Absolute);\n",
      "            // \u52a0\u5165\u5230\u865a\u62df\u9875\u9762\u4e2d\n",
      "            vPage.addUnsafe(itemDiv);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u521b\u5efa\u65b0\u9875\u9762\n",
      "     */\n",
      "    private void addNewPage() {\n",
      "        // \u91cd\u7f6e\u5de5\u4f5c\u533a\u57df\n",
      "        remainArea = this.pageWorkArea.clone();\n",
      "        vPage = new VirtualPage(layout);\n",
      "        vPageList.add(vPage);\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.layout.engine;\n",
      "\n",
      "import org.junit.jupiter.api.Assertions;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.ofdrw.layout.PageLayout;\n",
      "import org.ofdrw.layout.VirtualPage;\n",
      "import org.ofdrw.layout.element.Clear;\n",
      "import org.ofdrw.layout.element.Div;\n",
      "import org.ofdrw.layout.element.PageAreaFiller;\n",
      "\n",
      "import java.util.LinkedList;\n",
      "import java.util.List;\n",
      "\n",
      "\n",
      "class StreamingLayoutAnalyzerTest {\n",
      "\n",
      "    @Test\n",
      "    public void analyze() {\n",
      "        // h: 225 w: 138\n",
      "        PageLayout layout = new PageLayout(210d, 297d)\n",
      "                .setMargin(36d);\n",
      "        StreamingLayoutAnalyzer analyzer = new StreamingLayoutAnalyzer(layout);\n",
      "        List<Segment> seq = new LinkedList<>();\n",
      "\n",
      "        Segment sgm = new Segment(layout.contentWidth());\n",
      "        sgm.tryAdd(new Div(100d, 25d));\n",
      "        seq.add(sgm);\n",
      "        List<VirtualPage> virtualPages = analyzer.analyze(seq);\n",
      "        Assertions.assertEquals(virtualPages.size(), 1);\n",
      "        Div div = virtualPages.get(0).getContent().get(0);\n",
      "        Assertions.assertEquals(div.getX(), 36d);\n",
      "        Assertions.assertEquals(div.getY(), 36d);\n",
      "\n",
      "        seq.clear();\n",
      "        sgm = new Segment(layout.contentWidth());\n",
      "        sgm.tryAdd(new Div(18d, 225d));\n",
      "        seq.add(sgm);\n",
      "        virtualPages = analyzer.analyze(seq);\n",
      "        Assertions.assertEquals(virtualPages.size(), 2);\n",
      "\n",
      "        div = virtualPages.get(0).getContent().get(1);\n",
      "        Assertions.assertEquals(div.getX(), 36d);\n",
      "        Assertions.assertEquals(div.getY(), 36 + 25);\n",
      "        System.out.println();\n",
      "\n",
      "        // h: 225 - 25 = 200\n",
      "        seq.clear();\n",
      "        sgm = new Segment(layout.contentWidth());\n",
      "        // \u6bb5\u5185\u5305\u542b\u548c\u5206\u6bb5\u548c\u4e0d\u53ef\u5206\u6bb5\u5143\u7d20\n",
      "        sgm.tryAdd(new Div(50d, 50d).setClear(Clear.none));\n",
      "        sgm.tryAdd(new Div(50d, 225d).setClear(Clear.none).setIntegrity(true));\n",
      "        seq.add(sgm);\n",
      "        virtualPages = analyzer.analyze(seq);\n",
      "        Assertions.assertEquals(virtualPages.size(), 3);\n",
      "        Assertions.assertEquals(virtualPages.get(2).getContent().size(), 1);\n",
      "        div = virtualPages.get(2).getContent().get(0);\n",
      "        Assertions.assertEquals(div.getX(), 36 + 50);\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)": [
        57,
        109
      ],
      "StreamingLayoutAnalyzer::::segmentBlocking(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)": [
        120,
        150
      ],
      "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)": [
        158,
        214
      ],
      "StreamingLayoutAnalyzer::::addNewPage()": [
        219,
        224
      ]
    },
    "test_method_lines_dic": {
      "StreamingLayoutAnalyzerTest::::analyze()": [
        17,
        58
      ]
    },
    "reverse_method_lines_dic": {
      "57": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "58": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "59": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "60": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "61": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "62": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "63": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "64": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "65": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "66": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "67": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "68": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "69": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "70": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "71": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "72": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "73": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "74": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "75": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "76": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "77": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "78": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "79": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "80": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "81": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "82": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "83": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "84": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "85": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "86": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "87": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "88": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "89": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "90": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "91": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "92": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "93": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "94": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "95": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "96": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "97": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "98": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "99": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "100": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "101": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "102": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "103": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "104": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "105": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "106": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "107": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "108": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "109": "StreamingLayoutAnalyzer::::analyze(java.util.List<org.ofdrw.layout.engine.Segment>)",
      "120": "StreamingLayoutAnalyzer::::segmentBlocking(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "121": "StreamingLayoutAnalyzer::::segmentBlocking(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "122": "StreamingLayoutAnalyzer::::segmentBlocking(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "123": "StreamingLayoutAnalyzer::::segmentBlocking(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "124": "StreamingLayoutAnalyzer::::segmentBlocking(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "125": "StreamingLayoutAnalyzer::::segmentBlocking(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "126": "StreamingLayoutAnalyzer::::segmentBlocking(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "127": "StreamingLayoutAnalyzer::::segmentBlocking(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "128": "StreamingLayoutAnalyzer::::segmentBlocking(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "129": "StreamingLayoutAnalyzer::::segmentBlocking(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "130": "StreamingLayoutAnalyzer::::segmentBlocking(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "131": "StreamingLayoutAnalyzer::::segmentBlocking(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "132": "StreamingLayoutAnalyzer::::segmentBlocking(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "133": "StreamingLayoutAnalyzer::::segmentBlocking(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "134": "StreamingLayoutAnalyzer::::segmentBlocking(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "135": "StreamingLayoutAnalyzer::::segmentBlocking(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "136": "StreamingLayoutAnalyzer::::segmentBlocking(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "137": "StreamingLayoutAnalyzer::::segmentBlocking(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "138": "StreamingLayoutAnalyzer::::segmentBlocking(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "139": "StreamingLayoutAnalyzer::::segmentBlocking(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "140": "StreamingLayoutAnalyzer::::segmentBlocking(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "141": "StreamingLayoutAnalyzer::::segmentBlocking(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "142": "StreamingLayoutAnalyzer::::segmentBlocking(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "143": "StreamingLayoutAnalyzer::::segmentBlocking(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "144": "StreamingLayoutAnalyzer::::segmentBlocking(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "145": "StreamingLayoutAnalyzer::::segmentBlocking(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "146": "StreamingLayoutAnalyzer::::segmentBlocking(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "147": "StreamingLayoutAnalyzer::::segmentBlocking(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "148": "StreamingLayoutAnalyzer::::segmentBlocking(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "149": "StreamingLayoutAnalyzer::::segmentBlocking(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "150": "StreamingLayoutAnalyzer::::segmentBlocking(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "158": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "159": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "160": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "161": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "162": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "163": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "164": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "165": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "166": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "167": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "168": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "169": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "170": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "171": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "172": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "173": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "174": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "175": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "176": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "177": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "178": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "179": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "180": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "181": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "182": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "183": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "184": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "185": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "186": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "187": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "188": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "189": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "190": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "191": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "192": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "193": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "194": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "195": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "196": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "197": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "198": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "199": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "200": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "201": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "202": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "203": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "204": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "205": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "206": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "207": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "208": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "209": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "210": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "211": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "212": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "213": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "214": "StreamingLayoutAnalyzer::::elementPositioning(org.ofdrw.layout.engine.Segment,org.ofdrw.layout.Rectangle)",
      "219": "StreamingLayoutAnalyzer::::addNewPage()",
      "220": "StreamingLayoutAnalyzer::::addNewPage()",
      "221": "StreamingLayoutAnalyzer::::addNewPage()",
      "222": "StreamingLayoutAnalyzer::::addNewPage()",
      "223": "StreamingLayoutAnalyzer::::addNewPage()",
      "224": "StreamingLayoutAnalyzer::::addNewPage()"
    },
    "test_reverse_method_lines_dic": {
      "17": "StreamingLayoutAnalyzerTest::::analyze()",
      "18": "StreamingLayoutAnalyzerTest::::analyze()",
      "19": "StreamingLayoutAnalyzerTest::::analyze()",
      "20": "StreamingLayoutAnalyzerTest::::analyze()",
      "21": "StreamingLayoutAnalyzerTest::::analyze()",
      "22": "StreamingLayoutAnalyzerTest::::analyze()",
      "23": "StreamingLayoutAnalyzerTest::::analyze()",
      "24": "StreamingLayoutAnalyzerTest::::analyze()",
      "25": "StreamingLayoutAnalyzerTest::::analyze()",
      "26": "StreamingLayoutAnalyzerTest::::analyze()",
      "27": "StreamingLayoutAnalyzerTest::::analyze()",
      "28": "StreamingLayoutAnalyzerTest::::analyze()",
      "29": "StreamingLayoutAnalyzerTest::::analyze()",
      "30": "StreamingLayoutAnalyzerTest::::analyze()",
      "31": "StreamingLayoutAnalyzerTest::::analyze()",
      "32": "StreamingLayoutAnalyzerTest::::analyze()",
      "33": "StreamingLayoutAnalyzerTest::::analyze()",
      "34": "StreamingLayoutAnalyzerTest::::analyze()",
      "35": "StreamingLayoutAnalyzerTest::::analyze()",
      "36": "StreamingLayoutAnalyzerTest::::analyze()",
      "37": "StreamingLayoutAnalyzerTest::::analyze()",
      "38": "StreamingLayoutAnalyzerTest::::analyze()",
      "39": "StreamingLayoutAnalyzerTest::::analyze()",
      "40": "StreamingLayoutAnalyzerTest::::analyze()",
      "41": "StreamingLayoutAnalyzerTest::::analyze()",
      "42": "StreamingLayoutAnalyzerTest::::analyze()",
      "43": "StreamingLayoutAnalyzerTest::::analyze()",
      "44": "StreamingLayoutAnalyzerTest::::analyze()",
      "45": "StreamingLayoutAnalyzerTest::::analyze()",
      "46": "StreamingLayoutAnalyzerTest::::analyze()",
      "47": "StreamingLayoutAnalyzerTest::::analyze()",
      "48": "StreamingLayoutAnalyzerTest::::analyze()",
      "49": "StreamingLayoutAnalyzerTest::::analyze()",
      "50": "StreamingLayoutAnalyzerTest::::analyze()",
      "51": "StreamingLayoutAnalyzerTest::::analyze()",
      "52": "StreamingLayoutAnalyzerTest::::analyze()",
      "53": "StreamingLayoutAnalyzerTest::::analyze()",
      "54": "StreamingLayoutAnalyzerTest::::analyze()",
      "55": "StreamingLayoutAnalyzerTest::::analyze()",
      "56": "StreamingLayoutAnalyzerTest::::analyze()",
      "57": "StreamingLayoutAnalyzerTest::::analyze()",
      "58": "StreamingLayoutAnalyzerTest::::analyze()"
    },
    "tests": [
      {
        "test_lines": [
          17,
          58
        ],
        "covered_lines": [
          45,
          46,
          47,
          48,
          49,
          58,
          61,
          62,
          64,
          66,
          67,
          69,
          71,
          74,
          79,
          81,
          83,
          84,
          87,
          98,
          99,
          102,
          104,
          107,
          108,
          122,
          123,
          124,
          125,
          126,
          128,
          129,
          131,
          133,
          134,
          137,
          139,
          141,
          142,
          145,
          146,
          147,
          148,
          149,
          163,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          190,
          193,
          194,
          195,
          197,
          202,
          204,
          210,
          212,
          213,
          214,
          221,
          222,
          223,
          224
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-layout/src/main/java/org/ofdrw/layout/engine/Segment.java": {
    "class_content": [
      "package org.ofdrw.layout.engine;\n",
      "\n",
      "import org.ofdrw.layout.Rectangle;\n",
      "import org.ofdrw.layout.element.AFloat;\n",
      "import org.ofdrw.layout.element.Clear;\n",
      "import org.ofdrw.layout.element.Div;\n",
      "import org.ofdrw.layout.element.PageAreaFiller;\n",
      "\n",
      "import java.util.*;\n",
      "\n",
      "/**\n",
      " * \u6bb5\u5bf9\u8c61\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2020-02-29 11:41:28\n",
      " */\n",
      "public class Segment implements Iterable<Map.Entry<Div, Rectangle>>, Iterator<Map.Entry<Div, Rectangle>> {\n",
      "    /**\n",
      "     * \u6bb5\u4e2d\u7684\u5185\u5bb9\n",
      "     */\n",
      "    private List<Div> content;\n",
      "    private List<Rectangle> sizeList;\n",
      "\n",
      "    /**\n",
      "     * \u6bb5\u9ad8\u5ea6\n",
      "     */\n",
      "    private double height = 0d;\n",
      "    /**\n",
      "     * \u6bb5\u6700\u5927\u5bbd\u5ea6\n",
      "     */\n",
      "    private double width;\n",
      "\n",
      "    /**\n",
      "     * \u6bb5\u5269\u4f59\u5bbd\u5ea6\n",
      "     */\n",
      "    private double remainWidth;\n",
      "\n",
      "    /**\n",
      "     * \u6bb5\u662f\u5426\u53ef\u4ee5\u5206\u5757\n",
      "     * <p>\n",
      "     * true - \u53ef\u62c6\u5206\uff1b false - \u4e0d\u53ef\u62c6\u5206\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\u503c\uff1a false \u4e0d\u53ef\u62c6\u5206\n",
      "     */\n",
      "    private boolean blockable = false;\n",
      "\n",
      "    /**\n",
      "     * \u5269\u4f59\u9875\u9762\u7a7a\u95f4\u586b\u5145\u6bb5\n",
      "     * <p>\n",
      "     * true - \u586b\u5145\u5269\u4f59\u9875\u9762\u7a7a\u95f4\uff1b false - \u975e\u586b\u5145\u6bb5\n",
      "     */\n",
      "    private boolean isRemainAreaFiller = false;\n",
      "\n",
      "\n",
      "    public Segment(double width) {\n",
      "        this.width = width;\n",
      "        this.remainWidth = width;\n",
      "        content = new ArrayList<>(5);\n",
      "        sizeList = new ArrayList<>(5);\n",
      "    }\n",
      "\n",
      "    private Segment() {\n",
      "    }\n",
      "\n",
      "    public double getHeight() {\n",
      "        return height;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5411\u6bb5\u4e2d\u6dfb\u52a0\u5143\u7d20\n",
      "     *\n",
      "     * @param div \u5143\u7d20\n",
      "     * @return \u5143\u7d20\u662f\u5426\u80fd\u52a0\u5165\u6bb5\u4e2d true - \u53ef\u52a0\u5165\uff1bfalse - \u4e0d\u53ef\u52a0\u5165\n",
      "     */\n",
      "    public boolean tryAdd(Div div) {\n",
      "        if (div == null) {\n",
      "            return true;\n",
      "        }\n",
      "        // \u5269\u4f59\u7a7a\u95f4\u5df2\u7ecf\u4e0d\u8db3\n",
      "        // \u53ef\u662f\u662f\u5e94\u4e3a: \u6bb5\u5185\u5df2\u7ecf\u6709\u5143\u7d20\uff0c\u5e76\u4e14\u65b0\u52a0\u5165\u7684\u5143\u7d20\u4e3a\u72ec\u5360\uff0c\u90a3\u4e48\u4e0d\u80fd\u52a0\u5165\u6bb5\u4e2d\n",
      "        //            \u4e5f\u53ef\u80fd\u662f\u521a\u597d\u7a7a\u95f4\u8017\u5c3d\n",
      "        if (this.remainWidth == 0) {\n",
      "            return false;\n",
      "        }\n",
      "        // \u6839\u636e\u6bb5\u5bbd\u5ea6\u91cd\u7f6e\u52a0\u5165\u5143\u7d20\u5c3a\u5bf8\n",
      "        Rectangle blockSize = div.doPrepare(this.width);\n",
      "        if (blockSize.getWidth() > this.remainWidth) {\n",
      "            // \u6bb5\u5269\u4f59\u5bbd\u5ea6\u4e0d\u8db3\u65e0\u6cd5\u653e\u5165\u5143\u7d20\uff0c\u820d\u5f03\n",
      "            return false;\n",
      "        }\n",
      "\n",
      "        // \u4e0a\u9762\u8fc7\u7a0b\u4fdd\u8bc1\u4e86\u5143\u7d20\u4e00\u5b9a\u53ef\u4ee5\u52a0\u5165\u5230\u6bb5\u4e2d\n",
      "        /*\n",
      "        \u72ec\u5360\u6bb5\u7684\u5143\u7d20\u7c7b\u578b\n",
      "        1. \u72ec\u5360\n",
      "        2. \u6d6e\u52a8 + Clear \u5bf9\u7acb\n",
      "         */\n",
      "        if (div.isBlockElement()) {\n",
      "            if (!isEmpty()) {\n",
      "                // \u72ec\u5360\u7c7b\u578b\u5982\u679c\u5df2\u7ecf\u5b58\u5728\u5143\u7d20\u90a3\u4e48\u5219\u65e0\u6cd5\u52a0\u5165\n",
      "                return false;\n",
      "            }\n",
      "            this.remainWidth = 0;\n",
      "            add(div, blockSize);\n",
      "            return true;\n",
      "        }\n",
      "\n",
      "        if (!this.isEmpty()) {\n",
      "            if (isCenterFloat()) {\n",
      "                // \u6bb5\u5185\u542b\u6709\u5c45\u4e2d\u5143\u7d20:\n",
      "                // 1. \u65b0\u52a0\u5165\u5143\u7d20\u975e\u5c45\u4e2d\u5143\u7d20\n",
      "                // 2. \u65b0\u52a0\u5165\u5143\u7d20\u8bbe\u7f6e clear left\n",
      "                // 3. \u6700\u540e\u4e00\u4e2a\u5143\u7d20\u8bbe\u7f6e clear right\n",
      "                if (div.getFloat() != AFloat.center) {\n",
      "                    return false;\n",
      "                }\n",
      "                if (Clear.left == div.getClear()) {\n",
      "                    return false;\n",
      "                }\n",
      "                if (Clear.right == content.get(content.size() - 1).getClear()) {\n",
      "                    return false;\n",
      "                }\n",
      "            } else {\n",
      "                // \u6bb5\u5185\u4e0d\u542b\u5c45\u4e2d\u5143\u7d20:\n",
      "                // 1. Float == Clear Left: \u6bb5\u5185\u5df2\u7ecf\u542b\u6709\u5de6\u6d6e\u52a8\u5143\u7d20\n",
      "                // 2. Float == Clear Right: \u6bb5\u5185\u5df2\u7ecf\u542b\u6709\u53f3\u6d6e\u52a8\u5143\u7d20\n",
      "                // 3. \u65b0\u52a0\u5165\u5143\u7d20\u4e3a\u5c45\u4e2d\u5143\u7d20\n",
      "                if (AFloat.left == div.getFloat() && Clear.left == div.getClear()) {\n",
      "                    for (Div existDiv : content) {\n",
      "                        if (existDiv.getFloat() == AFloat.left) {\n",
      "                            return false;\n",
      "                        }\n",
      "                    }\n",
      "                }\n",
      "                if (AFloat.right == div.getFloat() && Clear.right == div.getClear()) {\n",
      "                    for (Div existDiv : content) {\n",
      "                        if (existDiv.getFloat() == AFloat.right) {\n",
      "                            return false;\n",
      "                        }\n",
      "                    }\n",
      "                }\n",
      "                if (AFloat.center == div.getFloat()) {\n",
      "                    return false;\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "        // \u6bb5\u5185\u4e0d\u542b\u5143\u7d20\u65f6\u76f4\u63a5\u52a0\u5165\n",
      "\n",
      "        this.remainWidth -= blockSize.getWidth();\n",
      "        add(div, blockSize);\n",
      "        return true;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u52a0\u5165\u5143\u7d20\n",
      "     *\n",
      "     * @param div       \u5143\u7d20\u672c\u8eab\n",
      "     * @param blockSize \u5143\u7d20\u5c3a\u5bf8\n",
      "     */\n",
      "    private void add(Div<?> div, Rectangle blockSize) {\n",
      "        if (height < blockSize.getHeight()) {\n",
      "            this.height = blockSize.getHeight();\n",
      "        }\n",
      "        if (div.isIntegrity() == false) {\n",
      "            // \u5224\u65ad\u662f\u5426\u53ef\u4ee5\u62c6\u5206\u6bb5\uff0c\u53ea\u8981\u51fa\u73b0\u4e86\u4e00\u4e2a\u53ef\u62c6\u5206\u7684\uff0c\u90a3\u4e48\u8be5\u6bb5\u5c31\u662f\u53ef\u4ee5\u62c6\u5206\n",
      "            this.blockable = true;\n",
      "        }\n",
      "        if (div instanceof PageAreaFiller) {\n",
      "            this.isRemainAreaFiller = true;\n",
      "        }\n",
      "        this.content.add(div);\n",
      "        this.sizeList.add(blockSize);\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u6bb5\u662f\u5426\u53ef\u62c6\u5206\n",
      "     *\n",
      "     * @return true - \u53ef\u62c6\u5206\uff1bfalse - \u4e0d\u53ef\u62c6\u5206\n",
      "     */\n",
      "    public boolean isBlockable() {\n",
      "        return blockable;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5224\u65ad\u6bb5\u5185\u662f\u5426\u4e3a\u5c45\u4e2d\u5e03\u5c40\n",
      "     *\n",
      "     * @return true - \u5c45\u4e2d\u5e03\u5c40\uff1bfalse - \u4e0d\u5c45\u4e2d\n",
      "     */\n",
      "    boolean isCenterFloat() {\n",
      "        if (isEmpty()) {\n",
      "            return true;\n",
      "        }\n",
      "        for (Div d : this.content) {\n",
      "            AFloat aFloat = d.getFloat();\n",
      "            if (aFloat != AFloat.center) {\n",
      "                return false;\n",
      "            }\n",
      "        }\n",
      "        return true;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6bb5\u662f\u5426\u662f\u7a7a\u6bb5\uff0c\u4e5f\u5c31\u662f\u6ca1\u6709\u4efb\u4f55\u5143\u7d20\n",
      "     *\n",
      "     * @return true - \u7a7a\u6bb5\uff1bfalse - \u542b\u6709\u5143\u7d20\n",
      "     */\n",
      "    public boolean isEmpty() {\n",
      "        return this.content.isEmpty();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u662f\u5426\u662f\u5269\u4f59\u586b\u5145\u7a7a\u95f4\n",
      "     *\n",
      "     * @return true - \u586b\u5145\uff1b false - \u975e\u586b\u5145\n",
      "     */\n",
      "    public boolean isRemainAreaFiller() {\n",
      "        return isRemainAreaFiller;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u6bb5\u4e2d\u7684\u5143\u7d20\n",
      "     *\n",
      "     * @return \u6bb5\u4e2d\u7684\u5143\u7d20\n",
      "     */\n",
      "    public List<Div> getContent() {\n",
      "        return content;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5143\u7d20\u5c3a\u5bf8\u5e8f\u5217\n",
      "     *\n",
      "     * @return \u6bb5\u5185\u5143\u7d20\u5c3a\u5bf8\u5e8f\u5217\n",
      "     */\n",
      "    public List<Rectangle> getSizeList() {\n",
      "        return sizeList;\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * Foreach \u5faa\u73af\u6280\u672f\u5668\n",
      "     */\n",
      "    private int cnt = 0;\n",
      "\n",
      "    @Override\n",
      "    public Iterator<Map.Entry<Div, Rectangle>> iterator() {\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public boolean hasNext() {\n",
      "        if (cnt < content.size()) {\n",
      "            return true;\n",
      "        }\n",
      "        cnt = 0;\n",
      "        return false;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void remove() {\n",
      "        throw new UnsupportedOperationException();\n",
      "    }\n",
      "\n",
      "    public double getWidth() {\n",
      "        return width;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Map.Entry<Div, Rectangle> next() {\n",
      "        if (cnt == content.size()) {\n",
      "            throw new NoSuchElementException();\n",
      "        }\n",
      "        cnt++;\n",
      "        return new HashMap.SimpleEntry<>(\n",
      "                content.get(cnt - 1), sizeList.get(cnt - 1)\n",
      "        );\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.layout.engine;\n",
      "\n",
      "import org.junit.jupiter.api.Assertions;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.ofdrw.layout.element.AFloat;\n",
      "import org.ofdrw.layout.element.Clear;\n",
      "import org.ofdrw.layout.element.Div;\n",
      "import org.ofdrw.layout.element.PageAreaFiller;\n",
      "\n",
      "class SegmentTest {\n",
      "\n",
      "    @Test\n",
      "    public void tryAdd() {\n",
      "        Segment sgm = new Segment(138d);\n",
      "\n",
      "        Assertions.assertTrue(sgm.tryAdd(new Div(70d, 70d)));\n",
      "        Assertions.assertFalse(sgm.tryAdd(new Div(70d, 70d)));\n",
      "\n",
      "        sgm = new Segment(138d);\n",
      "        // h: 138 - 50 = 88\n",
      "        Assertions.assertTrue(sgm.tryAdd(\n",
      "                new Div(50d, 10d)\n",
      "                        .setClear(Clear.none)\n",
      "        ));\n",
      "        // h: 88 - 38 = 50\n",
      "        Assertions.assertTrue(sgm.tryAdd(\n",
      "                new Div(38d, 70d)\n",
      "                        .setClear(Clear.none)\n",
      "        ));\n",
      "        Assertions.assertEquals(sgm.getHeight(), 70);\n",
      "\n",
      "        // \u65e0\u6cd5\u52a0\u5165\n",
      "        Assertions.assertFalse(sgm.tryAdd(\n",
      "                new Div(55d, 70d)\n",
      "                        .setClear(Clear.none)\n",
      "        ));\n",
      "        // \u53ef\u4ee5\u52a0\u5165\n",
      "        Assertions.assertTrue(sgm.tryAdd(\n",
      "                new Div(1d, 70d)\n",
      "                        .setClear(Clear.none)\n",
      "        ));\n",
      "\n",
      "        sgm = new Segment(138d);\n",
      "        // h:138 - 50 = 88\n",
      "        Assertions.assertTrue(sgm.tryAdd(\n",
      "                new Div(50d, 10d)\n",
      "                        .setClear(Clear.none)\n",
      "        ));\n",
      "        Assertions.assertFalse(sgm.tryAdd(\n",
      "                new Div(50d, 10d)\n",
      "                        .setClear(Clear.left)\n",
      "        ));\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void iterator() {\n",
      "        Segment sgm = new Segment(900d);\n",
      "        sgm.tryAdd(Div.placeholder(100, 300, AFloat.left));\n",
      "        sgm.tryAdd(Div.placeholder(200, 50, AFloat.left));\n",
      "        sgm.tryAdd(Div.placeholder(500, 150, AFloat.left));\n",
      "        sgm.tryAdd(Div.placeholder(500, 600, AFloat.left));\n",
      "        sgm.forEach(kv -> {\n",
      "            System.out.println(kv.getKey());\n",
      "        });\n",
      "        System.out.println();\n",
      "        sgm.forEach(kv -> {\n",
      "            System.out.println(kv.getKey());\n",
      "        });\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "Segment::::getHeight()": [
        65,
        67
      ],
      "Segment::::tryAdd(org.ofdrw.layout.element.Div)": [
        75,
        152
      ],
      "Segment::::add(org.ofdrw.layout.element.Div<?>,org.ofdrw.layout.Rectangle)": [
        160,
        173
      ],
      "Segment::::isBlockable()": [
        181,
        183
      ],
      "Segment::::isCenterFloat()": [
        190,
        201
      ],
      "Segment::::isEmpty()": [
        208,
        210
      ],
      "Segment::::isRemainAreaFiller()": [
        217,
        219
      ],
      "Segment::::getContent()": [
        226,
        228
      ],
      "Segment::::getSizeList()": [
        235,
        237
      ],
      "Segment::::iterator()": [
        245,
        248
      ],
      "Segment::::hasNext()": [
        250,
        257
      ],
      "Segment::::remove()": [
        259,
        262
      ],
      "Segment::::getWidth()": [
        264,
        266
      ],
      "Segment::::next()": [
        268,
        277
      ]
    },
    "test_method_lines_dic": {
      "SegmentTest::::tryAdd()": [
        12,
        53
      ],
      "SegmentTest::::iterator()": [
        56,
        70
      ]
    },
    "reverse_method_lines_dic": {
      "65": "Segment::::getHeight()",
      "66": "Segment::::getHeight()",
      "67": "Segment::::getHeight()",
      "75": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "76": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "77": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "78": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "79": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "80": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "81": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "82": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "83": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "84": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "85": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "86": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "87": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "88": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "89": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "90": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "91": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "92": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "93": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "94": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "95": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "96": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "97": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "98": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "99": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "100": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "101": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "102": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "103": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "104": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "105": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "106": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "107": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "108": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "109": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "110": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "111": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "112": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "113": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "114": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "115": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "116": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "117": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "118": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "119": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "120": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "121": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "122": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "123": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "124": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "125": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "126": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "127": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "128": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "129": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "130": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "131": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "132": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "133": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "134": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "135": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "136": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "137": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "138": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "139": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "140": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "141": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "142": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "143": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "144": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "145": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "146": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "147": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "148": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "149": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "150": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "151": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "152": "Segment::::tryAdd(org.ofdrw.layout.element.Div)",
      "160": "Segment::::add(org.ofdrw.layout.element.Div<?>,org.ofdrw.layout.Rectangle)",
      "161": "Segment::::add(org.ofdrw.layout.element.Div<?>,org.ofdrw.layout.Rectangle)",
      "162": "Segment::::add(org.ofdrw.layout.element.Div<?>,org.ofdrw.layout.Rectangle)",
      "163": "Segment::::add(org.ofdrw.layout.element.Div<?>,org.ofdrw.layout.Rectangle)",
      "164": "Segment::::add(org.ofdrw.layout.element.Div<?>,org.ofdrw.layout.Rectangle)",
      "165": "Segment::::add(org.ofdrw.layout.element.Div<?>,org.ofdrw.layout.Rectangle)",
      "166": "Segment::::add(org.ofdrw.layout.element.Div<?>,org.ofdrw.layout.Rectangle)",
      "167": "Segment::::add(org.ofdrw.layout.element.Div<?>,org.ofdrw.layout.Rectangle)",
      "168": "Segment::::add(org.ofdrw.layout.element.Div<?>,org.ofdrw.layout.Rectangle)",
      "169": "Segment::::add(org.ofdrw.layout.element.Div<?>,org.ofdrw.layout.Rectangle)",
      "170": "Segment::::add(org.ofdrw.layout.element.Div<?>,org.ofdrw.layout.Rectangle)",
      "171": "Segment::::add(org.ofdrw.layout.element.Div<?>,org.ofdrw.layout.Rectangle)",
      "172": "Segment::::add(org.ofdrw.layout.element.Div<?>,org.ofdrw.layout.Rectangle)",
      "173": "Segment::::add(org.ofdrw.layout.element.Div<?>,org.ofdrw.layout.Rectangle)",
      "181": "Segment::::isBlockable()",
      "182": "Segment::::isBlockable()",
      "183": "Segment::::isBlockable()",
      "190": "Segment::::isCenterFloat()",
      "191": "Segment::::isCenterFloat()",
      "192": "Segment::::isCenterFloat()",
      "193": "Segment::::isCenterFloat()",
      "194": "Segment::::isCenterFloat()",
      "195": "Segment::::isCenterFloat()",
      "196": "Segment::::isCenterFloat()",
      "197": "Segment::::isCenterFloat()",
      "198": "Segment::::isCenterFloat()",
      "199": "Segment::::isCenterFloat()",
      "200": "Segment::::isCenterFloat()",
      "201": "Segment::::isCenterFloat()",
      "208": "Segment::::isEmpty()",
      "209": "Segment::::isEmpty()",
      "210": "Segment::::isEmpty()",
      "217": "Segment::::isRemainAreaFiller()",
      "218": "Segment::::isRemainAreaFiller()",
      "219": "Segment::::isRemainAreaFiller()",
      "226": "Segment::::getContent()",
      "227": "Segment::::getContent()",
      "228": "Segment::::getContent()",
      "235": "Segment::::getSizeList()",
      "236": "Segment::::getSizeList()",
      "237": "Segment::::getSizeList()",
      "245": "Segment::::iterator()",
      "246": "Segment::::iterator()",
      "247": "Segment::::iterator()",
      "248": "Segment::::iterator()",
      "250": "Segment::::hasNext()",
      "251": "Segment::::hasNext()",
      "252": "Segment::::hasNext()",
      "253": "Segment::::hasNext()",
      "254": "Segment::::hasNext()",
      "255": "Segment::::hasNext()",
      "256": "Segment::::hasNext()",
      "257": "Segment::::hasNext()",
      "259": "Segment::::remove()",
      "260": "Segment::::remove()",
      "261": "Segment::::remove()",
      "262": "Segment::::remove()",
      "264": "Segment::::getWidth()",
      "265": "Segment::::getWidth()",
      "266": "Segment::::getWidth()",
      "268": "Segment::::next()",
      "269": "Segment::::next()",
      "270": "Segment::::next()",
      "271": "Segment::::next()",
      "272": "Segment::::next()",
      "273": "Segment::::next()",
      "274": "Segment::::next()",
      "275": "Segment::::next()",
      "276": "Segment::::next()",
      "277": "Segment::::next()"
    },
    "test_reverse_method_lines_dic": {
      "12": "SegmentTest::::tryAdd()",
      "13": "SegmentTest::::tryAdd()",
      "14": "SegmentTest::::tryAdd()",
      "15": "SegmentTest::::tryAdd()",
      "16": "SegmentTest::::tryAdd()",
      "17": "SegmentTest::::tryAdd()",
      "18": "SegmentTest::::tryAdd()",
      "19": "SegmentTest::::tryAdd()",
      "20": "SegmentTest::::tryAdd()",
      "21": "SegmentTest::::tryAdd()",
      "22": "SegmentTest::::tryAdd()",
      "23": "SegmentTest::::tryAdd()",
      "24": "SegmentTest::::tryAdd()",
      "25": "SegmentTest::::tryAdd()",
      "26": "SegmentTest::::tryAdd()",
      "27": "SegmentTest::::tryAdd()",
      "28": "SegmentTest::::tryAdd()",
      "29": "SegmentTest::::tryAdd()",
      "30": "SegmentTest::::tryAdd()",
      "31": "SegmentTest::::tryAdd()",
      "32": "SegmentTest::::tryAdd()",
      "33": "SegmentTest::::tryAdd()",
      "34": "SegmentTest::::tryAdd()",
      "35": "SegmentTest::::tryAdd()",
      "36": "SegmentTest::::tryAdd()",
      "37": "SegmentTest::::tryAdd()",
      "38": "SegmentTest::::tryAdd()",
      "39": "SegmentTest::::tryAdd()",
      "40": "SegmentTest::::tryAdd()",
      "41": "SegmentTest::::tryAdd()",
      "42": "SegmentTest::::tryAdd()",
      "43": "SegmentTest::::tryAdd()",
      "44": "SegmentTest::::tryAdd()",
      "45": "SegmentTest::::tryAdd()",
      "46": "SegmentTest::::tryAdd()",
      "47": "SegmentTest::::tryAdd()",
      "48": "SegmentTest::::tryAdd()",
      "49": "SegmentTest::::tryAdd()",
      "50": "SegmentTest::::tryAdd()",
      "51": "SegmentTest::::tryAdd()",
      "52": "SegmentTest::::tryAdd()",
      "53": "SegmentTest::::tryAdd()",
      "56": "SegmentTest::::iterator()",
      "57": "SegmentTest::::iterator()",
      "58": "SegmentTest::::iterator()",
      "59": "SegmentTest::::iterator()",
      "60": "SegmentTest::::iterator()",
      "61": "SegmentTest::::iterator()",
      "62": "SegmentTest::::iterator()",
      "63": "SegmentTest::::iterator()",
      "64": "SegmentTest::::iterator()",
      "65": "SegmentTest::::iterator()",
      "66": "SegmentTest::::iterator()",
      "67": "SegmentTest::::iterator()",
      "68": "SegmentTest::::iterator()",
      "69": "SegmentTest::::iterator()",
      "70": "SegmentTest::::iterator()"
    },
    "tests": [
      {
        "test_lines": [
          12,
          53
        ],
        "covered_lines": [
          27,
          45,
          52,
          55,
          56,
          57,
          58,
          59,
          60,
          66,
          76,
          82,
          83,
          86,
          87,
          89,
          98,
          99,
          103,
          104,
          105,
          108,
          109,
          128,
          129,
          130,
          131,
          135,
          142,
          149,
          150,
          151,
          161,
          162,
          164,
          166,
          168,
          171,
          172,
          173,
          191,
          194,
          195,
          196,
          197,
          209,
          243
        ]
      },
      {
        "test_lines": [
          56,
          70
        ],
        "covered_lines": [
          27,
          45,
          52,
          55,
          56,
          57,
          58,
          59,
          60,
          76,
          82,
          86,
          87,
          89,
          98,
          108,
          109,
          128,
          135,
          142,
          149,
          150,
          151,
          161,
          162,
          164,
          168,
          171,
          172,
          173,
          191,
          194,
          195,
          196,
          197,
          209,
          243,
          247,
          252,
          253,
          255,
          256,
          270,
          273,
          274,
          275
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-layout/src/main/java/org/ofdrw/layout/engine/SegmentationEngine.java": {
    "class_content": [
      "package org.ofdrw.layout.engine;\n",
      "\n",
      "import org.ofdrw.layout.PageLayout;\n",
      "import org.ofdrw.layout.element.BR;\n",
      "import org.ofdrw.layout.element.Div;\n",
      "import org.ofdrw.layout.element.Position;\n",
      "\n",
      "import java.util.Collections;\n",
      "import java.util.LinkedList;\n",
      "import java.util.List;\n",
      "\n",
      "/**\n",
      " * \u5206\u6bb5\u5f15\u64ce\n",
      " * <p>\n",
      " * \u7528\u4e8e\u5c06\u6d41\u5f0f\u6587\u6863\u4e2d\u7684\u5143\u7d20\u5212\u5206\u4e3a\u6bb5\u3002\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2020-02-29 11:39:29\n",
      " */\n",
      "public class SegmentationEngine {\n",
      "\n",
      "    private PageLayout pageLayout;\n",
      "\n",
      "    private SegmentationEngine() {\n",
      "    }\n",
      "\n",
      "    public SegmentationEngine(PageLayout pageLayout) {\n",
      "        this.pageLayout = pageLayout;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5c06\u8f93\u5165\u7684\u6d41\u5f0f\u5e03\u5c40\u5143\u7d20\u961f\u5217\u5206\u6bb5\n",
      "     *\n",
      "     * @param streamLayoutQueue \u6d41\u5f0f\u5e03\u5c40\u5143\u7d20\u961f\u5217\n",
      "     * @return \u5206\u5b8c\u6bb5\u7684\u5e03\u5c40\u961f\u5217\n",
      "     */\n",
      "    public List<Segment> process(List<Div> streamLayoutQueue) {\n",
      "        // \u53ef\u7528\u4e8e\u5e03\u5c40\u7684\u5bbd\u5ea6\n",
      "        double width = pageLayout.contentWidth();\n",
      "        if (streamLayoutQueue == null || streamLayoutQueue.isEmpty()) {\n",
      "            return Collections.emptyList();\n",
      "        }\n",
      "        LinkedList<Segment> res = new LinkedList<>();\n",
      "        LinkedList<Div> seq = new LinkedList<>(streamLayoutQueue);\n",
      "        Segment segment = new Segment(width);\n",
      "        while (!seq.isEmpty()) {\n",
      "            Div div = seq.pop();\n",
      "            if (div.getPosition() == Position.Absolute) {\n",
      "                continue;\n",
      "            }\n",
      "            if (div instanceof BR) {\n",
      "                if (segment.isEmpty()) {\n",
      "                    // \u5982\u679c\u6bb5\u4e3a\u7a7a\uff0c\u90a3\u4e48\u4e0d\u9700\u8981\u6362\u884c\n",
      "                    continue;\n",
      "                }\n",
      "                // \u6362\u884c\u7b26\n",
      "                res.add(segment);\n",
      "                segment = new Segment(width);\n",
      "                continue;\n",
      "            }\n",
      "            // \u5c1d\u8bd5\u5c06\u5143\u7d20\u52a0\u5165\u6bb5\u4e2d\n",
      "            boolean addSuccess = segment.tryAdd(div);\n",
      "            // \u5982\u679c\u6bb5\u5df2\u7ecf\u6ee1\u4e86\uff0c\u90a3\u4e48\u52a0\u5165\u4e86\u6bb5\u961f\u5217\u4e2d\n",
      "            if (!addSuccess && !segment.isEmpty()) {\n",
      "                // \u6bb5\u5df2\u7ecf\u65e0\u6cd5\u518d\u5bb9\u7eb3\u5143\u7d20\uff1a \u65e0\u6cd5\u52a0\u5165\u5143\u7d20\u4e14\u4e0d\u4e3a\u7a7a\n",
      "                res.add(segment);\n",
      "                segment =  new Segment(width);\n",
      "                seq.push(div);\n",
      "            }\n",
      "        }\n",
      "        // \u5904\u7406\u6700\u540e\u4e00\u4e2a\u6bb5\u7684\u60c5\u51b5\n",
      "        if (!segment.isEmpty()) {\n",
      "            res.add(segment);\n",
      "        }\n",
      "        return res;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.layout.engine;\n",
      "\n",
      "\n",
      "import org.junit.jupiter.api.Assertions;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.ofdrw.layout.PageLayout;\n",
      "import org.ofdrw.layout.element.AFloat;\n",
      "import org.ofdrw.layout.element.Clear;\n",
      "import org.ofdrw.layout.element.Div;\n",
      "\n",
      "import java.util.LinkedList;\n",
      "import java.util.List;\n",
      "\n",
      "public class SegmentationEngineTest {\n",
      "\n",
      "    @Test\n",
      "    public void process() {\n",
      "        // w: 138  h: 225\n",
      "        SegmentationEngine sgnEngine = new SegmentationEngine(PageLayout.A4());\n",
      "        List<Div> list = new LinkedList<>();\n",
      "\n",
      "        list.add(new Div(50d, 25d).setFloat(AFloat.center));\n",
      "\n",
      "        // w: 138 - 38 = 100\n",
      "        Div div = new Div()\n",
      "                .setClear(Clear.none)\n",
      "                .setFloat(AFloat.left)\n",
      "                .setWidth(38d)\n",
      "                .setHeight(10d);\n",
      "        list.add(div);\n",
      "        List<Segment> segments = sgnEngine.process(list);\n",
      "        Assertions.assertEquals(segments.size(), 2);\n",
      "\n",
      "        // w: 100 - 90 = 10\n",
      "        list.add(new Div()\n",
      "                .setClear(Clear.none)\n",
      "                .setFloat(AFloat.left)\n",
      "                .setWidth(90d)\n",
      "                .setHeight(70d));\n",
      "        segments = sgnEngine.process(list);\n",
      "        Assertions.assertEquals(segments.size(), 2);\n",
      "\n",
      "        // h: 120 w: 138 - 70\n",
      "        list.add(new Div()\n",
      "                .setClear(Clear.none)\n",
      "                .setFloat(AFloat.left)\n",
      "                .setWidth(70d)\n",
      "                .setHeight(70d));\n",
      "        segments = sgnEngine.process(list);\n",
      "        Assertions.assertEquals(segments.size(), 3);\n",
      "\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)": [
        37,
        76
      ]
    },
    "test_method_lines_dic": {
      "SegmentationEngineTest::::process()": [
        16,
        52
      ]
    },
    "reverse_method_lines_dic": {
      "37": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)",
      "38": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)",
      "39": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)",
      "40": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)",
      "41": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)",
      "42": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)",
      "43": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)",
      "44": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)",
      "45": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)",
      "46": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)",
      "47": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)",
      "48": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)",
      "49": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)",
      "50": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)",
      "51": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)",
      "52": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)",
      "53": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)",
      "54": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)",
      "55": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)",
      "56": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)",
      "57": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)",
      "58": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)",
      "59": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)",
      "60": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)",
      "61": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)",
      "62": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)",
      "63": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)",
      "64": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)",
      "65": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)",
      "66": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)",
      "67": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)",
      "68": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)",
      "69": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)",
      "70": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)",
      "71": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)",
      "72": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)",
      "73": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)",
      "74": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)",
      "75": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)",
      "76": "SegmentationEngine::::process(java.util.List<org.ofdrw.layout.element.Div>)"
    },
    "test_reverse_method_lines_dic": {
      "16": "SegmentationEngineTest::::process()",
      "17": "SegmentationEngineTest::::process()",
      "18": "SegmentationEngineTest::::process()",
      "19": "SegmentationEngineTest::::process()",
      "20": "SegmentationEngineTest::::process()",
      "21": "SegmentationEngineTest::::process()",
      "22": "SegmentationEngineTest::::process()",
      "23": "SegmentationEngineTest::::process()",
      "24": "SegmentationEngineTest::::process()",
      "25": "SegmentationEngineTest::::process()",
      "26": "SegmentationEngineTest::::process()",
      "27": "SegmentationEngineTest::::process()",
      "28": "SegmentationEngineTest::::process()",
      "29": "SegmentationEngineTest::::process()",
      "30": "SegmentationEngineTest::::process()",
      "31": "SegmentationEngineTest::::process()",
      "32": "SegmentationEngineTest::::process()",
      "33": "SegmentationEngineTest::::process()",
      "34": "SegmentationEngineTest::::process()",
      "35": "SegmentationEngineTest::::process()",
      "36": "SegmentationEngineTest::::process()",
      "37": "SegmentationEngineTest::::process()",
      "38": "SegmentationEngineTest::::process()",
      "39": "SegmentationEngineTest::::process()",
      "40": "SegmentationEngineTest::::process()",
      "41": "SegmentationEngineTest::::process()",
      "42": "SegmentationEngineTest::::process()",
      "43": "SegmentationEngineTest::::process()",
      "44": "SegmentationEngineTest::::process()",
      "45": "SegmentationEngineTest::::process()",
      "46": "SegmentationEngineTest::::process()",
      "47": "SegmentationEngineTest::::process()",
      "48": "SegmentationEngineTest::::process()",
      "49": "SegmentationEngineTest::::process()",
      "50": "SegmentationEngineTest::::process()",
      "51": "SegmentationEngineTest::::process()",
      "52": "SegmentationEngineTest::::process()"
    },
    "tests": [
      {
        "test_lines": [
          16,
          52
        ],
        "covered_lines": [
          27,
          28,
          29,
          39,
          40,
          43,
          44,
          45,
          46,
          47,
          48,
          51,
          62,
          64,
          66,
          67,
          68,
          70,
          72,
          73,
          75
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-layout/src/main/java/org/ofdrw/layout/engine/render/DivRender.java": {
    "class_content": [
      "package org.ofdrw.layout.engine.render;\n",
      "\n",
      "import org.ofdrw.core.basicStructure.pageObj.layer.block.CT_PageBlock;\n",
      "import org.ofdrw.core.basicStructure.pageObj.layer.block.PathObject;\n",
      "import org.ofdrw.core.basicType.STBase;\n",
      "import org.ofdrw.core.basicType.ST_Array;\n",
      "import org.ofdrw.core.basicType.ST_ID;\n",
      "import org.ofdrw.core.basicType.ST_Loc;\n",
      "import org.ofdrw.core.graph.pathObj.AbbreviatedData;\n",
      "import org.ofdrw.core.pageDescription.CT_GraphicUnit;\n",
      "import org.ofdrw.core.pageDescription.color.color.CT_Color;\n",
      "import org.ofdrw.layout.element.Div;\n",
      "import org.ofdrw.layout.engine.GraphHelper;\n",
      "import org.ofdrw.layout.engine.ResManager;\n",
      "\n",
      "import java.util.concurrent.atomic.AtomicInteger;\n",
      "\n",
      "/**\n",
      " * \u76d2\u5f0f\u6a21\u578b\u6e32\u67d3\u5668\n",
      " * <p>\n",
      " * {@link org.ofdrw.layout.element.Div} \u7684\u6e32\u67d3\u5668\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2020-03-21 14:18:40\n",
      " */\n",
      "public class DivRender implements Processor{\n",
      "\n",
      "    /**\n",
      "     * \u6267\u884cDiv\u5143\u7d20\u6e32\u67d3\n",
      "     *\n",
      "     * @param pageLoc   \u9875\u9762\u5728\u865a\u62df\u5bb9\u5668\u4e2d\u7edd\u5bf9\u8def\u5f84\u3002\n",
      "     * @param layer     \u56fe\u5c42\n",
      "     * @param resManager \u8d44\u6e90\u7ba1\u7406\u5668\n",
      "     * @param e         \u5143\u7d20\n",
      "     * @param maxUnitID \u6700\u5927ID\n",
      "     * @throws RenderException \u6e32\u67d3\u53d1\u751f\u9519\u8bef\n",
      "     */\n",
      "    @Override\n",
      "    public void render(ST_Loc pageLoc, CT_PageBlock layer, ResManager resManager, Div e, AtomicInteger maxUnitID) throws RenderException{\n",
      "        render(layer, e, maxUnitID);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6e32\u67d3Div\u5143\u7d20\u5230\u6307\u5b9a\u56fe\u5c42\n",
      "     *\n",
      "     * @param layer     \u56fe\u5c42\n",
      "     * @param e         \u5143\u7d20\n",
      "     * @param maxUnitID \u81ea\u589e\u7684\u6700\u5927ID\u63d0\u4f9b\u5668\n",
      "     */\n",
      "    public static void render(CT_PageBlock layer, Div<?> e, AtomicInteger maxUnitID) {\n",
      "        final int[] bgColor = e.getBackgroundColor();\n",
      "        if (bgColor == null && e.isNoBorder()) {\n",
      "            // \u6ca1\u6709\u80cc\u666f\u989c\u8272\u6ca1\u6709\u8fb9\u6846\uff0c\u90a3\u4e48\u8fd9\u4e2aDiv\u5c31\u4e0d\u9700\u8981\u7ed8\u5236\n",
      "            return;\n",
      "        }\n",
      "\n",
      "        // \u56fe\u5143\u900f\u660e\u5ea6\n",
      "        Integer alpha = null;\n",
      "        if (e.getOpacity() != null) {\n",
      "            alpha = (int) (e.getOpacity() * 255);\n",
      "        }\n",
      "\n",
      "        if (e.getHeight() == null) {\n",
      "            throw new IllegalArgumentException(\"Div\u5143\u7d20\u7684\u9ad8\u5ea6\u5fc5\u987b\u6307\u5b9a\");\n",
      "        }\n",
      "\n",
      "        Double borderTop = e.getBorderTop();\n",
      "        Double borderRight = e.getBorderRight();\n",
      "        Double borderBottom = e.getBorderBottom();\n",
      "        Double borderLeft = e.getBorderLeft();\n",
      "\n",
      "        /*\n",
      "           \u57fa\u7840\u7684\u76d2\u5f0f\u6a21\u578b\u7ed8\u5236\uff1a\n",
      "            1. \u9996\u5148\u7ed8\u5236\u80cc\u666f\u989c\u8272\n",
      "            2. \u7ed8\u5236\u8fb9\u6846\n",
      "         */\n",
      "        // \u80cc\u666f\u989c\u8272 (\u53c8\u80cc\u666f\u989c\u8272\u5e76\u4e14\uff0c\u5185\u5bb9\u5b58\u5728\u9ad8\u5ea6)\n",
      "        double eleContentHeight = e.getPaddingTop() + e.getHeight() + e.getPaddingBottom();\n",
      "\n",
      "        if (bgColor != null && eleContentHeight > 0) {\n",
      "            ST_ID objId = new ST_ID(maxUnitID.incrementAndGet());\n",
      "            PathObject bg = new PathObject(objId);\n",
      "            double x = e.getX() + e.getMarginLeft() + borderLeft;\n",
      "            double y = e.getY() + e.getMarginTop() + borderTop;\n",
      "            double w = e.getPaddingLeft() + e.getWidth() + e.getPaddingRight();\n",
      "            bg.setBoundary(x, y, w, eleContentHeight)\n",
      "                    // \u8bbe\u7f6e\u586b\u5145\u989c\u8272\u7684\u77e9\u5f62\u533a\u57df\n",
      "                    .setAbbreviatedData(GraphHelper.rect(0, 0, w, eleContentHeight))\n",
      "                    // \u8bbe\u7f6e\u4e0d\u63cf\u8fb9\u3001\u586b\u5145\uff0c\u5e76\u4e14\u8bbe\u7f6e\u586b\u5145\u989c\u8272\n",
      "                    .setStroke(false)\n",
      "                    .setFill(true)\n",
      "                    .setFillColor(CT_Color.rgb(bgColor));\n",
      "            if (alpha != null) {\n",
      "                bg.setAlpha(alpha);\n",
      "            }\n",
      "            // \u52a0\u5165\u56fe\u5c42\n",
      "            layer.addPageBlock(bg);\n",
      "        }\n",
      "\n",
      "        /*\n",
      "            \u8fb9\u6846\u7684\u7ed8\u5236\u6709\u4e24\u79cd\u60c5\u51b5:\n",
      "                1. 4\u6761\u8fb9\u5bbd\u5ea6\u90fd\u4e00\u81f4\u3002\n",
      "                2. 4\u6761\u8fb9\u5bbd\u5ea6\u4e0d\u4e00\u81f4\u3002\n",
      "         */\n",
      "\n",
      "        // \u865a\u7ebf\u8fb9\u6846\u6837\u5f0f\uff1a[\u504f\u79fb\u91cf,\u865a\u7ebf\u957f,\u7a7a\u767d\u957f, \u865a\u7ebf\u957f,\u7a7a\u767d\u957f, \u865a\u7ebf\u957f,\u7a7a\u767d\u957f, \u865a\u7ebf\u957f,\u7a7a\u767d\u957f, ...]\n",
      "        Double[] borderDash = e.getBorderDash();\n",
      "\n",
      "        // 4\u6761\u8fb9\u5bbd\u5ea6\u90fd\u4e00\u81f4\uff0c\u90a3\u4e48\u76f4\u63a5\u5b9a\u4f4d\u5e76\u4e14\u7ed8\u5236\n",
      "        if (eq(borderTop, borderRight, borderBottom, borderLeft)) {\n",
      "            double lineWidth = borderTop;\n",
      "            ST_ID objId = new ST_ID(maxUnitID.incrementAndGet());\n",
      "            PathObject border = new PathObject(objId);\n",
      "            double x = e.getX() + e.getMarginLeft();\n",
      "            double y = e.getY() + e.getMarginTop();\n",
      "            double w = lineWidth + e.getPaddingLeft() + e.getWidth() + e.getPaddingRight() + lineWidth;\n",
      "            double h = lineWidth + e.getPaddingTop() + e.getHeight() + e.getPaddingBottom() + lineWidth;\n",
      "            border.setBoundary(x, y, w, h)\n",
      "                    .setLineWidth(lineWidth)\n",
      "                    .setAbbreviatedData(GraphHelper.rect(\n",
      "                            lineWidth / 2, lineWidth / 2,\n",
      "                            w - lineWidth,\n",
      "                            h - lineWidth));\n",
      "            // \u5982\u679c\u5b58\u5728\u8fb9\u6846\u989c\u8272\uff0c\u90a3\u4e48\u8bbe\u7f6e\u989c\u8272\uff1b\u9ed8\u8ba4\u989c\u8272\u4e3a \u9ed1\u8272\n",
      "            int[] borderColor = e.getBorderColor();\n",
      "            if (borderColor != null) {\n",
      "                border.setStrokeColor(CT_Color.rgb(borderColor));\n",
      "            }\n",
      "            if (alpha != null) {\n",
      "                border.setAlpha(alpha);\n",
      "            }\n",
      "            if (borderDash != null) {\n",
      "                setLineDash(border, borderDash);\n",
      "            }\n",
      "            layer.addPageBlock(border);\n",
      "        }\n",
      "        // 4\u6761\u8fb9\u5bbd\u5ea6\u4e0d\u4e00\u81f4\uff0c\u9700\u8981\u5206\u522b\u7ed8\u5236\u5404\u6761\u8fb9\n",
      "        else {\n",
      "            /*\n",
      "                \u9876\u8fb9\n",
      "             */\n",
      "            double topWidth = borderTop;\n",
      "            double ZERO  = 0.00001;\n",
      "            if (topWidth > ZERO) {\n",
      "                ST_ID objId = new ST_ID(maxUnitID.incrementAndGet());\n",
      "                PathObject topBorder = new PathObject(objId);\n",
      "                double x = e.getX() + e.getMarginLeft();\n",
      "                double y = e.getY() + e.getMarginTop();\n",
      "                double w = borderLeft + e.getPaddingLeft() + e.getWidth() + e.getPaddingRight() + borderRight;\n",
      "                topBorder.setBoundary(x, y, w, topWidth)\n",
      "                        .setLineWidth(topWidth)\n",
      "                        .setAbbreviatedData(new AbbreviatedData().M(0, topWidth / 2).L(w, topWidth / 2));\n",
      "                int[] borderColor = e.getBorderColor();\n",
      "                if (borderColor != null) {\n",
      "                    topBorder.setStrokeColor(CT_Color.rgb(borderColor));\n",
      "                }\n",
      "                if (alpha != null) {\n",
      "                    topBorder.setAlpha(alpha);\n",
      "                }\n",
      "                if (borderDash != null) {\n",
      "                    setLineDash(topBorder, borderDash);\n",
      "                }\n",
      "                layer.addPageBlock(topBorder);\n",
      "            }\n",
      "            /*\n",
      "                \u5e95\u8fb9\n",
      "             */\n",
      "            double bottomWidth = borderBottom;\n",
      "            if (bottomWidth > ZERO) {\n",
      "                ST_ID objId = new ST_ID(maxUnitID.incrementAndGet());\n",
      "                PathObject bottomBorder = new PathObject(objId);\n",
      "                double x = e.getX() + e.getMarginLeft();\n",
      "                double y = e.getY()\n",
      "                        + e.getMarginTop()\n",
      "                        + borderTop\n",
      "                        + e.getPaddingTop()\n",
      "                        + e.getHeight()\n",
      "                        + e.getPaddingBottom();\n",
      "                double w = borderLeft + e.getPaddingLeft() + e.getWidth() + e.getPaddingRight() + borderRight;\n",
      "                bottomBorder.setBoundary(x, y, w, bottomWidth)\n",
      "                        .setLineWidth(bottomWidth)\n",
      "                        .setAbbreviatedData(new AbbreviatedData().M(0, bottomWidth / 2).L(w, bottomWidth / 2));\n",
      "                int[] borderColor = e.getBorderColor();\n",
      "                if (borderColor != null) {\n",
      "                    bottomBorder.setStrokeColor(CT_Color.rgb(borderColor));\n",
      "                }\n",
      "                if (alpha != null) {\n",
      "                    bottomBorder.setAlpha(alpha);\n",
      "                }\n",
      "                if (borderDash != null) {\n",
      "                    setLineDash(bottomBorder, borderDash);\n",
      "                }\n",
      "                layer.addPageBlock(bottomBorder);\n",
      "            }\n",
      "            // \u5143\u7d20\u4e2d\u6ca1\u6709\u4efb\u4f55\u5185\u5bb9\u548c\u8fb9\u6846\uff0c\u90a3\u4e48\u8ba4\u4e3a\u662f\u5360\u4f4d\u7b26\uff0c\u8df3\u8fc7\u7ed8\u5236\n",
      "            if ((topWidth + bottomWidth + eleContentHeight) == 0) {\n",
      "                return;\n",
      "            }\n",
      "            /*\n",
      "                \u5de6\u8fb9\n",
      "             */\n",
      "            double leftWidth = borderLeft;\n",
      "            if (leftWidth > ZERO) {\n",
      "                ST_ID objId = new ST_ID(maxUnitID.incrementAndGet());\n",
      "                PathObject leftBorder = new PathObject(objId);\n",
      "                double x = e.getX() + e.getMarginLeft();\n",
      "                double y = e.getY() + e.getMarginTop() + topWidth;\n",
      "                double h = borderTop + e.getPaddingTop()\n",
      "                        + e.getHeight() + e.getPaddingBottom() + borderBottom\n",
      "                        - topWidth - bottomWidth;\n",
      "                leftBorder.setBoundary(x, y, leftWidth, h)\n",
      "                        .setLineWidth(leftWidth)\n",
      "                        .setAbbreviatedData(new AbbreviatedData().M(leftWidth / 2, 0).L(leftWidth / 2, h));\n",
      "                int[] borderColor = e.getBorderColor();\n",
      "                if (borderColor != null) {\n",
      "                    leftBorder.setStrokeColor(CT_Color.rgb(borderColor));\n",
      "                }\n",
      "                if (alpha != null) {\n",
      "                    leftBorder.setAlpha(alpha);\n",
      "                }\n",
      "                if (borderDash != null) {\n",
      "                    setLineDash(leftBorder, borderDash);\n",
      "                }\n",
      "                layer.addPageBlock(leftBorder);\n",
      "            }\n",
      "\n",
      "            /*\n",
      "                \u53f3\u8fb9\n",
      "             */\n",
      "            double rightWidth = borderRight;\n",
      "            if (rightWidth > ZERO) {\n",
      "                ST_ID objId = new ST_ID(maxUnitID.incrementAndGet());\n",
      "                PathObject rightBorder = new PathObject(objId);\n",
      "                double x = e.getX()\n",
      "                        + e.getMarginLeft()\n",
      "                        + borderLeft\n",
      "                        + e.getPaddingLeft()\n",
      "                        + e.getWidth()\n",
      "                        + e.getPaddingRight();\n",
      "                double y = e.getY() + e.getMarginTop() + topWidth;\n",
      "                double h = borderTop + e.getPaddingTop()\n",
      "                        + e.getHeight() + e.getPaddingBottom() + borderBottom\n",
      "                        - topWidth - bottomWidth;\n",
      "                rightBorder.setBoundary(x, y, rightWidth, h)\n",
      "                        .setLineWidth(rightWidth)\n",
      "                        .setAbbreviatedData(new AbbreviatedData().M(rightWidth / 2, 0).L(rightWidth / 2, h));\n",
      "                int[] borderColor = e.getBorderColor();\n",
      "                if (borderColor != null) {\n",
      "                    rightBorder.setStrokeColor(CT_Color.rgb(borderColor));\n",
      "                }\n",
      "                if (alpha != null) {\n",
      "                    rightBorder.setAlpha(alpha);\n",
      "                }\n",
      "                if (borderDash != null) {\n",
      "                    setLineDash(rightBorder, borderDash);\n",
      "                }\n",
      "                layer.addPageBlock(rightBorder);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u7ebf\u6761\u865a\u7ebf\u6837\u5f0f\n",
      "     *\n",
      "     * @param g    \u56fe\u5143\n",
      "     * @param dash \u865a\u7ebf\u6837\u5f0f\uff0c[\u504f\u79fb\u91cf,\u865a\u7ebf\u957f,\u7a7a\u767d\u957f, \u865a\u7ebf\u957f,\u7a7a\u767d\u957f, \u865a\u7ebf\u957f,\u7a7a\u767d\u957f, \u865a\u7ebf\u957f,\u7a7a\u767d\u957f, ...]\n",
      "     */\n",
      "    private static void setLineDash(CT_GraphicUnit<?> g, Double[] dash) {\n",
      "        if (dash == null || dash.length == 0 || (dash.length == 1 && dash[0] == null)) {\n",
      "            return;\n",
      "        }\n",
      "        if (dash.length == 1) {\n",
      "            // \u5355\u4e2a\u53c2\u6570\uff0c\u8bbe\u7f6e\u865a\u7ebf\u957f\u5ea6\u4e0e\u7a7a\u767d\u76f8\u540c\n",
      "            dash = new Double[]{0.0, dash[0], dash[0]};\n",
      "        }\n",
      "        // \u8bbe\u7f6e \u865a\u7ebf\u504f\u79fb\u91cf\uff0c\u5ffd\u7565double\u7cbe\u5ea6\u8bef\u5dee 0.000001\n",
      "        if (dash[0] != null && dash[0] >= 0.000001) {\n",
      "            g.setDashOffset(dash[0]);\n",
      "        }\n",
      "        // \u622a\u53d6 dash[0:] \u521b\u5efa ST_Array\n",
      "        ST_Array dashPattern = new ST_Array();\n",
      "        for (int i = 1; i < dash.length; i++) {\n",
      "            dashPattern.add(STBase.fmt(dash[i]));\n",
      "        }\n",
      "        g.setDashPattern(dashPattern);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6bd4\u8f83\u4e24\u4e2adouble\u662f\u5426\u76f8\u7b49 \u5ffd\u7565\u7cbe\u5ea6\n",
      "     *\n",
      "     * @param arr \u6570\u7ec4\n",
      "     * @return true - \u76f8\u7b49, false - \u4e0d\u76f8\u7b49\n",
      "     */\n",
      "    public static boolean eq(double ...arr) {\n",
      "        if (arr == null || arr.length == 0) {\n",
      "            return true;\n",
      "        }\n",
      "        String last = null;\n",
      "        for (double v : arr) {\n",
      "            String fmt = STBase.fmt(v);\n",
      "            if (last == null) {\n",
      "                last = fmt;\n",
      "                continue;\n",
      "            }\n",
      "            if (!last.equals(fmt)) {\n",
      "                return false;\n",
      "            }\n",
      "        }\n",
      "        return true;\n",
      "    }\n",
      "\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.layout.engine.render;\n",
      "\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.*;\n",
      "\n",
      "class DivRenderTest {\n",
      "\n",
      "    @Test\n",
      "    void eq() {\n",
      "        assertTrue(DivRender.eq(0, 0));\n",
      "        assertTrue(DivRender.eq(1.1, 1.1));\n",
      "        assertTrue(DivRender.eq(0.0000001, 0.0000001));\n",
      "        assertTrue(DivRender.eq(0.000000001, 0.0000000012));\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "DivRender::::eq(double[])": [
        294,
        310
      ]
    },
    "test_method_lines_dic": {
      "DivRenderTest::::eq()": [
        9,
        15
      ]
    },
    "reverse_method_lines_dic": {
      "294": "DivRender::::eq(double[])",
      "295": "DivRender::::eq(double[])",
      "296": "DivRender::::eq(double[])",
      "297": "DivRender::::eq(double[])",
      "298": "DivRender::::eq(double[])",
      "299": "DivRender::::eq(double[])",
      "300": "DivRender::::eq(double[])",
      "301": "DivRender::::eq(double[])",
      "302": "DivRender::::eq(double[])",
      "303": "DivRender::::eq(double[])",
      "304": "DivRender::::eq(double[])",
      "305": "DivRender::::eq(double[])",
      "306": "DivRender::::eq(double[])",
      "307": "DivRender::::eq(double[])",
      "308": "DivRender::::eq(double[])",
      "309": "DivRender::::eq(double[])",
      "310": "DivRender::::eq(double[])"
    },
    "test_reverse_method_lines_dic": {
      "9": "DivRenderTest::::eq()",
      "10": "DivRenderTest::::eq()",
      "11": "DivRenderTest::::eq()",
      "12": "DivRenderTest::::eq()",
      "13": "DivRenderTest::::eq()",
      "14": "DivRenderTest::::eq()",
      "15": "DivRenderTest::::eq()"
    },
    "tests": [
      {
        "test_lines": [
          9,
          15
        ],
        "covered_lines": [
          295,
          298,
          299,
          300,
          301,
          302,
          303,
          305,
          309
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-layout/src/main/java/org/ofdrw/layout/areaholder/AreaHolderBlocks.java": {
    "class_content": [
      "package org.ofdrw.layout.areaholder;\n",
      "\n",
      "import org.dom4j.Element;\n",
      "import org.ofdrw.core.OFDElement;\n",
      "\n",
      "import java.util.List;\n",
      "\n",
      "/**\n",
      " * \u3010OFDRW \u6269\u5c55\u3011 \u533a\u57df\u5360\u4f4d\u533a\u5757\u5217\u8868 AreaHolderBlocks.xml\n",
      " * <p>\n",
      " * \u533a\u57df\u5360\u4f4d\u533a\u5757\u5217\u8868 \u662f OFDRW \u6269\u5c55\u7684\u5bf9\u8c61\uff0c\u533a\u57df\u5360\u4f4d\u533a\u5757\u5217\u8868\u53ef\u4ee5\u5305\u542b\u6587\u6863\u4e2d\u7684\u591a\u4e2a \u533a\u57df\u5360\u4f4d\u533a\u5757\u5bf9\u8c61 \uff0c\u6ce8\u610f\u6bcf\u4e2a \u533a\u57df\u5360\u4f4d\u533a\u5757\u5bf9\u8c61 \u7684\n",
      " * \u533a\u57df\u540d\u79f0\u5728 \u533a\u57df\u5360\u4f4d\u533a\u5757\u5217\u8868 \u4e2d\u5e94\u8be5\u552f\u4e00\u3002\n",
      " * <p>\n",
      " * \u901a\u5e38\u6765\u8bf4 AreaHolderBlocks.xml \u4f4d\u4e8e\u6587\u6863\u76ee\u5f55\u4e2d\uff0c\u4f8b\u5982\uff1a`/Doc_0/AreaHolderBlocks.xml`\u3002\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2023-10-28 15:30:36\n",
      " */\n",
      "public class AreaHolderBlocks extends OFDElement {\n",
      "\n",
      "    /**\n",
      "     * \u3010OFDRW \u6269\u5c55\u3011 \u533a\u57df\u5360\u4f4d\u533a\u5757\u5217\u8868 \u6587\u4ef6\u540d\u79f0\n",
      "     */\n",
      "    public static final String AreaHolderBlocksFile = \"AreaHolderBlocks.xml\";\n",
      "\n",
      "    public AreaHolderBlocks(Element proxy) {\n",
      "        super(proxy);\n",
      "    }\n",
      "\n",
      "    public AreaHolderBlocks() {\n",
      "        super(\"AreaHolderBlocks\");\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u3010\u53ef\u9009\u3011\n",
      "     * \u589e\u52a0 \u533a\u57df\u5360\u4f4d\u533a\u5757\n",
      "     *\n",
      "     * @param area \u533a\u57df\u5360\u4f4d\u533a\u5757\n",
      "     * @return this\n",
      "     */\n",
      "    public AreaHolderBlocks addAreaHolderBlock(CT_AreaHolderBlock ...area) {\n",
      "        if (area == null || area.length == 0) {\n",
      "            return this;\n",
      "        }\n",
      "        for (CT_AreaHolderBlock holderBlock : area) {\n",
      "            this.add(holderBlock);\n",
      "        }\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u3010\u53ef\u9009\u3011\n",
      "     * \u83b7\u53d6 \u533a\u57df\u5360\u4f4d\u533a\u5757 \u5e8f\u5217\n",
      "     *\n",
      "     * @return \u533a\u57df\u5360\u4f4d\u533a\u5757 \u5e8f\u5217\n",
      "     */\n",
      "    public List<CT_AreaHolderBlock> getAreaHolderBlocks() {\n",
      "        return this.getOFDElements(\"AreaHolderBlock\", CT_AreaHolderBlock::new);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.layout.areaholder;\n",
      "\n",
      "import org.dom4j.io.OutputFormat;\n",
      "import org.dom4j.io.XMLWriter;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.ofdrw.core.basicType.ST_Box;\n",
      "import org.ofdrw.core.basicType.ST_Loc;\n",
      "import org.ofdrw.core.basicType.ST_RefID;\n",
      "\n",
      "\n",
      "class AreaHolderBlocksTest {\n",
      "    @Test\n",
      "    public void testMarshall()throws Exception{\n",
      "        AreaHolderBlocks arrs = new AreaHolderBlocks();\n",
      "        CT_AreaHolderBlock obj = new CT_AreaHolderBlock(\"UserName\");\n",
      "        obj.setBoundary(new ST_Box(10, 10, 100, 100));\n",
      "        obj.setPageBlockID(new ST_RefID(233));\n",
      "        obj.setPageFile(ST_Loc.getInstance(\"/Doc_0/Pages/Page_0/Content.xml\"));\n",
      "        arrs.addAreaHolderBlock(obj);\n",
      "\n",
      "        XMLWriter writerToSout = new XMLWriter(System.out, OutputFormat.createPrettyPrint());\n",
      "        writerToSout.write(arrs);\n",
      "        writerToSout.flush();\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "AreaHolderBlocks::::addAreaHolderBlock(org.ofdrw.layout.areaholder.CT_AreaHolderBlock[])": [
        42,
        50
      ],
      "AreaHolderBlocks::::getAreaHolderBlocks()": [
        58,
        60
      ]
    },
    "test_method_lines_dic": {
      "AreaHolderBlocksTest::::testMarshall()": [
        12,
        24
      ]
    },
    "reverse_method_lines_dic": {
      "42": "AreaHolderBlocks::::addAreaHolderBlock(org.ofdrw.layout.areaholder.CT_AreaHolderBlock[])",
      "43": "AreaHolderBlocks::::addAreaHolderBlock(org.ofdrw.layout.areaholder.CT_AreaHolderBlock[])",
      "44": "AreaHolderBlocks::::addAreaHolderBlock(org.ofdrw.layout.areaholder.CT_AreaHolderBlock[])",
      "45": "AreaHolderBlocks::::addAreaHolderBlock(org.ofdrw.layout.areaholder.CT_AreaHolderBlock[])",
      "46": "AreaHolderBlocks::::addAreaHolderBlock(org.ofdrw.layout.areaholder.CT_AreaHolderBlock[])",
      "47": "AreaHolderBlocks::::addAreaHolderBlock(org.ofdrw.layout.areaholder.CT_AreaHolderBlock[])",
      "48": "AreaHolderBlocks::::addAreaHolderBlock(org.ofdrw.layout.areaholder.CT_AreaHolderBlock[])",
      "49": "AreaHolderBlocks::::addAreaHolderBlock(org.ofdrw.layout.areaholder.CT_AreaHolderBlock[])",
      "50": "AreaHolderBlocks::::addAreaHolderBlock(org.ofdrw.layout.areaholder.CT_AreaHolderBlock[])",
      "58": "AreaHolderBlocks::::getAreaHolderBlocks()",
      "59": "AreaHolderBlocks::::getAreaHolderBlocks()",
      "60": "AreaHolderBlocks::::getAreaHolderBlocks()"
    },
    "test_reverse_method_lines_dic": {
      "12": "AreaHolderBlocksTest::::testMarshall()",
      "13": "AreaHolderBlocksTest::::testMarshall()",
      "14": "AreaHolderBlocksTest::::testMarshall()",
      "15": "AreaHolderBlocksTest::::testMarshall()",
      "16": "AreaHolderBlocksTest::::testMarshall()",
      "17": "AreaHolderBlocksTest::::testMarshall()",
      "18": "AreaHolderBlocksTest::::testMarshall()",
      "19": "AreaHolderBlocksTest::::testMarshall()",
      "20": "AreaHolderBlocksTest::::testMarshall()",
      "21": "AreaHolderBlocksTest::::testMarshall()",
      "22": "AreaHolderBlocksTest::::testMarshall()",
      "23": "AreaHolderBlocksTest::::testMarshall()",
      "24": "AreaHolderBlocksTest::::testMarshall()"
    },
    "tests": [
      {
        "test_lines": [
          12,
          24
        ],
        "covered_lines": [
          31,
          32,
          43,
          46,
          47,
          49
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-layout/src/main/java/org/ofdrw/layout/areaholder/CT_AreaHolderBlock.java": {
    "class_content": [
      "package org.ofdrw.layout.areaholder;\n",
      "\n",
      "import org.dom4j.Element;\n",
      "import org.ofdrw.core.OFDElement;\n",
      "import org.ofdrw.core.basicType.ST_Box;\n",
      "import org.ofdrw.core.basicType.ST_Loc;\n",
      "import org.ofdrw.core.basicType.ST_RefID;\n",
      "\n",
      "/**\n",
      " * \u3010OFDRW \u6269\u5c55\u3011 \u533a\u57df\u5360\u4f4d\u533a\u5757\n",
      " * <p>\n",
      " * \u8be5\u5143\u7d20\u7528\u4e8e\u5b58\u50a8\u548c\u8868\u793a\u6587\u6863\u751f\u6210\u8005\u5728\u6587\u6863\u4e2d\u9884\u7f6e\u7684\u7ed8\u5236\u533a\u57df\u5360\u4f4d\u7b26\u3002\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2023-10-28 15:02:23\n",
      " */\n",
      "public class CT_AreaHolderBlock extends OFDElement {\n",
      "    public CT_AreaHolderBlock(Element proxy) {\n",
      "        super(proxy);\n",
      "    }\n",
      "\n",
      "    public CT_AreaHolderBlock() {\n",
      "        super(\"AreaHolderBlock\");\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u521b\u5efa \u533a\u57df\u5360\u4f4d\u533a\u5757\n",
      "     *\n",
      "     * @param areaName \u533a\u57df\u540d\u79f0\n",
      "     */\n",
      "    public CT_AreaHolderBlock(String areaName) {\n",
      "        this();\n",
      "        this.setAreaName(areaName);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u3010\u5fc5\u9009 \u5c5e\u6027\u3011\n",
      "     * \u8bbe\u7f6e \u533a\u57df\u540d\u79f0\n",
      "     *\n",
      "     * @param areaName \u533a\u57df\u540d\u79f0\n",
      "     * @return this\n",
      "     */\n",
      "    public CT_AreaHolderBlock setAreaName(String areaName) {\n",
      "        if (areaName == null) {\n",
      "            throw new IllegalArgumentException(\"\u533a\u57df\u540d\u79f0\uff08AreaName\uff09\u4e0d\u80fd\u4e3a\u7a7a\");\n",
      "        }\n",
      "        this.addAttribute(\"AreaName\", areaName);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u3010\u5fc5\u9009 \u5c5e\u6027\u3011\n",
      "     * \u83b7\u53d6 \u533a\u57df\u540d\u79f0\n",
      "     *\n",
      "     * @return \u533a\u57df\u540d\u79f0\n",
      "     */\n",
      "    public String getAreaName() {\n",
      "        return this.attributeValue(\"AreaName\");\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u3010\u5fc5\u9009 \u5c5e\u6027\u3011\n",
      "     * \u8bbe\u7f6e \u9875\u5757\u5f15\u7528\n",
      "     * <p>\n",
      "     * \u901a\u8fc7\u8be5ID\u5728\u9875\u9762\u4e2d\u5b9a\u4f4d\u5bb9\u5668\u5143\u7d20\u3002\n",
      "     *\n",
      "     * @param pageBlockID \u9875\u5757\u5f15\u7528\n",
      "     * @return this\n",
      "     */\n",
      "    public CT_AreaHolderBlock setPageBlockID(ST_RefID pageBlockID) {\n",
      "        if (pageBlockID == null) {\n",
      "            throw new IllegalArgumentException(\"\u9875\u5757\u5f15\u7528\uff08pageBlockID\uff09\u4e0d\u80fd\u4e3a\u7a7a\");\n",
      "        }\n",
      "\n",
      "        this.addAttribute(\"PageBlockID\", pageBlockID.toString());\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u3010\u5fc5\u9009 \u5c5e\u6027\u3011\n",
      "     * \u83b7\u53d6 \u9875\u5757\u5f15\u7528\n",
      "     * <p>\n",
      "     * \u901a\u8fc7\u8be5ID\u5728\u9875\u9762\u4e2d\u5b9a\u4f4d\u5bb9\u5668\u5143\u7d20\u3002\n",
      "     *\n",
      "     * @return \u9875\u5757\u5f15\u7528\n",
      "     */\n",
      "    public ST_RefID getPageBlockID() {\n",
      "        String pageBlock = this.attributeValue(\"PageBlockID\");\n",
      "        if (pageBlock == null || pageBlock.trim().length() == 0) {\n",
      "            return null;\n",
      "        }\n",
      "        return ST_RefID.getInstance(pageBlock);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u3010\u5fc5\u9009 \u5c5e\u6027\u3011\n",
      "     * \u8bbe\u7f6e \u533a\u57df\u5916\u63a5\u77e9\u5f62\n",
      "     * <p>\n",
      "     * \u533a\u57df\u5360\u4f4d\u533a\u5757\u5728\u9875\u9762\u4e2d\u7684\u4f4d\u7f6e\u548c\u5927\u5c0f\u3002\n",
      "     *\n",
      "     * @param boundary \u533a\u57df\u5916\u63a5\u77e9\u5f62\n",
      "     * @return this\n",
      "     */\n",
      "    public CT_AreaHolderBlock setBoundary(ST_Box boundary) {\n",
      "        if (boundary == null) {\n",
      "            throw new IllegalArgumentException(\"\u533a\u57df\u5916\u63a5\u77e9\u5f62\uff08boundary\uff09\u4e3a\u7a7a\");\n",
      "        }\n",
      "        this.addAttribute(\"Boundary\", boundary.toString());\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u3010\u5fc5\u9009 \u5c5e\u6027\u3011\n",
      "     * \u83b7\u53d6 \u533a\u57df\u5916\u63a5\u77e9\u5f62\n",
      "     * <p>\n",
      "     * \u533a\u57df\u5360\u4f4d\u533a\u5757\u5728\u9875\u9762\u4e2d\u7684\u4f4d\u7f6e\u548c\u5927\u5c0f\u3002\n",
      "     *\n",
      "     * @return \u533a\u57df\u5916\u63a5\u77e9\u5f62\n",
      "     */\n",
      "    public ST_Box getBoundary() {\n",
      "        String boundary = this.attributeValue(\"Boundary\");\n",
      "        if (boundary == null || boundary.trim().length() == 0) {\n",
      "            return null;\n",
      "        }\n",
      "        return ST_Box.getInstance(boundary);\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u3010\u5fc5\u9009\u3011\n",
      "     * \u8bbe\u7f6e \u9875\u9762\u6587\u4ef6\n",
      "     *\n",
      "     * @param pageLoc \u9875\u9762\u6587\u4ef6\u8def\u5f84\uff0c\u5360\u4f4d\u533a\u57df\u5757\u6240\u5728\u9875\u9762\u7684\u5728OFD\u5bb9\u5668\u4e2d\u7684\u7edd\u5bf9\u8def\u5f84\u3002\n",
      "     * @return this\n",
      "     */\n",
      "    public CT_AreaHolderBlock setPageFile(ST_Loc pageLoc) {\n",
      "        if (pageLoc == null || pageLoc.isEmpty()) {\n",
      "            throw new IllegalArgumentException(\"\u9875\u9762\u5bf9\u8c61\u8def\u5f84\uff08pageLoc\uff09\u4e3a\u7a7a\");\n",
      "        }\n",
      "        this.setOFDEntity(\"PageFile\", pageLoc.toString());\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u3010\u5fc5\u9009\u3011\n",
      "     * \u8bbe\u7f6e \u9875\u9762\u6587\u4ef6\n",
      "     *\n",
      "     * @param absPath \u9875\u9762\u6587\u4ef6\u8def\u5f84\uff0c\u5360\u4f4d\u533a\u57df\u5757\u6240\u5728\u9875\u9762\u7684\u5728OFD\u5bb9\u5668\u4e2d\u7684\u7edd\u5bf9\u8def\u5f84\u3002\n",
      "     * @return this\n",
      "     */\n",
      "    public CT_AreaHolderBlock setFontFile(String absPath) {\n",
      "        return setPageFile(new ST_Loc(absPath));\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u3010\u5fc5\u9009\u3011\n",
      "     * \u83b7\u53d6 \u9875\u9762\u6587\u4ef6\n",
      "     *\n",
      "     * @return \u5360\u4f4d\u533a\u57df\u5757\u6240\u5728\u9875\u9762\u7684\u5728OFD\u5bb9\u5668\u4e2d\u7684\u7edd\u5bf9\u8def\u5f84\u3002\n",
      "     */\n",
      "    public ST_Loc getFontFile() {\n",
      "        return ST_Loc.getInstance(this.getOFDElementText(\"PageFile\"));\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.layout.areaholder;\n",
      "\n",
      "import org.dom4j.io.OutputFormat;\n",
      "import org.dom4j.io.XMLWriter;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.ofdrw.core.basicType.ST_Box;\n",
      "import org.ofdrw.core.basicType.ST_Loc;\n",
      "import org.ofdrw.core.basicType.ST_RefID;\n",
      "\n",
      "class CT_AreaHolderBlockTest {\n",
      "\n",
      "    @Test\n",
      "    public void testMarshall()throws Exception{\n",
      "        CT_AreaHolderBlock obj = new CT_AreaHolderBlock(\"UserName\");\n",
      "        obj.setBoundary(new ST_Box(10, 10, 100, 100));\n",
      "        obj.setPageBlockID(new ST_RefID(233));\n",
      "        obj.setPageFile(ST_Loc.getInstance(\"/Doc_0/Pages/Page_0/Content.xml\"));\n",
      "        XMLWriter writerToSout = new XMLWriter(System.out, OutputFormat.createPrettyPrint());\n",
      "        writerToSout.write(obj);\n",
      "        writerToSout.flush();\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "CT_AreaHolderBlock::::setAreaName(java.lang.String)": [
        43,
        49
      ],
      "CT_AreaHolderBlock::::getAreaName()": [
        57,
        59
      ],
      "CT_AreaHolderBlock::::getPageBlockID()": [
        87,
        93
      ],
      "CT_AreaHolderBlock::::getBoundary()": [
        120,
        126
      ],
      "CT_AreaHolderBlock::::setFontFile(java.lang.String)": [
        151,
        153
      ],
      "CT_AreaHolderBlock::::getFontFile()": [
        161,
        163
      ]
    },
    "test_method_lines_dic": {
      "CT_AreaHolderBlockTest::::testMarshall()": [
        12,
        21
      ]
    },
    "reverse_method_lines_dic": {
      "43": "CT_AreaHolderBlock::::setAreaName(java.lang.String)",
      "44": "CT_AreaHolderBlock::::setAreaName(java.lang.String)",
      "45": "CT_AreaHolderBlock::::setAreaName(java.lang.String)",
      "46": "CT_AreaHolderBlock::::setAreaName(java.lang.String)",
      "47": "CT_AreaHolderBlock::::setAreaName(java.lang.String)",
      "48": "CT_AreaHolderBlock::::setAreaName(java.lang.String)",
      "49": "CT_AreaHolderBlock::::setAreaName(java.lang.String)",
      "57": "CT_AreaHolderBlock::::getAreaName()",
      "58": "CT_AreaHolderBlock::::getAreaName()",
      "59": "CT_AreaHolderBlock::::getAreaName()",
      "87": "CT_AreaHolderBlock::::getPageBlockID()",
      "88": "CT_AreaHolderBlock::::getPageBlockID()",
      "89": "CT_AreaHolderBlock::::getPageBlockID()",
      "90": "CT_AreaHolderBlock::::getPageBlockID()",
      "91": "CT_AreaHolderBlock::::getPageBlockID()",
      "92": "CT_AreaHolderBlock::::getPageBlockID()",
      "93": "CT_AreaHolderBlock::::getPageBlockID()",
      "120": "CT_AreaHolderBlock::::getBoundary()",
      "121": "CT_AreaHolderBlock::::getBoundary()",
      "122": "CT_AreaHolderBlock::::getBoundary()",
      "123": "CT_AreaHolderBlock::::getBoundary()",
      "124": "CT_AreaHolderBlock::::getBoundary()",
      "125": "CT_AreaHolderBlock::::getBoundary()",
      "126": "CT_AreaHolderBlock::::getBoundary()",
      "151": "CT_AreaHolderBlock::::setFontFile(java.lang.String)",
      "152": "CT_AreaHolderBlock::::setFontFile(java.lang.String)",
      "153": "CT_AreaHolderBlock::::setFontFile(java.lang.String)",
      "161": "CT_AreaHolderBlock::::getFontFile()",
      "162": "CT_AreaHolderBlock::::getFontFile()",
      "163": "CT_AreaHolderBlock::::getFontFile()"
    },
    "test_reverse_method_lines_dic": {
      "12": "CT_AreaHolderBlockTest::::testMarshall()",
      "13": "CT_AreaHolderBlockTest::::testMarshall()",
      "14": "CT_AreaHolderBlockTest::::testMarshall()",
      "15": "CT_AreaHolderBlockTest::::testMarshall()",
      "16": "CT_AreaHolderBlockTest::::testMarshall()",
      "17": "CT_AreaHolderBlockTest::::testMarshall()",
      "18": "CT_AreaHolderBlockTest::::testMarshall()",
      "19": "CT_AreaHolderBlockTest::::testMarshall()",
      "20": "CT_AreaHolderBlockTest::::testMarshall()",
      "21": "CT_AreaHolderBlockTest::::testMarshall()"
    },
    "tests": [
      {
        "test_lines": [
          12,
          21
        ],
        "covered_lines": [
          23,
          24,
          32,
          33,
          34,
          44,
          47,
          48,
          71,
          75,
          76,
          105,
          108,
          109,
          137,
          140,
          141
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-layout/src/main/java/org/ofdrw/layout/areaholder/AreaHolderContext.java": {
    "class_content": [
      "package org.ofdrw.layout.areaholder;\n",
      "\n",
      "\n",
      "import org.dom4j.DocumentException;\n",
      "import org.dom4j.Element;\n",
      "import org.ofdrw.core.basicStructure.pageObj.Page;\n",
      "import org.ofdrw.core.basicStructure.pageObj.layer.block.CT_PageBlock;\n",
      "import org.ofdrw.core.basicType.ST_Box;\n",
      "import org.ofdrw.core.basicType.ST_Loc;\n",
      "import org.ofdrw.core.basicType.ST_RefID;\n",
      "import org.ofdrw.layout.OFDDoc;\n",
      "import org.ofdrw.layout.edit.AdditionVPage;\n",
      "import org.ofdrw.layout.element.canvas.Canvas;\n",
      "import org.ofdrw.layout.element.canvas.CellContentDrawer;\n",
      "import org.ofdrw.pkg.container.DocDir;\n",
      "import org.ofdrw.reader.ResourceLocator;\n",
      "\n",
      "import java.io.FileNotFoundException;\n",
      "\n",
      "/**\n",
      " * \u533a\u57df\u5360\u4f4d\u533a\u5757\u4e0a\u4e0b\u6587\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2023-10-28 16:16:02\n",
      " */\n",
      "public class AreaHolderContext {\n",
      "\n",
      "    /**\n",
      "     * \u6587\u6863\u4e0a\u4e0b\u6587\n",
      "     */\n",
      "    private final OFDDoc doc;\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u6b63\u5728\u64cd\u4f5c\u7684\u6587\u6863\u76ee\u5f55\n",
      "     */\n",
      "    private final DocDir docDir;\n",
      "\n",
      "    /**\n",
      "     * \u8d44\u6e90\u52a0\u8f7d\u5668\n",
      "     */\n",
      "    private final ResourceLocator rl;\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u521b\u5efa \u533a\u57df\u5360\u4f4d\u533a\u5757 \u4e0a\u4e0b\u6587\n",
      "     *\n",
      "     * @param doc \u6587\u6863\u4e0a\u4e0b\u6587\n",
      "     * @param n   \u6587\u6863\u5e8f\u53f7\n",
      "     * @throws FileNotFoundException \u6587\u6863\u4e0d\u5b58\u5728\n",
      "     */\n",
      "    public AreaHolderContext(OFDDoc doc, int n) throws FileNotFoundException {\n",
      "        this.rl = new ResourceLocator(doc.getOfdDir());\n",
      "        this.doc = doc;\n",
      "        this.docDir = doc.getOfdDir().getDocByIndex(n);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u521b\u5efa \u533a\u57df\u5360\u4f4d\u533a\u5757 \u4e0a\u4e0b\u6587\n",
      "     *\n",
      "     * @param doc \u6587\u6863\u4e0a\u4e0b\u6587\n",
      "     */\n",
      "    public AreaHolderContext(OFDDoc doc) {\n",
      "        this.rl = new ResourceLocator(doc.getOfdDir());\n",
      "        this.doc = doc;\n",
      "        this.docDir = doc.getOfdDir().obtainDocDefault();\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u6307\u5b9a\u540d\u79f0\u7684 \u533a\u57df\u5355\u5143\u683c\u5bf9\u8c61\n",
      "     *\n",
      "     * @param areaName \u533a\u57df\u540d\u79f0\n",
      "     * @return \u533a\u57df\u5355\u5143\u683c\u5bf9\u8c61\uff0c\u533a\u57df\u540d\u79f0\u82e5\u4e0d\u5b58\u5728\u5219\u8fd4\u56denull\u3002\n",
      "     */\n",
      "    public CellContentDrawer getCell(String areaName) {\n",
      "        if (areaName == null) {\n",
      "            return null;\n",
      "        }\n",
      "        Canvas canvas = get(areaName);\n",
      "        return new CellContentDrawer(canvas);\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u6307\u5b9a\u540d\u79f0\u7684 \u533a\u57df\u5360\u4f4d\u533a\u5757\n",
      "     * <p>\n",
      "     * \u6ce8\u610f\uff1a\n",
      "     * <p>\n",
      "     * \u83b7\u53d6\u7684Canvas\u65e0\u6cd5\u8bbe\u7f6e\u56fe\u5c42\uff0c\u56fe\u5c42\u7531 \u533a\u57df\u5360\u4f4d\u533a\u5757 \u5728\u8bbe\u7f6e\u65f6\u6307\u5b9a\u4e0d\u53ef\u66f4\u6539\u3002\n",
      "     * <p>\n",
      "     * \u83b7\u53d6\u5230\u7684Canvas \u4f60\u9700\u8981\u624b\u52a8Add\u5230\u6587\u6863\u4e2d\u624d\u53ef\u751f\u6548\u3002\n",
      "     *\n",
      "     * @param areaName \u533a\u57df\u540d\u79f0\n",
      "     * @return \u56fe\u5f62\u7ed8\u5236\u5668\uff0c\u6ce8\u610f\uff1a\u5982\u679c\u533a\u57df\u4e0d\u5b58\u5728\u5219\u8fd4\u56denull\n",
      "     */\n",
      "    public Canvas get(String areaName) {\n",
      "        // \u4e0d\u5b58\u5728 \u533a\u57df\u5360\u4f4d\u533a\u5757\u5217\u8868\n",
      "        if (AreaHolderBlocksProcess.exist(docDir) == false) {\n",
      "            return null;\n",
      "        }\n",
      "        try {\n",
      "            // \u83b7\u53d6\u533a\u57df\u5360\u4f4d\u533a\u5757\u5217\u8868\u6587\u4ef6\n",
      "            AreaHolderBlocks areaHolderBlocks = AreaHolderBlocksProcess.get(docDir);\n",
      "            // \u83b7\u53d6\u533a\u57df\u5360\u4f4d\u533a\u5757\n",
      "            CT_AreaHolderBlock holder = AreaHolderBlocksProcess.find(areaHolderBlocks, areaName);\n",
      "            if (holder == null) {\n",
      "                // \u672a\u80fd\u627e\u5230\u533a\u57df\n",
      "                return null;\n",
      "            }\n",
      "            ST_RefID blockId = holder.getPageBlockID();\n",
      "            ST_Loc pageLoc = holder.getFontFile();\n",
      "            ST_Box boundary = holder.getBoundary();\n",
      "            if (blockId == null || pageLoc == null || boundary == null) {\n",
      "                return null;\n",
      "            }\n",
      "            if (boundary.getHeight() <= 0 || boundary.getWidth() <= 0) {\n",
      "                // \u65e0\u6548\u7ed8\u5236\u533a\u57df\n",
      "                return null;\n",
      "            }\n",
      "\n",
      "            // \u83b7\u53d6\u9875\u9762 \u5bf9\u8c61\n",
      "            Page page = null;\n",
      "            try {\n",
      "                page = this.rl.get(pageLoc, Page::new);\n",
      "            } catch (DocumentException | FileNotFoundException e) {\n",
      "                return null;\n",
      "            }\n",
      "            if (page == null) {\n",
      "                return null;\n",
      "            }\n",
      "            // \u901a\u8fc7ID\u4ece\u9875\u9762\u4e2d\u627e\u5230PageBlock\u5bf9\u8c61\u4f5c\u4e3a\u5bb9\u5668\n",
      "            Element element = (Element) page.selectSingleNode(\"//*[@ID='\" + blockId.toString() + \"']\");\n",
      "            if (element == null) {\n",
      "                return null;\n",
      "            }\n",
      "            CT_PageBlock block = new CT_PageBlock(element);\n",
      "\n",
      "            // \u521b\u5efa\u7ed8\u5236\u5668\n",
      "            Canvas canvas = new Canvas(\n",
      "                    boundary.getTopLeftX(), boundary.getTopLeftY(),\n",
      "                    boundary.getWidth(), boundary.getHeight()\n",
      "            );\n",
      "\n",
      "//            // DEBUG: \u7ed8\u5236\u533a\u57df\u8fb9\u6846\n",
      "//            canvas.setBorder(0.1);\n",
      "//            canvas.setBorderColor(255, 0, 0);\n",
      "\n",
      "            canvas.setPreferBlock(block);\n",
      "\n",
      "            AdditionVPage virtualPage = new AdditionVPage(page, pageLoc);\n",
      "            virtualPage.add(canvas);\n",
      "            doc.addVPage(virtualPage);\n",
      "            return canvas;\n",
      "        } catch (DocumentException | FileNotFoundException e) {\n",
      "            throw new IllegalArgumentException(\"\u533a\u57df\u5360\u4f4d\u533a\u5757\u5217\u8868\u6587\u4ef6\u83b7\u53d6\u5931\u8d25 \", e);\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.layout.areaholder;\n",
      "\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.ofdrw.layout.OFDDoc;\n",
      "import org.ofdrw.layout.element.canvas.Canvas;\n",
      "import org.ofdrw.layout.element.canvas.CellContentDrawer;\n",
      "import org.ofdrw.reader.OFDReader;\n",
      "\n",
      "import java.nio.file.Path;\n",
      "import java.nio.file.Paths;\n",
      "\n",
      "\n",
      "class AreaHolderContextTest {\n",
      "\n",
      "    /**\n",
      "     * \u6d4b\u8bd5\u83b7\u53d6\u533a\u57df\u5360\u4f4d\u7b26\n",
      "     */\n",
      "    @Test\n",
      "    void testGet() throws Exception {\n",
      "        Path srcP = Paths.get(\"src/test/resources\", \"areaholder_fields.ofd\");\n",
      "        Path outP = Paths.get(\"target/fill_field.ofd\");\n",
      "        try (OFDReader reader = new OFDReader(srcP);\n",
      "             OFDDoc ofdDoc = new OFDDoc(reader, outP)) {\n",
      "            AreaHolderContext holderCtx = new AreaHolderContext(ofdDoc);\n",
      "            Canvas canvas = holderCtx.get(\"name\");\n",
      "            if (canvas == null) {\n",
      "                return;\n",
      "            }\n",
      "            System.out.printf(\">> Area [name] (%.2f, %.2f, %.2f, %.2f)\\n\", canvas.getX(), canvas.getY(), canvas.getWidth(), canvas.getHeight());\n",
      "            canvas.setDrawer((ctx) -> {\n",
      "                ctx.font = \"6mm \u9ed1\u4f53\";\n",
      "                ctx.fillStyle = \"#0000FF\";\n",
      "                String text = \"OFD\u8bfb\u5199\u5e93 OFD R&W\";\n",
      "                ctx.fillText(text, 3, 7);\n",
      "            });\n",
      "\n",
      "            canvas = holderCtx.get(\"birthday\");\n",
      "            if (canvas == null) {\n",
      "                return;\n",
      "            }\n",
      "            System.out.printf(\">> Area [birthday] (%.2f, %.2f, %.2f, %.2f)\\n\", canvas.getX(), canvas.getY(), canvas.getWidth(), canvas.getHeight());\n",
      "            canvas.setDrawer((ctx) -> {\n",
      "                ctx.font = \"6mm \u9ed1\u4f53\";\n",
      "                ctx.fillStyle = \"#0000FF\";\n",
      "                String text = \"2019-09-27\"; // OFD RW \u9996\u6b21\u63d0\u4ea4\n",
      "                ctx.fillText(text, 3, 7);\n",
      "            });\n",
      "        }\n",
      "        System.out.println(\">> \" + outP.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5355\u5143\u683c\u5185\u5bb9\u7ed8\u5236\n",
      "     */\n",
      "    @Test\n",
      "    void getCell() throws Exception {\n",
      "        Path srcP = Paths.get(\"src/test/resources\", \"areaholder_fields.ofd\");\n",
      "        Path outP = Paths.get(\"target/fill_cell_field.ofd\");\n",
      "        try (OFDReader reader = new OFDReader(srcP);\n",
      "             OFDDoc ofdDoc = new OFDDoc(reader, outP)) {\n",
      "            AreaHolderContext holderCtx = new AreaHolderContext(ofdDoc);\n",
      "\n",
      "            CellContentDrawer nameCell = holderCtx.getCell(\"name\");\n",
      "            if (nameCell == null) {\n",
      "                return;\n",
      "            }\n",
      "            nameCell.setValue(\"OFD\u8bfb\u5199\u5e93 OFD R&W\");\n",
      "            nameCell.setFontSize(6d);\n",
      "            nameCell.setFontName(\"\u9ed1\u4f53\");\n",
      "            nameCell.setColor(\"#0000FF\");\n",
      "            nameCell.setTextAlign(org.ofdrw.layout.element.canvas.TextAlign.center);\n",
      "\n",
      "            CellContentDrawer birthdayCell = holderCtx.getCell(\"birthday\");\n",
      "            if (birthdayCell == null) {\n",
      "                return;\n",
      "            }\n",
      "            birthdayCell.setValue(\"2019-09-27\");\n",
      "            birthdayCell.setFontSize(6d);\n",
      "            birthdayCell.setFontName(\"\u9ed1\u4f53\");\n",
      "            birthdayCell.setTextAlign(org.ofdrw.layout.element.canvas.TextAlign.center);\n",
      "\n",
      "        }\n",
      "        System.out.println(\">> \" + outP.toAbsolutePath());\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "AreaHolderContext::::getCell(java.lang.String)": [
        76,
        82
      ],
      "AreaHolderContext::::get(java.lang.String)": [
        97,
        158
      ]
    },
    "test_method_lines_dic": {
      "AreaHolderContextTest::::testGet()": [
        18,
        50
      ],
      "AreaHolderContextTest::::getCell()": [
        55,
        84
      ]
    },
    "reverse_method_lines_dic": {
      "76": "AreaHolderContext::::getCell(java.lang.String)",
      "77": "AreaHolderContext::::getCell(java.lang.String)",
      "78": "AreaHolderContext::::getCell(java.lang.String)",
      "79": "AreaHolderContext::::getCell(java.lang.String)",
      "80": "AreaHolderContext::::getCell(java.lang.String)",
      "81": "AreaHolderContext::::getCell(java.lang.String)",
      "82": "AreaHolderContext::::getCell(java.lang.String)",
      "97": "AreaHolderContext::::get(java.lang.String)",
      "98": "AreaHolderContext::::get(java.lang.String)",
      "99": "AreaHolderContext::::get(java.lang.String)",
      "100": "AreaHolderContext::::get(java.lang.String)",
      "101": "AreaHolderContext::::get(java.lang.String)",
      "102": "AreaHolderContext::::get(java.lang.String)",
      "103": "AreaHolderContext::::get(java.lang.String)",
      "104": "AreaHolderContext::::get(java.lang.String)",
      "105": "AreaHolderContext::::get(java.lang.String)",
      "106": "AreaHolderContext::::get(java.lang.String)",
      "107": "AreaHolderContext::::get(java.lang.String)",
      "108": "AreaHolderContext::::get(java.lang.String)",
      "109": "AreaHolderContext::::get(java.lang.String)",
      "110": "AreaHolderContext::::get(java.lang.String)",
      "111": "AreaHolderContext::::get(java.lang.String)",
      "112": "AreaHolderContext::::get(java.lang.String)",
      "113": "AreaHolderContext::::get(java.lang.String)",
      "114": "AreaHolderContext::::get(java.lang.String)",
      "115": "AreaHolderContext::::get(java.lang.String)",
      "116": "AreaHolderContext::::get(java.lang.String)",
      "117": "AreaHolderContext::::get(java.lang.String)",
      "118": "AreaHolderContext::::get(java.lang.String)",
      "119": "AreaHolderContext::::get(java.lang.String)",
      "120": "AreaHolderContext::::get(java.lang.String)",
      "121": "AreaHolderContext::::get(java.lang.String)",
      "122": "AreaHolderContext::::get(java.lang.String)",
      "123": "AreaHolderContext::::get(java.lang.String)",
      "124": "AreaHolderContext::::get(java.lang.String)",
      "125": "AreaHolderContext::::get(java.lang.String)",
      "126": "AreaHolderContext::::get(java.lang.String)",
      "127": "AreaHolderContext::::get(java.lang.String)",
      "128": "AreaHolderContext::::get(java.lang.String)",
      "129": "AreaHolderContext::::get(java.lang.String)",
      "130": "AreaHolderContext::::get(java.lang.String)",
      "131": "AreaHolderContext::::get(java.lang.String)",
      "132": "AreaHolderContext::::get(java.lang.String)",
      "133": "AreaHolderContext::::get(java.lang.String)",
      "134": "AreaHolderContext::::get(java.lang.String)",
      "135": "AreaHolderContext::::get(java.lang.String)",
      "136": "AreaHolderContext::::get(java.lang.String)",
      "137": "AreaHolderContext::::get(java.lang.String)",
      "138": "AreaHolderContext::::get(java.lang.String)",
      "139": "AreaHolderContext::::get(java.lang.String)",
      "140": "AreaHolderContext::::get(java.lang.String)",
      "141": "AreaHolderContext::::get(java.lang.String)",
      "142": "AreaHolderContext::::get(java.lang.String)",
      "143": "AreaHolderContext::::get(java.lang.String)",
      "144": "AreaHolderContext::::get(java.lang.String)",
      "145": "AreaHolderContext::::get(java.lang.String)",
      "146": "AreaHolderContext::::get(java.lang.String)",
      "147": "AreaHolderContext::::get(java.lang.String)",
      "148": "AreaHolderContext::::get(java.lang.String)",
      "149": "AreaHolderContext::::get(java.lang.String)",
      "150": "AreaHolderContext::::get(java.lang.String)",
      "151": "AreaHolderContext::::get(java.lang.String)",
      "152": "AreaHolderContext::::get(java.lang.String)",
      "153": "AreaHolderContext::::get(java.lang.String)",
      "154": "AreaHolderContext::::get(java.lang.String)",
      "155": "AreaHolderContext::::get(java.lang.String)",
      "156": "AreaHolderContext::::get(java.lang.String)",
      "157": "AreaHolderContext::::get(java.lang.String)",
      "158": "AreaHolderContext::::get(java.lang.String)"
    },
    "test_reverse_method_lines_dic": {
      "18": "AreaHolderContextTest::::testGet()",
      "19": "AreaHolderContextTest::::testGet()",
      "20": "AreaHolderContextTest::::testGet()",
      "21": "AreaHolderContextTest::::testGet()",
      "22": "AreaHolderContextTest::::testGet()",
      "23": "AreaHolderContextTest::::testGet()",
      "24": "AreaHolderContextTest::::testGet()",
      "25": "AreaHolderContextTest::::testGet()",
      "26": "AreaHolderContextTest::::testGet()",
      "27": "AreaHolderContextTest::::testGet()",
      "28": "AreaHolderContextTest::::testGet()",
      "29": "AreaHolderContextTest::::testGet()",
      "30": "AreaHolderContextTest::::testGet()",
      "31": "AreaHolderContextTest::::testGet()",
      "32": "AreaHolderContextTest::::testGet()",
      "33": "AreaHolderContextTest::::testGet()",
      "34": "AreaHolderContextTest::::testGet()",
      "35": "AreaHolderContextTest::::testGet()",
      "36": "AreaHolderContextTest::::testGet()",
      "37": "AreaHolderContextTest::::testGet()",
      "38": "AreaHolderContextTest::::testGet()",
      "39": "AreaHolderContextTest::::testGet()",
      "40": "AreaHolderContextTest::::testGet()",
      "41": "AreaHolderContextTest::::testGet()",
      "42": "AreaHolderContextTest::::testGet()",
      "43": "AreaHolderContextTest::::testGet()",
      "44": "AreaHolderContextTest::::testGet()",
      "45": "AreaHolderContextTest::::testGet()",
      "46": "AreaHolderContextTest::::testGet()",
      "47": "AreaHolderContextTest::::testGet()",
      "48": "AreaHolderContextTest::::testGet()",
      "49": "AreaHolderContextTest::::testGet()",
      "50": "AreaHolderContextTest::::testGet()",
      "55": "AreaHolderContextTest::::getCell()",
      "56": "AreaHolderContextTest::::getCell()",
      "57": "AreaHolderContextTest::::getCell()",
      "58": "AreaHolderContextTest::::getCell()",
      "59": "AreaHolderContextTest::::getCell()",
      "60": "AreaHolderContextTest::::getCell()",
      "61": "AreaHolderContextTest::::getCell()",
      "62": "AreaHolderContextTest::::getCell()",
      "63": "AreaHolderContextTest::::getCell()",
      "64": "AreaHolderContextTest::::getCell()",
      "65": "AreaHolderContextTest::::getCell()",
      "66": "AreaHolderContextTest::::getCell()",
      "67": "AreaHolderContextTest::::getCell()",
      "68": "AreaHolderContextTest::::getCell()",
      "69": "AreaHolderContextTest::::getCell()",
      "70": "AreaHolderContextTest::::getCell()",
      "71": "AreaHolderContextTest::::getCell()",
      "72": "AreaHolderContextTest::::getCell()",
      "73": "AreaHolderContextTest::::getCell()",
      "74": "AreaHolderContextTest::::getCell()",
      "75": "AreaHolderContextTest::::getCell()",
      "76": "AreaHolderContextTest::::getCell()",
      "77": "AreaHolderContextTest::::getCell()",
      "78": "AreaHolderContextTest::::getCell()",
      "79": "AreaHolderContextTest::::getCell()",
      "80": "AreaHolderContextTest::::getCell()",
      "81": "AreaHolderContextTest::::getCell()",
      "82": "AreaHolderContextTest::::getCell()",
      "83": "AreaHolderContextTest::::getCell()",
      "84": "AreaHolderContextTest::::getCell()"
    },
    "tests": [
      {
        "test_lines": [
          18,
          50
        ],
        "covered_lines": [
          63,
          64,
          65,
          66,
          67,
          99,
          104,
          106,
          107,
          111,
          112,
          113,
          114,
          117,
          123,
          125,
          128,
          129,
          133,
          134,
          137,
          140,
          141,
          142,
          149,
          151,
          152,
          153,
          154
        ]
      },
      {
        "test_lines": [
          55,
          84
        ],
        "covered_lines": [
          63,
          64,
          65,
          66,
          67,
          77,
          80,
          81,
          99,
          104,
          106,
          107,
          111,
          112,
          113,
          114,
          117,
          123,
          125,
          128,
          129,
          133,
          134,
          137,
          140,
          141,
          142,
          149,
          151,
          152,
          153,
          154
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-layout/src/main/java/org/ofdrw/layout/edit/Annotation.java": {
    "class_content": [
      "package org.ofdrw.layout.edit;\n",
      "\n",
      "import org.ofdrw.core.annotation.pageannot.Annot;\n",
      "import org.ofdrw.core.annotation.pageannot.AnnotType;\n",
      "import org.ofdrw.core.annotation.pageannot.Appearance;\n",
      "import org.ofdrw.core.basicType.ST_Box;\n",
      "import org.ofdrw.layout.element.canvas.Drawer;\n",
      "\n",
      "import java.time.LocalDate;\n",
      "import java.util.*;\n",
      "\n",
      "/**\n",
      " * \u6ce8\u91ca\u5bf9\u8c61\n",
      " * <p>\n",
      " * \u8bf7\u8bbe\u7f6e\u7ed8\u5236\u5bf9\u8c61\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2020-05-14 19:09:37\n",
      " */\n",
      "public class Annotation {\n",
      "\n",
      "    /**\n",
      "     * \u7ed8\u5236\u5668\n",
      "     */\n",
      "    private Drawer drawer;\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u6ce8\u91ca\u7c7b\u578b\n",
      "     */\n",
      "    private AnnotType type;\n",
      "\n",
      "    /**\n",
      "     * \u6ce8\u91ca\u521b\u5efa\u8005\n",
      "     */\n",
      "    private String creator;\n",
      "\n",
      "    /**\n",
      "     * \u6700\u8fd1\u4e00\u6b21\u4fee\u6539\u7684\u65f6\u95f4\n",
      "     */\n",
      "    private LocalDate lastModDate;\n",
      "\n",
      "    /**\n",
      "     * \u6ce8\u91ca\u5b50\u7c7b\u578b\n",
      "     */\n",
      "    private String subtype = null;\n",
      "\n",
      "    /**\n",
      "     * \u8868\u793a\u8be5\u6ce8\u91ca\u5bf9\u8c61\u662f\u5426\u663e\u793a\n",
      "     */\n",
      "    private Boolean visible = null;\n",
      "\n",
      "    /**\n",
      "     * \u5bf9\u8c61\u7684 Remark \u4fe1\u606f\u662f\u5426\u4e0d\u968f\u9875\u9762\u65cb\u8f6c\u800c\u65cb\u8f6c\n",
      "     */\n",
      "    private Boolean noRotate = null;\n",
      "\n",
      "    /**\n",
      "     * \u4e00\u7ec4\u6ce8\u91ca\u53c2\u6570\n",
      "     * <p>\n",
      "     * \u4e3a\u4e86\u4fdd\u8bc1\u53c2\u6570\u7684\u987a\u5e8f\u91c7\u7528List\u5b58\u50a8\n",
      "     */\n",
      "    private LinkedHashMap<String, String> parameters = null;\n",
      "\n",
      "    /**\n",
      "     * \u6ce8\u91ca\u8bf4\u660e\u5185\u5bb9\n",
      "     */\n",
      "    private String remark = null;\n",
      "\n",
      "    /**\n",
      "     * \u5bf9\u8c61\u7684 Remark \u4fe1\u606f\u662f\u5426\u4e0d\u80fd\u88ab\u7528\u6237\u66f4\u6539\n",
      "     */\n",
      "    private Boolean readOnly;\n",
      "\n",
      "    /**\n",
      "     * \u5bf9\u8c61\u7684Remark \u4fe1\u606f\u662f\u5426\u968f\u9875\u9762\u4e00\u8d77\u6253\u5370\n",
      "     */\n",
      "    private Boolean print = null;\n",
      "\n",
      "    /**\n",
      "     * \u5bf9\u8c61\u7684 Remark \u4fe1\u606f\u662f\u5426\u4e0d\u968f\u9875\u9762\u7f29\u653e\u800c\u540c\u6b65\u7f29\u653e\n",
      "     */\n",
      "    private Boolean noZoom;\n",
      "\n",
      "    /**\n",
      "     * \u6ce8\u91ca\u7a7a\u95f4\n",
      "     */\n",
      "    private ST_Box boundary;\n",
      "\n",
      "\n",
      "    private Annotation() {\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u521b\u5efa\u6ce8\u91ca\u5bf9\u8c61\n",
      "     *\n",
      "     * @param x      \u6240\u5904\u9875\u9762 y\u5750\u6807\n",
      "     * @param y      \u6240\u5904\u9875\u9762 y\u5750\u6807\n",
      "     * @param width  \u753b\u5e03\u5bbd\u5ea6\n",
      "     * @param height \u753b\u5e03\u9ad8\u5ea6\n",
      "     * @param type   \u6ce8\u91ca\u7c7b\u578b\n",
      "     * @param drawer \u6ce8\u91ca\u7ed8\u5236\u5668\n",
      "     */\n",
      "    public Annotation(double x, double y,\n",
      "                      double width, double height,\n",
      "                      AnnotType type,\n",
      "                      Drawer drawer) {\n",
      "        this(new ST_Box(x, y, width, height), type, drawer);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u521b\u5efa\u6ce8\u89e3\u5bf9\u8c61\n",
      "     *\n",
      "     * @param boundary \u6ce8\u91ca\u5bf9\u8c61\u7ed8\u5236\u7a7a\u95f4\n",
      "     * @param type     \u6ce8\u91ca\u7c7b\u578b\n",
      "     * @param drawer   \u6ce8\u91ca\u7ed8\u5236\u5668\n",
      "     */\n",
      "    public Annotation(ST_Box boundary, AnnotType type, Drawer drawer) {\n",
      "        if (boundary == null) {\n",
      "            throw new IllegalArgumentException(\"\u6ce8\u91ca\u5bf9\u8c61\u7ed8\u5236\u7a7a\u95f4(boundary)\u4e0d\u80fd\u4e3a\u7a7a\");\n",
      "        }\n",
      "        if (type == null) {\n",
      "            throw new IllegalArgumentException(\"\u6ce8\u89e3\u5bf9\u8c61\u7c7b\u578b(type)\u4e0d\u80fd\u4e3a\u7a7a\");\n",
      "        }\n",
      "        if (drawer == null) {\n",
      "            throw new IllegalArgumentException(\"\u6ce8\u89e3\u7ed8\u5236\u5668(drawer)\u4e0d\u80fd\u4e3a\u7a7a\");\n",
      "        }\n",
      "        this.setDrawer(drawer);\n",
      "        this.type = type;\n",
      "        this.boundary = boundary;\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u6ce8\u91ca\u5e95\u5c42\u5bf9\u8c61\n",
      "     *\n",
      "     * @return \u6ce8\u91ca\u5bf9\u8c61\n",
      "     */\n",
      "    public Annot build() {\n",
      "        Annot annot = new Annot()\n",
      "                .setType(type)\n",
      "                .setCreator(creator == null ? \"OFD R&W\" : creator)\n",
      "                .setLastModDate(lastModDate == null ? LocalDate.now() : lastModDate);\n",
      "\n",
      "        if (visible != null) {\n",
      "            annot.setVisible(visible);\n",
      "        }\n",
      "        if (subtype != null) {\n",
      "            annot.setSubtype(subtype);\n",
      "        }\n",
      "        if (print != null) {\n",
      "            annot.setPrint(print);\n",
      "        }\n",
      "        if (noZoom != null) {\n",
      "            annot.setNoZoom(noZoom);\n",
      "        }\n",
      "        if (noRotate != null) {\n",
      "            annot.setNoRotate(noRotate);\n",
      "        }\n",
      "        if (readOnly != null) {\n",
      "            annot.setReadOnly(readOnly);\n",
      "        }\n",
      "        if (remark != null) {\n",
      "            annot.setRemark(remark);\n",
      "        }\n",
      "        if (parameters != null) {\n",
      "            parameters.forEach(annot::addParameter);\n",
      "        }\n",
      "        annot.setAppearance(new Appearance(boundary));\n",
      "        return annot;\n",
      "    }\n",
      "\n",
      "\n",
      "    public ST_Box getBoundary() {\n",
      "        return boundary;\n",
      "    }\n",
      "\n",
      "    public void setBoundary(ST_Box boundary) {\n",
      "        this.boundary = boundary;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5f53\u524d\u6ce8\u91ca\u7684\u7ed8\u5236\u5668\n",
      "     *\n",
      "     * @return \u7ed8\u5236\u5668\n",
      "     */\n",
      "    public Drawer getDrawer() {\n",
      "        return drawer;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u6ce8\u91ca\u7ed8\u5236\u5668\n",
      "     *\n",
      "     * @param drawer \u6ce8\u91ca\u7ed8\u5236\u5668\n",
      "     * @return this\n",
      "     */\n",
      "    public Annotation setDrawer(Drawer drawer) {\n",
      "        this.drawer = drawer;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e \u6ce8\u91ca\u7c7b\u578b\n",
      "     * <p>\n",
      "     * \u5177\u4f53\u53d6\u503c\u89c1{@link AnnotType}\n",
      "     *\n",
      "     * @param type \u6ce8\u91ca\u7c7b\u578b\n",
      "     * @return this\n",
      "     */\n",
      "    public Annotation setType(AnnotType type) {\n",
      "        this.type = type;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6 \u6ce8\u91ca\u7c7b\u578b\n",
      "     * <p>\n",
      "     * \u5177\u4f53\u53d6\u503c\u89c1{@link AnnotType}\n",
      "     *\n",
      "     * @return \u6ce8\u91ca\u7c7b\u578b\n",
      "     */\n",
      "    public AnnotType getType() {\n",
      "        return type;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e \u6ce8\u91ca\u521b\u5efa\u8005\n",
      "     *\n",
      "     * @param creator \u6ce8\u91ca\u521b\u5efa\u8005\n",
      "     * @return this\n",
      "     */\n",
      "    public Annotation setCreator(String creator) {\n",
      "        this.creator = creator;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6 \u6ce8\u91ca\u521b\u5efa\u8005\n",
      "     *\n",
      "     * @return \u6ce8\u91ca\u521b\u5efa\u8005\n",
      "     */\n",
      "    public String getCreator() {\n",
      "        return creator;\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e \u6700\u8fd1\u4e00\u6b21\u4fee\u6539\u7684\u65f6\u95f4\n",
      "     *\n",
      "     * @param lastModDate \u6700\u8fd1\u4e00\u6b21\u4fee\u6539\u7684\u65f6\u95f4\n",
      "     * @return this\n",
      "     */\n",
      "    public Annotation setLastModDate(LocalDate lastModDate) {\n",
      "        this.lastModDate = lastModDate;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6 \u6700\u8fd1\u4e00\u6b21\u4fee\u6539\u7684\u65f6\u95f4\n",
      "     *\n",
      "     * @return \u6700\u8fd1\u4e00\u6b21\u4fee\u6539\u7684\u65f6\u95f4\n",
      "     */\n",
      "    public LocalDate getLastModDate() {\n",
      "        return lastModDate;\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e \u6ce8\u91ca\u5b50\u7c7b\u578b\n",
      "     *\n",
      "     * @param subtype \u6ce8\u91ca\u5b50\u7c7b\u578b\n",
      "     * @return this\n",
      "     */\n",
      "    public Annotation setSubtype(String subtype) {\n",
      "        this.subtype = subtype;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6 \u6ce8\u91ca\u5b50\u7c7b\u578b\n",
      "     *\n",
      "     * @return \u6ce8\u91ca\u5b50\u7c7b\u578b\n",
      "     */\n",
      "    public String getSubtype() {\n",
      "        return subtype;\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e \u8868\u793a\u8be5\u6ce8\u91ca\u5bf9\u8c61\u662f\u5426\u663e\u793a\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\u503c\u4e3a true\n",
      "     *\n",
      "     * @param visible \u8868\u793a\u8be5\u6ce8\u91ca\u5bf9\u8c61\u662f\u5426\u663e\u793a\uff0c\u9ed8\u8ba4\u503c\u4e3a true\n",
      "     * @return this\n",
      "     */\n",
      "    public Annotation setVisible(boolean visible) {\n",
      "        this.visible = visible;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6 \u8868\u793a\u8be5\u6ce8\u91ca\u5bf9\u8c61\u662f\u5426\u663e\u793a\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\u503c\u4e3a true\n",
      "     *\n",
      "     * @return \u8868\u793a\u8be5\u6ce8\u91ca\u5bf9\u8c61\u662f\u5426\u663e\u793a\uff0c\u9ed8\u8ba4\u503c\u4e3a true\n",
      "     */\n",
      "    public Boolean getVisible() {\n",
      "        if (visible == null) {\n",
      "            return true;\n",
      "        }\n",
      "        return visible;\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e \u5bf9\u8c61\u7684Remark \u4fe1\u606f\u662f\u5426\u968f\u9875\u9762\u4e00\u8d77\u6253\u5370\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\u503c\u4e3a true\n",
      "     *\n",
      "     * @param print \u5bf9\u8c61\u7684Remark \u4fe1\u606f\u662f\u5426\u968f\u9875\u9762\u4e00\u8d77\u6253\u5370\n",
      "     * @return this\n",
      "     */\n",
      "    public Annotation setPrint(boolean print) {\n",
      "        this.print = print;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e \u5bf9\u8c61\u7684Remark \u4fe1\u606f\u662f\u5426\u968f\u9875\u9762\u4e00\u8d77\u6253\u5370\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\u503c\u4e3a true\n",
      "     *\n",
      "     * @return \u5bf9\u8c61\u7684Remark \u4fe1\u606f\u662f\u5426\u968f\u9875\u9762\u4e00\u8d77\u6253\u5370\n",
      "     */\n",
      "    public Boolean getPrint() {\n",
      "        if (print == null) {\n",
      "            return true;\n",
      "        }\n",
      "        return print;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e \u5bf9\u8c61\u7684 Remark \u4fe1\u606f\u662f\u5426\u4e0d\u968f\u9875\u9762\u7f29\u653e\u800c\u540c\u6b65\u7f29\u653e\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\u503c\u4e3a false\n",
      "     *\n",
      "     * @param noZoom \u5bf9\u8c61\u7684 Remark \u4fe1\u606f\u662f\u5426\u4e0d\u968f\u9875\u9762\u7f29\u653e\u800c\u540c\u6b65\u7f29\u653e\n",
      "     * @return this\n",
      "     */\n",
      "    public Annotation setNoZoom(boolean noZoom) {\n",
      "        this.noZoom = noZoom;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6 \u5bf9\u8c61\u7684 Remark \u4fe1\u606f\u662f\u5426\u4e0d\u968f\u9875\u9762\u7f29\u653e\u800c\u540c\u6b65\u7f29\u653e\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\u503c\u4e3a false\n",
      "     *\n",
      "     * @return \u5bf9\u8c61\u7684 Remark \u4fe1\u606f\u662f\u5426\u4e0d\u968f\u9875\u9762\u7f29\u653e\u800c\u540c\u6b65\u7f29\u653e\n",
      "     */\n",
      "    public Boolean getNoZoom() {\n",
      "        if (noZoom == null) {\n",
      "            return false;\n",
      "        }\n",
      "        return noZoom;\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e \u5bf9\u8c61\u7684 Remark \u4fe1\u606f\u662f\u5426\u4e0d\u968f\u9875\u9762\u65cb\u8f6c\u800c\u65cb\u8f6c\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\u503c\u4e3a false\n",
      "     *\n",
      "     * @param noRotate \u5bf9\u8c61\u7684 Remark \u4fe1\u606f\u662f\u5426\u4e0d\u968f\u9875\u9762\u65cb\u8f6c\u800c\u65cb\u8f6c\n",
      "     * @return this\n",
      "     */\n",
      "    public Annotation setNoRotate(boolean noRotate) {\n",
      "        this.noRotate = noRotate;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6 \u5bf9\u8c61\u7684 Remark \u4fe1\u606f\u662f\u5426\u4e0d\u968f\u9875\u9762\u65cb\u8f6c\u800c\u65cb\u8f6c\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\u503c\u4e3a false\n",
      "     *\n",
      "     * @return \u5bf9\u8c61\u7684 Remark \u4fe1\u606f\u662f\u5426\u4e0d\u968f\u9875\u9762\u65cb\u8f6c\u800c\u65cb\u8f6c\n",
      "     */\n",
      "    public Boolean getNoRotate() {\n",
      "        if (noRotate == null) {\n",
      "            return false;\n",
      "        }\n",
      "        return noRotate;\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e \u5bf9\u8c61\u7684 Remark \u4fe1\u606f\u662f\u5426\u4e0d\u80fd\u88ab\u7528\u6237\u66f4\u6539\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\u503c\u4e3a true\n",
      "     *\n",
      "     * @param readOnly \u5bf9\u8c61\u7684 Remark \u4fe1\u606f\u662f\u5426\u4e0d\u80fd\u88ab\u7528\u6237\u66f4\u6539\n",
      "     * @return this\n",
      "     */\n",
      "    public Annotation setReadOnly(boolean readOnly) {\n",
      "        this.readOnly = readOnly;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6 \u5bf9\u8c61\u7684 Remark \u4fe1\u606f\u662f\u5426\u4e0d\u80fd\u88ab\u7528\u6237\u66f4\u6539\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\u503c\u4e3a true\n",
      "     *\n",
      "     * @return \u5bf9\u8c61\u7684 Remark \u4fe1\u606f\u662f\u5426\u4e0d\u80fd\u88ab\u7528\u6237\u66f4\u6539\n",
      "     */\n",
      "    public Boolean getReadOnly() {\n",
      "        if (readOnly == null) {\n",
      "            return true;\n",
      "        }\n",
      "        return readOnly;\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e \u6ce8\u91ca\u8bf4\u660e\u5185\u5bb9\n",
      "     *\n",
      "     * @param remark \u6ce8\u91ca\u8bf4\u660e\u5185\u5bb9\n",
      "     * @return this\n",
      "     */\n",
      "    public Annotation setRemark(String remark) {\n",
      "        this.remark = remark;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6 \u6ce8\u91ca\u8bf4\u660e\u5185\u5bb9\n",
      "     *\n",
      "     * @return \u6ce8\u91ca\u8bf4\u660e\u5185\u5bb9\uff0c\u5982\u679c\u6ce8\u91ca\u8bf4\u660e\u5185\u5bb9\u4e0d\u5b58\u5728\u8fd4\u8fd8null\n",
      "     */\n",
      "    public String getRemark() {\n",
      "        return remark;\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u589e\u52a0 \u6ce8\u91ca\u53c2\u6570\n",
      "     *\n",
      "     * @param name      \u952e\u540d\n",
      "     * @param parameter \u503c\n",
      "     * @return this\n",
      "     */\n",
      "    public Annotation addParameter(String name, String parameter) {\n",
      "        if (parameters == null) {\n",
      "            parameters = new LinkedHashMap<>();\n",
      "        }\n",
      "        if (name == null) {\n",
      "            return this;\n",
      "        }\n",
      "        parameters.put(name, parameter);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6 \u4e00\u7ec4\u6ce8\u91ca\u53c2\u6570\n",
      "     *\n",
      "     * @return \u6ce8\u89e3\u53c2\u6570\u6620\u5c04\u8868, \u5982\u679c\u6ce8\u91ca\u53c2\u6570\u4e0d\u5b58\u5728\u90a3\u4e48\u8fd4\u8fd8\u7a7a\u7684\u96c6\u5408\n",
      "     */\n",
      "    public Map<String, String> getParameters() {\n",
      "        if (parameters == null) {\n",
      "            return Collections.emptyMap();\n",
      "        }\n",
      "        return parameters;\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.layout.edit;\n",
      "\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.ofdrw.core.annotation.pageannot.AnnotType;\n",
      "import org.ofdrw.core.basicType.ST_Box;\n",
      "import org.ofdrw.layout.OFDDoc;\n",
      "import org.ofdrw.layout.element.canvas.FontSetting;\n",
      "import org.ofdrw.reader.OFDReader;\n",
      "\n",
      "import java.nio.file.Path;\n",
      "import java.nio.file.Paths;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.*;\n",
      "\n",
      "/**\n",
      " * \u6ce8\u91ca\u6d4b\u8bd5\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2022-05-16 22:44:28\n",
      " */\n",
      "class AnnotationTest {\n",
      "\n",
      "    /**\n",
      "     * \u5411\u5df2\u6709\u6c34\u5370\u6587\u4ef6\uff0c\u91cd\u590d\u6dfb\u52a0\u6c34\u5370\n",
      "     */\n",
      "    @Test\n",
      "    void multiAdd() throws Exception{\n",
      "\n",
      "        Path srcP = Paths.get(\"src/test/resources/1-1.ofd\");\n",
      "        Path outP = Paths.get(\"target/2-1.ofd\");\n",
      "\n",
      "        try (OFDReader reader = new OFDReader(srcP);\n",
      "             OFDDoc ofdDoc = new OFDDoc(reader, outP)) {\n",
      "\n",
      "            Double width = ofdDoc.getPageLayout().getWidth();\n",
      "            Double height = ofdDoc.getPageLayout().getHeight();\n",
      "\n",
      "\n",
      "            Annotation annotation = new Annotation(new ST_Box(0d, 0d, width, height), AnnotType.Watermark, ctx -> {\n",
      "                FontSetting ff = FontSetting.getInstance(8);\n",
      "                ctx.setFillColor(255, 0, 0)\n",
      "                        .setFont(ff)\n",
      "                        .setGlobalAlpha(0.4);\n",
      "                ctx.save();\n",
      "                ctx.translate(25, 50);\n",
      "                ctx.rotate(0);\n",
      "                ctx.fillText(\"\u8fd9\u662f\u7b2c2\u6b21\u6c34\u5370\", 10, 10);\n",
      "            });\n",
      "\n",
      "            ofdDoc.addAnnotation(2, annotation);\n",
      "        }\n",
      "        System.out.println(\"\u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath().toString());\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "Annotation::::build()": [
        140,
        172
      ],
      "Annotation::::getBoundary()": [
        175,
        177
      ],
      "Annotation::::getDrawer()": [
        188,
        190
      ],
      "Annotation::::setDrawer(org.ofdrw.layout.element.canvas.Drawer)": [
        198,
        201
      ],
      "Annotation::::getType()": [
        225,
        227
      ],
      "Annotation::::setCreator(java.lang.String)": [
        235,
        238
      ],
      "Annotation::::getCreator()": [
        245,
        247
      ],
      "Annotation::::setLastModDate(java.time.LocalDate)": [
        256,
        259
      ],
      "Annotation::::getLastModDate()": [
        266,
        268
      ],
      "Annotation::::setSubtype(java.lang.String)": [
        277,
        280
      ],
      "Annotation::::getSubtype()": [
        287,
        289
      ],
      "Annotation::::setVisible(boolean)": [
        300,
        303
      ],
      "Annotation::::getVisible()": [
        312,
        317
      ],
      "Annotation::::setPrint(boolean)": [
        328,
        331
      ],
      "Annotation::::getPrint()": [
        340,
        345
      ],
      "Annotation::::setNoZoom(boolean)": [
        355,
        358
      ],
      "Annotation::::getNoZoom()": [
        367,
        372
      ],
      "Annotation::::setNoRotate(boolean)": [
        383,
        386
      ],
      "Annotation::::getNoRotate()": [
        395,
        400
      ],
      "Annotation::::setReadOnly(boolean)": [
        411,
        414
      ],
      "Annotation::::getReadOnly()": [
        423,
        428
      ],
      "Annotation::::setRemark(java.lang.String)": [
        437,
        440
      ],
      "Annotation::::getRemark()": [
        447,
        449
      ],
      "Annotation::::addParameter(java.lang.String,java.lang.String)": [
        459,
        468
      ],
      "Annotation::::getParameters()": [
        476,
        481
      ]
    },
    "test_method_lines_dic": {
      "AnnotationTest::::multiAdd()": [
        26,
        53
      ]
    },
    "reverse_method_lines_dic": {
      "140": "Annotation::::build()",
      "141": "Annotation::::build()",
      "142": "Annotation::::build()",
      "143": "Annotation::::build()",
      "144": "Annotation::::build()",
      "145": "Annotation::::build()",
      "146": "Annotation::::build()",
      "147": "Annotation::::build()",
      "148": "Annotation::::build()",
      "149": "Annotation::::build()",
      "150": "Annotation::::build()",
      "151": "Annotation::::build()",
      "152": "Annotation::::build()",
      "153": "Annotation::::build()",
      "154": "Annotation::::build()",
      "155": "Annotation::::build()",
      "156": "Annotation::::build()",
      "157": "Annotation::::build()",
      "158": "Annotation::::build()",
      "159": "Annotation::::build()",
      "160": "Annotation::::build()",
      "161": "Annotation::::build()",
      "162": "Annotation::::build()",
      "163": "Annotation::::build()",
      "164": "Annotation::::build()",
      "165": "Annotation::::build()",
      "166": "Annotation::::build()",
      "167": "Annotation::::build()",
      "168": "Annotation::::build()",
      "169": "Annotation::::build()",
      "170": "Annotation::::build()",
      "171": "Annotation::::build()",
      "172": "Annotation::::build()",
      "175": "Annotation::::getBoundary()",
      "176": "Annotation::::getBoundary()",
      "177": "Annotation::::getBoundary()",
      "188": "Annotation::::getDrawer()",
      "189": "Annotation::::getDrawer()",
      "190": "Annotation::::getDrawer()",
      "198": "Annotation::::setDrawer(org.ofdrw.layout.element.canvas.Drawer)",
      "199": "Annotation::::setDrawer(org.ofdrw.layout.element.canvas.Drawer)",
      "200": "Annotation::::setDrawer(org.ofdrw.layout.element.canvas.Drawer)",
      "201": "Annotation::::setDrawer(org.ofdrw.layout.element.canvas.Drawer)",
      "225": "Annotation::::getType()",
      "226": "Annotation::::getType()",
      "227": "Annotation::::getType()",
      "235": "Annotation::::setCreator(java.lang.String)",
      "236": "Annotation::::setCreator(java.lang.String)",
      "237": "Annotation::::setCreator(java.lang.String)",
      "238": "Annotation::::setCreator(java.lang.String)",
      "245": "Annotation::::getCreator()",
      "246": "Annotation::::getCreator()",
      "247": "Annotation::::getCreator()",
      "256": "Annotation::::setLastModDate(java.time.LocalDate)",
      "257": "Annotation::::setLastModDate(java.time.LocalDate)",
      "258": "Annotation::::setLastModDate(java.time.LocalDate)",
      "259": "Annotation::::setLastModDate(java.time.LocalDate)",
      "266": "Annotation::::getLastModDate()",
      "267": "Annotation::::getLastModDate()",
      "268": "Annotation::::getLastModDate()",
      "277": "Annotation::::setSubtype(java.lang.String)",
      "278": "Annotation::::setSubtype(java.lang.String)",
      "279": "Annotation::::setSubtype(java.lang.String)",
      "280": "Annotation::::setSubtype(java.lang.String)",
      "287": "Annotation::::getSubtype()",
      "288": "Annotation::::getSubtype()",
      "289": "Annotation::::getSubtype()",
      "300": "Annotation::::setVisible(boolean)",
      "301": "Annotation::::setVisible(boolean)",
      "302": "Annotation::::setVisible(boolean)",
      "303": "Annotation::::setVisible(boolean)",
      "312": "Annotation::::getVisible()",
      "313": "Annotation::::getVisible()",
      "314": "Annotation::::getVisible()",
      "315": "Annotation::::getVisible()",
      "316": "Annotation::::getVisible()",
      "317": "Annotation::::getVisible()",
      "328": "Annotation::::setPrint(boolean)",
      "329": "Annotation::::setPrint(boolean)",
      "330": "Annotation::::setPrint(boolean)",
      "331": "Annotation::::setPrint(boolean)",
      "340": "Annotation::::getPrint()",
      "341": "Annotation::::getPrint()",
      "342": "Annotation::::getPrint()",
      "343": "Annotation::::getPrint()",
      "344": "Annotation::::getPrint()",
      "345": "Annotation::::getPrint()",
      "355": "Annotation::::setNoZoom(boolean)",
      "356": "Annotation::::setNoZoom(boolean)",
      "357": "Annotation::::setNoZoom(boolean)",
      "358": "Annotation::::setNoZoom(boolean)",
      "367": "Annotation::::getNoZoom()",
      "368": "Annotation::::getNoZoom()",
      "369": "Annotation::::getNoZoom()",
      "370": "Annotation::::getNoZoom()",
      "371": "Annotation::::getNoZoom()",
      "372": "Annotation::::getNoZoom()",
      "383": "Annotation::::setNoRotate(boolean)",
      "384": "Annotation::::setNoRotate(boolean)",
      "385": "Annotation::::setNoRotate(boolean)",
      "386": "Annotation::::setNoRotate(boolean)",
      "395": "Annotation::::getNoRotate()",
      "396": "Annotation::::getNoRotate()",
      "397": "Annotation::::getNoRotate()",
      "398": "Annotation::::getNoRotate()",
      "399": "Annotation::::getNoRotate()",
      "400": "Annotation::::getNoRotate()",
      "411": "Annotation::::setReadOnly(boolean)",
      "412": "Annotation::::setReadOnly(boolean)",
      "413": "Annotation::::setReadOnly(boolean)",
      "414": "Annotation::::setReadOnly(boolean)",
      "423": "Annotation::::getReadOnly()",
      "424": "Annotation::::getReadOnly()",
      "425": "Annotation::::getReadOnly()",
      "426": "Annotation::::getReadOnly()",
      "427": "Annotation::::getReadOnly()",
      "428": "Annotation::::getReadOnly()",
      "437": "Annotation::::setRemark(java.lang.String)",
      "438": "Annotation::::setRemark(java.lang.String)",
      "439": "Annotation::::setRemark(java.lang.String)",
      "440": "Annotation::::setRemark(java.lang.String)",
      "447": "Annotation::::getRemark()",
      "448": "Annotation::::getRemark()",
      "449": "Annotation::::getRemark()",
      "459": "Annotation::::addParameter(java.lang.String,java.lang.String)",
      "460": "Annotation::::addParameter(java.lang.String,java.lang.String)",
      "461": "Annotation::::addParameter(java.lang.String,java.lang.String)",
      "462": "Annotation::::addParameter(java.lang.String,java.lang.String)",
      "463": "Annotation::::addParameter(java.lang.String,java.lang.String)",
      "464": "Annotation::::addParameter(java.lang.String,java.lang.String)",
      "465": "Annotation::::addParameter(java.lang.String,java.lang.String)",
      "466": "Annotation::::addParameter(java.lang.String,java.lang.String)",
      "467": "Annotation::::addParameter(java.lang.String,java.lang.String)",
      "468": "Annotation::::addParameter(java.lang.String,java.lang.String)",
      "476": "Annotation::::getParameters()",
      "477": "Annotation::::getParameters()",
      "478": "Annotation::::getParameters()",
      "479": "Annotation::::getParameters()",
      "480": "Annotation::::getParameters()",
      "481": "Annotation::::getParameters()"
    },
    "test_reverse_method_lines_dic": {
      "26": "AnnotationTest::::multiAdd()",
      "27": "AnnotationTest::::multiAdd()",
      "28": "AnnotationTest::::multiAdd()",
      "29": "AnnotationTest::::multiAdd()",
      "30": "AnnotationTest::::multiAdd()",
      "31": "AnnotationTest::::multiAdd()",
      "32": "AnnotationTest::::multiAdd()",
      "33": "AnnotationTest::::multiAdd()",
      "34": "AnnotationTest::::multiAdd()",
      "35": "AnnotationTest::::multiAdd()",
      "36": "AnnotationTest::::multiAdd()",
      "37": "AnnotationTest::::multiAdd()",
      "38": "AnnotationTest::::multiAdd()",
      "39": "AnnotationTest::::multiAdd()",
      "40": "AnnotationTest::::multiAdd()",
      "41": "AnnotationTest::::multiAdd()",
      "42": "AnnotationTest::::multiAdd()",
      "43": "AnnotationTest::::multiAdd()",
      "44": "AnnotationTest::::multiAdd()",
      "45": "AnnotationTest::::multiAdd()",
      "46": "AnnotationTest::::multiAdd()",
      "47": "AnnotationTest::::multiAdd()",
      "48": "AnnotationTest::::multiAdd()",
      "49": "AnnotationTest::::multiAdd()",
      "50": "AnnotationTest::::multiAdd()",
      "51": "AnnotationTest::::multiAdd()",
      "52": "AnnotationTest::::multiAdd()",
      "53": "AnnotationTest::::multiAdd()"
    },
    "tests": [
      {
        "test_lines": [
          26,
          53
        ],
        "covered_lines": [
          46,
          51,
          56,
          63,
          68,
          78,
          119,
          120,
          123,
          126,
          129,
          130,
          131,
          132,
          141,
          142,
          143,
          144,
          146,
          149,
          152,
          155,
          158,
          161,
          164,
          167,
          170,
          171,
          189,
          199,
          200
        ]
      }
    ]
  }
}