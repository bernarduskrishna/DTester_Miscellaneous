{
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-gm/src/main/java/org/ofdrw/gm/cert/PKCGenerate.java": {
    "class_content": [
      "package org.ofdrw.gm.cert;\n",
      "\n",
      "import org.bouncycastle.asn1.misc.MiscObjectIdentifiers;\n",
      "import org.bouncycastle.asn1.misc.NetscapeCertType;\n",
      "import org.bouncycastle.asn1.x500.X500Name;\n",
      "import org.bouncycastle.asn1.x500.X500NameBuilder;\n",
      "import org.bouncycastle.asn1.x500.style.BCStyle;\n",
      "import org.bouncycastle.asn1.x509.BasicConstraints;\n",
      "import org.bouncycastle.asn1.x509.ExtendedKeyUsage;\n",
      "import org.bouncycastle.asn1.x509.Extension;\n",
      "import org.bouncycastle.asn1.x509.KeyPurposeId;\n",
      "import org.bouncycastle.cert.X509CertificateHolder;\n",
      "import org.bouncycastle.cert.X509v3CertificateBuilder;\n",
      "import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;\n",
      "import org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder;\n",
      "import org.bouncycastle.jce.X509KeyUsage;\n",
      "import org.bouncycastle.jce.provider.BouncyCastleProvider;\n",
      "import org.bouncycastle.operator.ContentSigner;\n",
      "import org.bouncycastle.operator.OperatorCreationException;\n",
      "import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;\n",
      "import org.bouncycastle.pkcs.PKCS10CertificationRequest;\n",
      "import org.bouncycastle.pkcs.PKCS10CertificationRequestBuilder;\n",
      "import org.bouncycastle.pkcs.jcajce.JcaPKCS10CertificationRequest;\n",
      "import org.bouncycastle.pkcs.jcajce.JcaPKCS10CertificationRequestBuilder;\n",
      "\n",
      "import java.io.IOException;\n",
      "import java.io.OutputStream;\n",
      "import java.math.BigInteger;\n",
      "import java.nio.file.Files;\n",
      "import java.nio.file.Path;\n",
      "import java.security.*;\n",
      "import java.security.cert.Certificate;\n",
      "import java.security.cert.X509Certificate;\n",
      "import java.security.spec.ECGenParameterSpec;\n",
      "import java.time.Instant;\n",
      "import java.time.LocalDateTime;\n",
      "import java.time.ZoneId;\n",
      "import java.util.Date;\n",
      "\n",
      "/**\n",
      " * \u751f\u6210\u6d4b\u8bd5\u7684\u516c\u79c1\u94a5\u5bf9\u548c\u8bc1\u4e66\n",
      " * <p>\n",
      " * P12\u6587\u4ef6\n",
      " * <p>\n",
      " * PK - Public Key and Private Key Pair\n",
      " * <p>\n",
      " * C - Certificate\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2020-04-21 09:37:10\n",
      " */\n",
      "public class PKCGenerate {\n",
      "\n",
      "    static {\n",
      "        Security.addProvider(new BouncyCastleProvider());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * @return \u8bc1\u4e66\u8bf7\u6c42\u8bc6\u522b\u540d\u79f0 \uff08\u4e5f\u5c31\u662f\u8bc1\u4e66\u7684Subject\uff09\n",
      "     */\n",
      "    public static X500Name TestND() {\n",
      "        return new X500NameBuilder()\n",
      "                // \u56fd\u5bb6\u4ee3\u7801\n",
      "                .addRDN(BCStyle.C, \"CN\")\n",
      "                // \u7ec4\u7ec7\n",
      "                .addRDN(BCStyle.O, \"OFD R&W\")\n",
      "                // \u7701\u4efd\n",
      "                .addRDN(BCStyle.ST, \"Zhejiang\")\n",
      "                // \u5730\u533a\n",
      "                .addRDN(BCStyle.L, \"Hangzhou\")\n",
      "                // \u901a\u7528\u540d\u79f0\n",
      "                .addRDN(BCStyle.CN, \"Test Certificate\")\n",
      "                .build();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u751f\u6210SM2\u5bc6\u94a5\u5bf9\u7684\u8bc1\u4e66\u8bf7\u6c42\uff08pkcs10\u683c\u5f0f\uff09\n",
      "     *\n",
      "     * @param kp      SM2\u5bc6\u94a5\u5bf9\n",
      "     * @param subject \u8bc1\u4e66\u4f7f\u7528\u8005\n",
      "     * @return \u8bc1\u4e66\u8bf7\u6c42\n",
      "     * @throws OperatorCreationException  \u64cd\u4f5c\u5f02\u5e38\n",
      "     */\n",
      "    public static PKCS10CertificationRequest CertRequest(KeyPair kp, X500Name subject) throws OperatorCreationException {\n",
      "        // \u6784\u9020\u8bf7\u6c42\u4fe1\u606f\uff0c\u4e3b\u8981\u662f\u7531\u201c\u5b9e\u4f53\u201d\u7684DN\u548c\u516c\u94a5\u6784\u6210\n",
      "        PKCS10CertificationRequestBuilder requestBuilder =\n",
      "                new JcaPKCS10CertificationRequestBuilder(subject, kp.getPublic());\n",
      "        // \u4f7f\u7528\u201c\u5b9e\u4f53\u201d\u79c1\u94a5\u5bf9\u8bf7\u6c42\u7684\u4fe1\u606f\u8fdb\u884c\u7b7e\u540d,\u7136\u540e\u7ec4\u88c5\u6210ASN.1\u5bf9\u8c61\n",
      "        return requestBuilder.build(\n",
      "                new JcaContentSignerBuilder(\"SM3withSM2\")\n",
      "                        .setProvider(\"BC\")\n",
      "                        .build(kp.getPrivate()));\n",
      "\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u751f\u6210\u6d4b\u8bd5SM2\u5bc6\u94a5\u5bf9\n",
      "     *\n",
      "     * @return \u5bc6\u94a5\u5bf9\n",
      "     * @throws GeneralSecurityException \u5b89\u5168\u64cd\u4f5c\u5f02\u5e38\n",
      "     */\n",
      "    public static KeyPair GenerateKeyPair() throws GeneralSecurityException {\n",
      "        // \u83b7\u53d6SM2\u692d\u5706\u66f2\u7ebf\u7684\u53c2\u6570\n",
      "        final ECGenParameterSpec sm2Spec = new ECGenParameterSpec(\"sm2p256v1\");\n",
      "        // \u83b7\u53d6\u4e00\u4e2a\u692d\u5706\u66f2\u7ebf\u7c7b\u578b\u7684\u5bc6\u94a5\u5bf9\u751f\u6210\u5668\n",
      "        final KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"EC\", new BouncyCastleProvider());\n",
      "        // \u4f7f\u7528SM2\u53c2\u6570\u521d\u59cb\u5316\u751f\u6210\u5668\n",
      "        kpg.initialize(sm2Spec);\n",
      "\n",
      "        // \u4f7f\u7528SM2\u7684\u7b97\u6cd5\u533a\u57df\u521d\u59cb\u5316\u5bc6\u94a5\u751f\u6210\u5668\n",
      "        kpg.initialize(sm2Spec, new SecureRandom());\n",
      "        // \u83b7\u53d6\u5bc6\u94a5\u5bf9\n",
      "        return kpg.generateKeyPair();\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u7b7e\u53d1\u8bc1\u4e66\n",
      "     *\n",
      "     * @param p10Obj     \u8bc1\u4e66\u8bf7\u6c42ASN1\u5bf9\u8c61\n",
      "     * @param root       CA\u6839\u8bc1\u4e66\n",
      "     * @param privateKey CA\u79c1\u94a5\n",
      "     * @return X509\u8bc1\u4e66\u5bf9\u8c61\n",
      "     * @throws GeneralSecurityException \u5b89\u5168\u64cd\u4f5c\u5f02\u5e38\n",
      "     * @throws IOException \u6587\u4ef6\u8bfb\u5199\u5f02\u5e38\n",
      "     * @throws OperatorCreationException \u64cd\u4f5c\u5f02\u5e38\n",
      "     */\n",
      "    public static X509Certificate GenCert(PKCS10CertificationRequest p10Obj,\n",
      "                                          Certificate root,\n",
      "                                          PrivateKey privateKey)\n",
      "            throws GeneralSecurityException,\n",
      "            IOException,\n",
      "            OperatorCreationException {\n",
      "        JcaPKCS10CertificationRequest req = new JcaPKCS10CertificationRequest(p10Obj);\n",
      "        // \u4ece\u8bc1\u4e66\u8bf7\u6c42\u4e2d\u83b7\u53d6\u5230\u4f7f\u7528DN\n",
      "        X500Name subject = req.getSubject();\n",
      "\n",
      "        // \u53d6\u5f97\u6839\u8bc1\u4e66\u7684Subject\uff0c\u7b7e\u53d1\u8bc1\u4e66\u7684\u4f7f\u7528\u8005\u5c31\u662f\u6839\u8bc1\u4e66\u7684\u4f7f\u7528\u8005\n",
      "        X500Name issuer = new X509CertificateHolder(root.getEncoded())\n",
      "                .getSubject();\n",
      "\n",
      "        // \u6839\u636e\u9700\u6c42\u6784\u9020\u5b9e\u4f53\u8bc1\u4e66\n",
      "        X509v3CertificateBuilder certGen = new JcaX509v3CertificateBuilder(\n",
      "                // \u9881\u53d1\u8005\u4fe1\u606f\n",
      "                issuer\n",
      "                // \u8bc1\u4e66\u5e8f\u5217\u53f7\n",
      "                , BigInteger.valueOf(Instant.now().toEpochMilli())\n",
      "                // \u8bc1\u4e66\u751f\u6548\u65e5\u671f\n",
      "                , Date.from(LocalDateTime.now().atZone(ZoneId.systemDefault()).toInstant())\n",
      "                // \u8bc1\u4e66\u5931\u6548\u65e5\u671f\n",
      "                , Date.from(LocalDateTime.now().plusYears(2).atZone(ZoneId.systemDefault()).toInstant())\n",
      "                // \u4f7f\u7528\u8005\u4fe1\u606f\n",
      "                , subject\n",
      "                // \u8bc1\u4e66\u516c\u94a5\n",
      "                , req.getPublicKey())\n",
      "                // \u8bbe\u7f6e\u5bc6\u94a5\u7528\u6cd5\n",
      "                .addExtension(Extension.keyUsage,\n",
      "                        false\n",
      "                        , new X509KeyUsage(X509KeyUsage.digitalSignature\n",
      "                                | X509KeyUsage.nonRepudiation\n",
      "                                | X509KeyUsage.keyCertSign))\n",
      "                // \u8bbe\u7f6e\u6269\u5c55\u5bc6\u94a5\u7528\u6cd5\uff1a\u5ba2\u6237\u7aef\u8eab\u4efd\u8ba4\u8bc1\n",
      "                .addExtension(Extension.extendedKeyUsage,\n",
      "                        false,\n",
      "                        new ExtendedKeyUsage(KeyPurposeId.id_kp_clientAuth))\n",
      "                // \u57fa\u7840\u7ea6\u675f,\u6807\u8bc6\u662f\u5426\u662fCA\u8bc1\u4e66\uff0c\u8fd9\u91ccfalse\u6807\u8bc6\u4e3a\u5b9e\u4f53\u8bc1\u4e66\n",
      "                .addExtension(Extension.basicConstraints,\n",
      "                        false,\n",
      "                        new BasicConstraints(false))\n",
      "                // Netscape Cert Type SSL\u5ba2\u6237\u7aef\u8eab\u4efd\u8ba4\u8bc1\n",
      "                .addExtension(MiscObjectIdentifiers.netscapeCertType,\n",
      "                        false,\n",
      "                        new NetscapeCertType(NetscapeCertType.sslClient));\n",
      "\n",
      "        // 5. \u8bc1\u4e66\u7b7e\u540d\u5b9e\u73b0\u7c7b\n",
      "        ContentSigner sigGen = new JcaContentSignerBuilder(\"SM3withSM2\")\n",
      "                .setProvider(\"BC\")\n",
      "                .build(privateKey);\n",
      "\n",
      "        // 6. \u7b7e\u53d1\u8bc1\u4e66\n",
      "        return new JcaX509CertificateConverter()\n",
      "                .setProvider(\"BC\")\n",
      "                .getCertificate(certGen.build(sigGen));\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u751f\u6210P12\u5b58\u50a8\u6587\u4ef6\n",
      "     * <p>\n",
      "     * \u5b58\u50a8\u516c\u79c1\u94a5\u5bf9\u4ee5\u53ca\u8bc1\u4e66\n",
      "     *\n",
      "     * @param pk    \u5bc6\u94a5\u5bf9\n",
      "     * @param certs \u8bc1\u4e66\u94fe\n",
      "     * @param pwd   P12\u5bc6\u7801\n",
      "     * @param outP  \u4fdd\u5b58\u4f4d\u7f6e\n",
      "     * @throws GeneralSecurityException \u5b89\u5168\u5f02\u5e38\n",
      "     * @throws IOException IO\u5f02\u5e38\n",
      "     */\n",
      "    public static void SaveToPKCS12(KeyPair pk,\n",
      "                                    Certificate[] certs,\n",
      "                                    String pwd,\n",
      "                                    Path outP)\n",
      "            throws GeneralSecurityException, IOException {\n",
      "        // 3. \u4ee5KeyStore\u4fdd\u5b58\n",
      "        KeyStore store = KeyStore.getInstance(\"PKCS12\", \"BC\");\n",
      "        // 3.1 \u521d\u59cb\u5316\n",
      "        store.load(null, null);\n",
      "        char[] pwds = pwd.toCharArray();\n",
      "        // 3.2 \u5199\u5165\u8bc1\u4e66\u4ee5\u53ca\u516c\u94a5\n",
      "        store.setKeyEntry(\"private\", pk.getPrivate(), pwds, certs);\n",
      "        try (OutputStream out = Files.newOutputStream(outP);) {\n",
      "            // 3.3 \u52a0\u5bc6\u5199\u5165\u6587\u4ef6\n",
      "            store.store(out, pwds);\n",
      "        }\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.gm.cert;\n",
      "\n",
      "import org.bouncycastle.asn1.gm.GMObjectIdentifiers;\n",
      "import org.bouncycastle.cert.X509CertificateHolder;\n",
      "import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;\n",
      "import org.bouncycastle.jce.provider.BouncyCastleProvider;\n",
      "import org.bouncycastle.openssl.PEMKeyPair;\n",
      "import org.bouncycastle.openssl.PEMParser;\n",
      "import org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;\n",
      "import org.bouncycastle.openssl.jcajce.JcaPEMWriter;\n",
      "import org.bouncycastle.operator.OperatorCreationException;\n",
      "import org.bouncycastle.pkcs.PKCS10CertificationRequest;\n",
      "import org.junit.jupiter.api.Assertions;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import java.io.*;\n",
      "import java.nio.charset.StandardCharsets;\n",
      "import java.nio.file.Files;\n",
      "import java.nio.file.Path;\n",
      "import java.nio.file.Paths;\n",
      "import java.security.*;\n",
      "import java.security.cert.Certificate;\n",
      "import java.security.cert.CertificateFactory;\n",
      "import java.security.cert.X509Certificate;\n",
      "\n",
      "/**\n",
      " * \u81ea\u7b7e\u540d\u8bc1\u4e66\u751f\u6210\u6d4b\u8bd5\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2020-04-21 09:42:40\n",
      " */\n",
      "class PKCGenerateTest {\n",
      "    /**\n",
      "     * \u6839\u8bc1\u4e66 PKCS12\n",
      "     */\n",
      "    public static final Path RootP12Path = Paths.get(\"src/main/resources\", \"ROOT.p12\");\n",
      "\n",
      "    /**\n",
      "     * \u751f\u6210\u6d4b\u8bd5\u7528\u7684\u7528\u6237\u8bc1\u4e66\n",
      "     */\n",
      "    @Test\n",
      "    void generateUseCert() throws GeneralSecurityException, OperatorCreationException, IOException {\n",
      "        // \u751f\u6210\u5bc6\u94a5\u5bf9\n",
      "        KeyPair keyPair = PKCGenerate.GenerateKeyPair();\n",
      "        // \u4ea7\u751f\u8bc1\u4e66\u8bf7\u6c42\n",
      "        PKCS10CertificationRequest p12Req = PKCGenerate.CertRequest(keyPair, PKCGenerate.TestND());\n",
      "\n",
      "        char[] RootPwd = \"123456\".toCharArray();\n",
      "        // 1. \u8f7d\u5165P12\u5f97\u5230\u8bc1\u4e66\u548c\u79c1\u94a5\n",
      "        KeyStore rootKs = KeyStore.getInstance(\"PKCS12\", \"BC\");\n",
      "        Certificate rootCert;\n",
      "        PrivateKey rootPriKey;\n",
      "        try (InputStream rootKsIn = Files.newInputStream(RootP12Path)) {\n",
      "            rootKs.load(rootKsIn, RootPwd);\n",
      "            // 2. \u53d6\u5f97CA\u6839\u8bc1\u4e66\n",
      "            rootCert = rootKs.getCertificateChain(\"private\")[0];\n",
      "            // 3. \u53d6\u5f97CA\u6839\u8bc1\u4e66\u7684\u79c1\u94a5\n",
      "            rootPriKey = (PrivateKey) rootKs.getKey(\"private\", RootPwd);\n",
      "        }\n",
      "        // \u751f\u6210\u7528\u6237\u8bc1\u4e66\n",
      "        X509Certificate userCert = PKCGenerate.GenCert(p12Req, rootCert, rootPriKey);\n",
      "\n",
      "        Path out = Paths.get(\"target/SealBuilder.p12\");\n",
      "        // \u4fdd\u5b58\u7528\u6237\u516c\u79c1\u94a5\u5bf9\u548c\u8bc1\u4e66\u5230\u6587\u4ef6\n",
      "        PKCGenerate.SaveToPKCS12(keyPair, new Certificate[]{userCert}, \"777777\", out);\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u751f\u6210\u6d4b\u8bd5\u7528\u7684\u7528\u6237\u8bc1\u4e66\n",
      "     */\n",
      "    @Test\n",
      "    void generateUseCertPEM() throws GeneralSecurityException, OperatorCreationException, IOException {\n",
      "        // \u751f\u6210\u5bc6\u94a5\u5bf9\n",
      "        KeyPair keyPair = PKCGenerate.GenerateKeyPair();\n",
      "        // \u4ea7\u751f\u8bc1\u4e66\u8bf7\u6c42\n",
      "        PKCS10CertificationRequest p12Req = PKCGenerate.CertRequest(keyPair, PKCGenerate.TestND());\n",
      "\n",
      "        char[] RootPwd = \"123456\".toCharArray();\n",
      "        // 1. \u8f7d\u5165P12\u5f97\u5230\u8bc1\u4e66\u548c\u79c1\u94a5\n",
      "        KeyStore rootKs = KeyStore.getInstance(\"PKCS12\", \"BC\");\n",
      "        Certificate rootCert;\n",
      "        PrivateKey rootPriKey;\n",
      "        try (InputStream rootKsIn = Files.newInputStream(RootP12Path)) {\n",
      "            rootKs.load(rootKsIn, RootPwd);\n",
      "            // 2. \u53d6\u5f97CA\u6839\u8bc1\u4e66\n",
      "            rootCert = rootKs.getCertificateChain(\"private\")[0];\n",
      "            // 3. \u53d6\u5f97CA\u6839\u8bc1\u4e66\u7684\u79c1\u94a5\n",
      "            rootPriKey = (PrivateKey) rootKs.getKey(\"private\", RootPwd);\n",
      "        }\n",
      "        // \u751f\u6210\u7528\u6237\u8bc1\u4e66\n",
      "        X509Certificate userCert = PKCGenerate.GenCert(p12Req, rootCert, rootPriKey);\n",
      "\n",
      "        Path certPemFile = Paths.get(\"target/sign_cert.pem\");\n",
      "        Path keyPemFile = Paths.get(\"target/sign_key.pem\");\n",
      "        try (final OutputStream certOut = Files.newOutputStream(certPemFile);\n",
      "             final OutputStream keyOut = Files.newOutputStream(keyPemFile);\n",
      "             final JcaPEMWriter certWriter = new JcaPEMWriter(new OutputStreamWriter(certOut));\n",
      "             final JcaPEMWriter keyWriter = new JcaPEMWriter(new OutputStreamWriter(keyOut));) {\n",
      "\n",
      "            certWriter.writeObject(userCert);\n",
      "            keyWriter.writeObject(keyPair.getPrivate());\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u89e3\u6790\u8bc1\u4e66\u548c\u79c1\u94a5\n",
      "     */\n",
      "    @Test\n",
      "    public void testLoadPEM() throws IOException, GeneralSecurityException {\n",
      "        Security.addProvider(new BouncyCastleProvider());\n",
      "        Path certPemFile = Paths.get(\"src/test/resources\", \"sign_cert.pem\");\n",
      "        Path keyPemFile = Paths.get(\"src/test/resources\", \"sign_key.pem\");\n",
      "        try (final InputStream certOut = Files.newInputStream(certPemFile);\n",
      "             final InputStream keyOut = Files.newInputStream(keyPemFile);\n",
      "             final PEMParser certParser = new PEMParser(new InputStreamReader(certOut));\n",
      "             final PEMParser keyParser = new PEMParser(new InputStreamReader(keyOut))) {\n",
      "\n",
      "            // \u89e3\u6790\u8bc1\u4e66\n",
      "            final X509CertificateHolder certificateHolder = (X509CertificateHolder)certParser.readObject();\n",
      "            final X509Certificate certificate = new JcaX509CertificateConverter().setProvider(\"BC\").getCertificate(certificateHolder);\n",
      "            // \u89e3\u6790\u79c1\u94a5\n",
      "            JcaPEMKeyConverter converter = new JcaPEMKeyConverter().setProvider(\"BC\");\n",
      "            final PEMKeyPair pemKeyPair = (PEMKeyPair) keyParser.readObject();\n",
      "            final PrivateKey privateKey = converter.getPrivateKey(pemKeyPair.getPrivateKeyInfo());\n",
      "\n",
      "            // \u901a\u8fc7\u7b7e\u540d\u9a8c\u7b7e\u9a8c\u8bc1\n",
      "            Signature signature = Signature.getInstance(GMObjectIdentifiers.sm2sign_with_sm3.toString(), \"BC\");\n",
      "            signature.initSign(privateKey);\n",
      "            byte[] plainText = \"Hello world\".getBytes(StandardCharsets.UTF_8);\n",
      "            signature.update(plainText);\n",
      "            byte[] signatureValue = signature.sign();\n",
      "\n",
      "            signature.initVerify(certificate);\n",
      "            signature.update(plainText);\n",
      "            final boolean result = signature.verify(signatureValue);\n",
      "            Assertions.assertTrue(result);\n",
      "        }\n",
      "    }\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "PKCGenerate::::TestND()": [
        61,
        74
      ],
      "PKCGenerate::::GenerateKeyPair()": [
        103,
        115
      ],
      "PKCGenerate::::SaveToPKCS12(java.security.KeyPair,java.security.cert.Certificate[],java.lang.String,java.nio.file.Path)": [
        200,
        216
      ]
    },
    "test_method_lines_dic": {
      "PKCGenerateTest::::generateUseCert()": [
        41,
        66
      ],
      "PKCGenerateTest::::generateUseCertPEM()": [
        72,
        104
      ],
      "PKCGenerateTest::::testLoadPEM()": [
        109,
        139
      ]
    },
    "reverse_method_lines_dic": {
      "61": "PKCGenerate::::TestND()",
      "62": "PKCGenerate::::TestND()",
      "63": "PKCGenerate::::TestND()",
      "64": "PKCGenerate::::TestND()",
      "65": "PKCGenerate::::TestND()",
      "66": "PKCGenerate::::TestND()",
      "67": "PKCGenerate::::TestND()",
      "68": "PKCGenerate::::TestND()",
      "69": "PKCGenerate::::TestND()",
      "70": "PKCGenerate::::TestND()",
      "71": "PKCGenerate::::TestND()",
      "72": "PKCGenerate::::TestND()",
      "73": "PKCGenerate::::TestND()",
      "74": "PKCGenerate::::TestND()",
      "103": "PKCGenerate::::GenerateKeyPair()",
      "104": "PKCGenerate::::GenerateKeyPair()",
      "105": "PKCGenerate::::GenerateKeyPair()",
      "106": "PKCGenerate::::GenerateKeyPair()",
      "107": "PKCGenerate::::GenerateKeyPair()",
      "108": "PKCGenerate::::GenerateKeyPair()",
      "109": "PKCGenerate::::GenerateKeyPair()",
      "110": "PKCGenerate::::GenerateKeyPair()",
      "111": "PKCGenerate::::GenerateKeyPair()",
      "112": "PKCGenerate::::GenerateKeyPair()",
      "113": "PKCGenerate::::GenerateKeyPair()",
      "114": "PKCGenerate::::GenerateKeyPair()",
      "115": "PKCGenerate::::GenerateKeyPair()",
      "200": "PKCGenerate::::SaveToPKCS12(java.security.KeyPair,java.security.cert.Certificate[],java.lang.String,java.nio.file.Path)",
      "201": "PKCGenerate::::SaveToPKCS12(java.security.KeyPair,java.security.cert.Certificate[],java.lang.String,java.nio.file.Path)",
      "202": "PKCGenerate::::SaveToPKCS12(java.security.KeyPair,java.security.cert.Certificate[],java.lang.String,java.nio.file.Path)",
      "203": "PKCGenerate::::SaveToPKCS12(java.security.KeyPair,java.security.cert.Certificate[],java.lang.String,java.nio.file.Path)",
      "204": "PKCGenerate::::SaveToPKCS12(java.security.KeyPair,java.security.cert.Certificate[],java.lang.String,java.nio.file.Path)",
      "205": "PKCGenerate::::SaveToPKCS12(java.security.KeyPair,java.security.cert.Certificate[],java.lang.String,java.nio.file.Path)",
      "206": "PKCGenerate::::SaveToPKCS12(java.security.KeyPair,java.security.cert.Certificate[],java.lang.String,java.nio.file.Path)",
      "207": "PKCGenerate::::SaveToPKCS12(java.security.KeyPair,java.security.cert.Certificate[],java.lang.String,java.nio.file.Path)",
      "208": "PKCGenerate::::SaveToPKCS12(java.security.KeyPair,java.security.cert.Certificate[],java.lang.String,java.nio.file.Path)",
      "209": "PKCGenerate::::SaveToPKCS12(java.security.KeyPair,java.security.cert.Certificate[],java.lang.String,java.nio.file.Path)",
      "210": "PKCGenerate::::SaveToPKCS12(java.security.KeyPair,java.security.cert.Certificate[],java.lang.String,java.nio.file.Path)",
      "211": "PKCGenerate::::SaveToPKCS12(java.security.KeyPair,java.security.cert.Certificate[],java.lang.String,java.nio.file.Path)",
      "212": "PKCGenerate::::SaveToPKCS12(java.security.KeyPair,java.security.cert.Certificate[],java.lang.String,java.nio.file.Path)",
      "213": "PKCGenerate::::SaveToPKCS12(java.security.KeyPair,java.security.cert.Certificate[],java.lang.String,java.nio.file.Path)",
      "214": "PKCGenerate::::SaveToPKCS12(java.security.KeyPair,java.security.cert.Certificate[],java.lang.String,java.nio.file.Path)",
      "215": "PKCGenerate::::SaveToPKCS12(java.security.KeyPair,java.security.cert.Certificate[],java.lang.String,java.nio.file.Path)",
      "216": "PKCGenerate::::SaveToPKCS12(java.security.KeyPair,java.security.cert.Certificate[],java.lang.String,java.nio.file.Path)"
    },
    "test_reverse_method_lines_dic": {
      "41": "PKCGenerateTest::::generateUseCert()",
      "42": "PKCGenerateTest::::generateUseCert()",
      "43": "PKCGenerateTest::::generateUseCert()",
      "44": "PKCGenerateTest::::generateUseCert()",
      "45": "PKCGenerateTest::::generateUseCert()",
      "46": "PKCGenerateTest::::generateUseCert()",
      "47": "PKCGenerateTest::::generateUseCert()",
      "48": "PKCGenerateTest::::generateUseCert()",
      "49": "PKCGenerateTest::::generateUseCert()",
      "50": "PKCGenerateTest::::generateUseCert()",
      "51": "PKCGenerateTest::::generateUseCert()",
      "52": "PKCGenerateTest::::generateUseCert()",
      "53": "PKCGenerateTest::::generateUseCert()",
      "54": "PKCGenerateTest::::generateUseCert()",
      "55": "PKCGenerateTest::::generateUseCert()",
      "56": "PKCGenerateTest::::generateUseCert()",
      "57": "PKCGenerateTest::::generateUseCert()",
      "58": "PKCGenerateTest::::generateUseCert()",
      "59": "PKCGenerateTest::::generateUseCert()",
      "60": "PKCGenerateTest::::generateUseCert()",
      "61": "PKCGenerateTest::::generateUseCert()",
      "62": "PKCGenerateTest::::generateUseCert()",
      "63": "PKCGenerateTest::::generateUseCert()",
      "64": "PKCGenerateTest::::generateUseCert()",
      "65": "PKCGenerateTest::::generateUseCert()",
      "66": "PKCGenerateTest::::generateUseCert()",
      "72": "PKCGenerateTest::::generateUseCertPEM()",
      "73": "PKCGenerateTest::::generateUseCertPEM()",
      "74": "PKCGenerateTest::::generateUseCertPEM()",
      "75": "PKCGenerateTest::::generateUseCertPEM()",
      "76": "PKCGenerateTest::::generateUseCertPEM()",
      "77": "PKCGenerateTest::::generateUseCertPEM()",
      "78": "PKCGenerateTest::::generateUseCertPEM()",
      "79": "PKCGenerateTest::::generateUseCertPEM()",
      "80": "PKCGenerateTest::::generateUseCertPEM()",
      "81": "PKCGenerateTest::::generateUseCertPEM()",
      "82": "PKCGenerateTest::::generateUseCertPEM()",
      "83": "PKCGenerateTest::::generateUseCertPEM()",
      "84": "PKCGenerateTest::::generateUseCertPEM()",
      "85": "PKCGenerateTest::::generateUseCertPEM()",
      "86": "PKCGenerateTest::::generateUseCertPEM()",
      "87": "PKCGenerateTest::::generateUseCertPEM()",
      "88": "PKCGenerateTest::::generateUseCertPEM()",
      "89": "PKCGenerateTest::::generateUseCertPEM()",
      "90": "PKCGenerateTest::::generateUseCertPEM()",
      "91": "PKCGenerateTest::::generateUseCertPEM()",
      "92": "PKCGenerateTest::::generateUseCertPEM()",
      "93": "PKCGenerateTest::::generateUseCertPEM()",
      "94": "PKCGenerateTest::::generateUseCertPEM()",
      "95": "PKCGenerateTest::::generateUseCertPEM()",
      "96": "PKCGenerateTest::::generateUseCertPEM()",
      "97": "PKCGenerateTest::::generateUseCertPEM()",
      "98": "PKCGenerateTest::::generateUseCertPEM()",
      "99": "PKCGenerateTest::::generateUseCertPEM()",
      "100": "PKCGenerateTest::::generateUseCertPEM()",
      "101": "PKCGenerateTest::::generateUseCertPEM()",
      "102": "PKCGenerateTest::::generateUseCertPEM()",
      "103": "PKCGenerateTest::::generateUseCertPEM()",
      "104": "PKCGenerateTest::::generateUseCertPEM()",
      "109": "PKCGenerateTest::::testLoadPEM()",
      "110": "PKCGenerateTest::::testLoadPEM()",
      "111": "PKCGenerateTest::::testLoadPEM()",
      "112": "PKCGenerateTest::::testLoadPEM()",
      "113": "PKCGenerateTest::::testLoadPEM()",
      "114": "PKCGenerateTest::::testLoadPEM()",
      "115": "PKCGenerateTest::::testLoadPEM()",
      "116": "PKCGenerateTest::::testLoadPEM()",
      "117": "PKCGenerateTest::::testLoadPEM()",
      "118": "PKCGenerateTest::::testLoadPEM()",
      "119": "PKCGenerateTest::::testLoadPEM()",
      "120": "PKCGenerateTest::::testLoadPEM()",
      "121": "PKCGenerateTest::::testLoadPEM()",
      "122": "PKCGenerateTest::::testLoadPEM()",
      "123": "PKCGenerateTest::::testLoadPEM()",
      "124": "PKCGenerateTest::::testLoadPEM()",
      "125": "PKCGenerateTest::::testLoadPEM()",
      "126": "PKCGenerateTest::::testLoadPEM()",
      "127": "PKCGenerateTest::::testLoadPEM()",
      "128": "PKCGenerateTest::::testLoadPEM()",
      "129": "PKCGenerateTest::::testLoadPEM()",
      "130": "PKCGenerateTest::::testLoadPEM()",
      "131": "PKCGenerateTest::::testLoadPEM()",
      "132": "PKCGenerateTest::::testLoadPEM()",
      "133": "PKCGenerateTest::::testLoadPEM()",
      "134": "PKCGenerateTest::::testLoadPEM()",
      "135": "PKCGenerateTest::::testLoadPEM()",
      "136": "PKCGenerateTest::::testLoadPEM()",
      "137": "PKCGenerateTest::::testLoadPEM()",
      "138": "PKCGenerateTest::::testLoadPEM()",
      "139": "PKCGenerateTest::::testLoadPEM()"
    },
    "tests": [
      {
        "test_lines": [
          41,
          66
        ],
        "covered_lines": [
          55,
          56,
          62,
          64,
          66,
          68,
          70,
          72,
          73,
          86,
          87,
          89,
          91,
          92,
          105,
          107,
          109,
          112,
          114,
          135,
          137,
          140,
          141,
          144,
          148,
          150,
          152,
          156,
          158,
          164,
          168,
          172,
          177,
          178,
          179,
          182,
          183,
          184,
          206,
          208,
          209,
          211,
          212,
          214,
          215,
          216
        ]
      },
      {
        "test_lines": [
          72,
          104
        ],
        "covered_lines": [
          55,
          56,
          62,
          64,
          66,
          68,
          70,
          72,
          73,
          86,
          87,
          89,
          91,
          92,
          105,
          107,
          109,
          112,
          114,
          135,
          137,
          140,
          141,
          144,
          148,
          150,
          152,
          156,
          158,
          164,
          168,
          172,
          177,
          178,
          179,
          182,
          183,
          184
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-gm/src/main/java/org/ofdrw/gm/ses/v1/SESeal.java": {
    "class_content": [
      "package org.ofdrw.gm.ses.v1;\n",
      "\n",
      "import org.bouncycastle.asn1.*;\n",
      "\n",
      "import java.io.IOException;\n",
      "import java.util.Enumeration;\n",
      "\n",
      "/**\n",
      " * \u7535\u5b50\u5370\u7ae0\u6570\u636e\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2020-04-19 15:33:55\n",
      " */\n",
      "public class SESeal extends ASN1Object {\n",
      "    /**\n",
      "     * \u5370\u7ae0\u4fe1\u606f\n",
      "     */\n",
      "    private SES_SealInfo esealInfo;\n",
      "\n",
      "    /**\n",
      "     * \u5236\u7ae0\u4eba\u5bf9\u5370\u7ae0\u7b7e\u540d\u7684\u4fe1\u606f\n",
      "     */\n",
      "    private SES_SignInfo signInfo;\n",
      "\n",
      "    public SESeal() {\n",
      "        super();\n",
      "    }\n",
      "\n",
      "    public SESeal(SES_SealInfo esealInfo, SES_SignInfo signInfo) {\n",
      "        this.esealInfo = esealInfo;\n",
      "        this.signInfo = signInfo;\n",
      "    }\n",
      "\n",
      "    public SESeal(ASN1Sequence seq) {\n",
      "        Enumeration<?> e = seq.getObjects();\n",
      "        esealInfo = SES_SealInfo.getInstance(e.nextElement());\n",
      "        /*\n",
      "         * \u517c\u5bb9\u975e\u6807\u7b7e\u7ae0 \u975e\u6807\u7b7e\u7ae0\u7684\u7b7e\u540d\u4fe1\u606f\u683c\u5f0f\u4e0e\u6807\u51c6\u4e0d\u540c\u65e0\u6cd5\u89e3\u6790\n",
      "         * */\n",
      "        try {\n",
      "            signInfo = SES_SignInfo.getInstance(e.nextElement());\n",
      "        } catch (Exception exception) {\n",
      "\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public static SESeal getInstance(Object o) {\n",
      "        if (o instanceof SESeal) {\n",
      "            return (SESeal) o;\n",
      "        } else if (o instanceof byte[]) {\n",
      "            ASN1InputStream aIn = new ASN1InputStream((byte[]) o);\n",
      "            try {\n",
      "                ASN1Primitive obj = aIn.readObject();\n",
      "                return new SESeal(ASN1Sequence.getInstance(obj));\n",
      "            } catch (IOException e) {\n",
      "                throw new IllegalArgumentException(\"\u7535\u5b50\u5370\u7ae0\u6570\u636e \u65e0\u6cd5\u89e3\u6790\", e);\n",
      "            }\n",
      "        } else if (o instanceof DEROctetString) {\n",
      "            DEROctetString string = (DEROctetString) o;\n",
      "            return new SESeal(ASN1Sequence.getInstance(string.getOctets()));\n",
      "        } else if (o != null) {\n",
      "            return new SESeal(ASN1Sequence.getInstance(o));\n",
      "        }\n",
      "        return null;\n",
      "    }\n",
      "\n",
      "    public SES_SealInfo getEsealInfo() {\n",
      "        return esealInfo;\n",
      "    }\n",
      "\n",
      "    public SESeal setEsealInfo(SES_SealInfo esealInfo) {\n",
      "        this.esealInfo = esealInfo;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public SES_SignInfo getSignInfo() {\n",
      "        return signInfo;\n",
      "    }\n",
      "\n",
      "    public SESeal setSignInfo(SES_SignInfo signInfo) {\n",
      "        this.signInfo = signInfo;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public ASN1Primitive toASN1Primitive() {\n",
      "        ASN1EncodableVector v = new ASN1EncodableVector(3);\n",
      "        v.add(esealInfo);\n",
      "        v.add(signInfo);\n",
      "        return new DERSequence(v);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.gm.ses.v1;\n",
      "\n",
      "import org.bouncycastle.asn1.*;\n",
      "import org.bouncycastle.asn1.gm.GMObjectIdentifiers;\n",
      "import org.bouncycastle.jcajce.provider.asymmetric.x509.CertificateFactory;\n",
      "import org.bouncycastle.jce.provider.BouncyCastleProvider;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.ofdrw.gm.cert.PKCS12Tools;\n",
      "\n",
      "import java.io.IOException;\n",
      "import java.nio.file.Files;\n",
      "import java.nio.file.Path;\n",
      "import java.nio.file.Paths;\n",
      "import java.security.*;\n",
      "import java.security.cert.Certificate;\n",
      "import java.security.cert.CertificateException;\n",
      "import java.security.cert.X509Certificate;\n",
      "import java.util.Calendar;\n",
      "import java.util.Date;\n",
      "import java.util.UUID;\n",
      "\n",
      "/**\n",
      " * V1 \u7248\u672c\u7535\u5b50\u5370\u7ae0\u6784\u9020\n",
      " * <p>\n",
      " * \u6ce8\u610f\uff1a\u8be5\u65b9\u6cd5\u53ea\u7528\u4e8e\u751f\u6210\u6d4b\u8bd5\u6570\u636e\uff0c\u7535\u5b50\u5370\u7ae0\u8bf7\u4f7f\u7528\u7b26\u5408\u56fd\u5bb6\u89c4\u8303\u7684\u7535\u5b50\u5370\u7ae0\u670d\u52a1\u5668\u751f\u6210\u7ba1\u7406\uff01\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2020-04-21 10:16:02\n",
      " */\n",
      "public class SESealTest {\n",
      "\n",
      "    static {\n",
      "        Security.addProvider(new BouncyCastleProvider());\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u6784\u9020\u6d4b\u8bd5\u7528\u7535\u5b50\u5370\u7ae0\n",
      "     * <p>\n",
      "     * \u6ce8\u610f\uff1a\u8be5\u65b9\u6cd5\u53ea\u7528\u4e8e\u751f\u6210\u6d4b\u8bd5\u6570\u636e\uff0c\u7535\u5b50\u5370\u7ae0\u8bf7\u4f7f\u7528\u7b26\u5408\u56fd\u5bb6\u89c4\u8303\u7684\u7535\u5b50\u5370\u7ae0\u670d\u52a1\u5668\u751f\u6210\u7ba1\u7406\uff01\n",
      "     */\n",
      "    @Test\n",
      "    void sealBuild() throws Exception {\n",
      "        Path userP12 = Paths.get(\"src/test/resources\", \"USER.p12\");\n",
      "        Path sealerP12 = Paths.get(\"src/test/resources\", \"SealBuilder.p12\");\n",
      "        Path picturePath = Paths.get(\"src/test/resources\", \"StampImg.png\");\n",
      "        Path out = Paths.get(\"target/UserV1.esl\");\n",
      "\n",
      "\n",
      "        SES_Header header = new SES_Header(new ASN1Integer(1), new DERIA5String(\"OFDR&WTest\"));\n",
      "\n",
      "        /*\n",
      "         * \u5370\u7ae0\u5c5e\u6027\u4fe1\u606f\u6784\u9020\n",
      "         */\n",
      "        // \u83b7\u53d6\u7528\u6237\u8bc1\u4e66\n",
      "        Certificate userCert = PKCS12Tools.ReadUserCert(userP12, \"private\", \"777777\");\n",
      "        ASN1EncodableVector v = new ASN1EncodableVector(1);\n",
      "        v.add(new DEROctetString(userCert.getEncoded()));\n",
      "\n",
      "        Calendar then = Calendar.getInstance();\n",
      "        then.add(Calendar.YEAR, 2);\n",
      "        SES_ESPropertyInfo property = new SES_ESPropertyInfo()\n",
      "                .setType(SES_ESPropertyInfo.OrgType)\n",
      "                .setName(new DERUTF8String(\"OFDRW\u6d4b\u8bd5\u7528\u5370\u7ae0\"))\n",
      "                .setCertList(new DERSequence(v))\n",
      "                .setCreateDate(new ASN1UTCTime(new Date()))\n",
      "                .setValidStart(new ASN1UTCTime(new Date()))\n",
      "                .setValidEnd(new ASN1UTCTime(then.getTime()));\n",
      "\n",
      "        /*\n",
      "         * \u5370\u7ae0\u56fe\u7247\u4fe1\u606f \u6784\u9020\n",
      "         */\n",
      "        SES_ESPictrueInfo picture = new SES_ESPictrueInfo()\n",
      "                .setType(\"PNG\")\n",
      "                .setData(Files.readAllBytes(picturePath))\n",
      "                .setWidth(40)\n",
      "                .setHeight(40);\n",
      "\n",
      "        /*\n",
      "         * \u5370\u7ae0\u4fe1\u606f\u6784\u9020\n",
      "         */\n",
      "        SES_SealInfo sealInfo = new SES_SealInfo()\n",
      "                .setHeader(header)\n",
      "                .setEsID(UUID.randomUUID().toString().replace(\"-\", \"\").toUpperCase())\n",
      "                .setProperty(property)\n",
      "                .setPicture(picture);\n",
      "        /*\n",
      "         * \u7535\u5b50\u7b7e\u7ae0\u6570\u636e\u6784\u9020\n",
      "         */\n",
      "        Certificate sealerCert = PKCS12Tools.ReadUserCert(sealerP12, \"private\", \"777777\");\n",
      "        PrivateKey privateKey = PKCS12Tools.ReadPrvKey(sealerP12, \"private\", \"777777\");\n",
      "        DEROctetString signCert = new DEROctetString(sealerCert.getEncoded());\n",
      "\n",
      "        // \u5370\u7ae0\u4fe1\u606f\u3001\u5236\u7ae0\u4eba\u8bc1\u4e66\u3001\u7b7e\u540d\u7b97\u6cd5\u6807\u8bc6\u7b26\u7ec4\u6210\u7684\u4fe1\u606f\u4f5c\u4e3a\u7b7e\u540d\u539f\u6587\n",
      "        v = new ASN1EncodableVector(3);\n",
      "        v.add(sealInfo);\n",
      "        v.add(signCert);\n",
      "        v.add(GMObjectIdentifiers.sm2sign_with_sm3);\n",
      "\n",
      "        Signature signature = Signature.getInstance(\"SM3withSm2\", \"BC\");\n",
      "        signature.initSign(privateKey);\n",
      "        signature.update(new DERSequence(v).getEncoded(\"DER\"));\n",
      "        byte[] sign = signature.sign();\n",
      "        SES_SignInfo signInfo = new SES_SignInfo()\n",
      "                .setCert(signCert)\n",
      "                .setSignatureAlgorithm(GMObjectIdentifiers.sm2sign_with_sm3)\n",
      "                .setSignData(sign);\n",
      "\n",
      "        SESeal seal = new SESeal(sealInfo, signInfo);\n",
      "\n",
      "        Files.write(out, seal.getEncoded(\"DER\"));\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void verify() throws IOException, NoSuchAlgorithmException, CertificateException, InvalidKeyException, SignatureException {\n",
      "        Path path = Paths.get(\"target\", \"UserV1.esl\");\n",
      "//        Path path = Paths.get(\"target\", \"2_980_1587284330714.es\");\n",
      "\n",
      "        SESeal seal = SESeal.getInstance(Files.readAllBytes(path));\n",
      "        SES_SignInfo signInfo = seal.getSignInfo();\n",
      "\n",
      "        ASN1OctetString cert = signInfo.getCert();\n",
      "        CertificateFactory factory = new CertificateFactory();\n",
      "        X509Certificate certificate = (X509Certificate) factory.engineGenerateCertificate(cert.getOctetStream());\n",
      "\n",
      "        ASN1EncodableVector v = new ASN1EncodableVector(3);\n",
      "        v.add(seal.getEsealInfo());\n",
      "        v.add(cert);\n",
      "        v.add(signInfo.getSignatureAlgorithm());\n",
      "\n",
      "        Signature sg = Signature.getInstance(\"SM3WithSM2\", new BouncyCastleProvider());\n",
      "        sg.initVerify(certificate);\n",
      "        sg.update(new DERSequence(v).getEncoded(\"DER\"));\n",
      "        byte[] sigVal = signInfo.getSignData().getBytes();\n",
      "        System.out.println(sg.verify(sigVal));\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "SESeal::::getInstance(java.lang.Object)": [
        47,
        65
      ],
      "SESeal::::getEsealInfo()": [
        67,
        69
      ],
      "SESeal::::setEsealInfo(org.ofdrw.gm.ses.v1.SES_SealInfo)": [
        71,
        74
      ],
      "SESeal::::getSignInfo()": [
        76,
        78
      ],
      "SESeal::::setSignInfo(org.ofdrw.gm.ses.v1.SES_SignInfo)": [
        80,
        83
      ],
      "SESeal::::toASN1Primitive()": [
        85,
        91
      ]
    },
    "test_method_lines_dic": {
      "SESealTest::::sealBuild()": [
        42,
        112
      ],
      "SESealTest::::verify()": [
        115,
        137
      ]
    },
    "reverse_method_lines_dic": {
      "47": "SESeal::::getInstance(java.lang.Object)",
      "48": "SESeal::::getInstance(java.lang.Object)",
      "49": "SESeal::::getInstance(java.lang.Object)",
      "50": "SESeal::::getInstance(java.lang.Object)",
      "51": "SESeal::::getInstance(java.lang.Object)",
      "52": "SESeal::::getInstance(java.lang.Object)",
      "53": "SESeal::::getInstance(java.lang.Object)",
      "54": "SESeal::::getInstance(java.lang.Object)",
      "55": "SESeal::::getInstance(java.lang.Object)",
      "56": "SESeal::::getInstance(java.lang.Object)",
      "57": "SESeal::::getInstance(java.lang.Object)",
      "58": "SESeal::::getInstance(java.lang.Object)",
      "59": "SESeal::::getInstance(java.lang.Object)",
      "60": "SESeal::::getInstance(java.lang.Object)",
      "61": "SESeal::::getInstance(java.lang.Object)",
      "62": "SESeal::::getInstance(java.lang.Object)",
      "63": "SESeal::::getInstance(java.lang.Object)",
      "64": "SESeal::::getInstance(java.lang.Object)",
      "65": "SESeal::::getInstance(java.lang.Object)",
      "67": "SESeal::::getEsealInfo()",
      "68": "SESeal::::getEsealInfo()",
      "69": "SESeal::::getEsealInfo()",
      "71": "SESeal::::setEsealInfo(org.ofdrw.gm.ses.v1.SES_SealInfo)",
      "72": "SESeal::::setEsealInfo(org.ofdrw.gm.ses.v1.SES_SealInfo)",
      "73": "SESeal::::setEsealInfo(org.ofdrw.gm.ses.v1.SES_SealInfo)",
      "74": "SESeal::::setEsealInfo(org.ofdrw.gm.ses.v1.SES_SealInfo)",
      "76": "SESeal::::getSignInfo()",
      "77": "SESeal::::getSignInfo()",
      "78": "SESeal::::getSignInfo()",
      "80": "SESeal::::setSignInfo(org.ofdrw.gm.ses.v1.SES_SignInfo)",
      "81": "SESeal::::setSignInfo(org.ofdrw.gm.ses.v1.SES_SignInfo)",
      "82": "SESeal::::setSignInfo(org.ofdrw.gm.ses.v1.SES_SignInfo)",
      "83": "SESeal::::setSignInfo(org.ofdrw.gm.ses.v1.SES_SignInfo)",
      "85": "SESeal::::toASN1Primitive()",
      "86": "SESeal::::toASN1Primitive()",
      "87": "SESeal::::toASN1Primitive()",
      "88": "SESeal::::toASN1Primitive()",
      "89": "SESeal::::toASN1Primitive()",
      "90": "SESeal::::toASN1Primitive()",
      "91": "SESeal::::toASN1Primitive()"
    },
    "test_reverse_method_lines_dic": {
      "42": "SESealTest::::sealBuild()",
      "43": "SESealTest::::sealBuild()",
      "44": "SESealTest::::sealBuild()",
      "45": "SESealTest::::sealBuild()",
      "46": "SESealTest::::sealBuild()",
      "47": "SESealTest::::sealBuild()",
      "48": "SESealTest::::sealBuild()",
      "49": "SESealTest::::sealBuild()",
      "50": "SESealTest::::sealBuild()",
      "51": "SESealTest::::sealBuild()",
      "52": "SESealTest::::sealBuild()",
      "53": "SESealTest::::sealBuild()",
      "54": "SESealTest::::sealBuild()",
      "55": "SESealTest::::sealBuild()",
      "56": "SESealTest::::sealBuild()",
      "57": "SESealTest::::sealBuild()",
      "58": "SESealTest::::sealBuild()",
      "59": "SESealTest::::sealBuild()",
      "60": "SESealTest::::sealBuild()",
      "61": "SESealTest::::sealBuild()",
      "62": "SESealTest::::sealBuild()",
      "63": "SESealTest::::sealBuild()",
      "64": "SESealTest::::sealBuild()",
      "65": "SESealTest::::sealBuild()",
      "66": "SESealTest::::sealBuild()",
      "67": "SESealTest::::sealBuild()",
      "68": "SESealTest::::sealBuild()",
      "69": "SESealTest::::sealBuild()",
      "70": "SESealTest::::sealBuild()",
      "71": "SESealTest::::sealBuild()",
      "72": "SESealTest::::sealBuild()",
      "73": "SESealTest::::sealBuild()",
      "74": "SESealTest::::sealBuild()",
      "75": "SESealTest::::sealBuild()",
      "76": "SESealTest::::sealBuild()",
      "77": "SESealTest::::sealBuild()",
      "78": "SESealTest::::sealBuild()",
      "79": "SESealTest::::sealBuild()",
      "80": "SESealTest::::sealBuild()",
      "81": "SESealTest::::sealBuild()",
      "82": "SESealTest::::sealBuild()",
      "83": "SESealTest::::sealBuild()",
      "84": "SESealTest::::sealBuild()",
      "85": "SESealTest::::sealBuild()",
      "86": "SESealTest::::sealBuild()",
      "87": "SESealTest::::sealBuild()",
      "88": "SESealTest::::sealBuild()",
      "89": "SESealTest::::sealBuild()",
      "90": "SESealTest::::sealBuild()",
      "91": "SESealTest::::sealBuild()",
      "92": "SESealTest::::sealBuild()",
      "93": "SESealTest::::sealBuild()",
      "94": "SESealTest::::sealBuild()",
      "95": "SESealTest::::sealBuild()",
      "96": "SESealTest::::sealBuild()",
      "97": "SESealTest::::sealBuild()",
      "98": "SESealTest::::sealBuild()",
      "99": "SESealTest::::sealBuild()",
      "100": "SESealTest::::sealBuild()",
      "101": "SESealTest::::sealBuild()",
      "102": "SESealTest::::sealBuild()",
      "103": "SESealTest::::sealBuild()",
      "104": "SESealTest::::sealBuild()",
      "105": "SESealTest::::sealBuild()",
      "106": "SESealTest::::sealBuild()",
      "107": "SESealTest::::sealBuild()",
      "108": "SESealTest::::sealBuild()",
      "109": "SESealTest::::sealBuild()",
      "110": "SESealTest::::sealBuild()",
      "111": "SESealTest::::sealBuild()",
      "112": "SESealTest::::sealBuild()",
      "115": "SESealTest::::verify()",
      "116": "SESealTest::::verify()",
      "117": "SESealTest::::verify()",
      "118": "SESealTest::::verify()",
      "119": "SESealTest::::verify()",
      "120": "SESealTest::::verify()",
      "121": "SESealTest::::verify()",
      "122": "SESealTest::::verify()",
      "123": "SESealTest::::verify()",
      "124": "SESealTest::::verify()",
      "125": "SESealTest::::verify()",
      "126": "SESealTest::::verify()",
      "127": "SESealTest::::verify()",
      "128": "SESealTest::::verify()",
      "129": "SESealTest::::verify()",
      "130": "SESealTest::::verify()",
      "131": "SESealTest::::verify()",
      "132": "SESealTest::::verify()",
      "133": "SESealTest::::verify()",
      "134": "SESealTest::::verify()",
      "135": "SESealTest::::verify()",
      "136": "SESealTest::::verify()",
      "137": "SESealTest::::verify()"
    },
    "tests": [
      {
        "test_lines": [
          42,
          112
        ],
        "covered_lines": [
          29,
          30,
          31,
          32,
          87,
          88,
          89,
          90
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-gm/src/main/java/org/ofdrw/gm/ses/parse/VersionParser.java": {
    "class_content": [
      "package org.ofdrw.gm.ses.parse;\n",
      "\n",
      "import org.bouncycastle.asn1.ASN1Sequence;\n",
      "\n",
      "/**\n",
      " * \u7248\u672c\u89e3\u6790\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2020-04-20 09:15:52\n",
      " */\n",
      "public class VersionParser {\n",
      "\n",
      "    /**\n",
      "     * \u89e3\u6790\u7535\u5b50\u5370\u7ae0\u7248\u672c\n",
      "     *\n",
      "     * @param o \u5e26\u89e3\u6790\u6570\u636e\uff0c\u53ef\u4ee5\u662f\u5b57\u8282\u4e32\u4e5f\u53ef\u4ee5\u662fASN1\u5bf9\u8c61\n",
      "     * @return \u5e26\u6709\u7248\u672c\u7684ASN1\u5bf9\u8c61\u5e8f\u5217\n",
      "     */\n",
      "    public static SESVersionHolder parseSES_SealVersion(Object o) {\n",
      "        ASN1Sequence seq = ASN1Sequence.getInstance(o);\n",
      "        SESVersion version;\n",
      "        if (seq.size() == 4) {\n",
      "            /*\n",
      "             * GB/T 38540-2020 \u4fe1\u606f\u5b89\u5168\u6280\u672f \u5b89\u5168\u7535\u5b50\u7b7e\u7ae0\u5bc6\u7801\u6280\u672f\u89c4\u8303 \u7535\u5b50\u5370\u7ae0\u6570\u636e\n",
      "             *\n",
      "             * - \u5370\u7ae0\u4fe1\u606f\n",
      "             * - \u5236\u7ae0\u8005\u8bc1\u4e66\n",
      "             * - \u7b7e\u540d\u7b97\u6cd5\u6807\u8bc6\u7b26\n",
      "             * - \u7b7e\u540d\u503c\n",
      "             */\n",
      "            version = SESVersion.v4;\n",
      "        } else if (seq.size() == 2) {\n",
      "            /*\n",
      "             * GM/T 0031-2014 \u5b89\u5168\u7535\u5b50\u7b7e\u7ae0\u5bc6\u7801\u6280\u672f\u89c4\u8303 \u7535\u5b50\u5370\u7ae0\u6570\u636e\n",
      "             *\n",
      "             * - \u5370\u7ae0\u4fe1\u606f\n",
      "             * - \u5236\u7ae0\u4eba\u5bf9\u5370\u7ae0\u7b7e\u540d\u7684\u4fe1\u606f\n",
      "             */\n",
      "            version = SESVersion.v1;\n",
      "        } else {\n",
      "            throw new IllegalArgumentException(\"\u672a\u77e5\u7684\u6570\u636e\u7ed3\u6784\uff0c\u65e0\u6cd5\u5339\u914d\u4efb\u4f55\u5df2\u77e5\u7248\u672c\u7535\u5b50\u5370\u7ae0\u3002\");\n",
      "        }\n",
      "        return new SESVersionHolder(version, seq);\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u89e3\u6790\u7535\u5b50\u7b7e\u7ae0\u6570\u636e\u7248\u672c\n",
      "     *\n",
      "     * @param o \u5e26\u89e3\u6790\u6570\u636e\uff0c\u53ef\u4ee5\u662f\u5b57\u8282\u4e32\u4e5f\u53ef\u4ee5\u662fASN1\u5bf9\u8c61\n",
      "     * @return \u5e26\u6709\u7248\u672c\u7684ASN1\u5bf9\u8c61\u5e8f\u5217\n",
      "     */\n",
      "    public static SESVersionHolder parseSES_SignatureVersion(Object o) {\n",
      "        ASN1Sequence seq = ASN1Sequence.getInstance(o);\n",
      "        SESVersion version;\n",
      "        if (seq.size() >= 4 && seq.size() <= 5) {\n",
      "            /*\n",
      "             * GB/T 38540-2020 \u4fe1\u606f\u5b89\u5168\u6280\u672f \u5b89\u5168\u7535\u5b50\u7b7e\u7ae0\u5bc6\u7801\u6280\u672f\u89c4\u8303\n",
      "             *\n",
      "             * - \u7b7e\u7ae0\u4fe1\u606f\n",
      "             * - \u5236\u7ae0\u8005\u8bc1\u4e66\n",
      "             * - \u7b7e\u540d\u7b97\u6cd5\u6807\u8bc6\u7b26\n",
      "             * - \u7b7e\u540d\u503c\n",
      "             * - [0] \u5bf9\u7b7e\u540d\u503c\u7684\u65f6\u95f4\u6233 \u3010\u53ef\u9009\u3011\n",
      "             */\n",
      "            version = SESVersion.v4;\n",
      "        } else if (seq.size() == 2) {\n",
      "            /*\n",
      "             * GM/T 0031-2014 \u5b89\u5168\u7535\u5b50\u7b7e\u7ae0\u5bc6\u7801\u6280\u672f\u89c4\u8303 \u7535\u5b50\u7b7e\u7ae0\u6570\u636e\n",
      "             *\n",
      "             * - \u5f85\u7535\u5b50\u7b7e\u7ae0\u6570\u636e\n",
      "             * - \u7535\u5b50\u7b7e\u7ae0\u4e2d\u7b7e\u540d\u503c\n",
      "             */\n",
      "            version = SESVersion.v1;\n",
      "        } else {\n",
      "            throw new IllegalArgumentException(\"\u672a\u77e5\u7684\u6570\u636e\u7ed3\u6784\uff0c\u65e0\u6cd5\u5339\u914d\u4efb\u4f55\u5df2\u77e5\u7248\u672c\u7535\u5b50\u7b7e\u7ae0\u6570\u636e\u3002\");\n",
      "        }\n",
      "        return new SESVersionHolder(version, seq);\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.gm.ses.parse;\n",
      "\n",
      "import org.bouncycastle.util.encoders.Base64;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import java.io.IOException;\n",
      "import java.nio.file.Files;\n",
      "import java.nio.file.Path;\n",
      "import java.nio.file.Paths;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.*;\n",
      "\n",
      "/**\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2020-10-12 18:59:50\n",
      " */\n",
      "class VersionParserTest {\n",
      "\n",
      "    @Test\n",
      "    void parseSES_SealVersion() throws IOException {\n",
      "        Path userSealV1Path = Paths.get(\"src/test/resources\", \"UserV1.esl\");\n",
      "        Path userSealV4Path = Paths.get(\"src/test/resources\", \"UserV4.esl\");\n",
      "\n",
      "        SESVersionHolder holder = VersionParser.parseSES_SealVersion(Files.readAllBytes(userSealV1Path));\n",
      "        assertEquals(holder.getVersion(), SESVersion.v1);\n",
      "        assertTrue(holder.SealObject() instanceof org.ofdrw.gm.ses.v1.SESeal);\n",
      "\n",
      "        SESVersionHolder holder1 = VersionParser.parseSES_SealVersion(Files.readAllBytes(userSealV4Path));\n",
      "        assertEquals(holder1.getVersion(), SESVersion.v4);\n",
      "        assertTrue(holder1.SealObject() instanceof org.ofdrw.gm.ses.v4.SESeal);\n",
      "\n",
      "        if (holder1.getVersion() == SESVersion.v4) {\n",
      "            // \u63d0\u4f9b\u4e00\u4e2a\u671f\u5f85\u7684\u7248\u672c\u7c7b\u578b\u8fd4\u8fd8\u503c\n",
      "            org.ofdrw.gm.ses.v4.SESeal seal = holder1.SealObject();\n",
      "            System.out.println(Base64.toBase64String(seal.getCert().getOctets()));\n",
      "        }\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void parseSES_SignatureVersion() throws IOException {\n",
      "        Path sESValueV4 = Paths.get(\"src/test/resources\", \"SignedValueV4.dat\");\n",
      "        SESVersionHolder holder = VersionParser.parseSES_SealVersion(Files.readAllBytes(sESValueV4));\n",
      "        assertEquals(holder.getVersion(), SESVersion.v4);\n",
      "        assertTrue(holder.SESObject() instanceof org.ofdrw.gm.ses.v4.SES_Signature);\n",
      "        if (holder.getVersion() == SESVersion.v4) {\n",
      "            // \u63d0\u4f9b\u4e00\u4e2a\u671f\u5f85\u7684\u7248\u672c\u7c7b\u578b\u8fd4\u8fd8\u503c\n",
      "            org.ofdrw.gm.ses.v4.SES_Signature sesSig = holder.SESObject();\n",
      "            System.out.println(Base64.toBase64String(sesSig.getCert().getOctets()));\n",
      "        }\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "VersionParser::::parseSES_SealVersion(java.lang.Object)": [
        19,
        44
      ],
      "VersionParser::::parseSES_SignatureVersion(java.lang.Object)": [
        53,
        79
      ]
    },
    "test_method_lines_dic": {
      "VersionParserTest::::parseSES_SealVersion()": [
        19,
        37
      ],
      "VersionParserTest::::parseSES_SignatureVersion()": [
        40,
        51
      ]
    },
    "reverse_method_lines_dic": {
      "19": "VersionParser::::parseSES_SealVersion(java.lang.Object)",
      "20": "VersionParser::::parseSES_SealVersion(java.lang.Object)",
      "21": "VersionParser::::parseSES_SealVersion(java.lang.Object)",
      "22": "VersionParser::::parseSES_SealVersion(java.lang.Object)",
      "23": "VersionParser::::parseSES_SealVersion(java.lang.Object)",
      "24": "VersionParser::::parseSES_SealVersion(java.lang.Object)",
      "25": "VersionParser::::parseSES_SealVersion(java.lang.Object)",
      "26": "VersionParser::::parseSES_SealVersion(java.lang.Object)",
      "27": "VersionParser::::parseSES_SealVersion(java.lang.Object)",
      "28": "VersionParser::::parseSES_SealVersion(java.lang.Object)",
      "29": "VersionParser::::parseSES_SealVersion(java.lang.Object)",
      "30": "VersionParser::::parseSES_SealVersion(java.lang.Object)",
      "31": "VersionParser::::parseSES_SealVersion(java.lang.Object)",
      "32": "VersionParser::::parseSES_SealVersion(java.lang.Object)",
      "33": "VersionParser::::parseSES_SealVersion(java.lang.Object)",
      "34": "VersionParser::::parseSES_SealVersion(java.lang.Object)",
      "35": "VersionParser::::parseSES_SealVersion(java.lang.Object)",
      "36": "VersionParser::::parseSES_SealVersion(java.lang.Object)",
      "37": "VersionParser::::parseSES_SealVersion(java.lang.Object)",
      "38": "VersionParser::::parseSES_SealVersion(java.lang.Object)",
      "39": "VersionParser::::parseSES_SealVersion(java.lang.Object)",
      "40": "VersionParser::::parseSES_SealVersion(java.lang.Object)",
      "41": "VersionParser::::parseSES_SealVersion(java.lang.Object)",
      "42": "VersionParser::::parseSES_SealVersion(java.lang.Object)",
      "43": "VersionParser::::parseSES_SealVersion(java.lang.Object)",
      "44": "VersionParser::::parseSES_SealVersion(java.lang.Object)",
      "53": "VersionParser::::parseSES_SignatureVersion(java.lang.Object)",
      "54": "VersionParser::::parseSES_SignatureVersion(java.lang.Object)",
      "55": "VersionParser::::parseSES_SignatureVersion(java.lang.Object)",
      "56": "VersionParser::::parseSES_SignatureVersion(java.lang.Object)",
      "57": "VersionParser::::parseSES_SignatureVersion(java.lang.Object)",
      "58": "VersionParser::::parseSES_SignatureVersion(java.lang.Object)",
      "59": "VersionParser::::parseSES_SignatureVersion(java.lang.Object)",
      "60": "VersionParser::::parseSES_SignatureVersion(java.lang.Object)",
      "61": "VersionParser::::parseSES_SignatureVersion(java.lang.Object)",
      "62": "VersionParser::::parseSES_SignatureVersion(java.lang.Object)",
      "63": "VersionParser::::parseSES_SignatureVersion(java.lang.Object)",
      "64": "VersionParser::::parseSES_SignatureVersion(java.lang.Object)",
      "65": "VersionParser::::parseSES_SignatureVersion(java.lang.Object)",
      "66": "VersionParser::::parseSES_SignatureVersion(java.lang.Object)",
      "67": "VersionParser::::parseSES_SignatureVersion(java.lang.Object)",
      "68": "VersionParser::::parseSES_SignatureVersion(java.lang.Object)",
      "69": "VersionParser::::parseSES_SignatureVersion(java.lang.Object)",
      "70": "VersionParser::::parseSES_SignatureVersion(java.lang.Object)",
      "71": "VersionParser::::parseSES_SignatureVersion(java.lang.Object)",
      "72": "VersionParser::::parseSES_SignatureVersion(java.lang.Object)",
      "73": "VersionParser::::parseSES_SignatureVersion(java.lang.Object)",
      "74": "VersionParser::::parseSES_SignatureVersion(java.lang.Object)",
      "75": "VersionParser::::parseSES_SignatureVersion(java.lang.Object)",
      "76": "VersionParser::::parseSES_SignatureVersion(java.lang.Object)",
      "77": "VersionParser::::parseSES_SignatureVersion(java.lang.Object)",
      "78": "VersionParser::::parseSES_SignatureVersion(java.lang.Object)",
      "79": "VersionParser::::parseSES_SignatureVersion(java.lang.Object)"
    },
    "test_reverse_method_lines_dic": {
      "19": "VersionParserTest::::parseSES_SealVersion()",
      "20": "VersionParserTest::::parseSES_SealVersion()",
      "21": "VersionParserTest::::parseSES_SealVersion()",
      "22": "VersionParserTest::::parseSES_SealVersion()",
      "23": "VersionParserTest::::parseSES_SealVersion()",
      "24": "VersionParserTest::::parseSES_SealVersion()",
      "25": "VersionParserTest::::parseSES_SealVersion()",
      "26": "VersionParserTest::::parseSES_SealVersion()",
      "27": "VersionParserTest::::parseSES_SealVersion()",
      "28": "VersionParserTest::::parseSES_SealVersion()",
      "29": "VersionParserTest::::parseSES_SealVersion()",
      "30": "VersionParserTest::::parseSES_SealVersion()",
      "31": "VersionParserTest::::parseSES_SealVersion()",
      "32": "VersionParserTest::::parseSES_SealVersion()",
      "33": "VersionParserTest::::parseSES_SealVersion()",
      "34": "VersionParserTest::::parseSES_SealVersion()",
      "35": "VersionParserTest::::parseSES_SealVersion()",
      "36": "VersionParserTest::::parseSES_SealVersion()",
      "37": "VersionParserTest::::parseSES_SealVersion()",
      "40": "VersionParserTest::::parseSES_SignatureVersion()",
      "41": "VersionParserTest::::parseSES_SignatureVersion()",
      "42": "VersionParserTest::::parseSES_SignatureVersion()",
      "43": "VersionParserTest::::parseSES_SignatureVersion()",
      "44": "VersionParserTest::::parseSES_SignatureVersion()",
      "45": "VersionParserTest::::parseSES_SignatureVersion()",
      "46": "VersionParserTest::::parseSES_SignatureVersion()",
      "47": "VersionParserTest::::parseSES_SignatureVersion()",
      "48": "VersionParserTest::::parseSES_SignatureVersion()",
      "49": "VersionParserTest::::parseSES_SignatureVersion()",
      "50": "VersionParserTest::::parseSES_SignatureVersion()",
      "51": "VersionParserTest::::parseSES_SignatureVersion()"
    },
    "tests": [
      {
        "test_lines": [
          19,
          37
        ],
        "covered_lines": [
          20,
          22,
          31,
          32,
          39,
          43
        ]
      },
      {
        "test_lines": [
          40,
          51
        ],
        "covered_lines": [
          20,
          22,
          31,
          43
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-gm/src/main/java/org/ofdrw/gm/ses/v4/SES_Signature.java": {
    "class_content": [
      "package org.ofdrw.gm.ses.v4;\n",
      "\n",
      "import org.bouncycastle.asn1.*;\n",
      "\n",
      "import java.io.IOException;\n",
      "import java.security.cert.Certificate;\n",
      "import java.security.cert.CertificateEncodingException;\n",
      "import java.util.Enumeration;\n",
      "\n",
      "/**\n",
      " * \u7535\u5b50\u7b7e\u7ae0\u6570\u636e\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2020-04-19 22:04:04\n",
      " */\n",
      "public class SES_Signature extends ASN1Object {\n",
      "\n",
      "    /**\n",
      "     * \u7b7e\u7ae0\u4fe1\u606f\n",
      "     */\n",
      "    private TBS_Sign toSign;\n",
      "\n",
      "    /**\n",
      "     * \u7b7e\u7ae0\u8005\u8bc1\u4e66\n",
      "     */\n",
      "    private ASN1OctetString cert;\n",
      "\n",
      "    /**\n",
      "     * \u7b7e\u540d\u7b97\u6cd5\u6807\u8bc6\n",
      "     */\n",
      "    private ASN1ObjectIdentifier signatureAlgID;\n",
      "\n",
      "    /**\n",
      "     * \u7b7e\u540d\u503c\n",
      "     */\n",
      "    private ASN1BitString signature;\n",
      "\n",
      "    /**\n",
      "     * \u5bf9\u7b7e\u540d\u503c\u7684\u65f6\u95f4\u6233\u3010\u53ef\u9009\u3011\n",
      "     */\n",
      "    private ASN1BitString timeStamp;\n",
      "\n",
      "    public SES_Signature() {\n",
      "        super();\n",
      "    }\n",
      "\n",
      "    public SES_Signature(TBS_Sign toSign,\n",
      "                         ASN1OctetString cert,\n",
      "                         ASN1ObjectIdentifier signatureAlgID,\n",
      "                         ASN1BitString signature,\n",
      "                         ASN1BitString timeStamp) {\n",
      "        this.toSign = toSign;\n",
      "        this.cert = cert;\n",
      "        this.signatureAlgID = signatureAlgID;\n",
      "        this.signature = signature;\n",
      "        this.timeStamp = timeStamp;\n",
      "    }\n",
      "\n",
      "    public SES_Signature(ASN1Sequence seq) {\n",
      "        Enumeration<?> e = seq.getObjects();\n",
      "        toSign = TBS_Sign.getInstance(e.nextElement());\n",
      "        cert = ASN1OctetString.getInstance(e.nextElement());\n",
      "        signatureAlgID = ASN1ObjectIdentifier.getInstance(e.nextElement());\n",
      "        signature = DERBitString.getInstance(e.nextElement());\n",
      "        if (e.hasMoreElements()) {\n",
      "            Object obj = e.nextElement();\n",
      "            if (obj instanceof ASN1TaggedObject) {\n",
      "                timeStamp = DERBitString.getInstance(((ASN1TaggedObject) obj).getObject());\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public static SES_Signature getInstance(Object o) {\n",
      "        if (o instanceof SES_Signature) {\n",
      "            return (SES_Signature) o;\n",
      "        } else if (o instanceof byte[]) {\n",
      "            ASN1InputStream aIn = new ASN1InputStream((byte[]) o);\n",
      "            try {\n",
      "                ASN1Primitive obj = aIn.readObject();\n",
      "                return new SES_Signature(ASN1Sequence.getInstance(obj));\n",
      "            } catch (IOException e) {\n",
      "                throw new IllegalArgumentException(\"\u7535\u5b50\u7b7e\u7ae0\u6570\u636ev4 \u65e0\u6cd5\u89e3\u6790\",e );\n",
      "            }\n",
      "        } else if (o != null) {\n",
      "            return new SES_Signature(ASN1Sequence.getInstance(o));\n",
      "        }\n",
      "        return null;\n",
      "    }\n",
      "\n",
      "    public TBS_Sign getToSign() {\n",
      "        return toSign;\n",
      "    }\n",
      "\n",
      "    public SES_Signature setToSign(TBS_Sign toSign) {\n",
      "        this.toSign = toSign;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public ASN1OctetString getCert() {\n",
      "        return cert;\n",
      "    }\n",
      "\n",
      "    public SES_Signature setCert(ASN1OctetString cert) {\n",
      "        this.cert = cert;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public SES_Signature setCert(Certificate cert) throws CertificateEncodingException {\n",
      "        this.cert = new DEROctetString(cert.getEncoded());\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public ASN1ObjectIdentifier getSignatureAlgID() {\n",
      "        return signatureAlgID;\n",
      "    }\n",
      "\n",
      "    public SES_Signature setSignatureAlgID(ASN1ObjectIdentifier signatureAlgID) {\n",
      "        this.signatureAlgID = signatureAlgID;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public ASN1BitString getSignature() {\n",
      "        return signature;\n",
      "    }\n",
      "\n",
      "    public SES_Signature setSignature(ASN1BitString signature) {\n",
      "        this.signature = signature;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public SES_Signature setSignature(byte[] signature) {\n",
      "        this.signature = new DERBitString(signature);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public ASN1BitString getTimeStamp() {\n",
      "        return timeStamp;\n",
      "    }\n",
      "\n",
      "    public SES_Signature setTimeStamp(ASN1BitString timeStamp) {\n",
      "        this.timeStamp = timeStamp;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public ASN1Primitive toASN1Primitive() {\n",
      "        ASN1EncodableVector v = new ASN1EncodableVector(5);\n",
      "        v.add(toSign);\n",
      "        v.add(cert);\n",
      "        v.add(signatureAlgID);\n",
      "        v.add(signature);\n",
      "        if (timeStamp != null) {\n",
      "            v.add(new DERTaggedObject(true, 0, timeStamp));\n",
      "        }\n",
      "        return new DERSequence(v);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.gm.ses.v4;\n",
      "\n",
      "import org.bouncycastle.asn1.ASN1BitString;\n",
      "import org.bouncycastle.asn1.ASN1GeneralizedTime;\n",
      "import org.bouncycastle.asn1.ASN1OctetString;\n",
      "import org.bouncycastle.asn1.DERIA5String;\n",
      "import org.bouncycastle.asn1.gm.GMObjectIdentifiers;\n",
      "import org.bouncycastle.jcajce.provider.asymmetric.x509.CertificateFactory;\n",
      "import org.bouncycastle.jcajce.provider.digest.SM3;\n",
      "import org.bouncycastle.jce.provider.BouncyCastleProvider;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.ofdrw.gm.cert.PKCS12Tools;\n",
      "import org.ofdrw.gm.ses.v1.SES_Header;\n",
      "\n",
      "import java.io.IOException;\n",
      "import java.nio.file.Files;\n",
      "import java.nio.file.Path;\n",
      "import java.nio.file.Paths;\n",
      "import java.security.*;\n",
      "import java.security.cert.Certificate;\n",
      "import java.security.cert.CertificateException;\n",
      "import java.security.cert.X509Certificate;\n",
      "import java.util.Arrays;\n",
      "import java.util.Date;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.*;\n",
      "\n",
      "class SES_SignatureTest {\n",
      "\n",
      "    @Test\n",
      "    void build() throws IOException, GeneralSecurityException {\n",
      "        Path userSealPath = Paths.get(\"src/test/resources\", \"UserV4.esl\");\n",
      "        Path userP12 = Paths.get(\"src/test/resources\", \"USER.p12\");\n",
      "\n",
      "\n",
      "        SESeal seal = SESeal.getInstance(Files.readAllBytes(userSealPath));\n",
      "        TBS_Sign toSign = new TBS_Sign()\n",
      "                .setVersion(SES_Header.V4)\n",
      "                .setEseal(seal)\n",
      "                .setTimeInfo(new ASN1GeneralizedTime(new Date()))\n",
      "                .setDataHash(new byte[32])\n",
      "                .setPropertyInfo(\"/Doc_0/Signs/Sign_0/Signature.xml\");\n",
      "\n",
      "        Certificate useCert = PKCS12Tools.ReadUserCert(userP12, \"private\", \"777777\");\n",
      "        PrivateKey prvKey = PKCS12Tools.ReadPrvKey(userP12, \"private\", \"777777\");\n",
      "\n",
      "        Signature sg = Signature.getInstance(\"SM3WithSM2\", new BouncyCastleProvider());\n",
      "        sg.initSign(prvKey);\n",
      "        sg.update(toSign.getEncoded(\"DER\"));\n",
      "        final byte[] sigVal = sg.sign();\n",
      "        SES_Signature signature = new SES_Signature()\n",
      "                .setToSign(toSign)\n",
      "                .setCert(useCert)\n",
      "                .setSignatureAlgID(GMObjectIdentifiers.sm2sign_with_sm3)\n",
      "                .setSignature(sigVal);\n",
      "\n",
      "        Path out = Paths.get(\"target/SignedValueV4.dat\");\n",
      "        Files.write(out, signature.getEncoded(\"DER\"));\n",
      "        System.out.println(\">> V4\u7248\u672c\u7535\u5b50\u7b7e\u7ae0\u5b58\u50a8\u4e8e: \" + out.toAbsolutePath().toAbsolutePath());\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void verify() throws IOException, NoSuchAlgorithmException, CertificateException, InvalidKeyException, SignatureException {\n",
      "\n",
      "        Path path = Paths.get(\"src/test/resources\", \"SignedValue.dat\");\n",
      "        Path srcPath = Paths.get(\"src/test/resources\", \"Signature.xml\");\n",
      "\n",
      "//        Path path = Paths.get(\"target\", \"UserV4.esl\");\n",
      "        SES_Signature sesSignature = SES_Signature.getInstance(Files.readAllBytes(path));\n",
      "\n",
      "        MessageDigest md = new SM3.Digest();\n",
      "        byte[] digest = md.digest(Files.readAllBytes(srcPath));\n",
      "        final ASN1BitString dataHash = sesSignature.getToSign().getDataHash();\n",
      "        System.out.println(Arrays.equals(digest, dataHash.getOctets()));\n",
      "\n",
      "        ASN1OctetString cert = sesSignature.getCert();\n",
      "        CertificateFactory factory = new CertificateFactory();\n",
      "        X509Certificate certificate = (X509Certificate) factory.engineGenerateCertificate(cert.getOctetStream());\n",
      "\n",
      "        TBS_Sign toSign = sesSignature.getToSign();\n",
      "\n",
      "        Signature sg = Signature.getInstance(\n",
      "                sesSignature.getSignatureAlgID().toString()\n",
      "                , new BouncyCastleProvider());\n",
      "        sg.initVerify(certificate);\n",
      "        sg.update(toSign.getEncoded(\"DER\"));\n",
      "        byte[] sigVal = sesSignature.getSignature().getBytes();\n",
      "\n",
      "        System.out.println(sg.verify(sigVal));\n",
      "    }\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "SES_Signature::::getInstance(java.lang.Object)": [
        73,
        88
      ],
      "SES_Signature::::getToSign()": [
        90,
        92
      ],
      "SES_Signature::::setToSign(org.ofdrw.gm.ses.v4.TBS_Sign)": [
        94,
        97
      ],
      "SES_Signature::::getCert()": [
        99,
        101
      ],
      "SES_Signature::::setCert(java.security.cert.Certificate)": [
        108,
        111
      ],
      "SES_Signature::::getSignatureAlgID()": [
        113,
        115
      ],
      "SES_Signature::::getSignature()": [
        122,
        124
      ],
      "SES_Signature::::setSignature(byte[])": [
        131,
        134
      ],
      "SES_Signature::::getTimeStamp()": [
        136,
        138
      ],
      "SES_Signature::::toASN1Primitive()": [
        145,
        156
      ]
    },
    "test_method_lines_dic": {
      "SES_SignatureTest::::build()": [
        30,
        60
      ],
      "SES_SignatureTest::::verify()": [
        63,
        91
      ]
    },
    "reverse_method_lines_dic": {
      "73": "SES_Signature::::getInstance(java.lang.Object)",
      "74": "SES_Signature::::getInstance(java.lang.Object)",
      "75": "SES_Signature::::getInstance(java.lang.Object)",
      "76": "SES_Signature::::getInstance(java.lang.Object)",
      "77": "SES_Signature::::getInstance(java.lang.Object)",
      "78": "SES_Signature::::getInstance(java.lang.Object)",
      "79": "SES_Signature::::getInstance(java.lang.Object)",
      "80": "SES_Signature::::getInstance(java.lang.Object)",
      "81": "SES_Signature::::getInstance(java.lang.Object)",
      "82": "SES_Signature::::getInstance(java.lang.Object)",
      "83": "SES_Signature::::getInstance(java.lang.Object)",
      "84": "SES_Signature::::getInstance(java.lang.Object)",
      "85": "SES_Signature::::getInstance(java.lang.Object)",
      "86": "SES_Signature::::getInstance(java.lang.Object)",
      "87": "SES_Signature::::getInstance(java.lang.Object)",
      "88": "SES_Signature::::getInstance(java.lang.Object)",
      "90": "SES_Signature::::getToSign()",
      "91": "SES_Signature::::getToSign()",
      "92": "SES_Signature::::getToSign()",
      "94": "SES_Signature::::setToSign(org.ofdrw.gm.ses.v4.TBS_Sign)",
      "95": "SES_Signature::::setToSign(org.ofdrw.gm.ses.v4.TBS_Sign)",
      "96": "SES_Signature::::setToSign(org.ofdrw.gm.ses.v4.TBS_Sign)",
      "97": "SES_Signature::::setToSign(org.ofdrw.gm.ses.v4.TBS_Sign)",
      "99": "SES_Signature::::getCert()",
      "100": "SES_Signature::::getCert()",
      "101": "SES_Signature::::getCert()",
      "108": "SES_Signature::::setCert(java.security.cert.Certificate)",
      "109": "SES_Signature::::setCert(java.security.cert.Certificate)",
      "110": "SES_Signature::::setCert(java.security.cert.Certificate)",
      "111": "SES_Signature::::setCert(java.security.cert.Certificate)",
      "113": "SES_Signature::::getSignatureAlgID()",
      "114": "SES_Signature::::getSignatureAlgID()",
      "115": "SES_Signature::::getSignatureAlgID()",
      "122": "SES_Signature::::getSignature()",
      "123": "SES_Signature::::getSignature()",
      "124": "SES_Signature::::getSignature()",
      "131": "SES_Signature::::setSignature(byte[])",
      "132": "SES_Signature::::setSignature(byte[])",
      "133": "SES_Signature::::setSignature(byte[])",
      "134": "SES_Signature::::setSignature(byte[])",
      "136": "SES_Signature::::getTimeStamp()",
      "137": "SES_Signature::::getTimeStamp()",
      "138": "SES_Signature::::getTimeStamp()",
      "145": "SES_Signature::::toASN1Primitive()",
      "146": "SES_Signature::::toASN1Primitive()",
      "147": "SES_Signature::::toASN1Primitive()",
      "148": "SES_Signature::::toASN1Primitive()",
      "149": "SES_Signature::::toASN1Primitive()",
      "150": "SES_Signature::::toASN1Primitive()",
      "151": "SES_Signature::::toASN1Primitive()",
      "152": "SES_Signature::::toASN1Primitive()",
      "153": "SES_Signature::::toASN1Primitive()",
      "154": "SES_Signature::::toASN1Primitive()",
      "155": "SES_Signature::::toASN1Primitive()",
      "156": "SES_Signature::::toASN1Primitive()"
    },
    "test_reverse_method_lines_dic": {
      "30": "SES_SignatureTest::::build()",
      "31": "SES_SignatureTest::::build()",
      "32": "SES_SignatureTest::::build()",
      "33": "SES_SignatureTest::::build()",
      "34": "SES_SignatureTest::::build()",
      "35": "SES_SignatureTest::::build()",
      "36": "SES_SignatureTest::::build()",
      "37": "SES_SignatureTest::::build()",
      "38": "SES_SignatureTest::::build()",
      "39": "SES_SignatureTest::::build()",
      "40": "SES_SignatureTest::::build()",
      "41": "SES_SignatureTest::::build()",
      "42": "SES_SignatureTest::::build()",
      "43": "SES_SignatureTest::::build()",
      "44": "SES_SignatureTest::::build()",
      "45": "SES_SignatureTest::::build()",
      "46": "SES_SignatureTest::::build()",
      "47": "SES_SignatureTest::::build()",
      "48": "SES_SignatureTest::::build()",
      "49": "SES_SignatureTest::::build()",
      "50": "SES_SignatureTest::::build()",
      "51": "SES_SignatureTest::::build()",
      "52": "SES_SignatureTest::::build()",
      "53": "SES_SignatureTest::::build()",
      "54": "SES_SignatureTest::::build()",
      "55": "SES_SignatureTest::::build()",
      "56": "SES_SignatureTest::::build()",
      "57": "SES_SignatureTest::::build()",
      "58": "SES_SignatureTest::::build()",
      "59": "SES_SignatureTest::::build()",
      "60": "SES_SignatureTest::::build()",
      "63": "SES_SignatureTest::::verify()",
      "64": "SES_SignatureTest::::verify()",
      "65": "SES_SignatureTest::::verify()",
      "66": "SES_SignatureTest::::verify()",
      "67": "SES_SignatureTest::::verify()",
      "68": "SES_SignatureTest::::verify()",
      "69": "SES_SignatureTest::::verify()",
      "70": "SES_SignatureTest::::verify()",
      "71": "SES_SignatureTest::::verify()",
      "72": "SES_SignatureTest::::verify()",
      "73": "SES_SignatureTest::::verify()",
      "74": "SES_SignatureTest::::verify()",
      "75": "SES_SignatureTest::::verify()",
      "76": "SES_SignatureTest::::verify()",
      "77": "SES_SignatureTest::::verify()",
      "78": "SES_SignatureTest::::verify()",
      "79": "SES_SignatureTest::::verify()",
      "80": "SES_SignatureTest::::verify()",
      "81": "SES_SignatureTest::::verify()",
      "82": "SES_SignatureTest::::verify()",
      "83": "SES_SignatureTest::::verify()",
      "84": "SES_SignatureTest::::verify()",
      "85": "SES_SignatureTest::::verify()",
      "86": "SES_SignatureTest::::verify()",
      "87": "SES_SignatureTest::::verify()",
      "88": "SES_SignatureTest::::verify()",
      "89": "SES_SignatureTest::::verify()",
      "90": "SES_SignatureTest::::verify()",
      "91": "SES_SignatureTest::::verify()"
    },
    "tests": [
      {
        "test_lines": [
          30,
          60
        ],
        "covered_lines": [
          44,
          45,
          95,
          96,
          109,
          110,
          118,
          119,
          132,
          133,
          147,
          148,
          149,
          150,
          151,
          152,
          155
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-gm/src/main/java/org/ofdrw/gm/ses/v4/TBS_Sign.java": {
    "class_content": [
      "package org.ofdrw.gm.ses.v4;\n",
      "\n",
      "import org.bouncycastle.asn1.*;\n",
      "import org.ofdrw.gm.ses.v1.ExtensionDatas;\n",
      "\n",
      "import java.util.Enumeration;\n",
      "\n",
      "/**\n",
      " * \u7b7e\u7ae0\u4fe1\u606f\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2020-04-19 21:29:45\n",
      " */\n",
      "public class TBS_Sign extends ASN1Object {\n",
      "\n",
      "    /**\n",
      "     * \u7535\u5b50\u5370\u7ae0\u7248\u672c\u53f7\uff0c\u4e0e\u7535\u5b50\u5370\u7ae0\u7248\u672c\u53f7\u4fdd\u6301\u4e00\u81f4\n",
      "     */\n",
      "    private ASN1Integer version;\n",
      "\n",
      "    /**\n",
      "     * \u7535\u5b50\u5370\u7ae0\n",
      "     */\n",
      "    private SESeal eseal;\n",
      "\n",
      "    /**\n",
      "     * \u7b7e\u7ae0\u65f6\u95f4\n",
      "     */\n",
      "    private ASN1GeneralizedTime timeInfo;\n",
      "\n",
      "    /**\n",
      "     * \u539f\u6587\u6742\u51d1\u503c\n",
      "     */\n",
      "    private ASN1BitString dataHash;\n",
      "\n",
      "    /**\n",
      "     * \u539f\u6587\u6570\u636e\u7684\u5c5e\u6027\n",
      "     */\n",
      "    private DERIA5String propertyInfo;\n",
      "\n",
      "    /**\n",
      "     * \u81ea\u5b9a\u4e49\u6570\u636e \u3010\u53ef\u9009\u3011\n",
      "     */\n",
      "    private ExtensionDatas extDatas;\n",
      "\n",
      "    public TBS_Sign() {\n",
      "        super();\n",
      "    }\n",
      "\n",
      "    public TBS_Sign(ASN1Integer version,\n",
      "                    SESeal eseal,\n",
      "                    ASN1GeneralizedTime timeInfo,\n",
      "                    ASN1BitString dataHash,\n",
      "                    DERIA5String propertyInfo,\n",
      "                    ExtensionDatas extDatas) {\n",
      "        this.version = version;\n",
      "        this.eseal = eseal;\n",
      "        this.timeInfo = timeInfo;\n",
      "        this.dataHash = dataHash;\n",
      "        this.propertyInfo = propertyInfo;\n",
      "        this.extDatas = extDatas;\n",
      "    }\n",
      "\n",
      "    public TBS_Sign(ASN1Sequence seq) {\n",
      "        Enumeration<?> e = seq.getObjects();\n",
      "        version = ASN1Integer.getInstance(e.nextElement());\n",
      "        eseal = SESeal.getInstance(e.nextElement());\n",
      "        timeInfo = ASN1GeneralizedTime.getInstance(e.nextElement());\n",
      "        dataHash = DERBitString.getInstance(e.nextElement());\n",
      "        propertyInfo = DERIA5String.getInstance(e.nextElement());\n",
      "        if (e.hasMoreElements()) {\n",
      "            Object obj = e.nextElement();\n",
      "            if (obj instanceof ASN1TaggedObject) {\n",
      "                extDatas = ExtensionDatas.getInstance(((ASN1TaggedObject) obj).getObject());\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public static TBS_Sign getInstance(Object o) {\n",
      "        if (o instanceof TBS_Sign) {\n",
      "            return (TBS_Sign) o;\n",
      "        } else if (o != null) {\n",
      "            return new TBS_Sign(ASN1Sequence.getInstance(o));\n",
      "        }\n",
      "        return null;\n",
      "    }\n",
      "\n",
      "    public ASN1Integer getVersion() {\n",
      "        return version;\n",
      "    }\n",
      "\n",
      "    public TBS_Sign setVersion(ASN1Integer version) {\n",
      "        this.version = version;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public SESeal getEseal() {\n",
      "        return eseal;\n",
      "    }\n",
      "\n",
      "    public TBS_Sign setEseal(SESeal eseal) {\n",
      "        this.eseal = eseal;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public ASN1GeneralizedTime getTimeInfo() {\n",
      "        return timeInfo;\n",
      "    }\n",
      "\n",
      "    public TBS_Sign setTimeInfo(ASN1GeneralizedTime timeInfo) {\n",
      "        this.timeInfo = timeInfo;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public ASN1BitString getDataHash() {\n",
      "        return dataHash;\n",
      "    }\n",
      "\n",
      "    public TBS_Sign setDataHash(ASN1BitString dataHash) {\n",
      "        this.dataHash = dataHash;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public TBS_Sign setDataHash(byte[] dataHash) {\n",
      "        this.dataHash = new DERBitString(dataHash);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public DERIA5String getPropertyInfo() {\n",
      "        return propertyInfo;\n",
      "    }\n",
      "\n",
      "    public TBS_Sign setPropertyInfo(DERIA5String propertyInfo) {\n",
      "        this.propertyInfo = propertyInfo;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public TBS_Sign setPropertyInfo(String propertyInfo) {\n",
      "        this.propertyInfo = new DERIA5String(propertyInfo);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public ExtensionDatas getExtDatas() {\n",
      "        return extDatas;\n",
      "    }\n",
      "\n",
      "    public TBS_Sign setExtDatas(ExtensionDatas extDatas) {\n",
      "        this.extDatas = extDatas;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public ASN1Primitive toASN1Primitive() {\n",
      "        ASN1EncodableVector v = new ASN1EncodableVector(6);\n",
      "        v.add(version);\n",
      "        v.add(eseal);\n",
      "        v.add(timeInfo);\n",
      "        v.add(dataHash);\n",
      "        v.add(propertyInfo);\n",
      "        if (extDatas != null) {\n",
      "            v.add(new DERTaggedObject(true, 0, extDatas));\n",
      "        }\n",
      "        return new DERSequence(v);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.gm.ses.v4;\n",
      "\n",
      "import org.bouncycastle.asn1.ASN1Boolean;\n",
      "import org.bouncycastle.asn1.ASN1GeneralizedTime;\n",
      "import org.bouncycastle.asn1.ASN1ObjectIdentifier;\n",
      "import org.bouncycastle.asn1.DEROctetString;\n",
      "import org.bouncycastle.util.encoders.Base64;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.ofdrw.gm.ses.v1.ExtData;\n",
      "import org.ofdrw.gm.ses.v1.ExtensionDatas;\n",
      "import org.ofdrw.gm.ses.v1.SES_Header;\n",
      "\n",
      "import java.io.IOException;\n",
      "import java.nio.file.Files;\n",
      "import java.nio.file.Path;\n",
      "import java.nio.file.Paths;\n",
      "import java.util.Date;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.*;\n",
      "\n",
      "/**\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2020-10-11 20:31:05\n",
      " */\n",
      "class TBS_SignTest {\n",
      "\n",
      "    @Test\n",
      "    void toASN1Primitive() throws IOException {\n",
      "        Path userSealPath = Paths.get(\"src/test/resources\", \"UserV4.esl\");\n",
      "\n",
      "        SESeal seal = SESeal.getInstance(Files.readAllBytes(userSealPath));\n",
      "        TBS_Sign toSign = new TBS_Sign()\n",
      "                .setVersion(SES_Header.V4)\n",
      "                .setEseal(seal)\n",
      "                .setTimeInfo(new ASN1GeneralizedTime(new Date()))\n",
      "                .setDataHash(new byte[32])\n",
      "                .setPropertyInfo(\"/Doc_0/Signs/Sign_0/Signature.xml\");\n",
      "        ExtensionDatas eds = new ExtensionDatas();\n",
      "        ExtData ed1 = new ExtData(new ASN1ObjectIdentifier(\"1.17.197.777\"), ASN1Boolean.TRUE, new DEROctetString(new byte[]{0x01}));\n",
      "        eds.add(ed1);\n",
      "        toSign.setExtDatas(eds);\n",
      "\n",
      "        byte[] encoded = toSign.toASN1Primitive().getEncoded();\n",
      "        System.out.println(Base64.toBase64String(encoded));\n",
      "\n",
      "        // \u53cd\u5e8f\u5217\u5316\n",
      "        TBS_Sign copy = TBS_Sign.getInstance(encoded);\n",
      "        assertNotNull(copy.getExtDatas());\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "TBS_Sign::::getInstance(java.lang.Object)": [
        79,
        86
      ],
      "TBS_Sign::::getVersion()": [
        88,
        90
      ],
      "TBS_Sign::::getEseal()": [
        97,
        99
      ],
      "TBS_Sign::::setEseal(org.ofdrw.gm.ses.v4.SESeal)": [
        101,
        104
      ],
      "TBS_Sign::::getTimeInfo()": [
        106,
        108
      ],
      "TBS_Sign::::getDataHash()": [
        115,
        117
      ],
      "TBS_Sign::::setDataHash(byte[])": [
        124,
        127
      ],
      "TBS_Sign::::getPropertyInfo()": [
        129,
        131
      ],
      "TBS_Sign::::setPropertyInfo(java.lang.String)": [
        138,
        141
      ],
      "TBS_Sign::::getExtDatas()": [
        143,
        145
      ],
      "TBS_Sign::::setExtDatas(org.ofdrw.gm.ses.v1.ExtensionDatas)": [
        147,
        150
      ],
      "TBS_Sign::::toASN1Primitive()": [
        152,
        164
      ]
    },
    "test_method_lines_dic": {
      "TBS_SignTest::::toASN1Primitive()": [
        27,
        49
      ]
    },
    "reverse_method_lines_dic": {
      "79": "TBS_Sign::::getInstance(java.lang.Object)",
      "80": "TBS_Sign::::getInstance(java.lang.Object)",
      "81": "TBS_Sign::::getInstance(java.lang.Object)",
      "82": "TBS_Sign::::getInstance(java.lang.Object)",
      "83": "TBS_Sign::::getInstance(java.lang.Object)",
      "84": "TBS_Sign::::getInstance(java.lang.Object)",
      "85": "TBS_Sign::::getInstance(java.lang.Object)",
      "86": "TBS_Sign::::getInstance(java.lang.Object)",
      "88": "TBS_Sign::::getVersion()",
      "89": "TBS_Sign::::getVersion()",
      "90": "TBS_Sign::::getVersion()",
      "97": "TBS_Sign::::getEseal()",
      "98": "TBS_Sign::::getEseal()",
      "99": "TBS_Sign::::getEseal()",
      "101": "TBS_Sign::::setEseal(org.ofdrw.gm.ses.v4.SESeal)",
      "102": "TBS_Sign::::setEseal(org.ofdrw.gm.ses.v4.SESeal)",
      "103": "TBS_Sign::::setEseal(org.ofdrw.gm.ses.v4.SESeal)",
      "104": "TBS_Sign::::setEseal(org.ofdrw.gm.ses.v4.SESeal)",
      "106": "TBS_Sign::::getTimeInfo()",
      "107": "TBS_Sign::::getTimeInfo()",
      "108": "TBS_Sign::::getTimeInfo()",
      "115": "TBS_Sign::::getDataHash()",
      "116": "TBS_Sign::::getDataHash()",
      "117": "TBS_Sign::::getDataHash()",
      "124": "TBS_Sign::::setDataHash(byte[])",
      "125": "TBS_Sign::::setDataHash(byte[])",
      "126": "TBS_Sign::::setDataHash(byte[])",
      "127": "TBS_Sign::::setDataHash(byte[])",
      "129": "TBS_Sign::::getPropertyInfo()",
      "130": "TBS_Sign::::getPropertyInfo()",
      "131": "TBS_Sign::::getPropertyInfo()",
      "138": "TBS_Sign::::setPropertyInfo(java.lang.String)",
      "139": "TBS_Sign::::setPropertyInfo(java.lang.String)",
      "140": "TBS_Sign::::setPropertyInfo(java.lang.String)",
      "141": "TBS_Sign::::setPropertyInfo(java.lang.String)",
      "143": "TBS_Sign::::getExtDatas()",
      "144": "TBS_Sign::::getExtDatas()",
      "145": "TBS_Sign::::getExtDatas()",
      "147": "TBS_Sign::::setExtDatas(org.ofdrw.gm.ses.v1.ExtensionDatas)",
      "148": "TBS_Sign::::setExtDatas(org.ofdrw.gm.ses.v1.ExtensionDatas)",
      "149": "TBS_Sign::::setExtDatas(org.ofdrw.gm.ses.v1.ExtensionDatas)",
      "150": "TBS_Sign::::setExtDatas(org.ofdrw.gm.ses.v1.ExtensionDatas)",
      "152": "TBS_Sign::::toASN1Primitive()",
      "153": "TBS_Sign::::toASN1Primitive()",
      "154": "TBS_Sign::::toASN1Primitive()",
      "155": "TBS_Sign::::toASN1Primitive()",
      "156": "TBS_Sign::::toASN1Primitive()",
      "157": "TBS_Sign::::toASN1Primitive()",
      "158": "TBS_Sign::::toASN1Primitive()",
      "159": "TBS_Sign::::toASN1Primitive()",
      "160": "TBS_Sign::::toASN1Primitive()",
      "161": "TBS_Sign::::toASN1Primitive()",
      "162": "TBS_Sign::::toASN1Primitive()",
      "163": "TBS_Sign::::toASN1Primitive()",
      "164": "TBS_Sign::::toASN1Primitive()"
    },
    "test_reverse_method_lines_dic": {
      "27": "TBS_SignTest::::toASN1Primitive()",
      "28": "TBS_SignTest::::toASN1Primitive()",
      "29": "TBS_SignTest::::toASN1Primitive()",
      "30": "TBS_SignTest::::toASN1Primitive()",
      "31": "TBS_SignTest::::toASN1Primitive()",
      "32": "TBS_SignTest::::toASN1Primitive()",
      "33": "TBS_SignTest::::toASN1Primitive()",
      "34": "TBS_SignTest::::toASN1Primitive()",
      "35": "TBS_SignTest::::toASN1Primitive()",
      "36": "TBS_SignTest::::toASN1Primitive()",
      "37": "TBS_SignTest::::toASN1Primitive()",
      "38": "TBS_SignTest::::toASN1Primitive()",
      "39": "TBS_SignTest::::toASN1Primitive()",
      "40": "TBS_SignTest::::toASN1Primitive()",
      "41": "TBS_SignTest::::toASN1Primitive()",
      "42": "TBS_SignTest::::toASN1Primitive()",
      "43": "TBS_SignTest::::toASN1Primitive()",
      "44": "TBS_SignTest::::toASN1Primitive()",
      "45": "TBS_SignTest::::toASN1Primitive()",
      "46": "TBS_SignTest::::toASN1Primitive()",
      "47": "TBS_SignTest::::toASN1Primitive()",
      "48": "TBS_SignTest::::toASN1Primitive()",
      "49": "TBS_SignTest::::toASN1Primitive()"
    },
    "tests": [
      {
        "test_lines": [
          27,
          49
        ],
        "covered_lines": [
          47,
          48,
          64,
          65,
          66,
          67,
          68,
          69,
          70,
          71,
          72,
          73,
          74,
          77,
          80,
          82,
          83,
          93,
          94,
          102,
          103,
          111,
          112,
          125,
          126,
          139,
          140,
          144,
          148,
          149,
          154,
          155,
          156,
          157,
          158,
          159,
          160,
          161,
          163
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-gm/src/main/java/org/ofdrw/gm/ses/v4/SESeal.java": {
    "class_content": [
      "package org.ofdrw.gm.ses.v4;\n",
      "\n",
      "import org.bouncycastle.asn1.*;\n",
      "\n",
      "import java.io.IOException;\n",
      "import java.security.cert.Certificate;\n",
      "import java.security.cert.CertificateEncodingException;\n",
      "import java.util.Enumeration;\n",
      "\n",
      "/**\n",
      " * \u7535\u5b50\u5370\u7ae0\u6570\u636e\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2020-04-19 17:47:55\n",
      " */\n",
      "public class SESeal extends ASN1Object {\n",
      "\n",
      "    /**\n",
      "     * \u5370\u7ae0\u4fe1\u606f\n",
      "     */\n",
      "    private SES_SealInfo eSealInfo;\n",
      "\n",
      "    /**\n",
      "     * \u5236\u7ae0\u4eba\u8bc1\u4e66\n",
      "     */\n",
      "    private ASN1OctetString cert;\n",
      "\n",
      "    /**\n",
      "     * \u7b7e\u540d\u7b97\u6cd5\u6807\u8bc6\u7b26\n",
      "     */\n",
      "    private ASN1ObjectIdentifier signAlgID;\n",
      "\n",
      "    /**\n",
      "     * \u7b7e\u540d\u503c\n",
      "     */\n",
      "    private ASN1BitString signedValue;\n",
      "\n",
      "    public SESeal() {\n",
      "        super();\n",
      "    }\n",
      "\n",
      "    public SESeal(SES_SealInfo eSealInfo,\n",
      "                  ASN1OctetString cert,\n",
      "                  ASN1ObjectIdentifier signAlgID,\n",
      "                  ASN1BitString signedValue) {\n",
      "        this.eSealInfo = eSealInfo;\n",
      "        this.cert = cert;\n",
      "        this.signAlgID = signAlgID;\n",
      "        this.signedValue = signedValue;\n",
      "    }\n",
      "\n",
      "    public SESeal(ASN1Sequence seq) {\n",
      "        Enumeration<?> e = seq.getObjects();\n",
      "        eSealInfo = SES_SealInfo.getInstance(e.nextElement());\n",
      "        cert = ASN1OctetString.getInstance(e.nextElement());\n",
      "        signAlgID = ASN1ObjectIdentifier.getInstance(e.nextElement());\n",
      "        signedValue = DERBitString.getInstance(e.nextElement());\n",
      "    }\n",
      "\n",
      "\n",
      "    public static SESeal getInstance(Object o) {\n",
      "        if (o instanceof SESeal) {\n",
      "            return (SESeal) o;\n",
      "        } else if (o instanceof byte[]) {\n",
      "            ASN1InputStream aIn = new ASN1InputStream((byte[]) o);\n",
      "            try {\n",
      "                final ASN1Primitive obj = aIn.readObject();\n",
      "                return new SESeal(ASN1Sequence.getInstance(obj));\n",
      "            } catch (IOException e) {\n",
      "                throw new IllegalArgumentException(\"\u7535\u5b50\u5370\u7ae0\u6570\u636ev4 \u65e0\u6cd5\u89e3\u6790\", e);\n",
      "            }\n",
      "        } else if (o != null) {\n",
      "            return new SESeal(ASN1Sequence.getInstance(o));\n",
      "        }\n",
      "        return null;\n",
      "    }\n",
      "\n",
      "    public SES_SealInfo geteSealInfo() {\n",
      "        return eSealInfo;\n",
      "    }\n",
      "\n",
      "    public SESeal seteSealInfo(SES_SealInfo eSealInfo) {\n",
      "        this.eSealInfo = eSealInfo;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public ASN1OctetString getCert() {\n",
      "        return cert;\n",
      "    }\n",
      "\n",
      "    public SESeal setCert(ASN1OctetString cert) {\n",
      "        this.cert = cert;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public SESeal setCert(Certificate cert) throws CertificateEncodingException {\n",
      "        this.cert = new DEROctetString(cert.getEncoded());\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public ASN1ObjectIdentifier getSignAlgID() {\n",
      "        return signAlgID;\n",
      "    }\n",
      "\n",
      "    public SESeal setSignAlgID(ASN1ObjectIdentifier signAlgID) {\n",
      "        this.signAlgID = signAlgID;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public ASN1BitString getSignedValue() {\n",
      "        return signedValue;\n",
      "    }\n",
      "\n",
      "    public SESeal setSignedValue(ASN1BitString signedValue) {\n",
      "        this.signedValue = signedValue;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public SESeal setSignedValue(byte[] signedValue) {\n",
      "        this.signedValue = new DERBitString(signedValue);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public ASN1Primitive toASN1Primitive() {\n",
      "        ASN1EncodableVector v = new ASN1EncodableVector(4);\n",
      "        v.add(eSealInfo);\n",
      "        v.add(cert);\n",
      "        v.add(signAlgID);\n",
      "        v.add(signedValue);\n",
      "        return new DERSequence(v);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.gm.ses.v4;\n",
      "\n",
      "import org.bouncycastle.asn1.*;\n",
      "import org.bouncycastle.asn1.gm.GMObjectIdentifiers;\n",
      "import org.bouncycastle.jcajce.provider.asymmetric.x509.CertificateFactory;\n",
      "import org.bouncycastle.jce.provider.BouncyCastleProvider;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.ofdrw.gm.cert.PKCS12Tools;\n",
      "import org.ofdrw.gm.ses.v1.SES_ESPictrueInfo;\n",
      "import org.ofdrw.gm.ses.v1.SES_Header;\n",
      "\n",
      "import java.io.IOException;\n",
      "import java.nio.file.Files;\n",
      "import java.nio.file.Path;\n",
      "import java.nio.file.Paths;\n",
      "import java.security.*;\n",
      "import java.security.cert.Certificate;\n",
      "import java.security.cert.CertificateException;\n",
      "import java.security.cert.X509Certificate;\n",
      "import java.util.Calendar;\n",
      "import java.util.Date;\n",
      "import java.util.UUID;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.*;\n",
      "\n",
      "class SESealTest {\n",
      "\n",
      "    @Test\n",
      "    void signVerify() throws GeneralSecurityException, IOException {\n",
      "        Path sealerPath = Paths.get(\"src/test/resources\", \"SealBuilder.p12\");\n",
      "\n",
      "        PrivateKey sealerPrvKey = PKCS12Tools.ReadPrvKey(sealerPath, \"private\", \"777777\");\n",
      "        Signature sg = Signature.getInstance(\"SM3WithSM2\", new BouncyCastleProvider());\n",
      "        sg.initSign(sealerPrvKey);\n",
      "        sg.update(new byte[32]);\n",
      "        byte[] sigVal = sg.sign();\n",
      "        System.out.println(sigVal.length);\n",
      "\n",
      "        Certificate certificate = PKCS12Tools.ReadUserCert(sealerPath, \"private\", \"777777\");\n",
      "\n",
      "        sg = Signature.getInstance(\"SM3WithSM2\", new BouncyCastleProvider());\n",
      "        sg.initVerify(certificate);\n",
      "        sg.update(new byte[32]);\n",
      "        System.out.println(sg.verify(sigVal));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void build() throws GeneralSecurityException, IOException {\n",
      "        Path sealerPath = Paths.get(\"src/test/resources\", \"SealBuilder.p12\");\n",
      "        Path userPath = Paths.get(\"src/test/resources\", \"USER.p12\");\n",
      "        Path picturePath = Paths.get(\"src/test/resources\", \"StampImg.png\");\n",
      "\n",
      "        Certificate sealerCert = PKCS12Tools.ReadUserCert(sealerPath, \"private\", \"777777\");\n",
      "        Certificate userCert = PKCS12Tools.ReadUserCert(userPath, \"private\", \"777777\");\n",
      "\n",
      "        ASN1EncodableVector v = new ASN1EncodableVector(1);\n",
      "        v.add(new DEROctetString(userCert.getEncoded()));\n",
      "\n",
      "        SES_Header header = new SES_Header(SES_Header.V4, new DERIA5String(\"OFDR&WTest\"));\n",
      "        Calendar now = Calendar.getInstance();\n",
      "        now.add(Calendar.YEAR, 2);\n",
      "        Date then = now.getTime();\n",
      "        SES_ESPropertyInfo propertyInfo = new SES_ESPropertyInfo()\n",
      "                .setType(new ASN1Integer(3))\n",
      "                .setName(new DERUTF8String(\"OFD R&W \u6d4b\u8bd5\u7528\u5370\u7ae0\"))\n",
      "                .setCertListType(SES_ESPropertyInfo.CertListType)\n",
      "                .setCertList(SES_CertList.getInstance(SES_ESPropertyInfo.CertListType, new DERSequence(v)))\n",
      "                .setCreateDate(new ASN1GeneralizedTime(new Date()))\n",
      "                .setValidStart(new ASN1GeneralizedTime(new Date()))\n",
      "                .setValidEnd(new ASN1GeneralizedTime(then));\n",
      "\n",
      "        SES_ESPictrueInfo pictrueInfo = new SES_ESPictrueInfo()\n",
      "                .setType(\"PNG\")\n",
      "                .setData(Files.readAllBytes(picturePath))\n",
      "                .setWidth(40)\n",
      "                .setHeight(40);\n",
      "\n",
      "        SES_SealInfo sesSealInfo = new SES_SealInfo()\n",
      "                .setHeader(header)\n",
      "                .setEsID(new DERIA5String(UUID.randomUUID().toString().replace(\"-\", \"\")))\n",
      "                .setProperty(propertyInfo)\n",
      "                .setPicture(pictrueInfo);\n",
      "\n",
      "        PrivateKey sealerPrvKey = PKCS12Tools.ReadPrvKey(sealerPath, \"private\", \"777777\");\n",
      "        Signature sg = Signature.getInstance(\"SM3WithSM2\", new BouncyCastleProvider());\n",
      "        sg.initSign(sealerPrvKey);\n",
      "        sg.update(sesSealInfo.getEncoded(\"DER\"));\n",
      "        byte[] sigVal = sg.sign();\n",
      "\n",
      "        SESeal seal = new SESeal()\n",
      "                .seteSealInfo(sesSealInfo)\n",
      "                .setCert(sealerCert)\n",
      "                .setSignAlgID(GMObjectIdentifiers.sm2sign_with_sm3)\n",
      "                .setSignedValue(sigVal);\n",
      "\n",
      "        Path out = Paths.get(\"target/UserV4.esl\");\n",
      "        Files.write(out, seal.getEncoded(\"DER\"));\n",
      "        System.out.println(\">> V4\u7248\u672c\u5370\u7ae0\u5b58\u50a8\u4e8e: \" + out.toAbsolutePath().toAbsolutePath());\n",
      "\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void verify() throws IOException, NoSuchAlgorithmException, CertificateException, InvalidKeyException, SignatureException {\n",
      "//        Path path = Paths.get(\"src/test/resources\", \"UserV4.esl\");\n",
      "//        Path path = Paths.get(\"target\", \"UserV4.esl\");\n",
      "        Path path = Paths.get(\"target\", \"Seal.esl\");\n",
      "        SESeal seal = SESeal.getInstance(Files.readAllBytes(path));\n",
      "\n",
      "        ASN1OctetString cert = seal.getCert();\n",
      "        CertificateFactory factory = new CertificateFactory();\n",
      "        X509Certificate certificate = (X509Certificate) factory.engineGenerateCertificate(cert.getOctetStream());\n",
      "\n",
      "        SES_SealInfo ses_sealInfo = seal.geteSealInfo();\n",
      "\n",
      "        Signature sg = Signature.getInstance(seal.getSignAlgID().toString()\n",
      "                , new BouncyCastleProvider());\n",
      "        sg.initVerify(certificate);\n",
      "        sg.update(ses_sealInfo.getEncoded());\n",
      "        byte[] sigVal = seal.getSignedValue().getBytes();\n",
      "\n",
      "        System.out.println(sg.verify(sigVal));\n",
      "    }\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "SESeal::::getInstance(java.lang.Object)": [
        61,
        76
      ],
      "SESeal::::geteSealInfo()": [
        78,
        80
      ],
      "SESeal::::seteSealInfo(org.ofdrw.gm.ses.v4.SES_SealInfo)": [
        82,
        85
      ],
      "SESeal::::getCert()": [
        87,
        89
      ],
      "SESeal::::setCert(java.security.cert.Certificate)": [
        96,
        99
      ],
      "SESeal::::getSignAlgID()": [
        101,
        103
      ],
      "SESeal::::getSignedValue()": [
        110,
        112
      ],
      "SESeal::::setSignedValue(byte[])": [
        119,
        122
      ],
      "SESeal::::toASN1Primitive()": [
        124,
        132
      ]
    },
    "test_method_lines_dic": {
      "SESealTest::::signVerify()": [
        28,
        45
      ],
      "SESealTest::::build()": [
        47,
        100
      ],
      "SESealTest::::verify()": [
        103,
        123
      ]
    },
    "reverse_method_lines_dic": {
      "61": "SESeal::::getInstance(java.lang.Object)",
      "62": "SESeal::::getInstance(java.lang.Object)",
      "63": "SESeal::::getInstance(java.lang.Object)",
      "64": "SESeal::::getInstance(java.lang.Object)",
      "65": "SESeal::::getInstance(java.lang.Object)",
      "66": "SESeal::::getInstance(java.lang.Object)",
      "67": "SESeal::::getInstance(java.lang.Object)",
      "68": "SESeal::::getInstance(java.lang.Object)",
      "69": "SESeal::::getInstance(java.lang.Object)",
      "70": "SESeal::::getInstance(java.lang.Object)",
      "71": "SESeal::::getInstance(java.lang.Object)",
      "72": "SESeal::::getInstance(java.lang.Object)",
      "73": "SESeal::::getInstance(java.lang.Object)",
      "74": "SESeal::::getInstance(java.lang.Object)",
      "75": "SESeal::::getInstance(java.lang.Object)",
      "76": "SESeal::::getInstance(java.lang.Object)",
      "78": "SESeal::::geteSealInfo()",
      "79": "SESeal::::geteSealInfo()",
      "80": "SESeal::::geteSealInfo()",
      "82": "SESeal::::seteSealInfo(org.ofdrw.gm.ses.v4.SES_SealInfo)",
      "83": "SESeal::::seteSealInfo(org.ofdrw.gm.ses.v4.SES_SealInfo)",
      "84": "SESeal::::seteSealInfo(org.ofdrw.gm.ses.v4.SES_SealInfo)",
      "85": "SESeal::::seteSealInfo(org.ofdrw.gm.ses.v4.SES_SealInfo)",
      "87": "SESeal::::getCert()",
      "88": "SESeal::::getCert()",
      "89": "SESeal::::getCert()",
      "96": "SESeal::::setCert(java.security.cert.Certificate)",
      "97": "SESeal::::setCert(java.security.cert.Certificate)",
      "98": "SESeal::::setCert(java.security.cert.Certificate)",
      "99": "SESeal::::setCert(java.security.cert.Certificate)",
      "101": "SESeal::::getSignAlgID()",
      "102": "SESeal::::getSignAlgID()",
      "103": "SESeal::::getSignAlgID()",
      "110": "SESeal::::getSignedValue()",
      "111": "SESeal::::getSignedValue()",
      "112": "SESeal::::getSignedValue()",
      "119": "SESeal::::setSignedValue(byte[])",
      "120": "SESeal::::setSignedValue(byte[])",
      "121": "SESeal::::setSignedValue(byte[])",
      "122": "SESeal::::setSignedValue(byte[])",
      "124": "SESeal::::toASN1Primitive()",
      "125": "SESeal::::toASN1Primitive()",
      "126": "SESeal::::toASN1Primitive()",
      "127": "SESeal::::toASN1Primitive()",
      "128": "SESeal::::toASN1Primitive()",
      "129": "SESeal::::toASN1Primitive()",
      "130": "SESeal::::toASN1Primitive()",
      "131": "SESeal::::toASN1Primitive()",
      "132": "SESeal::::toASN1Primitive()"
    },
    "test_reverse_method_lines_dic": {
      "28": "SESealTest::::signVerify()",
      "29": "SESealTest::::signVerify()",
      "30": "SESealTest::::signVerify()",
      "31": "SESealTest::::signVerify()",
      "32": "SESealTest::::signVerify()",
      "33": "SESealTest::::signVerify()",
      "34": "SESealTest::::signVerify()",
      "35": "SESealTest::::signVerify()",
      "36": "SESealTest::::signVerify()",
      "37": "SESealTest::::signVerify()",
      "38": "SESealTest::::signVerify()",
      "39": "SESealTest::::signVerify()",
      "40": "SESealTest::::signVerify()",
      "41": "SESealTest::::signVerify()",
      "42": "SESealTest::::signVerify()",
      "43": "SESealTest::::signVerify()",
      "44": "SESealTest::::signVerify()",
      "45": "SESealTest::::signVerify()",
      "47": "SESealTest::::build()",
      "48": "SESealTest::::build()",
      "49": "SESealTest::::build()",
      "50": "SESealTest::::build()",
      "51": "SESealTest::::build()",
      "52": "SESealTest::::build()",
      "53": "SESealTest::::build()",
      "54": "SESealTest::::build()",
      "55": "SESealTest::::build()",
      "56": "SESealTest::::build()",
      "57": "SESealTest::::build()",
      "58": "SESealTest::::build()",
      "59": "SESealTest::::build()",
      "60": "SESealTest::::build()",
      "61": "SESealTest::::build()",
      "62": "SESealTest::::build()",
      "63": "SESealTest::::build()",
      "64": "SESealTest::::build()",
      "65": "SESealTest::::build()",
      "66": "SESealTest::::build()",
      "67": "SESealTest::::build()",
      "68": "SESealTest::::build()",
      "69": "SESealTest::::build()",
      "70": "SESealTest::::build()",
      "71": "SESealTest::::build()",
      "72": "SESealTest::::build()",
      "73": "SESealTest::::build()",
      "74": "SESealTest::::build()",
      "75": "SESealTest::::build()",
      "76": "SESealTest::::build()",
      "77": "SESealTest::::build()",
      "78": "SESealTest::::build()",
      "79": "SESealTest::::build()",
      "80": "SESealTest::::build()",
      "81": "SESealTest::::build()",
      "82": "SESealTest::::build()",
      "83": "SESealTest::::build()",
      "84": "SESealTest::::build()",
      "85": "SESealTest::::build()",
      "86": "SESealTest::::build()",
      "87": "SESealTest::::build()",
      "88": "SESealTest::::build()",
      "89": "SESealTest::::build()",
      "90": "SESealTest::::build()",
      "91": "SESealTest::::build()",
      "92": "SESealTest::::build()",
      "93": "SESealTest::::build()",
      "94": "SESealTest::::build()",
      "95": "SESealTest::::build()",
      "96": "SESealTest::::build()",
      "97": "SESealTest::::build()",
      "98": "SESealTest::::build()",
      "99": "SESealTest::::build()",
      "100": "SESealTest::::build()",
      "103": "SESealTest::::verify()",
      "104": "SESealTest::::verify()",
      "105": "SESealTest::::verify()",
      "106": "SESealTest::::verify()",
      "107": "SESealTest::::verify()",
      "108": "SESealTest::::verify()",
      "109": "SESealTest::::verify()",
      "110": "SESealTest::::verify()",
      "111": "SESealTest::::verify()",
      "112": "SESealTest::::verify()",
      "113": "SESealTest::::verify()",
      "114": "SESealTest::::verify()",
      "115": "SESealTest::::verify()",
      "116": "SESealTest::::verify()",
      "117": "SESealTest::::verify()",
      "118": "SESealTest::::verify()",
      "119": "SESealTest::::verify()",
      "120": "SESealTest::::verify()",
      "121": "SESealTest::::verify()",
      "122": "SESealTest::::verify()",
      "123": "SESealTest::::verify()"
    },
    "tests": [
      {
        "test_lines": [
          47,
          100
        ],
        "covered_lines": [
          39,
          40,
          83,
          84,
          97,
          98,
          106,
          107,
          120,
          121,
          126,
          127,
          128,
          129,
          130,
          131
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-gm/src/main/java/org/ofdrw/gm/support/KDF.java": {
    "class_content": [
      "package org.ofdrw.gm.support;\n",
      "\n",
      "import java.security.MessageDigest;\n",
      "\n",
      "/**\n",
      " * \u5bc6\u94a5\u6d3e\u751f\u51fd\u6570\n",
      " * <p>\n",
      " * GB/T 32918.3-2016 \u4fe1\u606f\u5b89\u5168\u6280\u672f SM2\u692d\u5706\u66f2\u7ebf\u516c\u94a5\u5bc6\u7801\u7b97\u6cd5 \u7b2c3\u90e8\u5206\uff1a\u5bc6\u94a5\u4ea4\u6362\u534f\u8bae\n",
      " * 5.4.3 \u5bc6\u94a5\u6d3e\u751f\u51fd\u6570\n",
      " * <p>\n",
      " * \u5bc6\u94a5\u6d3e\u751f\u51fd\u6570\u7684\u4f5c\u7528\u662f\u4ece\u4e00\u4e2a\u5171\u4eab\u7684\u79d8\u5bc6\u6bd4\u7279\u4e32\u4e2d\u6d3e\u751f\u51fa\u5bc6\u94a5\u6570\u636e\u3002\u5728\u5bc6\u94a5\u534f\u5546\u8fc7\u7a0b\u4e2d\uff0c\n",
      " * \u5bc6\u94a5\u6d3e\u751f\u51fd\u6570\u4f5c\u7528\u5728\u5bc6\u94a5\u4ea4\u6362\u6240\u83b7\u5171\u4eab\u7684\u79d8\u5bc6\u6bd4\u7279\u4e32\u4e0a\uff0c\u4ece\u4e2d\u4ea7\u751f\u6240\u9700\u8981\u7684\u4f1a\u8bdd\u5bc6\u94a5\u6216\n",
      " * \u8fdb\u4e00\u6b65\u52a0\u5bc6\u6240\u9700\u7684\u5bc6\u94a5\u6570\u636e\u3002\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2021-06-29 18:48:41\n",
      " */\n",
      "public final class KDF {\n",
      "\n",
      "    /**\n",
      "     * \u5bc6\u94a5\u6d3e\u751f\u51fd\u6570\n",
      "     *\n",
      "     * @param md   \u5bc6\u7801\u6742\u51d1\u7b97\u6cd5 Hv\n",
      "     * @param z    \u8f93\u5165\u6bd4\u7279\u4e32Z\n",
      "     * @param klen \u9884\u671f\u5bc6\u94a5\u957f\u5ea6\n",
      "     * @return \u6d3e\u751f\u5bc6\u94a5\n",
      "     */\n",
      "    public static byte[] extend(MessageDigest md, byte[] z, int klen) {\n",
      "        int v = md.getDigestLength();\n",
      "        byte[] K = new byte[klen];\n",
      "        // a) \u521d\u59cb\u5316\u4e00\u4e2a32\u6bd4\u7279\u6784\u6210\u7684\u8ba1\u6570\u5668 ct = 0x00000001\n",
      "        int ct = 0x00000001;\n",
      "        // b) \u5bf9 i \u4ece 1 \u5230 \u2308klen/v\u2309 \u6267\u884c\uff1a\n",
      "        byte[] hai = null;\n",
      "        // \u5411\u4e0a\u53d6\u6574 \u2308klen/v\u2309\n",
      "        int len = klen / v + (klen % v == 0 ? 0 : 1);\n",
      "        for (int i = 0; i < len; i++) {\n",
      "            // 1) \u8ba1\u7b97 Hai = Hv(Z || ct);\n",
      "            md.reset();\n",
      "            md.update(z);\n",
      "            md.update(new byte[]{\n",
      "                    (byte) (ct >>> 24),\n",
      "                    (byte) (ct >>> 16),\n",
      "                    (byte) (ct >>> 8),\n",
      "                    (byte) ct});\n",
      "            hai = md.digest();\n",
      "            // 2) ct++\n",
      "            ct++;\n",
      "            // c) \u82e5 \u2308klen/v\u2309  \u662f\u6574\u6570\uff0c\u4ee4 Ha!\u2308klen/v\u2309  =  Ha\u2308klen/v\u2309\n",
      "            //    \u5426\u5219\uff0c\u4ee4 Ha!\u2308klen/v\u2309  \u4e3a Ha\u2308klen/v\u2309 \u6700\u5de6\u8fb9\u7684(klen-(v*\u230aklen/v\u230b))\u6bd4\u7279\n",
      "            if (i + 1 == len && klen % v != 0) {\n",
      "                System.arraycopy(hai, 0, K, v * (klen / v), klen - (v * (klen / v)));\n",
      "            } else {\n",
      "                System.arraycopy(hai, 0, K, v * i, v);\n",
      "            }\n",
      "            // d) \u4ee4 K = Ha1 || Ha2 || ... || Ha\u2308klen/v\u2309-1 || Ha!\u2308klen/v\u2309\n",
      "        }\n",
      "\n",
      "        return K;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.gm.support;\n",
      "\n",
      "import org.bouncycastle.jcajce.provider.digest.SM3;\n",
      "import org.bouncycastle.util.encoders.Hex;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.*;\n",
      "\n",
      "/**\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2021-06-29 19:50:06\n",
      " */\n",
      "class KDFTest {\n",
      "\n",
      "    @Test\n",
      "    void extend() {\n",
      "        byte[] z, exp, actual;\n",
      "        int klen;\n",
      "        SM3.Digest h = new SM3.Digest();\n",
      "\n",
      "\n",
      "        z = Hex.decode(\"0B8CE0B16A4583A8643FF486DB0A9D7B1B95ED5444DE6E2A7E67E3924C2FA9\");\n",
      "        klen = 64;\n",
      "        exp = Hex.decode(\"5F868E0706F2D4F72B7C10D9937A50D146BC843C07E970DD6B9E7724CFE6224BC65817353192B29672392F806DCA491929630E0254DCF91656524131E6E20BF8\");\n",
      "        actual = KDF.extend(h, z, klen);\n",
      "        assertArrayEquals(exp, actual);\n",
      "\n",
      "\n",
      "        z = Hex.decode(\"74C993D3D9BAF368CAB6248177CE8EB3A9457C3629D7B163A3010FB4037F6873B6\");\n",
      "        klen = 16;\n",
      "        exp = Hex.decode(\"B737DBAA4B9BBAB19EE2EE423B9C3520\");\n",
      "        actual = KDF.extend(h, z, klen);\n",
      "        assertArrayEquals(exp, actual);\n",
      "\n",
      "        z = Hex.decode(\"BD719E7161906CC4\");\n",
      "        klen = 64;\n",
      "        exp = Hex.decode(\"B9170304308D1D2AACF1B69F33588F1601EB3070CC76CB8A4B741A1DB6FCE222B40D1914C126E503A89974E2BFC1DE842ECD67419BDCBA3D656B8E45E1F881B8\");\n",
      "        actual = KDF.extend(h, z, klen);\n",
      "        assertArrayEquals(exp, actual);\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "KDF::::extend(java.security.MessageDigest,byte[],int)": [
        28,
        60
      ]
    },
    "test_method_lines_dic": {
      "KDFTest::::extend()": [
        15,
        40
      ]
    },
    "reverse_method_lines_dic": {
      "28": "KDF::::extend(java.security.MessageDigest,byte[],int)",
      "29": "KDF::::extend(java.security.MessageDigest,byte[],int)",
      "30": "KDF::::extend(java.security.MessageDigest,byte[],int)",
      "31": "KDF::::extend(java.security.MessageDigest,byte[],int)",
      "32": "KDF::::extend(java.security.MessageDigest,byte[],int)",
      "33": "KDF::::extend(java.security.MessageDigest,byte[],int)",
      "34": "KDF::::extend(java.security.MessageDigest,byte[],int)",
      "35": "KDF::::extend(java.security.MessageDigest,byte[],int)",
      "36": "KDF::::extend(java.security.MessageDigest,byte[],int)",
      "37": "KDF::::extend(java.security.MessageDigest,byte[],int)",
      "38": "KDF::::extend(java.security.MessageDigest,byte[],int)",
      "39": "KDF::::extend(java.security.MessageDigest,byte[],int)",
      "40": "KDF::::extend(java.security.MessageDigest,byte[],int)",
      "41": "KDF::::extend(java.security.MessageDigest,byte[],int)",
      "42": "KDF::::extend(java.security.MessageDigest,byte[],int)",
      "43": "KDF::::extend(java.security.MessageDigest,byte[],int)",
      "44": "KDF::::extend(java.security.MessageDigest,byte[],int)",
      "45": "KDF::::extend(java.security.MessageDigest,byte[],int)",
      "46": "KDF::::extend(java.security.MessageDigest,byte[],int)",
      "47": "KDF::::extend(java.security.MessageDigest,byte[],int)",
      "48": "KDF::::extend(java.security.MessageDigest,byte[],int)",
      "49": "KDF::::extend(java.security.MessageDigest,byte[],int)",
      "50": "KDF::::extend(java.security.MessageDigest,byte[],int)",
      "51": "KDF::::extend(java.security.MessageDigest,byte[],int)",
      "52": "KDF::::extend(java.security.MessageDigest,byte[],int)",
      "53": "KDF::::extend(java.security.MessageDigest,byte[],int)",
      "54": "KDF::::extend(java.security.MessageDigest,byte[],int)",
      "55": "KDF::::extend(java.security.MessageDigest,byte[],int)",
      "56": "KDF::::extend(java.security.MessageDigest,byte[],int)",
      "57": "KDF::::extend(java.security.MessageDigest,byte[],int)",
      "58": "KDF::::extend(java.security.MessageDigest,byte[],int)",
      "59": "KDF::::extend(java.security.MessageDigest,byte[],int)",
      "60": "KDF::::extend(java.security.MessageDigest,byte[],int)"
    },
    "test_reverse_method_lines_dic": {
      "15": "KDFTest::::extend()",
      "16": "KDFTest::::extend()",
      "17": "KDFTest::::extend()",
      "18": "KDFTest::::extend()",
      "19": "KDFTest::::extend()",
      "20": "KDFTest::::extend()",
      "21": "KDFTest::::extend()",
      "22": "KDFTest::::extend()",
      "23": "KDFTest::::extend()",
      "24": "KDFTest::::extend()",
      "25": "KDFTest::::extend()",
      "26": "KDFTest::::extend()",
      "27": "KDFTest::::extend()",
      "28": "KDFTest::::extend()",
      "29": "KDFTest::::extend()",
      "30": "KDFTest::::extend()",
      "31": "KDFTest::::extend()",
      "32": "KDFTest::::extend()",
      "33": "KDFTest::::extend()",
      "34": "KDFTest::::extend()",
      "35": "KDFTest::::extend()",
      "36": "KDFTest::::extend()",
      "37": "KDFTest::::extend()",
      "38": "KDFTest::::extend()",
      "39": "KDFTest::::extend()",
      "40": "KDFTest::::extend()"
    },
    "tests": [
      {
        "test_lines": [
          15,
          40
        ],
        "covered_lines": [
          29,
          30,
          32,
          34,
          36,
          37,
          39,
          40,
          41,
          46,
          48,
          51,
          52,
          54,
          59
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-gm/src/main/java/org/ofdrw/gm/sm2strut/builder/SignedDataBuilder.java": {
    "class_content": [
      "package org.ofdrw.gm.sm2strut.builder;\n",
      "\n",
      "import org.bouncycastle.asn1.ASN1Encodable;\n",
      "import org.bouncycastle.asn1.ASN1Set;\n",
      "import org.bouncycastle.asn1.DEROctetString;\n",
      "import org.bouncycastle.asn1.DERSet;\n",
      "import org.bouncycastle.asn1.x509.AlgorithmIdentifier;\n",
      "import org.ofdrw.gm.cert.CertTools;\n",
      "import org.ofdrw.gm.sm2strut.*;\n",
      "\n",
      "import java.io.IOException;\n",
      "import java.security.cert.Certificate;\n",
      "import java.security.GeneralSecurityException;\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "\n",
      "import org.jetbrains.annotations.NotNull;\n",
      "\n",
      "\n",
      "/**\n",
      " * \u7b7e\u540d\u6570\u636e\u7c7b\u578b\u6784\u9020\u5668\n",
      " * <p>\n",
      " * \u7528\u4e8e\u5c06 BC JCE\u4ea7\u751f\u7684SM2\u7b7e\u540d\u8f6c\u6362\u4e3a \u7b26\u5408 GBT35275 8 \u7b7e\u540d\u6570\u636e\u7c7b\u578b signedData\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2021-08-05 18:17:14\n",
      " */\n",
      "public final class SignedDataBuilder {\n",
      "\n",
      "    /**\n",
      "     * \u7ec4\u88c5 \u7b7e\u540d\u6570\u636e\u7c7b\u578b\n",
      "     *\n",
      "     * @param plaintext   \u5f85\u7b7e\u540d\u7684\u539f\u6587\n",
      "     * @param signature   \u7b7e\u540d\u503c\n",
      "     * @param certificate \u7b7e\u540d\u4f7f\u7528\u7684\u8bc1\u4e66\n",
      "     * @return SignedData\n",
      "     * @throws GeneralSecurityException \u8bc1\u4e66\u89e3\u6790\u5f02\u5e38\n",
      "     * @throws IOException              IO\u64cd\u4f5c\u5f02\u5e38\n",
      "     */\n",
      "    public static SignedData signedData(@NotNull byte[] plaintext,\n",
      "                                        @NotNull byte[] signature,\n",
      "                                        @NotNull Certificate certificate) throws GeneralSecurityException, IOException {\n",
      "        if (plaintext == null || plaintext.length == 0) {\n",
      "            throw new IllegalArgumentException(\"\u7b7e\u540d\u539f\u6587(plaintext)\u4e3a\u7a7a\");\n",
      "        }\n",
      "        if (signature == null || signature.length == 0) {\n",
      "            throw new IllegalArgumentException(\"\u7b7e\u540d\u503c(signature)\u4e3a\u7a7a\");\n",
      "        }\n",
      "        if (certificate == null) {\n",
      "            throw new IllegalArgumentException(\"\u8bc1\u4e66(certificate)\u4e3a\u7a7a\");\n",
      "        }\n",
      "        ArrayList<CertSigHolder> certSigArr = new ArrayList<>(1);\n",
      "        certSigArr.add(new CertSigHolder(signature, certificate));\n",
      "        return signedData(plaintext, certSigArr, null);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u7ec4\u88c5 \u7b7e\u540d\u6570\u636e\u7c7b\u578b\n",
      "     *\n",
      "     * @param plaintext  \u5f85\u7b7e\u540d\u7684\u539f\u6587\n",
      "     * @param certSigArr \u8bc1\u4e66\u548c\u7b7e\u540d\u503c\n",
      "     * @param extCertArr \u989d\u5916\u8bc1\u4e66\uff0c\u53ef\u4ee5\u653e\u7f6eCA\u8bc1\u4e66\u7b49\uff0c\u53ef\u9009\u53c2\u6570\u3002\n",
      "     * @return SignedData\n",
      "     * @throws GeneralSecurityException \u8bc1\u4e66\u89e3\u6790\u5f02\u5e38\n",
      "     * @throws IOException              IO\u64cd\u4f5c\u5f02\u5e38\n",
      "     */\n",
      "    public static SignedData signedData(@NotNull byte[] plaintext,\n",
      "                                        @NotNull List<CertSigHolder> certSigArr,\n",
      "                                        List<Certificate> extCertArr)\n",
      "            throws GeneralSecurityException, IOException {\n",
      "        if (plaintext == null || plaintext.length == 0) {\n",
      "            throw new IllegalArgumentException(\"\u7b7e\u540d\u539f\u6587(plaintext)\u4e3a\u7a7a\");\n",
      "        }\n",
      "        if (certSigArr == null || certSigArr.isEmpty()) {\n",
      "            throw new IllegalArgumentException(\"\u8bc1\u4e66\u3001\u7b7e\u540d\u503c\u5217\u8868(signature)\u4e3a\u7a7a\");\n",
      "        }\n",
      "        // \u6d88\u606f\u6458\u8981\u7b97\u6cd5\u6807\u8bc6\u7b26\u7684\u96c6\u5408,\u56fa\u5b9a\u503c SM3\u7b97\u6cd5\n",
      "        ASN1Set digestAlgorithms = new DERSet(new AlgorithmIdentifier(OIDs.sm3));\n",
      "        // \u5f85\u7b7e\u540d\u7684 \u6570\u636e\u5185\u5bb9\n",
      "        ContentInfo contentInfo = new ContentInfo(OIDs.data, new DEROctetString(plaintext));\n",
      "\n",
      "        int len = certSigArr.size();\n",
      "        int i = 0;\n",
      "        if (extCertArr != null) {\n",
      "            len += extCertArr.size();\n",
      "        }\n",
      "\n",
      "        ASN1Encodable[] certArr = new ASN1Encodable[len];\n",
      "        for (CertSigHolder holder : certSigArr) {\n",
      "            certArr[i] = holder.getAsn1Cert();\n",
      "            i++;\n",
      "        }\n",
      "        // \u5982\u679c\u9644\u52a0\u7684\u8bc1\u4e66\u4e0d\u4e3a\u7a7a\uff0c\u90a3\u4e48\u8ffd\u52a0\u5230\u8bc1\u4e66\u5217\u8868\n",
      "        if (extCertArr != null && !extCertArr.isEmpty()) {\n",
      "            for (Certificate c : extCertArr) {\n",
      "                certArr[i] = CertTools.asn1(c);\n",
      "                i++;\n",
      "            }\n",
      "        }\n",
      "        ASN1Set certificates = new DERSet(certArr);\n",
      "        ASN1Encodable[] signers = new ASN1Encodable[certSigArr.size()];\n",
      "        for (int j = 0; j < certSigArr.size(); j++) {\n",
      "            CertSigHolder item = certSigArr.get(j);\n",
      "            // \u6784\u9020\u7b7e\u540d\u8005\u4fe1\u606f\n",
      "            signers[j] = sm2Signer(item.signature, item.getAsn1Cert());\n",
      "        }\n",
      "        ASN1Set signerInfos = new DERSet(signers);\n",
      "        // \u7ec4\u88c5\u5bf9\u8c61\n",
      "        return new SignedData(digestAlgorithms, contentInfo, certificates, signerInfos);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6784\u9020\u7b7e\u540d\u8005\u4fe1\u606f\n",
      "     *\n",
      "     * @param signature   \u7b7e\u540d\u503c\uff0c\u503c\u662f SM2Signature\u7684DER\uff0c\u5176\u5b9a\u4e49\u89c1 GBT 35276-2017 7.3 \u7b7e\u540d\u6570\u636e\u683c\u5f0f\n",
      "     * @param certificate \u8bc1\u4e66\n",
      "     * @return \u7b7e\u540d\u8005\u4fe1\u606f\n",
      "     */\n",
      "    public static SignerInfo sm2Signer(byte[] signature, org.bouncycastle.asn1.x509.Certificate certificate) {\n",
      "        IssuerAndSerialNumber issuerAndSerialNumber =\n",
      "                new IssuerAndSerialNumber(certificate.getIssuer(), certificate.getSerialNumber());\n",
      "        return new SignerInfo(\n",
      "                issuerAndSerialNumber,\n",
      "                new AlgorithmIdentifier(OIDs.sm3), // \u56fa\u5b9aSM3\u7b97\u6cd5\n",
      "                new AlgorithmIdentifier(OIDs.sm2Sign), // \u56fa\u5b9a SM2\u692d\u5706\u66f2\u7ebf\u6570\u5b57\u7b7e\u540d\u7b97\u6cd5\n",
      "                new DEROctetString(signature)\n",
      "        );\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.gm.sm2strut.builder;\n",
      "\n",
      "import org.bouncycastle.asn1.gm.GMObjectIdentifiers;\n",
      "import org.bouncycastle.cert.X509CertificateHolder;\n",
      "import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;\n",
      "import org.bouncycastle.jce.provider.BouncyCastleProvider;\n",
      "import org.bouncycastle.openssl.PEMKeyPair;\n",
      "import org.bouncycastle.openssl.PEMParser;\n",
      "import org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;\n",
      "import org.bouncycastle.openssl.jcajce.JcaPEMWriter;\n",
      "import org.bouncycastle.util.encoders.Base64;\n",
      "import org.junit.jupiter.api.Assertions;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.ofdrw.gm.sm2strut.SignedData;\n",
      "\n",
      "import java.io.*;\n",
      "import java.nio.charset.StandardCharsets;\n",
      "import java.nio.file.Files;\n",
      "import java.nio.file.Path;\n",
      "import java.nio.file.Paths;\n",
      "import java.security.*;\n",
      "import java.security.cert.CertificateException;\n",
      "import java.security.cert.X509Certificate;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.*;\n",
      "\n",
      "/**\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2021-08-05 19:46:17\n",
      " */\n",
      "class SignedDataBuilderTest {\n",
      "\n",
      "    /**\n",
      "     * \u6d4b\u8bd5\u6253\u5305\u7b7e\u540d\u503c\u4e3a GBT 35275 signedData\n",
      "     */\n",
      "    @Test\n",
      "    void signedData() throws Exception {\n",
      "        Security.addProvider(new BouncyCastleProvider());\n",
      "\n",
      "        Path certPemFile = Paths.get(\"src/test/resources\", \"sign_cert.pem\");\n",
      "        Path keyPemFile = Paths.get(\"src/test/resources\", \"sign_key.pem\");\n",
      "        try (final InputStream certOut = Files.newInputStream(certPemFile);\n",
      "             final InputStream keyOut = Files.newInputStream(keyPemFile);\n",
      "             final PEMParser certParser = new PEMParser(new InputStreamReader(certOut));\n",
      "             final PEMParser keyParser = new PEMParser(new InputStreamReader(keyOut))) {\n",
      "\n",
      "            // \u89e3\u6790\u8bc1\u4e66\n",
      "            final X509CertificateHolder certificateHolder = (X509CertificateHolder) certParser.readObject();\n",
      "            final X509Certificate certificate = new JcaX509CertificateConverter().setProvider(\"BC\").getCertificate(certificateHolder);\n",
      "            // \u89e3\u6790\u79c1\u94a5\n",
      "            JcaPEMKeyConverter converter = new JcaPEMKeyConverter().setProvider(\"BC\");\n",
      "            final PEMKeyPair pemKeyPair = (PEMKeyPair) keyParser.readObject();\n",
      "            final PrivateKey privateKey = converter.getPrivateKey(pemKeyPair.getPrivateKeyInfo());\n",
      "\n",
      "            // \u901a\u8fc7\u7b7e\u540d\u9a8c\u7b7e\u9a8c\u8bc1\n",
      "            Signature signature = Signature.getInstance(GMObjectIdentifiers.sm2sign_with_sm3.toString(), \"BC\");\n",
      "            signature.initSign(privateKey);\n",
      "            byte[] plainText = \"Hello world\".getBytes(StandardCharsets.UTF_8);\n",
      "            signature.update(plainText);\n",
      "            byte[] signatureValue = signature.sign();\n",
      "\n",
      "            final SignedData signedData = SignedDataBuilder.signedData(plainText, signatureValue, certificate);\n",
      "            final byte[] raw = signedData.getEncoded();\n",
      "            Path out = Paths.get(\"target/signed_data.dat\");\n",
      "            Files.write(out, raw);\n",
      "            System.out.println(\"GB/T 35275 \u7b7e\u540d\u503c\u4fdd\u5b58\u4f4d\u7f6e: \" + out.toAbsolutePath());\n",
      "            System.out.println(\"\\n\u4f7f\u7528 https://lapo.it/asn1js/ \u67e5\u770b\u7ed3\u6784\\n\\n\");\n",
      "            // \u4f7f\u7528 https://lapo.it/asn1js/ \u67e5\u770b\u7ed3\u6784\n",
      "            System.out.println(Base64.toBase64String(raw));\n",
      "\n",
      "            SignedData unmarshalled = SignedData.getInstance(raw);\n",
      "            assertNotNull(unmarshalled);\n",
      "        }\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "SignedDataBuilder::::signedData(byte[],byte[],java.security.cert.Certificate)": [
        40,
        55
      ],
      "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)": [
        67,
        110
      ]
    },
    "test_method_lines_dic": {
      "SignedDataBuilderTest::::signedData()": [
        36,
        74
      ]
    },
    "reverse_method_lines_dic": {
      "40": "SignedDataBuilder::::signedData(byte[],byte[],java.security.cert.Certificate)",
      "41": "SignedDataBuilder::::signedData(byte[],byte[],java.security.cert.Certificate)",
      "42": "SignedDataBuilder::::signedData(byte[],byte[],java.security.cert.Certificate)",
      "43": "SignedDataBuilder::::signedData(byte[],byte[],java.security.cert.Certificate)",
      "44": "SignedDataBuilder::::signedData(byte[],byte[],java.security.cert.Certificate)",
      "45": "SignedDataBuilder::::signedData(byte[],byte[],java.security.cert.Certificate)",
      "46": "SignedDataBuilder::::signedData(byte[],byte[],java.security.cert.Certificate)",
      "47": "SignedDataBuilder::::signedData(byte[],byte[],java.security.cert.Certificate)",
      "48": "SignedDataBuilder::::signedData(byte[],byte[],java.security.cert.Certificate)",
      "49": "SignedDataBuilder::::signedData(byte[],byte[],java.security.cert.Certificate)",
      "50": "SignedDataBuilder::::signedData(byte[],byte[],java.security.cert.Certificate)",
      "51": "SignedDataBuilder::::signedData(byte[],byte[],java.security.cert.Certificate)",
      "52": "SignedDataBuilder::::signedData(byte[],byte[],java.security.cert.Certificate)",
      "53": "SignedDataBuilder::::signedData(byte[],byte[],java.security.cert.Certificate)",
      "54": "SignedDataBuilder::::signedData(byte[],byte[],java.security.cert.Certificate)",
      "55": "SignedDataBuilder::::signedData(byte[],byte[],java.security.cert.Certificate)",
      "67": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "68": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "69": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "70": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "71": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "72": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "73": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "74": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "75": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "76": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "77": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "78": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "79": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "80": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "81": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "82": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "83": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "84": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "85": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "86": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "87": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "88": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "89": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "90": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "91": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "92": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "93": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "94": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "95": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "96": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "97": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "98": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "99": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "100": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "101": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "102": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "103": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "104": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "105": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "106": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "107": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "108": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "109": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)",
      "110": "SignedDataBuilder::::signedData(byte[],java.util.List<org.ofdrw.gm.sm2strut.builder.CertSigHolder>,java.util.List<java.security.cert.Certificate>)"
    },
    "test_reverse_method_lines_dic": {
      "36": "SignedDataBuilderTest::::signedData()",
      "37": "SignedDataBuilderTest::::signedData()",
      "38": "SignedDataBuilderTest::::signedData()",
      "39": "SignedDataBuilderTest::::signedData()",
      "40": "SignedDataBuilderTest::::signedData()",
      "41": "SignedDataBuilderTest::::signedData()",
      "42": "SignedDataBuilderTest::::signedData()",
      "43": "SignedDataBuilderTest::::signedData()",
      "44": "SignedDataBuilderTest::::signedData()",
      "45": "SignedDataBuilderTest::::signedData()",
      "46": "SignedDataBuilderTest::::signedData()",
      "47": "SignedDataBuilderTest::::signedData()",
      "48": "SignedDataBuilderTest::::signedData()",
      "49": "SignedDataBuilderTest::::signedData()",
      "50": "SignedDataBuilderTest::::signedData()",
      "51": "SignedDataBuilderTest::::signedData()",
      "52": "SignedDataBuilderTest::::signedData()",
      "53": "SignedDataBuilderTest::::signedData()",
      "54": "SignedDataBuilderTest::::signedData()",
      "55": "SignedDataBuilderTest::::signedData()",
      "56": "SignedDataBuilderTest::::signedData()",
      "57": "SignedDataBuilderTest::::signedData()",
      "58": "SignedDataBuilderTest::::signedData()",
      "59": "SignedDataBuilderTest::::signedData()",
      "60": "SignedDataBuilderTest::::signedData()",
      "61": "SignedDataBuilderTest::::signedData()",
      "62": "SignedDataBuilderTest::::signedData()",
      "63": "SignedDataBuilderTest::::signedData()",
      "64": "SignedDataBuilderTest::::signedData()",
      "65": "SignedDataBuilderTest::::signedData()",
      "66": "SignedDataBuilderTest::::signedData()",
      "67": "SignedDataBuilderTest::::signedData()",
      "68": "SignedDataBuilderTest::::signedData()",
      "69": "SignedDataBuilderTest::::signedData()",
      "70": "SignedDataBuilderTest::::signedData()",
      "71": "SignedDataBuilderTest::::signedData()",
      "72": "SignedDataBuilderTest::::signedData()",
      "73": "SignedDataBuilderTest::::signedData()",
      "74": "SignedDataBuilderTest::::signedData()"
    },
    "tests": [
      {
        "test_lines": [
          36,
          74
        ],
        "covered_lines": [
          43,
          46,
          49,
          52,
          53,
          54,
          71,
          74,
          78,
          80,
          82,
          83,
          84,
          88,
          89,
          90,
          91,
          92,
          94,
          100,
          101,
          102,
          103,
          105,
          107,
          109,
          120,
          121,
          122
        ]
      }
    ]
  }
}